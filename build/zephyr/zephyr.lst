
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	40 3b 01 24 d9 2a 00 08 25 a7 01 08 ad 2a 00 08     @;.$.*..%....*..
 8000010:	ad 2a 00 08 ad 2a 00 08 ad 2a 00 08 00 00 00 00     .*...*...*......
	...
 800002c:	cd 23 00 08 ad 2a 00 08 00 00 00 00 79 23 00 08     .#...*......y#..
 800003c:	cd 42 00 08                                         .B..

08000040 <_irq_vector_table>:
 8000040:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000050:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000060:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000070:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000080:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000090:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80000a0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80000b0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80000c0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80000d0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80000e0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80000f0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000100:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000110:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000120:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000130:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000140:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000150:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000160:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000170:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000180:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000190:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80001a0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80001b0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80001c0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80001d0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80001e0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80001f0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000200:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000210:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000220:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000230:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000240:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000250:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000260:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000270:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000280:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 8000290:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80002a0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80002b0:	71 24 00 08 71 24 00 08 71 24 00 08 71 24 00 08     q$..q$..q$..q$..
 80002c0:	71 24 00 08 71 24 00 08 71 24 00 08                 q$..q$..q$..

Disassembly of section text:

080002cc <__aeabi_uldivmod>:
 80002cc:	b953      	cbnz	r3, 80002e4 <__aeabi_uldivmod+0x18>
 80002ce:	b94a      	cbnz	r2, 80002e4 <__aeabi_uldivmod+0x18>
 80002d0:	2900      	cmp	r1, #0
 80002d2:	bf08      	it	eq
 80002d4:	2800      	cmpeq	r0, #0
 80002d6:	bf1c      	itt	ne
 80002d8:	f04f 31ff 	movne.w	r1, #4294967295
 80002dc:	f04f 30ff 	movne.w	r0, #4294967295
 80002e0:	f000 b80c 	b.w	80002fc <__aeabi_idiv0>
 80002e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ec:	f000 f808 	bl	8000300 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4770      	bx	lr

080002fc <__aeabi_idiv0>:
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	4686      	mov	lr, r0
 8000306:	468c      	mov	ip, r1
 8000308:	4608      	mov	r0, r1
 800030a:	9e08      	ldr	r6, [sp, #32]
 800030c:	4615      	mov	r5, r2
 800030e:	4674      	mov	r4, lr
 8000310:	4619      	mov	r1, r3
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 80c2 	bne.w	800049c <__udivmoddi4+0x19c>
 8000318:	4285      	cmp	r5, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d945      	bls.n	80003ac <__udivmoddi4+0xac>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x36>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	fa00 fc02 	lsl.w	ip, r0, r2
 800032a:	fa2e f303 	lsr.w	r3, lr, r3
 800032e:	4095      	lsls	r5, r2
 8000330:	ea43 0c0c 	orr.w	ip, r3, ip
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	b2a8      	uxth	r0, r5
 800033c:	fbbc f8fe 	udiv	r8, ip, lr
 8000340:	0c23      	lsrs	r3, r4, #16
 8000342:	fb0e cc18 	mls	ip, lr, r8, ip
 8000346:	fb08 f900 	mul.w	r9, r8, r0
 800034a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800034e:	4599      	cmp	r9, r3
 8000350:	d928      	bls.n	80003a4 <__udivmoddi4+0xa4>
 8000352:	18eb      	adds	r3, r5, r3
 8000354:	f108 37ff 	add.w	r7, r8, #4294967295
 8000358:	d204      	bcs.n	8000364 <__udivmoddi4+0x64>
 800035a:	4599      	cmp	r9, r3
 800035c:	d902      	bls.n	8000364 <__udivmoddi4+0x64>
 800035e:	f1a8 0702 	sub.w	r7, r8, #2
 8000362:	442b      	add	r3, r5
 8000364:	eba3 0309 	sub.w	r3, r3, r9
 8000368:	b2a4      	uxth	r4, r4
 800036a:	fbb3 fcfe 	udiv	ip, r3, lr
 800036e:	fb0e 331c 	mls	r3, lr, ip, r3
 8000372:	fb0c f000 	mul.w	r0, ip, r0
 8000376:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037a:	42a0      	cmp	r0, r4
 800037c:	d914      	bls.n	80003a8 <__udivmoddi4+0xa8>
 800037e:	192c      	adds	r4, r5, r4
 8000380:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000384:	d204      	bcs.n	8000390 <__udivmoddi4+0x90>
 8000386:	42a0      	cmp	r0, r4
 8000388:	d902      	bls.n	8000390 <__udivmoddi4+0x90>
 800038a:	f1ac 0302 	sub.w	r3, ip, #2
 800038e:	442c      	add	r4, r5
 8000390:	1a24      	subs	r4, r4, r0
 8000392:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	6034      	str	r4, [r6, #0]
 800039e:	6073      	str	r3, [r6, #4]
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	4647      	mov	r7, r8
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0x64>
 80003a8:	4663      	mov	r3, ip
 80003aa:	e7f1      	b.n	8000390 <__udivmoddi4+0x90>
 80003ac:	bb92      	cbnz	r2, 8000414 <__udivmoddi4+0x114>
 80003ae:	1b43      	subs	r3, r0, r5
 80003b0:	2101      	movs	r1, #1
 80003b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b6:	b2af      	uxth	r7, r5
 80003b8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003bc:	0c20      	lsrs	r0, r4, #16
 80003be:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c2:	fb0c f807 	mul.w	r8, ip, r7
 80003c6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ca:	4598      	cmp	r8, r3
 80003cc:	d962      	bls.n	8000494 <__udivmoddi4+0x194>
 80003ce:	18eb      	adds	r3, r5, r3
 80003d0:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003d4:	d204      	bcs.n	80003e0 <__udivmoddi4+0xe0>
 80003d6:	4598      	cmp	r8, r3
 80003d8:	d902      	bls.n	80003e0 <__udivmoddi4+0xe0>
 80003da:	f1ac 0002 	sub.w	r0, ip, #2
 80003de:	442b      	add	r3, r5
 80003e0:	eba3 0308 	sub.w	r3, r3, r8
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ea:	fb0e 331c 	mls	r3, lr, ip, r3
 80003ee:	fb0c f707 	mul.w	r7, ip, r7
 80003f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f6:	42a7      	cmp	r7, r4
 80003f8:	d94e      	bls.n	8000498 <__udivmoddi4+0x198>
 80003fa:	192c      	adds	r4, r5, r4
 80003fc:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000400:	d204      	bcs.n	800040c <__udivmoddi4+0x10c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	d902      	bls.n	800040c <__udivmoddi4+0x10c>
 8000406:	f1ac 0302 	sub.w	r3, ip, #2
 800040a:	442c      	add	r4, r5
 800040c:	1be4      	subs	r4, r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	e7c0      	b.n	8000396 <__udivmoddi4+0x96>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	4090      	lsls	r0, r2
 8000420:	fa2e f303 	lsr.w	r3, lr, r3
 8000424:	4303      	orrs	r3, r0
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	b2af      	uxth	r7, r5
 800042c:	fbb1 fcfe 	udiv	ip, r1, lr
 8000430:	fb0e 101c 	mls	r0, lr, ip, r1
 8000434:	0c19      	lsrs	r1, r3, #16
 8000436:	fb0c f807 	mul.w	r8, ip, r7
 800043a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800043e:	4588      	cmp	r8, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d922      	bls.n	800048c <__udivmoddi4+0x18c>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f10c 30ff 	add.w	r0, ip, #4294967295
 800044c:	d204      	bcs.n	8000458 <__udivmoddi4+0x158>
 800044e:	4588      	cmp	r8, r1
 8000450:	d902      	bls.n	8000458 <__udivmoddi4+0x158>
 8000452:	f1ac 0002 	sub.w	r0, ip, #2
 8000456:	4429      	add	r1, r5
 8000458:	eba1 0108 	sub.w	r1, r1, r8
 800045c:	b29b      	uxth	r3, r3
 800045e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000462:	fb0e 111c 	mls	r1, lr, ip, r1
 8000466:	fb0c f707 	mul.w	r7, ip, r7
 800046a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046e:	429f      	cmp	r7, r3
 8000470:	d90e      	bls.n	8000490 <__udivmoddi4+0x190>
 8000472:	18eb      	adds	r3, r5, r3
 8000474:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000478:	d204      	bcs.n	8000484 <__udivmoddi4+0x184>
 800047a:	429f      	cmp	r7, r3
 800047c:	d902      	bls.n	8000484 <__udivmoddi4+0x184>
 800047e:	f1ac 0102 	sub.w	r1, ip, #2
 8000482:	442b      	add	r3, r5
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048a:	e792      	b.n	80003b2 <__udivmoddi4+0xb2>
 800048c:	4660      	mov	r0, ip
 800048e:	e7e3      	b.n	8000458 <__udivmoddi4+0x158>
 8000490:	4661      	mov	r1, ip
 8000492:	e7f7      	b.n	8000484 <__udivmoddi4+0x184>
 8000494:	4660      	mov	r0, ip
 8000496:	e7a3      	b.n	80003e0 <__udivmoddi4+0xe0>
 8000498:	4663      	mov	r3, ip
 800049a:	e7b7      	b.n	800040c <__udivmoddi4+0x10c>
 800049c:	4283      	cmp	r3, r0
 800049e:	d906      	bls.n	80004ae <__udivmoddi4+0x1ae>
 80004a0:	b916      	cbnz	r6, 80004a8 <__udivmoddi4+0x1a8>
 80004a2:	2100      	movs	r1, #0
 80004a4:	4608      	mov	r0, r1
 80004a6:	e77b      	b.n	80003a0 <__udivmoddi4+0xa0>
 80004a8:	e9c6 e000 	strd	lr, r0, [r6]
 80004ac:	e7f9      	b.n	80004a2 <__udivmoddi4+0x1a2>
 80004ae:	fab3 f783 	clz	r7, r3
 80004b2:	b98f      	cbnz	r7, 80004d8 <__udivmoddi4+0x1d8>
 80004b4:	4283      	cmp	r3, r0
 80004b6:	d301      	bcc.n	80004bc <__udivmoddi4+0x1bc>
 80004b8:	4572      	cmp	r2, lr
 80004ba:	d808      	bhi.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	ebbe 0402 	subs.w	r4, lr, r2
 80004c0:	eb60 0303 	sbc.w	r3, r0, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	469c      	mov	ip, r3
 80004c8:	b91e      	cbnz	r6, 80004d2 <__udivmoddi4+0x1d2>
 80004ca:	2100      	movs	r1, #0
 80004cc:	e768      	b.n	80003a0 <__udivmoddi4+0xa0>
 80004ce:	4638      	mov	r0, r7
 80004d0:	e7fa      	b.n	80004c8 <__udivmoddi4+0x1c8>
 80004d2:	e9c6 4c00 	strd	r4, ip, [r6]
 80004d6:	e7f8      	b.n	80004ca <__udivmoddi4+0x1ca>
 80004d8:	f1c7 0c20 	rsb	ip, r7, #32
 80004dc:	40bb      	lsls	r3, r7
 80004de:	fa22 f40c 	lsr.w	r4, r2, ip
 80004e2:	431c      	orrs	r4, r3
 80004e4:	fa2e f10c 	lsr.w	r1, lr, ip
 80004e8:	fa20 f30c 	lsr.w	r3, r0, ip
 80004ec:	40b8      	lsls	r0, r7
 80004ee:	4301      	orrs	r1, r0
 80004f0:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80004f4:	fa0e f507 	lsl.w	r5, lr, r7
 80004f8:	fbb3 f8f9 	udiv	r8, r3, r9
 80004fc:	fa1f fe84 	uxth.w	lr, r4
 8000500:	fb09 3018 	mls	r0, r9, r8, r3
 8000504:	0c0b      	lsrs	r3, r1, #16
 8000506:	fb08 fa0e 	mul.w	sl, r8, lr
 800050a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800050e:	459a      	cmp	sl, r3
 8000510:	fa02 f207 	lsl.w	r2, r2, r7
 8000514:	d940      	bls.n	8000598 <__udivmoddi4+0x298>
 8000516:	18e3      	adds	r3, r4, r3
 8000518:	f108 30ff 	add.w	r0, r8, #4294967295
 800051c:	d204      	bcs.n	8000528 <__udivmoddi4+0x228>
 800051e:	459a      	cmp	sl, r3
 8000520:	d902      	bls.n	8000528 <__udivmoddi4+0x228>
 8000522:	f1a8 0002 	sub.w	r0, r8, #2
 8000526:	4423      	add	r3, r4
 8000528:	eba3 030a 	sub.w	r3, r3, sl
 800052c:	b289      	uxth	r1, r1
 800052e:	fbb3 f8f9 	udiv	r8, r3, r9
 8000532:	fb09 3318 	mls	r3, r9, r8, r3
 8000536:	fb08 fe0e 	mul.w	lr, r8, lr
 800053a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053e:	458e      	cmp	lr, r1
 8000540:	d92c      	bls.n	800059c <__udivmoddi4+0x29c>
 8000542:	1861      	adds	r1, r4, r1
 8000544:	f108 33ff 	add.w	r3, r8, #4294967295
 8000548:	d204      	bcs.n	8000554 <__udivmoddi4+0x254>
 800054a:	458e      	cmp	lr, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x254>
 800054e:	f1a8 0302 	sub.w	r3, r8, #2
 8000552:	4421      	add	r1, r4
 8000554:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000558:	fba0 9802 	umull	r9, r8, r0, r2
 800055c:	eba1 010e 	sub.w	r1, r1, lr
 8000560:	4541      	cmp	r1, r8
 8000562:	46ce      	mov	lr, r9
 8000564:	4643      	mov	r3, r8
 8000566:	d302      	bcc.n	800056e <__udivmoddi4+0x26e>
 8000568:	d106      	bne.n	8000578 <__udivmoddi4+0x278>
 800056a:	454d      	cmp	r5, r9
 800056c:	d204      	bcs.n	8000578 <__udivmoddi4+0x278>
 800056e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000572:	eb68 0304 	sbc.w	r3, r8, r4
 8000576:	3801      	subs	r0, #1
 8000578:	2e00      	cmp	r6, #0
 800057a:	d0a6      	beq.n	80004ca <__udivmoddi4+0x1ca>
 800057c:	ebb5 020e 	subs.w	r2, r5, lr
 8000580:	eb61 0103 	sbc.w	r1, r1, r3
 8000584:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000588:	fa22 f307 	lsr.w	r3, r2, r7
 800058c:	ea4c 0303 	orr.w	r3, ip, r3
 8000590:	40f9      	lsrs	r1, r7
 8000592:	e9c6 3100 	strd	r3, r1, [r6]
 8000596:	e798      	b.n	80004ca <__udivmoddi4+0x1ca>
 8000598:	4640      	mov	r0, r8
 800059a:	e7c5      	b.n	8000528 <__udivmoddi4+0x228>
 800059c:	4643      	mov	r3, r8
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x254>

080005a0 <main>:
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec lcd_bl = GPIO_DT_SPEC_GET(ZEPHYR_USER_NODE, bl_gpios);

int main(void)
{
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	printk("got here 1\r\n");
 80005a2:	483f      	ldr	r0, [pc, #252]	; (80006a0 <main+0x100>)
{
 80005a4:	b085      	sub	sp, #20
	printk("got here 1\r\n");
 80005a6:	f019 fc4e 	bl	8019e46 <printk>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 80005aa:	4c3e      	ldr	r4, [pc, #248]	; (80006a4 <main+0x104>)
 80005ac:	4620      	mov	r0, r4
 80005ae:	f027 fd29 	bl	8028004 <z_device_is_ready>
	int ret;

	if (!gpio_is_ready_dt(&lcd_bl)) {
 80005b2:	2800      	cmp	r0, #0
 80005b4:	d070      	beq.n	8000698 <main+0xf8>
		return -1;
	}
	printk("got here 2\r\n");
 80005b6:	483c      	ldr	r0, [pc, #240]	; (80006a8 <main+0x108>)
 80005b8:	f019 fc45 	bl	8019e46 <printk>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 80005bc:	6926      	ldr	r6, [r4, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
 80005be:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
	const struct gpio_driver_api *api =
 80005c2:	68a5      	ldr	r5, [r4, #8]
	return api->pin_configure(port, pin, flags);
 80005c4:	2106      	movs	r1, #6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80005c6:	6833      	ldr	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 80005c8:	4620      	mov	r0, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80005ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ce:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 80005d0:	682b      	ldr	r3, [r5, #0]
 80005d2:	4798      	blx	r3
	ret = gpio_pin_configure_dt(&lcd_bl, GPIO_OUTPUT_ACTIVE);
	if (ret < 0) {
 80005d4:	2800      	cmp	r0, #0
 80005d6:	db5f      	blt.n	8000698 <main+0xf8>
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80005d8:	6833      	ldr	r3, [r6, #0]
 80005da:	065b      	lsls	r3, r3, #25
	return api->port_clear_bits_raw(port, pins);
 80005dc:	f04f 0140 	mov.w	r1, #64	; 0x40
	return api->port_set_bits_raw(port, pins);
 80005e0:	bf54      	ite	pl
 80005e2:	68eb      	ldrpl	r3, [r5, #12]
	return api->port_clear_bits_raw(port, pins);
 80005e4:	692b      	ldrmi	r3, [r5, #16]
 80005e6:	4620      	mov	r0, r4
 80005e8:	4798      	blx	r3
		return -1;
	}
	gpio_pin_set_dt(&lcd_bl,1);
	printk("got here 3\r\n");
 80005ea:	4830      	ldr	r0, [pc, #192]	; (80006ac <main+0x10c>)
 80005ec:	f019 fc2b 	bl	8019e46 <printk>
	char count_str[11] = {0};
	const struct device *display_dev;
	lv_obj_t *hello_world_label;
	lv_obj_t *count_label;
	display_dev =DEVICE_DT_GET(DT_CHOSEN(zephyr_display));
	printk("got here 4\r\n");
 80005f0:	482f      	ldr	r0, [pc, #188]	; (80006b0 <main+0x110>)
 80005f2:	f019 fc28 	bl	8019e46 <printk>
	
	lv_obj_align(count_label, LV_ALIGN_OUT_BOTTOM_MID, 0, 0);
	printk("got here 10\r\n");
	
	display_blanking_off(display_dev);
	printk("got here 11\r\n");
 80005f6:	2664      	movs	r6, #100	; 0x64
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
 80005f8:	f011 fd7c 	bl	80120f4 <lv_disp_get_default>
		lv_task_handler();
		k_timeout_t t;
		t.ticks = 10;
		k_sleep(t);
		++count;
		if(count>99900) {
 80005fc:	4f2d      	ldr	r7, [pc, #180]	; (80006b4 <main+0x114>)
 80005fe:	f01a fddb 	bl	801b1b8 <lv_disp_get_scr_act>
	hello_world_label = lv_label_create(lv_scr_act());
 8000602:	f015 fe27 	bl	8016254 <lv_label_create>
 8000606:	4604      	mov	r4, r0
	printk("got here 6\r\n");
 8000608:	482b      	ldr	r0, [pc, #172]	; (80006b8 <main+0x118>)
 800060a:	f019 fc1c 	bl	8019e46 <printk>
	lv_label_set_text(hello_world_label, "Hello world!");
 800060e:	492b      	ldr	r1, [pc, #172]	; (80006bc <main+0x11c>)
 8000610:	4620      	mov	r0, r4
 8000612:	f026 fc67 	bl	8026ee4 <lv_label_set_text>
	printk("got here 7\r\n");
 8000616:	482a      	ldr	r0, [pc, #168]	; (80006c0 <main+0x120>)
 8000618:	f019 fc15 	bl	8019e46 <printk>
	lv_obj_align(hello_world_label,  LV_ALIGN_CENTER, 0, 0);
 800061c:	2300      	movs	r3, #0
 800061e:	2109      	movs	r1, #9
 8000620:	4620      	mov	r0, r4
 8000622:	461a      	mov	r2, r3
	uint32_t count = 0U;
 8000624:	2400      	movs	r4, #0
	lv_obj_align(hello_world_label,  LV_ALIGN_CENTER, 0, 0);
 8000626:	f01c f8db 	bl	801c7e0 <lv_obj_align>
	printk("got here 8\r\n");
 800062a:	4826      	ldr	r0, [pc, #152]	; (80006c4 <main+0x124>)
 800062c:	f019 fc0b 	bl	8019e46 <printk>
 8000630:	f011 fd60 	bl	80120f4 <lv_disp_get_default>
 8000634:	f01a fdc0 	bl	801b1b8 <lv_disp_get_scr_act>
	count_label = lv_label_create(lv_scr_act());
 8000638:	f015 fe0c 	bl	8016254 <lv_label_create>
 800063c:	4605      	mov	r5, r0
	printk("got here 9\r\n");
 800063e:	4822      	ldr	r0, [pc, #136]	; (80006c8 <main+0x128>)
 8000640:	f019 fc01 	bl	8019e46 <printk>
	lv_obj_align(count_label, LV_ALIGN_OUT_BOTTOM_MID, 0, 0);
 8000644:	2300      	movs	r3, #0
 8000646:	210e      	movs	r1, #14
 8000648:	4628      	mov	r0, r5
 800064a:	461a      	mov	r2, r3
 800064c:	f01c f8c8 	bl	801c7e0 <lv_obj_align>
	printk("got here 10\r\n");
 8000650:	481e      	ldr	r0, [pc, #120]	; (80006cc <main+0x12c>)
 8000652:	f019 fbf8 	bl	8019e46 <printk>
static inline int display_blanking_off(const struct device *dev)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	return api->blanking_off(dev);
 8000656:	481e      	ldr	r0, [pc, #120]	; (80006d0 <main+0x130>)
 8000658:	6883      	ldr	r3, [r0, #8]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	4798      	blx	r3
	printk("got here 11\r\n");
 800065e:	481d      	ldr	r0, [pc, #116]	; (80006d4 <main+0x134>)
 8000660:	f019 fbf1 	bl	8019e46 <printk>
 8000664:	fbb4 f3f6 	udiv	r3, r4, r6
 8000668:	fb06 4313 	mls	r3, r6, r3, r4
		if ((count % 100) == 0U) {
 800066c:	b94b      	cbnz	r3, 8000682 <main+0xe2>
			citoa(count/100,sz,10);
 800066e:	4669      	mov	r1, sp
 8000670:	220a      	movs	r2, #10
 8000672:	fbb4 f0f6 	udiv	r0, r4, r6
 8000676:	f019 fb4d 	bl	8019d14 <_Z5citoaiPci>
			lv_label_set_text(count_label, sz);
 800067a:	4669      	mov	r1, sp
 800067c:	4628      	mov	r0, r5
 800067e:	f026 fc31 	bl	8026ee4 <lv_label_set_text>
 * GLOBAL PROTOTYPES
 **********************/

static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_task_handler(void)
{
    return lv_timer_handler();
 8000682:	f012 fa13 	bl	8012aac <lv_timer_handler>
		++count;
 8000686:	3401      	adds	r4, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8000688:	200a      	movs	r0, #10
 800068a:	2100      	movs	r1, #0
 800068c:	f019 f88a 	bl	80197a4 <z_impl_k_sleep>
		if(count>99900) {
 8000690:	42bc      	cmp	r4, r7
 8000692:	d1e7      	bne.n	8000664 <main+0xc4>
			count = 0;
 8000694:	2400      	movs	r4, #0
 8000696:	e7ea      	b.n	800066e <main+0xce>
		}
	}

	return 0;
}
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	b005      	add	sp, #20
 800069e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a0:	08029f30 	.word	0x08029f30
 80006a4:	08028460 	.word	0x08028460
 80006a8:	08029f3d 	.word	0x08029f3d
 80006ac:	08029f4a 	.word	0x08029f4a
 80006b0:	08029f57 	.word	0x08029f57
 80006b4:	0001863d 	.word	0x0001863d
 80006b8:	08029f64 	.word	0x08029f64
 80006bc:	08029f71 	.word	0x08029f71
 80006c0:	08029f7e 	.word	0x08029f7e
 80006c4:	08029f8b 	.word	0x08029f8b
 80006c8:	08029f98 	.word	0x08029f98
 80006cc:	08029fa5 	.word	0x08029fa5
 80006d0:	080284d8 	.word	0x080284d8
 80006d4:	08029fb3 	.word	0x08029fb3

080006d8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 80006d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006dc:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 80006de:	0784      	lsls	r4, r0, #30
{
 80006e0:	4605      	mov	r5, r0
 80006e2:	460e      	mov	r6, r1
 80006e4:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
 80006e6:	f002 0304 	and.w	r3, r2, #4
 80006ea:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 80006ee:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 80006f0:	f3c2 03c2 	ubfx	r3, r2, #3, #3
{
 80006f4:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 80006f6:	f103 0301 	add.w	r3, r3, #1
 80006fa:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
 80006fc:	f040 81ba 	bne.w	8000a74 <cbvprintf_package+0x39c>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
 8000700:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 8000702:	b130      	cbz	r0, 8000712 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 8000704:	2907      	cmp	r1, #7
 8000706:	d809      	bhi.n	800071c <cbvprintf_package+0x44>
		return -ENOSPC;
 8000708:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 800070c:	b011      	add	sp, #68	; 0x44
 800070e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 8000712:	f001 0607 	and.w	r6, r1, #7
 8000716:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 8000718:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
 800071c:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 800071e:	f04f 0800 	mov.w	r8, #0
	align = VA_STACK_ALIGN(char *);
 8000722:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
 8000726:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
 8000728:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 800072c:	4647      	mov	r7, r8
	bool parsing = false;
 800072e:	46c3      	mov	fp, r8
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
 8000730:	9301      	str	r3, [sp, #4]
	size = sizeof(char *);
 8000732:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 8000734:	f8cd 8010 	str.w	r8, [sp, #16]
			if (buf0 != NULL) {
 8000738:	b10d      	cbz	r5, 800073e <cbvprintf_package+0x66>
				*(const char **)buf = s;
 800073a:	9a00      	ldr	r2, [sp, #0]
 800073c:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 800073e:	9805      	ldr	r0, [sp, #20]
 8000740:	2800      	cmp	r0, #0
 8000742:	f300 80e8 	bgt.w	8000916 <cbvprintf_package+0x23e>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 8000746:	4898      	ldr	r0, [pc, #608]	; (80009a8 <cbvprintf_package+0x2d0>)
 8000748:	9a00      	ldr	r2, [sp, #0]
 800074a:	4282      	cmp	r2, r0
 800074c:	d303      	bcc.n	8000756 <cbvprintf_package+0x7e>
 800074e:	4897      	ldr	r0, [pc, #604]	; (80009ac <cbvprintf_package+0x2d4>)
 8000750:	4282      	cmp	r2, r0
 8000752:	f0c0 80e0 	bcc.w	8000916 <cbvprintf_package+0x23e>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 8000756:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 8000758:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 800075c:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 800075e:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 8000762:	f100 8103 	bmi.w	800096c <cbvprintf_package+0x294>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 8000766:	2f0f      	cmp	r7, #15
 8000768:	f200 80b1 	bhi.w	80008ce <cbvprintf_package+0x1f6>
				if (buf0 != NULL) {
 800076c:	2d00      	cmp	r5, #0
 800076e:	f000 8105 	beq.w	800097c <cbvprintf_package+0x2a4>
					str_ptr_pos[s_idx] = s_ptr_idx;
 8000772:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000776:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
 800077a:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
 800077c:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
 8000780:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
 8000784:	9804      	ldr	r0, [sp, #16]
 8000786:	3001      	adds	r0, #1
 8000788:	9004      	str	r0, [sp, #16]
 800078a:	e0e7      	b.n	800095c <cbvprintf_package+0x284>
			switch (*fmt) {
 800078c:	287a      	cmp	r0, #122	; 0x7a
 800078e:	d85d      	bhi.n	800084c <cbvprintf_package+0x174>
 8000790:	284b      	cmp	r0, #75	; 0x4b
 8000792:	d80e      	bhi.n	80007b2 <cbvprintf_package+0xda>
 8000794:	2847      	cmp	r0, #71	; 0x47
 8000796:	d859      	bhi.n	800084c <cbvprintf_package+0x174>
 8000798:	2829      	cmp	r0, #41	; 0x29
 800079a:	d82d      	bhi.n	80007f8 <cbvprintf_package+0x120>
 800079c:	2825      	cmp	r0, #37	; 0x25
 800079e:	d052      	beq.n	8000846 <cbvprintf_package+0x16e>
 80007a0:	d854      	bhi.n	800084c <cbvprintf_package+0x174>
 80007a2:	2820      	cmp	r0, #32
 80007a4:	d07a      	beq.n	800089c <cbvprintf_package+0x1c4>
 80007a6:	3823      	subs	r0, #35	; 0x23
 80007a8:	f1d0 0b00 	rsbs	fp, r0, #0
 80007ac:	eb4b 0b00 	adc.w	fp, fp, r0
 80007b0:	e074      	b.n	800089c <cbvprintf_package+0x1c4>
 80007b2:	384c      	subs	r0, #76	; 0x4c
 80007b4:	282e      	cmp	r0, #46	; 0x2e
 80007b6:	d849      	bhi.n	800084c <cbvprintf_package+0x174>
 80007b8:	e8df f000 	tbb	[pc, r0]
 80007bc:	48484870 	.word	0x48484870
 80007c0:	48484848 	.word	0x48484848
 80007c4:	48484848 	.word	0x48484848
 80007c8:	4848484b 	.word	0x4848484b
 80007cc:	48484848 	.word	0x48484848
 80007d0:	4b485948 	.word	0x4b485948
 80007d4:	5959594b 	.word	0x5959594b
 80007d8:	486d4b70 	.word	0x486d4b70
 80007dc:	4b184870 	.word	0x4b184870
 80007e0:	82484818 	.word	0x82484818
 80007e4:	48484b7f 	.word	0x48484b7f
 80007e8:	484b      	.short	0x484b
 80007ea:	7f          	.byte	0x7f
 80007eb:	00          	.byte	0x00
 80007ec:	2000      	movs	r0, #0
 80007ee:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
 80007f2:	f04f 0a04 	mov.w	sl, #4
 80007f6:	e038      	b.n	800086a <cbvprintf_package+0x192>
			switch (*fmt) {
 80007f8:	382a      	subs	r0, #42	; 0x2a
 80007fa:	2201      	movs	r2, #1
 80007fc:	b2c0      	uxtb	r0, r0
 80007fe:	fa02 f000 	lsl.w	r0, r2, r0
 8000802:	ea10 0f0e 	tst.w	r0, lr
 8000806:	d149      	bne.n	800089c <cbvprintf_package+0x1c4>
 8000808:	f010 5c62 	ands.w	ip, r0, #947912704	; 0x38800000
 800080c:	d12f      	bne.n	800086e <cbvprintf_package+0x196>
 800080e:	ea10 0b02 	ands.w	fp, r0, r2
 8000812:	d043      	beq.n	800089c <cbvprintf_package+0x1c4>
 8000814:	4660      	mov	r0, ip
		buf = (void *) ROUND_UP(buf, align);
 8000816:	3c01      	subs	r4, #1
 8000818:	4454      	add	r4, sl
 800081a:	fbb4 f4fa 	udiv	r4, r4, sl
 800081e:	fb0a f404 	mul.w	r4, sl, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 8000822:	2d00      	cmp	r5, #0
 8000824:	d061      	beq.n	80008ea <cbvprintf_package+0x212>
 8000826:	eba3 0c05 	sub.w	ip, r3, r5
 800082a:	44a4      	add	ip, r4
 800082c:	45b4      	cmp	ip, r6
 800082e:	f63f af6b 	bhi.w	8000708 <cbvprintf_package+0x30>
		if (is_str_arg) {
 8000832:	2800      	cmp	r0, #0
 8000834:	d168      	bne.n	8000908 <cbvprintf_package+0x230>
		} else if (size == sizeof(int)) {
 8000836:	2b04      	cmp	r3, #4
 8000838:	d147      	bne.n	80008ca <cbvprintf_package+0x1f2>
			int v = va_arg(ap, int);
 800083a:	f859 3b04 	ldr.w	r3, [r9], #4
				*(int *)buf = v;
 800083e:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
 8000840:	3404      	adds	r4, #4
 8000842:	2304      	movs	r3, #4
 8000844:	e02a      	b.n	800089c <cbvprintf_package+0x1c4>
				arg_idx--;
 8000846:	9a01      	ldr	r2, [sp, #4]
 8000848:	3a01      	subs	r2, #1
 800084a:	9201      	str	r2, [sp, #4]
				parsing = false;
 800084c:	f04f 0b00 	mov.w	fp, #0
				continue;
 8000850:	e024      	b.n	800089c <cbvprintf_package+0x1c4>
				if (fmt[-1] == 'l') {
 8000852:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8000856:	286c      	cmp	r0, #108	; 0x6c
 8000858:	d134      	bne.n	80008c4 <cbvprintf_package+0x1ec>
					if (fmt[-2] == 'l') {
 800085a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 800085e:	2000      	movs	r0, #0
 8000860:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
 8000862:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
 8000864:	d1c5      	bne.n	80007f2 <cbvprintf_package+0x11a>
						align = VA_STACK_ALIGN(long long);
 8000866:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
 800086a:	4653      	mov	r3, sl
 800086c:	e7d3      	b.n	8000816 <cbvprintf_package+0x13e>
					v.ld = va_arg(ap, long double);
 800086e:	f109 0907 	add.w	r9, r9, #7
				buf = (void *) ROUND_UP(buf, align);
 8000872:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
 8000874:	f029 0907 	bic.w	r9, r9, #7
				buf = (void *) ROUND_UP(buf, align);
 8000878:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
 800087c:	e8f9 ab02 	ldrd	sl, fp, [r9], #8
				if (buf0 != NULL) {
 8000880:	b135      	cbz	r5, 8000890 <cbvprintf_package+0x1b8>
					if (BUF_OFFSET + size > len) {
 8000882:	9806      	ldr	r0, [sp, #24]
 8000884:	4420      	add	r0, r4
 8000886:	42b0      	cmp	r0, r6
 8000888:	f63f af3e 	bhi.w	8000708 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
 800088c:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
 8000890:	3408      	adds	r4, #8
				parsing = false;
 8000892:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
 8000896:	f04f 0a08 	mov.w	sl, #8
 800089a:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
 800089c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d078      	beq.n	8000996 <cbvprintf_package+0x2be>
			if (!parsing) {
 80008a4:	f1bb 0f00 	cmp.w	fp, #0
 80008a8:	f47f af70 	bne.w	800078c <cbvprintf_package+0xb4>
				if (*fmt == '%') {
 80008ac:	2825      	cmp	r0, #37	; 0x25
 80008ae:	d1f5      	bne.n	800089c <cbvprintf_package+0x1c4>
					arg_idx++;
 80008b0:	9b01      	ldr	r3, [sp, #4]
					parsing = true;
 80008b2:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
 80008b6:	3301      	adds	r3, #1
 80008b8:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
 80008ba:	f04f 0a04 	mov.w	sl, #4
 80008be:	e7ec      	b.n	800089a <cbvprintf_package+0x1c2>
			switch (*fmt) {
 80008c0:	4658      	mov	r0, fp
 80008c2:	e794      	b.n	80007ee <cbvprintf_package+0x116>
 80008c4:	2000      	movs	r0, #0
				parsing = false;
 80008c6:	4683      	mov	fp, r0
 80008c8:	e7a5      	b.n	8000816 <cbvprintf_package+0x13e>
		} else if (size == sizeof(long long)) {
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	d002      	beq.n	80008d4 <cbvprintf_package+0x1fc>
					return -EINVAL;
 80008ce:	f06f 0015 	mvn.w	r0, #21
 80008d2:	e71b      	b.n	800070c <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
 80008d4:	f109 0907 	add.w	r9, r9, #7
 80008d8:	f029 0907 	bic.w	r9, r9, #7
 80008dc:	e8f9 2302 	ldrd	r2, r3, [r9], #8
					*(long long *)buf = v;
 80008e0:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
 80008e4:	3408      	adds	r4, #8
 80008e6:	2308      	movs	r3, #8
 80008e8:	e7d8      	b.n	800089c <cbvprintf_package+0x1c4>
		if (is_str_arg) {
 80008ea:	b968      	cbnz	r0, 8000908 <cbvprintf_package+0x230>
		} else if (size == sizeof(int)) {
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d102      	bne.n	80008f6 <cbvprintf_package+0x21e>
			int v = va_arg(ap, int);
 80008f0:	f109 0904 	add.w	r9, r9, #4
			if (buf0 != NULL) {
 80008f4:	e7a4      	b.n	8000840 <cbvprintf_package+0x168>
		} else if (size == sizeof(long long)) {
 80008f6:	2b08      	cmp	r3, #8
 80008f8:	d1e9      	bne.n	80008ce <cbvprintf_package+0x1f6>
			long long v = va_arg(ap, long long);
 80008fa:	f109 0907 	add.w	r9, r9, #7
 80008fe:	f029 0907 	bic.w	r9, r9, #7
 8000902:	f109 0908 	add.w	r9, r9, #8
			if (buf0 != NULL) {
 8000906:	e7ed      	b.n	80008e4 <cbvprintf_package+0x20c>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8000908:	9a05      	ldr	r2, [sp, #20]
 800090a:	3a01      	subs	r2, #1
 800090c:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
 800090e:	f859 2b04 	ldr.w	r2, [r9], #4
 8000912:	9200      	str	r2, [sp, #0]
 8000914:	e710      	b.n	8000738 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
 8000916:	9a03      	ldr	r2, [sp, #12]
 8000918:	0790      	lsls	r0, r2, #30
 800091a:	d520      	bpl.n	800095e <cbvprintf_package+0x286>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 800091c:	eba4 0e05 	sub.w	lr, r4, r5
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8000920:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 8000924:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 8000928:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 800092c:	d2cf      	bcs.n	80008ce <cbvprintf_package+0x1f6>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 800092e:	2f0f      	cmp	r7, #15
 8000930:	d8cd      	bhi.n	80008ce <cbvprintf_package+0x1f6>
				if (buf0 != NULL) {
 8000932:	b1f5      	cbz	r5, 8000972 <cbvprintf_package+0x29a>
					str_ptr_pos[s_idx] = s_ptr_idx;
 8000934:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000938:	b2c0      	uxtb	r0, r0
 800093a:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
 800093e:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
 8000940:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
 8000944:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
 8000948:	f1bc 0f00 	cmp.w	ip, #0
 800094c:	f43f af1a 	beq.w	8000784 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 8000950:	f060 007f 	orn	r0, r0, #127	; 0x7f
						s_ro_cnt++;
 8000954:	f108 0801 	add.w	r8, r8, #1
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 8000958:	f80e 0c20 	strb.w	r0, [lr, #-32]
				s_idx++;
 800095c:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
 800095e:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
 8000962:	3404      	adds	r4, #4
			switch (*fmt) {
 8000964:	f64f 7eda 	movw	lr, #65498	; 0xffda
					if (BUF_OFFSET + size > len) {
 8000968:	9206      	str	r2, [sp, #24]
 800096a:	e797      	b.n	800089c <cbvprintf_package+0x1c4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 800096c:	f04f 0c00 	mov.w	ip, #0
 8000970:	e7da      	b.n	8000928 <cbvprintf_package+0x250>
				} else if (is_ro) {
 8000972:	f1bc 0f00 	cmp.w	ip, #0
 8000976:	d001      	beq.n	800097c <cbvprintf_package+0x2a4>
					len += 1;
 8000978:	3601      	adds	r6, #1
 800097a:	e7ef      	b.n	800095c <cbvprintf_package+0x284>
				} else if (rws_pos_en) {
 800097c:	9802      	ldr	r0, [sp, #8]
					len += 2;
 800097e:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
 8000980:	2800      	cmp	r0, #0
 8000982:	d1eb      	bne.n	800095c <cbvprintf_package+0x284>
					len += strlen(s) + 1 + 1;
 8000984:	9800      	ldr	r0, [sp, #0]
 8000986:	e9cd 3106 	strd	r3, r1, [sp, #24]
 800098a:	f019 fedf 	bl	801a74c <strlen>
 800098e:	4406      	add	r6, r0
 8000990:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 8000994:	e7e2      	b.n	800095c <cbvprintf_package+0x284>
	if (BUF_OFFSET / sizeof(int) > 255) {
 8000996:	1b63      	subs	r3, r4, r5
 8000998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800099c:	d297      	bcs.n	80008ce <cbvprintf_package+0x1f6>
	if (buf0 == NULL) {
 800099e:	b93d      	cbnz	r5, 80009b0 <cbvprintf_package+0x2d8>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 80009a0:	f1a6 0408 	sub.w	r4, r6, #8
 80009a4:	18e0      	adds	r0, r4, r3
 80009a6:	e6b1      	b.n	800070c <cbvprintf_package+0x34>
 80009a8:	080282b4 	.word	0x080282b4
 80009ac:	0802e1d0 	.word	0x0802e1d0
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
 80009b0:	089b      	lsrs	r3, r3, #2
	if (rws_pos_en) {
 80009b2:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
 80009b4:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
 80009b6:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
 80009b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
 80009bc:	b1c2      	cbz	r2, 80009f0 <cbvprintf_package+0x318>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
 80009be:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
 80009c0:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
 80009c4:	f1b8 0f00 	cmp.w	r8, #0
 80009c8:	d005      	beq.n	80009d6 <cbvprintf_package+0x2fe>
 80009ca:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
 80009cc:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
 80009ce:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
 80009d2:	4297      	cmp	r7, r2
 80009d4:	d10e      	bne.n	80009f4 <cbvprintf_package+0x31c>
		if (BUF_OFFSET + 1 + size > len) {
 80009d6:	f1c5 0301 	rsb	r3, r5, #1
 80009da:	f10d 0920 	add.w	r9, sp, #32
			*buf++ = str_ptr_arg[i];
 80009de:	f04f 0a00 	mov.w	sl, #0
 80009e2:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
		if (BUF_OFFSET + 1 + size > len) {
 80009e6:	9301      	str	r3, [sp, #4]
	for (i = 0; i < s_idx; i++) {
 80009e8:	4557      	cmp	r7, sl
 80009ea:	d112      	bne.n	8000a12 <cbvprintf_package+0x33a>
	return BUF_OFFSET;
 80009ec:	1b60      	subs	r0, r4, r5
 80009ee:	e68d      	b.n	800070c <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
 80009f0:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
 80009f2:	e7e5      	b.n	80009c0 <cbvprintf_package+0x2e8>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 80009f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80009f8:	0619      	lsls	r1, r3, #24
 80009fa:	d508      	bpl.n	8000a0e <cbvprintf_package+0x336>
			if (BUF_OFFSET + 1 > len) {
 80009fc:	eb04 0e0c 	add.w	lr, r4, ip
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 8000a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
 8000a04:	45b6      	cmp	lr, r6
 8000a06:	f63f ae7f 	bhi.w	8000708 <cbvprintf_package+0x30>
			*buf++ = pos;
 8000a0a:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
 8000a0e:	3201      	adds	r2, #1
 8000a10:	e7df      	b.n	80009d2 <cbvprintf_package+0x2fa>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 8000a12:	f1b8 0f00 	cmp.w	r8, #0
 8000a16:	d003      	beq.n	8000a20 <cbvprintf_package+0x348>
 8000a18:	f999 2000 	ldrsb.w	r2, [r9]
 8000a1c:	2a00      	cmp	r2, #0
 8000a1e:	db17      	blt.n	8000a50 <cbvprintf_package+0x378>
		if (rws_pos_en) {
 8000a20:	9b02      	ldr	r3, [sp, #8]
 8000a22:	b1d3      	cbz	r3, 8000a5a <cbvprintf_package+0x382>
			*buf++ = str_ptr_arg[i];
 8000a24:	f81a 200b 	ldrb.w	r2, [sl, fp]
 8000a28:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
 8000a2c:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
 8000a2e:	9b01      	ldr	r3, [sp, #4]
 8000a30:	1898      	adds	r0, r3, r2
 8000a32:	4420      	add	r0, r4
 8000a34:	42b0      	cmp	r0, r6
 8000a36:	f63f ae67 	bhi.w	8000708 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
 8000a3a:	f899 0000 	ldrb.w	r0, [r9]
		memcpy(buf, s, size);
 8000a3e:	9900      	ldr	r1, [sp, #0]
		*buf++ = str_ptr_pos[i];
 8000a40:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
 8000a44:	4620      	mov	r0, r4
 8000a46:	9203      	str	r2, [sp, #12]
 8000a48:	f019 fe93 	bl	801a772 <memcpy>
		buf += size;
 8000a4c:	9a03      	ldr	r2, [sp, #12]
 8000a4e:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
 8000a50:	f10a 0a01 	add.w	sl, sl, #1
 8000a54:	f109 0901 	add.w	r9, r9, #1
 8000a58:	e7c6      	b.n	80009e8 <cbvprintf_package+0x310>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 8000a5a:	f899 2000 	ldrb.w	r2, [r9]
 8000a5e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8000a62:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 8000a64:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
 8000a66:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 8000a68:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
 8000a6c:	f019 fe6e 	bl	801a74c <strlen>
 8000a70:	1c42      	adds	r2, r0, #1
 8000a72:	e7dc      	b.n	8000a2e <cbvprintf_package+0x356>
		return -EFAULT;
 8000a74:	f06f 000d 	mvn.w	r0, #13
 8000a78:	e648      	b.n	800070c <cbvprintf_package+0x34>
 8000a7a:	bf00      	nop

08000a7c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
 8000a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a80:	b095      	sub	sp, #84	; 0x54
 8000a82:	4604      	mov	r4, r0
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
 8000a8a:	61bb      	str	r3, [r7, #24]
 8000a8c:	f3cb 03c0 	ubfx	r3, fp, #3, #1
 8000a90:	627a      	str	r2, [r7, #36]	; 0x24
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
 8000a92:	6239      	str	r1, [r7, #32]
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	b951      	cbnz	r1, 8000aae <cbprintf_package_convert+0x32>
	buf += ros_nbr;
 8000a98:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
 8000a9a:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
 8000a9c:	7880      	ldrb	r0, [r0, #2]
 8000a9e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8000aa2:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	429e      	cmp	r6, r3
 8000aa8:	d81a      	bhi.n	8000ae0 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
 8000aaa:	1b03      	subs	r3, r0, r4
 8000aac:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
 8000aae:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
 8000ab2:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
 8000ab4:	4656      	mov	r6, sl
	rws_nbr = in_desc->rw_str_cnt;
 8000ab6:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
 8000ab8:	f1ba 0f00 	cmp.w	sl, #0
 8000abc:	d002      	beq.n	8000ac4 <cbprintf_package_convert+0x48>
 8000abe:	f01b 0f01 	tst.w	fp, #1
 8000ac2:	d117      	bne.n	8000af4 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	bb5b      	cbnz	r3, 8000b20 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	b11b      	cbz	r3, 8000ad4 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	4620      	mov	r0, r4
 8000ad0:	6a39      	ldr	r1, [r7, #32]
 8000ad2:	4798      	blx	r3
		}

		return in_len;
 8000ad4:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	3754      	adds	r7, #84	; 0x54
 8000ada:	46bd      	mov	sp, r7
 8000adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
 8000ae0:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	f019 fe32 	bl	801a74c <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
 8000aea:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
 8000aec:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
 8000aee:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
 8000af0:	623b      	str	r3, [r7, #32]
 8000af2:	e7d7      	b.n	8000aa4 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
 8000af4:	f894 8000 	ldrb.w	r8, [r4]
 8000af8:	6863      	ldr	r3, [r4, #4]
	args_size = in_desc->len * sizeof(int);
 8000afa:	ea4f 0288 	mov.w	r2, r8, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
 8000afe:	61fb      	str	r3, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
 8000b00:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
 8000b06:	60fa      	str	r2, [r7, #12]
	if (cb == NULL) {
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f040 8102 	bne.w	8000d12 <cbprintf_package_convert+0x296>
		out_len = (int)in_len;
 8000b0e:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
 8000b10:	46c1      	mov	r9, r8
 8000b12:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
 8000b16:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
 8000b18:	454b      	cmp	r3, r9
 8000b1a:	d14e      	bne.n	8000bba <cbprintf_package_convert+0x13e>
 8000b1c:	44d0      	add	r8, sl
 8000b1e:	e013      	b.n	8000b48 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
 8000b20:	f01b 0f02 	tst.w	fp, #2
 8000b24:	d0d0      	beq.n	8000ac8 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
 8000b26:	f894 8000 	ldrb.w	r8, [r4]
 8000b2a:	ea4f 0388 	mov.w	r3, r8, lsl #2
	uint8_t *str_pos = &buf[args_size];
 8000b2e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	args_size = in_desc->len * sizeof(int);
 8000b32:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
 8000b34:	6863      	ldr	r3, [r4, #4]
 8000b36:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d178      	bne.n	8000c30 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
 8000b3e:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 8000b40:	f1ba 0f00 	cmp.w	sl, #0
 8000b44:	d14e      	bne.n	8000be4 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
 8000b46:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
 8000b48:	f01b 0f05 	tst.w	fp, #5
 8000b4c:	bf0c      	ite	eq
 8000b4e:	2302      	moveq	r3, #2
 8000b50:	2301      	movne	r3, #1
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 8000b5a:	f00b 0302 	and.w	r3, fp, #2
 8000b5e:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
 8000b60:	45d0      	cmp	r8, sl
 8000b62:	d0b8      	beq.n	8000ad6 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
 8000b64:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
 8000b68:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8000b6c:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
 8000b70:	4bad      	ldr	r3, [pc, #692]	; (8000e28 <cbprintf_package_convert+0x3ac>)
 8000b72:	4599      	cmp	r9, r3
 8000b74:	d302      	bcc.n	8000b7c <cbprintf_package_convert+0x100>
 8000b76:	4bad      	ldr	r3, [pc, #692]	; (8000e2c <cbprintf_package_convert+0x3b0>)
 8000b78:	4599      	cmp	r9, r3
 8000b7a:	d339      	bcc.n	8000bf0 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d043      	beq.n	8000c0a <cbprintf_package_convert+0x18e>
 8000b82:	69f8      	ldr	r0, [r7, #28]
 8000b84:	f019 f926 	bl	8019dd4 <is_ptr>
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d03e      	beq.n	8000c0a <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
 8000b8c:	46e9      	mov	r9, sp
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	466a      	mov	r2, sp
 8000b92:	4ba7      	ldr	r3, [pc, #668]	; (8000e30 <cbprintf_package_convert+0x3b4>)
 8000b94:	6153      	str	r3, [r2, #20]
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	e9c2 3106 	strd	r3, r1, [r2, #24]
 8000b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba0:	8413      	strh	r3, [r2, #32]
 8000ba2:	4ba4      	ldr	r3, [pc, #656]	; (8000e34 <cbprintf_package_convert+0x3b8>)
 8000ba4:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f44f 5112 	mov.w	r1, #9344	; 0x2480
 8000bae:	48a2      	ldr	r0, [pc, #648]	; (8000e38 <cbprintf_package_convert+0x3bc>)
				out_len -= 2;
 8000bb0:	3d02      	subs	r5, #2
 8000bb2:	f001 f811 	bl	8001bd8 <z_impl_z_log_msg_static_create>
 8000bb6:	46cd      	mov	sp, r9
				continue;
 8000bb8:	e7d2      	b.n	8000b60 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
 8000bba:	f819 2b01 	ldrb.w	r2, [r9], #1
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
 8000bc0:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8000bc4:	f019 fdc2 	bl	801a74c <strlen>
				if (strl && strl_cnt < strl_len) {
 8000bc8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
 8000bca:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	b13a      	cbz	r2, 8000be0 <cbprintf_package_convert+0x164>
 8000bd0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000bd4:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
 8000bd6:	bf3e      	ittt	cc
 8000bd8:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
 8000bda:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
 8000bde:	3601      	addcc	r6, #1
				out_len += len;
 8000be0:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
 8000be2:	e799      	b.n	8000b18 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 8000be4:	f01b 0604 	ands.w	r6, fp, #4
				str_pos += ros_nbr;
 8000be8:	bf1c      	itt	ne
 8000bea:	44d0      	addne	r8, sl
	size_t strl_cnt = 0;
 8000bec:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
 8000bee:	e7ab      	b.n	8000b48 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	b123      	cbz	r3, 8000bfe <cbprintf_package_convert+0x182>
 8000bf4:	69f8      	ldr	r0, [r7, #28]
 8000bf6:	f019 f8ed 	bl	8019dd4 <is_ptr>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	d1c6      	bne.n	8000b8c <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 8000bfe:	f01b 0f01 	tst.w	fp, #1
 8000c02:	d105      	bne.n	8000c10 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	1aed      	subs	r5, r5, r3
 8000c08:	e7aa      	b.n	8000b60 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 8000c0a:	6a3b      	ldr	r3, [r7, #32]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0a7      	beq.n	8000b60 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
 8000c10:	4648      	mov	r0, r9
 8000c12:	f019 fd9b 	bl	801a74c <strlen>
				if (strl && strl_cnt < strl_len) {
 8000c16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c18:	b143      	cbz	r3, 8000c2c <cbprintf_package_convert+0x1b0>
 8000c1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c1e:	429e      	cmp	r6, r3
		return 1 + strlen(str);
 8000c20:	bf3f      	itttt	cc
 8000c22:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
 8000c24:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
 8000c26:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
 8000c2a:	3601      	addcc	r6, #1
				out_len += (len - 1);
 8000c2c:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
 8000c2e:	e797      	b.n	8000b60 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 8000c30:	f1ba 0f00 	cmp.w	sl, #0
 8000c34:	d072      	beq.n	8000d1c <cbprintf_package_convert+0x2a0>
 8000c36:	f01b 0604 	ands.w	r6, fp, #4
 8000c3a:	d072      	beq.n	8000d22 <cbprintf_package_convert+0x2a6>
		keep_cnt = ros_nbr;
 8000c3c:	46d1      	mov	r9, sl
		scpy_cnt = 0;
 8000c3e:	2600      	movs	r6, #0
		dst = keep_str_pos;
 8000c40:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
 8000c44:	4652      	mov	r2, sl
 8000c46:	4641      	mov	r1, r8
 8000c48:	f019 fd93 	bl	801a772 <memcpy>
	str_pos += ros_nbr;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8000c5a:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 8000c5c:	f00b 0302 	and.w	r3, fp, #2
 8000c60:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	4598      	cmp	r8, r3
 8000c66:	d15e      	bne.n	8000d26 <cbprintf_package_convert+0x2aa>
	out_desc.len = in_desc->len;
 8000c68:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 8000c6a:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
 8000c6e:	61fb      	str	r3, [r7, #28]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 8000c70:	bf08      	it	eq
 8000c72:	ea4f 0159 	moveq.w	r1, r9, lsr #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 8000c76:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 8000c78:	bf18      	it	ne
 8000c7a:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 8000c7c:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 8000c80:	eb06 0203 	add.w	r2, r6, r3
 8000c84:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 8000c86:	f040 809d 	bne.w	8000dc4 <cbprintf_package_convert+0x348>
 8000c8a:	f01b 0f04 	tst.w	fp, #4
 8000c8e:	bf14      	ite	ne
 8000c90:	4648      	movne	r0, r9
 8000c92:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
 8000c94:	f894 b002 	ldrb.w	fp, [r4, #2]
 8000c98:	f894 8003 	ldrb.w	r8, [r4, #3]
 8000c9c:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
 8000c9e:	7062      	strb	r2, [r4, #1]
 8000ca0:	70a0      	strb	r0, [r4, #2]
	rv = cb(in_packaged, args_size, ctx);
 8000ca2:	4620      	mov	r0, r4
	*in_desc = out_desc;
 8000ca4:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	68f9      	ldr	r1, [r7, #12]
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	4798      	blx	r3
	if (rv < 0) {
 8000cae:	1e05      	subs	r5, r0, #0
 8000cb0:	f6ff af11 	blt.w	8000ad6 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
 8000cb4:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8000cb6:	4649      	mov	r1, r9
	*in_desc = in_desc_backup;
 8000cb8:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8000cbc:	f107 0040 	add.w	r0, r7, #64	; 0x40
	*in_desc = in_desc_backup;
 8000cc0:	7023      	strb	r3, [r4, #0]
 8000cc2:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8000cc4:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
 8000cc6:	7063      	strb	r3, [r4, #1]
 8000cc8:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	4798      	blx	r3
	if (rv < 0) {
 8000cd0:	f1b0 0800 	subs.w	r8, r0, #0
 8000cd4:	f2c0 80a3 	blt.w	8000e1e <cbprintf_package_convert+0x3a2>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
 8000cda:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
 8000cdc:	eba3 010a 	sub.w	r1, r3, sl
 8000ce0:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
 8000ce2:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
 8000ce4:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	1ac9      	subs	r1, r1, r3
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	4798      	blx	r3
	if (rv < 0) {
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	f2c0 8097 	blt.w	8000e22 <cbprintf_package_convert+0x3a6>
	out_len += rv;
 8000cf4:	44a8      	add	r8, r5
	for (unsigned int i = 0; i < scpy_cnt; i++) {
 8000cf6:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
 8000cfa:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	out_len += rv;
 8000cfe:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
 8000d02:	45b3      	cmp	fp, r6
 8000d04:	d360      	bcc.n	8000dc8 <cbprintf_package_convert+0x34c>
	(void)cb(NULL, 0, ctx);
 8000d06:	2100      	movs	r1, #0
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	4798      	blx	r3
	return out_len;
 8000d10:	e6e1      	b.n	8000ad6 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
 8000d12:	f04f 0900 	mov.w	r9, #0
 8000d16:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d1a:	e793      	b.n	8000c44 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
 8000d1c:	4656      	mov	r6, sl
		keep_cnt = 0;
 8000d1e:	46d1      	mov	r9, sl
 8000d20:	e794      	b.n	8000c4c <cbprintf_package_convert+0x1d0>
 8000d22:	46b1      	mov	r9, r6
 8000d24:	e792      	b.n	8000c4c <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
 8000d26:	f818 1b02 	ldrb.w	r1, [r8], #2
 8000d2a:	4a3f      	ldr	r2, [pc, #252]	; (8000e28 <cbprintf_package_convert+0x3ac>)
		uint8_t arg_pos = *str_pos++;
 8000d2c:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
 8000d30:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d302      	bcc.n	8000d3e <cbprintf_package_convert+0x2c2>
 8000d38:	4a3c      	ldr	r2, [pc, #240]	; (8000e2c <cbprintf_package_convert+0x3b0>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d31c      	bcc.n	8000d78 <cbprintf_package_convert+0x2fc>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	b123      	cbz	r3, 8000d4c <cbprintf_package_convert+0x2d0>
 8000d42:	69f8      	ldr	r0, [r7, #28]
 8000d44:	f019 f846 	bl	8019dd4 <is_ptr>
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	d18a      	bne.n	8000c62 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	b9f3      	cbnz	r3, 8000d8e <cbprintf_package_convert+0x312>
				keep_str_pos[keep_cnt++] = arg_idx;
 8000d50:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8000d54:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000d58:	f109 0301 	add.w	r3, r9, #1
				keep_str_pos[keep_cnt++] = arg_pos;
 8000d5c:	f109 0902 	add.w	r9, r9, #2
				keep_str_pos[keep_cnt++] = arg_idx;
 8000d60:	4402      	add	r2, r0
				keep_str_pos[keep_cnt++] = arg_pos;
 8000d62:	fa5f f989 	uxtb.w	r9, r9
				keep_str_pos[keep_cnt++] = arg_idx;
 8000d66:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
 8000d6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d6e:	fa52 f383 	uxtab	r3, r2, r3
 8000d72:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
 8000d76:	e774      	b.n	8000c62 <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	b12b      	cbz	r3, 8000d88 <cbprintf_package_convert+0x30c>
 8000d7c:	69f8      	ldr	r0, [r7, #28]
 8000d7e:	f019 f829 	bl	8019dd4 <is_ptr>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	f47f af6d 	bne.w	8000c62 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 8000d88:	f01b 0f01 	tst.w	fp, #1
 8000d8c:	d009      	beq.n	8000da2 <cbprintf_package_convert+0x326>
				cpy_str_pos[scpy_cnt++] = arg_pos;
 8000d8e:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8000d92:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d96:	1c73      	adds	r3, r6, #1
 8000d98:	1856      	adds	r6, r2, r1
 8000d9a:	f806 5c20 	strb.w	r5, [r6, #-32]
 8000d9e:	b2de      	uxtb	r6, r3
 8000da0:	e75f      	b.n	8000c62 <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 8000da2:	f01b 0f04 	tst.w	fp, #4
 8000da6:	f43f af5c 	beq.w	8000c62 <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
 8000daa:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8000dae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000db2:	f109 0301 	add.w	r3, r9, #1
 8000db6:	eb02 0901 	add.w	r9, r2, r1
 8000dba:	f809 5c10 	strb.w	r5, [r9, #-16]
 8000dbe:	fa5f f983 	uxtb.w	r9, r3
 8000dc2:	e74e      	b.n	8000c62 <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	e765      	b.n	8000c94 <cbprintf_package_convert+0x218>
		uint8_t loc = cpy_str_pos[i];
 8000dc8:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
 8000dcc:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
 8000dd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
 8000dd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dd6:	b1fb      	cbz	r3, 8000e18 <cbprintf_package_convert+0x39c>
 8000dd8:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	2101      	movs	r1, #1
 8000de0:	f107 002f 	add.w	r0, r7, #47	; 0x2f
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	4798      	blx	r3
		if (rv < 0) {
 8000de8:	2800      	cmp	r0, #0
 8000dea:	db1a      	blt.n	8000e22 <cbprintf_package_convert+0x3a6>
		out_len += rv;
 8000dec:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
 8000dee:	f1b8 0f00 	cmp.w	r8, #0
 8000df2:	d106      	bne.n	8000e02 <cbprintf_package_convert+0x386>
 8000df4:	4648      	mov	r0, r9
 8000df6:	f019 fca9 	bl	801a74c <strlen>
 8000dfa:	f100 0801 	add.w	r8, r0, #1
 8000dfe:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4641      	mov	r1, r8
 8000e06:	4648      	mov	r0, r9
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	4798      	blx	r3
		if (rv < 0) {
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	db08      	blt.n	8000e22 <cbprintf_package_convert+0x3a6>
		out_len += rv;
 8000e10:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
 8000e12:	f10b 0b01 	add.w	fp, fp, #1
 8000e16:	e774      	b.n	8000d02 <cbprintf_package_convert+0x286>
		uint16_t str_len = strl ? strl[i] : 0;
 8000e18:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
 8000e1c:	e7de      	b.n	8000ddc <cbprintf_package_convert+0x360>
 8000e1e:	4645      	mov	r5, r8
 8000e20:	e659      	b.n	8000ad6 <cbprintf_package_convert+0x5a>
 8000e22:	4605      	mov	r5, r0
 8000e24:	e657      	b.n	8000ad6 <cbprintf_package_convert+0x5a>
 8000e26:	bf00      	nop
 8000e28:	080282b4 	.word	0x080282b4
 8000e2c:	0802e1d0 	.word	0x0802e1d0
 8000e30:	08029fc5 	.word	0x08029fc5
 8000e34:	01000004 	.word	0x01000004
 8000e38:	08028a0c 	.word	0x08028a0c

08000e3c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
 8000e3c:	4b01      	ldr	r3, [pc, #4]	; (8000e44 <__printk_hook_install+0x8>)
 8000e3e:	6018      	str	r0, [r3, #0]
}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	24000000 	.word	0x24000000

08000e48 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8000e48:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
 8000e4a:	2500      	movs	r5, #0
{
 8000e4c:	b087      	sub	sp, #28
 8000e4e:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 8000e50:	9500      	str	r5, [sp, #0]
	struct str_context ctx = { str, size, 0 };
 8000e52:	9505      	str	r5, [sp, #20]
 8000e54:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8000e58:	a903      	add	r1, sp, #12
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <vsnprintk+0x28>)
 8000e5c:	f000 f80a 	bl	8000e74 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
 8000e60:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8000e64:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 8000e66:	bfb8      	it	lt
 8000e68:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 8000e6a:	b007      	add	sp, #28
 8000e6c:	bd30      	pop	{r4, r5, pc}
 8000e6e:	bf00      	nop
 8000e70:	08019e23 	.word	0x08019e23

08000e74 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8000e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e78:	4681      	mov	r9, r0
 8000e7a:	b095      	sub	sp, #84	; 0x54
 8000e7c:	468b      	mov	fp, r1
 8000e7e:	4617      	mov	r7, r2
 8000e80:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8000e82:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000e84:	7838      	ldrb	r0, [r7, #0]
 8000e86:	b908      	cbnz	r0, 8000e8c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000e88:	4628      	mov	r0, r5
 8000e8a:	e358      	b.n	800153e <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
 8000e8c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 8000e8e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000e90:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 8000e92:	d006      	beq.n	8000ea2 <z_cbvprintf_impl+0x2e>
			OUTC('%');
 8000e94:	4659      	mov	r1, fp
 8000e96:	47c8      	blx	r9
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	f2c0 8350 	blt.w	800153e <z_cbvprintf_impl+0x6ca>
 8000e9e:	3501      	adds	r5, #1
		if (bps == NULL) {
 8000ea0:	e1fb      	b.n	800129a <z_cbvprintf_impl+0x426>
		} state = {
 8000ea2:	2218      	movs	r2, #24
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	a80e      	add	r0, sp, #56	; 0x38
 8000ea8:	f019 fc6e 	bl	801a788 <memset>
	if (*sp == '%') {
 8000eac:	787b      	ldrb	r3, [r7, #1]
 8000eae:	2b25      	cmp	r3, #37	; 0x25
 8000eb0:	d07d      	beq.n	8000fae <z_cbvprintf_impl+0x13a>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	1c78      	adds	r0, r7, #1
 8000eb6:	4698      	mov	r8, r3
 8000eb8:	469e      	mov	lr, r3
 8000eba:	469c      	mov	ip, r3
 8000ebc:	461e      	mov	r6, r3
 8000ebe:	4601      	mov	r1, r0
		switch (*sp) {
 8000ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ec4:	2a2b      	cmp	r2, #43	; 0x2b
 8000ec6:	f000 80a1 	beq.w	800100c <z_cbvprintf_impl+0x198>
 8000eca:	f200 8098 	bhi.w	8000ffe <z_cbvprintf_impl+0x18a>
 8000ece:	2a20      	cmp	r2, #32
 8000ed0:	f000 809f 	beq.w	8001012 <z_cbvprintf_impl+0x19e>
 8000ed4:	2a23      	cmp	r2, #35	; 0x23
 8000ed6:	f000 809f 	beq.w	8001018 <z_cbvprintf_impl+0x1a4>
 8000eda:	b12b      	cbz	r3, 8000ee8 <z_cbvprintf_impl+0x74>
 8000edc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000ee8:	f1b8 0f00 	cmp.w	r8, #0
 8000eec:	d005      	beq.n	8000efa <z_cbvprintf_impl+0x86>
 8000eee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000ef2:	f043 0320 	orr.w	r3, r3, #32
 8000ef6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000efa:	f1be 0f00 	cmp.w	lr, #0
 8000efe:	d005      	beq.n	8000f0c <z_cbvprintf_impl+0x98>
 8000f00:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000f0c:	f1bc 0f00 	cmp.w	ip, #0
 8000f10:	d005      	beq.n	8000f1e <z_cbvprintf_impl+0xaa>
 8000f12:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000f16:	f043 0308 	orr.w	r3, r3, #8
 8000f1a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000f1e:	b12e      	cbz	r6, 8000f2c <z_cbvprintf_impl+0xb8>
 8000f20:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 8000f2c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000f30:	f003 0044 	and.w	r0, r3, #68	; 0x44
 8000f34:	2844      	cmp	r0, #68	; 0x44
 8000f36:	d103      	bne.n	8000f40 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 8000f38:	f36f 1386 	bfc	r3, #6, #1
 8000f3c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 8000f40:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 8000f44:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 8000f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 8000f4e:	d17f      	bne.n	8001050 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
 8000f50:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 8000f54:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 8000f56:	f042 0201 	orr.w	r2, r2, #1
 8000f5a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	2a2e      	cmp	r2, #46	; 0x2e
 8000f62:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000f66:	bf0c      	ite	eq
 8000f68:	2101      	moveq	r1, #1
 8000f6a:	2100      	movne	r1, #0
 8000f6c:	f361 0241 	bfi	r2, r1, #1, #1
 8000f70:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 8000f74:	d178      	bne.n	8001068 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
 8000f76:	785a      	ldrb	r2, [r3, #1]
 8000f78:	2a2a      	cmp	r2, #42	; 0x2a
 8000f7a:	d06e      	beq.n	800105a <z_cbvprintf_impl+0x1e6>
	++sp;
 8000f7c:	3301      	adds	r3, #1
	size_t val = 0;
 8000f7e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000f80:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8000f84:	4619      	mov	r1, r3
 8000f86:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000f8a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 8000f8e:	2e09      	cmp	r6, #9
 8000f90:	f240 8095 	bls.w	80010be <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 8000f94:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 8000f98:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 8000f9a:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8000f9e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	f360 0241 	bfi	r2, r0, #1, #1
 8000fa8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000fac:	e05c      	b.n	8001068 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
 8000fae:	1cba      	adds	r2, r7, #2
 8000fb0:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 8000fb4:	9203      	str	r2, [sp, #12]
		if (conv->width_star) {
 8000fb6:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8000fba:	07da      	lsls	r2, r3, #31
 8000fbc:	f140 812e 	bpl.w	800121c <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
 8000fc0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 8000fc4:	f1b8 0f00 	cmp.w	r8, #0
 8000fc8:	da07      	bge.n	8000fda <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
 8000fca:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
 8000fce:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
 8000fd2:	f042 0204 	orr.w	r2, r2, #4
 8000fd6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
 8000fda:	075e      	lsls	r6, r3, #29
 8000fdc:	f140 8127 	bpl.w	800122e <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
 8000fe0:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 8000fe4:	f1ba 0f00 	cmp.w	sl, #0
 8000fe8:	f280 8126 	bge.w	8001238 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
 8000fec:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8000ff0:	f36f 0341 	bfc	r3, #1, #1
 8000ff4:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 8000ff8:	f04f 3aff 	mov.w	sl, #4294967295
 8000ffc:	e11c      	b.n	8001238 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
 8000ffe:	2a2d      	cmp	r2, #45	; 0x2d
 8001000:	d00d      	beq.n	800101e <z_cbvprintf_impl+0x1aa>
 8001002:	2a30      	cmp	r2, #48	; 0x30
 8001004:	f47f af69 	bne.w	8000eda <z_cbvprintf_impl+0x66>
 8001008:	2301      	movs	r3, #1
	} while (loop);
 800100a:	e758      	b.n	8000ebe <z_cbvprintf_impl+0x4a>
		switch (*sp) {
 800100c:	f04f 0c01 	mov.w	ip, #1
 8001010:	e755      	b.n	8000ebe <z_cbvprintf_impl+0x4a>
 8001012:	f04f 0e01 	mov.w	lr, #1
 8001016:	e752      	b.n	8000ebe <z_cbvprintf_impl+0x4a>
 8001018:	f04f 0801 	mov.w	r8, #1
 800101c:	e74f      	b.n	8000ebe <z_cbvprintf_impl+0x4a>
 800101e:	2601      	movs	r6, #1
 8001020:	e74d      	b.n	8000ebe <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
 8001022:	fb0e 6202 	mla	r2, lr, r2, r6
 8001026:	4603      	mov	r3, r0
 8001028:	3a30      	subs	r2, #48	; 0x30
 800102a:	4618      	mov	r0, r3
 800102c:	f810 6b01 	ldrb.w	r6, [r0], #1
 8001030:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 8001034:	f1bc 0f09 	cmp.w	ip, #9
 8001038:	d9f3      	bls.n	8001022 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
 800103a:	4299      	cmp	r1, r3
 800103c:	d08f      	beq.n	8000f5e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 800103e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 8001042:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 8001044:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 8001046:	f362 0141 	bfi	r1, r2, #1, #1
 800104a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 800104e:	e786      	b.n	8000f5e <z_cbvprintf_impl+0xea>
 8001050:	460b      	mov	r3, r1
	size_t val = 0;
 8001052:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8001054:	f04f 0e0a 	mov.w	lr, #10
 8001058:	e7e7      	b.n	800102a <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
 800105a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 800105e:	3302      	adds	r3, #2
		conv->prec_star = true;
 8001060:	f042 0204 	orr.w	r2, r2, #4
 8001064:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	2a6c      	cmp	r2, #108	; 0x6c
 800106c:	d047      	beq.n	80010fe <z_cbvprintf_impl+0x28a>
 800106e:	d82b      	bhi.n	80010c8 <z_cbvprintf_impl+0x254>
 8001070:	2a68      	cmp	r2, #104	; 0x68
 8001072:	d031      	beq.n	80010d8 <z_cbvprintf_impl+0x264>
 8001074:	2a6a      	cmp	r2, #106	; 0x6a
 8001076:	d04b      	beq.n	8001110 <z_cbvprintf_impl+0x29c>
 8001078:	2a4c      	cmp	r2, #76	; 0x4c
 800107a:	d051      	beq.n	8001120 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
 800107c:	461a      	mov	r2, r3
 800107e:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
 8001082:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
 8001084:	9203      	str	r2, [sp, #12]
 8001086:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
 800108a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
 800108e:	f200 80be 	bhi.w	800120e <z_cbvprintf_impl+0x39a>
 8001092:	2b6d      	cmp	r3, #109	; 0x6d
 8001094:	d851      	bhi.n	800113a <z_cbvprintf_impl+0x2c6>
 8001096:	2b69      	cmp	r3, #105	; 0x69
 8001098:	f200 80b9 	bhi.w	800120e <z_cbvprintf_impl+0x39a>
 800109c:	2b57      	cmp	r3, #87	; 0x57
 800109e:	d867      	bhi.n	8001170 <z_cbvprintf_impl+0x2fc>
 80010a0:	2b41      	cmp	r3, #65	; 0x41
 80010a2:	d003      	beq.n	80010ac <z_cbvprintf_impl+0x238>
 80010a4:	3b45      	subs	r3, #69	; 0x45
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	f200 80b1 	bhi.w	800120e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 80010ac:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80010b0:	2204      	movs	r2, #4
 80010b2:	f362 0302 	bfi	r3, r2, #0, #3
 80010b6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 80010ba:	2301      	movs	r3, #1
			break;
 80010bc:	e073      	b.n	80011a6 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
 80010be:	fb0c 0202 	mla	r2, ip, r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	3a30      	subs	r2, #48	; 0x30
 80010c6:	e75d      	b.n	8000f84 <z_cbvprintf_impl+0x110>
	switch (*sp) {
 80010c8:	2a74      	cmp	r2, #116	; 0x74
 80010ca:	d025      	beq.n	8001118 <z_cbvprintf_impl+0x2a4>
 80010cc:	2a7a      	cmp	r2, #122	; 0x7a
 80010ce:	d1d5      	bne.n	800107c <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
 80010d0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80010d4:	2106      	movs	r1, #6
 80010d6:	e00c      	b.n	80010f2 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
 80010d8:	785a      	ldrb	r2, [r3, #1]
 80010da:	2a68      	cmp	r2, #104	; 0x68
 80010dc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80010e0:	d106      	bne.n	80010f0 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
 80010e2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 80010e4:	f361 02c6 	bfi	r2, r1, #3, #4
			++sp;
 80010e8:	3302      	adds	r3, #2
			conv->length_mod = LENGTH_LL;
 80010ea:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 80010ee:	e7c5      	b.n	800107c <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
 80010f0:	2102      	movs	r1, #2
 80010f2:	f361 02c6 	bfi	r2, r1, #3, #4
 80010f6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 80010fa:	3301      	adds	r3, #1
 80010fc:	e7be      	b.n	800107c <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
 80010fe:	785a      	ldrb	r2, [r3, #1]
 8001100:	2a6c      	cmp	r2, #108	; 0x6c
 8001102:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8001106:	d101      	bne.n	800110c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
 8001108:	2104      	movs	r1, #4
 800110a:	e7eb      	b.n	80010e4 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
 800110c:	2103      	movs	r1, #3
 800110e:	e7f0      	b.n	80010f2 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
 8001110:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8001114:	2105      	movs	r1, #5
 8001116:	e7ec      	b.n	80010f2 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
 8001118:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800111c:	2107      	movs	r1, #7
 800111e:	e7e8      	b.n	80010f2 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
 8001120:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8001124:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001128:	f022 0202 	bic.w	r2, r2, #2
 800112c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001130:	f042 0202 	orr.w	r2, r2, #2
 8001134:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 8001138:	e7df      	b.n	80010fa <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
 800113a:	3b6e      	subs	r3, #110	; 0x6e
 800113c:	b2d9      	uxtb	r1, r3
 800113e:	2301      	movs	r3, #1
 8001140:	408b      	lsls	r3, r1
 8001142:	f240 4182 	movw	r1, #1154	; 0x482
 8001146:	420b      	tst	r3, r1
 8001148:	d137      	bne.n	80011ba <z_cbvprintf_impl+0x346>
 800114a:	f013 0f24 	tst.w	r3, #36	; 0x24
 800114e:	d151      	bne.n	80011f4 <z_cbvprintf_impl+0x380>
 8001150:	07d8      	lsls	r0, r3, #31
 8001152:	d55c      	bpl.n	800120e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 8001154:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8001158:	2103      	movs	r1, #3
 800115a:	f361 0302 	bfi	r3, r1, #0, #3
 800115e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001162:	f002 0378 	and.w	r3, r2, #120	; 0x78
 8001166:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 800116a:	424b      	negs	r3, r1
 800116c:	414b      	adcs	r3, r1
 800116e:	e01a      	b.n	80011a6 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
 8001170:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 8001174:	2001      	movs	r0, #1
 8001176:	b2c9      	uxtb	r1, r1
 8001178:	fa00 f101 	lsl.w	r1, r0, r1
 800117c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 8001180:	d194      	bne.n	80010ac <z_cbvprintf_impl+0x238>
 8001182:	f640 0601 	movw	r6, #2049	; 0x801
 8001186:	4231      	tst	r1, r6
 8001188:	d11d      	bne.n	80011c6 <z_cbvprintf_impl+0x352>
 800118a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 800118e:	d03e      	beq.n	800120e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 8001190:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8001194:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001198:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_SINT;
 800119c:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 80011a0:	2a40      	cmp	r2, #64	; 0x40
 80011a2:	d034      	beq.n	800120e <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
 80011a4:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 80011a6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80011aa:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80011ae:	430b      	orrs	r3, r1
 80011b0:	f363 0241 	bfi	r2, r3, #1, #1
 80011b4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 80011b8:	e6fd      	b.n	8000fb6 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 80011ba:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80011be:	2102      	movs	r1, #2
 80011c0:	f361 0302 	bfi	r3, r1, #0, #3
 80011c4:	e7e8      	b.n	8001198 <z_cbvprintf_impl+0x324>
 80011c6:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
 80011ca:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 80011cc:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 80011d0:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80011d4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 80011d6:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 80011da:	bf02      	ittt	eq
 80011dc:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 80011e0:	f041 0101 	orreq.w	r1, r1, #1
 80011e4:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 80011e8:	2b63      	cmp	r3, #99	; 0x63
 80011ea:	d1db      	bne.n	80011a4 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80011ec:	1e13      	subs	r3, r2, #0
 80011ee:	bf18      	it	ne
 80011f0:	2301      	movne	r3, #1
 80011f2:	e7d8      	b.n	80011a6 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 80011f4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80011f8:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 80011fa:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 80011fe:	f361 0302 	bfi	r3, r1, #0, #3
 8001202:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 8001206:	bf14      	ite	ne
 8001208:	2301      	movne	r3, #1
 800120a:	2300      	moveq	r3, #0
 800120c:	e7cb      	b.n	80011a6 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
 800120e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 800121a:	e7c3      	b.n	80011a4 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
 800121c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 8001220:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8001222:	bfb4      	ite	lt
 8001224:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
 8001228:	f04f 38ff 	movge.w	r8, #4294967295
 800122c:	e6d5      	b.n	8000fda <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
 800122e:	0798      	lsls	r0, r3, #30
 8001230:	f57f aee2 	bpl.w	8000ff8 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
 8001234:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
 8001238:	2300      	movs	r3, #0
			= (enum length_mod_enum)conv->length_mod;
 800123a:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_pre_exp = 0;
 800123e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 8001242:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
 8001246:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		enum specifier_cat_enum specifier_cat
 800124a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 800124e:	2b01      	cmp	r3, #1
 8001250:	d133      	bne.n	80012ba <z_cbvprintf_impl+0x446>
			switch (length_mod) {
 8001252:	1ecb      	subs	r3, r1, #3
 8001254:	2b04      	cmp	r3, #4
 8001256:	d804      	bhi.n	8001262 <z_cbvprintf_impl+0x3ee>
 8001258:	e8df f003 	tbb	[pc, r3]
 800125c:	21464621 	.word	0x21464621
 8001260:	21          	.byte	0x21
 8001261:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8001262:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 8001264:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 8001266:	ea4f 72e3 	mov.w	r2, r3, asr #31
 800126a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 800126e:	d11c      	bne.n	80012aa <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
 8001270:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 8001274:	17da      	asrs	r2, r3, #31
 8001276:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
 800127a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 800127c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8001280:	f013 0603 	ands.w	r6, r3, #3
 8001284:	d050      	beq.n	8001328 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
 8001286:	9b03      	ldr	r3, [sp, #12]
 8001288:	463a      	mov	r2, r7
 800128a:	4659      	mov	r1, fp
 800128c:	4648      	mov	r0, r9
 800128e:	f018 ff1f 	bl	801a0d0 <outs>
 8001292:	2800      	cmp	r0, #0
 8001294:	f2c0 8153 	blt.w	800153e <z_cbvprintf_impl+0x6ca>
 8001298:	4405      	add	r5, r0
			continue;
 800129a:	9f03      	ldr	r7, [sp, #12]
 800129c:	e5f2      	b.n	8000e84 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 800129e:	f854 3b04 	ldr.w	r3, [r4], #4
 80012a2:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 80012a4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 80012a8:	e7e8      	b.n	800127c <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
 80012aa:	2902      	cmp	r1, #2
 80012ac:	d1e5      	bne.n	800127a <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	f343 33c0 	sbfx	r3, r3, #15, #1
 80012b4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80012b8:	e7df      	b.n	800127a <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d124      	bne.n	8001308 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
 80012be:	1ecb      	subs	r3, r1, #3
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d804      	bhi.n	80012ce <z_cbvprintf_impl+0x45a>
 80012c4:	e8df f003 	tbb	[pc, r3]
 80012c8:	18101018 	.word	0x18101018
 80012cc:	18          	.byte	0x18
 80012cd:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 80012ce:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
 80012d0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	d014      	beq.n	8001304 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
 80012da:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 80012dc:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 80012e0:	d1cc      	bne.n	800127c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
 80012e2:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 80012e4:	930e      	str	r3, [sp, #56]	; 0x38
 80012e6:	e7c9      	b.n	800127c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
 80012e8:	3407      	adds	r4, #7
 80012ea:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 80012ee:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 80012f2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 80012f6:	e7c1      	b.n	800127c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
 80012f8:	f854 3b04 	ldr.w	r3, [r4], #4
 80012fc:	930e      	str	r3, [sp, #56]	; 0x38
 80012fe:	2300      	movs	r3, #0
 8001300:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 8001302:	e7bb      	b.n	800127c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
 8001304:	b2db      	uxtb	r3, r3
 8001306:	e7cd      	b.n	80012a4 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
 8001308:	2b04      	cmp	r3, #4
 800130a:	d108      	bne.n	800131e <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 800130c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 800130e:	f024 0407 	bic.w	r4, r4, #7
 8001312:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001316:	3408      	adds	r4, #8
 8001318:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800131c:	e7ae      	b.n	800127c <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
 800131e:	2b03      	cmp	r3, #3
 8001320:	d1ac      	bne.n	800127c <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
 8001322:	f854 3b04 	ldr.w	r3, [r4], #4
 8001326:	e7dd      	b.n	80012e4 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
 8001328:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 800132c:	2878      	cmp	r0, #120	; 0x78
 800132e:	d8b4      	bhi.n	800129a <z_cbvprintf_impl+0x426>
 8001330:	2862      	cmp	r0, #98	; 0x62
 8001332:	d81c      	bhi.n	800136e <z_cbvprintf_impl+0x4fa>
 8001334:	2825      	cmp	r0, #37	; 0x25
 8001336:	f43f adad 	beq.w	8000e94 <z_cbvprintf_impl+0x20>
 800133a:	2858      	cmp	r0, #88	; 0x58
 800133c:	d1ad      	bne.n	800129a <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
 800133e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8001342:	aa10      	add	r2, sp, #64	; 0x40
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	ab08      	add	r3, sp, #32
 8001348:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800134c:	f018 fe7a 	bl	801a044 <encode_uint>
			if (precision >= 0) {
 8001350:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 8001354:	4607      	mov	r7, r0
			if (precision >= 0) {
 8001356:	f280 809a 	bge.w	800148e <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
 800135a:	2f00      	cmp	r7, #0
 800135c:	d09d      	beq.n	800129a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 800135e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8001362:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 8001364:	2e00      	cmp	r6, #0
 8001366:	f000 80c1 	beq.w	80014ec <z_cbvprintf_impl+0x678>
			nj_len += 1U;
 800136a:	3001      	adds	r0, #1
 800136c:	e0be      	b.n	80014ec <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
 800136e:	3863      	subs	r0, #99	; 0x63
 8001370:	2815      	cmp	r0, #21
 8001372:	d892      	bhi.n	800129a <z_cbvprintf_impl+0x426>
 8001374:	a201      	add	r2, pc, #4	; (adr r2, 800137c <z_cbvprintf_impl+0x508>)
 8001376:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 800137a:	bf00      	nop
 800137c:	08001451 	.word	0x08001451
 8001380:	08001463 	.word	0x08001463
 8001384:	0800129b 	.word	0x0800129b
 8001388:	0800129b 	.word	0x0800129b
 800138c:	0800129b 	.word	0x0800129b
 8001390:	0800129b 	.word	0x0800129b
 8001394:	08001463 	.word	0x08001463
 8001398:	0800129b 	.word	0x0800129b
 800139c:	0800129b 	.word	0x0800129b
 80013a0:	0800129b 	.word	0x0800129b
 80013a4:	0800129b 	.word	0x0800129b
 80013a8:	080014f1 	.word	0x080014f1
 80013ac:	08001489 	.word	0x08001489
 80013b0:	080014af 	.word	0x080014af
 80013b4:	0800129b 	.word	0x0800129b
 80013b8:	0800129b 	.word	0x0800129b
 80013bc:	080013d5 	.word	0x080013d5
 80013c0:	0800129b 	.word	0x0800129b
 80013c4:	08001489 	.word	0x08001489
 80013c8:	0800129b 	.word	0x0800129b
 80013cc:	0800129b 	.word	0x0800129b
 80013d0:	08001489 	.word	0x08001489
			if (precision >= 0) {
 80013d4:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 80013d8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 80013da:	db35      	blt.n	8001448 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
 80013dc:	4651      	mov	r1, sl
 80013de:	4638      	mov	r0, r7
 80013e0:	f019 f9eb 	bl	801a7ba <strnlen>
			bpe = bps + len;
 80013e4:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 80013e8:	2f00      	cmp	r7, #0
 80013ea:	f43f af56 	beq.w	800129a <z_cbvprintf_impl+0x426>
		char sign = 0;
 80013ee:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 80013f0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80013f4:	f013 0210 	ands.w	r2, r3, #16
 80013f8:	9205      	str	r2, [sp, #20]
 80013fa:	f000 8093 	beq.w	8001524 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
 80013fe:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8001400:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 8001402:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 8001404:	bf48      	it	mi
 8001406:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 8001408:	4410      	add	r0, r2
 800140a:	9204      	str	r2, [sp, #16]
			nj_len += conv->pad0_pre_exp;
 800140c:	bf48      	it	mi
 800140e:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 8001410:	f1b8 0f00 	cmp.w	r8, #0
 8001414:	f340 809f 	ble.w	8001556 <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
 8001418:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 800141c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 8001420:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8001424:	0750      	lsls	r0, r2, #29
 8001426:	9306      	str	r3, [sp, #24]
 8001428:	f100 8095 	bmi.w	8001556 <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
 800142c:	0651      	lsls	r1, r2, #25
 800142e:	f140 8089 	bpl.w	8001544 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
 8001432:	b13e      	cbz	r6, 8001444 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
 8001434:	4659      	mov	r1, fp
 8001436:	4630      	mov	r0, r6
 8001438:	47c8      	blx	r9
 800143a:	2800      	cmp	r0, #0
 800143c:	db7f      	blt.n	800153e <z_cbvprintf_impl+0x6ca>
 800143e:	9b06      	ldr	r3, [sp, #24]
 8001440:	3501      	adds	r5, #1
 8001442:	461e      	mov	r6, r3
					pad = '0';
 8001444:	2230      	movs	r2, #48	; 0x30
 8001446:	e07e      	b.n	8001546 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
 8001448:	4638      	mov	r0, r7
 800144a:	f019 f97f 	bl	801a74c <strlen>
 800144e:	e7c9      	b.n	80013e4 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8001450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
 8001452:	2600      	movs	r6, #0
			bps = buf;
 8001454:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 8001456:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
 800145a:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 800145c:	f88d 3020 	strb.w	r3, [sp, #32]
		if (sign != 0) {
 8001460:	e7c6      	b.n	80013f0 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
 8001462:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 8001464:	bf56      	itet	pl
 8001466:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
				sign = '+';
 800146a:	262b      	movmi	r6, #43	; 0x2b
			} else if (conv->flag_space) {
 800146c:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
 800146e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
 8001472:	2b00      	cmp	r3, #0
 8001474:	f6bf af63 	bge.w	800133e <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
 8001478:	4252      	negs	r2, r2
				sign = '-';
 800147a:	f04f 062d 	mov.w	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 800147e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001482:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001486:	e75a      	b.n	800133e <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 8001488:	2600      	movs	r6, #0
 800148a:	e758      	b.n	800133e <z_cbvprintf_impl+0x4ca>
		char sign = 0;
 800148c:	2600      	movs	r6, #0
				size_t len = bpe - bps;
 800148e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
				conv->flag_zero = false;
 8001492:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 8001496:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 8001498:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 800149c:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 800149e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 80014a2:	f67f af5a 	bls.w	800135a <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
 80014a6:	ebaa 0303 	sub.w	r3, sl, r3
 80014aa:	9311      	str	r3, [sp, #68]	; 0x44
 80014ac:	e755      	b.n	800135a <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
 80014ae:	980e      	ldr	r0, [sp, #56]	; 0x38
 80014b0:	b390      	cbz	r0, 8001518 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80014b2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80014b6:	aa10      	add	r2, sp, #64	; 0x40
 80014b8:	2100      	movs	r1, #0
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	ab08      	add	r3, sp, #32
 80014be:	f018 fdc1 	bl	801a044 <encode_uint>
				conv->altform_0c = true;
 80014c2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 80014c6:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80014ca:	4607      	mov	r7, r0
				conv->altform_0c = true;
 80014cc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80014d0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 80014dc:	dad6      	bge.n	800148c <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
 80014de:	2800      	cmp	r0, #0
 80014e0:	f43f aedb 	beq.w	800129a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 80014e4:	f10d 0336 	add.w	r3, sp, #54	; 0x36
		char sign = 0;
 80014e8:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 80014ea:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
 80014ec:	469a      	mov	sl, r3
 80014ee:	e77f      	b.n	80013f0 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
 80014f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 80014f2:	2907      	cmp	r1, #7
 80014f4:	f63f aed1 	bhi.w	800129a <z_cbvprintf_impl+0x426>
 80014f8:	e8df f001 	tbb	[pc, r1]
 80014fc:	0c06040c 	.word	0x0c06040c
 8001500:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8001504:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 8001506:	e6c8      	b.n	800129a <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
 8001508:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 800150a:	e6c6      	b.n	800129a <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
 800150c:	17ea      	asrs	r2, r5, #31
 800150e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 8001512:	e6c2      	b.n	800129a <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8001514:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 8001516:	e6c0      	b.n	800129a <z_cbvprintf_impl+0x426>
 8001518:	4f2e      	ldr	r7, [pc, #184]	; (80015d4 <z_cbvprintf_impl+0x760>)
		char sign = 0;
 800151a:	4606      	mov	r6, r0
		size_t nj_len = (bpe - bps);
 800151c:	2005      	movs	r0, #5
			bpe = bps + 5;
 800151e:	f107 0a05 	add.w	sl, r7, #5
 8001522:	e765      	b.n	80013f0 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
 8001524:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8001526:	bf48      	it	mi
 8001528:	3001      	addmi	r0, #1
 800152a:	e769      	b.n	8001400 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
 800152c:	4610      	mov	r0, r2
 800152e:	9307      	str	r3, [sp, #28]
 8001530:	9206      	str	r2, [sp, #24]
 8001532:	4659      	mov	r1, fp
 8001534:	47c8      	blx	r9
 8001536:	2800      	cmp	r0, #0
 8001538:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800153c:	da04      	bge.n	8001548 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
 800153e:	b015      	add	sp, #84	; 0x54
 8001540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8001544:	2220      	movs	r2, #32
					pad = '0';
 8001546:	4643      	mov	r3, r8
				while (width-- > 0) {
 8001548:	4619      	mov	r1, r3
 800154a:	3b01      	subs	r3, #1
 800154c:	2900      	cmp	r1, #0
 800154e:	dced      	bgt.n	800152c <z_cbvprintf_impl+0x6b8>
 8001550:	4445      	add	r5, r8
 8001552:	4698      	mov	r8, r3
 8001554:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
 8001556:	b12e      	cbz	r6, 8001564 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
 8001558:	4659      	mov	r1, fp
 800155a:	4630      	mov	r0, r6
 800155c:	47c8      	blx	r9
 800155e:	2800      	cmp	r0, #0
 8001560:	dbed      	blt.n	800153e <z_cbvprintf_impl+0x6ca>
 8001562:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8001564:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8001568:	06da      	lsls	r2, r3, #27
 800156a:	d401      	bmi.n	8001570 <z_cbvprintf_impl+0x6fc>
 800156c:	071b      	lsls	r3, r3, #28
 800156e:	d505      	bpl.n	800157c <z_cbvprintf_impl+0x708>
				OUTC('0');
 8001570:	4659      	mov	r1, fp
 8001572:	2030      	movs	r0, #48	; 0x30
 8001574:	47c8      	blx	r9
 8001576:	2800      	cmp	r0, #0
 8001578:	dbe1      	blt.n	800153e <z_cbvprintf_impl+0x6ca>
 800157a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 800157c:	9b05      	ldr	r3, [sp, #20]
 800157e:	b133      	cbz	r3, 800158e <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
 8001580:	4659      	mov	r1, fp
 8001582:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8001586:	47c8      	blx	r9
 8001588:	2800      	cmp	r0, #0
 800158a:	dbd8      	blt.n	800153e <z_cbvprintf_impl+0x6ca>
 800158c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 800158e:	9e04      	ldr	r6, [sp, #16]
 8001590:	442e      	add	r6, r5
 8001592:	e005      	b.n	80015a0 <z_cbvprintf_impl+0x72c>
				OUTC('0');
 8001594:	4659      	mov	r1, fp
 8001596:	2030      	movs	r0, #48	; 0x30
 8001598:	47c8      	blx	r9
 800159a:	2800      	cmp	r0, #0
 800159c:	dbcf      	blt.n	800153e <z_cbvprintf_impl+0x6ca>
 800159e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 80015a0:	1b73      	subs	r3, r6, r5
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	dcf6      	bgt.n	8001594 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
 80015a6:	4653      	mov	r3, sl
 80015a8:	463a      	mov	r2, r7
 80015aa:	4659      	mov	r1, fp
 80015ac:	4648      	mov	r0, r9
 80015ae:	f018 fd8f 	bl	801a0d0 <outs>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	dbc3      	blt.n	800153e <z_cbvprintf_impl+0x6ca>
 80015b6:	4405      	add	r5, r0
		while (width > 0) {
 80015b8:	44a8      	add	r8, r5
 80015ba:	eba8 0305 	sub.w	r3, r8, r5
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f77f ae6b 	ble.w	800129a <z_cbvprintf_impl+0x426>
			OUTC(' ');
 80015c4:	4659      	mov	r1, fp
 80015c6:	2020      	movs	r0, #32
 80015c8:	47c8      	blx	r9
 80015ca:	2800      	cmp	r0, #0
 80015cc:	dbb7      	blt.n	800153e <z_cbvprintf_impl+0x6ca>
 80015ce:	3501      	adds	r5, #1
			--width;
 80015d0:	e7f3      	b.n	80015ba <z_cbvprintf_impl+0x746>
 80015d2:	bf00      	nop
 80015d4:	0802a079 	.word	0x0802a079

080015d8 <stm32h7_init>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <stm32h7_init+0xcc>)
 * So the init priority has to be 0 (zero).
 *
 * @return 0
 */
static int stm32h7_init(void)
{
 80015da:	b570      	push	{r4, r5, r6, lr}
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80015e2:	d111      	bne.n	8001608 <stm32h7_init+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015e8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015ec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015fe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001600:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001604:	f3bf 8f6f 	isb	sy
	SCB_EnableICache();

	if (IS_ENABLED(CONFIG_DCACHE)) {
		if (!(SCB->CCR & SCB_CCR_DC_Msk)) {
 8001608:	4a26      	ldr	r2, [pc, #152]	; (80016a4 <stm32h7_init+0xcc>)
 800160a:	6953      	ldr	r3, [r2, #20]
 800160c:	03d9      	lsls	r1, r3, #15
 800160e:	d427      	bmi.n	8001660 <stm32h7_init+0x88>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001610:	6953      	ldr	r3, [r2, #20]
 8001612:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8001616:	d123      	bne.n	8001660 <stm32h7_init+0x88>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001618:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800161c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001620:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001624:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001628:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800162c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001630:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001632:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001636:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001638:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800163c:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800163e:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001642:	d2f9      	bcs.n	8001638 <stm32h7_init+0x60>
    } while(sets-- != 0U);
 8001644:	3b20      	subs	r3, #32
 8001646:	f113 0f20 	cmn.w	r3, #32
 800164a:	d1f2      	bne.n	8001632 <stm32h7_init+0x5a>
 800164c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001650:	6953      	ldr	r3, [r2, #20]
 8001652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001656:	6153      	str	r3, [r2, #20]
 8001658:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800165c:	f3bf 8f6f 	isb	sy
		}
	}

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 64 MHz from HSI */
	SystemCoreClock = 64000000;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <stm32h7_init+0xd0>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <stm32h7_init+0xd4>)
 8001664:	601a      	str	r2, [r3, #0]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <stm32h7_init+0xd8>)
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	f022 0207 	bic.w	r2, r2, #7
 800166e:	f042 0202 	orr.w	r2, r2, #2
 8001672:	60da      	str	r2, [r3, #12]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8001674:	699a      	ldr	r2, [r3, #24]
 8001676:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800167a:	619a      	str	r2, [r3, #24]
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
#if defined (PWR_CPUCR_PDDS_D2)
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 800167c:	699a      	ldr	r2, [r3, #24]
 800167e:	0492      	lsls	r2, r2, #18
 8001680:	d5fc      	bpl.n	800167c <stm32h7_init+0xa4>
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <stm32h7_init+0xdc>)
 8001684:	681a      	ldr	r2, [r3, #0]
	 * 2.2.9: Reading from AXI SRAM may lead to data read corruption
	 * Workaround: Set the READ_ISS_OVERRIDE bit in the AXI_TARG7_FN_MOD
	 * register.
	 * Applicable only to RevY (REV_ID 0x1003)
	 */
	if (LL_DBGMCU_GetRevisionID() == 0x1003) {
 8001686:	f241 0303 	movw	r3, #4099	; 0x1003
 800168a:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
 800168e:	d106      	bne.n	800169e <stm32h7_init+0xc6>
		MODIFY_REG(GPV->AXI_TARG7_FN_MOD, 0x1, 0x1);
 8001690:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <stm32h7_init+0xe0>)
 8001692:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	}

	return 0;
}
 800169e:	2000      	movs	r0, #0
 80016a0:	bd70      	pop	{r4, r5, r6, pc}
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00
 80016a8:	2400009c 	.word	0x2400009c
 80016ac:	03d09000 	.word	0x03d09000
 80016b0:	58024800 	.word	0x58024800
 80016b4:	5c001000 	.word	0x5c001000
 80016b8:	51008000 	.word	0x51008000

080016bc <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
 80016bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016c0:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
 80016c2:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
 80016c4:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 80016c8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800171c <activate_foreach_backend+0x60>
	while (mask_cpy) {
 80016cc:	b914      	cbnz	r4, 80016d4 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
 80016ce:	4638      	mov	r0, r7
 80016d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
 80016d4:	fa94 f5a4 	rbit	r5, r4
 80016d8:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
 80016dc:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 80016e0:	012e      	lsls	r6, r5, #4
 80016e2:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
 80016e6:	ea6f 0a03 	mvn.w	sl, r3
 80016ea:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 80016ee:	7b2b      	ldrb	r3, [r5, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0eb      	beq.n	80016cc <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
 80016f4:	f858 3006 	ldr.w	r3, [r8, r6]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	b94b      	cbnz	r3, 8001710 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
 80016fc:	4446      	add	r6, r8
			log_backend_enable(backend,
 80016fe:	2204      	movs	r2, #4
 8001700:	4628      	mov	r0, r5
			mask &= ~BIT(i);
 8001702:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
 8001706:	6873      	ldr	r3, [r6, #4]
 8001708:	6819      	ldr	r1, [r3, #0]
 800170a:	f000 fa51 	bl	8001bb0 <log_backend_enable>
 800170e:	e7dd      	b.n	80016cc <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
 8001710:	4628      	mov	r0, r5
 8001712:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8001714:	2800      	cmp	r0, #0
 8001716:	d1d9      	bne.n	80016cc <activate_foreach_backend+0x10>
 8001718:	e7f0      	b.n	80016fc <activate_foreach_backend+0x40>
 800171a:	bf00      	nop
 800171c:	08028a64 	.word	0x08028a64

08001720 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
 8001720:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8001722:	2200      	movs	r2, #0
{
 8001724:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8001726:	490f      	ldr	r1, [pc, #60]	; (8001764 <enable_logger+0x44>)
 8001728:	480f      	ldr	r0, [pc, #60]	; (8001768 <enable_logger+0x48>)
 800172a:	f026 fd8d 	bl	8028248 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800172e:	2200      	movs	r2, #0
 8001730:	2300      	movs	r3, #0
 8001732:	2400      	movs	r4, #0
 8001734:	4d0d      	ldr	r5, [pc, #52]	; (800176c <enable_logger+0x4c>)
 8001736:	490e      	ldr	r1, [pc, #56]	; (8001770 <enable_logger+0x50>)
 8001738:	4628      	mov	r0, r5
 800173a:	9400      	str	r4, [sp, #0]
 800173c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001740:	230e      	movs	r3, #14
 8001742:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001746:	e9cd 3403 	strd	r3, r4, [sp, #12]
 800174a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <enable_logger+0x54>)
 8001750:	f017 fcea 	bl	8019128 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
 8001754:	4908      	ldr	r1, [pc, #32]	; (8001778 <enable_logger+0x58>)
 8001756:	4628      	mov	r0, r5
 8001758:	f026 fc72 	bl	8028040 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
 800175c:	4620      	mov	r0, r4
 800175e:	b009      	add	sp, #36	; 0x24
 8001760:	bd30      	pop	{r4, r5, pc}
 8001762:	bf00      	nop
 8001764:	0800177d 	.word	0x0800177d
 8001768:	24000668 	.word	0x24000668
 800176c:	240001e0 	.word	0x240001e0
 8001770:	24010e40 	.word	0x24010e40
 8001774:	08001a5d 	.word	0x08001a5d
 8001778:	0802a0ac 	.word	0x0802a0ac

0800177c <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 800177c:	4801      	ldr	r0, [pc, #4]	; (8001784 <log_process_thread_timer_expiry_fn+0x8>)
 800177e:	f017 bd49 	b.w	8019214 <z_impl_k_sem_give>
 8001782:	bf00      	nop
 8001784:	240001cc 	.word	0x240001cc

08001788 <z_log_init>:
{
 8001788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800178c:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
 800178e:	481e      	ldr	r0, [pc, #120]	; (8001808 <z_log_init+0x80>)
{
 8001790:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
 8001792:	f018 ff1d 	bl	801a5d0 <atomic_inc>
 8001796:	4606      	mov	r6, r0
 8001798:	b378      	cbz	r0, 80017fa <z_log_init+0x72>
	uint32_t mask = 0;
 800179a:	2500      	movs	r5, #0
}
 800179c:	4628      	mov	r0, r5
 800179e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
 80017a2:	7b23      	ldrb	r3, [r4, #12]
 80017a4:	b173      	cbz	r3, 80017c4 <z_log_init+0x3c>
	if (backend->api->init) {
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	b10b      	cbz	r3, 80017b0 <z_log_init+0x28>
		backend->api->init(backend);
 80017ac:	4620      	mov	r0, r4
 80017ae:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	b9cb      	cbnz	r3, 80017ea <z_log_init+0x62>
				log_backend_enable(backend,
 80017b6:	6863      	ldr	r3, [r4, #4]
 80017b8:	2204      	movs	r2, #4
 80017ba:	4620      	mov	r0, r4
 80017bc:	6819      	ldr	r1, [r3, #0]
 80017be:	f000 f9f7 	bl	8001bb0 <log_backend_enable>
			i++;
 80017c2:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 80017c4:	3410      	adds	r4, #16
 80017c6:	454c      	cmp	r4, r9
 80017c8:	d3eb      	bcc.n	80017a2 <z_log_init+0x1a>
	if (blocking) {
 80017ca:	f1b8 0f00 	cmp.w	r8, #0
 80017ce:	d0e5      	beq.n	800179c <z_log_init+0x14>
		while (mask) {
 80017d0:	2d00      	cmp	r5, #0
 80017d2:	d0e2      	beq.n	800179a <z_log_init+0x12>
			mask = activate_foreach_backend(mask);
 80017d4:	4628      	mov	r0, r5
 80017d6:	f7ff ff71 	bl	80016bc <activate_foreach_backend>
 80017da:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
 80017dc:	2f00      	cmp	r7, #0
 80017de:	d0f7      	beq.n	80017d0 <z_log_init+0x48>
	return z_impl_k_sleep(timeout);
 80017e0:	2100      	movs	r1, #0
 80017e2:	2064      	movs	r0, #100	; 0x64
 80017e4:	f017 ffde 	bl	80197a4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 80017e8:	e7f2      	b.n	80017d0 <z_log_init+0x48>
		return backend->api->is_ready(backend);
 80017ea:	4620      	mov	r0, r4
 80017ec:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
 80017ee:	2800      	cmp	r0, #0
 80017f0:	d0e1      	beq.n	80017b6 <z_log_init+0x2e>
				mask |= BIT(i);
 80017f2:	fa0a f306 	lsl.w	r3, sl, r6
 80017f6:	431d      	orrs	r5, r3
 80017f8:	e7e3      	b.n	80017c2 <z_log_init+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 80017fa:	4c04      	ldr	r4, [pc, #16]	; (800180c <z_log_init+0x84>)
	uint32_t mask = 0;
 80017fc:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 80017fe:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8001810 <z_log_init+0x88>
				mask |= BIT(i);
 8001802:	f04f 0a01 	mov.w	sl, #1
 8001806:	e7de      	b.n	80017c6 <z_log_init+0x3e>
 8001808:	24000fe0 	.word	0x24000fe0
 800180c:	08028a64 	.word	0x08028a64
 8001810:	08028a74 	.word	0x08028a74

08001814 <log_format_func_t_get>:
}
 8001814:	4b01      	ldr	r3, [pc, #4]	; (800181c <log_format_func_t_get+0x8>)
 8001816:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800181a:	4770      	bx	lr
 800181c:	08028b0c 	.word	0x08028b0c

08001820 <log_set_timestamp_func>:
{
 8001820:	b508      	push	{r3, lr}
 8001822:	4603      	mov	r3, r0
 8001824:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
 8001826:	b12b      	cbz	r3, 8001834 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <log_set_timestamp_func+0x1c>)
 800182a:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
 800182c:	f000 fc74 	bl	8002118 <log_output_timestamp_freq_set>
	return 0;
 8001830:	2000      	movs	r0, #0
}
 8001832:	bd08      	pop	{r3, pc}
		return -EINVAL;
 8001834:	f06f 0015 	mvn.w	r0, #21
 8001838:	e7fb      	b.n	8001832 <log_set_timestamp_func+0x12>
 800183a:	bf00      	nop
 800183c:	24000004 	.word	0x24000004

08001840 <z_log_notify_backend_enabled>:
{
 8001840:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8001842:	4c04      	ldr	r4, [pc, #16]	; (8001854 <z_log_notify_backend_enabled+0x14>)
 8001844:	7823      	ldrb	r3, [r4, #0]
 8001846:	b913      	cbnz	r3, 800184e <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <z_log_notify_backend_enabled+0x18>)
 800184a:	f017 fce3 	bl	8019214 <z_impl_k_sem_give>
	backend_attached = true;
 800184e:	2301      	movs	r3, #1
 8001850:	7023      	strb	r3, [r4, #0]
}
 8001852:	bd10      	pop	{r4, pc}
 8001854:	24010d24 	.word	0x24010d24
 8001858:	240001cc 	.word	0x240001cc

0800185c <z_log_dropped>:
{
 800185c:	b510      	push	{r4, lr}
 800185e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
 8001860:	4808      	ldr	r0, [pc, #32]	; (8001884 <z_log_dropped+0x28>)
 8001862:	f018 feb5 	bl	801a5d0 <atomic_inc>
	if (buffered) {
 8001866:	b15c      	cbz	r4, 8001880 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <z_log_dropped+0x2c>)
 800186a:	f3bf 8f5b 	dmb	ish
 800186e:	e853 1f00 	ldrex	r1, [r3]
 8001872:	3901      	subs	r1, #1
 8001874:	e843 1200 	strex	r2, r1, [r3]
 8001878:	2a00      	cmp	r2, #0
 800187a:	d1f8      	bne.n	800186e <z_log_dropped+0x12>
 800187c:	f3bf 8f5b 	dmb	ish
}
 8001880:	bd10      	pop	{r4, pc}
 8001882:	bf00      	nop
 8001884:	24000fd8 	.word	0x24000fd8
 8001888:	24000fdc 	.word	0x24000fdc

0800188c <z_log_dropped_read_and_clear>:
}
 800188c:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <z_log_dropped_read_and_clear+0x1c>)
 8001890:	f3bf 8f5b 	dmb	ish
 8001894:	4601      	mov	r1, r0
 8001896:	e853 0f00 	ldrex	r0, [r3]
 800189a:	e843 1200 	strex	r2, r1, [r3]
 800189e:	2a00      	cmp	r2, #0
 80018a0:	d1f9      	bne.n	8001896 <z_log_dropped_read_and_clear+0xa>
 80018a2:	f3bf 8f5b 	dmb	ish
 80018a6:	4770      	bx	lr
 80018a8:	24000fd8 	.word	0x24000fd8

080018ac <dropped_notify>:
{
 80018ac:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 80018ae:	f7ff ffed 	bl	800188c <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 80018b2:	4c08      	ldr	r4, [pc, #32]	; (80018d4 <dropped_notify+0x28>)
	uint32_t dropped = z_log_dropped_read_and_clear();
 80018b4:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 80018b6:	4e08      	ldr	r6, [pc, #32]	; (80018d8 <dropped_notify+0x2c>)
 80018b8:	42b4      	cmp	r4, r6
 80018ba:	d300      	bcc.n	80018be <dropped_notify+0x12>
}
 80018bc:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 80018be:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 80018c0:	795b      	ldrb	r3, [r3, #5]
 80018c2:	b12b      	cbz	r3, 80018d0 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	b113      	cbz	r3, 80018d0 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
 80018ca:	4629      	mov	r1, r5
 80018cc:	4620      	mov	r0, r4
 80018ce:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 80018d0:	3410      	adds	r4, #16
 80018d2:	e7f1      	b.n	80018b8 <dropped_notify+0xc>
 80018d4:	08028a64 	.word	0x08028a64
 80018d8:	08028a74 	.word	0x08028a74

080018dc <z_log_msg_init>:
{
 80018dc:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 80018de:	4c04      	ldr	r4, [pc, #16]	; (80018f0 <z_log_msg_init+0x14>)
 80018e0:	4904      	ldr	r1, [pc, #16]	; (80018f4 <z_log_msg_init+0x18>)
 80018e2:	4620      	mov	r0, r4
 80018e4:	f018 fd05 	bl	801a2f2 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <z_log_msg_init+0x1c>)
 80018ea:	601c      	str	r4, [r3, #0]
}
 80018ec:	bd10      	pop	{r4, pc}
 80018ee:	bf00      	nop
 80018f0:	2400017c 	.word	0x2400017c
 80018f4:	08028af8 	.word	0x08028af8
 80018f8:	24000fd0 	.word	0x24000fd0

080018fc <log_core_init>:
{
 80018fc:	b508      	push	{r3, lr}
	panic_mode = false;
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <log_core_init+0x24>)
 8001900:	2300      	movs	r3, #0
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
 8001902:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001906:	4807      	ldr	r0, [pc, #28]	; (8001924 <log_core_init+0x28>)
	panic_mode = false;
 8001908:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 800190a:	4a07      	ldr	r2, [pc, #28]	; (8001928 <log_core_init+0x2c>)
 800190c:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <log_core_init+0x30>)
 8001910:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
 8001912:	f7ff ff85 	bl	8001820 <log_set_timestamp_func>
}
 8001916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
 800191a:	f7ff bfdf 	b.w	80018dc <z_log_msg_init>
 800191e:	bf00      	nop
 8001920:	24010d25 	.word	0x24010d25
 8001924:	0801a5eb 	.word	0x0801a5eb
 8001928:	24000fd8 	.word	0x24000fd8
 800192c:	24000fdc 	.word	0x24000fdc

08001930 <z_log_msg_alloc>:
{
 8001930:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
 8001932:	2200      	movs	r2, #0
 8001934:	2300      	movs	r3, #0
 8001936:	4801      	ldr	r0, [pc, #4]	; (800193c <z_log_msg_alloc+0xc>)
 8001938:	f018 bcfc 	b.w	801a334 <mpsc_pbuf_alloc>
 800193c:	2400017c 	.word	0x2400017c

08001940 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
 8001940:	4801      	ldr	r0, [pc, #4]	; (8001948 <z_log_msg_local_claim+0x8>)
 8001942:	f018 bd95 	b.w	801a470 <mpsc_pbuf_claim>
 8001946:	bf00      	nop
 8001948:	2400017c 	.word	0x2400017c

0800194c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
 800194c:	4b02      	ldr	r3, [pc, #8]	; (8001958 <z_log_msg_free+0xc>)
{
 800194e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	f018 bddf 	b.w	801a514 <mpsc_pbuf_free>
 8001956:	bf00      	nop
 8001958:	24000fd0 	.word	0x24000fd0

0800195c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
 800195c:	4801      	ldr	r0, [pc, #4]	; (8001964 <z_log_msg_pending+0x8>)
 800195e:	f018 be15 	b.w	801a58c <mpsc_pbuf_is_pending>
 8001962:	bf00      	nop
 8001964:	2400017c 	.word	0x2400017c

08001968 <z_impl_log_process>:
	if (!backend_attached) {
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <z_impl_log_process+0x98>)
{
 800196a:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
 800196c:	7818      	ldrb	r0, [r3, #0]
 800196e:	2800      	cmp	r0, #0
 8001970:	d044      	beq.n	80019fc <z_impl_log_process+0x94>
	return z_log_msg_local_claim();
 8001972:	f7ff ffe5 	bl	8001940 <z_log_msg_local_claim>
	if (msg) {
 8001976:	4605      	mov	r5, r0
 8001978:	b190      	cbz	r0, 80019a0 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <z_impl_log_process+0x9c>)
 800197c:	f3bf 8f5b 	dmb	ish
 8001980:	e853 1f00 	ldrex	r1, [r3]
 8001984:	3901      	subs	r1, #1
 8001986:	e843 1200 	strex	r2, r1, [r3]
 800198a:	2a00      	cmp	r2, #0
 800198c:	d1f8      	bne.n	8001980 <z_impl_log_process+0x18>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 800198e:	4c1e      	ldr	r4, [pc, #120]	; (8001a08 <z_impl_log_process+0xa0>)
 8001990:	f3bf 8f5b 	dmb	ish
 8001994:	4e1d      	ldr	r6, [pc, #116]	; (8001a0c <z_impl_log_process+0xa4>)
 8001996:	42b4      	cmp	r4, r6
 8001998:	d326      	bcc.n	80019e8 <z_impl_log_process+0x80>
		z_log_msg_free(msg);
 800199a:	4628      	mov	r0, r5
 800199c:	f7ff ffd6 	bl	800194c <z_log_msg_free>
	return dropped_cnt > 0;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <z_impl_log_process+0xa8>)
 80019a2:	4c1c      	ldr	r4, [pc, #112]	; (8001a14 <z_impl_log_process+0xac>)
		if ((dropped_pend || unordered_pend) &&
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	dd12      	ble.n	80019d0 <z_impl_log_process+0x68>
	return z_impl_k_uptime_ticks();
 80019aa:	f026 fc4b 	bl	8028244 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 80019ae:	220a      	movs	r2, #10
 80019b0:	2300      	movs	r3, #0
 80019b2:	f7fe fc8b 	bl	80002cc <__aeabi_uldivmod>
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
 80019b6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80019ba:	1ac0      	subs	r0, r0, r3
		if ((dropped_pend || unordered_pend) &&
 80019bc:	f240 33e9 	movw	r3, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
 80019c0:	eb61 0102 	sbc.w	r1, r1, r2
		if ((dropped_pend || unordered_pend) &&
 80019c4:	4298      	cmp	r0, r3
 80019c6:	f171 0100 	sbcs.w	r1, r1, #0
 80019ca:	d301      	bcc.n	80019d0 <z_impl_log_process+0x68>
				dropped_notify();
 80019cc:	f7ff ff6e 	bl	80018ac <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
 80019d0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80019d4:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
 80019d8:	f142 0200 	adc.w	r2, r2, #0
 80019dc:	e9c4 3200 	strd	r3, r2, [r4]
}
 80019e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
 80019e4:	f7ff bfba 	b.w	800195c <z_log_msg_pending>
	return backend->cb->active;
 80019e8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
 80019ea:	795b      	ldrb	r3, [r3, #5]
 80019ec:	b123      	cbz	r3, 80019f8 <z_impl_log_process+0x90>
	backend->api->process(backend, msg);
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	4629      	mov	r1, r5
 80019f2:	4620      	mov	r0, r4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 80019f8:	3410      	adds	r4, #16
 80019fa:	e7cc      	b.n	8001996 <z_impl_log_process+0x2e>
}
 80019fc:	bd70      	pop	{r4, r5, r6, pc}
 80019fe:	bf00      	nop
 8001a00:	24010d24 	.word	0x24010d24
 8001a04:	24000fdc 	.word	0x24000fdc
 8001a08:	08028a64 	.word	0x08028a64
 8001a0c:	08028a74 	.word	0x08028a74
 8001a10:	24000fd8 	.word	0x24000fd8
 8001a14:	24000660 	.word	0x24000660

08001a18 <z_impl_log_panic>:
{
 8001a18:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
 8001a1a:	4d0d      	ldr	r5, [pc, #52]	; (8001a50 <z_impl_log_panic+0x38>)
 8001a1c:	7829      	ldrb	r1, [r5, #0]
 8001a1e:	b961      	cbnz	r1, 8001a3a <z_impl_log_panic+0x22>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001a20:	4c0c      	ldr	r4, [pc, #48]	; (8001a54 <z_impl_log_panic+0x3c>)
	(void)z_log_init(true, false);
 8001a22:	2001      	movs	r0, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001a24:	4e0c      	ldr	r6, [pc, #48]	; (8001a58 <z_impl_log_panic+0x40>)
	(void)z_log_init(true, false);
 8001a26:	f7ff feaf 	bl	8001788 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001a2a:	42b4      	cmp	r4, r6
 8001a2c:	d306      	bcc.n	8001a3c <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
 8001a2e:	f7ff ff9b 	bl	8001968 <z_impl_log_process>
		while (log_process() == true) {
 8001a32:	2800      	cmp	r0, #0
 8001a34:	d1fb      	bne.n	8001a2e <z_impl_log_panic+0x16>
	panic_mode = true;
 8001a36:	2301      	movs	r3, #1
 8001a38:	702b      	strb	r3, [r5, #0]
}
 8001a3a:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
 8001a3c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8001a3e:	795b      	ldrb	r3, [r3, #5]
 8001a40:	b11b      	cbz	r3, 8001a4a <z_impl_log_panic+0x32>
	backend->api->panic(backend);
 8001a42:	6823      	ldr	r3, [r4, #0]
 8001a44:	4620      	mov	r0, r4
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001a4a:	3410      	adds	r4, #16
 8001a4c:	e7ed      	b.n	8001a2a <z_impl_log_panic+0x12>
 8001a4e:	bf00      	nop
 8001a50:	24010d25 	.word	0x24010d25
 8001a54:	08028a64 	.word	0x08028a64
 8001a58:	08028a74 	.word	0x08028a74

08001a5c <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
 8001a5c:	2100      	movs	r1, #0
{
 8001a5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
 8001a62:	4608      	mov	r0, r1
 8001a64:	f7ff fe90 	bl	8001788 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8001a68:	4604      	mov	r4, r0
 8001a6a:	b348      	cbz	r0, 8001ac0 <log_process_thread_func+0x64>
 8001a6c:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
 8001a70:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
 8001a74:	f017 feae 	bl	80197d4 <z_impl_z_current_get>
	proc_tid = process_tid;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <log_process_thread_func+0x88>)
 8001a7a:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8001a7c:	b130      	cbz	r0, 8001a8c <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <log_process_thread_func+0x8c>)
	    process_tid &&
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b09      	cmp	r3, #9
 8001a84:	dd02      	ble.n	8001a8c <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
 8001a86:	4819      	ldr	r0, [pc, #100]	; (8001aec <log_process_thread_func+0x90>)
 8001a88:	f017 fbc4 	bl	8019214 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8001a8c:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001a8e:	4f18      	ldr	r7, [pc, #96]	; (8001af0 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
 8001a90:	f8df a058 	ldr.w	sl, [pc, #88]	; 8001aec <log_process_thread_func+0x90>
		if (activate_mask) {
 8001a94:	b144      	cbz	r4, 8001aa8 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
 8001a96:	4620      	mov	r0, r4
 8001a98:	f7ff fe10 	bl	80016bc <activate_foreach_backend>
			if (!activate_mask) {
 8001a9c:	4604      	mov	r4, r0
 8001a9e:	b918      	cbnz	r0, 8001aa8 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
 8001aa0:	f04f 38ff 	mov.w	r8, #4294967295
 8001aa4:	f04f 39ff 	mov.w	r9, #4294967295
 8001aa8:	f7ff ff5e 	bl	8001968 <z_impl_log_process>
		if (log_process() == false) {
 8001aac:	4606      	mov	r6, r0
 8001aae:	b928      	cbnz	r0, 8001abc <log_process_thread_func+0x60>
			if (processed_any) {
 8001ab0:	b9b5      	cbnz	r5, 8001ae0 <log_process_thread_func+0x84>
 8001ab2:	4642      	mov	r2, r8
 8001ab4:	464b      	mov	r3, r9
 8001ab6:	4650      	mov	r0, sl
 8001ab8:	f017 fbd0 	bl	801925c <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8001abc:	4635      	mov	r5, r6
 8001abe:	e7e9      	b.n	8001a94 <log_process_thread_func+0x38>
 8001ac0:	f04f 38ff 	mov.w	r8, #4294967295
 8001ac4:	f04f 39ff 	mov.w	r9, #4294967295
 8001ac8:	e7d4      	b.n	8001a74 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
 8001aca:	682b      	ldr	r3, [r5, #0]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	b11b      	cbz	r3, 8001ad8 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001ad8:	3510      	adds	r5, #16
 8001ada:	42bd      	cmp	r5, r7
 8001adc:	d3f5      	bcc.n	8001aca <log_process_thread_func+0x6e>
 8001ade:	e7e8      	b.n	8001ab2 <log_process_thread_func+0x56>
 8001ae0:	4d04      	ldr	r5, [pc, #16]	; (8001af4 <log_process_thread_func+0x98>)
 8001ae2:	e7fa      	b.n	8001ada <log_process_thread_func+0x7e>
 8001ae4:	24000fd4 	.word	0x24000fd4
 8001ae8:	24000fdc 	.word	0x24000fdc
 8001aec:	240001cc 	.word	0x240001cc
 8001af0:	08028a74 	.word	0x08028a74
 8001af4:	08028a64 	.word	0x08028a64

08001af8 <z_log_msg_post_finalize>:
{
 8001af8:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
 8001afa:	4818      	ldr	r0, [pc, #96]	; (8001b5c <z_log_msg_post_finalize+0x64>)
 8001afc:	f018 fd68 	bl	801a5d0 <atomic_inc>
	if (panic_mode) {
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <z_log_msg_post_finalize+0x68>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b17b      	cbz	r3, 8001b26 <z_log_msg_post_finalize+0x2e>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8001b06:	f04f 0310 	mov.w	r3, #16
 8001b0a:	f3ef 8411 	mrs	r4, BASEPRI
 8001b0e:	f383 8812 	msr	BASEPRI_MAX, r3
 8001b12:	f3bf 8f6f 	isb	sy
 8001b16:	f7ff ff27 	bl	8001968 <z_impl_log_process>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8001b1a:	f384 8811 	msr	BASEPRI, r4
 8001b1e:	f3bf 8f6f 	isb	sy
}
 8001b22:	b002      	add	sp, #8
 8001b24:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <z_log_msg_post_finalize+0x6c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f9      	beq.n	8001b22 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
 8001b2e:	b950      	cbnz	r0, 8001b46 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2300      	movs	r3, #0
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <z_log_msg_post_finalize+0x70>)
 8001b36:	e9cd 2300 	strd	r2, r3, [sp]
 8001b3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f018 f888 	bl	8019c54 <z_impl_k_timer_start>
 8001b44:	e7ed      	b.n	8001b22 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8001b46:	2809      	cmp	r0, #9
 8001b48:	d1eb      	bne.n	8001b22 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
 8001b4a:	4807      	ldr	r0, [pc, #28]	; (8001b68 <z_log_msg_post_finalize+0x70>)
 8001b4c:	f026 fb88 	bl	8028260 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8001b50:	4806      	ldr	r0, [pc, #24]	; (8001b6c <z_log_msg_post_finalize+0x74>)
}
 8001b52:	b002      	add	sp, #8
 8001b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b58:	f017 bb5c 	b.w	8019214 <z_impl_k_sem_give>
 8001b5c:	24000fdc 	.word	0x24000fdc
 8001b60:	24010d25 	.word	0x24010d25
 8001b64:	24000fd4 	.word	0x24000fd4
 8001b68:	24000668 	.word	0x24000668
 8001b6c:	240001cc 	.word	0x240001cc

08001b70 <z_log_msg_commit>:
	msg->hdr.timestamp = timestamp_func();
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <z_log_msg_commit+0x1c>)
{
 8001b72:	b510      	push	{r4, lr}
 8001b74:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
 8001b7a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
 8001b7c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
 8001b7e:	4804      	ldr	r0, [pc, #16]	; (8001b90 <z_log_msg_commit+0x20>)
 8001b80:	f018 fc56 	bl	801a430 <mpsc_pbuf_commit>
}
 8001b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
 8001b88:	f7ff bfb6 	b.w	8001af8 <z_log_msg_post_finalize>
 8001b8c:	24000004 	.word	0x24000004
 8001b90:	2400017c 	.word	0x2400017c

08001b94 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)TYPE_SECTION_START(log_const))/
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <log_source_name_get+0x14>)
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <log_source_name_get+0x18>)
 8001b98:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
 8001b9a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return TYPE_SECTION_START(log_const)[source_id].name;
 8001b9e:	bf34      	ite	cc
 8001ba0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
 8001ba4:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
 8001ba6:	4770      	bx	lr
 8001ba8:	08028a04 	.word	0x08028a04
 8001bac:	08028a64 	.word	0x08028a64

08001bb0 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <log_backend_enable+0x24>)
 8001bb2:	1ac3      	subs	r3, r0, r3
 8001bb4:	111b      	asrs	r3, r3, #4
{
 8001bb6:	b410      	push	{r4}
	id += backend - log_backend_get(0);
 8001bb8:	3301      	adds	r3, #1
	backend->cb->id = id;
 8001bba:	6844      	ldr	r4, [r0, #4]

	log_backend_id_set(backend, id);
 8001bbc:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
 8001bbe:	6843      	ldr	r3, [r0, #4]
 8001bc0:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
 8001bc2:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
 8001bc4:	6843      	ldr	r3, [r0, #4]
 8001bc6:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8001bc8:	6843      	ldr	r3, [r0, #4]
 8001bca:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
 8001bcc:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
 8001bce:	f7ff be37 	b.w	8001840 <z_log_notify_backend_enabled>
 8001bd2:	bf00      	nop
 8001bd4:	08028a64 	.word	0x08028a64

08001bd8 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
 8001bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bdc:	b08f      	sub	sp, #60	; 0x3c
 8001bde:	f3c1 284a 	ubfx	r8, r1, #9, #11
 8001be2:	460d      	mov	r5, r1
 8001be4:	4691      	mov	r9, r2
 8001be6:	af04      	add	r7, sp, #16

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
 8001be8:	0d0c      	lsrs	r4, r1, #20
{
 8001bea:	60b8      	str	r0, [r7, #8]
 8001bec:	607b      	str	r3, [r7, #4]
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
 8001bee:	f1b8 0f00 	cmp.w	r8, #0
 8001bf2:	d063      	beq.n	8001cbc <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
 8001bf4:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	f04f 0b04 	mov.w	fp, #4
 8001bfe:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
 8001c02:	f8c7 800c 	str.w	r8, [r7, #12]
 8001c06:	4632      	mov	r2, r6
	struct z_cbprintf_buf_desc buf_desc = {
 8001c08:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
 8001c0a:	4648      	mov	r0, r9
	struct z_cbprintf_buf_desc buf_desc = {
 8001c0c:	e9c7 6607 	strd	r6, r6, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	f8cd b008 	str.w	fp, [sp, #8]
 8001c1a:	f8cd a000 	str.w	sl, [sp]
 8001c1e:	68f9      	ldr	r1, [r7, #12]
 8001c20:	f7fe ff2c 	bl	8000a7c <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
 8001c24:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8001c28:	4603      	mov	r3, r0
 8001c2a:	d31c      	bcc.n	8001c66 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
 8001c2c:	466c      	mov	r4, sp
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001c34:	ab04      	add	r3, sp, #16
 8001c36:	4826      	ldr	r0, [pc, #152]	; (8001cd0 <z_impl_z_log_msg_static_create+0xf8>)
 8001c38:	461a      	mov	r2, r3
 8001c3a:	e9c3 0105 	strd	r0, r1, [r3, #20]
 8001c3e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001c42:	61d9      	str	r1, [r3, #28]
 8001c44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c48:	8419      	strh	r1, [r3, #32]
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <z_impl_z_log_msg_static_create+0xfc>)
 8001c4c:	f842 3f10 	str.w	r3, [r2, #16]!
 8001c50:	f44f 5112 	mov.w	r1, #9344	; 0x2480
 8001c54:	4633      	mov	r3, r6
 8001c56:	4820      	ldr	r0, [pc, #128]	; (8001cd8 <z_impl_z_log_msg_static_create+0x100>)
 8001c58:	f7ff ffbe 	bl	8001bd8 <z_impl_z_log_msg_static_create>
 8001c5c:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
 8001c5e:	372c      	adds	r7, #44	; 0x2c
 8001c60:	46bd      	mov	sp, r7
 8001c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
 8001c66:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
 8001c6a:	f104 0017 	add.w	r0, r4, #23
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	4418      	add	r0, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 8001c72:	f368 2553 	bfi	r5, r8, #9, #11
 8001c76:	f020 0007 	bic.w	r0, r0, #7
 8001c7a:	0880      	lsrs	r0, r0, #2
 8001c7c:	f7ff fe58 	bl	8001930 <z_log_msg_alloc>
		if (msg) {
 8001c80:	4604      	mov	r4, r0
 8001c82:	b190      	cbz	r0, 8001caa <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
 8001c84:	683b      	ldr	r3, [r7, #0]
						    msg->data, out_desc.package_len,
 8001c86:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
 8001c8a:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <z_impl_z_log_msg_static_create+0x104>)
 8001c8c:	4648      	mov	r0, r9
	struct z_cbprintf_buf_desc buf_desc = {
 8001c8e:	61f9      	str	r1, [r7, #28]
 8001c90:	e9c7 3608 	strd	r3, r6, [r7, #32]
	return cbprintf_package_convert(in_packaged, in_len,
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	f8cd b008 	str.w	fp, [sp, #8]
 8001c9c:	e9cd a300 	strd	sl, r3, [sp]
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	68f9      	ldr	r1, [r7, #12]
 8001ca6:	f7fe fee9 	bl	8000a7c <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
 8001caa:	f368 2553 	bfi	r5, r8, #9, #11
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	462a      	mov	r2, r5
 8001cb6:	f018 fcc9 	bl	801a64c <z_log_msg_finalize>
 8001cba:	e7d0      	b.n	8001c5e <z_impl_z_log_msg_static_create+0x86>
 8001cbc:	f104 0017 	add.w	r0, r4, #23
 8001cc0:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 8001cc4:	0880      	lsrs	r0, r0, #2
 8001cc6:	f7ff fe33 	bl	8001930 <z_log_msg_alloc>
 8001cca:	4604      	mov	r4, r0
 8001ccc:	e7ed      	b.n	8001caa <z_impl_z_log_msg_static_create+0xd2>
 8001cce:	bf00      	nop
 8001cd0:	0802a0c1 	.word	0x0802a0c1
 8001cd4:	01000004 	.word	0x01000004
 8001cd8:	08028a24 	.word	0x08028a24
 8001cdc:	0801a621 	.word	0x0801a621

08001ce0 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
 8001ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ce4:	b087      	sub	sp, #28
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	460f      	mov	r7, r1
 8001cea:	4693      	mov	fp, r2
 8001cec:	4698      	mov	r8, r3
 8001cee:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
 8001cf2:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
 8001cf6:	b3a6      	cbz	r6, 8001d62 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
 8001cf8:	2110      	movs	r1, #16
 8001cfa:	4633      	mov	r3, r6
 8001cfc:	4652      	mov	r2, sl
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
 8001d04:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
 8001d08:	f7fe fce6 	bl	80006d8 <cbvprintf_package>
 8001d0c:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
 8001d0e:	f004 0407 	and.w	r4, r4, #7
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
 8001d12:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
 8001d16:	f00b 0b07 	and.w	fp, fp, #7
 8001d1a:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <z_impl_z_log_msg_runtime_vcreate+0x88>)
 8001d1c:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
 8001d1e:	4408      	add	r0, r1
	struct log_msg_desc desc =
 8001d20:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
 8001d24:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
 8001d26:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
 8001d2a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
 8001d2e:	431c      	orrs	r4, r3
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
 8001d30:	0880      	lsrs	r0, r0, #2
 8001d32:	f7ff fdfd 	bl	8001930 <z_log_msg_alloc>
	struct log_msg_desc desc =
 8001d36:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
 8001d3a:	4605      	mov	r5, r0
 8001d3c:	b140      	cbz	r0, 8001d50 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
 8001d3e:	b13e      	cbz	r6, 8001d50 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
 8001d40:	4633      	mov	r3, r6
 8001d42:	4652      	mov	r2, sl
 8001d44:	9903      	ldr	r1, [sp, #12]
 8001d46:	3010      	adds	r0, #16
 8001d48:	f8cd 9000 	str.w	r9, [sp]
 8001d4c:	f7fe fcc4 	bl	80006d8 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
 8001d50:	4643      	mov	r3, r8
 8001d52:	4622      	mov	r2, r4
 8001d54:	4639      	mov	r1, r7
 8001d56:	4628      	mov	r0, r5
	}
}
 8001d58:	b007      	add	sp, #28
 8001d5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
 8001d5e:	f018 bc75 	b.w	801a64c <z_log_msg_finalize>
		plen = 0;
 8001d62:	4631      	mov	r1, r6
 8001d64:	e7d3      	b.n	8001d0e <z_impl_z_log_msg_runtime_vcreate+0x2e>
 8001d66:	bf00      	nop
 8001d68:	000ffe00 	.word	0x000ffe00

08001d6c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8001d6c:	b40e      	push	{r1, r2, r3}
 8001d6e:	b503      	push	{r0, r1, lr}
 8001d70:	ab03      	add	r3, sp, #12
 8001d72:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <print_formatted+0x20>)
{
 8001d76:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
 8001d7a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8001d7c:	f018 fc8c 	bl	801a698 <cbvprintf>
	va_end(args);

	return length;
}
 8001d80:	b002      	add	sp, #8
 8001d82:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d86:	b003      	add	sp, #12
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	0801a6c1 	.word	0x0801a6c1

08001d90 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8001d90:	06ca      	lsls	r2, r1, #27
 8001d92:	d405      	bmi.n	8001da0 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8001d94:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
 8001d96:	bf4c      	ite	mi
 8001d98:	4902      	ldrmi	r1, [pc, #8]	; (8001da4 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
 8001d9a:	4903      	ldrpl	r1, [pc, #12]	; (8001da8 <newline_print+0x18>)
 8001d9c:	f7ff bfe6 	b.w	8001d6c <print_formatted>
	}
}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	08029fb1 	.word	0x08029fb1
 8001da8:	08029fb0 	.word	0x08029fb0

08001dac <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
 8001dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db0:	b089      	sub	sp, #36	; 0x24
 8001db2:	469b      	mov	fp, r3
 8001db4:	4604      	mov	r4, r0
 8001db6:	460d      	mov	r5, r1
 8001db8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001dbc:	9206      	str	r2, [sp, #24]
 8001dbe:	9304      	str	r3, [sp, #16]
 8001dc0:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
 8001dc4:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
 8001dc8:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
 8001dca:	9b04      	ldr	r3, [sp, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8087 	beq.w	8001ee0 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8001dd2:	f006 0308 	and.w	r3, r6, #8
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 8001dd6:	f006 0a02 	and.w	sl, r6, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8001dda:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
 8001ddc:	f018 fc1e 	bl	801a61c <z_log_get_tag>
	if (tag) {
 8001de0:	4602      	mov	r2, r0
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d04b      	beq.n	8001e7e <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
 8001de6:	4986      	ldr	r1, [pc, #536]	; (8002000 <log_output_process+0x254>)
 8001de8:	4620      	mov	r0, r4
 8001dea:	f7ff ffbf 	bl	8001d6c <print_formatted>
 8001dee:	4680      	mov	r8, r0
	if (stamp) {
 8001df0:	f1ba 0f00 	cmp.w	sl, #0
 8001df4:	d008      	beq.n	8001e08 <log_output_process+0x5c>
	if (!format) {
 8001df6:	f016 0f44 	tst.w	r6, #68	; 0x44
 8001dfa:	d142      	bne.n	8001e82 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
 8001dfc:	462a      	mov	r2, r5
 8001dfe:	4981      	ldr	r1, [pc, #516]	; (8002004 <log_output_process+0x258>)
 8001e00:	4620      	mov	r0, r4
 8001e02:	f7ff ffb3 	bl	8001d6c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 8001e06:	4480      	add	r8, r0
	if (color) {
 8001e08:	f006 0301 	and.w	r3, r6, #1
 8001e0c:	b15b      	cbz	r3, 8001e26 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
 8001e0e:	4b7e      	ldr	r3, [pc, #504]	; (8002008 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
 8001e10:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
 8001e12:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
 8001e14:	497d      	ldr	r1, [pc, #500]	; (800200c <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
 8001e16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
 8001e1a:	4b7d      	ldr	r3, [pc, #500]	; (8002010 <log_output_process+0x264>)
 8001e1c:	2a00      	cmp	r2, #0
 8001e1e:	bf08      	it	eq
 8001e20:	461a      	moveq	r2, r3
 8001e22:	f7ff ffa3 	bl	8001d6c <print_formatted>
	if (level_on) {
 8001e26:	f006 0308 	and.w	r3, r6, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d055      	beq.n	8001eda <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
 8001e2e:	4b79      	ldr	r3, [pc, #484]	; (8002014 <log_output_process+0x268>)
 8001e30:	4620      	mov	r0, r4
 8001e32:	9a04      	ldr	r2, [sp, #16]
 8001e34:	4978      	ldr	r1, [pc, #480]	; (8002018 <log_output_process+0x26c>)
 8001e36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e3a:	f7ff ff97 	bl	8001d6c <print_formatted>
 8001e3e:	4605      	mov	r5, r0
	if (domain) {
 8001e40:	9b06      	ldr	r3, [sp, #24]
 8001e42:	b12b      	cbz	r3, 8001e50 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
 8001e44:	461a      	mov	r2, r3
 8001e46:	4975      	ldr	r1, [pc, #468]	; (800201c <log_output_process+0x270>)
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f7ff ff8f 	bl	8001d6c <print_formatted>
 8001e4e:	4405      	add	r5, r0
	if (source) {
 8001e50:	f1bb 0f00 	cmp.w	fp, #0
 8001e54:	d005      	beq.n	8001e62 <log_output_process+0xb6>
		total += print_formatted(output,
 8001e56:	465a      	mov	r2, fp
 8001e58:	4971      	ldr	r1, [pc, #452]	; (8002020 <log_output_process+0x274>)
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7ff ff86 	bl	8001d6c <print_formatted>
 8001e60:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
 8001e62:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
 8001e64:	f1b9 0f00 	cmp.w	r9, #0
 8001e68:	d149      	bne.n	8001efe <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
 8001e6a:	2f00      	cmp	r7, #0
 8001e6c:	d14f      	bne.n	8001f0e <log_output_process+0x162>
	if (color) {
 8001e6e:	07f3      	lsls	r3, r6, #31
 8001e70:	f100 80c0 	bmi.w	8001ff4 <log_output_process+0x248>
	newline_print(output, flags);
 8001e74:	4631      	mov	r1, r6
 8001e76:	4620      	mov	r0, r4
 8001e78:	f7ff ff8a 	bl	8001d90 <newline_print>
}
 8001e7c:	e0b4      	b.n	8001fe8 <log_output_process+0x23c>
	uint32_t length = 0U;
 8001e7e:	4680      	mov	r8, r0
 8001e80:	e7b6      	b.n	8001df0 <log_output_process+0x44>
	} else if (freq != 0U) {
 8001e82:	4b68      	ldr	r3, [pc, #416]	; (8002024 <log_output_process+0x278>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	2800      	cmp	r0, #0
 8001e88:	d0bd      	beq.n	8001e06 <log_output_process+0x5a>
		timestamp /= timestamp_div;
 8001e8a:	4b67      	ldr	r3, [pc, #412]	; (8002028 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
 8001e8c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 8001e90:	f44f 6261 	mov.w	r2, #3600	; 0xe10
		mins = seconds / 60U;
 8001e94:	213c      	movs	r1, #60	; 0x3c
		timestamp /= timestamp_div;
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
 8001e9c:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
 8001ea0:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
 8001ea4:	fb0e f505 	mul.w	r5, lr, r5
 8001ea8:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8001eac:	fbb5 fcf0 	udiv	ip, r5, r0
 8001eb0:	fb02 321a 	mls	r2, r2, sl, r3
 8001eb4:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
 8001eb8:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8001ebc:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
 8001ec0:	fb01 2213 	mls	r2, r1, r3, r2
 8001ec4:	4959      	ldr	r1, [pc, #356]	; (800202c <log_output_process+0x280>)
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8001ec6:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
 8001eca:	9200      	str	r2, [sp, #0]
 8001ecc:	4620      	mov	r0, r4
 8001ece:	4652      	mov	r2, sl
 8001ed0:	e9cd c501 	strd	ip, r5, [sp, #4]
 8001ed4:	f7ff ff4a 	bl	8001d6c <print_formatted>
 8001ed8:	e795      	b.n	8001e06 <log_output_process+0x5a>
	int total = 0;
 8001eda:	f006 0508 	and.w	r5, r6, #8
 8001ede:	e7af      	b.n	8001e40 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8001ee0:	f1bb 0f01 	cmp.w	fp, #1
 8001ee4:	d106      	bne.n	8001ef4 <log_output_process+0x148>
	if (package) {
 8001ee6:	f1b9 0f00 	cmp.w	r9, #0
 8001eea:	d164      	bne.n	8001fb6 <log_output_process+0x20a>
	if (data_len) {
 8001eec:	2f00      	cmp	r7, #0
 8001eee:	d07b      	beq.n	8001fe8 <log_output_process+0x23c>
		prefix_offset = 0;
 8001ef0:	2500      	movs	r5, #0
 8001ef2:	e00c      	b.n	8001f0e <log_output_process+0x162>
	if (package) {
 8001ef4:	f1b9 0f00 	cmp.w	r9, #0
 8001ef8:	d0f8      	beq.n	8001eec <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8001efa:	484d      	ldr	r0, [pc, #308]	; (8002030 <log_output_process+0x284>)
 8001efc:	e05c      	b.n	8001fb8 <log_output_process+0x20c>
		cb = out_func;
 8001efe:	484d      	ldr	r0, [pc, #308]	; (8002034 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 8001f00:	464b      	mov	r3, r9
 8001f02:	4622      	mov	r2, r4
 8001f04:	494c      	ldr	r1, [pc, #304]	; (8002038 <log_output_process+0x28c>)
 8001f06:	f017 ff34 	bl	8019d72 <cbpprintf_external>
	if (data_len) {
 8001f0a:	2f00      	cmp	r7, #0
 8001f0c:	d068      	beq.n	8001fe0 <log_output_process+0x234>
		print_formatted(output, " ");
 8001f0e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800203c <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
 8001f12:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8002040 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8001f16:	2f10      	cmp	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
 8001f18:	f04f 0b00 	mov.w	fp, #0
	newline_print(output, flags);
 8001f1c:	4631      	mov	r1, r6
 8001f1e:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8001f20:	46b8      	mov	r8, r7
 8001f22:	bf28      	it	cs
 8001f24:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
 8001f28:	f7ff ff32 	bl	8001d90 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
 8001f2c:	455d      	cmp	r5, fp
 8001f2e:	dc45      	bgt.n	8001fbc <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
 8001f30:	9b05      	ldr	r3, [sp, #20]
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8001f32:	f04f 0b01 	mov.w	fp, #1
			print_formatted(output, "%02x ", data[i]);
 8001f36:	4651      	mov	r1, sl
 8001f38:	4620      	mov	r0, r4
 8001f3a:	781a      	ldrb	r2, [r3, #0]
 8001f3c:	f7ff ff16 	bl	8001d6c <print_formatted>
		if (i > 0 && !(i % 8)) {
 8001f40:	f01b 0f07 	tst.w	fp, #7
 8001f44:	d103      	bne.n	8001f4e <log_output_process+0x1a2>
			print_formatted(output, " ");
 8001f46:	4649      	mov	r1, r9
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7ff ff0f 	bl	8001d6c <print_formatted>
		if (i < length) {
 8001f4e:	45d8      	cmp	r8, fp
 8001f50:	d93b      	bls.n	8001fca <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
 8001f52:	9b05      	ldr	r3, [sp, #20]
 8001f54:	4651      	mov	r1, sl
 8001f56:	4620      	mov	r0, r4
 8001f58:	f813 200b 	ldrb.w	r2, [r3, fp]
 8001f5c:	f7ff ff06 	bl	8001d6c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8001f60:	f10b 0b01 	add.w	fp, fp, #1
 8001f64:	f1bb 0f10 	cmp.w	fp, #16
 8001f68:	d1ea      	bne.n	8001f40 <log_output_process+0x194>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8001f6a:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
 8001f6e:	4935      	ldr	r1, [pc, #212]	; (8002044 <log_output_process+0x298>)
 8001f70:	4620      	mov	r0, r4
 8001f72:	f7ff fefb 	bl	8001d6c <print_formatted>
		if (i < length) {
 8001f76:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
 8001f78:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
 8001f7a:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
 8001f7c:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
 8001f7e:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
 8001f82:	295f      	cmp	r1, #95	; 0x5f
 8001f84:	4930      	ldr	r1, [pc, #192]	; (8002048 <log_output_process+0x29c>)
 8001f86:	bf28      	it	cs
 8001f88:	222e      	movcs	r2, #46	; 0x2e
 8001f8a:	f7ff feef 	bl	8001d6c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8001f8e:	f10b 0b01 	add.w	fp, fp, #1
 8001f92:	f1bb 0f10 	cmp.w	fp, #16
 8001f96:	d01d      	beq.n	8001fd4 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
 8001f98:	f01b 0f07 	tst.w	fp, #7
 8001f9c:	d103      	bne.n	8001fa6 <log_output_process+0x1fa>
			print_formatted(output, " ");
 8001f9e:	4649      	mov	r1, r9
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f7ff fee3 	bl	8001d6c <print_formatted>
		if (i < length) {
 8001fa6:	45d8      	cmp	r8, fp
 8001fa8:	465a      	mov	r2, fp
 8001faa:	d8e5      	bhi.n	8001f78 <log_output_process+0x1cc>
			print_formatted(output, " ");
 8001fac:	4649      	mov	r1, r9
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7ff fedc 	bl	8001d6c <print_formatted>
 8001fb4:	e7eb      	b.n	8001f8e <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8001fb6:	481f      	ldr	r0, [pc, #124]	; (8002034 <log_output_process+0x288>)
		prefix_offset = 0;
 8001fb8:	9d04      	ldr	r5, [sp, #16]
 8001fba:	e7a1      	b.n	8001f00 <log_output_process+0x154>
		print_formatted(output, " ");
 8001fbc:	4649      	mov	r1, r9
 8001fbe:	4620      	mov	r0, r4
	for (int i = 0; i < prefix_offset; i++) {
 8001fc0:	f10b 0b01 	add.w	fp, fp, #1
		print_formatted(output, " ");
 8001fc4:	f7ff fed2 	bl	8001d6c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8001fc8:	e7b0      	b.n	8001f2c <log_output_process+0x180>
			print_formatted(output, "   ");
 8001fca:	4920      	ldr	r1, [pc, #128]	; (800204c <log_output_process+0x2a0>)
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f7ff fecd 	bl	8001d6c <print_formatted>
 8001fd2:	e7c5      	b.n	8001f60 <log_output_process+0x1b4>
		data += length;
 8001fd4:	9b05      	ldr	r3, [sp, #20]
	} while (len);
 8001fd6:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
 8001fda:	4443      	add	r3, r8
 8001fdc:	9305      	str	r3, [sp, #20]
	} while (len);
 8001fde:	d19a      	bne.n	8001f16 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
 8001fe0:	9b04      	ldr	r3, [sp, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f47f af43 	bne.w	8001e6e <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 8001fe8:	4620      	mov	r0, r4
}
 8001fea:	b009      	add	sp, #36	; 0x24
 8001fec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
 8001ff0:	f018 bb59 	b.w	801a6a6 <log_output_flush>
		print_formatted(output, "%s", log_color);
 8001ff4:	4a06      	ldr	r2, [pc, #24]	; (8002010 <log_output_process+0x264>)
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	4904      	ldr	r1, [pc, #16]	; (800200c <log_output_process+0x260>)
 8001ffa:	f7ff feb7 	bl	8001d6c <print_formatted>
}
 8001ffe:	e739      	b.n	8001e74 <log_output_process+0xc8>
 8002000:	0802a105 	.word	0x0802a105
 8002004:	0802a109 	.word	0x0802a109
 8002008:	08028b1c 	.word	0x08028b1c
 800200c:	0802ac65 	.word	0x0802ac65
 8002010:	0802a100 	.word	0x0802a100
 8002014:	08028b30 	.word	0x08028b30
 8002018:	0802a12e 	.word	0x0802a12e
 800201c:	0802a134 	.word	0x0802a134
 8002020:	0802a138 	.word	0x0802a138
 8002024:	24000fe8 	.word	0x24000fe8
 8002028:	24000fe4 	.word	0x24000fe4
 800202c:	0802a112 	.word	0x0802a112
 8002030:	0801a6f7 	.word	0x0801a6f7
 8002034:	0801a6c1 	.word	0x0801a6c1
 8002038:	0801a699 	.word	0x0801a699
 800203c:	0802a145 	.word	0x0802a145
 8002040:	0802a13d 	.word	0x0802a13d
 8002044:	0802a147 	.word	0x0802a147
 8002048:	0802a149 	.word	0x0802a149
 800204c:	0802a143 	.word	0x0802a143

08002050 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
 8002050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
 8002054:	880f      	ldrh	r7, [r1, #0]
 8002056:	b086      	sub	sp, #24
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
 8002058:	684b      	ldr	r3, [r1, #4]
 800205a:	4605      	mov	r5, r0
 800205c:	460c      	mov	r4, r1
 800205e:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
 8002060:	688e      	ldr	r6, [r1, #8]
	return msg->hdr.desc.level;
 8002062:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
 8002066:	b15b      	cbz	r3, 8002080 <log_output_msg_process+0x30>
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <log_output_msg_process+0x6c>)
 800206a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
 800206c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 8002070:	2900      	cmp	r1, #0
 8002072:	db20      	blt.n	80020b6 <log_output_msg_process+0x66>
	return msg->hdr.desc.domain;
 8002074:	7820      	ldrb	r0, [r4, #0]
 8002076:	f3c0 00c2 	ubfx	r0, r0, #3, #3
 800207a:	f7ff fd8b 	bl	8001b94 <log_source_name_get>
 800207e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 8002080:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
 8002082:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
 8002084:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
 8002088:	f3c0 100b 	ubfx	r0, r0, #4, #12
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
 800208c:	9700      	str	r7, [sp, #0]
	*len = msg->hdr.desc.package_len;
 800208e:	f3c2 224a 	ubfx	r2, r2, #9, #11
 8002092:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
 8002094:	eb01 0402 	add.w	r4, r1, r2
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	bf08      	it	eq
 800209e:	2100      	moveq	r1, #0
 80020a0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80020a4:	e9cd 1401 	strd	r1, r4, [sp, #4]
 80020a8:	4628      	mov	r0, r5
 80020aa:	4631      	mov	r1, r6
 80020ac:	f7ff fe7e 	bl	8001dac <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
 80020b0:	b006      	add	sp, #24
 80020b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e7e2      	b.n	8002080 <log_output_msg_process+0x30>
 80020ba:	bf00      	nop
 80020bc:	08028a04 	.word	0x08028a04

080020c0 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80020c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80020c4:	4a11      	ldr	r2, [pc, #68]	; (800210c <log_output_dropped_process+0x4c>)
 80020c6:	428b      	cmp	r3, r1
{
 80020c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020ca:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80020cc:	bf28      	it	cs
 80020ce:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 80020d0:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80020d2:	2105      	movs	r1, #5
 80020d4:	4668      	mov	r0, sp
 80020d6:	f017 fec3 	bl	8019e60 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 80020da:	6863      	ldr	r3, [r4, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80020dc:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 80020de:	220b      	movs	r2, #11
 80020e0:	4628      	mov	r0, r5
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	490a      	ldr	r1, [pc, #40]	; (8002110 <log_output_dropped_process+0x50>)
 80020e6:	f018 faca 	bl	801a67e <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 80020ea:	6863      	ldr	r3, [r4, #4]
 80020ec:	4632      	mov	r2, r6
 80020ee:	4669      	mov	r1, sp
 80020f0:	4628      	mov	r0, r5
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f018 fac3 	bl	801a67e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 80020f8:	6863      	ldr	r3, [r4, #4]
 80020fa:	221b      	movs	r2, #27
 80020fc:	4905      	ldr	r1, [pc, #20]	; (8002114 <log_output_dropped_process+0x54>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4628      	mov	r0, r5
 8002102:	f018 fabc 	bl	801a67e <buffer_write>
		     output->control_block->ctx);
}
 8002106:	b002      	add	sp, #8
 8002108:	bd70      	pop	{r4, r5, r6, pc}
 800210a:	bf00      	nop
 800210c:	0802e11e 	.word	0x0802e11e
 8002110:	0802a168 	.word	0x0802a168
 8002114:	0802a14c 	.word	0x0802a14c

08002118 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8002118:	2100      	movs	r1, #0
 800211a:	2301      	movs	r3, #1
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <log_output_timestamp_freq_set+0x20>)
 800211e:	4290      	cmp	r0, r2
 8002120:	d806      	bhi.n	8002130 <log_output_timestamp_freq_set+0x18>
 8002122:	4a06      	ldr	r2, [pc, #24]	; (800213c <log_output_timestamp_freq_set+0x24>)
 8002124:	b901      	cbnz	r1, 8002128 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
 8002126:	2301      	movs	r3, #1
 8002128:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <log_output_timestamp_freq_set+0x28>)
 800212c:	6018      	str	r0, [r3, #0]
}
 800212e:	4770      	bx	lr
		frequency /= 2U;
 8002130:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8002132:	2101      	movs	r1, #1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	e7f2      	b.n	800211e <log_output_timestamp_freq_set+0x6>
 8002138:	000f4240 	.word	0x000f4240
 800213c:	24000fe4 	.word	0x24000fe4
 8002140:	24000fe8 	.word	0x24000fe8

08002144 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
 8002144:	4b01      	ldr	r3, [pc, #4]	; (800214c <format_set+0x8>)
	return 0;
}
 8002146:	2000      	movs	r0, #0
	log_format_current = log_type;
 8002148:	6019      	str	r1, [r3, #0]
}
 800214a:	4770      	bx	lr
 800214c:	24001000 	.word	0x24001000

08002150 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
 8002150:	4b02      	ldr	r3, [pc, #8]	; (800215c <panic+0xc>)
 8002152:	2201      	movs	r2, #1
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <panic+0x10>)
 8002156:	701a      	strb	r2, [r3, #0]
 8002158:	f018 baa5 	b.w	801a6a6 <log_output_flush>
 800215c:	24010d27 	.word	0x24010d27
 8002160:	08028b60 	.word	0x08028b60

08002164 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8002164:	4801      	ldr	r0, [pc, #4]	; (800216c <dropped+0x8>)
 8002166:	f7ff bfab 	b.w	80020c0 <log_output_dropped_process>
 800216a:	bf00      	nop
 800216c:	08028b60 	.word	0x08028b60

08002170 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <process+0x1c>)
{
 8002172:	b510      	push	{r4, lr}
 8002174:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	f7ff fb4c 	bl	8001814 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
 800217c:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 800217e:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
 8002180:	4621      	mov	r1, r4
 8002182:	4803      	ldr	r0, [pc, #12]	; (8002190 <process+0x20>)
}
 8002184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
 8002188:	4718      	bx	r3
 800218a:	bf00      	nop
 800218c:	24001000 	.word	0x24001000
 8002190:	08028b60 	.word	0x08028b60

08002194 <char_out>:
{
 8002194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002196:	460d      	mov	r5, r1
 8002198:	4604      	mov	r4, r0
 800219a:	1846      	adds	r6, r0, r1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 800219c:	4f05      	ldr	r7, [pc, #20]	; (80021b4 <char_out+0x20>)
		for (size_t i = 0; i < length; i++) {
 800219e:	42b4      	cmp	r4, r6
 80021a0:	d101      	bne.n	80021a6 <char_out+0x12>
}
 80021a2:	4628      	mov	r0, r5
 80021a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
 80021a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4801      	ldr	r0, [pc, #4]	; (80021b4 <char_out+0x20>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 80021b2:	e7f4      	b.n	800219e <char_out+0xa>
 80021b4:	0802849c 	.word	0x0802849c

080021b8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 80021b8:	4901      	ldr	r1, [pc, #4]	; (80021c0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 80021ba:	2210      	movs	r2, #16
	str	r2, [r1]
 80021bc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 80021be:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 80021c0:	e000ed10 	.word	0xe000ed10

080021c4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 80021c4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 80021c6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 80021c8:	f380 8811 	msr	BASEPRI, r0
	isb
 80021cc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
 80021d0:	f3bf 8f4f 	dsb	sy
 80021d4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 80021d6:	b662      	cpsie	i
	isb
 80021d8:	f3bf 8f6f 	isb	sy

	bx	lr
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop

080021e0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 80021e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021e4:	4681      	mov	r9, r0
 80021e6:	af00      	add	r7, sp, #0

	if (esf != NULL) {
 80021e8:	460c      	mov	r4, r1
 80021ea:	2900      	cmp	r1, #0
 80021ec:	d04c      	beq.n	8002288 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 80021ee:	466e      	mov	r6, sp
 80021f0:	b08a      	sub	sp, #40	; 0x28
 80021f2:	68a3      	ldr	r3, [r4, #8]
 80021f4:	466d      	mov	r5, sp
 80021f6:	e9d1 1200 	ldrd	r1, r2, [r1]
 80021fa:	4827      	ldr	r0, [pc, #156]	; (8002298 <z_arm_fatal_error+0xb8>)
 80021fc:	f04f 0a05 	mov.w	sl, #5
 8002200:	46a8      	mov	r8, r5
 8002202:	e9c5 0105 	strd	r0, r1, [r5, #20]
 8002206:	e9c5 2307 	strd	r2, r3, [r5, #28]
 800220a:	f848 af10 	str.w	sl, [r8, #16]!
 800220e:	2300      	movs	r3, #0
 8002210:	4642      	mov	r2, r8
 8002212:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8002216:	4821      	ldr	r0, [pc, #132]	; (800229c <z_arm_fatal_error+0xbc>)
 8002218:	f7ff fcde 	bl	8001bd8 <z_impl_z_log_msg_static_create>
 800221c:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 800221e:	6963      	ldr	r3, [r4, #20]
 8002220:	46ad      	mov	sp, r5
 8002222:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8002226:	481e      	ldr	r0, [pc, #120]	; (80022a0 <z_arm_fatal_error+0xc0>)
 8002228:	f8c5 a010 	str.w	sl, [r5, #16]
 800222c:	e9c5 0105 	strd	r0, r1, [r5, #20]
 8002230:	e9c5 2307 	strd	r2, r3, [r5, #28]
 8002234:	2300      	movs	r3, #0
 8002236:	4642      	mov	r2, r8
 8002238:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 800223c:	4817      	ldr	r0, [pc, #92]	; (800229c <z_arm_fatal_error+0xbc>)
 800223e:	f7ff fccb 	bl	8001bd8 <z_impl_z_log_msg_static_create>
 8002242:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8002244:	69e3      	ldr	r3, [r4, #28]
 8002246:	b088      	sub	sp, #32
 8002248:	466d      	mov	r5, sp
 800224a:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <z_arm_fatal_error+0xc4>)
 800224c:	f04f 0a03 	mov.w	sl, #3
 8002250:	46a8      	mov	r8, r5
 8002252:	e9c5 2305 	strd	r2, r3, [r5, #20]
 8002256:	f848 af10 	str.w	sl, [r8, #16]!
 800225a:	2300      	movs	r3, #0
 800225c:	4642      	mov	r2, r8
 800225e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8002262:	480e      	ldr	r0, [pc, #56]	; (800229c <z_arm_fatal_error+0xbc>)
 8002264:	f7ff fcb8 	bl	8001bd8 <z_impl_z_log_msg_static_create>
 8002268:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 800226a:	69a3      	ldr	r3, [r4, #24]
 800226c:	46ad      	mov	sp, r5
 800226e:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <z_arm_fatal_error+0xc8>)
 8002270:	f8c5 a010 	str.w	sl, [r5, #16]
 8002274:	e9c5 2305 	strd	r2, r3, [r5, #20]
 8002278:	2300      	movs	r3, #0
 800227a:	4642      	mov	r2, r8
 800227c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8002280:	4806      	ldr	r0, [pc, #24]	; (800229c <z_arm_fatal_error+0xbc>)
 8002282:	f7ff fca9 	bl	8001bd8 <z_impl_z_log_msg_static_create>
 8002286:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002288:	4621      	mov	r1, r4
 800228a:	4648      	mov	r0, r9
 800228c:	f016 fd94 	bl	8018db8 <z_fatal_error>
}
 8002290:	46bd      	mov	sp, r7
 8002292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002296:	bf00      	nop
 8002298:	0802a1ae 	.word	0x0802a1ae
 800229c:	08028a4c 	.word	0x08028a4c
 80022a0:	0802a1dd 	.word	0x0802a1dd
 80022a4:	0802a20c 	.word	0x0802a20c
 80022a8:	0802a21b 	.word	0x0802a21b

080022ac <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80022ac:	b200      	sxth	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80022ae:	2800      	cmp	r0, #0
 80022b0:	db07      	blt.n	80022c2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	2301      	movs	r3, #1
 80022b4:	0941      	lsrs	r1, r0, #5
 80022b6:	f000 001f 	and.w	r0, r0, #31
 80022ba:	4a02      	ldr	r2, [pc, #8]	; (80022c4 <arch_irq_enable+0x18>)
 80022bc:	4083      	lsls	r3, r0
 80022be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100

080022c8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80022c8:	b200      	sxth	r0, r0
		prio += _IRQ_PRIO_OFFSET;
 80022ca:	3101      	adds	r1, #1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80022cc:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80022d2:	b2c9      	uxtb	r1, r1
  if ((int32_t)(IRQn) >= 0)
 80022d4:	db06      	blt.n	80022e4 <z_arm_irq_priority_set+0x1c>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80022da:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80022de:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 80022e2:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	f000 000f 	and.w	r0, r0, #15
 80022e8:	4b01      	ldr	r3, [pc, #4]	; (80022f0 <z_arm_irq_priority_set+0x28>)
 80022ea:	5419      	strb	r1, [r3, r0]
}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000ed14 	.word	0xe000ed14

080022f4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 80022f4:	bf30      	wfi
    b z_SysNmiOnReset
 80022f6:	f7ff bffd 	b.w	80022f4 <z_SysNmiOnReset>
 80022fa:	bf00      	nop

080022fc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80022fc:	4a0f      	ldr	r2, [pc, #60]	; (800233c <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 80022fe:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8002300:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <z_arm_prep_c+0x44>)
 8002306:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8002308:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800230c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8002310:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002314:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800231c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8002320:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002324:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002328:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 800232c:	f016 fe02 	bl	8018f34 <z_bss_zero>
	z_data_copy();
 8002330:	f017 fab6 	bl	80198a0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8002334:	f000 fbc4 	bl	8002ac0 <z_arm_interrupt_init>
	z_cstart();
 8002338:	f016 fe58 	bl	8018fec <z_cstart>
 800233c:	08000000 	.word	0x08000000
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8002344:	4a09      	ldr	r2, [pc, #36]	; (800236c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8002346:	490a      	ldr	r1, [pc, #40]	; (8002370 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8002348:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 800234a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 800234c:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
 800234e:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002350:	4908      	ldr	r1, [pc, #32]	; (8002374 <arch_swap+0x30>)
 8002352:	684b      	ldr	r3, [r1, #4]
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002358:	604b      	str	r3, [r1, #4]
 800235a:	2300      	movs	r3, #0
 800235c:	f383 8811 	msr	BASEPRI, r3
 8002360:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8002364:	6893      	ldr	r3, [r2, #8]
}
 8002366:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	24010cc4 	.word	0x24010cc4
 8002370:	08029b24 	.word	0x08029b24
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8002378:	4912      	ldr	r1, [pc, #72]	; (80023c4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 800237a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 800237c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8002380:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8002382:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8002386:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800238a:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 800238c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8002390:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8002394:	4f0c      	ldr	r7, [pc, #48]	; (80023c8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8002396:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 800239a:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
 800239c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800239e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80023a0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 80023a2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80023a4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80023a6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80023aa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80023ac:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80023ae:	f000 fbcb 	bl	8002b48 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80023b2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80023b6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80023ba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80023be:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 80023c2:	4770      	bx	lr
    ldr r1, =_kernel
 80023c4:	24010cc4 	.word	0x24010cc4
    ldr v4, =_SCS_ICSR
 80023c8:	e000ed04 	.word	0xe000ed04

080023cc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 80023cc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80023d0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80023d2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80023d6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80023da:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80023dc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80023e0:	2902      	cmp	r1, #2
    beq _oops
 80023e2:	d0ff      	beq.n	80023e4 <_oops>

080023e4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80023e4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 80023e6:	f018 f995 	bl	801a714 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 80023ea:	bd01      	pop	{r0, pc}

080023ec <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 80023ec:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 80023f0:	3a20      	subs	r2, #32
	iframe->a2 = (uint32_t)p1;
 80023f2:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <arch_new_thread+0x28>)
	iframe->a2 = (uint32_t)p1;
 80023f6:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
 80023f8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 80023fa:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 80023fe:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
 8002400:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 8002402:	6191      	str	r1, [r2, #24]
	iframe->a4 = (uint32_t)p3;
 8002404:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8002406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800240a:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 800240c:	2300      	movs	r3, #0
	thread->callee_saved.psp = (uint32_t)iframe;
 800240e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8002410:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8002412:	4770      	bx	lr
 8002414:	08019e7b 	.word	0x08019e7b

08002418 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8002418:	4a09      	ldr	r2, [pc, #36]	; (8002440 <z_check_thread_stack_fail+0x28>)
{
 800241a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 800241c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 800241e:	b170      	cbz	r0, 800243e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8002420:	f113 0f16 	cmn.w	r3, #22
 8002424:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8002426:	d005      	beq.n	8002434 <z_check_thread_stack_fail+0x1c>
 8002428:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 800242c:	429a      	cmp	r2, r3
 800242e:	d805      	bhi.n	800243c <z_check_thread_stack_fail+0x24>
 8002430:	4283      	cmp	r3, r0
 8002432:	d203      	bcs.n	800243c <z_check_thread_stack_fail+0x24>
		return 0;
 8002434:	4281      	cmp	r1, r0
 8002436:	bf28      	it	cs
 8002438:	2000      	movcs	r0, #0
 800243a:	4770      	bx	lr
 800243c:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
 800243e:	4770      	bx	lr
 8002440:	24010cc4 	.word	0x24010cc4

08002444 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8002444:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <arch_switch_to_main_thread+0x28>)
{
 8002448:	460d      	mov	r5, r1
 800244a:	4614      	mov	r4, r2
	_current = main_thread;
 800244c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800244e:	f000 fb7b 	bl	8002b48 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8002452:	4620      	mov	r0, r4
 8002454:	f385 8809 	msr	PSP, r5
 8002458:	2100      	movs	r1, #0
 800245a:	b663      	cpsie	if
 800245c:	f381 8811 	msr	BASEPRI, r1
 8002460:	f3bf 8f6f 	isb	sy
 8002464:	2200      	movs	r2, #0
 8002466:	2300      	movs	r3, #0
 8002468:	f017 fd07 	bl	8019e7a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 800246c:	24010cc4 	.word	0x24010cc4

08002470 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8002470:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8002472:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8002476:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 800247a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800247e:	4904      	ldr	r1, [pc, #16]	; (8002490 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8002480:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8002482:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8002484:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8002486:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 800248a:	4902      	ldr	r1, [pc, #8]	; (8002494 <_isr_wrapper+0x24>)
	bx r1
 800248c:	4708      	bx	r1
 800248e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8002490:	080284ec 	.word	0x080284ec
	ldr r1, =z_arm_int_exit
 8002494:	08002499 	.word	0x08002499

08002498 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800249a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 800249c:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
 800249e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 80024a0:	d003      	beq.n	80024aa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 80024a2:	4903      	ldr	r1, [pc, #12]	; (80024b0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 80024a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 80024a8:	600a      	str	r2, [r1, #0]

080024aa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 80024aa:	4770      	bx	lr
	ldr r3, =_kernel
 80024ac:	24010cc4 	.word	0x24010cc4
	ldr r1, =_SCS_ICSR
 80024b0:	e000ed04 	.word	0xe000ed04

080024b4 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 80024b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	4606      	mov	r6, r0
 80024bc:	460d      	mov	r5, r1
 80024be:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
 80024c0:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <bus_fault.constprop.0+0x12c>)
 80024c2:	2402      	movs	r4, #2
 80024c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80024c8:	f107 0210 	add.w	r2, r7, #16
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	4845      	ldr	r0, [pc, #276]	; (80025e4 <bus_fault.constprop.0+0x130>)
 80024d0:	613c      	str	r4, [r7, #16]
 80024d2:	f018 f92e 	bl	801a732 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80024d6:	4b44      	ldr	r3, [pc, #272]	; (80025e8 <bus_fault.constprop.0+0x134>)
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	04d9      	lsls	r1, r3, #19
 80024dc:	d56d      	bpl.n	80025ba <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
 80024de:	4b43      	ldr	r3, [pc, #268]	; (80025ec <bus_fault.constprop.0+0x138>)
 80024e0:	f107 0210 	add.w	r2, r7, #16
 80024e4:	483f      	ldr	r0, [pc, #252]	; (80025e4 <bus_fault.constprop.0+0x130>)
 80024e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80024ea:	e9c7 4304 	strd	r4, r3, [r7, #16]
 80024ee:	f018 f920 	bl	801a732 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
 80024f2:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80024f4:	4b3c      	ldr	r3, [pc, #240]	; (80025e8 <bus_fault.constprop.0+0x134>)
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	051a      	lsls	r2, r3, #20
 80024fa:	d50b      	bpl.n	8002514 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
 80024fc:	4b3c      	ldr	r3, [pc, #240]	; (80025f0 <bus_fault.constprop.0+0x13c>)
 80024fe:	f107 0210 	add.w	r2, r7, #16
 8002502:	4838      	ldr	r0, [pc, #224]	; (80025e4 <bus_fault.constprop.0+0x130>)
 8002504:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	2302      	movs	r3, #2
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	f018 f910 	bl	801a732 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
 8002512:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8002514:	4c34      	ldr	r4, [pc, #208]	; (80025e8 <bus_fault.constprop.0+0x134>)
 8002516:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002518:	059b      	lsls	r3, r3, #22
 800251a:	d523      	bpl.n	8002564 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
 800251c:	46e8      	mov	r8, sp
 800251e:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <bus_fault.constprop.0+0x140>)
 8002520:	f107 0210 	add.w	r2, r7, #16
 8002524:	482f      	ldr	r0, [pc, #188]	; (80025e4 <bus_fault.constprop.0+0x130>)
 8002526:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	2302      	movs	r3, #2
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	f018 f8ff 	bl	801a732 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8002534:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8002536:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002538:	0410      	lsls	r0, r2, #16
 800253a:	d512      	bpl.n	8002562 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 800253c:	b088      	sub	sp, #32
 800253e:	466a      	mov	r2, sp
 8002540:	492d      	ldr	r1, [pc, #180]	; (80025f8 <bus_fault.constprop.0+0x144>)
 8002542:	4828      	ldr	r0, [pc, #160]	; (80025e4 <bus_fault.constprop.0+0x130>)
 8002544:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8002548:	2303      	movs	r3, #3
 800254a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800254e:	f842 3f10 	str.w	r3, [r2, #16]!
 8002552:	f018 f8ee 	bl	801a732 <z_log_msg_static_create.constprop.0>
 8002556:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
 8002558:	b11e      	cbz	r6, 8002562 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800255a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800255c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002560:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 8002562:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8002564:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <bus_fault.constprop.0+0x134>)
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	0559      	lsls	r1, r3, #21
 800256a:	d50b      	bpl.n	8002584 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
 800256c:	4b23      	ldr	r3, [pc, #140]	; (80025fc <bus_fault.constprop.0+0x148>)
 800256e:	f107 0210 	add.w	r2, r7, #16
 8002572:	481c      	ldr	r0, [pc, #112]	; (80025e4 <bus_fault.constprop.0+0x130>)
 8002574:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	2302      	movs	r3, #2
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	f018 f8d8 	bl	801a732 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 8002582:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <bus_fault.constprop.0+0x134>)
 8002586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002588:	05d2      	lsls	r2, r2, #23
 800258a:	d518      	bpl.n	80025be <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
 800258c:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <bus_fault.constprop.0+0x14c>)
 800258e:	f107 0210 	add.w	r2, r7, #16
 8002592:	4814      	ldr	r0, [pc, #80]	; (80025e4 <bus_fault.constprop.0+0x130>)
 8002594:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	2302      	movs	r3, #2
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	f018 f8c8 	bl	801a732 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 80025a2:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80025a4:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <bus_fault.constprop.0+0x134>)

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
 80025a6:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80025a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80025aa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80025ae:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80025b0:	2300      	movs	r3, #0
 80025b2:	702b      	strb	r3, [r5, #0]
}
 80025b4:	46bd      	mov	sp, r7
 80025b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
 80025ba:	2016      	movs	r0, #22
 80025bc:	e79a      	b.n	80024f4 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	049b      	lsls	r3, r3, #18
 80025c2:	d5ef      	bpl.n	80025a4 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <bus_fault.constprop.0+0x150>)
 80025c6:	f107 0210 	add.w	r2, r7, #16
 80025ca:	4806      	ldr	r0, [pc, #24]	; (80025e4 <bus_fault.constprop.0+0x130>)
 80025cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	2302      	movs	r3, #2
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	f018 f8ac 	bl	801a732 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
 80025da:	201c      	movs	r0, #28
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 80025dc:	e7e2      	b.n	80025a4 <bus_fault.constprop.0+0xf0>
 80025de:	bf00      	nop
 80025e0:	0802a249 	.word	0x0802a249
 80025e4:	08028a4c 	.word	0x08028a4c
 80025e8:	e000ed00 	.word	0xe000ed00
 80025ec:	0802a25f 	.word	0x0802a25f
 80025f0:	0802a270 	.word	0x0802a270
 80025f4:	0802a283 	.word	0x0802a283
 80025f8:	0802a29c 	.word	0x0802a29c
 80025fc:	0802a2b1 	.word	0x0802a2b1
 8002600:	0802a2cc 	.word	0x0802a2cc
 8002604:	0802a2e4 	.word	0x0802a2e4

08002608 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 8002608:	b510      	push	{r4, lr}
 800260a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <usage_fault.constprop.0+0xe0>)
 800260e:	2402      	movs	r4, #2
 8002610:	aa04      	add	r2, sp, #16
 8002612:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002616:	4835      	ldr	r0, [pc, #212]	; (80026ec <usage_fault.constprop.0+0xe4>)
 8002618:	9305      	str	r3, [sp, #20]
 800261a:	9404      	str	r4, [sp, #16]
 800261c:	f018 f889 	bl	801a732 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8002620:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <usage_fault.constprop.0+0xe8>)
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	019a      	lsls	r2, r3, #6
 8002626:	d55d      	bpl.n	80026e4 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
 8002628:	4b32      	ldr	r3, [pc, #200]	; (80026f4 <usage_fault.constprop.0+0xec>)
 800262a:	aa04      	add	r2, sp, #16
 800262c:	482f      	ldr	r0, [pc, #188]	; (80026ec <usage_fault.constprop.0+0xe4>)
 800262e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002632:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8002636:	f018 f87c 	bl	801a732 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
 800263a:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800263c:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <usage_fault.constprop.0+0xe8>)
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	01db      	lsls	r3, r3, #7
 8002642:	d50a      	bpl.n	800265a <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
 8002644:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <usage_fault.constprop.0+0xf0>)
 8002646:	aa04      	add	r2, sp, #16
 8002648:	4828      	ldr	r0, [pc, #160]	; (80026ec <usage_fault.constprop.0+0xe4>)
 800264a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800264e:	9305      	str	r3, [sp, #20]
 8002650:	2302      	movs	r3, #2
 8002652:	9304      	str	r3, [sp, #16]
 8002654:	f018 f86d 	bl	801a732 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8002658:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <usage_fault.constprop.0+0xe8>)
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	031c      	lsls	r4, r3, #12
 8002660:	d50a      	bpl.n	8002678 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <usage_fault.constprop.0+0xf4>)
 8002664:	aa04      	add	r2, sp, #16
 8002666:	4821      	ldr	r0, [pc, #132]	; (80026ec <usage_fault.constprop.0+0xe4>)
 8002668:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800266c:	9305      	str	r3, [sp, #20]
 800266e:	2302      	movs	r3, #2
 8002670:	9304      	str	r3, [sp, #16]
 8002672:	f018 f85e 	bl	801a732 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 8002676:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <usage_fault.constprop.0+0xe8>)
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	0359      	lsls	r1, r3, #13
 800267e:	d50a      	bpl.n	8002696 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8002680:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <usage_fault.constprop.0+0xf8>)
 8002682:	aa04      	add	r2, sp, #16
 8002684:	4819      	ldr	r0, [pc, #100]	; (80026ec <usage_fault.constprop.0+0xe4>)
 8002686:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800268a:	9305      	str	r3, [sp, #20]
 800268c:	2302      	movs	r3, #2
 800268e:	9304      	str	r3, [sp, #16]
 8002690:	f018 f84f 	bl	801a732 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 8002694:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8002696:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <usage_fault.constprop.0+0xe8>)
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	039a      	lsls	r2, r3, #14
 800269c:	d50a      	bpl.n	80026b4 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <usage_fault.constprop.0+0xfc>)
 80026a0:	aa04      	add	r2, sp, #16
 80026a2:	4812      	ldr	r0, [pc, #72]	; (80026ec <usage_fault.constprop.0+0xe4>)
 80026a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80026a8:	9305      	str	r3, [sp, #20]
 80026aa:	2302      	movs	r3, #2
 80026ac:	9304      	str	r3, [sp, #16]
 80026ae:	f018 f840 	bl	801a732 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 80026b2:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <usage_fault.constprop.0+0xe8>)
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	03db      	lsls	r3, r3, #15
 80026ba:	d50a      	bpl.n	80026d2 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <usage_fault.constprop.0+0x100>)
 80026be:	aa04      	add	r2, sp, #16
 80026c0:	480a      	ldr	r0, [pc, #40]	; (80026ec <usage_fault.constprop.0+0xe4>)
 80026c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80026c6:	9305      	str	r3, [sp, #20]
 80026c8:	2302      	movs	r3, #2
 80026ca:	9304      	str	r3, [sp, #16]
 80026cc:	f018 f831 	bl	801a732 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 80026d0:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80026d2:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <usage_fault.constprop.0+0xe8>)
 80026d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80026d6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80026da:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80026de:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 80026e0:	b006      	add	sp, #24
 80026e2:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 80026e4:	201d      	movs	r0, #29
 80026e6:	e7a9      	b.n	800263c <usage_fault.constprop.0+0x34>
 80026e8:	0802a313 	.word	0x0802a313
 80026ec:	08028a4c 	.word	0x08028a4c
 80026f0:	e000ed00 	.word	0xe000ed00
 80026f4:	0802a32b 	.word	0x0802a32b
 80026f8:	0802a33e 	.word	0x0802a33e
 80026fc:	0802a358 	.word	0x0802a358
 8002700:	0802a376 	.word	0x0802a376
 8002704:	0802a39b 	.word	0x0802a39b
 8002708:	0802a3b5 	.word	0x0802a3b5

0800270c <mem_manage_fault>:
{
 800270c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	4681      	mov	r9, r0
 8002714:	468a      	mov	sl, r1
 8002716:	4690      	mov	r8, r2
 8002718:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
 800271a:	4b51      	ldr	r3, [pc, #324]	; (8002860 <mem_manage_fault+0x154>)
 800271c:	2402      	movs	r4, #2
 800271e:	f107 0210 	add.w	r2, r7, #16
 8002722:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	484e      	ldr	r0, [pc, #312]	; (8002864 <mem_manage_fault+0x158>)
 800272a:	613c      	str	r4, [r7, #16]
 800272c:	f018 f801 	bl	801a732 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8002730:	4b4d      	ldr	r3, [pc, #308]	; (8002868 <mem_manage_fault+0x15c>)
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	06de      	lsls	r6, r3, #27
 8002736:	d545      	bpl.n	80027c4 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8002738:	4b4c      	ldr	r3, [pc, #304]	; (800286c <mem_manage_fault+0x160>)
 800273a:	f107 0210 	add.w	r2, r7, #16
 800273e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002742:	4848      	ldr	r0, [pc, #288]	; (8002864 <mem_manage_fault+0x158>)
 8002744:	e9c7 4304 	strd	r4, r3, [r7, #16]
		reason = K_ERR_ARM_MEM_STACKING;
 8002748:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
 800274a:	f017 fff2 	bl	801a732 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 800274e:	4b46      	ldr	r3, [pc, #280]	; (8002868 <mem_manage_fault+0x15c>)
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	071d      	lsls	r5, r3, #28
 8002754:	d50b      	bpl.n	800276e <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
 8002756:	4b46      	ldr	r3, [pc, #280]	; (8002870 <mem_manage_fault+0x164>)
		reason = K_ERR_ARM_MEM_UNSTACKING;
 8002758:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
 800275a:	f107 0210 	add.w	r2, r7, #16
 800275e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	2302      	movs	r3, #2
 8002766:	483f      	ldr	r0, [pc, #252]	; (8002864 <mem_manage_fault+0x158>)
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	f017 ffe2 	bl	801a732 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800276e:	4d3e      	ldr	r5, [pc, #248]	; (8002868 <mem_manage_fault+0x15c>)
 8002770:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002772:	0798      	lsls	r0, r3, #30
 8002774:	d528      	bpl.n	80027c8 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
 8002776:	466c      	mov	r4, sp
 8002778:	4b3e      	ldr	r3, [pc, #248]	; (8002874 <mem_manage_fault+0x168>)
 800277a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800277e:	f107 0210 	add.w	r2, r7, #16
 8002782:	4838      	ldr	r0, [pc, #224]	; (8002864 <mem_manage_fault+0x158>)
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	2302      	movs	r3, #2
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	f017 ffd2 	bl	801a732 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
 800278e:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8002790:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002792:	0619      	lsls	r1, r3, #24
 8002794:	d560      	bpl.n	8002858 <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8002796:	b088      	sub	sp, #32
 8002798:	466a      	mov	r2, sp
 800279a:	4b37      	ldr	r3, [pc, #220]	; (8002878 <mem_manage_fault+0x16c>)
 800279c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80027a0:	4830      	ldr	r0, [pc, #192]	; (8002864 <mem_manage_fault+0x158>)
 80027a2:	e9c2 3605 	strd	r3, r6, [r2, #20]
 80027a6:	2303      	movs	r3, #3
 80027a8:	f842 3f10 	str.w	r3, [r2, #16]!
 80027ac:	f017 ffc1 	bl	801a732 <z_log_msg_static_create.constprop.0>
 80027b0:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
 80027b2:	f1ba 0f00 	cmp.w	sl, #0
 80027b6:	d003      	beq.n	80027c0 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80027b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80027ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027be:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 80027c0:	2413      	movs	r4, #19
 80027c2:	e003      	b.n	80027cc <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
 80027c4:	2410      	movs	r4, #16
 80027c6:	e7c2      	b.n	800274e <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
 80027c8:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80027cc:	4b26      	ldr	r3, [pc, #152]	; (8002868 <mem_manage_fault+0x15c>)
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	07da      	lsls	r2, r3, #31
 80027d2:	d50b      	bpl.n	80027ec <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
 80027d4:	4b29      	ldr	r3, [pc, #164]	; (800287c <mem_manage_fault+0x170>)
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 80027d6:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
 80027d8:	f107 0210 	add.w	r2, r7, #16
 80027dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	2302      	movs	r3, #2
 80027e4:	481f      	ldr	r0, [pc, #124]	; (8002864 <mem_manage_fault+0x158>)
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	f017 ffa3 	bl	801a732 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <mem_manage_fault+0x15c>)
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	069b      	lsls	r3, r3, #26
 80027f2:	d50b      	bpl.n	800280c <mem_manage_fault+0x100>
		PR_FAULT_INFO(
 80027f4:	4b22      	ldr	r3, [pc, #136]	; (8002880 <mem_manage_fault+0x174>)
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 80027f6:	2415      	movs	r4, #21
		PR_FAULT_INFO(
 80027f8:	f107 0210 	add.w	r2, r7, #16
 80027fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	2302      	movs	r3, #2
 8002804:	4817      	ldr	r0, [pc, #92]	; (8002864 <mem_manage_fault+0x158>)
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	f017 ff93 	bl	801a732 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <mem_manage_fault+0x15c>)
 800280e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002810:	06d5      	lsls	r5, r2, #27
 8002812:	d402      	bmi.n	800281a <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8002814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8002816:	0790      	lsls	r0, r2, #30
 8002818:	d50a      	bpl.n	8002830 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	0519      	lsls	r1, r3, #20
 800281e:	d507      	bpl.n	8002830 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8002820:	4649      	mov	r1, r9
 8002822:	4630      	mov	r0, r6
 8002824:	f7ff fdf8 	bl	8002418 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8002828:	b110      	cbz	r0, 8002830 <mem_manage_fault+0x124>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800282a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 800282e:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <mem_manage_fault+0x15c>)
 8002832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002834:	0692      	lsls	r2, r2, #26
 8002836:	d503      	bpl.n	8002840 <mem_manage_fault+0x134>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8002838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800283a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800283e:	625a      	str	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8002840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}
 8002842:	4620      	mov	r0, r4
 8002844:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8002846:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800284a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800284c:	2300      	movs	r3, #0
 800284e:	f888 3000 	strb.w	r3, [r8]
}
 8002852:	46bd      	mov	sp, r7
 8002854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
 8002858:	f06f 0615 	mvn.w	r6, #21
 800285c:	e7b0      	b.n	80027c0 <mem_manage_fault+0xb4>
 800285e:	bf00      	nop
 8002860:	0802a3e0 	.word	0x0802a3e0
 8002864:	08028a4c 	.word	0x08028a4c
 8002868:	e000ed00 	.word	0xe000ed00
 800286c:	0802a3f6 	.word	0x0802a3f6
 8002870:	0802a270 	.word	0x0802a270
 8002874:	0802a429 	.word	0x0802a429
 8002878:	0802a441 	.word	0x0802a441
 800287c:	0802a457 	.word	0x0802a457
 8002880:	0802a2e4 	.word	0x0802a2e4

08002884 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8002884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8002888:	4b77      	ldr	r3, [pc, #476]	; (8002a68 <z_arm_fault+0x1e4>)
{
 800288a:	b08b      	sub	sp, #44	; 0x2c
 800288c:	4605      	mov	r5, r0
 800288e:	2600      	movs	r6, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8002890:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
 8002894:	af00      	add	r7, sp, #0
 8002896:	f3c8 0408 	ubfx	r4, r8, #0, #9
 800289a:	f386 8811 	msr	BASEPRI, r6
 800289e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80028a2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80028a6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80028aa:	d10e      	bne.n	80028ca <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80028ac:	f002 030c 	and.w	r3, r2, #12
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d119      	bne.n	80028e8 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 80028b4:	4b6d      	ldr	r3, [pc, #436]	; (8002a6c <z_arm_fault+0x1e8>)
 80028b6:	f107 0218 	add.w	r2, r7, #24
 80028ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80028be:	486c      	ldr	r0, [pc, #432]	; (8002a70 <z_arm_fault+0x1ec>)
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	2302      	movs	r3, #2
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	f017 ff34 	bl	801a732 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
 80028ca:	2600      	movs	r6, #0
		return NULL;
 80028cc:	4635      	mov	r5, r6
	*recoverable = false;
 80028ce:	2300      	movs	r3, #0
 80028d0:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
 80028d2:	1ee3      	subs	r3, r4, #3
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	f200 80a6 	bhi.w	8002a26 <z_arm_fault+0x1a2>
 80028da:	e8df f003 	tbb	[pc, r3]
 80028de:	990a      	.short	0x990a
 80028e0:	a4a4959c 	.word	0xa4a4959c
 80028e4:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80028e8:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 80028ea:	bf4c      	ite	mi
 80028ec:	460d      	movmi	r5, r1
			*nested_exc = true;
 80028ee:	2601      	movpl	r6, #1
 80028f0:	e7ed      	b.n	80028ce <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
 80028f2:	46e9      	mov	r9, sp
 80028f4:	4b5f      	ldr	r3, [pc, #380]	; (8002a74 <z_arm_fault+0x1f0>)
 80028f6:	f04f 0802 	mov.w	r8, #2
 80028fa:	f107 0218 	add.w	r2, r7, #24
 80028fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	485a      	ldr	r0, [pc, #360]	; (8002a70 <z_arm_fault+0x1ec>)
 8002906:	f8c7 8018 	str.w	r8, [r7, #24]
 800290a:	f017 ff12 	bl	801a732 <z_log_msg_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800290e:	4c56      	ldr	r4, [pc, #344]	; (8002a68 <z_arm_fault+0x1e4>)
	*recoverable = false;
 8002910:	2300      	movs	r3, #0
 8002912:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8002914:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002916:	079a      	lsls	r2, r3, #30
 8002918:	d50b      	bpl.n	8002932 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
 800291a:	4b57      	ldr	r3, [pc, #348]	; (8002a78 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
 800291c:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
 8002920:	f107 0218 	add.w	r2, r7, #24
 8002924:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002928:	4851      	ldr	r0, [pc, #324]	; (8002a70 <z_arm_fault+0x1ec>)
 800292a:	f017 ff02 	bl	801a732 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800292e:	2400      	movs	r4, #0
 8002930:	e041      	b.n	80029b6 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8002932:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002934:	2b00      	cmp	r3, #0
 8002936:	da01      	bge.n	800293c <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <z_arm_fault+0x1f8>)
 800293a:	e7ef      	b.n	800291c <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800293c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	d5f5      	bpl.n	800292e <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
 8002942:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <z_arm_fault+0x1fc>)
 8002944:	f107 0218 	add.w	r2, r7, #24
 8002948:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800294c:	4848      	ldr	r0, [pc, #288]	; (8002a70 <z_arm_fault+0x1ec>)
 800294e:	e9c7 8306 	strd	r8, r3, [r7, #24]
 8002952:	f017 feee 	bl	801a732 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8002956:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8002958:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 800295a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002960:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002964:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8002968:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 800296a:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 800296e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002972:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002974:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002978:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 800297c:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8002980:	429a      	cmp	r2, r3
 8002982:	d008      	beq.n	8002996 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 8002984:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002986:	b2db      	uxtb	r3, r3
 8002988:	b38b      	cbz	r3, 80029ee <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
 800298a:	1dfa      	adds	r2, r7, #7
 800298c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800298e:	4628      	mov	r0, r5
 8002990:	f7ff febc 	bl	800270c <mem_manage_fault>
 8002994:	e03a      	b.n	8002a0c <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8002996:	b088      	sub	sp, #32
 8002998:	682b      	ldr	r3, [r5, #0]
 800299a:	466a      	mov	r2, sp
 800299c:	4939      	ldr	r1, [pc, #228]	; (8002a84 <z_arm_fault+0x200>)
 800299e:	4834      	ldr	r0, [pc, #208]	; (8002a70 <z_arm_fault+0x1ec>)
 80029a0:	e9c2 1305 	strd	r1, r3, [r2, #20]
 80029a4:	2303      	movs	r3, #3
 80029a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80029aa:	f842 3f10 	str.w	r3, [r2, #16]!
 80029ae:	f017 fec0 	bl	801a732 <z_log_msg_static_create.constprop.0>
 80029b2:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
 80029b4:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	b9ab      	cbnz	r3, 80029e6 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80029ba:	2220      	movs	r2, #32
 80029bc:	4629      	mov	r1, r5
 80029be:	f107 0008 	add.w	r0, r7, #8
 80029c2:	f017 fed6 	bl	801a772 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	2e00      	cmp	r6, #0
 80029ca:	d047      	beq.n	8002a5c <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80029cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029d0:	b922      	cbnz	r2, 80029dc <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80029d2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80029d6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80029da:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 80029dc:	f107 0108 	add.w	r1, r7, #8
 80029e0:	4620      	mov	r0, r4
 80029e2:	f7ff fbfd 	bl	80021e0 <z_arm_fatal_error>
}
 80029e6:	372c      	adds	r7, #44	; 0x2c
 80029e8:	46bd      	mov	sp, r7
 80029ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 80029ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029f0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80029f4:	d004      	beq.n	8002a00 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
 80029f6:	1df9      	adds	r1, r7, #7
 80029f8:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80029fa:	f7ff fd5b 	bl	80024b4 <bus_fault.constprop.0>
 80029fe:	e005      	b.n	8002a0c <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 8002a00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a06:	d392      	bcc.n	800292e <z_arm_fault+0xaa>
			reason = usage_fault(esf);
 8002a08:	f7ff fdfe 	bl	8002608 <usage_fault.constprop.0>
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	e7d2      	b.n	80029b6 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
 8002a10:	1dfa      	adds	r2, r7, #7
 8002a12:	2100      	movs	r1, #0
 8002a14:	e7bb      	b.n	800298e <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
 8002a16:	1df9      	adds	r1, r7, #7
 8002a18:	2000      	movs	r0, #0
 8002a1a:	e7ee      	b.n	80029fa <z_arm_fault+0x176>
	PR_FAULT_INFO(
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <z_arm_fault+0x204>)
 8002a1e:	61fb      	str	r3, [r7, #28]
 8002a20:	2302      	movs	r3, #2
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	e77c      	b.n	8002920 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
 8002a26:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
 8002a2a:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <z_arm_fault+0x208>)
 8002a2c:	46e8      	mov	r8, sp
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <z_arm_fault+0x20c>)
 8002a32:	bf18      	it	ne
 8002a34:	4613      	movne	r3, r2
 8002a36:	466a      	mov	r2, sp
 8002a38:	4916      	ldr	r1, [pc, #88]	; (8002a94 <z_arm_fault+0x210>)
 8002a3a:	3c10      	subs	r4, #16
 8002a3c:	480c      	ldr	r0, [pc, #48]	; (8002a70 <z_arm_fault+0x1ec>)
 8002a3e:	61d4      	str	r4, [r2, #28]
 8002a40:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8002a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a48:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 8002a4c:	8413      	strh	r3, [r2, #32]
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <z_arm_fault+0x214>)
 8002a50:	f842 3f10 	str.w	r3, [r2, #16]!
 8002a54:	f017 fe6d 	bl	801a732 <z_log_msg_static_create.constprop.0>
 8002a58:	46c5      	mov	sp, r8
}
 8002a5a:	e768      	b.n	800292e <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8002a5c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	e7b9      	b.n	80029da <z_arm_fault+0x156>
 8002a66:	bf00      	nop
 8002a68:	e000ed00 	.word	0xe000ed00
 8002a6c:	0802a4a4 	.word	0x0802a4a4
 8002a70:	08028a4c 	.word	0x08028a4c
 8002a74:	0802a4cf 	.word	0x0802a4cf
 8002a78:	0802a4e6 	.word	0x0802a4e6
 8002a7c:	0802a507 	.word	0x0802a507
 8002a80:	0802a515 	.word	0x0802a515
 8002a84:	0802a534 	.word	0x0802a534
 8002a88:	0802a550 	.word	0x0802a550
 8002a8c:	0802a48b 	.word	0x0802a48b
 8002a90:	0802a476 	.word	0x0802a476
 8002a94:	0802a574 	.word	0x0802a574
 8002a98:	01000004 	.word	0x01000004

08002a9c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8002a9c:	4a02      	ldr	r2, [pc, #8]	; (8002aa8 <z_arm_fault_init+0xc>)
 8002a9e:	6953      	ldr	r3, [r2, #20]
 8002aa0:	f043 0310 	orr.w	r3, r3, #16
 8002aa4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 8002aa6:	4770      	bx	lr
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8002aac:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8002ab0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8002ab4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8002ab6:	4672      	mov	r2, lr
	bl z_arm_fault
 8002ab8:	f7ff fee4 	bl	8002884 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8002abc:	bd01      	pop	{r0, pc}
 8002abe:	bf00      	nop

08002ac0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8002ac0:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac2:	4804      	ldr	r0, [pc, #16]	; (8002ad4 <z_arm_interrupt_init+0x14>)
 8002ac4:	2110      	movs	r1, #16
 8002ac6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8002ac8:	3301      	adds	r3, #1
 8002aca:	2ba3      	cmp	r3, #163	; 0xa3
 8002acc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8002ad0:	d1f9      	bne.n	8002ac6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100

08002ad8 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002ad8:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8002ada:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8002ade:	4808      	ldr	r0, [pc, #32]	; (8002b00 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8002ae0:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 8002ae4:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8002ae6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8002aea:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8002aee:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8002af0:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8002af2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8002af6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8002afa:	f7ff fbff 	bl	80022fc <z_arm_prep_c>
 8002afe:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8002b00:	24011180 	.word	0x24011180

08002b04 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <z_impl_k_thread_abort+0x24>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4283      	cmp	r3, r0
 8002b0a:	d10b      	bne.n	8002b24 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b0c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8002b10:	b143      	cbz	r3, 8002b24 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <z_impl_k_thread_abort+0x28>)
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b1a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8002b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 8002b24:	f016 be5c 	b.w	80197e0 <z_thread_abort>
 8002b28:	24010cc4 	.word	0x24010cc4
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8002b30:	4b02      	ldr	r3, [pc, #8]	; (8002b3c <z_arm_configure_static_mpu_regions+0xc>)
 8002b32:	2101      	movs	r1, #1
 8002b34:	4a02      	ldr	r2, [pc, #8]	; (8002b40 <z_arm_configure_static_mpu_regions+0x10>)
 8002b36:	4803      	ldr	r0, [pc, #12]	; (8002b44 <z_arm_configure_static_mpu_regions+0x14>)
 8002b38:	f000 b892 	b.w	8002c60 <arm_core_mpu_configure_static_mpu_regions>
 8002b3c:	24050000 	.word	0x24050000
 8002b40:	24000000 	.word	0x24000000
 8002b44:	08028b70 	.word	0x08028b70

08002b48 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8002b48:	6e42      	ldr	r2, [r0, #100]	; 0x64
	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8002b4a:	2140      	movs	r1, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8002b4e:	3a40      	subs	r2, #64	; 0x40

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002b50:	4618      	mov	r0, r3
	dynamic_regions[region_num].start = guard_start;
 8002b52:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8002b54:	4a03      	ldr	r2, [pc, #12]	; (8002b64 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8002b56:	e9c3 1201 	strd	r1, r2, [r3, #4]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	f000 b88a 	b.w	8002c74 <arm_core_mpu_configure_dynamic_mpu_regions>
 8002b60:	24001004 	.word	0x24001004
 8002b64:	150b0000 	.word	0x150b0000

08002b68 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8002b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b6c:	469c      	mov	ip, r3
 8002b6e:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
 8002b70:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
 8002b72:	2300      	movs	r3, #0
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8002b74:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 8002c24 <mpu_configure_regions+0xbc>
 8002b78:	428b      	cmp	r3, r1
 8002b7a:	da1a      	bge.n	8002bb2 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
 8002b7c:	6844      	ldr	r4, [r0, #4]
 8002b7e:	2c00      	cmp	r4, #0
 8002b80:	d04d      	beq.n	8002c1e <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 8002b82:	f1bc 0f00 	cmp.w	ip, #0
 8002b86:	d01d      	beq.n	8002bc4 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8002b88:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8002b8a:	4234      	tst	r4, r6
 8002b8c:	d015      	beq.n	8002bba <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 8002b8e:	466c      	mov	r4, sp
 8002b90:	b088      	sub	sp, #32
 8002b92:	466a      	mov	r2, sp
 8002b94:	4924      	ldr	r1, [pc, #144]	; (8002c28 <mpu_configure_regions+0xc0>)
 8002b96:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	f842 3f10 	str.w	r3, [r2, #16]!
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8002ba6:	4821      	ldr	r0, [pc, #132]	; (8002c2c <mpu_configure_regions+0xc4>)
			return -EINVAL;
 8002ba8:	f06f 0515 	mvn.w	r5, #21
 8002bac:	f7ff f814 	bl	8001bd8 <z_impl_z_log_msg_static_create>
 8002bb0:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
 8002bba:	2c1f      	cmp	r4, #31
 8002bbc:	d9e7      	bls.n	8002b8e <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
 8002bbe:	6802      	ldr	r2, [r0, #0]
		&&
 8002bc0:	4216      	tst	r6, r2
 8002bc2:	d1e4      	bne.n	8002b8e <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8002bc4:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8002bc6:	fa5f f885 	uxtb.w	r8, r5
	region_conf.base = new_region->start;
 8002bca:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8002bcc:	6886      	ldr	r6, [r0, #8]
	if (size <= 32U) {
 8002bce:	d914      	bls.n	8002bfa <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
 8002bd0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002bd4:	d813      	bhi.n	8002bfe <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8002bd6:	3c01      	subs	r4, #1
 8002bd8:	fab4 f484 	clz	r4, r4
 8002bdc:	f1c4 041f 	rsb	r4, r4, #31
 8002be0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8002be2:	f1b8 0f0f 	cmp.w	r8, #15
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8002be6:	ea46 0604 	orr.w	r6, r6, r4
 8002bea:	d90a      	bls.n	8002c02 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8002bec:	466c      	mov	r4, sp
 8002bee:	b088      	sub	sp, #32
 8002bf0:	466a      	mov	r2, sp
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <mpu_configure_regions+0xc8>)
 8002bf4:	e9c2 3505 	strd	r3, r5, [r2, #20]
 8002bf8:	e7cf      	b.n	8002b9a <mpu_configure_regions+0x32>
		return REGION_32B;
 8002bfa:	2408      	movs	r4, #8
 8002bfc:	e7f1      	b.n	8002be2 <mpu_configure_regions+0x7a>
		return REGION_4G;
 8002bfe:	243e      	movs	r4, #62	; 0x3e
 8002c00:	e7ef      	b.n	8002be2 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002c02:	f022 021f 	bic.w	r2, r2, #31
 8002c06:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002c0a:	f046 0601 	orr.w	r6, r6, #1
				| MPU_RBAR_VALID_Msk | index;
 8002c0e:	432a      	orrs	r2, r5
		reg_index++;
 8002c10:	3501      	adds	r5, #1
 8002c12:	f042 0210 	orr.w	r2, r2, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002c16:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002c1a:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 8002c1e:	3301      	adds	r3, #1
 8002c20:	300c      	adds	r0, #12
 8002c22:	e7a9      	b.n	8002b78 <mpu_configure_regions+0x10>
 8002c24:	e000ed00 	.word	0xe000ed00
 8002c28:	0802a58b 	.word	0x0802a58b
 8002c2c:	08028a44 	.word	0x08028a44
 8002c30:	0802a5ae 	.word	0x0802a5ae

08002c34 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <arm_core_mpu_enable+0x14>)
 8002c36:	2205      	movs	r2, #5
 8002c38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8002c3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c40:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002c4c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
 8002c50:	4b02      	ldr	r3, [pc, #8]	; (8002c5c <arm_core_mpu_disable+0x10>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8002c60:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8002c62:	4c03      	ldr	r4, [pc, #12]	; (8002c70 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8002c64:	2301      	movs	r3, #1
 8002c66:	7822      	ldrb	r2, [r4, #0]
 8002c68:	f7ff ff7e 	bl	8002b68 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8002c6c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8002c6e:	bd10      	pop	{r4, pc}
 8002c70:	24010d28 	.word	0x24010d28

08002c74 <arm_core_mpu_configure_dynamic_mpu_regions>:

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8002c74:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 8002c76:	b508      	push	{r3, lr}
 8002c78:	2300      	movs	r3, #0
 8002c7a:	7812      	ldrb	r2, [r2, #0]
 8002c7c:	f7ff ff74 	bl	8002b68 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8002c80:	f110 0f16 	cmn.w	r0, #22
 8002c84:	d003      	beq.n	8002c8e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
 8002c88:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8002c8a:	280f      	cmp	r0, #15
 8002c8c:	dd00      	ble.n	8002c90 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8002c8e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8002c90:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
 8002c94:	3001      	adds	r0, #1
  MPU->RASR = 0U;
 8002c96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8002c9a:	e7f6      	b.n	8002c8a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8002c9c:	24010d28 	.word	0x24010d28
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8002ca4:	4914      	ldr	r1, [pc, #80]	; (8002cf8 <z_arm_mpu_init+0x54>)
 8002ca6:	6808      	ldr	r0, [r1, #0]
 8002ca8:	2810      	cmp	r0, #16
{
 8002caa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8002cac:	d821      	bhi.n	8002cf2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8002cae:	f7ff ffcd 	bl	8002c4c <arm_core_mpu_disable>
 8002cb2:	4c12      	ldr	r4, [pc, #72]	; (8002cfc <z_arm_mpu_init+0x58>)
 8002cb4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4290      	cmp	r0, r2
 8002cba:	f101 010c 	add.w	r1, r1, #12
 8002cbe:	d105      	bne.n	8002ccc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <z_arm_mpu_init+0x5c>)
 8002cc2:	7018      	strb	r0, [r3, #0]
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8002cc4:	2000      	movs	r0, #0
	arm_core_mpu_enable();
 8002cc6:	f7ff ffb5 	bl	8002c34 <arm_core_mpu_enable>
}
 8002cca:	bd10      	pop	{r4, pc}
 8002ccc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002cd0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8002cd4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8002cd8:	4313      	orrs	r3, r2
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002cda:	3201      	adds	r2, #1
 8002cdc:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002ce0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8002cf0:	e7e2      	b.n	8002cb8 <z_arm_mpu_init+0x14>
		return -1;
 8002cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf6:	e7e8      	b.n	8002cca <z_arm_mpu_init+0x26>
 8002cf8:	08028ab4 	.word	0x08028ab4
 8002cfc:	e000ed00 	.word	0xe000ed00
 8002d00:	24010d28 	.word	0x24010d28

08002d04 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 8002d04:	4b01      	ldr	r3, [pc, #4]	; (8002d0c <__stdout_hook_install+0x8>)
 8002d06:	6018      	str	r0, [r3, #0]
}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	24000008 	.word	0x24000008

08002d10 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
 8002d10:	b40c      	push	{r2, r3}
 8002d12:	b510      	push	{r4, lr}
 8002d14:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
 8002d16:	b909      	cbnz	r1, 8002d1c <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
 8002d18:	f10d 000b 	add.w	r0, sp, #11
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 8002d1c:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;

	va_start(vargs, format);
 8002d1e:	ab09      	add	r3, sp, #36	; 0x24
 8002d20:	9a08      	ldr	r2, [sp, #32]
 8002d22:	9400      	str	r4, [sp, #0]
 8002d24:	9303      	str	r3, [sp, #12]
	p.len = (int) len;
 8002d26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002d2a:	a904      	add	r1, sp, #16
 8002d2c:	4804      	ldr	r0, [pc, #16]	; (8002d40 <snprintf+0x30>)
 8002d2e:	f7fe f8a1 	bl	8000e74 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
 8002d32:	9b04      	ldr	r3, [sp, #16]
 8002d34:	701c      	strb	r4, [r3, #0]
	return r;
}
 8002d36:	b006      	add	sp, #24
 8002d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d3c:	b002      	add	sp, #8
 8002d3e:	4770      	bx	lr
 8002d40:	0801a7a1 	.word	0x0801a7a1

08002d44 <vsnprintf>:
	return r;
}

int vsnprintf(char *ZRESTRICT str, size_t len,
	      const char *ZRESTRICT format, va_list vargs)
{
 8002d44:	b510      	push	{r4, lr}
 8002d46:	b086      	sub	sp, #24
	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
 8002d48:	b909      	cbnz	r1, 8002d4e <vsnprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change * *s */
 8002d4a:	f10d 000f 	add.w	r0, sp, #15
 8002d4e:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
 8002d50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002d54:	9400      	str	r4, [sp, #0]
 8002d56:	a904      	add	r1, sp, #16
 8002d58:	4803      	ldr	r0, [pc, #12]	; (8002d68 <vsnprintf+0x24>)
 8002d5a:	f7fe f88b 	bl	8000e74 <z_cbvprintf_impl>

	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);

	*(p.ptr) = 0;
 8002d5e:	9b04      	ldr	r3, [sp, #16]
 8002d60:	701c      	strb	r4, [r3, #0]
	return r;
}
 8002d62:	b006      	add	sp, #24
 8002d64:	bd10      	pop	{r4, pc}
 8002d66:	bf00      	nop
 8002d68:	0801a7a1 	.word	0x0801a7a1

08002d6c <stm32_exti_isr>:
 * Check EXTI lines in exti_range for pending interrupts
 *
 * @param exti_range Pointer to a exti_range structure
 */
static void stm32_exti_isr(const void *exti_range)
{
 8002d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d70:	4605      	mov	r5, r0
 8002d72:	2400      	movs	r4, #0
		return LL_EXTI_IsActiveFlag_0_31(BIT((uint32_t)line));
 8002d74:	f04f 0801 	mov.w	r8, #1
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1U : 0U);
 8002d78:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
		if (stm32_exti_is_pending(line) != 0) {
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8002d7c:	4f0e      	ldr	r7, [pc, #56]	; (8002db8 <stm32_exti_isr+0x4c>)
		line = range->start + i;
 8002d7e:	782b      	ldrb	r3, [r5, #0]
 8002d80:	fa53 f084 	uxtab	r0, r3, r4
	if (line < 32) {
 8002d84:	281f      	cmp	r0, #31
 8002d86:	dc0f      	bgt.n	8002da8 <stm32_exti_isr+0x3c>
		return LL_EXTI_IsActiveFlag_0_31(BIT((uint32_t)line));
 8002d88:	fa08 f300 	lsl.w	r3, r8, r0
 8002d8c:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
		if (stm32_exti_is_pending(line) != 0) {
 8002d90:	ea33 0202 	bics.w	r2, r3, r2
 8002d94:	d108      	bne.n	8002da8 <stm32_exti_isr+0x3c>
  *         @arg @ref LL_EXTI_LINE_21
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002d96:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
			if (!data->cb[line].cb) {
 8002d9a:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
 8002d9e:	b11b      	cbz	r3, 8002da8 <stm32_exti_isr+0x3c>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8002da0:	eb07 02c0 	add.w	r2, r7, r0, lsl #3
 8002da4:	6851      	ldr	r1, [r2, #4]
 8002da6:	4798      	blx	r3
	for (uint8_t i = 0; i <= range->len; i++) {
 8002da8:	3401      	adds	r4, #1
 8002daa:	786a      	ldrb	r2, [r5, #1]
 8002dac:	b2e3      	uxtb	r3, r4
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d2e5      	bcs.n	8002d7e <stm32_exti_isr+0x12>
		}
	}
}
 8002db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002db6:	bf00      	nop
 8002db8:	24001010 	.word	0x24001010

08002dbc <stm32_fill_irq_table>:

static void stm32_fill_irq_table(int8_t start, int8_t len, int32_t irqn)
{
	for (int i = 0; i < len; i++) {
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <stm32_fill_irq_table+0x14>)
 8002dbe:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	3301      	adds	r3, #1
		exti_irq_table[start + i] = irqn;
 8002dc6:	f820 2b02 	strh.w	r2, [r0], #2
	for (int i = 0; i < len; i++) {
 8002dca:	4299      	cmp	r1, r3
 8002dcc:	dcfa      	bgt.n	8002dc4 <stm32_fill_irq_table+0x8>
	}
}
 8002dce:	4770      	bx	lr
 8002dd0:	24000130 	.word	0x24000130

08002dd4 <stm32_exti_enable>:
	irqnum = exti_irq_table[line];
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <stm32_exti_enable+0x24>)
{
 8002dd6:	4602      	mov	r2, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002dd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ddc:	b410      	push	{r4}
	irqnum = exti_irq_table[line];
 8002dde:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
	LL_EXTI_EnableIT_0_31(BIT((uint32_t)line));
 8002de2:	2301      	movs	r3, #1
 8002de4:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 8002de8:	4093      	lsls	r3, r2
 8002dea:	4323      	orrs	r3, r4
 8002dec:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002df0:	bc10      	pop	{r4}
	irq_enable(irqnum);
 8002df2:	f7ff ba5b 	b.w	80022ac <arch_irq_enable>
 8002df6:	bf00      	nop
 8002df8:	24000130 	.word	0x24000130

08002dfc <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if ((data->cb[line].cb == cb) && (data->cb[line].data == arg)) {
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <stm32_exti_set_callback+0x2c>)
{
 8002dfe:	b530      	push	{r4, r5, lr}
	if ((data->cb[line].cb == cb) && (data->cb[line].data == arg)) {
 8002e00:	f853 4030 	ldr.w	r4, [r3, r0, lsl #3]
 8002e04:	428c      	cmp	r4, r1
 8002e06:	d104      	bne.n	8002e12 <stm32_exti_set_callback+0x16>
 8002e08:	eb03 05c0 	add.w	r5, r3, r0, lsl #3
 8002e0c:	686d      	ldr	r5, [r5, #4]
 8002e0e:	4295      	cmp	r5, r2
 8002e10:	d005      	beq.n	8002e1e <stm32_exti_set_callback+0x22>
		return 0;
	}

	/* if callback already exists/maybe-running return busy */
	if (data->cb[line].cb != NULL) {
 8002e12:	b934      	cbnz	r4, 8002e22 <stm32_exti_set_callback+0x26>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8002e14:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 8002e18:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002e1c:	605a      	str	r2, [r3, #4]
		return 0;
 8002e1e:	2000      	movs	r0, #0

	return 0;
}
 8002e20:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 8002e22:	f06f 000f 	mvn.w	r0, #15
 8002e26:	e7fb      	b.n	8002e20 <stm32_exti_set_callback+0x24>
 8002e28:	24001010 	.word	0x24001010

08002e2c <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <stm32_exti_unset_callback+0x10>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8002e34:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002e38:	605a      	str	r2, [r3, #4]
}
 8002e3a:	4770      	bx	lr
 8002e3c:	24001010 	.word	0x24001010

08002e40 <get_pllsrc_frequency>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <get_pllsrc_frequency+0x14>)
		return STM32_HSE_FREQ;
	case LL_RCC_PLLSOURCE_NONE:
	default:
		return 0;
	}
}
 8002e42:	4805      	ldr	r0, [pc, #20]	; (8002e58 <get_pllsrc_frequency+0x18>)
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	f003 0303 	and.w	r3, r3, #3
		return STM32_HSI_FREQ;
 8002e4a:	2b02      	cmp	r3, #2
}
 8002e4c:	bf18      	it	ne
 8002e4e:	2000      	movne	r0, #0
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	58024400 	.word	0x58024400
 8002e58:	007a1200 	.word	0x007a1200

08002e5c <get_hclk_frequency>:

__unused
static uint32_t get_hclk_frequency(void)
{
 8002e5c:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <get_hclk_frequency+0x2c>)
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
	uint32_t sysclk = 0;

	/* Get the current system clock source */
	switch (LL_RCC_GetSysClkSource()) {
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d009      	beq.n	8002e7e <get_hclk_frequency+0x22>
 8002e6a:	2b18      	cmp	r3, #24
 8002e6c:	d109      	bne.n	8002e82 <get_hclk_frequency+0x26>
	case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
		sysclk = STM32_HSE_FREQ;
		break;
#if defined(STM32_PLL_ENABLED)
	case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
		sysclk = get_pllout_frequency(get_pllsrc_frequency(),
 8002e6e:	f7ff ffe7 	bl	8002e40 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 8002e72:	f240 1313 	movw	r3, #275	; 0x113
 8002e76:	0880      	lsrs	r0, r0, #2
 8002e78:	4358      	muls	r0, r3
		break;
#endif /* STM32_PLL_ENABLED */
	}

	return get_bus_clock(sysclk, STM32_HPRE);
}
 8002e7a:	0840      	lsrs	r0, r0, #1
 8002e7c:	bd08      	pop	{r3, pc}
	switch (LL_RCC_GetSysClkSource()) {
 8002e7e:	4803      	ldr	r0, [pc, #12]	; (8002e8c <get_hclk_frequency+0x30>)
 8002e80:	e7fb      	b.n	8002e7a <get_hclk_frequency+0x1e>
	uint32_t sysclk = 0;
 8002e82:	2000      	movs	r0, #0
 8002e84:	e7f9      	b.n	8002e7a <get_hclk_frequency+0x1e>
 8002e86:	bf00      	nop
 8002e88:	58024400 	.word	0x58024400
 8002e8c:	007a1200 	.word	0x007a1200

08002e90 <stm32_clock_control_configure>:
}

static inline int stm32_clock_control_configure(const struct device *dev,
						clock_control_subsys_t sub_system,
						void *data)
{
 8002e90:	b510      	push	{r4, lr}
	int err;

	ARG_UNUSED(dev);
	ARG_UNUSED(data);

	err = enabled_clock(pclken->bus);
 8002e92:	680a      	ldr	r2, [r1, #0]
 8002e94:	2a10      	cmp	r2, #16
 8002e96:	d823      	bhi.n	8002ee0 <stm32_clock_control_configure+0x50>
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <stm32_clock_control_configure+0x58>)
 8002e9a:	40d3      	lsrs	r3, r2
 8002e9c:	07db      	lsls	r3, r3, #31
 8002e9e:	d51f      	bpl.n	8002ee0 <stm32_clock_control_configure+0x50>
		return err;
	}

	z_stm32_hsem_lock(CFG_HW_RCC_SEMID, HSEM_LOCK_DEFAULT_RETRY);

	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002ea0:	684a      	ldr	r2, [r1, #4]
 8002ea2:	b2d3      	uxtb	r3, r2
		       STM32_CLOCK_MASK_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 8002ea4:	f3c2 3442 	ubfx	r4, r2, #13, #3
 8002ea8:	f3c2 2204 	ubfx	r2, r2, #8, #5
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002eac:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8002eb0:	fa04 f202 	lsl.w	r2, r4, r2
 8002eb4:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	*(volatile uint32_t *)addr = temp | mask;
}

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;
 8002eb8:	6818      	ldr	r0, [r3, #0]

	*(volatile uint32_t *)addr = temp & ~mask;
 8002eba:	ea20 0202 	bic.w	r2, r0, r2
 8002ebe:	601a      	str	r2, [r3, #0]
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002ec0:	6849      	ldr	r1, [r1, #4]
 8002ec2:	b2cb      	uxtb	r3, r1
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 8002ec4:	f3c1 4202 	ubfx	r2, r1, #16, #3
 8002ec8:	f3c1 2104 	ubfx	r1, r1, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002ecc:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8002ed0:	408a      	lsls	r2, r1
 8002ed2:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 8002ed6:	6818      	ldr	r0, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 8002ed8:	4302      	orrs	r2, r0

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

	return 0;
 8002eda:	2000      	movs	r0, #0
 8002edc:	601a      	str	r2, [r3, #0]
}
 8002ede:	bd10      	pop	{r4, pc}
	err = enabled_clock(pclken->bus);
 8002ee0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002ee4:	e7fb      	b.n	8002ede <stm32_clock_control_configure+0x4e>
 8002ee6:	bf00      	nop
 8002ee8:	00013c0e 	.word	0x00013c0e

08002eec <stm32_clock_control_get_subsys_rate>:

static int stm32_clock_control_get_subsys_rate(const struct device *clock,
					       clock_control_subsys_t sub_system,
					       uint32_t *rate)
{
 8002eec:	b508      	push	{r3, lr}
	 * more likely to contain actual clock speed
	 */
#if defined(CONFIG_CPU_CORTEX_M4)
	uint32_t ahb_clock = SystemCoreClock;
#else
	uint32_t ahb_clock = get_bus_clock(SystemCoreClock, STM32_HPRE);
 8002eee:	4b32      	ldr	r3, [pc, #200]	; (8002fb8 <stm32_clock_control_get_subsys_rate+0xcc>)
 8002ef0:	6818      	ldr	r0, [r3, #0]
	uint32_t apb3_clock = get_bus_clock(ahb_clock, STM32_D1PPRE);
	uint32_t apb4_clock = get_bus_clock(ahb_clock, STM32_D3PPRE);

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8002ef2:	680b      	ldr	r3, [r1, #0]
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d82d      	bhi.n	8002f54 <stm32_clock_control_get_subsys_rate+0x68>
 8002ef8:	b913      	cbnz	r3, 8002f00 <stm32_clock_control_get_subsys_rate+0x14>
 8002efa:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002efe:	e028      	b.n	8002f52 <stm32_clock_control_get_subsys_rate+0x66>
 8002f00:	3b01      	subs	r3, #1
 8002f02:	2b0f      	cmp	r3, #15
 8002f04:	d8f9      	bhi.n	8002efa <stm32_clock_control_get_subsys_rate+0xe>
 8002f06:	a101      	add	r1, pc, #4	; (adr r1, 8002f0c <stm32_clock_control_get_subsys_rate+0x20>)
 8002f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f0c:	08002f8d 	.word	0x08002f8d
 8002f10:	08002f9b 	.word	0x08002f9b
 8002f14:	08002fab 	.word	0x08002fab
 8002f18:	08002efb 	.word	0x08002efb
 8002f1c:	08002efb 	.word	0x08002efb
 8002f20:	08002efb 	.word	0x08002efb
 8002f24:	08002efb 	.word	0x08002efb
 8002f28:	08002efb 	.word	0x08002efb
 8002f2c:	08002efb 	.word	0x08002efb
 8002f30:	08002f4d 	.word	0x08002f4d
 8002f34:	08002f77 	.word	0x08002f77
 8002f38:	08002f83 	.word	0x08002f83
 8002f3c:	08002f89 	.word	0x08002f89
 8002f40:	08002efb 	.word	0x08002efb
 8002f44:	08002efb 	.word	0x08002efb
 8002f48:	08002f7d 	.word	0x08002f7d
 8002f4c:	481b      	ldr	r0, [pc, #108]	; (8002fbc <stm32_clock_control_get_subsys_rate+0xd0>)
	case STM32_CLOCK_BUS_AHB1:
	case STM32_CLOCK_BUS_AHB2:
	case STM32_CLOCK_BUS_AHB3:
	case STM32_CLOCK_BUS_AHB4:
		*rate = ahb_clock;
 8002f4e:	6010      	str	r0, [r2, #0]
#endif /* STM32_PLL3_ENABLED */
	default:
		return -ENOTSUP;
	}

	return 0;
 8002f50:	2000      	movs	r0, #0
}
 8002f52:	bd08      	pop	{r3, pc}
	switch (pclken->bus) {
 8002f54:	2bd4      	cmp	r3, #212	; 0xd4
 8002f56:	d00c      	beq.n	8002f72 <stm32_clock_control_get_subsys_rate+0x86>
 8002f58:	3bd8      	subs	r3, #216	; 0xd8
 8002f5a:	2b1c      	cmp	r3, #28
 8002f5c:	d8cd      	bhi.n	8002efa <stm32_clock_control_get_subsys_rate+0xe>
 8002f5e:	2101      	movs	r1, #1
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	4916      	ldr	r1, [pc, #88]	; (8002fc0 <stm32_clock_control_get_subsys_rate+0xd4>)
 8002f66:	420b      	tst	r3, r1
 8002f68:	d11d      	bne.n	8002fa6 <stm32_clock_control_get_subsys_rate+0xba>
 8002f6a:	f240 1111 	movw	r1, #273	; 0x111
 8002f6e:	420b      	tst	r3, r1
 8002f70:	d0c3      	beq.n	8002efa <stm32_clock_control_get_subsys_rate+0xe>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 8002f72:	0840      	lsrs	r0, r0, #1
		break;
 8002f74:	e7eb      	b.n	8002f4e <stm32_clock_control_get_subsys_rate+0x62>
	switch (pclken->bus) {
 8002f76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f7a:	e7e8      	b.n	8002f4e <stm32_clock_control_get_subsys_rate+0x62>
		*rate = get_hclk_frequency();
 8002f7c:	f7ff ff6e 	bl	8002e5c <get_hclk_frequency>
		break;
 8002f80:	e7e5      	b.n	8002f4e <stm32_clock_control_get_subsys_rate+0x62>
		break;
 8002f82:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8002f86:	e7e2      	b.n	8002f4e <stm32_clock_control_get_subsys_rate+0x62>
		break;
 8002f88:	480e      	ldr	r0, [pc, #56]	; (8002fc4 <stm32_clock_control_get_subsys_rate+0xd8>)
 8002f8a:	e7e0      	b.n	8002f4e <stm32_clock_control_get_subsys_rate+0x62>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 8002f8c:	f7ff ff58 	bl	8002e40 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 8002f90:	f240 1313 	movw	r3, #275	; 0x113
 8002f94:	0880      	lsrs	r0, r0, #2
 8002f96:	4358      	muls	r0, r3
		break;
 8002f98:	e7d9      	b.n	8002f4e <stm32_clock_control_get_subsys_rate+0x62>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 8002f9a:	f7ff ff51 	bl	8002e40 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 8002f9e:	f240 1313 	movw	r3, #275	; 0x113
 8002fa2:	0880      	lsrs	r0, r0, #2
 8002fa4:	4358      	muls	r0, r3
 8002fa6:	0880      	lsrs	r0, r0, #2
		break;
 8002fa8:	e7d1      	b.n	8002f4e <stm32_clock_control_get_subsys_rate+0x62>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 8002faa:	f7ff ff49 	bl	8002e40 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 8002fae:	f240 1313 	movw	r3, #275	; 0x113
 8002fb2:	0880      	lsrs	r0, r0, #2
 8002fb4:	4358      	muls	r0, r3
 8002fb6:	e7dc      	b.n	8002f72 <stm32_clock_control_get_subsys_rate+0x86>
 8002fb8:	2400009c 	.word	0x2400009c
 8002fbc:	007a1200 	.word	0x007a1200
 8002fc0:	11111000 	.word	0x11111000
 8002fc4:	02dc6c00 	.word	0x02dc6c00

08002fc8 <stm32_clock_control_init>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8002fc8:	4b7d      	ldr	r3, [pc, #500]	; (80031c0 <stm32_clock_control_init+0x1f8>)
	return 0;
}

#if defined(CONFIG_CPU_CORTEX_M7)
int stm32_clock_control_init(const struct device *dev)
{
 8002fca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002fd0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002fd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8002fd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002fdc:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002fe0:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002fe2:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fea:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ff2:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	0394      	lsls	r4, r2, #14
 8002ff8:	d5fc      	bpl.n	8002ff4 <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002ffa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	675a      	str	r2, [r3, #116]	; 0x74
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003002:	4b6f      	ldr	r3, [pc, #444]	; (80031c0 <stm32_clock_control_init+0x1f8>)
 8003004:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003006:	0790      	lsls	r0, r2, #30
 8003008:	d5fc      	bpl.n	8003004 <stm32_clock_control_init+0x3c>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300a:	496e      	ldr	r1, [pc, #440]	; (80031c4 <stm32_clock_control_init+0x1fc>)
 800300c:	680a      	ldr	r2, [r1, #0]
 800300e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003012:	600a      	str	r2, [r1, #0]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003014:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003016:	f022 0218 	bic.w	r2, r2, #24
 800301a:	671a      	str	r2, [r3, #112]	; 0x70
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800301c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	671a      	str	r2, [r3, #112]	; 0x70
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003024:	4b66      	ldr	r3, [pc, #408]	; (80031c0 <stm32_clock_control_init+0x1f8>)
 8003026:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003028:	0791      	lsls	r1, r2, #30
 800302a:	d5fc      	bpl.n	8003026 <stm32_clock_control_init+0x5e>
  SET_BIT(RCC->CR, RCC_CR_HSI48ON);
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003032:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == (RCC_CR_HSI48RDY)) ? 1UL : 0UL);
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	0492      	lsls	r2, r2, #18
 8003038:	d5fc      	bpl.n	8003034 <stm32_clock_control_init+0x6c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	f002 0238 	and.w	r2, r2, #56	; 0x38
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL1) {
 8003040:	2a18      	cmp	r2, #24
 8003042:	d117      	bne.n	8003074 <stm32_clock_control_init+0xac>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	0755      	lsls	r5, r2, #29
 8003048:	d407      	bmi.n	800305a <stm32_clock_control_init+0x92>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003052:	4a5b      	ldr	r2, [pc, #364]	; (80031c0 <stm32_clock_control_init+0x1f8>)
 8003054:	6813      	ldr	r3, [r2, #0]
 8003056:	075c      	lsls	r4, r3, #29
 8003058:	d5fc      	bpl.n	8003054 <stm32_clock_control_init+0x8c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800305a:	4b59      	ldr	r3, [pc, #356]	; (80031c0 <stm32_clock_control_init+0x1f8>)
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	f022 0207 	bic.w	r2, r2, #7
 8003062:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003064:	691a      	ldr	r2, [r3, #16]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8003066:	f012 0f38 	tst.w	r2, #56	; 0x38
 800306a:	d1fb      	bne.n	8003064 <stm32_clock_control_init+0x9c>
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	f022 020f 	bic.w	r2, r2, #15
 8003072:	619a      	str	r2, [r3, #24]
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8003074:	4b52      	ldr	r3, [pc, #328]	; (80031c0 <stm32_clock_control_init+0x1f8>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800307c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 800307e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003080:	f022 0203 	bic.w	r2, r2, #3
 8003084:	f042 0202 	orr.w	r2, r2, #2
 8003088:	629a      	str	r2, [r3, #40]	; 0x28
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 800308a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800308c:	f422 727c 	bic.w	r2, r2, #1008	; 0x3f0
 8003090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003094:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	f022 020c 	bic.w	r2, r2, #12
 800309c:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	f042 0202 	orr.w	r2, r2, #2
 80030a4:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N - 1UL) << RCC_PLL1DIVR_N1_Pos);
 80030a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80030ac:	f022 0201 	bic.w	r2, r2, #1
 80030b0:	f442 7289 	orr.w	r2, r2, #274	; 0x112
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 80030b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c
  *
  * (*) : For stm32h72xxx and stm32h73xxx family lines.
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P - 1UL) << RCC_PLL1DIVR_P1_Pos);
 80030be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c0:	f422 427e 	bic.w	r2, r2, #65024	; 0xfe00
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030cc:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q - 1UL) << RCC_PLL1DIVR_Q1_Pos);
 80030ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80030d4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN);
 80030da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80030e0:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R - 1UL) << RCC_PLL1DIVR_R1_Pos);
 80030e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e4:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80030e8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN);
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80030fc:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY)) ? 1UL : 0UL);
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	0190      	lsls	r0, r2, #6
 8003102:	d5fc      	bpl.n	80030fe <stm32_clock_control_init+0x136>
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8003104:	4b2f      	ldr	r3, [pc, #188]	; (80031c4 <stm32_clock_control_init+0x1fc>)
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	f022 0207 	bic.w	r2, r2, #7
 800310c:	f042 0202 	orr.w	r2, r2, #2
 8003110:	60da      	str	r2, [r3, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8003112:	699a      	ldr	r2, [r3, #24]
 8003114:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003118:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	0491      	lsls	r1, r2, #18
 800311e:	d5fc      	bpl.n	800311a <stm32_clock_control_init+0x152>
				      STM32_HPRE);

	/* Set flash latency */
	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq increases, set flash latency before any clock setting */
	if (new_hclk_freq > old_hclk_freq) {
 8003120:	4d29      	ldr	r5, [pc, #164]	; (80031c8 <stm32_clock_control_init+0x200>)
	old_hclk_freq = get_hclk_frequency();
 8003122:	f7ff fe9b 	bl	8002e5c <get_hclk_frequency>
 8003126:	4604      	mov	r4, r0
	if (new_hclk_freq > old_hclk_freq) {
 8003128:	42a8      	cmp	r0, r5
 800312a:	d802      	bhi.n	8003132 <stm32_clock_control_init+0x16a>
		LL_SetFlashLatency(new_hclk_freq);
 800312c:	4827      	ldr	r0, [pc, #156]	; (80031cc <stm32_clock_control_init+0x204>)
 800312e:	f001 f9a9 	bl	8004484 <LL_SetFlashLatency>
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 8003132:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <stm32_clock_control_init+0x1f8>)
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800313a:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	f022 020f 	bic.w	r2, r2, #15
 8003142:	f042 0208 	orr.w	r2, r2, #8
 8003146:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800314e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003152:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800315a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800315e:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800316a:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 800316c:	6a1a      	ldr	r2, [r3, #32]
 800316e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003176:	621a      	str	r2, [r3, #32]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	f022 0207 	bic.w	r2, r2, #7
 800317e:	f042 0203 	orr.w	r2, r2, #3
 8003182:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	f002 0238 	and.w	r2, r2, #56	; 0x38

	/* Set up sys clock */
	if (IS_ENABLED(STM32_SYSCLK_SRC_PLL)) {
		/* Set PLL1 as System Clock Source */
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
		while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1) {
 800318a:	2a18      	cmp	r2, #24
 800318c:	d1fa      	bne.n	8003184 <stm32_clock_control_init+0x1bc>
	}

	/* Set FLASH latency */
	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq not increased, set flash latency after all clock setting */
	if (new_hclk_freq <= old_hclk_freq) {
 800318e:	42ac      	cmp	r4, r5
 8003190:	d902      	bls.n	8003198 <stm32_clock_control_init+0x1d0>
		LL_SetFlashLatency(new_hclk_freq);
 8003192:	480e      	ldr	r0, [pc, #56]	; (80031cc <stm32_clock_control_init+0x204>)
 8003194:	f001 f976 	bl	8004484 <LL_SetFlashLatency>
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <stm32_clock_control_init+0x1fc>)
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	f022 0207 	bic.w	r2, r2, #7
 80031a0:	f042 0202 	orr.w	r2, r2, #2
 80031a4:	60da      	str	r2, [r3, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80031ac:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	0492      	lsls	r2, r2, #18
 80031b2:	d5fc      	bpl.n	80031ae <stm32_clock_control_init+0x1e6>
	optimize_regulator_voltage_scale(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

	/* Update CMSIS variable */
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <stm32_clock_control_init+0x208>)

	return r;
}
 80031b6:	2000      	movs	r0, #0
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 80031b8:	4a06      	ldr	r2, [pc, #24]	; (80031d4 <stm32_clock_control_init+0x20c>)
 80031ba:	601a      	str	r2, [r3, #0]
}
 80031bc:	b003      	add	sp, #12
 80031be:	bd30      	pop	{r4, r5, pc}
 80031c0:	58024400 	.word	0x58024400
 80031c4:	58024800 	.word	0x58024800
 80031c8:	10642abf 	.word	0x10642abf
 80031cc:	10642ac0 	.word	0x10642ac0
 80031d0:	2400009c 	.word	0x2400009c
 80031d4:	20c85580 	.word	0x20c85580

080031d8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
 80031d8:	b508      	push	{r3, lr}
 80031da:	4807      	ldr	r0, [pc, #28]	; (80031f8 <uart_console_init+0x20>)
 80031dc:	f024 ff12 	bl	8028004 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 80031e0:	b138      	cbz	r0, 80031f2 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 80031e2:	4806      	ldr	r0, [pc, #24]	; (80031fc <uart_console_init+0x24>)
 80031e4:	f7ff fd8e 	bl	8002d04 <__stdout_hook_install>
	__printk_hook_install(console_out);
 80031e8:	4804      	ldr	r0, [pc, #16]	; (80031fc <uart_console_init+0x24>)
 80031ea:	f7fd fe27 	bl	8000e3c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 80031ee:	2000      	movs	r0, #0
}
 80031f0:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80031f2:	f06f 0012 	mvn.w	r0, #18
 80031f6:	e7fb      	b.n	80031f0 <uart_console_init+0x18>
 80031f8:	0802849c 	.word	0x0802849c
 80031fc:	08003201 	.word	0x08003201

08003200 <console_out>:
	if ('\n' == c) {
 8003200:	280a      	cmp	r0, #10
{
 8003202:	b538      	push	{r3, r4, r5, lr}
 8003204:	4604      	mov	r4, r0
 8003206:	4d07      	ldr	r5, [pc, #28]	; (8003224 <console_out+0x24>)
	if ('\n' == c) {
 8003208:	d104      	bne.n	8003214 <console_out+0x14>
 800320a:	68ab      	ldr	r3, [r5, #8]
 800320c:	210d      	movs	r1, #13
 800320e:	4628      	mov	r0, r5
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4798      	blx	r3
 8003214:	68ab      	ldr	r3, [r5, #8]
 8003216:	b2e1      	uxtb	r1, r4
 8003218:	4802      	ldr	r0, [pc, #8]	; (8003224 <console_out+0x24>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4798      	blx	r3
}
 800321e:	4620      	mov	r0, r4
 8003220:	bd38      	pop	{r3, r4, r5, pc}
 8003222:	bf00      	nop
 8003224:	0802849c 	.word	0x0802849c

08003228 <ili9xxx_set_pixel_format.part.0>:
	LOG_ERR("Set contrast not supported");
	return -ENOTSUP;
}

static int
ili9xxx_set_pixel_format(const struct device *dev,
 8003228:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		tx_data = ILI9XXX_PIXSET_MCU_16_BIT | ILI9XXX_PIXSET_RGB_16_BIT;
	} else if (pixel_format == PIXEL_FORMAT_RGB_888) {
		bytes_per_pixel = 3U;
		tx_data = ILI9XXX_PIXSET_MCU_18_BIT | ILI9XXX_PIXSET_RGB_18_BIT;
	} else {
		LOG_ERR("Unsupported pixel format");
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <ili9xxx_set_pixel_format.part.0+0x20>)
 800322c:	aa04      	add	r2, sp, #16
 800322e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <ili9xxx_set_pixel_format.part.0+0x24>)
 8003234:	9305      	str	r3, [sp, #20]
 8003236:	2302      	movs	r3, #2
 8003238:	9304      	str	r3, [sp, #16]
 800323a:	f017 fbb0 	bl	801a99e <z_log_msg_static_create.constprop.0>

	data->pixel_format = pixel_format;
	data->bytes_per_pixel = bytes_per_pixel;

	return 0;
}
 800323e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003242:	b007      	add	sp, #28
 8003244:	f85d fb04 	ldr.w	pc, [sp], #4
 8003248:	0802a60d 	.word	0x0802a60d
 800324c:	08028a1c 	.word	0x08028a1c

08003250 <ili9xxx_read>:
{
 8003250:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Reading not supported");
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <ili9xxx_read+0x20>)
 8003254:	aa04      	add	r2, sp, #16
 8003256:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800325a:	4806      	ldr	r0, [pc, #24]	; (8003274 <ili9xxx_read+0x24>)
 800325c:	9305      	str	r3, [sp, #20]
 800325e:	2302      	movs	r3, #2
 8003260:	9304      	str	r3, [sp, #16]
 8003262:	f017 fb9c 	bl	801a99e <z_log_msg_static_create.constprop.0>
}
 8003266:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800326a:	b007      	add	sp, #28
 800326c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003270:	0802a626 	.word	0x0802a626
 8003274:	08028a1c 	.word	0x08028a1c

08003278 <ili9xxx_get_framebuffer>:
{
 8003278:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Direct framebuffer access not supported");
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <ili9xxx_get_framebuffer+0x20>)
 800327c:	aa04      	add	r2, sp, #16
 800327e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003282:	4806      	ldr	r0, [pc, #24]	; (800329c <ili9xxx_get_framebuffer+0x24>)
 8003284:	9305      	str	r3, [sp, #20]
 8003286:	2302      	movs	r3, #2
 8003288:	9304      	str	r3, [sp, #16]
 800328a:	f017 fb88 	bl	801a99e <z_log_msg_static_create.constprop.0>
}
 800328e:	2000      	movs	r0, #0
 8003290:	b007      	add	sp, #28
 8003292:	f85d fb04 	ldr.w	pc, [sp], #4
 8003296:	bf00      	nop
 8003298:	0802a63c 	.word	0x0802a63c
 800329c:	08028a1c 	.word	0x08028a1c

080032a0 <ili9xxx_set_brightness>:
{
 80032a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Set brightness not implemented");
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <ili9xxx_set_brightness+0x20>)
 80032a4:	aa04      	add	r2, sp, #16
 80032a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80032aa:	4806      	ldr	r0, [pc, #24]	; (80032c4 <ili9xxx_set_brightness+0x24>)
 80032ac:	9305      	str	r3, [sp, #20]
 80032ae:	2302      	movs	r3, #2
 80032b0:	9304      	str	r3, [sp, #16]
 80032b2:	f017 fb74 	bl	801a99e <z_log_msg_static_create.constprop.0>
}
 80032b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80032ba:	b007      	add	sp, #28
 80032bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80032c0:	0802a664 	.word	0x0802a664
 80032c4:	08028a1c 	.word	0x08028a1c

080032c8 <ili9xxx_set_contrast>:
{
 80032c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Set contrast not supported");
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <ili9xxx_set_contrast+0x20>)
 80032cc:	aa04      	add	r2, sp, #16
 80032ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80032d2:	4806      	ldr	r0, [pc, #24]	; (80032ec <ili9xxx_set_contrast+0x24>)
 80032d4:	9305      	str	r3, [sp, #20]
 80032d6:	2302      	movs	r3, #2
 80032d8:	9304      	str	r3, [sp, #16]
 80032da:	f017 fb60 	bl	801a99e <z_log_msg_static_create.constprop.0>
}
 80032de:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80032e2:	b007      	add	sp, #28
 80032e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80032e8:	0802a683 	.word	0x0802a683
 80032ec:	08028a1c 	.word	0x08028a1c

080032f0 <ili9xxx_init>:

	return 0;
}

static int ili9xxx_init(const struct device *dev)
{
 80032f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f2:	b087      	sub	sp, #28
 80032f4:	4605      	mov	r5, r0
	const struct ili9xxx_config *config = dev->config;
 80032f6:	6846      	ldr	r6, [r0, #4]
{
 80032f8:	af00      	add	r7, sp, #0
 * @retval false if the SPI bus (or the CS gpio defined) is not ready for use.
 */
static inline bool spi_is_ready_dt(const struct spi_dt_spec *spec)
{
	/* Validate bus is ready */
	if (!device_is_ready(spec->bus)) {
 80032fa:	6870      	ldr	r0, [r6, #4]
 80032fc:	f024 fe82 	bl	8028004 <z_device_is_ready>
 8003300:	b980      	cbnz	r0, 8003324 <ili9xxx_init+0x34>

	int r;

	if (!spi_is_ready_dt(&config->spi)) {
		LOG_ERR("SPI device is not ready");
 8003302:	4b5b      	ldr	r3, [pc, #364]	; (8003470 <ili9xxx_init+0x180>)
		return -ENODEV;
	}

	if (!device_is_ready(config->cmd_data.port)) {
		LOG_ERR("Command/Data GPIO device not ready");
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	2302      	movs	r3, #2
		return -ENODEV;
 8003308:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Command/Data GPIO device not ready");
 800330c:	f107 0210 	add.w	r2, r7, #16
 8003310:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003314:	4857      	ldr	r0, [pc, #348]	; (8003474 <ili9xxx_init+0x184>)
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	f017 fb41 	bl	801a99e <z_log_msg_static_create.constprop.0>
		LOG_ERR("Could not exit sleep mode (%d)", r);
		return r;
	}

	return 0;
}
 800331c:	4620      	mov	r0, r4
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return config->cs.gpio.port != NULL;
 8003324:	6930      	ldr	r0, [r6, #16]
		return false;
	}
	/* Validate CS gpio port is ready, if it is used */
	if (spi_cs_is_gpio_dt(spec) &&
 8003326:	b118      	cbz	r0, 8003330 <ili9xxx_init+0x40>
 8003328:	f024 fe6c 	bl	8028004 <z_device_is_ready>
 800332c:	2800      	cmp	r0, #0
 800332e:	d0e8      	beq.n	8003302 <ili9xxx_init+0x12>
	if (!device_is_ready(config->cmd_data.port)) {
 8003330:	69f0      	ldr	r0, [r6, #28]
 8003332:	f024 fe67 	bl	8028004 <z_device_is_ready>
 8003336:	b908      	cbnz	r0, 800333c <ili9xxx_init+0x4c>
		LOG_ERR("Command/Data GPIO device not ready");
 8003338:	4b4f      	ldr	r3, [pc, #316]	; (8003478 <ili9xxx_init+0x188>)
 800333a:	e7e3      	b.n	8003304 <ili9xxx_init+0x14>
	r = gpio_pin_configure_dt(&config->cmd_data, GPIO_OUTPUT);
 800333c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003340:	f106 001c 	add.w	r0, r6, #28
 8003344:	f017 faef 	bl	801a926 <gpio_pin_configure_dt>
	if (r < 0) {
 8003348:	1e04      	subs	r4, r0, #0
 800334a:	da0f      	bge.n	800336c <ili9xxx_init+0x7c>
		LOG_ERR("Could not configure command/data GPIO (%d)", r);
 800334c:	466d      	mov	r5, sp
 800334e:	b088      	sub	sp, #32
 8003350:	466a      	mov	r2, sp
 8003352:	4b4a      	ldr	r3, [pc, #296]	; (800347c <ili9xxx_init+0x18c>)
		LOG_ERR("Could not exit sleep mode (%d)", r);
 8003354:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8003358:	4846      	ldr	r0, [pc, #280]	; (8003474 <ili9xxx_init+0x184>)
 800335a:	e9c2 3405 	strd	r3, r4, [r2, #20]
 800335e:	2303      	movs	r3, #3
 8003360:	f842 3f10 	str.w	r3, [r2, #16]!
 8003364:	f017 fb1b 	bl	801a99e <z_log_msg_static_create.constprop.0>
 8003368:	46ad      	mov	sp, r5
		return r;
 800336a:	e7d7      	b.n	800331c <ili9xxx_init+0x2c>
	if (config->reset.port != NULL) {
 800336c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800336e:	b188      	cbz	r0, 8003394 <ili9xxx_init+0xa4>
 8003370:	f024 fe48 	bl	8028004 <z_device_is_ready>
		if (!device_is_ready(config->reset.port)) {
 8003374:	b908      	cbnz	r0, 800337a <ili9xxx_init+0x8a>
			LOG_ERR("Reset GPIO device not ready");
 8003376:	4b42      	ldr	r3, [pc, #264]	; (8003480 <ili9xxx_init+0x190>)
 8003378:	e7c4      	b.n	8003304 <ili9xxx_init+0x14>
		r = gpio_pin_configure_dt(&config->reset, GPIO_OUTPUT_INACTIVE);
 800337a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800337e:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8003382:	f017 fad0 	bl	801a926 <gpio_pin_configure_dt>
		if (r < 0) {
 8003386:	1e04      	subs	r4, r0, #0
 8003388:	da04      	bge.n	8003394 <ili9xxx_init+0xa4>
			LOG_ERR("Could not configure reset GPIO (%d)", r);
 800338a:	466d      	mov	r5, sp
 800338c:	b088      	sub	sp, #32
 800338e:	466a      	mov	r2, sp
 8003390:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <ili9xxx_init+0x194>)
 8003392:	e7df      	b.n	8003354 <ili9xxx_init+0x64>
	ili9xxx_hw_reset(dev);
 8003394:	686c      	ldr	r4, [r5, #4]
	if (config->reset.port == NULL) {
 8003396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003398:	b183      	cbz	r3, 80033bc <ili9xxx_init+0xcc>
	gpio_pin_set_dt(&config->reset, 1);
 800339a:	3424      	adds	r4, #36	; 0x24
 800339c:	2101      	movs	r1, #1
 800339e:	4620      	mov	r0, r4
 80033a0:	f017 fb0b 	bl	801a9ba <gpio_pin_set_dt.isra.0>
	return z_impl_k_sleep(timeout);
 80033a4:	2100      	movs	r1, #0
 80033a6:	200a      	movs	r0, #10
 80033a8:	f016 f9fc 	bl	80197a4 <z_impl_k_sleep>
	gpio_pin_set_dt(&config->reset, 0);
 80033ac:	2100      	movs	r1, #0
 80033ae:	4620      	mov	r0, r4
 80033b0:	f017 fb03 	bl	801a9ba <gpio_pin_set_dt.isra.0>
 80033b4:	2032      	movs	r0, #50	; 0x32
 80033b6:	2100      	movs	r1, #0
 80033b8:	f016 f9f4 	bl	80197a4 <z_impl_k_sleep>
	r = ili9xxx_transmit(dev, ILI9XXX_SWRESET, NULL, 0);
 80033bc:	2300      	movs	r3, #0
 80033be:	2101      	movs	r1, #1
 80033c0:	4628      	mov	r0, r5
 80033c2:	461a      	mov	r2, r3
 80033c4:	f017 fb0d 	bl	801a9e2 <ili9xxx_transmit>
	if (r < 0) {
 80033c8:	1e04      	subs	r4, r0, #0
 80033ca:	da04      	bge.n	80033d6 <ili9xxx_init+0xe6>
		LOG_ERR("Error transmit command Software Reset (%d)", r);
 80033cc:	466d      	mov	r5, sp
 80033ce:	b088      	sub	sp, #32
 80033d0:	466a      	mov	r2, sp
 80033d2:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <ili9xxx_init+0x198>)
 80033d4:	e7be      	b.n	8003354 <ili9xxx_init+0x64>
 80033d6:	2100      	movs	r1, #0
 80033d8:	2032      	movs	r0, #50	; 0x32
 80033da:	f016 f9e3 	bl	80197a4 <z_impl_k_sleep>
	ili9xxx_display_blanking_on(dev);
 80033de:	4628      	mov	r0, r5
 80033e0:	f017 fbf2 	bl	801abc8 <ili9xxx_display_blanking_on>
	const struct ili9xxx_config *config = dev->config;
 80033e4:	686e      	ldr	r6, [r5, #4]
	r = ili9xxx_set_pixel_format(dev, pixel_format);
 80033e6:	4628      	mov	r0, r5
	if (config->pixel_format == ILI9XXX_PIXEL_FORMAT_RGB565) {
 80033e8:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
		pixel_format = PIXEL_FORMAT_RGB_565;
 80033ec:	2b00      	cmp	r3, #0
	r = ili9xxx_set_pixel_format(dev, pixel_format);
 80033ee:	bf14      	ite	ne
 80033f0:	2101      	movne	r1, #1
 80033f2:	2110      	moveq	r1, #16
 80033f4:	f017 fb54 	bl	801aaa0 <ili9xxx_set_pixel_format>
	if (r < 0) {
 80033f8:	1e04      	subs	r4, r0, #0
 80033fa:	db14      	blt.n	8003426 <ili9xxx_init+0x136>
	if (config->rotation == 0U) {
 80033fc:	8df1      	ldrh	r1, [r6, #46]	; 0x2e
 80033fe:	b129      	cbz	r1, 800340c <ili9xxx_init+0x11c>
	} else if (config->rotation == 90U) {
 8003400:	295a      	cmp	r1, #90	; 0x5a
 8003402:	d015      	beq.n	8003430 <ili9xxx_init+0x140>
		orientation = DISPLAY_ORIENTATION_ROTATED_180;
 8003404:	29b4      	cmp	r1, #180	; 0xb4
 8003406:	bf14      	ite	ne
 8003408:	2103      	movne	r1, #3
 800340a:	2102      	moveq	r1, #2
	r = ili9xxx_set_orientation(dev, orientation);
 800340c:	4628      	mov	r0, r5
 800340e:	f017 fb14 	bl	801aa3a <ili9xxx_set_orientation>
	if (r < 0) {
 8003412:	1e04      	subs	r4, r0, #0
 8003414:	db07      	blt.n	8003426 <ili9xxx_init+0x136>
	if (config->inversion) {
 8003416:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 800341a:	b95b      	cbnz	r3, 8003434 <ili9xxx_init+0x144>
	r = config->regs_init_fn(dev);
 800341c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800341e:	4628      	mov	r0, r5
 8003420:	4798      	blx	r3
	if (r < 0) {
 8003422:	1e04      	subs	r4, r0, #0
 8003424:	da0f      	bge.n	8003446 <ili9xxx_init+0x156>
		LOG_ERR("Could not configure display (%d)", r);
 8003426:	466d      	mov	r5, sp
 8003428:	b088      	sub	sp, #32
 800342a:	466a      	mov	r2, sp
 800342c:	4b17      	ldr	r3, [pc, #92]	; (800348c <ili9xxx_init+0x19c>)
 800342e:	e791      	b.n	8003354 <ili9xxx_init+0x64>
		orientation = DISPLAY_ORIENTATION_ROTATED_90;
 8003430:	2101      	movs	r1, #1
 8003432:	e7eb      	b.n	800340c <ili9xxx_init+0x11c>
		r = ili9xxx_transmit(dev, ILI9XXX_DINVON, NULL, 0U);
 8003434:	2300      	movs	r3, #0
 8003436:	2121      	movs	r1, #33	; 0x21
 8003438:	4628      	mov	r0, r5
 800343a:	461a      	mov	r2, r3
 800343c:	f017 fad1 	bl	801a9e2 <ili9xxx_transmit>
		if (r < 0) {
 8003440:	1e04      	subs	r4, r0, #0
 8003442:	daeb      	bge.n	800341c <ili9xxx_init+0x12c>
 8003444:	e7ef      	b.n	8003426 <ili9xxx_init+0x136>
	r = ili9xxx_transmit(dev, ILI9XXX_SLPOUT, NULL, 0);
 8003446:	2300      	movs	r3, #0
 8003448:	2111      	movs	r1, #17
 800344a:	4628      	mov	r0, r5
 800344c:	461a      	mov	r2, r3
 800344e:	f017 fac8 	bl	801a9e2 <ili9xxx_transmit>
	if (r < 0) {
 8003452:	1e04      	subs	r4, r0, #0
 8003454:	db06      	blt.n	8003464 <ili9xxx_init+0x174>
 8003456:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800345a:	2100      	movs	r1, #0
	return 0;
 800345c:	2400      	movs	r4, #0
 800345e:	f016 f9a1 	bl	80197a4 <z_impl_k_sleep>
	if (r < 0) {
 8003462:	e75b      	b.n	800331c <ili9xxx_init+0x2c>
		LOG_ERR("Could not exit sleep mode (%d)", r);
 8003464:	466d      	mov	r5, sp
 8003466:	b088      	sub	sp, #32
 8003468:	466a      	mov	r2, sp
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <ili9xxx_init+0x1a0>)
 800346c:	e772      	b.n	8003354 <ili9xxx_init+0x64>
 800346e:	bf00      	nop
 8003470:	0802a69e 	.word	0x0802a69e
 8003474:	08028a1c 	.word	0x08028a1c
 8003478:	0802a6b6 	.word	0x0802a6b6
 800347c:	0802a6d9 	.word	0x0802a6d9
 8003480:	0802a704 	.word	0x0802a704
 8003484:	0802a720 	.word	0x0802a720
 8003488:	0802a744 	.word	0x0802a744
 800348c:	0802a76f 	.word	0x0802a76f
 8003490:	0802a790 	.word	0x0802a790

08003494 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8003494:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8003496:	6903      	ldr	r3, [r0, #16]
{
 8003498:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 800349a:	6058      	str	r0, [r3, #4]
 800349c:	4d08      	ldr	r5, [pc, #32]	; (80034c0 <gpio_stm32_init+0x2c>)
 800349e:	4628      	mov	r0, r5
 80034a0:	f024 fdb0 	bl	8028004 <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 80034a4:	b140      	cbz	r0, 80034b8 <gpio_stm32_init+0x24>
					(clock_control_subsys_t)&cfg->pclken);
 80034a6:	6861      	ldr	r1, [r4, #4]
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 80034a8:	4628      	mov	r0, r5
 80034aa:	68ab      	ldr	r3, [r5, #8]
 80034ac:	310c      	adds	r1, #12
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 80034b2:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 80034b8:	f06f 0012 	mvn.w	r0, #18
 80034bc:	e7fb      	b.n	80034b6 <gpio_stm32_init+0x22>
 80034be:	bf00      	nop
 80034c0:	08028384 	.word	0x08028384

080034c4 <gpio_stm32_pin_interrupt_configure>:
{
 80034c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034c6:	4617      	mov	r7, r2
 80034c8:	460c      	mov	r4, r1
 80034ca:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config;
 80034cc:	6846      	ldr	r6, [r0, #4]
	if (mode == GPIO_INT_MODE_DISABLED) {
 80034ce:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	struct gpio_stm32_data *data = dev->data;
 80034d2:	6902      	ldr	r2, [r0, #16]
	if (mode == GPIO_INT_MODE_DISABLED) {
 80034d4:	d128      	bne.n	8003528 <gpio_stm32_pin_interrupt_configure+0x64>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80034d6:	f001 0303 	and.w	r3, r1, #3
 80034da:	220f      	movs	r2, #15
 80034dc:	3304      	adds	r3, #4
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	409a      	lsls	r2, r3
 80034e2:	ea42 0291 	orr.w	r2, r2, r1, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U)) >> (POSITION_VAL(Line >> 16U) & 31U));
 80034e6:	4937      	ldr	r1, [pc, #220]	; (80035c4 <gpio_stm32_pin_interrupt_configure+0x100>)
 80034e8:	f002 0303 	and.w	r3, r2, #3
 80034ec:	3302      	adds	r3, #2
 80034ee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80034f2:	0c13      	lsrs	r3, r2, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80034f8:	fab3 f383 	clz	r3, r3
 80034fc:	ea01 4212 	and.w	r2, r1, r2, lsr #16
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8003508:	68b2      	ldr	r2, [r6, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	d109      	bne.n	8003522 <gpio_stm32_pin_interrupt_configure+0x5e>
			stm32_exti_disable(pin);
 800350e:	4620      	mov	r0, r4
 8003510:	f017 f9a5 	bl	801a85e <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8003514:	4620      	mov	r0, r4
 8003516:	f7ff fc89 	bl	8002e2c <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 800351a:	2100      	movs	r1, #0
 800351c:	4620      	mov	r0, r4
 800351e:	f017 f9ab 	bl	801a878 <stm32_exti_trigger>
	int err = 0;
 8003522:	2000      	movs	r0, #0
}
 8003524:	b003      	add	sp, #12
 8003526:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 8003528:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 800352c:	d044      	beq.n	80035b8 <gpio_stm32_pin_interrupt_configure+0xf4>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800352e:	4926      	ldr	r1, [pc, #152]	; (80035c8 <gpio_stm32_pin_interrupt_configure+0x104>)
 8003530:	4620      	mov	r0, r4
 8003532:	f7ff fc63 	bl	8002dfc <stm32_exti_set_callback>
 8003536:	2800      	cmp	r0, #0
 8003538:	d141      	bne.n	80035be <gpio_stm32_pin_interrupt_configure+0xfa>
	struct stm32_pclken pclken = {
 800353a:	4a24      	ldr	r2, [pc, #144]	; (80035cc <gpio_stm32_pin_interrupt_configure+0x108>)
 800353c:	466b      	mov	r3, sp
	gpio_stm32_enable_int(cfg->port, pin);
 800353e:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 8003540:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003544:	e883 0003 	stmia.w	r3, {r0, r1}
 8003548:	4821      	ldr	r0, [pc, #132]	; (80035d0 <gpio_stm32_pin_interrupt_configure+0x10c>)
 800354a:	4619      	mov	r1, r3
 800354c:	6882      	ldr	r2, [r0, #8]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	4790      	blx	r2
	if (ret != 0) {
 8003552:	b9d8      	cbnz	r0, 800358c <gpio_stm32_pin_interrupt_configure+0xc8>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8003554:	f004 0303 	and.w	r3, r4, #3
 8003558:	210f      	movs	r1, #15
 800355a:	3304      	adds	r3, #4
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4099      	lsls	r1, r3
 8003560:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << ((POSITION_VAL(Line >> 16U)) & 31U));
 8003564:	f001 0303 	and.w	r3, r1, #3
 8003568:	0c0a      	lsrs	r2, r1, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	fa92 f2a2 	rbit	r2, r2
 800356e:	009b      	lsls	r3, r3, #2
  return __builtin_clz(value);
 8003570:	fab2 f282 	clz	r2, r2
 8003574:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8003578:	f002 021f 	and.w	r2, r2, #31
 800357c:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
 8003580:	4096      	lsls	r6, r2
 8003582:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 8003586:	430e      	orrs	r6, r1
 8003588:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
	switch (trig) {
 800358c:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8003590:	d00e      	beq.n	80035b0 <gpio_stm32_pin_interrupt_configure+0xec>
 8003592:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8003596:	d00d      	beq.n	80035b4 <gpio_stm32_pin_interrupt_configure+0xf0>
 8003598:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 800359c:	4259      	negs	r1, r3
 800359e:	4159      	adcs	r1, r3
 80035a0:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 80035a2:	4620      	mov	r0, r4
 80035a4:	f017 f968 	bl	801a878 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 80035a8:	4620      	mov	r0, r4
 80035aa:	f7ff fc13 	bl	8002dd4 <stm32_exti_enable>
 80035ae:	e7b8      	b.n	8003522 <gpio_stm32_pin_interrupt_configure+0x5e>
		edge = STM32_EXTI_TRIG_RISING;
 80035b0:	2101      	movs	r1, #1
 80035b2:	e7f6      	b.n	80035a2 <gpio_stm32_pin_interrupt_configure+0xde>
		edge = STM32_EXTI_TRIG_BOTH;
 80035b4:	2103      	movs	r1, #3
 80035b6:	e7f4      	b.n	80035a2 <gpio_stm32_pin_interrupt_configure+0xde>
		err = -ENOTSUP;
 80035b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80035bc:	e7b2      	b.n	8003524 <gpio_stm32_pin_interrupt_configure+0x60>
		err = -EBUSY;
 80035be:	f06f 000f 	mvn.w	r0, #15
	return err;
 80035c2:	e7af      	b.n	8003524 <gpio_stm32_pin_interrupt_configure+0x60>
 80035c4:	58000400 	.word	0x58000400
 80035c8:	0801ae21 	.word	0x0801ae21
 80035cc:	08028a74 	.word	0x08028a74
 80035d0:	08028384 	.word	0x08028384

080035d4 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 80035d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d8:	4604      	mov	r4, r0
 80035da:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 80035de:	2500      	movs	r5, #0
	port_device = gpio_ports[STM32_PORT(pin)];
 80035e0:	4f1c      	ldr	r7, [pc, #112]	; (8003654 <pinctrl_configure_pins+0x80>)
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 80035e2:	42b4      	cmp	r4, r6
 80035e4:	d101      	bne.n	80035ea <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 80035e6:	2000      	movs	r0, #0
 80035e8:	e014      	b.n	8003614 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 80035ea:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 80035ec:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 80035ee:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 80035f2:	d411      	bmi.n	8003618 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 80035f4:	6865      	ldr	r5, [r4, #4]
 80035f6:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 80035fa:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 80035fe:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8003602:	280a      	cmp	r0, #10
 8003604:	d823      	bhi.n	800364e <pinctrl_configure_pins+0x7a>
	port_device = gpio_ports[STM32_PORT(pin)];
 8003606:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800360a:	f1b8 0f00 	cmp.w	r8, #0
 800360e:	d10d      	bne.n	800362c <pinctrl_configure_pins+0x58>
		return -ENODEV;
 8003610:	f06f 0012 	mvn.w	r0, #18
}
 8003614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8003618:	f1b9 0f10 	cmp.w	r9, #16
 800361c:	d004      	beq.n	8003628 <pinctrl_configure_pins+0x54>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 800361e:	f1b9 0f11 	cmp.w	r9, #17
 8003622:	d1ea      	bne.n	80035fa <pinctrl_configure_pins+0x26>
			pin_cgf = pins[i].pincfg;
 8003624:	6865      	ldr	r5, [r4, #4]
 8003626:	e7e8      	b.n	80035fa <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 8003628:	2530      	movs	r5, #48	; 0x30
 800362a:	e7e6      	b.n	80035fa <pinctrl_configure_pins+0x26>
 800362c:	4640      	mov	r0, r8
 800362e:	f024 fce9 	bl	8028004 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8003632:	2800      	cmp	r0, #0
 8003634:	d0ec      	beq.n	8003610 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8003636:	464b      	mov	r3, r9
 8003638:	462a      	mov	r2, r5
 800363a:	f00a 010f 	and.w	r1, sl, #15
 800363e:	4640      	mov	r0, r8
 8003640:	f017 fc05 	bl	801ae4e <gpio_stm32_configure>
		if (ret < 0) {
 8003644:	2800      	cmp	r0, #0
 8003646:	f104 0408 	add.w	r4, r4, #8
 800364a:	daca      	bge.n	80035e2 <pinctrl_configure_pins+0xe>
 800364c:	e7e2      	b.n	8003614 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 800364e:	f06f 0015 	mvn.w	r0, #21
 8003652:	e7df      	b.n	8003614 <pinctrl_configure_pins+0x40>
 8003654:	08028ce4 	.word	0x08028ce4

08003658 <uart_stm32_set_baudrate.part.0>:
		pm_policy_state_lock_put(PM_STATE_SUSPEND_TO_IDLE, PM_ALL_SUBSTATES);
	}
}
#endif /* CONFIG_PM */

static inline void uart_stm32_set_baudrate(const struct device *dev, uint32_t baud_rate)
 8003658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		}
	} else {
		if (clock_control_get_rate(data->clock,
					   (clock_control_subsys_t)&config->pclken[0],
					   &clock_rate) < 0) {
			LOG_ERR("Failed call clock_control_get_rate(pclken[0])");
 800365a:	4b07      	ldr	r3, [pc, #28]	; (8003678 <uart_stm32_set_baudrate.part.0+0x20>)
 800365c:	9305      	str	r3, [sp, #20]
 800365e:	2302      	movs	r3, #2
 8003660:	9304      	str	r3, [sp, #16]
 8003662:	2300      	movs	r3, #0
 8003664:	aa04      	add	r2, sp, #16
 8003666:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800366a:	4804      	ldr	r0, [pc, #16]	; (800367c <uart_stm32_set_baudrate.part.0+0x24>)
 800366c:	f7fe fab4 	bl	8001bd8 <z_impl_z_log_msg_static_create>
			 "BaudRateReg >= 16");

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 8003670:	b007      	add	sp, #28
 8003672:	f85d fb04 	ldr.w	pc, [sp], #4
 8003676:	bf00      	nop
 8003678:	0802a8af 	.word	0x0802a8af
 800367c:	08028a5c 	.word	0x08028a5c

08003680 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 8003680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8003684:	790b      	ldrb	r3, [r1, #4]
{
 8003686:	460d      	mov	r5, r1
	const struct uart_stm32_config *config = dev->config;
 8003688:	6846      	ldr	r6, [r0, #4]
	switch (parity) {
 800368a:	2b01      	cmp	r3, #1
	struct uart_stm32_data *data = dev->data;
 800368c:	6907      	ldr	r7, [r0, #16]
	switch (parity) {
 800368e:	d02e      	beq.n	80036ee <uart_stm32_configure+0x6e>
 8003690:	f1a3 0e02 	sub.w	lr, r3, #2
 8003694:	f1de 0800 	rsbs	r8, lr, #0
 8003698:	eb48 080e 	adc.w	r8, r8, lr
 800369c:	ea4f 2888 	mov.w	r8, r8, lsl #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80036a0:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 80036a4:	f895 a006 	ldrb.w	sl, [r5, #6]
 80036a8:	f1b9 0f02 	cmp.w	r9, #2
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 80036ac:	79ec      	ldrb	r4, [r5, #7]
 80036ae:	bf96      	itet	ls
 80036b0:	4a74      	ldrls	r2, [pc, #464]	; (8003884 <uart_stm32_configure+0x204>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80036b2:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 80036b6:	f832 e019 	ldrhls.w	lr, [r2, r9, lsl #1]
	switch (db) {
 80036ba:	f1ba 0f02 	cmp.w	sl, #2
 80036be:	d019      	beq.n	80036f4 <uart_stm32_configure+0x74>
 80036c0:	f1ba 0f04 	cmp.w	sl, #4
 80036c4:	d04c      	beq.n	8003760 <uart_stm32_configure+0xe0>
		if (p == UART_CFG_PARITY_NONE) {
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d14a      	bne.n	8003760 <uart_stm32_configure+0xe0>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 80036ca:	2c01      	cmp	r4, #1
 80036cc:	f000 80cf 	beq.w	800386e <uart_stm32_configure+0x1ee>
#if HAS_DRIVER_ENABLE
	bool driver_enable = cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485;
 80036d0:	1ee2      	subs	r2, r4, #3
 80036d2:	469c      	mov	ip, r3
 80036d4:	4251      	negs	r1, r2
 80036d6:	4151      	adcs	r1, r2
			return LL_USART_DATAWIDTH_8B;
 80036d8:	461a      	mov	r2, r3
	if (IS_LPUART_INSTANCE(config->usart) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80036da:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 80036de:	d03c      	beq.n	800375a <uart_stm32_configure+0xda>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 80036e0:	f1ba 0f01 	cmp.w	sl, #1
 80036e4:	d939      	bls.n	800375a <uart_stm32_configure+0xda>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 80036e6:	f1ba 0f04 	cmp.w	sl, #4
 80036ea:	d036      	beq.n	800375a <uart_stm32_configure+0xda>
 80036ec:	e011      	b.n	8003712 <uart_stm32_configure+0x92>
	switch (parity) {
 80036ee:	f44f 68c0 	mov.w	r8, #1536	; 0x600
 80036f2:	e7d5      	b.n	80036a0 <uart_stm32_configure+0x20>
		if (p == UART_CFG_PARITY_NONE) {
 80036f4:	b9a3      	cbnz	r3, 8003720 <uart_stm32_configure+0xa0>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 80036f6:	2c01      	cmp	r4, #1
 80036f8:	f029 0202 	bic.w	r2, r9, #2
 80036fc:	d033      	beq.n	8003766 <uart_stm32_configure+0xe6>
	bool driver_enable = cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485;
 80036fe:	f1a4 0c03 	sub.w	ip, r4, #3
 8003702:	f1dc 0100 	rsbs	r1, ip, #0
 8003706:	eb41 010c 	adc.w	r1, r1, ip
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800370a:	b332      	cbz	r2, 800375a <uart_stm32_configure+0xda>
 800370c:	469c      	mov	ip, r3
			return LL_USART_DATAWIDTH_7B;
 800370e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		return -ENOTSUP;
	}

	/* Driver supports only RTS/CTS and RS485 flow control */
	if (!(cfg->flow_ctrl == UART_CFG_FLOW_CTRL_NONE
 8003712:	2c00      	cmp	r4, #0
 8003714:	d059      	beq.n	80037ca <uart_stm32_configure+0x14a>
		|| (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS &&
 8003716:	2c01      	cmp	r4, #1
 8003718:	d02c      	beq.n	8003774 <uart_stm32_configure+0xf4>
	if (!(cfg->flow_ctrl == UART_CFG_FLOW_CTRL_NONE
 800371a:	2c03      	cmp	r4, #3
 800371c:	d02a      	beq.n	8003774 <uart_stm32_configure+0xf4>
 800371e:	e01c      	b.n	800375a <uart_stm32_configure+0xda>
			return LL_USART_DATAWIDTH_8B;
 8003720:	2200      	movs	r2, #0
		return LL_USART_HWCONTROL_RTS_CTS;
 8003722:	2c01      	cmp	r4, #1
	bool driver_enable = cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485;
 8003724:	f1a4 0b03 	sub.w	fp, r4, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8003728:	bf14      	ite	ne
 800372a:	f04f 0c00 	movne.w	ip, #0
 800372e:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	bool driver_enable = cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485;
 8003732:	f1db 0100 	rsbs	r1, fp, #0
 8003736:	eb41 010b 	adc.w	r1, r1, fp
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800373a:	f1a3 0b03 	sub.w	fp, r3, #3
 800373e:	f1bb 0f01 	cmp.w	fp, #1
 8003742:	d90a      	bls.n	800375a <uart_stm32_configure+0xda>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0c8      	beq.n	80036da <uart_stm32_configure+0x5a>
 8003748:	f1ba 0f04 	cmp.w	sl, #4
 800374c:	d005      	beq.n	800375a <uart_stm32_configure+0xda>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800374e:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8003752:	d002      	beq.n	800375a <uart_stm32_configure+0xda>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8003754:	f1ba 0f01 	cmp.w	sl, #1
 8003758:	d8db      	bhi.n	8003712 <uart_stm32_configure+0x92>
		return -ENOTSUP;
 800375a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800375e:	e084      	b.n	800386a <uart_stm32_configure+0x1ea>
 8003760:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003764:	e7dd      	b.n	8003722 <uart_stm32_configure+0xa2>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8003766:	2a00      	cmp	r2, #0
 8003768:	d0f7      	beq.n	800375a <uart_stm32_configure+0xda>
	bool driver_enable = cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485;
 800376a:	4619      	mov	r1, r3
		return LL_USART_HWCONTROL_RTS_CTS;
 800376c:	f44f 7c40 	mov.w	ip, #768	; 0x300
			return LL_USART_DATAWIDTH_7B;
 8003770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
			IS_UART_HWFLOW_INSTANCE(config->usart))
#if HAS_DRIVER_ENABLE
		|| (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485 &&
			IS_UART_DRIVER_ENABLE_INSTANCE(config->usart))
 8003774:	6833      	ldr	r3, [r6, #0]
		|| (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485 &&
 8003776:	4c44      	ldr	r4, [pc, #272]	; (8003888 <uart_stm32_configure+0x208>)
 8003778:	42a3      	cmp	r3, r4
 800377a:	d026      	beq.n	80037ca <uart_stm32_configure+0x14a>
			IS_UART_DRIVER_ENABLE_INSTANCE(config->usart))
 800377c:	f5a4 444c 	sub.w	r4, r4, #52224	; 0xcc00
 8003780:	42a3      	cmp	r3, r4
 8003782:	d022      	beq.n	80037ca <uart_stm32_configure+0x14a>
 8003784:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003788:	42a3      	cmp	r3, r4
 800378a:	d01e      	beq.n	80037ca <uart_stm32_configure+0x14a>
 800378c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003790:	42a3      	cmp	r3, r4
 8003792:	d01a      	beq.n	80037ca <uart_stm32_configure+0x14a>
 8003794:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003798:	42a3      	cmp	r3, r4
 800379a:	d016      	beq.n	80037ca <uart_stm32_configure+0x14a>
 800379c:	f504 4444 	add.w	r4, r4, #50176	; 0xc400
 80037a0:	42a3      	cmp	r3, r4
 80037a2:	d012      	beq.n	80037ca <uart_stm32_configure+0x14a>
 80037a4:	f5a4 441c 	sub.w	r4, r4, #39936	; 0x9c00
 80037a8:	42a3      	cmp	r3, r4
 80037aa:	d00e      	beq.n	80037ca <uart_stm32_configure+0x14a>
 80037ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	d00a      	beq.n	80037ca <uart_stm32_configure+0x14a>
 80037b4:	f504 441c 	add.w	r4, r4, #39936	; 0x9c00
 80037b8:	42a3      	cmp	r3, r4
 80037ba:	d006      	beq.n	80037ca <uart_stm32_configure+0x14a>
 80037bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80037c0:	42a3      	cmp	r3, r4
 80037c2:	d002      	beq.n	80037ca <uart_stm32_configure+0x14a>
 80037c4:	4c31      	ldr	r4, [pc, #196]	; (800388c <uart_stm32_configure+0x20c>)
 80037c6:	42a3      	cmp	r3, r4
 80037c8:	d1c7      	bne.n	800375a <uart_stm32_configure+0xda>
#endif
		)) {
		return -ENOTSUP;
	}

	LL_USART_Disable(config->usart);
 80037ca:	6834      	ldr	r4, [r6, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	f023 0301 	bic.w	r3, r3, #1
 80037d2:	6023      	str	r3, [r4, #0]
	return LL_USART_GetParity(config->usart);
 80037d4:	6843      	ldr	r3, [r0, #4]
 80037d6:	681c      	ldr	r4, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(const USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600

	if (parity != uart_stm32_get_parity(dev)) {
 80037de:	4598      	cmp	r8, r3
 80037e0:	d005      	beq.n	80037ee <uart_stm32_configure+0x16e>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037e8:	ea43 0308 	orr.w	r3, r3, r8
 80037ec:	6023      	str	r3, [r4, #0]
	return LL_USART_GetStopBitsLength(config->usart);
 80037ee:	6843      	ldr	r3, [r0, #4]
 80037f0:	681c      	ldr	r4, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(const USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80037f2:	6863      	ldr	r3, [r4, #4]
 80037f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80037f8:	459e      	cmp	lr, r3
 80037fa:	d005      	beq.n	8003808 <uart_stm32_configure+0x188>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80037fc:	6863      	ldr	r3, [r4, #4]
 80037fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003802:	ea43 030e 	orr.w	r3, r3, lr
 8003806:	6063      	str	r3, [r4, #4]
	return LL_USART_GetDataWidth(config->usart);
 8003808:	6843      	ldr	r3, [r0, #4]
 800380a:	681c      	ldr	r4, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <uart_stm32_configure+0x1a0>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800381c:	4313      	orrs	r3, r2
 800381e:	6023      	str	r3, [r4, #0]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8003820:	6843      	ldr	r3, [r0, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(const USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8003824:	6893      	ldr	r3, [r2, #8]
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800382a:	4563      	cmp	r3, ip
 800382c:	d005      	beq.n	800383a <uart_stm32_configure+0x1ba>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800382e:	6893      	ldr	r3, [r2, #8]
 8003830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003834:	ea43 030c 	orr.w	r3, r3, ip
 8003838:	6093      	str	r3, [r2, #8]
	return LL_USART_IsEnabledDEMode(config->usart);
 800383a:	6843      	ldr	r3, [r0, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledDEMode(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM)) ? 1UL : 0UL);
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	0452      	lsls	r2, r2, #17
 8003842:	d419      	bmi.n	8003878 <uart_stm32_configure+0x1f8>
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

#if HAS_DRIVER_ENABLE
	if (driver_enable != uart_stm32_get_driver_enable(dev)) {
 8003844:	b119      	cbz	r1, 800384e <uart_stm32_configure+0x1ce>
  SET_BIT(USARTx->CR3, USART_CR3_DEM);
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
 800384c:	609a      	str	r2, [r3, #8]
		uart_stm32_set_driver_enable(dev, driver_enable);
	}
#endif

	if (cfg->baudrate != data->baud_rate) {
 800384e:	6829      	ldr	r1, [r5, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4299      	cmp	r1, r3
 8003854:	d003      	beq.n	800385e <uart_stm32_configure+0x1de>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8003856:	f017 fc17 	bl	801b088 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 800385a:	682b      	ldr	r3, [r5, #0]
 800385c:	603b      	str	r3, [r7, #0]
	}

	LL_USART_Enable(config->usart);
 800385e:	6832      	ldr	r2, [r6, #0]
	return 0;
 8003860:	2000      	movs	r0, #0
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003862:	6813      	ldr	r3, [r2, #0]
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6013      	str	r3, [r2, #0]
};
 800386a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return LL_USART_DATAWIDTH_8B;
 800386e:	461a      	mov	r2, r3
		return LL_USART_HWCONTROL_RTS_CTS;
 8003870:	f44f 7c40 	mov.w	ip, #768	; 0x300
	bool driver_enable = cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485;
 8003874:	4619      	mov	r1, r3
 8003876:	e730      	b.n	80036da <uart_stm32_configure+0x5a>
	if (driver_enable != uart_stm32_get_driver_enable(dev)) {
 8003878:	2900      	cmp	r1, #0
 800387a:	d1e8      	bne.n	800384e <uart_stm32_configure+0x1ce>
  CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003882:	e7e3      	b.n	800384c <uart_stm32_configure+0x1cc>
 8003884:	08029b54 	.word	0x08029b54
 8003888:	40011000 	.word	0x40011000
 800388c:	58000c00 	.word	0x58000c00

08003890 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8003890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	4606      	mov	r6, r0
	const struct uart_stm32_config *config = dev->config;
 8003898:	6844      	ldr	r4, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800389a:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
 800389e:	af00      	add	r7, sp, #0
	data->clock = clk;
 80038a0:	4893      	ldr	r0, [pc, #588]	; (8003af0 <uart_stm32_init+0x260>)
 80038a2:	f8c8 0004 	str.w	r0, [r8, #4]
 80038a6:	f024 fbad 	bl	8028004 <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 80038aa:	4603      	mov	r3, r0
 80038ac:	b968      	cbnz	r0, 80038ca <uart_stm32_init+0x3a>
		LOG_ERR("clock control device not ready");
 80038ae:	4a91      	ldr	r2, [pc, #580]	; (8003af4 <uart_stm32_init+0x264>)
	}

	LL_USART_Disable(config->usart);

	if (!device_is_ready(data->reset.dev)) {
		LOG_ERR("reset controller not ready");
 80038b0:	617a      	str	r2, [r7, #20]
 80038b2:	2202      	movs	r2, #2
 80038b4:	613a      	str	r2, [r7, #16]
 80038b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80038ba:	f107 0210 	add.w	r2, r7, #16
 80038be:	488e      	ldr	r0, [pc, #568]	; (8003af8 <uart_stm32_init+0x268>)
		return -ENODEV;
 80038c0:	f06f 0512 	mvn.w	r5, #18
 80038c4:	f7fe f988 	bl	8001bd8 <z_impl_z_log_msg_static_create>
		return -ENODEV;
 80038c8:	e013      	b.n	80038f2 <uart_stm32_init+0x62>
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 80038ca:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80038ce:	6861      	ldr	r1, [r4, #4]
 80038d0:	6883      	ldr	r3, [r0, #8]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4798      	blx	r3
	if (err != 0) {
 80038d6:	4605      	mov	r5, r0
 80038d8:	b180      	cbz	r0, 80038fc <uart_stm32_init+0x6c>
		LOG_ERR("Could not enable (LP)UART clock");
 80038da:	4b88      	ldr	r3, [pc, #544]	; (8003afc <uart_stm32_init+0x26c>)
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	2302      	movs	r3, #2
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	2300      	movs	r3, #0
 80038e4:	f107 0210 	add.w	r2, r7, #16
 80038e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80038ec:	4882      	ldr	r0, [pc, #520]	; (8003af8 <uart_stm32_init+0x268>)
 80038ee:	f7fe f973 	bl	8001bd8 <z_impl_z_log_msg_static_create>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 80038f2:	4628      	mov	r0, r5
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 80038fc:	4601      	mov	r1, r0
 80038fe:	463a      	mov	r2, r7
 8003900:	69e0      	ldr	r0, [r4, #28]
 8003902:	f017 fabc 	bl	801ae7e <pinctrl_lookup_state>
	if (ret < 0) {
 8003906:	2800      	cmp	r0, #0
 8003908:	da01      	bge.n	800390e <uart_stm32_init+0x7e>
 800390a:	4605      	mov	r5, r0
 800390c:	e7f1      	b.n	80038f2 <uart_stm32_init+0x62>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 800390e:	683b      	ldr	r3, [r7, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8003910:	462a      	mov	r2, r5
 8003912:	7919      	ldrb	r1, [r3, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	f7ff fe5d 	bl	80035d4 <pinctrl_configure_pins>
	if (err < 0) {
 800391a:	2800      	cmp	r0, #0
 800391c:	dbf5      	blt.n	800390a <uart_stm32_init+0x7a>
	LL_USART_Disable(config->usart);
 800391e:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8003920:	6813      	ldr	r3, [r2, #0]
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	6013      	str	r3, [r2, #0]
	if (!device_is_ready(data->reset.dev)) {
 8003928:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800392c:	f024 fb6a 	bl	8028004 <z_device_is_ready>
 8003930:	4603      	mov	r3, r0
 8003932:	b908      	cbnz	r0, 8003938 <uart_stm32_init+0xa8>
		LOG_ERR("reset controller not ready");
 8003934:	4a72      	ldr	r2, [pc, #456]	; (8003b00 <uart_stm32_init+0x270>)
 8003936:	e7bb      	b.n	80038b0 <uart_stm32_init+0x20>
 *
 * @return a value from reset_line_toggle()
 */
static inline int reset_line_toggle_dt(const struct reset_dt_spec *spec)
{
	return reset_line_toggle(spec->dev, spec->id);
 8003938:	e9d8 0102 	ldrd	r0, r1, [r8, #8]
	if (api->line_toggle == NULL) {
 800393c:	6883      	ldr	r3, [r0, #8]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	b103      	cbz	r3, 8003944 <uart_stm32_init+0xb4>
	return api->line_toggle(dev, id);
 8003942:	4798      	blx	r3
	LL_USART_SetTransferDirection(config->usart,
 8003944:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800394a:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	e842 3900 	strex	r9, r3, [r2]
 8003952:	f1b9 0f00 	cmp.w	r9, #0
 8003956:	d1f6      	bne.n	8003946 <uart_stm32_init+0xb6>
	if (config->parity == 2) {
 8003958:	6923      	ldr	r3, [r4, #16]
 800395a:	2b02      	cmp	r3, #2
 800395c:	f000 8093 	beq.w	8003a86 <uart_stm32_init+0x1f6>
	} else if (config->parity == 1) {
 8003960:	2b01      	cmp	r3, #1
 8003962:	f000 8095 	beq.w	8003a90 <uart_stm32_init+0x200>
		if (config->parity != 0) {
 8003966:	2b00      	cmp	r3, #0
 8003968:	d17c      	bne.n	8003a64 <uart_stm32_init+0x1d4>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800396a:	2300      	movs	r3, #0
	LL_USART_ConfigCharacter(config->usart,
 800396c:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800396e:	ea43 0309 	orr.w	r3, r3, r9
 8003972:	680a      	ldr	r2, [r1, #0]
 8003974:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003978:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800397c:	431a      	orrs	r2, r3
 800397e:	600a      	str	r2, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003980:	684b      	ldr	r3, [r1, #4]
 8003982:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003986:	604b      	str	r3, [r1, #4]
	if (config->hw_flow_control) {
 8003988:	7b23      	ldrb	r3, [r4, #12]
 800398a:	b12b      	cbz	r3, 8003998 <uart_stm32_init+0x108>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 800398c:	6873      	ldr	r3, [r6, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003990:	6893      	ldr	r3, [r2, #8]
 8003992:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003996:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8003998:	f8d8 1000 	ldr.w	r1, [r8]
 800399c:	4630      	mov	r0, r6
 800399e:	f017 fb73 	bl	801b088 <uart_stm32_set_baudrate>
	if (config->single_wire) {
 80039a2:	7d23      	ldrb	r3, [r4, #20]
 80039a4:	b123      	cbz	r3, 80039b0 <uart_stm32_init+0x120>
		LL_USART_EnableHalfDuplex(config->usart);
 80039a6:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80039a8:	6893      	ldr	r3, [r2, #8]
 80039aa:	f043 0308 	orr.w	r3, r3, #8
 80039ae:	6093      	str	r3, [r2, #8]
	if (config->tx_rx_swap) {
 80039b0:	7d63      	ldrb	r3, [r4, #21]
 80039b2:	b123      	cbz	r3, 80039be <uart_stm32_init+0x12e>
		LL_USART_SetTXRXSwap(config->usart, LL_USART_TXRX_SWAPPED);
 80039b4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 80039b6:	6853      	ldr	r3, [r2, #4]
 80039b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039bc:	6053      	str	r3, [r2, #4]
	if (config->rx_invert) {
 80039be:	7da3      	ldrb	r3, [r4, #22]
 80039c0:	b123      	cbz	r3, 80039cc <uart_stm32_init+0x13c>
		LL_USART_SetRXPinLevel(config->usart, LL_USART_RXPIN_LEVEL_INVERTED);
 80039c2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 80039c4:	6853      	ldr	r3, [r2, #4]
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ca:	6053      	str	r3, [r2, #4]
	if (config->tx_invert) {
 80039cc:	7de3      	ldrb	r3, [r4, #23]
 80039ce:	b123      	cbz	r3, 80039da <uart_stm32_init+0x14a>
		LL_USART_SetTXPinLevel(config->usart, LL_USART_TXPIN_LEVEL_INVERTED);
 80039d0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 80039d2:	6853      	ldr	r3, [r2, #4]
 80039d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d8:	6053      	str	r3, [r2, #4]
	if (config->de_enable) {
 80039da:	7e22      	ldrb	r2, [r4, #24]
		if (!IS_UART_DRIVER_ENABLE_INSTANCE(config->usart)) {
 80039dc:	6823      	ldr	r3, [r4, #0]
	if (config->de_enable) {
 80039de:	2a00      	cmp	r2, #0
 80039e0:	d078      	beq.n	8003ad4 <uart_stm32_init+0x244>
		if (!IS_UART_DRIVER_ENABLE_INSTANCE(config->usart)) {
 80039e2:	4a48      	ldr	r2, [pc, #288]	; (8003b04 <uart_stm32_init+0x274>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d058      	beq.n	8003a9a <uart_stm32_init+0x20a>
 80039e8:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d054      	beq.n	8003a9a <uart_stm32_init+0x20a>
 80039f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d050      	beq.n	8003a9a <uart_stm32_init+0x20a>
 80039f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d04c      	beq.n	8003a9a <uart_stm32_init+0x20a>
 8003a00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d048      	beq.n	8003a9a <uart_stm32_init+0x20a>
 8003a08:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d044      	beq.n	8003a9a <uart_stm32_init+0x20a>
 8003a10:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d040      	beq.n	8003a9a <uart_stm32_init+0x20a>
 8003a18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d03c      	beq.n	8003a9a <uart_stm32_init+0x20a>
 8003a20:	f502 421c 	add.w	r2, r2, #39936	; 0x9c00
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d038      	beq.n	8003a9a <uart_stm32_init+0x20a>
 8003a28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d034      	beq.n	8003a9a <uart_stm32_init+0x20a>
 8003a30:	4a35      	ldr	r2, [pc, #212]	; (8003b08 <uart_stm32_init+0x278>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d031      	beq.n	8003a9a <uart_stm32_init+0x20a>
			LOG_ERR("%s does not support driver enable", dev->name);
 8003a36:	466c      	mov	r4, sp
 8003a38:	b088      	sub	sp, #32
 8003a3a:	6833      	ldr	r3, [r6, #0]
 8003a3c:	466a      	mov	r2, sp
 8003a3e:	4933      	ldr	r1, [pc, #204]	; (8003b0c <uart_stm32_init+0x27c>)
 8003a40:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8003a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a48:	8393      	strh	r3, [r2, #28]
 8003a4a:	4b31      	ldr	r3, [pc, #196]	; (8003b10 <uart_stm32_init+0x280>)
 8003a4c:	f842 3f10 	str.w	r3, [r2, #16]!
 8003a50:	2300      	movs	r3, #0
 8003a52:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 8003a56:	4828      	ldr	r0, [pc, #160]	; (8003af8 <uart_stm32_init+0x268>)
			return -EINVAL;
 8003a58:	f06f 0515 	mvn.w	r5, #21
 8003a5c:	f7fe f8bc 	bl	8001bd8 <z_impl_z_log_msg_static_create>
 8003a60:	46a5      	mov	sp, r4
 8003a62:	e746      	b.n	80038f2 <uart_stm32_init+0x62>
			LOG_WRN("Invalid parity setting '%d'."
 8003a64:	46ea      	mov	sl, sp
 8003a66:	b088      	sub	sp, #32
 8003a68:	466a      	mov	r2, sp
 8003a6a:	492a      	ldr	r1, [pc, #168]	; (8003b14 <uart_stm32_init+0x284>)
 8003a6c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8003a70:	2303      	movs	r3, #3
 8003a72:	f842 3f10 	str.w	r3, [r2, #16]!
 8003a76:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	481e      	ldr	r0, [pc, #120]	; (8003af8 <uart_stm32_init+0x268>)
 8003a7e:	f7fe f8ab 	bl	8001bd8 <z_impl_z_log_msg_static_create>
 8003a82:	46d5      	mov	sp, sl
 8003a84:	e771      	b.n	800396a <uart_stm32_init+0xda>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8003a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8003a8a:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8003a8e:	e76d      	b.n	800396c <uart_stm32_init+0xdc>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8003a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8003a94:	f44f 69c0 	mov.w	r9, #1536	; 0x600
 8003a98:	e768      	b.n	800396c <uart_stm32_init+0xdc>
		LL_USART_EnableDEMode(config->usart);
 8003a9a:	6873      	ldr	r3, [r6, #4]
 8003a9c:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DEM);
 8003a9e:	6893      	ldr	r3, [r2, #8]
 8003aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa4:	6093      	str	r3, [r2, #8]
		LL_USART_SetDEAssertionTime(config->usart, config->de_assert_time);
 8003aa6:	6822      	ldr	r2, [r4, #0]
 8003aa8:	7e61      	ldrb	r1, [r4, #25]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
 8003aaa:	6813      	ldr	r3, [r2, #0]
 8003aac:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 8003ab0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003ab4:	6013      	str	r3, [r2, #0]
		LL_USART_SetDEDeassertionTime(config->usart, config->de_deassert_time);
 8003ab6:	6822      	ldr	r2, [r4, #0]
 8003ab8:	7ea1      	ldrb	r1, [r4, #26]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ac0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003ac4:	6013      	str	r3, [r2, #0]
		if (config->de_invert) {
 8003ac6:	7ee3      	ldrb	r3, [r4, #27]
 8003ac8:	b123      	cbz	r3, 8003ad4 <uart_stm32_init+0x244>
			LL_USART_SetDESignalPolarity(config->usart, LL_USART_DE_POLARITY_LOW);
 8003aca:	6822      	ldr	r2, [r4, #0]
  *         @arg @ref LL_USART_DE_POLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
 8003acc:	6893      	ldr	r3, [r2, #8]
 8003ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad2:	6093      	str	r3, [r2, #8]
	LL_USART_Enable(config->usart);
 8003ad4:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003ad6:	6813      	ldr	r3, [r2, #0]
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	6013      	str	r3, [r2, #0]
	while (!(LL_USART_IsActiveFlag_TEACK(config->usart))) {
 8003ade:	6823      	ldr	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	0291      	lsls	r1, r2, #10
 8003ae4:	d5fc      	bpl.n	8003ae0 <uart_stm32_init+0x250>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	0252      	lsls	r2, r2, #9
 8003aea:	d5fc      	bpl.n	8003ae6 <uart_stm32_init+0x256>
 8003aec:	e701      	b.n	80038f2 <uart_stm32_init+0x62>
 8003aee:	bf00      	nop
 8003af0:	08028384 	.word	0x08028384
 8003af4:	0802a8dd 	.word	0x0802a8dd
 8003af8:	08028a5c 	.word	0x08028a5c
 8003afc:	0802a8fc 	.word	0x0802a8fc
 8003b00:	0802a91c 	.word	0x0802a91c
 8003b04:	40011000 	.word	0x40011000
 8003b08:	58000c00 	.word	0x58000c00
 8003b0c:	0802a969 	.word	0x0802a969
 8003b10:	01000003 	.word	0x01000003
 8003b14:	0802a937 	.word	0x0802a937

08003b18 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8003b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b1c:	b087      	sub	sp, #28
 8003b1e:	af00      	add	r7, sp, #0
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8003b20:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8003b22:	6845      	ldr	r5, [r0, #4]
 8003b24:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8003c80 <spi_stm32_init+0x168>
 8003b28:	4640      	mov	r0, r8
 8003b2a:	f024 fa6b 	bl	8028004 <z_device_is_ready>
	int err;

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8003b2e:	4603      	mov	r3, r0
 8003b30:	b988      	cbnz	r0, 8003b56 <spi_stm32_init+0x3e>
		LOG_ERR("clock control device not ready");
 8003b32:	4a54      	ldr	r2, [pc, #336]	; (8003c84 <spi_stm32_init+0x16c>)
 8003b34:	617a      	str	r2, [r7, #20]
 8003b36:	2202      	movs	r2, #2
 8003b38:	613a      	str	r2, [r7, #16]
 8003b3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003b3e:	f107 0210 	add.w	r2, r7, #16
 8003b42:	4851      	ldr	r0, [pc, #324]	; (8003c88 <spi_stm32_init+0x170>)
 8003b44:	f7fe f848 	bl	8001bd8 <z_impl_z_log_msg_static_create>
		return -ENODEV;
 8003b48:	f06f 0412 	mvn.w	r4, #18
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	const struct clock_control_driver_api *api =
 8003b56:	f8d8 9008 	ldr.w	r9, [r8, #8]
	return api->on(dev, sys);
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	68e9      	ldr	r1, [r5, #12]
 8003b5e:	f8d9 3000 	ldr.w	r3, [r9]
 8003b62:	4798      	blx	r3
	if (err < 0) {
 8003b64:	1e04      	subs	r4, r0, #0
 8003b66:	da0c      	bge.n	8003b82 <spi_stm32_init+0x6a>
		LOG_ERR("Could not enable SPI clock");
 8003b68:	4b48      	ldr	r3, [pc, #288]	; (8003c8c <spi_stm32_init+0x174>)
			LOG_ERR("Could not select SPI domain clock");
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	2300      	movs	r3, #0
 8003b72:	f107 0210 	add.w	r2, r7, #16
 8003b76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003b7a:	4843      	ldr	r0, [pc, #268]	; (8003c88 <spi_stm32_init+0x170>)
 8003b7c:	f7fe f82c 	bl	8001bd8 <z_impl_z_log_msg_static_create>
			return err;
 8003b80:	e7e4      	b.n	8003b4c <spi_stm32_init+0x34>
	if (IS_ENABLED(STM32_SPI_DOMAIN_CLOCK_SUPPORT) && (cfg->pclk_len > 1)) {
 8003b82:	68ab      	ldr	r3, [r5, #8]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d90e      	bls.n	8003ba6 <spi_stm32_init+0x8e>
					      (clock_control_subsys_t) &cfg->pclken[1],
 8003b88:	68e9      	ldr	r1, [r5, #12]
					  void *data)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->configure == NULL) {
 8003b8a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8003b8e:	3108      	adds	r1, #8
 8003b90:	b133      	cbz	r3, 8003ba0 <spi_stm32_init+0x88>
		return -ENOSYS;
	}

	return api->configure(dev, sys, data);
 8003b92:	2200      	movs	r2, #0
 8003b94:	4640      	mov	r0, r8
 8003b96:	4798      	blx	r3
		if (err < 0) {
 8003b98:	1e04      	subs	r4, r0, #0
 8003b9a:	da04      	bge.n	8003ba6 <spi_stm32_init+0x8e>
			LOG_ERR("Could not select SPI domain clock");
 8003b9c:	4b3c      	ldr	r3, [pc, #240]	; (8003c90 <spi_stm32_init+0x178>)
 8003b9e:	e7e4      	b.n	8003b6a <spi_stm32_init+0x52>
		return -ENOSYS;
 8003ba0:	f06f 0457 	mvn.w	r4, #87	; 0x57
 8003ba4:	e7fa      	b.n	8003b9c <spi_stm32_init+0x84>
	ret = pinctrl_lookup_state(config, id, &state);
 8003ba6:	463a      	mov	r2, r7
 8003ba8:	2100      	movs	r1, #0
 8003baa:	6868      	ldr	r0, [r5, #4]
 8003bac:	f017 f967 	bl	801ae7e <pinctrl_lookup_state>
	if (ret < 0) {
 8003bb0:	1e04      	subs	r4, r0, #0
 8003bb2:	db07      	blt.n	8003bc4 <spi_stm32_init+0xac>
	return pinctrl_apply_state_direct(config, state);
 8003bb4:	683b      	ldr	r3, [r7, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	7919      	ldrb	r1, [r3, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	f7ff fd0a 	bl	80035d4 <pinctrl_configure_pins>
		if (err < 0) {
 8003bc0:	1e04      	subs	r4, r0, #0
 8003bc2:	da10      	bge.n	8003be6 <spi_stm32_init+0xce>
			LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8003bc4:	466d      	mov	r5, sp
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	466a      	mov	r2, sp
 8003bca:	4b32      	ldr	r3, [pc, #200]	; (8003c94 <spi_stm32_init+0x17c>)
 8003bcc:	e9c2 3405 	strd	r3, r4, [r2, #20]
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	f842 3f10 	str.w	r3, [r2, #16]!
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8003bdc:	482a      	ldr	r0, [pc, #168]	; (8003c88 <spi_stm32_init+0x170>)
 8003bde:	f7fd fffb 	bl	8001bd8 <z_impl_z_log_msg_static_create>
 8003be2:	46ad      	mov	sp, r5
			return err;
 8003be4:	e7b2      	b.n	8003b4c <spi_stm32_init+0x34>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8003be6:	68b5      	ldr	r5, [r6, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003be8:	f04f 0801 	mov.w	r8, #1
 8003bec:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003bf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bf4:	429d      	cmp	r5, r3
 8003bf6:	d304      	bcc.n	8003c02 <spi_stm32_init+0xea>
	spi_context_unlock_unconditionally(&data->ctx);
 8003bf8:	4630      	mov	r0, r6
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8003bfa:	2400      	movs	r4, #0
 8003bfc:	f017 fabe 	bl	801b17c <spi_context_unlock_unconditionally>
	return 0;
 8003c00:	e7a4      	b.n	8003b4c <spi_stm32_init+0x34>
		if (!device_is_ready(cs_gpio->port)) {
 8003c02:	6828      	ldr	r0, [r5, #0]
 8003c04:	f024 f9fe 	bl	8028004 <z_device_is_ready>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	b9b0      	cbnz	r0, 8003c3a <spi_stm32_init+0x122>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 8003c0c:	682a      	ldr	r2, [r5, #0]
 8003c0e:	466c      	mov	r4, sp
 8003c10:	b08a      	sub	sp, #40	; 0x28
 8003c12:	7929      	ldrb	r1, [r5, #4]
 8003c14:	6810      	ldr	r0, [r2, #0]
 8003c16:	466a      	mov	r2, sp
 8003c18:	61d1      	str	r1, [r2, #28]
 8003c1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c1e:	4d1e      	ldr	r5, [pc, #120]	; (8003c98 <spi_stm32_init+0x180>)
 8003c20:	8411      	strh	r1, [r2, #32]
 8003c22:	491e      	ldr	r1, [pc, #120]	; (8003c9c <spi_stm32_init+0x184>)
 8003c24:	e9c2 5005 	strd	r5, r0, [r2, #20]
 8003c28:	f842 1f10 	str.w	r1, [r2, #16]!
 8003c2c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 8003c30:	4815      	ldr	r0, [pc, #84]	; (8003c88 <spi_stm32_init+0x170>)
 8003c32:	f7fd ffd1 	bl	8001bd8 <z_impl_z_log_msg_static_create>
 8003c36:	46a5      	mov	sp, r4
	if (err < 0) {
 8003c38:	e786      	b.n	8003b48 <spi_stm32_init+0x30>
	return gpio_pin_configure(spec->port,
 8003c3a:	6828      	ldr	r0, [r5, #0]
				  spec->pin,
 8003c3c:	7929      	ldrb	r1, [r5, #4]
				  spec->dt_flags | extra_flags);
 8003c3e:	88eb      	ldrh	r3, [r5, #6]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8003c40:	07da      	lsls	r2, r3, #31
	struct gpio_driver_data *data =
 8003c42:	f8d0 c010 	ldr.w	ip, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003c46:	fa08 fe01 	lsl.w	lr, r8, r1
	const struct gpio_driver_api *api =
 8003c4a:	f8d0 9008 	ldr.w	r9, [r0, #8]
	return gpio_pin_configure(spec->port,
 8003c4e:	bf54      	ite	pl
 8003c50:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8003c54:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003c58:	f8dc 4000 	ldr.w	r4, [ip]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8003c5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8003c60:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003c62:	bf4c      	ite	mi
 8003c64:	ea44 040e 	orrmi.w	r4, r4, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8003c68:	ea24 040e 	bicpl.w	r4, r4, lr
 8003c6c:	f8cc 4000 	str.w	r4, [ip]
	return api->pin_configure(port, pin, flags);
 8003c70:	f8d9 3000 	ldr.w	r3, [r9]
 8003c74:	4798      	blx	r3
		if (ret < 0) {
 8003c76:	1e04      	subs	r4, r0, #0
 8003c78:	f6ff af68 	blt.w	8003b4c <spi_stm32_init+0x34>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8003c7c:	3508      	adds	r5, #8
 8003c7e:	e7b5      	b.n	8003bec <spi_stm32_init+0xd4>
 8003c80:	08028384 	.word	0x08028384
 8003c84:	0802a8dd 	.word	0x0802a8dd
 8003c88:	08028a54 	.word	0x08028a54
 8003c8c:	0802a9b6 	.word	0x0802a9b6
 8003c90:	0802a9d1 	.word	0x0802a9d1
 8003c94:	0802a9f3 	.word	0x0802a9f3
 8003c98:	0802aa11 	.word	0x0802aa11
 8003c9c:	01000004 	.word	0x01000004

08003ca0 <spi_stm32_transceive>:
{
 8003ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca4:	b093      	sub	sp, #76	; 0x4c
 8003ca6:	4699      	mov	r9, r3
 8003ca8:	4682      	mov	sl, r0
 8003caa:	4688      	mov	r8, r1
 8003cac:	af00      	add	r7, sp, #0
	SPI_TypeDef *spi = cfg->spi;
 8003cae:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8003cb0:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8003cb2:	681e      	ldr	r6, [r3, #0]
	if (!tx_bufs && !rx_bufs) {
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	b912      	cbnz	r2, 8003cbe <spi_stm32_transceive+0x1e>
 8003cb8:	f1b9 0f00 	cmp.w	r9, #0
 8003cbc:	d037      	beq.n	8003d2e <spi_stm32_transceive+0x8e>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8003cbe:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003cc2:	049d      	lsls	r5, r3, #18
 8003cc4:	d438      	bmi.n	8003d38 <spi_stm32_transceive+0x98>
	return z_impl_k_sem_take(sem, timeout);
 8003cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295
 8003cce:	f104 0010 	add.w	r0, r4, #16
 8003cd2:	f015 fac3 	bl	801925c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8003cd6:	f8c4 8004 	str.w	r8, [r4, #4]
	const uint32_t scaler[] = {
 8003cda:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8003e18 <spi_stm32_transceive+0x178>
 8003cde:	f107 0528 	add.w	r5, r7, #40	; 0x28
	struct spi_stm32_data *data = dev->data;
 8003ce2:	f8da b010 	ldr.w	fp, [sl, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8003ce6:	f8da c004 	ldr.w	ip, [sl, #4]
	const uint32_t scaler[] = {
 8003cea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cf0:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8003cf4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 8003cf8:	f8db 2000 	ldr.w	r2, [fp]
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8003cfc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	if (spi_context_configured(&data->ctx, config)) {
 8003d00:	4590      	cmp	r8, r2
	SPI_TypeDef *spi = cfg->spi;
 8003d02:	f8dc 5000 	ldr.w	r5, [ip]
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8003d06:	f3c3 1145 	ubfx	r1, r3, #5, #6
	if (spi_context_configured(&data->ctx, config)) {
 8003d0a:	f000 80ec 	beq.w	8003ee6 <spi_stm32_transceive+0x246>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8003d0e:	2908      	cmp	r1, #8
 8003d10:	d019      	beq.n	8003d46 <spi_stm32_transceive+0xa6>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8003d12:	2910      	cmp	r1, #16
 8003d14:	d017      	beq.n	8003d46 <spi_stm32_transceive+0xa6>
		return -ENOTSUP;
 8003d16:	f06f 0985 	mvn.w	r9, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	889b      	ldrh	r3, [r3, #4]
 8003d1e:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8003d22:	d104      	bne.n	8003d2e <spi_stm32_transceive+0x8e>
		ctx->owner = NULL;
 8003d24:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 8003d26:	f104 0010 	add.w	r0, r4, #16
 8003d2a:	f015 fa73 	bl	8019214 <z_impl_k_sem_give>
}
 8003d2e:	4648      	mov	r0, r9
 8003d30:	374c      	adds	r7, #76	; 0x4c
 8003d32:	46bd      	mov	sp, r7
 8003d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8003d38:	69a3      	ldr	r3, [r4, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1c3      	bne.n	8003cc6 <spi_stm32_transceive+0x26>
		(k_sem_count_get(&ctx->lock) == 0) &&
 8003d3e:	6863      	ldr	r3, [r4, #4]
 8003d40:	4598      	cmp	r8, r3
 8003d42:	d1c0      	bne.n	8003cc6 <spi_stm32_transceive+0x26>
 8003d44:	e7c9      	b.n	8003cda <spi_stm32_transceive+0x3a>
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 8003d46:	0418      	lsls	r0, r3, #16
 8003d48:	d505      	bpl.n	8003d56 <spi_stm32_transceive+0xb6>
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 8003d4a:	68eb      	ldr	r3, [r5, #12]
 8003d4c:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8003d50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d54:	60eb      	str	r3, [r5, #12]
	const struct clock_control_driver_api *api =
 8003d56:	4831      	ldr	r0, [pc, #196]	; (8003e1c <spi_stm32_transceive+0x17c>)
	if (IS_ENABLED(STM32_SPI_DOMAIN_CLOCK_SUPPORT) && (cfg->pclk_len > 1)) {
 8003d58:	f8dc 2008 	ldr.w	r2, [ip, #8]
	if (api->get_rate == NULL) {
 8003d5c:	6883      	ldr	r3, [r0, #8]
 8003d5e:	2a01      	cmp	r2, #1
					   (clock_control_subsys_t) &cfg->pclken[1], &clock) < 0) {
 8003d60:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8003d64:	68db      	ldr	r3, [r3, #12]
	if (IS_ENABLED(STM32_SPI_DOMAIN_CLOCK_SUPPORT) && (cfg->pclk_len > 1)) {
 8003d66:	d937      	bls.n	8003dd8 <spi_stm32_transceive+0x138>
					   (clock_control_subsys_t) &cfg->pclken[1], &clock) < 0) {
 8003d68:	3108      	adds	r1, #8
 8003d6a:	b973      	cbnz	r3, 8003d8a <spi_stm32_transceive+0xea>
			LOG_ERR("Failed call clock_control_get_rate(pclk[1])");
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <spi_stm32_transceive+0x180>)
			LOG_ERR("Failed call clock_control_get_rate(pclk[0])");
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d70:	2302      	movs	r3, #2
 8003d72:	623b      	str	r3, [r7, #32]
 8003d74:	2300      	movs	r3, #0
 8003d76:	f107 0220 	add.w	r2, r7, #32
 8003d7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003d7e:	4829      	ldr	r0, [pc, #164]	; (8003e24 <spi_stm32_transceive+0x184>)
 8003d80:	f7fd ff2a 	bl	8001bd8 <z_impl_z_log_msg_static_create>
			return -EIO;
 8003d84:	f06f 0904 	mvn.w	r9, #4
	if (ret) {
 8003d88:	e7c7      	b.n	8003d1a <spi_stm32_transceive+0x7a>
	return api->get_rate(dev, sys, rate);
 8003d8a:	f107 020c 	add.w	r2, r7, #12
 8003d8e:	4798      	blx	r3
		if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8003d90:	2800      	cmp	r0, #0
 8003d92:	dbeb      	blt.n	8003d6c <spi_stm32_transceive+0xcc>
		uint32_t clk = clock >> br;
 8003d94:	68f9      	ldr	r1, [r7, #12]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8003d96:	2301      	movs	r3, #1
		if (clk <= config->frequency) {
 8003d98:	f8d8 0000 	ldr.w	r0, [r8]
		uint32_t clk = clock >> br;
 8003d9c:	fa21 f203 	lsr.w	r2, r1, r3
		if (clk <= config->frequency) {
 8003da0:	4282      	cmp	r2, r0
 8003da2:	d922      	bls.n	8003dea <spi_stm32_transceive+0x14a>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8003da4:	3301      	adds	r3, #1
 8003da6:	2b09      	cmp	r3, #9
 8003da8:	d1f8      	bne.n	8003d9c <spi_stm32_transceive+0xfc>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8003daa:	466d      	mov	r5, sp
 8003dac:	b08a      	sub	sp, #40	; 0x28
 8003dae:	466a      	mov	r2, sp
 8003db0:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <spi_stm32_transceive+0x188>)
 8003db2:	e9c2 3005 	strd	r3, r0, [r2, #20]
 8003db6:	084b      	lsrs	r3, r1, #1
 8003db8:	0a09      	lsrs	r1, r1, #8
 8003dba:	61d3      	str	r3, [r2, #28]
 8003dbc:	2305      	movs	r3, #5
 8003dbe:	6211      	str	r1, [r2, #32]
 8003dc0:	f842 3f10 	str.w	r3, [r2, #16]!
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8003dca:	4816      	ldr	r0, [pc, #88]	; (8003e24 <spi_stm32_transceive+0x184>)
		return -EINVAL;
 8003dcc:	f06f 0915 	mvn.w	r9, #21
 8003dd0:	f7fd ff02 	bl	8001bd8 <z_impl_z_log_msg_static_create>
 8003dd4:	46ad      	mov	sp, r5
	if (ret) {
 8003dd6:	e7a0      	b.n	8003d1a <spi_stm32_transceive+0x7a>
	if (api->get_rate == NULL) {
 8003dd8:	b90b      	cbnz	r3, 8003dde <spi_stm32_transceive+0x13e>
			LOG_ERR("Failed call clock_control_get_rate(pclk[0])");
 8003dda:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <spi_stm32_transceive+0x18c>)
 8003ddc:	e7c7      	b.n	8003d6e <spi_stm32_transceive+0xce>
	return api->get_rate(dev, sys, rate);
 8003dde:	f107 020c 	add.w	r2, r7, #12
 8003de2:	4798      	blx	r3
		if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8003de4:	2800      	cmp	r0, #0
 8003de6:	dad5      	bge.n	8003d94 <spi_stm32_transceive+0xf4>
 8003de8:	e7f7      	b.n	8003dda <spi_stm32_transceive+0x13a>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003dea:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8003dec:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003df8:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t Baudrate)
{
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR, Baudrate);
 8003dfa:	68aa      	ldr	r2, [r5, #8]
 8003dfc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003e00:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60ab      	str	r3, [r5, #8]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8003e08:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003e0c:	0799      	lsls	r1, r3, #30
 8003e0e:	d40f      	bmi.n	8003e30 <spi_stm32_transceive+0x190>
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPOL, ClockPolarity);
 8003e10:	68eb      	ldr	r3, [r5, #12]
 8003e12:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003e16:	e00e      	b.n	8003e36 <spi_stm32_transceive+0x196>
 8003e18:	08028a7c 	.word	0x08028a7c
 8003e1c:	08028384 	.word	0x08028384
 8003e20:	0802aa35 	.word	0x0802aa35
 8003e24:	08028a54 	.word	0x08028a54
 8003e28:	0802aa8d 	.word	0x0802aa8d
 8003e2c:	0802aa61 	.word	0x0802aa61
 8003e30:	68eb      	ldr	r3, [r5, #12]
 8003e32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e36:	60eb      	str	r3, [r5, #12]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8003e38:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003e3c:	f013 0f04 	tst.w	r3, #4
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPHA, ClockPhase);
 8003e40:	68eb      	ldr	r3, [r5, #12]
 8003e42:	bf14      	ite	ne
 8003e44:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8003e48:	f023 7380 	biceq.w	r3, r3, #16777216	; 0x1000000
 8003e4c:	60eb      	str	r3, [r5, #12]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR,  TransferDirection & SPI_CR1_HDDIR);
 8003e4e:	682b      	ldr	r3, [r5, #0]
 8003e50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e54:	602b      	str	r3, [r5, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_COMM, TransferDirection & SPI_CFG2_COMM);
 8003e56:	68eb      	ldr	r3, [r5, #12]
 8003e58:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8003e5c:	60eb      	str	r3, [r5, #12]
	if (config->operation & SPI_TRANSFER_LSB) {
 8003e5e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003e62:	f013 0f10 	tst.w	r3, #16
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_LSBFRST, BitOrder);
 8003e66:	68eb      	ldr	r3, [r5, #12]
 8003e68:	bf14      	ite	ne
 8003e6a:	f443 0300 	orrne.w	r3, r3, #8388608	; 0x800000
 8003e6e:	f423 0300 	biceq.w	r3, r3, #8388608	; 0x800000
 8003e72:	60eb      	str	r3, [r5, #12]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CFG1, SPI_CFG1_CRCEN);
 8003e74:	68ab      	ldr	r3, [r5, #8]
 8003e76:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003e7a:	60ab      	str	r3, [r5, #8]
	if (spi_cs_is_gpio(config) || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8003e7c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8003e80:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003e84:	2a00      	cmp	r2, #0
 8003e86:	f000 8106 	beq.w	8004096 <spi_stm32_transceive+0x3f6>
		if (SPI_OP_MODE_GET(config->operation) == SPI_OP_MODE_MASTER) {
 8003e8a:	07da      	lsls	r2, r3, #31
 8003e8c:	d406      	bmi.n	8003e9c <spi_stm32_transceive+0x1fc>
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 8003e8e:	68eb      	ldr	r3, [r5, #12]
			if (LL_SPI_GetNSSPolarity(spi) == LL_SPI_NSS_POLARITY_LOW)
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	d403      	bmi.n	8003e9c <spi_stm32_transceive+0x1fc>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e9a:	602b      	str	r3, [r5, #0]
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM | SPI_CFG2_SSOE, NSS);
 8003e9c:	68eb      	ldr	r3, [r5, #12]
 8003e9e:	f023 5310 	bic.w	r3, r3, #603979776	; 0x24000000
 8003ea2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ea6:	60eb      	str	r3, [r5, #12]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8003ea8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003eac:	f013 0f01 	tst.w	r3, #1
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_MASTER, Mode);
 8003eb0:	68eb      	ldr	r3, [r5, #12]
 8003eb2:	bf14      	ite	ne
 8003eb4:	f423 0380 	bicne.w	r3, r3, #4194304	; 0x400000
 8003eb8:	f443 0380 	orreq.w	r3, r3, #4194304	; 0x400000
 8003ebc:	60eb      	str	r3, [r5, #12]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8003ebe:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003ec2:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8003ec6:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_DSIZE, DataWidth);
 8003ec8:	68ab      	ldr	r3, [r5, #8]
 8003eca:	f023 031f 	bic.w	r3, r3, #31
 8003ece:	bf0c      	ite	eq
 8003ed0:	f043 0307 	orreq.w	r3, r3, #7
 8003ed4:	f043 030f 	orrne.w	r3, r3, #15
 8003ed8:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8003eda:	68ab      	ldr	r3, [r5, #8]
 8003edc:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8003ee0:	60ab      	str	r3, [r5, #8]
	data->ctx.config = config;
 8003ee2:	f8cb 8000 	str.w	r8, [fp]
	if (SPI_WORD_SIZE_GET(config->operation) == 8) {
 8003ee6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
		spi_context_buffers_setup(&data->ctx, tx_bufs, rx_bufs, 2);
 8003eea:	464a      	mov	r2, r9
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4620      	mov	r0, r4
	if (SPI_WORD_SIZE_GET(config->operation) == 8) {
 8003ef0:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8003ef4:	2b08      	cmp	r3, #8
		spi_context_buffers_setup(&data->ctx, tx_bufs, rx_bufs, 1);
 8003ef6:	bf0c      	ite	eq
 8003ef8:	2301      	moveq	r3, #1
		spi_context_buffers_setup(&data->ctx, tx_bufs, rx_bufs, 2);
 8003efa:	2302      	movne	r3, #2
 8003efc:	f017 f8fb 	bl	801b0f6 <spi_context_buffers_setup>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXP(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8003f00:	6973      	ldr	r3, [r6, #20]
 8003f02:	07dd      	lsls	r5, r3, #31
 8003f04:	f100 80d0 	bmi.w	80040a8 <spi_stm32_transceive+0x408>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003f08:	6833      	ldr	r3, [r6, #0]
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6033      	str	r3, [r6, #0]
	z_impl_k_busy_wait(usec_to_wait);
 8003f10:	2001      	movs	r0, #1
 8003f12:	f014 ff21 	bl	8018d58 <z_impl_k_busy_wait>
	spi_stm32_cs_control(dev, true);
 8003f16:	f8da 5010 	ldr.w	r5, [sl, #16]
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 8003f1a:	6828      	ldr	r0, [r5, #0]
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	f040 80c6 	bne.w	80040ae <spi_stm32_transceive+0x40e>
	uint16_t operation = data->ctx.config->operation;
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	889a      	ldrh	r2, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8003f26:	f012 0301 	ands.w	r3, r2, #1
 8003f2a:	f040 810c 	bne.w	8004146 <spi_stm32_transceive+0x4a6>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXP(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8003f2e:	6972      	ldr	r2, [r6, #20]
 8003f30:	0790      	lsls	r0, r2, #30
 8003f32:	d5fc      	bpl.n	8003f2e <spi_stm32_transceive+0x28e>
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_MASTER));
 8003f34:	68f2      	ldr	r2, [r6, #12]
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8003f36:	0251      	lsls	r1, r2, #9
 8003f38:	f100 80c6 	bmi.w	80040c8 <spi_stm32_transceive+0x428>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8003f3c:	6821      	ldr	r1, [r4, #0]
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 8003f3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003f40:	8889      	ldrh	r1, [r1, #4]
 8003f42:	f3c1 1145 	ubfx	r1, r1, #5, #6
 8003f46:	2908      	cmp	r1, #8
 8003f48:	f040 80ce 	bne.w	80040e8 <spi_stm32_transceive+0x448>
 8003f4c:	b112      	cbz	r2, 8003f54 <spi_stm32_transceive+0x2b4>
 8003f4e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003f50:	b101      	cbz	r1, 8003f54 <spi_stm32_transceive+0x2b4>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8003f52:	7813      	ldrb	r3, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8003f54:	b2db      	uxtb	r3, r3
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8003f56:	f886 3020 	strb.w	r3, [r6, #32]
	if (!ctx->tx_len) {
 8003f5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003f5c:	b1a3      	cbz	r3, 8003f88 <spi_stm32_transceive+0x2e8>
	ctx->tx_len -= len;
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f040 80b9 	bne.w	80040da <spi_stm32_transceive+0x43a>
		++ctx->current_tx;
 8003f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 8003f6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f70:	3b01      	subs	r3, #1
 8003f72:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8003f74:	2301      	movs	r3, #1
 8003f76:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8003f7a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8003f7e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8003f82:	f017 f8a2 	bl	801b0ca <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 8003f86:	6460      	str	r0, [r4, #68]	; 0x44
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8003f88:	6973      	ldr	r3, [r6, #20]
 8003f8a:	07dd      	lsls	r5, r3, #31
 8003f8c:	d5fc      	bpl.n	8003f88 <spi_stm32_transceive+0x2e8>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	8892      	ldrh	r2, [r2, #4]
 8003f92:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8003f96:	2a08      	cmp	r2, #8
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8003f98:	e9d4 3113 	ldrd	r3, r1, [r4, #76]	; 0x4c
 8003f9c:	f040 80be 	bne.w	800411c <spi_stm32_transceive+0x47c>
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8003fa0:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	b10b      	cbz	r3, 8003fac <spi_stm32_transceive+0x30c>
 8003fa8:	b101      	cbz	r1, 8003fac <spi_stm32_transceive+0x30c>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8003faa:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8003fac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003fae:	b1a3      	cbz	r3, 8003fda <spi_stm32_transceive+0x33a>
	ctx->rx_len -= len;
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f040 811e 	bne.w	80041f6 <spi_stm32_transceive+0x556>
		++ctx->current_rx;
 8003fba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
 8003fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003fcc:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8003fd0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8003fd4:	f017 f879 	bl	801b0ca <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 8003fd8:	64e0      	str	r0, [r4, #76]	; 0x4c
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8003fda:	6973      	ldr	r3, [r6, #20]
	if (sr & SPI_STM32_ERR_MSK) {
 8003fdc:	f413 7378 	ands.w	r3, r3, #992	; 0x3e0
 8003fe0:	f000 8118 	beq.w	8004214 <spi_stm32_transceive+0x574>
		LOG_ERR("%s: err=%d", __func__,
 8003fe4:	466d      	mov	r5, sp
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	466a      	mov	r2, sp
 8003fea:	4998      	ldr	r1, [pc, #608]	; (800424c <spi_stm32_transceive+0x5ac>)
 8003fec:	6151      	str	r1, [r2, #20]
 8003fee:	4998      	ldr	r1, [pc, #608]	; (8004250 <spi_stm32_transceive+0x5b0>)
 8003ff0:	e9c2 1306 	strd	r1, r3, [r2, #24]
 8003ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ff8:	8413      	strh	r3, [r2, #32]
 8003ffa:	4b96      	ldr	r3, [pc, #600]	; (8004254 <spi_stm32_transceive+0x5b4>)
 8003ffc:	f842 3f10 	str.w	r3, [r2, #16]!
 8004000:	2300      	movs	r3, #0
 8004002:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 8004006:	4894      	ldr	r0, [pc, #592]	; (8004258 <spi_stm32_transceive+0x5b8>)
 8004008:	f7fd fde6 	bl	8001bd8 <z_impl_z_log_msg_static_create>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 800400c:	6973      	ldr	r3, [r6, #20]
 800400e:	46ad      	mov	sp, r5
 8004010:	065a      	lsls	r2, r3, #25
 8004012:	d503      	bpl.n	800401c <spi_stm32_transceive+0x37c>
  SET_BIT(SPIx->IFCR, SPI_IFCR_OVRC);
 8004014:	69b3      	ldr	r3, [r6, #24]
 8004016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800401a:	61b3      	str	r3, [r6, #24]
		return -EIO;
 800401c:	f06f 0904 	mvn.w	r9, #4
	SPI_TypeDef *spi = cfg->spi;
 8004020:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004024:	f8da 8010 	ldr.w	r8, [sl, #16]
 8004028:	681d      	ldr	r5, [r3, #0]
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 800402a:	f8d8 3000 	ldr.w	r3, [r8]
 800402e:	b173      	cbz	r3, 800404e <spi_stm32_transceive+0x3ae>
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	b162      	cbz	r2, 800404e <spi_stm32_transceive+0x3ae>
			if (!force_off &&
 8004034:	8899      	ldrh	r1, [r3, #4]
 8004036:	f411 5680 	ands.w	r6, r1, #4096	; 0x1000
 800403a:	d108      	bne.n	800404e <spi_stm32_transceive+0x3ae>
			k_busy_wait(ctx->config->cs.delay);
 800403c:	6918      	ldr	r0, [r3, #16]
 800403e:	f014 fe8b 	bl	8018d58 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs.gpio, 0);
 8004042:	f8d8 0000 	ldr.w	r0, [r8]
 8004046:	4631      	mov	r1, r6
 8004048:	3008      	adds	r0, #8
 800404a:	f017 f883 	bl	801b154 <gpio_pin_set_dt.isra.0>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 800404e:	696b      	ldr	r3, [r5, #20]
 8004050:	07db      	lsls	r3, r3, #31
 8004052:	f100 80e9 	bmi.w	8004228 <spi_stm32_transceive+0x588>
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_MASTER));
 8004056:	68eb      	ldr	r3, [r5, #12]
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8004058:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
  return ((READ_BIT(SPIx->SR, SPI_SR_EOT) == (SPI_SR_EOT)) ? 1UL : 0UL);
 800405c:	696b      	ldr	r3, [r5, #20]
 800405e:	f040 80e6 	bne.w	800422e <spi_stm32_transceive+0x58e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8004062:	059e      	lsls	r6, r3, #22
 8004064:	d503      	bpl.n	800406e <spi_stm32_transceive+0x3ce>
  SET_BIT(SPIx->IFCR, SPI_IFCR_MODFC);
 8004066:	69ab      	ldr	r3, [r5, #24]
 8004068:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800406c:	61ab      	str	r3, [r5, #24]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_CSTART) == (SPI_CR1_CSTART)) ? 1UL : 0UL);
 800406e:	682b      	ldr	r3, [r5, #0]
 8004070:	0598      	lsls	r0, r3, #22
 8004072:	f100 80df 	bmi.w	8004234 <spi_stm32_transceive+0x594>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004076:	682b      	ldr	r3, [r5, #0]
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	602b      	str	r3, [r5, #0]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800407e:	682b      	ldr	r3, [r5, #0]
 8004080:	07da      	lsls	r2, r3, #31
 8004082:	d4fc      	bmi.n	800407e <spi_stm32_transceive+0x3de>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8004084:	696b      	ldr	r3, [r5, #20]
 8004086:	07db      	lsls	r3, r3, #31
 8004088:	f100 80dc 	bmi.w	8004244 <spi_stm32_transceive+0x5a4>
  SET_BIT(SPIx->IFCR, SPI_IFCR_SUSPC);
 800408c:	69ab      	ldr	r3, [r5, #24]
 800408e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004092:	61ab      	str	r3, [r5, #24]
	}
	LL_SPI_ClearFlag_SUSP(spi);
#else
	LL_SPI_Disable(spi);
#endif /* st_stm32h7_spi */
}
 8004094:	e641      	b.n	8003d1a <spi_stm32_transceive+0x7a>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8004096:	f013 0f01 	tst.w	r3, #1
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM | SPI_CFG2_SSOE, NSS);
 800409a:	68eb      	ldr	r3, [r5, #12]
 800409c:	f023 5310 	bic.w	r3, r3, #603979776	; 0x24000000
 80040a0:	bf08      	it	eq
 80040a2:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 80040a6:	e6fe      	b.n	8003ea6 <spi_stm32_transceive+0x206>
  return (*((__IO uint8_t *)&SPIx->RXDR));
 80040a8:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80040ac:	e728      	b.n	8003f00 <spi_stm32_transceive+0x260>
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 80040ae:	6883      	ldr	r3, [r0, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f43f af36 	beq.w	8003f22 <spi_stm32_transceive+0x282>
			gpio_pin_set_dt(&ctx->config->cs.gpio, 1);
 80040b6:	2101      	movs	r1, #1
 80040b8:	3008      	adds	r0, #8
 80040ba:	f017 f84b 	bl	801b154 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs.delay);
 80040be:	682b      	ldr	r3, [r5, #0]
 80040c0:	6918      	ldr	r0, [r3, #16]
 80040c2:	f014 fe49 	bl	8018d58 <z_impl_k_busy_wait>
}
 80040c6:	e72c      	b.n	8003f22 <spi_stm32_transceive+0x282>
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 80040c8:	6832      	ldr	r2, [r6, #0]
 80040ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ce:	6032      	str	r2, [r6, #0]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_CSTART) == (SPI_CR1_CSTART)) ? 1UL : 0UL);
 80040d0:	6832      	ldr	r2, [r6, #0]
 80040d2:	0592      	lsls	r2, r2, #22
 80040d4:	f53f af32 	bmi.w	8003f3c <spi_stm32_transceive+0x29c>
 80040d8:	e7fa      	b.n	80040d0 <spi_stm32_transceive+0x430>
	} else if (ctx->tx_buf) {
 80040da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f43f af53 	beq.w	8003f88 <spi_stm32_transceive+0x2e8>
		ctx->tx_buf += dfs * len;
 80040e2:	3301      	adds	r3, #1
 80040e4:	6463      	str	r3, [r4, #68]	; 0x44
 80040e6:	e74f      	b.n	8003f88 <spi_stm32_transceive+0x2e8>
	return !!(ctx->tx_buf && ctx->tx_len);
 80040e8:	b112      	cbz	r2, 80040f0 <spi_stm32_transceive+0x450>
 80040ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80040ec:	b101      	cbz	r1, 80040f0 <spi_stm32_transceive+0x450>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 80040ee:	8813      	ldrh	r3, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spitxdr = ((__IO uint16_t *)&SPIx->TXDR);
  *spitxdr = TxData;
 80040f0:	8433      	strh	r3, [r6, #32]
	if (!ctx->tx_len) {
 80040f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f43f af47 	beq.w	8003f88 <spi_stm32_transceive+0x2e8>
	ctx->tx_len -= len;
 80040fa:	3b01      	subs	r3, #1
 80040fc:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 80040fe:	b93b      	cbnz	r3, 8004110 <spi_stm32_transceive+0x470>
		++ctx->current_tx;
 8004100:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004102:	3308      	adds	r3, #8
 8004104:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 8004106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004108:	3b01      	subs	r3, #1
 800410a:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 800410c:	2302      	movs	r3, #2
 800410e:	e732      	b.n	8003f76 <spi_stm32_transceive+0x2d6>
	} else if (ctx->tx_buf) {
 8004110:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004112:	2b00      	cmp	r3, #0
 8004114:	f43f af38 	beq.w	8003f88 <spi_stm32_transceive+0x2e8>
		ctx->tx_buf += dfs * len;
 8004118:	3302      	adds	r3, #2
 800411a:	e7e3      	b.n	80040e4 <spi_stm32_transceive+0x444>
  return (*spirxdr);
 800411c:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800411e:	b292      	uxth	r2, r2
	return !!(ctx->rx_buf && ctx->rx_len);
 8004120:	b10b      	cbz	r3, 8004126 <spi_stm32_transceive+0x486>
 8004122:	b101      	cbz	r1, 8004126 <spi_stm32_transceive+0x486>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8004124:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8004126:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004128:	2b00      	cmp	r3, #0
 800412a:	f43f af56 	beq.w	8003fda <spi_stm32_transceive+0x33a>
	ctx->rx_len -= len;
 800412e:	3b01      	subs	r3, #1
 8004130:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
 8004132:	2b00      	cmp	r3, #0
 8004134:	d168      	bne.n	8004208 <spi_stm32_transceive+0x568>
		++ctx->current_rx;
 8004136:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004138:	3308      	adds	r3, #8
 800413a:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
 800413c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800413e:	3b01      	subs	r3, #1
 8004140:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
 8004142:	2302      	movs	r3, #2
 8004144:	e740      	b.n	8003fc8 <spi_stm32_transceive+0x328>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8004146:	6973      	ldr	r3, [r6, #20]
 8004148:	0798      	lsls	r0, r3, #30
 800414a:	d54f      	bpl.n	80041ec <spi_stm32_transceive+0x54c>
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800414c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800414e:	2b00      	cmp	r3, #0
 8004150:	d04c      	beq.n	80041ec <spi_stm32_transceive+0x54c>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004152:	f3c2 1245 	ubfx	r2, r2, #5, #6
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8004156:	6c63      	ldr	r3, [r4, #68]	; 0x44
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004158:	2a08      	cmp	r2, #8
 800415a:	d132      	bne.n	80041c2 <spi_stm32_transceive+0x522>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800415c:	781b      	ldrb	r3, [r3, #0]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 800415e:	f886 3020 	strb.w	r3, [r6, #32]
	if (!ctx->tx_len) {
 8004162:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004164:	b193      	cbz	r3, 800418c <spi_stm32_transceive+0x4ec>
	ctx->tx_len -= len;
 8004166:	3b01      	subs	r3, #1
 8004168:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 800416a:	bb23      	cbnz	r3, 80041b6 <spi_stm32_transceive+0x516>
		++ctx->current_tx;
 800416c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800416e:	3308      	adds	r3, #8
 8004170:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 8004172:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004174:	3b01      	subs	r3, #1
 8004176:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8004178:	2301      	movs	r3, #1
 800417a:	f104 0248 	add.w	r2, r4, #72	; 0x48
 800417e:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8004182:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8004186:	f016 ffa0 	bl	801b0ca <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 800418a:	6460      	str	r0, [r4, #68]	; 0x44
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 800418c:	6973      	ldr	r3, [r6, #20]
 800418e:	07d9      	lsls	r1, r3, #31
 8004190:	f57f af23 	bpl.w	8003fda <spi_stm32_transceive+0x33a>
	return !!(ctx->rx_buf && ctx->rx_len);
 8004194:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004196:	2b00      	cmp	r3, #0
 8004198:	f43f af1f 	beq.w	8003fda <spi_stm32_transceive+0x33a>
 800419c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800419e:	2a00      	cmp	r2, #0
 80041a0:	f43f af1b 	beq.w	8003fda <spi_stm32_transceive+0x33a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80041a4:	6822      	ldr	r2, [r4, #0]
 80041a6:	8892      	ldrh	r2, [r2, #4]
 80041a8:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80041ac:	2a08      	cmp	r2, #8
 80041ae:	d129      	bne.n	8004204 <spi_stm32_transceive+0x564>
  return (*((__IO uint8_t *)&SPIx->RXDR));
 80041b0:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 80041b4:	e6f9      	b.n	8003faa <spi_stm32_transceive+0x30a>
	} else if (ctx->tx_buf) {
 80041b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0e7      	beq.n	800418c <spi_stm32_transceive+0x4ec>
		ctx->tx_buf += dfs * len;
 80041bc:	3301      	adds	r3, #1
 80041be:	6463      	str	r3, [r4, #68]	; 0x44
 80041c0:	e7e4      	b.n	800418c <spi_stm32_transceive+0x4ec>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 80041c2:	881b      	ldrh	r3, [r3, #0]
  *spitxdr = TxData;
 80041c4:	8433      	strh	r3, [r6, #32]
	if (!ctx->tx_len) {
 80041c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0df      	beq.n	800418c <spi_stm32_transceive+0x4ec>
	ctx->tx_len -= len;
 80041cc:	3b01      	subs	r3, #1
 80041ce:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 80041d0:	b93b      	cbnz	r3, 80041e2 <spi_stm32_transceive+0x542>
		++ctx->current_tx;
 80041d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041d4:	3308      	adds	r3, #8
 80041d6:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 80041d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041da:	3b01      	subs	r3, #1
 80041dc:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 80041de:	2302      	movs	r3, #2
 80041e0:	e7cb      	b.n	800417a <spi_stm32_transceive+0x4da>
	} else if (ctx->tx_buf) {
 80041e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0d1      	beq.n	800418c <spi_stm32_transceive+0x4ec>
		ctx->tx_buf += dfs * len;
 80041e8:	3302      	adds	r3, #2
 80041ea:	e7e8      	b.n	80041be <spi_stm32_transceive+0x51e>
  CLEAR_BIT(SPIx->IER, SPI_IER_TXPIE);
 80041ec:	6933      	ldr	r3, [r6, #16]
 80041ee:	f023 0302 	bic.w	r3, r3, #2
 80041f2:	6133      	str	r3, [r6, #16]
}
 80041f4:	e7ca      	b.n	800418c <spi_stm32_transceive+0x4ec>
	} else if (ctx->rx_buf) {
 80041f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f43f aeee 	beq.w	8003fda <spi_stm32_transceive+0x33a>
		ctx->rx_buf += dfs * len;
 80041fe:	3301      	adds	r3, #1
 8004200:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004202:	e6ea      	b.n	8003fda <spi_stm32_transceive+0x33a>
  return (*spirxdr);
 8004204:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8004206:	e78d      	b.n	8004124 <spi_stm32_transceive+0x484>
	} else if (ctx->rx_buf) {
 8004208:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800420a:	2b00      	cmp	r3, #0
 800420c:	f43f aee5 	beq.w	8003fda <spi_stm32_transceive+0x33a>
		ctx->rx_buf += dfs * len;
 8004210:	3302      	adds	r3, #2
 8004212:	e7f5      	b.n	8004200 <spi_stm32_transceive+0x560>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8004214:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004216:	2b00      	cmp	r3, #0
 8004218:	f47f ae83 	bne.w	8003f22 <spi_stm32_transceive+0x282>
 800421c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800421e:	2b00      	cmp	r3, #0
 8004220:	f47f ae7f 	bne.w	8003f22 <spi_stm32_transceive+0x282>
		ret = spi_stm32_shift_frames(spi, data);
 8004224:	4699      	mov	r9, r3
 8004226:	e6fb      	b.n	8004020 <spi_stm32_transceive+0x380>
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8004228:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800422c:	e70f      	b.n	800404e <spi_stm32_transceive+0x3ae>
  return ((READ_BIT(SPIx->SR, SPI_SR_EOT) == (SPI_SR_EOT)) ? 1UL : 0UL);
 800422e:	f013 0f08 	tst.w	r3, #8
 8004232:	e713      	b.n	800405c <spi_stm32_transceive+0x3bc>
  SET_BIT(SPIx->CR1, SPI_CR1_CSUSP);
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800423a:	602b      	str	r3, [r5, #0]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_CSTART) == (SPI_CR1_CSTART)) ? 1UL : 0UL);
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	0599      	lsls	r1, r3, #22
 8004240:	d4fc      	bmi.n	800423c <spi_stm32_transceive+0x59c>
 8004242:	e718      	b.n	8004076 <spi_stm32_transceive+0x3d6>
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8004244:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8004248:	e71c      	b.n	8004084 <spi_stm32_transceive+0x3e4>
 800424a:	bf00      	nop
 800424c:	0802aabc 	.word	0x0802aabc
 8004250:	0802aac7 	.word	0x0802aac7
 8004254:	01000004 	.word	0x01000004
 8004258:	08028a54 	.word	0x08028a54

0800425c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800425c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8004260:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8004262:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8004264:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8004266:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8004268:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800426c:	4b08      	ldr	r3, [pc, #32]	; (8004290 <elapsed+0x34>)
 800426e:	4909      	ldr	r1, [pc, #36]	; (8004294 <elapsed+0x38>)
 8004270:	d101      	bne.n	8004276 <elapsed+0x1a>
	    || (val1 < val2)) {
 8004272:	4282      	cmp	r2, r0
 8004274:	d206      	bcs.n	8004284 <elapsed+0x28>
		overflow_cyc += last_load;
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	680c      	ldr	r4, [r1, #0]
 800427a:	4422      	add	r2, r4
 800427c:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800427e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8004282:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	680a      	ldr	r2, [r1, #0]
 8004288:	4413      	add	r3, r2
}
 800428a:	1a18      	subs	r0, r3, r0
 800428c:	bd10      	pop	{r4, pc}
 800428e:	bf00      	nop
 8004290:	24001140 	.word	0x24001140
 8004294:	24001144 	.word	0x24001144

08004298 <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <sys_clock_driver_init+0x28>)
 800429a:	2210      	movs	r2, #16
static int sys_clock_driver_init(void)
{

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
 800429c:	2000      	movs	r0, #0
 800429e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
 80042a2:	f24d 62d7 	movw	r2, #54999	; 0xd6d7
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <sys_clock_driver_init+0x2c>)
 80042a8:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 80042aa:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <sys_clock_driver_init+0x30>)
 80042ac:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 80042ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80042b2:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80042b4:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	f042 0207 	orr.w	r2, r2, #7
 80042bc:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 80042be:	4770      	bx	lr
 80042c0:	e000ed00 	.word	0xe000ed00
 80042c4:	24001144 	.word	0x24001144
 80042c8:	24001140 	.word	0x24001140

080042cc <sys_clock_isr>:
{
 80042cc:	b510      	push	{r4, lr}
	elapsed();
 80042ce:	f7ff ffc5 	bl	800425c <elapsed>
	cycle_count += overflow_cyc;
 80042d2:	4910      	ldr	r1, [pc, #64]	; (8004314 <sys_clock_isr+0x48>)
 80042d4:	4b10      	ldr	r3, [pc, #64]	; (8004318 <sys_clock_isr+0x4c>)
 80042d6:	6808      	ldr	r0, [r1, #0]
 80042d8:	e9d3 4200 	ldrd	r4, r2, [r3]
 80042dc:	1900      	adds	r0, r0, r4
 80042de:	f142 0200 	adc.w	r2, r2, #0
 80042e2:	e9c3 0200 	strd	r0, r2, [r3]
		dcycles = cycle_count - announced_cycles;
 80042e6:	4a0d      	ldr	r2, [pc, #52]	; (800431c <sys_clock_isr+0x50>)
	overflow_cyc = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	600b      	str	r3, [r1, #0]
		dticks = dcycles / CYC_PER_TICK;
 80042ec:	f24d 63d8 	movw	r3, #55000	; 0xd6d8
		dcycles = cycle_count - announced_cycles;
 80042f0:	e9d2 4100 	ldrd	r4, r1, [r2]
 80042f4:	1b00      	subs	r0, r0, r4
		dticks = dcycles / CYC_PER_TICK;
 80042f6:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 80042fa:	4343      	muls	r3, r0
 80042fc:	191b      	adds	r3, r3, r4
 80042fe:	f141 0100 	adc.w	r1, r1, #0
 8004302:	e9c2 3100 	strd	r3, r1, [r2]
		sys_clock_announce(dticks);
 8004306:	f015 fbad 	bl	8019a64 <sys_clock_announce>
}
 800430a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_arm_int_exit();
 800430e:	f7fe b8c3 	b.w	8002498 <z_arm_exc_exit>
 8004312:	bf00      	nop
 8004314:	24001140 	.word	0x24001140
 8004318:	240006a8 	.word	0x240006a8
 800431c:	240006a0 	.word	0x240006a0

08004320 <sys_clock_set_timeout>:
{
 8004320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004324:	4f38      	ldr	r7, [pc, #224]	; (8004408 <sys_clock_set_timeout+0xe8>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8004326:	2900      	cmp	r1, #0
 8004328:	d05e      	beq.n	80043e8 <sys_clock_set_timeout+0xc8>
 800432a:	1c42      	adds	r2, r0, #1
 800432c:	d10a      	bne.n	8004344 <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800432e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8004332:	6913      	ldr	r3, [r2, #16]
 8004334:	f023 0301 	bic.w	r3, r3, #1
 8004338:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 800433a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800433e:	603b      	str	r3, [r7, #0]
}
 8004340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 8004344:	683e      	ldr	r6, [r7, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8004346:	2801      	cmp	r0, #1
 8004348:	dd54      	ble.n	80043f4 <sys_clock_set_timeout+0xd4>
 800434a:	f5b0 7f98 	cmp.w	r0, #304	; 0x130
 800434e:	dc54      	bgt.n	80043fa <sys_clock_set_timeout+0xda>
 8004350:	f100 38ff 	add.w	r8, r0, #4294967295
	__asm__ volatile(
 8004354:	f04f 0310 	mov.w	r3, #16
 8004358:	f3ef 8511 	mrs	r5, BASEPRI
 800435c:	f383 8812 	msr	BASEPRI_MAX, r3
 8004360:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8004364:	f7ff ff7a 	bl	800425c <elapsed>
	val1 = SysTick->VAL;
 8004368:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	cycle_count += pending;
 800436c:	4927      	ldr	r1, [pc, #156]	; (800440c <sys_clock_set_timeout+0xec>)
	val1 = SysTick->VAL;
 800436e:	699a      	ldr	r2, [r3, #24]
	cycle_count += pending;
 8004370:	e9d1 4300 	ldrd	r4, r3, [r1]
 8004374:	1900      	adds	r0, r0, r4
	overflow_cyc = 0U;
 8004376:	f04f 0400 	mov.w	r4, #0
	cycle_count += pending;
 800437a:	f143 0300 	adc.w	r3, r3, #0
 800437e:	e9c1 0300 	strd	r0, r3, [r1]
	overflow_cyc = 0U;
 8004382:	4b23      	ldr	r3, [pc, #140]	; (8004410 <sys_clock_set_timeout+0xf0>)
 8004384:	601c      	str	r4, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8004386:	4b23      	ldr	r3, [pc, #140]	; (8004414 <sys_clock_set_timeout+0xf4>)
 8004388:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800438a:	1ac4      	subs	r4, r0, r3
 800438c:	d438      	bmi.n	8004400 <sys_clock_set_timeout+0xe0>
		delay = ticks * CYC_PER_TICK;
 800438e:	f24d 6cd8 	movw	ip, #55000	; 0xd6d8
		delay -= unannounced;
 8004392:	1a18      	subs	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
 8004394:	f640 536d 	movw	r3, #3437	; 0xd6d
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
 8004398:	fb0c 4408 	mla	r4, ip, r8, r4
 800439c:	f504 4456 	add.w	r4, r4, #54784	; 0xd600
 80043a0:	34d7      	adds	r4, #215	; 0xd7
 80043a2:	fbb4 f4fc 	udiv	r4, r4, ip
		delay -= unannounced;
 80043a6:	fb0c 0004 	mla	r0, ip, r4, r0
		delay = MAX(delay, MIN_DELAY);
 80043aa:	4298      	cmp	r0, r3
 80043ac:	d928      	bls.n	8004400 <sys_clock_set_timeout+0xe0>
		if (delay > MAX_CYCLES) {
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <sys_clock_set_timeout+0xf8>)
 80043b0:	4298      	cmp	r0, r3
 80043b2:	bf28      	it	cs
 80043b4:	4618      	movcs	r0, r3
		last_load = MIN_DELAY;
 80043b6:	6038      	str	r0, [r7, #0]
	val2 = SysTick->VAL;
 80043b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 80043bc:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
 80043be:	699c      	ldr	r4, [r3, #24]
	SysTick->LOAD = last_load - 1;
 80043c0:	6158      	str	r0, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80043c2:	2000      	movs	r0, #0
	if (val1 < val2) {
 80043c4:	42a2      	cmp	r2, r4
	SysTick->VAL = 0; /* resets timer to last_load */
 80043c6:	6198      	str	r0, [r3, #24]
	if (val1 < val2) {
 80043c8:	eba2 0304 	sub.w	r3, r2, r4
		cycle_count += (val1 - val2);
 80043cc:	e9d1 0200 	ldrd	r0, r2, [r1]
		cycle_count += (val1 + (last_load_ - val2));
 80043d0:	bf38      	it	cc
 80043d2:	199b      	addcc	r3, r3, r6
		cycle_count += (val1 - val2);
 80043d4:	181b      	adds	r3, r3, r0
 80043d6:	f142 0200 	adc.w	r2, r2, #0
 80043da:	e9c1 3200 	strd	r3, r2, [r1]
	__asm__ volatile(
 80043de:	f385 8811 	msr	BASEPRI, r5
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	e7ab      	b.n	8004340 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80043e8:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 80043ea:	683e      	ldr	r6, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80043ec:	d1ab      	bne.n	8004346 <sys_clock_set_timeout+0x26>
 80043ee:	f44f 7098 	mov.w	r0, #304	; 0x130
 80043f2:	e7ad      	b.n	8004350 <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80043f4:	f04f 0800 	mov.w	r8, #0
 80043f8:	e7ac      	b.n	8004354 <sys_clock_set_timeout+0x34>
 80043fa:	f44f 7898 	mov.w	r8, #304	; 0x130
 80043fe:	e7a9      	b.n	8004354 <sys_clock_set_timeout+0x34>
 8004400:	f640 506d 	movw	r0, #3437	; 0xd6d
 8004404:	e7d7      	b.n	80043b6 <sys_clock_set_timeout+0x96>
 8004406:	bf00      	nop
 8004408:	24001144 	.word	0x24001144
 800440c:	240006a8 	.word	0x240006a8
 8004410:	24001140 	.word	0x24001140
 8004414:	240006a0 	.word	0x240006a0
 8004418:	00ff2080 	.word	0x00ff2080

0800441c <sys_clock_elapsed>:
{
 800441c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800441e:	f04f 0310 	mov.w	r3, #16
 8004422:	f3ef 8511 	mrs	r5, BASEPRI
 8004426:	f383 8812 	msr	BASEPRI_MAX, r3
 800442a:	f3bf 8f6f 	isb	sy
	uint32_t unannounced = cycle_count - announced_cycles;
 800442e:	4b08      	ldr	r3, [pc, #32]	; (8004450 <sys_clock_elapsed+0x34>)
 8004430:	681c      	ldr	r4, [r3, #0]
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <sys_clock_elapsed+0x38>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	1ae4      	subs	r4, r4, r3
	uint32_t cyc = elapsed() + unannounced;
 8004438:	f7ff ff10 	bl	800425c <elapsed>
	__asm__ volatile(
 800443c:	f385 8811 	msr	BASEPRI, r5
 8004440:	f3bf 8f6f 	isb	sy
}
 8004444:	f24d 63d8 	movw	r3, #55000	; 0xd6d8
	uint32_t cyc = elapsed() + unannounced;
 8004448:	4420      	add	r0, r4
}
 800444a:	fbb0 f0f3 	udiv	r0, r0, r3
 800444e:	bd38      	pop	{r3, r4, r5, pc}
 8004450:	240006a8 	.word	0x240006a8
 8004454:	240006a0 	.word	0x240006a0

08004458 <sys_clock_cycle_get_32>:
{
 8004458:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800445a:	f04f 0310 	mov.w	r3, #16
 800445e:	f3ef 8511 	mrs	r5, BASEPRI
 8004462:	f383 8812 	msr	BASEPRI_MAX, r3
 8004466:	f3bf 8f6f 	isb	sy
	uint32_t ret = cycle_count;
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <sys_clock_cycle_get_32+0x28>)
 800446c:	681c      	ldr	r4, [r3, #0]
	ret += elapsed();
 800446e:	f7ff fef5 	bl	800425c <elapsed>
	__asm__ volatile(
 8004472:	f385 8811 	msr	BASEPRI, r5
 8004476:	f3bf 8f6f 	isb	sy
}
 800447a:	4420      	add	r0, r4
 800447c:	bd38      	pop	{r3, r4, r5, pc}
 800447e:	bf00      	nop
 8004480:	240006a8 	.word	0x240006a8

08004484 <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */



  /* Frequency cannot be equal to 0 */
  if (HCLK_Frequency == 0U)
 8004484:	4602      	mov	r2, r0
{
 8004486:	b510      	push	{r4, lr}
  if (HCLK_Frequency == 0U)
 8004488:	b178      	cbz	r0, 80044aa <LL_SetFlashLatency+0x26>
  return (uint32_t)(READ_BIT(PWR->D3CR, PWR_D3CR_VOS));
 800448a:	494f      	ldr	r1, [pc, #316]	; (80045c8 <LL_SetFlashLatency+0x144>)
 800448c:	698b      	ldr	r3, [r1, #24]
    status = ERROR;
  }
  else
  {
#if (STM32H7_DEV_ID == 0x480UL) || (STM32H7_DEV_ID == 0x483UL)
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE0)
 800448e:	f413 4340 	ands.w	r3, r3, #49152	; 0xc000
 8004492:	d13f      	bne.n	8004514 <LL_SetFlashLatency+0x90>
        /* 176 < HCLK <= 220 => 4WS (5 CPU cycles) */
        latency = LL_FLASH_LATENCY_4;
      }
      else if((HCLK_Frequency > UTILS_SCALE0_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE0_LATENCY3_FREQ))
#elif (STM32H7_DEV_ID == 0x483UL)
      if((HCLK_Frequency > UTILS_SCALE0_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE0_LATENCY3_FREQ))
 8004494:	484d      	ldr	r0, [pc, #308]	; (80045cc <LL_SetFlashLatency+0x148>)
 8004496:	4c4e      	ldr	r4, [pc, #312]	; (80045d0 <LL_SetFlashLatency+0x14c>)
 8004498:	4410      	add	r0, r2
 800449a:	42a0      	cmp	r0, r4
 800449c:	d207      	bcs.n	80044ae <LL_SetFlashLatency+0x2a>
 800449e:	698b      	ldr	r3, [r1, #24]
 80044a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        /* 126 < HCLK <= 168 => 3WS (4 CPU cycles) */
        latency = LL_FLASH_LATENCY_3;
      }
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
#else
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 80044a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044a8:	d151      	bne.n	800454e <LL_SetFlashLatency+0xca>
    status = ERROR;
 80044aa:	2001      	movs	r0, #1
 80044ac:	e07c      	b.n	80045a8 <LL_SetFlashLatency+0x124>
      else if((HCLK_Frequency > UTILS_SCALE0_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE0_LATENCY2_FREQ))
 80044ae:	4849      	ldr	r0, [pc, #292]	; (80045d4 <LL_SetFlashLatency+0x150>)
 80044b0:	4c49      	ldr	r4, [pc, #292]	; (80045d8 <LL_SetFlashLatency+0x154>)
 80044b2:	4410      	add	r0, r2
 80044b4:	42a0      	cmp	r0, r4
 80044b6:	d946      	bls.n	8004546 <LL_SetFlashLatency+0xc2>
      else if((HCLK_Frequency > UTILS_SCALE0_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE0_LATENCY1_FREQ))
 80044b8:	4848      	ldr	r0, [pc, #288]	; (80045dc <LL_SetFlashLatency+0x158>)
 80044ba:	4410      	add	r0, r2
 80044bc:	42a0      	cmp	r0, r4
 80044be:	d944      	bls.n	800454a <LL_SetFlashLatency+0xc6>
      else if(HCLK_Frequency <= UTILS_SCALE0_LATENCY0_FREQ)
 80044c0:	4847      	ldr	r0, [pc, #284]	; (80045e0 <LL_SetFlashLatency+0x15c>)
 80044c2:	4282      	cmp	r2, r0
 80044c4:	6988      	ldr	r0, [r1, #24]
 80044c6:	f400 4040 	and.w	r0, r0, #49152	; 0xc000
 80044ca:	d907      	bls.n	80044dc <LL_SetFlashLatency+0x58>
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 80044cc:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80044d0:	d0eb      	beq.n	80044aa <LL_SetFlashLatency+0x26>
 80044d2:	6989      	ldr	r1, [r1, #24]
        status = ERROR;
 80044d4:	2001      	movs	r0, #1
 80044d6:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 80044da:	e04c      	b.n	8004576 <LL_SetFlashLatency+0xf2>
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 80044dc:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80044e0:	d145      	bne.n	800456e <LL_SetFlashLatency+0xea>
#endif /* STM32H7_DEV_ID == 0x480UL || STM32H7_DEV_ID == 0x483UL */
      {
        /* 140 < HCLK <= 210 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY1_FREQ))
 80044e2:	4b40      	ldr	r3, [pc, #256]	; (80045e4 <LL_SetFlashLatency+0x160>)
 80044e4:	4413      	add	r3, r2
 80044e6:	4a40      	ldr	r2, [pc, #256]	; (80045e8 <LL_SetFlashLatency+0x164>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	bf8c      	ite	hi
 80044ec:	2300      	movhi	r3, #0
 80044ee:	2301      	movls	r3, #1
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80044f0:	493e      	ldr	r1, [pc, #248]	; (80045ec <LL_SetFlashLatency+0x168>)
 80044f2:	680a      	ldr	r2, [r1, #0]
 80044f4:	f022 020f 	bic.w	r2, r2, #15
 80044f8:	431a      	orrs	r2, r3
 80044fa:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80044fc:	680a      	ldr	r2, [r1, #0]
 80044fe:	f002 020f 	and.w	r2, r2, #15
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      } while ((getlatency != latency) && (timeout > 0U));
 8004502:	429a      	cmp	r2, r3
 8004504:	d05e      	beq.n	80045c4 <LL_SetFlashLatency+0x140>
 8004506:	6808      	ldr	r0, [r1, #0]
 8004508:	f000 000f 	and.w	r0, r0, #15

      if(getlatency != latency)
 800450c:	1ac0      	subs	r0, r0, r3
 800450e:	bf18      	it	ne
 8004510:	2001      	movne	r0, #1
 8004512:	e049      	b.n	80045a8 <LL_SetFlashLatency+0x124>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8004514:	2300      	movs	r3, #0
 8004516:	482c      	ldr	r0, [pc, #176]	; (80045c8 <LL_SetFlashLatency+0x144>)
 8004518:	6981      	ldr	r1, [r0, #24]
 800451a:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800451e:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8004522:	d12b      	bne.n	800457c <LL_SetFlashLatency+0xf8>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
 8004524:	4932      	ldr	r1, [pc, #200]	; (80045f0 <LL_SetFlashLatency+0x16c>)
 8004526:	4833      	ldr	r0, [pc, #204]	; (80045f4 <LL_SetFlashLatency+0x170>)
 8004528:	4411      	add	r1, r2
 800452a:	4281      	cmp	r1, r0
 800452c:	d946      	bls.n	80045bc <LL_SetFlashLatency+0x138>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY1_FREQ))
 800452e:	492d      	ldr	r1, [pc, #180]	; (80045e4 <LL_SetFlashLatency+0x160>)
 8004530:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
 8004534:	4411      	add	r1, r2
 8004536:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
 800453a:	4281      	cmp	r1, r0
 800453c:	d940      	bls.n	80045c0 <LL_SetFlashLatency+0x13c>
      else if(HCLK_Frequency <= UTILS_SCALE1_LATENCY0_FREQ)
 800453e:	492e      	ldr	r1, [pc, #184]	; (80045f8 <LL_SetFlashLatency+0x174>)
 8004540:	428a      	cmp	r2, r1
 8004542:	d9d5      	bls.n	80044f0 <LL_SetFlashLatency+0x6c>
 8004544:	e7b1      	b.n	80044aa <LL_SetFlashLatency+0x26>
        latency = LL_FLASH_LATENCY_2;
 8004546:	2302      	movs	r3, #2
 8004548:	e7e5      	b.n	8004516 <LL_SetFlashLatency+0x92>
        latency = LL_FLASH_LATENCY_1;
 800454a:	2301      	movs	r3, #1
 800454c:	e7e3      	b.n	8004516 <LL_SetFlashLatency+0x92>
 800454e:	698b      	ldr	r3, [r1, #24]
  ErrorStatus status = SUCCESS;
 8004550:	2000      	movs	r0, #0
 8004552:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8004556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        latency = LL_FLASH_LATENCY_3;
 800455a:	f04f 0303 	mov.w	r3, #3
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 800455e:	d019      	beq.n	8004594 <LL_SetFlashLatency+0x110>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
 8004560:	4926      	ldr	r1, [pc, #152]	; (80045fc <LL_SetFlashLatency+0x178>)
 8004562:	4c27      	ldr	r4, [pc, #156]	; (8004600 <LL_SetFlashLatency+0x17c>)
 8004564:	4411      	add	r1, r2
 8004566:	42a1      	cmp	r1, r4
 8004568:	d926      	bls.n	80045b8 <LL_SetFlashLatency+0x134>
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 800456a:	4926      	ldr	r1, [pc, #152]	; (8004604 <LL_SetFlashLatency+0x180>)
 800456c:	e018      	b.n	80045a0 <LL_SetFlashLatency+0x11c>
 800456e:	6989      	ldr	r1, [r1, #24]
  ErrorStatus status = SUCCESS;
 8004570:	4618      	mov	r0, r3
 8004572:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8004576:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800457a:	e7f0      	b.n	800455e <LL_SetFlashLatency+0xda>
 800457c:	6981      	ldr	r1, [r0, #24]
 800457e:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8004582:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004586:	d110      	bne.n	80045aa <LL_SetFlashLatency+0x126>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY2_FREQ))
 8004588:	491f      	ldr	r1, [pc, #124]	; (8004608 <LL_SetFlashLatency+0x184>)
 800458a:	4820      	ldr	r0, [pc, #128]	; (800460c <LL_SetFlashLatency+0x188>)
 800458c:	4411      	add	r1, r2
 800458e:	4281      	cmp	r1, r0
 8004590:	d914      	bls.n	80045bc <LL_SetFlashLatency+0x138>
 8004592:	2000      	movs	r0, #0
      else if((HCLK_Frequency > UTILS_SCALE2_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY1_FREQ))
 8004594:	491e      	ldr	r1, [pc, #120]	; (8004610 <LL_SetFlashLatency+0x18c>)
 8004596:	4c1d      	ldr	r4, [pc, #116]	; (800460c <LL_SetFlashLatency+0x188>)
 8004598:	4411      	add	r1, r2
 800459a:	42a1      	cmp	r1, r4
 800459c:	d90c      	bls.n	80045b8 <LL_SetFlashLatency+0x134>
      else if(HCLK_Frequency <= UTILS_SCALE2_LATENCY0_FREQ)
 800459e:	491d      	ldr	r1, [pc, #116]	; (8004614 <LL_SetFlashLatency+0x190>)
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 80045a0:	428a      	cmp	r2, r1
 80045a2:	d882      	bhi.n	80044aa <LL_SetFlashLatency+0x26>
    if(status == SUCCESS)
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d0a3      	beq.n	80044f0 <LL_SetFlashLatency+0x6c>
      }
    }
  }

  return status;
}
 80045a8:	bd10      	pop	{r4, pc}
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY2_FREQ))
 80045aa:	490c      	ldr	r1, [pc, #48]	; (80045dc <LL_SetFlashLatency+0x158>)
 80045ac:	481a      	ldr	r0, [pc, #104]	; (8004618 <LL_SetFlashLatency+0x194>)
 80045ae:	4411      	add	r1, r2
 80045b0:	4281      	cmp	r1, r0
 80045b2:	d303      	bcc.n	80045bc <LL_SetFlashLatency+0x138>
 80045b4:	2000      	movs	r0, #0
 80045b6:	e7d3      	b.n	8004560 <LL_SetFlashLatency+0xdc>
        latency = LL_FLASH_LATENCY_1;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e7f3      	b.n	80045a4 <LL_SetFlashLatency+0x120>
        latency = LL_FLASH_LATENCY_2;
 80045bc:	2302      	movs	r3, #2
 80045be:	e797      	b.n	80044f0 <LL_SetFlashLatency+0x6c>
        latency = LL_FLASH_LATENCY_1;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e795      	b.n	80044f0 <LL_SetFlashLatency+0x6c>
 80045c4:	4618      	mov	r0, r3
 80045c6:	e7a1      	b.n	800450c <LL_SetFlashLatency+0x88>
 80045c8:	58024800 	.word	0x58024800
 80045cc:	f37ba77f 	.word	0xf37ba77f
 80045d0:	03dfd240 	.word	0x03dfd240
 80045d4:	f7a7c4ff 	.word	0xf7a7c4ff
 80045d8:	042c1d7f 	.word	0x042c1d7f
 80045dc:	fbd3e27f 	.word	0xfbd3e27f
 80045e0:	042c1d80 	.word	0x042c1d80
 80045e4:	fc01a93f 	.word	0xfc01a93f
 80045e8:	03ef147f 	.word	0x03ef147f
 80045ec:	52002000 	.word	0x52002000
 80045f0:	f81294bf 	.word	0xf81294bf
 80045f4:	03fe56bf 	.word	0x03fe56bf
 80045f8:	03fe56c0 	.word	0x03fe56c0
 80045fc:	fde9f13f 	.word	0xfde9f13f
 8004600:	02160ebf 	.word	0x02160ebf
 8004604:	02160ec0 	.word	0x02160ec0
 8004608:	fa0a1eff 	.word	0xfa0a1eff
 800460c:	02faf07f 	.word	0x02faf07f
 8004610:	fd050f7f 	.word	0xfd050f7f
 8004614:	02faf080 	.word	0x02faf080
 8004618:	00e4e1c0 	.word	0x00e4e1c0

0800461c <event_send_core>:

    return &obj->spec_attr->event_dsc[id];
}

static lv_res_t event_send_core(lv_event_t * e)
{
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4604      	mov	r4, r0
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8004620:	f000 f8f6 	bl	8004810 <lv_indev_get_act>
    if(indev_act) {
 8004624:	b9b8      	cbnz	r0, 8004656 <event_send_core+0x3a>
        if(e->stop_processing) return LV_RES_OK;
        if(e->deleted) return LV_RES_INV;
    }

    lv_res_t res = LV_RES_OK;
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8004626:	6863      	ldr	r3, [r4, #4]
 8004628:	2100      	movs	r1, #0
 800462a:	6898      	ldr	r0, [r3, #8]

    uint32_t i = 0;
 800462c:	460e      	mov	r6, r1
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 800462e:	f016 fdf1 	bl	801b214 <lv_obj_get_event_dsc.isra.0>
 8004632:	4605      	mov	r5, r0
    while(event_dsc && res == LV_RES_OK) {
 8004634:	b9e5      	cbnz	r5, 8004670 <event_send_core+0x54>

        i++;
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
    }

    res = lv_obj_event_base(NULL, e);
 8004636:	4621      	mov	r1, r4
 8004638:	4628      	mov	r0, r5
 800463a:	f016 fdf8 	bl	801b22e <lv_obj_event_base>

    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 800463e:	4602      	mov	r2, r0
 8004640:	b198      	cbz	r0, 800466a <event_send_core+0x4e>
 8004642:	6863      	ldr	r3, [r4, #4]
 8004644:	4629      	mov	r1, r5
 8004646:	6898      	ldr	r0, [r3, #8]
 8004648:	f016 fde4 	bl	801b214 <lv_obj_get_event_dsc.isra.0>

    i = 0;
    while(event_dsc && res == LV_RES_OK) {
 800464c:	2800      	cmp	r0, #0
 800464e:	d144      	bne.n	80046da <event_send_core+0xbe>

        i++;
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
    }

    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8004650:	2a01      	cmp	r2, #1
 8004652:	d04f      	beq.n	80046f4 <event_send_core+0xd8>
 8004654:	e00a      	b.n	800466c <event_send_core+0x50>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8004656:	6800      	ldr	r0, [r0, #0]
 8004658:	6883      	ldr	r3, [r0, #8]
 800465a:	b10b      	cbz	r3, 8004660 <event_send_core+0x44>
 800465c:	7a21      	ldrb	r1, [r4, #8]
 800465e:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 8004660:	7e23      	ldrb	r3, [r4, #24]
 8004662:	0798      	lsls	r0, r3, #30
 8004664:	d45f      	bmi.n	8004726 <event_send_core+0x10a>
        if(e->deleted) return LV_RES_INV;
 8004666:	07d9      	lsls	r1, r3, #31
 8004668:	d5dd      	bpl.n	8004626 <event_send_core+0xa>
 800466a:	2200      	movs	r2, #0
        res = event_send_core(e);
        if(res != LV_RES_OK) return LV_RES_INV;
    }

    return res;
}
 800466c:	4610      	mov	r0, r2
 800466e:	bd70      	pop	{r4, r5, r6, pc}
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	b93b      	cbnz	r3, 8004684 <event_send_core+0x68>
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004674:	6863      	ldr	r3, [r4, #4]
        i++;
 8004676:	3601      	adds	r6, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004678:	6898      	ldr	r0, [r3, #8]
 800467a:	4631      	mov	r1, r6
 800467c:	f016 fdca 	bl	801b214 <lv_obj_get_event_dsc.isra.0>
 8004680:	4605      	mov	r5, r0
 8004682:	e7d7      	b.n	8004634 <event_send_core+0x18>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8004684:	f995 2008 	ldrsb.w	r2, [r5, #8]
 8004688:	7a2b      	ldrb	r3, [r5, #8]
 800468a:	2a00      	cmp	r2, #0
 800468c:	daf2      	bge.n	8004674 <event_send_core+0x58>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 800468e:	2b80      	cmp	r3, #128	; 0x80
 8004690:	d004      	beq.n	800469c <event_send_core+0x80>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8004692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004696:	7a22      	ldrb	r2, [r4, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004698:	4293      	cmp	r3, r2
 800469a:	d1eb      	bne.n	8004674 <event_send_core+0x58>
            e->user_data = event_dsc->user_data;
 800469c:	686b      	ldr	r3, [r5, #4]
            event_dsc->cb(e);
 800469e:	4620      	mov	r0, r4
            e->user_data = event_dsc->user_data;
 80046a0:	60e3      	str	r3, [r4, #12]
            event_dsc->cb(e);
 80046a2:	682b      	ldr	r3, [r5, #0]
 80046a4:	4798      	blx	r3
            if(e->stop_processing) return LV_RES_OK;
 80046a6:	7e23      	ldrb	r3, [r4, #24]
 80046a8:	079a      	lsls	r2, r3, #30
 80046aa:	d43c      	bmi.n	8004726 <event_send_core+0x10a>
            if(e->deleted) return LV_RES_INV;
 80046ac:	07db      	lsls	r3, r3, #31
 80046ae:	d5e1      	bpl.n	8004674 <event_send_core+0x58>
 80046b0:	e7db      	b.n	800466a <event_send_core+0x4e>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 80046b2:	f990 2008 	ldrsb.w	r2, [r0, #8]
 80046b6:	7a03      	ldrb	r3, [r0, #8]
 80046b8:	2a00      	cmp	r2, #0
 80046ba:	db13      	blt.n	80046e4 <event_send_core+0xc8>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 80046bc:	b113      	cbz	r3, 80046c4 <event_send_core+0xa8>
 80046be:	7a22      	ldrb	r2, [r4, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d10f      	bne.n	80046e4 <event_send_core+0xc8>
            e->user_data = event_dsc->user_data;
 80046c4:	6843      	ldr	r3, [r0, #4]
 80046c6:	60e3      	str	r3, [r4, #12]
            event_dsc->cb(e);
 80046c8:	6803      	ldr	r3, [r0, #0]
 80046ca:	4620      	mov	r0, r4
 80046cc:	4798      	blx	r3
            if(e->stop_processing) return LV_RES_OK;
 80046ce:	7e23      	ldrb	r3, [r4, #24]
 80046d0:	079e      	lsls	r6, r3, #30
 80046d2:	d428      	bmi.n	8004726 <event_send_core+0x10a>
            if(e->deleted) return LV_RES_INV;
 80046d4:	07d8      	lsls	r0, r3, #31
 80046d6:	d505      	bpl.n	80046e4 <event_send_core+0xc8>
 80046d8:	e7c7      	b.n	800466a <event_send_core+0x4e>
    while(event_dsc && res == LV_RES_OK) {
 80046da:	2a01      	cmp	r2, #1
 80046dc:	d1c6      	bne.n	800466c <event_send_core+0x50>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 80046de:	6803      	ldr	r3, [r0, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e6      	bne.n	80046b2 <event_send_core+0x96>
        i++;
 80046e4:	3501      	adds	r5, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 80046e6:	6863      	ldr	r3, [r4, #4]
 80046e8:	4629      	mov	r1, r5
 80046ea:	6898      	ldr	r0, [r3, #8]
 80046ec:	f016 fd92 	bl	801b214 <lv_obj_get_event_dsc.isra.0>
    while(event_dsc && res == LV_RES_OK) {
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d1f4      	bne.n	80046de <event_send_core+0xc2>
    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 80046f4:	6860      	ldr	r0, [r4, #4]
 80046f6:	6843      	ldr	r3, [r0, #4]
 80046f8:	b1ab      	cbz	r3, 8004726 <event_send_core+0x10a>

static bool event_is_bubbled(lv_event_t * e)
{
    if(e->stop_bubbling) return false;
 80046fa:	7e23      	ldrb	r3, [r4, #24]
 80046fc:	0759      	lsls	r1, r3, #29
 80046fe:	d412      	bmi.n	8004726 <event_send_core+0x10a>

    /*Event codes that always bubble*/
    switch(e->code) {
 8004700:	7a23      	ldrb	r3, [r4, #8]
 8004702:	3b23      	subs	r3, #35	; 0x23
 8004704:	2b01      	cmp	r3, #1
 8004706:	d910      	bls.n	800472a <event_send_core+0x10e>
        default:
            break;
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 8004708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800470c:	f017 f9b2 	bl	801ba74 <lv_obj_has_flag>
 8004710:	b148      	cbz	r0, 8004726 <event_send_core+0x10a>

    switch(e->code) {
 8004712:	7a23      	ldrb	r3, [r4, #8]
 8004714:	3b11      	subs	r3, #17
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b1b      	cmp	r3, #27
 800471a:	d806      	bhi.n	800472a <event_send_core+0x10e>
 800471c:	4a08      	ldr	r2, [pc, #32]	; (8004740 <event_send_core+0x124>)
 800471e:	fa22 f303 	lsr.w	r3, r2, r3
 8004722:	07da      	lsls	r2, r3, #31
 8004724:	d501      	bpl.n	800472a <event_send_core+0x10e>
        if(e->stop_processing) return LV_RES_OK;
 8004726:	2201      	movs	r2, #1
 8004728:	e7a0      	b.n	800466c <event_send_core+0x50>
        e->current_target = e->current_target->parent;
 800472a:	6863      	ldr	r3, [r4, #4]
        res = event_send_core(e);
 800472c:	4620      	mov	r0, r4
        e->current_target = e->current_target->parent;
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	6063      	str	r3, [r4, #4]
        res = event_send_core(e);
 8004732:	f7ff ff73 	bl	800461c <event_send_core>
        if(res != LV_RES_OK) return LV_RES_INV;
 8004736:	1e43      	subs	r3, r0, #1
 8004738:	425a      	negs	r2, r3
 800473a:	415a      	adcs	r2, r3
 800473c:	e796      	b.n	800466c <event_send_core+0x50>
 800473e:	bf00      	nop
 8004740:	0b0f27ff 	.word	0x0b0f27ff

08004744 <lv_event_send>:
{
 8004744:	b510      	push	{r4, lr}
 8004746:	b088      	sub	sp, #32
    if(obj == NULL) return LV_RES_OK;
 8004748:	b1b8      	cbz	r0, 800477a <lv_event_send+0x36>
    e.user_data = NULL;
 800474a:	2300      	movs	r3, #0
    e.prev = event_head;
 800474c:	4c0c      	ldr	r4, [pc, #48]	; (8004780 <lv_event_send+0x3c>)
    e.code = event_code;
 800474e:	f88d 100c 	strb.w	r1, [sp, #12]
    e.param = param;
 8004752:	e9cd 3204 	strd	r3, r2, [sp, #16]
    e.deleted = 0;
 8004756:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800475a:	f023 0307 	bic.w	r3, r3, #7
    e.current_target = obj;
 800475e:	e9cd 0001 	strd	r0, r0, [sp, #4]
    e.deleted = 0;
 8004762:	f88d 301c 	strb.w	r3, [sp, #28]
    event_head = &e;
 8004766:	a801      	add	r0, sp, #4
    e.prev = event_head;
 8004768:	6823      	ldr	r3, [r4, #0]
    event_head = &e;
 800476a:	6020      	str	r0, [r4, #0]
    e.prev = event_head;
 800476c:	9306      	str	r3, [sp, #24]
    lv_res_t res = event_send_core(&e);
 800476e:	f7ff ff55 	bl	800461c <event_send_core>
    event_head = e.prev;
 8004772:	9b06      	ldr	r3, [sp, #24]
 8004774:	6023      	str	r3, [r4, #0]
}
 8004776:	b008      	add	sp, #32
 8004778:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 800477a:	2001      	movs	r0, #1
 800477c:	e7fb      	b.n	8004776 <lv_event_send+0x32>
 800477e:	bf00      	nop
 8004780:	24001148 	.word	0x24001148

08004784 <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
 8004784:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <_lv_event_mark_deleted+0x20>)
 8004786:	681b      	ldr	r3, [r3, #0]
    while(e) {
 8004788:	b903      	cbnz	r3, 800478c <_lv_event_mark_deleted+0x8>
}
 800478a:	4770      	bx	lr
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	4282      	cmp	r2, r0
 8004790:	d002      	beq.n	8004798 <_lv_event_mark_deleted+0x14>
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4282      	cmp	r2, r0
 8004796:	d103      	bne.n	80047a0 <_lv_event_mark_deleted+0x1c>
 8004798:	7e1a      	ldrb	r2, [r3, #24]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	761a      	strb	r2, [r3, #24]
        e = e->prev;
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	e7f1      	b.n	8004788 <_lv_event_mark_deleted+0x4>
 80047a4:	24001148 	.word	0x24001148

080047a8 <_lv_group_init>:
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_group_init(void)
{
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 80047a8:	2120      	movs	r1, #32
 80047aa:	4801      	ldr	r0, [pc, #4]	; (80047b0 <_lv_group_init+0x8>)
 80047ac:	f020 b948 	b.w	8024a40 <_lv_ll_init>
 80047b0:	240013c8 	.word	0x240013c8

080047b4 <lv_group_get_default>:
}

lv_group_t * lv_group_get_default(void)
{
    return default_group;
}
 80047b4:	4b01      	ldr	r3, [pc, #4]	; (80047bc <lv_group_get_default+0x8>)
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	2400114c 	.word	0x2400114c

080047c0 <lv_group_focus_next>:
        }
    }
}

void lv_group_focus_next(lv_group_t * group)
{
 80047c0:	b510      	push	{r4, lr}
 80047c2:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 80047c4:	4a06      	ldr	r2, [pc, #24]	; (80047e0 <lv_group_focus_next+0x20>)
 80047c6:	4907      	ldr	r1, [pc, #28]	; (80047e4 <lv_group_focus_next+0x24>)
 80047c8:	f016 fdd9 	bl	801b37e <focus_next_core>
    if(group->edge_cb) {
 80047cc:	6963      	ldr	r3, [r4, #20]
 80047ce:	b12b      	cbz	r3, 80047dc <lv_group_focus_next+0x1c>
        if(!focus_changed)
 80047d0:	b920      	cbnz	r0, 80047dc <lv_group_focus_next+0x1c>
            group->edge_cb(group, true);
 80047d2:	4620      	mov	r0, r4
 80047d4:	2101      	movs	r1, #1
    }
}
 80047d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            group->edge_cb(group, true);
 80047da:	4718      	bx	r3
}
 80047dc:	bd10      	pop	{r4, pc}
 80047de:	bf00      	nop
 80047e0:	08024b41 	.word	0x08024b41
 80047e4:	08024b35 	.word	0x08024b35

080047e8 <lv_group_focus_prev>:

void lv_group_focus_prev(lv_group_t * group)
{
 80047e8:	b510      	push	{r4, lr}
 80047ea:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 80047ec:	4906      	ldr	r1, [pc, #24]	; (8004808 <lv_group_focus_prev+0x20>)
 80047ee:	4a07      	ldr	r2, [pc, #28]	; (800480c <lv_group_focus_prev+0x24>)
 80047f0:	f016 fdc5 	bl	801b37e <focus_next_core>
    if(group->edge_cb) {
 80047f4:	6963      	ldr	r3, [r4, #20]
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 80047f6:	4601      	mov	r1, r0
    if(group->edge_cb) {
 80047f8:	b123      	cbz	r3, 8004804 <lv_group_focus_prev+0x1c>
        if(!focus_changed)
 80047fa:	b918      	cbnz	r0, 8004804 <lv_group_focus_prev+0x1c>
            group->edge_cb(group, false);
 80047fc:	4620      	mov	r0, r4
    }
}
 80047fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            group->edge_cb(group, false);
 8004802:	4718      	bx	r3
}
 8004804:	bd10      	pop	{r4, pc}
 8004806:	bf00      	nop
 8004808:	08024b3b 	.word	0x08024b3b
 800480c:	08024b49 	.word	0x08024b49

08004810 <lv_indev_get_act>:
}

lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
}
 8004810:	4b01      	ldr	r3, [pc, #4]	; (8004818 <lv_indev_get_act+0x8>)
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	24001154 	.word	0x24001154

0800481c <lv_indev_reset>:

    return indev->driver->type;
}

void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
 800481c:	b538      	push	{r3, r4, r5, lr}
 800481e:	460d      	mov	r5, r1
    if(indev) {
 8004820:	4604      	mov	r4, r0
 8004822:	2800      	cmp	r0, #0
 8004824:	d03e      	beq.n	80048a4 <lv_indev_reset+0x88>
        indev->proc.reset_query = 1;
 8004826:	7943      	ldrb	r3, [r0, #5]
 8004828:	f043 0302 	orr.w	r3, r3, #2
 800482c:	7143      	strb	r3, [r0, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 800482e:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <lv_indev_reset+0x98>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4283      	cmp	r3, r0
 8004834:	bf02      	ittt	eq
 8004836:	4b20      	ldreq	r3, [pc, #128]	; (80048b8 <lv_indev_reset+0x9c>)
 8004838:	2200      	moveq	r2, #0
 800483a:	601a      	streq	r2, [r3, #0]
        if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 800483c:	6803      	ldr	r3, [r0, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	3b01      	subs	r3, #1
 8004842:	2b01      	cmp	r3, #1
 8004844:	d812      	bhi.n	800486c <lv_indev_reset+0x50>
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8004846:	b921      	cbnz	r1, 8004852 <lv_indev_reset+0x36>
                indev->proc.types.pointer.last_pressed = NULL;
 8004848:	6341      	str	r1, [r0, #52]	; 0x34
            }
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
                indev->proc.types.pointer.act_obj = NULL;
 800484a:	6281      	str	r1, [r0, #40]	; 0x28
            }
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
                indev->proc.types.pointer.last_obj = NULL;
 800484c:	2300      	movs	r3, #0
 800484e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004850:	e00c      	b.n	800486c <lv_indev_reset+0x50>
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8004852:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004854:	428b      	cmp	r3, r1
                indev->proc.types.pointer.last_pressed = NULL;
 8004856:	bf04      	itt	eq
 8004858:	2300      	moveq	r3, #0
 800485a:	6343      	streq	r3, [r0, #52]	; 0x34
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 800485c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800485e:	428b      	cmp	r3, r1
                indev->proc.types.pointer.act_obj = NULL;
 8004860:	bf04      	itt	eq
 8004862:	2300      	moveq	r3, #0
 8004864:	6283      	streq	r3, [r0, #40]	; 0x28
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 8004866:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004868:	428b      	cmp	r3, r1
 800486a:	d0ef      	beq.n	800484c <lv_indev_reset+0x30>
            }
            i = lv_indev_get_next(i);
        }
        indev_obj_act = NULL;
    }
}
 800486c:	bd38      	pop	{r3, r4, r5, pc}
            i->proc.reset_query = 1;
 800486e:	7943      	ldrb	r3, [r0, #5]
 8004870:	f043 0302 	orr.w	r3, r3, #2
 8004874:	7143      	strb	r3, [r0, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8004876:	6803      	ldr	r3, [r0, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	3b01      	subs	r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d811      	bhi.n	80048a4 <lv_indev_reset+0x88>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8004880:	b91d      	cbnz	r5, 800488a <lv_indev_reset+0x6e>
                    i->proc.types.pointer.last_pressed = NULL;
 8004882:	6345      	str	r5, [r0, #52]	; 0x34
                    i->proc.types.pointer.act_obj = NULL;
 8004884:	6285      	str	r5, [r0, #40]	; 0x28
                    i->proc.types.pointer.last_obj = NULL;
 8004886:	62c4      	str	r4, [r0, #44]	; 0x2c
 8004888:	e00c      	b.n	80048a4 <lv_indev_reset+0x88>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 800488a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800488c:	42ab      	cmp	r3, r5
                    i->proc.types.pointer.last_pressed = NULL;
 800488e:	bf04      	itt	eq
 8004890:	2300      	moveq	r3, #0
 8004892:	6343      	streq	r3, [r0, #52]	; 0x34
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 8004894:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004896:	42ab      	cmp	r3, r5
                    i->proc.types.pointer.act_obj = NULL;
 8004898:	bf04      	itt	eq
 800489a:	2300      	moveq	r3, #0
 800489c:	6283      	streq	r3, [r0, #40]	; 0x28
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 800489e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80048a0:	42ab      	cmp	r3, r5
 80048a2:	d0f0      	beq.n	8004886 <lv_indev_reset+0x6a>
            i = lv_indev_get_next(i);
 80048a4:	f00d fc64 	bl	8012170 <lv_indev_get_next>
        while(i) {
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d1e0      	bne.n	800486e <lv_indev_reset+0x52>
        indev_obj_act = NULL;
 80048ac:	4b02      	ldr	r3, [pc, #8]	; (80048b8 <lv_indev_reset+0x9c>)
 80048ae:	6018      	str	r0, [r3, #0]
}
 80048b0:	e7dc      	b.n	800486c <lv_indev_reset+0x50>
 80048b2:	bf00      	nop
 80048b4:	24001154 	.word	0x24001154
 80048b8:	24001150 	.word	0x24001150

080048bc <lv_indev_get_obj_act>:
}

lv_obj_t * lv_indev_get_obj_act(void)
{
    return indev_obj_act;
}
 80048bc:	4b01      	ldr	r3, [pc, #4]	; (80048c4 <lv_indev_get_obj_act+0x8>)
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	24001150 	.word	0x24001150

080048c8 <lv_obj_draw>:
        obj->spec_attr = NULL;
    }
}

static void lv_obj_draw(lv_event_t * e)
{
 80048c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048cc:	4605      	mov	r5, r0
 80048ce:	b0a4      	sub	sp, #144	; 0x90
    lv_event_code_t code = lv_event_get_code(e);
 80048d0:	f016 fcc7 	bl	801b262 <lv_event_get_code>
 80048d4:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80048d6:	4628      	mov	r0, r5
 80048d8:	f016 fcbf 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_COVER_CHECK) {
 80048dc:	2e12      	cmp	r6, #18
    lv_obj_t * obj = lv_event_get_target(e);
 80048de:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 80048e0:	d14b      	bne.n	800497a <lv_obj_draw+0xb2>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 80048e2:	4628      	mov	r0, r5
 80048e4:	f016 fcc1 	bl	801b26a <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 80048e8:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 80048ea:	4605      	mov	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d008      	beq.n	8004902 <lv_obj_draw+0x3a>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 80048f0:	2217      	movs	r2, #23
 80048f2:	2100      	movs	r1, #0
 80048f4:	4620      	mov	r0, r4
 80048f6:	f019 f8f7 	bl	801dae8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 80048fa:	4606      	mov	r6, r0
 80048fc:	b120      	cbz	r0, 8004908 <lv_obj_draw+0x40>
            info->res = LV_COVER_RES_MASKED;
 80048fe:	2302      	movs	r3, #2
        coords.x2 += w;
        coords.y1 -= h;
        coords.y2 += h;

        if(_lv_area_is_in(info->area, &coords, r) == false) {
            info->res = LV_COVER_RES_NOT_COVER;
 8004900:	702b      	strb	r3, [r5, #0]

            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
        }
    }
}
 8004902:	b024      	add	sp, #144	; 0x90
 8004904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8004908:	4601      	mov	r1, r0
 800490a:	220b      	movs	r2, #11
 800490c:	4620      	mov	r0, r4
 800490e:	f019 f8eb 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8004912:	2268      	movs	r2, #104	; 0x68
    return (lv_coord_t)v.num;
 8004914:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8004918:	4631      	mov	r1, r6
 800491a:	4620      	mov	r0, r4
 800491c:	f019 f8e4 	bl	801dae8 <lv_obj_get_style_prop>
 8004920:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004922:	2269      	movs	r2, #105	; 0x69
 8004924:	4631      	mov	r1, r6
 8004926:	4620      	mov	r0, r4
 8004928:	f019 f8de 	bl	801dae8 <lv_obj_get_style_prop>
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
    dest->y1 = src->y1;
 800492c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 8004930:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
        coords.x1 -= w;
 8004934:	b2bb      	uxth	r3, r7
    dest->y2 = src->y2;
 8004936:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
        coords.y1 -= h;
 800493a:	b280      	uxth	r0, r0
        coords.x1 -= w;
 800493c:	8aa1      	ldrh	r1, [r4, #20]
        coords.y1 -= h;
 800493e:	1a12      	subs	r2, r2, r0
        coords.y2 += h;
 8004940:	4460      	add	r0, ip
        coords.x1 -= w;
 8004942:	1ac9      	subs	r1, r1, r3
        coords.x2 += w;
 8004944:	4473      	add	r3, lr
        coords.y1 -= h;
 8004946:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 800494a:	4642      	mov	r2, r8
        coords.x1 -= w;
 800494c:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 8004950:	a912      	add	r1, sp, #72	; 0x48
        coords.x2 += w;
 8004952:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        coords.y2 += h;
 8004956:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 800495a:	6868      	ldr	r0, [r5, #4]
 800495c:	f01f fdbc 	bl	80244d8 <_lv_area_is_in>
 8004960:	b908      	cbnz	r0, 8004966 <lv_obj_draw+0x9e>
            info->res = LV_COVER_RES_NOT_COVER;
 8004962:	2301      	movs	r3, #1
 8004964:	e7cc      	b.n	8004900 <lv_obj_draw+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8004966:	2221      	movs	r2, #33	; 0x21
 8004968:	4631      	mov	r1, r6
 800496a:	4620      	mov	r0, r4
 800496c:	f019 f8bc 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004970:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 8004972:	28fc      	cmp	r0, #252	; 0xfc
 8004974:	d9f5      	bls.n	8004962 <lv_obj_draw+0x9a>
        info->res = LV_COVER_RES_COVER;
 8004976:	702e      	strb	r6, [r5, #0]
 8004978:	e7c3      	b.n	8004902 <lv_obj_draw+0x3a>
    else if(code == LV_EVENT_DRAW_MAIN) {
 800497a:	2e15      	cmp	r6, #21
 800497c:	f040 8086 	bne.w	8004a8c <lv_obj_draw+0x1c4>
        lv_draw_rect_dsc_init(&draw_dsc);
 8004980:	af04      	add	r7, sp, #16
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8004982:	4628      	mov	r0, r5
 8004984:	f016 fcc2 	bl	801b30c <lv_event_get_draw_ctx>
 8004988:	4606      	mov	r6, r0
        lv_draw_rect_dsc_init(&draw_dsc);
 800498a:	4638      	mov	r0, r7
 800498c:	f004 f80a 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8004990:	2234      	movs	r2, #52	; 0x34
 8004992:	2100      	movs	r1, #0
 8004994:	4620      	mov	r0, r4
 8004996:	f019 f8a7 	bl	801dae8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 800499a:	b128      	cbz	r0, 80049a8 <lv_obj_draw+0xe0>
            draw_dsc.border_post = 1;
 800499c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 80049a8:	463a      	mov	r2, r7
 80049aa:	2100      	movs	r1, #0
 80049ac:	4620      	mov	r0, r4
        part_dsc.draw_area = &coords;
 80049ae:	f10d 0808 	add.w	r8, sp, #8
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 80049b2:	f017 faa1 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80049b6:	2268      	movs	r2, #104	; 0x68
 80049b8:	2100      	movs	r1, #0
 80049ba:	4620      	mov	r0, r4
 80049bc:	f019 f894 	bl	801dae8 <lv_obj_get_style_prop>
 80049c0:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80049c2:	2269      	movs	r2, #105	; 0x69
 80049c4:	2100      	movs	r1, #0
 80049c6:	4620      	mov	r0, r4
 80049c8:	f019 f88e 	bl	801dae8 <lv_obj_get_style_prop>
 80049cc:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
    dest->y1 = src->y1;
 80049d0:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
        coords.x1 -= w;
 80049d4:	b2ab      	uxth	r3, r5
 80049d6:	8aa1      	ldrh	r1, [r4, #20]
        coords.y1 -= h;
 80049d8:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 80049da:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 80049de:	2500      	movs	r5, #0
        coords.y1 -= h;
 80049e0:	1a12      	subs	r2, r2, r0
        coords.x1 -= w;
 80049e2:	1ac9      	subs	r1, r1, r3
        coords.y2 += h;
 80049e4:	4460      	add	r0, ip
        coords.x2 += w;
 80049e6:	4473      	add	r3, lr
        coords.x1 -= w;
 80049e8:	f8ad 1008 	strh.w	r1, [sp, #8]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80049ec:	4631      	mov	r1, r6
        coords.y2 += h;
 80049ee:	f8ad 000e 	strh.w	r0, [sp, #14]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80049f2:	a812      	add	r0, sp, #72	; 0x48
        coords.x2 += w;
 80049f4:	f8ad 300c 	strh.w	r3, [sp, #12]
        coords.y1 -= h;
 80049f8:	f8ad 200a 	strh.w	r2, [sp, #10]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80049fc:	f017 fd72 	bl	801c4e4 <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 8004a00:	4bc1      	ldr	r3, [pc, #772]	; (8004d08 <lv_obj_draw+0x440>)
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004a02:	aa12      	add	r2, sp, #72	; 0x48
 8004a04:	211a      	movs	r1, #26
 8004a06:	4620      	mov	r0, r4
        part_dsc.class_p = MY_CLASS;
 8004a08:	9313      	str	r3, [sp, #76]	; 0x4c
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 8004a0a:	9514      	str	r5, [sp, #80]	; 0x50
        part_dsc.rect_dsc = &draw_dsc;
 8004a0c:	9716      	str	r7, [sp, #88]	; 0x58
        part_dsc.draw_area = &coords;
 8004a0e:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
        part_dsc.part = LV_PART_MAIN;
 8004a12:	951f      	str	r5, [sp, #124]	; 0x7c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004a14:	f7ff fe96 	bl	8004744 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8004a18:	2217      	movs	r2, #23
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f019 f863 	bl	801dae8 <lv_obj_get_style_prop>
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 8004a22:	b368      	cbz	r0, 8004a80 <lv_obj_draw+0x1b8>
 8004a24:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8004a28:	b353      	cbz	r3, 8004a80 <lv_obj_draw+0x1b8>
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8004a2a:	4642      	mov	r2, r8
 8004a2c:	4639      	mov	r1, r7
 8004a2e:	4630      	mov	r0, r6
        const void * bg_img_src = draw_dsc.bg_img_src;
 8004a30:	f8dd a020 	ldr.w	sl, [sp, #32]
            draw_dsc.bg_img_src = NULL;
 8004a34:	9508      	str	r5, [sp, #32]
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8004a36:	f01a fcea 	bl	801f40e <lv_draw_rect>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8004a3a:	2018      	movs	r0, #24
 8004a3c:	f00d febc 	bl	80127b8 <lv_mem_buf_get>
 8004a40:	4681      	mov	r9, r0
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 8004a42:	f104 0114 	add.w	r1, r4, #20
 8004a46:	462b      	mov	r3, r5
 8004a48:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8004a4c:	f003 fda4 	bl	8008598 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 8004a50:	f504 7190 	add.w	r1, r4, #288	; 0x120
 8004a54:	4648      	mov	r0, r9
 8004a56:	f003 fc27 	bl	80082a8 <lv_draw_mask_add>
            if(bg_img_src) {
 8004a5a:	f1ba 0f00 	cmp.w	sl, #0
 8004a5e:	d105      	bne.n	8004a6c <lv_obj_draw+0x1a4>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8004a60:	aa12      	add	r2, sp, #72	; 0x48
 8004a62:	211b      	movs	r1, #27
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7ff fe6d 	bl	8004744 <lv_event_send>
 8004a6a:	e74a      	b.n	8004902 <lv_obj_draw+0x3a>
                draw_dsc.bg_opa = LV_OPA_TRANSP;
 8004a6c:	f88d 5013 	strb.w	r5, [sp, #19]
                draw_dsc.border_opa = LV_OPA_TRANSP;
 8004a70:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
                draw_dsc.outline_opa = LV_OPA_TRANSP;
 8004a74:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
                draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8004a78:	f88d 5046 	strb.w	r5, [sp, #70]	; 0x46
                draw_dsc.bg_img_src = bg_img_src;
 8004a7c:	f8cd a020 	str.w	sl, [sp, #32]
                lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8004a80:	4642      	mov	r2, r8
 8004a82:	4639      	mov	r1, r7
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8004a84:	4630      	mov	r0, r6
 8004a86:	f01a fcc2 	bl	801f40e <lv_draw_rect>
 8004a8a:	e7e9      	b.n	8004a60 <lv_obj_draw+0x198>
    else if(code == LV_EVENT_DRAW_POST) {
 8004a8c:	2e18      	cmp	r6, #24
 8004a8e:	f47f af38 	bne.w	8004902 <lv_obj_draw+0x3a>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8004a92:	4628      	mov	r0, r5
 8004a94:	f016 fc3a 	bl	801b30c <lv_event_get_draw_ctx>
static void draw_scrollbar(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx)
{

    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8004a98:	aa02      	add	r2, sp, #8
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8004a9a:	4606      	mov	r6, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8004a9c:	4669      	mov	r1, sp
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f018 fb65 	bl	801d16e <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8004aa4:	4668      	mov	r0, sp
 8004aa6:	f01f fbea 	bl	802427e <lv_area_get_size>
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	f000 80bc 	beq.w	8004c28 <lv_obj_draw+0x360>
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
    lv_draw_rect_dsc_init(dsc);
 8004ab0:	ad04      	add	r5, sp, #16
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f003 ff76 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8004ab8:	2221      	movs	r2, #33	; 0x21
 8004aba:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f019 f812 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004ac4:	b2c0      	uxtb	r0, r0
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
    if(dsc->bg_opa > LV_OPA_MIN) {
 8004ac6:	2802      	cmp	r0, #2
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 8004ac8:	f88d 0013 	strb.w	r0, [sp, #19]
    if(dsc->bg_opa > LV_OPA_MIN) {
 8004acc:	d907      	bls.n	8004ade <lv_obj_draw+0x216>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f019 f807 	bl	801dae8 <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8004ada:	f8ad 0014 	strh.w	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8004ade:	2231      	movs	r2, #49	; 0x31
 8004ae0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f018 ffff 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004aea:	b2c0      	uxtb	r0, r0
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
    if(dsc->border_opa > LV_OPA_MIN) {
 8004aec:	2802      	cmp	r0, #2
    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 8004aee:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    if(dsc->border_opa > LV_OPA_MIN) {
 8004af2:	d913      	bls.n	8004b1c <lv_obj_draw+0x254>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004af4:	2232      	movs	r2, #50	; 0x32
 8004af6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004afa:	4620      	mov	r0, r4
 8004afc:	f018 fff4 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004b00:	b200      	sxth	r0, r0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
        if(dsc->border_width > 0) {
 8004b02:	2800      	cmp	r0, #0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 8004b04:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
        if(dsc->border_width > 0) {
 8004b08:	f340 80f5 	ble.w	8004cf6 <lv_obj_draw+0x42e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8004b0c:	2230      	movs	r2, #48	; 0x30
 8004b0e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004b12:	4620      	mov	r0, r4
 8004b14:	f018 ffe8 	bl	801dae8 <lv_obj_get_style_prop>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 8004b18:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8004b1c:	2245      	movs	r2, #69	; 0x45
 8004b1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004b22:	4620      	mov	r0, r4
 8004b24:	f018 ffe0 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004b28:	b2c0      	uxtb	r0, r0
        }
    }

#if LV_DRAW_COMPLEX
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8004b2a:	2802      	cmp	r0, #2
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 8004b2c:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8004b30:	d91b      	bls.n	8004b6a <lv_obj_draw+0x2a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8004b32:	2240      	movs	r2, #64	; 0x40
 8004b34:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f018 ffd5 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004b3e:	b200      	sxth	r0, r0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
        if(dsc->shadow_width > 0) {
 8004b40:	2800      	cmp	r0, #0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 8004b42:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
        if(dsc->shadow_width > 0) {
 8004b46:	f340 80da 	ble.w	8004cfe <lv_obj_draw+0x436>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8004b4a:	2243      	movs	r2, #67	; 0x43
 8004b4c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004b50:	4620      	mov	r0, r4
 8004b52:	f018 ffc9 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8004b56:	2244      	movs	r2, #68	; 0x44
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 8004b58:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 8004b5c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004b60:	4620      	mov	r0, r4
 8004b62:	f018 ffc1 	bl	801dae8 <lv_obj_get_style_prop>
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8004b66:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
    return (bool)v.num;
}

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8004b6a:	2260      	movs	r2, #96	; 0x60
 8004b6c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004b70:	4620      	mov	r0, r4
 8004b72:	f018 ffb9 	bl	801dae8 <lv_obj_get_style_prop>
            dsc->shadow_opa = LV_OPA_TRANSP;
        }
    }

    lv_opa_t opa = lv_obj_get_style_opa(obj, LV_PART_SCROLLBAR);
    if(opa < LV_OPA_MAX) {
 8004b76:	b2c0      	uxtb	r0, r0
 8004b78:	28fc      	cmp	r0, #252	; 0xfc
 8004b7a:	d80b      	bhi.n	8004b94 <lv_obj_draw+0x2cc>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 8004b7c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004b80:	4343      	muls	r3, r0
 8004b82:	121b      	asrs	r3, r3, #8
 8004b84:	f88d 3013 	strb.w	r3, [sp, #19]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 8004b88:	4343      	muls	r3, r0
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 8004b90:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    }

    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 8004b94:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8004b98:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	d046      	beq.n	8004c34 <lv_obj_draw+0x36c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8004ba6:	220b      	movs	r2, #11
 8004ba8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004bac:	4620      	mov	r0, r4
 8004bae:	f018 ff9b 	bl	801dae8 <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8004bb2:	4631      	mov	r1, r6
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 8004bb4:	f8ad 0010 	strh.w	r0, [sp, #16]
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8004bb8:	a812      	add	r0, sp, #72	; 0x48
 8004bba:	f017 fc93 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 8004bbe:	4b52      	ldr	r3, [pc, #328]	; (8004d08 <lv_obj_draw+0x440>)
    if(lv_area_get_size(&hor_area) > 0) {
 8004bc0:	4668      	mov	r0, sp
    part_dsc.rect_dsc = &draw_dsc;
 8004bc2:	9516      	str	r5, [sp, #88]	; 0x58
    part_dsc.class_p = MY_CLASS;
 8004bc4:	9313      	str	r3, [sp, #76]	; 0x4c
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	9314      	str	r3, [sp, #80]	; 0x50
    part_dsc.part = LV_PART_SCROLLBAR;
 8004bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bce:	931f      	str	r3, [sp, #124]	; 0x7c
    if(lv_area_get_size(&hor_area) > 0) {
 8004bd0:	f01f fb55 	bl	802427e <lv_area_get_size>
 8004bd4:	b180      	cbz	r0, 8004bf8 <lv_obj_draw+0x330>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004bd6:	aa12      	add	r2, sp, #72	; 0x48
 8004bd8:	211a      	movs	r1, #26
 8004bda:	4620      	mov	r0, r4
        part_dsc.draw_area = &hor_area;
 8004bdc:	f8cd d054 	str.w	sp, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004be0:	f7ff fdb0 	bl	8004744 <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 8004be4:	466a      	mov	r2, sp
 8004be6:	4629      	mov	r1, r5
 8004be8:	4630      	mov	r0, r6
 8004bea:	f01a fc10 	bl	801f40e <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8004bee:	aa12      	add	r2, sp, #72	; 0x48
 8004bf0:	211b      	movs	r1, #27
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7ff fda6 	bl	8004744 <lv_event_send>
    if(lv_area_get_size(&ver_area) > 0) {
 8004bf8:	a802      	add	r0, sp, #8
 8004bfa:	f01f fb40 	bl	802427e <lv_area_get_size>
 8004bfe:	b1c8      	cbz	r0, 8004c34 <lv_obj_draw+0x36c>
        part_dsc.draw_area = &ver_area;
 8004c00:	ab02      	add	r3, sp, #8
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004c02:	aa12      	add	r2, sp, #72	; 0x48
 8004c04:	211a      	movs	r1, #26
 8004c06:	4620      	mov	r0, r4
        part_dsc.draw_area = &ver_area;
 8004c08:	9315      	str	r3, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004c0a:	f7ff fd9b 	bl	8004744 <lv_event_send>
        part_dsc.draw_area = &ver_area;
 8004c0e:	ab02      	add	r3, sp, #8
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 8004c10:	4629      	mov	r1, r5
 8004c12:	4630      	mov	r0, r6
 8004c14:	461a      	mov	r2, r3
        part_dsc.draw_area = &ver_area;
 8004c16:	9315      	str	r3, [sp, #84]	; 0x54
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 8004c18:	f01a fbf9 	bl	801f40e <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8004c1c:	aa12      	add	r2, sp, #72	; 0x48
 8004c1e:	211b      	movs	r1, #27
 8004c20:	4620      	mov	r0, r4
 8004c22:	f7ff fd8f 	bl	8004744 <lv_event_send>
 8004c26:	e005      	b.n	8004c34 <lv_obj_draw+0x36c>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8004c28:	a802      	add	r0, sp, #8
 8004c2a:	f01f fb28 	bl	802427e <lv_area_get_size>
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	f47f af3e 	bne.w	8004ab0 <lv_obj_draw+0x1e8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8004c34:	2217      	movs	r2, #23
 8004c36:	2100      	movs	r1, #0
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f018 ff55 	bl	801dae8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8004c3e:	b150      	cbz	r0, 8004c56 <lv_obj_draw+0x38e>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8004c40:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8004c44:	f003 fb78 	bl	8008338 <lv_draw_mask_remove_custom>
            if(param) {
 8004c48:	4605      	mov	r5, r0
 8004c4a:	b120      	cbz	r0, 8004c56 <lv_obj_draw+0x38e>
                lv_draw_mask_free_param(param);
 8004c4c:	f01a fb9e 	bl	801f38c <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 8004c50:	4628      	mov	r0, r5
 8004c52:	f00d fdfb 	bl	801284c <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8004c56:	2234      	movs	r2, #52	; 0x34
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f018 ff44 	bl	801dae8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8004c60:	2800      	cmp	r0, #0
 8004c62:	f43f ae4e 	beq.w	8004902 <lv_obj_draw+0x3a>
            lv_draw_rect_dsc_init(&draw_dsc);
 8004c66:	f10d 0810 	add.w	r8, sp, #16
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8004c6a:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	f003 fe99 	bl	80089a4 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8004c72:	4642      	mov	r2, r8
 8004c74:	4629      	mov	r1, r5
 8004c76:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8004c78:	f88d 5013 	strb.w	r5, [sp, #19]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 8004c7c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 8004c80:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8004c84:	f88d 5046 	strb.w	r5, [sp, #70]	; 0x46
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8004c88:	f017 f936 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8004c8c:	2268      	movs	r2, #104	; 0x68
 8004c8e:	4629      	mov	r1, r5
 8004c90:	4620      	mov	r0, r4
 8004c92:	f018 ff29 	bl	801dae8 <lv_obj_get_style_prop>
 8004c96:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004c98:	2269      	movs	r2, #105	; 0x69
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f018 ff23 	bl	801dae8 <lv_obj_get_style_prop>
    dest->y2 = src->y2;
 8004ca2:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
    dest->y1 = src->y1;
 8004ca6:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
            coords.x1 -= w;
 8004caa:	b2bb      	uxth	r3, r7
 8004cac:	8aa1      	ldrh	r1, [r4, #20]
            coords.y1 -= h;
 8004cae:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 8004cb0:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
 8004cb4:	1a12      	subs	r2, r2, r0
            coords.x1 -= w;
 8004cb6:	1ac9      	subs	r1, r1, r3
            coords.y2 += h;
 8004cb8:	4460      	add	r0, ip
            coords.x2 += w;
 8004cba:	4473      	add	r3, lr
            coords.x1 -= w;
 8004cbc:	f8ad 1008 	strh.w	r1, [sp, #8]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8004cc0:	4631      	mov	r1, r6
            coords.y2 += h;
 8004cc2:	f8ad 000e 	strh.w	r0, [sp, #14]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8004cc6:	a812      	add	r0, sp, #72	; 0x48
            coords.x2 += w;
 8004cc8:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.y1 -= h;
 8004ccc:	f8ad 200a 	strh.w	r2, [sp, #10]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8004cd0:	f017 fc08 	bl	801c4e4 <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <lv_obj_draw+0x440>)
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004cd6:	aa12      	add	r2, sp, #72	; 0x48
 8004cd8:	211a      	movs	r1, #26
 8004cda:	4620      	mov	r0, r4
            part_dsc.class_p = MY_CLASS;
 8004cdc:	9313      	str	r3, [sp, #76]	; 0x4c
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 8004cde:	2301      	movs	r3, #1
            part_dsc.rect_dsc = &draw_dsc;
 8004ce0:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 8004ce4:	9314      	str	r3, [sp, #80]	; 0x50
            part_dsc.draw_area = &coords;
 8004ce6:	ab02      	add	r3, sp, #8
            part_dsc.part = LV_PART_MAIN;
 8004ce8:	951f      	str	r5, [sp, #124]	; 0x7c
            part_dsc.draw_area = &coords;
 8004cea:	9315      	str	r3, [sp, #84]	; 0x54
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004cec:	f7ff fd2a 	bl	8004744 <lv_event_send>
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8004cf0:	aa02      	add	r2, sp, #8
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	e6c6      	b.n	8004a84 <lv_obj_draw+0x1bc>
            dsc->border_opa = LV_OPA_TRANSP;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8004cfc:	e70e      	b.n	8004b1c <lv_obj_draw+0x254>
            dsc->shadow_opa = LV_OPA_TRANSP;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8004d04:	e731      	b.n	8004b6a <lv_obj_draw+0x2a2>
 8004d06:	bf00      	nop
 8004d08:	08028e20 	.word	0x08028e20

08004d0c <lv_init>:
{
 8004d0c:	b510      	push	{r4, lr}
    if(lv_initialized) {
 8004d0e:	4c11      	ldr	r4, [pc, #68]	; (8004d54 <lv_init+0x48>)
 8004d10:	7823      	ldrb	r3, [r4, #0]
 8004d12:	b9f3      	cbnz	r3, 8004d52 <lv_init+0x46>
    lv_mem_init();
 8004d14:	f00d fcf2 	bl	80126fc <lv_mem_init>
    _lv_timer_core_init();
 8004d18:	f00d fe88 	bl	8012a2c <_lv_timer_core_init>
    _lv_fs_init();
 8004d1c:	f00d fc90 	bl	8012640 <_lv_fs_init>
    _lv_anim_core_init();
 8004d20:	f00d fb08 	bl	8012334 <_lv_anim_core_init>
    _lv_group_init();
 8004d24:	f7ff fd40 	bl	80047a8 <_lv_group_init>
    lv_draw_init();
 8004d28:	f019 fd52 	bl	801e7d0 <lv_draw_init>
    _lv_obj_style_init();
 8004d2c:	f001 fb04 	bl	8006338 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8004d30:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8004d34:	4808      	ldr	r0, [pc, #32]	; (8004d58 <lv_init+0x4c>)
 8004d36:	f01f fe83 	bl	8024a40 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8004d3a:	215c      	movs	r1, #92	; 0x5c
 8004d3c:	4807      	ldr	r0, [pc, #28]	; (8004d5c <lv_init+0x50>)
 8004d3e:	f01f fe7f 	bl	8024a40 <_lv_ll_init>
    _lv_refr_init();
 8004d42:	f019 fc3e 	bl	801e5c2 <_lv_refr_init>
    _lv_img_decoder_init();
 8004d46:	f004 f9d1 	bl	80090ec <_lv_img_decoder_init>
    lv_extra_init();
 8004d4a:	f01e f909 	bl	8022f60 <lv_extra_init>
    lv_initialized = true;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	7023      	strb	r3, [r4, #0]
}
 8004d52:	bd10      	pop	{r4, pc}
 8004d54:	24010d2c 	.word	0x24010d2c
 8004d58:	240013f8 	.word	0x240013f8
 8004d5c:	240013ec 	.word	0x240013ec

08004d60 <lv_obj_create>:
{
 8004d60:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8004d62:	4804      	ldr	r0, [pc, #16]	; (8004d74 <lv_obj_create+0x14>)
{
 8004d64:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8004d66:	f000 f85b 	bl	8004e20 <lv_obj_class_create_obj>
 8004d6a:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8004d6c:	f017 f866 	bl	801be3c <lv_obj_class_init_obj>
}
 8004d70:	4620      	mov	r0, r4
 8004d72:	bd10      	pop	{r4, pc}
 8004d74:	08028e20 	.word	0x08028e20

08004d78 <lv_obj_destructor>:
{
 8004d78:	b510      	push	{r4, lr}
    _lv_event_mark_deleted(obj);
 8004d7a:	4608      	mov	r0, r1
{
 8004d7c:	460c      	mov	r4, r1
    _lv_event_mark_deleted(obj);
 8004d7e:	f7ff fd01 	bl	8004784 <_lv_event_mark_deleted>
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 8004d82:	2000      	movs	r0, #0
 8004d84:	f001 fade 	bl	8006344 <lv_obj_enable_style_refresh>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8004d88:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <lv_obj_destructor+0x64>)
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f018 ffe4 	bl	801dd5a <lv_obj_remove_style>
    lv_obj_enable_style_refresh(true);
 8004d92:	2001      	movs	r0, #1
 8004d94:	f001 fad6 	bl	8006344 <lv_obj_enable_style_refresh>
    lv_anim_del(obj, NULL);
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f00d fb00 	bl	80123a0 <lv_anim_del>
    lv_group_t * group = lv_obj_get_group(obj);
 8004da0:	4620      	mov	r0, r4
 8004da2:	f016 fe75 	bl	801ba90 <lv_obj_get_group>
    if(group) lv_group_remove_obj(obj);
 8004da6:	b110      	cbz	r0, 8004dae <lv_obj_destructor+0x36>
 8004da8:	4620      	mov	r0, r4
 8004daa:	f016 fb6e 	bl	801b48a <lv_group_remove_obj>
    if(obj->spec_attr) {
 8004dae:	68a3      	ldr	r3, [r4, #8]
 8004db0:	b19b      	cbz	r3, 8004dda <lv_obj_destructor+0x62>
        if(obj->spec_attr->children) {
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	b120      	cbz	r0, 8004dc0 <lv_obj_destructor+0x48>
            lv_mem_free(obj->spec_attr->children);
 8004db6:	f00d fccd 	bl	8012754 <lv_mem_free>
            obj->spec_attr->children = NULL;
 8004dba:	68a3      	ldr	r3, [r4, #8]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
        if(obj->spec_attr->event_dsc) {
 8004dc0:	68a3      	ldr	r3, [r4, #8]
 8004dc2:	68d8      	ldr	r0, [r3, #12]
 8004dc4:	b120      	cbz	r0, 8004dd0 <lv_obj_destructor+0x58>
            lv_mem_free(obj->spec_attr->event_dsc);
 8004dc6:	f00d fcc5 	bl	8012754 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 8004dca:	68a3      	ldr	r3, [r4, #8]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	60da      	str	r2, [r3, #12]
        lv_mem_free(obj->spec_attr);
 8004dd0:	68a0      	ldr	r0, [r4, #8]
 8004dd2:	f00d fcbf 	bl	8012754 <lv_mem_free>
        obj->spec_attr = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60a3      	str	r3, [r4, #8]
}
 8004dda:	bd10      	pop	{r4, pc}
 8004ddc:	000fffff 	.word	0x000fffff

08004de0 <lv_obj_allocate_spec_attr>:
{
 8004de0:	b538      	push	{r3, r4, r5, lr}
    if(obj->spec_attr == NULL) {
 8004de2:	6885      	ldr	r5, [r0, #8]
{
 8004de4:	4604      	mov	r4, r0
    if(obj->spec_attr == NULL) {
 8004de6:	b9bd      	cbnz	r5, 8004e18 <lv_obj_allocate_spec_attr+0x38>
        x++;
 8004de8:	4a0c      	ldr	r2, [pc, #48]	; (8004e1c <lv_obj_allocate_spec_attr+0x3c>)
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8004dea:	201c      	movs	r0, #28
        x++;
 8004dec:	6813      	ldr	r3, [r2, #0]
 8004dee:	3301      	adds	r3, #1
 8004df0:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8004df2:	f00d fc91 	bl	8012718 <lv_mem_alloc>
 8004df6:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8004df8:	b900      	cbnz	r0, 8004dfc <lv_obj_allocate_spec_attr+0x1c>
 8004dfa:	e7fe      	b.n	8004dfa <lv_obj_allocate_spec_attr+0x1a>
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void lv_memset_00(void * dst, size_t len)
{
    memset(dst, 0x00, len);
 8004dfc:	221c      	movs	r2, #28
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f015 fcc2 	bl	801a788 <memset>
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8004e04:	68a2      	ldr	r2, [r4, #8]
 8004e06:	7e53      	ldrb	r3, [r2, #25]
 8004e08:	f043 030f 	orr.w	r3, r3, #15
 8004e0c:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8004e0e:	68a2      	ldr	r2, [r4, #8]
 8004e10:	7e13      	ldrb	r3, [r2, #24]
 8004e12:	f043 0303 	orr.w	r3, r3, #3
 8004e16:	7613      	strb	r3, [r2, #24]
}
 8004e18:	bd38      	pop	{r3, r4, r5, pc}
 8004e1a:	bf00      	nop
 8004e1c:	24001158 	.word	0x24001158

08004e20 <lv_obj_class_create_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_obj_class_create_obj(const lv_obj_class_t * class_p, lv_obj_t * parent)
{
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
 8004e22:	4602      	mov	r2, r0
{
 8004e24:	460d      	mov	r5, r1
 8004e26:	4607      	mov	r7, r0
    while(base && base->instance_size == 0) base = base->base_class;
 8004e28:	4935      	ldr	r1, [pc, #212]	; (8004f00 <lv_obj_class_create_obj+0xe0>)
 8004e2a:	b13a      	cbz	r2, 8004e3c <lv_obj_class_create_obj+0x1c>
 8004e2c:	6996      	ldr	r6, [r2, #24]
 8004e2e:	4231      	tst	r1, r6
 8004e30:	d002      	beq.n	8004e38 <lv_obj_class_create_obj+0x18>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/

    return base->instance_size;
 8004e32:	f3c6 160f 	ubfx	r6, r6, #4, #16
 8004e36:	e002      	b.n	8004e3e <lv_obj_class_create_obj+0x1e>
    while(base && base->instance_size == 0) base = base->base_class;
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	e7f6      	b.n	8004e2a <lv_obj_class_create_obj+0xa>
    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8004e3c:	4616      	mov	r6, r2
    lv_obj_t * obj = lv_mem_alloc(s);
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f00d fc6a 	bl	8012718 <lv_mem_alloc>
    if(obj == NULL) return NULL;
 8004e44:	4604      	mov	r4, r0
 8004e46:	b168      	cbz	r0, 8004e64 <lv_obj_class_create_obj+0x44>
 8004e48:	4632      	mov	r2, r6
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	f015 fc9c 	bl	801a788 <memset>
    obj->parent = parent;
 8004e50:	e9c4 7500 	strd	r7, r5, [r4]
    if(parent == NULL) {
 8004e54:	bb6d      	cbnz	r5, 8004eb2 <lv_obj_class_create_obj+0x92>
        lv_disp_t * disp = lv_disp_get_default();
 8004e56:	f00d f94d 	bl	80120f4 <lv_disp_get_default>
        if(!disp) {
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	b928      	cbnz	r0, 8004e6a <lv_obj_class_create_obj+0x4a>
            lv_mem_free(obj);
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f00d fc78 	bl	8012754 <lv_mem_free>
    if(obj == NULL) return NULL;
 8004e64:	2400      	movs	r4, #0
}
 8004e66:	4620      	mov	r0, r4
 8004e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(disp->screens == NULL) {
 8004e6a:	68c0      	ldr	r0, [r0, #12]
 8004e6c:	b998      	cbnz	r0, 8004e96 <lv_obj_class_create_obj+0x76>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8004e6e:	2004      	movs	r0, #4
 8004e70:	f00d fc52 	bl	8012718 <lv_mem_alloc>
            disp->screen_cnt = 1;
 8004e74:	2301      	movs	r3, #1
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8004e76:	60e8      	str	r0, [r5, #12]
            disp->screens[0] = obj;
 8004e78:	6004      	str	r4, [r0, #0]
            disp->screen_cnt = 1;
 8004e7a:	626b      	str	r3, [r5, #36]	; 0x24
        obj->coords.x1 = 0;
 8004e7c:	2500      	movs	r5, #0
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8004e7e:	4628      	mov	r0, r5
        obj->coords.x1 = 0;
 8004e80:	6165      	str	r5, [r4, #20]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8004e82:	f00d f93d 	bl	8012100 <lv_disp_get_hor_res>
 8004e86:	3801      	subs	r0, #1
 8004e88:	8320      	strh	r0, [r4, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f00d f948 	bl	8012120 <lv_disp_get_ver_res>
 8004e90:	3801      	subs	r0, #1
 8004e92:	8360      	strh	r0, [r4, #26]
 8004e94:	e7e7      	b.n	8004e66 <lv_obj_class_create_obj+0x46>
            disp->screen_cnt++;
 8004e96:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004e98:	3101      	adds	r1, #1
 8004e9a:	6269      	str	r1, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8004e9c:	0089      	lsls	r1, r1, #2
 8004e9e:	f00d fc71 	bl	8012784 <lv_mem_realloc>
            disp->screens[disp->screen_cnt - 1] = obj;
 8004ea2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8004ea4:	60e8      	str	r0, [r5, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 8004ea6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8004eb0:	e7e4      	b.n	8004e7c <lv_obj_class_create_obj+0x5c>
        if(parent->spec_attr == NULL) {
 8004eb2:	68ab      	ldr	r3, [r5, #8]
 8004eb4:	b913      	cbnz	r3, 8004ebc <lv_obj_class_create_obj+0x9c>
            lv_obj_allocate_spec_attr(parent);
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f7ff ff92 	bl	8004de0 <lv_obj_allocate_spec_attr>
        if(parent->spec_attr->children == NULL) {
 8004ebc:	68ae      	ldr	r6, [r5, #8]
 8004ebe:	6833      	ldr	r3, [r6, #0]
 8004ec0:	b953      	cbnz	r3, 8004ed8 <lv_obj_class_create_obj+0xb8>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8004ec2:	2004      	movs	r0, #4
 8004ec4:	f00d fc28 	bl	8012718 <lv_mem_alloc>
 8004ec8:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[0] = obj;
 8004eca:	68ab      	ldr	r3, [r5, #8]
            parent->spec_attr->child_cnt = 1;
 8004ecc:	2201      	movs	r2, #1
            parent->spec_attr->children[0] = obj;
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	601c      	str	r4, [r3, #0]
            parent->spec_attr->child_cnt = 1;
 8004ed2:	68ab      	ldr	r3, [r5, #8]
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	e7c6      	b.n	8004e66 <lv_obj_class_create_obj+0x46>
            parent->spec_attr->child_cnt++;
 8004ed8:	6873      	ldr	r3, [r6, #4]
 8004eda:	3301      	adds	r3, #1
 8004edc:	6073      	str	r3, [r6, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8004ede:	68ae      	ldr	r6, [r5, #8]
 8004ee0:	6871      	ldr	r1, [r6, #4]
 8004ee2:	6830      	ldr	r0, [r6, #0]
 8004ee4:	0089      	lsls	r1, r1, #2
 8004ee6:	f00d fc4d 	bl	8012784 <lv_mem_realloc>
 8004eea:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8004eec:	68aa      	ldr	r2, [r5, #8]
 8004eee:	6853      	ldr	r3, [r2, #4]
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8004efc:	e7b3      	b.n	8004e66 <lv_obj_class_create_obj+0x46>
 8004efe:	bf00      	nop
 8004f00:	000ffff0 	.word	0x000ffff0

08004f04 <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 8004f04:	b538      	push	{r3, r4, r5, lr}
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8004f06:	490b      	ldr	r1, [pc, #44]	; (8004f34 <lv_obj_is_layout_positioned+0x30>)
{
 8004f08:	4605      	mov	r5, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8004f0a:	f016 fdb9 	bl	801ba80 <lv_obj_has_flag_any>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	b108      	cbz	r0, 8004f16 <lv_obj_is_layout_positioned+0x12>
 8004f12:	2000      	movs	r0, #0
    if(parent == NULL) return false;

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
    if(layout) return true;
    else return false;
}
 8004f14:	bd38      	pop	{r3, r4, r5, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004f16:	4628      	mov	r0, r5
 8004f18:	f019 f96a 	bl	801e1f0 <lv_obj_get_parent>
    if(parent == NULL) return false;
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d0f8      	beq.n	8004f12 <lv_obj_is_layout_positioned+0xe>
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004f20:	220a      	movs	r2, #10
 8004f22:	4621      	mov	r1, r4
 8004f24:	f018 fde0 	bl	801dae8 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8004f28:	b280      	uxth	r0, r0
    if(layout) return true;
 8004f2a:	3800      	subs	r0, #0
 8004f2c:	bf18      	it	ne
 8004f2e:	2001      	movne	r0, #1
 8004f30:	e7f0      	b.n	8004f14 <lv_obj_is_layout_positioned+0x10>
 8004f32:	bf00      	nop
 8004f34:	00060001 	.word	0x00060001

08004f38 <lv_layout_register>:

    mutex = false;
}

uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data)
{
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    layout_cnt++;
 8004f3a:	4f0d      	ldr	r7, [pc, #52]	; (8004f70 <lv_layout_register+0x38>)
{
 8004f3c:	4606      	mov	r6, r0
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004f3e:	4d0d      	ldr	r5, [pc, #52]	; (8004f74 <lv_layout_register+0x3c>)
{
 8004f40:	460c      	mov	r4, r1
    layout_cnt++;
 8004f42:	683b      	ldr	r3, [r7, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004f44:	6828      	ldr	r0, [r5, #0]
    layout_cnt++;
 8004f46:	3301      	adds	r3, #1
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004f48:	00d9      	lsls	r1, r3, #3
    layout_cnt++;
 8004f4a:	603b      	str	r3, [r7, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004f4c:	f00d fc1a 	bl	8012784 <lv_mem_realloc>
 8004f50:	4603      	mov	r3, r0
 8004f52:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 8004f54:	b900      	cbnz	r0, 8004f58 <lv_layout_register+0x20>
 8004f56:	e7fe      	b.n	8004f56 <lv_layout_register+0x1e>

    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].cb = cb;
 8004f58:	6838      	ldr	r0, [r7, #0]
 8004f5a:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8004f5e:	3a01      	subs	r2, #1
 8004f60:	f843 6032 	str.w	r6, [r3, r2, lsl #3]
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].user_data = user_data;
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f6a:	605c      	str	r4, [r3, #4]
    return layout_cnt;  /*No -1 to skip 0th index*/
}
 8004f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	2400115c 	.word	0x2400115c
 8004f74:	240013ac 	.word	0x240013ac

08004f78 <lv_obj_get_self_width>:

}

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
    lv_point_t p = {0, LV_COORD_MIN};
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <lv_obj_get_self_width+0x18>)
{
 8004f7a:	b507      	push	{r0, r1, r2, lr}
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8004f7c:	212c      	movs	r1, #44	; 0x2c
 8004f7e:	aa01      	add	r2, sp, #4
    lv_point_t p = {0, LV_COORD_MIN};
 8004f80:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8004f82:	f7ff fbdf 	bl	8004744 <lv_event_send>
    return p.x;
}
 8004f86:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8004f8a:	b003      	add	sp, #12
 8004f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f90:	e0010000 	.word	0xe0010000

08004f94 <lv_obj_refr_pos>:
    lv_obj_mark_layout_as_dirty(obj);
    return true;
}

void lv_obj_refr_pos(lv_obj_t * obj)
{
 8004f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f98:	b087      	sub	sp, #28
 8004f9a:	4680      	mov	r8, r0
    if(lv_obj_is_layout_positioned(obj)) return;
 8004f9c:	f7ff ffb2 	bl	8004f04 <lv_obj_is_layout_positioned>
 8004fa0:	4605      	mov	r5, r0
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	f040 8123 	bne.w	80051ee <lv_obj_refr_pos+0x25a>


    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004fa8:	4640      	mov	r0, r8
 8004faa:	f019 f921 	bl	801e1f0 <lv_obj_get_parent>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8004fae:	4629      	mov	r1, r5
 8004fb0:	2207      	movs	r2, #7
 8004fb2:	9000      	str	r0, [sp, #0]
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	f018 fd97 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8004fba:	4629      	mov	r1, r5
    return (lv_coord_t)v.num;
 8004fbc:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	f018 fd91 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t x = lv_obj_get_style_x(obj, LV_PART_MAIN);
    lv_coord_t y = lv_obj_get_style_y(obj, LV_PART_MAIN);

    if(parent == NULL) {
 8004fc6:	9b00      	ldr	r3, [sp, #0]
    return (lv_coord_t)v.num;
 8004fc8:	b205      	sxth	r5, r0
 8004fca:	b93b      	cbnz	r3, 8004fdc <lv_obj_refr_pos+0x48>
                y += ph / 2 - h / 2;
                break;
            default:
                break;
        }
        lv_obj_move_to(obj, x, y);
 8004fcc:	462a      	mov	r2, r5
 8004fce:	4621      	mov	r1, r4
 8004fd0:	4640      	mov	r0, r8
    }
}
 8004fd2:	b007      	add	sp, #28
 8004fd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_move_to(obj, x, y);
 8004fd8:	f017 be7e 	b.w	801ccd8 <lv_obj_move_to>
    lv_coord_t pw = lv_obj_get_content_width(parent);
 8004fdc:	9800      	ldr	r0, [sp, #0]
 8004fde:	f017 fc69 	bl	801c8b4 <lv_obj_get_content_width>
 8004fe2:	4607      	mov	r7, r0
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8004fe4:	9800      	ldr	r0, [sp, #0]
 8004fe6:	f017 fc7b 	bl	801c8e0 <lv_obj_get_content_height>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8004fea:	f404 43c0 	and.w	r3, r4, #24576	; 0x6000
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8004fee:	4606      	mov	r6, r0
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8004ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff4:	d10f      	bne.n	8005016 <lv_obj_refr_pos+0x82>
 8004ff6:	f424 43c0 	bic.w	r3, r4, #24576	; 0x6000
 8004ffa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004ffe:	dc0a      	bgt.n	8005016 <lv_obj_refr_pos+0x82>
 8005000:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005004:	f04f 0264 	mov.w	r2, #100	; 0x64
 8005008:	bfc8      	it	gt
 800500a:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 800500e:	437b      	muls	r3, r7
 8005010:	fb93 f3f2 	sdiv	r3, r3, r2
 8005014:	b21c      	sxth	r4, r3
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8005016:	f405 43c0 	and.w	r3, r5, #24576	; 0x6000
 800501a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800501e:	d10f      	bne.n	8005040 <lv_obj_refr_pos+0xac>
 8005020:	f425 43c0 	bic.w	r3, r5, #24576	; 0x6000
 8005024:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005028:	dc0a      	bgt.n	8005040 <lv_obj_refr_pos+0xac>
 800502a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800502e:	f04f 0264 	mov.w	r2, #100	; 0x64
 8005032:	bfc8      	it	gt
 8005034:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8005038:	4373      	muls	r3, r6
 800503a:	fb93 f3f2 	sdiv	r3, r3, r2
 800503e:	b21d      	sxth	r5, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8005040:	226a      	movs	r2, #106	; 0x6a
 8005042:	2100      	movs	r1, #0
 8005044:	4640      	mov	r0, r8
 8005046:	f018 fd4f 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800504a:	226b      	movs	r2, #107	; 0x6b
    return (lv_coord_t)v.num;
 800504c:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8005050:	2100      	movs	r1, #0
 8005052:	4640      	mov	r0, r8
 8005054:	f018 fd48 	bl	801dae8 <lv_obj_get_style_prop>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005058:	f8b8 3014 	ldrh.w	r3, [r8, #20]
    return (lv_coord_t)v.num;
 800505c:	b200      	sxth	r0, r0
 800505e:	9301      	str	r3, [sp, #4]
 8005060:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 8005064:	9a01      	ldr	r2, [sp, #4]
 8005066:	3301      	adds	r3, #1
 8005068:	b29b      	uxth	r3, r3
 800506a:	eba3 0a02 	sub.w	sl, r3, r2
 800506e:	9304      	str	r3, [sp, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005070:	f8b8 3016 	ldrh.w	r3, [r8, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005074:	fa0f fa8a 	sxth.w	sl, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005078:	9302      	str	r3, [sp, #8]
 800507a:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800507e:	9a02      	ldr	r2, [sp, #8]
 8005080:	3301      	adds	r3, #1
 8005082:	b29b      	uxth	r3, r3
 8005084:	eba3 0902 	sub.w	r9, r3, r2
 8005088:	9303      	str	r3, [sp, #12]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800508a:	f40b 43c0 	and.w	r3, fp, #24576	; 0x6000
 800508e:	fa0f f989 	sxth.w	r9, r9
 8005092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005096:	d111      	bne.n	80050bc <lv_obj_refr_pos+0x128>
 8005098:	f42b 43c0 	bic.w	r3, fp, #24576	; 0x6000
 800509c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050a0:	dc0c      	bgt.n	80050bc <lv_obj_refr_pos+0x128>
 80050a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050a6:	f04f 0264 	mov.w	r2, #100	; 0x64
 80050aa:	bfc8      	it	gt
 80050ac:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 80050b0:	fb03 f30a 	mul.w	r3, r3, sl
 80050b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80050b8:	fa0f fb83 	sxth.w	fp, r3
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80050bc:	f400 43c0 	and.w	r3, r0, #24576	; 0x6000
 80050c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c4:	d110      	bne.n	80050e8 <lv_obj_refr_pos+0x154>
 80050c6:	f420 43c0 	bic.w	r3, r0, #24576	; 0x6000
 80050ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050ce:	dc0b      	bgt.n	80050e8 <lv_obj_refr_pos+0x154>
 80050d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050d4:	f04f 0264 	mov.w	r2, #100	; 0x64
 80050d8:	bfc8      	it	gt
 80050da:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 80050de:	fb03 f309 	mul.w	r3, r3, r9
 80050e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80050e6:	b218      	sxth	r0, r3
    x += tr_x;
 80050e8:	445c      	add	r4, fp
    y += tr_y;
 80050ea:	4405      	add	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80050ec:	2209      	movs	r2, #9
 80050ee:	2100      	movs	r1, #0
    x += tr_x;
 80050f0:	b2a3      	uxth	r3, r4
 80050f2:	4640      	mov	r0, r8
    y += tr_y;
 80050f4:	fa1f fb85 	uxth.w	fp, r5
    x += tr_x;
 80050f8:	9305      	str	r3, [sp, #20]
 80050fa:	f018 fcf5 	bl	801dae8 <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 80050fe:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    x += tr_x;
 8005102:	b224      	sxth	r4, r4
    y += tr_y;
 8005104:	b22d      	sxth	r5, r5
    if(align == LV_ALIGN_DEFAULT) {
 8005106:	9b05      	ldr	r3, [sp, #20]
 8005108:	d10c      	bne.n	8005124 <lv_obj_refr_pos+0x190>
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 800510a:	9800      	ldr	r0, [sp, #0]
 800510c:	9302      	str	r3, [sp, #8]
 800510e:	f017 fa29 	bl	801c564 <lv_obj_get_style_base_dir.constprop.0>
 8005112:	2801      	cmp	r0, #1
 8005114:	9b02      	ldr	r3, [sp, #8]
 8005116:	f47f af59 	bne.w	8004fcc <lv_obj_refr_pos+0x38>
                x += pw - w;
 800511a:	9a01      	ldr	r2, [sp, #4]
 800511c:	9904      	ldr	r1, [sp, #16]
 800511e:	1a54      	subs	r4, r2, r1
 8005120:	443c      	add	r4, r7
 8005122:	e020      	b.n	8005166 <lv_obj_refr_pos+0x1d2>
    if(align == LV_ALIGN_TOP_LEFT) {
 8005124:	2801      	cmp	r0, #1
 8005126:	f43f af51 	beq.w	8004fcc <lv_obj_refr_pos+0x38>
        switch(align) {
 800512a:	3802      	subs	r0, #2
 800512c:	2807      	cmp	r0, #7
 800512e:	f63f af4d 	bhi.w	8004fcc <lv_obj_refr_pos+0x38>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <lv_obj_refr_pos+0x1a4>)
 8005134:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8005138:	08005159 	.word	0x08005159
 800513c:	0800511b 	.word	0x0800511b
 8005140:	0800517f 	.word	0x0800517f
 8005144:	0800516d 	.word	0x0800516d
 8005148:	0800518d 	.word	0x0800518d
 800514c:	080051b3 	.word	0x080051b3
 8005150:	080051a7 	.word	0x080051a7
 8005154:	080051c3 	.word	0x080051c3
                x += pw / 2 - w / 2;
 8005158:	eb0a 74da 	add.w	r4, sl, sl, lsr #31
 800515c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8005160:	1064      	asrs	r4, r4, #1
 8005162:	ebc4 0467 	rsb	r4, r4, r7, asr #1
                x += pw - w;
 8005166:	441c      	add	r4, r3
 8005168:	b224      	sxth	r4, r4
                break;
 800516a:	e72f      	b.n	8004fcc <lv_obj_refr_pos+0x38>
                x += pw / 2 - w / 2;
 800516c:	eb0a 74da 	add.w	r4, sl, sl, lsr #31
 8005170:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8005174:	1064      	asrs	r4, r4, #1
 8005176:	ebc4 0467 	rsb	r4, r4, r7, asr #1
 800517a:	441c      	add	r4, r3
 800517c:	b224      	sxth	r4, r4
                y += ph - h;
 800517e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005182:	1a9d      	subs	r5, r3, r2
 8005184:	4435      	add	r5, r6
                y += ph / 2 - h / 2;
 8005186:	445d      	add	r5, fp
 8005188:	b22d      	sxth	r5, r5
                break;
 800518a:	e71f      	b.n	8004fcc <lv_obj_refr_pos+0x38>
                x += pw - w;
 800518c:	9a01      	ldr	r2, [sp, #4]
 800518e:	9904      	ldr	r1, [sp, #16]
 8005190:	1a54      	subs	r4, r2, r1
 8005192:	443c      	add	r4, r7
 8005194:	441c      	add	r4, r3
                y += ph - h;
 8005196:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
                x += pw - w;
 800519a:	b224      	sxth	r4, r4
                y += ph - h;
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	4433      	add	r3, r6
 80051a0:	445b      	add	r3, fp
 80051a2:	b21d      	sxth	r5, r3
                break;
 80051a4:	e712      	b.n	8004fcc <lv_obj_refr_pos+0x38>
                x += pw - w;
 80051a6:	9a01      	ldr	r2, [sp, #4]
 80051a8:	9904      	ldr	r1, [sp, #16]
 80051aa:	1a52      	subs	r2, r2, r1
 80051ac:	443a      	add	r2, r7
 80051ae:	4413      	add	r3, r2
 80051b0:	b21c      	sxth	r4, r3
                y += ph / 2 - h / 2;
 80051b2:	eb09 75d9 	add.w	r5, r9, r9, lsr #31
 80051b6:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80051ba:	106d      	asrs	r5, r5, #1
 80051bc:	ebc5 0566 	rsb	r5, r5, r6, asr #1
 80051c0:	e7e1      	b.n	8005186 <lv_obj_refr_pos+0x1f2>
                x += pw / 2 - w / 2;
 80051c2:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
                y += ph / 2 - h / 2;
 80051c6:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
                x += pw / 2 - w / 2;
 80051ca:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80051ce:	ea4f 0a6a 	mov.w	sl, sl, asr #1
                y += ph / 2 - h / 2;
 80051d2:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80051d6:	ea4f 0969 	mov.w	r9, r9, asr #1
                x += pw / 2 - w / 2;
 80051da:	ebca 0a67 	rsb	sl, sl, r7, asr #1
                y += ph / 2 - h / 2;
 80051de:	ebc9 0966 	rsb	r9, r9, r6, asr #1
                x += pw / 2 - w / 2;
 80051e2:	4453      	add	r3, sl
                y += ph / 2 - h / 2;
 80051e4:	44cb      	add	fp, r9
                x += pw / 2 - w / 2;
 80051e6:	b21c      	sxth	r4, r3
                y += ph / 2 - h / 2;
 80051e8:	fa0f f58b 	sxth.w	r5, fp
                break;
 80051ec:	e6ee      	b.n	8004fcc <lv_obj_refr_pos+0x38>
}
 80051ee:	b007      	add	sp, #28
 80051f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051f4 <lv_obj_refr_size>:
{
 80051f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(obj->w_layout && obj->h_layout) return false;
 80051f8:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
{
 80051fc:	b08f      	sub	sp, #60	; 0x3c
 80051fe:	4604      	mov	r4, r0
    if(obj->w_layout && obj->h_layout) return false;
 8005200:	f003 0306 	and.w	r3, r3, #6
 8005204:	2b06      	cmp	r3, #6
 8005206:	d103      	bne.n	8005210 <lv_obj_refr_size+0x1c>
 8005208:	2000      	movs	r0, #0
}
 800520a:	b00f      	add	sp, #60	; 0x3c
 800520c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005210:	f018 ffee 	bl	801e1f0 <lv_obj_get_parent>
    if(parent == NULL) return false;
 8005214:	4607      	mov	r7, r0
 8005216:	2800      	cmp	r0, #0
 8005218:	d0f6      	beq.n	8005208 <lv_obj_refr_size+0x14>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 800521a:	4620      	mov	r0, r4
 800521c:	f000 fd22 	bl	8005c64 <lv_obj_get_scroll_left>
    if(obj->w_layout) {
 8005220:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8005224:	9005      	str	r0, [sp, #20]
    if(obj->w_layout) {
 8005226:	f011 0104 	ands.w	r1, r1, #4
 800522a:	d020      	beq.n	800526e <lv_obj_refr_size+0x7a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800522c:	8b26      	ldrh	r6, [r4, #24]
 800522e:	8aa3      	ldrh	r3, [r4, #20]
 8005230:	3601      	adds	r6, #1
 8005232:	1af6      	subs	r6, r6, r3
    bool w_is_content = false;
 8005234:	2300      	movs	r3, #0
 8005236:	b236      	sxth	r6, r6
 8005238:	9301      	str	r3, [sp, #4]
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 800523a:	4620      	mov	r0, r4
 800523c:	f017 fecd 	bl	801cfda <lv_obj_get_scroll_top>
    if(obj->h_layout) {
 8005240:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8005244:	9006      	str	r0, [sp, #24]
    if(obj->h_layout) {
 8005246:	f011 0102 	ands.w	r1, r1, #2
 800524a:	f000 813b 	beq.w	80054c4 <lv_obj_refr_size+0x2d0>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800524e:	8b65      	ldrh	r5, [r4, #26]
 8005250:	8ae3      	ldrh	r3, [r4, #22]
 8005252:	3501      	adds	r5, #1
 8005254:	1aed      	subs	r5, r5, r3
    if(w_is_content || h_is_content) {
 8005256:	9b01      	ldr	r3, [sp, #4]
 8005258:	b22d      	sxth	r5, r5
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8169 	beq.w	8005532 <lv_obj_refr_size+0x33e>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 8005260:	2300      	movs	r3, #0
 8005262:	4620      	mov	r0, r4
 8005264:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8005268:	f017 ff58 	bl	801d11c <lv_obj_scroll_to>
 800526c:	e161      	b.n	8005532 <lv_obj_refr_size+0x33e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800526e:	2201      	movs	r2, #1
 8005270:	4620      	mov	r0, r4
 8005272:	f018 fc39 	bl	801dae8 <lv_obj_get_style_prop>
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 8005276:	f242 78d1 	movw	r8, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 800527a:	b205      	sxth	r5, r0
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 800527c:	4638      	mov	r0, r7
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 800527e:	eba5 0108 	sub.w	r1, r5, r8
 8005282:	424b      	negs	r3, r1
 8005284:	414b      	adcs	r3, r1
 8005286:	9301      	str	r3, [sp, #4]
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8005288:	f405 43c0 	and.w	r3, r5, #24576	; 0x6000
 800528c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005290:	d141      	bne.n	8005316 <lv_obj_refr_size+0x122>
 8005292:	f425 46c0 	bic.w	r6, r5, #24576	; 0x6000
 8005296:	f5b6 6ffa 	cmp.w	r6, #2000	; 0x7d0
 800529a:	dc3c      	bgt.n	8005316 <lv_obj_refr_size+0x122>
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 800529c:	f017 fb0a 	bl	801c8b4 <lv_obj_get_content_width>
        if(w_is_content) {
 80052a0:	4545      	cmp	r5, r8
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 80052a2:	9002      	str	r0, [sp, #8]
        if(w_is_content) {
 80052a4:	f040 80e1 	bne.w	800546a <lv_obj_refr_size+0x276>
 *   STATIC FUNCTIONS
 **********************/

static lv_coord_t calc_content_width(lv_obj_t * obj)
{
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 80052a8:	2200      	movs	r2, #0
 80052aa:	4620      	mov	r0, r4
 80052ac:	4611      	mov	r1, r2
 80052ae:	f000 fe4d 	bl	8005f4c <lv_obj_scroll_to_x>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80052b2:	4620      	mov	r0, r4
 80052b4:	f017 f95d 	bl	801c572 <lv_obj_get_style_border_width.constprop.0>
 80052b8:	4606      	mov	r6, r0
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 80052ba:	4620      	mov	r0, r4
 80052bc:	fa1f fa86 	uxth.w	sl, r6
 80052c0:	f017 f95e 	bl	801c580 <lv_obj_get_style_pad_right.constprop.0>
 80052c4:	fa10 f686 	uxtah	r6, r0, r6
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80052c8:	4620      	mov	r0, r4
 80052ca:	f017 f960 	bl	801c58e <lv_obj_get_style_pad_left.constprop.0>
 80052ce:	4482      	add	sl, r0
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 80052d0:	b2b6      	uxth	r6, r6

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 80052d2:	4620      	mov	r0, r4
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80052d4:	fa1f fa8a 	uxth.w	sl, sl
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 80052d8:	f7ff fe4e 	bl	8004f78 <lv_obj_get_self_width>
 80052dc:	eb06 050a 	add.w	r5, r6, sl
 80052e0:	4405      	add	r5, r0

    lv_coord_t child_res = LV_COORD_MIN;
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80052e2:	4620      	mov	r0, r4
 80052e4:	f018 ff96 	bl	801e214 <lv_obj_get_child_cnt>
 80052e8:	9003      	str	r0, [sp, #12]
    /*With RTL find the left most coordinate*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80052ea:	4620      	mov	r0, r4
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 80052ec:	b22d      	sxth	r5, r5
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80052ee:	f017 f939 	bl	801c564 <lv_obj_get_style_base_dir.constprop.0>
 80052f2:	2801      	cmp	r0, #1
 80052f4:	d029      	beq.n	800534a <lv_obj_refr_size+0x156>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80052f6:	fa0f f38a 	sxth.w	r3, sl
            child_res += pad_left;
        }
    }
    /*Else find the right most coordinate*/
    else {
        for(i = 0; i < child_cnt; i++) {
 80052fa:	f04f 0800 	mov.w	r8, #0
    lv_coord_t child_res = LV_COORD_MIN;
 80052fe:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80054bc <lv_obj_refr_size+0x2c8>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8005302:	9304      	str	r3, [sp, #16]
        for(i = 0; i < child_cnt; i++) {
 8005304:	9b03      	ldr	r3, [sp, #12]
 8005306:	4543      	cmp	r3, r8
 8005308:	d172      	bne.n	80053f0 <lv_obj_refr_size+0x1fc>
            else {
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
            }
        }

        if(child_res != LV_COORD_MIN) {
 800530a:	4b6c      	ldr	r3, [pc, #432]	; (80054bc <lv_obj_refr_size+0x2c8>)
 800530c:	4599      	cmp	r9, r3
 800530e:	d009      	beq.n	8005324 <lv_obj_refr_size+0x130>
            child_res += pad_right;
 8005310:	444e      	add	r6, r9
 8005312:	b236      	sxth	r6, r6
 8005314:	e028      	b.n	8005368 <lv_obj_refr_size+0x174>
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8005316:	f017 facd 	bl	801c8b4 <lv_obj_get_content_width>
        if(w_is_content) {
 800531a:	f242 73d1 	movw	r3, #10193	; 0x27d1
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 800531e:	9002      	str	r0, [sp, #8]
        if(w_is_content) {
 8005320:	429d      	cmp	r5, r3
 8005322:	d0c1      	beq.n	80052a8 <lv_obj_refr_size+0xb4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8005324:	2202      	movs	r2, #2
 8005326:	2100      	movs	r1, #0
 8005328:	4620      	mov	r0, r4
 800532a:	f018 fbdd 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 800532e:	2203      	movs	r2, #3
    return (lv_coord_t)v.num;
 8005330:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8005332:	2100      	movs	r1, #0
 8005334:	4620      	mov	r0, r4
 8005336:	f018 fbd7 	bl	801dae8 <lv_obj_get_style_prop>
        w = lv_clamp_width(w, minw, maxw, parent_w);
 800533a:	4631      	mov	r1, r6
 800533c:	b202      	sxth	r2, r0
 800533e:	9b02      	ldr	r3, [sp, #8]
 8005340:	4628      	mov	r0, r5
 8005342:	f017 fdaa 	bl	801ce9a <lv_clamp_width>
 8005346:	4606      	mov	r6, r0
 8005348:	e777      	b.n	800523a <lv_obj_refr_size+0x46>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 800534a:	b233      	sxth	r3, r6
        for(i = 0; i < child_cnt; i++) {
 800534c:	f04f 0900 	mov.w	r9, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8005350:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80054bc <lv_obj_refr_size+0x2c8>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8005354:	9304      	str	r3, [sp, #16]
        for(i = 0; i < child_cnt; i++) {
 8005356:	9b03      	ldr	r3, [sp, #12]
 8005358:	454b      	cmp	r3, r9
 800535a:	d10c      	bne.n	8005376 <lv_obj_refr_size+0x182>
        if(child_res != LV_COORD_MIN) {
 800535c:	4b57      	ldr	r3, [pc, #348]	; (80054bc <lv_obj_refr_size+0x2c8>)
 800535e:	4598      	cmp	r8, r3
 8005360:	d0e0      	beq.n	8005324 <lv_obj_refr_size+0x130>
            child_res += pad_left;
 8005362:	44d0      	add	r8, sl
 8005364:	fa0f f688 	sxth.w	r6, r8
        }
    }

    if(child_res == LV_COORD_MIN) return self_w;
 8005368:	4b54      	ldr	r3, [pc, #336]	; (80054bc <lv_obj_refr_size+0x2c8>)
 800536a:	429e      	cmp	r6, r3
 800536c:	d0da      	beq.n	8005324 <lv_obj_refr_size+0x130>
    else return LV_MAX(child_res, self_w);
 800536e:	42b5      	cmp	r5, r6
 8005370:	bfb8      	it	lt
 8005372:	4635      	movlt	r5, r6
 8005374:	e7d6      	b.n	8005324 <lv_obj_refr_size+0x130>
            lv_obj_t * child = obj->spec_attr->children[i];
 8005376:	68a3      	ldr	r3, [r4, #8]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005378:	4951      	ldr	r1, [pc, #324]	; (80054c0 <lv_obj_refr_size+0x2cc>)
            lv_obj_t * child = obj->spec_attr->children[i];
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f853 b029 	ldr.w	fp, [r3, r9, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005380:	4658      	mov	r0, fp
 8005382:	f016 fb7d 	bl	801ba80 <lv_obj_has_flag_any>
 8005386:	bb80      	cbnz	r0, 80053ea <lv_obj_refr_size+0x1f6>
            if(!lv_obj_is_layout_positioned(child)) {
 8005388:	4658      	mov	r0, fp
 800538a:	f7ff fdbb 	bl	8004f04 <lv_obj_is_layout_positioned>
 800538e:	4601      	mov	r1, r0
 8005390:	b958      	cbnz	r0, 80053aa <lv_obj_refr_size+0x1b6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8005392:	2209      	movs	r2, #9
 8005394:	4658      	mov	r0, fp
 8005396:	f018 fba7 	bl	801dae8 <lv_obj_get_style_prop>
                switch(align) {
 800539a:	b2c0      	uxtb	r0, r0
 800539c:	2808      	cmp	r0, #8
 800539e:	d80e      	bhi.n	80053be <lv_obj_refr_size+0x1ca>
 80053a0:	f240 1249 	movw	r2, #329	; 0x149
 80053a4:	40c2      	lsrs	r2, r0
 80053a6:	07d2      	lsls	r2, r2, #31
 80053a8:	d509      	bpl.n	80053be <lv_obj_refr_size+0x1ca>
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 80053aa:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80053ae:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	3301      	adds	r3, #1
 80053b6:	4543      	cmp	r3, r8
 80053b8:	bfb8      	it	lt
 80053ba:	4643      	movlt	r3, r8
 80053bc:	e013      	b.n	80053e6 <lv_obj_refr_size+0x1f2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 80053be:	2207      	movs	r2, #7
 80053c0:	2100      	movs	r1, #0
 80053c2:	4658      	mov	r0, fp
 80053c4:	f018 fb90 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80053c8:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_x(child, 0) == 0) {
 80053ca:	b970      	cbnz	r0, 80053ea <lv_obj_refr_size+0x1f6>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80053cc:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 80053d0:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80053d4:	3201      	adds	r2, #1
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 80053d6:	9904      	ldr	r1, [sp, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	b29a      	uxth	r2, r3
 80053dc:	fa01 f383 	sxtah	r3, r1, r3
 80053e0:	4598      	cmp	r8, r3
 80053e2:	dc02      	bgt.n	80053ea <lv_obj_refr_size+0x1f6>
 80053e4:	18b3      	adds	r3, r6, r2
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 80053e6:	fa0f f883 	sxth.w	r8, r3
        for(i = 0; i < child_cnt; i++) {
 80053ea:	f109 0901 	add.w	r9, r9, #1
 80053ee:	e7b2      	b.n	8005356 <lv_obj_refr_size+0x162>
            lv_obj_t * child = obj->spec_attr->children[i];
 80053f0:	68a3      	ldr	r3, [r4, #8]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80053f2:	4933      	ldr	r1, [pc, #204]	; (80054c0 <lv_obj_refr_size+0x2cc>)
            lv_obj_t * child = obj->spec_attr->children[i];
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80053fa:	4658      	mov	r0, fp
 80053fc:	f016 fb40 	bl	801ba80 <lv_obj_has_flag_any>
 8005400:	bb80      	cbnz	r0, 8005464 <lv_obj_refr_size+0x270>
            if(!lv_obj_is_layout_positioned(child)) {
 8005402:	4658      	mov	r0, fp
 8005404:	f7ff fd7e 	bl	8004f04 <lv_obj_is_layout_positioned>
 8005408:	4601      	mov	r1, r0
 800540a:	b950      	cbnz	r0, 8005422 <lv_obj_refr_size+0x22e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800540c:	2209      	movs	r2, #9
 800540e:	4658      	mov	r0, fp
 8005410:	f018 fb6a 	bl	801dae8 <lv_obj_get_style_prop>
                switch(align) {
 8005414:	b2c0      	uxtb	r0, r0
 8005416:	2807      	cmp	r0, #7
 8005418:	d80d      	bhi.n	8005436 <lv_obj_refr_size+0x242>
 800541a:	2293      	movs	r2, #147	; 0x93
 800541c:	40c2      	lsrs	r2, r0
 800541e:	07d3      	lsls	r3, r2, #31
 8005420:	d509      	bpl.n	8005436 <lv_obj_refr_size+0x242>
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8005422:	f9bb 3018 	ldrsh.w	r3, [fp, #24]
 8005426:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	3301      	adds	r3, #1
 800542e:	454b      	cmp	r3, r9
 8005430:	bfb8      	it	lt
 8005432:	464b      	movlt	r3, r9
 8005434:	e014      	b.n	8005460 <lv_obj_refr_size+0x26c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8005436:	2208      	movs	r2, #8
 8005438:	2100      	movs	r1, #0
 800543a:	4658      	mov	r0, fp
 800543c:	f018 fb54 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005440:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_y(child, 0) == 0) {
 8005442:	b978      	cbnz	r0, 8005464 <lv_obj_refr_size+0x270>
 8005444:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 8005448:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800544c:	3201      	adds	r2, #1
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 800544e:	9904      	ldr	r1, [sp, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	b29a      	uxth	r2, r3
 8005454:	fa01 f383 	sxtah	r3, r1, r3
 8005458:	4599      	cmp	r9, r3
 800545a:	dc03      	bgt.n	8005464 <lv_obj_refr_size+0x270>
 800545c:	eb0a 0302 	add.w	r3, sl, r2
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8005460:	fa0f f983 	sxth.w	r9, r3
        for(i = 0; i < child_cnt; i++) {
 8005464:	f108 0801 	add.w	r8, r8, #1
 8005468:	e74c      	b.n	8005304 <lv_obj_refr_size+0x110>
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 800546a:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800546e:	f011 0104 	ands.w	r1, r1, #4
 8005472:	d116      	bne.n	80054a2 <lv_obj_refr_size+0x2ae>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8005474:	2201      	movs	r2, #1
 8005476:	4638      	mov	r0, r7
 8005478:	f018 fb36 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800547c:	b200      	sxth	r0, r0
 800547e:	4540      	cmp	r0, r8
 8005480:	d10f      	bne.n	80054a2 <lv_obj_refr_size+0x2ae>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 8005482:	4620      	mov	r0, r4
 8005484:	f017 f875 	bl	801c572 <lv_obj_get_style_border_width.constprop.0>
 8005488:	4606      	mov	r6, r0
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 800548a:	4620      	mov	r0, r4
 800548c:	f017 f87f 	bl	801c58e <lv_obj_get_style_pad_left.constprop.0>
 8005490:	1985      	adds	r5, r0, r6
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 8005492:	4620      	mov	r0, r4
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 8005494:	b2ad      	uxth	r5, r5
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 8005496:	f017 f873 	bl	801c580 <lv_obj_get_style_pad_right.constprop.0>
 800549a:	4430      	add	r0, r6
 800549c:	4405      	add	r5, r0
 800549e:	b22d      	sxth	r5, r5
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 80054a0:	e740      	b.n	8005324 <lv_obj_refr_size+0x130>
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 80054a2:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 80054a6:	4633      	mov	r3, r6
 80054a8:	9a02      	ldr	r2, [sp, #8]
 80054aa:	bfc8      	it	gt
 80054ac:	f5c6 737a 	rsbgt	r3, r6, #1000	; 0x3e8
 80054b0:	4353      	muls	r3, r2
 80054b2:	2264      	movs	r2, #100	; 0x64
 80054b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80054b8:	b21d      	sxth	r5, r3
 80054ba:	e733      	b.n	8005324 <lv_obj_refr_size+0x130>
 80054bc:	ffffe001 	.word	0xffffe001
 80054c0:	00040001 	.word	0x00040001
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80054c4:	2204      	movs	r2, #4
 80054c6:	4620      	mov	r0, r4
 80054c8:	f018 fb0e 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80054cc:	fa0f fa80 	sxth.w	sl, r0
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 80054d0:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 80054d4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 80054d8:	4638      	mov	r0, r7
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 80054da:	d105      	bne.n	80054e8 <lv_obj_refr_size+0x2f4>
 80054dc:	f42a 45c0 	bic.w	r5, sl, #24576	; 0x6000
 80054e0:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80054e4:	f340 808b 	ble.w	80055fe <lv_obj_refr_size+0x40a>
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 80054e8:	f017 f9fa 	bl	801c8e0 <lv_obj_get_content_height>
        if(h_is_content) {
 80054ec:	f242 73d1 	movw	r3, #10193	; 0x27d1
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 80054f0:	9002      	str	r0, [sp, #8]
        if(h_is_content) {
 80054f2:	459a      	cmp	sl, r3
 80054f4:	f000 808a 	beq.w	800560c <lv_obj_refr_size+0x418>
 80054f8:	4655      	mov	r5, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 80054fa:	2205      	movs	r2, #5
 80054fc:	2100      	movs	r1, #0
 80054fe:	4620      	mov	r0, r4
 8005500:	f018 faf2 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8005504:	2206      	movs	r2, #6
    return (lv_coord_t)v.num;
 8005506:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800550a:	2100      	movs	r1, #0
 800550c:	4620      	mov	r0, r4
 800550e:	f018 faeb 	bl	801dae8 <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8005512:	9b02      	ldr	r3, [sp, #8]
 8005514:	b202      	sxth	r2, r0
 8005516:	4641      	mov	r1, r8
 8005518:	4628      	mov	r0, r5
 800551a:	f017 fcbe 	bl	801ce9a <lv_clamp_width>
    if(w_is_content || h_is_content) {
 800551e:	9b01      	ldr	r3, [sp, #4]
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8005520:	4605      	mov	r5, r0
    if(w_is_content || h_is_content) {
 8005522:	2b00      	cmp	r3, #0
 8005524:	f47f ae9c 	bne.w	8005260 <lv_obj_refr_size+0x6c>
 8005528:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800552c:	459a      	cmp	sl, r3
 800552e:	f43f ae97 	beq.w	8005260 <lv_obj_refr_size+0x6c>
 8005532:	8b23      	ldrh	r3, [r4, #24]
 8005534:	8aa2      	ldrh	r2, [r4, #20]
 8005536:	3301      	adds	r3, #1
 8005538:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 800553a:	b21b      	sxth	r3, r3
 800553c:	429e      	cmp	r6, r3
 800553e:	d107      	bne.n	8005550 <lv_obj_refr_size+0x35c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005540:	8b63      	ldrh	r3, [r4, #26]
 8005542:	8ae2      	ldrh	r2, [r4, #22]
 8005544:	3301      	adds	r3, #1
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	b21b      	sxth	r3, r3
 800554a:	429d      	cmp	r5, r3
 800554c:	f43f ae5c 	beq.w	8005208 <lv_obj_refr_size+0x14>
    lv_obj_invalidate(obj);
 8005550:	4620      	mov	r0, r4
    lv_area_copy(coords, &obj->coords);
 8005552:	f104 0914 	add.w	r9, r4, #20
    lv_obj_invalidate(obj);
 8005556:	f017 fba1 	bl	801cc9c <lv_obj_invalidate>
    dest->x1 = src->x1;
 800555a:	8aa3      	ldrh	r3, [r4, #20]
    lv_obj_get_content_coords(parent, &parent_fit_area);
 800555c:	a90c      	add	r1, sp, #48	; 0x30
 800555e:	4638      	mov	r0, r7
 8005560:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    dest->y1 = src->y1;
 8005564:	8ae3      	ldrh	r3, [r4, #22]
 8005566:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    dest->x2 = src->x2;
 800556a:	8b23      	ldrh	r3, [r4, #24]
 800556c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    dest->y2 = src->y2;
 8005570:	8b63      	ldrh	r3, [r4, #26]
 8005572:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8005576:	f017 f9c9 	bl	801c90c <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 800557a:	2200      	movs	r2, #0
 800557c:	a90c      	add	r1, sp, #48	; 0x30
 800557e:	a80a      	add	r0, sp, #40	; 0x28
 8005580:	f01e ffaa 	bl	80244d8 <_lv_area_is_in>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8005584:	4680      	mov	r8, r0
 8005586:	b910      	cbnz	r0, 800558e <lv_obj_refr_size+0x39a>
 8005588:	4638      	mov	r0, r7
 800558a:	f018 f97f 	bl	801d88c <lv_obj_scrollbar_invalidate>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800558e:	8ae3      	ldrh	r3, [r4, #22]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005590:	4620      	mov	r0, r4
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8005592:	b2b6      	uxth	r6, r6
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8005594:	3b01      	subs	r3, #1
 8005596:	442b      	add	r3, r5
 8005598:	8363      	strh	r3, [r4, #26]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800559a:	f016 ffe3 	bl	801c564 <lv_obj_get_style_base_dir.constprop.0>
 800559e:	2801      	cmp	r0, #1
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 80055a0:	aa0a      	add	r2, sp, #40	; 0x28
 80055a2:	f04f 0129 	mov.w	r1, #41	; 0x29
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80055a6:	bf08      	it	eq
 80055a8:	8b23      	ldrheq	r3, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 80055aa:	4620      	mov	r0, r4
        obj->coords.x2 = obj->coords.x1 + w - 1;
 80055ac:	bf15      	itete	ne
 80055ae:	8aa3      	ldrhne	r3, [r4, #20]
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80055b0:	3301      	addeq	r3, #1
        obj->coords.x2 = obj->coords.x1 + w - 1;
 80055b2:	f103 33ff 	addne.w	r3, r3, #4294967295
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80055b6:	1b9b      	subeq	r3, r3, r6
        obj->coords.x2 = obj->coords.x1 + w - 1;
 80055b8:	bf16      	itet	ne
 80055ba:	18f6      	addne	r6, r6, r3
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80055bc:	82a3      	strheq	r3, [r4, #20]
        obj->coords.x2 = obj->coords.x1 + w - 1;
 80055be:	8326      	strhne	r6, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 80055c0:	f7ff f8c0 	bl	8004744 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80055c4:	4622      	mov	r2, r4
 80055c6:	2122      	movs	r1, #34	; 0x22
 80055c8:	4638      	mov	r0, r7
 80055ca:	f7ff f8bb 	bl	8004744 <lv_event_send>
    lv_obj_invalidate(obj);
 80055ce:	4620      	mov	r0, r4
 80055d0:	f017 fb64 	bl	801cc9c <lv_obj_invalidate>
    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 80055d4:	2100      	movs	r1, #0
 80055d6:	4620      	mov	r0, r4
 80055d8:	f018 f978 	bl	801d8cc <lv_obj_readjust_scroll>
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80055dc:	2200      	movs	r2, #0
 80055de:	a90c      	add	r1, sp, #48	; 0x30
 80055e0:	4648      	mov	r0, r9
 80055e2:	f01e ff79 	bl	80244d8 <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 80055e6:	f1b8 0f00 	cmp.w	r8, #0
 80055ea:	d100      	bne.n	80055ee <lv_obj_refr_size+0x3fa>
 80055ec:	b110      	cbz	r0, 80055f4 <lv_obj_refr_size+0x400>
 80055ee:	4638      	mov	r0, r7
 80055f0:	f018 f94c 	bl	801d88c <lv_obj_scrollbar_invalidate>
    lv_obj_refresh_ext_draw_size(obj);
 80055f4:	4620      	mov	r0, r4
 80055f6:	f016 ff83 	bl	801c500 <lv_obj_refresh_ext_draw_size>
    return true;
 80055fa:	2001      	movs	r0, #1
 80055fc:	e605      	b.n	800520a <lv_obj_refr_size+0x16>
        if(h_is_content) {
 80055fe:	f242 78d1 	movw	r8, #10193	; 0x27d1
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8005602:	f017 f96d 	bl	801c8e0 <lv_obj_get_content_height>
 8005606:	9002      	str	r0, [sp, #8]
        if(h_is_content) {
 8005608:	45c2      	cmp	sl, r8
 800560a:	d172      	bne.n	80056f2 <lv_obj_refr_size+0x4fe>
}

static lv_coord_t calc_content_height(lv_obj_t * obj)
{
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 800560c:	2200      	movs	r2, #0
 800560e:	4620      	mov	r0, r4
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;

    lv_coord_t child_res = LV_COORD_MIN;
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
    for(i = 0; i < child_cnt; i++) {
 8005610:	f04f 0b00 	mov.w	fp, #0
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8005614:	4611      	mov	r1, r2
 8005616:	f000 fcaf 	bl	8005f78 <lv_obj_scroll_to_y>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800561a:	4620      	mov	r0, r4
 800561c:	f016 ffa9 	bl	801c572 <lv_obj_get_style_border_width.constprop.0>
 8005620:	4605      	mov	r5, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8005622:	4620      	mov	r0, r4
 8005624:	f016 ffc1 	bl	801c5aa <lv_obj_get_style_pad_top.constprop.0>
 8005628:	fa1f f885 	uxth.w	r8, r5
 800562c:	fa10 f585 	uxtah	r5, r0, r5
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8005630:	4620      	mov	r0, r4
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8005632:	b2ab      	uxth	r3, r5
 8005634:	9303      	str	r3, [sp, #12]
 8005636:	b22b      	sxth	r3, r5
 8005638:	9307      	str	r3, [sp, #28]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 800563a:	f016 ffaf 	bl	801c59c <lv_obj_get_style_pad_bottom.constprop.0>
 800563e:	4480      	add	r8, r0
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8005640:	4620      	mov	r0, r4
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8005642:	fa1f f388 	uxth.w	r3, r8
    lv_coord_t child_res = LV_COORD_MIN;
 8005646:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8005744 <lv_obj_refr_size+0x550>
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 800564a:	9304      	str	r3, [sp, #16]
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 800564c:	f017 f98e 	bl	801c96c <lv_obj_get_self_height>
 8005650:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8005654:	189d      	adds	r5, r3, r2
 8005656:	4405      	add	r5, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005658:	4620      	mov	r0, r4
 800565a:	f018 fddb 	bl	801e214 <lv_obj_get_child_cnt>
 800565e:	9008      	str	r0, [sp, #32]
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8005660:	b22d      	sxth	r5, r5
    for(i = 0; i < child_cnt; i++) {
 8005662:	9b08      	ldr	r3, [sp, #32]
 8005664:	455b      	cmp	r3, fp
 8005666:	d10a      	bne.n	800567e <lv_obj_refr_size+0x48a>
        else {
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
        }
    }

    if(child_res != LV_COORD_MIN) {
 8005668:	4b36      	ldr	r3, [pc, #216]	; (8005744 <lv_obj_refr_size+0x550>)
 800566a:	4598      	cmp	r8, r3
 800566c:	f43f af45 	beq.w	80054fa <lv_obj_refr_size+0x306>
        child_res += pad_bottom;
 8005670:	9b04      	ldr	r3, [sp, #16]
 8005672:	4443      	add	r3, r8
        return LV_MAX(child_res, self_h);
 8005674:	b21b      	sxth	r3, r3
 8005676:	429d      	cmp	r5, r3
 8005678:	bfb8      	it	lt
 800567a:	461d      	movlt	r5, r3
 800567c:	e73d      	b.n	80054fa <lv_obj_refr_size+0x306>
        lv_obj_t * child = obj->spec_attr->children[i];
 800567e:	68a3      	ldr	r3, [r4, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005680:	4931      	ldr	r1, [pc, #196]	; (8005748 <lv_obj_refr_size+0x554>)
        lv_obj_t * child = obj->spec_attr->children[i];
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f853 902b 	ldr.w	r9, [r3, fp, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005688:	4648      	mov	r0, r9
 800568a:	f016 f9f9 	bl	801ba80 <lv_obj_has_flag_any>
 800568e:	bb68      	cbnz	r0, 80056ec <lv_obj_refr_size+0x4f8>
        if(!lv_obj_is_layout_positioned(child)) {
 8005690:	4648      	mov	r0, r9
 8005692:	f7ff fc37 	bl	8004f04 <lv_obj_is_layout_positioned>
 8005696:	4601      	mov	r1, r0
 8005698:	b940      	cbnz	r0, 80056ac <lv_obj_refr_size+0x4b8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800569a:	9009      	str	r0, [sp, #36]	; 0x24
 800569c:	2209      	movs	r2, #9
 800569e:	4648      	mov	r0, r9
 80056a0:	f018 fa22 	bl	801dae8 <lv_obj_get_style_prop>
            switch(align) {
 80056a4:	9909      	ldr	r1, [sp, #36]	; 0x24
    return (lv_align_t)v.num;
 80056a6:	b2c0      	uxtb	r0, r0
 80056a8:	2803      	cmp	r0, #3
 80056aa:	d809      	bhi.n	80056c0 <lv_obj_refr_size+0x4cc>
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 80056ac:	f9b9 301a 	ldrsh.w	r3, [r9, #26]
 80056b0:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80056b4:	1a9b      	subs	r3, r3, r2
 80056b6:	3301      	adds	r3, #1
 80056b8:	4543      	cmp	r3, r8
 80056ba:	bfb8      	it	lt
 80056bc:	4643      	movlt	r3, r8
 80056be:	e013      	b.n	80056e8 <lv_obj_refr_size+0x4f4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 80056c0:	2208      	movs	r2, #8
 80056c2:	4648      	mov	r0, r9
 80056c4:	f018 fa10 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80056c8:	b200      	sxth	r0, r0
                    if(lv_obj_get_style_y(child, 0) == 0) {
 80056ca:	b978      	cbnz	r0, 80056ec <lv_obj_refr_size+0x4f8>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80056cc:	f8b9 201a 	ldrh.w	r2, [r9, #26]
 80056d0:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 80056d4:	3201      	adds	r2, #1
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 80056d6:	9907      	ldr	r1, [sp, #28]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	b29a      	uxth	r2, r3
 80056dc:	fa01 f383 	sxtah	r3, r1, r3
 80056e0:	4598      	cmp	r8, r3
 80056e2:	dc03      	bgt.n	80056ec <lv_obj_refr_size+0x4f8>
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	4413      	add	r3, r2
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 80056e8:	fa0f f883 	sxth.w	r8, r3
    for(i = 0; i < child_cnt; i++) {
 80056ec:	f10b 0b01 	add.w	fp, fp, #1
 80056f0:	e7b7      	b.n	8005662 <lv_obj_refr_size+0x46e>
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 80056f2:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80056f6:	f011 0102 	ands.w	r1, r1, #2
 80056fa:	d117      	bne.n	800572c <lv_obj_refr_size+0x538>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80056fc:	2204      	movs	r2, #4
 80056fe:	4638      	mov	r0, r7
 8005700:	f018 f9f2 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005704:	b200      	sxth	r0, r0
 8005706:	4540      	cmp	r0, r8
 8005708:	d110      	bne.n	800572c <lv_obj_refr_size+0x538>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 800570a:	4620      	mov	r0, r4
 800570c:	f016 ff31 	bl	801c572 <lv_obj_get_style_border_width.constprop.0>
 8005710:	4680      	mov	r8, r0
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 8005712:	4620      	mov	r0, r4
 8005714:	f016 ff49 	bl	801c5aa <lv_obj_get_style_pad_top.constprop.0>
 8005718:	eb00 0508 	add.w	r5, r0, r8
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 800571c:	4620      	mov	r0, r4
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 800571e:	b2ad      	uxth	r5, r5
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 8005720:	f016 ff3c 	bl	801c59c <lv_obj_get_style_pad_bottom.constprop.0>
 8005724:	4440      	add	r0, r8
 8005726:	4405      	add	r5, r0
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 8005728:	b22d      	sxth	r5, r5
 800572a:	e6e6      	b.n	80054fa <lv_obj_refr_size+0x306>
 800572c:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8005730:	9b02      	ldr	r3, [sp, #8]
 8005732:	bfc8      	it	gt
 8005734:	f5c5 757a 	rsbgt	r5, r5, #1000	; 0x3e8
 8005738:	435d      	muls	r5, r3
 800573a:	2364      	movs	r3, #100	; 0x64
 800573c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005740:	e7f2      	b.n	8005728 <lv_obj_refr_size+0x534>
 8005742:	bf00      	nop
 8005744:	ffffe001 	.word	0xffffe001
 8005748:	00040001 	.word	0x00040001

0800574c <layout_update_core>:
    }

}

static void layout_update_core(lv_obj_t * obj)
{
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	4604      	mov	r4, r0
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
    for(i = 0; i < child_cnt; i++) {
 8005750:	2500      	movs	r5, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005752:	f018 fd5f 	bl	801e214 <lv_obj_get_child_cnt>
 8005756:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 8005758:	42b5      	cmp	r5, r6
 800575a:	d127      	bne.n	80057ac <layout_update_core+0x60>
        lv_obj_t * child = obj->spec_attr->children[i];
        layout_update_core(child);
    }

    if(obj->layout_inv == 0) return;
 800575c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005760:	07da      	lsls	r2, r3, #31
 8005762:	d52b      	bpl.n	80057bc <layout_update_core+0x70>

    obj->layout_inv = 0;
 8005764:	f36f 0300 	bfc	r3, #0, #1

    lv_obj_refr_size(obj);
 8005768:	4620      	mov	r0, r4
    obj->layout_inv = 0;
 800576a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_obj_refr_size(obj);
 800576e:	f7ff fd41 	bl	80051f4 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 8005772:	4620      	mov	r0, r4
 8005774:	f7ff fc0e 	bl	8004f94 <lv_obj_refr_pos>

    if(child_cnt > 0) {
 8005778:	b305      	cbz	r5, 80057bc <layout_update_core+0x70>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 800577a:	220a      	movs	r2, #10
 800577c:	2100      	movs	r1, #0
 800577e:	4620      	mov	r0, r4
 8005780:	f018 f9b2 	bl	801dae8 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8005784:	b283      	uxth	r3, r0
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
        if(layout_id > 0 && layout_id <= layout_cnt) {
 8005786:	b1cb      	cbz	r3, 80057bc <layout_update_core+0x70>
 8005788:	4a0d      	ldr	r2, [pc, #52]	; (80057c0 <layout_update_core+0x74>)
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d315      	bcc.n	80057bc <layout_update_core+0x70>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 8005790:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005794:	4a0b      	ldr	r2, [pc, #44]	; (80057c4 <layout_update_core+0x78>)
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 8005796:	4620      	mov	r0, r4
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 8005798:	3b01      	subs	r3, #1
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 80057a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057a4:	6849      	ldr	r1, [r1, #4]
        }
    }
}
 80057a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 80057aa:	4718      	bx	r3
        lv_obj_t * child = obj->spec_attr->children[i];
 80057ac:	68a3      	ldr	r3, [r4, #8]
 80057ae:	681b      	ldr	r3, [r3, #0]
        layout_update_core(child);
 80057b0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    for(i = 0; i < child_cnt; i++) {
 80057b4:	3501      	adds	r5, #1
        layout_update_core(child);
 80057b6:	f7ff ffc9 	bl	800574c <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 80057ba:	e7cd      	b.n	8005758 <layout_update_core+0xc>
}
 80057bc:	bd70      	pop	{r4, r5, r6, pc}
 80057be:	bf00      	nop
 80057c0:	2400115c 	.word	0x2400115c
 80057c4:	240013ac 	.word	0x240013ac

080057c8 <lv_obj_update_layout>:
{
 80057c8:	b538      	push	{r3, r4, r5, lr}
    if(mutex) {
 80057ca:	4d0b      	ldr	r5, [pc, #44]	; (80057f8 <lv_obj_update_layout+0x30>)
 80057cc:	782b      	ldrb	r3, [r5, #0]
 80057ce:	b953      	cbnz	r3, 80057e6 <lv_obj_update_layout+0x1e>
    mutex = true;
 80057d0:	2301      	movs	r3, #1
 80057d2:	702b      	strb	r3, [r5, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 80057d4:	f018 fd04 	bl	801e1e0 <lv_obj_get_screen>
 80057d8:	4604      	mov	r4, r0
    while(scr->scr_layout_inv) {
 80057da:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80057de:	f013 0202 	ands.w	r2, r3, #2
 80057e2:	d101      	bne.n	80057e8 <lv_obj_update_layout+0x20>
    mutex = false;
 80057e4:	702a      	strb	r2, [r5, #0]
}
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
        scr->scr_layout_inv = 0;
 80057e8:	f36f 0341 	bfc	r3, #1, #1
        layout_update_core(scr);
 80057ec:	4620      	mov	r0, r4
        scr->scr_layout_inv = 0;
 80057ee:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        layout_update_core(scr);
 80057f2:	f7ff ffab 	bl	800574c <layout_update_core>
 80057f6:	e7f0      	b.n	80057da <lv_obj_update_layout+0x12>
 80057f8:	24010d2d 	.word	0x24010d2d

080057fc <lv_obj_align_to>:
{
 80057fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	b085      	sub	sp, #20
 8005802:	468a      	mov	sl, r1
 8005804:	4604      	mov	r4, r0
 8005806:	4691      	mov	r9, r2
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 800580e:	9303      	str	r3, [sp, #12]
    lv_obj_update_layout(obj);
 8005810:	f7ff ffda 	bl	80057c8 <lv_obj_update_layout>
    if(base == NULL) base = lv_obj_get_parent(obj);
 8005814:	f1ba 0f00 	cmp.w	sl, #0
 8005818:	d103      	bne.n	8005822 <lv_obj_align_to+0x26>
 800581a:	4620      	mov	r0, r4
 800581c:	f018 fce8 	bl	801e1f0 <lv_obj_get_parent>
 8005820:	4682      	mov	sl, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005822:	4620      	mov	r0, r4
 8005824:	f018 fce4 	bl	801e1f0 <lv_obj_get_parent>
 8005828:	4605      	mov	r5, r0
    lv_coord_t pborder = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 800582a:	f016 fea2 	bl	801c572 <lv_obj_get_style_border_width.constprop.0>
 800582e:	4680      	mov	r8, r0
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + pborder;
 8005830:	4628      	mov	r0, r5
 8005832:	f016 feac 	bl	801c58e <lv_obj_get_style_pad_left.constprop.0>
 8005836:	fa1f f688 	uxth.w	r6, r8
 800583a:	fa10 f888 	uxtah	r8, r0, r8
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 800583e:	4628      	mov	r0, r5
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + pborder;
 8005840:	fa0f f388 	sxth.w	r3, r8
 8005844:	9300      	str	r3, [sp, #0]
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 8005846:	f016 feb0 	bl	801c5aa <lv_obj_get_style_pad_top.constprop.0>
 800584a:	4406      	add	r6, r0
    lv_coord_t bborder = lv_obj_get_style_border_width(base, LV_PART_MAIN);
 800584c:	4650      	mov	r0, sl
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 800584e:	b233      	sxth	r3, r6
 8005850:	9302      	str	r3, [sp, #8]
    lv_coord_t bborder = lv_obj_get_style_border_width(base, LV_PART_MAIN);
 8005852:	f016 fe8e 	bl	801c572 <lv_obj_get_style_border_width.constprop.0>
 8005856:	4607      	mov	r7, r0
    lv_coord_t bleft = lv_obj_get_style_pad_left(base, LV_PART_MAIN) + bborder;
 8005858:	4650      	mov	r0, sl
 800585a:	f016 fe98 	bl	801c58e <lv_obj_get_style_pad_left.constprop.0>
 800585e:	b2be      	uxth	r6, r7
 8005860:	fa10 f387 	uxtah	r3, r0, r7
    lv_coord_t btop = lv_obj_get_style_pad_top(base, LV_PART_MAIN) + bborder;
 8005864:	4650      	mov	r0, sl
    lv_coord_t bleft = lv_obj_get_style_pad_left(base, LV_PART_MAIN) + bborder;
 8005866:	b29f      	uxth	r7, r3
 8005868:	fa0f f883 	sxth.w	r8, r3
    lv_coord_t btop = lv_obj_get_style_pad_top(base, LV_PART_MAIN) + bborder;
 800586c:	f016 fe9d 	bl	801c5aa <lv_obj_get_style_pad_top.constprop.0>
 8005870:	1832      	adds	r2, r6, r0
 8005872:	b296      	uxth	r6, r2
 8005874:	fa0f fb82 	sxth.w	fp, r2
    if(align == LV_ALIGN_DEFAULT) {
 8005878:	f1b9 0f00 	cmp.w	r9, #0
 800587c:	d10e      	bne.n	800589c <lv_obj_align_to+0xa0>
        if(lv_obj_get_style_base_dir(base, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 800587e:	4650      	mov	r0, sl
 8005880:	f016 fe70 	bl	801c564 <lv_obj_get_style_base_dir.constprop.0>
 8005884:	2801      	cmp	r0, #1
 8005886:	d178      	bne.n	800597a <lv_obj_align_to+0x17e>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8005888:	4650      	mov	r0, sl
 800588a:	f017 f813 	bl	801c8b4 <lv_obj_get_content_width>
 800588e:	8aa3      	ldrh	r3, [r4, #20]
 8005890:	8b26      	ldrh	r6, [r4, #24]
 8005892:	3b01      	subs	r3, #1
 8005894:	1b9b      	subs	r3, r3, r6
 8005896:	443b      	add	r3, r7
 8005898:	4403      	add	r3, r0
 800589a:	e06c      	b.n	8005976 <lv_obj_align_to+0x17a>
    switch(align) {
 800589c:	f109 39ff 	add.w	r9, r9, #4294967295
 80058a0:	f1b9 0f14 	cmp.w	r9, #20
 80058a4:	d82c      	bhi.n	8005900 <lv_obj_align_to+0x104>
 80058a6:	a001      	add	r0, pc, #4	; (adr r0, 80058ac <lv_obj_align_to+0xb0>)
 80058a8:	f850 f029 	ldr.w	pc, [r0, r9, lsl #2]
 80058ac:	0800597b 	.word	0x0800597b
 80058b0:	08005955 	.word	0x08005955
 80058b4:	08005889 	.word	0x08005889
 80058b8:	08005a09 	.word	0x08005a09
 80058bc:	080059e3 	.word	0x080059e3
 80058c0:	08005a21 	.word	0x08005a21
 80058c4:	08005931 	.word	0x08005931
 80058c8:	08005a35 	.word	0x08005a35
 80058cc:	0800590b 	.word	0x0800590b
 80058d0:	08005a73 	.word	0x08005a73
 80058d4:	08005a81 	.word	0x08005a81
 80058d8:	08005ab9 	.word	0x08005ab9
 80058dc:	08005acd 	.word	0x08005acd
 80058e0:	08005ad9 	.word	0x08005ad9
 80058e4:	08005b13 	.word	0x08005b13
 80058e8:	08005b27 	.word	0x08005b27
 80058ec:	08005b39 	.word	0x08005b39
 80058f0:	08005b71 	.word	0x08005b71
 80058f4:	08005b8b 	.word	0x08005b8b
 80058f8:	08005b97 	.word	0x08005b97
 80058fc:	08005ba3 	.word	0x08005ba3
    lv_coord_t y = 0;
 8005900:	f04f 0b00 	mov.w	fp, #0
            x = 0;
 8005904:	f04f 0800 	mov.w	r8, #0
            break;
 8005908:	e037      	b.n	800597a <lv_obj_align_to+0x17e>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 800590a:	4650      	mov	r0, sl
 800590c:	f016 ffd2 	bl	801c8b4 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005910:	8b23      	ldrh	r3, [r4, #24]
 8005912:	8aa2      	ldrh	r2, [r4, #20]
 8005914:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005918:	3301      	adds	r3, #1
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8005920:	fa02 f383 	sxtah	r3, r2, r3
 8005924:	eba7 0363 	sub.w	r3, r7, r3, asr #1
 8005928:	eb03 0360 	add.w	r3, r3, r0, asr #1
 800592c:	fa0f f883 	sxth.w	r8, r3
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 8005930:	4650      	mov	r0, sl
 8005932:	f016 ffd5 	bl	801c8e0 <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005936:	8b62      	ldrh	r2, [r4, #26]
 8005938:	8ae7      	ldrh	r7, [r4, #22]
 800593a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800593e:	3201      	adds	r2, #1
 8005940:	1bd2      	subs	r2, r2, r7
 8005942:	f3c2 37c0 	ubfx	r7, r2, #15, #1
 8005946:	fa07 f282 	sxtah	r2, r7, r2
 800594a:	eba6 0262 	sub.w	r2, r6, r2, asr #1
 800594e:	eb02 0260 	add.w	r2, r2, r0, asr #1
 8005952:	e062      	b.n	8005a1a <lv_obj_align_to+0x21e>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 8005954:	4650      	mov	r0, sl
 8005956:	f016 ffad 	bl	801c8b4 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800595a:	8b23      	ldrh	r3, [r4, #24]
 800595c:	8aa6      	ldrh	r6, [r4, #20]
 800595e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005962:	3301      	adds	r3, #1
 8005964:	1b9b      	subs	r3, r3, r6
 8005966:	f3c3 36c0 	ubfx	r6, r3, #15, #1
 800596a:	fa06 f383 	sxtah	r3, r6, r3
 800596e:	eba7 0363 	sub.w	r3, r7, r3, asr #1
 8005972:	eb03 0360 	add.w	r3, r3, r0, asr #1
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8005976:	fa0f f883 	sxth.w	r8, r3
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800597a:	4628      	mov	r0, r5
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 800597c:	fa1f f688 	uxth.w	r6, r8
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005980:	f016 fdf0 	bl	801c564 <lv_obj_get_style_base_dir.constprop.0>
 8005984:	f9ba 3014 	ldrsh.w	r3, [sl, #20]
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 8005988:	9a01      	ldr	r2, [sp, #4]
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800598a:	2801      	cmp	r0, #1
 800598c:	f9b5 0014 	ldrsh.w	r0, [r5, #20]
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 8005990:	4413      	add	r3, r2
 8005992:	eba3 0700 	sub.w	r7, r3, r0
 8005996:	4628      	mov	r0, r5
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005998:	f040 8109 	bne.w	8005bae <lv_obj_align_to+0x3b2>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 800599c:	f000 f9ca 	bl	8005d34 <lv_obj_get_scroll_right>
 80059a0:	9b00      	ldr	r3, [sp, #0]
 80059a2:	4438      	add	r0, r7
 80059a4:	1ac0      	subs	r0, r0, r3
 80059a6:	4430      	add	r0, r6
 80059a8:	b206      	sxth	r6, r0
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 80059aa:	9b03      	ldr	r3, [sp, #12]
 80059ac:	4628      	mov	r0, r5
 80059ae:	f9ba 7016 	ldrsh.w	r7, [sl, #22]
 80059b2:	441f      	add	r7, r3
 80059b4:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 80059b8:	1aff      	subs	r7, r7, r3
 80059ba:	f017 fb0e 	bl	801cfda <lv_obj_get_scroll_top>
 80059be:	9b02      	ldr	r3, [sp, #8]
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 80059c0:	2200      	movs	r2, #0
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 80059c2:	19c5      	adds	r5, r0, r7
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 80059c4:	2101      	movs	r1, #1
 80059c6:	4620      	mov	r0, r4
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 80059c8:	1aed      	subs	r5, r5, r3
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 80059ca:	f018 fbf0 	bl	801e1ae <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x, y);
 80059ce:	4631      	mov	r1, r6
 80059d0:	4620      	mov	r0, r4
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 80059d2:	445d      	add	r5, fp
 80059d4:	b2ad      	uxth	r5, r5
    lv_obj_set_pos(obj, x, y);
 80059d6:	b22a      	sxth	r2, r5
}
 80059d8:	b005      	add	sp, #20
 80059da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_set_pos(obj, x, y);
 80059de:	f016 be98 	b.w	801c712 <lv_obj_set_pos>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 80059e2:	4650      	mov	r0, sl
 80059e4:	f016 ff66 	bl	801c8b4 <lv_obj_get_content_width>
 80059e8:	8b23      	ldrh	r3, [r4, #24]
 80059ea:	8aa2      	ldrh	r2, [r4, #20]
 80059ec:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80059f0:	3301      	adds	r3, #1
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80059f8:	fa02 f383 	sxtah	r3, r2, r3
 80059fc:	eba7 0363 	sub.w	r3, r7, r3, asr #1
 8005a00:	eb03 0360 	add.w	r3, r3, r0, asr #1
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8005a04:	fa0f f883 	sxth.w	r8, r3
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 8005a08:	4650      	mov	r0, sl
 8005a0a:	f016 ff69 	bl	801c8e0 <lv_obj_get_content_height>
 8005a0e:	8ae2      	ldrh	r2, [r4, #22]
 8005a10:	8b67      	ldrh	r7, [r4, #26]
 8005a12:	3a01      	subs	r2, #1
 8005a14:	1bd2      	subs	r2, r2, r7
 8005a16:	4432      	add	r2, r6
 8005a18:	4402      	add	r2, r0
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8005a1a:	fa0f fb82 	sxth.w	fp, r2
            break;
 8005a1e:	e7ac      	b.n	800597a <lv_obj_align_to+0x17e>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8005a20:	4650      	mov	r0, sl
 8005a22:	f016 ff47 	bl	801c8b4 <lv_obj_get_content_width>
 8005a26:	8aa3      	ldrh	r3, [r4, #20]
 8005a28:	8b22      	ldrh	r2, [r4, #24]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	1a9b      	subs	r3, r3, r2
 8005a2e:	443b      	add	r3, r7
 8005a30:	4403      	add	r3, r0
 8005a32:	e7e7      	b.n	8005a04 <lv_obj_align_to+0x208>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8005a34:	4650      	mov	r0, sl
 8005a36:	f016 ff3d 	bl	801c8b4 <lv_obj_get_content_width>
 8005a3a:	8aa3      	ldrh	r3, [r4, #20]
 8005a3c:	8b22      	ldrh	r2, [r4, #24]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	441f      	add	r7, r3
 8005a44:	4407      	add	r7, r0
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 8005a46:	4650      	mov	r0, sl
 8005a48:	f016 ff4a 	bl	801c8e0 <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005a4c:	8b62      	ldrh	r2, [r4, #26]
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8005a4e:	fa0f f887 	sxth.w	r8, r7
 8005a52:	8ae7      	ldrh	r7, [r4, #22]
 8005a54:	3201      	adds	r2, #1
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 8005a56:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005a5a:	1bd2      	subs	r2, r2, r7
 8005a5c:	f3c2 37c0 	ubfx	r7, r2, #15, #1
 8005a60:	fa07 f282 	sxtah	r2, r7, r2
 8005a64:	eba6 0662 	sub.w	r6, r6, r2, asr #1
 8005a68:	eb06 0660 	add.w	r6, r6, r0, asr #1
 8005a6c:	fa0f fb86 	sxth.w	fp, r6
            break;
 8005a70:	e783      	b.n	800597a <lv_obj_align_to+0x17e>
            y = -lv_obj_get_height(obj);
 8005a72:	8ae2      	ldrh	r2, [r4, #22]
 8005a74:	8b63      	ldrh	r3, [r4, #26]
 8005a76:	3a01      	subs	r2, #1
 8005a78:	1ad2      	subs	r2, r2, r3
 8005a7a:	fa0f fb82 	sxth.w	fp, r2
 8005a7e:	e741      	b.n	8005904 <lv_obj_align_to+0x108>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005a80:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8005a84:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	8aa0      	ldrh	r0, [r4, #20]
 8005a8c:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005a8e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8005a92:	fa02 f283 	sxtah	r2, r2, r3
 8005a96:	8b23      	ldrh	r3, [r4, #24]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	1a1b      	subs	r3, r3, r0
 8005a9c:	f3c3 30c0 	ubfx	r0, r3, #15, #1
 8005aa0:	fa00 f383 	sxtah	r3, r0, r3
 8005aa4:	105b      	asrs	r3, r3, #1
 8005aa6:	ebc3 0362 	rsb	r3, r3, r2, asr #1
            y = -lv_obj_get_height(obj);
 8005aaa:	8ae2      	ldrh	r2, [r4, #22]
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8005aac:	fa0f f883 	sxth.w	r8, r3
            y = -lv_obj_get_height(obj);
 8005ab0:	8b60      	ldrh	r0, [r4, #26]
 8005ab2:	3a01      	subs	r2, #1
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8005ab4:	1a12      	subs	r2, r2, r0
 8005ab6:	e7b0      	b.n	8005a1a <lv_obj_align_to+0x21e>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8005ab8:	8b22      	ldrh	r2, [r4, #24]
 8005aba:	8aa3      	ldrh	r3, [r4, #20]
 8005abc:	1a9b      	subs	r3, r3, r2
 8005abe:	f8ba 2018 	ldrh.w	r2, [sl, #24]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	e7ee      	b.n	8005aaa <lv_obj_align_to+0x2ae>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005acc:	f8ba 201a 	ldrh.w	r2, [sl, #26]
 8005ad0:	f8ba 3016 	ldrh.w	r3, [sl, #22]
 8005ad4:	3201      	adds	r2, #1
 8005ad6:	e7cf      	b.n	8005a78 <lv_obj_align_to+0x27c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005ad8:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8005adc:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	8aa0      	ldrh	r0, [r4, #20]
 8005ae4:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005ae6:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8005aea:	fa02 f283 	sxtah	r2, r2, r3
 8005aee:	8b23      	ldrh	r3, [r4, #24]
 8005af0:	3301      	adds	r3, #1
 8005af2:	1a1b      	subs	r3, r3, r0
 8005af4:	f3c3 30c0 	ubfx	r0, r3, #15, #1
 8005af8:	fa00 f383 	sxtah	r3, r0, r3
 8005afc:	105b      	asrs	r3, r3, #1
 8005afe:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005b02:	f8ba 201a 	ldrh.w	r2, [sl, #26]
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8005b06:	fa0f f883 	sxth.w	r8, r3
 8005b0a:	3201      	adds	r2, #1
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8005b0c:	f8ba 0016 	ldrh.w	r0, [sl, #22]
 8005b10:	e7d0      	b.n	8005ab4 <lv_obj_align_to+0x2b8>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8005b12:	8b22      	ldrh	r2, [r4, #24]
 8005b14:	8aa3      	ldrh	r3, [r4, #20]
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	f8ba 2018 	ldrh.w	r2, [sl, #24]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005b22:	1a9b      	subs	r3, r3, r2
 8005b24:	e7ed      	b.n	8005b02 <lv_obj_align_to+0x306>
            x = -lv_obj_get_width(obj);
 8005b26:	8aa3      	ldrh	r3, [r4, #20]
 8005b28:	8b22      	ldrh	r2, [r4, #24]
 8005b2a:	3b01      	subs	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005b2c:	1a9b      	subs	r3, r3, r2
            y = 0;
 8005b2e:	f04f 0b00 	mov.w	fp, #0
 8005b32:	fa0f f883 	sxth.w	r8, r3
            break;
 8005b36:	e720      	b.n	800597a <lv_obj_align_to+0x17e>
            x = -lv_obj_get_width(obj);
 8005b38:	8aa3      	ldrh	r3, [r4, #20]
 8005b3a:	8b22      	ldrh	r2, [r4, #24]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005b40:	f8ba 201a 	ldrh.w	r2, [sl, #26]
 8005b44:	f8ba 0016 	ldrh.w	r0, [sl, #22]
 8005b48:	3201      	adds	r2, #1
 8005b4a:	8ae6      	ldrh	r6, [r4, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005b4c:	fa0f f883 	sxth.w	r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005b50:	1a12      	subs	r2, r2, r0
            y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8005b52:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8005b56:	fa00 f082 	sxtah	r0, r0, r2
 8005b5a:	8b62      	ldrh	r2, [r4, #26]
 8005b5c:	3201      	adds	r2, #1
 8005b5e:	1b92      	subs	r2, r2, r6
 8005b60:	f3c2 36c0 	ubfx	r6, r2, #15, #1
 8005b64:	fa06 f282 	sxtah	r2, r6, r2
 8005b68:	1052      	asrs	r2, r2, #1
 8005b6a:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 8005b6e:	e754      	b.n	8005a1a <lv_obj_align_to+0x21e>
            x = -lv_obj_get_width(obj);
 8005b70:	8aa3      	ldrh	r3, [r4, #20]
 8005b72:	8b22      	ldrh	r2, [r4, #24]
 8005b74:	3b01      	subs	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005b76:	1a9b      	subs	r3, r3, r2
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8005b78:	8b60      	ldrh	r0, [r4, #26]
 8005b7a:	8ae2      	ldrh	r2, [r4, #22]
 8005b7c:	fa0f f883 	sxth.w	r8, r3
 8005b80:	1a12      	subs	r2, r2, r0
 8005b82:	f8ba 001a 	ldrh.w	r0, [sl, #26]
 8005b86:	4402      	add	r2, r0
 8005b88:	e7c0      	b.n	8005b0c <lv_obj_align_to+0x310>
 8005b8a:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8005b8e:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005b92:	3301      	adds	r3, #1
 8005b94:	e7ca      	b.n	8005b2c <lv_obj_align_to+0x330>
 8005b96:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8005b9a:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	e7cd      	b.n	8005b3e <lv_obj_align_to+0x342>
 8005ba2:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8005ba6:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005baa:	3301      	adds	r3, #1
 8005bac:	e7e3      	b.n	8005b76 <lv_obj_align_to+0x37a>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent) - pleft;
 8005bae:	f000 f859 	bl	8005c64 <lv_obj_get_scroll_left>
 8005bb2:	9b00      	ldr	r3, [sp, #0]
 8005bb4:	4438      	add	r0, r7
 8005bb6:	1ac0      	subs	r0, r0, r3
 8005bb8:	4406      	add	r6, r0
 8005bba:	b236      	sxth	r6, r6
 8005bbc:	e6f5      	b.n	80059aa <lv_obj_align_to+0x1ae>
 8005bbe:	bf00      	nop

08005bc0 <lv_obj_get_scroll_bottom>:
    if(obj->spec_attr == NULL) return 0;
    return -obj->spec_attr->scroll.y;
}

lv_coord_t lv_obj_get_scroll_bottom(lv_obj_t * obj)
{
 8005bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc4:	4606      	mov	r6, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t child_res = LV_COORD_MIN;
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
    for(i = 0; i < child_cnt; i++) {
 8005bc6:	2400      	movs	r4, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005bc8:	f018 fb24 	bl	801e214 <lv_obj_get_child_cnt>
    lv_coord_t child_res = LV_COORD_MIN;
 8005bcc:	4d23      	ldr	r5, [pc, #140]	; (8005c5c <lv_obj_get_scroll_bottom+0x9c>)
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005bce:	4607      	mov	r7, r0
        lv_obj_t * child = obj->spec_attr->children[i];
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005bd0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005c60 <lv_obj_get_scroll_bottom+0xa0>
    for(i = 0; i < child_cnt; i++) {
 8005bd4:	42bc      	cmp	r4, r7
 8005bd6:	d130      	bne.n	8005c3a <lv_obj_get_scroll_bottom+0x7a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005bd8:	2210      	movs	r2, #16
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f017 ff83 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005be2:	2211      	movs	r2, #17
 8005be4:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005be6:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005be8:	4630      	mov	r0, r6
 8005bea:	f017 ff7d 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005bee:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005bf0:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	f017 ff77 	bl	801dae8 <lv_obj_get_style_prop>

    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);

    if(child_res != LV_COORD_MIN) {
 8005bfa:	4b18      	ldr	r3, [pc, #96]	; (8005c5c <lv_obj_get_scroll_bottom+0x9c>)
 8005bfc:	4680      	mov	r8, r0
 8005bfe:	429d      	cmp	r5, r3
 8005c00:	d004      	beq.n	8005c0c <lv_obj_get_scroll_bottom+0x4c>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 8005c02:	183b      	adds	r3, r7, r0
 8005c04:	8b72      	ldrh	r2, [r6, #26]
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	442b      	add	r3, r5
 8005c0a:	b21d      	sxth	r5, r3
    }

    lv_coord_t self_h = lv_obj_get_self_height(obj);
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f016 fead 	bl	801c96c <lv_obj_get_self_height>
 8005c12:	4681      	mov	r9, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8005c14:	4630      	mov	r0, r6
 8005c16:	f016 fe47 	bl	801c8a8 <lv_obj_get_height>
 8005c1a:	19e3      	adds	r3, r4, r7
 8005c1c:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 8005c20:	444b      	add	r3, r9
 8005c22:	1a1b      	subs	r3, r3, r0
    self_h -= lv_obj_get_scroll_y(obj);
 8005c24:	4630      	mov	r0, r6
 8005c26:	f017 f9d2 	bl	801cfce <lv_obj_get_scroll_y>
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8005c2a:	b29b      	uxth	r3, r3
    self_h -= lv_obj_get_scroll_y(obj);
 8005c2c:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_h);
 8005c2e:	b200      	sxth	r0, r0
}
 8005c30:	42a8      	cmp	r0, r5
 8005c32:	bfb8      	it	lt
 8005c34:	4628      	movlt	r0, r5
 8005c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lv_obj_t * child = obj->spec_attr->children[i];
 8005c3a:	68b3      	ldr	r3, [r6, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005c3c:	4649      	mov	r1, r9
        lv_obj_t * child = obj->spec_attr->children[i];
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005c44:	4640      	mov	r0, r8
 8005c46:	f015 ff1b 	bl	801ba80 <lv_obj_has_flag_any>
 8005c4a:	b920      	cbnz	r0, 8005c56 <lv_obj_get_scroll_bottom+0x96>
        child_res = LV_MAX(child_res, child->coords.y2);
 8005c4c:	f9b8 301a 	ldrsh.w	r3, [r8, #26]
 8005c50:	429d      	cmp	r5, r3
 8005c52:	bfb8      	it	lt
 8005c54:	461d      	movlt	r5, r3
    for(i = 0; i < child_cnt; i++) {
 8005c56:	3401      	adds	r4, #1
 8005c58:	e7bc      	b.n	8005bd4 <lv_obj_get_scroll_bottom+0x14>
 8005c5a:	bf00      	nop
 8005c5c:	ffffe001 	.word	0xffffe001
 8005c60:	00040001 	.word	0x00040001

08005c64 <lv_obj_get_scroll_left>:

lv_coord_t lv_obj_get_scroll_left(lv_obj_t * obj)
{
 8005c64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Normally can't scroll the object out on the left.
     *So simply use the current scroll position as "left size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8005c68:	2100      	movs	r1, #0
{
 8005c6a:	4605      	mov	r5, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8005c6c:	f017 f949 	bl	801cf02 <lv_obj_get_style_base_dir>
 8005c70:	2801      	cmp	r0, #1
 8005c72:	d006      	beq.n	8005c82 <lv_obj_get_scroll_left+0x1e>
        if(obj->spec_attr == NULL) return 0;
 8005c74:	68a8      	ldr	r0, [r5, #8]
 8005c76:	b110      	cbz	r0, 8005c7e <lv_obj_get_scroll_left+0x1a>
        return -obj->spec_attr->scroll.x;
 8005c78:	8a00      	ldrh	r0, [r0, #16]
 8005c7a:	4240      	negs	r0, r0
 8005c7c:	b200      	sxth	r0, r0
    lv_coord_t self_w = lv_obj_get_self_width(obj);
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
    self_w += lv_obj_get_scroll_x(obj);

    return LV_MAX(child_res, self_w);
}
 8005c7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005c82:	2213      	movs	r2, #19
 8005c84:	2100      	movs	r1, #0
 8005c86:	4628      	mov	r0, r5
    lv_coord_t x1 = LV_COORD_MAX;
 8005c88:	f641 79ff 	movw	r9, #8191	; 0x1fff
 8005c8c:	f017 ff2c 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005c90:	2212      	movs	r2, #18
 8005c92:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005c94:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005c96:	4628      	mov	r0, r5
    for(i = 0; i < child_cnt; i++) {
 8005c98:	2600      	movs	r6, #0
 8005c9a:	f017 ff25 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005ca2:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f017 ff1f 	bl	801dae8 <lv_obj_get_style_prop>
 8005caa:	4680      	mov	r8, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005cac:	4628      	mov	r0, r5
 8005cae:	f018 fab1 	bl	801e214 <lv_obj_get_child_cnt>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005cb2:	491e      	ldr	r1, [pc, #120]	; (8005d2c <lv_obj_get_scroll_left+0xc8>)
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005cb4:	4682      	mov	sl, r0
    for(i = 0; i < child_cnt; i++) {
 8005cb6:	45b2      	cmp	sl, r6
 8005cb8:	d127      	bne.n	8005d0a <lv_obj_get_scroll_left+0xa6>
    if(x1 != LV_COORD_MAX) {
 8005cba:	f641 73ff 	movw	r3, #8191	; 0x1fff
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8005cbe:	b2a4      	uxth	r4, r4
 8005cc0:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8005cc4:	4628      	mov	r0, r5
    if(x1 != LV_COORD_MAX) {
 8005cc6:	4599      	cmp	r9, r3
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8005cc8:	bf1c      	itt	ne
 8005cca:	eb04 0608 	addne.w	r6, r4, r8
 8005cce:	8aab      	ldrhne	r3, [r5, #20]
 8005cd0:	443c      	add	r4, r7
        child_res = LV_COORD_MIN;
 8005cd2:	bf0c      	ite	eq
 8005cd4:	4e16      	ldreq	r6, [pc, #88]	; (8005d30 <lv_obj_get_scroll_left+0xcc>)
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8005cd6:	18f6      	addne	r6, r6, r3
 8005cd8:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8005cdc:	bf1c      	itt	ne
 8005cde:	eba6 0609 	subne.w	r6, r6, r9
 8005ce2:	b236      	sxthne	r6, r6
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8005ce4:	f7ff f948 	bl	8004f78 <lv_obj_get_self_width>
 8005ce8:	4681      	mov	r9, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8005cea:	4628      	mov	r0, r5
 8005cec:	444c      	add	r4, r9
 8005cee:	f016 fdd5 	bl	801c89c <lv_obj_get_width>
 8005cf2:	4603      	mov	r3, r0
    self_w += lv_obj_get_scroll_x(obj);
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	b2a4      	uxth	r4, r4
 8005cf8:	f017 f963 	bl	801cfc2 <lv_obj_get_scroll_x>
 8005cfc:	4404      	add	r4, r0
 8005cfe:	1ae0      	subs	r0, r4, r3
    return LV_MAX(child_res, self_w);
 8005d00:	b200      	sxth	r0, r0
 8005d02:	42b0      	cmp	r0, r6
 8005d04:	bfb8      	it	lt
 8005d06:	4630      	movlt	r0, r6
 8005d08:	e7b9      	b.n	8005c7e <lv_obj_get_scroll_left+0x1a>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005d0a:	68ab      	ldr	r3, [r5, #8]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f853 b026 	ldr.w	fp, [r3, r6, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005d12:	4658      	mov	r0, fp
 8005d14:	f015 feb4 	bl	801ba80 <lv_obj_has_flag_any>
 8005d18:	4904      	ldr	r1, [pc, #16]	; (8005d2c <lv_obj_get_scroll_left+0xc8>)
 8005d1a:	b920      	cbnz	r0, 8005d26 <lv_obj_get_scroll_left+0xc2>
        x1 = LV_MIN(x1, child->coords.x1);
 8005d1c:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 8005d20:	4599      	cmp	r9, r3
 8005d22:	bfa8      	it	ge
 8005d24:	4699      	movge	r9, r3
    for(i = 0; i < child_cnt; i++) {
 8005d26:	3601      	adds	r6, #1
 8005d28:	e7c5      	b.n	8005cb6 <lv_obj_get_scroll_left+0x52>
 8005d2a:	bf00      	nop
 8005d2c:	00040001 	.word	0x00040001
 8005d30:	ffffe001 	.word	0xffffe001

08005d34 <lv_obj_get_scroll_right>:

lv_coord_t lv_obj_get_scroll_right(lv_obj_t * obj)
{
 8005d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*With RTL base dir can't scroll to the object out on the right.
     *So simply use the current scroll position as "right size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005d38:	2100      	movs	r1, #0
{
 8005d3a:	4606      	mov	r6, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005d3c:	f017 f8e1 	bl	801cf02 <lv_obj_get_style_base_dir>
 8005d40:	2801      	cmp	r0, #1
 8005d42:	d105      	bne.n	8005d50 <lv_obj_get_scroll_right+0x1c>
        if(obj->spec_attr == NULL) return 0;
 8005d44:	68b0      	ldr	r0, [r6, #8]
 8005d46:	b108      	cbz	r0, 8005d4c <lv_obj_get_scroll_right+0x18>
        return obj->spec_attr->scroll.x;
 8005d48:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj);
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
    self_w -= lv_obj_get_scroll_x(obj);
    return LV_MAX(child_res, self_w);
}
 8005d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005d50:	4630      	mov	r0, r6
    for(i = 0; i < child_cnt; i++) {
 8005d52:	2400      	movs	r4, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005d54:	f018 fa5e 	bl	801e214 <lv_obj_get_child_cnt>
    lv_coord_t child_res = LV_COORD_MIN;
 8005d58:	4d22      	ldr	r5, [pc, #136]	; (8005de4 <lv_obj_get_scroll_right+0xb0>)
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005d5a:	4607      	mov	r7, r0
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005d5c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005de8 <lv_obj_get_scroll_right+0xb4>
    for(i = 0; i < child_cnt; i++) {
 8005d60:	42a7      	cmp	r7, r4
 8005d62:	d12f      	bne.n	8005dc4 <lv_obj_get_scroll_right+0x90>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005d64:	2213      	movs	r2, #19
 8005d66:	2100      	movs	r1, #0
 8005d68:	4630      	mov	r0, r6
 8005d6a:	f017 febd 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005d6e:	2212      	movs	r2, #18
 8005d70:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005d72:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005d74:	4630      	mov	r0, r6
 8005d76:	f017 feb7 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005d7a:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005d7c:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4630      	mov	r0, r6
 8005d82:	f017 feb1 	bl	801dae8 <lv_obj_get_style_prop>
    if(child_res != LV_COORD_MIN) {
 8005d86:	4b17      	ldr	r3, [pc, #92]	; (8005de4 <lv_obj_get_scroll_right+0xb0>)
 8005d88:	4680      	mov	r8, r0
 8005d8a:	429d      	cmp	r5, r3
 8005d8c:	d004      	beq.n	8005d98 <lv_obj_get_scroll_right+0x64>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 8005d8e:	1823      	adds	r3, r4, r0
 8005d90:	8b32      	ldrh	r2, [r6, #24]
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	442b      	add	r3, r5
 8005d96:	b21d      	sxth	r5, r3
    self_w = lv_obj_get_self_width(obj);
 8005d98:	4630      	mov	r0, r6
 8005d9a:	f7ff f8ed 	bl	8004f78 <lv_obj_get_self_width>
 8005d9e:	4681      	mov	r9, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8005da0:	4630      	mov	r0, r6
 8005da2:	f016 fd7b 	bl	801c89c <lv_obj_get_width>
 8005da6:	19e3      	adds	r3, r4, r7
 8005da8:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 8005dac:	444b      	add	r3, r9
 8005dae:	1a1b      	subs	r3, r3, r0
    self_w -= lv_obj_get_scroll_x(obj);
 8005db0:	4630      	mov	r0, r6
 8005db2:	f017 f906 	bl	801cfc2 <lv_obj_get_scroll_x>
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8005db6:	b29b      	uxth	r3, r3
    self_w -= lv_obj_get_scroll_x(obj);
 8005db8:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_w);
 8005dba:	b200      	sxth	r0, r0
 8005dbc:	42a8      	cmp	r0, r5
 8005dbe:	bfb8      	it	lt
 8005dc0:	4628      	movlt	r0, r5
 8005dc2:	e7c3      	b.n	8005d4c <lv_obj_get_scroll_right+0x18>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005dc4:	68b3      	ldr	r3, [r6, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005dc6:	4649      	mov	r1, r9
        lv_obj_t * child = obj->spec_attr->children[i];
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005dce:	4640      	mov	r0, r8
 8005dd0:	f015 fe56 	bl	801ba80 <lv_obj_has_flag_any>
 8005dd4:	b920      	cbnz	r0, 8005de0 <lv_obj_get_scroll_right+0xac>
        child_res = LV_MAX(child_res, child->coords.x2);
 8005dd6:	f9b8 3018 	ldrsh.w	r3, [r8, #24]
 8005dda:	429d      	cmp	r5, r3
 8005ddc:	bfb8      	it	lt
 8005dde:	461d      	movlt	r5, r3
    for(i = 0; i < child_cnt; i++) {
 8005de0:	3401      	adds	r4, #1
 8005de2:	e7bd      	b.n	8005d60 <lv_obj_get_scroll_right+0x2c>
 8005de4:	ffffe001 	.word	0xffffe001
 8005de8:	00040001 	.word	0x00040001

08005dec <lv_obj_get_scroll_end>:

void lv_obj_get_scroll_end(struct _lv_obj_t  * obj, lv_point_t * end)
{
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	460c      	mov	r4, r1
    lv_anim_t * a;
    a = lv_anim_get(obj, scroll_x_anim);
 8005df0:	490d      	ldr	r1, [pc, #52]	; (8005e28 <lv_obj_get_scroll_end+0x3c>)
{
 8005df2:	4605      	mov	r5, r0
    a = lv_anim_get(obj, scroll_x_anim);
 8005df4:	f00c fb46 	bl	8012484 <lv_anim_get>
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 8005df8:	b168      	cbz	r0, 8005e16 <lv_obj_get_scroll_end+0x2a>
 8005dfa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005dfc:	425b      	negs	r3, r3
 8005dfe:	b218      	sxth	r0, r3
 8005e00:	8020      	strh	r0, [r4, #0]

    a = lv_anim_get(obj, scroll_y_anim);
 8005e02:	4628      	mov	r0, r5
 8005e04:	4909      	ldr	r1, [pc, #36]	; (8005e2c <lv_obj_get_scroll_end+0x40>)
 8005e06:	f00c fb3d 	bl	8012484 <lv_anim_get>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 8005e0a:	b140      	cbz	r0, 8005e1e <lv_obj_get_scroll_end+0x32>
 8005e0c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005e0e:	4240      	negs	r0, r0
 8005e10:	b200      	sxth	r0, r0
 8005e12:	8060      	strh	r0, [r4, #2]
}
 8005e14:	bd38      	pop	{r3, r4, r5, pc}
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 8005e16:	4628      	mov	r0, r5
 8005e18:	f017 f8d3 	bl	801cfc2 <lv_obj_get_scroll_x>
 8005e1c:	e7f0      	b.n	8005e00 <lv_obj_get_scroll_end+0x14>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f017 f8d5 	bl	801cfce <lv_obj_get_scroll_y>
 8005e24:	e7f5      	b.n	8005e12 <lv_obj_get_scroll_end+0x26>
 8005e26:	bf00      	nop
 8005e28:	0801d03d 	.word	0x0801d03d
 8005e2c:	0801d025 	.word	0x0801d025

08005e30 <lv_obj_scroll_by>:
    }
}


void lv_obj_scroll_by(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 8005e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e32:	4616      	mov	r6, r2
 8005e34:	b093      	sub	sp, #76	; 0x4c
 8005e36:	4604      	mov	r4, r0
 8005e38:	460d      	mov	r5, r1
    if(dx == 0 && dy == 0) return;
 8005e3a:	ea51 0206 	orrs.w	r2, r1, r6
 8005e3e:	d05e      	beq.n	8005efe <lv_obj_scroll_by+0xce>
    if(anim_en == LV_ANIM_ON) {
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d15e      	bne.n	8005f02 <lv_obj_scroll_by+0xd2>
        lv_disp_t * d = lv_obj_get_disp(obj);
 8005e44:	f000 fd46 	bl	80068d4 <lv_obj_get_disp>
 8005e48:	4607      	mov	r7, r0
        lv_anim_t a;
        lv_anim_init(&a);
 8005e4a:	a801      	add	r0, sp, #4
 8005e4c:	f00c fa8c 	bl	8012368 <lv_anim_init>
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8005e50:	4b3a      	ldr	r3, [pc, #232]	; (8005f3c <lv_obj_scroll_by+0x10c>)
    a->var = var;
 8005e52:	9401      	str	r4, [sp, #4]
    a->ready_cb = ready_cb;
 8005e54:	9304      	str	r3, [sp, #16]
        lv_anim_set_var(&a, obj);
        lv_anim_set_ready_cb(&a, scroll_anim_ready_cb);

        if(dx) {
 8005e56:	b345      	cbz	r5, 8005eaa <lv_obj_scroll_by+0x7a>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f00c f951 	bl	8012100 <lv_disp_get_hor_res>
 8005e5e:	462a      	mov	r2, r5
 8005e60:	2100      	movs	r1, #0
 8005e62:	f340 005d 	sbfx	r0, r0, #1, #30
 8005e66:	f01e f995 	bl	8024194 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8005e6a:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8005e6e:	4603      	mov	r3, r0
            lv_anim_set_time(&a, t);
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 8005e70:	4620      	mov	r0, r4
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8005e72:	bf28      	it	cs
 8005e74:	f44f 73c8 	movcs.w	r3, #400	; 0x190
            lv_anim_set_values(&a, -sx, -sx + dx);
            lv_anim_set_exec_cb(&a, scroll_x_anim);
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8005e78:	aa01      	add	r2, sp, #4
 8005e7a:	2109      	movs	r1, #9
    a->time = duration;
 8005e7c:	2bc8      	cmp	r3, #200	; 0xc8
 8005e7e:	bf38      	it	cc
 8005e80:	23c8      	movcc	r3, #200	; 0xc8
 8005e82:	930c      	str	r3, [sp, #48]	; 0x30
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 8005e84:	f017 f89d 	bl	801cfc2 <lv_obj_get_scroll_x>
            lv_anim_set_values(&a, -sx, -sx + dx);
 8005e88:	4243      	negs	r3, r0
 8005e8a:	1a28      	subs	r0, r5, r0
    a->current_value = start;
 8005e8c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8005e90:	4b2b      	ldr	r3, [pc, #172]	; (8005f40 <lv_obj_scroll_by+0x110>)
    a->end_value = end;
 8005e92:	900b      	str	r0, [sp, #44]	; 0x2c
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8005e94:	4620      	mov	r0, r4
    a->exec_cb = exec_cb;
 8005e96:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8005e98:	4b2a      	ldr	r3, [pc, #168]	; (8005f44 <lv_obj_scroll_by+0x114>)
 8005e9a:	9308      	str	r3, [sp, #32]
 8005e9c:	f7fe fc52 	bl	8004744 <lv_event_send>
            if(res != LV_RES_OK) return;
 8005ea0:	2801      	cmp	r0, #1
 8005ea2:	d12c      	bne.n	8005efe <lv_obj_scroll_by+0xce>
            lv_anim_start(&a);
 8005ea4:	a801      	add	r0, sp, #4
 8005ea6:	f00c faab 	bl	8012400 <lv_anim_start>
        }

        if(dy) {
 8005eaa:	b346      	cbz	r6, 8005efe <lv_obj_scroll_by+0xce>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 8005eac:	4638      	mov	r0, r7
 8005eae:	f00c f937 	bl	8012120 <lv_disp_get_ver_res>
 8005eb2:	4632      	mov	r2, r6
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	f340 005d 	sbfx	r0, r0, #1, #30
 8005eba:	f01e f96b 	bl	8024194 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8005ebe:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
            lv_anim_set_values(&a, -sy, -sy + dy);
            lv_anim_set_exec_cb(&a,  scroll_y_anim);
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8005ec2:	aa01      	add	r2, sp, #4
 8005ec4:	f04f 0109 	mov.w	r1, #9
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8005ec8:	bf28      	it	cs
 8005eca:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 8005ece:	28c8      	cmp	r0, #200	; 0xc8
 8005ed0:	bf38      	it	cc
 8005ed2:	20c8      	movcc	r0, #200	; 0xc8
 8005ed4:	900c      	str	r0, [sp, #48]	; 0x30
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f017 f879 	bl	801cfce <lv_obj_get_scroll_y>
            lv_anim_set_values(&a, -sy, -sy + dy);
 8005edc:	4243      	negs	r3, r0
 8005ede:	1a30      	subs	r0, r6, r0
    a->current_value = start;
 8005ee0:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8005ee4:	4b18      	ldr	r3, [pc, #96]	; (8005f48 <lv_obj_scroll_by+0x118>)
    a->end_value = end;
 8005ee6:	900b      	str	r0, [sp, #44]	; 0x2c
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8005ee8:	4620      	mov	r0, r4
    a->exec_cb = exec_cb;
 8005eea:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8005eec:	4b15      	ldr	r3, [pc, #84]	; (8005f44 <lv_obj_scroll_by+0x114>)
 8005eee:	9308      	str	r3, [sp, #32]
 8005ef0:	f7fe fc28 	bl	8004744 <lv_event_send>
            if(res != LV_RES_OK) return;
 8005ef4:	2801      	cmp	r0, #1
 8005ef6:	d102      	bne.n	8005efe <lv_obj_scroll_by+0xce>
            lv_anim_start(&a);
 8005ef8:	a801      	add	r0, sp, #4
 8005efa:	f00c fa81 	bl	8012400 <lv_anim_start>
        if(res != LV_RES_OK) return;

        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
        if(res != LV_RES_OK) return;
    }
}
 8005efe:	b013      	add	sp, #76	; 0x4c
 8005f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_anim_del(obj, scroll_y_anim);
 8005f02:	4911      	ldr	r1, [pc, #68]	; (8005f48 <lv_obj_scroll_by+0x118>)
 8005f04:	f00c fa4c 	bl	80123a0 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 8005f08:	490d      	ldr	r1, [pc, #52]	; (8005f40 <lv_obj_scroll_by+0x110>)
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f00c fa48 	bl	80123a0 <lv_anim_del>
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8005f10:	2200      	movs	r2, #0
 8005f12:	2109      	movs	r1, #9
 8005f14:	4620      	mov	r0, r4
 8005f16:	f7fe fc15 	bl	8004744 <lv_event_send>
        if(res != LV_RES_OK) return;
 8005f1a:	2801      	cmp	r0, #1
 8005f1c:	d1ef      	bne.n	8005efe <lv_obj_scroll_by+0xce>
        res = _lv_obj_scroll_by_raw(obj, dx, dy);
 8005f1e:	4632      	mov	r2, r6
 8005f20:	4629      	mov	r1, r5
 8005f22:	4620      	mov	r0, r4
 8005f24:	f017 f85b 	bl	801cfde <_lv_obj_scroll_by_raw>
        if(res != LV_RES_OK) return;
 8005f28:	2801      	cmp	r0, #1
 8005f2a:	d1e8      	bne.n	8005efe <lv_obj_scroll_by+0xce>
        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	210a      	movs	r1, #10
 8005f30:	4620      	mov	r0, r4
}
 8005f32:	b013      	add	sp, #76	; 0x4c
 8005f34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 8005f38:	f7fe bc04 	b.w	8004744 <lv_event_send>
 8005f3c:	0801cf0f 	.word	0x0801cf0f
 8005f40:	0801d03d 	.word	0x0801d03d
 8005f44:	080241b1 	.word	0x080241b1
 8005f48:	0801d025 	.word	0x0801d025

08005f4c <lv_obj_scroll_to_x>:
    lv_obj_scroll_to_x(obj, x, anim_en);
    lv_obj_scroll_to_y(obj, y, anim_en);
}

void lv_obj_scroll_to_x(lv_obj_t * obj, lv_coord_t x, lv_anim_enable_t anim_en)
{
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	4604      	mov	r4, r0
 8005f50:	460e      	mov	r6, r1
    lv_anim_del(obj, scroll_x_anim);
 8005f52:	4908      	ldr	r1, [pc, #32]	; (8005f74 <lv_obj_scroll_to_x+0x28>)
{
 8005f54:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_x_anim);
 8005f56:	f00c fa23 	bl	80123a0 <lv_anim_del>

    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f017 f831 	bl	801cfc2 <lv_obj_get_scroll_x>
    lv_coord_t diff = -x + scroll_x;
 8005f60:	1b81      	subs	r1, r0, r6

    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 8005f62:	462b      	mov	r3, r5
 8005f64:	4620      	mov	r0, r4
 8005f66:	2200      	movs	r2, #0
 8005f68:	b209      	sxth	r1, r1
}
 8005f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 8005f6e:	f017 b871 	b.w	801d054 <lv_obj_scroll_by_bounded>
 8005f72:	bf00      	nop
 8005f74:	0801d03d 	.word	0x0801d03d

08005f78 <lv_obj_scroll_to_y>:

void lv_obj_scroll_to_y(lv_obj_t * obj, lv_coord_t y, lv_anim_enable_t anim_en)
{
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	460e      	mov	r6, r1
    lv_anim_del(obj, scroll_y_anim);
 8005f7e:	4908      	ldr	r1, [pc, #32]	; (8005fa0 <lv_obj_scroll_to_y+0x28>)
{
 8005f80:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_y_anim);
 8005f82:	f00c fa0d 	bl	80123a0 <lv_anim_del>

    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 8005f86:	4620      	mov	r0, r4
 8005f88:	f017 f821 	bl	801cfce <lv_obj_get_scroll_y>
    lv_coord_t diff = -y + scroll_y;
 8005f8c:	1b82      	subs	r2, r0, r6

    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 8005f8e:	462b      	mov	r3, r5
 8005f90:	4620      	mov	r0, r4
 8005f92:	b212      	sxth	r2, r2
 8005f94:	2100      	movs	r1, #0
}
 8005f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 8005f9a:	f017 b85b 	b.w	801d054 <lv_obj_scroll_by_bounded>
 8005f9e:	bf00      	nop
 8005fa0:	0801d025 	.word	0x0801d025

08005fa4 <scroll_area_into_view>:
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
}

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 8005fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa8:	b08b      	sub	sp, #44	; 0x2c
 8005faa:	4607      	mov	r7, r0
    lv_obj_t * parent = lv_obj_get_parent(child);
 8005fac:	4608      	mov	r0, r1
{
 8005fae:	4691      	mov	r9, r2
 8005fb0:	9102      	str	r1, [sp, #8]
 8005fb2:	9303      	str	r3, [sp, #12]
    lv_obj_t * parent = lv_obj_get_parent(child);
 8005fb4:	f018 f91c 	bl	801e1f0 <lv_obj_get_parent>
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 8005fb8:	2110      	movs	r1, #16
    lv_obj_t * parent = lv_obj_get_parent(child);
 8005fba:	4605      	mov	r5, r0
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 8005fbc:	f015 fd5a 	bl	801ba74 <lv_obj_has_flag>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	f000 815b 	beq.w	800627c <scroll_area_into_view+0x2d8>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f016 ffe7 	bl	801cf9a <lv_obj_get_scroll_dir>
 8005fcc:	9000      	str	r0, [sp, #0]
    lv_coord_t snap_goal = 0;
    lv_coord_t act = 0;
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f016 fff1 	bl	801cfb6 <lv_obj_get_scroll_snap_y>
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 8005fd4:	4683      	mov	fp, r0
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	f000 80d6 	beq.w	8006188 <scroll_area_into_view+0x1e4>
 8005fdc:	9b02      	ldr	r3, [sp, #8]
 8005fde:	f103 0a14 	add.w	sl, r3, #20
 8005fe2:	2232      	movs	r2, #50	; 0x32
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	f017 fd7e 	bl	801dae8 <lv_obj_get_style_prop>
 8005fec:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005fee:	2210      	movs	r2, #16
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f017 fd78 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005ff8:	2211      	movs	r2, #17
    else area_tmp = area;

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005ffa:	b2b3      	uxth	r3, r6
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	fa10 f686 	uxtah	r6, r0, r6
 8006002:	4628      	mov	r0, r5
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	f017 fd6f 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 800600a:	9b01      	ldr	r3, [sp, #4]
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 800600c:	b2b6      	uxth	r6, r6
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800600e:	f8b9 8002 	ldrh.w	r8, [r9, #2]
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 8006012:	4418      	add	r0, r3
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8006014:	f8ba 1006 	ldrh.w	r1, [sl, #6]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8006018:	eba6 0408 	sub.w	r4, r6, r8
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 800601c:	b283      	uxth	r3, r0
 800601e:	fa18 f880 	uxtah	r8, r8, r0
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8006022:	4628      	mov	r0, r5
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8006024:	9108      	str	r1, [sp, #32]
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 8006026:	9304      	str	r3, [sp, #16]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8006028:	fa1f f888 	uxth.w	r8, r8
 800602c:	8aeb      	ldrh	r3, [r5, #22]
 800602e:	441c      	add	r4, r3
 8006030:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8006034:	1ae4      	subs	r4, r4, r3
 8006036:	b2a3      	uxth	r3, r4
 8006038:	b224      	sxth	r4, r4
 800603a:	9305      	str	r3, [sp, #20]
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800603c:	8b6b      	ldrh	r3, [r5, #26]
 800603e:	eba8 0203 	sub.w	r2, r8, r3
 8006042:	9309      	str	r3, [sp, #36]	; 0x24
 8006044:	440a      	add	r2, r1
 8006046:	b212      	sxth	r2, r2
 8006048:	9207      	str	r2, [sp, #28]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800604a:	f016 fc2d 	bl	801c8a8 <lv_obj_get_height>
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 800604e:	2c00      	cmp	r4, #0
 8006050:	9b09      	ldr	r3, [sp, #36]	; 0x24
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8006052:	9006      	str	r0, [sp, #24]
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 8006054:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 8006058:	f2c0 80a3 	blt.w	80061a2 <scroll_area_into_view+0x1fe>
 800605c:	2a00      	cmp	r2, #0
 800605e:	f2c0 8095 	blt.w	800618c <scroll_area_into_view+0x1e8>
 8006062:	2400      	movs	r4, #0
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
 8006064:	f1bb 0f02 	cmp.w	fp, #2
 8006068:	f000 80a9 	beq.w	80061be <scroll_area_into_view+0x21a>
 800606c:	f1bb 0f03 	cmp.w	fp, #3
 8006070:	f000 80ab 	beq.w	80061ca <scroll_area_into_view+0x226>
 8006074:	f1bb 0f01 	cmp.w	fp, #1
 8006078:	d105      	bne.n	8006086 <scroll_area_into_view+0xe2>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.y1 + ptop;
            act = area_tmp->y1 + y_scroll;
            y_scroll += snap_goal - act;
 800607a:	8aec      	ldrh	r4, [r5, #22]
 800607c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8006080:	4434      	add	r4, r6
            break;
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.y2 - pbottom;
            act = area_tmp->y2 + y_scroll;
            y_scroll += snap_goal - act;
 8006082:	1ae4      	subs	r4, r4, r3
 8006084:	b224      	sxth	r4, r4
            y_scroll += snap_goal - act;
            break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 8006086:	4628      	mov	r0, r5
 8006088:	f016 ff8f 	bl	801cfaa <lv_obj_get_scroll_snap_x>
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800608c:	4682      	mov	sl, r0
 800608e:	b108      	cbz	r0, 8006094 <scroll_area_into_view+0xf0>
 8006090:	9f02      	ldr	r7, [sp, #8]
 8006092:	3714      	adds	r7, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006094:	2212      	movs	r2, #18
 8006096:	2100      	movs	r1, #0
 8006098:	4628      	mov	r0, r5
 800609a:	f017 fd25 	bl	801dae8 <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 800609e:	9b01      	ldr	r3, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80060a0:	2213      	movs	r2, #19
 80060a2:	2100      	movs	r1, #0
 80060a4:	eb03 0800 	add.w	r8, r3, r0
 80060a8:	4628      	mov	r0, r5
 80060aa:	f017 fd1d 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 80060ae:	f8b9 1000 	ldrh.w	r1, [r9]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 80060b2:	9b01      	ldr	r3, [sp, #4]
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 80060b4:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 80060b8:	f8b7 c004 	ldrh.w	ip, [r7, #4]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 80060bc:	4418      	add	r0, r3
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 80060be:	eba8 0601 	sub.w	r6, r8, r1
 80060c2:	8aab      	ldrh	r3, [r5, #20]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 80060c4:	fa1f fb80 	uxth.w	fp, r0
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 80060c8:	fa11 f080 	uxtah	r0, r1, r0
 80060cc:	441e      	add	r6, r3
 80060ce:	883b      	ldrh	r3, [r7, #0]
 80060d0:	b280      	uxth	r0, r0
 80060d2:	1af6      	subs	r6, r6, r3
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 80060d4:	8b2b      	ldrh	r3, [r5, #24]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 80060d6:	b2b2      	uxth	r2, r6
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 80060d8:	1ac1      	subs	r1, r0, r3
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 80060da:	b236      	sxth	r6, r6
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 80060dc:	4461      	add	r1, ip
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 80060de:	2e00      	cmp	r6, #0
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 80060e0:	b209      	sxth	r1, r1
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 80060e2:	f2c0 8099 	blt.w	8006218 <scroll_area_into_view+0x274>
 80060e6:	2900      	cmp	r1, #0
 80060e8:	f2c0 808a 	blt.w	8006200 <scroll_area_into_view+0x25c>
 80060ec:	2600      	movs	r6, #0
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 80060ee:	4628      	mov	r0, r5
 80060f0:	f016 fbd4 	bl	801c89c <lv_obj_get_width>
    switch(snap_x) {
 80060f4:	f1ba 0f02 	cmp.w	sl, #2
 80060f8:	f000 809c 	beq.w	8006234 <scroll_area_into_view+0x290>
 80060fc:	f1ba 0f03 	cmp.w	sl, #3
 8006100:	f000 809d 	beq.w	800623e <scroll_area_into_view+0x29a>
 8006104:	f1ba 0f01 	cmp.w	sl, #1
 8006108:	d104      	bne.n	8006114 <scroll_area_into_view+0x170>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.x1 + pleft;
            act = area_tmp->x1 + x_scroll;
            x_scroll += snap_goal - act;
 800610a:	8aae      	ldrh	r6, [r5, #20]
 800610c:	883b      	ldrh	r3, [r7, #0]
 800610e:	4446      	add	r6, r8
            break;
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.x2 - pright;
            act = area_tmp->x2 + x_scroll;
            x_scroll += snap_goal - act;
 8006110:	1af6      	subs	r6, r6, r3
            break;
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
            x_scroll += snap_goal - act;
 8006112:	b236      	sxth	r6, r6
            break;
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 8006114:	495d      	ldr	r1, [pc, #372]	; (800628c <scroll_area_into_view+0x2e8>)
 8006116:	4628      	mov	r0, r5
 8006118:	f00c f942 	bl	80123a0 <lv_anim_del>
 800611c:	4607      	mov	r7, r0
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 800611e:	495c      	ldr	r1, [pc, #368]	; (8006290 <scroll_area_into_view+0x2ec>)
 8006120:	4628      	mov	r0, r5
 8006122:	f00c f93d 	bl	80123a0 <lv_anim_del>
    if(y_del || x_del) {
 8006126:	2f00      	cmp	r7, #0
 8006128:	f040 80a0 	bne.w	800626c <scroll_area_into_view+0x2c8>
 800612c:	2800      	cmp	r0, #0
 800612e:	f040 809d 	bne.w	800626c <scroll_area_into_view+0x2c8>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
        if(res != LV_RES_OK) return;
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 8006132:	9b00      	ldr	r3, [sp, #0]
 8006134:	07d8      	lsls	r0, r3, #31
 8006136:	f140 80a4 	bpl.w	8006282 <scroll_area_into_view+0x2de>
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 800613a:	9b00      	ldr	r3, [sp, #0]
 800613c:	0799      	lsls	r1, r3, #30
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 800613e:	9b00      	ldr	r3, [sp, #0]
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 8006140:	bf58      	it	pl
 8006142:	ea06 76e6 	andpl.w	r6, r6, r6, asr #31
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 8006146:	075a      	lsls	r2, r3, #29
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 8006148:	9b00      	ldr	r3, [sp, #0]
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 800614a:	bf58      	it	pl
 800614c:	ea24 74e4 	bicpl.w	r4, r4, r4, asr #31

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8006150:	9a03      	ldr	r2, [sp, #12]
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 8006152:	071b      	lsls	r3, r3, #28
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8006154:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 8006158:	bf58      	it	pl
 800615a:	ea04 74e4 	andpl.w	r4, r4, r4, asr #31
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800615e:	2a00      	cmp	r2, #0
 8006160:	f000 8092 	beq.w	8006288 <scroll_area_into_view+0x2e4>
 8006164:	f8b9 2000 	ldrh.w	r2, [r9]
 8006168:	4432      	add	r2, r6
 800616a:	f8a9 2000 	strh.w	r2, [r9]
 800616e:	4622      	mov	r2, r4
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8006170:	4413      	add	r3, r2
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8006172:	4631      	mov	r1, r6
 8006174:	4622      	mov	r2, r4
 8006176:	4628      	mov	r0, r5
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8006178:	f8a9 3002 	strh.w	r3, [r9, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800617c:	9b03      	ldr	r3, [sp, #12]
}
 800617e:	b00b      	add	sp, #44	; 0x2c
 8006180:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8006184:	f7ff be54 	b.w	8005e30 <lv_obj_scroll_by>
    else area_tmp = area;
 8006188:	46ba      	mov	sl, r7
 800618a:	e72a      	b.n	8005fe2 <scroll_area_into_view+0x3e>
    else if(top_diff > 0) {
 800618c:	2c00      	cmp	r4, #0
 800618e:	f43f af68 	beq.w	8006062 <scroll_area_into_view+0xbe>
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8006192:	4628      	mov	r0, r5
 8006194:	f016 ff1b 	bl	801cfce <lv_obj_get_scroll_y>
        if(st - y_scroll < 0) y_scroll = 0;
 8006198:	9b05      	ldr	r3, [sp, #20]
 800619a:	4298      	cmp	r0, r3
 800619c:	f6bf af62 	bge.w	8006064 <scroll_area_into_view+0xc0>
 80061a0:	e75f      	b.n	8006062 <scroll_area_into_view+0xbe>
    else if(bottom_diff > 0) {
 80061a2:	2a00      	cmp	r2, #0
 80061a4:	f77f af5d 	ble.w	8006062 <scroll_area_into_view+0xbe>
        y_scroll = -bottom_diff;
 80061a8:	eba3 0308 	sub.w	r3, r3, r8
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 80061ac:	4628      	mov	r0, r5
        y_scroll = -bottom_diff;
 80061ae:	1a5b      	subs	r3, r3, r1
 80061b0:	b21c      	sxth	r4, r3
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 80061b2:	f7ff fd05 	bl	8005bc0 <lv_obj_get_scroll_bottom>
        if(sb + y_scroll < 0) y_scroll = 0;
 80061b6:	42e0      	cmn	r0, r4
 80061b8:	f57f af54 	bpl.w	8006064 <scroll_area_into_view+0xc0>
 80061bc:	e751      	b.n	8006062 <scroll_area_into_view+0xbe>
            y_scroll += snap_goal - act;
 80061be:	9b04      	ldr	r3, [sp, #16]
 80061c0:	8b6c      	ldrh	r4, [r5, #26]
 80061c2:	1ae4      	subs	r4, r4, r3
 80061c4:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80061c8:	e75b      	b.n	8006082 <scroll_area_into_view+0xde>
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 80061ca:	9b04      	ldr	r3, [sp, #16]
 80061cc:	9906      	ldr	r1, [sp, #24]
 80061ce:	4433      	add	r3, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80061d0:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 80061d4:	1acb      	subs	r3, r1, r3
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 80061d6:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 80061da:	fa01 f383 	sxtah	r3, r1, r3
            y_scroll += snap_goal - act;
 80061de:	8ae9      	ldrh	r1, [r5, #22]
 80061e0:	440e      	add	r6, r1
 80061e2:	1ab6      	subs	r6, r6, r2
 80061e4:	eb06 0663 	add.w	r6, r6, r3, asr #1
 80061e8:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80061ec:	3301      	adds	r3, #1
 80061ee:	1a9b      	subs	r3, r3, r2
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 80061f0:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80061f4:	fa02 f383 	sxtah	r3, r2, r3
            y_scroll += snap_goal - act;
 80061f8:	eba6 0663 	sub.w	r6, r6, r3, asr #1
 80061fc:	b234      	sxth	r4, r6
            break;
 80061fe:	e742      	b.n	8006086 <scroll_area_into_view+0xe2>
    else if(left_diff > 0) {
 8006200:	2e00      	cmp	r6, #0
 8006202:	f43f af73 	beq.w	80060ec <scroll_area_into_view+0x148>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8006206:	4628      	mov	r0, r5
 8006208:	9201      	str	r2, [sp, #4]
 800620a:	f7ff fd2b 	bl	8005c64 <lv_obj_get_scroll_left>
        if(sl - x_scroll < 0) x_scroll = 0;
 800620e:	9a01      	ldr	r2, [sp, #4]
 8006210:	4290      	cmp	r0, r2
 8006212:	f6bf af6c 	bge.w	80060ee <scroll_area_into_view+0x14a>
 8006216:	e769      	b.n	80060ec <scroll_area_into_view+0x148>
    else if(right_diff > 0) {
 8006218:	2900      	cmp	r1, #0
 800621a:	f77f af67 	ble.w	80060ec <scroll_area_into_view+0x148>
        x_scroll = -right_diff;
 800621e:	1a1b      	subs	r3, r3, r0
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 8006220:	4628      	mov	r0, r5
        x_scroll = -right_diff;
 8006222:	eba3 030c 	sub.w	r3, r3, ip
 8006226:	b21e      	sxth	r6, r3
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 8006228:	f7ff fd84 	bl	8005d34 <lv_obj_get_scroll_right>
        if(sr + x_scroll < 0) x_scroll = 0;
 800622c:	42f0      	cmn	r0, r6
 800622e:	f57f af5e 	bpl.w	80060ee <scroll_area_into_view+0x14a>
 8006232:	e75b      	b.n	80060ec <scroll_area_into_view+0x148>
            x_scroll += snap_goal - act;
 8006234:	8b2e      	ldrh	r6, [r5, #24]
 8006236:	88bb      	ldrh	r3, [r7, #4]
 8006238:	eba6 060b 	sub.w	r6, r6, fp
 800623c:	e768      	b.n	8006110 <scroll_area_into_view+0x16c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800623e:	88bb      	ldrh	r3, [r7, #4]
 8006240:	883a      	ldrh	r2, [r7, #0]
            x_scroll += snap_goal - act;
 8006242:	8aae      	ldrh	r6, [r5, #20]
 8006244:	3301      	adds	r3, #1
 8006246:	4446      	add	r6, r8
 8006248:	1a9b      	subs	r3, r3, r2
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800624a:	44d8      	add	r8, fp
            x_scroll += snap_goal - act;
 800624c:	1ab6      	subs	r6, r6, r2
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 800624e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8006252:	eba0 0008 	sub.w	r0, r0, r8
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 8006256:	fa02 f383 	sxtah	r3, r2, r3
            x_scroll += snap_goal - act;
 800625a:	eba6 0663 	sub.w	r6, r6, r3, asr #1
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 800625e:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8006262:	fa03 f080 	sxtah	r0, r3, r0
            x_scroll += snap_goal - act;
 8006266:	eb06 0660 	add.w	r6, r6, r0, asr #1
 800626a:	e752      	b.n	8006112 <scroll_area_into_view+0x16e>
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 800626c:	2200      	movs	r2, #0
 800626e:	210a      	movs	r1, #10
 8006270:	4628      	mov	r0, r5
 8006272:	f7fe fa67 	bl	8004744 <lv_event_send>
        if(res != LV_RES_OK) return;
 8006276:	2801      	cmp	r0, #1
 8006278:	f43f af5b 	beq.w	8006132 <scroll_area_into_view+0x18e>
}
 800627c:	b00b      	add	sp, #44	; 0x2c
 800627e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 8006282:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8006286:	e758      	b.n	800613a <scroll_area_into_view+0x196>
 8006288:	9a03      	ldr	r2, [sp, #12]
 800628a:	e771      	b.n	8006170 <scroll_area_into_view+0x1cc>
 800628c:	0801d025 	.word	0x0801d025
 8006290:	0801d03d 	.word	0x0801d03d

08006294 <trans_del.isra.0>:
 * @param obj pointer to an object which transition(s) should be removed
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 8006294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	4606      	mov	r6, r0
{
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800629a:	4826      	ldr	r0, [pc, #152]	; (8006334 <trans_del.isra.0+0xa0>)
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 800629c:	460d      	mov	r5, r1
 800629e:	4617      	mov	r7, r2
 80062a0:	4698      	mov	r8, r3
        if(tr == tr_limit) break;

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 80062a2:	f64f 7bff 	movw	fp, #65535	; 0xffff
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 80062a6:	f01e fc48 	bl	8024b3a <_lv_ll_get_tail>
 80062aa:	4604      	mov	r4, r0
    while(tr != NULL) {
 80062ac:	b90c      	cbnz	r4, 80062b2 <trans_del.isra.0+0x1e>

        }
        tr = tr_prev;
    }
    return removed;
}
 80062ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(tr == tr_limit) break;
 80062b2:	4544      	cmp	r4, r8
 80062b4:	d0fb      	beq.n	80062ae <trans_del.isra.0+0x1a>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80062b6:	4621      	mov	r1, r4
 80062b8:	481e      	ldr	r0, [pc, #120]	; (8006334 <trans_del.isra.0+0xa0>)
 80062ba:	f01e fc45 	bl	8024b48 <_lv_ll_get_prev>
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 80062be:	6823      	ldr	r3, [r4, #0]
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80062c0:	4681      	mov	r9, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 80062c2:	42b3      	cmp	r3, r6
 80062c4:	d11c      	bne.n	8006300 <trans_del.isra.0+0x6c>
 80062c6:	68a3      	ldr	r3, [r4, #8]
 80062c8:	42ab      	cmp	r3, r5
 80062ca:	d002      	beq.n	80062d2 <trans_del.isra.0+0x3e>
 80062cc:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 80062d0:	d116      	bne.n	8006300 <trans_del.isra.0+0x6c>
 80062d2:	88a3      	ldrh	r3, [r4, #4]
 80062d4:	42bb      	cmp	r3, r7
 80062d6:	d001      	beq.n	80062dc <trans_del.isra.0+0x48>
 80062d8:	455f      	cmp	r7, fp
 80062da:	d111      	bne.n	8006300 <trans_del.isra.0+0x6c>
 80062dc:	f04f 0a00 	mov.w	sl, #0
            for(i = 0; i < obj->style_cnt; i++) {
 80062e0:	8c72      	ldrh	r2, [r6, #34]	; 0x22
 80062e2:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 80062e6:	4592      	cmp	sl, r2
 80062e8:	d30c      	bcc.n	8006304 <trans_del.isra.0+0x70>
            lv_anim_del(tr, NULL);
 80062ea:	2100      	movs	r1, #0
 80062ec:	4620      	mov	r0, r4
 80062ee:	f00c f857 	bl	80123a0 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80062f2:	4810      	ldr	r0, [pc, #64]	; (8006334 <trans_del.isra.0+0xa0>)
 80062f4:	4621      	mov	r1, r4
 80062f6:	f01e fbe2 	bl	8024abe <_lv_ll_remove>
            lv_mem_free(tr);
 80062fa:	4620      	mov	r0, r4
 80062fc:	f00c fa2a 	bl	8012754 <lv_mem_free>
            removed = true;
 8006300:	464c      	mov	r4, r9
 8006302:	e7d3      	b.n	80062ac <trans_del.isra.0+0x18>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 8006304:	68f0      	ldr	r0, [r6, #12]
 8006306:	ea4f 0cca 	mov.w	ip, sl, lsl #3
 800630a:	eb00 02ca 	add.w	r2, r0, sl, lsl #3
 800630e:	79d1      	ldrb	r1, [r2, #7]
 8006310:	078b      	lsls	r3, r1, #30
 8006312:	d50c      	bpl.n	800632e <trans_del.isra.0+0x9a>
 8006314:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 8006318:	d004      	beq.n	8006324 <trans_del.isra.0+0x90>
 800631a:	6852      	ldr	r2, [r2, #4]
 800631c:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8006320:	4295      	cmp	r5, r2
 8006322:	d104      	bne.n	800632e <trans_del.isra.0+0x9a>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 8006324:	88a1      	ldrh	r1, [r4, #4]
 8006326:	f850 000c 	ldr.w	r0, [r0, ip]
 800632a:	f01e fce0 	bl	8024cee <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 800632e:	f10a 0a01 	add.w	sl, sl, #1
 8006332:	e7d5      	b.n	80062e0 <trans_del.isra.0+0x4c>
 8006334:	240013b0 	.word	0x240013b0

08006338 <_lv_obj_style_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 8006338:	2114      	movs	r1, #20
 800633a:	4801      	ldr	r0, [pc, #4]	; (8006340 <_lv_obj_style_init+0x8>)
 800633c:	f01e bb80 	b.w	8024a40 <_lv_ll_init>
 8006340:	240013b0 	.word	0x240013b0

08006344 <lv_obj_enable_style_refresh>:
    style_refr = en;
 8006344:	4b01      	ldr	r3, [pc, #4]	; (800634c <lv_obj_enable_style_refresh+0x8>)
 8006346:	7018      	strb	r0, [r3, #0]
}
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	24000154 	.word	0x24000154

08006350 <lv_obj_refresh_style>:
    if(!style_refr) return;
 8006350:	4b77      	ldr	r3, [pc, #476]	; (8006530 <lv_obj_refresh_style+0x1e0>)
{
 8006352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(!style_refr) return;
 8006356:	781b      	ldrb	r3, [r3, #0]
{
 8006358:	4604      	mov	r4, r0
 800635a:	460e      	mov	r6, r1
 800635c:	4615      	mov	r5, r2
    if(!style_refr) return;
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 80a3 	beq.w	80064aa <lv_obj_refresh_style+0x15a>
    lv_obj_invalidate(obj);
 8006364:	f016 fc9a 	bl	801cc9c <lv_obj_invalidate>
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
    return _lv_style_prop_lookup_flags(prop) & flag;
 8006368:	4628      	mov	r0, r5
 800636a:	f00c fb3f 	bl	80129ec <_lv_style_prop_lookup_flags>
 800636e:	f000 0904 	and.w	r9, r0, #4
 8006372:	4628      	mov	r0, r5
    return selector & 0xFF0000;
 8006374:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8006378:	f00c fb38 	bl	80129ec <_lv_style_prop_lookup_flags>
 800637c:	f000 0702 	and.w	r7, r0, #2
 8006380:	4628      	mov	r0, r5
 8006382:	f00c fb33 	bl	80129ec <_lv_style_prop_lookup_flags>
 8006386:	f000 0801 	and.w	r8, r0, #1
 800638a:	4628      	mov	r0, r5
 800638c:	f00c fb2e 	bl	80129ec <_lv_style_prop_lookup_flags>
 8006390:	f000 0a10 	and.w	sl, r0, #16
    if(is_layout_refr) {
 8006394:	f1b9 0f00 	cmp.w	r9, #0
 8006398:	d050      	beq.n	800643c <lv_obj_refresh_style+0xec>
        if(part == LV_PART_ANY ||
 800639a:	f5b6 2f70 	cmp.w	r6, #983040	; 0xf0000
 800639e:	d03a      	beq.n	8006416 <lv_obj_refresh_style+0xc6>
 80063a0:	b35e      	cbz	r6, 80063fa <lv_obj_refresh_style+0xaa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80063a2:	2204      	movs	r2, #4
 80063a4:	2100      	movs	r1, #0
 80063a6:	4620      	mov	r0, r4
           part == LV_PART_MAIN ||
 80063a8:	f242 7ad1 	movw	sl, #10193	; 0x27d1
 80063ac:	f017 fb9c 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80063b0:	b200      	sxth	r0, r0
 80063b2:	4550      	cmp	r0, sl
 80063b4:	d007      	beq.n	80063c6 <lv_obj_refresh_style+0x76>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80063b6:	2201      	movs	r2, #1
 80063b8:	2100      	movs	r1, #0
 80063ba:	4620      	mov	r0, r4
 80063bc:	f017 fb94 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80063c0:	b200      	sxth	r0, r0
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 80063c2:	4550      	cmp	r0, sl
 80063c4:	d107      	bne.n	80063d6 <lv_obj_refresh_style+0x86>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 80063c6:	2200      	movs	r2, #0
 80063c8:	212a      	movs	r1, #42	; 0x2a
 80063ca:	4620      	mov	r0, r4
 80063cc:	f7fe f9ba 	bl	8004744 <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 80063d0:	4620      	mov	r0, r4
 80063d2:	f016 f9e2 	bl	801c79a <lv_obj_mark_layout_as_dirty>
    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 80063d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063da:	429d      	cmp	r5, r3
 80063dc:	d15d      	bne.n	800649a <lv_obj_refresh_style+0x14a>
        lv_obj_refresh_ext_draw_size(obj);
 80063de:	4620      	mov	r0, r4
 80063e0:	f016 f88e 	bl	801c500 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 80063e4:	4620      	mov	r0, r4
 80063e6:	f016 fc59 	bl	801cc9c <lv_obj_invalidate>
        if(part != LV_PART_SCROLLBAR) {
 80063ea:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80063ee:	d05c      	beq.n	80064aa <lv_obj_refresh_style+0x15a>
            refresh_children_style(obj);
 80063f0:	4620      	mov	r0, r4
}
 80063f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            refresh_children_style(obj);
 80063f6:	f017 bab3 	b.w	801d960 <refresh_children_style>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 80063fa:	4632      	mov	r2, r6
 80063fc:	212a      	movs	r1, #42	; 0x2a
 80063fe:	4620      	mov	r0, r4
 8006400:	f7fe f9a0 	bl	8004744 <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 8006404:	4620      	mov	r0, r4
 8006406:	f016 f9c8 	bl	801c79a <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 800640a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800640e:	429d      	cmp	r5, r3
 8006410:	d13a      	bne.n	8006488 <lv_obj_refresh_style+0x138>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 8006412:	4620      	mov	r0, r4
 8006414:	e00c      	b.n	8006430 <lv_obj_refresh_style+0xe0>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 8006416:	2200      	movs	r2, #0
 8006418:	212a      	movs	r1, #42	; 0x2a
 800641a:	4620      	mov	r0, r4
 800641c:	f7fe f992 	bl	8004744 <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 8006420:	4620      	mov	r0, r4
 8006422:	f016 f9ba 	bl	801c79a <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 8006426:	f64f 73ff 	movw	r3, #65535	; 0xffff
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800642a:	4620      	mov	r0, r4
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 800642c:	429d      	cmp	r5, r3
 800642e:	d12c      	bne.n	800648a <lv_obj_refresh_style+0x13a>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 8006430:	f017 fede 	bl	801e1f0 <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 8006434:	b1a8      	cbz	r0, 8006462 <lv_obj_refresh_style+0x112>
 8006436:	f016 f9b0 	bl	801c79a <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800643a:	e02a      	b.n	8006492 <lv_obj_refresh_style+0x142>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 800643c:	f5b6 2f70 	cmp.w	r6, #983040	; 0xf0000
 8006440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006444:	d001      	beq.n	800644a <lv_obj_refresh_style+0xfa>
 8006446:	2e00      	cmp	r6, #0
 8006448:	d1c5      	bne.n	80063d6 <lv_obj_refresh_style+0x86>
 800644a:	429d      	cmp	r5, r3
 800644c:	d0e1      	beq.n	8006412 <lv_obj_refresh_style+0xc2>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800644e:	f1ba 0f00 	cmp.w	sl, #0
 8006452:	d109      	bne.n	8006468 <lv_obj_refresh_style+0x118>
    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 8006454:	2f00      	cmp	r7, #0
 8006456:	d15c      	bne.n	8006512 <lv_obj_refresh_style+0x1c2>
    lv_obj_invalidate(obj);
 8006458:	4620      	mov	r0, r4
}
 800645a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_invalidate(obj);
 800645e:	f016 bc1d 	b.w	801cc9c <lv_obj_invalidate>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 8006462:	f1ba 0f00 	cmp.w	sl, #0
 8006466:	d0ba      	beq.n	80063de <lv_obj_refresh_style+0x8e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8006468:	226d      	movs	r2, #109	; 0x6d
 800646a:	2100      	movs	r1, #0
 800646c:	4620      	mov	r0, r4
 800646e:	f017 fb3b 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006472:	fa0f fa80 	sxth.w	sl, r0
    }
}

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 8006476:	f1ba 0f00 	cmp.w	sl, #0
 800647a:	d018      	beq.n	80064ae <lv_obj_refresh_style+0x15e>
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800647c:	68a3      	ldr	r3, [r4, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d145      	bne.n	800650e <lv_obj_refresh_style+0x1be>
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 8006482:	f04f 0a02 	mov.w	sl, #2
 8006486:	e029      	b.n	80064dc <lv_obj_refresh_style+0x18c>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 8006488:	4620      	mov	r0, r4
 800648a:	f017 feb1 	bl	801e1f0 <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 800648e:	2800      	cmp	r0, #0
 8006490:	d1d1      	bne.n	8006436 <lv_obj_refresh_style+0xe6>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 8006492:	f1ba 0f00 	cmp.w	sl, #0
 8006496:	d09e      	beq.n	80063d6 <lv_obj_refresh_style+0x86>
 8006498:	e7e6      	b.n	8006468 <lv_obj_refresh_style+0x118>
    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 800649a:	2f00      	cmp	r7, #0
 800649c:	d139      	bne.n	8006512 <lv_obj_refresh_style+0x1c2>
    lv_obj_invalidate(obj);
 800649e:	4620      	mov	r0, r4
 80064a0:	f016 fbfc 	bl	801cc9c <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 80064a4:	f1b8 0f00 	cmp.w	r8, #0
 80064a8:	d13d      	bne.n	8006526 <lv_obj_refresh_style+0x1d6>
}
 80064aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 80064ae:	226c      	movs	r2, #108	; 0x6c
 80064b0:	4651      	mov	r1, sl
 80064b2:	4620      	mov	r0, r4
 80064b4:	f017 fb18 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80064b8:	b200      	sxth	r0, r0
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 80064ba:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80064be:	d1dd      	bne.n	800647c <lv_obj_refresh_style+0x12c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80064c0:	2260      	movs	r2, #96	; 0x60
 80064c2:	4651      	mov	r1, sl
 80064c4:	4620      	mov	r0, r4
 80064c6:	f017 fb0f 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80064ca:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 80064cc:	28ff      	cmp	r0, #255	; 0xff
 80064ce:	d00d      	beq.n	80064ec <lv_obj_refresh_style+0x19c>
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 80064d0:	68a3      	ldr	r3, [r4, #8]
 80064d2:	b10b      	cbz	r3, 80064d8 <lv_obj_refresh_style+0x188>
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 80064d4:	2001      	movs	r0, #1
 80064d6:	e015      	b.n	8006504 <lv_obj_refresh_style+0x1b4>
 80064d8:	f04f 0a01 	mov.w	sl, #1
            lv_obj_allocate_spec_attr(obj);
 80064dc:	4620      	mov	r0, r4
 80064de:	f7fe fc7f 	bl	8004de0 <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 80064e2:	68a3      	ldr	r3, [r4, #8]
 80064e4:	7e9a      	ldrb	r2, [r3, #26]
 80064e6:	f36a 1287 	bfi	r2, sl, #6, #2
 80064ea:	e00e      	b.n	800650a <lv_obj_refresh_style+0x1ba>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80064ec:	2267      	movs	r2, #103	; 0x67
 80064ee:	4651      	mov	r1, sl
 80064f0:	4620      	mov	r0, r4
 80064f2:	f017 faf9 	bl	801dae8 <lv_obj_get_style_prop>

#if LV_DRAW_COMPLEX
    if(lv_obj_get_style_blend_mode(obj, 0) != LV_BLEND_MODE_NORMAL) return LV_LAYER_TYPE_SIMPLE;
 80064f6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80064fa:	68a3      	ldr	r3, [r4, #8]
 80064fc:	d1e9      	bne.n	80064d2 <lv_obj_refresh_style+0x182>
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f43f af69 	beq.w	80063d6 <lv_obj_refresh_style+0x86>
 8006504:	7e9a      	ldrb	r2, [r3, #26]
 8006506:	f360 1287 	bfi	r2, r0, #6, #2
            obj->spec_attr->layer_type = layer_type;
 800650a:	769a      	strb	r2, [r3, #26]
 800650c:	e763      	b.n	80063d6 <lv_obj_refresh_style+0x86>
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800650e:	2002      	movs	r0, #2
 8006510:	e7f8      	b.n	8006504 <lv_obj_refresh_style+0x1b4>
        lv_obj_refresh_ext_draw_size(obj);
 8006512:	4620      	mov	r0, r4
 8006514:	f015 fff4 	bl	801c500 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8006518:	4620      	mov	r0, r4
 800651a:	f016 fbbf 	bl	801cc9c <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800651e:	f1b8 0f00 	cmp.w	r8, #0
 8006522:	d0c2      	beq.n	80064aa <lv_obj_refresh_style+0x15a>
 8006524:	e761      	b.n	80063ea <lv_obj_refresh_style+0x9a>
 8006526:	f1b9 0f00 	cmp.w	r9, #0
 800652a:	f47f af5e 	bne.w	80063ea <lv_obj_refresh_style+0x9a>
 800652e:	e7bc      	b.n	80064aa <lv_obj_refresh_style+0x15a>
 8006530:	24000154 	.word	0x24000154

08006534 <lv_obj_report_style_change>:
    if(!style_refr) return;
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <lv_obj_report_style_change+0x34>)
{
 8006536:	b570      	push	{r4, r5, r6, lr}
    if(!style_refr) return;
 8006538:	781b      	ldrb	r3, [r3, #0]
{
 800653a:	4606      	mov	r6, r0
    if(!style_refr) return;
 800653c:	b123      	cbz	r3, 8006548 <lv_obj_report_style_change+0x14>
    lv_disp_t * d = lv_disp_get_next(NULL);
 800653e:	2000      	movs	r0, #0
        d = lv_disp_get_next(d);
 8006540:	f00b fe0c 	bl	801215c <lv_disp_get_next>
 8006544:	4604      	mov	r4, r0
    while(d) {
 8006546:	b960      	cbnz	r0, 8006562 <lv_obj_report_style_change+0x2e>
}
 8006548:	bd70      	pop	{r4, r5, r6, pc}
            report_style_change_core(style, d->screens[i]);
 800654a:	68e3      	ldr	r3, [r4, #12]
 800654c:	4630      	mov	r0, r6
 800654e:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
        for(i = 0; i < d->screen_cnt; i++) {
 8006552:	3501      	adds	r5, #1
            report_style_change_core(style, d->screens[i]);
 8006554:	f017 fbd5 	bl	801dd02 <report_style_change_core>
        for(i = 0; i < d->screen_cnt; i++) {
 8006558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800655a:	42ab      	cmp	r3, r5
 800655c:	d8f5      	bhi.n	800654a <lv_obj_report_style_change+0x16>
        d = lv_disp_get_next(d);
 800655e:	4620      	mov	r0, r4
 8006560:	e7ee      	b.n	8006540 <lv_obj_report_style_change+0xc>
        for(i = 0; i < d->screen_cnt; i++) {
 8006562:	2500      	movs	r5, #0
 8006564:	e7f8      	b.n	8006558 <lv_obj_report_style_change+0x24>
 8006566:	bf00      	nop
 8006568:	24000154 	.word	0x24000154

0800656c <trans_anim_cb>:
{
 800656c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    lv_obj_t * obj = tr->obj;
 8006570:	6806      	ldr	r6, [r0, #0]
{
 8006572:	460a      	mov	r2, r1
 8006574:	4604      	mov	r4, r0
    for(i = 0; i < obj->style_cnt; i++) {
 8006576:	2300      	movs	r3, #0
 8006578:	8c71      	ldrh	r1, [r6, #34]	; 0x22
 800657a:	f3c1 01c5 	ubfx	r1, r1, #3, #6
 800657e:	4299      	cmp	r1, r3
 8006580:	d940      	bls.n	8006604 <trans_anim_cb+0x98>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 8006582:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8006586:	00df      	lsls	r7, r3, #3
 8006588:	eb0c 00c3 	add.w	r0, ip, r3, lsl #3
 800658c:	79c5      	ldrb	r5, [r0, #7]
 800658e:	07ad      	lsls	r5, r5, #30
 8006590:	d505      	bpl.n	800659e <trans_anim_cb+0x32>
 8006592:	6845      	ldr	r5, [r0, #4]
 8006594:	68a0      	ldr	r0, [r4, #8]
 8006596:	f3c5 0517 	ubfx	r5, r5, #0, #24
 800659a:	4285      	cmp	r5, r0
 800659c:	d001      	beq.n	80065a2 <trans_anim_cb+0x36>
    for(i = 0; i < obj->style_cnt; i++) {
 800659e:	3301      	adds	r3, #1
 80065a0:	e7ed      	b.n	800657e <trans_anim_cb+0x12>
        switch(tr->prop) {
 80065a2:	88a1      	ldrh	r1, [r4, #4]
 80065a4:	2961      	cmp	r1, #97	; 0x61
 80065a6:	d055      	beq.n	8006654 <trans_anim_cb+0xe8>
 80065a8:	d84e      	bhi.n	8006648 <trans_anim_cb+0xdc>
 80065aa:	2936      	cmp	r1, #54	; 0x36
 80065ac:	d82d      	bhi.n	800660a <trans_anim_cb+0x9e>
 80065ae:	291f      	cmp	r1, #31
 80065b0:	d93f      	bls.n	8006632 <trans_anim_cb+0xc6>
 80065b2:	f1a1 0020 	sub.w	r0, r1, #32
 80065b6:	2301      	movs	r3, #1
 80065b8:	b280      	uxth	r0, r0
 80065ba:	4083      	lsls	r3, r0
 80065bc:	4848      	ldr	r0, [pc, #288]	; (80066e0 <trans_anim_cb+0x174>)
 80065be:	4018      	ands	r0, r3
 80065c0:	bb70      	cbnz	r0, 8006620 <trans_anim_cb+0xb4>
 80065c2:	f413 1fc0 	tst.w	r3, #1572864	; 0x180000
 80065c6:	d034      	beq.n	8006632 <trans_anim_cb+0xc6>
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 80065c8:	2afe      	cmp	r2, #254	; 0xfe
 80065ca:	dc41      	bgt.n	8006650 <trans_anim_cb+0xe4>
 80065cc:	68e5      	ldr	r5, [r4, #12]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 80065ce:	aa01      	add	r2, sp, #4
 80065d0:	f85c 0007 	ldr.w	r0, [ip, r7]
 80065d4:	f01e fbe7 	bl	8024da6 <lv_style_get_prop>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d07d      	beq.n	80066d8 <trans_anim_cb+0x16c>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 80065dc:	9b01      	ldr	r3, [sp, #4]
 80065de:	ebb3 0805 	subs.w	r8, r3, r5
 80065e2:	bf18      	it	ne
 80065e4:	f04f 0801 	movne.w	r8, #1
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 80065e8:	68f3      	ldr	r3, [r6, #12]
 80065ea:	462a      	mov	r2, r5
 80065ec:	88a1      	ldrh	r1, [r4, #4]
 80065ee:	59d8      	ldr	r0, [r3, r7]
 80065f0:	f00c f9f6 	bl	80129e0 <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 80065f4:	f1b8 0f00 	cmp.w	r8, #0
 80065f8:	d004      	beq.n	8006604 <trans_anim_cb+0x98>
 80065fa:	88a2      	ldrh	r2, [r4, #4]
 80065fc:	68a1      	ldr	r1, [r4, #8]
 80065fe:	6820      	ldr	r0, [r4, #0]
 8006600:	f7ff fea6 	bl	8006350 <lv_obj_refresh_style>
}
 8006604:	b002      	add	sp, #8
 8006606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch(tr->prop) {
 800660a:	2955      	cmp	r1, #85	; 0x55
 800660c:	d80f      	bhi.n	800662e <trans_anim_cb+0xc2>
 800660e:	2943      	cmp	r1, #67	; 0x43
 8006610:	d90f      	bls.n	8006632 <trans_anim_cb+0xc6>
 8006612:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
 8006616:	4b33      	ldr	r3, [pc, #204]	; (80066e4 <trans_anim_cb+0x178>)
 8006618:	b280      	uxth	r0, r0
 800661a:	40c3      	lsrs	r3, r0
 800661c:	07db      	lsls	r3, r3, #31
 800661e:	d508      	bpl.n	8006632 <trans_anim_cb+0xc6>
                if(v <= 0) value_final.color = tr->start_value.color;
 8006620:	2a00      	cmp	r2, #0
 8006622:	dc22      	bgt.n	800666a <trans_anim_cb+0xfe>
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	2500      	movs	r5, #0
 8006628:	f363 050f 	bfi	r5, r3, #0, #16
 800662c:	e7cf      	b.n	80065ce <trans_anim_cb+0x62>
        switch(tr->prop) {
 800662e:	2957      	cmp	r1, #87	; 0x57
 8006630:	d0ca      	beq.n	80065c8 <trans_anim_cb+0x5c>
                if(v == 0) value_final.num = tr->start_value.num;
 8006632:	2a00      	cmp	r2, #0
 8006634:	d0ca      	beq.n	80065cc <trans_anim_cb+0x60>
                else if(v == 255) value_final.num = tr->end_value.num;
 8006636:	2aff      	cmp	r2, #255	; 0xff
 8006638:	d00a      	beq.n	8006650 <trans_anim_cb+0xe4>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 800663a:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 800663e:	1b5b      	subs	r3, r3, r5
 8006640:	4353      	muls	r3, r2
 8006642:	eb05 2523 	add.w	r5, r5, r3, asr #8
 8006646:	e7c2      	b.n	80065ce <trans_anim_cb+0x62>
        switch(tr->prop) {
 8006648:	2966      	cmp	r1, #102	; 0x66
 800664a:	d0bd      	beq.n	80065c8 <trans_anim_cb+0x5c>
 800664c:	2967      	cmp	r1, #103	; 0x67
 800664e:	e7ef      	b.n	8006630 <trans_anim_cb+0xc4>
                else value_final.ptr = tr->end_value.ptr;
 8006650:	6925      	ldr	r5, [r4, #16]
 8006652:	e7bc      	b.n	80065ce <trans_anim_cb+0x62>
                else value_final.num = tr->end_value.num;
 8006654:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 8006658:	b90d      	cbnz	r5, 800665e <trans_anim_cb+0xf2>
 800665a:	461d      	mov	r5, r3
 800665c:	e7b7      	b.n	80065ce <trans_anim_cb+0x62>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0b5      	beq.n	80065ce <trans_anim_cb+0x62>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 8006662:	2a7f      	cmp	r2, #127	; 0x7f
 8006664:	bfc8      	it	gt
 8006666:	461d      	movgt	r5, r3
 8006668:	e7b1      	b.n	80065ce <trans_anim_cb+0x62>
                else if(v >= 255) value_final.color = tr->end_value.color;
 800666a:	2afe      	cmp	r2, #254	; 0xfe
 800666c:	dd01      	ble.n	8006672 <trans_anim_cb+0x106>
 800666e:	8a23      	ldrh	r3, [r4, #16]
 8006670:	e7d9      	b.n	8006626 <trans_anim_cb+0xba>
#endif
#elif LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006672:	89a0      	ldrh	r0, [r4, #12]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8006674:	f1c2 0eff 	rsb	lr, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006678:	8a23      	ldrh	r3, [r4, #16]
 800667a:	f248 0581 	movw	r5, #32897	; 0x8081
 800667e:	f3c0 1045 	ubfx	r0, r0, #5, #6
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006682:	f894 8010 	ldrb.w	r8, [r4, #16]
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006686:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800668a:	fb0e f000 	mul.w	r0, lr, r0
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800668e:	f008 081f 	and.w	r8, r8, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006692:	fb02 0003 	mla	r0, r2, r3, r0
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006696:	7b23      	ldrb	r3, [r4, #12]
 8006698:	f003 031f 	and.w	r3, r3, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800669c:	3080      	adds	r0, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800669e:	fb0e f303 	mul.w	r3, lr, r3
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80066a2:	4368      	muls	r0, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80066a4:	fb02 3308 	mla	r3, r2, r8, r3
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80066a8:	f894 8011 	ldrb.w	r8, [r4, #17]
 80066ac:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80066b0:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80066b2:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80066b6:	436b      	muls	r3, r5
 80066b8:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 80066bc:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80066c0:	7b60      	ldrb	r0, [r4, #13]
 80066c2:	08c0      	lsrs	r0, r0, #3
 80066c4:	fb0e f000 	mul.w	r0, lr, r0
 80066c8:	fb02 0208 	mla	r2, r2, r8, r0
 80066cc:	3280      	adds	r2, #128	; 0x80
 80066ce:	436a      	muls	r2, r5
 80066d0:	0dd2      	lsrs	r2, r2, #23
 80066d2:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80066d6:	e7a6      	b.n	8006626 <trans_anim_cb+0xba>
        bool refr = true;
 80066d8:	f04f 0801 	mov.w	r8, #1
 80066dc:	e784      	b.n	80065e8 <trans_anim_cb+0x7c>
 80066de:	bf00      	nop
 80066e0:	00410005 	.word	0x00410005
 80066e4:	00020009 	.word	0x00020009

080066e8 <trans_anim_ready_cb>:
{
 80066e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    trans_t * tr = a->var;
 80066ec:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 80066ee:	4827      	ldr	r0, [pc, #156]	; (800678c <trans_anim_ready_cb+0xa4>)
    lv_obj_t * obj = tr->obj;
 80066f0:	6825      	ldr	r5, [r4, #0]
    lv_style_prop_t prop = tr->prop;
 80066f2:	88a7      	ldrh	r7, [r4, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 80066f4:	f01e fa1e 	bl	8024b34 <_lv_ll_get_head>
 80066f8:	4e24      	ldr	r6, [pc, #144]	; (800678c <trans_anim_ready_cb+0xa4>)
 80066fa:	4601      	mov	r1, r0
 80066fc:	b919      	cbnz	r1, 8006706 <trans_anim_ready_cb+0x1e>
        for(i = 0; i < obj->style_cnt; i++) {
 80066fe:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 8006700:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 8006704:	e03d      	b.n	8006782 <trans_anim_ready_cb+0x9a>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 8006706:	42a1      	cmp	r1, r4
 8006708:	d00b      	beq.n	8006722 <trans_anim_ready_cb+0x3a>
 800670a:	680a      	ldr	r2, [r1, #0]
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d107      	bne.n	8006722 <trans_anim_ready_cb+0x3a>
 8006712:	688a      	ldr	r2, [r1, #8]
 8006714:	68a3      	ldr	r3, [r4, #8]
 8006716:	429a      	cmp	r2, r3
 8006718:	d103      	bne.n	8006722 <trans_anim_ready_cb+0x3a>
 800671a:	888a      	ldrh	r2, [r1, #4]
 800671c:	88a3      	ldrh	r3, [r4, #4]
 800671e:	429a      	cmp	r2, r3
 8006720:	d031      	beq.n	8006786 <trans_anim_ready_cb+0x9e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8006722:	4630      	mov	r0, r6
 8006724:	f01e fa0c 	bl	8024b40 <_lv_ll_get_next>
 8006728:	4601      	mov	r1, r0
 800672a:	e7e7      	b.n	80066fc <trans_anim_ready_cb+0x14>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 800672c:	68eb      	ldr	r3, [r5, #12]
 800672e:	00ce      	lsls	r6, r1, #3
 8006730:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006734:	79d8      	ldrb	r0, [r3, #7]
 8006736:	0780      	lsls	r0, r0, #30
 8006738:	d522      	bpl.n	8006780 <trans_anim_ready_cb+0x98>
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	68a0      	ldr	r0, [r4, #8]
 800673e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006742:	4283      	cmp	r3, r0
 8006744:	d11c      	bne.n	8006780 <trans_anim_ready_cb+0x98>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8006746:	4621      	mov	r1, r4
 8006748:	4810      	ldr	r0, [pc, #64]	; (800678c <trans_anim_ready_cb+0xa4>)
 800674a:	f01e f9b8 	bl	8024abe <_lv_ll_remove>
                lv_mem_free(tr);
 800674e:	4620      	mov	r0, r4
 8006750:	f00c f800 	bl	8012754 <lv_mem_free>
                _lv_obj_style_t * obj_style = &obj->styles[i];
 8006754:	68ec      	ldr	r4, [r5, #12]
                lv_style_remove_prop(obj_style->style, prop);
 8006756:	4639      	mov	r1, r7
 8006758:	59a0      	ldr	r0, [r4, r6]
                _lv_obj_style_t * obj_style = &obj->styles[i];
 800675a:	eb04 0806 	add.w	r8, r4, r6
                lv_style_remove_prop(obj_style->style, prop);
 800675e:	f01e fac6 	bl	8024cee <lv_style_remove_prop>
                if(lv_style_is_empty(obj->styles[i].style)) {
 8006762:	68eb      	ldr	r3, [r5, #12]
 8006764:	5998      	ldr	r0, [r3, r6]
 8006766:	f01e fb6a 	bl	8024e3e <lv_style_is_empty>
 800676a:	b160      	cbz	r0, 8006786 <trans_anim_ready_cb+0x9e>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800676c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006770:	4628      	mov	r0, r5
 8006772:	59a1      	ldr	r1, [r4, r6]
 8006774:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
}
 8006778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800677c:	f017 baed 	b.w	801dd5a <lv_obj_remove_style>
        for(i = 0; i < obj->style_cnt; i++) {
 8006780:	3101      	adds	r1, #1
 8006782:	428a      	cmp	r2, r1
 8006784:	d8d2      	bhi.n	800672c <trans_anim_ready_cb+0x44>
}
 8006786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800678a:	bf00      	nop
 800678c:	240013b0 	.word	0x240013b0

08006790 <_lv_obj_style_create_transition>:
{
 8006790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006794:	4698      	mov	r8, r3
 8006796:	b092      	sub	sp, #72	; 0x48
    obj->skip_trans = 1;
 8006798:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
{
 800679c:	4604      	mov	r4, r0
 800679e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80067a0:	460f      	mov	r7, r1
    obj->skip_trans = 1;
 80067a2:	f043 0304 	orr.w	r3, r3, #4
    obj->state = prev_state;
 80067a6:	8402      	strh	r2, [r0, #32]
{
 80067a8:	4615      	mov	r5, r2
    obj->skip_trans = 1;
 80067aa:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80067ae:	8932      	ldrh	r2, [r6, #8]
 80067b0:	f017 f99a 	bl	801dae8 <lv_obj_get_style_prop>
    obj->state = new_state;
 80067b4:	f8a4 8020 	strh.w	r8, [r4, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80067b8:	4682      	mov	sl, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80067ba:	8932      	ldrh	r2, [r6, #8]
 80067bc:	4639      	mov	r1, r7
 80067be:	4620      	mov	r0, r4
 80067c0:	f017 f992 	bl	801dae8 <lv_obj_get_style_prop>
    obj->skip_trans = 0;
 80067c4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 80067c8:	4582      	cmp	sl, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80067ca:	4681      	mov	r9, r0
    obj->skip_trans = 0;
 80067cc:	f36f 0382 	bfc	r3, #2, #1
 80067d0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 80067d4:	d072      	beq.n	80068bc <_lv_obj_style_create_transition+0x12c>
    obj->state = prev_state;
 80067d6:	8425      	strh	r5, [r4, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80067d8:	4639      	mov	r1, r7
 80067da:	8932      	ldrh	r2, [r6, #8]
 80067dc:	4620      	mov	r0, r4
 80067de:	f017 f983 	bl	801dae8 <lv_obj_get_style_prop>
 80067e2:	4605      	mov	r5, r0
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 80067e4:	4639      	mov	r1, r7
 80067e6:	4620      	mov	r0, r4
    obj->state = new_state;
 80067e8:	f8a4 8020 	strh.w	r8, [r4, #32]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 80067ec:	f017 f931 	bl	801da52 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 80067f0:	462a      	mov	r2, r5
 80067f2:	8931      	ldrh	r1, [r6, #8]
 80067f4:	6800      	ldr	r0, [r0, #0]
 80067f6:	f00c f8f3 	bl	80129e0 <lv_style_set_prop>
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 80067fa:	8933      	ldrh	r3, [r6, #8]
 80067fc:	2b0b      	cmp	r3, #11
 80067fe:	d122      	bne.n	8006846 <_lv_obj_style_create_transition+0xb6>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 8006800:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006804:	429d      	cmp	r5, r3
 8006806:	d001      	beq.n	800680c <_lv_obj_style_create_transition+0x7c>
 8006808:	4599      	cmp	r9, r3
 800680a:	d11c      	bne.n	8006846 <_lv_obj_style_create_transition+0xb6>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800680c:	4620      	mov	r0, r4
 800680e:	f016 f845 	bl	801c89c <lv_obj_get_width>
 8006812:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006816:	f340 084f 	sbfx	r8, r0, #1, #16
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800681a:	4620      	mov	r0, r4
 800681c:	f016 f844 	bl	801c8a8 <lv_obj_get_height>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8006820:	f647 72ff 	movw	r2, #32767	; 0x7fff
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 8006824:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8006828:	4295      	cmp	r5, r2
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800682a:	f343 034f 	sbfx	r3, r3, #1, #16
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800682e:	d118      	bne.n	8006862 <_lv_obj_style_create_transition+0xd2>
 8006830:	4598      	cmp	r8, r3
 8006832:	da0e      	bge.n	8006852 <_lv_obj_style_create_transition+0xc2>
 8006834:	f108 0501 	add.w	r5, r8, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8006838:	4591      	cmp	r9, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800683a:	b22d      	sxth	r5, r5
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800683c:	d103      	bne.n	8006846 <_lv_obj_style_create_transition+0xb6>
 800683e:	f108 0801 	add.w	r8, r8, #1
 8006842:	fa0f f988 	sxth.w	r9, r8
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006846:	481f      	ldr	r0, [pc, #124]	; (80068c4 <_lv_obj_style_create_transition+0x134>)
 8006848:	f01e f902 	bl	8024a50 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(tr);
 800684c:	4680      	mov	r8, r0
 800684e:	b968      	cbnz	r0, 800686c <_lv_obj_style_create_transition+0xdc>
 8006850:	e7fe      	b.n	8006850 <_lv_obj_style_create_transition+0xc0>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8006852:	1c5d      	adds	r5, r3, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8006854:	4591      	cmp	r9, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8006856:	b22d      	sxth	r5, r5
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8006858:	d1f5      	bne.n	8006846 <_lv_obj_style_create_transition+0xb6>
 800685a:	3301      	adds	r3, #1
 800685c:	fa0f f983 	sxth.w	r9, r3
 8006860:	e7f1      	b.n	8006846 <_lv_obj_style_create_transition+0xb6>
 8006862:	4591      	cmp	r9, r2
 8006864:	d1ef      	bne.n	8006846 <_lv_obj_style_create_transition+0xb6>
 8006866:	4598      	cmp	r8, r3
 8006868:	daf7      	bge.n	800685a <_lv_obj_style_create_transition+0xca>
 800686a:	e7e8      	b.n	800683e <_lv_obj_style_create_transition+0xae>
    tr->end_value = v2;
 800686c:	e9c0 5903 	strd	r5, r9, [r0, #12]
    tr->obj = obj;
 8006870:	6004      	str	r4, [r0, #0]
    tr->prop = tr_dsc->prop;
 8006872:	8933      	ldrh	r3, [r6, #8]
    tr->selector = part;
 8006874:	6087      	str	r7, [r0, #8]
    tr->prop = tr_dsc->prop;
 8006876:	8083      	strh	r3, [r0, #4]
    lv_anim_init(&a);
 8006878:	a801      	add	r0, sp, #4
 800687a:	f00b fd75 	bl	8012368 <lv_anim_init>
    a->end_value = end;
 800687e:	22ff      	movs	r2, #255	; 0xff
    a->exec_cb = exec_cb;
 8006880:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <_lv_obj_style_create_transition+0x138>)
    lv_anim_start(&a);
 8006882:	a801      	add	r0, sp, #4
    a->end_value = end;
 8006884:	920b      	str	r2, [sp, #44]	; 0x2c
    a->time = duration;
 8006886:	8832      	ldrh	r2, [r6, #0]
    a->exec_cb = exec_cb;
 8006888:	9302      	str	r3, [sp, #8]
    a->time = duration;
 800688a:	920c      	str	r2, [sp, #48]	; 0x30
    a->act_time = -(int32_t)(delay);
 800688c:	8872      	ldrh	r2, [r6, #2]
    a->start_cb = start_cb;
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <_lv_obj_style_create_transition+0x13c>)
    a->act_time = -(int32_t)(delay);
 8006890:	4252      	negs	r2, r2
    a->var = var;
 8006892:	f8cd 8004 	str.w	r8, [sp, #4]
    a->start_cb = start_cb;
 8006896:	9303      	str	r3, [sp, #12]
    a->act_time = -(int32_t)(delay);
 8006898:	920d      	str	r2, [sp, #52]	; 0x34
    a->ready_cb = ready_cb;
 800689a:	4b0d      	ldr	r3, [pc, #52]	; (80068d0 <_lv_obj_style_create_transition+0x140>)
    a->path_cb = path_cb;
 800689c:	68f2      	ldr	r2, [r6, #12]
    a->ready_cb = ready_cb;
 800689e:	9304      	str	r3, [sp, #16]
    a->start_value = start;
 80068a0:	2300      	movs	r3, #0
    a->path_cb = path_cb;
 80068a2:	9208      	str	r2, [sp, #32]
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
 80068a4:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
    a->current_value = start;
 80068a8:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a->early_apply = en;
 80068ac:	f363 0200 	bfi	r2, r3, #0, #1
    a.user_data = tr_dsc->user_data;
 80068b0:	6933      	ldr	r3, [r6, #16]
 80068b2:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
 80068b6:	9307      	str	r3, [sp, #28]
    lv_anim_start(&a);
 80068b8:	f00b fda2 	bl	8012400 <lv_anim_start>
}
 80068bc:	b012      	add	sp, #72	; 0x48
 80068be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c2:	bf00      	nop
 80068c4:	240013b0 	.word	0x240013b0
 80068c8:	0800656d 	.word	0x0800656d
 80068cc:	0801dc2f 	.word	0x0801dc2f
 80068d0:	080066e9 	.word	0x080066e9

080068d4 <lv_obj_get_disp>:

    return (lv_obj_t *)act_par;
}

lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 80068d4:	b510      	push	{r4, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * scr;

    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 80068d6:	6843      	ldr	r3, [r0, #4]
{
 80068d8:	4604      	mov	r4, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 80068da:	b113      	cbz	r3, 80068e2 <lv_obj_get_disp+0xe>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 80068dc:	f017 fc80 	bl	801e1e0 <lv_obj_get_screen>
 80068e0:	4604      	mov	r4, r0

    lv_disp_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 80068e2:	480a      	ldr	r0, [pc, #40]	; (800690c <lv_obj_get_disp+0x38>)
 80068e4:	f01e f926 	bl	8024b34 <_lv_ll_get_head>
 80068e8:	b178      	cbz	r0, 800690a <lv_obj_get_disp+0x36>
        uint32_t i;
        for(i = 0; i < d->screen_cnt; i++) {
 80068ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80068ec:	2300      	movs	r3, #0
 80068ee:	e005      	b.n	80068fc <lv_obj_get_disp+0x28>
            if(d->screens[i] == scr) return d;
 80068f0:	68c1      	ldr	r1, [r0, #12]
 80068f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80068f6:	42a1      	cmp	r1, r4
 80068f8:	d007      	beq.n	800690a <lv_obj_get_disp+0x36>
        for(i = 0; i < d->screen_cnt; i++) {
 80068fa:	3301      	adds	r3, #1
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d1f7      	bne.n	80068f0 <lv_obj_get_disp+0x1c>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 8006900:	4601      	mov	r1, r0
 8006902:	4802      	ldr	r0, [pc, #8]	; (800690c <lv_obj_get_disp+0x38>)
 8006904:	f01e f91c 	bl	8024b40 <_lv_ll_get_next>
 8006908:	e7ee      	b.n	80068e8 <lv_obj_get_disp+0x14>
        }
    }

    LV_LOG_WARN("No screen found");
    return NULL;
}
 800690a:	bd10      	pop	{r4, pc}
 800690c:	240013f8 	.word	0x240013f8

08006910 <refr_obj>:
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
}


void refr_obj(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	460d      	mov	r5, r1
 8006916:	b091      	sub	sp, #68	; 0x44
 8006918:	4680      	mov	r8, r0
    /*Do not refresh hidden objects*/
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800691a:	2101      	movs	r1, #1
 800691c:	4628      	mov	r0, r5
 800691e:	f015 f8a9 	bl	801ba74 <lv_obj_has_flag>
 8006922:	4606      	mov	r6, r0
 8006924:	2800      	cmp	r0, #0
 8006926:	f040 8153 	bne.w	8006bd0 <refr_obj+0x2c0>
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800692a:	4628      	mov	r0, r5
 800692c:	f015 fe15 	bl	801c55a <_lv_obj_get_layer_type>
    if(layer_type == LV_LAYER_TYPE_NONE) {
 8006930:	4607      	mov	r7, r0
 8006932:	b930      	cbnz	r0, 8006942 <refr_obj+0x32>
        lv_obj_redraw(draw_ctx, obj);
 8006934:	4629      	mov	r1, r5
 8006936:	4640      	mov	r0, r8
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
        }

        lv_draw_layer_destroy(draw_ctx, layer_ctx);
    }
}
 8006938:	b011      	add	sp, #68	; 0x44
 800693a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_redraw(draw_ctx, obj);
 800693e:	f017 be41 	b.w	801e5c4 <lv_obj_redraw>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8006942:	2260      	movs	r2, #96	; 0x60
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	f017 f8ce 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800694c:	fa5f fa80 	uxtb.w	sl, r0
        if(opa < LV_OPA_MIN) return;
 8006950:	f1ba 0f01 	cmp.w	sl, #1
 8006954:	f240 813c 	bls.w	8006bd0 <refr_obj+0x2c0>
    lv_obj_get_coords(obj, &obj_coords_ext);
 8006958:	f10d 0910 	add.w	r9, sp, #16
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800695c:	4628      	mov	r0, r5
 800695e:	f015 fdca 	bl	801c4f6 <_lv_obj_get_ext_draw_size>
 8006962:	4604      	mov	r4, r0
    lv_obj_get_coords(obj, &obj_coords_ext);
 8006964:	4649      	mov	r1, r9
 8006966:	4628      	mov	r0, r5
 8006968:	f015 ff48 	bl	801c7fc <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800696c:	4622      	mov	r2, r4
 800696e:	4621      	mov	r1, r4
 8006970:	4648      	mov	r0, r9
 8006972:	f01d fc92 	bl	802429a <lv_area_increase>
    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 8006976:	2f02      	cmp	r7, #2
 8006978:	f040 812d 	bne.w	8006bd6 <refr_obj+0x2c6>
        lv_area_t tranf_coords = obj_coords_ext;
 800697c:	ac08      	add	r4, sp, #32
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 800697e:	f10d 0b18 	add.w	fp, sp, #24
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 8006982:	4632      	mov	r2, r6
 8006984:	4633      	mov	r3, r6
        lv_area_t tranf_coords = obj_coords_ext;
 8006986:	e899 0003 	ldmia.w	r9, {r0, r1}
 800698a:	e884 0003 	stmia.w	r4, {r0, r1}
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 800698e:	4621      	mov	r1, r4
 8006990:	4628      	mov	r0, r5
 8006992:	f016 f876 	bl	801ca82 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 8006996:	4622      	mov	r2, r4
 8006998:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800699c:	4658      	mov	r0, fp
 800699e:	f01d fc9c 	bl	80242da <_lv_area_intersect>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f000 8114 	beq.w	8006bd0 <refr_obj+0x2c0>
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 80069a8:	ac0a      	add	r4, sp, #40	; 0x28
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 80069aa:	4632      	mov	r2, r6
 80069ac:	2301      	movs	r3, #1
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 80069ae:	e89b 0003 	ldmia.w	fp, {r0, r1}
 80069b2:	e884 0003 	stmia.w	r4, {r0, r1}
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 80069b6:	4621      	mov	r1, r4
 80069b8:	4628      	mov	r0, r5
 80069ba:	f016 f862 	bl	801ca82 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 80069be:	464a      	mov	r2, r9
 80069c0:	4621      	mov	r1, r4
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 80069c2:	4620      	mov	r0, r4
 80069c4:	f01d fc89 	bl	80242da <_lv_area_intersect>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	f000 8101 	beq.w	8006bd0 <refr_obj+0x2c0>
        *layer_area_out = clip_coords_for_obj;
 80069ce:	ab02      	add	r3, sp, #8
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 80069d0:	f105 0b14 	add.w	fp, r5, #20
 80069d4:	2200      	movs	r2, #0
        *layer_area_out = clip_coords_for_obj;
 80069d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069da:	e883 0003 	stmia.w	r3, {r0, r1}
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 80069de:	4659      	mov	r1, fp
 80069e0:	a802      	add	r0, sp, #8
 80069e2:	f01d fd79 	bl	80244d8 <_lv_area_is_in>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	f000 80fc 	beq.w	8006be4 <refr_obj+0x2d4>
            info.res = LV_COVER_RES_COVER;
 80069ec:	2300      	movs	r3, #0
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 80069ee:	aa0a      	add	r2, sp, #40	; 0x28
 80069f0:	2112      	movs	r1, #18
 80069f2:	4628      	mov	r0, r5
            info.res = LV_COVER_RES_COVER;
 80069f4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            info.area = &layer_area_full;
 80069f8:	ab02      	add	r3, sp, #8
 80069fa:	930b      	str	r3, [sp, #44]	; 0x2c
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 80069fc:	f7fd fea2 	bl	8004744 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 8006a00:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 8006a04:	f1b9 0900 	subs.w	r9, r9, #0
 8006a08:	bf18      	it	ne
 8006a0a:	f04f 0901 	movne.w	r9, #1
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 8006a0e:	2f01      	cmp	r7, #1
        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 8006a10:	a902      	add	r1, sp, #8
 8006a12:	4640      	mov	r0, r8
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 8006a14:	bf08      	it	eq
 8006a16:	f049 0902 	orreq.w	r9, r9, #2
        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 8006a1a:	464a      	mov	r2, r9
 8006a1c:	f017 ff71 	bl	801e902 <lv_draw_layer_create>
        if(layer_ctx == NULL) {
 8006a20:	4604      	mov	r4, r0
 8006a22:	2800      	cmp	r0, #0
 8006a24:	f000 80d4 	beq.w	8006bd0 <refr_obj+0x2c0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 8006a28:	226e      	movs	r2, #110	; 0x6e
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	f017 f85b 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 8006a32:	226f      	movs	r2, #111	; 0x6f
    return (lv_coord_t)v.num;
 8006a34:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 8006a36:	2100      	movs	r1, #0
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f017 f855 	bl	801dae8 <lv_obj_get_style_prop>
        if(LV_COORD_IS_PCT(pivot.x)) {
 8006a3e:	f406 43c0 	and.w	r3, r6, #24576	; 0x6000
    return (lv_coord_t)v.num;
 8006a42:	b207      	sxth	r7, r0
 8006a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a48:	d114      	bne.n	8006a74 <refr_obj+0x164>
 8006a4a:	f426 43c0 	bic.w	r3, r6, #24576	; 0x6000
 8006a4e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006a52:	dc0f      	bgt.n	8006a74 <refr_obj+0x164>
 8006a54:	8b2e      	ldrh	r6, [r5, #24]
            pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 8006a56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a5a:	8aaa      	ldrh	r2, [r5, #20]
 8006a5c:	f106 0601 	add.w	r6, r6, #1
 8006a60:	bfc8      	it	gt
 8006a62:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8006a66:	1ab6      	subs	r6, r6, r2
 8006a68:	b236      	sxth	r6, r6
 8006a6a:	435e      	muls	r6, r3
 8006a6c:	2364      	movs	r3, #100	; 0x64
 8006a6e:	fb96 f6f3 	sdiv	r6, r6, r3
 8006a72:	b236      	sxth	r6, r6
        if(LV_COORD_IS_PCT(pivot.y)) {
 8006a74:	f407 43c0 	and.w	r3, r7, #24576	; 0x6000
 8006a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7c:	d114      	bne.n	8006aa8 <refr_obj+0x198>
 8006a7e:	f427 43c0 	bic.w	r3, r7, #24576	; 0x6000
 8006a82:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006a86:	dc0f      	bgt.n	8006aa8 <refr_obj+0x198>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006a88:	8b6f      	ldrh	r7, [r5, #26]
            pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 8006a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a8e:	8aea      	ldrh	r2, [r5, #22]
 8006a90:	f107 0701 	add.w	r7, r7, #1
 8006a94:	bfc8      	it	gt
 8006a96:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8006a9a:	1abf      	subs	r7, r7, r2
 8006a9c:	b23f      	sxth	r7, r7
 8006a9e:	435f      	muls	r7, r3
 8006aa0:	2364      	movs	r3, #100	; 0x64
 8006aa2:	fb97 f7f3 	sdiv	r7, r7, r3
 8006aa6:	b23f      	sxth	r7, r7
        lv_draw_img_dsc_init(&draw_dsc);
 8006aa8:	a80a      	add	r0, sp, #40	; 0x28
 8006aaa:	f017 fed7 	bl	801e85c <lv_draw_img_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8006aae:	226d      	movs	r2, #109	; 0x6d
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4628      	mov	r0, r5
        draw_dsc.opa = opa;
 8006ab4:	f88d a033 	strb.w	sl, [sp, #51]	; 0x33
 8006ab8:	f017 f816 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006abc:	b203      	sxth	r3, r0
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 8006abe:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8006ac2:	f340 8092 	ble.w	8006bea <refr_obj+0x2da>
 8006ac6:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 8006aca:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8006acc:	226c      	movs	r2, #108	; 0x6c
 8006ace:	2100      	movs	r1, #0
 8006ad0:	4628      	mov	r0, r5
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 8006ad2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8006ad6:	f017 f807 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8006ada:	2267      	movs	r2, #103	; 0x67
        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 8006adc:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f017 f800 	bl	801dae8 <lv_obj_get_style_prop>
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 8006ae8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 8006aec:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8006af0:	f019 0a02 	ands.w	sl, r9, #2
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 8006af4:	f360 0303 	bfi	r3, r0, #0, #4
 8006af8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 8006afc:	4b48      	ldr	r3, [pc, #288]	; (8006c20 <refr_obj+0x310>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	7c1b      	ldrb	r3, [r3, #16]
 8006b04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006b08:	f363 0200 	bfi	r2, r3, #0, #1
 8006b0c:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8006b10:	d010      	beq.n	8006b34 <refr_obj+0x224>
            layer_ctx->area_act = layer_ctx->area_full;
 8006b12:	f104 0308 	add.w	r3, r4, #8
 8006b16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006b1a:	e883 0003 	stmia.w	r3, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8006b1e:	8a62      	ldrh	r2, [r4, #18]
 8006b20:	8963      	ldrh	r3, [r4, #10]
 8006b22:	4413      	add	r3, r2
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 8006b24:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b21b      	sxth	r3, r3
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	bfa8      	it	ge
 8006b30:	4613      	movge	r3, r2
 8006b32:	81e3      	strh	r3, [r4, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 8006b34:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8006b38:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	dc43      	bgt.n	8006bc8 <refr_obj+0x2b8>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8006b40:	f1ba 0f00 	cmp.w	sl, #0
 8006b44:	d026      	beq.n	8006b94 <refr_obj+0x284>
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8006b46:	f1b9 0f02 	cmp.w	r9, #2
 8006b4a:	d017      	beq.n	8006b7c <refr_obj+0x26c>
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 8006b4c:	f104 0308 	add.w	r3, r4, #8
 8006b50:	2200      	movs	r2, #0
 8006b52:	4659      	mov	r1, fp
 8006b54:	4618      	mov	r0, r3
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	f01d fcbe 	bl	80244d8 <_lv_area_is_in>
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d049      	beq.n	8006bf6 <refr_obj+0x2e6>
            info.res = LV_COVER_RES_COVER;
 8006b62:	2200      	movs	r2, #0
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8006b64:	2112      	movs	r1, #18
 8006b66:	4628      	mov	r0, r5
            info.area = &layer_ctx->area_act;
 8006b68:	9309      	str	r3, [sp, #36]	; 0x24
            info.res = LV_COVER_RES_COVER;
 8006b6a:	f88d 2020 	strb.w	r2, [sp, #32]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8006b6e:	aa08      	add	r2, sp, #32
 8006b70:	f7fd fde8 	bl	8004744 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 8006b74:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d13c      	bne.n	8006bf6 <refr_obj+0x2e6>
        has_alpha = false;
 8006b7c:	2200      	movs	r2, #0
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 8006b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 8006b82:	4640      	mov	r0, r8
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 8006b84:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8006b88:	4299      	cmp	r1, r3
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 8006b8a:	4621      	mov	r1, r4
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 8006b8c:	bfc8      	it	gt
 8006b8e:	81e3      	strhgt	r3, [r4, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 8006b90:	f017 fee7 	bl	801e962 <lv_draw_layer_adjust>
            lv_obj_redraw(draw_ctx, obj);
 8006b94:	4629      	mov	r1, r5
 8006b96:	4640      	mov	r0, r8
 8006b98:	f017 fd14 	bl	801e5c4 <lv_obj_redraw>
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 8006b9c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006ba0:	8aab      	ldrh	r3, [r5, #20]
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 8006ba2:	4640      	mov	r0, r8
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 8006ba4:	8811      	ldrh	r1, [r2, #0]
 8006ba6:	1a5b      	subs	r3, r3, r1
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 8006ba8:	4621      	mov	r1, r4
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 8006baa:	4433      	add	r3, r6
 8006bac:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 8006bb0:	8aeb      	ldrh	r3, [r5, #22]
 8006bb2:	8852      	ldrh	r2, [r2, #2]
 8006bb4:	1a9b      	subs	r3, r3, r2
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 8006bb6:	aa0a      	add	r2, sp, #40	; 0x28
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 8006bb8:	443b      	add	r3, r7
 8006bba:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 8006bbe:	f017 fed4 	bl	801e96a <lv_draw_layer_blend>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 8006bc2:	f1ba 0f00 	cmp.w	sl, #0
 8006bc6:	d11d      	bne.n	8006c04 <refr_obj+0x2f4>
        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4640      	mov	r0, r8
 8006bcc:	f017 fed1 	bl	801e972 <lv_draw_layer_destroy>
}
 8006bd0:	b011      	add	sp, #68	; 0x44
 8006bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 8006bd6:	2f01      	cmp	r7, #1
 8006bd8:	d1fa      	bne.n	8006bd0 <refr_obj+0x2c0>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 8006bda:	ac0a      	add	r4, sp, #40	; 0x28
 8006bdc:	464a      	mov	r2, r9
 8006bde:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8006be2:	e6ee      	b.n	80069c2 <refr_obj+0xb2>
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 8006be4:	f04f 0901 	mov.w	r9, #1
 8006be8:	e711      	b.n	8006a0e <refr_obj+0xfe>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f6bf af6e 	bge.w	8006acc <refr_obj+0x1bc>
 8006bf0:	f500 6061 	add.w	r0, r0, #3600	; 0xe10
 8006bf4:	e769      	b.n	8006aca <refr_obj+0x1ba>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 8006bf6:	8a22      	ldrh	r2, [r4, #16]
 8006bf8:	8963      	ldrh	r3, [r4, #10]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	81e3      	strh	r3, [r4, #14]
 8006c02:	e7bc      	b.n	8006b7e <refr_obj+0x26e>
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 8006c04:	89e3      	ldrh	r3, [r4, #14]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8006c06:	8a62      	ldrh	r2, [r4, #18]
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 8006c08:	3301      	adds	r3, #1
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8006c0a:	3a01      	subs	r2, #1
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 8006c0c:	b29b      	uxth	r3, r3
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8006c0e:	441a      	add	r2, r3
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 8006c10:	8163      	strh	r3, [r4, #10]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 8006c12:	b21b      	sxth	r3, r3
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8006c14:	81e2      	strh	r2, [r4, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 8006c16:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	da93      	bge.n	8006b46 <refr_obj+0x236>
 8006c1e:	e7d3      	b.n	8006bc8 <refr_obj+0x2b8>
 8006c20:	24001160 	.word	0x24001160

08006c24 <refr_obj_and_children>:
{
 8006c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c28:	4606      	mov	r6, r0
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 8006c2a:	460d      	mov	r5, r1
 8006c2c:	b929      	cbnz	r1, 8006c3a <refr_obj_and_children+0x16>
 8006c2e:	4b1f      	ldr	r3, [pc, #124]	; (8006cac <refr_obj_and_children+0x88>)
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	f014 fac1 	bl	801b1b8 <lv_disp_get_scr_act>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 8006c36:	4605      	mov	r5, r0
 8006c38:	b140      	cbz	r0, 8006c4c <refr_obj_and_children+0x28>
    refr_obj(draw_ctx, top_obj);
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	f7ff fe67 	bl	8006910 <refr_obj>
    parent = lv_obj_get_parent(top_obj);
 8006c42:	4628      	mov	r0, r5
 8006c44:	f017 fad4 	bl	801e1f0 <lv_obj_get_parent>
        parent = lv_obj_get_parent(parent);
 8006c48:	4604      	mov	r4, r0
    while(parent != NULL) {
 8006c4a:	b908      	cbnz	r0, 8006c50 <refr_obj_and_children+0x2c>
}
 8006c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; i < child_cnt; i++) {
 8006c50:	2700      	movs	r7, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 8006c52:	4620      	mov	r0, r4
 8006c54:	f017 fade 	bl	801e214 <lv_obj_get_child_cnt>
 8006c58:	4680      	mov	r8, r0
        bool go = false;
 8006c5a:	46b9      	mov	r9, r7
        for(i = 0; i < child_cnt; i++) {
 8006c5c:	4547      	cmp	r7, r8
 8006c5e:	d113      	bne.n	8006c88 <refr_obj_and_children+0x64>
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 8006c60:	4632      	mov	r2, r6
 8006c62:	2117      	movs	r1, #23
 8006c64:	4620      	mov	r0, r4
        parent = lv_obj_get_parent(parent);
 8006c66:	4625      	mov	r5, r4
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 8006c68:	f7fd fd6c 	bl	8004744 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 8006c6c:	4632      	mov	r2, r6
 8006c6e:	2118      	movs	r1, #24
 8006c70:	4620      	mov	r0, r4
 8006c72:	f7fd fd67 	bl	8004744 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 8006c76:	4632      	mov	r2, r6
 8006c78:	2119      	movs	r1, #25
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f7fd fd62 	bl	8004744 <lv_event_send>
        parent = lv_obj_get_parent(parent);
 8006c80:	4620      	mov	r0, r4
 8006c82:	f017 fab5 	bl	801e1f0 <lv_obj_get_parent>
 8006c86:	e7df      	b.n	8006c48 <refr_obj_and_children+0x24>
            lv_obj_t * child = parent->spec_attr->children[i];
 8006c88:	68a3      	ldr	r3, [r4, #8]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
            if(!go) {
 8006c90:	f1b9 0f00 	cmp.w	r9, #0
 8006c94:	d106      	bne.n	8006ca4 <refr_obj_and_children+0x80>
                if(child == border_p) go = true;
 8006c96:	1a6b      	subs	r3, r5, r1
 8006c98:	f1d3 0900 	rsbs	r9, r3, #0
 8006c9c:	eb49 0903 	adc.w	r9, r9, r3
        for(i = 0; i < child_cnt; i++) {
 8006ca0:	3701      	adds	r7, #1
 8006ca2:	e7db      	b.n	8006c5c <refr_obj_and_children+0x38>
                refr_obj(draw_ctx, child);
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	f7ff fe33 	bl	8006910 <refr_obj>
 8006caa:	e7f9      	b.n	8006ca0 <refr_obj_and_children+0x7c>
 8006cac:	24001160 	.word	0x24001160

08006cb0 <refr_area_part>:
{
 8006cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006cb4:	4c81      	ldr	r4, [pc, #516]	; (8006ebc <refr_area_part+0x20c>)
{
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	b0a9      	sub	sp, #164	; 0xa4
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006cba:	6820      	ldr	r0, [r4, #0]
 8006cbc:	f01d fa42 	bl	8024144 <lv_disp_get_draw_buf>
    if(draw_ctx->init_buf)
 8006cc0:	68eb      	ldr	r3, [r5, #12]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006cc2:	4606      	mov	r6, r0
    if(draw_ctx->init_buf)
 8006cc4:	b10b      	cbz	r3, 8006cca <refr_area_part+0x1a>
        draw_ctx->init_buf(draw_ctx);
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	4798      	blx	r3
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 8006cca:	6833      	ldr	r3, [r6, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d13b      	bne.n	8006d48 <refr_area_part+0x98>
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 8006cd0:	686e      	ldr	r6, [r5, #4]
 8006cd2:	6820      	ldr	r0, [r4, #0]
 8006cd4:	f014 fa70 	bl	801b1b8 <lv_disp_get_scr_act>
 8006cd8:	4601      	mov	r1, r0
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f017 fc38 	bl	801e550 <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
 8006ce0:	6823      	ldr	r3, [r4, #0]
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 8006ce2:	4607      	mov	r7, r0
    if(disp_refr->prev_scr) {
 8006ce4:	695e      	ldr	r6, [r3, #20]
 8006ce6:	2e00      	cmp	r6, #0
 8006ce8:	d144      	bne.n	8006d74 <refr_area_part+0xc4>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8006cea:	2800      	cmp	r0, #0
 8006cec:	f040 8089 	bne.w	8006e02 <refr_area_part+0x152>
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8006cf0:	6820      	ldr	r0, [r4, #0]
 8006cf2:	f00b fa05 	bl	8012100 <lv_disp_get_hor_res>
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	6820      	ldr	r0, [r4, #0]
 8006cfa:	f00b fa11 	bl	8012120 <lv_disp_get_ver_res>
 8006cfe:	3801      	subs	r0, #1
        lv_area_set(&a, 0, 0,
 8006d00:	2200      	movs	r2, #0
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8006d02:	1e73      	subs	r3, r6, #1
        lv_area_set(&a, 0, 0,
 8006d04:	b200      	sxth	r0, r0
 8006d06:	b21b      	sxth	r3, r3
 8006d08:	4611      	mov	r1, r2
 8006d0a:	9000      	str	r0, [sp, #0]
 8006d0c:	a818      	add	r0, sp, #96	; 0x60
 8006d0e:	f01d faa5 	bl	802425c <lv_area_set>
        if(draw_ctx->draw_bg) {
 8006d12:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d144      	bne.n	8006da2 <refr_area_part+0xf2>
        else if(disp_refr->bg_img) {
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d05f      	beq.n	8006de0 <refr_area_part+0x130>
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 8006d20:	a917      	add	r1, sp, #92	; 0x5c
 8006d22:	f002 f941 	bl	8008fa8 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 8006d26:	2801      	cmp	r0, #1
 8006d28:	d14f      	bne.n	8006dca <refr_area_part+0x11a>
                lv_draw_img_dsc_init(&dsc);
 8006d2a:	a81a      	add	r0, sp, #104	; 0x68
 8006d2c:	f017 fd96 	bl	801e85c <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 8006d30:	6823      	ldr	r3, [r4, #0]
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 8006d32:	a91a      	add	r1, sp, #104	; 0x68
 8006d34:	4628      	mov	r0, r5
                dsc.opa = disp_refr->bg_opa;
 8006d36:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006d3a:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 8006d3e:	aa18      	add	r2, sp, #96	; 0x60
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d42:	f000 fecf 	bl	8007ae4 <lv_draw_img>
                LV_LOG_WARN("Can't draw the background image");
 8006d46:	e040      	b.n	8006dca <refr_area_part+0x11a>
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 8006d48:	6823      	ldr	r3, [r4, #0]
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 8006d4a:	6870      	ldr	r0, [r6, #4]
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68f2      	ldr	r2, [r6, #12]
 8006d50:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006d54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 8006d58:	b110      	cbz	r0, 8006d60 <refr_area_part+0xb0>
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 8006d5a:	434b      	muls	r3, r1
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d1b7      	bne.n	8006cd0 <refr_area_part+0x20>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8006d60:	6822      	ldr	r2, [r4, #0]
        while(draw_buf->flushing) {
 8006d62:	6933      	ldr	r3, [r6, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0b3      	beq.n	8006cd0 <refr_area_part+0x20>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8006d68:	6810      	ldr	r0, [r2, #0]
 8006d6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0f8      	beq.n	8006d62 <refr_area_part+0xb2>
 8006d70:	4798      	blx	r3
 8006d72:	e7f5      	b.n	8006d60 <refr_area_part+0xb0>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 8006d74:	4631      	mov	r1, r6
 8006d76:	6868      	ldr	r0, [r5, #4]
 8006d78:	f017 fbea 	bl	801e550 <lv_refr_get_top_obj>
 8006d7c:	4606      	mov	r6, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8006d7e:	2f00      	cmp	r7, #0
 8006d80:	d13f      	bne.n	8006e02 <refr_area_part+0x152>
 8006d82:	2800      	cmp	r0, #0
 8006d84:	d0b4      	beq.n	8006cf0 <refr_area_part+0x40>
    if(disp_refr->draw_prev_over_act) {
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006d8c:	07d1      	lsls	r1, r2, #31
 8006d8e:	d445      	bmi.n	8006e1c <refr_area_part+0x16c>
        if(disp_refr->prev_scr) {
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	b313      	cbz	r3, 8006dda <refr_area_part+0x12a>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 8006d94:	4631      	mov	r1, r6
 8006d96:	4628      	mov	r0, r5
 8006d98:	f7ff ff44 	bl	8006c24 <refr_obj_and_children>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 8006d9c:	b1ef      	cbz	r7, 8006dda <refr_area_part+0x12a>
        refr_obj_and_children(draw_ctx, top_act_scr);
 8006d9e:	4639      	mov	r1, r7
 8006da0:	e047      	b.n	8006e32 <refr_area_part+0x182>
            lv_draw_rect_dsc_init(&dsc);
 8006da2:	a81a      	add	r0, sp, #104	; 0x68
 8006da4:	f001 fdfe 	bl	80089a4 <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 8006da8:	6823      	ldr	r3, [r4, #0]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 8006daa:	a91a      	add	r1, sp, #104	; 0x68
 8006dac:	4628      	mov	r0, r5
            dsc.bg_img_src = disp_refr->bg_img;
 8006dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db0:	921e      	str	r2, [sp, #120]	; 0x78
            dsc.bg_img_opa = disp_refr->bg_opa;
 8006db2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006db6:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
            dsc.bg_color = disp_refr->bg_color;
 8006dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
            dsc.bg_opa = disp_refr->bg_opa;
 8006dbc:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 8006dc0:	aa18      	add	r2, sp, #96	; 0x60
            dsc.bg_color = disp_refr->bg_color;
 8006dc2:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 8006dc6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006dc8:	4798      	blx	r3
    if(disp_refr->draw_prev_over_act) {
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006dd0:	07d0      	lsls	r0, r2, #31
 8006dd2:	d422      	bmi.n	8006e1a <refr_area_part+0x16a>
        if(disp_refr->prev_scr) {
 8006dd4:	695e      	ldr	r6, [r3, #20]
 8006dd6:	2e00      	cmp	r6, #0
 8006dd8:	d1dc      	bne.n	8006d94 <refr_area_part+0xe4>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	691f      	ldr	r7, [r3, #16]
 8006dde:	e7de      	b.n	8006d9e <refr_area_part+0xee>
            lv_draw_rect_dsc_init(&dsc);
 8006de0:	a81a      	add	r0, sp, #104	; 0x68
 8006de2:	f001 fddf 	bl	80089a4 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 8006de6:	6823      	ldr	r3, [r4, #0]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 8006de8:	a91a      	add	r1, sp, #104	; 0x68
 8006dea:	4628      	mov	r0, r5
            dsc.bg_color = disp_refr->bg_color;
 8006dec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006dee:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            dsc.bg_opa = disp_refr->bg_opa;
 8006df2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 8006df6:	686a      	ldr	r2, [r5, #4]
            dsc.bg_opa = disp_refr->bg_opa;
 8006df8:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 8006dfc:	f018 fb07 	bl	801f40e <lv_draw_rect>
 8006e00:	e7e3      	b.n	8006dca <refr_area_part+0x11a>
    if(disp_refr->draw_prev_over_act) {
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006e08:	07d2      	lsls	r2, r2, #31
 8006e0a:	d408      	bmi.n	8006e1e <refr_area_part+0x16e>
        if(disp_refr->prev_scr) {
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0c4      	beq.n	8006d9c <refr_area_part+0xec>
 8006e12:	2e00      	cmp	r6, #0
 8006e14:	bf08      	it	eq
 8006e16:	461e      	moveq	r6, r3
 8006e18:	e7bc      	b.n	8006d94 <refr_area_part+0xe4>
    if(disp_refr->draw_prev_over_act) {
 8006e1a:	2600      	movs	r6, #0
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 8006e1c:	691f      	ldr	r7, [r3, #16]
        refr_obj_and_children(draw_ctx, top_act_scr);
 8006e1e:	4639      	mov	r1, r7
 8006e20:	4628      	mov	r0, r5
 8006e22:	f7ff feff 	bl	8006c24 <refr_obj_and_children>
        if(disp_refr->prev_scr) {
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	6959      	ldr	r1, [r3, #20]
 8006e2a:	b129      	cbz	r1, 8006e38 <refr_area_part+0x188>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 8006e2c:	2e00      	cmp	r6, #0
 8006e2e:	bf18      	it	ne
 8006e30:	4631      	movne	r1, r6
        refr_obj_and_children(draw_ctx, top_act_scr);
 8006e32:	4628      	mov	r0, r5
 8006e34:	f7ff fef6 	bl	8006c24 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 8006e38:	6820      	ldr	r0, [r4, #0]
 8006e3a:	f014 f9cb 	bl	801b1d4 <lv_disp_get_layer_top>
 8006e3e:	4601      	mov	r1, r0
 8006e40:	4628      	mov	r0, r5
 8006e42:	f7ff feef 	bl	8006c24 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 8006e46:	6820      	ldr	r0, [r4, #0]
 8006e48:	f014 f9cb 	bl	801b1e2 <lv_disp_get_layer_sys>
 8006e4c:	4601      	mov	r1, r0
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f7ff fee8 	bl	8006c24 <refr_obj_and_children>
    draw_buf_flush(disp_refr);
 8006e54:	6823      	ldr	r3, [r4, #0]
/**
 * Flush the content of the draw buffer
 */
static void draw_buf_flush(lv_disp_t * disp)
{
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006e56:	4618      	mov	r0, r3
    draw_buf_flush(disp_refr);
 8006e58:	9307      	str	r3, [sp, #28]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006e5a:	f01d f973 	bl	8024144 <lv_disp_get_draw_buf>

    /*Flush the rendered content to the display*/
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 8006e5e:	9b07      	ldr	r3, [sp, #28]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006e60:	4680      	mov	r8, r0
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 8006e66:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006e68:	b10b      	cbz	r3, 8006e6e <refr_area_part+0x1be>
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	4798      	blx	r3

    /* In partial double buffered mode wait until the other buffer is freed
     * and driver is ready to receive the new buffer */
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 8006e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e72:	b953      	cbnz	r3, 8006e8a <refr_area_part+0x1da>
        while(draw_buf->flushing) {
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
        }
    }

    draw_buf->flushing = 1;
 8006e74:	2301      	movs	r3, #1

    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8006e76:	6820      	ldr	r0, [r4, #0]
    draw_buf->flushing = 1;
 8006e78:	f8c8 3010 	str.w	r3, [r8, #16]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8006e7c:	6802      	ldr	r2, [r0, #0]
 8006e7e:	68d2      	ldr	r2, [r2, #12]
 8006e80:	6991      	ldr	r1, [r2, #24]
 8006e82:	07ce      	lsls	r6, r1, #31
 8006e84:	d41c      	bmi.n	8006ec0 <refr_area_part+0x210>
    else draw_buf->flushing_last = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	e01d      	b.n	8006ec6 <refr_area_part+0x216>
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 8006e8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0f0      	beq.n	8006e74 <refr_area_part+0x1c4>
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	8813      	ldrh	r3, [r2, #0]
 8006e98:	8852      	ldrh	r2, [r2, #2]
 8006e9a:	fb13 f302 	smulbb	r3, r3, r2
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 8006e9e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d0e6      	beq.n	8006e74 <refr_area_part+0x1c4>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8006ea6:	6822      	ldr	r2, [r4, #0]
        while(draw_buf->flushing) {
 8006ea8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d0e1      	beq.n	8006e74 <refr_area_part+0x1c4>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8006eb0:	6810      	ldr	r0, [r2, #0]
 8006eb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0f7      	beq.n	8006ea8 <refr_area_part+0x1f8>
 8006eb8:	4798      	blx	r3
 8006eba:	e7f4      	b.n	8006ea6 <refr_area_part+0x1f6>
 8006ebc:	24001160 	.word	0x24001160
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8006ec0:	6992      	ldr	r2, [r2, #24]
 8006ec2:	0794      	lsls	r4, r2, #30
 8006ec4:	d5df      	bpl.n	8006e86 <refr_area_part+0x1d6>
    else draw_buf->flushing_last = 0;
 8006ec6:	f8c8 3014 	str.w	r3, [r8, #20]

    bool flushing_last = draw_buf->flushing_last;
 8006eca:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006ece:	930e      	str	r3, [sp, #56]	; 0x38

    if(disp->driver->flush_cb) {
 8006ed0:	9b07      	ldr	r3, [sp, #28]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	695a      	ldr	r2, [r3, #20]
 8006ed6:	2a00      	cmp	r2, #0
 8006ed8:	f000 80a1 	beq.w	800701e <refr_area_part+0x36e>
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 8006edc:	7c1a      	ldrb	r2, [r3, #16]
 8006ede:	f012 0f30 	tst.w	r2, #48	; 0x30
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 8006ee2:	e9d5 5400 	ldrd	r5, r4, [r5]
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 8006ee6:	f000 81bc 	beq.w	8007262 <refr_area_part+0x5b2>
 8006eea:	0751      	lsls	r1, r2, #29
 8006eec:	f140 81b9 	bpl.w	8007262 <refr_area_part+0x5b2>
    lv_disp_drv_t * drv = disp_refr->driver;
 8006ef0:	6806      	ldr	r6, [r0, #0]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 8006ef2:	7c33      	ldrb	r3, [r6, #16]
 8006ef4:	f003 0206 	and.w	r2, r3, #6
 8006ef8:	2a06      	cmp	r2, #6
 8006efa:	f000 8090 	beq.w	800701e <refr_area_part+0x36e>
    if(drv->rotated == LV_DISP_ROT_180) {
 8006efe:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8006f02:	2a20      	cmp	r2, #32
 8006f04:	d13a      	bne.n	8006f7c <refr_area_part+0x2cc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006f06:	88a2      	ldrh	r2, [r4, #4]
 8006f08:	1ea8      	subs	r0, r5, #2
 8006f0a:	8823      	ldrh	r3, [r4, #0]
 8006f0c:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006f0e:	8861      	ldrh	r1, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006f10:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006f12:	88e3      	ldrh	r3, [r4, #6]
 8006f14:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006f16:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006f18:	1a5b      	subs	r3, r3, r1
    uint32_t i = total - 1, j = 0;
 8006f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8006f1e:	b21b      	sxth	r3, r3
 8006f20:	fb02 1103 	mla	r1, r2, r3, r1
    uint32_t total = area_w * area_h;
 8006f24:	4353      	muls	r3, r2
    uint32_t i = total - 1, j = 0;
 8006f26:	460a      	mov	r2, r1
 8006f28:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    while(i > j) {
 8006f2c:	1a8f      	subs	r7, r1, r2
 8006f2e:	42ba      	cmp	r2, r7
 8006f30:	d81b      	bhi.n	8006f6a <refr_area_part+0x2ba>
    area->y2 = drv->ver_res - area->y1 - 1;
 8006f32:	8873      	ldrh	r3, [r6, #2]
        call_flush_cb(drv, area, color_p);
 8006f34:	4630      	mov	r0, r6
    area->y2 = drv->ver_res - area->y1 - 1;
 8006f36:	8861      	ldrh	r1, [r4, #2]
 8006f38:	3b01      	subs	r3, #1
    tmp_coord = area->y2;
 8006f3a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    area->y2 = drv->ver_res - area->y1 - 1;
 8006f3e:	1a5b      	subs	r3, r3, r1
    area->x2 = drv->hor_res - area->x1 - 1;
 8006f40:	8821      	ldrh	r1, [r4, #0]
    area->y2 = drv->ver_res - area->y1 - 1;
 8006f42:	80e3      	strh	r3, [r4, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 8006f44:	8873      	ldrh	r3, [r6, #2]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	1a9b      	subs	r3, r3, r2
    tmp_coord = area->x2;
 8006f4a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    area->y1 = drv->ver_res - tmp_coord - 1;
 8006f4e:	8063      	strh	r3, [r4, #2]
    area->x2 = drv->hor_res - area->x1 - 1;
 8006f50:	8833      	ldrh	r3, [r6, #0]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	1a5b      	subs	r3, r3, r1
        call_flush_cb(drv, area, color_p);
 8006f56:	4621      	mov	r1, r4
    area->x2 = drv->hor_res - area->x1 - 1;
 8006f58:	80a3      	strh	r3, [r4, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 8006f5a:	8833      	ldrh	r3, [r6, #0]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	1a9b      	subs	r3, r3, r2
        call_flush_cb(drv, area, color_p);
 8006f60:	462a      	mov	r2, r5
    area->x1 = drv->hor_res - tmp_coord - 1;
 8006f62:	8023      	strh	r3, [r4, #0]
        }
        else {
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 8006f64:	f017 fadc 	bl	801e520 <call_flush_cb>
 8006f68:	e059      	b.n	800701e <refr_area_part+0x36e>
        tmp = color_p[i];
 8006f6a:	f833 7d02 	ldrh.w	r7, [r3, #-2]!
        i--;
 8006f6e:	3a01      	subs	r2, #1
        color_p[i] = color_p[j];
 8006f70:	f830 cf02 	ldrh.w	ip, [r0, #2]!
 8006f74:	f8a3 c000 	strh.w	ip, [r3]
        color_p[j] = tmp;
 8006f78:	8007      	strh	r7, [r0, #0]
        j++;
 8006f7a:	e7d7      	b.n	8006f2c <refr_area_part+0x27c>
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 8006f7c:	06da      	lsls	r2, r3, #27
 8006f7e:	d54e      	bpl.n	800701e <refr_area_part+0x36e>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006f80:	f01d f8e0 	bl	8024144 <lv_disp_get_draw_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006f84:	8823      	ldrh	r3, [r4, #0]
 8006f86:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8006f8a:	9308      	str	r3, [sp, #32]
 8006f8c:	1c53      	adds	r3, r2, #1
 8006f8e:	9003      	str	r0, [sp, #12]
 8006f90:	9808      	ldr	r0, [sp, #32]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f9b4 1000 	ldrsh.w	r1, [r4]
 8006f98:	1a1f      	subs	r7, r3, r0
 8006f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9c:	b2bb      	uxth	r3, r7
 8006f9e:	b23f      	sxth	r7, r7
 8006fa0:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006fa2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8006fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fa8:	8863      	ldrh	r3, [r4, #2]
 8006faa:	9304      	str	r3, [sp, #16]
 8006fac:	88e3      	ldrh	r3, [r4, #6]
 8006fae:	9804      	ldr	r0, [sp, #16]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	1a1b      	subs	r3, r3, r0
 8006fb4:	b21b      	sxth	r3, r3
 8006fb6:	9305      	str	r3, [sp, #20]
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 8006fb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006fbc:	9805      	ldr	r0, [sp, #20]
 8006fbe:	fbb3 f3f7 	udiv	r3, r3, r7
 8006fc2:	4283      	cmp	r3, r0
 8006fc4:	bfa8      	it	ge
 8006fc6:	4603      	movge	r3, r0
 8006fc8:	9310      	str	r3, [sp, #64]	; 0x40
        if(drv->rotated == LV_DISP_ROT_90) {
 8006fca:	7c33      	ldrb	r3, [r6, #16]
 8006fcc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fd0:	2b10      	cmp	r3, #16
 8006fd2:	d13b      	bne.n	800704c <refr_area_part+0x39c>
            area->y2 = drv->ver_res - area->x1 - 1;
 8006fd4:	8873      	ldrh	r3, [r6, #2]
 8006fd6:	9908      	ldr	r1, [sp, #32]
 8006fd8:	1e5a      	subs	r2, r3, #1
 8006fda:	1a52      	subs	r2, r2, r1
 8006fdc:	80e2      	strh	r2, [r4, #6]
            area->y1 = area->y2 - area_w + 1;
 8006fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fe0:	1a9b      	subs	r3, r3, r2
 8006fe2:	8063      	strh	r3, [r4, #2]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8006fe4:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 8006fe8:	f04f 0a00 	mov.w	sl, #0
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8006fec:	105b      	asrs	r3, r3, #1
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 8006fee:	46d3      	mov	fp, sl
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8006ff0:	9314      	str	r3, [sp, #80]	; 0x50
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 8006ff2:	1c7b      	adds	r3, r7, #1
 8006ff4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006ff8:	105b      	asrs	r3, r3, #1
 8006ffa:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ffc:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	9315      	str	r3, [sp, #84]	; 0x54
 8007004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007006:	3b01      	subs	r3, #1
 8007008:	b29b      	uxth	r3, r3
 800700a:	930d      	str	r3, [sp, #52]	; 0x34
        while(row < area_h) {
 800700c:	9b05      	ldr	r3, [sp, #20]
 800700e:	4553      	cmp	r3, sl
 8007010:	dc1f      	bgt.n	8007052 <refr_area_part+0x3a2>
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 8007012:	f1bb 0f00 	cmp.w	fp, #0
 8007016:	d002      	beq.n	800701e <refr_area_part+0x36e>
 8007018:	4658      	mov	r0, fp
 800701a:	f00b fc17 	bl	801284c <lv_mem_buf_release>
        }
    }

    /*If there are 2 buffers swap them. With direct mode swap only on the last area*/
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 800701e:	f8d8 2000 	ldr.w	r2, [r8]
 8007022:	b182      	cbz	r2, 8007046 <refr_area_part+0x396>
 8007024:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007028:	b16b      	cbz	r3, 8007046 <refr_area_part+0x396>
 800702a:	9907      	ldr	r1, [sp, #28]
 800702c:	6809      	ldr	r1, [r1, #0]
 800702e:	7c09      	ldrb	r1, [r1, #16]
 8007030:	07c9      	lsls	r1, r1, #31
 8007032:	d501      	bpl.n	8007038 <refr_area_part+0x388>
 8007034:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007036:	b131      	cbz	r1, 8007046 <refr_area_part+0x396>
        if(draw_buf->buf_act == draw_buf->buf1)
 8007038:	f8d8 1008 	ldr.w	r1, [r8, #8]
            draw_buf->buf_act = draw_buf->buf2;
 800703c:	428a      	cmp	r2, r1
 800703e:	bf18      	it	ne
 8007040:	4613      	movne	r3, r2
 8007042:	f8c8 3008 	str.w	r3, [r8, #8]
}
 8007046:	b029      	add	sp, #164	; 0xa4
 8007048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            area->y1 = area->x1;
 800704c:	8061      	strh	r1, [r4, #2]
            area->y2 = area->y1 + area_w - 1;
 800704e:	80e2      	strh	r2, [r4, #6]
 8007050:	e7c8      	b.n	8006fe4 <refr_area_part+0x334>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 8007052:	9b05      	ldr	r3, [sp, #20]
 8007054:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007056:	eba3 030a 	sub.w	r3, r3, sl
 800705a:	4293      	cmp	r3, r2
 800705c:	bfa8      	it	ge
 800705e:	4613      	movge	r3, r2
            draw_buf->flushing = 1;
 8007060:	9a03      	ldr	r2, [sp, #12]
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 8007062:	9306      	str	r3, [sp, #24]
            draw_buf->flushing = 1;
 8007064:	2301      	movs	r3, #1
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 8007066:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
            draw_buf->flushing = 1;
 800706a:	6113      	str	r3, [r2, #16]
            if((row == 0) && (area_h >= area_w)) {
 800706c:	f1ba 0f00 	cmp.w	sl, #0
 8007070:	f040 809f 	bne.w	80071b2 <refr_area_part+0x502>
 8007074:	9b05      	ldr	r3, [sp, #20]
 8007076:	429f      	cmp	r7, r3
 8007078:	f300 809b 	bgt.w	80071b2 <refr_area_part+0x502>
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 800707c:	7c33      	ldrb	r3, [r6, #16]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800707e:	46d1      	mov	r9, sl
 8007080:	f8cd a018 	str.w	sl, [sp, #24]
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8007084:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007088:	9311      	str	r3, [sp, #68]	; 0x44
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800708a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800708e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007090:	429a      	cmp	r2, r3
 8007092:	dd4f      	ble.n	8007134 <refr_area_part+0x484>
            lv_coord_t inv_i = (w - 1) - i;
 8007094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                    &color_p[inv_i * w + inv_j],
 8007096:	f04f 0c00 	mov.w	ip, #0
            lv_coord_t inv_i = (w - 1) - i;
 800709a:	9a06      	ldr	r2, [sp, #24]
 800709c:	eba3 0e02 	sub.w	lr, r3, r2
 80070a0:	fa0f f38e 	sxth.w	r3, lr
 80070a4:	930b      	str	r3, [sp, #44]	; 0x2c
                    &color_p[inv_i * w + inv_j],
 80070a6:	437b      	muls	r3, r7
 80070a8:	9312      	str	r3, [sp, #72]	; 0x48
 80070aa:	e026      	b.n	80070fa <refr_area_part+0x44a>
            lv_coord_t inv_j = (w - 1) - j;
 80070ac:	990d      	ldr	r1, [sp, #52]	; 0x34
                    &color_p[i * w + j],
 80070ae:	eb02 0e09 	add.w	lr, r2, r9
                    &color_p[j * w + inv_i]
 80070b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
            lv_coord_t inv_j = (w - 1) - j;
 80070b4:	1acb      	subs	r3, r1, r3
                    &color_p[j * w + inv_i]
 80070b6:	fb07 0202 	mla	r2, r7, r2, r0
                    &color_p[inv_i * w + inv_j],
 80070ba:	9812      	ldr	r0, [sp, #72]	; 0x48
            lv_coord_t inv_j = (w - 1) - j;
 80070bc:	b219      	sxth	r1, r3
                    &color_p[inv_i * w + inv_j],
 80070be:	fa00 f383 	sxtah	r3, r0, r3
                    &color_p[inv_j * w + i],
 80070c2:	9806      	ldr	r0, [sp, #24]
 80070c4:	fb07 0101 	mla	r1, r7, r1, r0
            if(is_270) {
 80070c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80070ca:	2830      	cmp	r0, #48	; 0x30
 80070cc:	f835 001e 	ldrh.w	r0, [r5, lr, lsl #1]
 80070d0:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 80070d4:	d11d      	bne.n	8007112 <refr_area_part+0x462>
    *a = *b;
 80070d6:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
 80070da:	f825 001e 	strh.w	r0, [r5, lr, lsl #1]
    *b = *c;
 80070de:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
 80070e2:	f825 e011 	strh.w	lr, [r5, r1, lsl #1]
    *c = *d;
 80070e6:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
 80070ea:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
    *d = tmp;
 80070ee:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80070f2:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 80070f6:	f10c 0c01 	add.w	ip, ip, #1
 80070fa:	fa0f f28c 	sxth.w	r2, ip
 80070fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007100:	fa1f f38c 	uxth.w	r3, ip
 8007104:	428a      	cmp	r2, r1
 8007106:	dbd1      	blt.n	80070ac <refr_area_part+0x3fc>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8007108:	9b06      	ldr	r3, [sp, #24]
 800710a:	44b9      	add	r9, r7
 800710c:	3301      	adds	r3, #1
 800710e:	9306      	str	r3, [sp, #24]
 8007110:	e7bb      	b.n	800708a <refr_area_part+0x3da>
    *a = *b;
 8007112:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 8007116:	f825 001e 	strh.w	r0, [r5, lr, lsl #1]
    *b = *c;
 800711a:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
 800711e:	f825 e012 	strh.w	lr, [r5, r2, lsl #1]
    *c = *d;
 8007122:	f835 2011 	ldrh.w	r2, [r5, r1, lsl #1]
 8007126:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
    *d = tmp;
 800712a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800712e:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
}
 8007132:	e7e0      	b.n	80070f6 <refr_area_part+0x446>
                if(drv->rotated == LV_DISP_ROT_90) {
 8007134:	7c33      	ldrb	r3, [r6, #16]
 8007136:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800713a:	2b10      	cmp	r3, #16
 800713c:	d12c      	bne.n	8007198 <refr_area_part+0x4e8>
                    area->x1 = init_y_off;
 800713e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                    area->x2 = init_y_off + area_w - 1;
 8007140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                    area->x1 = init_y_off;
 8007142:	8023      	strh	r3, [r4, #0]
                    area->x2 = init_y_off + area_w - 1;
 8007144:	9b04      	ldr	r3, [sp, #16]
 8007146:	3b01      	subs	r3, #1
 8007148:	4413      	add	r3, r2
 800714a:	80a3      	strh	r3, [r4, #4]
    for(lv_coord_t y = 0; y < area_h; y++) {
 800714c:	46b9      	mov	r9, r7
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 800714e:	eb09 030a 	add.w	r3, r9, sl
 8007152:	9a05      	ldr	r2, [sp, #20]
 8007154:	429a      	cmp	r2, r3
 8007156:	dc7c      	bgt.n	8007252 <refr_area_part+0x5a2>
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	07db      	lsls	r3, r3, #31
 800715e:	d578      	bpl.n	8007252 <refr_area_part+0x5a2>
 8007160:	9b03      	ldr	r3, [sp, #12]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	0798      	lsls	r0, r3, #30
 8007166:	d574      	bpl.n	8007252 <refr_area_part+0x5a2>
                draw_buf->flushing_last = 1;
 8007168:	2301      	movs	r3, #1
                draw_buf->flushing_last = 0;
 800716a:	9a03      	ldr	r2, [sp, #12]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 800716c:	4621      	mov	r1, r4
 800716e:	4630      	mov	r0, r6
                draw_buf->flushing_last = 0;
 8007170:	6153      	str	r3, [r2, #20]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 8007172:	f1bb 0f00 	cmp.w	fp, #0
 8007176:	bf14      	ite	ne
 8007178:	465a      	movne	r2, fp
 800717a:	462a      	moveq	r2, r5
 800717c:	f017 f9d0 	bl	801e520 <call_flush_cb>
            while(draw_buf->flushing) {
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d166      	bne.n	8007256 <refr_area_part+0x5a6>
            color_p += area_w * height;
 8007188:	fb09 f307 	mul.w	r3, r9, r7
            row += height;
 800718c:	44d1      	add	r9, sl
            color_p += area_w * height;
 800718e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            row += height;
 8007192:	fa0f fa89 	sxth.w	sl, r9
 8007196:	e739      	b.n	800700c <refr_area_part+0x35c>
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8007198:	8833      	ldrh	r3, [r6, #0]
 800719a:	9a04      	ldr	r2, [sp, #16]
 800719c:	3b01      	subs	r3, #1
 800719e:	1a9b      	subs	r3, r3, r2
                    area->x1 = area->x2 - area_w + 1;
 80071a0:	9a08      	ldr	r2, [sp, #32]
                    area->x2 = drv->hor_res - 1 - init_y_off;
 80071a2:	b29b      	uxth	r3, r3
                    area->x1 = area->x2 - area_w + 1;
 80071a4:	3201      	adds	r2, #1
                    area->x2 = drv->hor_res - 1 - init_y_off;
 80071a6:	80a3      	strh	r3, [r4, #4]
                    area->x1 = area->x2 - area_w + 1;
 80071a8:	4413      	add	r3, r2
 80071aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	8023      	strh	r3, [r4, #0]
 80071b0:	e7cc      	b.n	800714c <refr_area_part+0x49c>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 80071b2:	f1bb 0f00 	cmp.w	fp, #0
 80071b6:	d104      	bne.n	80071c2 <refr_area_part+0x512>
 80071b8:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80071bc:	f00b fafc 	bl	80127b8 <lv_mem_buf_get>
 80071c0:	4683      	mov	fp, r0
    uint32_t invert = (area_w * area_h) - 1;
 80071c2:	fb07 f309 	mul.w	r3, r7, r9
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 80071c6:	7c30      	ldrb	r0, [r6, #16]
    for(lv_coord_t y = 0; y < area_h; y++) {
 80071c8:	46ae      	mov	lr, r5
 80071ca:	2100      	movs	r1, #0
    uint32_t initial_i = ((area_w - 1) * area_h);
 80071cc:	eba3 0209 	sub.w	r2, r3, r9
            i = invert - i;
 80071d0:	3b01      	subs	r3, #1
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 80071d2:	f000 0030 	and.w	r0, r0, #48	; 0x30
            i = invert - i;
 80071d6:	1a9b      	subs	r3, r3, r2
    uint32_t initial_i = ((area_w - 1) * area_h);
 80071d8:	920b      	str	r2, [sp, #44]	; 0x2c
            i = invert - i;
 80071da:	930c      	str	r3, [sp, #48]	; 0x30
    for(lv_coord_t y = 0; y < area_h; y++) {
 80071dc:	b20a      	sxth	r2, r1
 80071de:	4591      	cmp	r9, r2
 80071e0:	dc10      	bgt.n	8007204 <refr_area_part+0x554>
                if(drv->rotated == LV_DISP_ROT_90) {
 80071e2:	7c33      	ldrb	r3, [r6, #16]
                    area->x1 = init_y_off + row;
 80071e4:	fa1f f18a 	uxth.w	r1, sl
                    area->x2 = init_y_off + row + height - 1;
 80071e8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
                if(drv->rotated == LV_DISP_ROT_90) {
 80071ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071f0:	2b10      	cmp	r3, #16
 80071f2:	d123      	bne.n	800723c <refr_area_part+0x58c>
                    area->x1 = init_y_off + row;
 80071f4:	9b04      	ldr	r3, [sp, #16]
 80071f6:	4419      	add	r1, r3
 80071f8:	b289      	uxth	r1, r1
 80071fa:	8021      	strh	r1, [r4, #0]
                    area->x2 = init_y_off + row + height - 1;
 80071fc:	3901      	subs	r1, #1
 80071fe:	4411      	add	r1, r2
 8007200:	80a1      	strh	r1, [r4, #4]
 8007202:	e7a4      	b.n	800714e <refr_area_part+0x49e>
        if(invert_i)
 8007204:	2830      	cmp	r0, #48	; 0x30
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8007206:	f04f 0c00 	mov.w	ip, #0
        uint32_t i = initial_i + y;
 800720a:	bf15      	itete	ne
 800720c:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
            i = invert - i;
 800720e:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
        uint32_t i = initial_i + y;
 8007210:	188a      	addne	r2, r1, r2
            i = invert - i;
 8007212:	1a5a      	subeq	r2, r3, r1
        for(lv_coord_t x = 0; x < area_w; x++) {
 8007214:	fa0f f38c 	sxth.w	r3, ip
 8007218:	429f      	cmp	r7, r3
 800721a:	dc03      	bgt.n	8007224 <refr_area_part+0x574>
 800721c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800721e:	3101      	adds	r1, #1
 8007220:	449e      	add	lr, r3
    for(lv_coord_t y = 0; y < area_h; y++) {
 8007222:	e7db      	b.n	80071dc <refr_area_part+0x52c>
            rot_buf[i] = *(orig_color_p++);
 8007224:	f83e 301c 	ldrh.w	r3, [lr, ip, lsl #1]
            if(invert_i)
 8007228:	2830      	cmp	r0, #48	; 0x30
 800722a:	f10c 0c01 	add.w	ip, ip, #1
            rot_buf[i] = *(orig_color_p++);
 800722e:	f82b 3012 	strh.w	r3, [fp, r2, lsl #1]
                i += area_h;
 8007232:	bf0c      	ite	eq
 8007234:	444a      	addeq	r2, r9
                i -= area_h;
 8007236:	eba2 0209 	subne.w	r2, r2, r9
        for(lv_coord_t x = 0; x < area_w; x++) {
 800723a:	e7eb      	b.n	8007214 <refr_area_part+0x564>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800723c:	8833      	ldrh	r3, [r6, #0]
 800723e:	9804      	ldr	r0, [sp, #16]
 8007240:	3b01      	subs	r3, #1
 8007242:	1a1b      	subs	r3, r3, r0
 8007244:	1a5b      	subs	r3, r3, r1
 8007246:	b29b      	uxth	r3, r3
 8007248:	80a3      	strh	r3, [r4, #4]
                    area->x1 = area->x2 - height + 1;
 800724a:	3301      	adds	r3, #1
 800724c:	1a9b      	subs	r3, r3, r2
 800724e:	8023      	strh	r3, [r4, #0]
 8007250:	e77d      	b.n	800714e <refr_area_part+0x49e>
                draw_buf->flushing_last = 0;
 8007252:	2300      	movs	r3, #0
 8007254:	e789      	b.n	800716a <refr_area_part+0x4ba>
                if(drv->wait_cb) drv->wait_cb(drv);
 8007256:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8007258:	2b00      	cmp	r3, #0
 800725a:	d091      	beq.n	8007180 <refr_area_part+0x4d0>
 800725c:	4630      	mov	r0, r6
 800725e:	4798      	blx	r3
 8007260:	e78e      	b.n	8007180 <refr_area_part+0x4d0>
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 8007262:	462a      	mov	r2, r5
 8007264:	4621      	mov	r1, r4
 8007266:	4618      	mov	r0, r3
 8007268:	e67c      	b.n	8006f64 <refr_area_part+0x2b4>
 800726a:	bf00      	nop

0800726c <_lv_refr_get_disp_refreshing>:
}
 800726c:	4b01      	ldr	r3, [pc, #4]	; (8007274 <_lv_refr_get_disp_refreshing+0x8>)
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	24001160 	.word	0x24001160

08007278 <_lv_disp_refr_timer>:
{
 8007278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727c:	b08d      	sub	sp, #52	; 0x34
 800727e:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
 8007280:	f01c ff63 	bl	802414a <lv_tick_get>
    volatile uint32_t elaps = 0;
 8007284:	2300      	movs	r3, #0
 8007286:	4c99      	ldr	r4, [pc, #612]	; (80074ec <_lv_disp_refr_timer+0x274>)
    uint32_t start = lv_tick_get();
 8007288:	9004      	str	r0, [sp, #16]
    volatile uint32_t elaps = 0;
 800728a:	9309      	str	r3, [sp, #36]	; 0x24
    if(tmr) {
 800728c:	b1fd      	cbz	r5, 80072ce <_lv_disp_refr_timer+0x56>
        disp_refr = tmr->user_data;
 800728e:	68eb      	ldr	r3, [r5, #12]
        lv_timer_pause(tmr);
 8007290:	4628      	mov	r0, r5
        disp_refr = tmr->user_data;
 8007292:	6023      	str	r3, [r4, #0]
        lv_timer_pause(tmr);
 8007294:	f01d ff37 	bl	8025106 <lv_timer_pause>
    lv_obj_update_layout(disp_refr->act_scr);
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	6918      	ldr	r0, [r3, #16]
 800729c:	f7fe fa94 	bl	80057c8 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	6958      	ldr	r0, [r3, #20]
 80072a4:	b108      	cbz	r0, 80072aa <_lv_disp_refr_timer+0x32>
 80072a6:	f7fe fa8f 	bl	80057c8 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->top_layer);
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	69d8      	ldr	r0, [r3, #28]
 80072ae:	f7fe fa8b 	bl	80057c8 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	6a18      	ldr	r0, [r3, #32]
 80072b6:	f7fe fa87 	bl	80057c8 <lv_obj_update_layout>
    if(disp_refr->act_scr == NULL) {
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	691a      	ldr	r2, [r3, #16]
 80072be:	2a00      	cmp	r2, #0
 80072c0:	f040 80b3 	bne.w	800742a <_lv_disp_refr_timer+0x1b2>
        disp_refr->inv_p = 0;
 80072c4:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
 80072c8:	b00d      	add	sp, #52	; 0x34
 80072ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disp_refr = lv_disp_get_default();
 80072ce:	f00a ff11 	bl	80120f4 <lv_disp_get_default>
 80072d2:	6020      	str	r0, [r4, #0]
 80072d4:	e7e0      	b.n	8007298 <_lv_disp_refr_timer+0x20>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 80072d6:	4433      	add	r3, r6
 80072d8:	f893 5130 	ldrb.w	r5, [r3, #304]	; 0x130
 80072dc:	2d00      	cmp	r5, #0
 80072de:	d067      	beq.n	80073b0 <_lv_disp_refr_timer+0x138>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80072e0:	3601      	adds	r6, #1
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 80072e8:	4296      	cmp	r6, r2
 80072ea:	d3f4      	bcc.n	80072d6 <_lv_disp_refr_timer+0x5e>
    px_num = 0;
 80072ec:	4980      	ldr	r1, [pc, #512]	; (80074f0 <_lv_disp_refr_timer+0x278>)
 80072ee:	2000      	movs	r0, #0
 80072f0:	6008      	str	r0, [r1, #0]
    if(disp_refr->inv_p == 0) return;
 80072f2:	2a00      	cmp	r2, #0
 80072f4:	d032      	beq.n	800735c <_lv_disp_refr_timer+0xe4>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 80072f6:	f102 38ff 	add.w	r8, r2, #4294967295
        if(disp_refr->inv_area_joined[i] == 0) {
 80072fa:	f503 7298 	add.w	r2, r3, #304	; 0x130
 80072fe:	f812 1008 	ldrb.w	r1, [r2, r8]
 8007302:	b121      	cbz	r1, 800730e <_lv_disp_refr_timer+0x96>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8007304:	f1b8 0801 	subs.w	r8, r8, #1
 8007308:	d2f9      	bcs.n	80072fe <_lv_disp_refr_timer+0x86>
    int32_t last_i = 0;
 800730a:	f04f 0800 	mov.w	r8, #0
    if(disp_refr->driver->render_start_cb) {
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007312:	b103      	cbz	r3, 8007316 <_lv_disp_refr_timer+0x9e>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 8007314:	4798      	blx	r3
    disp_refr->driver->draw_buf->last_area = 0;
 8007316:	6823      	ldr	r3, [r4, #0]
        draw_ctx->buf_area = &sub_area;
 8007318:	f10d 0928 	add.w	r9, sp, #40	; 0x28
    disp_refr->driver->draw_buf->last_area = 0;
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68d1      	ldr	r1, [r2, #12]
 8007320:	7e0a      	ldrb	r2, [r1, #24]
 8007322:	f36f 0200 	bfc	r2, #0, #1
 8007326:	760a      	strb	r2, [r1, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68d1      	ldr	r1, [r2, #12]
 800732c:	7e0a      	ldrb	r2, [r1, #24]
 800732e:	f36f 0241 	bfc	r2, #1, #1
 8007332:	760a      	strb	r2, [r1, #24]
    disp_refr->rendering_in_progress = true;
 8007334:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8007338:	f042 0204 	orr.w	r2, r2, #4
 800733c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007340:	2300      	movs	r3, #0
 8007342:	9302      	str	r3, [sp, #8]
 8007344:	6825      	ldr	r5, [r4, #0]
 8007346:	9a02      	ldr	r2, [sp, #8]
 8007348:	f8b5 3150 	ldrh.w	r3, [r5, #336]	; 0x150
 800734c:	429a      	cmp	r2, r3
 800734e:	db70      	blt.n	8007432 <_lv_disp_refr_timer+0x1ba>
    disp_refr->rendering_in_progress = false;
 8007350:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8007354:	f36f 0382 	bfc	r3, #2, #1
 8007358:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    if(disp_refr->inv_p != 0) {
 800735c:	6820      	ldr	r0, [r4, #0]
 800735e:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 8007362:	b1e3      	cbz	r3, 800739e <_lv_disp_refr_timer+0x126>
 8007364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007368:	2100      	movs	r1, #0
 800736a:	3030      	adds	r0, #48	; 0x30
 800736c:	f013 fa0c 	bl	801a788 <memset>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 8007370:	6820      	ldr	r0, [r4, #0]
 8007372:	2220      	movs	r2, #32
 8007374:	2100      	movs	r1, #0
 8007376:	f500 7098 	add.w	r0, r0, #304	; 0x130
 800737a:	f013 fa05 	bl	801a788 <memset>
        disp_refr->inv_p = 0;
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	2200      	movs	r2, #0
        elaps = lv_tick_elaps(start);
 8007382:	9804      	ldr	r0, [sp, #16]
        disp_refr->inv_p = 0;
 8007384:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        elaps = lv_tick_elaps(start);
 8007388:	f01c fee7 	bl	802415a <lv_tick_elaps>
        if(disp_refr->driver->monitor_cb) {
 800738c:	6823      	ldr	r3, [r4, #0]
        elaps = lv_tick_elaps(start);
 800738e:	9009      	str	r0, [sp, #36]	; 0x24
        if(disp_refr->driver->monitor_cb) {
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007394:	b11b      	cbz	r3, 800739e <_lv_disp_refr_timer+0x126>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 8007396:	4a56      	ldr	r2, [pc, #344]	; (80074f0 <_lv_disp_refr_timer+0x278>)
 8007398:	9909      	ldr	r1, [sp, #36]	; 0x24
 800739a:	6812      	ldr	r2, [r2, #0]
 800739c:	4798      	blx	r3
    lv_mem_buf_free_all();
 800739e:	f00b fa69 	bl	8012874 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 80073a2:	f01c feb4 	bl	802410e <_lv_font_clean_up_fmt_txt>
}
 80073a6:	b00d      	add	sp, #52	; 0x34
 80073a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _lv_draw_mask_cleanup();
 80073ac:	f000 bfd8 	b.w	8008360 <_lv_draw_mask_cleanup>
 80073b0:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 80073b4:	f10a 0830 	add.w	r8, sl, #48	; 0x30
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80073b8:	6820      	ldr	r0, [r4, #0]
 80073ba:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 80073be:	429d      	cmp	r5, r3
 80073c0:	d28e      	bcs.n	80072e0 <_lv_disp_refr_timer+0x68>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 80073c2:	1943      	adds	r3, r0, r5
 80073c4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80073c8:	bb6b      	cbnz	r3, 8007426 <_lv_disp_refr_timer+0x1ae>
 80073ca:	42ae      	cmp	r6, r5
 80073cc:	d02b      	beq.n	8007426 <_lv_disp_refr_timer+0x1ae>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 80073ce:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 80073d2:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80073d6:	eb00 010b 	add.w	r1, r0, fp
 80073da:	4440      	add	r0, r8
 80073dc:	f01d f85f 	bl	802449e <_lv_area_is_on>
 80073e0:	b308      	cbz	r0, 8007426 <_lv_disp_refr_timer+0x1ae>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 80073e2:	6821      	ldr	r1, [r4, #0]
 80073e4:	a80a      	add	r0, sp, #40	; 0x28
 80073e6:	eb01 020b 	add.w	r2, r1, fp
 80073ea:	4441      	add	r1, r8
 80073ec:	f01c ffa0 	bl	8024330 <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80073f0:	a80a      	add	r0, sp, #40	; 0x28
 80073f2:	f01c ff44 	bl	802427e <lv_area_get_size>
 80073f6:	9002      	str	r0, [sp, #8]
 80073f8:	6820      	ldr	r0, [r4, #0]
 80073fa:	4440      	add	r0, r8
 80073fc:	f01c ff3f 	bl	802427e <lv_area_get_size>
 8007400:	4607      	mov	r7, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8007402:	6820      	ldr	r0, [r4, #0]
 8007404:	4458      	add	r0, fp
 8007406:	f01c ff3a 	bl	802427e <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800740a:	9b02      	ldr	r3, [sp, #8]
 800740c:	4407      	add	r7, r0
 800740e:	42bb      	cmp	r3, r7
 8007410:	d209      	bcs.n	8007426 <_lv_disp_refr_timer+0x1ae>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8007412:	6823      	ldr	r3, [r4, #0]
    dest->x1 = src->x1;
 8007414:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007416:	eb03 020a 	add.w	r2, r3, sl
                disp_refr->inv_area_joined[join_from] = 1;
 800741a:	442b      	add	r3, r5
 800741c:	6311      	str	r1, [r2, #48]	; 0x30
    dest->x2 = src->x2;
 800741e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007420:	6351      	str	r1, [r2, #52]	; 0x34
 8007422:	f883 9130 	strb.w	r9, [r3, #304]	; 0x130
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007426:	3501      	adds	r5, #1
 8007428:	e7c6      	b.n	80073b8 <_lv_disp_refr_timer+0x140>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800742a:	2600      	movs	r6, #0
                disp_refr->inv_area_joined[join_from] = 1;
 800742c:	f04f 0901 	mov.w	r9, #1
 8007430:	e757      	b.n	80072e2 <_lv_disp_refr_timer+0x6a>
        if(disp_refr->inv_area_joined[i] == 0) {
 8007432:	9b02      	ldr	r3, [sp, #8]
 8007434:	18eb      	adds	r3, r5, r3
 8007436:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800743a:	2b00      	cmp	r3, #0
 800743c:	d148      	bne.n	80074d0 <_lv_disp_refr_timer+0x258>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800743e:	9b02      	ldr	r3, [sp, #8]
 8007440:	4543      	cmp	r3, r8
 8007442:	d105      	bne.n	8007450 <_lv_disp_refr_timer+0x1d8>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	7e13      	ldrb	r3, [r2, #24]
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	7613      	strb	r3, [r2, #24]
            disp_refr->driver->draw_buf->last_part = 0;
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	7e13      	ldrb	r3, [r2, #24]
 8007456:	f36f 0341 	bfc	r3, #1, #1
 800745a:	7613      	strb	r3, [r2, #24]
            refr_area(&disp_refr->inv_areas[i]);
 800745c:	9b02      	ldr	r3, [sp, #8]
 800745e:	00df      	lsls	r7, r3, #3
 8007460:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007464:	9303      	str	r3, [sp, #12]
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 8007466:	682b      	ldr	r3, [r5, #0]
 8007468:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	6033      	str	r3, [r6, #0]
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	7c1b      	ldrb	r3, [r3, #16]
 8007474:	079b      	lsls	r3, r3, #30
 8007476:	d03d      	beq.n	80074f4 <_lv_disp_refr_timer+0x27c>
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8007478:	4628      	mov	r0, r5
 800747a:	f00a fe41 	bl	8012100 <lv_disp_get_hor_res>
 800747e:	4607      	mov	r7, r0
 8007480:	6820      	ldr	r0, [r4, #0]
 8007482:	f00a fe4d 	bl	8012120 <lv_disp_get_ver_res>
 8007486:	3801      	subs	r0, #1
 8007488:	2200      	movs	r2, #0
 800748a:	1e7b      	subs	r3, r7, #1
 800748c:	b200      	sxth	r0, r0
 800748e:	b21b      	sxth	r3, r3
 8007490:	4611      	mov	r1, r2
 8007492:	9000      	str	r0, [sp, #0]
 8007494:	4648      	mov	r0, r9
 8007496:	f01c fee1 	bl	802425c <lv_area_set>
        if(disp_refr->driver->full_refresh) {
 800749a:	6823      	ldr	r3, [r4, #0]
        draw_ctx->buf_area = &disp_area;
 800749c:	f8c6 9004 	str.w	r9, [r6, #4]
        if(disp_refr->driver->full_refresh) {
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	7c1a      	ldrb	r2, [r3, #16]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f012 0f02 	tst.w	r2, #2
 80074aa:	d015      	beq.n	80074d8 <_lv_disp_refr_timer+0x260>
            disp_refr->driver->draw_buf->last_part = 1;
 80074ac:	7e1a      	ldrb	r2, [r3, #24]
 80074ae:	f042 0202 	orr.w	r2, r2, #2
 80074b2:	761a      	strb	r2, [r3, #24]
            draw_ctx->clip_area = &disp_area;
 80074b4:	f8c6 9008 	str.w	r9, [r6, #8]
        refr_area_part(draw_ctx);
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7ff fbf9 	bl	8006cb0 <refr_area_part>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 80074be:	9b03      	ldr	r3, [sp, #12]
 80074c0:	6820      	ldr	r0, [r4, #0]
 80074c2:	4418      	add	r0, r3
 80074c4:	f01c fedb 	bl	802427e <lv_area_get_size>
 80074c8:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <_lv_disp_refr_timer+0x278>)
 80074ca:	6813      	ldr	r3, [r2, #0]
 80074cc:	4403      	add	r3, r0
 80074ce:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80074d0:	9b02      	ldr	r3, [sp, #8]
 80074d2:	3301      	adds	r3, #1
 80074d4:	9302      	str	r3, [sp, #8]
 80074d6:	e735      	b.n	8007344 <_lv_disp_refr_timer+0xcc>
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 80074d8:	6999      	ldr	r1, [r3, #24]
 80074da:	7e1a      	ldrb	r2, [r3, #24]
 80074dc:	f361 0241 	bfi	r2, r1, #1, #1
 80074e0:	761a      	strb	r2, [r3, #24]
            refr_area(&disp_refr->inv_areas[i]);
 80074e2:	9b03      	ldr	r3, [sp, #12]
 80074e4:	441d      	add	r5, r3
            draw_ctx->clip_area = area_p;
 80074e6:	60b5      	str	r5, [r6, #8]
            refr_area_part(draw_ctx);
 80074e8:	e7e6      	b.n	80074b8 <_lv_disp_refr_timer+0x240>
 80074ea:	bf00      	nop
 80074ec:	24001160 	.word	0x24001160
 80074f0:	24001164 	.word	0x24001164
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80074f4:	442f      	add	r7, r5
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 80074f6:	4628      	mov	r0, r5
 80074f8:	f8b7 a034 	ldrh.w	sl, [r7, #52]	; 0x34
 80074fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80074fe:	f10a 0a01 	add.w	sl, sl, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007502:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007504:	ebaa 0a03 	sub.w	sl, sl, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007508:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800750c:	f103 0b01 	add.w	fp, r3, #1
 8007510:	9305      	str	r3, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007512:	fa0f fa8a 	sxth.w	sl, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007516:	ebab 0b02 	sub.w	fp, fp, r2
 800751a:	f00a fe01 	bl	8012120 <lv_disp_get_ver_res>
 800751e:	9b05      	ldr	r3, [sp, #20]
 8007520:	fa0f fb8b 	sxth.w	fp, fp
 8007524:	4283      	cmp	r3, r0
 8007526:	db57      	blt.n	80075d8 <_lv_disp_refr_timer+0x360>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8007528:	6820      	ldr	r0, [r4, #0]
 800752a:	f00a fdf9 	bl	8012120 <lv_disp_get_ver_res>
 800752e:	1e43      	subs	r3, r0, #1
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 8007530:	b21b      	sxth	r3, r3
    int32_t max_row = get_max_row(disp_refr, w, h);
 8007532:	6822      	ldr	r2, [r4, #0]
 8007534:	6812      	ldr	r2, [r2, #0]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 8007536:	68d1      	ldr	r1, [r2, #12]
    if(disp_refr->driver->rounder_cb) {
 8007538:	6992      	ldr	r2, [r2, #24]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 800753a:	68cd      	ldr	r5, [r1, #12]
 800753c:	fbb5 f5fa 	udiv	r5, r5, sl
 8007540:	455d      	cmp	r5, fp
 8007542:	bfa8      	it	ge
 8007544:	465d      	movge	r5, fp
    if(disp_refr->driver->rounder_cb) {
 8007546:	b302      	cbz	r2, 800758a <_lv_disp_refr_timer+0x312>
        tmp.x1 = 0;
 8007548:	2200      	movs	r2, #0
        lv_coord_t h_tmp = max_row;
 800754a:	fa0f fa85 	sxth.w	sl, r5
        tmp.x1 = 0;
 800754e:	920a      	str	r2, [sp, #40]	; 0x28
        tmp.x2 = 0;
 8007550:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        lv_coord_t h_tmp = max_row;
 8007554:	46d3      	mov	fp, sl
            tmp.y2 = h_tmp - 1;
 8007556:	f10a 3aff 	add.w	sl, sl, #4294967295
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	4649      	mov	r1, r9
            tmp.y2 = h_tmp - 1;
 800755e:	fa0f fa8a 	sxth.w	sl, sl
 8007562:	9305      	str	r3, [sp, #20]
 8007564:	f8ad a02e 	strh.w	sl, [sp, #46]	; 0x2e
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 8007568:	6810      	ldr	r0, [r2, #0]
 800756a:	6982      	ldr	r2, [r0, #24]
 800756c:	4790      	blx	r2
 800756e:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
 8007572:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8007576:	3101      	adds	r1, #1
            if(lv_area_get_height(&tmp) <= max_row) break;
 8007578:	9b05      	ldr	r3, [sp, #20]
 800757a:	1a8a      	subs	r2, r1, r2
 800757c:	b212      	sxth	r2, r2
 800757e:	4295      	cmp	r5, r2
 8007580:	da2d      	bge.n	80075de <_lv_disp_refr_timer+0x366>
        } while(h_tmp > 0);
 8007582:	f1ba 0f00 	cmp.w	sl, #0
 8007586:	dce5      	bgt.n	8007554 <_lv_disp_refr_timer+0x2dc>
            return 0;
 8007588:	2500      	movs	r5, #0
        sub_area.y2 = row + max_row - 1;
 800758a:	b2aa      	uxth	r2, r5
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800758c:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	; 0x32
    lv_coord_t row_last = 0;
 8007590:	f04f 0a00 	mov.w	sl, #0
        sub_area.y2 = row + max_row - 1;
 8007594:	1e51      	subs	r1, r2, #1
 8007596:	9105      	str	r1, [sp, #20]
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007598:	eb00 0e05 	add.w	lr, r0, r5
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800759c:	6821      	ldr	r1, [r4, #0]
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800759e:	f10e 3eff 	add.w	lr, lr, #4294967295
 80075a2:	459e      	cmp	lr, r3
 80075a4:	dd20      	ble.n	80075e8 <_lv_disp_refr_timer+0x370>
    if(y2 != row_last) {
 80075a6:	4553      	cmp	r3, sl
 80075a8:	d089      	beq.n	80074be <_lv_disp_refr_timer+0x246>
        sub_area.x1 = area_p->x1;
 80075aa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80075ac:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
        sub_area.x2 = area_p->x2;
 80075b0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
        sub_area.y1 = row;
 80075b2:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        sub_area.x2 = area_p->x2;
 80075b6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        sub_area.y2 = y2;
 80075ba:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        draw_ctx->clip_area = &sub_area;
 80075be:	e9c6 9901 	strd	r9, r9, [r6, #4]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 80075c2:	680b      	ldr	r3, [r1, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	6033      	str	r3, [r6, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 80075ca:	680b      	ldr	r3, [r1, #0]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	7e13      	ldrb	r3, [r2, #24]
 80075d0:	f043 0302 	orr.w	r3, r3, #2
 80075d4:	7613      	strb	r3, [r2, #24]
 80075d6:	e76f      	b.n	80074b8 <_lv_disp_refr_timer+0x240>
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 80075d8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80075dc:	e7a9      	b.n	8007532 <_lv_disp_refr_timer+0x2ba>
        if(h_tmp <= 0) {
 80075de:	f1bb 0f00 	cmp.w	fp, #0
 80075e2:	ddd1      	ble.n	8007588 <_lv_disp_refr_timer+0x310>
            max_row = tmp.y2 + 1;
 80075e4:	460d      	mov	r5, r1
    return max_row;
 80075e6:	e7d0      	b.n	800758a <_lv_disp_refr_timer+0x312>
        sub_area.x1 = area_p->x1;
 80075e8:	f8b7 e030 	ldrh.w	lr, [r7, #48]	; 0x30
 80075ec:	fa1f fb80 	uxth.w	fp, r0
        sub_area.y2 = row + max_row - 1;
 80075f0:	f8dd c014 	ldr.w	ip, [sp, #20]
        sub_area.x1 = area_p->x1;
 80075f4:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
        sub_area.x2 = area_p->x2;
 80075f8:	f8b7 e034 	ldrh.w	lr, [r7, #52]	; 0x34
        sub_area.y1 = row;
 80075fc:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        sub_area.y2 = row + max_row - 1;
 8007600:	fa1c f080 	uxtah	r0, ip, r0
        sub_area.x2 = area_p->x2;
 8007604:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
        sub_area.y2 = row + max_row - 1;
 8007608:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
        draw_ctx->clip_area = &sub_area;
 800760c:	e9c6 9901 	strd	r9, r9, [r6, #4]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8007610:	6808      	ldr	r0, [r1, #0]
 8007612:	68c0      	ldr	r0, [r0, #12]
 8007614:	6880      	ldr	r0, [r0, #8]
 8007616:	6030      	str	r0, [r6, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 8007618:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
 800761c:	4298      	cmp	r0, r3
 800761e:	4682      	mov	sl, r0
 8007620:	bfa8      	it	ge
 8007622:	469a      	movge	sl, r3
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 8007624:	4298      	cmp	r0, r3
 8007626:	f8ad a02e 	strh.w	sl, [sp, #46]	; 0x2e
 800762a:	db05      	blt.n	8007638 <_lv_disp_refr_timer+0x3c0>
 800762c:	6808      	ldr	r0, [r1, #0]
 800762e:	68c1      	ldr	r1, [r0, #12]
 8007630:	7e08      	ldrb	r0, [r1, #24]
 8007632:	f040 0002 	orr.w	r0, r0, #2
 8007636:	7608      	strb	r0, [r1, #24]
        refr_area_part(draw_ctx);
 8007638:	4630      	mov	r0, r6
 800763a:	e9cd 3206 	strd	r3, r2, [sp, #24]
 800763e:	f7ff fb37 	bl	8006cb0 <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007642:	9a07      	ldr	r2, [sp, #28]
 8007644:	9b06      	ldr	r3, [sp, #24]
 8007646:	4493      	add	fp, r2
 8007648:	fa0f f08b 	sxth.w	r0, fp
 800764c:	e7a4      	b.n	8007598 <_lv_disp_refr_timer+0x320>
 800764e:	bf00      	nop

08007650 <lv_theme_apply>:
 * Apply the active theme on an object
 * @param obj pointer to an object
 * @param name the name of the theme element to apply. E.g. `LV_THEME_BTN`
 */
void lv_theme_apply(lv_obj_t * obj)
{
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4605      	mov	r5, r0
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 8007654:	f017 f8a6 	bl	801e7a4 <lv_theme_get_from_obj>
    if(th == NULL) return;
 8007658:	4604      	mov	r4, r0
 800765a:	b150      	cbz	r0, 8007672 <lv_theme_apply+0x22>
 800765c:	4628      	mov	r0, r5
 800765e:	2100      	movs	r1, #0
 8007660:	4a04      	ldr	r2, [pc, #16]	; (8007674 <lv_theme_apply+0x24>)
 8007662:	f016 fb7a 	bl	801dd5a <lv_obj_remove_style>

    lv_obj_remove_style_all(obj);

    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 8007666:	4629      	mov	r1, r5
 8007668:	4620      	mov	r0, r4
}
 800766a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 800766e:	f017 b88a 	b.w	801e786 <apply_theme>
}
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	000fffff 	.word	0x000fffff

08007678 <lv_draw_arc_get_area>:
    //    backend->draw_arc(center_x, center_y, radius, start_angle, end_angle, clip_area, dsc);
}

void lv_draw_arc_get_area(lv_coord_t x, lv_coord_t y, uint16_t radius,  uint16_t start_angle, uint16_t end_angle,
                          lv_coord_t w, bool rounded, lv_area_t * area)
{
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	461e      	mov	r6, r3
 800767e:	b085      	sub	sp, #20
 8007680:	4604      	mov	r4, r0
 8007682:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8007686:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 800768a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800768c:	e9cd 1200 	strd	r1, r2, [sp]
    lv_coord_t rout = radius;

    /*Special case: full arc invalidation */
    if(end_angle == start_angle + 360) {
 8007690:	f506 71b4 	add.w	r1, r6, #360	; 0x168
{
 8007694:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    lv_coord_t rout = radius;
 8007698:	f9bd 9004 	ldrsh.w	r9, [sp, #4]
    if(end_angle == start_angle + 360) {
 800769c:	428d      	cmp	r5, r1
 800769e:	d110      	bne.n	80076c2 <lv_draw_arc_get_area+0x4a>
        area->x1 = x - rout;
 80076a0:	b2a4      	uxth	r4, r4
 80076a2:	9b01      	ldr	r3, [sp, #4]
        area->y1 = y - rout;
 80076a4:	9a01      	ldr	r2, [sp, #4]
        area->x1 = x - rout;
 80076a6:	1ae3      	subs	r3, r4, r3
 80076a8:	803b      	strh	r3, [r7, #0]
        area->y1 = y - rout;
 80076aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80076ae:	1a9a      	subs	r2, r3, r2
 80076b0:	807a      	strh	r2, [r7, #2]
        area->x2 = x + rout;
 80076b2:	9a01      	ldr	r2, [sp, #4]
 80076b4:	4414      	add	r4, r2
        area->y2 = y + rout;
 80076b6:	4413      	add	r3, r2
        area->x2 = x + rout;
 80076b8:	80bc      	strh	r4, [r7, #4]
        area->y2 = y + rout;
 80076ba:	80fb      	strh	r3, [r7, #6]
        area->x1 = x - rout;
        area->y1 = y - rout;
        area->x2 = x + rout;
        area->y2 = y + rout;
    }
}
 80076bc:	b005      	add	sp, #20
 80076be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(start_angle > 360) start_angle -= 360;
 80076c2:	f5b6 7fb4 	cmp.w	r6, #360	; 0x168
    lv_coord_t rin = radius - w;
 80076c6:	9901      	ldr	r1, [sp, #4]
    if(start_angle > 360) start_angle -= 360;
 80076c8:	bf88      	it	hi
 80076ca:	f5a6 76b4 	subhi.w	r6, r6, #360	; 0x168
    lv_coord_t rin = radius - w;
 80076ce:	eba1 0803 	sub.w	r8, r1, r3
    if(start_angle > 360) start_angle -= 360;
 80076d2:	bf88      	it	hi
 80076d4:	b2b6      	uxthhi	r6, r6
    if(end_angle > 360) end_angle -= 360;
 80076d6:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
    lv_coord_t rin = radius - w;
 80076da:	fa0f f888 	sxth.w	r8, r8
    if(end_angle > 360) end_angle -= 360;
 80076de:	bf84      	itt	hi
 80076e0:	f5a5 75b4 	subhi.w	r5, r5, #360	; 0x168
 80076e4:	b2ad      	uxthhi	r5, r5
    lv_coord_t extra_area = rounded ? w / 2 + 1 : 0;
 80076e6:	2a00      	cmp	r2, #0
 80076e8:	d043      	beq.n	8007772 <lv_draw_arc_get_area+0xfa>
 80076ea:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80076ee:	105b      	asrs	r3, r3, #1
 80076f0:	3301      	adds	r3, #1
 80076f2:	b21b      	sxth	r3, r3
 80076f4:	9302      	str	r3, [sp, #8]
    uint8_t start_quarter = start_angle / 90;
 80076f6:	235a      	movs	r3, #90	; 0x5a
 80076f8:	fbb6 f2f3 	udiv	r2, r6, r3
    uint8_t end_quarter = end_angle / 90;
 80076fc:	fbb5 f3f3 	udiv	r3, r5, r3
    uint8_t start_quarter = start_angle / 90;
 8007700:	b2d2      	uxtb	r2, r2
    uint8_t end_quarter = end_angle / 90;
 8007702:	b2db      	uxtb	r3, r3
    if(start_quarter == 4) start_quarter = 3;
 8007704:	2a04      	cmp	r2, #4
 8007706:	d136      	bne.n	8007776 <lv_draw_arc_get_area+0xfe>
    if(end_quarter == 4) end_quarter = 3;
 8007708:	2b04      	cmp	r3, #4
 800770a:	d176      	bne.n	80077fa <lv_draw_arc_get_area+0x182>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 800770c:	42ae      	cmp	r6, r5
 800770e:	d8c7      	bhi.n	80076a0 <lv_draw_arc_get_area+0x28>
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007710:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 8007714:	b2a4      	uxth	r4, r4
 8007716:	b200      	sxth	r0, r0
 8007718:	f00a ffc4 	bl	80126a4 <lv_trigo_sin>
 800771c:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8007720:	fb00 f008 	mul.w	r0, r0, r8
 8007724:	eba4 030a 	sub.w	r3, r4, sl
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007728:	4454      	add	r4, sl
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800772a:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800772e:	b230      	sxth	r0, r6
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007730:	803b      	strh	r3, [r7, #0]
            area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007732:	f00a ffb7 	bl	80126a4 <lv_trigo_sin>
 8007736:	f8bd 6000 	ldrh.w	r6, [sp]
 800773a:	fb00 f009 	mul.w	r0, r0, r9
 800773e:	eba6 030a 	sub.w	r3, r6, sl
 8007742:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007746:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800774a:	807b      	strh	r3, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800774c:	b200      	sxth	r0, r0
 800774e:	f00a ffa9 	bl	80126a4 <lv_trigo_sin>
 8007752:	fb09 f000 	mul.w	r0, r9, r0
 8007756:	eb04 34e0 	add.w	r4, r4, r0, asr #15
            area->y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800775a:	b228      	sxth	r0, r5
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800775c:	80bc      	strh	r4, [r7, #4]
            area->y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800775e:	f00a ffa1 	bl	80126a4 <lv_trigo_sin>
 8007762:	fb08 f000 	mul.w	r0, r8, r0
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007766:	44b2      	add	sl, r6
 8007768:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 800776c:	f8a7 a006 	strh.w	sl, [r7, #6]
 8007770:	e7a4      	b.n	80076bc <lv_draw_arc_get_area+0x44>
    lv_coord_t extra_area = rounded ? w / 2 + 1 : 0;
 8007772:	9202      	str	r2, [sp, #8]
 8007774:	e7bf      	b.n	80076f6 <lv_draw_arc_get_area+0x7e>
    if(end_quarter == 4) end_quarter = 3;
 8007776:	2b04      	cmp	r3, #4
 8007778:	d17a      	bne.n	8007870 <lv_draw_arc_get_area+0x1f8>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 800777a:	2a03      	cmp	r2, #3
 800777c:	d0c6      	beq.n	800770c <lv_draw_arc_get_area+0x94>
    else if(start_quarter == 0 && end_quarter == 1) {
 800777e:	2a02      	cmp	r2, #2
    else if(start_quarter == 2 && end_quarter == 3) {
 8007780:	d18e      	bne.n	80076a0 <lv_draw_arc_get_area+0x28>
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007782:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 8007786:	b2a4      	uxth	r4, r4
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8007788:	b236      	sxth	r6, r6
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800778a:	b200      	sxth	r0, r0
 800778c:	f00a ff8a 	bl	80126a4 <lv_trigo_sin>
 8007790:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8007794:	fb00 f009 	mul.w	r0, r0, r9
        area->y1 = y - rout - extra_area;
 8007798:	f8bd b000 	ldrh.w	fp, [sp]
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800779c:	eba4 030a 	sub.w	r3, r4, sl
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80077a0:	4454      	add	r4, sl
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80077a2:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80077a6:	f105 005a 	add.w	r0, r5, #90	; 0x5a
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 80077aa:	b22d      	sxth	r5, r5
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80077ac:	803b      	strh	r3, [r7, #0]
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80077ae:	b200      	sxth	r0, r0
        area->y1 = y - rout - extra_area;
 80077b0:	9b01      	ldr	r3, [sp, #4]
 80077b2:	ebab 0303 	sub.w	r3, fp, r3
 80077b6:	eba3 030a 	sub.w	r3, r3, sl
                               lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80077ba:	44da      	add	sl, fp
        area->y1 = y - rout - extra_area;
 80077bc:	807b      	strh	r3, [r7, #2]
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80077be:	f00a ff71 	bl	80126a4 <lv_trigo_sin>
 80077c2:	fb09 f000 	mul.w	r0, r9, r0
 80077c6:	eb04 34e0 	add.w	r4, r4, r0, asr #15
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 80077ca:	4628      	mov	r0, r5
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80077cc:	80bc      	strh	r4, [r7, #4]
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 80077ce:	f00a ff69 	bl	80126a4 <lv_trigo_sin>
 80077d2:	fb00 f408 	mul.w	r4, r0, r8
 80077d6:	4630      	mov	r0, r6
 80077d8:	f00a ff64 	bl	80126a4 <lv_trigo_sin>
 80077dc:	fb08 f000 	mul.w	r0, r8, r0
 80077e0:	4284      	cmp	r4, r0
 80077e2:	bfcc      	ite	gt
 80077e4:	4628      	movgt	r0, r5
 80077e6:	4630      	movle	r0, r6
 80077e8:	f00a ff5c 	bl	80126a4 <lv_trigo_sin>
 80077ec:	fb08 f000 	mul.w	r0, r8, r0
 80077f0:	f3c0 30cf 	ubfx	r0, r0, #15, #16
                               lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80077f4:	4450      	add	r0, sl
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 80077f6:	80f8      	strh	r0, [r7, #6]
 80077f8:	e760      	b.n	80076bc <lv_draw_arc_get_area+0x44>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d086      	beq.n	800770c <lv_draw_arc_get_area+0x94>
    else if(start_quarter == 3 && end_quarter == 0) {
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f47f af4e 	bne.w	80076a0 <lv_draw_arc_get_area+0x28>
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 8007804:	f105 0b5a 	add.w	fp, r5, #90	; 0x5a
 8007808:	f106 0a5a 	add.w	sl, r6, #90	; 0x5a
 800780c:	b2a4      	uxth	r4, r4
 800780e:	fa0f fb8b 	sxth.w	fp, fp
 8007812:	fa0f fa8a 	sxth.w	sl, sl
 8007816:	4658      	mov	r0, fp
 8007818:	f00a ff44 	bl	80126a4 <lv_trigo_sin>
 800781c:	9003      	str	r0, [sp, #12]
 800781e:	4650      	mov	r0, sl
 8007820:	f00a ff40 	bl	80126a4 <lv_trigo_sin>
 8007824:	9b03      	ldr	r3, [sp, #12]
 8007826:	4283      	cmp	r3, r0
 8007828:	bfac      	ite	ge
 800782a:	4650      	movge	r0, sl
 800782c:	4658      	movlt	r0, fp
 800782e:	f00a ff39 	bl	80126a4 <lv_trigo_sin>
                                lv_trigo_sin(start_angle + 90)) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007832:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8007836:	fb00 f008 	mul.w	r0, r0, r8
 800783a:	eba4 030a 	sub.w	r3, r4, sl
 800783e:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007842:	b230      	sxth	r0, r6
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 8007844:	803b      	strh	r3, [r7, #0]
        area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007846:	f00a ff2d 	bl	80126a4 <lv_trigo_sin>
 800784a:	f8bd 6000 	ldrh.w	r6, [sp]
 800784e:	fb00 f009 	mul.w	r0, r0, r9
 8007852:	eba6 030a 	sub.w	r3, r6, sl
 8007856:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800785a:	b228      	sxth	r0, r5
        area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800785c:	807b      	strh	r3, [r7, #2]
        area->x2 = x + rout + extra_area;
 800785e:	9b01      	ldr	r3, [sp, #4]
 8007860:	441c      	add	r4, r3
 8007862:	4454      	add	r4, sl
 8007864:	80bc      	strh	r4, [r7, #4]
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007866:	f00a ff1d 	bl	80126a4 <lv_trigo_sin>
 800786a:	fb09 f000 	mul.w	r0, r9, r0
 800786e:	e77a      	b.n	8007766 <lv_draw_arc_get_area+0xee>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 8007870:	429a      	cmp	r2, r3
 8007872:	f040 80a6 	bne.w	80079c2 <lv_draw_arc_get_area+0x34a>
 8007876:	42ae      	cmp	r6, r5
 8007878:	f200 80a3 	bhi.w	80079c2 <lv_draw_arc_get_area+0x34a>
        if(start_quarter == 0) {
 800787c:	2a03      	cmp	r2, #3
 800787e:	f63f af1d 	bhi.w	80076bc <lv_draw_arc_get_area+0x44>
 8007882:	a301      	add	r3, pc, #4	; (adr r3, 8007888 <lv_draw_arc_get_area+0x210>)
 8007884:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8007888:	08007899 	.word	0x08007899
 800788c:	080078fd 	.word	0x080078fd
 8007890:	0800795f 	.word	0x0800795f
 8007894:	08007711 	.word	0x08007711
            area->y1 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007898:	b230      	sxth	r0, r6
 800789a:	f00a ff03 	bl	80126a4 <lv_trigo_sin>
 800789e:	f8bd b008 	ldrh.w	fp, [sp, #8]
 80078a2:	f8bd a000 	ldrh.w	sl, [sp]
 80078a6:	fb00 f008 	mul.w	r0, r0, r8
 80078aa:	ebaa 030b 	sub.w	r3, sl, fp
            area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80078ae:	44da      	add	sl, fp
            area->y1 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80078b0:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80078b4:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 80078b8:	b2a6      	uxth	r6, r4
 80078ba:	fa1b f484 	uxtah	r4, fp, r4
            area->y1 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80078be:	807b      	strh	r3, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80078c0:	b200      	sxth	r0, r0
 80078c2:	f00a feef 	bl	80126a4 <lv_trigo_sin>
 80078c6:	fb00 f009 	mul.w	r0, r0, r9
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80078ca:	eba6 060b 	sub.w	r6, r6, fp
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80078ce:	eb04 34e0 	add.w	r4, r4, r0, asr #15
            area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80078d2:	b228      	sxth	r0, r5
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80078d4:	80bc      	strh	r4, [r7, #4]
            area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80078d6:	f00a fee5 	bl	80126a4 <lv_trigo_sin>
 80078da:	fb09 f000 	mul.w	r0, r9, r0
 80078de:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80078e2:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80078e6:	f8a7 a006 	strh.w	sl, [r7, #6]
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80078ea:	b200      	sxth	r0, r0
 80078ec:	f00a feda 	bl	80126a4 <lv_trigo_sin>
 80078f0:	fb08 f000 	mul.w	r0, r8, r0
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80078f4:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 80078f8:	803e      	strh	r6, [r7, #0]
 80078fa:	e6df      	b.n	80076bc <lv_draw_arc_get_area+0x44>
            area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80078fc:	b230      	sxth	r0, r6
 80078fe:	f00a fed1 	bl	80126a4 <lv_trigo_sin>
 8007902:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8007906:	9b00      	ldr	r3, [sp, #0]
 8007908:	fb00 f009 	mul.w	r0, r0, r9
 800790c:	f8bd b000 	ldrh.w	fp, [sp]
 8007910:	fa1a f383 	uxtah	r3, sl, r3
            area->y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007914:	ebab 0b0a 	sub.w	fp, fp, sl
            area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007918:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800791c:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 8007920:	b2a6      	uxth	r6, r4
 8007922:	fa1a f484 	uxtah	r4, sl, r4
            area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007926:	80fb      	strh	r3, [r7, #6]
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007928:	b200      	sxth	r0, r0
 800792a:	f00a febb 	bl	80126a4 <lv_trigo_sin>
 800792e:	fb00 f008 	mul.w	r0, r0, r8
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007932:	eba6 060a 	sub.w	r6, r6, sl
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007936:	eb04 34e0 	add.w	r4, r4, r0, asr #15
            area->y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800793a:	b228      	sxth	r0, r5
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800793c:	80bc      	strh	r4, [r7, #4]
            area->y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800793e:	f00a feb1 	bl	80126a4 <lv_trigo_sin>
 8007942:	fb08 f000 	mul.w	r0, r8, r0
 8007946:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800794a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            area->y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800794e:	f8a7 b002 	strh.w	fp, [r7, #2]
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007952:	b200      	sxth	r0, r0
 8007954:	f00a fea6 	bl	80126a4 <lv_trigo_sin>
 8007958:	fb09 f000 	mul.w	r0, r9, r0
 800795c:	e7ca      	b.n	80078f4 <lv_draw_arc_get_area+0x27c>
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800795e:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 8007962:	b2a4      	uxth	r4, r4
 8007964:	b200      	sxth	r0, r0
 8007966:	f00a fe9d 	bl	80126a4 <lv_trigo_sin>
 800796a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 800796e:	fb00 f009 	mul.w	r0, r0, r9
 8007972:	eba4 030a 	sub.w	r3, r4, sl
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007976:	4454      	add	r4, sl
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007978:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            area->y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800797c:	b230      	sxth	r0, r6
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800797e:	803b      	strh	r3, [r7, #0]
            area->y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007980:	f00a fe90 	bl	80126a4 <lv_trigo_sin>
 8007984:	9b00      	ldr	r3, [sp, #0]
 8007986:	fb00 f008 	mul.w	r0, r0, r8
 800798a:	f8bd 6000 	ldrh.w	r6, [sp]
 800798e:	fa1a f383 	uxtah	r3, sl, r3
            area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007992:	eba6 060a 	sub.w	r6, r6, sl
            area->y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007996:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800799a:	b228      	sxth	r0, r5
            area->y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800799c:	80fb      	strh	r3, [r7, #6]
            area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800799e:	f00a fe81 	bl	80126a4 <lv_trigo_sin>
 80079a2:	fb09 f000 	mul.w	r0, r9, r0
 80079a6:	eb06 36e0 	add.w	r6, r6, r0, asr #15
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80079aa:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80079ae:	807e      	strh	r6, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80079b0:	b200      	sxth	r0, r0
 80079b2:	f00a fe77 	bl	80126a4 <lv_trigo_sin>
 80079b6:	fb08 f000 	mul.w	r0, r8, r0
 80079ba:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 80079be:	80bc      	strh	r4, [r7, #4]
 80079c0:	e67c      	b.n	80076bc <lv_draw_arc_get_area+0x44>
        area->x1 = x - rout;
 80079c2:	fa1f fa84 	uxth.w	sl, r4
        area->y1 = y - rout;
 80079c6:	f8bd b000 	ldrh.w	fp, [sp]
    else if(start_quarter == 0 && end_quarter == 1) {
 80079ca:	2a00      	cmp	r2, #0
 80079cc:	d13a      	bne.n	8007a44 <lv_draw_arc_get_area+0x3cc>
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	f47f ae66 	bne.w	80076a0 <lv_draw_arc_get_area+0x28>
        area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80079d4:	f105 005a 	add.w	r0, r5, #90	; 0x5a
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 80079d8:	b22d      	sxth	r5, r5
        area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80079da:	b200      	sxth	r0, r0
 80079dc:	f00a fe62 	bl	80126a4 <lv_trigo_sin>
 80079e0:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 80079e4:	fb00 f009 	mul.w	r0, r0, r9
 80079e8:	ebaa 0304 	sub.w	r3, sl, r4
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80079ec:	44a2      	add	sl, r4
        area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80079ee:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 80079f2:	4628      	mov	r0, r5
        area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80079f4:	803b      	strh	r3, [r7, #0]
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 80079f6:	f00a fe55 	bl	80126a4 <lv_trigo_sin>
 80079fa:	9002      	str	r0, [sp, #8]
 80079fc:	b233      	sxth	r3, r6
 80079fe:	4618      	mov	r0, r3
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	f00a fe4f 	bl	80126a4 <lv_trigo_sin>
 8007a06:	9a02      	ldr	r2, [sp, #8]
 8007a08:	9b00      	ldr	r3, [sp, #0]
 8007a0a:	4282      	cmp	r2, r0
 8007a0c:	bfac      	ite	ge
 8007a0e:	4618      	movge	r0, r3
 8007a10:	4628      	movlt	r0, r5
 8007a12:	f00a fe47 	bl	80126a4 <lv_trigo_sin>
                                lv_trigo_sin(start_angle))  * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007a16:	ebab 0304 	sub.w	r3, fp, r4
 8007a1a:	fb00 f008 	mul.w	r0, r0, r8
 8007a1e:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007a22:	f106 005a 	add.w	r0, r6, #90	; 0x5a
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8007a26:	807b      	strh	r3, [r7, #2]
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007a28:	b200      	sxth	r0, r0
 8007a2a:	f00a fe3b 	bl	80126a4 <lv_trigo_sin>
        area->y2 = y + rout + extra_area;
 8007a2e:	9b01      	ldr	r3, [sp, #4]
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007a30:	fb09 f000 	mul.w	r0, r9, r0
        area->y2 = y + rout + extra_area;
 8007a34:	449b      	add	fp, r3
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007a36:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        area->y2 = y + rout + extra_area;
 8007a3a:	445c      	add	r4, fp
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007a3c:	f8a7 a004 	strh.w	sl, [r7, #4]
        area->y2 = y + rout + extra_area;
 8007a40:	80fc      	strh	r4, [r7, #6]
 8007a42:	e63b      	b.n	80076bc <lv_draw_arc_get_area+0x44>
    else if(start_quarter == 1 && end_quarter == 2) {
 8007a44:	2a01      	cmp	r2, #1
 8007a46:	d13a      	bne.n	8007abe <lv_draw_arc_get_area+0x446>
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	f47f ae29 	bne.w	80076a0 <lv_draw_arc_get_area+0x28>
        area->x1 = x - rout - extra_area;
 8007a4e:	9b01      	ldr	r3, [sp, #4]
        area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007a50:	b228      	sxth	r0, r5
        area->x1 = x - rout - extra_area;
 8007a52:	f8bd 4008 	ldrh.w	r4, [sp, #8]
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8007a56:	355a      	adds	r5, #90	; 0x5a
        area->x1 = x - rout - extra_area;
 8007a58:	ebaa 0303 	sub.w	r3, sl, r3
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8007a5c:	b22d      	sxth	r5, r5
                                lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007a5e:	44a2      	add	sl, r4
        area->x1 = x - rout - extra_area;
 8007a60:	1b1b      	subs	r3, r3, r4
 8007a62:	803b      	strh	r3, [r7, #0]
        area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007a64:	f00a fe1e 	bl	80126a4 <lv_trigo_sin>
 8007a68:	ebab 0304 	sub.w	r3, fp, r4
 8007a6c:	fb00 f009 	mul.w	r0, r0, r9
        area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007a70:	44a3      	add	fp, r4
        area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007a72:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 8007a76:	807b      	strh	r3, [r7, #2]
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8007a78:	f106 035a 	add.w	r3, r6, #90	; 0x5a
 8007a7c:	b21b      	sxth	r3, r3
 8007a7e:	4618      	mov	r0, r3
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	f00a fe0f 	bl	80126a4 <lv_trigo_sin>
 8007a86:	9000      	str	r0, [sp, #0]
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f00a fe0b 	bl	80126a4 <lv_trigo_sin>
 8007a8e:	9a00      	ldr	r2, [sp, #0]
 8007a90:	4282      	cmp	r2, r0
 8007a92:	bfca      	itet	gt
 8007a94:	9b01      	ldrgt	r3, [sp, #4]
 8007a96:	4628      	movle	r0, r5
 8007a98:	4618      	movgt	r0, r3
 8007a9a:	f00a fe03 	bl	80126a4 <lv_trigo_sin>
                                lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007a9e:	fb00 f008 	mul.w	r0, r0, r8
 8007aa2:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007aa6:	b230      	sxth	r0, r6
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8007aa8:	f8a7 a004 	strh.w	sl, [r7, #4]
        area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007aac:	f00a fdfa 	bl	80126a4 <lv_trigo_sin>
 8007ab0:	fb09 f000 	mul.w	r0, r9, r0
 8007ab4:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
 8007ab8:	f8a7 b006 	strh.w	fp, [r7, #6]
 8007abc:	e5fe      	b.n	80076bc <lv_draw_arc_get_area+0x44>
    else if(start_quarter == 2 && end_quarter == 3) {
 8007abe:	2a02      	cmp	r2, #2
 8007ac0:	d101      	bne.n	8007ac6 <lv_draw_arc_get_area+0x44e>
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	e65c      	b.n	8007780 <lv_draw_arc_get_area+0x108>
    else if(start_quarter == 3 && end_quarter == 0) {
 8007ac6:	2a03      	cmp	r2, #3
 8007ac8:	f47f adea 	bne.w	80076a0 <lv_draw_arc_get_area+0x28>
 8007acc:	e697      	b.n	80077fe <lv_draw_arc_get_area+0x186>
 8007ace:	bf00      	nop

08007ad0 <lv_img_cf_get_px_size>:
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
    uint8_t px_size = 0;

    switch(cf) {
 8007ad0:	3804      	subs	r0, #4
 8007ad2:	b2c0      	uxtb	r0, r0
 8007ad4:	280a      	cmp	r0, #10
 8007ad6:	bf9a      	itte	ls
 8007ad8:	4b01      	ldrls	r3, [pc, #4]	; (8007ae0 <lv_img_cf_get_px_size+0x10>)
 8007ada:	5c18      	ldrbls	r0, [r3, r0]
{
 8007adc:	2000      	movhi	r0, #0
            px_size = 0;
            break;
    }

    return px_size;
}
 8007ade:	4770      	bx	lr
 8007ae0:	0802aafb 	.word	0x0802aafb

08007ae4 <lv_draw_img>:
{
 8007ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae8:	4604      	mov	r4, r0
 8007aea:	b08d      	sub	sp, #52	; 0x34
 8007aec:	4688      	mov	r8, r1
 8007aee:	4617      	mov	r7, r2
    if(src == NULL) {
 8007af0:	461d      	mov	r5, r3
 8007af2:	b93b      	cbnz	r3, 8007b04 <lv_draw_img+0x20>
        show_error(draw_ctx, coords, "No\ndata");
 8007af4:	4a85      	ldr	r2, [pc, #532]	; (8007d0c <lv_draw_img+0x228>)
 8007af6:	4639      	mov	r1, r7
 8007af8:	4620      	mov	r0, r4
}
 8007afa:	b00d      	add	sp, #52	; 0x34
 8007afc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        show_error(draw_ctx, coords, "No\ndata");
 8007b00:	f016 be8e 	b.w	801e820 <show_error>
    if(dsc->opa <= LV_OPA_MIN) return;
 8007b04:	7ace      	ldrb	r6, [r1, #11]
 8007b06:	2e02      	cmp	r6, #2
 8007b08:	d92f      	bls.n	8007b6a <lv_draw_img+0x86>
    if(draw_ctx->draw_img) {
 8007b0a:	69c6      	ldr	r6, [r0, #28]
 8007b0c:	bb36      	cbnz	r6, 8007b5c <lv_draw_img+0x78>
LV_ATTRIBUTE_FAST_MEM static lv_res_t decode_and_draw(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                      const lv_area_t * coords, const void * src)
{
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;

    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007b14:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8007b18:	f000 ff6a 	bl	80089f0 <_lv_img_cache_open>

    if(cdsc == NULL) return LV_RES_INV;
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d0e8      	beq.n	8007af4 <lv_draw_img+0x10>

    lv_img_cf_t cf;
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 8007b22:	7d06      	ldrb	r6, [r0, #20]
 8007b24:	f006 021f 	and.w	r2, r6, #31
 8007b28:	4610      	mov	r0, r2
 8007b2a:	f016 fea9 	bl	801e880 <lv_img_cf_is_chroma_keyed>
 8007b2e:	bb38      	cbnz	r0, 8007b80 <lv_draw_img+0x9c>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 8007b30:	2a0e      	cmp	r2, #14
 8007b32:	4616      	mov	r6, r2
 8007b34:	d01c      	beq.n	8007b70 <lv_draw_img+0x8c>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 8007b36:	2a14      	cmp	r2, #20
 8007b38:	d004      	beq.n	8007b44 <lv_draw_img+0x60>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f016 fea8 	bl	801e890 <lv_img_cf_has_alpha>
 8007b40:	1d06      	adds	r6, r0, #4
 8007b42:	b2f6      	uxtb	r6, r6
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
            cdsc->dec_dsc.img_data = NULL;
        }
    }

    if(cdsc->dec_dsc.error_msg != NULL) {
 8007b44:	6a2a      	ldr	r2, [r5, #32]
 8007b46:	b1ea      	cbz	r2, 8007b84 <lv_draw_img+0xa0>
        LV_LOG_WARN("Image draw error");

        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 8007b48:	4639      	mov	r1, r7
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f016 fe68 	bl	801e820 <show_error>

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 8007b50:	4628      	mov	r0, r5
}
 8007b52:	b00d      	add	sp, #52	; 0x34
 8007b54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_img_decoder_close(&cache->dec_dsc);
 8007b58:	f017 bd24 	b.w	801f5a4 <lv_img_decoder_close>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 8007b5c:	47b0      	blx	r6
    if(res != LV_RES_OK) {
 8007b5e:	2801      	cmp	r0, #1
 8007b60:	d003      	beq.n	8007b6a <lv_draw_img+0x86>
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 8007b62:	f898 300b 	ldrb.w	r3, [r8, #11]
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d8d1      	bhi.n	8007b0e <lv_draw_img+0x2a>
}
 8007b6a:	b00d      	add	sp, #52	; 0x34
 8007b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 8007b70:	f8d8 3000 	ldr.w	r3, [r8]
 8007b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b78:	d0e4      	beq.n	8007b44 <lv_draw_img+0x60>
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8007b7a:	2605      	movs	r6, #5
            cdsc->dec_dsc.img_data = NULL;
 8007b7c:	61a8      	str	r0, [r5, #24]
 8007b7e:	e7e1      	b.n	8007b44 <lv_draw_img+0x60>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 8007b80:	2606      	movs	r6, #6
 8007b82:	e7df      	b.n	8007b44 <lv_draw_img+0x60>
    else if(cdsc->dec_dsc.img_data) {
 8007b84:	69ab      	ldr	r3, [r5, #24]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d056      	beq.n	8007c38 <lv_draw_img+0x154>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 8007b8a:	f8d8 3000 	ldr.w	r3, [r8]
    dest->x1 = src->x1;
 8007b8e:	f9b7 c000 	ldrsh.w	ip, [r7]
    dest->y1 = src->y1;
 8007b92:	f9b7 e002 	ldrsh.w	lr, [r7, #2]
 8007b96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    dest->x2 = src->x2;
 8007b9a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    dest->y2 = src->y2;
 8007b9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    dest->x1 = src->x1;
 8007ba2:	f8ad c020 	strh.w	ip, [sp, #32]
    dest->y1 = src->y1;
 8007ba6:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 8007baa:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    dest->y2 = src->y2;
 8007bae:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8007bb2:	d027      	beq.n	8007c04 <lv_draw_img+0x120>
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 8007bb4:	4640      	mov	r0, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007bb6:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007bb8:	3101      	adds	r1, #1
 8007bba:	f930 3b04 	ldrsh.w	r3, [r0], #4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007bbe:	eba2 020e 	sub.w	r2, r2, lr
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007bc2:	eba1 010c 	sub.w	r1, r1, ip
 8007bc6:	9001      	str	r0, [sp, #4]
 8007bc8:	b212      	sxth	r2, r2
 8007bca:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8007bce:	b209      	sxth	r1, r1
 8007bd0:	9000      	str	r0, [sp, #0]
 8007bd2:	a808      	add	r0, sp, #32
 8007bd4:	f017 fc42 	bl	801f45c <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 8007bd8:	883a      	ldrh	r2, [r7, #0]
 8007bda:	f8bd 3020 	ldrh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 8007bde:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x1 += coords->x1;
 8007be2:	4413      	add	r3, r2
 8007be4:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 8007be8:	887b      	ldrh	r3, [r7, #2]
 8007bea:	4419      	add	r1, r3
 8007bec:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
 8007bf0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8007bf4:	440a      	add	r2, r1
 8007bf6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
 8007bfa:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8007bfe:	4413      	add	r3, r2
 8007c00:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 8007c04:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8007c08:	aa08      	add	r2, sp, #32
 8007c0a:	68a1      	ldr	r1, [r4, #8]
 8007c0c:	4648      	mov	r0, r9
 8007c0e:	f01c fb64 	bl	80242da <_lv_area_intersect>
        if(union_ok == false) {
 8007c12:	b918      	cbnz	r0, 8007c1c <lv_draw_img+0x138>
    lv_img_decoder_close(&cache->dec_dsc);
 8007c14:	4628      	mov	r0, r5
 8007c16:	f017 fcc5 	bl	801f5a4 <lv_img_decoder_close>
    if(res != LV_RES_OK) {
 8007c1a:	e7a6      	b.n	8007b6a <lv_draw_img+0x86>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8007c1c:	f8d4 a008 	ldr.w	sl, [r4, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 8007c20:	463a      	mov	r2, r7
        draw_ctx->clip_area = &clip_com;
 8007c22:	f8c4 9008 	str.w	r9, [r4, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 8007c26:	4641      	mov	r1, r8
 8007c28:	9600      	str	r6, [sp, #0]
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	69ab      	ldr	r3, [r5, #24]
 8007c2e:	f016 fe46 	bl	801e8be <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 8007c32:	f8c4 a008 	str.w	sl, [r4, #8]
 8007c36:	e78b      	b.n	8007b50 <lv_draw_img+0x6c>
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 8007c38:	463a      	mov	r2, r7
 8007c3a:	68a1      	ldr	r1, [r4, #8]
 8007c3c:	a806      	add	r0, sp, #24
 8007c3e:	f01c fb4c 	bl	80242da <_lv_area_intersect>
        if(union_ok == false) {
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d0e6      	beq.n	8007c14 <lv_draw_img+0x130>
 8007c46:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007c4a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	1a9b      	subs	r3, r3, r2
 8007c52:	b21b      	sxth	r3, r3
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8007c54:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8007c58:	9304      	str	r3, [sp, #16]
 8007c5a:	f00a fdad 	bl	80127b8 <lv_mem_buf_get>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8007c5e:	68a3      	ldr	r3, [r4, #8]
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8007c60:	4681      	mov	r9, r0
        lv_area_set_height(&line, 1);
 8007c62:	2101      	movs	r1, #1
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8007c64:	9303      	str	r3, [sp, #12]
        lv_area_set_height(&line, 1);
 8007c66:	a808      	add	r0, sp, #32
    dest->x1 = src->x1;
 8007c68:	9b06      	ldr	r3, [sp, #24]
 8007c6a:	9308      	str	r3, [sp, #32]
    dest->x2 = src->x2;
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c70:	f01c fb00 	bl	8024274 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 8007c74:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8007c78:	f9b7 2000 	ldrsh.w	r2, [r7]
        int32_t y = mask_com.y1 - coords->y1;
 8007c7c:	f9bd b01a 	ldrsh.w	fp, [sp, #26]
 8007c80:	f9b7 a002 	ldrsh.w	sl, [r7, #2]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8007c84:	1a9b      	subs	r3, r3, r2
        int32_t y = mask_com.y1 - coords->y1;
 8007c86:	ebab 0a0a 	sub.w	sl, fp, sl
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8007c8a:	b21b      	sxth	r3, r3
 8007c8c:	9305      	str	r3, [sp, #20]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8007c8e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8007c92:	459b      	cmp	fp, r3
 8007c94:	dd05      	ble.n	8007ca2 <lv_draw_img+0x1be>
        draw_ctx->clip_area = clip_area_ori;
 8007c96:	9b03      	ldr	r3, [sp, #12]
        lv_mem_buf_release(buf);
 8007c98:	4648      	mov	r0, r9
        draw_ctx->clip_area = clip_area_ori;
 8007c9a:	60a3      	str	r3, [r4, #8]
        lv_mem_buf_release(buf);
 8007c9c:	f00a fdd6 	bl	801284c <lv_mem_buf_release>
 8007ca0:	e756      	b.n	8007b50 <lv_draw_img+0x6c>
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 8007ca2:	aa08      	add	r2, sp, #32
 8007ca4:	9903      	ldr	r1, [sp, #12]
 8007ca6:	a80a      	add	r0, sp, #40	; 0x28
 8007ca8:	f01c fb17 	bl	80242da <_lv_area_intersect>
            if(union_ok == false) continue;
 8007cac:	b358      	cbz	r0, 8007d06 <lv_draw_img+0x222>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8007cae:	9b04      	ldr	r3, [sp, #16]
 8007cb0:	fa0f f28a 	sxth.w	r2, sl
 8007cb4:	9905      	ldr	r1, [sp, #20]
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f8cd 9000 	str.w	r9, [sp]
 8007cbc:	f017 fc62 	bl	801f584 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 8007cc0:	2801      	cmp	r0, #1
 8007cc2:	d00b      	beq.n	8007cdc <lv_draw_img+0x1f8>
                lv_img_decoder_close(&cdsc->dec_dsc);
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f017 fc6d 	bl	801f5a4 <lv_img_decoder_close>
                lv_mem_buf_release(buf);
 8007cca:	4648      	mov	r0, r9
 8007ccc:	f00a fdbe 	bl	801284c <lv_mem_buf_release>
    lv_img_decoder_close(&cache->dec_dsc);
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f017 fc67 	bl	801f5a4 <lv_img_decoder_close>
                draw_ctx->clip_area = clip_area_ori;
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	60a3      	str	r3, [r4, #8]
    if(res != LV_RES_OK) {
 8007cda:	e70b      	b.n	8007af4 <lv_draw_img+0x10>
            draw_ctx->clip_area = &mask_line;
 8007cdc:	ab0a      	add	r3, sp, #40	; 0x28
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 8007cde:	aa08      	add	r2, sp, #32
 8007ce0:	4641      	mov	r1, r8
 8007ce2:	4620      	mov	r0, r4
            draw_ctx->clip_area = &mask_line;
 8007ce4:	60a3      	str	r3, [r4, #8]
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 8007ce6:	464b      	mov	r3, r9
 8007ce8:	9600      	str	r6, [sp, #0]
            y++;
 8007cea:	f10a 0a01 	add.w	sl, sl, #1
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 8007cee:	f016 fde6 	bl	801e8be <lv_draw_img_decoded>
            line.y1++;
 8007cf2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
 8007cfc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8007d00:	3301      	adds	r3, #1
 8007d02:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8007d06:	f10b 0b01 	add.w	fp, fp, #1
 8007d0a:	e7c0      	b.n	8007c8e <lv_draw_img+0x1aa>
 8007d0c:	0802aaf3 	.word	0x0802aaf3

08007d10 <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	2220      	movs	r2, #32
 8007d14:	2100      	movs	r1, #0
 8007d16:	4604      	mov	r4, r0
 8007d18:	f012 fd36 	bl	801a788 <memset>
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
    dsc->opa = LV_OPA_COVER;
 8007d1c:	23ff      	movs	r3, #255	; 0xff
    dsc->color = lv_color_black();
 8007d1e:	2500      	movs	r5, #0
    dsc->font = LV_FONT_DEFAULT;
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
    dsc->sel_color = lv_color_black();
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8007d20:	2005      	movs	r0, #5
    dsc->opa = LV_OPA_COVER;
 8007d22:	76a3      	strb	r3, [r4, #26]
    dsc->font = LV_FONT_DEFAULT;
 8007d24:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <lv_draw_label_dsc_init+0x2c>)
    dsc->color = lv_color_black();
 8007d26:	60e5      	str	r5, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 8007d28:	6023      	str	r3, [r4, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8007d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 8007d2e:	e9c4 3301 	strd	r3, r3, [r4, #4]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8007d32:	f00a fc57 	bl	80125e4 <lv_palette_main>
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 8007d36:	76e5      	strb	r5, [r4, #27]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8007d38:	8220      	strh	r0, [r4, #16]
}
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	08029408 	.word	0x08029408

08007d40 <lv_draw_label>:
 * @param hint pointer to a `lv_draw_label_hint_t` variable.
 * It is managed by the draw to speed up the drawing of very long texts (thousands of lines).
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                         const lv_area_t * coords, const char * txt, lv_draw_label_hint_t * hint)
{
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	b0b5      	sub	sp, #212	; 0xd4
 8007d46:	4683      	mov	fp, r0
 8007d48:	460c      	mov	r4, r1
 8007d4a:	4615      	mov	r5, r2
 8007d4c:	9305      	str	r3, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
 8007d4e:	7e8b      	ldrb	r3, [r1, #26]
{
 8007d50:	f8dd 80f8 	ldr.w	r8, [sp, #248]	; 0xf8
    if(dsc->opa <= LV_OPA_MIN) return;
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	f240 80b7 	bls.w	8007ec8 <lv_draw_label+0x188>
    if(dsc->font == NULL) {
 8007d5a:	680b      	ldr	r3, [r1, #0]
 8007d5c:	9304      	str	r3, [sp, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 80b2 	beq.w	8007ec8 <lv_draw_label+0x188>
        LV_LOG_WARN("dsc->font == NULL");
        return;
    }

    if(draw_ctx->draw_letter == NULL) {
 8007d64:	6a03      	ldr	r3, [r0, #32]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 80ae 	beq.w	8007ec8 <lv_draw_label+0x188>
        LV_LOG_WARN("draw->draw_letter == NULL (there is no function to draw letters)");
        return;
    }

    lv_draw_label_dsc_t dsc_mod = *dsc;
 8007d6c:	460f      	mov	r7, r1
 8007d6e:	ae1e      	add	r6, sp, #120	; 0x78
 8007d70:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007d72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007d74:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8007d78:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

    const lv_font_t * font = dsc->font;
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt == NULL || txt[0] == '\0')
 8007d7c:	9b05      	ldr	r3, [sp, #20]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 80a2 	beq.w	8007ec8 <lv_draw_label+0x188>
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 809e 	beq.w	8007ec8 <lv_draw_label+0x188>
        return;

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 8007d8c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8007d90:	4629      	mov	r1, r5
 8007d92:	a817      	add	r0, sp, #92	; 0x5c
 8007d94:	f01c faa1 	bl	80242da <_lv_area_intersect>
    if(!clip_ok) return;
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	f000 8095 	beq.w	8007ec8 <lv_draw_label+0x188>

    lv_text_align_t align = dsc->align;
 8007d9e:	7f23      	ldrb	r3, [r4, #28]
 8007da0:	9308      	str	r3, [sp, #32]
    lv_base_dir_t base_dir = dsc->bidi_dir;

    lv_bidi_calculate_align(&align, &base_dir, txt);

    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 8007da2:	7f63      	ldrb	r3, [r4, #29]
 8007da4:	0798      	lsls	r0, r3, #30
 8007da6:	f100 8092 	bmi.w	8007ece <lv_draw_label+0x18e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007daa:	88ab      	ldrh	r3, [r5, #4]
 8007dac:	882a      	ldrh	r2, [r5, #0]
 8007dae:	3301      	adds	r3, #1
 8007db0:	1a9b      	subs	r3, r3, r2
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 8007db2:	b21b      	sxth	r3, r3
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
                        dsc->flag);
        w = p.x;
    }

    int32_t line_height_font = lv_font_get_line_height(font);
 8007db4:	9a04      	ldr	r2, [sp, #16]

    /*Init variables for the first line*/
    int32_t line_width = 0;
    lv_point_t pos;
    pos.x = coords->x1;
    pos.y = coords->y1;
 8007db6:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
    int32_t line_height_font = lv_font_get_line_height(font);
 8007dba:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
 8007dbe:	f9b4 2012 	ldrsh.w	r2, [r4, #18]

    int32_t x_ofs = 0;
    int32_t y_ofs = 0;
    x_ofs = dsc->ofs_x;
    y_ofs = dsc->ofs_y;
 8007dc2:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
    int32_t line_height = line_height_font + dsc->line_space;
 8007dc6:	444a      	add	r2, r9
 8007dc8:	9209      	str	r2, [sp, #36]	; 0x24
    pos.x = coords->x1;
 8007dca:	882a      	ldrh	r2, [r5, #0]
 8007dcc:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    x_ofs = dsc->ofs_x;
 8007dd0:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8007dd4:	9210      	str	r2, [sp, #64]	; 0x40
    pos.y += y_ofs;
 8007dd6:	1842      	adds	r2, r0, r1
 8007dd8:	b292      	uxth	r2, r2
 8007dda:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e

    uint32_t line_start     = 0;
    int32_t last_line_start = -1;

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8007dde:	f1b8 0f00 	cmp.w	r8, #0
 8007de2:	f040 8085 	bne.w	8007ef0 <lv_draw_label+0x1b0>
    uint32_t line_start     = 0;
 8007de6:	2600      	movs	r6, #0
    if(hint && last_line_start >= 0) {
        line_start = last_line_start;
        pos.y += hint->y;
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8007de8:	b21b      	sxth	r3, r3
 8007dea:	930a      	str	r3, [sp, #40]	; 0x28
 8007dec:	7f63      	ldrb	r3, [r4, #29]
 8007dee:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8007df2:	9301      	str	r3, [sp, #4]
 8007df4:	2300      	movs	r3, #0
 8007df6:	4430      	add	r0, r6
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dfc:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8007e00:	f00a ff8c 	bl	8012d1c <_lv_txt_get_next_line>
 8007e04:	1987      	adds	r7, r0, r6

    /*Go the first visible line*/
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8007e06:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8007e0a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8007e0e:	444b      	add	r3, r9
 8007e10:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8007e14:	4293      	cmp	r3, r2
        /*Go to next line*/
        line_start = line_end;
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8007e16:	9b05      	ldr	r3, [sp, #20]
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8007e18:	f2c0 808b 	blt.w	8007f32 <lv_draw_label+0x1f2>
        if(txt[line_start] == '\0') return;
    }

    /*Align to middle*/
    if(align == LV_TEXT_ALIGN_CENTER) {
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8007e1c:	1998      	adds	r0, r3, r6
    if(align == LV_TEXT_ALIGN_CENTER) {
 8007e1e:	9b08      	ldr	r3, [sp, #32]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	f040 80b7 	bne.w	8007f94 <lv_draw_label+0x254>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8007e26:	7f63      	ldrb	r3, [r4, #29]
 8007e28:	1bb9      	subs	r1, r7, r6
 8007e2a:	9a04      	ldr	r2, [sp, #16]
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8007e32:	f01d fcf6 	bl	8025822 <lv_txt_get_width>
 8007e36:	88ab      	ldrh	r3, [r5, #4]
 8007e38:	882a      	ldrh	r2, [r5, #0]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	1a9b      	subs	r3, r3, r2

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8007e3e:	b21b      	sxth	r3, r3
 8007e40:	1a18      	subs	r0, r3, r0
 8007e42:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8007e46:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8007e4a:	eb03 0360 	add.w	r3, r3, r0, asr #1

    }
    /*Align to the right*/
    else if(align == LV_TEXT_ALIGN_RIGHT) {
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
        pos.x += lv_area_get_width(coords) - line_width;
 8007e4e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    }
    uint32_t sel_start = dsc->sel_start;
 8007e52:	6863      	ldr	r3, [r4, #4]
 8007e54:	9306      	str	r3, [sp, #24]
    uint32_t sel_end = dsc->sel_end;
 8007e56:	68a3      	ldr	r3, [r4, #8]
 8007e58:	9307      	str	r3, [sp, #28]
    if(sel_start > sel_end) {
 8007e5a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	bf88      	it	hi
 8007e62:	e9cd 2306 	strdhi	r2, r3, [sp, #24]
        sel_start = sel_end;
        sel_end = tmp;
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 8007e66:	7fa3      	ldrb	r3, [r4, #30]
 8007e68:	0799      	lsls	r1, r3, #30
 8007e6a:	d019      	beq.n	8007ea0 <lv_draw_label+0x160>
        lv_draw_line_dsc_init(&line_dsc);
 8007e6c:	a81b      	add	r0, sp, #108	; 0x6c
 8007e6e:	f016 fd9e 	bl	801e9ae <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 8007e72:	89a3      	ldrh	r3, [r4, #12]
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
        line_dsc.opa = dsc->opa;
        line_dsc.blend_mode = dsc->blend_mode;
 8007e74:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
        line_dsc.color = dsc->color;
 8007e78:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 8007e7c:	9b04      	ldr	r3, [sp, #16]
 8007e7e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	bf08      	it	eq
 8007e86:	2301      	moveq	r3, #1
 8007e88:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        line_dsc.opa = dsc->opa;
 8007e8c:	7ea3      	ldrb	r3, [r4, #26]
 8007e8e:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
        line_dsc.blend_mode = dsc->blend_mode;
 8007e92:	7fa3      	ldrb	r3, [r4, #30]
 8007e94:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8007e98:	f363 0201 	bfi	r2, r3, #0, #2
 8007e9c:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
    lv_color_t recolor  = lv_color_black();
    lv_color_t color = lv_color_black();
    int32_t letter_w;

    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 8007ea0:	a826      	add	r0, sp, #152	; 0x98
    lv_color_t color = lv_color_black();
 8007ea2:	f04f 0800 	mov.w	r8, #0
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 8007ea6:	f000 fd7d 	bl	80089a4 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 8007eaa:	8a23      	ldrh	r3, [r4, #16]
 8007eac:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c

    int32_t pos_x_start = pos.x;
 8007eb0:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    uint32_t par_start = 0;
 8007eb4:	e9cd 880c 	strd	r8, r8, [sp, #48]	; 0x30
    int32_t pos_x_start = pos.x;
 8007eb8:	930e      	str	r3, [sp, #56]	; 0x38
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 8007eba:	9b05      	ldr	r3, [sp, #20]
 8007ebc:	4433      	add	r3, r6
 8007ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ec0:	9b05      	ldr	r3, [sp, #20]
 8007ec2:	5d9b      	ldrb	r3, [r3, r6]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d17b      	bne.n	8007fc0 <lv_draw_label+0x280>

        if(pos.y > draw_ctx->clip_area->y2) return;
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 8007ec8:	b035      	add	sp, #212	; 0xd4
 8007eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 8007ece:	9302      	str	r3, [sp, #8]
 8007ed0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8007ed4:	9905      	ldr	r1, [sp, #20]
 8007ed6:	a826      	add	r0, sp, #152	; 0x98
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	f01d fcdb 	bl	80258a0 <lv_txt_get_size>
        w = p.x;
 8007eea:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
 8007eee:	e761      	b.n	8007db4 <lv_draw_label+0x74>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	f47f af78 	bne.w	8007de6 <lv_draw_label+0xa6>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f6bf af75 	bge.w	8007de6 <lv_draw_label+0xa6>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8007efc:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8007f00:	1a09      	subs	r1, r1, r0
 8007f02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f04:	2900      	cmp	r1, #0
 8007f06:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8007f0a:	bfb8      	it	lt
 8007f0c:	4249      	neglt	r1, r1
 8007f0e:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
            hint->line_start = -1;
 8007f12:	bfc4      	itt	gt
 8007f14:	f04f 31ff 	movgt.w	r1, #4294967295
 8007f18:	f8c8 1000 	strgt.w	r1, [r8]
        last_line_start = hint->line_start;
 8007f1c:	f8d8 6000 	ldr.w	r6, [r8]
    if(hint && last_line_start >= 0) {
 8007f20:	2e00      	cmp	r6, #0
 8007f22:	f6ff af60 	blt.w	8007de6 <lv_draw_label+0xa6>
        pos.y += hint->y;
 8007f26:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f2a:	440a      	add	r2, r1
 8007f2c:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
 8007f30:	e75a      	b.n	8007de8 <lv_draw_label+0xa8>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8007f32:	eb03 0a07 	add.w	sl, r3, r7
 8007f36:	7f63      	ldrb	r3, [r4, #29]
 8007f38:	9904      	ldr	r1, [sp, #16]
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4650      	mov	r0, sl
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f44:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8007f48:	f00a fee8 	bl	8012d1c <_lv_txt_get_next_line>
        pos.y += line_height;
 8007f4c:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8007f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8007f52:	4438      	add	r0, r7
        pos.y += line_height;
 8007f54:	4413      	add	r3, r2
 8007f56:	b21b      	sxth	r3, r3
 8007f58:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8007f5c:	f1b8 0f00 	cmp.w	r8, #0
 8007f60:	d011      	beq.n	8007f86 <lv_draw_label+0x246>
 8007f62:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8007f66:	db0e      	blt.n	8007f86 <lv_draw_label+0x246>
 8007f68:	f8d8 2000 	ldr.w	r2, [r8]
 8007f6c:	2a00      	cmp	r2, #0
 8007f6e:	da0a      	bge.n	8007f86 <lv_draw_label+0x246>
            hint->line_start = line_start;
 8007f70:	f8c8 7000 	str.w	r7, [r8]
            hint->y          = pos.y - coords->y1;
 8007f74:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8007f78:	1a9b      	subs	r3, r3, r2
 8007f7a:	f8c8 3004 	str.w	r3, [r8, #4]
            hint->coord_y    = coords->y1;
 8007f7e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8007f82:	f8c8 3008 	str.w	r3, [r8, #8]
        if(txt[line_start] == '\0') return;
 8007f86:	f89a 3000 	ldrb.w	r3, [sl]
 8007f8a:	463e      	mov	r6, r7
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d09b      	beq.n	8007ec8 <lv_draw_label+0x188>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8007f90:	4607      	mov	r7, r0
 8007f92:	e738      	b.n	8007e06 <lv_draw_label+0xc6>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8007f94:	9b08      	ldr	r3, [sp, #32]
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	f47f af5b 	bne.w	8007e52 <lv_draw_label+0x112>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8007f9c:	7f63      	ldrb	r3, [r4, #29]
 8007f9e:	1bb9      	subs	r1, r7, r6
 8007fa0:	9a04      	ldr	r2, [sp, #16]
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8007fa8:	f01d fc3b 	bl	8025822 <lv_txt_get_width>
 8007fac:	88ab      	ldrh	r3, [r5, #4]
 8007fae:	882a      	ldrh	r2, [r5, #0]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 8007fb4:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8007fb8:	b21b      	sxth	r3, r3
 8007fba:	1a1b      	subs	r3, r3, r0
 8007fbc:	4413      	add	r3, r2
 8007fbe:	e746      	b.n	8007e4e <lv_draw_label+0x10e>
        pos.x += x_ofs;
 8007fc0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8007fc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        i         = 0;
 8007fcc:	2300      	movs	r3, #0
        cmd_state = CMD_STATE_WAIT;
 8007fce:	4699      	mov	r9, r3
        i         = 0;
 8007fd0:	9314      	str	r3, [sp, #80]	; 0x50
        while(i < line_end - line_start) {
 8007fd2:	1bbb      	subs	r3, r7, r6
 8007fd4:	9311      	str	r3, [sp, #68]	; 0x44
 8007fd6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007fd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fda:	428b      	cmp	r3, r1
 8007fdc:	f200 8086 	bhi.w	80080ec <lv_draw_label+0x3ac>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 8007fe0:	7fa3      	ldrb	r3, [r4, #30]
 8007fe2:	079a      	lsls	r2, r3, #30
 8007fe4:	d522      	bpl.n	800802c <lv_draw_label+0x2ec>
            p1.x = pos_x_start;
 8007fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8007fe8:	a91b      	add	r1, sp, #108	; 0x6c
 8007fea:	4658      	mov	r0, fp
            line_dsc.color = color;
 8007fec:	f8ad 806c 	strh.w	r8, [sp, #108]	; 0x6c
            p1.x = pos_x_start;
 8007ff0:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8007ff4:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8007ff8:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8007ffc:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8008000:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8008004:	6822      	ldr	r2, [r4, #0]
 8008006:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800800a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800800e:	eb03 0362 	add.w	r3, r3, r2, asr #1
            p2.x = pos.x;
 8008012:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8008016:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 8008018:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800801c:	aa16      	add	r2, sp, #88	; 0x58
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800801e:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            p2.y = p1.y;
 8008022:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8008026:	ab19      	add	r3, sp, #100	; 0x64
 8008028:	f016 fcce 	bl	801e9c8 <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800802c:	7fa3      	ldrb	r3, [r4, #30]
 800802e:	07db      	lsls	r3, r3, #31
 8008030:	d51e      	bpl.n	8008070 <lv_draw_label+0x330>
            p1.x = pos_x_start;
 8008032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8008034:	4658      	mov	r0, fp
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8008036:	6822      	ldr	r2, [r4, #0]
            p1.x = pos_x_start;
 8008038:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800803c:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8008040:	8911      	ldrh	r1, [r2, #8]
 8008042:	8952      	ldrh	r2, [r2, #10]
 8008044:	440b      	add	r3, r1
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8008046:	a91b      	add	r1, sp, #108	; 0x6c
            line_dsc.color = color;
 8008048:	f8ad 806c 	strh.w	r8, [sp, #108]	; 0x6c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800804c:	1a9b      	subs	r3, r3, r2
 800804e:	9a04      	ldr	r2, [sp, #16]
 8008050:	f992 200d 	ldrsb.w	r2, [r2, #13]
 8008054:	1a9b      	subs	r3, r3, r2
            p2.x = pos.x;
 8008056:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800805a:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 800805c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8008060:	aa16      	add	r2, sp, #88	; 0x58
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8008062:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            p2.y = p1.y;
 8008066:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800806a:	ab19      	add	r3, sp, #100	; 0x64
 800806c:	f016 fcac 	bl	801e9c8 <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8008070:	9b05      	ldr	r3, [sp, #20]
 8008072:	9904      	ldr	r1, [sp, #16]
 8008074:	19de      	adds	r6, r3, r7
 8008076:	7f63      	ldrb	r3, [r4, #29]
 8008078:	9301      	str	r3, [sp, #4]
 800807a:	2300      	movs	r3, #0
 800807c:	4630      	mov	r0, r6
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008082:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8008086:	f00a fe49 	bl	8012d1c <_lv_txt_get_next_line>
        pos.x = coords->x1;
 800808a:	882b      	ldrh	r3, [r5, #0]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800808c:	4601      	mov	r1, r0
 800808e:	eb07 0900 	add.w	r9, r7, r0
        pos.x = coords->x1;
 8008092:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        if(align == LV_TEXT_ALIGN_CENTER) {
 8008096:	9b08      	ldr	r3, [sp, #32]
 8008098:	2b02      	cmp	r3, #2
 800809a:	f040 80ec 	bne.w	8008276 <lv_draw_label+0x536>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800809e:	7f63      	ldrb	r3, [r4, #29]
 80080a0:	4630      	mov	r0, r6
 80080a2:	9a04      	ldr	r2, [sp, #16]
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80080aa:	f01d fbba 	bl	8025822 <lv_txt_get_width>
 80080ae:	88ab      	ldrh	r3, [r5, #4]
 80080b0:	882a      	ldrh	r2, [r5, #0]
 80080b2:	3301      	adds	r3, #1
 80080b4:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80080b6:	b21b      	sxth	r3, r3
 80080b8:	1a18      	subs	r0, r3, r0
 80080ba:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80080be:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80080c2:	eb03 0360 	add.w	r3, r3, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
 80080c6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        pos.y += line_height;
 80080ca:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
        line_start = line_end;
 80080ce:	463e      	mov	r6, r7
        pos.y += line_height;
 80080d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d2:	4413      	add	r3, r2
        if(pos.y > draw_ctx->clip_area->y2) return;
 80080d4:	f8db 2008 	ldr.w	r2, [fp, #8]
        pos.y += line_height;
 80080d8:	b21b      	sxth	r3, r3
        if(pos.y > draw_ctx->clip_area->y2) return;
 80080da:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80080de:	429a      	cmp	r2, r3
        pos.y += line_height;
 80080e0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(pos.y > draw_ctx->clip_area->y2) return;
 80080e4:	f6ff aef0 	blt.w	8007ec8 <lv_draw_label+0x188>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 80080e8:	464f      	mov	r7, r9
 80080ea:	e6e6      	b.n	8007eba <lv_draw_label+0x17a>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 80080ec:	9a06      	ldr	r2, [sp, #24]
 80080ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d01d      	beq.n	8008132 <lv_draw_label+0x3f2>
 80080f6:	9a07      	ldr	r2, [sp, #28]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d01a      	beq.n	8008132 <lv_draw_label+0x3f2>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 80080fc:	4b69      	ldr	r3, [pc, #420]	; (80082a4 <lv_draw_label+0x564>)
 80080fe:	4431      	add	r1, r6
 8008100:	9805      	ldr	r0, [sp, #20]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4798      	blx	r3
 8008106:	4682      	mov	sl, r0
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8008108:	ab14      	add	r3, sp, #80	; 0x50
 800810a:	aa16      	add	r2, sp, #88	; 0x58
 800810c:	a915      	add	r1, sp, #84	; 0x54
 800810e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008110:	f00a ff66 	bl	8012fe0 <_lv_txt_encoded_letter_next_2>
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8008114:	7f63      	ldrb	r3, [r4, #29]
 8008116:	f013 0301 	ands.w	r3, r3, #1
 800811a:	f000 80a2 	beq.w	8008262 <lv_draw_label+0x522>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800811e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008120:	2a23      	cmp	r2, #35	; 0x23
 8008122:	d113      	bne.n	800814c <lv_draw_label+0x40c>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8008124:	f1b9 0f00 	cmp.w	r9, #0
 8008128:	d106      	bne.n	8008138 <lv_draw_label+0x3f8>
                        par_start = i;
 800812a:	9a14      	ldr	r2, [sp, #80]	; 0x50
                        cmd_state = CMD_STATE_PAR;
 800812c:	4699      	mov	r9, r3
                        par_start = i;
 800812e:	920c      	str	r2, [sp, #48]	; 0x30
                        continue;
 8008130:	e751      	b.n	8007fd6 <lv_draw_label+0x296>
            uint32_t logical_char_pos = 0;
 8008132:	f04f 0a00 	mov.w	sl, #0
 8008136:	e7e7      	b.n	8008108 <lv_draw_label+0x3c8>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 8008138:	f1b9 0f01 	cmp.w	r9, #1
 800813c:	d04a      	beq.n	80081d4 <lv_draw_label+0x494>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 800813e:	f1b9 0f02 	cmp.w	r9, #2
 8008142:	f000 8095 	beq.w	8008270 <lv_draw_label+0x530>
            color = dsc->color;
 8008146:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 800814a:	e047      	b.n	80081dc <lv_draw_label+0x49c>
                if(cmd_state == CMD_STATE_PAR) {
 800814c:	f1b9 0f01 	cmp.w	r9, #1
 8008150:	f040 8087 	bne.w	8008262 <lv_draw_label+0x522>
                    if(letter == ' ') {
 8008154:	2a20      	cmp	r2, #32
 8008156:	f47f af3e 	bne.w	8007fd6 <lv_draw_label+0x296>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800815a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800815c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800815e:	1a9b      	subs	r3, r3, r2
 8008160:	2b07      	cmp	r3, #7
 8008162:	d135      	bne.n	80081d0 <lv_draw_label+0x490>
    return memcpy(dst, src, len);
 8008164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008166:	2206      	movs	r2, #6
 8008168:	990c      	ldr	r1, [sp, #48]	; 0x30
 800816a:	a819      	add	r0, sp, #100	; 0x64
 800816c:	1859      	adds	r1, r3, r1
 800816e:	f012 fb00 	bl	801a772 <memcpy>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 8008172:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8008176:	f016 fbad 	bl	801e8d4 <hex_char_to_num>
 800817a:	4601      	mov	r1, r0
 800817c:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
 8008180:	f016 fba8 	bl	801e8d4 <hex_char_to_num>
 8008184:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 8008188:	f89d 0066 	ldrb.w	r0, [sp, #102]	; 0x66
 800818c:	f016 fba2 	bl	801e8d4 <hex_char_to_num>
 8008190:	4681      	mov	r9, r0
 8008192:	f89d 0067 	ldrb.w	r0, [sp, #103]	; 0x67
 8008196:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800819a:	f016 fb9b 	bl	801e8d4 <hex_char_to_num>
 800819e:	eb00 1909 	add.w	r9, r0, r9, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 80081a2:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 80081a6:	f016 fb95 	bl	801e8d4 <hex_char_to_num>
 80081aa:	4682      	mov	sl, r0
 80081ac:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
 80081b0:	f3c9 0985 	ubfx	r9, r9, #2, #6
 80081b4:	f016 fb8e 	bl	801e8d4 <hex_char_to_num>
 80081b8:	eb00 130a 	add.w	r3, r0, sl, lsl #4
 80081bc:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80081c0:	ea43 1349 	orr.w	r3, r3, r9, lsl #5
 80081c4:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 80081c8:	f04f 0902 	mov.w	r9, #2
                            recolor.full = dsc->color.full;
 80081cc:	930d      	str	r3, [sp, #52]	; 0x34
 80081ce:	e702      	b.n	8007fd6 <lv_draw_label+0x296>
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	e7f9      	b.n	80081c8 <lv_draw_label+0x488>
            color = dsc->color;
 80081d4:	f8b4 800c 	ldrh.w	r8, [r4, #12]
                        cmd_state = CMD_STATE_WAIT;
 80081d8:	f04f 0900 	mov.w	r9, #0
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 80081dc:	9804      	ldr	r0, [sp, #16]
 80081de:	e9dd 1215 	ldrd	r1, r2, [sp, #84]	; 0x54
 80081e2:	f01b ff5c 	bl	802409e <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 80081e6:	9a06      	ldr	r2, [sp, #24]
 80081e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 80081ec:	900b      	str	r0, [sp, #44]	; 0x2c
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d021      	beq.n	8008236 <lv_draw_label+0x4f6>
 80081f2:	9a07      	ldr	r2, [sp, #28]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d01e      	beq.n	8008236 <lv_draw_label+0x4f6>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 80081f8:	9b06      	ldr	r3, [sp, #24]
 80081fa:	4553      	cmp	r3, sl
 80081fc:	d81b      	bhi.n	8008236 <lv_draw_label+0x4f6>
 80081fe:	4552      	cmp	r2, sl
 8008200:	d919      	bls.n	8008236 <lv_draw_label+0x4f6>
                    sel_coords.x1 = pos.x;
 8008202:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8008206:	8aa1      	ldrh	r1, [r4, #20]
                    sel_coords.x1 = pos.x;
 8008208:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800820c:	3b01      	subs	r3, #1
                    sel_coords.y1 = pos.y;
 800820e:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8008212:	440b      	add	r3, r1
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 8008214:	a926      	add	r1, sp, #152	; 0x98
                    sel_coords.y1 = pos.y;
 8008216:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    sel_coords.y2 = pos.y + line_height - 1;
 800821a:	3a01      	subs	r2, #1
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800821c:	4403      	add	r3, r0
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 800821e:	4658      	mov	r0, fp
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8008220:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
                    sel_coords.y2 = pos.y + line_height - 1;
 8008224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008226:	441a      	add	r2, r3
 8008228:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 800822c:	aa19      	add	r2, sp, #100	; 0x64
 800822e:	f017 f8ee 	bl	801f40e <lv_draw_rect>
                    color = dsc->sel_color;
 8008232:	f8b4 800e 	ldrh.w	r8, [r4, #14]
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 8008236:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008238:	aa13      	add	r2, sp, #76	; 0x4c
 800823a:	a91e      	add	r1, sp, #120	; 0x78
 800823c:	4658      	mov	r0, fp
            dsc_mod.color = color;
 800823e:	f8ad 8084 	strh.w	r8, [sp, #132]	; 0x84
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 8008242:	f016 fb59 	bl	801e8f8 <lv_draw_letter>
            if(letter_w > 0) {
 8008246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008248:	2b00      	cmp	r3, #0
 800824a:	f43f aec4 	beq.w	8007fd6 <lv_draw_label+0x296>
                pos.x += letter_w + dsc->letter_space;
 800824e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8008252:	8aa2      	ldrh	r2, [r4, #20]
 8008254:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8008258:	4413      	add	r3, r2
 800825a:	449a      	add	sl, r3
 800825c:	f8ad a04c 	strh.w	sl, [sp, #76]	; 0x4c
 8008260:	e6b9      	b.n	8007fd6 <lv_draw_label+0x296>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8008262:	f1b9 0f02 	cmp.w	r9, #2
 8008266:	f47f af6e 	bne.w	8008146 <lv_draw_label+0x406>
 800826a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800826e:	e7b5      	b.n	80081dc <lv_draw_label+0x49c>
                        cmd_state = CMD_STATE_WAIT;
 8008270:	f04f 0900 	mov.w	r9, #0
 8008274:	e6af      	b.n	8007fd6 <lv_draw_label+0x296>
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 8008276:	9b08      	ldr	r3, [sp, #32]
 8008278:	2b03      	cmp	r3, #3
 800827a:	f47f af26 	bne.w	80080ca <lv_draw_label+0x38a>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800827e:	7f63      	ldrb	r3, [r4, #29]
 8008280:	4630      	mov	r0, r6
 8008282:	9a04      	ldr	r2, [sp, #16]
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800828a:	f01d faca 	bl	8025822 <lv_txt_get_width>
 800828e:	88ab      	ldrh	r3, [r5, #4]
 8008290:	882a      	ldrh	r2, [r5, #0]
 8008292:	3301      	adds	r3, #1
 8008294:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 8008296:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800829a:	b21b      	sxth	r3, r3
 800829c:	1a1b      	subs	r3, r3, r0
 800829e:	4413      	add	r3, r2
 80082a0:	e711      	b.n	80080c6 <lv_draw_label+0x386>
 80082a2:	bf00      	nop
 80082a4:	240000f4 	.word	0x240000f4

080082a8 <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
 80082a8:	2300      	movs	r3, #0
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 80082aa:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <lv_draw_mask_add+0x28>)
{
 80082ac:	b530      	push	{r4, r5, lr}
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 80082ae:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80082b2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80082b6:	b12d      	cbz	r5, 80082c4 <lv_draw_mask_add+0x1c>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80082b8:	3301      	adds	r3, #1
 80082ba:	2b10      	cmp	r3, #16
 80082bc:	d1f7      	bne.n	80082ae <lv_draw_mask_add+0x6>
    }

    if(i >= _LV_MASK_MAX_NUM) {
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
        return LV_MASK_ID_INV;
 80082be:	f04f 30ff 	mov.w	r0, #4294967295

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;

    return i;
}
 80082c2:	bd30      	pop	{r4, r5, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 80082c4:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    return i;
 80082c8:	b2d8      	uxtb	r0, r3
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 80082ca:	6061      	str	r1, [r4, #4]
    return i;
 80082cc:	e7f9      	b.n	80082c2 <lv_draw_mask_add+0x1a>
 80082ce:	bf00      	nop
 80082d0:	2400120c 	.word	0x2400120c

080082d4 <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
 80082d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80082d8:	4607      	mov	r7, r0
 80082da:	4688      	mov	r8, r1
 80082dc:	4691      	mov	r9, r2
 80082de:	469a      	mov	sl, r3
    bool changed = false;
    _lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 80082e0:	4e0b      	ldr	r6, [pc, #44]	; (8008310 <lv_draw_mask_apply+0x3c>)
    bool changed = false;
 80082e2:	2400      	movs	r4, #0

    while(m->param) {
 80082e4:	6835      	ldr	r5, [r6, #0]
 80082e6:	b925      	cbnz	r5, 80082f2 <lv_draw_mask_apply+0x1e>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;

        m++;
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 80082e8:	3401      	adds	r4, #1
 80082ea:	b2e0      	uxtb	r0, r4
}
 80082ec:	b002      	add	sp, #8
 80082ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 80082f2:	9500      	str	r5, [sp, #0]
 80082f4:	4653      	mov	r3, sl
 80082f6:	682d      	ldr	r5, [r5, #0]
 80082f8:	464a      	mov	r2, r9
 80082fa:	4641      	mov	r1, r8
 80082fc:	4638      	mov	r0, r7
 80082fe:	47a8      	blx	r5
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8008300:	2800      	cmp	r0, #0
 8008302:	d0f3      	beq.n	80082ec <lv_draw_mask_apply+0x18>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 8008304:	2802      	cmp	r0, #2
        m++;
 8008306:	f106 0608 	add.w	r6, r6, #8
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800830a:	bf08      	it	eq
 800830c:	2401      	moveq	r4, #1
        m++;
 800830e:	e7e9      	b.n	80082e4 <lv_draw_mask_apply+0x10>
 8008310:	2400120c 	.word	0x2400120c

08008314 <lv_draw_mask_remove_id>:
 */
void * lv_draw_mask_remove_id(int16_t id)
{
    _lv_draw_mask_common_dsc_t * p = NULL;

    if(id != LV_MASK_ID_INV) {
 8008314:	1c42      	adds	r2, r0, #1
{
 8008316:	4603      	mov	r3, r0
 8008318:	f04f 0100 	mov.w	r1, #0
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800831c:	bf1b      	ittet	ne
 800831e:	4a05      	ldrne	r2, [pc, #20]	; (8008334 <lv_draw_mask_remove_id+0x20>)
 8008320:	f852 0030 	ldrne.w	r0, [r2, r0, lsl #3]
    _lv_draw_mask_common_dsc_t * p = NULL;
 8008324:	4608      	moveq	r0, r1
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 8008326:	f842 1033 	strne.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800832a:	bf1c      	itt	ne
 800832c:	eb02 02c3 	addne.w	r2, r2, r3, lsl #3
 8008330:	6051      	strne	r1, [r2, #4]
    }

    return p;
}
 8008332:	4770      	bx	lr
 8008334:	2400120c 	.word	0x2400120c

08008338 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	2400      	movs	r4, #0
 800833c:	4606      	mov	r6, r0
 800833e:	4d07      	ldr	r5, [pc, #28]	; (800835c <lv_draw_mask_remove_custom+0x24>)
    _lv_draw_mask_common_dsc_t * p = NULL;
 8008340:	4627      	mov	r7, r4
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 8008342:	686b      	ldr	r3, [r5, #4]
 8008344:	42b3      	cmp	r3, r6
 8008346:	d103      	bne.n	8008350 <lv_draw_mask_remove_custom+0x18>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
            lv_draw_mask_remove_id(i);
 8008348:	b220      	sxth	r0, r4
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800834a:	682f      	ldr	r7, [r5, #0]
            lv_draw_mask_remove_id(i);
 800834c:	f7ff ffe2 	bl	8008314 <lv_draw_mask_remove_id>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8008350:	3401      	adds	r4, #1
 8008352:	3508      	adds	r5, #8
 8008354:	2c10      	cmp	r4, #16
 8008356:	d1f4      	bne.n	8008342 <lv_draw_mask_remove_custom+0xa>
        }
    }
    return p;
}
 8008358:	4638      	mov	r0, r7
 800835a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800835c:	2400120c 	.word	0x2400120c

08008360 <_lv_draw_mask_cleanup>:
        lv_mem_free(poly_p->cfg.points);
    }
}

void _lv_draw_mask_cleanup(void)
{
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4c07      	ldr	r4, [pc, #28]	; (8008380 <_lv_draw_mask_cleanup+0x20>)
 8008364:	2500      	movs	r5, #0
    uint8_t i;
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 8008366:	6820      	ldr	r0, [r4, #0]
 8008368:	b108      	cbz	r0, 800836e <_lv_draw_mask_cleanup+0xe>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 800836a:	f00a f9f3 	bl	8012754 <lv_mem_free>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800836e:	3507      	adds	r5, #7
        }
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 8008370:	4620      	mov	r0, r4
 8008372:	211c      	movs	r1, #28
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8008374:	341c      	adds	r4, #28
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 8008376:	f016 fb34 	bl	801e9e2 <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800837a:	2d1c      	cmp	r5, #28
 800837c:	d1f3      	bne.n	8008366 <_lv_draw_mask_cleanup+0x6>
    }
}
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	2400128c 	.word	0x2400128c

08008384 <lv_draw_mask_is_any>:
    }
    return cnt;
}

bool lv_draw_mask_is_any(const lv_area_t * a)
{
 8008384:	b570      	push	{r4, r5, r6, lr}
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 8008386:	4e13      	ldr	r6, [pc, #76]	; (80083d4 <lv_draw_mask_is_any+0x50>)
 8008388:	4604      	mov	r4, r0
 800838a:	6833      	ldr	r3, [r6, #0]
 800838c:	b918      	cbnz	r0, 8008396 <lv_draw_mask_is_any+0x12>
 800838e:	1e18      	subs	r0, r3, #0
 8008390:	bf18      	it	ne
 8008392:	2001      	movne	r0, #1
        }
    }

    return false;

}
 8008394:	bd70      	pop	{r4, r5, r6, pc}
 8008396:	2500      	movs	r5, #0
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8008398:	f856 3035 	ldr.w	r3, [r6, r5, lsl #3]
        if(comm_param == NULL) continue;
 800839c:	b923      	cbnz	r3, 80083a8 <lv_draw_mask_is_any+0x24>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800839e:	3501      	adds	r5, #1
 80083a0:	2d10      	cmp	r5, #16
 80083a2:	d1f9      	bne.n	8008398 <lv_draw_mask_is_any+0x14>
    return false;
 80083a4:	2000      	movs	r0, #0
 80083a6:	e7f5      	b.n	8008394 <lv_draw_mask_is_any+0x10>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
 80083a8:	791a      	ldrb	r2, [r3, #4]
 80083aa:	2a02      	cmp	r2, #2
 80083ac:	d001      	beq.n	80083b2 <lv_draw_mask_is_any+0x2e>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 80083ae:	2001      	movs	r0, #1
 80083b0:	e7f0      	b.n	8008394 <lv_draw_mask_is_any+0x10>
 80083b2:	f103 0108 	add.w	r1, r3, #8
 80083b6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
            if(radius_param->cfg.outer) {
 80083ba:	7c9b      	ldrb	r3, [r3, #18]
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 80083bc:	4620      	mov	r0, r4
            if(radius_param->cfg.outer) {
 80083be:	07db      	lsls	r3, r3, #31
 80083c0:	d504      	bpl.n	80083cc <lv_draw_mask_is_any+0x48>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 80083c2:	f01c f8d2 	bl	802456a <_lv_area_is_out>
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d1e9      	bne.n	800839e <lv_draw_mask_is_any+0x1a>
 80083ca:	e7f0      	b.n	80083ae <lv_draw_mask_is_any+0x2a>
 80083cc:	f01c f884 	bl	80244d8 <_lv_area_is_in>
 80083d0:	e7f9      	b.n	80083c6 <lv_draw_mask_is_any+0x42>
 80083d2:	bf00      	nop
 80083d4:	2400120c 	.word	0x2400120c

080083d8 <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
 80083d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083dc:	4615      	mov	r5, r2
 80083de:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 80083e2:	460f      	mov	r7, r1
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 80083e4:	212c      	movs	r1, #44	; 0x2c
{
 80083e6:	4604      	mov	r4, r0
 80083e8:	4698      	mov	r8, r3
 80083ea:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 80083ee:	f016 faf8 	bl	801e9e2 <lv_memset_00>

    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 80083f2:	42b5      	cmp	r5, r6
 80083f4:	d106      	bne.n	8008404 <lv_draw_mask_line_points_init+0x2c>
 80083f6:	f1b9 0f03 	cmp.w	r9, #3
 80083fa:	d10b      	bne.n	8008414 <lv_draw_mask_line_points_init+0x3c>
        p1y--;
 80083fc:	3d01      	subs	r5, #1
        p2y--;
 80083fe:	3e01      	subs	r6, #1
        p1y--;
 8008400:	b22d      	sxth	r5, r5
        p2y--;
 8008402:	b236      	sxth	r6, r6
    }

    if(p1y > p2y) {
 8008404:	42b5      	cmp	r5, r6
 8008406:	dd05      	ble.n	8008414 <lv_draw_mask_line_points_init+0x3c>
 8008408:	462a      	mov	r2, r5
 800840a:	4635      	mov	r5, r6
 800840c:	4616      	mov	r6, r2
 800840e:	463a      	mov	r2, r7
        lv_coord_t t;
        t = p2x;
        p2x = p1x;
        p1x = t;
 8008410:	4647      	mov	r7, r8
        p2x = p1x;
 8008412:	4690      	mov	r8, r2

    param->cfg.p1.x = p1x;
    param->cfg.p1.y = p1y;
    param->cfg.p2.x = p2x;
    param->cfg.p2.y = p2y;
    param->cfg.side = side;
 8008414:	7c22      	ldrb	r2, [r4, #16]

    param->origo.x = p1x;
    param->origo.y = p1y;
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8008416:	eba8 0307 	sub.w	r3, r8, r7
    param->cfg.p2.y = p2y;
 800841a:	81e6      	strh	r6, [r4, #14]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800841c:	1b76      	subs	r6, r6, r5
    param->cfg.side = side;
 800841e:	f369 0201 	bfi	r2, r9, #0, #2
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8008422:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
    param->yx_steep = 0;
    param->xy_steep = 0;
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8008426:	4833      	ldr	r0, [pc, #204]	; (80084f4 <lv_draw_mask_line_points_init+0x11c>)
    param->cfg.side = side;
 8008428:	7422      	strb	r2, [r4, #16]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800842a:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
 800842e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
    param->cfg.p1.x = p1x;
 8008432:	8127      	strh	r7, [r4, #8]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8008434:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    param->cfg.p1.y = p1y;
 8008438:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
 800843a:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800843e:	4291      	cmp	r1, r2
 8008440:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    param->origo.x = p1x;
 8008444:	8267      	strh	r7, [r4, #18]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8008446:	bfd4      	ite	le
 8008448:	2100      	movle	r1, #0
 800844a:	2101      	movgt	r1, #1
    param->origo.y = p1y;
 800844c:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800844e:	f361 0200 	bfi	r2, r1, #0, #1
    param->yx_steep = 0;
 8008452:	2100      	movs	r1, #0
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8008454:	6020      	str	r0, [r4, #0]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8008456:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;

    int32_t dx = p2x - p1x;
    int32_t dy = p2y - p1y;

    if(param->flat) {
 800845a:	07d2      	lsls	r2, r2, #31
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 800845c:	7121      	strb	r1, [r4, #4]
    param->xy_steep = 0;
 800845e:	e9c4 1106 	strd	r1, r1, [r4, #24]
    if(param->flat) {
 8008462:	d525      	bpl.n	80084b0 <lv_draw_mask_line_points_init+0xd8>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
 8008464:	b133      	cbz	r3, 8008474 <lv_draw_mask_line_points_init+0x9c>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 8008466:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800846a:	fb92 f2f3 	sdiv	r2, r2, r3
            param->yx_steep = (m * dy) >> 10;
 800846e:	4372      	muls	r2, r6
 8008470:	1292      	asrs	r2, r2, #10
 8008472:	61e2      	str	r2, [r4, #28]
        }

        if(dy) {
 8008474:	b136      	cbz	r6, 8008484 <lv_draw_mask_line_points_init+0xac>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8008476:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800847a:	fb92 f2f6 	sdiv	r2, r2, r6
            param->xy_steep = (m * dx) >> 10;
 800847e:	4353      	muls	r3, r2
 8008480:	129b      	asrs	r3, r3, #10
 8008482:	61a3      	str	r3, [r4, #24]
        }
        param->steep = param->yx_steep;
 8008484:	69e0      	ldr	r0, [r4, #28]
            param->yx_steep = (m * dy) >> 10;
        }
        param->steep = param->xy_steep;
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8008486:	7c23      	ldrb	r3, [r4, #16]
 8008488:	1081      	asrs	r1, r0, #2
 800848a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800848e:	f013 0303 	ands.w	r3, r3, #3
        param->steep = param->yx_steep;
 8008492:	6220      	str	r0, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8008494:	d024      	beq.n	80084e0 <lv_draw_mask_line_points_init+0x108>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8008496:	2b01      	cmp	r3, #1
 8008498:	d022      	beq.n	80084e0 <lv_draw_mask_line_points_init+0x108>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 800849a:	2b02      	cmp	r3, #2
 800849c:	d11a      	bne.n	80084d4 <lv_draw_mask_line_points_init+0xfc>
        if(param->steep > 0) param->inv = 1;
 800849e:	2800      	cmp	r0, #0
 80084a0:	dd1d      	ble.n	80084de <lv_draw_mask_line_points_init+0x106>
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 80084a2:	f042 0202 	orr.w	r2, r2, #2
 80084a6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
        if(param->steep > 0) param->inv = 0;
        else param->inv = 1;
    }

    param->spx = param->steep >> 2;
 80084aa:	6261      	str	r1, [r4, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
}
 80084ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(dy) {
 80084b0:	b136      	cbz	r6, 80084c0 <lv_draw_mask_line_points_init+0xe8>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 80084b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80084b6:	fb92 f2f6 	sdiv	r2, r2, r6
            param->xy_steep = (m * dx) >> 10;
 80084ba:	435a      	muls	r2, r3
 80084bc:	1292      	asrs	r2, r2, #10
 80084be:	61a2      	str	r2, [r4, #24]
        if(dx) {
 80084c0:	b133      	cbz	r3, 80084d0 <lv_draw_mask_line_points_init+0xf8>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 80084c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80084c6:	fb92 f3f3 	sdiv	r3, r2, r3
            param->yx_steep = (m * dy) >> 10;
 80084ca:	4373      	muls	r3, r6
 80084cc:	129b      	asrs	r3, r3, #10
 80084ce:	61e3      	str	r3, [r4, #28]
        param->steep = param->xy_steep;
 80084d0:	69a0      	ldr	r0, [r4, #24]
 80084d2:	e7d8      	b.n	8008486 <lv_draw_mask_line_points_init+0xae>
        if(param->steep > 0) param->inv = 0;
 80084d4:	2800      	cmp	r0, #0
 80084d6:	dd0b      	ble.n	80084f0 <lv_draw_mask_line_points_init+0x118>
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 80084d8:	f36f 0241 	bfc	r2, #1, #1
 80084dc:	e7e3      	b.n	80084a6 <lv_draw_mask_line_points_init+0xce>
 80084de:	2300      	movs	r3, #0
 80084e0:	f363 0241 	bfi	r2, r3, #1, #1
    if(param->steep < 0) param->spx = -param->spx;
 80084e4:	2800      	cmp	r0, #0
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 80084e6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    if(param->steep < 0) param->spx = -param->spx;
 80084ea:	bfb8      	it	lt
 80084ec:	4249      	neglt	r1, r1
 80084ee:	e7dc      	b.n	80084aa <lv_draw_mask_line_points_init+0xd2>
 80084f0:	2301      	movs	r3, #1
 80084f2:	e7f5      	b.n	80084e0 <lv_draw_mask_line_points_init+0x108>
 80084f4:	0801ea07 	.word	0x0801ea07

080084f8 <lv_draw_mask_angle_init>:
 * @param start_angle start angle in degrees. 0 deg on the right, 90 deg, on the bottom
 * @param end_angle end angle
 */
void lv_draw_mask_angle_init(lv_draw_mask_angle_param_t * param, lv_coord_t vertex_x, lv_coord_t vertex_y,
                             lv_coord_t start_angle, lv_coord_t end_angle)
{
 80084f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    lv_draw_mask_line_side_t end_side;

    /*Constrain the input angles*/
    if(start_angle < 0)
        start_angle = 0;
    else if(start_angle > 359)
 80084fc:	f240 1567 	movw	r5, #359	; 0x167
{
 8008500:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8008504:	4617      	mov	r7, r2
 8008506:	461a      	mov	r2, r3
 8008508:	42ab      	cmp	r3, r5
 800850a:	460e      	mov	r6, r1
 800850c:	4604      	mov	r4, r0
 800850e:	bfa8      	it	ge
 8008510:	462b      	movge	r3, r5
 8008512:	4565      	cmp	r5, ip
 8008514:	bfa8      	it	ge
 8008516:	4665      	movge	r5, ip
 8008518:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        start_angle = 359;

    if(end_angle < 0)
 800851c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
        end_angle = 0;
    else if(end_angle > 359)
        end_angle = 359;

    if(end_angle < start_angle) {
 8008520:	429d      	cmp	r5, r3
        param->delta_deg = 360 - start_angle + end_angle;
 8008522:	b2a9      	uxth	r1, r5
    if(end_angle < start_angle) {
 8008524:	da30      	bge.n	8008588 <lv_draw_mask_angle_init+0x90>
        param->delta_deg = 360 - start_angle + end_angle;
 8008526:	f501 70b4 	add.w	r0, r1, #360	; 0x168
 800852a:	1ac0      	subs	r0, r0, r3
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;

    LV_ASSERT_MSG(start_angle >= 0 && start_angle <= 360, "Unexpected start angle");

    if(start_angle >= 0 && start_angle < 180) {
 800852c:	2ab3      	cmp	r2, #179	; 0xb3
        param->delta_deg = LV_ABS(end_angle - start_angle);
 800852e:	b280      	uxth	r0, r0
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 8008530:	f04f 0801 	mov.w	r8, #1
    param->cfg.start_angle = start_angle;
 8008534:	81a3      	strh	r3, [r4, #12]
    if(start_angle >= 0 && start_angle < 180) {
 8008536:	bfd4      	ite	le
 8008538:	2200      	movle	r2, #0
 800853a:	2201      	movgt	r2, #1
 800853c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    else
        start_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/

    LV_ASSERT_MSG(end_angle >= 0 && start_angle <= 360, "Unexpected end angle");

    if(end_angle >= 0 && end_angle < 180) {
 8008540:	f1bc 0fb3 	cmp.w	ip, #179	; 0xb3
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 8008544:	4813      	ldr	r0, [pc, #76]	; (8008594 <lv_draw_mask_angle_init+0x9c>)
    param->cfg.end_angle = end_angle;
 8008546:	81e5      	strh	r5, [r4, #14]
    param->cfg.vertex_p.x = vertex_x;
 8008548:	8126      	strh	r6, [r4, #8]
    param->cfg.vertex_p.y = vertex_y;
 800854a:	8167      	strh	r7, [r4, #10]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 800854c:	6020      	str	r0, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 800854e:	f884 8004 	strb.w	r8, [r4, #4]
    if(end_angle >= 0 && end_angle < 180) {
 8008552:	dd06      	ble.n	8008562 <lv_draw_mask_angle_init+0x6a>
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT;
    }
    else if(end_angle >= 180 && end_angle < 360) {
 8008554:	39b4      	subs	r1, #180	; 0xb4
 8008556:	29b3      	cmp	r1, #179	; 0xb3
 8008558:	bf94      	ite	ls
 800855a:	f04f 0800 	movls.w	r8, #0
 800855e:	f04f 0801 	movhi.w	r8, #1
        end_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
    }
    else
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/

    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 8008562:	4631      	mov	r1, r6
 8008564:	f104 0010 	add.w	r0, r4, #16
 8008568:	9200      	str	r2, [sp, #0]
 800856a:	463a      	mov	r2, r7
 800856c:	f016 ff28 	bl	801f3c0 <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 8008570:	462b      	mov	r3, r5
 8008572:	463a      	mov	r2, r7
 8008574:	4631      	mov	r1, r6
 8008576:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800857a:	f8cd 8020 	str.w	r8, [sp, #32]
}
 800857e:	b002      	add	sp, #8
 8008580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 8008584:	f016 bf1c 	b.w	801f3c0 <lv_draw_mask_line_angle_init>
        param->delta_deg = LV_ABS(end_angle - start_angle);
 8008588:	1ae8      	subs	r0, r5, r3
 800858a:	2800      	cmp	r0, #0
 800858c:	bfb8      	it	lt
 800858e:	4240      	neglt	r0, r0
 8008590:	e7cc      	b.n	800852c <lv_draw_mask_angle_init+0x34>
 8008592:	bf00      	nop
 8008594:	0801ee13 	.word	0x0801ee13

08008598 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
 8008598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859c:	4690      	mov	r8, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800859e:	88ca      	ldrh	r2, [r1, #6]
 80085a0:	4607      	mov	r7, r0
 80085a2:	8848      	ldrh	r0, [r1, #2]
 80085a4:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80085a6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80085aa:	b08f      	sub	sp, #60	; 0x3c
 80085ac:	2600      	movs	r6, #0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80085ae:	1a12      	subs	r2, r2, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80085b0:	8888      	ldrh	r0, [r1, #4]
    dest->x1 = src->x1;
 80085b2:	813c      	strh	r4, [r7, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80085b4:	3001      	adds	r0, #1
    lv_coord_t w = lv_area_get_width(rect);
    lv_coord_t h = lv_area_get_height(rect);
    int32_t short_side = LV_MIN(w, h);
 80085b6:	b212      	sxth	r2, r2
 80085b8:	1b00      	subs	r0, r0, r4
 80085ba:	b200      	sxth	r0, r0
 80085bc:	4282      	cmp	r2, r0
 80085be:	bfa8      	it	ge
 80085c0:	4602      	movge	r2, r0
    if(radius > short_side >> 1) radius = short_side >> 1;
 80085c2:	ebb8 0f62 	cmp.w	r8, r2, asr #1
 80085c6:	ea4f 0062 	mov.w	r0, r2, asr #1
    dest->y1 = src->y1;
 80085ca:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80085ce:	817a      	strh	r2, [r7, #10]
 80085d0:	bfc8      	it	gt
 80085d2:	fa0f f880 	sxthgt.w	r8, r0
    dest->x2 = src->x2;
 80085d6:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
    if(radius < 0) radius = 0;
 80085da:	ea28 75e8 	bic.w	r5, r8, r8, asr #31
    param->cfg.radius = radius;
    param->cfg.outer = inv ? 1 : 0;
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;

    if(radius == 0) {
 80085de:	f1b8 0f00 	cmp.w	r8, #0
 80085e2:	81ba      	strh	r2, [r7, #12]
    dest->y2 = src->y2;
 80085e4:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
    param->cfg.radius = radius;
 80085e8:	823d      	strh	r5, [r7, #16]
 80085ea:	81fa      	strh	r2, [r7, #14]
    param->cfg.outer = inv ? 1 : 0;
 80085ec:	7cba      	ldrb	r2, [r7, #18]
 80085ee:	f363 0200 	bfi	r2, r3, #0, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 80085f2:	4b9f      	ldr	r3, [pc, #636]	; (8008870 <lv_draw_mask_radius_init+0x2d8>)
 80085f4:	603b      	str	r3, [r7, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 80085f6:	f04f 0302 	mov.w	r3, #2
    param->cfg.outer = inv ? 1 : 0;
 80085fa:	74ba      	strb	r2, [r7, #18]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 80085fc:	713b      	strb	r3, [r7, #4]
    if(radius == 0) {
 80085fe:	dc03      	bgt.n	8008608 <lv_draw_mask_radius_init+0x70>
        param->circle = NULL;
 8008600:	617e      	str	r6, [r7, #20]
    }

    param->circle = entry;

    circ_calc_aa4(param->circle, radius);
}
 8008602:	b00f      	add	sp, #60	; 0x3c
 8008604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008608:	4b9a      	ldr	r3, [pc, #616]	; (8008874 <lv_draw_mask_radius_init+0x2dc>)
    if(radius == 0) {
 800860a:	4619      	mov	r1, r3
 800860c:	461a      	mov	r2, r3
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 800860e:	f9b1 0018 	ldrsh.w	r0, [r1, #24]
 8008612:	42a8      	cmp	r0, r5
 8008614:	d117      	bne.n	8008646 <lv_draw_mask_radius_init+0xae>
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 8008616:	201c      	movs	r0, #28
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 8008618:	f1b8 0f0f 	cmp.w	r8, #15
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 800861c:	fb00 2306 	mla	r3, r0, r6, r2
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 8008620:	bfcc      	ite	gt
 8008622:	f345 150f 	sbfxgt	r5, r5, #4, #16
 8008626:	2501      	movle	r5, #1
 8008628:	fb00 2206 	mla	r2, r0, r6, r2
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 800862c:	6959      	ldr	r1, [r3, #20]
 800862e:	3101      	adds	r1, #1
 8008630:	6159      	str	r1, [r3, #20]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	442b      	add	r3, r5
 8008636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800863a:	bfa8      	it	ge
 800863c:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8008640:	6113      	str	r3, [r2, #16]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 8008642:	617a      	str	r2, [r7, #20]
            return;
 8008644:	e7dd      	b.n	8008602 <lv_draw_mask_radius_init+0x6a>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8008646:	3601      	adds	r6, #1
 8008648:	311c      	adds	r1, #28
 800864a:	2e04      	cmp	r6, #4
 800864c:	d1df      	bne.n	800860e <lv_draw_mask_radius_init+0x76>
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 800864e:	2400      	movs	r4, #0
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 8008650:	695a      	ldr	r2, [r3, #20]
 8008652:	b92a      	cbnz	r2, 8008660 <lv_draw_mask_radius_init+0xc8>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 8008654:	b17c      	cbz	r4, 8008676 <lv_draw_mask_radius_init+0xde>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 8008656:	6919      	ldr	r1, [r3, #16]
 8008658:	6922      	ldr	r2, [r4, #16]
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 800865a:	4291      	cmp	r1, r2
 800865c:	bfb8      	it	lt
 800865e:	461c      	movlt	r4, r3
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8008660:	3e01      	subs	r6, #1
 8008662:	f103 031c 	add.w	r3, r3, #28
 8008666:	d1f3      	bne.n	8008650 <lv_draw_mask_radius_init+0xb8>
    if(!entry) {
 8008668:	b9ec      	cbnz	r4, 80086a6 <lv_draw_mask_radius_init+0x10e>
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 800866a:	201c      	movs	r0, #28
 800866c:	f00a f854 	bl	8012718 <lv_mem_alloc>
        LV_ASSERT_MALLOC(entry);
 8008670:	4604      	mov	r4, r0
 8008672:	b910      	cbnz	r0, 800867a <lv_draw_mask_radius_init+0xe2>
 8008674:	e7fe      	b.n	8008674 <lv_draw_mask_radius_init+0xdc>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 8008676:	461c      	mov	r4, r3
 8008678:	e7f2      	b.n	8008660 <lv_draw_mask_radius_init+0xc8>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 800867a:	211c      	movs	r1, #28
 800867c:	f016 f9b1 	bl	801e9e2 <lv_memset_00>
        entry->life = -1;
 8008680:	f04f 33ff 	mov.w	r3, #4294967295
        CIRCLE_CACHE_AGING(entry->life, radius);
 8008684:	6123      	str	r3, [r4, #16]
    param->circle = entry;
 8008686:	617c      	str	r4, [r7, #20]
{
    if(radius == 0) return;
    c->radius = radius;

    /*Allocate buffers*/
    if(c->buf) lv_mem_free(c->buf);
 8008688:	6820      	ldr	r0, [r4, #0]
    c->radius = radius;
 800868a:	8325      	strh	r5, [r4, #24]
    if(c->buf) lv_mem_free(c->buf);
 800868c:	b108      	cbz	r0, 8008692 <lv_draw_mask_radius_init+0xfa>
 800868e:	f00a f861 	bl	8012754 <lv_mem_free>

    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 8008692:	2006      	movs	r0, #6
 8008694:	f105 0901 	add.w	r9, r5, #1
 8008698:	fb05 0000 	mla	r0, r5, r0, r0
 800869c:	f00a f83c 	bl	8012718 <lv_mem_alloc>
 80086a0:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MALLOC(c->buf);
 80086a2:	b980      	cbnz	r0, 80086c6 <lv_draw_mask_radius_init+0x12e>
 80086a4:	e7fe      	b.n	80086a4 <lv_draw_mask_radius_init+0x10c>
        entry->used_cnt++;
 80086a6:	6963      	ldr	r3, [r4, #20]
        CIRCLE_CACHE_AGING(entry->life, radius);
 80086a8:	f1b8 0f0f 	cmp.w	r8, #15
        entry->used_cnt++;
 80086ac:	f103 0301 	add.w	r3, r3, #1
 80086b0:	6163      	str	r3, [r4, #20]
        CIRCLE_CACHE_AGING(entry->life, radius);
 80086b2:	bfcc      	ite	gt
 80086b4:	f345 130f 	sbfxgt	r3, r5, #4, #16
 80086b8:	2301      	movle	r3, #1
 80086ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086be:	bfa8      	it	ge
 80086c0:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 80086c4:	e7de      	b.n	8008684 <lv_draw_mask_radius_init+0xec>
    c->cir_opa = c->buf;
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 80086c6:	eb00 0345 	add.w	r3, r0, r5, lsl #1
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 80086ca:	2204      	movs	r2, #4

    /*Special case, handle manually*/
    if(radius == 1) {
 80086cc:	f1b8 0f01 	cmp.w	r8, #1
    c->cir_opa = c->buf;
 80086d0:	6060      	str	r0, [r4, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 80086d2:	f103 0302 	add.w	r3, r3, #2
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 80086d6:	eb02 0785 	add.w	r7, r2, r5, lsl #2
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 80086da:	60e3      	str	r3, [r4, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 80086dc:	eb00 0307 	add.w	r3, r0, r7
 80086e0:	60a3      	str	r3, [r4, #8]
    if(radius == 1) {
 80086e2:	d10a      	bne.n	80086fa <lv_draw_mask_radius_init+0x162>
        c->cir_opa[0] = 180;
 80086e4:	23b4      	movs	r3, #180	; 0xb4
 80086e6:	7003      	strb	r3, [r0, #0]
        c->opa_start_on_y[0] = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	68e2      	ldr	r2, [r4, #12]
 80086ec:	8013      	strh	r3, [r2, #0]
        c->opa_start_on_y[1] = 1;
 80086ee:	68e2      	ldr	r2, [r4, #12]
 80086f0:	f8a2 8002 	strh.w	r8, [r2, #2]
        c->x_start_on_y[0] = 0;
 80086f4:	68a2      	ldr	r2, [r4, #8]
 80086f6:	8013      	strh	r3, [r2, #0]
        return;
 80086f8:	e783      	b.n	8008602 <lv_draw_mask_radius_init+0x6a>
    }

    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 80086fa:	ea4f 00c9 	mov.w	r0, r9, lsl #3
 80086fe:	f00a f85b 	bl	80127b8 <lv_mem_buf_get>
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 8008702:	19c2      	adds	r2, r0, r7

    uint32_t y_8th_cnt = 0;
    lv_point_t cp;
    lv_coord_t tmp;
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 8008704:	00ab      	lsls	r3, r5, #2
    *tmp = 1 - radius;
 8008706:	f1c3 0101 	rsb	r1, r3, #1
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 800870a:	fa0f fa83 	sxth.w	sl, r3
    int32_t i;

    uint32_t x_int[4];
    uint32_t x_fract[4];
    lv_coord_t cir_size = 0;
    x_int[0] = cp.x >> 2;
 800870e:	f343 038d 	sbfx	r3, r3, #2, #14
    *tmp = 1 - radius;
 8008712:	b209      	sxth	r1, r1
    x_int[0] = cp.x >> 2;
 8008714:	9306      	str	r3, [sp, #24]
    x_fract[0] = 0;
 8008716:	2300      	movs	r3, #0
    *tmp = 1 - radius;
 8008718:	9101      	str	r1, [sp, #4]
    uint32_t y_8th_cnt = 0;
 800871a:	469b      	mov	fp, r3
    c->y = 0;
 800871c:	4699      	mov	r9, r3
    x_fract[0] = 0;
 800871e:	930a      	str	r3, [sp, #40]	; 0x28

    /*Calculate an 1/8 circle*/
    while(circ_cont(&cp)) {
 8008720:	45d1      	cmp	r9, sl
 8008722:	dc24      	bgt.n	800876e <lv_draw_mask_radius_init+0x1d6>
 8008724:	f10d 0e18 	add.w	lr, sp, #24
 8008728:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
        /*Calculate 4 point of the circle */
        for(i = 0; i < 4; i++) {
 800872c:	2700      	movs	r7, #0
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 800872e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008732:	9102      	str	r1, [sp, #8]
    if(*tmp <= 0) {
 8008734:	9901      	ldr	r1, [sp, #4]
 8008736:	2900      	cmp	r1, #0
 8008738:	dc63      	bgt.n	8008802 <lv_draw_mask_radius_init+0x26a>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 800873a:	9902      	ldr	r1, [sp, #8]
 800873c:	3103      	adds	r1, #3
 800873e:	eb01 0149 	add.w	r1, r1, r9, lsl #1
 8008742:	b209      	sxth	r1, r1
 8008744:	9101      	str	r1, [sp, #4]
    c->y++;
 8008746:	f109 0101 	add.w	r1, r9, #1
 800874a:	fa0f f981 	sxth.w	r9, r1
            circ_next(&cp, &tmp);
            if(circ_cont(&cp) == false) break;
 800874e:	45d1      	cmp	r9, sl
 8008750:	dc0a      	bgt.n	8008768 <lv_draw_mask_radius_init+0x1d0>
            x_int[i] = cp.x >> 2;
 8008752:	ea4f 01aa 	mov.w	r1, sl, asr #2
        for(i = 0; i < 4; i++) {
 8008756:	3701      	adds	r7, #1
            x_int[i] = cp.x >> 2;
 8008758:	f84e 1b04 	str.w	r1, [lr], #4
        for(i = 0; i < 4; i++) {
 800875c:	2f04      	cmp	r7, #4
            x_fract[i] = cp.x & 0x3;
 800875e:	f00a 0103 	and.w	r1, sl, #3
 8008762:	f84c 1b04 	str.w	r1, [ip], #4
        for(i = 0; i < 4; i++) {
 8008766:	d1e2      	bne.n	800872e <lv_draw_mask_radius_init+0x196>
        }
        if(i != 4) break;
 8008768:	2f04      	cmp	r7, #4
    }

    /*The point on the 1/8 circle is special, calculate it manually*/
    int32_t mid = radius * 723;
    int32_t mid_int = mid >> 10;
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 800876a:	469c      	mov	ip, r3
        if(i != 4) break;
 800876c:	d056      	beq.n	800881c <lv_draw_mask_radius_init+0x284>
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 800876e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
    int32_t mid = radius * 723;
 8008772:	f240 21d3 	movw	r1, #723	; 0x2d3
 8008776:	fb15 f501 	smulbb	r5, r5, r1
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 800877a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800877e:	f930 e01c 	ldrsh.w	lr, [r0, ip, lsl #1]
    int32_t mid_int = mid >> 10;
 8008782:	12a9      	asrs	r1, r5, #10
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 8008784:	ea4f 074c 	mov.w	r7, ip, lsl #1
 8008788:	ebbe 2fa5 	cmp.w	lr, r5, asr #10
 800878c:	d103      	bne.n	8008796 <lv_draw_mask_radius_init+0x1fe>
 800878e:	f932 c01c 	ldrsh.w	ip, [r2, ip, lsl #1]
 8008792:	4561      	cmp	r1, ip
 8008794:	d01a      	beq.n	80087cc <lv_draw_mask_radius_init+0x234>
        int32_t tmp_val = mid - (mid_int << 10);
 8008796:	f3c5 0509 	ubfx	r5, r5, #0, #10
            tmp_val = tmp_val * tmp_val * 2;
            tmp_val = tmp_val >> (10 + 6);
            tmp_val = 15 - tmp_val;
        }

        cir_x[cir_size] = mid_int;
 800879a:	b209      	sxth	r1, r1
 800879c:	3702      	adds	r7, #2
        if(tmp_val <= 512) {
 800879e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
        cir_x[cir_size] = mid_int;
 80087a2:	53c1      	strh	r1, [r0, r7]
            tmp_val = 1024 - tmp_val;
 80087a4:	bfcc      	ite	gt
 80087a6:	f5c5 6580 	rsbgt	r5, r5, #1024	; 0x400
            tmp_val = tmp_val * tmp_val * 2;
 80087aa:	436d      	mulle	r5, r5
        cir_y[cir_size] = mid_int;
 80087ac:	53d1      	strh	r1, [r2, r7]
            tmp_val = tmp_val * tmp_val * 2;
 80087ae:	bfc8      	it	gt
 80087b0:	436d      	mulgt	r5, r5
        c->cir_opa[cir_size] = tmp_val;
 80087b2:	6861      	ldr	r1, [r4, #4]
            tmp_val = tmp_val >> (10 + 6);
 80087b4:	bfd2      	itee	le
 80087b6:	0bed      	lsrle	r5, r5, #15
            tmp_val = tmp_val >> (10 + 6);
 80087b8:	13ed      	asrgt	r5, r5, #15
            tmp_val = 15 - tmp_val;
 80087ba:	f1c5 050f 	rsbgt	r5, r5, #15
        c->cir_opa[cir_size] = tmp_val;
 80087be:	54cd      	strb	r5, [r1, r3]
        c->cir_opa[cir_size] *= 16;
 80087c0:	6865      	ldr	r5, [r4, #4]
 80087c2:	5ce9      	ldrb	r1, [r5, r3]
 80087c4:	0109      	lsls	r1, r1, #4
 80087c6:	54e9      	strb	r1, [r5, r3]
        cir_size++;
 80087c8:	3301      	adds	r3, #1
 80087ca:	b21b      	sxth	r3, r3
    }

    /*Build the second octet by mirroring the first*/
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 80087cc:	1e9d      	subs	r5, r3, #2
 80087ce:	4619      	mov	r1, r3
 80087d0:	2d00      	cmp	r5, #0
 80087d2:	f280 80b7 	bge.w	8008944 <lv_draw_mask_radius_init+0x3ac>
 80087d6:	b299      	uxth	r1, r3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f101 35ff 	add.w	r5, r1, #4294967295
 80087de:	bfd4      	ite	le
 80087e0:	2300      	movle	r3, #0
 80087e2:	462b      	movgt	r3, r5
        c->cir_opa[cir_size] = c->cir_opa[i];
    }

    lv_coord_t y = 0;
    i = 0;
    c->opa_start_on_y[0] = 0;
 80087e4:	68e5      	ldr	r5, [r4, #12]
 80087e6:	4419      	add	r1, r3
 80087e8:	2300      	movs	r3, #0
 80087ea:	b209      	sxth	r1, r1
 80087ec:	802b      	strh	r3, [r5, #0]
    while(i < cir_size) {
 80087ee:	428b      	cmp	r3, r1
 80087f0:	fa0f fc86 	sxth.w	ip, r6
 80087f4:	f2c0 80b7 	blt.w	8008966 <lv_draw_mask_radius_init+0x3ce>
}
 80087f8:	b00f      	add	sp, #60	; 0x3c
 80087fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
        }
        y++;
    }

    lv_mem_buf_release(cir_x);
 80087fe:	f00a b825 	b.w	801284c <lv_mem_buf_release>
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 8008802:	9902      	ldr	r1, [sp, #8]
 8008804:	eba9 080a 	sub.w	r8, r9, sl
 8008808:	3105      	adds	r1, #5
 800880a:	eb01 0148 	add.w	r1, r1, r8, lsl #1
 800880e:	b209      	sxth	r1, r1
 8008810:	9101      	str	r1, [sp, #4]
        c->x--;
 8008812:	f10a 31ff 	add.w	r1, sl, #4294967295
 8008816:	fa0f fa81 	sxth.w	sl, r1
 800881a:	e794      	b.n	8008746 <lv_draw_mask_radius_init+0x1ae>
        if(x_int[0] == x_int[3]) {
 800881c:	f8dd 8018 	ldr.w	r8, [sp, #24]
            cir_x[cir_size] = x_int[0];
 8008820:	005f      	lsls	r7, r3, #1
        cir_size++;
 8008822:	b29b      	uxth	r3, r3
            cir_x[cir_size] = x_int[0];
 8008824:	fa0f f188 	sxth.w	r1, r8
        cir_size++;
 8008828:	9305      	str	r3, [sp, #20]
            cir_size++;
 800882a:	3301      	adds	r3, #1
            cir_x[cir_size] = x_int[0];
 800882c:	9102      	str	r1, [sp, #8]
            cir_y[cir_size] = y_8th_cnt;
 800882e:	fa0f fe8b 	sxth.w	lr, fp
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 8008832:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
            cir_size++;
 8008836:	b21b      	sxth	r3, r3
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 8008838:	9103      	str	r1, [sp, #12]
        if(x_int[0] == x_int[3]) {
 800883a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800883c:	4588      	cmp	r8, r1
 800883e:	d11b      	bne.n	8008878 <lv_draw_mask_radius_init+0x2e0>
            cir_x[cir_size] = x_int[0];
 8008840:	9902      	ldr	r1, [sp, #8]
 8008842:	53c1      	strh	r1, [r0, r7]
            cir_y[cir_size] = y_8th_cnt;
 8008844:	f822 e007 	strh.w	lr, [r2, r7]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 8008848:	990a      	ldr	r1, [sp, #40]	; 0x28
 800884a:	9f03      	ldr	r7, [sp, #12]
 800884c:	440f      	add	r7, r1
 800884e:	4639      	mov	r1, r7
 8008850:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008852:	4439      	add	r1, r7
 8008854:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008856:	4439      	add	r1, r7
 8008858:	6867      	ldr	r7, [r4, #4]
 800885a:	f807 100c 	strb.w	r1, [r7, ip]
            c->cir_opa[cir_size] *= 16;
 800885e:	6867      	ldr	r7, [r4, #4]
 8008860:	f817 100c 	ldrb.w	r1, [r7, ip]
 8008864:	0109      	lsls	r1, r1, #4
 8008866:	f807 100c 	strb.w	r1, [r7, ip]
        y_8th_cnt++;
 800886a:	f10b 0b01 	add.w	fp, fp, #1
 800886e:	e757      	b.n	8008720 <lv_draw_mask_radius_init+0x188>
 8008870:	0801f117 	.word	0x0801f117
 8008874:	2400128c 	.word	0x2400128c
            cir_x[cir_size] = x_int[0] - 1;
 8008878:	f108 31ff 	add.w	r1, r8, #4294967295
 800887c:	b209      	sxth	r1, r1
 800887e:	9104      	str	r1, [sp, #16]
        else if(x_int[0] != x_int[1]) {
 8008880:	9907      	ldr	r1, [sp, #28]
 8008882:	4588      	cmp	r8, r1
 8008884:	d023      	beq.n	80088ce <lv_draw_mask_radius_init+0x336>
            cir_x[cir_size] = x_int[0];
 8008886:	9902      	ldr	r1, [sp, #8]
 8008888:	53c1      	strh	r1, [r0, r7]
            cir_y[cir_size] = y_8th_cnt;
 800888a:	f822 e007 	strh.w	lr, [r2, r7]
            c->cir_opa[cir_size] = x_fract[0];
 800888e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008890:	6861      	ldr	r1, [r4, #4]
 8008892:	f801 700c 	strb.w	r7, [r1, ip]
            c->cir_opa[cir_size] *= 16;
 8008896:	6867      	ldr	r7, [r4, #4]
 8008898:	f817 100c 	ldrb.w	r1, [r7, ip]
 800889c:	0109      	lsls	r1, r1, #4
 800889e:	f807 100c 	strb.w	r1, [r7, ip]
            cir_x[cir_size] = x_int[0] - 1;
 80088a2:	9904      	ldr	r1, [sp, #16]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 80088a4:	9f03      	ldr	r7, [sp, #12]
            cir_x[cir_size] = x_int[0] - 1;
 80088a6:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 80088aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
            cir_y[cir_size] = y_8th_cnt;
 80088ac:	f822 e013 	strh.w	lr, [r2, r3, lsl #1]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 80088b0:	440f      	add	r7, r1
 80088b2:	4639      	mov	r1, r7
 80088b4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80088b6:	3104      	adds	r1, #4
 80088b8:	4439      	add	r1, r7
 80088ba:	6867      	ldr	r7, [r4, #4]
 80088bc:	54f9      	strb	r1, [r7, r3]
            c->cir_opa[cir_size] *= 16;
 80088be:	6867      	ldr	r7, [r4, #4]
 80088c0:	5cf9      	ldrb	r1, [r7, r3]
 80088c2:	0109      	lsls	r1, r1, #4
 80088c4:	54f9      	strb	r1, [r7, r3]
            cir_size++;
 80088c6:	9b05      	ldr	r3, [sp, #20]
 80088c8:	3302      	adds	r3, #2
 80088ca:	b21b      	sxth	r3, r3
 80088cc:	e7cd      	b.n	800886a <lv_draw_mask_radius_init+0x2d2>
        else if(x_int[0] != x_int[2]) {
 80088ce:	9908      	ldr	r1, [sp, #32]
 80088d0:	4588      	cmp	r8, r1
            cir_x[cir_size] = x_int[0];
 80088d2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80088d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80088d8:	f820 8007 	strh.w	r8, [r0, r7]
            cir_y[cir_size] = y_8th_cnt;
 80088dc:	f822 e007 	strh.w	lr, [r2, r7]
        else if(x_int[0] != x_int[2]) {
 80088e0:	d018      	beq.n	8008914 <lv_draw_mask_radius_init+0x37c>
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 80088e2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80088e6:	6867      	ldr	r7, [r4, #4]
 80088e8:	4441      	add	r1, r8
 80088ea:	f807 100c 	strb.w	r1, [r7, ip]
            c->cir_opa[cir_size] *= 16;
 80088ee:	6867      	ldr	r7, [r4, #4]
 80088f0:	f817 100c 	ldrb.w	r1, [r7, ip]
 80088f4:	0109      	lsls	r1, r1, #4
 80088f6:	f807 100c 	strb.w	r1, [r7, ip]
            cir_x[cir_size] = x_int[0] - 1;
 80088fa:	0059      	lsls	r1, r3, #1
 80088fc:	9f04      	ldr	r7, [sp, #16]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 80088fe:	f8dd c00c 	ldr.w	ip, [sp, #12]
            cir_x[cir_size] = x_int[0] - 1;
 8008902:	5247      	strh	r7, [r0, r1]
            cir_y[cir_size] = y_8th_cnt;
 8008904:	f822 e001 	strh.w	lr, [r2, r1]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 8008908:	990c      	ldr	r1, [sp, #48]	; 0x30
 800890a:	6867      	ldr	r7, [r4, #4]
 800890c:	448c      	add	ip, r1
 800890e:	4661      	mov	r1, ip
 8008910:	3108      	adds	r1, #8
 8008912:	e7d3      	b.n	80088bc <lv_draw_mask_radius_init+0x324>
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 8008914:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008916:	eb01 0807 	add.w	r8, r1, r7
 800891a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800891c:	4488      	add	r8, r1
 800891e:	6861      	ldr	r1, [r4, #4]
 8008920:	f801 800c 	strb.w	r8, [r1, ip]
            c->cir_opa[cir_size] *= 16;
 8008924:	6867      	ldr	r7, [r4, #4]
 8008926:	f817 100c 	ldrb.w	r1, [r7, ip]
 800892a:	0109      	lsls	r1, r1, #4
 800892c:	f807 100c 	strb.w	r1, [r7, ip]
            cir_x[cir_size] = x_int[0] - 1;
 8008930:	0059      	lsls	r1, r3, #1
 8008932:	9f04      	ldr	r7, [sp, #16]
 8008934:	5247      	strh	r7, [r0, r1]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 8008936:	9f03      	ldr	r7, [sp, #12]
            cir_y[cir_size] = y_8th_cnt;
 8008938:	f822 e001 	strh.w	lr, [r2, r1]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 800893c:	370c      	adds	r7, #12
 800893e:	6861      	ldr	r1, [r4, #4]
 8008940:	54cf      	strb	r7, [r1, r3]
            c->cir_opa[cir_size] *= 16;
 8008942:	e7bc      	b.n	80088be <lv_draw_mask_radius_init+0x326>
        cir_x[cir_size] = cir_y[i];
 8008944:	f932 7015 	ldrsh.w	r7, [r2, r5, lsl #1]
 8008948:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
        cir_y[cir_size] = cir_x[i];
 800894c:	f930 7015 	ldrsh.w	r7, [r0, r5, lsl #1]
 8008950:	f822 7011 	strh.w	r7, [r2, r1, lsl #1]
        c->cir_opa[cir_size] = c->cir_opa[i];
 8008954:	6867      	ldr	r7, [r4, #4]
 8008956:	f817 c005 	ldrb.w	ip, [r7, r5]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 800895a:	3d01      	subs	r5, #1
        c->cir_opa[cir_size] = c->cir_opa[i];
 800895c:	f807 c001 	strb.w	ip, [r7, r1]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8008960:	3101      	adds	r1, #1
 8008962:	b209      	sxth	r1, r1
 8008964:	e734      	b.n	80087d0 <lv_draw_mask_radius_init+0x238>
        c->opa_start_on_y[y] = i;
 8008966:	68e5      	ldr	r5, [r4, #12]
 8008968:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 800896c:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
        c->x_start_on_y[y] = cir_x[i];
 8008970:	68a5      	ldr	r5, [r4, #8]
 8008972:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 8008976:	f825 701c 	strh.w	r7, [r5, ip, lsl #1]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 800897a:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 800897e:	4565      	cmp	r5, ip
 8008980:	d101      	bne.n	8008986 <lv_draw_mask_radius_init+0x3ee>
 8008982:	428b      	cmp	r3, r1
 8008984:	db01      	blt.n	800898a <lv_draw_mask_radius_init+0x3f2>
        y++;
 8008986:	3601      	adds	r6, #1
 8008988:	e731      	b.n	80087ee <lv_draw_mask_radius_init+0x256>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 800898a:	68a7      	ldr	r7, [r4, #8]
 800898c:	f930 5013 	ldrsh.w	r5, [r0, r3, lsl #1]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8008990:	3301      	adds	r3, #1
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 8008992:	f837 800e 	ldrh.w	r8, [r7, lr]
 8008996:	4545      	cmp	r5, r8
 8008998:	bfa8      	it	ge
 800899a:	4645      	movge	r5, r8
 800899c:	f827 500e 	strh.w	r5, [r7, lr]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 80089a0:	e7eb      	b.n	800897a <lv_draw_mask_radius_init+0x3e2>
 80089a2:	bf00      	nop

080089a4 <lv_draw_rect_dsc_init>:
    memset(dst, 0x00, len);
 80089a4:	2238      	movs	r2, #56	; 0x38
 80089a6:	2100      	movs	r1, #0
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 80089a8:	b510      	push	{r4, lr}
 80089aa:	4604      	mov	r4, r0
 80089ac:	f011 feec 	bl	801a788 <memset>
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
    dsc->bg_color = lv_color_white();
    dsc->bg_grad.stops[0].color = lv_color_white();
    dsc->bg_grad.stops[1].color = lv_color_black();
    dsc->bg_grad.stops[1].frac = 0xFF;
 80089b0:	23ff      	movs	r3, #255	; 0xff
    dsc->bg_grad.stops[1].color = lv_color_black();
 80089b2:	2200      	movs	r2, #0
    dsc->bg_grad.stops_count = 2;
 80089b4:	2102      	movs	r1, #2
    dsc->bg_grad.stops[1].frac = 0xFF;
 80089b6:	7323      	strb	r3, [r4, #12]
    dsc->border_color = lv_color_black();
    dsc->shadow_color = lv_color_black();
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
    dsc->bg_opa = LV_OPA_COVER;
 80089b8:	70e3      	strb	r3, [r4, #3]
    dsc->bg_img_opa = LV_OPA_COVER;
    dsc->outline_opa = LV_OPA_COVER;
 80089ba:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_opa = LV_OPA_COVER;
    dsc->shadow_opa = LV_OPA_COVER;
 80089be:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->border_opa = LV_OPA_COVER;
 80089c2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    dsc->bg_grad.stops[1].color = lv_color_black();
 80089c4:	8162      	strh	r2, [r4, #10]
    dsc->border_opa = LV_OPA_COVER;
 80089c6:	f423 537b 	bic.w	r3, r3, #16064	; 0x3ec0
    dsc->border_color = lv_color_black();
 80089ca:	83e2      	strh	r2, [r4, #30]
    dsc->shadow_color = lv_color_black();
 80089cc:	85a2      	strh	r2, [r4, #44]	; 0x2c
    dsc->border_opa = LV_OPA_COVER;
 80089ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 80089d2:	4a06      	ldr	r2, [pc, #24]	; (80089ec <lv_draw_rect_dsc_init+0x48>)
    dsc->bg_grad.stops_count = 2;
 80089d4:	73a1      	strb	r1, [r4, #14]
    dsc->border_opa = LV_OPA_COVER;
 80089d6:	f443 53f7 	orr.w	r3, r3, #7904	; 0x1ee0
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 80089da:	6162      	str	r2, [r4, #20]
    dsc->bg_color = lv_color_white();
 80089dc:	f04f 32ff 	mov.w	r2, #4294967295
    dsc->border_opa = LV_OPA_COVER;
 80089e0:	f043 031f 	orr.w	r3, r3, #31
    dsc->bg_color = lv_color_white();
 80089e4:	6062      	str	r2, [r4, #4]
    dsc->bg_img_opa = LV_OPA_COVER;
 80089e6:	76a2      	strb	r2, [r4, #26]
    dsc->border_opa = LV_OPA_COVER;
 80089e8:	8463      	strh	r3, [r4, #34]	; 0x22
    dsc->border_side = LV_BORDER_SIDE_FULL;
}
 80089ea:	bd10      	pop	{r4, pc}
 80089ec:	08029408 	.word	0x08029408

080089f0 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 80089f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f4:	4604      	mov	r4, r0
 80089f6:	460f      	mov	r7, r1
 80089f8:	4690      	mov	r8, r2
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 80089fa:	4d13      	ldr	r5, [pc, #76]	; (8008a48 <_lv_img_cache_open+0x58>)
    uint32_t t_start  = lv_tick_get();
 80089fc:	f01b fba5 	bl	802414a <lv_tick_get>
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 8008a00:	4621      	mov	r1, r4
    uint32_t t_start  = lv_tick_get();
 8008a02:	4606      	mov	r6, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 8008a04:	4643      	mov	r3, r8
 8008a06:	463a      	mov	r2, r7
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 fafd 	bl	8009008 <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 8008a0e:	4604      	mov	r4, r0
 8008a10:	b950      	cbnz	r0, 8008a28 <_lv_img_cache_open+0x38>
 8008a12:	4601      	mov	r1, r0
 8008a14:	222c      	movs	r2, #44	; 0x2c
 8008a16:	4628      	mov	r0, r5
 8008a18:	f011 feb6 	bl	801a788 <memset>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 8008a1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        return NULL;
 8008a20:	4620      	mov	r0, r4
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 8008a22:	62ab      	str	r3, [r5, #40]	; 0x28
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
 8008a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cached_src->life = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	62ab      	str	r3, [r5, #40]	; 0x28
    if(cached_src->dec_dsc.time_to_open == 0) {
 8008a2c:	69eb      	ldr	r3, [r5, #28]
 8008a2e:	b10b      	cbz	r3, 8008a34 <_lv_img_cache_open+0x44>
    return cached_src;
 8008a30:	4805      	ldr	r0, [pc, #20]	; (8008a48 <_lv_img_cache_open+0x58>)
 8008a32:	e7f7      	b.n	8008a24 <_lv_img_cache_open+0x34>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8008a34:	4630      	mov	r0, r6
 8008a36:	f01b fb90 	bl	802415a <lv_tick_elaps>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8008a3a:	b108      	cbz	r0, 8008a40 <_lv_img_cache_open+0x50>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8008a3c:	61e8      	str	r0, [r5, #28]
 8008a3e:	e7f7      	b.n	8008a30 <_lv_img_cache_open+0x40>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8008a40:	2301      	movs	r3, #1
 8008a42:	61eb      	str	r3, [r5, #28]
 8008a44:	e7f4      	b.n	8008a30 <_lv_img_cache_open+0x40>
 8008a46:	bf00      	nop
 8008a48:	24001380 	.word	0x24001380

08008a4c <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 8008a4c:	b530      	push	{r4, r5, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8008a4e:	4608      	mov	r0, r1
{
 8008a50:	b085      	sub	sp, #20
 8008a52:	460d      	mov	r5, r1
 8008a54:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8008a56:	f015 ff25 	bl	801e8a4 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8008a5a:	b9e0      	cbnz	r0, 8008a96 <lv_img_decoder_built_in_info+0x4a>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8008a5c:	782b      	ldrb	r3, [r5, #0]
 8008a5e:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8008a62:	3b04      	subs	r3, #4
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b10      	cmp	r3, #16
 8008a68:	d839      	bhi.n	8008ade <lv_img_decoder_built_in_info+0x92>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 8008a6a:	682b      	ldr	r3, [r5, #0]
 8008a6c:	6822      	ldr	r2, [r4, #0]
 8008a6e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8008a72:	f363 2294 	bfi	r2, r3, #10, #11
 8008a76:	6022      	str	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8008a78:	886b      	ldrh	r3, [r5, #2]
 8008a7a:	8862      	ldrh	r2, [r4, #2]
 8008a7c:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8008a80:	f363 124f 	bfi	r2, r3, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8008a84:	7823      	ldrb	r3, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8008a86:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8008a88:	782a      	ldrb	r2, [r5, #0]
 8008a8a:	f362 0304 	bfi	r3, r2, #0, #5
 8008a8e:	7023      	strb	r3, [r4, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
 8008a90:	2001      	movs	r0, #1
}
 8008a92:	b005      	add	sp, #20
 8008a94:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 8008a96:	2801      	cmp	r0, #1
 8008a98:	d123      	bne.n	8008ae2 <lv_img_decoder_built_in_info+0x96>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f009 fdec 	bl	8012678 <lv_fs_get_ext>
 8008aa0:	4914      	ldr	r1, [pc, #80]	; (8008af4 <lv_img_decoder_built_in_info+0xa8>)
 8008aa2:	f011 fe5a 	bl	801a75a <strcmp>
 8008aa6:	b9d0      	cbnz	r0, 8008ade <lv_img_decoder_built_in_info+0x92>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	4629      	mov	r1, r5
 8008aac:	a801      	add	r0, sp, #4
 8008aae:	f01b ff7d 	bl	80249ac <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 8008ab2:	b970      	cbnz	r0, 8008ad2 <lv_img_decoder_built_in_info+0x86>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 8008ab4:	2204      	movs	r2, #4
 8008ab6:	466b      	mov	r3, sp
 8008ab8:	4621      	mov	r1, r4
 8008aba:	eb0d 0002 	add.w	r0, sp, r2
 8008abe:	f01b fe71 	bl	80247a4 <lv_fs_read>
 8008ac2:	4605      	mov	r5, r0
            lv_fs_close(&f);
 8008ac4:	a801      	add	r0, sp, #4
 8008ac6:	f01b fe4e 	bl	8024766 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8008aca:	b945      	cbnz	r5, 8008ade <lv_img_decoder_built_in_info+0x92>
 8008acc:	9b00      	ldr	r3, [sp, #0]
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d105      	bne.n	8008ade <lv_img_decoder_built_in_info+0x92>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8008ad2:	7823      	ldrb	r3, [r4, #0]
 8008ad4:	331c      	adds	r3, #28
 8008ad6:	f003 031f 	and.w	r3, r3, #31
 8008ada:	2b10      	cmp	r3, #16
 8008adc:	d9d8      	bls.n	8008a90 <lv_img_decoder_built_in_info+0x44>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8008ade:	2000      	movs	r0, #0
 8008ae0:	e7d7      	b.n	8008a92 <lv_img_decoder_built_in_info+0x46>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8008ae2:	2802      	cmp	r0, #2
 8008ae4:	d1fb      	bne.n	8008ade <lv_img_decoder_built_in_info+0x92>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8008aec:	4b02      	ldr	r3, [pc, #8]	; (8008af8 <lv_img_decoder_built_in_info+0xac>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	e7cd      	b.n	8008a90 <lv_img_decoder_built_in_info+0x44>
 8008af4:	0802ab06 	.word	0x0802ab06
 8008af8:	0020040b 	.word	0x0020040b

08008afc <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8008afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_res_t res = LV_RES_INV;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008b00:	7d08      	ldrb	r0, [r1, #20]
{
 8008b02:	461f      	mov	r7, r3
 8008b04:	b089      	sub	sp, #36	; 0x24
 8008b06:	460e      	mov	r6, r1
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008b08:	f000 031e 	and.w	r3, r0, #30
{
 8008b0c:	4614      	mov	r4, r2
 8008b0e:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d003      	beq.n	8008b1e <lv_img_decoder_built_in_read_line+0x22>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8008b16:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008b1a:	2b06      	cmp	r3, #6
 8008b1c:	d12d      	bne.n	8008b7a <lv_img_decoder_built_in_read_line+0x7e>
        /*For TRUE_COLOR images read line required only for files.
         *For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8008b1e:	7c33      	ldrb	r3, [r6, #16]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d003      	beq.n	8008b2c <lv_img_decoder_built_in_read_line+0x30>
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
    if(res != LV_FS_RES_OK) {
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8008b24:	2000      	movs	r0, #0
}
 8008b26:	b009      	add	sp, #36	; 0x24
 8008b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008b2c:	f000 001f 	and.w	r0, r0, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8008b30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008b34:	f7fe ffcc 	bl	8007ad0 <lv_img_cf_get_px_size>
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8008b38:	6971      	ldr	r1, [r6, #20]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008b3a:	4605      	mov	r5, r0
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 8008b3c:	2200      	movs	r2, #0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8008b3e:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8008b42:	fb17 4101 	smlabb	r1, r7, r1, r4
 8008b46:	4341      	muls	r1, r0
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 8008b48:	4640      	mov	r0, r8
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8008b4a:	10c9      	asrs	r1, r1, #3
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 8008b4c:	3104      	adds	r1, #4
 8008b4e:	f01b feeb 	bl	8024928 <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d1e6      	bne.n	8008b24 <lv_img_decoder_built_in_read_line+0x28>
    }
    uint32_t btr = len * (px_size >> 3);
 8008b56:	f3c5 05c7 	ubfx	r5, r5, #3, #8
    uint32_t br  = 0;
 8008b5a:	9004      	str	r0, [sp, #16]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 8008b5c:	ab04      	add	r3, sp, #16
 8008b5e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    uint32_t btr = len * (px_size >> 3);
 8008b60:	fb15 f509 	smulbb	r5, r5, r9
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 8008b64:	4640      	mov	r0, r8
 8008b66:	462a      	mov	r2, r5
 8008b68:	f01b fe1c 	bl	80247a4 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d1d9      	bne.n	8008b24 <lv_img_decoder_built_in_read_line+0x28>
 8008b70:	9804      	ldr	r0, [sp, #16]
 8008b72:	1b43      	subs	r3, r0, r5
 8008b74:	4258      	negs	r0, r3
 8008b76:	4158      	adcs	r0, r3
 8008b78:	e7d5      	b.n	8008b26 <lv_img_decoder_built_in_read_line+0x2a>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8008b7a:	f1a3 020b 	sub.w	r2, r3, #11
 8008b7e:	2a03      	cmp	r2, #3
 8008b80:	f200 80bb 	bhi.w	8008cfa <lv_img_decoder_built_in_read_line+0x1fe>
}

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8008b84:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8008b88:	aa04      	add	r2, sp, #16
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8008b8a:	f8ad 3008 	strh.w	r3, [sp, #8]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8008b8e:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 8008b92:	4690      	mov	r8, r2
 8008b94:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 8008b98:	9303      	str	r3, [sp, #12]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8008b9a:	4ba6      	ldr	r3, [pc, #664]	; (8008e34 <lv_img_decoder_built_in_read_line+0x338>)
 8008b9c:	f103 0c10 	add.w	ip, r3, #16
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8008ba8:	4615      	mov	r5, r2
 8008baa:	4563      	cmp	r3, ip
 8008bac:	c503      	stmia	r5!, {r0, r1}
 8008bae:	462a      	mov	r2, r5
 8008bb0:	d1f6      	bne.n	8008ba0 <lv_img_decoder_built_in_read_line+0xa4>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 8008bb2:	8931      	ldrh	r1, [r6, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8008bb8:	0a0d      	lsrs	r5, r1, #8
    for(i = 0; i < len; i++) {
 8008bba:	b210      	sxth	r0, r2
 8008bbc:	3303      	adds	r3, #3
 8008bbe:	4581      	cmp	r9, r0
 8008bc0:	dc14      	bgt.n	8008bec <lv_img_decoder_built_in_read_line+0xf0>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8008bc2:	7d30      	ldrb	r0, [r6, #20]
 8008bc4:	f000 001f 	and.w	r0, r0, #31
 8008bc8:	f7fe ff82 	bl	8007ad0 <lv_img_cf_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8008bcc:	2301      	movs	r3, #1
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8008bce:	4682      	mov	sl, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8008bd0:	4083      	lsls	r3, r0
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	9300      	str	r3, [sp, #0]

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 8008bd8:	7d33      	ldrb	r3, [r6, #20]
 8008bda:	f003 031f 	and.w	r3, r3, #31
 8008bde:	3b0b      	subs	r3, #11
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d856      	bhi.n	8008c92 <lv_img_decoder_built_in_read_line+0x196>
 8008be4:	e8df f003 	tbb	[pc, r3]
 8008be8:	4c3e2e08 	.word	0x4c3e2e08
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8008bec:	3201      	adds	r2, #1
 8008bee:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8008bf2:	f803 5c02 	strb.w	r5, [r3, #-2]
    for(i = 0; i < len; i++) {
 8008bf6:	e7e0      	b.n	8008bba <lv_img_decoder_built_in_read_line+0xbe>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008bf8:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 8008bfa:	10e1      	asrs	r1, r4, #3
            pos = 7 - (x & 0x7);
 8008bfc:	43e4      	mvns	r4, r4
            opa_table = alpha1_opa_table;
 8008bfe:	f10d 0808 	add.w	r8, sp, #8
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008c02:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 7 - (x & 0x7);
 8008c06:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008c0a:	3507      	adds	r5, #7
 8008c0c:	10eb      	asrs	r3, r5, #3
 8008c0e:	461d      	mov	r5, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 8008c10:	fb03 1107 	mla	r1, r3, r7, r1
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8008c14:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8008c16:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 8008c1a:	9101      	str	r1, [sp, #4]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8008c1c:	f009 fdcc 	bl	80127b8 <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 8008c20:	4607      	mov	r7, r0
 8008c22:	2800      	cmp	r0, #0
 8008c24:	f43f af7e 	beq.w	8008b24 <lv_img_decoder_built_in_read_line+0x28>

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8008c28:	7c33      	ldrb	r3, [r6, #16]
 8008c2a:	9901      	ldr	r1, [sp, #4]
 8008c2c:	bbab      	cbnz	r3, 8008c9a <lv_img_decoder_built_in_read_line+0x19e>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 8008c2e:	6873      	ldr	r3, [r6, #4]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	440a      	add	r2, r1
    }

    for(i = 0; i < len; i++) {
        uint8_t val_act = (*data_tmp >> pos) & mask;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8008c34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 8008c36:	f1ca 0008 	rsb	r0, sl, #8
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8008c3a:	2100      	movs	r1, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8008c3c:	1c9d      	adds	r5, r3, #2
            pos = 8 - px_size;
 8008c3e:	fa4f fe80 	sxtb.w	lr, r0
 8008c42:	e052      	b.n	8008cea <lv_img_decoder_built_in_read_line+0x1ee>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008c44:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 8008c46:	10a1      	asrs	r1, r4, #2
            pos = 6 - (x & 0x3) * 2;
 8008c48:	43e4      	mvns	r4, r4
            opa_table = alpha2_opa_table;
 8008c4a:	f10d 080c 	add.w	r8, sp, #12
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008c4e:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 6 - (x & 0x3) * 2;
 8008c52:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008c56:	3503      	adds	r5, #3
            pos = 6 - (x & 0x3) * 2;
 8008c58:	0064      	lsls	r4, r4, #1
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008c5a:	10ab      	asrs	r3, r5, #2
 8008c5c:	461d      	mov	r5, r3
            ofs += w * y + (x >> 2); /*First pixel*/
 8008c5e:	fb03 1107 	mla	r1, r3, r7, r1
            break;
 8008c62:	e7d7      	b.n	8008c14 <lv_img_decoder_built_in_read_line+0x118>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008c64:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 8008c66:	1061      	asrs	r1, r4, #1
            pos = 4 - (x & 0x1) * 4;
 8008c68:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008c6a:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 4 - (x & 0x1) * 4;
 8008c6e:	f004 0401 	and.w	r4, r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008c72:	3501      	adds	r5, #1
            pos = 4 - (x & 0x1) * 4;
 8008c74:	00a4      	lsls	r4, r4, #2
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008c76:	106b      	asrs	r3, r5, #1
 8008c78:	461d      	mov	r5, r3
            ofs += w * y + (x >> 1); /*First pixel*/
 8008c7a:	fb03 1107 	mla	r1, r3, r7, r1
            pos = 4 - (x & 0x1) * 4;
 8008c7e:	e7c9      	b.n	8008c14 <lv_img_decoder_built_in_read_line+0x118>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8008c80:	6975      	ldr	r5, [r6, #20]
 8008c82:	f3c5 218a 	ubfx	r1, r5, #10, #11
 8008c86:	460d      	mov	r5, r1
            ofs += w * y + x;  /*First pixel*/
 8008c88:	fb17 4101 	smlabb	r1, r7, r1, r4
            pos = 0;
 8008c8c:	2400      	movs	r4, #0
    switch(dsc->header.cf) {
 8008c8e:	46a0      	mov	r8, r4
 8008c90:	e7c0      	b.n	8008c14 <lv_img_decoder_built_in_read_line+0x118>
 8008c92:	2400      	movs	r4, #0
 8008c94:	4621      	mov	r1, r4
 8008c96:	4625      	mov	r5, r4
 8008c98:	e7f9      	b.n	8008c8e <lv_img_decoder_built_in_read_line+0x192>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	3104      	adds	r1, #4
 8008c9e:	4658      	mov	r0, fp
 8008ca0:	f01b fe42 	bl	8024928 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8008ca4:	462a      	mov	r2, r5
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	4639      	mov	r1, r7
 8008caa:	4658      	mov	r0, fp
 8008cac:	f01b fd7a 	bl	80247a4 <lv_fs_read>
 8008cb0:	463a      	mov	r2, r7
 8008cb2:	e7bf      	b.n	8008c34 <lv_img_decoder_built_in_read_line+0x138>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008cb4:	7813      	ldrb	r3, [r2, #0]
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8008cb6:	f896 c014 	ldrb.w	ip, [r6, #20]
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008cba:	4123      	asrs	r3, r4
 8008cbc:	9800      	ldr	r0, [sp, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8008cbe:	f00c 0c1f 	and.w	ip, ip, #31
        pos -= px_size;
 8008cc2:	eba4 040a 	sub.w	r4, r4, sl
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008cc6:	4003      	ands	r3, r0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8008cc8:	f1bc 0f0e 	cmp.w	ip, #14
        pos -= px_size;
 8008ccc:	b264      	sxtb	r4, r4
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008cce:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8008cd0:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8008cd4:	f101 0101 	add.w	r1, r1, #1
 8008cd8:	bf18      	it	ne
 8008cda:	f818 3003 	ldrbne.w	r3, [r8, r3]
        if(pos < 0) {
 8008cde:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 8008ce0:	bfbc      	itt	lt
 8008ce2:	4674      	movlt	r4, lr
            data_tmp++;
 8008ce4:	3201      	addlt	r2, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8008ce6:	f805 300c 	strb.w	r3, [r5, ip]
    for(i = 0; i < len; i++) {
 8008cea:	b20b      	sxth	r3, r1
 8008cec:	4599      	cmp	r9, r3
 8008cee:	dce1      	bgt.n	8008cb4 <lv_img_decoder_built_in_read_line+0x1b8>
        if(pos < 0) {
            pos = 8 - px_size;
            data_tmp++;
        }
    }
    lv_mem_buf_release(fs_buf);
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	f009 fdab 	bl	801284c <lv_mem_buf_release>
    return LV_RES_OK;
 8008cf6:	2001      	movs	r0, #1
 8008cf8:	e715      	b.n	8008b26 <lv_img_decoder_built_in_read_line+0x2a>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8008cfa:	3b07      	subs	r3, #7
 8008cfc:	2b03      	cmp	r3, #3
 8008cfe:	f63f af11 	bhi.w	8008b24 <lv_img_decoder_built_in_read_line+0x28>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008d02:	f000 001f 	and.w	r0, r0, #31
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8008d06:	f04f 0801 	mov.w	r8, #1
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008d0a:	f7fe fee1 	bl	8007ad0 <lv_img_cf_get_px_size>
    switch(dsc->header.cf) {
 8008d0e:	7d33      	ldrb	r3, [r6, #20]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8008d10:	fa08 f800 	lsl.w	r8, r8, r0
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008d14:	4682      	mov	sl, r0
    switch(dsc->header.cf) {
 8008d16:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8008d1a:	f108 38ff 	add.w	r8, r8, #4294967295
    switch(dsc->header.cf) {
 8008d1e:	3b07      	subs	r3, #7
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8008d20:	fa1f f888 	uxth.w	r8, r8
    switch(dsc->header.cf) {
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d851      	bhi.n	8008dcc <lv_img_decoder_built_in_read_line+0x2d0>
 8008d28:	e8df f003 	tbb	[pc, r3]
 8008d2c:	46362602 	.word	0x46362602
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008d30:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 8008d32:	10e3      	asrs	r3, r4, #3
            pos = 7 - (x & 0x7);
 8008d34:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008d36:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 7 - (x & 0x7);
 8008d3a:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008d3e:	3507      	adds	r5, #7
 8008d40:	10ea      	asrs	r2, r5, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 8008d42:	fb02 3307 	mla	r3, r2, r7, r3
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008d46:	4615      	mov	r5, r2
            ofs += 8;                /*Skip the palette*/
 8008d48:	f103 0108 	add.w	r1, r3, #8
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8008d4c:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8008d4e:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 8008d52:	9100      	str	r1, [sp, #0]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8008d54:	f009 fd30 	bl	80127b8 <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 8008d58:	4607      	mov	r7, r0
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	f43f aee2 	beq.w	8008b24 <lv_img_decoder_built_in_read_line+0x28>
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8008d60:	7c33      	ldrb	r3, [r6, #16]
 8008d62:	9900      	ldr	r1, [sp, #0]
 8008d64:	bbb3      	cbnz	r3, 8008dd4 <lv_img_decoder_built_in_read_line+0x2d8>
        data_tmp                     = img_dsc->data + ofs;
 8008d66:	6873      	ldr	r3, [r6, #4]
 8008d68:	689a      	ldr	r2, [r3, #8]
 8008d6a:	440a      	add	r2, r1
            pos = 8 - px_size;
 8008d6c:	f1ca 0608 	rsb	r6, sl, #8
 8008d70:	9913      	ldr	r1, [sp, #76]	; 0x4c
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8008d72:	2000      	movs	r0, #0
            pos = 8 - px_size;
 8008d74:	b276      	sxtb	r6, r6
 8008d76:	e058      	b.n	8008e2a <lv_img_decoder_built_in_read_line+0x32e>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008d78:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 8008d7a:	10a3      	asrs	r3, r4, #2
            pos = 6 - (x & 0x3) * 2;
 8008d7c:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008d7e:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 6 - (x & 0x3) * 2;
 8008d82:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008d86:	3503      	adds	r5, #3
            pos = 6 - (x & 0x3) * 2;
 8008d88:	0064      	lsls	r4, r4, #1
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008d8a:	10aa      	asrs	r2, r5, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 8008d8c:	fb02 3307 	mla	r3, r2, r7, r3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008d90:	4615      	mov	r5, r2
            ofs += 16;               /*Skip the palette*/
 8008d92:	f103 0110 	add.w	r1, r3, #16
            break;
 8008d96:	e7d9      	b.n	8008d4c <lv_img_decoder_built_in_read_line+0x250>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008d98:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 8008d9a:	1063      	asrs	r3, r4, #1
            pos = 4 - (x & 0x1) * 4;
 8008d9c:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008d9e:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 4 - (x & 0x1) * 4;
 8008da2:	f004 0401 	and.w	r4, r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008da6:	3501      	adds	r5, #1
            pos = 4 - (x & 0x1) * 4;
 8008da8:	00a4      	lsls	r4, r4, #2
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008daa:	106a      	asrs	r2, r5, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 8008dac:	fb02 3307 	mla	r3, r2, r7, r3
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008db0:	4615      	mov	r5, r2
            ofs += 64;               /*Skip the palette*/
 8008db2:	f103 0140 	add.w	r1, r3, #64	; 0x40
            pos = 4 - (x & 0x1) * 4;
 8008db6:	e7c9      	b.n	8008d4c <lv_img_decoder_built_in_read_line+0x250>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8008db8:	6975      	ldr	r5, [r6, #20]
 8008dba:	f3c5 238a 	ubfx	r3, r5, #10, #11
            ofs += w * y + x;  /*First pixel*/
 8008dbe:	fb17 4703 	smlabb	r7, r7, r3, r4
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8008dc2:	461d      	mov	r5, r3
            pos = 0;
 8008dc4:	2400      	movs	r4, #0
            ofs += 1024;       /*Skip the palette*/
 8008dc6:	f507 6180 	add.w	r1, r7, #1024	; 0x400
            break;
 8008dca:	e7bf      	b.n	8008d4c <lv_img_decoder_built_in_read_line+0x250>
    switch(dsc->header.cf) {
 8008dcc:	2100      	movs	r1, #0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	460d      	mov	r5, r1
 8008dd2:	e7bb      	b.n	8008d4c <lv_img_decoder_built_in_read_line+0x250>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	3104      	adds	r1, #4
 8008dd8:	4658      	mov	r0, fp
 8008dda:	f01b fda5 	bl	8024928 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8008dde:	462a      	mov	r2, r5
 8008de0:	2300      	movs	r3, #0
 8008de2:	4639      	mov	r1, r7
 8008de4:	4658      	mov	r0, fp
 8008de6:	f01b fcdd 	bl	80247a4 <lv_fs_read>
 8008dea:	463a      	mov	r2, r7
 8008dec:	e7be      	b.n	8008d6c <lv_img_decoder_built_in_read_line+0x270>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008dee:	7813      	ldrb	r3, [r2, #0]
 8008df0:	3001      	adds	r0, #1
        lv_color_t color = user_data->palette[val_act];
 8008df2:	f8db 500c 	ldr.w	r5, [fp, #12]
 8008df6:	3103      	adds	r1, #3
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008df8:	4123      	asrs	r3, r4
        pos -= px_size;
 8008dfa:	eba4 040a 	sub.w	r4, r4, sl
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008dfe:	ea03 0308 	and.w	r3, r3, r8
        pos -= px_size;
 8008e02:	b264      	sxtb	r4, r4
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008e04:	fa5f fc83 	uxtb.w	ip, r3
        if(pos < 0) {
 8008e08:	2c00      	cmp	r4, #0
        lv_color_t color = user_data->palette[val_act];
 8008e0a:	f835 301c 	ldrh.w	r3, [r5, ip, lsl #1]
            pos = 8 - px_size;
 8008e0e:	bfbc      	itt	lt
 8008e10:	4634      	movlt	r4, r6
            data_tmp++;
 8008e12:	3201      	addlt	r2, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 8008e14:	f801 3c03 	strb.w	r3, [r1, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 8008e18:	0a1b      	lsrs	r3, r3, #8
 8008e1a:	f801 3c02 	strb.w	r3, [r1, #-2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 8008e1e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008e22:	f813 300c 	ldrb.w	r3, [r3, ip]
 8008e26:	f801 3c01 	strb.w	r3, [r1, #-1]
    for(i = 0; i < len; i++) {
 8008e2a:	b203      	sxth	r3, r0
 8008e2c:	4599      	cmp	r9, r3
 8008e2e:	dcde      	bgt.n	8008dee <lv_img_decoder_built_in_read_line+0x2f2>
 8008e30:	e75e      	b.n	8008cf0 <lv_img_decoder_built_in_read_line+0x1f4>
 8008e32:	bf00      	nop
 8008e34:	08028aa4 	.word	0x08028aa4

08008e38 <lv_img_decoder_built_in_open>:
{
 8008e38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8008e3c:	7c0b      	ldrb	r3, [r1, #16]
{
 8008e3e:	4607      	mov	r7, r0
 8008e40:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d12f      	bne.n	8008ea6 <lv_img_decoder_built_in_open+0x6e>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8008e46:	6848      	ldr	r0, [r1, #4]
 8008e48:	f009 fc16 	bl	8012678 <lv_fs_get_ext>
 8008e4c:	4955      	ldr	r1, [pc, #340]	; (8008fa4 <lv_img_decoder_built_in_open+0x16c>)
 8008e4e:	f011 fc84 	bl	801a75a <strcmp>
 8008e52:	bb70      	cbnz	r0, 8008eb2 <lv_img_decoder_built_in_open+0x7a>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8008e54:	2202      	movs	r2, #2
 8008e56:	6861      	ldr	r1, [r4, #4]
 8008e58:	a801      	add	r0, sp, #4
 8008e5a:	f01b fda7 	bl	80249ac <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 8008e5e:	bb40      	cbnz	r0, 8008eb2 <lv_img_decoder_built_in_open+0x7a>
        if(dsc->user_data == NULL) {
 8008e60:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008e62:	b94d      	cbnz	r5, 8008e78 <lv_img_decoder_built_in_open+0x40>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8008e64:	2014      	movs	r0, #20
 8008e66:	f009 fc57 	bl	8012718 <lv_mem_alloc>
 8008e6a:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8008e6c:	b900      	cbnz	r0, 8008e70 <lv_img_decoder_built_in_open+0x38>
 8008e6e:	e7fe      	b.n	8008e6e <lv_img_decoder_built_in_open+0x36>
 8008e70:	2214      	movs	r2, #20
 8008e72:	4629      	mov	r1, r5
 8008e74:	f011 fc88 	bl	801a788 <memset>
    return memcpy(dst, src, len);
 8008e78:	220c      	movs	r2, #12
 8008e7a:	a901      	add	r1, sp, #4
 8008e7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e7e:	f011 fc78 	bl	801a772 <memcpy>
    lv_img_cf_t cf = dsc->header.cf;
 8008e82:	7d23      	ldrb	r3, [r4, #20]
 8008e84:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008e88:	1f03      	subs	r3, r0, #4
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d915      	bls.n	8008eba <lv_img_decoder_built_in_open+0x82>
 8008e8e:	1fc3      	subs	r3, r0, #7
 8008e90:	2b0d      	cmp	r3, #13
 8008e92:	d83c      	bhi.n	8008f0e <lv_img_decoder_built_in_open+0xd6>
 8008e94:	e8df f003 	tbb	[pc, r3]
 8008e98:	18181818 	.word	0x18181818
 8008e9c:	11161616 	.word	0x11161616
 8008ea0:	3b3b3b3b 	.word	0x3b3b3b3b
 8008ea4:	113b      	.short	0x113b
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1eb      	bne.n	8008e82 <lv_img_decoder_built_in_open+0x4a>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8008eaa:	684b      	ldr	r3, [r1, #4]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1e7      	bne.n	8008e82 <lv_img_decoder_built_in_open+0x4a>
            for(i = 0; i < palette_size; i++) {
 8008eb2:	2000      	movs	r0, #0
}
 8008eb4:	b004      	add	sp, #16
 8008eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8008eba:	7c23      	ldrb	r3, [r4, #16]
 8008ebc:	b913      	cbnz	r3, 8008ec4 <lv_img_decoder_built_in_open+0x8c>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8008ebe:	6863      	ldr	r3, [r4, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	61a3      	str	r3, [r4, #24]
            return LV_RES_OK;
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	e7f5      	b.n	8008eb4 <lv_img_decoder_built_in_open+0x7c>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8008ec8:	f7fe fe02 	bl	8007ad0 <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
 8008ecc:	6a65      	ldr	r5, [r4, #36]	; 0x24
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8008ece:	4680      	mov	r8, r0
        if(dsc->user_data == NULL) {
 8008ed0:	b94d      	cbnz	r5, 8008ee6 <lv_img_decoder_built_in_open+0xae>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8008ed2:	2014      	movs	r0, #20
 8008ed4:	f009 fc20 	bl	8012718 <lv_mem_alloc>
 8008ed8:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8008eda:	b900      	cbnz	r0, 8008ede <lv_img_decoder_built_in_open+0xa6>
 8008edc:	e7fe      	b.n	8008edc <lv_img_decoder_built_in_open+0xa4>
    memset(dst, 0x00, len);
 8008ede:	2214      	movs	r2, #20
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	f011 fc51 	bl	801a788 <memset>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8008ee6:	2002      	movs	r0, #2
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8008ee8:	6a65      	ldr	r5, [r4, #36]	; 0x24
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8008eea:	fa00 f008 	lsl.w	r0, r0, r8
 8008eee:	f009 fc13 	bl	8012718 <lv_mem_alloc>
 8008ef2:	60e8      	str	r0, [r5, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 8008ef4:	b900      	cbnz	r0, 8008ef8 <lv_img_decoder_built_in_open+0xc0>
 8008ef6:	e7fe      	b.n	8008ef6 <lv_img_decoder_built_in_open+0xbe>
        uint32_t palette_size = 1 << px_size;
 8008ef8:	2601      	movs	r6, #1
 8008efa:	fa06 f608 	lsl.w	r6, r6, r8
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 8008efe:	4630      	mov	r0, r6
 8008f00:	f009 fc0a 	bl	8012718 <lv_mem_alloc>
 8008f04:	6128      	str	r0, [r5, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 8008f06:	b900      	cbnz	r0, 8008f0a <lv_img_decoder_built_in_open+0xd2>
 8008f08:	e7fe      	b.n	8008f08 <lv_img_decoder_built_in_open+0xd0>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 8008f0a:	68eb      	ldr	r3, [r5, #12]
 8008f0c:	b923      	cbnz	r3, 8008f18 <lv_img_decoder_built_in_open+0xe0>
        lv_img_decoder_built_in_close(decoder, dsc);
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4638      	mov	r0, r7
 8008f12:	f016 fb1f 	bl	801f554 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 8008f16:	e7cc      	b.n	8008eb2 <lv_img_decoder_built_in_open+0x7a>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8008f18:	7c23      	ldrb	r3, [r4, #16]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d124      	bne.n	8008f68 <lv_img_decoder_built_in_open+0x130>
            for(i = 0; i < palette_size; i++) {
 8008f1e:	2400      	movs	r4, #0
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 8008f20:	2200      	movs	r2, #0
 8008f22:	2104      	movs	r1, #4
 8008f24:	4628      	mov	r0, r5
 8008f26:	f01b fcff 	bl	8024928 <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 8008f2a:	42b4      	cmp	r4, r6
 8008f2c:	d0ca      	beq.n	8008ec4 <lv_img_decoder_built_in_open+0x8c>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8008f2e:	2204      	movs	r2, #4
 8008f30:	2300      	movs	r3, #0
 8008f32:	4628      	mov	r0, r5
 8008f34:	eb0d 0102 	add.w	r1, sp, r2
 8008f38:	f01b fc34 	bl	80247a4 <lv_fs_read>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8008f3c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8008f40:	f89d 3004 	ldrb.w	r3, [sp, #4]
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8008f44:	0889      	lsrs	r1, r1, #2
 8008f46:	68ea      	ldr	r2, [r5, #12]
 8008f48:	08db      	lsrs	r3, r3, #3
 8008f4a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8008f4e:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8008f52:	08c9      	lsrs	r1, r1, #3
 8008f54:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 8008f58:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
 8008f5c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008f60:	692b      	ldr	r3, [r5, #16]
 8008f62:	551a      	strb	r2, [r3, r4]
            for(i = 0; i < palette_size; i++) {
 8008f64:	3401      	adds	r4, #1
 8008f66:	e7e0      	b.n	8008f2a <lv_img_decoder_built_in_open+0xf2>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8008f68:	6863      	ldr	r3, [r4, #4]
            for(i = 0; i < palette_size; i++) {
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	689a      	ldr	r2, [r3, #8]
 8008f6e:	42b0      	cmp	r0, r6
 8008f70:	f102 0204 	add.w	r2, r2, #4
 8008f74:	d0a6      	beq.n	8008ec4 <lv_img_decoder_built_in_open+0x8c>
 8008f76:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 8008f7a:	f812 3c04 	ldrb.w	r3, [r2, #-4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8008f7e:	08a4      	lsrs	r4, r4, #2
 8008f80:	68e9      	ldr	r1, [r5, #12]
 8008f82:	08db      	lsrs	r3, r3, #3
 8008f84:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8008f88:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8008f8c:	08e4      	lsrs	r4, r4, #3
 8008f8e:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 8008f92:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 8008f96:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008f9a:	692b      	ldr	r3, [r5, #16]
 8008f9c:	5419      	strb	r1, [r3, r0]
            for(i = 0; i < palette_size; i++) {
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	e7e5      	b.n	8008f6e <lv_img_decoder_built_in_open+0x136>
 8008fa2:	bf00      	nop
 8008fa4:	0802ab06 	.word	0x0802ab06

08008fa8 <lv_img_decoder_get_info>:
{
 8008fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fac:	460f      	mov	r7, r1
 8008fae:	4606      	mov	r6, r0
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	f011 fbe7 	bl	801a788 <memset>
    if(src == NULL) return LV_RES_INV;
 8008fba:	b91e      	cbnz	r6, 8008fc4 <lv_img_decoder_get_info+0x1c>
 8008fbc:	2500      	movs	r5, #0
}
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f015 fc6d 	bl	801e8a4 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8008fca:	b910      	cbnz	r0, 8008fd2 <lv_img_decoder_get_info+0x2a>
        if(img_dsc->data == NULL) return LV_RES_INV;
 8008fcc:	68b3      	ldr	r3, [r6, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0f4      	beq.n	8008fbc <lv_img_decoder_get_info+0x14>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8008fd2:	480c      	ldr	r0, [pc, #48]	; (8009004 <lv_img_decoder_get_info+0x5c>)
    lv_res_t res = LV_RES_INV;
 8008fd4:	2500      	movs	r5, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8008fd6:	f01b fdad 	bl	8024b34 <_lv_ll_get_head>
 8008fda:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8009004 <lv_img_decoder_get_info+0x5c>
 8008fde:	4604      	mov	r4, r0
 8008fe0:	2c00      	cmp	r4, #0
 8008fe2:	d0ec      	beq.n	8008fbe <lv_img_decoder_get_info+0x16>
        if(d->info_cb) {
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	b133      	cbz	r3, 8008ff6 <lv_img_decoder_get_info+0x4e>
            res = d->info_cb(d, src, header);
 8008fe8:	463a      	mov	r2, r7
 8008fea:	4631      	mov	r1, r6
 8008fec:	4620      	mov	r0, r4
 8008fee:	4798      	blx	r3
            if(res == LV_RES_OK) break;
 8008ff0:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 8008ff2:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
 8008ff4:	d0e3      	beq.n	8008fbe <lv_img_decoder_get_info+0x16>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	4640      	mov	r0, r8
 8008ffa:	f01b fda1 	bl	8024b40 <_lv_ll_get_next>
 8008ffe:	4604      	mov	r4, r0
 8009000:	e7ee      	b.n	8008fe0 <lv_img_decoder_get_info+0x38>
 8009002:	bf00      	nop
 8009004:	240013bc 	.word	0x240013bc

08009008 <lv_img_decoder_open>:
{
 8009008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800900c:	460f      	mov	r7, r1
 800900e:	4616      	mov	r6, r2
 8009010:	2100      	movs	r1, #0
 8009012:	2228      	movs	r2, #40	; 0x28
 8009014:	4604      	mov	r4, r0
 8009016:	461d      	mov	r5, r3
 8009018:	f011 fbb6 	bl	801a788 <memset>
    if(src == NULL) return LV_RES_INV;
 800901c:	b91f      	cbnz	r7, 8009026 <lv_img_decoder_open+0x1e>
 800901e:	2600      	movs	r6, #0
}
 8009020:	4630      	mov	r0, r6
 8009022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8009026:	4638      	mov	r0, r7
 8009028:	f015 fc3c 	bl	801e8a4 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800902c:	b938      	cbnz	r0, 800903e <lv_img_decoder_open+0x36>
        if(img_dsc->data == NULL) return LV_RES_INV;
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0f4      	beq.n	800901e <lv_img_decoder_open+0x16>
    dsc->color    = color;
 8009034:	8126      	strh	r6, [r4, #8]
    dsc->src_type = src_type;
 8009036:	7420      	strb	r0, [r4, #16]
    dsc->frame_id = frame_id;
 8009038:	60e5      	str	r5, [r4, #12]
        dsc->src = src;
 800903a:	6067      	str	r7, [r4, #4]
 800903c:	e010      	b.n	8009060 <lv_img_decoder_open+0x58>
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800903e:	2801      	cmp	r0, #1
    dsc->color    = color;
 8009040:	8126      	strh	r6, [r4, #8]
    dsc->src_type = src_type;
 8009042:	7420      	strb	r0, [r4, #16]
    dsc->frame_id = frame_id;
 8009044:	60e5      	str	r5, [r4, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8009046:	d1f8      	bne.n	800903a <lv_img_decoder_open+0x32>
        size_t fnlen = strlen(src);
 8009048:	4638      	mov	r0, r7
 800904a:	f011 fb7f 	bl	801a74c <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 800904e:	3001      	adds	r0, #1
 8009050:	f009 fb62 	bl	8012718 <lv_mem_alloc>
 8009054:	6060      	str	r0, [r4, #4]
        LV_ASSERT_MALLOC(dsc->src);
 8009056:	b900      	cbnz	r0, 800905a <lv_img_decoder_open+0x52>
 8009058:	e7fe      	b.n	8009058 <lv_img_decoder_open+0x50>
        strcpy((char *)dsc->src, src);
 800905a:	4639      	mov	r1, r7
 800905c:	f011 fb6c 	bl	801a738 <strcpy>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8009060:	4819      	ldr	r0, [pc, #100]	; (80090c8 <lv_img_decoder_open+0xc0>)
    lv_res_t res = LV_RES_INV;
 8009062:	2600      	movs	r6, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8009064:	f01b fd66 	bl	8024b34 <_lv_ll_get_head>
        res = decoder->info_cb(decoder, src, &dsc->header);
 8009068:	f104 0814 	add.w	r8, r4, #20
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800906c:	4605      	mov	r5, r0
 800906e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80090c8 <lv_img_decoder_open+0xc0>
 8009072:	b935      	cbnz	r5, 8009082 <lv_img_decoder_open+0x7a>
    if(dsc->src_type == LV_IMG_SRC_FILE)
 8009074:	7c23      	ldrb	r3, [r4, #16]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d1d2      	bne.n	8009020 <lv_img_decoder_open+0x18>
        lv_mem_free((void *)dsc->src);
 800907a:	6860      	ldr	r0, [r4, #4]
 800907c:	f009 fb6a 	bl	8012754 <lv_mem_free>
 8009080:	e7ce      	b.n	8009020 <lv_img_decoder_open+0x18>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 8009082:	682b      	ldr	r3, [r5, #0]
 8009084:	b1d3      	cbz	r3, 80090bc <lv_img_decoder_open+0xb4>
 8009086:	686a      	ldr	r2, [r5, #4]
 8009088:	b1c2      	cbz	r2, 80090bc <lv_img_decoder_open+0xb4>
        res = decoder->info_cb(decoder, src, &dsc->header);
 800908a:	4642      	mov	r2, r8
 800908c:	4639      	mov	r1, r7
 800908e:	4628      	mov	r0, r5
 8009090:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 8009092:	2801      	cmp	r0, #1
        res = decoder->info_cb(decoder, src, &dsc->header);
 8009094:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
 8009096:	d111      	bne.n	80090bc <lv_img_decoder_open+0xb4>
        dsc->decoder = decoder;
 8009098:	6025      	str	r5, [r4, #0]
        res = decoder->open_cb(decoder, dsc);
 800909a:	4621      	mov	r1, r4
 800909c:	686b      	ldr	r3, [r5, #4]
 800909e:	4628      	mov	r0, r5
 80090a0:	4798      	blx	r3
        if(res == LV_RES_OK) return res;
 80090a2:	2801      	cmp	r0, #1
        res = decoder->open_cb(decoder, dsc);
 80090a4:	4606      	mov	r6, r0
        if(res == LV_RES_OK) return res;
 80090a6:	d0bb      	beq.n	8009020 <lv_img_decoder_open+0x18>
 80090a8:	2204      	movs	r2, #4
 80090aa:	2100      	movs	r1, #0
 80090ac:	4640      	mov	r0, r8
 80090ae:	f011 fb6b 	bl	801a788 <memset>
        dsc->error_msg = NULL;
 80090b2:	2300      	movs	r3, #0
 80090b4:	6223      	str	r3, [r4, #32]
        dsc->img_data  = NULL;
 80090b6:	61a3      	str	r3, [r4, #24]
        dsc->user_data = NULL;
 80090b8:	6263      	str	r3, [r4, #36]	; 0x24
        dsc->time_to_open = 0;
 80090ba:	61e3      	str	r3, [r4, #28]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 80090bc:	4629      	mov	r1, r5
 80090be:	4648      	mov	r0, r9
 80090c0:	f01b fd3e 	bl	8024b40 <_lv_ll_get_next>
 80090c4:	4605      	mov	r5, r0
 80090c6:	e7d4      	b.n	8009072 <lv_img_decoder_open+0x6a>
 80090c8:	240013bc 	.word	0x240013bc

080090cc <lv_img_decoder_create>:
{
 80090cc:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 80090ce:	4806      	ldr	r0, [pc, #24]	; (80090e8 <lv_img_decoder_create+0x1c>)
 80090d0:	f01b fcbe 	bl	8024a50 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(decoder);
 80090d4:	4604      	mov	r4, r0
 80090d6:	b900      	cbnz	r0, 80090da <lv_img_decoder_create+0xe>
 80090d8:	e7fe      	b.n	80090d8 <lv_img_decoder_create+0xc>
 80090da:	2214      	movs	r2, #20
 80090dc:	2100      	movs	r1, #0
 80090de:	f011 fb53 	bl	801a788 <memset>
}
 80090e2:	4620      	mov	r0, r4
 80090e4:	bd10      	pop	{r4, pc}
 80090e6:	bf00      	nop
 80090e8:	240013bc 	.word	0x240013bc

080090ec <_lv_img_decoder_init>:
{
 80090ec:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 80090ee:	2114      	movs	r1, #20
 80090f0:	4807      	ldr	r0, [pc, #28]	; (8009110 <_lv_img_decoder_init+0x24>)
 80090f2:	f01b fca5 	bl	8024a40 <_lv_ll_init>
    decoder = lv_img_decoder_create();
 80090f6:	f7ff ffe9 	bl	80090cc <lv_img_decoder_create>
    LV_ASSERT_MALLOC(decoder);
 80090fa:	b900      	cbnz	r0, 80090fe <_lv_img_decoder_init+0x12>
 80090fc:	e7fe      	b.n	80090fc <_lv_img_decoder_init+0x10>
    decoder->info_cb = info_cb;
 80090fe:	4b05      	ldr	r3, [pc, #20]	; (8009114 <_lv_img_decoder_init+0x28>)
 8009100:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 8009102:	4b05      	ldr	r3, [pc, #20]	; (8009118 <_lv_img_decoder_init+0x2c>)
 8009104:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 8009106:	4b05      	ldr	r3, [pc, #20]	; (800911c <_lv_img_decoder_init+0x30>)
 8009108:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800910a:	4b05      	ldr	r3, [pc, #20]	; (8009120 <_lv_img_decoder_init+0x34>)
 800910c:	60c3      	str	r3, [r0, #12]
}
 800910e:	bd08      	pop	{r3, pc}
 8009110:	240013bc 	.word	0x240013bc
 8009114:	08008a4d 	.word	0x08008a4d
 8009118:	08008e39 	.word	0x08008e39
 800911c:	08008afd 	.word	0x08008afd
 8009120:	0801f555 	.word	0x0801f555

08009124 <lv_draw_sw_init_ctx>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_init_ctx(lv_disp_drv_t * drv, lv_draw_ctx_t * draw_ctx)
{
 8009124:	b510      	push	{r4, lr}
 8009126:	460c      	mov	r4, r1
 8009128:	2258      	movs	r2, #88	; 0x58
 800912a:	2100      	movs	r1, #0
 800912c:	4620      	mov	r0, r4
 800912e:	f011 fb2b 	bl	801a788 <memset>
    LV_UNUSED(drv);

    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));

    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 8009132:	4b10      	ldr	r3, [pc, #64]	; (8009174 <lv_draw_sw_init_ctx+0x50>)
 8009134:	6163      	str	r3, [r4, #20]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 8009136:	4b10      	ldr	r3, [pc, #64]	; (8009178 <lv_draw_sw_init_ctx+0x54>)
 8009138:	6123      	str	r3, [r4, #16]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 800913a:	4b10      	ldr	r3, [pc, #64]	; (800917c <lv_draw_sw_init_ctx+0x58>)
 800913c:	6323      	str	r3, [r4, #48]	; 0x30
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 800913e:	4b10      	ldr	r3, [pc, #64]	; (8009180 <lv_draw_sw_init_ctx+0x5c>)
 8009140:	6223      	str	r3, [r4, #32]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 8009142:	4b10      	ldr	r3, [pc, #64]	; (8009184 <lv_draw_sw_init_ctx+0x60>)
 8009144:	61a3      	str	r3, [r4, #24]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 8009146:	4b10      	ldr	r3, [pc, #64]	; (8009188 <lv_draw_sw_init_ctx+0x64>)
 8009148:	6263      	str	r3, [r4, #36]	; 0x24
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 800914a:	4b10      	ldr	r3, [pc, #64]	; (800918c <lv_draw_sw_init_ctx+0x68>)
 800914c:	62a3      	str	r3, [r4, #40]	; 0x28
#if LV_DRAW_COMPLEX
    draw_sw_ctx->base_draw.draw_transform = lv_draw_sw_transform;
 800914e:	4b10      	ldr	r3, [pc, #64]	; (8009190 <lv_draw_sw_init_ctx+0x6c>)
 8009150:	62e3      	str	r3, [r4, #44]	; 0x2c
#endif
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 8009152:	4b10      	ldr	r3, [pc, #64]	; (8009194 <lv_draw_sw_init_ctx+0x70>)
 8009154:	6363      	str	r3, [r4, #52]	; 0x34
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 8009156:	4b10      	ldr	r3, [pc, #64]	; (8009198 <lv_draw_sw_init_ctx+0x74>)
 8009158:	63a3      	str	r3, [r4, #56]	; 0x38
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 800915a:	4b10      	ldr	r3, [pc, #64]	; (800919c <lv_draw_sw_init_ctx+0x78>)
 800915c:	63e3      	str	r3, [r4, #60]	; 0x3c
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 800915e:	4b10      	ldr	r3, [pc, #64]	; (80091a0 <lv_draw_sw_init_ctx+0x7c>)
 8009160:	6423      	str	r3, [r4, #64]	; 0x40
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 8009162:	4b10      	ldr	r3, [pc, #64]	; (80091a4 <lv_draw_sw_init_ctx+0x80>)
 8009164:	6463      	str	r3, [r4, #68]	; 0x44
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 8009166:	4b10      	ldr	r3, [pc, #64]	; (80091a8 <lv_draw_sw_init_ctx+0x84>)
 8009168:	64a3      	str	r3, [r4, #72]	; 0x48
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 800916a:	4b10      	ldr	r3, [pc, #64]	; (80091ac <lv_draw_sw_init_ctx+0x88>)
 800916c:	6563      	str	r3, [r4, #84]	; 0x54
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 800916e:	232c      	movs	r3, #44	; 0x2c
 8009170:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8009172:	bd10      	pop	{r4, pc}
 8009174:	0801f6ad 	.word	0x0801f6ad
 8009178:	08021929 	.word	0x08021929
 800917c:	08021359 	.word	0x08021359
 8009180:	08009df9 	.word	0x08009df9
 8009184:	080205a7 	.word	0x080205a7
 8009188:	0800a221 	.word	0x0800a221
 800918c:	0800a979 	.word	0x0800a979
 8009190:	08022901 	.word	0x08022901
 8009194:	0801f5c7 	.word	0x0801f5c7
 8009198:	0801f5c9 	.word	0x0801f5c9
 800919c:	08020a65 	.word	0x08020a65
 80091a0:	08020b53 	.word	0x08020b53
 80091a4:	08020baf 	.word	0x08020baf
 80091a8:	08020c41 	.word	0x08020c41
 80091ac:	080091b1 	.word	0x080091b1

080091b0 <lv_draw_sw_blend_basic>:

    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
}

LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_blend_basic(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 80091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_opa_t * mask;
    if(dsc->mask_buf == NULL) mask = NULL;
 80091b4:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
 80091b8:	b091      	sub	sp, #68	; 0x44
 80091ba:	4681      	mov	r9, r0
 80091bc:	4688      	mov	r8, r1
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 80091be:	7c0b      	ldrb	r3, [r1, #16]
 80091c0:	f1ba 0f00 	cmp.w	sl, #0
 80091c4:	d002      	beq.n	80091cc <lv_draw_sw_blend_basic+0x1c>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 8092 	beq.w	80092f0 <lv_draw_sw_blend_basic+0x140>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 80091cc:	2b01      	cmp	r3, #1
    else mask = dsc->mask_buf;

    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 80091ce:	f8d9 3004 	ldr.w	r3, [r9, #4]

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80091d2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80091d6:	a80e      	add	r0, sp, #56	; 0x38
 80091d8:	f8d8 1000 	ldr.w	r1, [r8]
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 80091dc:	bf08      	it	eq
 80091de:	f04f 0a00 	moveq.w	sl, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80091e2:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80091e6:	f9b3 4000 	ldrsh.w	r4, [r3]
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80091ea:	f01b f876 	bl	80242da <_lv_area_intersect>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d07e      	beq.n	80092f0 <lv_draw_sw_blend_basic+0x140>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80091f2:	f7fe f83b 	bl	800726c <_lv_refr_get_disp_refreshing>
 80091f6:	3501      	adds	r5, #1
    lv_color_t * dest_buf = draw_ctx->buf;
    if(disp->driver->set_px_cb == NULL) {
 80091f8:	6802      	ldr	r2, [r0, #0]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80091fa:	4607      	mov	r7, r0
 80091fc:	1b2d      	subs	r5, r5, r4
    lv_color_t * dest_buf = draw_ctx->buf;
 80091fe:	f8d9 b000 	ldr.w	fp, [r9]
    if(disp->driver->set_px_cb == NULL) {
 8009202:	69d3      	ldr	r3, [r2, #28]
 8009204:	b22d      	sxth	r5, r5
 8009206:	b9cb      	cbnz	r3, 800923c <lv_draw_sw_blend_basic+0x8c>
        if(disp->driver->screen_transp == 0) {
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 8009208:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800920c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8009210:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8009214:	f9b0 0000 	ldrsh.w	r0, [r0]
 8009218:	1a5b      	subs	r3, r3, r1
 800921a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 800921e:	1a09      	subs	r1, r1, r0
        if(disp->driver->screen_transp == 0) {
 8009220:	7c10      	ldrb	r0, [r2, #16]
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 8009222:	436b      	muls	r3, r5
        if(disp->driver->screen_transp == 0) {
 8009224:	0644      	lsls	r4, r0, #25
        }
        else {
            /*With LV_COLOR_DEPTH 16 it means ARGB8565 (3 bytes format)*/
            uint8_t * dest_buf8 = (uint8_t *) dest_buf;
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8009226:	bf4b      	itete	mi
 8009228:	eb03 0343 	addmi.w	r3, r3, r3, lsl #1
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 800922c:	185b      	addpl	r3, r3, r1
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800922e:	eb01 0141 	addmi.w	r1, r1, r1, lsl #1
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 8009232:	eb0b 0b43 	addpl.w	fp, fp, r3, lsl #1
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8009236:	bf44      	itt	mi
 8009238:	185b      	addmi	r3, r3, r1
 800923a:	449b      	addmi	fp, r3
            dest_buf = (lv_color_t *)dest_buf8;
        }
    }

    const lv_color_t * src_buf = dsc->src_buf;
 800923c:	f8d8 4004 	ldr.w	r4, [r8, #4]
    lv_coord_t src_stride;
    if(src_buf) {
 8009240:	2c00      	cmp	r4, #0
 8009242:	d058      	beq.n	80092f6 <lv_draw_sw_blend_basic+0x146>
        src_stride = lv_area_get_width(dsc->blend_area);
 8009244:	f8d8 3000 	ldr.w	r3, [r8]
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 8009248:	f9bd 003a 	ldrsh.w	r0, [sp, #58]	; 0x3a
 800924c:	889e      	ldrh	r6, [r3, #4]
 800924e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009252:	3601      	adds	r6, #1
 8009254:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009258:	1a76      	subs	r6, r6, r1
 800925a:	1ac0      	subs	r0, r0, r3
 800925c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8009260:	b236      	sxth	r6, r6
 8009262:	1a5b      	subs	r3, r3, r1
 8009264:	fb06 3300 	mla	r3, r6, r0, r3
 8009268:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    else {
        src_stride = 0;
    }

    lv_coord_t mask_stride;
    if(mask) {
 800926c:	f1ba 0f00 	cmp.w	sl, #0
 8009270:	d057      	beq.n	8009322 <lv_draw_sw_blend_basic+0x172>
        /*Round the values in the mask if anti-aliasing is disabled*/
        if(disp->driver->antialiasing == 0) {
 8009272:	7c13      	ldrb	r3, [r2, #16]
 8009274:	0718      	lsls	r0, r3, #28
 8009276:	d540      	bpl.n	80092fa <lv_draw_sw_blend_basic+0x14a>
            for(i = 0; i < mask_size; i++) {
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
            }
        }

        mask_stride = lv_area_get_width(dsc->mask_area);
 8009278:	f8d8 0014 	ldr.w	r0, [r8, #20]
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 800927c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8009280:	8883      	ldrh	r3, [r0, #4]
 8009282:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009286:	3301      	adds	r3, #1
 8009288:	1a9b      	subs	r3, r3, r2
 800928a:	b21b      	sxth	r3, r3
 800928c:	9307      	str	r3, [sp, #28]
 800928e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8009292:	1ac9      	subs	r1, r1, r3
 8009294:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	9a07      	ldr	r2, [sp, #28]
 800929c:	fb02 3301 	mla	r3, r2, r1, r3
 80092a0:	449a      	add	sl, r3
    }
    else {
        mask_stride = 0;
    }

    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 80092a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80092a6:	a80e      	add	r0, sp, #56	; 0x38
 80092a8:	885a      	ldrh	r2, [r3, #2]
 80092aa:	8819      	ldrh	r1, [r3, #0]
 80092ac:	4252      	negs	r2, r2
 80092ae:	4249      	negs	r1, r1
 80092b0:	b212      	sxth	r2, r2
 80092b2:	b209      	sxth	r1, r1
 80092b4:	f01b f800 	bl	80242b8 <lv_area_move>


    if(disp->driver->set_px_cb) {
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	f898 2018 	ldrb.w	r2, [r8, #24]
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80092c4:	9204      	str	r2, [sp, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 80e5 	beq.w	8009496 <lv_draw_sw_blend_basic+0x2e6>
        if(dsc->src_buf == NULL) {
 80092cc:	2f00      	cmp	r7, #0
 80092ce:	d17c      	bne.n	80093ca <lv_draw_sw_blend_basic+0x21a>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 80092d0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80092d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 **********************/

static void fill_set_px(lv_color_t * dest_buf, const lv_area_t * blend_area, lv_coord_t dest_stride,
                        lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stide)
{
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80092d8:	f7fd ffc8 	bl	800726c <_lv_refr_get_disp_refreshing>
 80092dc:	4681      	mov	r9, r0

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 80092de:	f1ba 0f00 	cmp.w	sl, #0
 80092e2:	d13b      	bne.n	800935c <lv_draw_sw_blend_basic+0x1ac>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 80092e4:	f9bd 403a 	ldrsh.w	r4, [sp, #58]	; 0x3a
 80092e8:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80092ec:	429c      	cmp	r4, r3
 80092ee:	dd1b      	ble.n	8009328 <lv_draw_sw_blend_basic+0x178>
}
 80092f0:	b011      	add	sp, #68	; 0x44
 80092f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        src_stride = 0;
 80092f6:	4626      	mov	r6, r4
 80092f8:	e7b8      	b.n	800926c <lv_draw_sw_blend_basic+0xbc>
            int32_t mask_size = lv_area_get_size(dsc->mask_area);
 80092fa:	f8d8 0014 	ldr.w	r0, [r8, #20]
 80092fe:	f01a ffbe 	bl	802427e <lv_area_get_size>
            for(i = 0; i < mask_size; i++) {
 8009302:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009306:	f1ca 0101 	rsb	r1, sl, #1
 800930a:	18ca      	adds	r2, r1, r3
 800930c:	4290      	cmp	r0, r2
 800930e:	ddb3      	ble.n	8009278 <lv_draw_sw_blend_basic+0xc8>
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8009310:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8009314:	2a80      	cmp	r2, #128	; 0x80
 8009316:	f04f 32ff 	mov.w	r2, #4294967295
 800931a:	bf98      	it	ls
 800931c:	2200      	movls	r2, #0
 800931e:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < mask_size; i++) {
 8009320:	e7f3      	b.n	800930a <lv_draw_sw_blend_basic+0x15a>
        mask_stride = 0;
 8009322:	f8cd a01c 	str.w	sl, [sp, #28]
 8009326:	e7bc      	b.n	80092a2 <lv_draw_sw_blend_basic+0xf2>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 8009328:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 800932c:	b227      	sxth	r7, r4
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 800932e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8009332:	429e      	cmp	r6, r3
 8009334:	dd01      	ble.n	800933a <lv_draw_sw_blend_basic+0x18a>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 8009336:	3401      	adds	r4, #1
 8009338:	e7d6      	b.n	80092e8 <lv_draw_sw_blend_basic+0x138>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 800933a:	9b04      	ldr	r3, [sp, #16]
 800933c:	462a      	mov	r2, r5
 800933e:	f8d9 0000 	ldr.w	r0, [r9]
 8009342:	4659      	mov	r1, fp
 8009344:	9302      	str	r3, [sp, #8]
 8009346:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800934a:	9700      	str	r7, [sp, #0]
 800934c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009350:	b233      	sxth	r3, r6
 8009352:	f8d0 801c 	ldr.w	r8, [r0, #28]
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 8009356:	3601      	adds	r6, #1
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 8009358:	47c0      	blx	r8
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 800935a:	e7e8      	b.n	800932e <lv_draw_sw_blend_basic+0x17e>
 800935c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8009360:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8009364:	3601      	adds	r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009366:	f8bd 403e 	ldrh.w	r4, [sp, #62]	; 0x3e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800936a:	1af6      	subs	r6, r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800936c:	3401      	adds	r4, #1
 800936e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
            }
        }
    }
    else {
        int32_t w = lv_area_get_width(blend_area);
 8009372:	b236      	sxth	r6, r6
 8009374:	1ae4      	subs	r4, r4, r3
        int32_t h = lv_area_get_height(blend_area);
 8009376:	b224      	sxth	r4, r4

        for(y = 0; y < h; y++) {
 8009378:	42bc      	cmp	r4, r7
 800937a:	ddb9      	ble.n	80092f0 <lv_draw_sw_blend_basic+0x140>
            for(x = 0; x < w; x++) {
 800937c:	f04f 0800 	mov.w	r8, #0
 8009380:	e01d      	b.n	80093be <lv_draw_sw_blend_basic+0x20e>
                if(mask[x]) {
 8009382:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8009386:	b1c2      	cbz	r2, 80093ba <lv_draw_sw_blend_basic+0x20a>


                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8009388:	9904      	ldr	r1, [sp, #16]
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 800938a:	f8d9 0000 	ldr.w	r0, [r9]
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 800938e:	fb11 f202 	smulbb	r2, r1, r2
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8009392:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8009396:	4659      	mov	r1, fp
 8009398:	0a12      	lsrs	r2, r2, #8
 800939a:	4443      	add	r3, r8
 800939c:	9202      	str	r2, [sp, #8]
 800939e:	b21b      	sxth	r3, r3
 80093a0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80093a4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80093a8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80093ac:	443a      	add	r2, r7
 80093ae:	b212      	sxth	r2, r2
 80093b0:	9200      	str	r2, [sp, #0]
 80093b2:	69c2      	ldr	r2, [r0, #28]
 80093b4:	4694      	mov	ip, r2
 80093b6:	462a      	mov	r2, r5
 80093b8:	47e0      	blx	ip
            for(x = 0; x < w; x++) {
 80093ba:	f108 0801 	add.w	r8, r8, #1
 80093be:	4546      	cmp	r6, r8
 80093c0:	dcdf      	bgt.n	8009382 <lv_draw_sw_blend_basic+0x1d2>
                }
            }
            mask += mask_stide;
 80093c2:	9b07      	ldr	r3, [sp, #28]
        for(y = 0; y < h; y++) {
 80093c4:	3701      	adds	r7, #1
            mask += mask_stide;
 80093c6:	449a      	add	sl, r3
        for(y = 0; y < h; y++) {
 80093c8:	e7d6      	b.n	8009378 <lv_draw_sw_blend_basic+0x1c8>

static void map_set_px(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                       const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80093ca:	f7fd ff4f 	bl	800726c <_lv_refr_get_disp_refreshing>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80093ce:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80093d2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
        for(y = 0; y < h; y++) {
            for(x = 0; x < w; x++) {
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
                                        opa);
            }
            src_buf += src_stride;
 80093d6:	ea4f 0946 	mov.w	r9, r6, lsl #1
 80093da:	3301      	adds	r3, #1
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80093dc:	9005      	str	r0, [sp, #20]
 80093de:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80093e0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
    int32_t w = lv_area_get_width(dest_area);
 80093e4:	b21b      	sxth	r3, r3
 80093e6:	9306      	str	r3, [sp, #24]
 80093e8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80093ec:	3301      	adds	r3, #1
 80093ee:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);
 80093f0:	b21b      	sxth	r3, r3
 80093f2:	9308      	str	r3, [sp, #32]
    if(mask == NULL) {
 80093f4:	f1ba 0f00 	cmp.w	sl, #0
 80093f8:	d022      	beq.n	8009440 <lv_draw_sw_blend_basic+0x290>
        }
    }
    else {
        for(y = 0; y < h; y++) {
 80093fa:	2700      	movs	r7, #0
 80093fc:	9b08      	ldr	r3, [sp, #32]
 80093fe:	42bb      	cmp	r3, r7
 8009400:	f77f af76 	ble.w	80092f0 <lv_draw_sw_blend_basic+0x140>
            for(x = 0; x < w; x++) {
 8009404:	2600      	movs	r6, #0
 8009406:	e03e      	b.n	8009486 <lv_draw_sw_blend_basic+0x2d6>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8009408:	9b05      	ldr	r3, [sp, #20]
 800940a:	4659      	mov	r1, fp
 800940c:	9a04      	ldr	r2, [sp, #16]
 800940e:	6818      	ldr	r0, [r3, #0]
 8009410:	9202      	str	r2, [sp, #8]
 8009412:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 8009416:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800941a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800941e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8009422:	4433      	add	r3, r6
            for(x = 0; x < w; x++) {
 8009424:	3601      	adds	r6, #1
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8009426:	4452      	add	r2, sl
 8009428:	b21b      	sxth	r3, r3
 800942a:	b212      	sxth	r2, r2
 800942c:	9200      	str	r2, [sp, #0]
 800942e:	462a      	mov	r2, r5
 8009430:	69c7      	ldr	r7, [r0, #28]
 8009432:	47b8      	blx	r7
            for(x = 0; x < w; x++) {
 8009434:	9b06      	ldr	r3, [sp, #24]
 8009436:	42b3      	cmp	r3, r6
 8009438:	dce6      	bgt.n	8009408 <lv_draw_sw_blend_basic+0x258>
            src_buf += src_stride;
 800943a:	444c      	add	r4, r9
        for(y = 0; y < h; y++) {
 800943c:	f10a 0a01 	add.w	sl, sl, #1
 8009440:	9b08      	ldr	r3, [sp, #32]
 8009442:	4553      	cmp	r3, sl
 8009444:	f77f af54 	ble.w	80092f0 <lv_draw_sw_blend_basic+0x140>
            for(x = 0; x < w; x++) {
 8009448:	2600      	movs	r6, #0
 800944a:	e7f3      	b.n	8009434 <lv_draw_sw_blend_basic+0x284>
                if(mask[x]) {
 800944c:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8009450:	b1c2      	cbz	r2, 8009484 <lv_draw_sw_blend_basic+0x2d4>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8009452:	9904      	ldr	r1, [sp, #16]
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8009454:	9b05      	ldr	r3, [sp, #20]
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8009456:	fb11 f202 	smulbb	r2, r1, r2
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800945a:	4659      	mov	r1, fp
 800945c:	6818      	ldr	r0, [r3, #0]
 800945e:	0a12      	lsrs	r2, r2, #8
 8009460:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8009464:	9202      	str	r2, [sp, #8]
 8009466:	4433      	add	r3, r6
 8009468:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 800946c:	b21b      	sxth	r3, r3
 800946e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8009472:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8009476:	443a      	add	r2, r7
 8009478:	b212      	sxth	r2, r2
 800947a:	9200      	str	r2, [sp, #0]
 800947c:	462a      	mov	r2, r5
 800947e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8009482:	47c0      	blx	r8
            for(x = 0; x < w; x++) {
 8009484:	3601      	adds	r6, #1
 8009486:	9b06      	ldr	r3, [sp, #24]
 8009488:	42b3      	cmp	r3, r6
 800948a:	dcdf      	bgt.n	800944c <lv_draw_sw_blend_basic+0x29c>
                }
            }
            mask += mask_stride;
 800948c:	9b07      	ldr	r3, [sp, #28]
            src_buf += src_stride;
 800948e:	444c      	add	r4, r9
        for(y = 0; y < h; y++) {
 8009490:	3701      	adds	r7, #1
            mask += mask_stride;
 8009492:	449a      	add	sl, r3
        for(y = 0; y < h; y++) {
 8009494:	e7b2      	b.n	80093fc <lv_draw_sw_blend_basic+0x24c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009496:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800949a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800949e:	3201      	adds	r2, #1
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 80094a0:	f898 3019 	ldrb.w	r3, [r8, #25]
 80094a4:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80094a6:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80094aa:	b212      	sxth	r2, r2
 80094ac:	9205      	str	r2, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80094ae:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80094b2:	3201      	adds	r2, #1
 80094b4:	1a52      	subs	r2, r2, r1
    int32_t h = lv_area_get_height(dest_area);
 80094b6:	b212      	sxth	r2, r2
 80094b8:	9206      	str	r2, [sp, #24]
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f040 824f 	bne.w	800995e <lv_draw_sw_blend_basic+0x7ae>
        if(dsc->src_buf == NULL) {
 80094c0:	2f00      	cmp	r7, #0
 80094c2:	f040 814e 	bne.w	8009762 <lv_draw_sw_blend_basic+0x5b2>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 80094c6:	f8b8 4008 	ldrh.w	r4, [r8, #8]
    if(mask == NULL) {
 80094ca:	f1ba 0f00 	cmp.w	sl, #0
 80094ce:	d16d      	bne.n	80095ac <lv_draw_sw_blend_basic+0x3fc>
        if(opa >= LV_OPA_MAX) {
 80094d0:	9b04      	ldr	r3, [sp, #16]
                dest_buf += dest_stride;
 80094d2:	006d      	lsls	r5, r5, #1
        if(opa >= LV_OPA_MAX) {
 80094d4:	2bfc      	cmp	r3, #252	; 0xfc
 80094d6:	d82a      	bhi.n	800952e <lv_draw_sw_blend_basic+0x37e>
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 80094d8:	9a04      	ldr	r2, [sp, #16]
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 80094da:	0ae6      	lsrs	r6, r4, #11
 80094dc:	4651      	mov	r1, sl
 80094de:	4620      	mov	r0, r4
 80094e0:	4356      	muls	r6, r2
 80094e2:	f016 fed2 	bl	802028a <lv_color_mix>
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094e6:	f248 0881 	movw	r8, #32897	; 0x8081
 80094ea:	f000 031f 	and.w	r3, r0, #31
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 80094ee:	9604      	str	r6, [sp, #16]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 80094f0:	f3c4 1645 	ubfx	r6, r4, #5, #6
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 80094f4:	f004 041f 	and.w	r4, r4, #31
 80094f8:	f3c0 1145 	ubfx	r1, r0, #5, #6
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 80094fc:	4356      	muls	r6, r2
 80094fe:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 8009502:	4354      	muls	r4, r2
            lv_opa_t opa_inv = 255 - opa;
 8009504:	43d2      	mvns	r2, r2
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 8009506:	9607      	str	r6, [sp, #28]
            lv_color_t last_dest_color = lv_color_black();
 8009508:	4656      	mov	r6, sl
            lv_opa_t opa_inv = 255 - opa;
 800950a:	b2d2      	uxtb	r2, r2
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800950c:	9408      	str	r4, [sp, #32]
            for(y = 0; y < h; y++) {
 800950e:	46b6      	mov	lr, r6
 8009510:	9c06      	ldr	r4, [sp, #24]
 8009512:	45a6      	cmp	lr, r4
 8009514:	f6bf aeec 	bge.w	80092f0 <lv_draw_sw_blend_basic+0x140>
 8009518:	46dc      	mov	ip, fp
                for(x = 0; x < w; x++) {
 800951a:	2700      	movs	r7, #0
 800951c:	e03f      	b.n	800959e <lv_draw_sw_blend_basic+0x3ee>
                lv_color_fill(dest_buf, color, w);
 800951e:	4658      	mov	r0, fp
            for(y = 0; y < h; y++) {
 8009520:	f10a 0a01 	add.w	sl, sl, #1
                dest_buf += dest_stride;
 8009524:	44ab      	add	fp, r5
                lv_color_fill(dest_buf, color, w);
 8009526:	9a05      	ldr	r2, [sp, #20]
 8009528:	4621      	mov	r1, r4
 800952a:	f01b f894 	bl	8024656 <lv_color_fill>
            for(y = 0; y < h; y++) {
 800952e:	9b06      	ldr	r3, [sp, #24]
 8009530:	459a      	cmp	sl, r3
 8009532:	dbf4      	blt.n	800951e <lv_draw_sw_blend_basic+0x36e>
 8009534:	e6dc      	b.n	80092f0 <lv_draw_sw_blend_basic+0x140>
                    if(last_dest_color.full != dest_buf[x].full) {
 8009536:	4664      	mov	r4, ip
 8009538:	f83c 9b02 	ldrh.w	r9, [ip], #2
 800953c:	45b1      	cmp	r9, r6
 800953e:	d01f      	beq.n	8009580 <lv_draw_sw_blend_basic+0x3d0>
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009540:	7860      	ldrb	r0, [r4, #1]
 8009542:	9b04      	ldr	r3, [sp, #16]
 8009544:	08c0      	lsrs	r0, r0, #3
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009546:	8821      	ldrh	r1, [r4, #0]
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009548:	9e08      	ldr	r6, [sp, #32]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800954a:	fb00 3002 	mla	r0, r0, r2, r3
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800954e:	f3c1 1145 	ubfx	r1, r1, #5, #6
 8009552:	9b07      	ldr	r3, [sp, #28]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009554:	3080      	adds	r0, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009556:	fb01 3102 	mla	r1, r1, r2, r3
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800955a:	7823      	ldrb	r3, [r4, #0]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800955c:	fb08 f000 	mul.w	r0, r8, r0
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009560:	f003 031f 	and.w	r3, r3, #31
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009564:	3180      	adds	r1, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009566:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800956a:	fb03 6302 	mla	r3, r3, r2, r6
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800956e:	fb08 f101 	mul.w	r1, r8, r1
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009572:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009574:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009578:	fb08 f303 	mul.w	r3, r8, r3
 800957c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
                    dest_buf[x] = last_res_color;
 8009580:	7826      	ldrb	r6, [r4, #0]
                for(x = 0; x < w; x++) {
 8009582:	3701      	adds	r7, #1
                    dest_buf[x] = last_res_color;
 8009584:	f363 0604 	bfi	r6, r3, #0, #5
 8009588:	7026      	strb	r6, [r4, #0]
 800958a:	8826      	ldrh	r6, [r4, #0]
 800958c:	f361 164a 	bfi	r6, r1, #5, #6
 8009590:	8026      	strh	r6, [r4, #0]
 8009592:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8009596:	f360 06c7 	bfi	r6, r0, #3, #5
 800959a:	7066      	strb	r6, [r4, #1]
                for(x = 0; x < w; x++) {
 800959c:	464e      	mov	r6, r9
 800959e:	9c05      	ldr	r4, [sp, #20]
 80095a0:	42a7      	cmp	r7, r4
 80095a2:	dbc8      	blt.n	8009536 <lv_draw_sw_blend_basic+0x386>
                dest_buf += dest_stride;
 80095a4:	44ab      	add	fp, r5
            for(y = 0; y < h; y++) {
 80095a6:	f10e 0e01 	add.w	lr, lr, #1
 80095aa:	e7b1      	b.n	8009510 <lv_draw_sw_blend_basic+0x360>
        if(opa >= LV_OPA_MAX) {
 80095ac:	9a04      	ldr	r2, [sp, #16]
 80095ae:	2afc      	cmp	r2, #252	; 0xfc
 80095b0:	f240 809c 	bls.w	80096ec <lv_draw_sw_blend_basic+0x53c>
            int32_t x_end4 = w - 4;
 80095b4:	9b05      	ldr	r3, [sp, #20]
 80095b6:	eb04 4904 	add.w	r9, r4, r4, lsl #16
                mask += (mask_stride - w);
 80095ba:	9a05      	ldr	r2, [sp, #20]
            int32_t x_end4 = w - 4;
 80095bc:	3b04      	subs	r3, #4
 80095be:	9304      	str	r3, [sp, #16]
                dest_buf += (dest_stride - w);
 80095c0:	9b05      	ldr	r3, [sp, #20]
 80095c2:	1aed      	subs	r5, r5, r3
 80095c4:	006b      	lsls	r3, r5, #1
 80095c6:	9308      	str	r3, [sp, #32]
                mask += (mask_stride - w);
 80095c8:	9b07      	ldr	r3, [sp, #28]
 80095ca:	1a9b      	subs	r3, r3, r2
 80095cc:	9307      	str	r3, [sp, #28]
            for(y = 0; y < h; y++) {
 80095ce:	9b06      	ldr	r3, [sp, #24]
 80095d0:	429f      	cmp	r7, r3
 80095d2:	f6bf ae8d 	bge.w	80092f0 <lv_draw_sw_blend_basic+0x140>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 80095d6:	f04f 0800 	mov.w	r8, #0
 80095da:	e009      	b.n	80095f0 <lv_draw_sw_blend_basic+0x440>
                    FILL_NORMAL_MASK_PX(color)
 80095dc:	f81a 2b01 	ldrb.w	r2, [sl], #1
 80095e0:	2aff      	cmp	r2, #255	; 0xff
 80095e2:	d11d      	bne.n	8009620 <lv_draw_sw_blend_basic+0x470>
 80095e4:	f8ab 4000 	strh.w	r4, [fp]
 80095e8:	f10b 0b02 	add.w	fp, fp, #2
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 80095ec:	f108 0801 	add.w	r8, r8, #1
 80095f0:	9b05      	ldr	r3, [sp, #20]
 80095f2:	4655      	mov	r5, sl
 80095f4:	4598      	cmp	r8, r3
 80095f6:	da02      	bge.n	80095fe <lv_draw_sw_blend_basic+0x44e>
 80095f8:	f01a 0f03 	tst.w	sl, #3
 80095fc:	d1ee      	bne.n	80095dc <lv_draw_sw_blend_basic+0x42c>
                for(; x <= x_end4; x += 4) {
 80095fe:	9b04      	ldr	r3, [sp, #16]
 8009600:	4543      	cmp	r3, r8
 8009602:	da15      	bge.n	8009630 <lv_draw_sw_blend_basic+0x480>
 8009604:	46aa      	mov	sl, r5
 8009606:	eba8 0805 	sub.w	r8, r8, r5
                for(; x < w ; x++) {
 800960a:	eb08 030a 	add.w	r3, r8, sl
 800960e:	9a05      	ldr	r2, [sp, #20]
 8009610:	4293      	cmp	r3, r2
 8009612:	db5a      	blt.n	80096ca <lv_draw_sw_blend_basic+0x51a>
                dest_buf += (dest_stride - w);
 8009614:	9b08      	ldr	r3, [sp, #32]
            for(y = 0; y < h; y++) {
 8009616:	3701      	adds	r7, #1
                dest_buf += (dest_stride - w);
 8009618:	449b      	add	fp, r3
                mask += (mask_stride - w);
 800961a:	9b07      	ldr	r3, [sp, #28]
 800961c:	449a      	add	sl, r3
            for(y = 0; y < h; y++) {
 800961e:	e7d6      	b.n	80095ce <lv_draw_sw_blend_basic+0x41e>
                    FILL_NORMAL_MASK_PX(color)
 8009620:	f8bb 1000 	ldrh.w	r1, [fp]
 8009624:	4620      	mov	r0, r4
 8009626:	f016 fe30 	bl	802028a <lv_color_mix>
 800962a:	f8ab 0000 	strh.w	r0, [fp]
 800962e:	e7db      	b.n	80095e8 <lv_draw_sw_blend_basic+0x438>
                    uint32_t mask32 = *((uint32_t *)mask);
 8009630:	f855 2b04 	ldr.w	r2, [r5], #4
                        dest_buf += 4;
 8009634:	f10b 0608 	add.w	r6, fp, #8
                    if(mask32 == 0xFFFFFFFF) {
 8009638:	1c51      	adds	r1, r2, #1
 800963a:	d10e      	bne.n	800965a <lv_draw_sw_blend_basic+0x4aa>
                        if((lv_uintptr_t)dest_buf & 0x3) {
 800963c:	07b3      	lsls	r3, r6, #30
 800963e:	d006      	beq.n	800964e <lv_draw_sw_blend_basic+0x49e>
                            *(dest_buf + 0) = color;
 8009640:	f826 4c08 	strh.w	r4, [r6, #-8]
                            *d = c32;
 8009644:	f846 9c06 	str.w	r9, [r6, #-6]
                        FILL_NORMAL_MASK_PX(color)
 8009648:	f826 4c02 	strh.w	r4, [r6, #-2]
 800964c:	e001      	b.n	8009652 <lv_draw_sw_blend_basic+0x4a2>
                            *(d + 1) = c32;
 800964e:	e946 9902 	strd	r9, r9, [r6, #-8]
                for(; x <= x_end4; x += 4) {
 8009652:	f108 0804 	add.w	r8, r8, #4
 8009656:	46b3      	mov	fp, r6
 8009658:	e7d1      	b.n	80095fe <lv_draw_sw_blend_basic+0x44e>
                    else if(mask32) {
 800965a:	2a00      	cmp	r2, #0
 800965c:	d0f9      	beq.n	8009652 <lv_draw_sw_blend_basic+0x4a2>
                        FILL_NORMAL_MASK_PX(color)
 800965e:	f815 2c04 	ldrb.w	r2, [r5, #-4]
 8009662:	2aff      	cmp	r2, #255	; 0xff
 8009664:	d119      	bne.n	800969a <lv_draw_sw_blend_basic+0x4ea>
 8009666:	f826 4c08 	strh.w	r4, [r6, #-8]
                        FILL_NORMAL_MASK_PX(color)
 800966a:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 800966e:	2aff      	cmp	r2, #255	; 0xff
 8009670:	d11b      	bne.n	80096aa <lv_draw_sw_blend_basic+0x4fa>
 8009672:	f826 4c06 	strh.w	r4, [r6, #-6]
                        FILL_NORMAL_MASK_PX(color)
 8009676:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 800967a:	2aff      	cmp	r2, #255	; 0xff
 800967c:	d11d      	bne.n	80096ba <lv_draw_sw_blend_basic+0x50a>
 800967e:	f826 4c04 	strh.w	r4, [r6, #-4]
                        FILL_NORMAL_MASK_PX(color)
 8009682:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009686:	2aff      	cmp	r2, #255	; 0xff
 8009688:	d0de      	beq.n	8009648 <lv_draw_sw_blend_basic+0x498>
 800968a:	f836 1c02 	ldrh.w	r1, [r6, #-2]
 800968e:	4620      	mov	r0, r4
 8009690:	f016 fdfb 	bl	802028a <lv_color_mix>
 8009694:	f826 0c02 	strh.w	r0, [r6, #-2]
 8009698:	e7db      	b.n	8009652 <lv_draw_sw_blend_basic+0x4a2>
                        FILL_NORMAL_MASK_PX(color)
 800969a:	f8bb 1000 	ldrh.w	r1, [fp]
 800969e:	4620      	mov	r0, r4
 80096a0:	f016 fdf3 	bl	802028a <lv_color_mix>
 80096a4:	f8ab 0000 	strh.w	r0, [fp]
 80096a8:	e7df      	b.n	800966a <lv_draw_sw_blend_basic+0x4ba>
                        FILL_NORMAL_MASK_PX(color)
 80096aa:	f836 1c06 	ldrh.w	r1, [r6, #-6]
 80096ae:	4620      	mov	r0, r4
 80096b0:	f016 fdeb 	bl	802028a <lv_color_mix>
 80096b4:	f826 0c06 	strh.w	r0, [r6, #-6]
 80096b8:	e7dd      	b.n	8009676 <lv_draw_sw_blend_basic+0x4c6>
                        FILL_NORMAL_MASK_PX(color)
 80096ba:	f836 1c04 	ldrh.w	r1, [r6, #-4]
 80096be:	4620      	mov	r0, r4
 80096c0:	f016 fde3 	bl	802028a <lv_color_mix>
 80096c4:	f826 0c04 	strh.w	r0, [r6, #-4]
 80096c8:	e7db      	b.n	8009682 <lv_draw_sw_blend_basic+0x4d2>
                    FILL_NORMAL_MASK_PX(color)
 80096ca:	f81a 2b01 	ldrb.w	r2, [sl], #1
 80096ce:	2aff      	cmp	r2, #255	; 0xff
 80096d0:	d104      	bne.n	80096dc <lv_draw_sw_blend_basic+0x52c>
 80096d2:	f8ab 4000 	strh.w	r4, [fp]
 80096d6:	f10b 0b02 	add.w	fp, fp, #2
                for(; x < w ; x++) {
 80096da:	e796      	b.n	800960a <lv_draw_sw_blend_basic+0x45a>
                    FILL_NORMAL_MASK_PX(color)
 80096dc:	f8bb 1000 	ldrh.w	r1, [fp]
 80096e0:	4620      	mov	r0, r4
 80096e2:	f016 fdd2 	bl	802028a <lv_color_mix>
 80096e6:	f8ab 0000 	strh.w	r0, [fp]
 80096ea:	e7f4      	b.n	80096d6 <lv_draw_sw_blend_basic+0x526>
                dest_buf += dest_stride;
 80096ec:	006a      	lsls	r2, r5, #1
                mask += (mask_stride - w);
 80096ee:	9e05      	ldr	r6, [sp, #20]
 80096f0:	9d07      	ldr	r5, [sp, #28]
            for(y = 0; y < h; y++) {
 80096f2:	4698      	mov	r8, r3
            last_dest_color.full = dest_buf[0].full;
 80096f4:	f8bb 1000 	ldrh.w	r1, [fp]
                mask += (mask_stride - w);
 80096f8:	1bad      	subs	r5, r5, r6
                dest_buf += dest_stride;
 80096fa:	9208      	str	r2, [sp, #32]
            last_res_color.full = dest_buf[0].full;
 80096fc:	4608      	mov	r0, r1
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 80096fe:	461a      	mov	r2, r3
                mask += (mask_stride - w);
 8009700:	2e00      	cmp	r6, #0
 8009702:	bfa8      	it	ge
 8009704:	19ad      	addge	r5, r5, r6
 8009706:	9507      	str	r5, [sp, #28]
            for(y = 0; y < h; y++) {
 8009708:	9d06      	ldr	r5, [sp, #24]
 800970a:	45a8      	cmp	r8, r5
 800970c:	f6bf adf0 	bge.w	80092f0 <lv_draw_sw_blend_basic+0x140>
 8009710:	465d      	mov	r5, fp
                for(x = 0; x < w; x++) {
 8009712:	2700      	movs	r7, #0
 8009714:	e019      	b.n	800974a <lv_draw_sw_blend_basic+0x59a>
                    if(*mask) {
 8009716:	f81a 6007 	ldrb.w	r6, [sl, r7]
 800971a:	b1a6      	cbz	r6, 8009746 <lv_draw_sw_blend_basic+0x596>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 800971c:	429e      	cmp	r6, r3
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 800971e:	f8b5 9000 	ldrh.w	r9, [r5]
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 8009722:	d00c      	beq.n	800973e <lv_draw_sw_blend_basic+0x58e>
 8009724:	2eff      	cmp	r6, #255	; 0xff
 8009726:	d01a      	beq.n	800975e <lv_draw_sw_blend_basic+0x5ae>
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 8009728:	9b04      	ldr	r3, [sp, #16]
 800972a:	fb16 f203 	smulbb	r2, r6, r3
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 800972e:	0a12      	lsrs	r2, r2, #8
                            else last_res_color = lv_color_mix(color, dest_buf[x], opa_tmp);
 8009730:	8829      	ldrh	r1, [r5, #0]
 8009732:	4620      	mov	r0, r4
 8009734:	f016 fda9 	bl	802028a <lv_color_mix>
 8009738:	4633      	mov	r3, r6
 800973a:	b280      	uxth	r0, r0
                            last_dest_color.full = dest_buf[x].full;
 800973c:	e001      	b.n	8009742 <lv_draw_sw_blend_basic+0x592>
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 800973e:	4549      	cmp	r1, r9
 8009740:	d1f6      	bne.n	8009730 <lv_draw_sw_blend_basic+0x580>
                        dest_buf[x] = last_res_color;
 8009742:	4649      	mov	r1, r9
 8009744:	8028      	strh	r0, [r5, #0]
                for(x = 0; x < w; x++) {
 8009746:	3701      	adds	r7, #1
 8009748:	3502      	adds	r5, #2
 800974a:	9e05      	ldr	r6, [sp, #20]
 800974c:	42b7      	cmp	r7, r6
 800974e:	dbe2      	blt.n	8009716 <lv_draw_sw_blend_basic+0x566>
                dest_buf += dest_stride;
 8009750:	9d08      	ldr	r5, [sp, #32]
            for(y = 0; y < h; y++) {
 8009752:	f108 0801 	add.w	r8, r8, #1
                dest_buf += dest_stride;
 8009756:	44ab      	add	fp, r5
                mask += (mask_stride - w);
 8009758:	9d07      	ldr	r5, [sp, #28]
 800975a:	44aa      	add	sl, r5
            for(y = 0; y < h; y++) {
 800975c:	e7d4      	b.n	8009708 <lv_draw_sw_blend_basic+0x558>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 800975e:	9a04      	ldr	r2, [sp, #16]
 8009760:	e7e6      	b.n	8009730 <lv_draw_sw_blend_basic+0x580>
    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
        if(opa >= LV_OPA_MAX) {
            for(y = 0; y < h; y++) {
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
                dest_buf += dest_stride;
 8009762:	006a      	lsls	r2, r5, #1
 8009764:	9209      	str	r2, [sp, #36]	; 0x24
                src_buf += src_stride;
 8009766:	0072      	lsls	r2, r6, #1
 8009768:	9208      	str	r2, [sp, #32]
    if(mask == NULL) {
 800976a:	f1ba 0f00 	cmp.w	sl, #0
 800976e:	d12d      	bne.n	80097cc <lv_draw_sw_blend_basic+0x61c>
        if(opa >= LV_OPA_MAX) {
 8009770:	9b04      	ldr	r3, [sp, #16]
 8009772:	2bfc      	cmp	r3, #252	; 0xfc
 8009774:	d924      	bls.n	80097c0 <lv_draw_sw_blend_basic+0x610>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 8009776:	9b05      	ldr	r3, [sp, #20]
 8009778:	005e      	lsls	r6, r3, #1
            for(y = 0; y < h; y++) {
 800977a:	9b06      	ldr	r3, [sp, #24]
 800977c:	459a      	cmp	sl, r3
 800977e:	f6bf adb7 	bge.w	80092f0 <lv_draw_sw_blend_basic+0x140>
    return memcpy(dst, src, len);
 8009782:	4621      	mov	r1, r4
 8009784:	4658      	mov	r0, fp
 8009786:	4632      	mov	r2, r6
 8009788:	f10a 0a01 	add.w	sl, sl, #1
 800978c:	f010 fff1 	bl	801a772 <memcpy>
                dest_buf += dest_stride;
 8009790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009792:	449b      	add	fp, r3
                src_buf += src_stride;
 8009794:	9b08      	ldr	r3, [sp, #32]
 8009796:	441c      	add	r4, r3
            for(y = 0; y < h; y++) {
 8009798:	e7ef      	b.n	800977a <lv_draw_sw_blend_basic+0x5ca>
            }
        }
        else {
            for(y = 0; y < h; y++) {
                for(x = 0; x < w; x++) {
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 800979a:	f83b 1015 	ldrh.w	r1, [fp, r5, lsl #1]
 800979e:	f834 0015 	ldrh.w	r0, [r4, r5, lsl #1]
 80097a2:	9a04      	ldr	r2, [sp, #16]
 80097a4:	f016 fd71 	bl	802028a <lv_color_mix>
 80097a8:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
                for(x = 0; x < w; x++) {
 80097ac:	3501      	adds	r5, #1
 80097ae:	9b05      	ldr	r3, [sp, #20]
 80097b0:	429d      	cmp	r5, r3
 80097b2:	dbf2      	blt.n	800979a <lv_draw_sw_blend_basic+0x5ea>
                }
                dest_buf += dest_stride;
 80097b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 80097b6:	f10a 0a01 	add.w	sl, sl, #1
                dest_buf += dest_stride;
 80097ba:	449b      	add	fp, r3
                src_buf += src_stride;
 80097bc:	9b08      	ldr	r3, [sp, #32]
 80097be:	441c      	add	r4, r3
            for(y = 0; y < h; y++) {
 80097c0:	9b06      	ldr	r3, [sp, #24]
 80097c2:	459a      	cmp	sl, r3
 80097c4:	f6bf ad94 	bge.w	80092f0 <lv_draw_sw_blend_basic+0x140>
                for(x = 0; x < w; x++) {
 80097c8:	2500      	movs	r5, #0
 80097ca:	e7f0      	b.n	80097ae <lv_draw_sw_blend_basic+0x5fe>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 80097cc:	9a04      	ldr	r2, [sp, #16]
 80097ce:	2afd      	cmp	r2, #253	; 0xfd
 80097d0:	f240 80c3 	bls.w	800995a <lv_draw_sw_blend_basic+0x7aa>
            int32_t x_end4 = w - 4;
 80097d4:	9a05      	ldr	r2, [sp, #20]
 80097d6:	3a04      	subs	r2, #4
 80097d8:	920a      	str	r2, [sp, #40]	; 0x28

            for(y = 0; y < h; y++) {
 80097da:	9304      	str	r3, [sp, #16]
 80097dc:	9b04      	ldr	r3, [sp, #16]
 80097de:	9a06      	ldr	r2, [sp, #24]
 80097e0:	4293      	cmp	r3, r2
 80097e2:	f6bf ad85 	bge.w	80092f0 <lv_draw_sw_blend_basic+0x140>
 80097e6:	46d1      	mov	r9, sl
 80097e8:	46a0      	mov	r8, r4
 80097ea:	465f      	mov	r7, fp
#if 0
                for(x = 0; x < w; x++) {
                    MAP_NORMAL_MASK_PX(x);
                }
#else
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80097ec:	2500      	movs	r5, #0
 80097ee:	e015      	b.n	800981c <lv_draw_sw_blend_basic+0x66c>
                    MAP_NORMAL_MASK_PX(x)
 80097f0:	8839      	ldrh	r1, [r7, #0]
 80097f2:	f8b8 0000 	ldrh.w	r0, [r8]
 80097f6:	f016 fd48 	bl	802028a <lv_color_mix>
 80097fa:	8038      	strh	r0, [r7, #0]
 80097fc:	e00a      	b.n	8009814 <lv_draw_sw_blend_basic+0x664>
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80097fe:	f019 0f03 	tst.w	r9, #3
 8009802:	d00f      	beq.n	8009824 <lv_draw_sw_blend_basic+0x674>
                    MAP_NORMAL_MASK_PX(x)
 8009804:	f819 2b01 	ldrb.w	r2, [r9], #1
 8009808:	b122      	cbz	r2, 8009814 <lv_draw_sw_blend_basic+0x664>
 800980a:	2aff      	cmp	r2, #255	; 0xff
 800980c:	d1f0      	bne.n	80097f0 <lv_draw_sw_blend_basic+0x640>
 800980e:	f8b8 3000 	ldrh.w	r3, [r8]
 8009812:	803b      	strh	r3, [r7, #0]
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8009814:	3501      	adds	r5, #1
 8009816:	f108 0802 	add.w	r8, r8, #2
 800981a:	3702      	adds	r7, #2
 800981c:	9b05      	ldr	r3, [sp, #20]
 800981e:	464e      	mov	r6, r9
 8009820:	429d      	cmp	r5, r3
 8009822:	dbec      	blt.n	80097fe <lv_draw_sw_blend_basic+0x64e>
 8009824:	eb04 0845 	add.w	r8, r4, r5, lsl #1
 8009828:	eb0b 0745 	add.w	r7, fp, r5, lsl #1
                }

                uint32_t * mask32 = (uint32_t *)mask_tmp_x;
                for(; x < x_end4; x += 4) {
 800982c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800982e:	42ab      	cmp	r3, r5
 8009830:	dc10      	bgt.n	8009854 <lv_draw_sw_blend_basic+0x6a4>
 8009832:	3e01      	subs	r6, #1
 8009834:	eb04 0845 	add.w	r8, r4, r5, lsl #1
 8009838:	eb0b 0745 	add.w	r7, fp, r5, lsl #1
                    }
                    mask32++;
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
                for(; x < w ; x++) {
 800983c:	9b05      	ldr	r3, [sp, #20]
 800983e:	429d      	cmp	r5, r3
 8009840:	db54      	blt.n	80098ec <lv_draw_sw_blend_basic+0x73c>
                    MAP_NORMAL_MASK_PX(x)
                }
#endif
                dest_buf += dest_stride;
 8009842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009844:	449b      	add	fp, r3
                src_buf += src_stride;
 8009846:	9b08      	ldr	r3, [sp, #32]
 8009848:	441c      	add	r4, r3
                mask += mask_stride;
 800984a:	9b07      	ldr	r3, [sp, #28]
 800984c:	449a      	add	sl, r3
            for(y = 0; y < h; y++) {
 800984e:	9b04      	ldr	r3, [sp, #16]
 8009850:	3301      	adds	r3, #1
 8009852:	e7c2      	b.n	80097da <lv_draw_sw_blend_basic+0x62a>
                    if(*mask32) {
 8009854:	6833      	ldr	r3, [r6, #0]
 8009856:	b16b      	cbz	r3, 8009874 <lv_draw_sw_blend_basic+0x6c4>
                        if((*mask32) == 0xFFFFFFFF) {
 8009858:	3301      	adds	r3, #1
 800985a:	d111      	bne.n	8009880 <lv_draw_sw_blend_basic+0x6d0>
                            dest_buf[x] = src_buf[x];
 800985c:	f8b8 3000 	ldrh.w	r3, [r8]
 8009860:	803b      	strh	r3, [r7, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 8009862:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8009866:	807b      	strh	r3, [r7, #2]
                            dest_buf[x + 2] = src_buf[x + 2];
 8009868:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800986c:	80bb      	strh	r3, [r7, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 800986e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8009872:	80fb      	strh	r3, [r7, #6]
                    mask32++;
 8009874:	3604      	adds	r6, #4
                for(; x < x_end4; x += 4) {
 8009876:	3504      	adds	r5, #4
 8009878:	f108 0808 	add.w	r8, r8, #8
 800987c:	3708      	adds	r7, #8
 800987e:	e7d5      	b.n	800982c <lv_draw_sw_blend_basic+0x67c>
                            MAP_NORMAL_MASK_PX(x)
 8009880:	7832      	ldrb	r2, [r6, #0]
 8009882:	b122      	cbz	r2, 800988e <lv_draw_sw_blend_basic+0x6de>
 8009884:	2aff      	cmp	r2, #255	; 0xff
 8009886:	d11c      	bne.n	80098c2 <lv_draw_sw_blend_basic+0x712>
 8009888:	f8b8 3000 	ldrh.w	r3, [r8]
 800988c:	803b      	strh	r3, [r7, #0]
                            MAP_NORMAL_MASK_PX(x + 1)
 800988e:	7872      	ldrb	r2, [r6, #1]
 8009890:	b122      	cbz	r2, 800989c <lv_draw_sw_blend_basic+0x6ec>
 8009892:	2aff      	cmp	r2, #255	; 0xff
 8009894:	d11c      	bne.n	80098d0 <lv_draw_sw_blend_basic+0x720>
 8009896:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800989a:	807b      	strh	r3, [r7, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 800989c:	78b2      	ldrb	r2, [r6, #2]
 800989e:	b122      	cbz	r2, 80098aa <lv_draw_sw_blend_basic+0x6fa>
 80098a0:	2aff      	cmp	r2, #255	; 0xff
 80098a2:	d11c      	bne.n	80098de <lv_draw_sw_blend_basic+0x72e>
 80098a4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80098a8:	80bb      	strh	r3, [r7, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 80098aa:	78f2      	ldrb	r2, [r6, #3]
 80098ac:	2a00      	cmp	r2, #0
 80098ae:	d0e1      	beq.n	8009874 <lv_draw_sw_blend_basic+0x6c4>
 80098b0:	2aff      	cmp	r2, #255	; 0xff
 80098b2:	d0dc      	beq.n	800986e <lv_draw_sw_blend_basic+0x6be>
 80098b4:	88f9      	ldrh	r1, [r7, #6]
 80098b6:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 80098ba:	f016 fce6 	bl	802028a <lv_color_mix>
 80098be:	80f8      	strh	r0, [r7, #6]
 80098c0:	e7d8      	b.n	8009874 <lv_draw_sw_blend_basic+0x6c4>
                            MAP_NORMAL_MASK_PX(x)
 80098c2:	8839      	ldrh	r1, [r7, #0]
 80098c4:	f8b8 0000 	ldrh.w	r0, [r8]
 80098c8:	f016 fcdf 	bl	802028a <lv_color_mix>
 80098cc:	8038      	strh	r0, [r7, #0]
 80098ce:	e7de      	b.n	800988e <lv_draw_sw_blend_basic+0x6de>
                            MAP_NORMAL_MASK_PX(x + 1)
 80098d0:	8879      	ldrh	r1, [r7, #2]
 80098d2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80098d6:	f016 fcd8 	bl	802028a <lv_color_mix>
 80098da:	8078      	strh	r0, [r7, #2]
 80098dc:	e7de      	b.n	800989c <lv_draw_sw_blend_basic+0x6ec>
                            MAP_NORMAL_MASK_PX(x + 2)
 80098de:	88b9      	ldrh	r1, [r7, #4]
 80098e0:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80098e4:	f016 fcd1 	bl	802028a <lv_color_mix>
 80098e8:	80b8      	strh	r0, [r7, #4]
 80098ea:	e7de      	b.n	80098aa <lv_draw_sw_blend_basic+0x6fa>
                    MAP_NORMAL_MASK_PX(x)
 80098ec:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80098f0:	b122      	cbz	r2, 80098fc <lv_draw_sw_blend_basic+0x74c>
 80098f2:	2aff      	cmp	r2, #255	; 0xff
 80098f4:	d107      	bne.n	8009906 <lv_draw_sw_blend_basic+0x756>
 80098f6:	f8b8 3000 	ldrh.w	r3, [r8]
 80098fa:	803b      	strh	r3, [r7, #0]
                for(; x < w ; x++) {
 80098fc:	3501      	adds	r5, #1
 80098fe:	f108 0802 	add.w	r8, r8, #2
 8009902:	3702      	adds	r7, #2
 8009904:	e79a      	b.n	800983c <lv_draw_sw_blend_basic+0x68c>
                    MAP_NORMAL_MASK_PX(x)
 8009906:	8839      	ldrh	r1, [r7, #0]
 8009908:	f8b8 0000 	ldrh.w	r0, [r8]
 800990c:	f016 fcbd 	bl	802028a <lv_color_mix>
 8009910:	8038      	strh	r0, [r7, #0]
 8009912:	e7f3      	b.n	80098fc <lv_draw_sw_blend_basic+0x74c>
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < h; y++) {
                for(x = 0; x < w; x++) {
                    if(mask[x]) {
 8009914:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8009918:	b172      	cbz	r2, 8009938 <lv_draw_sw_blend_basic+0x788>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800991a:	2afc      	cmp	r2, #252	; 0xfc
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 800991c:	f83b 1016 	ldrh.w	r1, [fp, r6, lsl #1]
 8009920:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8009924:	bf97      	itett	ls
 8009926:	9b04      	ldrls	r3, [sp, #16]
 8009928:	9a04      	ldrhi	r2, [sp, #16]
 800992a:	fb13 f202 	smulbbls	r2, r3, r2
 800992e:	0a12      	lsrls	r2, r2, #8
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 8009930:	f016 fcab 	bl	802028a <lv_color_mix>
 8009934:	f82b 0016 	strh.w	r0, [fp, r6, lsl #1]
                for(x = 0; x < w; x++) {
 8009938:	3601      	adds	r6, #1
 800993a:	9b05      	ldr	r3, [sp, #20]
 800993c:	429e      	cmp	r6, r3
 800993e:	dbe9      	blt.n	8009914 <lv_draw_sw_blend_basic+0x764>
                    }
                }
                dest_buf += dest_stride;
 8009940:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 8009942:	3501      	adds	r5, #1
                dest_buf += dest_stride;
 8009944:	449b      	add	fp, r3
                src_buf += src_stride;
 8009946:	9b08      	ldr	r3, [sp, #32]
 8009948:	441c      	add	r4, r3
                mask += mask_stride;
 800994a:	9b07      	ldr	r3, [sp, #28]
 800994c:	449a      	add	sl, r3
            for(y = 0; y < h; y++) {
 800994e:	9b06      	ldr	r3, [sp, #24]
 8009950:	429d      	cmp	r5, r3
 8009952:	f6bf accd 	bge.w	80092f0 <lv_draw_sw_blend_basic+0x140>
                for(x = 0; x < w; x++) {
 8009956:	2600      	movs	r6, #0
 8009958:	e7ef      	b.n	800993a <lv_draw_sw_blend_basic+0x78a>
            for(y = 0; y < h; y++) {
 800995a:	461d      	mov	r5, r3
 800995c:	e7f7      	b.n	800994e <lv_draw_sw_blend_basic+0x79e>
        if(dsc->src_buf == NULL) {
 800995e:	3b01      	subs	r3, #1
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2f00      	cmp	r7, #0
 8009964:	d169      	bne.n	8009a3a <lv_draw_sw_blend_basic+0x88a>
            fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
 8009966:	2b02      	cmp	r3, #2
 8009968:	f8b8 8008 	ldrh.w	r8, [r8, #8]
    switch(blend_mode) {
 800996c:	f63f acc0 	bhi.w	80092f0 <lv_draw_sw_blend_basic+0x140>
 8009970:	4a76      	ldr	r2, [pc, #472]	; (8009b4c <lv_draw_sw_blend_basic+0x99c>)
            last_dest_color.full = dest_buf[0].full;
 8009972:	f8bb 6000 	ldrh.w	r6, [fp]
 8009976:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
            dest_buf += dest_stride;
 800997a:	006b      	lsls	r3, r5, #1
 800997c:	9308      	str	r3, [sp, #32]
    if(mask == NULL) {
 800997e:	f1ba 0f00 	cmp.w	sl, #0
 8009982:	d11f      	bne.n	80099c4 <lv_draw_sw_blend_basic+0x814>
        for(y = 0; y < h; y++) {
 8009984:	46d1      	mov	r9, sl
        lv_color_t last_res_color = blend_fp(color, dest_buf[0], opa);
 8009986:	9a04      	ldr	r2, [sp, #16]
 8009988:	4631      	mov	r1, r6
 800998a:	4640      	mov	r0, r8
 800998c:	47b8      	blx	r7
        for(y = 0; y < h; y++) {
 800998e:	9b06      	ldr	r3, [sp, #24]
 8009990:	4599      	cmp	r9, r3
 8009992:	f6bf acad 	bge.w	80092f0 <lv_draw_sw_blend_basic+0x140>
 8009996:	465d      	mov	r5, fp
            for(x = 0; x < w; x++) {
 8009998:	2400      	movs	r4, #0
 800999a:	e00b      	b.n	80099b4 <lv_draw_sw_blend_basic+0x804>
                if(last_dest_color.full != dest_buf[x].full) {
 800999c:	f8b5 a000 	ldrh.w	sl, [r5]
 80099a0:	45b2      	cmp	sl, r6
 80099a2:	d003      	beq.n	80099ac <lv_draw_sw_blend_basic+0x7fc>
                    last_res_color = blend_fp(color, dest_buf[x], opa);
 80099a4:	9a04      	ldr	r2, [sp, #16]
 80099a6:	4651      	mov	r1, sl
 80099a8:	4640      	mov	r0, r8
 80099aa:	47b8      	blx	r7
            for(x = 0; x < w; x++) {
 80099ac:	3401      	adds	r4, #1
 80099ae:	4656      	mov	r6, sl
                dest_buf[x] = last_res_color;
 80099b0:	f825 0b02 	strh.w	r0, [r5], #2
            for(x = 0; x < w; x++) {
 80099b4:	9b05      	ldr	r3, [sp, #20]
 80099b6:	429c      	cmp	r4, r3
 80099b8:	dbf0      	blt.n	800999c <lv_draw_sw_blend_basic+0x7ec>
            dest_buf += dest_stride;
 80099ba:	9b08      	ldr	r3, [sp, #32]
        for(y = 0; y < h; y++) {
 80099bc:	f109 0901 	add.w	r9, r9, #1
            dest_buf += dest_stride;
 80099c0:	449b      	add	fp, r3
        for(y = 0; y < h; y++) {
 80099c2:	e7e4      	b.n	800998e <lv_draw_sw_blend_basic+0x7de>
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 80099c4:	f89a 2000 	ldrb.w	r2, [sl]
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 80099c8:	4631      	mov	r1, r6
 80099ca:	4640      	mov	r0, r8
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 80099cc:	2afc      	cmp	r2, #252	; 0xfc
 80099ce:	bf97      	itett	ls
 80099d0:	9b04      	ldrls	r3, [sp, #16]
 80099d2:	9a04      	ldrhi	r2, [sp, #16]
 80099d4:	fb12 f203 	smulbbls	r2, r2, r3
 80099d8:	0a12      	lsrls	r2, r2, #8
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 80099da:	47b8      	blx	r7
        lv_opa_t last_mask = LV_OPA_TRANSP;
 80099dc:	2300      	movs	r3, #0
        for(y = 0; y < h; y++) {
 80099de:	4699      	mov	r9, r3
 80099e0:	9a06      	ldr	r2, [sp, #24]
 80099e2:	4591      	cmp	r9, r2
 80099e4:	f6bf ac84 	bge.w	80092f0 <lv_draw_sw_blend_basic+0x140>
            for(x = 0; x < w; x++) {
 80099e8:	f1ca 0201 	rsb	r2, sl, #1
 80099ec:	f10a 35ff 	add.w	r5, sl, #4294967295
 80099f0:	465c      	mov	r4, fp
 80099f2:	9209      	str	r2, [sp, #36]	; 0x24
 80099f4:	e015      	b.n	8009a22 <lv_draw_sw_blend_basic+0x872>
                if(mask[x] == 0) continue;
 80099f6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80099fa:	b18a      	cbz	r2, 8009a20 <lv_draw_sw_blend_basic+0x870>
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d102      	bne.n	8009a06 <lv_draw_sw_blend_basic+0x856>
 8009a00:	8821      	ldrh	r1, [r4, #0]
 8009a02:	42b1      	cmp	r1, r6
 8009a04:	d00b      	beq.n	8009a1e <lv_draw_sw_blend_basic+0x86e>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 8009a06:	2afc      	cmp	r2, #252	; 0xfc
                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 8009a08:	8821      	ldrh	r1, [r4, #0]
 8009a0a:	4640      	mov	r0, r8
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 8009a0c:	bf97      	itett	ls
 8009a0e:	9b04      	ldrls	r3, [sp, #16]
 8009a10:	9a04      	ldrhi	r2, [sp, #16]
 8009a12:	fb12 f203 	smulbbls	r2, r2, r3
 8009a16:	0a12      	lsrls	r2, r2, #8
                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 8009a18:	47b8      	blx	r7
                    last_mask = mask[x];
 8009a1a:	782b      	ldrb	r3, [r5, #0]
                    last_dest_color.full = dest_buf[x].full;
 8009a1c:	8826      	ldrh	r6, [r4, #0]
                dest_buf[x] = last_res_color;
 8009a1e:	8020      	strh	r0, [r4, #0]
            for(x = 0; x < w; x++) {
 8009a20:	3402      	adds	r4, #2
 8009a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a24:	9905      	ldr	r1, [sp, #20]
 8009a26:	442a      	add	r2, r5
 8009a28:	428a      	cmp	r2, r1
 8009a2a:	dbe4      	blt.n	80099f6 <lv_draw_sw_blend_basic+0x846>
            dest_buf += dest_stride;
 8009a2c:	9a08      	ldr	r2, [sp, #32]
        for(y = 0; y < h; y++) {
 8009a2e:	f109 0901 	add.w	r9, r9, #1
            dest_buf += dest_stride;
 8009a32:	4493      	add	fp, r2
            mask += mask_stride;
 8009a34:	9a07      	ldr	r2, [sp, #28]
 8009a36:	4492      	add	sl, r2
        for(y = 0; y < h; y++) {
 8009a38:	e7d2      	b.n	80099e0 <lv_draw_sw_blend_basic+0x830>

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	f63f ac58 	bhi.w	80092f0 <lv_draw_sw_blend_basic+0x140>
 8009a40:	4a43      	ldr	r2, [pc, #268]	; (8009b50 <lv_draw_sw_blend_basic+0x9a0>)
            last_dest_color.full = dest_buf[0].full;
 8009a42:	f8bb 7000 	ldrh.w	r7, [fp]
 8009a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a4a:	9309      	str	r3, [sp, #36]	; 0x24
    lv_color_t last_dest_color;
    lv_color_t last_src_color;
    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
        last_dest_color = dest_buf[0];
        last_src_color = src_buf[0];
 8009a4c:	8823      	ldrh	r3, [r4, #0]
 8009a4e:	9308      	str	r3, [sp, #32]
                    last_src_color = src_buf[x];
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
                }
                dest_buf[x] = last_res_color;
            }
            dest_buf += dest_stride;
 8009a50:	006b      	lsls	r3, r5, #1
 8009a52:	930b      	str	r3, [sp, #44]	; 0x2c
            src_buf += src_stride;
 8009a54:	0073      	lsls	r3, r6, #1
 8009a56:	930c      	str	r3, [sp, #48]	; 0x30
    if(mask == NULL) {
 8009a58:	f1ba 0f00 	cmp.w	sl, #0
 8009a5c:	d12c      	bne.n	8009ab8 <lv_draw_sw_blend_basic+0x908>
        for(y = 0; y < h; y++) {
 8009a5e:	46d0      	mov	r8, sl
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 8009a60:	9a04      	ldr	r2, [sp, #16]
 8009a62:	4639      	mov	r1, r7
 8009a64:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8009a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a6a:	4798      	blx	r3
        for(y = 0; y < h; y++) {
 8009a6c:	9b06      	ldr	r3, [sp, #24]
 8009a6e:	4598      	cmp	r8, r3
 8009a70:	f6bf ac3e 	bge.w	80092f0 <lv_draw_sw_blend_basic+0x140>
 8009a74:	f1ab 0602 	sub.w	r6, fp, #2
            for(x = 0; x < w; x++) {
 8009a78:	2500      	movs	r5, #0
 8009a7a:	e013      	b.n	8009aa4 <lv_draw_sw_blend_basic+0x8f4>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 8009a7c:	f834 a015 	ldrh.w	sl, [r4, r5, lsl #1]
 8009a80:	9b08      	ldr	r3, [sp, #32]
 8009a82:	f8b6 9002 	ldrh.w	r9, [r6, #2]
 8009a86:	459a      	cmp	sl, r3
 8009a88:	d101      	bne.n	8009a8e <lv_draw_sw_blend_basic+0x8de>
 8009a8a:	454f      	cmp	r7, r9
 8009a8c:	d006      	beq.n	8009a9c <lv_draw_sw_blend_basic+0x8ec>
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 8009a8e:	9a04      	ldr	r2, [sp, #16]
 8009a90:	4649      	mov	r1, r9
 8009a92:	4650      	mov	r0, sl
 8009a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a96:	4798      	blx	r3
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 8009a98:	f8cd a020 	str.w	sl, [sp, #32]
            for(x = 0; x < w; x++) {
 8009a9c:	3501      	adds	r5, #1
 8009a9e:	464f      	mov	r7, r9
                dest_buf[x] = last_res_color;
 8009aa0:	f826 0f02 	strh.w	r0, [r6, #2]!
            for(x = 0; x < w; x++) {
 8009aa4:	9b05      	ldr	r3, [sp, #20]
 8009aa6:	429d      	cmp	r5, r3
 8009aa8:	dbe8      	blt.n	8009a7c <lv_draw_sw_blend_basic+0x8cc>
            dest_buf += dest_stride;
 8009aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        for(y = 0; y < h; y++) {
 8009aac:	f108 0801 	add.w	r8, r8, #1
            dest_buf += dest_stride;
 8009ab0:	449b      	add	fp, r3
            src_buf += src_stride;
 8009ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ab4:	441c      	add	r4, r3
        for(y = 0; y < h; y++) {
 8009ab6:	e7d9      	b.n	8009a6c <lv_draw_sw_blend_basic+0x8bc>
    }
    /*Masked*/
    else {
        last_dest_color = dest_buf[0];
        last_src_color = src_buf[0];
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 8009ab8:	f89a 3000 	ldrb.w	r3, [sl]
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 8009abc:	4639      	mov	r1, r7
 8009abe:	f8bd 0020 	ldrh.w	r0, [sp, #32]
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 8009ac2:	2bfc      	cmp	r3, #252	; 0xfc
 8009ac4:	bf97      	itett	ls
 8009ac6:	9a04      	ldrls	r2, [sp, #16]
 8009ac8:	9b04      	ldrhi	r3, [sp, #16]
 8009aca:	fb12 f303 	smulbbls	r3, r2, r3
 8009ace:	0a1b      	lsrls	r3, r3, #8
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad6:	4798      	blx	r3
        for(y = 0; y < h; y++) {
 8009ad8:	2300      	movs	r3, #0
 8009ada:	930a      	str	r3, [sp, #40]	; 0x28
 8009adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ae0:	9906      	ldr	r1, [sp, #24]
 8009ae2:	428a      	cmp	r2, r1
 8009ae4:	f6bf ac04 	bge.w	80092f0 <lv_draw_sw_blend_basic+0x140>
            for(x = 0; x < w; x++) {
 8009ae8:	2500      	movs	r5, #0
 8009aea:	e022      	b.n	8009b32 <lv_draw_sw_blend_basic+0x982>
                if(mask[x] == 0) continue;
 8009aec:	f81a 2005 	ldrb.w	r2, [sl, r5]
 8009af0:	b1f2      	cbz	r2, 8009b30 <lv_draw_sw_blend_basic+0x980>
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8009af2:	2afc      	cmp	r2, #252	; 0xfc
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 8009af4:	f834 8015 	ldrh.w	r8, [r4, r5, lsl #1]
 8009af8:	f83b 6015 	ldrh.w	r6, [fp, r5, lsl #1]
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8009afc:	bf97      	itett	ls
 8009afe:	9904      	ldrls	r1, [sp, #16]
 8009b00:	f8dd 9010 	ldrhi.w	r9, [sp, #16]
 8009b04:	fb11 f202 	smulbbls	r2, r1, r2
 8009b08:	ea4f 2912 	movls.w	r9, r2, lsr #8
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 8009b0c:	9a08      	ldr	r2, [sp, #32]
 8009b0e:	4590      	cmp	r8, r2
 8009b10:	d103      	bne.n	8009b1a <lv_draw_sw_blend_basic+0x96a>
 8009b12:	42b7      	cmp	r7, r6
 8009b14:	d101      	bne.n	8009b1a <lv_draw_sw_blend_basic+0x96a>
 8009b16:	454b      	cmp	r3, r9
 8009b18:	d006      	beq.n	8009b28 <lv_draw_sw_blend_basic+0x978>
                    last_dest_color = dest_buf[x];
                    last_src_color = src_buf[x];
                    last_opa = opa_tmp;
                    last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 8009b1a:	464a      	mov	r2, r9
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4640      	mov	r0, r8
 8009b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b22:	4798      	blx	r3
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 8009b24:	f8cd 8020 	str.w	r8, [sp, #32]
                }
                dest_buf[x] = last_res_color;
 8009b28:	4637      	mov	r7, r6
 8009b2a:	464b      	mov	r3, r9
 8009b2c:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
            for(x = 0; x < w; x++) {
 8009b30:	3501      	adds	r5, #1
 8009b32:	9a05      	ldr	r2, [sp, #20]
 8009b34:	4295      	cmp	r5, r2
 8009b36:	dbd9      	blt.n	8009aec <lv_draw_sw_blend_basic+0x93c>
            }
            dest_buf += dest_stride;
 8009b38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b3a:	4493      	add	fp, r2
            src_buf += src_stride;
 8009b3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b3e:	4414      	add	r4, r2
            mask += mask_stride;
 8009b40:	9a07      	ldr	r2, [sp, #28]
 8009b42:	4492      	add	sl, r2
        for(y = 0; y < h; y++) {
 8009b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b46:	3201      	adds	r2, #1
 8009b48:	920a      	str	r2, [sp, #40]	; 0x28
 8009b4a:	e7c8      	b.n	8009ade <lv_draw_sw_blend_basic+0x92e>
 8009b4c:	08028e3c 	.word	0x08028e3c
 8009b50:	08028e3c 	.word	0x08028e3c

08009b54 <iterate_cache>:
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
    else return (lv_grad_t *)((uint8_t *)item + s);
}

static lv_res_t iterate_cache(op_cache_t func, void * ctx, lv_grad_t ** out)
{
 8009b54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(grad_cache_size == 0) return NULL;
 8009b58:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8009bb4 <iterate_cache+0x60>
{
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	460f      	mov	r7, r1
 8009b60:	4615      	mov	r5, r2
    if(grad_cache_size == 0) return NULL;
 8009b62:	f8d8 3000 	ldr.w	r3, [r8]
 8009b66:	b31b      	cbz	r3, 8009bb0 <iterate_cache+0x5c>
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
 8009b68:	4b13      	ldr	r3, [pc, #76]	; (8009bb8 <iterate_cache+0x64>)
 8009b6a:	681c      	ldr	r4, [r3, #0]
    lv_grad_t * first = next_in_cache(NULL);
    while(first != NULL && first->life) {
 8009b6c:	b304      	cbz	r4, 8009bb0 <iterate_cache+0x5c>
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009b6e:	f04f 0902 	mov.w	r9, #2
 8009b72:	f04f 0a03 	mov.w	sl, #3
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 8009b76:	f8df b044 	ldr.w	fp, [pc, #68]	; 8009bbc <iterate_cache+0x68>
    while(first != NULL && first->life) {
 8009b7a:	6863      	ldr	r3, [r4, #4]
 8009b7c:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 8009b80:	d016      	beq.n	8009bb0 <iterate_cache+0x5c>
        if((*func)(first, ctx) == LV_RES_OK) {
 8009b82:	4639      	mov	r1, r7
 8009b84:	4620      	mov	r0, r4
 8009b86:	47b0      	blx	r6
 8009b88:	2801      	cmp	r0, #1
 8009b8a:	d103      	bne.n	8009b94 <iterate_cache+0x40>
            if(out != NULL) *out = first;
 8009b8c:	b105      	cbz	r5, 8009b90 <iterate_cache+0x3c>
 8009b8e:	602c      	str	r4, [r5, #0]
            return LV_RES_OK;
        }
        first = next_in_cache(first);
    }
    return LV_RES_INV;
}
 8009b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(grad_cache_size == 0) return NULL;
 8009b94:	f8d8 3000 	ldr.w	r3, [r8]
 8009b98:	b153      	cbz	r3, 8009bb0 <iterate_cache+0x5c>
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	fb13 a309 	smlabb	r3, r3, r9, sl
 8009ba0:	f023 0303 	bic.w	r3, r3, #3
 8009ba4:	3310      	adds	r3, #16
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 8009ba6:	441c      	add	r4, r3
 8009ba8:	f8db 3000 	ldr.w	r3, [fp]
 8009bac:	429c      	cmp	r4, r3
 8009bae:	d3e4      	bcc.n	8009b7a <iterate_cache+0x26>
    return LV_RES_INV;
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	e7ed      	b.n	8009b90 <iterate_cache+0x3c>
 8009bb4:	2400116c 	.word	0x2400116c
 8009bb8:	24001204 	.word	0x24001204
 8009bbc:	24001168 	.word	0x24001168

08009bc0 <kill_oldest_item>:
        lv_memset_00(old + next_items_size, size);
    }
}

static lv_res_t kill_oldest_item(lv_grad_t * c, void * ctx)
{
 8009bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t * min_life = (uint32_t *)ctx;
    if(c->life == *min_life) {
 8009bc4:	6843      	ldr	r3, [r0, #4]
{
 8009bc6:	4605      	mov	r5, r0
    if(c->life == *min_life) {
 8009bc8:	680a      	ldr	r2, [r1, #0]
 8009bca:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d136      	bne.n	8009c40 <kill_oldest_item+0x80>
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009bd2:	8984      	ldrh	r4, [r0, #12]
 8009bd4:	f04f 0802 	mov.w	r8, #2
 8009bd8:	f04f 0903 	mov.w	r9, #3
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 8009bdc:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009c44 <kill_oldest_item+0x84>
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009be0:	fb14 9408 	smlabb	r4, r4, r8, r9
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 8009be4:	f8da 3000 	ldr.w	r3, [sl]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009be8:	f024 0403 	bic.w	r4, r4, #3
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 8009bec:	1a1e      	subs	r6, r3, r0
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009bee:	f104 0710 	add.w	r7, r4, #16
    grad_cache_end -= size;
 8009bf2:	f1c4 24ff 	rsb	r4, r4, #4278255360	; 0xff00ff00
 8009bf6:	f504 047f 	add.w	r4, r4, #16711680	; 0xff0000
    if(next_items_size) {
 8009bfa:	1bf6      	subs	r6, r6, r7
    grad_cache_end -= size;
 8009bfc:	f104 04f0 	add.w	r4, r4, #240	; 0xf0
 8009c00:	4423      	add	r3, r4
 8009c02:	f8ca 3000 	str.w	r3, [sl]
    if(next_items_size) {
 8009c06:	d00d      	beq.n	8009c24 <kill_oldest_item+0x64>
 8009c08:	4632      	mov	r2, r6
 8009c0a:	19c1      	adds	r1, r0, r7
 8009c0c:	f010 fdb1 	bl	801a772 <memcpy>
        while((uint8_t *)c != grad_cache_end) {
 8009c10:	f8da 1000 	ldr.w	r1, [sl]
 8009c14:	462a      	mov	r2, r5
 8009c16:	428a      	cmp	r2, r1
 8009c18:	d107      	bne.n	8009c2a <kill_oldest_item+0x6a>
    memset(dst, 0x00, len);
 8009c1a:	463a      	mov	r2, r7
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	19a8      	adds	r0, r5, r6
 8009c20:	f010 fdb2 	bl	801a788 <memset>
        /*Found, let's kill it*/
        free_item(c);
        return LV_RES_OK;
 8009c24:	2001      	movs	r0, #1
    }
    return LV_RES_INV;
}
 8009c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 8009c2a:	6893      	ldr	r3, [r2, #8]
 8009c2c:	4423      	add	r3, r4
 8009c2e:	6093      	str	r3, [r2, #8]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009c30:	8993      	ldrh	r3, [r2, #12]
 8009c32:	fb13 9308 	smlabb	r3, r3, r8, r9
 8009c36:	f023 0303 	bic.w	r3, r3, #3
 8009c3a:	3310      	adds	r3, #16
            c = (lv_grad_t *)(((uint8_t *)c) + get_cache_item_size(c));
 8009c3c:	441a      	add	r2, r3
 8009c3e:	e7ea      	b.n	8009c16 <kill_oldest_item+0x56>
    return LV_RES_INV;
 8009c40:	2000      	movs	r0, #0
 8009c42:	e7f0      	b.n	8009c26 <kill_oldest_item+0x66>
 8009c44:	24001168 	.word	0x24001168

08009c48 <lv_gradient_set_cache_size>:
    LV_GC_ROOT(_lv_grad_cache_mem) = grad_cache_end = NULL;
    grad_cache_size = 0;
}

void lv_gradient_set_cache_size(size_t max_bytes)
{
 8009c48:	b538      	push	{r3, r4, r5, lr}
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 8009c4a:	4d0a      	ldr	r5, [pc, #40]	; (8009c74 <lv_gradient_set_cache_size+0x2c>)
{
 8009c4c:	4604      	mov	r4, r0
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 8009c4e:	6828      	ldr	r0, [r5, #0]
 8009c50:	f008 fd80 	bl	8012754 <lv_mem_free>
    grad_cache_end = LV_GC_ROOT(_lv_grad_cache_mem) = lv_mem_alloc(max_bytes);
 8009c54:	4620      	mov	r0, r4
 8009c56:	f008 fd5f 	bl	8012718 <lv_mem_alloc>
 8009c5a:	4a07      	ldr	r2, [pc, #28]	; (8009c78 <lv_gradient_set_cache_size+0x30>)
 8009c5c:	6028      	str	r0, [r5, #0]
 8009c5e:	6010      	str	r0, [r2, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 8009c60:	b900      	cbnz	r0, 8009c64 <lv_gradient_set_cache_size+0x1c>
 8009c62:	e7fe      	b.n	8009c62 <lv_gradient_set_cache_size+0x1a>
 8009c64:	4622      	mov	r2, r4
 8009c66:	2100      	movs	r1, #0
 8009c68:	f010 fd8e 	bl	801a788 <memset>
    lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
    grad_cache_size = max_bytes;
 8009c6c:	4b03      	ldr	r3, [pc, #12]	; (8009c7c <lv_gradient_set_cache_size+0x34>)
 8009c6e:	601c      	str	r4, [r3, #0]
}
 8009c70:	bd38      	pop	{r3, r4, r5, pc}
 8009c72:	bf00      	nop
 8009c74:	24001204 	.word	0x24001204
 8009c78:	24001168 	.word	0x24001168
 8009c7c:	2400116c 	.word	0x2400116c

08009c80 <lv_gradient_get>:

lv_grad_t * lv_gradient_get(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* No gradient, no cache */
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 8009c84:	7a44      	ldrb	r4, [r0, #9]
{
 8009c86:	b087      	sub	sp, #28
 8009c88:	4607      	mov	r7, r0
 8009c8a:	460d      	mov	r5, r1
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 8009c8c:	f014 0407 	ands.w	r4, r4, #7
{
 8009c90:	4616      	mov	r6, r2
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 8009c92:	d023      	beq.n	8009cdc <lv_gradient_get+0x5c>

    /* Step 0: Check if the cache exist (else create it) */
    static bool inited = false;
    if(!inited) {
 8009c94:	4c51      	ldr	r4, [pc, #324]	; (8009ddc <lv_gradient_get+0x15c>)
 8009c96:	7820      	ldrb	r0, [r4, #0]
 8009c98:	b918      	cbnz	r0, 8009ca2 <lv_gradient_get+0x22>
        lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 8009c9a:	f7ff ffd5 	bl	8009c48 <lv_gradient_set_cache_size>
        inited = true;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	7023      	strb	r3, [r4, #0]
    }

    /* Step 1: Search cache for the given key */
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009ca2:	7a7a      	ldrb	r2, [r7, #9]
 8009ca4:	ea87 0965 	eor.w	r9, r7, r5, asr #1
    uint32_t key = compute_key(g, size, w);
    lv_grad_t * item = NULL;
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 8009ca8:	a903      	add	r1, sp, #12
 8009caa:	484d      	ldr	r0, [pc, #308]	; (8009de0 <lv_gradient_get+0x160>)
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009cac:	f002 0207 	and.w	r2, r2, #7
 8009cb0:	2a02      	cmp	r2, #2
 8009cb2:	bf14      	ite	ne
 8009cb4:	4633      	movne	r3, r6
 8009cb6:	462b      	moveq	r3, r5
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 8009cb8:	aa04      	add	r2, sp, #16
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 8009cba:	ea83 0309 	eor.w	r3, r3, r9
    uint32_t key = compute_key(g, size, w);
 8009cbe:	9303      	str	r3, [sp, #12]
    lv_grad_t * item = NULL;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	9304      	str	r3, [sp, #16]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 8009cc4:	f7ff ff46 	bl	8009b54 <iterate_cache>
 8009cc8:	2801      	cmp	r0, #1
 8009cca:	f04f 0300 	mov.w	r3, #0
 8009cce:	d109      	bne.n	8009ce4 <lv_gradient_get+0x64>
        item->life++; /* Don't forget to bump the counter */
 8009cd0:	9c04      	ldr	r4, [sp, #16]
 8009cd2:	6863      	ldr	r3, [r4, #4]
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	f362 031d 	bfi	r3, r2, #0, #30
 8009cda:	6063      	str	r3, [r4, #4]
        item->map[i] = lv_gradient_calculate(g, item->size, i);
    }
#endif

    return item;
}
 8009cdc:	4620      	mov	r0, r4
 8009cde:	b007      	add	sp, #28
 8009ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009ce4:	7a7a      	ldrb	r2, [r7, #9]
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8009ce6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8009de4 <lv_gradient_get+0x164>
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009cea:	f002 0207 	and.w	r2, r2, #7
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8009cee:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8009de8 <lv_gradient_get+0x168>
 8009cf2:	f8d8 4000 	ldr.w	r4, [r8]
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009cf6:	2a02      	cmp	r2, #2
 8009cf8:	bf14      	ite	ne
 8009cfa:	4632      	movne	r2, r6
 8009cfc:	462a      	moveq	r2, r5
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 8009cfe:	42ae      	cmp	r6, r5
    if(req_size + act_size < grad_cache_size) {
 8009d00:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8009dec <lv_gradient_get+0x16c>
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 8009d04:	bfb8      	it	lt
 8009d06:	462e      	movlt	r6, r5
    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 8009d08:	2503      	movs	r5, #3
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009d0a:	9201      	str	r2, [sp, #4]
    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 8009d0c:	eb05 0546 	add.w	r5, r5, r6, lsl #1
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8009d10:	f8db 2000 	ldr.w	r2, [fp]
    if(req_size + act_size < grad_cache_size) {
 8009d14:	f8da 1000 	ldr.w	r1, [sl]
    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 8009d18:	f025 0503 	bic.w	r5, r5, #3
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8009d1c:	1aa2      	subs	r2, r4, r2
    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 8009d1e:	3510      	adds	r5, #16
    if(req_size + act_size < grad_cache_size) {
 8009d20:	18a8      	adds	r0, r5, r2
 8009d22:	4288      	cmp	r0, r1
 8009d24:	d22e      	bcs.n	8009d84 <lv_gradient_get+0x104>
        item->not_cached = 0;
 8009d26:	79e2      	ldrb	r2, [r4, #7]
 8009d28:	f363 12c7 	bfi	r2, r3, #7, #1
 8009d2c:	71e2      	strb	r2, [r4, #7]
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 8009d2e:	9b01      	ldr	r3, [sp, #4]
    item->alloc_size = map_size;
 8009d30:	81a6      	strh	r6, [r4, #12]
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009d32:	2600      	movs	r6, #0
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 8009d34:	ea83 0309 	eor.w	r3, r3, r9
    item->key = compute_key(g, size, w);
 8009d38:	6023      	str	r3, [r4, #0]
    item->life = 1;
 8009d3a:	6863      	ldr	r3, [r4, #4]
 8009d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    if(item->not_cached) {
 8009d40:	2b00      	cmp	r3, #0
    item->life = 1;
 8009d42:	f043 0201 	orr.w	r2, r3, #1
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 8009d46:	bfac      	ite	ge
 8009d48:	f8d8 3000 	ldrge.w	r3, [r8]
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 8009d4c:	f104 0310 	addlt.w	r3, r4, #16
    item->life = 1;
 8009d50:	6062      	str	r2, [r4, #4]
    item->size = size;
 8009d52:	9a01      	ldr	r2, [sp, #4]
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 8009d54:	bfb8      	it	lt
 8009d56:	60a3      	strlt	r3, [r4, #8]
    item->size = size;
 8009d58:	81e2      	strh	r2, [r4, #14]
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 8009d5a:	bfa1      	itttt	ge
 8009d5c:	f103 0210 	addge.w	r2, r3, #16
        grad_cache_end += req_size;
 8009d60:	195b      	addge	r3, r3, r5
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 8009d62:	60a2      	strge	r2, [r4, #8]
        grad_cache_end += req_size;
 8009d64:	f8c8 3000 	strge.w	r3, [r8]
    if(item == NULL) {
 8009d68:	b235      	sxth	r5, r6
    for(lv_coord_t i = 0; i < item->size; i++) {
 8009d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d6e:	42a9      	cmp	r1, r5
 8009d70:	ddb4      	ble.n	8009cdc <lv_gradient_get+0x5c>
        item->map[i] = lv_gradient_calculate(g, item->size, i);
 8009d72:	462a      	mov	r2, r5
 8009d74:	4638      	mov	r0, r7
 8009d76:	f016 fba3 	bl	80204c0 <lv_gradient_calculate>
 8009d7a:	68a3      	ldr	r3, [r4, #8]
 8009d7c:	3601      	adds	r6, #1
 8009d7e:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
    for(lv_coord_t i = 0; i < item->size; i++) {
 8009d82:	e7f1      	b.n	8009d68 <lv_gradient_get+0xe8>
        if(req_size <= grad_cache_size) {
 8009d84:	428d      	cmp	r5, r1
 8009d86:	d81e      	bhi.n	8009dc6 <lv_gradient_get+0x146>
                uint32_t oldest_life = UINT32_MAX;
 8009d88:	f04f 34ff 	mov.w	r4, #4294967295
            while(act_size + req_size > grad_cache_size) {
 8009d8c:	442a      	add	r2, r5
 8009d8e:	f8da 3000 	ldr.w	r3, [sl]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d806      	bhi.n	8009da4 <lv_gradient_get+0x124>
            item = (lv_grad_t *)grad_cache_end;
 8009d96:	f8d8 4000 	ldr.w	r4, [r8]
            item->not_cached = 0;
 8009d9a:	79e3      	ldrb	r3, [r4, #7]
 8009d9c:	f36f 13c7 	bfc	r3, #7, #1
            item->not_cached = 1;
 8009da0:	71e3      	strb	r3, [r4, #7]
 8009da2:	e7c4      	b.n	8009d2e <lv_gradient_get+0xae>
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 8009da4:	2200      	movs	r2, #0
 8009da6:	a905      	add	r1, sp, #20
 8009da8:	4811      	ldr	r0, [pc, #68]	; (8009df0 <lv_gradient_get+0x170>)
                uint32_t oldest_life = UINT32_MAX;
 8009daa:	9405      	str	r4, [sp, #20]
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 8009dac:	f7ff fed2 	bl	8009b54 <iterate_cache>
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 8009db0:	2200      	movs	r2, #0
 8009db2:	a905      	add	r1, sp, #20
 8009db4:	480f      	ldr	r0, [pc, #60]	; (8009df4 <lv_gradient_get+0x174>)
 8009db6:	f7ff fecd 	bl	8009b54 <iterate_cache>
                act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8009dba:	f8d8 2000 	ldr.w	r2, [r8]
 8009dbe:	f8db 3000 	ldr.w	r3, [fp]
 8009dc2:	1ad2      	subs	r2, r2, r3
 8009dc4:	e7e2      	b.n	8009d8c <lv_gradient_get+0x10c>
            item = lv_mem_alloc(req_size);
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f008 fca6 	bl	8012718 <lv_mem_alloc>
            LV_ASSERT_MALLOC(item);
 8009dcc:	4604      	mov	r4, r0
 8009dce:	b900      	cbnz	r0, 8009dd2 <lv_gradient_get+0x152>
 8009dd0:	e7fe      	b.n	8009dd0 <lv_gradient_get+0x150>
            item->not_cached = 1;
 8009dd2:	79c3      	ldrb	r3, [r0, #7]
 8009dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd8:	e7e2      	b.n	8009da0 <lv_gradient_get+0x120>
 8009dda:	bf00      	nop
 8009ddc:	24010d2e 	.word	0x24010d2e
 8009de0:	080204b5 	.word	0x080204b5
 8009de4:	24001168 	.word	0x24001168
 8009de8:	24001204 	.word	0x24001204
 8009dec:	2400116c 	.word	0x2400116c
 8009df0:	080204a3 	.word	0x080204a3
 8009df4:	08009bc1 	.word	0x08009bc1

08009df8 <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 8009df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfc:	4689      	mov	r9, r1
 8009dfe:	b0a5      	sub	sp, #148	; 0x94
 8009e00:	461d      	mov	r5, r3
 8009e02:	4614      	mov	r4, r2
 8009e04:	9005      	str	r0, [sp, #20]
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 8009e06:	2300      	movs	r3, #0
 8009e08:	462a      	mov	r2, r5
 8009e0a:	a912      	add	r1, sp, #72	; 0x48
 8009e0c:	f8d9 0000 	ldr.w	r0, [r9]
 8009e10:	f01a f8f7 	bl	8024002 <lv_font_get_glyph_dsc>
    if(g_ret == false) {
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d13d      	bne.n	8009e94 <lv_draw_sw_letter+0x9c>
        /*Add warning if the dsc is not found
         *but do not print warning for non printable ASCII chars (e.g. '\n')*/
        if(letter >= 0x20 &&
 8009e18:	2d1f      	cmp	r5, #31
 8009e1a:	d938      	bls.n	8009e8e <lv_draw_sw_letter+0x96>
 8009e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009e20:	429d      	cmp	r5, r3
 8009e22:	d034      	beq.n	8009e8e <lv_draw_sw_letter+0x96>
           letter != 0xf8ff && /*LV_SYMBOL_DUMMY*/
 8009e24:	f242 030c 	movw	r3, #8204	; 0x200c
 8009e28:	429d      	cmp	r5, r3
 8009e2a:	d030      	beq.n	8009e8e <lv_draw_sw_letter+0x96>

#if LV_USE_FONT_PLACEHOLDER
            /* draw placeholder */
            lv_area_t glyph_coords;
            lv_draw_rect_dsc_t glyph_dsc;
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 8009e2c:	8821      	ldrh	r1, [r4, #0]
 8009e2e:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 8009e32:	8862      	ldrh	r2, [r4, #2]
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 8009e34:	4419      	add	r1, r3
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 8009e36:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 8009e3a:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 8009e3e:	441a      	add	r2, r3
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 8009e40:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8009e44:	fa10 f082 	uxtah	r0, r0, r2
 8009e48:	fa13 f381 	uxtah	r3, r3, r1
 8009e4c:	b212      	sxth	r2, r2
 8009e4e:	b200      	sxth	r0, r0
 8009e50:	b21b      	sxth	r3, r3
 8009e52:	b209      	sxth	r1, r1
 8009e54:	9000      	str	r0, [sp, #0]
 8009e56:	a810      	add	r0, sp, #64	; 0x40
 8009e58:	f01a fa00 	bl	802425c <lv_area_set>
            lv_draw_rect_dsc_init(&glyph_dsc);
 8009e5c:	a816      	add	r0, sp, #88	; 0x58
 8009e5e:	f7fe fda1 	bl	80089a4 <lv_draw_rect_dsc_init>
            glyph_dsc.bg_opa = LV_OPA_MIN;
 8009e62:	2302      	movs	r3, #2
            glyph_dsc.outline_opa = LV_OPA_MIN;
            glyph_dsc.shadow_opa = LV_OPA_MIN;
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
            glyph_dsc.border_color = dsc->color;
            glyph_dsc.border_width = 1;
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 8009e64:	aa10      	add	r2, sp, #64	; 0x40
 8009e66:	a916      	add	r1, sp, #88	; 0x58
            glyph_dsc.bg_opa = LV_OPA_MIN;
 8009e68:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
            glyph_dsc.outline_opa = LV_OPA_MIN;
 8009e6c:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
            glyph_dsc.shadow_opa = LV_OPA_MIN;
 8009e70:	f88d 308e 	strb.w	r3, [sp, #142]	; 0x8e
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
 8009e74:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
            glyph_dsc.border_color = dsc->color;
 8009e78:	f8b9 300c 	ldrh.w	r3, [r9, #12]
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 8009e7c:	9805      	ldr	r0, [sp, #20]
            glyph_dsc.border_color = dsc->color;
 8009e7e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            glyph_dsc.border_width = 1;
 8009e82:	2301      	movs	r3, #1
 8009e84:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 8009e88:	9b05      	ldr	r3, [sp, #20]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	4798      	blx	r3
#endif
    }
    else {
        draw_letter_normal(draw_ctx, dsc, &gpos, &g, map_p);
    }
}
 8009e8e:	b025      	add	sp, #148	; 0x94
 8009e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((g.box_h == 0) || (g.box_w == 0)) return;
 8009e94:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	d0f8      	beq.n	8009e8e <lv_draw_sw_letter+0x96>
 8009e9c:	f8bd e04e 	ldrh.w	lr, [sp, #78]	; 0x4e
 8009ea0:	f1be 0f00 	cmp.w	lr, #0
 8009ea4:	d0f3      	beq.n	8009e8e <lv_draw_sw_letter+0x96>
    gpos.x = pos_p->x + g.ofs_x;
 8009ea6:	8823      	ldrh	r3, [r4, #0]
 8009ea8:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8009eac:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    gpos.x = pos_p->x + g.ofs_x;
 8009eb0:	4413      	add	r3, r2
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8009eb2:	f8d9 2000 	ldr.w	r2, [r9]
 8009eb6:	f9bd c054 	ldrsh.w	ip, [sp, #84]	; 0x54
 8009eba:	f9b2 7008 	ldrsh.w	r7, [r2, #8]
    gpos.x = pos_p->x + g.ofs_x;
 8009ebe:	fa1f fb83 	uxth.w	fp, r3
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8009ec2:	f9b2 400a 	ldrsh.w	r4, [r2, #10]
    gpos.x = pos_p->x + g.ofs_x;
 8009ec6:	b21e      	sxth	r6, r3
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 8009ec8:	9a05      	ldr	r2, [sp, #20]
 8009eca:	fa0e f383 	sxtah	r3, lr, r3
 8009ece:	6892      	ldr	r2, [r2, #8]
 8009ed0:	f9b2 e000 	ldrsh.w	lr, [r2]
 8009ed4:	4573      	cmp	r3, lr
 8009ed6:	dbda      	blt.n	8009e8e <lv_draw_sw_letter+0x96>
 8009ed8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8009edc:	42b3      	cmp	r3, r6
 8009ede:	dbd6      	blt.n	8009e8e <lv_draw_sw_letter+0x96>
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8009ee0:	eb01 030c 	add.w	r3, r1, ip
 8009ee4:	1ac0      	subs	r0, r0, r3
 8009ee6:	4438      	add	r0, r7
 8009ee8:	1b00      	subs	r0, r0, r4
 8009eea:	b283      	uxth	r3, r0
 8009eec:	b204      	sxth	r4, r0
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8009eee:	fa01 f080 	sxtah	r0, r1, r0
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8009ef2:	930a      	str	r3, [sp, #40]	; 0x28
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8009ef4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
       gpos.x > draw_ctx->clip_area->x2 ||
 8009ef8:	4298      	cmp	r0, r3
 8009efa:	dbc8      	blt.n	8009e8e <lv_draw_sw_letter+0x96>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8009efc:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8009f00:	42a3      	cmp	r3, r4
 8009f02:	dbc4      	blt.n	8009e8e <lv_draw_sw_letter+0x96>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 8009f04:	4629      	mov	r1, r5
 8009f06:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009f08:	f01a f877 	bl	8023ffa <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d0be      	beq.n	8009e8e <lv_draw_sw_letter+0x96>
    if(g.resolved_font->subpx) {
 8009f10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f12:	7b1b      	ldrb	r3, [r3, #12]
 8009f14:	079b      	lsls	r3, r3, #30
 8009f16:	d1ba      	bne.n	8009e8e <lv_draw_sw_letter+0x96>
{

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 8009f18:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    lv_opa_t opa = dsc->opa;
 8009f1c:	f899 101a 	ldrb.w	r1, [r9, #26]
    uint32_t bpp = g->bpp;
 8009f20:	f003 030f 	and.w	r3, r3, #15
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 8009f24:	2b03      	cmp	r3, #3
 8009f26:	f000 80e6 	beq.w	800a0f6 <lv_draw_sw_letter+0x2fe>
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	2b07      	cmp	r3, #7
 8009f2e:	d8ae      	bhi.n	8009e8e <lv_draw_sw_letter+0x96>
 8009f30:	a201      	add	r2, pc, #4	; (adr r2, 8009f38 <lv_draw_sw_letter+0x140>)
 8009f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f36:	bf00      	nop
 8009f38:	08009f59 	.word	0x08009f59
 8009f3c:	0800a103 	.word	0x0800a103
 8009f40:	08009e8f 	.word	0x08009e8f
 8009f44:	0800a0f7 	.word	0x0800a0f7
 8009f48:	08009e8f 	.word	0x08009e8f
 8009f4c:	08009e8f 	.word	0x08009e8f
 8009f50:	08009e8f 	.word	0x08009e8f
 8009f54:	0800a0e9 	.word	0x0800a0e9
        case 1:
            bpp_opa_table_p = _lv_bpp1_opa_table;
            bitmask_init  = 0x80;
 8009f58:	2280      	movs	r2, #128	; 0x80
    uint32_t bpp = g->bpp;
 8009f5a:	2501      	movs	r5, #1
            shades = 2;
 8009f5c:	2302      	movs	r3, #2
            bitmask_init  = 0x80;
 8009f5e:	9204      	str	r2, [sp, #16]
            bpp_opa_table_p = _lv_bpp1_opa_table;
 8009f60:	4aa8      	ldr	r2, [pc, #672]	; (800a204 <lv_draw_sw_letter+0x40c>)
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 8009f62:	29fc      	cmp	r1, #252	; 0xfc
    switch(bpp) {
 8009f64:	9202      	str	r2, [sp, #8]
    if(opa < LV_OPA_MAX) {
 8009f66:	d811      	bhi.n	8009f8c <lv_draw_sw_letter+0x194>
        if(prev_opa != opa || prev_bpp != bpp) {
 8009f68:	f8df c29c 	ldr.w	ip, [pc, #668]	; 800a208 <lv_draw_sw_letter+0x410>
 8009f6c:	f89c 2000 	ldrb.w	r2, [ip]
 8009f70:	428a      	cmp	r2, r1
 8009f72:	f040 80cc 	bne.w	800a10e <lv_draw_sw_letter+0x316>
 8009f76:	4aa5      	ldr	r2, [pc, #660]	; (800a20c <lv_draw_sw_letter+0x414>)
 8009f78:	6812      	ldr	r2, [r2, #0]
 8009f7a:	42aa      	cmp	r2, r5
 8009f7c:	f040 80c7 	bne.w	800a10e <lv_draw_sw_letter+0x316>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
            }
        }
        bpp_opa_table_p = opa_table;
        prev_opa = opa;
        prev_bpp = bpp;
 8009f80:	4ba2      	ldr	r3, [pc, #648]	; (800a20c <lv_draw_sw_letter+0x414>)
        prev_opa = opa;
 8009f82:	f88c 1000 	strb.w	r1, [ip]
        prev_bpp = bpp;
 8009f86:	601d      	str	r5, [r3, #0]
        bpp_opa_table_p = opa_table;
 8009f88:	4ba1      	ldr	r3, [pc, #644]	; (800a210 <lv_draw_sw_letter+0x418>)
 8009f8a:	9302      	str	r3, [sp, #8]
    int32_t box_w = g->box_w;
    int32_t box_h = g->box_h;
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8009f8c:	9b05      	ldr	r3, [sp, #20]
    int32_t box_w = g->box_w;
 8009f8e:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8009f92:	689b      	ldr	r3, [r3, #8]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8009f94:	eb06 0c08 	add.w	ip, r6, r8
    int32_t box_h = g->box_h;
 8009f98:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8009f9c:	f9b3 7000 	ldrsh.w	r7, [r3]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8009fa0:	fb05 f108 	mul.w	r1, r5, r8
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8009fa4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8009fa8:	42be      	cmp	r6, r7
 8009faa:	bfb4      	ite	lt
 8009fac:	1bbf      	sublt	r7, r7, r6
 8009fae:	2700      	movge	r7, #0
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8009fb0:	4594      	cmp	ip, r2
 8009fb2:	bfc8      	it	gt
 8009fb4:	1b96      	subgt	r6, r2, r6
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 8009fb6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8009fba:	bfd8      	it	le
 8009fbc:	4646      	movle	r6, r8
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8009fbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8009fc2:	bfc8      	it	gt
 8009fc4:	3601      	addgt	r6, #1
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 8009fc6:	4294      	cmp	r4, r2
 8009fc8:	bfb4      	ite	lt
 8009fca:	1b12      	sublt	r2, r2, r4
 8009fcc:	2200      	movge	r2, #0
 8009fce:	9203      	str	r2, [sp, #12]
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8009fd0:	eb04 020a 	add.w	r2, r4, sl
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	f04f 021c 	mov.w	r2, #28
 8009fda:	bfc8      	it	gt
 8009fdc:	1b1b      	subgt	r3, r3, r4

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8009fde:	fb07 f405 	mul.w	r4, r7, r5
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8009fe2:	bfd4      	ite	le
 8009fe4:	f8cd a020 	strle.w	sl, [sp, #32]
 8009fe8:	3301      	addgt	r3, #1
    blend_dsc.color = dsc->color;
    blend_dsc.opa = dsc->opa;
    blend_dsc.blend_mode = dsc->blend_mode;

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 8009fea:	fb0a fa08 	mul.w	sl, sl, r8
#endif
    blend_dsc.blend_area = &fill_area;
    blend_dsc.mask_area = &fill_area;

    uint32_t col_bit_max = 8 - bpp;
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 8009fee:	44b8      	add	r8, r7
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8009ff0:	bfc8      	it	gt
 8009ff2:	9308      	strgt	r3, [sp, #32]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8009ff4:	9b03      	ldr	r3, [sp, #12]
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 8009ff6:	eba8 0806 	sub.w	r8, r8, r6
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8009ffa:	fb03 4401 	mla	r4, r3, r1, r4
 8009ffe:	2100      	movs	r1, #0
    map_p += bit_ofs >> 3;
 800a000:	eb00 03d4 	add.w	r3, r0, r4, lsr #3
 800a004:	a816      	add	r0, sp, #88	; 0x58
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 800a006:	f004 0407 	and.w	r4, r4, #7
    map_p += bit_ofs >> 3;
 800a00a:	9306      	str	r3, [sp, #24]
 800a00c:	f010 fbbc 	bl	801a788 <memset>
    blend_dsc.color = dsc->color;
 800a010:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a014:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    blend_dsc.opa = dsc->opa;
 800a018:	f899 301a 	ldrb.w	r3, [r9, #26]
 800a01c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    blend_dsc.blend_mode = dsc->blend_mode;
 800a020:	f899 301e 	ldrb.w	r3, [r9, #30]
 800a024:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800a028:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800a02c:	f7fd f91e 	bl	800726c <_lv_refr_get_disp_refreshing>
 800a030:	f008 f866 	bl	8012100 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a034:	4582      	cmp	sl, r0
 800a036:	bfa8      	it	ge
 800a038:	4682      	movge	sl, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a03a:	4650      	mov	r0, sl
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a03c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a040:	f008 fbba 	bl	80127b8 <lv_mem_buf_get>
    fill_area.x1 = col_start + pos->x;
 800a044:	eb0b 0307 	add.w	r3, fp, r7
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a048:	9007      	str	r0, [sp, #28]
    fill_area.x2 = col_end  + pos->x - 1;
 800a04a:	f10b 3bff 	add.w	fp, fp, #4294967295
    blend_dsc.mask_buf = mask_buf;
 800a04e:	9019      	str	r0, [sp, #100]	; 0x64
    fill_area.x1 = col_start + pos->x;
 800a050:	b298      	uxth	r0, r3
    fill_area.x2 = col_end  + pos->x - 1;
 800a052:	44b3      	add	fp, r6
    fill_area.x1 = col_start + pos->x;
 800a054:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a056:	f1c0 0001 	rsb	r0, r0, #1
    fill_area.y1 = row_start + pos->y;
 800a05a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a05c:	9903      	ldr	r1, [sp, #12]
    fill_area.x2 = col_end  + pos->x - 1;
 800a05e:	fa0f fc8b 	sxth.w	ip, fp
 800a062:	fa10 fb8b 	uxtah	fp, r0, fp
    fill_area.x1 = col_start + pos->x;
 800a066:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    fill_area.y1 = row_start + pos->y;
 800a06a:	440a      	add	r2, r1
    dest->x1 = src->x1;
 800a06c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    mask_area.y2 = mask_area.y1 + row_end;
 800a070:	9b08      	ldr	r3, [sp, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a072:	fa0f f08b 	sxth.w	r0, fp
    fill_area.y1 = row_start + pos->y;
 800a076:	b211      	sxth	r1, r2
    fill_area.x2 = col_end  + pos->x - 1;
 800a078:	f8ad c03c 	strh.w	ip, [sp, #60]	; 0x3c
    mask_area.y2 = mask_area.y1 + row_end;
 800a07c:	fa13 f282 	uxtah	r2, r3, r2
 800a080:	900a      	str	r0, [sp, #40]	; 0x28
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 800a082:	a810      	add	r0, sp, #64	; 0x40
    fill_area.y1 = row_start + pos->y;
 800a084:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    fill_area.y2 = fill_area.y1;
 800a088:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    dest->y1 = src->y1;
 800a08c:	eba6 0a07 	sub.w	sl, r6, r7
 800a090:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
    dest->x2 = src->x2;
 800a094:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
    mask_area.y2 = mask_area.y1 + row_end;
 800a098:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 800a09c:	f7fe f972 	bl	8008384 <lv_draw_mask_is_any>
    blend_dsc.blend_area = &fill_area;
 800a0a0:	ab0e      	add	r3, sp, #56	; 0x38
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 800a0a2:	900c      	str	r0, [sp, #48]	; 0x30
    blend_dsc.blend_area = &fill_area;
 800a0a4:	9316      	str	r3, [sp, #88]	; 0x58
    blend_dsc.mask_area = &fill_area;
 800a0a6:	931b      	str	r3, [sp, #108]	; 0x6c
    uint32_t col_bit_max = 8 - bpp;
 800a0a8:	f1c5 0308 	rsb	r3, r5, #8
 800a0ac:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a0ae:	fb05 f308 	mul.w	r3, r5, r8
    int32_t mask_p = 0;
 800a0b2:	f04f 0800 	mov.w	r8, #0
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a0b6:	930d      	str	r3, [sp, #52]	; 0x34

    for(row = row_start ; row < row_end; row++) {
 800a0b8:	9b08      	ldr	r3, [sp, #32]
 800a0ba:	9a03      	ldr	r2, [sp, #12]
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	dc37      	bgt.n	800a130 <lv_draw_sw_letter+0x338>
        map_p += (col_bit >> 3);
        col_bit = col_bit & 0x7;
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800a0c0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800a0c4:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d009      	beq.n	800a0e0 <lv_draw_sw_letter+0x2e8>
        fill_area.y2--;
 800a0cc:	3b01      	subs	r3, #1
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a0ce:	a916      	add	r1, sp, #88	; 0x58
 800a0d0:	9805      	ldr	r0, [sp, #20]
        fill_area.y2--;
 800a0d2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a0dc:	f016 f9ad 	bl	802043a <lv_draw_sw_blend>
        mask_p = 0;
    }

    lv_mem_buf_release(mask_buf);
 800a0e0:	9807      	ldr	r0, [sp, #28]
 800a0e2:	f008 fbb3 	bl	801284c <lv_mem_buf_release>
 800a0e6:	e6d2      	b.n	8009e8e <lv_draw_sw_letter+0x96>
            bitmask_init  = 0xFF;
 800a0e8:	22ff      	movs	r2, #255	; 0xff
    uint32_t bpp = g->bpp;
 800a0ea:	2508      	movs	r5, #8
            shades = 256;
 800a0ec:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
 800a0f0:	9204      	str	r2, [sp, #16]
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800a0f2:	4a48      	ldr	r2, [pc, #288]	; (800a214 <lv_draw_sw_letter+0x41c>)
 800a0f4:	e735      	b.n	8009f62 <lv_draw_sw_letter+0x16a>
            bitmask_init  = 0xF0;
 800a0f6:	22f0      	movs	r2, #240	; 0xf0
 800a0f8:	2504      	movs	r5, #4
            shades = 16;
 800a0fa:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
 800a0fc:	9204      	str	r2, [sp, #16]
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800a0fe:	4a46      	ldr	r2, [pc, #280]	; (800a218 <lv_draw_sw_letter+0x420>)
 800a100:	e72f      	b.n	8009f62 <lv_draw_sw_letter+0x16a>
    switch(bpp) {
 800a102:	22c0      	movs	r2, #192	; 0xc0
 800a104:	2502      	movs	r5, #2
 800a106:	2304      	movs	r3, #4
 800a108:	9204      	str	r2, [sp, #16]
 800a10a:	4a44      	ldr	r2, [pc, #272]	; (800a21c <lv_draw_sw_letter+0x424>)
 800a10c:	e729      	b.n	8009f62 <lv_draw_sw_letter+0x16a>
 800a10e:	9f02      	ldr	r7, [sp, #8]
 800a110:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 800a210 <lv_draw_sw_letter+0x418>
 800a114:	443b      	add	r3, r7
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800a116:	f817 2b01 	ldrb.w	r2, [r7], #1
 800a11a:	2aff      	cmp	r2, #255	; 0xff
 800a11c:	bf16      	itet	ne
 800a11e:	fb12 f201 	smulbbne	r2, r2, r1
 800a122:	460a      	moveq	r2, r1
 800a124:	0a12      	lsrne	r2, r2, #8
            for(i = 0; i < shades; i++) {
 800a126:	42bb      	cmp	r3, r7
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800a128:	f80e 2b01 	strb.w	r2, [lr], #1
            for(i = 0; i < shades; i++) {
 800a12c:	d1f3      	bne.n	800a116 <lv_draw_sw_letter+0x31e>
 800a12e:	e727      	b.n	8009f80 <lv_draw_sw_letter+0x188>
        bitmask = bitmask_init >> col_bit;
 800a130:	9b04      	ldr	r3, [sp, #16]
        for(col = col_start; col < col_end; col++) {
 800a132:	4639      	mov	r1, r7
        bitmask = bitmask_init >> col_bit;
 800a134:	fa23 f204 	lsr.w	r2, r3, r4
        for(col = col_start; col < col_end; col++) {
 800a138:	9b07      	ldr	r3, [sp, #28]
 800a13a:	eb03 0b08 	add.w	fp, r3, r8
 800a13e:	4658      	mov	r0, fp
 800a140:	428e      	cmp	r6, r1
 800a142:	dc32      	bgt.n	800a1aa <lv_draw_sw_letter+0x3b2>
        if(mask_any) {
 800a144:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a146:	42b7      	cmp	r7, r6
 800a148:	bfd4      	ite	le
 800a14a:	46d1      	movle	r9, sl
 800a14c:	f04f 0900 	movgt.w	r9, #0
 800a150:	b17b      	cbz	r3, 800a172 <lv_draw_sw_letter+0x37a>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 800a152:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 800a156:	4658      	mov	r0, fp
 800a158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a15a:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 800a15e:	f7fe f8b9 	bl	80082d4 <lv_draw_mask_apply>
 800a162:	4601      	mov	r1, r0
 800a164:	f88d 0068 	strb.w	r0, [sp, #104]	; 0x68
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800a168:	b918      	cbnz	r0, 800a172 <lv_draw_sw_letter+0x37a>
 800a16a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a16c:	4658      	mov	r0, fp
 800a16e:	f010 fb0b 	bl	801a788 <memset>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800a172:	44d1      	add	r9, sl
 800a174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a176:	44c1      	add	r9, r8
 800a178:	454b      	cmp	r3, r9
 800a17a:	d933      	bls.n	800a1e4 <lv_draw_sw_letter+0x3ec>
 800a17c:	42b7      	cmp	r7, r6
 800a17e:	bfd4      	ite	le
 800a180:	4653      	movle	r3, sl
 800a182:	2300      	movgt	r3, #0
 800a184:	4498      	add	r8, r3
            fill_area.y2 ++;
 800a186:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a18a:	3301      	adds	r3, #1
 800a18c:	b21b      	sxth	r3, r3
 800a18e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        col_bit += col_bit_row_ofs;
 800a192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a194:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
 800a196:	9b06      	ldr	r3, [sp, #24]
 800a198:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
        col_bit = col_bit & 0x7;
 800a19c:	f004 0407 	and.w	r4, r4, #7
        map_p += (col_bit >> 3);
 800a1a0:	9306      	str	r3, [sp, #24]
    for(row = row_start ; row < row_end; row++) {
 800a1a2:	9b03      	ldr	r3, [sp, #12]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	9303      	str	r3, [sp, #12]
 800a1a8:	e786      	b.n	800a0b8 <lv_draw_sw_letter+0x2c0>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800a1aa:	9b06      	ldr	r3, [sp, #24]
        for(col = col_start; col < col_end; col++) {
 800a1ac:	3101      	adds	r1, #1
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800a1ae:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	ebac 0c04 	sub.w	ip, ip, r4
 800a1b8:	4013      	ands	r3, r2
            if(letter_px) {
 800a1ba:	fa33 f30c 	lsrs.w	r3, r3, ip
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800a1be:	bf1c      	itt	ne
 800a1c0:	f8dd c008 	ldrne.w	ip, [sp, #8]
 800a1c4:	f81c 3003 	ldrbne.w	r3, [ip, r3]
 800a1c8:	f800 3b01 	strb.w	r3, [r0], #1
            if(col_bit < col_bit_max) {
 800a1cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ce:	42a3      	cmp	r3, r4
                map_p++;
 800a1d0:	bf93      	iteet	ls
 800a1d2:	9b06      	ldrls	r3, [sp, #24]
                col_bit += bpp;
 800a1d4:	1964      	addhi	r4, r4, r5
                bitmask = bitmask >> bpp;
 800a1d6:	40ea      	lsrhi	r2, r5
                bitmask = bitmask_init;
 800a1d8:	9a04      	ldrls	r2, [sp, #16]
                map_p++;
 800a1da:	bf9e      	ittt	ls
 800a1dc:	3301      	addls	r3, #1
                col_bit = 0;
 800a1de:	2400      	movls	r4, #0
                map_p++;
 800a1e0:	9306      	strls	r3, [sp, #24]
        for(col = col_start; col < col_end; col++) {
 800a1e2:	e7ad      	b.n	800a140 <lv_draw_sw_letter+0x348>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a1e4:	2302      	movs	r3, #2
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a1e6:	a916      	add	r1, sp, #88	; 0x58
 800a1e8:	9805      	ldr	r0, [sp, #20]
            mask_p = 0;
 800a1ea:	f04f 0800 	mov.w	r8, #0
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a1ee:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a1f2:	f016 f922 	bl	802043a <lv_draw_sw_blend>
            fill_area.y1 = fill_area.y2 + 1;
 800a1f6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	b21b      	sxth	r3, r3
 800a1fe:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            mask_p = 0;
 800a202:	e7c4      	b.n	800a18e <lv_draw_sw_letter+0x396>
 800a204:	0802ac1e 	.word	0x0802ac1e
 800a208:	24010e2f 	.word	0x24010e2f
 800a20c:	24001170 	.word	0x24001170
 800a210:	24010d2f 	.word	0x24010d2f
 800a214:	0802ab0a 	.word	0x0802ab0a
 800a218:	0802ac0a 	.word	0x0802ac0a
 800a21c:	0802ac1a 	.word	0x0802ac1a

0800a220 <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 800a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	b0c5      	sub	sp, #276	; 0x114
 800a226:	460c      	mov	r4, r1
 800a228:	e9cd 2303 	strd	r2, r3, [sp, #12]
    if(dsc->width == 0) return;
 800a22c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
{
 800a230:	9002      	str	r0, [sp, #8]
    if(dsc->width == 0) return;
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 80e7 	beq.w	800a406 <lv_draw_sw_line+0x1e6>
    if(dsc->opa <= LV_OPA_MIN) return;
 800a238:	7a0a      	ldrb	r2, [r1, #8]
 800a23a:	2a02      	cmp	r2, #2
 800a23c:	f240 80e3 	bls.w	800a406 <lv_draw_sw_line+0x1e6>

    if(point1->x == point2->x && point1->y == point2->y) return;
 800a240:	9a03      	ldr	r2, [sp, #12]
 800a242:	f9b2 5000 	ldrsh.w	r5, [r2]
 800a246:	9a04      	ldr	r2, [sp, #16]
 800a248:	f9b2 0000 	ldrsh.w	r0, [r2]
 800a24c:	9a03      	ldr	r2, [sp, #12]
 800a24e:	4285      	cmp	r5, r0
 800a250:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800a254:	9a04      	ldr	r2, [sp, #16]
 800a256:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a25a:	d102      	bne.n	800a262 <lv_draw_sw_line+0x42>
 800a25c:	4291      	cmp	r1, r2
 800a25e:	f000 80d2 	beq.w	800a406 <lv_draw_sw_line+0x1e6>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800a262:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800a266:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800a26a:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800a26e:	4285      	cmp	r5, r0
 800a270:	bfd4      	ite	le
 800a272:	ebc3 0605 	rsble	r6, r3, r5
 800a276:	ebc3 0600 	rsbgt	r6, r3, r0
 800a27a:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800a27e:	4285      	cmp	r5, r0
 800a280:	bfac      	ite	ge
 800a282:	195e      	addge	r6, r3, r5
 800a284:	181e      	addlt	r6, r3, r0
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800a286:	4291      	cmp	r1, r2
 800a288:	bfd4      	ite	le
 800a28a:	ebc3 0001 	rsble	r0, r3, r1
 800a28e:	ebc3 0002 	rsbgt	r0, r3, r2
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800a292:	4291      	cmp	r1, r2
 800a294:	bfac      	ite	ge
 800a296:	185b      	addge	r3, r3, r1
 800a298:	189b      	addlt	r3, r3, r2
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800a29a:	4651      	mov	r1, sl
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800a29c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800a2a0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800a2a4:	9b02      	ldr	r3, [sp, #8]
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800a2a6:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800a2aa:	4650      	mov	r0, sl
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	f01a f814 	bl	80242da <_lv_area_intersect>
    if(!is_common) return;
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	f000 80a7 	beq.w	800a406 <lv_draw_sw_line+0x1e6>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800a2b8:	9b02      	ldr	r3, [sp, #8]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	9306      	str	r3, [sp, #24]
    draw_ctx->clip_area = &clip_line;
 800a2be:	9b02      	ldr	r3, [sp, #8]
 800a2c0:	f8c3 a008 	str.w	sl, [r3, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 800a2c4:	9b03      	ldr	r3, [sp, #12]
 800a2c6:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800a2ca:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 800a2ce:	9b04      	ldr	r3, [sp, #16]
 800a2d0:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 800a2d4:	9b03      	ldr	r3, [sp, #12]
 800a2d6:	4546      	cmp	r6, r8
 800a2d8:	f040 810e 	bne.w	800a4f8 <lv_draw_sw_line+0x2d8>
 800a2dc:	9a04      	ldr	r2, [sp, #16]


LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
    int32_t w = dsc->width - 1;
 800a2de:	3d01      	subs	r5, #1
 800a2e0:	f9b3 3000 	ldrsh.w	r3, [r3]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(point1->x, point2->x);
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
    blend_area.y1 = point1->y - w_half1;
 800a2e4:	b2b6      	uxth	r6, r6
 800a2e6:	f9b2 2000 	ldrsh.w	r2, [r2]
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	bfa8      	it	ge
 800a2f0:	4611      	movge	r1, r2
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	bfb8      	it	lt
 800a2f6:	4613      	movlt	r3, r2
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800a2f8:	f8ad 10ac 	strh.w	r1, [sp, #172]	; 0xac
    blend_area.y2 = point1->y + w_half0;

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a2fc:	a92b      	add	r1, sp, #172	; 0xac
 800a2fe:	4652      	mov	r2, sl
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800a300:	3b01      	subs	r3, #1
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a302:	4608      	mov	r0, r1
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800a304:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800a308:	f005 0301 	and.w	r3, r5, #1
 800a30c:	eb03 0365 	add.w	r3, r3, r5, asr #1
    blend_area.y1 = point1->y - w_half1;
 800a310:	1af3      	subs	r3, r6, r3
    blend_area.y2 = point1->y + w_half0;
 800a312:	eb06 0665 	add.w	r6, r6, r5, asr #1
    blend_area.y1 = point1->y - w_half1;
 800a316:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
    blend_area.y2 = point1->y + w_half0;
 800a31a:	f8ad 60b2 	strh.w	r6, [sp, #178]	; 0xb2
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a31e:	f019 ffdc 	bl	80242da <_lv_area_intersect>
    if(!is_common) return;
 800a322:	b300      	cbz	r0, 800a366 <lv_draw_sw_line+0x146>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a324:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    bool simple_mode = true;
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a328:	a82b      	add	r0, sp, #172	; 0xac
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d06e      	beq.n	800a40c <lv_draw_sw_line+0x1ec>
 800a32e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d06a      	beq.n	800a40c <lv_draw_sw_line+0x1ec>
 800a336:	f04f 0901 	mov.w	r9, #1
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a33a:	2500      	movs	r5, #0
 800a33c:	f7fe f822 	bl	8008384 <lv_draw_mask_is_any>
 800a340:	221c      	movs	r2, #28
 800a342:	2100      	movs	r1, #0
 800a344:	a836      	add	r0, sp, #216	; 0xd8
 800a346:	f010 fa1f 	bl	801a788 <memset>
    else if(dashed) simple_mode = false;

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
    blend_dsc.blend_area = &blend_area;
 800a34a:	ab2b      	add	r3, sp, #172	; 0xac
 800a34c:	9336      	str	r3, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 800a34e:	8823      	ldrh	r3, [r4, #0]
 800a350:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 800a354:	7a23      	ldrb	r3, [r4, #8]
 800a356:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 800a35a:	2d00      	cmp	r5, #0
 800a35c:	d05e      	beq.n	800a41c <lv_draw_sw_line+0x1fc>
    blend_dsc.color = dsc->color;
    blend_dsc.opa = dsc->opa;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a35e:	a936      	add	r1, sp, #216	; 0xd8
 800a360:	9802      	ldr	r0, [sp, #8]
 800a362:	f016 f86a 	bl	802043a <lv_draw_sw_blend>
    if(dsc->round_end || dsc->round_start) {
 800a366:	7a63      	ldrb	r3, [r4, #9]
 800a368:	f013 0f0c 	tst.w	r3, #12
 800a36c:	d048      	beq.n	800a400 <lv_draw_sw_line+0x1e0>
        lv_draw_rect_dsc_init(&cir_dsc);
 800a36e:	a836      	add	r0, sp, #216	; 0xd8
 800a370:	f7fe fb18 	bl	80089a4 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 800a374:	8823      	ldrh	r3, [r4, #0]
        int32_t r = (dsc->width >> 1);
 800a376:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
        cir_dsc.bg_color = dsc->color;
 800a37a:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800a37e:	f647 73ff 	movw	r3, #32767	; 0x7fff
        int32_t r = (dsc->width >> 1);
 800a382:	1075      	asrs	r5, r6, #1
 800a384:	43f6      	mvns	r6, r6
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800a386:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
        cir_dsc.bg_opa = dsc->opa;
 800a38a:	7a23      	ldrb	r3, [r4, #8]
 800a38c:	f006 0601 	and.w	r6, r6, #1
 800a390:	f88d 30db 	strb.w	r3, [sp, #219]	; 0xdb
        if(dsc->round_start) {
 800a394:	7a63      	ldrb	r3, [r4, #9]
 800a396:	075a      	lsls	r2, r3, #29
 800a398:	d517      	bpl.n	800a3ca <lv_draw_sw_line+0x1aa>
            cir_area.x1 = point1->x - r;
 800a39a:	9b03      	ldr	r3, [sp, #12]
 800a39c:	881a      	ldrh	r2, [r3, #0]
 800a39e:	b2ab      	uxth	r3, r5
 800a3a0:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point1->x + r - r_corr;
 800a3a2:	441a      	add	r2, r3
            cir_area.x1 = point1->x - r;
 800a3a4:	f8ad 10ac 	strh.w	r1, [sp, #172]	; 0xac
            cir_area.x2 = point1->x + r - r_corr;
 800a3a8:	1b92      	subs	r2, r2, r6
            cir_area.y1 = point1->y - r;
 800a3aa:	9903      	ldr	r1, [sp, #12]
            cir_area.x2 = point1->x + r - r_corr;
 800a3ac:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a3b0:	aa2b      	add	r2, sp, #172	; 0xac
            cir_area.y1 = point1->y - r;
 800a3b2:	8849      	ldrh	r1, [r1, #2]
 800a3b4:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point1->y + r - r_corr ;
 800a3b6:	440b      	add	r3, r1
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a3b8:	a936      	add	r1, sp, #216	; 0xd8
            cir_area.y2 = point1->y + r - r_corr ;
 800a3ba:	1b9b      	subs	r3, r3, r6
            cir_area.y1 = point1->y - r;
 800a3bc:	f8ad 00ae 	strh.w	r0, [sp, #174]	; 0xae
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a3c0:	9802      	ldr	r0, [sp, #8]
            cir_area.y2 = point1->y + r - r_corr ;
 800a3c2:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a3c6:	f015 f822 	bl	801f40e <lv_draw_rect>
        if(dsc->round_end) {
 800a3ca:	7a63      	ldrb	r3, [r4, #9]
 800a3cc:	071b      	lsls	r3, r3, #28
 800a3ce:	d517      	bpl.n	800a400 <lv_draw_sw_line+0x1e0>
            cir_area.x1 = point2->x - r;
 800a3d0:	9b04      	ldr	r3, [sp, #16]
 800a3d2:	881a      	ldrh	r2, [r3, #0]
 800a3d4:	b2ab      	uxth	r3, r5
 800a3d6:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point2->x + r - r_corr;
 800a3d8:	441a      	add	r2, r3
            cir_area.x1 = point2->x - r;
 800a3da:	f8ad 10ac 	strh.w	r1, [sp, #172]	; 0xac
            cir_area.x2 = point2->x + r - r_corr;
 800a3de:	1b92      	subs	r2, r2, r6
            cir_area.y1 = point2->y - r;
 800a3e0:	9904      	ldr	r1, [sp, #16]
            cir_area.x2 = point2->x + r - r_corr;
 800a3e2:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a3e6:	aa2b      	add	r2, sp, #172	; 0xac
            cir_area.y1 = point2->y - r;
 800a3e8:	8849      	ldrh	r1, [r1, #2]
 800a3ea:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point2->y + r - r_corr ;
 800a3ec:	440b      	add	r3, r1
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a3ee:	a936      	add	r1, sp, #216	; 0xd8
            cir_area.y2 = point2->y + r - r_corr ;
 800a3f0:	1b9b      	subs	r3, r3, r6
            cir_area.y1 = point2->y - r;
 800a3f2:	f8ad 00ae 	strh.w	r0, [sp, #174]	; 0xae
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a3f6:	9802      	ldr	r0, [sp, #8]
            cir_area.y2 = point2->y + r - r_corr ;
 800a3f8:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a3fc:	f015 f807 	bl	801f40e <lv_draw_rect>
    draw_ctx->clip_area = clip_area_ori;
 800a400:	9b02      	ldr	r3, [sp, #8]
 800a402:	9a06      	ldr	r2, [sp, #24]
 800a404:	609a      	str	r2, [r3, #8]
}
 800a406:	b045      	add	sp, #276	; 0x114
 800a408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a40c:	f7fd ffba 	bl	8008384 <lv_draw_mask_is_any>
 800a410:	f080 0501 	eor.w	r5, r0, #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a414:	f04f 0900 	mov.w	r9, #0
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a418:	b2ed      	uxtb	r5, r5
 800a41a:	e791      	b.n	800a340 <lv_draw_sw_line+0x120>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a41c:	f8bd 50b0 	ldrh.w	r5, [sp, #176]	; 0xb0
 800a420:	f9bd 60ac 	ldrsh.w	r6, [sp, #172]	; 0xac
 800a424:	3501      	adds	r5, #1
        blend_area.y2 = blend_area.y1;
 800a426:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
        lv_coord_t y2 = blend_area.y2;
 800a42a:	f9bd a0b2 	ldrsh.w	sl, [sp, #178]	; 0xb2
 800a42e:	1bad      	subs	r5, r5, r6
        blend_area.y2 = blend_area.y1;
 800a430:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
 800a434:	b22d      	sxth	r5, r5
        if(dashed) {
 800a436:	f1b9 0f00 	cmp.w	r9, #0
 800a43a:	d01a      	beq.n	800a472 <lv_draw_sw_line+0x252>
            dash_start = (blend_area.x1) % (dsc->dash_gap + dsc->dash_width);
 800a43c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800a440:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800a444:	4413      	add	r3, r2
 800a446:	fb96 f2f3 	sdiv	r2, r6, r3
 800a44a:	fb03 6612 	mls	r6, r3, r2, r6
 800a44e:	b236      	sxth	r6, r6
        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 800a450:	4628      	mov	r0, r5
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800a452:	f04f 0b00 	mov.w	fp, #0
        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 800a456:	f008 f9af 	bl	80127b8 <lv_mem_buf_get>
        blend_dsc.mask_area = &blend_area;
 800a45a:	ab2b      	add	r3, sp, #172	; 0xac
        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 800a45c:	4607      	mov	r7, r0
        for(h = blend_area.y1; h <= y2; h++) {
 800a45e:	f9bd 80ae 	ldrsh.w	r8, [sp, #174]	; 0xae
        blend_dsc.mask_buf = mask_buf;
 800a462:	9039      	str	r0, [sp, #228]	; 0xe4
        blend_dsc.mask_area = &blend_area;
 800a464:	933b      	str	r3, [sp, #236]	; 0xec
        for(h = blend_area.y1; h <= y2; h++) {
 800a466:	45d0      	cmp	r8, sl
 800a468:	dd05      	ble.n	800a476 <lv_draw_sw_line+0x256>
        lv_mem_buf_release(mask_buf);
 800a46a:	4638      	mov	r0, r7
            lv_draw_sw_blend(draw_ctx, &blend_dsc);

            blend_area.y1++;
            blend_area.y2++;
        }
        lv_mem_buf_release(mask_buf);
 800a46c:	f008 f9ee 	bl	801284c <lv_mem_buf_release>
 800a470:	e779      	b.n	800a366 <lv_draw_sw_line+0x146>
        lv_coord_t dash_start = 0;
 800a472:	464e      	mov	r6, r9
 800a474:	e7ec      	b.n	800a450 <lv_draw_sw_line+0x230>
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void lv_memset_ff(void * dst, size_t len)
{
    memset(dst, 0xFF, len);
 800a476:	462a      	mov	r2, r5
 800a478:	21ff      	movs	r1, #255	; 0xff
 800a47a:	4638      	mov	r0, r7
 800a47c:	f010 f984 	bl	801a788 <memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_area_w);
 800a480:	462b      	mov	r3, r5
 800a482:	fa0f f288 	sxth.w	r2, r8
 800a486:	f9bd 10ac 	ldrsh.w	r1, [sp, #172]	; 0xac
 800a48a:	4638      	mov	r0, r7
 800a48c:	f7fd ff22 	bl	80082d4 <lv_draw_mask_apply>
 800a490:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
            if(dashed) {
 800a494:	f1b9 0f00 	cmp.w	r9, #0
 800a498:	d013      	beq.n	800a4c2 <lv_draw_sw_line+0x2a2>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800a49a:	b190      	cbz	r0, 800a4c2 <lv_draw_sw_line+0x2a2>
                    lv_coord_t dash_cnt = dash_start;
 800a49c:	4631      	mov	r1, r6
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800a49e:	2300      	movs	r3, #0
 800a4a0:	e00a      	b.n	800a4b8 <lv_draw_sw_line+0x298>
                        if(dash_cnt <= dsc->dash_width) {
 800a4a2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800a4a6:	428a      	cmp	r2, r1
 800a4a8:	db1c      	blt.n	800a4e4 <lv_draw_sw_line+0x2c4>
                            i += diff;
 800a4aa:	4413      	add	r3, r2
 800a4ac:	1a5b      	subs	r3, r3, r1
 800a4ae:	b21b      	sxth	r3, r3
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	3201      	adds	r2, #1
 800a4b4:	b21b      	sxth	r3, r3
 800a4b6:	b211      	sxth	r1, r2
 800a4b8:	429d      	cmp	r5, r3
 800a4ba:	dcf2      	bgt.n	800a4a2 <lv_draw_sw_line+0x282>
                    blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a4bc:	2302      	movs	r3, #2
 800a4be:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a4c2:	a936      	add	r1, sp, #216	; 0xd8
 800a4c4:	9802      	ldr	r0, [sp, #8]
 800a4c6:	f015 ffb8 	bl	802043a <lv_draw_sw_blend>
            blend_area.y1++;
 800a4ca:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
        for(h = blend_area.y1; h <= y2; h++) {
 800a4ce:	f108 0801 	add.w	r8, r8, #1
            blend_area.y1++;
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
            blend_area.y2++;
 800a4d8:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 800a4dc:	3301      	adds	r3, #1
 800a4de:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        for(h = blend_area.y1; h <= y2; h++) {
 800a4e2:	e7c0      	b.n	800a466 <lv_draw_sw_line+0x246>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800a4e4:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800a4e8:	4402      	add	r2, r0
 800a4ea:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
 800a4ec:	bfb6      	itet	lt
 800a4ee:	460a      	movlt	r2, r1
                            dash_cnt = 0;
 800a4f0:	2200      	movge	r2, #0
                            mask_buf[i] = 0x00;
 800a4f2:	f807 b003 	strblt.w	fp, [r7, r3]
 800a4f6:	e7db      	b.n	800a4b0 <lv_draw_sw_line+0x290>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 800a4f8:	f9b3 7000 	ldrsh.w	r7, [r3]
 800a4fc:	9b04      	ldr	r3, [sp, #16]
 800a4fe:	f9b3 9000 	ldrsh.w	r9, [r3]
 800a502:	454f      	cmp	r7, r9
 800a504:	f040 80a1 	bne.w	800a64a <lv_draw_sw_line+0x42a>
    int32_t w = dsc->width - 1;
 800a508:	3d01      	subs	r5, #1
    blend_area.x1 = point1->x - w_half1;
 800a50a:	b2bf      	uxth	r7, r7
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 800a50c:	4546      	cmp	r6, r8
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a50e:	a92b      	add	r1, sp, #172	; 0xac
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800a510:	f005 0301 	and.w	r3, r5, #1
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a514:	4652      	mov	r2, sl
 800a516:	4608      	mov	r0, r1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800a518:	eb03 0365 	add.w	r3, r3, r5, asr #1
    blend_area.x1 = point1->x - w_half1;
 800a51c:	eba7 0303 	sub.w	r3, r7, r3
    blend_area.x2 = point1->x + w_half0;
 800a520:	eb07 0765 	add.w	r7, r7, r5, asr #1
    blend_area.x1 = point1->x - w_half1;
 800a524:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 800a528:	4633      	mov	r3, r6
 800a52a:	bfa8      	it	ge
 800a52c:	4643      	movge	r3, r8
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800a52e:	4546      	cmp	r6, r8
    blend_area.x2 = point1->x + w_half0;
 800a530:	f8ad 70b0 	strh.w	r7, [sp, #176]	; 0xb0
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800a534:	bfb8      	it	lt
 800a536:	4646      	movlt	r6, r8
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 800a538:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800a53c:	3e01      	subs	r6, #1
 800a53e:	f8ad 60b2 	strh.w	r6, [sp, #178]	; 0xb2
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a542:	f019 feca 	bl	80242da <_lv_area_intersect>
    if(!is_common) return;
 800a546:	2800      	cmp	r0, #0
 800a548:	f43f af0d 	beq.w	800a366 <lv_draw_sw_line+0x146>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a54c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a550:	a82b      	add	r0, sp, #172	; 0xac
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a552:	b11b      	cbz	r3, 800a55c <lv_draw_sw_line+0x33c>
 800a554:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d13d      	bne.n	800a5d8 <lv_draw_sw_line+0x3b8>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a55c:	f7fd ff12 	bl	8008384 <lv_draw_mask_is_any>
 800a560:	f080 0501 	eor.w	r5, r0, #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a564:	f04f 0900 	mov.w	r9, #0
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a568:	b2ed      	uxtb	r5, r5
    memset(dst, 0x00, len);
 800a56a:	221c      	movs	r2, #28
 800a56c:	2100      	movs	r1, #0
 800a56e:	a836      	add	r0, sp, #216	; 0xd8
 800a570:	f010 f90a 	bl	801a788 <memset>
    blend_dsc.blend_area = &blend_area;
 800a574:	ab2b      	add	r3, sp, #172	; 0xac
 800a576:	9336      	str	r3, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 800a578:	8823      	ldrh	r3, [r4, #0]
 800a57a:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 800a57e:	7a23      	ldrb	r3, [r4, #8]
 800a580:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
    if(simple_mode) {
 800a584:	2d00      	cmp	r5, #0
 800a586:	f47f aeea 	bne.w	800a35e <lv_draw_sw_line+0x13e>
 800a58a:	f8bd 60b0 	ldrh.w	r6, [sp, #176]	; 0xb0
 800a58e:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 800a592:	3601      	adds	r6, #1
        lv_coord_t y2 = blend_area.y2;
 800a594:	f9bd a0b2 	ldrsh.w	sl, [sp, #178]	; 0xb2
 800a598:	1af6      	subs	r6, r6, r3
        blend_area.y2 = blend_area.y1;
 800a59a:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 800a59e:	b236      	sxth	r6, r6
 800a5a0:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f008 f907 	bl	80127b8 <lv_mem_buf_get>
        blend_dsc.mask_area = &blend_area;
 800a5aa:	ab2b      	add	r3, sp, #172	; 0xac
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800a5ac:	4680      	mov	r8, r0
        blend_dsc.mask_buf = mask_buf;
 800a5ae:	f9bd 70ae 	ldrsh.w	r7, [sp, #174]	; 0xae
 800a5b2:	9039      	str	r0, [sp, #228]	; 0xe4
        blend_dsc.mask_area = &blend_area;
 800a5b4:	933b      	str	r3, [sp, #236]	; 0xec
        if(dashed) {
 800a5b6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ba:	d013      	beq.n	800a5e4 <lv_draw_sw_line+0x3c4>
            dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800a5bc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800a5c0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	fb97 f5f3 	sdiv	r5, r7, r3
 800a5ca:	fb03 7515 	mls	r5, r3, r5, r7
 800a5ce:	b22d      	sxth	r5, r5
        for(h = blend_area.y1; h <= y2; h++) {
 800a5d0:	4557      	cmp	r7, sl
 800a5d2:	dd09      	ble.n	800a5e8 <lv_draw_sw_line+0x3c8>
        lv_mem_buf_release(mask_buf);
 800a5d4:	4640      	mov	r0, r8
 800a5d6:	e749      	b.n	800a46c <lv_draw_sw_line+0x24c>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a5d8:	f04f 0901 	mov.w	r9, #1
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a5dc:	2500      	movs	r5, #0
 800a5de:	f7fd fed1 	bl	8008384 <lv_draw_mask_is_any>
 800a5e2:	e7c2      	b.n	800a56a <lv_draw_sw_line+0x34a>
        lv_coord_t dash_start = 0;
 800a5e4:	464d      	mov	r5, r9
        for(h = blend_area.y1; h <= y2; h++) {
 800a5e6:	e7f3      	b.n	800a5d0 <lv_draw_sw_line+0x3b0>
    memset(dst, 0xFF, len);
 800a5e8:	4632      	mov	r2, r6
 800a5ea:	21ff      	movs	r1, #255	; 0xff
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	f010 f8cb 	bl	801a788 <memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, draw_area_w);
 800a5f2:	4633      	mov	r3, r6
 800a5f4:	b23a      	sxth	r2, r7
 800a5f6:	f9bd 10ac 	ldrsh.w	r1, [sp, #172]	; 0xac
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	f7fd fe6a 	bl	80082d4 <lv_draw_mask_apply>
 800a600:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
            if(dashed) {
 800a604:	f1b9 0f00 	cmp.w	r9, #0
 800a608:	d00f      	beq.n	800a62a <lv_draw_sw_line+0x40a>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800a60a:	b160      	cbz	r0, 800a626 <lv_draw_sw_line+0x406>
                    if(dash_cnt > dsc->dash_width) {
 800a60c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800a610:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 800a614:	42aa      	cmp	r2, r5
 800a616:	bfb8      	it	lt
 800a618:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800a61a:	4413      	add	r3, r2
 800a61c:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
                        dash_cnt = 0;
 800a620:	429d      	cmp	r5, r3
 800a622:	bfa8      	it	ge
 800a624:	2500      	movge	r5, #0
                dash_cnt ++;
 800a626:	3501      	adds	r5, #1
 800a628:	b22d      	sxth	r5, r5
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a62a:	a936      	add	r1, sp, #216	; 0xd8
 800a62c:	9802      	ldr	r0, [sp, #8]
 800a62e:	f015 ff04 	bl	802043a <lv_draw_sw_blend>
            blend_area.y1++;
 800a632:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
        for(h = blend_area.y1; h <= y2; h++) {
 800a636:	3701      	adds	r7, #1
            blend_area.y1++;
 800a638:	3301      	adds	r3, #1
 800a63a:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
            blend_area.y2++;
 800a63e:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 800a642:	3301      	adds	r3, #1
 800a644:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        for(h = blend_area.y1; h <= y2; h++) {
 800a648:	e7c2      	b.n	800a5d0 <lv_draw_sw_line+0x3b0>
{
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 800a64a:	4546      	cmp	r6, r8
 800a64c:	db05      	blt.n	800a65a <lv_draw_sw_line+0x43a>
 800a64e:	4633      	mov	r3, r6
 800a650:	4646      	mov	r6, r8
 800a652:	4698      	mov	r8, r3
 800a654:	463b      	mov	r3, r7
 800a656:	464f      	mov	r7, r9
 800a658:	4699      	mov	r9, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
 800a65a:	eba9 0307 	sub.w	r3, r9, r7
    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800a65e:	4ac5      	ldr	r2, [pc, #788]	; (800a974 <lv_draw_sw_line+0x754>)
    int32_t xdiff = p2.x - p1.x;
 800a660:	9307      	str	r3, [sp, #28]
    int32_t ydiff = p2.y - p1.y;
 800a662:	eba8 0306 	sub.w	r3, r8, r6
 800a666:	9308      	str	r3, [sp, #32]
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 800a668:	eba9 0307 	sub.w	r3, r9, r7
 800a66c:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 800a670:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
 800a674:	eba8 0306 	sub.w	r3, r8, r6
 800a678:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 800a67c:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800a680:	45d3      	cmp	fp, sl
 800a682:	bfcb      	itete	gt
 800a684:	ea4f 134a 	movgt.w	r3, sl, lsl #5
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800a688:	ea4f 134b 	movle.w	r3, fp, lsl #5
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800a68c:	fbb3 f3fb 	udivgt	r3, r3, fp
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800a690:	fbb3 f3fa 	udivle	r3, r3, sl
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800a694:	5cd2      	ldrb	r2, [r2, r3]
 800a696:	233f      	movs	r3, #63	; 0x3f
 800a698:	fb15 3502 	smlabb	r5, r5, r2, r3
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800a69c:	f3c5 12cf 	ubfx	r2, r5, #7, #16
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800a6a0:	11eb      	asrs	r3, r5, #7
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800a6a2:	45b9      	cmp	r9, r7
 800a6a4:	bfd4      	ite	le
 800a6a6:	ebc2 0109 	rsble	r1, r2, r9
 800a6aa:	ebc2 0107 	rsbgt	r1, r2, r7
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800a6ae:	9305      	str	r3, [sp, #20]
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800a6b0:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 800a6b4:	45b9      	cmp	r9, r7
 800a6b6:	bfac      	ite	ge
 800a6b8:	eb02 0109 	addge.w	r1, r2, r9
 800a6bc:	19d1      	addlt	r1, r2, r7
 800a6be:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800a6c2:	45b0      	cmp	r8, r6
 800a6c4:	bfd4      	ite	le
 800a6c6:	ebc2 0108 	rsble	r1, r2, r8
 800a6ca:	ebc2 0106 	rsbgt	r1, r2, r6
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800a6ce:	45b0      	cmp	r8, r6
 800a6d0:	bfac      	ite	ge
 800a6d2:	4442      	addge	r2, r8
 800a6d4:	1992      	addlt	r2, r2, r6
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800a6d6:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a6da:	a90c      	add	r1, sp, #48	; 0x30
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800a6dc:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a6e0:	aa0a      	add	r2, sp, #40	; 0x28
 800a6e2:	4608      	mov	r0, r1
 800a6e4:	f019 fdf9 	bl	80242da <_lv_area_intersect>
    if(is_common == false) return;
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	f43f ae3c 	beq.w	800a366 <lv_draw_sw_line+0x146>
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800a6ee:	9b05      	ldr	r3, [sp, #20]
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 800a6f0:	45d3      	cmp	fp, sl
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800a6f2:	f003 0101 	and.w	r1, r3, #1
 800a6f6:	eb01 2125 	add.w	r1, r1, r5, asr #8
        if(xdiff > 0) {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a6fa:	f3c5 250f 	ubfx	r5, r5, #8, #16
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800a6fe:	b289      	uxth	r1, r1
    if(flat) {
 800a700:	f340 80dd 	ble.w	800a8be <lv_draw_sw_line+0x69e>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800a704:	fa11 fb86 	uxtah	fp, r1, r6
 800a708:	fa11 f188 	uxtah	r1, r1, r8
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a70c:	eba6 0a05 	sub.w	sl, r6, r5
 800a710:	eba8 0505 	sub.w	r5, r8, r5
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800a714:	b20b      	sxth	r3, r1
 800a716:	fa0f fb8b 	sxth.w	fp, fp
 800a71a:	9305      	str	r3, [sp, #20]
        if(xdiff > 0) {
 800a71c:	eba9 0307 	sub.w	r3, r9, r7
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a720:	fa0f fa8a 	sxth.w	sl, sl
        if(xdiff > 0) {
 800a724:	2b00      	cmp	r3, #0
 800a726:	f04f 0300 	mov.w	r3, #0
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a72a:	b22d      	sxth	r5, r5
 800a72c:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
 800a72e:	f340 80b8 	ble.w	800a8a2 <lv_draw_sw_line+0x682>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a732:	464b      	mov	r3, r9
 800a734:	4652      	mov	r2, sl
 800a736:	4639      	mov	r1, r7
 800a738:	a815      	add	r0, sp, #84	; 0x54
 800a73a:	9500      	str	r5, [sp, #0]
 800a73c:	f7fd fe4c 	bl	80083d8 <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800a740:	2301      	movs	r3, #1
 800a742:	465a      	mov	r2, fp
 800a744:	9301      	str	r3, [sp, #4]
 800a746:	9b05      	ldr	r3, [sp, #20]
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	464b      	mov	r3, r9
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a74c:	4639      	mov	r1, r7
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800a74e:	a820      	add	r0, sp, #128	; 0x80
 800a750:	f7fd fe42 	bl	80083d8 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800a754:	2100      	movs	r1, #0
 800a756:	a815      	add	r0, sp, #84	; 0x54
 800a758:	f7fd fda6 	bl	80082a8 <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800a75c:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800a75e:	9005      	str	r0, [sp, #20]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800a760:	a820      	add	r0, sp, #128	; 0x80
 800a762:	f7fd fda1 	bl	80082a8 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 800a766:	f894 a009 	ldrb.w	sl, [r4, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800a76a:	9009      	str	r0, [sp, #36]	; 0x24
    if(!dsc->raw_end) {
 800a76c:	f01a 0a10 	ands.w	sl, sl, #16
 800a770:	f040 80c1 	bne.w	800a8f6 <lv_draw_sw_line+0x6d6>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800a774:	2203      	movs	r2, #3
 800a776:	f8bd 5020 	ldrh.w	r5, [sp, #32]
 800a77a:	f8bd b01c 	ldrh.w	fp, [sp, #28]
 800a77e:	4639      	mov	r1, r7
 800a780:	9201      	str	r2, [sp, #4]
 800a782:	eba9 0207 	sub.w	r2, r9, r7
 800a786:	1b7b      	subs	r3, r7, r5
 800a788:	a82b      	add	r0, sp, #172	; 0xac
 800a78a:	fa16 f282 	uxtah	r2, r6, r2
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800a78e:	44c3      	add	fp, r8
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800a790:	b21b      	sxth	r3, r3
 800a792:	b212      	sxth	r2, r2
 800a794:	9200      	str	r2, [sp, #0]
 800a796:	4632      	mov	r2, r6
 800a798:	f7fd fe1e 	bl	80083d8 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800a79c:	2202      	movs	r2, #2
 800a79e:	eba9 0305 	sub.w	r3, r9, r5
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	9201      	str	r2, [sp, #4]
 800a7a6:	fa0f f28b 	sxth.w	r2, fp
 800a7aa:	b21b      	sxth	r3, r3
 800a7ac:	a836      	add	r0, sp, #216	; 0xd8
 800a7ae:	9200      	str	r2, [sp, #0]
 800a7b0:	4642      	mov	r2, r8
 800a7b2:	f7fd fe11 	bl	80083d8 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800a7b6:	4651      	mov	r1, sl
 800a7b8:	a82b      	add	r0, sp, #172	; 0xac
 800a7ba:	f7fd fd75 	bl	80082a8 <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800a7be:	4651      	mov	r1, sl
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800a7c0:	4683      	mov	fp, r0
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800a7c2:	a836      	add	r0, sp, #216	; 0xd8
 800a7c4:	f7fd fd70 	bl	80082a8 <lv_draw_mask_add>
 800a7c8:	4607      	mov	r7, r0
 800a7ca:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
 800a7ce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800a7d2:	3501      	adds	r5, #1
 800a7d4:	1aed      	subs	r5, r5, r3
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800a7d6:	f7fc fd49 	bl	800726c <_lv_refr_get_disp_refreshing>
 800a7da:	f007 fc91 	bl	8012100 <lv_disp_get_hor_res>
 800a7de:	4606      	mov	r6, r0
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 800a7e0:	a80c      	add	r0, sp, #48	; 0x30
 800a7e2:	b22d      	sxth	r5, r5
 800a7e4:	f019 fd4b 	bl	802427e <lv_area_get_size>
 800a7e8:	4286      	cmp	r6, r0
 800a7ea:	d903      	bls.n	800a7f4 <lv_draw_sw_line+0x5d4>
 800a7ec:	a80c      	add	r0, sp, #48	; 0x30
 800a7ee:	f019 fd46 	bl	802427e <lv_area_get_size>
 800a7f2:	4606      	mov	r6, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a7f4:	4630      	mov	r0, r6

    lv_coord_t y2 = blend_area.y2;
    blend_area.y2 = blend_area.y1;

    uint32_t mask_p = 0;
 800a7f6:	f04f 0900 	mov.w	r9, #0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a7fa:	f007 ffdd 	bl	80127b8 <lv_mem_buf_get>
    lv_coord_t y2 = blend_area.y2;
 800a7fe:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800a802:	4632      	mov	r2, r6
 800a804:	21ff      	movs	r1, #255	; 0xff
 800a806:	9307      	str	r3, [sp, #28]
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a808:	4680      	mov	r8, r0
    blend_area.y2 = blend_area.y1;
 800a80a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800a80e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800a812:	f00f ffb9 	bl	801a788 <memset>
    memset(dst, 0x00, len);
 800a816:	221c      	movs	r2, #28
 800a818:	2100      	movs	r1, #0
 800a81a:	a80e      	add	r0, sp, #56	; 0x38
 800a81c:	f00f ffb4 	bl	801a788 <memset>
    lv_memset_ff(mask_buf, mask_buf_size);

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
    blend_dsc.blend_area = &blend_area;
    blend_dsc.color = dsc->color;
 800a820:	8822      	ldrh	r2, [r4, #0]
    blend_dsc.blend_area = &blend_area;
 800a822:	ab0c      	add	r3, sp, #48	; 0x30
    blend_dsc.opa = dsc->opa;
    blend_dsc.mask_buf = mask_buf;
    blend_dsc.mask_area = &blend_area;

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 800a824:	f9bd a032 	ldrsh.w	sl, [sp, #50]	; 0x32
    blend_dsc.color = dsc->color;
 800a828:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    blend_dsc.opa = dsc->opa;
 800a82c:	7a22      	ldrb	r2, [r4, #8]
    blend_dsc.blend_area = &blend_area;
 800a82e:	930e      	str	r3, [sp, #56]	; 0x38
    blend_dsc.opa = dsc->opa;
 800a830:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
    blend_dsc.mask_buf = mask_buf;
 800a834:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    blend_dsc.mask_area = &blend_area;
 800a838:	9313      	str	r3, [sp, #76]	; 0x4c
    for(h = blend_area.y1; h <= y2; h++) {
 800a83a:	9b07      	ldr	r3, [sp, #28]
 800a83c:	459a      	cmp	sl, r3
 800a83e:	dd5e      	ble.n	800a8fe <lv_draw_sw_line+0x6de>
            lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 800a840:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800a844:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 800a848:	429a      	cmp	r2, r3
 800a84a:	d009      	beq.n	800a860 <lv_draw_sw_line+0x640>
        blend_area.y2--;
 800a84c:	3b01      	subs	r3, #1
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a84e:	a90e      	add	r1, sp, #56	; 0x38
 800a850:	9802      	ldr	r0, [sp, #8]
        blend_area.y2--;
 800a852:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a856:	2302      	movs	r3, #2
 800a858:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a85c:	f015 fded 	bl	802043a <lv_draw_sw_blend>
    }

    lv_mem_buf_release(mask_buf);
 800a860:	4640      	mov	r0, r8
 800a862:	f007 fff3 	bl	801284c <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_left_param);
 800a866:	a815      	add	r0, sp, #84	; 0x54
 800a868:	f014 fd90 	bl	801f38c <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_right_param);
 800a86c:	a820      	add	r0, sp, #128	; 0x80
 800a86e:	f014 fd8d 	bl	801f38c <lv_draw_mask_free_param>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 800a872:	f1bb 3fff 	cmp.w	fp, #4294967295
 800a876:	d002      	beq.n	800a87e <lv_draw_sw_line+0x65e>
 800a878:	a82b      	add	r0, sp, #172	; 0xac
 800a87a:	f014 fd87 	bl	801f38c <lv_draw_mask_free_param>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 800a87e:	1c79      	adds	r1, r7, #1
 800a880:	d002      	beq.n	800a888 <lv_draw_sw_line+0x668>
 800a882:	a836      	add	r0, sp, #216	; 0xd8
 800a884:	f014 fd82 	bl	801f38c <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_left_id);
 800a888:	9805      	ldr	r0, [sp, #20]
 800a88a:	f7fd fd43 	bl	8008314 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 800a88e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a890:	f7fd fd40 	bl	8008314 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 800a894:	4658      	mov	r0, fp
 800a896:	f7fd fd3d 	bl	8008314 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 800a89a:	4638      	mov	r0, r7
 800a89c:	f7fd fd3a 	bl	8008314 <lv_draw_mask_remove_id>
 800a8a0:	e561      	b.n	800a366 <lv_draw_sw_line+0x146>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800a8a2:	9b05      	ldr	r3, [sp, #20]
 800a8a4:	465a      	mov	r2, fp
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	a815      	add	r0, sp, #84	; 0x54
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	464b      	mov	r3, r9
 800a8ae:	f7fd fd93 	bl	80083d8 <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	4652      	mov	r2, sl
 800a8b6:	e9cd 5300 	strd	r5, r3, [sp]
 800a8ba:	464b      	mov	r3, r9
 800a8bc:	e746      	b.n	800a74c <lv_draw_sw_line+0x52c>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 800a8be:	fa11 f389 	uxtah	r3, r1, r9
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	fa11 f187 	uxtah	r1, r1, r7
 800a8c8:	fa1f fa87 	uxth.w	sl, r7
 800a8cc:	fa1f fb89 	uxth.w	fp, r9
 800a8d0:	a815      	add	r0, sp, #84	; 0x54
 800a8d2:	b21b      	sxth	r3, r3
 800a8d4:	b209      	sxth	r1, r1
 800a8d6:	e9cd 8200 	strd	r8, r2, [sp]
 800a8da:	4632      	mov	r2, r6
 800a8dc:	f7fd fd7c 	bl	80083d8 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	ebab 0305 	sub.w	r3, fp, r5
 800a8e6:	ebaa 0105 	sub.w	r1, sl, r5
 800a8ea:	e9cd 8200 	strd	r8, r2, [sp]
 800a8ee:	b21b      	sxth	r3, r3
 800a8f0:	4632      	mov	r2, r6
 800a8f2:	b209      	sxth	r1, r1
 800a8f4:	e72b      	b.n	800a74e <lv_draw_sw_line+0x52e>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 800a8f6:	f04f 37ff 	mov.w	r7, #4294967295
    int16_t mask_top_id = LV_MASK_ID_INV;
 800a8fa:	46bb      	mov	fp, r7
 800a8fc:	e765      	b.n	800a7ca <lv_draw_sw_line+0x5aa>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 800a8fe:	eb08 0309 	add.w	r3, r8, r9
 800a902:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 800a906:	fa0f f28a 	sxth.w	r2, sl
 800a90a:	eb08 0009 	add.w	r0, r8, r9
 800a90e:	9308      	str	r3, [sp, #32]
 800a910:	462b      	mov	r3, r5
 800a912:	f7fd fcdf 	bl	80082d4 <lv_draw_mask_apply>
 800a916:	4601      	mov	r1, r0
 800a918:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800a91c:	b920      	cbnz	r0, 800a928 <lv_draw_sw_line+0x708>
 800a91e:	462a      	mov	r2, r5
 800a920:	eb08 0009 	add.w	r0, r8, r9
 800a924:	f00f ff30 	bl	801a788 <memset>
        mask_p += draw_area_w;
 800a928:	44a9      	add	r9, r5
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 800a92a:	eb05 0309 	add.w	r3, r5, r9
 800a92e:	429e      	cmp	r6, r3
 800a930:	d907      	bls.n	800a942 <lv_draw_sw_line+0x722>
            blend_area.y2 ++;
 800a932:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800a936:	3301      	adds	r3, #1
 800a938:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    for(h = blend_area.y1; h <= y2; h++) {
 800a93c:	f10a 0a01 	add.w	sl, sl, #1
 800a940:	e77b      	b.n	800a83a <lv_draw_sw_line+0x61a>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a942:	f04f 0302 	mov.w	r3, #2
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a946:	a90e      	add	r1, sp, #56	; 0x38
 800a948:	9802      	ldr	r0, [sp, #8]
            mask_p = 0;
 800a94a:	f04f 0900 	mov.w	r9, #0
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a94e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a952:	f015 fd72 	bl	802043a <lv_draw_sw_blend>
            blend_area.y1 = blend_area.y2 + 1;
 800a956:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    memset(dst, 0xFF, len);
 800a95a:	4632      	mov	r2, r6
 800a95c:	21ff      	movs	r1, #255	; 0xff
 800a95e:	4640      	mov	r0, r8
 800a960:	3301      	adds	r3, #1
 800a962:	b21b      	sxth	r3, r3
 800a964:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            blend_area.y2 = blend_area.y1;
 800a968:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800a96c:	f00f ff0c 	bl	801a788 <memset>
}
 800a970:	e7e4      	b.n	800a93c <lv_draw_sw_line+0x71c>
 800a972:	bf00      	nop
 800a974:	0802ac20 	.word	0x0802ac20

0800a978 <lv_draw_sw_polygon>:
 * @param clip_area polygon will be drawn only in this area
 * @param draw_dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_sw_polygon(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * draw_dsc, const lv_point_t * points,
                        uint16_t point_cnt)
{
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LV_DRAW_COMPLEX
    if(point_cnt < 3) return;
 800a97c:	2b02      	cmp	r3, #2
{
 800a97e:	b08d      	sub	sp, #52	; 0x34
 800a980:	4616      	mov	r6, r2
 800a982:	461d      	mov	r5, r3
 800a984:	9003      	str	r0, [sp, #12]
 800a986:	9107      	str	r1, [sp, #28]
    if(point_cnt < 3) return;
 800a988:	d97c      	bls.n	800aa84 <lv_draw_sw_polygon+0x10c>
    if(points == NULL) return;
 800a98a:	2a00      	cmp	r2, #0
 800a98c:	d07a      	beq.n	800aa84 <lv_draw_sw_polygon+0x10c>

    /*Join adjacent points if they are on the same coordinate*/
    lv_point_t * p = lv_mem_buf_get(point_cnt * sizeof(lv_point_t));
 800a98e:	009f      	lsls	r7, r3, #2
 800a990:	4638      	mov	r0, r7
 800a992:	f007 ff11 	bl	80127b8 <lv_mem_buf_get>
    if(p == NULL) return;
 800a996:	4604      	mov	r4, r0
 800a998:	2800      	cmp	r0, #0
 800a99a:	d073      	beq.n	800aa84 <lv_draw_sw_polygon+0x10c>
    uint16_t i;
    uint16_t pcnt = 0;
    p[0] = points[0];
 800a99c:	6833      	ldr	r3, [r6, #0]
 800a99e:	6003      	str	r3, [r0, #0]
    for(i = 0; i < point_cnt - 1; i++) {
 800a9a0:	1e6b      	subs	r3, r5, #1
    uint16_t pcnt = 0;
 800a9a2:	2500      	movs	r5, #0
    for(i = 0; i < point_cnt - 1; i++) {
 800a9a4:	462a      	mov	r2, r5
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
 800a9a6:	0091      	lsls	r1, r2, #2
 800a9a8:	f936 8022 	ldrsh.w	r8, [r6, r2, lsl #2]
 800a9ac:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
 800a9b0:	1d08      	adds	r0, r1, #4
 800a9b2:	eb06 0e00 	add.w	lr, r6, r0
 800a9b6:	5e30      	ldrsh	r0, [r6, r0]
 800a9b8:	4580      	cmp	r8, r0
 800a9ba:	d105      	bne.n	800a9c8 <lv_draw_sw_polygon+0x50>
 800a9bc:	f9bc c002 	ldrsh.w	ip, [ip, #2]
 800a9c0:	f9be 0002 	ldrsh.w	r0, [lr, #2]
 800a9c4:	4584      	cmp	ip, r0
 800a9c6:	d004      	beq.n	800a9d2 <lv_draw_sw_polygon+0x5a>
            p[pcnt] = points[i];
 800a9c8:	5871      	ldr	r1, [r6, r1]
 800a9ca:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
            pcnt++;
 800a9ce:	3501      	adds	r5, #1
 800a9d0:	b2ad      	uxth	r5, r5
    for(i = 0; i < point_cnt - 1; i++) {
 800a9d2:	3201      	adds	r2, #1
 800a9d4:	b292      	uxth	r2, r2
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	dbe5      	blt.n	800a9a6 <lv_draw_sw_polygon+0x2e>
        }
    }
    /*The first and the last points are also adjacent*/
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 800a9da:	1f38      	subs	r0, r7, #4
 800a9dc:	f9b6 1000 	ldrsh.w	r1, [r6]
 800a9e0:	5e32      	ldrsh	r2, [r6, r0]
 800a9e2:	1833      	adds	r3, r6, r0
 800a9e4:	4291      	cmp	r1, r2
 800a9e6:	d105      	bne.n	800a9f4 <lv_draw_sw_polygon+0x7c>
 800a9e8:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 800a9ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d004      	beq.n	800a9fe <lv_draw_sw_polygon+0x86>
        p[pcnt] = points[point_cnt - 1];
 800a9f4:	5833      	ldr	r3, [r6, r0]
 800a9f6:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
        pcnt++;
 800a9fa:	3501      	adds	r5, #1
 800a9fc:	b2ad      	uxth	r5, r5
    }

    point_cnt = pcnt;
    if(point_cnt < 3) {
 800a9fe:	2d02      	cmp	r5, #2
 800aa00:	d805      	bhi.n	800aa0e <lv_draw_sw_polygon+0x96>
        lv_mem_buf_release(p);
 800aa02:	4620      	mov	r0, r4
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 800aa04:	b00d      	add	sp, #52	; 0x34
 800aa06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_mem_buf_release(p);
 800aa0a:	f007 bf1f 	b.w	801284c <lv_mem_buf_release>
    lv_area_t poly_coords = {.x1 = LV_COORD_MAX, .y1 = LV_COORD_MAX, .x2 = LV_COORD_MIN, .y2 = LV_COORD_MIN};
 800aa0e:	4a79      	ldr	r2, [pc, #484]	; (800abf4 <lv_draw_sw_polygon+0x27c>)
 800aa10:	ab08      	add	r3, sp, #32
 800aa12:	6810      	ldr	r0, [r2, #0]
 800aa14:	6851      	ldr	r1, [r2, #4]
 800aa16:	4622      	mov	r2, r4
 800aa18:	c303      	stmia	r3!, {r0, r1}
 800aa1a:	2300      	movs	r3, #0
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 800aa1c:	f934 1023 	ldrsh.w	r1, [r4, r3, lsl #2]
    for(i = 0; i < point_cnt; i++) {
 800aa20:	3204      	adds	r2, #4
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 800aa22:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 800aa26:	4281      	cmp	r1, r0
 800aa28:	bfa8      	it	ge
 800aa2a:	4601      	movge	r1, r0
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 800aa2c:	f9bd 0022 	ldrsh.w	r0, [sp, #34]	; 0x22
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 800aa30:	f8ad 1020 	strh.w	r1, [sp, #32]
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 800aa34:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 800aa38:	4281      	cmp	r1, r0
 800aa3a:	bfa8      	it	ge
 800aa3c:	4601      	movge	r1, r0
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 800aa3e:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 800aa42:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 800aa46:	f934 1023 	ldrsh.w	r1, [r4, r3, lsl #2]
    for(i = 0; i < point_cnt; i++) {
 800aa4a:	3301      	adds	r3, #1
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 800aa4c:	4281      	cmp	r1, r0
 800aa4e:	bfb8      	it	lt
 800aa50:	4601      	movlt	r1, r0
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 800aa52:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 800aa56:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 800aa5a:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 800aa5e:	4281      	cmp	r1, r0
 800aa60:	bfb8      	it	lt
 800aa62:	4601      	movlt	r1, r0
 800aa64:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    for(i = 0; i < point_cnt; i++) {
 800aa68:	b299      	uxth	r1, r3
 800aa6a:	428d      	cmp	r5, r1
 800aa6c:	d8d6      	bhi.n	800aa1c <lv_draw_sw_polygon+0xa4>
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
 800aa6e:	ae0a      	add	r6, sp, #40	; 0x28
 800aa70:	9b03      	ldr	r3, [sp, #12]
 800aa72:	a908      	add	r1, sp, #32
 800aa74:	689a      	ldr	r2, [r3, #8]
 800aa76:	4630      	mov	r0, r6
 800aa78:	f019 fc2f 	bl	80242da <_lv_area_intersect>
    if(!is_common) {
 800aa7c:	b928      	cbnz	r0, 800aa8a <lv_draw_sw_polygon+0x112>
        lv_mem_buf_release(p);
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f007 fee4 	bl	801284c <lv_mem_buf_release>
}
 800aa84:	b00d      	add	sp, #52	; 0x34
 800aa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800aa8a:	9b03      	ldr	r3, [sp, #12]
    lv_coord_t y_min = p[0].y;
 800aa8c:	4622      	mov	r2, r4
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	9306      	str	r3, [sp, #24]
    draw_ctx->clip_area = &clip_area;
 800aa92:	9b03      	ldr	r3, [sp, #12]
 800aa94:	609e      	str	r6, [r3, #8]
    lv_coord_t y_min = p[0].y;
 800aa96:	2301      	movs	r3, #1
 800aa98:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
    int16_t y_min_i = 0;
 800aa9c:	2600      	movs	r6, #0
        if(p[i].y < y_min) {
 800aa9e:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 800aaa2:	4288      	cmp	r0, r1
            y_min_i = i;
 800aaa4:	bfb8      	it	lt
 800aaa6:	b21e      	sxthlt	r6, r3
    for(i = 1; i < point_cnt; i++) {
 800aaa8:	f103 0301 	add.w	r3, r3, #1
            y_min_i = i;
 800aaac:	bfb8      	it	lt
 800aaae:	4601      	movlt	r1, r0
    for(i = 1; i < point_cnt; i++) {
 800aab0:	b298      	uxth	r0, r3
 800aab2:	4285      	cmp	r5, r0
 800aab4:	d8f3      	bhi.n	800aa9e <lv_draw_sw_polygon+0x126>
    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 800aab6:	202c      	movs	r0, #44	; 0x2c
    int32_t i_prev_left = y_min_i;
 800aab8:	46b3      	mov	fp, r6
    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 800aaba:	4368      	muls	r0, r5
 800aabc:	f007 fe7c 	bl	80127b8 <lv_mem_buf_get>
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800aac0:	1e72      	subs	r2, r6, #1
    i_next_right = y_min_i + 1;
 800aac2:	f106 0301 	add.w	r3, r6, #1
    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 800aac6:	9002      	str	r0, [sp, #8]
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800aac8:	d563      	bpl.n	800ab92 <lv_draw_sw_polygon+0x21a>
 800aaca:	442a      	add	r2, r5
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 800aacc:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800aad0:	f834 0026 	ldrh.w	r0, [r4, r6, lsl #2]
 800aad4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    if(dyl * dxr < dyr * dxl) inv = true;
 800aad8:	f8dd 9008 	ldr.w	r9, [sp, #8]
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 800aadc:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 800aae0:	f8bc c002 	ldrh.w	ip, [ip, #2]
 800aae4:	887f      	ldrh	r7, [r7, #2]
    if(dyl * dxr < dyr * dxl) inv = true;
 800aae6:	f04f 0a00 	mov.w	sl, #0
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 800aaea:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 800aaee:	ebac 0c07 	sub.w	ip, ip, r7
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 800aaf2:	8849      	ldrh	r1, [r1, #2]
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 800aaf4:	1a1b      	subs	r3, r3, r0
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 800aaf6:	1bc9      	subs	r1, r1, r7
    if(dyl * dxr < dyr * dxl) inv = true;
 800aaf8:	fb1c f303 	smulbb	r3, ip, r3
 800aafc:	9304      	str	r3, [sp, #16]
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 800aafe:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800ab02:	1a1b      	subs	r3, r3, r0
    if(dyl * dxr < dyr * dxl) inv = true;
 800ab04:	fb11 f303 	smulbb	r3, r1, r3
 800ab08:	9305      	str	r3, [sp, #20]
        if(!inv) {
 800ab0a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	db43      	blt.n	800ab9a <lv_draw_sw_polygon+0x222>
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800ab12:	f1bb 0801 	subs.w	r8, fp, #1
            i_next_right = i_prev_right + 1;
 800ab16:	f106 0701 	add.w	r7, r6, #1
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800ab1a:	bf48      	it	mi
 800ab1c:	44a8      	addmi	r8, r5
            if(i_next_right > point_cnt - 1) i_next_right = 0;
 800ab1e:	42af      	cmp	r7, r5
 800ab20:	bfa8      	it	ge
 800ab22:	2700      	movge	r7, #0
        if(p[i_next_left].y >= p[i_prev_left].y) {
 800ab24:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 800ab28:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800ab2c:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800ab30:	eb04 028b 	add.w	r2, r4, fp, lsl #2
 800ab34:	ea4f 018b 	mov.w	r1, fp, lsl #2
 800ab38:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800ab3c:	4290      	cmp	r0, r2
 800ab3e:	db14      	blt.n	800ab6a <lv_draw_sw_polygon+0x1f2>
            if(p[i_next_left].y != p[i_prev_left].y &&
 800ab40:	d010      	beq.n	800ab64 <lv_draw_sw_polygon+0x1ec>
               p[i_next_left].x != p[i_prev_left].x) {
 800ab42:	5ee3      	ldrsh	r3, [r4, r3]
 800ab44:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_left].y != p[i_prev_left].y &&
 800ab46:	428b      	cmp	r3, r1
 800ab48:	d00c      	beq.n	800ab64 <lv_draw_sw_polygon+0x1ec>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 800ab4a:	f04f 0c01 	mov.w	ip, #1
 800ab4e:	e9cd 0c00 	strd	r0, ip, [sp]
 800ab52:	4648      	mov	r0, r9
 800ab54:	f7fd fc40 	bl	80083d8 <lv_draw_mask_line_points_init>
                lv_draw_mask_add(mp_next, mp);
 800ab58:	4648      	mov	r0, r9
                mp_next++;
 800ab5a:	f109 092c 	add.w	r9, r9, #44	; 0x2c
                lv_draw_mask_add(mp_next, mp);
 800ab5e:	9902      	ldr	r1, [sp, #8]
 800ab60:	f7fd fba2 	bl	80082a8 <lv_draw_mask_add>
            mask_cnt++;
 800ab64:	f10a 0a01 	add.w	sl, sl, #1
            i_prev_left = i_next_left;
 800ab68:	46c3      	mov	fp, r8
        if(mask_cnt == point_cnt) break;
 800ab6a:	4555      	cmp	r5, sl
 800ab6c:	d11f      	bne.n	800abae <lv_draw_sw_polygon+0x236>
    lv_draw_rect(draw_ctx, draw_dsc, &poly_coords);
 800ab6e:	aa08      	add	r2, sp, #32
 800ab70:	9907      	ldr	r1, [sp, #28]
 800ab72:	9803      	ldr	r0, [sp, #12]
 800ab74:	f014 fc4b 	bl	801f40e <lv_draw_rect>
    lv_draw_mask_remove_custom(mp);
 800ab78:	9802      	ldr	r0, [sp, #8]
 800ab7a:	f7fd fbdd 	bl	8008338 <lv_draw_mask_remove_custom>
    lv_mem_buf_release(mp);
 800ab7e:	9802      	ldr	r0, [sp, #8]
 800ab80:	f007 fe64 	bl	801284c <lv_mem_buf_release>
    lv_mem_buf_release(p);
 800ab84:	4620      	mov	r0, r4
 800ab86:	f007 fe61 	bl	801284c <lv_mem_buf_release>
    draw_ctx->clip_area = clip_area_ori;
 800ab8a:	9b03      	ldr	r3, [sp, #12]
 800ab8c:	9a06      	ldr	r2, [sp, #24]
 800ab8e:	609a      	str	r2, [r3, #8]
 800ab90:	e778      	b.n	800aa84 <lv_draw_sw_polygon+0x10c>
    if(i_next_right > point_cnt - 1) i_next_right = 0;
 800ab92:	429d      	cmp	r5, r3
 800ab94:	bfd8      	it	le
 800ab96:	2300      	movle	r3, #0
 800ab98:	e798      	b.n	800aacc <lv_draw_sw_polygon+0x154>
            i_next_left = i_prev_left + 1;
 800ab9a:	f10b 0801 	add.w	r8, fp, #1
            if(i_next_left > point_cnt - 1) i_next_left = 0;
 800ab9e:	45a8      	cmp	r8, r5
 800aba0:	bfa8      	it	ge
 800aba2:	f04f 0800 	movge.w	r8, #0
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 800aba6:	1e77      	subs	r7, r6, #1
 800aba8:	bf48      	it	mi
 800abaa:	197f      	addmi	r7, r7, r5
 800abac:	e7ba      	b.n	800ab24 <lv_draw_sw_polygon+0x1ac>
        if(p[i_next_right].y >= p[i_prev_right].y) {
 800abae:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 800abb2:	00bb      	lsls	r3, r7, #2
 800abb4:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800abb8:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 800abbc:	00b1      	lsls	r1, r6, #2
 800abbe:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800abc2:	4290      	cmp	r0, r2
 800abc4:	db13      	blt.n	800abee <lv_draw_sw_polygon+0x276>
            if(p[i_next_right].y != p[i_prev_right].y &&
 800abc6:	d00f      	beq.n	800abe8 <lv_draw_sw_polygon+0x270>
               p[i_next_right].x != p[i_prev_right].x) {
 800abc8:	5ee3      	ldrsh	r3, [r4, r3]
 800abca:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_right].y != p[i_prev_right].y &&
 800abcc:	428b      	cmp	r3, r1
 800abce:	d00b      	beq.n	800abe8 <lv_draw_sw_polygon+0x270>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 800abd0:	2600      	movs	r6, #0
 800abd2:	e9cd 0600 	strd	r0, r6, [sp]
 800abd6:	4648      	mov	r0, r9
 800abd8:	f7fd fbfe 	bl	80083d8 <lv_draw_mask_line_points_init>
                lv_draw_mask_add(mp_next, mp);
 800abdc:	4648      	mov	r0, r9
                mp_next++;
 800abde:	f109 092c 	add.w	r9, r9, #44	; 0x2c
                lv_draw_mask_add(mp_next, mp);
 800abe2:	9902      	ldr	r1, [sp, #8]
 800abe4:	f7fd fb60 	bl	80082a8 <lv_draw_mask_add>
            mask_cnt++;
 800abe8:	f10a 0a01 	add.w	sl, sl, #1
            i_prev_right = i_next_right;
 800abec:	463e      	mov	r6, r7
    } while(mask_cnt < point_cnt);
 800abee:	4555      	cmp	r5, sl
 800abf0:	d88b      	bhi.n	800ab0a <lv_draw_sw_polygon+0x192>
 800abf2:	e7bc      	b.n	800ab6e <lv_draw_sw_polygon+0x1f6>
 800abf4:	08028a9c 	.word	0x08028a9c

0800abf8 <find_track_end>:
/**
 * Find the last item of a track
 */
static int32_t find_track_end(lv_obj_t * cont, flex_t * f, int32_t item_start_id, lv_coord_t max_main_size,
                              lv_coord_t item_gap, track_t * t)
{
 800abf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfc:	4607      	mov	r7, r0
 800abfe:	b087      	sub	sp, #28
 800ac00:	460d      	mov	r5, r1
 800ac02:	4690      	mov	r8, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800ac04:	2100      	movs	r1, #0
 800ac06:	2201      	movs	r2, #1
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 800ac0e:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800ac12:	f012 ff69 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800ac16:	2204      	movs	r2, #4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800ac18:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	f012 ff63 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t w_set = lv_obj_get_style_width(cont, LV_PART_MAIN);
    lv_coord_t h_set = lv_obj_get_style_height(cont, LV_PART_MAIN);

    /*Can't wrap if the size if auto (i.e. the size depends on the children)*/
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 800ac22:	78ea      	ldrb	r2, [r5, #3]
 800ac24:	0796      	lsls	r6, r2, #30
 800ac26:	d554      	bpl.n	800acd2 <find_track_end+0xda>
 800ac28:	f012 0f01 	tst.w	r2, #1
 800ac2c:	f242 72d1 	movw	r2, #10193	; 0x27d1
 800ac30:	d048      	beq.n	800acc4 <find_track_end+0xcc>
 800ac32:	b224      	sxth	r4, r4
 800ac34:	4294      	cmp	r4, r2
 800ac36:	d048      	beq.n	800acca <find_track_end+0xd2>
        f->wrap = false;
    }
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800ac38:	4b85      	ldr	r3, [pc, #532]	; (800ae50 <find_track_end+0x258>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 800ac3a:	f8df a218 	ldr.w	sl, [pc, #536]	; 800ae54 <find_track_end+0x25c>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800ac3e:	9300      	str	r3, [sp, #0]

    t->track_main_size = 0;
    t->track_fix_main_size = 0;
    t->grow_item_cnt = 0;
 800ac40:	2200      	movs	r2, #0
    t->item_cnt = 0;
    t->grow_dsc = NULL;

    int32_t item_id = item_start_id;

    lv_obj_t * item = lv_obj_get_child(cont, item_id);
 800ac42:	4641      	mov	r1, r8
    int32_t item_id = item_start_id;
 800ac44:	f8cd 8014 	str.w	r8, [sp, #20]
    t->grow_item_cnt = 0;
 800ac48:	f8c9 2010 	str.w	r2, [r9, #16]
    t->track_cross_size = 0;
 800ac4c:	f8c9 2000 	str.w	r2, [r9]
    t->track_fix_main_size = 0;
 800ac50:	f8a9 2004 	strh.w	r2, [r9, #4]
    t->grow_dsc = NULL;
 800ac54:	e9c9 2202 	strd	r2, r2, [r9, #8]
            t->item_cnt++;
        }

        item_id += f->rev ? -1 : +1;
        if(item_id < 0) break;
        item = lv_obj_get_child(cont, item_id);
 800ac58:	4638      	mov	r0, r7
 800ac5a:	f013 facc 	bl	801e1f6 <lv_obj_get_child>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800ac5e:	9b05      	ldr	r3, [sp, #20]
        item = lv_obj_get_child(cont, item_id);
 800ac60:	4604      	mov	r4, r0
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800ac62:	9302      	str	r3, [sp, #8]
    while(item) {
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d043      	beq.n	800acf0 <find_track_end+0xf8>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800ac68:	9b02      	ldr	r3, [sp, #8]
 800ac6a:	4543      	cmp	r3, r8
 800ac6c:	d139      	bne.n	800ace2 <find_track_end+0xea>
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800ac6e:	497a      	ldr	r1, [pc, #488]	; (800ae58 <find_track_end+0x260>)
 800ac70:	4620      	mov	r0, r4
 800ac72:	f010 ff05 	bl	801ba80 <lv_obj_has_flag_any>
 800ac76:	4601      	mov	r1, r0
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	f040 80c6 	bne.w	800ae0a <find_track_end+0x212>
    return (lv_flex_align_t)v.num;
}

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 800ac7e:	4b77      	ldr	r3, [pc, #476]	; (800ae5c <find_track_end+0x264>)
 800ac80:	4620      	mov	r0, r4
 800ac82:	881a      	ldrh	r2, [r3, #0]
 800ac84:	f012 ff30 	bl	801dae8 <lv_obj_get_style_prop>
 800ac88:	9003      	str	r0, [sp, #12]
            if(grow_value) {
 800ac8a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ac8e:	2a00      	cmp	r2, #0
 800ac90:	f000 80c9 	beq.w	800ae26 <find_track_end+0x22e>
                t->track_fix_main_size += item_gap;
 800ac94:	f8b9 2004 	ldrh.w	r2, [r9, #4]
                t->grow_item_cnt++;
 800ac98:	f8d9 0010 	ldr.w	r0, [r9, #16]
                t->track_fix_main_size += item_gap;
 800ac9c:	445a      	add	r2, fp
                t->grow_item_cnt++;
 800ac9e:	3001      	adds	r0, #1
                t->track_fix_main_size += item_gap;
 800aca0:	f8a9 2004 	strh.w	r2, [r9, #4]
                if(t->grow_dsc_calc) {
 800aca4:	f899 2014 	ldrb.w	r2, [r9, #20]
                t->grow_item_cnt++;
 800aca8:	f8c9 0010 	str.w	r0, [r9, #16]
                if(t->grow_dsc_calc) {
 800acac:	07d2      	lsls	r2, r2, #31
 800acae:	f140 809c 	bpl.w	800adea <find_track_end+0x1f2>
                    grow_dsc_t * new_dsc = lv_mem_buf_get(sizeof(grow_dsc_t) * (t->grow_item_cnt));
 800acb2:	2214      	movs	r2, #20
 800acb4:	4350      	muls	r0, r2
 800acb6:	f007 fd7f 	bl	80127b8 <lv_mem_buf_get>
                    LV_ASSERT_MALLOC(new_dsc);
 800acba:	2214      	movs	r2, #20
 800acbc:	4606      	mov	r6, r0
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d147      	bne.n	800ad52 <find_track_end+0x15a>
 800acc2:	e7fe      	b.n	800acc2 <find_track_end+0xca>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 800acc4:	b200      	sxth	r0, r0
 800acc6:	4290      	cmp	r0, r2
 800acc8:	d106      	bne.n	800acd8 <find_track_end+0xe0>
        f->wrap = false;
 800acca:	78ea      	ldrb	r2, [r5, #3]
 800accc:	f36f 0241 	bfc	r2, #1, #1
 800acd0:	70ea      	strb	r2, [r5, #3]
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800acd2:	78ea      	ldrb	r2, [r5, #3]
 800acd4:	07d1      	lsls	r1, r2, #31
 800acd6:	d4af      	bmi.n	800ac38 <find_track_end+0x40>
 800acd8:	4b5e      	ldr	r3, [pc, #376]	; (800ae54 <find_track_end+0x25c>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 800acda:	f8df a174 	ldr.w	sl, [pc, #372]	; 800ae50 <find_track_end+0x258>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	e7ae      	b.n	800ac40 <find_track_end+0x48>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800ace2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800ace6:	4620      	mov	r0, r4
 800ace8:	f010 fec4 	bl	801ba74 <lv_obj_has_flag>
 800acec:	2800      	cmp	r0, #0
 800acee:	d0be      	beq.n	800ac6e <find_track_end+0x76>
    }

    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 800acf0:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800acf4:	2a00      	cmp	r2, #0
 800acf6:	bfc4      	itt	gt
 800acf8:	eba2 020b 	subgt.w	r2, r2, fp
 800acfc:	f8a9 2004 	strhgt.w	r2, [r9, #4]

    /*If there is at least one "grow item" the track takes the full space*/
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 800ad00:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ad04:	b912      	cbnz	r2, 800ad0c <find_track_end+0x114>
 800ad06:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 800ad0a:	9301      	str	r3, [sp, #4]
 800ad0c:	9b01      	ldr	r3, [sp, #4]

    /*Have at least one item in a row*/
    if(item && item_id == item_start_id) {
 800ad0e:	9a05      	ldr	r2, [sp, #20]
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 800ad10:	f8a9 3002 	strh.w	r3, [r9, #2]
    if(item && item_id == item_start_id) {
 800ad14:	b1cc      	cbz	r4, 800ad4a <find_track_end+0x152>
 800ad16:	4590      	cmp	r8, r2
 800ad18:	d117      	bne.n	800ad4a <find_track_end+0x152>
        item = cont->spec_attr->children[item_id];
 800ad1a:	68ba      	ldr	r2, [r7, #8]
        get_next_item(cont, f->rev, &item_id);
 800ad1c:	4638      	mov	r0, r7
 800ad1e:	78e9      	ldrb	r1, [r5, #3]
        item = cont->spec_attr->children[item_id];
 800ad20:	6812      	ldr	r2, [r2, #0]
        get_next_item(cont, f->rev, &item_id);
 800ad22:	f3c1 0180 	ubfx	r1, r1, #2, #1
        item = cont->spec_attr->children[item_id];
 800ad26:	f852 4028 	ldr.w	r4, [r2, r8, lsl #2]
        get_next_item(cont, f->rev, &item_id);
 800ad2a:	aa05      	add	r2, sp, #20
 800ad2c:	f018 f8f8 	bl	8022f20 <get_next_item>
        if(item) {
 800ad30:	b15c      	cbz	r4, 800ad4a <find_track_end+0x152>
            t->track_cross_size = get_cross_size(item);
 800ad32:	4620      	mov	r0, r4
 800ad34:	47d0      	blx	sl
            t->track_main_size = get_main_size(item);
 800ad36:	9b00      	ldr	r3, [sp, #0]
            t->track_cross_size = get_cross_size(item);
 800ad38:	f8a9 0000 	strh.w	r0, [r9]
            t->track_main_size = get_main_size(item);
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	4798      	blx	r3
            t->item_cnt = 1;
 800ad40:	2201      	movs	r2, #1
            t->track_main_size = get_main_size(item);
 800ad42:	f8a9 0002 	strh.w	r0, [r9, #2]
            t->item_cnt = 1;
 800ad46:	f8c9 2008 	str.w	r2, [r9, #8]
        }
    }

    return item_id;
}
 800ad4a:	9805      	ldr	r0, [sp, #20]
 800ad4c:	b007      	add	sp, #28
 800ad4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if(t->grow_dsc) {
 800ad52:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800ad56:	b149      	cbz	r1, 800ad6c <find_track_end+0x174>
                        lv_memcpy(new_dsc, t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt - 1));
 800ad58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad5c:	435a      	muls	r2, r3
    return memcpy(dst, src, len);
 800ad5e:	3a14      	subs	r2, #20
 800ad60:	f00f fd07 	bl	801a772 <memcpy>
                        lv_mem_buf_release(t->grow_dsc);
 800ad64:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800ad68:	f007 fd70 	bl	801284c <lv_mem_buf_release>
                    new_dsc[t->grow_item_cnt - 1].item = item;
 800ad6c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ad70:	2114      	movs	r1, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800ad72:	4620      	mov	r0, r4
 800ad74:	fb01 6202 	mla	r2, r1, r2, r6
 800ad78:	f842 4c14 	str.w	r4, [r2, #-20]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
 800ad7c:	78e9      	ldrb	r1, [r5, #3]
 800ad7e:	f011 0101 	ands.w	r1, r1, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 800ad82:	bf1a      	itte	ne
 800ad84:	2202      	movne	r2, #2
 800ad86:	2100      	movne	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800ad88:	2205      	moveq	r2, #5
 800ad8a:	f012 fead 	bl	801dae8 <lv_obj_get_style_prop>
 800ad8e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ad92:	2114      	movs	r1, #20
    return (lv_coord_t)v.num;
 800ad94:	b200      	sxth	r0, r0
 800ad96:	fb01 6202 	mla	r2, r1, r2, r6
 800ad9a:	f822 0c10 	strh.w	r0, [r2, #-16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800ad9e:	4620      	mov	r0, r4
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
 800ada0:	78e9      	ldrb	r1, [r5, #3]
 800ada2:	f011 0101 	ands.w	r1, r1, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 800ada6:	bf1a      	itte	ne
 800ada8:	2203      	movne	r2, #3
 800adaa:	2100      	movne	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800adac:	2206      	moveq	r2, #6
 800adae:	f012 fe9b 	bl	801dae8 <lv_obj_get_style_prop>
 800adb2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800adb6:	2114      	movs	r1, #20
    return (lv_coord_t)v.num;
 800adb8:	b200      	sxth	r0, r0
 800adba:	fb01 6202 	mla	r2, r1, r2, r6
 800adbe:	f822 0c0e 	strh.w	r0, [r2, #-14]
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 800adc2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800adc6:	fb01 6002 	mla	r0, r1, r2, r6
 800adca:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800adce:	f840 2c08 	str.w	r2, [r0, #-8]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800add2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800add6:	fb01 6202 	mla	r2, r1, r2, r6
 800adda:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 800adde:	f36f 0100 	bfc	r1, #0, #1
 800ade2:	f802 1c04 	strb.w	r1, [r2, #-4]
                    t->grow_dsc = new_dsc;
 800ade6:	f8c9 600c 	str.w	r6, [r9, #12]
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
 800adea:	4620      	mov	r0, r4
 800adec:	47d0      	blx	sl
 800adee:	f9b9 2000 	ldrsh.w	r2, [r9]
 800adf2:	4290      	cmp	r0, r2
 800adf4:	dd02      	ble.n	800adfc <find_track_end+0x204>
 800adf6:	4620      	mov	r0, r4
 800adf8:	47d0      	blx	sl
 800adfa:	4602      	mov	r2, r0
 800adfc:	f8a9 2000 	strh.w	r2, [r9]
            t->item_cnt++;
 800ae00:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800ae04:	3201      	adds	r2, #1
 800ae06:	f8c9 2008 	str.w	r2, [r9, #8]
        item_id += f->rev ? -1 : +1;
 800ae0a:	78ea      	ldrb	r2, [r5, #3]
 800ae0c:	9b02      	ldr	r3, [sp, #8]
 800ae0e:	f012 0f04 	tst.w	r2, #4
 800ae12:	bf0c      	ite	eq
 800ae14:	2101      	moveq	r1, #1
 800ae16:	f04f 31ff 	movne.w	r1, #4294967295
 800ae1a:	4419      	add	r1, r3
        if(item_id < 0) break;
 800ae1c:	2900      	cmp	r1, #0
        item_id += f->rev ? -1 : +1;
 800ae1e:	9105      	str	r1, [sp, #20]
        if(item_id < 0) break;
 800ae20:	f6bf af1a 	bge.w	800ac58 <find_track_end+0x60>
 800ae24:	e764      	b.n	800acf0 <find_track_end+0xf8>
                lv_coord_t item_size = get_main_size(item);
 800ae26:	9b00      	ldr	r3, [sp, #0]
 800ae28:	4620      	mov	r0, r4
 800ae2a:	4798      	blx	r3
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 800ae2c:	78ea      	ldrb	r2, [r5, #3]
 800ae2e:	0793      	lsls	r3, r2, #30
 800ae30:	d506      	bpl.n	800ae40 <find_track_end+0x248>
 800ae32:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800ae36:	9b01      	ldr	r3, [sp, #4]
 800ae38:	4402      	add	r2, r0
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	f73f af58 	bgt.w	800acf0 <find_track_end+0xf8>
                t->track_fix_main_size += item_size + item_gap;
 800ae40:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 800ae44:	445a      	add	r2, fp
 800ae46:	4410      	add	r0, r2
 800ae48:	f8a9 0004 	strh.w	r0, [r9, #4]
 800ae4c:	e7cd      	b.n	800adea <find_track_end+0x1f2>
 800ae4e:	bf00      	nop
 800ae50:	0801c89d 	.word	0x0801c89d
 800ae54:	0801c8a9 	.word	0x0801c8a9
 800ae58:	00060001 	.word	0x00060001
 800ae5c:	24010cf4 	.word	0x24010cf4

0800ae60 <flex_update>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
 800ae60:	4ba4      	ldr	r3, [pc, #656]	; (800b0f4 <flex_update+0x294>)
 800ae62:	2100      	movs	r1, #0
{
 800ae64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae68:	b0a3      	sub	sp, #140	; 0x8c
 800ae6a:	881a      	ldrh	r2, [r3, #0]
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	f012 fe3b 	bl	801dae8 <lv_obj_get_style_prop>
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
 800ae72:	43c3      	mvns	r3, r0
 800ae74:	f3c0 0280 	ubfx	r2, r0, #2, #1
 800ae78:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	f003 0301 	and.w	r3, r3, #1
 800ae82:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800ae86:	f89d 2063 	ldrb.w	r2, [sp, #99]	; 0x63
 800ae8a:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 800ae8e:	f022 0207 	bic.w	r2, r2, #7
 800ae92:	4620      	mov	r0, r4
 800ae94:	f003 0307 	and.w	r3, r3, #7
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
 800ae9e:	4b96      	ldr	r3, [pc, #600]	; (800b0f8 <flex_update+0x298>)
 800aea0:	881a      	ldrh	r2, [r3, #0]
 800aea2:	f012 fe21 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
 800aea6:	4b95      	ldr	r3, [pc, #596]	; (800b0fc <flex_update+0x29c>)
 800aea8:	2100      	movs	r1, #0
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
 800aeaa:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 800aeae:	881a      	ldrh	r2, [r3, #0]
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f012 fe19 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
 800aeb6:	4b92      	ldr	r3, [pc, #584]	; (800b100 <flex_update+0x2a0>)
 800aeb8:	2100      	movs	r1, #0
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
 800aeba:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
 800aebe:	881a      	ldrh	r2, [r3, #0]
 800aec0:	4620      	mov	r0, r4
 800aec2:	f012 fe11 	bl	801dae8 <lv_obj_get_style_prop>
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800aec6:	2216      	movs	r2, #22
    return (lv_flex_align_t)v.num;
 800aec8:	b2c5      	uxtb	r5, r0
 800aeca:	2100      	movs	r1, #0
 800aecc:	4620      	mov	r0, r4
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
 800aece:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
 800aed2:	f012 fe09 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 800aed6:	f89d 6063 	ldrb.w	r6, [sp, #99]	; 0x63
    return (lv_base_dir_t)v.num;
 800aeda:	b2c3      	uxtb	r3, r0
 800aedc:	f016 0801 	ands.w	r8, r6, #1
 800aee0:	9304      	str	r3, [sp, #16]
 800aee2:	f040 8085 	bne.w	800aff0 <flex_update+0x190>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800aee6:	2215      	movs	r2, #21
 800aee8:	4641      	mov	r1, r8
 800aeea:	4620      	mov	r0, r4
 800aeec:	f012 fdfc 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800aef0:	2214      	movs	r2, #20
    return (lv_coord_t)v.num;
 800aef2:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800aef4:	4641      	mov	r1, r8
 800aef6:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 800aef8:	9307      	str	r3, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800aefa:	f012 fdf5 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800aefe:	b203      	sxth	r3, r0
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800af00:	4620      	mov	r0, r4
 800af02:	9305      	str	r3, [sp, #20]
 800af04:	f011 fcec 	bl	801c8e0 <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800af08:	2232      	movs	r2, #50	; 0x32
 800af0a:	2100      	movs	r1, #0
 800af0c:	9008      	str	r0, [sp, #32]
 800af0e:	4620      	mov	r0, r4
 800af10:	f012 fdea 	bl	801dae8 <lv_obj_get_style_prop>
 800af14:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800af16:	2210      	movs	r2, #16
 800af18:	2100      	movs	r1, #0
 800af1a:	4620      	mov	r0, r4
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 800af1c:	8ae7      	ldrh	r7, [r4, #22]
                                                                  LV_PART_MAIN) + border_width - lv_obj_get_scroll_y(cont);
 800af1e:	fa1f fa89 	uxth.w	sl, r9
 800af22:	f012 fde1 	bl	801dae8 <lv_obj_get_style_prop>
 800af26:	fa10 f989 	uxtah	r9, r0, r9
 800af2a:	4620      	mov	r0, r4
 800af2c:	444f      	add	r7, r9
 800af2e:	f012 f84e 	bl	801cfce <lv_obj_get_scroll_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800af32:	2212      	movs	r2, #18
 800af34:	2100      	movs	r1, #0
 800af36:	b2bf      	uxth	r7, r7
 800af38:	1a3f      	subs	r7, r7, r0
 800af3a:	4620      	mov	r0, r4
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 800af3c:	f8ad 7056 	strh.w	r7, [sp, #86]	; 0x56
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 800af40:	8aa7      	ldrh	r7, [r4, #20]
 800af42:	f012 fdd1 	bl	801dae8 <lv_obj_get_style_prop>
                                                                   LV_PART_MAIN) + border_width - lv_obj_get_scroll_x(cont);
 800af46:	4482      	add	sl, r0
 800af48:	4620      	mov	r0, r4
 800af4a:	f012 f83a 	bl	801cfc2 <lv_obj_get_scroll_x>
 800af4e:	4457      	add	r7, sl
 800af50:	b2bf      	uxth	r7, r7
 800af52:	1a3f      	subs	r7, r7, r0
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 800af54:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800af58:	f1b8 0f00 	cmp.w	r8, #0
 800af5c:	d15a      	bne.n	800b014 <flex_update+0x1b4>
 800af5e:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800af62:	2201      	movs	r2, #1
 800af64:	2100      	movs	r1, #0
 800af66:	4620      	mov	r0, r4
 800af68:	f012 fdbe 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800af6c:	2204      	movs	r2, #4
    return (lv_coord_t)v.num;
 800af6e:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800af70:	2100      	movs	r1, #0
 800af72:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 800af74:	930e      	str	r3, [sp, #56]	; 0x38
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800af76:	f012 fdb7 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800af7a:	b203      	sxth	r3, r0
 800af7c:	930d      	str	r3, [sp, #52]	; 0x34
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 800af7e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800af82:	f1b8 0f00 	cmp.w	r8, #0
 800af86:	d048      	beq.n	800b01a <flex_update+0x1ba>
 800af88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af8a:	429a      	cmp	r2, r3
 800af8c:	f040 8090 	bne.w	800b0b0 <flex_update+0x250>
 800af90:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800af94:	079a      	lsls	r2, r3, #30
 800af96:	f100 808b 	bmi.w	800b0b0 <flex_update+0x250>
    lv_coord_t gap = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    lv_coord_t total_track_cross_size = 0;
 800afa0:	2700      	movs	r7, #0
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800afa2:	f89d 6063 	ldrb.w	r6, [sp, #99]	; 0x63
 800afa6:	f016 0504 	ands.w	r5, r6, #4
 800afaa:	d002      	beq.n	800afb2 <flex_update+0x152>
 800afac:	68a3      	ldr	r3, [r4, #8]
 800afae:	685d      	ldr	r5, [r3, #4]
 800afb0:	3d01      	subs	r5, #1
    if(rtl && !f.row) {
 800afb2:	9b04      	ldr	r3, [sp, #16]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d101      	bne.n	800afbc <flex_update+0x15c>
 800afb8:	07f6      	lsls	r6, r6, #31
 800afba:	d53e      	bpl.n	800b03a <flex_update+0x1da>
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800afbc:	68a3      	ldr	r3, [r4, #8]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	42ab      	cmp	r3, r5
 800afc2:	dd02      	ble.n	800afca <flex_update+0x16a>
 800afc4:	2d00      	cmp	r5, #0
 800afc6:	f280 809d 	bge.w	800b104 <flex_update+0x2a4>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 800afca:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800afce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d002      	beq.n	800afda <flex_update+0x17a>
 800afd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d102      	bne.n	800afe0 <flex_update+0x180>
        lv_obj_refr_size(cont);
 800afda:	4620      	mov	r0, r4
 800afdc:	f7fa f90a 	bl	80051f4 <lv_obj_refr_size>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800afe0:	2200      	movs	r2, #0
 800afe2:	212b      	movs	r1, #43	; 0x2b
 800afe4:	4620      	mov	r0, r4
}
 800afe6:	b023      	add	sp, #140	; 0x8c
 800afe8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800afec:	f7f9 bbaa 	b.w	8004744 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800aff0:	2214      	movs	r2, #20
 800aff2:	2100      	movs	r1, #0
 800aff4:	4620      	mov	r0, r4
 800aff6:	f012 fd77 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800affa:	2215      	movs	r2, #21
    return (lv_coord_t)v.num;
 800affc:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800affe:	2100      	movs	r1, #0
 800b000:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 800b002:	9307      	str	r3, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800b004:	f012 fd70 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800b008:	b203      	sxth	r3, r0
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800b00a:	4620      	mov	r0, r4
 800b00c:	9305      	str	r3, [sp, #20]
 800b00e:	f011 fc51 	bl	801c8b4 <lv_obj_get_content_width>
 800b012:	e779      	b.n	800af08 <flex_update+0xa8>
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800b014:	f10d 0b56 	add.w	fp, sp, #86	; 0x56
 800b018:	e7a3      	b.n	800af62 <flex_update+0x102>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 800b01a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d012      	beq.n	800b046 <flex_update+0x1e6>
    if(rtl && !f.row) {
 800b020:	9b04      	ldr	r3, [sp, #16]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d144      	bne.n	800b0b0 <flex_update+0x250>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800b026:	b1b5      	cbz	r5, 800b056 <flex_update+0x1f6>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 800b028:	2700      	movs	r7, #0
 800b02a:	2d01      	cmp	r5, #1
    lv_coord_t gap = 0;
 800b02c:	f8ad 705a 	strh.w	r7, [sp, #90]	; 0x5a
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 800b030:	d115      	bne.n	800b05e <flex_update+0x1fe>
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800b032:	f016 0504 	ands.w	r5, r6, #4
 800b036:	d1b9      	bne.n	800afac <flex_update+0x14c>
    lv_coord_t total_track_cross_size = 0;
 800b038:	462f      	mov	r7, r5
        *cross_pos += total_track_cross_size;
 800b03a:	f8bb 3000 	ldrh.w	r3, [fp]
 800b03e:	441f      	add	r7, r3
 800b040:	f8ab 7000 	strh.w	r7, [fp]
 800b044:	e7ba      	b.n	800afbc <flex_update+0x15c>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 800b046:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800b04a:	f013 0f04 	tst.w	r3, #4
    if(rtl && !f.row) {
 800b04e:	9b04      	ldr	r3, [sp, #16]
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 800b050:	d1e7      	bne.n	800b022 <flex_update+0x1c2>
    if(rtl && !f.row) {
 800b052:	2b01      	cmp	r3, #1
 800b054:	d1a1      	bne.n	800af9a <flex_update+0x13a>
    lv_coord_t gap = 0;
 800b056:	2300      	movs	r3, #0
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800b058:	2501      	movs	r5, #1
    lv_coord_t gap = 0;
 800b05a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800b05e:	f016 0204 	ands.w	r2, r6, #4
 800b062:	f04f 0600 	mov.w	r6, #0
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b066:	f10d 0870 	add.w	r8, sp, #112	; 0x70
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800b06a:	bf18      	it	ne
 800b06c:	68a3      	ldrne	r3, [r4, #8]
 800b06e:	4637      	mov	r7, r6
 800b070:	bf1c      	itt	ne
 800b072:	685a      	ldrne	r2, [r3, #4]
 800b074:	f102 32ff 	addne.w	r2, r2, #4294967295
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800b078:	68a3      	ldr	r3, [r4, #8]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	4293      	cmp	r3, r2
 800b07e:	dd01      	ble.n	800b084 <flex_update+0x224>
 800b080:	2a00      	cmp	r2, #0
 800b082:	da1b      	bge.n	800b0bc <flex_update+0x25c>
        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
 800b084:	b116      	cbz	r6, 800b08c <flex_update+0x22c>
 800b086:	9b07      	ldr	r3, [sp, #28]
 800b088:	1aff      	subs	r7, r7, r3
 800b08a:	b23f      	sxth	r7, r7
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800b08c:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
 800b090:	4620      	mov	r0, r4
 800b092:	07db      	lsls	r3, r3, #31
 800b094:	d52a      	bpl.n	800b0ec <flex_update+0x28c>
 800b096:	f011 fc23 	bl	801c8e0 <lv_obj_get_content_height>
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 800b09a:	f10d 035a 	add.w	r3, sp, #90	; 0x5a
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800b09e:	4601      	mov	r1, r0
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 800b0a0:	463a      	mov	r2, r7
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	e9cd b300 	strd	fp, r3, [sp]
 800b0a8:	b233      	sxth	r3, r6
 800b0aa:	f017 fef3 	bl	8022e94 <place_content>
 800b0ae:	e778      	b.n	800afa2 <flex_update+0x142>
    lv_coord_t gap = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 800b0b6:	2d00      	cmp	r5, #0
 800b0b8:	d1d1      	bne.n	800b05e <flex_update+0x1fe>
 800b0ba:	e771      	b.n	800afa0 <flex_update+0x140>
            t.grow_dsc_calc = 0;
 800b0bc:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b0c0:	a918      	add	r1, sp, #96	; 0x60
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f8cd 8004 	str.w	r8, [sp, #4]
            t.grow_dsc_calc = 0;
 800b0c8:	f36f 0300 	bfc	r3, #0, #1
            track_cnt++;
 800b0cc:	3601      	adds	r6, #1
            t.grow_dsc_calc = 0;
 800b0ce:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b0d2:	9b05      	ldr	r3, [sp, #20]
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	9b08      	ldr	r3, [sp, #32]
 800b0d8:	f7ff fd8e 	bl	800abf8 <find_track_end>
            total_track_cross_size += t.track_cross_size + track_gap;
 800b0dc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800b0e0:	9907      	ldr	r1, [sp, #28]
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b0e2:	4602      	mov	r2, r0
            total_track_cross_size += t.track_cross_size + track_gap;
 800b0e4:	440b      	add	r3, r1
 800b0e6:	443b      	add	r3, r7
 800b0e8:	b21f      	sxth	r7, r3
            track_first_item = next_track_first_item;
 800b0ea:	e7c5      	b.n	800b078 <flex_update+0x218>
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800b0ec:	f011 fbe2 	bl	801c8b4 <lv_obj_get_content_width>
 800b0f0:	e7d3      	b.n	800b09a <flex_update+0x23a>
 800b0f2:	bf00      	nop
 800b0f4:	24010cfc 	.word	0x24010cfc
 800b0f8:	24010cfa 	.word	0x24010cfa
 800b0fc:	24010cf8 	.word	0x24010cf8
 800b100:	24010cf6 	.word	0x24010cf6
        t.grow_dsc_calc = 1;
 800b104:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b108:	462a      	mov	r2, r5
 800b10a:	a918      	add	r1, sp, #96	; 0x60
 800b10c:	4620      	mov	r0, r4
        t.grow_dsc_calc = 1;
 800b10e:	f043 0301 	orr.w	r3, r3, #1
 800b112:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b116:	ab1c      	add	r3, sp, #112	; 0x70
 800b118:	9301      	str	r3, [sp, #4]
 800b11a:	9b05      	ldr	r3, [sp, #20]
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	9b08      	ldr	r3, [sp, #32]
 800b120:	f7ff fd6a 	bl	800abf8 <find_track_end>
        if(rtl && !f.row) {
 800b124:	9b04      	ldr	r3, [sp, #16]
 800b126:	f89d 2063 	ldrb.w	r2, [sp, #99]	; 0x63
 800b12a:	2b01      	cmp	r3, #1
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b12c:	900c      	str	r0, [sp, #48]	; 0x30
        if(rtl && !f.row) {
 800b12e:	d108      	bne.n	800b142 <flex_update+0x2e2>
 800b130:	07d0      	lsls	r0, r2, #31
            *cross_pos -= t.track_cross_size;
 800b132:	bf5f      	itttt	pl
 800b134:	f8bb 3000 	ldrhpl.w	r3, [fp]
 800b138:	f8bd 1070 	ldrhpl.w	r1, [sp, #112]	; 0x70
 800b13c:	1a5b      	subpl	r3, r3, r1
 800b13e:	f8ab 3000 	strhpl.w	r3, [fp]
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800b142:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 800b146:	f04f 0914 	mov.w	r9, #20
    uint32_t i;
    bool grow_reiterate  = true;
    while(grow_reiterate) {
        grow_reiterate = false;
        lv_coord_t grow_value_sum = 0;
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800b14a:	f9bd 7072 	ldrsh.w	r7, [sp, #114]	; 0x72
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800b14e:	9311      	str	r3, [sp, #68]	; 0x44
 800b150:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800b154:	9519      	str	r5, [sp, #100]	; 0x64
 800b156:	9312      	str	r3, [sp, #72]	; 0x48
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 800b158:	f002 0301 	and.w	r3, r2, #1
 800b15c:	4a66      	ldr	r2, [pc, #408]	; (800b2f8 <flex_update+0x498>)
 800b15e:	2b00      	cmp	r3, #0
 800b160:	9303      	str	r3, [sp, #12]
 800b162:	4b66      	ldr	r3, [pc, #408]	; (800b2fc <flex_update+0x49c>)
 800b164:	bf08      	it	eq
 800b166:	4613      	moveq	r3, r2
 800b168:	4a65      	ldr	r2, [pc, #404]	; (800b300 <flex_update+0x4a0>)
 800b16a:	9313      	str	r3, [sp, #76]	; 0x4c
 800b16c:	bf18      	it	ne
 800b16e:	4611      	movne	r1, r2
 800b170:	4b64      	ldr	r3, [pc, #400]	; (800b304 <flex_update+0x4a4>)
 800b172:	bf04      	itt	eq
 800b174:	4619      	moveq	r1, r3
 800b176:	4613      	moveq	r3, r2
 800b178:	930f      	str	r3, [sp, #60]	; 0x3c
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800b17a:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 800b17e:	910b      	str	r1, [sp, #44]	; 0x2c
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800b180:	1afb      	subs	r3, r7, r3
 800b182:	b21b      	sxth	r3, r3
 800b184:	930a      	str	r3, [sp, #40]	; 0x28
            }
        }
        lv_coord_t grow_unit;

        for(i = 0; i < t->grow_item_cnt; i++) {
            if(t->grow_dsc[i].clamped == 0) {
 800b186:	e9dd 3a1f 	ldrd	r3, sl, [sp, #124]	; 0x7c
 800b18a:	9306      	str	r3, [sp, #24]
 800b18c:	fb09 330a 	mla	r3, r9, sl, r3
 800b190:	9310      	str	r3, [sp, #64]	; 0x40
        for(i = 0; i < t->grow_item_cnt; i++) {
 800b192:	9a06      	ldr	r2, [sp, #24]
        lv_coord_t grow_value_sum = 0;
 800b194:	2100      	movs	r1, #0
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800b196:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
        for(i = 0; i < t->grow_item_cnt; i++) {
 800b19a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d14e      	bne.n	800b23e <flex_update+0x3de>
        grow_reiterate = false;
 800b1a0:	2600      	movs	r6, #0
 800b1a2:	9a06      	ldr	r2, [sp, #24]
        for(i = 0; i < t->grow_item_cnt; i++) {
 800b1a4:	9609      	str	r6, [sp, #36]	; 0x24
 800b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a8:	459a      	cmp	sl, r3
 800b1aa:	d158      	bne.n	800b25e <flex_update+0x3fe>
    while(grow_reiterate) {
 800b1ac:	2e00      	cmp	r6, #0
 800b1ae:	d1f0      	bne.n	800b192 <flex_update+0x332>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b1b0:	2216      	movs	r2, #22
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f012 fc97 	bl	801dae8 <lv_obj_get_style_prop>
    bool rtl = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL ? true : false;

    lv_coord_t main_pos = 0;

    lv_coord_t place_gap = 0;
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800b1ba:	463a      	mov	r2, r7
    return (lv_base_dir_t)v.num;
 800b1bc:	b2c3      	uxtb	r3, r0
 800b1be:	9908      	ldr	r1, [sp, #32]
 800b1c0:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
 800b1c4:	930a      	str	r3, [sp, #40]	; 0x28
 800b1c6:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
    lv_coord_t main_pos = 0;
 800b1ca:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800b1ce:	9301      	str	r3, [sp, #4]
 800b1d0:	ab17      	add	r3, sp, #92	; 0x5c
    lv_coord_t place_gap = 0;
 800b1d2:	f8ad 605e 	strh.w	r6, [sp, #94]	; 0x5e
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 800b1dc:	f017 fe5a 	bl	8022e94 <place_content>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 800b1e0:	9b03      	ldr	r3, [sp, #12]
 800b1e2:	b153      	cbz	r3, 800b1fa <flex_update+0x39a>
 800b1e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d107      	bne.n	800b1fa <flex_update+0x39a>
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f011 fb62 	bl	801c8b4 <lv_obj_get_content_width>
 800b1f0:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800b1f4:	4418      	add	r0, r3
 800b1f6:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c

    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f012 fffa 	bl	801e1f6 <lv_obj_get_child>
        }

        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
        else main_pos -= item_gap + place_gap;

        item = get_next_item(cont, f->rev, &item_first_id);
 800b202:	4605      	mov	r5, r0
    while(item && item_first_id != item_last_id) {
 800b204:	b118      	cbz	r0, 800b20e <flex_update+0x3ae>
 800b206:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b208:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d157      	bne.n	800b2be <flex_update+0x45e>
        lv_mem_buf_release(t.grow_dsc);
 800b20e:	9806      	ldr	r0, [sp, #24]
 800b210:	f007 fb1c 	bl	801284c <lv_mem_buf_release>
        if(rtl && !f.row) {
 800b214:	9904      	ldr	r1, [sp, #16]
            total_track_cross_size += t.track_cross_size + track_gap;
 800b216:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        if(rtl && !f.row) {
 800b21a:	2901      	cmp	r1, #1
            *cross_pos -= gap + track_gap;
 800b21c:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
 800b220:	f8bb 1000 	ldrh.w	r1, [fp]
        if(rtl && !f.row) {
 800b224:	f040 819c 	bne.w	800b560 <flex_update+0x700>
 800b228:	9803      	ldr	r0, [sp, #12]
 800b22a:	2800      	cmp	r0, #0
 800b22c:	f040 8198 	bne.w	800b560 <flex_update+0x700>
            *cross_pos -= gap + track_gap;
 800b230:	4413      	add	r3, r2
 800b232:	1acb      	subs	r3, r1, r3
            *cross_pos += t.track_cross_size + gap + track_gap;
 800b234:	b21b      	sxth	r3, r3
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b238:	f8ab 3000 	strh.w	r3, [fp]
 800b23c:	e6be      	b.n	800afbc <flex_update+0x15c>
            if(t->grow_dsc[i].clamped == 0) {
 800b23e:	7c13      	ldrb	r3, [r2, #16]
 800b240:	3214      	adds	r2, #20
 800b242:	07db      	lsls	r3, r3, #31
                grow_value_sum += t->grow_dsc[i].grow_value;
 800b244:	bf55      	itete	pl
 800b246:	f852 3c08 	ldrpl.w	r3, [r2, #-8]
                grow_max_size -= t->grow_dsc[i].final_size;
 800b24a:	f832 3c0c 	ldrhmi.w	r3, [r2, #-12]
                grow_value_sum += t->grow_dsc[i].grow_value;
 800b24e:	185b      	addpl	r3, r3, r1
                grow_max_size -= t->grow_dsc[i].final_size;
 800b250:	ebac 0303 	submi.w	r3, ip, r3
                grow_value_sum += t->grow_dsc[i].grow_value;
 800b254:	bf54      	ite	pl
 800b256:	b219      	sxthpl	r1, r3
                grow_max_size -= t->grow_dsc[i].final_size;
 800b258:	fa0f fc83 	sxthmi.w	ip, r3
        for(i = 0; i < t->grow_item_cnt; i++) {
 800b25c:	e79d      	b.n	800b19a <flex_update+0x33a>
            if(t->grow_dsc[i].clamped == 0) {
 800b25e:	f892 8010 	ldrb.w	r8, [r2, #16]
 800b262:	f018 0f01 	tst.w	r8, #1
 800b266:	d125      	bne.n	800b2b4 <flex_update+0x454>
                LV_ASSERT(grow_value_sum != 0);
 800b268:	b901      	cbnz	r1, 800b26c <flex_update+0x40c>
 800b26a:	e7fe      	b.n	800b26a <flex_update+0x40a>
                grow_unit = grow_max_size / grow_value_sum;
 800b26c:	fb9c f0f1 	sdiv	r0, ip, r1
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800b270:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800b274:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800b278:	fb10 f00e 	smulbb	r0, r0, lr
                grow_value_sum -= t->grow_dsc[i].grow_value;
 800b27c:	eba1 0e0e 	sub.w	lr, r1, lr
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800b280:	b200      	sxth	r0, r0
                grow_value_sum -= t->grow_dsc[i].grow_value;
 800b282:	fa0f f18e 	sxth.w	r1, lr
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800b286:	4283      	cmp	r3, r0
 800b288:	bfa8      	it	ge
 800b28a:	4603      	movge	r3, r0
 800b28c:	4699      	mov	r9, r3
 800b28e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800b292:	4599      	cmp	r9, r3
 800b294:	bfb8      	it	lt
 800b296:	4699      	movlt	r9, r3
                if(size_clamp != size) {
 800b298:	4548      	cmp	r0, r9
                grow_max_size  -= t->grow_dsc[i].final_size;
 800b29a:	ebac 0309 	sub.w	r3, ip, r9
                t->grow_dsc[i].final_size = size_clamp;
 800b29e:	f8a2 9008 	strh.w	r9, [r2, #8]
                    t->grow_dsc[i].clamped = 1;
 800b2a2:	bf1c      	itt	ne
 800b2a4:	f048 0801 	orrne.w	r8, r8, #1
                    grow_reiterate = true;
 800b2a8:	2601      	movne	r6, #1
                grow_max_size  -= t->grow_dsc[i].final_size;
 800b2aa:	fa0f fc83 	sxth.w	ip, r3
                    t->grow_dsc[i].clamped = 1;
 800b2ae:	bf18      	it	ne
 800b2b0:	f882 8010 	strbne.w	r8, [r2, #16]
        for(i = 0; i < t->grow_item_cnt; i++) {
 800b2b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b6:	3214      	adds	r2, #20
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b2bc:	e773      	b.n	800b1a6 <flex_update+0x346>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800b2be:	4912      	ldr	r1, [pc, #72]	; (800b308 <flex_update+0x4a8>)
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	f010 fbdd 	bl	801ba80 <lv_obj_has_flag_any>
            item = get_next_item(cont, f->rev, &item_first_id);
 800b2c6:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800b2ca:	4606      	mov	r6, r0
            item = get_next_item(cont, f->rev, &item_first_id);
 800b2cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b2d0:	9310      	str	r3, [sp, #64]	; 0x40
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800b2d2:	b128      	cbz	r0, 800b2e0 <flex_update+0x480>
            item = get_next_item(cont, f->rev, &item_first_id);
 800b2d4:	aa19      	add	r2, sp, #100	; 0x64
 800b2d6:	4619      	mov	r1, r3
        item = get_next_item(cont, f->rev, &item_first_id);
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f017 fe21 	bl	8022f20 <get_next_item>
 800b2de:	e790      	b.n	800b202 <flex_update+0x3a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 800b2e0:	4b0a      	ldr	r3, [pc, #40]	; (800b30c <flex_update+0x4ac>)
 800b2e2:	4601      	mov	r1, r0
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	881a      	ldrh	r2, [r3, #0]
 800b2e8:	f012 fbfe 	bl	801dae8 <lv_obj_get_style_prop>
    return (uint8_t)v.num;
 800b2ec:	b2c0      	uxtb	r0, r0
        if(grow_size) {
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	f000 80f4 	beq.w	800b4dc <flex_update+0x67c>
 800b2f4:	9b06      	ldr	r3, [sp, #24]
 800b2f6:	e0e8      	b.n	800b4ca <flex_update+0x66a>
 800b2f8:	08024275 	.word	0x08024275
 800b2fc:	0802426b 	.word	0x0802426b
 800b300:	08022e7d 	.word	0x08022e7d
 800b304:	08022e89 	.word	0x08022e89
 800b308:	00060001 	.word	0x00060001
 800b30c:	24010cf4 	.word	0x24010cf4
                if(t->grow_dsc[i].item == item) {
 800b310:	461a      	mov	r2, r3
 800b312:	f852 1b14 	ldr.w	r1, [r2], #20
 800b316:	428d      	cmp	r5, r1
 800b318:	f040 80d5 	bne.w	800b4c6 <flex_update+0x666>
                    s = t->grow_dsc[i].final_size;
 800b31c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
            if(f->row) {
 800b320:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800b324:	9a03      	ldr	r2, [sp, #12]
                item->h_layout = 0;
 800b326:	f023 0306 	bic.w	r3, r3, #6
            if(f->row) {
 800b32a:	2a00      	cmp	r2, #0
 800b32c:	f000 80d3 	beq.w	800b4d6 <flex_update+0x676>
                item->h_layout = 0;
 800b330:	f043 0304 	orr.w	r3, r3, #4
            if(s != area_get_main_size(&item->coords)) {
 800b334:	f105 0614 	add.w	r6, r5, #20
                item->h_layout = 1;
 800b338:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            if(s != area_get_main_size(&item->coords)) {
 800b33c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b33e:	4630      	mov	r0, r6
 800b340:	4798      	blx	r3
 800b342:	42b8      	cmp	r0, r7
 800b344:	d021      	beq.n	800b38a <flex_update+0x52a>
                lv_obj_invalidate(item);
 800b346:	4628      	mov	r0, r5
 800b348:	f011 fca8 	bl	801cc9c <lv_obj_invalidate>
    dest->x1 = src->x1;
 800b34c:	8aab      	ldrh	r3, [r5, #20]
                area_set_main_size(&item->coords, s);
 800b34e:	4639      	mov	r1, r7
 800b350:	4630      	mov	r0, r6
 800b352:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    dest->y1 = src->y1;
 800b356:	8aeb      	ldrh	r3, [r5, #22]
 800b358:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    dest->x2 = src->x2;
 800b35c:	8b2b      	ldrh	r3, [r5, #24]
 800b35e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    dest->y2 = src->y2;
 800b362:	8b6b      	ldrh	r3, [r5, #26]
 800b364:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 800b368:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b36a:	4798      	blx	r3
                lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 800b36c:	aa1a      	add	r2, sp, #104	; 0x68
 800b36e:	2129      	movs	r1, #41	; 0x29
 800b370:	4628      	mov	r0, r5
 800b372:	f7f9 f9e7 	bl	8004744 <lv_event_send>
                lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 800b376:	4628      	mov	r0, r5
 800b378:	f012 ff3a 	bl	801e1f0 <lv_obj_get_parent>
 800b37c:	462a      	mov	r2, r5
 800b37e:	2122      	movs	r1, #34	; 0x22
 800b380:	f7f9 f9e0 	bl	8004744 <lv_event_send>
                lv_obj_invalidate(item);
 800b384:	4628      	mov	r0, r5
 800b386:	f011 fc89 	bl	801cc9c <lv_obj_invalidate>
        switch(f->cross_place) {
 800b38a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 800b38e:	2b01      	cmp	r3, #1
 800b390:	f000 80ab 	beq.w	800b4ea <flex_update+0x68a>
 800b394:	2b02      	cmp	r3, #2
 800b396:	f040 80b1 	bne.w	800b4fc <flex_update+0x69c>
                cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
 800b39a:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 800b39e:	f105 0014 	add.w	r0, r5, #20
 800b3a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3a4:	3701      	adds	r7, #1
 800b3a6:	4798      	blx	r3
 800b3a8:	f027 0701 	bic.w	r7, r7, #1
 800b3ac:	1a3f      	subs	r7, r7, r0
 800b3ae:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800b3b2:	f347 074f 	sbfx	r7, r7, #1, #16
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 800b3b6:	9b03      	ldr	r3, [sp, #12]
 800b3b8:	b15b      	cbz	r3, 800b3d2 <flex_update+0x572>
 800b3ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d108      	bne.n	800b3d2 <flex_update+0x572>
        diff_x += f->row ? main_pos : cross_pos;
 800b3c0:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 800b3c4:	f105 0014 	add.w	r0, r5, #20
 800b3c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3ca:	4798      	blx	r3
 800b3cc:	1a36      	subs	r6, r6, r0
 800b3ce:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800b3d2:	226a      	movs	r2, #106	; 0x6a
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f012 fb86 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800b3dc:	226b      	movs	r2, #107	; 0x6b
 800b3de:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 800b3e0:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f012 fb7f 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800b3ea:	fa0f f980 	sxth.w	r9, r0
        lv_coord_t w = lv_obj_get_width(item);
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	f011 fa54 	bl	801c89c <lv_obj_get_width>
 800b3f4:	4606      	mov	r6, r0
        lv_coord_t h = lv_obj_get_height(item);
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f011 fa56 	bl	801c8a8 <lv_obj_get_height>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800b3fc:	f408 43c0 	and.w	r3, r8, #24576	; 0x6000
 800b400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b404:	d10f      	bne.n	800b426 <flex_update+0x5c6>
 800b406:	f428 43c0 	bic.w	r3, r8, #24576	; 0x6000
 800b40a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b40e:	dc0a      	bgt.n	800b426 <flex_update+0x5c6>
 800b410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b414:	bfc8      	it	gt
 800b416:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 800b41a:	435e      	muls	r6, r3
 800b41c:	2364      	movs	r3, #100	; 0x64
 800b41e:	fb96 f6f3 	sdiv	r6, r6, r3
 800b422:	fa0f f886 	sxth.w	r8, r6
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800b426:	f409 43c0 	and.w	r3, r9, #24576	; 0x6000
 800b42a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b42e:	d10f      	bne.n	800b450 <flex_update+0x5f0>
 800b430:	f429 43c0 	bic.w	r3, r9, #24576	; 0x6000
 800b434:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b438:	dc0a      	bgt.n	800b450 <flex_update+0x5f0>
 800b43a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b43e:	bfc8      	it	gt
 800b440:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 800b444:	4358      	muls	r0, r3
 800b446:	2364      	movs	r3, #100	; 0x64
 800b448:	fb90 f0f3 	sdiv	r0, r0, r3
 800b44c:	fa0f f980 	sxth.w	r9, r0
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800b450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b452:	8aae      	ldrh	r6, [r5, #20]
        diff_x += f->row ? main_pos : cross_pos;
 800b454:	9a03      	ldr	r2, [sp, #12]
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800b456:	1b9e      	subs	r6, r3, r6
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800b458:	9b12      	ldr	r3, [sp, #72]	; 0x48
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800b45a:	4446      	add	r6, r8
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800b45c:	f8b5 8016 	ldrh.w	r8, [r5, #22]
 800b460:	eba3 0808 	sub.w	r8, r3, r8
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800b464:	b2b6      	uxth	r6, r6
        diff_y += f->row ? cross_pos : main_pos;
 800b466:	b2bb      	uxth	r3, r7
        diff_x += f->row ? main_pos : cross_pos;
 800b468:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800b46c:	44c8      	add	r8, r9
 800b46e:	fa1f f888 	uxth.w	r8, r8
        diff_x += f->row ? main_pos : cross_pos;
 800b472:	2a00      	cmp	r2, #0
 800b474:	d044      	beq.n	800b500 <flex_update+0x6a0>
 800b476:	443e      	add	r6, r7
        diff_y += f->row ? cross_pos : main_pos;
 800b478:	4443      	add	r3, r8
        diff_x += f->row ? main_pos : cross_pos;
 800b47a:	fa1f f986 	uxth.w	r9, r6
 800b47e:	b236      	sxth	r6, r6
        diff_y += f->row ? cross_pos : main_pos;
 800b480:	fa1f fa83 	uxth.w	sl, r3
 800b484:	fa0f f883 	sxth.w	r8, r3
        if(diff_x || diff_y) {
 800b488:	2e00      	cmp	r6, #0
 800b48a:	d057      	beq.n	800b53c <flex_update+0x6dc>
            lv_obj_invalidate(item);
 800b48c:	4628      	mov	r0, r5
 800b48e:	f011 fc05 	bl	801cc9c <lv_obj_invalidate>
            item->coords.x1 += diff_x;
 800b492:	8aab      	ldrh	r3, [r5, #20]
            lv_obj_invalidate(item);
 800b494:	4628      	mov	r0, r5
            item->coords.x1 += diff_x;
 800b496:	444b      	add	r3, r9
 800b498:	82ab      	strh	r3, [r5, #20]
            item->coords.x2 += diff_x;
 800b49a:	8b2b      	ldrh	r3, [r5, #24]
 800b49c:	4499      	add	r9, r3
            item->coords.y1 += diff_y;
 800b49e:	8aeb      	ldrh	r3, [r5, #22]
 800b4a0:	4453      	add	r3, sl
            item->coords.x2 += diff_x;
 800b4a2:	f8a5 9018 	strh.w	r9, [r5, #24]
            item->coords.y1 += diff_y;
 800b4a6:	82eb      	strh	r3, [r5, #22]
            item->coords.y2 += diff_y;
 800b4a8:	8b6b      	ldrh	r3, [r5, #26]
 800b4aa:	449a      	add	sl, r3
 800b4ac:	f8a5 a01a 	strh.w	sl, [r5, #26]
            lv_obj_invalidate(item);
 800b4b0:	f011 fbf4 	bl	801cc9c <lv_obj_invalidate>
            lv_obj_move_children_by(item, diff_x, diff_y, false);
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	4642      	mov	r2, r8
 800b4b8:	4631      	mov	r1, r6
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f011 fa7d 	bl	801c9ba <lv_obj_move_children_by>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800b4c0:	9b03      	ldr	r3, [sp, #12]
 800b4c2:	b35b      	cbz	r3, 800b51c <flex_update+0x6bc>
 800b4c4:	e03d      	b.n	800b542 <flex_update+0x6e2>
            for(i = 0; i < t->grow_item_cnt; i++) {
 800b4c6:	3601      	adds	r6, #1
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4cc:	42b2      	cmp	r2, r6
 800b4ce:	f47f af1f 	bne.w	800b310 <flex_update+0x4b0>
            lv_coord_t s = 0;
 800b4d2:	2700      	movs	r7, #0
 800b4d4:	e724      	b.n	800b320 <flex_update+0x4c0>
                item->h_layout = 1;
 800b4d6:	f043 0302 	orr.w	r3, r3, #2
 800b4da:	e72b      	b.n	800b334 <flex_update+0x4d4>
            item->h_layout = 0;
 800b4dc:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800b4e0:	f023 0306 	bic.w	r3, r3, #6
 800b4e4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 800b4e8:	e74f      	b.n	800b38a <flex_update+0x52a>
                cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
 800b4ea:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 800b4ee:	f105 0014 	add.w	r0, r5, #20
 800b4f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4f4:	4798      	blx	r3
 800b4f6:	1a3f      	subs	r7, r7, r0
 800b4f8:	b23f      	sxth	r7, r7
                break;
 800b4fa:	e75c      	b.n	800b3b6 <flex_update+0x556>
        switch(f->cross_place) {
 800b4fc:	2700      	movs	r7, #0
 800b4fe:	e75a      	b.n	800b3b6 <flex_update+0x556>
        diff_x += f->row ? main_pos : cross_pos;
 800b500:	441e      	add	r6, r3
        diff_y += f->row ? cross_pos : main_pos;
 800b502:	44b8      	add	r8, r7
        diff_x += f->row ? main_pos : cross_pos;
 800b504:	fa1f f986 	uxth.w	r9, r6
 800b508:	b236      	sxth	r6, r6
        diff_y += f->row ? cross_pos : main_pos;
 800b50a:	fa1f fa88 	uxth.w	sl, r8
 800b50e:	fa0f f888 	sxth.w	r8, r8
        if(diff_x || diff_y) {
 800b512:	2e00      	cmp	r6, #0
 800b514:	d1ba      	bne.n	800b48c <flex_update+0x62c>
 800b516:	f1b8 0f00 	cmp.w	r8, #0
 800b51a:	d11c      	bne.n	800b556 <flex_update+0x6f6>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800b51c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b51e:	f105 0014 	add.w	r0, r5, #20
 800b522:	4798      	blx	r3
 800b524:	9b05      	ldr	r3, [sp, #20]
 800b526:	4418      	add	r0, r3
 800b528:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800b52c:	4418      	add	r0, r3
 800b52e:	4438      	add	r0, r7
 800b530:	b207      	sxth	r7, r0
        item = get_next_item(cont, f->rev, &item_first_id);
 800b532:	aa19      	add	r2, sp, #100	; 0x64
 800b534:	9910      	ldr	r1, [sp, #64]	; 0x40
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800b536:	f8ad 705c 	strh.w	r7, [sp, #92]	; 0x5c
        item = get_next_item(cont, f->rev, &item_first_id);
 800b53a:	e6cd      	b.n	800b2d8 <flex_update+0x478>
        if(diff_x || diff_y) {
 800b53c:	f1b8 0f00 	cmp.w	r8, #0
 800b540:	d10c      	bne.n	800b55c <flex_update+0x6fc>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800b542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        else main_pos -= item_gap + place_gap;
 800b544:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800b548:	2a01      	cmp	r2, #1
 800b54a:	d1e7      	bne.n	800b51c <flex_update+0x6bc>
        else main_pos -= item_gap + place_gap;
 800b54c:	1aff      	subs	r7, r7, r3
 800b54e:	9b05      	ldr	r3, [sp, #20]
 800b550:	1aff      	subs	r7, r7, r3
 800b552:	b23f      	sxth	r7, r7
 800b554:	e7ed      	b.n	800b532 <flex_update+0x6d2>
        diff_x += f->row ? main_pos : cross_pos;
 800b556:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b55a:	e797      	b.n	800b48c <flex_update+0x62c>
 800b55c:	46b1      	mov	r9, r6
 800b55e:	e795      	b.n	800b48c <flex_update+0x62c>
            *cross_pos += t.track_cross_size + gap + track_gap;
 800b560:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 800b564:	4402      	add	r2, r0
 800b566:	4413      	add	r3, r2
 800b568:	440b      	add	r3, r1
 800b56a:	e663      	b.n	800b234 <flex_update+0x3d4>

0800b56c <lv_flex_init>:
{
 800b56c:	b508      	push	{r3, lr}
    LV_LAYOUT_FLEX = lv_layout_register(flex_update, NULL);
 800b56e:	2100      	movs	r1, #0
 800b570:	480c      	ldr	r0, [pc, #48]	; (800b5a4 <lv_flex_init+0x38>)
 800b572:	f7f9 fce1 	bl	8004f38 <lv_layout_register>
 800b576:	4b0c      	ldr	r3, [pc, #48]	; (800b5a8 <lv_flex_init+0x3c>)
 800b578:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_FLOW = lv_style_register_prop(LV_STYLE_PROP_FLAG_NONE);
 800b57a:	2000      	movs	r0, #0
 800b57c:	f007 f992 	bl	80128a4 <lv_style_register_prop>
 800b580:	4b0a      	ldr	r3, [pc, #40]	; (800b5ac <lv_flex_init+0x40>)
 800b582:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_MAIN_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800b584:	2004      	movs	r0, #4
 800b586:	f007 f98d 	bl	80128a4 <lv_style_register_prop>
 800b58a:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <lv_flex_init+0x44>)
 800b58c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_CROSS_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800b58e:	2004      	movs	r0, #4
 800b590:	f007 f988 	bl	80128a4 <lv_style_register_prop>
 800b594:	4b07      	ldr	r3, [pc, #28]	; (800b5b4 <lv_flex_init+0x48>)
 800b596:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_TRACK_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800b598:	2004      	movs	r0, #4
 800b59a:	f007 f983 	bl	80128a4 <lv_style_register_prop>
 800b59e:	4b06      	ldr	r3, [pc, #24]	; (800b5b8 <lv_flex_init+0x4c>)
 800b5a0:	8018      	strh	r0, [r3, #0]
}
 800b5a2:	bd08      	pop	{r3, pc}
 800b5a4:	0800ae61 	.word	0x0800ae61
 800b5a8:	24010cfe 	.word	0x24010cfe
 800b5ac:	24010cfc 	.word	0x24010cfc
 800b5b0:	24010cfa 	.word	0x24010cfa
 800b5b4:	24010cf8 	.word	0x24010cf8
 800b5b8:	24010cf6 	.word	0x24010cf6

0800b5bc <lv_obj_set_style_flex_flow>:
{
 800b5bc:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_FLOW, v, selector);
 800b5be:	460a      	mov	r2, r1
 800b5c0:	4901      	ldr	r1, [pc, #4]	; (800b5c8 <lv_obj_set_style_flex_flow+0xc>)
 800b5c2:	8809      	ldrh	r1, [r1, #0]
 800b5c4:	f012 bc4a 	b.w	801de5c <lv_obj_set_local_style_prop>
 800b5c8:	24010cfc 	.word	0x24010cfc

0800b5cc <lv_obj_set_flex_flow>:
{
 800b5cc:	b510      	push	{r4, lr}
    lv_obj_set_style_flex_flow(obj, flow, 0);
 800b5ce:	2200      	movs	r2, #0
{
 800b5d0:	4604      	mov	r4, r0
    lv_obj_set_style_flex_flow(obj, flow, 0);
 800b5d2:	f7ff fff3 	bl	800b5bc <lv_obj_set_style_flex_flow>
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 800b5d6:	4b04      	ldr	r3, [pc, #16]	; (800b5e8 <lv_obj_set_flex_flow+0x1c>)
 800b5d8:	4620      	mov	r0, r4
 800b5da:	2200      	movs	r2, #0
 800b5dc:	8819      	ldrh	r1, [r3, #0]
}
 800b5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 800b5e2:	f012 bdf3 	b.w	801e1cc <lv_obj_set_style_layout>
 800b5e6:	bf00      	nop
 800b5e8:	24010cfe 	.word	0x24010cfe

0800b5ec <lv_obj_set_style_flex_main_place>:
{
 800b5ec:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_MAIN_PLACE, v, selector);
 800b5ee:	460a      	mov	r2, r1
 800b5f0:	4901      	ldr	r1, [pc, #4]	; (800b5f8 <lv_obj_set_style_flex_main_place+0xc>)
 800b5f2:	8809      	ldrh	r1, [r1, #0]
 800b5f4:	f012 bc32 	b.w	801de5c <lv_obj_set_local_style_prop>
 800b5f8:	24010cfa 	.word	0x24010cfa

0800b5fc <lv_obj_set_style_flex_cross_place>:
{
 800b5fc:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_CROSS_PLACE, v, selector);
 800b5fe:	460a      	mov	r2, r1
 800b600:	4901      	ldr	r1, [pc, #4]	; (800b608 <lv_obj_set_style_flex_cross_place+0xc>)
 800b602:	8809      	ldrh	r1, [r1, #0]
 800b604:	f012 bc2a 	b.w	801de5c <lv_obj_set_local_style_prop>
 800b608:	24010cf8 	.word	0x24010cf8

0800b60c <lv_obj_set_style_flex_track_place>:
{
 800b60c:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_TRACK_PLACE, v, selector);
 800b60e:	460a      	mov	r2, r1
 800b610:	4901      	ldr	r1, [pc, #4]	; (800b618 <lv_obj_set_style_flex_track_place+0xc>)
 800b612:	8809      	ldrh	r1, [r1, #0]
 800b614:	f012 bc22 	b.w	801de5c <lv_obj_set_local_style_prop>
 800b618:	24010cf6 	.word	0x24010cf6

0800b61c <lv_obj_set_flex_align>:
{
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	4604      	mov	r4, r0
 800b620:	4616      	mov	r6, r2
 800b622:	461d      	mov	r5, r3
    lv_obj_set_style_flex_main_place(obj, main_place, 0);
 800b624:	2200      	movs	r2, #0
 800b626:	f7ff ffe1 	bl	800b5ec <lv_obj_set_style_flex_main_place>
    lv_obj_set_style_flex_cross_place(obj, cross_place, 0);
 800b62a:	4631      	mov	r1, r6
 800b62c:	4620      	mov	r0, r4
 800b62e:	2200      	movs	r2, #0
 800b630:	f7ff ffe4 	bl	800b5fc <lv_obj_set_style_flex_cross_place>
    lv_obj_set_style_flex_track_place(obj, track_place, 0);
 800b634:	4629      	mov	r1, r5
 800b636:	4620      	mov	r0, r4
 800b638:	2200      	movs	r2, #0
 800b63a:	f7ff ffe7 	bl	800b60c <lv_obj_set_style_flex_track_place>
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 800b63e:	4b04      	ldr	r3, [pc, #16]	; (800b650 <lv_obj_set_flex_align+0x34>)
 800b640:	4620      	mov	r0, r4
 800b642:	2200      	movs	r2, #0
 800b644:	8819      	ldrh	r1, [r3, #0]
}
 800b646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 800b64a:	f012 bdbf 	b.w	801e1cc <lv_obj_set_style_layout>
 800b64e:	bf00      	nop
 800b650:	24010cfe 	.word	0x24010cfe

0800b654 <lv_obj_set_style_flex_grow>:
{
 800b654:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_GROW, v, selector);
 800b656:	460a      	mov	r2, r1
 800b658:	4901      	ldr	r1, [pc, #4]	; (800b660 <lv_obj_set_style_flex_grow+0xc>)
 800b65a:	8809      	ldrh	r1, [r1, #0]
 800b65c:	f012 bbfe 	b.w	801de5c <lv_obj_set_local_style_prop>
 800b660:	24010cf4 	.word	0x24010cf4

0800b664 <grid_align>:
 * @param pos_array write the positions of the tracks here
 * @return the total size of the grid
 */
static lv_coord_t grid_align(lv_coord_t cont_size,  bool auto_size, uint8_t align, lv_coord_t gap, uint32_t track_num,
                             lv_coord_t * size_array, lv_coord_t * pos_array, bool reverse)
{
 800b664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b668:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b66a:	4605      	mov	r5, r0
 800b66c:	4618      	mov	r0, r3
 800b66e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800b672:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
    lv_coord_t grid_size = 0;
    uint32_t i;

    if(auto_size) {
 800b676:	b311      	cbz	r1, 800b6be <grid_align+0x5a>
        pos_array[0] = 0;
 800b678:	2200      	movs	r2, #0
 800b67a:	8022      	strh	r2, [r4, #0]

        }
    }

    /*Set the position of all tracks from the start position, gaps and track sizes*/
    for(i = 0; i < track_num - 1; i++) {
 800b67c:	46a4      	mov	ip, r4
 800b67e:	2100      	movs	r1, #0
 800b680:	f106 3eff 	add.w	lr, r6, #4294967295
 800b684:	458e      	cmp	lr, r1
 800b686:	d87d      	bhi.n	800b784 <grid_align+0x120>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
    }

    lv_coord_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
 800b688:	f106 4200 	add.w	r2, r6, #2147483648	; 0x80000000
 800b68c:	3a01      	subs	r2, #1
 800b68e:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 800b692:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800b696:	4410      	add	r0, r2
 800b698:	8822      	ldrh	r2, [r4, #0]
 800b69a:	1a80      	subs	r0, r0, r2
 800b69c:	b200      	sxth	r0, r0

    if(reverse) {
 800b69e:	b163      	cbz	r3, 800b6ba <grid_align+0x56>
        for(i = 0; i < track_num; i++) {
 800b6a0:	3c02      	subs	r4, #2
 800b6a2:	2200      	movs	r2, #0
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 800b6a4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 800b6a8:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
        for(i = 0; i < track_num; i++) {
 800b6ac:	3201      	adds	r2, #1
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 800b6ae:	1aeb      	subs	r3, r5, r3
        for(i = 0; i < track_num; i++) {
 800b6b0:	4296      	cmp	r6, r2
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 800b6b2:	eba3 0301 	sub.w	r3, r3, r1
 800b6b6:	8023      	strh	r3, [r4, #0]
        for(i = 0; i < track_num; i++) {
 800b6b8:	d1f4      	bne.n	800b6a4 <grid_align+0x40>

    }

    /*Return the full size of the grid*/
    return total_gird_size;
}
 800b6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(align == LV_GRID_ALIGN_SPACE_AROUND || align == LV_GRID_ALIGN_SPACE_BETWEEN || align == LV_GRID_ALIGN_SPACE_EVENLY) {
 800b6be:	f1a2 0c04 	sub.w	ip, r2, #4
 800b6c2:	fa5f fc8c 	uxtb.w	ip, ip
 800b6c6:	f1bc 0f02 	cmp.w	ip, #2
 800b6ca:	d803      	bhi.n	800b6d4 <grid_align+0x70>
            gap = 0;
 800b6cc:	2e01      	cmp	r6, #1
 800b6ce:	4608      	mov	r0, r1
 800b6d0:	bf08      	it	eq
 800b6d2:	2201      	moveq	r2, #1
        for(i = 0; i < track_num; i++) {
 800b6d4:	46be      	mov	lr, r7
 800b6d6:	eb07 0846 	add.w	r8, r7, r6, lsl #1
    lv_coord_t grid_size = 0;
 800b6da:	2100      	movs	r1, #0
            grid_size += size_array[i] + gap;
 800b6dc:	fa1f fc80 	uxth.w	ip, r0
        for(i = 0; i < track_num; i++) {
 800b6e0:	45f0      	cmp	r8, lr
            grid_size += size_array[i] + gap;
 800b6e2:	b289      	uxth	r1, r1
        for(i = 0; i < track_num; i++) {
 800b6e4:	d116      	bne.n	800b714 <grid_align+0xb0>
        switch(align) {
 800b6e6:	f04f 0e00 	mov.w	lr, #0
 800b6ea:	2a06      	cmp	r2, #6
 800b6ec:	d8c6      	bhi.n	800b67c <grid_align+0x18>
 800b6ee:	f20f 0808 	addw	r8, pc, #8
 800b6f2:	f858 f022 	ldr.w	pc, [r8, r2, lsl #2]
 800b6f6:	bf00      	nop
 800b6f8:	0800b721 	.word	0x0800b721
 800b6fc:	0800b727 	.word	0x0800b727
 800b700:	0800b737 	.word	0x0800b737
 800b704:	0800b67d 	.word	0x0800b67d
 800b708:	0800b76d 	.word	0x0800b76d
 800b70c:	0800b755 	.word	0x0800b755
 800b710:	0800b73f 	.word	0x0800b73f
            grid_size += size_array[i] + gap;
 800b714:	f93e 9b02 	ldrsh.w	r9, [lr], #2
 800b718:	4461      	add	r1, ip
 800b71a:	4449      	add	r1, r9
 800b71c:	b209      	sxth	r1, r1
        for(i = 0; i < track_num; i++) {
 800b71e:	e7df      	b.n	800b6e0 <grid_align+0x7c>
                pos_array[0] = 0;
 800b720:	f8a4 e000 	strh.w	lr, [r4]
                break;
 800b724:	e7aa      	b.n	800b67c <grid_align+0x18>
        grid_size -= gap;
 800b726:	eba1 010c 	sub.w	r1, r1, ip
                pos_array[0] = (cont_size - grid_size) / 2;
 800b72a:	b209      	sxth	r1, r1
 800b72c:	1a69      	subs	r1, r5, r1
 800b72e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
                pos_array[0] = gap / 2;
 800b732:	1049      	asrs	r1, r1, #1
 800b734:	e001      	b.n	800b73a <grid_align+0xd6>
                pos_array[0] = cont_size - grid_size;
 800b736:	1a69      	subs	r1, r5, r1
 800b738:	4461      	add	r1, ip
                pos_array[0] = gap / 2;
 800b73a:	8021      	strh	r1, [r4, #0]
                break;
 800b73c:	e79e      	b.n	800b67c <grid_align+0x18>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 800b73e:	1a69      	subs	r1, r5, r1
 800b740:	1e72      	subs	r2, r6, #1
                pos_array[0] = 0;
 800b742:	f8a4 e000 	strh.w	lr, [r4]
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 800b746:	4461      	add	r1, ip
 800b748:	b212      	sxth	r2, r2
 800b74a:	b209      	sxth	r1, r1
 800b74c:	fb91 f1f2 	sdiv	r1, r1, r2
 800b750:	b208      	sxth	r0, r1
                break;
 800b752:	e793      	b.n	800b67c <grid_align+0x18>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 800b754:	1a69      	subs	r1, r5, r1
 800b756:	b232      	sxth	r2, r6
 800b758:	4461      	add	r1, ip
 800b75a:	b209      	sxth	r1, r1
 800b75c:	fb91 f1f2 	sdiv	r1, r1, r2
                pos_array[0] = gap / 2;
 800b760:	f3c1 32c0 	ubfx	r2, r1, #15, #1
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 800b764:	b208      	sxth	r0, r1
                pos_array[0] = gap / 2;
 800b766:	fa02 f181 	sxtah	r1, r2, r1
 800b76a:	e7e2      	b.n	800b732 <grid_align+0xce>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num + 1);
 800b76c:	1a69      	subs	r1, r5, r1
 800b76e:	1c72      	adds	r2, r6, #1
 800b770:	448c      	add	ip, r1
 800b772:	b212      	sxth	r2, r2
 800b774:	fa0f fc8c 	sxth.w	ip, ip
 800b778:	fb9c fcf2 	sdiv	ip, ip, r2
 800b77c:	fa0f f08c 	sxth.w	r0, ip
                pos_array[0] = gap;
 800b780:	8020      	strh	r0, [r4, #0]
                break;
 800b782:	e77b      	b.n	800b67c <grid_align+0x18>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
 800b784:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 800b788:	3101      	adds	r1, #1
 800b78a:	f9bc 8000 	ldrsh.w	r8, [ip]
 800b78e:	4402      	add	r2, r0
 800b790:	4442      	add	r2, r8
 800b792:	f82c 2f02 	strh.w	r2, [ip, #2]!
    for(i = 0; i < track_num - 1; i++) {
 800b796:	e775      	b.n	800b684 <grid_align+0x20>

0800b798 <grid_update>:
{
 800b798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (const lv_coord_t *)v.ptr;
}

static inline const lv_coord_t * lv_obj_get_style_grid_column_dsc_array(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 800b79c:	f8df 9314 	ldr.w	r9, [pc, #788]	; 800bab4 <grid_update+0x31c>
 800b7a0:	b097      	sub	sp, #92	; 0x5c
 800b7a2:	4682      	mov	sl, r0
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	f8b9 2000 	ldrh.w	r2, [r9]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 800b7aa:	4dc3      	ldr	r5, [pc, #780]	; (800bab8 <grid_update+0x320>)
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 800b7ac:	f012 f99c 	bl	801dae8 <lv_obj_get_style_prop>
 800b7b0:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	882a      	ldrh	r2, [r5, #0]
 800b7b6:	4650      	mov	r0, sl
 800b7b8:	f012 f996 	bl	801dae8 <lv_obj_get_style_prop>
    if(col_templ == NULL || row_templ == NULL) return;
 800b7bc:	2c00      	cmp	r4, #0
 800b7be:	d06a      	beq.n	800b896 <grid_update+0xfe>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d068      	beq.n	800b896 <grid_update+0xfe>
    if(lv_obj_get_child(cont, 0) == NULL) {
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	f012 fd15 	bl	801e1f6 <lv_obj_get_child>
 800b7cc:	4601      	mov	r1, r0
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d164      	bne.n	800b89c <grid_update+0x104>
    memset(dst, 0x00, len);
 800b7d2:	221c      	movs	r2, #28
 800b7d4:	a80f      	add	r0, sp, #60	; 0x3c
 800b7d6:	f00e ffd7 	bl	801a788 <memset>
 800b7da:	220c      	movs	r2, #12
 800b7dc:	2100      	movs	r1, #0
 800b7de:	a80c      	add	r0, sp, #48	; 0x30
 800b7e0:	f00e ffd2 	bl	801a788 <memset>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800b7e4:	2232      	movs	r2, #50	; 0x32
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	4650      	mov	r0, sl
 800b7ea:	f012 f97d 	bl	801dae8 <lv_obj_get_style_prop>
 800b7ee:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800b7f0:	2212      	movs	r2, #18
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	4650      	mov	r0, sl
    lv_coord_t pad_left = lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt;
 800b7f6:	b2a5      	uxth	r5, r4
 800b7f8:	f012 f976 	bl	801dae8 <lv_obj_get_style_prop>
 800b7fc:	fa10 f484 	uxtah	r4, r0, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800b800:	2210      	movs	r2, #16
 800b802:	2100      	movs	r1, #0
 800b804:	4650      	mov	r0, sl
 800b806:	b2a4      	uxth	r4, r4
 800b808:	f012 f96e 	bl	801dae8 <lv_obj_get_style_prop>
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800b80c:	f8ba 3014 	ldrh.w	r3, [sl, #20]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 800b810:	4405      	add	r5, r0
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800b812:	4650      	mov	r0, sl
 800b814:	441c      	add	r4, r3
 800b816:	f011 fbd4 	bl	801cfc2 <lv_obj_get_scroll_x>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 800b81a:	b2ad      	uxth	r5, r5
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800b81c:	f8ba 3016 	ldrh.w	r3, [sl, #22]
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800b820:	b2a4      	uxth	r4, r4
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800b822:	441d      	add	r5, r3
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800b824:	1a24      	subs	r4, r4, r0
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800b826:	4650      	mov	r0, sl
 800b828:	b2ad      	uxth	r5, r5
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800b82a:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800b82e:	f011 fbce 	bl	801cfce <lv_obj_get_scroll_y>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 800b832:	2300      	movs	r3, #0
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800b834:	1a2d      	subs	r5, r5, r0
 800b836:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 800b83a:	9304      	str	r3, [sp, #16]
 800b83c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b840:	9904      	ldr	r1, [sp, #16]
 800b842:	685a      	ldr	r2, [r3, #4]
 800b844:	4291      	cmp	r1, r2
 800b846:	f0c0 8213 	bcc.w	800bc70 <grid_update+0x4d8>
    lv_mem_buf_release(calc->x);
 800b84a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b84c:	f006 fffe 	bl	801284c <lv_mem_buf_release>
    lv_mem_buf_release(calc->y);
 800b850:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b852:	f006 fffb 	bl	801284c <lv_mem_buf_release>
    lv_mem_buf_release(calc->w);
 800b856:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b858:	f006 fff8 	bl	801284c <lv_mem_buf_release>
    lv_mem_buf_release(calc->h);
 800b85c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b85e:	f006 fff5 	bl	801284c <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800b862:	2201      	movs	r2, #1
 800b864:	2100      	movs	r1, #0
 800b866:	4650      	mov	r0, sl
 800b868:	f012 f93e 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800b86c:	2204      	movs	r2, #4
    return (lv_coord_t)v.num;
 800b86e:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800b870:	2100      	movs	r1, #0
 800b872:	4650      	mov	r0, sl
 800b874:	f012 f938 	bl	801dae8 <lv_obj_get_style_prop>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 800b878:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 800b87c:	b200      	sxth	r0, r0
 800b87e:	429c      	cmp	r4, r3
 800b880:	d001      	beq.n	800b886 <grid_update+0xee>
 800b882:	4298      	cmp	r0, r3
 800b884:	d102      	bne.n	800b88c <grid_update+0xf4>
        lv_obj_refr_size(cont);
 800b886:	4650      	mov	r0, sl
 800b888:	f7f9 fcb4 	bl	80051f4 <lv_obj_refr_size>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800b88c:	2200      	movs	r2, #0
 800b88e:	212b      	movs	r1, #43	; 0x2b
 800b890:	4650      	mov	r0, sl
 800b892:	f7f8 ff57 	bl	8004744 <lv_event_send>
}
 800b896:	b017      	add	sp, #92	; 0x5c
 800b898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89c:	882a      	ldrh	r2, [r5, #0]
 800b89e:	2100      	movs	r1, #0
 800b8a0:	4650      	mov	r0, sl
 800b8a2:	f012 f921 	bl	801dae8 <lv_obj_get_style_prop>

static uint32_t count_tracks(const lv_coord_t * templ)
{
    uint32_t i;
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800b8a6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	f935 2010 	ldrsh.w	r2, [r5, r0, lsl #1]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	f040 80fb 	bne.w	800baae <grid_update+0x316>
    c->row_num = count_tracks(row_templ);
 800b8b8:	9014      	str	r0, [sp, #80]	; 0x50
    c->y = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 800b8ba:	0040      	lsls	r0, r0, #1
 800b8bc:	f006 ff7c 	bl	80127b8 <lv_mem_buf_get>
 800b8c0:	9010      	str	r0, [sp, #64]	; 0x40
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 800b8c2:	9814      	ldr	r0, [sp, #80]	; 0x50
    for(i = 0; i < c->row_num; i++) {
 800b8c4:	2400      	movs	r4, #0
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 800b8c6:	0040      	lsls	r0, r0, #1
 800b8c8:	f006 ff76 	bl	80127b8 <lv_mem_buf_get>
 800b8cc:	9012      	str	r0, [sp, #72]	; 0x48
    for(i = 0; i < c->row_num; i++) {
 800b8ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8d0:	429c      	cmp	r4, r3
 800b8d2:	f0c0 80f7 	bcc.w	800bac4 <grid_update+0x32c>
    lv_coord_t grid_h = 0;
 800b8d6:	2300      	movs	r3, #0
        if(IS_FR(x)) {
 800b8d8:	f641 709a 	movw	r0, #8090	; 0x1f9a
    uint32_t row_fr_cnt = 0;
 800b8dc:	461c      	mov	r4, r3
    for(i = 0; i < c->row_num; i++) {
 800b8de:	4619      	mov	r1, r3
 800b8e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
            grid_h += c->h[i];
 800b8e2:	b29e      	uxth	r6, r3
    for(i = 0; i < c->row_num; i++) {
 800b8e4:	4291      	cmp	r1, r2
 800b8e6:	f0c0 812f 	bcc.w	800bb48 <grid_update+0x3b0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	2214      	movs	r2, #20
 800b8ee:	4650      	mov	r0, sl
 800b8f0:	f012 f8fa 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800b8f4:	b207      	sxth	r7, r0
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 800b8f6:	4650      	mov	r0, sl
 800b8f8:	f010 fff2 	bl	801c8e0 <lv_obj_get_content_height>
 800b8fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8fe:	3b01      	subs	r3, #1
 800b900:	fb13 f307 	smulbb	r3, r3, r7
        if(IS_FR(x)) {
 800b904:	f641 779a 	movw	r7, #8090	; 0x1f9a
    lv_coord_t free_h = cont_h - grid_h;
 800b908:	441e      	add	r6, r3
    int32_t last_fr_x = 0;
 800b90a:	2300      	movs	r3, #0
    lv_coord_t free_h = cont_h - grid_h;
 800b90c:	1b81      	subs	r1, r0, r6
    int32_t last_fr_i = -1;
 800b90e:	f04f 36ff 	mov.w	r6, #4294967295
    for(i = 0; i < c->row_num; i++) {
 800b912:	4618      	mov	r0, r3
    if(free_h < 0) free_h = 0;
 800b914:	b209      	sxth	r1, r1
 800b916:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    for(i = 0; i < c->row_num; i++) {
 800b91a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b91c:	4290      	cmp	r0, r2
 800b91e:	f0c0 8129 	bcc.w	800bb74 <grid_update+0x3dc>
    if(last_fr_i >= 0) {
 800b922:	1c70      	adds	r0, r6, #1
 800b924:	d007      	beq.n	800b936 <grid_update+0x19e>
        c->h[last_fr_i] = free_h - ((free_h * (row_fr_cnt - last_fr_x)) / row_fr_cnt);
 800b926:	1ae3      	subs	r3, r4, r3
 800b928:	434b      	muls	r3, r1
 800b92a:	fbb3 f3f4 	udiv	r3, r3, r4
 800b92e:	1ac9      	subs	r1, r1, r3
 800b930:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b932:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 800b936:	f8b9 2000 	ldrh.w	r2, [r9]
 800b93a:	2100      	movs	r1, #0
 800b93c:	4650      	mov	r0, sl
 800b93e:	f012 f8d3 	bl	801dae8 <lv_obj_get_style_prop>
 800b942:	4605      	mov	r5, r0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800b944:	4650      	mov	r0, sl
 800b946:	f010 ffb5 	bl	801c8b4 <lv_obj_get_content_width>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800b94a:	f641 73ff 	movw	r3, #8191	; 0x1fff
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800b94e:	4681      	mov	r9, r0
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800b950:	2000      	movs	r0, #0
 800b952:	f935 2010 	ldrsh.w	r2, [r5, r0, lsl #1]
 800b956:	429a      	cmp	r2, r3
 800b958:	f040 811e 	bne.w	800bb98 <grid_update+0x400>
    c->col_num = count_tracks(col_templ);
 800b95c:	9013      	str	r0, [sp, #76]	; 0x4c
    c->x = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 800b95e:	0040      	lsls	r0, r0, #1
 800b960:	f006 ff2a 	bl	80127b8 <lv_mem_buf_get>
 800b964:	900f      	str	r0, [sp, #60]	; 0x3c
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 800b966:	9813      	ldr	r0, [sp, #76]	; 0x4c
    for(i = 0; i < c->col_num; i++) {
 800b968:	2400      	movs	r4, #0
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 800b96a:	0040      	lsls	r0, r0, #1
 800b96c:	f006 ff24 	bl	80127b8 <lv_mem_buf_get>
 800b970:	9011      	str	r0, [sp, #68]	; 0x44
    for(i = 0; i < c->col_num; i++) {
 800b972:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b974:	429c      	cmp	r4, r3
 800b976:	f0c0 8111 	bcc.w	800bb9c <grid_update+0x404>
    lv_coord_t grid_w = 0;
 800b97a:	2300      	movs	r3, #0
        if(IS_FR(x)) {
 800b97c:	f641 709a 	movw	r0, #8090	; 0x1f9a
    uint32_t col_fr_cnt = 0;
 800b980:	461c      	mov	r4, r3
    for(i = 0; i < c->col_num; i++) {
 800b982:	4619      	mov	r1, r3
 800b984:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            grid_w += c->w[i];
 800b986:	b29e      	uxth	r6, r3
    for(i = 0; i < c->col_num; i++) {
 800b988:	4291      	cmp	r1, r2
 800b98a:	f0c0 8149 	bcc.w	800bc20 <grid_update+0x488>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800b98e:	2215      	movs	r2, #21
 800b990:	2100      	movs	r1, #0
 800b992:	4650      	mov	r0, sl
        if(IS_FR(x)) {
 800b994:	f641 779a 	movw	r7, #8090	; 0x1f9a
 800b998:	f012 f8a6 	bl	801dae8 <lv_obj_get_style_prop>
    cont_w -= col_gap * (c->col_num - 1);
 800b99c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    int32_t last_fr_x = 0;
 800b99e:	2200      	movs	r2, #0
    cont_w -= col_gap * (c->col_num - 1);
 800b9a0:	3b01      	subs	r3, #1
    for(i = 0; i < c->col_num; i++) {
 800b9a2:	4611      	mov	r1, r2
    cont_w -= col_gap * (c->col_num - 1);
 800b9a4:	fb13 f300 	smulbb	r3, r3, r0
 800b9a8:	eba9 0303 	sub.w	r3, r9, r3
    lv_coord_t free_w = cont_w - grid_w;
 800b9ac:	1b9b      	subs	r3, r3, r6
    int32_t last_fr_i = -1;
 800b9ae:	f04f 36ff 	mov.w	r6, #4294967295
    if(free_w < 0) free_w = 0;
 800b9b2:	b21b      	sxth	r3, r3
 800b9b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    for(i = 0; i < c->col_num; i++) {
 800b9b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b9ba:	4281      	cmp	r1, r0
 800b9bc:	f0c0 8146 	bcc.w	800bc4c <grid_update+0x4b4>
    if(last_fr_i >= 0) {
 800b9c0:	1c71      	adds	r1, r6, #1
 800b9c2:	d007      	beq.n	800b9d4 <grid_update+0x23c>
        c->w[last_fr_i] = free_w - ((free_w * (col_fr_cnt - last_fr_x)) / col_fr_cnt);
 800b9c4:	1aa2      	subs	r2, r4, r2
 800b9c6:	435a      	muls	r2, r3
 800b9c8:	fbb2 f2f4 	udiv	r2, r2, r4
 800b9cc:	1a9b      	subs	r3, r3, r2
 800b9ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b9d0:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
 800b9d4:	2215      	movs	r2, #21
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	4650      	mov	r0, sl
 800b9da:	f012 f885 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800b9de:	2214      	movs	r2, #20
    return (lv_coord_t)v.num;
 800b9e0:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	4650      	mov	r0, sl
 800b9e8:	f012 f87e 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b9ec:	2216      	movs	r2, #22
    return (lv_coord_t)v.num;
 800b9ee:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	4650      	mov	r0, sl
 800b9f4:	f012 f878 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800b9f8:	2201      	movs	r2, #1
    return (lv_base_dir_t)v.num;
 800b9fa:	b2c7      	uxtb	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	4650      	mov	r0, sl
    bool rev = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL ? true : false;
 800ba00:	1e7b      	subs	r3, r7, #1
 800ba02:	425f      	negs	r7, r3
 800ba04:	415f      	adcs	r7, r3
 800ba06:	f012 f86f 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800ba0a:	2204      	movs	r2, #4
    return (lv_coord_t)v.num;
 800ba0c:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800ba0e:	2100      	movs	r1, #0
 800ba10:	4650      	mov	r0, sl
 800ba12:	f012 f869 	bl	801dae8 <lv_obj_get_style_prop>
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 800ba16:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 800ba1a:	fa0f f880 	sxth.w	r8, r0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800ba1e:	4650      	mov	r0, sl
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 800ba20:	429c      	cmp	r4, r3
 800ba22:	bf09      	itett	eq
 800ba24:	f89a 4023 	ldrbeq.w	r4, [sl, #35]	; 0x23
 800ba28:	2400      	movne	r4, #0
 800ba2a:	f084 0404 	eoreq.w	r4, r4, #4
 800ba2e:	f3c4 0480 	ubfxeq	r4, r4, #2, #1
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800ba32:	f010 ff3f 	bl	801c8b4 <lv_obj_get_content_width>
    return (lv_grid_align_t)v.num;
}

static inline lv_grid_align_t lv_obj_get_style_grid_column_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_ALIGN);
 800ba36:	4b21      	ldr	r3, [pc, #132]	; (800babc <grid_update+0x324>)
 800ba38:	4605      	mov	r5, r0
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	4650      	mov	r0, sl
 800ba3e:	881a      	ldrh	r2, [r3, #0]
 800ba40:	f012 f852 	bl	801dae8 <lv_obj_get_style_prop>
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w,
 800ba44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba46:	4621      	mov	r1, r4
 800ba48:	b2c2      	uxtb	r2, r0
 800ba4a:	9302      	str	r3, [sp, #8]
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba50:	9703      	str	r7, [sp, #12]
 800ba52:	9301      	str	r3, [sp, #4]
 800ba54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	464b      	mov	r3, r9
 800ba5a:	f7ff fe03 	bl	800b664 <grid_align>
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 800ba5e:	f242 73d1 	movw	r3, #10193	; 0x27d1
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w,
 800ba62:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 800ba66:	4650      	mov	r0, sl
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 800ba68:	4598      	cmp	r8, r3
 800ba6a:	bf09      	itett	eq
 800ba6c:	f89a 4023 	ldrbeq.w	r4, [sl, #35]	; 0x23
 800ba70:	2400      	movne	r4, #0
 800ba72:	f084 0402 	eoreq.w	r4, r4, #2
 800ba76:	f3c4 0440 	ubfxeq	r4, r4, #1, #1
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 800ba7a:	f010 ff31 	bl	801c8e0 <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_ALIGN);
 800ba7e:	4b10      	ldr	r3, [pc, #64]	; (800bac0 <grid_update+0x328>)
 800ba80:	4605      	mov	r5, r0
 800ba82:	2100      	movs	r1, #0
 800ba84:	4650      	mov	r0, sl
 800ba86:	881a      	ldrh	r2, [r3, #0]
 800ba88:	f012 f82e 	bl	801dae8 <lv_obj_get_style_prop>
    calc_out->grid_h = grid_align(cont_h, auto_h, get_grid_row_align(cont), row_gap, calc_out->row_num, calc_out->h,
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	b2c2      	uxtb	r2, r0
 800ba90:	4621      	mov	r1, r4
 800ba92:	9303      	str	r3, [sp, #12]
 800ba94:	4628      	mov	r0, r5
 800ba96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba98:	9302      	str	r3, [sp, #8]
 800ba9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba9c:	9301      	str	r3, [sp, #4]
 800ba9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	4633      	mov	r3, r6
 800baa4:	f7ff fdde 	bl	800b664 <grid_align>
 800baa8:	f8ad 0056 	strh.w	r0, [sp, #86]	; 0x56
 800baac:	e695      	b.n	800b7da <grid_update+0x42>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800baae:	3001      	adds	r0, #1
 800bab0:	e6fd      	b.n	800b8ae <grid_update+0x116>
 800bab2:	bf00      	nop
 800bab4:	24010d12 	.word	0x24010d12
 800bab8:	24010d0e 	.word	0x24010d0e
 800babc:	24010d10 	.word	0x24010d10
 800bac0:	24010d0c 	.word	0x24010d0c
        if(IS_CONTENT(row_templ[i])) {
 800bac4:	f935 2014 	ldrsh.w	r2, [r5, r4, lsl #1]
 800bac8:	f641 739a 	movw	r3, #8090	; 0x1f9a
 800bacc:	429a      	cmp	r2, r3
 800bace:	d139      	bne.n	800bb44 <grid_update+0x3ac>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800bad0:	f04f 0800 	mov.w	r8, #0
        lv_coord_t size = LV_COORD_MIN;
 800bad4:	4eb5      	ldr	r6, [pc, #724]	; (800bdac <grid_update+0x614>)
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_pos(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 800bad6:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 800bdb0 <grid_update+0x618>
 800bada:	e026      	b.n	800bb2a <grid_update+0x392>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800badc:	4641      	mov	r1, r8
 800bade:	4650      	mov	r0, sl
 800bae0:	f012 fb89 	bl	801e1f6 <lv_obj_get_child>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800bae4:	49b3      	ldr	r1, [pc, #716]	; (800bdb4 <grid_update+0x61c>)
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800bae6:	4607      	mov	r7, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800bae8:	f00f ffca 	bl	801ba80 <lv_obj_has_flag_any>
 800baec:	4601      	mov	r1, r0
 800baee:	b9d0      	cbnz	r0, 800bb26 <grid_update+0x38e>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_span(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 800baf0:	4bb1      	ldr	r3, [pc, #708]	; (800bdb8 <grid_update+0x620>)
 800baf2:	9004      	str	r0, [sp, #16]
 800baf4:	4638      	mov	r0, r7
 800baf6:	881a      	ldrh	r2, [r3, #0]
 800baf8:	f011 fff6 	bl	801dae8 <lv_obj_get_style_prop>
                if(row_span != 1) continue;
 800bafc:	9904      	ldr	r1, [sp, #16]
 800bafe:	b2c0      	uxtb	r0, r0
 800bb00:	2801      	cmp	r0, #1
 800bb02:	d110      	bne.n	800bb26 <grid_update+0x38e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 800bb04:	f8bb 2000 	ldrh.w	r2, [fp]
 800bb08:	4638      	mov	r0, r7
 800bb0a:	f011 ffed 	bl	801dae8 <lv_obj_get_style_prop>
                uint32_t row_pos = get_row_pos(item);
 800bb0e:	b2c0      	uxtb	r0, r0
                if(row_pos != i) continue;
 800bb10:	4284      	cmp	r4, r0
 800bb12:	d108      	bne.n	800bb26 <grid_update+0x38e>
                size = LV_MAX(size, lv_obj_get_height(item));
 800bb14:	4638      	mov	r0, r7
 800bb16:	f010 fec7 	bl	801c8a8 <lv_obj_get_height>
 800bb1a:	42b0      	cmp	r0, r6
 800bb1c:	db03      	blt.n	800bb26 <grid_update+0x38e>
 800bb1e:	4638      	mov	r0, r7
 800bb20:	f010 fec2 	bl	801c8a8 <lv_obj_get_height>
 800bb24:	4606      	mov	r6, r0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800bb26:	f108 0801 	add.w	r8, r8, #1
 800bb2a:	4650      	mov	r0, sl
 800bb2c:	f012 fb72 	bl	801e214 <lv_obj_get_child_cnt>
 800bb30:	4580      	cmp	r8, r0
 800bb32:	d3d3      	bcc.n	800badc <grid_update+0x344>
            if(size >= 0) c->h[i] = size;
 800bb34:	2e00      	cmp	r6, #0
 800bb36:	9b12      	ldr	r3, [sp, #72]	; 0x48
            else c->h[i] = 0;
 800bb38:	bfb6      	itet	lt
 800bb3a:	2200      	movlt	r2, #0
            if(size >= 0) c->h[i] = size;
 800bb3c:	f823 6014 	strhge.w	r6, [r3, r4, lsl #1]
            else c->h[i] = 0;
 800bb40:	f823 2014 	strhlt.w	r2, [r3, r4, lsl #1]
    for(i = 0; i < c->row_num; i++) {
 800bb44:	3401      	adds	r4, #1
 800bb46:	e6c2      	b.n	800b8ce <grid_update+0x136>
        lv_coord_t x = row_templ[i];
 800bb48:	f935 2011 	ldrsh.w	r2, [r5, r1, lsl #1]
        if(IS_FR(x)) {
 800bb4c:	4282      	cmp	r2, r0
 800bb4e:	dd05      	ble.n	800bb5c <grid_update+0x3c4>
            row_fr_cnt += GET_FR(x);
 800bb50:	f5a4 54fc 	sub.w	r4, r4, #8064	; 0x1f80
 800bb54:	3c1b      	subs	r4, #27
 800bb56:	4414      	add	r4, r2
    for(i = 0; i < c->row_num; i++) {
 800bb58:	3101      	adds	r1, #1
 800bb5a:	e6c1      	b.n	800b8e0 <grid_update+0x148>
            grid_h += c->h[i];
 800bb5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb5e:	bf0d      	iteet	eq
 800bb60:	f833 3011 	ldrheq.w	r3, [r3, r1, lsl #1]
            c->h[i] = x;
 800bb64:	f823 2011 	strhne.w	r2, [r3, r1, lsl #1]
            grid_h += x;
 800bb68:	1992      	addne	r2, r2, r6
            grid_h += c->h[i];
 800bb6a:	199b      	addeq	r3, r3, r6
            grid_h += x;
 800bb6c:	bf14      	ite	ne
 800bb6e:	b213      	sxthne	r3, r2
            grid_h += c->h[i];
 800bb70:	b21b      	sxtheq	r3, r3
            grid_h += x;
 800bb72:	e7f1      	b.n	800bb58 <grid_update+0x3c0>
        lv_coord_t x = row_templ[i];
 800bb74:	f935 2010 	ldrsh.w	r2, [r5, r0, lsl #1]
        if(IS_FR(x)) {
 800bb78:	42ba      	cmp	r2, r7
 800bb7a:	dd0b      	ble.n	800bb94 <grid_update+0x3fc>
            lv_coord_t f = GET_FR(x);
 800bb7c:	f5a2 53fc 	sub.w	r3, r2, #8064	; 0x1f80
            c->h[i] = (free_h * f) / row_fr_cnt;
 800bb80:	9a12      	ldr	r2, [sp, #72]	; 0x48
            lv_coord_t f = GET_FR(x);
 800bb82:	3b1b      	subs	r3, #27
            c->h[i] = (free_h * f) / row_fr_cnt;
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	fb03 f601 	mul.w	r6, r3, r1
 800bb8a:	fbb6 f6f4 	udiv	r6, r6, r4
 800bb8e:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
            last_fr_i = i;
 800bb92:	4606      	mov	r6, r0
    for(i = 0; i < c->row_num; i++) {
 800bb94:	3001      	adds	r0, #1
 800bb96:	e6c0      	b.n	800b91a <grid_update+0x182>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800bb98:	3001      	adds	r0, #1
 800bb9a:	e6da      	b.n	800b952 <grid_update+0x1ba>
        if(IS_CONTENT(col_templ[i])) {
 800bb9c:	f935 2014 	ldrsh.w	r2, [r5, r4, lsl #1]
 800bba0:	f641 739a 	movw	r3, #8090	; 0x1f9a
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d139      	bne.n	800bc1c <grid_update+0x484>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800bba8:	f04f 0800 	mov.w	r8, #0
        lv_coord_t size = LV_COORD_MIN;
 800bbac:	4e7f      	ldr	r6, [pc, #508]	; (800bdac <grid_update+0x614>)
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 800bbae:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800bdbc <grid_update+0x624>
 800bbb2:	e026      	b.n	800bc02 <grid_update+0x46a>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800bbb4:	4641      	mov	r1, r8
 800bbb6:	4650      	mov	r0, sl
 800bbb8:	f012 fb1d 	bl	801e1f6 <lv_obj_get_child>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800bbbc:	497d      	ldr	r1, [pc, #500]	; (800bdb4 <grid_update+0x61c>)
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800bbbe:	4607      	mov	r7, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800bbc0:	f00f ff5e 	bl	801ba80 <lv_obj_has_flag_any>
 800bbc4:	4601      	mov	r1, r0
 800bbc6:	b9d0      	cbnz	r0, 800bbfe <grid_update+0x466>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 800bbc8:	4b7d      	ldr	r3, [pc, #500]	; (800bdc0 <grid_update+0x628>)
 800bbca:	9004      	str	r0, [sp, #16]
 800bbcc:	4638      	mov	r0, r7
 800bbce:	881a      	ldrh	r2, [r3, #0]
 800bbd0:	f011 ff8a 	bl	801dae8 <lv_obj_get_style_prop>
                if(col_span != 1) continue;
 800bbd4:	9904      	ldr	r1, [sp, #16]
 800bbd6:	b2c0      	uxtb	r0, r0
 800bbd8:	2801      	cmp	r0, #1
 800bbda:	d110      	bne.n	800bbfe <grid_update+0x466>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 800bbdc:	f8bb 2000 	ldrh.w	r2, [fp]
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	f011 ff81 	bl	801dae8 <lv_obj_get_style_prop>
                uint32_t col_pos = get_col_pos(item);
 800bbe6:	b2c0      	uxtb	r0, r0
                if(col_pos != i) continue;
 800bbe8:	4284      	cmp	r4, r0
 800bbea:	d108      	bne.n	800bbfe <grid_update+0x466>
                size = LV_MAX(size, lv_obj_get_width(item));
 800bbec:	4638      	mov	r0, r7
 800bbee:	f010 fe55 	bl	801c89c <lv_obj_get_width>
 800bbf2:	42b0      	cmp	r0, r6
 800bbf4:	db03      	blt.n	800bbfe <grid_update+0x466>
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	f010 fe50 	bl	801c89c <lv_obj_get_width>
 800bbfc:	4606      	mov	r6, r0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800bbfe:	f108 0801 	add.w	r8, r8, #1
 800bc02:	4650      	mov	r0, sl
 800bc04:	f012 fb06 	bl	801e214 <lv_obj_get_child_cnt>
 800bc08:	4580      	cmp	r8, r0
 800bc0a:	d3d3      	bcc.n	800bbb4 <grid_update+0x41c>
            if(size >= 0) c->w[i] = size;
 800bc0c:	2e00      	cmp	r6, #0
 800bc0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
            else c->w[i] = 0;
 800bc10:	bfb6      	itet	lt
 800bc12:	2200      	movlt	r2, #0
            if(size >= 0) c->w[i] = size;
 800bc14:	f823 6014 	strhge.w	r6, [r3, r4, lsl #1]
            else c->w[i] = 0;
 800bc18:	f823 2014 	strhlt.w	r2, [r3, r4, lsl #1]
    for(i = 0; i < c->col_num; i++) {
 800bc1c:	3401      	adds	r4, #1
 800bc1e:	e6a8      	b.n	800b972 <grid_update+0x1da>
        lv_coord_t x = col_templ[i];
 800bc20:	f935 2011 	ldrsh.w	r2, [r5, r1, lsl #1]
        if(IS_FR(x)) {
 800bc24:	4282      	cmp	r2, r0
 800bc26:	dd05      	ble.n	800bc34 <grid_update+0x49c>
            col_fr_cnt += GET_FR(x);
 800bc28:	f5a4 54fc 	sub.w	r4, r4, #8064	; 0x1f80
 800bc2c:	3c1b      	subs	r4, #27
 800bc2e:	4414      	add	r4, r2
    for(i = 0; i < c->col_num; i++) {
 800bc30:	3101      	adds	r1, #1
 800bc32:	e6a7      	b.n	800b984 <grid_update+0x1ec>
            grid_w += c->w[i];
 800bc34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc36:	bf0d      	iteet	eq
 800bc38:	f833 3011 	ldrheq.w	r3, [r3, r1, lsl #1]
            c->w[i] = x;
 800bc3c:	f823 2011 	strhne.w	r2, [r3, r1, lsl #1]
            grid_w += x;
 800bc40:	1992      	addne	r2, r2, r6
            grid_w += c->w[i];
 800bc42:	199b      	addeq	r3, r3, r6
            grid_w += x;
 800bc44:	bf14      	ite	ne
 800bc46:	b213      	sxthne	r3, r2
            grid_w += c->w[i];
 800bc48:	b21b      	sxtheq	r3, r3
            grid_w += x;
 800bc4a:	e7f1      	b.n	800bc30 <grid_update+0x498>
        lv_coord_t x = col_templ[i];
 800bc4c:	f935 0011 	ldrsh.w	r0, [r5, r1, lsl #1]
        if(IS_FR(x)) {
 800bc50:	42b8      	cmp	r0, r7
 800bc52:	dd0b      	ble.n	800bc6c <grid_update+0x4d4>
            lv_coord_t f = GET_FR(x);
 800bc54:	f5a0 52fc 	sub.w	r2, r0, #8064	; 0x1f80
            c->w[i] = (free_w * f) / col_fr_cnt;
 800bc58:	9e11      	ldr	r6, [sp, #68]	; 0x44
            lv_coord_t f = GET_FR(x);
 800bc5a:	3a1b      	subs	r2, #27
            c->w[i] = (free_w * f) / col_fr_cnt;
 800bc5c:	b292      	uxth	r2, r2
 800bc5e:	fb02 f003 	mul.w	r0, r2, r3
 800bc62:	fbb0 f0f4 	udiv	r0, r0, r4
 800bc66:	f826 0011 	strh.w	r0, [r6, r1, lsl #1]
            last_fr_i = i;
 800bc6a:	460e      	mov	r6, r1
    for(i = 0; i < c->col_num; i++) {
 800bc6c:	3101      	adds	r1, #1
 800bc6e:	e6a3      	b.n	800b9b8 <grid_update+0x220>
        lv_obj_t * item = cont->spec_attr->children[i];
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	9a04      	ldr	r2, [sp, #16]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 800bc74:	494f      	ldr	r1, [pc, #316]	; (800bdb4 <grid_update+0x61c>)
        lv_obj_t * item = cont->spec_attr->children[i];
 800bc76:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f00f ff00 	bl	801ba80 <lv_obj_has_flag_any>
 800bc80:	4605      	mov	r5, r0
 800bc82:	2800      	cmp	r0, #0
 800bc84:	f040 8165 	bne.w	800bf52 <grid_update+0x7ba>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 800bc88:	4b4d      	ldr	r3, [pc, #308]	; (800bdc0 <grid_update+0x628>)
 800bc8a:	4601      	mov	r1, r0
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	881a      	ldrh	r2, [r3, #0]
 800bc90:	f011 ff2a 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 800bc94:	4b48      	ldr	r3, [pc, #288]	; (800bdb8 <grid_update+0x620>)
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 800bc96:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 800bc98:	4629      	mov	r1, r5
 800bc9a:	881a      	ldrh	r2, [r3, #0]
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f011 ff23 	bl	801dae8 <lv_obj_get_style_prop>
    if(row_span == 0 || col_span == 0) return;
 800bca2:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 800bca6:	f000 8154 	beq.w	800bf52 <grid_update+0x7ba>
 800bcaa:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800bcae:	f000 8150 	beq.w	800bf52 <grid_update+0x7ba>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 800bcb2:	4b42      	ldr	r3, [pc, #264]	; (800bdbc <grid_update+0x624>)
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	881a      	ldrh	r2, [r3, #0]
 800bcba:	f011 ff15 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 800bcbe:	4b3c      	ldr	r3, [pc, #240]	; (800bdb0 <grid_update+0x618>)
    uint32_t col_pos = get_col_pos(item);
 800bcc0:	fa5f fb80 	uxtb.w	fp, r0
 800bcc4:	4629      	mov	r1, r5
 800bcc6:	881a      	ldrh	r2, [r3, #0]
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f011 ff0d 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_x_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_X_ALIGN);
 800bcce:	4b3d      	ldr	r3, [pc, #244]	; (800bdc4 <grid_update+0x62c>)
    uint32_t row_pos = get_row_pos(item);
 800bcd0:	fa5f f980 	uxtb.w	r9, r0
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	881a      	ldrh	r2, [r3, #0]
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f011 ff05 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_y_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_Y_ALIGN);
 800bcde:	4b3a      	ldr	r3, [pc, #232]	; (800bdc8 <grid_update+0x630>)
 800bce0:	4629      	mov	r1, r5
    return lv_obj_get_style_grid_cell_x_align(obj, 0);
 800bce2:	fa5f f880 	uxtb.w	r8, r0
 800bce6:	881a      	ldrh	r2, [r3, #0]
 800bce8:	4620      	mov	r0, r4
 800bcea:	f011 fefd 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800bcee:	445f      	add	r7, fp
    return lv_obj_get_style_grid_cell_y_align(obj, 0);
 800bcf0:	b2c3      	uxtb	r3, r0
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800bcf2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    lv_coord_t col_x1 = c->x[col_pos];
 800bcf6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800bcf8:	444e      	add	r6, r9
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800bcfa:	4417      	add	r7, r2
    return lv_obj_get_style_grid_cell_y_align(obj, 0);
 800bcfc:	9306      	str	r3, [sp, #24]
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800bcfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800bd00:	4416      	add	r6, r2
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800bd02:	f831 0017 	ldrh.w	r0, [r1, r7, lsl #1]
 800bd06:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
    lv_coord_t col_w = col_x2 - col_x1;
 800bd0a:	f831 101b 	ldrh.w	r1, [r1, fp, lsl #1]
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800bd0e:	4403      	add	r3, r0
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800bd10:	9a12      	ldr	r2, [sp, #72]	; 0x48
    lv_coord_t col_w = col_x2 - col_x1;
 800bd12:	1a5b      	subs	r3, r3, r1
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800bd14:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
    lv_coord_t col_w = col_x2 - col_x1;
 800bd18:	b299      	uxth	r1, r3
 800bd1a:	b21b      	sxth	r3, r3
 800bd1c:	9108      	str	r1, [sp, #32]
    lv_coord_t row_y1 = c->y[row_pos];
 800bd1e:	9910      	ldr	r1, [sp, #64]	; 0x40
    lv_coord_t col_w = col_x2 - col_x1;
 800bd20:	9305      	str	r3, [sp, #20]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800bd22:	f831 0016 	ldrh.w	r0, [r1, r6, lsl #1]
    lv_coord_t row_h = row_y2 - row_y1;
 800bd26:	f831 1019 	ldrh.w	r1, [r1, r9, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800bd2a:	4402      	add	r2, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800bd2c:	4620      	mov	r0, r4
    lv_coord_t row_h = row_y2 - row_y1;
 800bd2e:	1a52      	subs	r2, r2, r1
 800bd30:	4629      	mov	r1, r5
 800bd32:	b293      	uxth	r3, r2
 800bd34:	9309      	str	r3, [sp, #36]	; 0x24
 800bd36:	b213      	sxth	r3, r2
 800bd38:	2216      	movs	r2, #22
 800bd3a:	9307      	str	r3, [sp, #28]
 800bd3c:	f011 fed4 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800bd40:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(item, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800bd42:	9b05      	ldr	r3, [sp, #20]
 800bd44:	2801      	cmp	r0, #1
 800bd46:	d107      	bne.n	800bd58 <grid_update+0x5c0>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 800bd48:	f1b8 0f00 	cmp.w	r8, #0
 800bd4c:	d02a      	beq.n	800bda4 <grid_update+0x60c>
        else if(col_align == LV_GRID_ALIGN_END) col_align = LV_GRID_ALIGN_START;
 800bd4e:	f1b8 0f02 	cmp.w	r8, #2
 800bd52:	bf08      	it	eq
 800bd54:	f04f 0800 	moveq.w	r8, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bd58:	8b27      	ldrh	r7, [r4, #24]
    switch(col_align) {
 800bd5a:	f1b8 0f02 	cmp.w	r8, #2
 800bd5e:	8aa2      	ldrh	r2, [r4, #20]
 800bd60:	f107 0701 	add.w	r7, r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bd64:	8b66      	ldrh	r6, [r4, #26]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bd66:	eba7 0702 	sub.w	r7, r7, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bd6a:	f106 0601 	add.w	r6, r6, #1
 800bd6e:	8ae2      	ldrh	r2, [r4, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bd70:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bd72:	eba6 0602 	sub.w	r6, r6, r2
            x = c->x[col_pos];
 800bd76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd78:	f932 101b 	ldrsh.w	r1, [r2, fp, lsl #1]
 800bd7c:	b236      	sxth	r6, r6
            x = c->x[col_pos] + (col_w - item_w) / 2;
 800bd7e:	f832 201b 	ldrh.w	r2, [r2, fp, lsl #1]
            x = c->x[col_pos];
 800bd82:	9105      	str	r1, [sp, #20]
    switch(col_align) {
 800bd84:	d022      	beq.n	800bdcc <grid_update+0x634>
 800bd86:	f1b8 0f03 	cmp.w	r8, #3
 800bd8a:	d02b      	beq.n	800bde4 <grid_update+0x64c>
 800bd8c:	f1b8 0f01 	cmp.w	r8, #1
 800bd90:	d106      	bne.n	800bda0 <grid_update+0x608>
            x = c->x[col_pos] + (col_w - item_w) / 2;
 800bd92:	1bdb      	subs	r3, r3, r7
 800bd94:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800bd98:	eb02 0263 	add.w	r2, r2, r3, asr #1
 800bd9c:	b213      	sxth	r3, r2
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 800bd9e:	9305      	str	r3, [sp, #20]
    switch(col_align) {
 800bda0:	2300      	movs	r3, #0
 800bda2:	e021      	b.n	800bde8 <grid_update+0x650>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 800bda4:	f04f 0802 	mov.w	r8, #2
 800bda8:	e7d6      	b.n	800bd58 <grid_update+0x5c0>
 800bdaa:	bf00      	nop
 800bdac:	ffffe001 	.word	0xffffe001
 800bdb0:	24010d04 	.word	0x24010d04
 800bdb4:	00060001 	.word	0x00060001
 800bdb8:	24010d02 	.word	0x24010d02
 800bdbc:	24010d0a 	.word	0x24010d0a
 800bdc0:	24010d08 	.word	0x24010d08
 800bdc4:	24010d06 	.word	0x24010d06
 800bdc8:	24010d00 	.word	0x24010d00
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 800bdcc:	9b08      	ldr	r3, [sp, #32]
 800bdce:	4620      	mov	r0, r4
 800bdd0:	441a      	add	r2, r3
 800bdd2:	fa1f f882 	uxth.w	r8, r2
 800bdd6:	f010 fd61 	bl	801c89c <lv_obj_get_width>
 800bdda:	eba8 0800 	sub.w	r8, r8, r0
 800bdde:	fa0f f388 	sxth.w	r3, r8
 800bde2:	e7dc      	b.n	800bd9e <grid_update+0x606>
            item_w = col_w;
 800bde4:	461f      	mov	r7, r3
    switch(col_align) {
 800bde6:	2301      	movs	r3, #1
            item->w_layout = 0;
 800bde8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800bdec:	f363 0282 	bfi	r2, r3, #2, #1
 800bdf0:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
    switch(row_align) {
 800bdf4:	9a06      	ldr	r2, [sp, #24]
            y = c->y[row_pos];
 800bdf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    switch(row_align) {
 800bdf8:	2a02      	cmp	r2, #2
            y = c->y[row_pos];
 800bdfa:	f933 8019 	ldrsh.w	r8, [r3, r9, lsl #1]
            y = c->y[row_pos] + (row_h - item_h) / 2;
 800bdfe:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
    switch(row_align) {
 800be02:	f000 80a9 	beq.w	800bf58 <grid_update+0x7c0>
 800be06:	2a03      	cmp	r2, #3
 800be08:	f000 80b2 	beq.w	800bf70 <grid_update+0x7d8>
 800be0c:	2a01      	cmp	r2, #1
 800be0e:	d107      	bne.n	800be20 <grid_update+0x688>
            y = c->y[row_pos] + (row_h - item_h) / 2;
 800be10:	9a07      	ldr	r2, [sp, #28]
 800be12:	1b92      	subs	r2, r2, r6
 800be14:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800be18:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800be1c:	fa0f f883 	sxth.w	r8, r3
            item->h_layout = 0;
 800be20:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 800be24:	4620      	mov	r0, r4
            item->h_layout = 0;
 800be26:	f365 0341 	bfi	r3, r5, #1, #1
 800be2a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 800be2e:	f010 fd35 	bl	801c89c <lv_obj_get_width>
 800be32:	42b8      	cmp	r0, r7
 800be34:	f000 809f 	beq.w	800bf76 <grid_update+0x7de>
    dest->x1 = src->x1;
 800be38:	8aa3      	ldrh	r3, [r4, #20]
        lv_area_copy(&old_coords, &item->coords);
 800be3a:	f104 0514 	add.w	r5, r4, #20
        lv_obj_invalidate(item);
 800be3e:	4620      	mov	r0, r4
 800be40:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    dest->y1 = src->y1;
 800be44:	8ae3      	ldrh	r3, [r4, #22]
 800be46:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    dest->x2 = src->x2;
 800be4a:	8b23      	ldrh	r3, [r4, #24]
 800be4c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    dest->y2 = src->y2;
 800be50:	8b63      	ldrh	r3, [r4, #26]
 800be52:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800be56:	f010 ff21 	bl	801cc9c <lv_obj_invalidate>
        lv_area_set_width(&item->coords, item_w);
 800be5a:	4639      	mov	r1, r7
 800be5c:	4628      	mov	r0, r5
 800be5e:	f018 fa04 	bl	802426a <lv_area_set_width>
        lv_area_set_height(&item->coords, item_h);
 800be62:	4631      	mov	r1, r6
 800be64:	4628      	mov	r0, r5
 800be66:	f018 fa05 	bl	8024274 <lv_area_set_height>
        lv_obj_invalidate(item);
 800be6a:	4620      	mov	r0, r4
 800be6c:	f010 ff16 	bl	801cc9c <lv_obj_invalidate>
        lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 800be70:	aa0a      	add	r2, sp, #40	; 0x28
 800be72:	2129      	movs	r1, #41	; 0x29
 800be74:	4620      	mov	r0, r4
 800be76:	f7f8 fc65 	bl	8004744 <lv_event_send>
        lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 800be7a:	4620      	mov	r0, r4
 800be7c:	f012 f9b8 	bl	801e1f0 <lv_obj_get_parent>
 800be80:	4622      	mov	r2, r4
 800be82:	2122      	movs	r1, #34	; 0x22
 800be84:	f7f8 fc5e 	bl	8004744 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800be88:	226a      	movs	r2, #106	; 0x6a
 800be8a:	2100      	movs	r1, #0
 800be8c:	4620      	mov	r0, r4
 800be8e:	f011 fe2b 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800be92:	226b      	movs	r2, #107	; 0x6b
 800be94:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 800be96:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800be98:	4620      	mov	r0, r4
 800be9a:	f011 fe25 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800be9e:	b207      	sxth	r7, r0
    lv_coord_t w = lv_obj_get_width(item);
 800bea0:	4620      	mov	r0, r4
 800bea2:	f010 fcfb 	bl	801c89c <lv_obj_get_width>
 800bea6:	4605      	mov	r5, r0
    lv_coord_t h = lv_obj_get_height(item);
 800bea8:	4620      	mov	r0, r4
 800beaa:	f010 fcfd 	bl	801c8a8 <lv_obj_get_height>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800beae:	f406 43c0 	and.w	r3, r6, #24576	; 0x6000
 800beb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beb6:	d10e      	bne.n	800bed6 <grid_update+0x73e>
 800beb8:	f426 43c0 	bic.w	r3, r6, #24576	; 0x6000
 800bebc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bec0:	dc09      	bgt.n	800bed6 <grid_update+0x73e>
 800bec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bec6:	bfc8      	it	gt
 800bec8:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 800becc:	435d      	muls	r5, r3
 800bece:	2364      	movs	r3, #100	; 0x64
 800bed0:	fb95 f5f3 	sdiv	r5, r5, r3
 800bed4:	b22e      	sxth	r6, r5
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800bed6:	f407 43c0 	and.w	r3, r7, #24576	; 0x6000
 800beda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bede:	d10e      	bne.n	800befe <grid_update+0x766>
 800bee0:	f427 43c0 	bic.w	r3, r7, #24576	; 0x6000
 800bee4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bee8:	dc09      	bgt.n	800befe <grid_update+0x766>
 800beea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800beee:	bfc8      	it	gt
 800bef0:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 800bef4:	4358      	muls	r0, r3
 800bef6:	2364      	movs	r3, #100	; 0x64
 800bef8:	fb90 f0f3 	sdiv	r0, r0, r3
 800befc:	b207      	sxth	r7, r0
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 800befe:	8aa3      	ldrh	r3, [r4, #20]
 800bf00:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800bf04:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 800bf08:	1aed      	subs	r5, r5, r3
 800bf0a:	9b05      	ldr	r3, [sp, #20]
 800bf0c:	441d      	add	r5, r3
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800bf0e:	8ae3      	ldrh	r3, [r4, #22]
 800bf10:	1ac0      	subs	r0, r0, r3
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 800bf12:	4435      	add	r5, r6
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800bf14:	4440      	add	r0, r8
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 800bf16:	b2ad      	uxth	r5, r5
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800bf18:	4438      	add	r0, r7
 800bf1a:	b286      	uxth	r6, r0
    if(diff_x || diff_y) {
 800bf1c:	ea55 0306 	orrs.w	r3, r5, r6
 800bf20:	d017      	beq.n	800bf52 <grid_update+0x7ba>
        lv_obj_invalidate(item);
 800bf22:	4620      	mov	r0, r4
 800bf24:	f010 feba 	bl	801cc9c <lv_obj_invalidate>
        item->coords.x1 += diff_x;
 800bf28:	8aa3      	ldrh	r3, [r4, #20]
        lv_obj_invalidate(item);
 800bf2a:	4620      	mov	r0, r4
        item->coords.x1 += diff_x;
 800bf2c:	442b      	add	r3, r5
 800bf2e:	82a3      	strh	r3, [r4, #20]
        item->coords.x2 += diff_x;
 800bf30:	8b23      	ldrh	r3, [r4, #24]
 800bf32:	442b      	add	r3, r5
 800bf34:	8323      	strh	r3, [r4, #24]
        item->coords.y1 += diff_y;
 800bf36:	8ae3      	ldrh	r3, [r4, #22]
 800bf38:	4433      	add	r3, r6
 800bf3a:	82e3      	strh	r3, [r4, #22]
        item->coords.y2 += diff_y;
 800bf3c:	8b63      	ldrh	r3, [r4, #26]
 800bf3e:	4433      	add	r3, r6
 800bf40:	8363      	strh	r3, [r4, #26]
        lv_obj_invalidate(item);
 800bf42:	f010 feab 	bl	801cc9c <lv_obj_invalidate>
        lv_obj_move_children_by(item, diff_x, diff_y, false);
 800bf46:	2300      	movs	r3, #0
 800bf48:	b232      	sxth	r2, r6
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	b229      	sxth	r1, r5
 800bf4e:	f010 fd34 	bl	801c9ba <lv_obj_move_children_by>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 800bf52:	9b04      	ldr	r3, [sp, #16]
 800bf54:	3301      	adds	r3, #1
 800bf56:	e470      	b.n	800b83a <grid_update+0xa2>
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 800bf58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	4413      	add	r3, r2
 800bf5e:	fa1f f883 	uxth.w	r8, r3
 800bf62:	f010 fca1 	bl	801c8a8 <lv_obj_get_height>
 800bf66:	eba8 0800 	sub.w	r8, r8, r0
 800bf6a:	fa0f f888 	sxth.w	r8, r8
            break;
 800bf6e:	e757      	b.n	800be20 <grid_update+0x688>
            item_h = row_h;
 800bf70:	9e07      	ldr	r6, [sp, #28]
    switch(row_align) {
 800bf72:	2501      	movs	r5, #1
 800bf74:	e754      	b.n	800be20 <grid_update+0x688>
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 800bf76:	4620      	mov	r0, r4
 800bf78:	f010 fc96 	bl	801c8a8 <lv_obj_get_height>
 800bf7c:	42b0      	cmp	r0, r6
 800bf7e:	f47f af5b 	bne.w	800be38 <grid_update+0x6a0>
 800bf82:	e781      	b.n	800be88 <grid_update+0x6f0>

0800bf84 <lv_grid_init>:
{
 800bf84:	b508      	push	{r3, lr}
    LV_LAYOUT_GRID = lv_layout_register(grid_update, NULL);
 800bf86:	2100      	movs	r1, #0
 800bf88:	481b      	ldr	r0, [pc, #108]	; (800bff8 <lv_grid_init+0x74>)
 800bf8a:	f7f8 ffd5 	bl	8004f38 <lv_layout_register>
 800bf8e:	4b1b      	ldr	r3, [pc, #108]	; (800bffc <lv_grid_init+0x78>)
 800bf90:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_DSC_ARRAY = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bf92:	2004      	movs	r0, #4
 800bf94:	f006 fc86 	bl	80128a4 <lv_style_register_prop>
 800bf98:	4b19      	ldr	r3, [pc, #100]	; (800c000 <lv_grid_init+0x7c>)
 800bf9a:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_DSC_ARRAY = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bf9c:	2004      	movs	r0, #4
 800bf9e:	f006 fc81 	bl	80128a4 <lv_style_register_prop>
 800bfa2:	4b18      	ldr	r3, [pc, #96]	; (800c004 <lv_grid_init+0x80>)
 800bfa4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bfa6:	2004      	movs	r0, #4
 800bfa8:	f006 fc7c 	bl	80128a4 <lv_style_register_prop>
 800bfac:	4b16      	ldr	r3, [pc, #88]	; (800c008 <lv_grid_init+0x84>)
 800bfae:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bfb0:	2004      	movs	r0, #4
 800bfb2:	f006 fc77 	bl	80128a4 <lv_style_register_prop>
 800bfb6:	4b15      	ldr	r3, [pc, #84]	; (800c00c <lv_grid_init+0x88>)
 800bfb8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_SPAN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bfba:	2004      	movs	r0, #4
 800bfbc:	f006 fc72 	bl	80128a4 <lv_style_register_prop>
 800bfc0:	4b13      	ldr	r3, [pc, #76]	; (800c010 <lv_grid_init+0x8c>)
 800bfc2:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_POS = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bfc4:	2004      	movs	r0, #4
 800bfc6:	f006 fc6d 	bl	80128a4 <lv_style_register_prop>
 800bfca:	4b12      	ldr	r3, [pc, #72]	; (800c014 <lv_grid_init+0x90>)
 800bfcc:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_SPAN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bfce:	2004      	movs	r0, #4
 800bfd0:	f006 fc68 	bl	80128a4 <lv_style_register_prop>
 800bfd4:	4b10      	ldr	r3, [pc, #64]	; (800c018 <lv_grid_init+0x94>)
 800bfd6:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_POS = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bfd8:	2004      	movs	r0, #4
 800bfda:	f006 fc63 	bl	80128a4 <lv_style_register_prop>
 800bfde:	4b0f      	ldr	r3, [pc, #60]	; (800c01c <lv_grid_init+0x98>)
 800bfe0:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_X_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bfe2:	2004      	movs	r0, #4
 800bfe4:	f006 fc5e 	bl	80128a4 <lv_style_register_prop>
 800bfe8:	4b0d      	ldr	r3, [pc, #52]	; (800c020 <lv_grid_init+0x9c>)
 800bfea:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_Y_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bfec:	2004      	movs	r0, #4
 800bfee:	f006 fc59 	bl	80128a4 <lv_style_register_prop>
 800bff2:	4b0c      	ldr	r3, [pc, #48]	; (800c024 <lv_grid_init+0xa0>)
 800bff4:	8018      	strh	r0, [r3, #0]
}
 800bff6:	bd08      	pop	{r3, pc}
 800bff8:	0800b799 	.word	0x0800b799
 800bffc:	24010d14 	.word	0x24010d14
 800c000:	24010d12 	.word	0x24010d12
 800c004:	24010d0e 	.word	0x24010d0e
 800c008:	24010d10 	.word	0x24010d10
 800c00c:	24010d0c 	.word	0x24010d0c
 800c010:	24010d02 	.word	0x24010d02
 800c014:	24010d04 	.word	0x24010d04
 800c018:	24010d08 	.word	0x24010d08
 800c01c:	24010d0a 	.word	0x24010d0a
 800c020:	24010d06 	.word	0x24010d06
 800c024:	24010d00 	.word	0x24010d00

0800c028 <theme_apply>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
}


static void theme_apply(lv_theme_t * th, lv_obj_t * obj)
{
 800c028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LV_UNUSED(th);

    if(lv_obj_get_parent(obj) == NULL) {
 800c02c:	4608      	mov	r0, r1
{
 800c02e:	460c      	mov	r4, r1
    if(lv_obj_get_parent(obj) == NULL) {
 800c030:	f012 f8de 	bl	801e1f0 <lv_obj_get_parent>
 800c034:	4602      	mov	r2, r0
 800c036:	b968      	cbnz	r0, 800c054 <theme_apply+0x2c>
        lv_obj_add_style(obj, &styles->scr, 0);
 800c038:	4daf      	ldr	r5, [pc, #700]	; (800c2f8 <theme_apply+0x2d0>)
 800c03a:	6829      	ldr	r1, [r5, #0]
    }
#endif
#if LV_USE_LIST
    else if(lv_obj_check_type(obj, &lv_list_class)) {
        lv_obj_add_style(obj, &styles->card, 0);
        lv_obj_add_style(obj, &styles->list_bg, 0);
 800c03c:	4620      	mov	r0, r4
 800c03e:	f011 fe16 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scr, 0);
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
    }
    else if(lv_obj_check_type(obj, &lv_tileview_tile_class)) {
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800c042:	6829      	ldr	r1, [r5, #0]
 800c044:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c048:	4620      	mov	r0, r4
 800c04a:	3108      	adds	r1, #8
 800c04c:	f011 fe0f 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 800c050:	6829      	ldr	r1, [r5, #0]
 800c052:	e027      	b.n	800c0a4 <theme_apply+0x7c>
    if(lv_obj_check_type(obj, &lv_obj_class)) {
 800c054:	49a9      	ldr	r1, [pc, #676]	; (800c2fc <theme_apply+0x2d4>)
 800c056:	4620      	mov	r0, r4
 800c058:	f00f feb8 	bl	801bdcc <lv_obj_check_type>
 800c05c:	4606      	mov	r6, r0
 800c05e:	2800      	cmp	r0, #0
 800c060:	d061      	beq.n	800c126 <theme_apply+0xfe>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800c062:	4620      	mov	r0, r4
 800c064:	f012 f8c4 	bl	801e1f0 <lv_obj_get_parent>
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
 800c068:	49a5      	ldr	r1, [pc, #660]	; (800c300 <theme_apply+0x2d8>)
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800c06a:	4606      	mov	r6, r0
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
 800c06c:	f00f feae 	bl	801bdcc <lv_obj_check_type>
 800c070:	4605      	mov	r5, r0
 800c072:	2800      	cmp	r0, #0
 800c074:	f040 80b0 	bne.w	800c1d8 <theme_apply+0x1b0>
        else if(lv_obj_check_type(lv_obj_get_parent(parent), &lv_tabview_class)) {
 800c078:	4630      	mov	r0, r6
 800c07a:	f012 f8b9 	bl	801e1f0 <lv_obj_get_parent>
 800c07e:	49a0      	ldr	r1, [pc, #640]	; (800c300 <theme_apply+0x2d8>)
 800c080:	f00f fea4 	bl	801bdcc <lv_obj_check_type>
 800c084:	b1a8      	cbz	r0, 800c0b2 <theme_apply+0x8a>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 800c086:	4e9c      	ldr	r6, [pc, #624]	; (800c2f8 <theme_apply+0x2d0>)
 800c088:	462a      	mov	r2, r5
 800c08a:	6831      	ldr	r1, [r6, #0]
 800c08c:	3180      	adds	r1, #128	; 0x80
 800c08e:	4620      	mov	r0, r4
 800c090:	f011 fded 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800c094:	6831      	ldr	r1, [r6, #0]
 800c096:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c09a:	4620      	mov	r0, r4
 800c09c:	3108      	adds	r1, #8
 800c09e:	f011 fde6 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 800c0a2:	6831      	ldr	r1, [r6, #0]
 800c0a4:	4a97      	ldr	r2, [pc, #604]	; (800c304 <theme_apply+0x2dc>)
 800c0a6:	3110      	adds	r1, #16
    }
#endif

#if LV_USE_LED
    else if(lv_obj_check_type(obj, &lv_led_class)) {
        lv_obj_add_style(obj, &styles->led, 0);
 800c0a8:	4620      	mov	r0, r4
    }
#endif
}
 800c0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_add_style(obj, &styles->led, 0);
 800c0ae:	f011 bdde 	b.w	801dc6e <lv_obj_add_style>
        if(lv_obj_get_index(obj) == 0 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f012 f8b2 	bl	801e21c <lv_obj_get_index>
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	b988      	cbnz	r0, 800c0e0 <theme_apply+0xb8>
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f012 f897 	bl	801e1f0 <lv_obj_get_parent>
 800c0c2:	4991      	ldr	r1, [pc, #580]	; (800c308 <theme_apply+0x2e0>)
 800c0c4:	f00f fe82 	bl	801bdcc <lv_obj_check_type>
 800c0c8:	b150      	cbz	r0, 800c0e0 <theme_apply+0xb8>
            lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 800c0ca:	4e8b      	ldr	r6, [pc, #556]	; (800c2f8 <theme_apply+0x2d0>)
 800c0cc:	462a      	mov	r2, r5
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	6831      	ldr	r1, [r6, #0]
 800c0d2:	3148      	adds	r1, #72	; 0x48
 800c0d4:	f011 fdcb 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_tiny, 0);
 800c0d8:	6831      	ldr	r1, [r6, #0]
 800c0da:	462a      	mov	r2, r5
 800c0dc:	3170      	adds	r1, #112	; 0x70
 800c0de:	e7e3      	b.n	800c0a8 <theme_apply+0x80>
        else if(lv_obj_get_index(obj) == 1 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f012 f89b 	bl	801e21c <lv_obj_get_index>
 800c0e6:	2801      	cmp	r0, #1
 800c0e8:	d110      	bne.n	800c10c <theme_apply+0xe4>
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f012 f880 	bl	801e1f0 <lv_obj_get_parent>
 800c0f0:	4985      	ldr	r1, [pc, #532]	; (800c308 <theme_apply+0x2e0>)
 800c0f2:	f00f fe6b 	bl	801bdcc <lv_obj_check_type>
 800c0f6:	b148      	cbz	r0, 800c10c <theme_apply+0xe4>
            lv_obj_add_style(obj, &styles->scr, 0);
 800c0f8:	4d7f      	ldr	r5, [pc, #508]	; (800c2f8 <theme_apply+0x2d0>)
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	6829      	ldr	r1, [r5, #0]
 800c100:	f011 fdb5 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 800c104:	6829      	ldr	r1, [r5, #0]
 800c106:	2200      	movs	r2, #0
 800c108:	3180      	adds	r1, #128	; 0x80
 800c10a:	e797      	b.n	800c03c <theme_apply+0x14>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_calendar_class)) {
 800c10c:	4620      	mov	r0, r4
 800c10e:	f012 f86f 	bl	801e1f0 <lv_obj_get_parent>
 800c112:	497e      	ldr	r1, [pc, #504]	; (800c30c <theme_apply+0x2e4>)
 800c114:	f00f fe5a 	bl	801bdcc <lv_obj_check_type>
 800c118:	4602      	mov	r2, r0
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d15c      	bne.n	800c1d8 <theme_apply+0x1b0>
        lv_obj_add_style(obj, &styles->card, 0);
 800c11e:	4d76      	ldr	r5, [pc, #472]	; (800c2f8 <theme_apply+0x2d0>)
 800c120:	6829      	ldr	r1, [r5, #0]
 800c122:	3118      	adds	r1, #24
 800c124:	e78a      	b.n	800c03c <theme_apply+0x14>
    else if(lv_obj_check_type(obj, &lv_btn_class)) {
 800c126:	497a      	ldr	r1, [pc, #488]	; (800c310 <theme_apply+0x2e8>)
 800c128:	4620      	mov	r0, r4
 800c12a:	f00f fe4f 	bl	801bdcc <lv_obj_check_type>
 800c12e:	4605      	mov	r5, r0
 800c130:	2800      	cmp	r0, #0
 800c132:	d053      	beq.n	800c1dc <theme_apply+0x1b4>
        lv_obj_add_style(obj, &styles->btn, 0);
 800c134:	4d70      	ldr	r5, [pc, #448]	; (800c2f8 <theme_apply+0x2d0>)
 800c136:	4632      	mov	r2, r6
 800c138:	4620      	mov	r0, r4
 800c13a:	6829      	ldr	r1, [r5, #0]
 800c13c:	3120      	adds	r1, #32
 800c13e:	f011 fd96 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, 0);
 800c142:	6829      	ldr	r1, [r5, #0]
 800c144:	4632      	mov	r2, r6
 800c146:	4620      	mov	r0, r4
 800c148:	3128      	adds	r1, #40	; 0x28
 800c14a:	f011 fd90 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 800c14e:	6829      	ldr	r1, [r5, #0]
 800c150:	4632      	mov	r2, r6
 800c152:	4620      	mov	r0, r4
 800c154:	31d0      	adds	r1, #208	; 0xd0
 800c156:	f011 fd8a 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 800c15a:	6829      	ldr	r1, [r5, #0]
 800c15c:	2220      	movs	r2, #32
 800c15e:	4620      	mov	r0, r4
 800c160:	3158      	adds	r1, #88	; 0x58
 800c162:	f011 fd84 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 800c166:	6829      	ldr	r1, [r5, #0]
 800c168:	2220      	movs	r2, #32
 800c16a:	4620      	mov	r0, r4
 800c16c:	31d8      	adds	r1, #216	; 0xd8
 800c16e:	f011 fd7e 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c172:	6829      	ldr	r1, [r5, #0]
 800c174:	2204      	movs	r2, #4
 800c176:	4620      	mov	r0, r4
 800c178:	31a0      	adds	r1, #160	; 0xa0
 800c17a:	f011 fd78 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_STATE_PRESSED);
 800c17e:	6829      	ldr	r1, [r5, #0]
 800c180:	2220      	movs	r2, #32
 800c182:	4620      	mov	r0, r4
 800c184:	31c8      	adds	r1, #200	; 0xc8
 800c186:	f011 fd72 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_STATE_CHECKED);
 800c18a:	6829      	ldr	r1, [r5, #0]
 800c18c:	2201      	movs	r2, #1
 800c18e:	4620      	mov	r0, r4
 800c190:	3138      	adds	r1, #56	; 0x38
 800c192:	f011 fd6c 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 800c196:	6829      	ldr	r1, [r5, #0]
 800c198:	2280      	movs	r2, #128	; 0x80
 800c19a:	4620      	mov	r0, r4
 800c19c:	3160      	adds	r1, #96	; 0x60
 800c19e:	f011 fd66 	bl	801dc6e <lv_obj_add_style>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_sidebar_header_cont_class) ||
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f012 f824 	bl	801e1f0 <lv_obj_get_parent>
 800c1a8:	495a      	ldr	r1, [pc, #360]	; (800c314 <theme_apply+0x2ec>)
 800c1aa:	f00f fe0f 	bl	801bdcc <lv_obj_check_type>
 800c1ae:	b158      	cbz	r0, 800c1c8 <theme_apply+0x1a0>
            lv_obj_add_style(obj, &styles->menu_header_btn, 0);
 800c1b0:	6829      	ldr	r1, [r5, #0]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
 800c1ba:	f011 fd58 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->menu_pressed, LV_STATE_PRESSED);
 800c1be:	6829      	ldr	r1, [r5, #0]
 800c1c0:	2220      	movs	r2, #32
 800c1c2:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
 800c1c6:	e76f      	b.n	800c0a8 <theme_apply+0x80>
           lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_main_header_cont_class)) {
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f012 f811 	bl	801e1f0 <lv_obj_get_parent>
 800c1ce:	4952      	ldr	r1, [pc, #328]	; (800c318 <theme_apply+0x2f0>)
 800c1d0:	f00f fdfc 	bl	801bdcc <lv_obj_check_type>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_sidebar_header_cont_class) ||
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d1eb      	bne.n	800c1b0 <theme_apply+0x188>
}
 800c1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(lv_obj_check_type(obj, &lv_line_class)) {
 800c1dc:	494f      	ldr	r1, [pc, #316]	; (800c31c <theme_apply+0x2f4>)
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f00f fdf4 	bl	801bdcc <lv_obj_check_type>
 800c1e4:	4607      	mov	r7, r0
 800c1e6:	b128      	cbz	r0, 800c1f4 <theme_apply+0x1cc>
        lv_obj_add_style(obj, &styles->line, 0);
 800c1e8:	4b43      	ldr	r3, [pc, #268]	; (800c2f8 <theme_apply+0x2d0>)
 800c1ea:	462a      	mov	r2, r5
 800c1ec:	6819      	ldr	r1, [r3, #0]
 800c1ee:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800c1f2:	e759      	b.n	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_btnmatrix_class)) {
 800c1f4:	494a      	ldr	r1, [pc, #296]	; (800c320 <theme_apply+0x2f8>)
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f00f fde8 	bl	801bdcc <lv_obj_check_type>
 800c1fc:	4606      	mov	r6, r0
 800c1fe:	2800      	cmp	r0, #0
 800c200:	f000 80fc 	beq.w	800c3fc <theme_apply+0x3d4>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_msgbox_class)) {
 800c204:	4620      	mov	r0, r4
 800c206:	4d3c      	ldr	r5, [pc, #240]	; (800c2f8 <theme_apply+0x2d0>)
 800c208:	f011 fff2 	bl	801e1f0 <lv_obj_get_parent>
 800c20c:	4945      	ldr	r1, [pc, #276]	; (800c324 <theme_apply+0x2fc>)
 800c20e:	f00f fddd 	bl	801bdcc <lv_obj_check_type>
 800c212:	4680      	mov	r8, r0
 800c214:	b378      	cbz	r0, 800c276 <theme_apply+0x24e>
            lv_obj_add_style(obj, &styles->msgbox_btn_bg, 0);
 800c216:	6829      	ldr	r1, [r5, #0]
 800c218:	463a      	mov	r2, r7
 800c21a:	4620      	mov	r0, r4
 800c21c:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 800c220:	f011 fd25 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_gap, 0);
 800c224:	6829      	ldr	r1, [r5, #0]
 800c226:	463a      	mov	r2, r7
 800c228:	4620      	mov	r0, r4
 800c22a:	3188      	adds	r1, #136	; 0x88
 800c22c:	f011 fd1f 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 800c230:	6829      	ldr	r1, [r5, #0]
 800c232:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c236:	4620      	mov	r0, r4
 800c238:	3120      	adds	r1, #32
 800c23a:	f011 fd18 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 800c23e:	6829      	ldr	r1, [r5, #0]
 800c240:	4a39      	ldr	r2, [pc, #228]	; (800c328 <theme_apply+0x300>)
 800c242:	4620      	mov	r0, r4
 800c244:	3158      	adds	r1, #88	; 0x58
 800c246:	f011 fd12 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 800c24a:	6829      	ldr	r1, [r5, #0]
 800c24c:	4a37      	ldr	r2, [pc, #220]	; (800c32c <theme_apply+0x304>)
 800c24e:	4620      	mov	r0, r4
 800c250:	3160      	adds	r1, #96	; 0x60
 800c252:	f011 fd0c 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 800c256:	6829      	ldr	r1, [r5, #0]
 800c258:	4a35      	ldr	r2, [pc, #212]	; (800c330 <theme_apply+0x308>)
 800c25a:	3128      	adds	r1, #40	; 0x28
        lv_obj_add_style(obj, &styles->bg_color_grey, LV_PART_ITEMS | LV_STATE_CHECKED);
 800c25c:	4620      	mov	r0, r4
 800c25e:	f011 fd06 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 800c262:	6829      	ldr	r1, [r5, #0]
 800c264:	4a33      	ldr	r2, [pc, #204]	; (800c334 <theme_apply+0x30c>)
 800c266:	4620      	mov	r0, r4
 800c268:	3130      	adds	r1, #48	; 0x30
 800c26a:	f011 fd00 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary_muted, LV_PART_ITEMS | LV_STATE_EDITED);
 800c26e:	6829      	ldr	r1, [r5, #0]
 800c270:	4a31      	ldr	r2, [pc, #196]	; (800c338 <theme_apply+0x310>)
 800c272:	3140      	adds	r1, #64	; 0x40
 800c274:	e718      	b.n	800c0a8 <theme_apply+0x80>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_tabview_class)) {
 800c276:	4620      	mov	r0, r4
 800c278:	f011 ffba 	bl	801e1f0 <lv_obj_get_parent>
 800c27c:	4920      	ldr	r1, [pc, #128]	; (800c300 <theme_apply+0x2d8>)
 800c27e:	f00f fda5 	bl	801bdcc <lv_obj_check_type>
 800c282:	4606      	mov	r6, r0
 800c284:	2800      	cmp	r0, #0
 800c286:	d059      	beq.n	800c33c <theme_apply+0x314>
            lv_obj_add_style(obj, &styles->bg_color_white, 0);
 800c288:	6829      	ldr	r1, [r5, #0]
 800c28a:	4642      	mov	r2, r8
 800c28c:	4620      	mov	r0, r4
 800c28e:	3150      	adds	r1, #80	; 0x50
 800c290:	f011 fced 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c294:	6829      	ldr	r1, [r5, #0]
 800c296:	2204      	movs	r2, #4
 800c298:	4620      	mov	r0, r4
 800c29a:	31a0      	adds	r1, #160	; 0xa0
 800c29c:	f011 fce7 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_STATE_FOCUS_KEY);
 800c2a0:	6829      	ldr	r1, [r5, #0]
 800c2a2:	2204      	movs	r2, #4
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f501 710c 	add.w	r1, r1, #560	; 0x230
 800c2aa:	f011 fce0 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 800c2ae:	6829      	ldr	r1, [r5, #0]
 800c2b0:	4a1d      	ldr	r2, [pc, #116]	; (800c328 <theme_apply+0x300>)
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	3158      	adds	r1, #88	; 0x58
 800c2b6:	f011 fcda 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_CHECKED);
 800c2ba:	6829      	ldr	r1, [r5, #0]
 800c2bc:	4a1c      	ldr	r2, [pc, #112]	; (800c330 <theme_apply+0x308>)
 800c2be:	4620      	mov	r0, r4
 800c2c0:	3130      	adds	r1, #48	; 0x30
 800c2c2:	f011 fcd4 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_btn, LV_PART_ITEMS | LV_STATE_CHECKED);
 800c2c6:	6829      	ldr	r1, [r5, #0]
 800c2c8:	4a19      	ldr	r2, [pc, #100]	; (800c330 <theme_apply+0x308>)
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f501 710e 	add.w	r1, r1, #568	; 0x238
 800c2d0:	f011 fccd 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 800c2d4:	6829      	ldr	r1, [r5, #0]
 800c2d6:	4a17      	ldr	r2, [pc, #92]	; (800c334 <theme_apply+0x30c>)
 800c2d8:	4620      	mov	r0, r4
 800c2da:	31a0      	adds	r1, #160	; 0xa0
 800c2dc:	f011 fcc7 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 800c2e0:	6829      	ldr	r1, [r5, #0]
 800c2e2:	4a15      	ldr	r2, [pc, #84]	; (800c338 <theme_apply+0x310>)
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	31a8      	adds	r1, #168	; 0xa8
 800c2e8:	f011 fcc1 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 800c2ec:	6829      	ldr	r1, [r5, #0]
 800c2ee:	4a11      	ldr	r2, [pc, #68]	; (800c334 <theme_apply+0x30c>)
 800c2f0:	f501 710c 	add.w	r1, r1, #560	; 0x230
 800c2f4:	e6d8      	b.n	800c0a8 <theme_apply+0x80>
 800c2f6:	bf00      	nop
 800c2f8:	240011d0 	.word	0x240011d0
 800c2fc:	08028e20 	.word	0x08028e20
 800c300:	08029398 	.word	0x08029398
 800c304:	00010040 	.word	0x00010040
 800c308:	080293ec 	.word	0x080293ec
 800c30c:	08028e64 	.word	0x08028e64
 800c310:	0802999c 	.word	0x0802999c
 800c314:	08029210 	.word	0x08029210
 800c318:	0802922c 	.word	0x0802922c
 800c31c:	08029a60 	.word	0x08029a60
 800c320:	080299b8 	.word	0x080299b8
 800c324:	08029344 	.word	0x08029344
 800c328:	00050020 	.word	0x00050020
 800c32c:	00050080 	.word	0x00050080
 800c330:	00050001 	.word	0x00050001
 800c334:	00050004 	.word	0x00050004
 800c338:	00050008 	.word	0x00050008
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_calendar_class)) {
 800c33c:	4620      	mov	r0, r4
 800c33e:	f011 ff57 	bl	801e1f0 <lv_obj_get_parent>
 800c342:	49b6      	ldr	r1, [pc, #728]	; (800c61c <theme_apply+0x5f4>)
 800c344:	f00f fd42 	bl	801bdcc <lv_obj_check_type>
            lv_obj_add_style(obj, &styles->calendar_btnm_bg, 0);
 800c348:	6829      	ldr	r1, [r5, #0]
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_calendar_class)) {
 800c34a:	4602      	mov	r2, r0
 800c34c:	b378      	cbz	r0, 800c3ae <theme_apply+0x386>
            lv_obj_add_style(obj, &styles->calendar_btnm_bg, 0);
 800c34e:	4632      	mov	r2, r6
 800c350:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800c354:	4620      	mov	r0, r4
 800c356:	f011 fc8a 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c35a:	6829      	ldr	r1, [r5, #0]
 800c35c:	2204      	movs	r2, #4
 800c35e:	4620      	mov	r0, r4
 800c360:	31a0      	adds	r1, #160	; 0xa0
 800c362:	f011 fc84 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c366:	6829      	ldr	r1, [r5, #0]
 800c368:	2208      	movs	r2, #8
 800c36a:	4620      	mov	r0, r4
 800c36c:	31a8      	adds	r1, #168	; 0xa8
 800c36e:	f011 fc7e 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->calendar_btnm_day, LV_PART_ITEMS);
 800c372:	6829      	ldr	r1, [r5, #0]
 800c374:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c378:	4620      	mov	r0, r4
 800c37a:	f501 71c4 	add.w	r1, r1, #392	; 0x188
 800c37e:	f011 fc76 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 800c382:	6829      	ldr	r1, [r5, #0]
 800c384:	4aa6      	ldr	r2, [pc, #664]	; (800c620 <theme_apply+0x5f8>)
 800c386:	4620      	mov	r0, r4
 800c388:	3158      	adds	r1, #88	; 0x58
 800c38a:	f011 fc70 	bl	801dc6e <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 800c38e:	6829      	ldr	r1, [r5, #0]
 800c390:	4aa4      	ldr	r2, [pc, #656]	; (800c624 <theme_apply+0x5fc>)
 800c392:	3160      	adds	r1, #96	; 0x60
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 800c394:	4620      	mov	r0, r4
 800c396:	f011 fc6a 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 800c39a:	6829      	ldr	r1, [r5, #0]
 800c39c:	4aa2      	ldr	r2, [pc, #648]	; (800c628 <theme_apply+0x600>)
 800c39e:	4620      	mov	r0, r4
 800c3a0:	31a0      	adds	r1, #160	; 0xa0
 800c3a2:	f011 fc64 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 800c3a6:	6829      	ldr	r1, [r5, #0]
 800c3a8:	4aa0      	ldr	r2, [pc, #640]	; (800c62c <theme_apply+0x604>)
 800c3aa:	31a8      	adds	r1, #168	; 0xa8
 800c3ac:	e67c      	b.n	800c0a8 <theme_apply+0x80>
        lv_obj_add_style(obj, &styles->card, 0);
 800c3ae:	3118      	adds	r1, #24
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f011 fc5c 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c3b6:	6829      	ldr	r1, [r5, #0]
 800c3b8:	2204      	movs	r2, #4
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	31a0      	adds	r1, #160	; 0xa0
 800c3be:	f011 fc56 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c3c2:	6829      	ldr	r1, [r5, #0]
 800c3c4:	2208      	movs	r2, #8
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	31a8      	adds	r1, #168	; 0xa8
 800c3ca:	f011 fc50 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 800c3ce:	6829      	ldr	r1, [r5, #0]
 800c3d0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	3120      	adds	r1, #32
 800c3d8:	f011 fc49 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 800c3dc:	6829      	ldr	r1, [r5, #0]
 800c3de:	4a91      	ldr	r2, [pc, #580]	; (800c624 <theme_apply+0x5fc>)
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	3160      	adds	r1, #96	; 0x60
 800c3e4:	f011 fc43 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 800c3e8:	6829      	ldr	r1, [r5, #0]
 800c3ea:	4a8d      	ldr	r2, [pc, #564]	; (800c620 <theme_apply+0x5f8>)
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	3158      	adds	r1, #88	; 0x58
 800c3f0:	f011 fc3d 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 800c3f4:	6829      	ldr	r1, [r5, #0]
 800c3f6:	4a8e      	ldr	r2, [pc, #568]	; (800c630 <theme_apply+0x608>)
 800c3f8:	3128      	adds	r1, #40	; 0x28
 800c3fa:	e7cb      	b.n	800c394 <theme_apply+0x36c>
    else if(lv_obj_check_type(obj, &lv_bar_class)) {
 800c3fc:	498d      	ldr	r1, [pc, #564]	; (800c634 <theme_apply+0x60c>)
 800c3fe:	4620      	mov	r0, r4
 800c400:	f00f fce4 	bl	801bdcc <lv_obj_check_type>
 800c404:	4607      	mov	r7, r0
 800c406:	b320      	cbz	r0, 800c452 <theme_apply+0x42a>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 800c408:	4d8b      	ldr	r5, [pc, #556]	; (800c638 <theme_apply+0x610>)
 800c40a:	4632      	mov	r2, r6
 800c40c:	4620      	mov	r0, r4
 800c40e:	6829      	ldr	r1, [r5, #0]
 800c410:	3130      	adds	r1, #48	; 0x30
 800c412:	f011 fc2c 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 800c416:	6829      	ldr	r1, [r5, #0]
 800c418:	4632      	mov	r2, r6
 800c41a:	4620      	mov	r0, r4
 800c41c:	31b0      	adds	r1, #176	; 0xb0
 800c41e:	f011 fc26 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c422:	6829      	ldr	r1, [r5, #0]
 800c424:	2204      	movs	r2, #4
 800c426:	4620      	mov	r0, r4
 800c428:	31a0      	adds	r1, #160	; 0xa0
 800c42a:	f011 fc20 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c42e:	6829      	ldr	r1, [r5, #0]
 800c430:	2208      	movs	r2, #8
 800c432:	4620      	mov	r0, r4
 800c434:	31a8      	adds	r1, #168	; 0xa8
 800c436:	f011 fc1a 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 800c43a:	6829      	ldr	r1, [r5, #0]
 800c43c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c440:	4620      	mov	r0, r4
 800c442:	3128      	adds	r1, #40	; 0x28
 800c444:	f011 fc13 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 800c448:	6829      	ldr	r1, [r5, #0]
 800c44a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c44e:	31b0      	adds	r1, #176	; 0xb0
 800c450:	e62a      	b.n	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_slider_class)) {
 800c452:	497a      	ldr	r1, [pc, #488]	; (800c63c <theme_apply+0x614>)
 800c454:	4620      	mov	r0, r4
 800c456:	f00f fcb9 	bl	801bdcc <lv_obj_check_type>
 800c45a:	4606      	mov	r6, r0
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d03e      	beq.n	800c4de <theme_apply+0x4b6>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 800c460:	4d75      	ldr	r5, [pc, #468]	; (800c638 <theme_apply+0x610>)
 800c462:	463a      	mov	r2, r7
 800c464:	4620      	mov	r0, r4
 800c466:	6829      	ldr	r1, [r5, #0]
 800c468:	3130      	adds	r1, #48	; 0x30
 800c46a:	f011 fc00 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 800c46e:	6829      	ldr	r1, [r5, #0]
 800c470:	463a      	mov	r2, r7
 800c472:	4620      	mov	r0, r4
 800c474:	31b0      	adds	r1, #176	; 0xb0
 800c476:	f011 fbfa 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c47a:	6829      	ldr	r1, [r5, #0]
 800c47c:	2204      	movs	r2, #4
 800c47e:	4620      	mov	r0, r4
 800c480:	31a0      	adds	r1, #160	; 0xa0
 800c482:	f011 fbf4 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c486:	6829      	ldr	r1, [r5, #0]
 800c488:	2208      	movs	r2, #8
 800c48a:	4620      	mov	r0, r4
 800c48c:	31a8      	adds	r1, #168	; 0xa8
 800c48e:	f011 fbee 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 800c492:	6829      	ldr	r1, [r5, #0]
 800c494:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c498:	4620      	mov	r0, r4
 800c49a:	3128      	adds	r1, #40	; 0x28
 800c49c:	f011 fbe7 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 800c4a0:	6829      	ldr	r1, [r5, #0]
 800c4a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	31b0      	adds	r1, #176	; 0xb0
 800c4aa:	f011 fbe0 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 800c4ae:	6829      	ldr	r1, [r5, #0]
 800c4b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	31f0      	adds	r1, #240	; 0xf0
 800c4b8:	f011 fbd9 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_KNOB | LV_STATE_PRESSED);
 800c4bc:	6829      	ldr	r1, [r5, #0]
 800c4be:	4a60      	ldr	r2, [pc, #384]	; (800c640 <theme_apply+0x618>)
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	31c8      	adds	r1, #200	; 0xc8
 800c4c4:	f011 fbd3 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_KNOB);
 800c4c8:	6829      	ldr	r1, [r5, #0]
 800c4ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	31d0      	adds	r1, #208	; 0xd0
 800c4d2:	f011 fbcc 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_KNOB | LV_STATE_PRESSED);
 800c4d6:	6829      	ldr	r1, [r5, #0]
 800c4d8:	4a59      	ldr	r2, [pc, #356]	; (800c640 <theme_apply+0x618>)
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 800c4da:	31d8      	adds	r1, #216	; 0xd8
 800c4dc:	e5e4      	b.n	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_table_class)) {
 800c4de:	4959      	ldr	r1, [pc, #356]	; (800c644 <theme_apply+0x61c>)
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f00f fc73 	bl	801bdcc <lv_obj_check_type>
 800c4e6:	4607      	mov	r7, r0
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d051      	beq.n	800c590 <theme_apply+0x568>
        lv_obj_add_style(obj, &styles->card, 0);
 800c4ec:	4d52      	ldr	r5, [pc, #328]	; (800c638 <theme_apply+0x610>)
 800c4ee:	4632      	mov	r2, r6
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	6829      	ldr	r1, [r5, #0]
 800c4f4:	3118      	adds	r1, #24
 800c4f6:	f011 fbba 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 800c4fa:	6829      	ldr	r1, [r5, #0]
 800c4fc:	4632      	mov	r2, r6
 800c4fe:	4620      	mov	r0, r4
 800c500:	3168      	adds	r1, #104	; 0x68
 800c502:	f011 fbb4 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->no_radius, 0);
 800c506:	6829      	ldr	r1, [r5, #0]
 800c508:	4632      	mov	r2, r6
 800c50a:	4620      	mov	r0, r4
 800c50c:	31b8      	adds	r1, #184	; 0xb8
 800c50e:	f011 fbae 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c512:	6829      	ldr	r1, [r5, #0]
 800c514:	2204      	movs	r2, #4
 800c516:	4620      	mov	r0, r4
 800c518:	31a0      	adds	r1, #160	; 0xa0
 800c51a:	f011 fba8 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c51e:	6829      	ldr	r1, [r5, #0]
 800c520:	2208      	movs	r2, #8
 800c522:	4620      	mov	r0, r4
 800c524:	31a8      	adds	r1, #168	; 0xa8
 800c526:	f011 fba2 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800c52a:	6829      	ldr	r1, [r5, #0]
 800c52c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c530:	4620      	mov	r0, r4
 800c532:	3108      	adds	r1, #8
 800c534:	f011 fb9b 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 800c538:	6829      	ldr	r1, [r5, #0]
 800c53a:	4a43      	ldr	r2, [pc, #268]	; (800c648 <theme_apply+0x620>)
 800c53c:	4620      	mov	r0, r4
 800c53e:	3110      	adds	r1, #16
 800c540:	f011 fb95 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 800c544:	6829      	ldr	r1, [r5, #0]
 800c546:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c54a:	4620      	mov	r0, r4
 800c54c:	3150      	adds	r1, #80	; 0x50
 800c54e:	f011 fb8e 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->table_cell, LV_PART_ITEMS);
 800c552:	6829      	ldr	r1, [r5, #0]
 800c554:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c558:	4620      	mov	r0, r4
 800c55a:	f501 71ac 	add.w	r1, r1, #344	; 0x158
 800c55e:	f011 fb86 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_ITEMS);
 800c562:	6829      	ldr	r1, [r5, #0]
 800c564:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c568:	4620      	mov	r0, r4
 800c56a:	3180      	adds	r1, #128	; 0x80
 800c56c:	f011 fb7f 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 800c570:	6829      	ldr	r1, [r5, #0]
 800c572:	4a2b      	ldr	r2, [pc, #172]	; (800c620 <theme_apply+0x5f8>)
 800c574:	4620      	mov	r0, r4
 800c576:	3158      	adds	r1, #88	; 0x58
 800c578:	f011 fb79 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 800c57c:	6829      	ldr	r1, [r5, #0]
 800c57e:	4a2a      	ldr	r2, [pc, #168]	; (800c628 <theme_apply+0x600>)
 800c580:	4620      	mov	r0, r4
 800c582:	3128      	adds	r1, #40	; 0x28
 800c584:	f011 fb73 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 800c588:	6829      	ldr	r1, [r5, #0]
 800c58a:	4a28      	ldr	r2, [pc, #160]	; (800c62c <theme_apply+0x604>)
 800c58c:	3138      	adds	r1, #56	; 0x38
 800c58e:	e58b      	b.n	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_checkbox_class)) {
 800c590:	492e      	ldr	r1, [pc, #184]	; (800c64c <theme_apply+0x624>)
 800c592:	4620      	mov	r0, r4
 800c594:	f00f fc1a 	bl	801bdcc <lv_obj_check_type>
 800c598:	2800      	cmp	r0, #0
 800c59a:	d05f      	beq.n	800c65c <theme_apply+0x634>
        lv_obj_add_style(obj, &styles->pad_gap, 0);
 800c59c:	4d26      	ldr	r5, [pc, #152]	; (800c638 <theme_apply+0x610>)
 800c59e:	463a      	mov	r2, r7
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	6829      	ldr	r1, [r5, #0]
 800c5a4:	3188      	adds	r1, #136	; 0x88
 800c5a6:	f011 fb62 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c5aa:	6829      	ldr	r1, [r5, #0]
 800c5ac:	2204      	movs	r2, #4
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	31a0      	adds	r1, #160	; 0xa0
 800c5b2:	f011 fb5c 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 800c5b6:	6829      	ldr	r1, [r5, #0]
 800c5b8:	4a25      	ldr	r2, [pc, #148]	; (800c650 <theme_apply+0x628>)
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	3160      	adds	r1, #96	; 0x60
 800c5be:	f011 fb56 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker, LV_PART_INDICATOR);
 800c5c2:	6829      	ldr	r1, [r5, #0]
 800c5c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	f501 719c 	add.w	r1, r1, #312	; 0x138
 800c5ce:	f011 fb4e 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR | LV_STATE_CHECKED);
 800c5d2:	6829      	ldr	r1, [r5, #0]
 800c5d4:	4a1f      	ldr	r2, [pc, #124]	; (800c654 <theme_apply+0x62c>)
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	3128      	adds	r1, #40	; 0x28
 800c5da:	f011 fb48 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker_checked, LV_PART_INDICATOR | LV_STATE_CHECKED);
 800c5de:	6829      	ldr	r1, [r5, #0]
 800c5e0:	4a1c      	ldr	r2, [pc, #112]	; (800c654 <theme_apply+0x62c>)
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f501 71a0 	add.w	r1, r1, #320	; 0x140
 800c5e8:	f011 fb41 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_INDICATOR | LV_STATE_PRESSED);
 800c5ec:	6829      	ldr	r1, [r5, #0]
 800c5ee:	4a1a      	ldr	r2, [pc, #104]	; (800c658 <theme_apply+0x630>)
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	3158      	adds	r1, #88	; 0x58
 800c5f4:	f011 fb3b 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_INDICATOR | LV_STATE_PRESSED);
 800c5f8:	6829      	ldr	r1, [r5, #0]
 800c5fa:	4a17      	ldr	r2, [pc, #92]	; (800c658 <theme_apply+0x630>)
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	31c8      	adds	r1, #200	; 0xc8
 800c600:	f011 fb35 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR | LV_STATE_PRESSED);
 800c604:	6829      	ldr	r1, [r5, #0]
 800c606:	4a14      	ldr	r2, [pc, #80]	; (800c658 <theme_apply+0x630>)
 800c608:	4620      	mov	r0, r4
 800c60a:	31d8      	adds	r1, #216	; 0xd8
 800c60c:	f011 fb2f 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_INDICATOR);
 800c610:	6829      	ldr	r1, [r5, #0]
 800c612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c616:	31d0      	adds	r1, #208	; 0xd0
 800c618:	e546      	b.n	800c0a8 <theme_apply+0x80>
 800c61a:	bf00      	nop
 800c61c:	08028e64 	.word	0x08028e64
 800c620:	00050020 	.word	0x00050020
 800c624:	00050080 	.word	0x00050080
 800c628:	00050004 	.word	0x00050004
 800c62c:	00050008 	.word	0x00050008
 800c630:	00050001 	.word	0x00050001
 800c634:	08029980 	.word	0x08029980
 800c638:	240011d0 	.word	0x240011d0
 800c63c:	08029ab4 	.word	0x08029ab4
 800c640:	00030020 	.word	0x00030020
 800c644:	08029aec 	.word	0x08029aec
 800c648:	00010040 	.word	0x00010040
 800c64c:	080299d4 	.word	0x080299d4
 800c650:	00020080 	.word	0x00020080
 800c654:	00020001 	.word	0x00020001
 800c658:	00020020 	.word	0x00020020
    else if(lv_obj_check_type(obj, &lv_switch_class)) {
 800c65c:	49c1      	ldr	r1, [pc, #772]	; (800c964 <theme_apply+0x93c>)
 800c65e:	4620      	mov	r0, r4
 800c660:	f00f fbb4 	bl	801bdcc <lv_obj_check_type>
 800c664:	2800      	cmp	r0, #0
 800c666:	d057      	beq.n	800c718 <theme_apply+0x6f0>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 800c668:	4dbf      	ldr	r5, [pc, #764]	; (800c968 <theme_apply+0x940>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	4620      	mov	r0, r4
 800c66e:	6829      	ldr	r1, [r5, #0]
 800c670:	3148      	adds	r1, #72	; 0x48
 800c672:	f011 fafc 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 800c676:	6829      	ldr	r1, [r5, #0]
 800c678:	2200      	movs	r2, #0
 800c67a:	4620      	mov	r0, r4
 800c67c:	31b0      	adds	r1, #176	; 0xb0
 800c67e:	f011 faf6 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->anim_fast, 0);
 800c682:	6829      	ldr	r1, [r5, #0]
 800c684:	2200      	movs	r2, #0
 800c686:	4620      	mov	r0, r4
 800c688:	31e8      	adds	r1, #232	; 0xe8
 800c68a:	f011 faf0 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 800c68e:	6829      	ldr	r1, [r5, #0]
 800c690:	2280      	movs	r2, #128	; 0x80
 800c692:	4620      	mov	r0, r4
 800c694:	3160      	adds	r1, #96	; 0x60
 800c696:	f011 faea 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c69a:	6829      	ldr	r1, [r5, #0]
 800c69c:	2204      	movs	r2, #4
 800c69e:	4620      	mov	r0, r4
 800c6a0:	31a0      	adds	r1, #160	; 0xa0
 800c6a2:	f011 fae4 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR | LV_STATE_CHECKED);
 800c6a6:	6829      	ldr	r1, [r5, #0]
 800c6a8:	4ab0      	ldr	r2, [pc, #704]	; (800c96c <theme_apply+0x944>)
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	3128      	adds	r1, #40	; 0x28
 800c6ae:	f011 fade 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 800c6b2:	6829      	ldr	r1, [r5, #0]
 800c6b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	31b0      	adds	r1, #176	; 0xb0
 800c6bc:	f011 fad7 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 800c6c0:	6829      	ldr	r1, [r5, #0]
 800c6c2:	4aab      	ldr	r2, [pc, #684]	; (800c970 <theme_apply+0x948>)
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	3160      	adds	r1, #96	; 0x60
 800c6c8:	f011 fad1 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 800c6cc:	6829      	ldr	r1, [r5, #0]
 800c6ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	31f0      	adds	r1, #240	; 0xf0
 800c6d6:	f011 faca 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 800c6da:	6829      	ldr	r1, [r5, #0]
 800c6dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	3150      	adds	r1, #80	; 0x50
 800c6e4:	f011 fac3 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->switch_knob, LV_PART_KNOB);
 800c6e8:	6829      	ldr	r1, [r5, #0]
 800c6ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f501 71a4 	add.w	r1, r1, #328	; 0x148
 800c6f4:	f011 fabb 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_KNOB | LV_STATE_DISABLED);
 800c6f8:	6829      	ldr	r1, [r5, #0]
 800c6fa:	4a9e      	ldr	r2, [pc, #632]	; (800c974 <theme_apply+0x94c>)
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	3160      	adds	r1, #96	; 0x60
 800c700:	f011 fab5 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR | LV_STATE_CHECKED);
 800c704:	6829      	ldr	r1, [r5, #0]
 800c706:	4a99      	ldr	r2, [pc, #612]	; (800c96c <theme_apply+0x944>)
 800c708:	31d8      	adds	r1, #216	; 0xd8
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c70a:	4620      	mov	r0, r4
 800c70c:	f011 faaf 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 800c710:	6829      	ldr	r1, [r5, #0]
 800c712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c716:	e6e0      	b.n	800c4da <theme_apply+0x4b2>
    else if(lv_obj_check_type(obj, &lv_chart_class)) {
 800c718:	4997      	ldr	r1, [pc, #604]	; (800c978 <theme_apply+0x950>)
 800c71a:	4620      	mov	r0, r4
 800c71c:	f00f fb56 	bl	801bdcc <lv_obj_check_type>
 800c720:	4606      	mov	r6, r0
 800c722:	2800      	cmp	r0, #0
 800c724:	d03e      	beq.n	800c7a4 <theme_apply+0x77c>
        lv_obj_add_style(obj, &styles->card, 0);
 800c726:	4d90      	ldr	r5, [pc, #576]	; (800c968 <theme_apply+0x940>)
 800c728:	2200      	movs	r2, #0
 800c72a:	4620      	mov	r0, r4
 800c72c:	6829      	ldr	r1, [r5, #0]
 800c72e:	3118      	adds	r1, #24
 800c730:	f011 fa9d 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 800c734:	6829      	ldr	r1, [r5, #0]
 800c736:	2200      	movs	r2, #0
 800c738:	4620      	mov	r0, r4
 800c73a:	3178      	adds	r1, #120	; 0x78
 800c73c:	f011 fa97 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_bg, 0);
 800c740:	6829      	ldr	r1, [r5, #0]
 800c742:	2200      	movs	r2, #0
 800c744:	4620      	mov	r0, r4
 800c746:	f501 7194 	add.w	r1, r1, #296	; 0x128
 800c74a:	f011 fa90 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800c74e:	6829      	ldr	r1, [r5, #0]
 800c750:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c754:	4620      	mov	r0, r4
 800c756:	3108      	adds	r1, #8
 800c758:	f011 fa89 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 800c75c:	6829      	ldr	r1, [r5, #0]
 800c75e:	4a87      	ldr	r2, [pc, #540]	; (800c97c <theme_apply+0x954>)
 800c760:	4620      	mov	r0, r4
 800c762:	3110      	adds	r1, #16
 800c764:	f011 fa83 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_ITEMS);
 800c768:	6829      	ldr	r1, [r5, #0]
 800c76a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c76e:	4620      	mov	r0, r4
 800c770:	f501 7188 	add.w	r1, r1, #272	; 0x110
 800c774:	f011 fa7b 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_indic, LV_PART_INDICATOR);
 800c778:	6829      	ldr	r1, [r5, #0]
 800c77a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c77e:	4620      	mov	r0, r4
 800c780:	f501 718c 	add.w	r1, r1, #280	; 0x118
 800c784:	f011 fa73 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_ticks, LV_PART_TICKS);
 800c788:	6829      	ldr	r1, [r5, #0]
 800c78a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800c78e:	4620      	mov	r0, r4
 800c790:	f501 7190 	add.w	r1, r1, #288	; 0x120
 800c794:	f011 fa6b 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_CURSOR);
 800c798:	6829      	ldr	r1, [r5, #0]
 800c79a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800c79e:	f501 7188 	add.w	r1, r1, #272	; 0x110
 800c7a2:	e481      	b.n	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_roller_class)) {
 800c7a4:	4976      	ldr	r1, [pc, #472]	; (800c980 <theme_apply+0x958>)
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f00f fb10 	bl	801bdcc <lv_obj_check_type>
 800c7ac:	4607      	mov	r7, r0
 800c7ae:	b348      	cbz	r0, 800c804 <theme_apply+0x7dc>
        lv_obj_add_style(obj, &styles->card, 0);
 800c7b0:	4d6d      	ldr	r5, [pc, #436]	; (800c968 <theme_apply+0x940>)
 800c7b2:	4632      	mov	r2, r6
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	6829      	ldr	r1, [r5, #0]
 800c7b8:	3118      	adds	r1, #24
 800c7ba:	f011 fa58 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->anim, 0);
 800c7be:	6829      	ldr	r1, [r5, #0]
 800c7c0:	4632      	mov	r2, r6
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	31e0      	adds	r1, #224	; 0xe0
 800c7c6:	f011 fa52 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 800c7ca:	6829      	ldr	r1, [r5, #0]
 800c7cc:	4632      	mov	r2, r6
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	3190      	adds	r1, #144	; 0x90
 800c7d2:	f011 fa4c 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->text_align_center, 0);
 800c7d6:	6829      	ldr	r1, [r5, #0]
 800c7d8:	4632      	mov	r2, r6
 800c7da:	4620      	mov	r0, r4
 800c7dc:	3198      	adds	r1, #152	; 0x98
 800c7de:	f011 fa46 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c7e2:	6829      	ldr	r1, [r5, #0]
 800c7e4:	2204      	movs	r2, #4
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	31a0      	adds	r1, #160	; 0xa0
 800c7ea:	f011 fa40 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c7ee:	6829      	ldr	r1, [r5, #0]
 800c7f0:	2208      	movs	r2, #8
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	31a8      	adds	r1, #168	; 0xa8
 800c7f6:	f011 fa3a 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED);
 800c7fa:	6829      	ldr	r1, [r5, #0]
 800c7fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_CURSOR);
 800c800:	3128      	adds	r1, #40	; 0x28
 800c802:	e451      	b.n	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_dropdown_class)) {
 800c804:	495f      	ldr	r1, [pc, #380]	; (800c984 <theme_apply+0x95c>)
 800c806:	4620      	mov	r0, r4
 800c808:	f00f fae0 	bl	801bdcc <lv_obj_check_type>
 800c80c:	4606      	mov	r6, r0
 800c80e:	b340      	cbz	r0, 800c862 <theme_apply+0x83a>
        lv_obj_add_style(obj, &styles->card, 0);
 800c810:	4d55      	ldr	r5, [pc, #340]	; (800c968 <theme_apply+0x940>)
 800c812:	463a      	mov	r2, r7
 800c814:	4620      	mov	r0, r4
 800c816:	6829      	ldr	r1, [r5, #0]
 800c818:	3118      	adds	r1, #24
 800c81a:	f011 fa28 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 800c81e:	6829      	ldr	r1, [r5, #0]
 800c820:	463a      	mov	r2, r7
 800c822:	4620      	mov	r0, r4
 800c824:	3178      	adds	r1, #120	; 0x78
 800c826:	f011 fa22 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 800c82a:	6829      	ldr	r1, [r5, #0]
 800c82c:	463a      	mov	r2, r7
 800c82e:	4620      	mov	r0, r4
 800c830:	31d0      	adds	r1, #208	; 0xd0
 800c832:	f011 fa1c 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 800c836:	6829      	ldr	r1, [r5, #0]
 800c838:	2220      	movs	r2, #32
 800c83a:	4620      	mov	r0, r4
 800c83c:	31d8      	adds	r1, #216	; 0xd8
 800c83e:	f011 fa16 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 800c842:	6829      	ldr	r1, [r5, #0]
 800c844:	2220      	movs	r2, #32
 800c846:	4620      	mov	r0, r4
 800c848:	3158      	adds	r1, #88	; 0x58
 800c84a:	f011 fa10 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c84e:	6829      	ldr	r1, [r5, #0]
 800c850:	2204      	movs	r2, #4
 800c852:	4620      	mov	r0, r4
 800c854:	31a0      	adds	r1, #160	; 0xa0
 800c856:	f011 fa0a 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c85a:	6829      	ldr	r1, [r5, #0]
 800c85c:	2208      	movs	r2, #8
 800c85e:	31a8      	adds	r1, #168	; 0xa8
 800c860:	e753      	b.n	800c70a <theme_apply+0x6e2>
    else if(lv_obj_check_type(obj, &lv_dropdownlist_class)) {
 800c862:	4949      	ldr	r1, [pc, #292]	; (800c988 <theme_apply+0x960>)
 800c864:	4620      	mov	r0, r4
 800c866:	f00f fab1 	bl	801bdcc <lv_obj_check_type>
 800c86a:	4607      	mov	r7, r0
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d038      	beq.n	800c8e2 <theme_apply+0x8ba>
        lv_obj_add_style(obj, &styles->card, 0);
 800c870:	4d3d      	ldr	r5, [pc, #244]	; (800c968 <theme_apply+0x940>)
 800c872:	4632      	mov	r2, r6
 800c874:	4620      	mov	r0, r4
 800c876:	6829      	ldr	r1, [r5, #0]
 800c878:	3118      	adds	r1, #24
 800c87a:	f011 f9f8 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->clip_corner, 0);
 800c87e:	6829      	ldr	r1, [r5, #0]
 800c880:	4632      	mov	r2, r6
 800c882:	4620      	mov	r0, r4
 800c884:	31c0      	adds	r1, #192	; 0xc0
 800c886:	f011 f9f2 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 800c88a:	6829      	ldr	r1, [r5, #0]
 800c88c:	4632      	mov	r2, r6
 800c88e:	4620      	mov	r0, r4
 800c890:	3190      	adds	r1, #144	; 0x90
 800c892:	f011 f9ec 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dropdown_list, 0);
 800c896:	6829      	ldr	r1, [r5, #0]
 800c898:	4632      	mov	r2, r6
 800c89a:	4620      	mov	r0, r4
 800c89c:	f501 7198 	add.w	r1, r1, #304	; 0x130
 800c8a0:	f011 f9e5 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800c8a4:	6829      	ldr	r1, [r5, #0]
 800c8a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	3108      	adds	r1, #8
 800c8ae:	f011 f9de 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 800c8b2:	6829      	ldr	r1, [r5, #0]
 800c8b4:	4a31      	ldr	r2, [pc, #196]	; (800c97c <theme_apply+0x954>)
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	3110      	adds	r1, #16
 800c8ba:	f011 f9d8 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_SELECTED);
 800c8be:	6829      	ldr	r1, [r5, #0]
 800c8c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	3150      	adds	r1, #80	; 0x50
 800c8c8:	f011 f9d1 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED | LV_STATE_CHECKED);
 800c8cc:	6829      	ldr	r1, [r5, #0]
 800c8ce:	4a2f      	ldr	r2, [pc, #188]	; (800c98c <theme_apply+0x964>)
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	3128      	adds	r1, #40	; 0x28
 800c8d4:	f011 f9cb 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_SELECTED | LV_STATE_PRESSED);
 800c8d8:	6829      	ldr	r1, [r5, #0]
 800c8da:	4a2d      	ldr	r2, [pc, #180]	; (800c990 <theme_apply+0x968>)
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 800c8dc:	3158      	adds	r1, #88	; 0x58
 800c8de:	f7ff bbe3 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_arc_class)) {
 800c8e2:	492c      	ldr	r1, [pc, #176]	; (800c994 <theme_apply+0x96c>)
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f00f fa71 	bl	801bdcc <lv_obj_check_type>
 800c8ea:	4606      	mov	r6, r0
 800c8ec:	b1e8      	cbz	r0, 800c92a <theme_apply+0x902>
        lv_obj_add_style(obj, &styles->arc_indic, 0);
 800c8ee:	4d1e      	ldr	r5, [pc, #120]	; (800c968 <theme_apply+0x940>)
 800c8f0:	463a      	mov	r2, r7
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	6829      	ldr	r1, [r5, #0]
 800c8f6:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800c8fa:	f011 f9b8 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic, LV_PART_INDICATOR);
 800c8fe:	6829      	ldr	r1, [r5, #0]
 800c900:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c904:	4620      	mov	r0, r4
 800c906:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800c90a:	f011 f9b0 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic_primary, LV_PART_INDICATOR);
 800c90e:	6829      	ldr	r1, [r5, #0]
 800c910:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c914:	4620      	mov	r0, r4
 800c916:	f501 7184 	add.w	r1, r1, #264	; 0x108
 800c91a:	f011 f9a8 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 800c91e:	6829      	ldr	r1, [r5, #0]
 800c920:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c924:	31f0      	adds	r1, #240	; 0xf0
 800c926:	f7ff bbbf 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_spinner_class)) {
 800c92a:	491b      	ldr	r1, [pc, #108]	; (800c998 <theme_apply+0x970>)
 800c92c:	4620      	mov	r0, r4
 800c92e:	f00f fa4d 	bl	801bdcc <lv_obj_check_type>
 800c932:	4605      	mov	r5, r0
 800c934:	b390      	cbz	r0, 800c99c <theme_apply+0x974>
        lv_obj_add_style(obj, &styles->arc_indic, 0);
 800c936:	4d0c      	ldr	r5, [pc, #48]	; (800c968 <theme_apply+0x940>)
 800c938:	4632      	mov	r2, r6
 800c93a:	4620      	mov	r0, r4
 800c93c:	6829      	ldr	r1, [r5, #0]
 800c93e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800c942:	f011 f994 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic, LV_PART_INDICATOR);
 800c946:	6829      	ldr	r1, [r5, #0]
 800c948:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c94c:	4620      	mov	r0, r4
 800c94e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800c952:	f011 f98c 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic_primary, LV_PART_INDICATOR);
 800c956:	6829      	ldr	r1, [r5, #0]
 800c958:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c95c:	f501 7184 	add.w	r1, r1, #264	; 0x108
 800c960:	f7ff bba2 	b.w	800c0a8 <theme_apply+0x80>
 800c964:	08029ad0 	.word	0x08029ad0
 800c968:	240011d0 	.word	0x240011d0
 800c96c:	00020001 	.word	0x00020001
 800c970:	00020080 	.word	0x00020080
 800c974:	00030080 	.word	0x00030080
 800c978:	08028ee8 	.word	0x08028ee8
 800c97c:	00010040 	.word	0x00010040
 800c980:	08029a98 	.word	0x08029a98
 800c984:	08029a0c 	.word	0x08029a0c
 800c988:	080299f0 	.word	0x080299f0
 800c98c:	00040001 	.word	0x00040001
 800c990:	00040020 	.word	0x00040020
 800c994:	08029964 	.word	0x08029964
 800c998:	0802937c 	.word	0x0802937c
    else if(lv_obj_check_type(obj, &lv_meter_class)) {
 800c99c:	49bb      	ldr	r1, [pc, #748]	; (800cc8c <theme_apply+0xc64>)
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f00f fa14 	bl	801bdcc <lv_obj_check_type>
 800c9a4:	4606      	mov	r6, r0
 800c9a6:	b198      	cbz	r0, 800c9d0 <theme_apply+0x9a8>
        lv_obj_add_style(obj, &styles->card, 0);
 800c9a8:	4eb9      	ldr	r6, [pc, #740]	; (800cc90 <theme_apply+0xc68>)
 800c9aa:	462a      	mov	r2, r5
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	6831      	ldr	r1, [r6, #0]
 800c9b0:	3118      	adds	r1, #24
 800c9b2:	f011 f95c 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 800c9b6:	6831      	ldr	r1, [r6, #0]
 800c9b8:	462a      	mov	r2, r5
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	31b0      	adds	r1, #176	; 0xb0
 800c9be:	f011 f956 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->meter_indic, LV_PART_INDICATOR);
 800c9c2:	6831      	ldr	r1, [r6, #0]
 800c9c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c9c8:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800c9cc:	f7ff bb6c 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_textarea_class)) {
 800c9d0:	49b0      	ldr	r1, [pc, #704]	; (800cc94 <theme_apply+0xc6c>)
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	f00f f9fa 	bl	801bdcc <lv_obj_check_type>
 800c9d8:	4605      	mov	r5, r0
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	d039      	beq.n	800ca52 <theme_apply+0xa2a>
        lv_obj_add_style(obj, &styles->card, 0);
 800c9de:	4dac      	ldr	r5, [pc, #688]	; (800cc90 <theme_apply+0xc68>)
 800c9e0:	4632      	mov	r2, r6
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	6829      	ldr	r1, [r5, #0]
 800c9e6:	3118      	adds	r1, #24
 800c9e8:	f011 f941 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 800c9ec:	6829      	ldr	r1, [r5, #0]
 800c9ee:	4632      	mov	r2, r6
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	3178      	adds	r1, #120	; 0x78
 800c9f4:	f011 f93b 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 800c9f8:	6829      	ldr	r1, [r5, #0]
 800c9fa:	2280      	movs	r2, #128	; 0x80
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	3160      	adds	r1, #96	; 0x60
 800ca00:	f011 f935 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800ca04:	6829      	ldr	r1, [r5, #0]
 800ca06:	2204      	movs	r2, #4
 800ca08:	4620      	mov	r0, r4
 800ca0a:	31a0      	adds	r1, #160	; 0xa0
 800ca0c:	f011 f92f 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800ca10:	6829      	ldr	r1, [r5, #0]
 800ca12:	2208      	movs	r2, #8
 800ca14:	4620      	mov	r0, r4
 800ca16:	31a8      	adds	r1, #168	; 0xa8
 800ca18:	f011 f929 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800ca1c:	6829      	ldr	r1, [r5, #0]
 800ca1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ca22:	4620      	mov	r0, r4
 800ca24:	3108      	adds	r1, #8
 800ca26:	f011 f922 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 800ca2a:	6829      	ldr	r1, [r5, #0]
 800ca2c:	4a9a      	ldr	r2, [pc, #616]	; (800cc98 <theme_apply+0xc70>)
 800ca2e:	4620      	mov	r0, r4
 800ca30:	3110      	adds	r1, #16
 800ca32:	f011 f91c 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_cursor, LV_PART_CURSOR | LV_STATE_FOCUSED);
 800ca36:	6829      	ldr	r1, [r5, #0]
 800ca38:	4a98      	ldr	r2, [pc, #608]	; (800cc9c <theme_apply+0xc74>)
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f501 71b8 	add.w	r1, r1, #368	; 0x170
 800ca40:	f011 f915 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_placeholder, LV_PART_TEXTAREA_PLACEHOLDER);
 800ca44:	6829      	ldr	r1, [r5, #0]
 800ca46:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ca4a:	f501 71bc 	add.w	r1, r1, #376	; 0x178
 800ca4e:	f7ff bb2b 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_calendar_class)) {
 800ca52:	4993      	ldr	r1, [pc, #588]	; (800cca0 <theme_apply+0xc78>)
 800ca54:	4620      	mov	r0, r4
 800ca56:	f00f f9b9 	bl	801bdcc <lv_obj_check_type>
 800ca5a:	b158      	cbz	r0, 800ca74 <theme_apply+0xa4c>
        lv_obj_add_style(obj, &styles->card, 0);
 800ca5c:	4e8c      	ldr	r6, [pc, #560]	; (800cc90 <theme_apply+0xc68>)
 800ca5e:	462a      	mov	r2, r5
 800ca60:	4620      	mov	r0, r4
 800ca62:	6831      	ldr	r1, [r6, #0]
 800ca64:	3118      	adds	r1, #24
 800ca66:	f011 f902 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 800ca6a:	6831      	ldr	r1, [r6, #0]
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	3168      	adds	r1, #104	; 0x68
 800ca70:	f7ff bb1a 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_calendar_header_arrow_class)) {
 800ca74:	498b      	ldr	r1, [pc, #556]	; (800cca4 <theme_apply+0xc7c>)
 800ca76:	4620      	mov	r0, r4
 800ca78:	f00f f9a8 	bl	801bdcc <lv_obj_check_type>
 800ca7c:	b130      	cbz	r0, 800ca8c <theme_apply+0xa64>
        lv_obj_add_style(obj, &styles->calendar_header, 0);
 800ca7e:	4b84      	ldr	r3, [pc, #528]	; (800cc90 <theme_apply+0xc68>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	6819      	ldr	r1, [r3, #0]
 800ca84:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 800ca88:	f7ff bb0e 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_calendar_header_dropdown_class)) {
 800ca8c:	4986      	ldr	r1, [pc, #536]	; (800cca8 <theme_apply+0xc80>)
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f00f f99c 	bl	801bdcc <lv_obj_check_type>
 800ca94:	4607      	mov	r7, r0
 800ca96:	2800      	cmp	r0, #0
 800ca98:	d1f1      	bne.n	800ca7e <theme_apply+0xa56>
    else if(lv_obj_check_type(obj, &lv_keyboard_class)) {
 800ca9a:	4984      	ldr	r1, [pc, #528]	; (800ccac <theme_apply+0xc84>)
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	f00f f995 	bl	801bdcc <lv_obj_check_type>
 800caa2:	4606      	mov	r6, r0
 800caa4:	2800      	cmp	r0, #0
 800caa6:	d043      	beq.n	800cb30 <theme_apply+0xb08>
        lv_obj_add_style(obj, &styles->scr, 0);
 800caa8:	4d79      	ldr	r5, [pc, #484]	; (800cc90 <theme_apply+0xc68>)
 800caaa:	463a      	mov	r2, r7
 800caac:	4620      	mov	r0, r4
 800caae:	6829      	ldr	r1, [r5, #0]
 800cab0:	f011 f8dd 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, disp_size == DISP_LARGE ? &styles->pad_small : &styles->pad_tiny, 0);
 800cab4:	4b7e      	ldr	r3, [pc, #504]	; (800ccb0 <theme_apply+0xc88>)
 800cab6:	6829      	ldr	r1, [r5, #0]
 800cab8:	2200      	movs	r2, #0
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	4620      	mov	r0, r4
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	bf0c      	ite	eq
 800cac2:	3178      	addeq	r1, #120	; 0x78
 800cac4:	3170      	addne	r1, #112	; 0x70
 800cac6:	f011 f8d2 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800caca:	6829      	ldr	r1, [r5, #0]
 800cacc:	2204      	movs	r2, #4
 800cace:	4620      	mov	r0, r4
 800cad0:	31a0      	adds	r1, #160	; 0xa0
 800cad2:	f011 f8cc 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800cad6:	6829      	ldr	r1, [r5, #0]
 800cad8:	2208      	movs	r2, #8
 800cada:	4620      	mov	r0, r4
 800cadc:	31a8      	adds	r1, #168	; 0xa8
 800cade:	f011 f8c6 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 800cae2:	6829      	ldr	r1, [r5, #0]
 800cae4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800cae8:	4620      	mov	r0, r4
 800caea:	3120      	adds	r1, #32
 800caec:	f011 f8bf 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 800caf0:	6829      	ldr	r1, [r5, #0]
 800caf2:	4a70      	ldr	r2, [pc, #448]	; (800ccb4 <theme_apply+0xc8c>)
 800caf4:	4620      	mov	r0, r4
 800caf6:	3160      	adds	r1, #96	; 0x60
 800caf8:	f011 f8b9 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 800cafc:	6829      	ldr	r1, [r5, #0]
 800cafe:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800cb02:	4620      	mov	r0, r4
 800cb04:	3150      	adds	r1, #80	; 0x50
 800cb06:	f011 f8b2 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->keyboard_btn_bg, LV_PART_ITEMS);
 800cb0a:	6829      	ldr	r1, [r5, #0]
 800cb0c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800cb10:	4620      	mov	r0, r4
 800cb12:	f501 7102 	add.w	r1, r1, #520	; 0x208
 800cb16:	f011 f8aa 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 800cb1a:	6829      	ldr	r1, [r5, #0]
 800cb1c:	4a66      	ldr	r2, [pc, #408]	; (800ccb8 <theme_apply+0xc90>)
 800cb1e:	4620      	mov	r0, r4
 800cb20:	3158      	adds	r1, #88	; 0x58
 800cb22:	f011 f8a4 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_grey, LV_PART_ITEMS | LV_STATE_CHECKED);
 800cb26:	6829      	ldr	r1, [r5, #0]
 800cb28:	4a64      	ldr	r2, [pc, #400]	; (800ccbc <theme_apply+0xc94>)
 800cb2a:	3148      	adds	r1, #72	; 0x48
 800cb2c:	f7ff bb96 	b.w	800c25c <theme_apply+0x234>
    else if(lv_obj_check_type(obj, &lv_list_class)) {
 800cb30:	4963      	ldr	r1, [pc, #396]	; (800ccc0 <theme_apply+0xc98>)
 800cb32:	4620      	mov	r0, r4
 800cb34:	f00f f94a 	bl	801bdcc <lv_obj_check_type>
 800cb38:	4605      	mov	r5, r0
 800cb3a:	b160      	cbz	r0, 800cb56 <theme_apply+0xb2e>
        lv_obj_add_style(obj, &styles->card, 0);
 800cb3c:	4d54      	ldr	r5, [pc, #336]	; (800cc90 <theme_apply+0xc68>)
 800cb3e:	4632      	mov	r2, r6
 800cb40:	4620      	mov	r0, r4
 800cb42:	6829      	ldr	r1, [r5, #0]
 800cb44:	3118      	adds	r1, #24
 800cb46:	f011 f892 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_bg, 0);
 800cb4a:	6829      	ldr	r1, [r5, #0]
 800cb4c:	4632      	mov	r2, r6
 800cb4e:	f501 7104 	add.w	r1, r1, #528	; 0x210
 800cb52:	f7ff ba73 	b.w	800c03c <theme_apply+0x14>
    else if(lv_obj_check_type(obj, &lv_list_text_class)) {
 800cb56:	495b      	ldr	r1, [pc, #364]	; (800ccc4 <theme_apply+0xc9c>)
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f00f f937 	bl	801bdcc <lv_obj_check_type>
 800cb5e:	4606      	mov	r6, r0
 800cb60:	b160      	cbz	r0, 800cb7c <theme_apply+0xb54>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 800cb62:	4e4b      	ldr	r6, [pc, #300]	; (800cc90 <theme_apply+0xc68>)
 800cb64:	462a      	mov	r2, r5
 800cb66:	4620      	mov	r0, r4
 800cb68:	6831      	ldr	r1, [r6, #0]
 800cb6a:	3148      	adds	r1, #72	; 0x48
 800cb6c:	f011 f87f 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, 0);
 800cb70:	6831      	ldr	r1, [r6, #0]
 800cb72:	462a      	mov	r2, r5
 800cb74:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800cb78:	f7ff ba96 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_list_btn_class)) {
 800cb7c:	4952      	ldr	r1, [pc, #328]	; (800ccc8 <theme_apply+0xca0>)
 800cb7e:	4620      	mov	r0, r4
 800cb80:	f00f f924 	bl	801bdcc <lv_obj_check_type>
 800cb84:	4605      	mov	r5, r0
 800cb86:	b320      	cbz	r0, 800cbd2 <theme_apply+0xbaa>
        lv_obj_add_style(obj, &styles->bg_color_white, 0);
 800cb88:	4d41      	ldr	r5, [pc, #260]	; (800cc90 <theme_apply+0xc68>)
 800cb8a:	4632      	mov	r2, r6
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	6829      	ldr	r1, [r5, #0]
 800cb90:	3150      	adds	r1, #80	; 0x50
 800cb92:	f011 f86c 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_btn, 0);
 800cb96:	6829      	ldr	r1, [r5, #0]
 800cb98:	4632      	mov	r2, r6
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f501 7106 	add.w	r1, r1, #536	; 0x218
 800cba0:	f011 f865 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_STATE_FOCUS_KEY);
 800cba4:	6829      	ldr	r1, [r5, #0]
 800cba6:	2204      	movs	r2, #4
 800cba8:	4620      	mov	r0, r4
 800cbaa:	3128      	adds	r1, #40	; 0x28
 800cbac:	f011 f85f 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_FOCUS_KEY);
 800cbb0:	6829      	ldr	r1, [r5, #0]
 800cbb2:	2204      	movs	r2, #4
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800cbba:	f011 f858 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_PRESSED);
 800cbbe:	6829      	ldr	r1, [r5, #0]
 800cbc0:	2220      	movs	r2, #32
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800cbc8:	f011 f851 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 800cbcc:	6829      	ldr	r1, [r5, #0]
 800cbce:	2220      	movs	r2, #32
 800cbd0:	e684      	b.n	800c8dc <theme_apply+0x8b4>
    else if(lv_obj_check_type(obj, &lv_menu_class)) {
 800cbd2:	493e      	ldr	r1, [pc, #248]	; (800cccc <theme_apply+0xca4>)
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f00f f8f9 	bl	801bdcc <lv_obj_check_type>
 800cbda:	4606      	mov	r6, r0
 800cbdc:	b160      	cbz	r0, 800cbf8 <theme_apply+0xbd0>
        lv_obj_add_style(obj, &styles->card, 0);
 800cbde:	4e2c      	ldr	r6, [pc, #176]	; (800cc90 <theme_apply+0xc68>)
 800cbe0:	462a      	mov	r2, r5
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	6831      	ldr	r1, [r6, #0]
 800cbe6:	3118      	adds	r1, #24
 800cbe8:	f011 f841 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->menu_bg, 0);
 800cbec:	6831      	ldr	r1, [r6, #0]
 800cbee:	462a      	mov	r2, r5
 800cbf0:	f501 71d0 	add.w	r1, r1, #416	; 0x1a0
 800cbf4:	f7ff ba58 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_cont_class)) {
 800cbf8:	4935      	ldr	r1, [pc, #212]	; (800ccd0 <theme_apply+0xca8>)
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f00f f8e6 	bl	801bdcc <lv_obj_check_type>
 800cc00:	4605      	mov	r5, r0
 800cc02:	b130      	cbz	r0, 800cc12 <theme_apply+0xbea>
        lv_obj_add_style(obj, &styles->menu_sidebar_cont, 0);
 800cc04:	4d22      	ldr	r5, [pc, #136]	; (800cc90 <theme_apply+0xc68>)
 800cc06:	4632      	mov	r2, r6
 800cc08:	6829      	ldr	r1, [r5, #0]
 800cc0a:	f501 71d8 	add.w	r1, r1, #432	; 0x1b0
 800cc0e:	f7ff ba15 	b.w	800c03c <theme_apply+0x14>
    else if(lv_obj_check_type(obj, &lv_menu_main_cont_class)) {
 800cc12:	4930      	ldr	r1, [pc, #192]	; (800ccd4 <theme_apply+0xcac>)
 800cc14:	4620      	mov	r0, r4
 800cc16:	f00f f8d9 	bl	801bdcc <lv_obj_check_type>
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	b130      	cbz	r0, 800cc2c <theme_apply+0xc04>
        lv_obj_add_style(obj, &styles->menu_main_cont, 0);
 800cc1e:	4e1c      	ldr	r6, [pc, #112]	; (800cc90 <theme_apply+0xc68>)
 800cc20:	462a      	mov	r2, r5
 800cc22:	6831      	ldr	r1, [r6, #0]
 800cc24:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 800cc28:	f7ff ba31 	b.w	800c08e <theme_apply+0x66>
    else if(lv_obj_check_type(obj, &lv_menu_cont_class)) {
 800cc2c:	492a      	ldr	r1, [pc, #168]	; (800ccd8 <theme_apply+0xcb0>)
 800cc2e:	4620      	mov	r0, r4
 800cc30:	f00f f8cc 	bl	801bdcc <lv_obj_check_type>
 800cc34:	b1e8      	cbz	r0, 800cc72 <theme_apply+0xc4a>
        lv_obj_add_style(obj, &styles->menu_cont, 0);
 800cc36:	4d16      	ldr	r5, [pc, #88]	; (800cc90 <theme_apply+0xc68>)
 800cc38:	4632      	mov	r2, r6
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	6829      	ldr	r1, [r5, #0]
 800cc3e:	f501 71d4 	add.w	r1, r1, #424	; 0x1a8
 800cc42:	f011 f814 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->menu_pressed, LV_STATE_PRESSED);
 800cc46:	6829      	ldr	r1, [r5, #0]
 800cc48:	2220      	movs	r2, #32
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
 800cc50:	f011 f80d 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_STATE_PRESSED | LV_STATE_CHECKED);
 800cc54:	6829      	ldr	r1, [r5, #0]
 800cc56:	2221      	movs	r2, #33	; 0x21
 800cc58:	4620      	mov	r0, r4
 800cc5a:	3130      	adds	r1, #48	; 0x30
 800cc5c:	f011 f807 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_STATE_CHECKED);
 800cc60:	6829      	ldr	r1, [r5, #0]
 800cc62:	2201      	movs	r2, #1
 800cc64:	4620      	mov	r0, r4
 800cc66:	3130      	adds	r1, #48	; 0x30
 800cc68:	f011 f801 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_STATE_FOCUS_KEY);
 800cc6c:	6829      	ldr	r1, [r5, #0]
 800cc6e:	2204      	movs	r2, #4
 800cc70:	e5c6      	b.n	800c800 <theme_apply+0x7d8>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_header_cont_class) ||
 800cc72:	491a      	ldr	r1, [pc, #104]	; (800ccdc <theme_apply+0xcb4>)
 800cc74:	4620      	mov	r0, r4
 800cc76:	f00f f8a9 	bl	801bdcc <lv_obj_check_type>
 800cc7a:	b388      	cbz	r0, 800cce0 <theme_apply+0xcb8>
        lv_obj_add_style(obj, &styles->menu_header_cont, 0);
 800cc7c:	4b04      	ldr	r3, [pc, #16]	; (800cc90 <theme_apply+0xc68>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	6819      	ldr	r1, [r3, #0]
 800cc82:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 800cc86:	f7ff ba0f 	b.w	800c0a8 <theme_apply+0x80>
 800cc8a:	bf00      	nop
 800cc8c:	0802930c 	.word	0x0802930c
 800cc90:	240011d0 	.word	0x240011d0
 800cc94:	08029b08 	.word	0x08029b08
 800cc98:	00010040 	.word	0x00010040
 800cc9c:	00070002 	.word	0x00070002
 800cca0:	08028e64 	.word	0x08028e64
 800cca4:	08028eb0 	.word	0x08028eb0
 800cca8:	08028ecc 	.word	0x08028ecc
 800ccac:	08029184 	.word	0x08029184
 800ccb0:	24010e31 	.word	0x24010e31
 800ccb4:	00050080 	.word	0x00050080
 800ccb8:	00050020 	.word	0x00050020
 800ccbc:	00050001 	.word	0x00050001
 800ccc0:	080291f4 	.word	0x080291f4
 800ccc4:	080291bc 	.word	0x080291bc
 800ccc8:	080291d8 	.word	0x080291d8
 800cccc:	080292f0 	.word	0x080292f0
 800ccd0:	08029264 	.word	0x08029264
 800ccd4:	08029248 	.word	0x08029248
 800ccd8:	080292b8 	.word	0x080292b8
 800ccdc:	08029210 	.word	0x08029210
            lv_obj_check_type(obj, &lv_menu_main_header_cont_class)) {
 800cce0:	4965      	ldr	r1, [pc, #404]	; (800ce78 <theme_apply+0xe50>)
 800cce2:	4620      	mov	r0, r4
 800cce4:	f00f f872 	bl	801bdcc <lv_obj_check_type>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_header_cont_class) ||
 800cce8:	4606      	mov	r6, r0
 800ccea:	2800      	cmp	r0, #0
 800ccec:	d1c6      	bne.n	800cc7c <theme_apply+0xc54>
    else if(lv_obj_check_type(obj, &lv_menu_page_class)) {
 800ccee:	4963      	ldr	r1, [pc, #396]	; (800ce7c <theme_apply+0xe54>)
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f00f f86b 	bl	801bdcc <lv_obj_check_type>
 800ccf6:	4605      	mov	r5, r0
 800ccf8:	b130      	cbz	r0, 800cd08 <theme_apply+0xce0>
        lv_obj_add_style(obj, &styles->menu_page, 0);
 800ccfa:	4d61      	ldr	r5, [pc, #388]	; (800ce80 <theme_apply+0xe58>)
 800ccfc:	4632      	mov	r2, r6
 800ccfe:	6829      	ldr	r1, [r5, #0]
 800cd00:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
 800cd04:	f7ff b99a 	b.w	800c03c <theme_apply+0x14>
    else if(lv_obj_check_type(obj, &lv_menu_section_class)) {
 800cd08:	495e      	ldr	r1, [pc, #376]	; (800ce84 <theme_apply+0xe5c>)
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f00f f85e 	bl	801bdcc <lv_obj_check_type>
 800cd10:	4606      	mov	r6, r0
 800cd12:	b130      	cbz	r0, 800cd22 <theme_apply+0xcfa>
        lv_obj_add_style(obj, &styles->menu_section, 0);
 800cd14:	4b5a      	ldr	r3, [pc, #360]	; (800ce80 <theme_apply+0xe58>)
 800cd16:	462a      	mov	r2, r5
 800cd18:	6819      	ldr	r1, [r3, #0]
 800cd1a:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
 800cd1e:	f7ff b9c3 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_menu_separator_class)) {
 800cd22:	4959      	ldr	r1, [pc, #356]	; (800ce88 <theme_apply+0xe60>)
 800cd24:	4620      	mov	r0, r4
 800cd26:	f00f f851 	bl	801bdcc <lv_obj_check_type>
 800cd2a:	4605      	mov	r5, r0
 800cd2c:	b130      	cbz	r0, 800cd3c <theme_apply+0xd14>
        lv_obj_add_style(obj, &styles->menu_separator, 0);
 800cd2e:	4b54      	ldr	r3, [pc, #336]	; (800ce80 <theme_apply+0xe58>)
 800cd30:	4632      	mov	r2, r6
 800cd32:	6819      	ldr	r1, [r3, #0]
 800cd34:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
 800cd38:	f7ff b9b6 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_msgbox_class)) {
 800cd3c:	4953      	ldr	r1, [pc, #332]	; (800ce8c <theme_apply+0xe64>)
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f00f f844 	bl	801bdcc <lv_obj_check_type>
 800cd44:	4607      	mov	r7, r0
 800cd46:	b160      	cbz	r0, 800cd62 <theme_apply+0xd3a>
        lv_obj_add_style(obj, &styles->card, 0);
 800cd48:	4e4d      	ldr	r6, [pc, #308]	; (800ce80 <theme_apply+0xe58>)
 800cd4a:	462a      	mov	r2, r5
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	6831      	ldr	r1, [r6, #0]
 800cd50:	3118      	adds	r1, #24
 800cd52:	f010 ff8c 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->msgbox_bg, 0);
 800cd56:	6831      	ldr	r1, [r6, #0]
 800cd58:	462a      	mov	r2, r5
 800cd5a:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
 800cd5e:	f7ff b9a3 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_msgbox_backdrop_class)) {
 800cd62:	494b      	ldr	r1, [pc, #300]	; (800ce90 <theme_apply+0xe68>)
 800cd64:	4620      	mov	r0, r4
 800cd66:	f00f f831 	bl	801bdcc <lv_obj_check_type>
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	b130      	cbz	r0, 800cd7c <theme_apply+0xd54>
        lv_obj_add_style(obj, &styles->msgbox_backdrop_bg, 0);
 800cd6e:	4b44      	ldr	r3, [pc, #272]	; (800ce80 <theme_apply+0xe58>)
 800cd70:	463a      	mov	r2, r7
 800cd72:	6819      	ldr	r1, [r3, #0]
 800cd74:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800cd78:	f7ff b996 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_spinbox_class)) {
 800cd7c:	4945      	ldr	r1, [pc, #276]	; (800ce94 <theme_apply+0xe6c>)
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f00f f824 	bl	801bdcc <lv_obj_check_type>
 800cd84:	4605      	mov	r5, r0
 800cd86:	b1e0      	cbz	r0, 800cdc2 <theme_apply+0xd9a>
        lv_obj_add_style(obj, &styles->card, 0);
 800cd88:	4d3d      	ldr	r5, [pc, #244]	; (800ce80 <theme_apply+0xe58>)
 800cd8a:	4632      	mov	r2, r6
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	6829      	ldr	r1, [r5, #0]
 800cd90:	3118      	adds	r1, #24
 800cd92:	f010 ff6c 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 800cd96:	6829      	ldr	r1, [r5, #0]
 800cd98:	4632      	mov	r2, r6
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	3178      	adds	r1, #120	; 0x78
 800cd9e:	f010 ff66 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800cda2:	6829      	ldr	r1, [r5, #0]
 800cda4:	2204      	movs	r2, #4
 800cda6:	4620      	mov	r0, r4
 800cda8:	31a0      	adds	r1, #160	; 0xa0
 800cdaa:	f010 ff60 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800cdae:	6829      	ldr	r1, [r5, #0]
 800cdb0:	2208      	movs	r2, #8
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	31a8      	adds	r1, #168	; 0xa8
 800cdb6:	f010 ff5a 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_CURSOR);
 800cdba:	6829      	ldr	r1, [r5, #0]
 800cdbc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800cdc0:	e51e      	b.n	800c800 <theme_apply+0x7d8>
    else if(lv_obj_check_type(obj, &lv_tileview_class)) {
 800cdc2:	4935      	ldr	r1, [pc, #212]	; (800ce98 <theme_apply+0xe70>)
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f00f f801 	bl	801bdcc <lv_obj_check_type>
 800cdca:	b120      	cbz	r0, 800cdd6 <theme_apply+0xdae>
        lv_obj_add_style(obj, &styles->scr, 0);
 800cdcc:	4e2c      	ldr	r6, [pc, #176]	; (800ce80 <theme_apply+0xe58>)
 800cdce:	462a      	mov	r2, r5
 800cdd0:	6831      	ldr	r1, [r6, #0]
 800cdd2:	f7ff b95c 	b.w	800c08e <theme_apply+0x66>
    else if(lv_obj_check_type(obj, &lv_tileview_tile_class)) {
 800cdd6:	4931      	ldr	r1, [pc, #196]	; (800ce9c <theme_apply+0xe74>)
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f00e fff7 	bl	801bdcc <lv_obj_check_type>
 800cdde:	b110      	cbz	r0, 800cde6 <theme_apply+0xdbe>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800cde0:	4d27      	ldr	r5, [pc, #156]	; (800ce80 <theme_apply+0xe58>)
 800cde2:	f7ff b92e 	b.w	800c042 <theme_apply+0x1a>
    else if(lv_obj_check_type(obj, &lv_tabview_class)) {
 800cde6:	492e      	ldr	r1, [pc, #184]	; (800cea0 <theme_apply+0xe78>)
 800cde8:	4620      	mov	r0, r4
 800cdea:	f00e ffef 	bl	801bdcc <lv_obj_check_type>
 800cdee:	b138      	cbz	r0, 800ce00 <theme_apply+0xdd8>
        lv_obj_add_style(obj, &styles->scr, 0);
 800cdf0:	4d23      	ldr	r5, [pc, #140]	; (800ce80 <theme_apply+0xe58>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	6829      	ldr	r1, [r5, #0]
 800cdf8:	f010 ff39 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 800cdfc:	6829      	ldr	r1, [r5, #0]
 800cdfe:	e635      	b.n	800ca6c <theme_apply+0xa44>
    else if(lv_obj_check_type(obj, &lv_win_class)) {
 800ce00:	4928      	ldr	r1, [pc, #160]	; (800cea4 <theme_apply+0xe7c>)
 800ce02:	4620      	mov	r0, r4
 800ce04:	f00e ffe2 	bl	801bdcc <lv_obj_check_type>
 800ce08:	4605      	mov	r5, r0
 800ce0a:	b128      	cbz	r0, 800ce18 <theme_apply+0xdf0>
        lv_obj_add_style(obj, &styles->clip_corner, 0);
 800ce0c:	4b1c      	ldr	r3, [pc, #112]	; (800ce80 <theme_apply+0xe58>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	6819      	ldr	r1, [r3, #0]
 800ce12:	31c0      	adds	r1, #192	; 0xc0
 800ce14:	f7ff b948 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_colorwheel_class)) {
 800ce18:	4923      	ldr	r1, [pc, #140]	; (800cea8 <theme_apply+0xe80>)
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	f00e ffd6 	bl	801bdcc <lv_obj_check_type>
 800ce20:	4606      	mov	r6, r0
 800ce22:	b1d0      	cbz	r0, 800ce5a <theme_apply+0xe32>
        lv_obj_add_style(obj, &styles->colorwheel_main, 0);
 800ce24:	4e16      	ldr	r6, [pc, #88]	; (800ce80 <theme_apply+0xe58>)
 800ce26:	462a      	mov	r2, r5
 800ce28:	4620      	mov	r0, r4
 800ce2a:	6831      	ldr	r1, [r6, #0]
 800ce2c:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 800ce30:	f010 ff1d 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, 0);
 800ce34:	6831      	ldr	r1, [r6, #0]
 800ce36:	462a      	mov	r2, r5
 800ce38:	4620      	mov	r0, r4
 800ce3a:	3180      	adds	r1, #128	; 0x80
 800ce3c:	f010 ff17 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 800ce40:	6831      	ldr	r1, [r6, #0]
 800ce42:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ce46:	4620      	mov	r0, r4
 800ce48:	3150      	adds	r1, #80	; 0x50
 800ce4a:	f010 ff10 	bl	801dc6e <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_KNOB);
 800ce4e:	6831      	ldr	r1, [r6, #0]
 800ce50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ce54:	3180      	adds	r1, #128	; 0x80
 800ce56:	f7ff b927 	b.w	800c0a8 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_led_class)) {
 800ce5a:	4914      	ldr	r1, [pc, #80]	; (800ceac <theme_apply+0xe84>)
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	f00e ffb5 	bl	801bdcc <lv_obj_check_type>
 800ce62:	2800      	cmp	r0, #0
 800ce64:	f43f a9b8 	beq.w	800c1d8 <theme_apply+0x1b0>
        lv_obj_add_style(obj, &styles->led, 0);
 800ce68:	4b05      	ldr	r3, [pc, #20]	; (800ce80 <theme_apply+0xe58>)
 800ce6a:	4632      	mov	r2, r6
 800ce6c:	6819      	ldr	r1, [r3, #0]
 800ce6e:	f501 7110 	add.w	r1, r1, #576	; 0x240
 800ce72:	f7ff b919 	b.w	800c0a8 <theme_apply+0x80>
 800ce76:	bf00      	nop
 800ce78:	0802922c 	.word	0x0802922c
 800ce7c:	080292d4 	.word	0x080292d4
 800ce80:	240011d0 	.word	0x240011d0
 800ce84:	0802929c 	.word	0x0802929c
 800ce88:	08029280 	.word	0x08029280
 800ce8c:	08029344 	.word	0x08029344
 800ce90:	08029328 	.word	0x08029328
 800ce94:	08029360 	.word	0x08029360
 800ce98:	080293d0 	.word	0x080293d0
 800ce9c:	080293b4 	.word	0x080293b4
 800cea0:	08029398 	.word	0x08029398
 800cea4:	080293ec 	.word	0x080293ec
 800cea8:	08028f04 	.word	0x08028f04
 800ceac:	080291a0 	.word	0x080291a0

0800ceb0 <grey_filter_cb>:
{
 800ceb0:	b538      	push	{r3, r4, r5, lr}
    if(theme.flags & MODE_DARK) return lv_color_mix(lv_palette_darken(LV_PALETTE_GREY, 2), color, opa);
 800ceb2:	4b09      	ldr	r3, [pc, #36]	; (800ced8 <grey_filter_cb+0x28>)
{
 800ceb4:	460c      	mov	r4, r1
 800ceb6:	4615      	mov	r5, r2
    if(theme.flags & MODE_DARK) return lv_color_mix(lv_palette_darken(LV_PALETTE_GREY, 2), color, opa);
 800ceb8:	2102      	movs	r1, #2
 800ceba:	6a1b      	ldr	r3, [r3, #32]
 800cebc:	2012      	movs	r0, #18
 800cebe:	07db      	lsls	r3, r3, #31
 800cec0:	d507      	bpl.n	800ced2 <grey_filter_cb+0x22>
 800cec2:	f005 fbab 	bl	801261c <lv_palette_darken>
    else return lv_color_mix(lv_palette_lighten(LV_PALETTE_GREY, 2), color, opa);
 800cec6:	462a      	mov	r2, r5
 800cec8:	4621      	mov	r1, r4
}
 800ceca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    else return lv_color_mix(lv_palette_lighten(LV_PALETTE_GREY, 2), color, opa);
 800cece:	f016 b84e 	b.w	8022f6e <lv_color_mix>
 800ced2:	f005 fb91 	bl	80125f8 <lv_palette_lighten>
 800ced6:	e7f6      	b.n	800cec6 <grey_filter_cb+0x16>
 800ced8:	240011ac 	.word	0x240011ac

0800cedc <style_init_reset>:
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) {
 800cedc:	4b03      	ldr	r3, [pc, #12]	; (800ceec <style_init_reset+0x10>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	b10b      	cbz	r3, 800cee6 <style_init_reset+0xa>
        lv_style_reset(style);
 800cee2:	f017 beef 	b.w	8024cc4 <lv_style_reset>
    }
    else {
        lv_style_init(style);
 800cee6:	f017 bee9 	b.w	8024cbc <lv_style_init>
 800ceea:	bf00      	nop
 800ceec:	24010e30 	.word	0x24010e30

0800cef0 <lv_theme_default_init>:
{
 800cef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 800cef4:	4da2      	ldr	r5, [pc, #648]	; (800d180 <lv_theme_default_init+0x290>)
{
 800cef6:	b085      	sub	sp, #20
 800cef8:	4698      	mov	r8, r3
 800cefa:	468a      	mov	sl, r1
    if(!lv_theme_default_is_inited()) {
 800cefc:	682b      	ldr	r3, [r5, #0]
{
 800cefe:	4691      	mov	r9, r2
 800cf00:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800cf02:	4ca0      	ldr	r4, [pc, #640]	; (800d184 <lv_theme_default_init+0x294>)
 800cf04:	9003      	str	r0, [sp, #12]
    if(!lv_theme_default_is_inited()) {
 800cf06:	b93b      	cbnz	r3, 800cf18 <lv_theme_default_init+0x28>
        inited = false;
 800cf08:	4a9f      	ldr	r2, [pc, #636]	; (800d188 <lv_theme_default_init+0x298>)
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 800cf0a:	f44f 7012 	mov.w	r0, #584	; 0x248
        inited = false;
 800cf0e:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 800cf10:	f005 fc02 	bl	8012718 <lv_mem_alloc>
 800cf14:	6028      	str	r0, [r5, #0]
        styles = (my_theme_styles_t *)LV_GC_ROOT(_lv_theme_default_styles);
 800cf16:	6020      	str	r0, [r4, #0]
    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
 800cf18:	f005 f8ec 	bl	80120f4 <lv_disp_get_default>
 800cf1c:	f005 f8f0 	bl	8012100 <lv_disp_get_hor_res>
 800cf20:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 800cf24:	f341 819f 	ble.w	800e266 <lv_theme_default_init+0x1376>
    else if(LV_HOR_RES < 720) disp_size = DISP_MEDIUM;
 800cf28:	f005 f8e4 	bl	80120f4 <lv_disp_get_default>
 800cf2c:	f005 f8e8 	bl	8012100 <lv_disp_get_hor_res>
 800cf30:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 800cf34:	bfb4      	ite	lt
 800cf36:	2302      	movlt	r3, #2
 800cf38:	2301      	movge	r3, #1
    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
 800cf3a:	4e94      	ldr	r6, [pc, #592]	; (800d18c <lv_theme_default_init+0x29c>)
    theme.disp = disp;
 800cf3c:	4d94      	ldr	r5, [pc, #592]	; (800d190 <lv_theme_default_init+0x2a0>)
    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
 800cf3e:	7033      	strb	r3, [r6, #0]
    theme.disp = disp;
 800cf40:	9b03      	ldr	r3, [sp, #12]
    theme.font_large = font;
 800cf42:	61ef      	str	r7, [r5, #28]
    theme.disp = disp;
 800cf44:	60eb      	str	r3, [r5, #12]
    theme.apply_cb = theme_apply;
 800cf46:	4b93      	ldr	r3, [pc, #588]	; (800d194 <lv_theme_default_init+0x2a4>)
 800cf48:	f8df b24c 	ldr.w	fp, [pc, #588]	; 800d198 <lv_theme_default_init+0x2a8>
    theme.color_primary = color_primary;
 800cf4c:	f8a5 a010 	strh.w	sl, [r5, #16]
    theme.color_secondary = color_secondary;
 800cf50:	f8a5 9012 	strh.w	r9, [r5, #18]
    theme.apply_cb = theme_apply;
 800cf54:	602b      	str	r3, [r5, #0]
    theme.flags = dark ? MODE_DARK : 0;
 800cf56:	f8c5 8020 	str.w	r8, [r5, #32]
    theme.font_normal = font;
 800cf5a:	e9c5 7705 	strd	r7, r7, [r5, #20]
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 800cf5e:	4f8f      	ldr	r7, [pc, #572]	; (800d19c <lv_theme_default_init+0x2ac>)
 800cf60:	f1b8 0f00 	cmp.w	r8, #0
 800cf64:	f001 8182 	beq.w	800e26c <lv_theme_default_init+0x137c>
 800cf68:	f241 03a3 	movw	r3, #4259	; 0x10a3
 800cf6c:	f8ab 3000 	strh.w	r3, [fp]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 800cf70:	2105      	movs	r1, #5
 800cf72:	2012      	movs	r0, #18
 800cf74:	f005 fb40 	bl	80125f8 <lv_palette_lighten>
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 800cf78:	6a2b      	ldr	r3, [r5, #32]
 800cf7a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800d1a0 <lv_theme_default_init+0x2b0>
 800cf7e:	f013 0f01 	tst.w	r3, #1
 800cf82:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800d1a4 <lv_theme_default_init+0x2b4>
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 800cf86:	8038      	strh	r0, [r7, #0]
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 800cf88:	f001 8180 	beq.w	800e28c <lv_theme_default_init+0x139c>
 800cf8c:	f642 1346 	movw	r3, #10566	; 0x2946
 800cf90:	f8a9 3000 	strh.w	r3, [r9]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 800cf94:	f642 1386 	movw	r3, #10630	; 0x2986
 800cf98:	f8a8 3000 	strh.w	r3, [r8]
    style_init_reset(&styles->transition_delayed);
 800cf9c:	6820      	ldr	r0, [r4, #0]
    lv_style_transition_dsc_init(&trans_delayed, trans_props, lv_anim_path_linear, TRANSITION_TIME, 70, NULL);
 800cf9e:	f04f 0a00 	mov.w	sl, #0
    style_init_reset(&styles->transition_delayed);
 800cfa2:	30d0      	adds	r0, #208	; 0xd0
 800cfa4:	f7ff ff9a 	bl	800cedc <style_init_reset>
    style_init_reset(&styles->transition_normal);
 800cfa8:	6820      	ldr	r0, [r4, #0]
 800cfaa:	30d8      	adds	r0, #216	; 0xd8
 800cfac:	f7ff ff96 	bl	800cedc <style_init_reset>
    lv_style_transition_dsc_init(&trans_delayed, trans_props, lv_anim_path_linear, TRANSITION_TIME, 70, NULL);
 800cfb0:	2346      	movs	r3, #70	; 0x46
 800cfb2:	4a7d      	ldr	r2, [pc, #500]	; (800d1a8 <lv_theme_default_init+0x2b8>)
 800cfb4:	497d      	ldr	r1, [pc, #500]	; (800d1ac <lv_theme_default_init+0x2bc>)
 800cfb6:	487e      	ldr	r0, [pc, #504]	; (800d1b0 <lv_theme_default_init+0x2c0>)
 800cfb8:	e9cd 3a00 	strd	r3, sl, [sp]
 800cfbc:	2350      	movs	r3, #80	; 0x50
 800cfbe:	f005 fcab 	bl	8012918 <lv_style_transition_dsc_init>
    lv_style_transition_dsc_init(&trans_normal, trans_props, lv_anim_path_linear, TRANSITION_TIME, 0, NULL);
 800cfc2:	2350      	movs	r3, #80	; 0x50
 800cfc4:	4a78      	ldr	r2, [pc, #480]	; (800d1a8 <lv_theme_default_init+0x2b8>)
 800cfc6:	4979      	ldr	r1, [pc, #484]	; (800d1ac <lv_theme_default_init+0x2bc>)
 800cfc8:	487a      	ldr	r0, [pc, #488]	; (800d1b4 <lv_theme_default_init+0x2c4>)
 800cfca:	e9cd aa00 	strd	sl, sl, [sp]
 800cfce:	f005 fca3 	bl	8012918 <lv_style_transition_dsc_init>
    lv_style_set_transition(&styles->transition_delayed, &trans_delayed); /*Go back to default state with delay*/
 800cfd2:	6820      	ldr	r0, [r4, #0]
 800cfd4:	4976      	ldr	r1, [pc, #472]	; (800d1b0 <lv_theme_default_init+0x2c0>)
 800cfd6:	30d0      	adds	r0, #208	; 0xd0
 800cfd8:	f018 f891 	bl	80250fe <lv_style_set_transition>
    lv_style_set_transition(&styles->transition_normal, &trans_normal); /*Go back to default state with delay*/
 800cfdc:	6820      	ldr	r0, [r4, #0]
 800cfde:	4975      	ldr	r1, [pc, #468]	; (800d1b4 <lv_theme_default_init+0x2c4>)
 800cfe0:	30d8      	adds	r0, #216	; 0xd8
 800cfe2:	f018 f88c 	bl	80250fe <lv_style_set_transition>
    style_init_reset(&styles->scrollbar);
 800cfe6:	6820      	ldr	r0, [r4, #0]
 800cfe8:	3008      	adds	r0, #8
 800cfea:	f7ff ff77 	bl	800cedc <style_init_reset>
    lv_color_t sb_color = (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 800cfee:	6a2b      	ldr	r3, [r5, #32]
                                                                        2) : lv_palette_main(LV_PALETTE_GREY);
 800cff0:	07da      	lsls	r2, r3, #31
 800cff2:	f141 8157 	bpl.w	800e2a4 <lv_theme_default_init+0x13b4>
    lv_color_t sb_color = (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 800cff6:	2102      	movs	r1, #2
 800cff8:	2012      	movs	r0, #18
 800cffa:	f005 fb0f 	bl	801261c <lv_palette_darken>
                                                                        2) : lv_palette_main(LV_PALETTE_GREY);
 800cffe:	4601      	mov	r1, r0
    lv_style_set_bg_color(&styles->scrollbar, sb_color);
 800d000:	6820      	ldr	r0, [r4, #0]
 800d002:	3008      	adds	r0, #8
 800d004:	f017 ffd3 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_radius(&styles->scrollbar, LV_RADIUS_CIRCLE);
 800d008:	6820      	ldr	r0, [r4, #0]
 800d00a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800d00e:	3008      	adds	r0, #8
 800d010:	f018 f861 	bl	80250d6 <lv_style_set_radius>
    lv_style_set_pad_all(&styles->scrollbar, lv_disp_dpx(theme.disp, 7));
 800d014:	6823      	ldr	r3, [r4, #0]
 800d016:	2107      	movs	r1, #7
 800d018:	68e8      	ldr	r0, [r5, #12]
 800d01a:	f103 0a08 	add.w	sl, r3, #8
 * @param n     the number of pixels to scale
 * @return      `n x current_dpi/160`
 */
static inline lv_coord_t lv_disp_dpx(const lv_disp_t * disp, lv_coord_t n)
{
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 800d01e:	f016 f816 	bl	802304e <lv_disp_dpx.part.0>
 800d022:	4601      	mov	r1, r0
 800d024:	4650      	mov	r0, sl
 800d026:	f015 ffff 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_width(&styles->scrollbar,  lv_disp_dpx(theme.disp, 5));
 800d02a:	6823      	ldr	r3, [r4, #0]
 800d02c:	2105      	movs	r1, #5
 800d02e:	68e8      	ldr	r0, [r5, #12]
 800d030:	f103 0a08 	add.w	sl, r3, #8
 800d034:	f016 f80b 	bl	802304e <lv_disp_dpx.part.0>
 800d038:	4601      	mov	r1, r0
 800d03a:	4650      	mov	r0, sl
 800d03c:	f017 ff87 	bl	8024f4e <lv_style_set_width>
    lv_style_set_bg_opa(&styles->scrollbar,  LV_OPA_40);
 800d040:	6820      	ldr	r0, [r4, #0]
 800d042:	2166      	movs	r1, #102	; 0x66
 800d044:	3008      	adds	r0, #8
 800d046:	f017 ffbb 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_transition(&styles->scrollbar, &trans_normal);
 800d04a:	6820      	ldr	r0, [r4, #0]
 800d04c:	4959      	ldr	r1, [pc, #356]	; (800d1b4 <lv_theme_default_init+0x2c4>)
 800d04e:	3008      	adds	r0, #8
 800d050:	f018 f855 	bl	80250fe <lv_style_set_transition>
    style_init_reset(&styles->scrollbar_scrolled);
 800d054:	6820      	ldr	r0, [r4, #0]
 800d056:	3010      	adds	r0, #16
 800d058:	f7ff ff40 	bl	800cedc <style_init_reset>
    lv_style_set_bg_opa(&styles->scrollbar_scrolled,  LV_OPA_COVER);
 800d05c:	6820      	ldr	r0, [r4, #0]
 800d05e:	21ff      	movs	r1, #255	; 0xff
 800d060:	3010      	adds	r0, #16
 800d062:	f017 ffad 	bl	8024fc0 <lv_style_set_bg_opa>
    style_init_reset(&styles->scr);
 800d066:	6820      	ldr	r0, [r4, #0]
 800d068:	f7ff ff38 	bl	800cedc <style_init_reset>
    lv_style_set_bg_opa(&styles->scr, LV_OPA_COVER);
 800d06c:	21ff      	movs	r1, #255	; 0xff
 800d06e:	6820      	ldr	r0, [r4, #0]
 800d070:	f017 ffa6 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, color_scr);
 800d074:	f8bb 1000 	ldrh.w	r1, [fp]
 800d078:	6820      	ldr	r0, [r4, #0]
 800d07a:	f017 ff98 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, color_text);
 800d07e:	8839      	ldrh	r1, [r7, #0]
 800d080:	6820      	ldr	r0, [r4, #0]
 800d082:	f018 f813 	bl	80250ac <lv_style_set_text_color>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 800d086:	7833      	ldrb	r3, [r6, #0]
 800d088:	f8d4 a000 	ldr.w	sl, [r4]
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	f041 810e 	bne.w	800e2ae <lv_theme_default_init+0x13be>
 800d092:	210e      	movs	r1, #14
 800d094:	68e8      	ldr	r0, [r5, #12]
 800d096:	f015 ffda 	bl	802304e <lv_disp_dpx.part.0>
 800d09a:	4601      	mov	r1, r0
 800d09c:	4650      	mov	r0, sl
 800d09e:	f017 ff7e 	bl	8024f9e <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 800d0a2:	7833      	ldrb	r3, [r6, #0]
 800d0a4:	f8d4 a000 	ldr.w	sl, [r4]
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	f041 8107 	bne.w	800e2bc <lv_theme_default_init+0x13cc>
 800d0ae:	210e      	movs	r1, #14
 800d0b0:	68e8      	ldr	r0, [r5, #12]
 800d0b2:	f015 ffcc 	bl	802304e <lv_disp_dpx.part.0>
 800d0b6:	4601      	mov	r1, r0
 800d0b8:	4650      	mov	r0, sl
 800d0ba:	f017 ff74 	bl	8024fa6 <lv_style_set_pad_column>
    style_init_reset(&styles->card);
 800d0be:	6820      	ldr	r0, [r4, #0]
 800d0c0:	3018      	adds	r0, #24
 800d0c2:	f7ff ff0b 	bl	800cedc <style_init_reset>
    lv_style_set_radius(&styles->card, RADIUS_DEFAULT);
 800d0c6:	6823      	ldr	r3, [r4, #0]
 800d0c8:	68e8      	ldr	r0, [r5, #12]
 800d0ca:	f103 0a18 	add.w	sl, r3, #24
 800d0ce:	7833      	ldrb	r3, [r6, #0]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	bf0c      	ite	eq
 800d0d4:	210c      	moveq	r1, #12
 800d0d6:	2108      	movne	r1, #8
 800d0d8:	f015 ffb9 	bl	802304e <lv_disp_dpx.part.0>
 800d0dc:	4601      	mov	r1, r0
 800d0de:	4650      	mov	r0, sl
 800d0e0:	f017 fff9 	bl	80250d6 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->card, LV_OPA_COVER);
 800d0e4:	6820      	ldr	r0, [r4, #0]
 800d0e6:	21ff      	movs	r1, #255	; 0xff
 800d0e8:	3018      	adds	r0, #24
 800d0ea:	f017 ff69 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->card, color_card);
 800d0ee:	6820      	ldr	r0, [r4, #0]
 800d0f0:	f8b9 1000 	ldrh.w	r1, [r9]
 800d0f4:	3018      	adds	r0, #24
 800d0f6:	f017 ff5a 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->card, color_grey);
 800d0fa:	6820      	ldr	r0, [r4, #0]
 800d0fc:	f8b8 1000 	ldrh.w	r1, [r8]
 800d100:	3018      	adds	r0, #24
 800d102:	f017 ff6e 	bl	8024fe2 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->card, BORDER_WIDTH);
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	2102      	movs	r1, #2
 800d10a:	68e8      	ldr	r0, [r5, #12]
 800d10c:	f103 0a18 	add.w	sl, r3, #24
 800d110:	f015 ff9d 	bl	802304e <lv_disp_dpx.part.0>
 800d114:	4601      	mov	r1, r0
 800d116:	4650      	mov	r0, sl
 800d118:	f017 ff70 	bl	8024ffc <lv_style_set_border_width>
    lv_style_set_border_post(&styles->card, true);
 800d11c:	6820      	ldr	r0, [r4, #0]
 800d11e:	2101      	movs	r1, #1
 800d120:	3018      	adds	r0, #24
 800d122:	f017 ff73 	bl	802500c <lv_style_set_border_post>
    lv_style_set_text_color(&styles->card, color_text);
 800d126:	6820      	ldr	r0, [r4, #0]
 800d128:	8839      	ldrh	r1, [r7, #0]
 800d12a:	3018      	adds	r0, #24
 800d12c:	f017 ffbe 	bl	80250ac <lv_style_set_text_color>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 800d130:	6823      	ldr	r3, [r4, #0]
 800d132:	f103 0a18 	add.w	sl, r3, #24
 800d136:	7833      	ldrb	r3, [r6, #0]
 800d138:	2b01      	cmp	r3, #1
 800d13a:	f041 80c6 	bne.w	800e2ca <lv_theme_default_init+0x13da>
 800d13e:	2118      	movs	r1, #24
 800d140:	68e8      	ldr	r0, [r5, #12]
 800d142:	f015 ff84 	bl	802304e <lv_disp_dpx.part.0>
 800d146:	4601      	mov	r1, r0
 800d148:	4650      	mov	r0, sl
 800d14a:	f015 ff6d 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 800d14e:	6823      	ldr	r3, [r4, #0]
 800d150:	f103 0a18 	add.w	sl, r3, #24
 800d154:	7833      	ldrb	r3, [r6, #0]
 800d156:	2b01      	cmp	r3, #1
 800d158:	f041 80be 	bne.w	800e2d8 <lv_theme_default_init+0x13e8>
 800d15c:	210e      	movs	r1, #14
 800d15e:	68e8      	ldr	r0, [r5, #12]
 800d160:	f015 ff75 	bl	802304e <lv_disp_dpx.part.0>
 800d164:	4601      	mov	r1, r0
 800d166:	4650      	mov	r0, sl
 800d168:	f017 ff19 	bl	8024f9e <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 800d16c:	6823      	ldr	r3, [r4, #0]
 800d16e:	f103 0a18 	add.w	sl, r3, #24
 800d172:	7833      	ldrb	r3, [r6, #0]
 800d174:	2b01      	cmp	r3, #1
 800d176:	f041 80b6 	bne.w	800e2e6 <lv_theme_default_init+0x13f6>
 800d17a:	210e      	movs	r1, #14
 800d17c:	68e8      	ldr	r0, [r5, #12]
 800d17e:	e01b      	b.n	800d1b8 <lv_theme_default_init+0x2c8>
 800d180:	24001208 	.word	0x24001208
 800d184:	240011d0 	.word	0x240011d0
 800d188:	24010e30 	.word	0x24010e30
 800d18c:	24010e31 	.word	0x24010e31
 800d190:	240011ac 	.word	0x240011ac
 800d194:	0800c029 	.word	0x0800c029
 800d198:	24010d1c 	.word	0x24010d1c
 800d19c:	24010d1a 	.word	0x24010d1a
 800d1a0:	24010d18 	.word	0x24010d18
 800d1a4:	24010d16 	.word	0x24010d16
 800d1a8:	0802416f 	.word	0x0802416f
 800d1ac:	08029b5a 	.word	0x08029b5a
 800d1b0:	24001198 	.word	0x24001198
 800d1b4:	24001184 	.word	0x24001184
 800d1b8:	f015 ff49 	bl	802304e <lv_disp_dpx.part.0>
 800d1bc:	4601      	mov	r1, r0
 800d1be:	4650      	mov	r0, sl
 800d1c0:	f017 fef1 	bl	8024fa6 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->card, lv_palette_main(LV_PALETTE_GREY));
 800d1c4:	6823      	ldr	r3, [r4, #0]
 800d1c6:	2012      	movs	r0, #18
 800d1c8:	f103 0a18 	add.w	sl, r3, #24
 800d1cc:	f005 fa0a 	bl	80125e4 <lv_palette_main>
 800d1d0:	4601      	mov	r1, r0
 800d1d2:	4650      	mov	r0, sl
 800d1d4:	f017 ff50 	bl	8025078 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->card, lv_disp_dpx(theme.disp, 1));
 800d1d8:	6823      	ldr	r3, [r4, #0]
 800d1da:	2101      	movs	r1, #1
 800d1dc:	68e8      	ldr	r0, [r5, #12]
 800d1de:	f103 0a18 	add.w	sl, r3, #24
 800d1e2:	f015 ff34 	bl	802304e <lv_disp_dpx.part.0>
 800d1e6:	4601      	mov	r1, r0
 800d1e8:	4650      	mov	r0, sl
 800d1ea:	f017 ff41 	bl	8025070 <lv_style_set_line_width>
    style_init_reset(&styles->outline_primary);
 800d1ee:	6820      	ldr	r0, [r4, #0]
 800d1f0:	30a0      	adds	r0, #160	; 0xa0
 800d1f2:	f7ff fe73 	bl	800cedc <style_init_reset>
    lv_style_set_outline_color(&styles->outline_primary, theme.color_primary);
 800d1f6:	6820      	ldr	r0, [r4, #0]
 800d1f8:	8a29      	ldrh	r1, [r5, #16]
 800d1fa:	30a0      	adds	r0, #160	; 0xa0
 800d1fc:	f017 ff0e 	bl	802501c <lv_style_set_outline_color>
    lv_style_set_outline_width(&styles->outline_primary, OUTLINE_WIDTH);
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	2103      	movs	r1, #3
 800d204:	68e8      	ldr	r0, [r5, #12]
 800d206:	f103 0aa0 	add.w	sl, r3, #160	; 0xa0
 800d20a:	f015 ff20 	bl	802304e <lv_disp_dpx.part.0>
 800d20e:	4601      	mov	r1, r0
 800d210:	4650      	mov	r0, sl
 800d212:	f017 feff 	bl	8025014 <lv_style_set_outline_width>
    lv_style_set_outline_pad(&styles->outline_primary, OUTLINE_WIDTH);
 800d216:	6823      	ldr	r3, [r4, #0]
 800d218:	2103      	movs	r1, #3
 800d21a:	68e8      	ldr	r0, [r5, #12]
 800d21c:	f103 0aa0 	add.w	sl, r3, #160	; 0xa0
 800d220:	f015 ff15 	bl	802304e <lv_disp_dpx.part.0>
 800d224:	4601      	mov	r1, r0
 800d226:	4650      	mov	r0, sl
 800d228:	f017 ff05 	bl	8025036 <lv_style_set_outline_pad>
    lv_style_set_outline_opa(&styles->outline_primary, LV_OPA_50);
 800d22c:	6820      	ldr	r0, [r4, #0]
 800d22e:	217f      	movs	r1, #127	; 0x7f
 800d230:	30a0      	adds	r0, #160	; 0xa0
 800d232:	f017 fefc 	bl	802502e <lv_style_set_outline_opa>
    style_init_reset(&styles->outline_secondary);
 800d236:	6820      	ldr	r0, [r4, #0]
 800d238:	30a8      	adds	r0, #168	; 0xa8
 800d23a:	f7ff fe4f 	bl	800cedc <style_init_reset>
    lv_style_set_outline_color(&styles->outline_secondary, theme.color_secondary);
 800d23e:	6820      	ldr	r0, [r4, #0]
 800d240:	8a69      	ldrh	r1, [r5, #18]
 800d242:	30a8      	adds	r0, #168	; 0xa8
 800d244:	f017 feea 	bl	802501c <lv_style_set_outline_color>
    lv_style_set_outline_width(&styles->outline_secondary, OUTLINE_WIDTH);
 800d248:	6823      	ldr	r3, [r4, #0]
 800d24a:	2103      	movs	r1, #3
 800d24c:	68e8      	ldr	r0, [r5, #12]
 800d24e:	f103 0aa8 	add.w	sl, r3, #168	; 0xa8
 800d252:	f015 fefc 	bl	802304e <lv_disp_dpx.part.0>
 800d256:	4601      	mov	r1, r0
 800d258:	4650      	mov	r0, sl
 800d25a:	f017 fedb 	bl	8025014 <lv_style_set_outline_width>
    lv_style_set_outline_opa(&styles->outline_secondary, LV_OPA_50);
 800d25e:	6820      	ldr	r0, [r4, #0]
 800d260:	217f      	movs	r1, #127	; 0x7f
 800d262:	30a8      	adds	r0, #168	; 0xa8
 800d264:	f017 fee3 	bl	802502e <lv_style_set_outline_opa>
    style_init_reset(&styles->btn);
 800d268:	6820      	ldr	r0, [r4, #0]
 800d26a:	3020      	adds	r0, #32
 800d26c:	f7ff fe36 	bl	800cedc <style_init_reset>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp,
 800d270:	6823      	ldr	r3, [r4, #0]
 800d272:	f103 0a20 	add.w	sl, r3, #32
 800d276:	7833      	ldrb	r3, [r6, #0]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	f041 803b 	bne.w	800e2f4 <lv_theme_default_init+0x1404>
 800d27e:	2110      	movs	r1, #16
 800d280:	68e8      	ldr	r0, [r5, #12]
 800d282:	f015 fee4 	bl	802304e <lv_disp_dpx.part.0>
 800d286:	4601      	mov	r1, r0
 800d288:	4650      	mov	r0, sl
 800d28a:	f017 ff24 	bl	80250d6 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->btn, LV_OPA_COVER);
 800d28e:	6820      	ldr	r0, [r4, #0]
 800d290:	21ff      	movs	r1, #255	; 0xff
 800d292:	3020      	adds	r0, #32
 800d294:	f017 fe94 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->btn, color_grey);
 800d298:	6820      	ldr	r0, [r4, #0]
 800d29a:	f8b8 1000 	ldrh.w	r1, [r8]
 800d29e:	3020      	adds	r0, #32
 800d2a0:	f017 fe85 	bl	8024fae <lv_style_set_bg_color>
    if(!(theme.flags & MODE_DARK)) {
 800d2a4:	6a2b      	ldr	r3, [r5, #32]
 800d2a6:	f013 0a01 	ands.w	sl, r3, #1
 800d2aa:	d143      	bne.n	800d334 <lv_theme_default_init+0x444>
        lv_style_set_shadow_color(&styles->btn, lv_palette_main(LV_PALETTE_GREY));
 800d2ac:	6823      	ldr	r3, [r4, #0]
 800d2ae:	2012      	movs	r0, #18
 800d2b0:	f103 0b20 	add.w	fp, r3, #32
 800d2b4:	f005 f996 	bl	80125e4 <lv_palette_main>
 800d2b8:	4601      	mov	r1, r0
 800d2ba:	4658      	mov	r0, fp
 800d2bc:	f017 fecb 	bl	8025056 <lv_style_set_shadow_color>
        lv_style_set_shadow_width(&styles->btn, LV_DPX(3));
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	4650      	mov	r0, sl
 800d2c4:	f103 0b20 	add.w	fp, r3, #32
 800d2c8:	f004 ff3a 	bl	8012140 <lv_disp_get_dpi>
 800d2cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d2d0:	28ef      	cmp	r0, #239	; 0xef
 800d2d2:	f341 8016 	ble.w	800e302 <lv_theme_default_init+0x1412>
 800d2d6:	4650      	mov	r0, sl
 800d2d8:	f004 ff32 	bl	8012140 <lv_disp_get_dpi>
 800d2dc:	2303      	movs	r3, #3
 800d2de:	2150      	movs	r1, #80	; 0x50
 800d2e0:	fb00 1103 	mla	r1, r0, r3, r1
 800d2e4:	23a0      	movs	r3, #160	; 0xa0
 800d2e6:	fb91 f1f3 	sdiv	r1, r1, r3
 800d2ea:	b209      	sxth	r1, r1
 800d2ec:	4658      	mov	r0, fp
 800d2ee:	f017 fea6 	bl	802503e <lv_style_set_shadow_width>
        lv_style_set_shadow_opa(&styles->btn, LV_OPA_50);
 800d2f2:	6820      	ldr	r0, [r4, #0]
 800d2f4:	217f      	movs	r1, #127	; 0x7f
 800d2f6:	3020      	adds	r0, #32
 800d2f8:	f017 feb6 	bl	8025068 <lv_style_set_shadow_opa>
        lv_style_set_shadow_ofs_y(&styles->btn, lv_disp_dpx(theme.disp, LV_DPX(4)));
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	2000      	movs	r0, #0
 800d300:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 800d304:	f103 0a20 	add.w	sl, r3, #32
 800d308:	f004 ff1a 	bl	8012140 <lv_disp_get_dpi>
 800d30c:	283b      	cmp	r0, #59	; 0x3b
 800d30e:	f340 87fb 	ble.w	800e308 <lv_theme_default_init+0x1418>
 800d312:	2000      	movs	r0, #0
 800d314:	f004 ff14 	bl	8012140 <lv_disp_get_dpi>
 800d318:	2328      	movs	r3, #40	; 0x28
 800d31a:	f100 0114 	add.w	r1, r0, #20
 800d31e:	fb91 f1f3 	sdiv	r1, r1, r3
 800d322:	b121      	cbz	r1, 800d32e <lv_theme_default_init+0x43e>
 800d324:	b209      	sxth	r1, r1
 800d326:	4658      	mov	r0, fp
 800d328:	f015 fe91 	bl	802304e <lv_disp_dpx.part.0>
 800d32c:	4601      	mov	r1, r0
 800d32e:	4650      	mov	r0, sl
 800d330:	f017 fe89 	bl	8025046 <lv_style_set_shadow_ofs_y>
    lv_style_set_text_color(&styles->btn, color_text);
 800d334:	6820      	ldr	r0, [r4, #0]
 800d336:	8839      	ldrh	r1, [r7, #0]
 800d338:	3020      	adds	r0, #32
 800d33a:	f017 feb7 	bl	80250ac <lv_style_set_text_color>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 800d33e:	6823      	ldr	r3, [r4, #0]
 800d340:	f103 0a20 	add.w	sl, r3, #32
 800d344:	7833      	ldrb	r3, [r6, #0]
 800d346:	2b01      	cmp	r3, #1
 800d348:	f040 87e1 	bne.w	800e30e <lv_theme_default_init+0x141e>
 800d34c:	2118      	movs	r1, #24
 800d34e:	68e8      	ldr	r0, [r5, #12]
 800d350:	f015 fe7d 	bl	802304e <lv_disp_dpx.part.0>
 800d354:	4601      	mov	r1, r0
 800d356:	4650      	mov	r0, sl
 800d358:	f015 fe5b 	bl	8023012 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 800d35c:	6823      	ldr	r3, [r4, #0]
 800d35e:	f103 0a20 	add.w	sl, r3, #32
 800d362:	7833      	ldrb	r3, [r6, #0]
 800d364:	2b01      	cmp	r3, #1
 800d366:	f040 87d9 	bne.w	800e31c <lv_theme_default_init+0x142c>
 800d36a:	210e      	movs	r1, #14
 800d36c:	68e8      	ldr	r0, [r5, #12]
 800d36e:	f015 fe6e 	bl	802304e <lv_disp_dpx.part.0>
 800d372:	4601      	mov	r1, r0
 800d374:	4650      	mov	r0, sl
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
}

static inline void lv_color_filter_dsc_init(lv_color_filter_dsc_t * dsc, lv_color_filter_cb_t cb)
{
    dsc->filter_cb = cb;
 800d376:	f8df b220 	ldr.w	fp, [pc, #544]	; 800d598 <lv_theme_default_init+0x6a8>
 800d37a:	f015 fe30 	bl	8022fde <lv_style_set_pad_ver>
    lv_style_set_pad_column(&styles->btn, lv_disp_dpx(theme.disp, 5));
 800d37e:	6823      	ldr	r3, [r4, #0]
 800d380:	2105      	movs	r1, #5
 800d382:	68e8      	ldr	r0, [r5, #12]
 800d384:	f103 0a20 	add.w	sl, r3, #32
 800d388:	f015 fe61 	bl	802304e <lv_disp_dpx.part.0>
 800d38c:	4601      	mov	r1, r0
 800d38e:	4650      	mov	r0, sl
 800d390:	f017 fe09 	bl	8024fa6 <lv_style_set_pad_column>
    lv_style_set_pad_row(&styles->btn, lv_disp_dpx(theme.disp, 5));
 800d394:	6823      	ldr	r3, [r4, #0]
 800d396:	2105      	movs	r1, #5
 800d398:	68e8      	ldr	r0, [r5, #12]
 800d39a:	f103 0a20 	add.w	sl, r3, #32
 800d39e:	f015 fe56 	bl	802304e <lv_disp_dpx.part.0>
 800d3a2:	4601      	mov	r1, r0
 800d3a4:	4650      	mov	r0, sl
 800d3a6:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 800d59c <lv_theme_default_init+0x6ac>
 800d3aa:	f017 fdf8 	bl	8024f9e <lv_style_set_pad_row>
 800d3ae:	4b7c      	ldr	r3, [pc, #496]	; (800d5a0 <lv_theme_default_init+0x6b0>)
    style_init_reset(&styles->pressed);
 800d3b0:	6820      	ldr	r0, [r4, #0]
 800d3b2:	f8cb 3000 	str.w	r3, [fp]
 800d3b6:	4b7b      	ldr	r3, [pc, #492]	; (800d5a4 <lv_theme_default_init+0x6b4>)
 800d3b8:	3058      	adds	r0, #88	; 0x58
 800d3ba:	f8ca 3000 	str.w	r3, [sl]
 800d3be:	f7ff fd8d 	bl	800cedc <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->pressed, &dark_filter);
 800d3c2:	6820      	ldr	r0, [r4, #0]
 800d3c4:	4659      	mov	r1, fp
 800d3c6:	3058      	adds	r0, #88	; 0x58
 800d3c8:	f017 fe8d 	bl	80250e6 <lv_style_set_color_filter_dsc>
    lv_style_set_color_filter_opa(&styles->pressed, 35);
 800d3cc:	6820      	ldr	r0, [r4, #0]
 800d3ce:	2123      	movs	r1, #35	; 0x23
 800d3d0:	3058      	adds	r0, #88	; 0x58
 800d3d2:	f017 fe8c 	bl	80250ee <lv_style_set_color_filter_opa>
    style_init_reset(&styles->disabled);
 800d3d6:	6820      	ldr	r0, [r4, #0]
 800d3d8:	3060      	adds	r0, #96	; 0x60
 800d3da:	f7ff fd7f 	bl	800cedc <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->disabled, &grey_filter);
 800d3de:	6820      	ldr	r0, [r4, #0]
 800d3e0:	4651      	mov	r1, sl
 800d3e2:	3060      	adds	r0, #96	; 0x60
 800d3e4:	f017 fe7f 	bl	80250e6 <lv_style_set_color_filter_dsc>
    lv_style_set_color_filter_opa(&styles->disabled, LV_OPA_50);
 800d3e8:	6820      	ldr	r0, [r4, #0]
 800d3ea:	217f      	movs	r1, #127	; 0x7f
 800d3ec:	3060      	adds	r0, #96	; 0x60
 800d3ee:	f017 fe7e 	bl	80250ee <lv_style_set_color_filter_opa>
    style_init_reset(&styles->clip_corner);
 800d3f2:	6820      	ldr	r0, [r4, #0]
 800d3f4:	30c0      	adds	r0, #192	; 0xc0
 800d3f6:	f7ff fd71 	bl	800cedc <style_init_reset>
    lv_style_set_clip_corner(&styles->clip_corner, true);
 800d3fa:	6820      	ldr	r0, [r4, #0]
 800d3fc:	2101      	movs	r1, #1
 800d3fe:	30c0      	adds	r0, #192	; 0xc0
 800d400:	f017 fe6d 	bl	80250de <lv_style_set_clip_corner>
    lv_style_set_border_post(&styles->clip_corner, true);
 800d404:	6820      	ldr	r0, [r4, #0]
 800d406:	2101      	movs	r1, #1
 800d408:	30c0      	adds	r0, #192	; 0xc0
 800d40a:	f017 fdff 	bl	802500c <lv_style_set_border_post>
    style_init_reset(&styles->pad_normal);
 800d40e:	6820      	ldr	r0, [r4, #0]
 800d410:	3080      	adds	r0, #128	; 0x80
 800d412:	f7ff fd63 	bl	800cedc <style_init_reset>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	f103 0a80 	add.w	sl, r3, #128	; 0x80
 800d41c:	7833      	ldrb	r3, [r6, #0]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	f040 8783 	bne.w	800e32a <lv_theme_default_init+0x143a>
 800d424:	2118      	movs	r1, #24
 800d426:	68e8      	ldr	r0, [r5, #12]
 800d428:	f015 fe11 	bl	802304e <lv_disp_dpx.part.0>
 800d42c:	4601      	mov	r1, r0
 800d42e:	4650      	mov	r0, sl
 800d430:	f015 fdfa 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 800d434:	6823      	ldr	r3, [r4, #0]
 800d436:	f103 0a80 	add.w	sl, r3, #128	; 0x80
 800d43a:	7833      	ldrb	r3, [r6, #0]
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	f040 877b 	bne.w	800e338 <lv_theme_default_init+0x1448>
 800d442:	2118      	movs	r1, #24
 800d444:	68e8      	ldr	r0, [r5, #12]
 800d446:	f015 fe02 	bl	802304e <lv_disp_dpx.part.0>
 800d44a:	4601      	mov	r1, r0
 800d44c:	4650      	mov	r0, sl
 800d44e:	f017 fda6 	bl	8024f9e <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 800d452:	6823      	ldr	r3, [r4, #0]
 800d454:	f103 0a80 	add.w	sl, r3, #128	; 0x80
 800d458:	7833      	ldrb	r3, [r6, #0]
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	f040 8773 	bne.w	800e346 <lv_theme_default_init+0x1456>
 800d460:	2118      	movs	r1, #24
 800d462:	68e8      	ldr	r0, [r5, #12]
 800d464:	f015 fdf3 	bl	802304e <lv_disp_dpx.part.0>
 800d468:	4601      	mov	r1, r0
 800d46a:	4650      	mov	r0, sl
 800d46c:	f017 fd9b 	bl	8024fa6 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_small);
 800d470:	6820      	ldr	r0, [r4, #0]
 800d472:	3078      	adds	r0, #120	; 0x78
 800d474:	f7ff fd32 	bl	800cedc <style_init_reset>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 800d478:	6823      	ldr	r3, [r4, #0]
 800d47a:	f103 0a78 	add.w	sl, r3, #120	; 0x78
 800d47e:	7833      	ldrb	r3, [r6, #0]
 800d480:	2b01      	cmp	r3, #1
 800d482:	f040 8767 	bne.w	800e354 <lv_theme_default_init+0x1464>
 800d486:	210e      	movs	r1, #14
 800d488:	68e8      	ldr	r0, [r5, #12]
 800d48a:	f015 fde0 	bl	802304e <lv_disp_dpx.part.0>
 800d48e:	4601      	mov	r1, r0
 800d490:	4650      	mov	r0, sl
 800d492:	f015 fdc9 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 800d496:	6823      	ldr	r3, [r4, #0]
 800d498:	f103 0a78 	add.w	sl, r3, #120	; 0x78
 800d49c:	7833      	ldrb	r3, [r6, #0]
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	f040 875f 	bne.w	800e362 <lv_theme_default_init+0x1472>
 800d4a4:	210e      	movs	r1, #14
 800d4a6:	68e8      	ldr	r0, [r5, #12]
 800d4a8:	f015 fdd1 	bl	802304e <lv_disp_dpx.part.0>
 800d4ac:	4601      	mov	r1, r0
 800d4ae:	4650      	mov	r0, sl
 800d4b0:	f015 fd8a 	bl	8022fc8 <lv_style_set_pad_gap>
    style_init_reset(&styles->pad_gap);
 800d4b4:	6820      	ldr	r0, [r4, #0]
 800d4b6:	3088      	adds	r0, #136	; 0x88
 800d4b8:	f7ff fd10 	bl	800cedc <style_init_reset>
    lv_style_set_pad_row(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 800d4bc:	6823      	ldr	r3, [r4, #0]
 800d4be:	210a      	movs	r1, #10
 800d4c0:	68e8      	ldr	r0, [r5, #12]
 800d4c2:	f103 0a88 	add.w	sl, r3, #136	; 0x88
 800d4c6:	f015 fdc2 	bl	802304e <lv_disp_dpx.part.0>
 800d4ca:	4601      	mov	r1, r0
 800d4cc:	4650      	mov	r0, sl
 800d4ce:	f017 fd66 	bl	8024f9e <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 800d4d2:	6823      	ldr	r3, [r4, #0]
 800d4d4:	210a      	movs	r1, #10
 800d4d6:	68e8      	ldr	r0, [r5, #12]
 800d4d8:	f103 0a88 	add.w	sl, r3, #136	; 0x88
 800d4dc:	f015 fdb7 	bl	802304e <lv_disp_dpx.part.0>
 800d4e0:	4601      	mov	r1, r0
 800d4e2:	4650      	mov	r0, sl
 800d4e4:	f017 fd5f 	bl	8024fa6 <lv_style_set_pad_column>
    style_init_reset(&styles->line_space_large);
 800d4e8:	6820      	ldr	r0, [r4, #0]
 800d4ea:	3090      	adds	r0, #144	; 0x90
 800d4ec:	f7ff fcf6 	bl	800cedc <style_init_reset>
    lv_style_set_text_line_space(&styles->line_space_large, lv_disp_dpx(theme.disp, 20));
 800d4f0:	6823      	ldr	r3, [r4, #0]
 800d4f2:	2114      	movs	r1, #20
 800d4f4:	68e8      	ldr	r0, [r5, #12]
 800d4f6:	f103 0a90 	add.w	sl, r3, #144	; 0x90
 800d4fa:	f015 fda8 	bl	802304e <lv_disp_dpx.part.0>
 800d4fe:	4601      	mov	r1, r0
 800d500:	4650      	mov	r0, sl
 800d502:	f017 fde0 	bl	80250c6 <lv_style_set_text_line_space>
    style_init_reset(&styles->text_align_center);
 800d506:	6820      	ldr	r0, [r4, #0]
 800d508:	3098      	adds	r0, #152	; 0x98
 800d50a:	f7ff fce7 	bl	800cedc <style_init_reset>
    lv_style_set_text_align(&styles->text_align_center, LV_TEXT_ALIGN_CENTER);
 800d50e:	6820      	ldr	r0, [r4, #0]
 800d510:	2102      	movs	r1, #2
 800d512:	3098      	adds	r0, #152	; 0x98
 800d514:	f017 fddb 	bl	80250ce <lv_style_set_text_align>
    style_init_reset(&styles->pad_zero);
 800d518:	6820      	ldr	r0, [r4, #0]
 800d51a:	3068      	adds	r0, #104	; 0x68
 800d51c:	f7ff fcde 	bl	800cedc <style_init_reset>
    lv_style_set_pad_all(&styles->pad_zero, 0);
 800d520:	6820      	ldr	r0, [r4, #0]
 800d522:	2100      	movs	r1, #0
 800d524:	3068      	adds	r0, #104	; 0x68
 800d526:	f015 fd7f 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_zero, 0);
 800d52a:	6820      	ldr	r0, [r4, #0]
 800d52c:	2100      	movs	r1, #0
 800d52e:	3068      	adds	r0, #104	; 0x68
 800d530:	f017 fd35 	bl	8024f9e <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_zero, 0);
 800d534:	6820      	ldr	r0, [r4, #0]
 800d536:	2100      	movs	r1, #0
 800d538:	3068      	adds	r0, #104	; 0x68
 800d53a:	f017 fd34 	bl	8024fa6 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_tiny);
 800d53e:	6820      	ldr	r0, [r4, #0]
 800d540:	3070      	adds	r0, #112	; 0x70
 800d542:	f7ff fccb 	bl	800cedc <style_init_reset>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 800d546:	6823      	ldr	r3, [r4, #0]
 800d548:	f103 0a70 	add.w	sl, r3, #112	; 0x70
 800d54c:	7833      	ldrb	r3, [r6, #0]
 800d54e:	2b01      	cmp	r3, #1
 800d550:	f040 870e 	bne.w	800e370 <lv_theme_default_init+0x1480>
 800d554:	2108      	movs	r1, #8
 800d556:	68e8      	ldr	r0, [r5, #12]
 800d558:	f015 fd79 	bl	802304e <lv_disp_dpx.part.0>
 800d55c:	4601      	mov	r1, r0
 800d55e:	4650      	mov	r0, sl
 800d560:	f015 fd62 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 800d564:	6823      	ldr	r3, [r4, #0]
 800d566:	f103 0a70 	add.w	sl, r3, #112	; 0x70
 800d56a:	7833      	ldrb	r3, [r6, #0]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	f040 8706 	bne.w	800e37e <lv_theme_default_init+0x148e>
 800d572:	2108      	movs	r1, #8
 800d574:	68e8      	ldr	r0, [r5, #12]
 800d576:	f015 fd6a 	bl	802304e <lv_disp_dpx.part.0>
 800d57a:	4601      	mov	r1, r0
 800d57c:	4650      	mov	r0, sl
 800d57e:	f017 fd0e 	bl	8024f9e <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 800d582:	6823      	ldr	r3, [r4, #0]
 800d584:	f103 0a70 	add.w	sl, r3, #112	; 0x70
 800d588:	7833      	ldrb	r3, [r6, #0]
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	f040 86fe 	bne.w	800e38c <lv_theme_default_init+0x149c>
 800d590:	2108      	movs	r1, #8
 800d592:	68e8      	ldr	r0, [r5, #12]
 800d594:	e008      	b.n	800d5a8 <lv_theme_default_init+0x6b8>
 800d596:	bf00      	nop
 800d598:	2400117c 	.word	0x2400117c
 800d59c:	24001174 	.word	0x24001174
 800d5a0:	08022ff5 	.word	0x08022ff5
 800d5a4:	0800ceb1 	.word	0x0800ceb1
 800d5a8:	f015 fd51 	bl	802304e <lv_disp_dpx.part.0>
 800d5ac:	4601      	mov	r1, r0
 800d5ae:	4650      	mov	r0, sl
 800d5b0:	f017 fcf9 	bl	8024fa6 <lv_style_set_pad_column>
    style_init_reset(&styles->bg_color_primary);
 800d5b4:	6820      	ldr	r0, [r4, #0]
 800d5b6:	3028      	adds	r0, #40	; 0x28
 800d5b8:	f7ff fc90 	bl	800cedc <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary, theme.color_primary);
 800d5bc:	6820      	ldr	r0, [r4, #0]
 800d5be:	8a29      	ldrh	r1, [r5, #16]
 800d5c0:	3028      	adds	r0, #40	; 0x28
 800d5c2:	f017 fcf4 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary, lv_color_white());
 800d5c6:	6820      	ldr	r0, [r4, #0]
 800d5c8:	f100 0328 	add.w	r3, r0, #40	; 0x28
 800d5cc:	f015 fcf9 	bl	8022fc2 <lv_color_white>
 800d5d0:	4601      	mov	r1, r0
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f017 fd6a 	bl	80250ac <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary, LV_OPA_COVER);
 800d5d8:	6820      	ldr	r0, [r4, #0]
 800d5da:	21ff      	movs	r1, #255	; 0xff
 800d5dc:	3028      	adds	r0, #40	; 0x28
 800d5de:	f017 fcef 	bl	8024fc0 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_primary_muted);
 800d5e2:	6820      	ldr	r0, [r4, #0]
 800d5e4:	3030      	adds	r0, #48	; 0x30
 800d5e6:	f7ff fc79 	bl	800cedc <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary_muted, theme.color_primary);
 800d5ea:	6820      	ldr	r0, [r4, #0]
 800d5ec:	8a29      	ldrh	r1, [r5, #16]
 800d5ee:	3030      	adds	r0, #48	; 0x30
 800d5f0:	f017 fcdd 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary_muted, theme.color_primary);
 800d5f4:	6820      	ldr	r0, [r4, #0]
 800d5f6:	8a29      	ldrh	r1, [r5, #16]
 800d5f8:	3030      	adds	r0, #48	; 0x30
 800d5fa:	f017 fd57 	bl	80250ac <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary_muted, LV_OPA_20);
 800d5fe:	6820      	ldr	r0, [r4, #0]
 800d600:	2133      	movs	r1, #51	; 0x33
 800d602:	3030      	adds	r0, #48	; 0x30
 800d604:	f017 fcdc 	bl	8024fc0 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary);
 800d608:	6820      	ldr	r0, [r4, #0]
 800d60a:	3038      	adds	r0, #56	; 0x38
 800d60c:	f7ff fc66 	bl	800cedc <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary, theme.color_secondary);
 800d610:	6820      	ldr	r0, [r4, #0]
 800d612:	8a69      	ldrh	r1, [r5, #18]
 800d614:	3038      	adds	r0, #56	; 0x38
 800d616:	f017 fcca 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary, lv_color_white());
 800d61a:	6820      	ldr	r0, [r4, #0]
 800d61c:	f100 0338 	add.w	r3, r0, #56	; 0x38
 800d620:	f015 fccf 	bl	8022fc2 <lv_color_white>
 800d624:	4601      	mov	r1, r0
 800d626:	4618      	mov	r0, r3
 800d628:	f017 fd40 	bl	80250ac <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary, LV_OPA_COVER);
 800d62c:	6820      	ldr	r0, [r4, #0]
 800d62e:	21ff      	movs	r1, #255	; 0xff
 800d630:	3038      	adds	r0, #56	; 0x38
 800d632:	f017 fcc5 	bl	8024fc0 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary_muted);
 800d636:	6820      	ldr	r0, [r4, #0]
 800d638:	3040      	adds	r0, #64	; 0x40
 800d63a:	f7ff fc4f 	bl	800cedc <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 800d63e:	6820      	ldr	r0, [r4, #0]
 800d640:	8a69      	ldrh	r1, [r5, #18]
 800d642:	3040      	adds	r0, #64	; 0x40
 800d644:	f017 fcb3 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 800d648:	6820      	ldr	r0, [r4, #0]
 800d64a:	8a69      	ldrh	r1, [r5, #18]
 800d64c:	3040      	adds	r0, #64	; 0x40
 800d64e:	f017 fd2d 	bl	80250ac <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary_muted, LV_OPA_20);
 800d652:	6820      	ldr	r0, [r4, #0]
 800d654:	2133      	movs	r1, #51	; 0x33
 800d656:	3040      	adds	r0, #64	; 0x40
 800d658:	f017 fcb2 	bl	8024fc0 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_grey);
 800d65c:	6820      	ldr	r0, [r4, #0]
 800d65e:	3048      	adds	r0, #72	; 0x48
 800d660:	f7ff fc3c 	bl	800cedc <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_grey, color_grey);
 800d664:	6820      	ldr	r0, [r4, #0]
 800d666:	f8b8 1000 	ldrh.w	r1, [r8]
 800d66a:	3048      	adds	r0, #72	; 0x48
 800d66c:	f017 fc9f 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_grey, LV_OPA_COVER);
 800d670:	6820      	ldr	r0, [r4, #0]
 800d672:	21ff      	movs	r1, #255	; 0xff
 800d674:	3048      	adds	r0, #72	; 0x48
 800d676:	f017 fca3 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_grey, color_text);
 800d67a:	6820      	ldr	r0, [r4, #0]
 800d67c:	8839      	ldrh	r1, [r7, #0]
 800d67e:	3048      	adds	r0, #72	; 0x48
 800d680:	f017 fd14 	bl	80250ac <lv_style_set_text_color>
    style_init_reset(&styles->bg_color_white);
 800d684:	6820      	ldr	r0, [r4, #0]
 800d686:	3050      	adds	r0, #80	; 0x50
 800d688:	f7ff fc28 	bl	800cedc <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_white, color_card);
 800d68c:	6820      	ldr	r0, [r4, #0]
 800d68e:	f8b9 1000 	ldrh.w	r1, [r9]
 800d692:	3050      	adds	r0, #80	; 0x50
 800d694:	f017 fc8b 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_white, LV_OPA_COVER);
 800d698:	6820      	ldr	r0, [r4, #0]
 800d69a:	21ff      	movs	r1, #255	; 0xff
 800d69c:	3050      	adds	r0, #80	; 0x50
 800d69e:	f017 fc8f 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_white, color_text);
 800d6a2:	6820      	ldr	r0, [r4, #0]
 800d6a4:	8839      	ldrh	r1, [r7, #0]
 800d6a6:	3050      	adds	r0, #80	; 0x50
 800d6a8:	f017 fd00 	bl	80250ac <lv_style_set_text_color>
    style_init_reset(&styles->circle);
 800d6ac:	6820      	ldr	r0, [r4, #0]
 800d6ae:	30b0      	adds	r0, #176	; 0xb0
 800d6b0:	f7ff fc14 	bl	800cedc <style_init_reset>
    lv_style_set_radius(&styles->circle, LV_RADIUS_CIRCLE);
 800d6b4:	6820      	ldr	r0, [r4, #0]
 800d6b6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800d6ba:	30b0      	adds	r0, #176	; 0xb0
 800d6bc:	f017 fd0b 	bl	80250d6 <lv_style_set_radius>
    style_init_reset(&styles->no_radius);
 800d6c0:	6820      	ldr	r0, [r4, #0]
 800d6c2:	30b8      	adds	r0, #184	; 0xb8
 800d6c4:	f7ff fc0a 	bl	800cedc <style_init_reset>
    lv_style_set_radius(&styles->no_radius, 0);
 800d6c8:	6820      	ldr	r0, [r4, #0]
 800d6ca:	2100      	movs	r1, #0
 800d6cc:	30b8      	adds	r0, #184	; 0xb8
 800d6ce:	f017 fd02 	bl	80250d6 <lv_style_set_radius>
    style_init_reset(&styles->grow);
 800d6d2:	6820      	ldr	r0, [r4, #0]
 800d6d4:	30c8      	adds	r0, #200	; 0xc8
 800d6d6:	f7ff fc01 	bl	800cedc <style_init_reset>
    lv_style_set_transform_width(&styles->grow, lv_disp_dpx(theme.disp, 3));
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	2103      	movs	r1, #3
 800d6de:	68e8      	ldr	r0, [r5, #12]
 800d6e0:	f103 0ac8 	add.w	sl, r3, #200	; 0xc8
 800d6e4:	f015 fcb3 	bl	802304e <lv_disp_dpx.part.0>
 800d6e8:	4601      	mov	r1, r0
 800d6ea:	4650      	mov	r0, sl
 800d6ec:	f017 fc3f 	bl	8024f6e <lv_style_set_transform_width>
    lv_style_set_transform_height(&styles->grow, lv_disp_dpx(theme.disp, 3));
 800d6f0:	6823      	ldr	r3, [r4, #0]
 800d6f2:	2103      	movs	r1, #3
 800d6f4:	68e8      	ldr	r0, [r5, #12]
 800d6f6:	f103 0ac8 	add.w	sl, r3, #200	; 0xc8
 800d6fa:	f015 fca8 	bl	802304e <lv_disp_dpx.part.0>
 800d6fe:	4601      	mov	r1, r0
 800d700:	4650      	mov	r0, sl
 800d702:	f017 fc38 	bl	8024f76 <lv_style_set_transform_height>
    style_init_reset(&styles->knob);
 800d706:	6820      	ldr	r0, [r4, #0]
 800d708:	30f0      	adds	r0, #240	; 0xf0
 800d70a:	f7ff fbe7 	bl	800cedc <style_init_reset>
    lv_style_set_bg_color(&styles->knob, theme.color_primary);
 800d70e:	6820      	ldr	r0, [r4, #0]
 800d710:	8a29      	ldrh	r1, [r5, #16]
 800d712:	30f0      	adds	r0, #240	; 0xf0
 800d714:	f017 fc4b 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->knob, LV_OPA_COVER);
 800d718:	6820      	ldr	r0, [r4, #0]
 800d71a:	21ff      	movs	r1, #255	; 0xff
 800d71c:	30f0      	adds	r0, #240	; 0xf0
 800d71e:	f017 fc4f 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_pad_all(&styles->knob, lv_disp_dpx(theme.disp, 6));
 800d722:	6823      	ldr	r3, [r4, #0]
 800d724:	2106      	movs	r1, #6
 800d726:	68e8      	ldr	r0, [r5, #12]
 800d728:	f103 0af0 	add.w	sl, r3, #240	; 0xf0
 800d72c:	f015 fc8f 	bl	802304e <lv_disp_dpx.part.0>
 800d730:	4601      	mov	r1, r0
 800d732:	4650      	mov	r0, sl
 800d734:	f015 fc78 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_radius(&styles->knob, LV_RADIUS_CIRCLE);
 800d738:	6820      	ldr	r0, [r4, #0]
 800d73a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800d73e:	30f0      	adds	r0, #240	; 0xf0
 800d740:	f017 fcc9 	bl	80250d6 <lv_style_set_radius>
    style_init_reset(&styles->anim);
 800d744:	6820      	ldr	r0, [r4, #0]
 800d746:	30e0      	adds	r0, #224	; 0xe0
 800d748:	f7ff fbc8 	bl	800cedc <style_init_reset>
    lv_style_set_anim_time(&styles->anim, 200);
 800d74c:	6820      	ldr	r0, [r4, #0]
 800d74e:	21c8      	movs	r1, #200	; 0xc8
 800d750:	30e0      	adds	r0, #224	; 0xe0
 800d752:	f017 fcd0 	bl	80250f6 <lv_style_set_anim_time>
    style_init_reset(&styles->anim_fast);
 800d756:	6820      	ldr	r0, [r4, #0]
 800d758:	30e8      	adds	r0, #232	; 0xe8
 800d75a:	f7ff fbbf 	bl	800cedc <style_init_reset>
    lv_style_set_anim_time(&styles->anim_fast, 120);
 800d75e:	6820      	ldr	r0, [r4, #0]
 800d760:	2178      	movs	r1, #120	; 0x78
 800d762:	30e8      	adds	r0, #232	; 0xe8
 800d764:	f017 fcc7 	bl	80250f6 <lv_style_set_anim_time>
    style_init_reset(&styles->arc_indic);
 800d768:	6820      	ldr	r0, [r4, #0]
 800d76a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800d76e:	f7ff fbb5 	bl	800cedc <style_init_reset>
    lv_style_set_arc_color(&styles->arc_indic, color_grey);
 800d772:	6820      	ldr	r0, [r4, #0]
 800d774:	f8b8 1000 	ldrh.w	r1, [r8]
 800d778:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800d77c:	f017 fc8d 	bl	802509a <lv_style_set_arc_color>
    lv_style_set_arc_width(&styles->arc_indic, lv_disp_dpx(theme.disp, 15));
 800d780:	6823      	ldr	r3, [r4, #0]
 800d782:	210f      	movs	r1, #15
 800d784:	68e8      	ldr	r0, [r5, #12]
 800d786:	f503 7a80 	add.w	sl, r3, #256	; 0x100
 800d78a:	f015 fc60 	bl	802304e <lv_disp_dpx.part.0>
 800d78e:	4601      	mov	r1, r0
 800d790:	4650      	mov	r0, sl
 800d792:	f017 fc7a 	bl	802508a <lv_style_set_arc_width>
    lv_style_set_arc_rounded(&styles->arc_indic, true);
 800d796:	6820      	ldr	r0, [r4, #0]
 800d798:	2101      	movs	r1, #1
 800d79a:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800d79e:	f017 fc78 	bl	8025092 <lv_style_set_arc_rounded>
    style_init_reset(&styles->arc_indic_primary);
 800d7a2:	6820      	ldr	r0, [r4, #0]
 800d7a4:	f500 7084 	add.w	r0, r0, #264	; 0x108
 800d7a8:	f7ff fb98 	bl	800cedc <style_init_reset>
    lv_style_set_arc_color(&styles->arc_indic_primary, theme.color_primary);
 800d7ac:	6820      	ldr	r0, [r4, #0]
 800d7ae:	8a29      	ldrh	r1, [r5, #16]
 800d7b0:	f500 7084 	add.w	r0, r0, #264	; 0x108
 800d7b4:	f017 fc71 	bl	802509a <lv_style_set_arc_color>
    style_init_reset(&styles->dropdown_list);
 800d7b8:	6820      	ldr	r0, [r4, #0]
 800d7ba:	f500 7098 	add.w	r0, r0, #304	; 0x130
 800d7be:	f7ff fb8d 	bl	800cedc <style_init_reset>
    lv_style_set_max_height(&styles->dropdown_list, LV_DPI_DEF * 2);
 800d7c2:	6820      	ldr	r0, [r4, #0]
 800d7c4:	f44f 7182 	mov.w	r1, #260	; 0x104
 800d7c8:	f500 7098 	add.w	r0, r0, #304	; 0x130
 800d7cc:	f017 fbcb 	bl	8024f66 <lv_style_set_max_height>
    style_init_reset(&styles->cb_marker);
 800d7d0:	6820      	ldr	r0, [r4, #0]
 800d7d2:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800d7d6:	f7ff fb81 	bl	800cedc <style_init_reset>
    lv_style_set_pad_all(&styles->cb_marker, lv_disp_dpx(theme.disp, 3));
 800d7da:	6823      	ldr	r3, [r4, #0]
 800d7dc:	2103      	movs	r1, #3
 800d7de:	68e8      	ldr	r0, [r5, #12]
 800d7e0:	f503 7a9c 	add.w	sl, r3, #312	; 0x138
 800d7e4:	f015 fc33 	bl	802304e <lv_disp_dpx.part.0>
 800d7e8:	4601      	mov	r1, r0
 800d7ea:	4650      	mov	r0, sl
 800d7ec:	f015 fc1c 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_border_width(&styles->cb_marker, BORDER_WIDTH);
 800d7f0:	6823      	ldr	r3, [r4, #0]
 800d7f2:	2102      	movs	r1, #2
 800d7f4:	68e8      	ldr	r0, [r5, #12]
 800d7f6:	f503 7a9c 	add.w	sl, r3, #312	; 0x138
 800d7fa:	f015 fc28 	bl	802304e <lv_disp_dpx.part.0>
 800d7fe:	4601      	mov	r1, r0
 800d800:	4650      	mov	r0, sl
 800d802:	f017 fbfb 	bl	8024ffc <lv_style_set_border_width>
    lv_style_set_border_color(&styles->cb_marker, theme.color_primary);
 800d806:	6820      	ldr	r0, [r4, #0]
 800d808:	8a29      	ldrh	r1, [r5, #16]
 800d80a:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800d80e:	f017 fbe8 	bl	8024fe2 <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->cb_marker, color_card);
 800d812:	6820      	ldr	r0, [r4, #0]
 800d814:	f8b9 1000 	ldrh.w	r1, [r9]
 800d818:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800d81c:	f017 fbc7 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->cb_marker, LV_OPA_COVER);
 800d820:	6820      	ldr	r0, [r4, #0]
 800d822:	21ff      	movs	r1, #255	; 0xff
 800d824:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800d828:	f017 fbca 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_radius(&styles->cb_marker, RADIUS_DEFAULT / 2);
 800d82c:	6823      	ldr	r3, [r4, #0]
 800d82e:	68e8      	ldr	r0, [r5, #12]
 800d830:	f503 7a9c 	add.w	sl, r3, #312	; 0x138
 800d834:	7833      	ldrb	r3, [r6, #0]
 800d836:	2b01      	cmp	r3, #1
 800d838:	bf0c      	ite	eq
 800d83a:	210c      	moveq	r1, #12
 800d83c:	2108      	movne	r1, #8
 800d83e:	f015 fc06 	bl	802304e <lv_disp_dpx.part.0>
 800d842:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800d846:	f340 014f 	sbfx	r1, r0, #1, #16
 800d84a:	4650      	mov	r0, sl
 800d84c:	f017 fc43 	bl	80250d6 <lv_style_set_radius>
    style_init_reset(&styles->cb_marker_checked);
 800d850:	6820      	ldr	r0, [r4, #0]
 800d852:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 800d856:	f7ff fb41 	bl	800cedc <style_init_reset>
    lv_style_set_bg_img_src(&styles->cb_marker_checked, LV_SYMBOL_OK);
 800d85a:	6820      	ldr	r0, [r4, #0]
 800d85c:	49ab      	ldr	r1, [pc, #684]	; (800db0c <lv_theme_default_init+0xc1c>)
 800d85e:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 800d862:	f017 fbba 	bl	8024fda <lv_style_set_bg_img_src>
    lv_style_set_text_color(&styles->cb_marker_checked, lv_color_white());
 800d866:	6820      	ldr	r0, [r4, #0]
 800d868:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 800d86c:	f015 fba9 	bl	8022fc2 <lv_color_white>
 800d870:	4601      	mov	r1, r0
 800d872:	4618      	mov	r0, r3
 800d874:	f017 fc1a 	bl	80250ac <lv_style_set_text_color>
    lv_style_set_text_font(&styles->cb_marker_checked, theme.font_small);
 800d878:	6820      	ldr	r0, [r4, #0]
 800d87a:	6969      	ldr	r1, [r5, #20]
 800d87c:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 800d880:	f017 fc1d 	bl	80250be <lv_style_set_text_font>
    style_init_reset(&styles->switch_knob);
 800d884:	6820      	ldr	r0, [r4, #0]
 800d886:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 800d88a:	f7ff fb27 	bl	800cedc <style_init_reset>
    lv_style_set_pad_all(&styles->switch_knob, - lv_disp_dpx(theme.disp, 4));
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	2104      	movs	r1, #4
 800d892:	68e8      	ldr	r0, [r5, #12]
 800d894:	f503 7aa4 	add.w	sl, r3, #328	; 0x148
 800d898:	f015 fbd9 	bl	802304e <lv_disp_dpx.part.0>
 800d89c:	4241      	negs	r1, r0
 800d89e:	4650      	mov	r0, sl
 800d8a0:	b209      	sxth	r1, r1
 800d8a2:	f015 fbc1 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_bg_color(&styles->switch_knob, lv_color_white());
 800d8a6:	6820      	ldr	r0, [r4, #0]
 800d8a8:	f500 73a4 	add.w	r3, r0, #328	; 0x148
 800d8ac:	f015 fb89 	bl	8022fc2 <lv_color_white>
 800d8b0:	4601      	mov	r1, r0
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f017 fb7b 	bl	8024fae <lv_style_set_bg_color>
    style_init_reset(&styles->line);
 800d8b8:	6820      	ldr	r0, [r4, #0]
 800d8ba:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 800d8be:	f7ff fb0d 	bl	800cedc <style_init_reset>
    lv_style_set_line_width(&styles->line, 1);
 800d8c2:	6820      	ldr	r0, [r4, #0]
 800d8c4:	2101      	movs	r1, #1
 800d8c6:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 800d8ca:	f017 fbd1 	bl	8025070 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->line, color_text);
 800d8ce:	6820      	ldr	r0, [r4, #0]
 800d8d0:	8839      	ldrh	r1, [r7, #0]
 800d8d2:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 800d8d6:	f017 fbcf 	bl	8025078 <lv_style_set_line_color>
    style_init_reset(&styles->chart_bg);
 800d8da:	6820      	ldr	r0, [r4, #0]
 800d8dc:	f500 7094 	add.w	r0, r0, #296	; 0x128
 800d8e0:	f7ff fafc 	bl	800cedc <style_init_reset>
    lv_style_set_border_post(&styles->chart_bg, false);
 800d8e4:	6820      	ldr	r0, [r4, #0]
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	f500 7094 	add.w	r0, r0, #296	; 0x128
 800d8ec:	f017 fb8e 	bl	802500c <lv_style_set_border_post>
    lv_style_set_pad_column(&styles->chart_bg, lv_disp_dpx(theme.disp, 10));
 800d8f0:	6823      	ldr	r3, [r4, #0]
 800d8f2:	210a      	movs	r1, #10
 800d8f4:	68e8      	ldr	r0, [r5, #12]
 800d8f6:	f503 7a94 	add.w	sl, r3, #296	; 0x128
 800d8fa:	f015 fba8 	bl	802304e <lv_disp_dpx.part.0>
 800d8fe:	4601      	mov	r1, r0
 800d900:	4650      	mov	r0, sl
 800d902:	f017 fb50 	bl	8024fa6 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->chart_bg, color_grey);
 800d906:	6820      	ldr	r0, [r4, #0]
 800d908:	f8b8 1000 	ldrh.w	r1, [r8]
 800d90c:	f500 7094 	add.w	r0, r0, #296	; 0x128
 800d910:	f017 fbb2 	bl	8025078 <lv_style_set_line_color>
    style_init_reset(&styles->chart_series);
 800d914:	6820      	ldr	r0, [r4, #0]
 800d916:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800d91a:	f7ff fadf 	bl	800cedc <style_init_reset>
    lv_style_set_line_width(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 800d91e:	6823      	ldr	r3, [r4, #0]
 800d920:	2103      	movs	r1, #3
 800d922:	68e8      	ldr	r0, [r5, #12]
 800d924:	f503 7888 	add.w	r8, r3, #272	; 0x110
 800d928:	f015 fb91 	bl	802304e <lv_disp_dpx.part.0>
 800d92c:	4601      	mov	r1, r0
 800d92e:	4640      	mov	r0, r8
 800d930:	f017 fb9e 	bl	8025070 <lv_style_set_line_width>
    lv_style_set_radius(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 800d934:	6823      	ldr	r3, [r4, #0]
 800d936:	2103      	movs	r1, #3
 800d938:	68e8      	ldr	r0, [r5, #12]
 800d93a:	f503 7888 	add.w	r8, r3, #272	; 0x110
 800d93e:	f015 fb86 	bl	802304e <lv_disp_dpx.part.0>
 800d942:	4601      	mov	r1, r0
 800d944:	4640      	mov	r0, r8
 800d946:	f017 fbc6 	bl	80250d6 <lv_style_set_radius>
    lv_style_set_size(&styles->chart_series, lv_disp_dpx(theme.disp, 8));
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	2108      	movs	r1, #8
 800d94e:	68e8      	ldr	r0, [r5, #12]
 800d950:	f503 7888 	add.w	r8, r3, #272	; 0x110
 800d954:	f015 fb7b 	bl	802304e <lv_disp_dpx.part.0>
 800d958:	4601      	mov	r1, r0
 800d95a:	4640      	mov	r0, r8
 800d95c:	f015 fb4e 	bl	8022ffc <lv_style_set_size>
    lv_style_set_pad_column(&styles->chart_series, lv_disp_dpx(theme.disp, 2));
 800d960:	6823      	ldr	r3, [r4, #0]
 800d962:	2102      	movs	r1, #2
 800d964:	68e8      	ldr	r0, [r5, #12]
 800d966:	f503 7888 	add.w	r8, r3, #272	; 0x110
 800d96a:	f015 fb70 	bl	802304e <lv_disp_dpx.part.0>
 800d96e:	4601      	mov	r1, r0
 800d970:	4640      	mov	r0, r8
 800d972:	f017 fb18 	bl	8024fa6 <lv_style_set_pad_column>
    style_init_reset(&styles->chart_indic);
 800d976:	6820      	ldr	r0, [r4, #0]
 800d978:	f500 708c 	add.w	r0, r0, #280	; 0x118
 800d97c:	f7ff faae 	bl	800cedc <style_init_reset>
    lv_style_set_radius(&styles->chart_indic, LV_RADIUS_CIRCLE);
 800d980:	6820      	ldr	r0, [r4, #0]
 800d982:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800d986:	f500 708c 	add.w	r0, r0, #280	; 0x118
 800d98a:	f017 fba4 	bl	80250d6 <lv_style_set_radius>
    lv_style_set_size(&styles->chart_indic, lv_disp_dpx(theme.disp, 8));
 800d98e:	6823      	ldr	r3, [r4, #0]
 800d990:	2108      	movs	r1, #8
 800d992:	68e8      	ldr	r0, [r5, #12]
 800d994:	f503 788c 	add.w	r8, r3, #280	; 0x118
 800d998:	f015 fb59 	bl	802304e <lv_disp_dpx.part.0>
 800d99c:	4601      	mov	r1, r0
 800d99e:	4640      	mov	r0, r8
 800d9a0:	f015 fb2c 	bl	8022ffc <lv_style_set_size>
    lv_style_set_bg_color(&styles->chart_indic, theme.color_primary);
 800d9a4:	6820      	ldr	r0, [r4, #0]
 800d9a6:	8a29      	ldrh	r1, [r5, #16]
 800d9a8:	f500 708c 	add.w	r0, r0, #280	; 0x118
 800d9ac:	f017 faff 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->chart_indic, LV_OPA_COVER);
 800d9b0:	6820      	ldr	r0, [r4, #0]
 800d9b2:	21ff      	movs	r1, #255	; 0xff
 800d9b4:	f500 708c 	add.w	r0, r0, #280	; 0x118
 800d9b8:	f017 fb02 	bl	8024fc0 <lv_style_set_bg_opa>
    style_init_reset(&styles->chart_ticks);
 800d9bc:	6820      	ldr	r0, [r4, #0]
 800d9be:	f500 7090 	add.w	r0, r0, #288	; 0x120
 800d9c2:	f7ff fa8b 	bl	800cedc <style_init_reset>
    lv_style_set_line_width(&styles->chart_ticks, lv_disp_dpx(theme.disp, 1));
 800d9c6:	6823      	ldr	r3, [r4, #0]
 800d9c8:	2101      	movs	r1, #1
 800d9ca:	68e8      	ldr	r0, [r5, #12]
 800d9cc:	f503 7890 	add.w	r8, r3, #288	; 0x120
 800d9d0:	f015 fb3d 	bl	802304e <lv_disp_dpx.part.0>
 800d9d4:	4601      	mov	r1, r0
 800d9d6:	4640      	mov	r0, r8
 800d9d8:	f017 fb4a 	bl	8025070 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->chart_ticks, color_text);
 800d9dc:	6820      	ldr	r0, [r4, #0]
 800d9de:	8839      	ldrh	r1, [r7, #0]
 800d9e0:	f500 7090 	add.w	r0, r0, #288	; 0x120
 800d9e4:	f017 fb48 	bl	8025078 <lv_style_set_line_color>
    lv_style_set_pad_all(&styles->chart_ticks, lv_disp_dpx(theme.disp, 2));
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	2102      	movs	r1, #2
 800d9ec:	68e8      	ldr	r0, [r5, #12]
 800d9ee:	f503 7890 	add.w	r8, r3, #288	; 0x120
 800d9f2:	f015 fb2c 	bl	802304e <lv_disp_dpx.part.0>
 800d9f6:	4601      	mov	r1, r0
 800d9f8:	4640      	mov	r0, r8
 800d9fa:	f015 fb15 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_text_color(&styles->chart_ticks, lv_palette_main(LV_PALETTE_GREY));
 800d9fe:	6823      	ldr	r3, [r4, #0]
 800da00:	2012      	movs	r0, #18
 800da02:	f503 7890 	add.w	r8, r3, #288	; 0x120
 800da06:	f004 fded 	bl	80125e4 <lv_palette_main>
 800da0a:	4601      	mov	r1, r0
 800da0c:	4640      	mov	r0, r8
 800da0e:	f017 fb4d 	bl	80250ac <lv_style_set_text_color>
    style_init_reset(&styles->menu_bg);
 800da12:	6820      	ldr	r0, [r4, #0]
 800da14:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 800da18:	f7ff fa60 	bl	800cedc <style_init_reset>
    lv_style_set_pad_all(&styles->menu_bg, 0);
 800da1c:	6820      	ldr	r0, [r4, #0]
 800da1e:	2100      	movs	r1, #0
 800da20:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 800da24:	f015 fb00 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->menu_bg, 0);
 800da28:	6820      	ldr	r0, [r4, #0]
 800da2a:	2100      	movs	r1, #0
 800da2c:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 800da30:	f015 faca 	bl	8022fc8 <lv_style_set_pad_gap>
    lv_style_set_radius(&styles->menu_bg, 0);
 800da34:	6820      	ldr	r0, [r4, #0]
 800da36:	2100      	movs	r1, #0
 800da38:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 800da3c:	f017 fb4b 	bl	80250d6 <lv_style_set_radius>
    lv_style_set_clip_corner(&styles->menu_bg, true);
 800da40:	6820      	ldr	r0, [r4, #0]
 800da42:	2101      	movs	r1, #1
 800da44:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 800da48:	f017 fb49 	bl	80250de <lv_style_set_clip_corner>
    lv_style_set_border_side(&styles->menu_bg, LV_BORDER_SIDE_NONE);
 800da4c:	6820      	ldr	r0, [r4, #0]
 800da4e:	2100      	movs	r1, #0
 800da50:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 800da54:	f017 fad6 	bl	8025004 <lv_style_set_border_side>
    style_init_reset(&styles->menu_section);
 800da58:	6820      	ldr	r0, [r4, #0]
 800da5a:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 800da5e:	f7ff fa3d 	bl	800cedc <style_init_reset>
    lv_style_set_radius(&styles->menu_section, RADIUS_DEFAULT);
 800da62:	6823      	ldr	r3, [r4, #0]
 800da64:	68e8      	ldr	r0, [r5, #12]
 800da66:	f503 78ec 	add.w	r8, r3, #472	; 0x1d8
 800da6a:	7833      	ldrb	r3, [r6, #0]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	bf0c      	ite	eq
 800da70:	210c      	moveq	r1, #12
 800da72:	2108      	movne	r1, #8
 800da74:	f015 faeb 	bl	802304e <lv_disp_dpx.part.0>
 800da78:	4601      	mov	r1, r0
 800da7a:	4640      	mov	r0, r8
 800da7c:	f017 fb2b 	bl	80250d6 <lv_style_set_radius>
    lv_style_set_clip_corner(&styles->menu_section, true);
 800da80:	6820      	ldr	r0, [r4, #0]
 800da82:	2101      	movs	r1, #1
 800da84:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 800da88:	f017 fb29 	bl	80250de <lv_style_set_clip_corner>
    lv_style_set_bg_opa(&styles->menu_section, LV_OPA_COVER);
 800da8c:	6820      	ldr	r0, [r4, #0]
 800da8e:	21ff      	movs	r1, #255	; 0xff
 800da90:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 800da94:	f017 fa94 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->menu_section, color_card);
 800da98:	6820      	ldr	r0, [r4, #0]
 800da9a:	f8b9 1000 	ldrh.w	r1, [r9]
 800da9e:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 800daa2:	f017 fa84 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->menu_section, color_text);
 800daa6:	6820      	ldr	r0, [r4, #0]
 800daa8:	8839      	ldrh	r1, [r7, #0]
 800daaa:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 800daae:	f017 fafd 	bl	80250ac <lv_style_set_text_color>
    style_init_reset(&styles->menu_cont);
 800dab2:	6820      	ldr	r0, [r4, #0]
 800dab4:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 800dab8:	f7ff fa10 	bl	800cedc <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_cont, PAD_SMALL);
 800dabc:	6823      	ldr	r3, [r4, #0]
 800dabe:	f503 78d4 	add.w	r8, r3, #424	; 0x1a8
 800dac2:	7833      	ldrb	r3, [r6, #0]
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	f040 8468 	bne.w	800e39a <lv_theme_default_init+0x14aa>
 800daca:	210e      	movs	r1, #14
 800dacc:	68e8      	ldr	r0, [r5, #12]
 800dace:	f015 fabe 	bl	802304e <lv_disp_dpx.part.0>
 800dad2:	4601      	mov	r1, r0
 800dad4:	4640      	mov	r0, r8
 800dad6:	f015 fa9c 	bl	8023012 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->menu_cont, PAD_SMALL);
 800dada:	6823      	ldr	r3, [r4, #0]
 800dadc:	f503 78d4 	add.w	r8, r3, #424	; 0x1a8
 800dae0:	7833      	ldrb	r3, [r6, #0]
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	f040 8460 	bne.w	800e3a8 <lv_theme_default_init+0x14b8>
 800dae8:	210e      	movs	r1, #14
 800daea:	68e8      	ldr	r0, [r5, #12]
 800daec:	f015 faaf 	bl	802304e <lv_disp_dpx.part.0>
 800daf0:	4601      	mov	r1, r0
 800daf2:	4640      	mov	r0, r8
 800daf4:	f015 fa73 	bl	8022fde <lv_style_set_pad_ver>
    lv_style_set_pad_gap(&styles->menu_cont, PAD_SMALL);
 800daf8:	6823      	ldr	r3, [r4, #0]
 800dafa:	f503 78d4 	add.w	r8, r3, #424	; 0x1a8
 800dafe:	7833      	ldrb	r3, [r6, #0]
 800db00:	2b01      	cmp	r3, #1
 800db02:	f040 8458 	bne.w	800e3b6 <lv_theme_default_init+0x14c6>
 800db06:	210e      	movs	r1, #14
 800db08:	68e8      	ldr	r0, [r5, #12]
 800db0a:	e001      	b.n	800db10 <lv_theme_default_init+0xc20>
 800db0c:	0802ac41 	.word	0x0802ac41
 800db10:	f015 fa9d 	bl	802304e <lv_disp_dpx.part.0>
 800db14:	4601      	mov	r1, r0
 800db16:	4640      	mov	r0, r8
 800db18:	f015 fa56 	bl	8022fc8 <lv_style_set_pad_gap>
    lv_style_set_border_width(&styles->menu_cont, lv_disp_dpx(theme.disp, 1));
 800db1c:	6823      	ldr	r3, [r4, #0]
 800db1e:	2101      	movs	r1, #1
 800db20:	68e8      	ldr	r0, [r5, #12]
 800db22:	f503 78d4 	add.w	r8, r3, #424	; 0x1a8
 800db26:	f015 fa92 	bl	802304e <lv_disp_dpx.part.0>
 800db2a:	4601      	mov	r1, r0
 800db2c:	4640      	mov	r0, r8
 800db2e:	f017 fa65 	bl	8024ffc <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->menu_cont, LV_OPA_10);
 800db32:	6820      	ldr	r0, [r4, #0]
 800db34:	2119      	movs	r1, #25
 800db36:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 800db3a:	f017 fa5b 	bl	8024ff4 <lv_style_set_border_opa>
    lv_style_set_border_color(&styles->menu_cont, color_text);
 800db3e:	6820      	ldr	r0, [r4, #0]
 800db40:	8839      	ldrh	r1, [r7, #0]
 800db42:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 800db46:	f017 fa4c 	bl	8024fe2 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->menu_cont, LV_BORDER_SIDE_NONE);
 800db4a:	6820      	ldr	r0, [r4, #0]
 800db4c:	2100      	movs	r1, #0
 800db4e:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 800db52:	f017 fa57 	bl	8025004 <lv_style_set_border_side>
    style_init_reset(&styles->menu_sidebar_cont);
 800db56:	6820      	ldr	r0, [r4, #0]
 800db58:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 800db5c:	f7ff f9be 	bl	800cedc <style_init_reset>
    lv_style_set_pad_all(&styles->menu_sidebar_cont, 0);
 800db60:	6820      	ldr	r0, [r4, #0]
 800db62:	2100      	movs	r1, #0
 800db64:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 800db68:	f015 fa5e 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->menu_sidebar_cont, 0);
 800db6c:	6820      	ldr	r0, [r4, #0]
 800db6e:	2100      	movs	r1, #0
 800db70:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 800db74:	f015 fa28 	bl	8022fc8 <lv_style_set_pad_gap>
    lv_style_set_border_width(&styles->menu_sidebar_cont, lv_disp_dpx(theme.disp, 1));
 800db78:	6823      	ldr	r3, [r4, #0]
 800db7a:	2101      	movs	r1, #1
 800db7c:	68e8      	ldr	r0, [r5, #12]
 800db7e:	f503 78d8 	add.w	r8, r3, #432	; 0x1b0
 800db82:	f015 fa64 	bl	802304e <lv_disp_dpx.part.0>
 800db86:	4601      	mov	r1, r0
 800db88:	4640      	mov	r0, r8
 800db8a:	f017 fa37 	bl	8024ffc <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->menu_sidebar_cont, LV_OPA_10);
 800db8e:	6820      	ldr	r0, [r4, #0]
 800db90:	2119      	movs	r1, #25
 800db92:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 800db96:	f017 fa2d 	bl	8024ff4 <lv_style_set_border_opa>
    lv_style_set_border_color(&styles->menu_sidebar_cont, color_text);
 800db9a:	6820      	ldr	r0, [r4, #0]
 800db9c:	8839      	ldrh	r1, [r7, #0]
 800db9e:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 800dba2:	f017 fa1e 	bl	8024fe2 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->menu_sidebar_cont, LV_BORDER_SIDE_RIGHT);
 800dba6:	6820      	ldr	r0, [r4, #0]
 800dba8:	2108      	movs	r1, #8
 800dbaa:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 800dbae:	f017 fa29 	bl	8025004 <lv_style_set_border_side>
    style_init_reset(&styles->menu_main_cont);
 800dbb2:	6820      	ldr	r0, [r4, #0]
 800dbb4:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 800dbb8:	f7ff f990 	bl	800cedc <style_init_reset>
    lv_style_set_pad_all(&styles->menu_main_cont, 0);
 800dbbc:	6820      	ldr	r0, [r4, #0]
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 800dbc4:	f015 fa30 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->menu_main_cont, 0);
 800dbc8:	6820      	ldr	r0, [r4, #0]
 800dbca:	2100      	movs	r1, #0
 800dbcc:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 800dbd0:	f015 f9fa 	bl	8022fc8 <lv_style_set_pad_gap>
    style_init_reset(&styles->menu_header_cont);
 800dbd4:	6820      	ldr	r0, [r4, #0]
 800dbd6:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
 800dbda:	f7ff f97f 	bl	800cedc <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_header_cont, PAD_SMALL);
 800dbde:	7833      	ldrb	r3, [r6, #0]
 800dbe0:	6827      	ldr	r7, [r4, #0]
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 800dbe8:	f040 83ec 	bne.w	800e3c4 <lv_theme_default_init+0x14d4>
 800dbec:	210e      	movs	r1, #14
 800dbee:	68e8      	ldr	r0, [r5, #12]
 800dbf0:	f015 fa2d 	bl	802304e <lv_disp_dpx.part.0>
 800dbf4:	4601      	mov	r1, r0
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	f015 fa0b 	bl	8023012 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->menu_header_cont, PAD_TINY);
 800dbfc:	7833      	ldrb	r3, [r6, #0]
 800dbfe:	6827      	ldr	r7, [r4, #0]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 800dc06:	f040 83e3 	bne.w	800e3d0 <lv_theme_default_init+0x14e0>
 800dc0a:	2108      	movs	r1, #8
 800dc0c:	68e8      	ldr	r0, [r5, #12]
 800dc0e:	f015 fa1e 	bl	802304e <lv_disp_dpx.part.0>
 800dc12:	4601      	mov	r1, r0
 800dc14:	4638      	mov	r0, r7
 800dc16:	f015 f9e2 	bl	8022fde <lv_style_set_pad_ver>
    lv_style_set_pad_gap(&styles->menu_header_cont, PAD_SMALL);
 800dc1a:	7833      	ldrb	r3, [r6, #0]
 800dc1c:	6824      	ldr	r4, [r4, #0]
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	f504 74e4 	add.w	r4, r4, #456	; 0x1c8
 800dc24:	f040 83da 	bne.w	800e3dc <lv_theme_default_init+0x14ec>
 800dc28:	210e      	movs	r1, #14
 800dc2a:	68e8      	ldr	r0, [r5, #12]
 800dc2c:	f015 fa0f 	bl	802304e <lv_disp_dpx.part.0>
 800dc30:	4601      	mov	r1, r0
 800dc32:	4620      	mov	r0, r4
    style_init_reset(&styles->menu_header_btn);
 800dc34:	4cca      	ldr	r4, [pc, #808]	; (800df60 <lv_theme_default_init+0x1070>)
    lv_style_set_pad_gap(&styles->menu_header_cont, PAD_SMALL);
 800dc36:	f015 f9c7 	bl	8022fc8 <lv_style_set_pad_gap>
    style_init_reset(&styles->menu_header_btn);
 800dc3a:	6820      	ldr	r0, [r4, #0]
 800dc3c:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 800dc40:	f7ff f94c 	bl	800cedc <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_header_btn, PAD_TINY);
 800dc44:	7833      	ldrb	r3, [r6, #0]
 800dc46:	6827      	ldr	r7, [r4, #0]
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 800dc4e:	f040 83cb 	bne.w	800e3e8 <lv_theme_default_init+0x14f8>
 800dc52:	2108      	movs	r1, #8
 800dc54:	68e8      	ldr	r0, [r5, #12]
 800dc56:	f015 f9fa 	bl	802304e <lv_disp_dpx.part.0>
 800dc5a:	4601      	mov	r1, r0
 800dc5c:	4638      	mov	r0, r7
 800dc5e:	4dc1      	ldr	r5, [pc, #772]	; (800df64 <lv_theme_default_init+0x1074>)
 800dc60:	f015 f9d7 	bl	8023012 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->menu_header_btn, PAD_TINY);
 800dc64:	7833      	ldrb	r3, [r6, #0]
 800dc66:	6827      	ldr	r7, [r4, #0]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 800dc6e:	f040 83c1 	bne.w	800e3f4 <lv_theme_default_init+0x1504>
 800dc72:	2108      	movs	r1, #8
 800dc74:	68e8      	ldr	r0, [r5, #12]
 800dc76:	f015 f9ea 	bl	802304e <lv_disp_dpx.part.0>
 800dc7a:	4601      	mov	r1, r0
 800dc7c:	4638      	mov	r0, r7
    lv_style_set_text_color(&styles->menu_header_btn, color_text);
 800dc7e:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 800df68 <lv_theme_default_init+0x1078>
    lv_style_set_pad_ver(&styles->menu_header_btn, PAD_TINY);
 800dc82:	f015 f9ac 	bl	8022fde <lv_style_set_pad_ver>
    lv_style_set_shadow_opa(&styles->menu_header_btn, LV_OPA_TRANSP);
 800dc86:	6820      	ldr	r0, [r4, #0]
 800dc88:	2100      	movs	r1, #0
 800dc8a:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 800dc8e:	f017 f9eb 	bl	8025068 <lv_style_set_shadow_opa>
    lv_style_set_bg_opa(&styles->menu_header_btn, LV_OPA_TRANSP);
 800dc92:	6820      	ldr	r0, [r4, #0]
 800dc94:	2100      	movs	r1, #0
 800dc96:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 800dc9a:	f017 f991 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->menu_header_btn, color_text);
 800dc9e:	6820      	ldr	r0, [r4, #0]
 800dca0:	f8b8 1000 	ldrh.w	r1, [r8]
 800dca4:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 800dca8:	f017 fa00 	bl	80250ac <lv_style_set_text_color>
    style_init_reset(&styles->menu_page);
 800dcac:	6820      	ldr	r0, [r4, #0]
 800dcae:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 800dcb2:	f7ff f913 	bl	800cedc <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_page, 0);
 800dcb6:	6820      	ldr	r0, [r4, #0]
 800dcb8:	2100      	movs	r1, #0
 800dcba:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 800dcbe:	f015 f9a8 	bl	8023012 <lv_style_set_pad_hor>
    lv_style_set_pad_gap(&styles->menu_page, 0);
 800dcc2:	6820      	ldr	r0, [r4, #0]
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 800dcca:	f015 f97d 	bl	8022fc8 <lv_style_set_pad_gap>
    style_init_reset(&styles->menu_pressed);
 800dcce:	6820      	ldr	r0, [r4, #0]
 800dcd0:	f500 70f0 	add.w	r0, r0, #480	; 0x1e0
 800dcd4:	f7ff f902 	bl	800cedc <style_init_reset>
    lv_style_set_bg_opa(&styles->menu_pressed, LV_OPA_20);
 800dcd8:	6820      	ldr	r0, [r4, #0]
 800dcda:	2133      	movs	r1, #51	; 0x33
 800dcdc:	f500 70f0 	add.w	r0, r0, #480	; 0x1e0
 800dce0:	f017 f96e 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->menu_pressed, lv_palette_main(LV_PALETTE_GREY));
 800dce4:	6826      	ldr	r6, [r4, #0]
 800dce6:	2012      	movs	r0, #18
 800dce8:	f506 76f0 	add.w	r6, r6, #480	; 0x1e0
 800dcec:	f004 fc7a 	bl	80125e4 <lv_palette_main>
 800dcf0:	4601      	mov	r1, r0
 800dcf2:	4630      	mov	r0, r6
    lv_style_set_pad_ver(&styles->menu_separator, PAD_TINY);
 800dcf4:	4e9d      	ldr	r6, [pc, #628]	; (800df6c <lv_theme_default_init+0x107c>)
    lv_style_set_bg_color(&styles->menu_pressed, lv_palette_main(LV_PALETTE_GREY));
 800dcf6:	f017 f95a 	bl	8024fae <lv_style_set_bg_color>
    style_init_reset(&styles->menu_separator);
 800dcfa:	6820      	ldr	r0, [r4, #0]
 800dcfc:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
 800dd00:	f7ff f8ec 	bl	800cedc <style_init_reset>
    lv_style_set_bg_opa(&styles->menu_separator, LV_OPA_TRANSP);
 800dd04:	6820      	ldr	r0, [r4, #0]
 800dd06:	2100      	movs	r1, #0
 800dd08:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
 800dd0c:	f017 f958 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_pad_ver(&styles->menu_separator, PAD_TINY);
 800dd10:	7833      	ldrb	r3, [r6, #0]
 800dd12:	6827      	ldr	r7, [r4, #0]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 800dd1a:	f040 8371 	bne.w	800e400 <lv_theme_default_init+0x1510>
 800dd1e:	2108      	movs	r1, #8
 800dd20:	68e8      	ldr	r0, [r5, #12]
 800dd22:	f015 f994 	bl	802304e <lv_disp_dpx.part.0>
 800dd26:	4601      	mov	r1, r0
 800dd28:	4638      	mov	r0, r7
 800dd2a:	f015 f958 	bl	8022fde <lv_style_set_pad_ver>
    style_init_reset(&styles->meter_marker);
 800dd2e:	6820      	ldr	r0, [r4, #0]
 800dd30:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 800dd34:	f7ff f8d2 	bl	800cedc <style_init_reset>
    lv_style_set_line_width(&styles->meter_marker, lv_disp_dpx(theme.disp, 5));
 800dd38:	6827      	ldr	r7, [r4, #0]
 800dd3a:	2105      	movs	r1, #5
 800dd3c:	68e8      	ldr	r0, [r5, #12]
 800dd3e:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800dd42:	f015 f984 	bl	802304e <lv_disp_dpx.part.0>
 800dd46:	4601      	mov	r1, r0
 800dd48:	4638      	mov	r0, r7
 800dd4a:	f017 f991 	bl	8025070 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->meter_marker, color_text);
 800dd4e:	6820      	ldr	r0, [r4, #0]
 800dd50:	f8b8 1000 	ldrh.w	r1, [r8]
 800dd54:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 800dd58:	f017 f98e 	bl	8025078 <lv_style_set_line_color>
    lv_style_set_size(&styles->meter_marker, lv_disp_dpx(theme.disp, 20));
 800dd5c:	6827      	ldr	r7, [r4, #0]
 800dd5e:	2114      	movs	r1, #20
 800dd60:	68e8      	ldr	r0, [r5, #12]
 800dd62:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800dd66:	f015 f972 	bl	802304e <lv_disp_dpx.part.0>
 800dd6a:	4601      	mov	r1, r0
 800dd6c:	4638      	mov	r0, r7
 800dd6e:	f015 f945 	bl	8022ffc <lv_style_set_size>
    lv_style_set_pad_left(&styles->meter_marker, lv_disp_dpx(theme.disp, 15));
 800dd72:	6827      	ldr	r7, [r4, #0]
 800dd74:	210f      	movs	r1, #15
 800dd76:	68e8      	ldr	r0, [r5, #12]
 800dd78:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800dd7c:	f015 f967 	bl	802304e <lv_disp_dpx.part.0>
 800dd80:	4601      	mov	r1, r0
 800dd82:	4638      	mov	r0, r7
 800dd84:	f017 f903 	bl	8024f8e <lv_style_set_pad_left>
    style_init_reset(&styles->meter_indic);
 800dd88:	6820      	ldr	r0, [r4, #0]
 800dd8a:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 800dd8e:	f7ff f8a5 	bl	800cedc <style_init_reset>
    lv_style_set_radius(&styles->meter_indic, LV_RADIUS_CIRCLE);
 800dd92:	6820      	ldr	r0, [r4, #0]
 800dd94:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800dd98:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 800dd9c:	f017 f99b 	bl	80250d6 <lv_style_set_radius>
    lv_style_set_bg_color(&styles->meter_indic, color_text);
 800dda0:	6820      	ldr	r0, [r4, #0]
 800dda2:	f8b8 1000 	ldrh.w	r1, [r8]
 800dda6:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 800ddaa:	f017 f900 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->meter_indic, LV_OPA_COVER);
 800ddae:	6820      	ldr	r0, [r4, #0]
 800ddb0:	21ff      	movs	r1, #255	; 0xff
 800ddb2:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 800ddb6:	f017 f903 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_size(&styles->meter_indic, lv_disp_dpx(theme.disp, 15));
 800ddba:	6827      	ldr	r7, [r4, #0]
 800ddbc:	210f      	movs	r1, #15
 800ddbe:	68e8      	ldr	r0, [r5, #12]
 800ddc0:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 800ddc4:	f015 f943 	bl	802304e <lv_disp_dpx.part.0>
 800ddc8:	4601      	mov	r1, r0
 800ddca:	4638      	mov	r0, r7
 800ddcc:	f015 f916 	bl	8022ffc <lv_style_set_size>
    style_init_reset(&styles->table_cell);
 800ddd0:	6820      	ldr	r0, [r4, #0]
 800ddd2:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 800ddd6:	f7ff f881 	bl	800cedc <style_init_reset>
    lv_style_set_border_width(&styles->table_cell, lv_disp_dpx(theme.disp, 1));
 800ddda:	6827      	ldr	r7, [r4, #0]
 800dddc:	2101      	movs	r1, #1
 800ddde:	68e8      	ldr	r0, [r5, #12]
 800dde0:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800dde4:	f015 f933 	bl	802304e <lv_disp_dpx.part.0>
 800dde8:	4601      	mov	r1, r0
 800ddea:	4638      	mov	r0, r7
    lv_style_set_border_color(&styles->table_cell, color_grey);
 800ddec:	4f60      	ldr	r7, [pc, #384]	; (800df70 <lv_theme_default_init+0x1080>)
    lv_style_set_border_width(&styles->table_cell, lv_disp_dpx(theme.disp, 1));
 800ddee:	f017 f905 	bl	8024ffc <lv_style_set_border_width>
    lv_style_set_border_color(&styles->table_cell, color_grey);
 800ddf2:	6820      	ldr	r0, [r4, #0]
 800ddf4:	8839      	ldrh	r1, [r7, #0]
 800ddf6:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 800ddfa:	f017 f8f2 	bl	8024fe2 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->table_cell, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
 800ddfe:	6820      	ldr	r0, [r4, #0]
 800de00:	2103      	movs	r1, #3
 800de02:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 800de06:	f017 f8fd 	bl	8025004 <lv_style_set_border_side>
    style_init_reset(&styles->ta_cursor);
 800de0a:	6820      	ldr	r0, [r4, #0]
 800de0c:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 800de10:	f7ff f864 	bl	800cedc <style_init_reset>
    lv_style_set_border_color(&styles->ta_cursor, color_text);
 800de14:	6820      	ldr	r0, [r4, #0]
 800de16:	f8b8 1000 	ldrh.w	r1, [r8]
 800de1a:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 800de1e:	f017 f8e0 	bl	8024fe2 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->ta_cursor, lv_disp_dpx(theme.disp, 2));
 800de22:	6823      	ldr	r3, [r4, #0]
 800de24:	2102      	movs	r1, #2
 800de26:	68e8      	ldr	r0, [r5, #12]
 800de28:	f503 78b8 	add.w	r8, r3, #368	; 0x170
 800de2c:	f015 f90f 	bl	802304e <lv_disp_dpx.part.0>
 800de30:	4601      	mov	r1, r0
 800de32:	4640      	mov	r0, r8
 800de34:	f017 f8e2 	bl	8024ffc <lv_style_set_border_width>
    lv_style_set_pad_left(&styles->ta_cursor, - lv_disp_dpx(theme.disp, 1));
 800de38:	6823      	ldr	r3, [r4, #0]
 800de3a:	2101      	movs	r1, #1
 800de3c:	68e8      	ldr	r0, [r5, #12]
 800de3e:	f503 78b8 	add.w	r8, r3, #368	; 0x170
 800de42:	f015 f904 	bl	802304e <lv_disp_dpx.part.0>
 800de46:	4241      	negs	r1, r0
 800de48:	4640      	mov	r0, r8
 800de4a:	b209      	sxth	r1, r1
 800de4c:	f017 f89f 	bl	8024f8e <lv_style_set_pad_left>
    lv_style_set_border_side(&styles->ta_cursor, LV_BORDER_SIDE_LEFT);
 800de50:	6820      	ldr	r0, [r4, #0]
 800de52:	2104      	movs	r1, #4
 800de54:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 800de58:	f017 f8d4 	bl	8025004 <lv_style_set_border_side>
    lv_style_set_anim_time(&styles->ta_cursor, 400);
 800de5c:	6820      	ldr	r0, [r4, #0]
 800de5e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800de62:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 800de66:	f017 f946 	bl	80250f6 <lv_style_set_anim_time>
    style_init_reset(&styles->ta_placeholder);
 800de6a:	6820      	ldr	r0, [r4, #0]
 800de6c:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 800de70:	f7ff f834 	bl	800cedc <style_init_reset>
    lv_style_set_text_color(&styles->ta_placeholder, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 800de74:	6823      	ldr	r3, [r4, #0]
 800de76:	f503 78bc 	add.w	r8, r3, #376	; 0x178
 800de7a:	6a2b      	ldr	r3, [r5, #32]
 800de7c:	07db      	lsls	r3, r3, #31
 800de7e:	f140 82c5 	bpl.w	800e40c <lv_theme_default_init+0x151c>
 800de82:	2102      	movs	r1, #2
 800de84:	2012      	movs	r0, #18
 800de86:	f004 fbc9 	bl	801261c <lv_palette_darken>
                                                                                                   2) : lv_palette_lighten(LV_PALETTE_GREY, 1));
 800de8a:	4601      	mov	r1, r0
    lv_style_set_text_color(&styles->ta_placeholder, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 800de8c:	4640      	mov	r0, r8
 800de8e:	f017 f90d 	bl	80250ac <lv_style_set_text_color>
    style_init_reset(&styles->calendar_btnm_bg);
 800de92:	6820      	ldr	r0, [r4, #0]
 800de94:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 800de98:	f7ff f820 	bl	800cedc <style_init_reset>
    lv_style_set_pad_all(&styles->calendar_btnm_bg, PAD_SMALL);
 800de9c:	6823      	ldr	r3, [r4, #0]
 800de9e:	f503 78c0 	add.w	r8, r3, #384	; 0x180
 800dea2:	7833      	ldrb	r3, [r6, #0]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	f040 82b6 	bne.w	800e416 <lv_theme_default_init+0x1526>
 800deaa:	210e      	movs	r1, #14
 800deac:	68e8      	ldr	r0, [r5, #12]
 800deae:	f015 f8ce 	bl	802304e <lv_disp_dpx.part.0>
 800deb2:	4601      	mov	r1, r0
 800deb4:	4640      	mov	r0, r8
 800deb6:	f015 f8b7 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->calendar_btnm_bg, PAD_SMALL / 2);
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	f503 78c0 	add.w	r8, r3, #384	; 0x180
 800dec0:	7833      	ldrb	r3, [r6, #0]
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	f040 82ad 	bne.w	800e422 <lv_theme_default_init+0x1532>
 800dec8:	210e      	movs	r1, #14
 800deca:	68e8      	ldr	r0, [r5, #12]
 800decc:	f015 f8bf 	bl	802304e <lv_disp_dpx.part.0>
 800ded0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800ded4:	f340 014f 	sbfx	r1, r0, #1, #16
 800ded8:	4640      	mov	r0, r8
 800deda:	f015 f875 	bl	8022fc8 <lv_style_set_pad_gap>
    style_init_reset(&styles->calendar_btnm_day);
 800dede:	6820      	ldr	r0, [r4, #0]
 800dee0:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 800dee4:	f7fe fffa 	bl	800cedc <style_init_reset>
    lv_style_set_border_width(&styles->calendar_btnm_day, lv_disp_dpx(theme.disp, 1));
 800dee8:	6823      	ldr	r3, [r4, #0]
 800deea:	2101      	movs	r1, #1
 800deec:	68e8      	ldr	r0, [r5, #12]
 800deee:	f503 78c4 	add.w	r8, r3, #392	; 0x188
 800def2:	f015 f8ac 	bl	802304e <lv_disp_dpx.part.0>
 800def6:	4601      	mov	r1, r0
 800def8:	4640      	mov	r0, r8
 800defa:	f017 f87f 	bl	8024ffc <lv_style_set_border_width>
    lv_style_set_border_color(&styles->calendar_btnm_day, color_grey);
 800defe:	6820      	ldr	r0, [r4, #0]
 800df00:	8839      	ldrh	r1, [r7, #0]
 800df02:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 800df06:	f017 f86c 	bl	8024fe2 <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->calendar_btnm_day, color_card);
 800df0a:	4b1a      	ldr	r3, [pc, #104]	; (800df74 <lv_theme_default_init+0x1084>)
 800df0c:	6820      	ldr	r0, [r4, #0]
 800df0e:	8819      	ldrh	r1, [r3, #0]
 800df10:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 800df14:	f017 f84b 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->calendar_btnm_day, LV_OPA_20);
 800df18:	6820      	ldr	r0, [r4, #0]
 800df1a:	2133      	movs	r1, #51	; 0x33
 800df1c:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 800df20:	f017 f84e 	bl	8024fc0 <lv_style_set_bg_opa>
    style_init_reset(&styles->calendar_header);
 800df24:	6820      	ldr	r0, [r4, #0]
 800df26:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 800df2a:	f7fe ffd7 	bl	800cedc <style_init_reset>
    lv_style_set_pad_hor(&styles->calendar_header, PAD_SMALL);
 800df2e:	6823      	ldr	r3, [r4, #0]
 800df30:	f503 78c8 	add.w	r8, r3, #400	; 0x190
 800df34:	7833      	ldrb	r3, [r6, #0]
 800df36:	2b01      	cmp	r3, #1
 800df38:	f040 8279 	bne.w	800e42e <lv_theme_default_init+0x153e>
 800df3c:	210e      	movs	r1, #14
 800df3e:	68e8      	ldr	r0, [r5, #12]
 800df40:	f015 f885 	bl	802304e <lv_disp_dpx.part.0>
 800df44:	4601      	mov	r1, r0
 800df46:	4640      	mov	r0, r8
 800df48:	f015 f863 	bl	8023012 <lv_style_set_pad_hor>
    lv_style_set_pad_top(&styles->calendar_header, PAD_SMALL);
 800df4c:	6823      	ldr	r3, [r4, #0]
 800df4e:	f503 78c8 	add.w	r8, r3, #400	; 0x190
 800df52:	7833      	ldrb	r3, [r6, #0]
 800df54:	2b01      	cmp	r3, #1
 800df56:	f040 8270 	bne.w	800e43a <lv_theme_default_init+0x154a>
 800df5a:	210e      	movs	r1, #14
 800df5c:	68e8      	ldr	r0, [r5, #12]
 800df5e:	e00b      	b.n	800df78 <lv_theme_default_init+0x1088>
 800df60:	240011d0 	.word	0x240011d0
 800df64:	240011ac 	.word	0x240011ac
 800df68:	24010d1a 	.word	0x24010d1a
 800df6c:	24010e31 	.word	0x24010e31
 800df70:	24010d16 	.word	0x24010d16
 800df74:	24010d18 	.word	0x24010d18
 800df78:	f015 f869 	bl	802304e <lv_disp_dpx.part.0>
 800df7c:	4601      	mov	r1, r0
 800df7e:	4640      	mov	r0, r8
 800df80:	f016 fffd 	bl	8024f7e <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->calendar_header, PAD_TINY);
 800df84:	6823      	ldr	r3, [r4, #0]
 800df86:	f503 78c8 	add.w	r8, r3, #400	; 0x190
 800df8a:	7833      	ldrb	r3, [r6, #0]
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	f040 825a 	bne.w	800e446 <lv_theme_default_init+0x1556>
 800df92:	2108      	movs	r1, #8
 800df94:	68e8      	ldr	r0, [r5, #12]
 800df96:	f015 f85a 	bl	802304e <lv_disp_dpx.part.0>
 800df9a:	4601      	mov	r1, r0
 800df9c:	4640      	mov	r0, r8
 800df9e:	f016 fff2 	bl	8024f86 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->calendar_header, PAD_SMALL);
 800dfa2:	6823      	ldr	r3, [r4, #0]
 800dfa4:	f503 78c8 	add.w	r8, r3, #400	; 0x190
 800dfa8:	7833      	ldrb	r3, [r6, #0]
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	f040 8251 	bne.w	800e452 <lv_theme_default_init+0x1562>
 800dfb0:	210e      	movs	r1, #14
 800dfb2:	68e8      	ldr	r0, [r5, #12]
 800dfb4:	f015 f84b 	bl	802304e <lv_disp_dpx.part.0>
 800dfb8:	4601      	mov	r1, r0
 800dfba:	4640      	mov	r0, r8
 800dfbc:	f015 f804 	bl	8022fc8 <lv_style_set_pad_gap>
    style_init_reset(&styles->colorwheel_main);
 800dfc0:	6820      	ldr	r0, [r4, #0]
 800dfc2:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 800dfc6:	f7fe ff89 	bl	800cedc <style_init_reset>
    lv_style_set_arc_width(&styles->colorwheel_main, lv_disp_dpx(theme.disp, 10));
 800dfca:	6823      	ldr	r3, [r4, #0]
 800dfcc:	210a      	movs	r1, #10
 800dfce:	68e8      	ldr	r0, [r5, #12]
 800dfd0:	f503 78cc 	add.w	r8, r3, #408	; 0x198
 800dfd4:	f015 f83b 	bl	802304e <lv_disp_dpx.part.0>
 800dfd8:	4601      	mov	r1, r0
 800dfda:	4640      	mov	r0, r8
 800dfdc:	f017 f855 	bl	802508a <lv_style_set_arc_width>
    style_init_reset(&styles->msgbox_btn_bg);
 800dfe0:	6820      	ldr	r0, [r4, #0]
 800dfe2:	f500 70fc 	add.w	r0, r0, #504	; 0x1f8
 800dfe6:	f7fe ff79 	bl	800cedc <style_init_reset>
    lv_style_set_pad_all(&styles->msgbox_btn_bg, lv_disp_dpx(theme.disp, 4));
 800dfea:	6823      	ldr	r3, [r4, #0]
 800dfec:	2104      	movs	r1, #4
 800dfee:	68e8      	ldr	r0, [r5, #12]
 800dff0:	f503 78fc 	add.w	r8, r3, #504	; 0x1f8
 800dff4:	f015 f82b 	bl	802304e <lv_disp_dpx.part.0>
 800dff8:	4601      	mov	r1, r0
 800dffa:	4640      	mov	r0, r8
 800dffc:	f015 f814 	bl	8023028 <lv_style_set_pad_all>
    style_init_reset(&styles->msgbox_bg);
 800e000:	6820      	ldr	r0, [r4, #0]
 800e002:	f500 70f8 	add.w	r0, r0, #496	; 0x1f0
 800e006:	f7fe ff69 	bl	800cedc <style_init_reset>
    lv_style_set_max_width(&styles->msgbox_bg, lv_pct(100));
 800e00a:	6820      	ldr	r0, [r4, #0]
 800e00c:	f242 0164 	movw	r1, #8292	; 0x2064
 800e010:	f500 70f8 	add.w	r0, r0, #496	; 0x1f0
 800e014:	f016 ff9f 	bl	8024f56 <lv_style_set_max_width>
    style_init_reset(&styles->msgbox_backdrop_bg);
 800e018:	6820      	ldr	r0, [r4, #0]
 800e01a:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800e01e:	f7fe ff5d 	bl	800cedc <style_init_reset>
    lv_style_set_bg_color(&styles->msgbox_backdrop_bg, lv_palette_main(LV_PALETTE_GREY));
 800e022:	6823      	ldr	r3, [r4, #0]
 800e024:	2012      	movs	r0, #18
 800e026:	f503 7800 	add.w	r8, r3, #512	; 0x200
 800e02a:	f004 fadb 	bl	80125e4 <lv_palette_main>
 800e02e:	4601      	mov	r1, r0
 800e030:	4640      	mov	r0, r8
 800e032:	f016 ffbc 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->msgbox_backdrop_bg, LV_OPA_50);
 800e036:	6820      	ldr	r0, [r4, #0]
 800e038:	217f      	movs	r1, #127	; 0x7f
 800e03a:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800e03e:	f016 ffbf 	bl	8024fc0 <lv_style_set_bg_opa>
    style_init_reset(&styles->keyboard_btn_bg);
 800e042:	6820      	ldr	r0, [r4, #0]
 800e044:	f500 7002 	add.w	r0, r0, #520	; 0x208
 800e048:	f7fe ff48 	bl	800cedc <style_init_reset>
    lv_style_set_shadow_width(&styles->keyboard_btn_bg, 0);
 800e04c:	6820      	ldr	r0, [r4, #0]
 800e04e:	2100      	movs	r1, #0
 800e050:	f500 7002 	add.w	r0, r0, #520	; 0x208
 800e054:	f016 fff3 	bl	802503e <lv_style_set_shadow_width>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 800e058:	6823      	ldr	r3, [r4, #0]
 800e05a:	f503 7802 	add.w	r8, r3, #520	; 0x208
 800e05e:	7833      	ldrb	r3, [r6, #0]
 800e060:	2b03      	cmp	r3, #3
 800e062:	f040 81fc 	bne.w	800e45e <lv_theme_default_init+0x156e>
 800e066:	2108      	movs	r1, #8
 800e068:	68e8      	ldr	r0, [r5, #12]
 800e06a:	f014 fff0 	bl	802304e <lv_disp_dpx.part.0>
 800e06e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800e072:	f340 004f 	sbfx	r0, r0, #1, #16
 800e076:	4601      	mov	r1, r0
 800e078:	4640      	mov	r0, r8
 800e07a:	f017 f82c 	bl	80250d6 <lv_style_set_radius>
    style_init_reset(&styles->tab_btn);
 800e07e:	6820      	ldr	r0, [r4, #0]
 800e080:	f500 700e 	add.w	r0, r0, #568	; 0x238
 800e084:	f7fe ff2a 	bl	800cedc <style_init_reset>
    lv_style_set_border_color(&styles->tab_btn, theme.color_primary);
 800e088:	6820      	ldr	r0, [r4, #0]
 800e08a:	8a29      	ldrh	r1, [r5, #16]
 800e08c:	f500 700e 	add.w	r0, r0, #568	; 0x238
 800e090:	f016 ffa7 	bl	8024fe2 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->tab_btn, BORDER_WIDTH * 2);
 800e094:	6823      	ldr	r3, [r4, #0]
 800e096:	2102      	movs	r1, #2
 800e098:	68e8      	ldr	r0, [r5, #12]
 800e09a:	f503 780e 	add.w	r8, r3, #568	; 0x238
 800e09e:	f014 ffd6 	bl	802304e <lv_disp_dpx.part.0>
 800e0a2:	0041      	lsls	r1, r0, #1
 800e0a4:	4640      	mov	r0, r8
 800e0a6:	b209      	sxth	r1, r1
 800e0a8:	f016 ffa8 	bl	8024ffc <lv_style_set_border_width>
    lv_style_set_border_side(&styles->tab_btn, LV_BORDER_SIDE_BOTTOM);
 800e0ac:	6820      	ldr	r0, [r4, #0]
 800e0ae:	2101      	movs	r1, #1
 800e0b0:	f500 700e 	add.w	r0, r0, #568	; 0x238
 800e0b4:	f016 ffa6 	bl	8025004 <lv_style_set_border_side>
    style_init_reset(&styles->tab_bg_focus);
 800e0b8:	6820      	ldr	r0, [r4, #0]
 800e0ba:	f500 700c 	add.w	r0, r0, #560	; 0x230
 800e0be:	f7fe ff0d 	bl	800cedc <style_init_reset>
    lv_style_set_outline_pad(&styles->tab_bg_focus, -BORDER_WIDTH);
 800e0c2:	6823      	ldr	r3, [r4, #0]
 800e0c4:	2102      	movs	r1, #2
 800e0c6:	68e8      	ldr	r0, [r5, #12]
 800e0c8:	f503 780c 	add.w	r8, r3, #560	; 0x230
 800e0cc:	f014 ffbf 	bl	802304e <lv_disp_dpx.part.0>
 800e0d0:	4241      	negs	r1, r0
 800e0d2:	4640      	mov	r0, r8
 800e0d4:	b209      	sxth	r1, r1
 800e0d6:	f016 ffae 	bl	8025036 <lv_style_set_outline_pad>
    style_init_reset(&styles->list_bg);
 800e0da:	6820      	ldr	r0, [r4, #0]
 800e0dc:	f500 7004 	add.w	r0, r0, #528	; 0x210
 800e0e0:	f7fe fefc 	bl	800cedc <style_init_reset>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 800e0e4:	6823      	ldr	r3, [r4, #0]
 800e0e6:	f503 7804 	add.w	r8, r3, #528	; 0x210
 800e0ea:	7833      	ldrb	r3, [r6, #0]
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	f040 81be 	bne.w	800e46e <lv_theme_default_init+0x157e>
 800e0f2:	2118      	movs	r1, #24
 800e0f4:	68e8      	ldr	r0, [r5, #12]
 800e0f6:	f014 ffaa 	bl	802304e <lv_disp_dpx.part.0>
 800e0fa:	4601      	mov	r1, r0
 800e0fc:	4640      	mov	r0, r8
 800e0fe:	f014 ff88 	bl	8023012 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->list_bg, 0);
 800e102:	6820      	ldr	r0, [r4, #0]
 800e104:	2100      	movs	r1, #0
 800e106:	f500 7004 	add.w	r0, r0, #528	; 0x210
 800e10a:	f014 ff68 	bl	8022fde <lv_style_set_pad_ver>
    lv_style_set_pad_gap(&styles->list_bg, 0);
 800e10e:	6820      	ldr	r0, [r4, #0]
 800e110:	2100      	movs	r1, #0
 800e112:	f500 7004 	add.w	r0, r0, #528	; 0x210
 800e116:	f014 ff57 	bl	8022fc8 <lv_style_set_pad_gap>
    lv_style_set_clip_corner(&styles->list_bg, true);
 800e11a:	6820      	ldr	r0, [r4, #0]
 800e11c:	2101      	movs	r1, #1
 800e11e:	f500 7004 	add.w	r0, r0, #528	; 0x210
 800e122:	f016 ffdc 	bl	80250de <lv_style_set_clip_corner>
    style_init_reset(&styles->list_btn);
 800e126:	6820      	ldr	r0, [r4, #0]
 800e128:	f500 7006 	add.w	r0, r0, #536	; 0x218
 800e12c:	f7fe fed6 	bl	800cedc <style_init_reset>
    lv_style_set_border_width(&styles->list_btn, lv_disp_dpx(theme.disp, 1));
 800e130:	6823      	ldr	r3, [r4, #0]
 800e132:	2101      	movs	r1, #1
 800e134:	68e8      	ldr	r0, [r5, #12]
 800e136:	f503 7806 	add.w	r8, r3, #536	; 0x218
 800e13a:	f014 ff88 	bl	802304e <lv_disp_dpx.part.0>
 800e13e:	4601      	mov	r1, r0
 800e140:	4640      	mov	r0, r8
 800e142:	f016 ff5b 	bl	8024ffc <lv_style_set_border_width>
    lv_style_set_border_color(&styles->list_btn, color_grey);
 800e146:	6820      	ldr	r0, [r4, #0]
 800e148:	8839      	ldrh	r1, [r7, #0]
 800e14a:	f500 7006 	add.w	r0, r0, #536	; 0x218
 800e14e:	f016 ff48 	bl	8024fe2 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->list_btn, LV_BORDER_SIDE_BOTTOM);
 800e152:	6820      	ldr	r0, [r4, #0]
 800e154:	2101      	movs	r1, #1
 800e156:	f500 7006 	add.w	r0, r0, #536	; 0x218
 800e15a:	f016 ff53 	bl	8025004 <lv_style_set_border_side>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 800e15e:	7833      	ldrb	r3, [r6, #0]
 800e160:	6827      	ldr	r7, [r4, #0]
 800e162:	2b01      	cmp	r3, #1
 800e164:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800e168:	f040 8187 	bne.w	800e47a <lv_theme_default_init+0x158a>
 800e16c:	210e      	movs	r1, #14
 800e16e:	68e8      	ldr	r0, [r5, #12]
 800e170:	f014 ff6d 	bl	802304e <lv_disp_dpx.part.0>
 800e174:	4601      	mov	r1, r0
 800e176:	4638      	mov	r0, r7
 800e178:	f014 ff56 	bl	8023028 <lv_style_set_pad_all>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 800e17c:	7833      	ldrb	r3, [r6, #0]
 800e17e:	6827      	ldr	r7, [r4, #0]
 800e180:	2b01      	cmp	r3, #1
 800e182:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800e186:	f040 817e 	bne.w	800e486 <lv_theme_default_init+0x1596>
 800e18a:	210e      	movs	r1, #14
 800e18c:	68e8      	ldr	r0, [r5, #12]
 800e18e:	f014 ff5e 	bl	802304e <lv_disp_dpx.part.0>
 800e192:	4601      	mov	r1, r0
 800e194:	4638      	mov	r0, r7
 800e196:	f016 ff06 	bl	8024fa6 <lv_style_set_pad_column>
    style_init_reset(&styles->list_item_grow);
 800e19a:	6820      	ldr	r0, [r4, #0]
 800e19c:	f500 7008 	add.w	r0, r0, #544	; 0x220
 800e1a0:	f7fe fe9c 	bl	800cedc <style_init_reset>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 800e1a4:	7833      	ldrb	r3, [r6, #0]
 800e1a6:	6827      	ldr	r7, [r4, #0]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800e1ae:	f040 8170 	bne.w	800e492 <lv_theme_default_init+0x15a2>
 800e1b2:	2118      	movs	r1, #24
 800e1b4:	68e8      	ldr	r0, [r5, #12]
 800e1b6:	f014 ff4a 	bl	802304e <lv_disp_dpx.part.0>
 800e1ba:	4601      	mov	r1, r0
 800e1bc:	4638      	mov	r0, r7
 800e1be:	f016 fed6 	bl	8024f6e <lv_style_set_transform_width>
    style_init_reset(&styles->led);
 800e1c2:	6820      	ldr	r0, [r4, #0]
 800e1c4:	f500 7010 	add.w	r0, r0, #576	; 0x240
 800e1c8:	f7fe fe88 	bl	800cedc <style_init_reset>
    lv_style_set_bg_opa(&styles->led, LV_OPA_COVER);
 800e1cc:	6820      	ldr	r0, [r4, #0]
 800e1ce:	21ff      	movs	r1, #255	; 0xff
 800e1d0:	f500 7010 	add.w	r0, r0, #576	; 0x240
 800e1d4:	f016 fef4 	bl	8024fc0 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->led, lv_color_white());
 800e1d8:	6820      	ldr	r0, [r4, #0]
 800e1da:	f500 7310 	add.w	r3, r0, #576	; 0x240
 800e1de:	f014 fef0 	bl	8022fc2 <lv_color_white>
 800e1e2:	4601      	mov	r1, r0
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f016 fee2 	bl	8024fae <lv_style_set_bg_color>
    lv_style_set_bg_grad_color(&styles->led, lv_palette_main(LV_PALETTE_GREY));
 800e1ea:	6826      	ldr	r6, [r4, #0]
 800e1ec:	2012      	movs	r0, #18
 800e1ee:	f506 7610 	add.w	r6, r6, #576	; 0x240
 800e1f2:	f004 f9f7 	bl	80125e4 <lv_palette_main>
 800e1f6:	4601      	mov	r1, r0
 800e1f8:	4630      	mov	r0, r6
 800e1fa:	f016 fee5 	bl	8024fc8 <lv_style_set_bg_grad_color>
    lv_style_set_radius(&styles->led, LV_RADIUS_CIRCLE);
 800e1fe:	6820      	ldr	r0, [r4, #0]
 800e200:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800e204:	f500 7010 	add.w	r0, r0, #576	; 0x240
 800e208:	f016 ff65 	bl	80250d6 <lv_style_set_radius>
    lv_style_set_shadow_width(&styles->led, lv_disp_dpx(theme.disp, 15));
 800e20c:	6826      	ldr	r6, [r4, #0]
 800e20e:	210f      	movs	r1, #15
 800e210:	68e8      	ldr	r0, [r5, #12]
 800e212:	f506 7610 	add.w	r6, r6, #576	; 0x240
 800e216:	f014 ff1a 	bl	802304e <lv_disp_dpx.part.0>
 800e21a:	4601      	mov	r1, r0
 800e21c:	4630      	mov	r0, r6
 800e21e:	f016 ff0e 	bl	802503e <lv_style_set_shadow_width>
    lv_style_set_shadow_color(&styles->led, lv_color_white());
 800e222:	6820      	ldr	r0, [r4, #0]
 800e224:	f500 7310 	add.w	r3, r0, #576	; 0x240
 800e228:	f014 fecb 	bl	8022fc2 <lv_color_white>
 800e22c:	4601      	mov	r1, r0
 800e22e:	4618      	mov	r0, r3
 800e230:	f016 ff11 	bl	8025056 <lv_style_set_shadow_color>
    lv_style_set_shadow_spread(&styles->led, lv_disp_dpx(theme.disp, 5));
 800e234:	6824      	ldr	r4, [r4, #0]
 800e236:	2105      	movs	r1, #5
 800e238:	68e8      	ldr	r0, [r5, #12]
 800e23a:	f504 7410 	add.w	r4, r4, #576	; 0x240
 800e23e:	f014 ff06 	bl	802304e <lv_disp_dpx.part.0>
 800e242:	4601      	mov	r1, r0
 800e244:	4620      	mov	r0, r4
 800e246:	f016 ff02 	bl	802504e <lv_style_set_shadow_spread>
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	f040 8126 	bne.w	800e49e <lv_theme_default_init+0x15ae>
 800e252:	2000      	movs	r0, #0
 800e254:	f7f8 f96e 	bl	8006534 <lv_obj_report_style_change>
    inited = true;
 800e258:	4b94      	ldr	r3, [pc, #592]	; (800e4ac <lv_theme_default_init+0x15bc>)
 800e25a:	2201      	movs	r2, #1
}
 800e25c:	4894      	ldr	r0, [pc, #592]	; (800e4b0 <lv_theme_default_init+0x15c0>)
    inited = true;
 800e25e:	701a      	strb	r2, [r3, #0]
}
 800e260:	b005      	add	sp, #20
 800e262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e266:	2303      	movs	r3, #3
 800e268:	f7fe be67 	b.w	800cf3a <lv_theme_default_init+0x4a>
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 800e26c:	2104      	movs	r1, #4
 800e26e:	2012      	movs	r0, #18
 800e270:	f004 f9c2 	bl	80125f8 <lv_palette_lighten>
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 800e274:	6a2b      	ldr	r3, [r5, #32]
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 800e276:	f8ab 0000 	strh.w	r0, [fp]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 800e27a:	07d9      	lsls	r1, r3, #31
 800e27c:	f53e ae78 	bmi.w	800cf70 <lv_theme_default_init+0x80>
 800e280:	2104      	movs	r1, #4
 800e282:	2012      	movs	r0, #18
 800e284:	f004 f9ca 	bl	801261c <lv_palette_darken>
 800e288:	f7fe be76 	b.w	800cf78 <lv_theme_default_init+0x88>
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 800e28c:	f014 fe99 	bl	8022fc2 <lv_color_white>
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 800e290:	2102      	movs	r1, #2
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 800e292:	f8a9 0000 	strh.w	r0, [r9]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 800e296:	2012      	movs	r0, #18
 800e298:	f004 f9ae 	bl	80125f8 <lv_palette_lighten>
 800e29c:	f8a8 0000 	strh.w	r0, [r8]
 800e2a0:	f7fe be7c 	b.w	800cf9c <lv_theme_default_init+0xac>
                                                                        2) : lv_palette_main(LV_PALETTE_GREY);
 800e2a4:	2012      	movs	r0, #18
 800e2a6:	f004 f99d 	bl	80125e4 <lv_palette_main>
 800e2aa:	f7fe bea8 	b.w	800cffe <lv_theme_default_init+0x10e>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 800e2ae:	2b02      	cmp	r3, #2
 800e2b0:	68e8      	ldr	r0, [r5, #12]
 800e2b2:	bf0c      	ite	eq
 800e2b4:	210c      	moveq	r1, #12
 800e2b6:	210a      	movne	r1, #10
 800e2b8:	f7fe beed 	b.w	800d096 <lv_theme_default_init+0x1a6>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 800e2bc:	2b02      	cmp	r3, #2
 800e2be:	68e8      	ldr	r0, [r5, #12]
 800e2c0:	bf0c      	ite	eq
 800e2c2:	210c      	moveq	r1, #12
 800e2c4:	210a      	movne	r1, #10
 800e2c6:	f7fe bef4 	b.w	800d0b2 <lv_theme_default_init+0x1c2>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 800e2ca:	2b02      	cmp	r3, #2
 800e2cc:	68e8      	ldr	r0, [r5, #12]
 800e2ce:	bf0c      	ite	eq
 800e2d0:	2114      	moveq	r1, #20
 800e2d2:	2110      	movne	r1, #16
 800e2d4:	f7fe bf35 	b.w	800d142 <lv_theme_default_init+0x252>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	68e8      	ldr	r0, [r5, #12]
 800e2dc:	bf0c      	ite	eq
 800e2de:	210c      	moveq	r1, #12
 800e2e0:	210a      	movne	r1, #10
 800e2e2:	f7fe bf3d 	b.w	800d160 <lv_theme_default_init+0x270>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	68e8      	ldr	r0, [r5, #12]
 800e2ea:	bf0c      	ite	eq
 800e2ec:	210c      	moveq	r1, #12
 800e2ee:	210a      	movne	r1, #10
 800e2f0:	f7fe bf62 	b.w	800d1b8 <lv_theme_default_init+0x2c8>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp,
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	68e8      	ldr	r0, [r5, #12]
 800e2f8:	bf0c      	ite	eq
 800e2fa:	210c      	moveq	r1, #12
 800e2fc:	2108      	movne	r1, #8
 800e2fe:	f7fe bfc0 	b.w	800d282 <lv_theme_default_init+0x392>
        lv_style_set_shadow_width(&styles->btn, LV_DPX(3));
 800e302:	2101      	movs	r1, #1
 800e304:	f7fe bff2 	b.w	800d2ec <lv_theme_default_init+0x3fc>
        lv_style_set_shadow_ofs_y(&styles->btn, lv_disp_dpx(theme.disp, LV_DPX(4)));
 800e308:	2101      	movs	r1, #1
 800e30a:	f7ff b80c 	b.w	800d326 <lv_theme_default_init+0x436>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 800e30e:	2b02      	cmp	r3, #2
 800e310:	68e8      	ldr	r0, [r5, #12]
 800e312:	bf0c      	ite	eq
 800e314:	2114      	moveq	r1, #20
 800e316:	2110      	movne	r1, #16
 800e318:	f7ff b81a 	b.w	800d350 <lv_theme_default_init+0x460>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 800e31c:	2b02      	cmp	r3, #2
 800e31e:	68e8      	ldr	r0, [r5, #12]
 800e320:	bf0c      	ite	eq
 800e322:	210c      	moveq	r1, #12
 800e324:	210a      	movne	r1, #10
 800e326:	f7ff b822 	b.w	800d36e <lv_theme_default_init+0x47e>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 800e32a:	2b02      	cmp	r3, #2
 800e32c:	68e8      	ldr	r0, [r5, #12]
 800e32e:	bf0c      	ite	eq
 800e330:	2114      	moveq	r1, #20
 800e332:	2110      	movne	r1, #16
 800e334:	f7ff b878 	b.w	800d428 <lv_theme_default_init+0x538>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 800e338:	2b02      	cmp	r3, #2
 800e33a:	68e8      	ldr	r0, [r5, #12]
 800e33c:	bf0c      	ite	eq
 800e33e:	2114      	moveq	r1, #20
 800e340:	2110      	movne	r1, #16
 800e342:	f7ff b880 	b.w	800d446 <lv_theme_default_init+0x556>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 800e346:	2b02      	cmp	r3, #2
 800e348:	68e8      	ldr	r0, [r5, #12]
 800e34a:	bf0c      	ite	eq
 800e34c:	2114      	moveq	r1, #20
 800e34e:	2110      	movne	r1, #16
 800e350:	f7ff b888 	b.w	800d464 <lv_theme_default_init+0x574>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 800e354:	2b02      	cmp	r3, #2
 800e356:	68e8      	ldr	r0, [r5, #12]
 800e358:	bf0c      	ite	eq
 800e35a:	210c      	moveq	r1, #12
 800e35c:	210a      	movne	r1, #10
 800e35e:	f7ff b894 	b.w	800d48a <lv_theme_default_init+0x59a>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 800e362:	2b02      	cmp	r3, #2
 800e364:	68e8      	ldr	r0, [r5, #12]
 800e366:	bf0c      	ite	eq
 800e368:	210c      	moveq	r1, #12
 800e36a:	210a      	movne	r1, #10
 800e36c:	f7ff b89c 	b.w	800d4a8 <lv_theme_default_init+0x5b8>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 800e370:	2b02      	cmp	r3, #2
 800e372:	68e8      	ldr	r0, [r5, #12]
 800e374:	bf0c      	ite	eq
 800e376:	2106      	moveq	r1, #6
 800e378:	2102      	movne	r1, #2
 800e37a:	f7ff b8ed 	b.w	800d558 <lv_theme_default_init+0x668>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 800e37e:	2b02      	cmp	r3, #2
 800e380:	68e8      	ldr	r0, [r5, #12]
 800e382:	bf0c      	ite	eq
 800e384:	2106      	moveq	r1, #6
 800e386:	2102      	movne	r1, #2
 800e388:	f7ff b8f5 	b.w	800d576 <lv_theme_default_init+0x686>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 800e38c:	2b02      	cmp	r3, #2
 800e38e:	68e8      	ldr	r0, [r5, #12]
 800e390:	bf0c      	ite	eq
 800e392:	2106      	moveq	r1, #6
 800e394:	2102      	movne	r1, #2
 800e396:	f7ff b907 	b.w	800d5a8 <lv_theme_default_init+0x6b8>
    lv_style_set_pad_hor(&styles->menu_cont, PAD_SMALL);
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	68e8      	ldr	r0, [r5, #12]
 800e39e:	bf0c      	ite	eq
 800e3a0:	210c      	moveq	r1, #12
 800e3a2:	210a      	movne	r1, #10
 800e3a4:	f7ff bb93 	b.w	800dace <lv_theme_default_init+0xbde>
    lv_style_set_pad_ver(&styles->menu_cont, PAD_SMALL);
 800e3a8:	2b02      	cmp	r3, #2
 800e3aa:	68e8      	ldr	r0, [r5, #12]
 800e3ac:	bf0c      	ite	eq
 800e3ae:	210c      	moveq	r1, #12
 800e3b0:	210a      	movne	r1, #10
 800e3b2:	f7ff bb9b 	b.w	800daec <lv_theme_default_init+0xbfc>
    lv_style_set_pad_gap(&styles->menu_cont, PAD_SMALL);
 800e3b6:	2b02      	cmp	r3, #2
 800e3b8:	68e8      	ldr	r0, [r5, #12]
 800e3ba:	bf0c      	ite	eq
 800e3bc:	210c      	moveq	r1, #12
 800e3be:	210a      	movne	r1, #10
 800e3c0:	f7ff bba6 	b.w	800db10 <lv_theme_default_init+0xc20>
    lv_style_set_pad_hor(&styles->menu_header_cont, PAD_SMALL);
 800e3c4:	2b02      	cmp	r3, #2
 800e3c6:	68e8      	ldr	r0, [r5, #12]
 800e3c8:	bf0c      	ite	eq
 800e3ca:	210c      	moveq	r1, #12
 800e3cc:	210a      	movne	r1, #10
 800e3ce:	e40f      	b.n	800dbf0 <lv_theme_default_init+0xd00>
    lv_style_set_pad_ver(&styles->menu_header_cont, PAD_TINY);
 800e3d0:	2b02      	cmp	r3, #2
 800e3d2:	68e8      	ldr	r0, [r5, #12]
 800e3d4:	bf0c      	ite	eq
 800e3d6:	2106      	moveq	r1, #6
 800e3d8:	2102      	movne	r1, #2
 800e3da:	e418      	b.n	800dc0e <lv_theme_default_init+0xd1e>
    lv_style_set_pad_gap(&styles->menu_header_cont, PAD_SMALL);
 800e3dc:	2b02      	cmp	r3, #2
 800e3de:	68e8      	ldr	r0, [r5, #12]
 800e3e0:	bf0c      	ite	eq
 800e3e2:	210c      	moveq	r1, #12
 800e3e4:	210a      	movne	r1, #10
 800e3e6:	e421      	b.n	800dc2c <lv_theme_default_init+0xd3c>
    lv_style_set_pad_hor(&styles->menu_header_btn, PAD_TINY);
 800e3e8:	2b02      	cmp	r3, #2
 800e3ea:	68e8      	ldr	r0, [r5, #12]
 800e3ec:	bf0c      	ite	eq
 800e3ee:	2106      	moveq	r1, #6
 800e3f0:	2102      	movne	r1, #2
 800e3f2:	e430      	b.n	800dc56 <lv_theme_default_init+0xd66>
    lv_style_set_pad_ver(&styles->menu_header_btn, PAD_TINY);
 800e3f4:	2b02      	cmp	r3, #2
 800e3f6:	68e8      	ldr	r0, [r5, #12]
 800e3f8:	bf0c      	ite	eq
 800e3fa:	2106      	moveq	r1, #6
 800e3fc:	2102      	movne	r1, #2
 800e3fe:	e43a      	b.n	800dc76 <lv_theme_default_init+0xd86>
    lv_style_set_pad_ver(&styles->menu_separator, PAD_TINY);
 800e400:	2b02      	cmp	r3, #2
 800e402:	68e8      	ldr	r0, [r5, #12]
 800e404:	bf0c      	ite	eq
 800e406:	2106      	moveq	r1, #6
 800e408:	2102      	movne	r1, #2
 800e40a:	e48a      	b.n	800dd22 <lv_theme_default_init+0xe32>
                                                                                                   2) : lv_palette_lighten(LV_PALETTE_GREY, 1));
 800e40c:	2101      	movs	r1, #1
 800e40e:	2012      	movs	r0, #18
 800e410:	f004 f8f2 	bl	80125f8 <lv_palette_lighten>
 800e414:	e539      	b.n	800de8a <lv_theme_default_init+0xf9a>
    lv_style_set_pad_all(&styles->calendar_btnm_bg, PAD_SMALL);
 800e416:	2b02      	cmp	r3, #2
 800e418:	68e8      	ldr	r0, [r5, #12]
 800e41a:	bf0c      	ite	eq
 800e41c:	210c      	moveq	r1, #12
 800e41e:	210a      	movne	r1, #10
 800e420:	e545      	b.n	800deae <lv_theme_default_init+0xfbe>
    lv_style_set_pad_gap(&styles->calendar_btnm_bg, PAD_SMALL / 2);
 800e422:	2b02      	cmp	r3, #2
 800e424:	68e8      	ldr	r0, [r5, #12]
 800e426:	bf0c      	ite	eq
 800e428:	210c      	moveq	r1, #12
 800e42a:	210a      	movne	r1, #10
 800e42c:	e54e      	b.n	800decc <lv_theme_default_init+0xfdc>
    lv_style_set_pad_hor(&styles->calendar_header, PAD_SMALL);
 800e42e:	2b02      	cmp	r3, #2
 800e430:	68e8      	ldr	r0, [r5, #12]
 800e432:	bf0c      	ite	eq
 800e434:	210c      	moveq	r1, #12
 800e436:	210a      	movne	r1, #10
 800e438:	e582      	b.n	800df40 <lv_theme_default_init+0x1050>
    lv_style_set_pad_top(&styles->calendar_header, PAD_SMALL);
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	68e8      	ldr	r0, [r5, #12]
 800e43e:	bf0c      	ite	eq
 800e440:	210c      	moveq	r1, #12
 800e442:	210a      	movne	r1, #10
 800e444:	e598      	b.n	800df78 <lv_theme_default_init+0x1088>
    lv_style_set_pad_bottom(&styles->calendar_header, PAD_TINY);
 800e446:	2b02      	cmp	r3, #2
 800e448:	68e8      	ldr	r0, [r5, #12]
 800e44a:	bf0c      	ite	eq
 800e44c:	2106      	moveq	r1, #6
 800e44e:	2102      	movne	r1, #2
 800e450:	e5a1      	b.n	800df96 <lv_theme_default_init+0x10a6>
    lv_style_set_pad_gap(&styles->calendar_header, PAD_SMALL);
 800e452:	2b02      	cmp	r3, #2
 800e454:	68e8      	ldr	r0, [r5, #12]
 800e456:	bf0c      	ite	eq
 800e458:	210c      	moveq	r1, #12
 800e45a:	210a      	movne	r1, #10
 800e45c:	e5aa      	b.n	800dfb4 <lv_theme_default_init+0x10c4>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 800e45e:	2b01      	cmp	r3, #1
 800e460:	68e8      	ldr	r0, [r5, #12]
 800e462:	bf0c      	ite	eq
 800e464:	210c      	moveq	r1, #12
 800e466:	2108      	movne	r1, #8
 800e468:	f014 fdf1 	bl	802304e <lv_disp_dpx.part.0>
 800e46c:	e603      	b.n	800e076 <lv_theme_default_init+0x1186>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 800e46e:	2b02      	cmp	r3, #2
 800e470:	68e8      	ldr	r0, [r5, #12]
 800e472:	bf0c      	ite	eq
 800e474:	2114      	moveq	r1, #20
 800e476:	2110      	movne	r1, #16
 800e478:	e63d      	b.n	800e0f6 <lv_theme_default_init+0x1206>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 800e47a:	2b02      	cmp	r3, #2
 800e47c:	68e8      	ldr	r0, [r5, #12]
 800e47e:	bf0c      	ite	eq
 800e480:	210c      	moveq	r1, #12
 800e482:	210a      	movne	r1, #10
 800e484:	e674      	b.n	800e170 <lv_theme_default_init+0x1280>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 800e486:	2b02      	cmp	r3, #2
 800e488:	68e8      	ldr	r0, [r5, #12]
 800e48a:	bf0c      	ite	eq
 800e48c:	210c      	moveq	r1, #12
 800e48e:	210a      	movne	r1, #10
 800e490:	e67d      	b.n	800e18e <lv_theme_default_init+0x129e>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 800e492:	2b02      	cmp	r3, #2
 800e494:	68e8      	ldr	r0, [r5, #12]
 800e496:	bf0c      	ite	eq
 800e498:	2114      	moveq	r1, #20
 800e49a:	2110      	movne	r1, #16
 800e49c:	e68b      	b.n	800e1b6 <lv_theme_default_init+0x12c6>
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 800e49e:	9803      	ldr	r0, [sp, #12]
 800e4a0:	f00c fea6 	bl	801b1f0 <lv_disp_get_theme>
 800e4a4:	4285      	cmp	r5, r0
 800e4a6:	f47f aed7 	bne.w	800e258 <lv_theme_default_init+0x1368>
 800e4aa:	e6d2      	b.n	800e252 <lv_theme_default_init+0x1362>
 800e4ac:	24010e30 	.word	0x24010e30
 800e4b0:	240011ac 	.word	0x240011ac

0800e4b4 <lv_theme_default_get>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 800e4b4:	4b03      	ldr	r3, [pc, #12]	; (800e4c4 <lv_theme_default_get+0x10>)
}
 800e4b6:	4804      	ldr	r0, [pc, #16]	; (800e4c8 <lv_theme_default_get+0x14>)
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 800e4b8:	681b      	ldr	r3, [r3, #0]
    return (lv_theme_t *)&theme;
 800e4ba:	2b00      	cmp	r3, #0
}
 800e4bc:	bf08      	it	eq
 800e4be:	4618      	moveq	r0, r3
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	24001208 	.word	0x24001208
 800e4c8:	240011ac 	.word	0x240011ac

0800e4cc <lv_theme_default_is_inited>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 800e4cc:	4b02      	ldr	r3, [pc, #8]	; (800e4d8 <lv_theme_default_is_inited+0xc>)
 800e4ce:	6818      	ldr	r0, [r3, #0]
}
 800e4d0:	3800      	subs	r0, #0
 800e4d2:	bf18      	it	ne
 800e4d4:	2001      	movne	r0, #1
 800e4d6:	4770      	bx	lr
 800e4d8:	24001208 	.word	0x24001208

0800e4dc <lv_calendar_set_showed_date>:

    highlight_update(obj);
}

void lv_calendar_set_showed_date(lv_obj_t * obj, uint32_t year, uint32_t month)
{
 800e4dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_calendar_t * calendar = (lv_calendar_t *)obj;

    calendar->showed_date.year   = year;
    calendar->showed_date.month  = month;
 800e4e0:	fa4f f882 	sxtb.w	r8, r2
    calendar->showed_date.day    = 1;
 800e4e4:	2301      	movs	r3, #1

    uint32_t i;

    /*Remove the disabled state but revert it for day names*/
    lv_btnmatrix_clear_btn_ctrl_all(calendar->btnm, LV_BTNMATRIX_CTRL_DISABLED);
    for(i = 0; i < 7; i++) {
 800e4e6:	2500      	movs	r5, #0
    calendar->showed_date.year   = year;
 800e4e8:	8581      	strh	r1, [r0, #44]	; 0x2c
    calendar->showed_date.month  = month;
 800e4ea:	f880 802e 	strb.w	r8, [r0, #46]	; 0x2e
{
 800e4ee:	4604      	mov	r4, r0
    calendar->showed_date.day    = 1;
 800e4f0:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
{
 800e4f4:	460f      	mov	r7, r1
    lv_btnmatrix_clear_btn_ctrl_all(calendar->btnm, LV_BTNMATRIX_CTRL_DISABLED);
 800e4f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e4f8:	2140      	movs	r1, #64	; 0x40
 800e4fa:	f017 ffcc 	bl	8026496 <lv_btnmatrix_clear_btn_ctrl_all>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i, LV_BTNMATRIX_CTRL_DISABLED);
 800e4fe:	b2a9      	uxth	r1, r5
    for(i = 0; i < 7; i++) {
 800e500:	3501      	adds	r5, #1
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i, LV_BTNMATRIX_CTRL_DISABLED);
 800e502:	2240      	movs	r2, #64	; 0x40
 800e504:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e506:	f017 ffd5 	bl	80264b4 <lv_btnmatrix_set_btn_ctrl>
    for(i = 0; i < 7; i++) {
 800e50a:	2d07      	cmp	r5, #7
 800e50c:	d1f7      	bne.n	800e4fe <lv_calendar_set_showed_date+0x22>
    }

    uint8_t act_mo_len = get_month_length(d.year, d.month);
 800e50e:	b2bf      	uxth	r7, r7
 800e510:	4641      	mov	r1, r8
    uint8_t day_first = get_day_of_week(d.year, d.month, 1);
    uint8_t c;
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800e512:	f504 7a88 	add.w	sl, r4, #272	; 0x110
 800e516:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 800e614 <lv_calendar_set_showed_date+0x138>
    uint8_t act_mo_len = get_month_length(d.year, d.month);
 800e51a:	4638      	mov	r0, r7
 800e51c:	f014 fdac 	bl	8023078 <get_month_length>
 800e520:	4605      	mov	r5, r0
    uint8_t day_first = get_day_of_week(d.year, d.month, 1);
 800e522:	4641      	mov	r1, r8
 800e524:	4638      	mov	r0, r7
 800e526:	f014 fe2e 	bl	8023186 <get_day_of_week.constprop.0>
 800e52a:	4606      	mov	r6, r0
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
 800e52c:	1c41      	adds	r1, r0, #1
 800e52e:	4405      	add	r5, r0
 800e530:	1b8b      	subs	r3, r1, r6
 800e532:	f101 0901 	add.w	r9, r1, #1
 800e536:	3901      	subs	r1, #1
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	428d      	cmp	r5, r1
 800e53c:	d836      	bhi.n	800e5ac <lv_calendar_set_showed_date+0xd0>
    }

    uint8_t prev_mo_len = get_month_length(d.year, d.month - 1);
 800e53e:	f108 31ff 	add.w	r1, r8, #4294967295
 800e542:	4638      	mov	r0, r7
 800e544:	f014 fd98 	bl	8023078 <get_month_length>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 800e548:	f1c6 0301 	rsb	r3, r6, #1
 800e54c:	f504 798c 	add.w	r9, r4, #280	; 0x118
 800e550:	2700      	movs	r7, #0
 800e552:	eb00 0803 	add.w	r8, r0, r3
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800e556:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800e614 <lv_calendar_set_showed_date+0x138>
 800e55a:	46ca      	mov	sl, r9
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 800e55c:	fa5f f888 	uxtb.w	r8, r8
 800e560:	eb08 0307 	add.w	r3, r8, r7
 800e564:	42b7      	cmp	r7, r6
 800e566:	b2db      	uxtb	r3, r3
 800e568:	d328      	bcc.n	800e5bc <lv_calendar_set_showed_date+0xe0>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
    }

    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800e56a:	f1c5 0701 	rsb	r7, r5, #1
 800e56e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800e614 <lv_calendar_set_showed_date+0x138>
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 800e572:	2d29      	cmp	r5, #41	; 0x29
 800e574:	d931      	bls.n	800e5da <lv_calendar_set_showed_date+0xfe>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
    }

    highlight_update(obj);
 800e576:	4620      	mov	r0, r4
 800e578:	f014 fe2d 	bl	80231d6 <highlight_update>

    /*Reset the focused button if the days changes*/
    if(lv_btnmatrix_get_selected_btn(calendar->btnm) != LV_BTNMATRIX_BTN_NONE) {
 800e57c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e57e:	f017 ffcb 	bl	8026518 <lv_btnmatrix_get_selected_btn>
 800e582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e586:	4298      	cmp	r0, r3
 800e588:	d004      	beq.n	800e594 <lv_calendar_set_showed_date+0xb8>
        lv_btnmatrix_set_selected_btn(calendar->btnm, day_first + 7);
 800e58a:	1df1      	adds	r1, r6, #7
 800e58c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e58e:	b289      	uxth	r1, r1
 800e590:	f017 ff54 	bl	802643c <lv_btnmatrix_set_selected_btn>
    }

    lv_obj_invalidate(obj);
 800e594:	4620      	mov	r0, r4

    /* The children of the calendar are probably headers.
     * Notify them to let the headers updated to the new date*/
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
    for(i = 0; i < child_cnt; i++) {
 800e596:	2500      	movs	r5, #0
    lv_obj_invalidate(obj);
 800e598:	f00e fb80 	bl	801cc9c <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800e59c:	4620      	mov	r0, r4
 800e59e:	f00f fe39 	bl	801e214 <lv_obj_get_child_cnt>
 800e5a2:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 800e5a4:	42b5      	cmp	r5, r6
 800e5a6:	d127      	bne.n	800e5f8 <lv_calendar_set_showed_date+0x11c>
        lv_obj_t * child = lv_obj_get_child(obj, i);
        if(child == calendar->btnm) continue;
        lv_event_send(child, LV_EVENT_VALUE_CHANGED, obj);
    }
}
 800e5a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800e5ac:	2104      	movs	r1, #4
 800e5ae:	465a      	mov	r2, fp
 800e5b0:	eb0a 0089 	add.w	r0, sl, r9, lsl #2
 800e5b4:	f7f4 fbac 	bl	8002d10 <snprintf>
 800e5b8:	4649      	mov	r1, r9
 800e5ba:	e7b9      	b.n	800e530 <lv_calendar_set_showed_date+0x54>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800e5bc:	465a      	mov	r2, fp
 800e5be:	2104      	movs	r1, #4
 800e5c0:	4648      	mov	r0, r9
 800e5c2:	f109 0904 	add.w	r9, r9, #4
 800e5c6:	f7f4 fba3 	bl	8002d10 <snprintf>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 800e5ca:	1df9      	adds	r1, r7, #7
 800e5cc:	2240      	movs	r2, #64	; 0x40
 800e5ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e5d0:	b289      	uxth	r1, r1
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 800e5d2:	3701      	adds	r7, #1
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 800e5d4:	f017 ff6e 	bl	80264b4 <lv_btnmatrix_set_btn_ctrl>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 800e5d8:	e7c2      	b.n	800e560 <lv_calendar_set_showed_date+0x84>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800e5da:	197b      	adds	r3, r7, r5
 800e5dc:	4642      	mov	r2, r8
 800e5de:	2104      	movs	r1, #4
 800e5e0:	eb0a 0085 	add.w	r0, sl, r5, lsl #2
 800e5e4:	f7f4 fb94 	bl	8002d10 <snprintf>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 800e5e8:	1de9      	adds	r1, r5, #7
 800e5ea:	2240      	movs	r2, #64	; 0x40
 800e5ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e5ee:	b289      	uxth	r1, r1
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 800e5f0:	3501      	adds	r5, #1
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 800e5f2:	f017 ff5f 	bl	80264b4 <lv_btnmatrix_set_btn_ctrl>
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 800e5f6:	e7bc      	b.n	800e572 <lv_calendar_set_showed_date+0x96>
        lv_obj_t * child = lv_obj_get_child(obj, i);
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f00f fdfb 	bl	801e1f6 <lv_obj_get_child>
        if(child == calendar->btnm) continue;
 800e600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e602:	4283      	cmp	r3, r0
 800e604:	d003      	beq.n	800e60e <lv_calendar_set_showed_date+0x132>
        lv_event_send(child, LV_EVENT_VALUE_CHANGED, obj);
 800e606:	4622      	mov	r2, r4
 800e608:	211c      	movs	r1, #28
 800e60a:	f7f6 f89b 	bl	8004744 <lv_event_send>
    for(i = 0; i < child_cnt; i++) {
 800e60e:	3501      	adds	r5, #1
 800e610:	e7c8      	b.n	800e5a4 <lv_calendar_set_showed_date+0xc8>
 800e612:	bf00      	nop
 800e614:	0802e11e 	.word	0x0802e11e

0800e618 <lv_calendar_constructor>:
/**********************
 *  STATIC FUNCTIONS
 **********************/

static void lv_calendar_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 800e618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    calendar->showed_date.year  = 2020;
    calendar->showed_date.month = 1;
    calendar->showed_date.day   = 1;

    calendar->highlighted_dates      = NULL;
 800e61a:	2500      	movs	r5, #0
{
 800e61c:	460c      	mov	r4, r1
    calendar->today.year  = 2020;
 800e61e:	4b32      	ldr	r3, [pc, #200]	; (800e6e8 <lv_calendar_constructor+0xd0>)
 800e620:	22a8      	movs	r2, #168	; 0xa8
    calendar->highlighted_dates      = NULL;
 800e622:	630d      	str	r5, [r1, #48]	; 0x30
 800e624:	f504 708c 	add.w	r0, r4, #280	; 0x118
    calendar->highlighted_dates_num  = 0;
 800e628:	868d      	strh	r5, [r1, #52]	; 0x34
        }
        else if(i < 7) {
            calendar->map[i] = day_names_def[i];
        }
        else {
            calendar->nums[j][0] = 'x';
 800e62a:	2778      	movs	r7, #120	; 0x78
 800e62c:	4e2f      	ldr	r6, [pc, #188]	; (800e6ec <lv_calendar_constructor+0xd4>)
    calendar->showed_date.year  = 2020;
 800e62e:	e9c1 330a 	strd	r3, r3, [r1, #40]	; 0x28
 800e632:	4629      	mov	r1, r5
 800e634:	f00c f8a8 	bl	801a788 <memset>
 800e638:	4629      	mov	r1, r5
    uint8_t j = 0;
 800e63a:	462a      	mov	r2, r5
 800e63c:	f104 0334 	add.w	r3, r4, #52	; 0x34
            calendar->map[i] = day_names_def[i];
 800e640:	4d2b      	ldr	r5, [pc, #172]	; (800e6f0 <lv_calendar_constructor+0xd8>)
 800e642:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 800e6f4 <lv_calendar_constructor+0xdc>
        if(i != 0 && (i + 1) % 8 == 0) {
 800e646:	3304      	adds	r3, #4
 800e648:	b151      	cbz	r1, 800e660 <lv_calendar_constructor+0x48>
 800e64a:	1c48      	adds	r0, r1, #1
 800e64c:	f010 0f07 	tst.w	r0, #7
 800e650:	d047      	beq.n	800e6e2 <lv_calendar_constructor+0xca>
        else if(i < 7) {
 800e652:	2906      	cmp	r1, #6
 800e654:	d807      	bhi.n	800e666 <lv_calendar_constructor+0x4e>
            calendar->map[i] = day_names_def[i];
 800e656:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800e65a:	6019      	str	r1, [r3, #0]
{
 800e65c:	4601      	mov	r1, r0
 800e65e:	e7f2      	b.n	800e646 <lv_calendar_constructor+0x2e>
    for(i = 0; i < 8 * 7; i++) {
 800e660:	2001      	movs	r0, #1
            calendar->map[i] = day_names_def[i];
 800e662:	601d      	str	r5, [r3, #0]
    for(i = 0; i < 8 * 7; i++) {
 800e664:	e7fa      	b.n	800e65c <lv_calendar_constructor+0x44>
            calendar->nums[j][0] = 'x';
 800e666:	f102 0146 	add.w	r1, r2, #70	; 0x46
            calendar->map[i] = calendar->nums[j];
            j++;
 800e66a:	3201      	adds	r2, #1
            calendar->nums[j][0] = 'x';
 800e66c:	f804 7021 	strb.w	r7, [r4, r1, lsl #2]
            j++;
 800e670:	b2d2      	uxtb	r2, r2
            calendar->map[i] = calendar->nums[j];
 800e672:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for(i = 0; i < 8 * 7; i++) {
 800e676:	2838      	cmp	r0, #56	; 0x38
            calendar->map[i] = day_names_def[i];
 800e678:	6019      	str	r1, [r3, #0]
    for(i = 0; i < 8 * 7; i++) {
 800e67a:	d1ef      	bne.n	800e65c <lv_calendar_constructor+0x44>
        }
    }
    calendar->map[8 * 7 - 1] = "";
 800e67c:	4b1e      	ldr	r3, [pc, #120]	; (800e6f8 <lv_calendar_constructor+0xe0>)

    calendar->btnm = lv_btnmatrix_create(obj);
 800e67e:	4620      	mov	r0, r4
    calendar->map[8 * 7 - 1] = "";
 800e680:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    calendar->btnm = lv_btnmatrix_create(obj);
 800e684:	f005 fe48 	bl	8014318 <lv_btnmatrix_create>
    lv_btnmatrix_set_map(calendar->btnm, calendar->map);
 800e688:	f104 0138 	add.w	r1, r4, #56	; 0x38
    calendar->btnm = lv_btnmatrix_create(obj);
 800e68c:	6260      	str	r0, [r4, #36]	; 0x24
    lv_btnmatrix_set_map(calendar->btnm, calendar->map);
 800e68e:	f017 fec4 	bl	802641a <lv_btnmatrix_set_map>
    lv_btnmatrix_set_btn_ctrl_all(calendar->btnm, LV_BTNMATRIX_CTRL_CLICK_TRIG | LV_BTNMATRIX_CTRL_NO_REPEAT);
 800e692:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e694:	f44f 7108 	mov.w	r1, #544	; 0x220
 800e698:	f017 ff2f 	bl	80264fa <lv_btnmatrix_set_btn_ctrl_all>
    lv_obj_add_event_cb(calendar->btnm, draw_part_begin_event_cb, LV_EVENT_DRAW_PART_BEGIN, NULL);
 800e69c:	2300      	movs	r3, #0
 800e69e:	221a      	movs	r2, #26
 800e6a0:	4916      	ldr	r1, [pc, #88]	; (800e6fc <lv_calendar_constructor+0xe4>)
 800e6a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e6a4:	f00c fde5 	bl	801b272 <lv_obj_add_event_cb>
    lv_obj_set_width(calendar->btnm, lv_pct(100));
 800e6a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e6aa:	f242 0164 	movw	r1, #8292	; 0x2064
 800e6ae:	f00e f83b 	bl	801c728 <lv_obj_set_width>

    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	2101      	movs	r1, #1
 800e6b6:	f7fc ff89 	bl	800b5cc <lv_obj_set_flex_flow>
    lv_obj_set_flex_grow(calendar->btnm, 1);
 800e6ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e6bc:	2101      	movs	r1, #1
 800e6be:	f014 fc43 	bl	8022f48 <lv_obj_set_flex_grow>

    lv_calendar_set_showed_date(obj, calendar->showed_date.year, calendar->showed_date.month);
 800e6c2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800e6c4:	f994 202e 	ldrsb.w	r2, [r4, #46]	; 0x2e
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	f7ff ff07 	bl	800e4dc <lv_calendar_set_showed_date>
    highlight_update(obj);
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f014 fd81 	bl	80231d6 <highlight_update>
    lv_calendar_set_today_date(obj, calendar->today.year, calendar->today.month, calendar->today.day);

    lv_obj_add_flag(calendar->btnm, LV_OBJ_FLAG_EVENT_BUBBLE);
 800e6d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e6d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 800e6da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_add_flag(calendar->btnm, LV_OBJ_FLAG_EVENT_BUBBLE);
 800e6de:	f00d b944 	b.w	801b96a <lv_obj_add_flag>
 800e6e2:	4631      	mov	r1, r6
 800e6e4:	e7c7      	b.n	800e676 <lv_calendar_constructor+0x5e>
 800e6e6:	bf00      	nop
 800e6e8:	010107e4 	.word	0x010107e4
 800e6ec:	08029fb1 	.word	0x08029fb1
 800e6f0:	0802ac45 	.word	0x0802ac45
 800e6f4:	08028e48 	.word	0x08028e48
 800e6f8:	08029fb2 	.word	0x08029fb2
 800e6fc:	080230db 	.word	0x080230db

0800e700 <my_constructor>:
/**********************
 *  STATIC FUNCTIONS
 **********************/

static void my_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 800e700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e702:	460c      	mov	r4, r1
    LV_TRACE_OBJ_CREATE("begin");

    LV_UNUSED(class_p);

    lv_obj_move_to_index(obj, 0);
 800e704:	2100      	movs	r1, #0
    lv_obj_set_height(mo_prev, lv_pct(100));
    lv_obj_update_layout(mo_prev);
    lv_coord_t btn_size = lv_obj_get_height(mo_prev);
    lv_obj_set_width(mo_prev, btn_size);

    lv_obj_add_event_cb(mo_prev, month_event_cb, LV_EVENT_CLICKED, NULL);
 800e706:	4f32      	ldr	r7, [pc, #200]	; (800e7d0 <my_constructor+0xd0>)
    lv_obj_move_to_index(obj, 0);
 800e708:	4620      	mov	r0, r4
 800e70a:	f00f fec8 	bl	801e49e <lv_obj_move_to_index>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 800e70e:	4620      	mov	r0, r4
 800e710:	2100      	movs	r1, #0
 800e712:	f7fc ff5b 	bl	800b5cc <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_START);
 800e716:	2300      	movs	r3, #0
 800e718:	2202      	movs	r2, #2
 800e71a:	4620      	mov	r0, r4
 800e71c:	4619      	mov	r1, r3
 800e71e:	f7fc ff7d 	bl	800b61c <lv_obj_set_flex_align>
    lv_obj_t * mo_prev = lv_btn_create(obj);
 800e722:	4620      	mov	r0, r4
 800e724:	f005 fad4 	bl	8013cd0 <lv_btn_create>
 800e728:	4605      	mov	r5, r0
    lv_obj_set_style_bg_img_src(mo_prev, LV_SYMBOL_LEFT, 0);
 800e72a:	2200      	movs	r2, #0
 800e72c:	4929      	ldr	r1, [pc, #164]	; (800e7d4 <my_constructor+0xd4>)
 800e72e:	f00f fd43 	bl	801e1b8 <lv_obj_set_style_bg_img_src>
    lv_obj_set_height(mo_prev, lv_pct(100));
 800e732:	f242 0164 	movw	r1, #8292	; 0x2064
 800e736:	4628      	mov	r0, r5
 800e738:	f00e f80d 	bl	801c756 <lv_obj_set_height>
    lv_obj_update_layout(mo_prev);
 800e73c:	4628      	mov	r0, r5
 800e73e:	f7f7 f843 	bl	80057c8 <lv_obj_update_layout>
    lv_coord_t btn_size = lv_obj_get_height(mo_prev);
 800e742:	4628      	mov	r0, r5
 800e744:	f00e f8b0 	bl	801c8a8 <lv_obj_get_height>
 800e748:	4606      	mov	r6, r0
    lv_obj_set_width(mo_prev, btn_size);
 800e74a:	4601      	mov	r1, r0
 800e74c:	4628      	mov	r0, r5
 800e74e:	f00d ffeb 	bl	801c728 <lv_obj_set_width>
    lv_obj_add_event_cb(mo_prev, month_event_cb, LV_EVENT_CLICKED, NULL);
 800e752:	2300      	movs	r3, #0
 800e754:	2207      	movs	r2, #7
 800e756:	4639      	mov	r1, r7
 800e758:	4628      	mov	r0, r5
 800e75a:	f00c fd8a 	bl	801b272 <lv_obj_add_event_cb>
    lv_obj_clear_flag(mo_prev, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 800e75e:	2104      	movs	r1, #4
 800e760:	4628      	mov	r0, r5
 800e762:	f00d f938 	bl	801b9d6 <lv_obj_clear_flag>

    lv_obj_t * label = lv_label_create(obj);
 800e766:	4620      	mov	r0, r4
 800e768:	f007 fd74 	bl	8016254 <lv_label_create>
 800e76c:	4605      	mov	r5, r0
    lv_label_set_long_mode(label, LV_LABEL_LONG_SCROLL_CIRCULAR);
 800e76e:	2103      	movs	r1, #3
 800e770:	f007 fd7c 	bl	801626c <lv_label_set_long_mode>
    lv_obj_set_style_text_align(label, LV_TEXT_ALIGN_CENTER, 0);
 800e774:	2200      	movs	r2, #0
 800e776:	4628      	mov	r0, r5
 800e778:	2102      	movs	r1, #2
 800e77a:	f00f fd22 	bl	801e1c2 <lv_obj_set_style_text_align>
    lv_obj_set_flex_grow(label, 1);
 800e77e:	2101      	movs	r1, #1
 800e780:	4628      	mov	r0, r5
 800e782:	f014 fbe1 	bl	8022f48 <lv_obj_set_flex_grow>

    lv_obj_t * mo_next = lv_btn_create(obj);
 800e786:	4620      	mov	r0, r4
 800e788:	f005 faa2 	bl	8013cd0 <lv_btn_create>
 800e78c:	4605      	mov	r5, r0
    lv_obj_set_style_bg_img_src(mo_next, LV_SYMBOL_RIGHT, 0);
 800e78e:	2200      	movs	r2, #0
 800e790:	4911      	ldr	r1, [pc, #68]	; (800e7d8 <my_constructor+0xd8>)
 800e792:	f00f fd11 	bl	801e1b8 <lv_obj_set_style_bg_img_src>
    lv_obj_set_size(mo_next, btn_size, btn_size);
 800e796:	4632      	mov	r2, r6
 800e798:	4631      	mov	r1, r6
 800e79a:	4628      	mov	r0, r5
 800e79c:	f00d fff2 	bl	801c784 <lv_obj_set_size>

    lv_obj_add_event_cb(mo_next, month_event_cb, LV_EVENT_CLICKED, NULL);
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	2207      	movs	r2, #7
 800e7a4:	4639      	mov	r1, r7
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	f00c fd63 	bl	801b272 <lv_obj_add_event_cb>
    lv_obj_clear_flag(mo_next, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	2104      	movs	r1, #4
 800e7b0:	f00d f911 	bl	801b9d6 <lv_obj_clear_flag>

    lv_obj_add_event_cb(obj, value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	221c      	movs	r2, #28
 800e7b8:	4908      	ldr	r1, [pc, #32]	; (800e7dc <my_constructor+0xdc>)
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f00c fd59 	bl	801b272 <lv_obj_add_event_cb>
    /*Refresh the drop downs*/
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	211c      	movs	r1, #28
}
 800e7c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800e7ca:	f7f5 bfbb 	b.w	8004744 <lv_event_send>
 800e7ce:	bf00      	nop
 800e7d0:	0800e81d 	.word	0x0800e81d
 800e7d4:	0802ac5a 	.word	0x0802ac5a
 800e7d8:	0802ac5e 	.word	0x0802ac5e
 800e7dc:	0800e7e1 	.word	0x0800e7e1

0800e7e0 <value_changed_event_cb>:
    lv_obj_t * label = lv_obj_get_child(header, 1);
    lv_label_set_text_fmt(label, "%d %s", newd.year, month_names_def[newd.month - 1]);
}

static void value_changed_event_cb(lv_event_t * e)
{
 800e7e0:	b570      	push	{r4, r5, r6, lr}
    lv_obj_t * header = lv_event_get_target(e);
 800e7e2:	f00c fd3a 	bl	801b25a <lv_event_get_target>
 800e7e6:	4605      	mov	r5, r0
    lv_obj_t * calendar = lv_obj_get_parent(header);
 800e7e8:	f00f fd02 	bl	801e1f0 <lv_obj_get_parent>

    const lv_calendar_date_t * cur_date = lv_calendar_get_showed_date(calendar);
 800e7ec:	f014 fd36 	bl	802325c <lv_calendar_get_showed_date>
 800e7f0:	4604      	mov	r4, r0
    lv_obj_t * label = lv_obj_get_child(header, 1);
 800e7f2:	2101      	movs	r1, #1
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	f00f fcfe 	bl	801e1f6 <lv_obj_get_child>
    lv_label_set_text_fmt(label, "%d %s", cur_date->year, month_names_def[cur_date->month - 1]);
 800e7fa:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800e7fe:	4a05      	ldr	r2, [pc, #20]	; (800e814 <value_changed_event_cb+0x34>)
 800e800:	3b01      	subs	r3, #1
 800e802:	4905      	ldr	r1, [pc, #20]	; (800e818 <value_changed_event_cb+0x38>)
 800e804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e808:	8822      	ldrh	r2, [r4, #0]
}
 800e80a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_set_text_fmt(label, "%d %s", cur_date->year, month_names_def[cur_date->month - 1]);
 800e80e:	f018 bba4 	b.w	8026f5a <lv_label_set_text_fmt>
 800e812:	bf00      	nop
 800e814:	08028e80 	.word	0x08028e80
 800e818:	0802ac62 	.word	0x0802ac62

0800e81c <month_event_cb>:
{
 800e81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_t * btn = lv_event_get_target(e);
 800e820:	f00c fd1b 	bl	801b25a <lv_event_get_target>
 800e824:	4680      	mov	r8, r0
    lv_obj_t * header = lv_obj_get_parent(btn);
 800e826:	f00f fce3 	bl	801e1f0 <lv_obj_get_parent>
 800e82a:	4606      	mov	r6, r0
    lv_obj_t * calendar = lv_obj_get_parent(header);
 800e82c:	f00f fce0 	bl	801e1f0 <lv_obj_get_parent>
 800e830:	4607      	mov	r7, r0
    d = lv_calendar_get_showed_date(calendar);
 800e832:	f014 fd13 	bl	802325c <lv_calendar_get_showed_date>
    if(lv_obj_get_child(header, 0) == btn) {
 800e836:	2100      	movs	r1, #0
    lv_calendar_date_t newd = *d;
 800e838:	8805      	ldrh	r5, [r0, #0]
 800e83a:	f990 4002 	ldrsb.w	r4, [r0, #2]
    if(lv_obj_get_child(header, 0) == btn) {
 800e83e:	4630      	mov	r0, r6
 800e840:	f00f fcd9 	bl	801e1f6 <lv_obj_get_child>
 800e844:	4580      	cmp	r8, r0
 800e846:	d11a      	bne.n	800e87e <month_event_cb+0x62>
        if(newd.month == 1) {
 800e848:	2c01      	cmp	r4, #1
 800e84a:	d115      	bne.n	800e878 <month_event_cb+0x5c>
            newd.year --;
 800e84c:	3d01      	subs	r5, #1
            newd.month = 12;
 800e84e:	240c      	movs	r4, #12
            newd.year --;
 800e850:	b2ad      	uxth	r5, r5
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 800e852:	4622      	mov	r2, r4
 800e854:	4629      	mov	r1, r5
 800e856:	4638      	mov	r0, r7
    lv_label_set_text_fmt(label, "%d %s", newd.year, month_names_def[newd.month - 1]);
 800e858:	3c01      	subs	r4, #1
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 800e85a:	f7ff fe3f 	bl	800e4dc <lv_calendar_set_showed_date>
    lv_obj_t * label = lv_obj_get_child(header, 1);
 800e85e:	2101      	movs	r1, #1
 800e860:	4630      	mov	r0, r6
 800e862:	f00f fcc8 	bl	801e1f6 <lv_obj_get_child>
    lv_label_set_text_fmt(label, "%d %s", newd.year, month_names_def[newd.month - 1]);
 800e866:	4b0a      	ldr	r3, [pc, #40]	; (800e890 <month_event_cb+0x74>)
 800e868:	462a      	mov	r2, r5
 800e86a:	490a      	ldr	r1, [pc, #40]	; (800e894 <month_event_cb+0x78>)
 800e86c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
}
 800e870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_label_set_text_fmt(label, "%d %s", newd.year, month_names_def[newd.month - 1]);
 800e874:	f018 bb71 	b.w	8026f5a <lv_label_set_text_fmt>
            newd.month --;
 800e878:	3c01      	subs	r4, #1
            newd.month ++;
 800e87a:	b264      	sxtb	r4, r4
 800e87c:	e7e9      	b.n	800e852 <month_event_cb+0x36>
        if(newd.month == 12) {
 800e87e:	2c0c      	cmp	r4, #12
 800e880:	d103      	bne.n	800e88a <month_event_cb+0x6e>
            newd.year ++;
 800e882:	3501      	adds	r5, #1
            newd.month = 1;
 800e884:	2401      	movs	r4, #1
            newd.year ++;
 800e886:	b2ad      	uxth	r5, r5
 800e888:	e7e3      	b.n	800e852 <month_event_cb+0x36>
            newd.month ++;
 800e88a:	3401      	adds	r4, #1
 800e88c:	e7f5      	b.n	800e87a <month_event_cb+0x5e>
 800e88e:	bf00      	nop
 800e890:	08028e80 	.word	0x08028e80
 800e894:	0802ac62 	.word	0x0802ac62

0800e898 <my_constructor>:
/**********************
 *  STATIC FUNCTIONS
 **********************/

static void my_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 800e898:	b570      	push	{r4, r5, r6, lr}
 800e89a:	460c      	mov	r4, r1
    LV_TRACE_OBJ_CREATE("begin");

    LV_UNUSED(class_p);

    lv_obj_t * calendar = lv_obj_get_parent(obj);
 800e89c:	4608      	mov	r0, r1
 800e89e:	f00f fca7 	bl	801e1f0 <lv_obj_get_parent>
    lv_obj_move_to_index(obj, 0);
 800e8a2:	2100      	movs	r1, #0
    lv_obj_t * calendar = lv_obj_get_parent(obj);
 800e8a4:	4606      	mov	r6, r0
    lv_obj_move_to_index(obj, 0);
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f00f fdf9 	bl	801e49e <lv_obj_move_to_index>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 800e8ac:	2100      	movs	r1, #0
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	f7fc fe8c 	bl	800b5cc <lv_obj_set_flex_flow>

    lv_obj_t * year_dd = lv_dropdown_create(obj);
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	f006 f98b 	bl	8014bd0 <lv_dropdown_create>
 800e8ba:	4605      	mov	r5, r0
    lv_dropdown_set_options(year_dd, year_list);
 800e8bc:	4915      	ldr	r1, [pc, #84]	; (800e914 <my_constructor+0x7c>)
 800e8be:	f017 ffb6 	bl	802682e <lv_dropdown_set_options>
    lv_obj_add_event_cb(year_dd, year_event_cb, LV_EVENT_VALUE_CHANGED, calendar);
 800e8c2:	4633      	mov	r3, r6
 800e8c4:	221c      	movs	r2, #28
 800e8c6:	4914      	ldr	r1, [pc, #80]	; (800e918 <my_constructor+0x80>)
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	f00c fcd2 	bl	801b272 <lv_obj_add_event_cb>
    lv_obj_set_flex_grow(year_dd, 1);
 800e8ce:	2101      	movs	r1, #1
 800e8d0:	4628      	mov	r0, r5
 800e8d2:	f014 fb39 	bl	8022f48 <lv_obj_set_flex_grow>

    lv_obj_t * month_dd = lv_dropdown_create(obj);
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	f006 f97a 	bl	8014bd0 <lv_dropdown_create>
 800e8dc:	4605      	mov	r5, r0
    lv_dropdown_set_options(month_dd, month_list);
 800e8de:	490f      	ldr	r1, [pc, #60]	; (800e91c <my_constructor+0x84>)
 800e8e0:	f017 ffa5 	bl	802682e <lv_dropdown_set_options>
    lv_obj_add_event_cb(month_dd, month_event_cb, LV_EVENT_VALUE_CHANGED, calendar);
 800e8e4:	4633      	mov	r3, r6
 800e8e6:	221c      	movs	r2, #28
 800e8e8:	490d      	ldr	r1, [pc, #52]	; (800e920 <my_constructor+0x88>)
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	f00c fcc1 	bl	801b272 <lv_obj_add_event_cb>
    lv_obj_set_flex_grow(month_dd, 1);
 800e8f0:	4628      	mov	r0, r5
 800e8f2:	2101      	movs	r1, #1
 800e8f4:	f014 fb28 	bl	8022f48 <lv_obj_set_flex_grow>

    lv_obj_add_event_cb(obj, value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 800e8f8:	221c      	movs	r2, #28
 800e8fa:	490a      	ldr	r1, [pc, #40]	; (800e924 <my_constructor+0x8c>)
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	2300      	movs	r3, #0
 800e900:	f00c fcb7 	bl	801b272 <lv_obj_add_event_cb>
    /*Refresh the drop downs*/
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800e904:	4620      	mov	r0, r4
 800e906:	2200      	movs	r2, #0
 800e908:	211c      	movs	r1, #28
}
 800e90a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800e90e:	f7f5 bf19 	b.w	8004744 <lv_event_send>
 800e912:	bf00      	nop
 800e914:	0802acbe 	.word	0x0802acbe
 800e918:	080232d1 	.word	0x080232d1
 800e91c:	0802af25 	.word	0x0802af25
 800e920:	080232a1 	.word	0x080232a1
 800e924:	08023261 	.word	0x08023261

0800e928 <lv_chart_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_chart_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 800e928:	b510      	push	{r4, lr}
 800e92a:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_chart_t * chart = (lv_chart_t *)obj;

    _lv_ll_init(&chart->series_ll, sizeof(lv_chart_series_t));
 800e92c:	2110      	movs	r1, #16
 800e92e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e932:	f016 f885 	bl	8024a40 <_lv_ll_init>
    _lv_ll_init(&chart->cursor_ll, sizeof(lv_chart_cursor_t));
 800e936:	2110      	movs	r1, #16
 800e938:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800e93c:	f016 f880 	bl	8024a40 <_lv_ll_init>

    chart->ymin[0] = 0;
    chart->xmin[0] = 0;
    chart->ymin[1] = 0;
    chart->xmin[1] = 0;
    chart->ymax[0] = 100;
 800e940:	2200      	movs	r2, #0
 800e942:	f04f 1364 	mov.w	r3, #6553700	; 0x640064
 800e946:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    chart->xmax[0] = 100;
 800e94a:	e9c4 231d 	strd	r2, r3, [r4, #116]	; 0x74
    chart->ymax[1] = 100;
    chart->xmax[1] = 100;

    chart->hdiv_cnt    = LV_CHART_HDIV_DEF;
    chart->vdiv_cnt    = LV_CHART_VDIV_DEF;
 800e94e:	4b08      	ldr	r3, [pc, #32]	; (800e970 <lv_chart_constructor+0x48>)
 800e950:	4a08      	ldr	r2, [pc, #32]	; (800e974 <lv_chart_constructor+0x4c>)
 800e952:	e9c4 231f 	strd	r2, r3, [r4, #124]	; 0x7c
    chart->point_cnt   = LV_CHART_POINT_CNT_DEF;
    chart->pressed_point_id  = LV_CHART_POINT_NONE;
    chart->type        = LV_CHART_TYPE_LINE;
    chart->update_mode = LV_CHART_UPDATE_MODE_SHIFT;
    chart->zoom_x      = LV_IMG_ZOOM_NONE;
 800e956:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 800e95a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    chart->type        = LV_CHART_TYPE_LINE;
 800e95e:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 800e962:	f023 030f 	bic.w	r3, r3, #15
 800e966:	f043 0301 	orr.w	r3, r3, #1
 800e96a:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    chart->zoom_y      = LV_IMG_ZOOM_NONE;

    LV_TRACE_OBJ_CREATE("finished");
}
 800e96e:	bd10      	pop	{r4, pc}
 800e970:	000a0005 	.word	0x000a0005
 800e974:	00037fff 	.word	0x00037fff

0800e978 <draw_y_ticks>:

    draw_ctx->clip_area = clip_area_ori;
}

static void draw_y_ticks(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, lv_chart_axis_t axis)
{
 800e978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e97c:	4689      	mov	r9, r1
 800e97e:	b0b3      	sub	sp, #204	; 0xcc
    lv_chart_t * chart  = (lv_chart_t *)obj;

    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 800e980:	4611      	mov	r1, r2
{
 800e982:	4604      	mov	r4, r0
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 800e984:	f014 fe89 	bl	802369a <get_tick_gsc>

    if(t->major_cnt <= 1) return;
 800e988:	8903      	ldrh	r3, [r0, #8]
{
 800e98a:	4616      	mov	r6, r2
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 800e98c:	4605      	mov	r5, r0
    if(t->major_cnt <= 1) return;
 800e98e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e992:	2b01      	cmp	r3, #1
 800e994:	f240 8131 	bls.w	800ebfa <draw_y_ticks+0x282>
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 800e998:	f990 3009 	ldrsb.w	r3, [r0, #9]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	db03      	blt.n	800e9a8 <draw_y_ticks+0x30>
 800e9a0:	6803      	ldr	r3, [r0, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	f000 8129 	beq.w	800ebfa <draw_y_ticks+0x282>
    uint32_t i;

    lv_point_t p1;
    lv_point_t p2;

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	f014 fcf2 	bl	8023392 <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800e9ae:	2100      	movs	r1, #0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800e9b0:	4680      	mov	r8, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f014 fcb9 	bl	802332a <lv_obj_get_style_pad_top>
 800e9b8:	4607      	mov	r7, r0
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	f00d ff90 	bl	801c8e0 <lv_obj_get_content_height>
 800e9c0:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800e9c4:	4447      	add	r7, r8
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800e9c6:	4343      	muls	r3, r0
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800e9c8:	4620      	mov	r0, r4
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800e9ca:	f343 230f 	sbfx	r3, r3, #8, #16
 800e9ce:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800e9d0:	8ae3      	ldrh	r3, [r4, #22]
 800e9d2:	441f      	add	r7, r3
 800e9d4:	f00e fb01 	bl	801cfda <lv_obj_get_scroll_top>
 800e9d8:	b2bf      	uxth	r7, r7
 800e9da:	1a3f      	subs	r7, r7, r0
 800e9dc:	b2bb      	uxth	r3, r7
 800e9de:	9307      	str	r3, [sp, #28]

    lv_coord_t label_gap;
    lv_coord_t x_ofs;
    if(axis == LV_CHART_AXIS_PRIMARY_Y) {
 800e9e0:	2e00      	cmp	r6, #0
 800e9e2:	f040 810d 	bne.w	800ec00 <draw_y_ticks+0x288>
        label_gap = lv_obj_get_style_pad_left(obj, LV_PART_TICKS);
 800e9e6:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800e9ea:	4620      	mov	r0, r4
 800e9ec:	f014 fc8b 	bl	8023306 <lv_obj_get_style_pad_left>
        x_ofs = obj->coords.x1;
 800e9f0:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
    else {
        label_gap = lv_obj_get_style_pad_right(obj, LV_PART_TICKS);
        x_ofs = obj->coords.x2;
    }

    lv_coord_t major_len = t->major_len;
 800e9f4:	f9b5 3000 	ldrsh.w	r3, [r5]
    lv_coord_t minor_len = t->minor_len;
 800e9f8:	f9b5 7002 	ldrsh.w	r7, [r5, #2]
        label_gap = lv_obj_get_style_pad_left(obj, LV_PART_TICKS);
 800e9fc:	9005      	str	r0, [sp, #20]
        major_len *= -1;
        minor_len *= -1;
    }

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 800e9fe:	f10d 0b44 	add.w	fp, sp, #68	; 0x44
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800ea02:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 800ea06:	9306      	str	r3, [sp, #24]
    lv_draw_line_dsc_init(&line_dsc);
 800ea08:	4658      	mov	r0, fp
 800ea0a:	f00f ffd0 	bl	801e9ae <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 800ea0e:	465a      	mov	r2, fp
 800ea10:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800ea14:	4620      	mov	r0, r4
 800ea16:	f00d fc5b 	bl	801c2d0 <lv_obj_init_draw_line_dsc>
    lv_draw_label_dsc_init(&label_dsc);
 800ea1a:	4650      	mov	r0, sl
 800ea1c:	f7f9 f978 	bl	8007d10 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 800ea20:	4652      	mov	r2, sl
 800ea22:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800ea26:	4620      	mov	r0, r4
 800ea28:	f00d fbb5 	bl	801c196 <lv_obj_init_draw_label_dsc>

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800ea2c:	4649      	mov	r1, r9
 800ea2e:	a820      	add	r0, sp, #128	; 0x80
 800ea30:	f00d fd58 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 800ea34:	4a85      	ldr	r2, [pc, #532]	; (800ec4c <draw_y_ticks+0x2d4>)
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
    part_draw_dsc.id = axis;
 800ea36:	962e      	str	r6, [sp, #184]	; 0xb8
    part_draw_dsc.class_p = MY_CLASS;
 800ea38:	9221      	str	r2, [sp, #132]	; 0x84
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
 800ea3a:	2206      	movs	r2, #6
    part_draw_dsc.part = LV_PART_TICKS;
    part_draw_dsc.line_dsc = &line_dsc;
    part_draw_dsc.label_dsc = &label_dsc;
 800ea3c:	e9cd ab25 	strd	sl, fp, [sp, #148]	; 0x94
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
 800ea40:	9222      	str	r2, [sp, #136]	; 0x88
    part_draw_dsc.part = LV_PART_TICKS;
 800ea42:	f44f 22c0 	mov.w	r2, #393216	; 0x60000

    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 800ea46:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    part_draw_dsc.part = LV_PART_TICKS;
 800ea4a:	922d      	str	r2, [sp, #180]	; 0xb4
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 800ea4c:	f3ca 0a0e 	ubfx	sl, sl, #0, #15
 800ea50:	88ea      	ldrh	r2, [r5, #6]
 800ea52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea56:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ea5a:	fb02 fa0a 	mul.w	sl, r2, sl
        /*first point of the tick*/
        p1.x = x_ofs;

        /*move extra pixel out of chart boundary*/
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
        else p1.x++;
 800ea5e:	fa1f f288 	uxth.w	r2, r8
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
 800ea62:	f102 38ff 	add.w	r8, r2, #4294967295
        else p1.x++;
 800ea66:	3201      	adds	r2, #1
 800ea68:	2e00      	cmp	r6, #0
 800ea6a:	bf18      	it	ne
 800ea6c:	4690      	movne	r8, r2
 800ea6e:	fa0f f388 	sxth.w	r3, r8
        /*second point of the tick*/
        bool major = false;
        if(i % t->minor_cnt == 0) major = true;

        if(major) p2.x = p1.x - major_len; /*major tick*/
        else p2.x = p1.x - minor_len; /*minor tick*/
 800ea72:	fa1f f888 	uxth.w	r8, r8
 800ea76:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea78:	eba8 0707 	sub.w	r7, r8, r7
 800ea7c:	b23b      	sxth	r3, r7
    for(i = 0; i <= total_tick_num; i++) {
 800ea7e:	2700      	movs	r7, #0
        else p2.x = p1.x - minor_len; /*minor tick*/
 800ea80:	9309      	str	r3, [sp, #36]	; 0x24
        if(major) p2.x = p1.x - major_len; /*major tick*/
 800ea82:	9b06      	ldr	r3, [sp, #24]
 800ea84:	eba8 0803 	sub.w	r8, r8, r3
 800ea88:	fa0f f388 	sxth.w	r3, r8
        bool major = false;
 800ea8c:	46b8      	mov	r8, r7
        if(major) p2.x = p1.x - major_len; /*major tick*/
 800ea8e:	9308      	str	r3, [sp, #32]
 800ea90:	eb04 0346 	add.w	r3, r4, r6, lsl #1
 800ea94:	9306      	str	r3, [sp, #24]
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 800ea96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea98:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 800ea9c:	1ad3      	subs	r3, r2, r3
 800ea9e:	9a07      	ldr	r2, [sp, #28]
 800eaa0:	437b      	muls	r3, r7
 800eaa2:	fbb3 f3fa 	udiv	r3, r3, sl
 800eaa6:	4413      	add	r3, r2
 800eaa8:	b21b      	sxth	r3, r3
 800eaaa:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 800eaae:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
 800eab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eab4:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        if(i % t->minor_cnt == 0) major = true;
 800eab8:	88eb      	ldrh	r3, [r5, #6]
 800eaba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800eabe:	fbb7 f2f3 	udiv	r2, r7, r3
 800eac2:	fb03 7312 	mls	r3, r3, r2, r7
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f000 80ab 	beq.w	800ec22 <draw_y_ticks+0x2aa>
        else p2.x = p1.x - minor_len; /*minor tick*/
 800eacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
        bool major = false;
 800eace:	f04f 0b00 	mov.w	fp, #0
 800ead2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

        part_draw_dsc.p1 = &p1;
 800ead6:	ab0c      	add	r3, sp, #48	; 0x30
        part_draw_dsc.p2 = &p2;

        int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 800ead8:	4652      	mov	r2, sl
 800eada:	2100      	movs	r1, #0
        part_draw_dsc.p1 = &p1;
 800eadc:	9329      	str	r3, [sp, #164]	; 0xa4
        part_draw_dsc.p2 = &p2;
 800eade:	ab0d      	add	r3, sp, #52	; 0x34
        int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 800eae0:	ebaa 0007 	sub.w	r0, sl, r7
        part_draw_dsc.p2 = &p2;
 800eae4:	932a      	str	r3, [sp, #168]	; 0xa8
        int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 800eae6:	9b06      	ldr	r3, [sp, #24]
 800eae8:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	9b06      	ldr	r3, [sp, #24]
 800eaf0:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800eaf4:	f016 f8c6 	bl	8024c84 <lv_map>
 800eaf8:	4603      	mov	r3, r0
        part_draw_dsc.value = tick_value;
 800eafa:	9030      	str	r0, [sp, #192]	; 0xc0

        /*add text only to major tick*/
        if(major && t->label_en)  {
 800eafc:	f1bb 0f00 	cmp.w	fp, #0
 800eb00:	f000 809a 	beq.w	800ec38 <draw_y_ticks+0x2c0>
 800eb04:	f995 2009 	ldrsb.w	r2, [r5, #9]
 800eb08:	2a00      	cmp	r2, #0
 800eb0a:	f280 8095 	bge.w	800ec38 <draw_y_ticks+0x2c0>
            char buf[LV_CHART_LABEL_MAX_TEXT_LENGTH];
            lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, tick_value);
 800eb0e:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800eb12:	4a4f      	ldr	r2, [pc, #316]	; (800ec50 <draw_y_ticks+0x2d8>)
 800eb14:	2110      	movs	r1, #16
 800eb16:	4658      	mov	r0, fp
 800eb18:	f7f4 f8fa 	bl	8002d10 <snprintf>
            part_draw_dsc.label_dsc = &label_dsc;
 800eb1c:	ab18      	add	r3, sp, #96	; 0x60
            part_draw_dsc.text = buf;
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800eb1e:	aa20      	add	r2, sp, #128	; 0x80
 800eb20:	211a      	movs	r1, #26
            part_draw_dsc.label_dsc = &label_dsc;
 800eb22:	9325      	str	r3, [sp, #148]	; 0x94
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
 800eb24:	2310      	movs	r3, #16
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800eb26:	4620      	mov	r0, r4
            part_draw_dsc.text = buf;
 800eb28:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
 800eb2c:	932c      	str	r3, [sp, #176]	; 0xb0
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800eb2e:	f7f5 fe09 	bl	8004744 <lv_event_send>

            /*reserve appropriate area*/
            lv_point_t size;
            lv_txt_get_size(&size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800eb32:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800eb36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800eb38:	992b      	ldr	r1, [sp, #172]	; 0xac
 800eb3a:	a80e      	add	r0, sp, #56	; 0x38
 800eb3c:	9301      	str	r3, [sp, #4]
 800eb3e:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800eb42:	f8cd 8008 	str.w	r8, [sp, #8]
 800eb46:	9300      	str	r3, [sp, #0]
 800eb48:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 800eb4c:	f016 fea8 	bl	80258a0 <lv_txt_get_size>
                            LV_TEXT_FLAG_NONE);

            /*set the area at some distance of the major tick len left of the tick*/
            lv_area_t a;
            a.y1 = p2.y - size.y / 2;
 800eb50:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800eb54:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 800eb58:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800eb5c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800eb60:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
 800eb64:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800eb68:	1ad1      	subs	r1, r2, r3
            a.y2 = p2.y + size.y / 2;
 800eb6a:	441a      	add	r2, r3

            if(!sec_axis) {
                a.x1 = p2.x - size.x - label_gap;
 800eb6c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
            a.y1 = p2.y - size.y / 2;
 800eb70:	b209      	sxth	r1, r1
            a.y2 = p2.y + size.y / 2;
 800eb72:	b212      	sxth	r2, r2
            a.y1 = p2.y - size.y / 2;
 800eb74:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
            a.y2 = p2.y + size.y / 2;
 800eb78:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
            if(!sec_axis) {
 800eb7c:	2e00      	cmp	r6, #0
 800eb7e:	d154      	bne.n	800ec2a <draw_y_ticks+0x2b2>
                a.x1 = p2.x - size.x - label_gap;
 800eb80:	eba0 0c0c 	sub.w	ip, r0, ip
 800eb84:	ebac 0c03 	sub.w	ip, ip, r3
                a.x2 = p2.x - label_gap;
 800eb88:	1ac3      	subs	r3, r0, r3
                a.x1 = p2.x - size.x - label_gap;
 800eb8a:	f8ad c03c 	strh.w	ip, [sp, #60]	; 0x3c
            }
            else {
                a.x1 = p2.x + label_gap;
                a.x2 = p2.x + size.x + label_gap;
 800eb8e:	b21b      	sxth	r3, r3
                a.x2 = p2.x - label_gap;
 800eb90:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            }

            if(a.y2 >= obj->coords.y1 &&
 800eb94:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	dc0b      	bgt.n	800ebb4 <draw_y_ticks+0x23c>
 800eb9c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 800eba0:	428b      	cmp	r3, r1
 800eba2:	db07      	blt.n	800ebb4 <draw_y_ticks+0x23c>
               a.y1  <= obj->coords.y2) {
                lv_draw_label(draw_ctx, &label_dsc, &a, part_draw_dsc.text, NULL);
 800eba4:	2300      	movs	r3, #0
 800eba6:	aa0f      	add	r2, sp, #60	; 0x3c
 800eba8:	a918      	add	r1, sp, #96	; 0x60
 800ebaa:	4648      	mov	r0, r9
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ebb0:	f7f9 f8c6 	bl	8007d40 <lv_draw_label>
            part_draw_dsc.text = NULL;
            part_draw_dsc.text_length = 0;
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
        }

        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 800ebb4:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 800ebb8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 800ebbc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800ebc0:	1059      	asrs	r1, r3, #1
 800ebc2:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800ebc6:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	db0c      	blt.n	800ebe8 <draw_y_ticks+0x270>
           p2.y - line_dsc.width / 2  <= obj->coords.y2) {
 800ebce:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800ebd2:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 800ebd6:	1a5b      	subs	r3, r3, r1
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	dc05      	bgt.n	800ebe8 <draw_y_ticks+0x270>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800ebdc:	ab0d      	add	r3, sp, #52	; 0x34
 800ebde:	aa0c      	add	r2, sp, #48	; 0x30
 800ebe0:	a911      	add	r1, sp, #68	; 0x44
 800ebe2:	4648      	mov	r0, r9
 800ebe4:	f00f fef0 	bl	801e9c8 <lv_draw_line>
    for(i = 0; i <= total_tick_num; i++) {
 800ebe8:	3701      	adds	r7, #1
        }

        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800ebea:	aa20      	add	r2, sp, #128	; 0x80
 800ebec:	211b      	movs	r1, #27
 800ebee:	4620      	mov	r0, r4
 800ebf0:	f7f5 fda8 	bl	8004744 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) {
 800ebf4:	45ba      	cmp	sl, r7
 800ebf6:	f4bf af4e 	bcs.w	800ea96 <draw_y_ticks+0x11e>
    }
}
 800ebfa:	b033      	add	sp, #204	; 0xcc
 800ebfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800ec00:	2213      	movs	r2, #19
 800ec02:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800ec06:	4620      	mov	r0, r4
 800ec08:	f00e ff6e 	bl	801dae8 <lv_obj_get_style_prop>
        minor_len *= -1;
 800ec0c:	886f      	ldrh	r7, [r5, #2]
    return (lv_coord_t)v.num;
 800ec0e:	b203      	sxth	r3, r0
        x_ofs = obj->coords.x2;
 800ec10:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
        minor_len *= -1;
 800ec14:	427f      	negs	r7, r7
 800ec16:	9305      	str	r3, [sp, #20]
        major_len *= -1;
 800ec18:	882b      	ldrh	r3, [r5, #0]
        minor_len *= -1;
 800ec1a:	b23f      	sxth	r7, r7
        major_len *= -1;
 800ec1c:	425b      	negs	r3, r3
 800ec1e:	b21b      	sxth	r3, r3
        minor_len *= -1;
 800ec20:	e6ed      	b.n	800e9fe <draw_y_ticks+0x86>
        if(major) p2.x = p1.x - major_len; /*major tick*/
 800ec22:	9b08      	ldr	r3, [sp, #32]
        if(i % t->minor_cnt == 0) major = true;
 800ec24:	f04f 0b01 	mov.w	fp, #1
 800ec28:	e753      	b.n	800ead2 <draw_y_ticks+0x15a>
                a.x1 = p2.x + label_gap;
 800ec2a:	eb00 0e03 	add.w	lr, r0, r3
                a.x2 = p2.x + size.x + label_gap;
 800ec2e:	4460      	add	r0, ip
                a.x1 = p2.x + label_gap;
 800ec30:	f8ad e03c 	strh.w	lr, [sp, #60]	; 0x3c
                a.x2 = p2.x + size.x + label_gap;
 800ec34:	4403      	add	r3, r0
 800ec36:	e7aa      	b.n	800eb8e <draw_y_ticks+0x216>
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ec38:	aa20      	add	r2, sp, #128	; 0x80
 800ec3a:	211a      	movs	r1, #26
 800ec3c:	4620      	mov	r0, r4
            part_draw_dsc.label_dsc = NULL;
 800ec3e:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
            part_draw_dsc.text_length = 0;
 800ec42:	e9cd 882b 	strd	r8, r8, [sp, #172]	; 0xac
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ec46:	f7f5 fd7d 	bl	8004744 <lv_event_send>
 800ec4a:	e7b3      	b.n	800ebb4 <draw_y_ticks+0x23c>
 800ec4c:	08028ee8 	.word	0x08028ee8
 800ec50:	0802e11e 	.word	0x0802e11e

0800ec54 <draw_x_ticks>:

static void draw_x_ticks(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, lv_chart_axis_t axis)
{
 800ec54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec58:	b0b1      	sub	sp, #196	; 0xc4
 800ec5a:	4604      	mov	r4, r0
 800ec5c:	4692      	mov	sl, r2
 800ec5e:	9105      	str	r1, [sp, #20]
    lv_chart_t * chart  = (lv_chart_t *)obj;

    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 800ec60:	4611      	mov	r1, r2
 800ec62:	f014 fd1a 	bl	802369a <get_tick_gsc>
    if(t->major_cnt <= 1) return;
 800ec66:	8903      	ldrh	r3, [r0, #8]
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 800ec68:	4605      	mov	r5, r0
    if(t->major_cnt <= 1) return;
 800ec6a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d93d      	bls.n	800ecee <draw_x_ticks+0x9a>
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 800ec72:	f990 3009 	ldrsb.w	r3, [r0, #9]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	db01      	blt.n	800ec7e <draw_x_ticks+0x2a>
 800ec7a:	6803      	ldr	r3, [r0, #0]
 800ec7c:	b3bb      	cbz	r3, 800ecee <draw_x_ticks+0x9a>

    uint32_t i;
    lv_point_t p1;
    lv_point_t p2;

    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800ec7e:	2100      	movs	r1, #0
 800ec80:	4620      	mov	r0, r4
 800ec82:	f014 fb40 	bl	8023306 <lv_obj_get_style_pad_left>
 800ec86:	4606      	mov	r6, r0
 800ec88:	4620      	mov	r0, r4
 800ec8a:	f014 fb82 	bl	8023392 <lv_obj_get_style_border_width.constprop.0>
 800ec8e:	9006      	str	r0, [sp, #24]
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800ec90:	4620      	mov	r0, r4
 800ec92:	f00d fe0f 	bl	801c8b4 <lv_obj_get_content_width>
 800ec96:	4607      	mov	r7, r0

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800ec98:	a816      	add	r0, sp, #88	; 0x58
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800ec9a:	f8b4 b084 	ldrh.w	fp, [r4, #132]	; 0x84
    lv_draw_label_dsc_init(&label_dsc);
 800ec9e:	f7f9 f837 	bl	8007d10 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 800eca2:	aa16      	add	r2, sp, #88	; 0x58
 800eca4:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800eca8:	4620      	mov	r0, r4
 800ecaa:	f00d fa74 	bl	801c196 <lv_obj_init_draw_label_dsc>

    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800ecae:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	9308      	str	r3, [sp, #32]
 800ecb6:	f7f6 ffd5 	bl	8005c64 <lv_obj_get_scroll_left>
    lv_coord_t y_ofs;
    lv_coord_t label_gap;
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 800ecba:	f1ba 0f02 	cmp.w	sl, #2
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800ecbe:	4680      	mov	r8, r0
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 800ecc0:	f995 3009 	ldrsb.w	r3, [r5, #9]
 800ecc4:	d119      	bne.n	800ecfa <draw_x_ticks+0xa6>
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	da14      	bge.n	800ecf4 <draw_x_ticks+0xa0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800ecca:	2211      	movs	r2, #17
 800eccc:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f00e ff09 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800ecd6:	fa0f f980 	sxth.w	r9, r0
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
        y_ofs = obj->coords.y1 - 1;
    }

    if(axis == LV_CHART_AXIS_PRIMARY_X) {
        if(y_ofs > draw_ctx->clip_area->y2) return;
 800ecda:	9a05      	ldr	r2, [sp, #20]
        y_ofs = obj->coords.y2 + 1;
 800ecdc:	8b63      	ldrh	r3, [r4, #26]
        if(y_ofs > draw_ctx->clip_area->y2) return;
 800ecde:	6891      	ldr	r1, [r2, #8]
        y_ofs = obj->coords.y2 + 1;
 800ece0:	3301      	adds	r3, #1
        if(y_ofs > draw_ctx->clip_area->y2) return;
 800ece2:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
        y_ofs = obj->coords.y2 + 1;
 800ece6:	b21b      	sxth	r3, r3
        if(y_ofs > draw_ctx->clip_area->y2) return;
 800ece8:	429a      	cmp	r2, r3
 800ecea:	f280 8116 	bge.w	800ef1a <draw_x_ticks+0x2c6>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
        }

        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
    }
}
 800ecee:	b031      	add	sp, #196	; 0xc4
 800ecf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 800ecf4:	f04f 0900 	mov.w	r9, #0
 800ecf8:	e7ef      	b.n	800ecda <draw_x_ticks+0x86>
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f280 810a 	bge.w	800ef14 <draw_x_ticks+0x2c0>
 800ed00:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800ed04:	4620      	mov	r0, r4
 800ed06:	f014 fb10 	bl	802332a <lv_obj_get_style_pad_top>
 800ed0a:	4681      	mov	r9, r0
        y_ofs = obj->coords.y1 - 1;
 800ed0c:	8ae3      	ldrh	r3, [r4, #22]
 800ed0e:	3b01      	subs	r3, #1
 800ed10:	b21b      	sxth	r3, r3
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800ed12:	fb0b f707 	mul.w	r7, fp, r7
 800ed16:	9309      	str	r3, [sp, #36]	; 0x24
 800ed18:	123b      	asrs	r3, r7, #8
 800ed1a:	f347 2b0f 	sbfx	fp, r7, #8, #16
    lv_draw_line_dsc_init(&line_dsc);
 800ed1e:	af0f      	add	r7, sp, #60	; 0x3c
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800ed20:	9307      	str	r3, [sp, #28]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800ed22:	9b06      	ldr	r3, [sp, #24]
    lv_draw_line_dsc_init(&line_dsc);
 800ed24:	4638      	mov	r0, r7
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800ed26:	441e      	add	r6, r3
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800ed28:	9b08      	ldr	r3, [sp, #32]
 800ed2a:	441e      	add	r6, r3
    lv_draw_line_dsc_init(&line_dsc);
 800ed2c:	f00f fe3f 	bl	801e9ae <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 800ed30:	463a      	mov	r2, r7
 800ed32:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800ed36:	eba6 0608 	sub.w	r6, r6, r8
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 800ed3a:	4620      	mov	r0, r4
    line_dsc.dash_width = 0;
 800ed3c:	f04f 0800 	mov.w	r8, #0
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 800ed40:	f00d fac6 	bl	801c2d0 <lv_obj_init_draw_line_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800ed44:	9905      	ldr	r1, [sp, #20]
 800ed46:	a81e      	add	r0, sp, #120	; 0x78
    line_dsc.dash_width = 0;
 800ed48:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800ed4c:	f00d fbca 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 800ed50:	4a98      	ldr	r2, [pc, #608]	; (800efb4 <draw_x_ticks+0x360>)
    part_draw_dsc.part = LV_PART_TICKS;
 800ed52:	2102      	movs	r1, #2
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800ed54:	b2b6      	uxth	r6, r6
    if(chart->type == LV_CHART_TYPE_BAR) {
 800ed56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    part_draw_dsc.class_p = MY_CLASS;
 800ed58:	921f      	str	r2, [sp, #124]	; 0x7c
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
 800ed5a:	2206      	movs	r2, #6
 800ed5c:	9220      	str	r2, [sp, #128]	; 0x80
    part_draw_dsc.part = LV_PART_TICKS;
 800ed5e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800ed62:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
    part_draw_dsc.label_dsc = &label_dsc;
 800ed66:	aa16      	add	r2, sp, #88	; 0x58
    part_draw_dsc.line_dsc = &line_dsc;
 800ed68:	e9cd 2723 	strd	r2, r7, [sp, #140]	; 0x8c
    if(chart->type == LV_CHART_TYPE_BAR) {
 800ed6c:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 800ed70:	f1ba 0702 	subs.w	r7, sl, #2
    if(chart->type == LV_CHART_TYPE_BAR) {
 800ed74:	f002 0207 	and.w	r2, r2, #7
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 800ed78:	bf18      	it	ne
 800ed7a:	2701      	movne	r7, #1
    if(chart->type == LV_CHART_TYPE_BAR) {
 800ed7c:	2a02      	cmp	r2, #2
 800ed7e:	f000 80db 	beq.w	800ef38 <draw_x_ticks+0x2e4>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800ed82:	b232      	sxth	r2, r6
 800ed84:	9206      	str	r2, [sp, #24]
    uint32_t total_tick_num = (t->major_cnt - 1) * t->minor_cnt;
 800ed86:	892e      	ldrh	r6, [r5, #8]
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 800ed88:	f04f 0800 	mov.w	r8, #0
    p1.y = y_ofs;
 800ed8c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    uint32_t total_tick_num = (t->major_cnt - 1) * t->minor_cnt;
 800ed90:	f3c6 060e 	ubfx	r6, r6, #0, #15
 800ed94:	88eb      	ldrh	r3, [r5, #6]
 800ed96:	3e01      	subs	r6, #1
 800ed98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ed9c:	435e      	muls	r6, r3
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 800ed9e:	eb04 0347 	add.w	r3, r4, r7, lsl #1
 800eda2:	9307      	str	r3, [sp, #28]
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 800eda4:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 800eda8:	f1ba 0f02 	cmp.w	sl, #2
        if(i % t->minor_cnt == 0) major = true;
 800edac:	88ef      	ldrh	r7, [r5, #6]
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 800edae:	ebab 0202 	sub.w	r2, fp, r2
 800edb2:	9906      	ldr	r1, [sp, #24]
        if(i % t->minor_cnt == 0) major = true;
 800edb4:	f3c7 070e 	ubfx	r7, r7, #0, #15
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 800edb8:	fb08 f202 	mul.w	r2, r8, r2
 800edbc:	fbb2 f2f6 	udiv	r2, r2, r6
        if(i % t->minor_cnt == 0) major = true;
 800edc0:	fbb8 f3f7 	udiv	r3, r8, r7
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 800edc4:	440a      	add	r2, r1
        if(i % t->minor_cnt == 0) major = true;
 800edc6:	fb07 8713 	mls	r7, r7, r3, r8
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 800edca:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 800edce:	b212      	sxth	r2, r2
 800edd0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800edd4:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 800edd8:	f000 80d0 	beq.w	800ef7c <draw_x_ticks+0x328>
 800eddc:	2f00      	cmp	r7, #0
 800edde:	f040 80cb 	bne.w	800ef78 <draw_x_ticks+0x324>
 800ede2:	882a      	ldrh	r2, [r5, #0]
 800ede4:	1a89      	subs	r1, r1, r2
 800ede6:	b20a      	sxth	r2, r1
 800ede8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        part_draw_dsc.p1 = &p1;
 800edec:	aa0a      	add	r2, sp, #40	; 0x28
 800edee:	9227      	str	r2, [sp, #156]	; 0x9c
        part_draw_dsc.p2 = &p2;
 800edf0:	aa0b      	add	r2, sp, #44	; 0x2c
 800edf2:	9228      	str	r2, [sp, #160]	; 0xa0
        if(chart->type == LV_CHART_TYPE_SCATTER) {
 800edf4:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
 800edf8:	f002 0207 	and.w	r2, r2, #7
 800edfc:	2a03      	cmp	r2, #3
 800edfe:	d10c      	bne.n	800ee1a <draw_x_ticks+0x1c6>
            tick_value = lv_map(i, 0, total_tick_num, chart->xmin[sec_axis], chart->xmax[sec_axis]);
 800ee00:	9b07      	ldr	r3, [sp, #28]
 800ee02:	4632      	mov	r2, r6
 800ee04:	2100      	movs	r1, #0
 800ee06:	4640      	mov	r0, r8
 800ee08:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800ee0c:	9300      	str	r3, [sp, #0]
 800ee0e:	9b07      	ldr	r3, [sp, #28]
 800ee10:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800ee14:	f015 ff36 	bl	8024c84 <lv_map>
 800ee18:	4603      	mov	r3, r0
        part_draw_dsc.value = tick_value;
 800ee1a:	932e      	str	r3, [sp, #184]	; 0xb8
        if(major && t->label_en) {
 800ee1c:	2f00      	cmp	r7, #0
 800ee1e:	f040 80be 	bne.w	800ef9e <draw_x_ticks+0x34a>
 800ee22:	f995 2009 	ldrsb.w	r2, [r5, #9]
 800ee26:	2a00      	cmp	r2, #0
 800ee28:	f280 80b9 	bge.w	800ef9e <draw_x_ticks+0x34a>
            lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, tick_value);
 800ee2c:	4a62      	ldr	r2, [pc, #392]	; (800efb8 <draw_x_ticks+0x364>)
 800ee2e:	2110      	movs	r1, #16
 800ee30:	a812      	add	r0, sp, #72	; 0x48
 800ee32:	f7f3 ff6d 	bl	8002d10 <snprintf>
            part_draw_dsc.label_dsc = &label_dsc;
 800ee36:	ab16      	add	r3, sp, #88	; 0x58
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ee38:	aa1e      	add	r2, sp, #120	; 0x78
 800ee3a:	211a      	movs	r1, #26
            part_draw_dsc.label_dsc = &label_dsc;
 800ee3c:	9323      	str	r3, [sp, #140]	; 0x8c
            part_draw_dsc.text = buf;
 800ee3e:	ab12      	add	r3, sp, #72	; 0x48
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ee40:	4620      	mov	r0, r4
            part_draw_dsc.text = buf;
 800ee42:	9329      	str	r3, [sp, #164]	; 0xa4
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
 800ee44:	2310      	movs	r3, #16
 800ee46:	932a      	str	r3, [sp, #168]	; 0xa8
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ee48:	f7f5 fc7c 	bl	8004744 <lv_event_send>
            lv_txt_get_size(&size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800ee4c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800ee50:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ee52:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800ee54:	a80c      	add	r0, sp, #48	; 0x30
 800ee56:	9301      	str	r3, [sp, #4]
 800ee58:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800ee5c:	9702      	str	r7, [sp, #8]
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800ee64:	f016 fd1c 	bl	80258a0 <lv_txt_get_size>
            a.x1 = (p2.x - size.x / 2);
 800ee68:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800ee6c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
            if(sec_axis) {
 800ee70:	f1ba 0f02 	cmp.w	sl, #2
            a.x1 = (p2.x - size.x / 2);
 800ee74:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800ee78:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800ee7c:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800ee80:	eba2 0103 	sub.w	r1, r2, r3
            a.x2 = (p2.x + size.x / 2);
 800ee84:	441a      	add	r2, r3
                a.y2 = p2.y - label_gap;
 800ee86:	fa1f f389 	uxth.w	r3, r9
            a.x1 = (p2.x - size.x / 2);
 800ee8a:	b209      	sxth	r1, r1
            a.x2 = (p2.x + size.x / 2);
 800ee8c:	b212      	sxth	r2, r2
            a.x1 = (p2.x - size.x / 2);
 800ee8e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
            a.x2 = (p2.x + size.x / 2);
 800ee92:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
            if(sec_axis) {
 800ee96:	d078      	beq.n	800ef8a <draw_x_ticks+0x336>
                a.y2 = p2.y - label_gap;
 800ee98:	1ac0      	subs	r0, r0, r3
                a.y1 = a.y2 - size.y;
 800ee9a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
                a.y2 = p2.y - label_gap;
 800ee9e:	b280      	uxth	r0, r0
 800eea0:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
                a.y1 = a.y2 - size.y;
 800eea4:	1ac0      	subs	r0, r0, r3
 800eea6:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
            if(a.x2 >= obj->coords.x1 &&
 800eeaa:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	dc0b      	bgt.n	800eeca <draw_x_ticks+0x276>
 800eeb2:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 800eeb6:	428b      	cmp	r3, r1
 800eeb8:	db07      	blt.n	800eeca <draw_x_ticks+0x276>
                lv_draw_label(draw_ctx, &label_dsc, &a, part_draw_dsc.text, NULL);
 800eeba:	2300      	movs	r3, #0
 800eebc:	aa0d      	add	r2, sp, #52	; 0x34
 800eebe:	a916      	add	r1, sp, #88	; 0x58
 800eec0:	9805      	ldr	r0, [sp, #20]
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800eec6:	f7f8 ff3b 	bl	8007d40 <lv_draw_label>
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 800eeca:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800eece:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 800eed2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800eed6:	1059      	asrs	r1, r3, #1
 800eed8:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800eedc:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800eee0:	4293      	cmp	r3, r2
 800eee2:	db0c      	blt.n	800eefe <draw_x_ticks+0x2aa>
           p2.x - line_dsc.width / 2  <= obj->coords.x2) {
 800eee4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 800eee8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 800eeec:	1a5b      	subs	r3, r3, r1
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 800eeee:	4293      	cmp	r3, r2
 800eef0:	dc05      	bgt.n	800eefe <draw_x_ticks+0x2aa>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800eef2:	ab0b      	add	r3, sp, #44	; 0x2c
 800eef4:	aa0a      	add	r2, sp, #40	; 0x28
 800eef6:	a90f      	add	r1, sp, #60	; 0x3c
 800eef8:	9805      	ldr	r0, [sp, #20]
 800eefa:	f00f fd65 	bl	801e9c8 <lv_draw_line>
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 800eefe:	f108 0801 	add.w	r8, r8, #1
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800ef02:	aa1e      	add	r2, sp, #120	; 0x78
 800ef04:	211b      	movs	r1, #27
 800ef06:	4620      	mov	r0, r4
 800ef08:	f7f5 fc1c 	bl	8004744 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 800ef0c:	4546      	cmp	r6, r8
 800ef0e:	f4bf af49 	bcs.w	800eda4 <draw_x_ticks+0x150>
 800ef12:	e6ec      	b.n	800ecee <draw_x_ticks+0x9a>
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
 800ef14:	f04f 0900 	mov.w	r9, #0
 800ef18:	e6f8      	b.n	800ed0c <draw_x_ticks+0xb8>
        if(y_ofs + label_gap + label_dsc.font->line_height + t->major_len < draw_ctx->clip_area->y1) return;
 800ef1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ef1c:	eb03 0009 	add.w	r0, r3, r9
 800ef20:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800ef24:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800ef28:	4402      	add	r2, r0
 800ef2a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800ef2e:	4402      	add	r2, r0
 800ef30:	428a      	cmp	r2, r1
 800ef32:	f6bf aeee 	bge.w	800ed12 <draw_x_ticks+0xbe>
 800ef36:	e6da      	b.n	800ecee <draw_x_ticks+0x9a>
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800ef38:	4641      	mov	r1, r8
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	9308      	str	r3, [sp, #32]
 800ef3e:	f014 f9ee 	bl	802331e <lv_obj_get_style_pad_column>
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the columns on ~adjacent X*/
 800ef42:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 800ef46:	4350      	muls	r0, r2
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 800ef48:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 800ef4c:	eb0b 2120 	add.w	r1, fp, r0, asr #8
 800ef50:	fb91 f1f2 	sdiv	r1, r1, r2
        x_ofs += (block_w - block_gap) / 2;
 800ef54:	b20a      	sxth	r2, r1
 800ef56:	eba2 2220 	sub.w	r2, r2, r0, asr #8
 800ef5a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800ef5e:	eb06 0662 	add.w	r6, r6, r2, asr #1
 800ef62:	b233      	sxth	r3, r6
 800ef64:	9306      	str	r3, [sp, #24]
        w -= block_w - block_gap;
 800ef66:	9b07      	ldr	r3, [sp, #28]
 800ef68:	eb03 2b20 	add.w	fp, r3, r0, asr #8
 800ef6c:	9b08      	ldr	r3, [sp, #32]
 800ef6e:	ebab 0b01 	sub.w	fp, fp, r1
 800ef72:	fa0f fb8b 	sxth.w	fp, fp
 800ef76:	e706      	b.n	800ed86 <draw_x_ticks+0x132>
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 800ef78:	886a      	ldrh	r2, [r5, #2]
 800ef7a:	e733      	b.n	800ede4 <draw_x_ticks+0x190>
        else p2.y = p1.y + (major ? t->major_len : t->minor_len);
 800ef7c:	b91f      	cbnz	r7, 800ef86 <draw_x_ticks+0x332>
 800ef7e:	882a      	ldrh	r2, [r5, #0]
 800ef80:	440a      	add	r2, r1
 800ef82:	b212      	sxth	r2, r2
 800ef84:	e730      	b.n	800ede8 <draw_x_ticks+0x194>
 800ef86:	886a      	ldrh	r2, [r5, #2]
 800ef88:	e7fa      	b.n	800ef80 <draw_x_ticks+0x32c>
                a.y1 = p2.y + label_gap;
 800ef8a:	4403      	add	r3, r0
                a.y2 = a.y1 + size.y;
 800ef8c:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
                a.y1 = p2.y + label_gap;
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                a.y2 = a.y1 + size.y;
 800ef96:	4403      	add	r3, r0
 800ef98:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800ef9c:	e785      	b.n	800eeaa <draw_x_ticks+0x256>
            part_draw_dsc.label_dsc = NULL;
 800ef9e:	2300      	movs	r3, #0
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800efa0:	aa1e      	add	r2, sp, #120	; 0x78
 800efa2:	211a      	movs	r1, #26
 800efa4:	4620      	mov	r0, r4
            part_draw_dsc.label_dsc = NULL;
 800efa6:	9323      	str	r3, [sp, #140]	; 0x8c
            part_draw_dsc.text_length = 0;
 800efa8:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800efac:	f7f5 fbca 	bl	8004744 <lv_event_send>
 800efb0:	e78b      	b.n	800eeca <draw_x_ticks+0x276>
 800efb2:	bf00      	nop
 800efb4:	08028ee8 	.word	0x08028ee8
 800efb8:	0802e11e 	.word	0x0802e11e

0800efbc <lv_chart_event>:
{
 800efbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 800efc0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800f11c <lv_chart_event+0x160>
{
 800efc4:	b0d1      	sub	sp, #324	; 0x144
 800efc6:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 800efc8:	4648      	mov	r0, r9
 800efca:	f00c f930 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 800efce:	2801      	cmp	r0, #1
 800efd0:	d146      	bne.n	800f060 <lv_chart_event+0xa4>
    lv_event_code_t code = lv_event_get_code(e);
 800efd2:	4628      	mov	r0, r5
 800efd4:	f00c f945 	bl	801b262 <lv_event_get_code>
 800efd8:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 800efda:	4628      	mov	r0, r5
 800efdc:	f00c f93d 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_PRESSED) {
 800efe0:	2c01      	cmp	r4, #1
    lv_obj_t * obj = lv_event_get_target(e);
 800efe2:	4683      	mov	fp, r0
    if(code == LV_EVENT_PRESSED) {
 800efe4:	d158      	bne.n	800f098 <lv_chart_event+0xdc>
        lv_indev_t * indev = lv_indev_get_act();
 800efe6:	f7f5 fc13 	bl	8004810 <lv_indev_get_act>
        lv_indev_get_point(indev, &p);
 800efea:	a93e      	add	r1, sp, #248	; 0xf8
 800efec:	f00c fb0a 	bl	801b604 <lv_indev_get_point>
        p.x -= obj->coords.x1;
 800eff0:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800eff4:	f8bd 40f8 	ldrh.w	r4, [sp, #248]	; 0xf8
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 800eff8:	4658      	mov	r0, fp
        p.x -= obj->coords.x1;
 800effa:	1ae4      	subs	r4, r4, r3
 800effc:	b2a4      	uxth	r4, r4
 800effe:	f8ad 40f8 	strh.w	r4, [sp, #248]	; 0xf8
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 800f002:	f7f6 fe2f 	bl	8005c64 <lv_obj_get_scroll_left>
 800f006:	1823      	adds	r3, r4, r0
 * @return the found index
 */
static uint32_t get_index_from_x(lv_obj_t * obj, lv_coord_t x)
{
    lv_chart_t * chart  = (lv_chart_t *)obj;
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f008:	4658      	mov	r0, fp
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 800f00a:	b29d      	uxth	r5, r3
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f00c:	f00d fc52 	bl	801c8b4 <lv_obj_get_content_width>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800f010:	2100      	movs	r1, #0
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f012:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800f014:	4658      	mov	r0, fp
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f016:	f8bb 6084 	ldrh.w	r6, [fp, #132]	; 0x84
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800f01a:	f014 f974 	bl	8023306 <lv_obj_get_style_pad_left>
    x -= pad_left;
 800f01e:	1a2b      	subs	r3, r5, r0
 800f020:	b299      	uxth	r1, r3
 800f022:	b21b      	sxth	r3, r3

    if(x < 0) return 0;
 800f024:	2b00      	cmp	r3, #0
 800f026:	db35      	blt.n	800f094 <lv_chart_event+0xd8>
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f028:	4374      	muls	r4, r6
 800f02a:	f344 240f 	sbfx	r4, r4, #8, #16
    if(x > w) return chart->point_cnt - 1;
 800f02e:	429c      	cmp	r4, r3
 800f030:	da19      	bge.n	800f066 <lv_chart_event+0xaa>
 800f032:	f8bb 4082 	ldrh.w	r4, [fp, #130]	; 0x82
 800f036:	3c01      	subs	r4, #1
        if(id != (uint32_t)chart->pressed_point_id) {
 800f038:	f9bb 307c 	ldrsh.w	r3, [fp, #124]	; 0x7c
 800f03c:	42a3      	cmp	r3, r4
 800f03e:	d00f      	beq.n	800f060 <lv_chart_event+0xa4>
            invalidate_point(obj, id);
 800f040:	b2a1      	uxth	r1, r4
 800f042:	4658      	mov	r0, fp
 800f044:	f014 f9ac 	bl	80233a0 <invalidate_point>
            invalidate_point(obj, chart->pressed_point_id);
 800f048:	f8bb 107c 	ldrh.w	r1, [fp, #124]	; 0x7c
 800f04c:	4658      	mov	r0, fp
 800f04e:	f014 f9a7 	bl	80233a0 <invalidate_point>
            lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800f052:	2200      	movs	r2, #0
 800f054:	211c      	movs	r1, #28
 800f056:	4658      	mov	r0, fp
            chart->pressed_point_id = id;
 800f058:	f8ab 407c 	strh.w	r4, [fp, #124]	; 0x7c
            lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800f05c:	f7f5 fb72 	bl	8004744 <lv_event_send>
}
 800f060:	b051      	add	sp, #324	; 0x144
 800f062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(chart->type == LV_CHART_TYPE_LINE) return (x * (chart->point_cnt - 1) + w / 2) / w;
 800f066:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 800f06a:	f003 0307 	and.w	r3, r3, #7
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d108      	bne.n	800f084 <lv_chart_event+0xc8>
 800f072:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
 800f076:	1063      	asrs	r3, r4, #1
 800f078:	3a01      	subs	r2, #1
 800f07a:	fb01 3302 	mla	r3, r1, r2, r3
 800f07e:	fb93 f4f4 	sdiv	r4, r3, r4
 800f082:	e7d9      	b.n	800f038 <lv_chart_event+0x7c>
    if(chart->type == LV_CHART_TYPE_BAR) return (x * chart->point_cnt) / w;
 800f084:	2b02      	cmp	r3, #2
 800f086:	d105      	bne.n	800f094 <lv_chart_event+0xd8>
 800f088:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 800f08c:	434b      	muls	r3, r1
 800f08e:	fbb3 f4f4 	udiv	r4, r3, r4
 800f092:	e7d1      	b.n	800f038 <lv_chart_event+0x7c>
    if(x < 0) return 0;
 800f094:	2400      	movs	r4, #0
 800f096:	e7cf      	b.n	800f038 <lv_chart_event+0x7c>
    else if(code == LV_EVENT_RELEASED) {
 800f098:	2c08      	cmp	r4, #8
 800f09a:	d108      	bne.n	800f0ae <lv_chart_event+0xf2>
        invalidate_point(obj, chart->pressed_point_id);
 800f09c:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 800f0a0:	f014 f97e 	bl	80233a0 <invalidate_point>
        chart->pressed_point_id = LV_CHART_POINT_NONE;
 800f0a4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f0a8:	f8ab 307c 	strh.w	r3, [fp, #124]	; 0x7c
 800f0ac:	e7d8      	b.n	800f060 <lv_chart_event+0xa4>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 800f0ae:	2c29      	cmp	r4, #41	; 0x29
 800f0b0:	d104      	bne.n	800f0bc <lv_chart_event+0x100>
}
 800f0b2:	b051      	add	sp, #324	; 0x144
 800f0b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_self_size(obj);
 800f0b8:	f00d bc65 	b.w	801c986 <lv_obj_refresh_self_size>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 800f0bc:	2c13      	cmp	r4, #19
 800f0be:	d116      	bne.n	800f0ee <lv_chart_event+0x132>
        lv_event_set_ext_draw_size(e, LV_MAX4(chart->tick[0].draw_size, chart->tick[1].draw_size, chart->tick[2].draw_size,
 800f0c0:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	; 0x64
 800f0c4:	f9b0 3058 	ldrsh.w	r3, [r0, #88]	; 0x58
 800f0c8:	4299      	cmp	r1, r3
 800f0ca:	bfb8      	it	lt
 800f0cc:	4619      	movlt	r1, r3
 800f0ce:	f9b0 304c 	ldrsh.w	r3, [r0, #76]	; 0x4c
 800f0d2:	4299      	cmp	r1, r3
 800f0d4:	bfb8      	it	lt
 800f0d6:	4619      	movlt	r1, r3
 800f0d8:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
 800f0dc:	4628      	mov	r0, r5
 800f0de:	4299      	cmp	r1, r3
 800f0e0:	bfb8      	it	lt
 800f0e2:	4619      	movlt	r1, r3
}
 800f0e4:	b051      	add	sp, #324	; 0x144
 800f0e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_event_set_ext_draw_size(e, LV_MAX4(chart->tick[0].draw_size, chart->tick[1].draw_size, chart->tick[2].draw_size,
 800f0ea:	f00c b916 	b.w	801b31a <lv_event_set_ext_draw_size>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 800f0ee:	2c2c      	cmp	r4, #44	; 0x2c
 800f0f0:	d116      	bne.n	800f120 <lv_chart_event+0x164>
        lv_point_t * p = lv_event_get_param(e);
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	f00c f8b9 	bl	801b26a <lv_event_get_param>
 800f0f8:	4604      	mov	r4, r0
        p->x = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f0fa:	4658      	mov	r0, fp
 800f0fc:	f00d fbda 	bl	801c8b4 <lv_obj_get_content_width>
 800f100:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 800f104:	4343      	muls	r3, r0
        p->y = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f106:	4658      	mov	r0, fp
        p->x = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f108:	121b      	asrs	r3, r3, #8
 800f10a:	8023      	strh	r3, [r4, #0]
        p->y = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f10c:	f00d fbe8 	bl	801c8e0 <lv_obj_get_content_height>
 800f110:	f8bb 3086 	ldrh.w	r3, [fp, #134]	; 0x86
 800f114:	4343      	muls	r3, r0
 800f116:	121b      	asrs	r3, r3, #8
 800f118:	8063      	strh	r3, [r4, #2]
 800f11a:	e7a1      	b.n	800f060 <lv_chart_event+0xa4>
 800f11c:	08028ee8 	.word	0x08028ee8
    else if(code == LV_EVENT_DRAW_MAIN) {
 800f120:	2c15      	cmp	r4, #21
 800f122:	d19d      	bne.n	800f060 <lv_chart_event+0xa4>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800f124:	4628      	mov	r0, r5
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 800f126:	ac22      	add	r4, sp, #136	; 0x88
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800f128:	f00c f8f0 	bl	801b30c <lv_event_get_draw_ctx>
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 800f12c:	f10b 0314 	add.w	r3, fp, #20
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800f130:	4682      	mov	sl, r0
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 800f132:	6882      	ldr	r2, [r0, #8]
 800f134:	4619      	mov	r1, r3
 800f136:	4620      	mov	r0, r4
 800f138:	9302      	str	r3, [sp, #8]
 800f13a:	f015 f8ce 	bl	80242da <_lv_area_intersect>
    if(mask_ret == false) return;
 800f13e:	2800      	cmp	r0, #0
 800f140:	d071      	beq.n	800f226 <lv_chart_event+0x26a>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f142:	f8da 3008 	ldr.w	r3, [sl, #8]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f146:	4658      	mov	r0, fp
    draw_ctx->clip_area = &series_clip_area;
 800f148:	f8ca 4008 	str.w	r4, [sl, #8]
    lv_draw_line_dsc_init(&line_dsc);
 800f14c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f150:	9306      	str	r3, [sp, #24]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f152:	f014 f91e 	bl	8023392 <lv_obj_get_style_border_width.constprop.0>
 800f156:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f158:	2100      	movs	r1, #0
 800f15a:	4658      	mov	r0, fp
    part_draw_dsc.part = LV_PART_MAIN;
 800f15c:	2600      	movs	r6, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f15e:	f014 f8d2 	bl	8023306 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f162:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f164:	b2a3      	uxth	r3, r4
 800f166:	9007      	str	r0, [sp, #28]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f168:	4658      	mov	r0, fp
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f16a:	9303      	str	r3, [sp, #12]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f16c:	f014 f8dd 	bl	802332a <lv_obj_get_style_pad_top>
 800f170:	4604      	mov	r4, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f172:	4658      	mov	r0, fp
 800f174:	f00d fb9e 	bl	801c8b4 <lv_obj_get_content_width>
 800f178:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 800f17c:	9008      	str	r0, [sp, #32]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f17e:	4658      	mov	r0, fp
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f180:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f182:	f00d fbad 	bl	801c8e0 <lv_obj_get_content_height>
 800f186:	4607      	mov	r7, r0
    lv_draw_line_dsc_init(&line_dsc);
 800f188:	4640      	mov	r0, r8
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f18a:	f8bb 5086 	ldrh.w	r5, [fp, #134]	; 0x86
    lv_draw_line_dsc_init(&line_dsc);
 800f18e:	f00f fc0e 	bl	801e9ae <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 800f192:	4642      	mov	r2, r8
 800f194:	2100      	movs	r1, #0
 800f196:	4658      	mov	r0, fp
 800f198:	f00d f89a 	bl	801c2d0 <lv_obj_init_draw_line_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f19c:	4651      	mov	r1, sl
 800f19e:	a83e      	add	r0, sp, #248	; 0xf8
 800f1a0:	f00d f9a0 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_draw_dsc.id = 0xFFFFFFFF;
 800f1a4:	f04f 33ff 	mov.w	r3, #4294967295
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f1a8:	aa3e      	add	r2, sp, #248	; 0xf8
 800f1aa:	211a      	movs	r1, #26
 800f1ac:	4658      	mov	r0, fp
    part_draw_dsc.id = 0xFFFFFFFF;
 800f1ae:	934c      	str	r3, [sp, #304]	; 0x130
    part_draw_dsc.part = LV_PART_MAIN;
 800f1b0:	964b      	str	r6, [sp, #300]	; 0x12c
    part_draw_dsc.line_dsc = &line_dsc;
 800f1b2:	f8cd 8110 	str.w	r8, [sp, #272]	; 0x110
    part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_INIT;
 800f1b6:	e9cd 963f 	strd	r9, r6, [sp, #252]	; 0xfc
    part_draw_dsc.p2 = NULL;
 800f1ba:	e9cd 6647 	strd	r6, r6, [sp, #284]	; 0x11c
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f1be:	f7f5 fac1 	bl	8004744 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800f1c2:	4631      	mov	r1, r6
 800f1c4:	2231      	movs	r2, #49	; 0x31
 800f1c6:	4658      	mov	r0, fp
 800f1c8:	f00e fc8e 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800f1cc:	b2c3      	uxtb	r3, r0
    lv_coord_t border_w = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f1ce:	4658      	mov	r0, fp
 800f1d0:	9305      	str	r3, [sp, #20]
 800f1d2:	f014 f8de 	bl	8023392 <lv_obj_get_style_border_width.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 800f1d6:	4631      	mov	r1, r6
 800f1d8:	2233      	movs	r2, #51	; 0x33
 800f1da:	4681      	mov	r9, r0
 800f1dc:	4658      	mov	r0, fp
 800f1de:	f00e fc83 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_border_side_t)v.num;
 800f1e2:	b2c6      	uxtb	r6, r0
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 800f1e4:	4658      	mov	r0, fp
 800f1e6:	f7f6 fd3d 	bl	8005c64 <lv_obj_get_scroll_left>
 800f1ea:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t scroll_top = lv_obj_get_scroll_top(obj);
 800f1ec:	4658      	mov	r0, fp
 800f1ee:	f00d fef4 	bl	801cfda <lv_obj_get_scroll_top>
    if(chart->hdiv_cnt != 0) {
 800f1f2:	f8bb 807e 	ldrh.w	r8, [fp, #126]	; 0x7e
 800f1f6:	f1b8 0f00 	cmp.w	r8, #0
 800f1fa:	f040 8148 	bne.w	800f48e <lv_chart_event+0x4d2>
    if(chart->vdiv_cnt != 0) {
 800f1fe:	f8bb 8080 	ldrh.w	r8, [fp, #128]	; 0x80
 800f202:	f1b8 0f00 	cmp.w	r8, #0
 800f206:	f040 81a7 	bne.w	800f558 <lv_chart_event+0x59c>
    part_draw_dsc.id = 0xFFFFFFFF;
 800f20a:	f04f 33ff 	mov.w	r3, #4294967295
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800f20e:	aa3e      	add	r2, sp, #248	; 0xf8
 800f210:	211b      	movs	r1, #27
 800f212:	4658      	mov	r0, fp
    part_draw_dsc.id = 0xFFFFFFFF;
 800f214:	934c      	str	r3, [sp, #304]	; 0x130
    part_draw_dsc.p1 = NULL;
 800f216:	2300      	movs	r3, #0
    part_draw_dsc.p2 = NULL;
 800f218:	e9cd 3347 	strd	r3, r3, [sp, #284]	; 0x11c
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800f21c:	f7f5 fa92 	bl	8004744 <lv_event_send>
    draw_ctx->clip_area = clip_area_ori;
 800f220:	9b06      	ldr	r3, [sp, #24]
 800f222:	f8ca 3008 	str.w	r3, [sl, #8]
    draw_y_ticks(obj, draw_ctx, LV_CHART_AXIS_PRIMARY_Y);
 800f226:	2200      	movs	r2, #0
 800f228:	4651      	mov	r1, sl
 800f22a:	4658      	mov	r0, fp
 800f22c:	f7ff fba4 	bl	800e978 <draw_y_ticks>
    draw_y_ticks(obj, draw_ctx, LV_CHART_AXIS_SECONDARY_Y);
 800f230:	2201      	movs	r2, #1
 800f232:	4651      	mov	r1, sl
 800f234:	4658      	mov	r0, fp
 800f236:	f7ff fb9f 	bl	800e978 <draw_y_ticks>
    draw_x_ticks(obj, draw_ctx, LV_CHART_AXIS_PRIMARY_X);
 800f23a:	2202      	movs	r2, #2
 800f23c:	4651      	mov	r1, sl
 800f23e:	4658      	mov	r0, fp
 800f240:	f7ff fd08 	bl	800ec54 <draw_x_ticks>
    draw_x_ticks(obj, draw_ctx, LV_CHART_AXIS_SECONDARY_X);
 800f244:	2204      	movs	r2, #4
 800f246:	4651      	mov	r1, sl
 800f248:	4658      	mov	r0, fp
 800f24a:	f7ff fd03 	bl	800ec54 <draw_x_ticks>
        if(_lv_ll_is_empty(&chart->series_ll) == false) {
 800f24e:	f10b 0324 	add.w	r3, fp, #36	; 0x24
 800f252:	4618      	mov	r0, r3
 800f254:	9306      	str	r3, [sp, #24]
 800f256:	f015 fc86 	bl	8024b66 <_lv_ll_is_empty>
 800f25a:	4607      	mov	r7, r0
 800f25c:	2800      	cmp	r0, #0
 800f25e:	f040 80bc 	bne.w	800f3da <lv_chart_event+0x41e>
            if(chart->type == LV_CHART_TYPE_LINE) draw_series_line(obj, draw_ctx);
 800f262:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 800f266:	f003 0307 	and.w	r3, r3, #7
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	f040 8356 	bne.w	800f91c <lv_chart_event+0x960>
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 800f270:	ac1a      	add	r4, sp, #104	; 0x68
 800f272:	f8da 2008 	ldr.w	r2, [sl, #8]
 800f276:	9902      	ldr	r1, [sp, #8]
 800f278:	4620      	mov	r0, r4
 800f27a:	f015 f82e 	bl	80242da <_lv_area_intersect>
 800f27e:	2800      	cmp	r0, #0
 800f280:	f000 80ab 	beq.w	800f3da <lv_chart_event+0x41e>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f284:	f8da 3008 	ldr.w	r3, [sl, #8]
    draw_ctx->clip_area = &clip_area;
 800f288:	f8ca 4008 	str.w	r4, [sl, #8]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f28c:	9309      	str	r3, [sp, #36]	; 0x24
    if(chart->point_cnt < 2) return;
 800f28e:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 800f292:	2b01      	cmp	r3, #1
 800f294:	f240 80a1 	bls.w	800f3da <lv_chart_event+0x41e>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f298:	4658      	mov	r0, fp
 800f29a:	f014 f87a 	bl	8023392 <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f29e:	4639      	mov	r1, r7
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f2a0:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f2a2:	4658      	mov	r0, fp
 800f2a4:	f014 f82f 	bl	8023306 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f2a8:	4639      	mov	r1, r7
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f2aa:	4605      	mov	r5, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f2ac:	4658      	mov	r0, fp
 800f2ae:	f014 f83c 	bl	802332a <lv_obj_get_style_pad_top>
 800f2b2:	9003      	str	r0, [sp, #12]
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f2b4:	4658      	mov	r0, fp
 800f2b6:	f00d fafd 	bl	801c8b4 <lv_obj_get_content_width>
 800f2ba:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 800f2be:	9004      	str	r0, [sp, #16]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f2c0:	4658      	mov	r0, fp
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f2c2:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f2c4:	f00d fb0c 	bl	801c8e0 <lv_obj_get_content_height>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800f2c8:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f2cc:	4606      	mov	r6, r0
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800f2ce:	4658      	mov	r0, fp
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f2d0:	f8bb 9086 	ldrh.w	r9, [fp, #134]	; 0x86
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800f2d4:	9308      	str	r3, [sp, #32]
 800f2d6:	f7f6 fcc5 	bl	8005c64 <lv_obj_get_scroll_left>
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 800f2da:	f9bb 3016 	ldrsh.w	r3, [fp, #22]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800f2de:	4607      	mov	r7, r0
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 800f2e0:	4658      	mov	r0, fp
 800f2e2:	930a      	str	r3, [sp, #40]	; 0x28
 800f2e4:	f00d fe79 	bl	801cfda <lv_obj_get_scroll_top>
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 800f2e8:	f8da 2008 	ldr.w	r2, [sl, #8]
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 800f2ec:	900b      	str	r0, [sp, #44]	; 0x2c
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 800f2ee:	a81c      	add	r0, sp, #112	; 0x70
 800f2f0:	9902      	ldr	r1, [sp, #8]
 800f2f2:	f014 fff2 	bl	80242da <_lv_area_intersect>
    if(mask_ret == false) return;
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d06f      	beq.n	800f3da <lv_chart_event+0x41e>
    lv_draw_line_dsc_init(&line_dsc_default);
 800f2fa:	a822      	add	r0, sp, #136	; 0x88
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f2fc:	fb09 f606 	mul.w	r6, r9, r6
    lv_draw_line_dsc_init(&line_dsc_default);
 800f300:	f00f fb55 	bl	801e9ae <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 800f304:	aa22      	add	r2, sp, #136	; 0x88
 800f306:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f30a:	4658      	mov	r0, fp
 800f30c:	f00c ffe0 	bl	801c2d0 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 800f310:	a830      	add	r0, sp, #192	; 0xc0
 800f312:	f7f9 fb47 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 800f316:	aa30      	add	r2, sp, #192	; 0xc0
 800f318:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800f31c:	4658      	mov	r0, fp
 800f31e:	f00c fdeb 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 800f322:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800f326:	4658      	mov	r0, fp
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f328:	fa15 f584 	uxtah	r5, r5, r4
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 800f32c:	f013 fff1 	bl	8023312 <lv_obj_get_style_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f330:	2204      	movs	r2, #4
 800f332:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800f336:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f33a:	ea4f 2926 	mov.w	r9, r6, asr #8
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 800f33e:	f340 084f 	sbfx	r8, r0, #1, #16
 800f342:	4658      	mov	r0, fp
 800f344:	f00e fbd0 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 800f348:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 800f34c:	fa03 f080 	sxtah	r0, r3, r0
 800f350:	1043      	asrs	r3, r0, #1
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800f352:	f10b 0024 	add.w	r0, fp, #36	; 0x24
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 800f356:	9307      	str	r3, [sp, #28]
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 800f358:	9a07      	ldr	r2, [sp, #28]
 800f35a:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 800f35e:	4542      	cmp	r2, r8
 800f360:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 800f364:	bfa8      	it	ge
 800f366:	4642      	movge	r2, r8
 800f368:	b212      	sxth	r2, r2
 800f36a:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 800f36e:	bfc2      	ittt	gt
 800f370:	f89d 2091 	ldrbgt.w	r2, [sp, #145]	; 0x91
 800f374:	f042 0210 	orrgt.w	r2, r2, #16
 800f378:	f88d 2091 	strbgt.w	r2, [sp, #145]	; 0x91
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	bf02      	ittt	eq
 800f380:	f89d 3091 	ldrbeq.w	r3, [sp, #145]	; 0x91
 800f384:	f043 0310 	orreq.w	r3, r3, #16
 800f388:	f88d 3091 	strbeq.w	r3, [sp, #145]	; 0x91
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f38c:	f346 230f 	sbfx	r3, r6, #8, #16
 800f390:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800f392:	9b08      	ldr	r3, [sp, #32]
 800f394:	441d      	add	r5, r3
 800f396:	1bed      	subs	r5, r5, r7
 800f398:	b2ab      	uxth	r3, r5
 800f39a:	9314      	str	r3, [sp, #80]	; 0x50
 800f39c:	b22b      	sxth	r3, r5
 800f39e:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f3a0:	9b03      	ldr	r3, [sp, #12]
 800f3a2:	fa13 f584 	uxtah	r5, r3, r4
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 800f3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3a8:	441d      	add	r5, r3
 800f3aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3ac:	1aed      	subs	r5, r5, r3
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 800f3ae:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 800f3b2:	930e      	str	r3, [sp, #56]	; 0x38
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 800f3b4:	b2ad      	uxth	r5, r5
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f3b6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f3ba:	444d      	add	r5, r9
 800f3bc:	4353      	muls	r3, r2
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 800f3be:	f343 230f 	sbfx	r3, r3, #8, #16
 800f3c2:	930a      	str	r3, [sp, #40]	; 0x28
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800f3c4:	f015 fbb9 	bl	8024b3a <_lv_ll_get_tail>
 800f3c8:	b2ab      	uxth	r3, r5
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800f3ce:	2c00      	cmp	r4, #0
 800f3d0:	f040 8128 	bne.w	800f624 <lv_chart_event+0x668>
    draw_ctx->clip_area = clip_area_ori;
 800f3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    draw_ctx->clip_area = clip_area_ori;
 800f3d6:	f8ca 3008 	str.w	r3, [sl, #8]
    if(_lv_ll_is_empty(&chart->cursor_ll)) return;
 800f3da:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 800f3de:	4618      	mov	r0, r3
 800f3e0:	9303      	str	r3, [sp, #12]
 800f3e2:	f015 fbc0 	bl	8024b66 <_lv_ll_is_empty>
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	f47f ae3a 	bne.w	800f060 <lv_chart_event+0xa4>
    if(!_lv_area_intersect(&clip_area, draw_ctx->clip_area, &obj->coords)) return;
 800f3ec:	ac18      	add	r4, sp, #96	; 0x60
 800f3ee:	9a02      	ldr	r2, [sp, #8]
 800f3f0:	f8da 1008 	ldr.w	r1, [sl, #8]
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	f014 ff70 	bl	80242da <_lv_area_intersect>
 800f3fa:	9002      	str	r0, [sp, #8]
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	f43f ae2f 	beq.w	800f060 <lv_chart_event+0xa4>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f402:	f8da 3008 	ldr.w	r3, [sl, #8]
    lv_draw_line_dsc_init(&line_dsc_ori);
 800f406:	a81c      	add	r0, sp, #112	; 0x70
    draw_ctx->clip_area = &clip_area;
 800f408:	f8ca 4008 	str.w	r4, [sl, #8]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f40c:	9304      	str	r3, [sp, #16]
    lv_draw_line_dsc_init(&line_dsc_ori);
 800f40e:	f00f face 	bl	801e9ae <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_CURSOR, &line_dsc_ori);
 800f412:	aa1c      	add	r2, sp, #112	; 0x70
 800f414:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800f418:	4658      	mov	r0, fp
 800f41a:	f00c ff59 	bl	801c2d0 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_ori);
 800f41e:	a822      	add	r0, sp, #136	; 0x88
 800f420:	f7f9 fac0 	bl	80089a4 <lv_draw_rect_dsc_init>
    point_dsc_ori.bg_opa = line_dsc_ori.opa;
 800f424:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 800f428:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800f42c:	4658      	mov	r0, fp
    point_dsc_ori.bg_opa = line_dsc_ori.opa;
 800f42e:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
    point_dsc_ori.radius = LV_RADIUS_CIRCLE;
 800f432:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f436:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 800f43a:	f013 ff6a 	bl	8023312 <lv_obj_get_style_width>
 800f43e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 800f442:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 800f446:	f340 074f 	sbfx	r7, r0, #1, #16
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 800f44a:	4658      	mov	r0, fp
 800f44c:	f013 ff61 	bl	8023312 <lv_obj_get_style_width>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f450:	4651      	mov	r1, sl
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 800f452:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800f456:	f340 084f 	sbfx	r8, r0, #1, #16
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f45a:	a83e      	add	r0, sp, #248	; 0xf8
 800f45c:	f00d f842 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_draw_dsc.line_dsc = &line_dsc_tmp;
 800f460:	ab1f      	add	r3, sp, #124	; 0x7c
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 800f462:	f10b 0030 	add.w	r0, fp, #48	; 0x30
    part_draw_dsc.line_dsc = &line_dsc_tmp;
 800f466:	9344      	str	r3, [sp, #272]	; 0x110
    part_draw_dsc.rect_dsc = &point_dsc_tmp;
 800f468:	ab30      	add	r3, sp, #192	; 0xc0
 800f46a:	9342      	str	r3, [sp, #264]	; 0x108
    part_draw_dsc.part = LV_PART_CURSOR;
 800f46c:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800f470:	934b      	str	r3, [sp, #300]	; 0x12c
    part_draw_dsc.class_p = MY_CLASS;
 800f472:	4bb7      	ldr	r3, [pc, #732]	; (800f750 <lv_chart_event+0x794>)
 800f474:	933f      	str	r3, [sp, #252]	; 0xfc
    part_draw_dsc.type = LV_CHART_DRAW_PART_CURSOR;
 800f476:	2305      	movs	r3, #5
 800f478:	9340      	str	r3, [sp, #256]	; 0x100
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 800f47a:	f015 fb5e 	bl	8024b3a <_lv_ll_get_tail>
 800f47e:	4604      	mov	r4, r0
 800f480:	2800      	cmp	r0, #0
 800f482:	f040 8559 	bne.w	800ff38 <lv_chart_event+0xf7c>
    draw_ctx->clip_area = clip_area_ori;
 800f486:	9b04      	ldr	r3, [sp, #16]
 800f488:	f8ca 3008 	str.w	r3, [sl, #8]
 800f48c:	e5e8      	b.n	800f060 <lv_chart_event+0xa4>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f48e:	9b03      	ldr	r3, [sp, #12]
 800f490:	441c      	add	r4, r3
        lv_coord_t y_ofs = obj->coords.y1 + pad_top - scroll_top;
 800f492:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 800f496:	441c      	add	r4, r3
 800f498:	1a20      	subs	r0, r4, r0
 800f49a:	b283      	uxth	r3, r0
 800f49c:	930b      	str	r3, [sp, #44]	; 0x2c
        p1.x = obj->coords.x1;
 800f49e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800f4a2:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        p2.x = obj->coords.x2;
 800f4a6:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800f4aa:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        i_end = chart->hdiv_cnt;
 800f4ae:	fa0f f388 	sxth.w	r3, r8
 800f4b2:	9304      	str	r3, [sp, #16]
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 800f4b4:	9b05      	ldr	r3, [sp, #20]
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	d94c      	bls.n	800f554 <lv_chart_event+0x598>
 800f4ba:	f1b9 0f00 	cmp.w	r9, #0
 800f4be:	dd49      	ble.n	800f554 <lv_chart_event+0x598>
            if((border_side & LV_BORDER_SIDE_TOP) && (lv_obj_get_style_pad_top(obj, LV_PART_MAIN) == 0)) i_start++;
 800f4c0:	f016 0402 	ands.w	r4, r6, #2
 800f4c4:	d006      	beq.n	800f4d4 <lv_chart_event+0x518>
 800f4c6:	2100      	movs	r1, #0
 800f4c8:	4658      	mov	r0, fp
 800f4ca:	f013 ff2e 	bl	802332a <lv_obj_get_style_pad_top>
 800f4ce:	fab0 f480 	clz	r4, r0
 800f4d2:	0964      	lsrs	r4, r4, #5
            if((border_side & LV_BORDER_SIDE_BOTTOM) && (lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) == 0)) i_end--;
 800f4d4:	07f3      	lsls	r3, r6, #31
 800f4d6:	d50b      	bpl.n	800f4f0 <lv_chart_event+0x534>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800f4d8:	2211      	movs	r2, #17
 800f4da:	2100      	movs	r1, #0
 800f4dc:	4658      	mov	r0, fp
 800f4de:	f00e fb03 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800f4e2:	b200      	sxth	r0, r0
 800f4e4:	b920      	cbnz	r0, 800f4f0 <lv_chart_event+0x534>
 800f4e6:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4ea:	fa0f f388 	sxth.w	r3, r8
 800f4ee:	9304      	str	r3, [sp, #16]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f4f0:	437d      	muls	r5, r7
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_HOR;
 800f4f2:	f04f 0801 	mov.w	r8, #1
            part_draw_dsc.p1 = &p1;
 800f4f6:	af1c      	add	r7, sp, #112	; 0x70
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f4f8:	f345 250f 	sbfx	r5, r5, #8, #16
        for(i = i_start; i < i_end; i++) {
 800f4fc:	9b04      	ldr	r3, [sp, #16]
 800f4fe:	429c      	cmp	r4, r3
 800f500:	f6bf ae7d 	bge.w	800f1fe <lv_chart_event+0x242>
            p1.y = (int32_t)((int32_t)h * i) / (chart->hdiv_cnt - 1);
 800f504:	f8bb 207e 	ldrh.w	r2, [fp, #126]	; 0x7e
 800f508:	fb05 f304 	mul.w	r3, r5, r4
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f50c:	211a      	movs	r1, #26
 800f50e:	4658      	mov	r0, fp
            p1.y = (int32_t)((int32_t)h * i) / (chart->hdiv_cnt - 1);
 800f510:	3a01      	subs	r2, #1
            part_draw_dsc.id = i;
 800f512:	944c      	str	r4, [sp, #304]	; 0x130
            part_draw_dsc.p1 = &p1;
 800f514:	9747      	str	r7, [sp, #284]	; 0x11c
        for(i = i_start; i < i_end; i++) {
 800f516:	3401      	adds	r4, #1
            p1.y = (int32_t)((int32_t)h * i) / (chart->hdiv_cnt - 1);
 800f518:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.y += y_ofs;
 800f51c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        for(i = i_start; i < i_end; i++) {
 800f51e:	b224      	sxth	r4, r4
            p1.y += y_ofs;
 800f520:	4413      	add	r3, r2
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f522:	aa3e      	add	r2, sp, #248	; 0xf8
            p1.y += y_ofs;
 800f524:	b21b      	sxth	r3, r3
 800f526:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            p2.y = p1.y;
 800f52a:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            part_draw_dsc.class_p = MY_CLASS;
 800f52e:	4b88      	ldr	r3, [pc, #544]	; (800f750 <lv_chart_event+0x794>)
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_HOR;
 800f530:	e9cd 383f 	strd	r3, r8, [sp, #252]	; 0xfc
            part_draw_dsc.p2 = &p2;
 800f534:	ab1f      	add	r3, sp, #124	; 0x7c
 800f536:	9348      	str	r3, [sp, #288]	; 0x120
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f538:	f7f5 f904 	bl	8004744 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800f53c:	ab1f      	add	r3, sp, #124	; 0x7c
 800f53e:	463a      	mov	r2, r7
 800f540:	a930      	add	r1, sp, #192	; 0xc0
 800f542:	4650      	mov	r0, sl
 800f544:	f00f fa40 	bl	801e9c8 <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800f548:	aa3e      	add	r2, sp, #248	; 0xf8
 800f54a:	211b      	movs	r1, #27
 800f54c:	4658      	mov	r0, fp
 800f54e:	f7f5 f8f9 	bl	8004744 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 800f552:	e7d3      	b.n	800f4fc <lv_chart_event+0x540>
        i_start = 0;
 800f554:	2400      	movs	r4, #0
 800f556:	e7cb      	b.n	800f4f0 <lv_chart_event+0x534>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f558:	9b07      	ldr	r3, [sp, #28]
        i_end = chart->vdiv_cnt;
 800f55a:	fa0f f788 	sxth.w	r7, r8
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f55e:	9d03      	ldr	r5, [sp, #12]
 800f560:	441d      	add	r5, r3
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 800f562:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800f566:	441d      	add	r5, r3
 800f568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f56a:	1aed      	subs	r5, r5, r3
        p1.y = obj->coords.y1;
 800f56c:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 800f570:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 800f574:	b2ad      	uxth	r5, r5
        p2.y = obj->coords.y2;
 800f576:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 800f57a:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 800f57e:	9b05      	ldr	r3, [sp, #20]
 800f580:	2b02      	cmp	r3, #2
 800f582:	d94d      	bls.n	800f620 <lv_chart_event+0x664>
 800f584:	f1b9 0f00 	cmp.w	r9, #0
 800f588:	dd4a      	ble.n	800f620 <lv_chart_event+0x664>
            if((border_side & LV_BORDER_SIDE_LEFT) && (lv_obj_get_style_pad_left(obj, LV_PART_MAIN) == 0)) i_start++;
 800f58a:	f016 0404 	ands.w	r4, r6, #4
 800f58e:	d006      	beq.n	800f59e <lv_chart_event+0x5e2>
 800f590:	2100      	movs	r1, #0
 800f592:	4658      	mov	r0, fp
 800f594:	f013 feb7 	bl	8023306 <lv_obj_get_style_pad_left>
 800f598:	fab0 f480 	clz	r4, r0
 800f59c:	0964      	lsrs	r4, r4, #5
            if((border_side & LV_BORDER_SIDE_RIGHT) && (lv_obj_get_style_pad_right(obj, LV_PART_MAIN) == 0)) i_end--;
 800f59e:	0736      	lsls	r6, r6, #28
 800f5a0:	d50a      	bpl.n	800f5b8 <lv_chart_event+0x5fc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800f5a2:	2213      	movs	r2, #19
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	4658      	mov	r0, fp
 800f5a8:	f00e fa9e 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800f5ac:	b200      	sxth	r0, r0
 800f5ae:	b918      	cbnz	r0, 800f5b8 <lv_chart_event+0x5fc>
 800f5b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800f5b4:	fa0f f788 	sxth.w	r7, r8
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_VER;
 800f5b8:	f04f 0902 	mov.w	r9, #2
            part_draw_dsc.p1 = &p1;
 800f5bc:	f10d 0870 	add.w	r8, sp, #112	; 0x70
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f5c0:	e9dd 6308 	ldrd	r6, r3, [sp, #32]
 800f5c4:	435e      	muls	r6, r3
 800f5c6:	f346 260f 	sbfx	r6, r6, #8, #16
        for(i = i_start; i < i_end; i++) {
 800f5ca:	42bc      	cmp	r4, r7
 800f5cc:	f6bf ae1d 	bge.w	800f20a <lv_chart_event+0x24e>
            p1.x = (int32_t)((int32_t)w * i) / (chart->vdiv_cnt - 1);
 800f5d0:	f8bb 2080 	ldrh.w	r2, [fp, #128]	; 0x80
 800f5d4:	fb06 f304 	mul.w	r3, r6, r4
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f5d8:	211a      	movs	r1, #26
 800f5da:	4658      	mov	r0, fp
            p1.x = (int32_t)((int32_t)w * i) / (chart->vdiv_cnt - 1);
 800f5dc:	3a01      	subs	r2, #1
            part_draw_dsc.id = i;
 800f5de:	944c      	str	r4, [sp, #304]	; 0x130
            part_draw_dsc.p1 = &p1;
 800f5e0:	f8cd 811c 	str.w	r8, [sp, #284]	; 0x11c
        for(i = i_start; i < i_end; i++) {
 800f5e4:	3401      	adds	r4, #1
            p1.x = (int32_t)((int32_t)w * i) / (chart->vdiv_cnt - 1);
 800f5e6:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.x += x_ofs;
 800f5ea:	442b      	add	r3, r5
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f5ec:	aa3e      	add	r2, sp, #248	; 0xf8
        for(i = i_start; i < i_end; i++) {
 800f5ee:	b224      	sxth	r4, r4
            p1.x += x_ofs;
 800f5f0:	b21b      	sxth	r3, r3
 800f5f2:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            p2.x = p1.x;
 800f5f6:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            part_draw_dsc.class_p = MY_CLASS;
 800f5fa:	4b55      	ldr	r3, [pc, #340]	; (800f750 <lv_chart_event+0x794>)
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_VER;
 800f5fc:	e9cd 393f 	strd	r3, r9, [sp, #252]	; 0xfc
            part_draw_dsc.p2 = &p2;
 800f600:	ab1f      	add	r3, sp, #124	; 0x7c
 800f602:	9348      	str	r3, [sp, #288]	; 0x120
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f604:	f7f5 f89e 	bl	8004744 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800f608:	ab1f      	add	r3, sp, #124	; 0x7c
 800f60a:	4642      	mov	r2, r8
 800f60c:	a930      	add	r1, sp, #192	; 0xc0
 800f60e:	4650      	mov	r0, sl
 800f610:	f00f f9da 	bl	801e9c8 <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800f614:	aa3e      	add	r2, sp, #248	; 0xf8
 800f616:	211b      	movs	r1, #27
 800f618:	4658      	mov	r0, fp
 800f61a:	f7f5 f893 	bl	8004744 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 800f61e:	e7d4      	b.n	800f5ca <lv_chart_event+0x60e>
        i_start = 0;
 800f620:	2400      	movs	r4, #0
 800f622:	e7c9      	b.n	800f5b8 <lv_chart_event+0x5fc>
        if(ser->hidden) continue;
 800f624:	7b23      	ldrb	r3, [r4, #12]
 800f626:	f013 0301 	ands.w	r3, r3, #1
 800f62a:	d005      	beq.n	800f638 <lv_chart_event+0x67c>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800f62c:	4621      	mov	r1, r4
 800f62e:	9806      	ldr	r0, [sp, #24]
 800f630:	f015 fa8a 	bl	8024b48 <_lv_ll_get_prev>
 800f634:	4604      	mov	r4, r0
 800f636:	e6ca      	b.n	800f3ce <lv_chart_event+0x412>
        line_dsc_default.color = ser->color;
 800f638:	8922      	ldrh	r2, [r4, #8]
                    part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800f63a:	f647 79ff 	movw	r9, #32767	; 0x7fff
        line_dsc_default.color = ser->color;
 800f63e:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
        point_dsc_default.bg_color = ser->color;
 800f642:	8922      	ldrh	r2, [r4, #8]
 800f644:	f8ad 20c4 	strh.w	r2, [sp, #196]	; 0xc4
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800f648:	f89b 2088 	ldrb.w	r2, [fp, #136]	; 0x88
 800f64c:	0710      	lsls	r0, r2, #28
 800f64e:	bf58      	it	pl
 800f650:	f9b4 300a 	ldrshpl.w	r3, [r4, #10]
 800f654:	9308      	str	r3, [sp, #32]
        p1.x = x_ofs;
 800f656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 800f658:	9808      	ldr	r0, [sp, #32]
        p1.x = x_ofs;
 800f65a:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
        p2.x = x_ofs;
 800f65e:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 800f662:	7b22      	ldrb	r2, [r4, #12]
 800f664:	6863      	ldr	r3, [r4, #4]
 800f666:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800f66a:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 800f66e:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 800f672:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f674:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800f678:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 800f67c:	1a5b      	subs	r3, r3, r1
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800f67e:	1a52      	subs	r2, r2, r1
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f680:	4651      	mov	r1, sl
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 800f682:	4343      	muls	r3, r0
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f684:	a83e      	add	r0, sp, #248	; 0xf8
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800f686:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y   = h - y_tmp + y_ofs;
 800f68a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f68c:	1ad3      	subs	r3, r2, r3
 800f68e:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f692:	f00c ff27 	bl	801c4e4 <lv_obj_draw_dsc_init>
        part_draw_dsc.class_p = MY_CLASS;
 800f696:	4b2e      	ldr	r3, [pc, #184]	; (800f750 <lv_chart_event+0x794>)
        lv_coord_t y_min = p2.y;
 800f698:	f9bd 6062 	ldrsh.w	r6, [sp, #98]	; 0x62
        part_draw_dsc.class_p = MY_CLASS;
 800f69c:	933f      	str	r3, [sp, #252]	; 0xfc
        part_draw_dsc.type = LV_CHART_DRAW_PART_LINE_AND_POINT;
 800f69e:	2303      	movs	r3, #3
        lv_coord_t p_act = start_point;
 800f6a0:	9808      	ldr	r0, [sp, #32]
        part_draw_dsc.type = LV_CHART_DRAW_PART_LINE_AND_POINT;
 800f6a2:	9340      	str	r3, [sp, #256]	; 0x100
        part_draw_dsc.part = LV_PART_ITEMS;
 800f6a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
        part_draw_dsc.sub_part_ptr = ser;
 800f6a8:	944f      	str	r4, [sp, #316]	; 0x13c
        part_draw_dsc.part = LV_PART_ITEMS;
 800f6aa:	934b      	str	r3, [sp, #300]	; 0x12c
        part_draw_dsc.line_dsc = &line_dsc_default;
 800f6ac:	ab22      	add	r3, sp, #136	; 0x88
        lv_coord_t y_min = p2.y;
 800f6ae:	9604      	str	r6, [sp, #16]
        part_draw_dsc.line_dsc = &line_dsc_default;
 800f6b0:	9344      	str	r3, [sp, #272]	; 0x110
        part_draw_dsc.rect_dsc = &point_dsc_default;
 800f6b2:	ab30      	add	r3, sp, #192	; 0xc0
 800f6b4:	9342      	str	r3, [sp, #264]	; 0x108
        for(i = 0; i < chart->point_cnt; i++) {
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	9305      	str	r3, [sp, #20]
                    point_area.x1 = p1.x - point_w;
 800f6ba:	fa1f f388 	uxth.w	r3, r8
 800f6be:	9311      	str	r3, [sp, #68]	; 0x44
                    point_area.y1 = p1.y - point_h;
 800f6c0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f6c4:	9312      	str	r3, [sp, #72]	; 0x48
 800f6c6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
        for(i = 0; i < chart->point_cnt; i++) {
 800f6ca:	f8bb 5082 	ldrh.w	r5, [fp, #130]	; 0x82
 800f6ce:	428d      	cmp	r5, r1
 800f6d0:	d840      	bhi.n	800f754 <lv_chart_event+0x798>
        if(!crowded_mode && i == chart->point_cnt) {
 800f6d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	daa8      	bge.n	800f62c <lv_chart_event+0x670>
 800f6da:	428d      	cmp	r5, r1
 800f6dc:	d1a6      	bne.n	800f62c <lv_chart_event+0x670>
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800f6de:	6863      	ldr	r3, [r4, #4]
 800f6e0:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 800f6e4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d09f      	beq.n	800f62c <lv_chart_event+0x670>
                point_area.x1 = p2.x - point_w;
 800f6ec:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800f6f0:	fa1f f288 	uxth.w	r2, r8
                part_draw_dsc.draw_area = &point_area;
 800f6f4:	ad1f      	add	r5, sp, #124	; 0x7c
                point_area.x1 = p2.x - point_w;
 800f6f6:	1a99      	subs	r1, r3, r2
                point_area.x2 = p2.x + point_w;
 800f6f8:	4413      	add	r3, r2
                point_area.y1 = p2.y - point_h;
 800f6fa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
                point_area.x2 = p2.x + point_w;
 800f6fe:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
                point_area.y1 = p2.y - point_h;
 800f702:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
                point_area.x1 = p2.x - point_w;
 800f706:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
                point_area.y1 = p2.y - point_h;
 800f70a:	1a99      	subs	r1, r3, r2
                point_area.y2 = p2.y + point_h;
 800f70c:	4413      	add	r3, r2
                part_draw_dsc.draw_area = &point_area;
 800f70e:	9541      	str	r5, [sp, #260]	; 0x104
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f710:	aa3e      	add	r2, sp, #248	; 0xf8
                point_area.y2 = p2.y + point_h;
 800f712:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                part_draw_dsc.id = i - 1;
 800f716:	f8bd 3014 	ldrh.w	r3, [sp, #20]
                point_area.y1 = p2.y - point_h;
 800f71a:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f71e:	211a      	movs	r1, #26
                part_draw_dsc.id = i - 1;
 800f720:	3b01      	subs	r3, #1
 800f722:	934c      	str	r3, [sp, #304]	; 0x130
                part_draw_dsc.p1 = NULL;
 800f724:	2300      	movs	r3, #0
                part_draw_dsc.p2 = NULL;
 800f726:	e9cd 3347 	strd	r3, r3, [sp, #284]	; 0x11c
                part_draw_dsc.value = ser->y_points[p_act];
 800f72a:	6863      	ldr	r3, [r4, #4]
 800f72c:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f730:	4658      	mov	r0, fp
                part_draw_dsc.value = ser->y_points[p_act];
 800f732:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f734:	f7f5 f806 	bl	8004744 <lv_event_send>
                lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 800f738:	462a      	mov	r2, r5
 800f73a:	a930      	add	r1, sp, #192	; 0xc0
 800f73c:	4650      	mov	r0, sl
 800f73e:	f00f fe66 	bl	801f40e <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800f742:	aa3e      	add	r2, sp, #248	; 0xf8
 800f744:	211b      	movs	r1, #27
 800f746:	4658      	mov	r0, fp
 800f748:	f7f4 fffc 	bl	8004744 <lv_event_send>
 800f74c:	e76e      	b.n	800f62c <lv_chart_event+0x670>
 800f74e:	bf00      	nop
 800f750:	08028ee8 	.word	0x08028ee8
            p1.y = p2.y;
 800f754:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
            p1.x = p2.x;
 800f758:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
            p1.y = p2.y;
 800f75c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 800f760:	930f      	str	r3, [sp, #60]	; 0x3c
            if(p1.x > clip_area_ori->x2 + point_w + 1) break;
 800f762:	9b09      	ldr	r3, [sp, #36]	; 0x24
            p1.x = p2.x;
 800f764:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
            if(p1.x > clip_area_ori->x2 + point_w + 1) break;
 800f768:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f76c:	4443      	add	r3, r8
 800f76e:	3301      	adds	r3, #1
 800f770:	429a      	cmp	r2, r3
 800f772:	f73f af5b 	bgt.w	800f62c <lv_chart_event+0x670>
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 800f776:	f8bd c014 	ldrh.w	ip, [sp, #20]
 800f77a:	1e6f      	subs	r7, r5, #1
 800f77c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f77e:	fb0c f303 	mul.w	r3, ip, r3
 800f782:	fb93 f3f7 	sdiv	r3, r3, r7
 800f786:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f788:	443b      	add	r3, r7
 800f78a:	b29f      	uxth	r7, r3
 800f78c:	b21b      	sxth	r3, r3
 800f78e:	9715      	str	r7, [sp, #84]	; 0x54
 800f790:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800f794:	930b      	str	r3, [sp, #44]	; 0x2c
            p_act = (start_point + i) % chart->point_cnt;
 800f796:	9b08      	ldr	r3, [sp, #32]
 800f798:	eb03 070c 	add.w	r7, r3, ip
 800f79c:	fb97 fef5 	sdiv	lr, r7, r5
 800f7a0:	fb05 771e 	mls	r7, r5, lr, r7
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800f7a4:	f8d4 e004 	ldr.w	lr, [r4, #4]
            p_act = (start_point + i) % chart->point_cnt;
 800f7a8:	b23b      	sxth	r3, r7
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800f7aa:	7b27      	ldrb	r7, [r4, #12]
 800f7ac:	f3c7 1700 	ubfx	r7, r7, #4, #1
            p_act = (start_point + i) % chart->point_cnt;
 800f7b0:	9303      	str	r3, [sp, #12]
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800f7b2:	eb0b 0747 	add.w	r7, fp, r7, lsl #1
 800f7b6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800f7ba:	f9b7 7070 	ldrsh.w	r7, [r7, #112]	; 0x70
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800f7be:	9310      	str	r3, [sp, #64]	; 0x40
 800f7c0:	9b03      	ldr	r3, [sp, #12]
 800f7c2:	f93e 5013 	ldrsh.w	r5, [lr, r3, lsl #1]
 800f7c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f7c8:	1aed      	subs	r5, r5, r3
 800f7ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7cc:	435d      	muls	r5, r3
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800f7ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f7d0:	1aff      	subs	r7, r7, r3
            p2.y  = h - y_tmp + y_ofs;
 800f7d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800f7d4:	fb95 f5f7 	sdiv	r5, r5, r7
            p2.y  = h - y_tmp + y_ofs;
 800f7d8:	1b5d      	subs	r5, r3, r5
            if(p2.x < clip_area_ori->x1 - point_w - 1) {
 800f7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
            p2.y  = h - y_tmp + y_ofs;
 800f7dc:	b22d      	sxth	r5, r5
 800f7de:	f8ad 5062 	strh.w	r5, [sp, #98]	; 0x62
            if(p2.x < clip_area_ori->x1 - point_w - 1) {
 800f7e2:	f9b3 7000 	ldrsh.w	r7, [r3]
 800f7e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7e8:	eba7 0708 	sub.w	r7, r7, r8
 800f7ec:	3f01      	subs	r7, #1
 800f7ee:	42bb      	cmp	r3, r7
 800f7f0:	db39      	blt.n	800f866 <lv_chart_event+0x8aa>
            if(i != 0) {
 800f7f2:	2900      	cmp	r1, #0
 800f7f4:	d037      	beq.n	800f866 <lv_chart_event+0x8aa>
                if(crowded_mode) {
 800f7f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800f7f8:	0047      	lsls	r7, r0, #1
                if(crowded_mode) {
 800f7fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f7fc:	428b      	cmp	r3, r1
 800f7fe:	db37      	blt.n	800f870 <lv_chart_event+0x8b4>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800f800:	f93e 1010 	ldrsh.w	r1, [lr, r0, lsl #1]
 800f804:	4549      	cmp	r1, r9
 800f806:	d02e      	beq.n	800f866 <lv_chart_event+0x8aa>
 800f808:	9b03      	ldr	r3, [sp, #12]
 800f80a:	f93e 1013 	ldrsh.w	r1, [lr, r3, lsl #1]
 800f80e:	4549      	cmp	r1, r9
 800f810:	d029      	beq.n	800f866 <lv_chart_event+0x8aa>
                        y_min = LV_MIN(y_min, p2.y);
 800f812:	9b04      	ldr	r3, [sp, #16]
                        y_max = LV_MAX(y_max, p2.y);
 800f814:	42ae      	cmp	r6, r5
 800f816:	bfb8      	it	lt
 800f818:	462e      	movlt	r6, r5
                        y_min = LV_MIN(y_min, p2.y);
 800f81a:	42ab      	cmp	r3, r5
 800f81c:	bfa8      	it	ge
 800f81e:	462b      	movge	r3, r5
 800f820:	9304      	str	r3, [sp, #16]
                        if(p1.x != p2.x) {
 800f822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f824:	429a      	cmp	r2, r3
 800f826:	d01e      	beq.n	800f866 <lv_chart_event+0x8aa>
                            p2.x--;         /*It's already on the next x value*/
 800f828:	9b15      	ldr	r3, [sp, #84]	; 0x54
                            lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 800f82a:	a922      	add	r1, sp, #136	; 0x88
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 800f82c:	9a04      	ldr	r2, [sp, #16]
                            lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 800f82e:	4650      	mov	r0, sl
                            p2.x--;         /*It's already on the next x value*/
 800f830:	3b01      	subs	r3, #1
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 800f832:	4296      	cmp	r6, r2
                            lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 800f834:	aa17      	add	r2, sp, #92	; 0x5c
                            p2.x--;         /*It's already on the next x value*/
 800f836:	b21b      	sxth	r3, r3
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 800f838:	bf08      	it	eq
 800f83a:	3601      	addeq	r6, #1
                            p2.x--;         /*It's already on the next x value*/
 800f83c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                            p1.x = p2.x;
 800f840:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 800f844:	bf08      	it	eq
 800f846:	b236      	sxtheq	r6, r6
                            p1.y = y_min;
 800f848:	9b04      	ldr	r3, [sp, #16]
                            p2.y = y_max;
 800f84a:	f8ad 6062 	strh.w	r6, [sp, #98]	; 0x62
                            y_max = y_cur;
 800f84e:	462e      	mov	r6, r5
                            p1.y = y_min;
 800f850:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                            lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 800f854:	ab18      	add	r3, sp, #96	; 0x60
 800f856:	f00f f8b7 	bl	801e9c8 <lv_draw_line>
                            p2.x++;         /*Compensate the previous x--*/
 800f85a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
                            y_min = y_cur;  /*Start the line of the next x from the current last y*/
 800f85e:	9504      	str	r5, [sp, #16]
                            p2.x++;         /*Compensate the previous x--*/
 800f860:	3301      	adds	r3, #1
 800f862:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        for(i = 0; i < chart->point_cnt; i++) {
 800f866:	9b05      	ldr	r3, [sp, #20]
            p_act = (start_point + i) % chart->point_cnt;
 800f868:	9803      	ldr	r0, [sp, #12]
 800f86a:	3301      	adds	r3, #1
 800f86c:	9305      	str	r3, [sp, #20]
 800f86e:	e72a      	b.n	800f6c6 <lv_chart_event+0x70a>
                    point_area.x1 = p1.x - point_w;
 800f870:	b292      	uxth	r2, r2
 800f872:	9b11      	ldr	r3, [sp, #68]	; 0x44
                    point_area.y1 = p1.y - point_h;
 800f874:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
                    point_area.x1 = p1.x - point_w;
 800f878:	1ad3      	subs	r3, r2, r3
 800f87a:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                    point_area.x2 = p1.x + point_w;
 800f87e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f880:	441a      	add	r2, r3
                    point_area.y1 = p1.y - point_h;
 800f882:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f884:	1acb      	subs	r3, r1, r3
                    point_area.x2 = p1.x + point_w;
 800f886:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
                    part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 800f88a:	9a03      	ldr	r2, [sp, #12]
                    point_area.y1 = p1.y - point_h;
 800f88c:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
                    point_area.y2 = p1.y + point_h;
 800f890:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f892:	4419      	add	r1, r3
                    part_draw_dsc.id = i - 1;
 800f894:	f10c 33ff 	add.w	r3, ip, #4294967295
                    point_area.y2 = p1.y + point_h;
 800f898:	f8ad 1082 	strh.w	r1, [sp, #130]	; 0x82
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f89c:	211a      	movs	r1, #26
                    part_draw_dsc.id = i - 1;
 800f89e:	934c      	str	r3, [sp, #304]	; 0x130
                    part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800f8a0:	6863      	ldr	r3, [r4, #4]
 800f8a2:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f8a6:	4658      	mov	r0, fp
                    part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800f8a8:	454b      	cmp	r3, r9
 800f8aa:	bf14      	ite	ne
 800f8ac:	ab17      	addne	r3, sp, #92	; 0x5c
 800f8ae:	2300      	moveq	r3, #0
 800f8b0:	9347      	str	r3, [sp, #284]	; 0x11c
                    part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 800f8b2:	6863      	ldr	r3, [r4, #4]
 800f8b4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f8b8:	aa3e      	add	r2, sp, #248	; 0xf8
                    part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 800f8ba:	454b      	cmp	r3, r9
 800f8bc:	bf14      	ite	ne
 800f8be:	ab18      	addne	r3, sp, #96	; 0x60
 800f8c0:	2300      	moveq	r3, #0
 800f8c2:	9348      	str	r3, [sp, #288]	; 0x120
                    part_draw_dsc.draw_area = &point_area;
 800f8c4:	ab1f      	add	r3, sp, #124	; 0x7c
 800f8c6:	9341      	str	r3, [sp, #260]	; 0x104
                    part_draw_dsc.value = ser->y_points[p_prev];
 800f8c8:	6863      	ldr	r3, [r4, #4]
 800f8ca:	5fdb      	ldrsh	r3, [r3, r7]
 800f8cc:	934e      	str	r3, [sp, #312]	; 0x138
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f8ce:	f7f4 ff39 	bl	8004744 <lv_event_send>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800f8d2:	6863      	ldr	r3, [r4, #4]
 800f8d4:	5fda      	ldrsh	r2, [r3, r7]
 800f8d6:	454a      	cmp	r2, r9
 800f8d8:	d00a      	beq.n	800f8f0 <lv_chart_event+0x934>
 800f8da:	9a03      	ldr	r2, [sp, #12]
 800f8dc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800f8e0:	454b      	cmp	r3, r9
 800f8e2:	d005      	beq.n	800f8f0 <lv_chart_event+0x934>
                        lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 800f8e4:	ab18      	add	r3, sp, #96	; 0x60
 800f8e6:	aa17      	add	r2, sp, #92	; 0x5c
 800f8e8:	a922      	add	r1, sp, #136	; 0x88
 800f8ea:	4650      	mov	r0, sl
 800f8ec:	f00f f86c 	bl	801e9c8 <lv_draw_line>
                    if(point_w && point_h && ser->y_points[p_prev] != LV_CHART_POINT_NONE) {
 800f8f0:	f1b8 0f00 	cmp.w	r8, #0
 800f8f4:	d00c      	beq.n	800f910 <lv_chart_event+0x954>
 800f8f6:	9b07      	ldr	r3, [sp, #28]
 800f8f8:	b153      	cbz	r3, 800f910 <lv_chart_event+0x954>
 800f8fa:	6863      	ldr	r3, [r4, #4]
 800f8fc:	5fda      	ldrsh	r2, [r3, r7]
 800f8fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f902:	429a      	cmp	r2, r3
 800f904:	d004      	beq.n	800f910 <lv_chart_event+0x954>
                        lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 800f906:	aa1f      	add	r2, sp, #124	; 0x7c
 800f908:	a930      	add	r1, sp, #192	; 0xc0
 800f90a:	4650      	mov	r0, sl
 800f90c:	f00f fd7f 	bl	801f40e <lv_draw_rect>
                    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800f910:	aa3e      	add	r2, sp, #248	; 0xf8
 800f912:	211b      	movs	r1, #27
 800f914:	4658      	mov	r0, fp
 800f916:	f7f4 ff15 	bl	8004744 <lv_event_send>
 800f91a:	e7a4      	b.n	800f866 <lv_chart_event+0x8aa>
            else if(chart->type == LV_CHART_TYPE_BAR) draw_series_bar(obj, draw_ctx);
 800f91c:	2b02      	cmp	r3, #2
 800f91e:	f040 8131 	bne.w	800fb84 <lv_chart_event+0xbc8>
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 800f922:	ac1f      	add	r4, sp, #124	; 0x7c
 800f924:	f8da 2008 	ldr.w	r2, [sl, #8]
 800f928:	9902      	ldr	r1, [sp, #8]
 800f92a:	4620      	mov	r0, r4
 800f92c:	f014 fcd5 	bl	80242da <_lv_area_intersect>
 800f930:	2800      	cmp	r0, #0
 800f932:	f43f ad52 	beq.w	800f3da <lv_chart_event+0x41e>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f936:	f8da 3008 	ldr.w	r3, [sl, #8]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800f93a:	4639      	mov	r1, r7
    draw_ctx->clip_area = &clip_area;
 800f93c:	f8ca 4008 	str.w	r4, [sl, #8]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800f940:	4658      	mov	r0, fp
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f942:	9307      	str	r3, [sp, #28]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800f944:	f013 fcdf 	bl	8023306 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800f948:	4639      	mov	r1, r7
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800f94a:	4680      	mov	r8, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800f94c:	4658      	mov	r0, fp
 800f94e:	f013 fcec 	bl	802332a <lv_obj_get_style_pad_top>
 800f952:	4605      	mov	r5, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f954:	4658      	mov	r0, fp
 800f956:	f00c ffad 	bl	801c8b4 <lv_obj_get_content_width>
 800f95a:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 800f95e:	4343      	muls	r3, r0
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f960:	4658      	mov	r0, fp
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f962:	f343 230f 	sbfx	r3, r3, #8, #16
 800f966:	9303      	str	r3, [sp, #12]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f968:	f00c ffba 	bl	801c8e0 <lv_obj_get_content_height>
 800f96c:	f8bb 3086 	ldrh.w	r3, [fp, #134]	; 0x86
 800f970:	4358      	muls	r0, r3
 800f972:	1203      	asrs	r3, r0, #8
 800f974:	9308      	str	r3, [sp, #32]
 800f976:	f340 230f 	sbfx	r3, r0, #8, #16
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 800f97a:	f10b 0024 	add.w	r0, fp, #36	; 0x24
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f97e:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 800f980:	f015 f8e5 	bl	8024b4e <_lv_ll_get_len>
    int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800f984:	4639      	mov	r1, r7
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 800f986:	4604      	mov	r4, r0
    int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800f988:	4658      	mov	r0, fp
 800f98a:	f013 fcc8 	bl	802331e <lv_obj_get_style_pad_column>
                                                              LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 800f98e:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 800f992:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
    lv_coord_t col_w = (block_w - (ser_cnt - 1) * ser_gap) / ser_cnt;
 800f996:	1e66      	subs	r6, r4, #1
                                                              LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 800f998:	4343      	muls	r3, r0
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 800f99a:	9803      	ldr	r0, [sp, #12]
 800f99c:	1e51      	subs	r1, r2, #1
    int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800f99e:	121b      	asrs	r3, r3, #8
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 800f9a0:	fb01 0313 	mls	r3, r1, r3, r0
    int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800f9a4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f9a8:	4658      	mov	r0, fp
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 800f9aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9ae:	b21b      	sxth	r3, r3
 800f9b0:	9304      	str	r3, [sp, #16]
    int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800f9b2:	f013 fcb4 	bl	802331e <lv_obj_get_style_pad_column>
                                                            LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the columns on the ~same X*/
 800f9b6:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 800f9ba:	4343      	muls	r3, r0
    lv_coord_t border_w = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f9bc:	4658      	mov	r0, fp
    int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800f9be:	121b      	asrs	r3, r3, #8
 800f9c0:	9305      	str	r3, [sp, #20]
    lv_coord_t col_w = (block_w - (ser_cnt - 1) * ser_gap) / ser_cnt;
 800f9c2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f9c6:	fb02 3616 	mls	r6, r2, r6, r3
 800f9ca:	fbb6 f6f4 	udiv	r6, r6, r4
    if(col_w < 1) col_w  = 1;
 800f9ce:	b236      	sxth	r6, r6
 800f9d0:	2e01      	cmp	r6, #1
 800f9d2:	bfb8      	it	lt
 800f9d4:	2601      	movlt	r6, #1
    lv_coord_t border_w = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f9d6:	f013 fcdc 	bl	8023392 <lv_obj_get_style_border_width.constprop.0>
 800f9da:	4681      	mov	r9, r0
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj) + border_w;
 800f9dc:	4658      	mov	r0, fp
 800f9de:	f7f6 f941 	bl	8005c64 <lv_obj_get_scroll_left>
 800f9e2:	fa1f f489 	uxth.w	r4, r9
 800f9e6:	fa18 f989 	uxtah	r9, r8, r9
            col_a.x2 = col_a.x1 + col_w - 1;
 800f9ea:	b2b6      	uxth	r6, r6
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj) + border_w;
 800f9ec:	eba9 0900 	sub.w	r9, r9, r0
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj) + border_w;
 800f9f0:	442c      	add	r4, r5
 800f9f2:	4658      	mov	r0, fp
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj) + border_w;
 800f9f4:	fa1f f389 	uxth.w	r3, r9
 800f9f8:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj) + border_w;
 800f9fa:	f00d faee 	bl	801cfda <lv_obj_get_scroll_top>
 800f9fe:	1a24      	subs	r4, r4, r0
    lv_draw_rect_dsc_init(&col_dsc);
 800fa00:	a830      	add	r0, sp, #192	; 0xc0
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj) + border_w;
 800fa02:	b2a3      	uxth	r3, r4
    for(i = 0; i < chart->point_cnt; i++) {
 800fa04:	463c      	mov	r4, r7
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj) + border_w;
 800fa06:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_draw_rect_dsc_init(&col_dsc);
 800fa08:	f7f8 ffcc 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &col_dsc);
 800fa0c:	aa30      	add	r2, sp, #192	; 0xc0
 800fa0e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800fa12:	4658      	mov	r0, fp
 800fa14:	f00c fa70 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    col_dsc.bg_grad.dir = LV_GRAD_DIR_NONE;
 800fa18:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 800fa1c:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800fa20:	4651      	mov	r1, sl
    col_dsc.bg_grad.dir = LV_GRAD_DIR_NONE;
 800fa22:	f367 0302 	bfi	r3, r7, #0, #3
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800fa26:	a83e      	add	r0, sp, #248	; 0xf8
    col_dsc.bg_grad.dir = LV_GRAD_DIR_NONE;
 800fa28:	f88d 30cf 	strb.w	r3, [sp, #207]	; 0xcf
    col_dsc.bg_opa = LV_OPA_COVER;
 800fa2c:	23ff      	movs	r3, #255	; 0xff
 800fa2e:	f88d 30c3 	strb.w	r3, [sp, #195]	; 0xc3
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 800fa32:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 800fa36:	4413      	add	r3, r2
 800fa38:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800fa3c:	f00c fd52 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 800fa40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800fa44:	934b      	str	r3, [sp, #300]	; 0x12c
    part_draw_dsc.class_p = MY_CLASS;
 800fa46:	4ba2      	ldr	r3, [pc, #648]	; (800fcd0 <lv_chart_event+0xd14>)
 800fa48:	933f      	str	r3, [sp, #252]	; 0xfc
    part_draw_dsc.type = LV_CHART_DRAW_PART_BAR;
 800fa4a:	2304      	movs	r3, #4
 800fa4c:	9340      	str	r3, [sp, #256]	; 0x100
            col_a.x2 = col_a.x1 + col_w - 1;
 800fa4e:	1e73      	subs	r3, r6, #1
 800fa50:	930e      	str	r3, [sp, #56]	; 0x38
    for(i = 0; i < chart->point_cnt; i++) {
 800fa52:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 800fa56:	b2a2      	uxth	r2, r4
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d801      	bhi.n	800fa60 <lv_chart_event+0xaa4>
    draw_ctx->clip_area = clip_area_ori;
 800fa5c:	9b07      	ldr	r3, [sp, #28]
 800fa5e:	e4ba      	b.n	800f3d6 <lv_chart_event+0x41a>
        lv_coord_t x_act = (int32_t)((int32_t)(w - block_w) * i) / (chart->point_cnt - 1) + obj->coords.x1 + x_ofs;
 800fa60:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800fa64:	b2a7      	uxth	r7, r4
 800fa66:	3b01      	subs	r3, #1
 800fa68:	eba2 0801 	sub.w	r8, r2, r1
 800fa6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fa6e:	9806      	ldr	r0, [sp, #24]
        lv_coord_t x_act = (int32_t)((int32_t)(w - block_w) * i) / (chart->point_cnt - 1) + obj->coords.x1 + x_ofs;
 800fa70:	fb07 f808 	mul.w	r8, r7, r8
 800fa74:	fb98 f8f3 	sdiv	r8, r8, r3
 800fa78:	f8bb 3014 	ldrh.w	r3, [fp, #20]
        part_draw_dsc.id = i;
 800fa7c:	974c      	str	r7, [sp, #304]	; 0x130
        lv_coord_t x_act = (int32_t)((int32_t)(w - block_w) * i) / (chart->point_cnt - 1) + obj->coords.x1 + x_ofs;
 800fa7e:	4413      	add	r3, r2
 800fa80:	4498      	add	r8, r3
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fa82:	f015 f85a 	bl	8024b3a <_lv_ll_get_tail>
            x_act += col_w + ser_gap;
 800fa86:	9b05      	ldr	r3, [sp, #20]
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fa88:	4605      	mov	r5, r0
        lv_coord_t x_act = (int32_t)((int32_t)(w - block_w) * i) / (chart->point_cnt - 1) + obj->coords.x1 + x_ofs;
 800fa8a:	fa0f f888 	sxth.w	r8, r8
            x_act += col_w + ser_gap;
 800fa8e:	18f3      	adds	r3, r6, r3
 800fa90:	930d      	str	r3, [sp, #52]	; 0x34
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fa92:	b1f5      	cbz	r5, 800fad2 <lv_chart_event+0xb16>
            if(ser->hidden) continue;
 800fa94:	7b2b      	ldrb	r3, [r5, #12]
 800fa96:	f013 0301 	ands.w	r3, r3, #1
 800fa9a:	d150      	bne.n	800fb3e <lv_chart_event+0xb82>
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800fa9c:	f89b 2088 	ldrb.w	r2, [fp, #136]	; 0x88
            if(col_a.x2 < clip_area.x1) continue;
 800faa0:	f9bd 107c 	ldrsh.w	r1, [sp, #124]	; 0x7c
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800faa4:	0712      	lsls	r2, r2, #28
            col_a.x2 = col_a.x1 + col_w - 1;
 800faa6:	fa1f f288 	uxth.w	r2, r8
 800faaa:	920c      	str	r2, [sp, #48]	; 0x30
 800faac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800faae:	bf58      	it	pl
 800fab0:	f9b5 300a 	ldrshpl.w	r3, [r5, #10]
            col_a.x2 = col_a.x1 + col_w - 1;
 800fab4:	fa12 f288 	uxtah	r2, r2, r8
            col_a.x1 = x_act;
 800fab8:	f8ad 8088 	strh.w	r8, [sp, #136]	; 0x88
            col_a.x2 = col_a.x1 + col_w - 1;
 800fabc:	b212      	sxth	r2, r2
            if(col_a.x2 < clip_area.x1) continue;
 800fabe:	4291      	cmp	r1, r2
            col_a.x2 = col_a.x1 + col_w - 1;
 800fac0:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
            if(col_a.x2 < clip_area.x1) continue;
 800fac4:	dc36      	bgt.n	800fb34 <lv_chart_event+0xb78>
            if(col_a.x1 > clip_area.x2) break;
 800fac6:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
    for(i = 0; i < chart->point_cnt; i++) {
 800faca:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
            if(col_a.x1 > clip_area.x2) break;
 800face:	4541      	cmp	r1, r8
 800fad0:	da01      	bge.n	800fad6 <lv_chart_event+0xb1a>
    for(i = 0; i < chart->point_cnt; i++) {
 800fad2:	3401      	adds	r4, #1
 800fad4:	e7bd      	b.n	800fa52 <lv_chart_event+0xa96>
            col_dsc.bg_color = ser->color;
 800fad6:	8929      	ldrh	r1, [r5, #8]
            lv_coord_t p_act = (start_point + i) % chart->point_cnt;
 800fad8:	443b      	add	r3, r7
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 800fada:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
            col_dsc.bg_color = ser->color;
 800fade:	f8ad 10c4 	strh.w	r1, [sp, #196]	; 0xc4
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800fae2:	7b28      	ldrb	r0, [r5, #12]
 800fae4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800fae8:	f3c0 1000 	ubfx	r0, r0, #4, #1
            lv_coord_t p_act = (start_point + i) % chart->point_cnt;
 800faec:	fb93 f1f2 	sdiv	r1, r3, r2
 800faf0:	fb02 3311 	mls	r3, r2, r1, r3
 800faf4:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800faf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fafa:	b21b      	sxth	r3, r3
 800fafc:	f9b0 e06c 	ldrsh.w	lr, [r0, #108]	; 0x6c
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800fb00:	f9b0 0070 	ldrsh.w	r0, [r0, #112]	; 0x70
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800fb04:	f93c 1013 	ldrsh.w	r1, [ip, r3, lsl #1]
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800fb08:	eba0 000e 	sub.w	r0, r0, lr
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800fb0c:	eba1 010e 	sub.w	r1, r1, lr
 800fb10:	4351      	muls	r1, r2
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 800fb12:	f8bb 2016 	ldrh.w	r2, [fp, #22]
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800fb16:	fb91 f1f0 	sdiv	r1, r1, r0
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 800fb1a:	4442      	add	r2, r8
 800fb1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb20:	4442      	add	r2, r8
 800fb22:	1a52      	subs	r2, r2, r1
 800fb24:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800fb28:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fb2c:	f93c 1013 	ldrsh.w	r1, [ip, r3, lsl #1]
 800fb30:	4291      	cmp	r1, r2
 800fb32:	d10a      	bne.n	800fb4a <lv_chart_event+0xb8e>
            x_act += col_w + ser_gap;
 800fb34:	e9dd 830c 	ldrd	r8, r3, [sp, #48]	; 0x30
 800fb38:	4498      	add	r8, r3
 800fb3a:	fa0f f888 	sxth.w	r8, r8
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fb3e:	4629      	mov	r1, r5
 800fb40:	9806      	ldr	r0, [sp, #24]
 800fb42:	f015 f801 	bl	8024b48 <_lv_ll_get_prev>
 800fb46:	4605      	mov	r5, r0
 800fb48:	e7a3      	b.n	800fa92 <lv_chart_event+0xad6>
                part_draw_dsc.draw_area = &col_a;
 800fb4a:	f10d 0988 	add.w	r9, sp, #136	; 0x88
                part_draw_dsc.rect_dsc = &col_dsc;
 800fb4e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
                part_draw_dsc.sub_part_ptr = ser;
 800fb52:	954f      	str	r5, [sp, #316]	; 0x13c
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fb54:	211a      	movs	r1, #26
                part_draw_dsc.draw_area = &col_a;
 800fb56:	f8cd 9104 	str.w	r9, [sp, #260]	; 0x104
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fb5a:	4658      	mov	r0, fp
                part_draw_dsc.rect_dsc = &col_dsc;
 800fb5c:	f8cd 8108 	str.w	r8, [sp, #264]	; 0x108
                part_draw_dsc.value = ser->y_points[p_act];
 800fb60:	686a      	ldr	r2, [r5, #4]
 800fb62:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fb66:	aa3e      	add	r2, sp, #248	; 0xf8
                part_draw_dsc.value = ser->y_points[p_act];
 800fb68:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fb6a:	f7f4 fdeb 	bl	8004744 <lv_event_send>
                lv_draw_rect(draw_ctx, &col_dsc, &col_a);
 800fb6e:	464a      	mov	r2, r9
 800fb70:	4641      	mov	r1, r8
 800fb72:	4650      	mov	r0, sl
 800fb74:	f00f fc4b 	bl	801f40e <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800fb78:	aa3e      	add	r2, sp, #248	; 0xf8
 800fb7a:	211b      	movs	r1, #27
 800fb7c:	4658      	mov	r0, fp
 800fb7e:	f7f4 fde1 	bl	8004744 <lv_event_send>
 800fb82:	e7d7      	b.n	800fb34 <lv_chart_event+0xb78>
            else if(chart->type == LV_CHART_TYPE_SCATTER) draw_series_scatter(obj, draw_ctx);
 800fb84:	2b03      	cmp	r3, #3
 800fb86:	f47f ac28 	bne.w	800f3da <lv_chart_event+0x41e>
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 800fb8a:	ac1c      	add	r4, sp, #112	; 0x70
 800fb8c:	f8da 2008 	ldr.w	r2, [sl, #8]
 800fb90:	9902      	ldr	r1, [sp, #8]
 800fb92:	4620      	mov	r0, r4
 800fb94:	f014 fba1 	bl	80242da <_lv_area_intersect>
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	f43f ac1e 	beq.w	800f3da <lv_chart_event+0x41e>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800fb9e:	f8da 3008 	ldr.w	r3, [sl, #8]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800fba2:	4658      	mov	r0, fp
    draw_ctx->clip_area = &clip_area;
 800fba4:	f8ca 4008 	str.w	r4, [sl, #8]
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800fba8:	f647 79ff 	movw	r9, #32767	; 0x7fff
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800fbac:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800fbae:	f013 fbf0 	bl	8023392 <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800fbb2:	4639      	mov	r1, r7
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800fbb4:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800fbb6:	4658      	mov	r0, fp
 800fbb8:	f013 fba5 	bl	8023306 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800fbbc:	4639      	mov	r1, r7
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800fbbe:	4680      	mov	r8, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800fbc0:	4658      	mov	r0, fp
 800fbc2:	f013 fbb2 	bl	802332a <lv_obj_get_style_pad_top>
 800fbc6:	4606      	mov	r6, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800fbc8:	4658      	mov	r0, fp
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 800fbca:	b2a5      	uxth	r5, r4
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800fbcc:	f00c fe72 	bl	801c8b4 <lv_obj_get_content_width>
 800fbd0:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 800fbd4:	fa18 f484 	uxtah	r4, r8, r4
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800fbd8:	4435      	add	r5, r6
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800fbda:	4343      	muls	r3, r0
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800fbdc:	4658      	mov	r0, fp
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800fbde:	f343 230f 	sbfx	r3, r3, #8, #16
 800fbe2:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800fbe4:	f00c fe7c 	bl	801c8e0 <lv_obj_get_content_height>
 800fbe8:	f8bb 3086 	ldrh.w	r3, [fp, #134]	; 0x86
 800fbec:	4358      	muls	r0, r3
 800fbee:	1203      	asrs	r3, r0, #8
 800fbf0:	9307      	str	r3, [sp, #28]
 800fbf2:	f340 230f 	sbfx	r3, r0, #8, #16
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 800fbf6:	4658      	mov	r0, fp
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800fbf8:	9308      	str	r3, [sp, #32]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 800fbfa:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800fbfe:	441c      	add	r4, r3
 800fc00:	f7f6 f830 	bl	8005c64 <lv_obj_get_scroll_left>
 800fc04:	b2a4      	uxth	r4, r4
 800fc06:	1a24      	subs	r4, r4, r0
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800fc08:	4658      	mov	r0, fp
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 800fc0a:	b2a3      	uxth	r3, r4
 800fc0c:	9309      	str	r3, [sp, #36]	; 0x24
 800fc0e:	b223      	sxth	r3, r4
 800fc10:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800fc12:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 800fc16:	441d      	add	r5, r3
 800fc18:	f00d f9df 	bl	801cfda <lv_obj_get_scroll_top>
 800fc1c:	b2ad      	uxth	r5, r5
 800fc1e:	1a2d      	subs	r5, r5, r0
    lv_draw_line_dsc_init(&line_dsc_default);
 800fc20:	a822      	add	r0, sp, #136	; 0x88
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800fc22:	b2ab      	uxth	r3, r5
 800fc24:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_draw_line_dsc_init(&line_dsc_default);
 800fc26:	f00e fec2 	bl	801e9ae <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 800fc2a:	aa22      	add	r2, sp, #136	; 0x88
 800fc2c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800fc30:	4658      	mov	r0, fp
 800fc32:	f00c fb4d 	bl	801c2d0 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 800fc36:	a830      	add	r0, sp, #192	; 0xc0
 800fc38:	f7f8 feb4 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 800fc3c:	aa30      	add	r2, sp, #192	; 0xc0
 800fc3e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800fc42:	4658      	mov	r0, fp
 800fc44:	f00c f958 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 800fc48:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800fc4c:	4658      	mov	r0, fp
 800fc4e:	f013 fb60 	bl	8023312 <lv_obj_get_style_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800fc52:	2204      	movs	r2, #4
 800fc54:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800fc58:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800fc5c:	f340 034f 	sbfx	r3, r0, #1, #16
 800fc60:	4658      	mov	r0, fp
 800fc62:	9303      	str	r3, [sp, #12]
 800fc64:	f00d ff40 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 800fc68:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 800fc6c:	fa03 f080 	sxtah	r0, r3, r0
 800fc70:	1043      	asrs	r3, r0, #1
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fc72:	f10b 0024 	add.w	r0, fp, #36	; 0x24
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 800fc76:	9304      	str	r3, [sp, #16]
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 800fc78:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 800fc7c:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800fc80:	428a      	cmp	r2, r1
 800fc82:	bfa8      	it	ge
 800fc84:	460a      	movge	r2, r1
 800fc86:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 800fc8a:	b212      	sxth	r2, r2
 800fc8c:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 800fc90:	bfc2      	ittt	gt
 800fc92:	f89d 2091 	ldrbgt.w	r2, [sp, #145]	; 0x91
 800fc96:	f042 0210 	orrgt.w	r2, r2, #16
 800fc9a:	f88d 2091 	strbgt.w	r2, [sp, #145]	; 0x91
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 800fc9e:	2b01      	cmp	r3, #1
 800fca0:	bf02      	ittt	eq
 800fca2:	f89d 3091 	ldrbeq.w	r3, [sp, #145]	; 0x91
 800fca6:	f043 0310 	orreq.w	r3, r3, #16
 800fcaa:	f88d 3091 	strbeq.w	r3, [sp, #145]	; 0x91
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fcae:	f014 ff44 	bl	8024b3a <_lv_ll_get_tail>
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	b914      	cbnz	r4, 800fcbc <lv_chart_event+0xd00>
    draw_ctx->clip_area = clip_area_ori;
 800fcb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fcb8:	f7ff bb8d 	b.w	800f3d6 <lv_chart_event+0x41a>
        if(ser->hidden) continue;
 800fcbc:	7b25      	ldrb	r5, [r4, #12]
 800fcbe:	f015 0501 	ands.w	r5, r5, #1
 800fcc2:	d007      	beq.n	800fcd4 <lv_chart_event+0xd18>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fcc4:	4621      	mov	r1, r4
 800fcc6:	9806      	ldr	r0, [sp, #24]
 800fcc8:	f014 ff3e 	bl	8024b48 <_lv_ll_get_prev>
 800fccc:	4604      	mov	r4, r0
 800fcce:	e7f1      	b.n	800fcb4 <lv_chart_event+0xcf8>
 800fcd0:	08028ee8 	.word	0x08028ee8
        line_dsc_default.color = ser->color;
 800fcd4:	8923      	ldrh	r3, [r4, #8]
 800fcd6:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        point_dsc_default.bg_color = ser->color;
 800fcda:	8923      	ldrh	r3, [r4, #8]
 800fcdc:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800fce0:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 800fce4:	071e      	lsls	r6, r3, #28
        p1.x = x_ofs;
 800fce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800fce8:	bf58      	it	pl
 800fcea:	f9b4 500a 	ldrshpl.w	r5, [r4, #10]
        p1.x = x_ofs;
 800fcee:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        p2.x = x_ofs;
 800fcf2:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        if(ser->y_points[p_act] != LV_CHART_POINT_CNT_DEF) {
 800fcf6:	6863      	ldr	r3, [r4, #4]
 800fcf8:	f933 3015 	ldrsh.w	r3, [r3, r5, lsl #1]
 800fcfc:	2b0a      	cmp	r3, #10
 800fcfe:	d07f      	beq.n	800fe00 <lv_chart_event+0xe44>
            p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 800fd00:	7b23      	ldrb	r3, [r4, #12]
 800fd02:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fd06:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800fd0a:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 800fd0e:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 800fd12:	6823      	ldr	r3, [r4, #0]
 800fd14:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 800fd18:	9b05      	ldr	r3, [sp, #20]
 800fd1a:	9300      	str	r3, [sp, #0]
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	f014 ffb1 	bl	8024c84 <lv_map>
            p2.x += x_ofs;
 800fd22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd24:	4418      	add	r0, r3
 800fd26:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
            p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 800fd2a:	7b23      	ldrb	r3, [r4, #12]
 800fd2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fd30:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800fd34:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 800fd38:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 800fd3c:	6863      	ldr	r3, [r4, #4]
 800fd3e:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 800fd42:	9b08      	ldr	r3, [sp, #32]
 800fd44:	9300      	str	r3, [sp, #0]
 800fd46:	2300      	movs	r3, #0
 800fd48:	f014 ff9c 	bl	8024c84 <lv_map>
            p2.y += y_ofs;
 800fd4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd4e:	9a07      	ldr	r2, [sp, #28]
 800fd50:	4413      	add	r3, r2
 800fd52:	1a18      	subs	r0, r3, r0
 800fd54:	b200      	sxth	r0, r0
 800fd56:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800fd5a:	4651      	mov	r1, sl
 800fd5c:	a83e      	add	r0, sp, #248	; 0xf8
        lv_coord_t p_act = start_point;
 800fd5e:	46a8      	mov	r8, r5
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800fd60:	f00c fbc0 	bl	801c4e4 <lv_obj_draw_dsc_init>
        part_draw_dsc.part = LV_PART_ITEMS;
 800fd64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
                p2.y += y_ofs;
 800fd68:	9a07      	ldr	r2, [sp, #28]
        for(i = 0; i < chart->point_cnt; i++) {
 800fd6a:	2600      	movs	r6, #0
        part_draw_dsc.part = LV_PART_ITEMS;
 800fd6c:	934b      	str	r3, [sp, #300]	; 0x12c
        part_draw_dsc.class_p = MY_CLASS;
 800fd6e:	4b70      	ldr	r3, [pc, #448]	; (800ff30 <lv_chart_event+0xf74>)
        part_draw_dsc.sub_part_ptr = ser;
 800fd70:	944f      	str	r4, [sp, #316]	; 0x13c
        part_draw_dsc.class_p = MY_CLASS;
 800fd72:	933f      	str	r3, [sp, #252]	; 0xfc
        part_draw_dsc.type = LV_CHART_DRAW_PART_LINE_AND_POINT;
 800fd74:	2303      	movs	r3, #3
 800fd76:	9340      	str	r3, [sp, #256]	; 0x100
        part_draw_dsc.line_dsc = &line_dsc_default;
 800fd78:	ab22      	add	r3, sp, #136	; 0x88
 800fd7a:	9344      	str	r3, [sp, #272]	; 0x110
        part_draw_dsc.rect_dsc = &point_dsc_default;
 800fd7c:	ab30      	add	r3, sp, #192	; 0xc0
 800fd7e:	9342      	str	r3, [sp, #264]	; 0x108
                p2.y += y_ofs;
 800fd80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd82:	4413      	add	r3, r2
 800fd84:	930e      	str	r3, [sp, #56]	; 0x38
 800fd86:	b2b3      	uxth	r3, r6
        for(i = 0; i < chart->point_cnt; i++) {
 800fd88:	b2b2      	uxth	r2, r6
 800fd8a:	930c      	str	r3, [sp, #48]	; 0x30
 800fd8c:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d83b      	bhi.n	800fe0c <lv_chart_event+0xe50>
        if(i == chart->point_cnt) {
 800fd94:	d196      	bne.n	800fcc4 <lv_chart_event+0xd08>
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800fd96:	6863      	ldr	r3, [r4, #4]
 800fd98:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
 800fd9c:	454b      	cmp	r3, r9
 800fd9e:	d091      	beq.n	800fcc4 <lv_chart_event+0xd08>
                point_area.x1 = p2.x - point_w;
 800fda0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
                part_draw_dsc.id = i - 1;
 800fda4:	b2b6      	uxth	r6, r6
                point_area.x1 = p2.x - point_w;
 800fda6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
                part_draw_dsc.draw_area = &point_area;
 800fdaa:	ad1f      	add	r5, sp, #124	; 0x7c
                part_draw_dsc.id = i - 1;
 800fdac:	3e01      	subs	r6, #1
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fdae:	4658      	mov	r0, fp
                point_area.x1 = p2.x - point_w;
 800fdb0:	1a99      	subs	r1, r3, r2
                point_area.x2 = p2.x + point_w;
 800fdb2:	4413      	add	r3, r2
                point_area.y1 = p2.y - point_h;
 800fdb4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                point_area.x2 = p2.x + point_w;
 800fdb8:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
                point_area.y1 = p2.y - point_h;
 800fdbc:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
                point_area.x1 = p2.x - point_w;
 800fdc0:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
                point_area.y1 = p2.y - point_h;
 800fdc4:	1a99      	subs	r1, r3, r2
                point_area.y2 = p2.y + point_h;
 800fdc6:	4413      	add	r3, r2
                part_draw_dsc.id = i - 1;
 800fdc8:	964c      	str	r6, [sp, #304]	; 0x130
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fdca:	aa3e      	add	r2, sp, #248	; 0xf8
                point_area.y2 = p2.y + point_h;
 800fdcc:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                part_draw_dsc.p1 = NULL;
 800fdd0:	2300      	movs	r3, #0
                point_area.y1 = p2.y - point_h;
 800fdd2:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fdd6:	211a      	movs	r1, #26
                part_draw_dsc.draw_area = &point_area;
 800fdd8:	9541      	str	r5, [sp, #260]	; 0x104
                part_draw_dsc.p2 = NULL;
 800fdda:	e9cd 3347 	strd	r3, r3, [sp, #284]	; 0x11c
                part_draw_dsc.value = ser->y_points[p_act];
 800fdde:	6863      	ldr	r3, [r4, #4]
 800fde0:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
 800fde4:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fde6:	f7f4 fcad 	bl	8004744 <lv_event_send>
                lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 800fdea:	462a      	mov	r2, r5
 800fdec:	a930      	add	r1, sp, #192	; 0xc0
 800fdee:	4650      	mov	r0, sl
 800fdf0:	f00f fb0d 	bl	801f40e <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800fdf4:	aa3e      	add	r2, sp, #248	; 0xf8
 800fdf6:	211b      	movs	r1, #27
 800fdf8:	4658      	mov	r0, fp
 800fdfa:	f7f4 fca3 	bl	8004744 <lv_event_send>
 800fdfe:	e761      	b.n	800fcc4 <lv_chart_event+0xd08>
            p2.x = LV_COORD_MIN;
 800fe00:	f24e 0301 	movw	r3, #57345	; 0xe001
 800fe04:	484b      	ldr	r0, [pc, #300]	; (800ff34 <lv_chart_event+0xf78>)
 800fe06:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.y = LV_COORD_MIN;
 800fe0a:	e7a4      	b.n	800fd56 <lv_chart_event+0xd9a>
            p1.x = p2.x;
 800fe0c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            p_act = (start_point + i) % chart->point_cnt;
 800fe0e:	fa15 f786 	uxtah	r7, r5, r6
            p1.x = p2.x;
 800fe12:	9218      	str	r2, [sp, #96]	; 0x60
            p_act = (start_point + i) % chart->point_cnt;
 800fe14:	b2b2      	uxth	r2, r6
 800fe16:	920f      	str	r2, [sp, #60]	; 0x3c
 800fe18:	fb97 f2f3 	sdiv	r2, r7, r3
 800fe1c:	fb03 7712 	mls	r7, r3, r2, r7
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800fe20:	6863      	ldr	r3, [r4, #4]
            p_act = (start_point + i) % chart->point_cnt;
 800fe22:	b23f      	sxth	r7, r7
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800fe24:	f933 0017 	ldrsh.w	r0, [r3, r7, lsl #1]
 800fe28:	4548      	cmp	r0, r9
 800fe2a:	d07d      	beq.n	800ff28 <lv_chart_event+0xf6c>
                p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 800fe2c:	7b23      	ldrb	r3, [r4, #12]
 800fe2e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fe32:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800fe36:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 800fe3a:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 800fe3e:	9b08      	ldr	r3, [sp, #32]
 800fe40:	9300      	str	r3, [sp, #0]
 800fe42:	2300      	movs	r3, #0
 800fe44:	f014 ff1e 	bl	8024c84 <lv_map>
                p2.y += y_ofs;
 800fe48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe4a:	1a18      	subs	r0, r3, r0
 800fe4c:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
                p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 800fe50:	7b23      	ldrb	r3, [r4, #12]
 800fe52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fe56:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800fe5a:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 800fe5e:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 800fe62:	6823      	ldr	r3, [r4, #0]
 800fe64:	f933 0017 	ldrsh.w	r0, [r3, r7, lsl #1]
 800fe68:	9b05      	ldr	r3, [sp, #20]
 800fe6a:	9300      	str	r3, [sp, #0]
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	f014 ff09 	bl	8024c84 <lv_map>
                p2.x += x_ofs;
 800fe72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe74:	4418      	add	r0, r3
            if(i != 0) {
 800fe76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                p2.x += x_ofs;
 800fe78:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
            if(i != 0) {
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d053      	beq.n	800ff28 <lv_chart_event+0xf6c>
                point_area.x1 = p1.x - point_w;
 800fe80:	f8bd 200c 	ldrh.w	r2, [sp, #12]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fe84:	4658      	mov	r0, fp
                point_area.x1 = p1.x - point_w;
 800fe86:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800fe8a:	1a99      	subs	r1, r3, r2
                point_area.x2 = p1.x + point_w;
 800fe8c:	4413      	add	r3, r2
                point_area.y1 = p1.y - point_h;
 800fe8e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                point_area.x2 = p1.x + point_w;
 800fe92:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
                point_area.y1 = p1.y - point_h;
 800fe96:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
                point_area.x1 = p1.x - point_w;
 800fe9a:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
                point_area.y1 = p1.y - point_h;
 800fe9e:	1a99      	subs	r1, r3, r2
                point_area.y2 = p1.y + point_h;
 800fea0:	4413      	add	r3, r2
 800fea2:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                part_draw_dsc.id = i - 1;
 800fea6:	b2b3      	uxth	r3, r6
                point_area.y1 = p1.y - point_h;
 800fea8:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800feac:	211a      	movs	r1, #26
                part_draw_dsc.id = i - 1;
 800feae:	3b01      	subs	r3, #1
 800feb0:	934c      	str	r3, [sp, #304]	; 0x130
                part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800feb2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800feb6:	930c      	str	r3, [sp, #48]	; 0x30
 800feb8:	6863      	ldr	r3, [r4, #4]
                part_draw_dsc.value = ser->y_points[p_prev];
 800feba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800febc:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
                part_draw_dsc.draw_area = &point_area;
 800fec0:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
                part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800fec4:	454b      	cmp	r3, r9
 800fec6:	bf14      	ite	ne
 800fec8:	ab18      	addne	r3, sp, #96	; 0x60
 800feca:	2300      	moveq	r3, #0
 800fecc:	9347      	str	r3, [sp, #284]	; 0x11c
                part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 800fece:	6863      	ldr	r3, [r4, #4]
 800fed0:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
                part_draw_dsc.draw_area = &point_area;
 800fed4:	f8cd 8104 	str.w	r8, [sp, #260]	; 0x104
                part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 800fed8:	454b      	cmp	r3, r9
 800feda:	bf14      	ite	ne
 800fedc:	ab1a      	addne	r3, sp, #104	; 0x68
 800fede:	2300      	moveq	r3, #0
 800fee0:	9348      	str	r3, [sp, #288]	; 0x120
                part_draw_dsc.value = ser->y_points[p_prev];
 800fee2:	6863      	ldr	r3, [r4, #4]
 800fee4:	5e9b      	ldrsh	r3, [r3, r2]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fee6:	aa3e      	add	r2, sp, #248	; 0xf8
                part_draw_dsc.value = ser->y_points[p_prev];
 800fee8:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800feea:	f7f4 fc2b 	bl	8004744 <lv_event_send>
                if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800feee:	6863      	ldr	r3, [r4, #4]
 800fef0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fef2:	5e9a      	ldrsh	r2, [r3, r2]
 800fef4:	454a      	cmp	r2, r9
 800fef6:	d012      	beq.n	800ff1e <lv_chart_event+0xf62>
 800fef8:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 800fefc:	454b      	cmp	r3, r9
 800fefe:	d00e      	beq.n	800ff1e <lv_chart_event+0xf62>
                    lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 800ff00:	ab1a      	add	r3, sp, #104	; 0x68
 800ff02:	aa18      	add	r2, sp, #96	; 0x60
 800ff04:	a922      	add	r1, sp, #136	; 0x88
 800ff06:	4650      	mov	r0, sl
 800ff08:	f00e fd5e 	bl	801e9c8 <lv_draw_line>
                    if(point_w && point_h) {
 800ff0c:	9b03      	ldr	r3, [sp, #12]
 800ff0e:	b133      	cbz	r3, 800ff1e <lv_chart_event+0xf62>
 800ff10:	9b04      	ldr	r3, [sp, #16]
 800ff12:	b123      	cbz	r3, 800ff1e <lv_chart_event+0xf62>
                        lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 800ff14:	4642      	mov	r2, r8
 800ff16:	a930      	add	r1, sp, #192	; 0xc0
 800ff18:	4650      	mov	r0, sl
 800ff1a:	f00f fa78 	bl	801f40e <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800ff1e:	aa3e      	add	r2, sp, #248	; 0xf8
 800ff20:	211b      	movs	r1, #27
 800ff22:	4658      	mov	r0, fp
 800ff24:	f7f4 fc0e 	bl	8004744 <lv_event_send>
        for(i = 0; i < chart->point_cnt; i++) {
 800ff28:	3601      	adds	r6, #1
            p_act = (start_point + i) % chart->point_cnt;
 800ff2a:	46b8      	mov	r8, r7
 800ff2c:	e72b      	b.n	800fd86 <lv_chart_event+0xdca>
 800ff2e:	bf00      	nop
 800ff30:	08028ee8 	.word	0x08028ee8
 800ff34:	ffffe001 	.word	0xffffe001
    return memcpy(dst, src, len);
 800ff38:	220a      	movs	r2, #10
 800ff3a:	a91c      	add	r1, sp, #112	; 0x70
 800ff3c:	a81f      	add	r0, sp, #124	; 0x7c
 800ff3e:	f00a fc18 	bl	801a772 <memcpy>
 800ff42:	2238      	movs	r2, #56	; 0x38
 800ff44:	a922      	add	r1, sp, #136	; 0x88
 800ff46:	a830      	add	r0, sp, #192	; 0xc0
 800ff48:	f00a fc13 	bl	801a772 <memcpy>
        line_dsc_tmp.color = cursor->color;
 800ff4c:	88e3      	ldrh	r3, [r4, #6]
 800ff4e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        point_dsc_tmp.bg_color = cursor->color;
 800ff52:	88e3      	ldrh	r3, [r4, #6]
 800ff54:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        part_draw_dsc.p1 = &p1;
 800ff58:	ab16      	add	r3, sp, #88	; 0x58
 800ff5a:	9347      	str	r3, [sp, #284]	; 0x11c
        part_draw_dsc.p2 = &p2;
 800ff5c:	ab17      	add	r3, sp, #92	; 0x5c
 800ff5e:	9348      	str	r3, [sp, #288]	; 0x120
        if(cursor->pos_set) {
 800ff60:	7b63      	ldrb	r3, [r4, #13]
 800ff62:	07dd      	lsls	r5, r3, #31
 800ff64:	f140 808a 	bpl.w	801007c <lv_chart_event+0x10c0>
            cx = cursor->pos.x;
 800ff68:	f9b4 6000 	ldrsh.w	r6, [r4]
            cy = cursor->pos.y;
 800ff6c:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
        cy += obj->coords.y1;
 800ff70:	f8bb 2016 	ldrh.w	r2, [fp, #22]
        cx += obj->coords.x1;
 800ff74:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
        cy += obj->coords.y1;
 800ff78:	4415      	add	r5, r2
        cx += obj->coords.x1;
 800ff7a:	441e      	add	r6, r3
        cy += obj->coords.y1;
 800ff7c:	b2aa      	uxth	r2, r5
        cx += obj->coords.x1;
 800ff7e:	b2b1      	uxth	r1, r6
        cy += obj->coords.y1;
 800ff80:	b22d      	sxth	r5, r5
        cx += obj->coords.x1;
 800ff82:	b236      	sxth	r6, r6
        bool draw_point = point_w && point_h;
 800ff84:	2f00      	cmp	r7, #0
 800ff86:	f000 808a 	beq.w	801009e <lv_chart_event+0x10e2>
 800ff8a:	f1b8 0f00 	cmp.w	r8, #0
 800ff8e:	f000 8089 	beq.w	80100a4 <lv_chart_event+0x10e8>
            point_area.x1 = cx - point_w;
 800ff92:	b2b8      	uxth	r0, r7
        bool draw_point = point_w && point_h;
 800ff94:	f8dd 9008 	ldr.w	r9, [sp, #8]
            point_area.x1 = cx - point_w;
 800ff98:	eba1 0c00 	sub.w	ip, r1, r0
            point_area.x2 = cx + point_w;
 800ff9c:	4401      	add	r1, r0
 800ff9e:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
            point_area.y1 = cy - point_h;
 800ffa2:	fa1f f188 	uxth.w	r1, r8
            point_area.x1 = cx - point_w;
 800ffa6:	f8ad c068 	strh.w	ip, [sp, #104]	; 0x68
            point_area.y1 = cy - point_h;
 800ffaa:	1a50      	subs	r0, r2, r1
            point_area.y2 = cy + point_h;
 800ffac:	440a      	add	r2, r1
 800ffae:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
 800ffb2:	aa1a      	add	r2, sp, #104	; 0x68
            point_area.y1 = cy - point_h;
 800ffb4:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
            part_draw_dsc.draw_area = &point_area;
 800ffb8:	9241      	str	r2, [sp, #260]	; 0x104
        if(cursor->dir & LV_DIR_HOR) {
 800ffba:	7b22      	ldrb	r2, [r4, #12]
 800ffbc:	0790      	lsls	r0, r2, #30
 800ffbe:	d029      	beq.n	8010014 <lv_chart_event+0x1058>
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 800ffc0:	f012 0f01 	tst.w	r2, #1
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ffc4:	4658      	mov	r0, fp
            p1.y = cy;
 800ffc6:	f8ad 505a 	strh.w	r5, [sp, #90]	; 0x5a
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 800ffca:	bf08      	it	eq
 800ffcc:	4633      	moveq	r3, r6
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 800ffce:	0791      	lsls	r1, r2, #30
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ffd0:	aa3e      	add	r2, sp, #248	; 0xf8
 800ffd2:	f04f 011a 	mov.w	r1, #26
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 800ffd6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 800ffda:	bf54      	ite	pl
 800ffdc:	4633      	movpl	r3, r6
 800ffde:	f9bb 3018 	ldrshmi.w	r3, [fp, #24]
            p2.y = p1.y;
 800ffe2:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 800ffe6:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ffea:	f7f4 fbab 	bl	8004744 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc_tmp, &p1, &p2);
 800ffee:	ab17      	add	r3, sp, #92	; 0x5c
 800fff0:	aa16      	add	r2, sp, #88	; 0x58
 800fff2:	a91f      	add	r1, sp, #124	; 0x7c
 800fff4:	4650      	mov	r0, sl
 800fff6:	f00e fce7 	bl	801e9c8 <lv_draw_line>
            if(draw_point) {
 800fffa:	f1b9 0f00 	cmp.w	r9, #0
 800fffe:	d004      	beq.n	801000a <lv_chart_event+0x104e>
                lv_draw_rect(draw_ctx, &point_dsc_tmp, &point_area);
 8010000:	aa1a      	add	r2, sp, #104	; 0x68
 8010002:	a930      	add	r1, sp, #192	; 0xc0
 8010004:	4650      	mov	r0, sl
 8010006:	f00f fa02 	bl	801f40e <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801000a:	aa3e      	add	r2, sp, #248	; 0xf8
 801000c:	211b      	movs	r1, #27
 801000e:	4658      	mov	r0, fp
 8010010:	f7f4 fb98 	bl	8004744 <lv_event_send>
        if(cursor->dir & LV_DIR_VER) {
 8010014:	7b23      	ldrb	r3, [r4, #12]
 8010016:	f013 0f0c 	tst.w	r3, #12
 801001a:	d029      	beq.n	8010070 <lv_chart_event+0x10b4>
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 801001c:	075a      	lsls	r2, r3, #29
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801001e:	f04f 011a 	mov.w	r1, #26
 8010022:	4658      	mov	r0, fp
            p1.x = cx;
 8010024:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 8010028:	bf4c      	ite	mi
 801002a:	f9bb 2016 	ldrshmi.w	r2, [fp, #22]
 801002e:	462a      	movpl	r2, r5
            p2.y = cursor->dir & LV_DIR_BOTTOM ? obj->coords.y2 : cy;
 8010030:	071b      	lsls	r3, r3, #28
            p2.x = p1.x;
 8010032:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 8010036:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801003a:	aa3e      	add	r2, sp, #248	; 0xf8
            p2.y = cursor->dir & LV_DIR_BOTTOM ? obj->coords.y2 : cy;
 801003c:	bf48      	it	mi
 801003e:	f9bb 501a 	ldrshmi.w	r5, [fp, #26]
 8010042:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8010046:	f7f4 fb7d 	bl	8004744 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc_tmp, &p1, &p2);
 801004a:	ab17      	add	r3, sp, #92	; 0x5c
 801004c:	aa16      	add	r2, sp, #88	; 0x58
 801004e:	a91f      	add	r1, sp, #124	; 0x7c
 8010050:	4650      	mov	r0, sl
 8010052:	f00e fcb9 	bl	801e9c8 <lv_draw_line>
            if(draw_point) {
 8010056:	f1b9 0f00 	cmp.w	r9, #0
 801005a:	d004      	beq.n	8010066 <lv_chart_event+0x10aa>
                lv_draw_rect(draw_ctx, &point_dsc_tmp, &point_area);
 801005c:	aa1a      	add	r2, sp, #104	; 0x68
 801005e:	a930      	add	r1, sp, #192	; 0xc0
 8010060:	4650      	mov	r0, sl
 8010062:	f00f f9d4 	bl	801f40e <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8010066:	aa3e      	add	r2, sp, #248	; 0xf8
 8010068:	211b      	movs	r1, #27
 801006a:	4658      	mov	r0, fp
 801006c:	f7f4 fb6a 	bl	8004744 <lv_event_send>
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 8010070:	4621      	mov	r1, r4
 8010072:	9803      	ldr	r0, [sp, #12]
 8010074:	f014 fd68 	bl	8024b48 <_lv_ll_get_prev>
 8010078:	f7ff ba01 	b.w	800f47e <lv_chart_event+0x4c2>
            if(cursor->point_id == LV_CHART_POINT_NONE) continue;
 801007c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010080:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010084:	429a      	cmp	r2, r3
 8010086:	d0f3      	beq.n	8010070 <lv_chart_event+0x10b4>
            lv_chart_get_point_pos_by_id(obj, cursor->ser, cursor->point_id, &p);
 8010088:	ab1a      	add	r3, sp, #104	; 0x68
 801008a:	b292      	uxth	r2, r2
 801008c:	68a1      	ldr	r1, [r4, #8]
 801008e:	4658      	mov	r0, fp
 8010090:	f013 fa3f 	bl	8023512 <lv_chart_get_point_pos_by_id>
            cx = p.x;
 8010094:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	; 0x68
            cy = p.y;
 8010098:	f9bd 506a 	ldrsh.w	r5, [sp, #106]	; 0x6a
 801009c:	e768      	b.n	800ff70 <lv_chart_event+0xfb4>
        bool draw_point = point_w && point_h;
 801009e:	46b9      	mov	r9, r7
 80100a0:	463a      	mov	r2, r7
 80100a2:	e789      	b.n	800ffb8 <lv_chart_event+0xffc>
 80100a4:	46c1      	mov	r9, r8
 80100a6:	4642      	mov	r2, r8
 80100a8:	e786      	b.n	800ffb8 <lv_chart_event+0xffc>
 80100aa:	bf00      	nop

080100ac <lv_colorwheel_constructor>:

static void lv_colorwheel_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
    LV_UNUSED(class_p);
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;
    colorwheel->hsv.h = 0;
 80100ac:	4b11      	ldr	r3, [pc, #68]	; (80100f4 <lv_colorwheel_constructor+0x48>)
    colorwheel->hsv.v = 100;
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
    colorwheel->mode_fixed = 0;
    colorwheel->last_click_time = 0;
    colorwheel->last_change_time = 0;
    colorwheel->knob.recolor = create_knob_recolor;
 80100ae:	4a12      	ldr	r2, [pc, #72]	; (80100f8 <lv_colorwheel_constructor+0x4c>)
{
 80100b0:	b510      	push	{r4, lr}
    colorwheel->hsv.h = 0;
 80100b2:	624b      	str	r3, [r1, #36]	; 0x24
{
 80100b4:	460c      	mov	r4, r1
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
 80100b6:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
    colorwheel->knob.recolor = create_knob_recolor;
 80100ba:	7812      	ldrb	r2, [r2, #0]

    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 80100bc:	4620      	mov	r0, r4
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
 80100be:	f023 0307 	bic.w	r3, r3, #7
 80100c2:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    colorwheel->last_click_time = 0;
 80100c6:	2300      	movs	r3, #0
    colorwheel->last_change_time = 0;
 80100c8:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
    colorwheel->knob.recolor = create_knob_recolor;
 80100cc:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80100d0:	f362 0300 	bfi	r3, r2, #0, #1
 80100d4:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 80100d8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80100dc:	f00b fc45 	bl	801b96a <lv_obj_add_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 80100e0:	4620      	mov	r0, r4
 80100e2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80100e6:	f00b fc76 	bl	801b9d6 <lv_obj_clear_flag>
    refr_knob_pos(obj);
 80100ea:	4620      	mov	r0, r4
}
 80100ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    refr_knob_pos(obj);
 80100f0:	f013 bb69 	b.w	80237c6 <refr_knob_pos>
 80100f4:	64640000 	.word	0x64640000
 80100f8:	24010e34 	.word	0x24010e34

080100fc <lv_colorwheel_event>:

    return knob_area;
}

static void lv_colorwheel_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80100fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    /*Call the ancestor's event handler*/
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8010100:	48c4      	ldr	r0, [pc, #784]	; (8010414 <lv_colorwheel_event+0x318>)
{
 8010102:	b0a7      	sub	sp, #156	; 0x9c
 8010104:	460d      	mov	r5, r1
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8010106:	f00b f892 	bl	801b22e <lv_obj_event_base>

    if(res != LV_RES_OK) return;
 801010a:	2801      	cmp	r0, #1
 801010c:	d13a      	bne.n	8010184 <lv_colorwheel_event+0x88>

    lv_event_code_t code = lv_event_get_code(e);
 801010e:	4628      	mov	r0, r5
 8010110:	f00b f8a7 	bl	801b262 <lv_event_get_code>
 8010114:	4607      	mov	r7, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8010116:	4628      	mov	r0, r5
 8010118:	f00b f89f 	bl	801b25a <lv_event_get_target>
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;

    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801011c:	2f13      	cmp	r7, #19
    lv_obj_t * obj = lv_event_get_target(e);
 801011e:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8010120:	d133      	bne.n	801018a <lv_colorwheel_event+0x8e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8010122:	2212      	movs	r2, #18
 8010124:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8010128:	f00d fcde 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801012c:	463a      	mov	r2, r7
    return (lv_coord_t)v.num;
 801012e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8010132:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8010136:	4620      	mov	r0, r4
 8010138:	f00d fcd6 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801013c:	2210      	movs	r2, #16
    return (lv_coord_t)v.num;
 801013e:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8010140:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8010144:	4620      	mov	r0, r4
 8010146:	f00d fccf 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801014a:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 801014c:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801014e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8010152:	4620      	mov	r0, r4
 8010154:	f00d fcc8 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8010158:	b204      	sxth	r4, r0
        lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
        lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
        lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);

        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
        lv_coord_t * s = lv_event_get_param(e);
 801015a:	4628      	mov	r0, r5
 801015c:	f00b f885 	bl	801b26a <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
 8010160:	4546      	cmp	r6, r8
 8010162:	4633      	mov	r3, r6
        *s = LV_MAX(*s, knob_pad);
 8010164:	f9b0 2000 	ldrsh.w	r2, [r0]
        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
 8010168:	bfb8      	it	lt
 801016a:	4643      	movlt	r3, r8
 801016c:	42bb      	cmp	r3, r7
 801016e:	bfb8      	it	lt
 8010170:	463b      	movlt	r3, r7
 8010172:	42a3      	cmp	r3, r4
 8010174:	bfb8      	it	lt
 8010176:	4623      	movlt	r3, r4
 8010178:	3302      	adds	r3, #2
        *s = LV_MAX(*s, knob_pad);
 801017a:	b21b      	sxth	r3, r3
 801017c:	4293      	cmp	r3, r2
 801017e:	bfb8      	it	lt
 8010180:	4613      	movlt	r3, r2
 8010182:	8003      	strh	r3, [r0, #0]
    }
    else if(code == LV_EVENT_COVER_CHECK) {
        lv_cover_check_info_t * info = lv_event_get_param(e);
        if(info->res != LV_COVER_RES_MASKED) info->res = LV_COVER_RES_NOT_COVER;
    }
}
 8010184:	b027      	add	sp, #156	; 0x9c
 8010186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801018a:	2f15      	cmp	r7, #21
 801018c:	f200 80c2 	bhi.w	8010314 <lv_colorwheel_event+0x218>
 8010190:	2f0c      	cmp	r7, #12
 8010192:	f200 80a5 	bhi.w	80102e0 <lv_colorwheel_event+0x1e4>
 8010196:	2f01      	cmp	r7, #1
 8010198:	f000 814e 	beq.w	8010438 <lv_colorwheel_event+0x33c>
 801019c:	2f02      	cmp	r7, #2
 801019e:	d1f1      	bne.n	8010184 <lv_colorwheel_event+0x88>
        lv_indev_t * indev = lv_indev_get_act();
 80101a0:	f7f4 fb36 	bl	8004810 <lv_indev_get_act>
        if(indev == NULL) return;
 80101a4:	4606      	mov	r6, r0
 80101a6:	2800      	cmp	r0, #0
 80101a8:	d0ec      	beq.n	8010184 <lv_colorwheel_event+0x88>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80101aa:	f00b fa1a 	bl	801b5e2 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 80101ae:	2804      	cmp	r0, #4
 80101b0:	d002      	beq.n	80101b8 <lv_colorwheel_event+0xbc>
 80101b2:	2802      	cmp	r0, #2
 80101b4:	f040 817c 	bne.w	80104b0 <lv_colorwheel_event+0x3b4>
            p.x = obj->coords.x1 + lv_obj_get_width(obj) / 2;
 80101b8:	4620      	mov	r0, r4
 80101ba:	8aa5      	ldrh	r5, [r4, #20]
 80101bc:	f00c fb6e 	bl	801c89c <lv_obj_get_width>
 80101c0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80101c4:	eb05 0560 	add.w	r5, r5, r0, asr #1
            p.y = obj->coords.y1 + lv_obj_get_height(obj) / 2;
 80101c8:	4620      	mov	r0, r4
            p.x = obj->coords.x1 + lv_obj_get_width(obj) / 2;
 80101ca:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
            p.y = obj->coords.y1 + lv_obj_get_height(obj) / 2;
 80101ce:	8ae5      	ldrh	r5, [r4, #22]
 80101d0:	f00c fb6a 	bl	801c8a8 <lv_obj_get_height>
 80101d4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80101d8:	eb05 0560 	add.w	r5, r5, r0, asr #1
 80101dc:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
        lv_coord_t drag_limit = indev->driver->scroll_limit;
 80101e0:	6833      	ldr	r3, [r6, #0]
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 80101e2:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80101e6:	7e1a      	ldrb	r2, [r3, #24]
 80101e8:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 80101ec:	1a5b      	subs	r3, r3, r1
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	bfb8      	it	lt
 80101f2:	425b      	neglt	r3, r3
 80101f4:	4293      	cmp	r3, r2
 80101f6:	dc09      	bgt.n	801020c <lv_colorwheel_event+0x110>
           (LV_ABS(p.y - colorwheel->last_press_point.y) > drag_limit)) {
 80101f8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 80101fc:	f9b4 103a 	ldrsh.w	r1, [r4, #58]	; 0x3a
 8010200:	1a5b      	subs	r3, r3, r1
 8010202:	2b00      	cmp	r3, #0
 8010204:	bfb8      	it	lt
 8010206:	425b      	neglt	r3, r3
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 8010208:	429a      	cmp	r2, r3
 801020a:	da04      	bge.n	8010216 <lv_colorwheel_event+0x11a>
            colorwheel->last_change_time = lv_tick_get();
 801020c:	f013 ff9d 	bl	802414a <lv_tick_get>
 8010210:	6360      	str	r0, [r4, #52]	; 0x34
            colorwheel->last_press_point.x = p.x;
 8010212:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010214:	63a3      	str	r3, [r4, #56]	; 0x38
        p.x -= obj->coords.x1;
 8010216:	8aa2      	ldrh	r2, [r4, #20]
        uint16_t w = lv_obj_get_width(obj);
 8010218:	4620      	mov	r0, r4
        p.x -= obj->coords.x1;
 801021a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801021e:	1a9b      	subs	r3, r3, r2
 8010220:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        p.y -= obj->coords.y1;
 8010224:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8010228:	8ae2      	ldrh	r2, [r4, #22]
 801022a:	1a9b      	subs	r3, r3, r2
 801022c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        uint16_t w = lv_obj_get_width(obj);
 8010230:	f00c fb34 	bl	801c89c <lv_obj_get_width>
 8010234:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8010236:	2250      	movs	r2, #80	; 0x50
 8010238:	2100      	movs	r1, #0
 801023a:	4620      	mov	r0, r4
 801023c:	f00d fc54 	bl	801dae8 <lv_obj_get_style_prop>
        lv_coord_t r_in = w / 2;
 8010240:	f3c5 034e 	ubfx	r3, r5, #1, #15
        p.x -= r_in;
 8010244:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
        p.y -= r_in;
 8010248:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
        p.x -= r_in;
 801024c:	1ad2      	subs	r2, r2, r3
        p.y -= r_in;
 801024e:	1ac9      	subs	r1, r1, r3
        r_in -= cir_w;
 8010250:	1a1b      	subs	r3, r3, r0
        p.x -= r_in;
 8010252:	b212      	sxth	r2, r2
        r_in -= cir_w;
 8010254:	b29d      	uxth	r5, r3
 8010256:	b21b      	sxth	r3, r3
        p.x -= r_in;
 8010258:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        p.y -= r_in;
 801025c:	b209      	sxth	r1, r1
        if(r_in > LV_DPI_DEF / 2) {
 801025e:	2b41      	cmp	r3, #65	; 0x41
        p.y -= r_in;
 8010260:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
        if(r_in > LV_DPI_DEF / 2) {
 8010264:	dd09      	ble.n	801027a <lv_colorwheel_event+0x17e>
            lv_coord_t inner = cir_w / 2;
 8010266:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801026a:	fa03 f080 	sxtah	r0, r3, r0
            r_in -= inner;
 801026e:	eba5 0360 	sub.w	r3, r5, r0, asr #1
            if(r_in < LV_DPI_DEF / 2) r_in = LV_DPI_DEF / 2;
 8010272:	b21b      	sxth	r3, r3
 8010274:	2b41      	cmp	r3, #65	; 0x41
 8010276:	bfb8      	it	lt
 8010278:	2341      	movlt	r3, #65	; 0x41
        if(p.x * p.x + p.y * p.y < r_in * r_in) {
 801027a:	4349      	muls	r1, r1
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 801027c:	6b60      	ldr	r0, [r4, #52]	; 0x34
        if(p.x * p.x + p.y * p.y < r_in * r_in) {
 801027e:	435b      	muls	r3, r3
 8010280:	fb02 1202 	mla	r2, r2, r2, r1
 8010284:	429a      	cmp	r2, r3
 8010286:	f2c0 8118 	blt.w	80104ba <lv_colorwheel_event+0x3be>
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 801028a:	f013 ff66 	bl	802415a <lv_tick_elaps>
        angle = lv_atan2(p.x, p.y) % 360;
 801028e:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8010292:	f9bd 0048 	ldrsh.w	r0, [sp, #72]	; 0x48
 8010296:	f014 fc92 	bl	8024bbe <lv_atan2>
 801029a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801029e:	fbb0 f3f2 	udiv	r3, r0, r2
 80102a2:	fb03 0012 	mls	r0, r3, r2, r0
        hsv_cur = colorwheel->hsv;
 80102a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102a8:	9318      	str	r3, [sp, #96]	; 0x60
        angle = lv_atan2(p.x, p.y) % 360;
 80102aa:	b280      	uxth	r0, r0
        switch(colorwheel->mode) {
 80102ac:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80102b0:	f003 0303 	and.w	r3, r3, #3
 80102b4:	2b01      	cmp	r3, #1
 80102b6:	f000 8124 	beq.w	8010502 <lv_colorwheel_event+0x406>
 80102ba:	2b02      	cmp	r3, #2
 80102bc:	f000 8128 	beq.w	8010510 <lv_colorwheel_event+0x414>
 80102c0:	b90b      	cbnz	r3, 80102c6 <lv_colorwheel_event+0x1ca>
                hsv_cur.h = angle;
 80102c2:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 80102c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80102c8:	4620      	mov	r0, r4
 80102ca:	f013 faca 	bl	8023862 <lv_colorwheel_set_hsv>
 80102ce:	2800      	cmp	r0, #0
 80102d0:	f43f af58 	beq.w	8010184 <lv_colorwheel_event+0x88>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80102d4:	2200      	movs	r2, #0
 80102d6:	211c      	movs	r1, #28
 80102d8:	4620      	mov	r0, r4
 80102da:	f7f4 fa33 	bl	8004744 <lv_event_send>
            if(res != LV_RES_OK) return;
 80102de:	e751      	b.n	8010184 <lv_colorwheel_event+0x88>
 80102e0:	3f0d      	subs	r7, #13
 80102e2:	2f08      	cmp	r7, #8
 80102e4:	f63f af4e 	bhi.w	8010184 <lv_colorwheel_event+0x88>
 80102e8:	a301      	add	r3, pc, #4	; (adr r3, 80102f0 <lv_colorwheel_event+0x1f4>)
 80102ea:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80102ee:	bf00      	nop
 80102f0:	0801035f 	.word	0x0801035f
 80102f4:	08010185 	.word	0x08010185
 80102f8:	08010185 	.word	0x08010185
 80102fc:	08010185 	.word	0x08010185
 8010300:	0801051f 	.word	0x0801051f
 8010304:	08010855 	.word	0x08010855
 8010308:	08010185 	.word	0x08010185
 801030c:	08010185 	.word	0x08010185
 8010310:	08010539 	.word	0x08010539
 8010314:	2f29      	cmp	r7, #41	; 0x29
 8010316:	d007      	beq.n	8010328 <lv_colorwheel_event+0x22c>
 8010318:	2f2a      	cmp	r7, #42	; 0x2a
 801031a:	f47f af33 	bne.w	8010184 <lv_colorwheel_event+0x88>
}
 801031e:	b027      	add	sp, #156	; 0x9c
 8010320:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        refr_knob_pos(obj);
 8010324:	f013 ba4f 	b.w	80237c6 <refr_knob_pos>
        void * param = lv_event_get_param(e);
 8010328:	4628      	mov	r0, r5
 801032a:	f00a ff9e 	bl	801b26a <lv_event_get_param>
 801032e:	4605      	mov	r5, r0
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 8010330:	4620      	mov	r0, r4
 8010332:	f00c fab3 	bl	801c89c <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010336:	88ab      	ldrh	r3, [r5, #4]
 8010338:	882a      	ldrh	r2, [r5, #0]
 801033a:	3301      	adds	r3, #1
 801033c:	1a9b      	subs	r3, r3, r2
 801033e:	b21b      	sxth	r3, r3
 8010340:	4298      	cmp	r0, r3
 8010342:	d001      	beq.n	8010348 <lv_colorwheel_event+0x24c>
            refr_knob_pos(obj);
 8010344:	4620      	mov	r0, r4
 8010346:	e7ea      	b.n	801031e <lv_colorwheel_event+0x222>
           lv_obj_get_height(obj) != lv_area_get_height(param)) {
 8010348:	4620      	mov	r0, r4
 801034a:	f00c faad 	bl	801c8a8 <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801034e:	88eb      	ldrh	r3, [r5, #6]
 8010350:	886a      	ldrh	r2, [r5, #2]
 8010352:	3301      	adds	r3, #1
 8010354:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 8010356:	b21b      	sxth	r3, r3
 8010358:	4298      	cmp	r0, r3
 801035a:	d1f3      	bne.n	8010344 <lv_colorwheel_event+0x248>
 801035c:	e712      	b.n	8010184 <lv_colorwheel_event+0x88>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 801035e:	4628      	mov	r0, r5
 8010360:	f00a ff83 	bl	801b26a <lv_event_get_param>
 8010364:	6803      	ldr	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8010366:	f023 0202 	bic.w	r2, r3, #2
 801036a:	2a11      	cmp	r2, #17
 801036c:	d139      	bne.n	80103e2 <lv_colorwheel_event+0x2e6>
            hsv_cur = colorwheel->hsv;
 801036e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010370:	9318      	str	r3, [sp, #96]	; 0x60
            switch(colorwheel->mode) {
 8010372:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010376:	f003 0303 	and.w	r3, r3, #3
 801037a:	2b01      	cmp	r3, #1
 801037c:	d01b      	beq.n	80103b6 <lv_colorwheel_event+0x2ba>
 801037e:	2b02      	cmp	r3, #2
 8010380:	d024      	beq.n	80103cc <lv_colorwheel_event+0x2d0>
 8010382:	b94b      	cbnz	r3, 8010398 <lv_colorwheel_event+0x29c>
                    hsv_cur.h = (colorwheel->hsv.h + 1) % 360;
 8010384:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8010386:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801038a:	3301      	adds	r3, #1
 801038c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010390:	fb02 3311 	mls	r3, r2, r1, r3
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 8010394:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 8010398:	9918      	ldr	r1, [sp, #96]	; 0x60
 801039a:	4620      	mov	r0, r4
 801039c:	f013 fa61 	bl	8023862 <lv_colorwheel_set_hsv>
 80103a0:	2800      	cmp	r0, #0
 80103a2:	f43f aeef 	beq.w	8010184 <lv_colorwheel_event+0x88>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80103a6:	2200      	movs	r2, #0
 80103a8:	211c      	movs	r1, #28
 80103aa:	4620      	mov	r0, r4
}
 80103ac:	b027      	add	sp, #156	; 0x9c
 80103ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80103b2:	f7f4 b9c7 	b.w	8004744 <lv_event_send>
                    hsv_cur.s = (colorwheel->hsv.s + 1) % 100;
 80103b6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80103ba:	2264      	movs	r2, #100	; 0x64
 80103bc:	3301      	adds	r3, #1
 80103be:	fbb3 f1f2 	udiv	r1, r3, r2
 80103c2:	fb02 3311 	mls	r3, r2, r1, r3
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 80103c6:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                    break;
 80103ca:	e7e5      	b.n	8010398 <lv_colorwheel_event+0x29c>
                    hsv_cur.v = (colorwheel->hsv.v + 1) % 100;
 80103cc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80103d0:	2264      	movs	r2, #100	; 0x64
 80103d2:	3301      	adds	r3, #1
 80103d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80103d8:	fb02 3311 	mls	r3, r2, r1, r3
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 80103dc:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
                    break;
 80103e0:	e7da      	b.n	8010398 <lv_colorwheel_event+0x29c>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 80103e2:	2b14      	cmp	r3, #20
 80103e4:	d002      	beq.n	80103ec <lv_colorwheel_event+0x2f0>
 80103e6:	2b12      	cmp	r3, #18
 80103e8:	f47f aecc 	bne.w	8010184 <lv_colorwheel_event+0x88>
            hsv_cur = colorwheel->hsv;
 80103ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103ee:	9318      	str	r3, [sp, #96]	; 0x60
            switch(colorwheel->mode) {
 80103f0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80103f4:	f003 0303 	and.w	r3, r3, #3
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d00d      	beq.n	8010418 <lv_colorwheel_event+0x31c>
 80103fc:	2b02      	cmp	r3, #2
 80103fe:	d013      	beq.n	8010428 <lv_colorwheel_event+0x32c>
 8010400:	2b00      	cmp	r3, #0
 8010402:	d1c9      	bne.n	8010398 <lv_colorwheel_event+0x29c>
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 8010404:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8010406:	b113      	cbz	r3, 801040e <lv_colorwheel_event+0x312>
 8010408:	3b01      	subs	r3, #1
 801040a:	b29b      	uxth	r3, r3
 801040c:	e7c2      	b.n	8010394 <lv_colorwheel_event+0x298>
 801040e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8010412:	e7bf      	b.n	8010394 <lv_colorwheel_event+0x298>
 8010414:	08028f04 	.word	0x08028f04
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 8010418:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801041c:	b113      	cbz	r3, 8010424 <lv_colorwheel_event+0x328>
 801041e:	3b01      	subs	r3, #1
 8010420:	b2db      	uxtb	r3, r3
 8010422:	e7d0      	b.n	80103c6 <lv_colorwheel_event+0x2ca>
 8010424:	2364      	movs	r3, #100	; 0x64
 8010426:	e7ce      	b.n	80103c6 <lv_colorwheel_event+0x2ca>
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 8010428:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801042c:	b113      	cbz	r3, 8010434 <lv_colorwheel_event+0x338>
 801042e:	3b01      	subs	r3, #1
 8010430:	b2db      	uxtb	r3, r3
 8010432:	e7d3      	b.n	80103dc <lv_colorwheel_event+0x2e0>
 8010434:	2364      	movs	r3, #100	; 0x64
 8010436:	e7d1      	b.n	80103dc <lv_colorwheel_event+0x2e0>
        colorwheel->last_change_time = lv_tick_get();
 8010438:	f013 fe87 	bl	802414a <lv_tick_get>
 801043c:	6360      	str	r0, [r4, #52]	; 0x34
        lv_indev_get_point(lv_indev_get_act(), &colorwheel->last_press_point);
 801043e:	f7f4 f9e7 	bl	8004810 <lv_indev_get_act>
 8010442:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8010446:	f00b f8dd 	bl	801b604 <lv_indev_get_point>
}

static lv_res_t double_click_reset(lv_obj_t * obj)
{
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;
    lv_indev_t * indev = lv_indev_get_act();
 801044a:	f7f4 f9e1 	bl	8004810 <lv_indev_get_act>
 801044e:	4605      	mov	r5, r0
    /*Double clicked? Use long press time as double click time out*/
    if(lv_tick_elaps(colorwheel->last_click_time) < indev->driver->long_press_time) {
 8010450:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010452:	f013 fe82 	bl	802415a <lv_tick_elaps>
 8010456:	682b      	ldr	r3, [r5, #0]
 8010458:	8b9b      	ldrh	r3, [r3, #28]
 801045a:	4298      	cmp	r0, r3
 801045c:	d21c      	bcs.n	8010498 <lv_colorwheel_event+0x39c>
        lv_color_hsv_t hsv_cur;
        hsv_cur = colorwheel->hsv;
 801045e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010460:	9318      	str	r3, [sp, #96]	; 0x60

        switch(colorwheel->mode) {
 8010462:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010466:	f003 0303 	and.w	r3, r3, #3
 801046a:	2b01      	cmp	r3, #1
 801046c:	d018      	beq.n	80104a0 <lv_colorwheel_event+0x3a4>
 801046e:	2b02      	cmp	r3, #2
 8010470:	d01a      	beq.n	80104a8 <lv_colorwheel_event+0x3ac>
 8010472:	b90b      	cbnz	r3, 8010478 <lv_colorwheel_event+0x37c>
            case LV_COLORWHEEL_MODE_HUE:
                hsv_cur.h = 0;
 8010474:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            case LV_COLORWHEEL_MODE_VALUE:
                hsv_cur.v = 100;
                break;
        }

        lv_indev_wait_release(indev);
 8010478:	4628      	mov	r0, r5
 801047a:	f00b f903 	bl	801b684 <lv_indev_wait_release>

        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 801047e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010480:	4620      	mov	r0, r4
 8010482:	f013 f9ee 	bl	8023862 <lv_colorwheel_set_hsv>
 8010486:	b138      	cbz	r0, 8010498 <lv_colorwheel_event+0x39c>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8010488:	2200      	movs	r2, #0
 801048a:	211c      	movs	r1, #28
 801048c:	4620      	mov	r0, r4
 801048e:	f7f4 f959 	bl	8004744 <lv_event_send>
            if(res != LV_RES_OK) return res;
 8010492:	2801      	cmp	r0, #1
 8010494:	f47f ae76 	bne.w	8010184 <lv_colorwheel_event+0x88>
        }
    }
    colorwheel->last_click_time = lv_tick_get();
 8010498:	f013 fe57 	bl	802414a <lv_tick_get>
 801049c:	6320      	str	r0, [r4, #48]	; 0x30

    return LV_RES_OK;
 801049e:	e671      	b.n	8010184 <lv_colorwheel_event+0x88>
                hsv_cur.s = 100;
 80104a0:	2364      	movs	r3, #100	; 0x64
 80104a2:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                break;
 80104a6:	e7e7      	b.n	8010478 <lv_colorwheel_event+0x37c>
                hsv_cur.v = 100;
 80104a8:	2364      	movs	r3, #100	; 0x64
 80104aa:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
                break;
 80104ae:	e7e3      	b.n	8010478 <lv_colorwheel_event+0x37c>
            lv_indev_get_point(indev, &p);
 80104b0:	a912      	add	r1, sp, #72	; 0x48
 80104b2:	4630      	mov	r0, r6
 80104b4:	f00b f8a6 	bl	801b604 <lv_indev_get_point>
 80104b8:	e692      	b.n	80101e0 <lv_colorwheel_event+0xe4>
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 80104ba:	f013 fe4e 	bl	802415a <lv_tick_elaps>
        if(!on_ring && diff > indev->driver->long_press_time && !colorwheel->mode_fixed) {
 80104be:	6833      	ldr	r3, [r6, #0]
 80104c0:	8b9b      	ldrh	r3, [r3, #28]
 80104c2:	4283      	cmp	r3, r0
 80104c4:	f4bf ae5e 	bcs.w	8010184 <lv_colorwheel_event+0x88>
 80104c8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80104cc:	075a      	lsls	r2, r3, #29
 80104ce:	f53f ae59 	bmi.w	8010184 <lv_colorwheel_event+0x88>
    colorwheel->mode = (colorwheel->mode + 1) % 3;
 80104d2:	f003 0203 	and.w	r2, r3, #3
 80104d6:	2103      	movs	r1, #3
    refr_knob_pos(obj);
 80104d8:	4620      	mov	r0, r4
    colorwheel->mode = (colorwheel->mode + 1) % 3;
 80104da:	3201      	adds	r2, #1
 80104dc:	fbb2 f1f1 	udiv	r1, r2, r1
 80104e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80104e4:	1a52      	subs	r2, r2, r1
 80104e6:	f362 0301 	bfi	r3, r2, #0, #2
 80104ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    refr_knob_pos(obj);
 80104ee:	f013 f96a 	bl	80237c6 <refr_knob_pos>
    lv_obj_invalidate(obj);
 80104f2:	4620      	mov	r0, r4
 80104f4:	f00c fbd2 	bl	801cc9c <lv_obj_invalidate>
            lv_indev_wait_release(lv_indev_get_act());
 80104f8:	f7f4 f98a 	bl	8004810 <lv_indev_get_act>
 80104fc:	f00b f8c2 	bl	801b684 <lv_indev_wait_release>
            return;
 8010500:	e640      	b.n	8010184 <lv_colorwheel_event+0x88>
                hsv_cur.s = (angle * 100) / 360;
 8010502:	2364      	movs	r3, #100	; 0x64
 8010504:	4358      	muls	r0, r3
 8010506:	fbb0 f0f2 	udiv	r0, r0, r2
 801050a:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
                break;
 801050e:	e6da      	b.n	80102c6 <lv_colorwheel_event+0x1ca>
                hsv_cur.v = (angle * 100) / 360;
 8010510:	2364      	movs	r3, #100	; 0x64
 8010512:	4358      	muls	r0, r3
 8010514:	fbb0 f0f2 	udiv	r0, r0, r2
 8010518:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
                break;
 801051c:	e6d3      	b.n	80102c6 <lv_colorwheel_event+0x1ca>
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 801051e:	4628      	mov	r0, r5
 8010520:	f00a fea3 	bl	801b26a <lv_event_get_param>
 8010524:	4605      	mov	r5, r0
        info->res = _lv_area_is_point_on(&obj->coords, info->point, LV_RADIUS_CIRCLE);
 8010526:	6801      	ldr	r1, [r0, #0]
 8010528:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801052c:	f104 0014 	add.w	r0, r4, #20
 8010530:	f013 ff20 	bl	8024374 <_lv_area_is_point_on>
 8010534:	7128      	strb	r0, [r5, #4]
 8010536:	e625      	b.n	8010184 <lv_colorwheel_event+0x88>
    lv_obj_t * obj = lv_event_get_target(e);
 8010538:	4628      	mov	r0, r5
    uint32_t a = 0;
 801053a:	f04f 0800 	mov.w	r8, #0
    lv_obj_t * obj = lv_event_get_target(e);
 801053e:	f00a fe8c 	bl	801b25a <lv_event_get_target>
 8010542:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010544:	4628      	mov	r0, r5
    static uint16_t h = 0;
    static uint8_t s = 0, v = 0, m = 255;
    static uint16_t angle_saved = 0xffff;

    /*If the angle is different recalculate scaling*/
    if(angle_saved != angle) m = 255;
 8010546:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8010868 <lv_colorwheel_event+0x76c>
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801054a:	f00a fedf 	bl	801b30c <lv_event_get_draw_ctx>
 801054e:	9004      	str	r0, [sp, #16]
    lv_coord_t w = lv_obj_get_width(obj);
 8010550:	4620      	mov	r0, r4
 8010552:	f00c f9a3 	bl	801c89c <lv_obj_get_width>
 8010556:	4606      	mov	r6, r0
    lv_coord_t h = lv_obj_get_height(obj);
 8010558:	4620      	mov	r0, r4
    lv_coord_t cx = obj->coords.x1 + w / 2;
 801055a:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    lv_coord_t h = lv_obj_get_height(obj);
 801055e:	f00c f9a3 	bl	801c8a8 <lv_obj_get_height>
    lv_coord_t cx = obj->coords.x1 + w / 2;
 8010562:	8aa3      	ldrh	r3, [r4, #20]
 8010564:	f346 064f 	sbfx	r6, r6, #1, #16
    lv_coord_t cy = obj->coords.y1 + h / 2;
 8010568:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    lv_coord_t cx = obj->coords.x1 + w / 2;
 801056c:	4433      	add	r3, r6
 801056e:	b29b      	uxth	r3, r3
 8010570:	9302      	str	r3, [sp, #8]
    lv_coord_t cy = obj->coords.y1 + h / 2;
 8010572:	8ae3      	ldrh	r3, [r4, #22]
 8010574:	eb03 0360 	add.w	r3, r3, r0, asr #1
    lv_draw_line_dsc_init(&line_dsc);
 8010578:	a80f      	add	r0, sp, #60	; 0x3c
    lv_coord_t cy = obj->coords.y1 + h / 2;
 801057a:	fa1f fb83 	uxth.w	fp, r3
    lv_draw_line_dsc_init(&line_dsc);
 801057e:	f00e fa16 	bl	801e9ae <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 8010582:	aa0f      	add	r2, sp, #60	; 0x3c
 8010584:	2100      	movs	r1, #0
 8010586:	4620      	mov	r0, r4
 8010588:	f00b fea2 	bl	801c2d0 <lv_obj_init_draw_line_dsc>
    line_dsc.width = (r * 628 / (256 / LV_CPICKER_DEF_QF)) / 100;
 801058c:	f44f 731d 	mov.w	r3, #628	; 0x274
 8010590:	f242 1234 	movw	r2, #8500	; 0x2134
 8010594:	2100      	movs	r1, #0
 8010596:	fb16 f303 	smulbb	r3, r6, r3
 801059a:	4620      	mov	r0, r4
 801059c:	fb93 f3f2 	sdiv	r3, r3, r2
    line_dsc.width += 2;
 80105a0:	3302      	adds	r3, #2
 80105a2:	2250      	movs	r2, #80	; 0x50
 80105a4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80105a8:	f00d fa9e 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80105ac:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80105ae:	4607      	mov	r7, r0
    lv_draw_mask_radius_init(&mask_out_param, &obj->coords, LV_RADIUS_CIRCLE, false);
 80105b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80105b4:	f104 0114 	add.w	r1, r4, #20
 80105b8:	a812      	add	r0, sp, #72	; 0x48
    return (lv_coord_t)v.num;
 80105ba:	9307      	str	r3, [sp, #28]
 80105bc:	2300      	movs	r3, #0
 80105be:	f7f7 ffeb 	bl	8008598 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
 80105c2:	2100      	movs	r1, #0
 80105c4:	a812      	add	r0, sp, #72	; 0x48
 80105c6:	f7f7 fe6f 	bl	80082a8 <lv_draw_mask_add>
    dest->y1 = src->y1;
 80105ca:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    mask_area.x1 += cir_w;
 80105ce:	b2ba      	uxth	r2, r7
    dest->y2 = src->y2;
 80105d0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
 80105d4:	9005      	str	r0, [sp, #20]
    dest->x2 = src->x2;
 80105d6:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
    mask_area.y1 += cir_w;
 80105da:	4411      	add	r1, r2
    mask_area.x1 += cir_w;
 80105dc:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    mask_area.y2 -= cir_w;
 80105e0:	1a9b      	subs	r3, r3, r2
    mask_area.x2 -= cir_w;
 80105e2:	1a80      	subs	r0, r0, r2
    mask_area.y1 += cir_w;
 80105e4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    mask_area.x1 += cir_w;
 80105e8:	fa1c f787 	uxtah	r7, ip, r7
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 80105ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80105f0:	a90b      	add	r1, sp, #44	; 0x2c
    mask_area.x2 -= cir_w;
 80105f2:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    mask_area.y2 -= cir_w;
 80105f6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 80105fa:	a818      	add	r0, sp, #96	; 0x60
 80105fc:	2301      	movs	r3, #1
    mask_area.x1 += cir_w;
 80105fe:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8010602:	f7f7 ffc9 	bl	8008598 <lv_draw_mask_radius_init>
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 8010606:	2100      	movs	r1, #0
 8010608:	a818      	add	r0, sp, #96	; 0x60
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 801060a:	4647      	mov	r7, r8
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 801060c:	f7f7 fe4c 	bl	80082a8 <lv_draw_mask_add>
    lv_coord_t cir_w_extra = line_dsc.width;
 8010610:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 8010614:	9006      	str	r0, [sp, #24]
    lv_coord_t cir_w_extra = line_dsc.width;
 8010616:	9303      	str	r3, [sp, #12]
    uint8_t r = 0, g = 0, b = 0;
 8010618:	2300      	movs	r3, #0
 801061a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801061e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010622:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    if(angle_saved != angle) m = 255;
 8010626:	4b91      	ldr	r3, [pc, #580]	; (801086c <lv_colorwheel_event+0x770>)
 8010628:	881b      	ldrh	r3, [r3, #0]
 801062a:	42bb      	cmp	r3, r7
 801062c:	bf1c      	itt	ne
 801062e:	23ff      	movne	r3, #255	; 0xff
 8010630:	f889 3000 	strbne.w	r3, [r9]
    angle_saved = angle;
 8010634:	4b8d      	ldr	r3, [pc, #564]	; (801086c <lv_colorwheel_event+0x770>)

    switch(ext->mode) {
        default:
        case LV_COLORWHEEL_MODE_HUE:
            /*Don't recompute costly scaling if it does not change*/
            if(m != ext->mode) {
 8010636:	f899 1000 	ldrb.w	r1, [r9]
    angle_saved = angle;
 801063a:	801f      	strh	r7, [r3, #0]
    switch(ext->mode) {
 801063c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010640:	f3c3 0201 	ubfx	r2, r3, #0, #2
 8010644:	f003 0303 	and.w	r3, r3, #3
 8010648:	2b01      	cmp	r3, #1
 801064a:	f000 80b9 	beq.w	80107c0 <lv_colorwheel_event+0x6c4>
 801064e:	2b02      	cmp	r3, #2
 8010650:	f000 80dc 	beq.w	801080c <lv_colorwheel_event+0x710>
            if(m != ext->mode) {
 8010654:	428b      	cmp	r3, r1
 8010656:	d016      	beq.n	8010686 <lv_colorwheel_event+0x58a>
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 8010658:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801065c:	2114      	movs	r1, #20
 801065e:	4884      	ldr	r0, [pc, #528]	; (8010870 <lv_colorwheel_event+0x774>)
 8010660:	eb03 0343 	add.w	r3, r3, r3, lsl #1
                v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
                m = ext->mode;
 8010664:	f889 2000 	strb.w	r2, [r9]
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 8010668:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801066c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010670:	7003      	strb	r3, [r0, #0]
                v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8010672:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8010676:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801067a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801067e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010682:	497c      	ldr	r1, [pc, #496]	; (8010874 <lv_colorwheel_event+0x778>)
 8010684:	700b      	strb	r3, [r1, #0]
            }
            fast_hsv2rgb(angle * 6, s, v, &r, &g,
 8010686:	ab0d      	add	r3, sp, #52	; 0x34
 8010688:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 801068c:	4a79      	ldr	r2, [pc, #484]	; (8010874 <lv_colorwheel_event+0x778>)
 801068e:	9301      	str	r3, [sp, #4]
 8010690:	0040      	lsls	r0, r0, #1
 8010692:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8010696:	4976      	ldr	r1, [pc, #472]	; (8010870 <lv_colorwheel_event+0x774>)
 8010698:	b280      	uxth	r0, r0
 801069a:	9300      	str	r3, [sp, #0]
 801069c:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 80106a0:	7812      	ldrb	r2, [r2, #0]
 80106a2:	7809      	ldrb	r1, [r1, #0]
            if(m != ext->mode) {
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
                m = ext->mode;
            }
            fast_hsv2rgb(h, s, angle, &r, &g, &b);
 80106a4:	f013 f80a 	bl	80236bc <fast_hsv2rgb.constprop.0>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80106a8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80106ac:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 80106b0:	3703      	adds	r7, #3
 80106b2:	089b      	lsrs	r3, r3, #2
 80106b4:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 80106b8:	b2bf      	uxth	r7, r7
        line_dsc.color = angle_to_mode_color_fast(obj, i);
 80106ba:	015b      	lsls	r3, r3, #5
 80106bc:	08d2      	lsrs	r2, r2, #3
 80106be:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80106c2:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 80106c6:	f348 220f 	sbfx	r2, r8, #8, #16
        line_dsc.color = angle_to_mode_color_fast(obj, i);
 80106ca:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        uint16_t angle_trigo = (uint16_t)(a >> 8); /*i * 360 / 256 is the scale to apply, but we can skip multiplication here*/
 80106ce:	ea4f 2318 	mov.w	r3, r8, lsr #8
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 80106d2:	4610      	mov	r0, r2
 80106d4:	9209      	str	r2, [sp, #36]	; 0x24
        uint16_t angle_trigo = (uint16_t)(a >> 8); /*i * 360 / 256 is the scale to apply, but we can skip multiplication here*/
 80106d6:	9308      	str	r3, [sp, #32]
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 80106d8:	f508 6887 	add.w	r8, r8, #1080	; 0x438
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 80106dc:	9b03      	ldr	r3, [sp, #12]
 80106de:	eb06 0a03 	add.w	sl, r6, r3
 80106e2:	f001 ffdf 	bl	80126a4 <lv_trigo_sin>
 80106e6:	9b02      	ldr	r3, [sp, #8]
 80106e8:	fb0a f000 	mul.w	r0, sl, r0
 80106ec:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle);

static inline LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 80106f0:	9b08      	ldr	r3, [sp, #32]
 80106f2:	335a      	adds	r3, #90	; 0x5a
 80106f4:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 80106f8:	b21b      	sxth	r3, r3
 80106fa:	4618      	mov	r0, r3
 80106fc:	9308      	str	r3, [sp, #32]
 80106fe:	f001 ffd1 	bl	80126a4 <lv_trigo_sin>
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8010702:	9b07      	ldr	r3, [sp, #28]
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8010704:	fb0a f000 	mul.w	r0, sl, r0
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8010708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801070a:	eba6 0a03 	sub.w	sl, r6, r3
 801070e:	9b03      	ldr	r3, [sp, #12]
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8010710:	eb0b 30e0 	add.w	r0, fp, r0, asr #15
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8010714:	ebaa 0a03 	sub.w	sl, sl, r3
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8010718:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 801071c:	4610      	mov	r0, r2
 801071e:	f001 ffc1 	bl	80126a4 <lv_trigo_sin>
 8010722:	9b02      	ldr	r3, [sp, #8]
 8010724:	fb0a f000 	mul.w	r0, sl, r0
 8010728:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 801072c:	9b08      	ldr	r3, [sp, #32]
 801072e:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8010732:	4618      	mov	r0, r3
 8010734:	f001 ffb6 	bl	80126a4 <lv_trigo_sin>
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8010738:	fb0a f000 	mul.w	r0, sl, r0
        lv_draw_line(draw_ctx, &line_dsc, &p[0], &p[1]);
 801073c:	ab0e      	add	r3, sp, #56	; 0x38
 801073e:	aa0d      	add	r2, sp, #52	; 0x34
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8010740:	eb0b 30e0 	add.w	r0, fp, r0, asr #15
        lv_draw_line(draw_ctx, &line_dsc, &p[0], &p[1]);
 8010744:	a90f      	add	r1, sp, #60	; 0x3c
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8010746:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
        lv_draw_line(draw_ctx, &line_dsc, &p[0], &p[1]);
 801074a:	9804      	ldr	r0, [sp, #16]
 801074c:	f00e f93c 	bl	801e9c8 <lv_draw_line>
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 8010750:	4b49      	ldr	r3, [pc, #292]	; (8010878 <lv_colorwheel_event+0x77c>)
 8010752:	4598      	cmp	r8, r3
 8010754:	f47f af60 	bne.w	8010618 <lv_colorwheel_event+0x51c>
    lv_draw_mask_free_param(&mask_out_param);
 8010758:	a812      	add	r0, sp, #72	; 0x48
 801075a:	f00e fe17 	bl	801f38c <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_in_param);
 801075e:	a818      	add	r0, sp, #96	; 0x60
 8010760:	f00e fe14 	bl	801f38c <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_out_id);
 8010764:	9805      	ldr	r0, [sp, #20]
 8010766:	f7f7 fdd5 	bl	8008314 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_in_id);
 801076a:	9806      	ldr	r0, [sp, #24]
 801076c:	f7f7 fdd2 	bl	8008314 <lv_draw_mask_remove_id>
    lv_obj_t * obj = lv_event_get_target(e);
 8010770:	4628      	mov	r0, r5
 8010772:	f00a fd72 	bl	801b25a <lv_event_get_target>
 8010776:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010778:	4628      	mov	r0, r5
 801077a:	f00a fdc7 	bl	801b30c <lv_event_get_draw_ctx>
 801077e:	4605      	mov	r5, r0
    lv_draw_rect_dsc_init(&cir_dsc);
 8010780:	a818      	add	r0, sp, #96	; 0x60
 8010782:	f7f8 f90f 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &cir_dsc);
 8010786:	aa18      	add	r2, sp, #96	; 0x60
 8010788:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801078c:	4620      	mov	r0, r4
 801078e:	f00b fbb3 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    cir_dsc.radius = LV_RADIUS_CIRCLE;
 8010792:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010796:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    if(colorwheel->knob.recolor) {
 801079a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801079e:	07db      	lsls	r3, r3, #31
 80107a0:	d504      	bpl.n	80107ac <lv_colorwheel_event+0x6b0>
        cir_dsc.bg_color = lv_colorwheel_get_rgb(obj);
 80107a2:	4620      	mov	r0, r4
 80107a4:	f013 f894 	bl	80238d0 <lv_colorwheel_get_rgb>
 80107a8:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
    lv_area_t knob_area = get_knob_area(obj);
 80107ac:	4621      	mov	r1, r4
 80107ae:	a812      	add	r0, sp, #72	; 0x48
 80107b0:	f012 ffc6 	bl	8023740 <get_knob_area>
    lv_draw_rect(draw_ctx, &cir_dsc, &knob_area);
 80107b4:	aa12      	add	r2, sp, #72	; 0x48
 80107b6:	a918      	add	r1, sp, #96	; 0x60
 80107b8:	4628      	mov	r0, r5
 80107ba:	f00e fe28 	bl	801f40e <lv_draw_rect>
}
 80107be:	e4e1      	b.n	8010184 <lv_colorwheel_event+0x88>
            if(m != ext->mode) {
 80107c0:	2901      	cmp	r1, #1
 80107c2:	d016      	beq.n	80107f2 <lv_colorwheel_event+0x6f6>
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 80107c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80107c8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
                m = ext->mode;
 80107ca:	f889 2000 	strb.w	r2, [r9]
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 80107ce:	434b      	muls	r3, r1
 80107d0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80107d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80107d8:	4928      	ldr	r1, [pc, #160]	; (801087c <lv_colorwheel_event+0x780>)
 80107da:	800b      	strh	r3, [r1, #0]
                v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 80107dc:	2114      	movs	r1, #20
 80107de:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80107e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80107e6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80107ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80107ee:	4921      	ldr	r1, [pc, #132]	; (8010874 <lv_colorwheel_event+0x778>)
 80107f0:	700b      	strb	r3, [r1, #0]
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 80107f2:	ab0d      	add	r3, sp, #52	; 0x34
 80107f4:	4a1f      	ldr	r2, [pc, #124]	; (8010874 <lv_colorwheel_event+0x778>)
 80107f6:	b2f9      	uxtb	r1, r7
 80107f8:	9301      	str	r3, [sp, #4]
 80107fa:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 80107fe:	9300      	str	r3, [sp, #0]
 8010800:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8010804:	7812      	ldrb	r2, [r2, #0]
            fast_hsv2rgb(h, s, angle, &r, &g, &b);
 8010806:	481d      	ldr	r0, [pc, #116]	; (801087c <lv_colorwheel_event+0x780>)
 8010808:	8800      	ldrh	r0, [r0, #0]
 801080a:	e74b      	b.n	80106a4 <lv_colorwheel_event+0x5a8>
            if(m != ext->mode) {
 801080c:	2902      	cmp	r1, #2
 801080e:	d016      	beq.n	801083e <lv_colorwheel_event+0x742>
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 8010810:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010814:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
                m = ext->mode;
 8010816:	f889 2000 	strb.w	r2, [r9]
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 801081a:	434b      	muls	r3, r1
 801081c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8010820:	fbb3 f3f1 	udiv	r3, r3, r1
 8010824:	4915      	ldr	r1, [pc, #84]	; (801087c <lv_colorwheel_event+0x780>)
 8010826:	800b      	strh	r3, [r1, #0]
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 8010828:	2114      	movs	r1, #20
 801082a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801082e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010832:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8010836:	fbb3 f3f1 	udiv	r3, r3, r1
 801083a:	490d      	ldr	r1, [pc, #52]	; (8010870 <lv_colorwheel_event+0x774>)
 801083c:	700b      	strb	r3, [r1, #0]
            fast_hsv2rgb(h, s, angle, &r, &g, &b);
 801083e:	ab0d      	add	r3, sp, #52	; 0x34
 8010840:	490b      	ldr	r1, [pc, #44]	; (8010870 <lv_colorwheel_event+0x774>)
 8010842:	b2fa      	uxtb	r2, r7
 8010844:	9301      	str	r3, [sp, #4]
 8010846:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801084a:	9300      	str	r3, [sp, #0]
 801084c:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8010850:	7809      	ldrb	r1, [r1, #0]
 8010852:	e7d8      	b.n	8010806 <lv_colorwheel_event+0x70a>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8010854:	4628      	mov	r0, r5
 8010856:	f00a fd08 	bl	801b26a <lv_event_get_param>
        if(info->res != LV_COVER_RES_MASKED) info->res = LV_COVER_RES_NOT_COVER;
 801085a:	7803      	ldrb	r3, [r0, #0]
 801085c:	2b02      	cmp	r3, #2
 801085e:	bf1c      	itt	ne
 8010860:	2301      	movne	r3, #1
 8010862:	7003      	strbne	r3, [r0, #0]
 8010864:	e48e      	b.n	8010184 <lv_colorwheel_event+0x88>
 8010866:	bf00      	nop
 8010868:	24000155 	.word	0x24000155
 801086c:	24000150 	.word	0x24000150
 8010870:	24010e33 	.word	0x24010e33
 8010874:	24010e32 	.word	0x24010e32
 8010878:	00016ad0 	.word	0x00016ad0
 801087c:	24010d1e 	.word	0x24010d1e

08010880 <lv_keyboard_update_ctrl_map>:
/**
 * Update the control map for the current mode
 * @param obj pointer to a keyboard object
 */
static void lv_keyboard_update_ctrl_map(lv_obj_t * obj)
{
 8010880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_keyboard_t * keyboard = (lv_keyboard_t *)obj;

    if(keyboard->popovers) {
 8010882:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8010886:	4604      	mov	r4, r0
 8010888:	4f17      	ldr	r7, [pc, #92]	; (80108e8 <lv_keyboard_update_ctrl_map+0x68>)
    if(keyboard->popovers) {
 801088a:	f013 0501 	ands.w	r5, r3, #1
 801088e:	d007      	beq.n	80108a0 <lv_keyboard_update_ctrl_map+0x20>
        /*Apply the current control map (already includes LV_BTNMATRIX_CTRL_POPOVER flags)*/
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[keyboard->mode]);
 8010890:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010894:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]

        /*Apply new control map and clean up*/
        lv_btnmatrix_set_ctrl_map(obj, ctrl_map);
        lv_mem_free(ctrl_map);
    }
}
 8010898:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[keyboard->mode]);
 801089c:	f015 bdc1 	b.w	8026422 <lv_btnmatrix_set_ctrl_map>
        lv_btnmatrix_ctrl_t * ctrl_map = lv_mem_alloc(btnm->btn_cnt * sizeof(lv_btnmatrix_ctrl_t));
 80108a0:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 80108a2:	0040      	lsls	r0, r0, #1
 80108a4:	f001 ff38 	bl	8012718 <lv_mem_alloc>
        lv_memcpy(ctrl_map, kb_ctrl[keyboard->mode], sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 80108a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80108ac:	8e22      	ldrh	r2, [r4, #48]	; 0x30
        lv_btnmatrix_ctrl_t * ctrl_map = lv_mem_alloc(btnm->btn_cnt * sizeof(lv_btnmatrix_ctrl_t));
 80108ae:	4606      	mov	r6, r0
 80108b0:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80108b4:	0052      	lsls	r2, r2, #1
 80108b6:	f009 ff5c 	bl	801a772 <memcpy>
 80108ba:	462b      	mov	r3, r5
        for(uint16_t i = 0; i < btnm->btn_cnt; i++) {
 80108bc:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80108be:	b29a      	uxth	r2, r3
 80108c0:	4291      	cmp	r1, r2
 80108c2:	d808      	bhi.n	80108d6 <lv_keyboard_update_ctrl_map+0x56>
        lv_btnmatrix_set_ctrl_map(obj, ctrl_map);
 80108c4:	4620      	mov	r0, r4
 80108c6:	4631      	mov	r1, r6
 80108c8:	f015 fdab 	bl	8026422 <lv_btnmatrix_set_ctrl_map>
        lv_mem_free(ctrl_map);
 80108cc:	4630      	mov	r0, r6
}
 80108ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_mem_free(ctrl_map);
 80108d2:	f001 bf3f 	b.w	8012754 <lv_mem_free>
            ctrl_map[i] &= (~LV_BTNMATRIX_CTRL_POPOVER);
 80108d6:	b299      	uxth	r1, r3
 80108d8:	3301      	adds	r3, #1
 80108da:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 80108de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80108e2:	f826 2011 	strh.w	r2, [r6, r1, lsl #1]
        for(uint16_t i = 0; i < btnm->btn_cnt; i++) {
 80108e6:	e7e9      	b.n	80108bc <lv_keyboard_update_ctrl_map+0x3c>
 80108e8:	240000a0 	.word	0x240000a0

080108ec <lv_keyboard_update_map>:
{
 80108ec:	b510      	push	{r4, lr}
    lv_btnmatrix_set_map(obj, kb_map[keyboard->mode]);
 80108ee:	4b06      	ldr	r3, [pc, #24]	; (8010908 <lv_keyboard_update_map+0x1c>)
{
 80108f0:	4604      	mov	r4, r0
    lv_btnmatrix_set_map(obj, kb_map[keyboard->mode]);
 80108f2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80108f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108fa:	f015 fd8e 	bl	802641a <lv_btnmatrix_set_map>
    lv_keyboard_update_ctrl_map(obj);
 80108fe:	4620      	mov	r0, r4
}
 8010900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_keyboard_update_ctrl_map(obj);
 8010904:	f7ff bfbc 	b.w	8010880 <lv_keyboard_update_ctrl_map>
 8010908:	240000c4 	.word	0x240000c4

0801090c <lv_keyboard_constructor>:
{
 801090c:	b538      	push	{r3, r4, r5, lr}
 801090e:	460c      	mov	r4, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 8010910:	2104      	movs	r1, #4
    keyboard->ta         = NULL;
 8010912:	2500      	movs	r5, #0
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 8010914:	4620      	mov	r0, r4
 8010916:	f00b f85e 	bl	801b9d6 <lv_obj_clear_flag>
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;
 801091a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 801091c:	462a      	mov	r2, r5
 801091e:	4620      	mov	r0, r4
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;
 8010920:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 8010924:	2105      	movs	r1, #5
    keyboard->ta         = NULL;
 8010926:	63a5      	str	r5, [r4, #56]	; 0x38
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;
 8010928:	f023 0301 	bic.w	r3, r3, #1
 801092c:	87a3      	strh	r3, [r4, #60]	; 0x3c
    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 801092e:	462b      	mov	r3, r5
 8010930:	f00b ff56 	bl	801c7e0 <lv_obj_align>
    lv_obj_add_event_cb(obj, lv_keyboard_def_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 8010934:	462b      	mov	r3, r5
 8010936:	221c      	movs	r2, #28
 8010938:	4906      	ldr	r1, [pc, #24]	; (8010954 <lv_keyboard_constructor+0x48>)
 801093a:	4620      	mov	r0, r4
 801093c:	f00a fc99 	bl	801b272 <lv_obj_add_event_cb>
    lv_obj_set_style_base_dir(obj, LV_BASE_DIR_LTR, 0);
 8010940:	4620      	mov	r0, r4
 8010942:	462a      	mov	r2, r5
 8010944:	4629      	mov	r1, r5
 8010946:	f00d fc46 	bl	801e1d6 <lv_obj_set_style_base_dir>
    lv_keyboard_update_map(obj);
 801094a:	4620      	mov	r0, r4
}
 801094c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_keyboard_update_map(obj);
 8010950:	f7ff bfcc 	b.w	80108ec <lv_keyboard_update_map>
 8010954:	08010959 	.word	0x08010959

08010958 <lv_keyboard_def_event_cb>:
{
 8010958:	b570      	push	{r4, r5, r6, lr}
    lv_obj_t * obj = lv_event_get_target(e);
 801095a:	f00a fc7e 	bl	801b25a <lv_event_get_target>
 801095e:	4604      	mov	r4, r0
    uint16_t btn_id   = lv_btnmatrix_get_selected_btn(obj);
 8010960:	f015 fdda 	bl	8026518 <lv_btnmatrix_get_selected_btn>
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
 8010964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010968:	4298      	cmp	r0, r3
 801096a:	f000 80d5 	beq.w	8010b18 <lv_keyboard_def_event_cb+0x1c0>
    const char * txt = lv_btnmatrix_get_btn_text(obj, lv_btnmatrix_get_selected_btn(obj));
 801096e:	4620      	mov	r0, r4
 8010970:	f015 fdd2 	bl	8026518 <lv_btnmatrix_get_selected_btn>
 8010974:	4601      	mov	r1, r0
 8010976:	4620      	mov	r0, r4
 8010978:	f003 fcda 	bl	8014330 <lv_btnmatrix_get_btn_text>
    if(txt == NULL) return;
 801097c:	4605      	mov	r5, r0
 801097e:	2800      	cmp	r0, #0
 8010980:	f000 80ca 	beq.w	8010b18 <lv_keyboard_def_event_cb+0x1c0>
    if(strcmp(txt, "abc") == 0) {
 8010984:	4965      	ldr	r1, [pc, #404]	; (8010b1c <lv_keyboard_def_event_cb+0x1c4>)
 8010986:	f009 fee8 	bl	801a75a <strcmp>
 801098a:	b958      	cbnz	r0, 80109a4 <lv_keyboard_def_event_cb+0x4c>
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_LOWER]);
 801098c:	4b64      	ldr	r3, [pc, #400]	; (8010b20 <lv_keyboard_def_event_cb+0x1c8>)
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_LOWER;
 801098e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_LOWER]);
 8010992:	6819      	ldr	r1, [r3, #0]
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
 8010994:	4620      	mov	r0, r4
 8010996:	f015 fd40 	bl	802641a <lv_btnmatrix_set_map>
        lv_keyboard_update_ctrl_map(obj);
 801099a:	4620      	mov	r0, r4
}
 801099c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_keyboard_update_ctrl_map(obj);
 80109a0:	f7ff bf6e 	b.w	8010880 <lv_keyboard_update_ctrl_map>
    else if(strcmp(txt, "ABC") == 0) {
 80109a4:	495f      	ldr	r1, [pc, #380]	; (8010b24 <lv_keyboard_def_event_cb+0x1cc>)
 80109a6:	4628      	mov	r0, r5
 80109a8:	f009 fed7 	bl	801a75a <strcmp>
 80109ac:	b928      	cbnz	r0, 80109ba <lv_keyboard_def_event_cb+0x62>
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
 80109ae:	2301      	movs	r3, #1
 80109b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
 80109b4:	4b5a      	ldr	r3, [pc, #360]	; (8010b20 <lv_keyboard_def_event_cb+0x1c8>)
 80109b6:	6859      	ldr	r1, [r3, #4]
 80109b8:	e7ec      	b.n	8010994 <lv_keyboard_def_event_cb+0x3c>
    else if(strcmp(txt, "1#") == 0) {
 80109ba:	495b      	ldr	r1, [pc, #364]	; (8010b28 <lv_keyboard_def_event_cb+0x1d0>)
 80109bc:	4628      	mov	r0, r5
 80109be:	f009 fecc 	bl	801a75a <strcmp>
 80109c2:	b928      	cbnz	r0, 80109d0 <lv_keyboard_def_event_cb+0x78>
        keyboard->mode = LV_KEYBOARD_MODE_SPECIAL;
 80109c4:	2302      	movs	r3, #2
 80109c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_SPECIAL]);
 80109ca:	4b55      	ldr	r3, [pc, #340]	; (8010b20 <lv_keyboard_def_event_cb+0x1c8>)
 80109cc:	6899      	ldr	r1, [r3, #8]
 80109ce:	e7e1      	b.n	8010994 <lv_keyboard_def_event_cb+0x3c>
    else if(strcmp(txt, LV_SYMBOL_CLOSE) == 0 || strcmp(txt, LV_SYMBOL_KEYBOARD) == 0) {
 80109d0:	4956      	ldr	r1, [pc, #344]	; (8010b2c <lv_keyboard_def_event_cb+0x1d4>)
 80109d2:	4628      	mov	r0, r5
 80109d4:	f009 fec1 	bl	801a75a <strcmp>
 80109d8:	b988      	cbnz	r0, 80109fe <lv_keyboard_def_event_cb+0xa6>
        lv_res_t res = lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 80109da:	2200      	movs	r2, #0
 80109dc:	2120      	movs	r1, #32
 80109de:	4620      	mov	r0, r4
 80109e0:	f7f3 feb0 	bl	8004744 <lv_event_send>
        if(res != LV_RES_OK) return;
 80109e4:	2801      	cmp	r0, #1
 80109e6:	f040 8097 	bne.w	8010b18 <lv_keyboard_def_event_cb+0x1c0>
        if(keyboard->ta) {
 80109ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80109ec:	2800      	cmp	r0, #0
 80109ee:	f000 8093 	beq.w	8010b18 <lv_keyboard_def_event_cb+0x1c0>
            res = lv_event_send(keyboard->ta, LV_EVENT_CANCEL, NULL);
 80109f2:	2200      	movs	r2, #0
 80109f4:	2120      	movs	r1, #32
}
 80109f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 80109fa:	f7f3 bea3 	b.w	8004744 <lv_event_send>
    else if(strcmp(txt, LV_SYMBOL_CLOSE) == 0 || strcmp(txt, LV_SYMBOL_KEYBOARD) == 0) {
 80109fe:	494c      	ldr	r1, [pc, #304]	; (8010b30 <lv_keyboard_def_event_cb+0x1d8>)
 8010a00:	4628      	mov	r0, r5
 8010a02:	f009 feaa 	bl	801a75a <strcmp>
 8010a06:	2800      	cmp	r0, #0
 8010a08:	d0e7      	beq.n	80109da <lv_keyboard_def_event_cb+0x82>
    else if(strcmp(txt, LV_SYMBOL_OK) == 0) {
 8010a0a:	494a      	ldr	r1, [pc, #296]	; (8010b34 <lv_keyboard_def_event_cb+0x1dc>)
 8010a0c:	4628      	mov	r0, r5
 8010a0e:	f009 fea4 	bl	801a75a <strcmp>
 8010a12:	4602      	mov	r2, r0
 8010a14:	b958      	cbnz	r0, 8010a2e <lv_keyboard_def_event_cb+0xd6>
        lv_res_t res = lv_event_send(obj, LV_EVENT_READY, NULL);
 8010a16:	211f      	movs	r1, #31
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f7f3 fe93 	bl	8004744 <lv_event_send>
        if(res != LV_RES_OK) return;
 8010a1e:	2801      	cmp	r0, #1
 8010a20:	d17a      	bne.n	8010b18 <lv_keyboard_def_event_cb+0x1c0>
        if(keyboard->ta) {
 8010a22:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a24:	2800      	cmp	r0, #0
 8010a26:	d077      	beq.n	8010b18 <lv_keyboard_def_event_cb+0x1c0>
            res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 8010a28:	2200      	movs	r2, #0
 8010a2a:	211f      	movs	r1, #31
 8010a2c:	e7e3      	b.n	80109f6 <lv_keyboard_def_event_cb+0x9e>
    if(keyboard->ta == NULL) return;
 8010a2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d071      	beq.n	8010b18 <lv_keyboard_def_event_cb+0x1c0>
    if(strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0) {
 8010a34:	4940      	ldr	r1, [pc, #256]	; (8010b38 <lv_keyboard_def_event_cb+0x1e0>)
 8010a36:	4628      	mov	r0, r5
 8010a38:	f009 fe8f 	bl	801a75a <strcmp>
 8010a3c:	b960      	cbnz	r0, 8010a58 <lv_keyboard_def_event_cb+0x100>
        lv_textarea_add_char(keyboard->ta, '\n');
 8010a3e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a40:	210a      	movs	r1, #10
 8010a42:	f007 fd87 	bl	8018554 <lv_textarea_add_char>
        if(lv_textarea_get_one_line(keyboard->ta)) {
 8010a46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a48:	f017 f846 	bl	8027ad8 <lv_textarea_get_one_line>
 8010a4c:	2800      	cmp	r0, #0
 8010a4e:	d063      	beq.n	8010b18 <lv_keyboard_def_event_cb+0x1c0>
            lv_res_t res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 8010a50:	2200      	movs	r2, #0
 8010a52:	211f      	movs	r1, #31
 8010a54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a56:	e7ce      	b.n	80109f6 <lv_keyboard_def_event_cb+0x9e>
    if(strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0) {
 8010a58:	4938      	ldr	r1, [pc, #224]	; (8010b3c <lv_keyboard_def_event_cb+0x1e4>)
 8010a5a:	4628      	mov	r0, r5
 8010a5c:	f009 fe7d 	bl	801a75a <strcmp>
 8010a60:	2800      	cmp	r0, #0
 8010a62:	d0ec      	beq.n	8010a3e <lv_keyboard_def_event_cb+0xe6>
    else if(strcmp(txt, LV_SYMBOL_LEFT) == 0) {
 8010a64:	4936      	ldr	r1, [pc, #216]	; (8010b40 <lv_keyboard_def_event_cb+0x1e8>)
 8010a66:	4628      	mov	r0, r5
 8010a68:	f009 fe77 	bl	801a75a <strcmp>
 8010a6c:	b920      	cbnz	r0, 8010a78 <lv_keyboard_def_event_cb+0x120>
        lv_textarea_cursor_left(keyboard->ta);
 8010a6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8010a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_textarea_cursor_left(keyboard->ta);
 8010a74:	f017 b8ad 	b.w	8027bd2 <lv_textarea_cursor_left>
    else if(strcmp(txt, LV_SYMBOL_RIGHT) == 0) {
 8010a78:	4932      	ldr	r1, [pc, #200]	; (8010b44 <lv_keyboard_def_event_cb+0x1ec>)
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	f009 fe6d 	bl	801a75a <strcmp>
 8010a80:	b920      	cbnz	r0, 8010a8c <lv_keyboard_def_event_cb+0x134>
        lv_textarea_cursor_right(keyboard->ta);
 8010a82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8010a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_textarea_cursor_right(keyboard->ta);
 8010a88:	f017 b89f 	b.w	8027bca <lv_textarea_cursor_right>
    else if(strcmp(txt, LV_SYMBOL_BACKSPACE) == 0) {
 8010a8c:	492e      	ldr	r1, [pc, #184]	; (8010b48 <lv_keyboard_def_event_cb+0x1f0>)
 8010a8e:	4628      	mov	r0, r5
 8010a90:	f009 fe63 	bl	801a75a <strcmp>
 8010a94:	b920      	cbnz	r0, 8010aa0 <lv_keyboard_def_event_cb+0x148>
        lv_textarea_del_char(keyboard->ta);
 8010a96:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8010a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_textarea_del_char(keyboard->ta);
 8010a9c:	f017 b83d 	b.w	8027b1a <lv_textarea_del_char>
    else if(strcmp(txt, "+/-") == 0) {
 8010aa0:	492a      	ldr	r1, [pc, #168]	; (8010b4c <lv_keyboard_def_event_cb+0x1f4>)
 8010aa2:	4628      	mov	r0, r5
 8010aa4:	f009 fe59 	bl	801a75a <strcmp>
 8010aa8:	4606      	mov	r6, r0
 8010aaa:	bb78      	cbnz	r0, 8010b0c <lv_keyboard_def_event_cb+0x1b4>
        uint16_t cur        = lv_textarea_get_cursor_pos(keyboard->ta);
 8010aac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010aae:	f017 f80e 	bl	8027ace <lv_textarea_get_cursor_pos>
 8010ab2:	4605      	mov	r5, r0
        const char * ta_txt = lv_textarea_get_text(keyboard->ta);
 8010ab4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010ab6:	f017 f801 	bl	8027abc <lv_textarea_get_text>
        if(ta_txt[0] == '-') {
 8010aba:	7803      	ldrb	r3, [r0, #0]
 8010abc:	b2ad      	uxth	r5, r5
 8010abe:	2b2d      	cmp	r3, #45	; 0x2d
 8010ac0:	d110      	bne.n	8010ae4 <lv_keyboard_def_event_cb+0x18c>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 8010ac2:	2101      	movs	r1, #1
 8010ac4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010ac6:	f007 fb83 	bl	80181d0 <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 8010aca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010acc:	f017 f825 	bl	8027b1a <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '+');
 8010ad0:	212b      	movs	r1, #43	; 0x2b
            lv_textarea_add_char(keyboard->ta, '-');
 8010ad2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010ad4:	f007 fd3e 	bl	8018554 <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur);
 8010ad8:	4629      	mov	r1, r5
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 8010ada:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8010adc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 8010ae0:	f007 bb76 	b.w	80181d0 <lv_textarea_set_cursor_pos>
        else if(ta_txt[0] == '+') {
 8010ae4:	2b2b      	cmp	r3, #43	; 0x2b
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 8010ae6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        else if(ta_txt[0] == '+') {
 8010ae8:	d107      	bne.n	8010afa <lv_keyboard_def_event_cb+0x1a2>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 8010aea:	2101      	movs	r1, #1
 8010aec:	f007 fb70 	bl	80181d0 <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 8010af0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010af2:	f017 f812 	bl	8027b1a <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '-');
 8010af6:	212d      	movs	r1, #45	; 0x2d
 8010af8:	e7eb      	b.n	8010ad2 <lv_keyboard_def_event_cb+0x17a>
            lv_textarea_set_cursor_pos(keyboard->ta, 0);
 8010afa:	4631      	mov	r1, r6
 8010afc:	f007 fb68 	bl	80181d0 <lv_textarea_set_cursor_pos>
            lv_textarea_add_char(keyboard->ta, '-');
 8010b00:	212d      	movs	r1, #45	; 0x2d
 8010b02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010b04:	f007 fd26 	bl	8018554 <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 8010b08:	1c69      	adds	r1, r5, #1
 8010b0a:	e7e6      	b.n	8010ada <lv_keyboard_def_event_cb+0x182>
        lv_textarea_add_text(keyboard->ta, txt);
 8010b0c:	4629      	mov	r1, r5
 8010b0e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8010b10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_textarea_add_text(keyboard->ta, txt);
 8010b14:	f007 bc94 	b.w	8018440 <lv_textarea_add_text>
}
 8010b18:	bd70      	pop	{r4, r5, r6, pc}
 8010b1a:	bf00      	nop
 8010b1c:	0802af49 	.word	0x0802af49
 8010b20:	240000c4 	.word	0x240000c4
 8010b24:	0802af4d 	.word	0x0802af4d
 8010b28:	0802af51 	.word	0x0802af51
 8010b2c:	0802af54 	.word	0x0802af54
 8010b30:	0802af58 	.word	0x0802af58
 8010b34:	0802ac41 	.word	0x0802ac41
 8010b38:	0802af5c 	.word	0x0802af5c
 8010b3c:	0802af62 	.word	0x0802af62
 8010b40:	0802ac5a 	.word	0x0802ac5a
 8010b44:	0802ac5e 	.word	0x0802ac5e
 8010b48:	0802af66 	.word	0x0802af66
 8010b4c:	0802af6a 	.word	0x0802af6a

08010b50 <lv_led_event>:
    led->color = lv_theme_get_color_primary(obj);
    led->bright = LV_LED_BRIGHT_MAX;
}

static void lv_led_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8010b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /* Call the ancestor's event handler */
    lv_event_code_t code = lv_event_get_code(e);
 8010b54:	4608      	mov	r0, r1
{
 8010b56:	b0a0      	sub	sp, #128	; 0x80
 8010b58:	460d      	mov	r5, r1
    lv_event_code_t code = lv_event_get_code(e);
 8010b5a:	f00a fb82 	bl	801b262 <lv_event_get_code>
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_MAIN_END) {
 8010b5e:	f1a0 0315 	sub.w	r3, r0, #21
    lv_event_code_t code = lv_event_get_code(e);
 8010b62:	4606      	mov	r6, r0
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_MAIN_END) {
 8010b64:	b2db      	uxtb	r3, r3
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	d90c      	bls.n	8010b84 <lv_led_event+0x34>
        res = lv_obj_event_base(MY_CLASS, e);
 8010b6a:	4629      	mov	r1, r5
 8010b6c:	488b      	ldr	r0, [pc, #556]	; (8010d9c <lv_led_event+0x24c>)
 8010b6e:	f00a fb5e 	bl	801b22e <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8010b72:	2801      	cmp	r0, #1
 8010b74:	f040 810f 	bne.w	8010d96 <lv_led_event+0x246>
    }

    lv_obj_t * obj = lv_event_get_target(e);
 8010b78:	4628      	mov	r0, r5

        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
        lv_draw_rect(draw_ctx, &rect_dsc, &obj->coords);
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
    }
}
 8010b7a:	b020      	add	sp, #128	; 0x80
 8010b7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t * obj = lv_event_get_target(e);
 8010b80:	f00a bb6b 	b.w	801b25a <lv_event_get_target>
 8010b84:	4628      	mov	r0, r5
 8010b86:	f00a fb68 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 8010b8a:	2e15      	cmp	r6, #21
    lv_obj_t * obj = lv_event_get_target(e);
 8010b8c:	4604      	mov	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8010b8e:	f040 8102 	bne.w	8010d96 <lv_led_event+0x246>
        lv_draw_rect_dsc_init(&rect_dsc);
 8010b92:	4668      	mov	r0, sp
 8010b94:	f7f7 ff06 	bl	80089a4 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &rect_dsc);
 8010b98:	466a      	mov	r2, sp
 8010b9a:	2100      	movs	r1, #0
 8010b9c:	4620      	mov	r0, r4
 8010b9e:	f00b f9ab 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
        rect_dsc.bg_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.bg_color));
 8010ba2:	f012 fee4 	bl	802396e <lv_color_black>
 8010ba6:	4606      	mov	r6, r0
    c32.full        = lv_color_to32(color);
 8010ba8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8010bac:	f012 fe97 	bl	80238de <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8010bb0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010bb4:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8010bb8:	4631      	mov	r1, r6
 8010bba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010bbe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010bc2:	fa53 f280 	uxtab	r2, r3, r0
 8010bc6:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8010bc8:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8010bcc:	f012 fea5 	bl	802391a <lv_color_mix>
 8010bd0:	4681      	mov	r9, r0
        rect_dsc.bg_grad.stops[0].color = lv_color_mix(led->color, lv_color_black(),
 8010bd2:	f012 fecc 	bl	802396e <lv_color_black>
 8010bd6:	4606      	mov	r6, r0
    c32.full        = lv_color_to32(color);
 8010bd8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8010bdc:	f012 fe7f 	bl	80238de <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8010be0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010be4:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8010be8:	4631      	mov	r1, r6
 8010bea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010bee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010bf2:	fa53 f280 	uxtab	r2, r3, r0
 8010bf6:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8010bf8:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8010bfc:	f012 fe8d 	bl	802391a <lv_color_mix>
 8010c00:	4680      	mov	r8, r0
        rect_dsc.bg_grad.stops[1].color = lv_color_mix(led->color, lv_color_black(),
 8010c02:	f012 feb4 	bl	802396e <lv_color_black>
 8010c06:	4606      	mov	r6, r0
    c32.full        = lv_color_to32(color);
 8010c08:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8010c0c:	f012 fe67 	bl	80238de <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8010c10:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010c14:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8010c18:	4631      	mov	r1, r6
 8010c1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010c1e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010c22:	fa53 f280 	uxtab	r2, r3, r0
 8010c26:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8010c28:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8010c2c:	f012 fe75 	bl	802391a <lv_color_mix>
 8010c30:	4607      	mov	r7, r0
        rect_dsc.shadow_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.shadow_color));
 8010c32:	f012 fe9c 	bl	802396e <lv_color_black>
 8010c36:	4606      	mov	r6, r0
    c32.full        = lv_color_to32(color);
 8010c38:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8010c3c:	f012 fe4f 	bl	80238de <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8010c40:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010c44:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8010c48:	4631      	mov	r1, r6
 8010c4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010c4e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010c52:	fa53 f280 	uxtab	r2, r3, r0
 8010c56:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8010c58:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8010c5c:	f012 fe5d 	bl	802391a <lv_color_mix>
 8010c60:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
        rect_dsc.border_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.border_color));
 8010c64:	f012 fe83 	bl	802396e <lv_color_black>
 8010c68:	4606      	mov	r6, r0
    c32.full        = lv_color_to32(color);
 8010c6a:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8010c6e:	f012 fe36 	bl	80238de <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8010c72:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010c76:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8010c7a:	4631      	mov	r1, r6
 8010c7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010c80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010c84:	fa53 f280 	uxtab	r2, r3, r0
 8010c88:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8010c8a:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8010c8e:	f012 fe44 	bl	802391a <lv_color_mix>
 8010c92:	4606      	mov	r6, r0
        rect_dsc.outline_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.outline_color));
 8010c94:	f012 fe6b 	bl	802396e <lv_color_black>
 8010c98:	4682      	mov	sl, r0
    c32.full        = lv_color_to32(color);
 8010c9a:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8010c9e:	f012 fe1e 	bl	80238de <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8010ca2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010ca6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010caa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010cae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010cb2:	4651      	mov	r1, sl
 8010cb4:	fa53 f280 	uxtab	r2, r3, r0
 8010cb8:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8010cba:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8010cbe:	f012 fe2c 	bl	802391a <lv_color_mix>
 8010cc2:	4682      	mov	sl, r0
        rect_dsc.bg_color = lv_color_mix(rect_dsc.bg_color, lv_color_black(), led->bright);
 8010cc4:	f012 fe53 	bl	802396e <lv_color_black>
 8010cc8:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8010ccc:	4601      	mov	r1, r0
 8010cce:	4648      	mov	r0, r9
 8010cd0:	f012 fe23 	bl	802391a <lv_color_mix>
 8010cd4:	f8ad 0004 	strh.w	r0, [sp, #4]
        rect_dsc.bg_grad.stops[0].color   = lv_color_mix(rect_dsc.bg_grad.stops[0].color, lv_color_black(), led->bright);
 8010cd8:	f012 fe49 	bl	802396e <lv_color_black>
 8010cdc:	4601      	mov	r1, r0
 8010cde:	4640      	mov	r0, r8
 8010ce0:	f012 fe1b 	bl	802391a <lv_color_mix>
 8010ce4:	f8ad 0006 	strh.w	r0, [sp, #6]
        rect_dsc.bg_grad.stops[1].color   = lv_color_mix(rect_dsc.bg_grad.stops[1].color, lv_color_black(), led->bright);
 8010ce8:	f012 fe41 	bl	802396e <lv_color_black>
 8010cec:	4601      	mov	r1, r0
 8010cee:	4638      	mov	r0, r7
 8010cf0:	f012 fe13 	bl	802391a <lv_color_mix>
 8010cf4:	f8ad 000a 	strh.w	r0, [sp, #10]
        rect_dsc.border_color = lv_color_mix(rect_dsc.border_color, lv_color_black(), led->bright);
 8010cf8:	f012 fe39 	bl	802396e <lv_color_black>
 8010cfc:	4601      	mov	r1, r0
 8010cfe:	4630      	mov	r0, r6
        part_draw_dsc.draw_area = &obj->coords;
 8010d00:	f104 0614 	add.w	r6, r4, #20
        rect_dsc.border_color = lv_color_mix(rect_dsc.border_color, lv_color_black(), led->bright);
 8010d04:	f012 fe09 	bl	802391a <lv_color_mix>
 8010d08:	f8ad 001e 	strh.w	r0, [sp, #30]
        rect_dsc.shadow_color = lv_color_mix(rect_dsc.shadow_color, lv_color_black(), led->bright);
 8010d0c:	f012 fe2f 	bl	802396e <lv_color_black>
 8010d10:	4601      	mov	r1, r0
 8010d12:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8010d16:	f012 fe00 	bl	802391a <lv_color_mix>
 8010d1a:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 8010d1e:	f012 fe26 	bl	802396e <lv_color_black>
 8010d22:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8010d26:	4601      	mov	r1, r0
 8010d28:	4650      	mov	r0, sl
 8010d2a:	f012 fdf6 	bl	802391a <lv_color_mix>
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 8010d2e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8010d32:	3a50      	subs	r2, #80	; 0x50
 8010d34:	21af      	movs	r1, #175	; 0xaf
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 8010d36:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010d3a:	4628      	mov	r0, r5
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 8010d3c:	435a      	muls	r2, r3
 8010d3e:	fb92 f2f1 	sdiv	r2, r2, r1
 8010d42:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
 8010d46:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8010d4a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8010d4e:	3b50      	subs	r3, #80	; 0x50
 8010d50:	4353      	muls	r3, r2
 8010d52:	fb93 f3f1 	sdiv	r3, r3, r1
 8010d56:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010d5a:	f00a fad7 	bl	801b30c <lv_event_get_draw_ctx>
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8010d5e:	4601      	mov	r1, r0
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010d60:	4605      	mov	r5, r0
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8010d62:	a80e      	add	r0, sp, #56	; 0x38
 8010d64:	f00b fbbe 	bl	801c4e4 <lv_obj_draw_dsc_init>
        part_draw_dsc.class_p = MY_CLASS;
 8010d68:	4b0c      	ldr	r3, [pc, #48]	; (8010d9c <lv_led_event+0x24c>)
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8010d6a:	aa0e      	add	r2, sp, #56	; 0x38
 8010d6c:	211a      	movs	r1, #26
        part_draw_dsc.class_p = MY_CLASS;
 8010d6e:	930f      	str	r3, [sp, #60]	; 0x3c
        part_draw_dsc.type = LV_LED_DRAW_PART_RECTANGLE;
 8010d70:	2300      	movs	r3, #0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8010d72:	4620      	mov	r0, r4
        part_draw_dsc.draw_area = &obj->coords;
 8010d74:	9611      	str	r6, [sp, #68]	; 0x44
        part_draw_dsc.type = LV_LED_DRAW_PART_RECTANGLE;
 8010d76:	9310      	str	r3, [sp, #64]	; 0x40
        part_draw_dsc.part = LV_PART_MAIN;
 8010d78:	931b      	str	r3, [sp, #108]	; 0x6c
        part_draw_dsc.rect_dsc = &rect_dsc;
 8010d7a:	f8cd d048 	str.w	sp, [sp, #72]	; 0x48
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8010d7e:	f7f3 fce1 	bl	8004744 <lv_event_send>
        lv_draw_rect(draw_ctx, &rect_dsc, &obj->coords);
 8010d82:	4632      	mov	r2, r6
 8010d84:	4669      	mov	r1, sp
 8010d86:	4628      	mov	r0, r5
 8010d88:	f00e fb41 	bl	801f40e <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8010d8c:	aa0e      	add	r2, sp, #56	; 0x38
 8010d8e:	211b      	movs	r1, #27
 8010d90:	4620      	mov	r0, r4
 8010d92:	f7f3 fcd7 	bl	8004744 <lv_event_send>
}
 8010d96:	b020      	add	sp, #128	; 0x80
 8010d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d9c:	080291a0 	.word	0x080291a0

08010da0 <lv_menu_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_menu_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8010da0:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_set_layout(obj, LV_LAYOUT_FLEX);
 8010da2:	4b47      	ldr	r3, [pc, #284]	; (8010ec0 <lv_menu_constructor+0x120>)
{
 8010da4:	460c      	mov	r4, r1

    lv_menu_t * menu = (lv_menu_t *)obj;

    menu->mode_header = LV_MENU_HEADER_TOP_FIXED;
    menu->mode_root_back_btn = LV_MENU_ROOT_BACK_BTN_DISABLED;
    menu->cur_depth = 0;
 8010da6:	2500      	movs	r5, #0
    lv_obj_set_layout(obj, LV_LAYOUT_FLEX);
 8010da8:	8819      	ldrh	r1, [r3, #0]
 8010daa:	4620      	mov	r0, r4
 8010dac:	f00b fd0d 	bl	801c7ca <lv_obj_set_layout>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 8010db0:	4620      	mov	r0, r4
 8010db2:	2100      	movs	r1, #0
 8010db4:	f7fa fc0a 	bl	800b5cc <lv_obj_set_flex_flow>
    menu->prev_depth = 0;
    menu->sidebar_generated = false;
 8010db8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62

    _lv_ll_init(&(menu->history_ll), sizeof(lv_menu_history_t));
 8010dbc:	2104      	movs	r1, #4
 8010dbe:	f104 0054 	add.w	r0, r4, #84	; 0x54
    menu->sidebar_generated = false;
 8010dc2:	f023 030f 	bic.w	r3, r3, #15
    menu->cur_depth = 0;
 8010dc6:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
    menu->sidebar_generated = false;
 8010dca:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    _lv_ll_init(&(menu->history_ll), sizeof(lv_menu_history_t));
 8010dce:	f013 fe37 	bl	8024a40 <_lv_ll_init>

    menu->storage = lv_obj_create(obj);
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	f7f3 ffc4 	bl	8004d60 <lv_obj_create>
    lv_obj_add_flag(menu->storage, LV_OBJ_FLAG_HIDDEN);
 8010dd8:	2101      	movs	r1, #1
    menu->storage = lv_obj_create(obj);
 8010dda:	6260      	str	r0, [r4, #36]	; 0x24
    lv_obj_add_flag(menu->storage, LV_OBJ_FLAG_HIDDEN);
 8010ddc:	f00a fdc5 	bl	801b96a <lv_obj_add_flag>
    menu->sidebar_header = NULL;
    menu->sidebar_header_back_btn = NULL;
    menu->sidebar_header_title = NULL;
    menu->sidebar_page = NULL;

    lv_obj_t * main_cont = lv_obj_class_create_obj(&lv_menu_main_cont_class, obj);
 8010de0:	4621      	mov	r1, r4
    menu->sidebar = NULL;
 8010de2:	63e5      	str	r5, [r4, #60]	; 0x3c
    menu->sidebar_header_title = NULL;
 8010de4:	64e5      	str	r5, [r4, #76]	; 0x4c
    menu->sidebar_page = NULL;
 8010de6:	6425      	str	r5, [r4, #64]	; 0x40
    lv_obj_t * main_cont = lv_obj_class_create_obj(&lv_menu_main_cont_class, obj);
 8010de8:	4836      	ldr	r0, [pc, #216]	; (8010ec4 <lv_menu_constructor+0x124>)
    menu->sidebar_header_back_btn = NULL;
 8010dea:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
    lv_obj_t * main_cont = lv_obj_class_create_obj(&lv_menu_main_cont_class, obj);
 8010dee:	f7f4 f817 	bl	8004e20 <lv_obj_class_create_obj>
 8010df2:	4606      	mov	r6, r0
    lv_obj_class_init_obj(main_cont);
 8010df4:	f00b f822 	bl	801be3c <lv_obj_class_init_obj>
    lv_obj_set_height(main_cont, LV_PCT(100));
 8010df8:	f242 0164 	movw	r1, #8292	; 0x2064
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	f00b fcaa 	bl	801c756 <lv_obj_set_height>
    lv_obj_set_flex_grow(main_cont, 1);
 8010e02:	4630      	mov	r0, r6
 8010e04:	2101      	movs	r1, #1
 8010e06:	f012 f89f 	bl	8022f48 <lv_obj_set_flex_grow>
    lv_obj_set_flex_flow(main_cont, LV_FLEX_FLOW_COLUMN);
 8010e0a:	4630      	mov	r0, r6
 8010e0c:	2101      	movs	r1, #1
 8010e0e:	f7fa fbdd 	bl	800b5cc <lv_obj_set_flex_flow>
    lv_obj_add_flag(main_cont, LV_OBJ_FLAG_EVENT_BUBBLE);
 8010e12:	4630      	mov	r0, r6
 8010e14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010e18:	f00a fda7 	bl	801b96a <lv_obj_add_flag>
    lv_obj_clear_flag(main_cont, LV_OBJ_FLAG_CLICKABLE);
 8010e1c:	4630      	mov	r0, r6
 8010e1e:	2102      	movs	r1, #2
 8010e20:	f00a fdd9 	bl	801b9d6 <lv_obj_clear_flag>
    menu->main = main_cont;

    lv_obj_t * main_header = lv_obj_class_create_obj(&lv_menu_main_header_cont_class, main_cont);
 8010e24:	4631      	mov	r1, r6
    menu->main = main_cont;
 8010e26:	62a6      	str	r6, [r4, #40]	; 0x28
    lv_obj_t * main_header = lv_obj_class_create_obj(&lv_menu_main_header_cont_class, main_cont);
 8010e28:	4827      	ldr	r0, [pc, #156]	; (8010ec8 <lv_menu_constructor+0x128>)
 8010e2a:	f7f3 fff9 	bl	8004e20 <lv_obj_class_create_obj>
 8010e2e:	4606      	mov	r6, r0
    lv_obj_class_init_obj(main_header);
 8010e30:	f00b f804 	bl	801be3c <lv_obj_class_init_obj>
    lv_obj_set_size(main_header, LV_PCT(100), LV_SIZE_CONTENT);
 8010e34:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8010e38:	4630      	mov	r0, r6
 8010e3a:	f242 0164 	movw	r1, #8292	; 0x2064
 8010e3e:	f00b fca1 	bl	801c784 <lv_obj_set_size>
    lv_obj_set_flex_flow(main_header, LV_FLEX_FLOW_ROW);
 8010e42:	4629      	mov	r1, r5
 8010e44:	4630      	mov	r0, r6
 8010e46:	f7fa fbc1 	bl	800b5cc <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(main_header, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 8010e4a:	2302      	movs	r3, #2
 8010e4c:	4629      	mov	r1, r5
 8010e4e:	4630      	mov	r0, r6
 8010e50:	461a      	mov	r2, r3
 8010e52:	f7fa fbe3 	bl	800b61c <lv_obj_set_flex_align>
    lv_obj_clear_flag(main_header, LV_OBJ_FLAG_CLICKABLE);
 8010e56:	4630      	mov	r0, r6
 8010e58:	2102      	movs	r1, #2
 8010e5a:	f00a fdbc 	bl	801b9d6 <lv_obj_clear_flag>
    lv_obj_add_flag(main_header, LV_OBJ_FLAG_EVENT_BUBBLE);
 8010e5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010e62:	4630      	mov	r0, r6
 8010e64:	f00a fd81 	bl	801b96a <lv_obj_add_flag>
    menu->main_header = main_header;
 8010e68:	6326      	str	r6, [r4, #48]	; 0x30

    /* Create the default simple back btn and title */
    lv_obj_t * main_header_back_btn = lv_btn_create(menu->main_header);
 8010e6a:	4630      	mov	r0, r6
 8010e6c:	f002 ff30 	bl	8013cd0 <lv_btn_create>
 8010e70:	4606      	mov	r6, r0
    lv_obj_add_event_cb(main_header_back_btn, lv_menu_back_event_cb, LV_EVENT_CLICKED, menu);
 8010e72:	4623      	mov	r3, r4
 8010e74:	2207      	movs	r2, #7
 8010e76:	4915      	ldr	r1, [pc, #84]	; (8010ecc <lv_menu_constructor+0x12c>)
 8010e78:	f00a f9fb 	bl	801b272 <lv_obj_add_event_cb>
    lv_obj_add_flag(main_header_back_btn, LV_OBJ_FLAG_EVENT_BUBBLE);
 8010e7c:	4630      	mov	r0, r6
 8010e7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010e82:	f00a fd72 	bl	801b96a <lv_obj_add_flag>
    lv_obj_set_flex_flow(main_header_back_btn, LV_FLEX_FLOW_ROW);
 8010e86:	4629      	mov	r1, r5
 8010e88:	4630      	mov	r0, r6
 8010e8a:	f7fa fb9f 	bl	800b5cc <lv_obj_set_flex_flow>
    menu->main_header_back_btn = main_header_back_btn;
 8010e8e:	6366      	str	r6, [r4, #52]	; 0x34

    lv_obj_t * main_header_back_icon = lv_img_create(menu->main_header_back_btn);
 8010e90:	4630      	mov	r0, r6
 8010e92:	f004 f977 	bl	8015184 <lv_img_create>
    lv_img_set_src(main_header_back_icon, LV_SYMBOL_LEFT);
 8010e96:	490e      	ldr	r1, [pc, #56]	; (8010ed0 <lv_menu_constructor+0x130>)
 8010e98:	f015 ff2d 	bl	8026cf6 <lv_img_set_src>

    lv_obj_t * main_header_title = lv_label_create(menu->main_header);
 8010e9c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010e9e:	f005 f9d9 	bl	8016254 <lv_label_create>
 8010ea2:	4606      	mov	r6, r0
    lv_obj_add_flag(main_header_title, LV_OBJ_FLAG_HIDDEN);
 8010ea4:	2101      	movs	r1, #1
 8010ea6:	f00a fd60 	bl	801b96a <lv_obj_add_flag>
    menu->main_header_title = main_header_title;

    menu->main_page = NULL;
    menu->selected_tab = NULL;

    lv_obj_add_event_cb(obj, lv_menu_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, menu);
 8010eaa:	4623      	mov	r3, r4
 8010eac:	4620      	mov	r0, r4
    menu->main_header_title = main_header_title;
 8010eae:	63a6      	str	r6, [r4, #56]	; 0x38
    menu->main_page = NULL;
 8010eb0:	62e5      	str	r5, [r4, #44]	; 0x2c
    lv_obj_add_event_cb(obj, lv_menu_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, menu);
 8010eb2:	221c      	movs	r2, #28
    menu->selected_tab = NULL;
 8010eb4:	6525      	str	r5, [r4, #80]	; 0x50
    lv_obj_add_event_cb(obj, lv_menu_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, menu);
 8010eb6:	4907      	ldr	r1, [pc, #28]	; (8010ed4 <lv_menu_constructor+0x134>)

    LV_TRACE_OBJ_CREATE("finished");
}
 8010eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_add_event_cb(obj, lv_menu_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, menu);
 8010ebc:	f00a b9d9 	b.w	801b272 <lv_obj_add_event_cb>
 8010ec0:	24010cfe 	.word	0x24010cfe
 8010ec4:	08029248 	.word	0x08029248
 8010ec8:	0802922c 	.word	0x0802922c
 8010ecc:	08023bd7 	.word	0x08023bd7
 8010ed0:	0802ac5a 	.word	0x0802ac5a
 8010ed4:	080239cd 	.word	0x080239cd

08010ed8 <lv_meter_event>:
    _lv_ll_clear(&meter->scale_ll);

}

static void lv_meter_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8010ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8010edc:	f8df a314 	ldr.w	sl, [pc, #788]	; 80111f4 <lv_meter_event+0x31c>
{
 8010ee0:	b0df      	sub	sp, #380	; 0x17c
 8010ee2:	460c      	mov	r4, r1
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8010ee4:	4650      	mov	r0, sl
 8010ee6:	f00a f9a2 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8010eea:	2801      	cmp	r0, #1
 8010eec:	f040 8131 	bne.w	8011152 <lv_meter_event+0x27a>

    lv_event_code_t code = lv_event_get_code(e);
 8010ef0:	4620      	mov	r0, r4
 8010ef2:	f00a f9b6 	bl	801b262 <lv_event_get_code>
 8010ef6:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8010ef8:	4620      	mov	r0, r4
 8010efa:	f00a f9ae 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 8010efe:	2d15      	cmp	r5, #21
    lv_obj_t * obj = lv_event_get_target(e);
 8010f00:	4606      	mov	r6, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8010f02:	f040 8126 	bne.w	8011152 <lv_meter_event+0x27a>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010f06:	4620      	mov	r0, r4
static void draw_arcs(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, const lv_area_t * scale_area)
{
    lv_meter_t * meter = (lv_meter_t *)obj;

    lv_draw_arc_dsc_t arc_dsc;
    lv_draw_arc_dsc_init(&arc_dsc);
 8010f08:	ac44      	add	r4, sp, #272	; 0x110
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010f0a:	f00a f9ff 	bl	801b30c <lv_event_get_draw_ctx>
        lv_obj_get_content_coords(obj, &scale_area);
 8010f0e:	a919      	add	r1, sp, #100	; 0x64
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010f10:	9005      	str	r0, [sp, #20]
        lv_obj_get_content_coords(obj, &scale_area);
 8010f12:	4630      	mov	r0, r6
 8010f14:	f00b fcfa 	bl	801c90c <lv_obj_get_content_coords>
    lv_draw_arc_dsc_init(&arc_dsc);
 8010f18:	4620      	mov	r0, r4
 8010f1a:	f00d fc5e 	bl	801e7da <lv_draw_arc_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8010f1e:	2251      	movs	r2, #81	; 0x51
 8010f20:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8010f24:	4630      	mov	r0, r6
 8010f26:	f00c fddf 	bl	801dae8 <lv_obj_get_style_prop>
    return (bool)v.num;
 8010f2a:	3800      	subs	r0, #0
    arc_dsc.rounded = lv_obj_get_style_arc_rounded(obj, LV_PART_ITEMS);
 8010f2c:	f89d 311d 	ldrb.w	r3, [sp, #285]	; 0x11d
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8010f30:	f04f 0100 	mov.w	r1, #0
    return (bool)v.num;
 8010f34:	bf18      	it	ne
 8010f36:	2001      	movne	r0, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010f38:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
                                   scale->rotation + scale->angle_range);

        part_draw_dsc.radius = r_out + indic->type_data.arc.r_mod;
        part_draw_dsc.sub_part_ptr = indic;
        part_draw_dsc.p1 = &scale_center;
 8010f3c:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
    arc_dsc.rounded = lv_obj_get_style_arc_rounded(obj, LV_PART_ITEMS);
 8010f40:	f360 0382 	bfi	r3, r0, #2, #1
 8010f44:	3501      	adds	r5, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8010f46:	4630      	mov	r0, r6
 8010f48:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 8010f4c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8010f50:	1aed      	subs	r5, r5, r3
    lv_coord_t r_out = lv_area_get_width(scale_area) / 2 ;
 8010f52:	f3c5 32c0 	ubfx	r2, r5, #15, #1
 8010f56:	fa02 f585 	sxtah	r5, r2, r5
 8010f5a:	2260      	movs	r2, #96	; 0x60
    scale_center.x = scale_area->x1 + r_out;
 8010f5c:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8010f60:	442b      	add	r3, r5
 8010f62:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    scale_center.y = scale_area->y1 + r_out;
 8010f66:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 8010f6a:	442b      	add	r3, r5
 8010f6c:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
 8010f70:	f00c fdba 	bl	801dae8 <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8010f74:	9905      	ldr	r1, [sp, #20]
 8010f76:	4681      	mov	r9, r0
 8010f78:	a84c      	add	r0, sp, #304	; 0x130
 8010f7a:	f00b fab3 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_INDICATOR;
 8010f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    part_draw_dsc.arc_dsc = &arc_dsc;
 8010f82:	9454      	str	r4, [sp, #336]	; 0x150
    part_draw_dsc.part = LV_PART_INDICATOR;
 8010f84:	9359      	str	r3, [sp, #356]	; 0x164
    part_draw_dsc.type = LV_METER_DRAW_PART_ARC;
 8010f86:	2300      	movs	r3, #0
    part_draw_dsc.class_p = MY_CLASS;
 8010f88:	f8cd a134 	str.w	sl, [sp, #308]	; 0x134
    part_draw_dsc.type = LV_METER_DRAW_PART_ARC;
 8010f8c:	934e      	str	r3, [sp, #312]	; 0x138
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8010f8e:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8010f92:	4618      	mov	r0, r3
 8010f94:	9307      	str	r3, [sp, #28]
 8010f96:	f013 fdd0 	bl	8024b3a <_lv_ll_get_tail>
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	2c00      	cmp	r4, #0
 8010f9e:	f040 80db 	bne.w	8011158 <lv_meter_event+0x280>
 8010fa2:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
    lv_coord_t r_edge = LV_MIN(lv_area_get_width(scale_area) / 2, lv_area_get_height(scale_area) / 2);
    p_center.x = scale_area->x1 + r_edge;
    p_center.y = scale_area->y1 + r_edge;

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 8010fa6:	ac23      	add	r4, sp, #140	; 0x8c
 8010fa8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8010fac:	3501      	adds	r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010fae:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010fb2:	1a6d      	subs	r5, r5, r1
    lv_coord_t r_edge = LV_MIN(lv_area_get_width(scale_area) / 2, lv_area_get_height(scale_area) / 2);
 8010fb4:	f3c5 33c0 	ubfx	r3, r5, #15, #1
 8010fb8:	fa03 f585 	sxtah	r5, r3, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010fbc:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8010fc0:	3301      	adds	r3, #1
 8010fc2:	106d      	asrs	r5, r5, #1
 8010fc4:	1a9b      	subs	r3, r3, r2
 8010fc6:	f3c3 30c0 	ubfx	r0, r3, #15, #1
 8010fca:	fa00 f383 	sxtah	r3, r0, r3
    lv_draw_line_dsc_init(&line_dsc);
 8010fce:	4620      	mov	r0, r4
 8010fd0:	105b      	asrs	r3, r3, #1
 8010fd2:	429d      	cmp	r5, r3
 8010fd4:	bfa8      	it	ge
 8010fd6:	461d      	movge	r5, r3
    p_center.x = scale_area->x1 + r_edge;
 8010fd8:	fa11 f185 	uxtah	r1, r1, r5
    p_center.y = scale_area->y1 + r_edge;
 8010fdc:	fa12 f285 	uxtah	r2, r2, r5
    p_center.x = scale_area->x1 + r_edge;
 8010fe0:	fa1f f885 	uxth.w	r8, r5
 8010fe4:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
    p_center.y = scale_area->y1 + r_edge;
 8010fe8:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
    lv_draw_line_dsc_init(&line_dsc);
 8010fec:	f00d fcdf 	bl	801e9ae <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 8010ff0:	4622      	mov	r2, r4
 8010ff2:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	f00b f96a 	bl	801c2d0 <lv_obj_init_draw_line_dsc>
    line_dsc.raw_end = 1;
 8010ffc:	f89d 3095 	ldrb.w	r3, [sp, #149]	; 0x95

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 8011000:	a83c      	add	r0, sp, #240	; 0xf0
    line_dsc.raw_end = 1;
 8011002:	f043 0310 	orr.w	r3, r3, #16
 8011006:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
    lv_draw_label_dsc_init(&label_dsc);
 801100a:	f7f6 fe81 	bl	8007d10 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 801100e:	aa3c      	add	r2, sp, #240	; 0xf0
 8011010:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8011014:	4630      	mov	r0, r6
 8011016:	f00b f8be 	bl	801c196 <lv_obj_init_draw_label_dsc>
    lv_draw_mask_radius_param_t inner_minor_mask;
    lv_draw_mask_radius_param_t inner_major_mask;
    lv_draw_mask_radius_param_t outer_mask;

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801101a:	9905      	ldr	r1, [sp, #20]
 801101c:	a84c      	add	r0, sp, #304	; 0x130
 801101e:	f00b fa61 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
    part_draw_dsc.part = LV_PART_TICKS;
 8011022:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    part_draw_dsc.type = LV_METER_DRAW_PART_TICK;
    part_draw_dsc.line_dsc = &line_dsc;
 8011026:	9452      	str	r4, [sp, #328]	; 0x148
    part_draw_dsc.part = LV_PART_TICKS;
 8011028:	9359      	str	r3, [sp, #356]	; 0x164
    part_draw_dsc.type = LV_METER_DRAW_PART_TICK;
 801102a:	2303      	movs	r3, #3
    part_draw_dsc.class_p = MY_CLASS;
 801102c:	f8cd a134 	str.w	sl, [sp, #308]	; 0x134
    part_draw_dsc.type = LV_METER_DRAW_PART_TICK;
 8011030:	934e      	str	r3, [sp, #312]	; 0x138

    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 8011032:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8011036:	4618      	mov	r0, r3
 8011038:	9310      	str	r3, [sp, #64]	; 0x40
 801103a:	f013 fd7e 	bl	8024b3a <_lv_ll_get_tail>
            line_dsc.width = line_width;

            /*Draw a little bit longer lines to be sure the mask will clip them correctly
             *and to get a better precision*/
            lv_point_t p_outer;
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 801103e:	2d82      	cmp	r5, #130	; 0x82
    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 8011040:	4604      	mov	r4, r0
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 8011042:	bfb8      	it	lt
 8011044:	2582      	movlt	r5, #130	; 0x82
 8011046:	9512      	str	r5, [sp, #72]	; 0x48
    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 8011048:	2c00      	cmp	r4, #0
 801104a:	f040 80d5 	bne.w	80111f8 <lv_meter_event+0x320>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801104e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
    lv_point_t scale_center;
    scale_center.x = scale_area->x1 + r_edge;
    scale_center.y = scale_area->y1 + r_edge;

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 8011052:	a83c      	add	r0, sp, #240	; 0xf0
 8011054:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
            a.y2 = a.y1 + info.h - 1;

            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
            angle = angle * 10;
 8011058:	f04f 0a0a 	mov.w	sl, #10
 801105c:	3501      	adds	r5, #1
 801105e:	1aed      	subs	r5, r5, r3
    lv_coord_t r_edge = lv_area_get_width(scale_area) / 2;
 8011060:	f3c5 32c0 	ubfx	r2, r5, #15, #1
 8011064:	fa02 f585 	sxtah	r5, r2, r5
    scale_center.x = scale_area->x1 + r_edge;
 8011068:	f3c5 054f 	ubfx	r5, r5, #1, #16
 801106c:	442b      	add	r3, r5
 801106e:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
    scale_center.y = scale_area->y1 + r_edge;
 8011072:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 8011076:	442b      	add	r3, r5
 8011078:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
    lv_draw_line_dsc_init(&line_dsc);
 801107c:	f00d fc97 	bl	801e9ae <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc);
 8011080:	aa3c      	add	r2, sp, #240	; 0xf0
 8011082:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011086:	4630      	mov	r0, r6
 8011088:	f00b f922 	bl	801c2d0 <lv_obj_init_draw_line_dsc>
    lv_draw_img_dsc_init(&img_dsc);
 801108c:	a844      	add	r0, sp, #272	; 0x110
 801108e:	f00d fbe5 	bl	801e85c <lv_draw_img_dsc_init>
    lv_obj_init_draw_img_dsc(obj, LV_PART_ITEMS, &img_dsc);
 8011092:	aa44      	add	r2, sp, #272	; 0x110
 8011094:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011098:	4630      	mov	r0, r6
 801109a:	f00b f8c8 	bl	801c22e <lv_obj_init_draw_img_dsc>
 801109e:	2260      	movs	r2, #96	; 0x60
 80110a0:	4621      	mov	r1, r4
 80110a2:	4630      	mov	r0, r6
 80110a4:	f00c fd20 	bl	801dae8 <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 80110a8:	9905      	ldr	r1, [sp, #20]
 80110aa:	4680      	mov	r8, r0
    return (lv_opa_t)v.num;
 80110ac:	fa5f f980 	uxtb.w	r9, r0
 80110b0:	a84c      	add	r0, sp, #304	; 0x130
 80110b2:	f00b fa17 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 80110b6:	4b4f      	ldr	r3, [pc, #316]	; (80111f4 <lv_meter_event+0x31c>)
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80110b8:	9807      	ldr	r0, [sp, #28]
    part_draw_dsc.class_p = MY_CLASS;
 80110ba:	934d      	str	r3, [sp, #308]	; 0x134
    part_draw_dsc.p1 = &scale_center;
 80110bc:	ab2a      	add	r3, sp, #168	; 0xa8
 80110be:	9355      	str	r3, [sp, #340]	; 0x154
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80110c0:	f013 fd3b 	bl	8024b3a <_lv_ll_get_tail>
 80110c4:	4604      	mov	r4, r0
 80110c6:	2c00      	cmp	r4, #0
 80110c8:	f040 829f 	bne.w	801160a <lv_meter_event+0x732>
 80110cc:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
        lv_draw_rect_dsc_init(&mid_dsc);
 80110d0:	a84c      	add	r0, sp, #304	; 0x130
 80110d2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80110d6:	3401      	adds	r4, #1
 80110d8:	1b64      	subs	r4, r4, r5
        lv_coord_t r_edge = lv_area_get_width(&scale_area) / 2;
 80110da:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 80110de:	fa03 f484 	sxtah	r4, r3, r4
        scale_center.y = scale_area.y1 + r_edge;
 80110e2:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
        scale_center.x = scale_area.x1 + r_edge;
 80110e6:	f3c4 044f 	ubfx	r4, r4, #1, #16
 80110ea:	4425      	add	r5, r4
        scale_center.y = scale_area.y1 + r_edge;
 80110ec:	441c      	add	r4, r3
        lv_draw_rect_dsc_init(&mid_dsc);
 80110ee:	f7f7 fc59 	bl	80089a4 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &mid_dsc);
 80110f2:	aa4c      	add	r2, sp, #304	; 0x130
 80110f4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80110f8:	4630      	mov	r0, r6
 80110fa:	f00a fefd 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80110fe:	2201      	movs	r2, #1
 8011100:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8011104:	4630      	mov	r0, r6
 8011106:	f00c fcef 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801110a:	2204      	movs	r2, #4
    return (lv_coord_t)v.num;
 801110c:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801110e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        scale_center.x = scale_area.x1 + r_edge;
 8011112:	b2ad      	uxth	r5, r5
 8011114:	4630      	mov	r0, r6
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8011116:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801111a:	f00c fce5 	bl	801dae8 <lv_obj_get_style_prop>
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
 801111e:	aa44      	add	r2, sp, #272	; 0x110
        nm_cord.x1 = scale_center.x - w;
 8011120:	f3c7 074f 	ubfx	r7, r7, #1, #16
        scale_center.y = scale_area.y1 + r_edge;
 8011124:	b2a4      	uxth	r4, r4
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
 8011126:	a94c      	add	r1, sp, #304	; 0x130
        nm_cord.x1 = scale_center.x - w;
 8011128:	1beb      	subs	r3, r5, r7
        nm_cord.x2 = scale_center.x + w;
 801112a:	443d      	add	r5, r7
        nm_cord.x1 = scale_center.x - w;
 801112c:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 8011130:	f3c0 33c0 	ubfx	r3, r0, #15, #1
        nm_cord.x2 = scale_center.x + w;
 8011134:	f8ad 5114 	strh.w	r5, [sp, #276]	; 0x114
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 8011138:	fa03 f080 	sxtah	r0, r3, r0
        nm_cord.y1 = scale_center.y - h;
 801113c:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8011140:	1a23      	subs	r3, r4, r0
        nm_cord.y2 = scale_center.y + h;
 8011142:	4404      	add	r4, r0
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
 8011144:	9805      	ldr	r0, [sp, #20]
        nm_cord.y1 = scale_center.y - h;
 8011146:	f8ad 3112 	strh.w	r3, [sp, #274]	; 0x112
        nm_cord.y2 = scale_center.y + h;
 801114a:	f8ad 4116 	strh.w	r4, [sp, #278]	; 0x116
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
 801114e:	f00e f95e 	bl	801f40e <lv_draw_rect>
}
 8011152:	b05f      	add	sp, #380	; 0x17c
 8011154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(indic->type != LV_METER_INDICATOR_TYPE_ARC) continue;
 8011158:	7923      	ldrb	r3, [r4, #4]
 801115a:	2b03      	cmp	r3, #3
 801115c:	d143      	bne.n	80111e6 <lv_meter_event+0x30e>
        arc_dsc.color = indic->type_data.arc.color;
 801115e:	8b23      	ldrh	r3, [r4, #24]
 8011160:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        arc_dsc.width = indic->type_data.arc.width;
 8011164:	8a23      	ldrh	r3, [r4, #16]
 8011166:	f8ad 3112 	strh.w	r3, [sp, #274]	; 0x112
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801116a:	7962      	ldrb	r2, [r4, #5]
 801116c:	2afd      	cmp	r2, #253	; 0xfd
 801116e:	bf97      	itett	ls
 8011170:	fa5f f389 	uxtbls.w	r3, r9
 8011174:	464b      	movhi	r3, r9
 8011176:	4353      	mulls	r3, r2
 8011178:	121b      	asrls	r3, r3, #8
 801117a:	f88d 311c 	strb.w	r3, [sp, #284]	; 0x11c
        lv_meter_scale_t * scale = indic->scale;
 801117e:	6827      	ldr	r7, [r4, #0]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation,
 8011180:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
                                     scale->rotation + scale->angle_range);
 8011184:	8bfa      	ldrh	r2, [r7, #30]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation,
 8011186:	441a      	add	r2, r3
 8011188:	9200      	str	r2, [sp, #0]
 801118a:	68a0      	ldr	r0, [r4, #8]
 801118c:	e9d7 1205 	ldrd	r1, r2, [r7, #20]
 8011190:	f013 fd78 	bl	8024c84 <lv_map>
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
 8011194:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
                                   scale->rotation + scale->angle_range);
 8011198:	8bfa      	ldrh	r2, [r7, #30]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation,
 801119a:	4680      	mov	r8, r0
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
 801119c:	441a      	add	r2, r3
 801119e:	9200      	str	r2, [sp, #0]
 80111a0:	68e0      	ldr	r0, [r4, #12]
 80111a2:	e9d7 1205 	ldrd	r1, r2, [r7, #20]
 80111a6:	f013 fd6d 	bl	8024c84 <lv_map>
        part_draw_dsc.radius = r_out + indic->type_data.arc.r_mod;
 80111aa:	8b63      	ldrh	r3, [r4, #26]
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
 80111ac:	4607      	mov	r7, r0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80111ae:	aa4c      	add	r2, sp, #304	; 0x130
        part_draw_dsc.radius = r_out + indic->type_data.arc.r_mod;
 80111b0:	442b      	add	r3, r5
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80111b2:	211a      	movs	r1, #26
 80111b4:	4630      	mov	r0, r6
        lv_draw_arc(draw_ctx, &arc_dsc, &scale_center, part_draw_dsc.radius, start_angle, end_angle);
 80111b6:	b2bf      	uxth	r7, r7
        part_draw_dsc.radius = r_out + indic->type_data.arc.r_mod;
 80111b8:	f8ad 316c 	strh.w	r3, [sp, #364]	; 0x16c
        part_draw_dsc.sub_part_ptr = indic;
 80111bc:	945d      	str	r4, [sp, #372]	; 0x174
        part_draw_dsc.p1 = &scale_center;
 80111be:	f8cd b154 	str.w	fp, [sp, #340]	; 0x154
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80111c2:	f7f3 fabf 	bl	8004744 <lv_event_send>
        lv_draw_arc(draw_ctx, &arc_dsc, &scale_center, part_draw_dsc.radius, start_angle, end_angle);
 80111c6:	fa1f f388 	uxth.w	r3, r8
 80111ca:	465a      	mov	r2, fp
 80111cc:	a944      	add	r1, sp, #272	; 0x110
 80111ce:	9805      	ldr	r0, [sp, #20]
 80111d0:	9300      	str	r3, [sp, #0]
 80111d2:	9701      	str	r7, [sp, #4]
 80111d4:	f8bd 316c 	ldrh.w	r3, [sp, #364]	; 0x16c
 80111d8:	f00d fb0b 	bl	801e7f2 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80111dc:	aa4c      	add	r2, sp, #304	; 0x130
 80111de:	211b      	movs	r1, #27
 80111e0:	4630      	mov	r0, r6
 80111e2:	f7f3 faaf 	bl	8004744 <lv_event_send>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80111e6:	4621      	mov	r1, r4
 80111e8:	9807      	ldr	r0, [sp, #28]
 80111ea:	f013 fcad 	bl	8024b48 <_lv_ll_get_prev>
 80111ee:	4604      	mov	r4, r0
 80111f0:	e6d4      	b.n	8010f9c <lv_meter_event+0xc4>
 80111f2:	bf00      	nop
 80111f4:	0802930c 	.word	0x0802930c
        part_draw_dsc.sub_part_ptr = scale;
 80111f8:	945d      	str	r4, [sp, #372]	; 0x174
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 80111fa:	89a5      	ldrh	r5, [r4, #12]
        lv_coord_t r_in_minor = r_out - scale->tick_length;
 80111fc:	88a3      	ldrh	r3, [r4, #4]
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 80111fe:	eba8 0205 	sub.w	r2, r8, r5
 8011202:	eba5 0508 	sub.w	r5, r5, r8
        lv_coord_t r_in_minor = r_out - scale->tick_length;
 8011206:	eba8 0103 	sub.w	r1, r8, r3
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 801120a:	eba3 0308 	sub.w	r3, r3, r8
 801120e:	b297      	uxth	r7, r2
 8011210:	b212      	sxth	r2, r2
 8011212:	9211      	str	r2, [sp, #68]	; 0x44
        area_inner_minor.x1 = p_center.x - r_in_minor;
 8011214:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8011218:	fa12 f083 	uxtah	r0, r2, r3
        area_inner_minor.x2 = p_center.x + r_in_minor;
 801121c:	fa12 f281 	uxtah	r2, r2, r1
        area_inner_minor.x1 = p_center.x - r_in_minor;
 8011220:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
        area_inner_minor.y1 = p_center.y - r_in_minor;
 8011224:	f8bd 0056 	ldrh.w	r0, [sp, #86]	; 0x56
        area_inner_minor.x2 = p_center.x + r_in_minor;
 8011228:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 801122c:	f647 72ff 	movw	r2, #32767	; 0x7fff
        area_inner_minor.y1 = p_center.y - r_in_minor;
 8011230:	fa10 f383 	uxtah	r3, r0, r3
 8011234:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        area_inner_minor.y2 = p_center.y + r_in_minor;
 8011238:	fa10 f381 	uxtah	r3, r0, r1
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 801123c:	a91b      	add	r1, sp, #108	; 0x6c
 801123e:	a82a      	add	r0, sp, #168	; 0xa8
        area_inner_minor.y2 = p_center.y + r_in_minor;
 8011240:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 8011244:	2301      	movs	r3, #1
 8011246:	f7f7 f9a7 	bl	8008598 <lv_draw_mask_radius_init>
        area_inner_major.x1 = p_center.x - r_in_major;
 801124a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 801124e:	a91d      	add	r1, sp, #116	; 0x74
 8011250:	a830      	add	r0, sp, #192	; 0xc0
        area_inner_major.x1 = p_center.x - r_in_major;
 8011252:	fa13 f285 	uxtah	r2, r3, r5
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 8011256:	3b01      	subs	r3, #1
        area_inner_major.x1 = p_center.x - r_in_major;
 8011258:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 801125c:	443b      	add	r3, r7
        area_inner_major.y1 = p_center.y - r_in_major;
 801125e:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 8011262:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 8011266:	2301      	movs	r3, #1
        area_inner_major.y1 = p_center.y - r_in_major;
 8011268:	fa12 f585 	uxtah	r5, r2, r5
        area_inner_major.y2 = p_center.y + r_in_major - 1;
 801126c:	3a01      	subs	r2, #1
 801126e:	4417      	add	r7, r2
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 8011270:	f647 72ff 	movw	r2, #32767	; 0x7fff
        area_inner_major.y1 = p_center.y - r_in_major;
 8011274:	f8ad 5076 	strh.w	r5, [sp, #118]	; 0x76
        area_inner_major.y2 = p_center.y + r_in_major - 1;
 8011278:	f8ad 707a 	strh.w	r7, [sp, #122]	; 0x7a
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 801127c:	f7f7 f98c 	bl	8008598 <lv_draw_mask_radius_init>
        area_outer.x1 = p_center.x - r_out;
 8011280:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 8011284:	a836      	add	r0, sp, #216	; 0xd8
        area_outer.x1 = p_center.x - r_out;
 8011286:	eba2 0308 	sub.w	r3, r2, r8
        area_outer.x2 = p_center.x + r_out - 1;
 801128a:	3a01      	subs	r2, #1
        area_outer.x1 = p_center.x - r_out;
 801128c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        area_outer.x2 = p_center.x + r_out - 1;
 8011290:	4442      	add	r2, r8
        area_outer.y1 = p_center.y - r_out;
 8011292:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
        area_outer.x2 = p_center.x + r_out - 1;
 8011296:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 801129a:	f647 72ff 	movw	r2, #32767	; 0x7fff
        area_outer.y1 = p_center.y - r_out;
 801129e:	eba3 0108 	sub.w	r1, r3, r8
        area_outer.y2 = p_center.y + r_out - 1;
 80112a2:	3b01      	subs	r3, #1
 80112a4:	4443      	add	r3, r8
        area_outer.y1 = p_center.y - r_out;
 80112a6:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 80112aa:	a91f      	add	r1, sp, #124	; 0x7c
        area_outer.y2 = p_center.y + r_out - 1;
 80112ac:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 80112b0:	2300      	movs	r3, #0
 80112b2:	f7f7 f971 	bl	8008598 <lv_draw_mask_radius_init>
        int16_t outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 80112b6:	2100      	movs	r1, #0
 80112b8:	a836      	add	r0, sp, #216	; 0xd8
 80112ba:	f7f6 fff5 	bl	80082a8 <lv_draw_mask_add>
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 80112be:	8963      	ldrh	r3, [r4, #10]
        int16_t outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 80112c0:	9009      	str	r0, [sp, #36]	; 0x24
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 80112c2:	b1d3      	cbz	r3, 80112fa <lv_meter_event+0x422>
 80112c4:	3b01      	subs	r3, #1
 80112c6:	9306      	str	r3, [sp, #24]
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 80112c8:	2300      	movs	r3, #0
        for(i = 0; i < scale->tick_cnt; i++) {
 80112ca:	8862      	ldrh	r2, [r4, #2]
 80112cc:	9308      	str	r3, [sp, #32]
 80112ce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d814      	bhi.n	8011300 <lv_meter_event+0x428>
        lv_draw_mask_free_param(&inner_minor_mask);
 80112d6:	a82a      	add	r0, sp, #168	; 0xa8
 80112d8:	f00e f858 	bl	801f38c <lv_draw_mask_free_param>
        lv_draw_mask_free_param(&inner_major_mask);
 80112dc:	a830      	add	r0, sp, #192	; 0xc0
 80112de:	f00e f855 	bl	801f38c <lv_draw_mask_free_param>
        lv_draw_mask_free_param(&outer_mask);
 80112e2:	a836      	add	r0, sp, #216	; 0xd8
 80112e4:	f00e f852 	bl	801f38c <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(outer_mask_id);
 80112e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112ea:	f7f7 f813 	bl	8008314 <lv_draw_mask_remove_id>
    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 80112ee:	4621      	mov	r1, r4
 80112f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80112f2:	f013 fc29 	bl	8024b48 <_lv_ll_get_prev>
 80112f6:	4604      	mov	r4, r0
 80112f8:	e6a6      	b.n	8011048 <lv_meter_event+0x170>
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 80112fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112fe:	e7e2      	b.n	80112c6 <lv_meter_event+0x3ee>
            minor_cnt++;
 8011300:	9b06      	ldr	r3, [sp, #24]
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 8011302:	3a01      	subs	r2, #1
            minor_cnt++;
 8011304:	3301      	adds	r3, #1
 8011306:	9306      	str	r3, [sp, #24]
            if(minor_cnt == scale->tick_major_nth) {
 8011308:	9906      	ldr	r1, [sp, #24]
 801130a:	8963      	ldrh	r3, [r4, #10]
 801130c:	4299      	cmp	r1, r3
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 801130e:	f04f 0100 	mov.w	r1, #0
                minor_cnt = 0;
 8011312:	bf05      	ittet	eq
 8011314:	2300      	moveq	r3, #0
                major = true;
 8011316:	f04f 0a01 	moveq.w	sl, #1
            bool major = false;
 801131a:	f04f 0a00 	movne.w	sl, #0
                minor_cnt = 0;
 801131e:	9306      	streq	r3, [sp, #24]
 8011320:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8011324:	930c      	str	r3, [sp, #48]	; 0x30
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 8011326:	69a3      	ldr	r3, [r4, #24]
 8011328:	980c      	ldr	r0, [sp, #48]	; 0x30
 801132a:	9300      	str	r3, [sp, #0]
 801132c:	6963      	ldr	r3, [r4, #20]
 801132e:	f013 fca9 	bl	8024c84 <lv_map>
 8011332:	4681      	mov	r9, r0
            part_draw_dsc.value = value_of_line;
 8011334:	905c      	str	r0, [sp, #368]	; 0x170
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 8011336:	f1ba 0f00 	cmp.w	sl, #0
 801133a:	f000 80ee 	beq.w	801151a <lv_meter_event+0x642>
 801133e:	7a23      	ldrb	r3, [r4, #8]
 8011340:	f003 031f 	and.w	r3, r3, #31
 8011344:	930d      	str	r3, [sp, #52]	; 0x34
 8011346:	8923      	ldrh	r3, [r4, #8]
 8011348:	f3c3 1345 	ubfx	r3, r3, #5, #6
 801134c:	930e      	str	r3, [sp, #56]	; 0x38
 801134e:	7a63      	ldrb	r3, [r4, #9]
 8011350:	08db      	lsrs	r3, r3, #3
 8011352:	930a      	str	r3, [sp, #40]	; 0x28
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 8011354:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8011358:	9807      	ldr	r0, [sp, #28]
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 801135a:	930b      	str	r3, [sp, #44]	; 0x2c
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801135c:	f013 fbed 	bl	8024b3a <_lv_ll_get_tail>
 8011360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011362:	4605      	mov	r5, r0
            lv_coord_t line_width = line_width_ori;
 8011364:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8011368:	e9dd 270d 	ldrd	r2, r7, [sp, #52]	; 0x34
 801136c:	2d00      	cmp	r5, #0
 801136e:	f040 80e2 	bne.w	8011536 <lv_meter_event+0x65e>
            int32_t angle_upscale = ((i * scale->angle_range) * 10) / (scale->tick_cnt - 1) +  + scale->rotation * 10;
 8011372:	8be1      	ldrh	r1, [r4, #30]
 8011374:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011376:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 801137a:	4341      	muls	r1, r0
 801137c:	200a      	movs	r0, #10
 801137e:	f10c 3cff 	add.w	ip, ip, #4294967295
            line_dsc.width = line_width;
 8011382:	f8ad b08e 	strh.w	fp, [sp, #142]	; 0x8e
            int32_t angle_upscale = ((i * scale->angle_range) * 10) / (scale->tick_cnt - 1) +  + scale->rotation * 10;
 8011386:	4341      	muls	r1, r0
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 8011388:	f10d 0b54 	add.w	fp, sp, #84	; 0x54
            int32_t angle_upscale = ((i * scale->angle_range) * 10) / (scale->tick_cnt - 1) +  + scale->rotation * 10;
 801138c:	fb91 f1fc 	sdiv	r1, r1, ip
 8011390:	f8b4 c020 	ldrh.w	ip, [r4, #32]
 8011394:	fb1c 1100 	smlabb	r1, ip, r0, r1
 8011398:	910f      	str	r1, [sp, #60]	; 0x3c
            line_dsc.color = line_color;
 801139a:	f89d 108c 	ldrb.w	r1, [sp, #140]	; 0x8c
 801139e:	f362 0104 	bfi	r1, r2, #0, #5
 80113a2:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
 80113a6:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
            lv_point_transform(&p_outer, angle_upscale, 256, &p_center);
 80113aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
            line_dsc.color = line_color;
 80113ac:	f367 124a 	bfi	r2, r7, #5, #6
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 80113b0:	af16      	add	r7, sp, #88	; 0x58
            line_dsc.color = line_color;
 80113b2:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 80113b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
            lv_point_transform(&p_outer, angle_upscale, 256, &p_center);
 80113ba:	4638      	mov	r0, r7
            line_dsc.color = line_color;
 80113bc:	f363 02c7 	bfi	r2, r3, #3, #5
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 80113c0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
            line_dsc.color = line_color;
 80113c4:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 80113c8:	4443      	add	r3, r8
 80113ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80113cc:	4413      	add	r3, r2
            lv_point_transform(&p_outer, angle_upscale, 256, &p_center);
 80113ce:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 80113d2:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p_outer.y = p_center.y;
 80113d6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80113da:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            lv_point_transform(&p_outer, angle_upscale, 256, &p_center);
 80113de:	465b      	mov	r3, fp
 80113e0:	f001 f868 	bl	80124b4 <lv_point_transform>
            part_draw_dsc.id = i;
 80113e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            part_draw_dsc.p2 = &p_outer;
 80113e6:	e9cd b755 	strd	fp, r7, [sp, #340]	; 0x154
            part_draw_dsc.label_dsc = &label_dsc;
 80113ea:	af3c      	add	r7, sp, #240	; 0xf0
            part_draw_dsc.id = i;
 80113ec:	935a      	str	r3, [sp, #360]	; 0x168
            part_draw_dsc.label_dsc = &label_dsc;
 80113ee:	9751      	str	r7, [sp, #324]	; 0x144
            if(major) {
 80113f0:	f1ba 0f00 	cmp.w	sl, #0
 80113f4:	f000 80fe 	beq.w	80115f4 <lv_meter_event+0x71c>
                lv_draw_mask_remove_id(outer_mask_id);
 80113f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113fa:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 80113fe:	f7f6 ff89 	bl	8008314 <lv_draw_mask_remove_id>
                uint32_t r_text = r_in_major - scale->label_gap;
 8011402:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011404:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
                lv_point_transform(&p, angle_upscale, 256, &p_center);
 8011408:	a817      	add	r0, sp, #92	; 0x5c
 801140a:	990f      	ldr	r1, [sp, #60]	; 0x3c
                uint32_t r_text = r_in_major - scale->label_gap;
 801140c:	1ad3      	subs	r3, r2, r3
                p.x = p_center.x + r_text;
 801140e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8011412:	4413      	add	r3, r2
                lv_point_transform(&p, angle_upscale, 256, &p_center);
 8011414:	f44f 7280 	mov.w	r2, #256	; 0x100
                p.x = p_center.x + r_text;
 8011418:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                p.y = p_center.y;
 801141c:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8011420:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                lv_point_transform(&p, angle_upscale, 256, &p_center);
 8011424:	465b      	mov	r3, fp
 8011426:	f001 f845 	bl	80124b4 <lv_point_transform>
 801142a:	4639      	mov	r1, r7
                lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, value_of_line);
 801142c:	af26      	add	r7, sp, #152	; 0x98
 801142e:	2220      	movs	r2, #32
 8011430:	4650      	mov	r0, sl
 8011432:	f009 f99e 	bl	801a772 <memcpy>
 8011436:	464b      	mov	r3, r9
 8011438:	4aa3      	ldr	r2, [pc, #652]	; (80116c8 <lv_meter_event+0x7f0>)
 801143a:	2110      	movs	r1, #16
 801143c:	4638      	mov	r0, r7
                part_draw_dsc.label_dsc = &label_dsc_tmp;
 801143e:	f8cd a144 	str.w	sl, [sp, #324]	; 0x144
                lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, value_of_line);
 8011442:	f7f1 fc65 	bl	8002d10 <snprintf>
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8011446:	aa4c      	add	r2, sp, #304	; 0x130
 8011448:	211a      	movs	r1, #26
 801144a:	4630      	mov	r0, r6
                part_draw_dsc.text = buf;
 801144c:	9757      	str	r7, [sp, #348]	; 0x15c
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801144e:	f7f3 f979 	bl	8004744 <lv_event_send>
                lv_txt_get_size(&label_size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 8011452:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8011456:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8011458:	9957      	ldr	r1, [sp, #348]	; 0x15c
 801145a:	a818      	add	r0, sp, #96	; 0x60
 801145c:	9301      	str	r3, [sp, #4]
 801145e:	f9bd 3102 	ldrsh.w	r3, [sp, #258]	; 0x102
 8011462:	9502      	str	r5, [sp, #8]
 8011464:	9300      	str	r3, [sp, #0]
 8011466:	f9bd 3104 	ldrsh.w	r3, [sp, #260]	; 0x104
 801146a:	f014 fa19 	bl	80258a0 <lv_txt_get_size>
                label_cord.x1 = p.x - label_size.x / 2;
 801146e:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
                label_cord.y1 = p.y - label_size.y / 2;
 8011472:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
                label_cord.x1 = p.x - label_size.x / 2;
 8011476:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 801147a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
                label_cord.y1 = p.y - label_size.y / 2;
 801147e:	eb01 77d1 	add.w	r7, r1, r1, lsr #31
                lv_draw_label(draw_ctx, part_draw_dsc.label_dsc, &label_cord, part_draw_dsc.text, NULL);
 8011482:	9500      	str	r5, [sp, #0]
                label_cord.x1 = p.x - label_size.x / 2;
 8011484:	eba2 0263 	sub.w	r2, r2, r3, asr #1
                label_cord.y1 = p.y - label_size.y / 2;
 8011488:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801148c:	eba3 0367 	sub.w	r3, r3, r7, asr #1
                label_cord.x1 = p.x - label_size.x / 2;
 8011490:	b292      	uxth	r2, r2
                label_cord.y1 = p.y - label_size.y / 2;
 8011492:	b29b      	uxth	r3, r3
                label_cord.x1 = p.x - label_size.x / 2;
 8011494:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
                label_cord.x2 = label_cord.x1 + label_size.x;
 8011498:	4402      	add	r2, r0
                label_cord.y1 = p.y - label_size.y / 2;
 801149a:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
                label_cord.y2 = label_cord.y1 + label_size.y;
 801149e:	440b      	add	r3, r1
                lv_draw_label(draw_ctx, part_draw_dsc.label_dsc, &label_cord, part_draw_dsc.text, NULL);
 80114a0:	9805      	ldr	r0, [sp, #20]
 80114a2:	9951      	ldr	r1, [sp, #324]	; 0x144
                label_cord.x2 = label_cord.x1 + label_size.x;
 80114a4:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
                lv_draw_label(draw_ctx, part_draw_dsc.label_dsc, &label_cord, part_draw_dsc.text, NULL);
 80114a8:	aa21      	add	r2, sp, #132	; 0x84
                label_cord.y2 = label_cord.y1 + label_size.y;
 80114aa:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                lv_draw_label(draw_ctx, part_draw_dsc.label_dsc, &label_cord, part_draw_dsc.text, NULL);
 80114ae:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 80114b0:	f7f6 fc46 	bl	8007d40 <lv_draw_label>
                outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 80114b4:	4629      	mov	r1, r5
 80114b6:	a836      	add	r0, sp, #216	; 0xd8
 80114b8:	f7f6 fef6 	bl	80082a8 <lv_draw_mask_add>
 80114bc:	9009      	str	r0, [sp, #36]	; 0x24
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 80114be:	a830      	add	r0, sp, #192	; 0xc0
 80114c0:	2100      	movs	r1, #0
 80114c2:	f7f6 fef1 	bl	80082a8 <lv_draw_mask_add>
 80114c6:	4605      	mov	r5, r0
            lv_draw_line(draw_ctx, &line_dsc, &p_outer, &p_center);
 80114c8:	ab15      	add	r3, sp, #84	; 0x54
 80114ca:	aa16      	add	r2, sp, #88	; 0x58
 80114cc:	a923      	add	r1, sp, #140	; 0x8c
 80114ce:	9805      	ldr	r0, [sp, #20]
 80114d0:	f00d fa7a 	bl	801e9c8 <lv_draw_line>
            lv_draw_mask_remove_id(inner_act_mask_id);
 80114d4:	4628      	mov	r0, r5
 80114d6:	f7f6 ff1d 	bl	8008314 <lv_draw_mask_remove_id>
            lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, &part_draw_dsc);
 80114da:	aa4c      	add	r2, sp, #304	; 0x130
 80114dc:	2116      	movs	r1, #22
 80114de:	4630      	mov	r0, r6
 80114e0:	f7f3 f930 	bl	8004744 <lv_event_send>
            line_dsc.color = line_color_ori;
 80114e4:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
 80114e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80114ea:	f362 0304 	bfi	r3, r2, #0, #5
 80114ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80114f0:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 80114f4:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80114f8:	f362 134a 	bfi	r3, r2, #5, #6
 80114fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114fe:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
 8011502:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8011506:	f362 03c7 	bfi	r3, r2, #3, #5
 801150a:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
            line_dsc.width = line_width_ori;
 801150e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011510:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(i = 0; i < scale->tick_cnt; i++) {
 8011514:	9b08      	ldr	r3, [sp, #32]
 8011516:	3301      	adds	r3, #1
 8011518:	e6d7      	b.n	80112ca <lv_meter_event+0x3f2>
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 801151a:	7823      	ldrb	r3, [r4, #0]
 801151c:	f003 031f 	and.w	r3, r3, #31
 8011520:	930d      	str	r3, [sp, #52]	; 0x34
 8011522:	8823      	ldrh	r3, [r4, #0]
 8011524:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8011528:	930e      	str	r3, [sp, #56]	; 0x38
 801152a:	7863      	ldrb	r3, [r4, #1]
 801152c:	08db      	lsrs	r3, r3, #3
 801152e:	930a      	str	r3, [sp, #40]	; 0x28
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 8011530:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011534:	e710      	b.n	8011358 <lv_meter_event+0x480>
                if(indic->type != LV_METER_INDICATOR_TYPE_SCALE_LINES) continue;
 8011536:	7929      	ldrb	r1, [r5, #4]
 8011538:	2902      	cmp	r1, #2
 801153a:	d114      	bne.n	8011566 <lv_meter_event+0x68e>
                if(value_of_line >= indic->start_value && value_of_line <= indic->end_value) {
 801153c:	68a9      	ldr	r1, [r5, #8]
 801153e:	4589      	cmp	r9, r1
 8011540:	db11      	blt.n	8011566 <lv_meter_event+0x68e>
 8011542:	68e8      	ldr	r0, [r5, #12]
 8011544:	4581      	cmp	r9, r0
 8011546:	dc0e      	bgt.n	8011566 <lv_meter_event+0x68e>
                    line_width += indic->type_data.scale_lines.width_mod;
 8011548:	8a2b      	ldrh	r3, [r5, #16]
                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
 801154a:	8a6f      	ldrh	r7, [r5, #18]
                    line_width += indic->type_data.scale_lines.width_mod;
 801154c:	445b      	add	r3, fp
 801154e:	fa0f fb83 	sxth.w	fp, r3
                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
 8011552:	8aab      	ldrh	r3, [r5, #20]
 8011554:	429f      	cmp	r7, r3
 8011556:	d110      	bne.n	801157a <lv_meter_event+0x6a2>
                        line_color = indic->type_data.scale_lines.color_start;
 8011558:	7caa      	ldrb	r2, [r5, #18]
 801155a:	f3c7 1745 	ubfx	r7, r7, #5, #6
 801155e:	7ceb      	ldrb	r3, [r5, #19]
 8011560:	f002 021f 	and.w	r2, r2, #31
 8011564:	08db      	lsrs	r3, r3, #3
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8011566:	4629      	mov	r1, r5
 8011568:	9807      	ldr	r0, [sp, #28]
 801156a:	9313      	str	r3, [sp, #76]	; 0x4c
 801156c:	920f      	str	r2, [sp, #60]	; 0x3c
 801156e:	f013 faeb 	bl	8024b48 <_lv_ll_get_prev>
 8011572:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011574:	4605      	mov	r5, r0
 8011576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011578:	e6f8      	b.n	801136c <lv_meter_event+0x494>
                        if(indic->type_data.scale_lines.local_grad) {
 801157a:	7dab      	ldrb	r3, [r5, #22]
 801157c:	22ff      	movs	r2, #255	; 0xff
 801157e:	f013 0301 	ands.w	r3, r3, #1
                            ratio = lv_map(value_of_line, indic->start_value, indic->end_value, LV_OPA_TRANSP, LV_OPA_COVER);
 8011582:	9200      	str	r2, [sp, #0]
 8011584:	bf1c      	itt	ne
 8011586:	2300      	movne	r3, #0
 8011588:	4602      	movne	r2, r0
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 801158a:	4648      	mov	r0, r9
 801158c:	bf08      	it	eq
 801158e:	e9d4 1205 	ldrdeq	r1, r2, [r4, #20]
 8011592:	f013 fb77 	bl	8024c84 <lv_map>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011596:	7ceb      	ldrb	r3, [r5, #19]
 8011598:	b2c0      	uxtb	r0, r0
 801159a:	7d69      	ldrb	r1, [r5, #21]
 801159c:	08db      	lsrs	r3, r3, #3
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801159e:	8a6f      	ldrh	r7, [r5, #18]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80115a0:	f1c0 02ff 	rsb	r2, r0, #255	; 0xff
 80115a4:	08c9      	lsrs	r1, r1, #3
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80115a6:	f3c7 1745 	ubfx	r7, r7, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80115aa:	f895 e014 	ldrb.w	lr, [r5, #20]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80115ae:	4353      	muls	r3, r2
 80115b0:	f248 0c81 	movw	ip, #32897	; 0x8081
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80115b4:	4357      	muls	r7, r2
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80115b6:	f00e 0e1f 	and.w	lr, lr, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80115ba:	fb01 3300 	mla	r3, r1, r0, r3
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80115be:	8aa9      	ldrh	r1, [r5, #20]
 80115c0:	f3c1 1145 	ubfx	r1, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80115c4:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80115c6:	fb01 7700 	mla	r7, r1, r0, r7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80115ca:	7ca9      	ldrb	r1, [r5, #18]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80115cc:	fb0c f303 	mul.w	r3, ip, r3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80115d0:	f001 011f 	and.w	r1, r1, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80115d4:	3780      	adds	r7, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80115d6:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80115da:	434a      	muls	r2, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80115dc:	fb0c f707 	mul.w	r7, ip, r7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80115e0:	fb0e 2200 	mla	r2, lr, r0, r2
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80115e4:	f3c7 57c5 	ubfx	r7, r7, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80115e8:	3280      	adds	r2, #128	; 0x80
 80115ea:	fb0c f202 	mul.w	r2, ip, r2
 80115ee:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    return ret;
 80115f2:	e7b8      	b.n	8011566 <lv_meter_event+0x68e>
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80115f4:	aa4c      	add	r2, sp, #304	; 0x130
 80115f6:	211a      	movs	r1, #26
 80115f8:	4630      	mov	r0, r6
                part_draw_dsc.label_dsc = NULL;
 80115fa:	f8cd a144 	str.w	sl, [sp, #324]	; 0x144
                part_draw_dsc.text = NULL;
 80115fe:	f8cd a15c 	str.w	sl, [sp, #348]	; 0x15c
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8011602:	f7f3 f89f 	bl	8004744 <lv_event_send>
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 8011606:	a82a      	add	r0, sp, #168	; 0xa8
 8011608:	e75a      	b.n	80114c0 <lv_meter_event+0x5e8>
        lv_meter_scale_t * scale = indic->scale;
 801160a:	6827      	ldr	r7, [r4, #0]
        part_draw_dsc.sub_part_ptr = indic;
 801160c:	945d      	str	r4, [sp, #372]	; 0x174
        if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_LINE) {
 801160e:	7923      	ldrb	r3, [r4, #4]
 8011610:	2b01      	cmp	r3, #1
 8011612:	d15b      	bne.n	80116cc <lv_meter_event+0x7f4>
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 8011614:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 8011618:	f647 7bff 	movw	fp, #32767	; 0x7fff
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 801161c:	8bfa      	ldrh	r2, [r7, #30]
 801161e:	441a      	add	r2, r3
 8011620:	9200      	str	r2, [sp, #0]
 8011622:	68e0      	ldr	r0, [r4, #12]
 8011624:	e9d7 1205 	ldrd	r1, r2, [r7, #20]
 8011628:	f013 fb2c 	bl	8024c84 <lv_map>
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 801162c:	8a63      	ldrh	r3, [r4, #18]
 801162e:	8bba      	ldrh	r2, [r7, #28]
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 8011630:	4601      	mov	r1, r0
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 8011632:	442b      	add	r3, r5
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 8011634:	b200      	sxth	r0, r0
 8011636:	9106      	str	r1, [sp, #24]
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 8011638:	189f      	adds	r7, r3, r2
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 801163a:	f001 f833 	bl	80126a4 <lv_trigo_sin>
 801163e:	9906      	ldr	r1, [sp, #24]
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 8011640:	b23f      	sxth	r7, r7
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 8011642:	fb00 f207 	mul.w	r2, r0, r7
 8011646:	f8bd 00aa 	ldrh.w	r0, [sp, #170]	; 0xaa
 801164a:	fb92 f2fb 	sdiv	r2, r2, fp
 801164e:	4402      	add	r2, r0
 8011650:	f101 005a 	add.w	r0, r1, #90	; 0x5a
 8011654:	b200      	sxth	r0, r0
 8011656:	f8ad 20da 	strh.w	r2, [sp, #218]	; 0xda
 801165a:	f001 f823 	bl	80126a4 <lv_trigo_sin>
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 801165e:	4378      	muls	r0, r7
 8011660:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
            part_draw_dsc.line_dsc = &line_dsc;
 8011664:	af3c      	add	r7, sp, #240	; 0xf0
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8011666:	211a      	movs	r1, #26
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 8011668:	fb90 f0fb 	sdiv	r0, r0, fp
 801166c:	4418      	add	r0, r3
 801166e:	f8ad 00d8 	strh.w	r0, [sp, #216]	; 0xd8
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8011672:	4630      	mov	r0, r6
            line_dsc.color = indic->type_data.needle_line.color;
 8011674:	8aa3      	ldrh	r3, [r4, #20]
 8011676:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
            line_dsc.width = indic->type_data.needle_line.width;
 801167a:	8a23      	ldrh	r3, [r4, #16]
 801167c:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8011680:	7962      	ldrb	r2, [r4, #5]
            part_draw_dsc.line_dsc = &line_dsc;
 8011682:	9752      	str	r7, [sp, #328]	; 0x148
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8011684:	2afd      	cmp	r2, #253	; 0xfd
 8011686:	bf96      	itet	ls
 8011688:	fa5f f388 	uxtbls.w	r3, r8
 801168c:	464b      	movhi	r3, r9
 801168e:	4353      	mulls	r3, r2
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8011690:	aa4c      	add	r2, sp, #304	; 0x130
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8011692:	bf98      	it	ls
 8011694:	0a1b      	lsrls	r3, r3, #8
 8011696:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_LINE;
 801169a:	2301      	movs	r3, #1
 801169c:	935a      	str	r3, [sp, #360]	; 0x168
            part_draw_dsc.p2 = &p_end;
 801169e:	ab36      	add	r3, sp, #216	; 0xd8
 80116a0:	9356      	str	r3, [sp, #344]	; 0x158
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80116a2:	f7f3 f84f 	bl	8004744 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &scale_center, &p_end);
 80116a6:	ab36      	add	r3, sp, #216	; 0xd8
 80116a8:	aa2a      	add	r2, sp, #168	; 0xa8
 80116aa:	4639      	mov	r1, r7
 80116ac:	9805      	ldr	r0, [sp, #20]
 80116ae:	f00d f98b 	bl	801e9c8 <lv_draw_line>
            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_IMG;
            part_draw_dsc.img_dsc = &img_dsc;

            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
            lv_draw_img(draw_ctx, &img_dsc, &a, indic->type_data.needle_img.src);
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80116b2:	aa4c      	add	r2, sp, #304	; 0x130
 80116b4:	211b      	movs	r1, #27
 80116b6:	4630      	mov	r0, r6
 80116b8:	f7f3 f844 	bl	8004744 <lv_event_send>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80116bc:	4621      	mov	r1, r4
 80116be:	9807      	ldr	r0, [sp, #28]
 80116c0:	f013 fa42 	bl	8024b48 <_lv_ll_get_prev>
 80116c4:	4604      	mov	r4, r0
 80116c6:	e4fe      	b.n	80110c6 <lv_meter_event+0x1ee>
 80116c8:	0802e11e 	.word	0x0802e11e
        else if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_IMG) {
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d1f5      	bne.n	80116bc <lv_meter_event+0x7e4>
            if(indic->type_data.needle_img.src == NULL) continue;
 80116d0:	6923      	ldr	r3, [r4, #16]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d0f2      	beq.n	80116bc <lv_meter_event+0x7e4>
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80116d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80116da:	8bfa      	ldrh	r2, [r7, #30]
 80116dc:	441a      	add	r2, r3
 80116de:	9200      	str	r2, [sp, #0]
 80116e0:	68e0      	ldr	r0, [r4, #12]
 80116e2:	e9d7 1205 	ldrd	r1, r2, [r7, #20]
 80116e6:	f013 facd 	bl	8024c84 <lv_map>
            lv_img_decoder_get_info(indic->type_data.needle_img.src, &info);
 80116ea:	a930      	add	r1, sp, #192	; 0xc0
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80116ec:	4607      	mov	r7, r0
            lv_img_decoder_get_info(indic->type_data.needle_img.src, &info);
 80116ee:	6920      	ldr	r0, [r4, #16]
 80116f0:	f7f7 fc5a 	bl	8008fa8 <lv_img_decoder_get_info>
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 80116f4:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 80116f8:	f8bd 20a8 	ldrh.w	r2, [sp, #168]	; 0xa8
            angle = angle * 10;
 80116fc:	fb0a f707 	mul.w	r7, sl, r7
            a.x2 = a.x1 + info.w - 1;
 8011700:	9930      	ldr	r1, [sp, #192]	; 0xc0
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 8011702:	eba2 020c 	sub.w	r2, r2, ip
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8011706:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
            a.x2 = a.x1 + info.w - 1;
 801170a:	f3c1 218a 	ubfx	r1, r1, #10, #11
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 801170e:	b292      	uxth	r2, r2
            a.x2 = a.x1 + info.w - 1;
 8011710:	3901      	subs	r1, #1
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 8011712:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
            a.x2 = a.x1 + info.w - 1;
 8011716:	440a      	add	r2, r1
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8011718:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801171c:	211a      	movs	r1, #26
            a.x2 = a.x1 + info.w - 1;
 801171e:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8011722:	1a1b      	subs	r3, r3, r0
            a.y2 = a.y1 + info.h - 1;
 8011724:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8011728:	b29b      	uxth	r3, r3
            a.y2 = a.y1 + info.h - 1;
 801172a:	f3c2 124a 	ubfx	r2, r2, #5, #11
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 801172e:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
            a.y2 = a.y1 + info.h - 1;
 8011732:	3a01      	subs	r2, #1
 8011734:	4413      	add	r3, r2
 8011736:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801173a:	7962      	ldrb	r2, [r4, #5]
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
 801173c:	f8ad 0116 	strh.w	r0, [sp, #278]	; 0x116
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8011740:	4630      	mov	r0, r6
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8011742:	2afd      	cmp	r2, #253	; 0xfd
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
 8011744:	f8ad c114 	strh.w	ip, [sp, #276]	; 0x114
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8011748:	bf96      	itet	ls
 801174a:	fa5f f388 	uxtbls.w	r3, r8
 801174e:	464b      	movhi	r3, r9
 8011750:	4353      	mulls	r3, r2
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8011752:	aa4c      	add	r2, sp, #304	; 0x130
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8011754:	bf98      	it	ls
 8011756:	0a1b      	lsrls	r3, r3, #8
            if(angle > 3600) angle -= 3600;
 8011758:	f5b7 6f61 	cmp.w	r7, #3600	; 0xe10
 801175c:	bfc8      	it	gt
 801175e:	f5a7 6761 	subgt.w	r7, r7, #3600	; 0xe10
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8011762:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_IMG;
 8011766:	2302      	movs	r3, #2
            img_dsc.angle = angle;
 8011768:	f8ad 7110 	strh.w	r7, [sp, #272]	; 0x110
            part_draw_dsc.img_dsc = &img_dsc;
 801176c:	af44      	add	r7, sp, #272	; 0x110
            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_IMG;
 801176e:	935a      	str	r3, [sp, #360]	; 0x168
            part_draw_dsc.img_dsc = &img_dsc;
 8011770:	9753      	str	r7, [sp, #332]	; 0x14c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8011772:	f7f2 ffe7 	bl	8004744 <lv_event_send>
            lv_draw_img(draw_ctx, &img_dsc, &a, indic->type_data.needle_img.src);
 8011776:	6923      	ldr	r3, [r4, #16]
 8011778:	aa36      	add	r2, sp, #216	; 0xd8
 801177a:	4639      	mov	r1, r7
 801177c:	9805      	ldr	r0, [sp, #20]
 801177e:	f7f6 f9b1 	bl	8007ae4 <lv_draw_img>
 8011782:	e796      	b.n	80116b2 <lv_meter_event+0x7da>

08011784 <lv_spinbox_updatevalue>:
        }
    }
}

static void lv_spinbox_updatevalue(lv_obj_t * obj)
{
 8011784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011788:	b08a      	sub	sp, #40	; 0x28
 801178a:	4604      	mov	r4, r0
    memset(dst, 0x00, len);
 801178c:	2212      	movs	r2, #18
 801178e:	2100      	movs	r1, #0
 8011790:	a805      	add	r0, sp, #20
 8011792:	f008 fff9 	bl	801a788 <memset>
    char buf[LV_SPINBOX_MAX_DIGIT_COUNT + 8];
    lv_memset_00(buf, sizeof(buf));
    char * buf_p = buf;
    uint8_t cur_shift_left = 0;

    if(spinbox->range_min < 0) {  // hide sign if there are only positive values
 8011796:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011798:	2b00      	cmp	r3, #0
 801179a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801179c:	da5c      	bge.n	8011858 <lv_spinbox_updatevalue+0xd4>
        /*Add the sign*/
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 801179e:	2b00      	cmp	r3, #0
    uint8_t cur_shift_left = 0;
 80117a0:	f04f 0500 	mov.w	r5, #0
        buf_p++;
 80117a4:	f10d 0615 	add.w	r6, sp, #21
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 80117a8:	bfb4      	ite	lt
 80117aa:	222d      	movlt	r2, #45	; 0x2d
 80117ac:	222b      	movge	r2, #43	; 0x2b
 80117ae:	f88d 2014 	strb.w	r2, [sp, #20]
    }

    int32_t i;
    char digits[LV_SPINBOX_MAX_DIGIT_COUNT + 4];
    /*Convert the numbers to string (the sign is already handled so always covert positive number)*/
    lv_snprintf(digits, sizeof(digits), "%" LV_PRId32, LV_ABS(spinbox->value));
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	af01      	add	r7, sp, #4
 80117b6:	4a35      	ldr	r2, [pc, #212]	; (801188c <lv_spinbox_updatevalue+0x108>)
 80117b8:	f04f 010e 	mov.w	r1, #14
 80117bc:	bfb8      	it	lt
 80117be:	425b      	neglt	r3, r3
 80117c0:	4638      	mov	r0, r7
 80117c2:	f7f1 faa5 	bl	8002d10 <snprintf>

    /*Add leading zeros*/
    int lz_cnt = spinbox->digit_count - (int)strlen(digits);
 80117c6:	f894 8074 	ldrb.w	r8, [r4, #116]	; 0x74
 80117ca:	4638      	mov	r0, r7
 80117cc:	f008 080f 	and.w	r8, r8, #15
 80117d0:	f008 ffbc 	bl	801a74c <strlen>
 80117d4:	eba8 0800 	sub.w	r8, r8, r0
    if(lz_cnt > 0) {
 80117d8:	f1b8 0f00 	cmp.w	r8, #0
 80117dc:	dd13      	ble.n	8011806 <lv_spinbox_updatevalue+0x82>
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 80117de:	4638      	mov	r0, r7
 80117e0:	f008 ffb4 	bl	801a74c <strlen>
 80117e4:	463a      	mov	r2, r7
 80117e6:	b283      	uxth	r3, r0
 80117e8:	3301      	adds	r3, #1
 80117ea:	443b      	add	r3, r7
            digits[i + lz_cnt] = digits[i];
 80117ec:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 80117f0:	42bb      	cmp	r3, r7
            digits[i + lz_cnt] = digits[i];
 80117f2:	f803 1008 	strb.w	r1, [r3, r8]
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 80117f6:	d1f9      	bne.n	80117ec <lv_spinbox_updatevalue+0x68>
        }
        for(i = 0; i < lz_cnt; i++) {
 80117f8:	2300      	movs	r3, #0
            digits[i] = '0';
 80117fa:	2130      	movs	r1, #48	; 0x30
        for(i = 0; i < lz_cnt; i++) {
 80117fc:	3301      	adds	r3, #1
            digits[i] = '0';
 80117fe:	f802 1b01 	strb.w	r1, [r2], #1
        for(i = 0; i < lz_cnt; i++) {
 8011802:	4598      	cmp	r8, r3
 8011804:	d1fa      	bne.n	80117fc <lv_spinbox_updatevalue+0x78>
        }
    }

    int32_t intDigits;
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 8011806:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 801180a:	4638      	mov	r0, r7

    /*Add the decimal part*/
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 801180c:	2300      	movs	r3, #0
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 801180e:	2a0f      	cmp	r2, #15
 8011810:	bf94      	ite	ls
 8011812:	f002 080f 	andls.w	r8, r2, #15
 8011816:	ea4f 1812 	movhi.w	r8, r2, lsr #4
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 801181a:	4543      	cmp	r3, r8
 801181c:	d002      	beq.n	8011824 <lv_spinbox_updatevalue+0xa0>
 801181e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011822:	b9e1      	cbnz	r1, 801185e <lv_spinbox_updatevalue+0xda>
        (*buf_p) = digits[i];
        buf_p++;
    }

    if(spinbox->dec_point_pos != 0) {
 8011824:	2a0f      	cmp	r2, #15
 8011826:	d81e      	bhi.n	8011866 <lv_spinbox_updatevalue+0xe2>
            buf_p++;
        }
    }

    /*Refresh the text*/
    lv_textarea_set_text(obj, (char *)buf);
 8011828:	a905      	add	r1, sp, #20
 801182a:	4620      	mov	r0, r4
 801182c:	f006 ff0c 	bl	8018648 <lv_textarea_set_text>

    /*Set the cursor position*/
    int32_t step    = spinbox->step;
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 8011830:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    int32_t step    = spinbox->step;
 8011834:	6f23      	ldr	r3, [r4, #112]	; 0x70
    while(step >= 10) {
        step /= 10;
 8011836:	220a      	movs	r2, #10
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 8011838:	f001 010f 	and.w	r1, r1, #15
    while(step >= 10) {
 801183c:	2b09      	cmp	r3, #9
 801183e:	dc20      	bgt.n	8011882 <lv_spinbox_updatevalue+0xfe>
        cur_pos--;
    }

    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 8011840:	4541      	cmp	r1, r8

    cur_pos -= cur_shift_left;

    lv_textarea_set_cursor_pos(obj, cur_pos);
 8011842:	4620      	mov	r0, r4
    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 8011844:	bfc4      	itt	gt
 8011846:	3101      	addgt	r1, #1
 8011848:	b2c9      	uxtbgt	r1, r1
    cur_pos -= cur_shift_left;
 801184a:	1b49      	subs	r1, r1, r5
    lv_textarea_set_cursor_pos(obj, cur_pos);
 801184c:	b2c9      	uxtb	r1, r1
 801184e:	f006 fcbf 	bl	80181d0 <lv_textarea_set_cursor_pos>
}
 8011852:	b00a      	add	sp, #40	; 0x28
 8011854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        cur_shift_left++;
 8011858:	2501      	movs	r5, #1
    char * buf_p = buf;
 801185a:	ae05      	add	r6, sp, #20
 801185c:	e7a9      	b.n	80117b2 <lv_spinbox_updatevalue+0x2e>
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 801185e:	3301      	adds	r3, #1
        (*buf_p) = digits[i];
 8011860:	f806 1b01 	strb.w	r1, [r6], #1
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 8011864:	e7d9      	b.n	801181a <lv_spinbox_updatevalue+0x96>
        (*buf_p) = '.';
 8011866:	212e      	movs	r1, #46	; 0x2e
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 8011868:	f002 020f 	and.w	r2, r2, #15
        (*buf_p) = '.';
 801186c:	f806 1b01 	strb.w	r1, [r6], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 8011870:	429a      	cmp	r2, r3
 8011872:	ddd9      	ble.n	8011828 <lv_spinbox_updatevalue+0xa4>
 8011874:	5cf9      	ldrb	r1, [r7, r3]
 8011876:	2900      	cmp	r1, #0
 8011878:	d0d6      	beq.n	8011828 <lv_spinbox_updatevalue+0xa4>
 801187a:	3301      	adds	r3, #1
            (*buf_p) = digits[i];
 801187c:	f806 1b01 	strb.w	r1, [r6], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 8011880:	e7f6      	b.n	8011870 <lv_spinbox_updatevalue+0xec>
        cur_pos--;
 8011882:	3901      	subs	r1, #1
        step /= 10;
 8011884:	fb93 f3f2 	sdiv	r3, r3, r2
        cur_pos--;
 8011888:	b2c9      	uxtb	r1, r1
 801188a:	e7d7      	b.n	801183c <lv_spinbox_updatevalue+0xb8>
 801188c:	0802e11e 	.word	0x0802e11e

08011890 <lv_spinbox_constructor>:
{
 8011890:	b538      	push	{r3, r4, r5, lr}
    spinbox->range_max          = 99999;
 8011892:	2200      	movs	r2, #0
 8011894:	4b10      	ldr	r3, [pc, #64]	; (80118d8 <lv_spinbox_constructor+0x48>)
    spinbox->step               = 1;
 8011896:	2501      	movs	r5, #1
{
 8011898:	460c      	mov	r4, r1
    spinbox->range_max          = 99999;
 801189a:	e9c1 2319 	strd	r2, r3, [r1, #100]	; 0x64
    spinbox->step               = 1;
 801189e:	4b0f      	ldr	r3, [pc, #60]	; (80118dc <lv_spinbox_constructor+0x4c>)
    lv_textarea_set_one_line(obj, true);
 80118a0:	4620      	mov	r0, r4
    spinbox->step               = 1;
 80118a2:	e9c1 351b 	strd	r3, r5, [r1, #108]	; 0x6c
    spinbox->digit_count        = 5;
 80118a6:	f8b1 3074 	ldrh.w	r3, [r1, #116]	; 0x74
 80118aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80118ae:	f023 0307 	bic.w	r3, r3, #7
 80118b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80118b6:	f043 0305 	orr.w	r3, r3, #5
 80118ba:	f8a1 3074 	strh.w	r3, [r1, #116]	; 0x74
    lv_textarea_set_one_line(obj, true);
 80118be:	4629      	mov	r1, r5
 80118c0:	f016 f8c6 	bl	8027a50 <lv_textarea_set_one_line>
    lv_textarea_set_cursor_click_pos(obj, true);
 80118c4:	4620      	mov	r0, r4
 80118c6:	4629      	mov	r1, r5
 80118c8:	f016 f8bb 	bl	8027a42 <lv_textarea_set_cursor_click_pos>
    lv_spinbox_updatevalue(obj);
 80118cc:	4620      	mov	r0, r4
}
 80118ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_spinbox_updatevalue(obj);
 80118d2:	f7ff bf57 	b.w	8011784 <lv_spinbox_updatevalue>
 80118d6:	bf00      	nop
 80118d8:	0001869f 	.word	0x0001869f
 80118dc:	fffe7961 	.word	0xfffe7961

080118e0 <lv_spinbox_event>:
{
 80118e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 80118e2:	4855      	ldr	r0, [pc, #340]	; (8011a38 <lv_spinbox_event+0x158>)
{
 80118e4:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 80118e6:	f009 fca2 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80118ea:	2801      	cmp	r0, #1
    res = lv_obj_event_base(MY_CLASS, e);
 80118ec:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return;
 80118ee:	d16c      	bne.n	80119ca <lv_spinbox_event+0xea>
    lv_event_code_t code = lv_event_get_code(e);
 80118f0:	4628      	mov	r0, r5
 80118f2:	f009 fcb6 	bl	801b262 <lv_event_get_code>
 80118f6:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80118f8:	4628      	mov	r0, r5
 80118fa:	f009 fcae 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_RELEASED) {
 80118fe:	2e08      	cmp	r6, #8
    lv_obj_t * obj = lv_event_get_target(e);
 8011900:	4604      	mov	r4, r0
    if(code == LV_EVENT_RELEASED) {
 8011902:	d173      	bne.n	80119ec <lv_spinbox_event+0x10c>
        lv_indev_t * indev = lv_indev_get_act();
 8011904:	f7f2 ff84 	bl	8004810 <lv_indev_get_act>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8011908:	f009 fe6b 	bl	801b5e2 <lv_indev_get_type>
 801190c:	2804      	cmp	r0, #4
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 801190e:	4620      	mov	r0, r4
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8011910:	d131      	bne.n	8011976 <lv_spinbox_event+0x96>
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 8011912:	f00a f8bd 	bl	801ba90 <lv_obj_get_group>
 8011916:	f009 fe5f 	bl	801b5d8 <lv_group_get_editing>
 801191a:	2800      	cmp	r0, #0
 801191c:	d055      	beq.n	80119ca <lv_spinbox_event+0xea>
                if(spinbox->digit_count > 1) {
 801191e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 8011922:	f002 020f 	and.w	r2, r2, #15
 8011926:	2a01      	cmp	r2, #1
 8011928:	d94f      	bls.n	80119ca <lv_spinbox_event+0xea>
                    if(spinbox->digit_step_dir == LV_DIR_RIGHT) {
 801192a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
                        if(spinbox->step > 1) {
 801192e:	6f25      	ldr	r5, [r4, #112]	; 0x70
                    if(spinbox->digit_step_dir == LV_DIR_RIGHT) {
 8011930:	f003 0306 	and.w	r3, r3, #6
 8011934:	2b04      	cmp	r3, #4
 8011936:	d111      	bne.n	801195c <lv_spinbox_event+0x7c>
                        if(spinbox->step > 1) {
 8011938:	2d01      	cmp	r5, #1
 801193a:	dd04      	ble.n	8011946 <lv_spinbox_event+0x66>
                            lv_spinbox_step_next(obj);
 801193c:	4620      	mov	r0, r4
}
 801193e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                            lv_spinbox_step_next(obj);
 8011942:	f012 b9a9 	b.w	8023c98 <lv_spinbox_step_next>
                            spinbox->step = lv_pow(10, spinbox->digit_count - 2);
 8011946:	3a02      	subs	r2, #2
 8011948:	200a      	movs	r0, #10
 801194a:	2100      	movs	r1, #0
 801194c:	f013 f981 	bl	8024c52 <lv_pow>
 8011950:	6720      	str	r0, [r4, #112]	; 0x70
                            lv_spinbox_step_prev(obj);
 8011952:	4620      	mov	r0, r4
}
 8011954:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                lv_spinbox_step_prev(obj);
 8011958:	f012 b9a8 	b.w	8023cac <lv_spinbox_step_prev>
                        if(spinbox->step < lv_pow(10, spinbox->digit_count - 1)) {
 801195c:	3a01      	subs	r2, #1
 801195e:	200a      	movs	r0, #10
 8011960:	2100      	movs	r1, #0
 8011962:	f013 f976 	bl	8024c52 <lv_pow>
 8011966:	4285      	cmp	r5, r0
 8011968:	ea4f 73e5 	mov.w	r3, r5, asr #31
 801196c:	418b      	sbcs	r3, r1
 801196e:	dbf0      	blt.n	8011952 <lv_spinbox_event+0x72>
                            spinbox->step = 10;
 8011970:	230a      	movs	r3, #10
 8011972:	6723      	str	r3, [r4, #112]	; 0x70
 8011974:	e7e2      	b.n	801193c <lv_spinbox_event+0x5c>
            const char * txt = lv_textarea_get_text(obj);
 8011976:	f016 f8a1 	bl	8027abc <lv_textarea_get_text>
 801197a:	4605      	mov	r5, r0
            size_t txt_len = strlen(txt);
 801197c:	f008 fee6 	bl	801a74c <strlen>
            if(txt[spinbox->ta.cursor.pos] == '.') {
 8011980:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011982:	5cea      	ldrb	r2, [r5, r3]
 8011984:	2a2e      	cmp	r2, #46	; 0x2e
 8011986:	d121      	bne.n	80119cc <lv_spinbox_event+0xec>
                lv_textarea_cursor_left(obj);
 8011988:	4620      	mov	r0, r4
 801198a:	f016 f922 	bl	8027bd2 <lv_textarea_cursor_left>
            size_t len = spinbox->digit_count - 1;
 801198e:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
            uint16_t cp = spinbox->ta.cursor.pos;
 8011992:	6c60      	ldr	r0, [r4, #68]	; 0x44
            size_t len = spinbox->digit_count - 1;
 8011994:	f001 030f 	and.w	r3, r1, #15
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 8011998:	ebb0 1f11 	cmp.w	r0, r1, lsr #4
            size_t len = spinbox->digit_count - 1;
 801199c:	f103 33ff 	add.w	r3, r3, #4294967295
            uint16_t cp = spinbox->ta.cursor.pos;
 80119a0:	b282      	uxth	r2, r0
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 80119a2:	d904      	bls.n	80119ae <lv_spinbox_event+0xce>
 80119a4:	290f      	cmp	r1, #15
 80119a6:	bf84      	itt	hi
 80119a8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80119ac:	b292      	uxthhi	r2, r2
            uint32_t pos = len - cp;
 80119ae:	1a9b      	subs	r3, r3, r2
            if(spinbox->range_min < 0) pos++;
 80119b0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 80119b2:	2100      	movs	r1, #0
 80119b4:	250a      	movs	r5, #10
            if(spinbox->range_min < 0) pos++;
 80119b6:	2a00      	cmp	r2, #0
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 80119b8:	f04f 0201 	mov.w	r2, #1
            if(spinbox->range_min < 0) pos++;
 80119bc:	bfb8      	it	lt
 80119be:	3301      	addlt	r3, #1
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 80119c0:	b288      	uxth	r0, r1
 80119c2:	3101      	adds	r1, #1
 80119c4:	4283      	cmp	r3, r0
 80119c6:	d80f      	bhi.n	80119e8 <lv_spinbox_event+0x108>
 80119c8:	6722      	str	r2, [r4, #112]	; 0x70
}
 80119ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if(spinbox->ta.cursor.pos == (uint32_t)txt_len) {
 80119cc:	4298      	cmp	r0, r3
 80119ce:	d104      	bne.n	80119da <lv_spinbox_event+0xfa>
                lv_textarea_set_cursor_pos(obj, txt_len - 1);
 80119d0:	1e41      	subs	r1, r0, #1
                lv_textarea_set_cursor_pos(obj, 1);
 80119d2:	4620      	mov	r0, r4
 80119d4:	f006 fbfc 	bl	80181d0 <lv_textarea_set_cursor_pos>
 80119d8:	e7d9      	b.n	801198e <lv_spinbox_event+0xae>
            else if(spinbox->ta.cursor.pos == 0 && spinbox->range_min < 0) {
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d1d7      	bne.n	801198e <lv_spinbox_event+0xae>
 80119de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	dad4      	bge.n	801198e <lv_spinbox_event+0xae>
                lv_textarea_set_cursor_pos(obj, 1);
 80119e4:	4639      	mov	r1, r7
 80119e6:	e7f4      	b.n	80119d2 <lv_spinbox_event+0xf2>
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 80119e8:	436a      	muls	r2, r5
 80119ea:	e7e9      	b.n	80119c0 <lv_spinbox_event+0xe0>
    else if(code == LV_EVENT_KEY) {
 80119ec:	2e0d      	cmp	r6, #13
 80119ee:	d1ec      	bne.n	80119ca <lv_spinbox_event+0xea>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80119f0:	f7f2 ff0e 	bl	8004810 <lv_indev_get_act>
 80119f4:	f009 fdf5 	bl	801b5e2 <lv_indev_get_type>
 80119f8:	4606      	mov	r6, r0
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 80119fa:	4628      	mov	r0, r5
 80119fc:	f009 fc35 	bl	801b26a <lv_event_get_param>
 8011a00:	6803      	ldr	r3, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 8011a02:	2b13      	cmp	r3, #19
 8011a04:	d106      	bne.n	8011a14 <lv_spinbox_event+0x134>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8011a06:	2e04      	cmp	r6, #4
                lv_spinbox_increment(obj);
 8011a08:	4620      	mov	r0, r4
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8011a0a:	d198      	bne.n	801193e <lv_spinbox_event+0x5e>
}
 8011a0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_spinbox_increment(obj);
 8011a10:	f012 b95c 	b.w	8023ccc <lv_spinbox_increment>
        else if(c == LV_KEY_LEFT) {
 8011a14:	2b14      	cmp	r3, #20
 8011a16:	d106      	bne.n	8011a26 <lv_spinbox_event+0x146>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8011a18:	2e04      	cmp	r6, #4
                lv_spinbox_decrement(obj);
 8011a1a:	4620      	mov	r0, r4
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8011a1c:	d19a      	bne.n	8011954 <lv_spinbox_event+0x74>
}
 8011a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_spinbox_decrement(obj);
 8011a22:	f012 b96e 	b.w	8023d02 <lv_spinbox_decrement>
        else if(c == LV_KEY_UP) {
 8011a26:	2b11      	cmp	r3, #17
 8011a28:	d101      	bne.n	8011a2e <lv_spinbox_event+0x14e>
            lv_spinbox_increment(obj);
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	e7ee      	b.n	8011a0c <lv_spinbox_event+0x12c>
        else if(c == LV_KEY_DOWN) {
 8011a2e:	2b12      	cmp	r3, #18
 8011a30:	d1cb      	bne.n	80119ca <lv_spinbox_event+0xea>
            lv_spinbox_decrement(obj);
 8011a32:	4620      	mov	r0, r4
 8011a34:	e7f3      	b.n	8011a1e <lv_spinbox_event+0x13e>
 8011a36:	bf00      	nop
 8011a38:	08029360 	.word	0x08029360

08011a3c <lv_spinner_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_spinner_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8011a3c:	b570      	push	{r4, r5, r6, lr}
 8011a3e:	460c      	mov	r4, r1
 8011a40:	b092      	sub	sp, #72	; 0x48
    LV_TRACE_OBJ_CREATE("begin");

    LV_UNUSED(class_p);

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8011a42:	2102      	movs	r1, #2
    a->start_value = start;
 8011a44:	2500      	movs	r5, #0
 8011a46:	4620      	mov	r0, r4
    a->end_value = end;
 8011a48:	f44f 76b4 	mov.w	r6, #360	; 0x168
 8011a4c:	f009 ffc3 	bl	801b9d6 <lv_obj_clear_flag>

    lv_anim_t a;
    lv_anim_init(&a);
 8011a50:	a801      	add	r0, sp, #4
 8011a52:	f000 fc89 	bl	8012368 <lv_anim_init>
    a->exec_cb = exec_cb;
 8011a56:	4b15      	ldr	r3, [pc, #84]	; (8011aac <lv_spinner_constructor+0x70>)
    lv_anim_set_var(&a, obj);
    lv_anim_set_exec_cb(&a, arc_anim_end_angle);
    lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
    lv_anim_set_time(&a, time_param);
    lv_anim_set_values(&a, arc_length_param, 360 + arc_length_param);
    lv_anim_start(&a);
 8011a58:	a801      	add	r0, sp, #4
    a->var = var;
 8011a5a:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 8011a5c:	9302      	str	r3, [sp, #8]
    a->repeat_cnt = cnt;
 8011a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a62:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    lv_anim_set_time(&a, time_param);
 8011a66:	4b12      	ldr	r3, [pc, #72]	; (8011ab0 <lv_spinner_constructor+0x74>)
    a->time = duration;
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	930c      	str	r3, [sp, #48]	; 0x30
    lv_anim_set_values(&a, arc_length_param, 360 + arc_length_param);
 8011a6c:	4b11      	ldr	r3, [pc, #68]	; (8011ab4 <lv_spinner_constructor+0x78>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
    a->current_value = start;
 8011a70:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8011a74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
    a->end_value = end;
 8011a78:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_anim_start(&a);
 8011a7a:	f000 fcc1 	bl	8012400 <lv_anim_start>
    a->path_cb = path_cb;
 8011a7e:	4b0e      	ldr	r3, [pc, #56]	; (8011ab8 <lv_spinner_constructor+0x7c>)

    lv_anim_set_path_cb(&a, lv_anim_path_ease_in_out);
    lv_anim_set_values(&a, 0, 360);
    lv_anim_set_exec_cb(&a, arc_anim_start_angle);
    lv_anim_start(&a);
 8011a80:	a801      	add	r0, sp, #4
    a->end_value = end;
 8011a82:	960b      	str	r6, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 8011a84:	9308      	str	r3, [sp, #32]
    a->exec_cb = exec_cb;
 8011a86:	4b0d      	ldr	r3, [pc, #52]	; (8011abc <lv_spinner_constructor+0x80>)
    a->current_value = start;
 8011a88:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8011a8c:	9302      	str	r3, [sp, #8]
 8011a8e:	f000 fcb7 	bl	8012400 <lv_anim_start>

    lv_arc_set_bg_angles(obj, 0, 360);
 8011a92:	4632      	mov	r2, r6
 8011a94:	4629      	mov	r1, r5
 8011a96:	4620      	mov	r0, r4
 8011a98:	f014 fa96 	bl	8025fc8 <lv_arc_set_bg_angles>
    lv_arc_set_rotation(obj, 270);
 8011a9c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	f014 fa9d 	bl	8025fe0 <lv_arc_set_rotation>
}
 8011aa6:	b012      	add	sp, #72	; 0x48
 8011aa8:	bd70      	pop	{r4, r5, r6, pc}
 8011aaa:	bf00      	nop
 8011aac:	08023d3f 	.word	0x08023d3f
 8011ab0:	240011d8 	.word	0x240011d8
 8011ab4:	240011d4 	.word	0x240011d4
 8011ab8:	080241e7 	.word	0x080241e7
 8011abc:	08023d39 	.word	0x08023d39

08011ac0 <lv_tabview_constructor>:
static void lv_tabview_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
    LV_UNUSED(class_p);
    lv_tabview_t * tabview = (lv_tabview_t *)obj;

    tabview->tab_pos = tabpos_create;
 8011ac0:	4b4d      	ldr	r3, [pc, #308]	; (8011bf8 <lv_tabview_constructor+0x138>)
{
 8011ac2:	b570      	push	{r4, r5, r6, lr}
    tabview->tab_pos = tabpos_create;
 8011ac4:	781b      	ldrb	r3, [r3, #0]
{
 8011ac6:	460d      	mov	r5, r1
    tabview->tab_pos = tabpos_create;
 8011ac8:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c

    switch(tabview->tab_pos) {
 8011acc:	3b01      	subs	r3, #1
 8011ace:	2b07      	cmp	r3, #7
 8011ad0:	d809      	bhi.n	8011ae6 <lv_tabview_constructor+0x26>
 8011ad2:	e8df f003 	tbb	[pc, r3]
 8011ad6:	6361      	.short	0x6361
 8011ad8:	08080408 	.word	0x08080408
 8011adc:	5f08      	.short	0x5f08
        case LV_DIR_TOP:
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 8011ade:	2101      	movs	r1, #1
            break;
        case LV_DIR_LEFT:
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
            break;
        case LV_DIR_RIGHT:
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_REVERSE);
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	f7f9 fd73 	bl	800b5cc <lv_obj_set_flex_flow>
            break;
    }

    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8011ae6:	f242 0264 	movw	r2, #8292	; 0x2064
 8011aea:	4628      	mov	r0, r5
 8011aec:	4611      	mov	r1, r2
 8011aee:	f00a fe49 	bl	801c784 <lv_obj_set_size>

    lv_obj_t * btnm;
    lv_obj_t * cont;

    btnm = lv_btnmatrix_create(obj);
 8011af2:	4628      	mov	r0, r5
 8011af4:	f002 fc10 	bl	8014318 <lv_btnmatrix_create>
 8011af8:	4606      	mov	r6, r0
    cont = lv_obj_create(obj);
 8011afa:	4628      	mov	r0, r5
 8011afc:	f7f3 f930 	bl	8004d60 <lv_obj_create>

    lv_btnmatrix_set_one_checked(btnm, true);
 8011b00:	2101      	movs	r1, #1
    cont = lv_obj_create(obj);
 8011b02:	4604      	mov	r4, r0
    lv_btnmatrix_set_one_checked(btnm, true);
 8011b04:	4630      	mov	r0, r6
 8011b06:	f014 fd2d 	bl	8026564 <lv_btnmatrix_set_one_checked>
    tabview->map = lv_mem_alloc(sizeof(const char *));
 8011b0a:	2004      	movs	r0, #4
 8011b0c:	f000 fe04 	bl	8012718 <lv_mem_alloc>
    tabview->map[0] = "";
 8011b10:	4b3a      	ldr	r3, [pc, #232]	; (8011bfc <lv_tabview_constructor+0x13c>)
    tabview->map = lv_mem_alloc(sizeof(const char *));
 8011b12:	6268      	str	r0, [r5, #36]	; 0x24
    tabview->map[0] = "";
 8011b14:	6003      	str	r3, [r0, #0]
    lv_btnmatrix_set_map(btnm, (const char **)tabview->map);
 8011b16:	4630      	mov	r0, r6
 8011b18:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8011b1a:	f014 fc7e 	bl	802641a <lv_btnmatrix_set_map>
    lv_obj_add_event_cb(btnm, btns_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 8011b1e:	2300      	movs	r3, #0
 8011b20:	221c      	movs	r2, #28
 8011b22:	4937      	ldr	r1, [pc, #220]	; (8011c00 <lv_tabview_constructor+0x140>)
 8011b24:	4630      	mov	r0, r6
 8011b26:	f009 fba4 	bl	801b272 <lv_obj_add_event_cb>
    lv_obj_add_flag(btnm, LV_OBJ_FLAG_EVENT_BUBBLE);
 8011b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011b2e:	4630      	mov	r0, r6
 8011b30:	f009 ff1b 	bl	801b96a <lv_obj_add_flag>

    lv_obj_add_event_cb(cont, cont_scroll_end_event_cb, LV_EVENT_ALL, NULL);
 8011b34:	2300      	movs	r3, #0
 8011b36:	4933      	ldr	r1, [pc, #204]	; (8011c04 <lv_tabview_constructor+0x144>)
 8011b38:	4620      	mov	r0, r4
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	f009 fb99 	bl	801b272 <lv_obj_add_event_cb>
    lv_obj_set_scrollbar_mode(cont, LV_SCROLLBAR_MODE_OFF);
 8011b40:	2100      	movs	r1, #0
 8011b42:	4620      	mov	r0, r4
 8011b44:	f00b f9e8 	bl	801cf18 <lv_obj_set_scrollbar_mode>

    switch(tabview->tab_pos) {
 8011b48:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8011b4c:	2b04      	cmp	r3, #4
 8011b4e:	d029      	beq.n	8011ba4 <lv_tabview_constructor+0xe4>
 8011b50:	d826      	bhi.n	8011ba0 <lv_tabview_constructor+0xe0>
 8011b52:	3b01      	subs	r3, #1
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d937      	bls.n	8011bc8 <lv_tabview_constructor+0x108>
            lv_obj_set_height(cont, LV_PCT(100));
            lv_obj_set_flex_grow(cont, 1);
            break;
    }

    lv_group_t * g = lv_group_get_default();
 8011b58:	f7f2 fe2c 	bl	80047b4 <lv_group_get_default>
    if(g) lv_group_add_obj(g, btnm);
 8011b5c:	b110      	cbz	r0, 8011b64 <lv_tabview_constructor+0xa4>
 8011b5e:	4631      	mov	r1, r6
 8011b60:	f009 fcdb 	bl	801b51a <lv_group_add_obj>

    if((tabview->tab_pos & LV_DIR_VER) != 0) {
 8011b64:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8011b68:	f013 0f0c 	tst.w	r3, #12
 8011b6c:	d03a      	beq.n	8011be4 <lv_tabview_constructor+0x124>
        lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_ROW);
 8011b6e:	2100      	movs	r1, #0
 8011b70:	4620      	mov	r0, r4
 8011b72:	f7f9 fd2b 	bl	800b5cc <lv_obj_set_flex_flow>
        lv_obj_set_scroll_snap_x(cont, LV_SCROLL_SNAP_CENTER);
 8011b76:	2103      	movs	r1, #3
 8011b78:	4620      	mov	r0, r4
 8011b7a:	f00b f9f0 	bl	801cf5e <lv_obj_set_scroll_snap_x>
    }
    else {
        lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_COLUMN);
        lv_obj_set_scroll_snap_y(cont, LV_SCROLL_SNAP_CENTER);
    }
    lv_obj_add_flag(cont, LV_OBJ_FLAG_SCROLL_ONE);
 8011b7e:	4620      	mov	r0, r4
 8011b80:	2180      	movs	r1, #128	; 0x80
 8011b82:	f009 fef2 	bl	801b96a <lv_obj_add_flag>
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8011b86:	4620      	mov	r0, r4
 8011b88:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 8011b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8011b90:	f009 bf21 	b.w	801b9d6 <lv_obj_clear_flag>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN_REVERSE);
 8011b94:	2109      	movs	r1, #9
 8011b96:	e7a3      	b.n	8011ae0 <lv_tabview_constructor+0x20>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 8011b98:	2100      	movs	r1, #0
 8011b9a:	e7a1      	b.n	8011ae0 <lv_tabview_constructor+0x20>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_REVERSE);
 8011b9c:	2108      	movs	r1, #8
 8011b9e:	e79f      	b.n	8011ae0 <lv_tabview_constructor+0x20>
    switch(tabview->tab_pos) {
 8011ba0:	2b08      	cmp	r3, #8
 8011ba2:	d1d9      	bne.n	8011b58 <lv_tabview_constructor+0x98>
            lv_obj_set_size(btnm, LV_PCT(100), tabsize_create);
 8011ba4:	4b18      	ldr	r3, [pc, #96]	; (8011c08 <lv_tabview_constructor+0x148>)
 8011ba6:	f242 0164 	movw	r1, #8292	; 0x2064
 8011baa:	4630      	mov	r0, r6
 8011bac:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011bb0:	f00a fde8 	bl	801c784 <lv_obj_set_size>
            lv_obj_set_width(cont, LV_PCT(100));
 8011bb4:	f242 0164 	movw	r1, #8292	; 0x2064
 8011bb8:	4620      	mov	r0, r4
 8011bba:	f00a fdb5 	bl	801c728 <lv_obj_set_width>
            lv_obj_set_flex_grow(cont, 1);
 8011bbe:	2101      	movs	r1, #1
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	f011 f9c1 	bl	8022f48 <lv_obj_set_flex_grow>
            break;
 8011bc6:	e7c7      	b.n	8011b58 <lv_tabview_constructor+0x98>
            lv_obj_set_size(btnm, tabsize_create, LV_PCT(100));
 8011bc8:	4b0f      	ldr	r3, [pc, #60]	; (8011c08 <lv_tabview_constructor+0x148>)
 8011bca:	4630      	mov	r0, r6
 8011bcc:	f242 0264 	movw	r2, #8292	; 0x2064
 8011bd0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011bd4:	f00a fdd6 	bl	801c784 <lv_obj_set_size>
            lv_obj_set_height(cont, LV_PCT(100));
 8011bd8:	f242 0164 	movw	r1, #8292	; 0x2064
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f00a fdba 	bl	801c756 <lv_obj_set_height>
 8011be2:	e7ec      	b.n	8011bbe <lv_tabview_constructor+0xfe>
        lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_COLUMN);
 8011be4:	4620      	mov	r0, r4
 8011be6:	2101      	movs	r1, #1
 8011be8:	f7f9 fcf0 	bl	800b5cc <lv_obj_set_flex_flow>
        lv_obj_set_scroll_snap_y(cont, LV_SCROLL_SNAP_CENTER);
 8011bec:	2103      	movs	r1, #3
 8011bee:	4620      	mov	r0, r4
 8011bf0:	f00b f9c0 	bl	801cf74 <lv_obj_set_scroll_snap_y>
 8011bf4:	e7c3      	b.n	8011b7e <lv_tabview_constructor+0xbe>
 8011bf6:	bf00      	nop
 8011bf8:	24010e35 	.word	0x24010e35
 8011bfc:	08029fb2 	.word	0x08029fb2
 8011c00:	08023f19 	.word	0x08023f19
 8011c04:	08023e57 	.word	0x08023e57
 8011c08:	24010d20 	.word	0x24010d20

08011c0c <lv_tabview_event>:
    lv_mem_free(tabview->map);
    tabview->map = NULL;
}

static void lv_tabview_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8011c0c:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    lv_res_t res = lv_obj_event_base(&lv_tabview_class, e);
 8011c0e:	480b      	ldr	r0, [pc, #44]	; (8011c3c <lv_tabview_event+0x30>)
{
 8011c10:	460c      	mov	r4, r1
    lv_res_t res = lv_obj_event_base(&lv_tabview_class, e);
 8011c12:	f009 fb0c 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8011c16:	2801      	cmp	r0, #1
 8011c18:	d10e      	bne.n	8011c38 <lv_tabview_event+0x2c>

    lv_event_code_t code = lv_event_get_code(e);
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	f009 fb21 	bl	801b262 <lv_event_get_code>
 8011c20:	4605      	mov	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 8011c22:	4620      	mov	r0, r4
 8011c24:	f009 fb19 	bl	801b25a <lv_event_get_target>

    if(code == LV_EVENT_SIZE_CHANGED) {
 8011c28:	2d29      	cmp	r5, #41	; 0x29
 8011c2a:	d105      	bne.n	8011c38 <lv_tabview_event+0x2c>
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    }
}
 8011c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
 8011c34:	f012 b8bd 	b.w	8023db2 <lv_tabview_set_act>
}
 8011c38:	bd38      	pop	{r3, r4, r5, pc}
 8011c3a:	bf00      	nop
 8011c3c:	08029398 	.word	0x08029398

08011c40 <lv_tileview_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_tileview_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8011c40:	b510      	push	{r4, lr}
    LV_UNUSED(class_p);
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8011c42:	f242 0264 	movw	r2, #8292	; 0x2064
{
 8011c46:	460c      	mov	r4, r1
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8011c48:	4611      	mov	r1, r2
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f00a fd9a 	bl	801c784 <lv_obj_set_size>
    lv_obj_add_event_cb(obj, tileview_event_cb, LV_EVENT_ALL, NULL);
 8011c50:	2300      	movs	r3, #0
 8011c52:	4909      	ldr	r1, [pc, #36]	; (8011c78 <lv_tileview_constructor+0x38>)
 8011c54:	4620      	mov	r0, r4
 8011c56:	461a      	mov	r2, r3
 8011c58:	f009 fb0b 	bl	801b272 <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ONE);
 8011c5c:	4620      	mov	r0, r4
 8011c5e:	2180      	movs	r1, #128	; 0x80
 8011c60:	f009 fe83 	bl	801b96a <lv_obj_add_flag>
    lv_obj_set_scroll_snap_x(obj, LV_SCROLL_SNAP_CENTER);
 8011c64:	4620      	mov	r0, r4
 8011c66:	2103      	movs	r1, #3
 8011c68:	f00b f979 	bl	801cf5e <lv_obj_set_scroll_snap_x>
    lv_obj_set_scroll_snap_y(obj, LV_SCROLL_SNAP_CENTER);
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	2103      	movs	r1, #3

}
 8011c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_set_scroll_snap_y(obj, LV_SCROLL_SNAP_CENTER);
 8011c74:	f00b b97e 	b.w	801cf74 <lv_obj_set_scroll_snap_y>
 8011c78:	08023f3b 	.word	0x08023f3b

08011c7c <lv_tileview_tile_constructor>:

static void lv_tileview_tile_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8011c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    LV_UNUSED(class_p);
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8011c80:	4608      	mov	r0, r1
{
 8011c82:	460c      	mov	r4, r1
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8011c84:	f00c fab4 	bl	801e1f0 <lv_obj_get_parent>
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8011c88:	f242 0264 	movw	r2, #8292	; 0x2064
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8011c8c:	4605      	mov	r5, r0
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8011c8e:	4620      	mov	r0, r4
 8011c90:	4611      	mov	r1, r2
    lv_obj_update_layout(obj);  /*Be sure the size is correct*/
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 8011c92:	4f15      	ldr	r7, [pc, #84]	; (8011ce8 <lv_tileview_tile_constructor+0x6c>)
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8011c94:	f00a fd76 	bl	801c784 <lv_obj_set_size>
    lv_obj_update_layout(obj);  /*Be sure the size is correct*/
 8011c98:	4620      	mov	r0, r4
 8011c9a:	f7f3 fd95 	bl	80057c8 <lv_obj_update_layout>
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 8011c9e:	4628      	mov	r0, r5
 8011ca0:	f00a fe08 	bl	801c8b4 <lv_obj_get_content_width>
 8011ca4:	6839      	ldr	r1, [r7, #0]
 8011ca6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8011cec <lv_tileview_tile_constructor+0x70>
 8011caa:	fb11 f100 	smulbb	r1, r1, r0
                   create_row_id * lv_obj_get_content_height(parent));
 8011cae:	4628      	mov	r0, r5
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 8011cb0:	b20e      	sxth	r6, r1
                   create_row_id * lv_obj_get_content_height(parent));
 8011cb2:	f00a fe15 	bl	801c8e0 <lv_obj_get_content_height>
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 8011cb6:	f8d8 2000 	ldr.w	r2, [r8]
 8011cba:	4631      	mov	r1, r6
 8011cbc:	fb12 f200 	smulbb	r2, r2, r0
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	b212      	sxth	r2, r2
 8011cc4:	f00a fd25 	bl	801c712 <lv_obj_set_pos>

    lv_tileview_tile_t * tile = (lv_tileview_tile_t *)obj;
    tile->dir = create_dir;
 8011cc8:	4b09      	ldr	r3, [pc, #36]	; (8011cf0 <lv_tileview_tile_constructor+0x74>)

    if(create_col_id == 0 && create_row_id == 0) {
 8011cca:	f8d8 2000 	ldr.w	r2, [r8]
    tile->dir = create_dir;
 8011cce:	7819      	ldrb	r1, [r3, #0]
    if(create_col_id == 0 && create_row_id == 0) {
 8011cd0:	683b      	ldr	r3, [r7, #0]
    tile->dir = create_dir;
 8011cd2:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if(create_col_id == 0 && create_row_id == 0) {
 8011cd6:	4313      	orrs	r3, r2
 8011cd8:	d104      	bne.n	8011ce4 <lv_tileview_tile_constructor+0x68>
        lv_obj_set_scroll_dir(parent, create_dir);
 8011cda:	4628      	mov	r0, r5
    }
}
 8011cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_set_scroll_dir(parent, create_dir);
 8011ce0:	f00b b92e 	b.w	801cf40 <lv_obj_set_scroll_dir>
}
 8011ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ce8:	240011e0 	.word	0x240011e0
 8011cec:	240011dc 	.word	0x240011dc
 8011cf0:	24010e36 	.word	0x24010e36

08011cf4 <lv_win_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_win_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8011cf4:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(class_p);
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8011cf6:	4608      	mov	r0, r1
{
 8011cf8:	460c      	mov	r4, r1
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8011cfa:	f00c fa79 	bl	801e1f0 <lv_obj_get_parent>
 8011cfe:	4606      	mov	r6, r0
    lv_obj_set_size(obj, lv_obj_get_width(parent), lv_obj_get_height(parent));
 8011d00:	f00a fdcc 	bl	801c89c <lv_obj_get_width>
 8011d04:	4605      	mov	r5, r0
 8011d06:	4630      	mov	r0, r6
 8011d08:	f00a fdce 	bl	801c8a8 <lv_obj_get_height>
 8011d0c:	4629      	mov	r1, r5
 8011d0e:	4602      	mov	r2, r0
 8011d10:	4620      	mov	r0, r4
 8011d12:	f00a fd37 	bl	801c784 <lv_obj_set_size>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 8011d16:	2101      	movs	r1, #1
 8011d18:	4620      	mov	r0, r4
 8011d1a:	f7f9 fc57 	bl	800b5cc <lv_obj_set_flex_flow>

    lv_obj_t * header = lv_obj_create(obj);
 8011d1e:	4620      	mov	r0, r4
 8011d20:	f7f3 f81e 	bl	8004d60 <lv_obj_create>
    lv_obj_set_size(header, LV_PCT(100), create_header_height);
 8011d24:	4b0f      	ldr	r3, [pc, #60]	; (8011d64 <lv_win_constructor+0x70>)
    lv_obj_t * header = lv_obj_create(obj);
 8011d26:	4605      	mov	r5, r0
    lv_obj_set_size(header, LV_PCT(100), create_header_height);
 8011d28:	f242 0164 	movw	r1, #8292	; 0x2064
 8011d2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011d30:	f00a fd28 	bl	801c784 <lv_obj_set_size>
    lv_obj_set_flex_flow(header, LV_FLEX_FLOW_ROW);
 8011d34:	4628      	mov	r0, r5
 8011d36:	2100      	movs	r1, #0
 8011d38:	f7f9 fc48 	bl	800b5cc <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(header, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 8011d3c:	2302      	movs	r3, #2
 8011d3e:	2100      	movs	r1, #0
 8011d40:	4628      	mov	r0, r5
 8011d42:	461a      	mov	r2, r3
 8011d44:	f7f9 fc6a 	bl	800b61c <lv_obj_set_flex_align>

    lv_obj_t * cont = lv_obj_create(obj);
 8011d48:	4620      	mov	r0, r4
 8011d4a:	f7f3 f809 	bl	8004d60 <lv_obj_create>
 8011d4e:	4604      	mov	r4, r0
    lv_obj_set_flex_grow(cont, 1);
 8011d50:	2101      	movs	r1, #1
 8011d52:	f011 f8f9 	bl	8022f48 <lv_obj_set_flex_grow>
    lv_obj_set_width(cont, LV_PCT(100));
 8011d56:	4620      	mov	r0, r4
 8011d58:	f242 0164 	movw	r1, #8292	; 0x2064
}
 8011d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_width(cont, LV_PCT(100));
 8011d60:	f00a bce2 	b.w	801c728 <lv_obj_set_width>
 8011d64:	24010d22 	.word	0x24010d22

08011d68 <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 8011d68:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(letter == '\0') return 0;
 8011d6a:	460d      	mov	r5, r1
{
 8011d6c:	b085      	sub	sp, #20
    if(letter == '\0') return 0;
 8011d6e:	b181      	cbz	r1, 8011d92 <get_glyph_dsc_id+0x2a>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8011d70:	6904      	ldr	r4, [r0, #16]

    /*Check the cache first*/
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8011d72:	6962      	ldr	r2, [r4, #20]
 8011d74:	b97a      	cbnz	r2, 8011d96 <get_glyph_dsc_id+0x2e>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 8011d76:	8a67      	ldrh	r7, [r4, #18]
 8011d78:	2000      	movs	r0, #0
 8011d7a:	f04f 0c14 	mov.w	ip, #20
 8011d7e:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8011d82:	b283      	uxth	r3, r0
 8011d84:	429f      	cmp	r7, r3
 8011d86:	d80c      	bhi.n	8011da2 <get_glyph_dsc_id+0x3a>
            fdsc->cache->last_glyph_id = glyph_id;
        }
        return glyph_id;
    }

    if(fdsc->cache) {
 8011d88:	b11a      	cbz	r2, 8011d92 <get_glyph_dsc_id+0x2a>
        fdsc->cache->last_letter = letter;
 8011d8a:	6015      	str	r5, [r2, #0]
        fdsc->cache->last_glyph_id = 0;
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	6963      	ldr	r3, [r4, #20]
 8011d90:	605a      	str	r2, [r3, #4]
    if(letter == '\0') return 0;
 8011d92:	2000      	movs	r0, #0
 8011d94:	e003      	b.n	8011d9e <get_glyph_dsc_id+0x36>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8011d96:	6813      	ldr	r3, [r2, #0]
 8011d98:	428b      	cmp	r3, r1
 8011d9a:	d1ec      	bne.n	8011d76 <get_glyph_dsc_id+0xe>
 8011d9c:	6850      	ldr	r0, [r2, #4]
    }
    return 0;

}
 8011d9e:	b005      	add	sp, #20
 8011da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8011da2:	fb0c f600 	mul.w	r6, ip, r0
 8011da6:	68a3      	ldr	r3, [r4, #8]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8011da8:	3001      	adds	r0, #1
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8011daa:	1999      	adds	r1, r3, r6
 8011dac:	599b      	ldr	r3, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8011dae:	f8b1 e004 	ldrh.w	lr, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8011db2:	1aeb      	subs	r3, r5, r3
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8011db4:	459e      	cmp	lr, r3
 8011db6:	d3e4      	bcc.n	8011d82 <get_glyph_dsc_id+0x1a>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8011db8:	7c8a      	ldrb	r2, [r1, #18]
 8011dba:	2a02      	cmp	r2, #2
 8011dbc:	d102      	bne.n	8011dc4 <get_glyph_dsc_id+0x5c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8011dbe:	88c8      	ldrh	r0, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8011dc0:	4418      	add	r0, r3
 8011dc2:	e019      	b.n	8011df8 <get_glyph_dsc_id+0x90>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8011dc4:	b91a      	cbnz	r2, 8011dce <get_glyph_dsc_id+0x66>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8011dc6:	68ca      	ldr	r2, [r1, #12]
 8011dc8:	5cd0      	ldrb	r0, [r2, r3]
 8011dca:	88cb      	ldrh	r3, [r1, #6]
 8011dcc:	e7f8      	b.n	8011dc0 <get_glyph_dsc_id+0x58>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 8011dce:	2a03      	cmp	r2, #3
 8011dd0:	d119      	bne.n	8011e06 <get_glyph_dsc_id+0x9e>
            uint16_t key = rcp;
 8011dd2:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8011dd6:	f10d 000e 	add.w	r0, sp, #14
 8011dda:	4b17      	ldr	r3, [pc, #92]	; (8011e38 <get_glyph_dsc_id+0xd0>)
 8011ddc:	8a0a      	ldrh	r2, [r1, #16]
 8011dde:	9300      	str	r3, [sp, #0]
 8011de0:	2302      	movs	r3, #2
 8011de2:	6889      	ldr	r1, [r1, #8]
 8011de4:	f013 fdb8 	bl	8025958 <_lv_utils_bsearch>
            if(p) {
 8011de8:	b130      	cbz	r0, 8011df8 <get_glyph_dsc_id+0x90>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8011dea:	68a3      	ldr	r3, [r4, #8]
 8011dec:	4433      	add	r3, r6
 8011dee:	689a      	ldr	r2, [r3, #8]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8011df0:	88db      	ldrh	r3, [r3, #6]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8011df2:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8011df4:	eb03 0060 	add.w	r0, r3, r0, asr #1
        if(fdsc->cache) {
 8011df8:	6963      	ldr	r3, [r4, #20]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d0cf      	beq.n	8011d9e <get_glyph_dsc_id+0x36>
            fdsc->cache->last_letter = letter;
 8011dfe:	601d      	str	r5, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 8011e00:	6963      	ldr	r3, [r4, #20]
 8011e02:	6058      	str	r0, [r3, #4]
 8011e04:	e7cb      	b.n	8011d9e <get_glyph_dsc_id+0x36>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8011e06:	2a01      	cmp	r2, #1
 8011e08:	d114      	bne.n	8011e34 <get_glyph_dsc_id+0xcc>
            uint16_t key = rcp;
 8011e0a:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8011e0e:	f10d 000e 	add.w	r0, sp, #14
 8011e12:	4b09      	ldr	r3, [pc, #36]	; (8011e38 <get_glyph_dsc_id+0xd0>)
 8011e14:	8a0a      	ldrh	r2, [r1, #16]
 8011e16:	9300      	str	r3, [sp, #0]
 8011e18:	2302      	movs	r3, #2
 8011e1a:	6889      	ldr	r1, [r1, #8]
 8011e1c:	f013 fd9c 	bl	8025958 <_lv_utils_bsearch>
            if(p) {
 8011e20:	2800      	cmp	r0, #0
 8011e22:	d0e9      	beq.n	8011df8 <get_glyph_dsc_id+0x90>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8011e24:	68a3      	ldr	r3, [r4, #8]
 8011e26:	4433      	add	r3, r6
 8011e28:	689a      	ldr	r2, [r3, #8]
 8011e2a:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8011e2c:	68da      	ldr	r2, [r3, #12]
 8011e2e:	88db      	ldrh	r3, [r3, #6]
 8011e30:	5a10      	ldrh	r0, [r2, r0]
 8011e32:	e7c5      	b.n	8011dc0 <get_glyph_dsc_id+0x58>
        uint32_t glyph_id = 0;
 8011e34:	2000      	movs	r0, #0
 8011e36:	e7df      	b.n	8011df8 <get_glyph_dsc_id+0x90>
 8011e38:	080240dd 	.word	0x080240dd

08011e3c <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
 8011e3c:	2a09      	cmp	r2, #9
{
 8011e3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e42:	460d      	mov	r5, r1
 8011e44:	b085      	sub	sp, #20
 8011e46:	4611      	mov	r1, r2
        unicode_letter = ' ';
 8011e48:	bf08      	it	eq
 8011e4a:	2120      	moveq	r1, #32
{
 8011e4c:	4680      	mov	r8, r0
 8011e4e:	4699      	mov	r9, r3
        is_tab = true;
 8011e50:	bf0c      	ite	eq
 8011e52:	2701      	moveq	r7, #1
    bool is_tab = false;
 8011e54:	2700      	movne	r7, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8011e56:	6906      	ldr	r6, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8011e58:	f7ff ff86 	bl	8011d68 <get_glyph_dsc_id>
    if(!gid) return false;
 8011e5c:	4604      	mov	r4, r0
 8011e5e:	b340      	cbz	r0, 8011eb2 <lv_font_get_glyph_dsc_fmt_txt+0x76>
    if(fdsc->kern_dsc) {
 8011e60:	68f3      	ldr	r3, [r6, #12]
 8011e62:	bb4b      	cbnz	r3, 8011eb8 <lv_font_get_glyph_dsc_fmt_txt+0x7c>
    int8_t kvalue = 0;
 8011e64:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8011e66:	6871      	ldr	r1, [r6, #4]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8011e68:	8a32      	ldrh	r2, [r6, #16]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8011e6a:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8011e6e:	4353      	muls	r3, r2
    uint32_t adv_w = gdsc->adv_w;
 8011e70:	884a      	ldrh	r2, [r1, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8011e72:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 8011e74:	f3c2 100b 	ubfx	r0, r2, #4, #12
 8011e78:	4602      	mov	r2, r0
    if(is_tab) adv_w *= 2;
 8011e7a:	b10f      	cbz	r7, 8011e80 <lv_font_get_glyph_dsc_fmt_txt+0x44>
 8011e7c:	b202      	sxth	r2, r0
 8011e7e:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8011e80:	3308      	adds	r3, #8
 8011e82:	4413      	add	r3, r2
 8011e84:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 8011e86:	80ab      	strh	r3, [r5, #4]
    dsc_out->box_h = gdsc->box_h;
 8011e88:	794b      	ldrb	r3, [r1, #5]
 8011e8a:	812b      	strh	r3, [r5, #8]
    dsc_out->box_w = gdsc->box_w;
 8011e8c:	790a      	ldrb	r2, [r1, #4]
 8011e8e:	80ea      	strh	r2, [r5, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 8011e90:	f991 3006 	ldrsb.w	r3, [r1, #6]
 8011e94:	816b      	strh	r3, [r5, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 8011e96:	f991 3007 	ldrsb.w	r3, [r1, #7]
 8011e9a:	81ab      	strh	r3, [r5, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 8011e9c:	7bab      	ldrb	r3, [r5, #14]
 8011e9e:	7cf1      	ldrb	r1, [r6, #19]
 8011ea0:	f023 031f 	bic.w	r3, r3, #31
 8011ea4:	f3c1 0143 	ubfx	r1, r1, #1, #4
 8011ea8:	430b      	orrs	r3, r1
 8011eaa:	73ab      	strb	r3, [r5, #14]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 8011eac:	2f00      	cmp	r7, #0
 8011eae:	d15f      	bne.n	8011f70 <lv_font_get_glyph_dsc_fmt_txt+0x134>
    return true;
 8011eb0:	2001      	movs	r0, #1
}
 8011eb2:	b005      	add	sp, #20
 8011eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 8011eb8:	4649      	mov	r1, r9
 8011eba:	4640      	mov	r0, r8
 8011ebc:	f7ff ff54 	bl	8011d68 <get_glyph_dsc_id>
        if(gid_next) {
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	d0cf      	beq.n	8011e64 <lv_font_get_glyph_dsc_fmt_txt+0x28>
            kvalue = get_kern_value(font, gid, gid_next);
 8011ec4:	f8d8 2010 	ldr.w	r2, [r8, #16]

    int8_t value = 0;

    if(fdsc->kern_classes == 0) {
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 8011ec8:	f8d2 800c 	ldr.w	r8, [r2, #12]
    if(fdsc->kern_classes == 0) {
 8011ecc:	7cd2      	ldrb	r2, [r2, #19]
 8011ece:	0693      	lsls	r3, r2, #26
 8011ed0:	d439      	bmi.n	8011f46 <lv_font_get_glyph_dsc_fmt_txt+0x10a>
        if(kdsc->glyph_ids_size == 0) {
 8011ed2:	f898 200b 	ldrb.w	r2, [r8, #11]
 8011ed6:	2a3f      	cmp	r2, #63	; 0x3f
 8011ed8:	d81a      	bhi.n	8011f10 <lv_font_get_glyph_dsc_fmt_txt+0xd4>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint16_t * g_ids = kdsc->glyph_ids;
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8011eda:	eb04 2300 	add.w	r3, r4, r0, lsl #8
            const uint16_t * g_ids = kdsc->glyph_ids;
 8011ede:	f8d8 9000 	ldr.w	r9, [r8]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8011ee2:	a803      	add	r0, sp, #12
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8011ee4:	f8ad 300c 	strh.w	r3, [sp, #12]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8011ee8:	4649      	mov	r1, r9
 8011eea:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8011eee:	4b22      	ldr	r3, [pc, #136]	; (8011f78 <lv_font_get_glyph_dsc_fmt_txt+0x13c>)
 8011ef0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8011ef4:	9300      	str	r3, [sp, #0]
 8011ef6:	2302      	movs	r3, #2
 8011ef8:	f013 fd2e 	bl	8025958 <_lv_utils_bsearch>

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 8011efc:	4603      	mov	r3, r0
 8011efe:	2800      	cmp	r0, #0
 8011f00:	d0b1      	beq.n	8011e66 <lv_font_get_glyph_dsc_fmt_txt+0x2a>
                lv_uintptr_t ofs = kid_p - g_ids;
 8011f02:	eba0 0309 	sub.w	r3, r0, r9
 8011f06:	105b      	asrs	r3, r3, #1
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
                lv_uintptr_t ofs = kid_p - g_ids;
                value = kdsc->values[ofs];
 8011f08:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8011f0c:	56d3      	ldrsb	r3, [r2, r3]
 8011f0e:	e7aa      	b.n	8011e66 <lv_font_get_glyph_dsc_fmt_txt+0x2a>
        else if(kdsc->glyph_ids_size == 1) {
 8011f10:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8011f14:	2a40      	cmp	r2, #64	; 0x40
 8011f16:	d1a5      	bne.n	8011e64 <lv_font_get_glyph_dsc_fmt_txt+0x28>
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 8011f18:	eb04 4000 	add.w	r0, r4, r0, lsl #16
            const uint32_t * g_ids = kdsc->glyph_ids;
 8011f1c:	f8d8 9000 	ldr.w	r9, [r8]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8011f20:	4b16      	ldr	r3, [pc, #88]	; (8011f7c <lv_font_get_glyph_dsc_fmt_txt+0x140>)
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 8011f22:	9003      	str	r0, [sp, #12]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8011f24:	4649      	mov	r1, r9
 8011f26:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8011f2a:	a803      	add	r0, sp, #12
 8011f2c:	9300      	str	r3, [sp, #0]
 8011f2e:	2304      	movs	r3, #4
 8011f30:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8011f34:	f013 fd10 	bl	8025958 <_lv_utils_bsearch>
            if(kid_p) {
 8011f38:	4603      	mov	r3, r0
 8011f3a:	2800      	cmp	r0, #0
 8011f3c:	d093      	beq.n	8011e66 <lv_font_get_glyph_dsc_fmt_txt+0x2a>
                lv_uintptr_t ofs = kid_p - g_ids;
 8011f3e:	eba0 0309 	sub.w	r3, r0, r9
 8011f42:	109b      	asrs	r3, r3, #2
 8011f44:	e7e0      	b.n	8011f08 <lv_font_get_glyph_dsc_fmt_txt+0xcc>
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8011f46:	f8d8 2004 	ldr.w	r2, [r8, #4]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8011f4a:	f8d8 1008 	ldr.w	r1, [r8, #8]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8011f4e:	5d12      	ldrb	r2, [r2, r4]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8011f50:	5c09      	ldrb	r1, [r1, r0]

        /*If class = 0, kerning not exist for that glyph
         *else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 8011f52:	2a00      	cmp	r2, #0
 8011f54:	d086      	beq.n	8011e64 <lv_font_get_glyph_dsc_fmt_txt+0x28>
 8011f56:	2900      	cmp	r1, #0
 8011f58:	d084      	beq.n	8011e64 <lv_font_get_glyph_dsc_fmt_txt+0x28>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 8011f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8011f5e:	3a01      	subs	r2, #1
 8011f60:	f898 000d 	ldrb.w	r0, [r8, #13]
 8011f64:	440b      	add	r3, r1
 8011f66:	fb00 3302 	mla	r3, r0, r2, r3
 8011f6a:	f913 3c01 	ldrsb.w	r3, [r3, #-1]
 8011f6e:	e77a      	b.n	8011e66 <lv_font_get_glyph_dsc_fmt_txt+0x2a>
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 8011f70:	0052      	lsls	r2, r2, #1
 8011f72:	80ea      	strh	r2, [r5, #6]
 8011f74:	e79c      	b.n	8011eb0 <lv_font_get_glyph_dsc_fmt_txt+0x74>
 8011f76:	bf00      	nop
 8011f78:	080240b9 	.word	0x080240b9
 8011f7c:	080240cb 	.word	0x080240cb

08011f80 <lv_disp_drv_init>:
 8011f80:	2250      	movs	r2, #80	; 0x50
 8011f82:	2100      	movs	r1, #0
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 8011f84:	b510      	push	{r4, lr}
 8011f86:	4604      	mov	r4, r0
 8011f88:	f008 fbfe 	bl	801a788 <memset>
    lv_memset_00(driver, sizeof(lv_disp_drv_t));

    driver->hor_res          = 320;
    driver->ver_res          = 240;
    driver->physical_hor_res = -1;
 8011f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8011f90:	4a0b      	ldr	r2, [pc, #44]	; (8011fc0 <lv_disp_drv_init+0x40>)
 8011f92:	e9c4 2300 	strd	r2, r3, [r4]
    driver->physical_ver_res = -1;
    driver->offset_x         = 0;
 8011f96:	2300      	movs	r3, #0
 8011f98:	60a3      	str	r3, [r4, #8]
    driver->offset_y         = 0;
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8011f9a:	6923      	ldr	r3, [r4, #16]
 8011f9c:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8011fa0:	f423 73e4 	bic.w	r3, r3, #456	; 0x1c8
 8011fa4:	f443 4382 	orr.w	r3, r3, #16640	; 0x4100
 8011fa8:	f043 0308 	orr.w	r3, r3, #8
 8011fac:	6123      	str	r3, [r4, #16]
    driver->screen_transp    = 0;
    driver->dpi              = LV_DPI_DEF;
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 8011fae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8011fb2:	8723      	strh	r3, [r4, #56]	; 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 8011fb4:	4b03      	ldr	r3, [pc, #12]	; (8011fc4 <lv_disp_drv_init+0x44>)
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 8011fb6:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 8011fba:	2358      	movs	r3, #88	; 0x58
 8011fbc:	64a3      	str	r3, [r4, #72]	; 0x48
#endif

}
 8011fbe:	bd10      	pop	{r4, pc}
 8011fc0:	00f00140 	.word	0x00f00140
 8011fc4:	08009125 	.word	0x08009125

08011fc8 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8011fc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011fcc:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8011fce:	4844      	ldr	r0, [pc, #272]	; (80120e0 <lv_disp_drv_register+0x118>)
 8011fd0:	f012 fd3e 	bl	8024a50 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(disp);
 8011fd4:	4604      	mov	r4, r0
 8011fd6:	b900      	cbnz	r0, 8011fda <lv_disp_drv_register+0x12>
 8011fd8:	e7fe      	b.n	8011fd8 <lv_disp_drv_register+0x10>
    if(!disp) {
        return NULL;
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 8011fda:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8011fdc:	b953      	cbnz	r3, 8011ff4 <lv_disp_drv_register+0x2c>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 8011fde:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8011fe0:	f000 fb9a 	bl	8012718 <lv_mem_alloc>
        LV_ASSERT_MALLOC(draw_ctx);
 8011fe4:	4606      	mov	r6, r0
 8011fe6:	b900      	cbnz	r0, 8011fea <lv_disp_drv_register+0x22>
 8011fe8:	e7fe      	b.n	8011fe8 <lv_disp_drv_register+0x20>
        if(draw_ctx == NULL) return NULL;
        driver->draw_ctx_init(driver, draw_ctx);
 8011fea:	4601      	mov	r1, r0
 8011fec:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8011fee:	4628      	mov	r0, r5
 8011ff0:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 8011ff2:	63ee      	str	r6, [r5, #60]	; 0x3c
 8011ff4:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8011ff8:	2100      	movs	r1, #0
 8011ffa:	4620      	mov	r0, r4

    disp->driver = driver;

    disp->inv_en_cnt = 1;

    lv_disp_t * disp_def_tmp = disp_def;
 8011ffc:	4f39      	ldr	r7, [pc, #228]	; (80120e4 <lv_disp_drv_register+0x11c>)
 8011ffe:	f008 fbc3 	bl	801a788 <memset>
    disp->inv_en_cnt = 1;
 8012002:	2301      	movs	r3, #1
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8012004:	4622      	mov	r2, r4
 8012006:	211e      	movs	r1, #30
 8012008:	4837      	ldr	r0, [pc, #220]	; (80120e8 <lv_disp_drv_register+0x120>)
    disp->driver = driver;
 801200a:	6025      	str	r5, [r4, #0]
    disp->inv_en_cnt = 1;
 801200c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
    lv_disp_t * disp_def_tmp = disp_def;
 8012010:	683e      	ldr	r6, [r7, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 8012012:	603c      	str	r4, [r7, #0]
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8012014:	f000 fd18 	bl	8012a48 <lv_timer_create>
 8012018:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 801201a:	b900      	cbnz	r0, 801201e <lv_disp_drv_register+0x56>
 801201c:	e7fe      	b.n	801201c <lv_disp_drv_register+0x54>
    if(disp->refr_timer == NULL) {
        lv_mem_free(disp);
        return NULL;
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 801201e:	7c2b      	ldrb	r3, [r5, #16]
 8012020:	079a      	lsls	r2, r3, #30
 8012022:	d50a      	bpl.n	801203a <lv_disp_drv_register+0x72>
 8012024:	68e9      	ldr	r1, [r5, #12]
 8012026:	882a      	ldrh	r2, [r5, #0]
 8012028:	8868      	ldrh	r0, [r5, #2]
 801202a:	68c9      	ldr	r1, [r1, #12]
 801202c:	fb12 f200 	smulbb	r2, r2, r0
 8012030:	4291      	cmp	r1, r2
        driver->full_refresh = 0;
 8012032:	bf3c      	itt	cc
 8012034:	f36f 0341 	bfccc	r3, #1, #1
 8012038:	742b      	strbcc	r3, [r5, #16]

    disp->bg_color = lv_color_white();
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 801203a:	23ff      	movs	r3, #255	; 0xff
 801203c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    disp->bg_color = lv_color_white();
 8012040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012044:	8563      	strh	r3, [r4, #42]	; 0x2a
#endif

#if LV_USE_THEME_DEFAULT
    if(lv_theme_default_is_inited() == false) {
 8012046:	f7fc fa41 	bl	800e4cc <lv_theme_default_is_inited>
 801204a:	4605      	mov	r5, r0
 801204c:	2800      	cmp	r0, #0
 801204e:	d143      	bne.n	80120d8 <lv_disp_drv_register+0x110>
        disp->theme = lv_theme_default_init(disp, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED),
 8012050:	2005      	movs	r0, #5
 8012052:	f000 fac7 	bl	80125e4 <lv_palette_main>
 8012056:	4680      	mov	r8, r0
 8012058:	4628      	mov	r0, r5
 801205a:	f000 fac3 	bl	80125e4 <lv_palette_main>
 801205e:	4b23      	ldr	r3, [pc, #140]	; (80120ec <lv_disp_drv_register+0x124>)
 8012060:	4602      	mov	r2, r0
 8012062:	4641      	mov	r1, r8
 8012064:	9300      	str	r3, [sp, #0]
 8012066:	4620      	mov	r0, r4
 8012068:	462b      	mov	r3, r5
 801206a:	f7fa ff41 	bl	800cef0 <lv_theme_default_init>
 801206e:	60a0      	str	r0, [r4, #8]
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 8012070:	2000      	movs	r0, #0
 8012072:	f7f2 fe75 	bl	8004d60 <lv_obj_create>
 8012076:	6120      	str	r0, [r4, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 8012078:	2000      	movs	r0, #0
 801207a:	2e00      	cmp	r6, #0
 801207c:	bf08      	it	eq
 801207e:	4626      	moveq	r6, r4
 8012080:	f7f2 fe6e 	bl	8004d60 <lv_obj_create>
 8012084:	61e0      	str	r0, [r4, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 8012086:	2000      	movs	r0, #0
 8012088:	f7f2 fe6a 	bl	8004d60 <lv_obj_create>
 801208c:	4a18      	ldr	r2, [pc, #96]	; (80120f0 <lv_disp_drv_register+0x128>)
 801208e:	6220      	str	r0, [r4, #32]
 8012090:	2100      	movs	r1, #0
 8012092:	69e0      	ldr	r0, [r4, #28]
 8012094:	f00b fe61 	bl	801dd5a <lv_obj_remove_style>
 8012098:	4a15      	ldr	r2, [pc, #84]	; (80120f0 <lv_disp_drv_register+0x128>)
 801209a:	6a20      	ldr	r0, [r4, #32]
 801209c:	2100      	movs	r1, #0
 801209e:	f00b fe5c 	bl	801dd5a <lv_obj_remove_style>
    lv_obj_remove_style_all(disp->top_layer);
    lv_obj_remove_style_all(disp->sys_layer);
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 80120a2:	69e0      	ldr	r0, [r4, #28]
 80120a4:	2102      	movs	r1, #2
 80120a6:	f009 fc96 	bl	801b9d6 <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 80120aa:	6a20      	ldr	r0, [r4, #32]
 80120ac:	2102      	movs	r1, #2
 80120ae:	f009 fc92 	bl	801b9d6 <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 80120b2:	69e0      	ldr	r0, [r4, #28]
 80120b4:	2100      	movs	r1, #0
 80120b6:	f00a ff2f 	bl	801cf18 <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 80120ba:	2100      	movs	r1, #0
 80120bc:	6a20      	ldr	r0, [r4, #32]
 80120be:	f00a ff2b 	bl	801cf18 <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 80120c2:	6920      	ldr	r0, [r4, #16]
 80120c4:	f00a fdea 	bl	801cc9c <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 80120c8:	6860      	ldr	r0, [r4, #4]
    disp_def = disp_def_tmp; /*Revert the default display*/
 80120ca:	603e      	str	r6, [r7, #0]
    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 80120cc:	f013 f825 	bl	802511a <lv_timer_ready>

    return disp;
}
 80120d0:	4620      	mov	r0, r4
 80120d2:	b002      	add	sp, #8
 80120d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        disp->theme = lv_theme_default_get();
 80120d8:	f7fc f9ec 	bl	800e4b4 <lv_theme_default_get>
 80120dc:	e7c7      	b.n	801206e <lv_disp_drv_register+0xa6>
 80120de:	bf00      	nop
 80120e0:	240013f8 	.word	0x240013f8
 80120e4:	240011ec 	.word	0x240011ec
 80120e8:	08007279 	.word	0x08007279
 80120ec:	08029408 	.word	0x08029408
 80120f0:	000fffff 	.word	0x000fffff

080120f4 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 80120f4:	4b01      	ldr	r3, [pc, #4]	; (80120fc <lv_disp_get_default+0x8>)
 80120f6:	6818      	ldr	r0, [r3, #0]
 80120f8:	4770      	bx	lr
 80120fa:	bf00      	nop
 80120fc:	240011ec 	.word	0x240011ec

08012100 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8012100:	b910      	cbnz	r0, 8012108 <lv_disp_get_hor_res+0x8>
    return disp_def;
 8012102:	4b06      	ldr	r3, [pc, #24]	; (801211c <lv_disp_get_hor_res+0x1c>)
 8012104:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 8012106:	b140      	cbz	r0, 801211a <lv_disp_get_hor_res+0x1a>
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 8012108:	6803      	ldr	r3, [r0, #0]
 801210a:	7c1a      	ldrb	r2, [r3, #16]
 801210c:	06d2      	lsls	r2, r2, #27
 801210e:	d502      	bpl.n	8012116 <lv_disp_get_hor_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 8012110:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8012114:	4770      	bx	lr
            default:
                return disp->driver->hor_res;
 8012116:	f9b3 0000 	ldrsh.w	r0, [r3]
        }
    }
}
 801211a:	4770      	bx	lr
 801211c:	240011ec 	.word	0x240011ec

08012120 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8012120:	b910      	cbnz	r0, 8012128 <lv_disp_get_ver_res+0x8>
    return disp_def;
 8012122:	4b06      	ldr	r3, [pc, #24]	; (801213c <lv_disp_get_ver_res+0x1c>)
 8012124:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 8012126:	b140      	cbz	r0, 801213a <lv_disp_get_ver_res+0x1a>
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 8012128:	6803      	ldr	r3, [r0, #0]
 801212a:	7c1a      	ldrb	r2, [r3, #16]
 801212c:	06d2      	lsls	r2, r2, #27
 801212e:	d502      	bpl.n	8012136 <lv_disp_get_ver_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 8012130:	f9b3 0000 	ldrsh.w	r0, [r3]
 8012134:	4770      	bx	lr
            default:
                return disp->driver->ver_res;
 8012136:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
        }
    }
}
 801213a:	4770      	bx	lr
 801213c:	240011ec 	.word	0x240011ec

08012140 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8012140:	b910      	cbnz	r0, 8012148 <lv_disp_get_dpi+0x8>
    return disp_def;
 8012142:	4b05      	ldr	r3, [pc, #20]	; (8012158 <lv_disp_get_dpi+0x18>)
 8012144:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 8012146:	b120      	cbz	r0, 8012152 <lv_disp_get_dpi+0x12>
    return disp->driver->dpi;
 8012148:	6803      	ldr	r3, [r0, #0]
 801214a:	6918      	ldr	r0, [r3, #16]
 801214c:	f3c0 10c9 	ubfx	r0, r0, #7, #10
 8012150:	4770      	bx	lr
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 8012152:	2082      	movs	r0, #130	; 0x82
}
 8012154:	4770      	bx	lr
 8012156:	bf00      	nop
 8012158:	240011ec 	.word	0x240011ec

0801215c <lv_disp_get_next>:
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
    if(disp == NULL)
 801215c:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 801215e:	4803      	ldr	r0, [pc, #12]	; (801216c <lv_disp_get_next+0x10>)
    if(disp == NULL)
 8012160:	b909      	cbnz	r1, 8012166 <lv_disp_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8012162:	f012 bce7 	b.w	8024b34 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 8012166:	f012 bceb 	b.w	8024b40 <_lv_ll_get_next>
 801216a:	bf00      	nop
 801216c:	240013f8 	.word	0x240013f8

08012170 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 8012170:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8012172:	4803      	ldr	r0, [pc, #12]	; (8012180 <lv_indev_get_next+0x10>)
    if(indev == NULL)
 8012174:	b909      	cbnz	r1, 801217a <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8012176:	f012 bcdd 	b.w	8024b34 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 801217a:	f012 bce1 	b.w	8024b40 <_lv_ll_get_next>
 801217e:	bf00      	nop
 8012180:	240013ec 	.word	0x240013ec

08012184 <anim_mark_list_change>:
        }
    }
}

static void anim_mark_list_change(void)
{
 8012184:	b508      	push	{r3, lr}
    anim_list_changed = true;
 8012186:	2201      	movs	r2, #1
 8012188:	4b08      	ldr	r3, [pc, #32]	; (80121ac <anim_mark_list_change+0x28>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 801218a:	4809      	ldr	r0, [pc, #36]	; (80121b0 <anim_mark_list_change+0x2c>)
    anim_list_changed = true;
 801218c:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 801218e:	f012 fcd1 	bl	8024b34 <_lv_ll_get_head>
 8012192:	4b08      	ldr	r3, [pc, #32]	; (80121b4 <anim_mark_list_change+0x30>)
 8012194:	b920      	cbnz	r0, 80121a0 <anim_mark_list_change+0x1c>
        lv_timer_pause(_lv_anim_tmr);
 8012196:	6818      	ldr	r0, [r3, #0]
    else
        lv_timer_resume(_lv_anim_tmr);
}
 8012198:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_pause(_lv_anim_tmr);
 801219c:	f012 bfb3 	b.w	8025106 <lv_timer_pause>
        lv_timer_resume(_lv_anim_tmr);
 80121a0:	6818      	ldr	r0, [r3, #0]
}
 80121a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_resume(_lv_anim_tmr);
 80121a6:	f012 bfb3 	b.w	8025110 <lv_timer_resume>
 80121aa:	bf00      	nop
 80121ac:	24010e38 	.word	0x24010e38
 80121b0:	240013d4 	.word	0x240013d4
 80121b4:	240011f0 	.word	0x240011f0

080121b8 <anim_timer>:
{
 80121b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 80121bc:	4f59      	ldr	r7, [pc, #356]	; (8012324 <anim_timer+0x16c>)
    anim_run_round = anim_run_round ? false : true;
 80121be:	4e5a      	ldr	r6, [pc, #360]	; (8012328 <anim_timer+0x170>)
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 80121c0:	6838      	ldr	r0, [r7, #0]
 80121c2:	f011 ffca 	bl	802415a <lv_tick_elaps>
    anim_run_round = anim_run_round ? false : true;
 80121c6:	7833      	ldrb	r3, [r6, #0]
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 80121c8:	4605      	mov	r5, r0
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80121ca:	4858      	ldr	r0, [pc, #352]	; (801232c <anim_timer+0x174>)
    anim_run_round = anim_run_round ? false : true;
 80121cc:	f083 0301 	eor.w	r3, r3, #1
        anim_list_changed = false;
 80121d0:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8012330 <anim_timer+0x178>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80121d4:	f8df 9154 	ldr.w	r9, [pc, #340]	; 801232c <anim_timer+0x174>
    anim_run_round = anim_run_round ? false : true;
 80121d8:	7033      	strb	r3, [r6, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80121da:	f012 fcab 	bl	8024b34 <_lv_ll_get_head>
 80121de:	4604      	mov	r4, r0
    while(a != NULL) {
 80121e0:	b924      	cbnz	r4, 80121ec <anim_timer+0x34>
    last_timer_run = lv_tick_get();
 80121e2:	f011 ffb2 	bl	802414a <lv_tick_get>
 80121e6:	6038      	str	r0, [r7, #0]
}
 80121e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        anim_list_changed = false;
 80121ec:	2300      	movs	r3, #0
        if(a->run_round != anim_run_round) {
 80121ee:	7832      	ldrb	r2, [r6, #0]
        anim_list_changed = false;
 80121f0:	f888 3000 	strb.w	r3, [r8]
        if(a->run_round != anim_run_round) {
 80121f4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80121f8:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80121fc:	4291      	cmp	r1, r2
 80121fe:	f000 808c 	beq.w	801231a <anim_timer+0x162>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8012202:	f362 0382 	bfi	r3, r2, #2, #1
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8012206:	0719      	lsls	r1, r3, #28
 8012208:	b2da      	uxtb	r2, r3
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 801220a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 801220e:	d41a      	bmi.n	8012246 <anim_timer+0x8e>
            int32_t new_act_time = a->act_time + elaps;
 8012210:	6b23      	ldr	r3, [r4, #48]	; 0x30
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8012212:	2b00      	cmp	r3, #0
 8012214:	dc17      	bgt.n	8012246 <anim_timer+0x8e>
 8012216:	42eb      	cmn	r3, r5
 8012218:	d415      	bmi.n	8012246 <anim_timer+0x8e>
                if(a->early_apply == 0 && a->get_value_cb) {
 801221a:	07d3      	lsls	r3, r2, #31
 801221c:	d409      	bmi.n	8012232 <anim_timer+0x7a>
 801221e:	6963      	ldr	r3, [r4, #20]
 8012220:	b13b      	cbz	r3, 8012232 <anim_timer+0x7a>
                    int32_t v_ofs = a->get_value_cb(a);
 8012222:	4620      	mov	r0, r4
 8012224:	4798      	blx	r3
                    a->start_value += v_ofs;
 8012226:	6a23      	ldr	r3, [r4, #32]
 8012228:	4403      	add	r3, r0
 801222a:	6223      	str	r3, [r4, #32]
                    a->end_value += v_ofs;
 801222c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801222e:	4403      	add	r3, r0
 8012230:	62a3      	str	r3, [r4, #40]	; 0x28
                if(a->start_cb) a->start_cb(a);
 8012232:	68a3      	ldr	r3, [r4, #8]
 8012234:	b10b      	cbz	r3, 801223a <anim_timer+0x82>
 8012236:	4620      	mov	r0, r4
 8012238:	4798      	blx	r3
                a->start_cb_called = 1;
 801223a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801223e:	f043 0308 	orr.w	r3, r3, #8
 8012242:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            a->act_time += elaps;
 8012246:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012248:	442b      	add	r3, r5
            if(a->act_time >= 0) {
 801224a:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 801224c:	6323      	str	r3, [r4, #48]	; 0x30
            if(a->act_time >= 0) {
 801224e:	db2b      	blt.n	80122a8 <anim_timer+0xf0>
                if(a->act_time > a->time) a->act_time = a->time;
 8012250:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                new_value = a->path_cb(a);
 8012252:	4620      	mov	r0, r4
 8012254:	429a      	cmp	r2, r3
 8012256:	bfd4      	ite	le
 8012258:	6322      	strle	r2, [r4, #48]	; 0x30
 801225a:	6323      	strgt	r3, [r4, #48]	; 0x30
 801225c:	69e3      	ldr	r3, [r4, #28]
 801225e:	4798      	blx	r3
                if(new_value != a->current_value) {
 8012260:	6a63      	ldr	r3, [r4, #36]	; 0x24
                new_value = a->path_cb(a);
 8012262:	4601      	mov	r1, r0
                if(new_value != a->current_value) {
 8012264:	4283      	cmp	r3, r0
 8012266:	d004      	beq.n	8012272 <anim_timer+0xba>
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8012268:	6863      	ldr	r3, [r4, #4]
                    a->current_value = new_value;
 801226a:	6260      	str	r0, [r4, #36]	; 0x24
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 801226c:	b10b      	cbz	r3, 8012272 <anim_timer+0xba>
 801226e:	6820      	ldr	r0, [r4, #0]
 8012270:	4798      	blx	r3
                if(a->act_time >= a->time) {
 8012272:	e9d4 030b 	ldrd	r0, r3, [r4, #44]	; 0x2c
 8012276:	4283      	cmp	r3, r0
 8012278:	db16      	blt.n	80122a8 <anim_timer+0xf0>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 801227a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 801227e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8012282:	f012 0202 	ands.w	r2, r2, #2
 8012286:	d018      	beq.n	80122ba <anim_timer+0x102>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8012288:	bb5b      	cbnz	r3, 80122e2 <anim_timer+0x12a>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801228a:	4621      	mov	r1, r4
 801228c:	4827      	ldr	r0, [pc, #156]	; (801232c <anim_timer+0x174>)
 801228e:	f012 fc16 	bl	8024abe <_lv_ll_remove>
        anim_mark_list_change();
 8012292:	f7ff ff77 	bl	8012184 <anim_mark_list_change>
        if(a->ready_cb != NULL) a->ready_cb(a);
 8012296:	68e3      	ldr	r3, [r4, #12]
 8012298:	bb03      	cbnz	r3, 80122dc <anim_timer+0x124>
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 801229a:	6923      	ldr	r3, [r4, #16]
 801229c:	b10b      	cbz	r3, 80122a2 <anim_timer+0xea>
 801229e:	4620      	mov	r0, r4
 80122a0:	4798      	blx	r3
        lv_mem_free(a);
 80122a2:	4620      	mov	r0, r4
 80122a4:	f000 fa56 	bl	8012754 <lv_mem_free>
        if(anim_list_changed)
 80122a8:	f898 3000 	ldrb.w	r3, [r8]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d034      	beq.n	801231a <anim_timer+0x162>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80122b0:	4648      	mov	r0, r9
 80122b2:	f012 fc3f 	bl	8024b34 <_lv_ll_get_head>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80122b6:	4604      	mov	r4, r0
 80122b8:	e792      	b.n	80121e0 <anim_timer+0x28>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 80122ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 80122bc:	b143      	cbz	r3, 80122d0 <anim_timer+0x118>
 80122be:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80122c2:	4563      	cmp	r3, ip
 80122c4:	d023      	beq.n	801230e <anim_timer+0x156>
        a->repeat_cnt--;
 80122c6:	3b01      	subs	r3, #1
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 80122ce:	b9f3      	cbnz	r3, 801230e <anim_timer+0x156>
 80122d0:	2900      	cmp	r1, #0
 80122d2:	d0da      	beq.n	801228a <anim_timer+0xd2>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 80122d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80122d6:	425b      	negs	r3, r3
 80122d8:	6323      	str	r3, [r4, #48]	; 0x30
 80122da:	e008      	b.n	80122ee <anim_timer+0x136>
        if(a->ready_cb != NULL) a->ready_cb(a);
 80122dc:	4620      	mov	r0, r4
 80122de:	4798      	blx	r3
 80122e0:	e7db      	b.n	801229a <anim_timer+0xe2>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 80122e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
        if(a->playback_time != 0) {
 80122e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 80122e6:	425b      	negs	r3, r3
 80122e8:	6323      	str	r3, [r4, #48]	; 0x30
        if(a->playback_time != 0) {
 80122ea:	2900      	cmp	r1, #0
 80122ec:	d0dc      	beq.n	80122a8 <anim_timer+0xf0>
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 80122ee:	fab2 f282 	clz	r2, r2
 80122f2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
            a->playback_time = tmp;
 80122f6:	63a0      	str	r0, [r4, #56]	; 0x38
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 80122f8:	0952      	lsrs	r2, r2, #5
 80122fa:	f362 0341 	bfi	r3, r2, #1, #1
            int32_t tmp    = a->start_value;
 80122fe:	6a22      	ldr	r2, [r4, #32]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8012300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            a->start_value = a->end_value;
 8012304:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            a->time = a->playback_time;
 8012306:	e9c4 210a 	strd	r2, r1, [r4, #40]	; 0x28
            a->start_value = a->end_value;
 801230a:	6223      	str	r3, [r4, #32]
            a->playback_time = tmp;
 801230c:	e7cc      	b.n	80122a8 <anim_timer+0xf0>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 801230e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012310:	425b      	negs	r3, r3
 8012312:	6323      	str	r3, [r4, #48]	; 0x30
        if(a->playback_time != 0) {
 8012314:	2900      	cmp	r1, #0
 8012316:	d0c7      	beq.n	80122a8 <anim_timer+0xf0>
 8012318:	e7dc      	b.n	80122d4 <anim_timer+0x11c>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801231a:	4621      	mov	r1, r4
 801231c:	4648      	mov	r0, r9
 801231e:	f012 fc0f 	bl	8024b40 <_lv_ll_get_next>
 8012322:	e7c8      	b.n	80122b6 <anim_timer+0xfe>
 8012324:	240011f4 	.word	0x240011f4
 8012328:	24010e37 	.word	0x24010e37
 801232c:	240013d4 	.word	0x240013d4
 8012330:	24010e38 	.word	0x24010e38

08012334 <_lv_anim_core_init>:
{
 8012334:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8012336:	2144      	movs	r1, #68	; 0x44
 8012338:	4807      	ldr	r0, [pc, #28]	; (8012358 <_lv_anim_core_init+0x24>)
 801233a:	f012 fb81 	bl	8024a40 <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 801233e:	2200      	movs	r2, #0
 8012340:	211e      	movs	r1, #30
 8012342:	4806      	ldr	r0, [pc, #24]	; (801235c <_lv_anim_core_init+0x28>)
 8012344:	f000 fb80 	bl	8012a48 <lv_timer_create>
 8012348:	4b05      	ldr	r3, [pc, #20]	; (8012360 <_lv_anim_core_init+0x2c>)
 801234a:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 801234c:	f7ff ff1a 	bl	8012184 <anim_mark_list_change>
    anim_list_changed = false;
 8012350:	4b04      	ldr	r3, [pc, #16]	; (8012364 <_lv_anim_core_init+0x30>)
 8012352:	2200      	movs	r2, #0
 8012354:	701a      	strb	r2, [r3, #0]
}
 8012356:	bd08      	pop	{r3, pc}
 8012358:	240013d4 	.word	0x240013d4
 801235c:	080121b9 	.word	0x080121b9
 8012360:	240011f0 	.word	0x240011f0
 8012364:	24010e38 	.word	0x24010e38

08012368 <lv_anim_init>:
{
 8012368:	b510      	push	{r4, lr}
 801236a:	2244      	movs	r2, #68	; 0x44
 801236c:	2100      	movs	r1, #0
 801236e:	4604      	mov	r4, r0
 8012370:	f008 fa0a 	bl	801a788 <memset>
    a->time = 500;
 8012374:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012378:	62e3      	str	r3, [r4, #44]	; 0x2c
    a->start_value = 0;
 801237a:	2300      	movs	r3, #0
 801237c:	6223      	str	r3, [r4, #32]
    a->end_value = 100;
 801237e:	2364      	movs	r3, #100	; 0x64
 8012380:	62a3      	str	r3, [r4, #40]	; 0x28
    a->repeat_cnt = 1;
 8012382:	2301      	movs	r3, #1
 8012384:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    a->path_cb = lv_anim_path_linear;
 8012388:	4b04      	ldr	r3, [pc, #16]	; (801239c <lv_anim_init+0x34>)
 801238a:	61e3      	str	r3, [r4, #28]
    a->early_apply = 1;
 801238c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8012390:	f043 0301 	orr.w	r3, r3, #1
 8012394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8012398:	bd10      	pop	{r4, pc}
 801239a:	bf00      	nop
 801239c:	0802416f 	.word	0x0802416f

080123a0 <lv_anim_del>:
{
 80123a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123a4:	4605      	mov	r5, r0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80123a6:	4815      	ldr	r0, [pc, #84]	; (80123fc <lv_anim_del+0x5c>)
{
 80123a8:	460e      	mov	r6, r1
    bool del = false;
 80123aa:	f04f 0800 	mov.w	r8, #0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80123ae:	f012 fbc1 	bl	8024b34 <_lv_ll_get_head>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80123b2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80123fc <lv_anim_del+0x5c>
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80123b6:	4604      	mov	r4, r0
    while(a != NULL) {
 80123b8:	b914      	cbnz	r4, 80123c0 <lv_anim_del+0x20>
}
 80123ba:	4640      	mov	r0, r8
 80123bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80123c0:	4621      	mov	r1, r4
 80123c2:	4648      	mov	r0, r9
 80123c4:	f012 fbbc 	bl	8024b40 <_lv_ll_get_next>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80123c8:	6823      	ldr	r3, [r4, #0]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80123ca:	4607      	mov	r7, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80123cc:	42ab      	cmp	r3, r5
 80123ce:	d000      	beq.n	80123d2 <lv_anim_del+0x32>
 80123d0:	b995      	cbnz	r5, 80123f8 <lv_anim_del+0x58>
 80123d2:	6863      	ldr	r3, [r4, #4]
 80123d4:	42b3      	cmp	r3, r6
 80123d6:	d000      	beq.n	80123da <lv_anim_del+0x3a>
 80123d8:	b976      	cbnz	r6, 80123f8 <lv_anim_del+0x58>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 80123da:	4621      	mov	r1, r4
 80123dc:	4648      	mov	r0, r9
 80123de:	f012 fb6e 	bl	8024abe <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 80123e2:	6923      	ldr	r3, [r4, #16]
 80123e4:	b10b      	cbz	r3, 80123ea <lv_anim_del+0x4a>
 80123e6:	4620      	mov	r0, r4
 80123e8:	4798      	blx	r3
            del = true;
 80123ea:	f04f 0801 	mov.w	r8, #1
            lv_mem_free(a);
 80123ee:	4620      	mov	r0, r4
 80123f0:	f000 f9b0 	bl	8012754 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 80123f4:	f7ff fec6 	bl	8012184 <anim_mark_list_change>
            del = true;
 80123f8:	463c      	mov	r4, r7
 80123fa:	e7dd      	b.n	80123b8 <lv_anim_del+0x18>
 80123fc:	240013d4 	.word	0x240013d4

08012400 <lv_anim_start>:
{
 8012400:	b538      	push	{r3, r4, r5, lr}
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 8012402:	6841      	ldr	r1, [r0, #4]
{
 8012404:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 8012406:	b111      	cbz	r1, 801240e <lv_anim_start+0xe>
 8012408:	6800      	ldr	r0, [r0, #0]
 801240a:	f7ff ffc9 	bl	80123a0 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 801240e:	481a      	ldr	r0, [pc, #104]	; (8012478 <lv_anim_start+0x78>)
 8012410:	f012 fba9 	bl	8024b66 <_lv_ll_is_empty>
 8012414:	b118      	cbz	r0, 801241e <lv_anim_start+0x1e>
        last_timer_run = lv_tick_get();
 8012416:	f011 fe98 	bl	802414a <lv_tick_get>
 801241a:	4b18      	ldr	r3, [pc, #96]	; (801247c <lv_anim_start+0x7c>)
 801241c:	6018      	str	r0, [r3, #0]
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 801241e:	4816      	ldr	r0, [pc, #88]	; (8012478 <lv_anim_start+0x78>)
 8012420:	f012 fb16 	bl	8024a50 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_anim);
 8012424:	4604      	mov	r4, r0
 8012426:	b900      	cbnz	r0, 801242a <lv_anim_start+0x2a>
 8012428:	e7fe      	b.n	8012428 <lv_anim_start+0x28>
    return memcpy(dst, src, len);
 801242a:	2244      	movs	r2, #68	; 0x44
 801242c:	4629      	mov	r1, r5
 801242e:	f008 f9a0 	bl	801a772 <memcpy>
    if(a->var == a) new_anim->var = new_anim;
 8012432:	682b      	ldr	r3, [r5, #0]
    new_anim->run_round = anim_run_round;
 8012434:	4a12      	ldr	r2, [pc, #72]	; (8012480 <lv_anim_start+0x80>)
    if(a->var == a) new_anim->var = new_anim;
 8012436:	42ab      	cmp	r3, r5
    new_anim->run_round = anim_run_round;
 8012438:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801243c:	7812      	ldrb	r2, [r2, #0]
    if(a->var == a) new_anim->var = new_anim;
 801243e:	bf08      	it	eq
 8012440:	6024      	streq	r4, [r4, #0]
    new_anim->run_round = anim_run_round;
 8012442:	f362 0382 	bfi	r3, r2, #2, #1
 8012446:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    if(new_anim->early_apply) {
 801244a:	07db      	lsls	r3, r3, #31
 801244c:	d50f      	bpl.n	801246e <lv_anim_start+0x6e>
        if(new_anim->get_value_cb) {
 801244e:	6963      	ldr	r3, [r4, #20]
 8012450:	b13b      	cbz	r3, 8012462 <lv_anim_start+0x62>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 8012452:	4620      	mov	r0, r4
 8012454:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 8012456:	6a23      	ldr	r3, [r4, #32]
 8012458:	4403      	add	r3, r0
 801245a:	6223      	str	r3, [r4, #32]
            new_anim->end_value += v_ofs;
 801245c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801245e:	4403      	add	r3, r0
 8012460:	62a3      	str	r3, [r4, #40]	; 0x28
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 8012462:	6863      	ldr	r3, [r4, #4]
 8012464:	b11b      	cbz	r3, 801246e <lv_anim_start+0x6e>
 8012466:	6820      	ldr	r0, [r4, #0]
 8012468:	b108      	cbz	r0, 801246e <lv_anim_start+0x6e>
 801246a:	6a21      	ldr	r1, [r4, #32]
 801246c:	4798      	blx	r3
    anim_mark_list_change();
 801246e:	f7ff fe89 	bl	8012184 <anim_mark_list_change>
}
 8012472:	4620      	mov	r0, r4
 8012474:	bd38      	pop	{r3, r4, r5, pc}
 8012476:	bf00      	nop
 8012478:	240013d4 	.word	0x240013d4
 801247c:	240011f4 	.word	0x240011f4
 8012480:	24010e37 	.word	0x24010e37

08012484 <lv_anim_get>:
{
 8012484:	b570      	push	{r4, r5, r6, lr}
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8012486:	4e0a      	ldr	r6, [pc, #40]	; (80124b0 <lv_anim_get+0x2c>)
{
 8012488:	4605      	mov	r5, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 801248a:	4809      	ldr	r0, [pc, #36]	; (80124b0 <lv_anim_get+0x2c>)
{
 801248c:	460c      	mov	r4, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 801248e:	f012 fb51 	bl	8024b34 <_lv_ll_get_head>
 8012492:	b900      	cbnz	r0, 8012496 <lv_anim_get+0x12>
}
 8012494:	bd70      	pop	{r4, r5, r6, pc}
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8012496:	6803      	ldr	r3, [r0, #0]
 8012498:	42ab      	cmp	r3, r5
 801249a:	d104      	bne.n	80124a6 <lv_anim_get+0x22>
 801249c:	6843      	ldr	r3, [r0, #4]
 801249e:	42a3      	cmp	r3, r4
 80124a0:	d0f8      	beq.n	8012494 <lv_anim_get+0x10>
 80124a2:	2c00      	cmp	r4, #0
 80124a4:	d0f6      	beq.n	8012494 <lv_anim_get+0x10>
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 80124a6:	4601      	mov	r1, r0
 80124a8:	4630      	mov	r0, r6
 80124aa:	f012 fb49 	bl	8024b40 <_lv_ll_get_next>
 80124ae:	e7f0      	b.n	8012492 <lv_anim_get+0xe>
 80124b0:	240013d4 	.word	0x240013d4

080124b4 <lv_point_transform>:
    to_align->y2 = to_align->y1 + h - 1;
}

#define _LV_TRANSFORM_TRIGO_SHIFT 10
void lv_point_transform(lv_point_t * p, int32_t angle, int32_t zoom, const lv_point_t * pivot)
{
 80124b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b8:	4604      	mov	r4, r0
 80124ba:	4617      	mov	r7, r2
 80124bc:	4698      	mov	r8, r3
    if(angle == 0 && zoom == 256) {
 80124be:	460d      	mov	r5, r1
 80124c0:	b911      	cbnz	r1, 80124c8 <lv_point_transform+0x14>
 80124c2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80124c6:	d018      	beq.n	80124fa <lv_point_transform+0x46>
        return;
    }

    p->x -= pivot->x;
 80124c8:	f8b8 3000 	ldrh.w	r3, [r8]
 80124cc:	8822      	ldrh	r2, [r4, #0]
 80124ce:	1ad2      	subs	r2, r2, r3
    p->y -= pivot->y;
 80124d0:	8863      	ldrh	r3, [r4, #2]
    p->x -= pivot->x;
 80124d2:	b212      	sxth	r2, r2
 80124d4:	8022      	strh	r2, [r4, #0]
    p->y -= pivot->y;
 80124d6:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80124da:	1a5b      	subs	r3, r3, r1
 80124dc:	b21b      	sxth	r3, r3
 80124de:	8063      	strh	r3, [r4, #2]

    if(angle == 0) {
 80124e0:	b975      	cbnz	r5, 8012500 <lv_point_transform+0x4c>
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 80124e2:	f8b8 1000 	ldrh.w	r1, [r8]
 80124e6:	437a      	muls	r2, r7
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 80124e8:	437b      	muls	r3, r7
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 80124ea:	eb01 2222 	add.w	r2, r1, r2, asr #8
 80124ee:	8022      	strh	r2, [r4, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 80124f0:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 80124f4:	eb02 2323 	add.w	r3, r2, r3, asr #8
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
    }
    else {
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 80124f8:	8063      	strh	r3, [r4, #2]
    }
}
 80124fa:	b003      	add	sp, #12
 80124fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(angle_prev != angle) {
 8012500:	4935      	ldr	r1, [pc, #212]	; (80125d8 <lv_point_transform+0x124>)
 8012502:	4a36      	ldr	r2, [pc, #216]	; (80125dc <lv_point_transform+0x128>)
 8012504:	680b      	ldr	r3, [r1, #0]
 8012506:	42ab      	cmp	r3, r5
 8012508:	d03a      	beq.n	8012580 <lv_point_transform+0xcc>
        if(angle_limited > 3600) angle_limited -= 3600;
 801250a:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
 801250e:	dd53      	ble.n	80125b8 <lv_point_transform+0x104>
 8012510:	f5a5 6961 	sub.w	r9, r5, #3600	; 0xe10
        int32_t angle_low = angle_limited / 10;
 8012514:	f04f 0b0a 	mov.w	fp, #10
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 8012518:	f06f 0309 	mvn.w	r3, #9
        int32_t angle_low = angle_limited / 10;
 801251c:	fb99 fafb 	sdiv	sl, r9, fp
        int32_t angle_high = angle_low + 1;
 8012520:	f10a 0601 	add.w	r6, sl, #1
        int32_t s1 = lv_trigo_sin(angle_low);
 8012524:	fa0f f08a 	sxth.w	r0, sl
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 8012528:	fb03 990a 	mla	r9, r3, sl, r9
        int32_t s1 = lv_trigo_sin(angle_low);
 801252c:	f000 f8ba 	bl	80126a4 <lv_trigo_sin>
 8012530:	9001      	str	r0, [sp, #4]
        int32_t s2 = lv_trigo_sin(angle_high);
 8012532:	b230      	sxth	r0, r6
 8012534:	f000 f8b6 	bl	80126a4 <lv_trigo_sin>
 8012538:	4606      	mov	r6, r0
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 801253a:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801253e:	fb09 f606 	mul.w	r6, r9, r6
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 8012542:	b200      	sxth	r0, r0
 8012544:	f000 f8ae 	bl	80126a4 <lv_trigo_sin>
 8012548:	9000      	str	r0, [sp, #0]
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 801254a:	f10a 005b 	add.w	r0, sl, #91	; 0x5b
 801254e:	b200      	sxth	r0, r0
 8012550:	f000 f8a8 	bl	80126a4 <lv_trigo_sin>
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8012554:	ebab 0c09 	sub.w	ip, fp, r9
 8012558:	9b01      	ldr	r3, [sp, #4]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801255a:	9900      	ldr	r1, [sp, #0]
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801255c:	fb0c 6603 	mla	r6, ip, r3, r6
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8012560:	4a1e      	ldr	r2, [pc, #120]	; (80125dc <lv_point_transform+0x128>)
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8012562:	fb09 f300 	mul.w	r3, r9, r0
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8012566:	481e      	ldr	r0, [pc, #120]	; (80125e0 <lv_point_transform+0x12c>)
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8012568:	fb0c 3301 	mla	r3, ip, r1, r3
        angle_prev = angle;
 801256c:	491a      	ldr	r1, [pc, #104]	; (80125d8 <lv_point_transform+0x124>)
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801256e:	fb96 f6fb 	sdiv	r6, r6, fp
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8012572:	fb93 f3fb 	sdiv	r3, r3, fp
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8012576:	1176      	asrs	r6, r6, #5
        angle_prev = angle;
 8012578:	600d      	str	r5, [r1, #0]
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801257a:	115b      	asrs	r3, r3, #5
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801257c:	6016      	str	r6, [r2, #0]
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801257e:	6003      	str	r3, [r0, #0]
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8012580:	4917      	ldr	r1, [pc, #92]	; (80125e0 <lv_point_transform+0x12c>)
    if(zoom == 256) {
 8012582:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    int32_t x = p->x;
 8012586:	f9b4 0000 	ldrsh.w	r0, [r4]
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801258a:	680e      	ldr	r6, [r1, #0]
 801258c:	6815      	ldr	r5, [r2, #0]
    int32_t y = p->y;
 801258e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8012592:	fb06 f100 	mul.w	r1, r6, r0
 8012596:	f8b8 2000 	ldrh.w	r2, [r8]
 801259a:	fb05 1113 	mls	r1, r5, r3, r1
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801259e:	fb06 f303 	mul.w	r3, r6, r3
 80125a2:	fb05 3300 	mla	r3, r5, r0, r3
    if(zoom == 256) {
 80125a6:	d10d      	bne.n	80125c4 <lv_point_transform+0x110>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80125a8:	eb02 22a1 	add.w	r2, r2, r1, asr #10
 80125ac:	8022      	strh	r2, [r4, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80125ae:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 80125b2:	eb02 23a3 	add.w	r3, r2, r3, asr #10
 80125b6:	e79f      	b.n	80124f8 <lv_point_transform+0x44>
        if(angle_limited < 0) angle_limited += 3600;
 80125b8:	2d00      	cmp	r5, #0
 80125ba:	bfb4      	ite	lt
 80125bc:	f505 6961 	addlt.w	r9, r5, #3600	; 0xe10
 80125c0:	46a9      	movge	r9, r5
 80125c2:	e7a7      	b.n	8012514 <lv_point_transform+0x60>
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 80125c4:	4379      	muls	r1, r7
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 80125c6:	435f      	muls	r7, r3
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 80125c8:	eb02 42a1 	add.w	r2, r2, r1, asr #18
 80125cc:	8022      	strh	r2, [r4, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 80125ce:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80125d2:	eb03 43a7 	add.w	r3, r3, r7, asr #18
 80125d6:	e78f      	b.n	80124f8 <lv_point_transform+0x44>
 80125d8:	240000e8 	.word	0x240000e8
 80125dc:	240011fc 	.word	0x240011fc
 80125e0:	240011f8 	.word	0x240011f8

080125e4 <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 80125e4:	2812      	cmp	r0, #18
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    return colors[p];
 80125e6:	bf96      	itet	ls
 80125e8:	4b02      	ldrls	r3, [pc, #8]	; (80125f4 <lv_palette_main+0x10>)
 80125ea:	2000      	movhi	r0, #0
 80125ec:	f833 0010 	ldrhls.w	r0, [r3, r0, lsl #1]

}
 80125f0:	4770      	bx	lr
 80125f2:	bf00      	nop
 80125f4:	08029e54 	.word	0x08029e54

080125f8 <lv_palette_lighten>:
        {LV_COLOR_MAKE(0x8D, 0x6E, 0x63), LV_COLOR_MAKE(0xA1, 0x88, 0x7F), LV_COLOR_MAKE(0xBC, 0xAA, 0xA4), LV_COLOR_MAKE(0xD7, 0xCC, 0xC8), LV_COLOR_MAKE(0xEF, 0xEB, 0xE9)},
        {LV_COLOR_MAKE(0x78, 0x90, 0x9C), LV_COLOR_MAKE(0x90, 0xA4, 0xAE), LV_COLOR_MAKE(0xB0, 0xBE, 0xC5), LV_COLOR_MAKE(0xCF, 0xD8, 0xDC), LV_COLOR_MAKE(0xEC, 0xEF, 0xF1)},
        {LV_COLOR_MAKE(0xBD, 0xBD, 0xBD), LV_COLOR_MAKE(0xE0, 0xE0, 0xE0), LV_COLOR_MAKE(0xEE, 0xEE, 0xEE), LV_COLOR_MAKE(0xF5, 0xF5, 0xF5), LV_COLOR_MAKE(0xFA, 0xFA, 0xFA)},
    };

    if(p >= _LV_PALETTE_LAST) {
 80125f8:	2812      	cmp	r0, #18
 80125fa:	d902      	bls.n	8012602 <lv_palette_lighten+0xa>
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
    return lv_color_make(0x00, 0x0, 0x00);
 80125fc:	f04f 0000 	mov.w	r0, #0
 8012600:	4770      	bx	lr
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 5) {
 8012602:	3901      	subs	r1, #1
 8012604:	b2c9      	uxtb	r1, r1
 8012606:	2904      	cmp	r1, #4
 8012608:	d8f8      	bhi.n	80125fc <lv_palette_lighten+0x4>
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 801260a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801260e:	4b02      	ldr	r3, [pc, #8]	; (8012618 <lv_palette_lighten+0x20>)
 8012610:	4408      	add	r0, r1
 8012612:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 8012616:	4770      	bx	lr
 8012618:	08029d96 	.word	0x08029d96

0801261c <lv_palette_darken>:
        {LV_COLOR_MAKE(0x6D, 0x4C, 0x41), LV_COLOR_MAKE(0x5D, 0x40, 0x37), LV_COLOR_MAKE(0x4E, 0x34, 0x2E), LV_COLOR_MAKE(0x3E, 0x27, 0x23)},
        {LV_COLOR_MAKE(0x54, 0x6E, 0x7A), LV_COLOR_MAKE(0x45, 0x5A, 0x64), LV_COLOR_MAKE(0x37, 0x47, 0x4F), LV_COLOR_MAKE(0x26, 0x32, 0x38)},
        {LV_COLOR_MAKE(0x75, 0x75, 0x75), LV_COLOR_MAKE(0x61, 0x61, 0x61), LV_COLOR_MAKE(0x42, 0x42, 0x42), LV_COLOR_MAKE(0x21, 0x21, 0x21)},
    };

    if(p >= _LV_PALETTE_LAST) {
 801261c:	2812      	cmp	r0, #18
 801261e:	d902      	bls.n	8012626 <lv_palette_darken+0xa>
 8012620:	f04f 0000 	mov.w	r0, #0
 8012624:	4770      	bx	lr
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 4) {
 8012626:	3901      	subs	r1, #1
 8012628:	b2c9      	uxtb	r1, r1
 801262a:	2903      	cmp	r1, #3
 801262c:	d8f8      	bhi.n	8012620 <lv_palette_darken+0x4>
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 801262e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8012632:	4b02      	ldr	r3, [pc, #8]	; (801263c <lv_palette_darken+0x20>)
 8012634:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 8012638:	4770      	bx	lr
 801263a:	bf00      	nop
 801263c:	08029cfe 	.word	0x08029cfe

08012640 <_lv_fs_init>:
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 8012640:	2104      	movs	r1, #4
 8012642:	4801      	ldr	r0, [pc, #4]	; (8012648 <_lv_fs_init+0x8>)
 8012644:	f012 b9fc 	b.w	8024a40 <_lv_ll_init>
 8012648:	240013e0 	.word	0x240013e0

0801264c <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 801264c:	b538      	push	{r3, r4, r5, lr}
 801264e:	4604      	mov	r4, r0
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8012650:	4808      	ldr	r0, [pc, #32]	; (8012674 <lv_fs_get_drv+0x28>)
 8012652:	f012 fa6f 	bl	8024b34 <_lv_ll_get_head>
 8012656:	4d07      	ldr	r5, [pc, #28]	; (8012674 <lv_fs_get_drv+0x28>)
 8012658:	4601      	mov	r1, r0
 801265a:	b909      	cbnz	r1, 8012660 <lv_fs_get_drv+0x14>
        if((*drv)->letter == letter) {
            return *drv;
        }
    }

    return NULL;
 801265c:	4608      	mov	r0, r1
}
 801265e:	bd38      	pop	{r3, r4, r5, pc}
        if((*drv)->letter == letter) {
 8012660:	6808      	ldr	r0, [r1, #0]
 8012662:	7803      	ldrb	r3, [r0, #0]
 8012664:	42a3      	cmp	r3, r4
 8012666:	d0fa      	beq.n	801265e <lv_fs_get_drv+0x12>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8012668:	4628      	mov	r0, r5
 801266a:	f012 fa69 	bl	8024b40 <_lv_ll_get_next>
 801266e:	4601      	mov	r1, r0
 8012670:	e7f3      	b.n	801265a <lv_fs_get_drv+0xe>
 8012672:	bf00      	nop
 8012674:	240013e0 	.word	0x240013e0

08012678 <lv_fs_get_ext>:

    return buf;
}

const char * lv_fs_get_ext(const char * fn)
{
 8012678:	b510      	push	{r4, lr}
 801267a:	4604      	mov	r4, r0
    size_t i;
    for(i = strlen(fn); i > 0; i--) {
 801267c:	f008 f866 	bl	801a74c <strlen>
 8012680:	b908      	cbnz	r0, 8012686 <lv_fs_get_ext+0xe>
        if(fn[i] == '.') {
            return &fn[i + 1];
        }
        else if(fn[i] == '/' || fn[i] == '\\') {
            return ""; /*No extension if a '\' or '/' found*/
 8012682:	4807      	ldr	r0, [pc, #28]	; (80126a0 <lv_fs_get_ext+0x28>)
 8012684:	e004      	b.n	8012690 <lv_fs_get_ext+0x18>
        if(fn[i] == '.') {
 8012686:	5c23      	ldrb	r3, [r4, r0]
 8012688:	2b2e      	cmp	r3, #46	; 0x2e
 801268a:	d102      	bne.n	8012692 <lv_fs_get_ext+0x1a>
            return &fn[i + 1];
 801268c:	3001      	adds	r0, #1
 801268e:	4420      	add	r0, r4
        }
    }

    return ""; /*Empty string if no '.' in the file name.*/
}
 8012690:	bd10      	pop	{r4, pc}
        else if(fn[i] == '/' || fn[i] == '\\') {
 8012692:	2b2f      	cmp	r3, #47	; 0x2f
 8012694:	d0f5      	beq.n	8012682 <lv_fs_get_ext+0xa>
 8012696:	2b5c      	cmp	r3, #92	; 0x5c
 8012698:	d0f3      	beq.n	8012682 <lv_fs_get_ext+0xa>
    for(i = strlen(fn); i > 0; i--) {
 801269a:	3801      	subs	r0, #1
 801269c:	e7f0      	b.n	8012680 <lv_fs_get_ext+0x8>
 801269e:	bf00      	nop
 80126a0:	08029fb2 	.word	0x08029fb2

080126a4 <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 80126a4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80126a8:	fb90 f2f3 	sdiv	r2, r0, r3
 80126ac:	fb02 0013 	mls	r0, r2, r3, r0
 80126b0:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 80126b2:	2800      	cmp	r0, #0
 80126b4:	bfb8      	it	lt
 80126b6:	18c0      	addlt	r0, r0, r3
 80126b8:	4b0f      	ldr	r3, [pc, #60]	; (80126f8 <lv_trigo_sin+0x54>)
 80126ba:	bfb8      	it	lt
 80126bc:	b200      	sxthlt	r0, r0

    if(angle < 90) {
 80126be:	2859      	cmp	r0, #89	; 0x59
 80126c0:	dc02      	bgt.n	80126c8 <lv_trigo_sin+0x24>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
 80126c2:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 80126c6:	4770      	bx	lr
    else if(angle >= 90 && angle < 180) {
 80126c8:	b280      	uxth	r0, r0
 80126ca:	f1a0 025a 	sub.w	r2, r0, #90	; 0x5a
 80126ce:	2a59      	cmp	r2, #89	; 0x59
 80126d0:	d803      	bhi.n	80126da <lv_trigo_sin+0x36>
        angle = 180 - angle;
 80126d2:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
 80126d6:	b280      	uxth	r0, r0
 80126d8:	e7f3      	b.n	80126c2 <lv_trigo_sin+0x1e>
    }
    else if(angle >= 180 && angle < 270) {
 80126da:	f1a0 02b4 	sub.w	r2, r0, #180	; 0xb4
 80126de:	b292      	uxth	r2, r2
 80126e0:	2a59      	cmp	r2, #89	; 0x59
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 80126e2:	bf89      	itett	hi
 80126e4:	f5c0 70b4 	rsbhi	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
 80126e8:	f833 0012 	ldrhls.w	r0, [r3, r2, lsl #1]
        ret   = -sin0_90_table[angle];
 80126ec:	b280      	uxthhi	r0, r0
 80126ee:	f833 0010 	ldrhhi.w	r0, [r3, r0, lsl #1]
 80126f2:	4240      	negs	r0, r0
 80126f4:	b200      	sxth	r0, r0
    }

    return ret;
}
 80126f6:	4770      	bx	lr
 80126f8:	08029e7a 	.word	0x08029e7a

080126fc <lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 80126fc:	b508      	push	{r3, lr}
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 80126fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012702:	4803      	ldr	r0, [pc, #12]	; (8012710 <lv_mem_init+0x14>)
 8012704:	f012 feb9 	bl	802547a <lv_tlsf_create_with_pool>
 8012708:	4b02      	ldr	r3, [pc, #8]	; (8012714 <lv_mem_init+0x18>)
 801270a:	6018      	str	r0, [r3, #0]
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 801270c:	bd08      	pop	{r3, pc}
 801270e:	bf00      	nop
 8012710:	24001410 	.word	0x24001410
 8012714:	24009418 	.word	0x24009418

08012718 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 8012718:	b510      	push	{r4, lr}
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 801271a:	4604      	mov	r4, r0
 801271c:	b180      	cbz	r0, 8012740 <lv_mem_alloc+0x28>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
    }

#if LV_MEM_CUSTOM == 0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 801271e:	4b09      	ldr	r3, [pc, #36]	; (8012744 <lv_mem_alloc+0x2c>)
 8012720:	4601      	mov	r1, r0
 8012722:	6818      	ldr	r0, [r3, #0]
 8012724:	f012 feb7 	bl	8025496 <lv_tlsf_malloc>
    else {
        lv_memset(alloc, 0xaa, size);
    }
#endif

    if(alloc) {
 8012728:	b148      	cbz	r0, 801273e <lv_mem_alloc+0x26>
#if LV_MEM_CUSTOM == 0
        cur_used += size;
 801272a:	4b07      	ldr	r3, [pc, #28]	; (8012748 <lv_mem_alloc+0x30>)
 801272c:	681a      	ldr	r2, [r3, #0]
 801272e:	4414      	add	r4, r2
 8012730:	601c      	str	r4, [r3, #0]
        max_used = LV_MAX(cur_used, max_used);
 8012732:	4b06      	ldr	r3, [pc, #24]	; (801274c <lv_mem_alloc+0x34>)
 8012734:	681a      	ldr	r2, [r3, #0]
 8012736:	42a2      	cmp	r2, r4
 8012738:	bf2c      	ite	cs
 801273a:	601a      	strcs	r2, [r3, #0]
 801273c:	601c      	strcc	r4, [r3, #0]
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
}
 801273e:	bd10      	pop	{r4, pc}
        return &zero_mem;
 8012740:	4803      	ldr	r0, [pc, #12]	; (8012750 <lv_mem_alloc+0x38>)
 8012742:	e7fc      	b.n	801273e <lv_mem_alloc+0x26>
 8012744:	24009418 	.word	0x24009418
 8012748:	24009414 	.word	0x24009414
 801274c:	24009410 	.word	0x24009410
 8012750:	240000ec 	.word	0x240000ec

08012754 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
 8012754:	b508      	push	{r3, lr}
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 8012756:	4b08      	ldr	r3, [pc, #32]	; (8012778 <lv_mem_free+0x24>)
{
 8012758:	4601      	mov	r1, r0
    if(data == &zero_mem) return;
 801275a:	4298      	cmp	r0, r3
 801275c:	d00b      	beq.n	8012776 <lv_mem_free+0x22>
    if(data == NULL) return;
 801275e:	b150      	cbz	r0, 8012776 <lv_mem_free+0x22>

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 8012760:	4b06      	ldr	r3, [pc, #24]	; (801277c <lv_mem_free+0x28>)
 8012762:	6818      	ldr	r0, [r3, #0]
 8012764:	f012 fea9 	bl	80254ba <lv_tlsf_free>
    if(cur_used > size) cur_used -= size;
 8012768:	4a05      	ldr	r2, [pc, #20]	; (8012780 <lv_mem_free+0x2c>)
 801276a:	6813      	ldr	r3, [r2, #0]
 801276c:	4298      	cmp	r0, r3
 801276e:	bf34      	ite	cc
 8012770:	1a1b      	subcc	r3, r3, r0
    else cur_used = 0;
 8012772:	2300      	movcs	r3, #0
 8012774:	6013      	str	r3, [r2, #0]
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 8012776:	bd08      	pop	{r3, pc}
 8012778:	240000ec 	.word	0x240000ec
 801277c:	24009418 	.word	0x24009418
 8012780:	24009414 	.word	0x24009414

08012784 <lv_mem_realloc>:
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 8012784:	460a      	mov	r2, r1
{
 8012786:	b508      	push	{r3, lr}
    if(new_size == 0) {
 8012788:	b171      	cbz	r1, 80127a8 <lv_mem_realloc+0x24>
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
        return &zero_mem;
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 801278a:	4909      	ldr	r1, [pc, #36]	; (80127b0 <lv_mem_realloc+0x2c>)
 801278c:	4288      	cmp	r0, r1
 801278e:	d104      	bne.n	801279a <lv_mem_realloc+0x16>
 8012790:	4610      	mov	r0, r2
        return NULL;
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
}
 8012792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8012796:	f7ff bfbf 	b.w	8012718 <lv_mem_alloc>
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 801279a:	4b06      	ldr	r3, [pc, #24]	; (80127b4 <lv_mem_realloc+0x30>)
 801279c:	4601      	mov	r1, r0
 801279e:	6818      	ldr	r0, [r3, #0]
}
 80127a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 80127a4:	f012 beca 	b.w	802553c <lv_tlsf_realloc>
        lv_mem_free(data_p);
 80127a8:	f7ff ffd4 	bl	8012754 <lv_mem_free>
}
 80127ac:	4800      	ldr	r0, [pc, #0]	; (80127b0 <lv_mem_realloc+0x2c>)
 80127ae:	bd08      	pop	{r3, pc}
 80127b0:	240000ec 	.word	0x240000ec
 80127b4:	24009418 	.word	0x24009418

080127b8 <lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
 80127b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
 80127ba:	4605      	mov	r5, r0
 80127bc:	b198      	cbz	r0, 80127e6 <lv_mem_buf_get+0x2e>
    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 80127be:	4c22      	ldr	r4, [pc, #136]	; (8012848 <lv_mem_buf_get+0x90>)
 80127c0:	2300      	movs	r3, #0
    int8_t i_guess = -1;
 80127c2:	f04f 32ff 	mov.w	r2, #4294967295
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 80127c6:	1d27      	adds	r7, r4, #4
 80127c8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 80127cc:	79b1      	ldrb	r1, [r6, #6]
 80127ce:	07c8      	lsls	r0, r1, #31
 80127d0:	d413      	bmi.n	80127fa <lv_mem_buf_get+0x42>
 80127d2:	f837 0033 	ldrh.w	r0, [r7, r3, lsl #3]
 80127d6:	42a8      	cmp	r0, r5
 80127d8:	d30f      	bcc.n	80127fa <lv_mem_buf_get+0x42>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 80127da:	d105      	bne.n	80127e8 <lv_mem_buf_get+0x30>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 80127dc:	f041 0101 	orr.w	r1, r1, #1
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 80127e0:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 80127e4:	71b1      	strb	r1, [r6, #6]
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
    return NULL;
}
 80127e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if(i_guess < 0) {
 80127e8:	1c56      	adds	r6, r2, #1
 80127ea:	d101      	bne.n	80127f0 <lv_mem_buf_get+0x38>
                i_guess = i;
 80127ec:	b25a      	sxtb	r2, r3
 80127ee:	e004      	b.n	80127fa <lv_mem_buf_get+0x42>
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 80127f0:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 80127f4:	8889      	ldrh	r1, [r1, #4]
 80127f6:	4281      	cmp	r1, r0
 80127f8:	d8f8      	bhi.n	80127ec <lv_mem_buf_get+0x34>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80127fa:	3301      	adds	r3, #1
 80127fc:	2b10      	cmp	r3, #16
 80127fe:	d1e3      	bne.n	80127c8 <lv_mem_buf_get+0x10>
    if(i_guess >= 0) {
 8012800:	1c51      	adds	r1, r2, #1
 8012802:	d008      	beq.n	8012816 <lv_mem_buf_get+0x5e>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8012804:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 8012808:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 801280c:	798b      	ldrb	r3, [r1, #6]
 801280e:	f043 0301 	orr.w	r3, r3, #1
 8012812:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 8012814:	e7e7      	b.n	80127e6 <lv_mem_buf_get+0x2e>
 8012816:	2600      	movs	r6, #0
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8012818:	eb04 07c6 	add.w	r7, r4, r6, lsl #3
 801281c:	79bb      	ldrb	r3, [r7, #6]
 801281e:	07db      	lsls	r3, r3, #31
 8012820:	d40e      	bmi.n	8012840 <lv_mem_buf_get+0x88>
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 8012822:	4629      	mov	r1, r5
 8012824:	f854 0036 	ldr.w	r0, [r4, r6, lsl #3]
 8012828:	f7ff ffac 	bl	8012784 <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 801282c:	b900      	cbnz	r0, 8012830 <lv_mem_buf_get+0x78>
 801282e:	e7fe      	b.n	801282e <lv_mem_buf_get+0x76>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8012830:	79bb      	ldrb	r3, [r7, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 8012832:	80bd      	strh	r5, [r7, #4]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8012834:	f043 0301 	orr.w	r3, r3, #1
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 8012838:	f844 0036 	str.w	r0, [r4, r6, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 801283c:	71bb      	strb	r3, [r7, #6]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 801283e:	e7d2      	b.n	80127e6 <lv_mem_buf_get+0x2e>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8012840:	3601      	adds	r6, #1
 8012842:	2e10      	cmp	r6, #16
 8012844:	d1e8      	bne.n	8012818 <lv_mem_buf_get+0x60>
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 8012846:	e7fe      	b.n	8012846 <lv_mem_buf_get+0x8e>
 8012848:	240012fc 	.word	0x240012fc

0801284c <lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void lv_mem_buf_release(void * p)
{
 801284c:	2300      	movs	r3, #0
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 801284e:	4a08      	ldr	r2, [pc, #32]	; (8012870 <lv_mem_buf_release+0x24>)
{
 8012850:	b510      	push	{r4, lr}
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8012852:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8012856:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801285a:	4284      	cmp	r4, r0
 801285c:	d104      	bne.n	8012868 <lv_mem_buf_release+0x1c>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 801285e:	798b      	ldrb	r3, [r1, #6]
 8012860:	f36f 0300 	bfc	r3, #0, #1
 8012864:	718b      	strb	r3, [r1, #6]
            return;
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 8012866:	bd10      	pop	{r4, pc}
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8012868:	3301      	adds	r3, #1
 801286a:	2b10      	cmp	r3, #16
 801286c:	d1f1      	bne.n	8012852 <lv_mem_buf_release+0x6>
 801286e:	e7fa      	b.n	8012866 <lv_mem_buf_release+0x1a>
 8012870:	240012fc 	.word	0x240012fc

08012874 <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 8012874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012876:	4c0a      	ldr	r4, [pc, #40]	; (80128a0 <lv_mem_buf_free_all+0x2c>)
 8012878:	2500      	movs	r5, #0
 801287a:	4627      	mov	r7, r4
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 801287c:	462e      	mov	r6, r5
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 801287e:	6820      	ldr	r0, [r4, #0]
 8012880:	b148      	cbz	r0, 8012896 <lv_mem_buf_free_all+0x22>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 8012882:	f7ff ff67 	bl	8012754 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 8012886:	6026      	str	r6, [r4, #0]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8012888:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 801288c:	799a      	ldrb	r2, [r3, #6]
 801288e:	f366 0200 	bfi	r2, r6, #0, #1
 8012892:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 8012894:	80a6      	strh	r6, [r4, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8012896:	3501      	adds	r5, #1
 8012898:	3408      	adds	r4, #8
 801289a:	2d10      	cmp	r5, #16
 801289c:	d1ef      	bne.n	801287e <lv_mem_buf_free_all+0xa>
        }
    }
}
 801289e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128a0:	240012fc 	.word	0x240012fc

080128a4 <lv_style_register_prop>:
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
#endif
}

lv_style_prop_t lv_style_register_prop(uint8_t flag)
{
 80128a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) == NULL) {
 80128a8:	4f18      	ldr	r7, [pc, #96]	; (801290c <lv_style_register_prop+0x68>)
{
 80128aa:	4606      	mov	r6, r0
 80128ac:	4d18      	ldr	r5, [pc, #96]	; (8012910 <lv_style_register_prop+0x6c>)
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) == NULL) {
 80128ae:	6838      	ldr	r0, [r7, #0]
 80128b0:	b918      	cbnz	r0, 80128ba <lv_style_register_prop+0x16>
        _lv_style_custom_prop_flag_lookup_table_size = 0;
 80128b2:	4b18      	ldr	r3, [pc, #96]	; (8012914 <lv_style_register_prop+0x70>)
 80128b4:	6018      	str	r0, [r3, #0]
        last_custom_prop_id = (uint16_t)_LV_STYLE_LAST_BUILT_IN_PROP;
 80128b6:	236f      	movs	r3, #111	; 0x6f
 80128b8:	802b      	strh	r3, [r5, #0]
    }

    if(((last_custom_prop_id + 1) & LV_STYLE_PROP_META_MASK) != 0) {
 80128ba:	8829      	ldrh	r1, [r5, #0]
 80128bc:	1c4b      	adds	r3, r1, #1
 80128be:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80128c2:	d002      	beq.n	80128ca <lv_style_register_prop+0x26>
        LV_LOG_ERROR("No more custom property IDs available");
        return LV_STYLE_PROP_INV;
 80128c4:	2000      	movs	r0, #0
    last_custom_prop_id++;
    /* This should never happen - we should bail out above */
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
    LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[last_custom_prop_id - _LV_STYLE_NUM_BUILT_IN_PROPS] = flag;
    return last_custom_prop_id;
}
 80128c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_style_custom_prop_flag_lookup_table_size < required_size) {
 80128ca:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8012914 <lv_style_register_prop+0x70>
    size_t required_size = (last_custom_prop_id + 1 - _LV_STYLE_LAST_BUILT_IN_PROP);
 80128ce:	f1a1 036e 	sub.w	r3, r1, #110	; 0x6e
    if(_lv_style_custom_prop_flag_lookup_table_size < required_size) {
 80128d2:	f8d8 2000 	ldr.w	r2, [r8]
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d20c      	bcs.n	80128f4 <lv_style_register_prop+0x50>
        required_size = (required_size + 31) & ~31;
 80128da:	394f      	subs	r1, #79	; 0x4f
        LV_ASSERT_MSG(required_size > 0, "required size has become 0?");
 80128dc:	f031 041f 	bics.w	r4, r1, #31
 80128e0:	d100      	bne.n	80128e4 <lv_style_register_prop+0x40>
 80128e2:	e7fe      	b.n	80128e2 <lv_style_register_prop+0x3e>
        uint8_t * new_p = lv_mem_realloc(old_p, required_size * sizeof(uint8_t));
 80128e4:	4621      	mov	r1, r4
 80128e6:	f7ff ff4d 	bl	8012784 <lv_mem_realloc>
        if(new_p == NULL) {
 80128ea:	2800      	cmp	r0, #0
 80128ec:	d0ea      	beq.n	80128c4 <lv_style_register_prop+0x20>
        LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) = new_p;
 80128ee:	6038      	str	r0, [r7, #0]
        _lv_style_custom_prop_flag_lookup_table_size = required_size;
 80128f0:	f8c8 4000 	str.w	r4, [r8]
    last_custom_prop_id++;
 80128f4:	882b      	ldrh	r3, [r5, #0]
 80128f6:	3301      	adds	r3, #1
 80128f8:	b298      	uxth	r0, r3
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 80128fa:	683b      	ldr	r3, [r7, #0]
    last_custom_prop_id++;
 80128fc:	8028      	strh	r0, [r5, #0]
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 80128fe:	b903      	cbnz	r3, 8012902 <lv_style_register_prop+0x5e>
 8012900:	e7fe      	b.n	8012900 <lv_style_register_prop+0x5c>
    LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[last_custom_prop_id - _LV_STYLE_NUM_BUILT_IN_PROPS] = flag;
 8012902:	4403      	add	r3, r0
 8012904:	f803 6c70 	strb.w	r6, [r3, #-112]
    return last_custom_prop_id;
 8012908:	e7dd      	b.n	80128c6 <lv_style_register_prop+0x22>
 801290a:	bf00      	nop
 801290c:	24001200 	.word	0x24001200
 8012910:	24000152 	.word	0x24000152
 8012914:	2400941c 	.word	0x2400941c

08012918 <lv_style_transition_dsc_init>:
    return lv_style_get_prop_inlined(style, prop, value);
}

void lv_style_transition_dsc_init(lv_style_transition_dsc_t * tr, const lv_style_prop_t props[],
                                  lv_anim_path_cb_t path_cb, uint32_t time, uint32_t delay, void * user_data)
{
 8012918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801291a:	460f      	mov	r7, r1
 801291c:	4615      	mov	r5, r2
    memset(dst, 0x00, len);
 801291e:	2100      	movs	r1, #0
 8012920:	2214      	movs	r2, #20
 8012922:	4604      	mov	r4, r0
 8012924:	461e      	mov	r6, r3
 8012926:	f007 ff2f 	bl	801a788 <memset>
    lv_memset_00(tr, sizeof(lv_style_transition_dsc_t));
    tr->props = props;
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 801292a:	4b06      	ldr	r3, [pc, #24]	; (8012944 <lv_style_transition_dsc_init+0x2c>)
    tr->props = props;
 801292c:	6027      	str	r7, [r4, #0]
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 801292e:	2d00      	cmp	r5, #0
 8012930:	bf08      	it	eq
 8012932:	461d      	moveq	r5, r3
    tr->time = time;
    tr->delay = delay;
 8012934:	9b06      	ldr	r3, [sp, #24]
 8012936:	6123      	str	r3, [r4, #16]
#if LV_USE_USER_DATA
    tr->user_data = user_data;
 8012938:	9b07      	ldr	r3, [sp, #28]
    tr->time = time;
 801293a:	e9c4 5602 	strd	r5, r6, [r4, #8]
    tr->user_data = user_data;
 801293e:	6063      	str	r3, [r4, #4]
#else
    LV_UNUSED(user_data);
#endif
}
 8012940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012942:	bf00      	nop
 8012944:	0802416f 	.word	0x0802416f

08012948 <lv_style_prop_get_default>:

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
    lv_style_value_t value;
    switch(prop) {
 8012948:	2836      	cmp	r0, #54	; 0x36
 801294a:	d819      	bhi.n	8012980 <lv_style_prop_get_default+0x38>
 801294c:	2821      	cmp	r0, #33	; 0x21
 801294e:	d807      	bhi.n	8012960 <lv_style_prop_get_default+0x18>
 8012950:	2806      	cmp	r0, #6
 8012952:	d03a      	beq.n	80129ca <lv_style_prop_get_default+0x82>
 8012954:	2820      	cmp	r0, #32
 8012956:	d02c      	beq.n	80129b2 <lv_style_prop_get_default+0x6a>
 8012958:	2803      	cmp	r0, #3
 801295a:	d036      	beq.n	80129ca <lv_style_prop_get_default+0x82>
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
            break;
        default:
            value.ptr = NULL;
 801295c:	2000      	movs	r0, #0
            value.num = 0;
            break;
    }

    return value;
}
 801295e:	4770      	bx	lr
    switch(prop) {
 8012960:	f1a0 0222 	sub.w	r2, r0, #34	; 0x22
 8012964:	2301      	movs	r3, #1
 8012966:	b292      	uxth	r2, r2
 8012968:	4093      	lsls	r3, r2
 801296a:	4a19      	ldr	r2, [pc, #100]	; (80129d0 <lv_style_prop_get_default+0x88>)
 801296c:	4213      	tst	r3, r2
 801296e:	d126      	bne.n	80129be <lv_style_prop_get_default+0x76>
 8012970:	f248 0288 	movw	r2, #32904	; 0x8088
 8012974:	4213      	tst	r3, r2
 8012976:	d113      	bne.n	80129a0 <lv_style_prop_get_default+0x58>
 8012978:	2833      	cmp	r0, #51	; 0x33
 801297a:	d1ef      	bne.n	801295c <lv_style_prop_get_default+0x14>
            value.num = LV_BORDER_SIDE_FULL;
 801297c:	200f      	movs	r0, #15
            break;
 801297e:	4770      	bx	lr
    switch(prop) {
 8012980:	2857      	cmp	r0, #87	; 0x57
 8012982:	d020      	beq.n	80129c6 <lv_style_prop_get_default+0x7e>
 8012984:	d80e      	bhi.n	80129a4 <lv_style_prop_get_default+0x5c>
 8012986:	2856      	cmp	r0, #86	; 0x56
 8012988:	d00a      	beq.n	80129a0 <lv_style_prop_get_default+0x58>
 801298a:	3837      	subs	r0, #55	; 0x37
 801298c:	2301      	movs	r3, #1
 801298e:	4a11      	ldr	r2, [pc, #68]	; (80129d4 <lv_style_prop_get_default+0x8c>)
 8012990:	b280      	uxth	r0, r0
 8012992:	4083      	lsls	r3, r0
 8012994:	401a      	ands	r2, r3
 8012996:	b992      	cbnz	r2, 80129be <lv_style_prop_get_default+0x76>
 8012998:	4a0f      	ldr	r2, [pc, #60]	; (80129d8 <lv_style_prop_get_default+0x90>)
 801299a:	401a      	ands	r2, r3
 801299c:	2a00      	cmp	r2, #0
 801299e:	d0dd      	beq.n	801295c <lv_style_prop_get_default+0x14>
            value.num = LV_OPA_COVER;
 80129a0:	20ff      	movs	r0, #255	; 0xff
            break;
 80129a2:	4770      	bx	lr
    switch(prop) {
 80129a4:	2860      	cmp	r0, #96	; 0x60
 80129a6:	d0fb      	beq.n	80129a0 <lv_style_prop_get_default+0x58>
 80129a8:	286c      	cmp	r0, #108	; 0x6c
 80129aa:	d1d7      	bne.n	801295c <lv_style_prop_get_default+0x14>
            value.num = LV_IMG_ZOOM_NONE;
 80129ac:	f44f 7080 	mov.w	r0, #256	; 0x100
            break;
 80129b0:	4770      	bx	lr
    return lv_color_make(0xff, 0xff, 0xff);
 80129b2:	f04f 33ff 	mov.w	r3, #4294967295
 80129b6:	2000      	movs	r0, #0
 80129b8:	f363 000f 	bfi	r0, r3, #0, #16
 80129bc:	4770      	bx	lr
    return lv_color_make(0x00, 0x0, 0x00);
 80129be:	2000      	movs	r0, #0
 80129c0:	f36f 000f 	bfc	r0, #0, #16
 80129c4:	4770      	bx	lr
            value.ptr = LV_FONT_DEFAULT;
 80129c6:	4805      	ldr	r0, [pc, #20]	; (80129dc <lv_style_prop_get_default+0x94>)
            break;
 80129c8:	4770      	bx	lr
            value.num = LV_COORD_MAX;
 80129ca:	f641 70ff 	movw	r0, #8191	; 0x1fff
            break;
 80129ce:	4770      	bx	lr
 80129d0:	00104001 	.word	0x00104001
 80129d4:	48412000 	.word	0x48412000
 80129d8:	1080c001 	.word	0x1080c001
 80129dc:	08029408 	.word	0x08029408

080129e0 <lv_style_set_prop>:
    lv_style_set_prop_internal(style, prop, value, lv_style_set_prop_helper);
 80129e0:	4b01      	ldr	r3, [pc, #4]	; (80129e8 <lv_style_set_prop+0x8>)
 80129e2:	f012 ba39 	b.w	8024e58 <lv_style_set_prop_internal>
 80129e6:	bf00      	nop
 80129e8:	08024cb7 	.word	0x08024cb7

080129ec <_lv_style_prop_lookup_flags>:

uint8_t _lv_style_prop_lookup_flags(lv_style_prop_t prop)
{
    extern const uint8_t _lv_style_builtin_prop_flag_lookup_table[];
    extern uint32_t _lv_style_custom_prop_flag_lookup_table_size;
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 80129ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80129f0:	4298      	cmp	r0, r3
 80129f2:	d011      	beq.n	8012a18 <_lv_style_prop_lookup_flags+0x2c>
    if(prop == LV_STYLE_PROP_INV) return 0;
 80129f4:	b198      	cbz	r0, 8012a1e <_lv_style_prop_lookup_flags+0x32>

    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 80129f6:	286f      	cmp	r0, #111	; 0x6f
 80129f8:	d802      	bhi.n	8012a00 <_lv_style_prop_lookup_flags+0x14>
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 80129fa:	4b09      	ldr	r3, [pc, #36]	; (8012a20 <_lv_style_prop_lookup_flags+0x34>)
 80129fc:	5c18      	ldrb	r0, [r3, r0]
 80129fe:	4770      	bx	lr
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8012a00:	4b08      	ldr	r3, [pc, #32]	; (8012a24 <_lv_style_prop_lookup_flags+0x38>)
 8012a02:	681a      	ldr	r2, [r3, #0]
 8012a04:	b152      	cbz	r2, 8012a1c <_lv_style_prop_lookup_flags+0x30>
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 8012a06:	f1a0 0370 	sub.w	r3, r0, #112	; 0x70
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8012a0a:	4907      	ldr	r1, [pc, #28]	; (8012a28 <_lv_style_prop_lookup_flags+0x3c>)
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	6809      	ldr	r1, [r1, #0]
 8012a10:	428b      	cmp	r3, r1
 8012a12:	d203      	bcs.n	8012a1c <_lv_style_prop_lookup_flags+0x30>
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 8012a14:	5cd0      	ldrb	r0, [r2, r3]
 8012a16:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 8012a18:	201f      	movs	r0, #31
 8012a1a:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_INV) return 0;
 8012a1c:	2000      	movs	r0, #0
    return 0;
}
 8012a1e:	4770      	bx	lr
 8012a20:	0802df33 	.word	0x0802df33
 8012a24:	24001200 	.word	0x24001200
 8012a28:	2400941c 	.word	0x2400941c

08012a2c <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 8012a2c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 8012a2e:	2118      	movs	r1, #24
 8012a30:	4803      	ldr	r0, [pc, #12]	; (8012a40 <_lv_timer_core_init+0x14>)
 8012a32:	f012 f805 	bl	8024a40 <_lv_ll_init>
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
    lv_timer_run = en;
 8012a36:	4b03      	ldr	r3, [pc, #12]	; (8012a44 <_lv_timer_core_init+0x18>)
 8012a38:	2201      	movs	r2, #1
 8012a3a:	701a      	strb	r2, [r3, #0]
}
 8012a3c:	bd08      	pop	{r3, pc}
 8012a3e:	bf00      	nop
 8012a40:	24001404 	.word	0x24001404
 8012a44:	24010e3d 	.word	0x24010e3d

08012a48 <lv_timer_create>:
{
 8012a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a4a:	4606      	mov	r6, r0
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8012a4c:	480c      	ldr	r0, [pc, #48]	; (8012a80 <lv_timer_create+0x38>)
{
 8012a4e:	460f      	mov	r7, r1
 8012a50:	4615      	mov	r5, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8012a52:	f011 fffd 	bl	8024a50 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_timer);
 8012a56:	4604      	mov	r4, r0
 8012a58:	b900      	cbnz	r0, 8012a5c <lv_timer_create+0x14>
 8012a5a:	e7fe      	b.n	8012a5a <lv_timer_create+0x12>
    new_timer->repeat_count = -1;
 8012a5c:	f04f 33ff 	mov.w	r3, #4294967295
    new_timer->period = period;
 8012a60:	6007      	str	r7, [r0, #0]
    new_timer->timer_cb = timer_xcb;
 8012a62:	6086      	str	r6, [r0, #8]
    new_timer->repeat_count = -1;
 8012a64:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 8012a66:	7d03      	ldrb	r3, [r0, #20]
 8012a68:	f36f 0300 	bfc	r3, #0, #1
 8012a6c:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 8012a6e:	f011 fb6c 	bl	802414a <lv_tick_get>
    timer_created = true;
 8012a72:	4b04      	ldr	r3, [pc, #16]	; (8012a84 <lv_timer_create+0x3c>)
 8012a74:	2201      	movs	r2, #1
    new_timer->last_run = lv_tick_get();
 8012a76:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
 8012a78:	60e5      	str	r5, [r4, #12]
}
 8012a7a:	4620      	mov	r0, r4
    timer_created = true;
 8012a7c:	701a      	strb	r2, [r3, #0]
}
 8012a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a80:	24001404 	.word	0x24001404
 8012a84:	24010e3a 	.word	0x24010e3a

08012a88 <lv_timer_del>:
{
 8012a88:	b510      	push	{r4, lr}
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8012a8a:	4601      	mov	r1, r0
{
 8012a8c:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8012a8e:	4805      	ldr	r0, [pc, #20]	; (8012aa4 <lv_timer_del+0x1c>)
 8012a90:	f012 f815 	bl	8024abe <_lv_ll_remove>
    timer_deleted = true;
 8012a94:	4b04      	ldr	r3, [pc, #16]	; (8012aa8 <lv_timer_del+0x20>)
 8012a96:	2201      	movs	r2, #1
    lv_mem_free(timer);
 8012a98:	4620      	mov	r0, r4
    timer_deleted = true;
 8012a9a:	701a      	strb	r2, [r3, #0]
}
 8012a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_mem_free(timer);
 8012aa0:	f7ff be58 	b.w	8012754 <lv_mem_free>
 8012aa4:	24001404 	.word	0x24001404
 8012aa8:	24010e3b 	.word	0x24010e3b

08012aac <lv_timer_handler>:
{
 8012aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) {
 8012ab0:	4e5c      	ldr	r6, [pc, #368]	; (8012c24 <lv_timer_handler+0x178>)
 8012ab2:	7833      	ldrb	r3, [r6, #0]
 8012ab4:	b92b      	cbnz	r3, 8012ac2 <lv_timer_handler+0x16>
    already_running = true;
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	7033      	strb	r3, [r6, #0]
    if(lv_timer_run == false) {
 8012aba:	4b5b      	ldr	r3, [pc, #364]	; (8012c28 <lv_timer_handler+0x17c>)
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	b92b      	cbnz	r3, 8012acc <lv_timer_handler+0x20>
        already_running = false; /*Release mutex*/
 8012ac0:	7033      	strb	r3, [r6, #0]
        return 1;
 8012ac2:	2501      	movs	r5, #1
}
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	b003      	add	sp, #12
 8012ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t handler_start = lv_tick_get();
 8012acc:	f011 fb3d 	bl	802414a <lv_tick_get>
    if(handler_start == 0) {
 8012ad0:	4607      	mov	r7, r0
 8012ad2:	b938      	cbnz	r0, 8012ae4 <lv_timer_handler+0x38>
        run_cnt++;
 8012ad4:	4a55      	ldr	r2, [pc, #340]	; (8012c2c <lv_timer_handler+0x180>)
 8012ad6:	6813      	ldr	r3, [r2, #0]
 8012ad8:	3301      	adds	r3, #1
 8012ada:	2b64      	cmp	r3, #100	; 0x64
 8012adc:	bf94      	ite	ls
 8012ade:	4619      	movls	r1, r3
 8012ae0:	4601      	movhi	r1, r0
 8012ae2:	6011      	str	r1, [r2, #0]
        timer_deleted             = false;
 8012ae4:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8012c30 <lv_timer_handler+0x184>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012ae8:	f8df a148 	ldr.w	sl, [pc, #328]	; 8012c34 <lv_timer_handler+0x188>
        timer_deleted             = false;
 8012aec:	2300      	movs	r3, #0
        timer_created             = false;
 8012aee:	f8df b148 	ldr.w	fp, [pc, #328]	; 8012c38 <lv_timer_handler+0x18c>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012af2:	4650      	mov	r0, sl
 8012af4:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8012c3c <lv_timer_handler+0x190>
        timer_deleted             = false;
 8012af8:	f888 3000 	strb.w	r3, [r8]
        timer_created             = false;
 8012afc:	f88b 3000 	strb.w	r3, [fp]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012b00:	f012 f818 	bl	8024b34 <_lv_ll_get_head>
 8012b04:	4605      	mov	r5, r0
 8012b06:	f8c9 5000 	str.w	r5, [r9]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8012b0a:	bb85      	cbnz	r5, 8012b6e <lv_timer_handler+0xc2>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012b0c:	4849      	ldr	r0, [pc, #292]	; (8012c34 <lv_timer_handler+0x188>)
    uint32_t time_till_next = LV_NO_TIMER_READY;
 8012b0e:	f04f 35ff 	mov.w	r5, #4294967295
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012b12:	f012 f80f 	bl	8024b34 <_lv_ll_get_head>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8012b16:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8012c34 <lv_timer_handler+0x188>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012b1a:	4604      	mov	r4, r0
    while(next) {
 8012b1c:	2c00      	cmp	r4, #0
 8012b1e:	d16c      	bne.n	8012bfa <lv_timer_handler+0x14e>
    busy_time += lv_tick_elaps(handler_start);
 8012b20:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8012c40 <lv_timer_handler+0x194>
 8012b24:	4638      	mov	r0, r7
 8012b26:	f011 fb18 	bl	802415a <lv_tick_elaps>
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8012b2a:	4f46      	ldr	r7, [pc, #280]	; (8012c44 <lv_timer_handler+0x198>)
    busy_time += lv_tick_elaps(handler_start);
 8012b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8012b30:	4403      	add	r3, r0
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8012b32:	6838      	ldr	r0, [r7, #0]
    busy_time += lv_tick_elaps(handler_start);
 8012b34:	f8c8 3000 	str.w	r3, [r8]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8012b38:	f011 fb0f 	bl	802415a <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8012b3c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8012b40:	d312      	bcc.n	8012b68 <lv_timer_handler+0xbc>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 8012b42:	2264      	movs	r2, #100	; 0x64
 8012b44:	f8d8 3000 	ldr.w	r3, [r8]
 8012b48:	4353      	muls	r3, r2
 8012b4a:	fbb3 f0f0 	udiv	r0, r3, r0
 8012b4e:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8012b50:	4b3d      	ldr	r3, [pc, #244]	; (8012c48 <lv_timer_handler+0x19c>)
 8012b52:	4290      	cmp	r0, r2
 8012b54:	bf9c      	itt	ls
 8012b56:	1a10      	subls	r0, r2, r0
 8012b58:	b2c4      	uxtbls	r4, r0
 8012b5a:	701c      	strb	r4, [r3, #0]
        busy_time         = 0;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	f8c8 3000 	str.w	r3, [r8]
        idle_period_start = lv_tick_get();
 8012b62:	f011 faf2 	bl	802414a <lv_tick_get>
 8012b66:	6038      	str	r0, [r7, #0]
    already_running = false; /*Release the mutex*/
 8012b68:	2300      	movs	r3, #0
 8012b6a:	7033      	strb	r3, [r6, #0]
    return time_till_next;
 8012b6c:	e7aa      	b.n	8012ac4 <lv_timer_handler+0x18>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8012b6e:	4629      	mov	r1, r5
 8012b70:	4650      	mov	r0, sl
 8012b72:	f011 ffe5 	bl	8024b40 <_lv_ll_get_next>
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 8012b76:	f8d9 4000 	ldr.w	r4, [r9]
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8012b7a:	4605      	mov	r5, r0
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
    if(timer->paused) return false;
 8012b7c:	7d23      	ldrb	r3, [r4, #20]
 8012b7e:	07db      	lsls	r3, r3, #31
 8012b80:	d4c1      	bmi.n	8012b06 <lv_timer_handler+0x5a>
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8012b82:	6860      	ldr	r0, [r4, #4]
 8012b84:	f011 fae9 	bl	802415a <lv_tick_elaps>
    if(lv_timer_time_remaining(timer) == 0) {
 8012b88:	6823      	ldr	r3, [r4, #0]
 8012b8a:	4298      	cmp	r0, r3
 8012b8c:	d32a      	bcc.n	8012be4 <lv_timer_handler+0x138>
        int32_t original_repeat_count = timer->repeat_count;
 8012b8e:	6923      	ldr	r3, [r4, #16]
        if(timer->repeat_count > 0) timer->repeat_count--;
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	dd1a      	ble.n	8012bca <lv_timer_handler+0x11e>
 8012b94:	3b01      	subs	r3, #1
 8012b96:	6123      	str	r3, [r4, #16]
        timer->last_run = lv_tick_get();
 8012b98:	f011 fad7 	bl	802414a <lv_tick_get>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8012b9c:	68a2      	ldr	r2, [r4, #8]
        timer->last_run = lv_tick_get();
 8012b9e:	6060      	str	r0, [r4, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8012ba0:	b9ea      	cbnz	r2, 8012bde <lv_timer_handler+0x132>
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8012ba2:	f898 3000 	ldrb.w	r3, [r8]
 8012ba6:	b923      	cbnz	r3, 8012bb2 <lv_timer_handler+0x106>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8012ba8:	6923      	ldr	r3, [r4, #16]
 8012baa:	b913      	cbnz	r3, 8012bb2 <lv_timer_handler+0x106>
            lv_timer_del(timer);
 8012bac:	4620      	mov	r0, r4
 8012bae:	f7ff ff6b 	bl	8012a88 <lv_timer_del>
                if(timer_created || timer_deleted) {
 8012bb2:	f89b 3000 	ldrb.w	r3, [fp]
 8012bb6:	b91b      	cbnz	r3, 8012bc0 <lv_timer_handler+0x114>
 8012bb8:	f898 3000 	ldrb.w	r3, [r8]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d0a2      	beq.n	8012b06 <lv_timer_handler+0x5a>
    } while(LV_GC_ROOT(_lv_timer_act));
 8012bc0:	f8d9 3000 	ldr.w	r3, [r9]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d191      	bne.n	8012aec <lv_timer_handler+0x40>
 8012bc8:	e7a0      	b.n	8012b0c <lv_timer_handler+0x60>
 8012bca:	9301      	str	r3, [sp, #4]
        timer->last_run = lv_tick_get();
 8012bcc:	f011 fabd 	bl	802414a <lv_tick_get>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8012bd0:	68a2      	ldr	r2, [r4, #8]
        timer->last_run = lv_tick_get();
 8012bd2:	6060      	str	r0, [r4, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8012bd4:	2a00      	cmp	r2, #0
 8012bd6:	d0e4      	beq.n	8012ba2 <lv_timer_handler+0xf6>
 8012bd8:	9b01      	ldr	r3, [sp, #4]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d0e1      	beq.n	8012ba2 <lv_timer_handler+0xf6>
 8012bde:	4620      	mov	r0, r4
 8012be0:	4790      	blx	r2
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8012be2:	e7de      	b.n	8012ba2 <lv_timer_handler+0xf6>
 8012be4:	f898 3000 	ldrb.w	r3, [r8]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d18c      	bne.n	8012b06 <lv_timer_handler+0x5a>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8012bec:	6923      	ldr	r3, [r4, #16]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d189      	bne.n	8012b06 <lv_timer_handler+0x5a>
            lv_timer_del(timer);
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	f7ff ff48 	bl	8012a88 <lv_timer_del>
 8012bf8:	e785      	b.n	8012b06 <lv_timer_handler+0x5a>
        if(!next->paused) {
 8012bfa:	7d23      	ldrb	r3, [r4, #20]
 8012bfc:	f013 0801 	ands.w	r8, r3, #1
 8012c00:	d10a      	bne.n	8012c18 <lv_timer_handler+0x16c>
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8012c02:	6860      	ldr	r0, [r4, #4]
 8012c04:	f011 faa9 	bl	802415a <lv_tick_elaps>
    if(elp >= timer->period)
 8012c08:	6823      	ldr	r3, [r4, #0]
 8012c0a:	4298      	cmp	r0, r3
        return 0;
 8012c0c:	bf2c      	ite	cs
 8012c0e:	4643      	movcs	r3, r8
    return timer->period - elp;
 8012c10:	1a1b      	subcc	r3, r3, r0
            if(delay < time_till_next)
 8012c12:	429d      	cmp	r5, r3
 8012c14:	bf28      	it	cs
 8012c16:	461d      	movcs	r5, r3
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8012c18:	4621      	mov	r1, r4
 8012c1a:	4648      	mov	r0, r9
 8012c1c:	f011 ff90 	bl	8024b40 <_lv_ll_get_next>
 8012c20:	4604      	mov	r4, r0
 8012c22:	e77b      	b.n	8012b1c <lv_timer_handler+0x70>
 8012c24:	24010e39 	.word	0x24010e39
 8012c28:	24010e3d 	.word	0x24010e3d
 8012c2c:	24009428 	.word	0x24009428
 8012c30:	24010e3b 	.word	0x24010e3b
 8012c34:	24001404 	.word	0x24001404
 8012c38:	24010e3a 	.word	0x24010e3a
 8012c3c:	2400137c 	.word	0x2400137c
 8012c40:	24009424 	.word	0x24009424
 8012c44:	24009420 	.word	0x24009420
 8012c48:	24010e3c 	.word	0x24010e3c

08012c4c <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 8012c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 8012c4e:	680b      	ldr	r3, [r1, #0]
{
 8012c50:	4606      	mov	r6, r0
 8012c52:	460c      	mov	r4, r1
    (*i)--;
 8012c54:	2504      	movs	r5, #4
 8012c56:	3b01      	subs	r3, #1
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
 8012c58:	4f0c      	ldr	r7, [pc, #48]	; (8012c8c <lv_txt_utf8_prev+0x40>)
    (*i)--;
 8012c5a:	600b      	str	r3, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
 8012c5c:	6820      	ldr	r0, [r4, #0]
 8012c5e:	683b      	ldr	r3, [r7, #0]
 8012c60:	4430      	add	r0, r6
 8012c62:	4798      	blx	r3
        if(c_size == 0) {
 8012c64:	6823      	ldr	r3, [r4, #0]
 8012c66:	b138      	cbz	r0, 8012c78 <lv_txt_utf8_prev+0x2c>
                return 0;
        }
        cnt++;
    } while(c_size == 0);

    uint32_t i_tmp  = *i;
 8012c68:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8012c6a:	a901      	add	r1, sp, #4
 8012c6c:	4b08      	ldr	r3, [pc, #32]	; (8012c90 <lv_txt_utf8_prev+0x44>)
 8012c6e:	4630      	mov	r0, r6
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	4798      	blx	r3

    return letter;
}
 8012c74:	b003      	add	sp, #12
 8012c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(*i != 0)
 8012c78:	b12b      	cbz	r3, 8012c86 <lv_txt_utf8_prev+0x3a>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8012c7a:	3d01      	subs	r5, #1
                (*i)--;
 8012c7c:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8012c7e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
                (*i)--;
 8012c82:	6023      	str	r3, [r4, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8012c84:	d1ea      	bne.n	8012c5c <lv_txt_utf8_prev+0x10>
 8012c86:	2000      	movs	r0, #0
 8012c88:	e7f4      	b.n	8012c74 <lv_txt_utf8_prev+0x28>
 8012c8a:	bf00      	nop
 8012c8c:	24000108 	.word	0x24000108
 8012c90:	24000100 	.word	0x24000100

08012c94 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8012c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 8012c98:	2400      	movs	r4, #0
{
 8012c9a:	4605      	mov	r5, r0
 8012c9c:	460f      	mov	r7, r1
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8012c9e:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8012cc8 <lv_txt_utf8_get_byte_id+0x34>
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8012ca2:	4626      	mov	r6, r4
 8012ca4:	42be      	cmp	r6, r7
 8012ca6:	d002      	beq.n	8012cae <lv_txt_utf8_get_byte_id+0x1a>
 8012ca8:	5d2b      	ldrb	r3, [r5, r4]
 8012caa:	1928      	adds	r0, r5, r4
 8012cac:	b913      	cbnz	r3, 8012cb4 <lv_txt_utf8_get_byte_id+0x20>
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
    }

    return byte_cnt;
}
 8012cae:	4620      	mov	r0, r4
 8012cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8012cb4:	f8d8 3000 	ldr.w	r3, [r8]
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8012cb8:	3601      	adds	r6, #1
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8012cba:	4798      	blx	r3
        byte_cnt += c_size ? c_size : 1;
 8012cbc:	2801      	cmp	r0, #1
 8012cbe:	bf38      	it	cc
 8012cc0:	2001      	movcc	r0, #1
 8012cc2:	fa54 f480 	uxtab	r4, r4, r0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8012cc6:	e7ed      	b.n	8012ca4 <lv_txt_utf8_get_byte_id+0x10>
 8012cc8:	24000108 	.word	0x24000108

08012ccc <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8012ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i        = 0;
 8012cce:	2400      	movs	r4, #0
{
 8012cd0:	4606      	mov	r6, r0
 8012cd2:	460d      	mov	r5, r1
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8012cd4:	4f06      	ldr	r7, [pc, #24]	; (8012cf0 <lv_txt_utf8_get_char_id+0x24>)
    uint32_t i        = 0;
 8012cd6:	9401      	str	r4, [sp, #4]
    while(i < byte_id) {
 8012cd8:	9b01      	ldr	r3, [sp, #4]
 8012cda:	42ab      	cmp	r3, r5
 8012cdc:	d302      	bcc.n	8012ce4 <lv_txt_utf8_get_char_id+0x18>
        char_cnt++;
    }

    return char_cnt;
}
 8012cde:	4620      	mov	r0, r4
 8012ce0:	b003      	add	sp, #12
 8012ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	a901      	add	r1, sp, #4
 8012ce8:	4630      	mov	r0, r6
        char_cnt++;
 8012cea:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8012cec:	4798      	blx	r3
        char_cnt++;
 8012cee:	e7f3      	b.n	8012cd8 <lv_txt_utf8_get_char_id+0xc>
 8012cf0:	24000100 	.word	0x24000100

08012cf4 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8012cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 8012cf6:	2400      	movs	r4, #0
{
 8012cf8:	4605      	mov	r5, r0

    while(txt[i] != '\0') {
        _lv_txt_encoded_next(txt, &i);
 8012cfa:	4e07      	ldr	r6, [pc, #28]	; (8012d18 <lv_txt_utf8_get_length+0x24>)
    uint32_t i   = 0;
 8012cfc:	9401      	str	r4, [sp, #4]
    while(txt[i] != '\0') {
 8012cfe:	9b01      	ldr	r3, [sp, #4]
 8012d00:	5ceb      	ldrb	r3, [r5, r3]
 8012d02:	b913      	cbnz	r3, 8012d0a <lv_txt_utf8_get_length+0x16>
        len++;
    }

    return len;
}
 8012d04:	4620      	mov	r0, r4
 8012d06:	b002      	add	sp, #8
 8012d08:	bd70      	pop	{r4, r5, r6, pc}
        _lv_txt_encoded_next(txt, &i);
 8012d0a:	6833      	ldr	r3, [r6, #0]
 8012d0c:	a901      	add	r1, sp, #4
 8012d0e:	4628      	mov	r0, r5
        len++;
 8012d10:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i);
 8012d12:	4798      	blx	r3
        len++;
 8012d14:	e7f3      	b.n	8012cfe <lv_txt_utf8_get_length+0xa>
 8012d16:	bf00      	nop
 8012d18:	24000100 	.word	0x24000100

08012d1c <_lv_txt_get_next_line>:
{
 8012d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d20:	b091      	sub	sp, #68	; 0x44
 8012d22:	4699      	mov	r9, r3
 8012d24:	4680      	mov	r8, r0
 8012d26:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8012d2a:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 8012d2e:	9101      	str	r1, [sp, #4]
 8012d30:	9206      	str	r2, [sp, #24]
 8012d32:	9305      	str	r3, [sp, #20]
    if(used_width) *used_width = 0;
 8012d34:	f1bb 0f00 	cmp.w	fp, #0
 8012d38:	d002      	beq.n	8012d40 <_lv_txt_get_next_line+0x24>
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	f8ab 3000 	strh.w	r3, [fp]
    if(txt == NULL) return 0;
 8012d40:	f1b8 0f00 	cmp.w	r8, #0
 8012d44:	f000 80f3 	beq.w	8012f2e <_lv_txt_get_next_line+0x212>
    if(txt[0] == '\0') return 0;
 8012d48:	f898 0000 	ldrb.w	r0, [r8]
 8012d4c:	b1d8      	cbz	r0, 8012d86 <_lv_txt_get_next_line+0x6a>
    if(font == NULL) return 0;
 8012d4e:	9b01      	ldr	r3, [sp, #4]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	f000 80ee 	beq.w	8012f32 <_lv_txt_get_next_line+0x216>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 8012d56:	9b05      	ldr	r3, [sp, #20]
 8012d58:	f013 0306 	ands.w	r3, r3, #6
 8012d5c:	d016      	beq.n	8012d8c <_lv_txt_get_next_line+0x70>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8012d5e:	2000      	movs	r0, #0
 8012d60:	e000      	b.n	8012d64 <_lv_txt_get_next_line+0x48>
 8012d62:	3001      	adds	r0, #1
 8012d64:	f818 3000 	ldrb.w	r3, [r8, r0]
 8012d68:	2b0a      	cmp	r3, #10
 8012d6a:	f000 80e4 	beq.w	8012f36 <_lv_txt_get_next_line+0x21a>
 8012d6e:	2b0d      	cmp	r3, #13
 8012d70:	f000 80e1 	beq.w	8012f36 <_lv_txt_get_next_line+0x21a>
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d1f4      	bne.n	8012d62 <_lv_txt_get_next_line+0x46>
        if(used_width) *used_width = -1;
 8012d78:	f1bb 0f00 	cmp.w	fp, #0
 8012d7c:	d003      	beq.n	8012d86 <_lv_txt_get_next_line+0x6a>
 8012d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d82:	f8ab 3000 	strh.w	r3, [fp]
}
 8012d86:	b011      	add	sp, #68	; 0x44
 8012d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8012d8c:	9a05      	ldr	r2, [sp, #20]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8012d8e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8012d92:	f012 0202 	ands.w	r2, r2, #2
    uint32_t i = 0;                                        /*Iterating index into txt*/
 8012d96:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t line_w = 0;
 8012d98:	9300      	str	r3, [sp, #0]
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8012d9a:	9207      	str	r2, [sp, #28]
 8012d9c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8012da0:	bf18      	it	ne
 8012da2:	4691      	movne	r9, r2
    while(txt[i] != '\0' && max_width > 0) {
 8012da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012da6:	9302      	str	r3, [sp, #8]
 8012da8:	4443      	add	r3, r8
 8012daa:	9303      	str	r3, [sp, #12]
 8012dac:	9b02      	ldr	r3, [sp, #8]
 8012dae:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012db2:	b33b      	cbz	r3, 8012e04 <_lv_txt_get_next_line+0xe8>
 8012db4:	f1b9 0f00 	cmp.w	r9, #0
 8012db8:	dd24      	ble.n	8012e04 <_lv_txt_get_next_line+0xe8>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8012dba:	9a07      	ldr	r2, [sp, #28]
 8012dbc:	f641 73ff 	movw	r3, #8191	; 0x1fff
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8012dc0:	2500      	movs	r5, #0
    letter = _lv_txt_encoded_next(txt, &i_next);
 8012dc2:	a90e      	add	r1, sp, #56	; 0x38
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8012dc4:	2a00      	cmp	r2, #0
 8012dc6:	bf08      	it	eq
 8012dc8:	464b      	moveq	r3, r9
    letter = _lv_txt_encoded_next(txt, &i_next);
 8012dca:	9803      	ldr	r0, [sp, #12]
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 8012dcc:	f04f 34ff 	mov.w	r4, #4294967295
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 8012dd0:	462f      	mov	r7, r5
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8012dd2:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8012dd4:	462e      	mov	r6, r5
    letter = _lv_txt_encoded_next(txt, &i_next);
 8012dd6:	4b59      	ldr	r3, [pc, #356]	; (8012f3c <_lv_txt_get_next_line+0x220>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8012dd8:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
    letter = _lv_txt_encoded_next(txt, &i_next);
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4798      	blx	r3
    i_next_next = i_next;
 8012de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    letter = _lv_txt_encoded_next(txt, &i_next);
 8012de2:	4682      	mov	sl, r0
    uint32_t letter_next = 0; /*Letter at i_next*/
 8012de4:	462a      	mov	r2, r5
    i_next_next = i_next;
 8012de6:	930f      	str	r3, [sp, #60]	; 0x3c
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8012de8:	9b05      	ldr	r3, [sp, #20]
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 8012dea:	9504      	str	r5, [sp, #16]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8012dec:	f003 0301 	and.w	r3, r3, #1
 8012df0:	930a      	str	r3, [sp, #40]	; 0x28
    while(txt[i] != '\0') {
 8012df2:	9b03      	ldr	r3, [sp, #12]
 8012df4:	5d99      	ldrb	r1, [r3, r6]
 8012df6:	b9e9      	cbnz	r1, 8012e34 <_lv_txt_get_next_line+0x118>
    if(break_index == NO_BREAK_FOUND) {
 8012df8:	1c63      	adds	r3, r4, #1
 8012dfa:	d06b      	beq.n	8012ed4 <_lv_txt_get_next_line+0x1b8>
    if(force) return break_index;
 8012dfc:	9b02      	ldr	r3, [sp, #8]
 8012dfe:	4626      	mov	r6, r4
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d06f      	beq.n	8012ee4 <_lv_txt_get_next_line+0x1c8>
    if(i == 0) {
 8012e04:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012e06:	2d00      	cmp	r5, #0
 8012e08:	f040 808c 	bne.w	8012f24 <_lv_txt_get_next_line+0x208>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8012e0c:	4b4b      	ldr	r3, [pc, #300]	; (8012f3c <_lv_txt_get_next_line+0x220>)
 8012e0e:	a90d      	add	r1, sp, #52	; 0x34
 8012e10:	4640      	mov	r0, r8
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4798      	blx	r3
 8012e16:	4601      	mov	r1, r0
        if(used_width != NULL) {
 8012e18:	f1bb 0f00 	cmp.w	fp, #0
 8012e1c:	f000 8085 	beq.w	8012f2a <_lv_txt_get_next_line+0x20e>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 8012e20:	462a      	mov	r2, r5
 8012e22:	9801      	ldr	r0, [sp, #4]
 8012e24:	f011 f93b 	bl	802409e <lv_font_get_glyph_width>
 8012e28:	b203      	sxth	r3, r0
 8012e2a:	9300      	str	r3, [sp, #0]
        *used_width = line_w;
 8012e2c:	9b00      	ldr	r3, [sp, #0]
 8012e2e:	f8ab 3000 	strh.w	r3, [fp]
 8012e32:	e07a      	b.n	8012f2a <_lv_txt_get_next_line+0x20e>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8012e34:	4b41      	ldr	r3, [pc, #260]	; (8012f3c <_lv_txt_get_next_line+0x220>)
 8012e36:	a90f      	add	r1, sp, #60	; 0x3c
 8012e38:	9803      	ldr	r0, [sp, #12]
 8012e3a:	681a      	ldr	r2, [r3, #0]
 8012e3c:	4790      	blx	r2
        word_len++;
 8012e3e:	9b04      	ldr	r3, [sp, #16]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8012e40:	4602      	mov	r2, r0
        word_len++;
 8012e42:	3301      	adds	r3, #1
 8012e44:	9308      	str	r3, [sp, #32]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8012e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e48:	b173      	cbz	r3, 8012e68 <_lv_txt_get_next_line+0x14c>
 8012e4a:	900b      	str	r0, [sp, #44]	; 0x2c
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 8012e4c:	4651      	mov	r1, sl
 8012e4e:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8012e52:	f012 fcae 	bl	80257b2 <_lv_txt_is_cmd>
 8012e56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e58:	b130      	cbz	r0, 8012e68 <_lv_txt_get_next_line+0x14c>
        i_next = i_next_next;
 8012e5a:	9b08      	ldr	r3, [sp, #32]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8012e5c:	4692      	mov	sl, r2
        i_next = i_next_next;
 8012e5e:	e9dd 610e 	ldrd	r6, r1, [sp, #56]	; 0x38
 8012e62:	9304      	str	r3, [sp, #16]
 8012e64:	910e      	str	r1, [sp, #56]	; 0x38
 8012e66:	e7c4      	b.n	8012df2 <_lv_txt_get_next_line+0xd6>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8012e68:	4651      	mov	r1, sl
 8012e6a:	9801      	ldr	r0, [sp, #4]
 8012e6c:	920b      	str	r2, [sp, #44]	; 0x2c
 8012e6e:	f011 f916 	bl	802409e <lv_font_get_glyph_width>
        cur_w += letter_w;
 8012e72:	4407      	add	r7, r0
        if(letter_w > 0) {
 8012e74:	b200      	sxth	r0, r0
 8012e76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e78:	2800      	cmp	r0, #0
        cur_w += letter_w;
 8012e7a:	b2bf      	uxth	r7, r7
            cur_w += letter_space;
 8012e7c:	bfc2      	ittt	gt
 8012e7e:	9b06      	ldrgt	r3, [sp, #24]
 8012e80:	18ff      	addgt	r7, r7, r3
 8012e82:	b2bf      	uxthgt	r7, r7
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8012e84:	1c60      	adds	r0, r4, #1
 8012e86:	b23f      	sxth	r7, r7
 8012e88:	d105      	bne.n	8012e96 <_lv_txt_get_next_line+0x17a>
 8012e8a:	9b06      	ldr	r3, [sp, #24]
 8012e8c:	1af9      	subs	r1, r7, r3
 8012e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e90:	4299      	cmp	r1, r3
 8012e92:	bfc8      	it	gt
 8012e94:	4634      	movgt	r4, r6
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 8012e96:	f1ba 0f0a 	cmp.w	sl, #10
 8012e9a:	d016      	beq.n	8012eca <_lv_txt_get_next_line+0x1ae>
 8012e9c:	f1ba 0f0d 	cmp.w	sl, #13
 8012ea0:	d013      	beq.n	8012eca <_lv_txt_get_next_line+0x1ae>
{
    uint8_t i;
    bool ret = false;

    /* each chinese character can be break */
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 8012ea2:	f5aa 409c 	sub.w	r0, sl, #19968	; 0x4e00
 8012ea6:	f245 11a5 	movw	r1, #20901	; 0x51a5
 8012eaa:	4288      	cmp	r0, r1
 8012eac:	d90d      	bls.n	8012eca <_lv_txt_get_next_line+0x1ae>
 8012eae:	2100      	movs	r1, #0
        return true;
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8012eb0:	b2c8      	uxtb	r0, r1
 8012eb2:	4b23      	ldr	r3, [pc, #140]	; (8012f40 <_lv_txt_get_next_line+0x224>)
 8012eb4:	5c18      	ldrb	r0, [r3, r0]
 8012eb6:	b920      	cbnz	r0, 8012ec2 <_lv_txt_get_next_line+0x1a6>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 8012eb8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012ebc:	bf08      	it	eq
 8012ebe:	463d      	moveq	r5, r7
 8012ec0:	e7cb      	b.n	8012e5a <_lv_txt_get_next_line+0x13e>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8012ec2:	4582      	cmp	sl, r0
 8012ec4:	f101 0101 	add.w	r1, r1, #1
 8012ec8:	d1f2      	bne.n	8012eb0 <_lv_txt_get_next_line+0x194>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8012eca:	2e00      	cmp	r6, #0
 8012ecc:	d194      	bne.n	8012df8 <_lv_txt_get_next_line+0xdc>
 8012ece:	1c61      	adds	r1, r4, #1
 8012ed0:	d194      	bne.n	8012dfc <_lv_txt_get_next_line+0xe0>
 8012ed2:	463d      	mov	r5, r7
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8012ed4:	9b04      	ldr	r3, [sp, #16]
 8012ed6:	b123      	cbz	r3, 8012ee2 <_lv_txt_get_next_line+0x1c6>
 8012ed8:	f1ba 0f0d 	cmp.w	sl, #13
 8012edc:	d102      	bne.n	8012ee4 <_lv_txt_get_next_line+0x1c8>
 8012ede:	2a0a      	cmp	r2, #10
 8012ee0:	d100      	bne.n	8012ee4 <_lv_txt_get_next_line+0x1c8>
 8012ee2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
        line_w += word_w;
 8012ee4:	9b00      	ldr	r3, [sp, #0]
        max_width -= word_w;
 8012ee6:	b2ad      	uxth	r5, r5
 8012ee8:	eba9 0905 	sub.w	r9, r9, r5
        line_w += word_w;
 8012eec:	441d      	add	r5, r3
 8012eee:	b22b      	sxth	r3, r5
        max_width -= word_w;
 8012ef0:	fa0f f989 	sxth.w	r9, r9
        line_w += word_w;
 8012ef4:	9300      	str	r3, [sp, #0]
        i += advance;
 8012ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if(advance == 0) {
 8012ef8:	2e00      	cmp	r6, #0
 8012efa:	d083      	beq.n	8012e04 <_lv_txt_get_next_line+0xe8>
        i += advance;
 8012efc:	441e      	add	r6, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8012efe:	f898 3000 	ldrb.w	r3, [r8]
 8012f02:	2b0a      	cmp	r3, #10
        i += advance;
 8012f04:	960d      	str	r6, [sp, #52]	; 0x34
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8012f06:	f43f af7d 	beq.w	8012e04 <_lv_txt_get_next_line+0xe8>
 8012f0a:	2b0d      	cmp	r3, #13
 8012f0c:	f43f af7a 	beq.w	8012e04 <_lv_txt_get_next_line+0xe8>
        if(txt[i] == '\n' || txt[i] == '\r') {
 8012f10:	f818 3006 	ldrb.w	r3, [r8, r6]
 8012f14:	2b0a      	cmp	r3, #10
 8012f16:	d002      	beq.n	8012f1e <_lv_txt_get_next_line+0x202>
 8012f18:	2b0d      	cmp	r3, #13
 8012f1a:	f47f af43 	bne.w	8012da4 <_lv_txt_get_next_line+0x88>
            i++;  /*Include the following newline in the current line*/
 8012f1e:	3601      	adds	r6, #1
 8012f20:	960d      	str	r6, [sp, #52]	; 0x34
            break;
 8012f22:	e76f      	b.n	8012e04 <_lv_txt_get_next_line+0xe8>
    if(used_width != NULL) {
 8012f24:	f1bb 0f00 	cmp.w	fp, #0
 8012f28:	d180      	bne.n	8012e2c <_lv_txt_get_next_line+0x110>
    return i;
 8012f2a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012f2c:	e72b      	b.n	8012d86 <_lv_txt_get_next_line+0x6a>
    if(txt == NULL) return 0;
 8012f2e:	4640      	mov	r0, r8
 8012f30:	e729      	b.n	8012d86 <_lv_txt_get_next_line+0x6a>
 8012f32:	9801      	ldr	r0, [sp, #4]
 8012f34:	e727      	b.n	8012d86 <_lv_txt_get_next_line+0x6a>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 8012f36:	3001      	adds	r0, #1
 8012f38:	e71e      	b.n	8012d78 <_lv_txt_get_next_line+0x5c>
 8012f3a:	bf00      	nop
 8012f3c:	24000100 	.word	0x24000100
 8012f40:	0802dfa3 	.word	0x0802dfa3

08012f44 <_lv_txt_ins>:
{
 8012f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f48:	4688      	mov	r8, r1
 8012f4a:	4617      	mov	r7, r2
    if(txt_buf == NULL || ins_txt == NULL) return;
 8012f4c:	4605      	mov	r5, r0
 8012f4e:	b1f8      	cbz	r0, 8012f90 <_lv_txt_ins+0x4c>
 8012f50:	b1f2      	cbz	r2, 8012f90 <_lv_txt_ins+0x4c>
    size_t old_len = strlen(txt_buf);
 8012f52:	f007 fbfb 	bl	801a74c <strlen>
 8012f56:	4604      	mov	r4, r0
    size_t ins_len = strlen(ins_txt);
 8012f58:	4638      	mov	r0, r7
 8012f5a:	f007 fbf7 	bl	801a74c <strlen>
    if(ins_len == 0) return;
 8012f5e:	4606      	mov	r6, r0
 8012f60:	b1b0      	cbz	r0, 8012f90 <_lv_txt_ins+0x4c>
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8012f62:	4b0c      	ldr	r3, [pc, #48]	; (8012f94 <_lv_txt_ins+0x50>)
    size_t new_len = ins_len + old_len;
 8012f64:	4404      	add	r4, r0
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8012f66:	4641      	mov	r1, r8
 8012f68:	4628      	mov	r0, r5
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	4798      	blx	r3
    for(i = new_len; i >= pos + ins_len; i--) {
 8012f6e:	192b      	adds	r3, r5, r4
 8012f70:	1831      	adds	r1, r6, r0
        txt_buf[i] = txt_buf[i - ins_len];
 8012f72:	4274      	negs	r4, r6
    for(i = new_len; i >= pos + ins_len; i--) {
 8012f74:	1b5a      	subs	r2, r3, r5
 8012f76:	4291      	cmp	r1, r2
 8012f78:	d906      	bls.n	8012f88 <_lv_txt_ins+0x44>
    return memcpy(dst, src, len);
 8012f7a:	4632      	mov	r2, r6
 8012f7c:	4639      	mov	r1, r7
 8012f7e:	4428      	add	r0, r5
}
 8012f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f84:	f007 bbf5 	b.w	801a772 <memcpy>
        txt_buf[i] = txt_buf[i - ins_len];
 8012f88:	5d1a      	ldrb	r2, [r3, r4]
 8012f8a:	f803 2901 	strb.w	r2, [r3], #-1
    for(i = new_len; i >= pos + ins_len; i--) {
 8012f8e:	e7f1      	b.n	8012f74 <_lv_txt_ins+0x30>
}
 8012f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f94:	240000f8 	.word	0x240000f8

08012f98 <_lv_txt_cut>:
{
 8012f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f9c:	460c      	mov	r4, r1
 8012f9e:	4617      	mov	r7, r2
    if(txt == NULL) return;
 8012fa0:	4605      	mov	r5, r0
 8012fa2:	b1a0      	cbz	r0, 8012fce <_lv_txt_cut+0x36>
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8012fa4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8012fdc <_lv_txt_cut+0x44>
    size_t old_len = strlen(txt);
 8012fa8:	f007 fbd0 	bl	801a74c <strlen>
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8012fac:	4621      	mov	r1, r4
    size_t old_len = strlen(txt);
 8012fae:	4606      	mov	r6, r0
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8012fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	4798      	blx	r3
    len = _lv_txt_encoded_get_byte_id(&txt[pos], len);
 8012fb8:	182c      	adds	r4, r5, r0
 8012fba:	f8d8 3000 	ldr.w	r3, [r8]
 8012fbe:	4639      	mov	r1, r7
 8012fc0:	4620      	mov	r0, r4
 8012fc2:	4798      	blx	r3
    for(i = pos; i <= old_len - len; i++) {
 8012fc4:	4623      	mov	r3, r4
 8012fc6:	1a36      	subs	r6, r6, r0
 8012fc8:	1b5a      	subs	r2, r3, r5
 8012fca:	4296      	cmp	r6, r2
 8012fcc:	d201      	bcs.n	8012fd2 <_lv_txt_cut+0x3a>
}
 8012fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txt[i] = txt[i + len];
 8012fd2:	5c1a      	ldrb	r2, [r3, r0]
 8012fd4:	f803 2b01 	strb.w	r2, [r3], #1
    for(i = pos; i <= old_len - len; i++) {
 8012fd8:	e7f6      	b.n	8012fc8 <_lv_txt_cut+0x30>
 8012fda:	bf00      	nop
 8012fdc:	240000f8 	.word	0x240000f8

08012fe0 <_lv_txt_encoded_letter_next_2>:
{
 8012fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe4:	461c      	mov	r4, r3
    *letter = _lv_txt_encoded_next(txt, ofs);
 8012fe6:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8013010 <_lv_txt_encoded_letter_next_2+0x30>
{
 8012fea:	460f      	mov	r7, r1
 8012fec:	4606      	mov	r6, r0
    *letter = _lv_txt_encoded_next(txt, ofs);
 8012fee:	f8d8 3000 	ldr.w	r3, [r8]
 8012ff2:	4621      	mov	r1, r4
{
 8012ff4:	4615      	mov	r5, r2
    *letter = _lv_txt_encoded_next(txt, ofs);
 8012ff6:	4798      	blx	r3
 8012ff8:	6038      	str	r0, [r7, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8012ffa:	b128      	cbz	r0, 8013008 <_lv_txt_encoded_letter_next_2+0x28>
 8012ffc:	6820      	ldr	r0, [r4, #0]
 8012ffe:	2100      	movs	r1, #0
 8013000:	f8d8 3000 	ldr.w	r3, [r8]
 8013004:	4430      	add	r0, r6
 8013006:	4798      	blx	r3
 8013008:	6028      	str	r0, [r5, #0]
}
 801300a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801300e:	bf00      	nop
 8013010:	24000100 	.word	0x24000100

08013014 <lv_arc_constructor>:
    LV_TRACE_OBJ_CREATE("begin");

    lv_arc_t * arc = (lv_arc_t *)obj;

    /*Initialize the allocated 'ext'*/
    arc->rotation = 0;
 8013014:	f44f 0307 	mov.w	r3, #8847360	; 0x870000
    arc->indic_angle_start = 135;
    arc->indic_angle_end   = 270;
    arc->type = LV_ARC_MODE_NORMAL;
    arc->value = VALUE_UNSET;
    arc->min_close = 1;
    arc->min_value = 0;
 8013018:	4a14      	ldr	r2, [pc, #80]	; (801306c <lv_arc_constructor+0x58>)
{
 801301a:	b510      	push	{r4, lr}
    arc->rotation = 0;
 801301c:	624b      	str	r3, [r1, #36]	; 0x24
    arc->indic_angle_end   = 270;
 801301e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
{
 8013022:	460c      	mov	r4, r1
    arc->indic_angle_end   = 270;
 8013024:	628b      	str	r3, [r1, #40]	; 0x28
    arc->min_value = 0;
 8013026:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 801302a:	e9c1 230b 	strd	r2, r3, [r1, #44]	; 0x2c
    arc->max_value = 100;
    arc->dragging = false;
 801302e:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 8013032:	f023 030f 	bic.w	r3, r3, #15
 8013036:	f043 0308 	orr.w	r3, r3, #8
 801303a:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
    arc->chg_rate = 720;
 801303e:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8013042:	86cb      	strh	r3, [r1, #54]	; 0x36
    arc->last_tick = lv_tick_get();
 8013044:	f011 f881 	bl	802414a <lv_tick_get>
    arc->last_angle = arc->indic_angle_end;
 8013048:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    arc->last_tick = lv_tick_get();
 801304a:	63a0      	str	r0, [r4, #56]	; 0x38

    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801304c:	2102      	movs	r1, #2
 801304e:	4620      	mov	r0, r4
    arc->last_angle = arc->indic_angle_end;
 8013050:	87a3      	strh	r3, [r4, #60]	; 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8013052:	f008 fc8a 	bl	801b96a <lv_obj_add_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN | LV_OBJ_FLAG_SCROLLABLE);
 8013056:	4620      	mov	r0, r4
 8013058:	f44f 7144 	mov.w	r1, #784	; 0x310
 801305c:	f008 fcbb 	bl	801b9d6 <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 8013060:	4620      	mov	r0, r4
 8013062:	210d      	movs	r1, #13


    LV_TRACE_OBJ_CREATE("finished");
}
 8013064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 8013068:	f009 bef0 	b.w	801ce4c <lv_obj_set_ext_click_area>
 801306c:	8000002d 	.word	0x8000002d

08013070 <lv_arc_event>:

static void lv_arc_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8013070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 8013074:	48c0      	ldr	r0, [pc, #768]	; (8013378 <lv_arc_event+0x308>)
{
 8013076:	b0aa      	sub	sp, #168	; 0xa8
 8013078:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801307a:	f008 f8d8 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801307e:	2801      	cmp	r0, #1
 8013080:	d138      	bne.n	80130f4 <lv_arc_event+0x84>

    lv_event_code_t code = lv_event_get_code(e);
 8013082:	4630      	mov	r0, r6
 8013084:	f008 f8ed 	bl	801b262 <lv_event_get_code>
 8013088:	4607      	mov	r7, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801308a:	4630      	mov	r0, r6
 801308c:	f008 f8e5 	bl	801b25a <lv_event_get_target>
 8013090:	4605      	mov	r5, r0
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 8013092:	4630      	mov	r0, r6
 8013094:	f008 f8e1 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_PRESSING) {
 8013098:	2f02      	cmp	r7, #2
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 801309a:	4604      	mov	r4, r0
    if(code == LV_EVENT_PRESSING) {
 801309c:	f040 80ff 	bne.w	801329e <lv_arc_event+0x22e>
        lv_indev_t * indev = lv_indev_get_act();
 80130a0:	f7f1 fbb6 	bl	8004810 <lv_indev_get_act>
        if(indev == NULL) return;
 80130a4:	4606      	mov	r6, r0
 80130a6:	b328      	cbz	r0, 80130f4 <lv_arc_event+0x84>

        /*Handle only pointers here*/
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80130a8:	f008 fa9b 	bl	801b5e2 <lv_indev_get_type>
        if(indev_type != LV_INDEV_TYPE_POINTER) return;
 80130ac:	2801      	cmp	r0, #1
 80130ae:	d121      	bne.n	80130f4 <lv_arc_event+0x84>

        lv_point_t p;
        lv_indev_get_point(indev, &p);
 80130b0:	a90a      	add	r1, sp, #40	; 0x28
 80130b2:	4630      	mov	r0, r6
 80130b4:	f008 faa6 	bl	801b604 <lv_indev_get_point>

        /*Make point relative to the arc's center*/
        lv_point_t center;
        lv_coord_t r;
        get_center(obj, &center, &r);
 80130b8:	aa06      	add	r2, sp, #24
 80130ba:	a918      	add	r1, sp, #96	; 0x60
 80130bc:	4628      	mov	r0, r5
 80130be:	f012 fcbf 	bl	8025a40 <get_center>

        p.x -= center.x;
 80130c2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80130c6:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 80130ca:	1a9b      	subs	r3, r3, r2
        p.y -= center.y;
 80130cc:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
        p.x -= center.x;
 80130d0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        p.y -= center.y;
 80130d4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80130d8:	1a9b      	subs	r3, r3, r2
 80130da:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a

        /*Enter dragging mode if pressed out of the knob*/
        if(arc->dragging == false) {
 80130de:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80130e2:	07da      	lsls	r2, r3, #31
 80130e4:	d509      	bpl.n	80130fa <lv_arc_event+0x8a>

        /*It must be in "dragging" mode to turn the arc*/
        if(arc->dragging == false) return;

        /*No angle can be determined if exactly the middle of the arc is being pressed*/
        if(p.x == 0 && p.y == 0) return;
 80130e6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80130ea:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
 80130ee:	ea51 0300 	orrs.w	r3, r1, r0
 80130f2:	d140      	bne.n	8013176 <lv_arc_event+0x106>
        *s = LV_MAX(*s, knob_extra_size);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        lv_arc_draw(e);
    }
}
 80130f4:	b02a      	add	sp, #168	; 0xa8
 80130f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
 80130fa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80130fe:	4628      	mov	r0, r5
 8013100:	f012 fc80 	bl	8025a04 <lv_obj_get_style_arc_width>
            r -= indic_width;
 8013104:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8013108:	fa1f f880 	uxth.w	r8, r0
            lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
 801310c:	4607      	mov	r7, r0
            if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 801310e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8013112:	4628      	mov	r0, r5
            r -= indic_width;
 8013114:	eba6 0608 	sub.w	r6, r6, r8
 8013118:	b2b6      	uxth	r6, r6
            if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 801311a:	f008 fcab 	bl	801ba74 <lv_obj_has_flag>
 801311e:	b300      	cbz	r0, 8013162 <lv_arc_event+0xf2>
                r -= indic_width;
 8013120:	eba6 0608 	sub.w	r6, r6, r8
                r -= LV_MAX(r / 4, indic_width);
 8013124:	b236      	sxth	r6, r6
            if(p.x * p.x + p.y * p.y > r * r) {
 8013126:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801312a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
            if(r < 1) r = 1;
 801312e:	2e01      	cmp	r6, #1
            if(p.x * p.x + p.y * p.y > r * r) {
 8013130:	fb02 f202 	mul.w	r2, r2, r2
            if(r < 1) r = 1;
 8013134:	bfb8      	it	lt
 8013136:	2601      	movlt	r6, #1
            if(p.x * p.x + p.y * p.y > r * r) {
 8013138:	fb03 2303 	mla	r3, r3, r3, r2
 801313c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013140:	4376      	muls	r6, r6
 8013142:	42b3      	cmp	r3, r6
 8013144:	dd08      	ble.n	8013158 <lv_arc_event+0xe8>
                arc->dragging = true;
 8013146:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801314a:	f043 0301 	orr.w	r3, r3, #1
 801314e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                arc->last_tick = lv_tick_get(); /*Capture timestamp at dragging start*/
 8013152:	f010 fffa 	bl	802414a <lv_tick_get>
 8013156:	63a0      	str	r0, [r4, #56]	; 0x38
        if(arc->dragging == false) return;
 8013158:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801315c:	07db      	lsls	r3, r3, #31
 801315e:	d5c9      	bpl.n	80130f4 <lv_arc_event+0x84>
 8013160:	e7c1      	b.n	80130e6 <lv_arc_event+0x76>
                r -= LV_MAX(r / 4, indic_width);
 8013162:	b233      	sxth	r3, r6
 8013164:	2b00      	cmp	r3, #0
 8013166:	bfb8      	it	lt
 8013168:	3303      	addlt	r3, #3
 801316a:	109b      	asrs	r3, r3, #2
 801316c:	42bb      	cmp	r3, r7
 801316e:	bfac      	ite	ge
 8013170:	1af6      	subge	r6, r6, r3
 8013172:	1bf6      	sublt	r6, r6, r7
 8013174:	e7d6      	b.n	8013124 <lv_arc_event+0xb4>
        int16_t bg_end = arc->bg_angle_end;
 8013176:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
        if(arc->bg_angle_end < arc->bg_angle_start) {
 8013178:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801317a:	42b3      	cmp	r3, r6
            bg_end = arc->bg_angle_end + 360;
 801317c:	bf84      	itt	hi
 801317e:	f506 76b4 	addhi.w	r6, r6, #360	; 0x168
 8013182:	b2b6      	uxthhi	r6, r6
        angle = lv_atan2(p.y, p.x);
 8013184:	f011 fd1b 	bl	8024bbe <lv_atan2>
        angle -= arc->bg_angle_start;  /*Make the angle relative to the start angle*/
 8013188:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801318a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801318c:	b237      	sxth	r7, r6
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 801318e:	f8b4 c03c 	ldrh.w	ip, [r4, #60]	; 0x3c
        angle -= arc->bg_angle_start;  /*Make the angle relative to the start angle*/
 8013192:	4413      	add	r3, r2
 8013194:	1ac1      	subs	r1, r0, r3
 8013196:	b28b      	uxth	r3, r1
 8013198:	b209      	sxth	r1, r1
        if(angle < 0) angle += 360;
 801319a:	2900      	cmp	r1, #0
 801319c:	bfbc      	itt	lt
 801319e:	f503 73b4 	addlt.w	r3, r3, #360	; 0x168
 80131a2:	b219      	sxthlt	r1, r3
        int16_t deg_range = bg_end - arc->bg_angle_start;
 80131a4:	1ab3      	subs	r3, r6, r2
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 80131a6:	ebac 0602 	sub.w	r6, ip, r2
 80131aa:	eba2 020c 	sub.w	r2, r2, ip
        int16_t deg_range = bg_end - arc->bg_angle_start;
 80131ae:	b21b      	sxth	r3, r3
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 80131b0:	b290      	uxth	r0, r2
        int16_t delta_angle = angle - last_angle_rel;
 80131b2:	fa11 f282 	uxtah	r2, r1, r2
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 80131b6:	b2b6      	uxth	r6, r6
        if(LV_ABS(delta_angle) > 280) {
 80131b8:	b212      	sxth	r2, r2
 80131ba:	2a00      	cmp	r2, #0
 80131bc:	bfb8      	it	lt
 80131be:	4252      	neglt	r2, r2
 80131c0:	b292      	uxth	r2, r2
 80131c2:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 80131c6:	d942      	bls.n	801324e <lv_arc_event+0x1de>
            if(arc->min_close) angle = 0;
 80131c8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80131cc:	f012 0f08 	tst.w	r2, #8
 80131d0:	bf18      	it	ne
 80131d2:	2300      	movne	r3, #0
        delta_angle = angle - last_angle_rel;
 80131d4:	4418      	add	r0, r3
 80131d6:	fa0f f880 	sxth.w	r8, r0
        uint32_t delta_tick = lv_tick_elaps(arc->last_tick);
 80131da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80131dc:	f010 ffbd 	bl	802415a <lv_tick_elaps>
        int16_t delta_angle_max = (arc->chg_rate * delta_tick) / 1000;
 80131e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80131e2:	4358      	muls	r0, r3
 80131e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80131e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80131ec:	b202      	sxth	r2, r0
        if(delta_angle > delta_angle_max) {
 80131ee:	4590      	cmp	r8, r2
 80131f0:	dc05      	bgt.n	80131fe <lv_arc_event+0x18e>
        else if(delta_angle < -delta_angle_max) {
 80131f2:	4252      	negs	r2, r2
 80131f4:	4590      	cmp	r8, r2
            delta_angle = -delta_angle_max;
 80131f6:	bfb6      	itet	lt
 80131f8:	4240      	neglt	r0, r0
 80131fa:	4642      	movge	r2, r8
 80131fc:	b202      	sxthlt	r2, r0
        int32_t round = ((bg_end - arc->bg_angle_start) * 8) / (arc->max_value - arc->min_value);
 80131fe:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8013200:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8013204:	f9b4 e032 	ldrsh.w	lr, [r4, #50]	; 0x32
 8013208:	eba7 0c01 	sub.w	ip, r7, r1
        int16_t old_value = arc->value;
 801320c:	f9b4 802e 	ldrsh.w	r8, [r4, #46]	; 0x2e
        int32_t round = ((bg_end - arc->bg_angle_start) * 8) / (arc->max_value - arc->min_value);
 8013210:	ebae 0003 	sub.w	r0, lr, r3
 8013214:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
        int16_t new_value = lv_map(angle, arc->bg_angle_start, bg_end, arc->min_value, arc->max_value);
 8013218:	f8cd e000 	str.w	lr, [sp]
        int32_t round = ((bg_end - arc->bg_angle_start) * 8) / (arc->max_value - arc->min_value);
 801321c:	fb9c fcf0 	sdiv	ip, ip, r0
        angle += arc->bg_angle_start;  /*Make the angle absolute again*/
 8013220:	1870      	adds	r0, r6, r1
        round = (round + 4) >> 4;
 8013222:	f10c 0c04 	add.w	ip, ip, #4
        angle += arc->bg_angle_start;  /*Make the angle absolute again*/
 8013226:	eb00 102c 	add.w	r0, r0, ip, asr #4
 801322a:	4410      	add	r0, r2
        int16_t new_value = lv_map(angle, arc->bg_angle_start, bg_end, arc->min_value, arc->max_value);
 801322c:	463a      	mov	r2, r7
 801322e:	b200      	sxth	r0, r0
 8013230:	f011 fd28 	bl	8024c84 <lv_map>
        if(new_value != lv_arc_get_value(obj)) {
 8013234:	f9b5 302e 	ldrsh.w	r3, [r5, #46]	; 0x2e
        int16_t new_value = lv_map(angle, arc->bg_angle_start, bg_end, arc->min_value, arc->max_value);
 8013238:	b206      	sxth	r6, r0
        if(new_value != lv_arc_get_value(obj)) {
 801323a:	42b3      	cmp	r3, r6
 801323c:	d117      	bne.n	801326e <lv_arc_event+0x1fe>
        if(new_value == arc->min_value || new_value == arc->max_value) {
 801323e:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8013242:	42b3      	cmp	r3, r6
 8013244:	d125      	bne.n	8013292 <lv_arc_event+0x222>
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 8013246:	f010 ff80 	bl	802414a <lv_tick_get>
 801324a:	63a0      	str	r0, [r4, #56]	; 0x38
 801324c:	e752      	b.n	80130f4 <lv_arc_event+0x84>
            if(angle < deg_range / 2)arc->min_close = 1;
 801324e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            else arc->min_close = 0;
 8013252:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
            if(angle < deg_range / 2)arc->min_close = 1;
 8013256:	f343 034f 	sbfx	r3, r3, #1, #16
 801325a:	4299      	cmp	r1, r3
 801325c:	bfac      	ite	ge
 801325e:	2300      	movge	r3, #0
 8013260:	2301      	movlt	r3, #1
            else arc->min_close = 0;
 8013262:	f363 02c3 	bfi	r2, r3, #3, #1
 8013266:	460b      	mov	r3, r1
 8013268:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 801326c:	e7b2      	b.n	80131d4 <lv_arc_event+0x164>
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 801326e:	f010 ff6c 	bl	802414a <lv_tick_get>
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 8013272:	4631      	mov	r1, r6
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 8013274:	63a0      	str	r0, [r4, #56]	; 0x38
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 8013276:	4628      	mov	r0, r5
 8013278:	f012 feb5 	bl	8025fe6 <lv_arc_set_value>
            if(new_value != old_value) {
 801327c:	45b0      	cmp	r8, r6
 801327e:	d0de      	beq.n	801323e <lv_arc_event+0x1ce>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8013280:	2200      	movs	r2, #0
 8013282:	211c      	movs	r1, #28
 8013284:	4628      	mov	r0, r5
 8013286:	f7f1 fa5d 	bl	8004744 <lv_event_send>
                if(res != LV_RES_OK) return;
 801328a:	2801      	cmp	r0, #1
 801328c:	f47f af32 	bne.w	80130f4 <lv_arc_event+0x84>
 8013290:	e7d5      	b.n	801323e <lv_arc_event+0x1ce>
        if(new_value == arc->min_value || new_value == arc->max_value) {
 8013292:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 8013296:	42b3      	cmp	r3, r6
 8013298:	f47f af2c 	bne.w	80130f4 <lv_arc_event+0x84>
 801329c:	e7d3      	b.n	8013246 <lv_arc_event+0x1d6>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 801329e:	2f03      	cmp	r7, #3
 80132a0:	d026      	beq.n	80132f0 <lv_arc_event+0x280>
 80132a2:	3f08      	subs	r7, #8
 80132a4:	b2fb      	uxtb	r3, r7
 80132a6:	2b0d      	cmp	r3, #13
 80132a8:	f63f af24 	bhi.w	80130f4 <lv_arc_event+0x84>
 80132ac:	2f0d      	cmp	r7, #13
 80132ae:	f63f af21 	bhi.w	80130f4 <lv_arc_event+0x84>
 80132b2:	a301      	add	r3, pc, #4	; (adr r3, 80132b8 <lv_arc_event+0x248>)
 80132b4:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80132b8:	080132f1 	.word	0x080132f1
 80132bc:	080130f5 	.word	0x080130f5
 80132c0:	080130f5 	.word	0x080130f5
 80132c4:	080130f5 	.word	0x080130f5
 80132c8:	080130f5 	.word	0x080130f5
 80132cc:	0801332d 	.word	0x0801332d
 80132d0:	080130f5 	.word	0x080130f5
 80132d4:	080130f5 	.word	0x080130f5
 80132d8:	080130f5 	.word	0x080130f5
 80132dc:	0801337d 	.word	0x0801337d
 80132e0:	080130f5 	.word	0x080130f5
 80132e4:	0801340b 	.word	0x0801340b
 80132e8:	080130f5 	.word	0x080130f5
 80132ec:	080134b7 	.word	0x080134b7
        arc->dragging = false;
 80132f0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 80132f4:	4628      	mov	r0, r5
        arc->dragging = false;
 80132f6:	f36f 0300 	bfc	r3, #0, #1
 80132fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 80132fe:	f008 fbc7 	bl	801ba90 <lv_obj_get_group>
 8013302:	4604      	mov	r4, r0
        bool editing               = lv_group_get_editing(g);
 8013304:	f008 f968 	bl	801b5d8 <lv_group_get_editing>
 8013308:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801330a:	f7f1 fa81 	bl	8004810 <lv_indev_get_act>
 801330e:	f008 f968 	bl	801b5e2 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8013312:	2804      	cmp	r0, #4
 8013314:	f47f aeee 	bne.w	80130f4 <lv_arc_event+0x84>
            if(editing) lv_group_set_editing(g, false);
 8013318:	2d00      	cmp	r5, #0
 801331a:	f43f aeeb 	beq.w	80130f4 <lv_arc_event+0x84>
 801331e:	2100      	movs	r1, #0
 8013320:	4620      	mov	r0, r4
}
 8013322:	b02a      	add	sp, #168	; 0xa8
 8013324:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            if(editing) lv_group_set_editing(g, false);
 8013328:	f008 b935 	b.w	801b596 <lv_group_set_editing>
        char c = *((char *)lv_event_get_param(e));
 801332c:	4630      	mov	r0, r6
 801332e:	f007 ff9c 	bl	801b26a <lv_event_get_param>
 8013332:	7803      	ldrb	r3, [r0, #0]
        int16_t old_value = arc->value;
 8013334:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8013338:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 801333c:	2a11      	cmp	r2, #17
 801333e:	d112      	bne.n	8013366 <lv_arc_event+0x2f6>
            lv_arc_set_value(obj, lv_arc_get_value(obj) + 1);
 8013340:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 8013342:	3101      	adds	r1, #1
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 8013344:	b209      	sxth	r1, r1
 8013346:	4628      	mov	r0, r5
 8013348:	f012 fe4d 	bl	8025fe6 <lv_arc_set_value>
        if(old_value != arc->value) {
 801334c:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 8013350:	42b3      	cmp	r3, r6
 8013352:	f43f aecf 	beq.w	80130f4 <lv_arc_event+0x84>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8013356:	2200      	movs	r2, #0
 8013358:	211c      	movs	r1, #28
 801335a:	4628      	mov	r0, r5
}
 801335c:	b02a      	add	sp, #168	; 0xa8
 801335e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8013362:	f7f1 b9ef 	b.w	8004744 <lv_event_send>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8013366:	2b14      	cmp	r3, #20
 8013368:	d002      	beq.n	8013370 <lv_arc_event+0x300>
 801336a:	2b12      	cmp	r3, #18
 801336c:	f47f aec2 	bne.w	80130f4 <lv_arc_event+0x84>
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 8013370:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 8013372:	3901      	subs	r1, #1
 8013374:	e7e6      	b.n	8013344 <lv_arc_event+0x2d4>
 8013376:	bf00      	nop
 8013378:	08029964 	.word	0x08029964
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 801337c:	4630      	mov	r0, r6
 801337e:	f007 ff74 	bl	801b26a <lv_event_get_param>
        get_center(obj, &p, &r);
 8013382:	aa06      	add	r2, sp, #24
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 8013384:	4606      	mov	r6, r0
        get_center(obj, &p, &r);
 8013386:	a90a      	add	r1, sp, #40	; 0x28
 8013388:	4628      	mov	r0, r5
 801338a:	f012 fb59 	bl	8025a40 <get_center>
        if(obj->spec_attr) ext_click_area = obj->spec_attr->ext_click_pad;
 801338e:	68ac      	ldr	r4, [r5, #8]
 8013390:	b10c      	cbz	r4, 8013396 <lv_arc_event+0x326>
 8013392:	f9b4 4014 	ldrsh.w	r4, [r4, #20]
        lv_coord_t w = lv_obj_get_style_arc_width(obj, LV_PART_MAIN);
 8013396:	2100      	movs	r1, #0
 8013398:	4628      	mov	r0, r5
 801339a:	f012 fb33 	bl	8025a04 <lv_obj_get_style_arc_width>
        r -= w + ext_click_area;
 801339e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80133a2:	b2a7      	uxth	r7, r4
 80133a4:	fa10 f484 	uxtah	r4, r0, r4
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 80133a8:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
        r -= w + ext_click_area;
 80133ac:	b2a4      	uxth	r4, r4
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 80133ae:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
        r -= w + ext_click_area;
 80133b2:	1b0d      	subs	r5, r1, r4
 80133b4:	1a61      	subs	r1, r4, r1
 80133b6:	b2ad      	uxth	r5, r5
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 80133b8:	fa10 f281 	uxtah	r2, r0, r1
 80133bc:	fa1c f181 	uxtah	r1, ip, r1
 80133c0:	eb05 030c 	add.w	r3, r5, ip
        r -= w + ext_click_area;
 80133c4:	f8ad 5018 	strh.w	r5, [sp, #24]
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 80133c8:	4405      	add	r5, r0
 80133ca:	b212      	sxth	r2, r2
 80133cc:	b209      	sxth	r1, r1
 80133ce:	a818      	add	r0, sp, #96	; 0x60
 80133d0:	b22d      	sxth	r5, r5
 80133d2:	b21b      	sxth	r3, r3
 80133d4:	9500      	str	r5, [sp, #0]
 80133d6:	f010 ff41 	bl	802425c <lv_area_set>
        if(_lv_area_is_point_on(&a, info->point, LV_RADIUS_CIRCLE)) {
 80133da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80133de:	6831      	ldr	r1, [r6, #0]
 80133e0:	a818      	add	r0, sp, #96	; 0x60
 80133e2:	f010 ffc7 	bl	8024374 <_lv_area_is_point_on>
 80133e6:	b110      	cbz	r0, 80133ee <lv_arc_event+0x37e>
            info->res = false;
 80133e8:	2300      	movs	r3, #0
 80133ea:	7133      	strb	r3, [r6, #4]
            return;
 80133ec:	e682      	b.n	80130f4 <lv_arc_event+0x84>
        lv_area_increase(&a, w + ext_click_area * 2, w + ext_click_area * 2);
 80133ee:	193a      	adds	r2, r7, r4
 80133f0:	a818      	add	r0, sp, #96	; 0x60
 80133f2:	b212      	sxth	r2, r2
 80133f4:	4611      	mov	r1, r2
 80133f6:	f010 ff50 	bl	802429a <lv_area_increase>
        info->res = _lv_area_is_point_on(&a, info->point, LV_RADIUS_CIRCLE);
 80133fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80133fe:	6831      	ldr	r1, [r6, #0]
 8013400:	a818      	add	r0, sp, #96	; 0x60
 8013402:	f010 ffb7 	bl	8024374 <_lv_area_is_point_on>
 8013406:	7130      	strb	r0, [r6, #4]
 8013408:	e674      	b.n	80130f4 <lv_arc_event+0x84>
        lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801340a:	2100      	movs	r1, #0
 801340c:	4628      	mov	r0, r5
 801340e:	f012 faff 	bl	8025a10 <lv_obj_get_style_pad_left>
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8013412:	2100      	movs	r1, #0
        lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8013414:	4604      	mov	r4, r0
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8013416:	4628      	mov	r0, r5
 8013418:	f012 fb00 	bl	8025a1c <lv_obj_get_style_pad_right>
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801341c:	2100      	movs	r1, #0
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801341e:	4680      	mov	r8, r0
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8013420:	4628      	mov	r0, r5
 8013422:	f012 fb01 	bl	8025a28 <lv_obj_get_style_pad_top>
        lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8013426:	2100      	movs	r1, #0
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8013428:	4607      	mov	r7, r0
        lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 801342a:	4628      	mov	r0, r5
 801342c:	f012 fb02 	bl	8025a34 <lv_obj_get_style_pad_bottom>
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 8013430:	4544      	cmp	r4, r8
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8013432:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 8013436:	bfb8      	it	lt
 8013438:	4644      	movlt	r4, r8
 801343a:	b224      	sxth	r4, r4
 801343c:	42bc      	cmp	r4, r7
 801343e:	bfb8      	it	lt
 8013440:	463c      	movlt	r4, r7
 8013442:	b224      	sxth	r4, r4
 8013444:	4284      	cmp	r4, r0
 8013446:	bfb8      	it	lt
 8013448:	4604      	movlt	r4, r0
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801344a:	4628      	mov	r0, r5
 801344c:	f012 fae0 	bl	8025a10 <lv_obj_get_style_pad_left>
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8013450:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8013454:	4680      	mov	r8, r0
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8013456:	4628      	mov	r0, r5
 8013458:	f012 fae0 	bl	8025a1c <lv_obj_get_style_pad_right>
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801345c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8013460:	4682      	mov	sl, r0
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8013462:	4628      	mov	r0, r5
 8013464:	f012 fae0 	bl	8025a28 <lv_obj_get_style_pad_top>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8013468:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801346c:	4681      	mov	r9, r0
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 801346e:	4628      	mov	r0, r5
 8013470:	f012 fae0 	bl	8025a34 <lv_obj_get_style_pad_bottom>
 8013474:	4607      	mov	r7, r0
        knob_extra_size += knob_get_extra_size(obj);
 8013476:	4628      	mov	r0, r5
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 8013478:	b224      	sxth	r4, r4
        knob_extra_size += knob_get_extra_size(obj);
 801347a:	f012 fbd9 	bl	8025c30 <knob_get_extra_size>
 801347e:	4605      	mov	r5, r0
        lv_coord_t * s = lv_event_get_param(e);
 8013480:	4630      	mov	r0, r6
 8013482:	f007 fef2 	bl	801b26a <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 8013486:	45d0      	cmp	r8, sl
 8013488:	4642      	mov	r2, r8
        knob_extra_size += knob_get_extra_size(obj);
 801348a:	f105 0302 	add.w	r3, r5, #2
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 801348e:	bfb8      	it	lt
 8013490:	4652      	movlt	r2, sl
 8013492:	b212      	sxth	r2, r2
 8013494:	454a      	cmp	r2, r9
 8013496:	bfb8      	it	lt
 8013498:	464a      	movlt	r2, r9
 801349a:	b212      	sxth	r2, r2
        knob_extra_size += knob_get_extra_size(obj);
 801349c:	42ba      	cmp	r2, r7
 801349e:	bfac      	ite	ge
 80134a0:	189b      	addge	r3, r3, r2
 80134a2:	19db      	addlt	r3, r3, r7
        *s = LV_MAX(*s, knob_extra_size);
 80134a4:	f9b0 2000 	ldrsh.w	r2, [r0]
        knob_extra_size += knob_get_extra_size(obj);
 80134a8:	1b1b      	subs	r3, r3, r4
        *s = LV_MAX(*s, knob_extra_size);
 80134aa:	b21b      	sxth	r3, r3
 80134ac:	4293      	cmp	r3, r2
 80134ae:	bfb8      	it	lt
 80134b0:	4613      	movlt	r3, r2
 80134b2:	8003      	strh	r3, [r0, #0]
 80134b4:	e61e      	b.n	80130f4 <lv_arc_event+0x84>

static void lv_arc_draw(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 80134b6:	4630      	mov	r0, r6
 80134b8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8013658 <lv_arc_event+0x5e8>
 80134bc:	f007 fecd 	bl	801b25a <lv_event_get_target>
 80134c0:	4604      	mov	r4, r0
    lv_arc_t * arc = (lv_arc_t *)obj;

    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80134c2:	4630      	mov	r0, r6
 80134c4:	f007 ff22 	bl	801b30c <lv_event_get_draw_ctx>
 80134c8:	4606      	mov	r6, r0

    lv_point_t center;
    lv_coord_t arc_r;
    get_center(obj, &center, &arc_r);
 80134ca:	f10d 020a 	add.w	r2, sp, #10
 80134ce:	a903      	add	r1, sp, #12
 80134d0:	4620      	mov	r0, r4
 80134d2:	f012 fab5 	bl	8025a40 <get_center>

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 80134d6:	4631      	mov	r1, r6
 80134d8:	a818      	add	r0, sp, #96	; 0x60
 80134da:	f009 f803 	bl	801c4e4 <lv_obj_draw_dsc_init>

    /*Draw the background arc*/
    lv_draw_arc_dsc_t arc_dsc;
    if(arc_r > 0) {
 80134de:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 80134e2:	2f00      	cmp	r7, #0
 80134e4:	dd2b      	ble.n	801353e <lv_arc_event+0x4ce>
        lv_draw_arc_dsc_init(&arc_dsc);
 80134e6:	ad06      	add	r5, sp, #24
 80134e8:	4628      	mov	r0, r5
 80134ea:	f00b f976 	bl	801e7da <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_MAIN, &arc_dsc);
 80134ee:	462a      	mov	r2, r5
 80134f0:	2100      	movs	r1, #0
 80134f2:	4620      	mov	r0, r4
 80134f4:	f008 ff43 	bl	801c37e <lv_obj_init_draw_arc_dsc>

        part_draw_dsc.part = LV_PART_MAIN;
 80134f8:	2300      	movs	r3, #0
        part_draw_dsc.class_p = MY_CLASS;
        part_draw_dsc.type = LV_ARC_DRAW_PART_BACKGROUND;
        part_draw_dsc.p1 = &center;
        part_draw_dsc.radius = arc_r;
        part_draw_dsc.arc_dsc = &arc_dsc;
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80134fa:	aa18      	add	r2, sp, #96	; 0x60
 80134fc:	211a      	movs	r1, #26
        part_draw_dsc.part = LV_PART_MAIN;
 80134fe:	9325      	str	r3, [sp, #148]	; 0x94
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8013500:	4620      	mov	r0, r4
        part_draw_dsc.radius = arc_r;
 8013502:	f8ad 709c 	strh.w	r7, [sp, #156]	; 0x9c
        part_draw_dsc.arc_dsc = &arc_dsc;
 8013506:	9520      	str	r5, [sp, #128]	; 0x80
        part_draw_dsc.type = LV_ARC_DRAW_PART_BACKGROUND;
 8013508:	e9cd 8319 	strd	r8, r3, [sp, #100]	; 0x64
        part_draw_dsc.p1 = &center;
 801350c:	ab03      	add	r3, sp, #12
 801350e:	9321      	str	r3, [sp, #132]	; 0x84
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8013510:	f7f1 f918 	bl	8004744 <lv_event_send>

        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->bg_angle_start + arc->rotation,
 8013514:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8013516:	4629      	mov	r1, r5
 8013518:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801351a:	4630      	mov	r0, r6
 801351c:	441a      	add	r2, r3
 801351e:	b292      	uxth	r2, r2
 8013520:	9201      	str	r2, [sp, #4]
 8013522:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8013524:	4413      	add	r3, r2
 8013526:	aa03      	add	r2, sp, #12
 8013528:	b29b      	uxth	r3, r3
 801352a:	9300      	str	r3, [sp, #0]
 801352c:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 8013530:	f00b f95f 	bl	801e7f2 <lv_draw_arc>
                    arc->bg_angle_end + arc->rotation);

        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8013534:	aa18      	add	r2, sp, #96	; 0x60
 8013536:	211b      	movs	r1, #27
 8013538:	4620      	mov	r0, r4
 801353a:	f7f1 f903 	bl	8004744 <lv_event_send>
    }

    /*Make the indicator arc smaller or larger according to its greatest padding value*/
    lv_coord_t left_indic = lv_obj_get_style_pad_left(obj, LV_PART_INDICATOR);
 801353e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8013542:	4620      	mov	r0, r4
 8013544:	f012 fa64 	bl	8025a10 <lv_obj_get_style_pad_left>
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 8013548:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t left_indic = lv_obj_get_style_pad_left(obj, LV_PART_INDICATOR);
 801354c:	4605      	mov	r5, r0
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 801354e:	4620      	mov	r0, r4
 8013550:	f012 fa64 	bl	8025a1c <lv_obj_get_style_pad_right>
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 8013554:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 8013558:	4682      	mov	sl, r0
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 801355a:	4620      	mov	r0, r4
 801355c:	f012 fa64 	bl	8025a28 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_indic = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
 8013560:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 8013564:	4681      	mov	r9, r0
    lv_coord_t bottom_indic = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
 8013566:	4620      	mov	r0, r4
 8013568:	f012 fa64 	bl	8025a34 <lv_obj_get_style_pad_bottom>
    lv_coord_t indic_r = arc_r - LV_MAX4(left_indic, right_indic, top_indic, bottom_indic);
 801356c:	4555      	cmp	r5, sl
 801356e:	bfb8      	it	lt
 8013570:	4655      	movlt	r5, sl
 8013572:	b22d      	sxth	r5, r5
 8013574:	454d      	cmp	r5, r9
 8013576:	bfb8      	it	lt
 8013578:	464d      	movlt	r5, r9
 801357a:	b22d      	sxth	r5, r5
 801357c:	4285      	cmp	r5, r0
 801357e:	bfac      	ite	ge
 8013580:	eba7 0905 	subge.w	r9, r7, r5
 8013584:	eba7 0900 	sublt.w	r9, r7, r0
 8013588:	fa0f f989 	sxth.w	r9, r9

    if(indic_r > 0) {
 801358c:	f1b9 0f00 	cmp.w	r9, #0
 8013590:	dd36      	ble.n	8013600 <lv_arc_event+0x590>
        lv_draw_arc_dsc_init(&arc_dsc);
 8013592:	ad06      	add	r5, sp, #24
 8013594:	4628      	mov	r0, r5
 8013596:	f00b f920 	bl	801e7da <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_INDICATOR, &arc_dsc);
 801359a:	462a      	mov	r2, r5
 801359c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80135a0:	4620      	mov	r0, r4
 80135a2:	f008 feec 	bl	801c37e <lv_obj_init_draw_arc_dsc>

        part_draw_dsc.part = LV_PART_INDICATOR;
 80135a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
        part_draw_dsc.class_p = MY_CLASS;
        part_draw_dsc.type = LV_ARC_DRAW_PART_FOREGROUND;
        part_draw_dsc.p1 = &center;
        part_draw_dsc.radius = indic_r;
        part_draw_dsc.arc_dsc = &arc_dsc;
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80135aa:	aa18      	add	r2, sp, #96	; 0x60
 80135ac:	211a      	movs	r1, #26
        part_draw_dsc.part = LV_PART_INDICATOR;
 80135ae:	9325      	str	r3, [sp, #148]	; 0x94
        part_draw_dsc.type = LV_ARC_DRAW_PART_FOREGROUND;
 80135b0:	2301      	movs	r3, #1
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80135b2:	4620      	mov	r0, r4
        part_draw_dsc.class_p = MY_CLASS;
 80135b4:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
        part_draw_dsc.type = LV_ARC_DRAW_PART_FOREGROUND;
 80135b8:	931a      	str	r3, [sp, #104]	; 0x68
        part_draw_dsc.p1 = &center;
 80135ba:	ab03      	add	r3, sp, #12
        part_draw_dsc.radius = indic_r;
 80135bc:	f8ad 909c 	strh.w	r9, [sp, #156]	; 0x9c
        part_draw_dsc.p1 = &center;
 80135c0:	9321      	str	r3, [sp, #132]	; 0x84
        part_draw_dsc.arc_dsc = &arc_dsc;
 80135c2:	9520      	str	r5, [sp, #128]	; 0x80
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80135c4:	f7f1 f8be 	bl	8004744 <lv_event_send>

        if(arc_dsc.width > part_draw_dsc.radius) arc_dsc.width = part_draw_dsc.radius;
 80135c8:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	; 0x9c
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->indic_angle_start + arc->rotation,
 80135cc:	4630      	mov	r0, r6
        if(arc_dsc.width > part_draw_dsc.radius) arc_dsc.width = part_draw_dsc.radius;
 80135ce:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 80135d2:	429a      	cmp	r2, r3
 80135d4:	bfc8      	it	gt
 80135d6:	f8ad 301a 	strhgt.w	r3, [sp, #26]
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->indic_angle_start + arc->rotation,
 80135da:	b29b      	uxth	r3, r3
 80135dc:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 80135de:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80135e0:	4411      	add	r1, r2
 80135e2:	b289      	uxth	r1, r1
 80135e4:	9101      	str	r1, [sp, #4]
 80135e6:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80135e8:	440a      	add	r2, r1
 80135ea:	4629      	mov	r1, r5
 80135ec:	b292      	uxth	r2, r2
 80135ee:	9200      	str	r2, [sp, #0]
 80135f0:	aa03      	add	r2, sp, #12
 80135f2:	f00b f8fe 	bl	801e7f2 <lv_draw_arc>
                    arc->indic_angle_end + arc->rotation);

        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80135f6:	aa18      	add	r2, sp, #96	; 0x60
 80135f8:	211b      	movs	r1, #27
 80135fa:	4620      	mov	r0, r4
 80135fc:	f7f1 f8a2 	bl	8004744 <lv_event_send>
    }

    lv_area_t knob_area;
    get_knob_area(obj, &center, arc_r, &knob_area);
 8013600:	f10d 0910 	add.w	r9, sp, #16

    lv_draw_rect_dsc_t knob_rect_dsc;
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8013604:	ad0a      	add	r5, sp, #40	; 0x28
    get_knob_area(obj, &center, arc_r, &knob_area);
 8013606:	463a      	mov	r2, r7
 8013608:	a903      	add	r1, sp, #12
 801360a:	464b      	mov	r3, r9
 801360c:	4620      	mov	r0, r4
 801360e:	f012 fa5c 	bl	8025aca <get_knob_area>
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8013612:	4628      	mov	r0, r5
 8013614:	f7f5 f9c6 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 8013618:	462a      	mov	r2, r5
 801361a:	4620      	mov	r0, r4
 801361c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8013620:	f008 fc6a 	bl	801bef8 <lv_obj_init_draw_rect_dsc>

    part_draw_dsc.part = LV_PART_KNOB;
 8013624:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    part_draw_dsc.class_p = MY_CLASS;
    part_draw_dsc.type = LV_ARC_DRAW_PART_KNOB;
    part_draw_dsc.draw_area = &knob_area;
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8013628:	aa18      	add	r2, sp, #96	; 0x60
 801362a:	211a      	movs	r1, #26
    part_draw_dsc.part = LV_PART_KNOB;
 801362c:	9325      	str	r3, [sp, #148]	; 0x94
    part_draw_dsc.type = LV_ARC_DRAW_PART_KNOB;
 801362e:	2302      	movs	r3, #2
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8013630:	4620      	mov	r0, r4
    part_draw_dsc.class_p = MY_CLASS;
 8013632:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
 8013636:	951c      	str	r5, [sp, #112]	; 0x70
    part_draw_dsc.draw_area = &knob_area;
 8013638:	e9cd 391a 	strd	r3, r9, [sp, #104]	; 0x68
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801363c:	f7f1 f882 	bl	8004744 <lv_event_send>

    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 8013640:	464a      	mov	r2, r9
 8013642:	4629      	mov	r1, r5
 8013644:	4630      	mov	r0, r6
 8013646:	f00b fee2 	bl	801f40e <lv_draw_rect>

    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801364a:	aa18      	add	r2, sp, #96	; 0x60
 801364c:	211b      	movs	r1, #27
 801364e:	4620      	mov	r0, r4
 8013650:	f7f1 f878 	bl	8004744 <lv_event_send>
}
 8013654:	e54e      	b.n	80130f4 <lv_arc_event+0x84>
 8013656:	bf00      	nop
 8013658:	08029964 	.word	0x08029964

0801365c <lv_bar_set_value_with_anim>:
    lv_obj_invalidate(var->bar);
}

static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
                                       _lv_bar_anim_t * anim_info, lv_anim_enable_t en)
{
 801365c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801365e:	b093      	sub	sp, #76	; 0x4c
 8013660:	460e      	mov	r6, r1
 8013662:	4607      	mov	r7, r0
 8013664:	4615      	mov	r5, r2
 8013666:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 801366a:	461c      	mov	r4, r3
    if(en == LV_ANIM_OFF) {
 801366c:	b961      	cbnz	r1, 8013688 <lv_bar_set_value_with_anim+0x2c>
        lv_anim_del(anim_info, NULL);
 801366e:	4618      	mov	r0, r3
 8013670:	f7fe fe96 	bl	80123a0 <lv_anim_del>
        anim_info->anim_state = LV_BAR_ANIM_STATE_INV;
 8013674:	f04f 33ff 	mov.w	r3, #4294967295
        *value_ptr = new_value;
        lv_obj_invalidate((lv_obj_t *)obj);
 8013678:	4638      	mov	r0, r7
        anim_info->anim_state = LV_BAR_ANIM_STATE_INV;
 801367a:	60e3      	str	r3, [r4, #12]
        *value_ptr = new_value;
 801367c:	602e      	str	r6, [r5, #0]
        lv_anim_set_values(&a, LV_BAR_ANIM_STATE_START, LV_BAR_ANIM_STATE_END);
        lv_anim_set_ready_cb(&a, lv_bar_anim_ready);
        lv_anim_set_time(&a, lv_obj_get_style_anim_time(obj, LV_PART_MAIN));
        lv_anim_start(&a);
    }
}
 801367e:	b013      	add	sp, #76	; 0x4c
 8013680:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_obj_invalidate((lv_obj_t *)obj);
 8013684:	f009 bb0a 	b.w	801cc9c <lv_obj_invalidate>
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 8013688:	68db      	ldr	r3, [r3, #12]
        lv_anim_del(anim_info, NULL);
 801368a:	2100      	movs	r1, #0
 801368c:	4620      	mov	r0, r4
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 801368e:	3301      	adds	r3, #1
            anim_info->anim_start = *value_ptr;
 8013690:	bf0c      	ite	eq
 8013692:	6813      	ldreq	r3, [r2, #0]
            anim_info->anim_start = anim_info->anim_end;
 8013694:	68a3      	ldrne	r3, [r4, #8]
            anim_info->anim_end   = new_value;
 8013696:	e9c4 3601 	strd	r3, r6, [r4, #4]
        *value_ptr = new_value;
 801369a:	6016      	str	r6, [r2, #0]
        lv_anim_del(anim_info, NULL);
 801369c:	f7fe fe80 	bl	80123a0 <lv_anim_del>
        lv_anim_init(&a);
 80136a0:	a801      	add	r0, sp, #4
 80136a2:	f7fe fe61 	bl	8012368 <lv_anim_init>
 80136a6:	4b0a      	ldr	r3, [pc, #40]	; (80136d0 <lv_bar_set_value_with_anim+0x74>)
    a->start_value = start;
 80136a8:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 80136aa:	2264      	movs	r2, #100	; 0x64
    a->exec_cb = exec_cb;
 80136ac:	9302      	str	r3, [sp, #8]
    a->end_value = end;
 80136ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80136b2:	4638      	mov	r0, r7
    a->var = var;
 80136b4:	9401      	str	r4, [sp, #4]
    a->end_value = end;
 80136b6:	930b      	str	r3, [sp, #44]	; 0x2c
    a->ready_cb = ready_cb;
 80136b8:	4b06      	ldr	r3, [pc, #24]	; (80136d4 <lv_bar_set_value_with_anim+0x78>)
    a->current_value = start;
 80136ba:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
    a->ready_cb = ready_cb;
 80136be:	9304      	str	r3, [sp, #16]
 80136c0:	f00a fa12 	bl	801dae8 <lv_obj_get_style_prop>
    a->time = duration;
 80136c4:	900c      	str	r0, [sp, #48]	; 0x30
        lv_anim_start(&a);
 80136c6:	a801      	add	r0, sp, #4
 80136c8:	f7fe fe9a 	bl	8012400 <lv_anim_start>
}
 80136cc:	b013      	add	sp, #76	; 0x4c
 80136ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136d0:	08026073 	.word	0x08026073
 80136d4:	08026049 	.word	0x08026049

080136d8 <draw_indic>:
{
 80136d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136dc:	4605      	mov	r5, r0
 80136de:	b0bd      	sub	sp, #244	; 0xf4
    lv_obj_t * obj = lv_event_get_target(e);
 80136e0:	f007 fdbb 	bl	801b25a <lv_event_get_target>
 80136e4:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80136e6:	4628      	mov	r0, r5
 80136e8:	f007 fe10 	bl	801b30c <lv_event_get_draw_ctx>
    lv_obj_get_coords(obj, &bar_coords);
 80136ec:	a90a      	add	r1, sp, #40	; 0x28
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80136ee:	9001      	str	r0, [sp, #4]
    lv_obj_get_coords(obj, &bar_coords);
 80136f0:	4620      	mov	r0, r4
 80136f2:	f009 f883 	bl	801c7fc <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80136f6:	2268      	movs	r2, #104	; 0x68
 80136f8:	2100      	movs	r1, #0
 80136fa:	4620      	mov	r0, r4
 80136fc:	f00a f9f4 	bl	801dae8 <lv_obj_get_style_prop>
 8013700:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8013702:	2269      	movs	r2, #105	; 0x69
 8013704:	2100      	movs	r1, #0
 8013706:	4620      	mov	r0, r4
 8013708:	f00a f9ee 	bl	801dae8 <lv_obj_get_style_prop>
    bar_coords.x2 += transf_w;
 801370c:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
    bar_coords.x1 -= transf_w;
 8013710:	b2ab      	uxth	r3, r5
 8013712:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    bar_coords.y1 -= transf_h;
 8013716:	b280      	uxth	r0, r0
    bar_coords.y2 += transf_h;
 8013718:	f8bd 802e 	ldrh.w	r8, [sp, #46]	; 0x2e
    bar_coords.x2 += transf_w;
 801371c:	441f      	add	r7, r3
    bar_coords.x1 -= transf_w;
 801371e:	1aca      	subs	r2, r1, r3
 8013720:	3301      	adds	r3, #1
    bar_coords.y2 += transf_h;
 8013722:	4480      	add	r8, r0
    bar_coords.x2 += transf_w;
 8013724:	b2bf      	uxth	r7, r7
    bar_coords.x1 -= transf_w;
 8013726:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    bar_coords.y1 -= transf_h;
 801372a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
    bar_coords.y2 += transf_h;
 801372e:	fa1f f888 	uxth.w	r8, r8
    bar_coords.x2 += transf_w;
 8013732:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 8013736:	441f      	add	r7, r3
    bar_coords.y1 -= transf_h;
 8013738:	1a15      	subs	r5, r2, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801373a:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801373c:	1a7f      	subs	r7, r7, r1
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 801373e:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    bar_coords.y2 += transf_h;
 8013742:	f8ad 802e 	strh.w	r8, [sp, #46]	; 0x2e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013746:	4480      	add	r8, r0
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 8013748:	f001 0103 	and.w	r1, r1, #3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801374c:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801374e:	eba8 0802 	sub.w	r8, r8, r2
    bar_coords.y1 -= transf_h;
 8013752:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 8013756:	2901      	cmp	r1, #1
 8013758:	fa0f f888 	sxth.w	r8, r8
    int32_t range = bar->max_value - bar->min_value;
 801375c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 8013760:	eba0 0302 	sub.w	r3, r0, r2
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 8013764:	f040 80e8 	bne.w	8013938 <draw_indic+0x260>
 8013768:	2a00      	cmp	r2, #0
 801376a:	f280 80e5 	bge.w	8013938 <draw_indic+0x260>
 801376e:	2800      	cmp	r0, #0
 8013770:	f340 80e2 	ble.w	8013938 <draw_indic+0x260>
 8013774:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013776:	1a8e      	subs	r6, r1, r2
 8013778:	4272      	negs	r2, r6
 801377a:	4172      	adcs	r2, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801377c:	2100      	movs	r1, #0
    bool sym = false;
 801377e:	9200      	str	r2, [sp, #0]
 8013780:	4620      	mov	r0, r4
 8013782:	2212      	movs	r2, #18
 8013784:	9306      	str	r3, [sp, #24]
 8013786:	f00a f9af 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801378a:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801378c:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801378e:	2100      	movs	r1, #0
 8013790:	4620      	mov	r0, r4
 8013792:	f00a f9a9 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013796:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013798:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801379a:	2100      	movs	r1, #0
 801379c:	4620      	mov	r0, r4
 801379e:	f00a f9a3 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80137a2:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80137a4:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80137a6:	2100      	movs	r1, #0
 80137a8:	4620      	mov	r0, r4
 80137aa:	f00a f99d 	bl	801dae8 <lv_obj_get_style_prop>
    dest->x2 = src->x2;
 80137ae:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
    bar->indic_area.x1 += bg_left;
 80137b2:	b2ab      	uxth	r3, r5
    dest->y1 = src->y1;
 80137b4:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
    dest->y2 = src->y2;
 80137b8:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 80137bc:	45b8      	cmp	r8, r7
    bar->indic_area.x1 += bg_left;
 80137be:	9304      	str	r3, [sp, #16]
    bar->indic_area.x2 -= bg_right;
 80137c0:	fa1f f389 	uxth.w	r3, r9
    bar->indic_area.x1 += bg_left;
 80137c4:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
    bar->indic_area.x2 -= bg_right;
 80137c8:	eba2 0203 	sub.w	r2, r2, r3
 80137cc:	9302      	str	r3, [sp, #8]
    bar->indic_area.y1 += bg_top;
 80137ce:	b2b3      	uxth	r3, r6
    bar->indic_area.x1 += bg_left;
 80137d0:	fa1e f585 	uxtah	r5, lr, r5
    bar->indic_area.y1 += bg_top;
 80137d4:	fa1c f686 	uxtah	r6, ip, r6
    bar->indic_area.x2 -= bg_right;
 80137d8:	b292      	uxth	r2, r2
    bar->indic_area.y1 += bg_top;
 80137da:	9305      	str	r3, [sp, #20]
    bar->indic_area.y2 -= bg_bottom;
 80137dc:	b283      	uxth	r3, r0
    bar->indic_area.x1 += bg_left;
 80137de:	b2ad      	uxth	r5, r5
    bar->indic_area.x2 -= bg_right;
 80137e0:	8722      	strh	r2, [r4, #56]	; 0x38
    bar->indic_area.y2 -= bg_bottom;
 80137e2:	eba1 0103 	sub.w	r1, r1, r3
    bar->indic_area.y1 += bg_top;
 80137e6:	b2b6      	uxth	r6, r6
    bar->indic_area.y2 -= bg_bottom;
 80137e8:	9303      	str	r3, [sp, #12]
 80137ea:	b289      	uxth	r1, r1
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 80137ec:	9b06      	ldr	r3, [sp, #24]
    bar->indic_area.x1 += bg_left;
 80137ee:	86a5      	strh	r5, [r4, #52]	; 0x34
    bar->indic_area.y1 += bg_top;
 80137f0:	86e6      	strh	r6, [r4, #54]	; 0x36
    bar->indic_area.y2 -= bg_bottom;
 80137f2:	8761      	strh	r1, [r4, #58]	; 0x3a
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 80137f4:	f300 80a2 	bgt.w	801393c <draw_indic+0x264>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80137f8:	3101      	adds	r1, #1
 80137fa:	1b89      	subs	r1, r1, r6
 80137fc:	b209      	sxth	r1, r1
 80137fe:	2903      	cmp	r1, #3
 8013800:	dc09      	bgt.n	8013816 <draw_indic+0x13e>
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 8013802:	eb08 71d8 	add.w	r1, r8, r8, lsr #31
 8013806:	8ae2      	ldrh	r2, [r4, #22]
 8013808:	eb02 0261 	add.w	r2, r2, r1, asr #1
 801380c:	b292      	uxth	r2, r2
 801380e:	1e91      	subs	r1, r2, #2
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 8013810:	3202      	adds	r2, #2
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 8013812:	86e1      	strh	r1, [r4, #54]	; 0x36
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 8013814:	8762      	strh	r2, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013816:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    lv_coord_t anim_length = hor ? indicw : indich;
 8013818:	45b8      	cmp	r8, r7
 801381a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 801381c:	f102 0201 	add.w	r2, r2, #1
        axis2 = &bar->indic_area.x2;
 8013820:	bfda      	itte	le
 8013822:	f104 0938 	addle.w	r9, r4, #56	; 0x38
        axis1 = &bar->indic_area.x1;
 8013826:	f104 0a34 	addle.w	sl, r4, #52	; 0x34
        axis1 = &bar->indic_area.y1;
 801382a:	f104 0a36 	addgt.w	sl, r4, #54	; 0x36
 801382e:	eba2 0201 	sub.w	r2, r2, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013832:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        axis2 = &bar->indic_area.y2;
 8013834:	bfc8      	it	gt
 8013836:	f104 093a 	addgt.w	r9, r4, #58	; 0x3a
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 801383a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801383c:	b212      	sxth	r2, r2
 801383e:	9208      	str	r2, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013840:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    lv_coord_t anim_length = hor ? indicw : indich;
 8013842:	bfd8      	it	le
 8013844:	f8dd b020 	ldrle.w	fp, [sp, #32]
 8013848:	f102 0201 	add.w	r2, r2, #1
 801384c:	eba2 0201 	sub.w	r2, r2, r1
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 8013850:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013852:	b212      	sxth	r2, r2
 8013854:	9207      	str	r2, [sp, #28]
        indic_length_calc = lv_area_get_width;
 8013856:	bfd2      	itee	le
 8013858:	4a53      	ldrle	r2, [pc, #332]	; (80139a8 <draw_indic+0x2d0>)
        indic_length_calc = lv_area_get_height;
 801385a:	4a54      	ldrgt	r2, [pc, #336]	; (80139ac <draw_indic+0x2d4>)
    lv_coord_t anim_length = hor ? indicw : indich;
 801385c:	f8dd b01c 	ldrgt.w	fp, [sp, #28]
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 8013860:	1c4d      	adds	r5, r1, #1
        indic_length_calc = lv_area_get_height;
 8013862:	9206      	str	r2, [sp, #24]
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 8013864:	d07b      	beq.n	801395e <draw_indic+0x286>
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 8013866:	6d25      	ldr	r5, [r4, #80]	; 0x50
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 8013868:	6d62      	ldr	r2, [r4, #84]	; 0x54
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 801386a:	1a2d      	subs	r5, r5, r0
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 801386c:	1a12      	subs	r2, r2, r0
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 801386e:	fb0b f505 	mul.w	r5, fp, r5
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 8013872:	fb0b f202 	mul.w	r2, fp, r2
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 8013876:	fb95 f5f3 	sdiv	r5, r5, r3
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 801387a:	fb92 f2f3 	sdiv	r2, r2, r3
        anim_start_value_x = (((anim_start_value_end_x - anim_start_value_start_x) * bar->start_value_anim.anim_state) /
 801387e:	b22e      	sxth	r6, r5
 8013880:	b212      	sxth	r2, r2
 8013882:	1b92      	subs	r2, r2, r6
 8013884:	4351      	muls	r1, r2
 8013886:	bf48      	it	mi
 8013888:	31ff      	addmi	r1, #255	; 0xff
        anim_start_value_x += anim_start_value_start_x;
 801388a:	eb05 2521 	add.w	r5, r5, r1, asr #8
    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 801388e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 8013890:	b22d      	sxth	r5, r5
    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 8013892:	1c4a      	adds	r2, r1, #1
 8013894:	d06a      	beq.n	801396c <draw_indic+0x294>
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 8013896:	6c26      	ldr	r6, [r4, #64]	; 0x40
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 8013898:	6c62      	ldr	r2, [r4, #68]	; 0x44
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 801389a:	1a36      	subs	r6, r6, r0
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 801389c:	1a12      	subs	r2, r2, r0
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 801389e:	fb0b f606 	mul.w	r6, fp, r6
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 80138a2:	fb0b f202 	mul.w	r2, fp, r2
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 80138a6:	fb96 f6f3 	sdiv	r6, r6, r3
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 80138aa:	fb92 f2f3 	sdiv	r2, r2, r3
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 80138ae:	b230      	sxth	r0, r6
 80138b0:	b212      	sxth	r2, r2
 80138b2:	1a12      	subs	r2, r2, r0
                                                      bar->cur_value_anim.anim_state) /
 80138b4:	4351      	muls	r1, r2
 80138b6:	bf48      	it	mi
 80138b8:	31ff      	addmi	r1, #255	; 0xff
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 80138ba:	eb06 2621 	add.w	r6, r6, r1, asr #8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80138be:	2100      	movs	r1, #0
 80138c0:	2216      	movs	r2, #22
 80138c2:	4620      	mov	r0, r4
 80138c4:	9309      	str	r3, [sp, #36]	; 0x24
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 80138c6:	b236      	sxth	r6, r6
 80138c8:	f00a f90e 	bl	801dae8 <lv_obj_get_style_prop>
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 80138cc:	45b8      	cmp	r8, r7
        *axis1 = *axis2 - anim_cur_value_x + 1;
 80138ce:	fa1f fc86 	uxth.w	ip, r6
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 80138d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
        *axis2 -= anim_start_value_x;
 80138d4:	b2a9      	uxth	r1, r5
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 80138d6:	dd50      	ble.n	801397a <draw_indic+0x2a2>
        *axis1 = *axis2 - anim_cur_value_x + 1;
 80138d8:	f8b9 2000 	ldrh.w	r2, [r9]
 80138dc:	3201      	adds	r2, #1
 80138de:	eba2 020c 	sub.w	r2, r2, ip
 80138e2:	f8aa 2000 	strh.w	r2, [sl]
        *axis2 -= anim_start_value_x;
 80138e6:	f8b9 2000 	ldrh.w	r2, [r9]
 80138ea:	1a52      	subs	r2, r2, r1
 80138ec:	f8a9 2000 	strh.w	r2, [r9]
    if(sym) {
 80138f0:	9a00      	ldr	r2, [sp, #0]
 80138f2:	2a00      	cmp	r2, #0
 80138f4:	d15e      	bne.n	80139b4 <draw_indic+0x2dc>
    if(!sym && indic_length_calc(&bar->indic_area) <= 1) {
 80138f6:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80138fa:	9b06      	ldr	r3, [sp, #24]
 80138fc:	4798      	blx	r3
 80138fe:	2801      	cmp	r0, #1
 8013900:	dc71      	bgt.n	80139e6 <draw_indic+0x30e>
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8013902:	9901      	ldr	r1, [sp, #4]
 8013904:	a82a      	add	r0, sp, #168	; 0xa8
 8013906:	f008 fded 	bl	801c4e4 <lv_obj_draw_dsc_init>
        part_draw_dsc.part = LV_PART_INDICATOR;
 801390a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801390e:	aa2a      	add	r2, sp, #168	; 0xa8
 8013910:	211a      	movs	r1, #26
        part_draw_dsc.part = LV_PART_INDICATOR;
 8013912:	9337      	str	r3, [sp, #220]	; 0xdc
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8013914:	4620      	mov	r0, r4
        part_draw_dsc.class_p = MY_CLASS;
 8013916:	4b26      	ldr	r3, [pc, #152]	; (80139b0 <draw_indic+0x2d8>)
 8013918:	932b      	str	r3, [sp, #172]	; 0xac
        part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 801391a:	9b00      	ldr	r3, [sp, #0]
 801391c:	932c      	str	r3, [sp, #176]	; 0xb0
        part_draw_dsc.draw_area = &bar->indic_area;
 801391e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8013922:	932d      	str	r3, [sp, #180]	; 0xb4
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8013924:	f7f0 ff0e 	bl	8004744 <lv_event_send>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8013928:	aa2a      	add	r2, sp, #168	; 0xa8
 801392a:	211b      	movs	r1, #27
 801392c:	4620      	mov	r0, r4
 801392e:	f7f0 ff09 	bl	8004744 <lv_event_send>
}
 8013932:	b03d      	add	sp, #244	; 0xf4
 8013934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool sym = false;
 8013938:	2200      	movs	r2, #0
 801393a:	e71f      	b.n	801377c <draw_indic+0xa4>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801393c:	3201      	adds	r2, #1
 801393e:	1b52      	subs	r2, r2, r5
    else if(!hor && lv_area_get_width(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 8013940:	b212      	sxth	r2, r2
 8013942:	2a03      	cmp	r2, #3
 8013944:	f73f af67 	bgt.w	8013816 <draw_indic+0x13e>
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 8013948:	eb07 71d7 	add.w	r1, r7, r7, lsr #31
 801394c:	8aa2      	ldrh	r2, [r4, #20]
 801394e:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8013952:	b292      	uxth	r2, r2
 8013954:	1e91      	subs	r1, r2, #2
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 8013956:	3202      	adds	r2, #2
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 8013958:	86a1      	strh	r1, [r4, #52]	; 0x34
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 801395a:	8722      	strh	r2, [r4, #56]	; 0x38
 801395c:	e75b      	b.n	8013816 <draw_indic+0x13e>
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 801395e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013960:	1a2d      	subs	r5, r5, r0
 8013962:	fb0b f505 	mul.w	r5, fp, r5
 8013966:	fb95 f5f3 	sdiv	r5, r5, r3
 801396a:	e790      	b.n	801388e <draw_indic+0x1b6>
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 801396c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801396e:	1a36      	subs	r6, r6, r0
 8013970:	fb0b f606 	mul.w	r6, fp, r6
 8013974:	fb96 f6f3 	sdiv	r6, r6, r3
 8013978:	e7a1      	b.n	80138be <draw_indic+0x1e6>
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 801397a:	b2c0      	uxtb	r0, r0
 801397c:	2801      	cmp	r0, #1
 801397e:	d108      	bne.n	8013992 <draw_indic+0x2ba>
        anim_cur_value_x = -anim_cur_value_x;
 8013980:	4652      	mov	r2, sl
 8013982:	f1cc 0c00 	rsb	ip, ip, #0
        anim_start_value_x = -anim_start_value_x;
 8013986:	4249      	negs	r1, r1
        axis1 = axis2;
 8013988:	46ca      	mov	sl, r9
        anim_cur_value_x = -anim_cur_value_x;
 801398a:	fa0f f68c 	sxth.w	r6, ip
        axis2 = tmp;
 801398e:	4691      	mov	r9, r2
        anim_start_value_x = -anim_start_value_x;
 8013990:	b20d      	sxth	r5, r1
        *axis2 = *axis1 + anim_cur_value_x;
 8013992:	f8ba 2000 	ldrh.w	r2, [sl]
 8013996:	4416      	add	r6, r2
 8013998:	f8a9 6000 	strh.w	r6, [r9]
        *axis1 += anim_start_value_x;
 801399c:	f8ba 2000 	ldrh.w	r2, [sl]
 80139a0:	4415      	add	r5, r2
 80139a2:	f8aa 5000 	strh.w	r5, [sl]
 80139a6:	e7a3      	b.n	80138f0 <draw_indic+0x218>
 80139a8:	08026015 	.word	0x08026015
 80139ac:	08026021 	.word	0x08026021
 80139b0:	08029980 	.word	0x08029980
        shift = (-bar->min_value * anim_length) / range;
 80139b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        if(hor) {
 80139b6:	45b8      	cmp	r8, r7
            if(*axis2 > zero)
 80139b8:	f9b9 0000 	ldrsh.w	r0, [r9]
        shift = (-bar->min_value * anim_length) / range;
 80139bc:	f1c2 0200 	rsb	r2, r2, #0
            zero = *axis1 + shift;
 80139c0:	f9ba 1000 	ldrsh.w	r1, [sl]
        shift = (-bar->min_value * anim_length) / range;
 80139c4:	fb0b f202 	mul.w	r2, fp, r2
 80139c8:	fb92 f2f3 	sdiv	r2, r2, r3
            zero = *axis1 + shift;
 80139cc:	b292      	uxth	r2, r2
        if(hor) {
 80139ce:	f300 80ef 	bgt.w	8013bb0 <draw_indic+0x4d8>
            zero = *axis1 + shift;
 80139d2:	440a      	add	r2, r1
 80139d4:	b212      	sxth	r2, r2
            if(*axis2 > zero)
 80139d6:	4282      	cmp	r2, r0
                *axis1 = *axis2;
 80139d8:	bfaa      	itet	ge
 80139da:	f8aa 0000 	strhge.w	r0, [sl]
                *axis1 = zero;
 80139de:	f8aa 2000 	strhlt.w	r2, [sl]
                *axis2 = zero;
 80139e2:	f8a9 2000 	strhge.w	r2, [r9]
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 80139e6:	ad1c      	add	r5, sp, #112	; 0x70
    part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 80139e8:	2600      	movs	r6, #0
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 80139ea:	4628      	mov	r0, r5
 80139ec:	f7f4 ffda 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_rect_dsc);
 80139f0:	462a      	mov	r2, r5
 80139f2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80139f6:	4620      	mov	r0, r4
 80139f8:	f008 fa7e 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 80139fc:	9901      	ldr	r1, [sp, #4]
 80139fe:	a82a      	add	r0, sp, #168	; 0xa8
 8013a00:	f008 fd70 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_INDICATOR;
 8013a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8013a08:	aa2a      	add	r2, sp, #168	; 0xa8
 8013a0a:	211a      	movs	r1, #26
    part_draw_dsc.part = LV_PART_INDICATOR;
 8013a0c:	9337      	str	r3, [sp, #220]	; 0xdc
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8013a0e:	4620      	mov	r0, r4
    part_draw_dsc.class_p = MY_CLASS;
 8013a10:	4b7c      	ldr	r3, [pc, #496]	; (8013c04 <draw_indic+0x52c>)
    part_draw_dsc.rect_dsc = &draw_rect_dsc;
 8013a12:	952e      	str	r5, [sp, #184]	; 0xb8
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 8013a14:	4645      	mov	r5, r8
    part_draw_dsc.class_p = MY_CLASS;
 8013a16:	932b      	str	r3, [sp, #172]	; 0xac
    part_draw_dsc.draw_area = &bar->indic_area;
 8013a18:	f104 0334 	add.w	r3, r4, #52	; 0x34
    part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 8013a1c:	962c      	str	r6, [sp, #176]	; 0xb0
    part_draw_dsc.draw_area = &bar->indic_area;
 8013a1e:	932d      	str	r3, [sp, #180]	; 0xb4
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8013a20:	f7f0 fe90 	bl	8004744 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8013a24:	4631      	mov	r1, r6
 8013a26:	220b      	movs	r2, #11
 8013a28:	4620      	mov	r0, r4
 8013a2a:	f00a f85d 	bl	801dae8 <lv_obj_get_style_prop>
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 8013a2e:	45b8      	cmp	r8, r7
    return (lv_coord_t)v.num;
 8013a30:	b200      	sxth	r0, r0
 8013a32:	bfa8      	it	ge
 8013a34:	463d      	movge	r5, r7
 8013a36:	106d      	asrs	r5, r5, #1
    if(indic_radius > short_side >> 1) indic_radius = short_side >> 1;
 8013a38:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8013a3c:	4285      	cmp	r5, r0
 8013a3e:	bfa8      	it	ge
 8013a40:	4605      	movge	r5, r0
 8013a42:	4293      	cmp	r3, r2
 8013a44:	bfa8      	it	ge
 8013a46:	4613      	movge	r3, r2
 8013a48:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
 8013a4c:	105b      	asrs	r3, r3, #1
 8013a4e:	4293      	cmp	r3, r2
 8013a50:	bfa8      	it	ge
 8013a52:	4613      	movge	r3, r2
    if((hor && lv_area_get_width(&bar->indic_area) > indic_radius * 2) ||
 8013a54:	45b8      	cmp	r8, r7
 8013a56:	bfd8      	it	le
 8013a58:	8f22      	ldrhle	r2, [r4, #56]	; 0x38
 8013a5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013a5e:	bfcd      	iteet	gt
 8013a60:	8f62      	ldrhgt	r2, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013a62:	3201      	addle	r2, #1
 8013a64:	8ea1      	ldrhle	r1, [r4, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013a66:	3201      	addgt	r2, #1
 8013a68:	bfc8      	it	gt
 8013a6a:	8ee1      	ldrhgt	r1, [r4, #54]	; 0x36
 8013a6c:	1a52      	subs	r2, r2, r1
       (!hor && lv_area_get_height(&bar->indic_area) > indic_radius * 2)) {
 8013a6e:	b212      	sxth	r2, r2
 8013a70:	429a      	cmp	r2, r3
 8013a72:	dd18      	ble.n	8013aa6 <draw_indic+0x3ce>
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 8013a74:	2300      	movs	r3, #0
        lv_opa_t bg_opa = draw_rect_dsc.bg_opa;
 8013a76:	f89d a073 	ldrb.w	sl, [sp, #115]	; 0x73
        lv_opa_t bg_img_opa = draw_rect_dsc.bg_img_opa;
 8013a7a:	f89d 908a 	ldrb.w	r9, [sp, #138]	; 0x8a
        lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8013a7e:	f104 0234 	add.w	r2, r4, #52	; 0x34
        lv_opa_t border_opa = draw_rect_dsc.border_opa;
 8013a82:	f89d 6092 	ldrb.w	r6, [sp, #146]	; 0x92
        lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8013a86:	a91c      	add	r1, sp, #112	; 0x70
 8013a88:	9801      	ldr	r0, [sp, #4]
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 8013a8a:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
        draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 8013a8e:	f88d 308a 	strb.w	r3, [sp, #138]	; 0x8a
        draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 8013a92:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
        lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8013a96:	f00b fcba 	bl	801f40e <lv_draw_rect>
        draw_rect_dsc.bg_opa = bg_opa;
 8013a9a:	f88d a073 	strb.w	sl, [sp, #115]	; 0x73
        draw_rect_dsc.bg_img_opa = bg_img_opa;
 8013a9e:	f88d 908a 	strb.w	r9, [sp, #138]	; 0x8a
        draw_rect_dsc.border_opa = border_opa;
 8013aa2:	f88d 6092 	strb.w	r6, [sp, #146]	; 0x92
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 8013aa6:	9a04      	ldr	r2, [sp, #16]
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 8013aa8:	a90c      	add	r1, sp, #48	; 0x30
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 8013aaa:	8aa3      	ldrh	r3, [r4, #20]
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 8013aac:	a810      	add	r0, sp, #64	; 0x40
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 8013aae:	4413      	add	r3, r2
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 8013ab0:	9a02      	ldr	r2, [sp, #8]
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 8013ab2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 8013ab6:	8b23      	ldrh	r3, [r4, #24]
 8013ab8:	1a9b      	subs	r3, r3, r2
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 8013aba:	9a05      	ldr	r2, [sp, #20]
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 8013abc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 8013ac0:	8ae3      	ldrh	r3, [r4, #22]
 8013ac2:	4413      	add	r3, r2
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 8013ac4:	9a03      	ldr	r2, [sp, #12]
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 8013ac6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 8013aca:	8b63      	ldrh	r3, [r4, #26]
 8013acc:	1a9b      	subs	r3, r3, r2
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 8013ace:	462a      	mov	r2, r5
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 8013ad0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	f7f4 fd5f 	bl	8008598 <lv_draw_mask_radius_init>
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 8013ada:	2100      	movs	r1, #0
 8013adc:	a810      	add	r0, sp, #64	; 0x40
 8013ade:	f7f4 fbe3 	bl	80082a8 <lv_draw_mask_add>
    mask_indic_max_area.x1 += bg_left;
 8013ae2:	9a04      	ldr	r2, [sp, #16]
 8013ae4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 8013ae8:	2300      	movs	r3, #0
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 8013aea:	4605      	mov	r5, r0
    dest->y1 = src->y1;
 8013aec:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
    mask_indic_max_area.x1 += bg_left;
 8013af0:	4411      	add	r1, r2
    mask_indic_max_area.y1 += bg_top;
 8013af2:	9a05      	ldr	r2, [sp, #20]
    lv_opa_t border_opa = draw_rect_dsc.border_opa;
 8013af4:	f89d 6092 	ldrb.w	r6, [sp, #146]	; 0x92
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8013af8:	45b8      	cmp	r8, r7
    mask_indic_max_area.y1 += bg_top;
 8013afa:	4410      	add	r0, r2
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 8013afc:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
    mask_indic_max_area.x2 -= bg_right;
 8013b00:	9a02      	ldr	r2, [sp, #8]
    mask_indic_max_area.x1 += bg_left;
 8013b02:	b289      	uxth	r1, r1
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 8013b04:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
    mask_indic_max_area.y1 += bg_top;
 8013b08:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 8013b0a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
    dest->y2 = src->y2;
 8013b0e:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
    mask_indic_max_area.x2 -= bg_right;
 8013b12:	eba3 0302 	sub.w	r3, r3, r2
    mask_indic_max_area.y2 -= bg_bottom;
 8013b16:	9a03      	ldr	r2, [sp, #12]
    mask_indic_max_area.x1 += bg_left;
 8013b18:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    mask_indic_max_area.y2 -= bg_bottom;
 8013b1c:	ebac 0202 	sub.w	r2, ip, r2
    mask_indic_max_area.x2 -= bg_right;
 8013b20:	b29b      	uxth	r3, r3
    mask_indic_max_area.y1 += bg_top;
 8013b22:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
    mask_indic_max_area.y2 -= bg_bottom;
 8013b26:	b292      	uxth	r2, r2
    mask_indic_max_area.x2 -= bg_right;
 8013b28:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    mask_indic_max_area.y2 -= bg_bottom;
 8013b2c:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8013b30:	dc56      	bgt.n	8013be0 <draw_indic+0x508>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013b32:	3201      	adds	r2, #1
 8013b34:	1a12      	subs	r2, r2, r0
 8013b36:	b212      	sxth	r2, r2
 8013b38:	2a03      	cmp	r2, #3
 8013b3a:	dc0b      	bgt.n	8013b54 <draw_indic+0x47c>
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 8013b3c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8013b40:	8ae3      	ldrh	r3, [r4, #22]
 8013b42:	eb03 0368 	add.w	r3, r3, r8, asr #1
 8013b46:	b29b      	uxth	r3, r3
 8013b48:	1e9a      	subs	r2, r3, #2
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 8013b4a:	3302      	adds	r3, #2
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 8013b4c:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 8013b50:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    lv_draw_mask_radius_init(&mask_indic_param, &bar->indic_area, draw_rect_dsc.radius, false);
 8013b54:	2300      	movs	r3, #0
 8013b56:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
 8013b5a:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8013b5e:	a816      	add	r0, sp, #88	; 0x58
 8013b60:	f7f4 fd1a 	bl	8008598 <lv_draw_mask_radius_init>
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 8013b64:	2100      	movs	r1, #0
 8013b66:	a816      	add	r0, sp, #88	; 0x58
 8013b68:	f7f4 fb9e 	bl	80082a8 <lv_draw_mask_add>
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &mask_indic_max_area);
 8013b6c:	aa0e      	add	r2, sp, #56	; 0x38
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 8013b6e:	4607      	mov	r7, r0
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &mask_indic_max_area);
 8013b70:	a91c      	add	r1, sp, #112	; 0x70
 8013b72:	9801      	ldr	r0, [sp, #4]
 8013b74:	f00b fc4b 	bl	801f40e <lv_draw_rect>
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 8013b78:	2300      	movs	r3, #0
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8013b7a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8013b7e:	a91c      	add	r1, sp, #112	; 0x70
 8013b80:	9801      	ldr	r0, [sp, #4]
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 8013b82:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 8013b86:	f88d 308a 	strb.w	r3, [sp, #138]	; 0x8a
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 8013b8a:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
    draw_rect_dsc.border_opa = border_opa;
 8013b8e:	f88d 6092 	strb.w	r6, [sp, #146]	; 0x92
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8013b92:	f00b fc3c 	bl	801f40e <lv_draw_rect>
    lv_draw_mask_free_param(&mask_indic_param);
 8013b96:	a816      	add	r0, sp, #88	; 0x58
 8013b98:	f00b fbf8 	bl	801f38c <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_bg_param);
 8013b9c:	a810      	add	r0, sp, #64	; 0x40
 8013b9e:	f00b fbf5 	bl	801f38c <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_indic_id);
 8013ba2:	4638      	mov	r0, r7
 8013ba4:	f7f4 fbb6 	bl	8008314 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bg_id);
 8013ba8:	4628      	mov	r0, r5
 8013baa:	f7f4 fbb3 	bl	8008314 <lv_draw_mask_remove_id>
 8013bae:	e6bb      	b.n	8013928 <draw_indic+0x250>
            zero = *axis2 - shift + 1;
 8013bb0:	f1c2 0301 	rsb	r3, r2, #1
 8013bb4:	4403      	add	r3, r0
 8013bb6:	b21b      	sxth	r3, r3
            if(*axis1 > zero)
 8013bb8:	428b      	cmp	r3, r1
                *axis2 = *axis1;
 8013bba:	bfaa      	itet	ge
 8013bbc:	f8a9 1000 	strhge.w	r1, [r9]
                *axis2 = zero;
 8013bc0:	f8a9 3000 	strhlt.w	r3, [r9]
                *axis1 = zero;
 8013bc4:	f8aa 3000 	strhge.w	r3, [sl]
            if(*axis2 < *axis1) {
 8013bc8:	f9b9 2000 	ldrsh.w	r2, [r9]
 8013bcc:	f9ba 3000 	ldrsh.w	r3, [sl]
 8013bd0:	429a      	cmp	r2, r3
 8013bd2:	f6bf af08 	bge.w	80139e6 <draw_indic+0x30e>
                *axis1 = *axis2;
 8013bd6:	f8aa 2000 	strh.w	r2, [sl]
                *axis2 = zero;
 8013bda:	f8a9 3000 	strh.w	r3, [r9]
 8013bde:	e702      	b.n	80139e6 <draw_indic+0x30e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013be0:	3301      	adds	r3, #1
 8013be2:	1a5b      	subs	r3, r3, r1
    else if(!hor && lv_area_get_width(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8013be4:	b21b      	sxth	r3, r3
 8013be6:	2b03      	cmp	r3, #3
 8013be8:	dcb4      	bgt.n	8013b54 <draw_indic+0x47c>
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 8013bea:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8013bee:	8aa3      	ldrh	r3, [r4, #20]
 8013bf0:	eb03 0367 	add.w	r3, r3, r7, asr #1
 8013bf4:	b29b      	uxth	r3, r3
 8013bf6:	1e9a      	subs	r2, r3, #2
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 8013bf8:	3302      	adds	r3, #2
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 8013bfa:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 8013bfe:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8013c02:	e7a7      	b.n	8013b54 <draw_indic+0x47c>
 8013c04:	08029980 	.word	0x08029980

08013c08 <lv_bar_event>:
{
 8013c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8013c0c:	482f      	ldr	r0, [pc, #188]	; (8013ccc <lv_bar_event+0xc4>)
{
 8013c0e:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8013c10:	f007 fb0d 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8013c14:	2801      	cmp	r0, #1
 8013c16:	d144      	bne.n	8013ca2 <lv_bar_event+0x9a>
    lv_event_code_t code = lv_event_get_code(e);
 8013c18:	4630      	mov	r0, r6
 8013c1a:	f007 fb22 	bl	801b262 <lv_event_get_code>
 8013c1e:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8013c20:	4630      	mov	r0, r6
 8013c22:	f007 fb1a 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8013c26:	2c13      	cmp	r4, #19
    lv_obj_t * obj = lv_event_get_target(e);
 8013c28:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8013c2a:	d13c      	bne.n	8013ca6 <lv_bar_event+0x9e>
        indic_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 8013c2c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8013c30:	f008 fbf1 	bl	801c416 <lv_obj_calculate_ext_draw_size>
 8013c34:	4607      	mov	r7, r0
        lv_coord_t * s = lv_event_get_param(e);
 8013c36:	4630      	mov	r0, r6
 8013c38:	f007 fb17 	bl	801b26a <lv_event_get_param>
 8013c3c:	4606      	mov	r6, r0
        *s = LV_MAX(*s, indic_size);
 8013c3e:	f9b0 0000 	ldrsh.w	r0, [r0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013c42:	2212      	movs	r2, #18
 8013c44:	2100      	movs	r1, #0
 8013c46:	42b8      	cmp	r0, r7
 8013c48:	bfb8      	it	lt
 8013c4a:	4638      	movlt	r0, r7
 8013c4c:	8030      	strh	r0, [r6, #0]
 8013c4e:	4628      	mov	r0, r5
 8013c50:	f009 ff4a 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013c54:	4622      	mov	r2, r4
    return (lv_coord_t)v.num;
 8013c56:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013c5a:	2100      	movs	r1, #0
 8013c5c:	4628      	mov	r0, r5
 8013c5e:	f009 ff43 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013c62:	2210      	movs	r2, #16
    return (lv_coord_t)v.num;
 8013c64:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013c66:	2100      	movs	r1, #0
 8013c68:	4628      	mov	r0, r5
 8013c6a:	f009 ff3d 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8013c6e:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 8013c70:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8013c72:	2100      	movs	r1, #0
 8013c74:	4628      	mov	r0, r5
 8013c76:	f009 ff37 	bl	801dae8 <lv_obj_get_style_prop>
        lv_coord_t pad = LV_MIN4(bg_left, bg_right, bg_top, bg_bottom);
 8013c7a:	4544      	cmp	r4, r8
 8013c7c:	4623      	mov	r3, r4
    return (lv_coord_t)v.num;
 8013c7e:	b202      	sxth	r2, r0
 8013c80:	bfa8      	it	ge
 8013c82:	4643      	movge	r3, r8
 8013c84:	42bb      	cmp	r3, r7
 8013c86:	bfa8      	it	ge
 8013c88:	463b      	movge	r3, r7
 8013c8a:	4293      	cmp	r3, r2
 8013c8c:	bfa8      	it	ge
 8013c8e:	4613      	movge	r3, r2
        if(pad < 0) {
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	da06      	bge.n	8013ca2 <lv_bar_event+0x9a>
            *s = LV_MAX(*s, -pad);
 8013c94:	425b      	negs	r3, r3
 8013c96:	f9b6 2000 	ldrsh.w	r2, [r6]
 8013c9a:	4293      	cmp	r3, r2
 8013c9c:	bfb8      	it	lt
 8013c9e:	4613      	movlt	r3, r2
 8013ca0:	8033      	strh	r3, [r6, #0]
}
 8013ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 8013ca6:	2c01      	cmp	r4, #1
 8013ca8:	d001      	beq.n	8013cae <lv_bar_event+0xa6>
 8013caa:	2c08      	cmp	r4, #8
 8013cac:	d106      	bne.n	8013cbc <lv_bar_event+0xb4>
        lv_obj_invalidate_area(obj, &bar->indic_area);
 8013cae:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8013cb2:	4628      	mov	r0, r5
}
 8013cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_invalidate_area(obj, &bar->indic_area);
 8013cb8:	f008 bfcf 	b.w	801cc5a <lv_obj_invalidate_area>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8013cbc:	2c15      	cmp	r4, #21
 8013cbe:	d1f0      	bne.n	8013ca2 <lv_bar_event+0x9a>
        draw_indic(e);
 8013cc0:	4630      	mov	r0, r6
}
 8013cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        draw_indic(e);
 8013cc6:	f7ff bd07 	b.w	80136d8 <draw_indic>
 8013cca:	bf00      	nop
 8013ccc:	08029980 	.word	0x08029980

08013cd0 <lv_btn_create>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_btn_create(lv_obj_t * parent)
{
 8013cd0:	4601      	mov	r1, r0
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8013cd2:	4804      	ldr	r0, [pc, #16]	; (8013ce4 <lv_btn_create+0x14>)
{
 8013cd4:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8013cd6:	f7f1 f8a3 	bl	8004e20 <lv_obj_class_create_obj>
 8013cda:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8013cdc:	f008 f8ae 	bl	801be3c <lv_obj_class_init_obj>
    return obj;
}
 8013ce0:	4620      	mov	r0, r4
 8013ce2:	bd10      	pop	{r4, pc}
 8013ce4:	0802999c 	.word	0x0802999c

08013ce8 <lv_btnmatrix_set_map.part.0>:

/*=====================
 * Setter functions
 *====================*/

void lv_btnmatrix_set_map(lv_obj_t * obj, const char * map[])
 8013ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;
    btnm->row_cnt = 1;
    /*Count the buttons in the map*/
    uint16_t btn_cnt = 0;
    uint16_t i       = 0;
    while(map[i] && map[i][0] != '\0') {
 8013cec:	2700      	movs	r7, #0
    btnm->row_cnt = 1;
 8013cee:	2301      	movs	r3, #1
void lv_btnmatrix_set_map(lv_obj_t * obj, const char * map[])
 8013cf0:	b093      	sub	sp, #76	; 0x4c
 8013cf2:	4604      	mov	r4, r0
 8013cf4:	460e      	mov	r6, r1
    uint16_t btn_cnt = 0;
 8013cf6:	463d      	mov	r5, r7
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8013cf8:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8013f3c <lv_btnmatrix_set_map.part.0+0x254>
    btnm->row_cnt = 1;
 8013cfc:	8643      	strh	r3, [r0, #50]	; 0x32
    while(map[i] && map[i][0] != '\0') {
 8013cfe:	b2bb      	uxth	r3, r7
 8013d00:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8013d04:	b108      	cbz	r0, 8013d0a <lv_btnmatrix_set_map.part.0+0x22>
 8013d06:	7803      	ldrb	r3, [r0, #0]
 8013d08:	b9a3      	cbnz	r3, 8013d34 <lv_btnmatrix_set_map.part.0+0x4c>
        }
        i++;
    }

    /*Do not allocate memory for the same amount of buttons*/
    if(btn_cnt == btnm->btn_cnt) return;
 8013d0a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013d0c:	42ab      	cmp	r3, r5
 8013d0e:	d02c      	beq.n	8013d6a <lv_btnmatrix_set_map.part.0+0x82>

    if(btnm->button_areas != NULL) {
 8013d10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013d12:	b118      	cbz	r0, 8013d1c <lv_btnmatrix_set_map.part.0+0x34>
        lv_mem_free(btnm->button_areas);
 8013d14:	f7fe fd1e 	bl	8012754 <lv_mem_free>
        btnm->button_areas = NULL;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	62a3      	str	r3, [r4, #40]	; 0x28
    }
    if(btnm->ctrl_bits != NULL) {
 8013d1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013d1e:	b118      	cbz	r0, 8013d28 <lv_btnmatrix_set_map.part.0+0x40>
        lv_mem_free(btnm->ctrl_bits);
 8013d20:	f7fe fd18 	bl	8012754 <lv_mem_free>
        btnm->ctrl_bits = NULL;
 8013d24:	2300      	movs	r3, #0
 8013d26:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    btnm->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 8013d28:	00e8      	lsls	r0, r5, #3
 8013d2a:	f7fe fcf5 	bl	8012718 <lv_mem_alloc>
 8013d2e:	62a0      	str	r0, [r4, #40]	; 0x28
    LV_ASSERT_MALLOC(btnm->button_areas);
 8013d30:	b960      	cbnz	r0, 8013d4c <lv_btnmatrix_set_map.part.0+0x64>
 8013d32:	e7fe      	b.n	8013d32 <lv_btnmatrix_set_map.part.0+0x4a>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8013d34:	4641      	mov	r1, r8
 8013d36:	f006 fd10 	bl	801a75a <strcmp>
 8013d3a:	b118      	cbz	r0, 8013d44 <lv_btnmatrix_set_map.part.0+0x5c>
            btn_cnt++;
 8013d3c:	3501      	adds	r5, #1
 8013d3e:	b2ad      	uxth	r5, r5
        i++;
 8013d40:	3701      	adds	r7, #1
 8013d42:	e7dc      	b.n	8013cfe <lv_btnmatrix_set_map.part.0+0x16>
            btnm->row_cnt++;
 8013d44:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013d46:	3301      	adds	r3, #1
 8013d48:	8663      	strh	r3, [r4, #50]	; 0x32
 8013d4a:	e7f9      	b.n	8013d40 <lv_btnmatrix_set_map.part.0+0x58>
    btnm->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 8013d4c:	0068      	lsls	r0, r5, #1
 8013d4e:	f7fe fce3 	bl	8012718 <lv_mem_alloc>
 8013d52:	62e0      	str	r0, [r4, #44]	; 0x2c
    LV_ASSERT_MALLOC(btnm->ctrl_bits);
 8013d54:	b900      	cbnz	r0, 8013d58 <lv_btnmatrix_set_map.part.0+0x70>
 8013d56:	e7fe      	b.n	8013d56 <lv_btnmatrix_set_map.part.0+0x6e>
    if(btnm->button_areas == NULL || btnm->ctrl_bits == NULL) btn_cnt = 0;
 8013d58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    memset(dst, 0x00, len);
 8013d5a:	2100      	movs	r1, #0
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	bf08      	it	eq
 8013d60:	2500      	moveq	r5, #0
 8013d62:	006a      	lsls	r2, r5, #1
 8013d64:	f006 fd10 	bl	801a788 <memset>

    lv_memset_00(btnm->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);

    btnm->btn_cnt = btn_cnt;
 8013d68:	8625      	strh	r5, [r4, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8013d6a:	2216      	movs	r2, #22
 8013d6c:	2100      	movs	r1, #0
 8013d6e:	4620      	mov	r0, r4
    btnm->map_p = map;
 8013d70:	6266      	str	r6, [r4, #36]	; 0x24
 8013d72:	f009 feb9 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013d76:	2212      	movs	r2, #18
    return (lv_base_dir_t)v.num;
 8013d78:	b2c3      	uxtb	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013d7a:	2100      	movs	r1, #0
 8013d7c:	4620      	mov	r0, r4
    for(row = 0; row < btnm->row_cnt; row++) {
 8013d7e:	f04f 0900 	mov.w	r9, #0
    return (lv_base_dir_t)v.num;
 8013d82:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013d84:	f009 feb0 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013d88:	2210      	movs	r2, #16
 8013d8a:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013d8c:	900e      	str	r0, [sp, #56]	; 0x38
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013d8e:	4620      	mov	r0, r4
 8013d90:	f009 feaa 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8013d94:	2214      	movs	r2, #20
 8013d96:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013d98:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8013d9a:	4620      	mov	r0, r4
    uint32_t txt_tot_i = 0; /*Act. index in the str map*/
 8013d9c:	46ca      	mov	sl, r9
 8013d9e:	f009 fea3 	bl	801dae8 <lv_obj_get_style_prop>
 8013da2:	4607      	mov	r7, r0
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 8013da4:	4620      	mov	r0, r4
 8013da6:	fa1f fb8b 	uxth.w	fp, fp
 8013daa:	f012 f9fc 	bl	80261a6 <lv_obj_get_style_pad_column.constprop.0>
 8013dae:	9007      	str	r0, [sp, #28]
    lv_coord_t max_w            = lv_obj_get_content_width(obj);
 8013db0:	4620      	mov	r0, r4
 8013db2:	f008 fd7f 	bl	801c8b4 <lv_obj_get_content_width>
 8013db6:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t max_h            = lv_obj_get_content_height(obj);
 8013db8:	4620      	mov	r0, r4
 8013dba:	f008 fd91 	bl	801c8e0 <lv_obj_get_content_height>
    lv_coord_t max_h_no_gap = max_h - (prow * (btnm->row_cnt - 1));
 8013dbe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    for(row = 0; row < btnm->row_cnt; row++) {
 8013dc0:	f8cd 9014 	str.w	r9, [sp, #20]
    lv_coord_t max_h_no_gap = max_h - (prow * (btnm->row_cnt - 1));
 8013dc4:	3b01      	subs	r3, #1
 8013dc6:	fb13 f307 	smulbb	r3, r3, r7
 8013dca:	1ac0      	subs	r0, r0, r3
 8013dcc:	b203      	sxth	r3, r0
 8013dce:	930a      	str	r3, [sp, #40]	; 0x28
 8013dd0:	b2bb      	uxth	r3, r7
 8013dd2:	930d      	str	r3, [sp, #52]	; 0x34
    for(row = 0; row < btnm->row_cnt; row++) {
 8013dd4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013dd6:	9a05      	ldr	r2, [sp, #20]
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d308      	bcc.n	8013dee <lv_btnmatrix_set_map.part.0+0x106>
    lv_obj_refresh_ext_draw_size(obj);
 8013ddc:	4620      	mov	r0, r4
 8013dde:	f008 fb8f 	bl	801c500 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8013de2:	4620      	mov	r0, r4
}
 8013de4:	b013      	add	sp, #76	; 0x4c
 8013de6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(obj);
 8013dea:	f008 bf57 	b.w	801cc9c <lv_obj_invalidate>
 8013dee:	2700      	movs	r7, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
 8013df0:	9702      	str	r7, [sp, #8]
 8013df2:	e016      	b.n	8013e22 <lv_btnmatrix_set_map.part.0+0x13a>
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8013df4:	4951      	ldr	r1, [pc, #324]	; (8013f3c <lv_btnmatrix_set_map.part.0+0x254>)
 8013df6:	f006 fcb0 	bl	801a75a <strcmp>
 8013dfa:	b1c8      	cbz	r0, 8013e30 <lv_btnmatrix_set_map.part.0+0x148>
 8013dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8013e00:	1c7a      	adds	r2, r7, #1
 8013e02:	781b      	ldrb	r3, [r3, #0]
 8013e04:	b1a3      	cbz	r3, 8013e30 <lv_btnmatrix_set_map.part.0+0x148>
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 8013e06:	4455      	add	r5, sl
 8013e08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013e0a:	9902      	ldr	r1, [sp, #8]
 8013e0c:	4617      	mov	r7, r2
 * @param ctrl_bits least significant 3 bits used (1..7 valid values)
 * @return the width of the button in units
 */
static uint8_t get_button_width(lv_btnmatrix_ctrl_t ctrl_bits)
{
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 8013e0e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 8013e12:	f003 0307 	and.w	r3, r3, #7
 8013e16:	2b01      	cmp	r3, #1
 8013e18:	bf2c      	ite	cs
 8013e1a:	18c9      	addcs	r1, r1, r3
 8013e1c:	3101      	addcc	r1, #1
 8013e1e:	b28b      	uxth	r3, r1
 8013e20:	9302      	str	r3, [sp, #8]
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8013e22:	b2bd      	uxth	r5, r7
 8013e24:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8013e28:	eb06 0885 	add.w	r8, r6, r5, lsl #2
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	d1e1      	bne.n	8013df4 <lv_btnmatrix_set_map.part.0+0x10c>
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8013e30:	9a05      	ldr	r2, [sp, #20]
 8013e32:	b2bb      	uxth	r3, r7
 8013e34:	3201      	adds	r2, #1
 8013e36:	9205      	str	r2, [sp, #20]
        if(btn_cnt == 0) {
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d076      	beq.n	8013f2a <lv_btnmatrix_set_map.part.0+0x242>
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8013e3c:	990a      	ldr	r1, [sp, #40]	; 0x28
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 8013e3e:	3b01      	subs	r3, #1
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / btnm->row_cnt + row * prow;
 8013e40:	8e60      	ldrh	r0, [r4, #50]	; 0x32
        if(max_w_no_gap < 0) max_w_no_gap = 0;
 8013e42:	2700      	movs	r7, #0
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8013e44:	4449      	add	r1, r9
 8013e46:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8013e4a:	fbb1 f1f0 	udiv	r1, r1, r0
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / btnm->row_cnt + row * prow;
 8013e4e:	fbb9 f2f0 	udiv	r2, r9, r0
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8013e52:	f10b 30ff 	add.w	r0, fp, #4294967295
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / btnm->row_cnt + row * prow;
 8013e56:	445a      	add	r2, fp
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8013e58:	4401      	add	r1, r0
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / btnm->row_cnt + row * prow;
 8013e5a:	b212      	sxth	r2, r2
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8013e5c:	b209      	sxth	r1, r1
 8013e5e:	910c      	str	r1, [sp, #48]	; 0x30
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 8013e60:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8013e64:	9106      	str	r1, [sp, #24]
 8013e66:	9907      	ldr	r1, [sp, #28]
 8013e68:	fb13 f301 	smulbb	r3, r3, r1
 8013e6c:	9906      	ldr	r1, [sp, #24]
 8013e6e:	1acb      	subs	r3, r1, r3
        if(max_w_no_gap < 0) max_w_no_gap = 0;
 8013e70:	b21b      	sxth	r3, r3
 8013e72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013e76:	9308      	str	r3, [sp, #32]
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8013e78:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013e7c:	9310      	str	r3, [sp, #64]	; 0x40
            btn_x1 += pleft;
 8013e7e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
        uint32_t row_unit_cnt = 0;  /*The current unit position in the row*/
 8013e82:	e9cd 7703 	strd	r7, r7, [sp, #12]
            btn_x1 += pleft;
 8013e86:	9309      	str	r3, [sp, #36]	; 0x24
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8013e88:	9903      	ldr	r1, [sp, #12]
 8013e8a:	9b08      	ldr	r3, [sp, #32]
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8013e8c:	9803      	ldr	r0, [sp, #12]
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8013e8e:	434b      	muls	r3, r1
 8013e90:	9902      	ldr	r1, [sp, #8]
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 8013e92:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8013e96:	9211      	str	r2, [sp, #68]	; 0x44
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8013e98:	fbb3 f3f1 	udiv	r3, r3, r1
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 8013e9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8013e9e:	443b      	add	r3, r7
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 8013ea0:	f831 1008 	ldrh.w	r1, [r1, r8]
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8013ea4:	b29b      	uxth	r3, r3
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 8013ea6:	f001 0107 	and.w	r1, r1, #7
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8013eaa:	2901      	cmp	r1, #1
 8013eac:	bf2c      	ite	cs
 8013eae:	1840      	addcs	r0, r0, r1
 8013eb0:	3001      	addcc	r0, #1
 8013eb2:	9908      	ldr	r1, [sp, #32]
 8013eb4:	9003      	str	r0, [sp, #12]
 8013eb6:	4348      	muls	r0, r1
 8013eb8:	9902      	ldr	r1, [sp, #8]
 8013eba:	fbb0 f0f1 	udiv	r0, r0, r1
 8013ebe:	1e79      	subs	r1, r7, #1
 8013ec0:	4408      	add	r0, r1
            if(base_dir == LV_BASE_DIR_RTL) {
 8013ec2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013ec4:	2901      	cmp	r1, #1
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8013ec6:	b280      	uxth	r0, r0
                btn_x1 = max_w - btn_x1;
 8013ec8:	bf0d      	iteet	eq
 8013eca:	9906      	ldreq	r1, [sp, #24]
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8013ecc:	b219      	sxthne	r1, r3
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8013ece:	b203      	sxthne	r3, r0
                btn_x1 = max_w - btn_x1;
 8013ed0:	1a08      	subeq	r0, r1, r0
 8013ed2:	bf02      	ittt	eq
 8013ed4:	b201      	sxtheq	r1, r0
                btn_x2 = max_w - btn_x2;
 8013ed6:	9806      	ldreq	r0, [sp, #24]
 8013ed8:	1ac3      	subeq	r3, r0, r3
            btn_x1 += pleft;
 8013eda:	9809      	ldr	r0, [sp, #36]	; 0x24
                btn_x2 = max_w - btn_x2;
 8013edc:	bf08      	it	eq
 8013ede:	b21b      	sxtheq	r3, r3
            btn_x1 += pleft;
 8013ee0:	4401      	add	r1, r0
            btn_x2 += pleft;
 8013ee2:	4403      	add	r3, r0
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 8013ee4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013ee6:	b209      	sxth	r1, r1
 8013ee8:	f8cd c000 	str.w	ip, [sp]
 8013eec:	b21b      	sxth	r3, r3
 8013eee:	eb00 0088 	add.w	r0, r0, r8, lsl #2
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8013ef2:	f108 0802 	add.w	r8, r8, #2
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 8013ef6:	f010 f9b1 	bl	802425c <lv_area_set>
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8013efa:	9b04      	ldr	r3, [sp, #16]
 8013efc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013efe:	3301      	adds	r3, #1
 8013f00:	9304      	str	r3, [sp, #16]
 8013f02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f04:	441f      	add	r7, r3
 8013f06:	9b04      	ldr	r3, [sp, #16]
 8013f08:	42ab      	cmp	r3, r5
 8013f0a:	b2bf      	uxth	r7, r7
 8013f0c:	d3bc      	bcc.n	8013e88 <lv_btnmatrix_set_map.part.0+0x1a0>
 8013f0e:	2d00      	cmp	r5, #0
 8013f10:	f105 33ff 	add.w	r3, r5, #4294967295
 8013f14:	f10a 0201 	add.w	r2, sl, #1
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 8013f18:	f105 0501 	add.w	r5, r5, #1
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8013f1c:	bf08      	it	eq
 8013f1e:	2300      	moveq	r3, #0
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 8013f20:	eb06 0685 	add.w	r6, r6, r5, lsl #2
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8013f24:	eb03 0a02 	add.w	sl, r3, r2
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 8013f28:	e000      	b.n	8013f2c <lv_btnmatrix_set_map.part.0+0x244>
            map_row = &map_row[btn_cnt + 1];       /*Set the map to the next row*/
 8013f2a:	3604      	adds	r6, #4
    for(row = 0; row < btnm->row_cnt; row++) {
 8013f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f2e:	4499      	add	r9, r3
 8013f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f32:	445b      	add	r3, fp
 8013f34:	fa1f fb83 	uxth.w	fp, r3
 8013f38:	e74c      	b.n	8013dd4 <lv_btnmatrix_set_map.part.0+0xec>
 8013f3a:	bf00      	nop
 8013f3c:	08029fb1 	.word	0x08029fb1

08013f40 <lv_btnmatrix_constructor>:
    btnm->btn_id_sel     = LV_BTNMATRIX_BTN_NONE;
 8013f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
    btnm->map_p          = NULL;
 8013f44:	2300      	movs	r3, #0
{
 8013f46:	4608      	mov	r0, r1
    btnm->btn_id_sel     = LV_BTNMATRIX_BTN_NONE;
 8013f48:	868a      	strh	r2, [r1, #52]	; 0x34
    btnm->one_check      = 0;
 8013f4a:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
 8013f4e:	f363 0200 	bfi	r2, r3, #0, #1
    btnm->button_areas   = NULL;
 8013f52:	e9c1 3309 	strd	r3, r3, [r1, #36]	; 0x24
    btnm->btn_cnt        = 0;
 8013f56:	e9c1 330b 	strd	r3, r3, [r1, #44]	; 0x2c
    btnm->one_check      = 0;
 8013f5a:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    if(map == NULL) return;
 8013f5e:	4901      	ldr	r1, [pc, #4]	; (8013f64 <lv_btnmatrix_constructor+0x24>)
 8013f60:	f7ff bec2 	b.w	8013ce8 <lv_btnmatrix_set_map.part.0>
 8013f64:	2400010c 	.word	0x2400010c

08013f68 <draw_main>:
{
 8013f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f6c:	b0d1      	sub	sp, #324	; 0x144
 8013f6e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8013f70:	f007 f973 	bl	801b25a <lv_event_get_target>
    if(btnm->btn_cnt == 0) return;
 8013f74:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    lv_obj_t * obj = lv_event_get_target(e);
 8013f76:	4604      	mov	r4, r0
    if(btnm->btn_cnt == 0) return;
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d068      	beq.n	801404e <draw_main+0xe6>
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8013f7c:	4628      	mov	r0, r5
        btn_area.x1 += area_obj.x1;
 8013f7e:	ad10      	add	r5, sp, #64	; 0x40
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8013f80:	f007 f9c4 	bl	801b30c <lv_event_get_draw_ctx>
    obj->skip_trans = 1;
 8013f84:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    lv_obj_get_coords(obj, &area_obj);
 8013f88:	a90e      	add	r1, sp, #56	; 0x38
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8013f8a:	9005      	str	r0, [sp, #20]
    obj->skip_trans = 1;
 8013f8c:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_get_coords(obj, &area_obj);
 8013f90:	4620      	mov	r0, r4
    obj->skip_trans = 1;
 8013f92:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_obj_get_coords(obj, &area_obj);
 8013f96:	f008 fc31 	bl	801c7fc <lv_obj_get_coords>
    obj->state = LV_STATE_DEFAULT;
 8013f9a:	6a22      	ldr	r2, [r4, #32]
 8013f9c:	4bbd      	ldr	r3, [pc, #756]	; (8014294 <draw_main+0x32c>)
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 8013f9e:	a830      	add	r0, sp, #192	; 0xc0
    lv_state_t state_ori = obj->state;
 8013fa0:	f8b4 a020 	ldrh.w	sl, [r4, #32]
    obj->state = LV_STATE_DEFAULT;
 8013fa4:	4013      	ands	r3, r2
 8013fa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013faa:	6223      	str	r3, [r4, #32]
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 8013fac:	f7f4 fcfa 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&draw_label_dsc_def);
 8013fb0:	a81a      	add	r0, sp, #104	; 0x68
 8013fb2:	f7f3 fead 	bl	8007d10 <lv_draw_label_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_def);
 8013fb6:	aa30      	add	r2, sp, #192	; 0xc0
 8013fb8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8013fbc:	4620      	mov	r0, r4
 8013fbe:	f007 ff9b 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_def);
 8013fc2:	aa1a      	add	r2, sp, #104	; 0x68
 8013fc4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8013fc8:	4620      	mov	r0, r4
 8013fca:	f008 f8e4 	bl	801c196 <lv_obj_init_draw_label_dsc>
    obj->skip_trans = 0;
 8013fce:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013fd2:	2210      	movs	r2, #16
 8013fd4:	2100      	movs	r1, #0
 8013fd6:	f36f 0382 	bfc	r3, #2, #1
 8013fda:	4620      	mov	r0, r4
    obj->state = state_ori;
 8013fdc:	f8a4 a020 	strh.w	sl, [r4, #32]
    obj->skip_trans = 0;
 8013fe0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8013fe4:	f009 fd80 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8013fe8:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 8013fea:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8013fec:	2100      	movs	r1, #0
 8013fee:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8013ff0:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8013ff2:	f009 fd79 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8013ff6:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013ff8:	2212      	movs	r2, #18
 8013ffa:	2100      	movs	r1, #0
 8013ffc:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8013ffe:	930a      	str	r3, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014000:	f009 fd72 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8014004:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014006:	2213      	movs	r2, #19
 8014008:	2100      	movs	r1, #0
 801400a:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801400c:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801400e:	f009 fd6b 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8014012:	b203      	sxth	r3, r0
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8014014:	9905      	ldr	r1, [sp, #20]
 8014016:	a83e      	add	r0, sp, #248	; 0xf8
 8014018:	9308      	str	r3, [sp, #32]
 801401a:	f008 fa63 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 801401e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
    part_draw_dsc.rect_dsc = &draw_rect_dsc_act;
 8014022:	aa22      	add	r2, sp, #136	; 0x88
    part_draw_dsc.part = LV_PART_ITEMS;
 8014024:	934b      	str	r3, [sp, #300]	; 0x12c
    part_draw_dsc.class_p = MY_CLASS;
 8014026:	4b9c      	ldr	r3, [pc, #624]	; (8014298 <draw_main+0x330>)
    part_draw_dsc.rect_dsc = &draw_rect_dsc_act;
 8014028:	9242      	str	r2, [sp, #264]	; 0x108
    part_draw_dsc.label_dsc = &draw_label_dsc_act;
 801402a:	aa12      	add	r2, sp, #72	; 0x48
    part_draw_dsc.class_p = MY_CLASS;
 801402c:	933f      	str	r3, [sp, #252]	; 0xfc
    part_draw_dsc.type = LV_BTNMATRIX_DRAW_PART_BTN;
 801402e:	2300      	movs	r3, #0
    part_draw_dsc.label_dsc = &draw_label_dsc_act;
 8014030:	9243      	str	r2, [sp, #268]	; 0x10c
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 8014032:	4698      	mov	r8, r3
    uint16_t txt_i = 0;
 8014034:	469b      	mov	fp, r3
    part_draw_dsc.type = LV_BTNMATRIX_DRAW_PART_BTN;
 8014036:	9340      	str	r3, [sp, #256]	; 0x100
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 8014038:	fa1f f788 	uxth.w	r7, r8
 801403c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801403e:	42bb      	cmp	r3, r7
 8014040:	d808      	bhi.n	8014054 <draw_main+0xec>
    obj->skip_trans = 0;
 8014042:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8014046:	f36f 0382 	bfc	r3, #2, #1
 801404a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 801404e:	b051      	add	sp, #324	; 0x144
 8014050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 8014054:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8014058:	4990      	ldr	r1, [pc, #576]	; (801429c <draw_main+0x334>)
 801405a:	9307      	str	r3, [sp, #28]
 801405c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801405e:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014062:	f006 fb7a 	bl	801a75a <strcmp>
            txt_i++;
 8014066:	f10b 0301 	add.w	r3, fp, #1
 801406a:	fa1f fb83 	uxth.w	fp, r3
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 801406e:	2800      	cmp	r0, #0
 8014070:	d0f0      	beq.n	8014054 <draw_main+0xec>
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 8014072:	fa1f f988 	uxth.w	r9, r8
 8014076:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return w != 0 ? w : 1;
}

static bool button_is_hidden(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8014078:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 801407c:	06de      	lsls	r6, r3, #27
 801407e:	f100 8106 	bmi.w	801428e <draw_main+0x326>
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 8014082:	0658      	lsls	r0, r3, #25
        if(button_get_checked(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
 8014084:	f3c3 2600 	ubfx	r6, r3, #8, #1
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 8014088:	f140 810a 	bpl.w	80142a0 <draw_main+0x338>
 801408c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
        lv_area_copy(&btn_area, &btnm->button_areas[btn_i]);
 8014090:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014092:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
        btn_area.x1 += area_obj.x1;
 8014096:	f833 3039 	ldrh.w	r3, [r3, r9, lsl #3]
    dest->y1 = src->y1;
 801409a:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
    dest->x2 = src->x2;
 801409e:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
    dest->y2 = src->y2;
 80140a2:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 80140a6:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80140aa:	4413      	add	r3, r2
        btn_area.x2 += area_obj.x1;
 80140ac:	443a      	add	r2, r7
        btn_area.x1 += area_obj.x1;
 80140ae:	802b      	strh	r3, [r5, #0]
        btn_area.y1 += area_obj.y1;
 80140b0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
        btn_area.x2 += area_obj.x1;
 80140b4:	80aa      	strh	r2, [r5, #4]
        btn_area.y1 += area_obj.y1;
 80140b6:	4419      	add	r1, r3
        btn_area.y2 += area_obj.y1;
 80140b8:	4403      	add	r3, r0
        btn_area.y1 += area_obj.y1;
 80140ba:	8069      	strh	r1, [r5, #2]
        btn_area.y2 += area_obj.y1;
 80140bc:	80eb      	strh	r3, [r5, #6]
        if(btn_state == LV_STATE_DEFAULT) {
 80140be:	2e00      	cmp	r6, #0
 80140c0:	f040 8107 	bne.w	80142d2 <draw_main+0x36a>
    return memcpy(dst, src, len);
 80140c4:	2238      	movs	r2, #56	; 0x38
 80140c6:	a930      	add	r1, sp, #192	; 0xc0
 80140c8:	a822      	add	r0, sp, #136	; 0x88
 80140ca:	f006 fb52 	bl	801a772 <memcpy>
 80140ce:	2220      	movs	r2, #32
 80140d0:	a91a      	add	r1, sp, #104	; 0x68
 80140d2:	a812      	add	r0, sp, #72	; 0x48
 80140d4:	f006 fb4d 	bl	801a772 <memcpy>
        bool recolor = button_is_recolor(btnm->ctrl_bits[btn_i]);
 80140d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80140da:	4620      	mov	r0, r4
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 80140dc:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECKED) ? true : false;
}

static bool button_is_recolor(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_RECOLOR) ? true : false;
 80140e0:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
        part_draw_dsc.draw_area = &btn_area;
 80140e4:	9541      	str	r5, [sp, #260]	; 0x104
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 80140e6:	0511      	lsls	r1, r2, #20
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80140e8:	aa3e      	add	r2, sp, #248	; 0xf8
 80140ea:	f04f 011a 	mov.w	r1, #26
        part_draw_dsc.id = btn_i;
 80140ee:	f8cd 9130 	str.w	r9, [sp, #304]	; 0x130
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 80140f2:	bf4c      	ite	mi
 80140f4:	f043 0301 	orrmi.w	r3, r3, #1
        else draw_label_dsc_act.flag &= ~LV_TEXT_FLAG_RECOLOR;
 80140f8:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
 80140fc:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8014100:	f7f0 fb20 	bl	8004744 <lv_event_send>
        if(draw_rect_dsc_act.border_side & LV_BORDER_SIDE_INTERNAL) {
 8014104:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
 8014108:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801410c:	2a0f      	cmp	r2, #15
 801410e:	d948      	bls.n	80141a2 <draw_main+0x23a>
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 8014110:	220f      	movs	r2, #15
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 8014112:	9909      	ldr	r1, [sp, #36]	; 0x24
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 8014114:	9808      	ldr	r0, [sp, #32]
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 8014116:	f362 0345 	bfi	r3, r2, #1, #5
 801411a:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801411e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8014122:	f9b5 3000 	ldrsh.w	r3, [r5]
 8014126:	440a      	add	r2, r1
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 8014128:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801412c:	4293      	cmp	r3, r2
 801412e:	bf14      	ite	ne
 8014130:	230f      	movne	r3, #15
 8014132:	230b      	moveq	r3, #11
 8014134:	f89d 20ab 	ldrb.w	r2, [sp, #171]	; 0xab
 8014138:	f363 0245 	bfi	r2, r3, #1, #5
 801413c:	f88d 20ab 	strb.w	r2, [sp, #171]	; 0xab
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 8014140:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8014144:	1a12      	subs	r2, r2, r0
 8014146:	4291      	cmp	r1, r2
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 8014148:	990b      	ldr	r1, [sp, #44]	; 0x2c
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 801414a:	bf01      	itttt	eq
 801414c:	f89d 20ab 	ldrbeq.w	r2, [sp, #171]	; 0xab
 8014150:	f003 0317 	andeq.w	r3, r3, #23
 8014154:	f363 0245 	bfieq	r2, r3, #1, #5
 8014158:	f88d 20ab 	strbeq.w	r2, [sp, #171]	; 0xab
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 801415c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8014160:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014164:	440b      	add	r3, r1
 8014166:	429a      	cmp	r2, r3
 8014168:	d109      	bne.n	801417e <draw_main+0x216>
 801416a:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
 801416e:	f3c3 0244 	ubfx	r2, r3, #1, #5
 8014172:	f002 021d 	and.w	r2, r2, #29
 8014176:	f362 0345 	bfi	r3, r2, #1, #5
 801417a:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
            if(btn_area.y2 == obj->coords.y2 - pbottom) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_BOTTOM;
 801417e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8014182:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014184:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8014188:	1a5b      	subs	r3, r3, r1
 801418a:	429a      	cmp	r2, r3
 801418c:	d109      	bne.n	80141a2 <draw_main+0x23a>
 801418e:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
 8014192:	f3c3 0244 	ubfx	r2, r3, #1, #5
 8014196:	f002 021e 	and.w	r2, r2, #30
 801419a:	f362 0345 	bfi	r3, r2, #1, #5
 801419e:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80141a2:	88ef      	ldrh	r7, [r5, #6]
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 80141a4:	f016 0620 	ands.w	r6, r6, #32
 80141a8:	886b      	ldrh	r3, [r5, #2]
 80141aa:	f107 0701 	add.w	r7, r7, #1
 80141ae:	9306      	str	r3, [sp, #24]
 80141b0:	b2bf      	uxth	r7, r7
 80141b2:	d008      	beq.n	80141c6 <draw_main+0x25e>
 80141b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80141b6:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 80141ba:	055a      	lsls	r2, r3, #21
            btn_area.y1 -= btn_height;
 80141bc:	bf42      	ittt	mi
 80141be:	9b06      	ldrmi	r3, [sp, #24]
 80141c0:	ebc7 0343 	rsbmi	r3, r7, r3, lsl #1
 80141c4:	806b      	strhmi	r3, [r5, #2]
        lv_draw_rect(draw_ctx, &draw_rect_dsc_act, &btn_area);
 80141c6:	462a      	mov	r2, r5
 80141c8:	a922      	add	r1, sp, #136	; 0x88
 80141ca:	9805      	ldr	r0, [sp, #20]
 80141cc:	f00b f91f 	bl	801f40e <lv_draw_rect>
        const char * txt = btnm->map_p[txt_i];
 80141d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80141d2:	9a07      	ldr	r2, [sp, #28]
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 80141d4:	a80d      	add	r0, sp, #52	; 0x34
        const char * txt = btnm->map_p[txt_i];
 80141d6:	5899      	ldr	r1, [r3, r2]
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 80141d8:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80141dc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80141e0:	9302      	str	r3, [sp, #8]
 80141e2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80141e6:	9107      	str	r1, [sp, #28]
 80141e8:	3301      	adds	r3, #1
 80141ea:	1a9b      	subs	r3, r3, r2
 80141ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80141ee:	b21b      	sxth	r3, r3
 80141f0:	9301      	str	r3, [sp, #4]
 80141f2:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80141f6:	9300      	str	r3, [sp, #0]
 80141f8:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 80141fc:	f011 fb50 	bl	80258a0 <lv_txt_get_size>
 8014200:	88ab      	ldrh	r3, [r5, #4]
 8014202:	f8b5 c000 	ldrh.w	ip, [r5]
 8014206:	3301      	adds	r3, #1
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 8014208:	f9bd e034 	ldrsh.w	lr, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801420c:	886a      	ldrh	r2, [r5, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801420e:	eba3 030c 	sub.w	r3, r3, ip
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 8014212:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8014216:	9907      	ldr	r1, [sp, #28]
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 8014218:	b21b      	sxth	r3, r3
 801421a:	eba3 030e 	sub.w	r3, r3, lr
 801421e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8014222:	eb0c 0c63 	add.w	ip, ip, r3, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014226:	88eb      	ldrh	r3, [r5, #6]
 8014228:	3301      	adds	r3, #1
 801422a:	fa1f fc8c 	uxth.w	ip, ip
 801422e:	1a9b      	subs	r3, r3, r2
 8014230:	f8a5 c000 	strh.w	ip, [r5]
        btn_area.x2 = btn_area.x1 + txt_size.x;
 8014234:	44f4      	add	ip, lr
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 8014236:	b21b      	sxth	r3, r3
        btn_area.x2 = btn_area.x1 + txt_size.x;
 8014238:	f8a5 c004 	strh.w	ip, [r5, #4]
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 801423c:	1a1b      	subs	r3, r3, r0
 801423e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8014242:	eb02 0263 	add.w	r2, r2, r3, asr #1
 8014246:	b292      	uxth	r2, r2
        btn_area.y2 = btn_area.y1 + txt_size.y;
 8014248:	4410      	add	r0, r2
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 801424a:	806a      	strh	r2, [r5, #2]
        btn_area.y2 = btn_area.y1 + txt_size.y;
 801424c:	b280      	uxth	r0, r0
 801424e:	80e8      	strh	r0, [r5, #6]
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8014250:	b186      	cbz	r6, 8014274 <draw_main+0x30c>
 8014252:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014254:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8014258:	055b      	lsls	r3, r3, #21
 801425a:	d50b      	bpl.n	8014274 <draw_main+0x30c>
 801425c:	9b06      	ldr	r3, [sp, #24]
 801425e:	1aff      	subs	r7, r7, r3
            btn_area.y1 -= btn_height / 2;
 8014260:	f3c7 33c0 	ubfx	r3, r7, #15, #1
 8014264:	fa03 f787 	sxtah	r7, r3, r7
 8014268:	f3c7 074f 	ubfx	r7, r7, #1, #16
 801426c:	1bd2      	subs	r2, r2, r7
            btn_area.y2 -= btn_height / 2;
 801426e:	1bc0      	subs	r0, r0, r7
            btn_area.y1 -= btn_height / 2;
 8014270:	806a      	strh	r2, [r5, #2]
            btn_area.y2 -= btn_height / 2;
 8014272:	80e8      	strh	r0, [r5, #6]
        lv_draw_label(draw_ctx, &draw_label_dsc_act, &btn_area, txt, NULL);
 8014274:	2300      	movs	r3, #0
 8014276:	462a      	mov	r2, r5
 8014278:	9805      	ldr	r0, [sp, #20]
 801427a:	9300      	str	r3, [sp, #0]
 801427c:	460b      	mov	r3, r1
 801427e:	a912      	add	r1, sp, #72	; 0x48
 8014280:	f7f3 fd5e 	bl	8007d40 <lv_draw_label>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8014284:	aa3e      	add	r2, sp, #248	; 0xf8
 8014286:	211b      	movs	r1, #27
 8014288:	4620      	mov	r0, r4
 801428a:	f7f0 fa5b 	bl	8004744 <lv_event_send>
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 801428e:	f108 0801 	add.w	r8, r8, #1
 8014292:	e6d1      	b.n	8014038 <draw_main+0xd0>
 8014294:	fffb0000 	.word	0xfffb0000
 8014298:	080299b8 	.word	0x080299b8
 801429c:	08029fb1 	.word	0x08029fb1
        else if(btn_i == btnm->btn_id_sel) {
 80142a0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80142a2:	42bb      	cmp	r3, r7
 80142a4:	f47f aef4 	bne.w	8014090 <draw_main+0x128>
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 80142a8:	f01a 0f20 	tst.w	sl, #32
 80142ac:	bf18      	it	ne
 80142ae:	f046 0620 	orrne.w	r6, r6, #32
            if(state_ori & LV_STATE_FOCUSED) btn_state |= LV_STATE_FOCUSED;
 80142b2:	f01a 0f02 	tst.w	sl, #2
 80142b6:	bf18      	it	ne
 80142b8:	f046 0602 	orrne.w	r6, r6, #2
            if(state_ori & LV_STATE_FOCUS_KEY) btn_state |= LV_STATE_FOCUS_KEY;
 80142bc:	f01a 0f04 	tst.w	sl, #4
 80142c0:	bf18      	it	ne
 80142c2:	f046 0604 	orrne.w	r6, r6, #4
            if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
 80142c6:	f01a 0f08 	tst.w	sl, #8
 80142ca:	bf18      	it	ne
 80142cc:	f046 0608 	orrne.w	r6, r6, #8
 80142d0:	e6de      	b.n	8014090 <draw_main+0x128>
            obj->skip_trans = 1;
 80142d2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 80142d6:	a822      	add	r0, sp, #136	; 0x88
            obj->state = btn_state;
 80142d8:	8426      	strh	r6, [r4, #32]
            obj->skip_trans = 1;
 80142da:	f043 0304 	orr.w	r3, r3, #4
 80142de:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 80142e2:	f7f4 fb5f 	bl	80089a4 <lv_draw_rect_dsc_init>
            lv_draw_label_dsc_init(&draw_label_dsc_act);
 80142e6:	a812      	add	r0, sp, #72	; 0x48
 80142e8:	f7f3 fd12 	bl	8007d10 <lv_draw_label_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_act);
 80142ec:	aa22      	add	r2, sp, #136	; 0x88
 80142ee:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80142f2:	4620      	mov	r0, r4
 80142f4:	f007 fe00 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
            lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_act);
 80142f8:	aa12      	add	r2, sp, #72	; 0x48
 80142fa:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80142fe:	4620      	mov	r0, r4
 8014300:	f007 ff49 	bl	801c196 <lv_obj_init_draw_label_dsc>
            obj->skip_trans = 0;
 8014304:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
            obj->state = state_ori;
 8014308:	f8a4 a020 	strh.w	sl, [r4, #32]
            obj->skip_trans = 0;
 801430c:	f36f 0382 	bfc	r3, #2, #1
 8014310:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8014314:	e6e0      	b.n	80140d8 <draw_main+0x170>
 8014316:	bf00      	nop

08014318 <lv_btnmatrix_create>:
{
 8014318:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801431a:	4804      	ldr	r0, [pc, #16]	; (801432c <lv_btnmatrix_create+0x14>)
{
 801431c:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801431e:	f7f0 fd7f 	bl	8004e20 <lv_obj_class_create_obj>
 8014322:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8014324:	f007 fd8a 	bl	801be3c <lv_obj_class_init_obj>
}
 8014328:	4620      	mov	r0, r4
 801432a:	bd10      	pop	{r4, pc}
 801432c:	080299b8 	.word	0x080299b8

08014330 <lv_btnmatrix_get_btn_text>:
{
 8014330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 8014334:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8014338:	4605      	mov	r5, r0
 801433a:	460f      	mov	r7, r1
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 801433c:	4299      	cmp	r1, r3
 801433e:	d102      	bne.n	8014346 <lv_btnmatrix_get_btn_text+0x16>
 8014340:	2000      	movs	r0, #0
}
 8014342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(btn_id > btnm->btn_cnt) return NULL;
 8014346:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8014348:	428b      	cmp	r3, r1
 801434a:	d3f9      	bcc.n	8014340 <lv_btnmatrix_get_btn_text+0x10>
 801434c:	2600      	movs	r6, #0
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 801434e:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8014388 <lv_btnmatrix_get_btn_text+0x58>
    uint16_t txt_i = 0;
 8014352:	46b0      	mov	r8, r6
    while(btn_i != btn_id) {
 8014354:	42be      	cmp	r6, r7
 8014356:	d106      	bne.n	8014366 <lv_btnmatrix_get_btn_text+0x36>
    if(btn_i == btnm->btn_cnt) return NULL;
 8014358:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 801435a:	42b3      	cmp	r3, r6
 801435c:	d0f0      	beq.n	8014340 <lv_btnmatrix_get_btn_text+0x10>
    return btnm->map_p[txt_i];
 801435e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014360:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014364:	e7ed      	b.n	8014342 <lv_btnmatrix_get_btn_text+0x12>
        txt_i++;
 8014366:	f108 0401 	add.w	r4, r8, #1
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 801436a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801436c:	4649      	mov	r1, r9
        txt_i++;
 801436e:	b2a4      	uxth	r4, r4
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 8014370:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014374:	f006 f9f1 	bl	801a75a <strcmp>
 8014378:	b910      	cbnz	r0, 8014380 <lv_btnmatrix_get_btn_text+0x50>
 801437a:	f108 0402 	add.w	r4, r8, #2
 801437e:	b2a4      	uxth	r4, r4
 8014380:	3601      	adds	r6, #1
{
 8014382:	46a0      	mov	r8, r4
 8014384:	e7e6      	b.n	8014354 <lv_btnmatrix_get_btn_text+0x24>
 8014386:	bf00      	nop
 8014388:	08029fb1 	.word	0x08029fb1

0801438c <lv_btnmatrix_event>:
{
 801438c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8014390:	48af      	ldr	r0, [pc, #700]	; (8014650 <lv_btnmatrix_event+0x2c4>)
{
 8014392:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8014394:	f006 ff4b 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8014398:	2801      	cmp	r0, #1
 801439a:	d11c      	bne.n	80143d6 <lv_btnmatrix_event+0x4a>
    lv_event_code_t code = lv_event_get_code(e);
 801439c:	4630      	mov	r0, r6
 801439e:	f006 ff60 	bl	801b262 <lv_event_get_code>
 80143a2:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80143a4:	4630      	mov	r0, r6
 80143a6:	f006 ff58 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80143aa:	2d13      	cmp	r5, #19
    lv_obj_t * obj = lv_event_get_target(e);
 80143ac:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80143ae:	d12a      	bne.n	8014406 <lv_btnmatrix_event+0x7a>
 */
static bool has_popovers_in_top_row(lv_obj_t * obj)
{
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;

    if(btnm->row_cnt <= 0) {
 80143b0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80143b2:	b183      	cbz	r3, 80143d6 <lv_btnmatrix_event+0x4a>
        return false;
    }

    const char ** map_row = btnm->map_p;
 80143b4:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
    uint16_t btn_cnt = 0;

    while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 80143b8:	2700      	movs	r7, #0
 80143ba:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8014654 <lv_btnmatrix_event+0x2c8>
 80143be:	b2bd      	uxth	r5, r7
 80143c0:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 80143c4:	b138      	cbz	r0, 80143d6 <lv_btnmatrix_event+0x4a>
 80143c6:	4649      	mov	r1, r9
 80143c8:	f006 f9c7 	bl	801a75a <strcmp>
 80143cc:	b118      	cbz	r0, 80143d6 <lv_btnmatrix_event+0x4a>
 80143ce:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
 80143d2:	781b      	ldrb	r3, [r3, #0]
 80143d4:	b913      	cbnz	r3, 80143dc <lv_btnmatrix_event+0x50>
}
 80143d6:	b003      	add	sp, #12
 80143d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(button_is_popover(btnm->ctrl_bits[btn_cnt])) {
 80143dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80143de:	3701      	adds	r7, #1
    return (ctrl_bits & LV_BTNMATRIX_CTRL_POPOVER) ? true : false;
 80143e0:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
        if(button_is_popover(btnm->ctrl_bits[btn_cnt])) {
 80143e4:	0559      	lsls	r1, r3, #21
 80143e6:	d5ea      	bpl.n	80143be <lv_btnmatrix_event+0x32>
            lv_coord_t s = btnm->row_cnt > 0 ? lv_obj_get_content_height(obj) / btnm->row_cnt : 0;
 80143e8:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 80143ea:	b131      	cbz	r1, 80143fa <lv_btnmatrix_event+0x6e>
 80143ec:	4620      	mov	r0, r4
 80143ee:	f008 fa77 	bl	801c8e0 <lv_obj_get_content_height>
 80143f2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80143f4:	fb90 f1f3 	sdiv	r1, r0, r3
 80143f8:	b209      	sxth	r1, r1
            lv_event_set_ext_draw_size(e, s);
 80143fa:	4630      	mov	r0, r6
}
 80143fc:	b003      	add	sp, #12
 80143fe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_event_set_ext_draw_size(e, s);
 8014402:	f006 bf8a 	b.w	801b31a <lv_event_set_ext_draw_size>
    if(code == LV_EVENT_STYLE_CHANGED) {
 8014406:	2d2a      	cmp	r5, #42	; 0x2a
 8014408:	d105      	bne.n	8014416 <lv_btnmatrix_event+0x8a>
        lv_btnmatrix_set_map(obj, btnm->map_p);
 801440a:	6a61      	ldr	r1, [r4, #36]	; 0x24
}
 801440c:	b003      	add	sp, #12
 801440e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        lv_btnmatrix_set_map(obj, btnm->map_p);
 8014412:	f012 b802 	b.w	802641a <lv_btnmatrix_set_map>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8014416:	2d15      	cmp	r5, #21
 8014418:	d832      	bhi.n	8014480 <lv_btnmatrix_event+0xf4>
 801441a:	2d00      	cmp	r5, #0
 801441c:	d0db      	beq.n	80143d6 <lv_btnmatrix_event+0x4a>
 801441e:	3d01      	subs	r5, #1
 8014420:	2d14      	cmp	r5, #20
 8014422:	d8d8      	bhi.n	80143d6 <lv_btnmatrix_event+0x4a>
 8014424:	a301      	add	r3, pc, #4	; (adr r3, 801442c <lv_btnmatrix_event+0xa0>)
 8014426:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 801442a:	bf00      	nop
 801442c:	08014487 	.word	0x08014487
 8014430:	0801450f 	.word	0x0801450f
 8014434:	08014641 	.word	0x08014641
 8014438:	080143d7 	.word	0x080143d7
 801443c:	080143d7 	.word	0x080143d7
 8014440:	08014619 	.word	0x08014619
 8014444:	080143d7 	.word	0x080143d7
 8014448:	0801459d 	.word	0x0801459d
 801444c:	080143d7 	.word	0x080143d7
 8014450:	080143d7 	.word	0x080143d7
 8014454:	080143d7 	.word	0x080143d7
 8014458:	080143d7 	.word	0x080143d7
 801445c:	080146e1 	.word	0x080146e1
 8014460:	08014659 	.word	0x08014659
 8014464:	080146cf 	.word	0x080146cf
 8014468:	080146cf 	.word	0x080146cf
 801446c:	080143d7 	.word	0x080143d7
 8014470:	080143d7 	.word	0x080143d7
 8014474:	080143d7 	.word	0x080143d7
 8014478:	080143d7 	.word	0x080143d7
 801447c:	080148ad 	.word	0x080148ad
 8014480:	2d29      	cmp	r5, #41	; 0x29
 8014482:	d0c2      	beq.n	801440a <lv_btnmatrix_event+0x7e>
 8014484:	e7a7      	b.n	80143d6 <lv_btnmatrix_event+0x4a>
        void * param = lv_event_get_param(e);
 8014486:	4630      	mov	r0, r6
 8014488:	f006 feef 	bl	801b26a <lv_event_get_param>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801448c:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
        void * param = lv_event_get_param(e);
 801448e:	4605      	mov	r5, r0
        invalidate_button_area(obj, btnm->btn_id_sel);
 8014490:	4620      	mov	r0, r4
 8014492:	f011 ff55 	bl	8026340 <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8014496:	f7f0 f9bb 	bl	8004810 <lv_indev_get_act>
 801449a:	f007 f8a2 	bl	801b5e2 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 801449e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 80144a2:	2801      	cmp	r0, #1
 80144a4:	d117      	bne.n	80144d6 <lv_btnmatrix_event+0x14a>
            lv_indev_get_point(param, &p);
 80144a6:	4669      	mov	r1, sp
 80144a8:	4628      	mov	r0, r5
 80144aa:	f007 f8ab 	bl	801b604 <lv_indev_get_point>
            btn_pr = get_button_from_point(obj, &p);
 80144ae:	4669      	mov	r1, sp
 80144b0:	4620      	mov	r0, r4
 80144b2:	f011 fe7f 	bl	80261b4 <get_button_from_point>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 80144b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
            btn_pr = get_button_from_point(obj, &p);
 80144ba:	4601      	mov	r1, r0
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 80144bc:	4298      	cmp	r0, r3
 80144be:	d00a      	beq.n	80144d6 <lv_btnmatrix_event+0x14a>
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 80144c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 80144c2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 80144c6:	065a      	lsls	r2, r3, #25
 80144c8:	d405      	bmi.n	80144d6 <lv_btnmatrix_event+0x14a>
 80144ca:	06df      	lsls	r7, r3, #27
 80144cc:	d403      	bmi.n	80144d6 <lv_btnmatrix_event+0x14a>
                    btnm->btn_id_sel = btn_pr;
 80144ce:	86a0      	strh	r0, [r4, #52]	; 0x34
                    invalidate_button_area(obj, btnm->btn_id_sel); /*Invalidate the new area*/
 80144d0:	4620      	mov	r0, r4
 80144d2:	f011 ff35 	bl	8026340 <invalidate_button_area>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 80144d6:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80144d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144dc:	429a      	cmp	r2, r3
 80144de:	f43f af7a 	beq.w	80143d6 <lv_btnmatrix_event+0x4a>
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80144e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 80144e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80144e8:	059e      	lsls	r6, r3, #22
 80144ea:	f53f af74 	bmi.w	80143d6 <lv_btnmatrix_event+0x4a>
 80144ee:	055d      	lsls	r5, r3, #21
 80144f0:	f53f af71 	bmi.w	80143d6 <lv_btnmatrix_event+0x4a>
               button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80144f4:	0658      	lsls	r0, r3, #25
 80144f6:	f53f af6e 	bmi.w	80143d6 <lv_btnmatrix_event+0x4a>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80144fa:	06d9      	lsls	r1, r3, #27
 80144fc:	f53f af6b 	bmi.w	80143d6 <lv_btnmatrix_event+0x4a>
                uint32_t b = btnm->btn_id_sel;
 8014500:	9201      	str	r2, [sp, #4]
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 8014502:	aa01      	add	r2, sp, #4
 8014504:	211c      	movs	r1, #28
 8014506:	4620      	mov	r0, r4
 8014508:	f7f0 f91c 	bl	8004744 <lv_event_send>
                    if(res != LV_RES_OK) return;
 801450c:	e763      	b.n	80143d6 <lv_btnmatrix_event+0x4a>
        void * param = lv_event_get_param(e);
 801450e:	4630      	mov	r0, r6
 8014510:	f006 feab 	bl	801b26a <lv_event_get_param>
 8014514:	4606      	mov	r6, r0
        lv_indev_t * indev = lv_indev_get_act();
 8014516:	f7f0 f97b 	bl	8004810 <lv_indev_get_act>
 801451a:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801451c:	f007 f861 	bl	801b5e2 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return;
 8014520:	2804      	cmp	r0, #4
 8014522:	f43f af58 	beq.w	80143d6 <lv_btnmatrix_event+0x4a>
 8014526:	2802      	cmp	r0, #2
 8014528:	f43f af55 	beq.w	80143d6 <lv_btnmatrix_event+0x4a>
        lv_indev_get_point(indev, &p);
 801452c:	4628      	mov	r0, r5
 801452e:	4669      	mov	r1, sp
 8014530:	f007 f868 	bl	801b604 <lv_indev_get_point>
        btn_pr = get_button_from_point(obj, &p);
 8014534:	4669      	mov	r1, sp
 8014536:	4620      	mov	r0, r4
 8014538:	f011 fe3c 	bl	80261b4 <get_button_from_point>
        if(btn_pr != btnm->btn_id_sel) {
 801453c:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
        btn_pr = get_button_from_point(obj, &p);
 801453e:	4605      	mov	r5, r0
        if(btn_pr != btnm->btn_id_sel) {
 8014540:	4281      	cmp	r1, r0
 8014542:	f43f af48 	beq.w	80143d6 <lv_btnmatrix_event+0x4a>
            if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 8014546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801454a:	4299      	cmp	r1, r3
 801454c:	d002      	beq.n	8014554 <lv_btnmatrix_event+0x1c8>
                invalidate_button_area(obj, btnm->btn_id_sel);
 801454e:	4620      	mov	r0, r4
 8014550:	f011 fef6 	bl	8026340 <invalidate_button_area>
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 8014554:	4630      	mov	r0, r6
            btnm->btn_id_sel = btn_pr;
 8014556:	86a5      	strh	r5, [r4, #52]	; 0x34
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 8014558:	f007 f847 	bl	801b5ea <lv_indev_reset_long_press>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 801455c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014560:	429d      	cmp	r5, r3
 8014562:	f43f af38 	beq.w	80143d6 <lv_btnmatrix_event+0x4a>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 8014566:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 8014568:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 801456c:	065a      	lsls	r2, r3, #25
 801456e:	f53f af32 	bmi.w	80143d6 <lv_btnmatrix_event+0x4a>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 8014572:	06db      	lsls	r3, r3, #27
 8014574:	f53f af2f 	bmi.w	80143d6 <lv_btnmatrix_event+0x4a>
                invalidate_button_area(obj, btn_pr);
 8014578:	4629      	mov	r1, r5
 801457a:	4620      	mov	r0, r4
 801457c:	f011 fee0 	bl	8026340 <invalidate_button_area>
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 8014580:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 8014582:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 8014586:	0597      	lsls	r7, r2, #22
 8014588:	f53f af25 	bmi.w	80143d6 <lv_btnmatrix_event+0x4a>
                   button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == false) {
 801458c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_POPOVER) ? true : false;
 801458e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 8014592:	055e      	lsls	r6, r3, #21
 8014594:	f53f af1f 	bmi.w	80143d6 <lv_btnmatrix_event+0x4a>
                    uint32_t b = btn_pr;
 8014598:	9501      	str	r5, [sp, #4]
 801459a:	e7b2      	b.n	8014502 <lv_btnmatrix_event+0x176>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801459c:	8e82      	ldrh	r2, [r0, #52]	; 0x34
 801459e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145a2:	429a      	cmp	r2, r3
 80145a4:	d02e      	beq.n	8014604 <lv_btnmatrix_event+0x278>
            if(button_is_checkable(btnm->ctrl_bits[btnm->btn_id_sel]) &&
 80145a6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80145a8:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 80145ac:	0618      	lsls	r0, r3, #24
 80145ae:	d514      	bpl.n	80145da <lv_btnmatrix_event+0x24e>
 80145b0:	065f      	lsls	r7, r3, #25
 80145b2:	d412      	bmi.n	80145da <lv_btnmatrix_event+0x24e>
                if(button_get_checked(btnm->ctrl_bits[btnm->btn_id_sel]) && !btnm->one_check) {
 80145b4:	05de      	lsls	r6, r3, #23
 80145b6:	d52c      	bpl.n	8014612 <lv_btnmatrix_event+0x286>
 80145b8:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 80145bc:	07c5      	lsls	r5, r0, #31
 80145be:	d428      	bmi.n	8014612 <lv_btnmatrix_event+0x286>
                    btnm->ctrl_bits[btnm->btn_id_sel] &= (~LV_BTNMATRIX_CTRL_CHECKED);
 80145c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80145c4:	b29b      	uxth	r3, r3
 80145c6:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
                if(btnm->one_check) make_one_button_checked(obj, btnm->btn_id_sel);
 80145ca:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80145ce:	07d8      	lsls	r0, r3, #31
 80145d0:	d503      	bpl.n	80145da <lv_btnmatrix_event+0x24e>
 80145d2:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80145d4:	4620      	mov	r0, r4
 80145d6:	f011 ffae 	bl	8026536 <make_one_button_checked>
            if((button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true ||
 80145da:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80145dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 80145de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            if((button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true ||
 80145e2:	0599      	lsls	r1, r3, #22
 80145e4:	d401      	bmi.n	80145ea <lv_btnmatrix_event+0x25e>
 80145e6:	055f      	lsls	r7, r3, #21
 80145e8:	d50c      	bpl.n	8014604 <lv_btnmatrix_event+0x278>
                button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == true) &&
 80145ea:	065e      	lsls	r6, r3, #25
 80145ec:	d40a      	bmi.n	8014604 <lv_btnmatrix_event+0x278>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80145ee:	06dd      	lsls	r5, r3, #27
 80145f0:	d408      	bmi.n	8014604 <lv_btnmatrix_event+0x278>
                uint32_t b = btnm->btn_id_sel;
 80145f2:	9201      	str	r2, [sp, #4]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 80145f4:	211c      	movs	r1, #28
 80145f6:	aa01      	add	r2, sp, #4
 80145f8:	4620      	mov	r0, r4
 80145fa:	f7f0 f8a3 	bl	8004744 <lv_event_send>
                if(res != LV_RES_OK) return;
 80145fe:	2801      	cmp	r0, #1
 8014600:	f47f aee9 	bne.w	80143d6 <lv_btnmatrix_event+0x4a>
        invalidate_button_area(obj, btnm->btn_id_sel);
 8014604:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8014606:	4620      	mov	r0, r4
}
 8014608:	b003      	add	sp, #12
 801460a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        invalidate_button_area(obj, btnm->btn_id_sel);
 801460e:	f011 be97 	b.w	8026340 <invalidate_button_area>
                    btnm->ctrl_bits[btnm->btn_id_sel] |= LV_BTNMATRIX_CTRL_CHECKED;
 8014612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014616:	e7d6      	b.n	80145c6 <lv_btnmatrix_event+0x23a>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 8014618:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 801461a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801461e:	4293      	cmp	r3, r2
 8014620:	f43f aed9 	beq.w	80143d6 <lv_btnmatrix_event+0x4a>
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8014624:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_NO_REPEAT) ? true : false;
 8014626:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801462a:	0690      	lsls	r0, r2, #26
 801462c:	f53f aed3 	bmi.w	80143d6 <lv_btnmatrix_event+0x4a>
 8014630:	0651      	lsls	r1, r2, #25
 8014632:	f53f aed0 	bmi.w	80143d6 <lv_btnmatrix_event+0x4a>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8014636:	06d2      	lsls	r2, r2, #27
 8014638:	f53f aecd 	bmi.w	80143d6 <lv_btnmatrix_event+0x4a>
                uint32_t b = btnm->btn_id_sel;
 801463c:	9301      	str	r3, [sp, #4]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 801463e:	e760      	b.n	8014502 <lv_btnmatrix_event+0x176>
        invalidate_button_area(obj, btnm->btn_id_sel);
 8014640:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8014642:	f011 fe7d 	bl	8026340 <invalidate_button_area>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 8014646:	f64f 73ff 	movw	r3, #65535	; 0xffff
                btnm->btn_id_sel = b;
 801464a:	86a3      	strh	r3, [r4, #52]	; 0x34
            if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER && editing)) {
 801464c:	e6c3      	b.n	80143d6 <lv_btnmatrix_event+0x4a>
 801464e:	bf00      	nop
 8014650:	080299b8 	.word	0x080299b8
 8014654:	08029fb1 	.word	0x08029fb1
        lv_indev_t * indev = lv_event_get_param(e);
 8014658:	4630      	mov	r0, r6
 801465a:	f006 fe06 	bl	801b26a <lv_event_get_param>
 801465e:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8014660:	f006 ffbf 	bl	801b5e2 <lv_indev_get_type>
 8014664:	4605      	mov	r5, r0
        if(indev == NULL) {
 8014666:	b92e      	cbnz	r6, 8014674 <lv_btnmatrix_event+0x2e8>
            indev = lv_indev_get_next(NULL);
 8014668:	4630      	mov	r0, r6
 801466a:	f7fd fd81 	bl	8012170 <lv_indev_get_next>
            indev_type = lv_indev_get_type(indev);
 801466e:	f006 ffb8 	bl	801b5e2 <lv_indev_get_type>
 8014672:	4605      	mov	r5, r0
        bool editing = lv_group_get_editing(lv_obj_get_group(obj));
 8014674:	4620      	mov	r0, r4
 8014676:	f007 fa0b 	bl	801ba90 <lv_obj_get_group>
 801467a:	f006 ffad 	bl	801b5d8 <lv_group_get_editing>
        if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 801467e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8014680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014684:	429a      	cmp	r2, r3
 8014686:	f47f aea6 	bne.w	80143d6 <lv_btnmatrix_event+0x4a>
            if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER && editing)) {
 801468a:	2d02      	cmp	r5, #2
 801468c:	d005      	beq.n	801469a <lv_btnmatrix_event+0x30e>
 801468e:	2d04      	cmp	r5, #4
 8014690:	f47f aea1 	bne.w	80143d6 <lv_btnmatrix_event+0x4a>
 8014694:	2800      	cmp	r0, #0
 8014696:	f43f ae9e 	beq.w	80143d6 <lv_btnmatrix_event+0x4a>
                if(btnm->one_check) {
 801469a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) ||
 801469e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
                if(btnm->one_check) {
 80146a0:	f013 0301 	ands.w	r3, r3, #1
 80146a4:	d111      	bne.n	80146ca <lv_btnmatrix_event+0x33e>
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80146a6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 80146aa:	06d0      	lsls	r0, r2, #27
 80146ac:	d401      	bmi.n	80146b2 <lv_btnmatrix_event+0x326>
 80146ae:	0657      	lsls	r7, r2, #25
 80146b0:	d5cb      	bpl.n	801464a <lv_btnmatrix_event+0x2be>
 80146b2:	3301      	adds	r3, #1
 80146b4:	e7f7      	b.n	80146a6 <lv_btnmatrix_event+0x31a>
                          button_is_checked(btnm->ctrl_bits[b]) == false) b++;
 80146b6:	3301      	adds	r3, #1
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80146b8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) ||
 80146bc:	06d7      	lsls	r7, r2, #27
 80146be:	d4fa      	bmi.n	80146b6 <lv_btnmatrix_event+0x32a>
 80146c0:	0656      	lsls	r6, r2, #25
 80146c2:	d4f8      	bmi.n	80146b6 <lv_btnmatrix_event+0x32a>
 80146c4:	05d5      	lsls	r5, r2, #23
 80146c6:	d5f6      	bpl.n	80146b6 <lv_btnmatrix_event+0x32a>
 80146c8:	e7bf      	b.n	801464a <lv_btnmatrix_event+0x2be>
                uint32_t b = 0;
 80146ca:	2300      	movs	r3, #0
 80146cc:	e7f4      	b.n	80146b8 <lv_btnmatrix_event+0x32c>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(obj, btnm->btn_id_sel);
 80146ce:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80146d0:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80146d4:	42a9      	cmp	r1, r5
 80146d6:	d001      	beq.n	80146dc <lv_btnmatrix_event+0x350>
 80146d8:	f011 fe32 	bl	8026340 <invalidate_button_area>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 80146dc:	86a5      	strh	r5, [r4, #52]	; 0x34
 80146de:	e67a      	b.n	80143d6 <lv_btnmatrix_event+0x4a>
        invalidate_button_area(obj, btnm->btn_id_sel);
 80146e0:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80146e2:	f011 fe2d 	bl	8026340 <invalidate_button_area>
        char c = *((char *)lv_event_get_param(e));
 80146e6:	4630      	mov	r0, r6
 80146e8:	f006 fdbf 	bl	801b26a <lv_event_get_param>
 80146ec:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 80146ee:	2b13      	cmp	r3, #19
 80146f0:	d11e      	bne.n	8014730 <lv_btnmatrix_event+0x3a4>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 80146f2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80146f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80146f8:	8e21      	ldrh	r1, [r4, #48]	; 0x30
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80146fa:	2500      	movs	r5, #0
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 80146fc:	4293      	cmp	r3, r2
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80146fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
            else btnm->btn_id_sel++;
 8014700:	bf16      	itet	ne
 8014702:	3301      	addne	r3, #1
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 8014704:	2300      	moveq	r3, #0
            else btnm->btn_id_sel++;
 8014706:	b29b      	uxthne	r3, r3
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8014708:	4299      	cmp	r1, r3
 801470a:	86a3      	strh	r3, [r4, #52]	; 0x34
 801470c:	bf9c      	itt	ls
 801470e:	2300      	movls	r3, #0
 8014710:	86a3      	strhls	r3, [r4, #52]	; 0x34
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8014712:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8014714:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8014718:	06d6      	lsls	r6, r2, #27
 801471a:	d402      	bmi.n	8014722 <lv_btnmatrix_event+0x396>
 801471c:	0652      	lsls	r2, r2, #25
 801471e:	f57f af71 	bpl.w	8014604 <lv_btnmatrix_event+0x278>
                btnm->btn_id_sel++;
 8014722:	3301      	adds	r3, #1
 8014724:	b29b      	uxth	r3, r3
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8014726:	4299      	cmp	r1, r3
                btnm->btn_id_sel++;
 8014728:	86a3      	strh	r3, [r4, #52]	; 0x34
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801472a:	bf98      	it	ls
 801472c:	86a5      	strhls	r5, [r4, #52]	; 0x34
 801472e:	e7f0      	b.n	8014712 <lv_btnmatrix_event+0x386>
        else if(c == LV_KEY_LEFT) {
 8014730:	2b14      	cmp	r3, #20
 8014732:	d11c      	bne.n	801476e <lv_btnmatrix_event+0x3e2>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) btnm->btn_id_sel = 0;
 8014734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014738:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801473a:	429a      	cmp	r2, r3
 801473c:	bf04      	itt	eq
 801473e:	2300      	moveq	r3, #0
 8014740:	86a3      	strheq	r3, [r4, #52]	; 0x34
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 8014742:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014744:	b903      	cbnz	r3, 8014748 <lv_btnmatrix_event+0x3bc>
 8014746:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014748:	3b01      	subs	r3, #1
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801474a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 801474c:	b29b      	uxth	r3, r3
 801474e:	86a3      	strh	r3, [r4, #52]	; 0x34
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8014750:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8014752:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8014756:	06d7      	lsls	r7, r2, #27
 8014758:	d402      	bmi.n	8014760 <lv_btnmatrix_event+0x3d4>
 801475a:	0656      	lsls	r6, r2, #25
 801475c:	f57f af52 	bpl.w	8014604 <lv_btnmatrix_event+0x278>
                if(btnm->btn_id_sel > 0) btnm->btn_id_sel--;
 8014760:	b11b      	cbz	r3, 801476a <lv_btnmatrix_event+0x3de>
                else btnm->btn_id_sel = btnm->btn_cnt - 1;
 8014762:	3b01      	subs	r3, #1
 8014764:	b29b      	uxth	r3, r3
 8014766:	86a3      	strh	r3, [r4, #52]	; 0x34
 8014768:	e7f2      	b.n	8014750 <lv_btnmatrix_event+0x3c4>
 801476a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801476c:	e7f9      	b.n	8014762 <lv_btnmatrix_event+0x3d6>
        else if(c == LV_KEY_DOWN) {
 801476e:	2b12      	cmp	r3, #18
 8014770:	d14c      	bne.n	801480c <lv_btnmatrix_event+0x480>
            lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 8014772:	4620      	mov	r0, r4
 8014774:	f011 fd17 	bl	80261a6 <lv_obj_get_style_pad_column.constprop.0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 8014778:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 801477a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801477e:	4299      	cmp	r1, r3
 8014780:	d112      	bne.n	80147a8 <lv_btnmatrix_event+0x41c>
                btnm->btn_id_sel = 0;
 8014782:	2100      	movs	r1, #0
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8014784:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                btnm->btn_id_sel = 0;
 8014786:	86a1      	strh	r1, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8014788:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801478a:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801478e:	06d5      	lsls	r5, r2, #27
 8014790:	d402      	bmi.n	8014798 <lv_btnmatrix_event+0x40c>
 8014792:	0652      	lsls	r2, r2, #25
 8014794:	f57f af36 	bpl.w	8014604 <lv_btnmatrix_event+0x278>
                    btnm->btn_id_sel++;
 8014798:	3301      	adds	r3, #1
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801479a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
                    btnm->btn_id_sel++;
 801479c:	b29b      	uxth	r3, r3
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801479e:	429a      	cmp	r2, r3
                    btnm->btn_id_sel++;
 80147a0:	86a3      	strh	r3, [r4, #52]	; 0x34
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80147a2:	bf98      	it	ls
 80147a4:	86a1      	strhls	r1, [r4, #52]	; 0x34
 80147a6:	e7ef      	b.n	8014788 <lv_btnmatrix_event+0x3fc>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 80147a8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 80147aa:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 80147ae:	eb05 07c1 	add.w	r7, r5, r1, lsl #3
 80147b2:	f835 3031 	ldrh.w	r3, [r5, r1, lsl #3]
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 80147b6:	f105 0e02 	add.w	lr, r5, #2
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 80147ba:	f105 0804 	add.w	r8, r5, #4
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80147be:	88ba      	ldrh	r2, [r7, #4]
 80147c0:	3201      	adds	r2, #1
 80147c2:	1ad2      	subs	r2, r2, r3
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 80147c4:	f342 024e 	sbfx	r2, r2, #1, #15
 80147c8:	4413      	add	r3, r2
 80147ca:	004a      	lsls	r2, r1, #1
                lv_coord_t pr_center =
 80147cc:	b21b      	sxth	r3, r3
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 80147ce:	458c      	cmp	ip, r1
 80147d0:	f67f af18 	bls.w	8014604 <lv_btnmatrix_event+0x278>
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 80147d4:	f93e 9022 	ldrsh.w	r9, [lr, r2, lsl #2]
 80147d8:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 80147dc:	45b1      	cmp	r9, r6
 80147de:	dd0f      	ble.n	8014800 <lv_btnmatrix_event+0x474>
 80147e0:	f935 6022 	ldrsh.w	r6, [r5, r2, lsl #2]
 80147e4:	429e      	cmp	r6, r3
 80147e6:	dc0b      	bgt.n	8014800 <lv_btnmatrix_event+0x474>
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 80147e8:	f938 6022 	ldrsh.w	r6, [r8, r2, lsl #2]
 80147ec:	4406      	add	r6, r0
                       pr_center >= btnm->button_areas[area_below].x1 &&
 80147ee:	42b3      	cmp	r3, r6
 80147f0:	dc06      	bgt.n	8014800 <lv_btnmatrix_event+0x474>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 80147f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 80147f4:	5ab6      	ldrh	r6, [r6, r2]
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 80147f6:	f016 0f40 	tst.w	r6, #64	; 0x40
 80147fa:	d101      	bne.n	8014800 <lv_btnmatrix_event+0x474>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 80147fc:	06f6      	lsls	r6, r6, #27
 80147fe:	d503      	bpl.n	8014808 <lv_btnmatrix_event+0x47c>
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 8014800:	3101      	adds	r1, #1
 8014802:	3202      	adds	r2, #2
 8014804:	b289      	uxth	r1, r1
 8014806:	e7e2      	b.n	80147ce <lv_btnmatrix_event+0x442>
                if(area_below < btnm->btn_cnt) btnm->btn_id_sel = area_below;
 8014808:	86a1      	strh	r1, [r4, #52]	; 0x34
 801480a:	e6fb      	b.n	8014604 <lv_btnmatrix_event+0x278>
        else if(c == LV_KEY_UP) {
 801480c:	2b11      	cmp	r3, #17
 801480e:	f47f aef9 	bne.w	8014604 <lv_btnmatrix_event+0x278>
            lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 8014812:	4620      	mov	r0, r4
 8014814:	f011 fcc7 	bl	80261a6 <lv_obj_get_style_pad_column.constprop.0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 8014818:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801481a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801481e:	4293      	cmp	r3, r2
 8014820:	d112      	bne.n	8014848 <lv_btnmatrix_event+0x4bc>
                btnm->btn_id_sel = 0;
 8014822:	2100      	movs	r1, #0
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8014824:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                btnm->btn_id_sel = 0;
 8014826:	86a1      	strh	r1, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8014828:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801482a:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801482e:	06d5      	lsls	r5, r2, #27
 8014830:	d402      	bmi.n	8014838 <lv_btnmatrix_event+0x4ac>
 8014832:	0652      	lsls	r2, r2, #25
 8014834:	f57f aee6 	bpl.w	8014604 <lv_btnmatrix_event+0x278>
                    btnm->btn_id_sel++;
 8014838:	3301      	adds	r3, #1
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801483a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
                    btnm->btn_id_sel++;
 801483c:	b29b      	uxth	r3, r3
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801483e:	429a      	cmp	r2, r3
                    btnm->btn_id_sel++;
 8014840:	86a3      	strh	r3, [r4, #52]	; 0x34
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8014842:	bf98      	it	ls
 8014844:	86a1      	strhls	r1, [r4, #52]	; 0x34
 8014846:	e7ef      	b.n	8014828 <lv_btnmatrix_event+0x49c>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 8014848:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801484a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
 801484e:	f835 1033 	ldrh.w	r1, [r5, r3, lsl #3]
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 8014852:	f105 0c02 	add.w	ip, r5, #2
 8014856:	b21b      	sxth	r3, r3
 8014858:	88b2      	ldrh	r2, [r6, #4]
                       pr_center <= btnm->button_areas[area_above].x2 &&
 801485a:	f105 0e04 	add.w	lr, r5, #4
 801485e:	3201      	adds	r2, #1
 8014860:	1a52      	subs	r2, r2, r1
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 8014862:	f342 024e 	sbfx	r2, r2, #1, #15
 8014866:	440a      	add	r2, r1
                lv_coord_t pr_center =
 8014868:	b212      	sxth	r2, r2
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 801486a:	b21f      	sxth	r7, r3
 801486c:	2f00      	cmp	r7, #0
 801486e:	f6ff aec9 	blt.w	8014604 <lv_btnmatrix_event+0x278>
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 8014872:	f93c 8033 	ldrsh.w	r8, [ip, r3, lsl #3]
 8014876:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 801487a:	4588      	cmp	r8, r1
 801487c:	da10      	bge.n	80148a0 <lv_btnmatrix_event+0x514>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 801487e:	f935 1033 	ldrsh.w	r1, [r5, r3, lsl #3]
 8014882:	1a09      	subs	r1, r1, r0
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 8014884:	428a      	cmp	r2, r1
 8014886:	db0b      	blt.n	80148a0 <lv_btnmatrix_event+0x514>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 8014888:	f93e 1033 	ldrsh.w	r1, [lr, r3, lsl #3]
 801488c:	4291      	cmp	r1, r2
 801488e:	db07      	blt.n	80148a0 <lv_btnmatrix_event+0x514>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 8014890:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 8014892:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
                       pr_center <= btnm->button_areas[area_above].x2 &&
 8014896:	f011 0f40 	tst.w	r1, #64	; 0x40
 801489a:	d101      	bne.n	80148a0 <lv_btnmatrix_event+0x514>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 801489c:	06c9      	lsls	r1, r1, #27
 801489e:	d501      	bpl.n	80148a4 <lv_btnmatrix_event+0x518>
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 80148a0:	3b01      	subs	r3, #1
 80148a2:	e7e2      	b.n	801486a <lv_btnmatrix_event+0x4de>
                if(area_above >= 0) btnm->btn_id_sel = area_above;
 80148a4:	2f00      	cmp	r7, #0
 80148a6:	bfa8      	it	ge
 80148a8:	86a3      	strhge	r3, [r4, #52]	; 0x34
 80148aa:	e6ab      	b.n	8014604 <lv_btnmatrix_event+0x278>
        draw_main(e);
 80148ac:	4630      	mov	r0, r6
}
 80148ae:	b003      	add	sp, #12
 80148b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        draw_main(e);
 80148b4:	f7ff bb58 	b.w	8013f68 <draw_main>

080148b8 <lv_checkbox_constructor>:
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_checkbox_t * cb = (lv_checkbox_t *)obj;

    cb->txt = "Check box";
 80148b8:	4b0c      	ldr	r3, [pc, #48]	; (80148ec <lv_checkbox_constructor+0x34>)
{
 80148ba:	b510      	push	{r4, lr}
    cb->txt = "Check box";
 80148bc:	624b      	str	r3, [r1, #36]	; 0x24
{
 80148be:	460c      	mov	r4, r1
    cb->static_txt = 1;
 80148c0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80148c4:	4620      	mov	r0, r4
    cb->static_txt = 1;
 80148c6:	f043 0301 	orr.w	r3, r3, #1
 80148ca:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80148ce:	2102      	movs	r1, #2
 80148d0:	f007 f84b 	bl	801b96a <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 80148d4:	4620      	mov	r0, r4
 80148d6:	2108      	movs	r1, #8
 80148d8:	f007 f847 	bl	801b96a <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80148dc:	4620      	mov	r0, r4
 80148de:	f44f 6180 	mov.w	r1, #1024	; 0x400

    LV_TRACE_OBJ_CREATE("finished");
}
 80148e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80148e6:	f007 b840 	b.w	801b96a <lv_obj_add_flag>
 80148ea:	bf00      	nop
 80148ec:	0802dfc4 	.word	0x0802dfc4

080148f0 <lv_checkbox_event>:
    }
    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_checkbox_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80148f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res;
    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 80148f4:	48b5      	ldr	r0, [pc, #724]	; (8014bcc <lv_checkbox_event+0x2dc>)
{
 80148f6:	b0b9      	sub	sp, #228	; 0xe4
 80148f8:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 80148fa:	f006 fc98 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80148fe:	2801      	cmp	r0, #1
 8014900:	d162      	bne.n	80149c8 <lv_checkbox_event+0xd8>

    lv_event_code_t code = lv_event_get_code(e);
 8014902:	4630      	mov	r0, r6
 8014904:	f006 fcad 	bl	801b262 <lv_event_get_code>
 8014908:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801490a:	4630      	mov	r0, r6
 801490c:	f006 fca5 	bl	801b25a <lv_event_get_target>

    if(code == LV_EVENT_GET_SELF_SIZE) {
 8014910:	2d2c      	cmp	r5, #44	; 0x2c
    lv_obj_t * obj = lv_event_get_target(e);
 8014912:	4604      	mov	r4, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 8014914:	d15b      	bne.n	80149ce <lv_checkbox_event+0xde>
        lv_point_t * p = lv_event_get_param(e);
 8014916:	4630      	mov	r0, r6
        lv_coord_t font_h = lv_font_get_line_height(font);
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);

        lv_point_t txt_size;
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8014918:	f04f 0900 	mov.w	r9, #0
        lv_point_t * p = lv_event_get_param(e);
 801491c:	f006 fca5 	bl	801b26a <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8014920:	2257      	movs	r2, #87	; 0x57
 8014922:	4606      	mov	r6, r0
 8014924:	2100      	movs	r1, #0
 8014926:	4620      	mov	r0, r4
 8014928:	f009 f8de 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801492c:	2259      	movs	r2, #89	; 0x59
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 801492e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8014932:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8014934:	2100      	movs	r1, #0
 8014936:	4620      	mov	r0, r4
 8014938:	f009 f8d6 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801493c:	2258      	movs	r2, #88	; 0x58
    return (lv_coord_t)v.num;
 801493e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8014942:	2100      	movs	r1, #0
 8014944:	4620      	mov	r0, r4
 8014946:	f009 f8cf 	bl	801dae8 <lv_obj_get_style_prop>
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801494a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801494e:	462a      	mov	r2, r5
 8014950:	f8cd 8000 	str.w	r8, [sp]
 8014954:	e9cd 3901 	strd	r3, r9, [sp, #4]
 8014958:	b203      	sxth	r3, r0
 801495a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801495c:	a826      	add	r0, sp, #152	; 0x98
 801495e:	f010 ff9f 	bl	80258a0 <lv_txt_get_size>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8014962:	4649      	mov	r1, r9
 8014964:	2215      	movs	r2, #21
 8014966:	4620      	mov	r0, r4
 8014968:	f009 f8be 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801496c:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801496e:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014970:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014974:	4620      	mov	r0, r4
 8014976:	f009 f8b7 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801497a:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801497c:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801497e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014982:	4620      	mov	r0, r4
 8014984:	f009 f8b0 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014988:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801498a:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801498c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014990:	4620      	mov	r0, r4
 8014992:	f009 f8a9 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014996:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014998:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801499a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801499e:	4620      	mov	r0, r4
        lv_coord_t marker_bottomp = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
        lv_point_t marker_size;
        marker_size.x = font_h + marker_leftp + marker_rightp;
        marker_size.y = font_h + marker_topp + marker_bottomp;

        p->x = marker_size.x + txt_size.x + bg_colp;
 80149a0:	4455      	add	r5, sl
 80149a2:	f009 f8a1 	bl	801dae8 <lv_obj_get_style_prop>
 80149a6:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
        marker_size.y = font_h + marker_topp + marker_bottomp;
 80149aa:	4480      	add	r8, r0
        p->x = marker_size.x + txt_size.x + bg_colp;
 80149ac:	441d      	add	r5, r3
        marker_size.y = font_h + marker_topp + marker_bottomp;
 80149ae:	fa18 f387 	uxtah	r3, r8, r7
        p->x = marker_size.x + txt_size.x + bg_colp;
 80149b2:	444d      	add	r5, r9
        p->y = LV_MAX(marker_size.y, txt_size.y);
 80149b4:	b21b      	sxth	r3, r3
        p->x = marker_size.x + txt_size.x + bg_colp;
 80149b6:	fa15 f587 	uxtah	r5, r5, r7
 80149ba:	8035      	strh	r5, [r6, #0]
        p->y = LV_MAX(marker_size.y, txt_size.y);
 80149bc:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
 80149c0:	4293      	cmp	r3, r2
 80149c2:	bfb8      	it	lt
 80149c4:	4613      	movlt	r3, r2
 80149c6:	8073      	strh	r3, [r6, #2]
        *s = LV_MAX(*s, m);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        lv_checkbox_draw(e);
    }
}
 80149c8:	b039      	add	sp, #228	; 0xe4
 80149ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80149ce:	2d13      	cmp	r5, #19
 80149d0:	d10f      	bne.n	80149f2 <lv_checkbox_event+0x102>
        lv_coord_t * s = lv_event_get_param(e);
 80149d2:	4630      	mov	r0, r6
 80149d4:	f006 fc49 	bl	801b26a <lv_event_get_param>
 80149d8:	4605      	mov	r5, r0
        lv_coord_t m = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 80149da:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80149de:	4620      	mov	r0, r4
 80149e0:	f007 fd19 	bl	801c416 <lv_obj_calculate_ext_draw_size>
        *s = LV_MAX(*s, m);
 80149e4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80149e8:	4283      	cmp	r3, r0
 80149ea:	bfb8      	it	lt
 80149ec:	4603      	movlt	r3, r0
 80149ee:	802b      	strh	r3, [r5, #0]
 80149f0:	e7ea      	b.n	80149c8 <lv_checkbox_event+0xd8>
    else if(code == LV_EVENT_DRAW_MAIN) {
 80149f2:	2d15      	cmp	r5, #21
 80149f4:	d1e8      	bne.n	80149c8 <lv_checkbox_event+0xd8>

static void lv_checkbox_draw(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 80149f6:	4630      	mov	r0, r6

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_INDICATOR);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_INDICATOR);

    lv_draw_rect_dsc_t indic_dsc;
    lv_draw_rect_dsc_init(&indic_dsc);
 80149f8:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
    lv_obj_t * obj = lv_event_get_target(e);
 80149fc:	f006 fc2d 	bl	801b25a <lv_event_get_target>
 8014a00:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8014a02:	4630      	mov	r0, r6
 8014a04:	f006 fc82 	bl	801b30c <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8014a08:	2257      	movs	r2, #87	; 0x57
 8014a0a:	4680      	mov	r8, r0
 8014a0c:	2100      	movs	r1, #0
 8014a0e:	4620      	mov	r0, r4
 8014a10:	f009 f86a 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8014a14:	2232      	movs	r2, #50	; 0x32
 8014a16:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8014a1a:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8014a1c:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8014a1e:	4620      	mov	r0, r4
 8014a20:	f009 f862 	bl	801dae8 <lv_obj_get_style_prop>
 8014a24:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014a26:	2210      	movs	r2, #16
 8014a28:	2100      	movs	r1, #0
 8014a2a:	4620      	mov	r0, r4
    lv_coord_t bg_topp = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + bg_border;
 8014a2c:	b2be      	uxth	r6, r7
 8014a2e:	f009 f85b 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014a32:	2212      	movs	r2, #18
 8014a34:	fa10 f787 	uxtah	r7, r0, r7
 8014a38:	2100      	movs	r1, #0
 8014a3a:	4620      	mov	r0, r4
 8014a3c:	f009 f854 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8014a40:	462a      	mov	r2, r5
    lv_coord_t bg_leftp = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + bg_border;
 8014a42:	4406      	add	r6, r0
 8014a44:	2100      	movs	r1, #0
 8014a46:	4620      	mov	r0, r4
    lv_coord_t bg_topp = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + bg_border;
 8014a48:	fa1f f987 	uxth.w	r9, r7
 8014a4c:	f009 f84c 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014a50:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8014a52:	9005      	str	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014a54:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014a58:	4620      	mov	r0, r4
    lv_coord_t bg_leftp = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + bg_border;
 8014a5a:	b2b6      	uxth	r6, r6
 8014a5c:	f009 f844 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014a60:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014a62:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014a64:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014a68:	4620      	mov	r0, r4
 8014a6a:	f009 f83d 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014a6e:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014a70:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014a72:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014a76:	4620      	mov	r0, r4
 8014a78:	f009 f836 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014a7c:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014a7e:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014a80:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014a84:	4620      	mov	r0, r4
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &indic_dsc);
    lv_area_t marker_area;
    marker_area.x1 = obj->coords.x1 + bg_leftp;
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 8014a86:	443d      	add	r5, r7
 8014a88:	f009 f82e 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8014a8c:	2268      	movs	r2, #104	; 0x68
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014a8e:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8014a90:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014a94:	4620      	mov	r0, r4
 8014a96:	3d01      	subs	r5, #1
 8014a98:	f009 f826 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8014a9c:	2269      	movs	r2, #105	; 0x69
 8014a9e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8014aa2:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8014aa4:	4620      	mov	r0, r4
 8014aa6:	fa15 f58b 	uxtah	r5, r5, fp
 8014aaa:	f009 f81d 	bl	801dae8 <lv_obj_get_style_prop>
 8014aae:	9008      	str	r0, [sp, #32]
    lv_draw_rect_dsc_init(&indic_dsc);
 8014ab0:	4650      	mov	r0, sl
 8014ab2:	f7f3 ff77 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &indic_dsc);
 8014ab6:	4652      	mov	r2, sl
 8014ab8:	4620      	mov	r0, r4
 8014aba:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014abe:	f007 fa1b 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 8014ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ac4:	9806      	ldr	r0, [sp, #24]
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 8014ac6:	8aa2      	ldrh	r2, [r4, #20]
 8014ac8:	4418      	add	r0, r3
    marker_area.y1 = obj->coords.y1 + bg_topp;
 8014aca:	8ae1      	ldrh	r1, [r4, #22]
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 8014acc:	4432      	add	r2, r6
 8014ace:	1e43      	subs	r3, r0, #1
    marker_area.y2 = marker_area.y1 + font_h + marker_topp + marker_bottomp - 1;

    lv_area_t marker_area_transf;
    lv_area_copy(&marker_area_transf, &marker_area);
    marker_area_transf.x1 -= transf_w;
 8014ad0:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 8014ad4:	fa15 f582 	uxtah	r5, r5, r2
    marker_area.y1 = obj->coords.y1 + bg_topp;
 8014ad8:	4449      	add	r1, r9
    marker_area_transf.x1 -= transf_w;
 8014ada:	1a12      	subs	r2, r2, r0
 8014adc:	fa13 f38b 	uxtah	r3, r3, fp
    marker_area.y1 = obj->coords.y1 + bg_topp;
 8014ae0:	b289      	uxth	r1, r1
    marker_area_transf.x1 -= transf_w;
 8014ae2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8014ae6:	b29e      	uxth	r6, r3
    marker_area_transf.x2 += transf_w;
    marker_area_transf.y1 -= transf_h;
 8014ae8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 8014aec:	b2af      	uxth	r7, r5
    marker_area_transf.x2 += transf_w;
 8014aee:	fa10 f585 	uxtah	r5, r0, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014af2:	3601      	adds	r6, #1
    marker_area_transf.y2 += transf_h;
 8014af4:	fa12 f383 	uxtah	r3, r2, r3
    marker_area_transf.y1 -= transf_h;
 8014af8:	1a88      	subs	r0, r1, r2
    marker_area_transf.x2 += transf_w;
 8014afa:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
    part_draw_dsc.rect_dsc = &indic_dsc;
    part_draw_dsc.class_p = MY_CLASS;
    part_draw_dsc.type = LV_CHECKBOX_DRAW_PART_BOX;
 8014afe:	2500      	movs	r5, #0
    marker_area_transf.y2 += transf_h;
 8014b00:	4419      	add	r1, r3
    marker_area_transf.y1 -= transf_h;
 8014b02:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8014b06:	a826      	add	r0, sp, #152	; 0x98

    lv_draw_label_dsc_t txt_dsc;
    lv_draw_label_dsc_init(&txt_dsc);
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &txt_dsc);

    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
 8014b08:	b236      	sxth	r6, r6
    marker_area_transf.y2 += transf_h;
 8014b0a:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8014b0e:	4641      	mov	r1, r8
 8014b10:	f007 fce8 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 8014b14:	4b2d      	ldr	r3, [pc, #180]	; (8014bcc <lv_checkbox_event+0x2dc>)
    part_draw_dsc.part = LV_PART_INDICATOR;
 8014b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8014b1a:	211a      	movs	r1, #26
    part_draw_dsc.class_p = MY_CLASS;
 8014b1c:	9327      	str	r3, [sp, #156]	; 0x9c
    part_draw_dsc.draw_area = &marker_area_transf;
 8014b1e:	ab0c      	add	r3, sp, #48	; 0x30
    part_draw_dsc.part = LV_PART_INDICATOR;
 8014b20:	9233      	str	r2, [sp, #204]	; 0xcc
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8014b22:	4620      	mov	r0, r4
 8014b24:	aa26      	add	r2, sp, #152	; 0x98
    part_draw_dsc.rect_dsc = &indic_dsc;
 8014b26:	f8cd a0a8 	str.w	sl, [sp, #168]	; 0xa8
    part_draw_dsc.draw_area = &marker_area_transf;
 8014b2a:	9329      	str	r3, [sp, #164]	; 0xa4
    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
 8014b2c:	eba6 060b 	sub.w	r6, r6, fp
    part_draw_dsc.type = LV_CHECKBOX_DRAW_PART_BOX;
 8014b30:	9528      	str	r5, [sp, #160]	; 0xa0
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8014b32:	f7ef fe07 	bl	8004744 <lv_event_send>
    lv_draw_rect(draw_ctx, &indic_dsc, &marker_area_transf);
 8014b36:	ab0c      	add	r3, sp, #48	; 0x30
 8014b38:	4651      	mov	r1, sl
 8014b3a:	4640      	mov	r0, r8
    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
 8014b3c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    lv_draw_rect(draw_ctx, &indic_dsc, &marker_area_transf);
 8014b40:	461a      	mov	r2, r3
 8014b42:	f00a fc64 	bl	801f40e <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8014b46:	aa26      	add	r2, sp, #152	; 0x98
 8014b48:	211b      	movs	r1, #27
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	f7ef fdfa 	bl	8004744 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8014b50:	4629      	mov	r1, r5
 8014b52:	2259      	movs	r2, #89	; 0x59
 8014b54:	4620      	mov	r0, r4
 8014b56:	f008 ffc7 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8014b5a:	4629      	mov	r1, r5
    return (lv_coord_t)v.num;
 8014b5c:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8014b60:	2258      	movs	r2, #88	; 0x58
 8014b62:	4620      	mov	r0, r4
 8014b64:	f008 ffc0 	bl	801dae8 <lv_obj_get_style_prop>
    lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8014b68:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8014b6c:	9a04      	ldr	r2, [sp, #16]
 8014b6e:	9502      	str	r5, [sp, #8]
 8014b70:	e9cd a300 	strd	sl, r3, [sp]
 8014b74:	b203      	sxth	r3, r0
 8014b76:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014b78:	a80b      	add	r0, sp, #44	; 0x2c
 8014b7a:	f010 fe91 	bl	80258a0 <lv_txt_get_size>
    lv_draw_label_dsc_init(&txt_dsc);
 8014b7e:	a810      	add	r0, sp, #64	; 0x40
 8014b80:	f7f3 f8c6 	bl	8007d10 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &txt_dsc);
 8014b84:	aa10      	add	r2, sp, #64	; 0x40
 8014b86:	4629      	mov	r1, r5
 8014b88:	4620      	mov	r0, r4
 8014b8a:	f007 fb04 	bl	801c196 <lv_obj_init_draw_label_dsc>
    lv_area_t txt_area;
    txt_area.x1 = marker_area.x2 + bg_colp;
 8014b8e:	9b05      	ldr	r3, [sp, #20]
    txt_area.x2 = txt_area.x1 + txt_size.x;
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8014b90:	8ae2      	ldrh	r2, [r4, #22]
    txt_area.y2 = txt_area.y1 + txt_size.y;

    lv_draw_label(draw_ctx, &txt_dsc, &txt_area, cb->txt, NULL);
 8014b92:	a910      	add	r1, sp, #64	; 0x40
    txt_area.x1 = marker_area.x2 + bg_colp;
 8014b94:	441f      	add	r7, r3
    txt_area.x2 = txt_area.x1 + txt_size.x;
 8014b96:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    lv_draw_label(draw_ctx, &txt_dsc, &txt_area, cb->txt, NULL);
 8014b9a:	9500      	str	r5, [sp, #0]
 8014b9c:	4640      	mov	r0, r8
    txt_area.x1 = marker_area.x2 + bg_colp;
 8014b9e:	b2bf      	uxth	r7, r7
 8014ba0:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
    txt_area.x2 = txt_area.x1 + txt_size.x;
 8014ba4:	441f      	add	r7, r3
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8014ba6:	eb09 0366 	add.w	r3, r9, r6, asr #1
    txt_area.x2 = txt_area.x1 + txt_size.x;
 8014baa:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8014bae:	4413      	add	r3, r2
    txt_area.y2 = txt_area.y1 + txt_size.y;
 8014bb0:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8014bb4:	b29b      	uxth	r3, r3
 8014bb6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    txt_area.y2 = txt_area.y1 + txt_size.y;
 8014bba:	4413      	add	r3, r2
    lv_draw_label(draw_ctx, &txt_dsc, &txt_area, cb->txt, NULL);
 8014bbc:	aa0e      	add	r2, sp, #56	; 0x38
    txt_area.y2 = txt_area.y1 + txt_size.y;
 8014bbe:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    lv_draw_label(draw_ctx, &txt_dsc, &txt_area, cb->txt, NULL);
 8014bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bc4:	f7f3 f8bc 	bl	8007d40 <lv_draw_label>
}
 8014bc8:	e6fe      	b.n	80149c8 <lv_checkbox_event+0xd8>
 8014bca:	bf00      	nop
 8014bcc:	080299d4 	.word	0x080299d4

08014bd0 <lv_dropdown_create>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_dropdown_create(lv_obj_t * parent)
{
 8014bd0:	4601      	mov	r1, r0
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdown_class, parent);
 8014bd2:	4804      	ldr	r0, [pc, #16]	; (8014be4 <lv_dropdown_create+0x14>)
{
 8014bd4:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdown_class, parent);
 8014bd6:	f7f0 f923 	bl	8004e20 <lv_obj_class_create_obj>
 8014bda:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8014bdc:	f007 f92e 	bl	801be3c <lv_obj_class_init_obj>
    return obj;
}
 8014be0:	4620      	mov	r0, r4
 8014be2:	bd10      	pop	{r4, pc}
 8014be4:	08029a0c 	.word	0x08029a0c

08014be8 <lv_dropdown_constructor>:
    lv_obj_class_init_obj(obj);
    return obj;
}

static void lv_dropdown_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8014be8:	b538      	push	{r3, r4, r5, lr}
    lv_dropdown_t * dropdown = (lv_dropdown_t *)obj;

    /*Initialize the allocated 'ext'*/
    dropdown->list          = NULL;
    dropdown->options     = NULL;
    dropdown->symbol         = LV_SYMBOL_DOWN;
 8014bea:	4a14      	ldr	r2, [pc, #80]	; (8014c3c <lv_dropdown_constructor+0x54>)
    dropdown->list          = NULL;
 8014bec:	2300      	movs	r3, #0
{
 8014bee:	460c      	mov	r4, r1
    dropdown->list          = NULL;
 8014bf0:	624b      	str	r3, [r1, #36]	; 0x24
    dropdown->sel_opt_id_orig = 0;
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
    dropdown->option_cnt      = 0;
    dropdown->dir = LV_DIR_BOTTOM;

    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8014bf2:	4620      	mov	r0, r4
    dropdown->text         = NULL;
 8014bf4:	e9c1 320a 	strd	r3, r2, [r1, #40]	; 0x28
    dropdown->option_cnt      = 0;
 8014bf8:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
    dropdown->sel_opt_id_orig = 0;
 8014bfc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8014c00:	638b      	str	r3, [r1, #56]	; 0x38
    dropdown->dir = LV_DIR_BOTTOM;
 8014c02:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
 8014c06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8014c0a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8014c0e:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8014c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014c16:	f006 fea8 	bl	801b96a <lv_obj_add_flag>
    lv_dropdown_set_options_static(obj, "Option 1\nOption 2\nOption 3");
 8014c1a:	4909      	ldr	r1, [pc, #36]	; (8014c40 <lv_dropdown_constructor+0x58>)
 8014c1c:	4620      	mov	r0, r4
 8014c1e:	f011 fe42 	bl	80268a6 <lv_dropdown_set_options_static>

    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 8014c22:	4620      	mov	r0, r4
 8014c24:	f009 fadc 	bl	801e1e0 <lv_obj_get_screen>
 8014c28:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdownlist_class, parent);
 8014c2a:	4806      	ldr	r0, [pc, #24]	; (8014c44 <lv_dropdown_constructor+0x5c>)
 8014c2c:	f7f0 f8f8 	bl	8004e20 <lv_obj_class_create_obj>
 8014c30:	4605      	mov	r5, r0
    lv_obj_class_init_obj(obj);
 8014c32:	f007 f903 	bl	801be3c <lv_obj_class_init_obj>
    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 8014c36:	6265      	str	r5, [r4, #36]	; 0x24
    lv_dropdown_list_t * list = (lv_dropdown_list_t *)dropdown->list;
    list->dropdown = obj;
 8014c38:	626c      	str	r4, [r5, #36]	; 0x24

    LV_TRACE_OBJ_CREATE("finished");
}
 8014c3a:	bd38      	pop	{r3, r4, r5, pc}
 8014c3c:	0802dfce 	.word	0x0802dfce
 8014c40:	0802dfd2 	.word	0x0802dfd2
 8014c44:	080299f0 	.word	0x080299f0

08014c48 <lv_dropdown_list_event>:
        draw_main(e);
    }
}

static void lv_dropdown_list_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8014c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    lv_event_code_t code = lv_event_get_code(e);
 8014c4a:	4608      	mov	r0, r1
{
 8014c4c:	460e      	mov	r6, r1
    lv_event_code_t code = lv_event_get_code(e);
 8014c4e:	f006 fb08 	bl	801b262 <lv_event_get_code>
    if(code != LV_EVENT_DRAW_POST) {
 8014c52:	2818      	cmp	r0, #24
    lv_event_code_t code = lv_event_get_code(e);
 8014c54:	4604      	mov	r4, r0
    if(code != LV_EVENT_DRAW_POST) {
 8014c56:	d119      	bne.n	8014c8c <lv_dropdown_list_event+0x44>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
        if(res != LV_RES_OK) return;
    }
    lv_obj_t * list = lv_event_get_target(e);
 8014c58:	4630      	mov	r0, r6
 8014c5a:	f006 fafe 	bl	801b25a <lv_event_get_target>
    }
}

static void draw_list(lv_event_t * e)
{
    lv_obj_t * list_obj = lv_event_get_target(e);
 8014c5e:	4630      	mov	r0, r6
 8014c60:	f006 fafb 	bl	801b25a <lv_event_get_target>
    lv_dropdown_list_t * list = (lv_dropdown_list_t *)list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
 8014c64:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8014c66:	4630      	mov	r0, r6
 8014c68:	f006 fb50 	bl	801b30c <lv_event_get_draw_ctx>

    /* Clip area might be too large too to shadow but
     * the selected option can be drawn on only the background*/
    lv_area_t clip_area_core;
    bool has_common;
    has_common = _lv_area_intersect(&clip_area_core, draw_ctx->clip_area, &dropdown->list->coords);
 8014c6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8014c6e:	4605      	mov	r5, r0
    has_common = _lv_area_intersect(&clip_area_core, draw_ctx->clip_area, &dropdown->list->coords);
 8014c70:	6881      	ldr	r1, [r0, #8]
 8014c72:	3214      	adds	r2, #20
 8014c74:	4668      	mov	r0, sp
 8014c76:	f00f fb30 	bl	80242da <_lv_area_intersect>
    if(has_common) {
 8014c7a:	2800      	cmp	r0, #0
 8014c7c:	d174      	bne.n	8014d68 <lv_dropdown_list_event+0x120>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 8014c7e:	4631      	mov	r1, r6
 8014c80:	4859      	ldr	r0, [pc, #356]	; (8014de8 <lv_dropdown_list_event+0x1a0>)
}
 8014c82:	b003      	add	sp, #12
 8014c84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 8014c88:	f006 bad1 	b.w	801b22e <lv_obj_event_base>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 8014c8c:	4631      	mov	r1, r6
 8014c8e:	4856      	ldr	r0, [pc, #344]	; (8014de8 <lv_dropdown_list_event+0x1a0>)
 8014c90:	f006 facd 	bl	801b22e <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8014c94:	2801      	cmp	r0, #1
 8014c96:	d140      	bne.n	8014d1a <lv_dropdown_list_event+0xd2>
    lv_obj_t * list = lv_event_get_target(e);
 8014c98:	4630      	mov	r0, r6
 8014c9a:	f006 fade 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_RELEASED) {
 8014c9e:	2c08      	cmp	r4, #8
    lv_obj_t * list = lv_event_get_target(e);
 8014ca0:	4605      	mov	r5, r0
    lv_obj_t * dropdown_obj = ((lv_dropdown_list_t *)list)->dropdown;
 8014ca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
    if(code == LV_EVENT_RELEASED) {
 8014ca4:	d141      	bne.n	8014d2a <lv_dropdown_list_event+0xe2>
        if(lv_indev_get_scroll_obj(lv_indev_get_act()) == NULL) {
 8014ca6:	f7ef fdb3 	bl	8004810 <lv_indev_get_act>
 8014caa:	f006 fccf 	bl	801b64c <lv_indev_get_scroll_obj>
 8014cae:	4606      	mov	r6, r0
 8014cb0:	bb98      	cbnz	r0, 8014d1a <lv_dropdown_list_event+0xd2>
 * @return LV_RES_INV if the list is not being deleted in the user callback. Else LV_RES_OK
 */
static lv_res_t list_release_handler(lv_obj_t * list_obj)
{
    lv_dropdown_list_t * list = (lv_dropdown_list_t *) list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
 8014cb2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;

    lv_indev_t * indev = lv_indev_get_act();
 8014cb4:	f7ef fdac 	bl	8004810 <lv_indev_get_act>
 8014cb8:	4605      	mov	r5, r0
    /*Leave edit mode once a new item is selected*/
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8014cba:	f006 fc92 	bl	801b5e2 <lv_indev_get_type>
 8014cbe:	2804      	cmp	r0, #4
 8014cc0:	d10c      	bne.n	8014cdc <lv_dropdown_list_event+0x94>
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8014cc2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 8014cc4:	4620      	mov	r0, r4
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8014cc6:	8723      	strh	r3, [r4, #56]	; 0x38
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 8014cc8:	f006 fee2 	bl	801ba90 <lv_obj_get_group>
 8014ccc:	4607      	mov	r7, r0
        if(lv_group_get_editing(g)) {
 8014cce:	f006 fc83 	bl	801b5d8 <lv_group_get_editing>
 8014cd2:	b118      	cbz	r0, 8014cdc <lv_dropdown_list_event+0x94>
            lv_group_set_editing(g, false);
 8014cd4:	4631      	mov	r1, r6
 8014cd6:	4638      	mov	r0, r7
 8014cd8:	f006 fc5d 	bl	801b596 <lv_group_set_editing>
        }
    }

    /*Search the clicked option (For KEYPAD and ENCODER the new value should be already set)*/
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8014cdc:	4628      	mov	r0, r5
 8014cde:	f006 fc80 	bl	801b5e2 <lv_indev_get_type>
 8014ce2:	2801      	cmp	r0, #1
 8014ce4:	d11b      	bne.n	8014d1e <lv_dropdown_list_event+0xd6>
        lv_point_t p;
        lv_indev_get_point(indev, &p);
 8014ce6:	4669      	mov	r1, sp
 8014ce8:	4628      	mov	r0, r5
 8014cea:	f006 fc8b 	bl	801b604 <lv_indev_get_point>
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 8014cee:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	f011 fd71 	bl	80267da <get_id_on_point>
 8014cf8:	86e0      	strh	r0, [r4, #54]	; 0x36
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8014cfa:	8720      	strh	r0, [r4, #56]	; 0x38
    }

    lv_dropdown_close(dropdown_obj);
 8014cfc:	4620      	mov	r0, r4
 8014cfe:	f011 ff3d 	bl	8026b7c <lv_dropdown_close>

    /*Invalidate to refresh the text*/
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 8014d02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014d04:	b913      	cbnz	r3, 8014d0c <lv_dropdown_list_event+0xc4>
 8014d06:	4620      	mov	r0, r4
 8014d08:	f007 ffc8 	bl	801cc9c <lv_obj_invalidate>

    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 8014d0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 8014d0e:	466a      	mov	r2, sp
 8014d10:	211c      	movs	r1, #28
 8014d12:	4620      	mov	r0, r4
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 8014d14:	9300      	str	r3, [sp, #0]
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 8014d16:	f7ef fd15 	bl	8004744 <lv_event_send>
}
 8014d1a:	b003      	add	sp, #12
 8014d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8014d1e:	4628      	mov	r0, r5
 8014d20:	f006 fc5f 	bl	801b5e2 <lv_indev_get_type>
 8014d24:	2803      	cmp	r0, #3
 8014d26:	d1e9      	bne.n	8014cfc <lv_dropdown_list_event+0xb4>
 8014d28:	e7dd      	b.n	8014ce6 <lv_dropdown_list_event+0x9e>
    else if(code == LV_EVENT_PRESSED) {
 8014d2a:	2c01      	cmp	r4, #1
 8014d2c:	d151      	bne.n	8014dd2 <lv_dropdown_list_event+0x18a>
{
    lv_dropdown_list_t * list = (lv_dropdown_list_t *) list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;

    lv_indev_t * indev = lv_indev_get_act();
 8014d2e:	f7ef fd6f 	bl	8004810 <lv_indev_get_act>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 8014d32:	4604      	mov	r4, r0
 8014d34:	2800      	cmp	r0, #0
 8014d36:	d0f0      	beq.n	8014d1a <lv_dropdown_list_event+0xd2>
 8014d38:	f006 fc53 	bl	801b5e2 <lv_indev_get_type>
 8014d3c:	2801      	cmp	r0, #1
 8014d3e:	d10d      	bne.n	8014d5c <lv_dropdown_list_event+0x114>
        lv_point_t p;
        lv_indev_get_point(indev, &p);
 8014d40:	4669      	mov	r1, sp
 8014d42:	4620      	mov	r0, r4
 8014d44:	f006 fc5e 	bl	801b604 <lv_indev_get_point>
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 8014d48:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8014d4c:	4630      	mov	r0, r6
 8014d4e:	f011 fd44 	bl	80267da <get_id_on_point>
 8014d52:	8770      	strh	r0, [r6, #58]	; 0x3a
        lv_obj_invalidate(list_obj);
 8014d54:	4628      	mov	r0, r5
 8014d56:	f007 ffa1 	bl	801cc9c <lv_obj_invalidate>
 8014d5a:	e7de      	b.n	8014d1a <lv_dropdown_list_event+0xd2>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	f006 fc40 	bl	801b5e2 <lv_indev_get_type>
 8014d62:	2803      	cmp	r0, #3
 8014d64:	d1d9      	bne.n	8014d1a <lv_dropdown_list_event+0xd2>
 8014d66:	e7eb      	b.n	8014d40 <lv_dropdown_list_event+0xf8>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8014d68:	68af      	ldr	r7, [r5, #8]
        draw_ctx->clip_area = &clip_area_core;
 8014d6a:	f8c5 d008 	str.w	sp, [r5, #8]
        if(dropdown->selected_highlight) {
 8014d6e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014d72:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8014d74:	f013 0f20 	tst.w	r3, #32
 8014d78:	d024      	beq.n	8014dc4 <lv_dropdown_list_event+0x17c>
            if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 8014d7a:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8014d7c:	4291      	cmp	r1, r2
 8014d7e:	d108      	bne.n	8014d92 <lv_dropdown_list_event+0x14a>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 8014d80:	2321      	movs	r3, #33	; 0x21
 8014d82:	460a      	mov	r2, r1
 8014d84:	4620      	mov	r0, r4
 8014d86:	4629      	mov	r1, r5
 8014d88:	f011 fccb 	bl	8026722 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 8014d8c:	2321      	movs	r3, #33	; 0x21
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014d8e:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8014d90:	e012      	b.n	8014db8 <lv_dropdown_list_event+0x170>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014d92:	2320      	movs	r3, #32
 8014d94:	4629      	mov	r1, r5
 8014d96:	4620      	mov	r0, r4
 8014d98:	f011 fcc3 	bl	8026722 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014d9c:	2320      	movs	r3, #32
 8014d9e:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8014da0:	4629      	mov	r1, r5
 8014da2:	4620      	mov	r0, r4
 8014da4:	f011 fc51 	bl	802664a <draw_box_label>
                draw_box(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 8014da8:	2301      	movs	r3, #1
 8014daa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014dac:	4629      	mov	r1, r5
 8014dae:	4620      	mov	r0, r4
 8014db0:	f011 fcb7 	bl	8026722 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 8014db4:	2301      	movs	r3, #1
 8014db6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014db8:	4629      	mov	r1, r5
 8014dba:	4620      	mov	r0, r4
 8014dbc:	f011 fc45 	bl	802664a <draw_box_label>
        draw_ctx->clip_area = clip_area_ori;
 8014dc0:	60af      	str	r7, [r5, #8]
 8014dc2:	e75c      	b.n	8014c7e <lv_dropdown_list_event+0x36>
            draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014dc4:	2320      	movs	r3, #32
 8014dc6:	4629      	mov	r1, r5
 8014dc8:	4620      	mov	r0, r4
 8014dca:	f011 fcaa 	bl	8026722 <draw_box>
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014dce:	2320      	movs	r3, #32
 8014dd0:	e7dd      	b.n	8014d8e <lv_dropdown_list_event+0x146>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8014dd2:	2c09      	cmp	r4, #9
 8014dd4:	d1a1      	bne.n	8014d1a <lv_dropdown_list_event+0xd2>
        dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8014dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014dda:	8773      	strh	r3, [r6, #58]	; 0x3a
}
 8014ddc:	b003      	add	sp, #12
 8014dde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_obj_invalidate(list);
 8014de2:	f007 bf5b 	b.w	801cc9c <lv_obj_invalidate>
 8014de6:	bf00      	nop
 8014de8:	080299f0 	.word	0x080299f0

08014dec <lv_dropdown_event>:
{
 8014dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8014df0:	48b1      	ldr	r0, [pc, #708]	; (80150b8 <lv_dropdown_event+0x2cc>)
{
 8014df2:	b09d      	sub	sp, #116	; 0x74
 8014df4:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8014df6:	f006 fa1a 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8014dfa:	2801      	cmp	r0, #1
 8014dfc:	d132      	bne.n	8014e64 <lv_dropdown_event+0x78>
    lv_event_code_t code = lv_event_get_code(e);
 8014dfe:	4630      	mov	r0, r6
 8014e00:	f006 fa2f 	bl	801b262 <lv_event_get_code>
 8014e04:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8014e06:	4630      	mov	r0, r6
 8014e08:	f006 fa27 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_FOCUSED) {
 8014e0c:	2d0e      	cmp	r5, #14
    lv_obj_t * obj = lv_event_get_target(e);
 8014e0e:	4604      	mov	r4, r0
    if(code == LV_EVENT_FOCUSED) {
 8014e10:	d112      	bne.n	8014e38 <lv_dropdown_event+0x4c>
        lv_group_t * g             = lv_obj_get_group(obj);
 8014e12:	f006 fe3d 	bl	801ba90 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8014e16:	f006 fbdf 	bl	801b5d8 <lv_group_get_editing>
 8014e1a:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8014e1c:	f7ef fcf8 	bl	8004810 <lv_indev_get_act>
 8014e20:	f006 fbdf 	bl	801b5e2 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8014e24:	2804      	cmp	r0, #4
 8014e26:	d11d      	bne.n	8014e64 <lv_dropdown_event+0x78>
            if(editing) {
 8014e28:	2d00      	cmp	r5, #0
 8014e2a:	d05c      	beq.n	8014ee6 <lv_dropdown_event+0xfa>
                lv_dropdown_open(obj);
 8014e2c:	4620      	mov	r0, r4
}
 8014e2e:	b01d      	add	sp, #116	; 0x74
 8014e30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                lv_dropdown_open(obj);
 8014e34:	f011 bda1 	b.w	802697a <lv_dropdown_open>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 8014e38:	2d15      	cmp	r5, #21
 8014e3a:	d80d      	bhi.n	8014e58 <lv_dropdown_event+0x6c>
 8014e3c:	2d07      	cmp	r5, #7
 8014e3e:	d911      	bls.n	8014e64 <lv_dropdown_event+0x78>
 8014e40:	3d08      	subs	r5, #8
 8014e42:	2d0d      	cmp	r5, #13
 8014e44:	d80e      	bhi.n	8014e64 <lv_dropdown_event+0x78>
 8014e46:	e8df f005 	tbb	[pc, r5]
 8014e4a:	0d5a      	.short	0x0d5a
 8014e4c:	220d0d0d 	.word	0x220d0d0d
 8014e50:	0d50500d 	.word	0x0d50500d
 8014e54:	600d0d0d 	.word	0x600d0d0d
 8014e58:	2d2a      	cmp	r5, #42	; 0x2a
 8014e5a:	d006      	beq.n	8014e6a <lv_dropdown_event+0x7e>
 8014e5c:	2d2c      	cmp	r5, #44	; 0x2c
 8014e5e:	d009      	beq.n	8014e74 <lv_dropdown_event+0x88>
 8014e60:	2d29      	cmp	r5, #41	; 0x29
 8014e62:	d002      	beq.n	8014e6a <lv_dropdown_event+0x7e>
}
 8014e64:	b01d      	add	sp, #116	; 0x74
 8014e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e6a:	b01d      	add	sp, #116	; 0x74
 8014e6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_self_size(obj);
 8014e70:	f007 bd89 	b.w	801c986 <lv_obj_refresh_self_size>
        lv_point_t * p = lv_event_get_param(e);
 8014e74:	4630      	mov	r0, r6
 8014e76:	f006 f9f8 	bl	801b26a <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8014e7a:	2257      	movs	r2, #87	; 0x57
 8014e7c:	4605      	mov	r5, r0
 8014e7e:	2100      	movs	r1, #0
 8014e80:	4620      	mov	r0, r4
 8014e82:	f008 fe31 	bl	801dae8 <lv_obj_get_style_prop>
 8014e86:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
        p->y = lv_font_get_line_height(font);
 8014e8a:	806b      	strh	r3, [r5, #2]
 8014e8c:	e7ea      	b.n	8014e64 <lv_dropdown_event+0x78>
        char c = *((char *)lv_event_get_param(e));
 8014e8e:	4630      	mov	r0, r6
 8014e90:	f006 f9eb 	bl	801b26a <lv_event_get_param>
 8014e94:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8014e96:	f1a3 0212 	sub.w	r2, r3, #18
 8014e9a:	2a01      	cmp	r2, #1
 8014e9c:	d810      	bhi.n	8014ec0 <lv_dropdown_event+0xd4>
            if(!lv_dropdown_is_open(obj)) {
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	f011 fe7f 	bl	8026ba2 <lv_dropdown_is_open>
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	d0c1      	beq.n	8014e2c <lv_dropdown_event+0x40>
            else if(dropdown->sel_opt_id + 1 < dropdown->option_cnt) {
 8014ea8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8014eaa:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8014eac:	3301      	adds	r3, #1
 8014eae:	4293      	cmp	r3, r2
 8014eb0:	dad8      	bge.n	8014e64 <lv_dropdown_event+0x78>
                position_to_selected(obj);
 8014eb2:	4620      	mov	r0, r4
                dropdown->sel_opt_id--;
 8014eb4:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 8014eb6:	b01d      	add	sp, #116	; 0x74
 8014eb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                position_to_selected(obj);
 8014ebc:	f011 bb71 	b.w	80265a2 <position_to_selected>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8014ec0:	2b14      	cmp	r3, #20
 8014ec2:	d004      	beq.n	8014ece <lv_dropdown_event+0xe2>
 8014ec4:	d80d      	bhi.n	8014ee2 <lv_dropdown_event+0xf6>
 8014ec6:	2b0a      	cmp	r3, #10
 8014ec8:	d015      	beq.n	8014ef6 <lv_dropdown_event+0x10a>
 8014eca:	2b11      	cmp	r3, #17
 8014ecc:	d1ca      	bne.n	8014e64 <lv_dropdown_event+0x78>
            if(!lv_dropdown_is_open(obj)) {
 8014ece:	4620      	mov	r0, r4
 8014ed0:	f011 fe67 	bl	8026ba2 <lv_dropdown_is_open>
 8014ed4:	2800      	cmp	r0, #0
 8014ed6:	d0a9      	beq.n	8014e2c <lv_dropdown_event+0x40>
            else if(dropdown->sel_opt_id > 0) {
 8014ed8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d0c2      	beq.n	8014e64 <lv_dropdown_event+0x78>
                dropdown->sel_opt_id--;
 8014ede:	3b01      	subs	r3, #1
 8014ee0:	e7e7      	b.n	8014eb2 <lv_dropdown_event+0xc6>
 8014ee2:	2b1b      	cmp	r3, #27
 8014ee4:	d1be      	bne.n	8014e64 <lv_dropdown_event+0x78>
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 8014ee6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8014ee8:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_dropdown_close(obj);
 8014eea:	4620      	mov	r0, r4
}
 8014eec:	b01d      	add	sp, #116	; 0x74
 8014eee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            lv_dropdown_close(obj);
 8014ef2:	f011 be43 	b.w	8026b7c <lv_dropdown_close>
            lv_obj_t * indev_obj = lv_indev_get_obj_act();
 8014ef6:	f7ef fce1 	bl	80048bc <lv_indev_get_obj_act>
            if(indev_obj != obj) {
 8014efa:	4284      	cmp	r4, r0
 8014efc:	d0b2      	beq.n	8014e64 <lv_dropdown_event+0x78>
                res = btn_release_handler(obj);
 8014efe:	4620      	mov	r0, r4
}
 8014f00:	b01d      	add	sp, #116	; 0x74
 8014f02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                res = btn_release_handler(obj);
 8014f06:	f011 be55 	b.w	8026bb4 <btn_release_handler.isra.0>
    lv_obj_t * obj = lv_event_get_target(e);
 8014f0a:	4630      	mov	r0, r6
 8014f0c:	f006 f9a5 	bl	801b25a <lv_event_get_target>
 8014f10:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8014f12:	4630      	mov	r0, r6
 8014f14:	f006 f9fa 	bl	801b30c <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8014f18:	2232      	movs	r2, #50	; 0x32
 8014f1a:	2100      	movs	r1, #0
 8014f1c:	4682      	mov	sl, r0
 8014f1e:	4620      	mov	r0, r4
 8014f20:	f008 fde2 	bl	801dae8 <lv_obj_get_style_prop>
 8014f24:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014f26:	2212      	movs	r2, #18
 8014f28:	2100      	movs	r1, #0
 8014f2a:	4620      	mov	r0, r4
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8014f2c:	b2b5      	uxth	r5, r6
 8014f2e:	f008 fddb 	bl	801dae8 <lv_obj_get_style_prop>
 8014f32:	fa10 f686 	uxtah	r6, r0, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014f36:	2213      	movs	r2, #19
 8014f38:	2100      	movs	r1, #0
 8014f3a:	b2b3      	uxth	r3, r6
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	9304      	str	r3, [sp, #16]
 8014f40:	f008 fdd2 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014f44:	2210      	movs	r2, #16
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8014f46:	eb05 0900 	add.w	r9, r5, r0
 8014f4a:	2100      	movs	r1, #0
 8014f4c:	4620      	mov	r0, r4
 8014f4e:	f008 fdcb 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8014f52:	4405      	add	r5, r0
    lv_draw_label_dsc_init(&symbol_dsc);
 8014f54:	a80c      	add	r0, sp, #48	; 0x30
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8014f56:	fa1f f989 	uxth.w	r9, r9
    lv_draw_label_dsc_init(&symbol_dsc);
 8014f5a:	f7f2 fed9 	bl	8007d10 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_INDICATOR, &symbol_dsc);
 8014f5e:	aa0c      	add	r2, sp, #48	; 0x30
 8014f60:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014f64:	4620      	mov	r0, r4
 8014f66:	f007 f916 	bl	801c196 <lv_obj_init_draw_label_dsc>
    if(dropdown->text) opt_txt = dropdown->text;
 8014f6a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8014f6c:	b2ad      	uxth	r5, r5
    if(dropdown->text) opt_txt = dropdown->text;
 8014f6e:	b947      	cbnz	r7, 8014f82 <lv_dropdown_event+0x196>
        char * buf = lv_mem_buf_get(128);
 8014f70:	2080      	movs	r0, #128	; 0x80
 8014f72:	f7fd fc21 	bl	80127b8 <lv_mem_buf_get>
        lv_dropdown_get_selected_str(obj, buf, 128);
 8014f76:	2280      	movs	r2, #128	; 0x80
        char * buf = lv_mem_buf_get(128);
 8014f78:	4607      	mov	r7, r0
        lv_dropdown_get_selected_str(obj, buf, 128);
 8014f7a:	4601      	mov	r1, r0
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	f011 fcd0 	bl	8026922 <lv_dropdown_get_selected_str>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8014f82:	2216      	movs	r2, #22
 8014f84:	2100      	movs	r1, #0
 8014f86:	4620      	mov	r0, r4
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 8014f88:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
 8014f8c:	f008 fdac 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8014f90:	fa5f f880 	uxtb.w	r8, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 8014f94:	f1b8 0f01 	cmp.w	r8, #1
 8014f98:	d006      	beq.n	8014fa8 <lv_dropdown_event+0x1bc>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 8014f9a:	f006 060f 	and.w	r6, r6, #15
 8014f9e:	1e73      	subs	r3, r6, #1
 8014fa0:	f1d3 0800 	rsbs	r8, r3, #0
 8014fa4:	eb48 0803 	adc.w	r8, r8, r3
    if(dropdown->symbol) {
 8014fa8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014faa:	2800      	cmp	r0, #0
 8014fac:	d03d      	beq.n	801502a <lv_dropdown_event+0x23e>
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 8014fae:	f009 fc79 	bl	801e8a4 <lv_img_src_get_type>
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8014fb2:	2802      	cmp	r0, #2
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 8014fb4:	4683      	mov	fp, r0
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8014fb6:	d16c      	bne.n	8015092 <lv_dropdown_event+0x2a6>
            lv_txt_get_size(&size, dropdown->symbol, symbol_dsc.font, symbol_dsc.letter_space, symbol_dsc.line_space, LV_COORD_MAX,
 8014fb8:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 8014fbc:	a814      	add	r0, sp, #80	; 0x50
 8014fbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014fc0:	9302      	str	r3, [sp, #8]
 8014fc2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8014fc6:	9301      	str	r3, [sp, #4]
 8014fc8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8014fcc:	9300      	str	r3, [sp, #0]
 8014fce:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8014fd2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014fd4:	f010 fc64 	bl	80258a0 <lv_txt_get_size>
            symbol_w = size.x;
 8014fd8:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
            symbol_h = size.y;
 8014fdc:	f9bd 6052 	ldrsh.w	r6, [sp, #82]	; 0x52
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8014fe0:	b298      	uxth	r0, r3
        if(symbol_to_left) {
 8014fe2:	f1b8 0f00 	cmp.w	r8, #0
 8014fe6:	d069      	beq.n	80150bc <lv_dropdown_event+0x2d0>
            symbol_area.x1 = obj->coords.x1 + left;
 8014fe8:	9a04      	ldr	r2, [sp, #16]
 8014fea:	8aa1      	ldrh	r1, [r4, #20]
 8014fec:	4411      	add	r1, r2
 8014fee:	b28a      	uxth	r2, r1
 8014ff0:	b209      	sxth	r1, r1
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8014ff2:	3a01      	subs	r2, #1
 8014ff4:	4402      	add	r2, r0
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8014ff6:	b212      	sxth	r2, r2
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8014ff8:	f1bb 0f02 	cmp.w	fp, #2
            symbol_area.x1 = obj->coords.x1 + left;
 8014ffc:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8015000:	b2b1      	uxth	r1, r6
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8015002:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            symbol_area.y1 = obj->coords.y1 + top;
 8015006:	8ae2      	ldrh	r2, [r4, #22]
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8015008:	d160      	bne.n	80150cc <lv_dropdown_event+0x2e0>
            symbol_area.y1 = obj->coords.y1 + top;
 801500a:	442a      	add	r2, r5
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 801500c:	2300      	movs	r3, #0
 801500e:	4650      	mov	r0, sl
            symbol_area.y1 = obj->coords.y1 + top;
 8015010:	b292      	uxth	r2, r2
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 8015012:	9300      	str	r3, [sp, #0]
            symbol_area.y1 = obj->coords.y1 + top;
 8015014:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8015018:	3a01      	subs	r2, #1
 801501a:	440a      	add	r2, r1
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 801501c:	a90c      	add	r1, sp, #48	; 0x30
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801501e:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 8015022:	aa0a      	add	r2, sp, #40	; 0x28
 8015024:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015026:	f7f2 fe8b 	bl	8007d40 <lv_draw_label>
    lv_draw_label_dsc_init(&label_dsc);
 801502a:	a814      	add	r0, sp, #80	; 0x50
 801502c:	f7f2 fe70 	bl	8007d10 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 8015030:	aa14      	add	r2, sp, #80	; 0x50
 8015032:	2100      	movs	r1, #0
 8015034:	4620      	mov	r0, r4
 8015036:	f007 f8ae 	bl	801c196 <lv_obj_init_draw_label_dsc>
    lv_txt_get_size(&size, opt_txt, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 801503a:	f89d 306d 	ldrb.w	r3, [sp, #109]	; 0x6d
 801503e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015040:	4639      	mov	r1, r7
 8015042:	9302      	str	r3, [sp, #8]
 8015044:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8015048:	a809      	add	r0, sp, #36	; 0x24
 801504a:	9301      	str	r3, [sp, #4]
 801504c:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 8015050:	9300      	str	r3, [sp, #0]
 8015052:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8015056:	f010 fc23 	bl	80258a0 <lv_txt_get_size>
    txt_area.y1 = obj->coords.y1 + top;
 801505a:	8ae3      	ldrh	r3, [r4, #22]
 801505c:	441d      	add	r5, r3
    txt_area.y2 = txt_area.y1 + size.y;
 801505e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    txt_area.y1 = obj->coords.y1 + top;
 8015062:	b2ad      	uxth	r5, r5
 8015064:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
    txt_area.y2 = txt_area.y1 + size.y;
 8015068:	441d      	add	r5, r3
 801506a:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    if(dropdown->symbol == NULL) {
 801506e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015070:	2b00      	cmp	r3, #0
 8015072:	d162      	bne.n	801513a <lv_dropdown_event+0x34e>
        txt_area.x1 = obj->coords.x1 + (lv_obj_get_width(obj) - size.x) / 2;
 8015074:	4620      	mov	r0, r4
 8015076:	8aa5      	ldrh	r5, [r4, #20]
 8015078:	f007 fc10 	bl	801c89c <lv_obj_get_width>
 801507c:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8015080:	1a80      	subs	r0, r0, r2
 8015082:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8015086:	eb05 0360 	add.w	r3, r5, r0, asr #1
            txt_area.x1 = obj->coords.x1 + left;
 801508a:	b219      	sxth	r1, r3
            txt_area.x2 = txt_area.x1 + size.x;
 801508c:	fa12 f383 	uxtah	r3, r2, r3
 8015090:	e05e      	b.n	8015150 <lv_dropdown_event+0x364>
            lv_res_t res = lv_img_decoder_get_info(dropdown->symbol, &header);
 8015092:	a914      	add	r1, sp, #80	; 0x50
 8015094:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015096:	f7f3 ff87 	bl	8008fa8 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 801509a:	2801      	cmp	r0, #1
                symbol_w = header.w;
 801509c:	bf09      	itett	eq
 801509e:	9b14      	ldreq	r3, [sp, #80]	; 0x50
                symbol_h = -1;
 80150a0:	f04f 36ff 	movne.w	r6, #4294967295
                symbol_h = header.h;
 80150a4:	f8bd 6052 	ldrheq.w	r6, [sp, #82]	; 0x52
                symbol_w = header.w;
 80150a8:	f3c3 238a 	ubfxeq	r3, r3, #10, #11
                symbol_w = -1;
 80150ac:	bf14      	ite	ne
 80150ae:	4633      	movne	r3, r6
                symbol_h = header.h;
 80150b0:	f3c6 164a 	ubfxeq	r6, r6, #5, #11
 80150b4:	e794      	b.n	8014fe0 <lv_dropdown_event+0x1f4>
 80150b6:	bf00      	nop
 80150b8:	08029a0c 	.word	0x08029a0c
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 80150bc:	8b22      	ldrh	r2, [r4, #24]
 80150be:	eba2 0209 	sub.w	r2, r2, r9
 80150c2:	b292      	uxth	r2, r2
 80150c4:	1a10      	subs	r0, r2, r0
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 80150c6:	3a01      	subs	r2, #1
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 80150c8:	b201      	sxth	r1, r0
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 80150ca:	e794      	b.n	8014ff6 <lv_dropdown_event+0x20a>
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 80150cc:	4620      	mov	r0, r4
 80150ce:	9305      	str	r3, [sp, #20]
 80150d0:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80150d4:	f007 fbe8 	bl	801c8a8 <lv_obj_get_height>
 80150d8:	1b80      	subs	r0, r0, r6
 80150da:	9a07      	ldr	r2, [sp, #28]
            img_dsc.pivot.y = symbol_h / 2;
 80150dc:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 80150e0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 80150e4:	9906      	ldr	r1, [sp, #24]
            img_dsc.pivot.y = symbol_h / 2;
 80150e6:	1076      	asrs	r6, r6, #1
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 80150e8:	eb02 0260 	add.w	r2, r2, r0, asr #1
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 80150ec:	3901      	subs	r1, #1
            lv_draw_img_dsc_init(&img_dsc);
 80150ee:	a814      	add	r0, sp, #80	; 0x50
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 80150f0:	b292      	uxth	r2, r2
 80150f2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 80150f6:	440a      	add	r2, r1
 80150f8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            lv_draw_img_dsc_init(&img_dsc);
 80150fc:	f009 fbae 	bl	801e85c <lv_draw_img_dsc_init>
            lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 8015100:	aa14      	add	r2, sp, #80	; 0x50
 8015102:	4620      	mov	r0, r4
 8015104:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8015108:	f007 f891 	bl	801c22e <lv_obj_init_draw_img_dsc>
            img_dsc.pivot.x = symbol_w / 2;
 801510c:	9b05      	ldr	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801510e:	226d      	movs	r2, #109	; 0x6d
 8015110:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8015114:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8015118:	4620      	mov	r0, r4
            img_dsc.pivot.y = symbol_h / 2;
 801511a:	f8ad 6056 	strh.w	r6, [sp, #86]	; 0x56
            img_dsc.pivot.x = symbol_w / 2;
 801511e:	105b      	asrs	r3, r3, #1
 8015120:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 8015124:	f008 fce0 	bl	801dae8 <lv_obj_get_style_prop>
            lv_draw_img(draw_ctx, &img_dsc, &symbol_area, dropdown->symbol);
 8015128:	aa0a      	add	r2, sp, #40	; 0x28
            img_dsc.angle = lv_obj_get_style_transform_angle(obj, LV_PART_INDICATOR);
 801512a:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
            lv_draw_img(draw_ctx, &img_dsc, &symbol_area, dropdown->symbol);
 801512e:	a914      	add	r1, sp, #80	; 0x50
 8015130:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015132:	4650      	mov	r0, sl
 8015134:	f7f2 fcd6 	bl	8007ae4 <lv_draw_img>
 8015138:	e777      	b.n	801502a <lv_dropdown_event+0x23e>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 801513a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
        if(symbol_to_left) {
 801513e:	f1b8 0f00 	cmp.w	r8, #0
 8015142:	d01a      	beq.n	801517a <lv_dropdown_event+0x38e>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 8015144:	8b23      	ldrh	r3, [r4, #24]
 8015146:	eba3 0309 	sub.w	r3, r3, r9
 801514a:	b29b      	uxth	r3, r3
 801514c:	1a9a      	subs	r2, r3, r2
 801514e:	b211      	sxth	r1, r2
            txt_area.x2 = txt_area.x1 + size.x;
 8015150:	b21b      	sxth	r3, r3
        txt_area.x1 = obj->coords.x1 + (lv_obj_get_width(obj) - size.x) / 2;
 8015152:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
    lv_draw_label(draw_ctx, &label_dsc, &txt_area, opt_txt, NULL);
 8015156:	aa0a      	add	r2, sp, #40	; 0x28
 8015158:	a914      	add	r1, sp, #80	; 0x50
        txt_area.x2 = txt_area.x1 + size.x;
 801515a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    lv_draw_label(draw_ctx, &label_dsc, &txt_area, opt_txt, NULL);
 801515e:	2300      	movs	r3, #0
 8015160:	4650      	mov	r0, sl
 8015162:	9300      	str	r3, [sp, #0]
 8015164:	463b      	mov	r3, r7
 8015166:	f7f2 fdeb 	bl	8007d40 <lv_draw_label>
    if(dropdown->text == NULL) {
 801516a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801516c:	2b00      	cmp	r3, #0
 801516e:	f47f ae79 	bne.w	8014e64 <lv_dropdown_event+0x78>
        lv_mem_buf_release((char *)opt_txt);
 8015172:	4638      	mov	r0, r7
 8015174:	f7fd fb6a 	bl	801284c <lv_mem_buf_release>
}
 8015178:	e674      	b.n	8014e64 <lv_dropdown_event+0x78>
            txt_area.x1 = obj->coords.x1 + left;
 801517a:	8aa3      	ldrh	r3, [r4, #20]
 801517c:	9904      	ldr	r1, [sp, #16]
 801517e:	4419      	add	r1, r3
 8015180:	460b      	mov	r3, r1
 8015182:	e782      	b.n	801508a <lv_dropdown_event+0x29e>

08015184 <lv_img_create>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_img_create(lv_obj_t * parent)
{
 8015184:	4601      	mov	r1, r0
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8015186:	4804      	ldr	r0, [pc, #16]	; (8015198 <lv_img_create+0x14>)
{
 8015188:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801518a:	f7ef fe49 	bl	8004e20 <lv_obj_class_create_obj>
 801518e:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8015190:	f006 fe54 	bl	801be3c <lv_obj_class_init_obj>
    return obj;
}
 8015194:	4620      	mov	r0, r4
 8015196:	bd10      	pop	{r4, pc}
 8015198:	08029a28 	.word	0x08029a28

0801519c <lv_img_event>:
        lv_area_get_width(&area_transform), lv_area_get_height(&area_transform)
    };
}

static void lv_img_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 80151a0:	4608      	mov	r0, r1
{
 80151a2:	b099      	sub	sp, #100	; 0x64
 80151a4:	460d      	mov	r5, r1
    lv_event_code_t code = lv_event_get_code(e);
 80151a6:	f006 f85c 	bl	801b262 <lv_event_get_code>

    /*Ancestor events will be called during drawing*/
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 80151aa:	2815      	cmp	r0, #21
    lv_event_code_t code = lv_event_get_code(e);
 80151ac:	4606      	mov	r6, r0
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 80151ae:	d11c      	bne.n	80151ea <lv_img_event+0x4e>
        /*Call the ancestor's event handler*/
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
        if(res != LV_RES_OK) return;
    }

    lv_obj_t * obj = lv_event_get_target(e);
 80151b0:	4628      	mov	r0, r5
 80151b2:	f006 f852 	bl	801b25a <lv_event_get_target>
    }
}

static void draw_img(lv_event_t * e)
{
    lv_event_code_t code = lv_event_get_code(e);
 80151b6:	4628      	mov	r0, r5
 80151b8:	f006 f853 	bl	801b262 <lv_event_get_code>
 80151bc:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80151be:	4628      	mov	r0, r5
 80151c0:	f006 f84b 	bl	801b25a <lv_event_get_target>
    lv_img_t * img = (lv_img_t *)obj;
    if(code == LV_EVENT_COVER_CHECK) {
 80151c4:	2e12      	cmp	r6, #18
    lv_obj_t * obj = lv_event_get_target(e);
 80151c6:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 80151c8:	f040 8154 	bne.w	8015474 <lv_img_event+0x2d8>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 80151cc:	4628      	mov	r0, r5
 80151ce:	f006 f84c 	bl	801b26a <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 80151d2:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 80151d4:	4606      	mov	r6, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 80151d6:	2b02      	cmp	r3, #2
 80151d8:	d03d      	beq.n	8015256 <lv_img_event+0xba>
        if(img->src_type == LV_IMG_SRC_UNKNOWN || img->src_type == LV_IMG_SRC_SYMBOL) {
 80151da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80151de:	079a      	lsls	r2, r3, #30
 80151e0:	f140 80f4 	bpl.w	80153cc <lv_img_event+0x230>
            a.y1 += obj->coords.y1;
            a.x2 += obj->coords.x1;
            a.y2 += obj->coords.y1;

            if(_lv_area_is_in(clip_area, &a, 0) == false) {
                info->res = LV_COVER_RES_NOT_COVER;
 80151e4:	2301      	movs	r3, #1
 80151e6:	7033      	strb	r3, [r6, #0]
                return;
 80151e8:	e035      	b.n	8015256 <lv_img_event+0xba>
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 80151ea:	2818      	cmp	r0, #24
 80151ec:	d0e0      	beq.n	80151b0 <lv_img_event+0x14>
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 80151ee:	4629      	mov	r1, r5
 80151f0:	489f      	ldr	r0, [pc, #636]	; (8015470 <lv_img_event+0x2d4>)
 80151f2:	f006 f81c 	bl	801b22e <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 80151f6:	2801      	cmp	r0, #1
 80151f8:	d12d      	bne.n	8015256 <lv_img_event+0xba>
    lv_obj_t * obj = lv_event_get_target(e);
 80151fa:	4628      	mov	r0, r5
 80151fc:	f006 f82d 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 8015200:	2e2a      	cmp	r6, #42	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 8015202:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8015204:	d110      	bne.n	8015228 <lv_img_event+0x8c>
        if(img->src_type == LV_IMG_SRC_SYMBOL) {
 8015206:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801520a:	f003 0303 	and.w	r3, r3, #3
 801520e:	2b02      	cmp	r3, #2
 8015210:	d105      	bne.n	801521e <lv_img_event+0x82>
            lv_img_set_src(obj, img->src);
 8015212:	6a41      	ldr	r1, [r0, #36]	; 0x24
}
 8015214:	b019      	add	sp, #100	; 0x64
 8015216:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            lv_img_set_src(obj, img->src);
 801521a:	f011 bd6c 	b.w	8026cf6 <lv_img_set_src>
}
 801521e:	b019      	add	sp, #100	; 0x64
 8015220:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            lv_obj_refresh_ext_draw_size(obj);
 8015224:	f007 b96c 	b.w	801c500 <lv_obj_refresh_ext_draw_size>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8015228:	2e18      	cmp	r6, #24
 801522a:	d811      	bhi.n	8015250 <lv_img_event+0xb4>
 801522c:	2e10      	cmp	r6, #16
 801522e:	d912      	bls.n	8015256 <lv_img_event+0xba>
 8015230:	3e11      	subs	r6, #17
 8015232:	2e04      	cmp	r6, #4
 8015234:	d80f      	bhi.n	8015256 <lv_img_event+0xba>
 8015236:	a301      	add	r3, pc, #4	; (adr r3, 801523c <lv_img_event+0xa0>)
 8015238:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 801523c:	080152dd 	.word	0x080152dd
 8015240:	080151b7 	.word	0x080151b7
 8015244:	0801525d 	.word	0x0801525d
 8015248:	08015257 	.word	0x08015257
 801524c:	080151b7 	.word	0x080151b7
 8015250:	2e2c      	cmp	r6, #44	; 0x2c
 8015252:	f000 80a2 	beq.w	801539a <lv_img_event+0x1fe>
}
 8015256:	b019      	add	sp, #100	; 0x64
 8015258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_coord_t * s = lv_event_get_param(e);
 801525c:	4628      	mov	r0, r5
 801525e:	f006 f804 	bl	801b26a <lv_event_get_param>
        if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) {
 8015262:	8e23      	ldrh	r3, [r4, #48]	; 0x30
        lv_coord_t * s = lv_event_get_param(e);
 8015264:	4605      	mov	r5, r0
        if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) {
 8015266:	b91b      	cbnz	r3, 8015270 <lv_img_event+0xd4>
 8015268:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801526a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801526e:	d0f2      	beq.n	8015256 <lv_img_event+0xba>
            lv_coord_t w = lv_obj_get_width(obj);
 8015270:	4620      	mov	r0, r4
 8015272:	f007 fb13 	bl	801c89c <lv_obj_get_width>
 8015276:	4607      	mov	r7, r0
            lv_coord_t h = lv_obj_get_height(obj);
 8015278:	4620      	mov	r0, r4
 801527a:	f007 fb15 	bl	801c8a8 <lv_obj_get_height>
            _lv_img_buf_get_transformed_area(&a, w, h, img->angle, img->zoom, &img->pivot);
 801527e:	f104 0232 	add.w	r2, r4, #50	; 0x32
 8015282:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
            lv_coord_t h = lv_obj_get_height(obj);
 8015286:	4606      	mov	r6, r0
            _lv_img_buf_get_transformed_area(&a, w, h, img->angle, img->zoom, &img->pivot);
 8015288:	9201      	str	r2, [sp, #4]
 801528a:	4639      	mov	r1, r7
 801528c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801528e:	9200      	str	r2, [sp, #0]
 8015290:	4602      	mov	r2, r0
 8015292:	a810      	add	r0, sp, #64	; 0x40
 8015294:	f00a f8e2 	bl	801f45c <_lv_img_buf_get_transformed_area>
            *s = LV_MAX(*s, -a.x1);
 8015298:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801529c:	f9b5 3000 	ldrsh.w	r3, [r5]
 80152a0:	4252      	negs	r2, r2
 80152a2:	429a      	cmp	r2, r3
 80152a4:	bfb8      	it	lt
 80152a6:	461a      	movlt	r2, r3
 80152a8:	b212      	sxth	r2, r2
 80152aa:	802a      	strh	r2, [r5, #0]
            *s = LV_MAX(*s, -a.y1);
 80152ac:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80152b0:	425b      	negs	r3, r3
 80152b2:	4293      	cmp	r3, r2
 80152b4:	bfb8      	it	lt
 80152b6:	4613      	movlt	r3, r2
 80152b8:	b21b      	sxth	r3, r3
 80152ba:	802b      	strh	r3, [r5, #0]
            *s = LV_MAX(*s, a.x2 - w);
 80152bc:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80152c0:	1bc9      	subs	r1, r1, r7
 80152c2:	4299      	cmp	r1, r3
 80152c4:	bfb8      	it	lt
 80152c6:	4619      	movlt	r1, r3
 80152c8:	b209      	sxth	r1, r1
 80152ca:	8029      	strh	r1, [r5, #0]
            *s = LV_MAX(*s, a.y2 - h);
 80152cc:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 80152d0:	1b9b      	subs	r3, r3, r6
 80152d2:	428b      	cmp	r3, r1
 80152d4:	bfb8      	it	lt
 80152d6:	460b      	movlt	r3, r1
 80152d8:	802b      	strh	r3, [r5, #0]
 80152da:	e7bc      	b.n	8015256 <lv_img_event+0xba>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 80152dc:	4628      	mov	r0, r5
 80152de:	f005 ffc4 	bl	801b26a <lv_event_get_param>
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 80152e2:	f9b4 602c 	ldrsh.w	r6, [r4, #44]	; 0x2c
        lv_hit_test_info_t * info = lv_event_get_param(e);
 80152e6:	4605      	mov	r5, r0
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 80152e8:	4620      	mov	r0, r4
 80152ea:	f007 fad7 	bl	801c89c <lv_obj_get_width>
 80152ee:	4286      	cmp	r6, r0
 80152f0:	d14e      	bne.n	8015390 <lv_img_event+0x1f4>
 80152f2:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
 80152f6:	4620      	mov	r0, r4
 80152f8:	f007 fad6 	bl	801c8a8 <lv_obj_get_height>
 80152fc:	4286      	cmp	r6, r0
 80152fe:	d147      	bne.n	8015390 <lv_img_event+0x1f4>
 8015300:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015306:	d113      	bne.n	8015330 <lv_img_event+0x194>
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 8015308:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801530a:	b98b      	cbnz	r3, 8015330 <lv_img_event+0x194>
 801530c:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8015310:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 8015314:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8015318:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 801531c:	d108      	bne.n	8015330 <lv_img_event+0x194>
 801531e:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 8015322:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8015326:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801532a:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 801532e:	d02f      	beq.n	8015390 <lv_img_event+0x1f4>
            lv_coord_t w = lv_obj_get_width(obj);
 8015330:	4620      	mov	r0, r4
 8015332:	f007 fab3 	bl	801c89c <lv_obj_get_width>
 8015336:	4606      	mov	r6, r0
            lv_coord_t h = lv_obj_get_height(obj);
 8015338:	4620      	mov	r0, r4
 801533a:	f007 fab5 	bl	801c8a8 <lv_obj_get_height>
            _lv_img_buf_get_transformed_area(&coords, w, h, img->angle, img->zoom, &img->pivot);
 801533e:	f104 0132 	add.w	r1, r4, #50	; 0x32
 8015342:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
            lv_coord_t h = lv_obj_get_height(obj);
 8015346:	4602      	mov	r2, r0
            _lv_img_buf_get_transformed_area(&coords, w, h, img->angle, img->zoom, &img->pivot);
 8015348:	9101      	str	r1, [sp, #4]
 801534a:	a810      	add	r0, sp, #64	; 0x40
 801534c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801534e:	9100      	str	r1, [sp, #0]
 8015350:	4631      	mov	r1, r6
 8015352:	f00a f883 	bl	801f45c <_lv_img_buf_get_transformed_area>
            coords.x1 += obj->coords.x1;
 8015356:	8aa2      	ldrh	r2, [r4, #20]
 8015358:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
            coords.y1 += obj->coords.y1;
 801535c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
            coords.x1 += obj->coords.x1;
 8015360:	4413      	add	r3, r2
 8015362:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            coords.y1 += obj->coords.y1;
 8015366:	8ae3      	ldrh	r3, [r4, #22]
 8015368:	4419      	add	r1, r3
 801536a:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            coords.x2 += obj->coords.x1;
 801536e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8015372:	440a      	add	r2, r1
 8015374:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            coords.y2 += obj->coords.y1;
 8015378:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 801537c:	4413      	add	r3, r2
 801537e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 8015382:	2200      	movs	r2, #0
 8015384:	6829      	ldr	r1, [r5, #0]
 8015386:	a810      	add	r0, sp, #64	; 0x40
 8015388:	f00e fff4 	bl	8024374 <_lv_area_is_point_on>
 801538c:	7128      	strb	r0, [r5, #4]
 801538e:	e762      	b.n	8015256 <lv_img_event+0xba>
            lv_obj_get_click_area(obj, &a);
 8015390:	a910      	add	r1, sp, #64	; 0x40
 8015392:	4620      	mov	r0, r4
 8015394:	f007 fd62 	bl	801ce5c <lv_obj_get_click_area>
 8015398:	e7f3      	b.n	8015382 <lv_img_event+0x1e6>
        lv_point_t * p = lv_event_get_param(e);
 801539a:	4628      	mov	r0, r5
 801539c:	f005 ff65 	bl	801b26a <lv_event_get_param>
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 80153a0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
        lv_point_t * p = lv_event_get_param(e);
 80153a4:	4605      	mov	r5, r0
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 80153a6:	f003 0303 	and.w	r3, r3, #3
 80153aa:	2b01      	cmp	r3, #1
 80153ac:	d107      	bne.n	80153be <lv_img_event+0x222>
            *p = lv_img_get_transformed_size(obj);
 80153ae:	4620      	mov	r0, r4
 80153b0:	f011 fc3d 	bl	8026c2e <lv_img_get_transformed_size>
 80153b4:	8028      	strh	r0, [r5, #0]
 80153b6:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80153ba:	8068      	strh	r0, [r5, #2]
 80153bc:	e74b      	b.n	8015256 <lv_img_event+0xba>
            p->x = img->w;
 80153be:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80153c2:	8003      	strh	r3, [r0, #0]
            p->y = img->h;
 80153c4:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 80153c8:	8043      	strh	r3, [r0, #2]
 80153ca:	e744      	b.n	8015256 <lv_img_event+0xba>
        if(img->cf != LV_IMG_CF_TRUE_COLOR && img->cf != LV_IMG_CF_RAW) {
 80153cc:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80153d0:	2b10      	cmp	r3, #16
 80153d2:	d002      	beq.n	80153da <lv_img_event+0x23e>
 80153d4:	2b04      	cmp	r3, #4
 80153d6:	f47f af05 	bne.w	80151e4 <lv_img_event+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 80153da:	2246      	movs	r2, #70	; 0x46
 80153dc:	2100      	movs	r1, #0
 80153de:	4620      	mov	r0, r4
 80153e0:	f008 fb82 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80153e4:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_img_opa(obj, LV_PART_MAIN) != LV_OPA_COVER) {
 80153e6:	28ff      	cmp	r0, #255	; 0xff
 80153e8:	f47f aefc 	bne.w	80151e4 <lv_img_event+0x48>
        if(img->angle != 0) {
 80153ec:	8e27      	ldrh	r7, [r4, #48]	; 0x30
 80153ee:	2f00      	cmp	r7, #0
 80153f0:	f47f aef8 	bne.w	80151e4 <lv_img_event+0x48>
        const lv_area_t * clip_area = lv_event_get_param(e);
 80153f4:	4628      	mov	r0, r5
 80153f6:	f005 ff38 	bl	801b26a <lv_event_get_param>
        if(img->zoom == LV_IMG_ZOOM_NONE) {
 80153fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        const lv_area_t * clip_area = lv_event_get_param(e);
 80153fc:	4605      	mov	r5, r0
        if(img->zoom == LV_IMG_ZOOM_NONE) {
 80153fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015402:	d108      	bne.n	8015416 <lv_img_event+0x27a>
            if(_lv_area_is_in(clip_area, &obj->coords, 0) == false) {
 8015404:	463a      	mov	r2, r7
 8015406:	f104 0114 	add.w	r1, r4, #20
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 801540a:	f00f f865 	bl	80244d8 <_lv_area_is_in>
 801540e:	2800      	cmp	r0, #0
 8015410:	f47f af21 	bne.w	8015256 <lv_img_event+0xba>
 8015414:	e6e6      	b.n	80151e4 <lv_img_event+0x48>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(obj), lv_obj_get_height(obj), 0, img->zoom, &img->pivot);
 8015416:	4620      	mov	r0, r4
 8015418:	f007 fa40 	bl	801c89c <lv_obj_get_width>
 801541c:	4680      	mov	r8, r0
 801541e:	4620      	mov	r0, r4
 8015420:	f007 fa42 	bl	801c8a8 <lv_obj_get_height>
 8015424:	f104 0332 	add.w	r3, r4, #50	; 0x32
 8015428:	4602      	mov	r2, r0
 801542a:	4641      	mov	r1, r8
 801542c:	9301      	str	r3, [sp, #4]
 801542e:	a810      	add	r0, sp, #64	; 0x40
 8015430:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015432:	9300      	str	r3, [sp, #0]
 8015434:	463b      	mov	r3, r7
 8015436:	f00a f811 	bl	801f45c <_lv_img_buf_get_transformed_area>
            a.x1 += obj->coords.x1;
 801543a:	8aa2      	ldrh	r2, [r4, #20]
 801543c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 8015440:	4628      	mov	r0, r5
            a.y1 += obj->coords.y1;
 8015442:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
            a.x1 += obj->coords.x1;
 8015446:	4413      	add	r3, r2
 8015448:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            a.y1 += obj->coords.y1;
 801544c:	8ae3      	ldrh	r3, [r4, #22]
 801544e:	4419      	add	r1, r3
 8015450:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            a.x2 += obj->coords.x1;
 8015454:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8015458:	440a      	add	r2, r1
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 801545a:	a910      	add	r1, sp, #64	; 0x40
            a.x2 += obj->coords.x1;
 801545c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            a.y2 += obj->coords.y1;
 8015460:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8015464:	4413      	add	r3, r2
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 8015466:	463a      	mov	r2, r7
            a.y2 += obj->coords.y1;
 8015468:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 801546c:	e7cd      	b.n	801540a <lv_img_event+0x26e>
 801546e:	bf00      	nop
 8015470:	08029a28 	.word	0x08029a28
            }
        }
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 8015474:	2e15      	cmp	r6, #21
 8015476:	d002      	beq.n	801547e <lv_img_event+0x2e2>
 8015478:	2e18      	cmp	r6, #24
 801547a:	f47f aeec 	bne.w	8015256 <lv_img_event+0xba>

        lv_coord_t obj_w = lv_obj_get_width(obj);
 801547e:	4620      	mov	r0, r4
 8015480:	f007 fa0c 	bl	801c89c <lv_obj_get_width>
 8015484:	4682      	mov	sl, r0
        lv_coord_t obj_h = lv_obj_get_height(obj);
 8015486:	4620      	mov	r0, r4
 8015488:	f007 fa0e 	bl	801c8a8 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801548c:	2232      	movs	r2, #50	; 0x32
 801548e:	2100      	movs	r1, #0
 8015490:	4683      	mov	fp, r0
 8015492:	4620      	mov	r0, r4
 8015494:	f008 fb28 	bl	801dae8 <lv_obj_get_style_prop>
 8015498:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801549a:	2212      	movs	r2, #18
 801549c:	2100      	movs	r1, #0
 801549e:	4620      	mov	r0, r4

        lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
        lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80154a0:	fa1f f788 	uxth.w	r7, r8
 80154a4:	f008 fb20 	bl	801dae8 <lv_obj_get_style_prop>
 80154a8:	fa10 f888 	uxtah	r8, r0, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80154ac:	2213      	movs	r2, #19
 80154ae:	2100      	movs	r1, #0
 80154b0:	fa1f f388 	uxth.w	r3, r8
 80154b4:	4620      	mov	r0, r4
 80154b6:	9302      	str	r3, [sp, #8]
 80154b8:	f008 fb16 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80154bc:	2210      	movs	r2, #16
 80154be:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80154c0:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80154c2:	4620      	mov	r0, r4
 80154c4:	f008 fb10 	bl	801dae8 <lv_obj_get_style_prop>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
        lv_coord_t ptop = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80154c8:	4438      	add	r0, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80154ca:	2211      	movs	r2, #17
 80154cc:	2100      	movs	r1, #0
 80154ce:	b283      	uxth	r3, r0
 80154d0:	4620      	mov	r0, r4
 80154d2:	9303      	str	r3, [sp, #12]
 80154d4:	f008 fb08 	bl	801dae8 <lv_obj_get_style_prop>
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;

        lv_point_t bg_pivot;
        bg_pivot.x = img->pivot.x + pleft;
 80154d8:	9a02      	ldr	r2, [sp, #8]
 80154da:	4681      	mov	r9, r0
 80154dc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80154de:	4413      	add	r3, r2
        bg_pivot.y = img->pivot.y + ptop;
 80154e0:	9a03      	ldr	r2, [sp, #12]
        bg_pivot.x = img->pivot.x + pleft;
 80154e2:	f8ad 3020 	strh.w	r3, [sp, #32]
        bg_pivot.y = img->pivot.y + ptop;
 80154e6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80154e8:	4413      	add	r3, r2
 80154ea:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        lv_area_t bg_coords;

        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 80154ee:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80154f2:	f003 0303 	and.w	r3, r3, #3
 80154f6:	2b01      	cmp	r3, #1
 80154f8:	f040 8104 	bne.w	8015704 <lv_img_event+0x568>
            /*Object size equals to transformed image size*/
            lv_obj_get_coords(obj, &bg_coords);
 80154fc:	a90a      	add	r1, sp, #40	; 0x28
 80154fe:	4620      	mov	r0, r4
 8015500:	f007 f97c 	bl	801c7fc <lv_obj_get_coords>
    dest->x1 = src->x1;
 8015504:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8015508:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801550c:	82a1      	strh	r1, [r4, #20]
    dest->y1 = src->y1;
 801550e:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 8015512:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8015516:	82e1      	strh	r1, [r4, #22]
    dest->x2 = src->x2;
 8015518:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801551c:	f9b4 b018 	ldrsh.w	fp, [r4, #24]
 8015520:	8321      	strh	r1, [r4, #24]
    dest->y2 = src->y2;
 8015522:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015526:	f9b4 a01a 	ldrsh.w	sl, [r4, #26]

        lv_area_t ori_coords;
        lv_area_copy(&ori_coords, &obj->coords);
        lv_area_copy(&obj->coords, &bg_coords);

        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801552a:	48b8      	ldr	r0, [pc, #736]	; (801580c <lv_img_event+0x670>)
 801552c:	8361      	strh	r1, [r4, #26]
 801552e:	4629      	mov	r1, r5
    dest->x1 = src->x1;
 8015530:	9205      	str	r2, [sp, #20]
    dest->y1 = src->y1;
 8015532:	9304      	str	r3, [sp, #16]
 8015534:	f005 fe7b 	bl	801b22e <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8015538:	2801      	cmp	r0, #1
 801553a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801553e:	f47f ae8a 	bne.w	8015256 <lv_img_event+0xba>

        lv_area_copy(&obj->coords, &ori_coords);

        if(code == LV_EVENT_DRAW_MAIN) {
 8015542:	2e15      	cmp	r6, #21
    dest->x1 = src->x1;
 8015544:	82a2      	strh	r2, [r4, #20]
    dest->y1 = src->y1;
 8015546:	82e3      	strh	r3, [r4, #22]
    dest->x2 = src->x2;
 8015548:	f8a4 b018 	strh.w	fp, [r4, #24]
    dest->y2 = src->y2;
 801554c:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8015550:	f47f ae81 	bne.w	8015256 <lv_img_event+0xba>
            if(img->h == 0 || img->w == 0) return;
 8015554:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 8015558:	2b00      	cmp	r3, #0
 801555a:	f43f ae7c 	beq.w	8015256 <lv_img_event+0xba>
 801555e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8015562:	2b00      	cmp	r3, #0
 8015564:	f43f ae77 	beq.w	8015256 <lv_img_event+0xba>
            if(img->zoom == 0) return;
 8015568:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801556a:	2b00      	cmp	r3, #0
 801556c:	f43f ae73 	beq.w	8015256 <lv_img_event+0xba>

            lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8015570:	4628      	mov	r0, r5
 8015572:	f005 fecb 	bl	801b30c <lv_event_get_draw_ctx>
 8015576:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 801557a:	4606      	mov	r6, r0

            lv_area_t img_max_area;
            lv_area_copy(&img_max_area, &obj->coords);

            lv_point_t img_size_final = lv_img_get_transformed_size(obj);
 801557c:	4620      	mov	r0, r4
 801557e:	9206      	str	r2, [sp, #24]
    dest->x1 = src->x1;
 8015580:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
    dest->y1 = src->y1;
 8015584:	f9b4 a016 	ldrsh.w	sl, [r4, #22]
    dest->x2 = src->x2;
 8015588:	f9b4 b018 	ldrsh.w	fp, [r4, #24]
 801558c:	f011 fb4f 	bl	8026c2e <lv_img_get_transformed_size>
 8015590:	b203      	sxth	r3, r0

            if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8015592:	9a06      	ldr	r2, [sp, #24]
            lv_point_t img_size_final = lv_img_get_transformed_size(obj);
 8015594:	9009      	str	r0, [sp, #36]	; 0x24
 8015596:	9305      	str	r3, [sp, #20]
 8015598:	1403      	asrs	r3, r0, #16
 801559a:	9304      	str	r3, [sp, #16]
            if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 801559c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80155a0:	f003 0303 	and.w	r3, r3, #3
 80155a4:	2b01      	cmp	r3, #1
 80155a6:	f040 80cf 	bne.w	8015748 <lv_img_event+0x5ac>
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 80155aa:	9905      	ldr	r1, [sp, #20]
 80155ac:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80155b0:	1a5b      	subs	r3, r3, r1
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 80155b2:	9904      	ldr	r1, [sp, #16]
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 80155b4:	3301      	adds	r3, #1
 80155b6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80155ba:	105b      	asrs	r3, r3, #1
 80155bc:	425b      	negs	r3, r3
 80155be:	fa15 f583 	uxtah	r5, r5, r3
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
 80155c2:	fa1b f383 	uxtah	r3, fp, r3
 80155c6:	fa0f fb83 	sxth.w	fp, r3
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 80155ca:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 80155ce:	b22d      	sxth	r5, r5
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 80155d0:	1a5b      	subs	r3, r3, r1
 80155d2:	3301      	adds	r3, #1
 80155d4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80155d8:	105b      	asrs	r3, r3, #1
 80155da:	425b      	negs	r3, r3
 80155dc:	fa1a fa83 	uxtah	sl, sl, r3
                img_max_area.y2 -= ((img->h - img_size_final.y) + 1) / 2;
 80155e0:	fa12 f383 	uxtah	r3, r2, r3
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 80155e4:	fa0f fa8a 	sxth.w	sl, sl
            img_max_area.x1 += pleft;
            img_max_area.y1 += ptop;
            img_max_area.x2 -= pright;
            img_max_area.y2 -= pbottom;

            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_VARIABLE) {
 80155e8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 80155ec:	b21b      	sxth	r3, r3
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_VARIABLE) {
 80155ee:	f012 0102 	ands.w	r1, r2, #2
 80155f2:	f040 80ed 	bne.w	80157d0 <lv_img_event+0x634>
                lv_draw_img_dsc_t img_dsc;
                lv_draw_img_dsc_init(&img_dsc);
 80155f6:	a810      	add	r0, sp, #64	; 0x40
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 80155f8:	44b8      	add	r8, r7
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 80155fa:	444f      	add	r7, r9
                img_clip_area.y1 = bg_coords.y1 + ptop;
                img_clip_area.x2 = bg_coords.x2 - pright;
                img_clip_area.y2 = bg_coords.y2 - pbottom;
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;

                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 80155fc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8015600:	fa1f f888 	uxth.w	r8, r8
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8015604:	b2bf      	uxth	r7, r7
                lv_draw_img_dsc_init(&img_dsc);
 8015606:	e9cd 1306 	strd	r1, r3, [sp, #24]
 801560a:	f009 f927 	bl	801e85c <lv_draw_img_dsc_init>
                lv_obj_init_draw_img_dsc(obj, LV_PART_MAIN, &img_dsc);
 801560e:	aa10      	add	r2, sp, #64	; 0x40
 8015610:	9906      	ldr	r1, [sp, #24]
 8015612:	4620      	mov	r0, r4
 8015614:	f006 fe0b 	bl	801c22e <lv_obj_init_draw_img_dsc>
                img_dsc.zoom = img->zoom;
 8015618:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
                img_dsc.antialias = img->antialias;
 801561a:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 801561e:	4648      	mov	r0, r9
                img_dsc.zoom = img->zoom;
 8015620:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
                img_dsc.angle = img->angle;
 8015624:	8e22      	ldrh	r2, [r4, #48]	; 0x30
                img_clip_area.x1 = bg_coords.x1 + pleft;
 8015626:	9b02      	ldr	r3, [sp, #8]
                img_dsc.angle = img->angle;
 8015628:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
                img_dsc.pivot.x = img->pivot.x;
 801562c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801562e:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
                img_dsc.pivot.y = img->pivot.y;
 8015632:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8015634:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
                img_dsc.antialias = img->antialias;
 8015638:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801563c:	09d2      	lsrs	r2, r2, #7
 801563e:	f362 0100 	bfi	r1, r2, #0, #1
                img_clip_area.x1 = bg_coords.x1 + pleft;
 8015642:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8015646:	441a      	add	r2, r3
                img_clip_area.y1 = bg_coords.y1 + ptop;
 8015648:	9b03      	ldr	r3, [sp, #12]
                img_dsc.antialias = img->antialias;
 801564a:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
                img_clip_area.x1 = bg_coords.x1 + pleft;
 801564e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
                img_clip_area.y1 = bg_coords.y1 + ptop;
 8015652:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8015656:	441a      	add	r2, r3
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8015658:	68b3      	ldr	r3, [r6, #8]
                img_clip_area.y1 = bg_coords.y1 + ptop;
 801565a:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 801565e:	4619      	mov	r1, r3
                img_clip_area.x2 = bg_coords.x2 - pright;
 8015660:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8015664:	9306      	str	r3, [sp, #24]
                img_clip_area.x2 = bg_coords.x2 - pright;
 8015666:	eba2 0208 	sub.w	r2, r2, r8
 801566a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 801566e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8015672:	1bd2      	subs	r2, r2, r7
 8015674:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 8015678:	464a      	mov	r2, r9
 801567a:	f00e fe2e 	bl	80242da <_lv_area_intersect>
 801567e:	2800      	cmp	r0, #0
 8015680:	f43f ade9 	beq.w	8015256 <lv_img_event+0xba>
                draw_ctx->clip_area = &img_clip_area;
 8015684:	f8c6 9008 	str.w	r9, [r6, #8]
            img_max_area.x2 -= pright;
 8015688:	ebab 0808 	sub.w	r8, fp, r8

                lv_area_t coords_tmp;
                lv_coord_t offset_x = img->offset.x % img->w;
 801568c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8015690:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	; 0x28
            img_max_area.x2 -= pright;
 8015694:	fa0f f888 	sxth.w	r8, r8
            img_max_area.y1 += ptop;
 8015698:	9b03      	ldr	r3, [sp, #12]
                lv_coord_t offset_x = img->offset.x % img->w;
 801569a:	fb91 f0f2 	sdiv	r0, r1, r2
 801569e:	fb02 1110 	mls	r1, r2, r0, r1
                lv_coord_t offset_y = img->offset.y % img->h;
 80156a2:	f9b4 002e 	ldrsh.w	r0, [r4, #46]	; 0x2e
 80156a6:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
            img_max_area.y1 += ptop;
 80156aa:	4453      	add	r3, sl
                lv_coord_t offset_y = img->offset.y % img->h;
 80156ac:	fb92 fcf0 	sdiv	ip, r2, r0
 80156b0:	fb00 221c 	mls	r2, r0, ip, r2
                coords_tmp.y1 = img_max_area.y1 + offset_y;
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 80156b4:	fa0f fa83 	sxth.w	sl, r3
                coords_tmp.y1 = img_max_area.y1 + offset_y;
 80156b8:	fa12 f283 	uxtah	r2, r2, r3
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 80156bc:	9b07      	ldr	r3, [sp, #28]
                coords_tmp.y1 = img_max_area.y1 + offset_y;
 80156be:	fa1f fc82 	uxth.w	ip, r2
            img_max_area.y2 -= pbottom;
 80156c2:	1bdf      	subs	r7, r3, r7
                coords_tmp.y1 = img_max_area.y1 + offset_y;
 80156c4:	b212      	sxth	r2, r2
            img_max_area.y2 -= pbottom;
 80156c6:	b23f      	sxth	r7, r7
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 80156c8:	4592      	cmp	sl, r2
 80156ca:	bfbc      	itt	lt
 80156cc:	ebac 0c00 	sublt.w	ip, ip, r0
 80156d0:	fa0f f28c 	sxthlt.w	r2, ip
            img_max_area.x1 += pleft;
 80156d4:	f8dd c008 	ldr.w	ip, [sp, #8]
                coords_tmp.y1 = img_max_area.y1 + offset_y;
 80156d8:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
            img_max_area.x1 += pleft;
 80156dc:	44ac      	add	ip, r5
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 80156de:	3a01      	subs	r2, #1

                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
                    coords_tmp.x1 = img_max_area.x1 + offset_x;
 80156e0:	fa11 f58c 	uxtah	r5, r1, ip
            img_max_area.x1 += pleft;
 80156e4:	fa0f fa8c 	sxth.w	sl, ip
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 80156e8:	4402      	add	r2, r0
                    coords_tmp.x1 = img_max_area.x1 + offset_x;
 80156ea:	fa1f fb85 	uxth.w	fp, r5
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 80156ee:	b212      	sxth	r2, r2
                    coords_tmp.x1 = img_max_area.x1 + offset_x;
 80156f0:	b22d      	sxth	r5, r5
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 80156f2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 80156f6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 80156fa:	42bb      	cmp	r3, r7
 80156fc:	db33      	blt.n	8015766 <lv_img_event+0x5ca>

                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
                    }
                }
                draw_ctx->clip_area = clip_area_ori;
 80156fe:	9b06      	ldr	r3, [sp, #24]
 8015700:	60b3      	str	r3, [r6, #8]
 8015702:	e5a8      	b.n	8015256 <lv_img_event+0xba>
            _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 8015704:	aa08      	add	r2, sp, #32
 8015706:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801570a:	4651      	mov	r1, sl
 801570c:	a80a      	add	r0, sp, #40	; 0x28
 801570e:	9201      	str	r2, [sp, #4]
 8015710:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015712:	9200      	str	r2, [sp, #0]
 8015714:	465a      	mov	r2, fp
 8015716:	f009 fea1 	bl	801f45c <_lv_img_buf_get_transformed_area>
            bg_coords.x1 += obj->coords.x1;
 801571a:	8aa2      	ldrh	r2, [r4, #20]
 801571c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
            bg_coords.y1 += obj->coords.y1;
 8015720:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
            bg_coords.x1 += obj->coords.x1;
 8015724:	4413      	add	r3, r2
 8015726:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            bg_coords.y1 += obj->coords.y1;
 801572a:	8ae3      	ldrh	r3, [r4, #22]
 801572c:	4419      	add	r1, r3
 801572e:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            bg_coords.x2 += obj->coords.x1;
 8015732:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015736:	440a      	add	r2, r1
 8015738:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            bg_coords.y2 += obj->coords.y1;
 801573c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8015740:	4413      	add	r3, r2
 8015742:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015746:	e6dd      	b.n	8015504 <lv_img_event+0x368>
                img_max_area.x2 = img_max_area.x1 + lv_area_get_width(&bg_coords) - 1;
 8015748:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801574c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8015750:	1a9b      	subs	r3, r3, r2
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 8015752:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
                img_max_area.x2 = img_max_area.x1 + lv_area_get_width(&bg_coords) - 1;
 8015756:	442b      	add	r3, r5
 8015758:	fa0f fb83 	sxth.w	fp, r3
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 801575c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8015760:	1a9b      	subs	r3, r3, r2
 8015762:	4453      	add	r3, sl
 8015764:	e740      	b.n	80155e8 <lv_img_event+0x44c>
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 8015766:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8015768:	45aa      	cmp	sl, r5
                    coords_tmp.x1 = img_max_area.x1 + offset_x;
 801576a:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 801576e:	bfb8      	it	lt
 8015770:	ebab 0203 	sublt.w	r2, fp, r3
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 8015774:	f8bd 9014 	ldrh.w	r9, [sp, #20]
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 8015778:	bfb8      	it	lt
 801577a:	f8ad 2038 	strhlt.w	r2, [sp, #56]	; 0x38
                    coords_tmp.x2 = coords_tmp.x1 + img->w - 1;
 801577e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8015782:	3a01      	subs	r2, #1
 8015784:	4413      	add	r3, r2
 8015786:	b21b      	sxth	r3, r3
 8015788:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 801578c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8015790:	4543      	cmp	r3, r8
 8015792:	db0d      	blt.n	80157b0 <lv_img_event+0x614>
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 8015794:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8015798:	9a04      	ldr	r2, [sp, #16]
 801579a:	fa13 f382 	uxtah	r3, r3, r2
 801579e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80157a2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80157a6:	9b04      	ldr	r3, [sp, #16]
 80157a8:	fa12 f283 	uxtah	r2, r2, r3
 80157ac:	b212      	sxth	r2, r2
 80157ae:	e7a0      	b.n	80156f2 <lv_img_event+0x556>
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
 80157b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80157b2:	aa0e      	add	r2, sp, #56	; 0x38
 80157b4:	a910      	add	r1, sp, #64	; 0x40
 80157b6:	4630      	mov	r0, r6
 80157b8:	f7f2 f994 	bl	8007ae4 <lv_draw_img>
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 80157bc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80157c0:	444b      	add	r3, r9
 80157c2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80157c6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80157ca:	444b      	add	r3, r9
 80157cc:	b21b      	sxth	r3, r3
 80157ce:	e7db      	b.n	8015788 <lv_img_event+0x5ec>
            }
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 80157d0:	f002 0203 	and.w	r2, r2, #3
        lv_area_copy(&ori_coords, &obj->coords);
 80157d4:	f104 0514 	add.w	r5, r4, #20
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 80157d8:	2a02      	cmp	r2, #2
 80157da:	d110      	bne.n	80157fe <lv_img_event+0x662>
                lv_draw_label_dsc_t label_dsc;
                lv_draw_label_dsc_init(&label_dsc);
 80157dc:	a810      	add	r0, sp, #64	; 0x40
 80157de:	f7f2 fa97 	bl	8007d10 <lv_draw_label_dsc_init>
                lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 80157e2:	aa10      	add	r2, sp, #64	; 0x40
 80157e4:	4620      	mov	r0, r4
 80157e6:	2100      	movs	r1, #0
 80157e8:	f006 fcd5 	bl	801c196 <lv_obj_init_draw_label_dsc>

                lv_draw_label(draw_ctx, &label_dsc, &obj->coords, img->src, NULL);
 80157ec:	2300      	movs	r3, #0
 80157ee:	462a      	mov	r2, r5
 80157f0:	a910      	add	r1, sp, #64	; 0x40
 80157f2:	9300      	str	r3, [sp, #0]
 80157f4:	4630      	mov	r0, r6
 80157f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80157f8:	f7f2 faa2 	bl	8007d40 <lv_draw_label>
 80157fc:	e52b      	b.n	8015256 <lv_img_event+0xba>
            }
            else {
                /*Trigger the error handler of image draw*/
                LV_LOG_WARN("draw_img: image source type is unknown");
                lv_draw_img(draw_ctx, NULL, &obj->coords, NULL);
 80157fe:	2300      	movs	r3, #0
 8015800:	462a      	mov	r2, r5
 8015802:	4630      	mov	r0, r6
 8015804:	4619      	mov	r1, r3
 8015806:	f7f2 f96d 	bl	8007ae4 <lv_draw_img>
 801580a:	e524      	b.n	8015256 <lv_img_event+0xba>
 801580c:	08029a28 	.word	0x08029a28

08015810 <lv_label_revert_dots>:
    lv_obj_invalidate(obj);
}


static void lv_label_revert_dots(lv_obj_t * obj)
{
 8015810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    lv_label_t * label = (lv_label_t *)obj;

    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 8015812:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8015816:	4604      	mov	r4, r0
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 8015818:	f003 0307 	and.w	r3, r3, #7
 801581c:	2b01      	cmp	r3, #1
 801581e:	d120      	bne.n	8015862 <lv_label_revert_dots+0x52>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 8015820:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8015822:	1c4a      	adds	r2, r1, #1
 8015824:	d01d      	beq.n	8015862 <lv_label_revert_dots+0x52>
    uint32_t letter_i = label->dot_end - LV_LABEL_DOT_NUM;
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 8015826:	4b0f      	ldr	r3, [pc, #60]	; (8015864 <lv_label_revert_dots+0x54>)
 8015828:	3903      	subs	r1, #3
 801582a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	4798      	blx	r3
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * obj)
{
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc) {
 8015830:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8015834:	065b      	lsls	r3, r3, #25
    while(label->text[byte_i + i] != '\0') {
 8015836:	f04f 0300 	mov.w	r3, #0
        return label->dot.tmp_ptr;
 801583a:	bf4c      	ite	mi
 801583c:	6aa6      	ldrmi	r6, [r4, #40]	; 0x28
    }
    else {
        return label->dot.tmp;
 801583e:	f104 0628 	addpl.w	r6, r4, #40	; 0x28
    while(label->text[byte_i + i] != '\0') {
 8015842:	fa50 f283 	uxtab	r2, r0, r3
 8015846:	b2dd      	uxtb	r5, r3
 8015848:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801584a:	3301      	adds	r3, #1
        label->text[byte_i + i] = dot_tmp[i];
 801584c:	5d75      	ldrb	r5, [r6, r5]
    while(label->text[byte_i + i] != '\0') {
 801584e:	5c8f      	ldrb	r7, [r1, r2]
        label->text[byte_i + i] = dot_tmp[i];
 8015850:	548d      	strb	r5, [r1, r2]
    while(label->text[byte_i + i] != '\0') {
 8015852:	2f00      	cmp	r7, #0
 8015854:	d1f5      	bne.n	8015842 <lv_label_revert_dots+0x32>
    lv_label_dot_tmp_free(obj);
 8015856:	4620      	mov	r0, r4
 8015858:	f011 faff 	bl	8026e5a <lv_label_dot_tmp_free>
    label->dot_end = LV_LABEL_DOT_END_INV;
 801585c:	f04f 33ff 	mov.w	r3, #4294967295
 8015860:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8015862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015864:	240000f8 	.word	0x240000f8

08015868 <lv_label_get_letter_on.part.0>:
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 8015868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801586c:	460d      	mov	r5, r1
 801586e:	b091      	sub	sp, #68	; 0x44
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8015870:	f9b1 3000 	ldrsh.w	r3, [r1]
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 8015874:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8015876:	2212      	movs	r2, #18
 8015878:	2100      	movs	r1, #0
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801587a:	9305      	str	r3, [sp, #20]
 801587c:	f008 f934 	bl	801dae8 <lv_obj_get_style_prop>
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8015880:	886d      	ldrh	r5, [r5, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8015882:	2210      	movs	r2, #16
 8015884:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8015886:	9008      	str	r0, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8015888:	4620      	mov	r0, r4
 801588a:	f008 f92d 	bl	801dae8 <lv_obj_get_style_prop>
 801588e:	1a2d      	subs	r5, r5, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 8015890:	a90e      	add	r1, sp, #56	; 0x38
 8015892:	4620      	mov	r0, r4
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8015894:	b22b      	sxth	r3, r5
 8015896:	9306      	str	r3, [sp, #24]
    lv_obj_get_content_coords(obj, &txt_coords);
 8015898:	f007 f838 	bl	801c90c <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801589c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80158a0:	4620      	mov	r0, r4
 80158a2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80158a6:	3301      	adds	r3, #1
    return label->text;
 80158a8:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
 80158ac:	1a9b      	subs	r3, r3, r2
 80158ae:	b21b      	sxth	r3, r3
 80158b0:	9307      	str	r3, [sp, #28]
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80158b2:	f011 fb0a 	bl	8026eca <lv_obj_get_style_text_font.constprop.0>
 80158b6:	9003      	str	r0, [sp, #12]
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 80158b8:	4620      	mov	r0, r4
 80158ba:	f011 faf8 	bl	8026eae <lv_obj_get_style_text_line_space.constprop.0>
 80158be:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 80158c0:	4620      	mov	r0, r4
 80158c2:	f011 fafb 	bl	8026ebc <lv_obj_get_style_text_letter_space.constprop.0>
 80158c6:	9b03      	ldr	r3, [sp, #12]
 80158c8:	9004      	str	r0, [sp, #16]
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80158ca:	4620      	mov	r0, r4
 80158cc:	f9b3 8008 	ldrsh.w	r8, [r3, #8]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 80158d0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 80158d4:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 80158d6:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 80158da:	bf48      	it	mi
 80158dc:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80158e0:	f011 faf9 	bl	8026ed6 <lv_obj_get_style_width.constprop.0>
 80158e4:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80158e8:	4298      	cmp	r0, r3
 80158ea:	d105      	bne.n	80158f8 <lv_label_get_letter_on.part.0+0x90>
 80158ec:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80158f0:	075b      	lsls	r3, r3, #29
 80158f2:	bf58      	it	pl
 80158f4:	f047 0704 	orrpl.w	r7, r7, #4
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 80158f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80158fa:	4620      	mov	r0, r4
    lv_coord_t y             = 0;
 80158fc:	2400      	movs	r4, #0
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 80158fe:	2100      	movs	r1, #0
 8015900:	f008 fc2b 	bl	801e15a <lv_obj_calculate_style_text_align>
        y += letter_height + line_space;
 8015904:	eb08 0305 	add.w	r3, r8, r5
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8015908:	4683      	mov	fp, r0
    uint32_t line_start      = 0;
 801590a:	4626      	mov	r6, r4
        y += letter_height + line_space;
 801590c:	9309      	str	r3, [sp, #36]	; 0x24
    while(txt[line_start] != '\0') {
 801590e:	f819 3006 	ldrb.w	r3, [r9, r6]
 8015912:	eb09 0a06 	add.w	sl, r9, r6
 8015916:	b90b      	cbnz	r3, 801591c <lv_label_get_letter_on.part.0+0xb4>
 8015918:	4635      	mov	r5, r6
 801591a:	e01a      	b.n	8015952 <lv_label_get_letter_on.part.0+0xea>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 801591c:	2300      	movs	r3, #0
 801591e:	4650      	mov	r0, sl
 8015920:	9701      	str	r7, [sp, #4]
 8015922:	9300      	str	r3, [sp, #0]
 8015924:	9b07      	ldr	r3, [sp, #28]
 8015926:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 801592a:	f7fd f9f7 	bl	8012d1c <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
 801592e:	eb04 0308 	add.w	r3, r4, r8
 8015932:	9a06      	ldr	r2, [sp, #24]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8015934:	1985      	adds	r5, r0, r6
        if(pos.y <= y + letter_height) {
 8015936:	429a      	cmp	r2, r3
 8015938:	dc69      	bgt.n	8015a0e <lv_label_get_letter_on.part.0+0x1a6>
            letter = _lv_txt_encoded_prev(txt, &tmp);
 801593a:	4b44      	ldr	r3, [pc, #272]	; (8015a4c <lv_label_get_letter_on.part.0+0x1e4>)
 801593c:	a90d      	add	r1, sp, #52	; 0x34
 801593e:	4648      	mov	r0, r9
            uint32_t tmp = new_line_start;
 8015940:	950d      	str	r5, [sp, #52]	; 0x34
            letter = _lv_txt_encoded_prev(txt, &tmp);
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 8015946:	280a      	cmp	r0, #10
 8015948:	d003      	beq.n	8015952 <lv_label_get_letter_on.part.0+0xea>
 801594a:	f819 3005 	ldrb.w	r3, [r9, r5]
 801594e:	b903      	cbnz	r3, 8015952 <lv_label_get_letter_on.part.0+0xea>
 8015950:	3501      	adds	r5, #1
    if(align == LV_TEXT_ALIGN_CENTER) {
 8015952:	f1bb 0f02 	cmp.w	fp, #2
 8015956:	d15f      	bne.n	8015a18 <lv_label_get_letter_on.part.0+0x1b0>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8015958:	1ba9      	subs	r1, r5, r6
 801595a:	4650      	mov	r0, sl
 801595c:	9700      	str	r7, [sp, #0]
 801595e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8015962:	f00f ff5e 	bl	8025822 <lv_txt_get_width>
 8015966:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801596a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801596e:	eb00 74d0 	add.w	r4, r0, r0, lsr #31
 8015972:	3301      	adds	r3, #1
 8015974:	1064      	asrs	r4, r4, #1
 8015976:	1a9b      	subs	r3, r3, r2
 8015978:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 801597c:	fa02 f383 	sxtah	r3, r2, r3
 8015980:	ebc4 0463 	rsb	r4, r4, r3, asr #1
        x += lv_area_get_width(&txt_coords) - line_w;
 8015984:	b224      	sxth	r4, r4
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8015986:	2300      	movs	r3, #0
 8015988:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    uint32_t i = 0;
 801598c:	930b      	str	r3, [sp, #44]	; 0x2c
    if(new_line_start > 0) {
 801598e:	b385      	cbz	r5, 80159f2 <lv_label_get_letter_on.part.0+0x18a>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8015990:	9a05      	ldr	r2, [sp, #20]
    uint32_t i_act = i;
 8015992:	4698      	mov	r8, r3
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8015994:	9908      	ldr	r1, [sp, #32]
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8015996:	f007 0701 	and.w	r7, r7, #1
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801599a:	eba2 0b01 	sub.w	fp, r2, r1
 801599e:	fa0f fb8b 	sxth.w	fp, fp
        while(i + line_start < new_line_start) {
 80159a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159a4:	4433      	add	r3, r6
 80159a6:	429d      	cmp	r5, r3
 80159a8:	d923      	bls.n	80159f2 <lv_label_get_letter_on.part.0+0x18a>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 80159aa:	ab0b      	add	r3, sp, #44	; 0x2c
 80159ac:	aa0d      	add	r2, sp, #52	; 0x34
 80159ae:	a90c      	add	r1, sp, #48	; 0x30
 80159b0:	4650      	mov	r0, sl
 80159b2:	f7fd fb15 	bl	8012fe0 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80159b6:	b147      	cbz	r7, 80159ca <lv_label_get_letter_on.part.0+0x162>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 80159b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159ba:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 80159be:	f81a 1003 	ldrb.w	r1, [sl, r3]
 80159c2:	f00f fef6 	bl	80257b2 <_lv_txt_is_cmd>
 80159c6:	2800      	cmp	r0, #0
 80159c8:	d1eb      	bne.n	80159a2 <lv_label_get_letter_on.part.0+0x13a>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 80159ca:	9803      	ldr	r0, [sp, #12]
 80159cc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80159d0:	f00e fb65 	bl	802409e <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 80159d4:	fa04 f380 	sxtah	r3, r4, r0
 80159d8:	459b      	cmp	fp, r3
 80159da:	db08      	blt.n	80159ee <lv_label_get_letter_on.part.0+0x186>
 80159dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159de:	18f2      	adds	r2, r6, r3
 80159e0:	4295      	cmp	r5, r2
 80159e2:	d004      	beq.n	80159ee <lv_label_get_letter_on.part.0+0x186>
 80159e4:	eb09 0206 	add.w	r2, r9, r6
 80159e8:	f812 2008 	ldrb.w	r2, [r2, r8]
 80159ec:	bb42      	cbnz	r2, 8015a40 <lv_label_get_letter_on.part.0+0x1d8>
                i = i_act;
 80159ee:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 80159f2:	4d17      	ldr	r5, [pc, #92]	; (8015a50 <lv_label_get_letter_on.part.0+0x1e8>)
 80159f4:	4650      	mov	r0, sl
 80159f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80159f8:	682b      	ldr	r3, [r5, #0]
 80159fa:	4798      	blx	r3
 80159fc:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 80159fe:	682b      	ldr	r3, [r5, #0]
 8015a00:	4631      	mov	r1, r6
 8015a02:	4648      	mov	r0, r9
 8015a04:	4798      	blx	r3
}
 8015a06:	4420      	add	r0, r4
 8015a08:	b011      	add	sp, #68	; 0x44
 8015a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + line_space;
 8015a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8015a10:	462e      	mov	r6, r5
 8015a12:	441c      	add	r4, r3
        y += letter_height + line_space;
 8015a14:	b224      	sxth	r4, r4
        line_start = new_line_start;
 8015a16:	e77a      	b.n	801590e <lv_label_get_letter_on.part.0+0xa6>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8015a18:	f1bb 0f03 	cmp.w	fp, #3
 8015a1c:	d10e      	bne.n	8015a3c <lv_label_get_letter_on.part.0+0x1d4>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8015a1e:	1ba9      	subs	r1, r5, r6
 8015a20:	4650      	mov	r0, sl
 8015a22:	9700      	str	r7, [sp, #0]
 8015a24:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8015a28:	f00f fefb 	bl	8025822 <lv_txt_get_width>
 8015a2c:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 8015a30:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015a34:	3401      	adds	r4, #1
 8015a36:	1ae4      	subs	r4, r4, r3
        x += lv_area_get_width(&txt_coords) - line_w;
 8015a38:	1a24      	subs	r4, r4, r0
 8015a3a:	e7a3      	b.n	8015984 <lv_label_get_letter_on.part.0+0x11c>
    lv_coord_t x = 0;
 8015a3c:	2400      	movs	r4, #0
 8015a3e:	e7a2      	b.n	8015986 <lv_label_get_letter_on.part.0+0x11e>
            x += letter_space;
 8015a40:	9a04      	ldr	r2, [sp, #16]
            i_act = i;
 8015a42:	4698      	mov	r8, r3
            x += letter_space;
 8015a44:	4414      	add	r4, r2
 8015a46:	4420      	add	r0, r4
 8015a48:	b204      	sxth	r4, r0
            i_act = i;
 8015a4a:	e7aa      	b.n	80159a2 <lv_label_get_letter_on.part.0+0x13a>
 8015a4c:	240000fc 	.word	0x240000fc
 8015a50:	240000f4 	.word	0x240000f4

08015a54 <lv_label_refr_text>:
{
 8015a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(label->text == NULL) return;
 8015a58:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8015a5a:	b09b      	sub	sp, #108	; 0x6c
 8015a5c:	4604      	mov	r4, r0
    if(label->text == NULL) return;
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	f000 80df 	beq.w	8015c22 <lv_label_refr_text+0x1ce>
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 8015a64:	f04f 33ff 	mov.w	r3, #4294967295
    lv_obj_get_content_coords(obj, &txt_coords);
 8015a68:	a907      	add	r1, sp, #28
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 8015a6a:	6303      	str	r3, [r0, #48]	; 0x30
    lv_obj_get_content_coords(obj, &txt_coords);
 8015a6c:	f006 ff4e 	bl	801c90c <lv_obj_get_content_coords>
 8015a70:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8015a74:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8015a78:	4620      	mov	r0, r4
 8015a7a:	3701      	adds	r7, #1
 8015a7c:	1aff      	subs	r7, r7, r3
 8015a7e:	f011 fa24 	bl	8026eca <lv_obj_get_style_text_font.constprop.0>
 8015a82:	4606      	mov	r6, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8015a84:	4620      	mov	r0, r4
 8015a86:	f011 fa12 	bl	8026eae <lv_obj_get_style_text_line_space.constprop.0>
 8015a8a:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8015a8c:	4620      	mov	r0, r4
 8015a8e:	b23f      	sxth	r7, r7
 8015a90:	f011 fa14 	bl	8026ebc <lv_obj_get_style_text_letter_space.constprop.0>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015a94:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8015a98:	4680      	mov	r8, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8015a9a:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015a9c:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015a9e:	f3c3 1900 	ubfx	r9, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015aa2:	bf48      	it	mi
 8015aa4:	f049 0902 	orrmi.w	r9, r9, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8015aa8:	f011 fa15 	bl	8026ed6 <lv_obj_get_style_width.constprop.0>
 8015aac:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8015ab0:	4298      	cmp	r0, r3
 8015ab2:	d105      	bne.n	8015ac0 <lv_label_refr_text+0x6c>
 8015ab4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8015ab8:	075b      	lsls	r3, r3, #29
 8015aba:	bf58      	it	pl
 8015abc:	f049 0904 	orrpl.w	r9, r9, #4
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 8015ac0:	4643      	mov	r3, r8
 8015ac2:	4632      	mov	r2, r6
 8015ac4:	a805      	add	r0, sp, #20
 8015ac6:	9500      	str	r5, [sp, #0]
 8015ac8:	e9cd 7901 	strd	r7, r9, [sp, #4]
 8015acc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015ace:	f00f fee7 	bl	80258a0 <lv_txt_get_size>
    lv_obj_refresh_self_size(obj);
 8015ad2:	4620      	mov	r0, r4
 8015ad4:	f006 ff57 	bl	801c986 <lv_obj_refresh_self_size>
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 8015ad8:	f894 9048 	ldrb.w	r9, [r4, #72]	; 0x48
 8015adc:	f009 0907 	and.w	r9, r9, #7
 8015ae0:	f1b9 0f02 	cmp.w	r9, #2
 8015ae4:	f040 80ba 	bne.w	8015c5c <lv_label_refr_text+0x208>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8015ae8:	2265      	movs	r2, #101	; 0x65
 8015aea:	2100      	movs	r1, #0
 8015aec:	4620      	mov	r0, r4
 8015aee:	f007 fffb 	bl	801dae8 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8015af2:	b285      	uxth	r5, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8015af4:	b945      	cbnz	r5, 8015b08 <lv_label_refr_text+0xb4>
 8015af6:	4620      	mov	r0, r4
 8015af8:	f7f0 feec 	bl	80068d4 <lv_obj_get_disp>
 8015afc:	f7fc fb20 	bl	8012140 <lv_disp_get_dpi>
 8015b00:	2303      	movs	r3, #3
 8015b02:	fb90 f5f3 	sdiv	r5, r0, r3
 8015b06:	b2ad      	uxth	r5, r5
        lv_anim_init(&a);
 8015b08:	a809      	add	r0, sp, #36	; 0x24
 8015b0a:	2700      	movs	r7, #0
 8015b0c:	f7fc fc2c 	bl	8012368 <lv_anim_init>
    a->repeat_cnt = cnt;
 8015b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015b14:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015b18:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a->playback_delay = delay;
 8015b1c:	f44f 7396 	mov.w	r3, #300	; 0x12c
        if(size.x > lv_area_get_width(&txt_coords)) {
 8015b20:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8015b24:	9316      	str	r3, [sp, #88]	; 0x58
    a->repeat_delay = delay;
 8015b26:	9318      	str	r3, [sp, #96]	; 0x60
 8015b28:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    a->var = var;
 8015b2c:	9409      	str	r4, [sp, #36]	; 0x24
 8015b2e:	3301      	adds	r3, #1
 8015b30:	1a5b      	subs	r3, r3, r1
 8015b32:	b21b      	sxth	r3, r3
 8015b34:	429a      	cmp	r2, r3
 8015b36:	dd3f      	ble.n	8015bb8 <lv_label_refr_text+0x164>
    a->exec_cb = exec_cb;
 8015b38:	4999      	ldr	r1, [pc, #612]	; (8015da0 <lv_label_refr_text+0x34c>)
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 8015b3a:	1a9b      	subs	r3, r3, r2
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	910a      	str	r1, [sp, #40]	; 0x28
    a->end_value = end;
 8015b40:	9313      	str	r3, [sp, #76]	; 0x4c
    a->current_value = start;
 8015b42:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
 8015b46:	f7fc fc9d 	bl	8012484 <lv_anim_get>
            if(anim_cur) {
 8015b4a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015b4c:	b9d0      	cbnz	r0, 8015b84 <lv_label_refr_text+0x130>
            if(act_time < a.time) {
 8015b4e:	42b9      	cmp	r1, r7
 8015b50:	dd06      	ble.n	8015b60 <lv_label_refr_text+0x10c>
                a.early_apply = 0;
 8015b52:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
                a.act_time = act_time;      /*To keep the old position*/
 8015b56:	9015      	str	r0, [sp, #84]	; 0x54
                a.early_apply = 0;
 8015b58:	f360 0300 	bfi	r3, r0, #0, #1
 8015b5c:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015b60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015b62:	4628      	mov	r0, r5
 8015b64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015b66:	f00e fb15 	bl	8024194 <lv_anim_speed_to_time>
    a->time = duration;
 8015b6a:	9014      	str	r0, [sp, #80]	; 0x50
    a->playback_time = time;
 8015b6c:	9017      	str	r0, [sp, #92]	; 0x5c
            lv_anim_start(&a);
 8015b6e:	a809      	add	r0, sp, #36	; 0x24
 8015b70:	f7fc fc46 	bl	8012400 <lv_anim_start>
            lv_anim_del(obj, set_ofs_y_anim);
 8015b74:	498b      	ldr	r1, [pc, #556]	; (8015da4 <lv_label_refr_text+0x350>)
 8015b76:	4620      	mov	r0, r4
 8015b78:	f7fc fc12 	bl	80123a0 <lv_anim_del>
            label->offset.y = 0;
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8015b82:	e04b      	b.n	8015c1c <lv_label_refr_text+0x1c8>
                act_time = anim_cur->act_time;
 8015b84:	6b02      	ldr	r2, [r0, #48]	; 0x30
                playback_now = anim_cur->playback_now;
 8015b86:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
            if(act_time < a.time) {
 8015b8a:	428a      	cmp	r2, r1
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015b8c:	9811      	ldr	r0, [sp, #68]	; 0x44
                playback_now = anim_cur->playback_now;
 8015b8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015b92:	9e13      	ldr	r6, [sp, #76]	; 0x4c
            if(act_time < a.time) {
 8015b94:	dae4      	bge.n	8015b60 <lv_label_refr_text+0x10c>
                a.act_time = act_time;      /*To keep the old position*/
 8015b96:	9215      	str	r2, [sp, #84]	; 0x54
                a.early_apply = 0;
 8015b98:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
 8015b9c:	f367 0200 	bfi	r2, r7, #0, #1
 8015ba0:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
                if(playback_now) {
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d0db      	beq.n	8015b60 <lv_label_refr_text+0x10c>
                    a.playback_now = 1;
 8015ba8:	b2d3      	uxtb	r3, r2
                    a.start_value = a.end_value;
 8015baa:	9611      	str	r6, [sp, #68]	; 0x44
                    a.end_value   = tmp;
 8015bac:	9013      	str	r0, [sp, #76]	; 0x4c
                    a.playback_now = 1;
 8015bae:	f043 0302 	orr.w	r3, r3, #2
 8015bb2:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                    a.end_value   = tmp;
 8015bb6:	e7d3      	b.n	8015b60 <lv_label_refr_text+0x10c>
            lv_anim_del(obj, set_ofs_x_anim);
 8015bb8:	4979      	ldr	r1, [pc, #484]	; (8015da0 <lv_label_refr_text+0x34c>)
 8015bba:	4620      	mov	r0, r4
 8015bbc:	f7fc fbf0 	bl	80123a0 <lv_anim_del>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015bc0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015bc4:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8015bc8:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015bca:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
            label->offset.x = 0;
 8015bce:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
 8015bd2:	1a5b      	subs	r3, r3, r1
 8015bd4:	b21b      	sxth	r3, r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015bd6:	429a      	cmp	r2, r3
 8015bd8:	ddcc      	ble.n	8015b74 <lv_label_refr_text+0x120>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8015bda:	1a9b      	subs	r3, r3, r2
 8015bdc:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
    a->exec_cb = exec_cb;
 8015be0:	4970      	ldr	r1, [pc, #448]	; (8015da4 <lv_label_refr_text+0x350>)
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8015be2:	4620      	mov	r0, r4
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8015be4:	1a9b      	subs	r3, r3, r2
 8015be6:	910a      	str	r1, [sp, #40]	; 0x28
    a->end_value = end;
 8015be8:	9313      	str	r3, [sp, #76]	; 0x4c
    a->current_value = start;
 8015bea:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8015bee:	f7fc fc49 	bl	8012484 <lv_anim_get>
            if(anim_cur) {
 8015bf2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015bf4:	b9c0      	cbnz	r0, 8015c28 <lv_label_refr_text+0x1d4>
            if(act_time < a.time) {
 8015bf6:	2900      	cmp	r1, #0
 8015bf8:	dd06      	ble.n	8015c08 <lv_label_refr_text+0x1b4>
                a.early_apply = 0;
 8015bfa:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
                a.act_time = act_time;      /*To keep the old position*/
 8015bfe:	9015      	str	r0, [sp, #84]	; 0x54
                a.early_apply = 0;
 8015c00:	f360 0300 	bfi	r3, r0, #0, #1
 8015c04:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015c08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015c0a:	4628      	mov	r0, r5
 8015c0c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015c0e:	f00e fac1 	bl	8024194 <lv_anim_speed_to_time>
    a->time = duration;
 8015c12:	9014      	str	r0, [sp, #80]	; 0x50
    a->playback_time = time;
 8015c14:	9017      	str	r0, [sp, #92]	; 0x5c
            lv_anim_start(&a);
 8015c16:	a809      	add	r0, sp, #36	; 0x24
 8015c18:	f7fc fbf2 	bl	8012400 <lv_anim_start>
    lv_obj_invalidate(obj);
 8015c1c:	4620      	mov	r0, r4
 8015c1e:	f007 f83d 	bl	801cc9c <lv_obj_invalidate>
}
 8015c22:	b01b      	add	sp, #108	; 0x6c
 8015c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                act_time = anim_cur->act_time;
 8015c28:	6b02      	ldr	r2, [r0, #48]	; 0x30
                playback_now = anim_cur->playback_now;
 8015c2a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
            if(act_time < a.time) {
 8015c2e:	428a      	cmp	r2, r1
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015c30:	9811      	ldr	r0, [sp, #68]	; 0x44
                playback_now = anim_cur->playback_now;
 8015c32:	f3c3 0340 	ubfx	r3, r3, #1, #1
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015c36:	9e13      	ldr	r6, [sp, #76]	; 0x4c
            if(act_time < a.time) {
 8015c38:	dae6      	bge.n	8015c08 <lv_label_refr_text+0x1b4>
                a.act_time = act_time;      /*To keep the old position*/
 8015c3a:	9215      	str	r2, [sp, #84]	; 0x54
                a.early_apply = 0;
 8015c3c:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
 8015c40:	f367 0200 	bfi	r2, r7, #0, #1
 8015c44:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
                if(playback_now) {
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d0dd      	beq.n	8015c08 <lv_label_refr_text+0x1b4>
                    a.playback_now = 1;
 8015c4c:	b2d3      	uxtb	r3, r2
                    a.start_value = a.end_value;
 8015c4e:	9611      	str	r6, [sp, #68]	; 0x44
                    a.end_value   = tmp;
 8015c50:	9013      	str	r0, [sp, #76]	; 0x4c
                    a.playback_now = 1;
 8015c52:	f043 0302 	orr.w	r3, r3, #2
 8015c56:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                    a.end_value   = tmp;
 8015c5a:	e7d5      	b.n	8015c08 <lv_label_refr_text+0x1b4>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8015c5c:	f1b9 0f03 	cmp.w	r9, #3
 8015c60:	f040 808a 	bne.w	8015d78 <lv_label_refr_text+0x324>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 8015c64:	2263      	movs	r2, #99	; 0x63
 8015c66:	2100      	movs	r1, #0
 8015c68:	4620      	mov	r0, r4
 8015c6a:	f007 ff3d 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8015c6e:	2265      	movs	r2, #101	; 0x65
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 8015c70:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8015c72:	2100      	movs	r1, #0
 8015c74:	4620      	mov	r0, r4
 8015c76:	f007 ff37 	bl	801dae8 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8015c7a:	b287      	uxth	r7, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8015c7c:	b93f      	cbnz	r7, 8015c8e <lv_label_refr_text+0x23a>
 8015c7e:	4620      	mov	r0, r4
 8015c80:	f7f0 fe28 	bl	80068d4 <lv_obj_get_disp>
 8015c84:	f7fc fa5c 	bl	8012140 <lv_disp_get_dpi>
 8015c88:	fb90 f7f9 	sdiv	r7, r0, r9
 8015c8c:	b2bf      	uxth	r7, r7
        lv_anim_init(&a);
 8015c8e:	a809      	add	r0, sp, #36	; 0x24
 8015c90:	f7fc fb6a 	bl	8012368 <lv_anim_init>
    a->repeat_cnt = cnt;
 8015c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015c98:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8015c9c:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
 8015ca0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    a->var = var;
 8015ca4:	9409      	str	r4, [sp, #36]	; 0x24
 8015ca6:	3301      	adds	r3, #1
 8015ca8:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8015caa:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8015cae:	b21b      	sxth	r3, r3
 8015cb0:	429a      	cmp	r2, r3
 8015cb2:	dd2a      	ble.n	8015d0a <lv_label_refr_text+0x2b6>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 8015cb4:	2220      	movs	r2, #32
 8015cb6:	4630      	mov	r0, r6
    a->exec_cb = exec_cb;
 8015cb8:	4e39      	ldr	r6, [pc, #228]	; (8015da0 <lv_label_refr_text+0x34c>)
 8015cba:	4611      	mov	r1, r2
 8015cbc:	f00e f9ef 	bl	802409e <lv_font_get_glyph_width>
 8015cc0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015cc4:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
    a->start_value = start;
 8015cc8:	2100      	movs	r1, #0
    a->exec_cb = exec_cb;
 8015cca:	960a      	str	r6, [sp, #40]	; 0x28
 8015ccc:	1ac2      	subs	r2, r0, r3
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015cce:	4638      	mov	r0, r7
    a->current_value = start;
 8015cd0:	e9cd 1111 	strd	r1, r1, [sp, #68]	; 0x44
    a->end_value = end;
 8015cd4:	9213      	str	r2, [sp, #76]	; 0x4c
 8015cd6:	f00e fa5d 	bl	8024194 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8015cda:	4631      	mov	r1, r6
    a->time = duration;
 8015cdc:	9014      	str	r0, [sp, #80]	; 0x50
 8015cde:	4620      	mov	r0, r4
 8015ce0:	f7fc fbd0 	bl	8012484 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8015ce4:	b100      	cbz	r0, 8015ce8 <lv_label_refr_text+0x294>
 8015ce6:	6b00      	ldr	r0, [r0, #48]	; 0x30
            if(anim_template) {
 8015ce8:	b125      	cbz	r5, 8015cf4 <lv_label_refr_text+0x2a0>
                a.act_time = anim_template->act_time;
 8015cea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015cec:	9315      	str	r3, [sp, #84]	; 0x54
                a.repeat_delay = anim_template->repeat_delay;
 8015cee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8015cf0:	9318      	str	r3, [sp, #96]	; 0x60
 8015cf2:	e73c      	b.n	8015b6e <lv_label_refr_text+0x11a>
            else if(act_time < a.time) {
 8015cf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015cf6:	4283      	cmp	r3, r0
                a.early_apply = 0;
 8015cf8:	bfc1      	itttt	gt
 8015cfa:	f89d 3066 	ldrbgt.w	r3, [sp, #102]	; 0x66
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8015cfe:	9015      	strgt	r0, [sp, #84]	; 0x54
                a.early_apply = 0;
 8015d00:	f365 0300 	bfigt	r3, r5, #0, #1
 8015d04:	f88d 3066 	strbgt.w	r3, [sp, #102]	; 0x66
 8015d08:	e731      	b.n	8015b6e <lv_label_refr_text+0x11a>
            lv_anim_del(obj, set_ofs_x_anim);
 8015d0a:	4925      	ldr	r1, [pc, #148]	; (8015da0 <lv_label_refr_text+0x34c>)
 8015d0c:	4620      	mov	r0, r4
 8015d0e:	f7fc fb47 	bl	80123a0 <lv_anim_del>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015d12:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015d16:	f8bd 001e 	ldrh.w	r0, [sp, #30]
            label->offset.x = 0;
 8015d1a:	2100      	movs	r1, #0
 8015d1c:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015d1e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
            label->offset.x = 0;
 8015d22:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
 8015d26:	1a1b      	subs	r3, r3, r0
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015d28:	b21b      	sxth	r3, r3
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	f77f af22 	ble.w	8015b74 <lv_label_refr_text+0x120>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 8015d30:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8015d34:	4252      	negs	r2, r2
    a->exec_cb = exec_cb;
 8015d36:	4e1b      	ldr	r6, [pc, #108]	; (8015da4 <lv_label_refr_text+0x350>)
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015d38:	4638      	mov	r0, r7
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 8015d3a:	1ad2      	subs	r2, r2, r3
 8015d3c:	960a      	str	r6, [sp, #40]	; 0x28
    a->end_value = end;
 8015d3e:	9213      	str	r2, [sp, #76]	; 0x4c
    a->current_value = start;
 8015d40:	e9cd 1111 	strd	r1, r1, [sp, #68]	; 0x44
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015d44:	f00e fa26 	bl	8024194 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8015d48:	4631      	mov	r1, r6
    a->time = duration;
 8015d4a:	9014      	str	r0, [sp, #80]	; 0x50
 8015d4c:	4620      	mov	r0, r4
 8015d4e:	f7fc fb99 	bl	8012484 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8015d52:	b100      	cbz	r0, 8015d56 <lv_label_refr_text+0x302>
 8015d54:	6b00      	ldr	r0, [r0, #48]	; 0x30
            if(anim_template) {
 8015d56:	b125      	cbz	r5, 8015d62 <lv_label_refr_text+0x30e>
                a.act_time = anim_template->act_time;
 8015d58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015d5a:	9315      	str	r3, [sp, #84]	; 0x54
                a.repeat_delay = anim_template->repeat_delay;
 8015d5c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8015d5e:	9318      	str	r3, [sp, #96]	; 0x60
 8015d60:	e759      	b.n	8015c16 <lv_label_refr_text+0x1c2>
            else if(act_time < a.time) {
 8015d62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d64:	4283      	cmp	r3, r0
                a.early_apply = 0;
 8015d66:	bfc1      	itttt	gt
 8015d68:	f89d 3066 	ldrbgt.w	r3, [sp, #102]	; 0x66
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8015d6c:	9015      	strgt	r0, [sp, #84]	; 0x54
                a.early_apply = 0;
 8015d6e:	f365 0300 	bfigt	r3, r5, #0, #1
 8015d72:	f88d 3066 	strbgt.w	r3, [sp, #102]	; 0x66
 8015d76:	e74e      	b.n	8015c16 <lv_label_refr_text+0x1c2>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 8015d78:	f1b9 0f01 	cmp.w	r9, #1
 8015d7c:	f47f af4e 	bne.w	8015c1c <lv_label_refr_text+0x1c8>
 8015d80:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015d84:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8015d88:	3301      	adds	r3, #1
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 8015d8a:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8015d8e:	1a5b      	subs	r3, r3, r1
 8015d90:	b21b      	sxth	r3, r3
 8015d92:	429a      	cmp	r2, r3
 8015d94:	dc08      	bgt.n	8015da8 <lv_label_refr_text+0x354>
            label->dot_end = LV_LABEL_DOT_END_INV;
 8015d96:	f04f 33ff 	mov.w	r3, #4294967295
 8015d9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015d9c:	e73e      	b.n	8015c1c <lv_label_refr_text+0x1c8>
 8015d9e:	bf00      	nop
 8015da0:	08026ea7 	.word	0x08026ea7
 8015da4:	08026e9f 	.word	0x08026e9f
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 8015da8:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8015dac:	4293      	cmp	r3, r2
 8015dae:	daf2      	bge.n	8015d96 <lv_label_refr_text+0x342>
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 8015db0:	4b52      	ldr	r3, [pc, #328]	; (8015efc <lv_label_refr_text+0x4a8>)
 8015db2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	4798      	blx	r3
 8015db8:	2803      	cmp	r0, #3
 8015dba:	d9ec      	bls.n	8015d96 <lv_label_refr_text+0x342>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015dbc:	f8bd 7020 	ldrh.w	r7, [sp, #32]
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 8015dc0:	222e      	movs	r2, #46	; 0x2e
 8015dc2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015dc6:	4630      	mov	r0, r6
 8015dc8:	3701      	adds	r7, #1
 8015dca:	4611      	mov	r1, r2
 8015dcc:	1aff      	subs	r7, r7, r3
 8015dce:	f00e f966 	bl	802409e <lv_font_get_glyph_width>
 8015dd2:	4440      	add	r0, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015dd4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015dd8:	b2bf      	uxth	r7, r7
            p.x = lv_area_get_width(&txt_coords) -
 8015dda:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
 8015dde:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015de2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015de6:	3301      	adds	r3, #1
 8015de8:	4407      	add	r7, r0
 8015dea:	1a9b      	subs	r3, r3, r2
 8015dec:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
 8015df0:	f8ad 7018 	strh.w	r7, [sp, #24]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 8015df4:	1950      	adds	r0, r2, r5
 8015df6:	b299      	uxth	r1, r3
            y_overed = p.y %
 8015df8:	b21b      	sxth	r3, r3
 8015dfa:	fb93 f6f0 	sdiv	r6, r3, r0
 8015dfe:	fb00 3316 	mls	r3, r0, r6, r3
                _lv_txt_encoded_prev(label->text, &byte_id);
 8015e02:	4e3f      	ldr	r6, [pc, #252]	; (8015f00 <lv_label_refr_text+0x4ac>)
            if(y_overed >= lv_font_get_line_height(font)) {
 8015e04:	b218      	sxth	r0, r3
 8015e06:	4282      	cmp	r2, r0
                p.y -= line_space;
 8015e08:	bfcc      	ite	gt
 8015e0a:	1b48      	subgt	r0, r1, r5
                p.y += lv_font_get_line_height(font);
 8015e0c:	1888      	addle	r0, r1, r2
                p.y -= line_space;
 8015e0e:	a906      	add	r1, sp, #24
 8015e10:	1ac0      	subs	r0, r0, r3
 8015e12:	b200      	sxth	r0, r0
 8015e14:	f8ad 001a 	strh.w	r0, [sp, #26]
    LV_ASSERT_NULL(pos_in);
 8015e18:	4620      	mov	r0, r4
 8015e1a:	f7ff fd25 	bl	8015868 <lv_label_get_letter_on.part.0>
 8015e1e:	4605      	mov	r5, r0
            size_t txt_len = strlen(label->text);
 8015e20:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015e22:	f004 fc93 	bl	801a74c <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8015e26:	4b37      	ldr	r3, [pc, #220]	; (8015f04 <lv_label_refr_text+0x4b0>)
            size_t txt_len = strlen(label->text);
 8015e28:	4680      	mov	r8, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8015e2a:	4629      	mov	r1, r5
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015e30:	4798      	blx	r3
 8015e32:	9009      	str	r0, [sp, #36]	; 0x24
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8015e34:	9f09      	ldr	r7, [sp, #36]	; 0x24
                _lv_txt_encoded_prev(label->text, &byte_id);
 8015e36:	6a60      	ldr	r0, [r4, #36]	; 0x24
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8015e38:	f107 0903 	add.w	r9, r7, #3
 8015e3c:	45c8      	cmp	r8, r9
 8015e3e:	d32d      	bcc.n	8015e9c <lv_label_refr_text+0x448>
 8015e40:	f04f 0b04 	mov.w	fp, #4
            uint8_t len = 0;
 8015e44:	2600      	movs	r6, #0
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8015e46:	4a30      	ldr	r2, [pc, #192]	; (8015f08 <lv_label_refr_text+0x4b4>)
                _lv_txt_encoded_next(label->text, &byte_id);
 8015e48:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8015f0c <lv_label_refr_text+0x4b8>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8015e4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015e50:	6813      	ldr	r3, [r2, #0]
 8015e52:	4408      	add	r0, r1
 8015e54:	4798      	blx	r3
 8015e56:	4430      	add	r0, r6
                _lv_txt_encoded_next(label->text, &byte_id);
 8015e58:	f8da 3000 	ldr.w	r3, [sl]
 8015e5c:	a909      	add	r1, sp, #36	; 0x24
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8015e5e:	b2c6      	uxtb	r6, r0
                _lv_txt_encoded_next(label->text, &byte_id);
 8015e60:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015e62:	4798      	blx	r3
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 8015e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e66:	2e03      	cmp	r6, #3
 8015e68:	d81d      	bhi.n	8015ea6 <lv_label_refr_text+0x452>
 8015e6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e6c:	4588      	cmp	r8, r1
 8015e6e:	d303      	bcc.n	8015e78 <lv_label_refr_text+0x424>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8015e70:	f1bb 0b01 	subs.w	fp, fp, #1
 8015e74:	4a24      	ldr	r2, [pc, #144]	; (8015f08 <lv_label_refr_text+0x4b4>)
 8015e76:	d1e9      	bne.n	8015e4c <lv_label_refr_text+0x3f8>
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8015e78:	4620      	mov	r0, r4
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8015e7a:	eb03 0807 	add.w	r8, r3, r7
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8015e7e:	f010 ffec 	bl	8026e5a <lv_label_dot_tmp_free>
        label->dot_tmp_alloc = false;
 8015e82:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8015e86:	4632      	mov	r2, r6
 8015e88:	4641      	mov	r1, r8
 8015e8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015e8e:	f36f 1386 	bfc	r3, #6, #1
 8015e92:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8015e96:	f004 fc6c 	bl	801a772 <memcpy>
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 8015e9a:	e01f      	b.n	8015edc <lv_label_refr_text+0x488>
                _lv_txt_encoded_prev(label->text, &byte_id);
 8015e9c:	6833      	ldr	r3, [r6, #0]
 8015e9e:	a909      	add	r1, sp, #36	; 0x24
                letter_id--;
 8015ea0:	3d01      	subs	r5, #1
                _lv_txt_encoded_prev(label->text, &byte_id);
 8015ea2:	4798      	blx	r3
                letter_id--;
 8015ea4:	e7c6      	b.n	8015e34 <lv_label_refr_text+0x3e0>
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8015ea6:	4620      	mov	r0, r4
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8015ea8:	eb03 0807 	add.w	r8, r3, r7
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8015eac:	f010 ffd5 	bl	8026e5a <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 8015eb0:	2e04      	cmp	r6, #4
 8015eb2:	d0e6      	beq.n	8015e82 <lv_label_refr_text+0x42e>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8015eb4:	1c70      	adds	r0, r6, #1
 8015eb6:	f7fc fc2f 	bl	8012718 <lv_mem_alloc>
 8015eba:	62a0      	str	r0, [r4, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 8015ebc:	2800      	cmp	r0, #0
 8015ebe:	f43f aead 	beq.w	8015c1c <lv_label_refr_text+0x1c8>
 8015ec2:	4632      	mov	r2, r6
 8015ec4:	4641      	mov	r1, r8
 8015ec6:	f004 fc54 	bl	801a772 <memcpy>
        label->dot.tmp_ptr[len] = '\0';
 8015eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015ecc:	2200      	movs	r2, #0
 8015ece:	559a      	strb	r2, [r3, r6]
        label->dot_tmp_alloc    = true;
 8015ed0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8015ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ed8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                    label->text[byte_id_ori + i] = '.';
 8015edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ede:	222e      	movs	r2, #46	; 0x2e
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8015ee0:	3503      	adds	r5, #3
                    label->text[byte_id_ori + i] = '.';
 8015ee2:	55da      	strb	r2, [r3, r7]
 8015ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ee6:	443b      	add	r3, r7
 8015ee8:	705a      	strb	r2, [r3, #1]
 8015eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015eec:	443b      	add	r3, r7
 8015eee:	709a      	strb	r2, [r3, #2]
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ef4:	f803 2009 	strb.w	r2, [r3, r9]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8015ef8:	62e5      	str	r5, [r4, #44]	; 0x2c
 8015efa:	e68f      	b.n	8015c1c <lv_label_refr_text+0x1c8>
 8015efc:	240000f0 	.word	0x240000f0
 8015f00:	240000fc 	.word	0x240000fc
 8015f04:	240000f8 	.word	0x240000f8
 8015f08:	24000108 	.word	0x24000108
 8015f0c:	24000100 	.word	0x24000100

08015f10 <lv_label_event>:
{
 8015f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8015f14:	4839      	ldr	r0, [pc, #228]	; (8015ffc <lv_label_event+0xec>)
{
 8015f16:	b093      	sub	sp, #76	; 0x4c
 8015f18:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8015f1a:	f005 f988 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8015f1e:	2801      	cmp	r0, #1
 8015f20:	d166      	bne.n	8015ff0 <lv_label_event+0xe0>
    lv_event_code_t code = lv_event_get_code(e);
 8015f22:	4628      	mov	r0, r5
 8015f24:	f005 f99d 	bl	801b262 <lv_event_get_code>
 8015f28:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8015f2a:	4628      	mov	r0, r5
 8015f2c:	f005 f995 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 8015f30:	2e2a      	cmp	r6, #42	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 8015f32:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8015f34:	d107      	bne.n	8015f46 <lv_label_event+0x36>
        lv_label_revert_dots(obj);
 8015f36:	f7ff fc6b 	bl	8015810 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 8015f3a:	4620      	mov	r0, r4
}
 8015f3c:	b013      	add	sp, #76	; 0x4c
 8015f3e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        lv_label_refr_text(obj);
 8015f42:	f7ff bd87 	b.w	8015a54 <lv_label_refr_text>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8015f46:	2e13      	cmp	r6, #19
 8015f48:	d10d      	bne.n	8015f66 <lv_label_event+0x56>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8015f4a:	f010 ffbe 	bl	8026eca <lv_obj_get_style_text_font.constprop.0>
        lv_event_set_ext_draw_size(e, font_h / 4);
 8015f4e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015f52:	4628      	mov	r0, r5
 8015f54:	2900      	cmp	r1, #0
 8015f56:	bfb8      	it	lt
 8015f58:	3103      	addlt	r1, #3
 8015f5a:	1089      	asrs	r1, r1, #2
}
 8015f5c:	b013      	add	sp, #76	; 0x4c
 8015f5e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        lv_event_set_ext_draw_size(e, font_h / 4);
 8015f62:	f005 b9da 	b.w	801b31a <lv_event_set_ext_draw_size>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8015f66:	2e29      	cmp	r6, #41	; 0x29
 8015f68:	d0e5      	beq.n	8015f36 <lv_label_event+0x26>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8015f6a:	2e2c      	cmp	r6, #44	; 0x2c
 8015f6c:	d148      	bne.n	8016000 <lv_label_event+0xf0>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8015f6e:	f010 ffac 	bl	8026eca <lv_obj_get_style_text_font.constprop.0>
 8015f72:	4606      	mov	r6, r0
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8015f74:	4620      	mov	r0, r4
 8015f76:	f010 ffa1 	bl	8026ebc <lv_obj_get_style_text_letter_space.constprop.0>
 8015f7a:	4607      	mov	r7, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8015f7c:	4620      	mov	r0, r4
 8015f7e:	f010 ff96 	bl	8026eae <lv_obj_get_style_text_line_space.constprop.0>
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015f82:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8015f86:	4680      	mov	r8, r0
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015f88:	f3c3 1900 	ubfx	r9, r3, #4, #1
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015f8c:	0698      	lsls	r0, r3, #26
        lv_coord_t w = lv_obj_get_content_width(obj);
 8015f8e:	4620      	mov	r0, r4
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015f90:	bf48      	it	mi
 8015f92:	f049 0902 	orrmi.w	r9, r9, #2
        lv_coord_t w = lv_obj_get_content_width(obj);
 8015f96:	f006 fc8d 	bl	801c8b4 <lv_obj_get_content_width>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	f010 ff9b 	bl	8026ed6 <lv_obj_get_style_width.constprop.0>
 8015fa0:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8015fa4:	4298      	cmp	r0, r3
 8015fa6:	d103      	bne.n	8015fb0 <lv_label_event+0xa0>
 8015fa8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8015fac:	0759      	lsls	r1, r3, #29
 8015fae:	d522      	bpl.n	8015ff6 <lv_label_event+0xe6>
        else w = lv_obj_get_content_width(obj);
 8015fb0:	4620      	mov	r0, r4
 8015fb2:	f006 fc7f 	bl	801c8b4 <lv_obj_get_content_width>
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 8015fb6:	463b      	mov	r3, r7
 8015fb8:	4632      	mov	r2, r6
 8015fba:	f8cd 8000 	str.w	r8, [sp]
 8015fbe:	e9cd 0901 	strd	r0, r9, [sp, #4]
 8015fc2:	a80a      	add	r0, sp, #40	; 0x28
 8015fc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015fc6:	f00f fc6b 	bl	80258a0 <lv_txt_get_size>
        lv_point_t * self_size = lv_event_get_param(e);
 8015fca:	4628      	mov	r0, r5
 8015fcc:	f005 f94d 	bl	801b26a <lv_event_get_param>
        self_size->x = LV_MAX(self_size->x, size.x);
 8015fd0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8015fd4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015fd8:	4293      	cmp	r3, r2
 8015fda:	bfb8      	it	lt
 8015fdc:	4613      	movlt	r3, r2
        self_size->y = LV_MAX(self_size->y, size.y);
 8015fde:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
        self_size->x = LV_MAX(self_size->x, size.x);
 8015fe2:	8003      	strh	r3, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 8015fe4:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8015fe8:	4293      	cmp	r3, r2
 8015fea:	bfb8      	it	lt
 8015fec:	4613      	movlt	r3, r2
 8015fee:	8043      	strh	r3, [r0, #2]
}
 8015ff0:	b013      	add	sp, #76	; 0x4c
 8015ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8015ff6:	f641 70ff 	movw	r0, #8191	; 0x1fff
 8015ffa:	e7dc      	b.n	8015fb6 <lv_label_event+0xa6>
 8015ffc:	08029a44 	.word	0x08029a44
    else if(code == LV_EVENT_DRAW_MAIN) {
 8016000:	2e15      	cmp	r6, #21
 8016002:	d1f5      	bne.n	8015ff0 <lv_label_event+0xe0>
    lv_obj_t * obj = lv_event_get_target(e);
 8016004:	4628      	mov	r0, r5
 8016006:	f005 f928 	bl	801b25a <lv_event_get_target>
 801600a:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801600c:	4628      	mov	r0, r5
 801600e:	f005 f97d 	bl	801b30c <lv_event_get_draw_ctx>
    lv_obj_get_content_coords(obj, &txt_coords);
 8016012:	a906      	add	r1, sp, #24
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016014:	4605      	mov	r5, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 8016016:	4620      	mov	r0, r4
 8016018:	f006 fc78 	bl	801c90c <lv_obj_get_content_coords>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801601c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8016020:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8016022:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8016024:	f3c3 1600 	ubfx	r6, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8016028:	bf48      	it	mi
 801602a:	f046 0602 	orrmi.w	r6, r6, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801602e:	f010 ff52 	bl	8026ed6 <lv_obj_get_style_width.constprop.0>
 8016032:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8016036:	4298      	cmp	r0, r3
 8016038:	d105      	bne.n	8016046 <lv_label_event+0x136>
 801603a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801603e:	075b      	lsls	r3, r3, #29
 8016040:	bf58      	it	pl
 8016042:	f046 0604 	orrpl.w	r6, r6, #4
    lv_draw_label_dsc_init(&label_draw_dsc);
 8016046:	a80a      	add	r0, sp, #40	; 0x28
 8016048:	f7f1 fe62 	bl	8007d10 <lv_draw_label_dsc_init>
    label_draw_dsc.ofs_x = label->offset.x;
 801604c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8016050:	aa0a      	add	r2, sp, #40	; 0x28
 8016052:	2100      	movs	r1, #0
    label_draw_dsc.ofs_x = label->offset.x;
 8016054:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8016058:	4620      	mov	r0, r4
    label_draw_dsc.ofs_y = label->offset.y;
 801605a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    label_draw_dsc.flag = flag;
 801605e:	f88d 6045 	strb.w	r6, [sp, #69]	; 0x45
    label_draw_dsc.ofs_y = label->offset.y;
 8016062:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8016066:	f006 f896 	bl	801c196 <lv_obj_init_draw_label_dsc>
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 801606a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801606e:	b913      	cbnz	r3, 8016076 <lv_label_event+0x166>
 8016070:	2301      	movs	r3, #1
 8016072:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    return label->sel_start;
 8016076:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8016078:	f64f 73ff 	movw	r3, #65535	; 0xffff
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 801607c:	910b      	str	r1, [sp, #44]	; 0x2c
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 801607e:	4299      	cmp	r1, r3
    return label->sel_end;
 8016080:	6c22      	ldr	r2, [r4, #64]	; 0x40
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 8016082:	920c      	str	r2, [sp, #48]	; 0x30
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8016084:	d017      	beq.n	80160b6 <lv_label_event+0x1a6>
 8016086:	429a      	cmp	r2, r3
 8016088:	d015      	beq.n	80160b6 <lv_label_event+0x1a6>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 801608a:	2255      	movs	r2, #85	; 0x55
 801608c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8016090:	4620      	mov	r0, r4
 8016092:	f007 fd29 	bl	801dae8 <lv_obj_get_style_prop>
 8016096:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801609a:	4602      	mov	r2, r0
 801609c:	4620      	mov	r0, r4
 801609e:	f007 ff3a 	bl	801df16 <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 80160a2:	2220      	movs	r2, #32
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 80160a4:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
 80160a8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80160ac:	4620      	mov	r0, r4
 80160ae:	f007 fd1b 	bl	801dae8 <lv_obj_get_style_prop>
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 80160b2:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 80160b6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80160ba:	f003 0306 	and.w	r3, r3, #6
 80160be:	2b02      	cmp	r3, #2
 80160c0:	d120      	bne.n	8016104 <lv_label_event+0x1f4>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 80160c2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 80160c6:	3b02      	subs	r3, #2
 80160c8:	2b01      	cmp	r3, #1
 80160ca:	d81b      	bhi.n	8016104 <lv_label_event+0x1f4>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 80160cc:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80160d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160d2:	9602      	str	r6, [sp, #8]
 80160d4:	a808      	add	r0, sp, #32
 80160d6:	9301      	str	r3, [sp, #4]
 80160d8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80160dc:	9300      	str	r3, [sp, #0]
 80160de:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 80160e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80160e4:	f00f fbdc 	bl	80258a0 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80160e8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80160ec:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80160f0:	3301      	adds	r3, #1
 80160f2:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 80160f4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80160f8:	b21b      	sxth	r3, r3
 80160fa:	429a      	cmp	r2, r3
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 80160fc:	bfc4      	itt	gt
 80160fe:	2301      	movgt	r3, #1
 8016100:	f88d 3044 	strbgt.w	r3, [sp, #68]	; 0x44
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 8016104:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016108:	f003 0307 	and.w	r3, r3, #7
 801610c:	2b03      	cmp	r3, #3
 801610e:	f000 8096 	beq.w	801623e <lv_label_event+0x32e>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016112:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8016116:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801611a:	3301      	adds	r3, #1
 801611c:	1a9b      	subs	r3, r3, r2
 801611e:	b21b      	sxth	r3, r3
 8016120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016124:	f2c0 808b 	blt.w	801623e <lv_label_event+0x32e>
    lv_draw_label_hint_t * hint = &label->hint;
 8016128:	f104 0730 	add.w	r7, r4, #48	; 0x30
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 801612c:	68aa      	ldr	r2, [r5, #8]
 801612e:	a906      	add	r1, sp, #24
 8016130:	a808      	add	r0, sp, #32
 8016132:	f00e f8d2 	bl	80242da <_lv_area_intersect>
    if(!is_common) return;
 8016136:	2800      	cmp	r0, #0
 8016138:	f43f af5a 	beq.w	8015ff0 <lv_label_event+0xe0>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 801613c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8016140:	f011 0807 	ands.w	r8, r1, #7
 8016144:	d10b      	bne.n	801615e <lv_label_event+0x24e>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 8016146:	4620      	mov	r0, r4
 8016148:	f006 ff47 	bl	801cfda <lv_obj_get_scroll_top>
        lv_area_move(&txt_coords, 0, -s);
 801614c:	4242      	negs	r2, r0
 801614e:	4641      	mov	r1, r8
 8016150:	a806      	add	r0, sp, #24
 8016152:	b212      	sxth	r2, r2
 8016154:	f00e f8b0 	bl	80242b8 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 8016158:	8b63      	ldrh	r3, [r4, #26]
 801615a:	f8ad 301e 	strh.w	r3, [sp, #30]
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 801615e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016162:	f003 0306 	and.w	r3, r3, #6
 8016166:	2b02      	cmp	r3, #2
 8016168:	d16b      	bne.n	8016242 <lv_label_event+0x332>
        draw_ctx->clip_area = &txt_clip;
 801616a:	ab08      	add	r3, sp, #32
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801616c:	f8d5 8008 	ldr.w	r8, [r5, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8016170:	aa06      	add	r2, sp, #24
 8016172:	a90a      	add	r1, sp, #40	; 0x28
        draw_ctx->clip_area = &txt_clip;
 8016174:	60ab      	str	r3, [r5, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8016176:	4628      	mov	r0, r5
 8016178:	9700      	str	r7, [sp, #0]
 801617a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801617c:	f7f1 fde0 	bl	8007d40 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8016180:	f8c5 8008 	str.w	r8, [r5, #8]
    draw_ctx->clip_area = &txt_clip;
 8016184:	ab08      	add	r3, sp, #32
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8016186:	f8d5 8008 	ldr.w	r8, [r5, #8]
    draw_ctx->clip_area = &txt_clip;
 801618a:	60ab      	str	r3, [r5, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 801618c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016190:	f003 0307 	and.w	r3, r3, #7
 8016194:	2b03      	cmp	r3, #3
 8016196:	d14f      	bne.n	8016238 <lv_label_event+0x328>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8016198:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801619c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801619e:	9602      	str	r6, [sp, #8]
 80161a0:	a805      	add	r0, sp, #20
 80161a2:	9301      	str	r3, [sp, #4]
 80161a4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80161a8:	9300      	str	r3, [sp, #0]
 80161aa:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 80161ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80161b0:	f00f fb76 	bl	80258a0 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80161b4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80161b8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80161bc:	3201      	adds	r2, #1
        if(size.x > lv_area_get_width(&txt_coords)) {
 80161be:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80161c2:	1a52      	subs	r2, r2, r1
 80161c4:	b212      	sxth	r2, r2
 80161c6:	4293      	cmp	r3, r2
 80161c8:	dd18      	ble.n	80161fc <lv_label_event+0x2ec>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 80161ca:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 80161ce:	980a      	ldr	r0, [sp, #40]	; 0x28
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 80161d0:	4413      	add	r3, r2
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 80161d2:	2220      	movs	r2, #32
 80161d4:	4611      	mov	r1, r2
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 80161d6:	b29e      	uxth	r6, r3
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 80161d8:	f00d ff61 	bl	802409e <lv_font_get_glyph_width>
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80161dc:	aa06      	add	r2, sp, #24
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 80161de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80161e2:	a90a      	add	r1, sp, #40	; 0x28
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 80161e4:	4406      	add	r6, r0
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80161e6:	4628      	mov	r0, r5
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 80161e8:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
            label_draw_dsc.ofs_y = label->offset.y;
 80161ec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80161f0:	9700      	str	r7, [sp, #0]
            label_draw_dsc.ofs_y = label->offset.y;
 80161f2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80161f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161f8:	f7f1 fda2 	bl	8007d40 <lv_draw_label>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80161fc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8016200:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8016204:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords)) {
 8016206:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 801620a:	1a5b      	subs	r3, r3, r1
 801620c:	b21b      	sxth	r3, r3
 801620e:	429a      	cmp	r2, r3
 8016210:	dd12      	ble.n	8016238 <lv_label_event+0x328>
            label_draw_dsc.ofs_x = label->offset.x;
 8016212:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8016216:	a90a      	add	r1, sp, #40	; 0x28
 8016218:	4628      	mov	r0, r5
            label_draw_dsc.ofs_x = label->offset.x;
 801621a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801621e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8016220:	891b      	ldrh	r3, [r3, #8]
 8016222:	441a      	add	r2, r3
 8016224:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8016228:	9700      	str	r7, [sp, #0]
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 801622a:	441a      	add	r2, r3
 801622c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8016230:	aa06      	add	r2, sp, #24
 8016232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016234:	f7f1 fd84 	bl	8007d40 <lv_draw_label>
    draw_ctx->clip_area = clip_area_ori;
 8016238:	f8c5 8008 	str.w	r8, [r5, #8]
 801623c:	e6d8      	b.n	8015ff0 <lv_label_event+0xe0>
        hint = NULL;
 801623e:	2700      	movs	r7, #0
 8016240:	e774      	b.n	801612c <lv_label_event+0x21c>
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8016242:	9700      	str	r7, [sp, #0]
 8016244:	aa06      	add	r2, sp, #24
 8016246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016248:	a90a      	add	r1, sp, #40	; 0x28
 801624a:	4628      	mov	r0, r5
 801624c:	f7f1 fd78 	bl	8007d40 <lv_draw_label>
 8016250:	e798      	b.n	8016184 <lv_label_event+0x274>
 8016252:	bf00      	nop

08016254 <lv_label_create>:
{
 8016254:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8016256:	4804      	ldr	r0, [pc, #16]	; (8016268 <lv_label_create+0x14>)
{
 8016258:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801625a:	f7ee fde1 	bl	8004e20 <lv_obj_class_create_obj>
 801625e:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8016260:	f005 fdec 	bl	801be3c <lv_obj_class_init_obj>
}
 8016264:	4620      	mov	r0, r4
 8016266:	bd10      	pop	{r4, pc}
 8016268:	08029a44 	.word	0x08029a44

0801626c <lv_label_set_long_mode>:
{
 801626c:	b538      	push	{r3, r4, r5, lr}
 801626e:	4604      	mov	r4, r0
 8016270:	460d      	mov	r5, r1
    lv_anim_del(obj, set_ofs_x_anim);
 8016272:	4914      	ldr	r1, [pc, #80]	; (80162c4 <lv_label_set_long_mode+0x58>)
 8016274:	f7fc f894 	bl	80123a0 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 8016278:	4913      	ldr	r1, [pc, #76]	; (80162c8 <lv_label_set_long_mode+0x5c>)
 801627a:	4620      	mov	r0, r4
 801627c:	f7fc f890 	bl	80123a0 <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 8016280:	1eaa      	subs	r2, r5, #2
    label->offset.x = 0;
 8016282:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 8016284:	2a02      	cmp	r2, #2
    label->offset.x = 0;
 8016286:	6463      	str	r3, [r4, #68]	; 0x44
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 8016288:	bf8c      	ite	hi
 801628a:	2200      	movhi	r2, #0
 801628c:	2201      	movls	r2, #1
 801628e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016292:	f362 1345 	bfi	r3, r2, #5, #1
 8016296:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 801629a:	f003 0307 	and.w	r3, r3, #7
 801629e:	2b01      	cmp	r3, #1
 80162a0:	d105      	bne.n	80162ae <lv_label_set_long_mode+0x42>
 80162a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80162a4:	3301      	adds	r3, #1
 80162a6:	d002      	beq.n	80162ae <lv_label_set_long_mode+0x42>
        lv_label_revert_dots(obj);
 80162a8:	4620      	mov	r0, r4
 80162aa:	f7ff fab1 	bl	8015810 <lv_label_revert_dots>
    label->long_mode = long_mode;
 80162ae:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 80162b2:	4620      	mov	r0, r4
    label->long_mode = long_mode;
 80162b4:	f365 0302 	bfi	r3, r5, #0, #3
 80162b8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 80162bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(obj);
 80162c0:	f7ff bbc8 	b.w	8015a54 <lv_label_refr_text>
 80162c4:	08026ea7 	.word	0x08026ea7
 80162c8:	08026e9f 	.word	0x08026e9f

080162cc <lv_label_constructor>:
{
 80162cc:	b538      	push	{r3, r4, r5, lr}
    label->dot_end    = LV_LABEL_DOT_END_INV;
 80162ce:	f04f 33ff 	mov.w	r3, #4294967295
{
 80162d2:	460c      	mov	r4, r1
    label->text       = NULL;
 80162d4:	2500      	movs	r5, #0
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80162d6:	4620      	mov	r0, r4
    label->offset.x = 0;
 80162d8:	644d      	str	r5, [r1, #68]	; 0x44
    label->hint.line_start = -1;
 80162da:	e9c1 330b 	strd	r3, r3, [r1, #44]	; 0x2c
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 80162de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 80162e2:	e9c1 330f 	strd	r3, r3, [r1, #60]	; 0x3c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 80162e6:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 80162ea:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    label->dot.tmp_ptr   = NULL;
 80162ee:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    label->long_mode  = LV_LABEL_LONG_WRAP;
 80162f2:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    label->hint.coord_y    = 0;
 80162f6:	e9c1 550d 	strd	r5, r5, [r1, #52]	; 0x34
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80162fa:	2102      	movs	r1, #2
 80162fc:	f005 fb6b 	bl	801b9d6 <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 8016300:	4629      	mov	r1, r5
 8016302:	4620      	mov	r0, r4
 8016304:	f7ff ffb2 	bl	801626c <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 8016308:	4620      	mov	r0, r4
 801630a:	4902      	ldr	r1, [pc, #8]	; (8016314 <lv_label_constructor+0x48>)
}
 801630c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_set_text(obj, "Text");
 8016310:	f010 bde8 	b.w	8026ee4 <lv_label_set_text>
 8016314:	0802dfed 	.word	0x0802dfed

08016318 <lv_label_get_letter_pos>:
{
 8016318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801631c:	b08d      	sub	sp, #52	; 0x34
 801631e:	4605      	mov	r5, r0
    LV_ASSERT_NULL(pos);
 8016320:	4617      	mov	r7, r2
{
 8016322:	9107      	str	r1, [sp, #28]
    LV_ASSERT_NULL(pos);
 8016324:	b902      	cbnz	r2, 8016328 <lv_label_get_letter_pos+0x10>
 8016326:	e7fe      	b.n	8016326 <lv_label_get_letter_pos+0xe>
    return label->text;
 8016328:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, txt);
 801632a:	2100      	movs	r1, #0
 801632c:	4622      	mov	r2, r4
 801632e:	f007 ff14 	bl	801e15a <lv_obj_calculate_style_text_align>
    if(txt[0] == '\0') {
 8016332:	7823      	ldrb	r3, [r4, #0]
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, txt);
 8016334:	4683      	mov	fp, r0
    if(txt[0] == '\0') {
 8016336:	b9b3      	cbnz	r3, 8016366 <lv_label_get_letter_pos+0x4e>
        switch(align) {
 8016338:	2802      	cmp	r0, #2
        pos->y = 0;
 801633a:	807b      	strh	r3, [r7, #2]
        switch(align) {
 801633c:	d00c      	beq.n	8016358 <lv_label_get_letter_pos+0x40>
 801633e:	2803      	cmp	r0, #3
 8016340:	d005      	beq.n	801634e <lv_label_get_letter_pos+0x36>
 8016342:	2801      	cmp	r0, #1
 8016344:	d100      	bne.n	8016348 <lv_label_get_letter_pos+0x30>
                pos->x = 0;
 8016346:	803b      	strh	r3, [r7, #0]
}
 8016348:	b00d      	add	sp, #52	; 0x34
 801634a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                pos->x = lv_obj_get_content_width(obj);
 801634e:	4628      	mov	r0, r5
 8016350:	f006 fab0 	bl	801c8b4 <lv_obj_get_content_width>
                pos->x = lv_obj_get_content_width(obj) / 2;
 8016354:	8038      	strh	r0, [r7, #0]
                break;
 8016356:	e7f7      	b.n	8016348 <lv_label_get_letter_pos+0x30>
                pos->x = lv_obj_get_content_width(obj) / 2;
 8016358:	4628      	mov	r0, r5
 801635a:	f006 faab 	bl	801c8b4 <lv_obj_get_content_width>
 801635e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8016362:	1040      	asrs	r0, r0, #1
 8016364:	e7f6      	b.n	8016354 <lv_label_get_letter_pos+0x3c>
    lv_obj_get_content_coords(obj, &txt_coords);
 8016366:	a90a      	add	r1, sp, #40	; 0x28
 8016368:	4628      	mov	r0, r5
 801636a:	f006 facf 	bl	801c90c <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801636e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8016372:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8016376:	4628      	mov	r0, r5
 8016378:	3301      	adds	r3, #1
 801637a:	1a9b      	subs	r3, r3, r2
 801637c:	b21b      	sxth	r3, r3
 801637e:	9308      	str	r3, [sp, #32]
 8016380:	f010 fda3 	bl	8026eca <lv_obj_get_style_text_font.constprop.0>
 8016384:	9003      	str	r0, [sp, #12]
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8016386:	4628      	mov	r0, r5
 8016388:	f010 fd91 	bl	8026eae <lv_obj_get_style_text_line_space.constprop.0>
 801638c:	9005      	str	r0, [sp, #20]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801638e:	4628      	mov	r0, r5
 8016390:	f010 fd94 	bl	8026ebc <lv_obj_get_style_text_letter_space.constprop.0>
 8016394:	9b03      	ldr	r3, [sp, #12]
 8016396:	9004      	str	r0, [sp, #16]
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8016398:	4628      	mov	r0, r5
 801639a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801639e:	9306      	str	r3, [sp, #24]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 80163a0:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 80163a4:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 80163a6:	f3c3 1a00 	ubfx	sl, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 80163aa:	bf48      	it	mi
 80163ac:	f04a 0a02 	orrmi.w	sl, sl, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80163b0:	f010 fd91 	bl	8026ed6 <lv_obj_get_style_width.constprop.0>
 80163b4:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80163b8:	4298      	cmp	r0, r3
 80163ba:	d105      	bne.n	80163c8 <lv_label_get_letter_pos+0xb0>
 80163bc:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 80163c0:	075b      	lsls	r3, r3, #29
 80163c2:	bf58      	it	pl
 80163c4:	f04a 0a04 	orrpl.w	sl, sl, #4
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 80163c8:	4b41      	ldr	r3, [pc, #260]	; (80164d0 <lv_label_get_letter_pos+0x1b8>)
 80163ca:	4620      	mov	r0, r4
 80163cc:	9907      	ldr	r1, [sp, #28]
    lv_coord_t y             = 0;
 80163ce:	f04f 0800 	mov.w	r8, #0
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	4798      	blx	r3
    uint32_t line_start      = 0;
 80163d6:	4646      	mov	r6, r8
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 80163d8:	4605      	mov	r5, r0
        y += letter_height + line_space;
 80163da:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80163de:	4413      	add	r3, r2
 80163e0:	9309      	str	r3, [sp, #36]	; 0x24
    while(txt[new_line_start] != '\0') {
 80163e2:	5da3      	ldrb	r3, [r4, r6]
 80163e4:	19a0      	adds	r0, r4, r6
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d143      	bne.n	8016472 <lv_label_get_letter_pos+0x15a>
 80163ea:	46b1      	mov	r9, r6
    if(byte_id > 0) {
 80163ec:	b17d      	cbz	r5, 801640e <lv_label_get_letter_pos+0xf6>
        if((txt[byte_id - 1] == '\n' || txt[byte_id - 1] == '\r') && txt[byte_id] == '\0') {
 80163ee:	1963      	adds	r3, r4, r5
 80163f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80163f4:	2b0a      	cmp	r3, #10
 80163f6:	d001      	beq.n	80163fc <lv_label_get_letter_pos+0xe4>
 80163f8:	2b0d      	cmp	r3, #13
 80163fa:	d108      	bne.n	801640e <lv_label_get_letter_pos+0xf6>
 80163fc:	5d63      	ldrb	r3, [r4, r5]
 80163fe:	b933      	cbnz	r3, 801640e <lv_label_get_letter_pos+0xf6>
            y += letter_height + line_space;
 8016400:	462e      	mov	r6, r5
 8016402:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8016406:	4413      	add	r3, r2
 8016408:	4443      	add	r3, r8
 801640a:	fa0f f883 	sxth.w	r8, r3
    bidi_txt = &txt[line_start];
 801640e:	4434      	add	r4, r6
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 8016410:	1ba9      	subs	r1, r5, r6
 8016412:	f8cd a000 	str.w	sl, [sp]
 8016416:	4620      	mov	r0, r4
 8016418:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 801641c:	f00f fa01 	bl	8025822 <lv_txt_get_width>
    if(char_id != line_start) x += letter_space;
 8016420:	9b07      	ldr	r3, [sp, #28]
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 8016422:	4605      	mov	r5, r0
    if(char_id != line_start) x += letter_space;
 8016424:	429e      	cmp	r6, r3
 8016426:	bf1e      	ittt	ne
 8016428:	9b04      	ldrne	r3, [sp, #16]
 801642a:	18ed      	addne	r5, r5, r3
 801642c:	b22d      	sxthne	r5, r5
    if(align == LV_TEXT_ALIGN_CENTER) {
 801642e:	f1bb 0f02 	cmp.w	fp, #2
 8016432:	d135      	bne.n	80164a0 <lv_label_get_letter_pos+0x188>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8016434:	eba9 0106 	sub.w	r1, r9, r6
 8016438:	4620      	mov	r0, r4
 801643a:	f8cd a000 	str.w	sl, [sp]
 801643e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8016442:	f00f f9ee 	bl	8025822 <lv_txt_get_width>
 8016446:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801644a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801644e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8016452:	3301      	adds	r3, #1
 8016454:	f340 004f 	sbfx	r0, r0, #1, #16
 8016458:	1a9b      	subs	r3, r3, r2
 801645a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 801645e:	fa02 f383 	sxtah	r3, r2, r3
 8016462:	ebc0 0063 	rsb	r0, r0, r3, asr #1
 8016466:	4428      	add	r0, r5
 8016468:	b205      	sxth	r5, r0
    pos->x = x;
 801646a:	803d      	strh	r5, [r7, #0]
    pos->y = y;
 801646c:	f8a7 8002 	strh.w	r8, [r7, #2]
 8016470:	e76a      	b.n	8016348 <lv_label_get_letter_pos+0x30>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8016472:	2300      	movs	r3, #0
 8016474:	f8cd a004 	str.w	sl, [sp, #4]
 8016478:	9300      	str	r3, [sp, #0]
 801647a:	9b08      	ldr	r3, [sp, #32]
 801647c:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 8016480:	f7fc fc4c 	bl	8012d1c <_lv_txt_get_next_line>
 8016484:	eb06 0900 	add.w	r9, r6, r0
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
 8016488:	454d      	cmp	r5, r9
 801648a:	d3af      	bcc.n	80163ec <lv_label_get_letter_pos+0xd4>
 801648c:	f814 3009 	ldrb.w	r3, [r4, r9]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d0ab      	beq.n	80163ec <lv_label_get_letter_pos+0xd4>
        y += letter_height + line_space;
 8016494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016496:	464e      	mov	r6, r9
 8016498:	4498      	add	r8, r3
 801649a:	fa0f f888 	sxth.w	r8, r8
        line_start = new_line_start;
 801649e:	e7a0      	b.n	80163e2 <lv_label_get_letter_pos+0xca>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80164a0:	f1bb 0f03 	cmp.w	fp, #3
 80164a4:	d1e1      	bne.n	801646a <lv_label_get_letter_pos+0x152>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80164a6:	eba9 0106 	sub.w	r1, r9, r6
 80164aa:	4620      	mov	r0, r4
 80164ac:	f8cd a000 	str.w	sl, [sp]
 80164b0:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80164b4:	f00f f9b5 	bl	8025822 <lv_txt_get_width>
 80164b8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80164bc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80164c0:	3301      	adds	r3, #1
 80164c2:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 80164c4:	b21b      	sxth	r3, r3
 80164c6:	1a1b      	subs	r3, r3, r0
 80164c8:	442b      	add	r3, r5
 80164ca:	b21d      	sxth	r5, r3
 80164cc:	e7cd      	b.n	801646a <lv_label_get_letter_pos+0x152>
 80164ce:	bf00      	nop
 80164d0:	240000f8 	.word	0x240000f8

080164d4 <lv_label_ins_text>:
{
 80164d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164d6:	4604      	mov	r4, r0
 80164d8:	460d      	mov	r5, r1
    LV_ASSERT_NULL(txt);
 80164da:	4616      	mov	r6, r2
 80164dc:	b902      	cbnz	r2, 80164e0 <lv_label_ins_text+0xc>
 80164de:	e7fe      	b.n	80164de <lv_label_ins_text+0xa>
    if(label->static_txt != 0) return;
 80164e0:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80164e4:	071b      	lsls	r3, r3, #28
 80164e6:	d423      	bmi.n	8016530 <lv_label_ins_text+0x5c>
    lv_obj_invalidate(obj);
 80164e8:	f006 fbd8 	bl	801cc9c <lv_obj_invalidate>
    size_t old_len = strlen(label->text);
 80164ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80164ee:	f004 f92d 	bl	801a74c <strlen>
 80164f2:	4607      	mov	r7, r0
    size_t ins_len = strlen(txt);
 80164f4:	4630      	mov	r0, r6
 80164f6:	f004 f929 	bl	801a74c <strlen>
    size_t new_len = ins_len + old_len;
 80164fa:	1839      	adds	r1, r7, r0
    label->text        = lv_mem_realloc(label->text, new_len + 1);
 80164fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80164fe:	3101      	adds	r1, #1
 8016500:	f7fc f940 	bl	8012784 <lv_mem_realloc>
 8016504:	6260      	str	r0, [r4, #36]	; 0x24
    LV_ASSERT_MALLOC(label->text);
 8016506:	b900      	cbnz	r0, 801650a <lv_label_ins_text+0x36>
 8016508:	e7fe      	b.n	8016508 <lv_label_ins_text+0x34>
    if(pos == LV_LABEL_POS_LAST) {
 801650a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801650e:	429d      	cmp	r5, r3
 8016510:	d103      	bne.n	801651a <lv_label_ins_text+0x46>
        pos = _lv_txt_get_encoded_length(label->text);
 8016512:	4b08      	ldr	r3, [pc, #32]	; (8016534 <lv_label_ins_text+0x60>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	4798      	blx	r3
 8016518:	4605      	mov	r5, r0
    _lv_txt_ins(label->text, pos, txt);
 801651a:	4629      	mov	r1, r5
 801651c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801651e:	4632      	mov	r2, r6
 8016520:	f7fc fd10 	bl	8012f44 <_lv_txt_ins>
    lv_label_set_text(obj, NULL);
 8016524:	4620      	mov	r0, r4
 8016526:	2100      	movs	r1, #0
}
 8016528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_set_text(obj, NULL);
 801652c:	f010 bcda 	b.w	8026ee4 <lv_label_set_text>
}
 8016530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016532:	bf00      	nop
 8016534:	240000f0 	.word	0x240000f0

08016538 <lv_line_event>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_line_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8016538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801653c:	485a      	ldr	r0, [pc, #360]	; (80166a8 <lv_line_event+0x170>)
{
 801653e:	b089      	sub	sp, #36	; 0x24
 8016540:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8016542:	f004 fe74 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8016546:	2801      	cmp	r0, #1
 8016548:	d116      	bne.n	8016578 <lv_line_event+0x40>

    lv_event_code_t code = lv_event_get_code(e);
 801654a:	4628      	mov	r0, r5
 801654c:	f004 fe89 	bl	801b262 <lv_event_get_code>
 8016550:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8016552:	4628      	mov	r0, r5
 8016554:	f004 fe81 	bl	801b25a <lv_event_get_target>

    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8016558:	2e13      	cmp	r6, #19
    lv_obj_t * obj = lv_event_get_target(e);
 801655a:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801655c:	d10f      	bne.n	801657e <lv_line_event+0x46>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 801655e:	2249      	movs	r2, #73	; 0x49
 8016560:	2100      	movs	r1, #0
 8016562:	f007 fac1 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016566:	b204      	sxth	r4, r0
        /*The corner of the skew lines is out of the intended area*/
        lv_coord_t line_width = lv_obj_get_style_line_width(obj, LV_PART_MAIN);
        lv_coord_t * s = lv_event_get_param(e);
 8016568:	4628      	mov	r0, r5
 801656a:	f004 fe7e 	bl	801b26a <lv_event_get_param>
        if(*s < line_width) *s = line_width;
 801656e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016572:	42a3      	cmp	r3, r4
 8016574:	da00      	bge.n	8016578 <lv_line_event+0x40>
 8016576:	8004      	strh	r4, [r0, #0]
            }
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
        }
    }
}
 8016578:	b009      	add	sp, #36	; 0x24
 801657a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801657e:	2e2c      	cmp	r6, #44	; 0x2c
 8016580:	d12b      	bne.n	80165da <lv_line_event+0xa2>
        if(line->point_num == 0 || line->point_array == NULL) return;
 8016582:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8016584:	2b00      	cmp	r3, #0
 8016586:	d0f7      	beq.n	8016578 <lv_line_event+0x40>
 8016588:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801658a:	2b00      	cmp	r3, #0
 801658c:	d0f4      	beq.n	8016578 <lv_line_event+0x40>
        lv_point_t * p = lv_event_get_param(e);
 801658e:	4628      	mov	r0, r5
 8016590:	f004 fe6b 	bl	801b26a <lv_event_get_param>
        for(i = 0; i < line->point_num; i++) {
 8016594:	2300      	movs	r3, #0
        lv_point_t * p = lv_event_get_param(e);
 8016596:	4606      	mov	r6, r0
        for(i = 0; i < line->point_num; i++) {
 8016598:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        lv_coord_t h = 0;
 801659a:	461f      	mov	r7, r3
        lv_coord_t w = 0;
 801659c:	461d      	mov	r5, r3
        for(i = 0; i < line->point_num; i++) {
 801659e:	b29a      	uxth	r2, r3
 80165a0:	4291      	cmp	r1, r2
 80165a2:	d80b      	bhi.n	80165bc <lv_line_event+0x84>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 80165a4:	2249      	movs	r2, #73	; 0x49
 80165a6:	2100      	movs	r1, #0
 80165a8:	4620      	mov	r0, r4
 80165aa:	f007 fa9d 	bl	801dae8 <lv_obj_get_style_prop>
        w += line_width;
 80165ae:	fa15 f580 	uxtah	r5, r5, r0
        h += line_width;
 80165b2:	fa17 f080 	uxtah	r0, r7, r0
        p->x = w;
 80165b6:	8035      	strh	r5, [r6, #0]
        p->y = h;
 80165b8:	8070      	strh	r0, [r6, #2]
 80165ba:	e7dd      	b.n	8016578 <lv_line_event+0x40>
            w = LV_MAX(line->point_array[i].x, w);
 80165bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80165be:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 80165c2:	f932 2023 	ldrsh.w	r2, [r2, r3, lsl #2]
 80165c6:	3301      	adds	r3, #1
 80165c8:	4295      	cmp	r5, r2
 80165ca:	bfb8      	it	lt
 80165cc:	4615      	movlt	r5, r2
            h = LV_MAX(line->point_array[i].y, h);
 80165ce:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80165d2:	4297      	cmp	r7, r2
 80165d4:	bfb8      	it	lt
 80165d6:	4617      	movlt	r7, r2
        for(i = 0; i < line->point_num; i++) {
 80165d8:	e7e1      	b.n	801659e <lv_line_event+0x66>
    else if(code == LV_EVENT_DRAW_MAIN) {
 80165da:	2e15      	cmp	r6, #21
 80165dc:	d1cc      	bne.n	8016578 <lv_line_event+0x40>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80165de:	4628      	mov	r0, r5
 80165e0:	f004 fe94 	bl	801b30c <lv_event_get_draw_ctx>
        if(line->point_num == 0 || line->point_array == NULL) return;
 80165e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80165e6:	4681      	mov	r9, r0
        if(line->point_num == 0 || line->point_array == NULL) return;
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d0c5      	beq.n	8016578 <lv_line_event+0x40>
 80165ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d0c2      	beq.n	8016578 <lv_line_event+0x40>
        lv_obj_get_coords(obj, &area);
 80165f2:	a903      	add	r1, sp, #12
 80165f4:	4620      	mov	r0, r4
 80165f6:	f006 f901 	bl	801c7fc <lv_obj_get_coords>
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 80165fa:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 80165fe:	4620      	mov	r0, r4
        for(i = 0; i < line->point_num - 1; i++) {
 8016600:	f04f 0800 	mov.w	r8, #0
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 8016604:	f006 fcdd 	bl	801cfc2 <lv_obj_get_scroll_x>
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 8016608:	f8bd 600e 	ldrh.w	r6, [sp, #14]
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 801660c:	1a3f      	subs	r7, r7, r0
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 801660e:	4620      	mov	r0, r4
 8016610:	f006 fcdd 	bl	801cfce <lv_obj_get_scroll_y>
 8016614:	1a36      	subs	r6, r6, r0
        lv_coord_t h = lv_obj_get_height(obj);
 8016616:	4620      	mov	r0, r4
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 8016618:	b2bf      	uxth	r7, r7
        lv_coord_t h = lv_obj_get_height(obj);
 801661a:	f006 f945 	bl	801c8a8 <lv_obj_get_height>
 801661e:	4605      	mov	r5, r0
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 8016620:	b2b6      	uxth	r6, r6
        lv_draw_line_dsc_init(&line_dsc);
 8016622:	a805      	add	r0, sp, #20
 8016624:	f008 f9c3 	bl	801e9ae <lv_draw_line_dsc_init>
        lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 8016628:	aa05      	add	r2, sp, #20
 801662a:	4435      	add	r5, r6
 801662c:	2100      	movs	r1, #0
 801662e:	4620      	mov	r0, r4
 8016630:	b2ad      	uxth	r5, r5
 8016632:	f005 fe4d 	bl	801c2d0 <lv_obj_init_draw_line_dsc>
        for(i = 0; i < line->point_num - 1; i++) {
 8016636:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8016638:	fa1f f388 	uxth.w	r3, r8
 801663c:	3a01      	subs	r2, #1
 801663e:	4293      	cmp	r3, r2
 8016640:	da9a      	bge.n	8016578 <lv_line_event+0x40>
            p1.x = line->point_array[i].x + x_ofs;
 8016642:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016644:	009a      	lsls	r2, r3, #2
 8016646:	f108 0801 	add.w	r8, r8, #1
 801664a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801664e:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8016652:	443b      	add	r3, r7
 8016654:	f8ad 3004 	strh.w	r3, [sp, #4]
            p2.x = line->point_array[i + 1].x + x_ofs;
 8016658:	1d13      	adds	r3, r2, #4
 801665a:	18ca      	adds	r2, r1, r3
 801665c:	5acb      	ldrh	r3, [r1, r3]
            if(line->y_inv == 0) {
 801665e:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
            p2.x = line->point_array[i + 1].x + x_ofs;
 8016662:	443b      	add	r3, r7
            if(line->y_inv == 0) {
 8016664:	07c9      	lsls	r1, r1, #31
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8016666:	a905      	add	r1, sp, #20
            p2.x = line->point_array[i + 1].x + x_ofs;
 8016668:	f8ad 3008 	strh.w	r3, [sp, #8]
                p1.y = line->point_array[i].y + y_ofs;
 801666c:	8843      	ldrh	r3, [r0, #2]
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 801666e:	4648      	mov	r0, r9
                p1.y = line->point_array[i].y + y_ofs;
 8016670:	bf55      	itete	pl
 8016672:	199b      	addpl	r3, r3, r6
                p1.y = h - line->point_array[i].y + y_ofs;
 8016674:	1aeb      	submi	r3, r5, r3
                p1.y = line->point_array[i].y + y_ofs;
 8016676:	f8ad 3006 	strhpl.w	r3, [sp, #6]
                p1.y = h - line->point_array[i].y + y_ofs;
 801667a:	f8ad 3006 	strhmi.w	r3, [sp, #6]
                p2.y = line->point_array[i + 1].y + y_ofs;
 801667e:	bf54      	ite	pl
 8016680:	8853      	ldrhpl	r3, [r2, #2]
                p2.y = h - line->point_array[i + 1].y + y_ofs;
 8016682:	8853      	ldrhmi	r3, [r2, #2]
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8016684:	aa01      	add	r2, sp, #4
                p2.y = line->point_array[i + 1].y + y_ofs;
 8016686:	bf54      	ite	pl
 8016688:	199b      	addpl	r3, r3, r6
                p2.y = h - line->point_array[i + 1].y + y_ofs;
 801668a:	1aeb      	submi	r3, r5, r3
 801668c:	b21b      	sxth	r3, r3
                p2.y = line->point_array[i + 1].y + y_ofs;
 801668e:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8016692:	ab02      	add	r3, sp, #8
 8016694:	f008 f998 	bl	801e9c8 <lv_draw_line>
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
 8016698:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801669c:	f36f 0382 	bfc	r3, #2, #1
 80166a0:	f88d 301d 	strb.w	r3, [sp, #29]
        for(i = 0; i < line->point_num - 1; i++) {
 80166a4:	e7c7      	b.n	8016636 <lv_line_event+0xfe>
 80166a6:	bf00      	nop
 80166a8:	08029a60 	.word	0x08029a60

080166ac <refr_position>:
 * Refresh the position of the roller. It uses the id stored in: roller->ddlist.selected_option_id
 * @param roller pointer to a roller object
 * @param anim_en LV_ANIM_ON: refresh with animation; LV_ANOM_OFF: without animation
 */
static void refr_position(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 80166ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166b0:	b095      	sub	sp, #84	; 0x54
 80166b2:	4680      	mov	r8, r0
 80166b4:	460f      	mov	r7, r1
    lv_obj_t * label = get_label(obj);
 80166b6:	f010 fd96 	bl	80271e6 <get_label>
    if(label == NULL) return;
 80166ba:	4605      	mov	r5, r0
 80166bc:	2800      	cmp	r0, #0
 80166be:	d05a      	beq.n	8016776 <refr_position+0xca>

    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, lv_label_get_text(label));
 80166c0:	f010 fc91 	bl	8026fe6 <lv_label_get_text>
 80166c4:	2100      	movs	r1, #0
 80166c6:	4602      	mov	r2, r0
 80166c8:	4628      	mov	r0, r5
 80166ca:	f007 fd46 	bl	801e15a <lv_obj_calculate_style_text_align>

    switch(align) {
 80166ce:	2802      	cmp	r0, #2
 80166d0:	d005      	beq.n	80166de <refr_position+0x32>
 80166d2:	2803      	cmp	r0, #3
 80166d4:	d052      	beq.n	801677c <refr_position+0xd0>
 80166d6:	2801      	cmp	r0, #1
 80166d8:	d110      	bne.n	80166fc <refr_position+0x50>
            break;
        case LV_TEXT_ALIGN_RIGHT:
            lv_obj_set_x(label, lv_obj_get_content_width(obj) - lv_obj_get_width(label));
            break;
        case LV_TEXT_ALIGN_LEFT:
            lv_obj_set_x(label, 0);
 80166da:	2100      	movs	r1, #0
 80166dc:	e00b      	b.n	80166f6 <refr_position+0x4a>
            lv_obj_set_x(label, (lv_obj_get_content_width(obj) - lv_obj_get_width(label)) / 2);
 80166de:	4640      	mov	r0, r8
 80166e0:	f006 f8e8 	bl	801c8b4 <lv_obj_get_content_width>
 80166e4:	4604      	mov	r4, r0
 80166e6:	4628      	mov	r0, r5
 80166e8:	f006 f8d8 	bl	801c89c <lv_obj_get_width>
 80166ec:	1a20      	subs	r0, r4, r0
 80166ee:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80166f2:	f340 014f 	sbfx	r1, r0, #1, #16
            lv_obj_set_x(label, 0);
 80166f6:	4628      	mov	r0, r5
 80166f8:	f005 ffdd 	bl	801c6b6 <lv_obj_set_x>
            break;
    }

    lv_roller_t * roller = (lv_roller_t *)obj;
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80166fc:	2100      	movs	r1, #0
 80166fe:	4640      	mov	r0, r8
 8016700:	f010 fd6c 	bl	80271dc <lv_obj_get_style_text_font>
 8016704:	4604      	mov	r4, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8016706:	4640      	mov	r0, r8
 8016708:	f010 fd70 	bl	80271ec <lv_obj_get_style_text_line_space.constprop.0>
 801670c:	4682      	mov	sl, r0
    lv_coord_t font_h              = lv_font_get_line_height(font);
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 801670e:	4640      	mov	r0, r8
 8016710:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8016714:	f006 f8e4 	bl	801c8e0 <lv_obj_get_content_height>
 8016718:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801671a:	2264      	movs	r2, #100	; 0x64
 801671c:	2100      	movs	r1, #0
 801671e:	4640      	mov	r0, r8
 8016720:	ea4f 74d9 	mov.w	r4, r9, lsr #31
 8016724:	f007 f9e0 	bl	801dae8 <lv_obj_get_style_prop>
 8016728:	44ca      	add	sl, r9
 801672a:	4606      	mov	r6, r0
    uint16_t anim_time             = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);
 801672c:	b281      	uxth	r1, r0

    /*Normally the animation's `end_cb` sets correct position of the roller if infinite.
     *But without animations do it manually*/
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801672e:	ea4f 72db 	mov.w	r2, fp, lsr #31
 8016732:	b36f      	cbz	r7, 8016790 <refr_position+0xe4>
 8016734:	b361      	cbz	r1, 8016790 <refr_position+0xe4>
        inf_normalize(obj);
    }

    int32_t id = roller->sel_opt_id;
    lv_coord_t sel_y1 = id * (font_h + line_space);
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8016736:	444c      	add	r4, r9
 8016738:	445a      	add	r2, fp
    lv_coord_t sel_y1 = id * (font_h + line_space);
 801673a:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801673e:	1064      	asrs	r4, r4, #1
    lv_coord_t sel_y1 = id * (font_h + line_space);
 8016740:	fb13 f30a 	smulbb	r3, r3, sl
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8016744:	ebc4 0462 	rsb	r4, r4, r2, asr #1

    lv_coord_t new_y = mid_y1 - sel_y1;
 8016748:	1ae4      	subs	r4, r4, r3
 801674a:	b224      	sxth	r4, r4
        lv_anim_del(label, set_y_anim);
        lv_obj_set_y(label, new_y);
    }
    else {
        lv_anim_t a;
        lv_anim_init(&a);
 801674c:	a803      	add	r0, sp, #12
 801674e:	b2b6      	uxth	r6, r6
 8016750:	f7fb fe0a 	bl	8012368 <lv_anim_init>
    a->exec_cb = exec_cb;
 8016754:	4b1e      	ldr	r3, [pc, #120]	; (80167d0 <refr_position+0x124>)
        lv_anim_set_var(&a, label);
        lv_anim_set_exec_cb(&a, set_y_anim);
        lv_anim_set_values(&a, lv_obj_get_y(label), new_y);
 8016756:	4628      	mov	r0, r5
    a->var = var;
 8016758:	9503      	str	r5, [sp, #12]
    a->exec_cb = exec_cb;
 801675a:	9304      	str	r3, [sp, #16]
 801675c:	f006 f877 	bl	801c84e <lv_obj_get_y>
    a->ready_cb = ready_cb;
 8016760:	4b1c      	ldr	r3, [pc, #112]	; (80167d4 <refr_position+0x128>)
 8016762:	940d      	str	r4, [sp, #52]	; 0x34
 8016764:	9306      	str	r3, [sp, #24]
    a->path_cb = path_cb;
 8016766:	4b1c      	ldr	r3, [pc, #112]	; (80167d8 <refr_position+0x12c>)
    a->time = duration;
 8016768:	960e      	str	r6, [sp, #56]	; 0x38
    a->path_cb = path_cb;
 801676a:	930a      	str	r3, [sp, #40]	; 0x28
    a->current_value = start;
 801676c:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
        lv_anim_set_time(&a, anim_time);
        lv_anim_set_ready_cb(&a, scroll_anim_ready_cb);
        lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
        lv_anim_start(&a);
 8016770:	a803      	add	r0, sp, #12
 8016772:	f7fb fe45 	bl	8012400 <lv_anim_start>
    }
}
 8016776:	b015      	add	sp, #84	; 0x54
 8016778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_obj_set_x(label, lv_obj_get_content_width(obj) - lv_obj_get_width(label));
 801677c:	4640      	mov	r0, r8
 801677e:	f006 f899 	bl	801c8b4 <lv_obj_get_content_width>
 8016782:	4604      	mov	r4, r0
 8016784:	4628      	mov	r0, r5
 8016786:	f006 f889 	bl	801c89c <lv_obj_get_width>
 801678a:	1a21      	subs	r1, r4, r0
 801678c:	b209      	sxth	r1, r1
 801678e:	e7b2      	b.n	80166f6 <refr_position+0x4a>
        inf_normalize(obj);
 8016790:	4640      	mov	r0, r8
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8016792:	444c      	add	r4, r9
 8016794:	e9cd 1200 	strd	r1, r2, [sp]
        inf_normalize(obj);
 8016798:	f010 fd65 	bl	8027266 <inf_normalize>
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801679c:	9a01      	ldr	r2, [sp, #4]
 801679e:	1064      	asrs	r4, r4, #1
    lv_coord_t sel_y1 = id * (font_h + line_space);
 80167a0:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80167a4:	445a      	add	r2, fp
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 80167a6:	9900      	ldr	r1, [sp, #0]
    lv_coord_t sel_y1 = id * (font_h + line_space);
 80167a8:	fb13 f30a 	smulbb	r3, r3, sl
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80167ac:	ebc4 0462 	rsb	r4, r4, r2, asr #1
    lv_coord_t new_y = mid_y1 - sel_y1;
 80167b0:	1ae4      	subs	r4, r4, r3
 80167b2:	b224      	sxth	r4, r4
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 80167b4:	b10f      	cbz	r7, 80167ba <refr_position+0x10e>
 80167b6:	2900      	cmp	r1, #0
 80167b8:	d1c8      	bne.n	801674c <refr_position+0xa0>
        lv_anim_del(label, set_y_anim);
 80167ba:	4905      	ldr	r1, [pc, #20]	; (80167d0 <refr_position+0x124>)
 80167bc:	4628      	mov	r0, r5
 80167be:	f7fb fdef 	bl	80123a0 <lv_anim_del>
        lv_obj_set_y(label, new_y);
 80167c2:	4621      	mov	r1, r4
 80167c4:	4628      	mov	r0, r5
}
 80167c6:	b015      	add	sp, #84	; 0x54
 80167c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_set_y(label, new_y);
 80167cc:	f005 bf8a 	b.w	801c6e4 <lv_obj_set_y>
 80167d0:	080271d7 	.word	0x080271d7
 80167d4:	080272e5 	.word	0x080272e5
 80167d8:	080241b1 	.word	0x080241b1

080167dc <lv_roller_constructor>:
{
 80167dc:	b538      	push	{r3, r4, r5, lr}
    roller->option_cnt = 0;
 80167de:	2500      	movs	r5, #0
    roller->mode = LV_ROLLER_MODE_NORMAL;
 80167e0:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
{
 80167e4:	460c      	mov	r4, r1
    roller->mode = LV_ROLLER_MODE_NORMAL;
 80167e6:	f365 0300 	bfi	r3, r5, #0, #1
    roller->option_cnt = 0;
 80167ea:	624d      	str	r5, [r1, #36]	; 0x24
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 80167ec:	4620      	mov	r0, r4
    roller->sel_opt_id_ori = 0;
 80167ee:	850d      	strh	r5, [r1, #40]	; 0x28
    roller->mode = LV_ROLLER_MODE_NORMAL;
 80167f0:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 80167f4:	2110      	movs	r1, #16
 80167f6:	f005 f8ee 	bl	801b9d6 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN_VER);
 80167fa:	4620      	mov	r0, r4
 80167fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016800:	f005 f8e9 	bl	801b9d6 <lv_obj_clear_flag>
    lv_obj_t * label = lv_obj_class_create_obj(&lv_roller_label_class, obj);
 8016804:	4621      	mov	r1, r4
 8016806:	4806      	ldr	r0, [pc, #24]	; (8016820 <lv_roller_constructor+0x44>)
 8016808:	f7ee fb0a 	bl	8004e20 <lv_obj_class_create_obj>
    lv_obj_class_init_obj(label);
 801680c:	f005 fb16 	bl	801be3c <lv_obj_class_init_obj>
    LV_ASSERT_NULL(options);
 8016810:	462a      	mov	r2, r5
 8016812:	4620      	mov	r0, r4
 8016814:	4903      	ldr	r1, [pc, #12]	; (8016824 <lv_roller_constructor+0x48>)
}
 8016816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801681a:	f010 bd6b 	b.w	80272f4 <lv_roller_set_options.part.0>
 801681e:	bf00      	nop
 8016820:	08029a7c 	.word	0x08029a7c
 8016824:	0802dff2 	.word	0x0802dff2

08016828 <lv_roller_label_event>:
{
 8016828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_event_code_t code = lv_event_get_code(e);
 801682c:	4608      	mov	r0, r1
{
 801682e:	b090      	sub	sp, #64	; 0x40
 8016830:	460c      	mov	r4, r1
    lv_event_code_t code = lv_event_get_code(e);
 8016832:	f004 fd16 	bl	801b262 <lv_event_get_code>
    if(code != LV_EVENT_DRAW_MAIN) {
 8016836:	2815      	cmp	r0, #21
    lv_event_code_t code = lv_event_get_code(e);
 8016838:	4605      	mov	r5, r0
    if(code != LV_EVENT_DRAW_MAIN) {
 801683a:	d16b      	bne.n	8016914 <lv_roller_label_event+0xec>
    lv_obj_t * label = lv_event_get_target(e);
 801683c:	4620      	mov	r0, r4
 801683e:	f004 fd0c 	bl	801b25a <lv_event_get_target>
    lv_obj_t * label_obj = lv_event_get_target(e);
 8016842:	4620      	mov	r0, r4
 8016844:	f004 fd09 	bl	801b25a <lv_event_get_target>
 8016848:	4605      	mov	r5, r0
    lv_obj_t * roller = lv_obj_get_parent(label_obj);
 801684a:	f007 fcd1 	bl	801e1f0 <lv_obj_get_parent>
 801684e:	4606      	mov	r6, r0
    lv_draw_label_dsc_init(&label_draw_dsc);
 8016850:	a808      	add	r0, sp, #32
 8016852:	f7f1 fa5d 	bl	8007d10 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(roller, LV_PART_MAIN, &label_draw_dsc);
 8016856:	4630      	mov	r0, r6
 8016858:	aa08      	add	r2, sp, #32
 801685a:	2100      	movs	r1, #0
 801685c:	f005 fc9b 	bl	801c196 <lv_obj_init_draw_label_dsc>
    if(lv_label_get_recolor(label_obj)) label_draw_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 8016860:	4628      	mov	r0, r5
 8016862:	f010 fbc2 	bl	8026fea <lv_label_get_recolor>
 8016866:	2800      	cmp	r0, #0
 8016868:	f040 8081 	bne.w	801696e <lv_roller_label_event+0x146>
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801686c:	4620      	mov	r0, r4
    if(!_lv_area_intersect(&roller_clip_area, draw_ctx->clip_area, &roller->coords)) return;
 801686e:	f10d 0808 	add.w	r8, sp, #8
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016872:	f004 fd4b 	bl	801b30c <lv_event_get_draw_ctx>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8016876:	6887      	ldr	r7, [r0, #8]
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016878:	4604      	mov	r4, r0
    if(!_lv_area_intersect(&roller_clip_area, draw_ctx->clip_area, &roller->coords)) return;
 801687a:	f106 0214 	add.w	r2, r6, #20
 801687e:	4639      	mov	r1, r7
 8016880:	4640      	mov	r0, r8
 8016882:	f00d fd2a 	bl	80242da <_lv_area_intersect>
 8016886:	2800      	cmp	r0, #0
 8016888:	d06e      	beq.n	8016968 <lv_roller_label_event+0x140>
    get_sel_area(roller, &sel_area);
 801688a:	a904      	add	r1, sp, #16
 801688c:	4630      	mov	r0, r6
    draw_ctx->clip_area = &roller_clip_area;
 801688e:	f8c4 8008 	str.w	r8, [r4, #8]
    get_sel_area(roller, &sel_area);
 8016892:	f010 fcb2 	bl	80271fa <get_sel_area>
    clip2.x1 = label_obj->coords.x1;
 8016896:	696a      	ldr	r2, [r5, #20]
    clip2.x2 = label_obj->coords.x2;
 8016898:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
    clip2.x1 = label_obj->coords.x1;
 801689c:	9206      	str	r2, [sp, #24]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 801689e:	aa06      	add	r2, sp, #24
    clip2.x2 = label_obj->coords.x2;
 80168a0:	f8ad 301c 	strh.w	r3, [sp, #28]
    clip2.y2 = sel_area.y1;
 80168a4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80168a8:	4610      	mov	r0, r2
 80168aa:	68a1      	ldr	r1, [r4, #8]
    clip2.y2 = sel_area.y1;
 80168ac:	f8ad 301e 	strh.w	r3, [sp, #30]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80168b0:	f00d fd13 	bl	80242da <_lv_area_intersect>
 80168b4:	b178      	cbz	r0, 80168d6 <lv_roller_label_event+0xae>
        draw_ctx->clip_area = &clip2;
 80168b6:	ab06      	add	r3, sp, #24
        const lv_area_t * clip_area_ori2 = draw_ctx->clip_area;
 80168b8:	68a6      	ldr	r6, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 80168ba:	4628      	mov	r0, r5
        draw_ctx->clip_area = &clip2;
 80168bc:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 80168be:	f010 fb92 	bl	8026fe6 <lv_label_get_text>
 80168c2:	2200      	movs	r2, #0
 80168c4:	4603      	mov	r3, r0
 80168c6:	a908      	add	r1, sp, #32
 80168c8:	9200      	str	r2, [sp, #0]
 80168ca:	4620      	mov	r0, r4
 80168cc:	f105 0214 	add.w	r2, r5, #20
 80168d0:	f7f1 fa36 	bl	8007d40 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori2;
 80168d4:	60a6      	str	r6, [r4, #8]
    clip2.x1 = label_obj->coords.x1;
 80168d6:	8aab      	ldrh	r3, [r5, #20]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80168d8:	aa06      	add	r2, sp, #24
 80168da:	68a1      	ldr	r1, [r4, #8]
    clip2.x1 = label_obj->coords.x1;
 80168dc:	f8ad 3018 	strh.w	r3, [sp, #24]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80168e0:	4610      	mov	r0, r2
    clip2.y1 = sel_area.y2;
 80168e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80168e6:	f8ad 301a 	strh.w	r3, [sp, #26]
    clip2.x2 = label_obj->coords.x2;
 80168ea:	69ab      	ldr	r3, [r5, #24]
 80168ec:	9307      	str	r3, [sp, #28]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80168ee:	f00d fcf4 	bl	80242da <_lv_area_intersect>
 80168f2:	b168      	cbz	r0, 8016910 <lv_roller_label_event+0xe8>
        draw_ctx->clip_area = &clip2;
 80168f4:	ab06      	add	r3, sp, #24
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 80168f6:	4628      	mov	r0, r5
        draw_ctx->clip_area = &clip2;
 80168f8:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 80168fa:	f010 fb74 	bl	8026fe6 <lv_label_get_text>
 80168fe:	2200      	movs	r2, #0
 8016900:	4603      	mov	r3, r0
 8016902:	a908      	add	r1, sp, #32
 8016904:	9200      	str	r2, [sp, #0]
 8016906:	4620      	mov	r0, r4
 8016908:	f105 0214 	add.w	r2, r5, #20
 801690c:	f7f1 fa18 	bl	8007d40 <lv_draw_label>
    draw_ctx->clip_area = clip_area_ori;
 8016910:	60a7      	str	r7, [r4, #8]
 8016912:	e029      	b.n	8016968 <lv_roller_label_event+0x140>
        res = lv_obj_event_base(MY_CLASS_LABEL, e);
 8016914:	4621      	mov	r1, r4
 8016916:	4819      	ldr	r0, [pc, #100]	; (801697c <lv_roller_label_event+0x154>)
 8016918:	f004 fc89 	bl	801b22e <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801691c:	2801      	cmp	r0, #1
 801691e:	d123      	bne.n	8016968 <lv_roller_label_event+0x140>
    lv_obj_t * label = lv_event_get_target(e);
 8016920:	4620      	mov	r0, r4
 8016922:	f004 fc9a 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8016926:	2d13      	cmp	r5, #19
    lv_obj_t * label = lv_event_get_target(e);
 8016928:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801692a:	d009      	beq.n	8016940 <lv_roller_label_event+0x118>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801692c:	2d29      	cmp	r5, #41	; 0x29
 801692e:	d11b      	bne.n	8016968 <lv_roller_label_event+0x140>
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 8016930:	f007 fc5e 	bl	801e1f0 <lv_obj_get_parent>
 8016934:	2100      	movs	r1, #0
}
 8016936:	b010      	add	sp, #64	; 0x40
 8016938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 801693c:	f7ff beb6 	b.w	80166ac <refr_position>
        lv_coord_t * s = lv_event_get_param(e);
 8016940:	4620      	mov	r0, r4
 8016942:	f004 fc92 	bl	801b26a <lv_event_get_param>
 8016946:	4605      	mov	r5, r0
        lv_obj_t * obj = lv_obj_get_parent(label);
 8016948:	4630      	mov	r0, r6
 801694a:	f007 fc51 	bl	801e1f0 <lv_obj_get_parent>
        lv_coord_t sel_w = get_selected_label_width(obj);
 801694e:	f010 fd30 	bl	80273b2 <get_selected_label_width>
 8016952:	4604      	mov	r4, r0
        lv_coord_t label_w = lv_obj_get_width(label);
 8016954:	4630      	mov	r0, r6
 8016956:	f005 ffa1 	bl	801c89c <lv_obj_get_width>
        *s = LV_MAX(*s, sel_w - label_w);
 801695a:	f9b5 3000 	ldrsh.w	r3, [r5]
 801695e:	1a24      	subs	r4, r4, r0
 8016960:	429c      	cmp	r4, r3
 8016962:	bfb8      	it	lt
 8016964:	461c      	movlt	r4, r3
 8016966:	802c      	strh	r4, [r5, #0]
}
 8016968:	b010      	add	sp, #64	; 0x40
 801696a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(lv_label_get_recolor(label_obj)) label_draw_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 801696e:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 8016972:	f043 0301 	orr.w	r3, r3, #1
 8016976:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 801697a:	e777      	b.n	801686c <lv_roller_label_event+0x44>
 801697c:	08029a7c 	.word	0x08029a7c

08016980 <lv_roller_event>:
{
 8016980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8016984:	48b9      	ldr	r0, [pc, #740]	; (8016c6c <lv_roller_event+0x2ec>)
{
 8016986:	b09b      	sub	sp, #108	; 0x6c
 8016988:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801698a:	f004 fc50 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801698e:	2801      	cmp	r0, #1
 8016990:	d111      	bne.n	80169b6 <lv_roller_event+0x36>
    lv_event_code_t code = lv_event_get_code(e);
 8016992:	4630      	mov	r0, r6
 8016994:	f004 fc65 	bl	801b262 <lv_event_get_code>
 8016998:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801699a:	4630      	mov	r0, r6
 801699c:	f004 fc5d 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_GET_SELF_SIZE) {
 80169a0:	2d2c      	cmp	r5, #44	; 0x2c
    lv_obj_t * obj = lv_event_get_target(e);
 80169a2:	4604      	mov	r4, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 80169a4:	d10a      	bne.n	80169bc <lv_roller_event+0x3c>
        lv_point_t * p = lv_event_get_param(e);
 80169a6:	4630      	mov	r0, r6
 80169a8:	f004 fc5f 	bl	801b26a <lv_event_get_param>
 80169ac:	4605      	mov	r5, r0
        p->x = get_selected_label_width(obj);
 80169ae:	4620      	mov	r0, r4
 80169b0:	f010 fcff 	bl	80273b2 <get_selected_label_width>
 80169b4:	8028      	strh	r0, [r5, #0]
}
 80169b6:	b01b      	add	sp, #108	; 0x6c
 80169b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_STYLE_CHANGED) {
 80169bc:	2d18      	cmp	r5, #24
 80169be:	d837      	bhi.n	8016a30 <lv_roller_event+0xb0>
 80169c0:	2d00      	cmp	r5, #0
 80169c2:	d0f8      	beq.n	80169b6 <lv_roller_event+0x36>
 80169c4:	3d01      	subs	r5, #1
 80169c6:	2d17      	cmp	r5, #23
 80169c8:	d8f5      	bhi.n	80169b6 <lv_roller_event+0x36>
 80169ca:	a301      	add	r3, pc, #4	; (adr r3, 80169d0 <lv_roller_event+0x50>)
 80169cc:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80169d0:	08016a5f 	.word	0x08016a5f
 80169d4:	08016a7b 	.word	0x08016a7b
 80169d8:	08016ab5 	.word	0x08016ab5
 80169dc:	080169b7 	.word	0x080169b7
 80169e0:	080169b7 	.word	0x080169b7
 80169e4:	080169b7 	.word	0x080169b7
 80169e8:	080169b7 	.word	0x080169b7
 80169ec:	08016ab5 	.word	0x08016ab5
 80169f0:	080169b7 	.word	0x080169b7
 80169f4:	080169b7 	.word	0x080169b7
 80169f8:	080169b7 	.word	0x080169b7
 80169fc:	080169b7 	.word	0x080169b7
 8016a00:	08016c19 	.word	0x08016c19
 8016a04:	08016bdf 	.word	0x08016bdf
 8016a08:	08016c0b 	.word	0x08016c0b
 8016a0c:	080169b7 	.word	0x080169b7
 8016a10:	080169b7 	.word	0x080169b7
 8016a14:	080169b7 	.word	0x080169b7
 8016a18:	08016c5d 	.word	0x08016c5d
 8016a1c:	080169b7 	.word	0x080169b7
 8016a20:	08016c79 	.word	0x08016c79
 8016a24:	080169b7 	.word	0x080169b7
 8016a28:	080169b7 	.word	0x080169b7
 8016a2c:	08016c79 	.word	0x08016c79
 8016a30:	2d29      	cmp	r5, #41	; 0x29
 8016a32:	d00e      	beq.n	8016a52 <lv_roller_event+0xd2>
 8016a34:	2d2a      	cmp	r5, #42	; 0x2a
 8016a36:	d1be      	bne.n	80169b6 <lv_roller_event+0x36>
        lv_obj_t * label = get_label(obj);
 8016a38:	f010 fbd5 	bl	80271e6 <get_label>
        if(label) lv_event_send(label, LV_EVENT_STYLE_CHANGED, NULL);
 8016a3c:	b118      	cbz	r0, 8016a46 <lv_roller_event+0xc6>
 8016a3e:	2200      	movs	r2, #0
 8016a40:	4629      	mov	r1, r5
 8016a42:	f7ed fe7f 	bl	8004744 <lv_event_send>
        lv_obj_refresh_self_size(obj);
 8016a46:	4620      	mov	r0, r4
 8016a48:	f005 ff9d 	bl	801c986 <lv_obj_refresh_self_size>
        refr_position(obj, LV_ANIM_OFF);
 8016a4c:	2100      	movs	r1, #0
                    refr_position(obj, LV_ANIM_ON);
 8016a4e:	4620      	mov	r0, r4
 8016a50:	e000      	b.n	8016a54 <lv_roller_event+0xd4>
        refr_position(obj, LV_ANIM_OFF);
 8016a52:	2100      	movs	r1, #0
}
 8016a54:	b01b      	add	sp, #108	; 0x6c
 8016a56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        refr_position(obj, LV_ANIM_OFF);
 8016a5a:	f7ff be27 	b.w	80166ac <refr_position>
        roller->moved = 0;
 8016a5e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8016a62:	f36f 0341 	bfc	r3, #1, #1
 8016a66:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
        lv_anim_del(get_label(obj), set_y_anim);
 8016a6a:	f010 fbbc 	bl	80271e6 <get_label>
 8016a6e:	4980      	ldr	r1, [pc, #512]	; (8016c70 <lv_roller_event+0x2f0>)
}
 8016a70:	b01b      	add	sp, #108	; 0x6c
 8016a72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_anim_del(get_label(obj), set_y_anim);
 8016a76:	f7fb bc93 	b.w	80123a0 <lv_anim_del>
        lv_indev_t * indev = lv_indev_get_act();
 8016a7a:	f7ed fec9 	bl	8004810 <lv_indev_get_act>
        lv_indev_get_vect(indev, &p);
 8016a7e:	a90c      	add	r1, sp, #48	; 0x30
 8016a80:	f004 fdef 	bl	801b662 <lv_indev_get_vect>
        if(p.y) {
 8016a84:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d094      	beq.n	80169b6 <lv_roller_event+0x36>
            lv_obj_t * label = get_label(obj);
 8016a8c:	4620      	mov	r0, r4
 8016a8e:	f010 fbaa 	bl	80271e6 <get_label>
 8016a92:	4605      	mov	r5, r0
            lv_obj_set_y(label, lv_obj_get_y(label) + p.y);
 8016a94:	f005 fedb 	bl	801c84e <lv_obj_get_y>
 8016a98:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8016a9c:	18c1      	adds	r1, r0, r3
 8016a9e:	4628      	mov	r0, r5
 8016aa0:	b209      	sxth	r1, r1
 8016aa2:	f005 fe1f 	bl	801c6e4 <lv_obj_set_y>
            roller->moved = 1;
 8016aa6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8016aaa:	f043 0302 	orr.w	r3, r3, #2
 8016aae:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 8016ab2:	e780      	b.n	80169b6 <lv_roller_event+0x36>

static lv_res_t release_handler(lv_obj_t * obj)
{
    lv_obj_t * label = get_label(obj);
 8016ab4:	f010 fb97 	bl	80271e6 <get_label>
    if(label == NULL) return LV_RES_OK;
 8016ab8:	4607      	mov	r7, r0
 8016aba:	2800      	cmp	r0, #0
 8016abc:	f43f af7b 	beq.w	80169b6 <lv_roller_event+0x36>

    lv_indev_t * indev = lv_indev_get_act();
 8016ac0:	f7ed fea6 	bl	8004810 <lv_indev_get_act>
 8016ac4:	4680      	mov	r8, r0
    lv_roller_t * roller = (lv_roller_t *)obj;

    /*Leave edit mode once a new option is selected*/
    lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8016ac6:	f004 fd8c 	bl	801b5e2 <lv_indev_get_type>
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 8016aca:	2804      	cmp	r0, #4
 8016acc:	d10d      	bne.n	8016aea <lv_roller_event+0x16a>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8016ace:	8ce3      	ldrh	r3, [r4, #38]	; 0x26

        if(indev_type == LV_INDEV_TYPE_ENCODER) {
            lv_group_t * g      = lv_obj_get_group(obj);
 8016ad0:	4620      	mov	r0, r4
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8016ad2:	8523      	strh	r3, [r4, #40]	; 0x28
            lv_group_t * g      = lv_obj_get_group(obj);
 8016ad4:	f004 ffdc 	bl	801ba90 <lv_obj_get_group>
 8016ad8:	4605      	mov	r5, r0
            if(lv_group_get_editing(g)) {
 8016ada:	f004 fd7d 	bl	801b5d8 <lv_group_get_editing>
 8016ade:	b140      	cbz	r0, 8016af2 <lv_roller_event+0x172>
                lv_group_set_editing(g, false);
 8016ae0:	2100      	movs	r1, #0
 8016ae2:	4628      	mov	r0, r5
 8016ae4:	f004 fd57 	bl	801b596 <lv_group_set_editing>
 8016ae8:	e003      	b.n	8016af2 <lv_roller_event+0x172>
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 8016aea:	2802      	cmp	r0, #2
 8016aec:	d101      	bne.n	8016af2 <lv_roller_event+0x172>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8016aee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8016af0:	8523      	strh	r3, [r4, #40]	; 0x28
            }
        }
    }

    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8016af2:	4640      	mov	r0, r8
 8016af4:	f004 fd75 	bl	801b5e2 <lv_indev_get_type>
 8016af8:	2801      	cmp	r0, #1
 8016afa:	d12c      	bne.n	8016b56 <lv_roller_event+0x1d6>
        /*Search the clicked option (For KEYPAD and ENCODER the new value should be already set)*/
        int16_t new_opt  = -1;
        if(roller->moved == 0) {
 8016afc:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 8016b00:	f016 0602 	ands.w	r6, r6, #2
 8016b04:	d034      	beq.n	8016b70 <lv_roller_event+0x1f0>
                i_prev = i;
            }
        }
        else {
            /*If dragged then align the list to have an element in the middle*/
            const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8016b06:	2100      	movs	r1, #0
 8016b08:	4620      	mov	r0, r4
 8016b0a:	f010 fb67 	bl	80271dc <lv_obj_get_style_text_font>
 8016b0e:	4605      	mov	r5, r0
            lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8016b10:	4620      	mov	r0, r4
 8016b12:	f010 fb6b 	bl	80271ec <lv_obj_get_style_text_line_space.constprop.0>
            lv_coord_t font_h              = lv_font_get_line_height(font);

            lv_coord_t label_unit = font_h + line_space;
 8016b16:	892b      	ldrh	r3, [r5, #8]
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8016b18:	f9b4 5016 	ldrsh.w	r5, [r4, #22]
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8016b1c:	210c      	movs	r1, #12
            lv_coord_t label_unit = font_h + line_space;
 8016b1e:	18c6      	adds	r6, r0, r3
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8016b20:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8016b24:	8aff      	ldrh	r7, [r7, #22]
 8016b26:	4640      	mov	r0, r8
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8016b28:	1b5b      	subs	r3, r3, r5
            lv_coord_t label_unit = font_h + line_space;
 8016b2a:	b236      	sxth	r6, r6
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8016b2c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8016b30:	eb05 0563 	add.w	r5, r5, r3, asr #1
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8016b34:	f004 fdac 	bl	801b690 <lv_indev_scroll_throw_predict>
 8016b38:	4407      	add	r7, r0
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8016b3a:	b22d      	sxth	r5, r5
            int32_t id = (mid - label_y1) / label_unit;

            if(id < 0) id = 0;
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 8016b3c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
            int32_t id = (mid - label_y1) / label_unit;
 8016b3e:	b23f      	sxth	r7, r7
 8016b40:	1bed      	subs	r5, r5, r7
 8016b42:	fb95 f5f6 	sdiv	r5, r5, r6
            if(id < 0) id = 0;
 8016b46:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 8016b4a:	429d      	cmp	r5, r3
 8016b4c:	bfa8      	it	ge
 8016b4e:	f103 35ff 	addge.w	r5, r3, #4294967295

            new_opt = id;
 8016b52:	b22d      	sxth	r5, r5
 8016b54:	e02c      	b.n	8016bb0 <lv_roller_event+0x230>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8016b56:	4640      	mov	r0, r8
 8016b58:	f004 fd43 	bl	801b5e2 <lv_indev_get_type>
 8016b5c:	2803      	cmp	r0, #3
 8016b5e:	d0cd      	beq.n	8016afc <lv_roller_event+0x17c>
        if(new_opt >= 0) {
            lv_roller_set_selected(obj, new_opt, LV_ANIM_ON);
        }
    }

    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 8016b60:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8016b62:	aa0c      	add	r2, sp, #48	; 0x30
 8016b64:	211c      	movs	r1, #28
 8016b66:	4620      	mov	r0, r4
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 8016b68:	930c      	str	r3, [sp, #48]	; 0x30
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8016b6a:	f7ed fdeb 	bl	8004744 <lv_event_send>
    return res;
 8016b6e:	e722      	b.n	80169b6 <lv_roller_event+0x36>
            lv_indev_get_point(indev, &p);
 8016b70:	4640      	mov	r0, r8
 8016b72:	a90a      	add	r1, sp, #40	; 0x28
 8016b74:	f004 fd46 	bl	801b604 <lv_indev_get_point>
            p.y -= label->coords.y1;
 8016b78:	8afa      	ldrh	r2, [r7, #22]
 8016b7a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
            letter_i = lv_label_get_letter_on(label, &p);
 8016b7e:	a90a      	add	r1, sp, #40	; 0x28
 8016b80:	4638      	mov	r0, r7
            uint32_t i_prev   = 0;
 8016b82:	46b1      	mov	r9, r6
            p.y -= label->coords.y1;
 8016b84:	1a9b      	subs	r3, r3, r2
            new_opt = 0;
 8016b86:	4635      	mov	r5, r6
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8016b88:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8016c74 <lv_roller_event+0x2f4>
            p.y -= label->coords.y1;
 8016b8c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            p.x -= label->coords.x1;
 8016b90:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8016b94:	8aba      	ldrh	r2, [r7, #20]
 8016b96:	1a9b      	subs	r3, r3, r2
 8016b98:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            letter_i = lv_label_get_letter_on(label, &p);
 8016b9c:	f010 fa2a 	bl	8026ff4 <lv_label_get_letter_on>
 8016ba0:	4680      	mov	r8, r0
            const char * txt  = lv_label_get_text(label);
 8016ba2:	4638      	mov	r0, r7
 8016ba4:	f010 fa1f 	bl	8026fe6 <lv_label_get_text>
 8016ba8:	4607      	mov	r7, r0
            uint32_t i        = 0;
 8016baa:	960c      	str	r6, [sp, #48]	; 0x30
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8016bac:	45b0      	cmp	r8, r6
 8016bae:	d107      	bne.n	8016bc0 <lv_roller_event+0x240>
        if(new_opt >= 0) {
 8016bb0:	2d00      	cmp	r5, #0
 8016bb2:	dbd5      	blt.n	8016b60 <lv_roller_event+0x1e0>
            lv_roller_set_selected(obj, new_opt, LV_ANIM_ON);
 8016bb4:	2201      	movs	r2, #1
 8016bb6:	b2a9      	uxth	r1, r5
 8016bb8:	4620      	mov	r0, r4
 8016bba:	f010 fc21 	bl	8027400 <lv_roller_set_selected>
 8016bbe:	e7cf      	b.n	8016b60 <lv_roller_event+0x1e0>
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8016bc0:	f8da 3000 	ldr.w	r3, [sl]
 8016bc4:	a90c      	add	r1, sp, #48	; 0x30
 8016bc6:	4638      	mov	r0, r7
 8016bc8:	4798      	blx	r3
                if(letter == '\n' && i_prev != letter_i) new_opt++;
 8016bca:	280a      	cmp	r0, #10
 8016bcc:	d103      	bne.n	8016bd6 <lv_roller_event+0x256>
 8016bce:	45c8      	cmp	r8, r9
 8016bd0:	bf1c      	itt	ne
 8016bd2:	3501      	addne	r5, #1
 8016bd4:	b22d      	sxthne	r5, r5
                i_prev = i;
 8016bd6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8016bda:	3601      	adds	r6, #1
 8016bdc:	e7e6      	b.n	8016bac <lv_roller_event+0x22c>
        lv_group_t * g             = lv_obj_get_group(obj);
 8016bde:	f004 ff57 	bl	801ba90 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8016be2:	f004 fcf9 	bl	801b5d8 <lv_group_get_editing>
 8016be6:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8016be8:	f7ed fe12 	bl	8004810 <lv_indev_get_act>
 8016bec:	f004 fcf9 	bl	801b5e2 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8016bf0:	2804      	cmp	r0, #4
                if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 8016bf2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8016bf4:	d107      	bne.n	8016c06 <lv_roller_event+0x286>
            if(!editing) {
 8016bf6:	b935      	cbnz	r5, 8016c06 <lv_roller_event+0x286>
                if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 8016bf8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8016bfa:	429a      	cmp	r2, r3
 8016bfc:	f43f aedb 	beq.w	80169b6 <lv_roller_event+0x36>
                    roller->sel_opt_id = roller->sel_opt_id_ori;
 8016c00:	84e2      	strh	r2, [r4, #38]	; 0x26
                    refr_position(obj, LV_ANIM_ON);
 8016c02:	2101      	movs	r1, #1
 8016c04:	e723      	b.n	8016a4e <lv_roller_event+0xce>
            roller->sel_opt_id_ori = roller->sel_opt_id; /*Save the current value. Used to revert this state if
 8016c06:	8523      	strh	r3, [r4, #40]	; 0x28
 8016c08:	e6d5      	b.n	80169b6 <lv_roller_event+0x36>
        if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 8016c0a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8016c0c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016c0e:	429a      	cmp	r2, r3
 8016c10:	f43f aed1 	beq.w	80169b6 <lv_roller_event+0x36>
            roller->sel_opt_id = roller->sel_opt_id_ori;
 8016c14:	84c3      	strh	r3, [r0, #38]	; 0x26
            refr_position(obj, LV_ANIM_ON);
 8016c16:	e7f4      	b.n	8016c02 <lv_roller_event+0x282>
        char c = *((char *)lv_event_get_param(e));
 8016c18:	4630      	mov	r0, r6
 8016c1a:	f004 fb26 	bl	801b26a <lv_event_get_param>
 8016c1e:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8016c20:	f1a3 0212 	sub.w	r2, r3, #18
 8016c24:	2a01      	cmp	r2, #1
 8016c26:	d80d      	bhi.n	8016c44 <lv_roller_event+0x2c4>
            if(roller->sel_opt_id + 1 < roller->option_cnt) {
 8016c28:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8016c2a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8016c2c:	3101      	adds	r1, #1
 8016c2e:	4299      	cmp	r1, r3
 8016c30:	f6bf aec1 	bge.w	80169b6 <lv_roller_event+0x36>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 8016c34:	8d25      	ldrh	r5, [r4, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, LV_ANIM_ON);
 8016c36:	2201      	movs	r2, #1
 8016c38:	b289      	uxth	r1, r1
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	f010 fbe0 	bl	8027400 <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 8016c40:	8525      	strh	r5, [r4, #40]	; 0x28
 8016c42:	e6b8      	b.n	80169b6 <lv_roller_event+0x36>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8016c44:	2b14      	cmp	r3, #20
 8016c46:	d002      	beq.n	8016c4e <lv_roller_event+0x2ce>
 8016c48:	2b11      	cmp	r3, #17
 8016c4a:	f47f aeb4 	bne.w	80169b6 <lv_roller_event+0x36>
            if(roller->sel_opt_id > 0) {
 8016c4e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8016c50:	2900      	cmp	r1, #0
 8016c52:	f43f aeb0 	beq.w	80169b6 <lv_roller_event+0x36>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 8016c56:	8d25      	ldrh	r5, [r4, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, LV_ANIM_ON);
 8016c58:	3901      	subs	r1, #1
 8016c5a:	e7ec      	b.n	8016c36 <lv_roller_event+0x2b6>
        lv_obj_t * label = get_label(obj);
 8016c5c:	f010 fac3 	bl	80271e6 <get_label>
}
 8016c60:	b01b      	add	sp, #108	; 0x6c
 8016c62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_ext_draw_size(label);
 8016c66:	f005 bc4b 	b.w	801c500 <lv_obj_refresh_ext_draw_size>
 8016c6a:	bf00      	nop
 8016c6c:	08029a98 	.word	0x08029a98
 8016c70:	080271d7 	.word	0x080271d7
 8016c74:	24000100 	.word	0x24000100
    lv_event_code_t code = lv_event_get_code(e);
 8016c78:	4630      	mov	r0, r6
 8016c7a:	f004 faf2 	bl	801b262 <lv_event_get_code>
 8016c7e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8016c80:	4630      	mov	r0, r6
 8016c82:	f004 faea 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 8016c86:	2d15      	cmp	r5, #21
    lv_obj_t * obj = lv_event_get_target(e);
 8016c88:	4604      	mov	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8016c8a:	d116      	bne.n	8016cba <lv_roller_event+0x33a>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016c8c:	4630      	mov	r0, r6
 8016c8e:	f004 fb3d 	bl	801b30c <lv_event_get_draw_ctx>
        get_sel_area(obj, &sel_area);
 8016c92:	a90a      	add	r1, sp, #40	; 0x28
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016c94:	4605      	mov	r5, r0
        get_sel_area(obj, &sel_area);
 8016c96:	4620      	mov	r0, r4
 8016c98:	f010 faaf 	bl	80271fa <get_sel_area>
        lv_draw_rect_dsc_init(&sel_dsc);
 8016c9c:	a80c      	add	r0, sp, #48	; 0x30
 8016c9e:	f7f1 fe81 	bl	80089a4 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_SELECTED, &sel_dsc);
 8016ca2:	aa0c      	add	r2, sp, #48	; 0x30
 8016ca4:	4620      	mov	r0, r4
 8016ca6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8016caa:	f005 f925 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(draw_ctx, &sel_dsc, &sel_area);
 8016cae:	aa0a      	add	r2, sp, #40	; 0x28
 8016cb0:	a90c      	add	r1, sp, #48	; 0x30
 8016cb2:	4628      	mov	r0, r5
 8016cb4:	f008 fbab 	bl	801f40e <lv_draw_rect>
 8016cb8:	e67d      	b.n	80169b6 <lv_roller_event+0x36>
    else if(code == LV_EVENT_DRAW_POST) {
 8016cba:	2d18      	cmp	r5, #24
 8016cbc:	f47f ae7b 	bne.w	80169b6 <lv_roller_event+0x36>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016cc0:	4630      	mov	r0, r6
        area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &sel_area);
 8016cc2:	af08      	add	r7, sp, #32
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016cc4:	f004 fb22 	bl	801b30c <lv_event_get_draw_ctx>
 8016cc8:	4605      	mov	r5, r0
        lv_draw_label_dsc_init(&label_dsc);
 8016cca:	a80c      	add	r0, sp, #48	; 0x30
 8016ccc:	f7f1 f820 	bl	8007d10 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_SELECTED, &label_dsc);
 8016cd0:	aa0c      	add	r2, sp, #48	; 0x30
 8016cd2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8016cd6:	4620      	mov	r0, r4
 8016cd8:	f005 fa5d 	bl	801c196 <lv_obj_init_draw_label_dsc>
        get_sel_area(obj, &sel_area);
 8016cdc:	a906      	add	r1, sp, #24
 8016cde:	4620      	mov	r0, r4
 8016ce0:	f010 fa8b 	bl	80271fa <get_sel_area>
        area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &sel_area);
 8016ce4:	aa06      	add	r2, sp, #24
 8016ce6:	68a9      	ldr	r1, [r5, #8]
 8016ce8:	4638      	mov	r0, r7
 8016cea:	f00d faf6 	bl	80242da <_lv_area_intersect>
        if(area_ok) {
 8016cee:	2800      	cmp	r0, #0
 8016cf0:	f43f ae61 	beq.w	80169b6 <lv_roller_event+0x36>
            lv_obj_t * label = get_label(obj);
 8016cf4:	4620      	mov	r0, r4
 8016cf6:	f010 fa76 	bl	80271e6 <get_label>
 8016cfa:	4606      	mov	r6, r0
            if(lv_label_get_recolor(label)) label_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 8016cfc:	f010 f975 	bl	8026fea <lv_label_get_recolor>
 8016d00:	b128      	cbz	r0, 8016d0e <lv_roller_event+0x38e>
 8016d02:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 8016d06:	f043 0301 	orr.w	r3, r3, #1
 8016d0a:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 8016d0e:	4630      	mov	r0, r6
 8016d10:	f010 f969 	bl	8026fe6 <lv_label_get_text>
 8016d14:	4680      	mov	r8, r0
 8016d16:	4620      	mov	r0, r4
 8016d18:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8016d1c:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8016d20:	f9bd b042 	ldrsh.w	fp, [sp, #66]	; 0x42
 8016d24:	f005 fdba 	bl	801c89c <lv_obj_get_width>
 8016d28:	2302      	movs	r3, #2
 8016d2a:	464a      	mov	r2, r9
 8016d2c:	4641      	mov	r1, r8
 8016d2e:	f8cd b000 	str.w	fp, [sp]
 8016d32:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8016d36:	4653      	mov	r3, sl
 8016d38:	a805      	add	r0, sp, #20
 8016d3a:	f00e fdb1 	bl	80258a0 <lv_txt_get_size>
            lv_coord_t roller_h = lv_obj_get_height(obj);
 8016d3e:	4620      	mov	r0, r4
 8016d40:	f005 fdb2 	bl	801c8a8 <lv_obj_get_height>
                                                       obj->coords.y1); /*label offset from the middle line of the roller*/
 8016d44:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8016d48:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8016d4c:	f9b6 9016 	ldrsh.w	r9, [r6, #22]
 8016d50:	f340 0a4f 	sbfx	sl, r0, #1, #16
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 8016d54:	4630      	mov	r0, r6
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8016d56:	4453      	add	r3, sl
 8016d58:	eba9 0903 	sub.w	r9, r9, r3
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 8016d5c:	f005 fda4 	bl	801c8a8 <lv_obj_get_height>
            const lv_font_t * normal_label_font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8016d60:	2100      	movs	r1, #0
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 8016d62:	ea4f 3989 	mov.w	r9, r9, lsl #14
 8016d66:	fb99 f9f0 	sdiv	r9, r9, r0
            const lv_font_t * normal_label_font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8016d6a:	4620      	mov	r0, r4
 8016d6c:	f010 fa36 	bl	80271dc <lv_obj_get_style_text_font>
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 8016d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 8016d72:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8016d76:	2100      	movs	r1, #0
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 8016d78:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8016d7c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 8016d80:	44d0      	add	r8, sl
 8016d82:	4620      	mov	r0, r4
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 8016d84:	1ad2      	subs	r2, r2, r3
            res_p.y -= corr;
 8016d86:	f8bd 3016 	ldrh.w	r3, [sp, #22]
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 8016d8a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
            res_p.y -= corr;
 8016d8e:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8016d92:	b21b      	sxth	r3, r3
 8016d94:	f8ad 3016 	strh.w	r3, [sp, #22]
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 8016d98:	fb09 f303 	mul.w	r3, r9, r3
 8016d9c:	eb08 38a3 	add.w	r8, r8, r3, asr #14
            label_sel_y -= corr;
 8016da0:	eba8 0862 	sub.w	r8, r8, r2, asr #1
 8016da4:	2232      	movs	r2, #50	; 0x32
 8016da6:	f006 fe9f 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016daa:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8016dac:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016dae:	2100      	movs	r1, #0
 8016db0:	4620      	mov	r0, r4
 8016db2:	f006 fe99 	bl	801dae8 <lv_obj_get_style_prop>
 8016db6:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016db8:	2213      	movs	r2, #19
 8016dba:	2100      	movs	r1, #0
 8016dbc:	4620      	mov	r0, r4
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 8016dbe:	fa19 f98a 	uxtah	r9, r9, sl
 8016dc2:	f006 fe91 	bl	801dae8 <lv_obj_get_style_prop>
 8016dc6:	8aa3      	ldrh	r3, [r4, #20]
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 8016dc8:	fa10 fa8a 	uxtah	sl, r0, sl
            label_sel_area.y1 = label_sel_y;
 8016dcc:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 8016dd0:	4499      	add	r9, r3
            lv_draw_label(draw_ctx, &label_dsc, &label_sel_area, lv_label_get_text(label), NULL);
 8016dd2:	4630      	mov	r0, r6
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 8016dd4:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 8016dd8:	8b23      	ldrh	r3, [r4, #24]
 8016dda:	eba3 030a 	sub.w	r3, r3, sl
 8016dde:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 8016de2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016de6:	4498      	add	r8, r3
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 8016de8:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 8016dec:	f043 0302 	orr.w	r3, r3, #2
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 8016df0:	f8ad 802e 	strh.w	r8, [sp, #46]	; 0x2e
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 8016df4:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
            const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8016df8:	68ac      	ldr	r4, [r5, #8]
            draw_ctx->clip_area = &mask_sel;
 8016dfa:	60af      	str	r7, [r5, #8]
            lv_draw_label(draw_ctx, &label_dsc, &label_sel_area, lv_label_get_text(label), NULL);
 8016dfc:	f010 f8f3 	bl	8026fe6 <lv_label_get_text>
 8016e00:	2200      	movs	r2, #0
 8016e02:	4603      	mov	r3, r0
 8016e04:	a90c      	add	r1, sp, #48	; 0x30
 8016e06:	9200      	str	r2, [sp, #0]
 8016e08:	4628      	mov	r0, r5
 8016e0a:	aa0a      	add	r2, sp, #40	; 0x28
 8016e0c:	f7f0 ff98 	bl	8007d40 <lv_draw_label>
            draw_ctx->clip_area = clip_area_ori;
 8016e10:	60ac      	str	r4, [r5, #8]
 8016e12:	e5d0      	b.n	80169b6 <lv_roller_event+0x36>

08016e14 <lv_slider_event>:
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
}

static void lv_slider_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8016e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 8016e18:	48c0      	ldr	r0, [pc, #768]	; (801711c <lv_slider_event+0x308>)
{
 8016e1a:	b0b3      	sub	sp, #204	; 0xcc
 8016e1c:	460f      	mov	r7, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8016e1e:	f004 fa06 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8016e22:	2801      	cmp	r0, #1
 8016e24:	d152      	bne.n	8016ecc <lv_slider_event+0xb8>

    lv_event_code_t code = lv_event_get_code(e);
 8016e26:	4638      	mov	r0, r7
 8016e28:	f004 fa1b 	bl	801b262 <lv_event_get_code>
 8016e2c:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8016e2e:	4638      	mov	r0, r7
 8016e30:	f004 fa13 	bl	801b25a <lv_event_get_target>
 8016e34:	4604      	mov	r4, r0
    lv_slider_t * slider = (lv_slider_t *)obj;
    lv_slider_mode_t type = lv_slider_get_mode(obj);
 8016e36:	f010 fb10 	bl	802745a <lv_slider_get_mode>

    /*Advanced hit testing: react only on dragging the knob(s)*/
    if(code == LV_EVENT_HIT_TEST) {
 8016e3a:	2d11      	cmp	r5, #17
    lv_slider_mode_t type = lv_slider_get_mode(obj);
 8016e3c:	4606      	mov	r6, r0
    if(code == LV_EVENT_HIT_TEST) {
 8016e3e:	d148      	bne.n	8016ed2 <lv_slider_event+0xbe>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 8016e40:	4638      	mov	r0, r7
 8016e42:	f004 fa12 	bl	801b26a <lv_event_get_param>
        lv_coord_t ext_click_area = obj->spec_attr ? obj->spec_attr->ext_click_pad : 0;
 8016e46:	68a5      	ldr	r5, [r4, #8]
        lv_hit_test_info_t * info = lv_event_get_param(e);
 8016e48:	4680      	mov	r8, r0
        lv_coord_t ext_click_area = obj->spec_attr ? obj->spec_attr->ext_click_pad : 0;
 8016e4a:	b10d      	cbz	r5, 8016e50 <lv_slider_event+0x3c>
 8016e4c:	f9b5 5014 	ldrsh.w	r5, [r5, #20]
    dest->x1 = src->x1;
 8016e50:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68

        /*Ordinary slider: was the knob area hit?*/
        lv_area_t a;
        lv_area_copy(&a, &slider->right_knob_area);
        lv_area_increase(&a, ext_click_area, ext_click_area);
 8016e54:	462a      	mov	r2, r5
 8016e56:	4629      	mov	r1, r5
 8016e58:	a820      	add	r0, sp, #128	; 0x80
 8016e5a:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    dest->y1 = src->y1;
 8016e5e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8016e62:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    dest->x2 = src->x2;
 8016e66:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
 8016e6a:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    dest->y2 = src->y2;
 8016e6e:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
 8016e72:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
 8016e76:	f00d fa10 	bl	802429a <lv_area_increase>
        info->res = _lv_area_is_point_on(&a, info->point, 0);
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	f8d8 1000 	ldr.w	r1, [r8]
 8016e80:	a820      	add	r0, sp, #128	; 0x80
 8016e82:	f00d fa77 	bl	8024374 <_lv_area_is_point_on>
 8016e86:	4607      	mov	r7, r0
 8016e88:	f888 0004 	strb.w	r0, [r8, #4]

        /*There's still a chance that there is a hit if there is another knob*/
        if((info->res == false) && (type == LV_SLIDER_MODE_RANGE)) {
 8016e8c:	b9f0      	cbnz	r0, 8016ecc <lv_slider_event+0xb8>
 8016e8e:	2e02      	cmp	r6, #2
 8016e90:	d11c      	bne.n	8016ecc <lv_slider_event+0xb8>
    dest->x1 = src->x1;
 8016e92:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            lv_area_copy(&a, &slider->left_knob_area);
            lv_area_increase(&a, ext_click_area, ext_click_area);
 8016e96:	462a      	mov	r2, r5
 8016e98:	4629      	mov	r1, r5
 8016e9a:	a820      	add	r0, sp, #128	; 0x80
 8016e9c:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    dest->y1 = src->y1;
 8016ea0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8016ea4:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    dest->x2 = src->x2;
 8016ea8:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8016eac:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    dest->y2 = src->y2;
 8016eb0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8016eb4:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
 8016eb8:	f00d f9ef 	bl	802429a <lv_area_increase>
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 8016ebc:	463a      	mov	r2, r7
 8016ebe:	f8d8 1000 	ldr.w	r1, [r8]
 8016ec2:	a820      	add	r0, sp, #128	; 0x80
 8016ec4:	f00d fa56 	bl	8024374 <_lv_area_is_point_on>
 8016ec8:	f888 0004 	strb.w	r0, [r8, #4]
        if(res != LV_RES_OK) return;
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        draw_knob(e);
    }
}
 8016ecc:	b033      	add	sp, #204	; 0xcc
 8016ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_PRESSED) {
 8016ed2:	2d01      	cmp	r5, #1
 8016ed4:	f040 8089 	bne.w	8016fea <lv_slider_event+0x1d6>
        lv_obj_invalidate(obj);
 8016ed8:	4620      	mov	r0, r4
 8016eda:	f005 fedf 	bl	801cc9c <lv_obj_invalidate>
        slider->dragging = true;
 8016ede:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 8016ee2:	2e01      	cmp	r6, #1
        slider->dragging = true;
 8016ee4:	f043 0301 	orr.w	r3, r3, #1
 8016ee8:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 8016eec:	d802      	bhi.n	8016ef4 <lv_slider_event+0xe0>
                    slider->value_to_set = &slider->bar.cur_value;
 8016eee:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8016ef2:	e052      	b.n	8016f9a <lv_slider_event+0x186>
        else if(type == LV_SLIDER_MODE_RANGE) {
 8016ef4:	2e02      	cmp	r6, #2
 8016ef6:	d1e9      	bne.n	8016ecc <lv_slider_event+0xb8>
            lv_indev_get_point(lv_indev_get_act(), &p);
 8016ef8:	f7ed fc8a 	bl	8004810 <lv_indev_get_act>
 8016efc:	a920      	add	r1, sp, #128	; 0x80
 8016efe:	f004 fb81 	bl	801b604 <lv_indev_get_point>
            bool hor = lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 8016f02:	4620      	mov	r0, r4
 8016f04:	f005 fcca 	bl	801c89c <lv_obj_get_width>
 8016f08:	4606      	mov	r6, r0
 8016f0a:	4620      	mov	r0, r4
 8016f0c:	f005 fccc 	bl	801c8a8 <lv_obj_get_height>
 8016f10:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8016f12:	2216      	movs	r2, #22
 8016f14:	2100      	movs	r1, #0
 8016f16:	4620      	mov	r0, r4
 8016f18:	f006 fde6 	bl	801dae8 <lv_obj_get_style_prop>
            if(hor) {
 8016f1c:	42ae      	cmp	r6, r5
 8016f1e:	db3e      	blt.n	8016f9e <lv_slider_event+0x18a>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 8016f20:	b2c0      	uxtb	r0, r0
 8016f22:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
 8016f26:	2801      	cmp	r0, #1
 8016f28:	d02d      	beq.n	8016f86 <lv_slider_event+0x172>
 8016f2a:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 8016f2e:	428b      	cmp	r3, r1
 8016f30:	dbdd      	blt.n	8016eee <lv_slider_event+0xda>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 8016f32:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016f36:	428b      	cmp	r3, r1
 8016f38:	dc2d      	bgt.n	8016f96 <lv_slider_event+0x182>
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 8016f3a:	f9b4 2060 	ldrsh.w	r2, [r4, #96]	; 0x60
 8016f3e:	f9b4 0064 	ldrsh.w	r0, [r4, #100]	; 0x64
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 8016f42:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 8016f46:	1a80      	subs	r0, r0, r2
 8016f48:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8016f4c:	eb02 0260 	add.w	r2, r2, r0, asr #1
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 8016f50:	f9b4 006c 	ldrsh.w	r0, [r4, #108]	; 0x6c
 8016f54:	1ac0      	subs	r0, r0, r3
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 8016f56:	1a52      	subs	r2, r2, r1
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 8016f58:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 8016f5c:	2a00      	cmp	r2, #0
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 8016f5e:	eb03 0360 	add.w	r3, r3, r0, asr #1
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 8016f62:	bfb8      	it	lt
 8016f64:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 8016f66:	1a5b      	subs	r3, r3, r1
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 8016f68:	2b00      	cmp	r3, #0
                    if(dist_right < dist_left) {
 8016f6a:	b212      	sxth	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 8016f6c:	bfb8      	it	lt
 8016f6e:	425b      	neglt	r3, r3
                    if(dist_right < dist_left) {
 8016f70:	b21b      	sxth	r3, r3
 8016f72:	429a      	cmp	r2, r3
 8016f74:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8016f78:	dd2f      	ble.n	8016fda <lv_slider_event+0x1c6>
                        slider->value_to_set = &slider->bar.cur_value;
 8016f7a:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8016f7e:	6722      	str	r2, [r4, #112]	; 0x70
            slider->left_knob_focus = 0;
 8016f80:	f36f 0341 	bfc	r3, #1, #1
 8016f84:	e02e      	b.n	8016fe4 <lv_slider_event+0x1d0>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 8016f86:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8016f8a:	428b      	cmp	r3, r1
 8016f8c:	dcaf      	bgt.n	8016eee <lv_slider_event+0xda>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 8016f8e:	f9b4 3064 	ldrsh.w	r3, [r4, #100]	; 0x64
 8016f92:	428b      	cmp	r3, r1
 8016f94:	dad1      	bge.n	8016f3a <lv_slider_event+0x126>
                    slider->value_to_set = &slider->bar.start_value;
 8016f96:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8016f9a:	6723      	str	r3, [r4, #112]	; 0x70
 8016f9c:	e796      	b.n	8016ecc <lv_slider_event+0xb8>
                if(p.y < slider->right_knob_area.y1) {
 8016f9e:	f9bd 0082 	ldrsh.w	r0, [sp, #130]	; 0x82
 8016fa2:	f9b4 306a 	ldrsh.w	r3, [r4, #106]	; 0x6a
 8016fa6:	4298      	cmp	r0, r3
 8016fa8:	dba1      	blt.n	8016eee <lv_slider_event+0xda>
                else if(p.y > slider->left_knob_area.y2) {
 8016faa:	f9b4 1066 	ldrsh.w	r1, [r4, #102]	; 0x66
 8016fae:	4288      	cmp	r0, r1
 8016fb0:	dcf1      	bgt.n	8016f96 <lv_slider_event+0x182>
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 8016fb2:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8016fb6:	1a89      	subs	r1, r1, r2
 8016fb8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8016fbc:	eb02 0261 	add.w	r2, r2, r1, asr #1
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 8016fc0:	f9b4 106e 	ldrsh.w	r1, [r4, #110]	; 0x6e
 8016fc4:	1ac9      	subs	r1, r1, r3
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 8016fc6:	1a12      	subs	r2, r2, r0
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 8016fc8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 8016fcc:	2a00      	cmp	r2, #0
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 8016fce:	eb03 0361 	add.w	r3, r3, r1, asr #1
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 8016fd2:	bfb8      	it	lt
 8016fd4:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 8016fd6:	1a1b      	subs	r3, r3, r0
 8016fd8:	e7c6      	b.n	8016f68 <lv_slider_event+0x154>
                        slider->value_to_set = &slider->bar.start_value;
 8016fda:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8016fde:	6722      	str	r2, [r4, #112]	; 0x70
                    if(slider->left_knob_focus == 0) slider->left_knob_focus = 1;
 8016fe0:	f043 0302 	orr.w	r3, r3, #2
            slider->left_knob_focus = 0;
 8016fe4:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 8016fe8:	e770      	b.n	8016ecc <lv_slider_event+0xb8>
    else if(code == LV_EVENT_PRESSING && slider->value_to_set != NULL) {
 8016fea:	2d02      	cmp	r5, #2
 8016fec:	f040 8098 	bne.w	8017120 <lv_slider_event+0x30c>
 8016ff0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	f43f af6a 	beq.w	8016ecc <lv_slider_event+0xb8>
        lv_indev_t * indev = lv_indev_get_act();
 8016ff8:	f7ed fc0a 	bl	8004810 <lv_indev_get_act>
 8016ffc:	4605      	mov	r5, r0
        if(lv_indev_get_type(indev) != LV_INDEV_TYPE_POINTER) return;
 8016ffe:	f004 faf0 	bl	801b5e2 <lv_indev_get_type>
 8017002:	2801      	cmp	r0, #1
 8017004:	f47f af62 	bne.w	8016ecc <lv_slider_event+0xb8>
        lv_indev_get_point(indev, &p);
 8017008:	a920      	add	r1, sp, #128	; 0x80
 801700a:	4628      	mov	r0, r5
 801700c:	f004 fafa 	bl	801b604 <lv_indev_get_point>
    knob_area->y2 += knob_bottom + transf_h;
}

static bool is_slider_horizontal(lv_obj_t * obj)
{
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 8017010:	4620      	mov	r0, r4
        const int32_t range = slider->bar.max_value - slider->bar.min_value;
 8017012:	e9d4 350a 	ldrd	r3, r5, [r4, #40]	; 0x28
 8017016:	1aed      	subs	r5, r5, r3
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 8017018:	f005 fc40 	bl	801c89c <lv_obj_get_width>
 801701c:	4606      	mov	r6, r0
 801701e:	4620      	mov	r0, r4
 8017020:	f005 fc42 	bl	801c8a8 <lv_obj_get_height>
        if(is_slider_horizontal(obj)) {
 8017024:	4286      	cmp	r6, r0
 8017026:	db52      	blt.n	80170ce <lv_slider_event+0x2ba>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8017028:	2212      	movs	r2, #18
 801702a:	2100      	movs	r1, #0
 801702c:	4620      	mov	r0, r4
 801702e:	f006 fd5b 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017032:	2213      	movs	r2, #19
 8017034:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8017036:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017038:	4620      	mov	r0, r4
 801703a:	f006 fd55 	bl	801dae8 <lv_obj_get_style_prop>
 801703e:	4680      	mov	r8, r0
            const lv_coord_t w = lv_obj_get_width(obj);
 8017040:	4620      	mov	r0, r4
 8017042:	f005 fc2b 	bl	801c89c <lv_obj_get_width>
            const lv_coord_t indic_w = w - bg_left - bg_right;
 8017046:	eb07 0308 	add.w	r3, r7, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801704a:	2216      	movs	r2, #22
 801704c:	2100      	movs	r1, #0
 801704e:	1ac6      	subs	r6, r0, r3
 8017050:	4620      	mov	r0, r4
 8017052:	f006 fd49 	bl	801dae8 <lv_obj_get_style_prop>
 8017056:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
    return (lv_base_dir_t)v.num;
 801705a:	b2c0      	uxtb	r0, r0
 801705c:	b236      	sxth	r6, r6
            if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 801705e:	2801      	cmp	r0, #1
 8017060:	d12f      	bne.n	80170c2 <lv_slider_event+0x2ae>
                new_value = (obj->coords.x2 - bg_right) - p.x;
 8017062:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8017066:	fa0f f888 	sxth.w	r8, r8
 801706a:	eba2 0208 	sub.w	r2, r2, r8
 801706e:	1ad0      	subs	r0, r2, r3
            new_value = (new_value * range + indic_w / 2) / indic_w;
 8017070:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
 8017074:	1049      	asrs	r1, r1, #1
 8017076:	fb00 1105 	mla	r1, r0, r5, r1
 801707a:	fb91 f1f6 	sdiv	r1, r1, r6
            new_value += slider->bar.min_value;
 801707e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        if(slider->value_to_set == &slider->bar.start_value) {
 8017080:	f104 0230 	add.w	r2, r4, #48	; 0x30
            new_value += slider->bar.min_value;
 8017084:	4419      	add	r1, r3
        if(slider->value_to_set == &slider->bar.start_value) {
 8017086:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017088:	4293      	cmp	r3, r2
        int32_t real_min_value = slider->bar.min_value;
 801708a:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
            real_max_value = slider->bar.cur_value;
 801708e:	bf0c      	ite	eq
 8017090:	6a65      	ldreq	r5, [r4, #36]	; 0x24
            real_min_value = slider->bar.start_value;
 8017092:	6b20      	ldrne	r0, [r4, #48]	; 0x30
        new_value = LV_CLAMP(real_min_value, new_value, real_max_value);
 8017094:	42a9      	cmp	r1, r5
 8017096:	bfa8      	it	ge
 8017098:	4629      	movge	r1, r5
 801709a:	4281      	cmp	r1, r0
 801709c:	bfb8      	it	lt
 801709e:	4601      	movlt	r1, r0
        if(*slider->value_to_set != new_value) {
 80170a0:	6818      	ldr	r0, [r3, #0]
 80170a2:	4281      	cmp	r1, r0
 80170a4:	f43f af12 	beq.w	8016ecc <lv_slider_event+0xb8>
            if(slider->value_to_set == &slider->bar.start_value) {
 80170a8:	4293      	cmp	r3, r2
                lv_bar_set_start_value(obj, new_value, LV_ANIM_ON);
 80170aa:	4620      	mov	r0, r4
 80170ac:	f04f 0201 	mov.w	r2, #1
            if(slider->value_to_set == &slider->bar.start_value) {
 80170b0:	d130      	bne.n	8017114 <lv_slider_event+0x300>
                lv_bar_set_start_value(obj, new_value, LV_ANIM_ON);
 80170b2:	f00f f827 	bl	8026104 <lv_bar_set_start_value>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80170b6:	2200      	movs	r2, #0
 80170b8:	211c      	movs	r1, #28
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80170ba:	4620      	mov	r0, r4
 80170bc:	f7ed fb42 	bl	8004744 <lv_event_send>
}
 80170c0:	e704      	b.n	8016ecc <lv_slider_event+0xb8>
                new_value = p.x - (obj->coords.x1 + bg_left);
 80170c2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80170c6:	fa02 f787 	sxtah	r7, r2, r7
 80170ca:	1bd8      	subs	r0, r3, r7
 80170cc:	e7d0      	b.n	8017070 <lv_slider_event+0x25c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80170ce:	2210      	movs	r2, #16
 80170d0:	2100      	movs	r1, #0
 80170d2:	4620      	mov	r0, r4
 80170d4:	f006 fd08 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80170d8:	2211      	movs	r2, #17
 80170da:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80170dc:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80170de:	4620      	mov	r0, r4
 80170e0:	f006 fd02 	bl	801dae8 <lv_obj_get_style_prop>
 80170e4:	4606      	mov	r6, r0
            const lv_coord_t h = lv_obj_get_height(obj);
 80170e6:	4620      	mov	r0, r4
 80170e8:	f005 fbde 	bl	801c8a8 <lv_obj_get_height>
            const lv_coord_t indic_h = h - bg_bottom - bg_top;
 80170ec:	4437      	add	r7, r6
            new_value = p.y - (obj->coords.y2 + bg_bottom);
 80170ee:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
            const lv_coord_t indic_h = h - bg_bottom - bg_top;
 80170f2:	1bc3      	subs	r3, r0, r7
            new_value = p.y - (obj->coords.y2 + bg_bottom);
 80170f4:	fa01 f686 	sxtah	r6, r1, r6
 80170f8:	f9bd 1082 	ldrsh.w	r1, [sp, #130]	; 0x82
            const lv_coord_t indic_h = h - bg_bottom - bg_top;
 80170fc:	b21a      	sxth	r2, r3
            new_value = (-new_value * range + indic_h / 2) / indic_h;
 80170fe:	1a76      	subs	r6, r6, r1
 8017100:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8017104:	fa01 f183 	sxtah	r1, r1, r3
 8017108:	1049      	asrs	r1, r1, #1
 801710a:	fb05 1106 	mla	r1, r5, r6, r1
 801710e:	fb91 f1f2 	sdiv	r1, r1, r2
 8017112:	e7b4      	b.n	801707e <lv_slider_event+0x26a>
                lv_bar_set_value(obj, new_value, LV_ANIM_ON);
 8017114:	f00e ffb1 	bl	802607a <lv_bar_set_value>
 8017118:	e7cd      	b.n	80170b6 <lv_slider_event+0x2a2>
 801711a:	bf00      	nop
 801711c:	08029ab4 	.word	0x08029ab4
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 8017120:	2d15      	cmp	r5, #21
 8017122:	d859      	bhi.n	80171d8 <lv_slider_event+0x3c4>
 8017124:	2d07      	cmp	r5, #7
 8017126:	d833      	bhi.n	8017190 <lv_slider_event+0x37c>
 8017128:	2d03      	cmp	r5, #3
 801712a:	f47f aecf 	bne.w	8016ecc <lv_slider_event+0xb8>
        slider->dragging = false;
 801712e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
        slider->value_to_set = NULL;
 8017132:	2500      	movs	r5, #0
        lv_obj_invalidate(obj);
 8017134:	4620      	mov	r0, r4
        slider->dragging = false;
 8017136:	f36f 0300 	bfc	r3, #0, #1
        slider->value_to_set = NULL;
 801713a:	6725      	str	r5, [r4, #112]	; 0x70
        slider->dragging = false;
 801713c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        lv_obj_invalidate(obj);
 8017140:	f005 fdac 	bl	801cc9c <lv_obj_invalidate>
        lv_group_t * g   = lv_obj_get_group(obj);
 8017144:	4620      	mov	r0, r4
 8017146:	f004 fca3 	bl	801ba90 <lv_obj_get_group>
 801714a:	4607      	mov	r7, r0
        bool editing     = lv_group_get_editing(g);
 801714c:	f004 fa44 	bl	801b5d8 <lv_group_get_editing>
 8017150:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8017152:	f7ed fb5d 	bl	8004810 <lv_indev_get_act>
 8017156:	f004 fa44 	bl	801b5e2 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801715a:	2804      	cmp	r0, #4
 801715c:	f47f aeb6 	bne.w	8016ecc <lv_slider_event+0xb8>
            if(editing) {
 8017160:	2e00      	cmp	r6, #0
 8017162:	f43f aeb3 	beq.w	8016ecc <lv_slider_event+0xb8>
                if(lv_slider_get_mode(obj) == LV_SLIDER_MODE_RANGE) {
 8017166:	4620      	mov	r0, r4
 8017168:	f010 f977 	bl	802745a <lv_slider_get_mode>
 801716c:	2802      	cmp	r0, #2
 801716e:	d108      	bne.n	8017182 <lv_slider_event+0x36e>
                    if(slider->left_knob_focus == 0) slider->left_knob_focus = 1;
 8017170:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8017174:	0799      	lsls	r1, r3, #30
 8017176:	f57f af33 	bpl.w	8016fe0 <lv_slider_event+0x1cc>
                        slider->left_knob_focus = 0;
 801717a:	f365 0341 	bfi	r3, r5, #1, #1
 801717e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
                    lv_group_set_editing(g, false);
 8017182:	4629      	mov	r1, r5
 8017184:	4638      	mov	r0, r7
}
 8017186:	b033      	add	sp, #204	; 0xcc
 8017188:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    lv_group_set_editing(g, false);
 801718c:	f004 ba03 	b.w	801b596 <lv_group_set_editing>
 8017190:	3d08      	subs	r5, #8
 8017192:	2d0d      	cmp	r5, #13
 8017194:	f63f ae9a 	bhi.w	8016ecc <lv_slider_event+0xb8>
 8017198:	a301      	add	r3, pc, #4	; (adr r3, 80171a0 <lv_slider_event+0x38c>)
 801719a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 801719e:	bf00      	nop
 80171a0:	0801712f 	.word	0x0801712f
 80171a4:	08016ecd 	.word	0x08016ecd
 80171a8:	08016ecd 	.word	0x08016ecd
 80171ac:	08016ecd 	.word	0x08016ecd
 80171b0:	08016ecd 	.word	0x08016ecd
 80171b4:	080172f1 	.word	0x080172f1
 80171b8:	080171eb 	.word	0x080171eb
 80171bc:	08016ecd 	.word	0x08016ecd
 80171c0:	08016ecd 	.word	0x08016ecd
 80171c4:	08016ecd 	.word	0x08016ecd
 80171c8:	08016ecd 	.word	0x08016ecd
 80171cc:	08017203 	.word	0x08017203
 80171d0:	08016ecd 	.word	0x08016ecd
 80171d4:	08017361 	.word	0x08017361
 80171d8:	2d29      	cmp	r5, #41	; 0x29
 80171da:	f47f ae77 	bne.w	8016ecc <lv_slider_event+0xb8>
        lv_obj_refresh_ext_draw_size(obj);
 80171de:	4620      	mov	r0, r4
}
 80171e0:	b033      	add	sp, #204	; 0xcc
 80171e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_ext_draw_size(obj);
 80171e6:	f005 b98b 	b.w	801c500 <lv_obj_refresh_ext_draw_size>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80171ea:	f7ed fb11 	bl	8004810 <lv_indev_get_act>
 80171ee:	f004 f9f8 	bl	801b5e2 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 80171f2:	2804      	cmp	r0, #4
 80171f4:	d002      	beq.n	80171fc <lv_slider_event+0x3e8>
 80171f6:	2802      	cmp	r0, #2
 80171f8:	f47f ae68 	bne.w	8016ecc <lv_slider_event+0xb8>
            slider->left_knob_focus = 0;
 80171fc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8017200:	e6be      	b.n	8016f80 <lv_slider_event+0x16c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8017202:	2212      	movs	r2, #18
 8017204:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8017208:	4620      	mov	r0, r4
 801720a:	f006 fc6d 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801720e:	2213      	movs	r2, #19
 8017210:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 8017214:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017218:	4620      	mov	r0, r4
 801721a:	f006 fc65 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801721e:	2210      	movs	r2, #16
 8017220:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 8017224:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017226:	4620      	mov	r0, r4
 8017228:	f006 fc5e 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801722c:	2211      	movs	r2, #17
 801722e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 8017232:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017236:	4620      	mov	r0, r4
 8017238:	f006 fc56 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801723c:	226c      	movs	r2, #108	; 0x6c
 801723e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 8017242:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8017246:	4620      	mov	r0, r4
 8017248:	f006 fc4e 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801724c:	2268      	movs	r2, #104	; 0x68
 801724e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 8017252:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8017256:	4620      	mov	r0, r4
 8017258:	f006 fc46 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801725c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 8017260:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8017262:	2269      	movs	r2, #105	; 0x69
 8017264:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8017266:	9300      	str	r3, [sp, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8017268:	f006 fc3e 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801726c:	b202      	sxth	r2, r0
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 801726e:	4620      	mov	r0, r4
 8017270:	9201      	str	r2, [sp, #4]
 8017272:	f005 fb13 	bl	801c89c <lv_obj_get_width>
 8017276:	9b00      	ldr	r3, [sp, #0]
 8017278:	005e      	lsls	r6, r3, #1
 801727a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801727e:	4620      	mov	r0, r4
 8017280:	9300      	str	r3, [sp, #0]
 8017282:	f005 fb11 	bl	801c8a8 <lv_obj_get_height>
 8017286:	9a01      	ldr	r2, [sp, #4]
 8017288:	9b00      	ldr	r3, [sp, #0]
 801728a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801728e:	0051      	lsls	r1, r2, #1
 8017290:	4283      	cmp	r3, r0
 8017292:	da26      	bge.n	80172e2 <lv_slider_event+0x4ce>
 8017294:	4620      	mov	r0, r4
 8017296:	f005 fb01 	bl	801c89c <lv_obj_get_width>
 801729a:	4406      	add	r6, r0
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801729c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80172a0:	4620      	mov	r0, r4
 80172a2:	f005 f8b8 	bl	801c416 <lv_obj_calculate_ext_draw_size>
 80172a6:	4604      	mov	r4, r0
        lv_coord_t * s = lv_event_get_param(e);
 80172a8:	4638      	mov	r0, r7
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 80172aa:	f346 064f 	sbfx	r6, r6, #1, #16
        lv_coord_t * s = lv_event_get_param(e);
 80172ae:	f003 ffdc 	bl	801b26a <lv_event_get_param>
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 80172b2:	455d      	cmp	r5, fp
 80172b4:	462b      	mov	r3, r5
        knob_size = (knob_size * zoom) >> 8;
 80172b6:	fb06 f808 	mul.w	r8, r6, r8
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 80172ba:	bfb8      	it	lt
 80172bc:	465b      	movlt	r3, fp
        *s  = LV_MAX(*s, knob_size);
 80172be:	f9b0 1000 	ldrsh.w	r1, [r0]
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 80172c2:	4553      	cmp	r3, sl
 80172c4:	bfb8      	it	lt
 80172c6:	4653      	movlt	r3, sl
 80172c8:	454b      	cmp	r3, r9
 80172ca:	bfb8      	it	lt
 80172cc:	464b      	movlt	r3, r9
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 80172ce:	3302      	adds	r3, #2
 80172d0:	4423      	add	r3, r4
 80172d2:	eb03 2328 	add.w	r3, r3, r8, asr #8
        *s  = LV_MAX(*s, knob_size);
 80172d6:	b21b      	sxth	r3, r3
 80172d8:	428b      	cmp	r3, r1
 80172da:	bfb8      	it	lt
 80172dc:	460b      	movlt	r3, r1
 80172de:	8003      	strh	r3, [r0, #0]
 80172e0:	e5f4      	b.n	8016ecc <lv_slider_event+0xb8>
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 80172e2:	4620      	mov	r0, r4
 80172e4:	9100      	str	r1, [sp, #0]
 80172e6:	f005 fadf 	bl	801c8a8 <lv_obj_get_height>
 80172ea:	9900      	ldr	r1, [sp, #0]
 80172ec:	1846      	adds	r6, r0, r1
 80172ee:	e7d5      	b.n	801729c <lv_slider_event+0x488>
        char c = *((char *)lv_event_get_param(e));
 80172f0:	4638      	mov	r0, r7
 80172f2:	f003 ffba 	bl	801b26a <lv_event_get_param>
 80172f6:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80172f8:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80172fc:	2a11      	cmp	r2, #17
 80172fe:	d11b      	bne.n	8017338 <lv_slider_event+0x524>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) + 1, LV_ANIM_ON);
 8017300:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 * @param obj       pointer to a slider object
 * @return          the value of the main knob of the slider
 */
static inline int32_t lv_slider_get_value(const lv_obj_t * obj)
{
    return lv_bar_get_value(obj);
 8017304:	4620      	mov	r0, r4
 8017306:	079a      	lsls	r2, r3, #30
 8017308:	d40e      	bmi.n	8017328 <lv_slider_event+0x514>
 801730a:	f00e ff1a 	bl	8026142 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 801730e:	2201      	movs	r2, #1
 8017310:	1881      	adds	r1, r0, r2
 8017312:	4620      	mov	r0, r4
 8017314:	f00e feb1 	bl	802607a <lv_bar_set_value>
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8017318:	2200      	movs	r2, #0
 801731a:	211c      	movs	r1, #28
 801731c:	4620      	mov	r0, r4
}
 801731e:	b033      	add	sp, #204	; 0xcc
 8017320:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8017324:	f7ed ba0e 	b.w	8004744 <lv_event_send>
 * @param obj       pointer to a slider object
 * @return          the value of the left knob of the slider
 */
static inline int32_t lv_slider_get_left_value(const lv_obj_t * obj)
{
    return lv_bar_get_start_value(obj);
 8017328:	f00e ff11 	bl	802614e <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 801732c:	2201      	movs	r2, #1
 801732e:	1881      	adds	r1, r0, r2
 8017330:	4620      	mov	r0, r4
 8017332:	f00e fee7 	bl	8026104 <lv_bar_set_start_value>
}
 8017336:	e7ef      	b.n	8017318 <lv_slider_event+0x504>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8017338:	2b14      	cmp	r3, #20
 801733a:	d002      	beq.n	8017342 <lv_slider_event+0x52e>
 801733c:	2b12      	cmp	r3, #18
 801733e:	f47f adc5 	bne.w	8016ecc <lv_slider_event+0xb8>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) - 1, LV_ANIM_ON);
 8017342:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    return lv_bar_get_value(obj);
 8017346:	4620      	mov	r0, r4
 8017348:	079b      	lsls	r3, r3, #30
 801734a:	d404      	bmi.n	8017356 <lv_slider_event+0x542>
 801734c:	f00e fef9 	bl	8026142 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 8017350:	2201      	movs	r2, #1
 8017352:	1e41      	subs	r1, r0, #1
 8017354:	e7dd      	b.n	8017312 <lv_slider_event+0x4fe>
    return lv_bar_get_start_value(obj);
 8017356:	f00e fefa 	bl	802614e <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 801735a:	2201      	movs	r2, #1
 801735c:	1e41      	subs	r1, r0, #1
 801735e:	e7e7      	b.n	8017330 <lv_slider_event+0x51c>
    lv_obj_t * obj = lv_event_get_target(e);
 8017360:	4638      	mov	r0, r7
 8017362:	f003 ff7a 	bl	801b25a <lv_event_get_target>
 8017366:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8017368:	4638      	mov	r0, r7
 801736a:	f003 ffcf 	bl	801b30c <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801736e:	2216      	movs	r2, #22
 8017370:	2100      	movs	r1, #0
 8017372:	4606      	mov	r6, r0
 8017374:	4620      	mov	r0, r4
 8017376:	f006 fbb7 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801737a:	fa5f f980 	uxtb.w	r9, r0
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 801737e:	4620      	mov	r0, r4
 8017380:	f005 fa8c 	bl	801c89c <lv_obj_get_width>
 8017384:	4680      	mov	r8, r0
 8017386:	4620      	mov	r0, r4
 8017388:	f005 fa8e 	bl	801c8a8 <lv_obj_get_height>
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 801738c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 8017390:	4580      	cmp	r8, r0
 8017392:	4607      	mov	r7, r0
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 8017394:	f003 0303 	and.w	r3, r3, #3
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 8017398:	bfb4      	ite	lt
 801739a:	f04f 0a00 	movlt.w	sl, #0
 801739e:	f04f 0a01 	movge.w	sl, #1
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 80173a2:	2b01      	cmp	r3, #1
 80173a4:	d15e      	bne.n	8017464 <lv_slider_event+0x650>
 80173a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	da5b      	bge.n	8017464 <lv_slider_event+0x650>
 80173ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	dd58      	ble.n	8017464 <lv_slider_event+0x650>
    if(is_horizontal) {
 80173b2:	45b8      	cmp	r8, r7
        knob_size = lv_obj_get_height(obj);
 80173b4:	4620      	mov	r0, r4
    if(is_horizontal) {
 80173b6:	db4b      	blt.n	8017450 <lv_slider_event+0x63c>
        knob_size = lv_obj_get_height(obj);
 80173b8:	f005 fa76 	bl	801c8a8 <lv_obj_get_height>
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.x1 = slider->bar.indic_area.x1;
 80173bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
        knob_size = lv_obj_get_height(obj);
 80173be:	4605      	mov	r5, r0
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.x1 = slider->bar.indic_area.x1;
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	da55      	bge.n	8017470 <lv_slider_event+0x65c>
 80173c4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
        else knob_area.x1 = LV_SLIDER_KNOB_COORD(is_rtl, slider->bar.indic_area);
 80173c6:	f8ad 3008 	strh.w	r3, [sp, #8]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 80173ca:	a804      	add	r0, sp, #16
    lv_area_copy(&slider->right_knob_area, &knob_area);
 80173cc:	f104 0b68 	add.w	fp, r4, #104	; 0x68
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 80173d0:	f7f1 fae8 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 80173d4:	aa04      	add	r2, sp, #16
 80173d6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80173da:	4620      	mov	r0, r4
 80173dc:	f004 fd8c 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    position_knob(obj, &knob_area, knob_size, is_horizontal);
 80173e0:	462a      	mov	r2, r5
 80173e2:	4653      	mov	r3, sl
 80173e4:	a902      	add	r1, sp, #8
 80173e6:	4620      	mov	r0, r4
 80173e8:	f010 f869 	bl	80274be <position_knob>
    dest->x1 = src->x1;
 80173ec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 80173f0:	4631      	mov	r1, r6
 80173f2:	a820      	add	r0, sp, #128	; 0x80
 80173f4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    dest->y1 = src->y1;
 80173f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80173fc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    dest->x2 = src->x2;
 8017400:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017404:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
    dest->y2 = src->y2;
 8017408:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801740c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8017410:	f005 f868 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_KNOB;
 8017414:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if(lv_slider_get_mode(obj) != LV_SLIDER_MODE_RANGE) {
 8017418:	4620      	mov	r0, r4
    part_draw_dsc.draw_area = &slider->right_knob_area;
 801741a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
    part_draw_dsc.part = LV_PART_KNOB;
 801741e:	932d      	str	r3, [sp, #180]	; 0xb4
    part_draw_dsc.class_p = MY_CLASS;
 8017420:	4b40      	ldr	r3, [pc, #256]	; (8017524 <lv_slider_event+0x710>)
 8017422:	9321      	str	r3, [sp, #132]	; 0x84
    part_draw_dsc.type = LV_SLIDER_DRAW_PART_KNOB;
 8017424:	2300      	movs	r3, #0
 8017426:	9322      	str	r3, [sp, #136]	; 0x88
    part_draw_dsc.id = 0;
 8017428:	932e      	str	r3, [sp, #184]	; 0xb8
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
 801742a:	ab04      	add	r3, sp, #16
 801742c:	9324      	str	r3, [sp, #144]	; 0x90
    if(lv_slider_get_mode(obj) != LV_SLIDER_MODE_RANGE) {
 801742e:	f010 f814 	bl	802745a <lv_slider_get_mode>
 8017432:	2802      	cmp	r0, #2
 8017434:	d029      	beq.n	801748a <lv_slider_event+0x676>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017436:	aa20      	add	r2, sp, #128	; 0x80
 8017438:	211a      	movs	r1, #26
 801743a:	4620      	mov	r0, r4
 801743c:	f7ed f982 	bl	8004744 <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->right_knob_area);
 8017440:	465a      	mov	r2, fp
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->left_knob_area);
 8017442:	a904      	add	r1, sp, #16
 8017444:	4630      	mov	r0, r6
 8017446:	f007 ffe2 	bl	801f40e <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801744a:	aa20      	add	r2, sp, #128	; 0x80
 801744c:	211b      	movs	r1, #27
 801744e:	e634      	b.n	80170ba <lv_slider_event+0x2a6>
        knob_size = lv_obj_get_width(obj);
 8017450:	f005 fa24 	bl	801c89c <lv_obj_get_width>
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.y1 = slider->bar.indic_area.y2;
 8017454:	6a63      	ldr	r3, [r4, #36]	; 0x24
        knob_size = lv_obj_get_width(obj);
 8017456:	4605      	mov	r5, r0
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.y1 = slider->bar.indic_area.y2;
 8017458:	2b00      	cmp	r3, #0
 801745a:	da14      	bge.n	8017486 <lv_slider_event+0x672>
 801745c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
        else knob_area.y1 = slider->bar.indic_area.y1;
 801745e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017462:	e7b2      	b.n	80173ca <lv_slider_event+0x5b6>
    if(is_horizontal) {
 8017464:	45b8      	cmp	r8, r7
        knob_size = lv_obj_get_height(obj);
 8017466:	4620      	mov	r0, r4
    if(is_horizontal) {
 8017468:	db0a      	blt.n	8017480 <lv_slider_event+0x66c>
        knob_size = lv_obj_get_height(obj);
 801746a:	f005 fa1d 	bl	801c8a8 <lv_obj_get_height>
 801746e:	4605      	mov	r5, r0
        else knob_area.x1 = LV_SLIDER_KNOB_COORD(is_rtl, slider->bar.indic_area);
 8017470:	f1b9 0f01 	cmp.w	r9, #1
 8017474:	bf0c      	ite	eq
 8017476:	f9b4 3034 	ldrsheq.w	r3, [r4, #52]	; 0x34
 801747a:	f9b4 3038 	ldrshne.w	r3, [r4, #56]	; 0x38
 801747e:	e7a2      	b.n	80173c6 <lv_slider_event+0x5b2>
        knob_size = lv_obj_get_width(obj);
 8017480:	f005 fa0c 	bl	801c89c <lv_obj_get_width>
 8017484:	4605      	mov	r5, r0
        else knob_area.y1 = slider->bar.indic_area.y1;
 8017486:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017488:	e7e9      	b.n	801745e <lv_slider_event+0x64a>
 801748a:	2238      	movs	r2, #56	; 0x38
 801748c:	a904      	add	r1, sp, #16
 801748e:	a812      	add	r0, sp, #72	; 0x48
 8017490:	f003 f96f 	bl	801a772 <memcpy>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017494:	aa20      	add	r2, sp, #128	; 0x80
 8017496:	211a      	movs	r1, #26
 8017498:	4620      	mov	r0, r4
 801749a:	f7ed f953 	bl	8004744 <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->right_knob_area);
 801749e:	465a      	mov	r2, fp
 80174a0:	a904      	add	r1, sp, #16
 80174a2:	4630      	mov	r0, r6
 80174a4:	f007 ffb3 	bl	801f40e <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80174a8:	aa20      	add	r2, sp, #128	; 0x80
 80174aa:	211b      	movs	r1, #27
 80174ac:	4620      	mov	r0, r4
 80174ae:	f7ed f949 	bl	8004744 <lv_event_send>
        if(is_horizontal) {
 80174b2:	45b8      	cmp	r8, r7
 80174b4:	db32      	blt.n	801751c <lv_slider_event+0x708>
            knob_area.x1 = LV_SLIDER_KNOB_COORD(!is_rtl, slider->bar.indic_area);
 80174b6:	f1b9 0f01 	cmp.w	r9, #1
 80174ba:	bf14      	ite	ne
 80174bc:	f9b4 3034 	ldrshne.w	r3, [r4, #52]	; 0x34
 80174c0:	f9b4 3038 	ldrsheq.w	r3, [r4, #56]	; 0x38
 80174c4:	f8ad 3008 	strh.w	r3, [sp, #8]
        position_knob(obj, &knob_area, knob_size, is_horizontal);
 80174c8:	462a      	mov	r2, r5
 80174ca:	4653      	mov	r3, sl
 80174cc:	a902      	add	r1, sp, #8
 80174ce:	4620      	mov	r0, r4
 80174d0:	f00f fff5 	bl	80274be <position_knob>
    dest->x1 = src->x1;
 80174d4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80174d8:	2238      	movs	r2, #56	; 0x38
 80174da:	a912      	add	r1, sp, #72	; 0x48
 80174dc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 80174e0:	a804      	add	r0, sp, #16
    dest->y1 = src->y1;
 80174e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        lv_area_copy(&slider->left_knob_area, &knob_area);
 80174e6:	f104 0560 	add.w	r5, r4, #96	; 0x60
 80174ea:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    dest->x2 = src->x2;
 80174ee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80174f2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    dest->y2 = src->y2;
 80174f6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80174fa:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
 80174fe:	f003 f938 	bl	801a772 <memcpy>
        part_draw_dsc.rect_dsc = &knob_rect_dsc;
 8017502:	aa04      	add	r2, sp, #16
        part_draw_dsc.type = LV_SLIDER_DRAW_PART_KNOB_LEFT;
 8017504:	2301      	movs	r3, #1
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017506:	211a      	movs	r1, #26
        part_draw_dsc.rect_dsc = &knob_rect_dsc;
 8017508:	9224      	str	r2, [sp, #144]	; 0x90
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801750a:	4620      	mov	r0, r4
 801750c:	aa20      	add	r2, sp, #128	; 0x80
        part_draw_dsc.id = 1;
 801750e:	932e      	str	r3, [sp, #184]	; 0xb8
        part_draw_dsc.draw_area = &slider->left_knob_area;
 8017510:	e9cd 3522 	strd	r3, r5, [sp, #136]	; 0x88
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017514:	f7ed f916 	bl	8004744 <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->left_knob_area);
 8017518:	462a      	mov	r2, r5
 801751a:	e792      	b.n	8017442 <lv_slider_event+0x62e>
            knob_area.y1 = slider->bar.indic_area.y2;
 801751c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801751e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017522:	e7d1      	b.n	80174c8 <lv_slider_event+0x6b4>
 8017524:	08029ab4 	.word	0x08029ab4

08017528 <lv_switch_event>:

    lv_anim_del(sw, NULL);
}

static void lv_switch_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8017528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801752c:	48a6      	ldr	r0, [pc, #664]	; (80177c8 <lv_switch_event+0x2a0>)
{
 801752e:	b0a5      	sub	sp, #148	; 0x94
 8017530:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8017532:	f003 fe7c 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8017536:	2801      	cmp	r0, #1
 8017538:	d14c      	bne.n	80175d4 <lv_switch_event+0xac>

    lv_event_code_t code = lv_event_get_code(e);
 801753a:	4628      	mov	r0, r5
 801753c:	f003 fe91 	bl	801b262 <lv_event_get_code>
 8017540:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8017542:	4628      	mov	r0, r5
 8017544:	f003 fe89 	bl	801b25a <lv_event_get_target>

    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8017548:	2c13      	cmp	r4, #19
    lv_obj_t * obj = lv_event_get_target(e);
 801754a:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801754c:	d14b      	bne.n	80175e6 <lv_switch_event+0xbe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801754e:	2212      	movs	r2, #18
 8017550:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8017554:	f006 fac8 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017558:	4622      	mov	r2, r4
    return (lv_coord_t)v.num;
 801755a:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801755e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8017562:	4630      	mov	r0, r6
 8017564:	f006 fac0 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017568:	2210      	movs	r2, #16
    return (lv_coord_t)v.num;
 801756a:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801756c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8017570:	4630      	mov	r0, r6
 8017572:	f006 fab9 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017576:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 8017578:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801757c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8017580:	4630      	mov	r0, r6
 8017582:	f006 fab1 	bl	801dae8 <lv_obj_get_style_prop>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);

        /*The smaller size is the knob diameter*/
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
        knob_size += _LV_SWITCH_KNOB_EXT_AREA_CORRECTION;
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 8017586:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801758a:	b207      	sxth	r7, r0
 801758c:	4630      	mov	r0, r6
 801758e:	f004 ff42 	bl	801c416 <lv_obj_calculate_ext_draw_size>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 8017592:	454c      	cmp	r4, r9
 8017594:	bfb8      	it	lt
 8017596:	464c      	movlt	r4, r9
 8017598:	4544      	cmp	r4, r8
 801759a:	bfb8      	it	lt
 801759c:	4644      	movlt	r4, r8
 801759e:	42bc      	cmp	r4, r7
 80175a0:	bfb8      	it	lt
 80175a2:	463c      	movlt	r4, r7
        knob_size += _LV_SWITCH_KNOB_EXT_AREA_CORRECTION;
 80175a4:	3402      	adds	r4, #2
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 80175a6:	4404      	add	r4, r0

        lv_coord_t * s = lv_event_get_param(e);
 80175a8:	4628      	mov	r0, r5
 80175aa:	f003 fe5e 	bl	801b26a <lv_event_get_param>
        *s = LV_MAX(*s, knob_size);
 80175ae:	f9b0 3000 	ldrsh.w	r3, [r0]
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 80175b2:	b2a4      	uxth	r4, r4
        lv_coord_t * s = lv_event_get_param(e);
 80175b4:	4605      	mov	r5, r0
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 80175b6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        *s = LV_MAX(*s, knob_size);
 80175ba:	b224      	sxth	r4, r4
 80175bc:	429c      	cmp	r4, r3
 80175be:	bfb8      	it	lt
 80175c0:	461c      	movlt	r4, r3
 80175c2:	8004      	strh	r4, [r0, #0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 80175c4:	4630      	mov	r0, r6
 80175c6:	f004 ff26 	bl	801c416 <lv_obj_calculate_ext_draw_size>
 80175ca:	4284      	cmp	r4, r0
 80175cc:	dd05      	ble.n	80175da <lv_switch_event+0xb2>
 80175ce:	f9b5 0000 	ldrsh.w	r0, [r5]
 80175d2:	8028      	strh	r0, [r5, #0]
        lv_obj_invalidate(obj);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        draw_main(e);
    }
}
 80175d4:	b025      	add	sp, #148	; 0x94
 80175d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 80175da:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80175de:	4630      	mov	r0, r6
 80175e0:	f004 ff19 	bl	801c416 <lv_obj_calculate_ext_draw_size>
 80175e4:	e7f5      	b.n	80175d2 <lv_switch_event+0xaa>
    else if(code == LV_EVENT_VALUE_CHANGED) {
 80175e6:	2c1c      	cmp	r4, #28
 80175e8:	d135      	bne.n	8017656 <lv_switch_event+0x12e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 80175ea:	2264      	movs	r2, #100	; 0x64
 80175ec:	2100      	movs	r1, #0
 80175ee:	f006 fa7b 	bl	801dae8 <lv_obj_get_style_prop>
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_switch_t * sw = (lv_switch_t *)obj;

    uint32_t anim_dur_full = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);

    if(anim_dur_full > 0) {
 80175f2:	4607      	mov	r7, r0
 80175f4:	b338      	cbz	r0, 8017646 <lv_switch_event+0x11e>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 80175f6:	4630      	mov	r0, r6
 80175f8:	f004 fa48 	bl	801ba8c <lv_obj_get_state>
        int32_t anim_start;
        int32_t anim_end;
        /*No animation in progress -> simply set the values*/
        if(sw->anim_state == LV_SWITCH_ANIM_STATE_INV) {
 80175fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80175fe:	f000 0501 	and.w	r5, r0, #1
 8017602:	1c61      	adds	r1, r4, #1
 8017604:	d125      	bne.n	8017652 <lv_switch_event+0x12a>
            anim_start = chk ? LV_SWITCH_ANIM_STATE_START : LV_SWITCH_ANIM_STATE_END;
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 8017606:	2d00      	cmp	r5, #0
 8017608:	ea4f 2505 	mov.w	r5, r5, lsl #8
 801760c:	bf0c      	ite	eq
 801760e:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8017612:	2400      	movne	r4, #0
        }
        /*Calculate actual animation duration*/
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;

        /*Stop the previous animation if it exists*/
        lv_anim_del(sw, NULL);
 8017614:	2100      	movs	r1, #0
 8017616:	4630      	mov	r0, r6
 8017618:	f7fa fec2 	bl	80123a0 <lv_anim_del>

        lv_anim_t a;
        lv_anim_init(&a);
 801761c:	a813      	add	r0, sp, #76	; 0x4c
 801761e:	f7fa fea3 	bl	8012368 <lv_anim_init>
    a->exec_cb = exec_cb;
 8017622:	4b6a      	ldr	r3, [pc, #424]	; (80177cc <lv_switch_event+0x2a4>)
        lv_anim_set_var(&a, sw);
        lv_anim_set_exec_cb(&a, lv_switch_anim_exec_cb);
        lv_anim_set_values(&a, anim_start, anim_end);
        lv_anim_set_ready_cb(&a, lv_switch_anim_ready);
        lv_anim_set_time(&a, anim_dur);
        lv_anim_start(&a);
 8017624:	a813      	add	r0, sp, #76	; 0x4c
    a->var = var;
 8017626:	9613      	str	r6, [sp, #76]	; 0x4c
    a->exec_cb = exec_cb;
 8017628:	9314      	str	r3, [sp, #80]	; 0x50
    a->ready_cb = ready_cb;
 801762a:	4b69      	ldr	r3, [pc, #420]	; (80177d0 <lv_switch_event+0x2a8>)
    a->end_value = end;
 801762c:	951d      	str	r5, [sp, #116]	; 0x74
    a->ready_cb = ready_cb;
 801762e:	9316      	str	r3, [sp, #88]	; 0x58
    a->current_value = start;
 8017630:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;
 8017634:	1b64      	subs	r4, r4, r5
 8017636:	2c00      	cmp	r4, #0
 8017638:	bfb8      	it	lt
 801763a:	4264      	neglt	r4, r4
 801763c:	437c      	muls	r4, r7
 801763e:	0a24      	lsrs	r4, r4, #8
    a->time = duration;
 8017640:	941e      	str	r4, [sp, #120]	; 0x78
        lv_anim_start(&a);
 8017642:	f7fa fedd 	bl	8012400 <lv_anim_start>
        lv_obj_invalidate(obj);
 8017646:	4630      	mov	r0, r6
}
 8017648:	b025      	add	sp, #148	; 0x94
 801764a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        lv_obj_invalidate(obj);
 801764e:	f005 bb25 	b.w	801cc9c <lv_obj_invalidate>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 8017652:	022d      	lsls	r5, r5, #8
 8017654:	e7de      	b.n	8017614 <lv_switch_event+0xec>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8017656:	2c15      	cmp	r4, #21
 8017658:	d1bc      	bne.n	80175d4 <lv_switch_event+0xac>
    lv_obj_t * obj = lv_event_get_target(e);
 801765a:	4628      	mov	r0, r5
 801765c:	f003 fdfd 	bl	801b25a <lv_event_get_target>
 8017660:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8017662:	4628      	mov	r0, r5
 8017664:	f003 fe52 	bl	801b30c <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8017668:	2212      	movs	r2, #18
 801766a:	4607      	mov	r7, r0
 801766c:	2100      	movs	r1, #0
 801766e:	4620      	mov	r0, r4
 8017670:	f006 fa3a 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017674:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8017676:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017678:	2100      	movs	r1, #0
 801767a:	4620      	mov	r0, r4
 801767c:	f006 fa34 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017680:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017682:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017684:	2100      	movs	r1, #0
 8017686:	4620      	mov	r0, r4
 8017688:	f006 fa2e 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801768c:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801768e:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017690:	2100      	movs	r1, #0
 8017692:	4620      	mov	r0, r4
 8017694:	f006 fa28 	bl	801dae8 <lv_obj_get_style_prop>
    indic_area.x1 += bg_left;
 8017698:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    dest->y1 = src->y1;
 801769c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 80176a0:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80176a4:	4465      	add	r5, ip
    dest->y2 = src->y2;
 80176a6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
    indic_area.y1 += bg_top;
 80176aa:	4432      	add	r2, r6
    indic_area.x2 -= bg_right;
 80176ac:	eba1 0108 	sub.w	r1, r1, r8
    indic_area.x1 += bg_left;
 80176b0:	f8ad 5004 	strh.w	r5, [sp, #4]
    indic_area.y2 -= bg_bottom;
 80176b4:	1a1b      	subs	r3, r3, r0
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 80176b6:	a805      	add	r0, sp, #20
    indic_area.x2 -= bg_right;
 80176b8:	f8ad 1008 	strh.w	r1, [sp, #8]
    indic_area.y2 -= bg_bottom;
 80176bc:	f8ad 300a 	strh.w	r3, [sp, #10]
    indic_area.y1 += bg_top;
 80176c0:	f8ad 2006 	strh.w	r2, [sp, #6]
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 80176c4:	f7f1 f96e 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_indic_dsc);
 80176c8:	aa05      	add	r2, sp, #20
 80176ca:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80176ce:	4620      	mov	r0, r4
 80176d0:	f004 fc12 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &draw_indic_dsc, &indic_area);
 80176d4:	aa01      	add	r2, sp, #4
 80176d6:	a905      	add	r1, sp, #20
 80176d8:	4638      	mov	r0, r7
 80176da:	f007 fe98 	bl	801f40e <lv_draw_rect>
    lv_coord_t knob_size = lv_obj_get_height(obj);
 80176de:	4620      	mov	r0, r4
 80176e0:	f005 f8e2 	bl	801c8a8 <lv_obj_get_height>
    lv_coord_t anim_length = lv_area_get_width(&obj->coords) - knob_size;
 80176e4:	8b25      	ldrh	r5, [r4, #24]
 80176e6:	b286      	uxth	r6, r0
 80176e8:	8aa3      	ldrh	r3, [r4, #20]
 80176ea:	1bad      	subs	r5, r5, r6
 80176ec:	3501      	adds	r5, #1
 80176ee:	1aed      	subs	r5, r5, r3
    if(LV_SWITCH_IS_ANIMATING(sw)) {
 80176f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80176f2:	1c5a      	adds	r2, r3, #1
    lv_coord_t anim_length = lv_area_get_width(&obj->coords) - knob_size;
 80176f4:	fa1f f885 	uxth.w	r8, r5
 80176f8:	b22d      	sxth	r5, r5
    if(LV_SWITCH_IS_ANIMATING(sw)) {
 80176fa:	d05d      	beq.n	80177b8 <lv_switch_event+0x290>
        anim_value_x = (anim_length * sw->anim_state) / LV_SWITCH_ANIM_STATE_END;
 80176fc:	435d      	muls	r5, r3
 80176fe:	bf48      	it	mi
 8017700:	35ff      	addmi	r5, #255	; 0xff
 8017702:	f345 250f 	sbfx	r5, r5, #8, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8017706:	2216      	movs	r2, #22
 8017708:	2100      	movs	r1, #0
 801770a:	4620      	mov	r0, r4
 801770c:	f006 f9ec 	bl	801dae8 <lv_obj_get_style_prop>
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 8017710:	8aa3      	ldrh	r3, [r4, #20]
    return (lv_base_dir_t)v.num;
 8017712:	b2c0      	uxtb	r0, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8017714:	2212      	movs	r2, #18
 8017716:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    if(LV_BASE_DIR_RTL == lv_obj_get_style_base_dir(obj, LV_PART_MAIN)) {
 801771a:	2801      	cmp	r0, #1
 801771c:	4620      	mov	r0, r4
        anim_value_x = anim_length - anim_value_x;
 801771e:	bf04      	itt	eq
 8017720:	eba8 0805 	subeq.w	r8, r8, r5
 8017724:	fa0f f588 	sxtheq.w	r5, r8
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 8017728:	441d      	add	r5, r3
    knob_area.y1 = obj->coords.y1;
 801772a:	8ae3      	ldrh	r3, [r4, #22]
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 801772c:	b2ad      	uxth	r5, r5
    knob_area.y1 = obj->coords.y1;
 801772e:	f8ad 300e 	strh.w	r3, [sp, #14]
    knob_area.y2 = obj->coords.y2;
 8017732:	8b63      	ldrh	r3, [r4, #26]
    knob_area.x2 = knob_area.x1 + knob_size;
 8017734:	442e      	add	r6, r5
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 8017736:	f8ad 500c 	strh.w	r5, [sp, #12]
    knob_area.y2 = obj->coords.y2;
 801773a:	f8ad 3012 	strh.w	r3, [sp, #18]
    knob_area.x2 = knob_area.x1 + knob_size;
 801773e:	f8ad 6010 	strh.w	r6, [sp, #16]
 8017742:	f006 f9d1 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017746:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8017748:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801774a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801774e:	4620      	mov	r0, r4
 8017750:	f006 f9ca 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017754:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017756:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017758:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801775c:	4620      	mov	r0, r4
 801775e:	f006 f9c3 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017762:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017764:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017766:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801776a:	4620      	mov	r0, r4
 801776c:	f006 f9bc 	bl	801dae8 <lv_obj_get_style_prop>
    knob_area.x1 -= knob_left;
 8017770:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017774:	eba3 0308 	sub.w	r3, r3, r8
 8017778:	f8ad 300c 	strh.w	r3, [sp, #12]
    knob_area.x2 += knob_right;
 801777c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017780:	441d      	add	r5, r3
    knob_area.y1 -= knob_top;
 8017782:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017786:	1b9b      	subs	r3, r3, r6
    knob_area.x2 += knob_right;
 8017788:	f8ad 5010 	strh.w	r5, [sp, #16]
    knob_area.y1 -= knob_top;
 801778c:	f8ad 300e 	strh.w	r3, [sp, #14]
    knob_area.y2 += knob_bottom;
 8017790:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017794:	4418      	add	r0, r3
 8017796:	f8ad 0012 	strh.w	r0, [sp, #18]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801779a:	a813      	add	r0, sp, #76	; 0x4c
 801779c:	f7f1 f902 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 80177a0:	aa13      	add	r2, sp, #76	; 0x4c
 80177a2:	4620      	mov	r0, r4
 80177a4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80177a8:	f004 fba6 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 80177ac:	aa03      	add	r2, sp, #12
 80177ae:	a913      	add	r1, sp, #76	; 0x4c
 80177b0:	4638      	mov	r0, r7
 80177b2:	f007 fe2c 	bl	801f40e <lv_draw_rect>
}
 80177b6:	e70d      	b.n	80175d4 <lv_switch_event+0xac>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 80177b8:	4620      	mov	r0, r4
 80177ba:	f004 f967 	bl	801ba8c <lv_obj_get_state>
        anim_value_x = chk ? anim_length : 0;
 80177be:	f010 0f01 	tst.w	r0, #1
 80177c2:	bf08      	it	eq
 80177c4:	2500      	moveq	r5, #0
 80177c6:	e79e      	b.n	8017706 <lv_switch_event+0x1de>
 80177c8:	08029ad0 	.word	0x08029ad0
 80177cc:	08027593 	.word	0x08027593
 80177d0:	08027587 	.word	0x08027587

080177d4 <draw_main>:
    }
}


static void draw_main(lv_event_t * e)
{
 80177d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177d8:	4605      	mov	r5, r0
 80177da:	b0df      	sub	sp, #380	; 0x17c
    lv_obj_t * obj = lv_event_get_target(e);
 80177dc:	f003 fd3d 	bl	801b25a <lv_event_get_target>
 80177e0:	4604      	mov	r4, r0
    lv_table_t * table = (lv_table_t *)obj;
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80177e2:	4628      	mov	r0, r5
 80177e4:	f003 fd92 	bl	801b30c <lv_event_get_draw_ctx>
    lv_area_t clip_area;
    if(!_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area)) return;
 80177e8:	f104 0114 	add.w	r1, r4, #20
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80177ec:	4605      	mov	r5, r0
    if(!_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area)) return;
 80177ee:	6882      	ldr	r2, [r0, #8]
 80177f0:	a816      	add	r0, sp, #88	; 0x58
 80177f2:	f00c fd72 	bl	80242da <_lv_area_intersect>
 80177f6:	2800      	cmp	r0, #0
 80177f8:	f000 8088 	beq.w	801790c <draw_main+0x138>

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80177fc:	68ab      	ldr	r3, [r5, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80177fe:	2232      	movs	r2, #50	; 0x32
 8017800:	2100      	movs	r1, #0
 8017802:	4620      	mov	r0, r4
 8017804:	930d      	str	r3, [sp, #52]	; 0x34
    draw_ctx->clip_area = &clip_area;
 8017806:	ab16      	add	r3, sp, #88	; 0x58
 8017808:	60ab      	str	r3, [r5, #8]
 801780a:	f006 f96d 	bl	801dae8 <lv_obj_get_style_prop>

    lv_point_t txt_size;
    lv_area_t cell_area;

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801780e:	2100      	movs	r1, #0
 8017810:	4606      	mov	r6, r0
 8017812:	4620      	mov	r0, r4
 8017814:	f00f fee4 	bl	80275e0 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017818:	2211      	movs	r2, #17
 801781a:	2100      	movs	r1, #0
 801781c:	9007      	str	r0, [sp, #28]
 801781e:	4620      	mov	r0, r4
 8017820:	f006 f962 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8017824:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 8017826:	b203      	sxth	r3, r0
 8017828:	4620      	mov	r0, r4
 801782a:	9311      	str	r3, [sp, #68]	; 0x44
 801782c:	f00f fecc 	bl	80275c8 <lv_obj_get_style_pad_left>
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8017830:	2100      	movs	r1, #0
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8017832:	9008      	str	r0, [sp, #32]
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8017834:	4620      	mov	r0, r4
 8017836:	f00f fecd 	bl	80275d4 <lv_obj_get_style_pad_right>

    lv_state_t state_ori = obj->state;
 801783a:	8c23      	ldrh	r3, [r4, #32]
    obj->state = LV_STATE_DEFAULT;
 801783c:	6a22      	ldr	r2, [r4, #32]
    lv_state_t state_ori = obj->state;
 801783e:	930a      	str	r3, [sp, #40]	; 0x28
    obj->state = LV_STATE_DEFAULT;
 8017840:	4bbc      	ldr	r3, [pc, #752]	; (8017b34 <draw_main+0x360>)
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8017842:	9009      	str	r0, [sp, #36]	; 0x24
    obj->skip_trans = 1;
    lv_draw_rect_dsc_t rect_dsc_def;
    lv_draw_rect_dsc_t rect_dsc_act; /*Passed to the event to modify it*/
    lv_draw_rect_dsc_init(&rect_dsc_def);
 8017844:	a830      	add	r0, sp, #192	; 0xc0
    obj->state = LV_STATE_DEFAULT;
 8017846:	4013      	ands	r3, r2
 8017848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801784c:	6223      	str	r3, [r4, #32]
    lv_draw_rect_dsc_init(&rect_dsc_def);
 801784e:	f7f1 f8a9 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_def);
 8017852:	aa30      	add	r2, sp, #192	; 0xc0
 8017854:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8017858:	4620      	mov	r0, r4
 801785a:	f004 fb4d 	bl	801bef8 <lv_obj_init_draw_rect_dsc>

    lv_draw_label_dsc_t label_dsc_def;
    lv_draw_label_dsc_t label_dsc_act;  /*Passed to the event to modify it*/
    lv_draw_label_dsc_init(&label_dsc_def);
 801785e:	a820      	add	r0, sp, #128	; 0x80
 8017860:	f7f0 fa56 	bl	8007d10 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_def);
 8017864:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8017868:	aa20      	add	r2, sp, #128	; 0x80
 801786a:	4620      	mov	r0, r4
 801786c:	f004 fc93 	bl	801c196 <lv_obj_init_draw_label_dsc>
    obj->state = state_ori;
 8017870:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    uint16_t col;
    uint16_t row;
    uint16_t cell = 0;

    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 8017872:	4620      	mov	r0, r4
 8017874:	8ae7      	ldrh	r7, [r4, #22]
    obj->state = state_ori;
 8017876:	8423      	strh	r3, [r4, #32]
    obj->skip_trans = 0;
 8017878:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801787c:	f36f 0382 	bfc	r3, #2, #1
 8017880:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 8017884:	f005 fba3 	bl	801cfce <lv_obj_get_scroll_y>
 8017888:	b2b3      	uxth	r3, r6
 801788a:	9306      	str	r3, [sp, #24]
 801788c:	3b01      	subs	r3, #1
 801788e:	b29a      	uxth	r2, r3
 8017890:	fa17 f383 	uxtah	r3, r7, r3
    /*Handle custom drawer*/
    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
    part_draw_dsc.part = LV_PART_ITEMS;
    part_draw_dsc.class_p = MY_CLASS;
    part_draw_dsc.type = LV_TABLE_DRAW_PART_CELL;
 8017894:	2700      	movs	r7, #0
 8017896:	9212      	str	r2, [sp, #72]	; 0x48
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 8017898:	9a07      	ldr	r2, [sp, #28]
    uint16_t cell = 0;
 801789a:	46ba      	mov	sl, r7
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 801789c:	4413      	add	r3, r2
 801789e:	1a1b      	subs	r3, r3, r0
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 80178a0:	4620      	mov	r0, r4
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 80178a2:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 80178a6:	f005 fb8c 	bl	801cfc2 <lv_obj_get_scroll_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80178aa:	2216      	movs	r2, #22
 80178ac:	2100      	movs	r1, #0
 80178ae:	900e      	str	r0, [sp, #56]	; 0x38
 80178b0:	4620      	mov	r0, r4
 80178b2:	f006 f919 	bl	801dae8 <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 80178b6:	4629      	mov	r1, r5
    return (lv_base_dir_t)v.num;
 80178b8:	b2c3      	uxtb	r3, r0
 80178ba:	a84c      	add	r0, sp, #304	; 0x130
 80178bc:	9305      	str	r3, [sp, #20]
 80178be:	f004 fe11 	bl	801c4e4 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 80178c2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
    part_draw_dsc.type = LV_TABLE_DRAW_PART_CELL;
 80178c6:	974e      	str	r7, [sp, #312]	; 0x138
    part_draw_dsc.part = LV_PART_ITEMS;
 80178c8:	9359      	str	r3, [sp, #356]	; 0x164
    part_draw_dsc.class_p = MY_CLASS;
 80178ca:	4b9b      	ldr	r3, [pc, #620]	; (8017b38 <draw_main+0x364>)
 80178cc:	934d      	str	r3, [sp, #308]	; 0x134
    part_draw_dsc.rect_dsc = &rect_dsc_act;
 80178ce:	ab3e      	add	r3, sp, #248	; 0xf8
 80178d0:	9350      	str	r3, [sp, #320]	; 0x140
    part_draw_dsc.label_dsc = &label_dsc_act;
 80178d2:	ab28      	add	r3, sp, #160	; 0xa0
 80178d4:	9351      	str	r3, [sp, #324]	; 0x144

    for(row = 0; row < table->row_cnt; row++) {
 80178d6:	b2bb      	uxth	r3, r7
 80178d8:	b2ba      	uxth	r2, r7
 80178da:	9310      	str	r3, [sp, #64]	; 0x40
 80178dc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80178de:	4293      	cmp	r3, r2
 80178e0:	d912      	bls.n	8017908 <draw_main+0x134>
        lv_coord_t h_row = table->row_h[row];
 80178e2:	b2bb      	uxth	r3, r7

        cell_area.y1 = cell_area.y2 + 1;
 80178e4:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
        lv_coord_t h_row = table->row_h[row];
 80178e8:	b2ba      	uxth	r2, r7
 80178ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80178ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80178ee:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
        cell_area.y1 = cell_area.y2 + 1;
 80178f2:	1c4b      	adds	r3, r1, #1
        cell_area.y2 = cell_area.y1 + h_row - 1;
 80178f4:	4411      	add	r1, r2
        cell_area.y1 = cell_area.y2 + 1;
 80178f6:	b21b      	sxth	r3, r3
        cell_area.y2 = cell_area.y1 + h_row - 1;
 80178f8:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66

        if(cell_area.y1 > clip_area.y2) break;
 80178fc:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
        cell_area.y1 = cell_area.y2 + 1;
 8017900:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        if(cell_area.y1 > clip_area.y2) break;
 8017904:	4299      	cmp	r1, r3
 8017906:	da04      	bge.n	8017912 <draw_main+0x13e>
            cell += col_merge + 1;
            col += col_merge;
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 8017908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801790a:	60ab      	str	r3, [r5, #8]
}
 801790c:	b05f      	add	sp, #380	; 0x17c
 801790e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(rtl) cell_area.x1 = obj->coords.x2 - bg_right - 1 - scroll_x - border_width;
 8017912:	9b05      	ldr	r3, [sp, #20]
 8017914:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8017918:	2b01      	cmp	r3, #1
 801791a:	d110      	bne.n	801793e <draw_main+0x16a>
 801791c:	9806      	ldr	r0, [sp, #24]
 801791e:	8b23      	ldrh	r3, [r4, #24]
 8017920:	1a1b      	subs	r3, r3, r0
 8017922:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017924:	3b01      	subs	r3, #1
 8017926:	1a1b      	subs	r3, r3, r0
 8017928:	1a5b      	subs	r3, r3, r1
 801792a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 801792e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8017932:	f04f 0800 	mov.w	r8, #0
 8017936:	f3c2 034f 	ubfx	r3, r2, #1, #16
 801793a:	930c      	str	r3, [sp, #48]	; 0x30
 801793c:	e1a4      	b.n	8017c88 <draw_main+0x4b4>
        else cell_area.x2 = obj->coords.x1 + bg_left - 1 - scroll_x + border_width;
 801793e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017940:	8aa3      	ldrh	r3, [r4, #20]
 8017942:	4403      	add	r3, r0
 8017944:	9808      	ldr	r0, [sp, #32]
 8017946:	4403      	add	r3, r0
 8017948:	1a5b      	subs	r3, r3, r1
 801794a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
 801794e:	e7ee      	b.n	801792e <draw_main+0x15a>
            if(table->cell_data[cell]) ctrl = table->cell_data[cell][0];
 8017950:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8017954:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8017958:	f85c 602a 	ldr.w	r6, [ip, sl, lsl #2]
 801795c:	9304      	str	r3, [sp, #16]
 801795e:	b106      	cbz	r6, 8017962 <draw_main+0x18e>
 8017960:	7836      	ldrb	r6, [r6, #0]
            if(rtl) {
 8017962:	9b05      	ldr	r3, [sp, #20]
                cell_area.x1 = cell_area.x2 - table->col_w[col] + 1;
 8017964:	6b20      	ldr	r0, [r4, #48]	; 0x30
            if(rtl) {
 8017966:	2b01      	cmp	r3, #1
 8017968:	d10d      	bne.n	8017986 <draw_main+0x1b2>
                cell_area.x2 = cell_area.x1 - 1;
 801796a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801796e:	1e59      	subs	r1, r3, #1
 8017970:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
                cell_area.x1 = cell_area.x2 - table->col_w[col] + 1;
 8017974:	f830 1018 	ldrh.w	r1, [r0, r8, lsl #1]
 8017978:	1a5b      	subs	r3, r3, r1
 801797a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            lv_table_cell_ctrl_t ctrl = 0;
 801797e:	2300      	movs	r3, #0
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 8017980:	f102 39ff 	add.w	r9, r2, #4294967295
 8017984:	e028      	b.n	80179d8 <draw_main+0x204>
                cell_area.x1 = cell_area.x2 + 1;
 8017986:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801798a:	1c59      	adds	r1, r3, #1
 801798c:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
                cell_area.x2 = cell_area.x1 + table->col_w[col] - 1;
 8017990:	f830 1018 	ldrh.w	r1, [r0, r8, lsl #1]
 8017994:	440b      	add	r3, r1
 8017996:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
 801799a:	e7f0      	b.n	801797e <draw_main+0x1aa>
                char * next_cell_data = table->cell_data[cell + col_merge];
 801799c:	44d6      	add	lr, sl
 801799e:	f85c e02e 	ldr.w	lr, [ip, lr, lsl #2]
                if(is_cell_empty(next_cell_data)) break;
 80179a2:	f1be 0f00 	cmp.w	lr, #0
 80179a6:	d01d      	beq.n	80179e4 <draw_main+0x210>
                if(merge_ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT) {
 80179a8:	f89e e000 	ldrb.w	lr, [lr]
 80179ac:	f01e 0f01 	tst.w	lr, #1
 80179b0:	d018      	beq.n	80179e4 <draw_main+0x210>
                    if(rtl) cell_area.x1 -= offset;
 80179b2:	9a05      	ldr	r2, [sp, #20]
                    lv_coord_t offset = table->col_w[col + col_merge + 1];
 80179b4:	3101      	adds	r1, #1
 80179b6:	3301      	adds	r3, #1
                    if(rtl) cell_area.x1 -= offset;
 80179b8:	2a01      	cmp	r2, #1
 80179ba:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 80179be:	bf0b      	itete	eq
 80179c0:	f8bd e060 	ldrheq.w	lr, [sp, #96]	; 0x60
                    else cell_area.x2 += offset;
 80179c4:	f8bd e064 	ldrhne.w	lr, [sp, #100]	; 0x64
                    if(rtl) cell_area.x1 -= offset;
 80179c8:	ebae 0101 	subeq.w	r1, lr, r1
                    else cell_area.x2 += offset;
 80179cc:	4471      	addne	r1, lr
                    if(rtl) cell_area.x1 -= offset;
 80179ce:	bf0c      	ite	eq
 80179d0:	f8ad 1060 	strheq.w	r1, [sp, #96]	; 0x60
                    else cell_area.x2 += offset;
 80179d4:	f8ad 1064 	strhne.w	r1, [sp, #100]	; 0x64
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 80179d8:	fa18 f183 	uxtah	r1, r8, r3
 80179dc:	fa1f fe83 	uxth.w	lr, r3
 80179e0:	4549      	cmp	r1, r9
 80179e2:	dbdb      	blt.n	801799c <draw_main+0x1c8>
            if(cell_area.y2 < clip_area.y1) {
 80179e4:	3301      	adds	r3, #1
 80179e6:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 80179ea:	b299      	uxth	r1, r3
                cell += col_merge + 1;
 80179ec:	fa1a f383 	uxtah	r3, sl, r3
 80179f0:	fa1f fa83 	uxth.w	sl, r3
            if(cell_area.y2 < clip_area.y1) {
 80179f4:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80179f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80179fa:	4293      	cmp	r3, r2
 80179fc:	f300 8140 	bgt.w	8017c80 <draw_main+0x4ac>
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_LEFT) && cell_area_border.x1 > obj->coords.x1 + bg_left) {
 8017a00:	f89d e0e3 	ldrb.w	lr, [sp, #227]	; 0xe3
    dest->x1 = src->x1;
 8017a04:	f9bd c060 	ldrsh.w	ip, [sp, #96]	; 0x60
    dest->y1 = src->y1;
 8017a08:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 8017a0c:	f01e 0f08 	tst.w	lr, #8
    dest->x2 = src->x2;
 8017a10:	f9bd 0064 	ldrsh.w	r0, [sp, #100]	; 0x64
 8017a14:	f3ce 0944 	ubfx	r9, lr, #1, #5
    dest->x1 = src->x1;
 8017a18:	f8ad c068 	strh.w	ip, [sp, #104]	; 0x68
    dest->y1 = src->y1;
 8017a1c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    dest->x2 = src->x2;
 8017a20:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
    dest->y2 = src->y2;
 8017a24:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
 8017a28:	d00d      	beq.n	8017a46 <draw_main+0x272>
 8017a2a:	f9b4 e014 	ldrsh.w	lr, [r4, #20]
 8017a2e:	9908      	ldr	r1, [sp, #32]
 8017a30:	448e      	add	lr, r1
 8017a32:	45f4      	cmp	ip, lr
                cell_area_border.x1 -= rect_dsc_def.border_width / 2;
 8017a34:	bfc1      	itttt	gt
 8017a36:	f9bd e0e0 	ldrshgt.w	lr, [sp, #224]	; 0xe0
 8017a3a:	eb0e 7ede 	addgt.w	lr, lr, lr, lsr #31
 8017a3e:	ebac 0c6e 	subgt.w	ip, ip, lr, asr #1
 8017a42:	f8ad c068 	strhgt.w	ip, [sp, #104]	; 0x68
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_TOP) && cell_area_border.y1 > obj->coords.y1 + bg_top) {
 8017a46:	f019 0f02 	tst.w	r9, #2
 8017a4a:	d00d      	beq.n	8017a68 <draw_main+0x294>
 8017a4c:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 8017a50:	9907      	ldr	r1, [sp, #28]
 8017a52:	448c      	add	ip, r1
 8017a54:	4563      	cmp	r3, ip
                cell_area_border.y1 -= rect_dsc_def.border_width / 2;
 8017a56:	bfc1      	itttt	gt
 8017a58:	f9bd c0e0 	ldrshgt.w	ip, [sp, #224]	; 0xe0
 8017a5c:	eb0c 7cdc 	addgt.w	ip, ip, ip, lsr #31
 8017a60:	eba3 036c 	subgt.w	r3, r3, ip, asr #1
 8017a64:	f8ad 306a 	strhgt.w	r3, [sp, #106]	; 0x6a
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_RIGHT) && cell_area_border.x2 < obj->coords.x2 - bg_right - 1) {
 8017a68:	f019 0f08 	tst.w	r9, #8
 8017a6c:	d011      	beq.n	8017a92 <draw_main+0x2be>
 8017a6e:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8017a72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017a74:	1a5b      	subs	r3, r3, r1
 8017a76:	3b01      	subs	r3, #1
 8017a78:	4298      	cmp	r0, r3
 8017a7a:	da0a      	bge.n	8017a92 <draw_main+0x2be>
                cell_area_border.x2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 8017a7c:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8017a80:	eb03 7cd3 	add.w	ip, r3, r3, lsr #31
 8017a84:	f003 0301 	and.w	r3, r3, #1
 8017a88:	eb03 036c 	add.w	r3, r3, ip, asr #1
 8017a8c:	4403      	add	r3, r0
 8017a8e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 8017a92:	f019 0f01 	tst.w	r9, #1
 8017a96:	d011      	beq.n	8017abc <draw_main+0x2e8>
               cell_area_border.y2 < obj->coords.y2 - bg_bottom - 1) {
 8017a98:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8017a9c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017a9e:	1a5b      	subs	r3, r3, r1
 8017aa0:	3b01      	subs	r3, #1
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 8017aa2:	429a      	cmp	r2, r3
 8017aa4:	da0a      	bge.n	8017abc <draw_main+0x2e8>
                cell_area_border.y2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 8017aa6:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8017aaa:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 8017aae:	f003 0301 	and.w	r3, r3, #1
 8017ab2:	eb03 0361 	add.w	r3, r3, r1, asr #1
 8017ab6:	4413      	add	r3, r2
 8017ab8:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            if(row == table->row_act && col == table->col_act) {
 8017abc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017abe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017ac0:	4293      	cmp	r3, r2
 8017ac2:	d146      	bne.n	8017b52 <draw_main+0x37e>
 8017ac4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017ac6:	4543      	cmp	r3, r8
 8017ac8:	d143      	bne.n	8017b52 <draw_main+0x37e>
                if(!(obj->state & LV_STATE_SCROLLED) && (obj->state & LV_STATE_PRESSED)) cell_state |= LV_STATE_PRESSED;
 8017aca:	8c22      	ldrh	r2, [r4, #32]
 8017acc:	f002 0360 	and.w	r3, r2, #96	; 0x60
 8017ad0:	f002 0004 	and.w	r0, r2, #4
 8017ad4:	f1a3 0120 	sub.w	r1, r3, #32
 8017ad8:	424b      	negs	r3, r1
 8017ada:	414b      	adcs	r3, r1
 8017adc:	f002 0108 	and.w	r1, r2, #8
                if(obj->state & LV_STATE_FOCUSED) cell_state |= LV_STATE_FOCUSED;
 8017ae0:	0792      	lsls	r2, r2, #30
                if(!(obj->state & LV_STATE_SCROLLED) && (obj->state & LV_STATE_PRESSED)) cell_state |= LV_STATE_PRESSED;
 8017ae2:	ea4f 1343 	mov.w	r3, r3, lsl #5
                if(obj->state & LV_STATE_FOCUSED) cell_state |= LV_STATE_FOCUSED;
 8017ae6:	d529      	bpl.n	8017b3c <draw_main+0x368>
 8017ae8:	f043 0302 	orr.w	r3, r3, #2
                if(obj->state & LV_STATE_FOCUS_KEY) cell_state |= LV_STATE_FOCUS_KEY;
 8017aec:	bb38      	cbnz	r0, 8017b3e <draw_main+0x36a>
                if(obj->state & LV_STATE_EDITED) cell_state |= LV_STATE_EDITED;
 8017aee:	bb51      	cbnz	r1, 8017b46 <draw_main+0x372>
                obj->state = cell_state;
 8017af0:	8423      	strh	r3, [r4, #32]
                lv_draw_rect_dsc_init(&rect_dsc_act);
 8017af2:	a83e      	add	r0, sp, #248	; 0xf8
                obj->skip_trans = 1;
 8017af4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8017af8:	f043 0304 	orr.w	r3, r3, #4
 8017afc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
                lv_draw_rect_dsc_init(&rect_dsc_act);
 8017b00:	f7f0 ff50 	bl	80089a4 <lv_draw_rect_dsc_init>
                lv_draw_label_dsc_init(&label_dsc_act);
 8017b04:	a828      	add	r0, sp, #160	; 0xa0
 8017b06:	f7f0 f903 	bl	8007d10 <lv_draw_label_dsc_init>
                lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_act);
 8017b0a:	aa3e      	add	r2, sp, #248	; 0xf8
 8017b0c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8017b10:	4620      	mov	r0, r4
 8017b12:	f004 f9f1 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
                lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_act);
 8017b16:	aa28      	add	r2, sp, #160	; 0xa0
 8017b18:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8017b1c:	4620      	mov	r0, r4
 8017b1e:	f004 fb3a 	bl	801c196 <lv_obj_init_draw_label_dsc>
                obj->state = state_ori;
 8017b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b24:	8423      	strh	r3, [r4, #32]
                obj->skip_trans = 0;
 8017b26:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8017b2a:	f36f 0382 	bfc	r3, #2, #1
 8017b2e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8017b32:	e018      	b.n	8017b66 <draw_main+0x392>
 8017b34:	fffb0000 	.word	0xfffb0000
 8017b38:	08029aec 	.word	0x08029aec
                if(obj->state & LV_STATE_FOCUS_KEY) cell_state |= LV_STATE_FOCUS_KEY;
 8017b3c:	b110      	cbz	r0, 8017b44 <draw_main+0x370>
 8017b3e:	f043 0304 	orr.w	r3, r3, #4
 8017b42:	e7d4      	b.n	8017aee <draw_main+0x31a>
                if(obj->state & LV_STATE_EDITED) cell_state |= LV_STATE_EDITED;
 8017b44:	b111      	cbz	r1, 8017b4c <draw_main+0x378>
 8017b46:	f043 0308 	orr.w	r3, r3, #8
            if(cell_state == LV_STATE_DEFAULT) {
 8017b4a:	e7d1      	b.n	8017af0 <draw_main+0x31c>
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	f040 80a1 	bne.w	8017c94 <draw_main+0x4c0>
 8017b52:	2238      	movs	r2, #56	; 0x38
 8017b54:	a930      	add	r1, sp, #192	; 0xc0
 8017b56:	a83e      	add	r0, sp, #248	; 0xf8
 8017b58:	f002 fe0b 	bl	801a772 <memcpy>
 8017b5c:	2220      	movs	r2, #32
 8017b5e:	a920      	add	r1, sp, #128	; 0x80
 8017b60:	a828      	add	r0, sp, #160	; 0xa0
 8017b62:	f002 fe06 	bl	801a772 <memcpy>
            part_draw_dsc.id = row * table->col_cnt + col;
 8017b66:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
            part_draw_dsc.draw_area = &cell_area_border;
 8017b68:	f10d 0968 	add.w	r9, sp, #104	; 0x68
            part_draw_dsc.id = row * table->col_cnt + col;
 8017b6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017b6e:	211a      	movs	r1, #26
 8017b70:	4620      	mov	r0, r4
            part_draw_dsc.draw_area = &cell_area_border;
 8017b72:	f8cd 913c 	str.w	r9, [sp, #316]	; 0x13c
            part_draw_dsc.id = row * table->col_cnt + col;
 8017b76:	fb02 8303 	mla	r3, r2, r3, r8
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017b7a:	aa4c      	add	r2, sp, #304	; 0x130
            part_draw_dsc.id = row * table->col_cnt + col;
 8017b7c:	935a      	str	r3, [sp, #360]	; 0x168
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017b7e:	f7ec fde1 	bl	8004744 <lv_event_send>
            lv_draw_rect(draw_ctx, &rect_dsc_act, &cell_area_border);
 8017b82:	464a      	mov	r2, r9
 8017b84:	a93e      	add	r1, sp, #248	; 0xf8
 8017b86:	4628      	mov	r0, r5
 8017b88:	f007 fc41 	bl	801f40e <lv_draw_rect>
            if(table->cell_data[cell]) {
 8017b8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017b8e:	9a04      	ldr	r2, [sp, #16]
 8017b90:	589b      	ldr	r3, [r3, r2]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d06f      	beq.n	8017c76 <draw_main+0x4a2>
                const lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 8017b96:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8017b9a:	4620      	mov	r0, r4
 8017b9c:	f00f fd14 	bl	80275c8 <lv_obj_get_style_pad_left>
                const lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 8017ba0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
                const lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 8017ba4:	4681      	mov	r9, r0
                const lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 8017ba6:	4620      	mov	r0, r4
 8017ba8:	f00f fd14 	bl	80275d4 <lv_obj_get_style_pad_right>
                const lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 8017bac:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
                const lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 8017bb0:	9013      	str	r0, [sp, #76]	; 0x4c
                const lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	f00f fd14 	bl	80275e0 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017bb8:	2211      	movs	r2, #17
 8017bba:	4683      	mov	fp, r0
 8017bbc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8017bc0:	4620      	mov	r0, r4
 8017bc2:	f005 ff91 	bl	801dae8 <lv_obj_get_style_prop>
                txt_area.x1 = cell_area.x1 + cell_left;
 8017bc6:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
                txt_area.x2 = cell_area.x2 - cell_right;
 8017bca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
                txt_area.x1 = cell_area.x1 + cell_left;
 8017bcc:	4491      	add	r9, r2
                txt_area.x2 = cell_area.x2 - cell_right;
 8017bce:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 8017bd2:	9904      	ldr	r1, [sp, #16]
                txt_area.x2 = cell_area.x2 - cell_right;
 8017bd4:	1ad3      	subs	r3, r2, r3
                txt_area.y1 = cell_area.y1 + cell_top;
 8017bd6:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
                txt_area.x1 = cell_area.x1 + cell_left;
 8017bda:	fa1f f989 	uxth.w	r9, r9
                txt_area.x2 = cell_area.x2 - cell_right;
 8017bde:	b29b      	uxth	r3, r3
                txt_area.y1 = cell_area.y1 + cell_top;
 8017be0:	4493      	add	fp, r2
                txt_area.y2 = cell_area.y2 - cell_bottom;
 8017be2:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
                txt_area.x2 = cell_area.x2 - cell_right;
 8017be6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8017bea:	3301      	adds	r3, #1
                txt_area.y2 = cell_area.y2 - cell_bottom;
 8017bec:	1a12      	subs	r2, r2, r0
                txt_area.y1 = cell_area.y1 + cell_top;
 8017bee:	f8ad b072 	strh.w	fp, [sp, #114]	; 0x72
 8017bf2:	eba3 0309 	sub.w	r3, r3, r9
                bool crop = ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP ? true : false;
 8017bf6:	f3c6 0b40 	ubfx	fp, r6, #1, #1
                txt_area.y2 = cell_area.y2 - cell_bottom;
 8017bfa:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 8017bfe:	f006 0602 	and.w	r6, r6, #2
 8017c02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017c04:	b21b      	sxth	r3, r3
                txt_area.x1 = cell_area.x1 + cell_left;
 8017c06:	f8ad 9070 	strh.w	r9, [sp, #112]	; 0x70
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 8017c0a:	a815      	add	r0, sp, #84	; 0x54
 8017c0c:	5851      	ldr	r1, [r2, r1]
 8017c0e:	9301      	str	r3, [sp, #4]
 8017c10:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 8017c14:	3101      	adds	r1, #1
 8017c16:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017c18:	9300      	str	r3, [sp, #0]
 8017c1a:	9602      	str	r6, [sp, #8]
 8017c1c:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 8017c20:	f00d fe3e 	bl	80258a0 <lv_txt_get_size>
                if(!crop) {
 8017c24:	f1bb 0f00 	cmp.w	fp, #0
 8017c28:	d110      	bne.n	8017c4c <draw_main+0x478>
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 8017c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017c2c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8017c30:	4413      	add	r3, r2
 8017c32:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 8017c36:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8017c3a:	b29b      	uxth	r3, r3
 8017c3c:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8017c40:	1a99      	subs	r1, r3, r2
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 8017c42:	4413      	add	r3, r2
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 8017c44:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 8017c48:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                label_mask_ok = _lv_area_intersect(&label_clip_area, &clip_area, &cell_area);
 8017c4c:	ae1e      	add	r6, sp, #120	; 0x78
 8017c4e:	aa18      	add	r2, sp, #96	; 0x60
 8017c50:	a916      	add	r1, sp, #88	; 0x58
 8017c52:	4630      	mov	r0, r6
 8017c54:	f00c fb41 	bl	80242da <_lv_area_intersect>
                if(label_mask_ok) {
 8017c58:	b168      	cbz	r0, 8017c76 <draw_main+0x4a2>
                    draw_ctx->clip_area = &label_clip_area;
 8017c5a:	60ae      	str	r6, [r5, #8]
                    lv_draw_label(draw_ctx, &label_dsc_act, &txt_area, table->cell_data[cell] + 1, NULL);
 8017c5c:	a928      	add	r1, sp, #160	; 0xa0
 8017c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017c60:	4628      	mov	r0, r5
 8017c62:	9a04      	ldr	r2, [sp, #16]
 8017c64:	589b      	ldr	r3, [r3, r2]
 8017c66:	2200      	movs	r2, #0
 8017c68:	3301      	adds	r3, #1
 8017c6a:	9200      	str	r2, [sp, #0]
 8017c6c:	aa1c      	add	r2, sp, #112	; 0x70
 8017c6e:	f7f0 f867 	bl	8007d40 <lv_draw_label>
                    draw_ctx->clip_area = &clip_area;
 8017c72:	ab16      	add	r3, sp, #88	; 0x58
 8017c74:	60ab      	str	r3, [r5, #8]
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8017c76:	aa4c      	add	r2, sp, #304	; 0x130
 8017c78:	211b      	movs	r1, #27
 8017c7a:	4620      	mov	r0, r4
 8017c7c:	f7ec fd62 	bl	8004744 <lv_event_send>
        for(col = 0; col < table->col_cnt; col++) {
 8017c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c82:	4443      	add	r3, r8
 8017c84:	fa1f f883 	uxth.w	r8, r3
 8017c88:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8017c8a:	4542      	cmp	r2, r8
 8017c8c:	f63f ae60 	bhi.w	8017950 <draw_main+0x17c>
    for(row = 0; row < table->row_cnt; row++) {
 8017c90:	3701      	adds	r7, #1
 8017c92:	e620      	b.n	80178d6 <draw_main+0x102>
 8017c94:	2320      	movs	r3, #32
 8017c96:	e72b      	b.n	8017af0 <draw_main+0x31c>

08017c98 <lv_table_event>:
{
 8017c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8017c9a:	48a6      	ldr	r0, [pc, #664]	; (8017f34 <lv_table_event+0x29c>)
{
 8017c9c:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8017c9e:	f003 fac6 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8017ca2:	2801      	cmp	r0, #1
 8017ca4:	d135      	bne.n	8017d12 <lv_table_event+0x7a>
    lv_event_code_t code = lv_event_get_code(e);
 8017ca6:	4630      	mov	r0, r6
 8017ca8:	f003 fadb 	bl	801b262 <lv_event_get_code>
 8017cac:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8017cae:	4630      	mov	r0, r6
 8017cb0:	f003 fad3 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 8017cb4:	2d2a      	cmp	r5, #42	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 8017cb6:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8017cb8:	d104      	bne.n	8017cc4 <lv_table_event+0x2c>
}
 8017cba:	b003      	add	sp, #12
 8017cbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        refr_size_form_row(obj, 0);
 8017cc0:	f00f bdf3 	b.w	80278aa <refr_size_form_row.constprop.0>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8017cc4:	2d0e      	cmp	r5, #14
 8017cc6:	d80c      	bhi.n	8017ce2 <lv_table_event+0x4a>
 8017cc8:	b31d      	cbz	r5, 8017d12 <lv_table_event+0x7a>
 8017cca:	3d01      	subs	r5, #1
 8017ccc:	2d0d      	cmp	r5, #13
 8017cce:	d820      	bhi.n	8017d12 <lv_table_event+0x7a>
 8017cd0:	e8df f005 	tbb	[pc, r5]
 8017cd4:	1f1f2f2f 	.word	0x1f1f2f2f
 8017cd8:	961f1f1f 	.word	0x961f1f1f
 8017cdc:	1f1f1f1f 	.word	0x1f1f1f1f
 8017ce0:	86bc      	.short	0x86bc
 8017ce2:	2d15      	cmp	r5, #21
 8017ce4:	f000 8134 	beq.w	8017f50 <lv_table_event+0x2b8>
 8017ce8:	2d2c      	cmp	r5, #44	; 0x2c
 8017cea:	d112      	bne.n	8017d12 <lv_table_event+0x7a>
        lv_point_t * p = lv_event_get_param(e);
 8017cec:	4630      	mov	r0, r6
 8017cee:	f003 fabc 	bl	801b26a <lv_event_get_param>
        lv_coord_t w = 0;
 8017cf2:	2300      	movs	r3, #0
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 8017cf4:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
 8017cf6:	4619      	mov	r1, r3
 8017cf8:	42a9      	cmp	r1, r5
 8017cfa:	b29a      	uxth	r2, r3
 8017cfc:	d30b      	bcc.n	8017d16 <lv_table_event+0x7e>
        lv_coord_t h = 0;
 8017cfe:	2300      	movs	r3, #0
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 8017d00:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 8017d02:	4619      	mov	r1, r3
 8017d04:	42a9      	cmp	r1, r5
 8017d06:	b29b      	uxth	r3, r3
 8017d08:	d30c      	bcc.n	8017d24 <lv_table_event+0x8c>
        p->x = w - 1;
 8017d0a:	3a01      	subs	r2, #1
        p->y = h - 1;
 8017d0c:	3b01      	subs	r3, #1
        p->x = w - 1;
 8017d0e:	8002      	strh	r2, [r0, #0]
        p->y = h - 1;
 8017d10:	8043      	strh	r3, [r0, #2]
}
 8017d12:	b003      	add	sp, #12
 8017d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 8017d16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017d18:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8017d1c:	3101      	adds	r1, #1
 8017d1e:	4413      	add	r3, r2
 8017d20:	b21b      	sxth	r3, r3
 8017d22:	e7e9      	b.n	8017cf8 <lv_table_event+0x60>
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 8017d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d26:	f836 6011 	ldrh.w	r6, [r6, r1, lsl #1]
 8017d2a:	3101      	adds	r1, #1
 8017d2c:	4433      	add	r3, r6
 8017d2e:	b21b      	sxth	r3, r3
 8017d30:	e7e8      	b.n	8017d04 <lv_table_event+0x6c>

static lv_res_t get_pressed_cell(lv_obj_t * obj, uint16_t * row, uint16_t * col)
{
    lv_table_t * table = (lv_table_t *)obj;

    lv_indev_type_t type = lv_indev_get_type(lv_indev_get_act());
 8017d32:	f7ec fd6d 	bl	8004810 <lv_indev_get_act>
 8017d36:	f003 fc54 	bl	801b5e2 <lv_indev_get_type>
    if(type != LV_INDEV_TYPE_POINTER && type != LV_INDEV_TYPE_BUTTON) {
 8017d3a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8017d3e:	2801      	cmp	r0, #1
 8017d40:	d1e7      	bne.n	8017d12 <lv_table_event+0x7a>
        if(row) *row = LV_TABLE_CELL_NONE;
        return LV_RES_INV;
    }

    lv_point_t p;
    lv_indev_get_point(lv_indev_get_act(), &p);
 8017d42:	f7ec fd65 	bl	8004810 <lv_indev_get_act>
 8017d46:	a901      	add	r1, sp, #4
 8017d48:	f003 fc5c 	bl	801b604 <lv_indev_get_point>

    lv_coord_t tmp;
    if(col) {
        lv_coord_t x = p.x + lv_obj_get_scroll_x(obj);
 8017d4c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8017d50:	4620      	mov	r0, r4
 8017d52:	f005 f936 	bl	801cfc2 <lv_obj_get_scroll_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8017d56:	2216      	movs	r2, #22
 8017d58:	4405      	add	r5, r0
 8017d5a:	2100      	movs	r1, #0
 8017d5c:	4620      	mov	r0, r4
 8017d5e:	f005 fec3 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8017d62:	b2c0      	uxtb	r0, r0
 8017d64:	b2ad      	uxth	r5, r5

        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8017d66:	2801      	cmp	r0, #1
 8017d68:	d140      	bne.n	8017dec <lv_table_event+0x154>
            x = obj->coords.x2 - lv_obj_get_style_pad_right(obj, LV_PART_MAIN) - x;
 8017d6a:	8b26      	ldrh	r6, [r4, #24]
 8017d6c:	2100      	movs	r1, #0
 8017d6e:	4620      	mov	r0, r4
 8017d70:	1b76      	subs	r6, r6, r5
 8017d72:	f00f fc2f 	bl	80275d4 <lv_obj_get_style_pad_right>
 8017d76:	1a36      	subs	r6, r6, r0
 8017d78:	b230      	sxth	r0, r6
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
        }

        *col = 0;
        tmp = 0;
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
        tmp = 0;
 8017d7e:	461a      	mov	r2, r3
 8017d80:	b29e      	uxth	r6, r3
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 8017d82:	42b1      	cmp	r1, r6
 8017d84:	d907      	bls.n	8017d96 <lv_table_event+0xfe>
            tmp += table->col_w[*col];
 8017d86:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017d88:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
            if(x < tmp) break;
 8017d8c:	3301      	adds	r3, #1
            tmp += table->col_w[*col];
 8017d8e:	442a      	add	r2, r5
 8017d90:	b212      	sxth	r2, r2
            if(x < tmp) break;
 8017d92:	4282      	cmp	r2, r0
 8017d94:	ddf4      	ble.n	8017d80 <lv_table_event+0xe8>
        }
    }

    if(row) {
        lv_coord_t y = p.y + lv_obj_get_scroll_y(obj);;
 8017d96:	4620      	mov	r0, r4
 8017d98:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8017d9c:	f005 f917 	bl	801cfce <lv_obj_get_scroll_y>
        y -= obj->coords.y1;
 8017da0:	8ae3      	ldrh	r3, [r4, #22]
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8017da2:	2100      	movs	r1, #0
        y -= obj->coords.y1;
 8017da4:	1aed      	subs	r5, r5, r3
 8017da6:	4405      	add	r5, r0
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8017da8:	4620      	mov	r0, r4
 8017daa:	f00f fc19 	bl	80275e0 <lv_obj_get_style_pad_top>

        *row = 0;
        tmp = 0;

        for(*row = 0; *row < table->row_cnt; (*row)++) {
 8017dae:	2300      	movs	r3, #0
        y -= obj->coords.y1;
 8017db0:	b2ad      	uxth	r5, r5
        tmp = 0;
 8017db2:	461a      	mov	r2, r3
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8017db4:	1a2d      	subs	r5, r5, r0
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 8017db6:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8017db8:	b22d      	sxth	r5, r5
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 8017dba:	b299      	uxth	r1, r3
 8017dbc:	4288      	cmp	r0, r1
 8017dbe:	d907      	bls.n	8017dd0 <lv_table_event+0x138>
            tmp += table->row_h[*row];
 8017dc0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8017dc2:	f837 7013 	ldrh.w	r7, [r7, r3, lsl #1]
            if(y < tmp) break;
 8017dc6:	3301      	adds	r3, #1
            tmp += table->row_h[*row];
 8017dc8:	443a      	add	r2, r7
 8017dca:	b212      	sxth	r2, r2
            if(y < tmp) break;
 8017dcc:	4295      	cmp	r5, r2
 8017dce:	daf4      	bge.n	8017dba <lv_table_event+0x122>
        if(pr_res == LV_RES_OK && (table->col_act != col || table->row_act != row)) {
 8017dd0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017dd2:	42b3      	cmp	r3, r6
 8017dd4:	d102      	bne.n	8017ddc <lv_table_event+0x144>
 8017dd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017dd8:	428b      	cmp	r3, r1
 8017dda:	d09a      	beq.n	8017d12 <lv_table_event+0x7a>
            table->col_act = col;
 8017ddc:	86a6      	strh	r6, [r4, #52]	; 0x34
            table->row_act = row;
 8017dde:	86e1      	strh	r1, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 8017de0:	4620      	mov	r0, r4
}
 8017de2:	b003      	add	sp, #12
 8017de4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_invalidate(obj);
 8017de8:	f004 bf58 	b.w	801cc9c <lv_obj_invalidate>
            x -= obj->coords.x1;
 8017dec:	8aa3      	ldrh	r3, [r4, #20]
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8017dee:	2100      	movs	r1, #0
 8017df0:	4620      	mov	r0, r4
            x -= obj->coords.x1;
 8017df2:	1aed      	subs	r5, r5, r3
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8017df4:	f00f fbe8 	bl	80275c8 <lv_obj_get_style_pad_left>
            x -= obj->coords.x1;
 8017df8:	b2ad      	uxth	r5, r5
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8017dfa:	1a28      	subs	r0, r5, r0
 8017dfc:	b200      	sxth	r0, r0
 8017dfe:	e7bc      	b.n	8017d7a <lv_table_event+0xe2>
        lv_obj_invalidate(obj);
 8017e00:	f004 ff4c 	bl	801cc9c <lv_obj_invalidate>
        lv_indev_t * indev = lv_indev_get_act();
 8017e04:	f7ec fd04 	bl	8004810 <lv_indev_get_act>
        lv_obj_t * scroll_obj = lv_indev_get_scroll_obj(indev);
 8017e08:	f003 fc20 	bl	801b64c <lv_indev_get_scroll_obj>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 8017e0c:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8017e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
        lv_obj_t * scroll_obj = lv_indev_get_scroll_obj(indev);
 8017e12:	4602      	mov	r2, r0
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 8017e14:	4299      	cmp	r1, r3
 8017e16:	d10c      	bne.n	8017e32 <lv_table_event+0x19a>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8017e18:	f7ec fcfa 	bl	8004810 <lv_indev_get_act>
 8017e1c:	f003 fbe1 	bl	801b5e2 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 8017e20:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8017e24:	2801      	cmp	r0, #1
 8017e26:	f47f af74 	bne.w	8017d12 <lv_table_event+0x7a>
            table->col_act = LV_TABLE_CELL_NONE;
 8017e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8017e2e:	6363      	str	r3, [r4, #52]	; 0x34
 8017e30:	e76f      	b.n	8017d12 <lv_table_event+0x7a>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 8017e32:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8017e34:	4299      	cmp	r1, r3
 8017e36:	d0ef      	beq.n	8017e18 <lv_table_event+0x180>
 8017e38:	2800      	cmp	r0, #0
 8017e3a:	d1ed      	bne.n	8017e18 <lv_table_event+0x180>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8017e3c:	211c      	movs	r1, #28
 8017e3e:	4620      	mov	r0, r4
 8017e40:	f7ec fc80 	bl	8004744 <lv_event_send>
            if(res != LV_RES_OK) return;
 8017e44:	2801      	cmp	r0, #1
 8017e46:	f47f af64 	bne.w	8017d12 <lv_table_event+0x7a>
 8017e4a:	e7e5      	b.n	8017e18 <lv_table_event+0x180>
        int32_t c = *((int32_t *)lv_event_get_param(e));
 8017e4c:	4630      	mov	r0, r6
 8017e4e:	f003 fa0c 	bl	801b26a <lv_event_get_param>
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 8017e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
        int32_t c = *((int32_t *)lv_event_get_param(e));
 8017e56:	6806      	ldr	r6, [r0, #0]
        int32_t col = table->col_act;
 8017e58:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
        int32_t row = table->row_act;
 8017e5a:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 8017e5c:	4298      	cmp	r0, r3
 8017e5e:	d001      	beq.n	8017e64 <lv_table_event+0x1cc>
 8017e60:	4299      	cmp	r1, r3
 8017e62:	d105      	bne.n	8017e70 <lv_table_event+0x1d8>
            table->col_act = 0;
 8017e64:	2300      	movs	r3, #0
            scroll_to_selected_cell(obj);
 8017e66:	4620      	mov	r0, r4
            table->col_act = 0;
 8017e68:	6363      	str	r3, [r4, #52]	; 0x34
            scroll_to_selected_cell(obj);
 8017e6a:	f00f fce4 	bl	8027836 <scroll_to_selected_cell>
 8017e6e:	e7b7      	b.n	8017de0 <lv_table_event+0x148>
        if(col >= table->col_cnt) col = 0;
 8017e70:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
 8017e72:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
 8017e74:	42a8      	cmp	r0, r5
 8017e76:	d306      	bcc.n	8017e86 <lv_table_event+0x1ee>
        if(row >= table->row_cnt) row = 0;
 8017e78:	428f      	cmp	r7, r1
 8017e7a:	d82f      	bhi.n	8017edc <lv_table_event+0x244>
        if(c == LV_KEY_LEFT) col--;
 8017e7c:	2e14      	cmp	r6, #20
 8017e7e:	d060      	beq.n	8017f42 <lv_table_event+0x2aa>
        if(col >= table->col_cnt) col = 0;
 8017e80:	2200      	movs	r2, #0
        if(row >= table->row_cnt) row = 0;
 8017e82:	2300      	movs	r3, #0
 8017e84:	e02e      	b.n	8017ee4 <lv_table_event+0x24c>
 8017e86:	42b9      	cmp	r1, r7
 8017e88:	d337      	bcc.n	8017efa <lv_table_event+0x262>
        if(c == LV_KEY_LEFT) col--;
 8017e8a:	2e14      	cmp	r6, #20
 8017e8c:	d143      	bne.n	8017f16 <lv_table_event+0x27e>
 8017e8e:	1e42      	subs	r2, r0, #1
        if(col >= table->col_cnt) {
 8017e90:	42aa      	cmp	r2, r5
 8017e92:	db04      	blt.n	8017e9e <lv_table_event+0x206>
            if(row < table->row_cnt - 1) {
 8017e94:	2f01      	cmp	r7, #1
 8017e96:	dc58      	bgt.n	8017f4a <lv_table_event+0x2b2>
        if(row >= table->row_cnt) row = 0;
 8017e98:	2300      	movs	r3, #0
                col = table->col_cnt - 1;
 8017e9a:	1e6a      	subs	r2, r5, #1
 8017e9c:	e003      	b.n	8017ea6 <lv_table_event+0x20e>
        else if(col < 0) {
 8017e9e:	1c55      	adds	r5, r2, #1
 8017ea0:	f04f 0300 	mov.w	r3, #0
 8017ea4:	d027      	beq.n	8017ef6 <lv_table_event+0x25e>
        if(row >= table->row_cnt) {
 8017ea6:	42bb      	cmp	r3, r7
            row = table->row_cnt - 1;
 8017ea8:	bfac      	ite	ge
 8017eaa:	f107 33ff 	addge.w	r3, r7, #4294967295
        else if(row < 0) {
 8017eae:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
        if(table->col_act != col || table->row_act != row) {
 8017eb2:	4290      	cmp	r0, r2
 8017eb4:	d102      	bne.n	8017ebc <lv_table_event+0x224>
 8017eb6:	4299      	cmp	r1, r3
 8017eb8:	f43f af2b 	beq.w	8017d12 <lv_table_event+0x7a>
            table->col_act = col;
 8017ebc:	86a2      	strh	r2, [r4, #52]	; 0x34
            lv_obj_invalidate(obj);
 8017ebe:	4620      	mov	r0, r4
            table->row_act = row;
 8017ec0:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 8017ec2:	f004 feeb 	bl	801cc9c <lv_obj_invalidate>
            scroll_to_selected_cell(obj);
 8017ec6:	4620      	mov	r0, r4
 8017ec8:	f00f fcb5 	bl	8027836 <scroll_to_selected_cell>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8017ecc:	2200      	movs	r2, #0
 8017ece:	211c      	movs	r1, #28
 8017ed0:	4620      	mov	r0, r4
}
 8017ed2:	b003      	add	sp, #12
 8017ed4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8017ed8:	f7ec bc34 	b.w	8004744 <lv_event_send>
        if(c == LV_KEY_LEFT) col--;
 8017edc:	2e14      	cmp	r6, #20
 8017ede:	d013      	beq.n	8017f08 <lv_table_event+0x270>
 8017ee0:	460b      	mov	r3, r1
        if(col >= table->col_cnt) col = 0;
 8017ee2:	2200      	movs	r2, #0
        else if(c == LV_KEY_RIGHT) col++;
 8017ee4:	2e13      	cmp	r6, #19
 8017ee6:	d11b      	bne.n	8017f20 <lv_table_event+0x288>
 8017ee8:	3201      	adds	r2, #1
        if(col >= table->col_cnt) {
 8017eea:	4295      	cmp	r5, r2
 8017eec:	dcdb      	bgt.n	8017ea6 <lv_table_event+0x20e>
            if(row < table->row_cnt - 1) {
 8017eee:	1e7a      	subs	r2, r7, #1
 8017ef0:	429a      	cmp	r2, r3
 8017ef2:	ddd2      	ble.n	8017e9a <lv_table_event+0x202>
                row++;
 8017ef4:	3301      	adds	r3, #1
                col = 0;
 8017ef6:	2200      	movs	r2, #0
 8017ef8:	e7d5      	b.n	8017ea6 <lv_table_event+0x20e>
        if(c == LV_KEY_LEFT) col--;
 8017efa:	2e14      	cmp	r6, #20
 8017efc:	d10d      	bne.n	8017f1a <lv_table_event+0x282>
 8017efe:	1e42      	subs	r2, r0, #1
        if(col >= table->col_cnt) {
 8017f00:	4295      	cmp	r5, r2
 8017f02:	dd19      	ble.n	8017f38 <lv_table_event+0x2a0>
        else if(col < 0) {
 8017f04:	1c53      	adds	r3, r2, #1
 8017f06:	d11e      	bne.n	8017f46 <lv_table_event+0x2ae>
            if(row != 0) {
 8017f08:	b9c1      	cbnz	r1, 8017f3c <lv_table_event+0x2a4>
        if(table->col_act != col || table->row_act != row) {
 8017f0a:	2800      	cmp	r0, #0
 8017f0c:	f43f af01 	beq.w	8017d12 <lv_table_event+0x7a>
        else if(row < 0) {
 8017f10:	460b      	mov	r3, r1
                col = 0;
 8017f12:	460a      	mov	r2, r1
 8017f14:	e7d2      	b.n	8017ebc <lv_table_event+0x224>
        if(c == LV_KEY_LEFT) col--;
 8017f16:	4602      	mov	r2, r0
 8017f18:	e7b3      	b.n	8017e82 <lv_table_event+0x1ea>
 8017f1a:	4602      	mov	r2, r0
 8017f1c:	460b      	mov	r3, r1
 8017f1e:	e7e1      	b.n	8017ee4 <lv_table_event+0x24c>
        else if(c == LV_KEY_UP) row--;
 8017f20:	2e11      	cmp	r6, #17
 8017f22:	d101      	bne.n	8017f28 <lv_table_event+0x290>
 8017f24:	3b01      	subs	r3, #1
 8017f26:	e7e0      	b.n	8017eea <lv_table_event+0x252>
        else if(c == LV_KEY_DOWN) row++;
 8017f28:	2e12      	cmp	r6, #18
 8017f2a:	f47f aef2 	bne.w	8017d12 <lv_table_event+0x7a>
 8017f2e:	3301      	adds	r3, #1
        if(col >= table->col_cnt) {
 8017f30:	e7db      	b.n	8017eea <lv_table_event+0x252>
 8017f32:	bf00      	nop
 8017f34:	08029aec 	.word	0x08029aec
 8017f38:	460b      	mov	r3, r1
 8017f3a:	e7d8      	b.n	8017eee <lv_table_event+0x256>
                col = table->col_cnt - 1;
 8017f3c:	1e6a      	subs	r2, r5, #1
                row--;
 8017f3e:	1e4b      	subs	r3, r1, #1
 8017f40:	e7b1      	b.n	8017ea6 <lv_table_event+0x20e>
        if(c == LV_KEY_LEFT) col--;
 8017f42:	2300      	movs	r3, #0
 8017f44:	e7d7      	b.n	8017ef6 <lv_table_event+0x25e>
 8017f46:	460b      	mov	r3, r1
 8017f48:	e7ad      	b.n	8017ea6 <lv_table_event+0x20e>
        else if(row < 0) {
 8017f4a:	2301      	movs	r3, #1
                col = 0;
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	e7b5      	b.n	8017ebc <lv_table_event+0x224>
        draw_main(e);
 8017f50:	4630      	mov	r0, r6
}
 8017f52:	b003      	add	sp, #12
 8017f54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        draw_main(e);
 8017f58:	f7ff bc3c 	b.w	80177d4 <draw_main>

08017f5c <start_cursor_blink>:

    return false; /*The character wasn't in the list*/
}

static void start_cursor_blink(lv_obj_t * obj)
{
 8017f5c:	b530      	push	{r4, r5, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 8017f5e:	2264      	movs	r2, #100	; 0x64
 8017f60:	b093      	sub	sp, #76	; 0x4c
 8017f62:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8017f66:	4604      	mov	r4, r0
 8017f68:	f005 fdbe 	bl	801dae8 <lv_obj_get_style_prop>
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    uint32_t blink_time = lv_obj_get_style_anim_time(obj, LV_PART_CURSOR);
    if(blink_time == 0) {
 8017f6c:	4605      	mov	r5, r0
 8017f6e:	b958      	cbnz	r0, 8017f88 <start_cursor_blink+0x2c>
        lv_anim_del(obj, cursor_blink_anim_cb);
 8017f70:	4911      	ldr	r1, [pc, #68]	; (8017fb8 <start_cursor_blink+0x5c>)
 8017f72:	4620      	mov	r0, r4
 8017f74:	f7fa fa14 	bl	80123a0 <lv_anim_del>
        ta->cursor.show = 1;
 8017f78:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017f7c:	f043 0301 	orr.w	r3, r3, #1
 8017f80:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        lv_anim_set_values(&a, 1, 0);
        lv_anim_set_path_cb(&a, lv_anim_path_step);
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
        lv_anim_start(&a);
    }
}
 8017f84:	b013      	add	sp, #76	; 0x4c
 8017f86:	bd30      	pop	{r4, r5, pc}
        lv_anim_init(&a);
 8017f88:	a801      	add	r0, sp, #4
 8017f8a:	f7fa f9ed 	bl	8012368 <lv_anim_init>
    a->exec_cb = exec_cb;
 8017f8e:	4b0a      	ldr	r3, [pc, #40]	; (8017fb8 <start_cursor_blink+0x5c>)
        lv_anim_start(&a);
 8017f90:	a801      	add	r0, sp, #4
    a->var = var;
 8017f92:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 8017f94:	9302      	str	r3, [sp, #8]
    a->start_value = start;
 8017f96:	2301      	movs	r3, #1
    a->time = duration;
 8017f98:	950c      	str	r5, [sp, #48]	; 0x30
    a->playback_time = time;
 8017f9a:	950f      	str	r5, [sp, #60]	; 0x3c
    a->current_value = start;
 8017f9c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a->end_value = end;
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	930b      	str	r3, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 8017fa4:	4b05      	ldr	r3, [pc, #20]	; (8017fbc <start_cursor_blink+0x60>)
 8017fa6:	9308      	str	r3, [sp, #32]
    a->repeat_cnt = cnt;
 8017fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017fac:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8017fb0:	f7fa fa26 	bl	8012400 <lv_anim_start>
}
 8017fb4:	e7e6      	b.n	8017f84 <start_cursor_blink+0x28>
 8017fb6:	bf00      	nop
 8017fb8:	080279a9 	.word	0x080279a9
 8017fbc:	0802421b 	.word	0x0802421b

08017fc0 <refr_cursor_area>:

static void refr_cursor_area(lv_obj_t * obj)
{
 8017fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fc4:	4604      	mov	r4, r0
 8017fc6:	b087      	sub	sp, #28
    lv_textarea_t * ta = (lv_textarea_t *)obj;

    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8017fc8:	f00f fd18 	bl	80279fc <lv_obj_get_style_text_font.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8017fcc:	2259      	movs	r2, #89	; 0x59
 8017fce:	2100      	movs	r1, #0
 8017fd0:	4681      	mov	r9, r0
 8017fd2:	4620      	mov	r0, r4

    uint32_t cur_pos = lv_textarea_get_cursor_pos(obj);
    const char * txt = lv_label_get_text(ta->label);

    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8017fd4:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 80181c4 <refr_cursor_area+0x204>
 8017fd8:	f005 fd86 	bl	801dae8 <lv_obj_get_style_prop>
 8017fdc:	9000      	str	r0, [sp, #0]
    const char * txt = lv_label_get_text(ta->label);
 8017fde:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return ta->cursor.pos;
 8017fe0:	6c65      	ldr	r5, [r4, #68]	; 0x44
    const char * txt = lv_label_get_text(ta->label);
 8017fe2:	f00f f800 	bl	8026fe6 <lv_label_get_text>
    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 8017fe6:	4b78      	ldr	r3, [pc, #480]	; (80181c8 <refr_cursor_area+0x208>)
    const char * txt = lv_label_get_text(ta->label);
 8017fe8:	4683      	mov	fp, r0
    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 8017fea:	4629      	mov	r1, r5
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	4798      	blx	r3
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8017ff0:	eb0b 0300 	add.w	r3, fp, r0
    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 8017ff4:	4607      	mov	r7, r0
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8017ff6:	2100      	movs	r1, #0
 8017ff8:	9301      	str	r3, [sp, #4]
 8017ffa:	4458      	add	r0, fp
 8017ffc:	f8da 3000 	ldr.w	r3, [sl]
 8018000:	4798      	blx	r3
 8018002:	280d      	cmp	r0, #13
 8018004:	4680      	mov	r8, r0
 8018006:	f9b9 3008 	ldrsh.w	r3, [r9, #8]

    /* Letter height and width */
    const lv_coord_t letter_h = lv_font_get_line_height(font);
    /*Set letter_w (set not 0 on non printable but valid chars)*/
    uint32_t letter_space = letter;
    if(is_valid_but_non_printable_char(letter)) {
 801800a:	f200 80d6 	bhi.w	80181ba <refr_cursor_area+0x1fa>
 801800e:	f242 4201 	movw	r2, #9217	; 0x2401
 8018012:	40c2      	lsrs	r2, r0
 8018014:	f012 0f01 	tst.w	r2, #1
 8018018:	bf0c      	ite	eq
 801801a:	4601      	moveq	r1, r0
 801801c:	2120      	movne	r1, #32
        letter_space = ' ';
    }
    lv_coord_t letter_w = lv_font_get_glyph_width(font, letter_space, IGNORE_KERNING);
 801801e:	2200      	movs	r2, #0
 8018020:	4648      	mov	r0, r9
 8018022:	9301      	str	r3, [sp, #4]
 8018024:	f00c f83b 	bl	802409e <lv_font_get_glyph_width>

    lv_point_t letter_pos;
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 8018028:	4629      	mov	r1, r5
 801802a:	aa03      	add	r2, sp, #12
    lv_coord_t letter_w = lv_font_get_glyph_width(font, letter_space, IGNORE_KERNING);
 801802c:	b206      	sxth	r6, r0
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 801802e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018030:	f7fe f972 	bl	8016318 <lv_label_get_letter_pos>

    lv_text_align_t align = lv_obj_calculate_style_text_align(ta->label, LV_PART_MAIN, lv_label_get_text(ta->label));
 8018034:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018036:	4628      	mov	r0, r5
 8018038:	f00e ffd5 	bl	8026fe6 <lv_label_get_text>
 801803c:	2100      	movs	r1, #0
 801803e:	4602      	mov	r2, r0
 8018040:	4628      	mov	r0, r5
 8018042:	f006 f88a 	bl	801e15a <lv_obj_calculate_style_text_align>

    /*If the cursor is out of the text (most right) draw it to the next line*/
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 8018046:	6a62      	ldr	r2, [r4, #36]	; 0x24
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {

        letter_pos.x = 0;
        letter_pos.y += letter_h + line_space;
 8018048:	9b01      	ldr	r3, [sp, #4]
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 801804a:	f9b2 1014 	ldrsh.w	r1, [r2, #20]
        letter_pos.y += letter_h + line_space;
 801804e:	b29d      	uxth	r5, r3
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 8018050:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018054:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8018058:	440b      	add	r3, r1
 801805a:	4433      	add	r3, r6
 801805c:	4293      	cmp	r3, r2
 801805e:	dd31      	ble.n	80180c4 <refr_cursor_area+0x104>
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {
 8018060:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 8018064:	f011 0108 	ands.w	r1, r1, #8
 8018068:	d12c      	bne.n	80180c4 <refr_cursor_area+0x104>
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {
 801806a:	2803      	cmp	r0, #3
 801806c:	d02a      	beq.n	80180c4 <refr_cursor_area+0x104>
        letter_pos.y += letter_h + line_space;
 801806e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018072:	9a00      	ldr	r2, [sp, #0]
        letter_pos.x = 0;
 8018074:	f8ad 100c 	strh.w	r1, [sp, #12]
        letter_pos.y += letter_h + line_space;
 8018078:	441a      	add	r2, r3
        letter_pos.x = 0;
 801807a:	9101      	str	r1, [sp, #4]
        letter_pos.y += letter_h + line_space;
 801807c:	4613      	mov	r3, r2
 801807e:	442b      	add	r3, r5
 8018080:	f8ad 300e 	strh.w	r3, [sp, #14]

        if(letter != '\0') {
 8018084:	f1b8 0f00 	cmp.w	r8, #0
 8018088:	f000 8099 	beq.w	80181be <refr_cursor_area+0x1fe>
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
 801808c:	4b4f      	ldr	r3, [pc, #316]	; (80181cc <refr_cursor_area+0x20c>)
 801808e:	eb0b 0007 	add.w	r0, fp, r7
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	4798      	blx	r3
 8018096:	4407      	add	r7, r0
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8018098:	9901      	ldr	r1, [sp, #4]
 801809a:	f8da 3000 	ldr.w	r3, [sl]
 801809e:	eb0b 0007 	add.w	r0, fp, r7
 80180a2:	4798      	blx	r3
 80180a4:	280d      	cmp	r0, #13
 80180a6:	4601      	mov	r1, r0
        }

        uint32_t tmp = letter;
        if(is_valid_but_non_printable_char(letter)) {
 80180a8:	d807      	bhi.n	80180ba <refr_cursor_area+0xfa>
 80180aa:	f242 4301 	movw	r3, #9217	; 0x2401
 80180ae:	40c3      	lsrs	r3, r0
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 80180b0:	f013 0f01 	tst.w	r3, #1
 80180b4:	bf0c      	ite	eq
 80180b6:	4601      	moveq	r1, r0
 80180b8:	2120      	movne	r1, #32
            tmp = ' ';
        }
        letter_w = lv_font_get_glyph_width(font, tmp, IGNORE_KERNING);
 80180ba:	2200      	movs	r2, #0
 80180bc:	4648      	mov	r0, r9
 80180be:	f00b ffee 	bl	802409e <lv_font_get_glyph_width>
 80180c2:	b206      	sxth	r6, r0
    }

    /*Save the byte position. It is required to draw `LV_CURSOR_BLOCK`*/
    ta->cursor.txt_byte_pos = byte_pos;
 80180c4:	6527      	str	r7, [r4, #80]	; 0x50
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80180c6:	2232      	movs	r2, #50	; 0x32
 80180c8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80180cc:	4620      	mov	r0, r4
 80180ce:	f005 fd0b 	bl	801dae8 <lv_obj_get_style_prop>
 80180d2:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80180d4:	2210      	movs	r2, #16
 80180d6:	f44f 21e0 	mov.w	r1, #458752	; 0x70000

    /*Calculate the cursor according to its type*/
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_CURSOR);
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 80180da:	fa1f fa87 	uxth.w	sl, r7
 80180de:	4620      	mov	r0, r4
 80180e0:	f005 fd02 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80180e4:	2211      	movs	r2, #17
 80180e6:	fa10 f787 	uxtah	r7, r0, r7
 80180ea:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80180ee:	4620      	mov	r0, r4
 80180f0:	f005 fcfa 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80180f4:	2212      	movs	r2, #18
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_CURSOR) + border_width;
 80180f6:	eb0a 0900 	add.w	r9, sl, r0
 80180fa:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80180fe:	4620      	mov	r0, r4
 8018100:	b2bf      	uxth	r7, r7
 8018102:	f005 fcf1 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8018106:	2213      	movs	r2, #19
 8018108:	eb0a 0800 	add.w	r8, sl, r0
 801810c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8018110:	4620      	mov	r0, r4
 8018112:	fa1f f989 	uxth.w	r9, r9
 8018116:	f005 fce7 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR) + border_width;
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_CURSOR) + border_width;
 801811a:	4482      	add	sl, r0

    lv_area_t cur_area;
    cur_area.x1 = letter_pos.x - left;
 801811c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    cur_area.y1 = letter_pos.y - top;
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 8018120:	f109 39ff 	add.w	r9, r9, #4294967295
    cur_area.y1 = letter_pos.y - top;
 8018124:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 8018128:	f10a 3aff 	add.w	sl, sl, #4294967295
 801812c:	fa1f f888 	uxth.w	r8, r8

    /*Save the new area*/
    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, &ta->cursor.area);
    area_tmp.x1 += ta->label->coords.x1;
 8018130:	6a60      	ldr	r0, [r4, #36]	; 0x24
    cur_area.y1 = letter_pos.y - top;
 8018132:	1bd7      	subs	r7, r2, r7
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 8018134:	444a      	add	r2, r9
    cur_area.x1 = letter_pos.x - left;
 8018136:	eba3 0808 	sub.w	r8, r3, r8
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 801813a:	4453      	add	r3, sl
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801813c:	4415      	add	r5, r2
    area_tmp.x1 += ta->label->coords.x1;
 801813e:	8a82      	ldrh	r2, [r0, #20]
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 8018140:	441e      	add	r6, r3
    area_tmp.x1 += ta->label->coords.x1;
 8018142:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    dest->y1 = src->y1;
 8018146:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
    cur_area.x1 = letter_pos.x - left;
 801814a:	fa1f f888 	uxth.w	r8, r8
    area_tmp.x1 += ta->label->coords.x1;
 801814e:	4413      	add	r3, r2
    dest->x2 = src->x2;
 8018150:	f9b4 e04c 	ldrsh.w	lr, [r4, #76]	; 0x4c
    dest->y2 = src->y2;
 8018154:	f9b4 c04e 	ldrsh.w	ip, [r4, #78]	; 0x4e
    cur_area.y1 = letter_pos.y - top;
 8018158:	b2bf      	uxth	r7, r7
    area_tmp.x1 += ta->label->coords.x1;
 801815a:	f8ad 3010 	strh.w	r3, [sp, #16]
    area_tmp.y1 += ta->label->coords.y1;
    area_tmp.x2 += ta->label->coords.x1;
 801815e:	4472      	add	r2, lr
    area_tmp.y1 += ta->label->coords.y1;
 8018160:	8ac3      	ldrh	r3, [r0, #22]
    area_tmp.y2 += ta->label->coords.y1;
    lv_obj_invalidate_area(obj, &area_tmp);
 8018162:	4620      	mov	r0, r4
    area_tmp.x2 += ta->label->coords.x1;
 8018164:	f8ad 2014 	strh.w	r2, [sp, #20]
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 8018168:	b2b6      	uxth	r6, r6
    area_tmp.y1 += ta->label->coords.y1;
 801816a:	4419      	add	r1, r3
    area_tmp.y2 += ta->label->coords.y1;
 801816c:	4463      	add	r3, ip
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801816e:	b2ad      	uxth	r5, r5
    area_tmp.y1 += ta->label->coords.y1;
 8018170:	f8ad 1012 	strh.w	r1, [sp, #18]
    lv_obj_invalidate_area(obj, &area_tmp);
 8018174:	a904      	add	r1, sp, #16
    area_tmp.y2 += ta->label->coords.y1;
 8018176:	f8ad 3016 	strh.w	r3, [sp, #22]
    lv_obj_invalidate_area(obj, &area_tmp);
 801817a:	f004 fd6e 	bl	801cc5a <lv_obj_invalidate_area>

    lv_area_copy(&ta->cursor.area, &cur_area);

    lv_area_copy(&area_tmp, &ta->cursor.area);
    area_tmp.x1 += ta->label->coords.x1;
 801817e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    area_tmp.y1 += ta->label->coords.y1;
    area_tmp.x2 += ta->label->coords.x1;
    area_tmp.y2 += ta->label->coords.y1;
    lv_obj_invalidate_area(obj, &area_tmp);
 8018180:	a904      	add	r1, sp, #16
    dest->x1 = src->x1;
 8018182:	f8a4 8048 	strh.w	r8, [r4, #72]	; 0x48
 8018186:	4620      	mov	r0, r4
    dest->y1 = src->y1;
 8018188:	f8a4 704a 	strh.w	r7, [r4, #74]	; 0x4a
    dest->x2 = src->x2;
 801818c:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
    dest->y2 = src->y2;
 8018190:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
    area_tmp.x1 += ta->label->coords.x1;
 8018194:	8a9a      	ldrh	r2, [r3, #20]
    area_tmp.y1 += ta->label->coords.y1;
 8018196:	8adb      	ldrh	r3, [r3, #22]
    area_tmp.x1 += ta->label->coords.x1;
 8018198:	4490      	add	r8, r2
    area_tmp.x2 += ta->label->coords.x1;
 801819a:	4416      	add	r6, r2
    area_tmp.y1 += ta->label->coords.y1;
 801819c:	441f      	add	r7, r3
    area_tmp.y2 += ta->label->coords.y1;
 801819e:	441d      	add	r5, r3
    area_tmp.x1 += ta->label->coords.x1;
 80181a0:	f8ad 8010 	strh.w	r8, [sp, #16]
    area_tmp.y1 += ta->label->coords.y1;
 80181a4:	f8ad 7012 	strh.w	r7, [sp, #18]
    area_tmp.x2 += ta->label->coords.x1;
 80181a8:	f8ad 6014 	strh.w	r6, [sp, #20]
    area_tmp.y2 += ta->label->coords.y1;
 80181ac:	f8ad 5016 	strh.w	r5, [sp, #22]
    lv_obj_invalidate_area(obj, &area_tmp);
 80181b0:	f004 fd53 	bl	801cc5a <lv_obj_invalidate_area>
}
 80181b4:	b007      	add	sp, #28
 80181b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181ba:	4601      	mov	r1, r0
 80181bc:	e72f      	b.n	801801e <refr_cursor_area+0x5e>
            tmp = ' ';
 80181be:	2120      	movs	r1, #32
 80181c0:	e77b      	b.n	80180ba <refr_cursor_area+0xfa>
 80181c2:	bf00      	nop
 80181c4:	24000100 	.word	0x24000100
 80181c8:	240000f8 	.word	0x240000f8
 80181cc:	24000108 	.word	0x24000108

080181d0 <lv_textarea_set_cursor_pos>:
{
 80181d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 80181d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 80181d4:	4604      	mov	r4, r0
 80181d6:	460e      	mov	r6, r1
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 80181d8:	428b      	cmp	r3, r1
 80181da:	d06f      	beq.n	80182bc <lv_textarea_set_cursor_pos+0xec>
    uint32_t len = _lv_txt_get_encoded_length(lv_label_get_text(ta->label));
 80181dc:	4b38      	ldr	r3, [pc, #224]	; (80182c0 <lv_textarea_set_cursor_pos+0xf0>)
 80181de:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80181e0:	681d      	ldr	r5, [r3, #0]
 80181e2:	f00e ff00 	bl	8026fe6 <lv_label_get_text>
 80181e6:	47a8      	blx	r5
    if(pos < 0) pos = len + pos;
 80181e8:	2e00      	cmp	r6, #0
    uint32_t len = _lv_txt_get_encoded_length(lv_label_get_text(ta->label));
 80181ea:	4605      	mov	r5, r0
    if(pos < 0) pos = len + pos;
 80181ec:	bfb8      	it	lt
 80181ee:	1836      	addlt	r6, r6, r0
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
 80181f0:	42b0      	cmp	r0, r6
 80181f2:	db04      	blt.n	80181fe <lv_textarea_set_cursor_pos+0x2e>
 80181f4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80181f8:	429e      	cmp	r6, r3
 80181fa:	bf18      	it	ne
 80181fc:	4635      	movne	r5, r6
    lv_obj_update_layout(obj);
 80181fe:	4620      	mov	r0, r4
    ta->cursor.pos = pos;
 8018200:	6465      	str	r5, [r4, #68]	; 0x44
    lv_obj_update_layout(obj);
 8018202:	f7ed fae1 	bl	80057c8 <lv_obj_update_layout>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8018206:	4620      	mov	r0, r4
 8018208:	f00f fbf8 	bl	80279fc <lv_obj_get_style_text_font.constprop.0>
 801820c:	4606      	mov	r6, r0
    lv_label_get_letter_pos(ta->label, pos, &cur_pos);
 801820e:	4629      	mov	r1, r5
 8018210:	aa01      	add	r2, sp, #4
 8018212:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018214:	f7fe f880 	bl	8016318 <lv_label_get_letter_pos>
 8018218:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
    if(cur_pos.y < lv_obj_get_scroll_top(obj)) {
 801821c:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 8018220:	4620      	mov	r0, r4
 8018222:	f004 feda 	bl	801cfda <lv_obj_get_scroll_top>
 8018226:	4286      	cmp	r6, r0
 8018228:	da05      	bge.n	8018236 <lv_textarea_set_cursor_pos+0x66>
        lv_obj_scroll_to_y(obj, cur_pos.y, LV_ANIM_ON);
 801822a:	2201      	movs	r2, #1
 801822c:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 8018230:	4620      	mov	r0, r4
 8018232:	f7ed fea1 	bl	8005f78 <lv_obj_scroll_to_y>
    lv_coord_t h = lv_obj_get_content_height(obj);
 8018236:	4620      	mov	r0, r4
 8018238:	f004 fb52 	bl	801c8e0 <lv_obj_get_content_height>
    if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 801823c:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
    lv_coord_t h = lv_obj_get_content_height(obj);
 8018240:	4607      	mov	r7, r0
    if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 8018242:	4620      	mov	r0, r4
 8018244:	442e      	add	r6, r5
 8018246:	f004 fec8 	bl	801cfda <lv_obj_get_scroll_top>
 801824a:	1a36      	subs	r6, r6, r0
 801824c:	42be      	cmp	r6, r7
 801824e:	dd08      	ble.n	8018262 <lv_textarea_set_cursor_pos+0x92>
        lv_obj_scroll_to_y(obj, cur_pos.y - h + font_h, LV_ANIM_ON);
 8018250:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8018254:	2201      	movs	r2, #1
 8018256:	4620      	mov	r0, r4
 8018258:	4429      	add	r1, r5
 801825a:	1bc9      	subs	r1, r1, r7
 801825c:	b209      	sxth	r1, r1
 801825e:	f7ed fe8b 	bl	8005f78 <lv_obj_scroll_to_y>
    if(cur_pos.x < lv_obj_get_scroll_left(obj)) {
 8018262:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8018266:	4620      	mov	r0, r4
 8018268:	f7ed fcfc 	bl	8005c64 <lv_obj_get_scroll_left>
 801826c:	4286      	cmp	r6, r0
 801826e:	da05      	bge.n	801827c <lv_textarea_set_cursor_pos+0xac>
        lv_obj_scroll_to_x(obj, cur_pos.x, LV_ANIM_ON);
 8018270:	2201      	movs	r2, #1
 8018272:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8018276:	4620      	mov	r0, r4
 8018278:	f7ed fe68 	bl	8005f4c <lv_obj_scroll_to_x>
    lv_coord_t w = lv_obj_get_content_width(obj);
 801827c:	4620      	mov	r0, r4
 801827e:	f004 fb19 	bl	801c8b4 <lv_obj_get_content_width>
    if(cur_pos.x + font_h - lv_obj_get_scroll_left(obj) > w) {
 8018282:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
    lv_coord_t w = lv_obj_get_content_width(obj);
 8018286:	4607      	mov	r7, r0
    if(cur_pos.x + font_h - lv_obj_get_scroll_left(obj) > w) {
 8018288:	4620      	mov	r0, r4
 801828a:	442e      	add	r6, r5
 801828c:	f7ed fcea 	bl	8005c64 <lv_obj_get_scroll_left>
 8018290:	1a36      	subs	r6, r6, r0
 8018292:	42be      	cmp	r6, r7
 8018294:	dd08      	ble.n	80182a8 <lv_textarea_set_cursor_pos+0xd8>
        lv_obj_scroll_to_x(obj, cur_pos.x - w + font_h, LV_ANIM_ON);
 8018296:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801829a:	2201      	movs	r2, #1
 801829c:	4620      	mov	r0, r4
 801829e:	18e9      	adds	r1, r5, r3
 80182a0:	1bc9      	subs	r1, r1, r7
 80182a2:	b209      	sxth	r1, r1
 80182a4:	f7ed fe52 	bl	8005f4c <lv_obj_scroll_to_x>
    ta->cursor.valid_x = cur_pos.x;
 80182a8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    start_cursor_blink(obj);
 80182ac:	4620      	mov	r0, r4
    ta->cursor.valid_x = cur_pos.x;
 80182ae:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    start_cursor_blink(obj);
 80182b2:	f7ff fe53 	bl	8017f5c <start_cursor_blink>
    refr_cursor_area(obj);
 80182b6:	4620      	mov	r0, r4
 80182b8:	f7ff fe82 	bl	8017fc0 <refr_cursor_area>
}
 80182bc:	b003      	add	sp, #12
 80182be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182c0:	240000f0 	.word	0x240000f0

080182c4 <lv_textarea_constructor>:
{
 80182c4:	b538      	push	{r3, r4, r5, lr}
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 80182c6:	f240 53dc 	movw	r3, #1500	; 0x5dc
    ta->pwd_tmp           = NULL;
 80182ca:	2500      	movs	r5, #0
{
 80182cc:	460c      	mov	r4, r1
    ta->label = lv_label_create(obj);
 80182ce:	4608      	mov	r0, r1
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 80182d0:	878b      	strh	r3, [r1, #60]	; 0x3c
    ta->cursor.pos        = 1;
 80182d2:	2301      	movs	r3, #1
    ta->cursor.valid_x    = 0;
 80182d4:	f8a1 5040 	strh.w	r5, [r1, #64]	; 0x40
    ta->cursor.pos        = 1;
 80182d8:	644b      	str	r3, [r1, #68]	; 0x44
    ta->cursor.show      = 1;
 80182da:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
 80182de:	f023 0303 	bic.w	r3, r3, #3
 80182e2:	f043 0303 	orr.w	r3, r3, #3
 80182e6:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
    ta->text_sel_en = 0;
 80182ea:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 80182ee:	f023 030e 	bic.w	r3, r3, #14
    ta->pwd_bullet        = NULL;
 80182f2:	e9c1 550b 	strd	r5, r5, [r1, #44]	; 0x2c
    ta->text_sel_en = 0;
 80182f6:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
    ta->max_length        = 0;
 80182fa:	e9c1 550d 	strd	r5, r5, [r1, #52]	; 0x34
    ta->placeholder_txt = NULL;
 80182fe:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    ta->label = lv_label_create(obj);
 8018302:	f7fd ffa7 	bl	8016254 <lv_label_create>
    lv_obj_set_width(ta->label, lv_pct(100));
 8018306:	f242 0164 	movw	r1, #8292	; 0x2064
    ta->label = lv_label_create(obj);
 801830a:	6260      	str	r0, [r4, #36]	; 0x24
    lv_obj_set_width(ta->label, lv_pct(100));
 801830c:	f004 fa0c 	bl	801c728 <lv_obj_set_width>
    lv_label_set_text(ta->label, "");
 8018310:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018312:	490b      	ldr	r1, [pc, #44]	; (8018340 <lv_textarea_constructor+0x7c>)
 8018314:	f00e fde6 	bl	8026ee4 <lv_label_set_text>
    lv_obj_add_event_cb(ta->label, label_event_cb, LV_EVENT_ALL, NULL);
 8018318:	462b      	mov	r3, r5
 801831a:	462a      	mov	r2, r5
 801831c:	4909      	ldr	r1, [pc, #36]	; (8018344 <lv_textarea_constructor+0x80>)
 801831e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018320:	f002 ffa7 	bl	801b272 <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8018324:	4620      	mov	r0, r4
 8018326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801832a:	f003 fb1e 	bl	801b96a <lv_obj_add_flag>
    lv_textarea_set_cursor_pos(obj, 0);
 801832e:	4620      	mov	r0, r4
 8018330:	4629      	mov	r1, r5
 8018332:	f7ff ff4d 	bl	80181d0 <lv_textarea_set_cursor_pos>
    start_cursor_blink(obj);
 8018336:	4620      	mov	r0, r4
}
 8018338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    start_cursor_blink(obj);
 801833c:	f7ff be0e 	b.w	8017f5c <start_cursor_blink>
 8018340:	08029fb2 	.word	0x08029fb2
 8018344:	08027a09 	.word	0x08027a09

08018348 <lv_textarea_get_password_bullet>:
{
 8018348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(ta->pwd_bullet) return ta->pwd_bullet;
 801834a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801834c:	b964      	cbnz	r4, 8018368 <lv_textarea_get_password_bullet+0x20>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801834e:	f00f fb55 	bl	80279fc <lv_obj_get_style_text_font.constprop.0>
    if(lv_font_get_glyph_dsc(font, &g, LV_TEXTAREA_PWD_BULLET_UNICODE, 0))
 8018352:	4623      	mov	r3, r4
 8018354:	f242 0222 	movw	r2, #8226	; 0x2022
 8018358:	4669      	mov	r1, sp
 801835a:	f00b fe52 	bl	8024002 <lv_font_get_glyph_dsc>
    return "*";
 801835e:	4c04      	ldr	r4, [pc, #16]	; (8018370 <lv_textarea_get_password_bullet+0x28>)
 8018360:	4b04      	ldr	r3, [pc, #16]	; (8018374 <lv_textarea_get_password_bullet+0x2c>)
 8018362:	2800      	cmp	r0, #0
 8018364:	bf08      	it	eq
 8018366:	461c      	moveq	r4, r3
}
 8018368:	4620      	mov	r0, r4
 801836a:	b004      	add	sp, #16
 801836c:	bd10      	pop	{r4, pc}
 801836e:	bf00      	nop
 8018370:	0802e01f 	.word	0x0802e01f
 8018374:	0802a585 	.word	0x0802a585

08018378 <pwd_char_hider>:
{
 8018378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(ta->pwd_mode == 0) {
 801837c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
{
 8018380:	4604      	mov	r4, r0
    if(ta->pwd_mode == 0) {
 8018382:	075b      	lsls	r3, r3, #29
 8018384:	d531      	bpl.n	80183ea <pwd_char_hider+0x72>
    char * txt = lv_label_get_text(ta->label);
 8018386:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8018388:	f00e fe2d 	bl	8026fe6 <lv_label_get_text>
    uint32_t enc_len = _lv_txt_get_encoded_length(txt);
 801838c:	4b18      	ldr	r3, [pc, #96]	; (80183f0 <pwd_char_hider+0x78>)
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	4798      	blx	r3
    if(enc_len == 0) return;
 8018392:	4606      	mov	r6, r0
 8018394:	b348      	cbz	r0, 80183ea <pwd_char_hider+0x72>
    const char * bullet = lv_textarea_get_password_bullet(obj);
 8018396:	4620      	mov	r0, r4
    for(i = 0; i < enc_len; i++) {
 8018398:	f04f 0800 	mov.w	r8, #0
    const char * bullet = lv_textarea_get_password_bullet(obj);
 801839c:	f7ff ffd4 	bl	8018348 <lv_textarea_get_password_bullet>
 80183a0:	4681      	mov	r9, r0
    const size_t bullet_len = strlen(bullet);
 80183a2:	f002 f9d3 	bl	801a74c <strlen>
    char * txt_tmp = lv_mem_buf_get(enc_len * bullet_len + 1);
 80183a6:	fb00 fa06 	mul.w	sl, r0, r6
    const size_t bullet_len = strlen(bullet);
 80183aa:	4607      	mov	r7, r0
    char * txt_tmp = lv_mem_buf_get(enc_len * bullet_len + 1);
 80183ac:	f10a 0001 	add.w	r0, sl, #1
 80183b0:	f7fa fa02 	bl	80127b8 <lv_mem_buf_get>
 80183b4:	4605      	mov	r5, r0
    for(i = 0; i < enc_len; i++) {
 80183b6:	4683      	mov	fp, r0
 80183b8:	f108 0801 	add.w	r8, r8, #1
 80183bc:	4658      	mov	r0, fp
 80183be:	463a      	mov	r2, r7
 80183c0:	4649      	mov	r1, r9
 80183c2:	f002 f9d6 	bl	801a772 <memcpy>
 80183c6:	4546      	cmp	r6, r8
 80183c8:	44bb      	add	fp, r7
 80183ca:	d1f5      	bne.n	80183b8 <pwd_char_hider+0x40>
    txt_tmp[i * bullet_len] = '\0';
 80183cc:	2300      	movs	r3, #0
    lv_label_set_text(ta->label, txt_tmp);
 80183ce:	4629      	mov	r1, r5
    txt_tmp[i * bullet_len] = '\0';
 80183d0:	f805 300a 	strb.w	r3, [r5, sl]
    lv_label_set_text(ta->label, txt_tmp);
 80183d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80183d6:	f00e fd85 	bl	8026ee4 <lv_label_set_text>
    lv_mem_buf_release(txt_tmp);
 80183da:	4628      	mov	r0, r5
 80183dc:	f7fa fa36 	bl	801284c <lv_mem_buf_release>
    refr_cursor_area(obj);
 80183e0:	4620      	mov	r0, r4
}
 80183e2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    refr_cursor_area(obj);
 80183e6:	f7ff bdeb 	b.w	8017fc0 <refr_cursor_area>
}
 80183ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183ee:	bf00      	nop
 80183f0:	240000f0 	.word	0x240000f0

080183f4 <auto_hide_characters>:
        lv_draw_label(draw_ctx, &cur_label_dsc, &cur_area, letter_buf, NULL);
    }
}

static void auto_hide_characters(lv_obj_t * obj)
{
 80183f4:	b510      	push	{r4, lr}
    lv_textarea_t * ta = (lv_textarea_t *) obj;

    if(ta->pwd_show_time == 0) {
 80183f6:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
{
 80183f8:	b092      	sub	sp, #72	; 0x48
 80183fa:	4604      	mov	r4, r0
    if(ta->pwd_show_time == 0) {
 80183fc:	b923      	cbnz	r3, 8018408 <auto_hide_characters+0x14>
        lv_anim_set_values(&a, 0, 1);
        lv_anim_set_path_cb(&a, lv_anim_path_step);
        lv_anim_set_ready_cb(&a, pwd_char_hider_anim_ready);
        lv_anim_start(&a);
    }
}
 80183fe:	b012      	add	sp, #72	; 0x48
 8018400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pwd_char_hider(obj);
 8018404:	f7ff bfb8 	b.w	8018378 <pwd_char_hider>
        lv_anim_init(&a);
 8018408:	a801      	add	r0, sp, #4
 801840a:	f7f9 ffad 	bl	8012368 <lv_anim_init>
    a->exec_cb = exec_cb;
 801840e:	4b09      	ldr	r3, [pc, #36]	; (8018434 <auto_hide_characters+0x40>)
        lv_anim_start(&a);
 8018410:	a801      	add	r0, sp, #4
    a->var = var;
 8018412:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 8018414:	9302      	str	r3, [sp, #8]
    a->time = duration;
 8018416:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8018418:	930c      	str	r3, [sp, #48]	; 0x30
    a->start_value = start;
 801841a:	2300      	movs	r3, #0
    a->current_value = start;
 801841c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a->end_value = end;
 8018420:	2301      	movs	r3, #1
 8018422:	930b      	str	r3, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 8018424:	4b04      	ldr	r3, [pc, #16]	; (8018438 <auto_hide_characters+0x44>)
 8018426:	9308      	str	r3, [sp, #32]
    a->ready_cb = ready_cb;
 8018428:	4b04      	ldr	r3, [pc, #16]	; (801843c <auto_hide_characters+0x48>)
 801842a:	9304      	str	r3, [sp, #16]
 801842c:	f7f9 ffe8 	bl	8012400 <lv_anim_start>
}
 8018430:	b012      	add	sp, #72	; 0x48
 8018432:	bd10      	pop	{r4, pc}
 8018434:	0802797d 	.word	0x0802797d
 8018438:	0802421b 	.word	0x0802421b
 801843c:	08027ad3 	.word	0x08027ad3

08018440 <lv_textarea_add_text>:
{
 8018440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018442:	4604      	mov	r4, r0
    LV_ASSERT_NULL(txt);
 8018444:	460d      	mov	r5, r1
 8018446:	b901      	cbnz	r1, 801844a <lv_textarea_add_text+0xa>
 8018448:	e7fe      	b.n	8018448 <lv_textarea_add_text+0x8>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 801844a:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 801844e:	075a      	lsls	r2, r3, #29
 8018450:	d501      	bpl.n	8018456 <lv_textarea_add_text+0x16>
 8018452:	f7ff ff91 	bl	8018378 <pwd_char_hider>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 8018456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018458:	b90b      	cbnz	r3, 801845e <lv_textarea_add_text+0x1e>
 801845a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801845c:	b19b      	cbz	r3, 8018486 <lv_textarea_add_text+0x46>
        uint32_t i = 0;
 801845e:	2300      	movs	r3, #0
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 8018460:	4e2a      	ldr	r6, [pc, #168]	; (801850c <lv_textarea_add_text+0xcc>)
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 8018462:	4f2b      	ldr	r7, [pc, #172]	; (8018510 <lv_textarea_add_text+0xd0>)
        uint32_t i = 0;
 8018464:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 8018466:	9b01      	ldr	r3, [sp, #4]
 8018468:	5ceb      	ldrb	r3, [r5, r3]
 801846a:	b90b      	cbnz	r3, 8018470 <lv_textarea_add_text+0x30>
}
 801846c:	b003      	add	sp, #12
 801846e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 8018470:	a901      	add	r1, sp, #4
 8018472:	6833      	ldr	r3, [r6, #0]
 8018474:	4628      	mov	r0, r5
 8018476:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 8018478:	683b      	ldr	r3, [r7, #0]
 801847a:	4798      	blx	r3
 801847c:	4601      	mov	r1, r0
 801847e:	4620      	mov	r0, r4
 8018480:	f000 f868 	bl	8018554 <lv_textarea_add_char>
 8018484:	e7ef      	b.n	8018466 <lv_textarea_add_text+0x26>
    lv_res_t res = insert_handler(obj, txt);
 8018486:	4629      	mov	r1, r5
 8018488:	4620      	mov	r0, r4
 801848a:	f000 f845 	bl	8018518 <insert_handler>
    if(res != LV_RES_OK) return;
 801848e:	2801      	cmp	r0, #1
 8018490:	d1ec      	bne.n	801846c <lv_textarea_add_text+0x2c>
    if(ta->placeholder_txt) {
 8018492:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 8018496:	b133      	cbz	r3, 80184a6 <lv_textarea_add_text+0x66>
        const char * txt_act = lv_label_get_text(ta->label);
 8018498:	f00e fda5 	bl	8026fe6 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 801849c:	7803      	ldrb	r3, [r0, #0]
 801849e:	b913      	cbnz	r3, 80184a6 <lv_textarea_add_text+0x66>
 80184a0:	4620      	mov	r0, r4
 80184a2:	f004 fbfb 	bl	801cc9c <lv_obj_invalidate>
    lv_label_ins_text(ta->label, ta->cursor.pos, txt);
 80184a6:	462a      	mov	r2, r5
 80184a8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80184aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80184ac:	f7fe f812 	bl	80164d4 <lv_label_ins_text>
    lv_textarea_clear_selection(obj);
 80184b0:	4620      	mov	r0, r4
 80184b2:	f00f fb16 	bl	8027ae2 <lv_textarea_clear_selection>
    if(ta->pwd_mode) {
 80184b6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80184ba:	075b      	lsls	r3, r3, #29
 80184bc:	d515      	bpl.n	80184ea <lv_textarea_add_text+0xaa>
        size_t realloc_size = strlen(ta->pwd_tmp) + strlen(txt) + 1;
 80184be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80184c0:	f002 f944 	bl	801a74c <strlen>
 80184c4:	4606      	mov	r6, r0
 80184c6:	4628      	mov	r0, r5
 80184c8:	f002 f940 	bl	801a74c <strlen>
 80184cc:	1831      	adds	r1, r6, r0
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, realloc_size);
 80184ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80184d0:	3101      	adds	r1, #1
 80184d2:	f7fa f957 	bl	8012784 <lv_mem_realloc>
 80184d6:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 80184d8:	b900      	cbnz	r0, 80184dc <lv_textarea_add_text+0x9c>
 80184da:	e7fe      	b.n	80184da <lv_textarea_add_text+0x9a>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, txt);
 80184dc:	462a      	mov	r2, r5
 80184de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80184e0:	f7fa fd30 	bl	8012f44 <_lv_txt_ins>
        auto_hide_characters(obj);
 80184e4:	4620      	mov	r0, r4
 80184e6:	f7ff ff85 	bl	80183f4 <auto_hide_characters>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 80184ea:	4b0a      	ldr	r3, [pc, #40]	; (8018514 <lv_textarea_add_text+0xd4>)
 80184ec:	4628      	mov	r0, r5
    return ta->cursor.pos;
 80184ee:	6c66      	ldr	r6, [r4, #68]	; 0x44
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	4798      	blx	r3
 80184f4:	1981      	adds	r1, r0, r6
 80184f6:	4620      	mov	r0, r4
 80184f8:	f7ff fe6a 	bl	80181d0 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80184fc:	2200      	movs	r2, #0
 80184fe:	211c      	movs	r1, #28
 8018500:	4620      	mov	r0, r4
}
 8018502:	b003      	add	sp, #12
 8018504:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8018508:	f7ec b91c 	b.w	8004744 <lv_event_send>
 801850c:	24000100 	.word	0x24000100
 8018510:	24000104 	.word	0x24000104
 8018514:	240000f0 	.word	0x240000f0

08018518 <insert_handler>:
{
 8018518:	b570      	push	{r4, r5, r6, lr}
    ta_insert_replace = NULL;
 801851a:	2300      	movs	r3, #0
 801851c:	4e0c      	ldr	r6, [pc, #48]	; (8018550 <insert_handler+0x38>)
    lv_event_send(obj, LV_EVENT_INSERT, (char *)txt);
 801851e:	460a      	mov	r2, r1
{
 8018520:	460c      	mov	r4, r1
    lv_event_send(obj, LV_EVENT_INSERT, (char *)txt);
 8018522:	211d      	movs	r1, #29
{
 8018524:	4605      	mov	r5, r0
    ta_insert_replace = NULL;
 8018526:	6033      	str	r3, [r6, #0]
    lv_event_send(obj, LV_EVENT_INSERT, (char *)txt);
 8018528:	f7ec f90c 	bl	8004744 <lv_event_send>
    if(ta_insert_replace && ta_insert_replace[0] == '\0')
 801852c:	6830      	ldr	r0, [r6, #0]
 801852e:	b908      	cbnz	r0, 8018534 <insert_handler+0x1c>
    return LV_RES_OK;
 8018530:	2001      	movs	r0, #1
}
 8018532:	bd70      	pop	{r4, r5, r6, pc}
    if(ta_insert_replace && ta_insert_replace[0] == '\0')
 8018534:	7803      	ldrb	r3, [r0, #0]
 8018536:	b143      	cbz	r3, 801854a <insert_handler+0x32>
        if(strcmp(ta_insert_replace, txt)) {
 8018538:	4621      	mov	r1, r4
 801853a:	f002 f90e 	bl	801a75a <strcmp>
 801853e:	2800      	cmp	r0, #0
 8018540:	d0f6      	beq.n	8018530 <insert_handler+0x18>
            lv_textarea_add_text(obj, ta_insert_replace);
 8018542:	6831      	ldr	r1, [r6, #0]
 8018544:	4628      	mov	r0, r5
 8018546:	f7ff ff7b 	bl	8018440 <lv_textarea_add_text>
        return LV_RES_INV;
 801854a:	2000      	movs	r0, #0
 801854c:	e7f1      	b.n	8018532 <insert_handler+0x1a>
 801854e:	bf00      	nop
 8018550:	2400942c 	.word	0x2400942c

08018554 <lv_textarea_add_char>:
{
 8018554:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(ta->one_line && (c == '\n' || c == '\r')) {
 8018556:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
{
 801855a:	b087      	sub	sp, #28
 801855c:	4604      	mov	r4, r0
    if(ta->one_line && (c == '\n' || c == '\r')) {
 801855e:	0718      	lsls	r0, r3, #28
{
 8018560:	9101      	str	r1, [sp, #4]
    if(ta->one_line && (c == '\n' || c == '\r')) {
 8018562:	d503      	bpl.n	801856c <lv_textarea_add_char+0x18>
 8018564:	290a      	cmp	r1, #10
 8018566:	d025      	beq.n	80185b4 <lv_textarea_add_char+0x60>
 8018568:	290d      	cmp	r1, #13
 801856a:	d023      	beq.n	80185b4 <lv_textarea_add_char+0x60>
    u32_buf[1] = 0;
 801856c:	2500      	movs	r5, #0
    u32_buf[0] = c;
 801856e:	9104      	str	r1, [sp, #16]
    lv_res_t res = insert_handler(obj, letter_buf);
 8018570:	4620      	mov	r0, r4
 8018572:	a904      	add	r1, sp, #16
    u32_buf[1] = 0;
 8018574:	9505      	str	r5, [sp, #20]
    lv_res_t res = insert_handler(obj, letter_buf);
 8018576:	f7ff ffcf 	bl	8018518 <insert_handler>
    if(res != LV_RES_OK) return;
 801857a:	2801      	cmp	r0, #1
 801857c:	d11a      	bne.n	80185b4 <lv_textarea_add_char+0x60>
    uint32_t c_uni = _lv_txt_encoded_next((const char *)&c, NULL);
 801857e:	4e30      	ldr	r6, [pc, #192]	; (8018640 <lv_textarea_add_char+0xec>)
 8018580:	4629      	mov	r1, r5
 8018582:	a801      	add	r0, sp, #4
 8018584:	6833      	ldr	r3, [r6, #0]
 8018586:	4798      	blx	r3
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 8018588:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    uint32_t c_uni = _lv_txt_encoded_next((const char *)&c, NULL);
 801858a:	4605      	mov	r5, r0
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 801858c:	b143      	cbz	r3, 80185a0 <lv_textarea_add_char+0x4c>
 801858e:	4b2d      	ldr	r3, [pc, #180]	; (8018644 <lv_textarea_add_char+0xf0>)
 8018590:	4620      	mov	r0, r4
 8018592:	681f      	ldr	r7, [r3, #0]
 8018594:	f00f fa92 	bl	8027abc <lv_textarea_get_text>
 8018598:	47b8      	blx	r7
 801859a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801859c:	4298      	cmp	r0, r3
 801859e:	d209      	bcs.n	80185b4 <lv_textarea_add_char+0x60>
    if(ta->accepted_chars == NULL || ta->accepted_chars[0] == '\0') return true;
 80185a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80185a2:	b173      	cbz	r3, 80185c2 <lv_textarea_add_char+0x6e>
 80185a4:	781b      	ldrb	r3, [r3, #0]
 80185a6:	b163      	cbz	r3, 80185c2 <lv_textarea_add_char+0x6e>
    uint32_t i = 0;
 80185a8:	2300      	movs	r3, #0
 80185aa:	9303      	str	r3, [sp, #12]
    while(ta->accepted_chars[i] != '\0') {
 80185ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80185ae:	9b03      	ldr	r3, [sp, #12]
 80185b0:	5cc3      	ldrb	r3, [r0, r3]
 80185b2:	b90b      	cbnz	r3, 80185b8 <lv_textarea_add_char+0x64>
}
 80185b4:	b007      	add	sp, #28
 80185b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t a = _lv_txt_encoded_next(ta->accepted_chars, &i);
 80185b8:	6833      	ldr	r3, [r6, #0]
 80185ba:	a903      	add	r1, sp, #12
 80185bc:	4798      	blx	r3
        if(a == c) return true; /*Accepted*/
 80185be:	4285      	cmp	r5, r0
 80185c0:	d1f4      	bne.n	80185ac <lv_textarea_add_char+0x58>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 80185c2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80185c6:	075a      	lsls	r2, r3, #29
 80185c8:	d502      	bpl.n	80185d0 <lv_textarea_add_char+0x7c>
 80185ca:	4620      	mov	r0, r4
 80185cc:	f7ff fed4 	bl	8018378 <pwd_char_hider>
    if(ta->placeholder_txt) {
 80185d0:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 80185d4:	b133      	cbz	r3, 80185e4 <lv_textarea_add_char+0x90>
        const char * txt = lv_label_get_text(ta->label);
 80185d6:	f00e fd06 	bl	8026fe6 <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 80185da:	7803      	ldrb	r3, [r0, #0]
 80185dc:	b913      	cbnz	r3, 80185e4 <lv_textarea_add_char+0x90>
 80185de:	4620      	mov	r0, r4
 80185e0:	f004 fb5c 	bl	801cc9c <lv_obj_invalidate>
    lv_label_ins_text(ta->label, ta->cursor.pos, letter_buf); /*Insert the character*/
 80185e4:	aa04      	add	r2, sp, #16
 80185e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80185e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80185ea:	f7fd ff73 	bl	80164d4 <lv_label_ins_text>
    lv_textarea_clear_selection(obj); /*Clear selection*/
 80185ee:	4620      	mov	r0, r4
 80185f0:	f00f fa77 	bl	8027ae2 <lv_textarea_clear_selection>
    if(ta->pwd_mode) {
 80185f4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80185f8:	075b      	lsls	r3, r3, #29
 80185fa:	d515      	bpl.n	8018628 <lv_textarea_add_char+0xd4>
        size_t realloc_size = strlen(ta->pwd_tmp) + strlen(letter_buf) + 1;
 80185fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80185fe:	f002 f8a5 	bl	801a74c <strlen>
 8018602:	4605      	mov	r5, r0
 8018604:	a804      	add	r0, sp, #16
 8018606:	f002 f8a1 	bl	801a74c <strlen>
 801860a:	1829      	adds	r1, r5, r0
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, realloc_size);
 801860c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801860e:	3101      	adds	r1, #1
 8018610:	f7fa f8b8 	bl	8012784 <lv_mem_realloc>
 8018614:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8018616:	b900      	cbnz	r0, 801861a <lv_textarea_add_char+0xc6>
 8018618:	e7fe      	b.n	8018618 <lv_textarea_add_char+0xc4>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, (const char *)letter_buf);
 801861a:	aa04      	add	r2, sp, #16
 801861c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801861e:	f7fa fc91 	bl	8012f44 <_lv_txt_ins>
        auto_hide_characters(obj);
 8018622:	4620      	mov	r0, r4
 8018624:	f7ff fee6 	bl	80183f4 <auto_hide_characters>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + 1);
 8018628:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801862a:	4620      	mov	r0, r4
 801862c:	3101      	adds	r1, #1
 801862e:	f7ff fdcf 	bl	80181d0 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8018632:	2200      	movs	r2, #0
 8018634:	211c      	movs	r1, #28
 8018636:	4620      	mov	r0, r4
 8018638:	f7ec f884 	bl	8004744 <lv_event_send>
 801863c:	e7ba      	b.n	80185b4 <lv_textarea_add_char+0x60>
 801863e:	bf00      	nop
 8018640:	24000100 	.word	0x24000100
 8018644:	240000f0 	.word	0x240000f0

08018648 <lv_textarea_set_text>:
{
 8018648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801864a:	4604      	mov	r4, r0
    LV_ASSERT_NULL(txt);
 801864c:	460d      	mov	r5, r1
 801864e:	b901      	cbnz	r1, 8018652 <lv_textarea_set_text+0xa>
 8018650:	e7fe      	b.n	8018650 <lv_textarea_set_text+0x8>
    lv_textarea_clear_selection(obj);
 8018652:	f00f fa46 	bl	8027ae2 <lv_textarea_clear_selection>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 8018656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018658:	b913      	cbnz	r3, 8018660 <lv_textarea_set_text+0x18>
 801865a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801865c:	2b00      	cmp	r3, #0
 801865e:	d03b      	beq.n	80186d8 <lv_textarea_set_text+0x90>
        lv_label_set_text(ta->label, "");
 8018660:	4929      	ldr	r1, [pc, #164]	; (8018708 <lv_textarea_set_text+0xc0>)
 8018662:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018664:	f00e fc3e 	bl	8026ee4 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8018668:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801866c:	4620      	mov	r0, r4
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 801866e:	4e27      	ldr	r6, [pc, #156]	; (801870c <lv_textarea_set_text+0xc4>)
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8018670:	f7ff fdae 	bl	80181d0 <lv_textarea_set_cursor_pos>
        if(ta->pwd_mode) {
 8018674:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 8018678:	4f25      	ldr	r7, [pc, #148]	; (8018710 <lv_textarea_set_text+0xc8>)
        if(ta->pwd_mode) {
 801867a:	f013 0f04 	tst.w	r3, #4
 801867e:	f04f 0300 	mov.w	r3, #0
            ta->pwd_tmp[0] = '\0'; /*Clear the password too*/
 8018682:	bf1c      	itt	ne
 8018684:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8018686:	7013      	strbne	r3, [r2, #0]
        uint32_t i = 0;
 8018688:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 801868a:	9b01      	ldr	r3, [sp, #4]
 801868c:	5ceb      	ldrb	r3, [r5, r3]
 801868e:	b9c3      	cbnz	r3, 80186c2 <lv_textarea_set_text+0x7a>
    if(ta->placeholder_txt) {
 8018690:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018692:	b13b      	cbz	r3, 80186a4 <lv_textarea_set_text+0x5c>
        const char * txt_act = lv_label_get_text(ta->label);
 8018694:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018696:	f00e fca6 	bl	8026fe6 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 801869a:	7803      	ldrb	r3, [r0, #0]
 801869c:	b913      	cbnz	r3, 80186a4 <lv_textarea_set_text+0x5c>
 801869e:	4620      	mov	r0, r4
 80186a0:	f004 fafc 	bl	801cc9c <lv_obj_invalidate>
    if(ta->pwd_mode) {
 80186a4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80186a8:	075b      	lsls	r3, r3, #29
 80186aa:	d525      	bpl.n	80186f8 <lv_textarea_set_text+0xb0>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(txt) + 1);
 80186ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80186ae:	4628      	mov	r0, r5
 80186b0:	f002 f84c 	bl	801a74c <strlen>
 80186b4:	1c41      	adds	r1, r0, #1
 80186b6:	4630      	mov	r0, r6
 80186b8:	f7fa f864 	bl	8012784 <lv_mem_realloc>
 80186bc:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 80186be:	b9a8      	cbnz	r0, 80186ec <lv_textarea_set_text+0xa4>
 80186c0:	e7fe      	b.n	80186c0 <lv_textarea_set_text+0x78>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 80186c2:	a901      	add	r1, sp, #4
 80186c4:	6833      	ldr	r3, [r6, #0]
 80186c6:	4628      	mov	r0, r5
 80186c8:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 80186ca:	683b      	ldr	r3, [r7, #0]
 80186cc:	4798      	blx	r3
 80186ce:	4601      	mov	r1, r0
 80186d0:	4620      	mov	r0, r4
 80186d2:	f7ff ff3f 	bl	8018554 <lv_textarea_add_char>
 80186d6:	e7d8      	b.n	801868a <lv_textarea_set_text+0x42>
        lv_label_set_text(ta->label, txt);
 80186d8:	4629      	mov	r1, r5
 80186da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80186dc:	f00e fc02 	bl	8026ee4 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 80186e0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80186e4:	4620      	mov	r0, r4
 80186e6:	f7ff fd73 	bl	80181d0 <lv_textarea_set_cursor_pos>
 80186ea:	e7d1      	b.n	8018690 <lv_textarea_set_text+0x48>
        strcpy(ta->pwd_tmp, txt);
 80186ec:	4629      	mov	r1, r5
 80186ee:	f002 f823 	bl	801a738 <strcpy>
        auto_hide_characters(obj);
 80186f2:	4620      	mov	r0, r4
 80186f4:	f7ff fe7e 	bl	80183f4 <auto_hide_characters>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80186f8:	2200      	movs	r2, #0
 80186fa:	211c      	movs	r1, #28
 80186fc:	4620      	mov	r0, r4
}
 80186fe:	b003      	add	sp, #12
 8018700:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8018704:	f7ec b81e 	b.w	8004744 <lv_event_send>
 8018708:	08029fb2 	.word	0x08029fb2
 801870c:	24000100 	.word	0x24000100
 8018710:	24000104 	.word	0x24000104

08018714 <lv_textarea_event>:
{
 8018714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8018718:	48b7      	ldr	r0, [pc, #732]	; (80189f8 <lv_textarea_event+0x2e4>)
{
 801871a:	b09d      	sub	sp, #116	; 0x74
 801871c:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801871e:	f002 fd86 	bl	801b22e <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8018722:	2801      	cmp	r0, #1
 8018724:	f040 80b6 	bne.w	8018894 <lv_textarea_event+0x180>
    lv_event_code_t code = lv_event_get_code(e);
 8018728:	4628      	mov	r0, r5
 801872a:	f002 fd9a 	bl	801b262 <lv_event_get_code>
 801872e:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8018730:	4628      	mov	r0, r5
 8018732:	f002 fd92 	bl	801b25a <lv_event_get_target>
    if(code == LV_EVENT_FOCUSED) {
 8018736:	2e0e      	cmp	r6, #14
    lv_obj_t * obj = lv_event_get_target(e);
 8018738:	4604      	mov	r4, r0
    if(code == LV_EVENT_FOCUSED) {
 801873a:	d104      	bne.n	8018746 <lv_textarea_event+0x32>
}
 801873c:	b01d      	add	sp, #116	; 0x74
 801873e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        start_cursor_blink(obj);
 8018742:	f7ff bc0b 	b.w	8017f5c <start_cursor_blink>
    else if(code == LV_EVENT_KEY) {
 8018746:	2e15      	cmp	r6, #21
 8018748:	f000 81c4 	beq.w	8018ad4 <lv_textarea_event+0x3c0>
 801874c:	f200 80a5 	bhi.w	801889a <lv_textarea_event+0x186>
 8018750:	2e0d      	cmp	r6, #13
 8018752:	f000 812a 	beq.w	80189aa <lv_textarea_event+0x296>
 8018756:	f200 809d 	bhi.w	8018894 <lv_textarea_event+0x180>
 801875a:	2e03      	cmp	r6, #3
 801875c:	f200 8097 	bhi.w	801888e <lv_textarea_event+0x17a>
 8018760:	2e00      	cmp	r6, #0
 8018762:	f000 8097 	beq.w	8018894 <lv_textarea_event+0x180>
    lv_indev_t * click_source = lv_indev_get_act();
 8018766:	f7ec f853 	bl	8004810 <lv_indev_get_act>
    if(click_source == NULL) return;
 801876a:	4606      	mov	r6, r0
 801876c:	2800      	cmp	r0, #0
 801876e:	f000 8091 	beq.w	8018894 <lv_textarea_event+0x180>
    lv_obj_t * obj = lv_event_get_target(e);
 8018772:	4628      	mov	r0, r5
 8018774:	f002 fd71 	bl	801b25a <lv_event_get_target>
    if(ta->cursor.click_pos == 0) return;
 8018778:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
    lv_obj_t * obj = lv_event_get_target(e);
 801877c:	4604      	mov	r4, r0
    if(ta->cursor.click_pos == 0) return;
 801877e:	079f      	lsls	r7, r3, #30
 8018780:	f140 8088 	bpl.w	8018894 <lv_textarea_event+0x180>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 8018784:	4630      	mov	r0, r6
 8018786:	f002 ff2c 	bl	801b5e2 <lv_indev_get_type>
 801878a:	2802      	cmp	r0, #2
 801878c:	f000 8082 	beq.w	8018894 <lv_textarea_event+0x180>
       lv_indev_get_type(click_source) == LV_INDEV_TYPE_ENCODER) {
 8018790:	4630      	mov	r0, r6
 8018792:	f002 ff26 	bl	801b5e2 <lv_indev_get_type>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 8018796:	2804      	cmp	r0, #4
 8018798:	d07c      	beq.n	8018894 <lv_textarea_event+0x180>
    lv_obj_get_coords(ta->label, &label_coords);
 801879a:	a90e      	add	r1, sp, #56	; 0x38
 801879c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801879e:	f004 f82d 	bl	801c7fc <lv_obj_get_coords>
    lv_indev_get_point(click_source, &point_act);
 80187a2:	a902      	add	r1, sp, #8
 80187a4:	4630      	mov	r0, r6
 80187a6:	f002 ff2d 	bl	801b604 <lv_indev_get_point>
    lv_indev_get_vect(click_source, &vect_act);
 80187aa:	a904      	add	r1, sp, #16
 80187ac:	4630      	mov	r0, r6
 80187ae:	f002 ff58 	bl	801b662 <lv_indev_get_vect>
    if(point_act.x < 0 || point_act.y < 0) return; /*Ignore event from keypad*/
 80187b2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80187b6:	2a00      	cmp	r2, #0
 80187b8:	db6c      	blt.n	8018894 <lv_textarea_event+0x180>
 80187ba:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	db68      	blt.n	8018894 <lv_textarea_event+0x180>
    rel_pos.x = point_act.x - label_coords.x1;
 80187c2:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
    const lv_event_code_t code = lv_event_get_code(e);
 80187c6:	4628      	mov	r0, r5
    rel_pos.x = point_act.x - label_coords.x1;
 80187c8:	1a52      	subs	r2, r2, r1
 80187ca:	f8ad 2018 	strh.w	r2, [sp, #24]
    rel_pos.y = point_act.y - label_coords.y1;
 80187ce:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80187d2:	1a9b      	subs	r3, r3, r2
 80187d4:	f8ad 301a 	strh.w	r3, [sp, #26]
    const lv_event_code_t code = lv_event_get_code(e);
 80187d8:	f002 fd43 	bl	801b262 <lv_event_get_code>
 80187dc:	4606      	mov	r6, r0
    lv_coord_t label_width = lv_obj_get_width(ta->label);
 80187de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80187e0:	f004 f85c 	bl	801c89c <lv_obj_get_width>
    if(rel_pos.x < 0) {
 80187e4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    lv_label_t * label_data = (lv_label_t *)ta->label;
 80187e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if(rel_pos.x < 0) {
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	f2c0 813c 	blt.w	8018a68 <lv_textarea_event+0x354>
    else if(rel_pos.x >= label_width) {
 80187f0:	4298      	cmp	r0, r3
 80187f2:	f340 813c 	ble.w	8018a6e <lv_textarea_event+0x35a>
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 80187f6:	a906      	add	r1, sp, #24
 80187f8:	4628      	mov	r0, r5
 80187fa:	f00e fbfb 	bl	8026ff4 <lv_label_get_letter_on>
        click_outside_label = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 80187fe:	a906      	add	r1, sp, #24
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 8018800:	b287      	uxth	r7, r0
        click_outside_label = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 8018802:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018804:	f00e fbfa 	bl	8026ffc <lv_label_is_char_under_pos>
 8018808:	f080 0301 	eor.w	r3, r0, #1
 801880c:	b2db      	uxtb	r3, r3
    if(ta->text_sel_en) {
 801880e:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 8018812:	0790      	lsls	r0, r2, #30
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 8018814:	f002 0101 	and.w	r1, r2, #1
    if(ta->text_sel_en) {
 8018818:	f140 8141 	bpl.w	8018a9e <lv_textarea_event+0x38a>
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 801881c:	2900      	cmp	r1, #0
 801881e:	f040 812a 	bne.w	8018a76 <lv_textarea_event+0x362>
 8018822:	2b00      	cmp	r3, #0
 8018824:	f040 813e 	bne.w	8018aa4 <lv_textarea_event+0x390>
 8018828:	2e01      	cmp	r6, #1
 801882a:	d133      	bne.n	8018894 <lv_textarea_event+0x180>
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 801882c:	f64f 73ff 	movw	r3, #65535	; 0xffff
            ta->text_sel_in_prog = 1;
 8018830:	f042 0201 	orr.w	r2, r2, #1
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8018834:	f44f 7140 	mov.w	r1, #768	; 0x300
 8018838:	4620      	mov	r0, r4
            ta->sel_start    = char_id_at_click;
 801883a:	65a7      	str	r7, [r4, #88]	; 0x58
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 801883c:	65e3      	str	r3, [r4, #92]	; 0x5c
            ta->text_sel_in_prog = 1;
 801883e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8018842:	f003 f8c8 	bl	801b9d6 <lv_obj_clear_flag>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 8018846:	4639      	mov	r1, r7
 8018848:	4620      	mov	r0, r4
 801884a:	f7ff fcc1 	bl	80181d0 <lv_textarea_set_cursor_pos>
    if(ta->text_sel_in_prog) {
 801884e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8018852:	07d9      	lsls	r1, r3, #31
 8018854:	d51e      	bpl.n	8018894 <lv_textarea_event+0x180>
            if(label_data->sel_start != ta->sel_end || label_data->sel_end != ta->sel_start) {
 8018856:	6be9      	ldr	r1, [r5, #60]	; 0x3c
        if(ta->sel_start > ta->sel_end) {
 8018858:	e9d4 3216 	ldrd	r3, r2, [r4, #88]	; 0x58
 801885c:	4293      	cmp	r3, r2
 801885e:	f240 8125 	bls.w	8018aac <lv_textarea_event+0x398>
            if(label_data->sel_start != ta->sel_end || label_data->sel_end != ta->sel_start) {
 8018862:	428a      	cmp	r2, r1
 8018864:	d102      	bne.n	801886c <lv_textarea_event+0x158>
 8018866:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8018868:	428b      	cmp	r3, r1
 801886a:	d005      	beq.n	8018878 <lv_textarea_event+0x164>
                label_data->sel_start = ta->sel_end;
 801886c:	63ea      	str	r2, [r5, #60]	; 0x3c
                label_data->sel_end   = ta->sel_start;
 801886e:	6da3      	ldr	r3, [r4, #88]	; 0x58
                lv_obj_invalidate(obj);
 8018870:	4620      	mov	r0, r4
                label_data->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 8018872:	642b      	str	r3, [r5, #64]	; 0x40
                lv_obj_invalidate(obj);
 8018874:	f004 fa12 	bl	801cc9c <lv_obj_invalidate>
        if(code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED) {
 8018878:	2e03      	cmp	r6, #3
 801887a:	d001      	beq.n	8018880 <lv_textarea_event+0x16c>
 801887c:	2e08      	cmp	r6, #8
 801887e:	d109      	bne.n	8018894 <lv_textarea_event+0x180>
            ta->text_sel_in_prog = 0;
 8018880:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8018884:	f36f 0300 	bfc	r3, #0, #1
 8018888:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801888c:	e002      	b.n	8018894 <lv_textarea_event+0x180>
 801888e:	2e08      	cmp	r6, #8
 8018890:	f43f af69 	beq.w	8018766 <lv_textarea_event+0x52>
}
 8018894:	b01d      	add	sp, #116	; 0x74
 8018896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801889a:	2e18      	cmp	r6, #24
 801889c:	d1fa      	bne.n	8018894 <lv_textarea_event+0x180>
    lv_obj_t * obj = lv_event_get_target(e);
 801889e:	4628      	mov	r0, r5
 80188a0:	f002 fcdb 	bl	801b25a <lv_event_get_target>
 80188a4:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80188a6:	4628      	mov	r0, r5
 80188a8:	f002 fd30 	bl	801b30c <lv_event_get_draw_ctx>
 80188ac:	4680      	mov	r8, r0
    const char * txt = lv_label_get_text(ta->label);
 80188ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80188b0:	f00e fb99 	bl	8026fe6 <lv_label_get_text>
    if(ta->cursor.show == 0) return;
 80188b4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
    const char * txt = lv_label_get_text(ta->label);
 80188b8:	4607      	mov	r7, r0
    if(ta->cursor.show == 0) return;
 80188ba:	07db      	lsls	r3, r3, #31
 80188bc:	d5ea      	bpl.n	8018894 <lv_textarea_event+0x180>
    lv_draw_rect_dsc_init(&cur_dsc);
 80188be:	a80e      	add	r0, sp, #56	; 0x38
    char letter_buf[8] = {0};
 80188c0:	f04f 0900 	mov.w	r9, #0
    lv_draw_rect_dsc_init(&cur_dsc);
 80188c4:	f7f0 f86e 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_CURSOR, &cur_dsc);
 80188c8:	aa0e      	add	r2, sp, #56	; 0x38
 80188ca:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80188ce:	4620      	mov	r0, r4
 80188d0:	f003 fb12 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    cur_area.x1 += ta->label->coords.x1;
 80188d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80188d6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80188da:	8a82      	ldrh	r2, [r0, #20]
    dest->x2 = src->x2;
 80188dc:	f9b4 604c 	ldrsh.w	r6, [r4, #76]	; 0x4c
 80188e0:	4413      	add	r3, r2
    dest->y2 = src->y2;
 80188e2:	f9b4 504e 	ldrsh.w	r5, [r4, #78]	; 0x4e
    dest->y1 = src->y1;
 80188e6:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
    cur_area.x2 += ta->label->coords.x1;
 80188ea:	4432      	add	r2, r6
    cur_area.x1 += ta->label->coords.x1;
 80188ec:	f8ad 3008 	strh.w	r3, [sp, #8]
    cur_area.y1 += ta->label->coords.y1;
 80188f0:	8ac3      	ldrh	r3, [r0, #22]
    lv_draw_rect(draw_ctx, &cur_dsc, &cur_area);
 80188f2:	4640      	mov	r0, r8
    cur_area.x2 += ta->label->coords.x1;
 80188f4:	f8ad 200c 	strh.w	r2, [sp, #12]
    lv_draw_rect(draw_ctx, &cur_dsc, &cur_area);
 80188f8:	aa02      	add	r2, sp, #8
    cur_area.y1 += ta->label->coords.y1;
 80188fa:	4419      	add	r1, r3
    cur_area.y2 += ta->label->coords.y1;
 80188fc:	442b      	add	r3, r5
    cur_area.y1 += ta->label->coords.y1;
 80188fe:	f8ad 100a 	strh.w	r1, [sp, #10]
    lv_draw_rect(draw_ctx, &cur_dsc, &cur_area);
 8018902:	a90e      	add	r1, sp, #56	; 0x38
    cur_area.y2 += ta->label->coords.y1;
 8018904:	f8ad 300e 	strh.w	r3, [sp, #14]
    lv_draw_rect(draw_ctx, &cur_dsc, &cur_area);
 8018908:	f006 fd81 	bl	801f40e <lv_draw_rect>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801890c:	2232      	movs	r2, #50	; 0x32
 801890e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8018912:	4620      	mov	r0, r4
 8018914:	f005 f8e8 	bl	801dae8 <lv_obj_get_style_prop>
 8018918:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801891a:	2212      	movs	r2, #18
 801891c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8018920:	4620      	mov	r0, r4
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR) + border_width;
 8018922:	b2b5      	uxth	r5, r6
 8018924:	f005 f8e0 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8018928:	2210      	movs	r2, #16
 801892a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801892e:	fa10 f686 	uxtah	r6, r0, r6
 8018932:	4620      	mov	r0, r4
 8018934:	f005 f8d8 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 8018938:	4405      	add	r5, r0
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR) + border_width;
 801893a:	b2b6      	uxth	r6, r6
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 801893c:	b2ad      	uxth	r5, r5
    char letter_buf[8] = {0};
 801893e:	e9cd 9904 	strd	r9, r9, [sp, #16]
    lv_memcpy(letter_buf, &txt[ta->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ta->cursor.txt_byte_pos]));
 8018942:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018944:	441f      	add	r7, r3
 8018946:	4b2d      	ldr	r3, [pc, #180]	; (80189fc <lv_textarea_event+0x2e8>)
 8018948:	4638      	mov	r0, r7
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	4798      	blx	r3
 801894e:	4639      	mov	r1, r7
 8018950:	4602      	mov	r2, r0
 8018952:	a804      	add	r0, sp, #16
 8018954:	f001 ff0d 	bl	801a772 <memcpy>
    cur_area.x1 += left;
 8018958:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
 801895c:	2255      	movs	r2, #85	; 0x55
 801895e:	4649      	mov	r1, r9
 8018960:	441e      	add	r6, r3
    cur_area.y1 += top;
 8018962:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018966:	441d      	add	r5, r3
    cur_area.x1 += left;
 8018968:	f8ad 6008 	strh.w	r6, [sp, #8]
    cur_area.y1 += top;
 801896c:	f8ad 500a 	strh.w	r5, [sp, #10]
 8018970:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018972:	f005 f8b9 	bl	801dae8 <lv_obj_get_style_prop>
    return v.color;
 8018976:	b285      	uxth	r5, r0
    lv_draw_label_dsc_init(&cur_label_dsc);
 8018978:	a806      	add	r0, sp, #24
 801897a:	f7ef f9c9 	bl	8007d10 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_CURSOR, &cur_label_dsc);
 801897e:	aa06      	add	r2, sp, #24
 8018980:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8018984:	4620      	mov	r0, r4
 8018986:	f003 fc06 	bl	801c196 <lv_obj_init_draw_label_dsc>
    if(cur_dsc.bg_opa > LV_OPA_MIN || cur_label_dsc.color.full != label_color.full) {
 801898a:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 801898e:	2b02      	cmp	r3, #2
 8018990:	d804      	bhi.n	801899c <lv_textarea_event+0x288>
 8018992:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018996:	42ab      	cmp	r3, r5
 8018998:	f43f af7c 	beq.w	8018894 <lv_textarea_event+0x180>
        lv_draw_label(draw_ctx, &cur_label_dsc, &cur_area, letter_buf, NULL);
 801899c:	2300      	movs	r3, #0
 801899e:	aa02      	add	r2, sp, #8
 80189a0:	a906      	add	r1, sp, #24
 80189a2:	4640      	mov	r0, r8
 80189a4:	9300      	str	r3, [sp, #0]
 80189a6:	ab04      	add	r3, sp, #16
 80189a8:	e0eb      	b.n	8018b82 <lv_textarea_event+0x46e>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 80189aa:	4628      	mov	r0, r5
 80189ac:	f002 fc5d 	bl	801b26a <lv_event_get_param>
 80189b0:	6801      	ldr	r1, [r0, #0]
        if(c == LV_KEY_RIGHT)
 80189b2:	2913      	cmp	r1, #19
 80189b4:	d105      	bne.n	80189c2 <lv_textarea_event+0x2ae>
            lv_textarea_cursor_right(obj);
 80189b6:	4620      	mov	r0, r4
}
 80189b8:	b01d      	add	sp, #116	; 0x74
 80189ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_cursor_right(obj);
 80189be:	f00f b904 	b.w	8027bca <lv_textarea_cursor_right>
        else if(c == LV_KEY_LEFT)
 80189c2:	2914      	cmp	r1, #20
 80189c4:	d810      	bhi.n	80189e8 <lv_textarea_event+0x2d4>
 80189c6:	2901      	cmp	r1, #1
 80189c8:	d910      	bls.n	80189ec <lv_textarea_event+0x2d8>
 80189ca:	1e8b      	subs	r3, r1, #2
 80189cc:	2b12      	cmp	r3, #18
 80189ce:	d80d      	bhi.n	80189ec <lv_textarea_event+0x2d8>
 80189d0:	e8df f003 	tbb	[pc, r3]
 80189d4:	0c0c3b34 	.word	0x0c0c3b34
 80189d8:	0c280c0c 	.word	0x0c280c0c
 80189dc:	0c0c0c3e 	.word	0x0c0c0c3e
 80189e0:	1c0c0c0c 	.word	0x1c0c0c0c
 80189e4:	0c22      	.short	0x0c22
 80189e6:	16          	.byte	0x16
 80189e7:	00          	.byte	0x00
 80189e8:	297f      	cmp	r1, #127	; 0x7f
 80189ea:	d021      	beq.n	8018a30 <lv_textarea_event+0x31c>
            lv_textarea_add_char(obj, c);
 80189ec:	4620      	mov	r0, r4
}
 80189ee:	b01d      	add	sp, #116	; 0x74
 80189f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_add_char(obj, c);
 80189f4:	f7ff bdae 	b.w	8018554 <lv_textarea_add_char>
 80189f8:	08029b08 	.word	0x08029b08
 80189fc:	24000108 	.word	0x24000108
            lv_textarea_cursor_left(obj);
 8018a00:	4620      	mov	r0, r4
}
 8018a02:	b01d      	add	sp, #116	; 0x74
 8018a04:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_cursor_left(obj);
 8018a08:	f00f b8e3 	b.w	8027bd2 <lv_textarea_cursor_left>
            lv_textarea_cursor_up(obj);
 8018a0c:	4620      	mov	r0, r4
}
 8018a0e:	b01d      	add	sp, #116	; 0x74
 8018a10:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_cursor_up(obj);
 8018a14:	f00f b913 	b.w	8027c3e <lv_textarea_cursor_up>
            lv_textarea_cursor_down(obj);
 8018a18:	4620      	mov	r0, r4
}
 8018a1a:	b01d      	add	sp, #116	; 0x74
 8018a1c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_cursor_down(obj);
 8018a20:	f00f b8dd 	b.w	8027bde <lv_textarea_cursor_down>
            lv_textarea_del_char(obj);
 8018a24:	4620      	mov	r0, r4
}
 8018a26:	b01d      	add	sp, #116	; 0x74
 8018a28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_del_char(obj);
 8018a2c:	f00f b875 	b.w	8027b1a <lv_textarea_del_char>
            lv_textarea_del_char_forward(obj);
 8018a30:	4620      	mov	r0, r4
}
 8018a32:	b01d      	add	sp, #116	; 0x74
 8018a34:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_del_char_forward(obj);
 8018a38:	f00f b8b8 	b.w	8027bac <lv_textarea_del_char_forward>
            lv_textarea_set_cursor_pos(obj, 0);
 8018a3c:	2100      	movs	r1, #0
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8018a3e:	4620      	mov	r0, r4
}
 8018a40:	b01d      	add	sp, #116	; 0x74
 8018a42:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8018a46:	f7ff bbc3 	b.w	80181d0 <lv_textarea_set_cursor_pos>
 8018a4a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8018a4e:	e7f6      	b.n	8018a3e <lv_textarea_event+0x32a>
    return ta->one_line == 1U;
 8018a50:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 8018a54:	071b      	lsls	r3, r3, #28
 8018a56:	d5c9      	bpl.n	80189ec <lv_textarea_event+0x2d8>
            lv_event_send(obj, LV_EVENT_READY, NULL);
 8018a58:	2200      	movs	r2, #0
 8018a5a:	211f      	movs	r1, #31
 8018a5c:	4620      	mov	r0, r4
}
 8018a5e:	b01d      	add	sp, #116	; 0x74
 8018a60:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_event_send(obj, LV_EVENT_READY, NULL);
 8018a64:	f7eb be6e 	b.w	8004744 <lv_event_send>
        click_outside_label = true;
 8018a68:	2301      	movs	r3, #1
        char_id_at_click = 0;
 8018a6a:	2700      	movs	r7, #0
 8018a6c:	e6cf      	b.n	801880e <lv_textarea_event+0xfa>
        click_outside_label = true;
 8018a6e:	2301      	movs	r3, #1
        char_id_at_click = LV_TEXTAREA_CURSOR_LAST;
 8018a70:	f647 77ff 	movw	r7, #32767	; 0x7fff
 8018a74:	e6cb      	b.n	801880e <lv_textarea_event+0xfa>
        else if(ta->text_sel_in_prog && code == LV_EVENT_PRESSING) {
 8018a76:	2e02      	cmp	r6, #2
 8018a78:	d00f      	beq.n	8018a9a <lv_textarea_event+0x386>
        else if(ta->text_sel_in_prog && (code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED)) {
 8018a7a:	2e03      	cmp	r6, #3
 8018a7c:	d002      	beq.n	8018a84 <lv_textarea_event+0x370>
 8018a7e:	2e08      	cmp	r6, #8
 8018a80:	f47f aee1 	bne.w	8018846 <lv_textarea_event+0x132>
            lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8018a84:	4620      	mov	r0, r4
 8018a86:	f44f 7140 	mov.w	r1, #768	; 0x300
 8018a8a:	f002 ff6e 	bl	801b96a <lv_obj_add_flag>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 8018a8e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8018a92:	07d8      	lsls	r0, r3, #31
 8018a94:	f57f aefe 	bpl.w	8018894 <lv_textarea_event+0x180>
 8018a98:	e6d5      	b.n	8018846 <lv_textarea_event+0x132>
            ta->sel_end = char_id_at_click;
 8018a9a:	65e7      	str	r7, [r4, #92]	; 0x5c
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 8018a9c:	e6d3      	b.n	8018846 <lv_textarea_event+0x132>
 8018a9e:	2900      	cmp	r1, #0
 8018aa0:	f47f aed1 	bne.w	8018846 <lv_textarea_event+0x132>
 8018aa4:	2e01      	cmp	r6, #1
 8018aa6:	f47f aef5 	bne.w	8018894 <lv_textarea_event+0x180>
 8018aaa:	e6cc      	b.n	8018846 <lv_textarea_event+0x132>
        else if(ta->sel_start < ta->sel_end) {
 8018aac:	d208      	bcs.n	8018ac0 <lv_textarea_event+0x3ac>
            if(label_data->sel_start != ta->sel_start || label_data->sel_end != ta->sel_end) {
 8018aae:	428b      	cmp	r3, r1
 8018ab0:	d103      	bne.n	8018aba <lv_textarea_event+0x3a6>
 8018ab2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8018ab4:	428a      	cmp	r2, r1
 8018ab6:	f43f aedf 	beq.w	8018878 <lv_textarea_event+0x164>
                label_data->sel_start = ta->sel_start;
 8018aba:	63eb      	str	r3, [r5, #60]	; 0x3c
                label_data->sel_end   = ta->sel_end;
 8018abc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8018abe:	e6d7      	b.n	8018870 <lv_textarea_event+0x15c>
            if(label_data->sel_start != LV_DRAW_LABEL_NO_TXT_SEL || label_data->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8018ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ac4:	4299      	cmp	r1, r3
 8018ac6:	d103      	bne.n	8018ad0 <lv_textarea_event+0x3bc>
 8018ac8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8018aca:	429a      	cmp	r2, r3
 8018acc:	f43f aed4 	beq.w	8018878 <lv_textarea_event+0x164>
                label_data->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8018ad0:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018ad2:	e6cd      	b.n	8018870 <lv_textarea_event+0x15c>
    lv_obj_t * obj = lv_event_get_target(e);
 8018ad4:	4628      	mov	r0, r5
 8018ad6:	f002 fbc0 	bl	801b25a <lv_event_get_target>
 8018ada:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8018adc:	4628      	mov	r0, r5
 8018ade:	f002 fc15 	bl	801b30c <lv_event_get_draw_ctx>
 8018ae2:	4606      	mov	r6, r0
    const char * txt = lv_label_get_text(ta->label);
 8018ae4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018ae6:	f00e fa7e 	bl	8026fe6 <lv_label_get_text>
    if(txt[0] == '\0' && ta->placeholder_txt && ta->placeholder_txt[0] != 0) {
 8018aea:	7803      	ldrb	r3, [r0, #0]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	f47f aed1 	bne.w	8018894 <lv_textarea_event+0x180>
 8018af2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	f43f aecd 	beq.w	8018894 <lv_textarea_event+0x180>
 8018afa:	781b      	ldrb	r3, [r3, #0]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	f43f aec9 	beq.w	8018894 <lv_textarea_event+0x180>
        lv_draw_label_dsc_init(&ph_dsc);
 8018b02:	a80e      	add	r0, sp, #56	; 0x38
 8018b04:	f7ef f904 	bl	8007d10 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_TEXTAREA_PLACEHOLDER, &ph_dsc);
 8018b08:	aa0e      	add	r2, sp, #56	; 0x38
 8018b0a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018b0e:	4620      	mov	r0, r4
 8018b10:	f003 fb41 	bl	801c196 <lv_obj_init_draw_label_dsc>
        if(ta->one_line) ph_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 8018b14:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8018b18:	2100      	movs	r1, #0
 8018b1a:	4620      	mov	r0, r4
 8018b1c:	071a      	lsls	r2, r3, #28
 8018b1e:	f04f 0212 	mov.w	r2, #18
 8018b22:	bf42      	ittt	mi
 8018b24:	f89d 3055 	ldrbmi.w	r3, [sp, #85]	; 0x55
 8018b28:	f043 0302 	orrmi.w	r3, r3, #2
 8018b2c:	f88d 3055 	strbmi.w	r3, [sp, #85]	; 0x55
 8018b30:	f004 ffda 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8018b34:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8018b36:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8018b38:	2100      	movs	r1, #0
 8018b3a:	4620      	mov	r0, r4
 8018b3c:	f004 ffd4 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8018b40:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8018b42:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8018b44:	2100      	movs	r1, #0
 8018b46:	4620      	mov	r0, r4
 8018b48:	f004 ffce 	bl	801dae8 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 8018b4c:	8aa3      	ldrh	r3, [r4, #20]
        lv_area_move(&ph_coords, left + border_width, top + border_width);
 8018b4e:	fa15 f280 	uxtah	r2, r5, r0
 8018b52:	fa17 f180 	uxtah	r1, r7, r0
 8018b56:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018b5a:	a806      	add	r0, sp, #24
    dest->y1 = src->y1;
 8018b5c:	8ae3      	ldrh	r3, [r4, #22]
 8018b5e:	b212      	sxth	r2, r2
 8018b60:	b209      	sxth	r1, r1
 8018b62:	f8ad 301a 	strh.w	r3, [sp, #26]
    dest->x2 = src->x2;
 8018b66:	8b23      	ldrh	r3, [r4, #24]
 8018b68:	f8ad 301c 	strh.w	r3, [sp, #28]
    dest->y2 = src->y2;
 8018b6c:	8b63      	ldrh	r3, [r4, #26]
 8018b6e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018b72:	f00b fba1 	bl	80242b8 <lv_area_move>
        lv_draw_label(draw_ctx, &ph_dsc, &ph_coords, ta->placeholder_txt, NULL);
 8018b76:	2300      	movs	r3, #0
 8018b78:	aa06      	add	r2, sp, #24
 8018b7a:	a90e      	add	r1, sp, #56	; 0x38
 8018b7c:	4630      	mov	r0, r6
 8018b7e:	9300      	str	r3, [sp, #0]
 8018b80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        lv_draw_label(draw_ctx, &cur_label_dsc, &cur_area, letter_buf, NULL);
 8018b82:	f7ef f8dd 	bl	8007d40 <lv_draw_label>
 8018b86:	e685      	b.n	8018894 <lv_textarea_event+0x180>

08018b88 <lvgl_init>:
	return 0;
}
#endif /* CONFIG_LV_Z_POINTER_KSCAN */

static int lvgl_init(void)
{
 8018b88:	b570      	push	{r4, r5, r6, lr}
 8018b8a:	b086      	sub	sp, #24
 8018b8c:	4c40      	ldr	r4, [pc, #256]	; (8018c90 <lvgl_init+0x108>)
 8018b8e:	4620      	mov	r0, r4
 8018b90:	f00f fa38 	bl	8028004 <z_device_is_ready>

	const struct device *display_dev = DEVICE_DT_GET(DISPLAY_NODE);

	int err = 0;

	if (!device_is_ready(display_dev)) {
 8018b94:	4603      	mov	r3, r0
 8018b96:	b970      	cbnz	r0, 8018bb6 <lvgl_init+0x2e>
		LOG_ERR("Display device not ready.");
 8018b98:	4a3e      	ldr	r2, [pc, #248]	; (8018c94 <lvgl_init+0x10c>)
 8018b9a:	9205      	str	r2, [sp, #20]
 8018b9c:	2202      	movs	r2, #2
 8018b9e:	9204      	str	r2, [sp, #16]
		return -ENODEV;
 8018ba0:	f06f 0412 	mvn.w	r4, #18
 8018ba4:	aa04      	add	r2, sp, #16
 8018ba6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018baa:	483b      	ldr	r0, [pc, #236]	; (8018c98 <lvgl_init+0x110>)
 8018bac:	f7e9 f814 	bl	8001bd8 <z_impl_z_log_msg_static_create>
#ifdef CONFIG_LV_Z_POINTER_KSCAN
	lvgl_pointer_kscan_init();
#endif /* CONFIG_LV_Z_POINTER_KSCAN */

	return 0;
}
 8018bb0:	4620      	mov	r0, r4
 8018bb2:	b006      	add	sp, #24
 8018bb4:	bd70      	pop	{r4, r5, r6, pc}
	disp_data.display_dev = display_dev;
 8018bb6:	4e39      	ldr	r6, [pc, #228]	; (8018c9c <lvgl_init+0x114>)
	lv_init();
 8018bb8:	f7ec f8a8 	bl	8004d0c <lv_init>
					    capabilities)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	api->get_capabilities(dev, capabilities);
 8018bbc:	68a3      	ldr	r3, [r4, #8]
 8018bbe:	4620      	mov	r0, r4
	disp_data.display_dev = display_dev;
 8018bc0:	4631      	mov	r1, r6
 8018bc2:	69db      	ldr	r3, [r3, #28]
 8018bc4:	f841 4b04 	str.w	r4, [r1], #4
	lv_disp_drv_init(&disp_drv);
 8018bc8:	4c35      	ldr	r4, [pc, #212]	; (8018ca0 <lvgl_init+0x118>)
 8018bca:	4798      	blx	r3
 8018bcc:	4620      	mov	r0, r4
 8018bce:	f7f9 f9d7 	bl	8011f80 <lv_disp_drv_init>
	if (data->cap.x_resolution <= DISPLAY_WIDTH) {
 8018bd2:	88b3      	ldrh	r3, [r6, #4]
	disp_drv.user_data = (void *)&disp_data;
 8018bd4:	64e6      	str	r6, [r4, #76]	; 0x4c
	if (data->cap.x_resolution <= DISPLAY_WIDTH) {
 8018bd6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8018bda:	d812      	bhi.n	8018c02 <lvgl_init+0x7a>
	int err = 0;
 8018bdc:	2500      	movs	r5, #0
		disp_drv->hor_res = data->cap.x_resolution;
 8018bde:	8023      	strh	r3, [r4, #0]
	if (data->cap.y_resolution <= DISPLAY_HEIGHT) {
 8018be0:	88f3      	ldrh	r3, [r6, #6]
 8018be2:	4e30      	ldr	r6, [pc, #192]	; (8018ca4 <lvgl_init+0x11c>)
 8018be4:	2bf0      	cmp	r3, #240	; 0xf0
 8018be6:	d81a      	bhi.n	8018c1e <lvgl_init+0x96>
		disp_drv->ver_res = data->cap.y_resolution;
 8018be8:	8063      	strh	r3, [r4, #2]
	lv_disp_draw_buf_init(disp_drv->draw_buf, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
 8018bea:	2200      	movs	r2, #0
 8018bec:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8018bf0:	492d      	ldr	r1, [pc, #180]	; (8018ca8 <lvgl_init+0x120>)
 8018bf2:	4630      	mov	r0, r6
	disp_drv->draw_buf = &disp_buf;
 8018bf4:	60e6      	str	r6, [r4, #12]
	lv_disp_draw_buf_init(disp_drv->draw_buf, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
 8018bf6:	f00b fa8b 	bl	8024110 <lv_disp_draw_buf_init>
	if (err != 0) {
 8018bfa:	b325      	cbz	r5, 8018c46 <lvgl_init+0xbe>
		return -ENODEV;
 8018bfc:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8018c00:	e7d6      	b.n	8018bb0 <lvgl_init+0x28>
		LOG_ERR("Horizontal resolution is larger than maximum");
 8018c02:	4b2a      	ldr	r3, [pc, #168]	; (8018cac <lvgl_init+0x124>)
 8018c04:	9305      	str	r3, [sp, #20]
 8018c06:	2302      	movs	r3, #2
 8018c08:	9304      	str	r3, [sp, #16]
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	aa04      	add	r2, sp, #16
 8018c0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018c12:	4821      	ldr	r0, [pc, #132]	; (8018c98 <lvgl_init+0x110>)
 8018c14:	f7e8 ffe0 	bl	8001bd8 <z_impl_z_log_msg_static_create>
		err = -ENOTSUP;
 8018c18:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8018c1c:	e7e0      	b.n	8018be0 <lvgl_init+0x58>
		LOG_ERR("Vertical resolution is larger than maximum");
 8018c1e:	4b24      	ldr	r3, [pc, #144]	; (8018cb0 <lvgl_init+0x128>)
 8018c20:	9305      	str	r3, [sp, #20]
 8018c22:	2302      	movs	r3, #2
 8018c24:	9304      	str	r3, [sp, #16]
 8018c26:	2300      	movs	r3, #0
 8018c28:	aa04      	add	r2, sp, #16
 8018c2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018c2e:	481a      	ldr	r0, [pc, #104]	; (8018c98 <lvgl_init+0x110>)
 8018c30:	f7e8 ffd2 	bl	8001bd8 <z_impl_z_log_msg_static_create>
	lv_disp_draw_buf_init(disp_drv->draw_buf, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
 8018c34:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8018c38:	2200      	movs	r2, #0
 8018c3a:	491b      	ldr	r1, [pc, #108]	; (8018ca8 <lvgl_init+0x120>)
 8018c3c:	4630      	mov	r0, r6
	disp_drv->draw_buf = &disp_buf;
 8018c3e:	60e6      	str	r6, [r4, #12]
	lv_disp_draw_buf_init(disp_drv->draw_buf, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
 8018c40:	f00b fa66 	bl	8024110 <lv_disp_draw_buf_init>
	if (err != 0) {
 8018c44:	e7da      	b.n	8018bfc <lvgl_init+0x74>
	if (set_lvgl_rendering_cb(&disp_drv) != 0) {
 8018c46:	4816      	ldr	r0, [pc, #88]	; (8018ca0 <lvgl_init+0x118>)
 8018c48:	f000 f838 	bl	8018cbc <set_lvgl_rendering_cb>
 8018c4c:	4604      	mov	r4, r0
 8018c4e:	b158      	cbz	r0, 8018c68 <lvgl_init+0xe0>
		LOG_ERR("Display not supported.");
 8018c50:	4b18      	ldr	r3, [pc, #96]	; (8018cb4 <lvgl_init+0x12c>)
 8018c52:	9305      	str	r3, [sp, #20]
 8018c54:	2302      	movs	r3, #2
 8018c56:	9304      	str	r3, [sp, #16]
 8018c58:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018c5c:	462b      	mov	r3, r5
 8018c5e:	aa04      	add	r2, sp, #16
 8018c60:	480d      	ldr	r0, [pc, #52]	; (8018c98 <lvgl_init+0x110>)
 8018c62:	f7e8 ffb9 	bl	8001bd8 <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
 8018c66:	e7c9      	b.n	8018bfc <lvgl_init+0x74>
	if (lv_disp_drv_register(&disp_drv) == NULL) {
 8018c68:	480d      	ldr	r0, [pc, #52]	; (8018ca0 <lvgl_init+0x118>)
 8018c6a:	f7f9 f9ad 	bl	8011fc8 <lv_disp_drv_register>
 8018c6e:	2800      	cmp	r0, #0
 8018c70:	d19e      	bne.n	8018bb0 <lvgl_init+0x28>
		LOG_ERR("Failed to register display device.");
 8018c72:	4b11      	ldr	r3, [pc, #68]	; (8018cb8 <lvgl_init+0x130>)
 8018c74:	9305      	str	r3, [sp, #20]
 8018c76:	2302      	movs	r3, #2
 8018c78:	9304      	str	r3, [sp, #16]
 8018c7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018c7e:	462b      	mov	r3, r5
 8018c80:	aa04      	add	r2, sp, #16
 8018c82:	4805      	ldr	r0, [pc, #20]	; (8018c98 <lvgl_init+0x110>)
 8018c84:	f7e8 ffa8 	bl	8001bd8 <z_impl_z_log_msg_static_create>
		return -EPERM;
 8018c88:	f04f 34ff 	mov.w	r4, #4294967295
 8018c8c:	e790      	b.n	8018bb0 <lvgl_init+0x28>
 8018c8e:	bf00      	nop
 8018c90:	080284d8 	.word	0x080284d8
 8018c94:	0802e023 	.word	0x0802e023
 8018c98:	08028a3c 	.word	0x08028a3c
 8018c9c:	24010c4c 	.word	0x24010c4c
 8018ca0:	24010c64 	.word	0x24010c64
 8018ca4:	24010c30 	.word	0x24010c30
 8018ca8:	24009430 	.word	0x24009430
 8018cac:	0802e03d 	.word	0x0802e03d
 8018cb0:	0802e06a 	.word	0x0802e06a
 8018cb4:	0802e095 	.word	0x0802e095
 8018cb8:	0802e0ac 	.word	0x0802e0ac

08018cbc <set_lvgl_rendering_cb>:
#include <errno.h>

#include "lvgl_display.h"

int set_lvgl_rendering_cb(lv_disp_drv_t *disp_drv)
{
 8018cbc:	b510      	push	{r4, lr}
	int err = 0;
	struct lvgl_disp_data *data =
		(struct lvgl_disp_data *)disp_drv->user_data;

	switch (data->cap.current_pixel_format) {
 8018cbe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 8018cc0:	4604      	mov	r4, r0
	switch (data->cap.current_pixel_format) {
 8018cc2:	7c1b      	ldrb	r3, [r3, #16]
 8018cc4:	2b08      	cmp	r3, #8
 8018cc6:	d80e      	bhi.n	8018ce6 <set_lvgl_rendering_cb+0x2a>
 8018cc8:	b193      	cbz	r3, 8018cf0 <set_lvgl_rendering_cb+0x34>
 8018cca:	3b01      	subs	r3, #1
 8018ccc:	2b07      	cmp	r3, #7
 8018cce:	d80e      	bhi.n	8018cee <set_lvgl_rendering_cb+0x32>
 8018cd0:	e8df f003 	tbb	[pc, r3]
 8018cd4:	130d1304 	.word	0x130d1304
 8018cd8:	1b0d0d0d 	.word	0x1b0d0d0d
 8018cdc:	4b0f      	ldr	r3, [pc, #60]	; (8018d1c <set_lvgl_rendering_cb+0x60>)
 8018cde:	2200      	movs	r2, #0
 8018ce0:	490f      	ldr	r1, [pc, #60]	; (8018d20 <set_lvgl_rendering_cb+0x64>)
	int err = 0;
 8018ce2:	4610      	mov	r0, r2
 8018ce4:	e00d      	b.n	8018d02 <set_lvgl_rendering_cb+0x46>
	switch (data->cap.current_pixel_format) {
 8018ce6:	2b10      	cmp	r3, #16
 8018ce8:	d013      	beq.n	8018d12 <set_lvgl_rendering_cb+0x56>
 8018cea:	2b20      	cmp	r3, #32
 8018cec:	d011      	beq.n	8018d12 <set_lvgl_rendering_cb+0x56>
 8018cee:	2300      	movs	r3, #0
 8018cf0:	461a      	mov	r2, r3
 8018cf2:	4619      	mov	r1, r3
		break;
	default:
		disp_drv->flush_cb = NULL;
		disp_drv->rounder_cb = NULL;
		disp_drv->set_px_cb = NULL;
		err = -ENOTSUP;
 8018cf4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8018cf8:	e003      	b.n	8018d02 <set_lvgl_rendering_cb+0x46>
		break;
 8018cfa:	4b0a      	ldr	r3, [pc, #40]	; (8018d24 <set_lvgl_rendering_cb+0x68>)
	int err = 0;
 8018cfc:	2000      	movs	r0, #0
		break;
 8018cfe:	4a0a      	ldr	r2, [pc, #40]	; (8018d28 <set_lvgl_rendering_cb+0x6c>)
 8018d00:	490a      	ldr	r1, [pc, #40]	; (8018d2c <set_lvgl_rendering_cb+0x70>)
		disp_drv->set_px_cb = lvgl_set_px_cb_24bit;
 8018d02:	61e1      	str	r1, [r4, #28]
		disp_drv->rounder_cb = NULL;
 8018d04:	e9c4 3205 	strd	r3, r2, [r4, #20]
		break;

	}

	return err;
}
 8018d08:	bd10      	pop	{r4, pc}
	switch (data->cap.current_pixel_format) {
 8018d0a:	4b09      	ldr	r3, [pc, #36]	; (8018d30 <set_lvgl_rendering_cb+0x74>)
 8018d0c:	2200      	movs	r2, #0
 8018d0e:	4909      	ldr	r1, [pc, #36]	; (8018d34 <set_lvgl_rendering_cb+0x78>)
 8018d10:	e7e7      	b.n	8018ce2 <set_lvgl_rendering_cb+0x26>
 8018d12:	2200      	movs	r2, #0
 8018d14:	4b08      	ldr	r3, [pc, #32]	; (8018d38 <set_lvgl_rendering_cb+0x7c>)
 8018d16:	4611      	mov	r1, r2
 8018d18:	e7e3      	b.n	8018ce2 <set_lvgl_rendering_cb+0x26>
 8018d1a:	bf00      	nop
 8018d1c:	08027e4f 	.word	0x08027e4f
 8018d20:	08027e9b 	.word	0x08027e9b
 8018d24:	08027c93 	.word	0x08027c93
 8018d28:	08027dcb 	.word	0x08027dcb
 8018d2c:	08027d41 	.word	0x08027d41
 8018d30:	08027f33 	.word	0x08027f33
 8018d34:	08027f7d 	.word	0x08027f7d
 8018d38:	08027e05 	.word	0x08027e05

08018d3c <lvgl_heap_init>:
	k_spin_unlock(&lvgl_heap_lock, key);
}

static int lvgl_heap_init(void)
{
	sys_heap_init(&lvgl_heap, &lvgl_heap_mem[0], HEAP_BYTES);
 8018d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018d40:	4903      	ldr	r1, [pc, #12]	; (8018d50 <lvgl_heap_init+0x14>)
 8018d42:	4804      	ldr	r0, [pc, #16]	; (8018d54 <lvgl_heap_init+0x18>)
{
 8018d44:	b508      	push	{r3, lr}
	sys_heap_init(&lvgl_heap, &lvgl_heap_mem[0], HEAP_BYTES);
 8018d46:	f001 f92b 	bl	8019fa0 <sys_heap_init>
	return 0;
}
 8018d4a:	2000      	movs	r0, #0
 8018d4c:	bd08      	pop	{r3, pc}
 8018d4e:	bf00      	nop
 8018d50:	240006b0 	.word	0x240006b0
 8018d54:	24010cb4 	.word	0x24010cb4

08018d58 <z_impl_k_busy_wait>:
#include <zephyr/drivers/timer/system_timer.h>
#include <zephyr/sys_clock.h>
#include <kernel_arch_interface.h>

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8018d58:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8018d5a:	4604      	mov	r4, r0
 8018d5c:	b178      	cbz	r0, 8018d7e <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8018d5e:	f7eb fb7b 	bl	8004458 <sys_clock_cycle_get_32>
 8018d62:	4605      	mov	r5, r0
#elif defined(CONFIG_SYS_CLOCK_EXISTS)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8018d64:	4806      	ldr	r0, [pc, #24]	; (8018d80 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8018d66:	2300      	movs	r3, #0
 8018d68:	4a06      	ldr	r2, [pc, #24]	; (8018d84 <z_impl_k_busy_wait+0x2c>)
 8018d6a:	fba4 0100 	umull	r0, r1, r4, r0
 8018d6e:	f7e7 faad 	bl	80002cc <__aeabi_uldivmod>
 8018d72:	4604      	mov	r4, r0
 8018d74:	f7eb fb70 	bl	8004458 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8018d78:	1b43      	subs	r3, r0, r5
 8018d7a:	42a3      	cmp	r3, r4
 8018d7c:	d3fa      	bcc.n	8018d74 <z_impl_k_busy_wait+0x1c>
		arch_nop();
	}
#endif

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8018d7e:	bd38      	pop	{r3, r4, r5, pc}
 8018d80:	20c85580 	.word	0x20c85580
 8018d84:	000f4240 	.word	0x000f4240

08018d88 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8018d88:	b510      	push	{r4, lr}
 8018d8a:	4604      	mov	r4, r0
 8018d8c:	b086      	sub	sp, #24
	z_impl_log_panic();
 8018d8e:	f7e8 fe43 	bl	8001a18 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 8018d92:	4b07      	ldr	r3, [pc, #28]	; (8018db0 <k_sys_fatal_error_handler+0x28>)
 8018d94:	9305      	str	r3, [sp, #20]
 8018d96:	2302      	movs	r3, #2
 8018d98:	9304      	str	r3, [sp, #16]
 8018d9a:	4806      	ldr	r0, [pc, #24]	; (8018db4 <k_sys_fatal_error_handler+0x2c>)
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	aa04      	add	r2, sp, #16
 8018da0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018da4:	f7e8 ff18 	bl	8001bd8 <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
 8018da8:	4620      	mov	r0, r4
 8018daa:	f00f f936 	bl	802801a <arch_system_halt>
 8018dae:	bf00      	nop
 8018db0:	0802e0d4 	.word	0x0802e0d4
 8018db4:	08028a4c 	.word	0x08028a4c

08018db8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8018db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018dbc:	b086      	sub	sp, #24
 8018dbe:	4605      	mov	r5, r0
 8018dc0:	460e      	mov	r6, r1
 8018dc2:	af00      	add	r7, sp, #0
	__asm__ volatile(
 8018dc4:	f04f 0310 	mov.w	r3, #16
 8018dc8:	f3ef 8811 	mrs	r8, BASEPRI
 8018dcc:	f383 8812 	msr	BASEPRI_MAX, r3
 8018dd0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8018dd4:	f000 fcfe 	bl	80197d4 <z_impl_z_current_get>
 8018dd8:	2d04      	cmp	r5, #4
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8018dda:	46e9      	mov	r9, sp
 8018ddc:	b08a      	sub	sp, #40	; 0x28
 8018dde:	bf98      	it	ls
 8018de0:	4b2c      	ldrls	r3, [pc, #176]	; (8018e94 <z_fatal_error+0xdc>)
 8018de2:	4604      	mov	r4, r0
 8018de4:	bf88      	it	hi
 8018de6:	4b2c      	ldrhi	r3, [pc, #176]	; (8018e98 <z_fatal_error+0xe0>)
 8018de8:	466a      	mov	r2, sp
 8018dea:	bf98      	it	ls
 8018dec:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
 8018df0:	61d3      	str	r3, [r2, #28]
 8018df2:	f240 3301 	movw	r3, #769	; 0x301
 8018df6:	4929      	ldr	r1, [pc, #164]	; (8018e9c <z_fatal_error+0xe4>)
 8018df8:	f04f 0a00 	mov.w	sl, #0
 8018dfc:	8493      	strh	r3, [r2, #36]	; 0x24
 8018dfe:	4b28      	ldr	r3, [pc, #160]	; (8018ea0 <z_fatal_error+0xe8>)
 8018e00:	f8c2 a020 	str.w	sl, [r2, #32]
 8018e04:	e9c2 1505 	strd	r1, r5, [r2, #20]
 8018e08:	f842 3f10 	str.w	r3, [r2, #16]!
 8018e0c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 8018e10:	4653      	mov	r3, sl
 8018e12:	4824      	ldr	r0, [pc, #144]	; (8018ea4 <z_fatal_error+0xec>)
 8018e14:	f7e8 fee0 	bl	8001bd8 <z_impl_z_log_msg_static_create>
 8018e18:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8018e1a:	b17e      	cbz	r6, 8018e3c <z_fatal_error+0x84>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8018e1c:	69f3      	ldr	r3, [r6, #28]
 8018e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018e22:	b15b      	cbz	r3, 8018e3c <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
 8018e24:	4b20      	ldr	r3, [pc, #128]	; (8018ea8 <z_fatal_error+0xf0>)
 8018e26:	617b      	str	r3, [r7, #20]
 8018e28:	2302      	movs	r3, #2
 8018e2a:	613b      	str	r3, [r7, #16]
 8018e2c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018e30:	4653      	mov	r3, sl
 8018e32:	f107 0210 	add.w	r2, r7, #16
 8018e36:	481b      	ldr	r0, [pc, #108]	; (8018ea4 <z_fatal_error+0xec>)
 8018e38:	f7e8 fece 	bl	8001bd8 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8018e3c:	b12c      	cbz	r4, 8018e4a <z_fatal_error+0x92>
 8018e3e:	4620      	mov	r0, r4
 8018e40:	f00f f901 	bl	8028046 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 8018e44:	b108      	cbz	r0, 8018e4a <z_fatal_error+0x92>
 8018e46:	7803      	ldrb	r3, [r0, #0]
 8018e48:	b903      	cbnz	r3, 8018e4c <z_fatal_error+0x94>
		thread_name = "unknown";
 8018e4a:	4818      	ldr	r0, [pc, #96]	; (8018eac <z_fatal_error+0xf4>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8018e4c:	46e9      	mov	r9, sp
 8018e4e:	b08a      	sub	sp, #40	; 0x28
 8018e50:	466a      	mov	r2, sp
 8018e52:	4b17      	ldr	r3, [pc, #92]	; (8018eb0 <z_fatal_error+0xf8>)
 8018e54:	61d0      	str	r0, [r2, #28]
 8018e56:	e9c2 3405 	strd	r3, r4, [r2, #20]
 8018e5a:	f240 3301 	movw	r3, #769	; 0x301
 8018e5e:	8413      	strh	r3, [r2, #32]
 8018e60:	4b14      	ldr	r3, [pc, #80]	; (8018eb4 <z_fatal_error+0xfc>)
 8018e62:	f842 3f10 	str.w	r3, [r2, #16]!
 8018e66:	2300      	movs	r3, #0
 8018e68:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 8018e6c:	480d      	ldr	r0, [pc, #52]	; (8018ea4 <z_fatal_error+0xec>)
 8018e6e:	f7e8 feb3 	bl	8001bd8 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8018e72:	4631      	mov	r1, r6
 8018e74:	4628      	mov	r0, r5
 8018e76:	46cd      	mov	sp, r9
 8018e78:	f7ff ff86 	bl	8018d88 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8018e7c:	f388 8811 	msr	BASEPRI, r8
 8018e80:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8018e84:	4620      	mov	r0, r4
 8018e86:	f7e9 fe3d 	bl	8002b04 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8018e8a:	3718      	adds	r7, #24
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e92:	bf00      	nop
 8018e94:	08029b28 	.word	0x08029b28
 8018e98:	0802e0e3 	.word	0x0802e0e3
 8018e9c:	0802e0f9 	.word	0x0802e0f9
 8018ea0:	01000005 	.word	0x01000005
 8018ea4:	08028a4c 	.word	0x08028a4c
 8018ea8:	0802e121 	.word	0x0802e121
 8018eac:	0802e0f1 	.word	0x0802e0f1
 8018eb0:	0802e142 	.word	0x0802e142
 8018eb4:	01000004 	.word	0x01000004

08018eb8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8018eb8:	4b10      	ldr	r3, [pc, #64]	; (8018efc <z_sys_init_run_level+0x44>)
{
 8018eba:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8018ebc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8018ec0:	3001      	adds	r0, #1
 8018ec2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8018ec6:	42a6      	cmp	r6, r4
 8018ec8:	d800      	bhi.n	8018ecc <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
 8018eca:	bd70      	pop	{r4, r5, r6, pc}
			if (entry->init_fn.dev != NULL) {
 8018ecc:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
 8018ed0:	b195      	cbz	r5, 8018ef8 <z_sys_init_run_level+0x40>
			if (entry->init_fn.dev != NULL) {
 8018ed2:	b153      	cbz	r3, 8018eea <z_sys_init_run_level+0x32>
				rc = entry->init_fn.dev(dev);
 8018ed4:	4628      	mov	r0, r5
 8018ed6:	4798      	blx	r3
				if (rc != 0) {
 8018ed8:	b138      	cbz	r0, 8018eea <z_sys_init_run_level+0x32>
					if (rc < 0) {
 8018eda:	2800      	cmp	r0, #0
					dev->state->init_res = rc;
 8018edc:	68eb      	ldr	r3, [r5, #12]
					if (rc < 0) {
 8018ede:	bfb8      	it	lt
 8018ee0:	4240      	neglt	r0, r0
					if (rc > UINT8_MAX) {
 8018ee2:	28ff      	cmp	r0, #255	; 0xff
 8018ee4:	bfa8      	it	ge
 8018ee6:	20ff      	movge	r0, #255	; 0xff
					dev->state->init_res = rc;
 8018ee8:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8018eea:	68ea      	ldr	r2, [r5, #12]
 8018eec:	7853      	ldrb	r3, [r2, #1]
 8018eee:	f043 0301 	orr.w	r3, r3, #1
 8018ef2:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8018ef4:	3408      	adds	r4, #8
 8018ef6:	e7e6      	b.n	8018ec6 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
 8018ef8:	4798      	blx	r3
 8018efa:	e7fb      	b.n	8018ef4 <z_sys_init_run_level+0x3c>
 8018efc:	08029b3c 	.word	0x08029b3c

08018f00 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8018f00:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8018f02:	2003      	movs	r0, #3
{
 8018f04:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8018f06:	4b09      	ldr	r3, [pc, #36]	; (8018f2c <bg_thread_main+0x2c>)
 8018f08:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8018f0a:	f7ff ffd5 	bl	8018eb8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8018f0e:	f000 fed7 	bl	8019cc0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 8018f12:	2004      	movs	r0, #4
 8018f14:	f7ff ffd0 	bl	8018eb8 <z_sys_init_run_level>

	z_init_static_threads();
 8018f18:	f000 f932 	bl	8019180 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
 8018f1c:	f7e7 fb40 	bl	80005a0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8018f20:	4a03      	ldr	r2, [pc, #12]	; (8018f30 <bg_thread_main+0x30>)
 8018f22:	7b13      	ldrb	r3, [r2, #12]
 8018f24:	f023 0301 	bic.w	r3, r3, #1
 8018f28:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8018f2a:	bd08      	pop	{r3, pc}
 8018f2c:	24010e3e 	.word	0x24010e3e
 8018f30:	24000f30 	.word	0x24000f30

08018f34 <z_bss_zero>:
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8018f34:	4806      	ldr	r0, [pc, #24]	; (8018f50 <z_bss_zero+0x1c>)
 8018f36:	2100      	movs	r1, #0
 8018f38:	4a06      	ldr	r2, [pc, #24]	; (8018f54 <z_bss_zero+0x20>)
{
 8018f3a:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8018f3c:	1a12      	subs	r2, r2, r0
 8018f3e:	f00f f875 	bl	802802c <z_early_memset>
		       - (uintptr_t) &__dtcm_bss_start);
 8018f42:	4805      	ldr	r0, [pc, #20]	; (8018f58 <z_bss_zero+0x24>)
	z_early_memset(&__dtcm_bss_start, 0,
 8018f44:	4a05      	ldr	r2, [pc, #20]	; (8018f5c <z_bss_zero+0x28>)
 8018f46:	2100      	movs	r1, #0
 8018f48:	1a12      	subs	r2, r2, r0
 8018f4a:	f00f f86f 	bl	802802c <z_early_memset>
}
 8018f4e:	bd08      	pop	{r3, pc}
 8018f50:	240001e0 	.word	0x240001e0
 8018f54:	24010e40 	.word	0x24010e40
 8018f58:	20000000 	.word	0x20000000
 8018f5c:	20000000 	.word	0x20000000

08018f60 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8018f60:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 8018f62:	2300      	movs	r3, #0
{
 8018f64:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 8018f66:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
 8018f68:	4e1a      	ldr	r6, [pc, #104]	; (8018fd4 <z_init_cpu+0x74>)
	z_setup_new_thread(thread, stack,
 8018f6a:	9301      	str	r3, [sp, #4]
{
 8018f6c:	4604      	mov	r4, r0
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8018f6e:	4d1a      	ldr	r5, [pc, #104]	; (8018fd8 <z_init_cpu+0x78>)
	struct k_thread *thread = &z_idle_threads[i];
 8018f70:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
 8018f74:	4919      	ldr	r1, [pc, #100]	; (8018fdc <z_init_cpu+0x7c>)
 8018f76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018f7a:	220f      	movs	r2, #15
 8018f7c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8018f80:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
 8018f82:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8018f86:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
 8018f8a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8018f8e:	4b14      	ldr	r3, [pc, #80]	; (8018fe0 <z_init_cpu+0x80>)
 8018f90:	fb00 1104 	mla	r1, r0, r4, r1
 8018f94:	4630      	mov	r0, r6
 8018f96:	9500      	str	r5, [sp, #0]
 8018f98:	f000 f894 	bl	80190c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8018f9c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8018f9e:	4a11      	ldr	r2, [pc, #68]	; (8018fe4 <z_init_cpu+0x84>)
 8018fa0:	f023 0304 	bic.w	r3, r3, #4
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8018fa4:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].id = id;
 8018fa6:	742c      	strb	r4, [r5, #16]
 8018fa8:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8018faa:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8018fae:	fb04 3303 	mla	r3, r4, r3, r3
 8018fb2:	4413      	add	r3, r2
	_kernel.cpus[id].irq_stack =
 8018fb4:	606b      	str	r3, [r5, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8018fb6:	f3bf 8f5b 	dmb	ish
 8018fba:	4b0b      	ldr	r3, [pc, #44]	; (8018fe8 <z_init_cpu+0x88>)
 8018fbc:	e853 1f00 	ldrex	r1, [r3]
 8018fc0:	3101      	adds	r1, #1
 8018fc2:	e843 1200 	strex	r2, r1, [r3]
 8018fc6:	2a00      	cmp	r2, #0
 8018fc8:	d1f8      	bne.n	8018fbc <z_init_cpu+0x5c>
 8018fca:	f3bf 8f5b 	dmb	ish
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
 8018fce:	b006      	add	sp, #24
 8018fd0:	bd70      	pop	{r4, r5, r6, pc}
 8018fd2:	bf00      	nop
 8018fd4:	24000eb0 	.word	0x24000eb0
 8018fd8:	24010cc4 	.word	0x24010cc4
 8018fdc:	240119c0 	.word	0x240119c0
 8018fe0:	0802804b 	.word	0x0802804b
 8018fe4:	24011180 	.word	0x24011180
 8018fe8:	24010cc0 	.word	0x24010cc0

08018fec <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 8018fec:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8018fee:	2000      	movs	r0, #0
{
 8018ff0:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8018ff2:	f7ff ff61 	bl	8018eb8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8018ff6:	4b2c      	ldr	r3, [pc, #176]	; (80190a8 <z_cstart+0xbc>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8018ff8:	f383 8808 	msr	MSP, r3
 8018ffc:	4d2b      	ldr	r5, [pc, #172]	; (80190ac <z_cstart+0xc0>)
 8018ffe:	2400      	movs	r4, #0
 8019000:	23f0      	movs	r3, #240	; 0xf0

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8019002:	4e2b      	ldr	r6, [pc, #172]	; (80190b0 <z_cstart+0xc4>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8019004:	4f2b      	ldr	r7, [pc, #172]	; (80190b4 <z_cstart+0xc8>)
 8019006:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 801900a:	77ec      	strb	r4, [r5, #31]
 801900c:	762c      	strb	r4, [r5, #24]
 801900e:	766c      	strb	r4, [r5, #25]
 8019010:	76ac      	strb	r4, [r5, #26]
 8019012:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8019016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019018:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 801901c:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 801901e:	f7e9 fd3d 	bl	8002a9c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8019022:	f7e9 f8c9 	bl	80021b8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8019026:	f04f 33ff 	mov.w	r3, #4294967295
 801902a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 801902c:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
 801902e:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8019030:	f7e9 fe38 	bl	8002ca4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8019034:	f7e9 fd7c 	bl	8002b30 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 8019038:	f7e8 fc60 	bl	80018fc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
 801903c:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
 8019040:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
 8019042:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
 8019046:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
 801904a:	f000 fe33 	bl	8019cb4 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
 801904e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8019050:	f00e ffd7 	bl	8028002 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 8019054:	2001      	movs	r0, #1
 8019056:	f7ff ff2f 	bl	8018eb8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 801905a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 801905c:	4d16      	ldr	r5, [pc, #88]	; (80190b8 <z_cstart+0xcc>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 801905e:	f7ff ff2b 	bl	8018eb8 <z_sys_init_run_level>
	z_sched_init();
 8019062:	f000 fb15 	bl	8019690 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8019066:	4b15      	ldr	r3, [pc, #84]	; (80190bc <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
 8019068:	6175      	str	r5, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 801906a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801906e:	9305      	str	r3, [sp, #20]
 8019070:	2301      	movs	r3, #1
 8019072:	4913      	ldr	r1, [pc, #76]	; (80190c0 <z_cstart+0xd4>)
 8019074:	4628      	mov	r0, r5
 8019076:	9400      	str	r4, [sp, #0]
 8019078:	e9cd 4303 	strd	r4, r3, [sp, #12]
 801907c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8019080:	463b      	mov	r3, r7
 8019082:	f000 f81f 	bl	80190c4 <z_setup_new_thread>
 8019086:	7b6a      	ldrb	r2, [r5, #13]
 8019088:	4606      	mov	r6, r0
	z_ready_thread(&z_main_thread);
 801908a:	4628      	mov	r0, r5
 801908c:	f022 0204 	bic.w	r2, r2, #4
 8019090:	736a      	strb	r2, [r5, #13]
 8019092:	f00f f82c 	bl	80280ee <z_ready_thread>
	z_init_cpu(0);
 8019096:	4620      	mov	r0, r4
 8019098:	f7ff ff62 	bl	8018f60 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 801909c:	463a      	mov	r2, r7
 801909e:	4631      	mov	r1, r6
 80190a0:	4628      	mov	r0, r5
 80190a2:	f7e9 f9cf 	bl	8002444 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 80190a6:	bf00      	nop
 80190a8:	240119c0 	.word	0x240119c0
 80190ac:	e000ed00 	.word	0xe000ed00
 80190b0:	24010cc4 	.word	0x24010cc4
 80190b4:	08018f01 	.word	0x08018f01
 80190b8:	24000f30 	.word	0x24000f30
 80190bc:	0802e1a4 	.word	0x0802e1a4
 80190c0:	24011b40 	.word	0x24011b40

080190c4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 80190c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 80190c8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 80190ca:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 80190ce:	460f      	mov	r7, r1
 80190d0:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
 80190d2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 80190d4:	2604      	movs	r6, #4

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 80190d6:	3740      	adds	r7, #64	; 0x40
 80190d8:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 80190da:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80190dc:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80190de:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80190e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80190e2:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 80190e6:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
 80190ea:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80190ec:	f106 0840 	add.w	r8, r6, #64	; 0x40
	thread_base->pended_on = NULL;
 80190f0:	6085      	str	r5, [r0, #8]
	stack_ptr = (char *)stack + stack_obj_size;
 80190f2:	4488      	add	r8, r1

	thread_base->sched_locked = 0U;
 80190f4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 80190f6:	66c5      	str	r5, [r0, #108]	; 0x6c
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 80190f8:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 80190fc:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8019100:	9202      	str	r2, [sp, #8]
 8019102:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019104:	9201      	str	r2, [sp, #4]
 8019106:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019108:	9200      	str	r2, [sp, #0]
 801910a:	4642      	mov	r2, r8
 801910c:	f7e9 f96e 	bl	80023ec <arch_new_thread>
	if (!_current) {
 8019110:	4b04      	ldr	r3, [pc, #16]	; (8019124 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 8019112:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8019114:	689b      	ldr	r3, [r3, #8]
 8019116:	b103      	cbz	r3, 801911a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8019118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 801911a:	4640      	mov	r0, r8
 801911c:	6723      	str	r3, [r4, #112]	; 0x70
 801911e:	b004      	add	sp, #16
 8019120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019124:	24010cc4 	.word	0x24010cc4

08019128 <z_impl_k_thread_create>:
{
 8019128:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 801912a:	2500      	movs	r5, #0
{
 801912c:	b087      	sub	sp, #28
 801912e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8019130:	9505      	str	r5, [sp, #20]
 8019132:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8019134:	9504      	str	r5, [sp, #16]
 8019136:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019138:	9503      	str	r5, [sp, #12]
 801913a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801913c:	9502      	str	r5, [sp, #8]
 801913e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019140:	9501      	str	r5, [sp, #4]
 8019142:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
 8019144:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8019148:	9500      	str	r5, [sp, #0]
 801914a:	f7ff ffbb 	bl	80190c4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 801914e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8019152:	bf08      	it	eq
 8019154:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 8019158:	d005      	beq.n	8019166 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 801915a:	ea56 0307 	orrs.w	r3, r6, r7
 801915e:	d105      	bne.n	801916c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 8019160:	4620      	mov	r0, r4
 8019162:	f000 fa15 	bl	8019590 <z_sched_start>
}
 8019166:	4620      	mov	r0, r4
 8019168:	b007      	add	sp, #28
 801916a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 801916c:	463a      	mov	r2, r7
 801916e:	4633      	mov	r3, r6
 8019170:	4902      	ldr	r1, [pc, #8]	; (801917c <z_impl_k_thread_create+0x54>)
 8019172:	f104 0018 	add.w	r0, r4, #24
 8019176:	f000 fbff 	bl	8019978 <z_add_timeout>
 801917a:	e7f4      	b.n	8019166 <z_impl_k_thread_create+0x3e>
 801917c:	08028177 	.word	0x08028177

08019180 <z_init_static_threads>:
{
 8019180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019182:	4c21      	ldr	r4, [pc, #132]	; (8019208 <z_init_static_threads+0x88>)
 8019184:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
 8019186:	4d21      	ldr	r5, [pc, #132]	; (801920c <z_init_static_threads+0x8c>)
 8019188:	4626      	mov	r6, r4
 801918a:	342c      	adds	r4, #44	; 0x2c
 801918c:	42ae      	cmp	r6, r5
 801918e:	d30b      	bcc.n	80191a8 <z_init_static_threads+0x28>
	_FOREACH_STATIC_THREAD(thread_data) {
 8019190:	4c1d      	ldr	r4, [pc, #116]	; (8019208 <z_init_static_threads+0x88>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8019192:	260a      	movs	r6, #10
 8019194:	4f1e      	ldr	r7, [pc, #120]	; (8019210 <z_init_static_threads+0x90>)
	k_sched_lock();
 8019196:	f000 fa4b 	bl	8019630 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 801919a:	42ac      	cmp	r4, r5
 801919c:	d320      	bcc.n	80191e0 <z_init_static_threads+0x60>
}
 801919e:	b007      	add	sp, #28
 80191a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80191a4:	f000 ba58 	b.w	8019658 <k_sched_unlock>
		z_setup_new_thread(
 80191a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80191ac:	9305      	str	r3, [sp, #20]
 80191ae:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80191b2:	9304      	str	r3, [sp, #16]
 80191b4:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80191b8:	9303      	str	r3, [sp, #12]
 80191ba:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80191be:	9302      	str	r3, [sp, #8]
 80191c0:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80191c4:	9301      	str	r3, [sp, #4]
 80191c6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80191ca:	9300      	str	r3, [sp, #0]
 80191cc:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
 80191d0:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
 80191d4:	f7ff ff76 	bl	80190c4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80191d8:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 80191dc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80191de:	e7d3      	b.n	8019188 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80191e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80191e2:	1c53      	adds	r3, r2, #1
 80191e4:	d009      	beq.n	80191fa <z_init_static_threads+0x7a>
					    K_MSEC(thread_data->init_delay));
 80191e6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			schedule_new_thread(thread_data->init_thread,
 80191ea:	6820      	ldr	r0, [r4, #0]
 80191ec:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80191f0:	ea52 0103 	orrs.w	r1, r2, r3
 80191f4:	d103      	bne.n	80191fe <z_init_static_threads+0x7e>
	z_sched_start(thread);
 80191f6:	f000 f9cb 	bl	8019590 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 80191fa:	342c      	adds	r4, #44	; 0x2c
 80191fc:	e7cd      	b.n	801919a <z_init_static_threads+0x1a>
 80191fe:	4639      	mov	r1, r7
 8019200:	3018      	adds	r0, #24
 8019202:	f000 fbb9 	bl	8019978 <z_add_timeout>
 8019206:	e7f8      	b.n	80191fa <z_init_static_threads+0x7a>
 8019208:	08028a04 	.word	0x08028a04
 801920c:	08028a04 	.word	0x08028a04
 8019210:	08028177 	.word	0x08028177

08019214 <z_impl_k_sem_give>:
	return false;
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8019214:	b538      	push	{r3, r4, r5, lr}
 8019216:	4604      	mov	r4, r0
	__asm__ volatile(
 8019218:	f04f 0310 	mov.w	r3, #16
 801921c:	f3ef 8511 	mrs	r5, BASEPRI
 8019220:	f383 8812 	msr	BASEPRI_MAX, r3
 8019224:	f3bf 8f6f 	isb	sy
	struct k_thread *thread;
	bool resched = true;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8019228:	f00e ffc0 	bl	80281ac <z_unpend_first_thread>

	if (thread != NULL) {
 801922c:	b148      	cbz	r0, 8019242 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 801922e:	2200      	movs	r2, #0
 8019230:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8019232:	f00e ff5c 	bl	80280ee <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		resched = handle_poll_events(sem);
	}

	if (resched) {
		z_reschedule(&lock, key);
 8019236:	4629      	mov	r1, r5
 8019238:	4807      	ldr	r0, [pc, #28]	; (8019258 <z_impl_k_sem_give+0x44>)
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 801923a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
 801923e:	f000 b995 	b.w	801956c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8019242:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8019246:	429a      	cmp	r2, r3
 8019248:	bf18      	it	ne
 801924a:	3301      	addne	r3, #1
 801924c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 801924e:	f385 8811 	msr	BASEPRI, r5
 8019252:	f3bf 8f6f 	isb	sy
}
 8019256:	bd38      	pop	{r3, r4, r5, pc}
 8019258:	24010e3f 	.word	0x24010e3f

0801925c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 801925c:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
 801925e:	f04f 0410 	mov.w	r4, #16
 8019262:	f3ef 8111 	mrs	r1, BASEPRI
 8019266:	f384 8812 	msr	BASEPRI_MAX, r4
 801926a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 801926e:	6884      	ldr	r4, [r0, #8]
 8019270:	b144      	cbz	r4, 8019284 <z_impl_k_sem_take+0x28>
		sem->count--;
 8019272:	3c01      	subs	r4, #1
 8019274:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8019276:	f381 8811 	msr	BASEPRI, r1
 801927a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 801927e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8019280:	b002      	add	sp, #8
 8019282:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8019284:	ea52 0403 	orrs.w	r4, r2, r3
 8019288:	d106      	bne.n	8019298 <z_impl_k_sem_take+0x3c>
 801928a:	f381 8811 	msr	BASEPRI, r1
 801928e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8019292:	f06f 000f 	mvn.w	r0, #15
 8019296:	e7f3      	b.n	8019280 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8019298:	e9cd 2300 	strd	r2, r3, [sp]
 801929c:	4602      	mov	r2, r0
 801929e:	4802      	ldr	r0, [pc, #8]	; (80192a8 <z_impl_k_sem_take+0x4c>)
 80192a0:	f000 f946 	bl	8019530 <z_pend_curr>
	return ret;
 80192a4:	e7ec      	b.n	8019280 <z_impl_k_sem_take+0x24>
 80192a6:	bf00      	nop
 80192a8:	24010e3f 	.word	0x24010e3f

080192ac <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
 80192ac:	89c3      	ldrh	r3, [r0, #14]
 80192ae:	2b7f      	cmp	r3, #127	; 0x7f
 80192b0:	d812      	bhi.n	80192d8 <sliceable+0x2c>
	int ret = slice_ticks;
 80192b2:	4b0a      	ldr	r3, [pc, #40]	; (80192dc <sliceable+0x30>)
 80192b4:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
 80192b6:	b163      	cbz	r3, 80192d2 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80192b8:	4b09      	ldr	r3, [pc, #36]	; (80192e0 <sliceable+0x34>)
 80192ba:	f990 200e 	ldrsb.w	r2, [r0, #14]
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	429a      	cmp	r2, r3
 80192c2:	db09      	blt.n	80192d8 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
 80192c4:	7b43      	ldrb	r3, [r0, #13]
 80192c6:	06db      	lsls	r3, r3, #27
 80192c8:	d106      	bne.n	80192d8 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
 80192ca:	4b06      	ldr	r3, [pc, #24]	; (80192e4 <sliceable+0x38>)
 80192cc:	1ac3      	subs	r3, r0, r3
 80192ce:	bf18      	it	ne
 80192d0:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
 80192d2:	f003 0001 	and.w	r0, r3, #1
 80192d6:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
 80192d8:	2300      	movs	r3, #0
 80192da:	e7fa      	b.n	80192d2 <sliceable+0x26>
 80192dc:	24010cec 	.word	0x24010cec
 80192e0:	24010ce8 	.word	0x24010ce8
 80192e4:	24000eb0 	.word	0x24000eb0

080192e8 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
 80192e8:	4b04      	ldr	r3, [pc, #16]	; (80192fc <slice_timeout+0x14>)

	slice_expired[cpu] = true;
 80192ea:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
 80192ec:	1ac0      	subs	r0, r0, r3
 80192ee:	4b04      	ldr	r3, [pc, #16]	; (8019300 <slice_timeout+0x18>)
 80192f0:	10c0      	asrs	r0, r0, #3
 80192f2:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
 80192f4:	4b03      	ldr	r3, [pc, #12]	; (8019304 <slice_timeout+0x1c>)
 80192f6:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
 80192f8:	4770      	bx	lr
 80192fa:	bf00      	nop
 80192fc:	24000fb0 	.word	0x24000fb0
 8019300:	aaaaaaab 	.word	0xaaaaaaab
 8019304:	24010e3f 	.word	0x24010e3f

08019308 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
	int cpu = _current_cpu->id;
 8019308:	4b0e      	ldr	r3, [pc, #56]	; (8019344 <z_reset_time_slice+0x3c>)
{
 801930a:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
 801930c:	7c1e      	ldrb	r6, [r3, #16]
{
 801930e:	4605      	mov	r5, r0

	z_abort_timeout(&slice_timeouts[cpu]);
 8019310:	4c0d      	ldr	r4, [pc, #52]	; (8019348 <z_reset_time_slice+0x40>)
 8019312:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8019316:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 801931a:	4620      	mov	r0, r4
 801931c:	f00e ff78 	bl	8028210 <z_abort_timeout>
	slice_expired[cpu] = false;
 8019320:	4b0a      	ldr	r3, [pc, #40]	; (801934c <z_reset_time_slice+0x44>)
 8019322:	2200      	movs	r2, #0
	if (sliceable(curr)) {
 8019324:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
 8019326:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
 8019328:	f7ff ffc0 	bl	80192ac <sliceable>
 801932c:	b148      	cbz	r0, 8019342 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
 801932e:	4b08      	ldr	r3, [pc, #32]	; (8019350 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 8019330:	4620      	mov	r0, r4
 8019332:	4908      	ldr	r1, [pc, #32]	; (8019354 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
 8019334:	681a      	ldr	r2, [r3, #0]
 8019336:	3a01      	subs	r2, #1
	}
}
 8019338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 801933c:	17d3      	asrs	r3, r2, #31
 801933e:	f000 bb1b 	b.w	8019978 <z_add_timeout>
}
 8019342:	bd70      	pop	{r4, r5, r6, pc}
 8019344:	24010cc4 	.word	0x24010cc4
 8019348:	24000fb0 	.word	0x24000fb0
 801934c:	24010e3f 	.word	0x24010e3f
 8019350:	24010cec 	.word	0x24010cec
 8019354:	080192e9 	.word	0x080192e9

08019358 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 8019358:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 801935a:	4d0d      	ldr	r5, [pc, #52]	; (8019390 <update_cache+0x38>)
 801935c:	462b      	mov	r3, r5
 801935e:	f853 4f18 	ldr.w	r4, [r3, #24]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019362:	429c      	cmp	r4, r3
 8019364:	d000      	beq.n	8019368 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8019366:	b904      	cbnz	r4, 801936a <update_cache+0x12>
 8019368:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 801936a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 801936c:	b938      	cbnz	r0, 801937e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 801936e:	7b5a      	ldrb	r2, [r3, #13]
 8019370:	06d2      	lsls	r2, r2, #27
 8019372:	d104      	bne.n	801937e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8019374:	69a2      	ldr	r2, [r4, #24]
 8019376:	b912      	cbnz	r2, 801937e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 8019378:	89da      	ldrh	r2, [r3, #14]
 801937a:	2a7f      	cmp	r2, #127	; 0x7f
 801937c:	d805      	bhi.n	801938a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 801937e:	429c      	cmp	r4, r3
 8019380:	d002      	beq.n	8019388 <update_cache+0x30>
			z_reset_time_slice(thread);
 8019382:	4620      	mov	r0, r4
 8019384:	f7ff ffc0 	bl	8019308 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 8019388:	4623      	mov	r3, r4
 801938a:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 801938c:	bd38      	pop	{r3, r4, r5, pc}
 801938e:	bf00      	nop
 8019390:	24010cc4 	.word	0x24010cc4

08019394 <move_thread_to_end_of_prio_q>:
{
 8019394:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8019396:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 801939a:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
 801939c:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 801939e:	2a00      	cmp	r2, #0
 80193a0:	da04      	bge.n	80193ac <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80193a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80193a6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 80193a8:	f00e fe67 	bl	802807a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 80193ac:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 80193ae:	4a15      	ldr	r2, [pc, #84]	; (8019404 <move_thread_to_end_of_prio_q+0x70>)
 80193b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80193b4:	4610      	mov	r0, r2
 80193b6:	734b      	strb	r3, [r1, #13]
 80193b8:	f850 3f18 	ldr.w	r3, [r0, #24]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 80193bc:	69d4      	ldr	r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80193be:	4283      	cmp	r3, r0
 80193c0:	bf08      	it	eq
 80193c2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80193c4:	b923      	cbnz	r3, 80193d0 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 80193c6:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 80193ca:	6021      	str	r1, [r4, #0]
	list->tail = node;
 80193cc:	61d1      	str	r1, [r2, #28]
}
 80193ce:	e00c      	b.n	80193ea <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 80193d0:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 80193d4:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 80193d8:	42b5      	cmp	r5, r6
 80193da:	d00e      	beq.n	80193fa <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80193dc:	42ae      	cmp	r6, r5
 80193de:	dd0c      	ble.n	80193fa <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 80193e0:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 80193e2:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 80193e6:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 80193e8:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 80193ea:	6890      	ldr	r0, [r2, #8]
 80193ec:	1a43      	subs	r3, r0, r1
 80193ee:	4258      	negs	r0, r3
}
 80193f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80193f4:	4158      	adcs	r0, r3
 80193f6:	f7ff bfaf 	b.w	8019358 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80193fa:	429c      	cmp	r4, r3
 80193fc:	d0e3      	beq.n	80193c6 <move_thread_to_end_of_prio_q+0x32>
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	e7e0      	b.n	80193c4 <move_thread_to_end_of_prio_q+0x30>
 8019402:	bf00      	nop
 8019404:	24010cc4 	.word	0x24010cc4

08019408 <ready_thread>:
{
 8019408:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 801940a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801940e:	7b42      	ldrb	r2, [r0, #13]
 8019410:	2b00      	cmp	r3, #0
 8019412:	db29      	blt.n	8019468 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8019414:	06d3      	lsls	r3, r2, #27
 8019416:	d127      	bne.n	8019468 <ready_thread+0x60>
	return node->next != NULL;
 8019418:	6983      	ldr	r3, [r0, #24]
 801941a:	bb2b      	cbnz	r3, 8019468 <ready_thread+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 801941c:	f062 027f 	orn	r2, r2, #127	; 0x7f
	return list->head == list;
 8019420:	4912      	ldr	r1, [pc, #72]	; (801946c <ready_thread+0x64>)
 8019422:	7342      	strb	r2, [r0, #13]
 8019424:	460a      	mov	r2, r1
 8019426:	f852 4f18 	ldr.w	r4, [r2, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801942a:	4294      	cmp	r4, r2
 801942c:	bf18      	it	ne
 801942e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 8019430:	69cc      	ldr	r4, [r1, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8019432:	b923      	cbnz	r3, 801943e <ready_thread+0x36>
	node->prev = tail;
 8019434:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 8019438:	6020      	str	r0, [r4, #0]
	list->tail = node;
 801943a:	61c8      	str	r0, [r1, #28]
}
 801943c:	e00c      	b.n	8019458 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 801943e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8019442:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8019446:	42b5      	cmp	r5, r6
 8019448:	d00a      	beq.n	8019460 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 801944a:	42ae      	cmp	r6, r5
 801944c:	dd08      	ble.n	8019460 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 801944e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8019450:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8019454:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8019456:	6058      	str	r0, [r3, #4]
		update_cache(0);
 8019458:	2000      	movs	r0, #0
}
 801945a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 801945c:	f7ff bf7c 	b.w	8019358 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8019460:	42a3      	cmp	r3, r4
 8019462:	d0e7      	beq.n	8019434 <ready_thread+0x2c>
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	e7e4      	b.n	8019432 <ready_thread+0x2a>
}
 8019468:	bc70      	pop	{r4, r5, r6}
 801946a:	4770      	bx	lr
 801946c:	24010cc4 	.word	0x24010cc4

08019470 <unready_thread>:
{
 8019470:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8019472:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 8019476:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
 8019478:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 801947a:	2a00      	cmp	r2, #0
 801947c:	da04      	bge.n	8019488 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 801947e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019482:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8019484:	f00e fdf9 	bl	802807a <sys_dlist_remove>
	update_cache(thread == _current);
 8019488:	4b04      	ldr	r3, [pc, #16]	; (801949c <unready_thread+0x2c>)
 801948a:	6898      	ldr	r0, [r3, #8]
 801948c:	1a43      	subs	r3, r0, r1
 801948e:	4258      	negs	r0, r3
 8019490:	4158      	adcs	r0, r3
}
 8019492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8019496:	f7ff bf5f 	b.w	8019358 <update_cache>
 801949a:	bf00      	nop
 801949c:	24010cc4 	.word	0x24010cc4

080194a0 <pend_locked>:
{
 80194a0:	b570      	push	{r4, r5, r6, lr}
 80194a2:	4615      	mov	r5, r2
 80194a4:	461c      	mov	r4, r3
 80194a6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 80194a8:	f00e fdf9 	bl	802809e <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80194ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 80194b0:	bf08      	it	eq
 80194b2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
 80194b6:	d008      	beq.n	80194ca <pend_locked+0x2a>
 80194b8:	462a      	mov	r2, r5
 80194ba:	4623      	mov	r3, r4
 80194bc:	f106 0018 	add.w	r0, r6, #24
 80194c0:	4902      	ldr	r1, [pc, #8]	; (80194cc <pend_locked+0x2c>)
}
 80194c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80194c6:	f000 ba57 	b.w	8019978 <z_add_timeout>
 80194ca:	bd70      	pop	{r4, r5, r6, pc}
 80194cc:	08028177 	.word	0x08028177

080194d0 <z_time_slice>:
{
 80194d0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80194d2:	f04f 0310 	mov.w	r3, #16
 80194d6:	f3ef 8511 	mrs	r5, BASEPRI
 80194da:	f383 8812 	msr	BASEPRI_MAX, r3
 80194de:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
 80194e2:	4b10      	ldr	r3, [pc, #64]	; (8019524 <z_time_slice+0x54>)
	if (pending_current == curr) {
 80194e4:	4a10      	ldr	r2, [pc, #64]	; (8019528 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
 80194e6:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
 80194e8:	6810      	ldr	r0, [r2, #0]
 80194ea:	42a0      	cmp	r0, r4
 80194ec:	d106      	bne.n	80194fc <z_time_slice+0x2c>
		z_reset_time_slice(curr);
 80194ee:	f7ff ff0b 	bl	8019308 <z_reset_time_slice>
	__asm__ volatile(
 80194f2:	f385 8811 	msr	BASEPRI, r5
 80194f6:	f3bf 8f6f 	isb	sy
}
 80194fa:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 80194fc:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 80194fe:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
 8019500:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 8019502:	4a0a      	ldr	r2, [pc, #40]	; (801952c <z_time_slice+0x5c>)
 8019504:	5cd3      	ldrb	r3, [r2, r3]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d0f3      	beq.n	80194f2 <z_time_slice+0x22>
 801950a:	4620      	mov	r0, r4
 801950c:	f7ff fece 	bl	80192ac <sliceable>
 8019510:	2800      	cmp	r0, #0
 8019512:	d0ee      	beq.n	80194f2 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
 8019514:	7b63      	ldrb	r3, [r4, #13]
 8019516:	06db      	lsls	r3, r3, #27
 8019518:	d102      	bne.n	8019520 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
 801951a:	4620      	mov	r0, r4
 801951c:	f7ff ff3a 	bl	8019394 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
 8019520:	4620      	mov	r0, r4
 8019522:	e7e4      	b.n	80194ee <z_time_slice+0x1e>
 8019524:	24010cc4 	.word	0x24010cc4
 8019528:	24010ce4 	.word	0x24010ce4
 801952c:	24010e3f 	.word	0x24010e3f

08019530 <z_pend_curr>:
	pending_current = _current;
 8019530:	480c      	ldr	r0, [pc, #48]	; (8019564 <z_pend_curr+0x34>)
{
 8019532:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 8019534:	4d0c      	ldr	r5, [pc, #48]	; (8019568 <z_pend_curr+0x38>)
{
 8019536:	460c      	mov	r4, r1
	pending_current = _current;
 8019538:	6886      	ldr	r6, [r0, #8]
{
 801953a:	4611      	mov	r1, r2
	pending_current = _current;
 801953c:	602e      	str	r6, [r5, #0]
{
 801953e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 8019542:	f04f 0610 	mov.w	r6, #16
 8019546:	f3ef 8511 	mrs	r5, BASEPRI
 801954a:	f386 8812 	msr	BASEPRI_MAX, r6
 801954e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 8019552:	6880      	ldr	r0, [r0, #8]
 8019554:	f7ff ffa4 	bl	80194a0 <pend_locked>
	ret = arch_swap(key);
 8019558:	4620      	mov	r0, r4
}
 801955a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801955e:	f7e8 bef1 	b.w	8002344 <arch_swap>
 8019562:	bf00      	nop
 8019564:	24010cc4 	.word	0x24010cc4
 8019568:	24010ce4 	.word	0x24010ce4

0801956c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 801956c:	b949      	cbnz	r1, 8019582 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801956e:	f3ef 8005 	mrs	r0, IPSR
 8019572:	b930      	cbnz	r0, 8019582 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8019574:	4b05      	ldr	r3, [pc, #20]	; (801958c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8019576:	695a      	ldr	r2, [r3, #20]
 8019578:	689b      	ldr	r3, [r3, #8]
 801957a:	429a      	cmp	r2, r3
 801957c:	d001      	beq.n	8019582 <z_reschedule+0x16>
 801957e:	f7e8 bee1 	b.w	8002344 <arch_swap>
	__asm__ volatile(
 8019582:	f381 8811 	msr	BASEPRI, r1
 8019586:	f3bf 8f6f 	isb	sy
}
 801958a:	4770      	bx	lr
 801958c:	24010cc4 	.word	0x24010cc4

08019590 <z_sched_start>:
{
 8019590:	b510      	push	{r4, lr}
	__asm__ volatile(
 8019592:	f04f 0210 	mov.w	r2, #16
 8019596:	f3ef 8411 	mrs	r4, BASEPRI
 801959a:	f382 8812 	msr	BASEPRI_MAX, r2
 801959e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80195a2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 80195a4:	0751      	lsls	r1, r2, #29
 80195a6:	d404      	bmi.n	80195b2 <z_sched_start+0x22>
	__asm__ volatile(
 80195a8:	f384 8811 	msr	BASEPRI, r4
 80195ac:	f3bf 8f6f 	isb	sy
}
 80195b0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80195b2:	f022 0204 	bic.w	r2, r2, #4
 80195b6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80195b8:	f7ff ff26 	bl	8019408 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80195bc:	4621      	mov	r1, r4
 80195be:	4802      	ldr	r0, [pc, #8]	; (80195c8 <z_sched_start+0x38>)
}
 80195c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80195c4:	f7ff bfd2 	b.w	801956c <z_reschedule>
 80195c8:	24010e40 	.word	0x24010e40

080195cc <z_impl_k_thread_suspend>:
{
 80195cc:	b570      	push	{r4, r5, r6, lr}
 80195ce:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80195d0:	3018      	adds	r0, #24
 80195d2:	f00e fe1d 	bl	8028210 <z_abort_timeout>
	__asm__ volatile(
 80195d6:	f04f 0310 	mov.w	r3, #16
 80195da:	f3ef 8611 	mrs	r6, BASEPRI
 80195de:	f383 8812 	msr	BASEPRI_MAX, r3
 80195e2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80195e6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 80195ea:	7b63      	ldrb	r3, [r4, #13]
 80195ec:	2a00      	cmp	r2, #0
 80195ee:	da05      	bge.n	80195fc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80195f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
 80195f4:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80195f6:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80195f8:	f00e fd3f 	bl	802807a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80195fc:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 80195fe:	4d0b      	ldr	r5, [pc, #44]	; (801962c <z_impl_k_thread_suspend+0x60>)
 8019600:	f043 0310 	orr.w	r3, r3, #16
 8019604:	68a8      	ldr	r0, [r5, #8]
 8019606:	7363      	strb	r3, [r4, #13]
 8019608:	1b03      	subs	r3, r0, r4
 801960a:	4258      	negs	r0, r3
 801960c:	4158      	adcs	r0, r3
 801960e:	f7ff fea3 	bl	8019358 <update_cache>
	__asm__ volatile(
 8019612:	f386 8811 	msr	BASEPRI, r6
 8019616:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 801961a:	68ab      	ldr	r3, [r5, #8]
 801961c:	42a3      	cmp	r3, r4
 801961e:	d103      	bne.n	8019628 <z_impl_k_thread_suspend+0x5c>
}
 8019620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8019624:	f00e bdea 	b.w	80281fc <z_reschedule_unlocked>
}
 8019628:	bd70      	pop	{r4, r5, r6, pc}
 801962a:	bf00      	nop
 801962c:	24010cc4 	.word	0x24010cc4

08019630 <k_sched_lock>:
	__asm__ volatile(
 8019630:	f04f 0310 	mov.w	r3, #16
 8019634:	f3ef 8111 	mrs	r1, BASEPRI
 8019638:	f383 8812 	msr	BASEPRI_MAX, r3
 801963c:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8019640:	4b04      	ldr	r3, [pc, #16]	; (8019654 <k_sched_lock+0x24>)
 8019642:	689a      	ldr	r2, [r3, #8]
 8019644:	7bd3      	ldrb	r3, [r2, #15]
 8019646:	3b01      	subs	r3, #1
 8019648:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 801964a:	f381 8811 	msr	BASEPRI, r1
 801964e:	f3bf 8f6f 	isb	sy
}
 8019652:	4770      	bx	lr
 8019654:	24010cc4 	.word	0x24010cc4

08019658 <k_sched_unlock>:
{
 8019658:	b510      	push	{r4, lr}
	__asm__ volatile(
 801965a:	f04f 0310 	mov.w	r3, #16
 801965e:	f3ef 8411 	mrs	r4, BASEPRI
 8019662:	f383 8812 	msr	BASEPRI_MAX, r3
 8019666:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 801966a:	4b08      	ldr	r3, [pc, #32]	; (801968c <k_sched_unlock+0x34>)
		update_cache(0);
 801966c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 801966e:	689a      	ldr	r2, [r3, #8]
 8019670:	7bd3      	ldrb	r3, [r2, #15]
 8019672:	3301      	adds	r3, #1
 8019674:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8019676:	f7ff fe6f 	bl	8019358 <update_cache>
	__asm__ volatile(
 801967a:	f384 8811 	msr	BASEPRI, r4
 801967e:	f3bf 8f6f 	isb	sy
}
 8019682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8019686:	f00e bdb9 	b.w	80281fc <z_reschedule_unlocked>
 801968a:	bf00      	nop
 801968c:	24010cc4 	.word	0x24010cc4

08019690 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8019690:	4b02      	ldr	r3, [pc, #8]	; (801969c <z_sched_init+0xc>)
 8019692:	f103 0218 	add.w	r2, r3, #24
	list->tail = (sys_dnode_t *)list;
 8019696:	e9c3 2206 	strd	r2, r2, [r3, #24]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
 801969a:	4770      	bx	lr
 801969c:	24010cc4 	.word	0x24010cc4

080196a0 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 80196a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80196a2:	f04f 0310 	mov.w	r3, #16
 80196a6:	f3ef 8511 	mrs	r5, BASEPRI
 80196aa:	f383 8812 	msr	BASEPRI_MAX, r3
 80196ae:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 80196b2:	4919      	ldr	r1, [pc, #100]	; (8019718 <z_impl_k_yield+0x78>)
 80196b4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80196b6:	7b43      	ldrb	r3, [r0, #13]
 80196b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80196bc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80196be:	f00e fcdc 	bl	802807a <sys_dlist_remove>
	}
	queue_thread(_current);
 80196c2:	688b      	ldr	r3, [r1, #8]
	return list->head == list;
 80196c4:	4608      	mov	r0, r1
	thread->base.thread_state |= _THREAD_QUEUED;
 80196c6:	7b5a      	ldrb	r2, [r3, #13]
 80196c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80196cc:	735a      	strb	r2, [r3, #13]
 80196ce:	f850 2f18 	ldr.w	r2, [r0, #24]!
	return (node == list->tail) ? NULL : node->next;
 80196d2:	69cc      	ldr	r4, [r1, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80196d4:	4282      	cmp	r2, r0
 80196d6:	bf08      	it	eq
 80196d8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80196da:	b922      	cbnz	r2, 80196e6 <z_impl_k_yield+0x46>
	node->prev = tail;
 80196dc:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
 80196e0:	6023      	str	r3, [r4, #0]
	list->tail = node;
 80196e2:	61cb      	str	r3, [r1, #28]
}
 80196e4:	e00c      	b.n	8019700 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
 80196e6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 80196ea:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 80196ee:	42be      	cmp	r6, r7
 80196f0:	d00e      	beq.n	8019710 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80196f2:	42b7      	cmp	r7, r6
 80196f4:	dd0c      	ble.n	8019710 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
 80196f6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 80196f8:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 80196fc:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 80196fe:	6053      	str	r3, [r2, #4]
	update_cache(1);
 8019700:	2001      	movs	r0, #1
 8019702:	f7ff fe29 	bl	8019358 <update_cache>
 8019706:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8019708:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801970c:	f7e8 be1a 	b.w	8002344 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 8019710:	42a2      	cmp	r2, r4
 8019712:	d0e3      	beq.n	80196dc <z_impl_k_yield+0x3c>
 8019714:	6812      	ldr	r2, [r2, #0]
 8019716:	e7e0      	b.n	80196da <z_impl_k_yield+0x3a>
 8019718:	24010cc4 	.word	0x24010cc4

0801971c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 801971c:	ea50 0301 	orrs.w	r3, r0, r1
{
 8019720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019724:	4605      	mov	r5, r0
 8019726:	460e      	mov	r6, r1
	if (ticks == 0) {
 8019728:	d103      	bne.n	8019732 <z_tick_sleep+0x16>
	z_impl_k_yield();
 801972a:	f7ff ffb9 	bl	80196a0 <z_impl_k_yield>
		k_yield();
		return 0;
 801972e:	2000      	movs	r0, #0
 8019730:	e02c      	b.n	801978c <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 8019732:	1c83      	adds	r3, r0, #2
 8019734:	f171 33ff 	sbcs.w	r3, r1, #4294967295
 8019738:	db2a      	blt.n	8019790 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 801973a:	f00e fd7f 	bl	802823c <sys_clock_tick_get_32>
 801973e:	182c      	adds	r4, r5, r0
 8019740:	f04f 0310 	mov.w	r3, #16
 8019744:	f3ef 8811 	mrs	r8, BASEPRI
 8019748:	f383 8812 	msr	BASEPRI_MAX, r3
 801974c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8019750:	4f11      	ldr	r7, [pc, #68]	; (8019798 <z_tick_sleep+0x7c>)
 8019752:	4b12      	ldr	r3, [pc, #72]	; (801979c <z_tick_sleep+0x80>)
 8019754:	68b8      	ldr	r0, [r7, #8]
 8019756:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 8019758:	f7ff fe8a 	bl	8019470 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 801975c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 801975e:	462a      	mov	r2, r5
 8019760:	490f      	ldr	r1, [pc, #60]	; (80197a0 <z_tick_sleep+0x84>)
 8019762:	4633      	mov	r3, r6
 8019764:	3018      	adds	r0, #24
 8019766:	f000 f907 	bl	8019978 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 801976a:	68ba      	ldr	r2, [r7, #8]
 801976c:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
 801976e:	7b53      	ldrb	r3, [r2, #13]
 8019770:	f043 0310 	orr.w	r3, r3, #16
 8019774:	7353      	strb	r3, [r2, #13]
 8019776:	f7e8 fde5 	bl	8002344 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 801977a:	f00e fd5f 	bl	802823c <sys_clock_tick_get_32>
 801977e:	1a20      	subs	r0, r4, r0
 8019780:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8019784:	2801      	cmp	r0, #1
 8019786:	f173 0300 	sbcs.w	r3, r3, #0
 801978a:	dbd0      	blt.n	801972e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
 801978c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8019790:	f06f 0401 	mvn.w	r4, #1
 8019794:	1a24      	subs	r4, r4, r0
 8019796:	e7d3      	b.n	8019740 <z_tick_sleep+0x24>
 8019798:	24010cc4 	.word	0x24010cc4
 801979c:	24010ce4 	.word	0x24010ce4
 80197a0:	08028177 	.word	0x08028177

080197a4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80197a4:	f1b1 3fff 	cmp.w	r1, #4294967295
 80197a8:	bf08      	it	eq
 80197aa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 80197ae:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80197b0:	d106      	bne.n	80197c0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 80197b2:	4b07      	ldr	r3, [pc, #28]	; (80197d0 <z_impl_k_sleep+0x2c>)
 80197b4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 80197b6:	f7ff ff09 	bl	80195cc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 80197ba:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 80197be:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 80197c0:	f7ff ffac 	bl	801971c <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 80197c4:	220a      	movs	r2, #10
 80197c6:	2300      	movs	r3, #0
 80197c8:	17c1      	asrs	r1, r0, #31
 80197ca:	f7e6 fd7f 	bl	80002cc <__aeabi_uldivmod>
	return ret;
 80197ce:	e7f6      	b.n	80197be <z_impl_k_sleep+0x1a>
 80197d0:	24010cc4 	.word	0x24010cc4

080197d4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 80197d4:	4b01      	ldr	r3, [pc, #4]	; (80197dc <z_impl_z_current_get+0x8>)
 80197d6:	6898      	ldr	r0, [r3, #8]
 80197d8:	4770      	bx	lr
 80197da:	bf00      	nop
 80197dc:	24010cc4 	.word	0x24010cc4

080197e0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 80197e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197e4:	4604      	mov	r4, r0
 80197e6:	f04f 0310 	mov.w	r3, #16
 80197ea:	f3ef 8611 	mrs	r6, BASEPRI
 80197ee:	f383 8812 	msr	BASEPRI_MAX, r3
 80197f2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 80197f6:	7b03      	ldrb	r3, [r0, #12]
 80197f8:	07d9      	lsls	r1, r3, #31
 80197fa:	d50b      	bpl.n	8019814 <z_thread_abort+0x34>
	__asm__ volatile(
 80197fc:	f386 8811 	msr	BASEPRI, r6
 8019800:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 8019804:	4040      	eors	r0, r0
 8019806:	f380 8811 	msr	BASEPRI, r0
 801980a:	f04f 0004 	mov.w	r0, #4
 801980e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8019810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8019814:	7b43      	ldrb	r3, [r0, #13]
 8019816:	071a      	lsls	r2, r3, #28
 8019818:	d504      	bpl.n	8019824 <z_thread_abort+0x44>
 801981a:	f386 8811 	msr	BASEPRI, r6
 801981e:	f3bf 8f6f 	isb	sy
 8019822:	e7f5      	b.n	8019810 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8019824:	f023 0220 	bic.w	r2, r3, #32
 8019828:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 801982c:	09d2      	lsrs	r2, r2, #7
 801982e:	d120      	bne.n	8019872 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8019830:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8019832:	68a3      	ldr	r3, [r4, #8]
 8019834:	b113      	cbz	r3, 801983c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 8019836:	4620      	mov	r0, r4
 8019838:	f00e fc27 	bl	802808a <unpend_thread_no_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 801983c:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8019840:	f04f 0800 	mov.w	r8, #0
	return z_abort_timeout(&thread->base.timeout);
 8019844:	f104 0018 	add.w	r0, r4, #24
 8019848:	f00e fce2 	bl	8028210 <z_abort_timeout>
	return list->head == list;
 801984c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801984e:	42bd      	cmp	r5, r7
 8019850:	d000      	beq.n	8019854 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8019852:	b9b5      	cbnz	r5, 8019882 <z_thread_abort+0xa2>
		update_cache(1);
 8019854:	2001      	movs	r0, #1
 8019856:	f7ff fd7f 	bl	8019358 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 801985a:	4b10      	ldr	r3, [pc, #64]	; (801989c <z_thread_abort+0xbc>)
 801985c:	689b      	ldr	r3, [r3, #8]
 801985e:	42a3      	cmp	r3, r4
 8019860:	d1db      	bne.n	801981a <z_thread_abort+0x3a>
 8019862:	f3ef 8305 	mrs	r3, IPSR
 8019866:	2b00      	cmp	r3, #0
 8019868:	d1d7      	bne.n	801981a <z_thread_abort+0x3a>
 801986a:	4630      	mov	r0, r6
 801986c:	f7e8 fd6a 	bl	8002344 <arch_swap>
	return ret;
 8019870:	e7d3      	b.n	801981a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8019872:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8019876:	f043 0308 	orr.w	r3, r3, #8
 801987a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 801987c:	f00e fbfd 	bl	802807a <sys_dlist_remove>
}
 8019880:	e7d7      	b.n	8019832 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 8019882:	4628      	mov	r0, r5
 8019884:	f00e fc01 	bl	802808a <unpend_thread_no_timeout>
 8019888:	f105 0018 	add.w	r0, r5, #24
 801988c:	f00e fcc0 	bl	8028210 <z_abort_timeout>
		ready_thread(thread);
 8019890:	4628      	mov	r0, r5
 8019892:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
 8019896:	f7ff fdb7 	bl	8019408 <ready_thread>
 801989a:	e7d7      	b.n	801984c <z_thread_abort+0x6c>
 801989c:	24010cc4 	.word	0x24010cc4

080198a0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 80198a0:	4809      	ldr	r0, [pc, #36]	; (80198c8 <z_data_copy+0x28>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 80198a2:	4a0a      	ldr	r2, [pc, #40]	; (80198cc <z_data_copy+0x2c>)
 80198a4:	490a      	ldr	r1, [pc, #40]	; (80198d0 <z_data_copy+0x30>)
 80198a6:	1a12      	subs	r2, r2, r0
{
 80198a8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 80198aa:	f00e fbc1 	bl	8028030 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 80198ae:	4a09      	ldr	r2, [pc, #36]	; (80198d4 <z_data_copy+0x34>)
 80198b0:	4909      	ldr	r1, [pc, #36]	; (80198d8 <z_data_copy+0x38>)
 80198b2:	480a      	ldr	r0, [pc, #40]	; (80198dc <z_data_copy+0x3c>)
 80198b4:	f00e fbbc 	bl	8028030 <z_early_memcpy>
	z_early_memcpy(&__itcm_start, &__itcm_load_start,
		       (uintptr_t) &__itcm_size);
#endif
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_dtcm), okay)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
		       __dtcm_data_end - __dtcm_data_start);
 80198b8:	4809      	ldr	r0, [pc, #36]	; (80198e0 <z_data_copy+0x40>)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
 80198ba:	4a0a      	ldr	r2, [pc, #40]	; (80198e4 <z_data_copy+0x44>)
 80198bc:	490a      	ldr	r1, [pc, #40]	; (80198e8 <z_data_copy+0x48>)
 80198be:	1a12      	subs	r2, r2, r0
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80198c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
 80198c4:	f00e bbb4 	b.w	8028030 <z_early_memcpy>
 80198c8:	24000000 	.word	0x24000000
 80198cc:	240001dc 	.word	0x240001dc
 80198d0:	0802e1d0 	.word	0x0802e1d0
 80198d4:	00000000 	.word	0x00000000
 80198d8:	0802e1d0 	.word	0x0802e1d0
 80198dc:	24000000 	.word	0x24000000
 80198e0:	20000000 	.word	0x20000000
 80198e4:	20000000 	.word	0x20000000
 80198e8:	0802e3ac 	.word	0x0802e3ac

080198ec <elapsed>:
	 *
	 * The distinction is implemented by looking at announce_remaining which
	 * will be non-zero while sys_clock_announce() is executing and zero
	 * otherwise.
	 */
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 80198ec:	4b03      	ldr	r3, [pc, #12]	; (80198fc <elapsed+0x10>)
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	b90b      	cbnz	r3, 80198f6 <elapsed+0xa>
 80198f2:	f7ea bd93 	b.w	800441c <sys_clock_elapsed>
}
 80198f6:	2000      	movs	r0, #0
 80198f8:	4770      	bx	lr
 80198fa:	bf00      	nop
 80198fc:	24010cf0 	.word	0x24010cf0

08019900 <next_timeout>:
	return list->head == list;
 8019900:	4b0e      	ldr	r3, [pc, #56]	; (801993c <next_timeout+0x3c>)

static int32_t next_timeout(void)
{
 8019902:	b510      	push	{r4, lr}
 8019904:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019906:	429c      	cmp	r4, r3
 8019908:	d104      	bne.n	8019914 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 801990a:	f7ff ffef 	bl	80198ec <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 801990e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
 8019912:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 8019914:	f7ff ffea 	bl	80198ec <elapsed>
	if ((to == NULL) ||
 8019918:	2c00      	cmp	r4, #0
 801991a:	d0f8      	beq.n	801990e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 801991c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8019920:	1a1b      	subs	r3, r3, r0
 8019922:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 8019926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801992a:	f172 0100 	sbcs.w	r1, r2, #0
 801992e:	daee      	bge.n	801990e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 8019930:	2a00      	cmp	r2, #0
 8019932:	bfac      	ite	ge
 8019934:	4618      	movge	r0, r3
 8019936:	2000      	movlt	r0, #0
	return ret;
 8019938:	e7eb      	b.n	8019912 <next_timeout+0x12>
 801993a:	bf00      	nop
 801993c:	24000128 	.word	0x24000128

08019940 <remove_timeout>:
{
 8019940:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8019942:	b170      	cbz	r0, 8019962 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8019944:	4b0b      	ldr	r3, [pc, #44]	; (8019974 <remove_timeout+0x34>)
 8019946:	685b      	ldr	r3, [r3, #4]
 8019948:	4298      	cmp	r0, r3
 801994a:	d00a      	beq.n	8019962 <remove_timeout+0x22>
 801994c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 801994e:	b143      	cbz	r3, 8019962 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8019950:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8019954:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8019958:	1912      	adds	r2, r2, r4
 801995a:	eb41 0105 	adc.w	r1, r1, r5
 801995e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 8019962:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 8019966:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8019968:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801996a:	2300      	movs	r3, #0
	node->prev = NULL;
 801996c:	e9c0 3300 	strd	r3, r3, [r0]
}
 8019970:	bd30      	pop	{r4, r5, pc}
 8019972:	bf00      	nop
 8019974:	24000128 	.word	0x24000128

08019978 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8019978:	f1b3 3fff 	cmp.w	r3, #4294967295
 801997c:	bf08      	it	eq
 801997e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 8019982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019984:	4604      	mov	r4, r0
 8019986:	461d      	mov	r5, r3
 8019988:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 801998a:	d05c      	beq.n	8019a46 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 801998c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 801998e:	f04f 0310 	mov.w	r3, #16
 8019992:	f3ef 8711 	mrs	r7, BASEPRI
 8019996:	f383 8812 	msr	BASEPRI_MAX, r3
 801999a:	f3bf 8f6f 	isb	sy

	K_SPINLOCK(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 801999e:	3201      	adds	r2, #1
 80199a0:	f175 33ff 	sbcs.w	r3, r5, #4294967295
 80199a4:	da24      	bge.n	80199f0 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80199a6:	492d      	ldr	r1, [pc, #180]	; (8019a5c <z_add_timeout+0xe4>)
 80199a8:	f06f 0301 	mvn.w	r3, #1
 80199ac:	e9d1 2000 	ldrd	r2, r0, [r1]
 80199b0:	1a9b      	subs	r3, r3, r2
 80199b2:	f04f 32ff 	mov.w	r2, #4294967295
 80199b6:	eb62 0000 	sbc.w	r0, r2, r0
 80199ba:	1b9e      	subs	r6, r3, r6
 80199bc:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 80199c0:	2e01      	cmp	r6, #1
 80199c2:	f170 0300 	sbcs.w	r3, r0, #0
 80199c6:	da01      	bge.n	80199cc <z_add_timeout+0x54>
 80199c8:	2601      	movs	r6, #1
 80199ca:	2000      	movs	r0, #0
 80199cc:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 80199d0:	4e23      	ldr	r6, [pc, #140]	; (8019a60 <z_add_timeout+0xe8>)
 80199d2:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 80199d6:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80199d8:	45b4      	cmp	ip, r6
 80199da:	bf08      	it	eq
 80199dc:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 80199e0:	f1bc 0f00 	cmp.w	ip, #0
 80199e4:	d10d      	bne.n	8019a02 <z_add_timeout+0x8a>
	node->prev = tail;
 80199e6:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 80199ea:	602c      	str	r4, [r5, #0]
	list->tail = node;
 80199ec:	6074      	str	r4, [r6, #4]
}
 80199ee:	e01c      	b.n	8019a2a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 80199f0:	f7ff ff7c 	bl	80198ec <elapsed>
 80199f4:	3601      	adds	r6, #1
 80199f6:	f145 0500 	adc.w	r5, r5, #0
 80199fa:	1836      	adds	r6, r6, r0
 80199fc:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8019a00:	e7e4      	b.n	80199cc <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 8019a02:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 8019a06:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 8019a0a:	4293      	cmp	r3, r2
 8019a0c:	eb71 0e00 	sbcs.w	lr, r1, r0
 8019a10:	da1a      	bge.n	8019a48 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
 8019a12:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 8019a14:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8019a18:	eb60 0001 	sbc.w	r0, r0, r1
 8019a1c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 8019a20:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 8019a24:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8019a26:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 8019a2a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019a2c:	42b3      	cmp	r3, r6
 8019a2e:	d006      	beq.n	8019a3e <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8019a30:	429c      	cmp	r4, r3
 8019a32:	d104      	bne.n	8019a3e <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
 8019a34:	f7ff ff64 	bl	8019900 <next_timeout>
 8019a38:	2100      	movs	r1, #0
 8019a3a:	f7ea fc71 	bl	8004320 <sys_clock_set_timeout>
	__asm__ volatile(
 8019a3e:	f387 8811 	msr	BASEPRI, r7
 8019a42:	f3bf 8f6f 	isb	sy
		}
	}
}
 8019a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 8019a48:	1a9b      	subs	r3, r3, r2
 8019a4a:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 8019a4e:	45ac      	cmp	ip, r5
 8019a50:	e9c4 3104 	strd	r3, r1, [r4, #16]
 8019a54:	d0c7      	beq.n	80199e6 <z_add_timeout+0x6e>
 8019a56:	f8dc c000 	ldr.w	ip, [ip]
 8019a5a:	e7c1      	b.n	80199e0 <z_add_timeout+0x68>
 8019a5c:	24000fc8 	.word	0x24000fc8
 8019a60:	24000128 	.word	0x24000128

08019a64 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
 8019a64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
 8019a68:	f04f 0310 	mov.w	r3, #16
 8019a6c:	f3ef 8c11 	mrs	ip, BASEPRI
 8019a70:	f383 8812 	msr	BASEPRI_MAX, r3
 8019a74:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8019a78:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8019b30 <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
 8019a7c:	2400      	movs	r4, #0
	announce_remaining = ticks;
 8019a7e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8019b34 <sys_clock_announce+0xd0>
		t->dticks = 0;
 8019a82:	2500      	movs	r5, #0
		curr_tick += dt;
 8019a84:	4f2c      	ldr	r7, [pc, #176]	; (8019b38 <sys_clock_announce+0xd4>)
	announce_remaining = ticks;
 8019a86:	f8c9 0000 	str.w	r0, [r9]
 8019a8a:	f8da 0000 	ldr.w	r0, [sl]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019a8e:	4550      	cmp	r0, sl
 8019a90:	bf08      	it	eq
 8019a92:	2000      	moveq	r0, #0
	     (t != NULL) && (t->dticks <= announce_remaining);
 8019a94:	f8d9 3000 	ldr.w	r3, [r9]
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 8019a98:	46e0      	mov	r8, ip
		curr_tick += dt;
 8019a9a:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
 8019a9e:	b380      	cbz	r0, 8019b02 <sys_clock_announce+0x9e>
 8019aa0:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 8019aa4:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
 8019aa8:	42b3      	cmp	r3, r6
 8019aaa:	eb7e 0b0c 	sbcs.w	fp, lr, ip
 8019aae:	da05      	bge.n	8019abc <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 8019ab0:	1af6      	subs	r6, r6, r3
 8019ab2:	eb6c 040e 	sbc.w	r4, ip, lr
 8019ab6:	e9c0 6404 	strd	r6, r4, [r0, #16]
 8019aba:	e022      	b.n	8019b02 <sys_clock_announce+0x9e>
		curr_tick += dt;
 8019abc:	18b2      	adds	r2, r6, r2
 8019abe:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
 8019ac2:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
 8019ac6:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
 8019aca:	f7ff ff39 	bl	8019940 <remove_timeout>
	__asm__ volatile(
 8019ace:	f388 8811 	msr	BASEPRI, r8
 8019ad2:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8019ad6:	6883      	ldr	r3, [r0, #8]
 8019ad8:	4798      	blx	r3
	__asm__ volatile(
 8019ada:	f04f 0310 	mov.w	r3, #16
 8019ade:	f3ef 8811 	mrs	r8, BASEPRI
 8019ae2:	f383 8812 	msr	BASEPRI_MAX, r3
 8019ae6:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 8019aea:	f8d9 3000 	ldr.w	r3, [r9]
	k.key = arch_irq_lock();
 8019aee:	46c4      	mov	ip, r8
	return list->head == list;
 8019af0:	f8da 0000 	ldr.w	r0, [sl]
 8019af4:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019af6:	4550      	cmp	r0, sl
 8019af8:	f8c9 3000 	str.w	r3, [r9]
 8019afc:	d1ca      	bne.n	8019a94 <sys_clock_announce+0x30>
		curr_tick += dt;
 8019afe:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
 8019b02:	189a      	adds	r2, r3, r2
	announce_remaining = 0;
 8019b04:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
 8019b08:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
 8019b0c:	f8c9 4000 	str.w	r4, [r9]
	curr_tick += announce_remaining;
 8019b10:	e9c7 2300 	strd	r2, r3, [r7]

	sys_clock_set_timeout(next_timeout(), false);
 8019b14:	f7ff fef4 	bl	8019900 <next_timeout>
 8019b18:	4621      	mov	r1, r4
 8019b1a:	f7ea fc01 	bl	8004320 <sys_clock_set_timeout>
	__asm__ volatile(
 8019b1e:	f388 8811 	msr	BASEPRI, r8
 8019b22:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
 8019b26:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
 8019b2a:	f7ff bcd1 	b.w	80194d0 <z_time_slice>
 8019b2e:	bf00      	nop
 8019b30:	24000128 	.word	0x24000128
 8019b34:	24010cf0 	.word	0x24010cf0
 8019b38:	24000fc8 	.word	0x24000fc8

08019b3c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8019b3c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8019b3e:	f04f 0310 	mov.w	r3, #16
 8019b42:	f3ef 8411 	mrs	r4, BASEPRI
 8019b46:	f383 8812 	msr	BASEPRI_MAX, r3
 8019b4a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	K_SPINLOCK(&timeout_lock) {
		t = curr_tick + elapsed();
 8019b4e:	f7ff fecd 	bl	80198ec <elapsed>
 8019b52:	4a06      	ldr	r2, [pc, #24]	; (8019b6c <sys_clock_tick_get+0x30>)
 8019b54:	4603      	mov	r3, r0
 8019b56:	e9d2 0100 	ldrd	r0, r1, [r2]
 8019b5a:	1818      	adds	r0, r3, r0
 8019b5c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
 8019b60:	f384 8811 	msr	BASEPRI, r4
 8019b64:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8019b68:	bd10      	pop	{r4, pc}
 8019b6a:	bf00      	nop
 8019b6c:	24000fc8 	.word	0x24000fc8

08019b70 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8019b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b72:	4604      	mov	r4, r0
	__asm__ volatile(
 8019b74:	f04f 0310 	mov.w	r3, #16
 8019b78:	f3ef 8711 	mrs	r7, BASEPRI
 8019b7c:	f383 8812 	msr	BASEPRI_MAX, r3
 8019b80:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
 8019b84:	6802      	ldr	r2, [r0, #0]
 8019b86:	b122      	cbz	r2, 8019b92 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
 8019b88:	f387 8811 	msr	BASEPRI, r7
 8019b8c:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 8019b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8019b92:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
 8019b96:	1c58      	adds	r0, r3, #1
 8019b98:	f146 0100 	adc.w	r1, r6, #0
 8019b9c:	2802      	cmp	r0, #2
 8019b9e:	f171 0100 	sbcs.w	r1, r1, #0
 8019ba2:	d327      	bcc.n	8019bf4 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
 8019ba4:	2b01      	cmp	r3, #1
 8019ba6:	f176 0100 	sbcs.w	r1, r6, #0
 8019baa:	bfbc      	itt	lt
 8019bac:	2301      	movlt	r3, #1
 8019bae:	4616      	movlt	r6, r2
 8019bb0:	1e5d      	subs	r5, r3, #1
 8019bb2:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
 8019bb6:	f00e fb45 	bl	8028244 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
 8019bba:	3001      	adds	r0, #1
 8019bbc:	f141 0100 	adc.w	r1, r1, #0
 8019bc0:	1940      	adds	r0, r0, r5
 8019bc2:	eb46 0101 	adc.w	r1, r6, r1
 8019bc6:	2801      	cmp	r0, #1
 8019bc8:	f171 0100 	sbcs.w	r1, r1, #0
 8019bcc:	db3a      	blt.n	8019c44 <z_timer_expiration_handler+0xd4>
 8019bce:	f00e fb39 	bl	8028244 <z_impl_k_uptime_ticks>
 8019bd2:	3001      	adds	r0, #1
 8019bd4:	f06f 0201 	mvn.w	r2, #1
 8019bd8:	f141 0100 	adc.w	r1, r1, #0
 8019bdc:	1940      	adds	r0, r0, r5
 8019bde:	eb46 0301 	adc.w	r3, r6, r1
 8019be2:	1a12      	subs	r2, r2, r0
 8019be4:	f04f 31ff 	mov.w	r1, #4294967295
 8019be8:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8019bec:	4918      	ldr	r1, [pc, #96]	; (8019c50 <z_timer_expiration_handler+0xe0>)
 8019bee:	4620      	mov	r0, r4
 8019bf0:	f7ff fec2 	bl	8019978 <z_add_timeout>
	timer->status += 1U;
 8019bf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019bf6:	3301      	adds	r3, #1
 8019bf8:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
 8019bfa:	6a23      	ldr	r3, [r4, #32]
 8019bfc:	b173      	cbz	r3, 8019c1c <z_timer_expiration_handler+0xac>
 8019bfe:	f387 8811 	msr	BASEPRI, r7
 8019c02:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
 8019c06:	6a23      	ldr	r3, [r4, #32]
 8019c08:	4620      	mov	r0, r4
 8019c0a:	4798      	blx	r3
	__asm__ volatile(
 8019c0c:	f04f 0310 	mov.w	r3, #16
 8019c10:	f3ef 8711 	mrs	r7, BASEPRI
 8019c14:	f383 8812 	msr	BASEPRI_MAX, r3
 8019c18:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8019c1c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019c20:	42a5      	cmp	r5, r4
 8019c22:	d0b1      	beq.n	8019b88 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
 8019c24:	2d00      	cmp	r5, #0
 8019c26:	d0af      	beq.n	8019b88 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
 8019c28:	4628      	mov	r0, r5
 8019c2a:	f00e fa70 	bl	802810e <z_unpend_thread_no_timeout>
 8019c2e:	2300      	movs	r3, #0
 8019c30:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
 8019c32:	f387 8811 	msr	BASEPRI, r7
 8019c36:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 8019c3a:	4628      	mov	r0, r5
}
 8019c3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
 8019c40:	f00e ba55 	b.w	80280ee <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
 8019c44:	f06f 0201 	mvn.w	r2, #1
 8019c48:	f04f 33ff 	mov.w	r3, #4294967295
 8019c4c:	e7ce      	b.n	8019bec <z_timer_expiration_handler+0x7c>
 8019c4e:	bf00      	nop
 8019c50:	08019b71 	.word	0x08019b71

08019c54 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8019c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c58:	bf08      	it	eq
 8019c5a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 8019c5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c62:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 8019c66:	4605      	mov	r5, r0
 8019c68:	461c      	mov	r4, r3
 8019c6a:	4691      	mov	r9, r2
 8019c6c:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8019c6e:	d01c      	beq.n	8019caa <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8019c70:	1c53      	adds	r3, r2, #1
 8019c72:	f174 33ff 	sbcs.w	r3, r4, #4294967295
 8019c76:	db09      	blt.n	8019c8c <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8019c78:	2a01      	cmp	r2, #1
 8019c7a:	f174 0300 	sbcs.w	r3, r4, #0
 8019c7e:	bfbc      	itt	lt
 8019c80:	2201      	movlt	r2, #1
 8019c82:	2400      	movlt	r4, #0
 8019c84:	f112 39ff 	adds.w	r9, r2, #4294967295
 8019c88:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
 8019c8c:	4628      	mov	r0, r5
 8019c8e:	f00e fabf 	bl	8028210 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 8019c92:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8019c94:	464a      	mov	r2, r9
 8019c96:	4628      	mov	r0, r5
	timer->status = 0U;
 8019c98:	632b      	str	r3, [r5, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8019c9a:	4643      	mov	r3, r8
 8019c9c:	4904      	ldr	r1, [pc, #16]	; (8019cb0 <z_impl_k_timer_start+0x5c>)
	timer->period = period;
 8019c9e:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
		     duration);
}
 8019ca2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8019ca6:	f7ff be67 	b.w	8019978 <z_add_timeout>
}
 8019caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cae:	bf00      	nop
 8019cb0:	08019b71 	.word	0x08019b71

08019cb4 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
 8019cb4:	4b01      	ldr	r3, [pc, #4]	; (8019cbc <k_thread_system_pool_assign+0x8>)
 8019cb6:	6703      	str	r3, [r0, #112]	; 0x70
}
 8019cb8:	4770      	bx	lr
 8019cba:	bf00      	nop
 8019cbc:	240001b8 	.word	0x240001b8

08019cc0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 8019cc0:	4801      	ldr	r0, [pc, #4]	; (8019cc8 <boot_banner+0x8>)
 8019cc2:	f000 b8c0 	b.w	8019e46 <printk>
 8019cc6:	bf00      	nop
 8019cc8:	0802e1ac 	.word	0x0802e1ac

08019ccc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
 8019ccc:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8019cce:	4c06      	ldr	r4, [pc, #24]	; (8019ce8 <statics_init+0x1c>)
 8019cd0:	4d06      	ldr	r5, [pc, #24]	; (8019cec <statics_init+0x20>)
 8019cd2:	42ac      	cmp	r4, r5
 8019cd4:	d301      	bcc.n	8019cda <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 8019cd6:	2000      	movs	r0, #0
 8019cd8:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8019cda:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8019cde:	4620      	mov	r0, r4
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8019ce0:	3414      	adds	r4, #20
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8019ce2:	f00e fada 	bl	802829a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8019ce6:	e7f4      	b.n	8019cd2 <statics_init+0x6>
 8019ce8:	240001b8 	.word	0x240001b8
 8019cec:	240001cc 	.word	0x240001cc

08019cf0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8019cf0:	4770      	bx	lr

08019cf2 <_Z7reversePci>:
    while (start < end) {
 8019cf2:	1e42      	subs	r2, r0, #1
    int start = 0;
 8019cf4:	2300      	movs	r3, #0
 8019cf6:	4408      	add	r0, r1
    while (start < end) {
 8019cf8:	3901      	subs	r1, #1
{
 8019cfa:	b530      	push	{r4, r5, lr}
    while (start < end) {
 8019cfc:	1acc      	subs	r4, r1, r3
 8019cfe:	42a3      	cmp	r3, r4
 8019d00:	db00      	blt.n	8019d04 <_Z7reversePci+0x12>
}
 8019d02:	bd30      	pop	{r4, r5, pc}
        char temp = str[start];
 8019d04:	f812 4f01 	ldrb.w	r4, [r2, #1]!
        start++;
 8019d08:	3301      	adds	r3, #1
        str[start] = str[end];
 8019d0a:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 8019d0e:	7015      	strb	r5, [r2, #0]
        str[end] = temp;
 8019d10:	7004      	strb	r4, [r0, #0]
        start++;
 8019d12:	e7f3      	b.n	8019cfc <_Z7reversePci+0xa>

08019d14 <_Z5citoaiPci>:
{
 8019d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (num == 0) {
 8019d16:	1e03      	subs	r3, r0, #0
{
 8019d18:	460c      	mov	r4, r1
    if (num == 0) {
 8019d1a:	d104      	bne.n	8019d26 <_Z5citoaiPci+0x12>
        str[i++] = '0';
 8019d1c:	2230      	movs	r2, #48	; 0x30
        str[i] = '\0';
 8019d1e:	704b      	strb	r3, [r1, #1]
        str[i++] = '0';
 8019d20:	700a      	strb	r2, [r1, #0]
}
 8019d22:	4620      	mov	r0, r4
 8019d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (num < 0 && base == 10) {
 8019d26:	da20      	bge.n	8019d6a <_Z5citoaiPci+0x56>
 8019d28:	2a0a      	cmp	r2, #10
 8019d2a:	d11e      	bne.n	8019d6a <_Z5citoaiPci+0x56>
        num = -num;
 8019d2c:	425b      	negs	r3, r3
        isNegative = true;
 8019d2e:	2501      	movs	r5, #1
 8019d30:	1e67      	subs	r7, r4, #1
        str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
 8019d32:	2000      	movs	r0, #0
        int rem = num % base;
 8019d34:	fb93 f6f2 	sdiv	r6, r3, r2
 8019d38:	fb02 3316 	mls	r3, r2, r6, r3
        str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
 8019d3c:	b2d9      	uxtb	r1, r3
 8019d3e:	2b09      	cmp	r3, #9
 8019d40:	bfcc      	ite	gt
 8019d42:	f101 0357 	addgt.w	r3, r1, #87	; 0x57
 8019d46:	f101 0330 	addle.w	r3, r1, #48	; 0x30
 8019d4a:	1c41      	adds	r1, r0, #1
 8019d4c:	b2db      	uxtb	r3, r3
 8019d4e:	f807 3f01 	strb.w	r3, [r7, #1]!
        num = num / base;
 8019d52:	4633      	mov	r3, r6
    while (num != 0) {
 8019d54:	b95e      	cbnz	r6, 8019d6e <_Z5citoaiPci+0x5a>
    if (isNegative)
 8019d56:	b115      	cbz	r5, 8019d5e <_Z5citoaiPci+0x4a>
        str[i++] = '-';
 8019d58:	232d      	movs	r3, #45	; 0x2d
 8019d5a:	5463      	strb	r3, [r4, r1]
 8019d5c:	1c81      	adds	r1, r0, #2
    str[i] = '\0'; // Append string terminator
 8019d5e:	2300      	movs	r3, #0
    reverse(str, i);
 8019d60:	4620      	mov	r0, r4
    str[i] = '\0'; // Append string terminator
 8019d62:	5463      	strb	r3, [r4, r1]
    reverse(str, i);
 8019d64:	f7ff ffc5 	bl	8019cf2 <_Z7reversePci>
    return str;
 8019d68:	e7db      	b.n	8019d22 <_Z5citoaiPci+0xe>
    bool isNegative = false;
 8019d6a:	2500      	movs	r5, #0
 8019d6c:	e7e0      	b.n	8019d30 <_Z5citoaiPci+0x1c>
        str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
 8019d6e:	4608      	mov	r0, r1
 8019d70:	e7e0      	b.n	8019d34 <_Z5citoaiPci+0x20>

08019d72 <cbpprintf_external>:
{
 8019d72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d76:	4606      	mov	r6, r0
 8019d78:	460d      	mov	r5, r1
 8019d7a:	4617      	mov	r7, r2
	if (buf == NULL) {
 8019d7c:	4698      	mov	r8, r3
 8019d7e:	b32b      	cbz	r3, 8019dcc <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
 8019d80:	f898 4000 	ldrb.w	r4, [r8]
	for (i = 0; i < s_nbr; i++) {
 8019d84:	f04f 0a00 	mov.w	sl, #0
	s_nbr     = hdr->hdr.desc.str_cnt;
 8019d88:	f893 9001 	ldrb.w	r9, [r3, #1]
	args_size = hdr->hdr.desc.len * sizeof(int);
 8019d8c:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
 8019d8e:	78db      	ldrb	r3, [r3, #3]
 8019d90:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
 8019d94:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
 8019d98:	441c      	add	r4, r3
 8019d9a:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
 8019d9c:	45ca      	cmp	sl, r9
 8019d9e:	d309      	bcc.n	8019db4 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
 8019da0:	f108 0308 	add.w	r3, r8, #8
 8019da4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8019da8:	4639      	mov	r1, r7
 8019daa:	4630      	mov	r0, r6
 8019dac:	46ac      	mov	ip, r5
}
 8019dae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
 8019db2:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
 8019db4:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
 8019db8:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
 8019dbc:	4620      	mov	r0, r4
		*ps = s;
 8019dbe:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
 8019dc2:	f000 fcc3 	bl	801a74c <strlen>
 8019dc6:	3001      	adds	r0, #1
 8019dc8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 8019dca:	e7e7      	b.n	8019d9c <cbpprintf_external+0x2a>
}
 8019dcc:	f06f 0015 	mvn.w	r0, #21
 8019dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019dd4 <is_ptr>:
{
 8019dd4:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
 8019dd6:	2500      	movs	r5, #0
{
 8019dd8:	4602      	mov	r2, r0
	bool mod = false;
 8019dda:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
 8019ddc:	4614      	mov	r4, r2
 8019dde:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019de2:	b90b      	cbnz	r3, 8019de8 <is_ptr+0x14>
					return false;
 8019de4:	4618      	mov	r0, r3
 8019de6:	e009      	b.n	8019dfc <is_ptr+0x28>
		if (mod) {
 8019de8:	b198      	cbz	r0, 8019e12 <is_ptr+0x3e>
			if (cnt == n) {
 8019dea:	428d      	cmp	r5, r1
 8019dec:	d107      	bne.n	8019dfe <is_ptr+0x2a>
				if (c == 'p') {
 8019dee:	2b70      	cmp	r3, #112	; 0x70
 8019df0:	d004      	beq.n	8019dfc <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
 8019df2:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8019df6:	2a3a      	cmp	r2, #58	; 0x3a
 8019df8:	d80b      	bhi.n	8019e12 <is_ptr+0x3e>
					return false;
 8019dfa:	2000      	movs	r0, #0
}
 8019dfc:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
 8019dfe:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
 8019e02:	2e3a      	cmp	r6, #58	; 0x3a
 8019e04:	d805      	bhi.n	8019e12 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
 8019e06:	7853      	ldrb	r3, [r2, #1]
				cnt++;
 8019e08:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
 8019e0a:	1c94      	adds	r4, r2, #2
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d0e9      	beq.n	8019de4 <is_ptr+0x10>
 8019e10:	2000      	movs	r0, #0
		if (c == '%') {
 8019e12:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
 8019e14:	4622      	mov	r2, r4
			mod = !mod;
 8019e16:	bf08      	it	eq
 8019e18:	f080 0001 	eoreq.w	r0, r0, #1
 8019e1c:	e7de      	b.n	8019ddc <is_ptr+0x8>

08019e1e <arch_printk_char_out>:
}
 8019e1e:	2000      	movs	r0, #0
 8019e20:	4770      	bx	lr

08019e22 <str_out>:
{
 8019e22:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8019e24:	688a      	ldr	r2, [r1, #8]
 8019e26:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 8019e28:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8019e2a:	b114      	cbz	r4, 8019e32 <str_out+0x10>
 8019e2c:	684b      	ldr	r3, [r1, #4]
 8019e2e:	4293      	cmp	r3, r2
 8019e30:	dc01      	bgt.n	8019e36 <str_out+0x14>
		ctx->count++;
 8019e32:	608d      	str	r5, [r1, #8]
}
 8019e34:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 8019e36:	3b01      	subs	r3, #1
		ctx->str[ctx->count++] = '\0';
 8019e38:	608d      	str	r5, [r1, #8]
	if (ctx->count == ctx->max - 1) {
 8019e3a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 8019e3c:	bf0a      	itet	eq
 8019e3e:	2200      	moveq	r2, #0
		ctx->str[ctx->count++] = c;
 8019e40:	54a0      	strbne	r0, [r4, r2]
		ctx->str[ctx->count++] = '\0';
 8019e42:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 8019e44:	e7f6      	b.n	8019e34 <str_out+0x12>

08019e46 <printk>:
{
 8019e46:	b40f      	push	{r0, r1, r2, r3}
 8019e48:	b507      	push	{r0, r1, r2, lr}
 8019e4a:	a904      	add	r1, sp, #16
 8019e4c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8019e50:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
 8019e52:	f000 fbd2 	bl	801a5fa <z_log_vprintk>
}
 8019e56:	b003      	add	sp, #12
 8019e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8019e5c:	b004      	add	sp, #16
 8019e5e:	4770      	bx	lr

08019e60 <snprintk>:
{
 8019e60:	b40c      	push	{r2, r3}
 8019e62:	b507      	push	{r0, r1, r2, lr}
 8019e64:	ab04      	add	r3, sp, #16
 8019e66:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 8019e6a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 8019e6c:	f7e6 ffec 	bl	8000e48 <vsnprintk>
}
 8019e70:	b003      	add	sp, #12
 8019e72:	f85d eb04 	ldr.w	lr, [sp], #4
 8019e76:	b002      	add	sp, #8
 8019e78:	4770      	bx	lr

08019e7a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8019e7a:	4604      	mov	r4, r0
 8019e7c:	4608      	mov	r0, r1
 8019e7e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8019e80:	461a      	mov	r2, r3
{
 8019e82:	b508      	push	{r3, lr}
	entry(p1, p2, p3);
 8019e84:	47a0      	blx	r4
	return z_impl_z_current_get();
 8019e86:	f7ff fca5 	bl	80197d4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8019e8a:	f7e8 fe3b 	bl	8002b04 <z_impl_k_thread_abort>

08019e8e <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 8019e8e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 8019e90:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8019e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 8019e98:	bf2c      	ite	cs
 8019e9a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 8019e9e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 8019ea2:	4770      	bx	lr

08019ea4 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 8019ea4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 8019ea8:	6880      	ldr	r0, [r0, #8]
 8019eaa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 8019eae:	bf2c      	ite	cs
 8019eb0:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 8019eb4:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 8019eb8:	4770      	bx	lr

08019eba <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8019eba:	2201      	movs	r2, #1
{
 8019ebc:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8019ebe:	f7ff ffe6 	bl	8019e8e <chunk_field>
}
 8019ec2:	40d0      	lsrs	r0, r2
 8019ec4:	bd08      	pop	{r3, pc}

08019ec6 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 8019ec6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 8019ec8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8019ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019ed0:	d308      	bcc.n	8019ee4 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 8019ed2:	684b      	ldr	r3, [r1, #4]
		if (used) {
 8019ed4:	b11a      	cbz	r2, 8019ede <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 8019ed6:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8019eda:	604b      	str	r3, [r1, #4]
 8019edc:	4770      	bx	lr
 8019ede:	f023 0301 	bic.w	r3, r3, #1
 8019ee2:	e7fa      	b.n	8019eda <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8019ee4:	884b      	ldrh	r3, [r1, #2]
		if (used) {
 8019ee6:	b11a      	cbz	r2, 8019ef0 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8019ee8:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8019eec:	804b      	strh	r3, [r1, #2]
		}
	}
}
 8019eee:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8019ef0:	f023 0301 	bic.w	r3, r3, #1
 8019ef4:	e7fa      	b.n	8019eec <set_chunk_used+0x26>

08019ef6 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8019ef6:	0053      	lsls	r3, r2, #1
 8019ef8:	2201      	movs	r2, #1
 8019efa:	f7ff bfd3 	b.w	8019ea4 <chunk_set>

08019efe <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 8019efe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8019f02:	f101 0001 	add.w	r0, r1, #1
	return big_heap(h) ? 8 : 4;
 8019f06:	bf34      	ite	cc
 8019f08:	2304      	movcc	r3, #4
 8019f0a:	2308      	movcs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8019f0c:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8019f0e:	eba0 00d3 	sub.w	r0, r0, r3, lsr #3
	return 31 - __builtin_clz(usable_sz);
 8019f12:	fab0 f080 	clz	r0, r0
}
 8019f16:	f1c0 001f 	rsb	r0, r0, #31
 8019f1a:	4770      	bx	lr

08019f1c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 8019f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
 8019f20:	6886      	ldr	r6, [r0, #8]
 8019f22:	460d      	mov	r5, r1
 8019f24:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 8019f26:	f7ff ffc8 	bl	8019eba <chunk_size>
 8019f2a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8019f2e:	4601      	mov	r1, r0
 8019f30:	d301      	bcc.n	8019f36 <free_list_add+0x1a>
 8019f32:	2801      	cmp	r0, #1
 8019f34:	d032      	beq.n	8019f9c <free_list_add+0x80>
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
 8019f36:	4630      	mov	r0, r6
 8019f38:	f7ff ffe1 	bl	8019efe <bucket_idx.isra.0>
	if (b->next == 0U) {
 8019f3c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 8019f40:	690e      	ldr	r6, [r1, #16]
 8019f42:	b996      	cbnz	r6, 8019f6a <free_list_add+0x4e>
		h->avail_buckets |= BIT(bidx);
 8019f44:	2201      	movs	r2, #1
 8019f46:	68e3      	ldr	r3, [r4, #12]
 8019f48:	4082      	lsls	r2, r0
	chunk_set(h, c, FREE_PREV, prev);
 8019f4a:	4620      	mov	r0, r4
 8019f4c:	4313      	orrs	r3, r2
 8019f4e:	2202      	movs	r2, #2
 8019f50:	60e3      	str	r3, [r4, #12]
 8019f52:	462b      	mov	r3, r5
		b->next = c;
 8019f54:	610d      	str	r5, [r1, #16]
 8019f56:	4629      	mov	r1, r5
 8019f58:	f7ff ffa4 	bl	8019ea4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8019f5c:	2203      	movs	r2, #3
 8019f5e:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 8019f60:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
 8019f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f66:	f7ff bf9d 	b.w	8019ea4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 8019f6a:	2202      	movs	r2, #2
 8019f6c:	4631      	mov	r1, r6
 8019f6e:	4620      	mov	r0, r4
 8019f70:	f7ff ff8d 	bl	8019e8e <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 8019f74:	4629      	mov	r1, r5
 8019f76:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 8019f78:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 8019f7a:	4620      	mov	r0, r4
 8019f7c:	f7ff ff92 	bl	8019ea4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8019f80:	2203      	movs	r2, #3
 8019f82:	4633      	mov	r3, r6
 8019f84:	4629      	mov	r1, r5
 8019f86:	4620      	mov	r0, r4
 8019f88:	f7ff ff8c 	bl	8019ea4 <chunk_set>
 8019f8c:	4639      	mov	r1, r7
 8019f8e:	462b      	mov	r3, r5
 8019f90:	4620      	mov	r0, r4
 8019f92:	f7ff ff87 	bl	8019ea4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8019f96:	2202      	movs	r2, #2
 8019f98:	4631      	mov	r1, r6
 8019f9a:	e7e1      	b.n	8019f60 <free_list_add+0x44>
 8019f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019fa0 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 8019fa0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 8019fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fa6:	bf2c      	ite	cs
 8019fa8:	2308      	movcs	r3, #8
 8019faa:	2304      	movcc	r3, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8019fac:	1dce      	adds	r6, r1, #7
	bytes -= heap_footer_bytes(bytes);
 8019fae:	1ad2      	subs	r2, r2, r3
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8019fb0:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8019fb4:	188c      	adds	r4, r1, r2
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 8019fb6:	2200      	movs	r2, #0
 8019fb8:	4637      	mov	r7, r6
	heap->heap = h;
 8019fba:	6006      	str	r6, [r0, #0]
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8019fbc:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8019fc0:	1ba4      	subs	r4, r4, r6
 8019fc2:	08e4      	lsrs	r4, r4, #3
	h->end_chunk = heap_sz;
 8019fc4:	60b4      	str	r4, [r6, #8]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8019fc6:	4621      	mov	r1, r4
 8019fc8:	4620      	mov	r0, r4
	h->avail_buckets = 0;
 8019fca:	f847 2f0c 	str.w	r2, [r7, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8019fce:	f7ff ff96 	bl	8019efe <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8019fd2:	4613      	mov	r3, r2
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8019fd4:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8019fd6:	351b      	adds	r5, #27
 8019fd8:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < nb_buckets; i++) {
 8019fda:	4298      	cmp	r0, r3
 8019fdc:	da2e      	bge.n	801a03c <sys_heap_init+0x9c>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 8019fde:	462a      	mov	r2, r5
 8019fe0:	4630      	mov	r0, r6
 8019fe2:	2100      	movs	r1, #0
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8019fe4:	1b67      	subs	r7, r4, r5
	set_chunk_size(h, 0, chunk0_size);
 8019fe6:	f7ff ff86 	bl	8019ef6 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8019fea:	2300      	movs	r3, #0
 8019fec:	4630      	mov	r0, r6
 8019fee:	461a      	mov	r2, r3
 8019ff0:	4619      	mov	r1, r3
 8019ff2:	f7ff ff57 	bl	8019ea4 <chunk_set>
	set_chunk_used(h, 0, true);
 8019ff6:	4619      	mov	r1, r3
 8019ff8:	4630      	mov	r0, r6
 8019ffa:	2201      	movs	r2, #1
 8019ffc:	f7ff ff63 	bl	8019ec6 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 801a000:	463a      	mov	r2, r7
 801a002:	4629      	mov	r1, r5
 801a004:	f7ff ff77 	bl	8019ef6 <set_chunk_size>
 801a008:	462b      	mov	r3, r5
 801a00a:	2200      	movs	r2, #0
 801a00c:	4629      	mov	r1, r5
 801a00e:	4630      	mov	r0, r6
 801a010:	f7ff ff48 	bl	8019ea4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
 801a014:	4621      	mov	r1, r4
 801a016:	4630      	mov	r0, r6
 801a018:	f7ff ff6d 	bl	8019ef6 <set_chunk_size>
 801a01c:	463b      	mov	r3, r7
 801a01e:	4621      	mov	r1, r4
 801a020:	4630      	mov	r0, r6
 801a022:	2200      	movs	r2, #0
 801a024:	f7ff ff3e 	bl	8019ea4 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
 801a028:	4621      	mov	r1, r4
 801a02a:	4630      	mov	r0, r6
 801a02c:	2201      	movs	r2, #1
 801a02e:	f7ff ff4a 	bl	8019ec6 <set_chunk_used>

	free_list_add(h, chunk0_size);
 801a032:	4629      	mov	r1, r5
}
 801a034:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 801a038:	f7ff bf70 	b.w	8019f1c <free_list_add>
	for (int i = 0; i < nb_buckets; i++) {
 801a03c:	3301      	adds	r3, #1
		h->buckets[i].next = 0;
 801a03e:	f847 2f04 	str.w	r2, [r7, #4]!
	for (int i = 0; i < nb_buckets; i++) {
 801a042:	e7ca      	b.n	8019fda <sys_heap_init+0x3a>

0801a044 <encode_uint>:
{
 801a044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a048:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
 801a04a:	78d3      	ldrb	r3, [r2, #3]
{
 801a04c:	4680      	mov	r8, r0
 801a04e:	460f      	mov	r7, r1
	switch (specifier) {
 801a050:	2b6f      	cmp	r3, #111	; 0x6f
{
 801a052:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 801a054:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 801a058:	d029      	beq.n	801a0ae <encode_uint+0x6a>
 801a05a:	d824      	bhi.n	801a0a6 <encode_uint+0x62>
		return 10;
 801a05c:	2b58      	cmp	r3, #88	; 0x58
 801a05e:	bf0c      	ite	eq
 801a060:	2610      	moveq	r6, #16
 801a062:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 801a064:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 801a068:	4632      	mov	r2, r6
 801a06a:	2300      	movs	r3, #0
 801a06c:	4640      	mov	r0, r8
 801a06e:	4639      	mov	r1, r7
 801a070:	f7e6 f92c 	bl	80002cc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 801a074:	2a09      	cmp	r2, #9
 801a076:	b2d4      	uxtb	r4, r2
 801a078:	d81e      	bhi.n	801a0b8 <encode_uint+0x74>
 801a07a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 801a07c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 801a07e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 801a080:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 801a084:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 801a088:	d301      	bcc.n	801a08e <encode_uint+0x4a>
 801a08a:	45d1      	cmp	r9, sl
 801a08c:	d811      	bhi.n	801a0b2 <encode_uint+0x6e>
	if (conv->flag_hash) {
 801a08e:	782b      	ldrb	r3, [r5, #0]
 801a090:	069b      	lsls	r3, r3, #26
 801a092:	d505      	bpl.n	801a0a0 <encode_uint+0x5c>
		if (radix == 8) {
 801a094:	2e08      	cmp	r6, #8
 801a096:	d115      	bne.n	801a0c4 <encode_uint+0x80>
			conv->altform_0 = true;
 801a098:	78ab      	ldrb	r3, [r5, #2]
 801a09a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 801a09e:	70ab      	strb	r3, [r5, #2]
}
 801a0a0:	4648      	mov	r0, r9
 801a0a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 801a0a6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 801a0aa:	2b70      	cmp	r3, #112	; 0x70
 801a0ac:	e7d7      	b.n	801a05e <encode_uint+0x1a>
	switch (specifier) {
 801a0ae:	2608      	movs	r6, #8
 801a0b0:	e7d8      	b.n	801a064 <encode_uint+0x20>
		value /= radix;
 801a0b2:	4680      	mov	r8, r0
 801a0b4:	460f      	mov	r7, r1
 801a0b6:	e7d7      	b.n	801a068 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 801a0b8:	f1bb 0f19 	cmp.w	fp, #25
 801a0bc:	bf94      	ite	ls
 801a0be:	3437      	addls	r4, #55	; 0x37
 801a0c0:	3457      	addhi	r4, #87	; 0x57
 801a0c2:	e7db      	b.n	801a07c <encode_uint+0x38>
		} else if (radix == 16) {
 801a0c4:	2e10      	cmp	r6, #16
 801a0c6:	d1eb      	bne.n	801a0a0 <encode_uint+0x5c>
			conv->altform_0c = true;
 801a0c8:	78ab      	ldrb	r3, [r5, #2]
 801a0ca:	f043 0310 	orr.w	r3, r3, #16
 801a0ce:	e7e6      	b.n	801a09e <encode_uint+0x5a>

0801a0d0 <outs>:
{
 801a0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0d4:	4607      	mov	r7, r0
 801a0d6:	4688      	mov	r8, r1
 801a0d8:	4615      	mov	r5, r2
 801a0da:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 801a0dc:	4614      	mov	r4, r2
 801a0de:	42b4      	cmp	r4, r6
 801a0e0:	d305      	bcc.n	801a0ee <outs+0x1e>
 801a0e2:	b10e      	cbz	r6, 801a0e8 <outs+0x18>
	return (int)count;
 801a0e4:	1b60      	subs	r0, r4, r5
 801a0e6:	e008      	b.n	801a0fa <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 801a0e8:	7823      	ldrb	r3, [r4, #0]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d0fa      	beq.n	801a0e4 <outs+0x14>
		int rc = out((int)*sp++, ctx);
 801a0ee:	4641      	mov	r1, r8
 801a0f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 801a0f4:	47b8      	blx	r7
		if (rc < 0) {
 801a0f6:	2800      	cmp	r0, #0
 801a0f8:	daf1      	bge.n	801a0de <outs+0xe>
}
 801a0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a0fe <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
 801a0fe:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
 801a100:	6903      	ldr	r3, [r0, #16]
{
 801a102:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
 801a104:	f013 0008 	ands.w	r0, r3, #8
 801a108:	d109      	bne.n	801a11e <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 801a10a:	6813      	ldr	r3, [r2, #0]
 801a10c:	68d4      	ldr	r4, [r2, #12]
 801a10e:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
 801a110:	bf97      	itett	ls
 801a112:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
 801a114:	1ae3      	subhi	r3, r4, r3

	return true;
 801a116:	2001      	movls	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
 801a118:	1ad3      	subls	r3, r2, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
 801a11a:	600b      	str	r3, [r1, #0]
}
 801a11c:	bd10      	pop	{r4, pc}
 801a11e:	2300      	movs	r3, #0
		return false;
 801a120:	4618      	mov	r0, r3
 801a122:	e7fa      	b.n	801a11a <free_space+0x1c>

0801a124 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
 801a124:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
 801a126:	a901      	add	r1, sp, #4
{
 801a128:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
 801a12a:	f7ff ffe8 	bl	801a0fe <free_space>
 801a12e:	b120      	cbz	r0, 801a13a <get_usage+0x16>
		f += (buffer->rd_idx - 1);
 801a130:	9b01      	ldr	r3, [sp, #4]
 801a132:	68e2      	ldr	r2, [r4, #12]
 801a134:	3b01      	subs	r3, #1
 801a136:	4413      	add	r3, r2
 801a138:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
 801a13a:	6a20      	ldr	r0, [r4, #32]
 801a13c:	9b01      	ldr	r3, [sp, #4]
 801a13e:	1ac0      	subs	r0, r0, r3
}
 801a140:	3801      	subs	r0, #1
 801a142:	b002      	add	sp, #8
 801a144:	bd10      	pop	{r4, pc}

0801a146 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
 801a146:	b510      	push	{r4, lr}
 801a148:	4604      	mov	r4, r0
	uint32_t i = idx + val;
 801a14a:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 801a14c:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
 801a14e:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 801a150:	07d2      	lsls	r2, r2, #31
 801a152:	d502      	bpl.n	801a15a <idx_inc+0x14>
		return i & (buffer->size - 1);
 801a154:	3b01      	subs	r3, #1
 801a156:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
 801a158:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
 801a15a:	4298      	cmp	r0, r3
 801a15c:	bf28      	it	cs
 801a15e:	1ac0      	subcs	r0, r0, r3
 801a160:	e7fa      	b.n	801a158 <idx_inc+0x12>

0801a162 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
 801a162:	b510      	push	{r4, lr}
 801a164:	4604      	mov	r4, r0
 801a166:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 801a168:	68c1      	ldr	r1, [r0, #12]
 801a16a:	f7ff ffec 	bl	801a146 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
 801a16e:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 801a170:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
 801a172:	f023 0308 	bic.w	r3, r3, #8
 801a176:	6123      	str	r3, [r4, #16]
}
 801a178:	bd10      	pop	{r4, pc}

0801a17a <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 801a17a:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
 801a17c:	008b      	lsls	r3, r1, #2
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 801a17e:	69c2      	ldr	r2, [r0, #28]
{
 801a180:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 801a182:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
 801a184:	f043 0302 	orr.w	r3, r3, #2
{
 801a188:	4604      	mov	r4, r0
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 801a18a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801a18e:	462a      	mov	r2, r5
 801a190:	6801      	ldr	r1, [r0, #0]
 801a192:	f7ff ffd8 	bl	801a146 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
 801a196:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801a198:	6861      	ldr	r1, [r4, #4]
 801a19a:	462a      	mov	r2, r5
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
 801a19c:	4298      	cmp	r0, r3
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801a19e:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801a1a0:	4620      	mov	r0, r4
		buffer->flags |= MPSC_PBUF_FULL;
 801a1a2:	bf02      	ittt	eq
 801a1a4:	6923      	ldreq	r3, [r4, #16]
 801a1a6:	f043 0308 	orreq.w	r3, r3, #8
 801a1aa:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801a1ac:	f7ff ffcb 	bl	801a146 <idx_inc>
 801a1b0:	6060      	str	r0, [r4, #4]
}
 801a1b2:	bd38      	pop	{r3, r4, r5, pc}

0801a1b4 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
 801a1b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 801a1b8:	68c7      	ldr	r7, [r0, #12]
{
 801a1ba:	469b      	mov	fp, r3
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 801a1bc:	69c6      	ldr	r6, [r0, #28]
{
 801a1be:	4604      	mov	r4, r0
 801a1c0:	4688      	mov	r8, r1
 801a1c2:	4691      	mov	r9, r2
	if (item->hdr.busy && !item->hdr.valid) {
 801a1c4:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 801a1c8:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 801a1cc:	f003 0303 	and.w	r3, r3, #3
 801a1d0:	2b02      	cmp	r3, #2
 801a1d2:	f04f 0300 	mov.w	r3, #0
 801a1d6:	d009      	beq.n	801a1ec <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
 801a1d8:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
 801a1da:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
 801a1de:	6923      	ldr	r3, [r4, #16]
 801a1e0:	0799      	lsls	r1, r3, #30
 801a1e2:	d410      	bmi.n	801a206 <drop_item_locked+0x52>
		return false;
 801a1e4:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
 801a1e6:	b003      	add	sp, #12
 801a1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
 801a1ec:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
 801a1f0:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
 801a1f2:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
 801a1f4:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
 801a1f8:	d0f1      	beq.n	801a1de <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
 801a1fa:	f7ff ffb2 	bl	801a162 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 801a1fe:	68e3      	ldr	r3, [r4, #12]
 801a200:	60a3      	str	r3, [r4, #8]
		return true;
 801a202:	2001      	movs	r0, #1
 801a204:	e7ef      	b.n	801a1e6 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
 801a206:	69a3      	ldr	r3, [r4, #24]
 801a208:	4650      	mov	r0, sl
 801a20a:	4798      	blx	r3
	return item->hdr.valid;
 801a20c:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	uint32_t rd_wlen = buffer->get_wlen(item);
 801a210:	4605      	mov	r5, r0
	if (!is_valid(item)) {
 801a212:	07da      	lsls	r2, r3, #31
 801a214:	d5e6      	bpl.n	801a1e4 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
 801a216:	f013 0302 	ands.w	r3, r3, #2
 801a21a:	d01d      	beq.n	801a258 <drop_item_locked+0xa4>
		if (free_wlen) {
 801a21c:	f1b8 0f00 	cmp.w	r8, #0
 801a220:	d003      	beq.n	801a22a <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
 801a222:	4641      	mov	r1, r8
 801a224:	4620      	mov	r0, r4
 801a226:	f7ff ffa8 	bl	801a17a <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 801a22a:	6861      	ldr	r1, [r4, #4]
 801a22c:	462a      	mov	r2, r5
 801a22e:	4620      	mov	r0, r4
 801a230:	f7ff ff89 	bl	801a146 <idx_inc>
 801a234:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
 801a236:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 801a23a:	4299      	cmp	r1, r3
 801a23c:	d104      	bne.n	801a248 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
 801a23e:	462a      	mov	r2, r5
 801a240:	4620      	mov	r0, r4
 801a242:	f7ff ff80 	bl	801a146 <idx_inc>
 801a246:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
 801a248:	68a3      	ldr	r3, [r4, #8]
 801a24a:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
 801a24c:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
 801a24e:	6923      	ldr	r3, [r4, #16]
 801a250:	f043 0308 	orr.w	r3, r3, #8
 801a254:	6123      	str	r3, [r4, #16]
 801a256:	e7d4      	b.n	801a202 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
 801a258:	4601      	mov	r1, r0
 801a25a:	4620      	mov	r0, r4
 801a25c:	9301      	str	r3, [sp, #4]
 801a25e:	f7ff ff80 	bl	801a162 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 801a262:	68e2      	ldr	r2, [r4, #12]
 801a264:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
 801a266:	f1b8 0f00 	cmp.w	r8, #0
 801a26a:	d004      	beq.n	801a276 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
 801a26c:	6821      	ldr	r1, [r4, #0]
 801a26e:	69e2      	ldr	r2, [r4, #28]
 801a270:	9b01      	ldr	r3, [sp, #4]
 801a272:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
 801a276:	eb05 0208 	add.w	r2, r5, r8
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
 801a27a:	4620      	mov	r0, r4
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
 801a27c:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
 801a280:	6821      	ldr	r1, [r4, #0]
 801a282:	f7ff ff60 	bl	801a146 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
 801a286:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
 801a288:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
 801a28a:	f043 0308 	orr.w	r3, r3, #8
 801a28e:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
 801a290:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
 801a294:	f36f 0300 	bfc	r3, #0, #1
 801a298:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
 801a29c:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
 801a2a0:	e7af      	b.n	801a202 <drop_item_locked+0x4e>

0801a2a2 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
 801a2a2:	b570      	push	{r4, r5, r6, lr}
 801a2a4:	4604      	mov	r4, r0
 801a2a6:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
 801a2a8:	f7ff ff4d 	bl	801a146 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
 801a2ac:	6823      	ldr	r3, [r4, #0]
 801a2ae:	4283      	cmp	r3, r0
 801a2b0:	d105      	bne.n	801a2be <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
 801a2b2:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
 801a2b4:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
 801a2b6:	f023 0308 	bic.w	r3, r3, #8
 801a2ba:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
 801a2bc:	bd70      	pop	{r4, r5, r6, pc}
	union mpsc_pbuf_generic skip = {
 801a2be:	00ab      	lsls	r3, r5, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
 801a2c0:	69e2      	ldr	r2, [r4, #28]
	buffer->wr_idx = idx_inc(buffer,
 801a2c2:	4620      	mov	r0, r4
	union mpsc_pbuf_generic skip = {
 801a2c4:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
 801a2c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
 801a2cc:	462a      	mov	r2, r5
 801a2ce:	6861      	ldr	r1, [r4, #4]
 801a2d0:	f7ff ff39 	bl	801a146 <idx_inc>
 801a2d4:	6060      	str	r0, [r4, #4]
 801a2d6:	e7f1      	b.n	801a2bc <post_drop_action+0x1a>

0801a2d8 <max_utilization_update>:
{
 801a2d8:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 801a2da:	6903      	ldr	r3, [r0, #16]
{
 801a2dc:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 801a2de:	075b      	lsls	r3, r3, #29
 801a2e0:	d506      	bpl.n	801a2f0 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 801a2e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a2e4:	f7ff ff1e 	bl	801a124 <get_usage>
 801a2e8:	4285      	cmp	r5, r0
 801a2ea:	bf2c      	ite	cs
 801a2ec:	6265      	strcs	r5, [r4, #36]	; 0x24
 801a2ee:	6260      	strcc	r0, [r4, #36]	; 0x24
}
 801a2f0:	bd38      	pop	{r3, r4, r5, pc}

0801a2f2 <mpsc_pbuf_init>:
{
 801a2f2:	b538      	push	{r3, r4, r5, lr}
 801a2f4:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
 801a2f6:	221c      	movs	r2, #28
 801a2f8:	2100      	movs	r1, #0
{
 801a2fa:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
 801a2fc:	f000 fa44 	bl	801a788 <memset>
	buffer->get_wlen = cfg->get_wlen;
 801a300:	68eb      	ldr	r3, [r5, #12]
	buffer->max_usage = 0;
 801a302:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
 801a304:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
 801a306:	68ab      	ldr	r3, [r5, #8]
 801a308:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
 801a30a:	682b      	ldr	r3, [r5, #0]
 801a30c:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
 801a30e:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
 801a310:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
 801a312:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
 801a314:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
 801a316:	b123      	cbz	r3, 801a322 <mpsc_pbuf_init+0x30>
 801a318:	1e59      	subs	r1, r3, #1
 801a31a:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 801a31c:	bf08      	it	eq
 801a31e:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
 801a322:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
 801a324:	2201      	movs	r2, #1
 801a326:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801a32a:	2100      	movs	r1, #0
}
 801a32c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a330:	f00d be97 	b.w	8028062 <z_impl_k_sem_init>

0801a334 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 801a334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a338:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
 801a33a:	2500      	movs	r5, #0
{
 801a33c:	4604      	mov	r4, r0
 801a33e:	460e      	mov	r6, r1
 801a340:	9300      	str	r3, [sp, #0]
 801a342:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
 801a344:	6a03      	ldr	r3, [r0, #32]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
 801a346:	46a9      	mov	r9, r5
	union mpsc_pbuf_generic *dropped_item = NULL;
 801a348:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
 801a34a:	428b      	cmp	r3, r1
	uint32_t tmp_wr_idx_shift = 0;
 801a34c:	9505      	str	r5, [sp, #20]
	if (wlen > (buffer->size)) {
 801a34e:	d33a      	bcc.n	801a3c6 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
 801a350:	f04f 0310 	mov.w	r3, #16
 801a354:	f3ef 8b11 	mrs	fp, BASEPRI
 801a358:	f383 8812 	msr	BASEPRI_MAX, r3
 801a35c:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
 801a360:	9a05      	ldr	r2, [sp, #20]
 801a362:	46d8      	mov	r8, fp
 801a364:	b12a      	cbz	r2, 801a372 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
 801a366:	4629      	mov	r1, r5
 801a368:	4620      	mov	r0, r4
 801a36a:	f7ff ff9a 	bl	801a2a2 <post_drop_action>
			tmp_wr_idx_shift = 0;
 801a36e:	2300      	movs	r3, #0
 801a370:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
 801a372:	a904      	add	r1, sp, #16
 801a374:	4620      	mov	r0, r4
 801a376:	f7ff fec2 	bl	801a0fe <free_space>

		if (free_wlen >= wlen) {
 801a37a:	9904      	ldr	r1, [sp, #16]
		wrap = free_space(buffer, &free_wlen);
 801a37c:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
 801a37e:	42b1      	cmp	r1, r6
 801a380:	d32a      	bcc.n	801a3d8 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 801a382:	6822      	ldr	r2, [r4, #0]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801a384:	4620      	mov	r0, r4
			item =
 801a386:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
 801a388:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
 801a38c:	eb03 0982 	add.w	r9, r3, r2, lsl #2
			item->hdr.valid = 0;
 801a390:	f021 0103 	bic.w	r1, r1, #3
 801a394:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801a398:	4632      	mov	r2, r6
 801a39a:	6821      	ldr	r1, [r4, #0]
 801a39c:	f7ff fed3 	bl	801a146 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
 801a3a0:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801a3a2:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
 801a3a4:	4298      	cmp	r0, r3
 801a3a6:	d012      	beq.n	801a3ce <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
 801a3a8:	2700      	movs	r7, #0
	__asm__ volatile(
 801a3aa:	f388 8811 	msr	BASEPRI, r8
 801a3ae:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
 801a3b2:	9903      	ldr	r1, [sp, #12]
 801a3b4:	b129      	cbz	r1, 801a3c2 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
 801a3b6:	6962      	ldr	r2, [r4, #20]
 801a3b8:	b10a      	cbz	r2, 801a3be <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
 801a3ba:	4620      	mov	r0, r4
 801a3bc:	4790      	blx	r2
			}
			dropped_item = NULL;
 801a3be:	2300      	movs	r3, #0
 801a3c0:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
 801a3c2:	2f00      	cmp	r7, #0
 801a3c4:	d1c4      	bne.n	801a350 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 801a3c6:	4648      	mov	r0, r9
 801a3c8:	b007      	add	sp, #28
 801a3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
 801a3ce:	6923      	ldr	r3, [r4, #16]
 801a3d0:	f043 0308 	orr.w	r3, r3, #8
 801a3d4:	6123      	str	r3, [r4, #16]
 801a3d6:	e7e7      	b.n	801a3a8 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
 801a3d8:	b118      	cbz	r0, 801a3e2 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
 801a3da:	4620      	mov	r0, r4
 801a3dc:	f7ff fecd 	bl	801a17a <add_skip_item>
			cont = true;
 801a3e0:	e7e3      	b.n	801a3aa <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
 801a3e2:	9b00      	ldr	r3, [sp, #0]
 801a3e4:	ea5a 0303 	orrs.w	r3, sl, r3
 801a3e8:	d01a      	beq.n	801a420 <mpsc_pbuf_alloc+0xec>
 801a3ea:	9101      	str	r1, [sp, #4]
 801a3ec:	f00d fe22 	bl	8028034 <k_is_in_isr>
 801a3f0:	9901      	ldr	r1, [sp, #4]
 801a3f2:	b9a8      	cbnz	r0, 801a420 <mpsc_pbuf_alloc+0xec>
 801a3f4:	f38b 8811 	msr	BASEPRI, fp
 801a3f8:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
 801a3fc:	4652      	mov	r2, sl
 801a3fe:	9b00      	ldr	r3, [sp, #0]
 801a400:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801a404:	f7fe ff2a 	bl	801925c <z_impl_k_sem_take>
	__asm__ volatile(
 801a408:	f04f 0310 	mov.w	r3, #16
 801a40c:	f3ef 8811 	mrs	r8, BASEPRI
 801a410:	f383 8812 	msr	BASEPRI_MAX, r3
 801a414:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
 801a418:	fab0 f780 	clz	r7, r0
 801a41c:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
 801a41e:	e7c4      	b.n	801a3aa <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
 801a420:	ab05      	add	r3, sp, #20
 801a422:	aa03      	add	r2, sp, #12
 801a424:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
 801a426:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
 801a428:	f7ff fec4 	bl	801a1b4 <drop_item_locked>
 801a42c:	4607      	mov	r7, r0
 801a42e:	e7bc      	b.n	801a3aa <mpsc_pbuf_alloc+0x76>

0801a430 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 801a430:	b570      	push	{r4, r5, r6, lr}
 801a432:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 801a434:	6983      	ldr	r3, [r0, #24]
 801a436:	4608      	mov	r0, r1
{
 801a438:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 801a43a:	4798      	blx	r3
 801a43c:	4602      	mov	r2, r0
 801a43e:	f04f 0310 	mov.w	r3, #16
 801a442:	f3ef 8611 	mrs	r6, BASEPRI
 801a446:	f383 8812 	msr	BASEPRI_MAX, r3
 801a44a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 801a44e:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801a450:	4620      	mov	r0, r4
	item->hdr.valid = 1;
 801a452:	f043 0301 	orr.w	r3, r3, #1
 801a456:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801a458:	6861      	ldr	r1, [r4, #4]
 801a45a:	f7ff fe74 	bl	801a146 <idx_inc>
 801a45e:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
 801a460:	4620      	mov	r0, r4
 801a462:	f7ff ff39 	bl	801a2d8 <max_utilization_update>
	__asm__ volatile(
 801a466:	f386 8811 	msr	BASEPRI, r6
 801a46a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
 801a46e:	bd70      	pop	{r4, r5, r6, pc}

0801a470 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 801a470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a472:	4604      	mov	r4, r0
	__asm__ volatile(
 801a474:	f04f 0310 	mov.w	r3, #16
 801a478:	f3ef 8611 	mrs	r6, BASEPRI
 801a47c:	f383 8812 	msr	BASEPRI_MAX, r3
 801a480:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
 801a484:	6923      	ldr	r3, [r4, #16]
 801a486:	f013 0f08 	tst.w	r3, #8
 801a48a:	68a3      	ldr	r3, [r4, #8]
 801a48c:	d102      	bne.n	801a494 <mpsc_pbuf_claim+0x24>
 801a48e:	6862      	ldr	r2, [r4, #4]
 801a490:	4293      	cmp	r3, r2
 801a492:	d900      	bls.n	801a496 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
 801a494:	6a22      	ldr	r2, [r4, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 801a496:	1ad2      	subs	r2, r2, r3

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
 801a498:	69e1      	ldr	r1, [r4, #28]

		if (!a || is_invalid(item)) {
 801a49a:	b92a      	cbnz	r2, 801a4a8 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
 801a49c:	f386 8811 	msr	BASEPRI, r6
 801a4a0:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
 801a4a4:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
 801a4a6:	e033      	b.n	801a510 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
 801a4a8:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
 801a4ac:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
 801a4b0:	f012 0003 	ands.w	r0, r2, #3
 801a4b4:	d0f2      	beq.n	801a49c <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
 801a4b6:	2802      	cmp	r0, #2
 801a4b8:	d103      	bne.n	801a4c2 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
 801a4ba:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
 801a4be:	08ad      	lsrs	r5, r5, #2
 801a4c0:	d105      	bne.n	801a4ce <mpsc_pbuf_claim+0x5e>
 801a4c2:	07d0      	lsls	r0, r2, #31
 801a4c4:	d412      	bmi.n	801a4ec <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
 801a4c6:	69a3      	ldr	r3, [r4, #24]
 801a4c8:	4638      	mov	r0, r7
 801a4ca:	4798      	blx	r3
 801a4cc:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 801a4ce:	68a1      	ldr	r1, [r4, #8]
 801a4d0:	462a      	mov	r2, r5
 801a4d2:	4620      	mov	r0, r4
 801a4d4:	f7ff fe37 	bl	801a146 <idx_inc>
				rd_idx_inc(buffer, inc);
 801a4d8:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
 801a4da:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
 801a4dc:	4620      	mov	r0, r4
 801a4de:	f7ff fe40 	bl	801a162 <rd_idx_inc>
 801a4e2:	f386 8811 	msr	BASEPRI, r6
 801a4e6:	f3bf 8f6f 	isb	sy
	} while (cont);
 801a4ea:	e7c3      	b.n	801a474 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
 801a4ec:	f042 0202 	orr.w	r2, r2, #2
						buffer->get_wlen(item));
 801a4f0:	4638      	mov	r0, r7
				item->hdr.busy = 1;
 801a4f2:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
 801a4f6:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
 801a4f8:	69a3      	ldr	r3, [r4, #24]
 801a4fa:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
 801a4fc:	4629      	mov	r1, r5
						buffer->get_wlen(item));
 801a4fe:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
 801a500:	4620      	mov	r0, r4
 801a502:	f7ff fe20 	bl	801a146 <idx_inc>
				buffer->tmp_rd_idx =
 801a506:	60a0      	str	r0, [r4, #8]
 801a508:	f386 8811 	msr	BASEPRI, r6
 801a50c:	f3bf 8f6f 	isb	sy
}
 801a510:	4638      	mov	r0, r7
 801a512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a514 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 801a514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a516:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 801a518:	6983      	ldr	r3, [r0, #24]
 801a51a:	4608      	mov	r0, r1
{
 801a51c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 801a51e:	4798      	blx	r3
 801a520:	4606      	mov	r6, r0
	__asm__ volatile(
 801a522:	f04f 0310 	mov.w	r3, #16
 801a526:	f3ef 8711 	mrs	r7, BASEPRI
 801a52a:	f383 8812 	msr	BASEPRI_MAX, r3
 801a52e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 801a532:	782b      	ldrb	r3, [r5, #0]
 801a534:	f36f 0300 	bfc	r3, #0, #1
 801a538:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 801a53a:	6923      	ldr	r3, [r4, #16]
 801a53c:	079b      	lsls	r3, r3, #30
 801a53e:	d505      	bpl.n	801a54c <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 801a540:	68e2      	ldr	r2, [r4, #12]
 801a542:	69e3      	ldr	r3, [r4, #28]
 801a544:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 801a548:	429d      	cmp	r5, r3
 801a54a:	d11a      	bne.n	801a582 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
 801a54c:	782b      	ldrb	r3, [r5, #0]
 801a54e:	f36f 0341 	bfc	r3, #1, #1
 801a552:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
 801a554:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 801a558:	4299      	cmp	r1, r3
 801a55a:	d104      	bne.n	801a566 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
 801a55c:	4632      	mov	r2, r6
 801a55e:	4620      	mov	r0, r4
 801a560:	f7ff fdf1 	bl	801a146 <idx_inc>
 801a564:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
 801a566:	4631      	mov	r1, r6
 801a568:	4620      	mov	r0, r4
 801a56a:	f7ff fdfa 	bl	801a162 <rd_idx_inc>
	__asm__ volatile(
 801a56e:	f387 8811 	msr	BASEPRI, r7
 801a572:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
 801a576:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
 801a57a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a57e:	f7fe be49 	b.w	8019214 <z_impl_k_sem_give>
		witem->skip.len = wlen;
 801a582:	682b      	ldr	r3, [r5, #0]
 801a584:	f360 039f 	bfi	r3, r0, #2, #30
 801a588:	602b      	str	r3, [r5, #0]
 801a58a:	e7f0      	b.n	801a56e <mpsc_pbuf_free+0x5a>

0801a58c <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
 801a58c:	6902      	ldr	r2, [r0, #16]
 801a58e:	6883      	ldr	r3, [r0, #8]
 801a590:	0712      	lsls	r2, r2, #28
 801a592:	d402      	bmi.n	801a59a <mpsc_pbuf_is_pending+0xe>
 801a594:	6842      	ldr	r2, [r0, #4]
 801a596:	429a      	cmp	r2, r3
 801a598:	d200      	bcs.n	801a59c <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
 801a59a:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 801a59c:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 801a59e:	1e18      	subs	r0, r3, #0
 801a5a0:	bf18      	it	ne
 801a5a2:	2001      	movne	r0, #1
 801a5a4:	4770      	bx	lr

0801a5a6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 801a5a6:	4770      	bx	lr

0801a5a8 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 801a5a8:	2000      	movs	r0, #0
 801a5aa:	4770      	bx	lr

0801a5ac <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
 801a5ac:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 801a5ae:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
 801a5b0:	bf5f      	itttt	pl
 801a5b2:	6803      	ldrpl	r3, [r0, #0]
 801a5b4:	8842      	ldrhpl	r2, [r0, #2]
 801a5b6:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
 801a5ba:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
 801a5be:	bf5d      	ittte	pl
 801a5c0:	3017      	addpl	r0, #23
 801a5c2:	f020 0007 	bicpl.w	r0, r0, #7
 801a5c6:	0880      	lsrpl	r0, r0, #2
	return 0;
 801a5c8:	2000      	movmi	r0, #0
}
 801a5ca:	4770      	bx	lr

0801a5cc <dummy_timestamp>:
}
 801a5cc:	2000      	movs	r0, #0
 801a5ce:	4770      	bx	lr

0801a5d0 <atomic_inc>:
{
 801a5d0:	4603      	mov	r3, r0
}
 801a5d2:	f3bf 8f5b 	dmb	ish
 801a5d6:	e853 0f00 	ldrex	r0, [r3]
 801a5da:	1c42      	adds	r2, r0, #1
 801a5dc:	e843 2100 	strex	r1, r2, [r3]
 801a5e0:	2900      	cmp	r1, #0
 801a5e2:	d1f8      	bne.n	801a5d6 <atomic_inc+0x6>
 801a5e4:	f3bf 8f5b 	dmb	ish
 801a5e8:	4770      	bx	lr

0801a5ea <default_lf_get_timestamp>:
{
 801a5ea:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 801a5ec:	f00d fe2a 	bl	8028244 <z_impl_k_uptime_ticks>
 801a5f0:	220a      	movs	r2, #10
 801a5f2:	2300      	movs	r3, #0
 801a5f4:	f7e5 fe6a 	bl	80002cc <__aeabi_uldivmod>
}
 801a5f8:	bd08      	pop	{r3, pc}

0801a5fa <z_log_vprintk>:
{
 801a5fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a602:	461a      	mov	r2, r3
 801a604:	4619      	mov	r1, r3
 801a606:	4618      	mov	r0, r3
 801a608:	e9cd 3300 	strd	r3, r3, [sp]
 801a60c:	f7e7 fb68 	bl	8001ce0 <z_impl_z_log_msg_runtime_vcreate>
}
 801a610:	b005      	add	sp, #20
 801a612:	f85d fb04 	ldr.w	pc, [sp], #4

0801a616 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
 801a616:	2001      	movs	r0, #1
 801a618:	f7e7 b920 	b.w	800185c <z_log_dropped>

0801a61c <z_log_get_tag>:
}
 801a61c:	2000      	movs	r0, #0
 801a61e:	4770      	bx	lr

0801a620 <z_cbprintf_cpy>:
{
 801a620:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
 801a622:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
{
 801a626:	460c      	mov	r4, r1
 801a628:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
 801a62a:	1b9b      	subs	r3, r3, r6
 801a62c:	428b      	cmp	r3, r1
 801a62e:	d30a      	bcc.n	801a646 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
 801a630:	6813      	ldr	r3, [r2, #0]
 801a632:	460a      	mov	r2, r1
 801a634:	4601      	mov	r1, r0
 801a636:	1998      	adds	r0, r3, r6
 801a638:	f000 f89b 	bl	801a772 <memcpy>
	desc->off += len;
 801a63c:	68ab      	ldr	r3, [r5, #8]
	return len;
 801a63e:	4620      	mov	r0, r4
	desc->off += len;
 801a640:	4423      	add	r3, r4
 801a642:	60ab      	str	r3, [r5, #8]
}
 801a644:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
 801a646:	f06f 001b 	mvn.w	r0, #27
 801a64a:	e7fb      	b.n	801a644 <z_cbprintf_cpy+0x24>

0801a64c <z_log_msg_finalize>:
{
 801a64c:	b570      	push	{r4, r5, r6, lr}
 801a64e:	460e      	mov	r6, r1
 801a650:	4615      	mov	r5, r2
 801a652:	4619      	mov	r1, r3
	if (!msg) {
 801a654:	4604      	mov	r4, r0
 801a656:	b918      	cbnz	r0, 801a660 <z_log_msg_finalize+0x14>
}
 801a658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
 801a65c:	f7e7 b8fe 	b.w	800185c <z_log_dropped>
	if (data) {
 801a660:	b133      	cbz	r3, 801a670 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
 801a662:	f3c2 234a 	ubfx	r3, r2, #9, #11
 801a666:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
 801a668:	0d12      	lsrs	r2, r2, #20
 801a66a:	4418      	add	r0, r3
 801a66c:	f000 f881 	bl	801a772 <memcpy>
	z_log_msg_commit(msg);
 801a670:	4620      	mov	r0, r4
	msg->hdr.source = source;
 801a672:	e9c4 5600 	strd	r5, r6, [r4]
}
 801a676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
 801a67a:	f7e7 ba79 	b.w	8001b70 <z_log_msg_commit>

0801a67e <buffer_write>:
{
 801a67e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a680:	4606      	mov	r6, r0
 801a682:	460d      	mov	r5, r1
 801a684:	4614      	mov	r4, r2
 801a686:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 801a688:	4621      	mov	r1, r4
 801a68a:	4628      	mov	r0, r5
 801a68c:	463a      	mov	r2, r7
 801a68e:	47b0      	blx	r6
	} while (len != 0);
 801a690:	1a24      	subs	r4, r4, r0
		buf += processed;
 801a692:	4405      	add	r5, r0
	} while (len != 0);
 801a694:	d1f8      	bne.n	801a688 <buffer_write+0xa>
}
 801a696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a698 <cbvprintf>:
{
 801a698:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 801a69a:	2400      	movs	r4, #0
 801a69c:	9400      	str	r4, [sp, #0]
 801a69e:	f7e6 fbe9 	bl	8000e74 <z_cbvprintf_impl>
}
 801a6a2:	b002      	add	sp, #8
 801a6a4:	bd10      	pop	{r4, pc}

0801a6a6 <log_output_flush>:
{
 801a6a6:	b510      	push	{r4, lr}
		     output->control_block->offset,
 801a6a8:	6842      	ldr	r2, [r0, #4]
{
 801a6aa:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 801a6ac:	6881      	ldr	r1, [r0, #8]
 801a6ae:	6800      	ldr	r0, [r0, #0]
 801a6b0:	e9d2 2300 	ldrd	r2, r3, [r2]
 801a6b4:	f7ff ffe3 	bl	801a67e <buffer_write>
	output->control_block->offset = 0;
 801a6b8:	6863      	ldr	r3, [r4, #4]
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	601a      	str	r2, [r3, #0]
}
 801a6be:	bd10      	pop	{r4, pc}

0801a6c0 <out_func>:
{
 801a6c0:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 801a6c2:	684b      	ldr	r3, [r1, #4]
{
 801a6c4:	4605      	mov	r5, r0
 801a6c6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 801a6c8:	681a      	ldr	r2, [r3, #0]
 801a6ca:	68cb      	ldr	r3, [r1, #12]
 801a6cc:	429a      	cmp	r2, r3
 801a6ce:	d102      	bne.n	801a6d6 <out_func+0x16>
		log_output_flush(out_ctx);
 801a6d0:	4608      	mov	r0, r1
 801a6d2:	f7ff ffe8 	bl	801a6a6 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 801a6d6:	6863      	ldr	r3, [r4, #4]
 801a6d8:	f3bf 8f5b 	dmb	ish
 801a6dc:	e853 2f00 	ldrex	r2, [r3]
 801a6e0:	1c51      	adds	r1, r2, #1
 801a6e2:	e843 1000 	strex	r0, r1, [r3]
 801a6e6:	2800      	cmp	r0, #0
 801a6e8:	d1f8      	bne.n	801a6dc <out_func+0x1c>
 801a6ea:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 801a6ee:	68a3      	ldr	r3, [r4, #8]
}
 801a6f0:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
 801a6f2:	549d      	strb	r5, [r3, r2]
}
 801a6f4:	bd38      	pop	{r3, r4, r5, pc}

0801a6f6 <cr_out_func>:
	if (c == '\n') {
 801a6f6:	280a      	cmp	r0, #10
{
 801a6f8:	b538      	push	{r3, r4, r5, lr}
 801a6fa:	4604      	mov	r4, r0
 801a6fc:	460d      	mov	r5, r1
	if (c == '\n') {
 801a6fe:	d102      	bne.n	801a706 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
 801a700:	200d      	movs	r0, #13
 801a702:	f7ff ffdd 	bl	801a6c0 <out_func>
	out_func(c, ctx);
 801a706:	4629      	mov	r1, r5
 801a708:	4620      	mov	r0, r4
 801a70a:	f7ff ffd9 	bl	801a6c0 <out_func>
}
 801a70e:	2000      	movs	r0, #0
 801a710:	bd38      	pop	{r3, r4, r5, pc}

0801a712 <log_backend_uart_init>:
}
 801a712:	4770      	bx	lr

0801a714 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 801a714:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 801a716:	6800      	ldr	r0, [r0, #0]
 801a718:	f7e7 bd62 	b.w	80021e0 <z_arm_fatal_error>

0801a71c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 801a71c:	2100      	movs	r1, #0
 801a71e:	2001      	movs	r0, #1
 801a720:	f7e7 bd5e 	b.w	80021e0 <z_arm_fatal_error>

0801a724 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 801a724:	b508      	push	{r3, lr}
	handler();
 801a726:	f7e7 fde5 	bl	80022f4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 801a72a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 801a72e:	f7e7 beb3 	b.w	8002498 <z_arm_exc_exit>

0801a732 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
 801a732:	2300      	movs	r3, #0
 801a734:	f7e7 ba50 	b.w	8001bd8 <z_impl_z_log_msg_static_create>

0801a738 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
 801a738:	3901      	subs	r1, #1
 801a73a:	4603      	mov	r3, r0
 801a73c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a740:	b90a      	cbnz	r2, 801a746 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
 801a742:	701a      	strb	r2, [r3, #0]

	return dest;
}
 801a744:	4770      	bx	lr
		*d = *s;
 801a746:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
 801a74a:	e7f7      	b.n	801a73c <strcpy+0x4>

0801a74c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 801a74c:	4603      	mov	r3, r0
	size_t n = 0;
 801a74e:	2000      	movs	r0, #0

	while (*s != '\0') {
 801a750:	5c1a      	ldrb	r2, [r3, r0]
 801a752:	b902      	cbnz	r2, 801a756 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 801a754:	4770      	bx	lr
		n++;
 801a756:	3001      	adds	r0, #1
 801a758:	e7fa      	b.n	801a750 <strlen+0x4>

0801a75a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 801a75a:	1e43      	subs	r3, r0, #1
 801a75c:	3901      	subs	r1, #1
 801a75e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801a762:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a766:	4282      	cmp	r2, r0
 801a768:	d101      	bne.n	801a76e <strcmp+0x14>
 801a76a:	2a00      	cmp	r2, #0
 801a76c:	d1f7      	bne.n	801a75e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 801a76e:	1a10      	subs	r0, r2, r0
 801a770:	4770      	bx	lr

0801a772 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 801a772:	1e43      	subs	r3, r0, #1
 801a774:	440a      	add	r2, r1
{
 801a776:	b510      	push	{r4, lr}
	while (n > 0) {
 801a778:	4291      	cmp	r1, r2
 801a77a:	d100      	bne.n	801a77e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 801a77c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 801a77e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a782:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 801a786:	e7f7      	b.n	801a778 <memcpy+0x6>

0801a788 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 801a788:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 801a78a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 801a78c:	4603      	mov	r3, r0
	while (n > 0) {
 801a78e:	4293      	cmp	r3, r2
 801a790:	d100      	bne.n	801a794 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 801a792:	4770      	bx	lr
		*(d_byte++) = c_byte;
 801a794:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 801a798:	e7f9      	b.n	801a78e <memset+0x6>

0801a79a <_stdout_hook_default>:
}
 801a79a:	f04f 30ff 	mov.w	r0, #4294967295
 801a79e:	4770      	bx	lr

0801a7a0 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
 801a7a0:	684b      	ldr	r3, [r1, #4]
 801a7a2:	2b01      	cmp	r3, #1
 801a7a4:	dd07      	ble.n	801a7b6 <sprintf_out+0x16>
		*(p->ptr) = c;
 801a7a6:	680b      	ldr	r3, [r1, #0]
 801a7a8:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
 801a7aa:	680b      	ldr	r3, [r1, #0]
 801a7ac:	3301      	adds	r3, #1
 801a7ae:	600b      	str	r3, [r1, #0]
		p->len -= 1;
 801a7b0:	684b      	ldr	r3, [r1, #4]
 801a7b2:	3b01      	subs	r3, #1
 801a7b4:	604b      	str	r3, [r1, #4]
}
 801a7b6:	2000      	movs	r0, #0
 801a7b8:	4770      	bx	lr

0801a7ba <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 801a7ba:	4603      	mov	r3, r0
	size_t n = 0;
 801a7bc:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 801a7be:	5c1a      	ldrb	r2, [r3, r0]
 801a7c0:	b10a      	cbz	r2, 801a7c6 <strnlen+0xc>
 801a7c2:	4288      	cmp	r0, r1
 801a7c4:	d100      	bne.n	801a7c8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 801a7c6:	4770      	bx	lr
		n++;
 801a7c8:	3001      	adds	r0, #1
 801a7ca:	e7f8      	b.n	801a7be <strnlen+0x4>

0801a7cc <stm32_exti_init>:
{
 801a7cc:	b508      	push	{r3, lr}
	DT_FOREACH_PROP_ELEM(DT_NODELABEL(exti),
 801a7ce:	2206      	movs	r2, #6
 801a7d0:	2101      	movs	r1, #1
 801a7d2:	2000      	movs	r0, #0
 801a7d4:	f7e8 faf2 	bl	8002dbc <stm32_fill_irq_table>
 801a7d8:	2200      	movs	r2, #0
 801a7da:	2006      	movs	r0, #6
 801a7dc:	4611      	mov	r1, r2
 801a7de:	f7e7 fd73 	bl	80022c8 <z_arm_irq_priority_set>
 801a7e2:	2101      	movs	r1, #1
 801a7e4:	2207      	movs	r2, #7
 801a7e6:	4608      	mov	r0, r1
 801a7e8:	f7e8 fae8 	bl	8002dbc <stm32_fill_irq_table>
 801a7ec:	2200      	movs	r2, #0
 801a7ee:	2007      	movs	r0, #7
 801a7f0:	4611      	mov	r1, r2
 801a7f2:	f7e7 fd69 	bl	80022c8 <z_arm_irq_priority_set>
 801a7f6:	2208      	movs	r2, #8
 801a7f8:	2101      	movs	r1, #1
 801a7fa:	2002      	movs	r0, #2
 801a7fc:	f7e8 fade 	bl	8002dbc <stm32_fill_irq_table>
 801a800:	2200      	movs	r2, #0
 801a802:	2008      	movs	r0, #8
 801a804:	4611      	mov	r1, r2
 801a806:	f7e7 fd5f 	bl	80022c8 <z_arm_irq_priority_set>
 801a80a:	2209      	movs	r2, #9
 801a80c:	2101      	movs	r1, #1
 801a80e:	2003      	movs	r0, #3
 801a810:	f7e8 fad4 	bl	8002dbc <stm32_fill_irq_table>
 801a814:	2200      	movs	r2, #0
 801a816:	2009      	movs	r0, #9
 801a818:	4611      	mov	r1, r2
 801a81a:	f7e7 fd55 	bl	80022c8 <z_arm_irq_priority_set>
 801a81e:	220a      	movs	r2, #10
 801a820:	2101      	movs	r1, #1
 801a822:	2004      	movs	r0, #4
 801a824:	f7e8 faca 	bl	8002dbc <stm32_fill_irq_table>
 801a828:	2200      	movs	r2, #0
 801a82a:	200a      	movs	r0, #10
 801a82c:	4611      	mov	r1, r2
 801a82e:	f7e7 fd4b 	bl	80022c8 <z_arm_irq_priority_set>
 801a832:	2105      	movs	r1, #5
 801a834:	2217      	movs	r2, #23
 801a836:	4608      	mov	r0, r1
 801a838:	f7e8 fac0 	bl	8002dbc <stm32_fill_irq_table>
 801a83c:	2200      	movs	r2, #0
 801a83e:	2017      	movs	r0, #23
 801a840:	4611      	mov	r1, r2
 801a842:	f7e7 fd41 	bl	80022c8 <z_arm_irq_priority_set>
 801a846:	2228      	movs	r2, #40	; 0x28
 801a848:	2106      	movs	r1, #6
 801a84a:	200a      	movs	r0, #10
 801a84c:	f7e8 fab6 	bl	8002dbc <stm32_fill_irq_table>
 801a850:	2200      	movs	r2, #0
 801a852:	2028      	movs	r0, #40	; 0x28
 801a854:	4611      	mov	r1, r2
 801a856:	f7e7 fd37 	bl	80022c8 <z_arm_irq_priority_set>
}
 801a85a:	2000      	movs	r0, #0
 801a85c:	bd08      	pop	{r3, pc}

0801a85e <stm32_exti_disable>:
	if (line < 32) {
 801a85e:	281f      	cmp	r0, #31
 801a860:	dc09      	bgt.n	801a876 <stm32_exti_disable+0x18>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 801a862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
		LL_EXTI_DisableIT_0_31(BIT((uint32_t)line));
 801a866:	2201      	movs	r2, #1
 801a868:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 801a86c:	4082      	lsls	r2, r0
 801a86e:	ea23 0302 	bic.w	r3, r3, r2
 801a872:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 801a876:	4770      	bx	lr

0801a878 <stm32_exti_trigger>:
	switch (trigger) {
 801a878:	2903      	cmp	r1, #3
 801a87a:	d82e      	bhi.n	801a8da <stm32_exti_trigger+0x62>
 801a87c:	e8df f001 	tbb	[pc, r1]
 801a880:	22160f02 	.word	0x22160f02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 801a884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
		LL_EXTI_DisableRisingTrig_0_31(BIT((uint32_t)line));
 801a888:	2201      	movs	r2, #1
 801a88a:	6819      	ldr	r1, [r3, #0]
 801a88c:	4082      	lsls	r2, r0
 801a88e:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR1, ExtiLine);
 801a892:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 801a894:	6859      	ldr	r1, [r3, #4]
 801a896:	ea21 0202 	bic.w	r2, r1, r2
 801a89a:	605a      	str	r2, [r3, #4]
}
 801a89c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(BIT((uint32_t)line));
 801a89e:	2201      	movs	r2, #1
  SET_BIT(EXTI->RTSR1, ExtiLine);
 801a8a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a8a4:	4082      	lsls	r2, r0
 801a8a6:	6819      	ldr	r1, [r3, #0]
 801a8a8:	4311      	orrs	r1, r2
 801a8aa:	e7f2      	b.n	801a892 <stm32_exti_trigger+0x1a>
  SET_BIT(EXTI->FTSR1, ExtiLine);
 801a8ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
		LL_EXTI_EnableFallingTrig_0_31(BIT((uint32_t)line));
 801a8b0:	2201      	movs	r2, #1
 801a8b2:	6859      	ldr	r1, [r3, #4]
 801a8b4:	4082      	lsls	r2, r0
 801a8b6:	4311      	orrs	r1, r2
 801a8b8:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 801a8ba:	6819      	ldr	r1, [r3, #0]
 801a8bc:	ea21 0202 	bic.w	r2, r1, r2
 801a8c0:	601a      	str	r2, [r3, #0]
}
 801a8c2:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(BIT((uint32_t)line));
 801a8c4:	2301      	movs	r3, #1
 801a8c6:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 801a8ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a8ce:	681a      	ldr	r2, [r3, #0]
 801a8d0:	4302      	orrs	r2, r0
 801a8d2:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 801a8d4:	685a      	ldr	r2, [r3, #4]
 801a8d6:	4310      	orrs	r0, r2
 801a8d8:	6058      	str	r0, [r3, #4]
}
 801a8da:	4770      	bx	lr

0801a8dc <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 801a8dc:	680b      	ldr	r3, [r1, #0]
 801a8de:	f1a3 02d4 	sub.w	r2, r3, #212	; 0xd4
 801a8e2:	2a20      	cmp	r2, #32
 801a8e4:	d809      	bhi.n	801a8fa <stm32_clock_control_on+0x1e>
	sys_set_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 801a8e6:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 801a8ea:	6849      	ldr	r1, [r1, #4]
	return 0;
 801a8ec:	2000      	movs	r0, #0
	sys_set_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 801a8ee:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 801a8f2:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 801a8f4:	430a      	orrs	r2, r1
 801a8f6:	601a      	str	r2, [r3, #0]
	return 0;
 801a8f8:	4770      	bx	lr
		return -ENOTSUP;
 801a8fa:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 801a8fe:	4770      	bx	lr

0801a900 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 801a900:	680b      	ldr	r3, [r1, #0]
 801a902:	f1a3 02d4 	sub.w	r2, r3, #212	; 0xd4
 801a906:	2a20      	cmp	r2, #32
 801a908:	d80a      	bhi.n	801a920 <stm32_clock_control_off+0x20>
	sys_clear_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 801a90a:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
	*(volatile uint32_t *)addr = temp & ~mask;
 801a90e:	6849      	ldr	r1, [r1, #4]
	return 0;
 801a910:	2000      	movs	r0, #0
	sys_clear_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 801a912:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 801a916:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp & ~mask;
 801a918:	ea22 0201 	bic.w	r2, r2, r1
 801a91c:	601a      	str	r2, [r3, #0]
	return 0;
 801a91e:	4770      	bx	lr
		return -ENOTSUP;
 801a920:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 801a924:	4770      	bx	lr

0801a926 <gpio_pin_configure_dt>:
{
 801a926:	4603      	mov	r3, r0
 801a928:	460a      	mov	r2, r1
 801a92a:	b4f0      	push	{r4, r5, r6, r7}
				  spec->pin,
 801a92c:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
 801a92e:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
 801a930:	6800      	ldr	r0, [r0, #0]
 801a932:	4313      	orrs	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 801a934:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
 801a936:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 801a938:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 801a93a:	d506      	bpl.n	801a94a <gpio_pin_configure_dt+0x24>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 801a93c:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 801a940:	d003      	beq.n	801a94a <gpio_pin_configure_dt+0x24>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 801a942:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 801a944:	bf48      	it	mi
 801a946:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 801a94a:	2501      	movs	r5, #1
 801a94c:	6834      	ldr	r4, [r6, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 801a94e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 801a952:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 801a954:	fa05 f501 	lsl.w	r5, r5, r1
 801a958:	bf4c      	ite	mi
 801a95a:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 801a95c:	43ac      	bicpl	r4, r5
 801a95e:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
 801a960:	683b      	ldr	r3, [r7, #0]
}
 801a962:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
 801a964:	4718      	bx	r3

0801a966 <ili9xxx_get_capabilities>:
{
 801a966:	b570      	push	{r4, r5, r6, lr}
 801a968:	460c      	mov	r4, r1
	const struct ili9xxx_config *config = dev->config;
 801a96a:	6845      	ldr	r5, [r0, #4]
	struct ili9xxx_data *data = dev->data;
 801a96c:	6906      	ldr	r6, [r0, #16]
	memset(capabilities, 0, sizeof(struct display_capabilities));
 801a96e:	2210      	movs	r2, #16
 801a970:	2100      	movs	r1, #0
 801a972:	4620      	mov	r0, r4
 801a974:	f7ff ff08 	bl	801a788 <memset>
	capabilities->supported_pixel_formats =
 801a978:	2311      	movs	r3, #17
 801a97a:	6063      	str	r3, [r4, #4]
	capabilities->current_pixel_format = data->pixel_format;
 801a97c:	7873      	ldrb	r3, [r6, #1]
 801a97e:	7323      	strb	r3, [r4, #12]
	if (data->orientation == DISPLAY_ORIENTATION_NORMAL ||
 801a980:	78b3      	ldrb	r3, [r6, #2]
 801a982:	f013 0ffd 	tst.w	r3, #253	; 0xfd
		capabilities->x_resolution = config->x_resolution;
 801a986:	bf0b      	itete	eq
 801a988:	8e2b      	ldrheq	r3, [r5, #48]	; 0x30
		capabilities->x_resolution = config->y_resolution;
 801a98a:	8e6b      	ldrhne	r3, [r5, #50]	; 0x32
		capabilities->x_resolution = config->x_resolution;
 801a98c:	8023      	strheq	r3, [r4, #0]
		capabilities->x_resolution = config->y_resolution;
 801a98e:	8023      	strhne	r3, [r4, #0]
		capabilities->y_resolution = config->y_resolution;
 801a990:	bf0c      	ite	eq
 801a992:	8e6b      	ldrheq	r3, [r5, #50]	; 0x32
		capabilities->y_resolution = config->x_resolution;
 801a994:	8e2b      	ldrhne	r3, [r5, #48]	; 0x30
		capabilities->y_resolution = config->y_resolution;
 801a996:	8063      	strh	r3, [r4, #2]
	capabilities->current_orientation = data->orientation;
 801a998:	78b3      	ldrb	r3, [r6, #2]
 801a99a:	7363      	strb	r3, [r4, #13]
}
 801a99c:	bd70      	pop	{r4, r5, r6, pc}

0801a99e <z_log_msg_static_create.constprop.0>:
 801a99e:	2300      	movs	r3, #0
 801a9a0:	f7e7 b91a 	b.w	8001bd8 <z_impl_z_log_msg_static_create>

0801a9a4 <spi_write_dt>:
 *
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
 801a9a4:	460a      	mov	r2, r1
	return spi_write(spec->bus, &spec->config, tx_bufs);
 801a9a6:	4601      	mov	r1, r0
{
 801a9a8:	b410      	push	{r4}
	return spi_write(spec->bus, &spec->config, tx_bufs);
 801a9aa:	f851 0b04 	ldr.w	r0, [r1], #4
	ret = api->transceive(dev, config, tx_bufs, rx_bufs);
 801a9ae:	6883      	ldr	r3, [r0, #8]
 801a9b0:	681c      	ldr	r4, [r3, #0]
 801a9b2:	2300      	movs	r3, #0
 801a9b4:	46a4      	mov	ip, r4
}
 801a9b6:	bc10      	pop	{r4}
	ret = api->transceive(dev, config, tx_bufs, rx_bufs);
 801a9b8:	4760      	bx	ip

0801a9ba <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 801a9ba:	4603      	mov	r3, r0
 801a9bc:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
 801a9be:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 801a9c0:	7919      	ldrb	r1, [r3, #4]
 801a9c2:	2301      	movs	r3, #1
 801a9c4:	fa03 f101 	lsl.w	r1, r3, r1
 801a9c8:	6903      	ldr	r3, [r0, #16]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 801a9ce:	bf18      	it	ne
 801a9d0:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 801a9d4:	b112      	cbz	r2, 801a9dc <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 801a9d6:	6883      	ldr	r3, [r0, #8]
 801a9d8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 801a9da:	4718      	bx	r3
 801a9dc:	6883      	ldr	r3, [r0, #8]
 801a9de:	691b      	ldr	r3, [r3, #16]
 801a9e0:	e7fb      	b.n	801a9da <gpio_pin_set_dt.isra.0+0x20>

0801a9e2 <ili9xxx_transmit>:
{
 801a9e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9e4:	b087      	sub	sp, #28
	const struct ili9xxx_config *config = dev->config;
 801a9e6:	6845      	ldr	r5, [r0, #4]
{
 801a9e8:	461e      	mov	r6, r3
 801a9ea:	4614      	mov	r4, r2
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1U };
 801a9ec:	ab02      	add	r3, sp, #8
	gpio_pin_set_dt(&config->cmd_data, ILI9XXX_CMD);
 801a9ee:	f105 071c 	add.w	r7, r5, #28
{
 801a9f2:	f88d 1007 	strb.w	r1, [sp, #7]
	r = spi_write_dt(&config->spi, &tx_bufs);
 801a9f6:	3504      	adds	r5, #4
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1U };
 801a9f8:	2101      	movs	r1, #1
 801a9fa:	9304      	str	r3, [sp, #16]
	tx_buf.buf = &cmd;
 801a9fc:	f10d 0307 	add.w	r3, sp, #7
	gpio_pin_set_dt(&config->cmd_data, ILI9XXX_CMD);
 801aa00:	4638      	mov	r0, r7
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1U };
 801aa02:	9105      	str	r1, [sp, #20]
	tx_buf.len = 1U;
 801aa04:	e9cd 3102 	strd	r3, r1, [sp, #8]
	gpio_pin_set_dt(&config->cmd_data, ILI9XXX_CMD);
 801aa08:	f7ff ffd7 	bl	801a9ba <gpio_pin_set_dt.isra.0>
	r = spi_write_dt(&config->spi, &tx_bufs);
 801aa0c:	a904      	add	r1, sp, #16
 801aa0e:	4628      	mov	r0, r5
 801aa10:	f7ff ffc8 	bl	801a9a4 <spi_write_dt>
	if (r < 0) {
 801aa14:	2800      	cmp	r0, #0
 801aa16:	db0c      	blt.n	801aa32 <ili9xxx_transmit+0x50>
	if (tx_data != NULL) {
 801aa18:	b16c      	cbz	r4, 801aa36 <ili9xxx_transmit+0x54>
		gpio_pin_set_dt(&config->cmd_data, ILI9XXX_DATA);
 801aa1a:	2100      	movs	r1, #0
 801aa1c:	4638      	mov	r0, r7
		tx_buf.len = tx_len;
 801aa1e:	e9cd 4602 	strd	r4, r6, [sp, #8]
		gpio_pin_set_dt(&config->cmd_data, ILI9XXX_DATA);
 801aa22:	f7ff ffca 	bl	801a9ba <gpio_pin_set_dt.isra.0>
		r = spi_write_dt(&config->spi, &tx_bufs);
 801aa26:	a904      	add	r1, sp, #16
 801aa28:	4628      	mov	r0, r5
 801aa2a:	f7ff ffbb 	bl	801a9a4 <spi_write_dt>
		if (r < 0) {
 801aa2e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
 801aa32:	b007      	add	sp, #28
 801aa34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
 801aa36:	4620      	mov	r0, r4
 801aa38:	e7fb      	b.n	801aa32 <ili9xxx_transmit+0x50>

0801aa3a <ili9xxx_set_orientation>:
{
 801aa3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct ili9xxx_config *config = dev->config;
 801aa3c:	6843      	ldr	r3, [r0, #4]
	uint8_t tx_data = ILI9XXX_MADCTL_BGR;
 801aa3e:	2208      	movs	r2, #8
{
 801aa40:	460c      	mov	r4, r1
	struct ili9xxx_data *data = dev->data;
 801aa42:	6905      	ldr	r5, [r0, #16]
	if (config->quirks->cmd_set == CMD_SET_1) {
 801aa44:	681b      	ldr	r3, [r3, #0]
	uint8_t tx_data = ILI9XXX_MADCTL_BGR;
 801aa46:	f88d 2007 	strb.w	r2, [sp, #7]
	if (config->quirks->cmd_set == CMD_SET_1) {
 801aa4a:	781b      	ldrb	r3, [r3, #0]
 801aa4c:	b9d3      	cbnz	r3, 801aa84 <ili9xxx_set_orientation+0x4a>
		if (orientation == DISPLAY_ORIENTATION_NORMAL) {
 801aa4e:	2903      	cmp	r1, #3
 801aa50:	d806      	bhi.n	801aa60 <ili9xxx_set_orientation+0x26>
 801aa52:	e8df f001 	tbb	[pc, r1]
 801aa56:	1102      	.short	0x1102
 801aa58:	1513      	.short	0x1513
			tx_data |= ILI9XXX_MADCTL_MX;
 801aa5a:	2348      	movs	r3, #72	; 0x48
			tx_data |= ILI9XXX_MADCTL_MV | ILI9XXX_MADCTL_MX;
 801aa5c:	f88d 3007 	strb.w	r3, [sp, #7]
	r = ili9xxx_transmit(dev, ILI9XXX_MADCTL, &tx_data, 1U);
 801aa60:	2301      	movs	r3, #1
 801aa62:	f10d 0207 	add.w	r2, sp, #7
 801aa66:	2136      	movs	r1, #54	; 0x36
 801aa68:	f7ff ffbb 	bl	801a9e2 <ili9xxx_transmit>
	if (r < 0) {
 801aa6c:	2800      	cmp	r0, #0
	return 0;
 801aa6e:	bfa4      	itt	ge
 801aa70:	2000      	movge	r0, #0
	data->orientation = orientation;
 801aa72:	70ac      	strbge	r4, [r5, #2]
}
 801aa74:	b003      	add	sp, #12
 801aa76:	bd30      	pop	{r4, r5, pc}
			tx_data |= ILI9XXX_MADCTL_MV;
 801aa78:	2328      	movs	r3, #40	; 0x28
 801aa7a:	e7ef      	b.n	801aa5c <ili9xxx_set_orientation+0x22>
			tx_data |= ILI9XXX_MADCTL_MY;
 801aa7c:	2388      	movs	r3, #136	; 0x88
 801aa7e:	e7ed      	b.n	801aa5c <ili9xxx_set_orientation+0x22>
			tx_data |= ILI9XXX_MADCTL_MV | ILI9XXX_MADCTL_MX |
 801aa80:	23e8      	movs	r3, #232	; 0xe8
 801aa82:	e7eb      	b.n	801aa5c <ili9xxx_set_orientation+0x22>
	} else if (config->quirks->cmd_set == CMD_SET_2) {
 801aa84:	2b01      	cmp	r3, #1
 801aa86:	d1eb      	bne.n	801aa60 <ili9xxx_set_orientation+0x26>
		if (orientation == DISPLAY_ORIENTATION_NORMAL) {
 801aa88:	2902      	cmp	r1, #2
 801aa8a:	d005      	beq.n	801aa98 <ili9xxx_set_orientation+0x5e>
 801aa8c:	2903      	cmp	r1, #3
 801aa8e:	d005      	beq.n	801aa9c <ili9xxx_set_orientation+0x62>
 801aa90:	2901      	cmp	r1, #1
 801aa92:	d1e5      	bne.n	801aa60 <ili9xxx_set_orientation+0x26>
			tx_data |= ILI9XXX_MADCTL_MV | ILI9XXX_MADCTL_MY;
 801aa94:	23a8      	movs	r3, #168	; 0xa8
 801aa96:	e7e1      	b.n	801aa5c <ili9xxx_set_orientation+0x22>
			tx_data |= ILI9XXX_MADCTL_MY | ILI9XXX_MADCTL_MX;
 801aa98:	23c8      	movs	r3, #200	; 0xc8
 801aa9a:	e7df      	b.n	801aa5c <ili9xxx_set_orientation+0x22>
			tx_data |= ILI9XXX_MADCTL_MV | ILI9XXX_MADCTL_MX;
 801aa9c:	2368      	movs	r3, #104	; 0x68
 801aa9e:	e7dd      	b.n	801aa5c <ili9xxx_set_orientation+0x22>

0801aaa0 <ili9xxx_set_pixel_format>:
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
 801aaa0:	2910      	cmp	r1, #16
{
 801aaa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aaa4:	460c      	mov	r4, r1
	struct ili9xxx_data *data = dev->data;
 801aaa6:	6905      	ldr	r5, [r0, #16]
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
 801aaa8:	d006      	beq.n	801aab8 <ili9xxx_set_pixel_format+0x18>
	} else if (pixel_format == PIXEL_FORMAT_RGB_888) {
 801aaaa:	2901      	cmp	r1, #1
 801aaac:	d015      	beq.n	801aada <ili9xxx_set_pixel_format+0x3a>
}
 801aaae:	b002      	add	sp, #8
 801aab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aab4:	f7e8 bbb8 	b.w	8003228 <ili9xxx_set_pixel_format.part.0>
 801aab8:	2355      	movs	r3, #85	; 0x55
		bytes_per_pixel = 2U;
 801aaba:	2602      	movs	r6, #2
		tx_data = ILI9XXX_PIXSET_MCU_16_BIT | ILI9XXX_PIXSET_RGB_16_BIT;
 801aabc:	f88d 3007 	strb.w	r3, [sp, #7]
	r = ili9xxx_transmit(dev, ILI9XXX_PIXSET, &tx_data, 1U);
 801aac0:	f10d 0207 	add.w	r2, sp, #7
 801aac4:	2301      	movs	r3, #1
 801aac6:	213a      	movs	r1, #58	; 0x3a
 801aac8:	f7ff ff8b 	bl	801a9e2 <ili9xxx_transmit>
	if (r < 0) {
 801aacc:	2800      	cmp	r0, #0
	return 0;
 801aace:	bfa2      	ittt	ge
 801aad0:	2000      	movge	r0, #0
	data->pixel_format = pixel_format;
 801aad2:	706c      	strbge	r4, [r5, #1]
	data->bytes_per_pixel = bytes_per_pixel;
 801aad4:	702e      	strbge	r6, [r5, #0]
}
 801aad6:	b002      	add	sp, #8
 801aad8:	bd70      	pop	{r4, r5, r6, pc}
 801aada:	2366      	movs	r3, #102	; 0x66
		bytes_per_pixel = 3U;
 801aadc:	2603      	movs	r6, #3
 801aade:	e7ed      	b.n	801aabc <ili9xxx_set_pixel_format+0x1c>

0801aae0 <ili9xxx_write>:
{
 801aae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aae4:	4616      	mov	r6, r2
	r = ili9xxx_set_mem_area(dev, x, y, desc->width, desc->height);
 801aae6:	88df      	ldrh	r7, [r3, #6]
 801aae8:	889a      	ldrh	r2, [r3, #4]
{
 801aaea:	461c      	mov	r4, r3
	spi_data[0] = sys_cpu_to_be16(x);
 801aaec:	ba4b      	rev16	r3, r1
{
 801aaee:	4682      	mov	sl, r0
 801aaf0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	spi_data[0] = sys_cpu_to_be16(x);
 801aaf4:	f8ad 3008 	strh.w	r3, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(x + w - 1U);
 801aaf8:	188b      	adds	r3, r1, r2
 801aafa:	3901      	subs	r1, #1
	const struct ili9xxx_config *config = dev->config;
 801aafc:	f8d0 8004 	ldr.w	r8, [r0, #4]
	spi_data[1] = sys_cpu_to_be16(x + w - 1U);
 801ab00:	3b01      	subs	r3, #1
	struct ili9xxx_data *data = dev->data;
 801ab02:	6905      	ldr	r5, [r0, #16]
	spi_data[1] = sys_cpu_to_be16(x + w - 1U);
 801ab04:	440a      	add	r2, r1
 801ab06:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ab0a:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
	r = ili9xxx_transmit(dev, ILI9XXX_CASET, &spi_data[0], 4U);
 801ab0e:	2304      	movs	r3, #4
 801ab10:	aa02      	add	r2, sp, #8
	spi_data[1] = sys_cpu_to_be16(x + w - 1U);
 801ab12:	f8ad 100a 	strh.w	r1, [sp, #10]
	r = ili9xxx_transmit(dev, ILI9XXX_CASET, &spi_data[0], 4U);
 801ab16:	212a      	movs	r1, #42	; 0x2a
 801ab18:	f7ff ff63 	bl	801a9e2 <ili9xxx_transmit>
	if (r < 0) {
 801ab1c:	2800      	cmp	r0, #0
 801ab1e:	db35      	blt.n	801ab8c <ili9xxx_write+0xac>
	spi_data[0] = sys_cpu_to_be16(y);
 801ab20:	ba73      	rev16	r3, r6
	spi_data[1] = sys_cpu_to_be16(y + h - 1U);
 801ab22:	443e      	add	r6, r7
	r = ili9xxx_transmit(dev, ILI9XXX_PASET, &spi_data[0], 4U);
 801ab24:	aa02      	add	r2, sp, #8
 801ab26:	212b      	movs	r1, #43	; 0x2b
	spi_data[1] = sys_cpu_to_be16(y + h - 1U);
 801ab28:	3e01      	subs	r6, #1
	spi_data[0] = sys_cpu_to_be16(y);
 801ab2a:	f8ad 3008 	strh.w	r3, [sp, #8]
	r = ili9xxx_transmit(dev, ILI9XXX_PASET, &spi_data[0], 4U);
 801ab2e:	4650      	mov	r0, sl
	spi_data[1] = sys_cpu_to_be16(y + h - 1U);
 801ab30:	f3c6 2307 	ubfx	r3, r6, #8, #8
 801ab34:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 801ab38:	f8ad 300a 	strh.w	r3, [sp, #10]
	r = ili9xxx_transmit(dev, ILI9XXX_PASET, &spi_data[0], 4U);
 801ab3c:	2304      	movs	r3, #4
 801ab3e:	f7ff ff50 	bl	801a9e2 <ili9xxx_transmit>
	if (r < 0) {
 801ab42:	2800      	cmp	r0, #0
 801ab44:	db22      	blt.n	801ab8c <ili9xxx_write+0xac>
	if (desc->pitch > desc->width) {
 801ab46:	88a2      	ldrh	r2, [r4, #4]
	r = ili9xxx_transmit(dev, ILI9XXX_RAMWR, write_data_start,
 801ab48:	212c      	movs	r1, #44	; 0x2c
	if (desc->pitch > desc->width) {
 801ab4a:	8923      	ldrh	r3, [r4, #8]
	r = ili9xxx_transmit(dev, ILI9XXX_RAMWR, write_data_start,
 801ab4c:	4650      	mov	r0, sl
		nbr_of_writes = desc->height;
 801ab4e:	88e6      	ldrh	r6, [r4, #6]
	if (desc->pitch > desc->width) {
 801ab50:	4293      	cmp	r3, r2
			     desc->width * data->bytes_per_pixel * write_h);
 801ab52:	782b      	ldrb	r3, [r5, #0]
		write_h = desc->height;
 801ab54:	bf94      	ite	ls
 801ab56:	4637      	movls	r7, r6
		write_h = 1U;
 801ab58:	2701      	movhi	r7, #1
			     desc->width * data->bytes_per_pixel * write_h);
 801ab5a:	fb02 f303 	mul.w	r3, r2, r3
	r = ili9xxx_transmit(dev, ILI9XXX_RAMWR, write_data_start,
 801ab5e:	464a      	mov	r2, r9
		nbr_of_writes = 1U;
 801ab60:	bf98      	it	ls
 801ab62:	2601      	movls	r6, #1
	r = ili9xxx_transmit(dev, ILI9XXX_RAMWR, write_data_start,
 801ab64:	437b      	muls	r3, r7
 801ab66:	f7ff ff3c 	bl	801a9e2 <ili9xxx_transmit>
	if (r < 0) {
 801ab6a:	2800      	cmp	r0, #0
 801ab6c:	db0e      	blt.n	801ab8c <ili9xxx_write+0xac>
	tx_bufs.count = 1;
 801ab6e:	2301      	movs	r3, #1
	write_data_start += desc->pitch * data->bytes_per_pixel;
 801ab70:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	tx_bufs.buffers = &tx_buf;
 801ab74:	f8cd d008 	str.w	sp, [sp, #8]
		r = spi_write_dt(&config->spi, &tx_bufs);
 801ab78:	f108 0804 	add.w	r8, r8, #4
	tx_bufs.count = 1;
 801ab7c:	9303      	str	r3, [sp, #12]
	write_data_start += desc->pitch * data->bytes_per_pixel;
 801ab7e:	782a      	ldrb	r2, [r5, #0]
 801ab80:	fb02 9a0a 	mla	sl, r2, sl, r9
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
 801ab84:	4699      	mov	r9, r3
 801ab86:	45b1      	cmp	r9, r6
 801ab88:	d303      	bcc.n	801ab92 <ili9xxx_write+0xb2>
	return 0;
 801ab8a:	2000      	movs	r0, #0
}
 801ab8c:	b004      	add	sp, #16
 801ab8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tx_buf.len = desc->width * data->bytes_per_pixel * write_h;
 801ab92:	88a3      	ldrh	r3, [r4, #4]
		r = spi_write_dt(&config->spi, &tx_bufs);
 801ab94:	a902      	add	r1, sp, #8
		tx_buf.buf = (void *)write_data_start;
 801ab96:	f8cd a000 	str.w	sl, [sp]
		r = spi_write_dt(&config->spi, &tx_bufs);
 801ab9a:	4640      	mov	r0, r8
		tx_buf.len = desc->width * data->bytes_per_pixel * write_h;
 801ab9c:	782a      	ldrb	r2, [r5, #0]
 801ab9e:	4353      	muls	r3, r2
 801aba0:	437b      	muls	r3, r7
 801aba2:	9301      	str	r3, [sp, #4]
		r = spi_write_dt(&config->spi, &tx_bufs);
 801aba4:	f7ff fefe 	bl	801a9a4 <spi_write_dt>
		if (r < 0) {
 801aba8:	2800      	cmp	r0, #0
 801abaa:	dbef      	blt.n	801ab8c <ili9xxx_write+0xac>
		write_data_start += desc->pitch * data->bytes_per_pixel;
 801abac:	8923      	ldrh	r3, [r4, #8]
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
 801abae:	f109 0901 	add.w	r9, r9, #1
		write_data_start += desc->pitch * data->bytes_per_pixel;
 801abb2:	782a      	ldrb	r2, [r5, #0]
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
 801abb4:	fa1f f989 	uxth.w	r9, r9
		write_data_start += desc->pitch * data->bytes_per_pixel;
 801abb8:	fb02 aa03 	mla	sl, r2, r3, sl
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
 801abbc:	e7e3      	b.n	801ab86 <ili9xxx_write+0xa6>

0801abbe <ili9xxx_display_blanking_off>:
	return ili9xxx_transmit(dev, ILI9XXX_DISPON, NULL, 0);
 801abbe:	2300      	movs	r3, #0
 801abc0:	2129      	movs	r1, #41	; 0x29
 801abc2:	461a      	mov	r2, r3
 801abc4:	f7ff bf0d 	b.w	801a9e2 <ili9xxx_transmit>

0801abc8 <ili9xxx_display_blanking_on>:
	return ili9xxx_transmit(dev, ILI9XXX_DISPOFF, NULL, 0);
 801abc8:	2300      	movs	r3, #0
 801abca:	2128      	movs	r1, #40	; 0x28
 801abcc:	461a      	mov	r2, r3
 801abce:	f7ff bf08 	b.w	801a9e2 <ili9xxx_transmit>

0801abd2 <ili9340_regs_init>:

#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(display_ili9340, CONFIG_DISPLAY_LOG_LEVEL);

int ili9340_regs_init(const struct device *dev)
{
 801abd2:	b538      	push	{r3, r4, r5, lr}
	const struct ili9xxx_config *config = dev->config;
	const struct ili9340_regs *regs = config->regs;
 801abd4:	6843      	ldr	r3, [r0, #4]

	int r;

	LOG_HEXDUMP_DBG(regs->gamset, ILI9340_GAMSET_LEN, "GAMSET");
	r = ili9xxx_transmit(dev, ILI9340_GAMSET, regs->gamset,
 801abd6:	2126      	movs	r1, #38	; 0x26
{
 801abd8:	4604      	mov	r4, r0
	const struct ili9340_regs *regs = config->regs;
 801abda:	6b9d      	ldr	r5, [r3, #56]	; 0x38
	r = ili9xxx_transmit(dev, ILI9340_GAMSET, regs->gamset,
 801abdc:	2301      	movs	r3, #1
 801abde:	462a      	mov	r2, r5
 801abe0:	f7ff feff 	bl	801a9e2 <ili9xxx_transmit>
			     ILI9340_GAMSET_LEN);
	if (r < 0) {
 801abe4:	2800      	cmp	r0, #0
 801abe6:	db44      	blt.n	801ac72 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->frmctr1, ILI9340_FRMCTR1_LEN, "FRMCTR1");
	r = ili9xxx_transmit(dev, ILI9340_FRMCTR1, regs->frmctr1,
 801abe8:	2302      	movs	r3, #2
 801abea:	1c6a      	adds	r2, r5, #1
 801abec:	21b1      	movs	r1, #177	; 0xb1
 801abee:	4620      	mov	r0, r4
 801abf0:	f7ff fef7 	bl	801a9e2 <ili9xxx_transmit>
			     ILI9340_FRMCTR1_LEN);
	if (r < 0) {
 801abf4:	2800      	cmp	r0, #0
 801abf6:	db3c      	blt.n	801ac72 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->disctrl, ILI9340_DISCTRL_LEN, "DISCTRL");
	r = ili9xxx_transmit(dev, ILI9340_DISCTRL, regs->disctrl,
 801abf8:	2303      	movs	r3, #3
 801abfa:	21b6      	movs	r1, #182	; 0xb6
 801abfc:	4620      	mov	r0, r4
 801abfe:	18ea      	adds	r2, r5, r3
 801ac00:	f7ff feef 	bl	801a9e2 <ili9xxx_transmit>
			     ILI9340_DISCTRL_LEN);
	if (r < 0) {
 801ac04:	2800      	cmp	r0, #0
 801ac06:	db34      	blt.n	801ac72 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->pwctrl1, ILI9340_PWCTRL1_LEN, "PWCTRL1");
	r = ili9xxx_transmit(dev, ILI9340_PWCTRL1, regs->pwctrl1,
 801ac08:	2302      	movs	r3, #2
 801ac0a:	1daa      	adds	r2, r5, #6
 801ac0c:	21c0      	movs	r1, #192	; 0xc0
 801ac0e:	4620      	mov	r0, r4
 801ac10:	f7ff fee7 	bl	801a9e2 <ili9xxx_transmit>
			     ILI9340_PWCTRL1_LEN);
	if (r < 0) {
 801ac14:	2800      	cmp	r0, #0
 801ac16:	db2c      	blt.n	801ac72 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->pwctrl2, ILI9340_PWCTRL2_LEN, "PWCTRL2");
	r = ili9xxx_transmit(dev, ILI9340_PWCTRL2, regs->pwctrl2,
 801ac18:	2301      	movs	r3, #1
 801ac1a:	f105 0208 	add.w	r2, r5, #8
 801ac1e:	21c1      	movs	r1, #193	; 0xc1
 801ac20:	4620      	mov	r0, r4
 801ac22:	f7ff fede 	bl	801a9e2 <ili9xxx_transmit>
			     ILI9340_PWCTRL2_LEN);
	if (r < 0) {
 801ac26:	2800      	cmp	r0, #0
 801ac28:	db23      	blt.n	801ac72 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->vmctrl1, ILI9340_VMCTRL1_LEN, "VMCTRL1");
	r = ili9xxx_transmit(dev, ILI9340_VMCTRL1, regs->vmctrl1,
 801ac2a:	2302      	movs	r3, #2
 801ac2c:	f105 0209 	add.w	r2, r5, #9
 801ac30:	21c5      	movs	r1, #197	; 0xc5
 801ac32:	4620      	mov	r0, r4
 801ac34:	f7ff fed5 	bl	801a9e2 <ili9xxx_transmit>
			     ILI9340_VMCTRL1_LEN);
	if (r < 0) {
 801ac38:	2800      	cmp	r0, #0
 801ac3a:	db1a      	blt.n	801ac72 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->vmctrl2, ILI9340_VMCTRL2_LEN, "VMCTRL2");
	r = ili9xxx_transmit(dev, ILI9340_VMCTRL2, regs->vmctrl2,
 801ac3c:	2301      	movs	r3, #1
 801ac3e:	f105 020b 	add.w	r2, r5, #11
 801ac42:	21c7      	movs	r1, #199	; 0xc7
 801ac44:	4620      	mov	r0, r4
 801ac46:	f7ff fecc 	bl	801a9e2 <ili9xxx_transmit>
			     ILI9340_VMCTRL2_LEN);
	if (r < 0) {
 801ac4a:	2800      	cmp	r0, #0
 801ac4c:	db11      	blt.n	801ac72 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->pgamctrl, ILI9340_PGAMCTRL_LEN, "PGAMCTRL");
	r = ili9xxx_transmit(dev, ILI9340_PGAMCTRL, regs->pgamctrl,
 801ac4e:	230f      	movs	r3, #15
 801ac50:	f105 020c 	add.w	r2, r5, #12
 801ac54:	21e0      	movs	r1, #224	; 0xe0
 801ac56:	4620      	mov	r0, r4
 801ac58:	f7ff fec3 	bl	801a9e2 <ili9xxx_transmit>
			     ILI9340_PGAMCTRL_LEN);
	if (r < 0) {
 801ac5c:	2800      	cmp	r0, #0
 801ac5e:	db08      	blt.n	801ac72 <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->ngamctrl, ILI9340_NGAMCTRL_LEN, "NGAMCTRL");
	r = ili9xxx_transmit(dev, ILI9340_NGAMCTRL, regs->ngamctrl,
 801ac60:	230f      	movs	r3, #15
 801ac62:	f105 021b 	add.w	r2, r5, #27
 801ac66:	21e1      	movs	r1, #225	; 0xe1
 801ac68:	4620      	mov	r0, r4
 801ac6a:	f7ff feba 	bl	801a9e2 <ili9xxx_transmit>
			     ILI9340_NGAMCTRL_LEN);
	if (r < 0) {
 801ac6e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
		return r;
	}

	return 0;
}
 801ac72:	bd38      	pop	{r3, r4, r5, pc}

0801ac74 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac74:	6843      	ldr	r3, [r0, #4]
}
 801ac76:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac78:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 801ac7a:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 801ac7c:	600b      	str	r3, [r1, #0]
}
 801ac7e:	4770      	bx	lr

0801ac80 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac80:	6843      	ldr	r3, [r0, #4]
 801ac82:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 801ac84:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 801ac86:	4042      	eors	r2, r0
 801ac88:	400a      	ands	r2, r1
 801ac8a:	4042      	eors	r2, r0
}
 801ac8c:	2000      	movs	r0, #0
  WRITE_REG(GPIOx->ODR, PortValue);
 801ac8e:	615a      	str	r2, [r3, #20]
 801ac90:	4770      	bx	lr

0801ac92 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac92:	6843      	ldr	r3, [r0, #4]
}
 801ac94:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac96:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 801ac98:	6199      	str	r1, [r3, #24]
}
 801ac9a:	4770      	bx	lr

0801ac9c <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac9c:	6843      	ldr	r3, [r0, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 801ac9e:	0409      	lsls	r1, r1, #16
}
 801aca0:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801aca2:	685b      	ldr	r3, [r3, #4]
 801aca4:	6199      	str	r1, [r3, #24]
}
 801aca6:	4770      	bx	lr

0801aca8 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801aca8:	6843      	ldr	r3, [r0, #4]
}
 801acaa:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801acac:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 801acae:	6953      	ldr	r3, [r2, #20]
 801acb0:	404b      	eors	r3, r1
 801acb2:	6153      	str	r3, [r2, #20]
}
 801acb4:	4770      	bx	lr

0801acb6 <gpio_stm32_manage_callback>:
{
 801acb6:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 801acb8:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 801acba:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 801acbc:	b1f8      	cbz	r0, 801acfe <gpio_stm32_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801acbe:	4288      	cmp	r0, r1
 801acc0:	d119      	bne.n	801acf6 <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 801acc2:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 801acc4:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 801acc6:	42a1      	cmp	r1, r4
	list->head = node;
 801acc8:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 801acca:	d100      	bne.n	801acce <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 801accc:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 801acce:	2000      	movs	r0, #0
 801acd0:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 801acd2:	b12a      	cbz	r2, 801ace0 <gpio_stm32_manage_callback+0x2a>
	return list->head;
 801acd4:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 801acd6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 801acd8:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 801acda:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 801acdc:	b902      	cbnz	r2, 801ace0 <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 801acde:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 801ace0:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 801ace2:	e010      	b.n	801ad06 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801ace4:	4281      	cmp	r1, r0
 801ace6:	d106      	bne.n	801acf6 <gpio_stm32_manage_callback+0x40>
	return node->next;
 801ace8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 801acea:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 801acec:	68d8      	ldr	r0, [r3, #12]
 801acee:	4281      	cmp	r1, r0
 801acf0:	d1ed      	bne.n	801acce <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 801acf2:	60dc      	str	r4, [r3, #12]
}
 801acf4:	e7eb      	b.n	801acce <gpio_stm32_manage_callback+0x18>
	return node->next;
 801acf6:	4604      	mov	r4, r0
 801acf8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801acfa:	2800      	cmp	r0, #0
 801acfc:	d1f2      	bne.n	801ace4 <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 801acfe:	2a00      	cmp	r2, #0
 801ad00:	d1e8      	bne.n	801acd4 <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 801ad02:	f06f 0015 	mvn.w	r0, #21
}
 801ad06:	bd10      	pop	{r4, pc}

0801ad08 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 801ad08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ad0c:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 801ad0e:	2001      	movs	r0, #1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 801ad10:	f3c2 1680 	ubfx	r6, r2, #6, #1
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 801ad14:	f3c2 1cc1 	ubfx	ip, r2, #7, #2
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801ad18:	6867      	ldr	r7, [r4, #4]
	pinval = 1 << pin;
 801ad1a:	4088      	lsls	r0, r1
 801ad1c:	408e      	lsls	r6, r1
 801ad1e:	f002 0530 	and.w	r5, r2, #48	; 0x30
 801ad22:	ea27 0700 	bic.w	r7, r7, r0
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 801ad26:	f3c2 2241 	ubfx	r2, r2, #9, #2
	if (mode == STM32_MODER_ALT_MODE) {
 801ad2a:	2d20      	cmp	r5, #32
 801ad2c:	ea46 0607 	orr.w	r6, r6, r7
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 801ad30:	fa00 f701 	lsl.w	r7, r0, r1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801ad34:	6066      	str	r6, [r4, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 801ad36:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 801ad3a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 801ad3e:	fb07 fc0c 	mul.w	ip, r7, ip
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 801ad42:	fb07 f202 	mul.w	r2, r7, r2
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 801ad46:	ea6f 060e 	mvn.w	r6, lr
 801ad4a:	ea28 080e 	bic.w	r8, r8, lr
 801ad4e:	ea4c 0c08 	orr.w	ip, ip, r8
 801ad52:	f8c4 c008 	str.w	ip, [r4, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 801ad56:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801ad5a:	ea2c 0c0e 	bic.w	ip, ip, lr
 801ad5e:	ea42 020c 	orr.w	r2, r2, ip
 801ad62:	60e2      	str	r2, [r4, #12]
 801ad64:	d10c      	bne.n	801ad80 <gpio_stm32_configure_raw.isra.0+0x78>
		if (pin < 8) {
 801ad66:	2907      	cmp	r1, #7
 801ad68:	dc12      	bgt.n	801ad90 <gpio_stm32_configure_raw.isra.0+0x88>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 801ad6a:	fa07 f201 	lsl.w	r2, r7, r1
 801ad6e:	6a20      	ldr	r0, [r4, #32]
 801ad70:	408a      	lsls	r2, r1
 801ad72:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 801ad76:	435a      	muls	r2, r3
 801ad78:	ea20 0101 	bic.w	r1, r0, r1
 801ad7c:	430a      	orrs	r2, r1
 801ad7e:	6222      	str	r2, [r4, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 801ad80:	6823      	ldr	r3, [r4, #0]
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 801ad82:	092d      	lsrs	r5, r5, #4
 801ad84:	401e      	ands	r6, r3
 801ad86:	437d      	muls	r5, r7
 801ad88:	4335      	orrs	r5, r6
 801ad8a:	6025      	str	r5, [r4, #0]
}
 801ad8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 801ad90:	0a02      	lsrs	r2, r0, #8
 801ad92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ad94:	4352      	muls	r2, r2
 801ad96:	4352      	muls	r2, r2
 801ad98:	ebc2 1002 	rsb	r0, r2, r2, lsl #4
 801ad9c:	435a      	muls	r2, r3
 801ad9e:	ea21 0100 	bic.w	r1, r1, r0
 801ada2:	430a      	orrs	r2, r1
 801ada4:	6262      	str	r2, [r4, #36]	; 0x24
}
 801ada6:	e7eb      	b.n	801ad80 <gpio_stm32_configure_raw.isra.0+0x78>

0801ada8 <gpio_stm32_config>:
{
 801ada8:	b538      	push	{r3, r4, r5, lr}
 801adaa:	4604      	mov	r4, r0
	if ((flags & GPIO_OUTPUT) != 0) {
 801adac:	0390      	lsls	r0, r2, #14
{
 801adae:	460d      	mov	r5, r1
 801adb0:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 801adb2:	d517      	bpl.n	801ade4 <gpio_stm32_config+0x3c>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 801adb4:	0791      	lsls	r1, r2, #30
 801adb6:	d50e      	bpl.n	801add6 <gpio_stm32_config+0x2e>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 801adb8:	075a      	lsls	r2, r3, #29
 801adba:	d52e      	bpl.n	801ae1a <gpio_stm32_config+0x72>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 801adbc:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 801adbe:	06d8      	lsls	r0, r3, #27
 801adc0:	d50b      	bpl.n	801adda <gpio_stm32_config+0x32>
			*pincfg |= STM32_PINCFG_PULL_UP;
 801adc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 801adc6:	0319      	lsls	r1, r3, #12
 801adc8:	d51a      	bpl.n	801ae00 <gpio_stm32_config+0x58>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801adca:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801adcc:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801adce:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801add0:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 801add2:	618b      	str	r3, [r1, #24]
	return 0;
 801add4:	e00d      	b.n	801adf2 <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 801add6:	2210      	movs	r2, #16
 801add8:	e7f1      	b.n	801adbe <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 801adda:	0699      	lsls	r1, r3, #26
 801addc:	d5f3      	bpl.n	801adc6 <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 801adde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 801ade2:	e7f0      	b.n	801adc6 <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 801ade4:	03da      	lsls	r2, r3, #15
 801ade6:	d513      	bpl.n	801ae10 <gpio_stm32_config+0x68>
		if ((flags & GPIO_PULL_UP) != 0) {
 801ade8:	06d8      	lsls	r0, r3, #27
 801adea:	d413      	bmi.n	801ae14 <gpio_stm32_config+0x6c>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 801adec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801adf0:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 801adf2:	6860      	ldr	r0, [r4, #4]
 801adf4:	2300      	movs	r3, #0
 801adf6:	4629      	mov	r1, r5
 801adf8:	f7ff ff86 	bl	801ad08 <gpio_stm32_configure_raw.isra.0>
	return 0;
 801adfc:	2000      	movs	r0, #0
}
 801adfe:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 801ae00:	035b      	lsls	r3, r3, #13
 801ae02:	d5f6      	bpl.n	801adf2 <gpio_stm32_config+0x4a>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 801ae04:	2101      	movs	r1, #1
 801ae06:	4620      	mov	r0, r4
 801ae08:	40a9      	lsls	r1, r5
 801ae0a:	f7ff ff47 	bl	801ac9c <gpio_stm32_port_clear_bits_raw>
 801ae0e:	e7f0      	b.n	801adf2 <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 801ae10:	2230      	movs	r2, #48	; 0x30
 801ae12:	e7ee      	b.n	801adf2 <gpio_stm32_config+0x4a>
			*pincfg |= STM32_PINCFG_PULL_UP;
 801ae14:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ae18:	e7eb      	b.n	801adf2 <gpio_stm32_config+0x4a>
				return -ENOTSUP;
 801ae1a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 801ae1e:	e7ee      	b.n	801adfe <gpio_stm32_config+0x56>

0801ae20 <gpio_stm32_isr>:
{
 801ae20:	460b      	mov	r3, r1
 801ae22:	b570      	push	{r4, r5, r6, lr}
 801ae24:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 801ae26:	b121      	cbz	r1, 801ae32 <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 801ae28:	2501      	movs	r5, #1
 801ae2a:	685e      	ldr	r6, [r3, #4]
	return node->next;
 801ae2c:	680c      	ldr	r4, [r1, #0]
 801ae2e:	4085      	lsls	r5, r0
 801ae30:	b901      	cbnz	r1, 801ae34 <gpio_stm32_isr+0x14>
}
 801ae32:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 801ae34:	688a      	ldr	r2, [r1, #8]
 801ae36:	402a      	ands	r2, r5
 801ae38:	d002      	beq.n	801ae40 <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 801ae3a:	684b      	ldr	r3, [r1, #4]
 801ae3c:	4630      	mov	r0, r6
 801ae3e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 801ae40:	b11c      	cbz	r4, 801ae4a <gpio_stm32_isr+0x2a>
 801ae42:	6823      	ldr	r3, [r4, #0]
 801ae44:	4621      	mov	r1, r4
 801ae46:	461c      	mov	r4, r3
 801ae48:	e7f2      	b.n	801ae30 <gpio_stm32_isr+0x10>
 801ae4a:	4623      	mov	r3, r4
 801ae4c:	e7fa      	b.n	801ae44 <gpio_stm32_isr+0x24>

0801ae4e <gpio_stm32_configure>:
{
 801ae4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae50:	461f      	mov	r7, r3
 801ae52:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 801ae54:	6840      	ldr	r0, [r0, #4]
{
 801ae56:	460e      	mov	r6, r1
 801ae58:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 801ae5a:	f7ff ff55 	bl	801ad08 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 801ae5e:	2f11      	cmp	r7, #17
 801ae60:	d107      	bne.n	801ae72 <gpio_stm32_configure+0x24>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801ae62:	2101      	movs	r1, #1
		if (gpio_out == STM32_ODR_1) {
 801ae64:	052b      	lsls	r3, r5, #20
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801ae66:	fa01 f106 	lsl.w	r1, r1, r6
		if (gpio_out == STM32_ODR_1) {
 801ae6a:	d504      	bpl.n	801ae76 <gpio_stm32_configure+0x28>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ae6c:	6863      	ldr	r3, [r4, #4]
 801ae6e:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 801ae70:	6199      	str	r1, [r3, #24]
}
 801ae72:	2000      	movs	r0, #0
 801ae74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 801ae76:	4620      	mov	r0, r4
 801ae78:	f7ff ff10 	bl	801ac9c <gpio_stm32_port_clear_bits_raw>
 801ae7c:	e7f9      	b.n	801ae72 <gpio_stm32_configure+0x24>

0801ae7e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 801ae7e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 801ae80:	6803      	ldr	r3, [r0, #0]
 801ae82:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 801ae84:	7905      	ldrb	r5, [r0, #4]
 801ae86:	6804      	ldr	r4, [r0, #0]
 801ae88:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ae8c:	42a3      	cmp	r3, r4
 801ae8e:	d302      	bcc.n	801ae96 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
 801ae90:	f06f 0001 	mvn.w	r0, #1
}
 801ae94:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 801ae96:	795c      	ldrb	r4, [r3, #5]
 801ae98:	428c      	cmp	r4, r1
 801ae9a:	d001      	beq.n	801aea0 <pinctrl_lookup_state+0x22>
		(*state)++;
 801ae9c:	3308      	adds	r3, #8
 801ae9e:	e7f0      	b.n	801ae82 <pinctrl_lookup_state+0x4>
			return 0;
 801aea0:	2000      	movs	r0, #0
 801aea2:	e7f7      	b.n	801ae94 <pinctrl_lookup_state+0x16>

0801aea4 <reset_stm32_status>:
static int reset_stm32_status(const struct device *dev, uint32_t id,
			      uint8_t *status)
{
	const struct reset_stm32_config *config = dev->config;

	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 801aea4:	6843      	ldr	r3, [r0, #4]
 801aea6:	f3c1 104b 	ubfx	r0, r1, #5, #12
 801aeaa:	f001 011f 	and.w	r1, r1, #31
 801aeae:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
 801aeb0:	58c0      	ldr	r0, [r0, r3]
	return temp & (1 << bit);
 801aeb2:	2301      	movs	r3, #1
 801aeb4:	408b      	lsls	r3, r1
 801aeb6:	4203      	tst	r3, r0
				 STM32_RESET_REG_BIT(id));

	return 0;
}
 801aeb8:	f04f 0000 	mov.w	r0, #0
	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 801aebc:	bf14      	ite	ne
 801aebe:	2301      	movne	r3, #1
 801aec0:	2300      	moveq	r3, #0
 801aec2:	7013      	strb	r3, [r2, #0]
}
 801aec4:	4770      	bx	lr

0801aec6 <reset_stm32_line_assert>:

static int reset_stm32_line_assert(const struct device *dev, uint32_t id)
{
 801aec6:	b510      	push	{r4, lr}
	const struct reset_stm32_config *config = dev->config;

	sys_set_bit(config->base + STM32_RESET_SET_OFFSET(id),
 801aec8:	6843      	ldr	r3, [r0, #4]
 801aeca:	f3c1 104b 	ubfx	r0, r1, #5, #12
 801aece:	f001 011f 	and.w	r1, r1, #31
 801aed2:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 801aed4:	2301      	movs	r3, #1
	uint32_t temp = *(volatile uint32_t *)addr;
 801aed6:	5884      	ldr	r4, [r0, r2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 801aed8:	408b      	lsls	r3, r1
 801aeda:	4323      	orrs	r3, r4
 801aedc:	5083      	str	r3, [r0, r2]
		    STM32_RESET_REG_BIT(id));

	return 0;
}
 801aede:	2000      	movs	r0, #0
 801aee0:	bd10      	pop	{r4, pc}

0801aee2 <reset_stm32_line_deassert>:

static int reset_stm32_line_deassert(const struct device *dev, uint32_t id)
{
 801aee2:	b510      	push	{r4, lr}

#if DT_INST_PROP(0, set_bit_to_deassert)
	sys_set_bit(config->base + STM32_RESET_CLR_OFFSET(id),
		    STM32_RESET_REG_BIT(id));
#else
	sys_clear_bit(config->base + STM32_RESET_SET_OFFSET(id),
 801aee4:	6843      	ldr	r3, [r0, #4]
 801aee6:	f3c1 144b 	ubfx	r4, r1, #5, #12
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 801aeea:	2201      	movs	r2, #1
 801aeec:	f001 011f 	and.w	r1, r1, #31
 801aef0:	6818      	ldr	r0, [r3, #0]
 801aef2:	408a      	lsls	r2, r1
	uint32_t temp = *(volatile uint32_t *)addr;
 801aef4:	5823      	ldr	r3, [r4, r0]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 801aef6:	ea23 0302 	bic.w	r3, r3, r2
 801aefa:	5023      	str	r3, [r4, r0]
		      STM32_RESET_REG_BIT(id));
#endif

	return 0;
}
 801aefc:	2000      	movs	r0, #0
 801aefe:	bd10      	pop	{r4, pc}

0801af00 <reset_stm32_line_toggle>:

static int reset_stm32_line_toggle(const struct device *dev, uint32_t id)
{
 801af00:	b538      	push	{r3, r4, r5, lr}
 801af02:	4604      	mov	r4, r0
 801af04:	460d      	mov	r5, r1
	reset_stm32_line_assert(dev, id);
 801af06:	f7ff ffde 	bl	801aec6 <reset_stm32_line_assert>
	reset_stm32_line_deassert(dev, id);
 801af0a:	4629      	mov	r1, r5
 801af0c:	4620      	mov	r0, r4
 801af0e:	f7ff ffe8 	bl	801aee2 <reset_stm32_line_deassert>

	return 0;
}
 801af12:	2000      	movs	r0, #0
 801af14:	bd38      	pop	{r3, r4, r5, pc}

0801af16 <uart_stm32_err_check>:
	const struct uart_stm32_config *config = dev->config;
 801af16:	6842      	ldr	r2, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 801af18:	6813      	ldr	r3, [r2, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 801af1a:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 801af1c:	69d9      	ldr	r1, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 801af1e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 801af22:	07c9      	lsls	r1, r1, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 801af24:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_PARITY;
 801af26:	bf48      	it	mi
 801af28:	f040 0002 	orrmi.w	r0, r0, #2
 801af2c:	0789      	lsls	r1, r1, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 801af2e:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_FRAMING;
 801af30:	bf48      	it	mi
 801af32:	f040 0004 	orrmi.w	r0, r0, #4
 801af36:	0749      	lsls	r1, r1, #29
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 801af38:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_NOISE;
 801af3a:	bf48      	it	mi
 801af3c:	f040 0020 	orrmi.w	r0, r0, #32
 801af40:	05c9      	lsls	r1, r1, #23
 801af42:	d504      	bpl.n	801af4e <uart_stm32_err_check+0x38>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 801af44:	f44f 7180 	mov.w	r1, #256	; 0x100
		err |= UART_BREAK;
 801af48:	f040 0008 	orr.w	r0, r0, #8
 801af4c:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 801af4e:	07c1      	lsls	r1, r0, #31
 801af50:	d502      	bpl.n	801af58 <uart_stm32_err_check+0x42>
		LL_USART_ClearFlag_ORE(config->usart);
 801af52:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801af54:	2108      	movs	r1, #8
 801af56:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 801af58:	0783      	lsls	r3, r0, #30
 801af5a:	d502      	bpl.n	801af62 <uart_stm32_err_check+0x4c>
		LL_USART_ClearFlag_PE(config->usart);
 801af5c:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 801af5e:	2101      	movs	r1, #1
 801af60:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 801af62:	0741      	lsls	r1, r0, #29
 801af64:	d502      	bpl.n	801af6c <uart_stm32_err_check+0x56>
		LL_USART_ClearFlag_FE(config->usart);
 801af66:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 801af68:	2102      	movs	r1, #2
 801af6a:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_NOISE) {
 801af6c:	0683      	lsls	r3, r0, #26
 801af6e:	d502      	bpl.n	801af76 <uart_stm32_err_check+0x60>
		LL_USART_ClearFlag_NE(config->usart);
 801af70:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 801af72:	2204      	movs	r2, #4
 801af74:	621a      	str	r2, [r3, #32]
}
 801af76:	4770      	bx	lr

0801af78 <uart_stm32_poll_out>:
{
 801af78:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 801af7a:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 801af7c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 801af7e:	69d3      	ldr	r3, [r2, #28]
 801af80:	061b      	lsls	r3, r3, #24
 801af82:	d5fc      	bpl.n	801af7e <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 801af84:	f04f 0210 	mov.w	r2, #16
 801af88:	f3ef 8311 	mrs	r3, BASEPRI
 801af8c:	f382 8812 	msr	BASEPRI_MAX, r2
 801af90:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 801af94:	6802      	ldr	r2, [r0, #0]
 801af96:	69d4      	ldr	r4, [r2, #28]
 801af98:	0624      	lsls	r4, r4, #24
 801af9a:	d404      	bmi.n	801afa6 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 801af9c:	f383 8811 	msr	BASEPRI, r3
 801afa0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 801afa4:	e7ea      	b.n	801af7c <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 801afa6:	6291      	str	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 801afa8:	f383 8811 	msr	BASEPRI, r3
 801afac:	f3bf 8f6f 	isb	sy
}
 801afb0:	bd10      	pop	{r4, pc}

0801afb2 <uart_stm32_poll_in>:
	const struct uart_stm32_config *config = dev->config;
 801afb2:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 801afb4:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 801afb6:	69d0      	ldr	r0, [r2, #28]
 801afb8:	0700      	lsls	r0, r0, #28
 801afba:	d501      	bpl.n	801afc0 <uart_stm32_poll_in+0xe>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801afbc:	2008      	movs	r0, #8
 801afbe:	6210      	str	r0, [r2, #32]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 801afc0:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 801afc2:	69da      	ldr	r2, [r3, #28]
 801afc4:	0692      	lsls	r2, r2, #26
 801afc6:	d503      	bpl.n	801afd0 <uart_stm32_poll_in+0x1e>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 801afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return 0;
 801afca:	2000      	movs	r0, #0
 801afcc:	700b      	strb	r3, [r1, #0]
 801afce:	4770      	bx	lr
		return -1;
 801afd0:	f04f 30ff 	mov.w	r0, #4294967295
}
 801afd4:	4770      	bx	lr

0801afd6 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 801afd6:	6903      	ldr	r3, [r0, #16]
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 801afdc:	6843      	ldr	r3, [r0, #4]
 801afde:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 801afe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801afea:	d03d      	beq.n	801b068 <uart_stm32_config_get+0x92>
 801afec:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 801aff0:	f1dc 0300 	rsbs	r3, ip, #0
 801aff4:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 801aff8:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 801affa:	6843      	ldr	r3, [r0, #4]
 801affc:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 801affe:	685b      	ldr	r3, [r3, #4]
 801b000:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 801b004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b008:	d030      	beq.n	801b06c <uart_stm32_config_get+0x96>
 801b00a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801b00e:	d02f      	beq.n	801b070 <uart_stm32_config_get+0x9a>
		return UART_CFG_STOP_BITS_2;
 801b010:	2b00      	cmp	r3, #0
 801b012:	bf0c      	ite	eq
 801b014:	2301      	moveq	r3, #1
 801b016:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 801b018:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 801b01a:	6843      	ldr	r3, [r0, #4]
 801b01c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 801b01e:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 801b020:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 801b022:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 801b026:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (db) {
 801b02a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 801b02e:	d021      	beq.n	801b074 <uart_stm32_config_get+0x9e>
 801b030:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 801b034:	d123      	bne.n	801b07e <uart_stm32_config_get+0xa8>
			return UART_CFG_DATA_BITS_7;
 801b036:	2b00      	cmp	r3, #0
 801b038:	bf14      	ite	ne
 801b03a:	2301      	movne	r3, #1
 801b03c:	2302      	moveq	r3, #2
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 801b03e:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 801b040:	6843      	ldr	r3, [r0, #4]
 801b042:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 801b044:	689b      	ldr	r3, [r3, #8]
 801b046:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 801b04a:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 801b04e:	4253      	negs	r3, r2
 801b050:	4153      	adcs	r3, r2
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 801b052:	71cb      	strb	r3, [r1, #7]
	return LL_USART_IsEnabledDEMode(config->usart);
 801b054:	6842      	ldr	r2, [r0, #4]
}
 801b056:	2000      	movs	r0, #0
	return LL_USART_IsEnabledDEMode(config->usart);
 801b058:	6812      	ldr	r2, [r2, #0]
  return ((READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM)) ? 1UL : 0UL);
 801b05a:	6892      	ldr	r2, [r2, #8]
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_RS485;
 801b05c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 801b060:	bf18      	it	ne
 801b062:	2303      	movne	r3, #3
 801b064:	71cb      	strb	r3, [r1, #7]
}
 801b066:	4770      	bx	lr
	switch (parity) {
 801b068:	2302      	movs	r3, #2
 801b06a:	e7c5      	b.n	801aff8 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 801b06c:	2300      	movs	r3, #0
 801b06e:	e7d3      	b.n	801b018 <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 801b070:	2302      	movs	r3, #2
 801b072:	e7d1      	b.n	801b018 <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_9;
 801b074:	2b00      	cmp	r3, #0
 801b076:	bf14      	ite	ne
 801b078:	2303      	movne	r3, #3
 801b07a:	2304      	moveq	r3, #4
 801b07c:	e7df      	b.n	801b03e <uart_stm32_config_get+0x68>
			return UART_CFG_DATA_BITS_8;
 801b07e:	2b00      	cmp	r3, #0
 801b080:	bf14      	ite	ne
 801b082:	2302      	movne	r3, #2
 801b084:	2303      	moveq	r3, #3
 801b086:	e7da      	b.n	801b03e <uart_stm32_config_get+0x68>

0801b088 <uart_stm32_set_baudrate>:
{
 801b088:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 801b08a:	6903      	ldr	r3, [r0, #16]
{
 801b08c:	460c      	mov	r4, r1
	const struct uart_stm32_config *config = dev->config;
 801b08e:	6845      	ldr	r5, [r0, #4]
		if (clock_control_get_rate(data->clock,
 801b090:	6858      	ldr	r0, [r3, #4]
					   (clock_control_subsys_t)&config->pclken[0],
 801b092:	6869      	ldr	r1, [r5, #4]
	if (api->get_rate == NULL) {
 801b094:	6883      	ldr	r3, [r0, #8]
 801b096:	68db      	ldr	r3, [r3, #12]
 801b098:	b91b      	cbnz	r3, 801b0a2 <uart_stm32_set_baudrate+0x1a>
 801b09a:	f7e8 fadd 	bl	8003658 <uart_stm32_set_baudrate.part.0>
}
 801b09e:	b003      	add	sp, #12
 801b0a0:	bd30      	pop	{r4, r5, pc}
	return api->get_rate(dev, sys, rate);
 801b0a2:	aa01      	add	r2, sp, #4
 801b0a4:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 801b0a6:	2800      	cmp	r0, #0
 801b0a8:	dbf7      	blt.n	801b09a <uart_stm32_set_baudrate+0x12>
		LL_USART_SetOverSampling(config->usart,
 801b0aa:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 801b0ac:	6813      	ldr	r3, [r2, #0]
 801b0ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801b0b2:	6013      	str	r3, [r2, #0]
  else if (BaudRate == 0U)
 801b0b4:	2c00      	cmp	r4, #0
 801b0b6:	d0f2      	beq.n	801b09e <uart_stm32_set_baudrate+0x16>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 801b0b8:	9b01      	ldr	r3, [sp, #4]
		LL_USART_SetBaudRate(config->usart,
 801b0ba:	682a      	ldr	r2, [r5, #0]
 801b0bc:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 801b0c0:	fbb3 f3f4 	udiv	r3, r3, r4
 801b0c4:	b29b      	uxth	r3, r3
 801b0c6:	60d3      	str	r3, [r2, #12]
			 "BaudRateReg >= 16");
 801b0c8:	e7e9      	b.n	801b09e <uart_stm32_set_baudrate+0x16>

0801b0ca <spi_context_get_next_buf>:
{
 801b0ca:	b530      	push	{r4, r5, lr}
 801b0cc:	4604      	mov	r4, r0
	while (*count) {
 801b0ce:	6808      	ldr	r0, [r1, #0]
 801b0d0:	b908      	cbnz	r0, 801b0d6 <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 801b0d2:	6010      	str	r0, [r2, #0]
	return NULL;
 801b0d4:	e008      	b.n	801b0e8 <spi_context_get_next_buf+0x1e>
		if (((*current)->len / dfs) != 0) {
 801b0d6:	6820      	ldr	r0, [r4, #0]
 801b0d8:	6845      	ldr	r5, [r0, #4]
 801b0da:	429d      	cmp	r5, r3
 801b0dc:	d305      	bcc.n	801b0ea <spi_context_get_next_buf+0x20>
			*buf_len = (*current)->len / dfs;
 801b0de:	fbb5 f5f3 	udiv	r5, r5, r3
 801b0e2:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
 801b0e4:	6823      	ldr	r3, [r4, #0]
 801b0e6:	6818      	ldr	r0, [r3, #0]
}
 801b0e8:	bd30      	pop	{r4, r5, pc}
		++(*current);
 801b0ea:	3008      	adds	r0, #8
 801b0ec:	6020      	str	r0, [r4, #0]
		--(*count);
 801b0ee:	6808      	ldr	r0, [r1, #0]
 801b0f0:	3801      	subs	r0, #1
 801b0f2:	6008      	str	r0, [r1, #0]
 801b0f4:	e7eb      	b.n	801b0ce <spi_context_get_next_buf+0x4>

0801b0f6 <spi_context_buffers_setup>:
{
 801b0f6:	b570      	push	{r4, r5, r6, lr}
 801b0f8:	4604      	mov	r4, r0
 801b0fa:	4615      	mov	r5, r2
 801b0fc:	461e      	mov	r6, r3
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 801b0fe:	b9e9      	cbnz	r1, 801b13c <spi_context_buffers_setup+0x46>
 801b100:	6341      	str	r1, [r0, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 801b102:	2300      	movs	r3, #0
 801b104:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 801b106:	f104 0248 	add.w	r2, r4, #72	; 0x48
 801b10a:	4633      	mov	r3, r6
 801b10c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 801b110:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801b114:	f7ff ffd9 	bl	801b0ca <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 801b118:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 801b11a:	b9ad      	cbnz	r5, 801b148 <spi_context_buffers_setup+0x52>
 801b11c:	63e5      	str	r5, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 801b11e:	2300      	movs	r3, #0
 801b120:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 801b122:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b126:	4633      	mov	r3, r6
 801b128:	f104 0140 	add.w	r1, r4, #64	; 0x40
 801b12c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801b130:	f7ff ffcb 	bl	801b0ca <spi_context_get_next_buf>
	ctx->sync_status = 0;
 801b134:	2300      	movs	r3, #0
	ctx->rx_buf = (uint8_t *)
 801b136:	64e0      	str	r0, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
 801b138:	6323      	str	r3, [r4, #48]	; 0x30
}
 801b13a:	bd70      	pop	{r4, r5, r6, pc}
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 801b13c:	680b      	ldr	r3, [r1, #0]
 801b13e:	6343      	str	r3, [r0, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 801b140:	2b00      	cmp	r3, #0
 801b142:	d0de      	beq.n	801b102 <spi_context_buffers_setup+0xc>
 801b144:	684b      	ldr	r3, [r1, #4]
 801b146:	e7dd      	b.n	801b104 <spi_context_buffers_setup+0xe>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 801b148:	682b      	ldr	r3, [r5, #0]
 801b14a:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d0e6      	beq.n	801b11e <spi_context_buffers_setup+0x28>
 801b150:	686b      	ldr	r3, [r5, #4]
 801b152:	e7e5      	b.n	801b120 <spi_context_buffers_setup+0x2a>

0801b154 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 801b154:	4603      	mov	r3, r0
 801b156:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
 801b158:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 801b15a:	7919      	ldrb	r1, [r3, #4]
 801b15c:	2301      	movs	r3, #1
 801b15e:	fa03 f101 	lsl.w	r1, r3, r1
 801b162:	6903      	ldr	r3, [r0, #16]
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 801b168:	bf18      	it	ne
 801b16a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 801b16e:	b112      	cbz	r2, 801b176 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 801b170:	6883      	ldr	r3, [r0, #8]
 801b172:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 801b174:	4718      	bx	r3
 801b176:	6883      	ldr	r3, [r0, #8]
 801b178:	691b      	ldr	r3, [r3, #16]
 801b17a:	e7fb      	b.n	801b174 <gpio_pin_set_dt.isra.0+0x20>

0801b17c <spi_context_unlock_unconditionally>:
{
 801b17c:	b510      	push	{r4, lr}
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 801b17e:	6803      	ldr	r3, [r0, #0]
{
 801b180:	4604      	mov	r4, r0
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 801b182:	b14b      	cbz	r3, 801b198 <spi_context_unlock_unconditionally+0x1c>
 801b184:	689a      	ldr	r2, [r3, #8]
 801b186:	b13a      	cbz	r2, 801b198 <spi_context_unlock_unconditionally+0x1c>
			k_busy_wait(ctx->config->cs.delay);
 801b188:	6918      	ldr	r0, [r3, #16]
	z_impl_k_busy_wait(usec_to_wait);
 801b18a:	f7fd fde5 	bl	8018d58 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs.gpio, 0);
 801b18e:	6820      	ldr	r0, [r4, #0]
 801b190:	2100      	movs	r1, #0
 801b192:	3008      	adds	r0, #8
 801b194:	f7ff ffde 	bl	801b154 <gpio_pin_set_dt.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
 801b198:	69a3      	ldr	r3, [r4, #24]
 801b19a:	b933      	cbnz	r3, 801b1aa <spi_context_unlock_unconditionally+0x2e>
		ctx->owner = NULL;
 801b19c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 801b19e:	f104 0010 	add.w	r0, r4, #16
}
 801b1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1a6:	f7fe b835 	b.w	8019214 <z_impl_k_sem_give>
 801b1aa:	bd10      	pop	{r4, pc}

0801b1ac <spi_stm32_release>:
{
 801b1ac:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 801b1ae:	6900      	ldr	r0, [r0, #16]
 801b1b0:	f7ff ffe4 	bl	801b17c <spi_context_unlock_unconditionally>
}
 801b1b4:	2000      	movs	r0, #0
 801b1b6:	bd08      	pop	{r3, pc}

0801b1b8 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 801b1b8:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 801b1ba:	b910      	cbnz	r0, 801b1c2 <lv_disp_get_scr_act+0xa>
 801b1bc:	f7f6 ff9a 	bl	80120f4 <lv_disp_get_default>
    if(!disp) {
 801b1c0:	b100      	cbz	r0, 801b1c4 <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 801b1c2:	6900      	ldr	r0, [r0, #16]
}
 801b1c4:	bd08      	pop	{r3, pc}

0801b1c6 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 801b1c6:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 801b1c8:	b910      	cbnz	r0, 801b1d0 <lv_disp_get_scr_prev+0xa>
 801b1ca:	f7f6 ff93 	bl	80120f4 <lv_disp_get_default>
    if(!disp) {
 801b1ce:	b100      	cbz	r0, 801b1d2 <lv_disp_get_scr_prev+0xc>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 801b1d0:	6940      	ldr	r0, [r0, #20]
}
 801b1d2:	bd08      	pop	{r3, pc}

0801b1d4 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 801b1d4:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 801b1d6:	b910      	cbnz	r0, 801b1de <lv_disp_get_layer_top+0xa>
 801b1d8:	f7f6 ff8c 	bl	80120f4 <lv_disp_get_default>
    if(!disp) {
 801b1dc:	b100      	cbz	r0, 801b1e0 <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 801b1de:	69c0      	ldr	r0, [r0, #28]
}
 801b1e0:	bd08      	pop	{r3, pc}

0801b1e2 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 801b1e2:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 801b1e4:	b910      	cbnz	r0, 801b1ec <lv_disp_get_layer_sys+0xa>
 801b1e6:	f7f6 ff85 	bl	80120f4 <lv_disp_get_default>
    if(!disp) {
 801b1ea:	b100      	cbz	r0, 801b1ee <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 801b1ec:	6a00      	ldr	r0, [r0, #32]
}
 801b1ee:	bd08      	pop	{r3, pc}

0801b1f0 <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 801b1f0:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 801b1f2:	b908      	cbnz	r0, 801b1f8 <lv_disp_get_theme+0x8>
 801b1f4:	f7f6 ff7e 	bl	80120f4 <lv_disp_get_default>
    return disp->theme;
}
 801b1f8:	6880      	ldr	r0, [r0, #8]
 801b1fa:	bd08      	pop	{r3, pc}

0801b1fc <lv_disp_is_invalidation_enabled>:
 * Get display invalidation is enabled.
 * @param disp pointer to a display (NULL to use the default display)
 * @return return true if invalidation is enabled
 */
bool lv_disp_is_invalidation_enabled(lv_disp_t * disp)
{
 801b1fc:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 801b1fe:	b910      	cbnz	r0, 801b206 <lv_disp_is_invalidation_enabled+0xa>
 801b200:	f7f6 ff78 	bl	80120f4 <lv_disp_get_default>
    if(!disp) {
 801b204:	b128      	cbz	r0, 801b212 <lv_disp_is_invalidation_enabled+0x16>
        LV_LOG_WARN("no display registered");
        return false;
    }

    return (disp->inv_en_cnt > 0);
 801b206:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 801b20a:	2800      	cmp	r0, #0
 801b20c:	bfd4      	ite	le
 801b20e:	2000      	movle	r0, #0
 801b210:	2001      	movgt	r0, #1
}
 801b212:	bd08      	pop	{r3, pc}

0801b214 <lv_obj_get_event_dsc.isra.0>:
    if(!obj->spec_attr) return NULL;
 801b214:	b150      	cbz	r0, 801b22c <lv_obj_get_event_dsc.isra.0+0x18>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 801b216:	7e83      	ldrb	r3, [r0, #26]
 801b218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b21c:	428b      	cmp	r3, r1
 801b21e:	d904      	bls.n	801b22a <lv_obj_get_event_dsc.isra.0+0x16>
    return &obj->spec_attr->event_dsc[id];
 801b220:	68c0      	ldr	r0, [r0, #12]
 801b222:	230c      	movs	r3, #12
 801b224:	fb03 0001 	mla	r0, r3, r1, r0
 801b228:	4770      	bx	lr
    if(!obj->spec_attr) return NULL;
 801b22a:	2000      	movs	r0, #0
}
 801b22c:	4770      	bx	lr

0801b22e <lv_obj_event_base>:
{
 801b22e:	b510      	push	{r4, lr}
 801b230:	460c      	mov	r4, r1
    if(class_p == NULL) base = e->current_target->class_p;
 801b232:	b970      	cbnz	r0, 801b252 <lv_obj_event_base+0x24>
 801b234:	684b      	ldr	r3, [r1, #4]
 801b236:	6818      	ldr	r0, [r3, #0]
    while(base && base->event_cb == NULL) base = base->base_class;
 801b238:	b168      	cbz	r0, 801b256 <lv_obj_event_base+0x28>
 801b23a:	6903      	ldr	r3, [r0, #16]
 801b23c:	b14b      	cbz	r3, 801b252 <lv_obj_event_base+0x24>
    e->user_data = NULL;
 801b23e:	2300      	movs	r3, #0
    base->event_cb(base, e);
 801b240:	4621      	mov	r1, r4
    e->user_data = NULL;
 801b242:	60e3      	str	r3, [r4, #12]
    base->event_cb(base, e);
 801b244:	6903      	ldr	r3, [r0, #16]
 801b246:	4798      	blx	r3
    if(e->deleted) res = LV_RES_INV;
 801b248:	7e20      	ldrb	r0, [r4, #24]
 801b24a:	43c0      	mvns	r0, r0
 801b24c:	f000 0001 	and.w	r0, r0, #1
}
 801b250:	bd10      	pop	{r4, pc}
    while(base && base->event_cb == NULL) base = base->base_class;
 801b252:	6800      	ldr	r0, [r0, #0]
 801b254:	e7f0      	b.n	801b238 <lv_obj_event_base+0xa>
    if(base == NULL) return LV_RES_OK;
 801b256:	2001      	movs	r0, #1
 801b258:	e7fa      	b.n	801b250 <lv_obj_event_base+0x22>

0801b25a <lv_event_get_target>:
}
 801b25a:	6800      	ldr	r0, [r0, #0]
 801b25c:	4770      	bx	lr

0801b25e <lv_event_get_current_target>:
}
 801b25e:	6840      	ldr	r0, [r0, #4]
 801b260:	4770      	bx	lr

0801b262 <lv_event_get_code>:
    return e->code & ~LV_EVENT_PREPROCESS;
 801b262:	7a00      	ldrb	r0, [r0, #8]
}
 801b264:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801b268:	4770      	bx	lr

0801b26a <lv_event_get_param>:
}
 801b26a:	6900      	ldr	r0, [r0, #16]
 801b26c:	4770      	bx	lr

0801b26e <lv_event_get_user_data>:
}
 801b26e:	68c0      	ldr	r0, [r0, #12]
 801b270:	4770      	bx	lr

0801b272 <lv_obj_add_event_cb>:
{
 801b272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b276:	4604      	mov	r4, r0
 801b278:	460f      	mov	r7, r1
 801b27a:	4616      	mov	r6, r2
 801b27c:	461d      	mov	r5, r3
    lv_obj_allocate_spec_attr(obj);
 801b27e:	f7e9 fdaf 	bl	8004de0 <lv_obj_allocate_spec_attr>
    obj->spec_attr->event_dsc_cnt++;
 801b282:	68a2      	ldr	r2, [r4, #8]
 801b284:	7e93      	ldrb	r3, [r2, #26]
 801b286:	1c59      	adds	r1, r3, #1
 801b288:	f361 0305 	bfi	r3, r1, #0, #6
 801b28c:	7693      	strb	r3, [r2, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 801b28e:	f8d4 8008 	ldr.w	r8, [r4, #8]
                                               obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 801b292:	f898 001a 	ldrb.w	r0, [r8, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 801b296:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801b29a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b29e:	0081      	lsls	r1, r0, #2
 801b2a0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801b2a4:	f7f7 fa6e 	bl	8012784 <lv_mem_realloc>
 801b2a8:	f8c8 000c 	str.w	r0, [r8, #12]
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 801b2ac:	68a3      	ldr	r3, [r4, #8]
 801b2ae:	68da      	ldr	r2, [r3, #12]
 801b2b0:	b902      	cbnz	r2, 801b2b4 <lv_obj_add_event_cb+0x42>
 801b2b2:	e7fe      	b.n	801b2b2 <lv_obj_add_event_cb+0x40>
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
 801b2b4:	7e9b      	ldrb	r3, [r3, #26]
 801b2b6:	f06f 0c0b 	mvn.w	ip, #11
 801b2ba:	200c      	movs	r0, #12
 801b2bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b2c0:	fb10 c303 	smlabb	r3, r0, r3, ip
 801b2c4:	50d7      	str	r7, [r2, r3]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].filter = filter;
 801b2c6:	68a3      	ldr	r3, [r4, #8]
 801b2c8:	7e99      	ldrb	r1, [r3, #26]
 801b2ca:	68db      	ldr	r3, [r3, #12]
 801b2cc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801b2d0:	fb10 c101 	smlabb	r1, r0, r1, ip
 801b2d4:	440b      	add	r3, r1
 801b2d6:	721e      	strb	r6, [r3, #8]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 801b2d8:	68a3      	ldr	r3, [r4, #8]
 801b2da:	7e9a      	ldrb	r2, [r3, #26]
 801b2dc:	68db      	ldr	r3, [r3, #12]
 801b2de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801b2e2:	fb10 c202 	smlabb	r2, r0, r2, ip
 801b2e6:	4413      	add	r3, r2
 801b2e8:	605d      	str	r5, [r3, #4]
    return &obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1];
 801b2ea:	68a2      	ldr	r2, [r4, #8]
 801b2ec:	7e93      	ldrb	r3, [r2, #26]
 801b2ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b2f2:	fb10 c003 	smlabb	r0, r0, r3, ip
 801b2f6:	68d3      	ldr	r3, [r2, #12]
}
 801b2f8:	4418      	add	r0, r3
 801b2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b2fe <lv_event_get_indev>:
       e->code == LV_EVENT_DEFOCUSED ||
 801b2fe:	7a03      	ldrb	r3, [r0, #8]
    if(e->code == LV_EVENT_PRESSED ||
 801b300:	3b01      	subs	r3, #1
 801b302:	2b0f      	cmp	r3, #15
    return e->param;
 801b304:	bf94      	ite	ls
 801b306:	6900      	ldrls	r0, [r0, #16]
        return NULL;
 801b308:	2000      	movhi	r0, #0
}
 801b30a:	4770      	bx	lr

0801b30c <lv_event_get_draw_ctx>:
    if(e->code == LV_EVENT_DRAW_MAIN ||
 801b30c:	7a03      	ldrb	r3, [r0, #8]
 801b30e:	3b14      	subs	r3, #20
 801b310:	2b05      	cmp	r3, #5
    return e->param;
 801b312:	bf94      	ite	ls
 801b314:	6900      	ldrls	r0, [r0, #16]
        return NULL;
 801b316:	2000      	movhi	r0, #0
}
 801b318:	4770      	bx	lr

0801b31a <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801b31a:	7a02      	ldrb	r2, [r0, #8]
{
 801b31c:	460b      	mov	r3, r1
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801b31e:	2a13      	cmp	r2, #19
 801b320:	d106      	bne.n	801b330 <lv_event_set_ext_draw_size+0x16>
    return e->param;
 801b322:	6902      	ldr	r2, [r0, #16]
        *cur_size = LV_MAX(*cur_size, size);
 801b324:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b328:	4299      	cmp	r1, r3
 801b32a:	bfb8      	it	lt
 801b32c:	4619      	movlt	r1, r3
 801b32e:	8011      	strh	r1, [r2, #0]
}
 801b330:	4770      	bx	lr

0801b332 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 801b332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
 801b334:	2600      	movs	r6, #0
{
 801b336:	4607      	mov	r7, r0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 801b338:	2000      	movs	r0, #0
 801b33a:	f7f6 ff19 	bl	8012170 <lv_indev_get_next>
    lv_indev_t * indev_encoder = NULL;
 801b33e:	4635      	mov	r5, r6
    lv_indev_t * indev = lv_indev_get_next(NULL);
 801b340:	4604      	mov	r4, r0
    while(indev) {
 801b342:	b934      	cbnz	r4, 801b352 <get_indev+0x20>
            indev_group = indev;
        }
        indev = lv_indev_get_next(indev);
    }

    if(indev_encoder) return indev_encoder;
 801b344:	b9bd      	cbnz	r5, 801b376 <get_indev+0x44>
    if(indev_group) return indev_group;
 801b346:	b9c6      	cbnz	r6, 801b37a <get_indev+0x48>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 801b348:	4630      	mov	r0, r6
}
 801b34a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return lv_indev_get_next(NULL);
 801b34e:	f7f6 bf0f 	b.w	8012170 <lv_indev_get_next>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801b352:	4620      	mov	r0, r4
 801b354:	f000 f945 	bl	801b5e2 <lv_indev_get_type>
        if(indev->group == g) {
 801b358:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801b35a:	42bb      	cmp	r3, r7
 801b35c:	d105      	bne.n	801b36a <get_indev+0x38>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 801b35e:	2802      	cmp	r0, #2
 801b360:	d008      	beq.n	801b374 <get_indev+0x42>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 801b362:	4626      	mov	r6, r4
 801b364:	2804      	cmp	r0, #4
 801b366:	bf08      	it	eq
 801b368:	4625      	moveq	r5, r4
        indev = lv_indev_get_next(indev);
 801b36a:	4620      	mov	r0, r4
 801b36c:	f7f6 ff00 	bl	8012170 <lv_indev_get_next>
 801b370:	4604      	mov	r4, r0
 801b372:	e7e6      	b.n	801b342 <get_indev+0x10>
 801b374:	4625      	mov	r5, r4
}
 801b376:	4628      	mov	r0, r5
 801b378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b37a:	4635      	mov	r5, r6
 801b37c:	e7fb      	b.n	801b376 <get_indev+0x44>

0801b37e <focus_next_core>:
{
 801b37e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->frozen) return focus_changed;
 801b382:	7f03      	ldrb	r3, [r0, #28]
{
 801b384:	4605      	mov	r5, r0
 801b386:	4688      	mov	r8, r1
 801b388:	4692      	mov	sl, r2
    if(group->frozen) return focus_changed;
 801b38a:	07dc      	lsls	r4, r3, #31
 801b38c:	d502      	bpl.n	801b394 <focus_next_core+0x16>
 801b38e:	2000      	movs	r0, #0
}
 801b390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_obj_t ** obj_next     = group->obj_focus;
 801b394:	68c6      	ldr	r6, [r0, #12]
        if(obj_next == NULL) {
 801b396:	b1be      	cbz	r6, 801b3c8 <focus_next_core+0x4a>
    lv_obj_t ** obj_next     = group->obj_focus;
 801b398:	4637      	mov	r7, r6
    bool can_begin           = true;
 801b39a:	f04f 0901 	mov.w	r9, #1
            obj_next = move(&group->obj_ll, obj_next);
 801b39e:	4631      	mov	r1, r6
 801b3a0:	4628      	mov	r0, r5
 801b3a2:	47d0      	blx	sl
            if(obj_next == obj_sentinel) return focus_changed;
 801b3a4:	42b8      	cmp	r0, r7
            obj_next = move(&group->obj_ll, obj_next);
 801b3a6:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return focus_changed;
 801b3a8:	d0f1      	beq.n	801b38e <focus_next_core+0x10>
 801b3aa:	463e      	mov	r6, r7
        if(obj_next == NULL) continue;
 801b3ac:	b9ac      	cbnz	r4, 801b3da <focus_next_core+0x5c>
            if(group->wrap || obj_sentinel == NULL) {
 801b3ae:	7f2b      	ldrb	r3, [r5, #28]
 801b3b0:	0719      	lsls	r1, r3, #28
 801b3b2:	d5ec      	bpl.n	801b38e <focus_next_core+0x10>
                if(!can_begin) return focus_changed;
 801b3b4:	f1b9 0f00 	cmp.w	r9, #0
 801b3b8:	d0e9      	beq.n	801b38e <focus_next_core+0x10>
                obj_next  = begin(&group->obj_ll);
 801b3ba:	4628      	mov	r0, r5
 801b3bc:	47c0      	blx	r8
 801b3be:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
 801b3c0:	b136      	cbz	r6, 801b3d0 <focus_next_core+0x52>
                can_begin = false;
 801b3c2:	f04f 0900 	mov.w	r9, #0
 801b3c6:	e7f1      	b.n	801b3ac <focus_next_core+0x2e>
            if(group->wrap || obj_sentinel == NULL) {
 801b3c8:	071a      	lsls	r2, r3, #28
 801b3ca:	d4f6      	bmi.n	801b3ba <focus_next_core+0x3c>
                obj_next  = begin(&group->obj_ll);
 801b3cc:	4788      	blx	r1
 801b3ce:	4604      	mov	r4, r0
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 801b3d0:	2c00      	cmp	r4, #0
 801b3d2:	d0dc      	beq.n	801b38e <focus_next_core+0x10>
 801b3d4:	4626      	mov	r6, r4
                can_begin = false;
 801b3d6:	f04f 0900 	mov.w	r9, #0
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 801b3da:	6820      	ldr	r0, [r4, #0]
 801b3dc:	f000 fb56 	bl	801ba8c <lv_obj_get_state>
 801b3e0:	0603      	lsls	r3, r0, #24
 801b3e2:	d438      	bmi.n	801b456 <focus_next_core+0xd8>
        lv_obj_t * parent = *obj_next;
 801b3e4:	6827      	ldr	r7, [r4, #0]
        while(parent) {
 801b3e6:	bb37      	cbnz	r7, 801b436 <focus_next_core+0xb8>
    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 801b3e8:	68eb      	ldr	r3, [r5, #12]
 801b3ea:	42a3      	cmp	r3, r4
 801b3ec:	d0cf      	beq.n	801b38e <focus_next_core+0x10>
    if(group->obj_focus) {
 801b3ee:	b173      	cbz	r3, 801b40e <focus_next_core+0x90>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 801b3f0:	681e      	ldr	r6, [r3, #0]
 801b3f2:	4628      	mov	r0, r5
 801b3f4:	f7ff ff9d 	bl	801b332 <get_indev>
 801b3f8:	210f      	movs	r1, #15
 801b3fa:	4602      	mov	r2, r0
 801b3fc:	4630      	mov	r0, r6
 801b3fe:	f7e9 f9a1 	bl	8004744 <lv_event_send>
        if(res != LV_RES_OK) return focus_changed;
 801b402:	2801      	cmp	r0, #1
 801b404:	d1c3      	bne.n	801b38e <focus_next_core+0x10>
        lv_obj_invalidate(*group->obj_focus);
 801b406:	68eb      	ldr	r3, [r5, #12]
 801b408:	6818      	ldr	r0, [r3, #0]
 801b40a:	f001 fc47 	bl	801cc9c <lv_obj_invalidate>
    group->obj_focus = obj_next;
 801b40e:	60ec      	str	r4, [r5, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 801b410:	4628      	mov	r0, r5
 801b412:	6824      	ldr	r4, [r4, #0]
 801b414:	f7ff ff8d 	bl	801b332 <get_indev>
 801b418:	210e      	movs	r1, #14
 801b41a:	4602      	mov	r2, r0
 801b41c:	4620      	mov	r0, r4
 801b41e:	f7e9 f991 	bl	8004744 <lv_event_send>
    if(res != LV_RES_OK) return focus_changed;
 801b422:	2801      	cmp	r0, #1
 801b424:	d1b3      	bne.n	801b38e <focus_next_core+0x10>
    lv_obj_invalidate(*group->obj_focus);
 801b426:	68eb      	ldr	r3, [r5, #12]
 801b428:	6818      	ldr	r0, [r3, #0]
 801b42a:	f001 fc37 	bl	801cc9c <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 801b42e:	692b      	ldr	r3, [r5, #16]
 801b430:	b9a3      	cbnz	r3, 801b45c <focus_next_core+0xde>
    return focus_changed;
 801b432:	2001      	movs	r0, #1
 801b434:	e7ac      	b.n	801b390 <focus_next_core+0x12>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 801b436:	2101      	movs	r1, #1
 801b438:	4638      	mov	r0, r7
 801b43a:	f000 fb1b 	bl	801ba74 <lv_obj_has_flag>
 801b43e:	b920      	cbnz	r0, 801b44a <focus_next_core+0xcc>
            parent = lv_obj_get_parent(parent);
 801b440:	4638      	mov	r0, r7
 801b442:	f002 fed5 	bl	801e1f0 <lv_obj_get_parent>
 801b446:	4607      	mov	r7, r0
 801b448:	e7cd      	b.n	801b3e6 <focus_next_core+0x68>
        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 801b44a:	2101      	movs	r1, #1
 801b44c:	4638      	mov	r0, r7
 801b44e:	f000 fb11 	bl	801ba74 <lv_obj_has_flag>
 801b452:	2800      	cmp	r0, #0
 801b454:	d0c8      	beq.n	801b3e8 <focus_next_core+0x6a>
    bool can_begin           = true;
 801b456:	4637      	mov	r7, r6
 801b458:	4626      	mov	r6, r4
 801b45a:	e7a0      	b.n	801b39e <focus_next_core+0x20>
    if(group->focus_cb) group->focus_cb(group);
 801b45c:	4628      	mov	r0, r5
 801b45e:	4798      	blx	r3
 801b460:	e7e7      	b.n	801b432 <focus_next_core+0xb4>

0801b462 <lv_group_refocus>:
{
 801b462:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 801b464:	7f03      	ldrb	r3, [r0, #28]
{
 801b466:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
 801b468:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    g->wrap           = 1;
 801b46c:	f043 0308 	orr.w	r3, r3, #8
 801b470:	7703      	strb	r3, [r0, #28]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 801b472:	075b      	lsls	r3, r3, #29
 801b474:	d406      	bmi.n	801b484 <lv_group_refocus+0x22>
        lv_group_focus_next(g);
 801b476:	f7e9 f9a3 	bl	80047c0 <lv_group_focus_next>
    g->wrap = temp_wrap;
 801b47a:	7f23      	ldrb	r3, [r4, #28]
 801b47c:	f365 03c3 	bfi	r3, r5, #3, #1
 801b480:	7723      	strb	r3, [r4, #28]
}
 801b482:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 801b484:	f7e9 f9b0 	bl	80047e8 <lv_group_focus_prev>
 801b488:	e7f7      	b.n	801b47a <lv_group_refocus+0x18>

0801b48a <lv_group_remove_obj>:
{
 801b48a:	b570      	push	{r4, r5, r6, lr}
 801b48c:	4606      	mov	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 801b48e:	f000 faff 	bl	801ba90 <lv_obj_get_group>
    if(g == NULL) return;
 801b492:	4604      	mov	r4, r0
 801b494:	2800      	cmp	r0, #0
 801b496:	d038      	beq.n	801b50a <lv_group_remove_obj+0x80>
    if(g->obj_focus && *g->obj_focus == obj) {
 801b498:	68c3      	ldr	r3, [r0, #12]
 801b49a:	b1e3      	cbz	r3, 801b4d6 <lv_group_remove_obj+0x4c>
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	42b3      	cmp	r3, r6
 801b4a0:	d119      	bne.n	801b4d6 <lv_group_remove_obj+0x4c>
        if(g->frozen) g->frozen = 0;
 801b4a2:	7f03      	ldrb	r3, [r0, #28]
 801b4a4:	07da      	lsls	r2, r3, #31
 801b4a6:	bf44      	itt	mi
 801b4a8:	f36f 0300 	bfcmi	r3, #0, #1
 801b4ac:	7703      	strbmi	r3, [r0, #28]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 801b4ae:	f009 fb41 	bl	8024b34 <_lv_ll_get_head>
 801b4b2:	68e3      	ldr	r3, [r4, #12]
 801b4b4:	4283      	cmp	r3, r0
 801b4b6:	d129      	bne.n	801b50c <lv_group_remove_obj+0x82>
 801b4b8:	4620      	mov	r0, r4
 801b4ba:	f009 fb3e 	bl	8024b3a <_lv_ll_get_tail>
 801b4be:	68e3      	ldr	r3, [r4, #12]
 801b4c0:	4298      	cmp	r0, r3
 801b4c2:	d123      	bne.n	801b50c <lv_group_remove_obj+0x82>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 801b4c4:	6805      	ldr	r5, [r0, #0]
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	f7ff ff33 	bl	801b332 <get_indev>
 801b4cc:	210f      	movs	r1, #15
 801b4ce:	4602      	mov	r2, r0
 801b4d0:	4628      	mov	r0, r5
 801b4d2:	f7e9 f937 	bl	8004744 <lv_event_send>
    if(g->obj_focus && *g->obj_focus == obj) {
 801b4d6:	68e3      	ldr	r3, [r4, #12]
 801b4d8:	b123      	cbz	r3, 801b4e4 <lv_group_remove_obj+0x5a>
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	42b3      	cmp	r3, r6
        g->obj_focus = NULL;
 801b4de:	bf04      	itt	eq
 801b4e0:	2300      	moveq	r3, #0
 801b4e2:	60e3      	streq	r3, [r4, #12]
    _LV_LL_READ(&g->obj_ll, i) {
 801b4e4:	4620      	mov	r0, r4
 801b4e6:	f009 fb25 	bl	8024b34 <_lv_ll_get_head>
 801b4ea:	4605      	mov	r5, r0
 801b4ec:	b168      	cbz	r0, 801b50a <lv_group_remove_obj+0x80>
        if(*i == obj) {
 801b4ee:	682b      	ldr	r3, [r5, #0]
            _lv_ll_remove(&g->obj_ll, i);
 801b4f0:	4629      	mov	r1, r5
 801b4f2:	4620      	mov	r0, r4
        if(*i == obj) {
 801b4f4:	42b3      	cmp	r3, r6
 801b4f6:	d10d      	bne.n	801b514 <lv_group_remove_obj+0x8a>
            _lv_ll_remove(&g->obj_ll, i);
 801b4f8:	f009 fae1 	bl	8024abe <_lv_ll_remove>
            lv_mem_free(i);
 801b4fc:	4628      	mov	r0, r5
 801b4fe:	f7f7 f929 	bl	8012754 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 801b502:	68b3      	ldr	r3, [r6, #8]
 801b504:	b10b      	cbz	r3, 801b50a <lv_group_remove_obj+0x80>
 801b506:	2200      	movs	r2, #0
 801b508:	609a      	str	r2, [r3, #8]
}
 801b50a:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 801b50c:	4620      	mov	r0, r4
 801b50e:	f7ff ffa8 	bl	801b462 <lv_group_refocus>
 801b512:	e7e0      	b.n	801b4d6 <lv_group_remove_obj+0x4c>
    _LV_LL_READ(&g->obj_ll, i) {
 801b514:	f009 fb14 	bl	8024b40 <_lv_ll_get_next>
 801b518:	e7e7      	b.n	801b4ea <lv_group_remove_obj+0x60>

0801b51a <lv_group_add_obj>:
{
 801b51a:	b570      	push	{r4, r5, r6, lr}
 801b51c:	460c      	mov	r4, r1
    if(group == NULL) return;
 801b51e:	4605      	mov	r5, r0
 801b520:	b398      	cbz	r0, 801b58a <lv_group_add_obj+0x70>
    lv_group_remove_obj(obj);
 801b522:	4608      	mov	r0, r1
 801b524:	f7ff ffb1 	bl	801b48a <lv_group_remove_obj>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 801b528:	4628      	mov	r0, r5
 801b52a:	f009 fb03 	bl	8024b34 <_lv_ll_get_head>
 801b52e:	4601      	mov	r1, r0
 801b530:	b9c8      	cbnz	r0, 801b566 <lv_group_add_obj+0x4c>
    lv_group_t * group_cur = lv_obj_get_group(obj);
 801b532:	4620      	mov	r0, r4
 801b534:	f000 faac 	bl	801ba90 <lv_obj_get_group>
    if(group_cur) {
 801b538:	b140      	cbz	r0, 801b54c <lv_group_add_obj+0x32>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 801b53a:	68a3      	ldr	r3, [r4, #8]
 801b53c:	689b      	ldr	r3, [r3, #8]
 801b53e:	b153      	cbz	r3, 801b556 <lv_group_add_obj+0x3c>
 801b540:	68db      	ldr	r3, [r3, #12]
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	42a3      	cmp	r3, r4
 801b546:	d106      	bne.n	801b556 <lv_group_add_obj+0x3c>
            lv_group_refocus(group_cur);
 801b548:	f7ff ff8b 	bl	801b462 <lv_group_refocus>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 801b54c:	68a3      	ldr	r3, [r4, #8]
 801b54e:	b913      	cbnz	r3, 801b556 <lv_group_add_obj+0x3c>
 801b550:	4620      	mov	r0, r4
 801b552:	f7e9 fc45 	bl	8004de0 <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 801b556:	68a3      	ldr	r3, [r4, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 801b558:	4628      	mov	r0, r5
    obj->spec_attr->group_p = group;
 801b55a:	609d      	str	r5, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 801b55c:	f009 fa93 	bl	8024a86 <_lv_ll_ins_tail>
    LV_ASSERT_MALLOC(next);
 801b560:	4606      	mov	r6, r0
 801b562:	b938      	cbnz	r0, 801b574 <lv_group_add_obj+0x5a>
 801b564:	e7fe      	b.n	801b564 <lv_group_add_obj+0x4a>
        if((*obj_i) == obj) {
 801b566:	680b      	ldr	r3, [r1, #0]
 801b568:	42a3      	cmp	r3, r4
 801b56a:	d00e      	beq.n	801b58a <lv_group_add_obj+0x70>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 801b56c:	4628      	mov	r0, r5
 801b56e:	f009 fae7 	bl	8024b40 <_lv_ll_get_next>
 801b572:	e7dc      	b.n	801b52e <lv_group_add_obj+0x14>
    *next = obj;
 801b574:	6004      	str	r4, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 801b576:	4628      	mov	r0, r5
 801b578:	f009 fadc 	bl	8024b34 <_lv_ll_get_head>
 801b57c:	4286      	cmp	r6, r0
 801b57e:	d104      	bne.n	801b58a <lv_group_add_obj+0x70>
        lv_group_refocus(group);
 801b580:	4628      	mov	r0, r5
}
 801b582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 801b586:	f7ff bf6c 	b.w	801b462 <lv_group_refocus>
}
 801b58a:	bd70      	pop	{r4, r5, r6, pc}

0801b58c <lv_group_get_focused>:
    if(!group) return NULL;
 801b58c:	b110      	cbz	r0, 801b594 <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 801b58e:	68c0      	ldr	r0, [r0, #12]
 801b590:	b100      	cbz	r0, 801b594 <lv_group_get_focused+0x8>
    return *group->obj_focus;
 801b592:	6800      	ldr	r0, [r0, #0]
}
 801b594:	4770      	bx	lr

0801b596 <lv_group_set_editing>:
{
 801b596:	b538      	push	{r3, r4, r5, lr}
    if(group == NULL) return;
 801b598:	4603      	mov	r3, r0
 801b59a:	b1e0      	cbz	r0, 801b5d6 <lv_group_set_editing+0x40>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 801b59c:	7f02      	ldrb	r2, [r0, #28]
 801b59e:	f3c2 0440 	ubfx	r4, r2, #1, #1
 801b5a2:	428c      	cmp	r4, r1
 801b5a4:	d017      	beq.n	801b5d6 <lv_group_set_editing+0x40>
    group->editing     = en_val;
 801b5a6:	f361 0241 	bfi	r2, r1, #1, #1
 801b5aa:	7702      	strb	r2, [r0, #28]
    lv_obj_t * focused = lv_group_get_focused(group);
 801b5ac:	f7ff ffee 	bl	801b58c <lv_group_get_focused>
    if(focused) {
 801b5b0:	4604      	mov	r4, r0
 801b5b2:	b180      	cbz	r0, 801b5d6 <lv_group_set_editing+0x40>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 801b5b4:	68da      	ldr	r2, [r3, #12]
 801b5b6:	4618      	mov	r0, r3
 801b5b8:	6815      	ldr	r5, [r2, #0]
 801b5ba:	f7ff feba 	bl	801b332 <get_indev>
 801b5be:	210e      	movs	r1, #14
 801b5c0:	4602      	mov	r2, r0
 801b5c2:	4628      	mov	r0, r5
 801b5c4:	f7e9 f8be 	bl	8004744 <lv_event_send>
        if(res != LV_RES_OK) return;
 801b5c8:	2801      	cmp	r0, #1
 801b5ca:	d104      	bne.n	801b5d6 <lv_group_set_editing+0x40>
        lv_obj_invalidate(focused);
 801b5cc:	4620      	mov	r0, r4
}
 801b5ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(focused);
 801b5d2:	f001 bb63 	b.w	801cc9c <lv_obj_invalidate>
}
 801b5d6:	bd38      	pop	{r3, r4, r5, pc}

0801b5d8 <lv_group_get_editing>:
    if(!group) return false;
 801b5d8:	b110      	cbz	r0, 801b5e0 <lv_group_get_editing+0x8>
    return group->editing ? true : false;
 801b5da:	7f00      	ldrb	r0, [r0, #28]
 801b5dc:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 801b5e0:	4770      	bx	lr

0801b5e2 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 801b5e2:	b108      	cbz	r0, 801b5e8 <lv_indev_get_type+0x6>
    return indev->driver->type;
 801b5e4:	6803      	ldr	r3, [r0, #0]
 801b5e6:	7818      	ldrb	r0, [r3, #0]
}
 801b5e8:	4770      	bx	lr

0801b5ea <lv_indev_reset_long_press>:
{
 801b5ea:	b510      	push	{r4, lr}
    indev->proc.long_pr_sent         = 0;
 801b5ec:	7943      	ldrb	r3, [r0, #5]
{
 801b5ee:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
 801b5f0:	f36f 0300 	bfc	r3, #0, #1
 801b5f4:	7143      	strb	r3, [r0, #5]
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 801b5f6:	f008 fda8 	bl	802414a <lv_tick_get>
 801b5fa:	64e0      	str	r0, [r4, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
 801b5fc:	f008 fda5 	bl	802414a <lv_tick_get>
 801b600:	64a0      	str	r0, [r4, #72]	; 0x48
}
 801b602:	bd10      	pop	{r4, pc}

0801b604 <lv_indev_get_point>:
    if(indev == NULL) {
 801b604:	b910      	cbnz	r0, 801b60c <lv_indev_get_point+0x8>
        point->x = 0;
 801b606:	8008      	strh	r0, [r1, #0]
        point->y = 0;
 801b608:	8048      	strh	r0, [r1, #2]
}
 801b60a:	4770      	bx	lr
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) {
 801b60c:	6803      	ldr	r3, [r0, #0]
 801b60e:	781b      	ldrb	r3, [r3, #0]
 801b610:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801b614:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.act_point.x;
 801b616:	bf0d      	iteet	eq
 801b618:	f9b0 3008 	ldrsheq.w	r3, [r0, #8]
        point->x = -1;
 801b61c:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->y = -1;
 801b620:	f04f 30ff 	movne.w	r0, #4294967295
        point->x = indev->proc.types.pointer.act_point.x;
 801b624:	800b      	strheq	r3, [r1, #0]
        point->x = -1;
 801b626:	bf14      	ite	ne
 801b628:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 801b62a:	f9b0 000a 	ldrsheq.w	r0, [r0, #10]
 801b62e:	e7eb      	b.n	801b608 <lv_indev_get_point+0x4>

0801b630 <lv_indev_get_scroll_dir>:
    if(indev == NULL) return false;
 801b630:	b158      	cbz	r0, 801b64a <lv_indev_get_scroll_dir+0x1a>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 801b632:	6803      	ldr	r3, [r0, #0]
 801b634:	781b      	ldrb	r3, [r3, #0]
 801b636:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801b63a:	2b01      	cmp	r3, #1
 801b63c:	d104      	bne.n	801b648 <lv_indev_get_scroll_dir+0x18>
    return indev->proc.types.pointer.scroll_dir;
 801b63e:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 801b642:	f000 000f 	and.w	r0, r0, #15
 801b646:	4770      	bx	lr
    if(indev == NULL) return false;
 801b648:	2000      	movs	r0, #0
}
 801b64a:	4770      	bx	lr

0801b64c <lv_indev_get_scroll_obj>:
    if(indev == NULL) return NULL;
 801b64c:	b140      	cbz	r0, 801b660 <lv_indev_get_scroll_obj+0x14>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 801b64e:	6803      	ldr	r3, [r0, #0]
 801b650:	781b      	ldrb	r3, [r3, #0]
 801b652:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801b656:	2b01      	cmp	r3, #1
 801b658:	d101      	bne.n	801b65e <lv_indev_get_scroll_obj+0x12>
    return indev->proc.types.pointer.scroll_obj;
 801b65a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801b65c:	4770      	bx	lr
    if(indev == NULL) return NULL;
 801b65e:	2000      	movs	r0, #0
}
 801b660:	4770      	bx	lr

0801b662 <lv_indev_get_vect>:
    point->x = 0;
 801b662:	2300      	movs	r3, #0
 801b664:	800b      	strh	r3, [r1, #0]
    point->y = 0;
 801b666:	804b      	strh	r3, [r1, #2]
    if(indev == NULL) return;
 801b668:	b158      	cbz	r0, 801b682 <lv_indev_get_vect+0x20>
    if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_BUTTON) {
 801b66a:	6803      	ldr	r3, [r0, #0]
 801b66c:	781b      	ldrb	r3, [r3, #0]
 801b66e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801b672:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.vect.x;
 801b674:	bf01      	itttt	eq
 801b676:	f9b0 3018 	ldrsheq.w	r3, [r0, #24]
 801b67a:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 801b67c:	f9b0 301a 	ldrsheq.w	r3, [r0, #26]
 801b680:	804b      	strheq	r3, [r1, #2]
}
 801b682:	4770      	bx	lr

0801b684 <lv_indev_wait_release>:
    if(indev == NULL)return;
 801b684:	b118      	cbz	r0, 801b68e <lv_indev_wait_release+0xa>
    indev->proc.wait_until_release = 1;
 801b686:	7943      	ldrb	r3, [r0, #5]
 801b688:	f043 0308 	orr.w	r3, r3, #8
 801b68c:	7143      	strb	r3, [r0, #5]
}
 801b68e:	4770      	bx	lr

0801b690 <lv_indev_scroll_throw_predict>:
 * @param dir `LV_DIR_VER` or `LV_DIR_HOR`
 * @return the difference compared to the current position when the throw would be finished
 */
lv_coord_t lv_indev_scroll_throw_predict(lv_indev_t * indev, lv_dir_t dir)
{
    if(indev == NULL) return 0;
 801b690:	b1c0      	cbz	r0, 801b6c4 <lv_indev_scroll_throw_predict+0x34>
    lv_coord_t v;
    switch(dir) {
 801b692:	2903      	cmp	r1, #3
 801b694:	d00b      	beq.n	801b6ae <lv_indev_scroll_throw_predict+0x1e>
 801b696:	290c      	cmp	r1, #12
 801b698:	d113      	bne.n	801b6c2 <lv_indev_scroll_throw_predict+0x32>
        case LV_DIR_VER:
            v = indev->proc.types.pointer.scroll_throw_vect_ori.y;
 801b69a:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
            break;
        default:
            return 0;
    }

    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 801b69e:	6802      	ldr	r2, [r0, #0]
    lv_coord_t sum = 0;
    while(v) {
        sum += v;
        v = v * (100 - scroll_throw) / 100;
 801b6a0:	2164      	movs	r1, #100	; 0x64
    lv_coord_t sum = 0;
 801b6a2:	2000      	movs	r0, #0
    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 801b6a4:	7e52      	ldrb	r2, [r2, #25]
        v = v * (100 - scroll_throw) / 100;
 801b6a6:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
    while(v) {
 801b6aa:	b91b      	cbnz	r3, 801b6b4 <lv_indev_scroll_throw_predict+0x24>
 801b6ac:	4770      	bx	lr
            v = indev->proc.types.pointer.scroll_throw_vect_ori.x;
 801b6ae:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
            break;
 801b6b2:	e7f4      	b.n	801b69e <lv_indev_scroll_throw_predict+0xe>
        sum += v;
 801b6b4:	4418      	add	r0, r3
        v = v * (100 - scroll_throw) / 100;
 801b6b6:	4353      	muls	r3, r2
 801b6b8:	fb93 f3f1 	sdiv	r3, r3, r1
        sum += v;
 801b6bc:	b200      	sxth	r0, r0
        v = v * (100 - scroll_throw) / 100;
 801b6be:	b21b      	sxth	r3, r3
 801b6c0:	e7f3      	b.n	801b6aa <lv_indev_scroll_throw_predict+0x1a>
    if(indev == NULL) return 0;
 801b6c2:	2000      	movs	r0, #0
    }

    return sum;
}
 801b6c4:	4770      	bx	lr

0801b6c6 <lv_obj_constructor>:
{
 801b6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_t * parent = obj->parent;
 801b6ca:	684f      	ldr	r7, [r1, #4]
{
 801b6cc:	460d      	mov	r5, r1
    if(parent) {
 801b6ce:	b32f      	cbz	r7, 801b71c <lv_obj_constructor+0x56>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 801b6d0:	4638      	mov	r0, r7
 801b6d2:	f7ea fac7 	bl	8005c64 <lv_obj_get_scroll_left>
 801b6d6:	4606      	mov	r6, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 801b6d8:	4638      	mov	r0, r7
 801b6da:	f001 fc7e 	bl	801cfda <lv_obj_get_scroll_top>
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 801b6de:	8afc      	ldrh	r4, [r7, #22]
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 801b6e0:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b6e2:	2210      	movs	r2, #16
 801b6e4:	2100      	movs	r1, #0
 801b6e6:	4638      	mov	r0, r7
 801b6e8:	f002 f9fe 	bl	801dae8 <lv_obj_get_style_prop>
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 801b6ec:	1823      	adds	r3, r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b6ee:	2212      	movs	r2, #18
 801b6f0:	2100      	movs	r1, #0
 801b6f2:	eba3 0308 	sub.w	r3, r3, r8
 801b6f6:	4638      	mov	r0, r7
 801b6f8:	b29b      	uxth	r3, r3
 801b6fa:	82eb      	strh	r3, [r5, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 801b6fc:	3b01      	subs	r3, #1
 801b6fe:	836b      	strh	r3, [r5, #26]
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 801b700:	8abc      	ldrh	r4, [r7, #20]
 801b702:	f002 f9f1 	bl	801dae8 <lv_obj_get_style_prop>
        obj->coords.x2  = obj->coords.x1 - 1;
 801b706:	f64b 3376 	movw	r3, #47990	; 0xbb76
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 801b70a:	4404      	add	r4, r0
 801b70c:	1ba0      	subs	r0, r4, r6
 801b70e:	b280      	uxth	r0, r0
 801b710:	82a8      	strh	r0, [r5, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 801b712:	3801      	subs	r0, #1
 801b714:	8328      	strh	r0, [r5, #24]
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 801b716:	61eb      	str	r3, [r5, #28]
}
 801b718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b71c:	f641 0376 	movw	r3, #6262	; 0x1876
 801b720:	e7f9      	b.n	801b716 <lv_obj_constructor+0x50>

0801b722 <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 801b722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(obj->state == new_state) return;
 801b726:	8c03      	ldrh	r3, [r0, #32]
{
 801b728:	b08d      	sub	sp, #52	; 0x34
 801b72a:	4605      	mov	r5, r0
 801b72c:	468a      	mov	sl, r1
    if(obj->state == new_state) return;
 801b72e:	428b      	cmp	r3, r1
 801b730:	9304      	str	r3, [sp, #16]
 801b732:	f000 8117 	beq.w	801b964 <lv_obj_set_state+0x242>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 801b736:	460a      	mov	r2, r1
    obj->state = new_state;
 801b738:	8401      	strh	r1, [r0, #32]
    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 801b73a:	4619      	mov	r1, r3
 801b73c:	f002 fc07 	bl	801df4e <_lv_obj_style_state_compare>
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 801b740:	9003      	str	r0, [sp, #12]
 801b742:	2800      	cmp	r0, #0
 801b744:	f000 810e 	beq.w	801b964 <lv_obj_set_state+0x242>

    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 801b748:	f44f 7020 	mov.w	r0, #640	; 0x280
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
    uint32_t tsi = 0;
    uint32_t i;
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 801b74c:	2400      	movs	r4, #0
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 801b74e:	f7f7 f833 	bl	80127b8 <lv_mem_buf_get>
    memset(dst, 0x00, len);
 801b752:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b756:	2100      	movs	r1, #0
 801b758:	4607      	mov	r7, r0
    uint32_t tsi = 0;
 801b75a:	46a1      	mov	r9, r4
 801b75c:	f7ff f814 	bl	801a788 <memset>
        _lv_obj_style_t * obj_style = &obj->styles[i];
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 801b760:	ea6f 030a 	mvn.w	r3, sl
 801b764:	9308      	str	r3, [sp, #32]
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 801b766:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 801b768:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801b76c:	42a3      	cmp	r3, r4
 801b76e:	d944      	bls.n	801b7fa <lv_obj_set_state+0xd8>
 801b770:	f1b9 0f20 	cmp.w	r9, #32
 801b774:	d041      	beq.n	801b7fa <lv_obj_set_state+0xd8>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 801b776:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801b77a:	00e6      	lsls	r6, r4, #3
 801b77c:	eb08 0bc4 	add.w	fp, r8, r4, lsl #3
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 801b780:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b784:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801b788:	f002 fce2 	bl	801e150 <lv_obj_style_get_selector_state>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 801b78c:	68eb      	ldr	r3, [r5, #12]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 801b78e:	9005      	str	r0, [sp, #20]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 801b790:	4433      	add	r3, r6
 801b792:	6858      	ldr	r0, [r3, #4]
 801b794:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801b798:	f002 fcdc 	bl	801e154 <lv_obj_style_get_selector_part>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 801b79c:	9b08      	ldr	r3, [sp, #32]
 801b79e:	9a05      	ldr	r2, [sp, #20]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 801b7a0:	9006      	str	r0, [sp, #24]
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 801b7a2:	4213      	tst	r3, r2
 801b7a4:	d115      	bne.n	801b7d2 <lv_obj_set_state+0xb0>
        if(obj_style->is_trans) continue;
 801b7a6:	f89b 3007 	ldrb.w	r3, [fp, #7]
 801b7aa:	f013 0302 	ands.w	r3, r3, #2
 801b7ae:	d006      	beq.n	801b7be <lv_obj_set_state+0x9c>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 801b7b0:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 801b7b2:	3401      	adds	r4, #1
 801b7b4:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801b7b8:	429c      	cmp	r4, r3
 801b7ba:	d3dc      	bcc.n	801b776 <lv_obj_set_state+0x54>
 801b7bc:	e01d      	b.n	801b7fa <lv_obj_set_state+0xd8>

        lv_style_value_t v;
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 801b7be:	f858 2006 	ldr.w	r2, [r8, r6]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 801b7c2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801b7c6:	8890      	ldrh	r0, [r2, #4]
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 801b7c8:	79d1      	ldrb	r1, [r2, #7]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 801b7ca:	42b0      	cmp	r0, r6
 801b7cc:	d131      	bne.n	801b832 <lv_obj_set_state+0x110>
        for(i = 0; i < style->prop_cnt; i++) {
 801b7ce:	428b      	cmp	r3, r1
 801b7d0:	d301      	bcc.n	801b7d6 <lv_obj_set_state+0xb4>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 801b7d2:	3401      	adds	r4, #1
 801b7d4:	e7c7      	b.n	801b766 <lv_obj_set_state+0x44>
            const_prop = style->v_p.const_props + i;
 801b7d6:	6810      	ldr	r0, [r2, #0]
 801b7d8:	eb00 06c3 	add.w	r6, r0, r3, lsl #3
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 801b7dc:	f830 0033 	ldrh.w	r0, [r0, r3, lsl #3]
            if(prop_id == prop) {
 801b7e0:	f3c0 0c0d 	ubfx	ip, r0, #0, #14
 801b7e4:	f1bc 0f66 	cmp.w	ip, #102	; 0x66
 801b7e8:	d121      	bne.n	801b82e <lv_obj_set_state+0x10c>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 801b7ea:	0403      	lsls	r3, r0, #16
 801b7ec:	d50a      	bpl.n	801b804 <lv_obj_set_state+0xe2>
 801b7ee:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 801b7f0:	3401      	adds	r4, #1
 801b7f2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801b7f6:	42a3      	cmp	r3, r4
 801b7f8:	d8bd      	bhi.n	801b776 <lv_obj_set_state+0x54>
 801b7fa:	2614      	movs	r6, #20
 801b7fc:	463c      	mov	r4, r7
 801b7fe:	fb06 7609 	mla	r6, r6, r9, r7
 801b802:	e080      	b.n	801b906 <lv_obj_set_state+0x1e4>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 801b804:	0440      	lsls	r0, r0, #17
 801b806:	d510      	bpl.n	801b82a <lv_obj_set_state+0x108>
 801b808:	2066      	movs	r0, #102	; 0x66
 801b80a:	f7f7 f89d 	bl	8012948 <lv_style_prop_get_default>
 801b80e:	4606      	mov	r6, r0
        const lv_style_transition_dsc_t * tr = v.ptr;

        /*Add the props to the set if not added yet or added but with smaller weight*/
        uint32_t j;
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 801b810:	f04f 0800 	mov.w	r8, #0
 801b814:	6833      	ldr	r3, [r6, #0]
 801b816:	f833 3008 	ldrh.w	r3, [r3, r8]
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d0d9      	beq.n	801b7d2 <lv_obj_set_state+0xb0>
 801b81e:	f1b9 0f20 	cmp.w	r9, #32
 801b822:	d0d6      	beq.n	801b7d2 <lv_obj_set_state+0xb0>
 801b824:	463a      	mov	r2, r7
            uint32_t t;
            for(t = 0; t < tsi; t++) {
 801b826:	2300      	movs	r3, #0
 801b828:	e046      	b.n	801b8b8 <lv_obj_set_state+0x196>
 801b82a:	6876      	ldr	r6, [r6, #4]
 801b82c:	e7f0      	b.n	801b810 <lv_obj_set_state+0xee>
        for(i = 0; i < style->prop_cnt; i++) {
 801b82e:	3301      	adds	r3, #1
 801b830:	e7cd      	b.n	801b7ce <lv_obj_set_state+0xac>
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 801b832:	2900      	cmp	r1, #0
 801b834:	d0db      	beq.n	801b7ee <lv_obj_set_state+0xcc>
    if(style->prop_cnt > 1) {
 801b836:	2901      	cmp	r1, #1
 801b838:	d014      	beq.n	801b864 <lv_obj_set_state+0x142>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 801b83a:	6810      	ldr	r0, [r2, #0]
        for(i = 0; i < style->prop_cnt; i++) {
 801b83c:	eb00 0681 	add.w	r6, r0, r1, lsl #2
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 801b840:	f836 2b02 	ldrh.w	r2, [r6], #2
            if(prop_id == prop) {
 801b844:	f3c2 0c0d 	ubfx	ip, r2, #0, #14
 801b848:	f1bc 0f66 	cmp.w	ip, #102	; 0x66
 801b84c:	d106      	bne.n	801b85c <lv_obj_set_state+0x13a>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 801b84e:	0411      	lsls	r1, r2, #16
 801b850:	d4ae      	bmi.n	801b7b0 <lv_obj_set_state+0x8e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 801b852:	0456      	lsls	r6, r2, #17
 801b854:	d4d8      	bmi.n	801b808 <lv_obj_set_state+0xe6>
                    *value = values[i];
 801b856:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 801b85a:	e7d9      	b.n	801b810 <lv_obj_set_state+0xee>
        for(i = 0; i < style->prop_cnt; i++) {
 801b85c:	3301      	adds	r3, #1
 801b85e:	4299      	cmp	r1, r3
 801b860:	d8ee      	bhi.n	801b840 <lv_obj_set_state+0x11e>
 801b862:	e7b6      	b.n	801b7d2 <lv_obj_set_state+0xb0>
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 801b864:	f3c0 030d 	ubfx	r3, r0, #0, #14
 801b868:	2b66      	cmp	r3, #102	; 0x66
 801b86a:	d1a1      	bne.n	801b7b0 <lv_obj_set_state+0x8e>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 801b86c:	0401      	lsls	r1, r0, #16
 801b86e:	d49f      	bmi.n	801b7b0 <lv_obj_set_state+0x8e>
                                                                                             style->prop1)) : style->v_p.value1;
 801b870:	0443      	lsls	r3, r0, #17
 801b872:	d4c9      	bmi.n	801b808 <lv_obj_set_state+0xe6>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 801b874:	6816      	ldr	r6, [r2, #0]
 801b876:	e7cb      	b.n	801b810 <lv_obj_set_state+0xee>
                lv_style_selector_t selector = ts[t].selector;
 801b878:	6851      	ldr	r1, [r2, #4]
 801b87a:	930b      	str	r3, [sp, #44]	; 0x2c
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 801b87c:	4608      	mov	r0, r1
                lv_style_selector_t selector = ts[t].selector;
 801b87e:	920a      	str	r2, [sp, #40]	; 0x28
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 801b880:	9109      	str	r1, [sp, #36]	; 0x24
 801b882:	f002 fc65 	bl	801e150 <lv_obj_style_get_selector_state>
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 801b886:	9909      	ldr	r1, [sp, #36]	; 0x24
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 801b888:	9007      	str	r0, [sp, #28]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 801b88a:	4608      	mov	r0, r1
 801b88c:	f002 fc62 	bl	801e154 <lv_obj_style_get_selector_part>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 801b890:	6831      	ldr	r1, [r6, #0]
 801b892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b894:	f831 c008 	ldrh.w	ip, [r1, r8]
 801b898:	f8b2 e008 	ldrh.w	lr, [r2, #8]
 801b89c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b89e:	45e6      	cmp	lr, ip
 801b8a0:	d108      	bne.n	801b8b4 <lv_obj_set_state+0x192>
 801b8a2:	f8dd c018 	ldr.w	ip, [sp, #24]
 801b8a6:	4584      	cmp	ip, r0
 801b8a8:	d104      	bne.n	801b8b4 <lv_obj_set_state+0x192>
 801b8aa:	9805      	ldr	r0, [sp, #20]
 801b8ac:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801b8b0:	4560      	cmp	r0, ip
 801b8b2:	d94f      	bls.n	801b954 <lv_obj_set_state+0x232>
            for(t = 0; t < tsi; t++) {
 801b8b4:	3301      	adds	r3, #1
 801b8b6:	3214      	adds	r2, #20
 801b8b8:	454b      	cmp	r3, r9
 801b8ba:	d1dd      	bne.n	801b878 <lv_obj_set_state+0x156>
            }

            /*If not found  add it*/
            if(t == tsi) {
                ts[tsi].time = tr->time;
 801b8bc:	2314      	movs	r3, #20
 801b8be:	fb03 f109 	mul.w	r1, r3, r9
 801b8c2:	68f3      	ldr	r3, [r6, #12]
                ts[tsi].prop = tr->props[j];
#if LV_USE_USER_DATA
                ts[tsi].user_data = tr->user_data;
#endif
                ts[tsi].selector = obj_style->selector;
                tsi++;
 801b8c4:	f109 0901 	add.w	r9, r9, #1
                ts[tsi].time = tr->time;
 801b8c8:	527b      	strh	r3, [r7, r1]
 801b8ca:	187a      	adds	r2, r7, r1
                ts[tsi].delay = tr->delay;
 801b8cc:	6933      	ldr	r3, [r6, #16]
 801b8ce:	8053      	strh	r3, [r2, #2]
                ts[tsi].path_cb = tr->path_xcb;
 801b8d0:	68b3      	ldr	r3, [r6, #8]
 801b8d2:	60d3      	str	r3, [r2, #12]
                ts[tsi].prop = tr->props[j];
 801b8d4:	6833      	ldr	r3, [r6, #0]
 801b8d6:	f833 3008 	ldrh.w	r3, [r3, r8]
 801b8da:	f108 0802 	add.w	r8, r8, #2
 801b8de:	8113      	strh	r3, [r2, #8]
                ts[tsi].user_data = tr->user_data;
 801b8e0:	6873      	ldr	r3, [r6, #4]
 801b8e2:	6113      	str	r3, [r2, #16]
                ts[tsi].selector = obj_style->selector;
 801b8e4:	f8db 3004 	ldr.w	r3, [fp, #4]
 801b8e8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801b8ec:	6053      	str	r3, [r2, #4]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 801b8ee:	e791      	b.n	801b814 <lv_obj_set_state+0xf2>
            }
        }
    }

    for(i = 0; i < tsi; i++) {
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 801b8f0:	6860      	ldr	r0, [r4, #4]
 801b8f2:	f002 fc2f 	bl	801e154 <lv_obj_style_get_selector_part>
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 801b8f6:	9400      	str	r4, [sp, #0]
 801b8f8:	3414      	adds	r4, #20
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 801b8fa:	4601      	mov	r1, r0
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 801b8fc:	4653      	mov	r3, sl
 801b8fe:	9a04      	ldr	r2, [sp, #16]
 801b900:	4628      	mov	r0, r5
 801b902:	f7ea ff45 	bl	8006790 <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 801b906:	42a6      	cmp	r6, r4
 801b908:	d1f2      	bne.n	801b8f0 <lv_obj_set_state+0x1ce>
    }

    lv_mem_buf_release(ts);
 801b90a:	4638      	mov	r0, r7
 801b90c:	f7f6 ff9e 	bl	801284c <lv_mem_buf_release>

    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 801b910:	9b03      	ldr	r3, [sp, #12]
 801b912:	2b01      	cmp	r3, #1
 801b914:	d105      	bne.n	801b922 <lv_obj_set_state+0x200>
        lv_obj_invalidate(obj);
 801b916:	4628      	mov	r0, r5
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_invalidate(obj);
        lv_obj_refresh_ext_draw_size(obj);
    }
}
 801b918:	b00d      	add	sp, #52	; 0x34
 801b91a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_invalidate(obj);
 801b91e:	f001 b9bd 	b.w	801cc9c <lv_obj_invalidate>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 801b922:	9b03      	ldr	r3, [sp, #12]
 801b924:	2b03      	cmp	r3, #3
 801b926:	d109      	bne.n	801b93c <lv_obj_set_state+0x21a>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 801b928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b92c:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 801b930:	4628      	mov	r0, r5
}
 801b932:	b00d      	add	sp, #52	; 0x34
 801b934:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 801b938:	f7ea bd0a 	b.w	8006350 <lv_obj_refresh_style>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 801b93c:	9b03      	ldr	r3, [sp, #12]
 801b93e:	2b02      	cmp	r3, #2
 801b940:	d110      	bne.n	801b964 <lv_obj_set_state+0x242>
        lv_obj_invalidate(obj);
 801b942:	4628      	mov	r0, r5
 801b944:	f001 f9aa 	bl	801cc9c <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 801b948:	4628      	mov	r0, r5
}
 801b94a:	b00d      	add	sp, #52	; 0x34
 801b94c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_ext_draw_size(obj);
 801b950:	f000 bdd6 	b.w	801c500 <lv_obj_refresh_ext_draw_size>
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 801b954:	f108 0802 	add.w	r8, r8, #2
 801b958:	f831 3008 	ldrh.w	r3, [r1, r8]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	f47f af61 	bne.w	801b824 <lv_obj_set_state+0x102>
 801b962:	e736      	b.n	801b7d2 <lv_obj_set_state+0xb0>
}
 801b964:	b00d      	add	sp, #52	; 0x34
 801b966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b96a <lv_obj_add_flag>:
{
 801b96a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b96c:	460d      	mov	r5, r1
 801b96e:	4604      	mov	r4, r0
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 801b970:	f7e9 fac8 	bl	8004f04 <lv_obj_is_layout_positioned>
 801b974:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 801b976:	07ea      	lsls	r2, r5, #31
 801b978:	d423      	bmi.n	801b9c2 <lv_obj_add_flag+0x58>
    obj->flags |= f;
 801b97a:	69e3      	ldr	r3, [r4, #28]
 801b97c:	432b      	orrs	r3, r5
 801b97e:	61e3      	str	r3, [r4, #28]
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 801b980:	4620      	mov	r0, r4
 801b982:	f7e9 fabf 	bl	8004f04 <lv_obj_is_layout_positioned>
 801b986:	42b0      	cmp	r0, r6
 801b988:	d102      	bne.n	801b990 <lv_obj_add_flag+0x26>
 801b98a:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 801b98e:	d007      	beq.n	801b9a0 <lv_obj_add_flag+0x36>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 801b990:	4620      	mov	r0, r4
 801b992:	f002 fc2d 	bl	801e1f0 <lv_obj_get_parent>
 801b996:	f000 ff00 	bl	801c79a <lv_obj_mark_layout_as_dirty>
        lv_obj_mark_layout_as_dirty(obj);
 801b99a:	4620      	mov	r0, r4
 801b99c:	f000 fefd 	bl	801c79a <lv_obj_mark_layout_as_dirty>
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 801b9a0:	06eb      	lsls	r3, r5, #27
 801b9a2:	d50c      	bpl.n	801b9be <lv_obj_add_flag+0x54>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 801b9a4:	aa02      	add	r2, sp, #8
 801b9a6:	4669      	mov	r1, sp
 801b9a8:	4620      	mov	r0, r4
 801b9aa:	f001 fbe0 	bl	801d16e <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 801b9ae:	4669      	mov	r1, sp
 801b9b0:	4620      	mov	r0, r4
 801b9b2:	f001 f952 	bl	801cc5a <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 801b9b6:	a902      	add	r1, sp, #8
 801b9b8:	4620      	mov	r0, r4
 801b9ba:	f001 f94e 	bl	801cc5a <lv_obj_invalidate_area>
}
 801b9be:	b004      	add	sp, #16
 801b9c0:	bd70      	pop	{r4, r5, r6, pc}
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 801b9c2:	4620      	mov	r0, r4
 801b9c4:	f001 f96a 	bl	801cc9c <lv_obj_invalidate>
    obj->flags |= f;
 801b9c8:	69e3      	ldr	r3, [r4, #28]
        lv_obj_invalidate(obj);
 801b9ca:	4620      	mov	r0, r4
    obj->flags |= f;
 801b9cc:	432b      	orrs	r3, r5
 801b9ce:	61e3      	str	r3, [r4, #28]
        lv_obj_invalidate(obj);
 801b9d0:	f001 f964 	bl	801cc9c <lv_obj_invalidate>
 801b9d4:	e7d4      	b.n	801b980 <lv_obj_add_flag+0x16>

0801b9d6 <lv_obj_clear_flag>:
{
 801b9d6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b9d8:	460d      	mov	r5, r1
 801b9da:	4604      	mov	r4, r0
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 801b9dc:	f7e9 fa92 	bl	8004f04 <lv_obj_is_layout_positioned>
 801b9e0:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 801b9e2:	06ea      	lsls	r2, r5, #27
 801b9e4:	d50c      	bpl.n	801ba00 <lv_obj_clear_flag+0x2a>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 801b9e6:	aa02      	add	r2, sp, #8
 801b9e8:	4669      	mov	r1, sp
 801b9ea:	4620      	mov	r0, r4
 801b9ec:	f001 fbbf 	bl	801d16e <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 801b9f0:	4669      	mov	r1, sp
 801b9f2:	4620      	mov	r0, r4
 801b9f4:	f001 f931 	bl	801cc5a <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 801b9f8:	a902      	add	r1, sp, #8
 801b9fa:	4620      	mov	r0, r4
 801b9fc:	f001 f92d 	bl	801cc5a <lv_obj_invalidate_area>
    obj->flags &= (~f);
 801ba00:	69e3      	ldr	r3, [r4, #28]
 801ba02:	ea23 0305 	bic.w	r3, r3, r5
 801ba06:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 801ba08:	07eb      	lsls	r3, r5, #31
 801ba0a:	d50e      	bpl.n	801ba2a <lv_obj_clear_flag+0x54>
        lv_obj_invalidate(obj);
 801ba0c:	4620      	mov	r0, r4
 801ba0e:	f001 f945 	bl	801cc9c <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 801ba12:	4620      	mov	r0, r4
 801ba14:	f7e9 fa76 	bl	8004f04 <lv_obj_is_layout_positioned>
 801ba18:	b138      	cbz	r0, 801ba2a <lv_obj_clear_flag+0x54>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 801ba1a:	4620      	mov	r0, r4
 801ba1c:	f002 fbe8 	bl	801e1f0 <lv_obj_get_parent>
 801ba20:	f000 febb 	bl	801c79a <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 801ba24:	4620      	mov	r0, r4
 801ba26:	f000 feb8 	bl	801c79a <lv_obj_mark_layout_as_dirty>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 801ba2a:	4620      	mov	r0, r4
 801ba2c:	f7e9 fa6a 	bl	8004f04 <lv_obj_is_layout_positioned>
 801ba30:	42b0      	cmp	r0, r6
 801ba32:	d102      	bne.n	801ba3a <lv_obj_clear_flag+0x64>
 801ba34:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 801ba38:	d007      	beq.n	801ba4a <lv_obj_clear_flag+0x74>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 801ba3a:	4620      	mov	r0, r4
 801ba3c:	f002 fbd8 	bl	801e1f0 <lv_obj_get_parent>
}
 801ba40:	b004      	add	sp, #16
 801ba42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 801ba46:	f000 bea8 	b.w	801c79a <lv_obj_mark_layout_as_dirty>
}
 801ba4a:	b004      	add	sp, #16
 801ba4c:	bd70      	pop	{r4, r5, r6, pc}

0801ba4e <lv_obj_add_state>:
    lv_state_t new_state = obj->state | state;
 801ba4e:	8c03      	ldrh	r3, [r0, #32]
 801ba50:	ea43 0201 	orr.w	r2, r3, r1
    if(obj->state != new_state) {
 801ba54:	ea31 0303 	bics.w	r3, r1, r3
 801ba58:	d002      	beq.n	801ba60 <lv_obj_add_state+0x12>
        lv_obj_set_state(obj, new_state);
 801ba5a:	4611      	mov	r1, r2
 801ba5c:	f7ff be61 	b.w	801b722 <lv_obj_set_state>
}
 801ba60:	4770      	bx	lr

0801ba62 <lv_obj_clear_state>:
{
 801ba62:	460a      	mov	r2, r1
    lv_state_t new_state = obj->state & (~state);
 801ba64:	8c03      	ldrh	r3, [r0, #32]
    if(obj->state != new_state) {
 801ba66:	421a      	tst	r2, r3
    lv_state_t new_state = obj->state & (~state);
 801ba68:	ea23 0101 	bic.w	r1, r3, r1
    if(obj->state != new_state) {
 801ba6c:	d001      	beq.n	801ba72 <lv_obj_clear_state+0x10>
        lv_obj_set_state(obj, new_state);
 801ba6e:	f7ff be58 	b.w	801b722 <lv_obj_set_state>
}
 801ba72:	4770      	bx	lr

0801ba74 <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
 801ba74:	69c3      	ldr	r3, [r0, #28]
 801ba76:	4399      	bics	r1, r3
}
 801ba78:	bf0c      	ite	eq
 801ba7a:	2001      	moveq	r0, #1
 801ba7c:	2000      	movne	r0, #0
 801ba7e:	4770      	bx	lr

0801ba80 <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
 801ba80:	69c3      	ldr	r3, [r0, #28]
 801ba82:	4219      	tst	r1, r3
}
 801ba84:	bf14      	ite	ne
 801ba86:	2001      	movne	r0, #1
 801ba88:	2000      	moveq	r0, #0
 801ba8a:	4770      	bx	lr

0801ba8c <lv_obj_get_state>:
}
 801ba8c:	8c00      	ldrh	r0, [r0, #32]
 801ba8e:	4770      	bx	lr

0801ba90 <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
 801ba90:	6880      	ldr	r0, [r0, #8]
 801ba92:	b100      	cbz	r0, 801ba96 <lv_obj_get_group+0x6>
 801ba94:	6880      	ldr	r0, [r0, #8]
}
 801ba96:	4770      	bx	lr

0801ba98 <lv_obj_event>:
{
 801ba98:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_event_code_t code = lv_event_get_code(e);
 801ba9a:	4608      	mov	r0, r1
{
 801ba9c:	460d      	mov	r5, r1
 801ba9e:	b085      	sub	sp, #20
    lv_event_code_t code = lv_event_get_code(e);
 801baa0:	f7ff fbdf 	bl	801b262 <lv_event_get_code>
 801baa4:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_current_target(e);
 801baa6:	4628      	mov	r0, r5
 801baa8:	f7ff fbd9 	bl	801b25e <lv_event_get_current_target>
    if(code == LV_EVENT_PRESSED) {
 801baac:	2e01      	cmp	r6, #1
    lv_obj_t * obj = lv_event_get_current_target(e);
 801baae:	4604      	mov	r4, r0
    if(code == LV_EVENT_PRESSED) {
 801bab0:	d105      	bne.n	801babe <lv_obj_event+0x26>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 801bab2:	2120      	movs	r1, #32
}
 801bab4:	b005      	add	sp, #20
 801bab6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_add_state(obj, state);
 801baba:	f7ff bfc8 	b.w	801ba4e <lv_obj_add_state>
    else if(code == LV_EVENT_RELEASED) {
 801babe:	3e03      	subs	r6, #3
 801bac0:	2e27      	cmp	r6, #39	; 0x27
 801bac2:	d851      	bhi.n	801bb68 <lv_obj_event+0xd0>
 801bac4:	e8df f016 	tbh	[pc, r6, lsl #1]
 801bac8:	00500043 	.word	0x00500043
 801bacc:	00500050 	.word	0x00500050
 801bad0:	00280050 	.word	0x00280050
 801bad4:	010f010d 	.word	0x010f010d
 801bad8:	00500050 	.word	0x00500050
 801badc:	00e7005a 	.word	0x00e7005a
 801bae0:	00500126 	.word	0x00500126
 801bae4:	017c0050 	.word	0x017c0050
 801bae8:	00500172 	.word	0x00500172
 801baec:	0050017c 	.word	0x0050017c
 801baf0:	017c0050 	.word	0x017c0050
 801baf4:	00500050 	.word	0x00500050
 801baf8:	00500050 	.word	0x00500050
 801bafc:	00500050 	.word	0x00500050
 801bb00:	00500050 	.word	0x00500050
 801bb04:	01490050 	.word	0x01490050
 801bb08:	00500050 	.word	0x00500050
 801bb0c:	00500050 	.word	0x00500050
 801bb10:	00500050 	.word	0x00500050
 801bb14:	004a0128 	.word	0x004a0128
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 801bb18:	2120      	movs	r1, #32
 801bb1a:	f7ff ffa2 	bl	801ba62 <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 801bb1e:	4628      	mov	r0, r5
 801bb20:	f7ff fba3 	bl	801b26a <lv_event_get_param>
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 801bb24:	f7ff fd92 	bl	801b64c <lv_indev_get_scroll_obj>
 801bb28:	b9f0      	cbnz	r0, 801bb68 <lv_obj_event+0xd0>
    return (obj->flags & f)  == f ? true : false;
 801bb2a:	69e3      	ldr	r3, [r4, #28]
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 801bb2c:	071e      	lsls	r6, r3, #28
 801bb2e:	d51b      	bpl.n	801bb68 <lv_obj_event+0xd0>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 801bb30:	8c23      	ldrh	r3, [r4, #32]
 801bb32:	2101      	movs	r1, #1
 801bb34:	4620      	mov	r0, r4
 801bb36:	07dd      	lsls	r5, r3, #31
 801bb38:	d434      	bmi.n	801bba4 <lv_obj_event+0x10c>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 801bb3a:	f7ff ff88 	bl	801ba4e <lv_obj_add_state>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801bb3e:	2200      	movs	r2, #0
 801bb40:	211c      	movs	r1, #28
 801bb42:	4620      	mov	r0, r4
}
 801bb44:	b005      	add	sp, #20
 801bb46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801bb4a:	f7e8 bdfb 	b.w	8004744 <lv_event_send>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 801bb4e:	2120      	movs	r1, #32
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 801bb50:	4620      	mov	r0, r4
}
 801bb52:	b005      	add	sp, #20
 801bb54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 801bb58:	f7ff bf83 	b.w	801ba62 <lv_obj_clear_state>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801bb5c:	f002 fb5a 	bl	801e214 <lv_obj_get_child_cnt>
        for(uint32_t i = 0; i < child_cnt; i++) {
 801bb60:	2500      	movs	r5, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801bb62:	4606      	mov	r6, r0
        for(uint32_t i = 0; i < child_cnt; i++) {
 801bb64:	42b5      	cmp	r5, r6
 801bb66:	d101      	bne.n	801bb6c <lv_obj_event+0xd4>
}
 801bb68:	b005      	add	sp, #20
 801bb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_obj_t * child = obj->spec_attr->children[i];
 801bb6c:	68a3      	ldr	r3, [r4, #8]
 801bb6e:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 801bb70:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
        for(uint32_t i = 0; i < child_cnt; i++) {
 801bb74:	3501      	adds	r5, #1
            lv_obj_mark_layout_as_dirty(child);
 801bb76:	f000 fe10 	bl	801c79a <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 801bb7a:	e7f3      	b.n	801bb64 <lv_obj_event+0xcc>
    return (obj->flags & f)  == f ? true : false;
 801bb7c:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 801bb7e:	0718      	lsls	r0, r3, #28
 801bb80:	d516      	bpl.n	801bbb0 <lv_obj_event+0x118>
            char c = *((char *)lv_event_get_param(e));
 801bb82:	4628      	mov	r0, r5
 801bb84:	f7ff fb71 	bl	801b26a <lv_event_get_param>
 801bb88:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801bb8a:	2b13      	cmp	r3, #19
 801bb8c:	d102      	bne.n	801bb94 <lv_obj_event+0xfc>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 801bb8e:	2101      	movs	r1, #1
 801bb90:	4620      	mov	r0, r4
 801bb92:	e7d2      	b.n	801bb3a <lv_obj_event+0xa2>
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801bb94:	2b11      	cmp	r3, #17
 801bb96:	d0fa      	beq.n	801bb8e <lv_obj_event+0xf6>
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801bb98:	2b14      	cmp	r3, #20
 801bb9a:	d001      	beq.n	801bba0 <lv_obj_event+0x108>
 801bb9c:	2b12      	cmp	r3, #18
 801bb9e:	d104      	bne.n	801bbaa <lv_obj_event+0x112>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 801bba0:	2101      	movs	r1, #1
 801bba2:	4620      	mov	r0, r4
 801bba4:	f7ff ff5d 	bl	801ba62 <lv_obj_clear_state>
            if(c != LV_KEY_ENTER) {
 801bba8:	e7c9      	b.n	801bb3e <lv_obj_event+0xa6>
 801bbaa:	2b0a      	cmp	r3, #10
 801bbac:	d0dc      	beq.n	801bb68 <lv_obj_event+0xd0>
 801bbae:	e7c6      	b.n	801bb3e <lv_obj_event+0xa6>
    return (obj->flags & f)  == f ? true : false;
 801bbb0:	f403 6301 	and.w	r3, r3, #2064	; 0x810
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 801bbb4:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 801bbb8:	d1d6      	bne.n	801bb68 <lv_obj_event+0xd0>
 801bbba:	4620      	mov	r0, r4
 801bbbc:	f000 f92a 	bl	801be14 <lv_obj_is_editable>
 801bbc0:	2800      	cmp	r0, #0
 801bbc2:	d1d1      	bne.n	801bb68 <lv_obj_event+0xd0>
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 801bbc4:	4620      	mov	r0, r4
 801bbc6:	f7ea f84d 	bl	8005c64 <lv_obj_get_scroll_left>
 801bbca:	4607      	mov	r7, r0
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 801bbcc:	4620      	mov	r0, r4
 801bbce:	f7ea f8b1 	bl	8005d34 <lv_obj_get_scroll_right>
 801bbd2:	4606      	mov	r6, r0
            char c = *((char *)lv_event_get_param(e));
 801bbd4:	4628      	mov	r0, r5
 801bbd6:	f7ff fb48 	bl	801b26a <lv_event_get_param>
 801bbda:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_DOWN) {
 801bbdc:	2b12      	cmp	r3, #18
 801bbde:	d10c      	bne.n	801bbfa <lv_obj_event+0x162>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 801bbe0:	4620      	mov	r0, r4
 801bbe2:	f001 f9f4 	bl	801cfce <lv_obj_get_scroll_y>
 801bbe6:	4605      	mov	r5, r0
 801bbe8:	4620      	mov	r0, r4
 801bbea:	f000 fe5d 	bl	801c8a8 <lv_obj_get_height>
 801bbee:	1e03      	subs	r3, r0, #0
 801bbf0:	bfb8      	it	lt
 801bbf2:	3303      	addlt	r3, #3
 801bbf4:	eb05 01a3 	add.w	r1, r5, r3, asr #2
 801bbf8:	e00d      	b.n	801bc16 <lv_obj_event+0x17e>
            else if(c == LV_KEY_UP) {
 801bbfa:	2b11      	cmp	r3, #17
 801bbfc:	d113      	bne.n	801bc26 <lv_obj_event+0x18e>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 801bbfe:	4620      	mov	r0, r4
 801bc00:	f001 f9e5 	bl	801cfce <lv_obj_get_scroll_y>
 801bc04:	4605      	mov	r5, r0
 801bc06:	4620      	mov	r0, r4
 801bc08:	f000 fe4e 	bl	801c8a8 <lv_obj_get_height>
 801bc0c:	1e03      	subs	r3, r0, #0
 801bc0e:	da00      	bge.n	801bc12 <lv_obj_event+0x17a>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 801bc10:	3303      	adds	r3, #3
 801bc12:	eba5 01a3 	sub.w	r1, r5, r3, asr #2
 801bc16:	2200      	movs	r2, #0
 801bc18:	b209      	sxth	r1, r1
 801bc1a:	4620      	mov	r0, r4
}
 801bc1c:	b005      	add	sp, #20
 801bc1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 801bc22:	f7ea b9a9 	b.w	8005f78 <lv_obj_scroll_to_y>
            else if(c == LV_KEY_RIGHT) {
 801bc26:	2b13      	cmp	r3, #19
 801bc28:	d11c      	bne.n	801bc64 <lv_obj_event+0x1cc>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 801bc2a:	4620      	mov	r0, r4
 801bc2c:	f001 f9b5 	bl	801cf9a <lv_obj_get_scroll_dir>
 801bc30:	0781      	lsls	r1, r0, #30
 801bc32:	d0d5      	beq.n	801bbe0 <lv_obj_event+0x148>
 801bc34:	2f00      	cmp	r7, #0
 801bc36:	dc01      	bgt.n	801bc3c <lv_obj_event+0x1a4>
 801bc38:	2e00      	cmp	r6, #0
 801bc3a:	ddd1      	ble.n	801bbe0 <lv_obj_event+0x148>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 801bc3c:	4620      	mov	r0, r4
 801bc3e:	f001 f9c0 	bl	801cfc2 <lv_obj_get_scroll_x>
 801bc42:	4605      	mov	r5, r0
 801bc44:	4620      	mov	r0, r4
 801bc46:	f000 fe29 	bl	801c89c <lv_obj_get_width>
 801bc4a:	1e03      	subs	r3, r0, #0
 801bc4c:	bfb8      	it	lt
 801bc4e:	3303      	addlt	r3, #3
 801bc50:	eb05 01a3 	add.w	r1, r5, r3, asr #2
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 801bc54:	2200      	movs	r2, #0
 801bc56:	b209      	sxth	r1, r1
 801bc58:	4620      	mov	r0, r4
}
 801bc5a:	b005      	add	sp, #20
 801bc5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 801bc60:	f7ea b974 	b.w	8005f4c <lv_obj_scroll_to_x>
            else if(c == LV_KEY_LEFT) {
 801bc64:	2b14      	cmp	r3, #20
 801bc66:	f47f af7f 	bne.w	801bb68 <lv_obj_event+0xd0>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 801bc6a:	4620      	mov	r0, r4
 801bc6c:	f001 f995 	bl	801cf9a <lv_obj_get_scroll_dir>
 801bc70:	0782      	lsls	r2, r0, #30
 801bc72:	d0c4      	beq.n	801bbfe <lv_obj_event+0x166>
 801bc74:	2f00      	cmp	r7, #0
 801bc76:	dc01      	bgt.n	801bc7c <lv_obj_event+0x1e4>
 801bc78:	2e00      	cmp	r6, #0
 801bc7a:	ddc0      	ble.n	801bbfe <lv_obj_event+0x166>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 801bc7c:	4620      	mov	r0, r4
 801bc7e:	f001 f9a0 	bl	801cfc2 <lv_obj_get_scroll_x>
 801bc82:	4605      	mov	r5, r0
 801bc84:	4620      	mov	r0, r4
 801bc86:	f000 fe09 	bl	801c89c <lv_obj_get_width>
 801bc8a:	1e03      	subs	r3, r0, #0
 801bc8c:	bfb8      	it	lt
 801bc8e:	3303      	addlt	r3, #3
 801bc90:	eba5 01a3 	sub.w	r1, r5, r3, asr #2
 801bc94:	e7de      	b.n	801bc54 <lv_obj_event+0x1bc>
    return (obj->flags & f)  == f ? true : false;
 801bc96:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 801bc98:	055b      	lsls	r3, r3, #21
 801bc9a:	d502      	bpl.n	801bca2 <lv_obj_event+0x20a>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 801bc9c:	2101      	movs	r1, #1
 801bc9e:	f001 fa4b 	bl	801d138 <lv_obj_scroll_to_view_recursive>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 801bca2:	4620      	mov	r0, r4
 801bca4:	f7ff fef4 	bl	801ba90 <lv_obj_get_group>
 801bca8:	f7ff fc96 	bl	801b5d8 <lv_group_get_editing>
 801bcac:	4606      	mov	r6, r0
        lv_indev_t * indev = lv_indev_get_act();
 801bcae:	f7e8 fdaf 	bl	8004810 <lv_indev_get_act>
        if(indev == NULL) indev = lv_event_get_indev(e);
 801bcb2:	b910      	cbnz	r0, 801bcba <lv_obj_event+0x222>
 801bcb4:	4628      	mov	r0, r5
 801bcb6:	f7ff fb22 	bl	801b2fe <lv_event_get_indev>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801bcba:	f7ff fc92 	bl	801b5e2 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 801bcbe:	2802      	cmp	r0, #2
 801bcc0:	d008      	beq.n	801bcd4 <lv_obj_event+0x23c>
 801bcc2:	2804      	cmp	r0, #4
 801bcc4:	bf14      	ite	ne
 801bcc6:	2102      	movne	r1, #2
 801bcc8:	2106      	moveq	r1, #6
        if(editing) {
 801bcca:	b12e      	cbz	r6, 801bcd8 <lv_obj_event+0x240>
            lv_obj_add_state(obj, state);
 801bccc:	f041 0108 	orr.w	r1, r1, #8
 801bcd0:	4620      	mov	r0, r4
 801bcd2:	e6ef      	b.n	801bab4 <lv_obj_event+0x1c>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 801bcd4:	2106      	movs	r1, #6
 801bcd6:	e7f8      	b.n	801bcca <lv_obj_event+0x232>
            lv_obj_add_state(obj, state);
 801bcd8:	4620      	mov	r0, r4
 801bcda:	f7ff feb8 	bl	801ba4e <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 801bcde:	2108      	movs	r1, #8
 801bce0:	e736      	b.n	801bb50 <lv_obj_event+0xb8>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 801bce2:	2140      	movs	r1, #64	; 0x40
 801bce4:	e7f4      	b.n	801bcd0 <lv_obj_event+0x238>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 801bce6:	2140      	movs	r1, #64	; 0x40
 801bce8:	f7ff febb 	bl	801ba62 <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 801bcec:	4620      	mov	r0, r4
 801bcee:	f001 f94c 	bl	801cf8a <lv_obj_get_scrollbar_mode>
 801bcf2:	2802      	cmp	r0, #2
 801bcf4:	f47f af38 	bne.w	801bb68 <lv_obj_event+0xd0>
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 801bcf8:	aa02      	add	r2, sp, #8
 801bcfa:	4669      	mov	r1, sp
 801bcfc:	4620      	mov	r0, r4
 801bcfe:	f001 fa36 	bl	801d16e <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 801bd02:	4669      	mov	r1, sp
 801bd04:	4620      	mov	r0, r4
 801bd06:	f000 ffa8 	bl	801cc5a <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 801bd0a:	a902      	add	r1, sp, #8
 801bd0c:	4620      	mov	r0, r4
 801bd0e:	f000 ffa4 	bl	801cc5a <lv_obj_invalidate_area>
 801bd12:	e729      	b.n	801bb68 <lv_obj_event+0xd0>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 801bd14:	210e      	movs	r1, #14
 801bd16:	e71b      	b.n	801bb50 <lv_obj_event+0xb8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 801bd18:	2209      	movs	r2, #9
 801bd1a:	2100      	movs	r1, #0
 801bd1c:	f001 fee4 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 801bd20:	220a      	movs	r2, #10
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 801bd22:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 801bd24:	2100      	movs	r1, #0
 801bd26:	4620      	mov	r0, r4
 801bd28:	f001 fede 	bl	801dae8 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 801bd2c:	b280      	uxth	r0, r0
        if(layout || align) {
 801bd2e:	b908      	cbnz	r0, 801bd34 <lv_obj_event+0x29c>
 801bd30:	b2ed      	uxtb	r5, r5
 801bd32:	b115      	cbz	r5, 801bd3a <lv_obj_event+0x2a2>
            lv_obj_mark_layout_as_dirty(obj);
 801bd34:	4620      	mov	r0, r4
 801bd36:	f000 fd30 	bl	801c79a <lv_obj_mark_layout_as_dirty>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801bd3a:	4620      	mov	r0, r4
        for(i = 0; i < child_cnt; i++) {
 801bd3c:	2500      	movs	r5, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801bd3e:	f002 fa69 	bl	801e214 <lv_obj_get_child_cnt>
 801bd42:	4606      	mov	r6, r0
        for(i = 0; i < child_cnt; i++) {
 801bd44:	42b5      	cmp	r5, r6
 801bd46:	f43f af0f 	beq.w	801bb68 <lv_obj_event+0xd0>
            lv_obj_t * child = obj->spec_attr->children[i];
 801bd4a:	68a3      	ldr	r3, [r4, #8]
 801bd4c:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 801bd4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
        for(i = 0; i < child_cnt; i++) {
 801bd52:	3501      	adds	r5, #1
            lv_obj_mark_layout_as_dirty(child);
 801bd54:	f000 fd21 	bl	801c79a <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 801bd58:	e7f4      	b.n	801bd44 <lv_obj_event+0x2ac>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801bd5a:	2201      	movs	r2, #1
 801bd5c:	2100      	movs	r1, #0
 801bd5e:	f001 fec3 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801bd62:	2204      	movs	r2, #4
 801bd64:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801bd66:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801bd68:	4620      	mov	r0, r4
 801bd6a:	f001 febd 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 801bd6e:	2209      	movs	r2, #9
 801bd70:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801bd72:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 801bd74:	4620      	mov	r0, r4
 801bd76:	f001 feb7 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 801bd7a:	220a      	movs	r2, #10
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 801bd7c:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 801bd7e:	2100      	movs	r1, #0
 801bd80:	4620      	mov	r0, r4
 801bd82:	f001 feb1 	bl	801dae8 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 801bd86:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 801bd88:	b950      	cbnz	r0, 801bda0 <lv_obj_event+0x308>
 801bd8a:	b2ff      	uxtb	r7, r7
 801bd8c:	b947      	cbnz	r7, 801bda0 <lv_obj_event+0x308>
 801bd8e:	b236      	sxth	r6, r6
 801bd90:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801bd94:	429e      	cmp	r6, r3
 801bd96:	d003      	beq.n	801bda0 <lv_obj_event+0x308>
 801bd98:	b22d      	sxth	r5, r5
 801bd9a:	429d      	cmp	r5, r3
 801bd9c:	f47f aee4 	bne.w	801bb68 <lv_obj_event+0xd0>
            lv_obj_mark_layout_as_dirty(obj);
 801bda0:	4620      	mov	r0, r4
}
 801bda2:	b005      	add	sp, #20
 801bda4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_mark_layout_as_dirty(obj);
 801bda8:	f000 bcf7 	b.w	801c79a <lv_obj_mark_layout_as_dirty>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 801bdac:	2100      	movs	r1, #0
 801bdae:	f000 fb32 	bl	801c416 <lv_obj_calculate_ext_draw_size>
 801bdb2:	4601      	mov	r1, r0
        lv_event_set_ext_draw_size(e, d);
 801bdb4:	4628      	mov	r0, r5
}
 801bdb6:	b005      	add	sp, #20
 801bdb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_event_set_ext_draw_size(e, d);
 801bdbc:	f7ff baad 	b.w	801b31a <lv_event_set_ext_draw_size>
        lv_obj_draw(e);
 801bdc0:	4628      	mov	r0, r5
}
 801bdc2:	b005      	add	sp, #20
 801bdc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_obj_draw(e);
 801bdc8:	f7e8 bd7e 	b.w	80048c8 <lv_obj_draw>

0801bdcc <lv_obj_check_type>:
    if(obj == NULL) return false;
 801bdcc:	b118      	cbz	r0, 801bdd6 <lv_obj_check_type+0xa>
    return obj->class_p == class_p ? true : false;
 801bdce:	6800      	ldr	r0, [r0, #0]
 801bdd0:	1a43      	subs	r3, r0, r1
 801bdd2:	4258      	negs	r0, r3
 801bdd4:	4158      	adcs	r0, r3
}
 801bdd6:	4770      	bx	lr

0801bdd8 <lv_obj_construct>:
{
 801bdd8:	b570      	push	{r4, r5, r6, lr}
    const lv_obj_class_t * original_class_p = obj->class_p;
 801bdda:	6805      	ldr	r5, [r0, #0]
{
 801bddc:	4604      	mov	r4, r0
    if(obj->class_p->base_class) {
 801bdde:	682b      	ldr	r3, [r5, #0]
 801bde0:	b113      	cbz	r3, 801bde8 <lv_obj_construct+0x10>
        obj->class_p = obj->class_p->base_class;
 801bde2:	6003      	str	r3, [r0, #0]
        lv_obj_construct(obj);
 801bde4:	f7ff fff8 	bl	801bdd8 <lv_obj_construct>
    obj->class_p = original_class_p;
 801bde8:	6025      	str	r5, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 801bdea:	686b      	ldr	r3, [r5, #4]
 801bdec:	b123      	cbz	r3, 801bdf8 <lv_obj_construct+0x20>
 801bdee:	4621      	mov	r1, r4
 801bdf0:	4628      	mov	r0, r5
}
 801bdf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 801bdf6:	4718      	bx	r3
}
 801bdf8:	bd70      	pop	{r4, r5, r6, pc}

0801bdfa <_lv_obj_destruct>:
{
 801bdfa:	b510      	push	{r4, lr}
 801bdfc:	4604      	mov	r4, r0
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 801bdfe:	6820      	ldr	r0, [r4, #0]
 801be00:	6883      	ldr	r3, [r0, #8]
 801be02:	b10b      	cbz	r3, 801be08 <_lv_obj_destruct+0xe>
 801be04:	4621      	mov	r1, r4
 801be06:	4798      	blx	r3
    if(obj->class_p->base_class) {
 801be08:	6823      	ldr	r3, [r4, #0]
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	b10b      	cbz	r3, 801be12 <_lv_obj_destruct+0x18>
        obj->class_p = obj->class_p->base_class;
 801be0e:	6023      	str	r3, [r4, #0]
        _lv_obj_destruct(obj);
 801be10:	e7f5      	b.n	801bdfe <_lv_obj_destruct+0x4>
}
 801be12:	bd10      	pop	{r4, pc}

0801be14 <lv_obj_is_editable>:
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 801be14:	6800      	ldr	r0, [r0, #0]
 801be16:	b130      	cbz	r0, 801be26 <lv_obj_is_editable+0x12>
 801be18:	7e03      	ldrb	r3, [r0, #24]
 801be1a:	f013 0303 	ands.w	r3, r3, #3
 801be1e:	d0f9      	beq.n	801be14 <lv_obj_is_editable>
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 801be20:	3b01      	subs	r3, #1
 801be22:	4258      	negs	r0, r3
 801be24:	4158      	adcs	r0, r3
}
 801be26:	4770      	bx	lr

0801be28 <lv_obj_is_group_def>:
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 801be28:	6800      	ldr	r0, [r0, #0]
 801be2a:	b130      	cbz	r0, 801be3a <lv_obj_is_group_def+0x12>
 801be2c:	7e03      	ldrb	r3, [r0, #24]
 801be2e:	f013 030c 	ands.w	r3, r3, #12
 801be32:	d0f9      	beq.n	801be28 <lv_obj_is_group_def>
    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 801be34:	3b04      	subs	r3, #4
 801be36:	4258      	negs	r0, r3
 801be38:	4158      	adcs	r0, r3
}
 801be3a:	4770      	bx	lr

0801be3c <lv_obj_class_init_obj>:
{
 801be3c:	b538      	push	{r3, r4, r5, lr}
 801be3e:	4604      	mov	r4, r0
    lv_obj_mark_layout_as_dirty(obj);
 801be40:	f000 fcab 	bl	801c79a <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 801be44:	2000      	movs	r0, #0
 801be46:	f7ea fa7d 	bl	8006344 <lv_obj_enable_style_refresh>
    lv_theme_apply(obj);
 801be4a:	4620      	mov	r0, r4
 801be4c:	f7eb fc00 	bl	8007650 <lv_theme_apply>
    lv_obj_construct(obj);
 801be50:	4620      	mov	r0, r4
 801be52:	f7ff ffc1 	bl	801bdd8 <lv_obj_construct>
    lv_obj_enable_style_refresh(true);
 801be56:	2001      	movs	r0, #1
 801be58:	f7ea fa74 	bl	8006344 <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 801be5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801be60:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 801be64:	4620      	mov	r0, r4
 801be66:	f7ea fa73 	bl	8006350 <lv_obj_refresh_style>
    lv_obj_refresh_self_size(obj);
 801be6a:	4620      	mov	r0, r4
 801be6c:	f000 fd8b 	bl	801c986 <lv_obj_refresh_self_size>
    lv_group_t * def_group = lv_group_get_default();
 801be70:	f7e8 fca0 	bl	80047b4 <lv_group_get_default>
    if(def_group && lv_obj_is_group_def(obj)) {
 801be74:	4602      	mov	r2, r0
 801be76:	b138      	cbz	r0, 801be88 <lv_obj_class_init_obj+0x4c>
 801be78:	4620      	mov	r0, r4
 801be7a:	f7ff ffd5 	bl	801be28 <lv_obj_is_group_def>
 801be7e:	b118      	cbz	r0, 801be88 <lv_obj_class_init_obj+0x4c>
        lv_group_add_obj(def_group, obj);
 801be80:	4621      	mov	r1, r4
 801be82:	4610      	mov	r0, r2
 801be84:	f7ff fb49 	bl	801b51a <lv_group_add_obj>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801be88:	4620      	mov	r0, r4
 801be8a:	f002 f9b1 	bl	801e1f0 <lv_obj_get_parent>
    if(parent) {
 801be8e:	4605      	mov	r5, r0
 801be90:	b168      	cbz	r0, 801beae <lv_obj_class_init_obj+0x72>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 801be92:	4622      	mov	r2, r4
 801be94:	2122      	movs	r1, #34	; 0x22
 801be96:	f7e8 fc55 	bl	8004744 <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 801be9a:	4622      	mov	r2, r4
 801be9c:	4628      	mov	r0, r5
 801be9e:	2123      	movs	r1, #35	; 0x23
 801bea0:	f7e8 fc50 	bl	8004744 <lv_event_send>
        lv_obj_invalidate(obj);
 801bea4:	4620      	mov	r0, r4
}
 801bea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(obj);
 801beaa:	f000 bef7 	b.w	801cc9c <lv_obj_invalidate>
}
 801beae:	bd38      	pop	{r3, r4, r5, pc}

0801beb0 <lv_obj_get_style_opa>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 801beb0:	2260      	movs	r2, #96	; 0x60
{
 801beb2:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 801beb4:	f001 fe18 	bl	801dae8 <lv_obj_get_style_prop>
}
 801beb8:	b2c0      	uxtb	r0, r0
 801beba:	bd08      	pop	{r3, pc}

0801bebc <lv_obj_get_style_blend_mode>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 801bebc:	2267      	movs	r2, #103	; 0x67
{
 801bebe:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 801bec0:	f001 fe12 	bl	801dae8 <lv_obj_get_style_prop>
}
 801bec4:	b2c0      	uxtb	r0, r0
 801bec6:	bd08      	pop	{r3, pc}

0801bec8 <lv_obj_get_style_bg_color_filtered>:
{
 801bec8:	b538      	push	{r3, r4, r5, lr}
 801beca:	4604      	mov	r4, r0
 801becc:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 801bece:	2220      	movs	r2, #32
 801bed0:	f001 fe0a 	bl	801dae8 <lv_obj_get_style_prop>
 801bed4:	4629      	mov	r1, r5
 801bed6:	4602      	mov	r2, r0
 801bed8:	4620      	mov	r0, r4
 801beda:	f002 f81c 	bl	801df16 <_lv_obj_style_apply_color_filter>
}
 801bede:	bd38      	pop	{r3, r4, r5, pc}

0801bee0 <lv_obj_get_style_text_color_filtered>:
{
 801bee0:	b538      	push	{r3, r4, r5, lr}
 801bee2:	4604      	mov	r4, r0
 801bee4:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 801bee6:	2255      	movs	r2, #85	; 0x55
 801bee8:	f001 fdfe 	bl	801dae8 <lv_obj_get_style_prop>
 801beec:	4629      	mov	r1, r5
 801beee:	4602      	mov	r2, r0
 801bef0:	4620      	mov	r0, r4
 801bef2:	f002 f810 	bl	801df16 <_lv_obj_style_apply_color_filter>
}
 801bef6:	bd38      	pop	{r3, r4, r5, pc}

0801bef8 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 801bef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801befa:	4606      	mov	r6, r0
 801befc:	4614      	mov	r4, r2
    lv_opa_t opa = LV_OPA_COVER;
    if(part != LV_PART_MAIN) {
 801befe:	460d      	mov	r5, r1
 801bf00:	2900      	cmp	r1, #0
 801bf02:	f000 80fa 	beq.w	801c0fa <lv_obj_init_draw_rect_dsc+0x202>
        opa = lv_obj_get_style_opa(obj, part);
 801bf06:	f7ff ffd3 	bl	801beb0 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 801bf0a:	2802      	cmp	r0, #2
        opa = lv_obj_get_style_opa(obj, part);
 801bf0c:	4607      	mov	r7, r0
        if(opa <= LV_OPA_MIN) {
 801bf0e:	d809      	bhi.n	801bf24 <lv_obj_init_draw_rect_dsc+0x2c>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 801bf10:	2300      	movs	r3, #0
 801bf12:	70e3      	strb	r3, [r4, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 801bf14:	76a3      	strb	r3, [r4, #26]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 801bf16:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 801bf1a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 801bf1e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
        }
    }
}
 801bf22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 801bf24:	4629      	mov	r1, r5
 801bf26:	4630      	mov	r0, r6
 801bf28:	f7ff ffc8 	bl	801bebc <lv_obj_get_style_blend_mode>
 801bf2c:	70a0      	strb	r0, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 801bf2e:	220b      	movs	r2, #11
 801bf30:	4629      	mov	r1, r5
 801bf32:	4630      	mov	r0, r6
 801bf34:	f001 fdd8 	bl	801dae8 <lv_obj_get_style_prop>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 801bf38:	78e3      	ldrb	r3, [r4, #3]
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 801bf3a:	8020      	strh	r0, [r4, #0]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 801bf3c:	b1f3      	cbz	r3, 801bf7c <lv_obj_init_draw_rect_dsc+0x84>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 801bf3e:	2221      	movs	r2, #33	; 0x21
 801bf40:	4629      	mov	r1, r5
 801bf42:	4630      	mov	r0, r6
 801bf44:	f001 fdd0 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801bf48:	b2c0      	uxtb	r0, r0
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 801bf4a:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 801bf4c:	70e0      	strb	r0, [r4, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 801bf4e:	d915      	bls.n	801bf7c <lv_obj_init_draw_rect_dsc+0x84>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 801bf50:	4629      	mov	r1, r5
 801bf52:	4630      	mov	r0, r6
 801bf54:	f7ff ffb8 	bl	801bec8 <lv_obj_get_style_bg_color_filtered>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 801bf58:	4629      	mov	r1, r5
 801bf5a:	80a0      	strh	r0, [r4, #4]
 801bf5c:	2226      	movs	r2, #38	; 0x26
 801bf5e:	4630      	mov	r0, r6
 801bf60:	f001 fdc2 	bl	801dae8 <lv_obj_get_style_prop>
            if(grad && grad->dir != LV_GRAD_DIR_NONE) {
 801bf64:	4601      	mov	r1, r0
 801bf66:	2800      	cmp	r0, #0
 801bf68:	f000 80c9 	beq.w	801c0fe <lv_obj_init_draw_rect_dsc+0x206>
 801bf6c:	7a43      	ldrb	r3, [r0, #9]
 801bf6e:	075a      	lsls	r2, r3, #29
 801bf70:	f000 80c5 	beq.w	801c0fe <lv_obj_init_draw_rect_dsc+0x206>
    return memcpy(dst, src, len);
 801bf74:	220a      	movs	r2, #10
 801bf76:	1da0      	adds	r0, r4, #6
 801bf78:	f7fe fbfb 	bl	801a772 <memcpy>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801bf7c:	2232      	movs	r2, #50	; 0x32
 801bf7e:	4629      	mov	r1, r5
 801bf80:	4630      	mov	r0, r6
 801bf82:	f001 fdb1 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801bf86:	b200      	sxth	r0, r0
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 801bf88:	8420      	strh	r0, [r4, #32]
    if(draw_dsc->border_width) {
 801bf8a:	b310      	cbz	r0, 801bfd2 <lv_obj_init_draw_rect_dsc+0xda>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 801bf8c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801bf90:	b1fb      	cbz	r3, 801bfd2 <lv_obj_init_draw_rect_dsc+0xda>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 801bf92:	2231      	movs	r2, #49	; 0x31
 801bf94:	4629      	mov	r1, r5
 801bf96:	4630      	mov	r0, r6
 801bf98:	f001 fda6 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801bf9c:	b2c0      	uxtb	r0, r0
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 801bf9e:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 801bfa0:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 801bfa4:	d915      	bls.n	801bfd2 <lv_obj_init_draw_rect_dsc+0xda>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 801bfa6:	2233      	movs	r2, #51	; 0x33
 801bfa8:	4629      	mov	r1, r5
 801bfaa:	4630      	mov	r0, r6
 801bfac:	f001 fd9c 	bl	801dae8 <lv_obj_get_style_prop>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 801bfb0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 801bfb4:	2230      	movs	r2, #48	; 0x30
 801bfb6:	4629      	mov	r1, r5
 801bfb8:	f360 0345 	bfi	r3, r0, #1, #5
 801bfbc:	4630      	mov	r0, r6
 801bfbe:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 801bfc2:	f001 fd91 	bl	801dae8 <lv_obj_get_style_prop>
 801bfc6:	4629      	mov	r1, r5
 801bfc8:	4602      	mov	r2, r0
 801bfca:	4630      	mov	r0, r6
 801bfcc:	f001 ffa3 	bl	801df16 <_lv_obj_style_apply_color_filter>
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 801bfd0:	83e0      	strh	r0, [r4, #30]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 801bfd2:	2235      	movs	r2, #53	; 0x35
 801bfd4:	4629      	mov	r1, r5
 801bfd6:	4630      	mov	r0, r6
 801bfd8:	f001 fd86 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801bfdc:	b200      	sxth	r0, r0
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 801bfde:	84e0      	strh	r0, [r4, #38]	; 0x26
    if(draw_dsc->outline_width) {
 801bfe0:	b1e8      	cbz	r0, 801c01e <lv_obj_init_draw_rect_dsc+0x126>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 801bfe2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801bfe6:	b1d3      	cbz	r3, 801c01e <lv_obj_init_draw_rect_dsc+0x126>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 801bfe8:	2237      	movs	r2, #55	; 0x37
 801bfea:	4629      	mov	r1, r5
 801bfec:	4630      	mov	r0, r6
 801bfee:	f001 fd7b 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801bff2:	b2c0      	uxtb	r0, r0
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 801bff4:	2802      	cmp	r0, #2
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 801bff6:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 801bffa:	d910      	bls.n	801c01e <lv_obj_init_draw_rect_dsc+0x126>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 801bffc:	2238      	movs	r2, #56	; 0x38
 801bffe:	4629      	mov	r1, r5
 801c000:	4630      	mov	r0, r6
 801c002:	f001 fd71 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 801c006:	2236      	movs	r2, #54	; 0x36
 801c008:	4629      	mov	r1, r5
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 801c00a:	8520      	strh	r0, [r4, #40]	; 0x28
 801c00c:	4630      	mov	r0, r6
 801c00e:	f001 fd6b 	bl	801dae8 <lv_obj_get_style_prop>
 801c012:	4629      	mov	r1, r5
 801c014:	4602      	mov	r2, r0
 801c016:	4630      	mov	r0, r6
 801c018:	f001 ff7d 	bl	801df16 <_lv_obj_style_apply_color_filter>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 801c01c:	84a0      	strh	r0, [r4, #36]	; 0x24
    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 801c01e:	7ea3      	ldrb	r3, [r4, #26]
 801c020:	b303      	cbz	r3, 801c064 <lv_obj_init_draw_rect_dsc+0x16c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 801c022:	2228      	movs	r2, #40	; 0x28
 801c024:	4629      	mov	r1, r5
 801c026:	4630      	mov	r0, r6
 801c028:	f001 fd5e 	bl	801dae8 <lv_obj_get_style_prop>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 801c02c:	6120      	str	r0, [r4, #16]
        if(draw_dsc->bg_img_src) {
 801c02e:	b1c8      	cbz	r0, 801c064 <lv_obj_init_draw_rect_dsc+0x16c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 801c030:	2229      	movs	r2, #41	; 0x29
 801c032:	4629      	mov	r1, r5
 801c034:	4630      	mov	r0, r6
 801c036:	f001 fd57 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c03a:	b2c0      	uxtb	r0, r0
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 801c03c:	2802      	cmp	r0, #2
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 801c03e:	76a0      	strb	r0, [r4, #26]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 801c040:	d910      	bls.n	801c064 <lv_obj_init_draw_rect_dsc+0x16c>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 801c042:	6920      	ldr	r0, [r4, #16]
 801c044:	f002 fc2e 	bl	801e8a4 <lv_img_src_get_type>
 801c048:	2802      	cmp	r0, #2
 801c04a:	f040 8089 	bne.w	801c160 <lv_obj_init_draw_rect_dsc+0x268>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801c04e:	2257      	movs	r2, #87	; 0x57
 801c050:	4629      	mov	r1, r5
 801c052:	4630      	mov	r0, r6
 801c054:	f001 fd48 	bl	801dae8 <lv_obj_get_style_prop>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 801c058:	4629      	mov	r1, r5
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 801c05a:	6160      	str	r0, [r4, #20]
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 801c05c:	4630      	mov	r0, r6
 801c05e:	f7ff ff3f 	bl	801bee0 <lv_obj_get_style_text_color_filtered>
 801c062:	8320      	strh	r0, [r4, #24]
    if(draw_dsc->shadow_opa) {
 801c064:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 801c068:	b393      	cbz	r3, 801c0d0 <lv_obj_init_draw_rect_dsc+0x1d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 801c06a:	2240      	movs	r2, #64	; 0x40
 801c06c:	4629      	mov	r1, r5
 801c06e:	4630      	mov	r0, r6
 801c070:	f001 fd3a 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c074:	b200      	sxth	r0, r0
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 801c076:	85e0      	strh	r0, [r4, #46]	; 0x2e
        if(draw_dsc->shadow_width) {
 801c078:	b350      	cbz	r0, 801c0d0 <lv_obj_init_draw_rect_dsc+0x1d8>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 801c07a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 801c07e:	2b02      	cmp	r3, #2
 801c080:	d926      	bls.n	801c0d0 <lv_obj_init_draw_rect_dsc+0x1d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 801c082:	2245      	movs	r2, #69	; 0x45
 801c084:	4629      	mov	r1, r5
 801c086:	4630      	mov	r0, r6
 801c088:	f001 fd2e 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c08c:	b2c0      	uxtb	r0, r0
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 801c08e:	2802      	cmp	r0, #2
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 801c090:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 801c094:	d91c      	bls.n	801c0d0 <lv_obj_init_draw_rect_dsc+0x1d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 801c096:	2241      	movs	r2, #65	; 0x41
 801c098:	4629      	mov	r1, r5
 801c09a:	4630      	mov	r0, r6
 801c09c:	f001 fd24 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 801c0a0:	2242      	movs	r2, #66	; 0x42
 801c0a2:	4629      	mov	r1, r5
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 801c0a4:	8620      	strh	r0, [r4, #48]	; 0x30
 801c0a6:	4630      	mov	r0, r6
 801c0a8:	f001 fd1e 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 801c0ac:	2243      	movs	r2, #67	; 0x43
 801c0ae:	4629      	mov	r1, r5
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 801c0b0:	8660      	strh	r0, [r4, #50]	; 0x32
 801c0b2:	4630      	mov	r0, r6
 801c0b4:	f001 fd18 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
 801c0b8:	2244      	movs	r2, #68	; 0x44
 801c0ba:	4629      	mov	r1, r5
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 801c0bc:	86a0      	strh	r0, [r4, #52]	; 0x34
 801c0be:	4630      	mov	r0, r6
 801c0c0:	f001 fd12 	bl	801dae8 <lv_obj_get_style_prop>
 801c0c4:	4629      	mov	r1, r5
 801c0c6:	4602      	mov	r2, r0
 801c0c8:	4630      	mov	r0, r6
 801c0ca:	f001 ff24 	bl	801df16 <_lv_obj_style_apply_color_filter>
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 801c0ce:	85a0      	strh	r0, [r4, #44]	; 0x2c
    if(part != LV_PART_MAIN) {
 801c0d0:	2d00      	cmp	r5, #0
 801c0d2:	f43f af26 	beq.w	801bf22 <lv_obj_init_draw_rect_dsc+0x2a>
        if(opa < LV_OPA_MAX) {
 801c0d6:	2ffc      	cmp	r7, #252	; 0xfc
 801c0d8:	f63f af23 	bhi.w	801bf22 <lv_obj_init_draw_rect_dsc+0x2a>
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 801c0dc:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 801c0e0:	fb10 f007 	smulbb	r0, r0, r7
 801c0e4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c0e8:	70e0      	strb	r0, [r4, #3]
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
 801c0ea:	76a0      	strb	r0, [r4, #26]
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 801c0ec:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
 801c0f0:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 801c0f4:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
 801c0f8:	e713      	b.n	801bf22 <lv_obj_init_draw_rect_dsc+0x2a>
    lv_opa_t opa = LV_OPA_COVER;
 801c0fa:	27ff      	movs	r7, #255	; 0xff
 801c0fc:	e717      	b.n	801bf2e <lv_obj_init_draw_rect_dsc+0x36>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 801c0fe:	2223      	movs	r2, #35	; 0x23
 801c100:	4629      	mov	r1, r5
 801c102:	4630      	mov	r0, r6
 801c104:	f001 fcf0 	bl	801dae8 <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dir = lv_obj_get_style_bg_grad_dir(obj, part);
 801c108:	7be3      	ldrb	r3, [r4, #15]
 801c10a:	f360 0302 	bfi	r3, r0, #0, #3
 801c10e:	73e3      	strb	r3, [r4, #15]
                if(draw_dsc->bg_grad.dir != LV_GRAD_DIR_NONE) {
 801c110:	075b      	lsls	r3, r3, #29
 801c112:	d01b      	beq.n	801c14c <lv_obj_init_draw_rect_dsc+0x254>
                    draw_dsc->bg_grad.stops[0].color = lv_obj_get_style_bg_color_filtered(obj, part);
 801c114:	4629      	mov	r1, r5
 801c116:	4630      	mov	r0, r6
 801c118:	f7ff fed6 	bl	801bec8 <lv_obj_get_style_bg_color_filtered>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR));
 801c11c:	2222      	movs	r2, #34	; 0x22
 801c11e:	4629      	mov	r1, r5
 801c120:	80e0      	strh	r0, [r4, #6]
 801c122:	4630      	mov	r0, r6
 801c124:	f001 fce0 	bl	801dae8 <lv_obj_get_style_prop>
 801c128:	4629      	mov	r1, r5
 801c12a:	4602      	mov	r2, r0
 801c12c:	4630      	mov	r0, r6
 801c12e:	f001 fef2 	bl	801df16 <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 801c132:	2224      	movs	r2, #36	; 0x24
 801c134:	4629      	mov	r1, r5
                    draw_dsc->bg_grad.stops[1].color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 801c136:	8160      	strh	r0, [r4, #10]
 801c138:	4630      	mov	r0, r6
 801c13a:	f001 fcd5 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 801c13e:	2225      	movs	r2, #37	; 0x25
                    draw_dsc->bg_grad.stops[0].frac = lv_obj_get_style_bg_main_stop(obj, part);
 801c140:	7220      	strb	r0, [r4, #8]
 801c142:	4629      	mov	r1, r5
 801c144:	4630      	mov	r0, r6
 801c146:	f001 fccf 	bl	801dae8 <lv_obj_get_style_prop>
                    draw_dsc->bg_grad.stops[1].frac = lv_obj_get_style_bg_grad_stop(obj, part);
 801c14a:	7320      	strb	r0, [r4, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 801c14c:	2227      	movs	r2, #39	; 0x27
 801c14e:	4629      	mov	r1, r5
 801c150:	4630      	mov	r0, r6
 801c152:	f001 fcc9 	bl	801dae8 <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
 801c156:	7be3      	ldrb	r3, [r4, #15]
 801c158:	f360 03c5 	bfi	r3, r0, #3, #3
 801c15c:	73e3      	strb	r3, [r4, #15]
 801c15e:	e70d      	b.n	801bf7c <lv_obj_init_draw_rect_dsc+0x84>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 801c160:	222a      	movs	r2, #42	; 0x2a
 801c162:	4629      	mov	r1, r5
 801c164:	4630      	mov	r0, r6
 801c166:	f001 fcbf 	bl	801dae8 <lv_obj_get_style_prop>
 801c16a:	4629      	mov	r1, r5
 801c16c:	4602      	mov	r2, r0
 801c16e:	4630      	mov	r0, r6
 801c170:	f001 fed1 	bl	801df16 <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 801c174:	222b      	movs	r2, #43	; 0x2b
 801c176:	4629      	mov	r1, r5
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 801c178:	8320      	strh	r0, [r4, #24]
 801c17a:	4630      	mov	r0, r6
 801c17c:	f001 fcb4 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 801c180:	222c      	movs	r2, #44	; 0x2c
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 801c182:	76e0      	strb	r0, [r4, #27]
 801c184:	4629      	mov	r1, r5
 801c186:	4630      	mov	r0, r6
 801c188:	f001 fcae 	bl	801dae8 <lv_obj_get_style_prop>
    return (bool)v.num;
 801c18c:	3800      	subs	r0, #0
 801c18e:	bf18      	it	ne
 801c190:	2001      	movne	r0, #1
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 801c192:	7720      	strb	r0, [r4, #28]
 801c194:	e766      	b.n	801c064 <lv_obj_init_draw_rect_dsc+0x16c>

0801c196 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 801c196:	b570      	push	{r4, r5, r6, lr}
 801c198:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 801c19a:	2256      	movs	r2, #86	; 0x56
 801c19c:	4606      	mov	r6, r0
 801c19e:	460d      	mov	r5, r1
 801c1a0:	f001 fca2 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c1a4:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 801c1a6:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 801c1a8:	76a0      	strb	r0, [r4, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 801c1aa:	d908      	bls.n	801c1be <lv_obj_init_draw_label_dsc+0x28>

    if(part != LV_PART_MAIN) {
 801c1ac:	b17d      	cbz	r5, 801c1ce <lv_obj_init_draw_label_dsc+0x38>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 801c1ae:	4629      	mov	r1, r5
 801c1b0:	4630      	mov	r0, r6
 801c1b2:	f7ff fe7d 	bl	801beb0 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 801c1b6:	2802      	cmp	r0, #2
 801c1b8:	d802      	bhi.n	801c1c0 <lv_obj_init_draw_label_dsc+0x2a>
            draw_dsc->opa = LV_OPA_TRANSP;
 801c1ba:	2300      	movs	r3, #0
 801c1bc:	76a3      	strb	r3, [r4, #26]
#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
}
 801c1be:	bd70      	pop	{r4, r5, r6, pc}
        if(opa < LV_OPA_MAX) {
 801c1c0:	28fc      	cmp	r0, #252	; 0xfc
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 801c1c2:	bf9f      	itttt	ls
 801c1c4:	7ea3      	ldrbls	r3, [r4, #26]
 801c1c6:	fb13 f300 	smulbbls	r3, r3, r0
 801c1ca:	121b      	asrls	r3, r3, #8
 801c1cc:	76a3      	strbls	r3, [r4, #26]
    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 801c1ce:	4629      	mov	r1, r5
 801c1d0:	4630      	mov	r0, r6
 801c1d2:	f7ff fe85 	bl	801bee0 <lv_obj_get_style_text_color_filtered>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801c1d6:	2258      	movs	r2, #88	; 0x58
 801c1d8:	4629      	mov	r1, r5
 801c1da:	81a0      	strh	r0, [r4, #12]
 801c1dc:	4630      	mov	r0, r6
 801c1de:	f001 fc83 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801c1e2:	2259      	movs	r2, #89	; 0x59
 801c1e4:	4629      	mov	r1, r5
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 801c1e6:	82a0      	strh	r0, [r4, #20]
 801c1e8:	4630      	mov	r0, r6
 801c1ea:	f001 fc7d 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 801c1ee:	225a      	movs	r2, #90	; 0x5a
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 801c1f0:	8260      	strh	r0, [r4, #18]
 801c1f2:	4629      	mov	r1, r5
 801c1f4:	4630      	mov	r0, r6
 801c1f6:	f001 fc77 	bl	801dae8 <lv_obj_get_style_prop>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 801c1fa:	7fa3      	ldrb	r3, [r4, #30]
 801c1fc:	f360 0302 	bfi	r3, r0, #0, #3
 801c200:	77a3      	strb	r3, [r4, #30]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 801c202:	b13d      	cbz	r5, 801c214 <lv_obj_init_draw_label_dsc+0x7e>
 801c204:	4629      	mov	r1, r5
 801c206:	4630      	mov	r0, r6
 801c208:	f7ff fe58 	bl	801bebc <lv_obj_get_style_blend_mode>
 801c20c:	7fa3      	ldrb	r3, [r4, #30]
 801c20e:	f360 03c5 	bfi	r3, r0, #3, #3
 801c212:	77a3      	strb	r3, [r4, #30]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801c214:	2257      	movs	r2, #87	; 0x57
 801c216:	4629      	mov	r1, r5
 801c218:	4630      	mov	r0, r6
 801c21a:	f001 fc65 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801c21e:	225b      	movs	r2, #91	; 0x5b
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 801c220:	6020      	str	r0, [r4, #0]
 801c222:	4629      	mov	r1, r5
 801c224:	4630      	mov	r0, r6
 801c226:	f001 fc5f 	bl	801dae8 <lv_obj_get_style_prop>
    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 801c22a:	7720      	strb	r0, [r4, #28]
 801c22c:	e7c7      	b.n	801c1be <lv_obj_init_draw_label_dsc+0x28>

0801c22e <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint32_t part, lv_draw_img_dsc_t * draw_dsc)
{
 801c22e:	b570      	push	{r4, r5, r6, lr}
 801c230:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 801c232:	2246      	movs	r2, #70	; 0x46
 801c234:	4605      	mov	r5, r0
 801c236:	460e      	mov	r6, r1
 801c238:	f001 fc56 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c23c:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 801c23e:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
 801c240:	72e0      	strb	r0, [r4, #11]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 801c242:	d908      	bls.n	801c256 <lv_obj_init_draw_img_dsc+0x28>

    if(part != LV_PART_MAIN) {
 801c244:	b17e      	cbz	r6, 801c266 <lv_obj_init_draw_img_dsc+0x38>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 801c246:	4631      	mov	r1, r6
 801c248:	4628      	mov	r0, r5
 801c24a:	f7ff fe31 	bl	801beb0 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 801c24e:	2802      	cmp	r0, #2
 801c250:	d802      	bhi.n	801c258 <lv_obj_init_draw_img_dsc+0x2a>
            draw_dsc->opa = LV_OPA_TRANSP;
 801c252:	2300      	movs	r3, #0
 801c254:	72e3      	strb	r3, [r4, #11]
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
    }
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 801c256:	bd70      	pop	{r4, r5, r6, pc}
        if(opa < LV_OPA_MAX) {
 801c258:	28fc      	cmp	r0, #252	; 0xfc
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 801c25a:	bf9f      	itttt	ls
 801c25c:	7ae3      	ldrbls	r3, [r4, #11]
 801c25e:	fb13 f300 	smulbbls	r3, r3, r0
 801c262:	121b      	asrls	r3, r3, #8
 801c264:	72e3      	strbls	r3, [r4, #11]
    draw_dsc->angle = 0;
 801c266:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_OPA);
 801c26a:	4631      	mov	r1, r6
 801c26c:	4628      	mov	r0, r5
 801c26e:	6023      	str	r3, [r4, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801c270:	8b2b      	ldrh	r3, [r5, #24]
 801c272:	8aaa      	ldrh	r2, [r5, #20]
 801c274:	3301      	adds	r3, #1
 801c276:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 801c278:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 801c27c:	fa02 f383 	sxtah	r3, r2, r3
 801c280:	105b      	asrs	r3, r3, #1
 801c282:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801c284:	8b6b      	ldrh	r3, [r5, #26]
 801c286:	8aea      	ldrh	r2, [r5, #22]
 801c288:	3301      	adds	r3, #1
 801c28a:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 801c28c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 801c290:	fa02 f383 	sxtah	r3, r2, r3
 801c294:	2248      	movs	r2, #72	; 0x48
 801c296:	105b      	asrs	r3, r3, #1
 801c298:	80e3      	strh	r3, [r4, #6]
 801c29a:	f001 fc25 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c29e:	b2c0      	uxtb	r0, r0
    draw_dsc->recolor_opa = lv_obj_get_style_img_recolor_opa(obj, part);
 801c2a0:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 801c2a2:	b150      	cbz	r0, 801c2ba <lv_obj_init_draw_img_dsc+0x8c>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR));
 801c2a4:	2247      	movs	r2, #71	; 0x47
 801c2a6:	4631      	mov	r1, r6
 801c2a8:	4628      	mov	r0, r5
 801c2aa:	f001 fc1d 	bl	801dae8 <lv_obj_get_style_prop>
 801c2ae:	4631      	mov	r1, r6
 801c2b0:	4602      	mov	r2, r0
 801c2b2:	4628      	mov	r0, r5
 801c2b4:	f001 fe2f 	bl	801df16 <_lv_obj_style_apply_color_filter>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
 801c2b8:	8120      	strh	r0, [r4, #8]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 801c2ba:	2e00      	cmp	r6, #0
 801c2bc:	d0cb      	beq.n	801c256 <lv_obj_init_draw_img_dsc+0x28>
 801c2be:	4631      	mov	r1, r6
 801c2c0:	4628      	mov	r0, r5
 801c2c2:	f7ff fdfb 	bl	801bebc <lv_obj_get_style_blend_mode>
 801c2c6:	7b23      	ldrb	r3, [r4, #12]
 801c2c8:	f360 0303 	bfi	r3, r0, #0, #4
 801c2cc:	7323      	strb	r3, [r4, #12]
 801c2ce:	e7c2      	b.n	801c256 <lv_obj_init_draw_img_dsc+0x28>

0801c2d0 <lv_obj_init_draw_line_dsc>:

void lv_obj_init_draw_line_dsc(lv_obj_t * obj, uint32_t part, lv_draw_line_dsc_t * draw_dsc)
{
 801c2d0:	b570      	push	{r4, r5, r6, lr}
 801c2d2:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_OPA);
 801c2d4:	224e      	movs	r2, #78	; 0x4e
 801c2d6:	4606      	mov	r6, r0
 801c2d8:	460d      	mov	r5, r1
 801c2da:	f001 fc05 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c2de:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 801c2e0:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 801c2e2:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 801c2e4:	d908      	bls.n	801c2f8 <lv_obj_init_draw_line_dsc+0x28>

    if(part != LV_PART_MAIN) {
 801c2e6:	b17d      	cbz	r5, 801c308 <lv_obj_init_draw_line_dsc+0x38>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 801c2e8:	4629      	mov	r1, r5
 801c2ea:	4630      	mov	r0, r6
 801c2ec:	f7ff fde0 	bl	801beb0 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 801c2f0:	2802      	cmp	r0, #2
 801c2f2:	d802      	bhi.n	801c2fa <lv_obj_init_draw_line_dsc+0x2a>
            draw_dsc->opa = LV_OPA_TRANSP;
 801c2f4:	2300      	movs	r3, #0
 801c2f6:	7223      	strb	r3, [r4, #8]
    draw_dsc->round_end = draw_dsc->round_start;

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 801c2f8:	bd70      	pop	{r4, r5, r6, pc}
        if(opa < LV_OPA_MAX) {
 801c2fa:	28fc      	cmp	r0, #252	; 0xfc
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 801c2fc:	bf9f      	itttt	ls
 801c2fe:	7a23      	ldrbls	r3, [r4, #8]
 801c300:	fb13 f300 	smulbbls	r3, r3, r0
 801c304:	121b      	asrls	r3, r3, #8
 801c306:	7223      	strbls	r3, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 801c308:	2249      	movs	r2, #73	; 0x49
 801c30a:	4629      	mov	r1, r5
 801c30c:	4630      	mov	r0, r6
 801c30e:	f001 fbeb 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c312:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 801c314:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 801c316:	2800      	cmp	r0, #0
 801c318:	d0ee      	beq.n	801c2f8 <lv_obj_init_draw_line_dsc+0x28>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_COLOR));
 801c31a:	224d      	movs	r2, #77	; 0x4d
 801c31c:	4629      	mov	r1, r5
 801c31e:	4630      	mov	r0, r6
 801c320:	f001 fbe2 	bl	801dae8 <lv_obj_get_style_prop>
 801c324:	4629      	mov	r1, r5
 801c326:	4602      	mov	r2, r0
 801c328:	4630      	mov	r0, r6
 801c32a:	f001 fdf4 	bl	801df16 <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_WIDTH);
 801c32e:	224a      	movs	r2, #74	; 0x4a
    draw_dsc->color = lv_obj_get_style_line_color_filtered(obj, part);
 801c330:	8020      	strh	r0, [r4, #0]
 801c332:	4629      	mov	r1, r5
 801c334:	4630      	mov	r0, r6
 801c336:	f001 fbd7 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c33a:	b200      	sxth	r0, r0
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 801c33c:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
 801c33e:	b128      	cbz	r0, 801c34c <lv_obj_init_draw_line_dsc+0x7c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_GAP);
 801c340:	224b      	movs	r2, #75	; 0x4b
 801c342:	4629      	mov	r1, r5
 801c344:	4630      	mov	r0, r6
 801c346:	f001 fbcf 	bl	801dae8 <lv_obj_get_style_prop>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 801c34a:	80e0      	strh	r0, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_ROUNDED);
 801c34c:	224c      	movs	r2, #76	; 0x4c
 801c34e:	4629      	mov	r1, r5
 801c350:	4630      	mov	r0, r6
 801c352:	f001 fbc9 	bl	801dae8 <lv_obj_get_style_prop>
    return (bool)v.num;
 801c356:	3800      	subs	r0, #0
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 801c358:	7a63      	ldrb	r3, [r4, #9]
 801c35a:	bf18      	it	ne
 801c35c:	2001      	movne	r0, #1
 801c35e:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
 801c362:	f360 03c3 	bfi	r3, r0, #3, #1
 801c366:	7263      	strb	r3, [r4, #9]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 801c368:	2d00      	cmp	r5, #0
 801c36a:	d0c5      	beq.n	801c2f8 <lv_obj_init_draw_line_dsc+0x28>
 801c36c:	4629      	mov	r1, r5
 801c36e:	4630      	mov	r0, r6
 801c370:	f7ff fda4 	bl	801bebc <lv_obj_get_style_blend_mode>
 801c374:	7a63      	ldrb	r3, [r4, #9]
 801c376:	f360 0301 	bfi	r3, r0, #0, #2
 801c37a:	7263      	strb	r3, [r4, #9]
 801c37c:	e7bc      	b.n	801c2f8 <lv_obj_init_draw_line_dsc+0x28>

0801c37e <lv_obj_init_draw_arc_dsc>:

void lv_obj_init_draw_arc_dsc(lv_obj_t * obj, uint32_t part, lv_draw_arc_dsc_t * draw_dsc)
{
 801c37e:	b570      	push	{r4, r5, r6, lr}
 801c380:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 801c382:	2250      	movs	r2, #80	; 0x50
 801c384:	4606      	mov	r6, r0
 801c386:	460d      	mov	r5, r1
 801c388:	f001 fbae 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c38c:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_arc_width(obj, part);
 801c38e:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 801c390:	b188      	cbz	r0, 801c3b6 <lv_obj_init_draw_arc_dsc+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_OPA);
 801c392:	2253      	movs	r2, #83	; 0x53
 801c394:	4629      	mov	r1, r5
 801c396:	4630      	mov	r0, r6
 801c398:	f001 fba6 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c39c:	b2c0      	uxtb	r0, r0

    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 801c39e:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
 801c3a0:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 801c3a2:	d908      	bls.n	801c3b6 <lv_obj_init_draw_arc_dsc+0x38>

    if(part != LV_PART_MAIN) {
 801c3a4:	b17d      	cbz	r5, 801c3c6 <lv_obj_init_draw_arc_dsc+0x48>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 801c3a6:	4629      	mov	r1, r5
 801c3a8:	4630      	mov	r0, r6
 801c3aa:	f7ff fd81 	bl	801beb0 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 801c3ae:	2802      	cmp	r0, #2
 801c3b0:	d802      	bhi.n	801c3b8 <lv_obj_init_draw_arc_dsc+0x3a>
            draw_dsc->opa = LV_OPA_TRANSP;
 801c3b2:	2300      	movs	r3, #0
 801c3b4:	7323      	strb	r3, [r4, #12]
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 801c3b6:	bd70      	pop	{r4, r5, r6, pc}
        if(opa < LV_OPA_MAX) {
 801c3b8:	28fc      	cmp	r0, #252	; 0xfc
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 801c3ba:	bf9f      	itttt	ls
 801c3bc:	7b23      	ldrbls	r3, [r4, #12]
 801c3be:	fb13 f300 	smulbbls	r3, r3, r0
 801c3c2:	121b      	asrls	r3, r3, #8
 801c3c4:	7323      	strbls	r3, [r4, #12]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_COLOR));
 801c3c6:	2252      	movs	r2, #82	; 0x52
 801c3c8:	4629      	mov	r1, r5
 801c3ca:	4630      	mov	r0, r6
 801c3cc:	f001 fb8c 	bl	801dae8 <lv_obj_get_style_prop>
 801c3d0:	4629      	mov	r1, r5
 801c3d2:	4602      	mov	r2, r0
 801c3d4:	4630      	mov	r0, r6
 801c3d6:	f001 fd9e 	bl	801df16 <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_IMG_SRC);
 801c3da:	2254      	movs	r2, #84	; 0x54
 801c3dc:	4629      	mov	r1, r5
    draw_dsc->color = lv_obj_get_style_arc_color_filtered(obj, part);
 801c3de:	8020      	strh	r0, [r4, #0]
 801c3e0:	4630      	mov	r0, r6
 801c3e2:	f001 fb81 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 801c3e6:	2251      	movs	r2, #81	; 0x51
    draw_dsc->img_src = lv_obj_get_style_arc_img_src(obj, part);
 801c3e8:	60a0      	str	r0, [r4, #8]
 801c3ea:	4629      	mov	r1, r5
 801c3ec:	4630      	mov	r0, r6
 801c3ee:	f001 fb7b 	bl	801dae8 <lv_obj_get_style_prop>
    return (bool)v.num;
 801c3f2:	3800      	subs	r0, #0
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 801c3f4:	7b63      	ldrb	r3, [r4, #13]
 801c3f6:	bf18      	it	ne
 801c3f8:	2001      	movne	r0, #1
 801c3fa:	f360 0382 	bfi	r3, r0, #2, #1
 801c3fe:	7363      	strb	r3, [r4, #13]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 801c400:	2d00      	cmp	r5, #0
 801c402:	d0d8      	beq.n	801c3b6 <lv_obj_init_draw_arc_dsc+0x38>
 801c404:	4629      	mov	r1, r5
 801c406:	4630      	mov	r0, r6
 801c408:	f7ff fd58 	bl	801bebc <lv_obj_get_style_blend_mode>
 801c40c:	7b63      	ldrb	r3, [r4, #13]
 801c40e:	f360 0301 	bfi	r3, r0, #0, #2
 801c412:	7363      	strb	r3, [r4, #13]
 801c414:	e7cf      	b.n	801c3b6 <lv_obj_init_draw_arc_dsc+0x38>

0801c416 <lv_obj_calculate_ext_draw_size>:

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 801c416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 801c418:	2240      	movs	r2, #64	; 0x40
 801c41a:	4605      	mov	r5, r0
 801c41c:	460e      	mov	r6, r1
 801c41e:	f001 fb63 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c422:	b207      	sxth	r7, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
 801c424:	bb7f      	cbnz	r7, 801c486 <lv_obj_calculate_ext_draw_size+0x70>
    lv_coord_t s = 0;
 801c426:	2400      	movs	r4, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 801c428:	2235      	movs	r2, #53	; 0x35
 801c42a:	4631      	mov	r1, r6
 801c42c:	4628      	mov	r0, r5
 801c42e:	f001 fb5b 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c432:	b207      	sxth	r7, r0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
 801c434:	b197      	cbz	r7, 801c45c <lv_obj_calculate_ext_draw_size+0x46>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 801c436:	2237      	movs	r2, #55	; 0x37
 801c438:	4631      	mov	r1, r6
 801c43a:	4628      	mov	r0, r5
 801c43c:	f001 fb54 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c440:	b2c0      	uxtb	r0, r0
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
        if(outline_opa > LV_OPA_MIN) {
 801c442:	2802      	cmp	r0, #2
 801c444:	d90a      	bls.n	801c45c <lv_obj_calculate_ext_draw_size+0x46>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 801c446:	2238      	movs	r2, #56	; 0x38
 801c448:	4631      	mov	r1, r6
 801c44a:	4628      	mov	r0, r5
 801c44c:	f001 fb4c 	bl	801dae8 <lv_obj_get_style_prop>
            lv_coord_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
            s = LV_MAX(s, outline_pad + outline_width);
 801c450:	fa07 f080 	sxtah	r0, r7, r0
 801c454:	42a0      	cmp	r0, r4
 801c456:	bfb8      	it	lt
 801c458:	4620      	movlt	r0, r4
 801c45a:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801c45c:	4631      	mov	r1, r6
 801c45e:	2268      	movs	r2, #104	; 0x68
 801c460:	4628      	mov	r0, r5
 801c462:	f001 fb41 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801c466:	2269      	movs	r2, #105	; 0x69
    return (lv_coord_t)v.num;
 801c468:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801c46a:	4631      	mov	r1, r6
 801c46c:	4628      	mov	r0, r5
 801c46e:	f001 fb3b 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c472:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
 801c474:	42b8      	cmp	r0, r7
 801c476:	bfb8      	it	lt
 801c478:	4638      	movlt	r0, r7
    if(wh > 0) s += wh;
 801c47a:	2800      	cmp	r0, #0
 801c47c:	bfc4      	itt	gt
 801c47e:	1900      	addgt	r0, r0, r4
 801c480:	b204      	sxthgt	r4, r0

    return s;
}
 801c482:	4620      	mov	r0, r4
 801c484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 801c486:	2245      	movs	r2, #69	; 0x45
 801c488:	4631      	mov	r1, r6
 801c48a:	4628      	mov	r0, r5
 801c48c:	f001 fb2c 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c490:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
 801c492:	2802      	cmp	r0, #2
 801c494:	d9c7      	bls.n	801c426 <lv_obj_calculate_ext_draw_size+0x10>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 801c496:	2243      	movs	r2, #67	; 0x43
 801c498:	4631      	mov	r1, r6
 801c49a:	4628      	mov	r0, r5
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 801c49c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801c4a0:	f001 fb22 	bl	801dae8 <lv_obj_get_style_prop>
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 801c4a4:	1c44      	adds	r4, r0, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 801c4a6:	2241      	movs	r2, #65	; 0x41
 801c4a8:	4631      	mov	r1, r6
 801c4aa:	4628      	mov	r0, r5
 801c4ac:	eb04 0467 	add.w	r4, r4, r7, asr #1
 801c4b0:	f001 fb1a 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 801c4b4:	2242      	movs	r2, #66	; 0x42
    return (lv_coord_t)v.num;
 801c4b6:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 801c4b8:	4631      	mov	r1, r6
 801c4ba:	4628      	mov	r0, r5
 801c4bc:	b2a4      	uxth	r4, r4
 801c4be:	f001 fb13 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c4c2:	b200      	sxth	r0, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 801c4c4:	2800      	cmp	r0, #0
 801c4c6:	bfb8      	it	lt
 801c4c8:	4240      	neglt	r0, r0
 801c4ca:	2f00      	cmp	r7, #0
 801c4cc:	bfb8      	it	lt
 801c4ce:	427f      	neglt	r7, r7
 801c4d0:	b280      	uxth	r0, r0
 801c4d2:	b2bf      	uxth	r7, r7
 801c4d4:	42b8      	cmp	r0, r7
 801c4d6:	bf2c      	ite	cs
 801c4d8:	1824      	addcs	r4, r4, r0
 801c4da:	19e4      	addcc	r4, r4, r7
            s = LV_MAX(s, sh_width);
 801c4dc:	b224      	sxth	r4, r4
 801c4de:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801c4e2:	e7a1      	b.n	801c428 <lv_obj_calculate_ext_draw_size+0x12>

0801c4e4 <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 801c4e4:	b538      	push	{r3, r4, r5, lr}
 801c4e6:	4604      	mov	r4, r0
 801c4e8:	460d      	mov	r5, r1
    memset(dst, 0x00, len);
 801c4ea:	2248      	movs	r2, #72	; 0x48
 801c4ec:	2100      	movs	r1, #0
 801c4ee:	f7fe f94b 	bl	801a788 <memset>
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
    dsc->draw_ctx = draw_ctx;
 801c4f2:	6025      	str	r5, [r4, #0]
}
 801c4f4:	bd38      	pop	{r3, r4, r5, pc}

0801c4f6 <_lv_obj_get_ext_draw_size>:
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 801c4f6:	6880      	ldr	r0, [r0, #8]
 801c4f8:	b108      	cbz	r0, 801c4fe <_lv_obj_get_ext_draw_size+0x8>
 801c4fa:	f9b0 0016 	ldrsh.w	r0, [r0, #22]
    else return 0;
}
 801c4fe:	4770      	bx	lr

0801c500 <lv_obj_refresh_ext_draw_size>:
{
 801c500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c502:	4604      	mov	r4, r0
    lv_coord_t s_new = 0;
 801c504:	2300      	movs	r3, #0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 801c506:	f7ff fff6 	bl	801c4f6 <_lv_obj_get_ext_draw_size>
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 801c50a:	f10d 0206 	add.w	r2, sp, #6
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 801c50e:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 801c510:	2113      	movs	r1, #19
 801c512:	4620      	mov	r0, r4
    lv_coord_t s_new = 0;
 801c514:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 801c518:	f7e8 f914 	bl	8004744 <lv_event_send>
    if(s_new != s_old) lv_obj_invalidate(obj);
 801c51c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801c520:	42ab      	cmp	r3, r5
 801c522:	d002      	beq.n	801c52a <lv_obj_refresh_ext_draw_size+0x2a>
 801c524:	4620      	mov	r0, r4
 801c526:	f000 fbb9 	bl	801cc9c <lv_obj_invalidate>
    if(obj->spec_attr) {
 801c52a:	68a2      	ldr	r2, [r4, #8]
        obj->spec_attr->ext_draw_size = s_new;
 801c52c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    if(obj->spec_attr) {
 801c530:	b14a      	cbz	r2, 801c546 <lv_obj_refresh_ext_draw_size+0x46>
        obj->spec_attr->ext_draw_size = s_new;
 801c532:	82d3      	strh	r3, [r2, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
 801c534:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801c538:	42ab      	cmp	r3, r5
 801c53a:	d002      	beq.n	801c542 <lv_obj_refresh_ext_draw_size+0x42>
 801c53c:	4620      	mov	r0, r4
 801c53e:	f000 fbad 	bl	801cc9c <lv_obj_invalidate>
}
 801c542:	b003      	add	sp, #12
 801c544:	bd30      	pop	{r4, r5, pc}
    else if(s_new != 0) {
 801c546:	2b00      	cmp	r3, #0
 801c548:	d0f4      	beq.n	801c534 <lv_obj_refresh_ext_draw_size+0x34>
        lv_obj_allocate_spec_attr(obj);
 801c54a:	4620      	mov	r0, r4
 801c54c:	f7e8 fc48 	bl	8004de0 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 801c550:	68a3      	ldr	r3, [r4, #8]
 801c552:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801c556:	82da      	strh	r2, [r3, #22]
 801c558:	e7ec      	b.n	801c534 <lv_obj_refresh_ext_draw_size+0x34>

0801c55a <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 801c55a:	6880      	ldr	r0, [r0, #8]
 801c55c:	b108      	cbz	r0, 801c562 <_lv_obj_get_layer_type+0x8>
 801c55e:	7e80      	ldrb	r0, [r0, #26]
 801c560:	0980      	lsrs	r0, r0, #6
    else return LV_LAYER_TYPE_NONE;
}
 801c562:	4770      	bx	lr

0801c564 <lv_obj_get_style_base_dir.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801c564:	2216      	movs	r2, #22
 801c566:	2100      	movs	r1, #0
static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
 801c568:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801c56a:	f001 fabd 	bl	801dae8 <lv_obj_get_style_prop>
}
 801c56e:	b2c0      	uxtb	r0, r0
 801c570:	bd08      	pop	{r3, pc}

0801c572 <lv_obj_get_style_border_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c572:	2232      	movs	r2, #50	; 0x32
 801c574:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
 801c576:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c578:	f001 fab6 	bl	801dae8 <lv_obj_get_style_prop>
}
 801c57c:	b200      	sxth	r0, r0
 801c57e:	bd08      	pop	{r3, pc}

0801c580 <lv_obj_get_style_pad_right.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801c580:	2213      	movs	r2, #19
 801c582:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
 801c584:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801c586:	f001 faaf 	bl	801dae8 <lv_obj_get_style_prop>
}
 801c58a:	b200      	sxth	r0, r0
 801c58c:	bd08      	pop	{r3, pc}

0801c58e <lv_obj_get_style_pad_left.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c58e:	2212      	movs	r2, #18
 801c590:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
 801c592:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c594:	f001 faa8 	bl	801dae8 <lv_obj_get_style_prop>
}
 801c598:	b200      	sxth	r0, r0
 801c59a:	bd08      	pop	{r3, pc}

0801c59c <lv_obj_get_style_pad_bottom.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801c59c:	2211      	movs	r2, #17
 801c59e:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_bottom(const struct _lv_obj_t * obj, uint32_t part)
 801c5a0:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801c5a2:	f001 faa1 	bl	801dae8 <lv_obj_get_style_prop>
}
 801c5a6:	b200      	sxth	r0, r0
 801c5a8:	bd08      	pop	{r3, pc}

0801c5aa <lv_obj_get_style_pad_top.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c5aa:	2210      	movs	r2, #16
 801c5ac:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
 801c5ae:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c5b0:	f001 fa9a 	bl	801dae8 <lv_obj_get_style_prop>
}
 801c5b4:	b200      	sxth	r0, r0
 801c5b6:	bd08      	pop	{r3, pc}

0801c5b8 <transform_point>:

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 801c5b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c5bc:	4604      	mov	r4, r0
 801c5be:	460f      	mov	r7, r1
 801c5c0:	4691      	mov	r9, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801c5c2:	2100      	movs	r1, #0
 801c5c4:	226d      	movs	r2, #109	; 0x6d
 801c5c6:	f001 fa8f 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801c5ca:	226c      	movs	r2, #108	; 0x6c
    return (lv_coord_t)v.num;
 801c5cc:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801c5d0:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801c5d2:	2100      	movs	r1, #0
 801c5d4:	4620      	mov	r0, r4
 801c5d6:	f001 fa87 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c5da:	b205      	sxth	r5, r0
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 801c5dc:	f1b8 0f00 	cmp.w	r8, #0
 801c5e0:	d102      	bne.n	801c5e8 <transform_point+0x30>
 801c5e2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801c5e6:	d063      	beq.n	801c6b0 <transform_point+0xf8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 801c5e8:	226e      	movs	r2, #110	; 0x6e
 801c5ea:	2100      	movs	r1, #0
 801c5ec:	4620      	mov	r0, r4
 801c5ee:	f001 fa7b 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 801c5f2:	226f      	movs	r2, #111	; 0x6f

    lv_point_t pivot = {
 801c5f4:	f8ad 0004 	strh.w	r0, [sp, #4]
 801c5f8:	2100      	movs	r1, #0
 801c5fa:	4620      	mov	r0, r4
 801c5fc:	f001 fa74 	bl	801dae8 <lv_obj_get_style_prop>
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 801c600:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
    return (lv_coord_t)v.num;
 801c604:	b200      	sxth	r0, r0
 801c606:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
    lv_point_t pivot = {
 801c60a:	f8ad 0006 	strh.w	r0, [sp, #6]
    if(LV_COORD_IS_PCT(pivot.x)) {
 801c60e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c612:	d115      	bne.n	801c640 <transform_point+0x88>
 801c614:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 801c618:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 801c61c:	dc10      	bgt.n	801c640 <transform_point+0x88>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801c61e:	8b23      	ldrh	r3, [r4, #24]
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 801c620:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 801c624:	8aa1      	ldrh	r1, [r4, #20]
 801c626:	f103 0301 	add.w	r3, r3, #1
 801c62a:	bfc8      	it	gt
 801c62c:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 801c630:	1a5b      	subs	r3, r3, r1
 801c632:	b21b      	sxth	r3, r3
 801c634:	4353      	muls	r3, r2
 801c636:	2264      	movs	r2, #100	; 0x64
 801c638:	fb93 f3f2 	sdiv	r3, r3, r2
 801c63c:	f8ad 3004 	strh.w	r3, [sp, #4]
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 801c640:	f400 43c0 	and.w	r3, r0, #24576	; 0x6000
 801c644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c648:	d115      	bne.n	801c676 <transform_point+0xbe>
 801c64a:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 801c64e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 801c652:	dc10      	bgt.n	801c676 <transform_point+0xbe>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801c654:	8b63      	ldrh	r3, [r4, #26]
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 801c656:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801c65a:	8ae2      	ldrh	r2, [r4, #22]
 801c65c:	f103 0301 	add.w	r3, r3, #1
 801c660:	bfc8      	it	gt
 801c662:	f5c0 707a 	rsbgt	r0, r0, #1000	; 0x3e8
 801c666:	1a9b      	subs	r3, r3, r2
 801c668:	2264      	movs	r2, #100	; 0x64
 801c66a:	b21b      	sxth	r3, r3
 801c66c:	4343      	muls	r3, r0
 801c66e:	fb93 f3f2 	sdiv	r3, r3, r2
 801c672:	f8ad 3006 	strh.w	r3, [sp, #6]
    }

    pivot.x = obj->coords.x1 + pivot.x;
 801c676:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801c67a:	8aa3      	ldrh	r3, [r4, #20]
 801c67c:	4413      	add	r3, r2
    pivot.y = obj->coords.y1 + pivot.y;
 801c67e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    pivot.x = obj->coords.x1 + pivot.x;
 801c682:	f8ad 3004 	strh.w	r3, [sp, #4]
    pivot.y = obj->coords.y1 + pivot.y;
 801c686:	8ae3      	ldrh	r3, [r4, #22]
 801c688:	4413      	add	r3, r2
 801c68a:	f8ad 3006 	strh.w	r3, [sp, #6]

    if(inv) {
 801c68e:	f1b9 0f00 	cmp.w	r9, #0
 801c692:	d007      	beq.n	801c6a4 <transform_point+0xec>
        angle = -angle;
        zoom = (256 * 256) / zoom;
 801c694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
        angle = -angle;
 801c698:	4276      	negs	r6, r6
        zoom = (256 * 256) / zoom;
 801c69a:	fb93 f3f5 	sdiv	r3, r3, r5
        angle = -angle;
 801c69e:	fa0f f886 	sxth.w	r8, r6
        zoom = (256 * 256) / zoom;
 801c6a2:	b21d      	sxth	r5, r3
    }

    lv_point_transform(p, angle, zoom, &pivot);
 801c6a4:	ab01      	add	r3, sp, #4
 801c6a6:	462a      	mov	r2, r5
 801c6a8:	4641      	mov	r1, r8
 801c6aa:	4638      	mov	r0, r7
 801c6ac:	f7f5 ff02 	bl	80124b4 <lv_point_transform>
}
 801c6b0:	b003      	add	sp, #12
 801c6b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801c6b6 <lv_obj_set_x>:
{
 801c6b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 801c6b8:	2300      	movs	r3, #0
{
 801c6ba:	460c      	mov	r4, r1
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 801c6bc:	aa01      	add	r2, sp, #4
 801c6be:	2107      	movs	r1, #7
{
 801c6c0:	4605      	mov	r5, r0
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 801c6c2:	f001 fbde 	bl	801de82 <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 801c6c6:	2801      	cmp	r0, #1
 801c6c8:	d104      	bne.n	801c6d4 <lv_obj_set_x+0x1e>
 801c6ca:	9b01      	ldr	r3, [sp, #4]
 801c6cc:	42a3      	cmp	r3, r4
 801c6ce:	d103      	bne.n	801c6d8 <lv_obj_set_x+0x22>
}
 801c6d0:	b003      	add	sp, #12
 801c6d2:	bd30      	pop	{r4, r5, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 801c6d4:	2800      	cmp	r0, #0
 801c6d6:	d1fb      	bne.n	801c6d0 <lv_obj_set_x+0x1a>
        lv_obj_set_style_x(obj, x, 0);
 801c6d8:	2200      	movs	r2, #0
 801c6da:	4621      	mov	r1, r4
 801c6dc:	4628      	mov	r0, r5
 801c6de:	f001 fd5c 	bl	801e19a <lv_obj_set_style_x>
}
 801c6e2:	e7f5      	b.n	801c6d0 <lv_obj_set_x+0x1a>

0801c6e4 <lv_obj_set_y>:
{
 801c6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 801c6e6:	2300      	movs	r3, #0
{
 801c6e8:	460c      	mov	r4, r1
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 801c6ea:	aa01      	add	r2, sp, #4
 801c6ec:	2108      	movs	r1, #8
{
 801c6ee:	4605      	mov	r5, r0
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 801c6f0:	f001 fbc7 	bl	801de82 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 801c6f4:	2801      	cmp	r0, #1
 801c6f6:	d104      	bne.n	801c702 <lv_obj_set_y+0x1e>
 801c6f8:	9b01      	ldr	r3, [sp, #4]
 801c6fa:	42a3      	cmp	r3, r4
 801c6fc:	d103      	bne.n	801c706 <lv_obj_set_y+0x22>
}
 801c6fe:	b003      	add	sp, #12
 801c700:	bd30      	pop	{r4, r5, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 801c702:	2800      	cmp	r0, #0
 801c704:	d1fb      	bne.n	801c6fe <lv_obj_set_y+0x1a>
        lv_obj_set_style_y(obj, y, 0);
 801c706:	2200      	movs	r2, #0
 801c708:	4621      	mov	r1, r4
 801c70a:	4628      	mov	r0, r5
 801c70c:	f001 fd4a 	bl	801e1a4 <lv_obj_set_style_y>
}
 801c710:	e7f5      	b.n	801c6fe <lv_obj_set_y+0x1a>

0801c712 <lv_obj_set_pos>:
{
 801c712:	b538      	push	{r3, r4, r5, lr}
 801c714:	4604      	mov	r4, r0
 801c716:	4615      	mov	r5, r2
    lv_obj_set_x(obj, x);
 801c718:	f7ff ffcd 	bl	801c6b6 <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 801c71c:	4629      	mov	r1, r5
 801c71e:	4620      	mov	r0, r4
}
 801c720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_y(obj, y);
 801c724:	f7ff bfde 	b.w	801c6e4 <lv_obj_set_y>

0801c728 <lv_obj_set_width>:
{
 801c728:	b537      	push	{r0, r1, r2, r4, r5, lr}
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 801c72a:	2300      	movs	r3, #0
{
 801c72c:	460c      	mov	r4, r1
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 801c72e:	aa01      	add	r2, sp, #4
 801c730:	2101      	movs	r1, #1
{
 801c732:	4605      	mov	r5, r0
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 801c734:	f001 fba5 	bl	801de82 <lv_obj_get_local_style_prop>
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 801c738:	2801      	cmp	r0, #1
 801c73a:	d104      	bne.n	801c746 <lv_obj_set_width+0x1e>
 801c73c:	9b01      	ldr	r3, [sp, #4]
 801c73e:	42a3      	cmp	r3, r4
 801c740:	d103      	bne.n	801c74a <lv_obj_set_width+0x22>
}
 801c742:	b003      	add	sp, #12
 801c744:	bd30      	pop	{r4, r5, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 801c746:	2800      	cmp	r0, #0
 801c748:	d1fb      	bne.n	801c742 <lv_obj_set_width+0x1a>
        lv_obj_set_style_width(obj, w, 0);
 801c74a:	2200      	movs	r2, #0
 801c74c:	4621      	mov	r1, r4
 801c74e:	4628      	mov	r0, r5
 801c750:	f001 fd14 	bl	801e17c <lv_obj_set_style_width>
}
 801c754:	e7f5      	b.n	801c742 <lv_obj_set_width+0x1a>

0801c756 <lv_obj_set_height>:
{
 801c756:	b537      	push	{r0, r1, r2, r4, r5, lr}
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 801c758:	2300      	movs	r3, #0
{
 801c75a:	460c      	mov	r4, r1
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 801c75c:	aa01      	add	r2, sp, #4
 801c75e:	2104      	movs	r1, #4
{
 801c760:	4605      	mov	r5, r0
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 801c762:	f001 fb8e 	bl	801de82 <lv_obj_get_local_style_prop>
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 801c766:	2801      	cmp	r0, #1
 801c768:	d104      	bne.n	801c774 <lv_obj_set_height+0x1e>
 801c76a:	9b01      	ldr	r3, [sp, #4]
 801c76c:	42a3      	cmp	r3, r4
 801c76e:	d103      	bne.n	801c778 <lv_obj_set_height+0x22>
}
 801c770:	b003      	add	sp, #12
 801c772:	bd30      	pop	{r4, r5, pc}
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 801c774:	2800      	cmp	r0, #0
 801c776:	d1fb      	bne.n	801c770 <lv_obj_set_height+0x1a>
        lv_obj_set_style_height(obj, h, 0);
 801c778:	2200      	movs	r2, #0
 801c77a:	4621      	mov	r1, r4
 801c77c:	4628      	mov	r0, r5
 801c77e:	f001 fd07 	bl	801e190 <lv_obj_set_style_height>
}
 801c782:	e7f5      	b.n	801c770 <lv_obj_set_height+0x1a>

0801c784 <lv_obj_set_size>:
{
 801c784:	b538      	push	{r3, r4, r5, lr}
 801c786:	4604      	mov	r4, r0
 801c788:	4615      	mov	r5, r2
    lv_obj_set_width(obj, w);
 801c78a:	f7ff ffcd 	bl	801c728 <lv_obj_set_width>
    lv_obj_set_height(obj, h);
 801c78e:	4629      	mov	r1, r5
 801c790:	4620      	mov	r0, r4
}
 801c792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_height(obj, h);
 801c796:	f7ff bfde 	b.w	801c756 <lv_obj_set_height>

0801c79a <lv_obj_mark_layout_as_dirty>:
{
 801c79a:	b508      	push	{r3, lr}
    obj->layout_inv = 1;
 801c79c:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 801c7a0:	f042 0201 	orr.w	r2, r2, #1
 801c7a4:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    lv_obj_t * scr = lv_obj_get_screen(obj);
 801c7a8:	f001 fd1a 	bl	801e1e0 <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 801c7ac:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 801c7b0:	f042 0202 	orr.w	r2, r2, #2
 801c7b4:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    lv_disp_t * disp = lv_obj_get_disp(scr);
 801c7b8:	f7ea f88c 	bl	80068d4 <lv_obj_get_disp>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 801c7bc:	6840      	ldr	r0, [r0, #4]
 801c7be:	b118      	cbz	r0, 801c7c8 <lv_obj_mark_layout_as_dirty+0x2e>
}
 801c7c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 801c7c4:	f008 bca4 	b.w	8025110 <lv_timer_resume>
}
 801c7c8:	bd08      	pop	{r3, pc}

0801c7ca <lv_obj_set_layout>:
{
 801c7ca:	b510      	push	{r4, lr}
 801c7cc:	4604      	mov	r4, r0
    lv_obj_set_style_layout(obj, layout, 0);
 801c7ce:	2200      	movs	r2, #0
 801c7d0:	b289      	uxth	r1, r1
 801c7d2:	f001 fcfb 	bl	801e1cc <lv_obj_set_style_layout>
    lv_obj_mark_layout_as_dirty(obj);
 801c7d6:	4620      	mov	r0, r4
}
 801c7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_mark_layout_as_dirty(obj);
 801c7dc:	f7ff bfdd 	b.w	801c79a <lv_obj_mark_layout_as_dirty>

0801c7e0 <lv_obj_align>:
{
 801c7e0:	b570      	push	{r4, r5, r6, lr}
 801c7e2:	4604      	mov	r4, r0
 801c7e4:	4615      	mov	r5, r2
 801c7e6:	461e      	mov	r6, r3
    lv_obj_set_style_align(obj, align, 0);
 801c7e8:	2200      	movs	r2, #0
 801c7ea:	f001 fce0 	bl	801e1ae <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 801c7ee:	4629      	mov	r1, r5
 801c7f0:	4632      	mov	r2, r6
 801c7f2:	4620      	mov	r0, r4
}
 801c7f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 801c7f8:	f7ff bf8b 	b.w	801c712 <lv_obj_set_pos>

0801c7fc <lv_obj_get_coords>:
    dest->x1 = src->x1;
 801c7fc:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 801c800:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 801c802:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 801c806:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 801c808:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 801c80c:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 801c80e:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 801c812:	80cb      	strh	r3, [r1, #6]
}
 801c814:	4770      	bx	lr

0801c816 <lv_obj_get_x>:
{
 801c816:	b538      	push	{r3, r4, r5, lr}
 801c818:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801c81a:	f001 fce9 	bl	801e1f0 <lv_obj_get_parent>
    if(parent) {
 801c81e:	4605      	mov	r5, r0
 801c820:	b190      	cbz	r0, 801c848 <lv_obj_get_x+0x32>
        rel_x  = obj->coords.x1 - parent->coords.x1;
 801c822:	8a83      	ldrh	r3, [r0, #20]
 801c824:	8aa4      	ldrh	r4, [r4, #20]
 801c826:	1ae4      	subs	r4, r4, r3
        rel_x += lv_obj_get_scroll_x(parent);
 801c828:	f000 fbcb 	bl	801cfc2 <lv_obj_get_scroll_x>
        rel_x  = obj->coords.x1 - parent->coords.x1;
 801c82c:	b2a4      	uxth	r4, r4
        rel_x += lv_obj_get_scroll_x(parent);
 801c82e:	4404      	add	r4, r0
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 801c830:	4628      	mov	r0, r5
 801c832:	f7ff feac 	bl	801c58e <lv_obj_get_style_pad_left.constprop.0>
        rel_x += lv_obj_get_scroll_x(parent);
 801c836:	b2a4      	uxth	r4, r4
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 801c838:	1a24      	subs	r4, r4, r0
        rel_x -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 801c83a:	4628      	mov	r0, r5
 801c83c:	f7ff fe99 	bl	801c572 <lv_obj_get_style_border_width.constprop.0>
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 801c840:	b2a4      	uxth	r4, r4
        rel_x -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 801c842:	1a20      	subs	r0, r4, r0
 801c844:	b200      	sxth	r0, r0
}
 801c846:	bd38      	pop	{r3, r4, r5, pc}
        rel_x = obj->coords.x1;
 801c848:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801c84c:	e7fb      	b.n	801c846 <lv_obj_get_x+0x30>

0801c84e <lv_obj_get_y>:
{
 801c84e:	b538      	push	{r3, r4, r5, lr}
 801c850:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801c852:	f001 fccd 	bl	801e1f0 <lv_obj_get_parent>
    if(parent) {
 801c856:	4605      	mov	r5, r0
 801c858:	b190      	cbz	r0, 801c880 <lv_obj_get_y+0x32>
        rel_y = obj->coords.y1 - parent->coords.y1;
 801c85a:	8ac3      	ldrh	r3, [r0, #22]
 801c85c:	8ae4      	ldrh	r4, [r4, #22]
 801c85e:	1ae4      	subs	r4, r4, r3
        rel_y += lv_obj_get_scroll_y(parent);
 801c860:	f000 fbb5 	bl	801cfce <lv_obj_get_scroll_y>
        rel_y = obj->coords.y1 - parent->coords.y1;
 801c864:	b2a4      	uxth	r4, r4
        rel_y += lv_obj_get_scroll_y(parent);
 801c866:	4404      	add	r4, r0
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 801c868:	4628      	mov	r0, r5
 801c86a:	f7ff fe9e 	bl	801c5aa <lv_obj_get_style_pad_top.constprop.0>
        rel_y += lv_obj_get_scroll_y(parent);
 801c86e:	b2a4      	uxth	r4, r4
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 801c870:	1a24      	subs	r4, r4, r0
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 801c872:	4628      	mov	r0, r5
 801c874:	f7ff fe7d 	bl	801c572 <lv_obj_get_style_border_width.constprop.0>
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 801c878:	b2a4      	uxth	r4, r4
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 801c87a:	1a20      	subs	r0, r4, r0
 801c87c:	b200      	sxth	r0, r0
}
 801c87e:	bd38      	pop	{r3, r4, r5, pc}
        rel_y = obj->coords.y1;
 801c880:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 801c884:	e7fb      	b.n	801c87e <lv_obj_get_y+0x30>

0801c886 <lv_obj_get_y2>:
{
 801c886:	b510      	push	{r4, lr}
 801c888:	4604      	mov	r4, r0
    return lv_obj_get_y(obj) + lv_obj_get_height(obj);
 801c88a:	f7ff ffe0 	bl	801c84e <lv_obj_get_y>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801c88e:	8b63      	ldrh	r3, [r4, #26]
 801c890:	8ae2      	ldrh	r2, [r4, #22]
 801c892:	3301      	adds	r3, #1
 801c894:	1a9b      	subs	r3, r3, r2
 801c896:	4418      	add	r0, r3
}
 801c898:	b200      	sxth	r0, r0
 801c89a:	bd10      	pop	{r4, pc}

0801c89c <lv_obj_get_width>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801c89c:	8b03      	ldrh	r3, [r0, #24]
 801c89e:	8a82      	ldrh	r2, [r0, #20]
 801c8a0:	3301      	adds	r3, #1
 801c8a2:	1a98      	subs	r0, r3, r2
}
 801c8a4:	b200      	sxth	r0, r0
 801c8a6:	4770      	bx	lr

0801c8a8 <lv_obj_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801c8a8:	8b43      	ldrh	r3, [r0, #26]
 801c8aa:	8ac2      	ldrh	r2, [r0, #22]
 801c8ac:	3301      	adds	r3, #1
 801c8ae:	1a98      	subs	r0, r3, r2
}
 801c8b0:	b200      	sxth	r0, r0
 801c8b2:	4770      	bx	lr

0801c8b4 <lv_obj_get_content_width>:
{
 801c8b4:	b570      	push	{r4, r5, r6, lr}
 801c8b6:	4604      	mov	r4, r0
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801c8b8:	f7ff fe69 	bl	801c58e <lv_obj_get_style_pad_left.constprop.0>
 801c8bc:	4606      	mov	r6, r0
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801c8be:	4620      	mov	r0, r4
 801c8c0:	f7ff fe5e 	bl	801c580 <lv_obj_get_style_pad_right.constprop.0>
 801c8c4:	4605      	mov	r5, r0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 801c8c6:	4620      	mov	r0, r4
 801c8c8:	f7ff fe53 	bl	801c572 <lv_obj_get_style_border_width.constprop.0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801c8cc:	8b23      	ldrh	r3, [r4, #24]
 801c8ce:	8aa2      	ldrh	r2, [r4, #20]
 801c8d0:	3301      	adds	r3, #1
 801c8d2:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 801c8d4:	1b9b      	subs	r3, r3, r6
 801c8d6:	1b5b      	subs	r3, r3, r5
 801c8d8:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
}
 801c8dc:	b200      	sxth	r0, r0
 801c8de:	bd70      	pop	{r4, r5, r6, pc}

0801c8e0 <lv_obj_get_content_height>:
{
 801c8e0:	b570      	push	{r4, r5, r6, lr}
 801c8e2:	4604      	mov	r4, r0
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801c8e4:	f7ff fe61 	bl	801c5aa <lv_obj_get_style_pad_top.constprop.0>
 801c8e8:	4606      	mov	r6, r0
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 801c8ea:	4620      	mov	r0, r4
 801c8ec:	f7ff fe56 	bl	801c59c <lv_obj_get_style_pad_bottom.constprop.0>
 801c8f0:	4605      	mov	r5, r0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 801c8f2:	4620      	mov	r0, r4
 801c8f4:	f7ff fe3d 	bl	801c572 <lv_obj_get_style_border_width.constprop.0>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801c8f8:	8b63      	ldrh	r3, [r4, #26]
 801c8fa:	8ae2      	ldrh	r2, [r4, #22]
 801c8fc:	3301      	adds	r3, #1
 801c8fe:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 801c900:	1b9b      	subs	r3, r3, r6
 801c902:	1b5b      	subs	r3, r3, r5
 801c904:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
}
 801c908:	b200      	sxth	r0, r0
 801c90a:	bd70      	pop	{r4, r5, r6, pc}

0801c90c <lv_obj_get_content_coords>:
{
 801c90c:	b538      	push	{r3, r4, r5, lr}
 801c90e:	4605      	mov	r5, r0
 801c910:	460c      	mov	r4, r1
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 801c912:	f7ff fe2e 	bl	801c572 <lv_obj_get_style_border_width.constprop.0>
    lv_area_increase(area, -border_width, -border_width);
 801c916:	4242      	negs	r2, r0
    dest->x1 = src->x1;
 801c918:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 801c91c:	4620      	mov	r0, r4
 801c91e:	b212      	sxth	r2, r2
 801c920:	8023      	strh	r3, [r4, #0]
    dest->y1 = src->y1;
 801c922:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 801c926:	4611      	mov	r1, r2
 801c928:	8063      	strh	r3, [r4, #2]
    dest->x2 = src->x2;
 801c92a:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 801c92e:	80a3      	strh	r3, [r4, #4]
    dest->y2 = src->y2;
 801c930:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 801c934:	80e3      	strh	r3, [r4, #6]
 801c936:	f007 fcb0 	bl	802429a <lv_area_increase>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801c93a:	4628      	mov	r0, r5
 801c93c:	f7ff fe27 	bl	801c58e <lv_obj_get_style_pad_left.constprop.0>
 801c940:	8823      	ldrh	r3, [r4, #0]
 801c942:	4418      	add	r0, r3
 801c944:	8020      	strh	r0, [r4, #0]
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801c946:	4628      	mov	r0, r5
 801c948:	f7ff fe1a 	bl	801c580 <lv_obj_get_style_pad_right.constprop.0>
 801c94c:	88a3      	ldrh	r3, [r4, #4]
 801c94e:	1a1b      	subs	r3, r3, r0
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801c950:	4628      	mov	r0, r5
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801c952:	80a3      	strh	r3, [r4, #4]
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801c954:	f7ff fe29 	bl	801c5aa <lv_obj_get_style_pad_top.constprop.0>
 801c958:	8863      	ldrh	r3, [r4, #2]
 801c95a:	4418      	add	r0, r3
 801c95c:	8060      	strh	r0, [r4, #2]
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 801c95e:	4628      	mov	r0, r5
 801c960:	f7ff fe1c 	bl	801c59c <lv_obj_get_style_pad_bottom.constprop.0>
 801c964:	88e3      	ldrh	r3, [r4, #6]
 801c966:	1a1b      	subs	r3, r3, r0
 801c968:	80e3      	strh	r3, [r4, #6]
}
 801c96a:	bd38      	pop	{r3, r4, r5, pc}

0801c96c <lv_obj_get_self_height>:
    lv_point_t p = {LV_COORD_MIN, 0};
 801c96c:	f24e 0301 	movw	r3, #57345	; 0xe001
{
 801c970:	b507      	push	{r0, r1, r2, lr}
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 801c972:	212c      	movs	r1, #44	; 0x2c
 801c974:	aa01      	add	r2, sp, #4
    lv_point_t p = {LV_COORD_MIN, 0};
 801c976:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 801c978:	f7e7 fee4 	bl	8004744 <lv_event_send>
}
 801c97c:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 801c980:	b003      	add	sp, #12
 801c982:	f85d fb04 	ldr.w	pc, [sp], #4

0801c986 <lv_obj_refresh_self_size>:
{
 801c986:	b538      	push	{r3, r4, r5, lr}
 801c988:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801c98a:	2201      	movs	r2, #1
 801c98c:	2100      	movs	r1, #0
 801c98e:	f001 f8ab 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801c992:	2204      	movs	r2, #4
    return (lv_coord_t)v.num;
 801c994:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801c996:	2100      	movs	r1, #0
 801c998:	4620      	mov	r0, r4
 801c99a:	f001 f8a5 	bl	801dae8 <lv_obj_get_style_prop>
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 801c99e:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 801c9a2:	b200      	sxth	r0, r0
 801c9a4:	429d      	cmp	r5, r3
 801c9a6:	d001      	beq.n	801c9ac <lv_obj_refresh_self_size+0x26>
 801c9a8:	4298      	cmp	r0, r3
 801c9aa:	d104      	bne.n	801c9b6 <lv_obj_refresh_self_size+0x30>
    lv_obj_mark_layout_as_dirty(obj);
 801c9ac:	4620      	mov	r0, r4
 801c9ae:	f7ff fef4 	bl	801c79a <lv_obj_mark_layout_as_dirty>
    return true;
 801c9b2:	2001      	movs	r0, #1
}
 801c9b4:	bd38      	pop	{r3, r4, r5, pc}
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 801c9b6:	2000      	movs	r0, #0
 801c9b8:	e7fc      	b.n	801c9b4 <lv_obj_refresh_self_size+0x2e>

0801c9ba <lv_obj_move_children_by>:
{
 801c9ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9be:	460e      	mov	r6, r1
 801c9c0:	4617      	mov	r7, r2
 801c9c2:	4680      	mov	r8, r0
 801c9c4:	9301      	str	r3, [sp, #4]
    for(i = 0; i < child_cnt; i++) {
 801c9c6:	2500      	movs	r5, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801c9c8:	f001 fc24 	bl	801e214 <lv_obj_get_child_cnt>
        child->coords.x1 += x_diff;
 801c9cc:	fa1f fa86 	uxth.w	sl, r6
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801c9d0:	4681      	mov	r9, r0
        child->coords.y1 += y_diff;
 801c9d2:	fa1f fb87 	uxth.w	fp, r7
    for(i = 0; i < child_cnt; i++) {
 801c9d6:	454d      	cmp	r5, r9
 801c9d8:	d102      	bne.n	801c9e0 <lv_obj_move_children_by+0x26>
}
 801c9da:	b003      	add	sp, #12
 801c9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_t * child = obj->spec_attr->children[i];
 801c9e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 801c9ea:	9b01      	ldr	r3, [sp, #4]
 801c9ec:	b99b      	cbnz	r3, 801ca16 <lv_obj_move_children_by+0x5c>
        child->coords.x1 += x_diff;
 801c9ee:	8aa3      	ldrh	r3, [r4, #20]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 801c9f0:	463a      	mov	r2, r7
 801c9f2:	4631      	mov	r1, r6
 801c9f4:	4620      	mov	r0, r4
        child->coords.x1 += x_diff;
 801c9f6:	4453      	add	r3, sl
 801c9f8:	82a3      	strh	r3, [r4, #20]
        child->coords.y1 += y_diff;
 801c9fa:	8ae3      	ldrh	r3, [r4, #22]
 801c9fc:	445b      	add	r3, fp
 801c9fe:	82e3      	strh	r3, [r4, #22]
        child->coords.x2 += x_diff;
 801ca00:	8b23      	ldrh	r3, [r4, #24]
 801ca02:	4453      	add	r3, sl
 801ca04:	8323      	strh	r3, [r4, #24]
        child->coords.y2 += y_diff;
 801ca06:	8b63      	ldrh	r3, [r4, #26]
 801ca08:	445b      	add	r3, fp
 801ca0a:	8363      	strh	r3, [r4, #26]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 801ca0c:	2300      	movs	r3, #0
 801ca0e:	f7ff ffd4 	bl	801c9ba <lv_obj_move_children_by>
    for(i = 0; i < child_cnt; i++) {
 801ca12:	3501      	adds	r5, #1
 801ca14:	e7df      	b.n	801c9d6 <lv_obj_move_children_by+0x1c>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 801ca16:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801ca1a:	4620      	mov	r0, r4
 801ca1c:	f7ff f82a 	bl	801ba74 <lv_obj_has_flag>
 801ca20:	2800      	cmp	r0, #0
 801ca22:	d0e4      	beq.n	801c9ee <lv_obj_move_children_by+0x34>
 801ca24:	e7f5      	b.n	801ca12 <lv_obj_move_children_by+0x58>

0801ca26 <lv_obj_transform_point>:
{
 801ca26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca2a:	4604      	mov	r4, r0
 801ca2c:	460d      	mov	r5, r1
 801ca2e:	4616      	mov	r6, r2
 801ca30:	461f      	mov	r7, r3
    if(obj) {
 801ca32:	b324      	cbz	r4, 801ca7e <lv_obj_transform_point+0x58>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 801ca34:	4620      	mov	r0, r4
 801ca36:	f7ff fd90 	bl	801c55a <_lv_obj_get_layer_type>
 801ca3a:	4680      	mov	r8, r0
        if(inv) {
 801ca3c:	b197      	cbz	r7, 801ca64 <lv_obj_transform_point+0x3e>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 801ca3e:	b13e      	cbz	r6, 801ca50 <lv_obj_transform_point+0x2a>
 801ca40:	4620      	mov	r0, r4
 801ca42:	f001 fbd5 	bl	801e1f0 <lv_obj_get_parent>
 801ca46:	2301      	movs	r3, #1
 801ca48:	4629      	mov	r1, r5
 801ca4a:	461a      	mov	r2, r3
 801ca4c:	f7ff ffeb 	bl	801ca26 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 801ca50:	f1b8 0f02 	cmp.w	r8, #2
 801ca54:	d113      	bne.n	801ca7e <lv_obj_transform_point+0x58>
 801ca56:	4629      	mov	r1, r5
 801ca58:	4620      	mov	r0, r4
 801ca5a:	2201      	movs	r2, #1
}
 801ca5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            if(do_tranf) transform_point(obj, p, inv);
 801ca60:	f7ff bdaa 	b.w	801c5b8 <transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 801ca64:	2802      	cmp	r0, #2
 801ca66:	d104      	bne.n	801ca72 <lv_obj_transform_point+0x4c>
 801ca68:	463a      	mov	r2, r7
 801ca6a:	4629      	mov	r1, r5
 801ca6c:	4620      	mov	r0, r4
 801ca6e:	f7ff fda3 	bl	801c5b8 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 801ca72:	b126      	cbz	r6, 801ca7e <lv_obj_transform_point+0x58>
 801ca74:	4620      	mov	r0, r4
 801ca76:	f001 fbbb 	bl	801e1f0 <lv_obj_get_parent>
 801ca7a:	4604      	mov	r4, r0
 801ca7c:	e7d9      	b.n	801ca32 <lv_obj_transform_point+0xc>
}
 801ca7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ca82 <lv_obj_get_transformed_area>:
{
 801ca82:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca84:	460c      	mov	r4, r1
 801ca86:	b085      	sub	sp, #20
        {area->x1, area->y1},
 801ca88:	f9b1 1000 	ldrsh.w	r1, [r1]
{
 801ca8c:	4605      	mov	r5, r0
        {area->x1, area->y1},
 801ca8e:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
{
 801ca92:	4616      	mov	r6, r2
    lv_point_t p[4] = {
 801ca94:	f8ad 1000 	strh.w	r1, [sp]
{
 801ca98:	461f      	mov	r7, r3
    lv_point_t p[4] = {
 801ca9a:	f8ad 1004 	strh.w	r1, [sp, #4]
        {area->x1, area->y2},
 801ca9e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
        {area->x2, area->y1},
 801caa2:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
    lv_point_t p[4] = {
 801caa6:	f8ad 1006 	strh.w	r1, [sp, #6]
 801caaa:	f8ad 100e 	strh.w	r1, [sp, #14]
    lv_obj_transform_point(obj, &p[0], recursive, inv);
 801caae:	4669      	mov	r1, sp
    lv_point_t p[4] = {
 801cab0:	f8ad e002 	strh.w	lr, [sp, #2]
 801cab4:	f8ad c008 	strh.w	ip, [sp, #8]
 801cab8:	f8ad e00a 	strh.w	lr, [sp, #10]
 801cabc:	f8ad c00c 	strh.w	ip, [sp, #12]
    lv_obj_transform_point(obj, &p[0], recursive, inv);
 801cac0:	f7ff ffb1 	bl	801ca26 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 801cac4:	463b      	mov	r3, r7
 801cac6:	4632      	mov	r2, r6
 801cac8:	a901      	add	r1, sp, #4
 801caca:	4628      	mov	r0, r5
 801cacc:	f7ff ffab 	bl	801ca26 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 801cad0:	463b      	mov	r3, r7
 801cad2:	4632      	mov	r2, r6
 801cad4:	a902      	add	r1, sp, #8
 801cad6:	4628      	mov	r0, r5
 801cad8:	f7ff ffa5 	bl	801ca26 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 801cadc:	463b      	mov	r3, r7
 801cade:	4632      	mov	r2, r6
 801cae0:	a903      	add	r1, sp, #12
 801cae2:	4628      	mov	r0, r5
 801cae4:	f7ff ff9f 	bl	801ca26 <lv_obj_transform_point>
    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 801cae8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801caec:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
 801caf0:	461a      	mov	r2, r3
 801caf2:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801caf6:	42ab      	cmp	r3, r5
 801caf8:	f9bd 1000 	ldrsh.w	r1, [sp]
 801cafc:	bfa8      	it	ge
 801cafe:	462a      	movge	r2, r5
 801cb00:	4282      	cmp	r2, r0
 801cb02:	bfa8      	it	ge
 801cb04:	4602      	movge	r2, r0
 801cb06:	428a      	cmp	r2, r1
 801cb08:	bfa8      	it	ge
 801cb0a:	460a      	movge	r2, r1
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 801cb0c:	42ab      	cmp	r3, r5
 801cb0e:	bfb8      	it	lt
 801cb10:	462b      	movlt	r3, r5
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cb12:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 801cb16:	8022      	strh	r2, [r4, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 801cb18:	4283      	cmp	r3, r0
 801cb1a:	bfb8      	it	lt
 801cb1c:	4603      	movlt	r3, r0
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cb1e:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 801cb22:	428b      	cmp	r3, r1
 801cb24:	bfb8      	it	lt
 801cb26:	460b      	movlt	r3, r1
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cb28:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 801cb2c:	80a3      	strh	r3, [r4, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cb2e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801cb32:	42ab      	cmp	r3, r5
 801cb34:	461a      	mov	r2, r3
 801cb36:	bfa8      	it	ge
 801cb38:	462a      	movge	r2, r5
 801cb3a:	4282      	cmp	r2, r0
 801cb3c:	bfa8      	it	ge
 801cb3e:	4602      	movge	r2, r0
 801cb40:	428a      	cmp	r2, r1
 801cb42:	bfa8      	it	ge
 801cb44:	460a      	movge	r2, r1
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cb46:	42ab      	cmp	r3, r5
 801cb48:	bfb8      	it	lt
 801cb4a:	462b      	movlt	r3, r5
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cb4c:	8062      	strh	r2, [r4, #2]
    lv_area_increase(area, 5, 5);
 801cb4e:	2205      	movs	r2, #5
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cb50:	4283      	cmp	r3, r0
 801cb52:	bfb8      	it	lt
 801cb54:	4603      	movlt	r3, r0
    lv_area_increase(area, 5, 5);
 801cb56:	4620      	mov	r0, r4
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cb58:	428b      	cmp	r3, r1
 801cb5a:	bfb8      	it	lt
 801cb5c:	460b      	movlt	r3, r1
    lv_area_increase(area, 5, 5);
 801cb5e:	4611      	mov	r1, r2
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cb60:	80e3      	strh	r3, [r4, #6]
    lv_area_increase(area, 5, 5);
 801cb62:	f007 fb9a 	bl	802429a <lv_area_increase>
}
 801cb66:	b005      	add	sp, #20
 801cb68:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cb6a <lv_obj_area_is_visible>:
{
 801cb6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cb6c:	460d      	mov	r5, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 801cb6e:	2101      	movs	r1, #1
{
 801cb70:	4604      	mov	r4, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 801cb72:	f7fe ff7f 	bl	801ba74 <lv_obj_has_flag>
 801cb76:	2800      	cmp	r0, #0
 801cb78:	d14a      	bne.n	801cc10 <lv_obj_area_is_visible+0xa6>
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 801cb7a:	4620      	mov	r0, r4
 801cb7c:	f001 fb30 	bl	801e1e0 <lv_obj_get_screen>
 801cb80:	4606      	mov	r6, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 801cb82:	f7e9 fea7 	bl	80068d4 <lv_obj_get_disp>
 801cb86:	4607      	mov	r7, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 801cb88:	f7fe fb16 	bl	801b1b8 <lv_disp_get_scr_act>
 801cb8c:	4286      	cmp	r6, r0
 801cb8e:	d130      	bne.n	801cbf2 <lv_obj_area_is_visible+0x88>
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 801cb90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801cb94:	4620      	mov	r0, r4
 801cb96:	f7fe ff73 	bl	801ba80 <lv_obj_has_flag_any>
 801cb9a:	b9e0      	cbnz	r0, 801cbd6 <lv_obj_area_is_visible+0x6c>
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 801cb9c:	4620      	mov	r0, r4
 801cb9e:	f7ff fcaa 	bl	801c4f6 <_lv_obj_get_ext_draw_size>
    dest->y1 = src->y1;
 801cba2:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
        obj_coords.x1 -= ext_size;
 801cba6:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 801cba8:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    dest->y2 = src->y2;
 801cbac:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
 801cbb0:	8aa1      	ldrh	r1, [r4, #20]
        obj_coords.y1 -= ext_size;
 801cbb2:	1a12      	subs	r2, r2, r0
        obj_coords.x2 += ext_size;
 801cbb4:	4403      	add	r3, r0
        obj_coords.x1 -= ext_size;
 801cbb6:	1a09      	subs	r1, r1, r0
        obj_coords.y2 += ext_size;
 801cbb8:	4430      	add	r0, r6
        obj_coords.y1 -= ext_size;
 801cbba:	f8ad 2002 	strh.w	r2, [sp, #2]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 801cbbe:	466a      	mov	r2, sp
        obj_coords.x1 -= ext_size;
 801cbc0:	f8ad 1000 	strh.w	r1, [sp]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 801cbc4:	4629      	mov	r1, r5
        obj_coords.y2 += ext_size;
 801cbc6:	f8ad 0006 	strh.w	r0, [sp, #6]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 801cbca:	4628      	mov	r0, r5
        obj_coords.x2 += ext_size;
 801cbcc:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 801cbd0:	f007 fb83 	bl	80242da <_lv_area_intersect>
 801cbd4:	b1e0      	cbz	r0, 801cc10 <lv_obj_area_is_visible+0xa6>
    lv_obj_get_transformed_area(obj, area, true, false);
 801cbd6:	4620      	mov	r0, r4
 801cbd8:	2300      	movs	r3, #0
 801cbda:	2201      	movs	r2, #1
 801cbdc:	4629      	mov	r1, r5
 801cbde:	f7ff ff50 	bl	801ca82 <lv_obj_get_transformed_area>
    lv_obj_t * par = lv_obj_get_parent(obj);
 801cbe2:	4620      	mov	r0, r4
 801cbe4:	f001 fb04 	bl	801e1f0 <lv_obj_get_parent>
            lv_area_t par_area = par->coords;
 801cbe8:	466e      	mov	r6, sp
    lv_obj_t * par = lv_obj_get_parent(obj);
 801cbea:	4604      	mov	r4, r0
    while(par != NULL) {
 801cbec:	b99c      	cbnz	r4, 801cc16 <lv_obj_area_is_visible+0xac>
    return true;
 801cbee:	2001      	movs	r0, #1
 801cbf0:	e00f      	b.n	801cc12 <lv_obj_area_is_visible+0xa8>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 801cbf2:	4638      	mov	r0, r7
 801cbf4:	f7fe fae7 	bl	801b1c6 <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 801cbf8:	4286      	cmp	r6, r0
 801cbfa:	d0c9      	beq.n	801cb90 <lv_obj_area_is_visible+0x26>
       obj_scr != lv_disp_get_layer_top(disp) &&
 801cbfc:	4638      	mov	r0, r7
 801cbfe:	f7fe fae9 	bl	801b1d4 <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 801cc02:	4286      	cmp	r6, r0
 801cc04:	d0c4      	beq.n	801cb90 <lv_obj_area_is_visible+0x26>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 801cc06:	4638      	mov	r0, r7
 801cc08:	f7fe faeb 	bl	801b1e2 <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 801cc0c:	4286      	cmp	r6, r0
 801cc0e:	d0bf      	beq.n	801cb90 <lv_obj_area_is_visible+0x26>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 801cc10:	2000      	movs	r0, #0
}
 801cc12:	b003      	add	sp, #12
 801cc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 801cc16:	2101      	movs	r1, #1
 801cc18:	4620      	mov	r0, r4
 801cc1a:	f7fe ff2b 	bl	801ba74 <lv_obj_has_flag>
 801cc1e:	2800      	cmp	r0, #0
 801cc20:	d1f6      	bne.n	801cc10 <lv_obj_area_is_visible+0xa6>
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 801cc22:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801cc26:	4620      	mov	r0, r4
 801cc28:	f7fe ff2a 	bl	801ba80 <lv_obj_has_flag_any>
 801cc2c:	4603      	mov	r3, r0
 801cc2e:	b978      	cbnz	r0, 801cc50 <lv_obj_area_is_visible+0xe6>
            lv_obj_get_transformed_area(par, &par_area, true, false);
 801cc30:	2201      	movs	r2, #1
            lv_area_t par_area = par->coords;
 801cc32:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
 801cc36:	e886 0003 	stmia.w	r6, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 801cc3a:	4631      	mov	r1, r6
 801cc3c:	4620      	mov	r0, r4
 801cc3e:	f7ff ff20 	bl	801ca82 <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 801cc42:	4632      	mov	r2, r6
 801cc44:	4629      	mov	r1, r5
 801cc46:	4628      	mov	r0, r5
 801cc48:	f007 fb47 	bl	80242da <_lv_area_intersect>
 801cc4c:	2800      	cmp	r0, #0
 801cc4e:	d0df      	beq.n	801cc10 <lv_obj_area_is_visible+0xa6>
        par = lv_obj_get_parent(par);
 801cc50:	4620      	mov	r0, r4
 801cc52:	f001 facd 	bl	801e1f0 <lv_obj_get_parent>
 801cc56:	4604      	mov	r4, r0
 801cc58:	e7c8      	b.n	801cbec <lv_obj_area_is_visible+0x82>

0801cc5a <lv_obj_invalidate_area>:
{
 801cc5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cc5c:	460c      	mov	r4, r1
 801cc5e:	4605      	mov	r5, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj);
 801cc60:	f7e9 fe38 	bl	80068d4 <lv_obj_get_disp>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 801cc64:	f7fe faca 	bl	801b1fc <lv_disp_is_invalidation_enabled>
 801cc68:	b1b0      	cbz	r0, 801cc98 <lv_obj_invalidate_area+0x3e>
    dest->x1 = src->x1;
 801cc6a:	8823      	ldrh	r3, [r4, #0]
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 801cc6c:	4669      	mov	r1, sp
 801cc6e:	4628      	mov	r0, r5
 801cc70:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 801cc74:	8863      	ldrh	r3, [r4, #2]
 801cc76:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 801cc7a:	88a3      	ldrh	r3, [r4, #4]
 801cc7c:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 801cc80:	88e3      	ldrh	r3, [r4, #6]
 801cc82:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cc86:	f7ff ff70 	bl	801cb6a <lv_obj_area_is_visible>
 801cc8a:	b128      	cbz	r0, 801cc98 <lv_obj_invalidate_area+0x3e>
    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 801cc8c:	4628      	mov	r0, r5
 801cc8e:	f7e9 fe21 	bl	80068d4 <lv_obj_get_disp>
 801cc92:	4669      	mov	r1, sp
 801cc94:	f001 fd07 	bl	801e6a6 <_lv_inv_area>
}
 801cc98:	b003      	add	sp, #12
 801cc9a:	bd30      	pop	{r4, r5, pc}

0801cc9c <lv_obj_invalidate>:
{
 801cc9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cc9e:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 801cca0:	f7ff fc29 	bl	801c4f6 <_lv_obj_get_ext_draw_size>
    obj_coords.x1 -= ext_size;
 801cca4:	b283      	uxth	r3, r0
    dest->y1 = src->y1;
 801cca6:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801ccaa:	8aa0      	ldrh	r0, [r4, #20]
    dest->x2 = src->x2;
 801ccac:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    obj_coords.y1 -= ext_size;
 801ccb0:	1ac9      	subs	r1, r1, r3
    dest->y2 = src->y2;
 801ccb2:	f9b4 501a 	ldrsh.w	r5, [r4, #26]
    obj_coords.x1 -= ext_size;
 801ccb6:	1ac0      	subs	r0, r0, r3
    obj_coords.x2 += ext_size;
 801ccb8:	441a      	add	r2, r3
    obj_coords.y1 -= ext_size;
 801ccba:	f8ad 1002 	strh.w	r1, [sp, #2]
    obj_coords.y2 += ext_size;
 801ccbe:	442b      	add	r3, r5
    obj_coords.x1 -= ext_size;
 801ccc0:	f8ad 0000 	strh.w	r0, [sp]
    lv_obj_invalidate_area(obj, &obj_coords);
 801ccc4:	4669      	mov	r1, sp
 801ccc6:	4620      	mov	r0, r4
    obj_coords.x2 += ext_size;
 801ccc8:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 801cccc:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 801ccd0:	f7ff ffc3 	bl	801cc5a <lv_obj_invalidate_area>
}
 801ccd4:	b003      	add	sp, #12
 801ccd6:	bd30      	pop	{r4, r5, pc}

0801ccd8 <lv_obj_move_to>:
{
 801ccd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t * parent = obj->parent;
 801ccdc:	6846      	ldr	r6, [r0, #4]
{
 801ccde:	4604      	mov	r4, r0
    if(parent) {
 801cce0:	b316      	cbz	r6, 801cd28 <lv_obj_move_to+0x50>
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 801cce2:	4630      	mov	r0, r6
            x += pad_left + parent->coords.x1;
 801cce4:	b28d      	uxth	r5, r1
            y += pad_top + parent->coords.y1;
 801cce6:	b297      	uxth	r7, r2
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 801cce8:	f7ff fc51 	bl	801c58e <lv_obj_get_style_pad_left.constprop.0>
 801ccec:	4682      	mov	sl, r0
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 801ccee:	4630      	mov	r0, r6
 801ccf0:	f7ff fc5b 	bl	801c5aa <lv_obj_get_style_pad_top.constprop.0>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 801ccf4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 801ccf8:	4681      	mov	r9, r0
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 801ccfa:	4620      	mov	r0, r4
 801ccfc:	f7fe feba 	bl	801ba74 <lv_obj_has_flag>
 801cd00:	2800      	cmp	r0, #0
 801cd02:	d059      	beq.n	801cdb8 <lv_obj_move_to+0xe0>
            x += pad_left + parent->coords.x1;
 801cd04:	8ab3      	ldrh	r3, [r6, #20]
 801cd06:	442b      	add	r3, r5
 801cd08:	eb03 000a 	add.w	r0, r3, sl
            y += pad_top + parent->coords.y1;
 801cd0c:	8af3      	ldrh	r3, [r6, #22]
 801cd0e:	443b      	add	r3, r7
            x += pad_left + parent->coords.x1;
 801cd10:	b205      	sxth	r5, r0
            y += pad_top + parent->coords.y1;
 801cd12:	444b      	add	r3, r9
 801cd14:	b21f      	sxth	r7, r3
        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 801cd16:	4630      	mov	r0, r6
 801cd18:	f7ff fc2b 	bl	801c572 <lv_obj_get_style_border_width.constprop.0>
        x += border_width;
 801cd1c:	fa15 f180 	uxtah	r1, r5, r0
        y += border_width;
 801cd20:	fa17 f280 	uxtah	r2, r7, r0
        x += border_width;
 801cd24:	b209      	sxth	r1, r1
        y += border_width;
 801cd26:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
 801cd28:	8aa3      	ldrh	r3, [r4, #20]
 801cd2a:	1ac9      	subs	r1, r1, r3
    diff.y = y - obj->coords.y1;
 801cd2c:	8ae3      	ldrh	r3, [r4, #22]
 801cd2e:	1ad2      	subs	r2, r2, r3
    diff.x = x - obj->coords.x1;
 801cd30:	fa1f f881 	uxth.w	r8, r1
 801cd34:	b20d      	sxth	r5, r1
    diff.y = y - obj->coords.y1;
 801cd36:	fa1f fa82 	uxth.w	sl, r2
 801cd3a:	b217      	sxth	r7, r2
    if(diff.x == 0 && diff.y == 0) return;
 801cd3c:	ea58 030a 	orrs.w	r3, r8, sl
 801cd40:	d037      	beq.n	801cdb2 <lv_obj_move_to+0xda>
    lv_obj_invalidate(obj);
 801cd42:	4620      	mov	r0, r4
 801cd44:	f7ff ffaa 	bl	801cc9c <lv_obj_invalidate>
    dest->x1 = src->x1;
 801cd48:	8aa3      	ldrh	r3, [r4, #20]
 801cd4a:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 801cd4e:	8ae3      	ldrh	r3, [r4, #22]
 801cd50:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 801cd54:	8b23      	ldrh	r3, [r4, #24]
 801cd56:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 801cd5a:	8b63      	ldrh	r3, [r4, #26]
 801cd5c:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(parent) {
 801cd60:	b16e      	cbz	r6, 801cd7e <lv_obj_move_to+0xa6>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 801cd62:	a902      	add	r1, sp, #8
 801cd64:	4630      	mov	r0, r6
 801cd66:	f7ff fdd1 	bl	801c90c <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 801cd6a:	2200      	movs	r2, #0
 801cd6c:	a902      	add	r1, sp, #8
 801cd6e:	4668      	mov	r0, sp
 801cd70:	f007 fbb2 	bl	80244d8 <_lv_area_is_in>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 801cd74:	4681      	mov	r9, r0
 801cd76:	b920      	cbnz	r0, 801cd82 <lv_obj_move_to+0xaa>
 801cd78:	4630      	mov	r0, r6
 801cd7a:	f000 fd87 	bl	801d88c <lv_obj_scrollbar_invalidate>
    bool on1 = false;
 801cd7e:	f04f 0900 	mov.w	r9, #0
    obj->coords.x1 += diff.x;
 801cd82:	8aa3      	ldrh	r3, [r4, #20]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 801cd84:	463a      	mov	r2, r7
 801cd86:	4629      	mov	r1, r5
 801cd88:	4620      	mov	r0, r4
    obj->coords.x1 += diff.x;
 801cd8a:	4443      	add	r3, r8
 801cd8c:	82a3      	strh	r3, [r4, #20]
    obj->coords.y1 += diff.y;
 801cd8e:	8ae3      	ldrh	r3, [r4, #22]
 801cd90:	4453      	add	r3, sl
 801cd92:	82e3      	strh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
 801cd94:	8b23      	ldrh	r3, [r4, #24]
 801cd96:	4498      	add	r8, r3
    obj->coords.y2 += diff.y;
 801cd98:	8b63      	ldrh	r3, [r4, #26]
 801cd9a:	449a      	add	sl, r3
    obj->coords.x2 += diff.x;
 801cd9c:	f8a4 8018 	strh.w	r8, [r4, #24]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 801cda0:	2300      	movs	r3, #0
    obj->coords.y2 += diff.y;
 801cda2:	f8a4 a01a 	strh.w	sl, [r4, #26]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 801cda6:	f7ff fe08 	bl	801c9ba <lv_obj_move_children_by>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 801cdaa:	b9d6      	cbnz	r6, 801cde2 <lv_obj_move_to+0x10a>
    lv_obj_invalidate(obj);
 801cdac:	4620      	mov	r0, r4
 801cdae:	f7ff ff75 	bl	801cc9c <lv_obj_invalidate>
}
 801cdb2:	b004      	add	sp, #16
 801cdb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 801cdb8:	f9b6 8014 	ldrsh.w	r8, [r6, #20]
 801cdbc:	4630      	mov	r0, r6
 801cdbe:	f000 f900 	bl	801cfc2 <lv_obj_get_scroll_x>
 801cdc2:	44d0      	add	r8, sl
 801cdc4:	eba8 0800 	sub.w	r8, r8, r0
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 801cdc8:	4630      	mov	r0, r6
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 801cdca:	4445      	add	r5, r8
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 801cdcc:	f9b6 8016 	ldrsh.w	r8, [r6, #22]
 801cdd0:	f000 f8fd 	bl	801cfce <lv_obj_get_scroll_y>
 801cdd4:	44c8      	add	r8, r9
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 801cdd6:	b22d      	sxth	r5, r5
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 801cdd8:	eba8 0800 	sub.w	r8, r8, r0
 801cddc:	4447      	add	r7, r8
 801cdde:	b23f      	sxth	r7, r7
 801cde0:	e799      	b.n	801cd16 <lv_obj_move_to+0x3e>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 801cde2:	4622      	mov	r2, r4
 801cde4:	2122      	movs	r1, #34	; 0x22
 801cde6:	4630      	mov	r0, r6
 801cde8:	f7e7 fcac 	bl	8004744 <lv_event_send>
    lv_obj_invalidate(obj);
 801cdec:	4620      	mov	r0, r4
 801cdee:	f7ff ff55 	bl	801cc9c <lv_obj_invalidate>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 801cdf2:	2200      	movs	r2, #0
 801cdf4:	a902      	add	r1, sp, #8
 801cdf6:	f104 0014 	add.w	r0, r4, #20
 801cdfa:	f007 fb6d 	bl	80244d8 <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 801cdfe:	f1b9 0f00 	cmp.w	r9, #0
 801ce02:	d101      	bne.n	801ce08 <lv_obj_move_to+0x130>
 801ce04:	2800      	cmp	r0, #0
 801ce06:	d0d4      	beq.n	801cdb2 <lv_obj_move_to+0xda>
 801ce08:	4630      	mov	r0, r6
 801ce0a:	f000 fd3f 	bl	801d88c <lv_obj_scrollbar_invalidate>
 801ce0e:	e7d0      	b.n	801cdb2 <lv_obj_move_to+0xda>

0801ce10 <lv_obj_is_visible>:
{
 801ce10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ce12:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 801ce14:	f7ff fb6f 	bl	801c4f6 <_lv_obj_get_ext_draw_size>
    obj_coords.x1 -= ext_size;
 801ce18:	b283      	uxth	r3, r0
    dest->y1 = src->y1;
 801ce1a:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801ce1e:	8aa0      	ldrh	r0, [r4, #20]
    dest->x2 = src->x2;
 801ce20:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    obj_coords.y1 -= ext_size;
 801ce24:	1ac9      	subs	r1, r1, r3
    dest->y2 = src->y2;
 801ce26:	f9b4 501a 	ldrsh.w	r5, [r4, #26]
    obj_coords.x1 -= ext_size;
 801ce2a:	1ac0      	subs	r0, r0, r3
    obj_coords.x2 += ext_size;
 801ce2c:	441a      	add	r2, r3
    obj_coords.y1 -= ext_size;
 801ce2e:	f8ad 1002 	strh.w	r1, [sp, #2]
    obj_coords.y2 += ext_size;
 801ce32:	442b      	add	r3, r5
    return lv_obj_area_is_visible(obj, &obj_coords);
 801ce34:	4669      	mov	r1, sp
    obj_coords.x1 -= ext_size;
 801ce36:	f8ad 0000 	strh.w	r0, [sp]
    return lv_obj_area_is_visible(obj, &obj_coords);
 801ce3a:	4620      	mov	r0, r4
    obj_coords.x2 += ext_size;
 801ce3c:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 801ce40:	f8ad 3006 	strh.w	r3, [sp, #6]
    return lv_obj_area_is_visible(obj, &obj_coords);
 801ce44:	f7ff fe91 	bl	801cb6a <lv_obj_area_is_visible>
}
 801ce48:	b003      	add	sp, #12
 801ce4a:	bd30      	pop	{r4, r5, pc}

0801ce4c <lv_obj_set_ext_click_area>:
{
 801ce4c:	b538      	push	{r3, r4, r5, lr}
 801ce4e:	4605      	mov	r5, r0
 801ce50:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 801ce52:	f7e7 ffc5 	bl	8004de0 <lv_obj_allocate_spec_attr>
    obj->spec_attr->ext_click_pad = size;
 801ce56:	68ab      	ldr	r3, [r5, #8]
 801ce58:	829c      	strh	r4, [r3, #20]
}
 801ce5a:	bd38      	pop	{r3, r4, r5, pc}

0801ce5c <lv_obj_get_click_area>:
{
 801ce5c:	b570      	push	{r4, r5, r6, lr}
    dest->x1 = src->x1;
 801ce5e:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
 801ce62:	800d      	strh	r5, [r1, #0]
    dest->y1 = src->y1;
 801ce64:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
 801ce68:	804a      	strh	r2, [r1, #2]
    dest->x2 = src->x2;
 801ce6a:	f9b0 4018 	ldrsh.w	r4, [r0, #24]
 801ce6e:	808c      	strh	r4, [r1, #4]
    dest->y2 = src->y2;
 801ce70:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 801ce74:	80cb      	strh	r3, [r1, #6]
    if(obj->spec_attr) {
 801ce76:	6886      	ldr	r6, [r0, #8]
 801ce78:	b176      	cbz	r6, 801ce98 <lv_obj_get_click_area+0x3c>
        area->x1 -= obj->spec_attr->ext_click_pad;
 801ce7a:	8ab6      	ldrh	r6, [r6, #20]
 801ce7c:	1bad      	subs	r5, r5, r6
 801ce7e:	800d      	strh	r5, [r1, #0]
        area->x2 += obj->spec_attr->ext_click_pad;
 801ce80:	6885      	ldr	r5, [r0, #8]
 801ce82:	8aad      	ldrh	r5, [r5, #20]
 801ce84:	442c      	add	r4, r5
 801ce86:	808c      	strh	r4, [r1, #4]
        area->y1 -= obj->spec_attr->ext_click_pad;
 801ce88:	6884      	ldr	r4, [r0, #8]
 801ce8a:	8aa4      	ldrh	r4, [r4, #20]
 801ce8c:	1b12      	subs	r2, r2, r4
 801ce8e:	804a      	strh	r2, [r1, #2]
        area->y2 += obj->spec_attr->ext_click_pad;
 801ce90:	6882      	ldr	r2, [r0, #8]
 801ce92:	8a92      	ldrh	r2, [r2, #20]
 801ce94:	4413      	add	r3, r2
 801ce96:	80cb      	strh	r3, [r1, #6]
}
 801ce98:	bd70      	pop	{r4, r5, r6, pc}

0801ce9a <lv_clamp_width>:
{
 801ce9a:	b530      	push	{r4, r5, lr}
 801ce9c:	4604      	mov	r4, r0
 801ce9e:	4608      	mov	r0, r1
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 801cea0:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 801cea4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 801cea8:	d10f      	bne.n	801ceca <lv_clamp_width+0x30>
 801ceaa:	f420 41c0 	bic.w	r1, r0, #24576	; 0x6000
 801ceae:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 801ceb2:	dc0a      	bgt.n	801ceca <lv_clamp_width+0x30>
 801ceb4:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 801ceb8:	f04f 0064 	mov.w	r0, #100	; 0x64
 801cebc:	bfc8      	it	gt
 801cebe:	f5c1 717a 	rsbgt	r1, r1, #1000	; 0x3e8
 801cec2:	4359      	muls	r1, r3
 801cec4:	fb91 f1f0 	sdiv	r1, r1, r0
 801cec8:	b208      	sxth	r0, r1
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 801ceca:	f402 41c0 	and.w	r1, r2, #24576	; 0x6000
 801cece:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 801ced2:	d10f      	bne.n	801cef4 <lv_clamp_width+0x5a>
 801ced4:	f422 45c0 	bic.w	r5, r2, #24576	; 0x6000
 801ced8:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 801cedc:	dc0a      	bgt.n	801cef4 <lv_clamp_width+0x5a>
 801cede:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 801cee2:	462a      	mov	r2, r5
 801cee4:	bfc8      	it	gt
 801cee6:	f5c5 727a 	rsbgt	r2, r5, #1000	; 0x3e8
 801ceea:	4353      	muls	r3, r2
 801ceec:	2264      	movs	r2, #100	; 0x64
 801ceee:	fb93 f3f2 	sdiv	r3, r3, r2
 801cef2:	b21a      	sxth	r2, r3
    return LV_CLAMP(min_width, width, max_width);
 801cef4:	42a2      	cmp	r2, r4
 801cef6:	bfa8      	it	ge
 801cef8:	4622      	movge	r2, r4
}
 801cefa:	4290      	cmp	r0, r2
 801cefc:	bfb8      	it	lt
 801cefe:	4610      	movlt	r0, r2
 801cf00:	bd30      	pop	{r4, r5, pc}

0801cf02 <lv_obj_get_style_base_dir>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801cf02:	2216      	movs	r2, #22
{
 801cf04:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801cf06:	f000 fdef 	bl	801dae8 <lv_obj_get_style_prop>
}
 801cf0a:	b2c0      	uxtb	r0, r0
 801cf0c:	bd08      	pop	{r3, pc}

0801cf0e <scroll_anim_ready_cb>:
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 801cf0e:	2200      	movs	r2, #0
 801cf10:	210a      	movs	r1, #10
 801cf12:	6800      	ldr	r0, [r0, #0]
 801cf14:	f7e7 bc16 	b.w	8004744 <lv_event_send>

0801cf18 <lv_obj_set_scrollbar_mode>:
{
 801cf18:	b538      	push	{r3, r4, r5, lr}
 801cf1a:	4604      	mov	r4, r0
 801cf1c:	460d      	mov	r5, r1
    lv_obj_allocate_spec_attr(obj);
 801cf1e:	f7e7 ff5f 	bl	8004de0 <lv_obj_allocate_spec_attr>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 801cf22:	68a2      	ldr	r2, [r4, #8]
 801cf24:	7e13      	ldrb	r3, [r2, #24]
 801cf26:	f003 0103 	and.w	r1, r3, #3
 801cf2a:	42a9      	cmp	r1, r5
 801cf2c:	d007      	beq.n	801cf3e <lv_obj_set_scrollbar_mode+0x26>
    obj->spec_attr->scrollbar_mode = mode;
 801cf2e:	f365 0301 	bfi	r3, r5, #0, #2
    lv_obj_invalidate(obj);
 801cf32:	4620      	mov	r0, r4
    obj->spec_attr->scrollbar_mode = mode;
 801cf34:	7613      	strb	r3, [r2, #24]
}
 801cf36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(obj);
 801cf3a:	f7ff beaf 	b.w	801cc9c <lv_obj_invalidate>
}
 801cf3e:	bd38      	pop	{r3, r4, r5, pc}

0801cf40 <lv_obj_set_scroll_dir>:
{
 801cf40:	b538      	push	{r3, r4, r5, lr}
 801cf42:	4605      	mov	r5, r0
 801cf44:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 801cf46:	f7e7 ff4b 	bl	8004de0 <lv_obj_allocate_spec_attr>
    if(dir != obj->spec_attr->scroll_dir) {
 801cf4a:	68aa      	ldr	r2, [r5, #8]
 801cf4c:	7e53      	ldrb	r3, [r2, #25]
 801cf4e:	f003 010f 	and.w	r1, r3, #15
 801cf52:	42a1      	cmp	r1, r4
        obj->spec_attr->scroll_dir = dir;
 801cf54:	bf1c      	itt	ne
 801cf56:	f364 0303 	bfine	r3, r4, #0, #4
 801cf5a:	7653      	strbne	r3, [r2, #25]
}
 801cf5c:	bd38      	pop	{r3, r4, r5, pc}

0801cf5e <lv_obj_set_scroll_snap_x>:
{
 801cf5e:	b538      	push	{r3, r4, r5, lr}
 801cf60:	4605      	mov	r5, r0
 801cf62:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 801cf64:	f7e7 ff3c 	bl	8004de0 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_x = align;
 801cf68:	68ab      	ldr	r3, [r5, #8]
 801cf6a:	7e1a      	ldrb	r2, [r3, #24]
 801cf6c:	f364 0283 	bfi	r2, r4, #2, #2
 801cf70:	761a      	strb	r2, [r3, #24]
}
 801cf72:	bd38      	pop	{r3, r4, r5, pc}

0801cf74 <lv_obj_set_scroll_snap_y>:
{
 801cf74:	b538      	push	{r3, r4, r5, lr}
 801cf76:	4605      	mov	r5, r0
 801cf78:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 801cf7a:	f7e7 ff31 	bl	8004de0 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_y = align;
 801cf7e:	68ab      	ldr	r3, [r5, #8]
 801cf80:	7e1a      	ldrb	r2, [r3, #24]
 801cf82:	f364 1205 	bfi	r2, r4, #4, #2
 801cf86:	761a      	strb	r2, [r3, #24]
}
 801cf88:	bd38      	pop	{r3, r4, r5, pc}

0801cf8a <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 801cf8a:	6883      	ldr	r3, [r0, #8]
 801cf8c:	b11b      	cbz	r3, 801cf96 <lv_obj_get_scrollbar_mode+0xc>
 801cf8e:	7e18      	ldrb	r0, [r3, #24]
 801cf90:	f000 0003 	and.w	r0, r0, #3
 801cf94:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 801cf96:	2003      	movs	r0, #3
}
 801cf98:	4770      	bx	lr

0801cf9a <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 801cf9a:	6883      	ldr	r3, [r0, #8]
 801cf9c:	b11b      	cbz	r3, 801cfa6 <lv_obj_get_scroll_dir+0xc>
 801cf9e:	7e58      	ldrb	r0, [r3, #25]
 801cfa0:	f000 000f 	and.w	r0, r0, #15
 801cfa4:	4770      	bx	lr
    else return LV_DIR_ALL;
 801cfa6:	200f      	movs	r0, #15
}
 801cfa8:	4770      	bx	lr

0801cfaa <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 801cfaa:	6880      	ldr	r0, [r0, #8]
 801cfac:	b110      	cbz	r0, 801cfb4 <lv_obj_get_scroll_snap_x+0xa>
 801cfae:	7e00      	ldrb	r0, [r0, #24]
 801cfb0:	f3c0 0081 	ubfx	r0, r0, #2, #2
}
 801cfb4:	4770      	bx	lr

0801cfb6 <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 801cfb6:	6880      	ldr	r0, [r0, #8]
 801cfb8:	b110      	cbz	r0, 801cfc0 <lv_obj_get_scroll_snap_y+0xa>
 801cfba:	7e00      	ldrb	r0, [r0, #24]
 801cfbc:	f3c0 1001 	ubfx	r0, r0, #4, #2
}
 801cfc0:	4770      	bx	lr

0801cfc2 <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 801cfc2:	6880      	ldr	r0, [r0, #8]
 801cfc4:	b110      	cbz	r0, 801cfcc <lv_obj_get_scroll_x+0xa>
    return -obj->spec_attr->scroll.x;
 801cfc6:	8a00      	ldrh	r0, [r0, #16]
 801cfc8:	4240      	negs	r0, r0
 801cfca:	b200      	sxth	r0, r0
}
 801cfcc:	4770      	bx	lr

0801cfce <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 801cfce:	6880      	ldr	r0, [r0, #8]
 801cfd0:	b110      	cbz	r0, 801cfd8 <lv_obj_get_scroll_y+0xa>
    return -obj->spec_attr->scroll.y;
 801cfd2:	8a40      	ldrh	r0, [r0, #18]
 801cfd4:	4240      	negs	r0, r0
 801cfd6:	b200      	sxth	r0, r0
}
 801cfd8:	4770      	bx	lr

0801cfda <lv_obj_get_scroll_top>:
lv_coord_t lv_obj_get_scroll_top(lv_obj_t * obj)
 801cfda:	f7ff bff8 	b.w	801cfce <lv_obj_get_scroll_y>

0801cfde <_lv_obj_scroll_by_raw>:
    if(x == 0 && y == 0) return LV_RES_OK;
 801cfde:	ea51 0302 	orrs.w	r3, r1, r2
{
 801cfe2:	b570      	push	{r4, r5, r6, lr}
 801cfe4:	4604      	mov	r4, r0
 801cfe6:	460d      	mov	r5, r1
 801cfe8:	4616      	mov	r6, r2
    if(x == 0 && y == 0) return LV_RES_OK;
 801cfea:	d019      	beq.n	801d020 <_lv_obj_scroll_by_raw+0x42>
    lv_obj_allocate_spec_attr(obj);
 801cfec:	f7e7 fef8 	bl	8004de0 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 801cff0:	68a2      	ldr	r2, [r4, #8]
    lv_obj_move_children_by(obj, x, y, true);
 801cff2:	4629      	mov	r1, r5
 801cff4:	4620      	mov	r0, r4
    obj->spec_attr->scroll.x += x;
 801cff6:	8a13      	ldrh	r3, [r2, #16]
 801cff8:	442b      	add	r3, r5
 801cffa:	8213      	strh	r3, [r2, #16]
    obj->spec_attr->scroll.y += y;
 801cffc:	68a2      	ldr	r2, [r4, #8]
 801cffe:	8a53      	ldrh	r3, [r2, #18]
 801d000:	4433      	add	r3, r6
 801d002:	8253      	strh	r3, [r2, #18]
    lv_obj_move_children_by(obj, x, y, true);
 801d004:	2301      	movs	r3, #1
 801d006:	4632      	mov	r2, r6
 801d008:	f7ff fcd7 	bl	801c9ba <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 801d00c:	2200      	movs	r2, #0
 801d00e:	210b      	movs	r1, #11
 801d010:	4620      	mov	r0, r4
 801d012:	f7e7 fb97 	bl	8004744 <lv_event_send>
    if(res != LV_RES_OK) return res;
 801d016:	2801      	cmp	r0, #1
 801d018:	d103      	bne.n	801d022 <_lv_obj_scroll_by_raw+0x44>
    lv_obj_invalidate(obj);
 801d01a:	4620      	mov	r0, r4
 801d01c:	f7ff fe3e 	bl	801cc9c <lv_obj_invalidate>
    if(x == 0 && y == 0) return LV_RES_OK;
 801d020:	2001      	movs	r0, #1
}
 801d022:	bd70      	pop	{r4, r5, r6, pc}

0801d024 <scroll_y_anim>:
{
 801d024:	b508      	push	{r3, lr}
 801d026:	4603      	mov	r3, r0
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 801d028:	f7ff ffd1 	bl	801cfce <lv_obj_get_scroll_y>
 801d02c:	1842      	adds	r2, r0, r1
 801d02e:	2100      	movs	r1, #0
 801d030:	4618      	mov	r0, r3
 801d032:	b212      	sxth	r2, r2
}
 801d034:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 801d038:	f7ff bfd1 	b.w	801cfde <_lv_obj_scroll_by_raw>

0801d03c <scroll_x_anim>:
{
 801d03c:	b508      	push	{r3, lr}
 801d03e:	4603      	mov	r3, r0
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 801d040:	f7ff ffbf 	bl	801cfc2 <lv_obj_get_scroll_x>
 801d044:	4401      	add	r1, r0
 801d046:	2200      	movs	r2, #0
 801d048:	4618      	mov	r0, r3
 801d04a:	b209      	sxth	r1, r1
}
 801d04c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 801d050:	f7ff bfc5 	b.w	801cfde <_lv_obj_scroll_by_raw>

0801d054 <lv_obj_scroll_by_bounded>:
{
 801d054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d058:	4699      	mov	r9, r3
    if(dx == 0 && dy == 0) return;
 801d05a:	ea51 0302 	orrs.w	r3, r1, r2
{
 801d05e:	4607      	mov	r7, r0
 801d060:	460c      	mov	r4, r1
 801d062:	4615      	mov	r5, r2
    if(dx == 0 && dy == 0) return;
 801d064:	d058      	beq.n	801d118 <lv_obj_scroll_by_bounded+0xc4>
    lv_obj_update_layout(obj);
 801d066:	f7e8 fbaf 	bl	80057c8 <lv_obj_update_layout>
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 801d06a:	4638      	mov	r0, r7
 801d06c:	f7ff ffa9 	bl	801cfc2 <lv_obj_get_scroll_x>
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801d070:	2100      	movs	r1, #0
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 801d072:	fa1f f880 	uxth.w	r8, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801d076:	4638      	mov	r0, r7
 801d078:	f7ff ff43 	bl	801cf02 <lv_obj_get_style_base_dir>
 801d07c:	2801      	cmp	r0, #1
    lv_coord_t x_bounded = x_current + dx;
 801d07e:	eba4 0408 	sub.w	r4, r4, r8
 801d082:	b224      	sxth	r4, r4
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801d084:	d033      	beq.n	801d0ee <lv_obj_scroll_by_bounded+0x9a>
        if(x_bounded < 0) {
 801d086:	2c00      	cmp	r4, #0
 801d088:	da42      	bge.n	801d110 <lv_obj_scroll_by_bounded+0xbc>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 801d08a:	4638      	mov	r0, r7
 801d08c:	f7e8 fdea 	bl	8005c64 <lv_obj_get_scroll_left>
 801d090:	4606      	mov	r6, r0
 801d092:	4638      	mov	r0, r7
 801d094:	f7e8 fe4e 	bl	8005d34 <lv_obj_get_scroll_right>
 801d098:	1832      	adds	r2, r6, r0
            if(scroll_max < 0) scroll_max = 0;
 801d09a:	b212      	sxth	r2, r2
 801d09c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 801d0a0:	4252      	negs	r2, r2
 801d0a2:	4294      	cmp	r4, r2
 801d0a4:	da00      	bge.n	801d0a8 <lv_obj_scroll_by_bounded+0x54>
 801d0a6:	b214      	sxth	r4, r2
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 801d0a8:	4638      	mov	r0, r7
 801d0aa:	f7ff ff90 	bl	801cfce <lv_obj_get_scroll_y>
 801d0ae:	b286      	uxth	r6, r0
    lv_coord_t y_bounded = y_current + dy;
 801d0b0:	1bad      	subs	r5, r5, r6
 801d0b2:	b22d      	sxth	r5, r5
    if(y_bounded < 0) {
 801d0b4:	2d00      	cmp	r5, #0
 801d0b6:	da2d      	bge.n	801d114 <lv_obj_scroll_by_bounded+0xc0>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 801d0b8:	4638      	mov	r0, r7
 801d0ba:	f7e8 fd81 	bl	8005bc0 <lv_obj_get_scroll_bottom>
 801d0be:	1833      	adds	r3, r6, r0
        if(scroll_max < 0) scroll_max = 0;
 801d0c0:	b21b      	sxth	r3, r3
 801d0c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 801d0c6:	425b      	negs	r3, r3
 801d0c8:	429d      	cmp	r5, r3
 801d0ca:	da00      	bge.n	801d0ce <lv_obj_scroll_by_bounded+0x7a>
 801d0cc:	b21d      	sxth	r5, r3
    dx = x_bounded - x_current;
 801d0ce:	eb08 0104 	add.w	r1, r8, r4
    dy = y_bounded - y_current;
 801d0d2:	1972      	adds	r2, r6, r5
    dx = x_bounded - x_current;
 801d0d4:	b289      	uxth	r1, r1
    dy = y_bounded - y_current;
 801d0d6:	b292      	uxth	r2, r2
    if(dx || dy) {
 801d0d8:	ea51 0302 	orrs.w	r3, r1, r2
 801d0dc:	d01c      	beq.n	801d118 <lv_obj_scroll_by_bounded+0xc4>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 801d0de:	464b      	mov	r3, r9
 801d0e0:	4638      	mov	r0, r7
 801d0e2:	b212      	sxth	r2, r2
 801d0e4:	b209      	sxth	r1, r1
}
 801d0e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 801d0ea:	f7e8 bea1 	b.w	8005e30 <lv_obj_scroll_by>
        if(x_bounded > 0) {
 801d0ee:	2c00      	cmp	r4, #0
 801d0f0:	dd0e      	ble.n	801d110 <lv_obj_scroll_by_bounded+0xbc>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 801d0f2:	4638      	mov	r0, r7
 801d0f4:	f7e8 fdb6 	bl	8005c64 <lv_obj_get_scroll_left>
 801d0f8:	4606      	mov	r6, r0
 801d0fa:	4638      	mov	r0, r7
 801d0fc:	f7e8 fe1a 	bl	8005d34 <lv_obj_get_scroll_right>
 801d100:	4406      	add	r6, r0
            if(scroll_max < 0) scroll_max = 0;
 801d102:	b236      	sxth	r6, r6
 801d104:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801d108:	42b4      	cmp	r4, r6
 801d10a:	bfa8      	it	ge
 801d10c:	4634      	movge	r4, r6
 801d10e:	e7cb      	b.n	801d0a8 <lv_obj_scroll_by_bounded+0x54>
    lv_coord_t x_bounded = x_current + dx;
 801d110:	2400      	movs	r4, #0
 801d112:	e7c9      	b.n	801d0a8 <lv_obj_scroll_by_bounded+0x54>
    lv_coord_t y_bounded = y_current + dy;
 801d114:	2500      	movs	r5, #0
 801d116:	e7da      	b.n	801d0ce <lv_obj_scroll_by_bounded+0x7a>
}
 801d118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801d11c <lv_obj_scroll_to>:
{
 801d11c:	b570      	push	{r4, r5, r6, lr}
 801d11e:	4605      	mov	r5, r0
 801d120:	4616      	mov	r6, r2
 801d122:	461c      	mov	r4, r3
    lv_obj_scroll_to_x(obj, x, anim_en);
 801d124:	461a      	mov	r2, r3
 801d126:	f7e8 ff11 	bl	8005f4c <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 801d12a:	4631      	mov	r1, r6
 801d12c:	4622      	mov	r2, r4
 801d12e:	4628      	mov	r0, r5
}
 801d130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_scroll_to_y(obj, y, anim_en);
 801d134:	f7e8 bf20 	b.w	8005f78 <lv_obj_scroll_to_y>

0801d138 <lv_obj_scroll_to_view_recursive>:
{
 801d138:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d13a:	4604      	mov	r4, r0
 801d13c:	460e      	mov	r6, r1
    lv_obj_update_layout(obj);
 801d13e:	f7e8 fb43 	bl	80057c8 <lv_obj_update_layout>
    lv_point_t p = {0, 0};
 801d142:	2300      	movs	r3, #0
    lv_obj_t * parent = lv_obj_get_parent(child);
 801d144:	4620      	mov	r0, r4
    lv_point_t p = {0, 0};
 801d146:	9301      	str	r3, [sp, #4]
    lv_obj_t * parent = lv_obj_get_parent(child);
 801d148:	f001 f852 	bl	801e1f0 <lv_obj_get_parent>
    lv_obj_t * child = obj;
 801d14c:	4621      	mov	r1, r4
    lv_obj_t * parent = lv_obj_get_parent(child);
 801d14e:	4605      	mov	r5, r0
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 801d150:	3414      	adds	r4, #20
    while(parent) {
 801d152:	b90d      	cbnz	r5, 801d158 <lv_obj_scroll_to_view_recursive+0x20>
}
 801d154:	b002      	add	sp, #8
 801d156:	bd70      	pop	{r4, r5, r6, pc}
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 801d158:	4633      	mov	r3, r6
 801d15a:	aa01      	add	r2, sp, #4
 801d15c:	4620      	mov	r0, r4
 801d15e:	f7e8 ff21 	bl	8005fa4 <scroll_area_into_view>
        parent = lv_obj_get_parent(parent);
 801d162:	4628      	mov	r0, r5
 801d164:	f001 f844 	bl	801e1f0 <lv_obj_get_parent>
 801d168:	4629      	mov	r1, r5
 801d16a:	4605      	mov	r5, r0
 801d16c:	e7f1      	b.n	801d152 <lv_obj_scroll_to_view_recursive+0x1a>

0801d16e <lv_obj_get_scrollbar_area>:
{
 801d16e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_area_set(hor_area, 0, 0, -1, -1);
 801d172:	f04f 36ff 	mov.w	r6, #4294967295
{
 801d176:	b093      	sub	sp, #76	; 0x4c
 801d178:	460d      	mov	r5, r1
 801d17a:	4617      	mov	r7, r2
    lv_area_set(hor_area, 0, 0, -1, -1);
 801d17c:	2200      	movs	r2, #0
{
 801d17e:	4604      	mov	r4, r0
    lv_area_set(hor_area, 0, 0, -1, -1);
 801d180:	4633      	mov	r3, r6
 801d182:	4628      	mov	r0, r5
 801d184:	4611      	mov	r1, r2
 801d186:	9600      	str	r6, [sp, #0]
 801d188:	f007 f868 	bl	802425c <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 801d18c:	2200      	movs	r2, #0
 801d18e:	4633      	mov	r3, r6
 801d190:	4638      	mov	r0, r7
 801d192:	4611      	mov	r1, r2
 801d194:	9600      	str	r6, [sp, #0]
 801d196:	f007 f861 	bl	802425c <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 801d19a:	2110      	movs	r1, #16
 801d19c:	4620      	mov	r0, r4
 801d19e:	f7fe fc69 	bl	801ba74 <lv_obj_has_flag>
 801d1a2:	4681      	mov	r9, r0
 801d1a4:	b3c0      	cbz	r0, 801d218 <lv_obj_get_scrollbar_area+0xaa>
    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 801d1a6:	4620      	mov	r0, r4
 801d1a8:	f7ff feef 	bl	801cf8a <lv_obj_get_scrollbar_mode>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 801d1ac:	4683      	mov	fp, r0
 801d1ae:	b398      	cbz	r0, 801d218 <lv_obj_get_scrollbar_area+0xaa>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 801d1b0:	2000      	movs	r0, #0
 801d1b2:	f7f4 ffdd 	bl	8012170 <lv_indev_get_next>
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 801d1b6:	f1bb 0f02 	cmp.w	fp, #2
    lv_indev_t * indev = lv_indev_get_next(NULL);
 801d1ba:	4682      	mov	sl, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 801d1bc:	d029      	beq.n	801d212 <lv_obj_get_scrollbar_area+0xa4>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 801d1be:	4620      	mov	r0, r4
 801d1c0:	f7ff ff05 	bl	801cfce <lv_obj_get_scroll_y>
 801d1c4:	4680      	mov	r8, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 801d1c6:	4620      	mov	r0, r4
 801d1c8:	f7e8 fcfa 	bl	8005bc0 <lv_obj_get_scroll_bottom>
 801d1cc:	9008      	str	r0, [sp, #32]
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 801d1ce:	4620      	mov	r0, r4
 801d1d0:	f7e8 fd48 	bl	8005c64 <lv_obj_get_scroll_left>
 801d1d4:	9004      	str	r0, [sp, #16]
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 801d1d6:	4620      	mov	r0, r4
 801d1d8:	f7e8 fdac 	bl	8005d34 <lv_obj_get_scroll_right>
 801d1dc:	9003      	str	r0, [sp, #12]
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 801d1de:	4620      	mov	r0, r4
 801d1e0:	f7ff fedb 	bl	801cf9a <lv_obj_get_scroll_dir>
    if((dir & LV_DIR_VER) &&
 801d1e4:	f010 0f0c 	tst.w	r0, #12
 801d1e8:	f000 0603 	and.w	r6, r0, #3
 801d1ec:	d11f      	bne.n	801d22e <lv_obj_get_scrollbar_area+0xc0>
    if((dir & LV_DIR_HOR) &&
 801d1ee:	b19e      	cbz	r6, 801d218 <lv_obj_get_scrollbar_area+0xaa>
 801d1f0:	f1bb 0f01 	cmp.w	fp, #1
 801d1f4:	f040 8115 	bne.w	801d422 <lv_obj_get_scrollbar_area+0x2b4>
        hor_draw = true;
 801d1f8:	464e      	mov	r6, r9
 801d1fa:	f04f 0900 	mov.w	r9, #0
 801d1fe:	e032      	b.n	801d266 <lv_obj_get_scrollbar_area+0xf8>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 801d200:	4650      	mov	r0, sl
 801d202:	f7fe fa23 	bl	801b64c <lv_indev_get_scroll_obj>
 801d206:	4284      	cmp	r4, r0
 801d208:	d0d9      	beq.n	801d1be <lv_obj_get_scrollbar_area+0x50>
            indev = lv_indev_get_next(indev);
 801d20a:	4650      	mov	r0, sl
 801d20c:	f7f4 ffb0 	bl	8012170 <lv_indev_get_next>
 801d210:	4682      	mov	sl, r0
        while(indev) {
 801d212:	f1ba 0f00 	cmp.w	sl, #0
 801d216:	d1f3      	bne.n	801d200 <lv_obj_get_scrollbar_area+0x92>
}
 801d218:	b013      	add	sp, #76	; 0x4c
 801d21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((dir & LV_DIR_HOR) &&
 801d21e:	2e00      	cmp	r6, #0
 801d220:	d0fa      	beq.n	801d218 <lv_obj_get_scrollbar_area+0xaa>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 801d222:	4650      	mov	r0, sl
 801d224:	f7fe fa04 	bl	801b630 <lv_indev_get_scroll_dir>
 801d228:	2803      	cmp	r0, #3
 801d22a:	d1f5      	bne.n	801d218 <lv_obj_get_scrollbar_area+0xaa>
 801d22c:	e7e4      	b.n	801d1f8 <lv_obj_get_scrollbar_area+0x8a>
    if((dir & LV_DIR_VER) &&
 801d22e:	f1bb 0f01 	cmp.w	fp, #1
 801d232:	b2f6      	uxtb	r6, r6
 801d234:	f000 80e8 	beq.w	801d408 <lv_obj_get_scrollbar_area+0x29a>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 801d238:	f1bb 0f03 	cmp.w	fp, #3
 801d23c:	f040 80d0 	bne.w	801d3e0 <lv_obj_get_scrollbar_area+0x272>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 801d240:	f1b8 0f00 	cmp.w	r8, #0
 801d244:	dc0b      	bgt.n	801d25e <lv_obj_get_scrollbar_area+0xf0>
 801d246:	9b08      	ldr	r3, [sp, #32]
 801d248:	2b00      	cmp	r3, #0
 801d24a:	dc08      	bgt.n	801d25e <lv_obj_get_scrollbar_area+0xf0>
    if((dir & LV_DIR_HOR) &&
 801d24c:	2e00      	cmp	r6, #0
 801d24e:	d0e3      	beq.n	801d218 <lv_obj_get_scrollbar_area+0xaa>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 801d250:	9b04      	ldr	r3, [sp, #16]
 801d252:	2b00      	cmp	r3, #0
 801d254:	dcd0      	bgt.n	801d1f8 <lv_obj_get_scrollbar_area+0x8a>
 801d256:	9b03      	ldr	r3, [sp, #12]
 801d258:	2b00      	cmp	r3, #0
 801d25a:	dccd      	bgt.n	801d1f8 <lv_obj_get_scrollbar_area+0x8a>
 801d25c:	e7dc      	b.n	801d218 <lv_obj_get_scrollbar_area+0xaa>
    if((dir & LV_DIR_HOR) &&
 801d25e:	2e00      	cmp	r6, #0
 801d260:	f040 80d6 	bne.w	801d410 <lv_obj_get_scrollbar_area+0x2a2>
        hor_draw = true;
 801d264:	2600      	movs	r6, #0
    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_SCROLLBAR) == LV_BASE_DIR_RTL ? true : false;
 801d266:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801d26a:	4620      	mov	r0, r4
 801d26c:	f7ff fe49 	bl	801cf02 <lv_obj_get_style_base_dir>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801d270:	2210      	movs	r2, #16
 801d272:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801d276:	9005      	str	r0, [sp, #20]
 801d278:	4620      	mov	r0, r4
 801d27a:	f000 fc35 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801d27e:	2211      	movs	r2, #17
 801d280:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801d284:	900e      	str	r0, [sp, #56]	; 0x38
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801d286:	4620      	mov	r0, r4
 801d288:	f000 fc2e 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801d28c:	2212      	movs	r2, #18
 801d28e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801d292:	900d      	str	r0, [sp, #52]	; 0x34
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801d294:	4620      	mov	r0, r4
 801d296:	f000 fc27 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801d29a:	2213      	movs	r2, #19
 801d29c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801d2a0:	900c      	str	r0, [sp, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801d2a2:	4620      	mov	r0, r4
 801d2a4:	f000 fc20 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801d2a8:	2201      	movs	r2, #1
 801d2aa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801d2ae:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801d2b0:	4620      	mov	r0, r4
 801d2b2:	f000 fc19 	bl	801dae8 <lv_obj_get_style_prop>
 801d2b6:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t obj_h = lv_obj_get_height(obj);
 801d2b8:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801d2ba:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801d2be:	f7ff faf3 	bl	801c8a8 <lv_obj_get_height>
 801d2c2:	4682      	mov	sl, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 801d2c4:	4620      	mov	r0, r4
 801d2c6:	f7ff fae9 	bl	801c89c <lv_obj_get_width>
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 801d2ca:	f1b9 0f00 	cmp.w	r9, #0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 801d2ce:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 801d2d0:	f04f 0221 	mov.w	r2, #33	; 0x21
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 801d2d4:	bf14      	ite	ne
 801d2d6:	465b      	movne	r3, fp
 801d2d8:	2300      	moveq	r3, #0
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 801d2da:	2e00      	cmp	r6, #0
 801d2dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801d2e0:	4620      	mov	r0, r4
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 801d2e2:	9307      	str	r3, [sp, #28]
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 801d2e4:	bf08      	it	eq
 801d2e6:	f04f 0b00 	moveq.w	fp, #0
 801d2ea:	f000 fbfd 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801d2ee:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 801d2f0:	2801      	cmp	r0, #1
 801d2f2:	f240 80a1 	bls.w	801d438 <lv_obj_get_scrollbar_area+0x2ca>
    if(ver_draw && content_h) {
 801d2f6:	f1b9 0f00 	cmp.w	r9, #0
 801d2fa:	f040 80a8 	bne.w	801d44e <lv_obj_get_scrollbar_area+0x2e0>
    if(hor_draw && content_w) {
 801d2fe:	2e00      	cmp	r6, #0
 801d300:	d08a      	beq.n	801d218 <lv_obj_get_scrollbar_area+0xaa>
    lv_coord_t content_w = obj_w + sl + sr;
 801d302:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801d306:	9308      	str	r3, [sp, #32]
 801d308:	e9dd 3703 	ldrd	r3, r7, [sp, #12]
 801d30c:	441f      	add	r7, r3
 801d30e:	9b06      	ldr	r3, [sp, #24]
 801d310:	b2bf      	uxth	r7, r7
 801d312:	fa17 f283 	uxtah	r2, r7, r3
 801d316:	b212      	sxth	r2, r2
    if(hor_draw && content_w) {
 801d318:	2a00      	cmp	r2, #0
 801d31a:	f43f af7d 	beq.w	801d218 <lv_obj_get_scrollbar_area+0xaa>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 801d31e:	8b63      	ldrh	r3, [r4, #26]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 801d320:	2000      	movs	r0, #0
        hor_area->y2 = obj->coords.y2 - bottom_space;
 801d322:	990d      	ldr	r1, [sp, #52]	; 0x34
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 801d324:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
        hor_area->y2 = obj->coords.y2 - bottom_space;
 801d328:	1a5b      	subs	r3, r3, r1
        hor_area->y1 = hor_area->y2 - tickness + 1;
 801d32a:	990a      	ldr	r1, [sp, #40]	; 0x28
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 801d32c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
        hor_area->y2 = obj->coords.y2 - bottom_space;
 801d330:	b29b      	uxth	r3, r3
        hor_area->y1 = hor_area->y2 - tickness + 1;
 801d332:	f1c1 0101 	rsb	r1, r1, #1
        hor_area->y2 = obj->coords.y2 - bottom_space;
 801d336:	80eb      	strh	r3, [r5, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 801d338:	440b      	add	r3, r1
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 801d33a:	9907      	ldr	r1, [sp, #28]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 801d33c:	806b      	strh	r3, [r5, #2]
        hor_area->x1 = obj->coords.x1;
 801d33e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801d342:	802b      	strh	r3, [r5, #0]
        hor_area->x2 = obj->coords.x2;
 801d344:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801d348:	80ab      	strh	r3, [r5, #4]
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 801d34a:	9b06      	ldr	r3, [sp, #24]
 801d34c:	eba3 0309 	sub.w	r3, r3, r9
 801d350:	eba3 030b 	sub.w	r3, r3, fp
 801d354:	1a5b      	subs	r3, r3, r1
 801d356:	9906      	ldr	r1, [sp, #24]
 801d358:	434b      	muls	r3, r1
 801d35a:	fb93 f3f2 	sdiv	r3, r3, r2
 801d35e:	b21e      	sxth	r6, r3
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 801d360:	f7f4 feee 	bl	8012140 <lv_disp_get_dpi>
 801d364:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d368:	0040      	lsls	r0, r0, #1
 801d36a:	28ef      	cmp	r0, #239	; 0xef
 801d36c:	f340 8198 	ble.w	801d6a0 <lv_obj_get_scrollbar_area+0x532>
 801d370:	2000      	movs	r0, #0
 801d372:	f7f4 fee5 	bl	8012140 <lv_disp_get_dpi>
 801d376:	2250      	movs	r2, #80	; 0x50
 801d378:	210a      	movs	r1, #10
 801d37a:	fb00 2001 	mla	r0, r0, r1, r2
 801d37e:	22a0      	movs	r2, #160	; 0xa0
 801d380:	fb90 f0f2 	sdiv	r0, r0, r2
 801d384:	4286      	cmp	r6, r0
 801d386:	dc13      	bgt.n	801d3b0 <lv_obj_get_scrollbar_area+0x242>
 801d388:	2000      	movs	r0, #0
 801d38a:	f7f4 fed9 	bl	8012140 <lv_disp_get_dpi>
 801d38e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d392:	0040      	lsls	r0, r0, #1
 801d394:	28ef      	cmp	r0, #239	; 0xef
 801d396:	f340 8185 	ble.w	801d6a4 <lv_obj_get_scrollbar_area+0x536>
 801d39a:	2000      	movs	r0, #0
 801d39c:	f7f4 fed0 	bl	8012140 <lv_disp_get_dpi>
 801d3a0:	220a      	movs	r2, #10
 801d3a2:	2350      	movs	r3, #80	; 0x50
 801d3a4:	fb00 3302 	mla	r3, r0, r2, r3
 801d3a8:	22a0      	movs	r2, #160	; 0xa0
 801d3aa:	fb93 f3f2 	sdiv	r3, r3, r2
 801d3ae:	b21e      	sxth	r6, r3
        if(scroll_w <= 0) {
 801d3b0:	b23a      	sxth	r2, r7
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 801d3b2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d3b6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
        if(scroll_w <= 0) {
 801d3ba:	2a00      	cmp	r2, #0
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 801d3bc:	f8bd a01c 	ldrh.w	sl, [sp, #28]
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 801d3c0:	8aa0      	ldrh	r0, [r4, #20]
        if(scroll_w <= 0) {
 801d3c2:	f300 817a 	bgt.w	801d6ba <lv_obj_get_scrollbar_area+0x54c>
            if(rtl) {
 801d3c6:	9b05      	ldr	r3, [sp, #20]
 801d3c8:	2b01      	cmp	r3, #1
 801d3ca:	f040 816d 	bne.w	801d6a8 <lv_obj_get_scrollbar_area+0x53a>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 801d3ce:	3901      	subs	r1, #1
 801d3d0:	4401      	add	r1, r0
 801d3d2:	4451      	add	r1, sl
 801d3d4:	8029      	strh	r1, [r5, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 801d3d6:	8b23      	ldrh	r3, [r4, #24]
 801d3d8:	eba3 0308 	sub.w	r3, r3, r8
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 801d3dc:	80ab      	strh	r3, [r5, #4]
 801d3de:	e71b      	b.n	801d218 <lv_obj_get_scrollbar_area+0xaa>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 801d3e0:	f1bb 0f02 	cmp.w	fp, #2
 801d3e4:	f47f af18 	bne.w	801d218 <lv_obj_get_scrollbar_area+0xaa>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 801d3e8:	4650      	mov	r0, sl
 801d3ea:	f7fe f921 	bl	801b630 <lv_indev_get_scroll_dir>
 801d3ee:	280c      	cmp	r0, #12
 801d3f0:	f47f af15 	bne.w	801d21e <lv_obj_get_scrollbar_area+0xb0>
    if((dir & LV_DIR_HOR) &&
 801d3f4:	2e00      	cmp	r6, #0
 801d3f6:	f43f af35 	beq.w	801d264 <lv_obj_get_scrollbar_area+0xf6>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 801d3fa:	4650      	mov	r0, sl
 801d3fc:	f7fe f918 	bl	801b630 <lv_indev_get_scroll_dir>
 801d400:	1ec3      	subs	r3, r0, #3
 801d402:	425e      	negs	r6, r3
 801d404:	415e      	adcs	r6, r3
 801d406:	e72e      	b.n	801d266 <lv_obj_get_scrollbar_area+0xf8>
    if((dir & LV_DIR_HOR) &&
 801d408:	3e00      	subs	r6, #0
 801d40a:	bf18      	it	ne
 801d40c:	2601      	movne	r6, #1
 801d40e:	e72a      	b.n	801d266 <lv_obj_get_scrollbar_area+0xf8>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 801d410:	9b04      	ldr	r3, [sp, #16]
 801d412:	2b00      	cmp	r3, #0
 801d414:	dc0e      	bgt.n	801d434 <lv_obj_get_scrollbar_area+0x2c6>
 801d416:	9b03      	ldr	r3, [sp, #12]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	bfd4      	ite	le
 801d41c:	2600      	movle	r6, #0
 801d41e:	2601      	movgt	r6, #1
 801d420:	e721      	b.n	801d266 <lv_obj_get_scrollbar_area+0xf8>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 801d422:	f1bb 0f03 	cmp.w	fp, #3
 801d426:	f43f af13 	beq.w	801d250 <lv_obj_get_scrollbar_area+0xe2>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 801d42a:	f1bb 0f02 	cmp.w	fp, #2
 801d42e:	f47f aef3 	bne.w	801d218 <lv_obj_get_scrollbar_area+0xaa>
 801d432:	e6f6      	b.n	801d222 <lv_obj_get_scrollbar_area+0xb4>
        hor_draw = true;
 801d434:	464e      	mov	r6, r9
 801d436:	e716      	b.n	801d266 <lv_obj_get_scrollbar_area+0xf8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 801d438:	2231      	movs	r2, #49	; 0x31
 801d43a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801d43e:	4620      	mov	r0, r4
 801d440:	f000 fb52 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801d444:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 801d446:	2801      	cmp	r0, #1
 801d448:	f63f af55 	bhi.w	801d2f6 <lv_obj_get_scrollbar_area+0x188>
 801d44c:	e6e4      	b.n	801d218 <lv_obj_get_scrollbar_area+0xaa>
    lv_coord_t content_h = obj_h + st + sb;
 801d44e:	fa1f f38a 	uxth.w	r3, sl
 801d452:	9311      	str	r3, [sp, #68]	; 0x44
 801d454:	9b08      	ldr	r3, [sp, #32]
 801d456:	4498      	add	r8, r3
 801d458:	fa1f f888 	uxth.w	r8, r8
 801d45c:	fa18 f28a 	uxtah	r2, r8, sl
 801d460:	b212      	sxth	r2, r2
    if(ver_draw && content_h) {
 801d462:	2a00      	cmp	r2, #0
 801d464:	f43f af4b 	beq.w	801d2fe <lv_obj_get_scrollbar_area+0x190>
        ver_area->y1 = obj->coords.y1;
 801d468:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 801d46c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
        ver_area->y1 = obj->coords.y1;
 801d470:	807b      	strh	r3, [r7, #2]
        ver_area->y2 = obj->coords.y2;
 801d472:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801d476:	80fb      	strh	r3, [r7, #6]
        if(rtl) {
 801d478:	9b05      	ldr	r3, [sp, #20]
 801d47a:	2b01      	cmp	r3, #1
 801d47c:	d15b      	bne.n	801d536 <lv_obj_get_scrollbar_area+0x3c8>
            ver_area->x1 = obj->coords.x1 + left_space;
 801d47e:	8aa3      	ldrh	r3, [r4, #20]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 801d480:	3901      	subs	r1, #1
            ver_area->x1 = obj->coords.x1 + left_space;
 801d482:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d484:	4403      	add	r3, r0
 801d486:	b29b      	uxth	r3, r3
 801d488:	803b      	strh	r3, [r7, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 801d48a:	440b      	add	r3, r1
 801d48c:	80bb      	strh	r3, [r7, #4]
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 801d48e:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 801d492:	2000      	movs	r0, #0
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 801d494:	930f      	str	r3, [sp, #60]	; 0x3c
 801d496:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d49a:	9310      	str	r3, [sp, #64]	; 0x40
 801d49c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d49e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801d4a0:	ebaa 0303 	sub.w	r3, sl, r3
 801d4a4:	1a5b      	subs	r3, r3, r1
 801d4a6:	eba3 030b 	sub.w	r3, r3, fp
 801d4aa:	fb0a f303 	mul.w	r3, sl, r3
 801d4ae:	fb93 f3f2 	sdiv	r3, r3, r2
 801d4b2:	fa0f f983 	sxth.w	r9, r3
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 801d4b6:	f7f4 fe43 	bl	8012140 <lv_disp_get_dpi>
 801d4ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d4be:	0040      	lsls	r0, r0, #1
 801d4c0:	28ef      	cmp	r0, #239	; 0xef
 801d4c2:	dd42      	ble.n	801d54a <lv_obj_get_scrollbar_area+0x3dc>
 801d4c4:	2000      	movs	r0, #0
 801d4c6:	f7f4 fe3b 	bl	8012140 <lv_disp_get_dpi>
 801d4ca:	2250      	movs	r2, #80	; 0x50
 801d4cc:	210a      	movs	r1, #10
 801d4ce:	fb00 2001 	mla	r0, r0, r1, r2
 801d4d2:	22a0      	movs	r2, #160	; 0xa0
 801d4d4:	fb90 f0f2 	sdiv	r0, r0, r2
 801d4d8:	4581      	cmp	r9, r0
 801d4da:	dc13      	bgt.n	801d504 <lv_obj_get_scrollbar_area+0x396>
 801d4dc:	2000      	movs	r0, #0
 801d4de:	f7f4 fe2f 	bl	8012140 <lv_disp_get_dpi>
 801d4e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d4e6:	0040      	lsls	r0, r0, #1
 801d4e8:	28ef      	cmp	r0, #239	; 0xef
 801d4ea:	dd30      	ble.n	801d54e <lv_obj_get_scrollbar_area+0x3e0>
 801d4ec:	2000      	movs	r0, #0
 801d4ee:	f7f4 fe27 	bl	8012140 <lv_disp_get_dpi>
 801d4f2:	220a      	movs	r2, #10
 801d4f4:	2350      	movs	r3, #80	; 0x50
 801d4f6:	fb00 3302 	mla	r3, r0, r2, r3
 801d4fa:	22a0      	movs	r2, #160	; 0xa0
 801d4fc:	fb93 f3f2 	sdiv	r3, r3, r2
 801d500:	fa0f f983 	sxth.w	r9, r3
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 801d504:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801d508:	fa1f fa8b 	uxth.w	sl, fp
            ver_area->y1 = obj->coords.y1 + top_space;
 801d50c:	8ae2      	ldrh	r2, [r4, #22]
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 801d50e:	9309      	str	r3, [sp, #36]	; 0x24
            ver_area->y1 = obj->coords.y1 + top_space;
 801d510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 801d512:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
            ver_area->y1 = obj->coords.y1 + top_space;
 801d516:	fa12 f083 	uxtah	r0, r2, r3
        if(scroll_h <= 0) {
 801d51a:	fa0f f288 	sxth.w	r2, r8
 801d51e:	2a00      	cmp	r2, #0
            ver_area->y1 = obj->coords.y1 + top_space;
 801d520:	b280      	uxth	r0, r0
        if(scroll_h <= 0) {
 801d522:	dc17      	bgt.n	801d554 <lv_obj_get_scrollbar_area+0x3e6>
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 801d524:	9a09      	ldr	r2, [sp, #36]	; 0x24
            ver_area->y1 = obj->coords.y1 + top_space;
 801d526:	8078      	strh	r0, [r7, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 801d528:	8b63      	ldrh	r3, [r4, #26]
 801d52a:	1a9b      	subs	r3, r3, r2
 801d52c:	3b01      	subs	r3, #1
 801d52e:	eba3 030a 	sub.w	r3, r3, sl
 801d532:	80fb      	strh	r3, [r7, #6]
 801d534:	e6e3      	b.n	801d2fe <lv_obj_get_scrollbar_area+0x190>
            ver_area->x2 = obj->coords.x2 - right_space;
 801d536:	8b23      	ldrh	r3, [r4, #24]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 801d538:	f1c1 0101 	rsb	r1, r1, #1
            ver_area->x2 = obj->coords.x2 - right_space;
 801d53c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d53e:	1a1b      	subs	r3, r3, r0
 801d540:	b29b      	uxth	r3, r3
 801d542:	80bb      	strh	r3, [r7, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 801d544:	440b      	add	r3, r1
 801d546:	803b      	strh	r3, [r7, #0]
 801d548:	e7a1      	b.n	801d48e <lv_obj_get_scrollbar_area+0x320>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 801d54a:	2001      	movs	r0, #1
 801d54c:	e7c4      	b.n	801d4d8 <lv_obj_get_scrollbar_area+0x36a>
 801d54e:	f04f 0901 	mov.w	r9, #1
 801d552:	e7d7      	b.n	801d504 <lv_obj_get_scrollbar_area+0x396>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 801d554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d556:	fa1f fe89 	uxth.w	lr, r9
 801d55a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d55c:	188a      	adds	r2, r1, r2
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 801d55e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 801d562:	1a9a      	subs	r2, r3, r2
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 801d564:	9b08      	ldr	r3, [sp, #32]
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 801d566:	eba2 020a 	sub.w	r2, r2, sl
 801d56a:	eba2 020e 	sub.w	r2, r2, lr
 801d56e:	fa1f fc82 	uxth.w	ip, r2
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 801d572:	fa10 f282 	uxtah	r2, r0, r2
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 801d576:	fb1c f003 	smulbb	r0, ip, r3
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 801d57a:	f10e 33ff 	add.w	r3, lr, #4294967295
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 801d57e:	fb90 f0f8 	sdiv	r0, r0, r8
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 801d582:	1a12      	subs	r2, r2, r0
 801d584:	b210      	sxth	r0, r2
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 801d586:	fa13 f282 	uxtah	r2, r3, r2
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 801d58a:	8078      	strh	r0, [r7, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 801d58c:	80fa      	strh	r2, [r7, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 801d58e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801d592:	4499      	add	r9, r3
 801d594:	4548      	cmp	r0, r9
 801d596:	da34      	bge.n	801d602 <lv_obj_get_scrollbar_area+0x494>
                ver_area->y1 = obj->coords.y1 + top_space;
 801d598:	eb01 0803 	add.w	r8, r1, r3
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 801d59c:	2000      	movs	r0, #0
                ver_area->y1 = obj->coords.y1 + top_space;
 801d59e:	fa0f f888 	sxth.w	r8, r8
 801d5a2:	f8a7 8002 	strh.w	r8, [r7, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 801d5a6:	f7f4 fdcb 	bl	8012140 <lv_disp_get_dpi>
 801d5aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d5ae:	0040      	lsls	r0, r0, #1
 801d5b0:	28ef      	cmp	r0, #239	; 0xef
 801d5b2:	dd6d      	ble.n	801d690 <lv_obj_get_scrollbar_area+0x522>
 801d5b4:	2000      	movs	r0, #0
 801d5b6:	f7f4 fdc3 	bl	8012140 <lv_disp_get_dpi>
 801d5ba:	2350      	movs	r3, #80	; 0x50
 801d5bc:	220a      	movs	r2, #10
 801d5be:	fb00 3002 	mla	r0, r0, r2, r3
 801d5c2:	23a0      	movs	r3, #160	; 0xa0
 801d5c4:	fb90 f0f3 	sdiv	r0, r0, r3
 801d5c8:	4480      	add	r8, r0
 801d5ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d5ce:	4598      	cmp	r8, r3
 801d5d0:	dd17      	ble.n	801d602 <lv_obj_get_scrollbar_area+0x494>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 801d5d2:	2000      	movs	r0, #0
 801d5d4:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 801d5d8:	f7f4 fdb2 	bl	8012140 <lv_disp_get_dpi>
 801d5dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d5e0:	0040      	lsls	r0, r0, #1
 801d5e2:	28ef      	cmp	r0, #239	; 0xef
 801d5e4:	dd56      	ble.n	801d694 <lv_obj_get_scrollbar_area+0x526>
 801d5e6:	2000      	movs	r0, #0
 801d5e8:	f7f4 fdaa 	bl	8012140 <lv_disp_get_dpi>
 801d5ec:	2350      	movs	r3, #80	; 0x50
 801d5ee:	220a      	movs	r2, #10
 801d5f0:	fb00 3002 	mla	r0, r0, r2, r3
 801d5f4:	23a0      	movs	r3, #160	; 0xa0
 801d5f6:	fb90 f0f3 	sdiv	r0, r0, r3
 801d5fa:	b280      	uxth	r0, r0
 801d5fc:	4480      	add	r8, r0
 801d5fe:	f8a7 8006 	strh.w	r8, [r7, #6]
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 801d602:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 801d606:	9910      	ldr	r1, [sp, #64]	; 0x40
 801d608:	eba8 030b 	sub.w	r3, r8, fp
 801d60c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801d610:	1a5b      	subs	r3, r3, r1
 801d612:	429a      	cmp	r2, r3
 801d614:	f77f ae73 	ble.w	801d2fe <lv_obj_get_scrollbar_area+0x190>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 801d618:	9b09      	ldr	r3, [sp, #36]	; 0x24
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 801d61a:	2000      	movs	r0, #0
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 801d61c:	eba8 0803 	sub.w	r8, r8, r3
 801d620:	eba8 080a 	sub.w	r8, r8, sl
 801d624:	fa0f f888 	sxth.w	r8, r8
 801d628:	f8a7 8006 	strh.w	r8, [r7, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 801d62c:	f7f4 fd88 	bl	8012140 <lv_disp_get_dpi>
 801d630:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d634:	0040      	lsls	r0, r0, #1
 801d636:	28ef      	cmp	r0, #239	; 0xef
 801d638:	dd2e      	ble.n	801d698 <lv_obj_get_scrollbar_area+0x52a>
 801d63a:	2000      	movs	r0, #0
 801d63c:	f7f4 fd80 	bl	8012140 <lv_disp_get_dpi>
 801d640:	2350      	movs	r3, #80	; 0x50
 801d642:	220a      	movs	r2, #10
 801d644:	fb00 3002 	mla	r0, r0, r2, r3
 801d648:	23a0      	movs	r3, #160	; 0xa0
 801d64a:	fb90 f0f3 	sdiv	r0, r0, r3
 801d64e:	eba8 0800 	sub.w	r8, r8, r0
 801d652:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d656:	4598      	cmp	r8, r3
 801d658:	f6bf ae51 	bge.w	801d2fe <lv_obj_get_scrollbar_area+0x190>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 801d65c:	2000      	movs	r0, #0
 801d65e:	f8b7 8006 	ldrh.w	r8, [r7, #6]
 801d662:	f7f4 fd6d 	bl	8012140 <lv_disp_get_dpi>
 801d666:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d66a:	0040      	lsls	r0, r0, #1
 801d66c:	28ef      	cmp	r0, #239	; 0xef
 801d66e:	dd15      	ble.n	801d69c <lv_obj_get_scrollbar_area+0x52e>
 801d670:	2000      	movs	r0, #0
 801d672:	f7f4 fd65 	bl	8012140 <lv_disp_get_dpi>
 801d676:	2350      	movs	r3, #80	; 0x50
 801d678:	220a      	movs	r2, #10
 801d67a:	fb00 3002 	mla	r0, r0, r2, r3
 801d67e:	23a0      	movs	r3, #160	; 0xa0
 801d680:	fb90 f0f3 	sdiv	r0, r0, r3
 801d684:	b280      	uxth	r0, r0
 801d686:	eba8 0800 	sub.w	r8, r8, r0
 801d68a:	f8a7 8002 	strh.w	r8, [r7, #2]
 801d68e:	e636      	b.n	801d2fe <lv_obj_get_scrollbar_area+0x190>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 801d690:	2001      	movs	r0, #1
 801d692:	e799      	b.n	801d5c8 <lv_obj_get_scrollbar_area+0x45a>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 801d694:	2001      	movs	r0, #1
 801d696:	e7b1      	b.n	801d5fc <lv_obj_get_scrollbar_area+0x48e>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 801d698:	2001      	movs	r0, #1
 801d69a:	e7d8      	b.n	801d64e <lv_obj_get_scrollbar_area+0x4e0>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 801d69c:	2001      	movs	r0, #1
 801d69e:	e7f2      	b.n	801d686 <lv_obj_get_scrollbar_area+0x518>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 801d6a0:	2001      	movs	r0, #1
 801d6a2:	e66f      	b.n	801d384 <lv_obj_get_scrollbar_area+0x216>
 801d6a4:	2601      	movs	r6, #1
 801d6a6:	e683      	b.n	801d3b0 <lv_obj_get_scrollbar_area+0x242>
                hor_area->x1 = obj->coords.x1 + left_space;
 801d6a8:	4408      	add	r0, r1
 801d6aa:	8028      	strh	r0, [r5, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 801d6ac:	8b23      	ldrh	r3, [r4, #24]
 801d6ae:	eba3 0308 	sub.w	r3, r3, r8
 801d6b2:	3b01      	subs	r3, #1
 801d6b4:	eba3 030a 	sub.w	r3, r3, sl
 801d6b8:	e690      	b.n	801d3dc <lv_obj_get_scrollbar_area+0x26e>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 801d6ba:	b2b3      	uxth	r3, r6
 801d6bc:	eb01 0208 	add.w	r2, r1, r8
 801d6c0:	9e08      	ldr	r6, [sp, #32]
 801d6c2:	4408      	add	r0, r1
 801d6c4:	1ab2      	subs	r2, r6, r2
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 801d6c6:	9e03      	ldr	r6, [sp, #12]
 801d6c8:	b280      	uxth	r0, r0
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 801d6ca:	eba2 020a 	sub.w	r2, r2, sl
 801d6ce:	1ad2      	subs	r2, r2, r3
 801d6d0:	3b01      	subs	r3, #1
 801d6d2:	b292      	uxth	r2, r2
            sb_x = rem - sb_x;
 801d6d4:	b29b      	uxth	r3, r3
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 801d6d6:	fb12 f606 	smulbb	r6, r2, r6
 801d6da:	fb96 f6f7 	sdiv	r6, r6, r7
            sb_x = rem - sb_x;
 801d6de:	1b92      	subs	r2, r2, r6
            if(rtl) {
 801d6e0:	9e05      	ldr	r6, [sp, #20]
 801d6e2:	2e01      	cmp	r6, #1
            sb_x = rem - sb_x;
 801d6e4:	b292      	uxth	r2, r2
            if(rtl) {
 801d6e6:	d17e      	bne.n	801d7e6 <lv_obj_get_scrollbar_area+0x678>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 801d6e8:	4450      	add	r0, sl
 801d6ea:	4410      	add	r0, r2
 801d6ec:	b202      	sxth	r2, r0
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 801d6ee:	fa13 f080 	uxtah	r0, r3, r0
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 801d6f2:	9b07      	ldr	r3, [sp, #28]
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 801d6f4:	802a      	strh	r2, [r5, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 801d6f6:	80a8      	strh	r0, [r5, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 801d6f8:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801d6fc:	44b1      	add	r9, r6
 801d6fe:	4499      	add	r9, r3
 801d700:	454a      	cmp	r2, r9
 801d702:	da30      	bge.n	801d766 <lv_obj_get_scrollbar_area+0x5f8>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 801d704:	440e      	add	r6, r1
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801d706:	2000      	movs	r0, #0
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 801d708:	4456      	add	r6, sl
 801d70a:	b236      	sxth	r6, r6
 801d70c:	802e      	strh	r6, [r5, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801d70e:	f7f4 fd17 	bl	8012140 <lv_disp_get_dpi>
 801d712:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d716:	0040      	lsls	r0, r0, #1
 801d718:	28ef      	cmp	r0, #239	; 0xef
 801d71a:	dd60      	ble.n	801d7de <lv_obj_get_scrollbar_area+0x670>
 801d71c:	2000      	movs	r0, #0
 801d71e:	f7f4 fd0f 	bl	8012140 <lv_disp_get_dpi>
 801d722:	2350      	movs	r3, #80	; 0x50
 801d724:	220a      	movs	r2, #10
 801d726:	fb00 3002 	mla	r0, r0, r2, r3
 801d72a:	23a0      	movs	r3, #160	; 0xa0
 801d72c:	fb90 f0f3 	sdiv	r0, r0, r3
 801d730:	4406      	add	r6, r0
 801d732:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801d736:	429e      	cmp	r6, r3
 801d738:	dd15      	ble.n	801d766 <lv_obj_get_scrollbar_area+0x5f8>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 801d73a:	2000      	movs	r0, #0
 801d73c:	882e      	ldrh	r6, [r5, #0]
 801d73e:	f7f4 fcff 	bl	8012140 <lv_disp_get_dpi>
 801d742:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d746:	0040      	lsls	r0, r0, #1
 801d748:	28ef      	cmp	r0, #239	; 0xef
 801d74a:	dd4a      	ble.n	801d7e2 <lv_obj_get_scrollbar_area+0x674>
 801d74c:	2000      	movs	r0, #0
 801d74e:	f7f4 fcf7 	bl	8012140 <lv_disp_get_dpi>
 801d752:	2350      	movs	r3, #80	; 0x50
 801d754:	220a      	movs	r2, #10
 801d756:	fb00 3002 	mla	r0, r0, r2, r3
 801d75a:	23a0      	movs	r3, #160	; 0xa0
 801d75c:	fb90 f0f3 	sdiv	r0, r0, r3
 801d760:	b280      	uxth	r0, r0
 801d762:	4406      	add	r6, r0
 801d764:	80ae      	strh	r6, [r5, #4]
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 801d766:	f9b4 4018 	ldrsh.w	r4, [r4, #24]
 801d76a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801d76e:	eba4 0b0b 	sub.w	fp, r4, fp
 801d772:	455b      	cmp	r3, fp
 801d774:	f77f ad50 	ble.w	801d218 <lv_obj_get_scrollbar_area+0xaa>
                    hor_area->x2 = obj->coords.x2 - right_space;
 801d778:	eba4 0408 	sub.w	r4, r4, r8
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 801d77c:	b224      	sxth	r4, r4
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 801d77e:	2000      	movs	r0, #0
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 801d780:	80ac      	strh	r4, [r5, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 801d782:	f7f4 fcdd 	bl	8012140 <lv_disp_get_dpi>
 801d786:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d78a:	0040      	lsls	r0, r0, #1
 801d78c:	28ef      	cmp	r0, #239	; 0xef
 801d78e:	dd79      	ble.n	801d884 <lv_obj_get_scrollbar_area+0x716>
 801d790:	2000      	movs	r0, #0
 801d792:	f7f4 fcd5 	bl	8012140 <lv_disp_get_dpi>
 801d796:	2350      	movs	r3, #80	; 0x50
 801d798:	220a      	movs	r2, #10
 801d79a:	fb00 3002 	mla	r0, r0, r2, r3
 801d79e:	23a0      	movs	r3, #160	; 0xa0
 801d7a0:	fb90 f0f3 	sdiv	r0, r0, r3
 801d7a4:	1a24      	subs	r4, r4, r0
 801d7a6:	f9b5 3000 	ldrsh.w	r3, [r5]
 801d7aa:	429c      	cmp	r4, r3
 801d7ac:	f6bf ad34 	bge.w	801d218 <lv_obj_get_scrollbar_area+0xaa>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 801d7b0:	2000      	movs	r0, #0
 801d7b2:	88ac      	ldrh	r4, [r5, #4]
 801d7b4:	f7f4 fcc4 	bl	8012140 <lv_disp_get_dpi>
 801d7b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d7bc:	0040      	lsls	r0, r0, #1
 801d7be:	28ef      	cmp	r0, #239	; 0xef
 801d7c0:	dd62      	ble.n	801d888 <lv_obj_get_scrollbar_area+0x71a>
 801d7c2:	2000      	movs	r0, #0
 801d7c4:	f7f4 fcbc 	bl	8012140 <lv_disp_get_dpi>
 801d7c8:	2350      	movs	r3, #80	; 0x50
 801d7ca:	220a      	movs	r2, #10
 801d7cc:	fb00 3002 	mla	r0, r0, r2, r3
 801d7d0:	23a0      	movs	r3, #160	; 0xa0
 801d7d2:	fb90 f0f3 	sdiv	r0, r0, r3
 801d7d6:	b280      	uxth	r0, r0
 801d7d8:	1a24      	subs	r4, r4, r0
 801d7da:	802c      	strh	r4, [r5, #0]
 801d7dc:	e51c      	b.n	801d218 <lv_obj_get_scrollbar_area+0xaa>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801d7de:	9805      	ldr	r0, [sp, #20]
 801d7e0:	e7a6      	b.n	801d730 <lv_obj_get_scrollbar_area+0x5c2>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 801d7e2:	2001      	movs	r0, #1
 801d7e4:	e7bd      	b.n	801d762 <lv_obj_get_scrollbar_area+0x5f4>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 801d7e6:	4402      	add	r2, r0
 801d7e8:	b210      	sxth	r0, r2
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 801d7ea:	fa13 f282 	uxtah	r2, r3, r2
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 801d7ee:	8028      	strh	r0, [r5, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 801d7f0:	80aa      	strh	r2, [r5, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 801d7f2:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801d7f6:	4499      	add	r9, r3
 801d7f8:	4548      	cmp	r0, r9
 801d7fa:	da2f      	bge.n	801d85c <lv_obj_get_scrollbar_area+0x6ee>
                    hor_area->x1 = obj->coords.x1 + left_space;
 801d7fc:	4419      	add	r1, r3
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801d7fe:	2000      	movs	r0, #0
                    hor_area->x1 = obj->coords.x1 + left_space;
 801d800:	b20e      	sxth	r6, r1
 801d802:	802e      	strh	r6, [r5, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801d804:	f7f4 fc9c 	bl	8012140 <lv_disp_get_dpi>
 801d808:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d80c:	0040      	lsls	r0, r0, #1
 801d80e:	28ef      	cmp	r0, #239	; 0xef
 801d810:	dd34      	ble.n	801d87c <lv_obj_get_scrollbar_area+0x70e>
 801d812:	2000      	movs	r0, #0
 801d814:	f7f4 fc94 	bl	8012140 <lv_disp_get_dpi>
 801d818:	2350      	movs	r3, #80	; 0x50
 801d81a:	220a      	movs	r2, #10
 801d81c:	fb00 3002 	mla	r0, r0, r2, r3
 801d820:	23a0      	movs	r3, #160	; 0xa0
 801d822:	fb90 f0f3 	sdiv	r0, r0, r3
 801d826:	1831      	adds	r1, r6, r0
 801d828:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801d82c:	4299      	cmp	r1, r3
 801d82e:	dd15      	ble.n	801d85c <lv_obj_get_scrollbar_area+0x6ee>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 801d830:	2000      	movs	r0, #0
 801d832:	882e      	ldrh	r6, [r5, #0]
 801d834:	f7f4 fc84 	bl	8012140 <lv_disp_get_dpi>
 801d838:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d83c:	0040      	lsls	r0, r0, #1
 801d83e:	28ef      	cmp	r0, #239	; 0xef
 801d840:	dd1e      	ble.n	801d880 <lv_obj_get_scrollbar_area+0x712>
 801d842:	2000      	movs	r0, #0
 801d844:	f7f4 fc7c 	bl	8012140 <lv_disp_get_dpi>
 801d848:	2350      	movs	r3, #80	; 0x50
 801d84a:	220a      	movs	r2, #10
 801d84c:	fb00 3002 	mla	r0, r0, r2, r3
 801d850:	23a0      	movs	r3, #160	; 0xa0
 801d852:	fb90 f0f3 	sdiv	r0, r0, r3
 801d856:	b280      	uxth	r0, r0
 801d858:	4406      	add	r6, r0
 801d85a:	80ae      	strh	r6, [r5, #4]
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 801d85c:	f9b4 4018 	ldrsh.w	r4, [r4, #24]
 801d860:	9b07      	ldr	r3, [sp, #28]
 801d862:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801d866:	1ae3      	subs	r3, r4, r3
 801d868:	eba3 030b 	sub.w	r3, r3, fp
 801d86c:	429a      	cmp	r2, r3
 801d86e:	f77f acd3 	ble.w	801d218 <lv_obj_get_scrollbar_area+0xaa>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 801d872:	eba4 0408 	sub.w	r4, r4, r8
 801d876:	eba4 040a 	sub.w	r4, r4, sl
 801d87a:	e77f      	b.n	801d77c <lv_obj_get_scrollbar_area+0x60e>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801d87c:	2001      	movs	r0, #1
 801d87e:	e7d2      	b.n	801d826 <lv_obj_get_scrollbar_area+0x6b8>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 801d880:	2001      	movs	r0, #1
 801d882:	e7e9      	b.n	801d858 <lv_obj_get_scrollbar_area+0x6ea>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 801d884:	2001      	movs	r0, #1
 801d886:	e78d      	b.n	801d7a4 <lv_obj_get_scrollbar_area+0x636>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 801d888:	2001      	movs	r0, #1
 801d88a:	e7a5      	b.n	801d7d8 <lv_obj_get_scrollbar_area+0x66a>

0801d88c <lv_obj_scrollbar_invalidate>:
{
 801d88c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 801d88e:	aa02      	add	r2, sp, #8
 801d890:	4669      	mov	r1, sp
{
 801d892:	4604      	mov	r4, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 801d894:	f7ff fc6b 	bl	801d16e <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 801d898:	4668      	mov	r0, sp
 801d89a:	f006 fcf0 	bl	802427e <lv_area_get_size>
 801d89e:	b918      	cbnz	r0, 801d8a8 <lv_obj_scrollbar_invalidate+0x1c>
 801d8a0:	a802      	add	r0, sp, #8
 801d8a2:	f006 fcec 	bl	802427e <lv_area_get_size>
 801d8a6:	b178      	cbz	r0, 801d8c8 <lv_obj_scrollbar_invalidate+0x3c>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 801d8a8:	4668      	mov	r0, sp
 801d8aa:	f006 fce8 	bl	802427e <lv_area_get_size>
 801d8ae:	b118      	cbz	r0, 801d8b8 <lv_obj_scrollbar_invalidate+0x2c>
 801d8b0:	4669      	mov	r1, sp
 801d8b2:	4620      	mov	r0, r4
 801d8b4:	f7ff f9d1 	bl	801cc5a <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 801d8b8:	a802      	add	r0, sp, #8
 801d8ba:	f006 fce0 	bl	802427e <lv_area_get_size>
 801d8be:	b118      	cbz	r0, 801d8c8 <lv_obj_scrollbar_invalidate+0x3c>
 801d8c0:	a902      	add	r1, sp, #8
 801d8c2:	4620      	mov	r0, r4
 801d8c4:	f7ff f9c9 	bl	801cc5a <lv_obj_invalidate_area>
}
 801d8c8:	b004      	add	sp, #16
 801d8ca:	bd10      	pop	{r4, pc}

0801d8cc <lv_obj_readjust_scroll>:
{
 801d8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8d0:	4604      	mov	r4, r0
 801d8d2:	460e      	mov	r6, r1
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 801d8d4:	f7ff fb6f 	bl	801cfb6 <lv_obj_get_scroll_snap_y>
 801d8d8:	4605      	mov	r5, r0
 801d8da:	b9a0      	cbnz	r0, 801d906 <lv_obj_readjust_scroll+0x3a>
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 801d8dc:	4620      	mov	r0, r4
 801d8de:	f7ff fb76 	bl	801cfce <lv_obj_get_scroll_y>
 801d8e2:	4607      	mov	r7, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 801d8e4:	4620      	mov	r0, r4
 801d8e6:	f7e8 f96b 	bl	8005bc0 <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 801d8ea:	1e02      	subs	r2, r0, #0
 801d8ec:	da0b      	bge.n	801d906 <lv_obj_readjust_scroll+0x3a>
 801d8ee:	2f00      	cmp	r7, #0
 801d8f0:	dd09      	ble.n	801d906 <lv_obj_readjust_scroll+0x3a>
            sb = LV_MIN(st, -sb);
 801d8f2:	4252      	negs	r2, r2
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 801d8f4:	4633      	mov	r3, r6
 801d8f6:	4629      	mov	r1, r5
 801d8f8:	4620      	mov	r0, r4
            sb = LV_MIN(st, -sb);
 801d8fa:	42ba      	cmp	r2, r7
 801d8fc:	bfa8      	it	ge
 801d8fe:	463a      	movge	r2, r7
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 801d900:	b212      	sxth	r2, r2
 801d902:	f7e8 fa95 	bl	8005e30 <lv_obj_scroll_by>
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 801d906:	4620      	mov	r0, r4
 801d908:	f7ff fb4f 	bl	801cfaa <lv_obj_get_scroll_snap_x>
 801d90c:	4680      	mov	r8, r0
 801d90e:	bb28      	cbnz	r0, 801d95c <lv_obj_readjust_scroll+0x90>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 801d910:	4620      	mov	r0, r4
 801d912:	f7e8 f9a7 	bl	8005c64 <lv_obj_get_scroll_left>
 801d916:	4607      	mov	r7, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 801d918:	4620      	mov	r0, r4
 801d91a:	f7e8 fa0b 	bl	8005d34 <lv_obj_get_scroll_right>
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801d91e:	4641      	mov	r1, r8
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 801d920:	4605      	mov	r5, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801d922:	4620      	mov	r0, r4
 801d924:	f7ff faed 	bl	801cf02 <lv_obj_get_style_base_dir>
 801d928:	2801      	cmp	r0, #1
 801d92a:	d00f      	beq.n	801d94c <lv_obj_readjust_scroll+0x80>
            if(sr < 0 && sl > 0) {
 801d92c:	2d00      	cmp	r5, #0
 801d92e:	da15      	bge.n	801d95c <lv_obj_readjust_scroll+0x90>
 801d930:	2f00      	cmp	r7, #0
 801d932:	dd13      	ble.n	801d95c <lv_obj_readjust_scroll+0x90>
                sr = LV_MIN(sl, -sr);
 801d934:	426d      	negs	r5, r5
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 801d936:	4633      	mov	r3, r6
 801d938:	4642      	mov	r2, r8
                sr = LV_MIN(sl, -sr);
 801d93a:	42bd      	cmp	r5, r7
 801d93c:	bfa8      	it	ge
 801d93e:	463d      	movge	r5, r7
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 801d940:	b229      	sxth	r1, r5
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 801d942:	4620      	mov	r0, r4
}
 801d944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 801d948:	f7e8 ba72 	b.w	8005e30 <lv_obj_scroll_by>
            if(sl < 0 && sr > 0) {
 801d94c:	2f00      	cmp	r7, #0
 801d94e:	da05      	bge.n	801d95c <lv_obj_readjust_scroll+0x90>
 801d950:	2d00      	cmp	r5, #0
 801d952:	dd03      	ble.n	801d95c <lv_obj_readjust_scroll+0x90>
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 801d954:	4633      	mov	r3, r6
 801d956:	4642      	mov	r2, r8
 801d958:	4639      	mov	r1, r7
 801d95a:	e7f2      	b.n	801d942 <lv_obj_readjust_scroll+0x76>
}
 801d95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d960 <refresh_children_style>:
{
 801d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d962:	4607      	mov	r7, r0
    for(i = 0; i < child_cnt; i++) {
 801d964:	2400      	movs	r4, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801d966:	f000 fc55 	bl	801e214 <lv_obj_get_child_cnt>
 801d96a:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 801d96c:	42b4      	cmp	r4, r6
 801d96e:	d100      	bne.n	801d972 <refresh_children_style+0x12>
}
 801d970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * child = obj->spec_attr->children[i];
 801d972:	68bb      	ldr	r3, [r7, #8]
 801d974:	681b      	ldr	r3, [r3, #0]
 801d976:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    for(i = 0; i < child_cnt; i++) {
 801d97a:	3401      	adds	r4, #1
        lv_obj_invalidate(child);
 801d97c:	4628      	mov	r0, r5
 801d97e:	f7ff f98d 	bl	801cc9c <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 801d982:	2200      	movs	r2, #0
 801d984:	212a      	movs	r1, #42	; 0x2a
 801d986:	4628      	mov	r0, r5
 801d988:	f7e6 fedc 	bl	8004744 <lv_event_send>
        lv_obj_invalidate(child);
 801d98c:	4628      	mov	r0, r5
 801d98e:	f7ff f985 	bl	801cc9c <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 801d992:	4628      	mov	r0, r5
 801d994:	f7ff ffe4 	bl	801d960 <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 801d998:	e7e8      	b.n	801d96c <refresh_children_style+0xc>

0801d99a <get_local_style>:
{
 801d99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 801d99e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
{
 801d9a0:	4604      	mov	r4, r0
 801d9a2:	460f      	mov	r7, r1
        if(obj->styles[i].is_local &&
 801d9a4:	68c0      	ldr	r0, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 801d9a6:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801d9aa:	2200      	movs	r2, #0
 801d9ac:	4293      	cmp	r3, r2
 801d9ae:	d80c      	bhi.n	801d9ca <get_local_style+0x30>
    obj->style_cnt++;
 801d9b0:	3301      	adds	r3, #1
 801d9b2:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 801d9b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d9b8:	f363 02c8 	bfi	r2, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801d9bc:	00d9      	lsls	r1, r3, #3
    obj->style_cnt++;
 801d9be:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801d9c0:	f7f4 fee0 	bl	8012784 <lv_mem_realloc>
 801d9c4:	60e0      	str	r0, [r4, #12]
    LV_ASSERT_MALLOC(obj->styles);
 801d9c6:	b980      	cbnz	r0, 801d9ea <get_local_style+0x50>
 801d9c8:	e7fe      	b.n	801d9c8 <get_local_style+0x2e>
        if(obj->styles[i].is_local &&
 801d9ca:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801d9ce:	00d5      	lsls	r5, r2, #3
 801d9d0:	79ce      	ldrb	r6, [r1, #7]
 801d9d2:	07f6      	lsls	r6, r6, #31
 801d9d4:	d507      	bpl.n	801d9e6 <get_local_style+0x4c>
           obj->styles[i].selector == selector) {
 801d9d6:	6849      	ldr	r1, [r1, #4]
 801d9d8:	f3c1 0117 	ubfx	r1, r1, #0, #24
        if(obj->styles[i].is_local &&
 801d9dc:	42b9      	cmp	r1, r7
 801d9de:	d102      	bne.n	801d9e6 <get_local_style+0x4c>
            return obj->styles[i].style;
 801d9e0:	5940      	ldr	r0, [r0, r5]
}
 801d9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 801d9e6:	3201      	adds	r2, #1
 801d9e8:	e7e0      	b.n	801d9ac <get_local_style+0x12>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801d9ea:	8c65      	ldrh	r5, [r4, #34]	; 0x22
 801d9ec:	f3c5 05c5 	ubfx	r5, r5, #3, #6
 801d9f0:	3d01      	subs	r5, #1
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 801d9f2:	68e0      	ldr	r0, [r4, #12]
 801d9f4:	00ee      	lsls	r6, r5, #3
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801d9f6:	bb05      	cbnz	r5, 801da3a <get_local_style+0xa0>
 801d9f8:	2208      	movs	r2, #8
 801d9fa:	2100      	movs	r1, #0
 801d9fc:	4430      	add	r0, r6
 801d9fe:	f7fc fec3 	bl	801a788 <memset>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 801da02:	f8d4 800c 	ldr.w	r8, [r4, #12]
 801da06:	2008      	movs	r0, #8
 801da08:	f7f4 fe86 	bl	8012718 <lv_mem_alloc>
 801da0c:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
    lv_style_init(obj->styles[i].style);
 801da10:	68e3      	ldr	r3, [r4, #12]
 801da12:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
 801da16:	f007 f951 	bl	8024cbc <lv_style_init>
    obj->styles[i].is_local = 1;
 801da1a:	68e3      	ldr	r3, [r4, #12]
 801da1c:	4433      	add	r3, r6
 801da1e:	79da      	ldrb	r2, [r3, #7]
 801da20:	f042 0201 	orr.w	r2, r2, #1
 801da24:	71da      	strb	r2, [r3, #7]
    obj->styles[i].selector = selector;
 801da26:	68e3      	ldr	r3, [r4, #12]
 801da28:	4433      	add	r3, r6
 801da2a:	685a      	ldr	r2, [r3, #4]
 801da2c:	f367 0217 	bfi	r2, r7, #0, #24
 801da30:	605a      	str	r2, [r3, #4]
    return obj->styles[i].style;
 801da32:	68e3      	ldr	r3, [r4, #12]
 801da34:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
 801da38:	e7d3      	b.n	801d9e2 <get_local_style+0x48>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 801da3a:	f1a6 0308 	sub.w	r3, r6, #8
        obj->styles[i] = obj->styles[i - 1];
 801da3e:	1982      	adds	r2, r0, r6
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 801da40:	4403      	add	r3, r0
 801da42:	79d9      	ldrb	r1, [r3, #7]
 801da44:	0789      	lsls	r1, r1, #30
 801da46:	d1d7      	bne.n	801d9f8 <get_local_style+0x5e>
        obj->styles[i] = obj->styles[i - 1];
 801da48:	e893 0003 	ldmia.w	r3, {r0, r1}
 801da4c:	e882 0003 	stmia.w	r2, {r0, r1}
 801da50:	e7ce      	b.n	801d9f0 <get_local_style+0x56>

0801da52 <get_trans_style>:
{
 801da52:	b570      	push	{r4, r5, r6, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 801da54:	8c43      	ldrh	r3, [r0, #34]	; 0x22
{
 801da56:	4604      	mov	r4, r0
 801da58:	460d      	mov	r5, r1
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 801da5a:	68c0      	ldr	r0, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 801da5c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801da60:	2200      	movs	r2, #0
 801da62:	4293      	cmp	r3, r2
 801da64:	d803      	bhi.n	801da6e <get_trans_style+0x1c>
    if(i != obj->style_cnt) return &obj->styles[i];
 801da66:	d00e      	beq.n	801da86 <get_trans_style+0x34>
 801da68:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
}
 801da6c:	bd70      	pop	{r4, r5, r6, pc}
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 801da6e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801da72:	79ce      	ldrb	r6, [r1, #7]
 801da74:	07b6      	lsls	r6, r6, #30
 801da76:	d504      	bpl.n	801da82 <get_trans_style+0x30>
 801da78:	6849      	ldr	r1, [r1, #4]
 801da7a:	f3c1 0117 	ubfx	r1, r1, #0, #24
 801da7e:	42a9      	cmp	r1, r5
 801da80:	d0f2      	beq.n	801da68 <get_trans_style+0x16>
    for(i = 0; i < obj->style_cnt; i++) {
 801da82:	3201      	adds	r2, #1
 801da84:	e7ed      	b.n	801da62 <get_trans_style+0x10>
    obj->style_cnt++;
 801da86:	3301      	adds	r3, #1
 801da88:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 801da8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801da8e:	f363 02c8 	bfi	r2, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801da92:	00d9      	lsls	r1, r3, #3
    obj->style_cnt++;
 801da94:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801da96:	f7f4 fe75 	bl	8012784 <lv_mem_realloc>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801da9a:	8c66      	ldrh	r6, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801da9c:	60e0      	str	r0, [r4, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801da9e:	f3c6 06c5 	ubfx	r6, r6, #3, #6
 801daa2:	3e01      	subs	r6, #1
        obj->styles[i] = obj->styles[i - 1];
 801daa4:	68e0      	ldr	r0, [r4, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801daa6:	d118      	bne.n	801dada <get_trans_style+0x88>
 801daa8:	2208      	movs	r2, #8
 801daaa:	4631      	mov	r1, r6
 801daac:	f7fc fe6c 	bl	801a788 <memset>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 801dab0:	68e6      	ldr	r6, [r4, #12]
 801dab2:	2008      	movs	r0, #8
 801dab4:	f7f4 fe30 	bl	8012718 <lv_mem_alloc>
 801dab8:	6030      	str	r0, [r6, #0]
    lv_style_init(obj->styles[0].style);
 801daba:	68e3      	ldr	r3, [r4, #12]
 801dabc:	6818      	ldr	r0, [r3, #0]
 801dabe:	f007 f8fd 	bl	8024cbc <lv_style_init>
    obj->styles[0].is_trans = 1;
 801dac2:	68e2      	ldr	r2, [r4, #12]
 801dac4:	79d3      	ldrb	r3, [r2, #7]
 801dac6:	f043 0302 	orr.w	r3, r3, #2
 801daca:	71d3      	strb	r3, [r2, #7]
    obj->styles[0].selector = selector;
 801dacc:	68e3      	ldr	r3, [r4, #12]
 801dace:	685a      	ldr	r2, [r3, #4]
 801dad0:	f365 0217 	bfi	r2, r5, #0, #24
 801dad4:	605a      	str	r2, [r3, #4]
    return &obj->styles[0];
 801dad6:	68e0      	ldr	r0, [r4, #12]
 801dad8:	e7c8      	b.n	801da6c <get_trans_style+0x1a>
        obj->styles[i] = obj->styles[i - 1];
 801dada:	eb00 03c6 	add.w	r3, r0, r6, lsl #3
 801dade:	e913 0003 	ldmdb	r3, {r0, r1}
 801dae2:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801dae6:	e7dc      	b.n	801daa2 <get_trans_style+0x50>

0801dae8 <lv_obj_get_style_prop>:
{
 801dae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daec:	4604      	mov	r4, r0
 801daee:	b085      	sub	sp, #20
    return _lv_style_prop_lookup_flags(prop) & flag;
 801daf0:	4610      	mov	r0, r2
 801daf2:	460f      	mov	r7, r1
 801daf4:	4615      	mov	r5, r2
 801daf6:	f7f4 ff79 	bl	80129ec <_lv_style_prop_lookup_flags>
 801dafa:	f000 0a01 	and.w	sl, r0, #1
    while(obj) {
 801dafe:	2c00      	cmp	r4, #0
 801db00:	d154      	bne.n	801dbac <lv_obj_get_style_prop+0xc4>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 801db02:	2f00      	cmp	r7, #0
 801db04:	f040 808f 	bne.w	801dc26 <lv_obj_get_style_prop+0x13e>
 801db08:	2d01      	cmp	r5, #1
 801db0a:	d002      	beq.n	801db12 <lv_obj_get_style_prop+0x2a>
 801db0c:	2d04      	cmp	r5, #4
 801db0e:	f040 808a 	bne.w	801dc26 <lv_obj_get_style_prop+0x13e>
            const lv_obj_class_t * cls = obj->class_p;
 801db12:	6823      	ldr	r3, [r4, #0]
            while(cls) {
 801db14:	2b00      	cmp	r3, #0
 801db16:	d17c      	bne.n	801dc12 <lv_obj_get_style_prop+0x12a>
                value_act.num = 0;
 801db18:	4618      	mov	r0, r3
 801db1a:	e074      	b.n	801dc06 <lv_obj_get_style_prop+0x11e>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 801db1c:	68e2      	ldr	r2, [r4, #12]
 801db1e:	00f1      	lsls	r1, r6, #3
 801db20:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
        if(obj_style->is_trans == false) break;
 801db24:	79d8      	ldrb	r0, [r3, #7]
 801db26:	0780      	lsls	r0, r0, #30
 801db28:	d558      	bpl.n	801dbdc <lv_obj_get_style_prop+0xf4>
        if(skip_trans) continue;
 801db2a:	f1b9 0f00 	cmp.w	r9, #0
 801db2e:	d001      	beq.n	801db34 <lv_obj_get_style_prop+0x4c>
    for(i = 0; i < obj->style_cnt; i++) {
 801db30:	3601      	adds	r6, #1
 801db32:	e04e      	b.n	801dbd2 <lv_obj_get_style_prop+0xea>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 801db34:	685b      	ldr	r3, [r3, #4]
    return selector & 0xFF0000;
 801db36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 801db3a:	42bb      	cmp	r3, r7
 801db3c:	d1f8      	bne.n	801db30 <lv_obj_get_style_prop+0x48>
        if((obj_style->style->has_group & group) == 0) continue;
 801db3e:	5850      	ldr	r0, [r2, r1]
 801db40:	7983      	ldrb	r3, [r0, #6]
 801db42:	ea18 0f03 	tst.w	r8, r3
 801db46:	d0f3      	beq.n	801db30 <lv_obj_get_style_prop+0x48>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 801db48:	aa03      	add	r2, sp, #12
 801db4a:	4629      	mov	r1, r5
 801db4c:	f007 f92b 	bl	8024da6 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 801db50:	2801      	cmp	r0, #1
 801db52:	d101      	bne.n	801db58 <lv_obj_get_style_prop+0x70>
        *v = value_tmp;
 801db54:	9803      	ldr	r0, [sp, #12]
    if(found != LV_STYLE_RES_FOUND) {
 801db56:	e056      	b.n	801dc06 <lv_obj_get_style_prop+0x11e>
        else if(found == LV_STYLE_RES_INHERIT) {
 801db58:	2802      	cmp	r0, #2
 801db5a:	d1e9      	bne.n	801db30 <lv_obj_get_style_prop+0x48>
        if(!inheritable) break;
 801db5c:	f1ba 0f00 	cmp.w	sl, #0
 801db60:	d0cf      	beq.n	801db02 <lv_obj_get_style_prop+0x1a>
        obj = lv_obj_get_parent(obj);
 801db62:	4620      	mov	r0, r4
 801db64:	f000 fb44 	bl	801e1f0 <lv_obj_get_parent>
 801db68:	4604      	mov	r4, r0
 801db6a:	e7c8      	b.n	801dafe <lv_obj_get_style_prop+0x16>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 801db6c:	68e2      	ldr	r2, [r4, #12]
 801db6e:	f852 0036 	ldr.w	r0, [r2, r6, lsl #3]
 801db72:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
 801db76:	7982      	ldrb	r2, [r0, #6]
 801db78:	ea18 0f02 	tst.w	r8, r2
 801db7c:	d006      	beq.n	801db8c <lv_obj_get_style_prop+0xa4>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 801db7e:	684a      	ldr	r2, [r1, #4]
 801db80:	f3c2 0117 	ubfx	r1, r2, #0, #24
    return selector & 0xFF0000;
 801db84:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
        if(part_act != part) continue;
 801db88:	42ba      	cmp	r2, r7
 801db8a:	d02a      	beq.n	801dbe2 <lv_obj_get_style_prop+0xfa>
    for(i = 0; i < obj->style_cnt; i++) {
 801db8c:	4699      	mov	r9, r3
    for(; i < obj->style_cnt; i++) {
 801db8e:	3601      	adds	r6, #1
 801db90:	464b      	mov	r3, r9
 801db92:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 801db94:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 801db98:	4296      	cmp	r6, r2
 801db9a:	d3e7      	bcc.n	801db6c <lv_obj_get_style_prop+0x84>
    if(weight >= 0) {
 801db9c:	3301      	adds	r3, #1
 801db9e:	d1d9      	bne.n	801db54 <lv_obj_get_style_prop+0x6c>
        if(!inheritable) break;
 801dba0:	f1ba 0f00 	cmp.w	sl, #0
 801dba4:	d0ad      	beq.n	801db02 <lv_obj_get_style_prop+0x1a>
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 801dba6:	2f00      	cmp	r7, #0
 801dba8:	d0db      	beq.n	801db62 <lv_obj_get_style_prop+0x7a>
            part = LV_PART_MAIN;
 801dbaa:	2700      	movs	r7, #0
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 801dbac:	4628      	mov	r0, r5
    for(i = 0; i < obj->style_cnt; i++) {
 801dbae:	2600      	movs	r6, #0
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 801dbb0:	f007 f94a 	bl	8024e48 <_lv_style_get_prop_group>
 801dbb4:	2301      	movs	r3, #1
    lv_state_t state = obj->state;
 801dbb6:	f8b4 b020 	ldrh.w	fp, [r4, #32]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 801dbba:	fa03 f800 	lsl.w	r8, r3, r0
    bool skip_trans = obj->skip_trans;
 801dbbe:	f894 9022 	ldrb.w	r9, [r4, #34]	; 0x22
    lv_state_t state_inv = ~state;
 801dbc2:	ea6f 030b 	mvn.w	r3, fp
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 801dbc6:	fa5f f888 	uxtb.w	r8, r8
    bool skip_trans = obj->skip_trans;
 801dbca:	f3c9 0980 	ubfx	r9, r9, #2, #1
    lv_state_t state_inv = ~state;
 801dbce:	b29b      	uxth	r3, r3
 801dbd0:	9300      	str	r3, [sp, #0]
    for(i = 0; i < obj->style_cnt; i++) {
 801dbd2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 801dbd4:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801dbd8:	429e      	cmp	r6, r3
 801dbda:	d39f      	bcc.n	801db1c <lv_obj_get_style_prop+0x34>
 801dbdc:	f04f 33ff 	mov.w	r3, #4294967295
 801dbe0:	e7d7      	b.n	801db92 <lv_obj_get_style_prop+0xaa>
        if((state_act & state_inv)) continue;
 801dbe2:	9a00      	ldr	r2, [sp, #0]
    return selector & 0xFFFF;
 801dbe4:	fa1f f981 	uxth.w	r9, r1
        if((state_act & state_inv)) continue;
 801dbe8:	4211      	tst	r1, r2
 801dbea:	d1cf      	bne.n	801db8c <lv_obj_get_style_prop+0xa4>
        if(state_act <= weight) continue;
 801dbec:	4599      	cmp	r9, r3
 801dbee:	ddcd      	ble.n	801db8c <lv_obj_get_style_prop+0xa4>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 801dbf0:	aa03      	add	r2, sp, #12
 801dbf2:	4629      	mov	r1, r5
 801dbf4:	9301      	str	r3, [sp, #4]
 801dbf6:	f007 f8d6 	bl	8024da6 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 801dbfa:	2801      	cmp	r0, #1
 801dbfc:	9b01      	ldr	r3, [sp, #4]
 801dbfe:	d105      	bne.n	801dc0c <lv_obj_get_style_prop+0x124>
            if(state_act == state) {
 801dc00:	45cb      	cmp	fp, r9
                *v = value_tmp;
 801dc02:	9803      	ldr	r0, [sp, #12]
            if(state_act == state) {
 801dc04:	d1c3      	bne.n	801db8e <lv_obj_get_style_prop+0xa6>
}
 801dc06:	b005      	add	sp, #20
 801dc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(found == LV_STYLE_RES_INHERIT) {
 801dc0c:	2802      	cmp	r0, #2
 801dc0e:	d1bd      	bne.n	801db8c <lv_obj_get_style_prop+0xa4>
 801dc10:	e7a4      	b.n	801db5c <lv_obj_get_style_prop+0x74>
                if(prop == LV_STYLE_WIDTH) {
 801dc12:	2d01      	cmp	r5, #1
                    if(cls->width_def != 0) break;
 801dc14:	bf0c      	ite	eq
 801dc16:	f9b3 0014 	ldrsheq.w	r0, [r3, #20]
                    if(cls->height_def != 0) break;
 801dc1a:	f9b3 0016 	ldrshne.w	r0, [r3, #22]
 801dc1e:	2800      	cmp	r0, #0
 801dc20:	d1f1      	bne.n	801dc06 <lv_obj_get_style_prop+0x11e>
                cls = cls->base_class;
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	e776      	b.n	801db14 <lv_obj_get_style_prop+0x2c>
            value_act = lv_style_prop_get_default(prop);
 801dc26:	4628      	mov	r0, r5
 801dc28:	f7f4 fe8e 	bl	8012948 <lv_style_prop_get_default>
 801dc2c:	e7eb      	b.n	801dc06 <lv_obj_get_style_prop+0x11e>

0801dc2e <trans_anim_start_cb>:
{
 801dc2e:	b570      	push	{r4, r5, r6, lr}
    trans_t * tr = a->var;
 801dc30:	6804      	ldr	r4, [r0, #0]
    return selector & 0xFF0000;
 801dc32:	68a5      	ldr	r5, [r4, #8]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 801dc34:	88a2      	ldrh	r2, [r4, #4]
    return selector & 0xFF0000;
 801dc36:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 801dc3a:	6820      	ldr	r0, [r4, #0]
 801dc3c:	4629      	mov	r1, r5
 801dc3e:	f7ff ff53 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_prop_t prop_tmp = tr->prop;
 801dc42:	88a6      	ldrh	r6, [r4, #4]
    tr->prop = LV_STYLE_PROP_INV;
 801dc44:	2300      	movs	r3, #0
    trans_del(tr->obj, part, prop_tmp, tr);
 801dc46:	4629      	mov	r1, r5
 801dc48:	4632      	mov	r2, r6
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 801dc4a:	60e0      	str	r0, [r4, #12]
    tr->prop = LV_STYLE_PROP_INV;
 801dc4c:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 801dc4e:	4623      	mov	r3, r4
 801dc50:	6820      	ldr	r0, [r4, #0]
 801dc52:	f7e8 fb1f 	bl	8006294 <trans_del.isra.0>
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 801dc56:	68a1      	ldr	r1, [r4, #8]
 801dc58:	6820      	ldr	r0, [r4, #0]
    tr->prop = prop_tmp;
 801dc5a:	80a6      	strh	r6, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 801dc5c:	f7ff fef9 	bl	801da52 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 801dc60:	68e2      	ldr	r2, [r4, #12]
 801dc62:	88a1      	ldrh	r1, [r4, #4]
 801dc64:	6800      	ldr	r0, [r0, #0]
}
 801dc66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 801dc6a:	f7f4 beb9 	b.w	80129e0 <lv_style_set_prop>

0801dc6e <lv_obj_add_style>:
{
 801dc6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc72:	4615      	mov	r5, r2
 801dc74:	4604      	mov	r4, r0
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 801dc76:	2300      	movs	r3, #0
{
 801dc78:	460e      	mov	r6, r1
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 801dc7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dc7e:	4629      	mov	r1, r5
 801dc80:	f7e8 fb08 	bl	8006294 <trans_del.isra.0>
    for(i = 0; i < obj->style_cnt; i++) {
 801dc84:	8c63      	ldrh	r3, [r4, #34]	; 0x22
        if(obj->styles[i].is_trans) continue;
 801dc86:	68e0      	ldr	r0, [r4, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 801dc88:	f04f 0800 	mov.w	r8, #0
 801dc8c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801dc90:	4543      	cmp	r3, r8
 801dc92:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801dc96:	d826      	bhi.n	801dce6 <lv_obj_add_style+0x78>
    obj->style_cnt++;
 801dc98:	3301      	adds	r3, #1
 801dc9a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 801dc9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801dca0:	f363 02c8 	bfi	r2, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801dca4:	00d9      	lsls	r1, r3, #3
    obj->style_cnt++;
 801dca6:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801dca8:	f7f4 fd6c 	bl	8012784 <lv_mem_realloc>
    for(j = obj->style_cnt - 1; j > i ; j--) {
 801dcac:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801dcae:	60e0      	str	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 801dcb0:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801dcb4:	3b01      	subs	r3, #1
        obj->styles[j] = obj->styles[j - 1];
 801dcb6:	68e0      	ldr	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 801dcb8:	4598      	cmp	r8, r3
 801dcba:	d31b      	bcc.n	801dcf4 <lv_obj_add_style+0x86>
 801dcbc:	2208      	movs	r2, #8
 801dcbe:	2100      	movs	r1, #0
 801dcc0:	4438      	add	r0, r7
 801dcc2:	f7fc fd61 	bl	801a788 <memset>
    obj->styles[i].style = style;
 801dcc6:	68e3      	ldr	r3, [r4, #12]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 801dcc8:	4629      	mov	r1, r5
 801dcca:	4620      	mov	r0, r4
    obj->styles[i].style = style;
 801dccc:	51de      	str	r6, [r3, r7]
    obj->styles[i].selector = selector;
 801dcce:	68e3      	ldr	r3, [r4, #12]
 801dcd0:	443b      	add	r3, r7
 801dcd2:	685a      	ldr	r2, [r3, #4]
 801dcd4:	f365 0217 	bfi	r2, r5, #0, #24
 801dcd8:	605a      	str	r2, [r3, #4]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 801dcda:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
 801dcde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 801dce2:	f7e8 bb35 	b.w	8006350 <lv_obj_refresh_style>
        if(obj->styles[i].is_trans) continue;
 801dce6:	19c2      	adds	r2, r0, r7
        if(obj->styles[i].is_local) continue;
 801dce8:	79d2      	ldrb	r2, [r2, #7]
 801dcea:	0792      	lsls	r2, r2, #30
 801dcec:	d0d4      	beq.n	801dc98 <lv_obj_add_style+0x2a>
    for(i = 0; i < obj->style_cnt; i++) {
 801dcee:	f108 0801 	add.w	r8, r8, #1
 801dcf2:	e7cd      	b.n	801dc90 <lv_obj_add_style+0x22>
        obj->styles[j] = obj->styles[j - 1];
 801dcf4:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801dcf8:	e912 0003 	ldmdb	r2, {r0, r1}
 801dcfc:	e882 0003 	stmia.w	r2, {r0, r1}
 801dd00:	e7d8      	b.n	801dcb4 <lv_obj_add_style+0x46>

0801dd02 <report_style_change_core>:
{
 801dd02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 801dd04:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
{
 801dd06:	4605      	mov	r5, r0
 801dd08:	460c      	mov	r4, r1
    for(i = 0; i < obj->style_cnt; i++) {
 801dd0a:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 801dd0e:	f3c3 02c5 	ubfx	r2, r3, #3, #6
 801dd12:	d00d      	beq.n	801dd30 <report_style_change_core+0x2e>
        if(style == NULL || obj->styles[i].style == style) {
 801dd14:	b128      	cbz	r0, 801dd22 <report_style_change_core+0x20>
    for(i = 0; i < obj->style_cnt; i++) {
 801dd16:	2300      	movs	r3, #0
        if(style == NULL || obj->styles[i].style == style) {
 801dd18:	68e1      	ldr	r1, [r4, #12]
 801dd1a:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 801dd1e:	42a9      	cmp	r1, r5
 801dd20:	d10e      	bne.n	801dd40 <report_style_change_core+0x3e>
            lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 801dd22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dd26:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 801dd2a:	4620      	mov	r0, r4
 801dd2c:	f7e8 fb10 	bl	8006350 <lv_obj_refresh_style>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801dd30:	4620      	mov	r0, r4
    for(i = 0; i < child_cnt; i++) {
 801dd32:	2600      	movs	r6, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801dd34:	f000 fa6e 	bl	801e214 <lv_obj_get_child_cnt>
 801dd38:	4607      	mov	r7, r0
    for(i = 0; i < child_cnt; i++) {
 801dd3a:	42be      	cmp	r6, r7
 801dd3c:	d104      	bne.n	801dd48 <report_style_change_core+0x46>
}
 801dd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 801dd40:	3301      	adds	r3, #1
 801dd42:	429a      	cmp	r2, r3
 801dd44:	d8e8      	bhi.n	801dd18 <report_style_change_core+0x16>
 801dd46:	e7f3      	b.n	801dd30 <report_style_change_core+0x2e>
        report_style_change_core(style, obj->spec_attr->children[i]);
 801dd48:	68a3      	ldr	r3, [r4, #8]
 801dd4a:	4628      	mov	r0, r5
 801dd4c:	681b      	ldr	r3, [r3, #0]
 801dd4e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    for(i = 0; i < child_cnt; i++) {
 801dd52:	3601      	adds	r6, #1
        report_style_change_core(style, obj->spec_attr->children[i]);
 801dd54:	f7ff ffd5 	bl	801dd02 <report_style_change_core>
    for(i = 0; i < child_cnt; i++) {
 801dd58:	e7ef      	b.n	801dd3a <report_style_change_core+0x38>

0801dd5a <lv_obj_remove_style>:
{
 801dd5a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd5e:	4604      	mov	r4, r0
    return selector & 0xFFFF;
 801dd60:	fa1f f982 	uxth.w	r9, r2
    return selector & 0xFF0000;
 801dd64:	f402 057f 	and.w	r5, r2, #16711680	; 0xff0000
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 801dd68:	4688      	mov	r8, r1
 801dd6a:	b1d1      	cbz	r1, 801dda2 <lv_obj_remove_style+0x48>
 801dd6c:	79ce      	ldrb	r6, [r1, #7]
 801dd6e:	3e00      	subs	r6, #0
 801dd70:	bf18      	it	ne
 801dd72:	2601      	movne	r6, #1
 801dd74:	4276      	negs	r6, r6
 801dd76:	b2b6      	uxth	r6, r6
    bool deleted = false;
 801dd78:	2200      	movs	r2, #0
        if((state != LV_STATE_ANY && state_act != state) ||
 801dd7a:	f64f 7aff 	movw	sl, #65535	; 0xffff
    uint32_t i = 0;
 801dd7e:	4617      	mov	r7, r2
    while(i <  obj->style_cnt) {
 801dd80:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 801dd82:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801dd86:	42bb      	cmp	r3, r7
 801dd88:	d80e      	bhi.n	801dda8 <lv_obj_remove_style+0x4e>
    if(deleted && prop != LV_STYLE_PROP_INV) {
 801dd8a:	2a00      	cmp	r2, #0
 801dd8c:	d064      	beq.n	801de58 <lv_obj_remove_style+0xfe>
 801dd8e:	2e00      	cmp	r6, #0
 801dd90:	d062      	beq.n	801de58 <lv_obj_remove_style+0xfe>
        lv_obj_refresh_style(obj, part, prop);
 801dd92:	4629      	mov	r1, r5
 801dd94:	4620      	mov	r0, r4
 801dd96:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
 801dd9a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, part, prop);
 801dd9e:	f7e8 bad7 	b.w	8006350 <lv_obj_refresh_style>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 801dda2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801dda6:	e7e7      	b.n	801dd78 <lv_obj_remove_style+0x1e>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 801dda8:	68e0      	ldr	r0, [r4, #12]
        if((state != LV_STATE_ANY && state_act != state) ||
 801ddaa:	45d1      	cmp	r9, sl
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 801ddac:	ea4f 0bc7 	mov.w	fp, r7, lsl #3
 801ddb0:	eb00 01c7 	add.w	r1, r0, r7, lsl #3
 801ddb4:	684b      	ldr	r3, [r1, #4]
 801ddb6:	f3c3 0317 	ubfx	r3, r3, #0, #24
        if((state != LV_STATE_ANY && state_act != state) ||
 801ddba:	d003      	beq.n	801ddc4 <lv_obj_remove_style+0x6a>
 801ddbc:	fa1f fc83 	uxth.w	ip, r3
 801ddc0:	45cc      	cmp	ip, r9
 801ddc2:	d10d      	bne.n	801dde0 <lv_obj_remove_style+0x86>
 801ddc4:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 801ddc8:	d003      	beq.n	801ddd2 <lv_obj_remove_style+0x78>
    return selector & 0xFF0000;
 801ddca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
           (part != LV_PART_ANY && part_act != part) ||
 801ddce:	42ab      	cmp	r3, r5
 801ddd0:	d106      	bne.n	801dde0 <lv_obj_remove_style+0x86>
 801ddd2:	f1b8 0f00 	cmp.w	r8, #0
 801ddd6:	d005      	beq.n	801dde4 <lv_obj_remove_style+0x8a>
           (style != NULL && style != obj->styles[i].style)) {
 801ddd8:	f850 300b 	ldr.w	r3, [r0, fp]
 801dddc:	4543      	cmp	r3, r8
 801ddde:	d001      	beq.n	801dde4 <lv_obj_remove_style+0x8a>
            i++;
 801dde0:	3701      	adds	r7, #1
            continue;
 801dde2:	e7cd      	b.n	801dd80 <lv_obj_remove_style+0x26>
        if(obj->styles[i].is_trans) {
 801dde4:	79cb      	ldrb	r3, [r1, #7]
 801dde6:	0799      	lsls	r1, r3, #30
 801dde8:	d506      	bpl.n	801ddf8 <lv_obj_remove_style+0x9e>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 801ddea:	2300      	movs	r3, #0
 801ddec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ddf0:	4629      	mov	r1, r5
 801ddf2:	4620      	mov	r0, r4
 801ddf4:	f7e8 fa4e 	bl	8006294 <trans_del.isra.0>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 801ddf8:	68e3      	ldr	r3, [r4, #12]
 801ddfa:	eb03 020b 	add.w	r2, r3, fp
 801ddfe:	79d2      	ldrb	r2, [r2, #7]
 801de00:	0792      	lsls	r2, r2, #30
 801de02:	d00c      	beq.n	801de1e <lv_obj_remove_style+0xc4>
            lv_style_reset(obj->styles[i].style);
 801de04:	f853 000b 	ldr.w	r0, [r3, fp]
 801de08:	f006 ff5c 	bl	8024cc4 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 801de0c:	68e3      	ldr	r3, [r4, #12]
 801de0e:	f853 000b 	ldr.w	r0, [r3, fp]
 801de12:	f7f4 fc9f 	bl	8012754 <lv_mem_free>
            obj->styles[i].style = NULL;
 801de16:	68e3      	ldr	r3, [r4, #12]
 801de18:	2200      	movs	r2, #0
 801de1a:	f843 200b 	str.w	r2, [r3, fp]
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 801de1e:	463a      	mov	r2, r7
 801de20:	e006      	b.n	801de30 <lv_obj_remove_style+0xd6>
            obj->styles[j] = obj->styles[j + 1];
 801de22:	3201      	adds	r2, #1
 801de24:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 801de28:	e893 0003 	ldmia.w	r3, {r0, r1}
 801de2c:	e903 0003 	stmdb	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 801de30:	8c63      	ldrh	r3, [r4, #34]	; 0x22
            obj->styles[j] = obj->styles[j + 1];
 801de32:	68e0      	ldr	r0, [r4, #12]
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 801de34:	f3c3 01c5 	ubfx	r1, r3, #3, #6
 801de38:	f101 3cff 	add.w	ip, r1, #4294967295
 801de3c:	4594      	cmp	ip, r2
 801de3e:	d8f0      	bhi.n	801de22 <lv_obj_remove_style+0xc8>
        obj->style_cnt--;
 801de40:	313f      	adds	r1, #63	; 0x3f
 801de42:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801de46:	f361 03c8 	bfi	r3, r1, #3, #6
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801de4a:	00c9      	lsls	r1, r1, #3
        obj->style_cnt--;
 801de4c:	8463      	strh	r3, [r4, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801de4e:	f7f4 fc99 	bl	8012784 <lv_mem_realloc>
        deleted = true;
 801de52:	2201      	movs	r2, #1
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801de54:	60e0      	str	r0, [r4, #12]
        deleted = true;
 801de56:	e793      	b.n	801dd80 <lv_obj_remove_style+0x26>
}
 801de58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de5c <lv_obj_set_local_style_prop>:
{
 801de5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de5e:	460d      	mov	r5, r1
 801de60:	4617      	mov	r7, r2
 801de62:	461c      	mov	r4, r3
    lv_style_t * style = get_local_style(obj, selector);
 801de64:	4619      	mov	r1, r3
{
 801de66:	4606      	mov	r6, r0
    lv_style_t * style = get_local_style(obj, selector);
 801de68:	f7ff fd97 	bl	801d99a <get_local_style>
    lv_style_set_prop(style, prop, value);
 801de6c:	463a      	mov	r2, r7
 801de6e:	4629      	mov	r1, r5
 801de70:	f7f4 fdb6 	bl	80129e0 <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 801de74:	462a      	mov	r2, r5
 801de76:	4621      	mov	r1, r4
 801de78:	4630      	mov	r0, r6
}
 801de7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_refresh_style(obj, selector, prop);
 801de7e:	f7e8 ba67 	b.w	8006350 <lv_obj_refresh_style>

0801de82 <lv_obj_get_local_style_prop>:
{
 801de82:	b5f0      	push	{r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 801de84:	8c45      	ldrh	r5, [r0, #34]	; 0x22
 801de86:	2400      	movs	r4, #0
 801de88:	f3c5 05c5 	ubfx	r5, r5, #3, #6
 801de8c:	42a5      	cmp	r5, r4
 801de8e:	d801      	bhi.n	801de94 <lv_obj_get_local_style_prop+0x12>
}
 801de90:	2000      	movs	r0, #0
 801de92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(obj->styles[i].is_local &&
 801de94:	68c7      	ldr	r7, [r0, #12]
 801de96:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 801de9a:	eb07 06c4 	add.w	r6, r7, r4, lsl #3
 801de9e:	f896 e007 	ldrb.w	lr, [r6, #7]
 801dea2:	f01e 0f01 	tst.w	lr, #1
 801dea6:	d00a      	beq.n	801debe <lv_obj_get_local_style_prop+0x3c>
           obj->styles[i].selector == selector) {
 801dea8:	6876      	ldr	r6, [r6, #4]
 801deaa:	f3c6 0617 	ubfx	r6, r6, #0, #24
        if(obj->styles[i].is_local &&
 801deae:	429e      	cmp	r6, r3
 801deb0:	d105      	bne.n	801debe <lv_obj_get_local_style_prop+0x3c>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 801deb2:	f857 000c 	ldr.w	r0, [r7, ip]
}
 801deb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 801deba:	f006 bf74 	b.w	8024da6 <lv_style_get_prop>
    for(i = 0; i < obj->style_cnt; i++) {
 801debe:	3401      	adds	r4, #1
 801dec0:	e7e4      	b.n	801de8c <lv_obj_get_local_style_prop+0xa>

0801dec2 <lv_obj_remove_local_style_prop>:
{
 801dec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dec4:	460f      	mov	r7, r1
    for(i = 0; i < obj->style_cnt; i++) {
 801dec6:	8c41      	ldrh	r1, [r0, #34]	; 0x22
{
 801dec8:	4604      	mov	r4, r0
 801deca:	4616      	mov	r6, r2
    for(i = 0; i < obj->style_cnt; i++) {
 801decc:	f3c1 01c5 	ubfx	r1, r1, #3, #6
 801ded0:	2300      	movs	r3, #0
 801ded2:	4299      	cmp	r1, r3
 801ded4:	d803      	bhi.n	801dede <lv_obj_remove_local_style_prop+0x1c>
    if(i == obj->style_cnt) return false;
 801ded6:	d10d      	bne.n	801def4 <lv_obj_remove_local_style_prop+0x32>
 801ded8:	2500      	movs	r5, #0
}
 801deda:	4628      	mov	r0, r5
 801dedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(obj->styles[i].is_local &&
 801dede:	68e2      	ldr	r2, [r4, #12]
 801dee0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801dee4:	79d0      	ldrb	r0, [r2, #7]
 801dee6:	07c0      	lsls	r0, r0, #31
 801dee8:	d513      	bpl.n	801df12 <lv_obj_remove_local_style_prop+0x50>
           obj->styles[i].selector == selector) {
 801deea:	6852      	ldr	r2, [r2, #4]
 801deec:	f3c2 0217 	ubfx	r2, r2, #0, #24
        if(obj->styles[i].is_local &&
 801def0:	42b2      	cmp	r2, r6
 801def2:	d10e      	bne.n	801df12 <lv_obj_remove_local_style_prop+0x50>
    lv_res_t res = lv_style_remove_prop(obj->styles[i].style, prop);
 801def4:	68e2      	ldr	r2, [r4, #12]
 801def6:	4639      	mov	r1, r7
 801def8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801defc:	f006 fef7 	bl	8024cee <lv_style_remove_prop>
    if(res == LV_RES_OK) {
 801df00:	4605      	mov	r5, r0
 801df02:	2800      	cmp	r0, #0
 801df04:	d0e8      	beq.n	801ded8 <lv_obj_remove_local_style_prop+0x16>
        lv_obj_refresh_style(obj, selector, prop);
 801df06:	463a      	mov	r2, r7
 801df08:	4631      	mov	r1, r6
 801df0a:	4620      	mov	r0, r4
 801df0c:	f7e8 fa20 	bl	8006350 <lv_obj_refresh_style>
 801df10:	e7e3      	b.n	801deda <lv_obj_remove_local_style_prop+0x18>
    for(i = 0; i < obj->style_cnt; i++) {
 801df12:	3301      	adds	r3, #1
 801df14:	e7dd      	b.n	801ded2 <lv_obj_remove_local_style_prop+0x10>

0801df16 <_lv_obj_style_apply_color_filter>:
{
 801df16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df18:	460f      	mov	r7, r1
 801df1a:	4615      	mov	r5, r2
    if(obj == NULL) return v;
 801df1c:	4606      	mov	r6, r0
 801df1e:	b1a0      	cbz	r0, 801df4a <_lv_obj_style_apply_color_filter+0x34>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 801df20:	2261      	movs	r2, #97	; 0x61
 801df22:	f7ff fde1 	bl	801dae8 <lv_obj_get_style_prop>
    if(f && f->filter_cb) {
 801df26:	4604      	mov	r4, r0
 801df28:	b178      	cbz	r0, 801df4a <_lv_obj_style_apply_color_filter+0x34>
 801df2a:	6803      	ldr	r3, [r0, #0]
 801df2c:	b16b      	cbz	r3, 801df4a <_lv_obj_style_apply_color_filter+0x34>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 801df2e:	2262      	movs	r2, #98	; 0x62
 801df30:	4639      	mov	r1, r7
 801df32:	4630      	mov	r0, r6
 801df34:	f7ff fdd8 	bl	801dae8 <lv_obj_get_style_prop>
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 801df38:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 801df3c:	d005      	beq.n	801df4a <_lv_obj_style_apply_color_filter+0x34>
 801df3e:	4629      	mov	r1, r5
 801df40:	6823      	ldr	r3, [r4, #0]
 801df42:	4620      	mov	r0, r4
 801df44:	4798      	blx	r3
 801df46:	f360 050f 	bfi	r5, r0, #0, #16
}
 801df4a:	4628      	mov	r0, r5
 801df4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801df4e <_lv_obj_style_state_compare>:
{
 801df4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 801df52:	2500      	movs	r5, #0
{
 801df54:	4607      	mov	r7, r0
        bool valid1 = state_act & (~state1) ? false : true;
 801df56:	ea6f 0801 	mvn.w	r8, r1
        bool valid2 = state_act & (~state2) ? false : true;
 801df5a:	ea6f 0902 	mvn.w	r9, r2
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 801df5e:	462e      	mov	r6, r5
    for(i = 0; i < obj->style_cnt; i++) {
 801df60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801df62:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801df66:	42ab      	cmp	r3, r5
 801df68:	f240 8096 	bls.w	801e098 <_lv_obj_style_state_compare+0x14a>
        if(obj->styles[i].is_trans) continue;
 801df6c:	68fb      	ldr	r3, [r7, #12]
 801df6e:	00e9      	lsls	r1, r5, #3
 801df70:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801df74:	79d0      	ldrb	r0, [r2, #7]
 801df76:	0784      	lsls	r4, r0, #30
 801df78:	f100 808b 	bmi.w	801e092 <_lv_obj_style_state_compare+0x144>
        bool valid1 = state_act & (~state1) ? false : true;
 801df7c:	8892      	ldrh	r2, [r2, #4]
 801df7e:	ea18 0f02 	tst.w	r8, r2
 801df82:	bf0c      	ite	eq
 801df84:	2001      	moveq	r0, #1
 801df86:	2000      	movne	r0, #0
        bool valid2 = state_act & (~state2) ? false : true;
 801df88:	ea19 0f02 	tst.w	r9, r2
        if(valid1 != valid2) {
 801df8c:	bf0c      	ite	eq
 801df8e:	2201      	moveq	r2, #1
 801df90:	2200      	movne	r2, #0
 801df92:	4290      	cmp	r0, r2
 801df94:	d07d      	beq.n	801e092 <_lv_obj_style_state_compare+0x144>
            lv_style_t * style = obj->styles[i].style;
 801df96:	585c      	ldr	r4, [r3, r1]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 801df98:	aa01      	add	r2, sp, #4
 801df9a:	2110      	movs	r1, #16
 801df9c:	4620      	mov	r0, r4
 801df9e:	f006 ff02 	bl	8024da6 <lv_style_get_prop>
 801dfa2:	2800      	cmp	r0, #0
 801dfa4:	d177      	bne.n	801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 801dfa6:	aa01      	add	r2, sp, #4
 801dfa8:	2111      	movs	r1, #17
 801dfaa:	4620      	mov	r0, r4
 801dfac:	f006 fefb 	bl	8024da6 <lv_style_get_prop>
 801dfb0:	2800      	cmp	r0, #0
 801dfb2:	d170      	bne.n	801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 801dfb4:	aa01      	add	r2, sp, #4
 801dfb6:	2112      	movs	r1, #18
 801dfb8:	4620      	mov	r0, r4
 801dfba:	f006 fef4 	bl	8024da6 <lv_style_get_prop>
 801dfbe:	2800      	cmp	r0, #0
 801dfc0:	d169      	bne.n	801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 801dfc2:	aa01      	add	r2, sp, #4
 801dfc4:	2113      	movs	r1, #19
 801dfc6:	4620      	mov	r0, r4
 801dfc8:	f006 feed 	bl	8024da6 <lv_style_get_prop>
 801dfcc:	2800      	cmp	r0, #0
 801dfce:	d162      	bne.n	801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 801dfd0:	aa01      	add	r2, sp, #4
 801dfd2:	2115      	movs	r1, #21
 801dfd4:	4620      	mov	r0, r4
 801dfd6:	f006 fee6 	bl	8024da6 <lv_style_get_prop>
 801dfda:	2800      	cmp	r0, #0
 801dfdc:	d15b      	bne.n	801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 801dfde:	aa01      	add	r2, sp, #4
 801dfe0:	2114      	movs	r1, #20
 801dfe2:	4620      	mov	r0, r4
 801dfe4:	f006 fedf 	bl	8024da6 <lv_style_get_prop>
 801dfe8:	2800      	cmp	r0, #0
 801dfea:	d154      	bne.n	801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 801dfec:	aa01      	add	r2, sp, #4
 801dfee:	210a      	movs	r1, #10
 801dff0:	4620      	mov	r0, r4
 801dff2:	f006 fed8 	bl	8024da6 <lv_style_get_prop>
 801dff6:	2800      	cmp	r0, #0
 801dff8:	d14d      	bne.n	801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 801dffa:	aa01      	add	r2, sp, #4
 801dffc:	216a      	movs	r1, #106	; 0x6a
 801dffe:	4620      	mov	r0, r4
 801e000:	f006 fed1 	bl	8024da6 <lv_style_get_prop>
 801e004:	2800      	cmp	r0, #0
 801e006:	d146      	bne.n	801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 801e008:	aa01      	add	r2, sp, #4
 801e00a:	216b      	movs	r1, #107	; 0x6b
 801e00c:	4620      	mov	r0, r4
 801e00e:	f006 feca 	bl	8024da6 <lv_style_get_prop>
 801e012:	2800      	cmp	r0, #0
 801e014:	d13f      	bne.n	801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 801e016:	aa01      	add	r2, sp, #4
 801e018:	2101      	movs	r1, #1
 801e01a:	4620      	mov	r0, r4
 801e01c:	f006 fec3 	bl	8024da6 <lv_style_get_prop>
 801e020:	2800      	cmp	r0, #0
 801e022:	d138      	bne.n	801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 801e024:	aa01      	add	r2, sp, #4
 801e026:	2104      	movs	r1, #4
 801e028:	4620      	mov	r0, r4
 801e02a:	f006 febc 	bl	8024da6 <lv_style_get_prop>
 801e02e:	bb90      	cbnz	r0, 801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 801e030:	aa01      	add	r2, sp, #4
 801e032:	2102      	movs	r1, #2
 801e034:	4620      	mov	r0, r4
 801e036:	f006 feb6 	bl	8024da6 <lv_style_get_prop>
 801e03a:	bb60      	cbnz	r0, 801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 801e03c:	aa01      	add	r2, sp, #4
 801e03e:	2103      	movs	r1, #3
 801e040:	4620      	mov	r0, r4
 801e042:	f006 feb0 	bl	8024da6 <lv_style_get_prop>
 801e046:	bb30      	cbnz	r0, 801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 801e048:	aa01      	add	r2, sp, #4
 801e04a:	2105      	movs	r1, #5
 801e04c:	4620      	mov	r0, r4
 801e04e:	f006 feaa 	bl	8024da6 <lv_style_get_prop>
 801e052:	bb00      	cbnz	r0, 801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 801e054:	aa01      	add	r2, sp, #4
 801e056:	2106      	movs	r1, #6
 801e058:	4620      	mov	r0, r4
 801e05a:	f006 fea4 	bl	8024da6 <lv_style_get_prop>
 801e05e:	b9d0      	cbnz	r0, 801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 801e060:	aa01      	add	r2, sp, #4
 801e062:	2132      	movs	r1, #50	; 0x32
 801e064:	4620      	mov	r0, r4
 801e066:	f006 fe9e 	bl	8024da6 <lv_style_get_prop>
 801e06a:	b9a0      	cbnz	r0, 801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 801e06c:	aa01      	add	r2, sp, #4
 801e06e:	216d      	movs	r1, #109	; 0x6d
 801e070:	4620      	mov	r0, r4
 801e072:	f006 fe98 	bl	8024da6 <lv_style_get_prop>
 801e076:	b970      	cbnz	r0, 801e096 <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 801e078:	aa01      	add	r2, sp, #4
 801e07a:	216c      	movs	r1, #108	; 0x6c
 801e07c:	4620      	mov	r0, r4
 801e07e:	f006 fe92 	bl	8024da6 <lv_style_get_prop>
 801e082:	b940      	cbnz	r0, 801e096 <_lv_obj_style_state_compare+0x148>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e084:	aa01      	add	r2, sp, #4
 801e086:	2168      	movs	r1, #104	; 0x68
 801e088:	4620      	mov	r0, r4
 801e08a:	f006 fe8c 	bl	8024da6 <lv_style_get_prop>
 801e08e:	b138      	cbz	r0, 801e0a0 <_lv_obj_style_state_compare+0x152>
 801e090:	2602      	movs	r6, #2
    for(i = 0; i < obj->style_cnt; i++) {
 801e092:	3501      	adds	r5, #1
 801e094:	e764      	b.n	801df60 <_lv_obj_style_state_compare+0x12>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 801e096:	2603      	movs	r6, #3
}
 801e098:	4630      	mov	r0, r6
 801e09a:	b003      	add	sp, #12
 801e09c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e0a0:	aa01      	add	r2, sp, #4
 801e0a2:	2169      	movs	r1, #105	; 0x69
 801e0a4:	4620      	mov	r0, r4
 801e0a6:	f006 fe7e 	bl	8024da6 <lv_style_get_prop>
 801e0aa:	2800      	cmp	r0, #0
 801e0ac:	d1f0      	bne.n	801e090 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e0ae:	aa01      	add	r2, sp, #4
 801e0b0:	216d      	movs	r1, #109	; 0x6d
 801e0b2:	4620      	mov	r0, r4
 801e0b4:	f006 fe77 	bl	8024da6 <lv_style_get_prop>
 801e0b8:	2800      	cmp	r0, #0
 801e0ba:	d1e9      	bne.n	801e090 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e0bc:	aa01      	add	r2, sp, #4
 801e0be:	216c      	movs	r1, #108	; 0x6c
 801e0c0:	4620      	mov	r0, r4
 801e0c2:	f006 fe70 	bl	8024da6 <lv_style_get_prop>
 801e0c6:	2800      	cmp	r0, #0
 801e0c8:	d1e2      	bne.n	801e090 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e0ca:	aa01      	add	r2, sp, #4
 801e0cc:	2137      	movs	r1, #55	; 0x37
 801e0ce:	4620      	mov	r0, r4
 801e0d0:	f006 fe69 	bl	8024da6 <lv_style_get_prop>
 801e0d4:	2800      	cmp	r0, #0
 801e0d6:	d1db      	bne.n	801e090 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e0d8:	aa01      	add	r2, sp, #4
 801e0da:	2138      	movs	r1, #56	; 0x38
 801e0dc:	4620      	mov	r0, r4
 801e0de:	f006 fe62 	bl	8024da6 <lv_style_get_prop>
 801e0e2:	2800      	cmp	r0, #0
 801e0e4:	d1d4      	bne.n	801e090 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e0e6:	aa01      	add	r2, sp, #4
 801e0e8:	2135      	movs	r1, #53	; 0x35
 801e0ea:	4620      	mov	r0, r4
 801e0ec:	f006 fe5b 	bl	8024da6 <lv_style_get_prop>
 801e0f0:	2800      	cmp	r0, #0
 801e0f2:	d1cd      	bne.n	801e090 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e0f4:	aa01      	add	r2, sp, #4
 801e0f6:	2140      	movs	r1, #64	; 0x40
 801e0f8:	4620      	mov	r0, r4
 801e0fa:	f006 fe54 	bl	8024da6 <lv_style_get_prop>
 801e0fe:	2800      	cmp	r0, #0
 801e100:	d1c6      	bne.n	801e090 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e102:	aa01      	add	r2, sp, #4
 801e104:	2145      	movs	r1, #69	; 0x45
 801e106:	4620      	mov	r0, r4
 801e108:	f006 fe4d 	bl	8024da6 <lv_style_get_prop>
 801e10c:	2800      	cmp	r0, #0
 801e10e:	d1bf      	bne.n	801e090 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e110:	aa01      	add	r2, sp, #4
 801e112:	2141      	movs	r1, #65	; 0x41
 801e114:	4620      	mov	r0, r4
 801e116:	f006 fe46 	bl	8024da6 <lv_style_get_prop>
 801e11a:	2800      	cmp	r0, #0
 801e11c:	d1b8      	bne.n	801e090 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e11e:	aa01      	add	r2, sp, #4
 801e120:	2142      	movs	r1, #66	; 0x42
 801e122:	4620      	mov	r0, r4
 801e124:	f006 fe3f 	bl	8024da6 <lv_style_get_prop>
 801e128:	2800      	cmp	r0, #0
 801e12a:	d1b1      	bne.n	801e090 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e12c:	aa01      	add	r2, sp, #4
 801e12e:	2143      	movs	r1, #67	; 0x43
 801e130:	4620      	mov	r0, r4
 801e132:	f006 fe38 	bl	8024da6 <lv_style_get_prop>
 801e136:	2800      	cmp	r0, #0
 801e138:	d1aa      	bne.n	801e090 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e13a:	aa01      	add	r2, sp, #4
 801e13c:	2149      	movs	r1, #73	; 0x49
 801e13e:	4620      	mov	r0, r4
 801e140:	f006 fe31 	bl	8024da6 <lv_style_get_prop>
 801e144:	2800      	cmp	r0, #0
 801e146:	d1a3      	bne.n	801e090 <_lv_obj_style_state_compare+0x142>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 801e148:	2e01      	cmp	r6, #1
 801e14a:	bf38      	it	cc
 801e14c:	2601      	movcc	r6, #1
 801e14e:	e7a0      	b.n	801e092 <_lv_obj_style_state_compare+0x144>

0801e150 <lv_obj_style_get_selector_state>:
}
 801e150:	b280      	uxth	r0, r0
 801e152:	4770      	bx	lr

0801e154 <lv_obj_style_get_selector_part>:
}
 801e154:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 801e158:	4770      	bx	lr

0801e15a <lv_obj_calculate_style_text_align>:
{
 801e15a:	b570      	push	{r4, r5, r6, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801e15c:	225b      	movs	r2, #91	; 0x5b
 801e15e:	4605      	mov	r5, r0
 801e160:	460e      	mov	r6, r1
 801e162:	f7ff fcc1 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_text_align_t)v.num;
 801e166:	b2c4      	uxtb	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801e168:	2216      	movs	r2, #22
 801e16a:	4631      	mov	r1, r6
 801e16c:	4628      	mov	r0, r5
 801e16e:	f7ff fcbb 	bl	801dae8 <lv_obj_get_style_prop>
}
 801e172:	2c01      	cmp	r4, #1
 801e174:	4620      	mov	r0, r4
 801e176:	bf38      	it	cc
 801e178:	2001      	movcc	r0, #1
 801e17a:	bd70      	pop	{r4, r5, r6, pc}

0801e17c <lv_obj_set_style_width>:
#include "lv_obj.h"

void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801e17c:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
 801e17e:	460a      	mov	r2, r1
 801e180:	2101      	movs	r1, #1
 801e182:	f7ff be6b 	b.w	801de5c <lv_obj_set_local_style_prop>

0801e186 <lv_obj_set_style_min_width>:
}

void lv_obj_set_style_min_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801e186:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MIN_WIDTH, v, selector);
 801e188:	460a      	mov	r2, r1
 801e18a:	2102      	movs	r1, #2
 801e18c:	f7ff be66 	b.w	801de5c <lv_obj_set_local_style_prop>

0801e190 <lv_obj_set_style_height>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_WIDTH, v, selector);
}

void lv_obj_set_style_height(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801e190:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_HEIGHT, v, selector);
 801e192:	460a      	mov	r2, r1
 801e194:	2104      	movs	r1, #4
 801e196:	f7ff be61 	b.w	801de5c <lv_obj_set_local_style_prop>

0801e19a <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801e19a:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 801e19c:	460a      	mov	r2, r1
 801e19e:	2107      	movs	r1, #7
 801e1a0:	f7ff be5c 	b.w	801de5c <lv_obj_set_local_style_prop>

0801e1a4 <lv_obj_set_style_y>:
}

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801e1a4:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 801e1a6:	460a      	mov	r2, r1
 801e1a8:	2108      	movs	r1, #8
 801e1aa:	f7ff be57 	b.w	801de5c <lv_obj_set_local_style_prop>

0801e1ae <lv_obj_set_style_align>:
}

void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
 801e1ae:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 801e1b0:	460a      	mov	r2, r1
 801e1b2:	2109      	movs	r1, #9
 801e1b4:	f7ff be52 	b.w	801de5c <lv_obj_set_local_style_prop>

0801e1b8 <lv_obj_set_style_bg_img_src>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_DITHER_MODE, v, selector);
}

void lv_obj_set_style_bg_img_src(struct _lv_obj_t * obj, const void * value, lv_style_selector_t selector)
{
 801e1b8:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .ptr = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_IMG_SRC, v, selector);
 801e1ba:	460a      	mov	r2, r1
 801e1bc:	2128      	movs	r1, #40	; 0x28
 801e1be:	f7ff be4d 	b.w	801de5c <lv_obj_set_local_style_prop>

0801e1c2 <lv_obj_set_style_text_align>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_DECOR, v, selector);
}

void lv_obj_set_style_text_align(struct _lv_obj_t * obj, lv_text_align_t value, lv_style_selector_t selector)
{
 801e1c2:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_ALIGN, v, selector);
 801e1c4:	460a      	mov	r2, r1
 801e1c6:	215b      	movs	r1, #91	; 0x5b
 801e1c8:	f7ff be48 	b.w	801de5c <lv_obj_set_local_style_prop>

0801e1cc <lv_obj_set_style_layout>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BLEND_MODE, v, selector);
}

void lv_obj_set_style_layout(struct _lv_obj_t * obj, uint16_t value, lv_style_selector_t selector)
{
 801e1cc:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_LAYOUT, v, selector);
 801e1ce:	460a      	mov	r2, r1
 801e1d0:	210a      	movs	r1, #10
 801e1d2:	f7ff be43 	b.w	801de5c <lv_obj_set_local_style_prop>

0801e1d6 <lv_obj_set_style_base_dir>:
}

void lv_obj_set_style_base_dir(struct _lv_obj_t * obj, lv_base_dir_t value, lv_style_selector_t selector)
{
 801e1d6:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BASE_DIR, v, selector);
 801e1d8:	460a      	mov	r2, r1
 801e1da:	2116      	movs	r1, #22
 801e1dc:	f7ff be3e 	b.w	801de5c <lv_obj_set_local_style_prop>

0801e1e0 <lv_obj_get_screen>:

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
 801e1e0:	4603      	mov	r3, r0
 801e1e2:	b120      	cbz	r0, 801e1ee <lv_obj_get_screen+0xe>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 801e1e4:	4618      	mov	r0, r3
 801e1e6:	685b      	ldr	r3, [r3, #4]
    } while(par != NULL);
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d1fb      	bne.n	801e1e4 <lv_obj_get_screen+0x4>
 801e1ec:	4770      	bx	lr
}
 801e1ee:	4770      	bx	lr

0801e1f0 <lv_obj_get_parent>:
    if(obj == NULL) return NULL;
 801e1f0:	b100      	cbz	r0, 801e1f4 <lv_obj_get_parent+0x4>
    return obj->parent;
 801e1f2:	6840      	ldr	r0, [r0, #4]
}
 801e1f4:	4770      	bx	lr

0801e1f6 <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 801e1f6:	6880      	ldr	r0, [r0, #8]
 801e1f8:	b158      	cbz	r0, 801e212 <lv_obj_get_child+0x1c>

    uint32_t idu;
    if(id < 0) {
 801e1fa:	2900      	cmp	r1, #0
        id = obj->spec_attr->child_cnt + id;
 801e1fc:	6843      	ldr	r3, [r0, #4]
    if(id < 0) {
 801e1fe:	da01      	bge.n	801e204 <lv_obj_get_child+0xe>
        if(id < 0) return NULL;
 801e200:	18c9      	adds	r1, r1, r3
 801e202:	d405      	bmi.n	801e210 <lv_obj_get_child+0x1a>
    }
    else {
        idu = id;
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 801e204:	4299      	cmp	r1, r3
 801e206:	d203      	bcs.n	801e210 <lv_obj_get_child+0x1a>
    else return obj->spec_attr->children[id];
 801e208:	6803      	ldr	r3, [r0, #0]
 801e20a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801e20e:	4770      	bx	lr
    if(obj->spec_attr == NULL) return NULL;
 801e210:	2000      	movs	r0, #0
}
 801e212:	4770      	bx	lr

0801e214 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 801e214:	6880      	ldr	r0, [r0, #8]
 801e216:	b100      	cbz	r0, 801e21a <lv_obj_get_child_cnt+0x6>
    return obj->spec_attr->child_cnt;
 801e218:	6840      	ldr	r0, [r0, #4]
}
 801e21a:	4770      	bx	lr

0801e21c <lv_obj_get_index>:

uint32_t lv_obj_get_index(const lv_obj_t * obj)
{
 801e21c:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return NULL;
 801e21e:	4604      	mov	r4, r0
 801e220:	b1a0      	cbz	r0, 801e24c <lv_obj_get_index+0x30>
    return obj->parent;
 801e222:	6845      	ldr	r5, [r0, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_t * parent = lv_obj_get_parent(obj);
    if(parent == NULL) return 0;
 801e224:	b1a5      	cbz	r5, 801e250 <lv_obj_get_index+0x34>

    uint32_t i = 0;
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 801e226:	4628      	mov	r0, r5
 801e228:	2200      	movs	r2, #0
 801e22a:	f7ff fff3 	bl	801e214 <lv_obj_get_child_cnt>
 801e22e:	4606      	mov	r6, r0
 801e230:	4296      	cmp	r6, r2
 801e232:	d103      	bne.n	801e23c <lv_obj_get_index+0x20>
        if(lv_obj_get_child(parent, i) == obj) return i;
    }

    return 0xFFFFFFFF; /*Shouldn't happen*/
 801e234:	f04f 32ff 	mov.w	r2, #4294967295
}
 801e238:	4610      	mov	r0, r2
 801e23a:	bd70      	pop	{r4, r5, r6, pc}
        if(lv_obj_get_child(parent, i) == obj) return i;
 801e23c:	4611      	mov	r1, r2
 801e23e:	4628      	mov	r0, r5
 801e240:	f7ff ffd9 	bl	801e1f6 <lv_obj_get_child>
 801e244:	4284      	cmp	r4, r0
 801e246:	d0f7      	beq.n	801e238 <lv_obj_get_index+0x1c>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 801e248:	3201      	adds	r2, #1
 801e24a:	e7f1      	b.n	801e230 <lv_obj_get_index+0x14>
    if(parent == NULL) return 0;
 801e24c:	4602      	mov	r2, r0
 801e24e:	e7f3      	b.n	801e238 <lv_obj_get_index+0x1c>
 801e250:	462a      	mov	r2, r5
 801e252:	e7f1      	b.n	801e238 <lv_obj_get_index+0x1c>

0801e254 <obj_del_core>:

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
{
 801e254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 801e256:	2200      	movs	r2, #0
 801e258:	2121      	movs	r1, #33	; 0x21
{
 801e25a:	4605      	mov	r5, r0
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 801e25c:	f7e6 fa72 	bl	8004744 <lv_event_send>
    if(res == LV_RES_INV) return;
 801e260:	2800      	cmp	r0, #0
 801e262:	d073      	beq.n	801e34c <obj_del_core+0xf8>

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
    while(child) {
        obj_del_core(child);
        child = lv_obj_get_child(obj, 0);
 801e264:	2100      	movs	r1, #0
 801e266:	4628      	mov	r0, r5
 801e268:	f7ff ffc5 	bl	801e1f6 <lv_obj_get_child>
 801e26c:	4606      	mov	r6, r0
    while(child) {
 801e26e:	bb28      	cbnz	r0, 801e2bc <obj_del_core+0x68>
    }

    lv_group_t * group = lv_obj_get_group(obj);
 801e270:	4628      	mov	r0, r5
 801e272:	f7fd fc0d 	bl	801ba90 <lv_obj_get_group>
 801e276:	4607      	mov	r7, r0

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 801e278:	4630      	mov	r0, r6
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
            lv_indev_reset(indev, obj);
        }
        indev = lv_indev_get_next(indev);
 801e27a:	f7f3 ff79 	bl	8012170 <lv_indev_get_next>
 801e27e:	4604      	mov	r4, r0
    while(indev) {
 801e280:	bb00      	cbnz	r0, 801e2c4 <obj_del_core+0x70>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destruct(obj);
 801e282:	4628      	mov	r0, r5
 801e284:	f7fd fdb9 	bl	801bdfa <_lv_obj_destruct>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 801e288:	686b      	ldr	r3, [r5, #4]
        lv_disp_t * disp = lv_obj_get_disp(obj);
 801e28a:	4628      	mov	r0, r5
    if(obj->parent == NULL) {
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	d142      	bne.n	801e316 <obj_del_core+0xc2>
        lv_disp_t * disp = lv_obj_get_disp(obj);
 801e290:	f7e8 fb20 	bl	80068d4 <lv_obj_get_disp>
 801e294:	4606      	mov	r6, r0
        uint32_t i;
        /*Find the screen in the list*/
        for(i = 0; i < disp->screen_cnt; i++) {
 801e296:	6a43      	ldr	r3, [r0, #36]	; 0x24
            if(disp->screens[i] == obj) break;
 801e298:	68c2      	ldr	r2, [r0, #12]
        for(i = 0; i < disp->screen_cnt; i++) {
 801e29a:	429c      	cmp	r4, r3
 801e29c:	d12d      	bne.n	801e2fa <obj_del_core+0xa6>
        }

        uint32_t id = i;
        for(i = id; i < disp->screen_cnt - 1; i++) {
 801e29e:	6a71      	ldr	r1, [r6, #36]	; 0x24
            disp->screens[i] = disp->screens[i + 1];
 801e2a0:	68f0      	ldr	r0, [r6, #12]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 801e2a2:	3901      	subs	r1, #1
 801e2a4:	428c      	cmp	r4, r1
 801e2a6:	d32e      	bcc.n	801e306 <obj_del_core+0xb2>
        }
        disp->screen_cnt--;
 801e2a8:	6271      	str	r1, [r6, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 801e2aa:	0089      	lsls	r1, r1, #2
 801e2ac:	f7f4 fa6a 	bl	8012784 <lv_mem_realloc>
 801e2b0:	60f0      	str	r0, [r6, #12]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 801e2b2:	4628      	mov	r0, r5
}
 801e2b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_mem_free(obj);
 801e2b8:	f7f4 ba4c 	b.w	8012754 <lv_mem_free>
        obj_del_core(child);
 801e2bc:	4630      	mov	r0, r6
 801e2be:	f7ff ffc9 	bl	801e254 <obj_del_core>
 801e2c2:	e7cf      	b.n	801e264 <obj_del_core+0x10>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 801e2c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e2c6:	429d      	cmp	r5, r3
 801e2c8:	d002      	beq.n	801e2d0 <obj_del_core+0x7c>
 801e2ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801e2cc:	429d      	cmp	r5, r3
 801e2ce:	d103      	bne.n	801e2d8 <obj_del_core+0x84>
            lv_indev_reset(indev, obj);
 801e2d0:	4629      	mov	r1, r5
 801e2d2:	4620      	mov	r0, r4
 801e2d4:	f7e6 faa2 	bl	800481c <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 801e2d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e2da:	429d      	cmp	r5, r3
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 801e2dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
            indev->proc.types.pointer.last_pressed = NULL;
 801e2de:	bf08      	it	eq
 801e2e0:	6366      	streq	r6, [r4, #52]	; 0x34
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 801e2e2:	429f      	cmp	r7, r3
 801e2e4:	d107      	bne.n	801e2f6 <obj_del_core+0xa2>
 801e2e6:	f7e6 fae9 	bl	80048bc <lv_indev_get_obj_act>
 801e2ea:	4285      	cmp	r5, r0
 801e2ec:	d103      	bne.n	801e2f6 <obj_del_core+0xa2>
            lv_indev_reset(indev, obj);
 801e2ee:	4629      	mov	r1, r5
 801e2f0:	4620      	mov	r0, r4
 801e2f2:	f7e6 fa93 	bl	800481c <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 801e2f6:	4620      	mov	r0, r4
 801e2f8:	e7bf      	b.n	801e27a <obj_del_core+0x26>
            if(disp->screens[i] == obj) break;
 801e2fa:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 801e2fe:	428d      	cmp	r5, r1
 801e300:	d0cd      	beq.n	801e29e <obj_del_core+0x4a>
        for(i = 0; i < disp->screen_cnt; i++) {
 801e302:	3401      	adds	r4, #1
 801e304:	e7c9      	b.n	801e29a <obj_del_core+0x46>
            disp->screens[i] = disp->screens[i + 1];
 801e306:	3401      	adds	r4, #1
 801e308:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 801e30c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801e310:	f840 3c04 	str.w	r3, [r0, #-4]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 801e314:	e7c3      	b.n	801e29e <obj_del_core+0x4a>
        uint32_t id = lv_obj_get_index(obj);
 801e316:	f7ff ff81 	bl	801e21c <lv_obj_get_index>
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 801e31a:	686b      	ldr	r3, [r5, #4]
 801e31c:	689a      	ldr	r2, [r3, #8]
 801e31e:	6853      	ldr	r3, [r2, #4]
 801e320:	3b01      	subs	r3, #1
 801e322:	4298      	cmp	r0, r3
 801e324:	d309      	bcc.n	801e33a <obj_del_core+0xe6>
        obj->parent->spec_attr->child_cnt--;
 801e326:	6053      	str	r3, [r2, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 801e328:	686b      	ldr	r3, [r5, #4]
 801e32a:	689c      	ldr	r4, [r3, #8]
 801e32c:	6861      	ldr	r1, [r4, #4]
 801e32e:	6820      	ldr	r0, [r4, #0]
 801e330:	0089      	lsls	r1, r1, #2
 801e332:	f7f4 fa27 	bl	8012784 <lv_mem_realloc>
 801e336:	6020      	str	r0, [r4, #0]
 801e338:	e7bb      	b.n	801e2b2 <obj_del_core+0x5e>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 801e33a:	6813      	ldr	r3, [r2, #0]
 801e33c:	3001      	adds	r0, #1
 801e33e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 801e342:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801e346:	f843 2c04 	str.w	r2, [r3, #-4]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 801e34a:	e7e6      	b.n	801e31a <obj_del_core+0xc6>
}
 801e34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e34e <lv_obj_del>:
{
 801e34e:	b538      	push	{r3, r4, r5, lr}
 801e350:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 801e352:	f7fe fca3 	bl	801cc9c <lv_obj_invalidate>
    if(obj == NULL) return NULL;
 801e356:	b1ec      	cbz	r4, 801e394 <lv_obj_del+0x46>
    return obj->parent;
 801e358:	6865      	ldr	r5, [r4, #4]
    if(par) {
 801e35a:	b1dd      	cbz	r5, 801e394 <lv_obj_del+0x46>
        lv_obj_scrollbar_invalidate(par);
 801e35c:	4628      	mov	r0, r5
 801e35e:	f7ff fa95 	bl	801d88c <lv_obj_scrollbar_invalidate>
    obj_del_core(obj);
 801e362:	4620      	mov	r0, r4
 801e364:	f7ff ff76 	bl	801e254 <obj_del_core>
        lv_obj_update_layout(par);
 801e368:	4628      	mov	r0, r5
 801e36a:	f7e7 fa2d 	bl	80057c8 <lv_obj_update_layout>
        lv_obj_readjust_scroll(par, LV_ANIM_OFF);
 801e36e:	2100      	movs	r1, #0
 801e370:	4628      	mov	r0, r5
 801e372:	f7ff faab 	bl	801d8cc <lv_obj_readjust_scroll>
        lv_obj_scrollbar_invalidate(par);
 801e376:	4628      	mov	r0, r5
 801e378:	f7ff fa88 	bl	801d88c <lv_obj_scrollbar_invalidate>
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 801e37c:	2200      	movs	r2, #0
 801e37e:	2122      	movs	r1, #34	; 0x22
 801e380:	4628      	mov	r0, r5
 801e382:	f7e6 f9df 	bl	8004744 <lv_event_send>
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 801e386:	4628      	mov	r0, r5
 801e388:	2200      	movs	r2, #0
 801e38a:	2124      	movs	r1, #36	; 0x24
}
 801e38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 801e390:	f7e6 b9d8 	b.w	8004744 <lv_event_send>
        disp = lv_obj_get_disp(obj);
 801e394:	4620      	mov	r0, r4
 801e396:	f7e8 fa9d 	bl	80068d4 <lv_obj_get_disp>
        if(!disp) return;   /*Shouldn't happen*/
 801e39a:	4605      	mov	r5, r0
 801e39c:	b138      	cbz	r0, 801e3ae <lv_obj_del+0x60>
        if(disp->act_scr == obj) act_scr_del = true;
 801e39e:	6903      	ldr	r3, [r0, #16]
    obj_del_core(obj);
 801e3a0:	4620      	mov	r0, r4
        if(disp->act_scr == obj) act_scr_del = true;
 801e3a2:	42a3      	cmp	r3, r4
 801e3a4:	d104      	bne.n	801e3b0 <lv_obj_del+0x62>
    obj_del_core(obj);
 801e3a6:	f7ff ff55 	bl	801e254 <obj_del_core>
        disp->act_scr = NULL;
 801e3aa:	2300      	movs	r3, #0
 801e3ac:	612b      	str	r3, [r5, #16]
}
 801e3ae:	bd38      	pop	{r3, r4, r5, pc}
 801e3b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    obj_del_core(obj);
 801e3b4:	f7ff bf4e 	b.w	801e254 <obj_del_core>

0801e3b8 <lv_obj_set_parent>:
{
 801e3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(obj->parent == NULL) {
 801e3bc:	6843      	ldr	r3, [r0, #4]
{
 801e3be:	4604      	mov	r4, r0
 801e3c0:	460d      	mov	r5, r1
    if(obj->parent == NULL) {
 801e3c2:	2b00      	cmp	r3, #0
 801e3c4:	d069      	beq.n	801e49a <lv_obj_set_parent+0xe2>
    if(parent == NULL) {
 801e3c6:	2900      	cmp	r1, #0
 801e3c8:	d067      	beq.n	801e49a <lv_obj_set_parent+0xe2>
    lv_obj_invalidate(obj);
 801e3ca:	f7fe fc67 	bl	801cc9c <lv_obj_invalidate>
    lv_obj_allocate_spec_attr(parent);
 801e3ce:	4628      	mov	r0, r5
 801e3d0:	f7e6 fd06 	bl	8004de0 <lv_obj_allocate_spec_attr>
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 801e3d4:	4620      	mov	r0, r4
 801e3d6:	f7ff ff21 	bl	801e21c <lv_obj_get_index>
    lv_obj_t * old_parent = obj->parent;
 801e3da:	6866      	ldr	r6, [r4, #4]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 801e3dc:	4603      	mov	r3, r0
 801e3de:	4630      	mov	r0, r6
 801e3e0:	f7ff ff18 	bl	801e214 <lv_obj_get_child_cnt>
 801e3e4:	3801      	subs	r0, #1
        old_parent->spec_attr->children[i] = old_parent->spec_attr->children[i + 1];
 801e3e6:	68b2      	ldr	r2, [r6, #8]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 801e3e8:	4298      	cmp	r0, r3
 801e3ea:	dc47      	bgt.n	801e47c <lv_obj_set_parent+0xc4>
    old_parent->spec_attr->child_cnt--;
 801e3ec:	6853      	ldr	r3, [r2, #4]
 801e3ee:	3b01      	subs	r3, #1
 801e3f0:	6053      	str	r3, [r2, #4]
    if(old_parent->spec_attr->child_cnt) {
 801e3f2:	68b7      	ldr	r7, [r6, #8]
 801e3f4:	f8d7 8004 	ldr.w	r8, [r7, #4]
 801e3f8:	f1b8 0f00 	cmp.w	r8, #0
 801e3fc:	d046      	beq.n	801e48c <lv_obj_set_parent+0xd4>
        old_parent->spec_attr->children = lv_mem_realloc(old_parent->spec_attr->children,
 801e3fe:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801e402:	6838      	ldr	r0, [r7, #0]
 801e404:	f7f4 f9be 	bl	8012784 <lv_mem_realloc>
 801e408:	6038      	str	r0, [r7, #0]
    parent->spec_attr->child_cnt++;
 801e40a:	68aa      	ldr	r2, [r5, #8]
 801e40c:	6853      	ldr	r3, [r2, #4]
 801e40e:	3301      	adds	r3, #1
 801e410:	6053      	str	r3, [r2, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 801e412:	68af      	ldr	r7, [r5, #8]
 801e414:	6879      	ldr	r1, [r7, #4]
 801e416:	6838      	ldr	r0, [r7, #0]
 801e418:	0089      	lsls	r1, r1, #2
 801e41a:	f7f4 f9b3 	bl	8012784 <lv_mem_realloc>
 801e41e:	6038      	str	r0, [r7, #0]
    parent->spec_attr->children[lv_obj_get_child_cnt(parent) - 1] = obj;
 801e420:	4628      	mov	r0, r5
 801e422:	68ab      	ldr	r3, [r5, #8]
 801e424:	f7ff fef6 	bl	801e214 <lv_obj_get_child_cnt>
 801e428:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 801e42c:	681b      	ldr	r3, [r3, #0]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 801e42e:	2100      	movs	r1, #0
    parent->spec_attr->children[lv_obj_get_child_cnt(parent) - 1] = obj;
 801e430:	3801      	subs	r0, #1
 801e432:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 801e436:	4630      	mov	r0, r6
    obj->parent = parent;
 801e438:	6065      	str	r5, [r4, #4]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 801e43a:	f7ff fa47 	bl	801d8cc <lv_obj_readjust_scroll>
    lv_obj_scrollbar_invalidate(old_parent);
 801e43e:	4630      	mov	r0, r6
 801e440:	f7ff fa24 	bl	801d88c <lv_obj_scrollbar_invalidate>
    lv_event_send(old_parent, LV_EVENT_CHILD_CHANGED, obj);
 801e444:	4622      	mov	r2, r4
 801e446:	2122      	movs	r1, #34	; 0x22
 801e448:	4630      	mov	r0, r6
 801e44a:	f7e6 f97b 	bl	8004744 <lv_event_send>
    lv_event_send(old_parent, LV_EVENT_CHILD_DELETED, NULL);
 801e44e:	2200      	movs	r2, #0
 801e450:	2124      	movs	r1, #36	; 0x24
 801e452:	4630      	mov	r0, r6
 801e454:	f7e6 f976 	bl	8004744 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 801e458:	4622      	mov	r2, r4
 801e45a:	2122      	movs	r1, #34	; 0x22
 801e45c:	4628      	mov	r0, r5
 801e45e:	f7e6 f971 	bl	8004744 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CREATED, NULL);
 801e462:	2200      	movs	r2, #0
 801e464:	2123      	movs	r1, #35	; 0x23
 801e466:	4628      	mov	r0, r5
 801e468:	f7e6 f96c 	bl	8004744 <lv_event_send>
    lv_obj_mark_layout_as_dirty(obj);
 801e46c:	4620      	mov	r0, r4
 801e46e:	f7fe f994 	bl	801c79a <lv_obj_mark_layout_as_dirty>
    lv_obj_invalidate(obj);
 801e472:	4620      	mov	r0, r4
}
 801e474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(obj);
 801e478:	f7fe bc10 	b.w	801cc9c <lv_obj_invalidate>
        old_parent->spec_attr->children[i] = old_parent->spec_attr->children[i + 1];
 801e47c:	6812      	ldr	r2, [r2, #0]
 801e47e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801e482:	6849      	ldr	r1, [r1, #4]
 801e484:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 801e488:	3301      	adds	r3, #1
 801e48a:	e7a8      	b.n	801e3de <lv_obj_set_parent+0x26>
        lv_mem_free(old_parent->spec_attr->children);
 801e48c:	6838      	ldr	r0, [r7, #0]
 801e48e:	f7f4 f961 	bl	8012754 <lv_mem_free>
        old_parent->spec_attr->children = NULL;
 801e492:	68b3      	ldr	r3, [r6, #8]
 801e494:	f8c3 8000 	str.w	r8, [r3]
 801e498:	e7b7      	b.n	801e40a <lv_obj_set_parent+0x52>
}
 801e49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e49e <lv_obj_move_to_index>:
{
 801e49e:	b570      	push	{r4, r5, r6, lr}
    if(index < 0) {
 801e4a0:	1e0c      	subs	r4, r1, #0
{
 801e4a2:	4606      	mov	r6, r0
    if(index < 0) {
 801e4a4:	db17      	blt.n	801e4d6 <lv_obj_move_to_index+0x38>
    if(obj == NULL) return NULL;
 801e4a6:	b300      	cbz	r0, 801e4ea <lv_obj_move_to_index+0x4c>
    return obj->parent;
 801e4a8:	6845      	ldr	r5, [r0, #4]
    if(index >= (int32_t) lv_obj_get_child_cnt(parent)) return;
 801e4aa:	4628      	mov	r0, r5
 801e4ac:	f7ff feb2 	bl	801e214 <lv_obj_get_child_cnt>
 801e4b0:	42a0      	cmp	r0, r4
 801e4b2:	dd17      	ble.n	801e4e4 <lv_obj_move_to_index+0x46>
    const int32_t old_index = lv_obj_get_index(obj);
 801e4b4:	4630      	mov	r0, r6
 801e4b6:	f7ff feb1 	bl	801e21c <lv_obj_get_index>
    if(index == old_index) return;
 801e4ba:	4284      	cmp	r4, r0
 801e4bc:	d012      	beq.n	801e4e4 <lv_obj_move_to_index+0x46>
    if(index < old_index) {
 801e4be:	db1d      	blt.n	801e4fc <lv_obj_move_to_index+0x5e>
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 801e4c0:	68ab      	ldr	r3, [r5, #8]
        while(i < index) {
 801e4c2:	42a0      	cmp	r0, r4
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 801e4c4:	681b      	ldr	r3, [r3, #0]
        while(i < index) {
 801e4c6:	d01d      	beq.n	801e504 <lv_obj_move_to_index+0x66>
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 801e4c8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 801e4cc:	6852      	ldr	r2, [r2, #4]
 801e4ce:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
            i++;
 801e4d2:	3001      	adds	r0, #1
 801e4d4:	e7f4      	b.n	801e4c0 <lv_obj_move_to_index+0x22>
    if(obj == NULL) return NULL;
 801e4d6:	b130      	cbz	r0, 801e4e6 <lv_obj_move_to_index+0x48>
    return obj->parent;
 801e4d8:	6845      	ldr	r5, [r0, #4]
        index = lv_obj_get_child_cnt(lv_obj_get_parent(obj)) + index;
 801e4da:	4628      	mov	r0, r5
 801e4dc:	f7ff fe9a 	bl	801e214 <lv_obj_get_child_cnt>
    if(index < 0) return;
 801e4e0:	1824      	adds	r4, r4, r0
 801e4e2:	d5e2      	bpl.n	801e4aa <lv_obj_move_to_index+0xc>
}
 801e4e4:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return NULL;
 801e4e6:	4605      	mov	r5, r0
 801e4e8:	e7f7      	b.n	801e4da <lv_obj_move_to_index+0x3c>
 801e4ea:	4605      	mov	r5, r0
 801e4ec:	e7dd      	b.n	801e4aa <lv_obj_move_to_index+0xc>
            parent->spec_attr->children[i] = parent->spec_attr->children[i - 1];
 801e4ee:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 801e4f2:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801e4f6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
            i--;
 801e4fa:	3801      	subs	r0, #1
            parent->spec_attr->children[i] = parent->spec_attr->children[i - 1];
 801e4fc:	68ab      	ldr	r3, [r5, #8]
        while(i > index)  {
 801e4fe:	42a0      	cmp	r0, r4
            parent->spec_attr->children[i] = parent->spec_attr->children[i - 1];
 801e500:	681b      	ldr	r3, [r3, #0]
        while(i > index)  {
 801e502:	d1f4      	bne.n	801e4ee <lv_obj_move_to_index+0x50>
    parent->spec_attr->children[index] = obj;
 801e504:	68ab      	ldr	r3, [r5, #8]
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, NULL);
 801e506:	4628      	mov	r0, r5
 801e508:	2200      	movs	r2, #0
 801e50a:	2122      	movs	r1, #34	; 0x22
    parent->spec_attr->children[index] = obj;
 801e50c:	681b      	ldr	r3, [r3, #0]
 801e50e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, NULL);
 801e512:	f7e6 f917 	bl	8004744 <lv_event_send>
    lv_obj_invalidate(parent);
 801e516:	4628      	mov	r0, r5
}
 801e518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
 801e51c:	f7fe bbbe 	b.w	801cc9c <lv_obj_invalidate>

0801e520 <call_flush_cb>:
            draw_buf->buf_act = draw_buf->buf1;
    }
}

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 801e520:	b573      	push	{r0, r1, r4, r5, r6, lr}
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 801e522:	8905      	ldrh	r5, [r0, #8]
 801e524:	880c      	ldrh	r4, [r1, #0]
        .y1 = area->y1 + drv->offset_y,
 801e526:	884e      	ldrh	r6, [r1, #2]
        .x1 = area->x1 + drv->offset_x,
 801e528:	442c      	add	r4, r5
        .x2 = area->x2 + drv->offset_x,
        .y2 = area->y2 + drv->offset_y
    };

    drv->flush_cb(drv, &offset_area, color_p);
 801e52a:	6943      	ldr	r3, [r0, #20]
    lv_area_t offset_area = {
 801e52c:	f8ad 4000 	strh.w	r4, [sp]
        .y1 = area->y1 + drv->offset_y,
 801e530:	8944      	ldrh	r4, [r0, #10]
 801e532:	4426      	add	r6, r4
    lv_area_t offset_area = {
 801e534:	f8ad 6002 	strh.w	r6, [sp, #2]
        .x2 = area->x2 + drv->offset_x,
 801e538:	888e      	ldrh	r6, [r1, #4]
        .y2 = area->y2 + drv->offset_y
 801e53a:	88c9      	ldrh	r1, [r1, #6]
        .x2 = area->x2 + drv->offset_x,
 801e53c:	4435      	add	r5, r6
        .y2 = area->y2 + drv->offset_y
 801e53e:	440c      	add	r4, r1
    drv->flush_cb(drv, &offset_area, color_p);
 801e540:	4669      	mov	r1, sp
    lv_area_t offset_area = {
 801e542:	f8ad 5004 	strh.w	r5, [sp, #4]
 801e546:	f8ad 4006 	strh.w	r4, [sp, #6]
    drv->flush_cb(drv, &offset_area, color_p);
 801e54a:	4798      	blx	r3
}
 801e54c:	b002      	add	sp, #8
 801e54e:	bd70      	pop	{r4, r5, r6, pc}

0801e550 <lv_refr_get_top_obj>:
{
 801e550:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 801e552:	2200      	movs	r2, #0
{
 801e554:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 801e556:	3114      	adds	r1, #20
{
 801e558:	4606      	mov	r6, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 801e55a:	f005 ffbd 	bl	80244d8 <_lv_area_is_in>
 801e55e:	b910      	cbnz	r0, 801e566 <lv_refr_get_top_obj+0x16>
 801e560:	2000      	movs	r0, #0
}
 801e562:	b002      	add	sp, #8
 801e564:	bd70      	pop	{r4, r5, r6, pc}
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 801e566:	2101      	movs	r1, #1
 801e568:	4620      	mov	r0, r4
 801e56a:	f7fd fa83 	bl	801ba74 <lv_obj_has_flag>
 801e56e:	2800      	cmp	r0, #0
 801e570:	d1f6      	bne.n	801e560 <lv_refr_get_top_obj+0x10>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 801e572:	4620      	mov	r0, r4
 801e574:	f7fd fff1 	bl	801c55a <_lv_obj_get_layer_type>
 801e578:	2800      	cmp	r0, #0
 801e57a:	d1f1      	bne.n	801e560 <lv_refr_get_top_obj+0x10>
    info.res = LV_COVER_RES_COVER;
 801e57c:	f88d 0000 	strb.w	r0, [sp]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 801e580:	466a      	mov	r2, sp
 801e582:	2112      	movs	r1, #18
 801e584:	4620      	mov	r0, r4
    info.area = area_p;
 801e586:	9601      	str	r6, [sp, #4]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 801e588:	f7e6 f8dc 	bl	8004744 <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 801e58c:	f89d 3000 	ldrb.w	r3, [sp]
 801e590:	2b02      	cmp	r3, #2
 801e592:	d0e5      	beq.n	801e560 <lv_refr_get_top_obj+0x10>
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 801e594:	4620      	mov	r0, r4
 801e596:	f7ff fe3d 	bl	801e214 <lv_obj_get_child_cnt>
    for(i = child_cnt - 1; i >= 0; i--) {
 801e59a:	1e45      	subs	r5, r0, #1
 801e59c:	2d00      	cmp	r5, #0
 801e59e:	da05      	bge.n	801e5ac <lv_refr_get_top_obj+0x5c>
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 801e5a0:	f89d 3000 	ldrb.w	r3, [sp]
 801e5a4:	2b00      	cmp	r3, #0
 801e5a6:	d1db      	bne.n	801e560 <lv_refr_get_top_obj+0x10>
 801e5a8:	4620      	mov	r0, r4
 801e5aa:	e7da      	b.n	801e562 <lv_refr_get_top_obj+0x12>
        lv_obj_t * child = obj->spec_attr->children[i];
 801e5ac:	68a3      	ldr	r3, [r4, #8]
        found_p = lv_refr_get_top_obj(area_p, child);
 801e5ae:	4630      	mov	r0, r6
        lv_obj_t * child = obj->spec_attr->children[i];
 801e5b0:	681b      	ldr	r3, [r3, #0]
        found_p = lv_refr_get_top_obj(area_p, child);
 801e5b2:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 801e5b6:	f7ff ffcb 	bl	801e550 <lv_refr_get_top_obj>
        if(found_p != NULL) {
 801e5ba:	2800      	cmp	r0, #0
 801e5bc:	d1d1      	bne.n	801e562 <lv_refr_get_top_obj+0x12>
    for(i = child_cnt - 1; i >= 0; i--) {
 801e5be:	3d01      	subs	r5, #1
 801e5c0:	e7ec      	b.n	801e59c <lv_refr_get_top_obj+0x4c>

0801e5c2 <_lv_refr_init>:
}
 801e5c2:	4770      	bx	lr

0801e5c4 <lv_obj_redraw>:
{
 801e5c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e5c8:	460c      	mov	r4, r1
 801e5ca:	b087      	sub	sp, #28
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801e5cc:	6886      	ldr	r6, [r0, #8]
{
 801e5ce:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, &obj_coords_ext);
 801e5d0:	a902      	add	r1, sp, #8
 801e5d2:	4620      	mov	r0, r4
 801e5d4:	f7fe f912 	bl	801c7fc <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 801e5d8:	4620      	mov	r0, r4
 801e5da:	f7fd ff8c 	bl	801c4f6 <_lv_obj_get_ext_draw_size>
 801e5de:	4602      	mov	r2, r0
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 801e5e0:	4601      	mov	r1, r0
 801e5e2:	a802      	add	r0, sp, #8
 801e5e4:	f005 fe59 	bl	802429a <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 801e5e8:	aa02      	add	r2, sp, #8
 801e5ea:	4631      	mov	r1, r6
 801e5ec:	4668      	mov	r0, sp
 801e5ee:	f005 fe74 	bl	80242da <_lv_area_intersect>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 801e5f2:	b388      	cbz	r0, 801e658 <lv_obj_redraw+0x94>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 801e5f4:	462a      	mov	r2, r5
 801e5f6:	2114      	movs	r1, #20
 801e5f8:	4620      	mov	r0, r4
        draw_ctx->clip_area = &clip_coords_for_obj;
 801e5fa:	f8c5 d008 	str.w	sp, [r5, #8]
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 801e5fe:	f7e6 f8a1 	bl	8004744 <lv_event_send>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 801e602:	2701      	movs	r7, #1
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 801e604:	462a      	mov	r2, r5
 801e606:	2115      	movs	r1, #21
 801e608:	4620      	mov	r0, r4
 801e60a:	f7e6 f89b 	bl	8004744 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 801e60e:	462a      	mov	r2, r5
 801e610:	2116      	movs	r1, #22
 801e612:	4620      	mov	r0, r4
 801e614:	f7e6 f896 	bl	8004744 <lv_event_send>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 801e618:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e61c:	4620      	mov	r0, r4
 801e61e:	f10d 0810 	add.w	r8, sp, #16
 801e622:	f7fd fa27 	bl	801ba74 <lv_obj_has_flag>
 801e626:	b300      	cbz	r0, 801e66a <lv_obj_redraw+0xa6>
        clip_coords_for_children  = *clip_area_ori;
 801e628:	4643      	mov	r3, r8
 801e62a:	6830      	ldr	r0, [r6, #0]
 801e62c:	6871      	ldr	r1, [r6, #4]
 801e62e:	c303      	stmia	r3!, {r0, r1}
        draw_ctx->clip_area = &clip_coords_for_children;
 801e630:	f8c5 8008 	str.w	r8, [r5, #8]
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801e634:	4620      	mov	r0, r4
 801e636:	f7ff fded 	bl	801e214 <lv_obj_get_child_cnt>
        for(i = 0; i < child_cnt; i++) {
 801e63a:	f04f 0800 	mov.w	r8, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801e63e:	4681      	mov	r9, r0
        for(i = 0; i < child_cnt; i++) {
 801e640:	45c8      	cmp	r8, r9
 801e642:	d01a      	beq.n	801e67a <lv_obj_redraw+0xb6>
            lv_obj_t * child = obj->spec_attr->children[i];
 801e644:	68a3      	ldr	r3, [r4, #8]
            refr_obj(draw_ctx, child);
 801e646:	4628      	mov	r0, r5
            lv_obj_t * child = obj->spec_attr->children[i];
 801e648:	681b      	ldr	r3, [r3, #0]
            refr_obj(draw_ctx, child);
 801e64a:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
        for(i = 0; i < child_cnt; i++) {
 801e64e:	f108 0801 	add.w	r8, r8, #1
            refr_obj(draw_ctx, child);
 801e652:	f7e8 f95d 	bl	8006910 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 801e656:	e7f3      	b.n	801e640 <lv_obj_redraw+0x7c>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 801e658:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e65c:	4620      	mov	r0, r4
 801e65e:	f7fd fa09 	bl	801ba74 <lv_obj_has_flag>
 801e662:	4607      	mov	r7, r0
 801e664:	2800      	cmp	r0, #0
 801e666:	d1c5      	bne.n	801e5f4 <lv_obj_redraw+0x30>
 801e668:	e7d6      	b.n	801e618 <lv_obj_redraw+0x54>
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 801e66a:	f104 0214 	add.w	r2, r4, #20
 801e66e:	4631      	mov	r1, r6
 801e670:	4640      	mov	r0, r8
 801e672:	f005 fe32 	bl	80242da <_lv_area_intersect>
 801e676:	2800      	cmp	r0, #0
 801e678:	d1da      	bne.n	801e630 <lv_obj_redraw+0x6c>
    if(should_draw) {
 801e67a:	b187      	cbz	r7, 801e69e <lv_obj_redraw+0xda>
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 801e67c:	462a      	mov	r2, r5
 801e67e:	2117      	movs	r1, #23
 801e680:	4620      	mov	r0, r4
        draw_ctx->clip_area = &clip_coords_for_obj;
 801e682:	f8c5 d008 	str.w	sp, [r5, #8]
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 801e686:	f7e6 f85d 	bl	8004744 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 801e68a:	462a      	mov	r2, r5
 801e68c:	2118      	movs	r1, #24
 801e68e:	4620      	mov	r0, r4
 801e690:	f7e6 f858 	bl	8004744 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 801e694:	462a      	mov	r2, r5
 801e696:	2119      	movs	r1, #25
 801e698:	4620      	mov	r0, r4
 801e69a:	f7e6 f853 	bl	8004744 <lv_event_send>
    draw_ctx->clip_area = clip_area_ori;
 801e69e:	60ae      	str	r6, [r5, #8]
}
 801e6a0:	b007      	add	sp, #28
 801e6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801e6a6 <_lv_inv_area>:
{
 801e6a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801e6a8:	460d      	mov	r5, r1
    if(!disp) disp = lv_disp_get_default();
 801e6aa:	4604      	mov	r4, r0
 801e6ac:	b918      	cbnz	r0, 801e6b6 <_lv_inv_area+0x10>
 801e6ae:	f7f3 fd21 	bl	80120f4 <lv_disp_get_default>
    if(!disp) return;
 801e6b2:	4604      	mov	r4, r0
 801e6b4:	b158      	cbz	r0, 801e6ce <_lv_inv_area+0x28>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 801e6b6:	4620      	mov	r0, r4
 801e6b8:	f7fc fda0 	bl	801b1fc <lv_disp_is_invalidation_enabled>
 801e6bc:	b138      	cbz	r0, 801e6ce <_lv_inv_area+0x28>
    if(disp->rendering_in_progress) {
 801e6be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801e6c2:	f013 0304 	ands.w	r3, r3, #4
 801e6c6:	d102      	bne.n	801e6ce <_lv_inv_area+0x28>
    if(area_p == NULL) {
 801e6c8:	b91d      	cbnz	r5, 801e6d2 <_lv_inv_area+0x2c>
        disp->inv_p = 0;
 801e6ca:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
}
 801e6ce:	b004      	add	sp, #16
 801e6d0:	bd70      	pop	{r4, r5, r6, pc}
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 801e6d2:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 801e6d4:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 801e6d6:	f7f3 fd13 	bl	8012100 <lv_disp_get_hor_res>
 801e6da:	3801      	subs	r0, #1
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 801e6dc:	466e      	mov	r6, sp
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 801e6de:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 801e6e2:	4620      	mov	r0, r4
 801e6e4:	f7f3 fd1c 	bl	8012120 <lv_disp_get_ver_res>
 801e6e8:	3801      	subs	r0, #1
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 801e6ea:	4632      	mov	r2, r6
 801e6ec:	4629      	mov	r1, r5
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 801e6ee:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 801e6f2:	a802      	add	r0, sp, #8
 801e6f4:	f005 fdf1 	bl	80242da <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 801e6f8:	2800      	cmp	r0, #0
 801e6fa:	d0e8      	beq.n	801e6ce <_lv_inv_area+0x28>
    if(disp->driver->full_refresh) {
 801e6fc:	6820      	ldr	r0, [r4, #0]
 801e6fe:	7c03      	ldrb	r3, [r0, #16]
 801e700:	079b      	lsls	r3, r3, #30
 801e702:	d50e      	bpl.n	801e722 <_lv_inv_area+0x7c>
        disp->inv_areas[0] = scr_area;
 801e704:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801e708:	e896 0003 	ldmia.w	r6, {r0, r1}
 801e70c:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 801e710:	2301      	movs	r3, #1
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 801e712:	6860      	ldr	r0, [r4, #4]
    disp->inv_p++;
 801e714:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 801e718:	2800      	cmp	r0, #0
 801e71a:	d0d8      	beq.n	801e6ce <_lv_inv_area+0x28>
 801e71c:	f006 fcf8 	bl	8025110 <lv_timer_resume>
 801e720:	e7d5      	b.n	801e6ce <_lv_inv_area+0x28>
    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 801e722:	6983      	ldr	r3, [r0, #24]
 801e724:	b10b      	cbz	r3, 801e72a <_lv_inv_area+0x84>
 801e726:	a902      	add	r1, sp, #8
 801e728:	4798      	blx	r3
{
 801e72a:	2500      	movs	r5, #0
    for(i = 0; i < disp->inv_p; i++) {
 801e72c:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 801e730:	b2aa      	uxth	r2, r5
 801e732:	4293      	cmp	r3, r2
 801e734:	d80b      	bhi.n	801e74e <_lv_inv_area+0xa8>
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 801e736:	2b1f      	cmp	r3, #31
 801e738:	d815      	bhi.n	801e766 <_lv_inv_area+0xc0>
    dest->x1 = src->x1;
 801e73a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 801e73e:	9a02      	ldr	r2, [sp, #8]
 801e740:	631a      	str	r2, [r3, #48]	; 0x30
    dest->x2 = src->x2;
 801e742:	9a03      	ldr	r2, [sp, #12]
 801e744:	635a      	str	r2, [r3, #52]	; 0x34
    disp->inv_p++;
 801e746:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 801e74a:	3301      	adds	r3, #1
 801e74c:	e7e1      	b.n	801e712 <_lv_inv_area+0x6c>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 801e74e:	b2a9      	uxth	r1, r5
 801e750:	2200      	movs	r2, #0
 801e752:	a802      	add	r0, sp, #8
 801e754:	3501      	adds	r5, #1
 801e756:	3106      	adds	r1, #6
 801e758:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 801e75c:	f005 febc 	bl	80244d8 <_lv_area_is_in>
 801e760:	2800      	cmp	r0, #0
 801e762:	d0e3      	beq.n	801e72c <_lv_inv_area+0x86>
 801e764:	e7b3      	b.n	801e6ce <_lv_inv_area+0x28>
        disp->inv_p = 0;
 801e766:	2300      	movs	r3, #0
 801e768:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    dest->x1 = src->x1;
 801e76c:	f8bd 3000 	ldrh.w	r3, [sp]
 801e770:	8623      	strh	r3, [r4, #48]	; 0x30
    dest->y1 = src->y1;
 801e772:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e776:	8663      	strh	r3, [r4, #50]	; 0x32
    dest->x2 = src->x2;
 801e778:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801e77c:	86a3      	strh	r3, [r4, #52]	; 0x34
    dest->y2 = src->y2;
 801e77e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801e782:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 801e784:	e7df      	b.n	801e746 <_lv_inv_area+0xa0>

0801e786 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 801e786:	b570      	push	{r4, r5, r6, lr}
 801e788:	4604      	mov	r4, r0
    if(th->parent) apply_theme(th->parent, obj);
 801e78a:	6840      	ldr	r0, [r0, #4]
{
 801e78c:	460d      	mov	r5, r1
    if(th->parent) apply_theme(th->parent, obj);
 801e78e:	b108      	cbz	r0, 801e794 <apply_theme+0xe>
 801e790:	f7ff fff9 	bl	801e786 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 801e794:	6823      	ldr	r3, [r4, #0]
 801e796:	b123      	cbz	r3, 801e7a2 <apply_theme+0x1c>
 801e798:	4629      	mov	r1, r5
 801e79a:	4620      	mov	r0, r4
}
 801e79c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(th->apply_cb) th->apply_cb(th, obj);
 801e7a0:	4718      	bx	r3
}
 801e7a2:	bd70      	pop	{r4, r5, r6, pc}

0801e7a4 <lv_theme_get_from_obj>:
{
 801e7a4:	b508      	push	{r3, lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 801e7a6:	b128      	cbz	r0, 801e7b4 <lv_theme_get_from_obj+0x10>
 801e7a8:	f7e8 f894 	bl	80068d4 <lv_obj_get_disp>
}
 801e7ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_theme(disp);
 801e7b0:	f7fc bd1e 	b.w	801b1f0 <lv_disp_get_theme>
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 801e7b4:	f7f3 fc9e 	bl	80120f4 <lv_disp_get_default>
 801e7b8:	e7f8      	b.n	801e7ac <lv_theme_get_from_obj+0x8>

0801e7ba <lv_theme_get_color_primary>:
{
 801e7ba:	b508      	push	{r3, lr}
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 801e7bc:	f7ff fff2 	bl	801e7a4 <lv_theme_get_from_obj>
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 801e7c0:	b920      	cbnz	r0, 801e7cc <lv_theme_get_color_primary+0x12>
 801e7c2:	2011      	movs	r0, #17
}
 801e7c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 801e7c8:	f7f3 bf0c 	b.w	80125e4 <lv_palette_main>
 801e7cc:	8a00      	ldrh	r0, [r0, #16]
}
 801e7ce:	bd08      	pop	{r3, pc}

0801e7d0 <lv_draw_init>:
 **********************/

void lv_draw_init(void)
{
    /*Nothing to init now*/
}
 801e7d0:	4770      	bx	lr

0801e7d2 <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 801e7d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801e7d4:	b103      	cbz	r3, 801e7d8 <lv_draw_wait_for_finish+0x6>
 801e7d6:	4718      	bx	r3
}
 801e7d8:	4770      	bx	lr

0801e7da <lv_draw_arc_dsc_init>:
{
 801e7da:	b510      	push	{r4, lr}
 801e7dc:	2210      	movs	r2, #16
 801e7de:	2100      	movs	r1, #0
 801e7e0:	4604      	mov	r4, r0
 801e7e2:	f7fb ffd1 	bl	801a788 <memset>
    dsc->opa = LV_OPA_COVER;
 801e7e6:	23ff      	movs	r3, #255	; 0xff
 801e7e8:	7323      	strb	r3, [r4, #12]
    dsc->color = lv_color_black();
 801e7ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801e7ee:	6023      	str	r3, [r4, #0]
}
 801e7f0:	bd10      	pop	{r4, pc}

0801e7f2 <lv_draw_arc>:
    if(dsc->opa <= LV_OPA_MIN) return;
 801e7f2:	f891 c00c 	ldrb.w	ip, [r1, #12]
 801e7f6:	f1bc 0f02 	cmp.w	ip, #2
{
 801e7fa:	b4f0      	push	{r4, r5, r6, r7}
 801e7fc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 801e800:	f8bd 7014 	ldrh.w	r7, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
 801e804:	d90a      	bls.n	801e81c <lv_draw_arc+0x2a>
    if(dsc->width == 0) return;
 801e806:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801e80a:	b13c      	cbz	r4, 801e81c <lv_draw_arc+0x2a>
    if(start_angle == end_angle) return;
 801e80c:	42be      	cmp	r6, r7
 801e80e:	d005      	beq.n	801e81c <lv_draw_arc+0x2a>
    draw_ctx->draw_arc(draw_ctx, dsc, center, radius, start_angle, end_angle);
 801e810:	6944      	ldr	r4, [r0, #20]
 801e812:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801e816:	46a4      	mov	ip, r4
}
 801e818:	bcf0      	pop	{r4, r5, r6, r7}
    draw_ctx->draw_arc(draw_ctx, dsc, center, radius, start_angle, end_angle);
 801e81a:	4760      	bx	ip
}
 801e81c:	bcf0      	pop	{r4, r5, r6, r7}
 801e81e:	4770      	bx	lr

0801e820 <show_error>:
{
 801e820:	b570      	push	{r4, r5, r6, lr}
 801e822:	b098      	sub	sp, #96	; 0x60
 801e824:	460d      	mov	r5, r1
 801e826:	4604      	mov	r4, r0
 801e828:	4616      	mov	r6, r2
    lv_draw_rect_dsc_init(&rect_dsc);
 801e82a:	a80a      	add	r0, sp, #40	; 0x28
 801e82c:	f7ea f8ba 	bl	80089a4 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 801e830:	f64f 73ff 	movw	r3, #65535	; 0xffff
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 801e834:	462a      	mov	r2, r5
 801e836:	a90a      	add	r1, sp, #40	; 0x28
 801e838:	4620      	mov	r0, r4
    rect_dsc.bg_color = lv_color_white();
 801e83a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 801e83e:	f000 fde6 	bl	801f40e <lv_draw_rect>
    lv_draw_label_dsc_init(&label_dsc);
 801e842:	a802      	add	r0, sp, #8
 801e844:	f7e9 fa64 	bl	8007d10 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 801e848:	2300      	movs	r3, #0
 801e84a:	462a      	mov	r2, r5
 801e84c:	a902      	add	r1, sp, #8
 801e84e:	9300      	str	r3, [sp, #0]
 801e850:	4620      	mov	r0, r4
 801e852:	4633      	mov	r3, r6
 801e854:	f7e9 fa74 	bl	8007d40 <lv_draw_label>
}
 801e858:	b018      	add	sp, #96	; 0x60
 801e85a:	bd70      	pop	{r4, r5, r6, pc}

0801e85c <lv_draw_img_dsc_init>:
{
 801e85c:	b510      	push	{r4, lr}
 801e85e:	2218      	movs	r2, #24
 801e860:	2100      	movs	r1, #0
 801e862:	4604      	mov	r4, r0
 801e864:	f7fb ff90 	bl	801a788 <memset>
    dsc->recolor = lv_color_black();
 801e868:	2300      	movs	r3, #0
 801e86a:	8123      	strh	r3, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 801e86c:	23ff      	movs	r3, #255	; 0xff
 801e86e:	72e3      	strb	r3, [r4, #11]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 801e870:	f44f 7380 	mov.w	r3, #256	; 0x100
 801e874:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 801e876:	7d23      	ldrb	r3, [r4, #20]
 801e878:	f043 0301 	orr.w	r3, r3, #1
 801e87c:	7523      	strb	r3, [r4, #20]
}
 801e87e:	bd10      	pop	{r4, pc}

0801e880 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
 801e880:	2803      	cmp	r0, #3
 801e882:	d003      	beq.n	801e88c <lv_img_cf_is_chroma_keyed+0xc>
 801e884:	1f83      	subs	r3, r0, #6
 801e886:	4258      	negs	r0, r3
 801e888:	4158      	adcs	r0, r3
 801e88a:	4770      	bx	lr
            is_chroma_keyed = true;
 801e88c:	2001      	movs	r0, #1
}
 801e88e:	4770      	bx	lr

0801e890 <lv_img_cf_has_alpha>:
    switch(cf) {
 801e890:	280e      	cmp	r0, #14
 801e892:	bf9d      	ittte	ls
 801e894:	f647 73a4 	movwls	r3, #32676	; 0x7fa4
 801e898:	fa23 f000 	lsrls.w	r0, r3, r0
 801e89c:	f000 0001 	andls.w	r0, r0, #1
 801e8a0:	2000      	movhi	r0, #0
}
 801e8a2:	4770      	bx	lr

0801e8a4 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 801e8a4:	b138      	cbz	r0, 801e8b6 <lv_img_src_get_type+0x12>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 801e8a6:	7800      	ldrb	r0, [r0, #0]
 801e8a8:	f1a0 0320 	sub.w	r3, r0, #32
 801e8ac:	2b5f      	cmp	r3, #95	; 0x5f
 801e8ae:	d904      	bls.n	801e8ba <lv_img_src_get_type+0x16>
    else if(u8_p[0] >= 0x80) {
 801e8b0:	09c0      	lsrs	r0, r0, #7
 801e8b2:	0040      	lsls	r0, r0, #1
 801e8b4:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 801e8b6:	2003      	movs	r0, #3
 801e8b8:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 801e8ba:	2001      	movs	r0, #1
}
 801e8bc:	4770      	bx	lr

0801e8be <lv_draw_img_decoded>:
{
 801e8be:	b430      	push	{r4, r5}
    if(draw_ctx->draw_img_decoded == NULL) return;
 801e8c0:	6984      	ldr	r4, [r0, #24]
{
 801e8c2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if(draw_ctx->draw_img_decoded == NULL) return;
 801e8c6:	b11c      	cbz	r4, 801e8d0 <lv_draw_img_decoded+0x12>
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 801e8c8:	46a4      	mov	ip, r4
 801e8ca:	9502      	str	r5, [sp, #8]
}
 801e8cc:	bc30      	pop	{r4, r5}
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 801e8ce:	4760      	bx	ip
}
 801e8d0:	bc30      	pop	{r4, r5}
 801e8d2:	4770      	bx	lr

0801e8d4 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 801e8d4:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 801e8d6:	3830      	subs	r0, #48	; 0x30
 801e8d8:	b2c0      	uxtb	r0, r0
 801e8da:	2809      	cmp	r0, #9
 801e8dc:	d90b      	bls.n	801e8f6 <hex_char_to_num+0x22>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 801e8de:	2b60      	cmp	r3, #96	; 0x60
 801e8e0:	bf84      	itt	hi
 801e8e2:	3b20      	subhi	r3, #32
 801e8e4:	b2db      	uxtbhi	r3, r3

        switch(hex) {
 801e8e6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801e8ea:	2a05      	cmp	r2, #5
 801e8ec:	d802      	bhi.n	801e8f4 <hex_char_to_num+0x20>
 801e8ee:	3b37      	subs	r3, #55	; 0x37
 801e8f0:	b2d8      	uxtb	r0, r3
 801e8f2:	4770      	bx	lr
{
 801e8f4:	2000      	movs	r0, #0
                break;
        }
    }

    return result;
}
 801e8f6:	4770      	bx	lr

0801e8f8 <lv_draw_letter>:
{
 801e8f8:	b410      	push	{r4}
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 801e8fa:	6a04      	ldr	r4, [r0, #32]
 801e8fc:	46a4      	mov	ip, r4
}
 801e8fe:	bc10      	pop	{r4}
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 801e900:	4760      	bx	ip

0801e902 <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 801e902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e904:	4605      	mov	r5, r0
    if(draw_ctx->layer_init == NULL) return NULL;
 801e906:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
{
 801e908:	460e      	mov	r6, r1
 801e90a:	4617      	mov	r7, r2
    if(draw_ctx->layer_init == NULL) return NULL;
 801e90c:	b338      	cbz	r0, 801e95e <lv_draw_layer_create+0x5c>

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 801e90e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 801e910:	f7f3 ff02 	bl	8012718 <lv_mem_alloc>
    LV_ASSERT_MALLOC(layer_ctx);
 801e914:	4604      	mov	r4, r0
 801e916:	b900      	cbnz	r0, 801e91a <lv_draw_layer_create+0x18>
 801e918:	e7fe      	b.n	801e918 <lv_draw_layer_create+0x16>
 801e91a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 801e91c:	2100      	movs	r1, #0
 801e91e:	f7fb ff33 	bl	801a788 <memset>
        return NULL;
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 801e922:	f7e8 fca3 	bl	800726c <_lv_refr_get_disp_refreshing>
    layer_ctx->original.buf = draw_ctx->buf;
 801e926:	682b      	ldr	r3, [r5, #0]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
    layer_ctx->original.clip_area = draw_ctx->clip_area;
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
    layer_ctx->area_full = *layer_area;

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 801e928:	463a      	mov	r2, r7
    layer_ctx->original.buf = draw_ctx->buf;
 801e92a:	6223      	str	r3, [r4, #32]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
 801e92c:	686b      	ldr	r3, [r5, #4]
 801e92e:	61e3      	str	r3, [r4, #28]
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 801e930:	68ab      	ldr	r3, [r5, #8]
 801e932:	61a3      	str	r3, [r4, #24]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 801e934:	6803      	ldr	r3, [r0, #0]
 801e936:	7c1b      	ldrb	r3, [r3, #16]
 801e938:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801e93c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    layer_ctx->area_full = *layer_area;
 801e940:	4623      	mov	r3, r4
 801e942:	6830      	ldr	r0, [r6, #0]
 801e944:	6871      	ldr	r1, [r6, #4]
 801e946:	c303      	stmia	r3!, {r0, r1}
    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 801e948:	4628      	mov	r0, r5
 801e94a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801e94c:	4621      	mov	r1, r4
 801e94e:	4798      	blx	r3
    if(NULL == init_layer_ctx) {
 801e950:	4605      	mov	r5, r0
 801e952:	b910      	cbnz	r0, 801e95a <lv_draw_layer_create+0x58>
        lv_mem_free(layer_ctx);
 801e954:	4620      	mov	r0, r4
 801e956:	f7f3 fefd 	bl	8012754 <lv_mem_free>
    }
    return init_layer_ctx;
}
 801e95a:	4628      	mov	r0, r5
 801e95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(draw_ctx->layer_init == NULL) return NULL;
 801e95e:	4605      	mov	r5, r0
 801e960:	e7fb      	b.n	801e95a <lv_draw_layer_create+0x58>

0801e962 <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 801e962:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801e964:	b103      	cbz	r3, 801e968 <lv_draw_layer_adjust+0x6>
 801e966:	4718      	bx	r3
}
 801e968:	4770      	bx	lr

0801e96a <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 801e96a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801e96c:	b103      	cbz	r3, 801e970 <lv_draw_layer_blend+0x6>
 801e96e:	4718      	bx	r3
}
 801e970:	4770      	bx	lr

0801e972 <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 801e972:	b538      	push	{r3, r4, r5, lr}
 801e974:	460c      	mov	r4, r1
 801e976:	4605      	mov	r5, r0

    lv_draw_wait_for_finish(draw_ctx);
 801e978:	f7ff ff2b 	bl	801e7d2 <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 801e97c:	6a23      	ldr	r3, [r4, #32]
 801e97e:	602b      	str	r3, [r5, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 801e980:	69e3      	ldr	r3, [r4, #28]
 801e982:	606b      	str	r3, [r5, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 801e984:	69a3      	ldr	r3, [r4, #24]
 801e986:	60ab      	str	r3, [r5, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 801e988:	f7e8 fc70 	bl	800726c <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 801e98c:	6803      	ldr	r3, [r0, #0]
 801e98e:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 801e992:	7c1a      	ldrb	r2, [r3, #16]
 801e994:	f361 1286 	bfi	r2, r1, #6, #1
 801e998:	741a      	strb	r2, [r3, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 801e99a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801e99c:	b113      	cbz	r3, 801e9a4 <lv_draw_layer_destroy+0x32>
 801e99e:	4621      	mov	r1, r4
 801e9a0:	4628      	mov	r0, r5
 801e9a2:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 801e9a4:	4620      	mov	r0, r4
}
 801e9a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_mem_free(layer_ctx);
 801e9aa:	f7f3 bed3 	b.w	8012754 <lv_mem_free>

0801e9ae <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 801e9ae:	b510      	push	{r4, lr}
 801e9b0:	220a      	movs	r2, #10
 801e9b2:	2100      	movs	r1, #0
 801e9b4:	4604      	mov	r4, r0
 801e9b6:	f7fb fee7 	bl	801a788 <memset>
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
    dsc->width = 1;
    dsc->opa = LV_OPA_COVER;
 801e9ba:	23ff      	movs	r3, #255	; 0xff
 801e9bc:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 801e9be:	2300      	movs	r3, #0
 801e9c0:	8023      	strh	r3, [r4, #0]
    dsc->width = 1;
 801e9c2:	2301      	movs	r3, #1
 801e9c4:	8063      	strh	r3, [r4, #2]
}
 801e9c6:	bd10      	pop	{r4, pc}

0801e9c8 <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 801e9c8:	b470      	push	{r4, r5, r6}
    if(dsc->width == 0) return;
 801e9ca:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801e9ce:	b136      	cbz	r6, 801e9de <lv_draw_line+0x16>
    if(dsc->opa <= LV_OPA_MIN) return;
 801e9d0:	7a0c      	ldrb	r4, [r1, #8]
 801e9d2:	2c02      	cmp	r4, #2
 801e9d4:	d903      	bls.n	801e9de <lv_draw_line+0x16>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 801e9d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801e9d8:	46a4      	mov	ip, r4
}
 801e9da:	bc70      	pop	{r4, r5, r6}
    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 801e9dc:	4760      	bx	ip
}
 801e9de:	bc70      	pop	{r4, r5, r6}
 801e9e0:	4770      	bx	lr

0801e9e2 <lv_memset_00>:
{
 801e9e2:	460a      	mov	r2, r1
    memset(dst, 0x00, len);
 801e9e4:	2100      	movs	r1, #0
 801e9e6:	f7fb becf 	b.w	801a788 <memset>

0801e9ea <mask_mix>:
}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 801e9ea:	29fc      	cmp	r1, #252	; 0xfc
 801e9ec:	d80a      	bhi.n	801ea04 <mask_mix+0x1a>
    if(mask_new <= LV_OPA_MIN) return 0;
 801e9ee:	2902      	cmp	r1, #2
 801e9f0:	d907      	bls.n	801ea02 <mask_mix+0x18>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 801e9f2:	fb10 f001 	smulbb	r0, r0, r1
 801e9f6:	f248 0381 	movw	r3, #32897	; 0x8081
 801e9fa:	4358      	muls	r0, r3
 801e9fc:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 801ea00:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
 801ea02:	2000      	movs	r0, #0
}
 801ea04:	4770      	bx	lr

0801ea06 <lv_draw_mask_line>:
{
 801ea06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea0a:	9e08      	ldr	r6, [sp, #32]
 801ea0c:	461c      	mov	r4, r3
 801ea0e:	4605      	mov	r5, r0
    abs_y -= p->origo.y;
 801ea10:	8ab3      	ldrh	r3, [r6, #20]
        if(p->flat) {
 801ea12:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
    abs_y -= p->origo.y;
 801ea16:	1ad2      	subs	r2, r2, r3
    abs_x -= p->origo.x;
 801ea18:	8a73      	ldrh	r3, [r6, #18]
    abs_y -= p->origo.y;
 801ea1a:	fa0f fc82 	sxth.w	ip, r2
    abs_x -= p->origo.x;
 801ea1e:	1aca      	subs	r2, r1, r3
        if(p->flat) {
 801ea20:	f00e 0101 	and.w	r1, lr, #1
    abs_x -= p->origo.x;
 801ea24:	b217      	sxth	r7, r2
    if(p->steep == 0) {
 801ea26:	6a32      	ldr	r2, [r6, #32]
 801ea28:	2a00      	cmp	r2, #0
 801ea2a:	d141      	bne.n	801eab0 <lv_draw_mask_line+0xaa>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 801ea2c:	7c33      	ldrb	r3, [r6, #16]
 801ea2e:	f003 0002 	and.w	r0, r3, #2
        if(p->flat) {
 801ea32:	b1a9      	cbz	r1, 801ea60 <lv_draw_mask_line+0x5a>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 801ea34:	b1a8      	cbz	r0, 801ea62 <lv_draw_mask_line+0x5c>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801ea36:	f003 0303 	and.w	r3, r3, #3
 801ea3a:	2b02      	cmp	r3, #2
 801ea3c:	d106      	bne.n	801ea4c <lv_draw_mask_line+0x46>
 801ea3e:	f1bc 3fff 	cmp.w	ip, #4294967295
 801ea42:	bfac      	ite	ge
 801ea44:	2000      	movge	r0, #0
 801ea46:	2001      	movlt	r0, #1
}
 801ea48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801ea4c:	2b03      	cmp	r3, #3
 801ea4e:	d001      	beq.n	801ea54 <lv_draw_mask_line+0x4e>
                return LV_DRAW_MASK_RES_TRANSP;
 801ea50:	2000      	movs	r0, #0
 801ea52:	e7f9      	b.n	801ea48 <lv_draw_mask_line+0x42>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801ea54:	f1bc 0f00 	cmp.w	ip, #0
 801ea58:	bfd4      	ite	le
 801ea5a:	2000      	movle	r0, #0
 801ea5c:	2001      	movgt	r0, #1
 801ea5e:	e7f3      	b.n	801ea48 <lv_draw_mask_line+0x42>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 801ea60:	b108      	cbz	r0, 801ea66 <lv_draw_mask_line+0x60>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 801ea62:	2001      	movs	r0, #1
 801ea64:	e7f0      	b.n	801ea48 <lv_draw_mask_line+0x42>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801ea66:	f003 0303 	and.w	r3, r3, #3
 801ea6a:	2b01      	cmp	r3, #1
 801ea6c:	d108      	bne.n	801ea80 <lv_draw_mask_line+0x7a>
 801ea6e:	2f00      	cmp	r7, #0
 801ea70:	dcf7      	bgt.n	801ea62 <lv_draw_mask_line+0x5c>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 801ea72:	42e7      	cmn	r7, r4
 801ea74:	d4ec      	bmi.n	801ea50 <lv_draw_mask_line+0x4a>
                    int32_t k = - abs_x;
 801ea76:	427a      	negs	r2, r7
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 801ea78:	4294      	cmp	r4, r2
 801ea7a:	dde9      	ble.n	801ea50 <lv_draw_mask_line+0x4a>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 801ea7c:	4611      	mov	r1, r2
 801ea7e:	e0ff      	b.n	801ec80 <lv_draw_mask_line+0x27a>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801ea80:	1939      	adds	r1, r7, r4
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 801ea82:	b95b      	cbnz	r3, 801ea9c <lv_draw_mask_line+0x96>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801ea84:	2900      	cmp	r1, #0
 801ea86:	dbec      	blt.n	801ea62 <lv_draw_mask_line+0x5c>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 801ea88:	2f00      	cmp	r7, #0
 801ea8a:	dce1      	bgt.n	801ea50 <lv_draw_mask_line+0x4a>
                    int32_t k = - abs_x;
 801ea8c:	4278      	negs	r0, r7
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 801ea8e:	42a0      	cmp	r0, r4
 801ea90:	da02      	bge.n	801ea98 <lv_draw_mask_line+0x92>
 801ea92:	4428      	add	r0, r5
            lv_memset_00(&mask_buf[k], len - k);
 801ea94:	f7ff ffa5 	bl	801e9e2 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 801ea98:	2002      	movs	r0, #2
 801ea9a:	e7d5      	b.n	801ea48 <lv_draw_mask_line+0x42>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 801ea9c:	2900      	cmp	r1, #0
 801ea9e:	dbd7      	blt.n	801ea50 <lv_draw_mask_line+0x4a>
                    if(k < 0) k = 0;
 801eaa0:	2f00      	cmp	r7, #0
 801eaa2:	dd01      	ble.n	801eaa8 <lv_draw_mask_line+0xa2>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 801eaa4:	2c00      	cmp	r4, #0
 801eaa6:	e7e8      	b.n	801ea7a <lv_draw_mask_line+0x74>
                    int32_t k = - abs_x;
 801eaa8:	427a      	negs	r2, r7
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 801eaaa:	42a2      	cmp	r2, r4
 801eaac:	dad0      	bge.n	801ea50 <lv_draw_mask_line+0x4a>
 801eaae:	e7e5      	b.n	801ea7c <lv_draw_mask_line+0x76>
    if(p->flat) {
 801eab0:	f00e 0002 	and.w	r0, lr, #2
 801eab4:	2900      	cmp	r1, #0
 801eab6:	f000 80a2 	beq.w	801ebfe <lv_draw_mask_line+0x1f8>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 801eaba:	69f3      	ldr	r3, [r6, #28]
            if(p->inv) {
 801eabc:	b2c0      	uxtb	r0, r0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 801eabe:	fb07 f203 	mul.w	r2, r7, r3
    if(p->yx_steep > 0) {
 801eac2:	2b00      	cmp	r3, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 801eac4:	ea4f 22a2 	mov.w	r2, r2, asr #10
    if(p->yx_steep > 0) {
 801eac8:	dd05      	ble.n	801ead6 <lv_draw_mask_line+0xd0>
        if(y_at_x > abs_y) {
 801eaca:	4562      	cmp	r2, ip
 801eacc:	dd0e      	ble.n	801eaec <lv_draw_mask_line+0xe6>
        if(p->inv) {
 801eace:	3800      	subs	r0, #0
 801ead0:	bf18      	it	ne
 801ead2:	2001      	movne	r0, #1
 801ead4:	e7b8      	b.n	801ea48 <lv_draw_mask_line+0x42>
        if(y_at_x < abs_y) {
 801ead6:	4562      	cmp	r2, ip
 801ead8:	dbf9      	blt.n	801eace <lv_draw_mask_line+0xc8>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 801eada:	19e2      	adds	r2, r4, r7
 801eadc:	4353      	muls	r3, r2
        if(y_at_x > abs_y) {
 801eade:	ebbc 2fa3 	cmp.w	ip, r3, asr #10
 801eae2:	db08      	blt.n	801eaf6 <lv_draw_mask_line+0xf0>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 801eae4:	69b3      	ldr	r3, [r6, #24]
 801eae6:	fb0c 3303 	mla	r3, ip, r3, r3
 801eaea:	e00b      	b.n	801eb04 <lv_draw_mask_line+0xfe>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 801eaec:	19e2      	adds	r2, r4, r7
 801eaee:	4353      	muls	r3, r2
        if(y_at_x < abs_y) {
 801eaf0:	ebbc 2fa3 	cmp.w	ip, r3, asr #10
 801eaf4:	dd03      	ble.n	801eafe <lv_draw_mask_line+0xf8>
        if(p->inv) {
 801eaf6:	fab0 f080 	clz	r0, r0
 801eafa:	0940      	lsrs	r0, r0, #5
 801eafc:	e7a4      	b.n	801ea48 <lv_draw_mask_line+0x42>
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 801eafe:	69b3      	ldr	r3, [r6, #24]
 801eb00:	fb03 f30c 	mul.w	r3, r3, ip
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 801eb04:	f343 0395 	sbfx	r3, r3, #2, #22
    if(xef == 0) px_h = 255;
 801eb08:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
    int32_t k = xei - abs_x;
 801eb0c:	ebc7 2223 	rsb	r2, r7, r3, asr #8
    if(xef == 0) px_h = 255;
 801eb10:	d068      	beq.n	801ebe4 <lv_draw_mask_line+0x1de>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 801eb12:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 801eb16:	6a73      	ldr	r3, [r6, #36]	; 0x24
        if(k >= 0 && k < len) {
 801eb18:	2a00      	cmp	r2, #0
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 801eb1a:	fb01 f303 	mul.w	r3, r1, r3
 801eb1e:	ea4f 2323 	mov.w	r3, r3, asr #8
 801eb22:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
        if(k >= 0 && k < len) {
 801eb26:	db0b      	blt.n	801eb40 <lv_draw_mask_line+0x13a>
 801eb28:	4294      	cmp	r4, r2
 801eb2a:	dd09      	ble.n	801eb40 <lv_draw_mask_line+0x13a>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 801eb2c:	4359      	muls	r1, r3
 801eb2e:	f3c1 2147 	ubfx	r1, r1, #9, #8
            if(p->inv) m = 255 - m;
 801eb32:	b908      	cbnz	r0, 801eb38 <lv_draw_mask_line+0x132>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 801eb34:	43c9      	mvns	r1, r1
 801eb36:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 801eb38:	5ca8      	ldrb	r0, [r5, r2]
 801eb3a:	f7ff ff56 	bl	801e9ea <mask_mix>
 801eb3e:	54a8      	strb	r0, [r5, r2]
        k++;
 801eb40:	f102 0801 	add.w	r8, r2, #1
    while(px_h > p->spx) {
 801eb44:	6a71      	ldr	r1, [r6, #36]	; 0x24
 801eb46:	428f      	cmp	r7, r1
 801eb48:	dc28      	bgt.n	801eb9c <lv_draw_mask_line+0x196>
    if(k < len && k >= 0) {
 801eb4a:	45a0      	cmp	r8, r4
 801eb4c:	da41      	bge.n	801ebd2 <lv_draw_mask_line+0x1cc>
 801eb4e:	f1b8 0f00 	cmp.w	r8, #0
 801eb52:	db3e      	blt.n	801ebd2 <lv_draw_mask_line+0x1cc>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 801eb54:	69b1      	ldr	r1, [r6, #24]
        if(p->yx_steep < 0) m = 255 - m;
 801eb56:	69f3      	ldr	r3, [r6, #28]
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 801eb58:	4379      	muls	r1, r7
        mask_buf[k] = mask_mix(mask_buf[k], m);
 801eb5a:	f815 0008 	ldrb.w	r0, [r5, r8]
        if(p->yx_steep < 0) m = 255 - m;
 801eb5e:	2b00      	cmp	r3, #0
        if(p->inv) m = 255 - m;
 801eb60:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 801eb64:	ea4f 21a1 	mov.w	r1, r1, asr #10
        m = (x_inters * px_h) >> 9;
 801eb68:	fb07 f101 	mul.w	r1, r7, r1
 801eb6c:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
 801eb70:	bfbc      	itt	lt
 801eb72:	43c9      	mvnlt	r1, r1
 801eb74:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
 801eb76:	079f      	lsls	r7, r3, #30
 801eb78:	bf44      	itt	mi
 801eb7a:	43c9      	mvnmi	r1, r1
 801eb7c:	b2c9      	uxtbmi	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
 801eb7e:	f7ff ff34 	bl	801e9ea <mask_mix>
 801eb82:	f805 0008 	strb.w	r0, [r5, r8]
    if(p->inv) {
 801eb86:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 801eb8a:	0798      	lsls	r0, r3, #30
 801eb8c:	d52d      	bpl.n	801ebea <lv_draw_mask_line+0x1e4>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 801eb8e:	4294      	cmp	r4, r2
 801eb90:	f6ff af5e 	blt.w	801ea50 <lv_draw_mask_line+0x4a>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 801eb94:	2a00      	cmp	r2, #0
 801eb96:	f6ff af7f 	blt.w	801ea98 <lv_draw_mask_line+0x92>
 801eb9a:	e76f      	b.n	801ea7c <lv_draw_mask_line+0x76>
        if(k >= 0 && k < len) {
 801eb9c:	f1b8 0f00 	cmp.w	r8, #0
 801eba0:	db10      	blt.n	801ebc4 <lv_draw_mask_line+0x1be>
 801eba2:	45a0      	cmp	r8, r4
 801eba4:	da0e      	bge.n	801ebc4 <lv_draw_mask_line+0x1be>
            if(p->inv) m = 255 - m;
 801eba6:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
            m = px_h - (p->spx >> 1);
 801ebaa:	eba7 0161 	sub.w	r1, r7, r1, asr #1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 801ebae:	f815 0008 	ldrb.w	r0, [r5, r8]
            m = px_h - (p->spx >> 1);
 801ebb2:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
 801ebb4:	079b      	lsls	r3, r3, #30
 801ebb6:	bf44      	itt	mi
 801ebb8:	43c9      	mvnmi	r1, r1
 801ebba:	b2c9      	uxtbmi	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 801ebbc:	f7ff ff15 	bl	801e9ea <mask_mix>
 801ebc0:	f805 0008 	strb.w	r0, [r5, r8]
        k++;
 801ebc4:	f108 0801 	add.w	r8, r8, #1
        px_h -= p->spx;
 801ebc8:	6a73      	ldr	r3, [r6, #36]	; 0x24
        if(k >= len) break;
 801ebca:	45a0      	cmp	r8, r4
        px_h -= p->spx;
 801ebcc:	eba7 0703 	sub.w	r7, r7, r3
        if(k >= len) break;
 801ebd0:	dbb8      	blt.n	801eb44 <lv_draw_mask_line+0x13e>
    if(p->inv) {
 801ebd2:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 801ebd6:	0799      	lsls	r1, r3, #30
 801ebd8:	d4d9      	bmi.n	801eb8e <lv_draw_mask_line+0x188>
        if(k < 0) {
 801ebda:	f118 0801 	adds.w	r8, r8, #1
 801ebde:	f53f af37 	bmi.w	801ea50 <lv_draw_mask_line+0x4a>
 801ebe2:	e004      	b.n	801ebee <lv_draw_mask_line+0x1e8>
    int32_t k = xei - abs_x;
 801ebe4:	4690      	mov	r8, r2
    if(xef == 0) px_h = 255;
 801ebe6:	27ff      	movs	r7, #255	; 0xff
 801ebe8:	e7ac      	b.n	801eb44 <lv_draw_mask_line+0x13e>
        k++;
 801ebea:	f108 0801 	add.w	r8, r8, #1
        if(k <= len) {
 801ebee:	4544      	cmp	r4, r8
 801ebf0:	f6ff af52 	blt.w	801ea98 <lv_draw_mask_line+0x92>
            lv_memset_00(&mask_buf[k], len - k);
 801ebf4:	eba4 0108 	sub.w	r1, r4, r8
 801ebf8:	eb05 0008 	add.w	r0, r5, r8
 801ebfc:	e74a      	b.n	801ea94 <lv_draw_mask_line+0x8e>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 801ebfe:	69b1      	ldr	r1, [r6, #24]
            if(p->inv) {
 801ec00:	b2c0      	uxtb	r0, r0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 801ec02:	fb0c fc01 	mul.w	ip, ip, r1
    if(p->xy_steep > 0) x_at_y++;
 801ec06:	2900      	cmp	r1, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 801ec08:	ea4f 23ac 	mov.w	r3, ip, asr #10
    if(p->xy_steep > 0) x_at_y++;
 801ec0c:	bfcc      	ite	gt
 801ec0e:	1c5a      	addgt	r2, r3, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 801ec10:	461a      	movle	r2, r3
    if(x_at_y < abs_x) {
 801ec12:	42ba      	cmp	r2, r7
 801ec14:	f6ff af5b 	blt.w	801eace <lv_draw_mask_line+0xc8>
    if(x_at_y > abs_x + len) {
 801ec18:	19e2      	adds	r2, r4, r7
 801ec1a:	4293      	cmp	r3, r2
 801ec1c:	f73f af6b 	bgt.w	801eaf6 <lv_draw_mask_line+0xf0>
    int32_t xsi = xs >> 8;
 801ec20:	f34c 2a8d 	sbfx	sl, ip, #10, #14
    int32_t xsf = xs & 0xFF;
 801ec24:	f3cc 0387 	ubfx	r3, ip, #2, #8
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 801ec28:	448c      	add	ip, r1
    k = xsi - abs_x;
 801ec2a:	ebaa 0207 	sub.w	r2, sl, r7
    int32_t xei = xe >> 8;
 801ec2e:	f34c 288d 	sbfx	r8, ip, #10, #14
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 801ec32:	ea4f 290c 	mov.w	r9, ip, lsl #8
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 801ec36:	45c2      	cmp	sl, r8
 801ec38:	d006      	beq.n	801ec48 <lv_draw_mask_line+0x242>
 801ec3a:	2900      	cmp	r1, #0
 801ec3c:	f280 8096 	bge.w	801ed6c <lv_draw_mask_line+0x366>
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	d13c      	bne.n	801ecbe <lv_draw_mask_line+0x2b8>
        k--;
 801ec44:	3a01      	subs	r2, #1
        xsf = 0xFF;
 801ec46:	23ff      	movs	r3, #255	; 0xff
        if(k >= 0 && k < len) {
 801ec48:	2a00      	cmp	r2, #0
 801ec4a:	db22      	blt.n	801ec92 <lv_draw_mask_line+0x28c>
 801ec4c:	4294      	cmp	r4, r2
 801ec4e:	dd2a      	ble.n	801eca6 <lv_draw_mask_line+0x2a0>
    int32_t xef = xe & 0xFF;
 801ec50:	f3c9 2187 	ubfx	r1, r9, #10, #8
            m = (xsf + xef) >> 1;
 801ec54:	4419      	add	r1, r3
 801ec56:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
 801ec5a:	b108      	cbz	r0, 801ec60 <lv_draw_mask_line+0x25a>
 801ec5c:	43c9      	mvns	r1, r1
 801ec5e:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 801ec60:	5ca8      	ldrb	r0, [r5, r2]
 801ec62:	f7ff fec2 	bl	801e9ea <mask_mix>
 801ec66:	54a8      	strb	r0, [r5, r2]
        if(p->inv) {
 801ec68:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 801ec6c:	079b      	lsls	r3, r3, #30
 801ec6e:	d509      	bpl.n	801ec84 <lv_draw_mask_line+0x27e>
            k = xsi - abs_x;
 801ec70:	eba8 0107 	sub.w	r1, r8, r7
            if(k >= len) {
 801ec74:	428c      	cmp	r4, r1
 801ec76:	f77f aeeb 	ble.w	801ea50 <lv_draw_mask_line+0x4a>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 801ec7a:	2900      	cmp	r1, #0
 801ec7c:	f6ff af0c 	blt.w	801ea98 <lv_draw_mask_line+0x92>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 801ec80:	4628      	mov	r0, r5
 801ec82:	e707      	b.n	801ea94 <lv_draw_mask_line+0x8e>
        k++;
 801ec84:	3201      	adds	r2, #1
 801ec86:	42a2      	cmp	r2, r4
 801ec88:	bfa8      	it	ge
 801ec8a:	4622      	movge	r2, r4
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 801ec8c:	1aa1      	subs	r1, r4, r2
 801ec8e:	18a8      	adds	r0, r5, r2
 801ec90:	e700      	b.n	801ea94 <lv_draw_mask_line+0x8e>
        if(p->inv) {
 801ec92:	2800      	cmp	r0, #0
 801ec94:	d1ec      	bne.n	801ec70 <lv_draw_mask_line+0x26a>
        k++;
 801ec96:	3201      	adds	r2, #1
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 801ec98:	42a2      	cmp	r2, r4
 801ec9a:	bfa8      	it	ge
 801ec9c:	4622      	movge	r2, r4
 801ec9e:	2a00      	cmp	r2, #0
 801eca0:	f43f aed6 	beq.w	801ea50 <lv_draw_mask_line+0x4a>
 801eca4:	e6f8      	b.n	801ea98 <lv_draw_mask_line+0x92>
        if(p->inv) {
 801eca6:	2800      	cmp	r0, #0
 801eca8:	d1e2      	bne.n	801ec70 <lv_draw_mask_line+0x26a>
        k++;
 801ecaa:	3201      	adds	r2, #1
 801ecac:	42a2      	cmp	r2, r4
 801ecae:	bfa8      	it	ge
 801ecb0:	4622      	movge	r2, r4
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 801ecb2:	2a00      	cmp	r2, #0
 801ecb4:	f43f aecc 	beq.w	801ea50 <lv_draw_mask_line+0x4a>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 801ecb8:	f77f aeee 	ble.w	801ea98 <lv_draw_mask_line+0x92>
 801ecbc:	e7e6      	b.n	801ec8c <lv_draw_mask_line+0x286>
            if(k >= 0 && k < len) {
 801ecbe:	2a00      	cmp	r2, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 801ecc0:	69f1      	ldr	r1, [r6, #28]
            if(k >= 0 && k < len) {
 801ecc2:	db48      	blt.n	801ed56 <lv_draw_mask_line+0x350>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 801ecc4:	f1c1 0800 	rsb	r8, r1, #0
            if(k >= 0 && k < len) {
 801ecc8:	4294      	cmp	r4, r2
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 801ecca:	fb03 f808 	mul.w	r8, r3, r8
 801ecce:	ea4f 28a8 	mov.w	r8, r8, asr #10
            if(k >= 0 && k < len) {
 801ecd2:	dd0a      	ble.n	801ecea <lv_draw_mask_line+0x2e4>
                m = (y_inters * xsf) >> 9;
 801ecd4:	fb08 f103 	mul.w	r1, r8, r3
 801ecd8:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 801ecdc:	b108      	cbz	r0, 801ece2 <lv_draw_mask_line+0x2dc>
 801ecde:	43c9      	mvns	r1, r1
 801ece0:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801ece2:	5ca8      	ldrb	r0, [r5, r2]
 801ece4:	f7ff fe81 	bl	801e9ea <mask_mix>
 801ece8:	54a8      	strb	r0, [r5, r2]
                if(p->inv) m = 255 - m;
 801ecea:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
            k--;
 801ecee:	1e57      	subs	r7, r2, #1
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 801ecf0:	69b1      	ldr	r1, [r6, #24]
                if(p->inv) m = 255 - m;
 801ecf2:	f003 0302 	and.w	r3, r3, #2
            if(k >= 0 && k < len) {
 801ecf6:	b332      	cbz	r2, 801ed46 <lv_draw_mask_line+0x340>
 801ecf8:	42bc      	cmp	r4, r7
 801ecfa:	dd20      	ble.n	801ed3e <lv_draw_mask_line+0x338>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 801ecfc:	f1c8 08ff 	rsb	r8, r8, #255	; 0xff
 801ed00:	4249      	negs	r1, r1
 801ed02:	fb08 f101 	mul.w	r1, r8, r1
 801ed06:	1289      	asrs	r1, r1, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 801ed08:	fb08 f101 	mul.w	r1, r8, r1
 801ed0c:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 801ed10:	b90b      	cbnz	r3, 801ed16 <lv_draw_mask_line+0x310>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 801ed12:	43c9      	mvns	r1, r1
 801ed14:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801ed16:	5de8      	ldrb	r0, [r5, r7]
 801ed18:	f7ff fe67 	bl	801e9ea <mask_mix>
 801ed1c:	55e8      	strb	r0, [r5, r7]
            if(p->inv) {
 801ed1e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 801ed22:	079e      	lsls	r6, r3, #30
 801ed24:	d507      	bpl.n	801ed36 <lv_draw_mask_line+0x330>
                if(k > len) k = len;
 801ed26:	42bc      	cmp	r4, r7
 801ed28:	f6ff aeb6 	blt.w	801ea98 <lv_draw_mask_line+0x92>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 801ed2c:	2f00      	cmp	r7, #0
 801ed2e:	f43f aeb3 	beq.w	801ea98 <lv_draw_mask_line+0x92>
 801ed32:	4639      	mov	r1, r7
 801ed34:	e7a4      	b.n	801ec80 <lv_draw_mask_line+0x27a>
            k += 2;
 801ed36:	3201      	adds	r2, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 801ed38:	4294      	cmp	r4, r2
 801ed3a:	daa7      	bge.n	801ec8c <lv_draw_mask_line+0x286>
 801ed3c:	e691      	b.n	801ea62 <lv_draw_mask_line+0x5c>
            if(p->inv) {
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	f43f ae8f 	beq.w	801ea62 <lv_draw_mask_line+0x5c>
 801ed44:	e7ef      	b.n	801ed26 <lv_draw_mask_line+0x320>
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	f47f aea6 	bne.w	801ea98 <lv_draw_mask_line+0x92>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 801ed4c:	2c00      	cmp	r4, #0
 801ed4e:	f77f ae88 	ble.w	801ea62 <lv_draw_mask_line+0x5c>
            k += 2;
 801ed52:	2201      	movs	r2, #1
 801ed54:	e79a      	b.n	801ec8c <lv_draw_mask_line+0x286>
            if(p->inv) {
 801ed56:	2800      	cmp	r0, #0
 801ed58:	f47f ae9e 	bne.w	801ea98 <lv_draw_mask_line+0x92>
            k += 2;
 801ed5c:	3201      	adds	r2, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 801ed5e:	4294      	cmp	r4, r2
 801ed60:	f6ff ae7f 	blt.w	801ea62 <lv_draw_mask_line+0x5c>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 801ed64:	2a00      	cmp	r2, #0
 801ed66:	f47f ae97 	bne.w	801ea98 <lv_draw_mask_line+0x92>
 801ed6a:	e78f      	b.n	801ec8c <lv_draw_mask_line+0x286>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 801ed6c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801ed70:	69f7      	ldr	r7, [r6, #28]
            if(k >= 0 && k < len) {
 801ed72:	2a00      	cmp	r2, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 801ed74:	fb03 f707 	mul.w	r7, r3, r7
 801ed78:	ea4f 2ca7 	mov.w	ip, r7, asr #10
            k += 2;
 801ed7c:	f102 0701 	add.w	r7, r2, #1
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 801ed80:	f1cc 08ff 	rsb	r8, ip, #255	; 0xff
            if(k >= 0 && k < len) {
 801ed84:	db2c      	blt.n	801ede0 <lv_draw_mask_line+0x3da>
 801ed86:	4294      	cmp	r4, r2
 801ed88:	dd0b      	ble.n	801eda2 <lv_draw_mask_line+0x39c>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 801ed8a:	fb0c f303 	mul.w	r3, ip, r3
 801ed8e:	f3c3 2147 	ubfx	r1, r3, #9, #8
                if(p->inv) m = 255 - m;
 801ed92:	b908      	cbnz	r0, 801ed98 <lv_draw_mask_line+0x392>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 801ed94:	43c9      	mvns	r1, r1
 801ed96:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801ed98:	5ca8      	ldrb	r0, [r5, r2]
 801ed9a:	f7ff fe26 	bl	801e9ea <mask_mix>
 801ed9e:	54a8      	strb	r0, [r5, r2]
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 801eda0:	69b1      	ldr	r1, [r6, #24]
 801eda2:	fb08 f101 	mul.w	r1, r8, r1
 801eda6:	1289      	asrs	r1, r1, #10
                if(p->inv) m = 255 - m;
 801eda8:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
            if(k >= 0 && k < len) {
 801edac:	42bc      	cmp	r4, r7
 801edae:	f003 0302 	and.w	r3, r3, #2
 801edb2:	dd23      	ble.n	801edfc <lv_draw_mask_line+0x3f6>
                m = ((255 - y_inters) * x_inters) >> 9;
 801edb4:	fb08 f101 	mul.w	r1, r8, r1
 801edb8:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 801edbc:	b10b      	cbz	r3, 801edc2 <lv_draw_mask_line+0x3bc>
 801edbe:	43c9      	mvns	r1, r1
 801edc0:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801edc2:	5de8      	ldrb	r0, [r5, r7]
 801edc4:	f7ff fe11 	bl	801e9ea <mask_mix>
 801edc8:	55e8      	strb	r0, [r5, r7]
            if(p->inv) {
 801edca:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 801edce:	079b      	lsls	r3, r3, #30
 801edd0:	f53f aedd 	bmi.w	801eb8e <lv_draw_mask_line+0x188>
            k++;
 801edd4:	3202      	adds	r2, #2
 801edd6:	42a2      	cmp	r2, r4
 801edd8:	bfa8      	it	ge
 801edda:	4622      	movge	r2, r4
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 801eddc:	2a00      	cmp	r2, #0
 801edde:	e76b      	b.n	801ecb8 <lv_draw_mask_line+0x2b2>
            if(k >= 0 && k < len) {
 801ede0:	1c50      	adds	r0, r2, #1
 801ede2:	d104      	bne.n	801edee <lv_draw_mask_line+0x3e8>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 801ede4:	fb08 f101 	mul.w	r1, r8, r1
 801ede8:	2700      	movs	r7, #0
 801edea:	1289      	asrs	r1, r1, #10
 801edec:	e7dc      	b.n	801eda8 <lv_draw_mask_line+0x3a2>
            if(p->inv) {
 801edee:	f01e 0f02 	tst.w	lr, #2
 801edf2:	d006      	beq.n	801ee02 <lv_draw_mask_line+0x3fc>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 801edf4:	4294      	cmp	r4, r2
 801edf6:	f6bf ae4f 	bge.w	801ea98 <lv_draw_mask_line+0x92>
 801edfa:	e629      	b.n	801ea50 <lv_draw_mask_line+0x4a>
            if(p->inv) {
 801edfc:	2b00      	cmp	r3, #0
 801edfe:	f47f aec6 	bne.w	801eb8e <lv_draw_mask_line+0x188>
            k++;
 801ee02:	3202      	adds	r2, #2
 801ee04:	42a2      	cmp	r2, r4
 801ee06:	bfa8      	it	ge
 801ee08:	4622      	movge	r2, r4
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 801ee0a:	2a00      	cmp	r2, #0
 801ee0c:	f43f ae20 	beq.w	801ea50 <lv_draw_mask_line+0x4a>
 801ee10:	e7e4      	b.n	801eddc <lv_draw_mask_line+0x3d6>

0801ee12 <lv_draw_mask_angle>:
{
 801ee12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee16:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ee18:	4680      	mov	r8, r0
 801ee1a:	468b      	mov	fp, r1
 801ee1c:	4617      	mov	r7, r2
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 801ee1e:	f9b6 500c 	ldrsh.w	r5, [r6, #12]
{
 801ee22:	4699      	mov	r9, r3
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 801ee24:	f9b6 e00a 	ldrsh.w	lr, [r6, #10]
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 801ee28:	f9b6 c008 	ldrsh.w	ip, [r6, #8]
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 801ee2c:	2db3      	cmp	r5, #179	; 0xb3
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 801ee2e:	eba2 0a0e 	sub.w	sl, r2, lr
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 801ee32:	f9b6 400e 	ldrsh.w	r4, [r6, #14]
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 801ee36:	eba1 0c0c 	sub.w	ip, r1, ip
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 801ee3a:	f300 8094 	bgt.w	801ef66 <lv_draw_mask_angle+0x154>
 801ee3e:	2cb3      	cmp	r4, #179	; 0xb3
 801ee40:	f300 80f1 	bgt.w	801f026 <lv_draw_mask_angle+0x214>
 801ee44:	b93d      	cbnz	r5, 801ee56 <lv_draw_mask_angle+0x44>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 801ee46:	4596      	cmp	lr, r2
 801ee48:	f300 8162 	bgt.w	801f110 <lv_draw_mask_angle+0x2fe>
        else if(p->cfg.end_angle == 0) {
 801ee4c:	2c00      	cmp	r4, #0
 801ee4e:	f000 8085 	beq.w	801ef5c <lv_draw_mask_angle+0x14a>
 801ee52:	2401      	movs	r4, #1
 801ee54:	e14a      	b.n	801f0ec <lv_draw_mask_angle+0x2da>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 801ee56:	2c00      	cmp	r4, #0
 801ee58:	f000 8117 	beq.w	801f08a <lv_draw_mask_angle+0x278>
 801ee5c:	42a5      	cmp	r5, r4
 801ee5e:	dc1b      	bgt.n	801ee98 <lv_draw_mask_angle+0x86>
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801ee60:	4596      	cmp	lr, r2
 801ee62:	f300 808a 	bgt.w	801ef7a <lv_draw_mask_angle+0x168>
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 801ee66:	f106 0310 	add.w	r3, r6, #16
 801ee6a:	463a      	mov	r2, r7
 801ee6c:	4659      	mov	r1, fp
 801ee6e:	4640      	mov	r0, r8
 801ee70:	9300      	str	r3, [sp, #0]
 801ee72:	464b      	mov	r3, r9
 801ee74:	f7ff fdc7 	bl	801ea06 <lv_draw_mask_line>
        if(p->cfg.end_angle == 180) {
 801ee78:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 801ee7c:	4604      	mov	r4, r0
        if(p->cfg.end_angle == 180) {
 801ee7e:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
 801ee82:	2ab4      	cmp	r2, #180	; 0xb4
 801ee84:	f040 8111 	bne.w	801f0aa <lv_draw_mask_angle+0x298>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 801ee88:	42bb      	cmp	r3, r7
 801ee8a:	f340 8112 	ble.w	801f0b2 <lv_draw_mask_angle+0x2a0>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801ee8e:	2c00      	cmp	r4, #0
 801ee90:	f040 8105 	bne.w	801f09e <lv_draw_mask_angle+0x28c>
 801ee94:	2400      	movs	r4, #0
 801ee96:	e002      	b.n	801ee9e <lv_draw_mask_angle+0x8c>
        if(abs_y < p->cfg.vertex_p.y) {
 801ee98:	4596      	cmp	lr, r2
 801ee9a:	dd04      	ble.n	801eea6 <lv_draw_mask_angle+0x94>
            return LV_DRAW_MASK_RES_FULL_COVER;
 801ee9c:	2401      	movs	r4, #1
}
 801ee9e:	4620      	mov	r0, r4
 801eea0:	b003      	add	sp, #12
 801eea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801eea6:	b2ad      	uxth	r5, r5
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801eea8:	6d73      	ldr	r3, [r6, #84]	; 0x54
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 801eeaa:	6ab2      	ldr	r2, [r6, #40]	; 0x28
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801eeac:	b2a4      	uxth	r4, r4
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801eeae:	1e68      	subs	r0, r5, #1
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801eeb0:	fb03 f30a 	mul.w	r3, r3, sl
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 801eeb4:	fb0a 2202 	mla	r2, sl, r2, r2
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801eeb8:	1e61      	subs	r1, r4, #1
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801eeba:	2859      	cmp	r0, #89	; 0x59
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801eebc:	ea4f 23a3 	mov.w	r3, r3, asr #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 801eec0:	ea4f 22a2 	mov.w	r2, r2, asr #10
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801eec4:	b289      	uxth	r1, r1
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801eec6:	d80b      	bhi.n	801eee0 <lv_draw_mask_angle+0xce>
 801eec8:	2a00      	cmp	r2, #0
 801eeca:	da0e      	bge.n	801eeea <lv_draw_mask_angle+0xd8>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801eecc:	2959      	cmp	r1, #89	; 0x59
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 801eece:	f04f 0200 	mov.w	r2, #0
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801eed2:	d90e      	bls.n	801eef2 <lv_draw_mask_angle+0xe0>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 801eed4:	3c5b      	subs	r4, #91	; 0x5b
 801eed6:	2cb2      	cmp	r4, #178	; 0xb2
 801eed8:	bf98      	it	ls
 801eeda:	ea02 72e2 	andls.w	r2, r2, r2, asr #31
 801eede:	e008      	b.n	801eef2 <lv_draw_mask_angle+0xe0>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 801eee0:	3d5b      	subs	r5, #91	; 0x5b
 801eee2:	2db2      	cmp	r5, #178	; 0xb2
 801eee4:	bf98      	it	ls
 801eee6:	ea02 72e2 	andls.w	r2, r2, r2, asr #31
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801eeea:	2959      	cmp	r1, #89	; 0x59
 801eeec:	d8f2      	bhi.n	801eed4 <lv_draw_mask_angle+0xc2>
 801eeee:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 801eef2:	1a9b      	subs	r3, r3, r2
        int32_t tmp = start_angle_last + dist - rel_x;
 801eef4:	eb02 0563 	add.w	r5, r2, r3, asr #1
 801eef8:	eba5 050c 	sub.w	r5, r5, ip
 801eefc:	454d      	cmp	r5, r9
 801eefe:	bfa8      	it	ge
 801ef00:	464d      	movge	r5, r9
        if(tmp > 0) {
 801ef02:	2d00      	cmp	r5, #0
 801ef04:	dd2c      	ble.n	801ef60 <lv_draw_mask_angle+0x14e>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 801ef06:	f106 0310 	add.w	r3, r6, #16
 801ef0a:	463a      	mov	r2, r7
 801ef0c:	4659      	mov	r1, fp
 801ef0e:	4640      	mov	r0, r8
 801ef10:	9300      	str	r3, [sp, #0]
 801ef12:	b22b      	sxth	r3, r5
 801ef14:	f7ff fd77 	bl	801ea06 <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 801ef18:	4682      	mov	sl, r0
 801ef1a:	b918      	cbnz	r0, 801ef24 <lv_draw_mask_angle+0x112>
                lv_memset_00(&mask_buf[0], tmp);
 801ef1c:	4629      	mov	r1, r5
 801ef1e:	4640      	mov	r0, r8
 801ef20:	f7ff fd5f 	bl	801e9e2 <lv_memset_00>
        if(tmp < 0) tmp = 0;
 801ef24:	454d      	cmp	r5, r9
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 801ef26:	f106 063c 	add.w	r6, r6, #60	; 0x3c
        if(tmp < 0) tmp = 0;
 801ef2a:	bfa8      	it	ge
 801ef2c:	464d      	movge	r5, r9
 801ef2e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 801ef32:	b2a9      	uxth	r1, r5
 801ef34:	44a8      	add	r8, r5
 801ef36:	eba9 0301 	sub.w	r3, r9, r1
 801ef3a:	4459      	add	r1, fp
 801ef3c:	b21b      	sxth	r3, r3
 801ef3e:	463a      	mov	r2, r7
 801ef40:	b209      	sxth	r1, r1
 801ef42:	4640      	mov	r0, r8
 801ef44:	9600      	str	r6, [sp, #0]
 801ef46:	f7ff fd5e 	bl	801ea06 <lv_draw_mask_line>
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 801ef4a:	4604      	mov	r4, r0
 801ef4c:	b920      	cbnz	r0, 801ef58 <lv_draw_mask_angle+0x146>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 801ef4e:	eba9 0105 	sub.w	r1, r9, r5
 801ef52:	4640      	mov	r0, r8
 801ef54:	f7ff fd45 	bl	801e9e2 <lv_memset_00>
        if(res1 == res2) return res1;
 801ef58:	45a2      	cmp	sl, r4
 801ef5a:	d0a0      	beq.n	801ee9e <lv_draw_mask_angle+0x8c>
        else return LV_DRAW_MASK_RES_CHANGED;
 801ef5c:	2402      	movs	r4, #2
 801ef5e:	e79e      	b.n	801ee9e <lv_draw_mask_angle+0x8c>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801ef60:	f04f 0a01 	mov.w	sl, #1
 801ef64:	e7de      	b.n	801ef24 <lv_draw_mask_angle+0x112>
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 801ef66:	2db4      	cmp	r5, #180	; 0xb4
 801ef68:	d06f      	beq.n	801f04a <lv_draw_mask_angle+0x238>
 801ef6a:	2cb4      	cmp	r4, #180	; 0xb4
 801ef6c:	f340 8090 	ble.w	801f090 <lv_draw_mask_angle+0x27e>
 801ef70:	42a5      	cmp	r5, r4
 801ef72:	dc04      	bgt.n	801ef7e <lv_draw_mask_angle+0x16c>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 801ef74:	4596      	cmp	lr, r2
 801ef76:	f73f af76 	bgt.w	801ee66 <lv_draw_mask_angle+0x54>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 801ef7a:	2403      	movs	r4, #3
 801ef7c:	e07c      	b.n	801f078 <lv_draw_mask_angle+0x266>
        if(abs_y > p->cfg.vertex_p.y) {
 801ef7e:	4596      	cmp	lr, r2
 801ef80:	db8c      	blt.n	801ee9c <lv_draw_mask_angle+0x8a>
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef82:	b2ad      	uxth	r5, r5
 801ef84:	f46f 7087 	mvn.w	r0, #270	; 0x10e
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801ef88:	6d72      	ldr	r2, [r6, #84]	; 0x54
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef8a:	b2a4      	uxth	r4, r4
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 801ef8c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef8e:	f46f 7187 	mvn.w	r1, #270	; 0x10e
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef92:	1828      	adds	r0, r5, r0
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801ef94:	fb02 f20a 	mul.w	r2, r2, sl
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 801ef98:	fb0a 3303 	mla	r3, sl, r3, r3
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef9c:	1861      	adds	r1, r4, r1
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef9e:	2858      	cmp	r0, #88	; 0x58
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801efa0:	ea4f 22a2 	mov.w	r2, r2, asr #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 801efa4:	ea4f 23a3 	mov.w	r3, r3, asr #10
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801efa8:	b289      	uxth	r1, r1
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801efaa:	d80a      	bhi.n	801efc2 <lv_draw_mask_angle+0x1b0>
 801efac:	2b00      	cmp	r3, #0
 801efae:	bfb8      	it	lt
 801efb0:	2300      	movlt	r3, #0
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801efb2:	2958      	cmp	r1, #88	; 0x58
 801efb4:	d90e      	bls.n	801efd4 <lv_draw_mask_angle+0x1c2>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 801efb6:	3c5b      	subs	r4, #91	; 0x5b
 801efb8:	2cb2      	cmp	r4, #178	; 0xb2
 801efba:	bf98      	it	ls
 801efbc:	ea03 73e3 	andls.w	r3, r3, r3, asr #31
 801efc0:	e008      	b.n	801efd4 <lv_draw_mask_angle+0x1c2>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 801efc2:	3d5b      	subs	r5, #91	; 0x5b
 801efc4:	2db2      	cmp	r5, #178	; 0xb2
 801efc6:	bf98      	it	ls
 801efc8:	ea03 73e3 	andls.w	r3, r3, r3, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801efcc:	2958      	cmp	r1, #88	; 0x58
 801efce:	d8f2      	bhi.n	801efb6 <lv_draw_mask_angle+0x1a4>
 801efd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 801efd4:	1ad2      	subs	r2, r2, r3
        int32_t tmp = start_angle_last + dist - rel_x;
 801efd6:	eb03 0562 	add.w	r5, r3, r2, asr #1
 801efda:	eba5 050c 	sub.w	r5, r5, ip
 801efde:	454d      	cmp	r5, r9
 801efe0:	bfa8      	it	ge
 801efe2:	464d      	movge	r5, r9
        if(tmp > 0) {
 801efe4:	2d00      	cmp	r5, #0
 801efe6:	dd1b      	ble.n	801f020 <lv_draw_mask_angle+0x20e>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 801efe8:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 801efec:	463a      	mov	r2, r7
 801efee:	4659      	mov	r1, fp
 801eff0:	4640      	mov	r0, r8
 801eff2:	9300      	str	r3, [sp, #0]
 801eff4:	b22b      	sxth	r3, r5
 801eff6:	f7ff fd06 	bl	801ea06 <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 801effa:	4682      	mov	sl, r0
 801effc:	b918      	cbnz	r0, 801f006 <lv_draw_mask_angle+0x1f4>
                lv_memset_00(&mask_buf[0], tmp);
 801effe:	4629      	mov	r1, r5
 801f000:	4640      	mov	r0, r8
 801f002:	f7ff fcee 	bl	801e9e2 <lv_memset_00>
        if(tmp < 0) tmp = 0;
 801f006:	454d      	cmp	r5, r9
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 801f008:	f106 0610 	add.w	r6, r6, #16
        if(tmp < 0) tmp = 0;
 801f00c:	bfa8      	it	ge
 801f00e:	464d      	movge	r5, r9
 801f010:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 801f014:	b2a9      	uxth	r1, r5
 801f016:	44a8      	add	r8, r5
 801f018:	eba9 0301 	sub.w	r3, r9, r1
 801f01c:	4459      	add	r1, fp
 801f01e:	e78d      	b.n	801ef3c <lv_draw_mask_angle+0x12a>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801f020:	f04f 0a01 	mov.w	sl, #1
 801f024:	e7ef      	b.n	801f006 <lv_draw_mask_angle+0x1f4>
        else if(p->cfg.start_angle == 0) {
 801f026:	bb65      	cbnz	r5, 801f082 <lv_draw_mask_angle+0x270>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 801f028:	4596      	cmp	lr, r2
 801f02a:	dd21      	ble.n	801f070 <lv_draw_mask_angle+0x25e>
        if(p->cfg.end_angle == 180) {
 801f02c:	2cb4      	cmp	r4, #180	; 0xb4
 801f02e:	d039      	beq.n	801f0a4 <lv_draw_mask_angle+0x292>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 801f030:	2403      	movs	r4, #3
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 801f032:	363c      	adds	r6, #60	; 0x3c
 801f034:	464b      	mov	r3, r9
 801f036:	463a      	mov	r2, r7
 801f038:	4659      	mov	r1, fp
 801f03a:	4640      	mov	r0, r8
 801f03c:	9600      	str	r6, [sp, #0]
 801f03e:	f7ff fce2 	bl	801ea06 <lv_draw_mask_line>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801f042:	2c00      	cmp	r4, #0
 801f044:	f43f af26 	beq.w	801ee94 <lv_draw_mask_angle+0x82>
 801f048:	e058      	b.n	801f0fc <lv_draw_mask_angle+0x2ea>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801f04a:	4596      	cmp	lr, r2
 801f04c:	dd0c      	ble.n	801f068 <lv_draw_mask_angle+0x256>
        if(p->cfg.end_angle == 180) {
 801f04e:	2cb4      	cmp	r4, #180	; 0xb4
 801f050:	d084      	beq.n	801ef5c <lv_draw_mask_angle+0x14a>
        else if(p->cfg.end_angle == 0) {
 801f052:	2c00      	cmp	r4, #0
 801f054:	f43f af22 	beq.w	801ee9c <lv_draw_mask_angle+0x8a>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801f058:	2cb3      	cmp	r4, #179	; 0xb3
 801f05a:	dd0c      	ble.n	801f076 <lv_draw_mask_angle+0x264>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 801f05c:	363c      	adds	r6, #60	; 0x3c
 801f05e:	2401      	movs	r4, #1
 801f060:	9600      	str	r6, [sp, #0]
 801f062:	f7ff fcd0 	bl	801ea06 <lv_draw_mask_line>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801f066:	e049      	b.n	801f0fc <lv_draw_mask_angle+0x2ea>
        if(p->cfg.end_angle == 180) {
 801f068:	2cb4      	cmp	r4, #180	; 0xb4
 801f06a:	d136      	bne.n	801f0da <lv_draw_mask_angle+0x2c8>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 801f06c:	2001      	movs	r0, #1
 801f06e:	e01a      	b.n	801f0a6 <lv_draw_mask_angle+0x294>
        if(p->cfg.end_angle == 180) {
 801f070:	2cb4      	cmp	r4, #180	; 0xb4
 801f072:	f43f af13 	beq.w	801ee9c <lv_draw_mask_angle+0x8a>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801f076:	2401      	movs	r4, #1
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 801f078:	1ee0      	subs	r0, r4, #3
 801f07a:	bf18      	it	ne
 801f07c:	2001      	movne	r0, #1
 801f07e:	0044      	lsls	r4, r0, #1
 801f080:	e70d      	b.n	801ee9e <lv_draw_mask_angle+0x8c>
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801f082:	4596      	cmp	lr, r2
 801f084:	f77f aeef 	ble.w	801ee66 <lv_draw_mask_angle+0x54>
 801f088:	e7d0      	b.n	801f02c <lv_draw_mask_angle+0x21a>
 801f08a:	4596      	cmp	lr, r2
 801f08c:	dcee      	bgt.n	801f06c <lv_draw_mask_angle+0x25a>
 801f08e:	e6ea      	b.n	801ee66 <lv_draw_mask_angle+0x54>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 801f090:	4596      	cmp	lr, r2
 801f092:	f73f aee8 	bgt.w	801ee66 <lv_draw_mask_angle+0x54>
        if(p->cfg.end_angle == 180) {
 801f096:	2cb4      	cmp	r4, #180	; 0xb4
 801f098:	d0e8      	beq.n	801f06c <lv_draw_mask_angle+0x25a>
        else if(p->cfg.end_angle == 0) {
 801f09a:	bb1c      	cbnz	r4, 801f0e4 <lv_draw_mask_angle+0x2d2>
 801f09c:	e002      	b.n	801f0a4 <lv_draw_mask_angle+0x292>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 801f09e:	2c03      	cmp	r4, #3
 801f0a0:	f47f af5c 	bne.w	801ef5c <lv_draw_mask_angle+0x14a>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 801f0a4:	2003      	movs	r0, #3
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 801f0a6:	3803      	subs	r0, #3
 801f0a8:	e7e7      	b.n	801f07a <lv_draw_mask_angle+0x268>
        else if(p->cfg.end_angle == 0) {
 801f0aa:	b95a      	cbnz	r2, 801f0c4 <lv_draw_mask_angle+0x2b2>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 801f0ac:	429f      	cmp	r7, r3
 801f0ae:	f6bf aeee 	bge.w	801ee8e <lv_draw_mask_angle+0x7c>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801f0b2:	2c00      	cmp	r4, #0
 801f0b4:	f43f aeee 	beq.w	801ee94 <lv_draw_mask_angle+0x82>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 801f0b8:	2c03      	cmp	r4, #3
 801f0ba:	d0d7      	beq.n	801f06c <lv_draw_mask_angle+0x25a>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 801f0bc:	2c01      	cmp	r4, #1
 801f0be:	f43f aeed 	beq.w	801ee9c <lv_draw_mask_angle+0x8a>
 801f0c2:	e74b      	b.n	801ef5c <lv_draw_mask_angle+0x14a>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801f0c4:	2ab3      	cmp	r2, #179	; 0xb3
 801f0c6:	dc05      	bgt.n	801f0d4 <lv_draw_mask_angle+0x2c2>
 801f0c8:	429f      	cmp	r7, r3
 801f0ca:	dab2      	bge.n	801f032 <lv_draw_mask_angle+0x220>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801f0cc:	2c00      	cmp	r4, #0
 801f0ce:	f43f aee1 	beq.w	801ee94 <lv_draw_mask_angle+0x82>
 801f0d2:	e7d1      	b.n	801f078 <lv_draw_mask_angle+0x266>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 801f0d4:	429f      	cmp	r7, r3
 801f0d6:	dbac      	blt.n	801f032 <lv_draw_mask_angle+0x220>
 801f0d8:	e7f8      	b.n	801f0cc <lv_draw_mask_angle+0x2ba>
        else if(p->cfg.end_angle == 0) {
 801f0da:	2c00      	cmp	r4, #0
 801f0dc:	d0e2      	beq.n	801f0a4 <lv_draw_mask_angle+0x292>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801f0de:	2cb3      	cmp	r4, #179	; 0xb3
 801f0e0:	f73f af4b 	bgt.w	801ef7a <lv_draw_mask_angle+0x168>
 801f0e4:	45be      	cmp	lr, r7
 801f0e6:	f04f 0403 	mov.w	r4, #3
 801f0ea:	dcc5      	bgt.n	801f078 <lv_draw_mask_angle+0x266>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 801f0ec:	363c      	adds	r6, #60	; 0x3c
 801f0ee:	464b      	mov	r3, r9
 801f0f0:	463a      	mov	r2, r7
 801f0f2:	4659      	mov	r1, fp
 801f0f4:	4640      	mov	r0, r8
 801f0f6:	9600      	str	r6, [sp, #0]
 801f0f8:	f7ff fc85 	bl	801ea06 <lv_draw_mask_line>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801f0fc:	2800      	cmp	r0, #0
 801f0fe:	f43f aec9 	beq.w	801ee94 <lv_draw_mask_angle+0x82>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 801f102:	2c03      	cmp	r4, #3
 801f104:	d0cf      	beq.n	801f0a6 <lv_draw_mask_angle+0x294>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 801f106:	2c01      	cmp	r4, #1
 801f108:	f47f af28 	bne.w	801ef5c <lv_draw_mask_angle+0x14a>
 801f10c:	2801      	cmp	r0, #1
 801f10e:	e7d6      	b.n	801f0be <lv_draw_mask_angle+0x2ac>
        else if(p->cfg.end_angle == 0) {
 801f110:	2c00      	cmp	r4, #0
 801f112:	d0ab      	beq.n	801f06c <lv_draw_mask_angle+0x25a>
 801f114:	e731      	b.n	801ef7a <lv_draw_mask_angle+0x168>

0801f116 <lv_draw_mask_radius>:
{
 801f116:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f11a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f11c:	4605      	mov	r5, r0
 801f11e:	461e      	mov	r6, r3
 801f120:	4689      	mov	r9, r1
    bool outer = p->cfg.outer;
 801f122:	7cb8      	ldrb	r0, [r7, #18]
    int32_t radius = p->cfg.radius;
 801f124:	f9b7 8010 	ldrsh.w	r8, [r7, #16]
    if(outer == false) {
 801f128:	f010 0001 	ands.w	r0, r0, #1
    dest->x1 = src->x1;
 801f12c:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
    dest->y1 = src->y1;
 801f130:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    dest->x2 = src->x2;
 801f134:	f9b7 400c 	ldrsh.w	r4, [r7, #12]
    dest->y2 = src->y2;
 801f138:	f9b7 e00e 	ldrsh.w	lr, [r7, #14]
 801f13c:	d12e      	bne.n	801f19c <lv_draw_mask_radius+0x86>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 801f13e:	429a      	cmp	r2, r3
 801f140:	da03      	bge.n	801f14a <lv_draw_mask_radius+0x34>
            return LV_DRAW_MASK_RES_TRANSP;
 801f142:	2000      	movs	r0, #0
}
 801f144:	b003      	add	sp, #12
 801f146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 801f14a:	4572      	cmp	r2, lr
 801f14c:	dcf9      	bgt.n	801f142 <lv_draw_mask_radius+0x2c>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 801f14e:	eb0c 0108 	add.w	r1, ip, r8
 801f152:	4589      	cmp	r9, r1
 801f154:	db05      	blt.n	801f162 <lv_draw_mask_radius+0x4c>
 801f156:	eba4 0108 	sub.w	r1, r4, r8
 801f15a:	eb06 0a09 	add.w	sl, r6, r9
 801f15e:	4551      	cmp	r1, sl
 801f160:	da08      	bge.n	801f174 <lv_draw_mask_radius+0x5e>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 801f162:	eb03 0108 	add.w	r1, r3, r8
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 801f166:	428a      	cmp	r2, r1
 801f168:	db4a      	blt.n	801f200 <lv_draw_mask_radius+0xea>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 801f16a:	ebae 0108 	sub.w	r1, lr, r8
 801f16e:	428a      	cmp	r2, r1
 801f170:	dc46      	bgt.n	801f200 <lv_draw_mask_radius+0xea>
        if(outer == false) {
 801f172:	bb18      	cbnz	r0, 801f1bc <lv_draw_mask_radius+0xa6>
            int32_t last = rect.x1 - abs_x;
 801f174:	ebac 0809 	sub.w	r8, ip, r9
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 801f178:	4546      	cmp	r6, r8
 801f17a:	dbe2      	blt.n	801f142 <lv_draw_mask_radius+0x2c>
            int32_t first = rect.x2 - abs_x + 1;
 801f17c:	eba4 0409 	sub.w	r4, r4, r9
            if(last >= 0) {
 801f180:	f1b8 0f00 	cmp.w	r8, #0
            int32_t first = rect.x2 - abs_x + 1;
 801f184:	f104 0701 	add.w	r7, r4, #1
            if(last >= 0) {
 801f188:	da28      	bge.n	801f1dc <lv_draw_mask_radius+0xc6>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 801f18a:	2c00      	cmp	r4, #0
 801f18c:	dbd9      	blt.n	801f142 <lv_draw_mask_radius+0x2c>
            else if(first < len) {
 801f18e:	42be      	cmp	r6, r7
 801f190:	dd31      	ble.n	801f1f6 <lv_draw_mask_radius+0xe0>
                lv_memset_00(&mask_buf[first], len - first);
 801f192:	1bf1      	subs	r1, r6, r7
 801f194:	19e8      	adds	r0, r5, r7
        lv_memset_00(&mask_buf[0], cir_x_left);
 801f196:	f7ff fc24 	bl	801e9e2 <lv_memset_00>
 801f19a:	e02c      	b.n	801f1f6 <lv_draw_mask_radius+0xe0>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 801f19c:	429a      	cmp	r2, r3
 801f19e:	da01      	bge.n	801f1a4 <lv_draw_mask_radius+0x8e>
            return LV_DRAW_MASK_RES_FULL_COVER;
 801f1a0:	2001      	movs	r0, #1
 801f1a2:	e7cf      	b.n	801f144 <lv_draw_mask_radius+0x2e>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 801f1a4:	4572      	cmp	r2, lr
 801f1a6:	dcfb      	bgt.n	801f1a0 <lv_draw_mask_radius+0x8a>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 801f1a8:	eb08 010c 	add.w	r1, r8, ip
 801f1ac:	4549      	cmp	r1, r9
 801f1ae:	dcd8      	bgt.n	801f162 <lv_draw_mask_radius+0x4c>
 801f1b0:	eb06 0109 	add.w	r1, r6, r9
 801f1b4:	eba4 0a08 	sub.w	sl, r4, r8
 801f1b8:	4551      	cmp	r1, sl
 801f1ba:	dcd2      	bgt.n	801f162 <lv_draw_mask_radius+0x4c>
            int32_t first = rect.x1 - abs_x;
 801f1bc:	ebac 0009 	sub.w	r0, ip, r9
            if(first < 0) first = 0;
 801f1c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
            if(first <= len) {
 801f1c4:	4286      	cmp	r6, r0
 801f1c6:	db16      	blt.n	801f1f6 <lv_draw_mask_radius+0xe0>
                int32_t last = rect.x2 - abs_x - first + 1;
 801f1c8:	eba4 0109 	sub.w	r1, r4, r9
 801f1cc:	1a09      	subs	r1, r1, r0
 801f1ce:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 801f1d0:	1843      	adds	r3, r0, r1
 801f1d2:	429e      	cmp	r6, r3
 801f1d4:	da11      	bge.n	801f1fa <lv_draw_mask_radius+0xe4>
 801f1d6:	1a31      	subs	r1, r6, r0
                    lv_memset_00(&mask_buf[first], last);
 801f1d8:	4428      	add	r0, r5
 801f1da:	e7dc      	b.n	801f196 <lv_draw_mask_radius+0x80>
                lv_memset_00(&mask_buf[0], last);
 801f1dc:	4641      	mov	r1, r8
 801f1de:	4628      	mov	r0, r5
 801f1e0:	f7ff fbff 	bl	801e9e2 <lv_memset_00>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 801f1e4:	2f00      	cmp	r7, #0
 801f1e6:	ddac      	ble.n	801f142 <lv_draw_mask_radius+0x2c>
            else if(first < len) {
 801f1e8:	42be      	cmp	r6, r7
 801f1ea:	dcd2      	bgt.n	801f192 <lv_draw_mask_radius+0x7c>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 801f1ec:	f1b8 0f00 	cmp.w	r8, #0
 801f1f0:	d101      	bne.n	801f1f6 <lv_draw_mask_radius+0xe0>
 801f1f2:	42be      	cmp	r6, r7
 801f1f4:	d0d4      	beq.n	801f1a0 <lv_draw_mask_radius+0x8a>
            else return LV_DRAW_MASK_RES_CHANGED;
 801f1f6:	2002      	movs	r0, #2
 801f1f8:	e7a4      	b.n	801f144 <lv_draw_mask_radius+0x2e>
                if(last >= 0) {
 801f1fa:	2900      	cmp	r1, #0
 801f1fc:	dbfb      	blt.n	801f1f6 <lv_draw_mask_radius+0xe0>
 801f1fe:	e7eb      	b.n	801f1d8 <lv_draw_mask_radius+0xc2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801f200:	b29b      	uxth	r3, r3
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 801f202:	ebac 0109 	sub.w	r1, ip, r9
    abs_y -= rect.y1;
 801f206:	fa1f f982 	uxth.w	r9, r2
 801f20a:	3401      	adds	r4, #1
        cir_y = radius - abs_y - 1;
 801f20c:	fa1f f288 	uxth.w	r2, r8
    abs_y -= rect.y1;
 801f210:	eba9 0a03 	sub.w	sl, r9, r3
 801f214:	eba4 040c 	sub.w	r4, r4, ip
 801f218:	f102 3cff 	add.w	ip, r2, #4294967295
 801f21c:	fa1f fb8a 	uxth.w	fp, sl
    if(abs_y < radius) {
 801f220:	fa0f fa8a 	sxth.w	sl, sl
 801f224:	fa1f fc8c 	uxth.w	ip, ip
 801f228:	45d0      	cmp	r8, sl
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 801f22a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 801f22e:	b2a4      	uxth	r4, r4
        cir_y = radius - abs_y - 1;
 801f230:	bfcb      	itete	gt
 801f232:	eba3 0309 	subgt.w	r3, r3, r9
        cir_y = abs_y - (h - radius);
 801f236:	44e3      	addle	fp, ip
        cir_y = radius - abs_y - 1;
 801f238:	f103 33ff 	addgt.w	r3, r3, #4294967295
        cir_y = abs_y - (h - radius);
 801f23c:	445b      	addle	r3, fp
        cir_y = radius - abs_y - 1;
 801f23e:	bfcc      	ite	gt
 801f240:	189b      	addgt	r3, r3, r2
        cir_y = abs_y - (h - radius);
 801f242:	eba3 030e 	suble.w	r3, r3, lr
    lv_coord_t cir_x_right = k + w - radius + x_start;
 801f246:	1aa2      	subs	r2, r4, r2
        cir_y = abs_y - (h - radius);
 801f248:	fa0f fe83 	sxth.w	lr, r3
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 801f24c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    lv_coord_t cir_x_right = k + w - radius + x_start;
 801f250:	fa12 f281 	uxtah	r2, r2, r1
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 801f254:	f10e 0701 	add.w	r7, lr, #1
 801f258:	f833 901e 	ldrh.w	r9, [r3, lr, lsl #1]
 801f25c:	f833 7017 	ldrh.w	r7, [r3, r7, lsl #1]
    *x_start = c->x_start_on_y[y];
 801f260:	f8d8 3008 	ldr.w	r3, [r8, #8]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 801f264:	eba7 0709 	sub.w	r7, r7, r9
    *x_start = c->x_start_on_y[y];
 801f268:	f833 e01e 	ldrh.w	lr, [r3, lr, lsl #1]
    return &c->cir_opa[c->opa_start_on_y[y]];
 801f26c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 801f270:	b23f      	sxth	r7, r7
    lv_coord_t cir_x_right = k + w - radius + x_start;
 801f272:	4472      	add	r2, lr
    return &c->cir_opa[c->opa_start_on_y[y]];
 801f274:	444b      	add	r3, r9
    lv_coord_t cir_x_right = k + w - radius + x_start;
 801f276:	b294      	uxth	r4, r2
 801f278:	b212      	sxth	r2, r2
 801f27a:	9401      	str	r4, [sp, #4]
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 801f27c:	fa1c f481 	uxtah	r4, ip, r1
 801f280:	eba4 040e 	sub.w	r4, r4, lr
 801f284:	b224      	sxth	r4, r4
    if(outer == false) {
 801f286:	b1d0      	cbz	r0, 801f2be <lv_draw_mask_radius+0x1a8>
 801f288:	f107 3bff 	add.w	fp, r7, #4294967295
 801f28c:	4692      	mov	sl, r2
 801f28e:	46a0      	mov	r8, r4
 801f290:	449b      	add	fp, r3
        for(i = 0; i < aa_len; i++) {
 801f292:	eba4 0108 	sub.w	r1, r4, r8
 801f296:	b209      	sxth	r1, r1
 801f298:	42b9      	cmp	r1, r7
 801f29a:	db4d      	blt.n	801f338 <lv_draw_mask_radius+0x222>
        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 801f29c:	3401      	adds	r4, #1
 801f29e:	42b4      	cmp	r4, r6
 801f2a0:	bfa8      	it	ge
 801f2a2:	4634      	movge	r4, r6
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 801f2a4:	4296      	cmp	r6, r2
        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 801f2a6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 801f2aa:	dd68      	ble.n	801f37e <lv_draw_mask_radius+0x268>
 801f2ac:	42a2      	cmp	r2, r4
 801f2ae:	db6b      	blt.n	801f388 <lv_draw_mask_radius+0x272>
 801f2b0:	9b01      	ldr	r3, [sp, #4]
 801f2b2:	eba3 0804 	sub.w	r8, r3, r4
 801f2b6:	fa0f f188 	sxth.w	r1, r8
        lv_memset_00(&mask_buf[clr_start], clr_len);
 801f2ba:	1928      	adds	r0, r5, r4
 801f2bc:	e76b      	b.n	801f196 <lv_draw_mask_radius+0x80>
 801f2be:	4691      	mov	r9, r2
 801f2c0:	eb03 0a07 	add.w	sl, r3, r7
    if(outer == false) {
 801f2c4:	46a0      	mov	r8, r4
        for(i = 0; i < aa_len; i++) {
 801f2c6:	eba4 0308 	sub.w	r3, r4, r8
 801f2ca:	b21b      	sxth	r3, r3
 801f2cc:	42bb      	cmp	r3, r7
 801f2ce:	db14      	blt.n	801f2fa <lv_draw_mask_radius+0x1e4>
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 801f2d0:	2f00      	cmp	r7, #0
 801f2d2:	bfa8      	it	ge
 801f2d4:	19d2      	addge	r2, r2, r7
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 801f2d6:	1be4      	subs	r4, r4, r7
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 801f2d8:	42b2      	cmp	r2, r6
 801f2da:	bfa8      	it	ge
 801f2dc:	4632      	movge	r2, r6
 801f2de:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 801f2e2:	1ab1      	subs	r1, r6, r2
 801f2e4:	18a8      	adds	r0, r5, r2
 801f2e6:	f7ff fb7c 	bl	801e9e2 <lv_memset_00>
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 801f2ea:	1c61      	adds	r1, r4, #1
        lv_memset_00(&mask_buf[0], cir_x_left);
 801f2ec:	4628      	mov	r0, r5
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 801f2ee:	42b1      	cmp	r1, r6
 801f2f0:	bfa8      	it	ge
 801f2f2:	4631      	movge	r1, r6
        lv_memset_00(&mask_buf[0], cir_x_left);
 801f2f4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801f2f8:	e74d      	b.n	801f196 <lv_draw_mask_radius+0x80>
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 801f2fa:	f1b9 0f00 	cmp.w	r9, #0
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 801f2fe:	f81a bd01 	ldrb.w	fp, [sl, #-1]!
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 801f302:	db08      	blt.n	801f316 <lv_draw_mask_radius+0x200>
 801f304:	45b1      	cmp	r9, r6
 801f306:	da06      	bge.n	801f316 <lv_draw_mask_radius+0x200>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 801f308:	f815 1009 	ldrb.w	r1, [r5, r9]
 801f30c:	4658      	mov	r0, fp
 801f30e:	f7ff fb6c 	bl	801e9ea <mask_mix>
 801f312:	f805 0009 	strb.w	r0, [r5, r9]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 801f316:	f1b8 0f00 	cmp.w	r8, #0
 801f31a:	db08      	blt.n	801f32e <lv_draw_mask_radius+0x218>
 801f31c:	45b0      	cmp	r8, r6
 801f31e:	da06      	bge.n	801f32e <lv_draw_mask_radius+0x218>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 801f320:	f815 1008 	ldrb.w	r1, [r5, r8]
 801f324:	4658      	mov	r0, fp
 801f326:	f7ff fb60 	bl	801e9ea <mask_mix>
 801f32a:	f805 0008 	strb.w	r0, [r5, r8]
        for(i = 0; i < aa_len; i++) {
 801f32e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f332:	f109 0901 	add.w	r9, r9, #1
 801f336:	e7c6      	b.n	801f2c6 <lv_draw_mask_radius+0x1b0>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 801f338:	f81b 9901 	ldrb.w	r9, [fp], #-1
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 801f33c:	f1ba 0f00 	cmp.w	sl, #0
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 801f340:	ea6f 0909 	mvn.w	r9, r9
 801f344:	fa5f f989 	uxtb.w	r9, r9
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 801f348:	db08      	blt.n	801f35c <lv_draw_mask_radius+0x246>
 801f34a:	45b2      	cmp	sl, r6
 801f34c:	da06      	bge.n	801f35c <lv_draw_mask_radius+0x246>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 801f34e:	f815 100a 	ldrb.w	r1, [r5, sl]
 801f352:	4648      	mov	r0, r9
 801f354:	f7ff fb49 	bl	801e9ea <mask_mix>
 801f358:	f805 000a 	strb.w	r0, [r5, sl]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 801f35c:	f1b8 0f00 	cmp.w	r8, #0
 801f360:	db08      	blt.n	801f374 <lv_draw_mask_radius+0x25e>
 801f362:	45b0      	cmp	r8, r6
 801f364:	da06      	bge.n	801f374 <lv_draw_mask_radius+0x25e>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 801f366:	f815 1008 	ldrb.w	r1, [r5, r8]
 801f36a:	4648      	mov	r0, r9
 801f36c:	f7ff fb3d 	bl	801e9ea <mask_mix>
 801f370:	f805 0008 	strb.w	r0, [r5, r8]
        for(i = 0; i < aa_len; i++) {
 801f374:	f108 38ff 	add.w	r8, r8, #4294967295
 801f378:	f10a 0a01 	add.w	sl, sl, #1
 801f37c:	e789      	b.n	801f292 <lv_draw_mask_radius+0x17c>
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 801f37e:	42a6      	cmp	r6, r4
 801f380:	db02      	blt.n	801f388 <lv_draw_mask_radius+0x272>
 801f382:	1b31      	subs	r1, r6, r4
 801f384:	b209      	sxth	r1, r1
 801f386:	e798      	b.n	801f2ba <lv_draw_mask_radius+0x1a4>
 801f388:	2100      	movs	r1, #0
 801f38a:	e796      	b.n	801f2ba <lv_draw_mask_radius+0x1a4>

0801f38c <lv_draw_mask_free_param>:
{
 801f38c:	b510      	push	{r4, lr}
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 801f38e:	7903      	ldrb	r3, [r0, #4]
{
 801f390:	4604      	mov	r4, r0
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 801f392:	2b02      	cmp	r3, #2
 801f394:	d110      	bne.n	801f3b8 <lv_draw_mask_free_param+0x2c>
        if(radius_p->circle) {
 801f396:	6943      	ldr	r3, [r0, #20]
 801f398:	b16b      	cbz	r3, 801f3b6 <lv_draw_mask_free_param+0x2a>
            if(radius_p->circle->life < 0) {
 801f39a:	691a      	ldr	r2, [r3, #16]
 801f39c:	2a00      	cmp	r2, #0
 801f39e:	da07      	bge.n	801f3b0 <lv_draw_mask_free_param+0x24>
                lv_mem_free(radius_p->circle->cir_opa);
 801f3a0:	6858      	ldr	r0, [r3, #4]
 801f3a2:	f7f3 f9d7 	bl	8012754 <lv_mem_free>
                lv_mem_free(radius_p->circle);
 801f3a6:	6960      	ldr	r0, [r4, #20]
}
 801f3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_mem_free(poly_p->cfg.points);
 801f3ac:	f7f3 b9d2 	b.w	8012754 <lv_mem_free>
                radius_p->circle->used_cnt--;
 801f3b0:	695a      	ldr	r2, [r3, #20]
 801f3b2:	3a01      	subs	r2, #1
 801f3b4:	615a      	str	r2, [r3, #20]
}
 801f3b6:	bd10      	pop	{r4, pc}
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
 801f3b8:	2b05      	cmp	r3, #5
 801f3ba:	d1fc      	bne.n	801f3b6 <lv_draw_mask_free_param+0x2a>
        lv_mem_free(poly_p->cfg.points);
 801f3bc:	6880      	ldr	r0, [r0, #8]
 801f3be:	e7f3      	b.n	801f3a8 <lv_draw_mask_free_param+0x1c>

0801f3c0 <lv_draw_mask_line_angle_init>:
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 801f3c0:	2bb4      	cmp	r3, #180	; 0xb4
{
 801f3c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801f3c6:	461c      	mov	r4, r3
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 801f3c8:	bfc8      	it	gt
 801f3ca:	f1a3 04b4 	subgt.w	r4, r3, #180	; 0xb4
{
 801f3ce:	4606      	mov	r6, r0
 801f3d0:	4690      	mov	r8, r2
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 801f3d2:	bfc8      	it	gt
 801f3d4:	b224      	sxthgt	r4, r4
{
 801f3d6:	460f      	mov	r7, r1
    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 801f3d8:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 801f3dc:	b200      	sxth	r0, r0
 801f3de:	f7f3 f961 	bl	80126a4 <lv_trigo_sin>
 801f3e2:	4605      	mov	r5, r0
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 801f3e4:	4620      	mov	r0, r4
 801f3e6:	f7f3 f95d 	bl	80126a4 <lv_trigo_sin>
    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 801f3ea:	f89d 2020 	ldrb.w	r2, [sp, #32]
 801f3ee:	eb08 1460 	add.w	r4, r8, r0, asr #5
 801f3f2:	4639      	mov	r1, r7
 801f3f4:	eb07 1365 	add.w	r3, r7, r5, asr #5
 801f3f8:	9201      	str	r2, [sp, #4]
 801f3fa:	b224      	sxth	r4, r4
 801f3fc:	4642      	mov	r2, r8
 801f3fe:	b21b      	sxth	r3, r3
 801f400:	4630      	mov	r0, r6
 801f402:	9400      	str	r4, [sp, #0]
 801f404:	f7e8 ffe8 	bl	80083d8 <lv_draw_mask_line_points_init>
}
 801f408:	b002      	add	sp, #8
 801f40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f40e <lv_draw_rect>:
 801f40e:	88d3      	ldrh	r3, [r2, #6]
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801f410:	b470      	push	{r4, r5, r6}
 801f412:	3301      	adds	r3, #1
 801f414:	8856      	ldrh	r6, [r2, #2]
 801f416:	1b9b      	subs	r3, r3, r6
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 801f418:	b21b      	sxth	r3, r3
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	dd09      	ble.n	801f432 <lv_draw_rect+0x24>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801f41e:	8893      	ldrh	r3, [r2, #4]
 801f420:	8814      	ldrh	r4, [r2, #0]
 801f422:	3301      	adds	r3, #1
 801f424:	1b1b      	subs	r3, r3, r4
 801f426:	b21b      	sxth	r3, r3
 801f428:	2b00      	cmp	r3, #0
 801f42a:	dd02      	ble.n	801f432 <lv_draw_rect+0x24>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 801f42c:	6903      	ldr	r3, [r0, #16]

    LV_ASSERT_MEM_INTEGRITY();
}
 801f42e:	bc70      	pop	{r4, r5, r6}
    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 801f430:	4718      	bx	r3
}
 801f432:	bc70      	pop	{r4, r5, r6}
 801f434:	4770      	bx	lr

0801f436 <lv_draw_transform>:
 *   GLOBAL FUNCTIONS
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 801f436:	b4f0      	push	{r4, r5, r6, r7}
 801f438:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 801f43c:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 801f440:	f89d 701c 	ldrb.w	r7, [sp, #28]
    LV_ASSERT_NULL(draw_ctx);
 801f444:	b900      	cbnz	r0, 801f448 <lv_draw_transform+0x12>
 801f446:	e7fe      	b.n	801f446 <lv_draw_transform+0x10>
    if(draw_ctx->draw_transform == NULL) {
 801f448:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 801f44a:	b12c      	cbz	r4, 801f458 <lv_draw_transform+0x22>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 801f44c:	46a4      	mov	ip, r4
 801f44e:	9707      	str	r7, [sp, #28]
 801f450:	e9cd 5604 	strd	r5, r6, [sp, #16]

}
 801f454:	bcf0      	pop	{r4, r5, r6, r7}
    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 801f456:	4760      	bx	ip
}
 801f458:	bcf0      	pop	{r4, r5, r6, r7}
 801f45a:	4770      	bx	lr

0801f45c <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 801f45c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801f460:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801f464:	4605      	mov	r5, r0
 801f466:	4614      	mov	r4, r2
 801f468:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 801f46c:	461e      	mov	r6, r3
 801f46e:	b963      	cbnz	r3, 801f48a <_lv_img_buf_get_transformed_area+0x2e>
 801f470:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 801f474:	d109      	bne.n	801f48a <_lv_img_buf_get_transformed_area+0x2e>
        res->x1 = 0;
        res->y1 = 0;
        res->x2 = w - 1;
 801f476:	3901      	subs	r1, #1
        res->y2 = h - 1;
 801f478:	1e54      	subs	r4, r2, #1
        res->x1 = 0;
 801f47a:	802b      	strh	r3, [r5, #0]
        res->y1 = 0;
 801f47c:	806b      	strh	r3, [r5, #2]
        res->x2 = w - 1;
 801f47e:	8081      	strh	r1, [r0, #4]
    lv_point_transform(&p[2], angle, zoom, pivot);
    lv_point_transform(&p[3], angle, zoom, pivot);
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 801f480:	b224      	sxth	r4, r4
 801f482:	80ec      	strh	r4, [r5, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 801f484:	b004      	add	sp, #16
 801f486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_point_t p[4] = {
 801f48a:	2300      	movs	r3, #0
    lv_point_transform(&p[0], angle, zoom, pivot);
 801f48c:	463a      	mov	r2, r7
 801f48e:	4668      	mov	r0, sp
    lv_point_t p[4] = {
 801f490:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f494:	9300      	str	r3, [sp, #0]
 801f496:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f49a:	f8ad 3008 	strh.w	r3, [sp, #8]
    lv_point_transform(&p[0], angle, zoom, pivot);
 801f49e:	4643      	mov	r3, r8
    lv_point_t p[4] = {
 801f4a0:	f8ad 100c 	strh.w	r1, [sp, #12]
    lv_point_transform(&p[0], angle, zoom, pivot);
 801f4a4:	4631      	mov	r1, r6
    lv_point_t p[4] = {
 801f4a6:	f8ad 400a 	strh.w	r4, [sp, #10]
 801f4aa:	f8ad 400e 	strh.w	r4, [sp, #14]
    lv_point_transform(&p[0], angle, zoom, pivot);
 801f4ae:	f7f3 f801 	bl	80124b4 <lv_point_transform>
    lv_point_transform(&p[1], angle, zoom, pivot);
 801f4b2:	4643      	mov	r3, r8
 801f4b4:	463a      	mov	r2, r7
 801f4b6:	4631      	mov	r1, r6
 801f4b8:	a801      	add	r0, sp, #4
 801f4ba:	f7f2 fffb 	bl	80124b4 <lv_point_transform>
    lv_point_transform(&p[2], angle, zoom, pivot);
 801f4be:	4643      	mov	r3, r8
 801f4c0:	463a      	mov	r2, r7
 801f4c2:	4631      	mov	r1, r6
 801f4c4:	a802      	add	r0, sp, #8
 801f4c6:	f7f2 fff5 	bl	80124b4 <lv_point_transform>
    lv_point_transform(&p[3], angle, zoom, pivot);
 801f4ca:	4643      	mov	r3, r8
 801f4cc:	463a      	mov	r2, r7
 801f4ce:	4631      	mov	r1, r6
 801f4d0:	a803      	add	r0, sp, #12
 801f4d2:	f7f2 ffef 	bl	80124b4 <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 801f4d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f4da:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 801f4de:	461a      	mov	r2, r3
 801f4e0:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801f4e4:	42a3      	cmp	r3, r4
 801f4e6:	f9bd 1000 	ldrsh.w	r1, [sp]
 801f4ea:	bfa8      	it	ge
 801f4ec:	4622      	movge	r2, r4
 801f4ee:	4282      	cmp	r2, r0
 801f4f0:	bfa8      	it	ge
 801f4f2:	4602      	movge	r2, r0
 801f4f4:	428a      	cmp	r2, r1
 801f4f6:	bfa8      	it	ge
 801f4f8:	460a      	movge	r2, r1
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 801f4fa:	42a3      	cmp	r3, r4
 801f4fc:	bfb8      	it	lt
 801f4fe:	4623      	movlt	r3, r4
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 801f500:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 801f504:	3a02      	subs	r2, #2
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 801f506:	4283      	cmp	r3, r0
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 801f508:	802a      	strh	r2, [r5, #0]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 801f50a:	bfb8      	it	lt
 801f50c:	4603      	movlt	r3, r0
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 801f50e:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 801f512:	428b      	cmp	r3, r1
 801f514:	bfb8      	it	lt
 801f516:	460b      	movlt	r3, r1
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 801f518:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 801f51c:	3302      	adds	r3, #2
 801f51e:	80ab      	strh	r3, [r5, #4]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 801f520:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f524:	42a3      	cmp	r3, r4
 801f526:	461a      	mov	r2, r3
 801f528:	bfa8      	it	ge
 801f52a:	4622      	movge	r2, r4
 801f52c:	4282      	cmp	r2, r0
 801f52e:	bfa8      	it	ge
 801f530:	4602      	movge	r2, r0
 801f532:	428a      	cmp	r2, r1
 801f534:	bfa8      	it	ge
 801f536:	460a      	movge	r2, r1
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 801f538:	429c      	cmp	r4, r3
 801f53a:	bfb8      	it	lt
 801f53c:	461c      	movlt	r4, r3
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 801f53e:	3a02      	subs	r2, #2
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 801f540:	4284      	cmp	r4, r0
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 801f542:	806a      	strh	r2, [r5, #2]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 801f544:	bfb8      	it	lt
 801f546:	4604      	movlt	r4, r0
 801f548:	428c      	cmp	r4, r1
 801f54a:	bfb8      	it	lt
 801f54c:	460c      	movlt	r4, r1
 801f54e:	3402      	adds	r4, #2
 801f550:	e796      	b.n	801f480 <_lv_img_buf_get_transformed_area+0x24>

0801f552 <lv_img_cache_invalidate_src>:

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 801f552:	4770      	bx	lr

0801f554 <lv_img_decoder_built_in_close>:
{
 801f554:	b538      	push	{r3, r4, r5, lr}
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 801f556:	6a4d      	ldr	r5, [r1, #36]	; 0x24
{
 801f558:	460c      	mov	r4, r1
    if(user_data) {
 801f55a:	b195      	cbz	r5, 801f582 <lv_img_decoder_built_in_close+0x2e>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 801f55c:	7c0b      	ldrb	r3, [r1, #16]
 801f55e:	2b01      	cmp	r3, #1
 801f560:	d102      	bne.n	801f568 <lv_img_decoder_built_in_close+0x14>
            lv_fs_close(&user_data->f);
 801f562:	4628      	mov	r0, r5
 801f564:	f005 f8ff 	bl	8024766 <lv_fs_close>
        if(user_data->palette) lv_mem_free(user_data->palette);
 801f568:	68e8      	ldr	r0, [r5, #12]
 801f56a:	b108      	cbz	r0, 801f570 <lv_img_decoder_built_in_close+0x1c>
 801f56c:	f7f3 f8f2 	bl	8012754 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 801f570:	6928      	ldr	r0, [r5, #16]
 801f572:	b108      	cbz	r0, 801f578 <lv_img_decoder_built_in_close+0x24>
 801f574:	f7f3 f8ee 	bl	8012754 <lv_mem_free>
        lv_mem_free(user_data);
 801f578:	4628      	mov	r0, r5
 801f57a:	f7f3 f8eb 	bl	8012754 <lv_mem_free>
        dsc->user_data = NULL;
 801f57e:	2300      	movs	r3, #0
 801f580:	6263      	str	r3, [r4, #36]	; 0x24
}
 801f582:	bd38      	pop	{r3, r4, r5, pc}

0801f584 <lv_img_decoder_read_line>:
{
 801f584:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f586:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 801f588:	6800      	ldr	r0, [r0, #0]
 801f58a:	6884      	ldr	r4, [r0, #8]
 801f58c:	b144      	cbz	r4, 801f5a0 <lv_img_decoder_read_line+0x1c>
 801f58e:	9e06      	ldr	r6, [sp, #24]
 801f590:	e9cd 3600 	strd	r3, r6, [sp]
 801f594:	4613      	mov	r3, r2
 801f596:	460a      	mov	r2, r1
 801f598:	4629      	mov	r1, r5
 801f59a:	47a0      	blx	r4
}
 801f59c:	b002      	add	sp, #8
 801f59e:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 801f5a0:	4620      	mov	r0, r4
 801f5a2:	e7fb      	b.n	801f59c <lv_img_decoder_read_line+0x18>

0801f5a4 <lv_img_decoder_close>:
{
 801f5a4:	b510      	push	{r4, lr}
 801f5a6:	4604      	mov	r4, r0
    if(dsc->decoder) {
 801f5a8:	6800      	ldr	r0, [r0, #0]
 801f5aa:	b158      	cbz	r0, 801f5c4 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 801f5ac:	68c3      	ldr	r3, [r0, #12]
 801f5ae:	b10b      	cbz	r3, 801f5b4 <lv_img_decoder_close+0x10>
 801f5b0:	4621      	mov	r1, r4
 801f5b2:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 801f5b4:	7c23      	ldrb	r3, [r4, #16]
 801f5b6:	2b01      	cmp	r3, #1
 801f5b8:	d104      	bne.n	801f5c4 <lv_img_decoder_close+0x20>
            lv_mem_free((void *)dsc->src);
 801f5ba:	6860      	ldr	r0, [r4, #4]
 801f5bc:	f7f3 f8ca 	bl	8012754 <lv_mem_free>
            dsc->src = NULL;
 801f5c0:	2300      	movs	r3, #0
 801f5c2:	6063      	str	r3, [r4, #4]
}
 801f5c4:	bd10      	pop	{r4, pc}

0801f5c6 <lv_draw_sw_wait_for_finish>:

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 801f5c6:	4770      	bx	lr

0801f5c8 <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 801f5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f5cc:	461e      	mov	r6, r3
 801f5ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f5d0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
        lv_memcpy(dest_bufc, src_bufc, line_length);
        dest_bufc += dest_stride;
 801f5d4:	ea4f 0a42 	mov.w	sl, r2, lsl #1
    dest_bufc += dest_area->x1;
 801f5d8:	f9b6 0000 	ldrsh.w	r0, [r6]
    dest_bufc += dest_stride * dest_area->y1;
 801f5dc:	f9b6 5002 	ldrsh.w	r5, [r6, #2]
        src_bufc += src_stride;
 801f5e0:	ea4f 0943 	mov.w	r9, r3, lsl #1
    src_bufc += src_area->x1;
 801f5e4:	f9b4 c000 	ldrsh.w	ip, [r4]
    dest_bufc += dest_area->x1;
 801f5e8:	fb02 0705 	mla	r7, r2, r5, r0
 801f5ec:	eb01 0747 	add.w	r7, r1, r7, lsl #1
    src_bufc += src_area->x1;
 801f5f0:	8861      	ldrh	r1, [r4, #2]
 801f5f2:	9c08      	ldr	r4, [sp, #32]
 801f5f4:	fb13 c101 	smlabb	r1, r3, r1, ip
 801f5f8:	eb04 0841 	add.w	r8, r4, r1, lsl #1
 801f5fc:	88b4      	ldrh	r4, [r6, #4]
 801f5fe:	3401      	adds	r4, #1
 801f600:	1a24      	subs	r4, r4, r0
    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
 801f602:	b224      	sxth	r4, r4
 801f604:	0064      	lsls	r4, r4, #1
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 801f606:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801f60a:	42ab      	cmp	r3, r5
 801f60c:	da01      	bge.n	801f612 <lv_draw_sw_buffer_copy+0x4a>
    }
}
 801f60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return memcpy(dst, src, len);
 801f612:	3501      	adds	r5, #1
 801f614:	4641      	mov	r1, r8
 801f616:	4638      	mov	r0, r7
 801f618:	4622      	mov	r2, r4
        dest_bufc += dest_stride;
 801f61a:	4457      	add	r7, sl
        src_bufc += src_stride;
 801f61c:	44c8      	add	r8, r9
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 801f61e:	b22d      	sxth	r5, r5
 801f620:	f7fb f8a7 	bl	801a772 <memcpy>
 801f624:	e7ef      	b.n	801f606 <lv_draw_sw_buffer_copy+0x3e>

0801f626 <get_rounded_area>:

    q->draw_ctx->clip_area = clip_area_ori;
}

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 801f626:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f62a:	4681      	mov	r9, r0
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 801f62c:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801f630:	eba1 0852 	sub.w	r8, r1, r2, lsr #1
{
 801f634:	4617      	mov	r7, r2
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 801f636:	b200      	sxth	r0, r0
{
 801f638:	461e      	mov	r6, r3
    int32_t thick_half = thickness / 2;
 801f63a:	0855      	lsrs	r5, r2, #1
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 801f63c:	f7f3 f832 	bl	80126a4 <lv_trigo_sin>
 801f640:	fb08 f400 	mul.w	r4, r8, r0
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 801f644:	4648      	mov	r0, r9
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 801f646:	11e4      	asrs	r4, r4, #7
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 801f648:	f7f3 f82c 	bl	80126a4 <lv_trigo_sin>

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
        cir_x = (cir_x - pa) >> ps;
        res_area->x1 = cir_x - thick_half + thick_corr;
 801f64c:	43fa      	mvns	r2, r7
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 801f64e:	fb08 f100 	mul.w	r1, r8, r0
    if(cir_x > 0) {
 801f652:	2c00      	cmp	r4, #0
        res_area->x1 = cir_x - thick_half + thick_corr;
 801f654:	f002 0201 	and.w	r2, r2, #1
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 801f658:	ea4f 11e1 	mov.w	r1, r1, asr #7
    if(cir_x > 0) {
 801f65c:	dd17      	ble.n	801f68e <get_rounded_area+0x68>
        cir_x = (cir_x - pa) >> ps;
 801f65e:	3c7f      	subs	r4, #127	; 0x7f
        res_area->x1 = cir_x - thick_half + thick_corr;
 801f660:	1b53      	subs	r3, r2, r5
 801f662:	f3c4 240f 	ubfx	r4, r4, #8, #16
 801f666:	4423      	add	r3, r4
        res_area->x2 = cir_x + thick_half;
 801f668:	442c      	add	r4, r5
        res_area->x1 = cir_x - thick_half + thick_corr;
 801f66a:	b21b      	sxth	r3, r3
    }
    else {
        cir_x = (cir_x + pa) >> ps;
        res_area->x1 = cir_x - thick_half;
        res_area->x2 = cir_x + thick_half - thick_corr;
 801f66c:	b224      	sxth	r4, r4
    }

    if(cir_y > 0) {
 801f66e:	2900      	cmp	r1, #0
        res_area->x1 = cir_x - thick_half + thick_corr;
 801f670:	8033      	strh	r3, [r6, #0]
        res_area->x2 = cir_x + thick_half;
 801f672:	80b4      	strh	r4, [r6, #4]
    if(cir_y > 0) {
 801f674:	dd13      	ble.n	801f69e <get_rounded_area+0x78>
        cir_y = (cir_y - pa) >> ps;
 801f676:	397f      	subs	r1, #127	; 0x7f
        res_area->y1 = cir_y - thick_half + thick_corr;
 801f678:	1b53      	subs	r3, r2, r5
 801f67a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 801f67e:	440b      	add	r3, r1
 801f680:	b21b      	sxth	r3, r3
        res_area->y2 = cir_y + thick_half;
    }
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
 801f682:	4429      	add	r1, r5
        res_area->y1 = cir_y - thick_half + thick_corr;
 801f684:	8073      	strh	r3, [r6, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 801f686:	b209      	sxth	r1, r1
        res_area->y2 = cir_y + thick_half;
 801f688:	80f1      	strh	r1, [r6, #6]
    }
}
 801f68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        cir_x = (cir_x + pa) >> ps;
 801f68e:	347f      	adds	r4, #127	; 0x7f
        res_area->x2 = cir_x + thick_half - thick_corr;
 801f690:	1aa8      	subs	r0, r5, r2
        res_area->x1 = cir_x - thick_half;
 801f692:	f3c4 240f 	ubfx	r4, r4, #8, #16
 801f696:	1b63      	subs	r3, r4, r5
        res_area->x2 = cir_x + thick_half - thick_corr;
 801f698:	4404      	add	r4, r0
        res_area->x1 = cir_x - thick_half;
 801f69a:	b21b      	sxth	r3, r3
        res_area->x2 = cir_x + thick_half - thick_corr;
 801f69c:	e7e6      	b.n	801f66c <get_rounded_area+0x46>
        cir_y = (cir_y + pa) >> ps;
 801f69e:	317f      	adds	r1, #127	; 0x7f
        res_area->y1 = cir_y - thick_half;
 801f6a0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 801f6a4:	1b4b      	subs	r3, r1, r5
        res_area->y2 = cir_y + thick_half - thick_corr;
 801f6a6:	1aad      	subs	r5, r5, r2
        res_area->y1 = cir_y - thick_half;
 801f6a8:	b21b      	sxth	r3, r3
        res_area->y2 = cir_y + thick_half - thick_corr;
 801f6aa:	e7ea      	b.n	801f682 <get_rounded_area+0x5c>

0801f6ac <lv_draw_sw_arc>:
{
 801f6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6b0:	b0d3      	sub	sp, #332	; 0x14c
 801f6b2:	4604      	mov	r4, r0
 801f6b4:	4615      	mov	r5, r2
 801f6b6:	9303      	str	r3, [sp, #12]
    if(dsc->opa <= LV_OPA_MIN) return;
 801f6b8:	7b0b      	ldrb	r3, [r1, #12]
{
 801f6ba:	f8bd 7170 	ldrh.w	r7, [sp, #368]	; 0x170
    if(dsc->opa <= LV_OPA_MIN) return;
 801f6be:	2b02      	cmp	r3, #2
{
 801f6c0:	f8bd 6174 	ldrh.w	r6, [sp, #372]	; 0x174
 801f6c4:	9105      	str	r1, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
 801f6c6:	f240 8097 	bls.w	801f7f8 <lv_draw_sw_arc+0x14c>
    if(dsc->width == 0) return;
 801f6ca:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801f6ce:	9304      	str	r3, [sp, #16]
 801f6d0:	2b00      	cmp	r3, #0
 801f6d2:	f000 8091 	beq.w	801f7f8 <lv_draw_sw_arc+0x14c>
    if(start_angle == end_angle) return;
 801f6d6:	42b7      	cmp	r7, r6
 801f6d8:	f000 808e 	beq.w	801f7f8 <lv_draw_sw_arc+0x14c>
    if(width > radius) width = radius;
 801f6dc:	9a03      	ldr	r2, [sp, #12]
    lv_draw_rect_dsc_init(&cir_dsc);
 801f6de:	a829      	add	r0, sp, #164	; 0xa4
    if(width > radius) width = radius;
 801f6e0:	4293      	cmp	r3, r2
 801f6e2:	bfc4      	itt	gt
 801f6e4:	f9bd 300c 	ldrshgt.w	r3, [sp, #12]
 801f6e8:	9304      	strgt	r3, [sp, #16]
    lv_draw_rect_dsc_init(&cir_dsc);
 801f6ea:	f7e9 f95b 	bl	80089a4 <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 801f6ee:	9b05      	ldr	r3, [sp, #20]
 801f6f0:	7b5b      	ldrb	r3, [r3, #13]
 801f6f2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801f6f6:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
    if(dsc->img_src) {
 801f6fa:	9b05      	ldr	r3, [sp, #20]
 801f6fc:	689a      	ldr	r2, [r3, #8]
 801f6fe:	7b1b      	ldrb	r3, [r3, #12]
 801f700:	2a00      	cmp	r2, #0
 801f702:	d07c      	beq.n	801f7fe <lv_draw_sw_arc+0x152>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 801f704:	2100      	movs	r1, #0
        cir_dsc.bg_img_src = dsc->img_src;
 801f706:	922d      	str	r2, [sp, #180]	; 0xb4
        cir_dsc.bg_img_opa = dsc->opa;
 801f708:	f88d 30be 	strb.w	r3, [sp, #190]	; 0xbe
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 801f70c:	f88d 10a7 	strb.w	r1, [sp, #167]	; 0xa7
    area_out.x1 = center->x - radius;
 801f710:	9b03      	ldr	r3, [sp, #12]
    area_out.y1 = center->y - radius;
 801f712:	f8b5 c002 	ldrh.w	ip, [r5, #2]
    area_out.x1 = center->x - radius;
 801f716:	882a      	ldrh	r2, [r5, #0]
    area_out.y1 = center->y - radius;
 801f718:	ebac 0103 	sub.w	r1, ip, r3
    area_out.x1 = center->x - radius;
 801f71c:	1ad0      	subs	r0, r2, r3
 801f71e:	3b01      	subs	r3, #1
    area_out.y1 = center->y - radius;
 801f720:	b289      	uxth	r1, r1
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 801f722:	fa12 f283 	uxtah	r2, r2, r3
    area_out.y2 = center->y + radius - 1;
 801f726:	fa1c f383 	uxtah	r3, ip, r3
    area_in.x1 += dsc->width;
 801f72a:	f8dd c014 	ldr.w	ip, [sp, #20]
    area_out.x1 = center->x - radius;
 801f72e:	b280      	uxth	r0, r0
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 801f730:	b292      	uxth	r2, r2
    area_out.y1 = center->y - radius;
 801f732:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    area_in.x1 += dsc->width;
 801f736:	f8bc c002 	ldrh.w	ip, [ip, #2]
    area_out.y2 = center->y + radius - 1;
 801f73a:	b29b      	uxth	r3, r3
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 801f73c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    area_in.x2 -= dsc->width;
 801f740:	eba2 020c 	sub.w	r2, r2, ip
    area_out.x1 = center->x - radius;
 801f744:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
    area_in.x1 += dsc->width;
 801f748:	4460      	add	r0, ip
    area_in.y1 += dsc->width;
 801f74a:	4461      	add	r1, ip
    area_in.x2 -= dsc->width;
 801f74c:	b292      	uxth	r2, r2
    area_out.y2 = center->y + radius - 1;
 801f74e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    area_in.x1 += dsc->width;
 801f752:	b280      	uxth	r0, r0
    area_in.y2 -= dsc->width;
 801f754:	eba3 030c 	sub.w	r3, r3, ip
    area_in.x2 -= dsc->width;
 801f758:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 801f75c:	3201      	adds	r2, #1
    area_in.y1 += dsc->width;
 801f75e:	b289      	uxth	r1, r1
    area_in.x1 += dsc->width;
 801f760:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 801f764:	1a12      	subs	r2, r2, r0
    area_in.y2 -= dsc->width;
 801f766:	b29b      	uxth	r3, r3
    area_in.y1 += dsc->width;
 801f768:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 801f76c:	b212      	sxth	r2, r2
    area_in.y2 -= dsc->width;
 801f76e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 801f772:	2a00      	cmp	r2, #0
 801f774:	dd4a      	ble.n	801f80c <lv_draw_sw_arc+0x160>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801f776:	3301      	adds	r3, #1
 801f778:	1a5b      	subs	r3, r3, r1
 801f77a:	b21b      	sxth	r3, r3
 801f77c:	2b00      	cmp	r3, #0
 801f77e:	dd45      	ble.n	801f80c <lv_draw_sw_arc+0x160>
        lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 801f780:	2301      	movs	r3, #1
 801f782:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801f786:	a911      	add	r1, sp, #68	; 0x44
 801f788:	a817      	add	r0, sp, #92	; 0x5c
 801f78a:	f7e8 ff05 	bl	8008598 <lv_draw_mask_radius_init>
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 801f78e:	2100      	movs	r1, #0
 801f790:	a817      	add	r0, sp, #92	; 0x5c
 801f792:	f7e8 fd89 	bl	80082a8 <lv_draw_mask_add>
        mask_in_param_valid = true;
 801f796:	2301      	movs	r3, #1
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 801f798:	9006      	str	r0, [sp, #24]
        mask_in_param_valid = true;
 801f79a:	9308      	str	r3, [sp, #32]
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 801f79c:	2300      	movs	r3, #0
 801f79e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801f7a2:	a90f      	add	r1, sp, #60	; 0x3c
 801f7a4:	a81d      	add	r0, sp, #116	; 0x74
 801f7a6:	f7e8 fef7 	bl	8008598 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 801f7aa:	2100      	movs	r1, #0
 801f7ac:	a81d      	add	r0, sp, #116	; 0x74
 801f7ae:	f7e8 fd7b 	bl	80082a8 <lv_draw_mask_add>
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 801f7b2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 801f7b6:	900b      	str	r0, [sp, #44]	; 0x2c
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 801f7b8:	42b3      	cmp	r3, r6
 801f7ba:	d003      	beq.n	801f7c4 <lv_draw_sw_arc+0x118>
 801f7bc:	f506 73b4 	add.w	r3, r6, #360	; 0x168
 801f7c0:	429f      	cmp	r7, r3
 801f7c2:	d12c      	bne.n	801f81e <lv_draw_sw_arc+0x172>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 801f7c4:	f647 73ff 	movw	r3, #32767	; 0x7fff
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 801f7c8:	a929      	add	r1, sp, #164	; 0xa4
 801f7ca:	aa0f      	add	r2, sp, #60	; 0x3c
 801f7cc:	4620      	mov	r0, r4
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 801f7ce:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 801f7d2:	f7ff fe1c 	bl	801f40e <lv_draw_rect>
        lv_draw_mask_remove_id(mask_out_id);
 801f7d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f7d8:	f7e8 fd9c 	bl	8008314 <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 801f7dc:	9b06      	ldr	r3, [sp, #24]
 801f7de:	1c59      	adds	r1, r3, #1
 801f7e0:	d002      	beq.n	801f7e8 <lv_draw_sw_arc+0x13c>
 801f7e2:	4618      	mov	r0, r3
 801f7e4:	f7e8 fd96 	bl	8008314 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_out_param);
 801f7e8:	a81d      	add	r0, sp, #116	; 0x74
 801f7ea:	f7ff fdcf 	bl	801f38c <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 801f7ee:	9b08      	ldr	r3, [sp, #32]
 801f7f0:	b113      	cbz	r3, 801f7f8 <lv_draw_sw_arc+0x14c>
            lv_draw_mask_free_param(&mask_in_param);
 801f7f2:	a817      	add	r0, sp, #92	; 0x5c
 801f7f4:	f7ff fdca 	bl	801f38c <lv_draw_mask_free_param>
}
 801f7f8:	b053      	add	sp, #332	; 0x14c
 801f7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cir_dsc.bg_opa = dsc->opa;
 801f7fe:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
        cir_dsc.bg_color = dsc->color;
 801f802:	9b05      	ldr	r3, [sp, #20]
 801f804:	881b      	ldrh	r3, [r3, #0]
 801f806:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 801f80a:	e781      	b.n	801f710 <lv_draw_sw_arc+0x64>
    bool mask_in_param_valid = false;
 801f80c:	2300      	movs	r3, #0
 801f80e:	9308      	str	r3, [sp, #32]
    int16_t mask_in_id = LV_MASK_ID_INV;
 801f810:	f04f 33ff 	mov.w	r3, #4294967295
 801f814:	9306      	str	r3, [sp, #24]
 801f816:	e7c1      	b.n	801f79c <lv_draw_sw_arc+0xf0>
    while(start_angle >= 360) start_angle -= 360;
 801f818:	f5a7 77b4 	sub.w	r7, r7, #360	; 0x168
 801f81c:	b2bf      	uxth	r7, r7
 801f81e:	f5b7 7fb4 	cmp.w	r7, #360	; 0x168
 801f822:	d2f9      	bcs.n	801f818 <lv_draw_sw_arc+0x16c>
    while(end_angle >= 360) end_angle -= 360;
 801f824:	f5b6 7fb4 	cmp.w	r6, #360	; 0x168
 801f828:	f080 80b7 	bcs.w	801f99a <lv_draw_sw_arc+0x2ee>
    lv_draw_mask_angle_init(&mask_angle_param, center->x, center->y, start_angle, end_angle);
 801f82c:	b23b      	sxth	r3, r7
 801f82e:	a837      	add	r0, sp, #220	; 0xdc
 801f830:	9307      	str	r3, [sp, #28]
 801f832:	b233      	sxth	r3, r6
 801f834:	9300      	str	r3, [sp, #0]
 801f836:	9309      	str	r3, [sp, #36]	; 0x24
 801f838:	b23b      	sxth	r3, r7
 801f83a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801f83e:	f9b5 1000 	ldrsh.w	r1, [r5]
 801f842:	f7e8 fe59 	bl	80084f8 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 801f846:	2100      	movs	r1, #0
 801f848:	a837      	add	r0, sp, #220	; 0xdc
 801f84a:	f7e8 fd2d 	bl	80082a8 <lv_draw_mask_add>
    if(end_angle > start_angle) {
 801f84e:	42b7      	cmp	r7, r6
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801f850:	f8d4 8008 	ldr.w	r8, [r4, #8]
        angle_gap = 360 - (end_angle - start_angle);
 801f854:	bf34      	ite	cc
 801f856:	1bf3      	subcc	r3, r6, r7
        angle_gap = start_angle - end_angle;
 801f858:	1bbb      	subcs	r3, r7, r6
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 801f85a:	900c      	str	r0, [sp, #48]	; 0x30
        angle_gap = 360 - (end_angle - start_angle);
 801f85c:	bf38      	it	cc
 801f85e:	f5c3 73b4 	rsbcc	r3, r3, #360	; 0x168
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 801f862:	2b3c      	cmp	r3, #60	; 0x3c
 801f864:	f340 850b 	ble.w	802027e <lv_draw_sw_arc+0xbd2>
 801f868:	9b03      	ldr	r3, [sp, #12]
 801f86a:	2b0a      	cmp	r3, #10
 801f86c:	f240 8507 	bls.w	802027e <lv_draw_sw_arc+0xbd2>
        q_dsc.radius = radius;
 801f870:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 801f874:	2f59      	cmp	r7, #89	; 0x59
        q_dsc.radius = radius;
 801f876:	9302      	str	r3, [sp, #8]
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 801f878:	f04f 035a 	mov.w	r3, #90	; 0x5a
 801f87c:	fbb7 f9f3 	udiv	r9, r7, r3
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 801f880:	fbb6 fbf3 	udiv	fp, r6, r3
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 801f884:	f200 8095 	bhi.w	801f9b2 <lv_draw_sw_arc+0x306>
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f888:	eb07 0a03 	add.w	sl, r7, r3
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f88c:	9a04      	ldr	r2, [sp, #16]
 801f88e:	9b02      	ldr	r3, [sp, #8]
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 801f890:	2e59      	cmp	r6, #89	; 0x59
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f892:	fa0f fa8a 	sxth.w	sl, sl
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f896:	eba3 0302 	sub.w	r3, r3, r2
 801f89a:	930a      	str	r3, [sp, #40]	; 0x28
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 801f89c:	f200 80f3 	bhi.w	801fa86 <lv_draw_sw_arc+0x3da>
 801f8a0:	42b7      	cmp	r7, r6
 801f8a2:	f080 80f0 	bcs.w	801fa86 <lv_draw_sw_arc+0x3da>
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f8a6:	886b      	ldrh	r3, [r5, #2]
 801f8a8:	b238      	sxth	r0, r7
 801f8aa:	930d      	str	r3, [sp, #52]	; 0x34
 801f8ac:	f7f2 fefa 	bl	80126a4 <lv_trigo_sin>
 801f8b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8b2:	4358      	muls	r0, r3
 801f8b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f8b6:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f8ba:	4650      	mov	r0, sl
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f8bc:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f8c0:	882b      	ldrh	r3, [r5, #0]
 801f8c2:	930d      	str	r3, [sp, #52]	; 0x34
 801f8c4:	f7f2 feee 	bl	80126a4 <lv_trigo_sin>
 801f8c8:	9b02      	ldr	r3, [sp, #8]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801f8ca:	f8b5 a002 	ldrh.w	sl, [r5, #2]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f8ce:	4358      	muls	r0, r3
 801f8d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f8d2:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801f8d6:	b230      	sxth	r0, r6
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f8d8:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801f8dc:	f7f2 fee2 	bl	80126a4 <lv_trigo_sin>
 801f8e0:	9b02      	ldr	r3, [sp, #8]
 801f8e2:	4358      	muls	r0, r3
 801f8e4:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f8e8:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 801f8ec:	b200      	sxth	r0, r0
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801f8ee:	f8ad a092 	strh.w	sl, [sp, #146]	; 0x92
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f8f2:	f8b5 a000 	ldrh.w	sl, [r5]
 801f8f6:	f7f2 fed5 	bl	80126a4 <lv_trigo_sin>
 801f8fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801f8fc:	4642      	mov	r2, r8
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f8fe:	4358      	muls	r0, r3
 801f900:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 801f904:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801f908:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 801f90c:	4651      	mov	r1, sl
 801f90e:	4650      	mov	r0, sl
 801f910:	f004 fce3 	bl	80242da <_lv_area_intersect>
        if(ok) {
 801f914:	2800      	cmp	r0, #0
 801f916:	d144      	bne.n	801f9a2 <lv_draw_sw_arc+0x2f6>
    q->draw_ctx->clip_area = clip_area_ori;
 801f918:	f8c4 8008 	str.w	r8, [r4, #8]
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 801f91c:	f1ab 0302 	sub.w	r3, fp, #2
 801f920:	b29b      	uxth	r3, r3
 801f922:	2b01      	cmp	r3, #1
 801f924:	f240 8345 	bls.w	801ffb2 <lv_draw_sw_arc+0x906>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801f928:	f1b9 0f03 	cmp.w	r9, #3
    q->draw_ctx->clip_area = clip_area_ori;
 801f92c:	f8c4 8008 	str.w	r8, [r4, #8]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801f930:	f040 8361 	bne.w	801fff6 <lv_draw_sw_arc+0x94a>
            quarter_area.x2 = q->center->x + q->radius;
 801f934:	f8b5 9000 	ldrh.w	r9, [r5]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f938:	f107 005a 	add.w	r0, r7, #90	; 0x5a
            quarter_area.x2 = q->center->x + q->radius;
 801f93c:	9b03      	ldr	r3, [sp, #12]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f93e:	b200      	sxth	r0, r0
            quarter_area.x2 = q->center->x + q->radius;
 801f940:	444b      	add	r3, r9
 801f942:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            quarter_area.y2 = q->center->y - 1;
 801f946:	886b      	ldrh	r3, [r5, #2]
 801f948:	3b01      	subs	r3, #1
 801f94a:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f94e:	f7f2 fea9 	bl	80126a4 <lv_trigo_sin>
 801f952:	9a04      	ldr	r2, [sp, #16]
 801f954:	9b02      	ldr	r3, [sp, #8]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f956:	886f      	ldrh	r7, [r5, #2]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f958:	1a9b      	subs	r3, r3, r2
 801f95a:	4343      	muls	r3, r0
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f95c:	9807      	ldr	r0, [sp, #28]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f95e:	eb09 39e3 	add.w	r9, r9, r3, asr #15
 801f962:	f8ad 908c 	strh.w	r9, [sp, #140]	; 0x8c
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f966:	f7f2 fe9d 	bl	80126a4 <lv_trigo_sin>
 801f96a:	9b02      	ldr	r3, [sp, #8]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801f96c:	4642      	mov	r2, r8
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f96e:	4358      	muls	r0, r3
 801f970:	eb07 37e0 	add.w	r7, r7, r0, asr #15
 801f974:	f8ad 708e 	strh.w	r7, [sp, #142]	; 0x8e
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801f978:	af23      	add	r7, sp, #140	; 0x8c
 801f97a:	4639      	mov	r1, r7
 801f97c:	4638      	mov	r0, r7
 801f97e:	f004 fcac 	bl	80242da <_lv_area_intersect>
            if(ok) {
 801f982:	b128      	cbz	r0, 801f990 <lv_draw_sw_arc+0x2e4>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801f984:	aa0f      	add	r2, sp, #60	; 0x3c
 801f986:	a929      	add	r1, sp, #164	; 0xa4
 801f988:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 801f98a:	60a7      	str	r7, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801f98c:	f7ff fd3f 	bl	801f40e <lv_draw_rect>
        if(q->end_quarter == 3) {
 801f990:	f1bb 0f03 	cmp.w	fp, #3
 801f994:	f040 8352 	bne.w	802003c <lv_draw_sw_arc+0x990>
 801f998:	e1a7      	b.n	801fcea <lv_draw_sw_arc+0x63e>
    while(end_angle >= 360) end_angle -= 360;
 801f99a:	f5a6 76b4 	sub.w	r6, r6, #360	; 0x168
 801f99e:	b2b6      	uxth	r6, r6
 801f9a0:	e740      	b.n	801f824 <lv_draw_sw_arc+0x178>
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801f9a2:	aa0f      	add	r2, sp, #60	; 0x3c
 801f9a4:	a929      	add	r1, sp, #164	; 0xa4
 801f9a6:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 801f9a8:	f8c4 a008 	str.w	sl, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801f9ac:	f7ff fd2f 	bl	801f40e <lv_draw_rect>
 801f9b0:	e7b2      	b.n	801f918 <lv_draw_sw_arc+0x26c>
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 801f9b2:	2e59      	cmp	r6, #89	; 0x59
 801f9b4:	f240 8098 	bls.w	801fae8 <lv_draw_sw_arc+0x43c>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 801f9b8:	45d9      	cmp	r9, fp
 801f9ba:	d102      	bne.n	801f9c2 <lv_draw_sw_arc+0x316>
 801f9bc:	42b7      	cmp	r7, r6
 801f9be:	f200 829c 	bhi.w	801fefa <lv_draw_sw_arc+0x84e>
 801f9c2:	f1b9 0f02 	cmp.w	r9, #2
 801f9c6:	f040 81af 	bne.w	801fd28 <lv_draw_sw_arc+0x67c>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 801f9ca:	f1bb 0f01 	cmp.w	fp, #1
 801f9ce:	f000 8294 	beq.w	801fefa <lv_draw_sw_arc+0x84e>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 801f9d2:	f1bb 0f02 	cmp.w	fp, #2
 801f9d6:	f040 8146 	bne.w	801fc66 <lv_draw_sw_arc+0x5ba>
 801f9da:	42b7      	cmp	r7, r6
 801f9dc:	f200 82e9 	bhi.w	801ffb2 <lv_draw_sw_arc+0x906>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801f9e0:	f1b9 0f02 	cmp.w	r9, #2
    q->draw_ctx->clip_area = clip_area_ori;
 801f9e4:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801f9e8:	f040 83d4 	bne.w	8020194 <lv_draw_sw_arc+0xae8>
 801f9ec:	f1bb 0f02 	cmp.w	fp, #2
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f9f0:	f9b5 3000 	ldrsh.w	r3, [r5]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801f9f4:	f040 8139 	bne.w	801fc6a <lv_draw_sw_arc+0x5be>
 801f9f8:	42b7      	cmp	r7, r6
 801f9fa:	f080 8136 	bcs.w	801fc6a <lv_draw_sw_arc+0x5be>
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f9fe:	f107 005a 	add.w	r0, r7, #90	; 0x5a
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa02:	9a04      	ldr	r2, [sp, #16]
 801fa04:	930a      	str	r3, [sp, #40]	; 0x28
 801fa06:	9b02      	ldr	r3, [sp, #8]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fa08:	b200      	sxth	r0, r0
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa0a:	eba3 0a02 	sub.w	sl, r3, r2
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fa0e:	f7f2 fe49 	bl	80126a4 <lv_trigo_sin>
 801fa12:	9b02      	ldr	r3, [sp, #8]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa14:	886f      	ldrh	r7, [r5, #2]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fa16:	4358      	muls	r0, r3
 801fa18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa1a:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa1e:	9807      	ldr	r0, [sp, #28]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fa20:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa24:	f7f2 fe3e 	bl	80126a4 <lv_trigo_sin>
 801fa28:	fb0a f000 	mul.w	r0, sl, r0
 801fa2c:	eb07 37e0 	add.w	r7, r7, r0, asr #15
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801fa30:	b230      	sxth	r0, r6
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa32:	f8ad 7092 	strh.w	r7, [sp, #146]	; 0x92
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801fa36:	886f      	ldrh	r7, [r5, #2]
 801fa38:	f7f2 fe34 	bl	80126a4 <lv_trigo_sin>
 801fa3c:	9b02      	ldr	r3, [sp, #8]
 801fa3e:	4358      	muls	r0, r3
 801fa40:	eb07 37e0 	add.w	r7, r7, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa44:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 801fa48:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801fa4a:	f8ad 708e 	strh.w	r7, [sp, #142]	; 0x8e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa4e:	882f      	ldrh	r7, [r5, #0]
 801fa50:	f7f2 fe28 	bl	80126a4 <lv_trigo_sin>
 801fa54:	fb0a f000 	mul.w	r0, sl, r0
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fa58:	4642      	mov	r2, r8
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa5a:	eb07 37e0 	add.w	r7, r7, r0, asr #15
 801fa5e:	f8ad 7090 	strh.w	r7, [sp, #144]	; 0x90
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fa62:	af23      	add	r7, sp, #140	; 0x8c
 801fa64:	4639      	mov	r1, r7
 801fa66:	4638      	mov	r0, r7
 801fa68:	f004 fc37 	bl	80242da <_lv_area_intersect>
        if(ok) {
 801fa6c:	2800      	cmp	r0, #0
 801fa6e:	f040 838a 	bne.w	8020186 <lv_draw_sw_arc+0xada>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 801fa72:	f1b9 0f02 	cmp.w	r9, #2
    q->draw_ctx->clip_area = clip_area_ori;
 801fa76:	f8c4 8008 	str.w	r8, [r4, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 801fa7a:	f040 83fd 	bne.w	8020278 <lv_draw_sw_arc+0xbcc>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 801fa7e:	2e59      	cmp	r6, #89	; 0x59
 801fa80:	f240 83df 	bls.w	8020242 <lv_draw_sw_arc+0xb96>
 801fa84:	e2da      	b.n	802003c <lv_draw_sw_arc+0x990>
            quarter_area.x1 = q->center->x;
 801fa86:	882b      	ldrh	r3, [r5, #0]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa88:	b238      	sxth	r0, r7
            quarter_area.y2 = q->center->y + q->radius;
 801fa8a:	9a03      	ldr	r2, [sp, #12]
            quarter_area.x1 = q->center->x;
 801fa8c:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            quarter_area.y2 = q->center->y + q->radius;
 801fa90:	886b      	ldrh	r3, [r5, #2]
 801fa92:	441a      	add	r2, r3
 801fa94:	930d      	str	r3, [sp, #52]	; 0x34
 801fa96:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa9a:	f7f2 fe03 	bl	80126a4 <lv_trigo_sin>
 801fa9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801faa0:	4358      	muls	r0, r3
 801faa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801faa4:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801faa8:	4650      	mov	r0, sl
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801faaa:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801faae:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fab2:	882b      	ldrh	r3, [r5, #0]
 801fab4:	930a      	str	r3, [sp, #40]	; 0x28
 801fab6:	f7f2 fdf5 	bl	80126a4 <lv_trigo_sin>
 801faba:	9b02      	ldr	r3, [sp, #8]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fabc:	4642      	mov	r2, r8
 801fabe:	4651      	mov	r1, sl
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fac0:	4358      	muls	r0, r3
 801fac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fac4:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fac8:	4650      	mov	r0, sl
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801faca:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801face:	f004 fc04 	bl	80242da <_lv_area_intersect>
            if(ok) {
 801fad2:	b130      	cbz	r0, 801fae2 <lv_draw_sw_arc+0x436>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fad4:	aa0f      	add	r2, sp, #60	; 0x3c
 801fad6:	a929      	add	r1, sp, #164	; 0xa4
 801fad8:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 801fada:	f8c4 a008 	str.w	sl, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fade:	f7ff fc96 	bl	801f40e <lv_draw_rect>
        if(q->end_quarter == 0) {
 801fae2:	2e59      	cmp	r6, #89	; 0x59
 801fae4:	f200 8243 	bhi.w	801ff6e <lv_draw_sw_arc+0x8c2>
            quarter_area.x2 = q->center->x + q->radius;
 801fae8:	9a03      	ldr	r2, [sp, #12]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801faea:	b230      	sxth	r0, r6
            quarter_area.x2 = q->center->x + q->radius;
 801faec:	882b      	ldrh	r3, [r5, #0]
            quarter_area.y1 = q->center->y;
 801faee:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
            quarter_area.x2 = q->center->x + q->radius;
 801faf2:	4413      	add	r3, r2
            quarter_area.y1 = q->center->y;
 801faf4:	f8ad a08e 	strh.w	sl, [sp, #142]	; 0x8e
            quarter_area.x2 = q->center->x + q->radius;
 801faf8:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801fafc:	f7f2 fdd2 	bl	80126a4 <lv_trigo_sin>
 801fb00:	9b02      	ldr	r3, [sp, #8]
 801fb02:	4358      	muls	r0, r3
 801fb04:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fb08:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 801fb0c:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801fb0e:	f8ad a092 	strh.w	sl, [sp, #146]	; 0x92
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fb12:	f8b5 a000 	ldrh.w	sl, [r5]
 801fb16:	f7f2 fdc5 	bl	80126a4 <lv_trigo_sin>
 801fb1a:	9a04      	ldr	r2, [sp, #16]
 801fb1c:	9b02      	ldr	r3, [sp, #8]
 801fb1e:	1a9b      	subs	r3, r3, r2
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fb20:	4642      	mov	r2, r8
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fb22:	4343      	muls	r3, r0
 801fb24:	eb0a 3ae3 	add.w	sl, sl, r3, asr #15
 801fb28:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fb2c:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 801fb30:	4651      	mov	r1, sl
 801fb32:	4650      	mov	r0, sl
 801fb34:	f004 fbd1 	bl	80242da <_lv_area_intersect>
            if(ok) {
 801fb38:	2800      	cmp	r0, #0
 801fb3a:	f040 808c 	bne.w	801fc56 <lv_draw_sw_arc+0x5aa>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801fb3e:	f1b9 0f01 	cmp.w	r9, #1
    q->draw_ctx->clip_area = clip_area_ori;
 801fb42:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801fb46:	f040 8225 	bne.w	801ff94 <lv_draw_sw_arc+0x8e8>
            quarter_area.x1 = q->center->x - q->radius;
 801fb4a:	9a03      	ldr	r2, [sp, #12]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fb4c:	b238      	sxth	r0, r7
            quarter_area.x1 = q->center->x - q->radius;
 801fb4e:	882b      	ldrh	r3, [r5, #0]
            quarter_area.y1 = q->center->y;
 801fb50:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
            quarter_area.x1 = q->center->x - q->radius;
 801fb54:	1a9b      	subs	r3, r3, r2
            quarter_area.y1 = q->center->y;
 801fb56:	f8ad a08e 	strh.w	sl, [sp, #142]	; 0x8e
            quarter_area.x1 = q->center->x - q->radius;
 801fb5a:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fb5e:	f7f2 fda1 	bl	80126a4 <lv_trigo_sin>
 801fb62:	9b02      	ldr	r3, [sp, #8]
 801fb64:	4358      	muls	r0, r3
 801fb66:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fb6a:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 801fb6e:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fb70:	f8ad a092 	strh.w	sl, [sp, #146]	; 0x92
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fb74:	f8b5 a000 	ldrh.w	sl, [r5]
 801fb78:	f7f2 fd94 	bl	80126a4 <lv_trigo_sin>
 801fb7c:	9a04      	ldr	r2, [sp, #16]
 801fb7e:	9b02      	ldr	r3, [sp, #8]
 801fb80:	1a9b      	subs	r3, r3, r2
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fb82:	4642      	mov	r2, r8
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fb84:	4343      	muls	r3, r0
 801fb86:	eb0a 3ae3 	add.w	sl, sl, r3, asr #15
 801fb8a:	f8ad a090 	strh.w	sl, [sp, #144]	; 0x90
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fb8e:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 801fb92:	4651      	mov	r1, sl
 801fb94:	4650      	mov	r0, sl
 801fb96:	f004 fba0 	bl	80242da <_lv_area_intersect>
            if(ok) {
 801fb9a:	b130      	cbz	r0, 801fbaa <lv_draw_sw_arc+0x4fe>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fb9c:	aa0f      	add	r2, sp, #60	; 0x3c
 801fb9e:	a929      	add	r1, sp, #164	; 0xa4
 801fba0:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 801fba2:	f8c4 a008 	str.w	sl, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fba6:	f7ff fc32 	bl	801f40e <lv_draw_rect>
        if(q->end_quarter == 1) {
 801fbaa:	f1bb 0f01 	cmp.w	fp, #1
 801fbae:	f040 832a 	bne.w	8020206 <lv_draw_sw_arc+0xb5a>
            quarter_area.x2 = q->center->x - 1;
 801fbb2:	882b      	ldrh	r3, [r5, #0]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fbb4:	b230      	sxth	r0, r6
            quarter_area.y2 = q->center->y + q->radius;
 801fbb6:	f8b5 a002 	ldrh.w	sl, [r5, #2]
            quarter_area.x2 = q->center->x - 1;
 801fbba:	3b01      	subs	r3, #1
 801fbbc:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            quarter_area.y2 = q->center->y + q->radius;
 801fbc0:	9b03      	ldr	r3, [sp, #12]
 801fbc2:	4453      	add	r3, sl
 801fbc4:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fbc8:	f7f2 fd6c 	bl	80126a4 <lv_trigo_sin>
 801fbcc:	9a04      	ldr	r2, [sp, #16]
 801fbce:	9b02      	ldr	r3, [sp, #8]
 801fbd0:	1a9b      	subs	r3, r3, r2
 801fbd2:	4343      	muls	r3, r0
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fbd4:	f106 005a 	add.w	r0, r6, #90	; 0x5a
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fbd8:	eb0a 3ae3 	add.w	sl, sl, r3, asr #15
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fbdc:	b200      	sxth	r0, r0
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fbde:	f8ad a08e 	strh.w	sl, [sp, #142]	; 0x8e
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fbe2:	f8b5 a000 	ldrh.w	sl, [r5]
 801fbe6:	f7f2 fd5d 	bl	80126a4 <lv_trigo_sin>
 801fbea:	9b02      	ldr	r3, [sp, #8]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fbec:	4642      	mov	r2, r8
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fbee:	4358      	muls	r0, r3
 801fbf0:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 801fbf4:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fbf8:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 801fbfc:	4651      	mov	r1, sl
 801fbfe:	4650      	mov	r0, sl
 801fc00:	f004 fb6b 	bl	80242da <_lv_area_intersect>
            if(ok) {
 801fc04:	2800      	cmp	r0, #0
 801fc06:	f040 81bd 	bne.w	801ff84 <lv_draw_sw_arc+0x8d8>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801fc0a:	f1b9 0f02 	cmp.w	r9, #2
    q->draw_ctx->clip_area = clip_area_ori;
 801fc0e:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801fc12:	d02a      	beq.n	801fc6a <lv_draw_sw_arc+0x5be>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 801fc14:	45d9      	cmp	r9, fp
 801fc16:	d102      	bne.n	801fc1e <lv_draw_sw_arc+0x572>
 801fc18:	42b7      	cmp	r7, r6
 801fc1a:	f200 8101 	bhi.w	801fe20 <lv_draw_sw_arc+0x774>
 801fc1e:	2f59      	cmp	r7, #89	; 0x59
 801fc20:	f200 80d1 	bhi.w	801fdc6 <lv_draw_sw_arc+0x71a>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801fc24:	f1bb 0f03 	cmp.w	fp, #3
 801fc28:	f000 80fa 	beq.w	801fe20 <lv_draw_sw_arc+0x774>
 801fc2c:	f1b9 0f01 	cmp.w	r9, #1
 801fc30:	f000 82fb 	beq.w	802022a <lv_draw_sw_arc+0xb7e>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fc34:	f1b9 0f03 	cmp.w	r9, #3
    q->draw_ctx->clip_area = clip_area_ori;
 801fc38:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fc3c:	f43f ae7a 	beq.w	801f934 <lv_draw_sw_arc+0x288>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 801fc40:	45d9      	cmp	r9, fp
 801fc42:	f040 81fb 	bne.w	802003c <lv_draw_sw_arc+0x990>
 801fc46:	42b7      	cmp	r7, r6
 801fc48:	f200 82fb 	bhi.w	8020242 <lv_draw_sw_arc+0xb96>
 801fc4c:	f1b9 0f02 	cmp.w	r9, #2
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 801fc50:	f040 81f4 	bne.w	802003c <lv_draw_sw_arc+0x990>
 801fc54:	e713      	b.n	801fa7e <lv_draw_sw_arc+0x3d2>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fc56:	aa0f      	add	r2, sp, #60	; 0x3c
 801fc58:	a929      	add	r1, sp, #164	; 0xa4
 801fc5a:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 801fc5c:	f8c4 a008 	str.w	sl, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fc60:	f7ff fbd5 	bl	801f40e <lv_draw_rect>
 801fc64:	e76b      	b.n	801fb3e <lv_draw_sw_arc+0x492>
    q->draw_ctx->clip_area = clip_area_ori;
 801fc66:	f8c4 8008 	str.w	r8, [r4, #8]
            quarter_area.x2 = q->center->x - 1;
 801fc6a:	f8b5 a000 	ldrh.w	sl, [r5]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fc6e:	f107 005a 	add.w	r0, r7, #90	; 0x5a
            quarter_area.y1 = q->center->y - q->radius;
 801fc72:	9a03      	ldr	r2, [sp, #12]
            quarter_area.x2 = q->center->x - 1;
 801fc74:	f10a 33ff 	add.w	r3, sl, #4294967295
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fc78:	b200      	sxth	r0, r0
            quarter_area.x2 = q->center->x - 1;
 801fc7a:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            quarter_area.y1 = q->center->y - q->radius;
 801fc7e:	886b      	ldrh	r3, [r5, #2]
 801fc80:	1a9b      	subs	r3, r3, r2
 801fc82:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fc86:	f7f2 fd0d 	bl	80126a4 <lv_trigo_sin>
 801fc8a:	9b02      	ldr	r3, [sp, #8]
 801fc8c:	4358      	muls	r0, r3
 801fc8e:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fc92:	b238      	sxth	r0, r7
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fc94:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fc98:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 801fc9c:	f7f2 fd02 	bl	80126a4 <lv_trigo_sin>
 801fca0:	9a04      	ldr	r2, [sp, #16]
 801fca2:	9b02      	ldr	r3, [sp, #8]
 801fca4:	1a9b      	subs	r3, r3, r2
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fca6:	4642      	mov	r2, r8
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fca8:	4343      	muls	r3, r0
 801fcaa:	eb0a 3ae3 	add.w	sl, sl, r3, asr #15
 801fcae:	f8ad a092 	strh.w	sl, [sp, #146]	; 0x92
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fcb2:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 801fcb6:	4651      	mov	r1, sl
 801fcb8:	4650      	mov	r0, sl
 801fcba:	f004 fb0e 	bl	80242da <_lv_area_intersect>
            if(ok) {
 801fcbe:	b130      	cbz	r0, 801fcce <lv_draw_sw_arc+0x622>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fcc0:	aa0f      	add	r2, sp, #60	; 0x3c
 801fcc2:	a929      	add	r1, sp, #164	; 0xa4
 801fcc4:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 801fcc6:	f8c4 a008 	str.w	sl, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fcca:	f7ff fba0 	bl	801f40e <lv_draw_rect>
        if(q->end_quarter == 2) {
 801fcce:	f1bb 0f02 	cmp.w	fp, #2
 801fcd2:	f000 8263 	beq.w	802019c <lv_draw_sw_arc+0xaf0>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 801fcd6:	f1bb 0f03 	cmp.w	fp, #3
    q->draw_ctx->clip_area = clip_area_ori;
 801fcda:	f8c4 8008 	str.w	r8, [r4, #8]
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 801fcde:	f040 828e 	bne.w	80201fe <lv_draw_sw_arc+0xb52>
        if(q->start_quarter == 3) {
 801fce2:	f1b9 0f03 	cmp.w	r9, #3
 801fce6:	f43f ae25 	beq.w	801f934 <lv_draw_sw_arc+0x288>
            quarter_area.y1 = q->center->y - q->radius;
 801fcea:	9a03      	ldr	r2, [sp, #12]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fcec:	f106 005a 	add.w	r0, r6, #90	; 0x5a
            quarter_area.y1 = q->center->y - q->radius;
 801fcf0:	886b      	ldrh	r3, [r5, #2]
            quarter_area.x1 = q->center->x;
 801fcf2:	f9b5 7000 	ldrsh.w	r7, [r5]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fcf6:	b200      	sxth	r0, r0
            quarter_area.y1 = q->center->y - q->radius;
 801fcf8:	1a9b      	subs	r3, r3, r2
            quarter_area.x1 = q->center->x;
 801fcfa:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
            quarter_area.y1 = q->center->y - q->radius;
 801fcfe:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fd02:	f7f2 fccf 	bl	80126a4 <lv_trigo_sin>
 801fd06:	9b02      	ldr	r3, [sp, #8]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fd08:	886e      	ldrh	r6, [r5, #2]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fd0a:	4358      	muls	r0, r3
 801fd0c:	eb07 37e0 	add.w	r7, r7, r0, asr #15
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fd10:	9809      	ldr	r0, [sp, #36]	; 0x24
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fd12:	f8ad 7090 	strh.w	r7, [sp, #144]	; 0x90
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fd16:	f7f2 fcc5 	bl	80126a4 <lv_trigo_sin>
 801fd1a:	9b02      	ldr	r3, [sp, #8]
 801fd1c:	9a04      	ldr	r2, [sp, #16]
 801fd1e:	1a9b      	subs	r3, r3, r2
 801fd20:	4343      	muls	r3, r0
 801fd22:	eb06 36e3 	add.w	r6, r6, r3, asr #15
 801fd26:	e0d6      	b.n	801fed6 <lv_draw_sw_arc+0x82a>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 801fd28:	f1b9 0f03 	cmp.w	r9, #3
 801fd2c:	d068      	beq.n	801fe00 <lv_draw_sw_arc+0x754>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801fd2e:	f1bb 0f01 	cmp.w	fp, #1
 801fd32:	f47f af0a 	bne.w	801fb4a <lv_draw_sw_arc+0x49e>
 801fd36:	42b7      	cmp	r7, r6
 801fd38:	f4bf af07 	bcs.w	801fb4a <lv_draw_sw_arc+0x49e>
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fd3c:	b238      	sxth	r0, r7
 801fd3e:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 801fd42:	f7f2 fcaf 	bl	80126a4 <lv_trigo_sin>
 801fd46:	9b02      	ldr	r3, [sp, #8]
 801fd48:	4358      	muls	r0, r3
 801fd4a:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fd4e:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 801fd52:	b200      	sxth	r0, r0
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fd54:	f8ad a092 	strh.w	sl, [sp, #146]	; 0x92
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fd58:	f8b5 a000 	ldrh.w	sl, [r5]
 801fd5c:	f7f2 fca2 	bl	80126a4 <lv_trigo_sin>
 801fd60:	9a04      	ldr	r2, [sp, #16]
 801fd62:	9b02      	ldr	r3, [sp, #8]
 801fd64:	1a9b      	subs	r3, r3, r2
 801fd66:	4358      	muls	r0, r3
 801fd68:	930a      	str	r3, [sp, #40]	; 0x28
 801fd6a:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fd6e:	b230      	sxth	r0, r6
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fd70:	f8ad a090 	strh.w	sl, [sp, #144]	; 0x90
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fd74:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 801fd78:	f7f2 fc94 	bl	80126a4 <lv_trigo_sin>
 801fd7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd7e:	4358      	muls	r0, r3
 801fd80:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fd84:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 801fd88:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fd8a:	f8ad a08e 	strh.w	sl, [sp, #142]	; 0x8e
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fd8e:	f8b5 a000 	ldrh.w	sl, [r5]
 801fd92:	f7f2 fc87 	bl	80126a4 <lv_trigo_sin>
 801fd96:	9b02      	ldr	r3, [sp, #8]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fd98:	4642      	mov	r2, r8
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fd9a:	4358      	muls	r0, r3
 801fd9c:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 801fda0:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fda4:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 801fda8:	4651      	mov	r1, sl
 801fdaa:	4650      	mov	r0, sl
 801fdac:	f004 fa95 	bl	80242da <_lv_area_intersect>
        if(ok) {
 801fdb0:	2800      	cmp	r0, #0
 801fdb2:	f040 80d4 	bne.w	801ff5e <lv_draw_sw_arc+0x8b2>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801fdb6:	f1b9 0f02 	cmp.w	r9, #2
    q->draw_ctx->clip_area = clip_area_ori;
 801fdba:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801fdbe:	f43f af54 	beq.w	801fc6a <lv_draw_sw_arc+0x5be>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 801fdc2:	42b7      	cmp	r7, r6
 801fdc4:	d82c      	bhi.n	801fe20 <lv_draw_sw_arc+0x774>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801fdc6:	f1b9 0f01 	cmp.w	r9, #1
 801fdca:	f000 824b 	beq.w	8020264 <lv_draw_sw_arc+0xbb8>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fdce:	f1b9 0f03 	cmp.w	r9, #3
    q->draw_ctx->clip_area = clip_area_ori;
 801fdd2:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fdd6:	d048      	beq.n	801fe6a <lv_draw_sw_arc+0x7be>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 801fdd8:	f1bb 0f03 	cmp.w	fp, #3
 801fddc:	d085      	beq.n	801fcea <lv_draw_sw_arc+0x63e>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 801fdde:	45d9      	cmp	r9, fp
 801fde0:	d106      	bne.n	801fdf0 <lv_draw_sw_arc+0x744>
 801fde2:	42b7      	cmp	r7, r6
 801fde4:	f200 822d 	bhi.w	8020242 <lv_draw_sw_arc+0xb96>
 801fde8:	f1b9 0f02 	cmp.w	r9, #2
 801fdec:	f040 8244 	bne.w	8020278 <lv_draw_sw_arc+0xbcc>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 801fdf0:	2e59      	cmp	r6, #89	; 0x59
 801fdf2:	f240 8226 	bls.w	8020242 <lv_draw_sw_arc+0xb96>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 801fdf6:	f1bb 0f01 	cmp.w	fp, #1
 801fdfa:	f040 811f 	bne.w	802003c <lv_draw_sw_arc+0x990>
 801fdfe:	e220      	b.n	8020242 <lv_draw_sw_arc+0xb96>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 801fe00:	f1bb 0f03 	cmp.w	fp, #3
 801fe04:	d179      	bne.n	801fefa <lv_draw_sw_arc+0x84e>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 801fe06:	42b7      	cmp	r7, r6
 801fe08:	f200 80d3 	bhi.w	801ffb2 <lv_draw_sw_arc+0x906>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 801fe0c:	f1bb 0f03 	cmp.w	fp, #3
    q->draw_ctx->clip_area = clip_area_ori;
 801fe10:	f8c4 8008 	str.w	r8, [r4, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 801fe14:	f47f ad8e 	bne.w	801f934 <lv_draw_sw_arc+0x288>
 801fe18:	42b7      	cmp	r7, r6
 801fe1a:	d801      	bhi.n	801fe20 <lv_draw_sw_arc+0x774>
 801fe1c:	2f59      	cmp	r7, #89	; 0x59
 801fe1e:	d8d6      	bhi.n	801fdce <lv_draw_sw_arc+0x722>
        quarter_area.x1 = q->center->x - q->radius;
 801fe20:	882a      	ldrh	r2, [r5, #0]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fe22:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
        quarter_area.x1 = q->center->x - q->radius;
 801fe26:	9b03      	ldr	r3, [sp, #12]
        quarter_area.y1 = q->center->y - q->radius;
 801fe28:	9903      	ldr	r1, [sp, #12]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fe2a:	4650      	mov	r0, sl
        quarter_area.x1 = q->center->x - q->radius;
 801fe2c:	1ad3      	subs	r3, r2, r3
        quarter_area.x2 = q->center->x - 1;
 801fe2e:	3a01      	subs	r2, #1
        quarter_area.x1 = q->center->x - q->radius;
 801fe30:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        quarter_area.y1 = q->center->y - q->radius;
 801fe34:	886b      	ldrh	r3, [r5, #2]
        quarter_area.x2 = q->center->x - 1;
 801fe36:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fe3a:	4642      	mov	r2, r8
        quarter_area.y1 = q->center->y - q->radius;
 801fe3c:	1a59      	subs	r1, r3, r1
        quarter_area.y2 = q->center->y - 1;
 801fe3e:	3b01      	subs	r3, #1
        quarter_area.y1 = q->center->y - q->radius;
 801fe40:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fe44:	4651      	mov	r1, sl
        quarter_area.y2 = q->center->y - 1;
 801fe46:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fe4a:	f004 fa46 	bl	80242da <_lv_area_intersect>
        if(ok) {
 801fe4e:	b130      	cbz	r0, 801fe5e <lv_draw_sw_arc+0x7b2>
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fe50:	aa0f      	add	r2, sp, #60	; 0x3c
 801fe52:	a929      	add	r1, sp, #164	; 0xa4
 801fe54:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 801fe56:	f8c4 a008 	str.w	sl, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fe5a:	f7ff fad8 	bl	801f40e <lv_draw_rect>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fe5e:	f1b9 0f03 	cmp.w	r9, #3
    q->draw_ctx->clip_area = clip_area_ori;
 801fe62:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fe66:	f040 8202 	bne.w	802026e <lv_draw_sw_arc+0xbc2>
 801fe6a:	f1bb 0f03 	cmp.w	fp, #3
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fe6e:	f9b5 a000 	ldrsh.w	sl, [r5]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fe72:	f47f ad5f 	bne.w	801f934 <lv_draw_sw_arc+0x288>
 801fe76:	42b7      	cmp	r7, r6
 801fe78:	f4bf ad5c 	bcs.w	801f934 <lv_draw_sw_arc+0x288>
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fe7c:	9a04      	ldr	r2, [sp, #16]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fe7e:	f107 005a 	add.w	r0, r7, #90	; 0x5a
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fe82:	9b02      	ldr	r3, [sp, #8]
 801fe84:	b200      	sxth	r0, r0
 801fe86:	eba3 0902 	sub.w	r9, r3, r2
 801fe8a:	f7f2 fc0b 	bl	80126a4 <lv_trigo_sin>
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fe8e:	886f      	ldrh	r7, [r5, #2]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fe90:	fb09 f000 	mul.w	r0, r9, r0
 801fe94:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fe98:	9807      	ldr	r0, [sp, #28]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fe9a:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fe9e:	f7f2 fc01 	bl	80126a4 <lv_trigo_sin>
 801fea2:	9b02      	ldr	r3, [sp, #8]
 801fea4:	4358      	muls	r0, r3
 801fea6:	eb07 37e0 	add.w	r7, r7, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801feaa:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 801feae:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801feb0:	f8ad 708e 	strh.w	r7, [sp, #142]	; 0x8e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801feb4:	882f      	ldrh	r7, [r5, #0]
 801feb6:	f7f2 fbf5 	bl	80126a4 <lv_trigo_sin>
 801feba:	9b02      	ldr	r3, [sp, #8]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801febc:	886e      	ldrh	r6, [r5, #2]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801febe:	4358      	muls	r0, r3
 801fec0:	eb07 37e0 	add.w	r7, r7, r0, asr #15
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fec4:	9809      	ldr	r0, [sp, #36]	; 0x24
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fec6:	f8ad 7090 	strh.w	r7, [sp, #144]	; 0x90
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801feca:	f7f2 fbeb 	bl	80126a4 <lv_trigo_sin>
 801fece:	fb09 f000 	mul.w	r0, r9, r0
 801fed2:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 801fed6:	f8ad 6092 	strh.w	r6, [sp, #146]	; 0x92
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801feda:	a923      	add	r1, sp, #140	; 0x8c
 801fedc:	4642      	mov	r2, r8
 801fede:	4608      	mov	r0, r1
 801fee0:	f004 f9fb 	bl	80242da <_lv_area_intersect>
        if(ok) {
 801fee4:	2800      	cmp	r0, #0
 801fee6:	f000 80a9 	beq.w	802003c <lv_draw_sw_arc+0x990>
            q->draw_ctx->clip_area = &quarter_area;
 801feea:	ab23      	add	r3, sp, #140	; 0x8c
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801feec:	aa0f      	add	r2, sp, #60	; 0x3c
 801feee:	a929      	add	r1, sp, #164	; 0xa4
 801fef0:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 801fef2:	60a3      	str	r3, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fef4:	f7ff fa8b 	bl	801f40e <lv_draw_rect>
 801fef8:	e0a0      	b.n	802003c <lv_draw_sw_arc+0x990>
        quarter_area.x2 = q->center->x + q->radius;
 801fefa:	9903      	ldr	r1, [sp, #12]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fefc:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
        quarter_area.x1 = q->center->x;
 801ff00:	f9b5 2000 	ldrsh.w	r2, [r5]
        quarter_area.y1 = q->center->y;
 801ff04:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801ff08:	4650      	mov	r0, sl
        quarter_area.x1 = q->center->x;
 801ff0a:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
        quarter_area.x2 = q->center->x + q->radius;
 801ff0e:	440a      	add	r2, r1
        quarter_area.y1 = q->center->y;
 801ff10:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        quarter_area.y2 = q->center->y + q->radius;
 801ff14:	440b      	add	r3, r1
        quarter_area.x2 = q->center->x + q->radius;
 801ff16:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801ff1a:	4651      	mov	r1, sl
 801ff1c:	4642      	mov	r2, r8
        quarter_area.y2 = q->center->y + q->radius;
 801ff1e:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801ff22:	f004 f9da 	bl	80242da <_lv_area_intersect>
        if(ok) {
 801ff26:	b130      	cbz	r0, 801ff36 <lv_draw_sw_arc+0x88a>
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801ff28:	aa0f      	add	r2, sp, #60	; 0x3c
 801ff2a:	a929      	add	r1, sp, #164	; 0xa4
 801ff2c:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 801ff2e:	f8c4 a008 	str.w	sl, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801ff32:	f7ff fa6c 	bl	801f40e <lv_draw_rect>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801ff36:	f1b9 0f01 	cmp.w	r9, #1
    q->draw_ctx->clip_area = clip_area_ori;
 801ff3a:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801ff3e:	f43f aef6 	beq.w	801fd2e <lv_draw_sw_arc+0x682>
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 801ff42:	f1bb 0f01 	cmp.w	fp, #1
 801ff46:	f43f ae34 	beq.w	801fbb2 <lv_draw_sw_arc+0x506>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 801ff4a:	45d9      	cmp	r9, fp
 801ff4c:	f040 8112 	bne.w	8020174 <lv_draw_sw_arc+0xac8>
 801ff50:	42b7      	cmp	r7, r6
 801ff52:	d82e      	bhi.n	801ffb2 <lv_draw_sw_arc+0x906>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801ff54:	f1b9 0f03 	cmp.w	r9, #3
 801ff58:	f47f ad48 	bne.w	801f9ec <lv_draw_sw_arc+0x340>
 801ff5c:	e75c      	b.n	801fe18 <lv_draw_sw_arc+0x76c>
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801ff5e:	aa0f      	add	r2, sp, #60	; 0x3c
 801ff60:	a929      	add	r1, sp, #164	; 0xa4
 801ff62:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 801ff64:	f8c4 a008 	str.w	sl, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801ff68:	f7ff fa51 	bl	801f40e <lv_draw_rect>
 801ff6c:	e723      	b.n	801fdb6 <lv_draw_sw_arc+0x70a>
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 801ff6e:	f1bb 0f01 	cmp.w	fp, #1
    q->draw_ctx->clip_area = clip_area_ori;
 801ff72:	f8c4 8008 	str.w	r8, [r4, #8]
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 801ff76:	f43f ae1c 	beq.w	801fbb2 <lv_draw_sw_arc+0x506>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 801ff7a:	2e59      	cmp	r6, #89	; 0x59
 801ff7c:	d819      	bhi.n	801ffb2 <lv_draw_sw_arc+0x906>
 801ff7e:	42b7      	cmp	r7, r6
 801ff80:	d817      	bhi.n	801ffb2 <lv_draw_sw_arc+0x906>
 801ff82:	e4cb      	b.n	801f91c <lv_draw_sw_arc+0x270>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801ff84:	aa0f      	add	r2, sp, #60	; 0x3c
 801ff86:	a929      	add	r1, sp, #164	; 0xa4
 801ff88:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 801ff8a:	f8c4 a008 	str.w	sl, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801ff8e:	f7ff fa3e 	bl	801f40e <lv_draw_rect>
 801ff92:	e63a      	b.n	801fc0a <lv_draw_sw_arc+0x55e>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 801ff94:	45d9      	cmp	r9, fp
 801ff96:	d101      	bne.n	801ff9c <lv_draw_sw_arc+0x8f0>
 801ff98:	42b7      	cmp	r7, r6
 801ff9a:	d80a      	bhi.n	801ffb2 <lv_draw_sw_arc+0x906>
 801ff9c:	2f59      	cmp	r7, #89	; 0x59
 801ff9e:	f67f acbd 	bls.w	801f91c <lv_draw_sw_arc+0x270>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801ffa2:	f1b9 0f03 	cmp.w	r9, #3
 801ffa6:	f47f ad1b 	bne.w	801f9e0 <lv_draw_sw_arc+0x334>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 801ffaa:	f1bb 0f02 	cmp.w	fp, #2
 801ffae:	f47f af2d 	bne.w	801fe0c <lv_draw_sw_arc+0x760>
        quarter_area.x1 = q->center->x - q->radius;
 801ffb2:	882a      	ldrh	r2, [r5, #0]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801ffb4:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
        quarter_area.x1 = q->center->x - q->radius;
 801ffb8:	9b03      	ldr	r3, [sp, #12]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801ffba:	4651      	mov	r1, sl
 801ffbc:	4650      	mov	r0, sl
        quarter_area.x1 = q->center->x - q->radius;
 801ffbe:	1ad3      	subs	r3, r2, r3
        quarter_area.x2 = q->center->x - 1;
 801ffc0:	3a01      	subs	r2, #1
        quarter_area.x1 = q->center->x - q->radius;
 801ffc2:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        quarter_area.x2 = q->center->x - 1;
 801ffc6:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
        quarter_area.y1 = q->center->y;
 801ffca:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
        quarter_area.y2 = q->center->y + q->radius;
 801ffce:	9a03      	ldr	r2, [sp, #12]
        quarter_area.y1 = q->center->y;
 801ffd0:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        quarter_area.y2 = q->center->y + q->radius;
 801ffd4:	4413      	add	r3, r2
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801ffd6:	4642      	mov	r2, r8
        quarter_area.y2 = q->center->y + q->radius;
 801ffd8:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801ffdc:	f004 f97d 	bl	80242da <_lv_area_intersect>
        if(ok) {
 801ffe0:	2800      	cmp	r0, #0
 801ffe2:	f43f acfd 	beq.w	801f9e0 <lv_draw_sw_arc+0x334>
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801ffe6:	aa0f      	add	r2, sp, #60	; 0x3c
 801ffe8:	a929      	add	r1, sp, #164	; 0xa4
 801ffea:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 801ffec:	f8c4 a008 	str.w	sl, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fff0:	f7ff fa0d 	bl	801f40e <lv_draw_rect>
 801fff4:	e4f4      	b.n	801f9e0 <lv_draw_sw_arc+0x334>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 801fff6:	45d9      	cmp	r9, fp
 801fff8:	d115      	bne.n	8020026 <lv_draw_sw_arc+0x97a>
 801fffa:	42b7      	cmp	r7, r6
 801fffc:	f63f af10 	bhi.w	801fe20 <lv_draw_sw_arc+0x774>
 8020000:	2f59      	cmp	r7, #89	; 0x59
 8020002:	f67f ae13 	bls.w	801fc2c <lv_draw_sw_arc+0x580>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8020006:	f1b9 0f01 	cmp.w	r9, #1
 802000a:	f47f aee0 	bne.w	801fdce <lv_draw_sw_arc+0x722>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 802000e:	2e59      	cmp	r6, #89	; 0x59
 8020010:	f67f af06 	bls.w	801fe20 <lv_draw_sw_arc+0x774>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8020014:	f1bb 0f01 	cmp.w	fp, #1
    q->draw_ctx->clip_area = clip_area_ori;
 8020018:	f8c4 8008 	str.w	r8, [r4, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 802001c:	d10e      	bne.n	802003c <lv_draw_sw_arc+0x990>
 802001e:	42b7      	cmp	r7, r6
 8020020:	f200 810f 	bhi.w	8020242 <lv_draw_sw_arc+0xb96>
 8020024:	e00a      	b.n	802003c <lv_draw_sw_arc+0x990>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8020026:	f1b9 0f01 	cmp.w	r9, #1
 802002a:	f000 80fe 	beq.w	802022a <lv_draw_sw_arc+0xb7e>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 802002e:	45d9      	cmp	r9, fp
 8020030:	f43f ae09 	beq.w	801fc46 <lv_draw_sw_arc+0x59a>
 8020034:	f1b9 0f02 	cmp.w	r9, #2
 8020038:	f43f aeda 	beq.w	801fdf0 <lv_draw_sw_arc+0x744>
    q->draw_ctx->clip_area = clip_area_ori;
 802003c:	f8c4 8008 	str.w	r8, [r4, #8]
    lv_draw_mask_free_param(&mask_angle_param);
 8020040:	a837      	add	r0, sp, #220	; 0xdc
 8020042:	f7ff f9a3 	bl	801f38c <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_out_param);
 8020046:	a81d      	add	r0, sp, #116	; 0x74
 8020048:	f7ff f9a0 	bl	801f38c <lv_draw_mask_free_param>
    if(mask_in_param_valid) {
 802004c:	9b08      	ldr	r3, [sp, #32]
 802004e:	b113      	cbz	r3, 8020056 <lv_draw_sw_arc+0x9aa>
        lv_draw_mask_free_param(&mask_in_param);
 8020050:	a817      	add	r0, sp, #92	; 0x5c
 8020052:	f7ff f99b 	bl	801f38c <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_angle_id);
 8020056:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020058:	f7e8 f95c 	bl	8008314 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 802005c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802005e:	f7e8 f959 	bl	8008314 <lv_draw_mask_remove_id>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8020062:	9b06      	ldr	r3, [sp, #24]
 8020064:	1c5a      	adds	r2, r3, #1
 8020066:	d002      	beq.n	802006e <lv_draw_sw_arc+0x9c2>
 8020068:	4618      	mov	r0, r3
 802006a:	f7e8 f953 	bl	8008314 <lv_draw_mask_remove_id>
    if(dsc->rounded) {
 802006e:	9b05      	ldr	r3, [sp, #20]
 8020070:	7b5b      	ldrb	r3, [r3, #13]
 8020072:	075b      	lsls	r3, r3, #29
 8020074:	f57f abc0 	bpl.w	801f7f8 <lv_draw_sw_arc+0x14c>
        get_rounded_area(start_angle, radius, width, &round_area);
 8020078:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 802007c:	ab13      	add	r3, sp, #76	; 0x4c
 802007e:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8020082:	4631      	mov	r1, r6
 8020084:	9807      	ldr	r0, [sp, #28]
 8020086:	463a      	mov	r2, r7
 8020088:	f7ff facd 	bl	801f626 <get_rounded_area>
        round_area.x1 += center->x;
 802008c:	882b      	ldrh	r3, [r5, #0]
 802008e:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8020092:	4641      	mov	r1, r8
 8020094:	a815      	add	r0, sp, #84	; 0x54
        round_area.x1 += center->x;
 8020096:	441a      	add	r2, r3
 8020098:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        round_area.x2 += center->x;
 802009c:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80200a0:	4413      	add	r3, r2
        round_area.y1 += center->y;
 80200a2:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
        round_area.x2 += center->x;
 80200a6:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        round_area.y1 += center->y;
 80200aa:	886b      	ldrh	r3, [r5, #2]
 80200ac:	441a      	add	r2, r3
 80200ae:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
        round_area.y2 += center->y;
 80200b2:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 80200b6:	4413      	add	r3, r2
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 80200b8:	aa13      	add	r2, sp, #76	; 0x4c
        round_area.y2 += center->y;
 80200ba:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 80200be:	f004 f90c 	bl	80242da <_lv_area_intersect>
 80200c2:	b1c0      	cbz	r0, 80200f6 <lv_draw_sw_arc+0xa4a>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 80200c4:	2300      	movs	r3, #0
 80200c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80200ca:	a913      	add	r1, sp, #76	; 0x4c
 80200cc:	a823      	add	r0, sp, #140	; 0x8c
 80200ce:	f7e8 fa63 	bl	8008598 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 80200d2:	2100      	movs	r1, #0
 80200d4:	a823      	add	r0, sp, #140	; 0x8c
 80200d6:	f7e8 f8e7 	bl	80082a8 <lv_draw_mask_add>
            draw_ctx->clip_area = &clip_area2;
 80200da:	ab15      	add	r3, sp, #84	; 0x54
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 80200dc:	4681      	mov	r9, r0
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 80200de:	aa0f      	add	r2, sp, #60	; 0x3c
 80200e0:	a929      	add	r1, sp, #164	; 0xa4
 80200e2:	4620      	mov	r0, r4
            draw_ctx->clip_area = &clip_area2;
 80200e4:	60a3      	str	r3, [r4, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 80200e6:	f7ff f992 	bl	801f40e <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 80200ea:	4648      	mov	r0, r9
 80200ec:	f7e8 f912 	bl	8008314 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 80200f0:	a823      	add	r0, sp, #140	; 0x8c
 80200f2:	f7ff f94b 	bl	801f38c <lv_draw_mask_free_param>
        get_rounded_area(end_angle, radius, width, &round_area);
 80200f6:	ab13      	add	r3, sp, #76	; 0x4c
 80200f8:	463a      	mov	r2, r7
 80200fa:	4631      	mov	r1, r6
 80200fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80200fe:	f7ff fa92 	bl	801f626 <get_rounded_area>
        round_area.x1 += center->x;
 8020102:	882b      	ldrh	r3, [r5, #0]
 8020104:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8020108:	4641      	mov	r1, r8
 802010a:	a815      	add	r0, sp, #84	; 0x54
        round_area.x1 += center->x;
 802010c:	441a      	add	r2, r3
 802010e:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        round_area.x2 += center->x;
 8020112:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8020116:	4413      	add	r3, r2
        round_area.y1 += center->y;
 8020118:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
        round_area.x2 += center->x;
 802011c:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        round_area.y1 += center->y;
 8020120:	886b      	ldrh	r3, [r5, #2]
 8020122:	441a      	add	r2, r3
 8020124:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
        round_area.y2 += center->y;
 8020128:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 802012c:	4413      	add	r3, r2
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 802012e:	aa13      	add	r2, sp, #76	; 0x4c
        round_area.y2 += center->y;
 8020130:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8020134:	f004 f8d1 	bl	80242da <_lv_area_intersect>
 8020138:	b1c0      	cbz	r0, 802016c <lv_draw_sw_arc+0xac0>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 802013a:	2300      	movs	r3, #0
 802013c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020140:	a913      	add	r1, sp, #76	; 0x4c
 8020142:	a823      	add	r0, sp, #140	; 0x8c
 8020144:	f7e8 fa28 	bl	8008598 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8020148:	2100      	movs	r1, #0
 802014a:	a823      	add	r0, sp, #140	; 0x8c
 802014c:	f7e8 f8ac 	bl	80082a8 <lv_draw_mask_add>
            draw_ctx->clip_area = &clip_area2;
 8020150:	ab15      	add	r3, sp, #84	; 0x54
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8020152:	4605      	mov	r5, r0
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8020154:	aa0f      	add	r2, sp, #60	; 0x3c
 8020156:	a929      	add	r1, sp, #164	; 0xa4
 8020158:	4620      	mov	r0, r4
            draw_ctx->clip_area = &clip_area2;
 802015a:	60a3      	str	r3, [r4, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 802015c:	f7ff f957 	bl	801f40e <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8020160:	4628      	mov	r0, r5
 8020162:	f7e8 f8d7 	bl	8008314 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8020166:	a823      	add	r0, sp, #140	; 0x8c
 8020168:	f7ff f910 	bl	801f38c <lv_draw_mask_free_param>
        draw_ctx->clip_area = clip_area_ori;
 802016c:	f8c4 8008 	str.w	r8, [r4, #8]
 8020170:	f7ff bb42 	b.w	801f7f8 <lv_draw_sw_arc+0x14c>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8020174:	f1b9 0f03 	cmp.w	r9, #3
 8020178:	f47f ac38 	bne.w	801f9ec <lv_draw_sw_arc+0x340>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 802017c:	f1bb 0f02 	cmp.w	fp, #2
 8020180:	f43f af17 	beq.w	801ffb2 <lv_draw_sw_arc+0x906>
 8020184:	e648      	b.n	801fe18 <lv_draw_sw_arc+0x76c>
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8020186:	aa0f      	add	r2, sp, #60	; 0x3c
 8020188:	a929      	add	r1, sp, #164	; 0xa4
 802018a:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 802018c:	60a7      	str	r7, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 802018e:	f7ff f93e 	bl	801f40e <lv_draw_rect>
 8020192:	e46e      	b.n	801fa72 <lv_draw_sw_arc+0x3c6>
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 8020194:	f1bb 0f02 	cmp.w	fp, #2
 8020198:	f47f ad3c 	bne.w	801fc14 <lv_draw_sw_arc+0x568>
            quarter_area.x1 = q->center->x - q->radius;
 802019c:	f8b5 a000 	ldrh.w	sl, [r5]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80201a0:	f106 005a 	add.w	r0, r6, #90	; 0x5a
            quarter_area.x1 = q->center->x - q->radius;
 80201a4:	9b03      	ldr	r3, [sp, #12]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80201a6:	b200      	sxth	r0, r0
            quarter_area.x1 = q->center->x - q->radius;
 80201a8:	ebaa 0303 	sub.w	r3, sl, r3
 80201ac:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            quarter_area.y2 = q->center->y - 1;
 80201b0:	886b      	ldrh	r3, [r5, #2]
 80201b2:	3b01      	subs	r3, #1
 80201b4:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80201b8:	f7f2 fa74 	bl	80126a4 <lv_trigo_sin>
 80201bc:	9a04      	ldr	r2, [sp, #16]
 80201be:	9b02      	ldr	r3, [sp, #8]
 80201c0:	1a9b      	subs	r3, r3, r2
 80201c2:	4343      	muls	r3, r0
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80201c4:	b230      	sxth	r0, r6
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80201c6:	eb0a 3ae3 	add.w	sl, sl, r3, asr #15
 80201ca:	f8ad a090 	strh.w	sl, [sp, #144]	; 0x90
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80201ce:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 80201d2:	f7f2 fa67 	bl	80126a4 <lv_trigo_sin>
 80201d6:	9b02      	ldr	r3, [sp, #8]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80201d8:	4642      	mov	r2, r8
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80201da:	4358      	muls	r0, r3
 80201dc:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 80201e0:	f8ad a08e 	strh.w	sl, [sp, #142]	; 0x8e
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80201e4:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 80201e8:	4651      	mov	r1, sl
 80201ea:	4650      	mov	r0, sl
 80201ec:	f004 f875 	bl	80242da <_lv_area_intersect>
            if(ok) {
 80201f0:	b998      	cbnz	r0, 802021a <lv_draw_sw_arc+0xb6e>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 80201f2:	f1b9 0f03 	cmp.w	r9, #3
    q->draw_ctx->clip_area = clip_area_ori;
 80201f6:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 80201fa:	f43f ab9b 	beq.w	801f934 <lv_draw_sw_arc+0x288>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 80201fe:	45d9      	cmp	r9, fp
 8020200:	f47f adf2 	bne.w	801fde8 <lv_draw_sw_arc+0x73c>
 8020204:	e5ed      	b.n	801fde2 <lv_draw_sw_arc+0x736>
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 8020206:	f1bb 0f02 	cmp.w	fp, #2
    q->draw_ctx->clip_area = clip_area_ori;
 802020a:	f8c4 8008 	str.w	r8, [r4, #8]
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 802020e:	f47f ad01 	bne.w	801fc14 <lv_draw_sw_arc+0x568>
        if(q->start_quarter == 2) {
 8020212:	f1b9 0f02 	cmp.w	r9, #2
 8020216:	d1c1      	bne.n	802019c <lv_draw_sw_arc+0xaf0>
 8020218:	e527      	b.n	801fc6a <lv_draw_sw_arc+0x5be>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 802021a:	aa0f      	add	r2, sp, #60	; 0x3c
 802021c:	a929      	add	r1, sp, #164	; 0xa4
 802021e:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 8020220:	f8c4 a008 	str.w	sl, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8020224:	f7ff f8f3 	bl	801f40e <lv_draw_rect>
    q->draw_ctx->clip_area = clip_area_ori;
 8020228:	e7e3      	b.n	80201f2 <lv_draw_sw_arc+0xb46>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 802022a:	2e59      	cmp	r6, #89	; 0x59
 802022c:	f67f adf8 	bls.w	801fe20 <lv_draw_sw_arc+0x774>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8020230:	f1bb 0f01 	cmp.w	fp, #1
    q->draw_ctx->clip_area = clip_area_ori;
 8020234:	f8c4 8008 	str.w	r8, [r4, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8020238:	f47f af00 	bne.w	802003c <lv_draw_sw_arc+0x990>
 802023c:	42b7      	cmp	r7, r6
 802023e:	f67f ac1e 	bls.w	801fa7e <lv_draw_sw_arc+0x3d2>
        quarter_area.y1 = q->center->y - q->radius;
 8020242:	886b      	ldrh	r3, [r5, #2]
 8020244:	9903      	ldr	r1, [sp, #12]
        quarter_area.x1 = q->center->x;
 8020246:	f9b5 2000 	ldrsh.w	r2, [r5]
        quarter_area.y1 = q->center->y - q->radius;
 802024a:	1a59      	subs	r1, r3, r1
        quarter_area.y2 = q->center->y - 1;
 802024c:	3b01      	subs	r3, #1
        quarter_area.x1 = q->center->x;
 802024e:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
        quarter_area.y1 = q->center->y - q->radius;
 8020252:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
        quarter_area.x2 = q->center->x + q->radius;
 8020256:	9903      	ldr	r1, [sp, #12]
        quarter_area.y2 = q->center->y - 1;
 8020258:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        quarter_area.x2 = q->center->x + q->radius;
 802025c:	440a      	add	r2, r1
 802025e:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8020262:	e63a      	b.n	801feda <lv_draw_sw_arc+0x82e>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8020264:	f1bb 0f03 	cmp.w	fp, #3
 8020268:	f43f adda 	beq.w	801fe20 <lv_draw_sw_arc+0x774>
 802026c:	e6cf      	b.n	802000e <lv_draw_sw_arc+0x962>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 802026e:	f1bb 0f03 	cmp.w	fp, #3
 8020272:	f43f ad3a 	beq.w	801fcea <lv_draw_sw_arc+0x63e>
 8020276:	e7c2      	b.n	80201fe <lv_draw_sw_arc+0xb52>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8020278:	f1b9 0f01 	cmp.w	r9, #1
 802027c:	e4e8      	b.n	801fc50 <lv_draw_sw_arc+0x5a4>
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 802027e:	aa0f      	add	r2, sp, #60	; 0x3c
 8020280:	a929      	add	r1, sp, #164	; 0xa4
 8020282:	4620      	mov	r0, r4
 8020284:	f7ff f8c3 	bl	801f40e <lv_draw_rect>
 8020288:	e6da      	b.n	8020040 <lv_draw_sw_arc+0x994>

0802028a <lv_color_mix>:
{
 802028a:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 802028c:	f3c1 1345 	ubfx	r3, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8020290:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8020294:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8020298:	f000 071f 	and.w	r7, r0, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 802029c:	4373      	muls	r3, r6
 802029e:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80202a2:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80202a6:	fb04 3302 	mla	r3, r4, r2, r3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80202aa:	f001 041f 	and.w	r4, r1, #31
 80202ae:	4374      	muls	r4, r6
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80202b0:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80202b2:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80202b6:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80202b8:	3480      	adds	r4, #128	; 0x80
    return ret;
 80202ba:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80202be:	436c      	muls	r4, r5
    return ret;
 80202c0:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 80202c4:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80202c8:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 80202cc:	4373      	muls	r3, r6
 80202ce:	fb00 3302 	mla	r3, r0, r2, r3
 80202d2:	3380      	adds	r3, #128	; 0x80
 80202d4:	436b      	muls	r3, r5
 80202d6:	0ddb      	lsrs	r3, r3, #23
}
 80202d8:	ea44 20c3 	orr.w	r0, r4, r3, lsl #11
 80202dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080202de <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 80202de:	460b      	mov	r3, r1

    if(opa <= LV_OPA_MIN) return bg;
 80202e0:	2a02      	cmp	r2, #2
 80202e2:	f000 0c1f 	and.w	ip, r0, #31
{
 80202e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202ea:	f3c0 1e45 	ubfx	lr, r0, #5, #6
 80202ee:	f3c0 28c4 	ubfx	r8, r0, #11, #5
 80202f2:	f003 061f 	and.w	r6, r3, #31
 80202f6:	f3c3 1545 	ubfx	r5, r3, #5, #6
 80202fa:	f3c3 24c4 	ubfx	r4, r3, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 80202fe:	d802      	bhi.n	8020306 <color_blend_true_color_additive+0x28>
 8020300:	4608      	mov	r0, r1
#endif

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 8020302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = bg.ch.red + fg.ch.red;
 8020306:	eb04 0308 	add.w	r3, r4, r8
    tmp = bg.ch.green + fg.ch.green;
 802030a:	eb05 040e 	add.w	r4, r5, lr
    tmp = bg.ch.blue + fg.ch.blue;
 802030e:	eb06 050c 	add.w	r5, r6, ip
    fg.ch.red = LV_MIN(tmp, 31);
 8020312:	2b1f      	cmp	r3, #31
 8020314:	bf28      	it	cs
 8020316:	231f      	movcs	r3, #31
    fg.ch.green = LV_MIN(tmp, 63);
 8020318:	2c3f      	cmp	r4, #63	; 0x3f
 802031a:	bf28      	it	cs
 802031c:	243f      	movcs	r4, #63	; 0x3f
    fg.ch.blue = LV_MIN(tmp, 31);
 802031e:	2d1f      	cmp	r5, #31
    fg.ch.red = LV_MIN(tmp, 31);
 8020320:	f003 031f 	and.w	r3, r3, #31
    fg.ch.blue = LV_MIN(tmp, 31);
 8020324:	bf28      	it	cs
 8020326:	251f      	movcs	r5, #31
    if(opa == LV_OPA_COVER) return fg;
 8020328:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.green = LV_MIN(tmp, 63);
 802032a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    fg.ch.blue = LV_MIN(tmp, 31);
 802032e:	f005 051f 	and.w	r5, r5, #31
    if(opa == LV_OPA_COVER) return fg;
 8020332:	d108      	bne.n	8020346 <color_blend_true_color_additive+0x68>
 8020334:	f04f 0000 	mov.w	r0, #0
 8020338:	f365 0004 	bfi	r0, r5, #0, #5
 802033c:	f364 104a 	bfi	r0, r4, #5, #6
 8020340:	f363 20cf 	bfi	r0, r3, #11, #5
 8020344:	e7dd      	b.n	8020302 <color_blend_true_color_additive+0x24>
    return lv_color_mix(fg, bg, opa);
 8020346:	f365 0004 	bfi	r0, r5, #0, #5
 802034a:	f364 104a 	bfi	r0, r4, #5, #6
}
 802034e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return lv_color_mix(fg, bg, opa);
 8020352:	f363 20cf 	bfi	r0, r3, #11, #5
 8020356:	f7ff bf98 	b.w	802028a <lv_color_mix>

0802035a <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 802035a:	460b      	mov	r3, r1
    if(opa <= LV_OPA_MIN) return bg;
 802035c:	2a02      	cmp	r2, #2
 802035e:	f000 0c1f 	and.w	ip, r0, #31
{
 8020362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020366:	f3c0 1e45 	ubfx	lr, r0, #5, #6
 802036a:	f3c0 28c4 	ubfx	r8, r0, #11, #5
 802036e:	f003 061f 	and.w	r6, r3, #31
 8020372:	f3c3 1545 	ubfx	r5, r3, #5, #6
 8020376:	f3c3 24c4 	ubfx	r4, r3, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 802037a:	d802      	bhi.n	8020382 <color_blend_true_color_subtractive+0x28>
 802037c:	4608      	mov	r0, r1
    fg.ch.blue = LV_MAX(tmp, 0);

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 802037e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = bg.ch.red - fg.ch.red;
 8020382:	eba4 0308 	sub.w	r3, r4, r8
    tmp = bg.ch.green - fg.ch.green;
 8020386:	eba5 040e 	sub.w	r4, r5, lr
    tmp = bg.ch.blue - fg.ch.blue;
 802038a:	eba6 050c 	sub.w	r5, r6, ip
    if(opa == LV_OPA_COVER) return fg;
 802038e:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.red = LV_MAX(tmp, 0);
 8020390:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fg.ch.green = LV_MAX(tmp, 0);
 8020394:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    fg.ch.blue = LV_MAX(tmp, 0);
 8020398:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    fg.ch.red = LV_MAX(tmp, 0);
 802039c:	f003 031f 	and.w	r3, r3, #31
    fg.ch.green = LV_MAX(tmp, 0);
 80203a0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    fg.ch.blue = LV_MAX(tmp, 0);
 80203a4:	f005 051f 	and.w	r5, r5, #31
    if(opa == LV_OPA_COVER) return fg;
 80203a8:	d108      	bne.n	80203bc <color_blend_true_color_subtractive+0x62>
 80203aa:	f04f 0000 	mov.w	r0, #0
 80203ae:	f365 0004 	bfi	r0, r5, #0, #5
 80203b2:	f364 104a 	bfi	r0, r4, #5, #6
 80203b6:	f363 20cf 	bfi	r0, r3, #11, #5
 80203ba:	e7e0      	b.n	802037e <color_blend_true_color_subtractive+0x24>
    return lv_color_mix(fg, bg, opa);
 80203bc:	f365 0004 	bfi	r0, r5, #0, #5
 80203c0:	f364 104a 	bfi	r0, r4, #5, #6
}
 80203c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return lv_color_mix(fg, bg, opa);
 80203c8:	f363 20cf 	bfi	r0, r3, #11, #5
 80203cc:	f7ff bf5d 	b.w	802028a <lv_color_mix>

080203d0 <color_blend_true_color_multiply>:

static inline lv_color_t color_blend_true_color_multiply(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 80203d0:	460b      	mov	r3, r1
    if(opa <= LV_OPA_MIN) return bg;
 80203d2:	2a02      	cmp	r2, #2
{
 80203d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203d8:	f3c3 1c45 	ubfx	ip, r3, #5, #6
 80203dc:	f000 061f 	and.w	r6, r0, #31
 80203e0:	f3c0 1545 	ubfx	r5, r0, #5, #6
 80203e4:	f3c0 24c4 	ubfx	r4, r0, #11, #5
 80203e8:	f003 0e1f 	and.w	lr, r3, #31
 80203ec:	f3c3 28c4 	ubfx	r8, r3, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 80203f0:	d802      	bhi.n	80203f8 <color_blend_true_color_multiply+0x28>
 80203f2:	4608      	mov	r0, r1
#endif

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 80203f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 5;
 80203f8:	fb14 f308 	smulbb	r3, r4, r8
    if(opa == LV_OPA_COVER) return fg;
 80203fc:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 5;
 80203fe:	fb16 f60e 	smulbb	r6, r6, lr
    LV_COLOR_SET_G(fg, (LV_COLOR_GET_G(fg) * LV_COLOR_GET_G(bg)) >> 6);
 8020402:	fb15 f40c 	smulbb	r4, r5, ip
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 5;
 8020406:	ea4f 1353 	mov.w	r3, r3, lsr #5
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 5;
 802040a:	ea4f 1656 	mov.w	r6, r6, lsr #5
    LV_COLOR_SET_G(fg, (LV_COLOR_GET_G(fg) * LV_COLOR_GET_G(bg)) >> 6);
 802040e:	ea4f 1494 	mov.w	r4, r4, lsr #6
    if(opa == LV_OPA_COVER) return fg;
 8020412:	d108      	bne.n	8020426 <color_blend_true_color_multiply+0x56>
 8020414:	f04f 0000 	mov.w	r0, #0
 8020418:	f366 0004 	bfi	r0, r6, #0, #5
 802041c:	f364 104a 	bfi	r0, r4, #5, #6
 8020420:	f363 20cf 	bfi	r0, r3, #11, #5
 8020424:	e7e6      	b.n	80203f4 <color_blend_true_color_multiply+0x24>
    return lv_color_mix(fg, bg, opa);
 8020426:	f366 0004 	bfi	r0, r6, #0, #5
 802042a:	f364 104a 	bfi	r0, r4, #5, #6
}
 802042e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return lv_color_mix(fg, bg, opa);
 8020432:	f363 20cf 	bfi	r0, r3, #11, #5
 8020436:	f7ff bf28 	b.w	802028a <lv_color_mix>

0802043a <lv_draw_sw_blend>:
{
 802043a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if(dsc->opa <= LV_OPA_MIN) return;
 802043c:	7e0b      	ldrb	r3, [r1, #24]
{
 802043e:	4604      	mov	r4, r0
 8020440:	460d      	mov	r5, r1
    if(dsc->opa <= LV_OPA_MIN) return;
 8020442:	2b02      	cmp	r3, #2
 8020444:	d90d      	bls.n	8020462 <lv_draw_sw_blend+0x28>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8020446:	6882      	ldr	r2, [r0, #8]
 8020448:	4668      	mov	r0, sp
 802044a:	6809      	ldr	r1, [r1, #0]
 802044c:	f003 ff45 	bl	80242da <_lv_area_intersect>
 8020450:	b138      	cbz	r0, 8020462 <lv_draw_sw_blend+0x28>
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 8020452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020454:	b10b      	cbz	r3, 802045a <lv_draw_sw_blend+0x20>
 8020456:	4620      	mov	r0, r4
 8020458:	4798      	blx	r3
    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 802045a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802045c:	4629      	mov	r1, r5
 802045e:	4620      	mov	r0, r4
 8020460:	4798      	blx	r3
}
 8020462:	b003      	add	sp, #12
 8020464:	bd30      	pop	{r4, r5, pc}

08020466 <lv_color_to32>:
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8020466:	f240 1107 	movw	r1, #263	; 0x107
 802046a:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 802046e:	2200      	movs	r2, #0
 8020470:	434b      	muls	r3, r1
 8020472:	3307      	adds	r3, #7
 8020474:	115b      	asrs	r3, r3, #5
{
 8020476:	b510      	push	{r4, lr}
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8020478:	f363 4217 	bfi	r2, r3, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 802047c:	f240 1403 	movw	r4, #259	; 0x103
 8020480:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8020484:	4363      	muls	r3, r4
 8020486:	3303      	adds	r3, #3
 8020488:	119b      	asrs	r3, r3, #6
 802048a:	f363 220f 	bfi	r2, r3, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 802048e:	f000 031f 	and.w	r3, r0, #31
 8020492:	434b      	muls	r3, r1
 8020494:	3307      	adds	r3, #7
 8020496:	115b      	asrs	r3, r3, #5
 8020498:	f363 0207 	bfi	r2, r3, #0, #8
}
 802049c:	f042 407f 	orr.w	r0, r2, #4278190080	; 0xff000000
 80204a0:	bd10      	pop	{r4, pc}

080204a2 <find_oldest_item_life>:
    if(c->life < *min_life) *min_life = c->life;
 80204a2:	6843      	ldr	r3, [r0, #4]
}
 80204a4:	2000      	movs	r0, #0
    if(c->life < *min_life) *min_life = c->life;
 80204a6:	680a      	ldr	r2, [r1, #0]
 80204a8:	f3c3 031d 	ubfx	r3, r3, #0, #30
 80204ac:	4293      	cmp	r3, r2
 80204ae:	bf38      	it	cc
 80204b0:	600b      	strcc	r3, [r1, #0]
}
 80204b2:	4770      	bx	lr

080204b4 <find_item>:
    if(c->key == *k) return LV_RES_OK;
 80204b4:	6800      	ldr	r0, [r0, #0]
 80204b6:	680b      	ldr	r3, [r1, #0]
}
 80204b8:	1ac3      	subs	r3, r0, r3
 80204ba:	4258      	negs	r0, r3
 80204bc:	4158      	adcs	r0, r3
 80204be:	4770      	bx	lr

080204c0 <lv_gradient_calculate>:

LV_ATTRIBUTE_FAST_MEM lv_grad_color_t lv_gradient_calculate(const lv_grad_dsc_t * dsc, lv_coord_t range,
                                                            lv_coord_t frac)
{
 80204c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_grad_color_t tmp;
    lv_color32_t one, two;
    /*Clip out-of-bounds first*/
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 80204c4:	7883      	ldrb	r3, [r0, #2]
{
 80204c6:	4606      	mov	r6, r0
 80204c8:	4615      	mov	r5, r2
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 80204ca:	fb13 f301 	smulbb	r3, r3, r1
    if(frac <= min) {
 80204ce:	ebb2 2f23 	cmp.w	r2, r3, asr #8
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 80204d2:	ea4f 2723 	mov.w	r7, r3, asr #8
    if(frac <= min) {
 80204d6:	dc0d      	bgt.n	80204f4 <lv_gradient_calculate+0x34>
        GRAD_CONV(tmp, dsc->stops[0].color);
 80204d8:	7801      	ldrb	r1, [r0, #0]
 80204da:	8805      	ldrh	r5, [r0, #0]
 80204dc:	f001 011f 	and.w	r1, r1, #31
 80204e0:	7843      	ldrb	r3, [r0, #1]
 80204e2:	f3c5 1545 	ubfx	r5, r5, #5, #6
        return tmp;
    }

    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
    if(frac >= max) {
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 80204e6:	08db      	lsrs	r3, r3, #3
        return tmp;
 80204e8:	ea41 1045 	orr.w	r0, r1, r5, lsl #5

    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
                                LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
                                LV_UDIV255(two.ch.blue * mix  + one.ch.blue * imix));
    return r;
}
 80204ec:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80204f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 80204f4:	7a00      	ldrb	r0, [r0, #8]
 80204f6:	1e43      	subs	r3, r0, #1
 80204f8:	eb06 0483 	add.w	r4, r6, r3, lsl #2
 80204fc:	78a2      	ldrb	r2, [r4, #2]
 80204fe:	fb12 f201 	smulbb	r2, r2, r1
    if(frac >= max) {
 8020502:	ebb5 2f22 	cmp.w	r5, r2, asr #8
 8020506:	da0a      	bge.n	802051e <lv_gradient_calculate+0x5e>
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 8020508:	2801      	cmp	r0, #1
 802050a:	d907      	bls.n	802051c <lv_gradient_calculate+0x5c>
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 802050c:	79b3      	ldrb	r3, [r6, #6]
 802050e:	fb13 f301 	smulbb	r3, r3, r1
        if(frac <= cur) {
 8020512:	ebb5 2f23 	cmp.w	r5, r3, asr #8
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 8020516:	ea4f 2823 	mov.w	r8, r3, asr #8
        if(frac <= cur) {
 802051a:	dd0a      	ble.n	8020532 <lv_gradient_calculate+0x72>
    LV_ASSERT(d != 0);
 802051c:	e7fe      	b.n	802051c <lv_gradient_calculate+0x5c>
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 802051e:	f816 1023 	ldrb.w	r1, [r6, r3, lsl #2]
 8020522:	f836 5023 	ldrh.w	r5, [r6, r3, lsl #2]
 8020526:	f001 011f 	and.w	r1, r1, #31
 802052a:	7863      	ldrb	r3, [r4, #1]
 802052c:	f3c5 1545 	ubfx	r5, r5, #5, #6
 8020530:	e7d9      	b.n	80204e6 <lv_gradient_calculate+0x26>
            one.full = lv_color_to32(dsc->stops[i - 1].color);
 8020532:	8830      	ldrh	r0, [r6, #0]
            d = max - min;
 8020534:	eba8 0807 	sub.w	r8, r8, r7
            one.full = lv_color_to32(dsc->stops[i - 1].color);
 8020538:	f7ff ff95 	bl	8020466 <lv_color_to32>
 802053c:	4604      	mov	r4, r0
            two.full = lv_color_to32(dsc->stops[i].color);
 802053e:	88b0      	ldrh	r0, [r6, #4]
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 8020540:	f248 0681 	movw	r6, #32897	; 0x8081
            two.full = lv_color_to32(dsc->stops[i].color);
 8020544:	f7ff ff8f 	bl	8020466 <lv_color_to32>
    frac -= min;
 8020548:	1bea      	subs	r2, r5, r7
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 802054a:	b2e1      	uxtb	r1, r4
 802054c:	f3c4 2507 	ubfx	r5, r4, #8, #8
    lv_opa_t mix = (frac * 255) / d;
 8020550:	b212      	sxth	r2, r2
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 8020552:	b2c3      	uxtb	r3, r0
    lv_opa_t mix = (frac * 255) / d;
 8020554:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8020558:	fb92 f2f8 	sdiv	r2, r2, r8
    lv_opa_t imix = 255 - mix;
 802055c:	43d7      	mvns	r7, r2
 802055e:	b2d2      	uxtb	r2, r2
 8020560:	b2ff      	uxtb	r7, r7
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 8020562:	fb15 f507 	smulbb	r5, r5, r7
 8020566:	4379      	muls	r1, r7
 8020568:	fb02 1103 	mla	r1, r2, r3, r1
 802056c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8020570:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020574:	fb02 5503 	mla	r5, r2, r3, r5
 8020578:	f3c4 4307 	ubfx	r3, r4, #16, #8
 802057c:	4371      	muls	r1, r6
 802057e:	fb13 f307 	smulbb	r3, r3, r7
 8020582:	4375      	muls	r5, r6
 8020584:	f3c1 6184 	ubfx	r1, r1, #26, #5
 8020588:	fb02 3300 	mla	r3, r2, r0, r3
 802058c:	f3c5 6545 	ubfx	r5, r5, #25, #6
 8020590:	4373      	muls	r3, r6
 8020592:	f3c3 6384 	ubfx	r3, r3, #26, #5
    return r;
 8020596:	e7a7      	b.n	80204e8 <lv_gradient_calculate+0x28>

08020598 <lv_gradient_cleanup>:

void lv_gradient_cleanup(lv_grad_t * grad)
{
    if(grad->not_cached) {
 8020598:	f990 3007 	ldrsb.w	r3, [r0, #7]
 802059c:	2b00      	cmp	r3, #0
 802059e:	da01      	bge.n	80205a4 <lv_gradient_cleanup+0xc>
        lv_mem_free(grad);
 80205a0:	f7f2 b8d8 	b.w	8012754 <lv_mem_free>
    }
}
 80205a4:	4770      	bx	lr

080205a6 <lv_draw_sw_img_decoded>:
 **********************/


LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 80205a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205aa:	b0a5      	sub	sp, #148	; 0x94
 80205ac:	4614      	mov	r4, r2
 80205ae:	460d      	mov	r5, r1
 80205b0:	9309      	str	r3, [sp, #36]	; 0x24
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);
 80205b2:	6883      	ldr	r3, [r0, #8]
{
 80205b4:	900b      	str	r0, [sp, #44]	; 0x2c

    bool mask_any = lv_draw_mask_is_any(&draw_area);
 80205b6:	a817      	add	r0, sp, #92	; 0x5c
    dest->x1 = src->x1;
 80205b8:	f9b3 2000 	ldrsh.w	r2, [r3]
{
 80205bc:	f89d 60b8 	ldrb.w	r6, [sp, #184]	; 0xb8
 80205c0:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    dest->y1 = src->y1;
 80205c4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80205c8:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
    dest->x2 = src->x2;
 80205cc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    dest->y2 = src->y2;
 80205d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    dest->x2 = src->x2;
 80205d4:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    dest->y2 = src->y2;
 80205d8:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    bool mask_any = lv_draw_mask_is_any(&draw_area);
 80205dc:	f7e7 fed2 	bl	8008384 <lv_draw_mask_is_any>
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 80205e0:	682b      	ldr	r3, [r5, #0]
    memset(dst, 0x00, len);
 80205e2:	221c      	movs	r2, #28
    bool mask_any = lv_draw_mask_is_any(&draw_area);
 80205e4:	900d      	str	r0, [sp, #52]	; 0x34
 80205e6:	2100      	movs	r1, #0
 80205e8:	a81d      	add	r0, sp, #116	; 0x74
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 80205ea:	930e      	str	r3, [sp, #56]	; 0x38
 80205ec:	f7fa f8cc 	bl	801a788 <memset>

    lv_area_t blend_area;
    lv_draw_sw_blend_dsc_t blend_dsc;

    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
    blend_dsc.opa = draw_dsc->opa;
 80205f0:	7aeb      	ldrb	r3, [r5, #11]
 80205f2:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 80205f6:	7b2b      	ldrb	r3, [r5, #12]
 80205f8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80205fc:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
    blend_dsc.blend_area = &blend_area;
 8020600:	ab19      	add	r3, sp, #100	; 0x64
 8020602:	931d      	str	r3, [sp, #116]	; 0x74

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8020604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020606:	2b00      	cmp	r3, #0
 8020608:	d143      	bne.n	8020692 <lv_draw_sw_img_decoded+0xec>
 802060a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8020610:	d13f      	bne.n	8020692 <lv_draw_sw_img_decoded+0xec>
 8020612:	2e04      	cmp	r6, #4
 8020614:	d10c      	bne.n	8020630 <lv_draw_sw_img_decoded+0x8a>
 8020616:	7aab      	ldrb	r3, [r5, #10]
 8020618:	2b00      	cmp	r3, #0
 802061a:	d13a      	bne.n	8020692 <lv_draw_sw_img_decoded+0xec>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 802061c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802061e:	931e      	str	r3, [sp, #120]	; 0x78
        blend_dsc.mask_area = coords;
        blend_dsc.src_buf = NULL;
        blend_dsc.color = draw_dsc->recolor;
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;

        blend_dsc.blend_area = coords;
 8020620:	941d      	str	r4, [sp, #116]	; 0x74
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
        blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
        blend_dsc.blend_area = coords;
        blend_dsc.mask_area = coords;
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8020622:	a91d      	add	r1, sp, #116	; 0x74
 8020624:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020626:	f7ff ff08 	bl	802043a <lv_draw_sw_blend>
        }

        lv_mem_buf_release(mask_buf);
        lv_mem_buf_release(rgb_buf);
    }
}
 802062a:	b025      	add	sp, #148	; 0x94
 802062c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 8020630:	2e0e      	cmp	r6, #14
 8020632:	d113      	bne.n	802065c <lv_draw_sw_img_decoded+0xb6>
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 8020634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020636:	4621      	mov	r1, r4
 8020638:	a81b      	add	r0, sp, #108	; 0x6c
 802063a:	689a      	ldr	r2, [r3, #8]
 802063c:	f003 fe4d 	bl	80242da <_lv_area_intersect>
 8020640:	2800      	cmp	r0, #0
 8020642:	d0f2      	beq.n	802062a <lv_draw_sw_img_decoded+0x84>
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 8020644:	9b09      	ldr	r3, [sp, #36]	; 0x24
        blend_dsc.mask_area = coords;
 8020646:	9422      	str	r4, [sp, #136]	; 0x88
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 8020648:	9320      	str	r3, [sp, #128]	; 0x80
        blend_dsc.src_buf = NULL;
 802064a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802064c:	931e      	str	r3, [sp, #120]	; 0x78
        blend_dsc.color = draw_dsc->recolor;
 802064e:	892b      	ldrh	r3, [r5, #8]
 8020650:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8020654:	2302      	movs	r3, #2
 8020656:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 802065a:	e7e1      	b.n	8020620 <lv_draw_sw_img_decoded+0x7a>
    else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 802065c:	2e14      	cmp	r6, #20
 802065e:	d118      	bne.n	8020692 <lv_draw_sw_img_decoded+0xec>
 8020660:	7aab      	ldrb	r3, [r5, #10]
 8020662:	b9b3      	cbnz	r3, 8020692 <lv_draw_sw_img_decoded+0xec>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020664:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020668:	88a2      	ldrh	r2, [r4, #4]
 802066a:	8820      	ldrh	r0, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802066c:	3301      	adds	r3, #1
 802066e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020672:	3201      	adds	r2, #1
        blend_dsc.blend_area = coords;
 8020674:	941d      	str	r4, [sp, #116]	; 0x74
 8020676:	1a12      	subs	r2, r2, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020678:	1a5b      	subs	r3, r3, r1
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 802067a:	9809      	ldr	r0, [sp, #36]	; 0x24
        blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
 802067c:	fb13 f302 	smulbb	r3, r3, r2
        blend_dsc.mask_area = coords;
 8020680:	9422      	str	r4, [sp, #136]	; 0x88
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 8020682:	901e      	str	r0, [sp, #120]	; 0x78
        blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
 8020684:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020688:	9320      	str	r3, [sp, #128]	; 0x80
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 802068a:	2302      	movs	r3, #2
 802068c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8020690:	e7c7      	b.n	8020622 <lv_draw_sw_img_decoded+0x7c>
        blend_area.x1 = draw_ctx->clip_area->x1;
 8020692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020694:	8820      	ldrh	r0, [r4, #0]
 8020696:	689a      	ldr	r2, [r3, #8]
        blend_area.x2 = draw_ctx->clip_area->x2;
 8020698:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
        blend_area.x1 = draw_ctx->clip_area->x1;
 802069c:	f9b2 1000 	ldrsh.w	r1, [r2]
        blend_area.y2 = draw_ctx->clip_area->y2;
 80206a0:	f9b2 8006 	ldrsh.w	r8, [r2, #6]
        blend_area.x2 = draw_ctx->clip_area->x2;
 80206a4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 80206a8:	3301      	adds	r3, #1
        blend_area.y1 = draw_ctx->clip_area->y1;
 80206aa:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 80206ae:	88a2      	ldrh	r2, [r4, #4]
 80206b0:	1a5b      	subs	r3, r3, r1
        blend_area.x1 = draw_ctx->clip_area->x1;
 80206b2:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
 80206b6:	1a12      	subs	r2, r2, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80206b8:	8860      	ldrh	r0, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80206ba:	b21b      	sxth	r3, r3
        blend_area.y2 = draw_ctx->clip_area->y2;
 80206bc:	f8ad 806a 	strh.w	r8, [sp, #106]	; 0x6a
 80206c0:	b292      	uxth	r2, r2
        blend_area.y1 = draw_ctx->clip_area->y1;
 80206c2:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
 80206c6:	930c      	str	r3, [sp, #48]	; 0x30
 80206c8:	9211      	str	r2, [sp, #68]	; 0x44
 80206ca:	3201      	adds	r2, #1
 80206cc:	b212      	sxth	r2, r2
 80206ce:	9207      	str	r2, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80206d0:	88e2      	ldrh	r2, [r4, #6]
 80206d2:	3201      	adds	r2, #1
 80206d4:	1a12      	subs	r2, r2, r0
 80206d6:	b212      	sxth	r2, r2
 80206d8:	9210      	str	r2, [sp, #64]	; 0x40
        uint32_t max_buf_size = MAX_BUF_SIZE;
 80206da:	f7e6 fdc7 	bl	800726c <_lv_refr_get_disp_refreshing>
 80206de:	f7f1 fd0f 	bl	8012100 <lv_disp_get_hor_res>
 80206e2:	4607      	mov	r7, r0
        uint32_t blend_size = lv_area_get_size(&blend_area);
 80206e4:	a819      	add	r0, sp, #100	; 0x64
 80206e6:	f003 fdca 	bl	802427e <lv_area_get_size>
        if(blend_size <= max_buf_size) {
 80206ea:	4287      	cmp	r7, r0
 80206ec:	bf2b      	itete	cs
 80206ee:	f108 0801 	addcs.w	r8, r8, #1
            buf_h = max_buf_size / blend_w;
 80206f2:	9b0c      	ldrcc	r3, [sp, #48]	; 0x30
 80206f4:	eba8 0809 	subcs.w	r8, r8, r9
 80206f8:	fbb7 f7f3 	udivcc	r7, r7, r3
            buf_h = blend_h;
 80206fc:	bf28      	it	cs
 80206fe:	fa0f f788 	sxthcs.w	r7, r8
        uint32_t buf_size = buf_w * buf_h;
 8020702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020704:	fb03 f907 	mul.w	r9, r3, r7
        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 8020708:	ea4f 0849 	mov.w	r8, r9, lsl #1
 802070c:	4640      	mov	r0, r8
 802070e:	f7f2 f853 	bl	80127b8 <lv_mem_buf_get>
 8020712:	9008      	str	r0, [sp, #32]
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 8020714:	4648      	mov	r0, r9
 8020716:	f7f2 f84f 	bl	80127b8 <lv_mem_buf_get>
        blend_dsc.mask_area = &blend_area;
 802071a:	ab19      	add	r3, sp, #100	; 0x64
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 802071c:	2e04      	cmp	r6, #4
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 802071e:	900a      	str	r0, [sp, #40]	; 0x28
        blend_dsc.mask_area = &blend_area;
 8020720:	9322      	str	r3, [sp, #136]	; 0x88
        blend_dsc.src_buf = rgb_buf;
 8020722:	9b08      	ldr	r3, [sp, #32]
        blend_dsc.mask_buf = mask_buf;
 8020724:	9020      	str	r0, [sp, #128]	; 0x80
        blend_dsc.src_buf = rgb_buf;
 8020726:	931e      	str	r3, [sp, #120]	; 0x78
        lv_coord_t y_last = blend_area.y2;
 8020728:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 802072c:	930f      	str	r3, [sp, #60]	; 0x3c
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 802072e:	b2bb      	uxth	r3, r7
 8020730:	9312      	str	r3, [sp, #72]	; 0x48
 8020732:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 8020736:	f103 33ff 	add.w	r3, r3, #4294967295
 802073a:	fa13 f787 	uxtah	r7, r3, r7
 802073e:	f8ad 706a 	strh.w	r7, [sp, #106]	; 0x6a
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 8020742:	d116      	bne.n	8020772 <lv_draw_sw_img_decoded+0x1cc>
 8020744:	682b      	ldr	r3, [r5, #0]
 8020746:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802074a:	bf0c      	ite	eq
 802074c:	2301      	moveq	r3, #1
 802074e:	2302      	movne	r3, #2
        blend_dsc.mask_res = mask_res_def;
 8020750:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
        while(blend_area.y1 <= y_last) {
 8020754:	9b08      	ldr	r3, [sp, #32]
 8020756:	4443      	add	r3, r8
 8020758:	9313      	str	r3, [sp, #76]	; 0x4c
 802075a:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 802075e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020760:	4293      	cmp	r3, r2
 8020762:	dd08      	ble.n	8020776 <lv_draw_sw_img_decoded+0x1d0>
        lv_mem_buf_release(mask_buf);
 8020764:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020766:	f7f2 f871 	bl	801284c <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 802076a:	9808      	ldr	r0, [sp, #32]
 802076c:	f7f2 f86e 	bl	801284c <lv_mem_buf_release>
 8020770:	e75b      	b.n	802062a <lv_draw_sw_img_decoded+0x84>
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 8020772:	2302      	movs	r3, #2
 8020774:	e7ec      	b.n	8020750 <lv_draw_sw_img_decoded+0x1aa>
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 8020776:	8862      	ldrh	r2, [r4, #2]
 8020778:	a81b      	add	r0, sp, #108	; 0x6c
 802077a:	8821      	ldrh	r1, [r4, #0]
    dest->x1 = src->x1;
 802077c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802077e:	4252      	negs	r2, r2
 8020780:	4249      	negs	r1, r1
 8020782:	931b      	str	r3, [sp, #108]	; 0x6c
 8020784:	b212      	sxth	r2, r2
    dest->x2 = src->x2;
 8020786:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020788:	b209      	sxth	r1, r1
 802078a:	931c      	str	r3, [sp, #112]	; 0x70
 802078c:	f003 fd94 	bl	80242b8 <lv_area_move>
            if(transform) {
 8020790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020792:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8020796:	d033      	beq.n	8020800 <lv_draw_sw_img_decoded+0x25a>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 8020798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802079a:	a91b      	add	r1, sp, #108	; 0x6c
 802079c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802079e:	9305      	str	r3, [sp, #20]
 80207a0:	9b08      	ldr	r3, [sp, #32]
 80207a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80207a4:	9502      	str	r5, [sp, #8]
 80207a6:	e9cd 6303 	strd	r6, r3, [sp, #12]
 80207aa:	9b07      	ldr	r3, [sp, #28]
 80207ac:	9301      	str	r3, [sp, #4]
 80207ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80207b0:	9300      	str	r3, [sp, #0]
 80207b2:	9b07      	ldr	r3, [sp, #28]
 80207b4:	f7fe fe3f 	bl	801f436 <lv_draw_transform>
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 80207b8:	7aaa      	ldrb	r2, [r5, #10]
 80207ba:	2a02      	cmp	r2, #2
 80207bc:	f200 80ff 	bhi.w	80209be <lv_draw_sw_img_decoded+0x418>
            if(mask_any) {
 80207c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80207c2:	b153      	cbz	r3, 80207da <lv_draw_sw_img_decoded+0x234>
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 80207c4:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	; 0x66
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80207c8:	f04f 0902 	mov.w	r9, #2
                lv_opa_t * mask_buf_tmp = mask_buf;
 80207cc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 80207d0:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 80207d4:	42bb      	cmp	r3, r7
 80207d6:	f280 812c 	bge.w	8020a32 <lv_draw_sw_img_decoded+0x48c>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80207da:	a91d      	add	r1, sp, #116	; 0x74
 80207dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80207de:	f7ff fe2c 	bl	802043a <lv_draw_sw_blend>
            blend_area.y1 = blend_area.y2 + 1;
 80207e2:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 80207e6:	1c5a      	adds	r2, r3, #1
 80207e8:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 80207ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80207ee:	4413      	add	r3, r2
 80207f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80207f2:	b21b      	sxth	r3, r3
 80207f4:	4293      	cmp	r3, r2
 80207f6:	bfa8      	it	ge
 80207f8:	4613      	movge	r3, r2
 80207fa:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 80207fe:	e7ac      	b.n	802075a <lv_draw_sw_img_decoded+0x1b4>

    const uint8_t * src_tmp8 = (const uint8_t *)src_buf;
    lv_coord_t y;
    lv_coord_t x;

    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8020800:	2e06      	cmp	r6, #6
 8020802:	d07c      	beq.n	80208fe <lv_draw_sw_img_decoded+0x358>
 8020804:	d833      	bhi.n	802086e <lv_draw_sw_img_decoded+0x2c8>
 8020806:	2e04      	cmp	r6, #4
 8020808:	d079      	beq.n	80208fe <lv_draw_sw_img_decoded+0x358>
 802080a:	2e05      	cmp	r6, #5
 802080c:	d1d4      	bne.n	80207b8 <lv_draw_sw_img_decoded+0x212>
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
            }
        }
    }
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 802080e:	f9bd 706e 	ldrsh.w	r7, [sp, #110]	; 0x6e
        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;

        lv_coord_t dest_h = lv_area_get_height(dest_area);
        lv_coord_t dest_w = lv_area_get_width(dest_area);
        for(y = 0; y < dest_h; y++) {
 8020812:	f04f 0c00 	mov.w	ip, #0
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8020816:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 802081a:	9a07      	ldr	r2, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802081c:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 8020820:	fb02 3107 	mla	r1, r2, r7, r3
 8020824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020826:	b29b      	uxth	r3, r3
        for(y = 0; y < dest_h; y++) {
 8020828:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 802082c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
        for(y = 0; y < dest_h; y++) {
 8020830:	f8dd 8020 	ldr.w	r8, [sp, #32]
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8020834:	4411      	add	r1, r2
 8020836:	1c42      	adds	r2, r0, #1
 8020838:	1ad2      	subs	r2, r2, r3
        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 802083a:	1a1b      	subs	r3, r3, r0
 802083c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802083e:	b212      	sxth	r2, r2
 8020840:	4403      	add	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020842:	f8bd 0072 	ldrh.w	r0, [sp, #114]	; 0x72
                cbuf[x].ch.alpha = 0xff;
#endif
                src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;

            }
            cbuf += dest_w;
 8020846:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 802084a:	3001      	adds	r0, #1
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 802084c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020850:	1bc0      	subs	r0, r0, r7
 8020852:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
 8020856:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802085a:	b200      	sxth	r0, r0
            abuf += dest_w;
            src_tmp8 += src_new_line_step_byte;
 802085c:	fa07 f383 	sxtah	r3, r7, r3
        for(y = 0; y < dest_h; y++) {
 8020860:	fa0f f78c 	sxth.w	r7, ip
 8020864:	42b8      	cmp	r0, r7
 8020866:	dda7      	ble.n	80207b8 <lv_draw_sw_img_decoded+0x212>
 8020868:	4689      	mov	r9, r1
 802086a:	2700      	movs	r7, #0
 802086c:	e091      	b.n	8020992 <lv_draw_sw_img_decoded+0x3ec>
 802086e:	2e14      	cmp	r6, #20
 8020870:	d1a2      	bne.n	80207b8 <lv_draw_sw_img_decoded+0x212>
        }
    }
    else if(cf == LV_IMG_CF_RGB565A8) {
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 8020872:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);

        lv_coord_t dest_h = lv_area_get_height(dest_area);
        lv_coord_t dest_w = lv_area_get_width(dest_area);
        for(y = 0; y < dest_h; y++) {
 8020876:	f04f 0900 	mov.w	r9, #0
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 802087a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 802087e:	9907      	ldr	r1, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020880:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 8020884:	fb01 3102 	mla	r1, r1, r2, r3
 8020888:	9809      	ldr	r0, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802088a:	f8bd 8072 	ldrh.w	r8, [sp, #114]	; 0x72
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802088e:	3701      	adds	r7, #1
 8020890:	eb00 0141 	add.w	r1, r0, r1, lsl #1
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 8020894:	9807      	ldr	r0, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020896:	f108 0801 	add.w	r8, r8, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802089a:	1aff      	subs	r7, r7, r3
 802089c:	ea4f 0a40 	mov.w	sl, r0, lsl #1
        for(y = 0; y < dest_h; y++) {
 80208a0:	f8dd b020 	ldr.w	fp, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80208a4:	eba8 0802 	sub.w	r8, r8, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80208a8:	b23f      	sxth	r7, r7
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 80208aa:	fa0f fa8a 	sxth.w	sl, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80208ae:	fa0f f888 	sxth.w	r8, r8
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 80208b2:	007a      	lsls	r2, r7, #1
        for(y = 0; y < dest_h; y++) {
 80208b4:	fa0f f389 	sxth.w	r3, r9
 80208b8:	4543      	cmp	r3, r8
 80208ba:	db74      	blt.n	80209a6 <lv_draw_sw_img_decoded+0x400>
            src_tmp8 += src_stride_byte;
        }

        src_tmp8 = (const uint8_t *)src_buf;
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 80208bc:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
        for(y = 0; y < dest_h; y++) {
 80208c0:	f04f 0900 	mov.w	r9, #0
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 80208c4:	9a07      	ldr	r2, [sp, #28]
 80208c6:	f8bd b06e 	ldrh.w	fp, [sp, #110]	; 0x6e
        for(y = 0; y < dest_h; y++) {
 80208ca:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 80208ce:	fb12 3b0b 	smlabb	fp, r2, fp, r3
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 80208d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80208d4:	4353      	muls	r3, r2
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 80208d6:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 80208da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208dc:	449b      	add	fp, r3
        for(y = 0; y < dest_h; y++) {
 80208de:	fa0f f389 	sxth.w	r3, r9
 80208e2:	4543      	cmp	r3, r8
 80208e4:	f6bf af68 	bge.w	80207b8 <lv_draw_sw_img_decoded+0x212>
    return memcpy(dst, src, len);
 80208e8:	4659      	mov	r1, fp
 80208ea:	4650      	mov	r0, sl
 80208ec:	463a      	mov	r2, r7
            lv_memcpy(abuf, src_tmp8, dest_w);
            abuf += dest_w;
 80208ee:	44ba      	add	sl, r7
 80208f0:	f7f9 ff3f 	bl	801a772 <memcpy>
            src_tmp8 += src_stride;
 80208f4:	9b07      	ldr	r3, [sp, #28]
 80208f6:	f109 0901 	add.w	r9, r9, #1
 80208fa:	449b      	add	fp, r3
        for(y = 0; y < dest_h; y++) {
 80208fc:	e7ef      	b.n	80208de <lv_draw_sw_img_decoded+0x338>
        uint32_t px_cnt = lv_area_get_size(dest_area);
 80208fe:	a81b      	add	r0, sp, #108	; 0x6c
 8020900:	f003 fcbd 	bl	802427e <lv_area_get_size>
    memset(dst, 0xFF, len);
 8020904:	21ff      	movs	r1, #255	; 0xff
 8020906:	4602      	mov	r2, r0
 8020908:	4680      	mov	r8, r0
 802090a:	980a      	ldr	r0, [sp, #40]	; 0x28
 802090c:	f7f9 ff3c 	bl	801a788 <memset>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 8020910:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8020914:	9a07      	ldr	r2, [sp, #28]
 8020916:	f9bd 706e 	ldrsh.w	r7, [sp, #110]	; 0x6e
        lv_color_t * cbuf_tmp = cbuf;
 802091a:	f8dd a020 	ldr.w	sl, [sp, #32]
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 802091e:	fb02 3b07 	mla	fp, r2, r7, r3
 8020922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020924:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020928:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 802092c:	3201      	adds	r2, #1
 802092e:	1ad2      	subs	r2, r2, r3
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 8020930:	9b07      	ldr	r3, [sp, #28]
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 8020932:	b212      	sxth	r2, r2
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 8020934:	ea4f 0943 	mov.w	r9, r3, lsl #1
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 8020938:	0052      	lsls	r2, r2, #1
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 802093a:	fa0f f989 	sxth.w	r9, r9
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 802093e:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8020942:	42bb      	cmp	r3, r7
 8020944:	da05      	bge.n	8020952 <lv_draw_sw_img_decoded+0x3ac>
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8020946:	2e06      	cmp	r6, #6
 8020948:	f47f af36 	bne.w	80207b8 <lv_draw_sw_img_decoded+0x212>
            for(i = 0; i < px_cnt; i++) {
 802094c:	2300      	movs	r3, #0
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 802094e:	461a      	mov	r2, r3
 8020950:	e013      	b.n	802097a <lv_draw_sw_img_decoded+0x3d4>
    return memcpy(dst, src, len);
 8020952:	4659      	mov	r1, fp
 8020954:	4650      	mov	r0, sl
 8020956:	9214      	str	r2, [sp, #80]	; 0x50
 8020958:	3701      	adds	r7, #1
 802095a:	f7f9 ff0a 	bl	801a772 <memcpy>
            cbuf_tmp += dest_w;
 802095e:	9a14      	ldr	r2, [sp, #80]	; 0x50
            src_tmp8 += src_stride_byte;
 8020960:	44cb      	add	fp, r9
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8020962:	b23f      	sxth	r7, r7
            cbuf_tmp += dest_w;
 8020964:	4492      	add	sl, r2
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8020966:	e7ea      	b.n	802093e <lv_draw_sw_img_decoded+0x398>
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 8020968:	9908      	ldr	r1, [sp, #32]
 802096a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 802096e:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
 8020972:	bf04      	itt	eq
 8020974:	990a      	ldreq	r1, [sp, #40]	; 0x28
 8020976:	54ca      	strbeq	r2, [r1, r3]
            for(i = 0; i < px_cnt; i++) {
 8020978:	3301      	adds	r3, #1
 802097a:	4598      	cmp	r8, r3
 802097c:	d1f4      	bne.n	8020968 <lv_draw_sw_img_decoded+0x3c2>
 802097e:	e71b      	b.n	80207b8 <lv_draw_sw_img_decoded+0x212>
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8020980:	f899 b002 	ldrb.w	fp, [r9, #2]
 8020984:	f80e b007 	strb.w	fp, [lr, r7]
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
 8020988:	f839 bb03 	ldrh.w	fp, [r9], #3
 802098c:	f828 b017 	strh.w	fp, [r8, r7, lsl #1]
            for(x = 0; x < dest_w; x++) {
 8020990:	3701      	adds	r7, #1
 8020992:	fa0f fb87 	sxth.w	fp, r7
 8020996:	455a      	cmp	r2, fp
 8020998:	dcf2      	bgt.n	8020980 <lv_draw_sw_img_decoded+0x3da>
            cbuf += dest_w;
 802099a:	44d0      	add	r8, sl
            abuf += dest_w;
 802099c:	4496      	add	lr, r2
            src_tmp8 += src_new_line_step_byte;
 802099e:	4419      	add	r1, r3
        for(y = 0; y < dest_h; y++) {
 80209a0:	f10c 0c01 	add.w	ip, ip, #1
 80209a4:	e75c      	b.n	8020860 <lv_draw_sw_img_decoded+0x2ba>
 80209a6:	4658      	mov	r0, fp
 80209a8:	f109 0901 	add.w	r9, r9, #1
 80209ac:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
 80209b0:	f7f9 fedf 	bl	801a772 <memcpy>
            cbuf += dest_w;
 80209b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
            src_tmp8 += src_stride_byte;
 80209b6:	9914      	ldr	r1, [sp, #80]	; 0x50
            cbuf += dest_w;
 80209b8:	4493      	add	fp, r2
            src_tmp8 += src_stride_byte;
 80209ba:	4451      	add	r1, sl
        for(y = 0; y < dest_h; y++) {
 80209bc:	e77a      	b.n	80208b4 <lv_draw_sw_img_decoded+0x30e>
                lv_color_t recolor = draw_dsc->recolor;
 80209be:	7a6f      	ldrb	r7, [r5, #9]
 80209c0:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 80209c4:	f895 e008 	ldrb.w	lr, [r5, #8]
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 80209c8:	08ff      	lsrs	r7, r7, #3
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 80209ca:	f3cc 1c45 	ubfx	ip, ip, #5, #6
                for(i = 0; i < buf_size; i++) {
 80209ce:	9808      	ldr	r0, [sp, #32]
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 80209d0:	f00e 0e1f 	and.w	lr, lr, #31
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 80209d4:	fb02 f807 	mul.w	r8, r2, r7
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 80209d8:	fb0c fc02 	mul.w	ip, ip, r2
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 80209dc:	fb0e fe02 	mul.w	lr, lr, r2
                recolor_opa = 255 - recolor_opa;
 80209e0:	43d2      	mvns	r2, r2
 80209e2:	b2d2      	uxtb	r2, r2
                for(i = 0; i < buf_size; i++) {
 80209e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80209e6:	4298      	cmp	r0, r3
 80209e8:	f43f aeea 	beq.w	80207c0 <lv_draw_sw_img_decoded+0x21a>
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80209ec:	8801      	ldrh	r1, [r0, #0]
 80209ee:	f248 0381 	movw	r3, #32897	; 0x8081
 80209f2:	f3c1 1145 	ubfx	r1, r1, #5, #6
 80209f6:	461f      	mov	r7, r3
 80209f8:	fb01 c102 	mla	r1, r1, r2, ip
 80209fc:	3180      	adds	r1, #128	; 0x80
 80209fe:	4359      	muls	r1, r3
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8020a00:	7803      	ldrb	r3, [r0, #0]
 8020a02:	f003 031f 	and.w	r3, r3, #31
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 8020a06:	f3c1 51c5 	ubfx	r1, r1, #23, #6
 8020a0a:	fb03 e302 	mla	r3, r3, r2, lr
 8020a0e:	3380      	adds	r3, #128	; 0x80
 8020a10:	437b      	muls	r3, r7
 8020a12:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 8020a16:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8020a1a:	7841      	ldrb	r1, [r0, #1]
 8020a1c:	08c9      	lsrs	r1, r1, #3
 8020a1e:	fb01 8102 	mla	r1, r1, r2, r8
 8020a22:	3180      	adds	r1, #128	; 0x80
 8020a24:	4379      	muls	r1, r7
 8020a26:	0dc9      	lsrs	r1, r1, #23
 8020a28:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 8020a2c:	f820 3b02 	strh.w	r3, [r0], #2
                for(i = 0; i < buf_size; i++) {
 8020a30:	e7d8      	b.n	80209e4 <lv_draw_sw_img_decoded+0x43e>
                    mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 8020a32:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8020a36:	463a      	mov	r2, r7
 8020a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a3a:	4640      	mov	r0, r8
 8020a3c:	f7e7 fc4a 	bl	80082d4 <lv_draw_mask_apply>
                    if(mask_res_line == LV_DRAW_MASK_RES_TRANSP) {
 8020a40:	4601      	mov	r1, r0
 8020a42:	b950      	cbnz	r0, 8020a5a <lv_draw_sw_img_decoded+0x4b4>
    memset(dst, 0x00, len);
 8020a44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020a46:	4640      	mov	r0, r8
 8020a48:	f7f9 fe9e 	bl	801a788 <memset>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8020a4c:	f88d 9084 	strb.w	r9, [sp, #132]	; 0x84
                    mask_buf_tmp += blend_w;
 8020a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a52:	3701      	adds	r7, #1
 8020a54:	4498      	add	r8, r3
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 8020a56:	b23f      	sxth	r7, r7
 8020a58:	e6ba      	b.n	80207d0 <lv_draw_sw_img_decoded+0x22a>
                    else if(mask_res_line == LV_DRAW_MASK_RES_CHANGED) {
 8020a5a:	2802      	cmp	r0, #2
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8020a5c:	bf08      	it	eq
 8020a5e:	f88d 0084 	strbeq.w	r0, [sp, #132]	; 0x84
 8020a62:	e7f5      	b.n	8020a50 <lv_draw_sw_img_decoded+0x4aa>

08020a64 <lv_draw_sw_layer_create>:
 **********************/


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
 8020a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 8020a66:	07d3      	lsls	r3, r2, #31
{
 8020a68:	4606      	mov	r6, r0
 8020a6a:	460c      	mov	r4, r1
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 8020a6c:	d502      	bpl.n	8020a74 <lv_draw_sw_layer_create+0x10>
        LV_LOG_WARN("Rendering this widget needs LV_COLOR_SCREEN_TRANSP 1");
        return NULL;
 8020a6e:	2400      	movs	r4, #0
        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
    }

    return layer_ctx;
}
 8020a70:	4620      	mov	r0, r4
 8020a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8020a74:	f012 0502 	ands.w	r5, r2, #2
 8020a78:	d03e      	beq.n	8020af8 <lv_draw_sw_layer_create+0x94>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 8020a7a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8020a7c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8020a80:	4608      	mov	r0, r1
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 8020a82:	f362 031e 	bfi	r3, r2, #0, #31
 8020a86:	628b      	str	r3, [r1, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8020a88:	f003 fbf9 	bl	802427e <lv_area_get_size>
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 8020a8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8020a8e:	0042      	lsls	r2, r0, #1
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 8020a90:	f3c3 011e 	ubfx	r1, r3, #0, #31
 8020a94:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
 8020a98:	bf84      	itt	hi
 8020a9a:	f362 031e 	bfihi	r3, r2, #0, #31
 8020a9e:	62a3      	strhi	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8020aa0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8020aa2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020aa6:	f7f1 fe37 	bl	8012718 <lv_mem_alloc>
 8020aaa:	6160      	str	r0, [r4, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 8020aac:	b1c0      	cbz	r0, 8020ae0 <lv_draw_sw_layer_create+0x7c>
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 8020aae:	f104 0308 	add.w	r3, r4, #8
 8020ab2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8020ab6:	e883 0003 	stmia.w	r3, {r0, r1}
 8020aba:	89a2      	ldrh	r2, [r4, #12]
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 8020abc:	8863      	ldrh	r3, [r4, #2]
 8020abe:	3201      	adds	r2, #1
 8020ac0:	8921      	ldrh	r1, [r4, #8]
 8020ac2:	81e3      	strh	r3, [r4, #14]
 8020ac4:	1a52      	subs	r2, r2, r1
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 8020ac6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020ac8:	b212      	sxth	r2, r2
 8020aca:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8020ace:	fb93 f3f2 	sdiv	r3, r3, r2
 8020ad2:	2203      	movs	r2, #3
 8020ad4:	fb93 f2f2 	sdiv	r2, r3, r2
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 8020ad8:	085b      	lsrs	r3, r3, #1
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 8020ada:	8222      	strh	r2, [r4, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 8020adc:	8263      	strh	r3, [r4, #18]
 8020ade:	e7c7      	b.n	8020a70 <lv_draw_sw_layer_create+0xc>
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 8020ae0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020ae2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8020ae6:	f360 031e 	bfi	r3, r0, #0, #31
 8020aea:	62a3      	str	r3, [r4, #40]	; 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8020aec:	f7f1 fe14 	bl	8012718 <lv_mem_alloc>
 8020af0:	6160      	str	r0, [r4, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 8020af2:	2800      	cmp	r0, #0
 8020af4:	d1db      	bne.n	8020aae <lv_draw_sw_layer_create+0x4a>
 8020af6:	e7ba      	b.n	8020a6e <lv_draw_sw_layer_create+0xa>
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 8020af8:	f101 0708 	add.w	r7, r1, #8
 8020afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020b00:	e887 0003 	stmia.w	r7, {r0, r1}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8020b04:	4620      	mov	r0, r4
 8020b06:	f003 fbba 	bl	802427e <lv_area_get_size>
 8020b0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020b0c:	0040      	lsls	r0, r0, #1
 8020b0e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020b12:	f360 031e 	bfi	r3, r0, #0, #31
 8020b16:	62a3      	str	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8020b18:	f7f1 fdfe 	bl	8012718 <lv_mem_alloc>
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 8020b1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8020b1e:	4629      	mov	r1, r5
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8020b20:	6160      	str	r0, [r4, #20]
 8020b22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8020b26:	f7f9 fe2f 	bl	801a788 <memset>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 8020b2a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8020b2e:	f365 13c7 	bfi	r3, r5, #7, #1
 8020b32:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        if(layer_sw_ctx->base_draw.buf == NULL) {
 8020b36:	6963      	ldr	r3, [r4, #20]
 8020b38:	2b00      	cmp	r3, #0
 8020b3a:	d098      	beq.n	8020a6e <lv_draw_sw_layer_create+0xa>
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 8020b3c:	60b7      	str	r7, [r6, #8]
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 8020b3e:	e9c6 3700 	strd	r3, r7, [r6]
        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8020b42:	f7e6 fb93 	bl	800726c <_lv_refr_get_disp_refreshing>
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 8020b46:	6803      	ldr	r3, [r0, #0]
 8020b48:	7c1a      	ldrb	r2, [r3, #16]
 8020b4a:	f365 1286 	bfi	r2, r5, #6, #1
 8020b4e:	741a      	strb	r2, [r3, #16]
 8020b50:	e78e      	b.n	8020a70 <lv_draw_sw_layer_create+0xc>

08020b52 <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 8020b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b54:	4615      	mov	r5, r2
 8020b56:	4606      	mov	r6, r0
 8020b58:	460c      	mov	r4, r1

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8020b5a:	f7e6 fb87 	bl	800726c <_lv_refr_get_disp_refreshing>
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8020b5e:	f015 0501 	ands.w	r5, r5, #1
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8020b62:	4607      	mov	r7, r0
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8020b64:	d017      	beq.n	8020b96 <lv_draw_sw_layer_adjust+0x44>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 8020b66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8020b68:	2100      	movs	r1, #0
 8020b6a:	6960      	ldr	r0, [r4, #20]
 8020b6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8020b70:	f7f9 fe0a 	bl	801a788 <memset>
        layer_sw_ctx->has_alpha = 1;
 8020b74:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8020b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020b7c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        disp_refr->driver->screen_transp = 1;
 8020b80:	683a      	ldr	r2, [r7, #0]
 8020b82:	7c13      	ldrb	r3, [r2, #16]
 8020b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020b88:	7413      	strb	r3, [r2, #16]
    else {
        layer_sw_ctx->has_alpha = 0;
        disp_refr->driver->screen_transp = 0;
    }

    draw_ctx->buf = layer_ctx->buf;
 8020b8a:	6963      	ldr	r3, [r4, #20]
    draw_ctx->buf_area = &layer_ctx->area_act;
 8020b8c:	3408      	adds	r4, #8
    draw_ctx->buf = layer_ctx->buf;
 8020b8e:	6033      	str	r3, [r6, #0]
    draw_ctx->clip_area = &layer_ctx->area_act;
 8020b90:	e9c6 4401 	strd	r4, r4, [r6, #4]
}
 8020b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        layer_sw_ctx->has_alpha = 0;
 8020b96:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8020b9a:	f365 13c7 	bfi	r3, r5, #7, #1
 8020b9e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        disp_refr->driver->screen_transp = 0;
 8020ba2:	6803      	ldr	r3, [r0, #0]
 8020ba4:	7c1a      	ldrb	r2, [r3, #16]
 8020ba6:	f365 1286 	bfi	r2, r5, #6, #1
 8020baa:	741a      	strb	r2, [r3, #16]
 8020bac:	e7ed      	b.n	8020b8a <lv_draw_sw_layer_adjust+0x38>

08020bae <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 8020bae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 8020bb0:	6803      	ldr	r3, [r0, #0]
{
 8020bb2:	4616      	mov	r6, r2
    img.header.always_zero = 0;
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 8020bb4:	6842      	ldr	r2, [r0, #4]
{
 8020bb6:	460d      	mov	r5, r1
    img.data = draw_ctx->buf;
 8020bb8:	9303      	str	r3, [sp, #12]
{
 8020bba:	4604      	mov	r4, r0
    img.header.always_zero = 0;
 8020bbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8020bc0:	f36f 1347 	bfc	r3, #5, #3
 8020bc4:	f88d 3004 	strb.w	r3, [sp, #4]
 8020bc8:	8893      	ldrh	r3, [r2, #4]
 8020bca:	8811      	ldrh	r1, [r2, #0]
 8020bcc:	3301      	adds	r3, #1
 8020bce:	1a5b      	subs	r3, r3, r1
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 8020bd0:	9901      	ldr	r1, [sp, #4]
 8020bd2:	f363 2194 	bfi	r1, r3, #10, #11
 8020bd6:	9101      	str	r1, [sp, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020bd8:	88d3      	ldrh	r3, [r2, #6]
 8020bda:	8852      	ldrh	r2, [r2, #2]
 8020bdc:	3301      	adds	r3, #1
 8020bde:	1a9b      	subs	r3, r3, r2
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
 8020be0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8020be4:	f363 124f 	bfi	r2, r3, #5, #11
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 8020be8:	f995 302b 	ldrsb.w	r3, [r5, #43]	; 0x2b
 8020bec:	2b00      	cmp	r3, #0
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
 8020bee:	f8ad 2006 	strh.w	r2, [sp, #6]
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 8020bf2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8020bf6:	bfac      	ite	ge
 8020bf8:	2204      	movge	r2, #4
 8020bfa:	2205      	movlt	r2, #5
 8020bfc:	f362 0304 	bfi	r3, r2, #0, #5
 8020c00:	f88d 3004 	strb.w	r3, [sp, #4]

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 8020c04:	6a2b      	ldr	r3, [r5, #32]
 8020c06:	6003      	str	r3, [r0, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 8020c08:	69eb      	ldr	r3, [r5, #28]
 8020c0a:	6043      	str	r3, [r0, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 8020c0c:	69ab      	ldr	r3, [r5, #24]
 8020c0e:	6083      	str	r3, [r0, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8020c10:	f7e6 fb2c 	bl	800726c <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8020c14:	6803      	ldr	r3, [r0, #0]
 8020c16:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 8020c1a:	4620      	mov	r0, r4
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8020c1c:	7c1a      	ldrb	r2, [r3, #16]
 8020c1e:	f361 1286 	bfi	r2, r1, #6, #1
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 8020c22:	4631      	mov	r1, r6
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8020c24:	741a      	strb	r2, [r3, #16]
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 8020c26:	ab01      	add	r3, sp, #4
 8020c28:	f105 0208 	add.w	r2, r5, #8
 8020c2c:	f7e6 ff5a 	bl	8007ae4 <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 8020c30:	4620      	mov	r0, r4
 8020c32:	f7fd fdce 	bl	801e7d2 <lv_draw_wait_for_finish>
    lv_img_cache_invalidate_src(&img);
 8020c36:	a801      	add	r0, sp, #4
 8020c38:	f7fe fc8b 	bl	801f552 <lv_img_cache_invalidate_src>
}
 8020c3c:	b004      	add	sp, #16
 8020c3e:	bd70      	pop	{r4, r5, r6, pc}

08020c40 <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 8020c40:	6948      	ldr	r0, [r1, #20]
 8020c42:	f7f1 bd87 	b.w	8012754 <lv_mem_free>

08020c46 <lv_memset_ff>:
{
 8020c46:	460a      	mov	r2, r1
    memset(dst, 0xFF, len);
 8020c48:	21ff      	movs	r1, #255	; 0xff
 8020c4a:	f7f9 bd9d 	b.w	801a788 <memset>

08020c4e <draw_bg_img>:

#endif
}

static void draw_bg_img(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 8020c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(dsc->bg_img_src == NULL) return;
 8020c52:	690b      	ldr	r3, [r1, #16]
{
 8020c54:	b092      	sub	sp, #72	; 0x48
 8020c56:	4606      	mov	r6, r0
 8020c58:	460c      	mov	r4, r1
 8020c5a:	4615      	mov	r5, r2
    if(dsc->bg_img_src == NULL) return;
 8020c5c:	2b00      	cmp	r3, #0
 8020c5e:	d063      	beq.n	8020d28 <draw_bg_img+0xda>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 8020c60:	7e8b      	ldrb	r3, [r1, #26]
 8020c62:	2b02      	cmp	r3, #2
 8020c64:	d960      	bls.n	8020d28 <draw_bg_img+0xda>

    lv_area_t clip_area;
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 8020c66:	f10d 0818 	add.w	r8, sp, #24
 8020c6a:	6882      	ldr	r2, [r0, #8]
 8020c6c:	4629      	mov	r1, r5
 8020c6e:	4640      	mov	r0, r8
 8020c70:	f003 fb33 	bl	80242da <_lv_area_intersect>
 8020c74:	2800      	cmp	r0, #0
 8020c76:	d057      	beq.n	8020d28 <draw_bg_img+0xda>
        return;
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8020c78:	68b7      	ldr	r7, [r6, #8]
    draw_ctx->clip_area = &clip_area;
 8020c7a:	f8c6 8008 	str.w	r8, [r6, #8]

    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 8020c7e:	6920      	ldr	r0, [r4, #16]
 8020c80:	f7fd fe10 	bl	801e8a4 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8020c84:	2802      	cmp	r0, #2
 8020c86:	d152      	bne.n	8020d2e <draw_bg_img+0xe0>
        lv_point_t size;
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8020c88:	f04f 0800 	mov.w	r8, #0
 8020c8c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8020c90:	a805      	add	r0, sp, #20
 8020c92:	f8cd 8000 	str.w	r8, [sp]
 8020c96:	e9cd 3801 	strd	r3, r8, [sp, #4]
 8020c9a:	4643      	mov	r3, r8
 8020c9c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8020ca0:	f004 fdfe 	bl	80258a0 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020ca4:	88aa      	ldrh	r2, [r5, #4]
        lv_area_t a;
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 8020ca6:	882b      	ldrh	r3, [r5, #0]
 8020ca8:	3201      	adds	r2, #1
 8020caa:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8020cae:	1ad2      	subs	r2, r2, r3
 8020cb0:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8020cb4:	fa00 f282 	sxtah	r2, r0, r2
 8020cb8:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
        a.x2 = a.x1 + size.x - 1;
 8020cbc:	3901      	subs	r1, #1
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 8020cbe:	eba3 0360 	sub.w	r3, r3, r0, asr #1
 8020cc2:	eb03 0362 	add.w	r3, r3, r2, asr #1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8020cc6:	886a      	ldrh	r2, [r5, #2]
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 8020cc8:	b29b      	uxth	r3, r3
 8020cca:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.x2 = a.x1 + size.x - 1;
 8020cce:	440b      	add	r3, r1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8020cd0:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
        a.x2 = a.x1 + size.x - 1;
 8020cd4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020cd8:	88eb      	ldrh	r3, [r5, #6]
 8020cda:	3301      	adds	r3, #1
 8020cdc:	1a9b      	subs	r3, r3, r2
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8020cde:	f3c3 30c0 	ubfx	r0, r3, #15, #1
 8020ce2:	fa00 f383 	sxtah	r3, r0, r3
 8020ce6:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
        a.y2 = a.y1 + size.y - 1;
 8020cea:	3901      	subs	r1, #1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8020cec:	eba2 0260 	sub.w	r2, r2, r0, asr #1

        lv_draw_label_dsc_t label_draw_dsc;
        lv_draw_label_dsc_init(&label_draw_dsc);
 8020cf0:	a80a      	add	r0, sp, #40	; 0x28
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8020cf2:	eb02 0263 	add.w	r2, r2, r3, asr #1
 8020cf6:	b292      	uxth	r2, r2
 8020cf8:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
        a.y2 = a.y1 + size.y - 1;
 8020cfc:	440a      	add	r2, r1
 8020cfe:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
        lv_draw_label_dsc_init(&label_draw_dsc);
 8020d02:	f7e7 f805 	bl	8007d10 <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 8020d06:	6963      	ldr	r3, [r4, #20]
        label_draw_dsc.color = dsc->bg_img_recolor;
        label_draw_dsc.opa = dsc->bg_img_opa;
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 8020d08:	aa08      	add	r2, sp, #32
 8020d0a:	a90a      	add	r1, sp, #40	; 0x28
 8020d0c:	4630      	mov	r0, r6
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 8020d0e:	930a      	str	r3, [sp, #40]	; 0x28
        label_draw_dsc.color = dsc->bg_img_recolor;
 8020d10:	8b23      	ldrh	r3, [r4, #24]
 8020d12:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        label_draw_dsc.opa = dsc->bg_img_opa;
 8020d16:	7ea3      	ldrb	r3, [r4, #26]
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 8020d18:	f8cd 8000 	str.w	r8, [sp]
        label_draw_dsc.opa = dsc->bg_img_opa;
 8020d1c:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 8020d20:	6923      	ldr	r3, [r4, #16]
 8020d22:	f7e7 f80d 	bl	8007d40 <lv_draw_label>
        else {
            LV_LOG_WARN("Couldn't read the background image");
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 8020d26:	60b7      	str	r7, [r6, #8]
}
 8020d28:	b012      	add	sp, #72	; 0x48
 8020d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 8020d2e:	a905      	add	r1, sp, #20
 8020d30:	6920      	ldr	r0, [r4, #16]
 8020d32:	f7e8 f939 	bl	8008fa8 <lv_img_decoder_get_info>
        if(res == LV_RES_OK) {
 8020d36:	2801      	cmp	r0, #1
 8020d38:	d1f5      	bne.n	8020d26 <draw_bg_img+0xd8>
            lv_draw_img_dsc_init(&img_dsc);
 8020d3a:	a80a      	add	r0, sp, #40	; 0x28
 8020d3c:	f7fd fd8e 	bl	801e85c <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 8020d40:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8020d44:	78a2      	ldrb	r2, [r4, #2]
 8020d46:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8020d4a:	f362 0303 	bfi	r3, r2, #0, #4
 8020d4e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            img_dsc.recolor = dsc->bg_img_recolor;
 8020d52:	8b23      	ldrh	r3, [r4, #24]
 8020d54:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 8020d58:	8b63      	ldrh	r3, [r4, #26]
 8020d5a:	ba5b      	rev16	r3, r3
 8020d5c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            if(dsc->bg_img_tiled == false) {
 8020d60:	7f23      	ldrb	r3, [r4, #28]
 8020d62:	bbab      	cbnz	r3, 8020dd0 <draw_bg_img+0x182>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020d64:	88ab      	ldrh	r3, [r5, #4]
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8020d66:	882a      	ldrh	r2, [r5, #0]
 8020d68:	3301      	adds	r3, #1
 8020d6a:	9805      	ldr	r0, [sp, #20]
 8020d6c:	1a9b      	subs	r3, r3, r2
 8020d6e:	f3c0 2e8a 	ubfx	lr, r0, #10, #11
 8020d72:	f3c0 20c9 	ubfx	r0, r0, #11, #10
 8020d76:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
                area.x2 = area.x1 + header.w - 1;
 8020d7a:	f10e 3eff 	add.w	lr, lr, #4294967295
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8020d7e:	1a12      	subs	r2, r2, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020d80:	88e8      	ldrh	r0, [r5, #6]
 8020d82:	fa0c f383 	sxtah	r3, ip, r3
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020d86:	f3c1 1c4a 	ubfx	ip, r1, #5, #11
 8020d8a:	3001      	adds	r0, #1
 8020d8c:	f3c1 1189 	ubfx	r1, r1, #6, #10
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8020d90:	eb02 0263 	add.w	r2, r2, r3, asr #1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020d94:	886b      	ldrh	r3, [r5, #2]
                area.y2 = area.y1 + header.h - 1;
 8020d96:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020d9a:	1ac0      	subs	r0, r0, r3
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020d9c:	1a5b      	subs	r3, r3, r1
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8020d9e:	b292      	uxth	r2, r2
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8020da0:	a90a      	add	r1, sp, #40	; 0x28
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020da2:	f3c0 35c0 	ubfx	r5, r0, #15, #1
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8020da6:	f8ad 2020 	strh.w	r2, [sp, #32]
                area.x2 = area.x1 + header.w - 1;
 8020daa:	4472      	add	r2, lr
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020dac:	fa05 f080 	sxtah	r0, r5, r0
                area.x2 = area.x1 + header.w - 1;
 8020db0:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8020db4:	aa08      	add	r2, sp, #32
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020db6:	eb03 0360 	add.w	r3, r3, r0, asr #1
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8020dba:	4630      	mov	r0, r6
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020dbc:	b29b      	uxth	r3, r3
 8020dbe:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
                area.y2 = area.y1 + header.h - 1;
 8020dc2:	4463      	add	r3, ip
 8020dc4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8020dc8:	6923      	ldr	r3, [r4, #16]
 8020dca:	f7e6 fe8b 	bl	8007ae4 <lv_draw_img>
 8020dce:	e7aa      	b.n	8020d26 <draw_bg_img+0xd8>
                area.y2 = area.y1 + header.h - 1;
 8020dd0:	f3c1 114a 	ubfx	r1, r1, #5, #11
                area.y1 = coords->y1;
 8020dd4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
                area.y2 = area.y1 + header.h - 1;
 8020dd8:	3901      	subs	r1, #1
                area.y1 = coords->y1;
 8020dda:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
                area.y2 = area.y1 + header.h - 1;
 8020dde:	440b      	add	r3, r1
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 8020de0:	b21b      	sxth	r3, r3
 8020de2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
                area.y2 = area.y1 + header.h - 1;
 8020de6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 8020dea:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8020dee:	429a      	cmp	r2, r3
 8020df0:	dc99      	bgt.n	8020d26 <draw_bg_img+0xd8>
                    area.x2 = area.x1 + header.w - 1;
 8020df2:	9a05      	ldr	r2, [sp, #20]
                    area.x1 = coords->x1;
 8020df4:	f9b5 3000 	ldrsh.w	r3, [r5]
                    area.x2 = area.x1 + header.w - 1;
 8020df8:	f3c2 228a 	ubfx	r2, r2, #10, #11
                    area.x1 = coords->x1;
 8020dfc:	f8ad 3020 	strh.w	r3, [sp, #32]
                    area.x2 = area.x1 + header.w - 1;
 8020e00:	3a01      	subs	r2, #1
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8020e02:	4413      	add	r3, r2
 8020e04:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020e08:	b21b      	sxth	r3, r3
                    area.x2 = area.x1 + header.w - 1;
 8020e0a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8020e0e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8020e12:	429a      	cmp	r2, r3
 8020e14:	dd0c      	ble.n	8020e30 <draw_bg_img+0x1e2>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 8020e16:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8020e1a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020e1e:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8020e22:	441a      	add	r2, r3
 8020e24:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8020e28:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8020e2c:	4413      	add	r3, r2
 8020e2e:	e7d7      	b.n	8020de0 <draw_bg_img+0x192>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8020e30:	6923      	ldr	r3, [r4, #16]
 8020e32:	aa08      	add	r2, sp, #32
 8020e34:	a90a      	add	r1, sp, #40	; 0x28
 8020e36:	4630      	mov	r0, r6
 8020e38:	f7e6 fe54 	bl	8007ae4 <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8020e3c:	9b05      	ldr	r3, [sp, #20]
 8020e3e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020e42:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8020e46:	441a      	add	r2, r3
 8020e48:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020e4c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8020e50:	e7d7      	b.n	8020e02 <draw_bg_img+0x1b4>

08020e52 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 8020e52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int32_t s_left = sw >> 1;
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 8020e56:	0045      	lsls	r5, r0, #1
    if((sw & 1) == 0) s_left--;
 8020e58:	07cb      	lsls	r3, r1, #31
    int32_t s_left = sw >> 1;
 8020e5a:	ea4f 0961 	mov.w	r9, r1, asr #1
{
 8020e5e:	b087      	sub	sp, #28
 8020e60:	4604      	mov	r4, r0
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 8020e62:	4628      	mov	r0, r5
{
 8020e64:	460e      	mov	r6, r1
 8020e66:	4617      	mov	r7, r2
    int32_t s_left = sw >> 1;
 8020e68:	46ca      	mov	sl, r9
    if((sw & 1) == 0) s_left--;
 8020e6a:	bf58      	it	pl
 8020e6c:	f109 3aff 	addpl.w	sl, r9, #4294967295
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 8020e70:	f7f1 fca2 	bl	80127b8 <lv_mem_buf_get>
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 8020e74:	1eab      	subs	r3, r5, #2
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 8020e76:	4601      	mov	r1, r0
    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 8020e78:	46b8      	mov	r8, r7
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 8020e7a:	9301      	str	r3, [sp, #4]
 8020e7c:	ea4f 0349 	mov.w	r3, r9, lsl #1
    for(y = 0; y < size; y++) {
 8020e80:	f04f 0b00 	mov.w	fp, #0
 8020e84:	9302      	str	r3, [sp, #8]
 8020e86:	f06f 0301 	mvn.w	r3, #1
 8020e8a:	fb0a 3303 	mla	r3, sl, r3, r3
 8020e8e:	9303      	str	r3, [sp, #12]
 8020e90:	455c      	cmp	r4, fp
 8020e92:	dc22      	bgt.n	8020eda <shadow_blur_corner+0x88>
    }

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
    uint32_t max_v_div = max_v / sw;
 8020e94:	f44f 5e7f 	mov.w	lr, #16320	; 0x3fc0
    for(i = 0; i < (uint32_t)size * size; i++) {
 8020e98:	fb04 fc04 	mul.w	ip, r4, r4
 8020e9c:	463a      	mov	r2, r7
 8020e9e:	463b      	mov	r3, r7
 8020ea0:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
    uint32_t max_v_div = max_v / sw;
 8020ea4:	fbbe fef6 	udiv	lr, lr, r6
    for(i = 0; i < (uint32_t)size * size; i++) {
 8020ea8:	4563      	cmp	r3, ip
 8020eaa:	d141      	bne.n	8020f30 <shadow_blur_corner+0xde>
 8020eac:	426b      	negs	r3, r5
        if(sh_ups_buf[i] == 0) continue;
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
    }

    for(x = 0; x < size; x++) {
 8020eae:	f04f 0c00 	mov.w	ip, #0
 8020eb2:	fb09 f303 	mul.w	r3, r9, r3
 8020eb6:	9305      	str	r3, [sp, #20]
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 8020eb8:	1e63      	subs	r3, r4, #1
 8020eba:	fb05 7303 	mla	r3, r5, r3, r7
 8020ebe:	9304      	str	r3, [sp, #16]
 8020ec0:	f10a 0301 	add.w	r3, sl, #1
 8020ec4:	fb0a 5a05 	mla	sl, sl, r5, r5
 8020ec8:	9302      	str	r3, [sp, #8]
    for(x = 0; x < size; x++) {
 8020eca:	4564      	cmp	r4, ip
 8020ecc:	dc3e      	bgt.n	8020f4c <shadow_blur_corner+0xfa>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 8020ece:	4608      	mov	r0, r1
}
 8020ed0:	b007      	add	sp, #28
 8020ed2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_mem_buf_release(sh_ups_blur_buf);
 8020ed6:	f7f1 bcb9 	b.w	801284c <lv_mem_buf_release>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 8020eda:	9b01      	ldr	r3, [sp, #4]
 8020edc:	9802      	ldr	r0, [sp, #8]
 8020ede:	f838 2003 	ldrh.w	r2, [r8, r3]
        for(x = size - 1; x >= 0; x--) {
 8020ee2:	1e63      	subs	r3, r4, #1
 8020ee4:	eb00 0c08 	add.w	ip, r0, r8
 8020ee8:	9803      	ldr	r0, [sp, #12]
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 8020eea:	4372      	muls	r2, r6
        for(x = size - 1; x >= 0; x--) {
 8020eec:	4440      	add	r0, r8
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 8020eee:	eb03 0e09 	add.w	lr, r3, r9
            sh_ups_blur_buf[x] = v;
 8020ef2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 8020ef6:	4574      	cmp	r4, lr
 8020ef8:	bfcc      	ite	gt
 8020efa:	f83c e013 	ldrhgt.w	lr, [ip, r3, lsl #1]
            uint32_t right_val = 0;
 8020efe:	f04f 0e00 	movle.w	lr, #0
            v -= right_val;
 8020f02:	eba2 0e0e 	sub.w	lr, r2, lr
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 8020f06:	eba3 020a 	sub.w	r2, r3, sl
 8020f0a:	2a00      	cmp	r2, #0
 8020f0c:	bfd4      	ite	le
 8020f0e:	f8b8 2000 	ldrhle.w	r2, [r8]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 8020f12:	f830 2013 	ldrhgt.w	r2, [r0, r3, lsl #1]
        for(x = size - 1; x >= 0; x--) {
 8020f16:	3b01      	subs	r3, #1
            v += left_val;
 8020f18:	4472      	add	r2, lr
        for(x = size - 1; x >= 0; x--) {
 8020f1a:	d2e8      	bcs.n	8020eee <shadow_blur_corner+0x9c>
    return memcpy(dst, src, len);
 8020f1c:	4640      	mov	r0, r8
 8020f1e:	462a      	mov	r2, r5
 8020f20:	9104      	str	r1, [sp, #16]
        sh_ups_tmp_buf += size;
 8020f22:	44a8      	add	r8, r5
 8020f24:	f7f9 fc25 	bl	801a772 <memcpy>
    for(y = 0; y < size; y++) {
 8020f28:	f10b 0b01 	add.w	fp, fp, #1
 8020f2c:	9904      	ldr	r1, [sp, #16]
 8020f2e:	e7af      	b.n	8020e90 <shadow_blur_corner+0x3e>
        if(sh_ups_buf[i] == 0) continue;
 8020f30:	f833 0b02 	ldrh.w	r0, [r3], #2
 8020f34:	2800      	cmp	r0, #0
 8020f36:	d0b7      	beq.n	8020ea8 <shadow_blur_corner+0x56>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 8020f38:	f5b0 5f7f 	cmp.w	r0, #16320	; 0x3fc0
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 8020f3c:	bf16      	itet	ne
 8020f3e:	fb90 f0f6 	sdivne	r0, r0, r6
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 8020f42:	f823 ec02 	strheq.w	lr, [r3, #-2]
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 8020f46:	f823 0c02 	strhne.w	r0, [r3, #-2]
    for(i = 0; i < (uint32_t)size * size; i++) {
 8020f4a:	e7ad      	b.n	8020ea8 <shadow_blur_corner+0x56>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8020f4c:	9805      	ldr	r0, [sp, #20]
        int32_t v = sh_ups_tmp_buf[0] * sw;
 8020f4e:	2700      	movs	r7, #0
 8020f50:	8813      	ldrh	r3, [r2, #0]
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8020f52:	4696      	mov	lr, r2
        int32_t v = sh_ups_tmp_buf[0] * sw;
 8020f54:	1810      	adds	r0, r2, r0
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8020f56:	4690      	mov	r8, r2
        int32_t v = sh_ups_tmp_buf[0] * sw;
 8020f58:	4373      	muls	r3, r6
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8020f5a:	9003      	str	r0, [sp, #12]
 8020f5c:	eb02 000a 	add.w	r0, r2, sl
 8020f60:	9001      	str	r0, [sp, #4]
 8020f62:	4638      	mov	r0, r7
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 8020f64:	2b00      	cmp	r3, #0
 8020f66:	bfac      	ite	ge
 8020f68:	f3c3 1b8f 	ubfxge	fp, r3, #6, #16
 8020f6c:	f04f 0b00 	movlt.w	fp, #0
 8020f70:	f821 b010 	strh.w	fp, [r1, r0, lsl #1]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 8020f74:	eba0 0b09 	sub.w	fp, r0, r9
 8020f78:	f1bb 0f00 	cmp.w	fp, #0
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 8020f7c:	bfcc      	ite	gt
 8020f7e:	f8dd b00c 	ldrgt.w	fp, [sp, #12]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 8020f82:	f8b8 b000 	ldrhle.w	fp, [r8]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8020f86:	44a8      	add	r8, r5
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 8020f88:	bfc8      	it	gt
 8020f8a:	f83b b007 	ldrhgt.w	fp, [fp, r7]
            v -= top_val;
 8020f8e:	eba3 0b0b 	sub.w	fp, r3, fp
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 8020f92:	9b02      	ldr	r3, [sp, #8]
 8020f94:	4403      	add	r3, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8020f96:	3001      	adds	r0, #1
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 8020f98:	429c      	cmp	r4, r3
 8020f9a:	bfca      	itet	gt
 8020f9c:	9b01      	ldrgt	r3, [sp, #4]
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 8020f9e:	9b04      	ldrle	r3, [sp, #16]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 8020fa0:	5bdb      	ldrhgt	r3, [r3, r7]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8020fa2:	442f      	add	r7, r5
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 8020fa4:	bfd8      	it	le
 8020fa6:	f833 301c 	ldrhle.w	r3, [r3, ip, lsl #1]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8020faa:	4284      	cmp	r4, r0
            v += bottom_val;
 8020fac:	445b      	add	r3, fp
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8020fae:	dcd9      	bgt.n	8020f64 <shadow_blur_corner+0x112>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8020fb0:	2300      	movs	r3, #0
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 8020fb2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8020fb6:	3301      	adds	r3, #1
 8020fb8:	429c      	cmp	r4, r3
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 8020fba:	f8ae 0000 	strh.w	r0, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8020fbe:	44ae      	add	lr, r5
 8020fc0:	dcf7      	bgt.n	8020fb2 <shadow_blur_corner+0x160>
    for(x = 0; x < size; x++) {
 8020fc2:	f10c 0c01 	add.w	ip, ip, #1
 8020fc6:	3202      	adds	r2, #2
 8020fc8:	e77f      	b.n	8020eca <shadow_blur_corner+0x78>

08020fca <draw_bg>:
{
 8020fca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8020fce:	78cb      	ldrb	r3, [r1, #3]
{
 8020fd0:	b09b      	sub	sp, #108	; 0x6c
 8020fd2:	4682      	mov	sl, r0
 8020fd4:	460c      	mov	r4, r1
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8020fd6:	2b02      	cmp	r3, #2
 8020fd8:	d95f      	bls.n	802109a <draw_bg+0xd0>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 8020fda:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
    dest->x1 = src->x1;
 8020fde:	f9b2 5000 	ldrsh.w	r5, [r2]
    dest->y1 = src->y1;
 8020fe2:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8020fe6:	2b01      	cmp	r3, #1
    dest->x2 = src->x2;
 8020fe8:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
    dest->y2 = src->y2;
 8020fec:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    dest->x1 = src->x1;
 8020ff0:	f8ad 5014 	strh.w	r5, [sp, #20]
    dest->y1 = src->y1;
 8020ff4:	f8ad 0016 	strh.w	r0, [sp, #22]
    dest->x2 = src->x2;
 8020ff8:	f8ad 1018 	strh.w	r1, [sp, #24]
    dest->y2 = src->y2;
 8020ffc:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021000:	dd1c      	ble.n	802103c <draw_bg+0x72>
 8021002:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8021006:	2bfc      	cmp	r3, #252	; 0xfc
 8021008:	d918      	bls.n	802103c <draw_bg+0x72>
 802100a:	f9b4 3000 	ldrsh.w	r3, [r4]
 802100e:	b1ab      	cbz	r3, 802103c <draw_bg+0x72>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 8021010:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8021014:	f3c3 06c0 	ubfx	r6, r3, #3, #1
 8021018:	4435      	add	r5, r6
 802101a:	f8ad 5014 	strh.w	r5, [sp, #20]
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 802101e:	f3c3 0580 	ubfx	r5, r3, #2, #1
 8021022:	4428      	add	r0, r5
 8021024:	f8ad 0016 	strh.w	r0, [sp, #22]
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8021028:	f3c3 1000 	ubfx	r0, r3, #4, #1
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 802102c:	f3c3 0340 	ubfx	r3, r3, #1, #1
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8021030:	1a09      	subs	r1, r1, r0
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 8021032:	1ad2      	subs	r2, r2, r3
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8021034:	f8ad 1018 	strh.w	r1, [sp, #24]
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 8021038:	f8ad 201a 	strh.w	r2, [sp, #26]
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 802103c:	ad05      	add	r5, sp, #20
 802103e:	f8da 2008 	ldr.w	r2, [sl, #8]
 8021042:	a807      	add	r0, sp, #28
 8021044:	4629      	mov	r1, r5
 8021046:	f003 f948 	bl	80242da <_lv_area_intersect>
 802104a:	b330      	cbz	r0, 802109a <draw_bg+0xd0>
    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 802104c:	7be6      	ldrb	r6, [r4, #15]
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 802104e:	4628      	mov	r0, r5
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 8021050:	8963      	ldrh	r3, [r4, #10]
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 8021052:	f016 0607 	ands.w	r6, r6, #7
 8021056:	bf0c      	ite	eq
 8021058:	f8b4 8004 	ldrheq.w	r8, [r4, #4]
 802105c:	f8b4 8006 	ldrhne.w	r8, [r4, #6]
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 8021060:	4543      	cmp	r3, r8
 8021062:	bf08      	it	eq
 8021064:	2600      	moveq	r6, #0
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 8021066:	f7e7 f98d 	bl	8008384 <lv_draw_mask_is_any>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 802106a:	221c      	movs	r2, #28
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 802106c:	4607      	mov	r7, r0
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 802106e:	2100      	movs	r1, #0
 8021070:	a813      	add	r0, sp, #76	; 0x4c
 8021072:	f7f9 fb89 	bl	801a788 <memset>
    blend_dsc.blend_mode = dsc->blend_mode;
 8021076:	78a3      	ldrb	r3, [r4, #2]
 8021078:	78e2      	ldrb	r2, [r4, #3]
 802107a:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
    blend_dsc.color = bg_color;
 802107e:	f8ad 8054 	strh.w	r8, [sp, #84]	; 0x54
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 8021082:	f9b4 3000 	ldrsh.w	r3, [r4]
 8021086:	b95f      	cbnz	r7, 80210a0 <draw_bg+0xd6>
 8021088:	b953      	cbnz	r3, 80210a0 <draw_bg+0xd6>
 802108a:	b94e      	cbnz	r6, 80210a0 <draw_bg+0xd6>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802108c:	a913      	add	r1, sp, #76	; 0x4c
 802108e:	4650      	mov	r0, sl
        blend_dsc.blend_area = &bg_coords;
 8021090:	9513      	str	r5, [sp, #76]	; 0x4c
        blend_dsc.opa = dsc->bg_opa;
 8021092:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021096:	f7ff f9d0 	bl	802043a <lv_draw_sw_blend>
}
 802109a:	b01b      	add	sp, #108	; 0x6c
 802109c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
 80210a0:	2afd      	cmp	r2, #253	; 0xfd
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80210a2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80210a6:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80210aa:	bf28      	it	cs
 80210ac:	22ff      	movcs	r2, #255	; 0xff
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80210ae:	3501      	adds	r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80210b0:	f10b 0b01 	add.w	fp, fp, #1
 80210b4:	9201      	str	r2, [sp, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80210b6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80210ba:	1aad      	subs	r5, r5, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80210bc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80210c0:	ebab 0b02 	sub.w	fp, fp, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80210c4:	b22d      	sxth	r5, r5
 80210c6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80210ca:	fa0f fb8b 	sxth.w	fp, fp
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 80210ce:	45ab      	cmp	fp, r5
 80210d0:	46d9      	mov	r9, fp
 80210d2:	bfa8      	it	ge
 80210d4:	46a9      	movge	r9, r5
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 80210d6:	ea4f 0969 	mov.w	r9, r9, asr #1
 80210da:	4599      	cmp	r9, r3
 80210dc:	bfa8      	it	ge
 80210de:	4699      	movge	r9, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80210e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80210e4:	3301      	adds	r3, #1
    if(rout > 0 || mask_any) {
 80210e6:	f1b9 0f00 	cmp.w	r9, #0
 80210ea:	eba3 0302 	sub.w	r3, r3, r2
 80210ee:	b21b      	sxth	r3, r3
 80210f0:	9300      	str	r3, [sp, #0]
 80210f2:	dc01      	bgt.n	80210f8 <draw_bg+0x12e>
 80210f4:	2f00      	cmp	r7, #0
 80210f6:	d04f      	beq.n	8021198 <draw_bg+0x1ce>
        mask_buf = lv_mem_buf_get(clipped_w);
 80210f8:	9800      	ldr	r0, [sp, #0]
 80210fa:	f7f1 fb5d 	bl	80127b8 <lv_mem_buf_get>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 80210fe:	2300      	movs	r3, #0
 8021100:	464a      	mov	r2, r9
 8021102:	a905      	add	r1, sp, #20
        mask_buf = lv_mem_buf_get(clipped_w);
 8021104:	4680      	mov	r8, r0
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 8021106:	a80d      	add	r0, sp, #52	; 0x34
 8021108:	f7e7 fa46 	bl	8008598 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 802110c:	2100      	movs	r1, #0
 802110e:	a80d      	add	r0, sp, #52	; 0x34
 8021110:	f7e7 f8ca 	bl	80082a8 <lv_draw_mask_add>
 8021114:	9002      	str	r0, [sp, #8]
    blend_area.x1 = clipped_coords.x1;
 8021116:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 802111a:	465a      	mov	r2, fp
 802111c:	4629      	mov	r1, r5
 802111e:	1da0      	adds	r0, r4, #6
    blend_area.x1 = clipped_coords.x1;
 8021120:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    blend_area.x2 = clipped_coords.x2;
 8021124:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    blend_dsc.mask_buf = mask_buf;
 8021128:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
    blend_area.x2 = clipped_coords.x2;
 802112c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    blend_dsc.blend_area = &blend_area;
 8021130:	ab09      	add	r3, sp, #36	; 0x24
 8021132:	9313      	str	r3, [sp, #76]	; 0x4c
    blend_dsc.mask_area = &blend_area;
 8021134:	9318      	str	r3, [sp, #96]	; 0x60
    blend_dsc.opa = LV_OPA_COVER;
 8021136:	23ff      	movs	r3, #255	; 0xff
 8021138:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 802113c:	f7e8 fda0 	bl	8009c80 <lv_gradient_get>
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 8021140:	4683      	mov	fp, r0
 8021142:	b150      	cbz	r0, 802115a <draw_bg+0x190>
 8021144:	2e02      	cmp	r6, #2
 8021146:	d108      	bne.n	802115a <draw_bg+0x190>
        blend_dsc.src_buf = grad->map + clipped_coords.x1 - bg_coords.x1;
 8021148:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802114c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8021150:	1ad2      	subs	r2, r2, r3
 8021152:	6883      	ldr	r3, [r0, #8]
 8021154:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8021158:	9314      	str	r3, [sp, #80]	; 0x50
    if(mask_any) {
 802115a:	2f00      	cmp	r7, #0
 802115c:	f000 8095 	beq.w	802128a <draw_bg+0x2c0>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 8021160:	f9bd 401e 	ldrsh.w	r4, [sp, #30]
 8021164:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021168:	42a3      	cmp	r3, r4
 802116a:	da1a      	bge.n	80211a2 <draw_bg+0x1d8>
    if(mask_buf) lv_mem_buf_release(mask_buf);
 802116c:	f1b8 0f00 	cmp.w	r8, #0
 8021170:	d002      	beq.n	8021178 <draw_bg+0x1ae>
 8021172:	4640      	mov	r0, r8
 8021174:	f7f1 fb6a 	bl	801284c <lv_mem_buf_release>
    if(mask_rout_id != LV_MASK_ID_INV) {
 8021178:	9b02      	ldr	r3, [sp, #8]
 802117a:	1c5a      	adds	r2, r3, #1
 802117c:	d005      	beq.n	802118a <draw_bg+0x1c0>
        lv_draw_mask_remove_id(mask_rout_id);
 802117e:	4618      	mov	r0, r3
 8021180:	f7e7 f8c8 	bl	8008314 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_rout_param);
 8021184:	a80d      	add	r0, sp, #52	; 0x34
 8021186:	f7fe f901 	bl	801f38c <lv_draw_mask_free_param>
    if(grad) {
 802118a:	f1bb 0f00 	cmp.w	fp, #0
 802118e:	d084      	beq.n	802109a <draw_bg+0xd0>
        lv_gradient_cleanup(grad);
 8021190:	4658      	mov	r0, fp
 8021192:	f7ff fa01 	bl	8020598 <lv_gradient_cleanup>
 8021196:	e780      	b.n	802109a <draw_bg+0xd0>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8021198:	f04f 33ff 	mov.w	r3, #4294967295
    lv_opa_t * mask_buf = NULL;
 802119c:	46b8      	mov	r8, r7
    int16_t mask_rout_id = LV_MASK_ID_INV;
 802119e:	9302      	str	r3, [sp, #8]
 80211a0:	e7b9      	b.n	8021116 <draw_bg+0x14c>
            blend_area.y1 = h;
 80211a2:	b225      	sxth	r5, r4
    memset(dst, v, len);
 80211a4:	4640      	mov	r0, r8
 80211a6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80211aa:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
            blend_area.y2 = h;
 80211ae:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 80211b2:	f7f9 fae9 	bl	801a788 <memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 80211b6:	9b00      	ldr	r3, [sp, #0]
 80211b8:	462a      	mov	r2, r5
 80211ba:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 80211be:	4640      	mov	r0, r8
 80211c0:	f7e7 f888 	bl	80082d4 <lv_draw_mask_apply>
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80211c4:	2801      	cmp	r0, #1
 80211c6:	bf08      	it	eq
 80211c8:	2002      	moveq	r0, #2
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 80211ca:	2e01      	cmp	r6, #1
 80211cc:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
 80211d0:	d108      	bne.n	80211e4 <draw_bg+0x21a>
 80211d2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80211d6:	f8db 2008 	ldr.w	r2, [fp, #8]
 80211da:	1ae3      	subs	r3, r4, r3
 80211dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80211e0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80211e4:	a913      	add	r1, sp, #76	; 0x4c
 80211e6:	4650      	mov	r0, sl
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 80211e8:	3401      	adds	r4, #1
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80211ea:	f7ff f926 	bl	802043a <lv_draw_sw_blend>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 80211ee:	e7b9      	b.n	8021164 <draw_bg+0x19a>
        lv_coord_t top_y = bg_coords.y1 + h;
 80211f0:	fa14 f487 	uxtah	r4, r4, r7
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 80211f4:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
        lv_coord_t bottom_y = bg_coords.y2 - h;
 80211f8:	1bed      	subs	r5, r5, r7
        lv_coord_t top_y = bg_coords.y1 + h;
 80211fa:	b224      	sxth	r4, r4
        lv_coord_t bottom_y = bg_coords.y2 - h;
 80211fc:	b22d      	sxth	r5, r5
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 80211fe:	42a3      	cmp	r3, r4
 8021200:	dd03      	ble.n	802120a <draw_bg+0x240>
 8021202:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021206:	42ab      	cmp	r3, r5
 8021208:	db3e      	blt.n	8021288 <draw_bg+0x2be>
 802120a:	4640      	mov	r0, r8
 802120c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8021210:	f7f9 faba 	bl	801a788 <memset>
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 8021214:	9b00      	ldr	r3, [sp, #0]
 8021216:	4622      	mov	r2, r4
 8021218:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 802121c:	4640      	mov	r0, r8
 802121e:	f7e7 f859 	bl	80082d4 <lv_draw_mask_apply>
        if(top_y >= clipped_coords.y1) {
 8021222:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8021226:	2801      	cmp	r0, #1
 8021228:	bf08      	it	eq
 802122a:	2002      	moveq	r0, #2
        if(top_y >= clipped_coords.y1) {
 802122c:	42a3      	cmp	r3, r4
 802122e:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
 8021232:	dc12      	bgt.n	802125a <draw_bg+0x290>
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 8021234:	2e01      	cmp	r6, #1
            blend_area.y1 = top_y;
 8021236:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
            blend_area.y2 = top_y;
 802123a:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 802123e:	d108      	bne.n	8021252 <draw_bg+0x288>
 8021240:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8021244:	1ae4      	subs	r4, r4, r3
 8021246:	f8db 3008 	ldr.w	r3, [fp, #8]
 802124a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 802124e:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021252:	a913      	add	r1, sp, #76	; 0x4c
 8021254:	4650      	mov	r0, sl
 8021256:	f7ff f8f0 	bl	802043a <lv_draw_sw_blend>
        if(bottom_y <= clipped_coords.y2) {
 802125a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802125e:	42ab      	cmp	r3, r5
 8021260:	db12      	blt.n	8021288 <draw_bg+0x2be>
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 8021262:	2e01      	cmp	r6, #1
            blend_area.y1 = bottom_y;
 8021264:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
            blend_area.y2 = bottom_y;
 8021268:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 802126c:	d108      	bne.n	8021280 <draw_bg+0x2b6>
 802126e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8021272:	1aed      	subs	r5, r5, r3
 8021274:	f8db 3008 	ldr.w	r3, [fp, #8]
 8021278:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 802127c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021280:	a913      	add	r1, sp, #76	; 0x4c
 8021282:	4650      	mov	r0, sl
 8021284:	f7ff f8d9 	bl	802043a <lv_draw_sw_blend>
    for(h = 0; h < rout; h++) {
 8021288:	3701      	adds	r7, #1
 802128a:	454f      	cmp	r7, r9
        lv_coord_t top_y = bg_coords.y1 + h;
 802128c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
        lv_coord_t bottom_y = bg_coords.y2 - h;
 8021290:	f8bd 501a 	ldrh.w	r5, [sp, #26]
    for(h = 0; h < rout; h++) {
 8021294:	dbac      	blt.n	80211f0 <draw_bg+0x226>
    center_coords.x1 = bg_coords.x1;
 8021296:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    center_coords.y1 = bg_coords.y1 + rout;
 802129a:	fa1f f789 	uxth.w	r7, r9
 802129e:	fa14 f489 	uxtah	r4, r4, r9
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 80212a2:	a80b      	add	r0, sp, #44	; 0x2c
    center_coords.y2 = bg_coords.y2 - rout;
 80212a4:	1bed      	subs	r5, r5, r7
    center_coords.x1 = bg_coords.x1;
 80212a6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    center_coords.x2 = bg_coords.x2;
 80212aa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    center_coords.y2 = bg_coords.y2 - rout;
 80212ae:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
    center_coords.x2 = bg_coords.x2;
 80212b2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    center_coords.y1 = bg_coords.y1 + rout;
 80212b6:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 80212ba:	f7e7 f863 	bl	8008384 <lv_draw_mask_is_any>
    if(!mask_any_center && grad_dir == LV_GRAD_DIR_NONE) {
 80212be:	4605      	mov	r5, r0
 80212c0:	b998      	cbnz	r0, 80212ea <draw_bg+0x320>
 80212c2:	b996      	cbnz	r6, 80212ea <draw_bg+0x320>
        blend_area.y1 = bg_coords.y1 + rout;
 80212c4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80212c8:	a913      	add	r1, sp, #76	; 0x4c
 80212ca:	4650      	mov	r0, sl
        blend_dsc.mask_buf = NULL;
 80212cc:	9616      	str	r6, [sp, #88]	; 0x58
        blend_area.y1 = bg_coords.y1 + rout;
 80212ce:	443b      	add	r3, r7
 80212d0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        blend_area.y2 = bg_coords.y2 - rout;
 80212d4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80212d8:	1bdb      	subs	r3, r3, r7
 80212da:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        blend_dsc.opa = opa;
 80212de:	9b01      	ldr	r3, [sp, #4]
 80212e0:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80212e4:	f7ff f8a9 	bl	802043a <lv_draw_sw_blend>
 80212e8:	e740      	b.n	802116c <draw_bg+0x1a2>
        blend_dsc.opa = opa;
 80212ea:	9b01      	ldr	r3, [sp, #4]
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 80212ec:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
        blend_dsc.opa = opa;
 80212f0:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 80212f4:	2301      	movs	r3, #1
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 80212f6:	444c      	add	r4, r9
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 80212f8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        int32_t h_end = bg_coords.y2 - rout;
 80212fc:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8021300:	eba3 0309 	sub.w	r3, r3, r9
 8021304:	9303      	str	r3, [sp, #12]
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 8021306:	9b03      	ldr	r3, [sp, #12]
 8021308:	429c      	cmp	r4, r3
 802130a:	f73f af2f 	bgt.w	802116c <draw_bg+0x1a2>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 802130e:	b227      	sxth	r7, r4
            if(mask_any_center) {
 8021310:	b16d      	cbz	r5, 802132e <draw_bg+0x364>
 8021312:	4640      	mov	r0, r8
 8021314:	e9dd 2100 	ldrd	r2, r1, [sp]
 8021318:	f7f9 fa36 	bl	801a788 <memset>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 802131c:	9b00      	ldr	r3, [sp, #0]
 802131e:	463a      	mov	r2, r7
 8021320:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8021324:	4640      	mov	r0, r8
 8021326:	f7e6 ffd5 	bl	80082d4 <lv_draw_mask_apply>
 802132a:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 802132e:	2e01      	cmp	r6, #1
            blend_area.y1 = h;
 8021330:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
            blend_area.y2 = h;
 8021334:	f8ad 702a 	strh.w	r7, [sp, #42]	; 0x2a
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 8021338:	d108      	bne.n	802134c <draw_bg+0x382>
 802133a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 802133e:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021342:	1ae3      	subs	r3, r4, r3
 8021344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021348:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802134c:	a913      	add	r1, sp, #76	; 0x4c
 802134e:	4650      	mov	r0, sl
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 8021350:	3401      	adds	r4, #1
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021352:	f7ff f872 	bl	802043a <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 8021356:	e7d6      	b.n	8021306 <draw_bg+0x33c>

08021358 <lv_draw_sw_bg>:
{
 8021358:	b570      	push	{r4, r5, r6, lr}
 802135a:	4604      	mov	r4, r0
 802135c:	460d      	mov	r5, r1
 802135e:	4616      	mov	r6, r2
    draw_bg(draw_ctx, dsc, coords);
 8021360:	f7ff fe33 	bl	8020fca <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 8021364:	4629      	mov	r1, r5
 8021366:	4620      	mov	r0, r4
 8021368:	4632      	mov	r2, r6
}
 802136a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    draw_bg_img(draw_ctx, dsc, coords);
 802136e:	f7ff bc6e 	b.w	8020c4e <draw_bg_img>

08021372 <draw_border_generic>:
                        dsc->blend_mode);
}

void draw_border_generic(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         lv_coord_t rout, lv_coord_t rin, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 8021372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021376:	b0a7      	sub	sp, #156	; 0x9c
 8021378:	4683      	mov	fp, r0
    opa = opa >= LV_OPA_COVER ? LV_OPA_COVER : opa;

    bool mask_any = lv_draw_mask_is_any(outer_area);
 802137a:	4608      	mov	r0, r1
{
 802137c:	460c      	mov	r4, r1
 802137e:	4615      	mov	r5, r2
 8021380:	461e      	mov	r6, r3
 8021382:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	; 0xc0
 8021386:	f8bd 90c4 	ldrh.w	r9, [sp, #196]	; 0xc4
 802138a:	f89d 80c8 	ldrb.w	r8, [sp, #200]	; 0xc8
    bool mask_any = lv_draw_mask_is_any(outer_area);
 802138e:	f7e6 fff9 	bl	8008384 <lv_draw_mask_is_any>

#if LV_DRAW_COMPLEX

    if(!mask_any && rout == 0 && rin == 0) {
 8021392:	900c      	str	r0, [sp, #48]	; 0x30
 8021394:	2800      	cmp	r0, #0
 8021396:	d16e      	bne.n	8021476 <draw_border_generic+0x104>
 8021398:	ea56 0107 	orrs.w	r1, r6, r7
 802139c:	d16b      	bne.n	8021476 <draw_border_generic+0x104>
    memset(dst, 0x00, len);
 802139e:	221c      	movs	r2, #28
 80213a0:	a81f      	add	r0, sp, #124	; 0x7c
 80213a2:	f7f9 f9f1 	bl	801a788 <memset>
                               lv_color_t color, lv_opa_t opa)
{
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
    blend_dsc.blend_area = &a;
 80213a6:	ab19      	add	r3, sp, #100	; 0x64
    blend_dsc.color = color;
    blend_dsc.opa = opa;

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 80213a8:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
    blend_dsc.blend_area = &a;
 80213ac:	931f      	str	r3, [sp, #124]	; 0x7c
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 80213ae:	f9b5 3000 	ldrsh.w	r3, [r5]
    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 80213b2:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 80213b6:	9301      	str	r3, [sp, #4]
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 80213b8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]

    /*Top*/
    a.x1 = outer_area->x1;
    a.x2 = outer_area->x2;
    a.y1 = outer_area->y1;
    a.y2 = inner_area->y1 - 1;
 80213bc:	f10a 31ff 	add.w	r1, sl, #4294967295
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 80213c0:	f9b4 7000 	ldrsh.w	r7, [r4]
    if(top_side) {
 80213c4:	4556      	cmp	r6, sl
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 80213c6:	9300      	str	r3, [sp, #0]
 80213c8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
    blend_dsc.color = color;
 80213cc:	f8ad 9084 	strh.w	r9, [sp, #132]	; 0x84
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 80213d0:	9302      	str	r3, [sp, #8]
    a.x2 = outer_area->x2;
 80213d2:	9b00      	ldr	r3, [sp, #0]
    blend_dsc.opa = opa;
 80213d4:	f88d 8094 	strb.w	r8, [sp, #148]	; 0x94
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 80213d8:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
 80213dc:	f9b5 8006 	ldrsh.w	r8, [r5, #6]
    a.x1 = outer_area->x1;
 80213e0:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
    a.x2 = outer_area->x2;
 80213e4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = outer_area->y1;
 80213e8:	f8ad 6066 	strh.w	r6, [sp, #102]	; 0x66
    a.y2 = inner_area->y1 - 1;
 80213ec:	f8ad 106a 	strh.w	r1, [sp, #106]	; 0x6a
    if(top_side) {
 80213f0:	dc03      	bgt.n	80213fa <draw_border_generic+0x88>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80213f2:	a91f      	add	r1, sp, #124	; 0x7c
 80213f4:	4658      	mov	r0, fp
 80213f6:	f7ff f820 	bl	802043a <lv_draw_sw_blend>
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 80213fa:	88e9      	ldrh	r1, [r5, #6]
    a.y2 = outer_area->y2;
    if(bottom_side) {
 80213fc:	45c1      	cmp	r9, r8
    a.y1 = inner_area->y2 + 1;
 80213fe:	f101 0101 	add.w	r1, r1, #1
 8021402:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
    a.y2 = outer_area->y2;
 8021406:	88e1      	ldrh	r1, [r4, #6]
 8021408:	f8ad 106a 	strh.w	r1, [sp, #106]	; 0x6a
    if(bottom_side) {
 802140c:	db03      	blt.n	8021416 <draw_border_generic+0xa4>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802140e:	a91f      	add	r1, sp, #124	; 0x7c
 8021410:	4658      	mov	r0, fp
 8021412:	f7ff f812 	bl	802043a <lv_draw_sw_blend>
    }

    /*Left*/
    a.x1 = outer_area->x1;
    a.x2 = inner_area->x1 - 1;
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 8021416:	4556      	cmp	r6, sl
    a.x1 = outer_area->x1;
 8021418:	8821      	ldrh	r1, [r4, #0]
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 802141a:	bfd4      	ite	le
 802141c:	f9b5 3002 	ldrshle.w	r3, [r5, #2]
 8021420:	f9b4 3002 	ldrshgt.w	r3, [r4, #2]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 8021424:	45c1      	cmp	r9, r8
    a.x1 = outer_area->x1;
 8021426:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 802142a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 802142e:	bfac      	ite	ge
 8021430:	f9b5 3006 	ldrshge.w	r3, [r5, #6]
 8021434:	f9b4 3006 	ldrshlt.w	r3, [r4, #6]
    a.x2 = inner_area->x1 - 1;
 8021438:	8829      	ldrh	r1, [r5, #0]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 802143a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(left_side) {
 802143e:	9b01      	ldr	r3, [sp, #4]
    a.x2 = inner_area->x1 - 1;
 8021440:	3901      	subs	r1, #1
    if(left_side) {
 8021442:	429f      	cmp	r7, r3
    a.x2 = inner_area->x1 - 1;
 8021444:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    if(left_side) {
 8021448:	dc03      	bgt.n	8021452 <draw_border_generic+0xe0>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802144a:	a91f      	add	r1, sp, #124	; 0x7c
 802144c:	4658      	mov	r0, fp
 802144e:	f7fe fff4 	bl	802043a <lv_draw_sw_blend>
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 8021452:	88ab      	ldrh	r3, [r5, #4]
    a.x2 = outer_area->x2;
    if(right_side) {
 8021454:	9a02      	ldr	r2, [sp, #8]
    a.x1 = inner_area->x2 + 1;
 8021456:	3301      	adds	r3, #1
 8021458:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = outer_area->x2;
 802145c:	88a3      	ldrh	r3, [r4, #4]
 802145e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    if(right_side) {
 8021462:	9b00      	ldr	r3, [sp, #0]
 8021464:	4293      	cmp	r3, r2
 8021466:	db03      	blt.n	8021470 <draw_border_generic+0xfe>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021468:	a91f      	add	r1, sp, #124	; 0x7c
 802146a:	4658      	mov	r0, fp
 802146c:	f7fe ffe5 	bl	802043a <lv_draw_sw_blend>
}
 8021470:	b027      	add	sp, #156	; 0x9c
 8021472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 8021476:	f8db 2008 	ldr.w	r2, [fp, #8]
 802147a:	4621      	mov	r1, r4
 802147c:	a80f      	add	r0, sp, #60	; 0x3c
 802147e:	f002 ff2c 	bl	80242da <_lv_area_intersect>
 8021482:	9008      	str	r0, [sp, #32]
 8021484:	2800      	cmp	r0, #0
 8021486:	d0f3      	beq.n	8021470 <draw_border_generic+0xfe>
 8021488:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802148c:	2100      	movs	r1, #0
 802148e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8021492:	a81f      	add	r0, sp, #124	; 0x7c
 8021494:	3301      	adds	r3, #1
 8021496:	1a9b      	subs	r3, r3, r2
 8021498:	221c      	movs	r2, #28
 802149a:	fa0f fa83 	sxth.w	sl, r3
 802149e:	f7f9 f973 	bl	801a788 <memset>
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 80214a2:	4650      	mov	r0, sl
 80214a4:	f7f1 f988 	bl	80127b8 <lv_mem_buf_get>
    if(rout > 0) {
 80214a8:	2e00      	cmp	r6, #0
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 80214aa:	9022      	str	r0, [sp, #136]	; 0x88
    if(rout > 0) {
 80214ac:	dd68      	ble.n	8021580 <draw_border_generic+0x20e>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 80214ae:	2300      	movs	r3, #0
 80214b0:	4632      	mov	r2, r6
 80214b2:	4621      	mov	r1, r4
 80214b4:	a813      	add	r0, sp, #76	; 0x4c
 80214b6:	f7e7 f86f 	bl	8008598 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 80214ba:	2100      	movs	r1, #0
 80214bc:	a813      	add	r0, sp, #76	; 0x4c
 80214be:	f7e6 fef3 	bl	80082a8 <lv_draw_mask_add>
 80214c2:	9007      	str	r0, [sp, #28]
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 80214c4:	2301      	movs	r3, #1
 80214c6:	463a      	mov	r2, r7
 80214c8:	4629      	mov	r1, r5
 80214ca:	a819      	add	r0, sp, #100	; 0x64
 80214cc:	f7e7 f864 	bl	8008598 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 80214d0:	2100      	movs	r1, #0
 80214d2:	a819      	add	r0, sp, #100	; 0x64
 80214d4:	f7e6 fee8 	bl	80082a8 <lv_draw_mask_add>
    blend_dsc.blend_area = &blend_area;
 80214d8:	ab11      	add	r3, sp, #68	; 0x44
    blend_dsc.color = color;
 80214da:	f8ad 9084 	strh.w	r9, [sp, #132]	; 0x84
    blend_dsc.blend_area = &blend_area;
 80214de:	931f      	str	r3, [sp, #124]	; 0x7c
    blend_dsc.mask_area = &blend_area;
 80214e0:	9324      	str	r3, [sp, #144]	; 0x90
    blend_dsc.blend_mode = blend_mode;
 80214e2:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 80214e6:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
    blend_dsc.blend_mode = blend_mode;
 80214ea:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 80214ee:	f9b5 3000 	ldrsh.w	r3, [r5]
    blend_dsc.opa = opa;
 80214f2:	f88d 8094 	strb.w	r8, [sp, #148]	; 0x94
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 80214f6:	9303      	str	r3, [sp, #12]
 80214f8:	f9b4 3000 	ldrsh.w	r3, [r4]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 80214fc:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 8021500:	9304      	str	r3, [sp, #16]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 8021502:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 8021506:	f9b5 7006 	ldrsh.w	r7, [r5, #6]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 802150a:	9300      	str	r3, [sp, #0]
 802150c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 8021510:	900d      	str	r0, [sp, #52]	; 0x34
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 8021512:	9301      	str	r3, [sp, #4]
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 8021514:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8021518:	9302      	str	r3, [sp, #8]
 802151a:	4433      	add	r3, r6
 802151c:	454b      	cmp	r3, r9
 802151e:	bfb8      	it	lt
 8021520:	464b      	movlt	r3, r9
 8021522:	b21b      	sxth	r3, r3
 8021524:	9305      	str	r3, [sp, #20]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 8021526:	eba8 0306 	sub.w	r3, r8, r6
 802152a:	42bb      	cmp	r3, r7
 802152c:	bfa8      	it	ge
 802152e:	463b      	movge	r3, r7
 8021530:	930b      	str	r3, [sp, #44]	; 0x2c
 8021532:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8021536:	9306      	str	r3, [sp, #24]
    if(mask_any) {
 8021538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802153a:	2b00      	cmp	r3, #0
 802153c:	d047      	beq.n	80215ce <draw_border_generic+0x25c>
        blend_area.x1 = draw_area.x1;
 802153e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8021542:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	; 0x3e
        blend_area.x1 = draw_area.x1;
 8021546:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        blend_area.x2 = draw_area.x2;
 802154a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802154e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8021552:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8021556:	42a3      	cmp	r3, r4
 8021558:	da16      	bge.n	8021588 <draw_border_generic+0x216>
        lv_draw_mask_free_param(&mask_rin_param);
 802155a:	a819      	add	r0, sp, #100	; 0x64
 802155c:	f7fd ff16 	bl	801f38c <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rin_id);
 8021560:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021562:	f7e6 fed7 	bl	8008314 <lv_draw_mask_remove_id>
        if(mask_rout_id != LV_MASK_ID_INV) {
 8021566:	9b07      	ldr	r3, [sp, #28]
 8021568:	3301      	adds	r3, #1
 802156a:	d005      	beq.n	8021578 <draw_border_generic+0x206>
            lv_draw_mask_free_param(&mask_rout_param);
 802156c:	a813      	add	r0, sp, #76	; 0x4c
 802156e:	f7fd ff0d 	bl	801f38c <lv_draw_mask_free_param>
            lv_draw_mask_remove_id(mask_rout_id);
 8021572:	9807      	ldr	r0, [sp, #28]
 8021574:	f7e6 fece 	bl	8008314 <lv_draw_mask_remove_id>
        lv_mem_buf_release(blend_dsc.mask_buf);
 8021578:	9822      	ldr	r0, [sp, #136]	; 0x88
 802157a:	f7f1 f967 	bl	801284c <lv_mem_buf_release>
        return;
 802157e:	e777      	b.n	8021470 <draw_border_generic+0xfe>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8021580:	f04f 33ff 	mov.w	r3, #4294967295
 8021584:	9307      	str	r3, [sp, #28]
 8021586:	e79d      	b.n	80214c4 <draw_border_generic+0x152>
            if(!top_side && h < core_area.y1) continue;
 8021588:	9b02      	ldr	r3, [sp, #8]
 802158a:	4599      	cmp	r9, r3
 802158c:	da02      	bge.n	8021594 <draw_border_generic+0x222>
 802158e:	9b05      	ldr	r3, [sp, #20]
 8021590:	42a3      	cmp	r3, r4
 8021592:	dc1a      	bgt.n	80215ca <draw_border_generic+0x258>
            if(!bottom_side && h > core_area.y2) break;
 8021594:	4547      	cmp	r7, r8
 8021596:	dd02      	ble.n	802159e <draw_border_generic+0x22c>
 8021598:	9b06      	ldr	r3, [sp, #24]
 802159a:	42a3      	cmp	r3, r4
 802159c:	dbdd      	blt.n	802155a <draw_border_generic+0x1e8>
            blend_area.y1 = h;
 802159e:	b225      	sxth	r5, r4
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 80215a0:	4651      	mov	r1, sl
 80215a2:	9822      	ldr	r0, [sp, #136]	; 0x88
            blend_area.y1 = h;
 80215a4:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
            blend_area.y2 = h;
 80215a8:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 80215ac:	f7ff fb4b 	bl	8020c46 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 80215b0:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80215b4:	4653      	mov	r3, sl
 80215b6:	462a      	mov	r2, r5
 80215b8:	9822      	ldr	r0, [sp, #136]	; 0x88
 80215ba:	f7e6 fe8b 	bl	80082d4 <lv_draw_mask_apply>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80215be:	a91f      	add	r1, sp, #124	; 0x7c
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 80215c0:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80215c4:	4658      	mov	r0, fp
 80215c6:	f7fe ff38 	bl	802043a <lv_draw_sw_blend>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80215ca:	3401      	adds	r4, #1
 80215cc:	e7c1      	b.n	8021552 <draw_border_generic+0x1e0>
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 80215ce:	9b04      	ldr	r3, [sp, #16]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 80215d0:	9900      	ldr	r1, [sp, #0]
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 80215d2:	199a      	adds	r2, r3, r6
 80215d4:	9b03      	ldr	r3, [sp, #12]
 80215d6:	429a      	cmp	r2, r3
 80215d8:	bfb8      	it	lt
 80215da:	461a      	movlt	r2, r3
 80215dc:	b213      	sxth	r3, r2
 80215de:	9309      	str	r3, [sp, #36]	; 0x24
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 80215e0:	9b01      	ldr	r3, [sp, #4]
 80215e2:	1b9b      	subs	r3, r3, r6
 80215e4:	428b      	cmp	r3, r1
 80215e6:	bfa8      	it	ge
 80215e8:	460b      	movge	r3, r1
 80215ea:	b219      	sxth	r1, r3
 80215ec:	910a      	str	r1, [sp, #40]	; 0x28
    if(left_side && right_side && top_side && bottom_side &&
 80215ee:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80215f2:	4281      	cmp	r1, r0
 80215f4:	da1e      	bge.n	8021634 <draw_border_generic+0x2c2>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 80215f6:	2301      	movs	r3, #1
 80215f8:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
    if(top_side && split_hor) {
 80215fc:	9b02      	ldr	r3, [sp, #8]
 80215fe:	4599      	cmp	r9, r3
 8021600:	da3b      	bge.n	802167a <draw_border_generic+0x308>
    if(bottom_side && split_hor) {
 8021602:	4547      	cmp	r7, r8
 8021604:	dd23      	ble.n	802164e <draw_border_generic+0x2dc>
    if(right_side) {
 8021606:	e9dd 3200 	ldrd	r3, r2, [sp]
 802160a:	4293      	cmp	r3, r2
 802160c:	f300 80c8 	bgt.w	80217a0 <draw_border_generic+0x42e>
        blend_area.x1 = inner_area->x2 + 1;
 8021610:	88ab      	ldrh	r3, [r5, #4]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021612:	a91f      	add	r1, sp, #124	; 0x7c
 8021614:	4658      	mov	r0, fp
        blend_area.x1 = inner_area->x2 + 1;
 8021616:	3301      	adds	r3, #1
 8021618:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        blend_area.x2 = outer_area->x2;
 802161c:	88a3      	ldrh	r3, [r4, #4]
 802161e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        blend_area.y1 = core_area.y1;
 8021622:	9b05      	ldr	r3, [sp, #20]
 8021624:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_area.y2 = core_area.y2;
 8021628:	9b06      	ldr	r3, [sp, #24]
 802162a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802162e:	f7fe ff04 	bl	802043a <lv_draw_sw_blend>
 8021632:	e058      	b.n	80216e6 <draw_border_generic+0x374>
    if(left_side && right_side && top_side && bottom_side &&
 8021634:	e9dd 1000 	ldrd	r1, r0, [sp]
 8021638:	4281      	cmp	r1, r0
 802163a:	dc72      	bgt.n	8021722 <draw_border_generic+0x3b0>
 802163c:	9902      	ldr	r1, [sp, #8]
 802163e:	4589      	cmp	r9, r1
 8021640:	f04f 0101 	mov.w	r1, #1
 8021644:	da15      	bge.n	8021672 <draw_border_generic+0x300>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8021646:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
    if(bottom_side && split_hor) {
 802164a:	4547      	cmp	r7, r8
 802164c:	dc36      	bgt.n	80216bc <draw_border_generic+0x34a>
        blend_area.x1 = core_area.x1;
 802164e:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021650:	a91f      	add	r1, sp, #124	; 0x7c
 8021652:	4658      	mov	r0, fp
        blend_area.x1 = core_area.x1;
 8021654:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        blend_area.x2 = core_area.x2;
 8021658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802165a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        blend_area.y1 = inner_area->y2 + 1;
 802165e:	88eb      	ldrh	r3, [r5, #6]
 8021660:	3301      	adds	r3, #1
 8021662:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_area.y2 = outer_area->y2;
 8021666:	88e3      	ldrh	r3, [r4, #6]
 8021668:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802166c:	f7fe fee5 	bl	802043a <lv_draw_sw_blend>
 8021670:	e016      	b.n	80216a0 <draw_border_generic+0x32e>
    if(left_side && right_side && top_side && bottom_side &&
 8021672:	4547      	cmp	r7, r8
 8021674:	dd19      	ble.n	80216aa <draw_border_generic+0x338>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8021676:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
        blend_area.x1 = core_area.x1;
 802167a:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802167c:	a91f      	add	r1, sp, #124	; 0x7c
 802167e:	4658      	mov	r0, fp
        blend_area.x1 = core_area.x1;
 8021680:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        blend_area.x2 = core_area.x2;
 8021684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021686:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        blend_area.y1 = outer_area->y1;
 802168a:	9b02      	ldr	r3, [sp, #8]
 802168c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_area.y2 = inner_area->y1 - 1;
 8021690:	f109 33ff 	add.w	r3, r9, #4294967295
 8021694:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021698:	f7fe fecf 	bl	802043a <lv_draw_sw_blend>
    if(bottom_side && split_hor) {
 802169c:	4547      	cmp	r7, r8
 802169e:	ddd6      	ble.n	802164e <draw_border_generic+0x2dc>
    if(left_side) {
 80216a0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80216a4:	4293      	cmp	r3, r2
 80216a6:	dbae      	blt.n	8021606 <draw_border_generic+0x294>
 80216a8:	e008      	b.n	80216bc <draw_border_generic+0x34a>
 80216aa:	3301      	adds	r3, #1
 80216ac:	1a9b      	subs	r3, r3, r2
    if(left_side && right_side && top_side && bottom_side &&
 80216ae:	b21b      	sxth	r3, r3
 80216b0:	2b31      	cmp	r3, #49	; 0x31
 80216b2:	dc36      	bgt.n	8021722 <draw_border_generic+0x3b0>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 80216b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80216b6:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
 80216ba:	9308      	str	r3, [sp, #32]
        blend_area.x1 = outer_area->x1;
 80216bc:	8823      	ldrh	r3, [r4, #0]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80216be:	a91f      	add	r1, sp, #124	; 0x7c
 80216c0:	4658      	mov	r0, fp
        blend_area.x1 = outer_area->x1;
 80216c2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        blend_area.x2 = inner_area->x1 - 1;
 80216c6:	882b      	ldrh	r3, [r5, #0]
 80216c8:	3b01      	subs	r3, #1
 80216ca:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        blend_area.y1 = core_area.y1;
 80216ce:	9b05      	ldr	r3, [sp, #20]
 80216d0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_area.y2 = core_area.y2;
 80216d4:	9b06      	ldr	r3, [sp, #24]
 80216d6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80216da:	f7fe feae 	bl	802043a <lv_draw_sw_blend>
    if(right_side) {
 80216de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80216e2:	4293      	cmp	r3, r2
 80216e4:	dd94      	ble.n	8021610 <draw_border_generic+0x29e>
    if(!split_hor) {
 80216e6:	9908      	ldr	r1, [sp, #32]
        blend_area.x1 = draw_area.x1;
 80216e8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 80216ec:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    if(!split_hor) {
 80216f0:	2900      	cmp	r1, #0
 80216f2:	d155      	bne.n	80217a0 <draw_border_generic+0x42e>
        blend_area.x1 = draw_area.x1;
 80216f4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        for(h = 0; h < max_h; h++) {
 80216f8:	460f      	mov	r7, r1
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 80216fa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
        blend_area.x2 = draw_area.x2;
 80216fe:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 8021702:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8021706:	1a9b      	subs	r3, r3, r2
 8021708:	429e      	cmp	r6, r3
 802170a:	bfb8      	it	lt
 802170c:	461e      	movlt	r6, r3
 802170e:	b236      	sxth	r6, r6
        for(h = 0; h < max_h; h++) {
 8021710:	42be      	cmp	r6, r7
 8021712:	dc0d      	bgt.n	8021730 <draw_border_generic+0x3be>
    lv_draw_mask_free_param(&mask_rin_param);
 8021714:	a819      	add	r0, sp, #100	; 0x64
 8021716:	f7fd fe39 	bl	801f38c <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rin_id);
 802171a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802171c:	f7e6 fdfa 	bl	8008314 <lv_draw_mask_remove_id>
    lv_draw_mask_free_param(&mask_rout_param);
 8021720:	e724      	b.n	802156c <draw_border_generic+0x1fa>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8021722:	2301      	movs	r3, #1
 8021724:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
    if(top_side && split_hor) {
 8021728:	9b02      	ldr	r3, [sp, #8]
 802172a:	4599      	cmp	r9, r3
 802172c:	db8d      	blt.n	802164a <draw_border_generic+0x2d8>
 802172e:	e7a4      	b.n	802167a <draw_border_generic+0x308>
            lv_coord_t top_y = outer_area->y1 + h;
 8021730:	f8b4 8002 	ldrh.w	r8, [r4, #2]
            lv_coord_t bottom_y = outer_area->y2 - h;
 8021734:	88e5      	ldrh	r5, [r4, #6]
            lv_coord_t top_y = outer_area->y1 + h;
 8021736:	fa18 f887 	uxtah	r8, r8, r7
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 802173a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
            lv_coord_t bottom_y = outer_area->y2 - h;
 802173e:	1bed      	subs	r5, r5, r7
            lv_coord_t top_y = outer_area->y1 + h;
 8021740:	fa0f f888 	sxth.w	r8, r8
            lv_coord_t bottom_y = outer_area->y2 - h;
 8021744:	b22d      	sxth	r5, r5
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 8021746:	4543      	cmp	r3, r8
 8021748:	dd03      	ble.n	8021752 <draw_border_generic+0x3e0>
 802174a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802174e:	42ab      	cmp	r3, r5
 8021750:	db24      	blt.n	802179c <draw_border_generic+0x42a>
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 8021752:	4651      	mov	r1, sl
 8021754:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021756:	f7ff fa76 	bl	8020c46 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 802175a:	4653      	mov	r3, sl
 802175c:	4642      	mov	r2, r8
 802175e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8021762:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021764:	f7e6 fdb6 	bl	80082d4 <lv_draw_mask_apply>
            if(top_y >= draw_area.y1) {
 8021768:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 802176c:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
            if(top_y >= draw_area.y1) {
 8021770:	4543      	cmp	r3, r8
 8021772:	dc07      	bgt.n	8021784 <draw_border_generic+0x412>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021774:	a91f      	add	r1, sp, #124	; 0x7c
 8021776:	4658      	mov	r0, fp
                blend_area.y1 = top_y;
 8021778:	f8ad 8046 	strh.w	r8, [sp, #70]	; 0x46
                blend_area.y2 = top_y;
 802177c:	f8ad 804a 	strh.w	r8, [sp, #74]	; 0x4a
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021780:	f7fe fe5b 	bl	802043a <lv_draw_sw_blend>
            if(bottom_y <= draw_area.y2) {
 8021784:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8021788:	42ab      	cmp	r3, r5
 802178a:	db07      	blt.n	802179c <draw_border_generic+0x42a>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802178c:	a91f      	add	r1, sp, #124	; 0x7c
 802178e:	4658      	mov	r0, fp
                blend_area.y1 = bottom_y;
 8021790:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
                blend_area.y2 = bottom_y;
 8021794:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021798:	f7fe fe4f 	bl	802043a <lv_draw_sw_blend>
        for(h = 0; h < max_h; h++) {
 802179c:	3701      	adds	r7, #1
 802179e:	e7b7      	b.n	8021710 <draw_border_generic+0x39e>
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 80217a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
        blend_area.x1 = draw_area.x1;
 80217a2:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 80217a6:	1e54      	subs	r4, r2, #1
 80217a8:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
        blend_area.x1 = draw_area.x1;
 80217ac:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80217b0:	f1c3 0301 	rsb	r3, r3, #1
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 80217b4:	4294      	cmp	r4, r2
 80217b6:	bfa8      	it	ge
 80217b8:	4614      	movge	r4, r2
 80217ba:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
 80217be:	441c      	add	r4, r3
 80217c0:	b2a6      	uxth	r6, r4
 80217c2:	b224      	sxth	r4, r4
        if(blend_w > 0) {
 80217c4:	2c00      	cmp	r4, #0
 80217c6:	dc3d      	bgt.n	8021844 <draw_border_generic+0x4d2>
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 80217c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217ca:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80217ce:	3301      	adds	r3, #1
        blend_area.x2 = draw_area.x2;
 80217d0:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 80217d4:	4293      	cmp	r3, r2
        blend_area.x2 = draw_area.x2;
 80217d6:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
 80217da:	f104 0401 	add.w	r4, r4, #1
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 80217de:	bfb8      	it	lt
 80217e0:	4613      	movlt	r3, r2
 80217e2:	1ae4      	subs	r4, r4, r3
 80217e4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80217e8:	b2a5      	uxth	r5, r4
 80217ea:	b224      	sxth	r4, r4
        if(blend_w > 0) {
 80217ec:	2c00      	cmp	r4, #0
 80217ee:	dd91      	ble.n	8021714 <draw_border_generic+0x3a2>
            if(right_side || top_side) {
 80217f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80217f4:	4293      	cmp	r3, r2
 80217f6:	dd74      	ble.n	80218e2 <draw_border_generic+0x570>
 80217f8:	9b02      	ldr	r3, [sp, #8]
 80217fa:	4599      	cmp	r9, r3
 80217fc:	da71      	bge.n	80218e2 <draw_border_generic+0x570>
            if(right_side || bottom_side) {
 80217fe:	4547      	cmp	r7, r8
 8021800:	dc88      	bgt.n	8021714 <draw_border_generic+0x3a2>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 8021802:	2600      	movs	r6, #0
 8021804:	3601      	adds	r6, #1
 8021806:	9b06      	ldr	r3, [sp, #24]
 8021808:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 802180c:	4433      	add	r3, r6
 802180e:	429a      	cmp	r2, r3
 8021810:	db80      	blt.n	8021714 <draw_border_generic+0x3a2>
                    blend_area.y1 = h;
 8021812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 8021814:	4629      	mov	r1, r5
 8021816:	9822      	ldr	r0, [sp, #136]	; 0x88
                    blend_area.y1 = h;
 8021818:	18f7      	adds	r7, r6, r3
 802181a:	b23f      	sxth	r7, r7
 802181c:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
                    blend_area.y2 = h;
 8021820:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 8021824:	f7ff fa0f 	bl	8020c46 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 8021828:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 802182c:	4623      	mov	r3, r4
 802182e:	463a      	mov	r2, r7
 8021830:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021832:	f7e6 fd4f 	bl	80082d4 <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021836:	a91f      	add	r1, sp, #124	; 0x7c
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 8021838:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802183c:	4658      	mov	r0, fp
 802183e:	f7fe fdfc 	bl	802043a <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 8021842:	e7df      	b.n	8021804 <draw_border_generic+0x492>
            if(left_side || top_side) {
 8021844:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8021848:	4293      	cmp	r3, r2
 802184a:	da27      	bge.n	802189c <draw_border_generic+0x52a>
 802184c:	9b02      	ldr	r3, [sp, #8]
 802184e:	4599      	cmp	r9, r3
 8021850:	da24      	bge.n	802189c <draw_border_generic+0x52a>
            if(left_side || bottom_side) {
 8021852:	4547      	cmp	r7, r8
 8021854:	dcb8      	bgt.n	80217c8 <draw_border_generic+0x456>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 8021856:	2500      	movs	r5, #0
 8021858:	3501      	adds	r5, #1
 802185a:	9b06      	ldr	r3, [sp, #24]
 802185c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8021860:	442b      	add	r3, r5
 8021862:	429a      	cmp	r2, r3
 8021864:	dbb0      	blt.n	80217c8 <draw_border_generic+0x456>
                    blend_area.y1 = h;
 8021866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 8021868:	4631      	mov	r1, r6
 802186a:	9822      	ldr	r0, [sp, #136]	; 0x88
                    blend_area.y1 = h;
 802186c:	eb05 0a03 	add.w	sl, r5, r3
 8021870:	fa0f fa8a 	sxth.w	sl, sl
 8021874:	f8ad a046 	strh.w	sl, [sp, #70]	; 0x46
                    blend_area.y2 = h;
 8021878:	f8ad a04a 	strh.w	sl, [sp, #74]	; 0x4a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 802187c:	f7ff f9e3 	bl	8020c46 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 8021880:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8021884:	4623      	mov	r3, r4
 8021886:	4652      	mov	r2, sl
 8021888:	9822      	ldr	r0, [sp, #136]	; 0x88
 802188a:	f7e6 fd23 	bl	80082d4 <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802188e:	a91f      	add	r1, sp, #124	; 0x7c
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 8021890:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021894:	4658      	mov	r0, fp
 8021896:	f7fe fdd0 	bl	802043a <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 802189a:	e7dd      	b.n	8021858 <draw_border_generic+0x4e6>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 802189c:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 80218a0:	9b05      	ldr	r3, [sp, #20]
 80218a2:	42ab      	cmp	r3, r5
 80218a4:	dc04      	bgt.n	80218b0 <draw_border_generic+0x53e>
            if(left_side || bottom_side) {
 80218a6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80218aa:	4293      	cmp	r3, r2
 80218ac:	dad3      	bge.n	8021856 <draw_border_generic+0x4e4>
 80218ae:	e7d0      	b.n	8021852 <draw_border_generic+0x4e0>
                    blend_area.y1 = h;
 80218b0:	fa0f fa85 	sxth.w	sl, r5
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 80218b4:	4631      	mov	r1, r6
 80218b6:	9822      	ldr	r0, [sp, #136]	; 0x88
                for(h = draw_area.y1; h < core_area.y1; h++) {
 80218b8:	3501      	adds	r5, #1
                    blend_area.y1 = h;
 80218ba:	f8ad a046 	strh.w	sl, [sp, #70]	; 0x46
                    blend_area.y2 = h;
 80218be:	f8ad a04a 	strh.w	sl, [sp, #74]	; 0x4a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 80218c2:	f7ff f9c0 	bl	8020c46 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 80218c6:	4623      	mov	r3, r4
 80218c8:	4652      	mov	r2, sl
 80218ca:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80218ce:	9822      	ldr	r0, [sp, #136]	; 0x88
 80218d0:	f7e6 fd00 	bl	80082d4 <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80218d4:	a91f      	add	r1, sp, #124	; 0x7c
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 80218d6:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80218da:	4658      	mov	r0, fp
 80218dc:	f7fe fdad 	bl	802043a <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 80218e0:	e7de      	b.n	80218a0 <draw_border_generic+0x52e>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 80218e2:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 80218e6:	9b05      	ldr	r3, [sp, #20]
 80218e8:	42b3      	cmp	r3, r6
 80218ea:	dc04      	bgt.n	80218f6 <draw_border_generic+0x584>
            if(right_side || bottom_side) {
 80218ec:	e9dd 3200 	ldrd	r3, r2, [sp]
 80218f0:	4293      	cmp	r3, r2
 80218f2:	dd86      	ble.n	8021802 <draw_border_generic+0x490>
 80218f4:	e783      	b.n	80217fe <draw_border_generic+0x48c>
                    blend_area.y1 = h;
 80218f6:	fa0f f986 	sxth.w	r9, r6
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 80218fa:	4629      	mov	r1, r5
 80218fc:	9822      	ldr	r0, [sp, #136]	; 0x88
                for(h = draw_area.y1; h < core_area.y1; h++) {
 80218fe:	3601      	adds	r6, #1
                    blend_area.y1 = h;
 8021900:	f8ad 9046 	strh.w	r9, [sp, #70]	; 0x46
                    blend_area.y2 = h;
 8021904:	f8ad 904a 	strh.w	r9, [sp, #74]	; 0x4a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 8021908:	f7ff f99d 	bl	8020c46 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 802190c:	4623      	mov	r3, r4
 802190e:	464a      	mov	r2, r9
 8021910:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8021914:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021916:	f7e6 fcdd 	bl	80082d4 <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802191a:	a91f      	add	r1, sp, #124	; 0x7c
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 802191c:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021920:	4658      	mov	r0, fp
 8021922:	f7fe fd8a 	bl	802043a <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8021926:	e7de      	b.n	80218e6 <draw_border_generic+0x574>

08021928 <lv_draw_sw_rect>:
{
 8021928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802192c:	b0ab      	sub	sp, #172	; 0xac
 802192e:	460c      	mov	r4, r1
 8021930:	9208      	str	r2, [sp, #32]
    if(dsc->shadow_width == 0) return;
 8021932:	f9b1 202e 	ldrsh.w	r2, [r1, #46]	; 0x2e
{
 8021936:	9005      	str	r0, [sp, #20]
    if(dsc->shadow_width == 0) return;
 8021938:	2a00      	cmp	r2, #0
 802193a:	f000 8407 	beq.w	802214c <lv_draw_sw_rect+0x824>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 802193e:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
 8021942:	2b02      	cmp	r3, #2
 8021944:	930b      	str	r3, [sp, #44]	; 0x2c
 8021946:	f240 8401 	bls.w	802214c <lv_draw_sw_rect+0x824>
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 802194a:	2a01      	cmp	r2, #1
 802194c:	f9b1 3034 	ldrsh.w	r3, [r1, #52]	; 0x34
 8021950:	d105      	bne.n	802195e <lv_draw_sw_rect+0x36>
 8021952:	2b00      	cmp	r3, #0
 8021954:	dc03      	bgt.n	802195e <lv_draw_sw_rect+0x36>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 8021956:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8021958:	2900      	cmp	r1, #0
 802195a:	f000 83f7 	beq.w	802214c <lv_draw_sw_rect+0x824>
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 802195e:	9808      	ldr	r0, [sp, #32]
 8021960:	fa1f f983 	uxth.w	r9, r3
 8021964:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 8021966:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 802196a:	8807      	ldrh	r7, [r0, #0]
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 802196c:	9e08      	ldr	r6, [sp, #32]
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 802196e:	f3c2 024f 	ubfx	r2, r2, #1, #16
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 8021972:	8880      	ldrh	r0, [r0, #4]
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 8021974:	440f      	add	r7, r1
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 8021976:	fa11 f183 	uxtah	r1, r1, r3
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 802197a:	8876      	ldrh	r6, [r6, #2]
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 802197c:	b2bf      	uxth	r7, r7
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 802197e:	4401      	add	r1, r0
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 8021980:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8021982:	4406      	add	r6, r0
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 8021984:	fa10 f383 	uxtah	r3, r0, r3
 8021988:	9808      	ldr	r0, [sp, #32]
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 802198a:	b28d      	uxth	r5, r1
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 802198c:	b2b6      	uxth	r6, r6
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 802198e:	88c0      	ldrh	r0, [r0, #6]
 8021990:	4403      	add	r3, r0
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 8021992:	eba7 0009 	sub.w	r0, r7, r9
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 8021996:	3801      	subs	r0, #1
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 8021998:	fa1f f883 	uxth.w	r8, r3
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 802199c:	1a80      	subs	r0, r0, r2
 802199e:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 80219a2:	1c50      	adds	r0, r2, #1
 80219a4:	b280      	uxth	r0, r0
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 80219a6:	fa10 f383 	uxtah	r3, r0, r3
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 80219aa:	fa10 f181 	uxtah	r1, r0, r1
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 80219ae:	a815      	add	r0, sp, #84	; 0x54
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 80219b0:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80219b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 80219b6:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 80219ba:	eba6 0109 	sub.w	r1, r6, r9
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80219be:	2bfe      	cmp	r3, #254	; 0xfe
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 80219c0:	f101 31ff 	add.w	r1, r1, #4294967295
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80219c4:	bf28      	it	cs
 80219c6:	23ff      	movcs	r3, #255	; 0xff
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 80219c8:	1a8a      	subs	r2, r1, r2
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 80219ca:	a913      	add	r1, sp, #76	; 0x4c
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80219cc:	930b      	str	r3, [sp, #44]	; 0x2c
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 80219ce:	9b05      	ldr	r3, [sp, #20]
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 80219d0:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 80219d4:	689a      	ldr	r2, [r3, #8]
 80219d6:	f002 fc80 	bl	80242da <_lv_area_intersect>
 80219da:	9006      	str	r0, [sp, #24]
 80219dc:	2800      	cmp	r0, #0
 80219de:	f000 83b5 	beq.w	802214c <lv_draw_sw_rect+0x824>
    dest->x1 = src->x1;
 80219e2:	9b08      	ldr	r3, [sp, #32]
    lv_area_increase(&bg_area, -1, -1);
 80219e4:	f04f 32ff 	mov.w	r2, #4294967295
 80219e8:	a817      	add	r0, sp, #92	; 0x5c
 80219ea:	f109 0901 	add.w	r9, r9, #1
 80219ee:	881b      	ldrh	r3, [r3, #0]
 80219f0:	4611      	mov	r1, r2
 80219f2:	fa15 f589 	uxtah	r5, r5, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80219f6:	eba8 0806 	sub.w	r8, r8, r6
    dest->x1 = src->x1;
 80219fa:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    dest->y1 = src->y1;
 80219fe:	9b08      	ldr	r3, [sp, #32]
 8021a00:	fa1f fa85 	uxth.w	sl, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8021a04:	fa18 f989 	uxtah	r9, r8, r9
    dest->y1 = src->y1;
 8021a08:	885b      	ldrh	r3, [r3, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8021a0a:	ebaa 0807 	sub.w	r8, sl, r7
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 8021a0e:	eba7 070a 	sub.w	r7, r7, sl
    for(y = 0; y < size; y++) {
 8021a12:	f04f 0a00 	mov.w	sl, #0
    dest->y1 = src->y1;
 8021a16:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 8021a1a:	fa0f f888 	sxth.w	r8, r8
    dest->x2 = src->x2;
 8021a1e:	9b08      	ldr	r3, [sp, #32]
 8021a20:	889b      	ldrh	r3, [r3, #4]
 8021a22:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    dest->y2 = src->y2;
 8021a26:	9b08      	ldr	r3, [sp, #32]
 8021a28:	88db      	ldrh	r3, [r3, #6]
 8021a2a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    lv_area_increase(&bg_area, -1, -1);
 8021a2e:	f002 fc34 	bl	802429a <lv_area_increase>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8021a32:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 8021a36:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 8021a3a:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8021a3c:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
    int32_t r_bg = dsc->radius;
 8021a40:	f9b4 3000 	ldrsh.w	r3, [r4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8021a44:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8021a46:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
 8021a4a:	3101      	adds	r1, #1
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 8021a4c:	b212      	sxth	r2, r2
 8021a4e:	1a09      	subs	r1, r1, r0
 8021a50:	b209      	sxth	r1, r1
 8021a52:	428a      	cmp	r2, r1
 8021a54:	bfa8      	it	ge
 8021a56:	460a      	movge	r2, r1
 8021a58:	fa1f f189 	uxth.w	r1, r9
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 8021a5c:	fa0f f989 	sxth.w	r9, r9
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 8021a60:	1052      	asrs	r2, r2, #1
 8021a62:	910a      	str	r1, [sp, #40]	; 0x28
 8021a64:	429a      	cmp	r2, r3
 8021a66:	bfa8      	it	ge
 8021a68:	461a      	movge	r2, r3
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 8021a6a:	45c8      	cmp	r8, r9
 8021a6c:	bfa8      	it	ge
 8021a6e:	46c8      	movge	r8, r9
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 8021a70:	9209      	str	r2, [sp, #36]	; 0x24
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 8021a72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8021a76:	4598      	cmp	r8, r3
 8021a78:	bfa8      	it	ge
 8021a7a:	4698      	movge	r8, r3
    int32_t corner_size = dsc->shadow_width  + r_sh;
 8021a7c:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 8021a80:	eb03 0b08 	add.w	fp, r3, r8
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 8021a84:	fb0b f00b 	mul.w	r0, fp, fp
 8021a88:	0040      	lsls	r0, r0, #1
 8021a8a:	f7f0 fe95 	bl	80127b8 <lv_mem_buf_get>
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 8021a8e:	f9b4 502e 	ldrsh.w	r5, [r4, #46]	; 0x2e
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 8021a92:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021a94:	f005 0201 	and.w	r2, r5, #1
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8021a98:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
    int32_t size = sw_ori  + r;
 8021a9c:	eb08 0605 	add.w	r6, r8, r5
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 8021aa0:	9007      	str	r0, [sp, #28]
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8021aa2:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8021aa6:	920c      	str	r2, [sp, #48]	; 0x30
 8021aa8:	f065 0201 	orn	r2, r5, #1
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 8021aac:	a823      	add	r0, sp, #140	; 0x8c
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8021aae:	441a      	add	r2, r3
    sh_area.y1 = sw / 2 + 1;
 8021ab0:	3301      	adds	r3, #1
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8021ab2:	4442      	add	r2, r8
    sh_area.y1 = sw / 2 + 1;
 8021ab4:	b29b      	uxth	r3, r3
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8021ab6:	b292      	uxth	r2, r2
    sh_area.y1 = sw / 2 + 1;
 8021ab8:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 8021abc:	440b      	add	r3, r1
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 8021abe:	a91d      	add	r1, sp, #116	; 0x74
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8021ac0:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 8021ac4:	443a      	add	r2, r7
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 8021ac6:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 8021aca:	2300      	movs	r3, #0
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 8021acc:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 8021ad0:	4642      	mov	r2, r8
 8021ad2:	f7e6 fd61 	bl	8008598 <lv_draw_mask_radius_init>
    if(sw_ori == 1) sw = 1;
 8021ad6:	2d01      	cmp	r5, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 8021ad8:	4630      	mov	r0, r6
    else sw = sw_ori >> 1;
 8021ada:	bf18      	it	ne
 8021adc:	106d      	asrne	r5, r5, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 8021ade:	f7f0 fe6b 	bl	80127b8 <lv_mem_buf_get>
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 8021ae2:	f8dd 901c 	ldr.w	r9, [sp, #28]
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 8021ae6:	0073      	lsls	r3, r6, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 8021ae8:	4680      	mov	r8, r0
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 8021aea:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 8021aec:	b233      	sxth	r3, r6
 8021aee:	930d      	str	r3, [sp, #52]	; 0x34
    for(y = 0; y < size; y++) {
 8021af0:	4556      	cmp	r6, sl
 8021af2:	dc0c      	bgt.n	8021b0e <lv_draw_sw_rect+0x1e6>
    lv_mem_buf_release(mask_line);
 8021af4:	4640      	mov	r0, r8
    for(x = 0; x < size * size; x++) {
 8021af6:	fb06 f706 	mul.w	r7, r6, r6
    lv_mem_buf_release(mask_line);
 8021afa:	f7f0 fea7 	bl	801284c <lv_mem_buf_release>
    lv_draw_mask_free_param(&mask_param);
 8021afe:	a823      	add	r0, sp, #140	; 0x8c
 8021b00:	f7fd fc44 	bl	801f38c <lv_draw_mask_free_param>
    if(sw == 1) {
 8021b04:	2d01      	cmp	r5, #1
 8021b06:	f040 83f2 	bne.w	80222ee <lv_draw_sw_rect+0x9c6>
        for(i = 0; i < size * size; i++) {
 8021b0a:	2300      	movs	r3, #0
 8021b0c:	e03b      	b.n	8021b86 <lv_draw_sw_rect+0x25e>
        lv_memset_ff(mask_line, size);
 8021b0e:	4631      	mov	r1, r6
 8021b10:	4640      	mov	r0, r8
 8021b12:	f7ff f898 	bl	8020c46 <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 8021b16:	ab23      	add	r3, sp, #140	; 0x8c
 8021b18:	2100      	movs	r1, #0
 8021b1a:	fa0f f28a 	sxth.w	r2, sl
 8021b1e:	9300      	str	r3, [sp, #0]
 8021b20:	4640      	mov	r0, r8
 8021b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021b24:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8021b26:	47b8      	blx	r7
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8021b28:	4601      	mov	r1, r0
 8021b2a:	b940      	cbnz	r0, 8021b3e <lv_draw_sw_rect+0x216>
 8021b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021b2e:	4648      	mov	r0, r9
 8021b30:	f7f8 fe2a 	bl	801a788 <memset>
        sh_ups_tmp_buf += size;
 8021b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    for(y = 0; y < size; y++) {
 8021b36:	f10a 0a01 	add.w	sl, sl, #1
        sh_ups_tmp_buf += size;
 8021b3a:	4499      	add	r9, r3
    for(y = 0; y < size; y++) {
 8021b3c:	e7d8      	b.n	8021af0 <lv_draw_sw_rect+0x1c8>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 8021b3e:	f898 3000 	ldrb.w	r3, [r8]
 8021b42:	464a      	mov	r2, r9
 8021b44:	4641      	mov	r1, r8
 8021b46:	019b      	lsls	r3, r3, #6
 8021b48:	fb93 f3f5 	sdiv	r3, r3, r5
 8021b4c:	f822 3b02 	strh.w	r3, [r2], #2
            for(i = 1; i < size; i++) {
 8021b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b52:	eb03 0009 	add.w	r0, r3, r9
 8021b56:	4290      	cmp	r0, r2
 8021b58:	d0ec      	beq.n	8021b34 <lv_draw_sw_rect+0x20c>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 8021b5a:	460f      	mov	r7, r1
 8021b5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021b60:	783f      	ldrb	r7, [r7, #0]
 8021b62:	429f      	cmp	r7, r3
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 8021b64:	bf17      	itett	ne
 8021b66:	019b      	lslne	r3, r3, #6
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 8021b68:	f832 3c02 	ldrheq.w	r3, [r2, #-2]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 8021b6c:	fb93 f3f5 	sdivne	r3, r3, r5
 8021b70:	b29b      	uxthne	r3, r3
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 8021b72:	f822 3b02 	strh.w	r3, [r2], #2
            for(i = 1; i < size; i++) {
 8021b76:	e7ee      	b.n	8021b56 <lv_draw_sw_rect+0x22e>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 8021b78:	9a07      	ldr	r2, [sp, #28]
 8021b7a:	9907      	ldr	r1, [sp, #28]
 8021b7c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8021b80:	0992      	lsrs	r2, r2, #6
 8021b82:	54ca      	strb	r2, [r1, r3]
        for(i = 0; i < size * size; i++) {
 8021b84:	3301      	adds	r3, #1
 8021b86:	42bb      	cmp	r3, r7
 8021b88:	d1f6      	bne.n	8021b78 <lv_draw_sw_rect+0x250>
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
 8021b8a:	a813      	add	r0, sp, #76	; 0x4c
 8021b8c:	f7e6 fbfa 	bl	8008384 <lv_draw_mask_is_any>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 8021b90:	2800      	cmp	r0, #0
 8021b92:	f000 83de 	beq.w	8022352 <lv_draw_sw_rect+0xa2a>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 8021b96:	2301      	movs	r3, #1
 8021b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021b9a:	a917      	add	r1, sp, #92	; 0x5c
 8021b9c:	a81d      	add	r0, sp, #116	; 0x74
 8021b9e:	f7e6 fcfb 	bl	8008598 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8021ba2:	2100      	movs	r1, #0
 8021ba4:	a81d      	add	r0, sp, #116	; 0x74
 8021ba6:	f7e6 fb7f 	bl	80082a8 <lv_draw_mask_add>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 8021baa:	2300      	movs	r3, #0
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8021bac:	900f      	str	r0, [sp, #60]	; 0x3c
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 8021bae:	9306      	str	r3, [sp, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8021bb0:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
 8021bb4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8021bb8:	3001      	adds	r0, #1
 8021bba:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 8021bbc:	b200      	sxth	r0, r0
 8021bbe:	f7f0 fdfb 	bl	80127b8 <lv_mem_buf_get>
 8021bc2:	221c      	movs	r2, #28
 8021bc4:	4605      	mov	r5, r0
 8021bc6:	2100      	movs	r1, #0
 8021bc8:	a823      	add	r0, sp, #140	; 0x8c
 8021bca:	f7f8 fddd 	bl	801a788 <memset>
    blend_dsc.color = dsc->shadow_color;
 8021bce:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8021bd0:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
    blend_dsc.blend_area = &blend_area;
 8021bd4:	a919      	add	r1, sp, #100	; 0x64
    blend_dsc.color = dsc->shadow_color;
 8021bd6:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
    blend_dsc.opa = dsc->shadow_opa;
 8021bda:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8021bde:	1c70      	adds	r0, r6, #1
    blend_area.x2 = shadow_area.x2;
 8021be0:	f8ad 6068 	strh.w	r6, [sp, #104]	; 0x68
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021be4:	fa1f f68b 	uxth.w	r6, fp
    blend_dsc.opa = dsc->shadow_opa;
 8021be8:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
 8021bec:	b280      	uxth	r0, r0
    blend_dsc.blend_mode = dsc->blend_mode;
 8021bee:	78a3      	ldrb	r3, [r4, #2]
    blend_dsc.blend_area = &blend_area;
 8021bf0:	9123      	str	r1, [sp, #140]	; 0x8c
    blend_dsc.blend_mode = dsc->blend_mode;
 8021bf2:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 8021bf6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    blend_dsc.mask_area = &blend_area;
 8021bfa:	9128      	str	r1, [sp, #160]	; 0xa0
 8021bfc:	1ac2      	subs	r2, r0, r3
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021bfe:	1b80      	subs	r0, r0, r6
    blend_dsc.mask_buf = mask_buf;
 8021c00:	9526      	str	r5, [sp, #152]	; 0x98
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 8021c02:	f3c2 37c0 	ubfx	r7, r2, #15, #1
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021c06:	b200      	sxth	r0, r0
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 8021c08:	fa07 f282 	sxtah	r2, r7, r2
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 8021c0c:	f9bd 704e 	ldrsh.w	r7, [sp, #78]	; 0x4e
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 8021c10:	eb03 0362 	add.w	r3, r3, r2, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8021c14:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
    blend_area.y1 = shadow_area.y1;
 8021c18:	f8ad 7066 	strh.w	r7, [sp, #102]	; 0x66
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 8021c1c:	b21b      	sxth	r3, r3
 8021c1e:	3201      	adds	r2, #1
 8021c20:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 8021c22:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8021c26:	1ad2      	subs	r2, r2, r3
 8021c28:	f3c2 3cc0 	ubfx	ip, r2, #15, #1
 8021c2c:	fa0c f282 	sxtah	r2, ip, r2
 8021c30:	eb03 0262 	add.w	r2, r3, r2, asr #1
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 8021c34:	3b01      	subs	r3, #1
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 8021c36:	fa1f fc82 	uxth.w	ip, r2
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 8021c3a:	4433      	add	r3, r6
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 8021c3c:	b212      	sxth	r2, r2
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021c3e:	b21b      	sxth	r3, r3
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 8021c40:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8021c44:	920a      	str	r2, [sp, #40]	; 0x28
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021c48:	4290      	cmp	r0, r2
 8021c4a:	bfb8      	it	lt
 8021c4c:	4610      	movlt	r0, r2
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021c4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021c50:	4293      	cmp	r3, r2
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021c52:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021c56:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021c58:	bfa8      	it	ge
 8021c5a:	4613      	movge	r3, r2
 8021c5c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021c60:	9b05      	ldr	r3, [sp, #20]
 8021c62:	689a      	ldr	r2, [r3, #8]
 8021c64:	f002 fb39 	bl	80242da <_lv_area_intersect>
 8021c68:	2800      	cmp	r0, #0
 8021c6a:	f040 837b 	bne.w	8022364 <lv_draw_sw_rect+0xa3c>
    blend_area.x2 = shadow_area.x2;
 8021c6e:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021c72:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021c74:	990c      	ldr	r1, [sp, #48]	; 0x30
    blend_area.x2 = shadow_area.x2;
 8021c76:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021c7a:	3201      	adds	r2, #1
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8021c7c:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021c80:	1b92      	subs	r2, r2, r6
    blend_area.y2 = shadow_area.y2;
 8021c82:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8021c86:	3301      	adds	r3, #1
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021c88:	b212      	sxth	r2, r2
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8021c8a:	1b9b      	subs	r3, r3, r6
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021c8c:	428a      	cmp	r2, r1
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8021c8e:	b21b      	sxth	r3, r3
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021c90:	bfb8      	it	lt
 8021c92:	460a      	movlt	r2, r1
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021c94:	a919      	add	r1, sp, #100	; 0x64
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021c96:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8021c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021c9c:	3201      	adds	r2, #1
 8021c9e:	4293      	cmp	r3, r2
 8021ca0:	920d      	str	r2, [sp, #52]	; 0x34
 8021ca2:	bfb8      	it	lt
 8021ca4:	4613      	movlt	r3, r2
 8021ca6:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021caa:	9b05      	ldr	r3, [sp, #20]
 8021cac:	689a      	ldr	r2, [r3, #8]
 8021cae:	f002 fb14 	bl	80242da <_lv_area_intersect>
 8021cb2:	2800      	cmp	r0, #0
 8021cb4:	d043      	beq.n	8021d3e <lv_draw_sw_rect+0x416>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8021cb6:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8021cba:	a917      	add	r1, sp, #92	; 0x5c
 8021cbc:	a81b      	add	r0, sp, #108	; 0x6c
 8021cbe:	9210      	str	r2, [sp, #64]	; 0x40
 8021cc0:	f002 fc0a 	bl	80244d8 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021cc4:	2800      	cmp	r0, #0
 8021cc6:	d13a      	bne.n	8021d3e <lv_draw_sw_rect+0x416>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8021cc8:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 8021ccc:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8021cd0:	f108 0801 	add.w	r8, r8, #1
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021cd4:	9906      	ldr	r1, [sp, #24]
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021cd6:	f9bd a06a 	ldrsh.w	sl, [sp, #106]	; 0x6a
 8021cda:	eba8 0807 	sub.w	r8, r8, r7
 8021cde:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8021ce2:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 8021ce6:	fa0f f888 	sxth.w	r8, r8
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021cea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021cec:	b129      	cbz	r1, 8021cfa <lv_draw_sw_rect+0x3d2>
 8021cee:	a917      	add	r1, sp, #92	; 0x5c
 8021cf0:	a81b      	add	r0, sp, #108	; 0x6c
 8021cf2:	9310      	str	r3, [sp, #64]	; 0x40
 8021cf4:	f002 fc39 	bl	802456a <_lv_area_is_out>
 8021cf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
        if(w > 0) {
 8021cfa:	f1b8 0f00 	cmp.w	r8, #0
 8021cfe:	dd1e      	ble.n	8021d3e <lv_draw_sw_rect+0x416>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8021d00:	eba9 090b 	sub.w	r9, r9, fp
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021d04:	ebaa 0a03 	sub.w	sl, sl, r3
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8021d08:	9b07      	ldr	r3, [sp, #28]
 8021d0a:	f109 0901 	add.w	r9, r9, #1
            blend_dsc.mask_buf = mask_buf;
 8021d0e:	9526      	str	r5, [sp, #152]	; 0x98
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8021d10:	eba7 0709 	sub.w	r7, r7, r9
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8021d14:	f9bd 9072 	ldrsh.w	r9, [sp, #114]	; 0x72
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8021d18:	fb0b 770a 	mla	r7, fp, sl, r7
 8021d1c:	441f      	add	r7, r3
            blend_area.x1 = clip_area_sub.x1;
 8021d1e:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8021d22:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8021d26:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8021d2a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8021d2e:	2302      	movs	r3, #2
 8021d30:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8021d34:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8021d38:	454b      	cmp	r3, r9
 8021d3a:	f340 837e 	ble.w	802243a <lv_draw_sw_rect+0xb12>
    blend_area.x1 = shadow_area.x1 + corner_size;
 8021d3e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021d42:	a919      	add	r1, sp, #100	; 0x64
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021d44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021d46:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.x1 = shadow_area.x1 + corner_size;
 8021d48:	4433      	add	r3, r6
 8021d4a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x2 - corner_size;
 8021d4e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8021d52:	1b9b      	subs	r3, r3, r6
 8021d54:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y1;
 8021d58:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021d5c:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 8021d60:	3b01      	subs	r3, #1
 8021d62:	4433      	add	r3, r6
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021d64:	b21b      	sxth	r3, r3
 8021d66:	4293      	cmp	r3, r2
 8021d68:	bfa8      	it	ge
 8021d6a:	4613      	movge	r3, r2
 8021d6c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021d70:	9b05      	ldr	r3, [sp, #20]
 8021d72:	689a      	ldr	r2, [r3, #8]
 8021d74:	f002 fab1 	bl	80242da <_lv_area_intersect>
 8021d78:	b1e0      	cbz	r0, 8021db4 <lv_draw_sw_rect+0x48c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8021d7a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021d7e:	a917      	add	r1, sp, #92	; 0x5c
 8021d80:	a81b      	add	r0, sp, #108	; 0x6c
 8021d82:	464a      	mov	r2, r9
 8021d84:	f002 fba8 	bl	80244d8 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021d88:	4680      	mov	r8, r0
 8021d8a:	b998      	cbnz	r0, 8021db4 <lv_draw_sw_rect+0x48c>
 8021d8c:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 8021d90:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8021d94:	3701      	adds	r7, #1
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021d96:	9a06      	ldr	r2, [sp, #24]
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8021d98:	f9bd a06e 	ldrsh.w	sl, [sp, #110]	; 0x6e
 8021d9c:	1aff      	subs	r7, r7, r3
 8021d9e:	b2bb      	uxth	r3, r7
 8021da0:	b23f      	sxth	r7, r7
 8021da2:	9310      	str	r3, [sp, #64]	; 0x40
 8021da4:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021da8:	2a00      	cmp	r2, #0
 8021daa:	f040 836b 	bne.w	8022484 <lv_draw_sw_rect+0xb5c>
        if(w > 0) {
 8021dae:	2f00      	cmp	r7, #0
 8021db0:	f300 83b4 	bgt.w	802251c <lv_draw_sw_rect+0xbf4>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 8021db4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021db8:	a919      	add	r1, sp, #100	; 0x64
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8021dba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021dbc:	a81b      	add	r0, sp, #108	; 0x6c
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 8021dbe:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    blend_area.x1 = shadow_area.x1 + corner_size;
 8021dc2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8021dc6:	4433      	add	r3, r6
 8021dc8:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x2 - corner_size;
 8021dcc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8021dd0:	1b9b      	subs	r3, r3, r6
 8021dd2:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8021dd6:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    blend_area.y2 = shadow_area.y2;
 8021dda:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8021dde:	3301      	adds	r3, #1
 8021de0:	1b9b      	subs	r3, r3, r6
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8021de2:	b21b      	sxth	r3, r3
 8021de4:	4293      	cmp	r3, r2
 8021de6:	bfb8      	it	lt
 8021de8:	4613      	movlt	r3, r2
 8021dea:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021dee:	9b05      	ldr	r3, [sp, #20]
 8021df0:	689a      	ldr	r2, [r3, #8]
 8021df2:	f002 fa72 	bl	80242da <_lv_area_intersect>
 8021df6:	2800      	cmp	r0, #0
 8021df8:	d038      	beq.n	8021e6c <lv_draw_sw_rect+0x544>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8021dfa:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8021dfe:	a917      	add	r1, sp, #92	; 0x5c
 8021e00:	a81b      	add	r0, sp, #108	; 0x6c
 8021e02:	4652      	mov	r2, sl
 8021e04:	f002 fb68 	bl	80244d8 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021e08:	4680      	mov	r8, r0
 8021e0a:	bb78      	cbnz	r0, 8021e6c <lv_draw_sw_rect+0x544>
 8021e0c:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 8021e10:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8021e14:	3701      	adds	r7, #1
 8021e16:	1aff      	subs	r7, r7, r3
 8021e18:	b2bb      	uxth	r3, r7
 8021e1a:	b23f      	sxth	r7, r7
 8021e1c:	9310      	str	r3, [sp, #64]	; 0x40
        if(w > 0) {
 8021e1e:	2f00      	cmp	r7, #0
 8021e20:	dd24      	ble.n	8021e6c <lv_draw_sw_rect+0x544>
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021e22:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8021e26:	f9bd 906a 	ldrsh.w	r9, [sp, #106]	; 0x6a
 8021e2a:	9311      	str	r3, [sp, #68]	; 0x44
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021e2c:	9b06      	ldr	r3, [sp, #24]
 8021e2e:	2b00      	cmp	r3, #0
 8021e30:	f000 8381 	beq.w	8022536 <lv_draw_sw_rect+0xc0e>
 8021e34:	4652      	mov	r2, sl
 8021e36:	a917      	add	r1, sp, #92	; 0x5c
 8021e38:	a81b      	add	r0, sp, #108	; 0x6c
 8021e3a:	f002 fb96 	bl	802456a <_lv_area_is_out>
 8021e3e:	4643      	mov	r3, r8
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021e40:	9a11      	ldr	r2, [sp, #68]	; 0x44
                blend_dsc.mask_buf = mask_buf;
 8021e42:	9326      	str	r3, [sp, #152]	; 0x98
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021e44:	eba9 0902 	sub.w	r9, r9, r2
            blend_area.x1 = clip_area_sub.x1;
 8021e48:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021e4c:	9a07      	ldr	r2, [sp, #28]
            blend_area.x1 = clip_area_sub.x1;
 8021e4e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021e52:	fb0b 2909 	mla	r9, fp, r9, r2
            blend_area.x2 = clip_area_sub.x2;
 8021e56:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8021e5a:	f9bd 8072 	ldrsh.w	r8, [sp, #114]	; 0x72
            blend_area.x2 = clip_area_sub.x2;
 8021e5e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8021e62:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8021e66:	4543      	cmp	r3, r8
 8021e68:	f340 8367 	ble.w	802253a <lv_draw_sw_rect+0xc12>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 8021e6c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    blend_area.y2 = shadow_area.y2 - corner_size;
 8021e70:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 8021e74:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021e78:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    blend_area.y2 = shadow_area.y2 - corner_size;
 8021e7c:	1b89      	subs	r1, r1, r6
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8021e7e:	980a      	ldr	r0, [sp, #40]	; 0x28
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021e80:	1c5a      	adds	r2, r3, #1
    blend_area.x2 = shadow_area.x2;
 8021e82:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y1 + corner_size;
 8021e86:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
    blend_area.y2 = shadow_area.y2 - corner_size;
 8021e8a:	b209      	sxth	r1, r1
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021e8c:	1b92      	subs	r2, r2, r6
    blend_area.y1 = shadow_area.y1 + corner_size;
 8021e8e:	4433      	add	r3, r6
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021e90:	b212      	sxth	r2, r2
    blend_area.y1 = shadow_area.y1 + corner_size;
 8021e92:	b21b      	sxth	r3, r3
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8021e94:	4298      	cmp	r0, r3
 8021e96:	da02      	bge.n	8021e9e <lv_draw_sw_rect+0x576>
 8021e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021e9a:	3301      	adds	r3, #1
 8021e9c:	b21b      	sxth	r3, r3
 8021e9e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021ea2:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 8021ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ea6:	428b      	cmp	r3, r1
 8021ea8:	bfb8      	it	lt
 8021eaa:	460b      	movlt	r3, r1
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021eac:	a919      	add	r1, sp, #100	; 0x64
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 8021eae:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021eb4:	429a      	cmp	r2, r3
 8021eb6:	bfb8      	it	lt
 8021eb8:	461a      	movlt	r2, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021eba:	9b05      	ldr	r3, [sp, #20]
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021ebc:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021ec0:	689a      	ldr	r2, [r3, #8]
 8021ec2:	f002 fa0a 	bl	80242da <_lv_area_intersect>
 8021ec6:	2800      	cmp	r0, #0
 8021ec8:	f040 836b 	bne.w	80225a2 <lv_draw_sw_rect+0xc7a>
        for(x = 0; x < corner_size / 2; x++) {
 8021ecc:	eb0b 70db 	add.w	r0, fp, fp, lsr #31
 8021ed0:	9b07      	ldr	r3, [sp, #28]
 8021ed2:	2100      	movs	r1, #0
 8021ed4:	1040      	asrs	r0, r0, #1
 8021ed6:	3b01      	subs	r3, #1
    for(y = 0; y < corner_size; y++) {
 8021ed8:	b20a      	sxth	r2, r1
 8021eda:	4593      	cmp	fp, r2
 8021edc:	f300 83c5 	bgt.w	802266a <lv_draw_sw_rect+0xd42>
    blend_area.y1 = shadow_area.y1 + corner_size;
 8021ee0:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8021ee4:	980a      	ldr	r0, [sp, #40]	; 0x28
    blend_area.y1 = shadow_area.y1 + corner_size;
 8021ee6:	4431      	add	r1, r6
    blend_area.y2 = shadow_area.y2 - corner_size;
 8021ee8:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
    blend_area.x1 = shadow_area.x1;
 8021eec:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    blend_area.y1 = shadow_area.y1 + corner_size;
 8021ef0:	b209      	sxth	r1, r1
    blend_area.y2 = shadow_area.y2 - corner_size;
 8021ef2:	1b92      	subs	r2, r2, r6
    blend_area.x1 = shadow_area.x1;
 8021ef4:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8021ef8:	3b01      	subs	r3, #1
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8021efa:	4288      	cmp	r0, r1
    blend_area.y2 = shadow_area.y2 - corner_size;
 8021efc:	b212      	sxth	r2, r2
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8021efe:	4433      	add	r3, r6
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021f00:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8021f02:	bfb8      	it	lt
 8021f04:	990e      	ldrlt	r1, [sp, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8021f06:	b21b      	sxth	r3, r3
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8021f08:	bfbc      	itt	lt
 8021f0a:	3101      	addlt	r1, #1
 8021f0c:	b209      	sxthlt	r1, r1
 8021f0e:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 8021f12:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021f14:	428a      	cmp	r2, r1
 8021f16:	bfb8      	it	lt
 8021f18:	460a      	movlt	r2, r1
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021f1a:	a919      	add	r1, sp, #100	; 0x64
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 8021f1c:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8021f20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021f22:	f102 3aff 	add.w	sl, r2, #4294967295
 8021f26:	4553      	cmp	r3, sl
 8021f28:	bfa8      	it	ge
 8021f2a:	4653      	movge	r3, sl
 8021f2c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021f30:	9b05      	ldr	r3, [sp, #20]
 8021f32:	689a      	ldr	r2, [r3, #8]
 8021f34:	f002 f9d1 	bl	80242da <_lv_area_intersect>
 8021f38:	2800      	cmp	r0, #0
 8021f3a:	f040 83a9 	bne.w	8022690 <lv_draw_sw_rect+0xd68>
    blend_area.x1 = shadow_area.x1;
 8021f3e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021f42:	a919      	add	r1, sp, #100	; 0x64
    blend_area.y1 = shadow_area.y1;
 8021f44:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021f48:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.x1 = shadow_area.x1;
 8021f4a:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8021f4e:	3a01      	subs	r2, #1
    blend_area.y1 = shadow_area.y1;
 8021f50:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 8021f54:	3b01      	subs	r3, #1
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8021f56:	4432      	add	r2, r6
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 8021f58:	4433      	add	r3, r6
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8021f5a:	b212      	sxth	r2, r2
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021f5c:	b21b      	sxth	r3, r3
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8021f5e:	4552      	cmp	r2, sl
 8021f60:	bfa8      	it	ge
 8021f62:	4652      	movge	r2, sl
 8021f64:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021f6a:	4293      	cmp	r3, r2
 8021f6c:	bfa8      	it	ge
 8021f6e:	4613      	movge	r3, r2
 8021f70:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021f74:	9b05      	ldr	r3, [sp, #20]
 8021f76:	689a      	ldr	r2, [r3, #8]
 8021f78:	f002 f9af 	bl	80242da <_lv_area_intersect>
 8021f7c:	2800      	cmp	r0, #0
 8021f7e:	d040      	beq.n	8022002 <lv_draw_sw_rect+0x6da>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8021f80:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8021f84:	a917      	add	r1, sp, #92	; 0x5c
 8021f86:	a81b      	add	r0, sp, #108	; 0x6c
 8021f88:	920b      	str	r2, [sp, #44]	; 0x2c
 8021f8a:	f002 faa5 	bl	80244d8 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021f8e:	2800      	cmp	r0, #0
 8021f90:	d137      	bne.n	8022002 <lv_draw_sw_rect+0x6da>
 8021f92:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 8021f96:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8021f9a:	f108 0801 	add.w	r8, r8, #1
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8021f9e:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021fa2:	9906      	ldr	r1, [sp, #24]
 8021fa4:	eba8 0807 	sub.w	r8, r8, r7
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8021fa8:	930a      	str	r3, [sp, #40]	; 0x28
 8021faa:	f9bd 906e 	ldrsh.w	r9, [sp, #110]	; 0x6e
 8021fae:	fa0f f888 	sxth.w	r8, r8
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8021fb2:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021fb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021fb8:	b129      	cbz	r1, 8021fc6 <lv_draw_sw_rect+0x69e>
 8021fba:	a917      	add	r1, sp, #92	; 0x5c
 8021fbc:	a81b      	add	r0, sp, #108	; 0x6c
 8021fbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8021fc0:	f002 fad3 	bl	802456a <_lv_area_is_out>
 8021fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        if(w > 0) {
 8021fc6:	f1b8 0f00 	cmp.w	r8, #0
        blend_dsc.mask_buf = mask_buf;
 8021fca:	9526      	str	r5, [sp, #152]	; 0x98
        if(w > 0) {
 8021fcc:	dd19      	ble.n	8022002 <lv_draw_sw_rect+0x6da>
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8021fce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8021fd0:	1aff      	subs	r7, r7, r3
 8021fd2:	9b07      	ldr	r3, [sp, #28]
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8021fd4:	eba9 0902 	sub.w	r9, r9, r2
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8021fd8:	fb0b 7709 	mla	r7, fp, r9, r7
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8021fdc:	f9bd 906e 	ldrsh.w	r9, [sp, #110]	; 0x6e
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8021fe0:	441f      	add	r7, r3
            blend_area.x1 = clip_area_sub.x1;
 8021fe2:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8021fe6:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8021fea:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8021fee:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8021ff2:	2302      	movs	r3, #2
 8021ff4:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8021ff8:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8021ffc:	454b      	cmp	r3, r9
 8021ffe:	f280 83a8 	bge.w	8022752 <lv_draw_sw_rect+0xe2a>
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8022002:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8022006:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.x1 = shadow_area.x1 ;
 8022008:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    blend_area.y2 = shadow_area.y2;
 802200c:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8022010:	3201      	adds	r2, #1
    blend_area.x1 = shadow_area.x1 ;
 8022012:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8022016:	3b01      	subs	r3, #1
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8022018:	1b92      	subs	r2, r2, r6
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 802201a:	990d      	ldr	r1, [sp, #52]	; 0x34
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 802201c:	4433      	add	r3, r6
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 802201e:	b212      	sxth	r2, r2
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8022020:	b21b      	sxth	r3, r3
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8022022:	428a      	cmp	r2, r1
 8022024:	bfb8      	it	lt
 8022026:	460a      	movlt	r2, r1
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8022028:	4553      	cmp	r3, sl
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 802202a:	a919      	add	r1, sp, #100	; 0x64
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 802202c:	bfa8      	it	ge
 802202e:	4653      	movge	r3, sl
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8022030:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8022034:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8022038:	9b05      	ldr	r3, [sp, #20]
 802203a:	689a      	ldr	r2, [r3, #8]
 802203c:	f002 f94d 	bl	80242da <_lv_area_intersect>
 8022040:	2800      	cmp	r0, #0
 8022042:	d03e      	beq.n	80220c2 <lv_draw_sw_rect+0x79a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8022044:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8022048:	a917      	add	r1, sp, #92	; 0x5c
 802204a:	a81b      	add	r0, sp, #108	; 0x6c
 802204c:	920a      	str	r2, [sp, #40]	; 0x28
 802204e:	f002 fa43 	bl	80244d8 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8022052:	bbb0      	cbnz	r0, 80220c2 <lv_draw_sw_rect+0x79a>
 8022054:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 8022058:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 802205c:	f108 0801 	add.w	r8, r8, #1
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8022060:	9906      	ldr	r1, [sp, #24]
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8022062:	f9bd 906a 	ldrsh.w	r9, [sp, #106]	; 0x6a
 8022066:	eba8 0807 	sub.w	r8, r8, r7
 802206a:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 802206e:	f9bd a064 	ldrsh.w	sl, [sp, #100]	; 0x64
 8022072:	fa0f f888 	sxth.w	r8, r8
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8022076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022078:	b129      	cbz	r1, 8022086 <lv_draw_sw_rect+0x75e>
 802207a:	a917      	add	r1, sp, #92	; 0x5c
 802207c:	a81b      	add	r0, sp, #108	; 0x6c
 802207e:	930a      	str	r3, [sp, #40]	; 0x28
 8022080:	f002 fa73 	bl	802456a <_lv_area_is_out>
 8022084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        if(w > 0) {
 8022086:	f1b8 0f00 	cmp.w	r8, #0
        blend_dsc.mask_buf = mask_buf;
 802208a:	9526      	str	r5, [sp, #152]	; 0x98
        if(w > 0) {
 802208c:	dd19      	ble.n	80220c2 <lv_draw_sw_rect+0x79a>
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 802208e:	eba9 0903 	sub.w	r9, r9, r3
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8022092:	eba7 070a 	sub.w	r7, r7, sl
 8022096:	9b07      	ldr	r3, [sp, #28]
 8022098:	fb0b 7709 	mla	r7, fp, r9, r7
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 802209c:	f9bd 9072 	ldrsh.w	r9, [sp, #114]	; 0x72
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 80220a0:	441f      	add	r7, r3
            blend_area.x1 = clip_area_sub.x1;
 80220a2:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 80220a6:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 80220aa:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80220ae:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 80220b2:	2302      	movs	r3, #2
 80220b4:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 80220b8:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 80220bc:	454b      	cmp	r3, r9
 80220be:	f340 836d 	ble.w	802279c <lv_draw_sw_rect+0xe74>
    blend_area.x1 = shadow_area.x1 + corner_size ;
 80220c2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80220c6:	a919      	add	r1, sp, #100	; 0x64
 80220c8:	a81b      	add	r0, sp, #108	; 0x6c
    blend_dsc.mask_buf = mask_buf;
 80220ca:	9526      	str	r5, [sp, #152]	; 0x98
    blend_area.x1 = shadow_area.x1 + corner_size ;
 80220cc:	4433      	add	r3, r6
 80220ce:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x2 - corner_size;
 80220d2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80220d6:	1b9b      	subs	r3, r3, r6
 80220d8:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y1 + corner_size;
 80220dc:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80220e0:	4433      	add	r3, r6
 80220e2:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = shadow_area.y2 - corner_size;
 80220e6:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 80220ea:	1b9b      	subs	r3, r3, r6
 80220ec:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80220f0:	9b05      	ldr	r3, [sp, #20]
 80220f2:	689a      	ldr	r2, [r3, #8]
 80220f4:	f002 f8f1 	bl	80242da <_lv_area_intersect>
 80220f8:	b1d0      	cbz	r0, 8022130 <lv_draw_sw_rect+0x808>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80220fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80220fc:	a917      	add	r1, sp, #92	; 0x5c
 80220fe:	a81b      	add	r0, sp, #108	; 0x6c
 8022100:	f002 f9ea 	bl	80244d8 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8022104:	b9a0      	cbnz	r0, 8022130 <lv_draw_sw_rect+0x808>
 8022106:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 802210a:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 802210e:	1c5e      	adds	r6, r3, #1
 8022110:	1ab6      	subs	r6, r6, r2
 8022112:	b2b7      	uxth	r7, r6
 8022114:	b236      	sxth	r6, r6
        if(w > 0) {
 8022116:	2e00      	cmp	r6, #0
 8022118:	dd0a      	ble.n	8022130 <lv_draw_sw_rect+0x808>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 802211a:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
            blend_area.x1 = clip_area_sub.x1;
 802211e:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8022122:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022126:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 802212a:	4543      	cmp	r3, r8
 802212c:	f280 835b 	bge.w	80227e6 <lv_draw_sw_rect+0xebe>
    if(!simple) {
 8022130:	9b06      	ldr	r3, [sp, #24]
 8022132:	b92b      	cbnz	r3, 8022140 <lv_draw_sw_rect+0x818>
        lv_draw_mask_free_param(&mask_rout_param);
 8022134:	a81d      	add	r0, sp, #116	; 0x74
 8022136:	f7fd f929 	bl	801f38c <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rout_id);
 802213a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802213c:	f7e6 f8ea 	bl	8008314 <lv_draw_mask_remove_id>
    lv_mem_buf_release(sh_buf);
 8022140:	9807      	ldr	r0, [sp, #28]
 8022142:	f7f0 fb83 	bl	801284c <lv_mem_buf_release>
    lv_mem_buf_release(mask_buf);
 8022146:	4628      	mov	r0, r5
 8022148:	f7f0 fb80 	bl	801284c <lv_mem_buf_release>
    draw_bg(draw_ctx, dsc, coords);
 802214c:	9a08      	ldr	r2, [sp, #32]
 802214e:	4621      	mov	r1, r4
 8022150:	9805      	ldr	r0, [sp, #20]
 8022152:	f7fe ff3a 	bl	8020fca <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 8022156:	9a08      	ldr	r2, [sp, #32]
 8022158:	4621      	mov	r1, r4
 802215a:	9805      	ldr	r0, [sp, #20]
 802215c:	f7fe fd77 	bl	8020c4e <draw_bg_img>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 8022160:	f894 c022 	ldrb.w	ip, [r4, #34]	; 0x22
 8022164:	f1bc 0f02 	cmp.w	ip, #2
 8022168:	d965      	bls.n	8022236 <lv_draw_sw_rect+0x90e>
    if(dsc->border_width == 0) return;
 802216a:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 802216e:	2a00      	cmp	r2, #0
 8022170:	d061      	beq.n	8022236 <lv_draw_sw_rect+0x90e>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 8022172:	f894 7023 	ldrb.w	r7, [r4, #35]	; 0x23
 8022176:	f017 0f3e 	tst.w	r7, #62	; 0x3e
 802217a:	d05c      	beq.n	8022236 <lv_draw_sw_rect+0x90e>
    if(dsc->border_post) return;
 802217c:	07fb      	lsls	r3, r7, #31
 802217e:	d45a      	bmi.n	8022236 <lv_draw_sw_rect+0x90e>
 8022180:	9b08      	ldr	r3, [sp, #32]
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 8022182:	f3c7 0844 	ubfx	r8, r7, #1, #5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8022186:	88d9      	ldrh	r1, [r3, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8022188:	889d      	ldrh	r5, [r3, #4]
 802218a:	881e      	ldrh	r6, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802218c:	f101 0e01 	add.w	lr, r1, #1
 8022190:	8858      	ldrh	r0, [r3, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8022192:	1c6b      	adds	r3, r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8022194:	ebae 0e00 	sub.w	lr, lr, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8022198:	1b9b      	subs	r3, r3, r6
    int32_t coords_h = lv_area_get_height(coords);
 802219a:	fa0f fe8e 	sxth.w	lr, lr
    int32_t coords_w = lv_area_get_width(coords);
 802219e:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MIN(coords_w, coords_h);
 80221a0:	4573      	cmp	r3, lr
 80221a2:	bfa8      	it	ge
 80221a4:	4673      	movge	r3, lr
    int32_t rout = dsc->radius;
 80221a6:	f9b4 e000 	ldrsh.w	lr, [r4]
    if(rout > short_side >> 1) rout = short_side >> 1;
 80221aa:	105b      	asrs	r3, r3, #1
 80221ac:	4573      	cmp	r3, lr
 80221ae:	bfa8      	it	ge
 80221b0:	4673      	movge	r3, lr
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 80221b2:	fa1f fe82 	uxth.w	lr, r2
 80221b6:	073f      	lsls	r7, r7, #28
 80221b8:	b29a      	uxth	r2, r3
 80221ba:	bf4f      	iteee	mi
 80221bc:	4677      	movmi	r7, lr
 80221be:	eb0e 0702 	addpl.w	r7, lr, r2
 80221c2:	427f      	negpl	r7, r7
 80221c4:	b2bf      	uxthpl	r7, r7
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 80221c6:	f018 0f08 	tst.w	r8, #8
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 80221ca:	443e      	add	r6, r7
 80221cc:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 80221d0:	bf09      	itett	eq
 80221d2:	eb0e 0602 	addeq.w	r6, lr, r2
 80221d6:	4676      	movne	r6, lr
 80221d8:	4276      	negeq	r6, r6
 80221da:	b2b6      	uxtheq	r6, r6
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 80221dc:	f018 0f02 	tst.w	r8, #2
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 80221e0:	eba5 0506 	sub.w	r5, r5, r6
 80221e4:	f8ad 5090 	strh.w	r5, [sp, #144]	; 0x90
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 80221e8:	bf09      	itett	eq
 80221ea:	eb0e 0502 	addeq.w	r5, lr, r2
 80221ee:	4675      	movne	r5, lr
 80221f0:	426d      	negeq	r5, r5
 80221f2:	b2ad      	uxtheq	r5, r5
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 80221f4:	f018 0f01 	tst.w	r8, #1
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 80221f8:	4428      	add	r0, r5
 80221fa:	f8ad 008e 	strh.w	r0, [sp, #142]	; 0x8e
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 80221fe:	bf0c      	ite	eq
 8022200:	eb0e 0002 	addeq.w	r0, lr, r2
 8022204:	4670      	movne	r0, lr
    lv_coord_t rin = rout - dsc->border_width;
 8022206:	eba2 020e 	sub.w	r2, r2, lr
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 802220a:	bf08      	it	eq
 802220c:	4240      	negeq	r0, r0
    if(rin < 0) rin = 0;
 802220e:	b212      	sxth	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 8022210:	bf08      	it	eq
 8022212:	b280      	uxtheq	r0, r0
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 8022214:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 8022218:	1a09      	subs	r1, r1, r0
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 802221a:	9805      	ldr	r0, [sp, #20]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 802221c:	f8ad 1092 	strh.w	r1, [sp, #146]	; 0x92
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 8022220:	78a1      	ldrb	r1, [r4, #2]
 8022222:	e9cd c102 	strd	ip, r1, [sp, #8]
 8022226:	8be1      	ldrh	r1, [r4, #30]
 8022228:	9200      	str	r2, [sp, #0]
 802222a:	aa23      	add	r2, sp, #140	; 0x8c
 802222c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8022230:	9908      	ldr	r1, [sp, #32]
 8022232:	f7ff f89e 	bl	8021372 <draw_border_generic>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 8022236:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
 802223a:	2d02      	cmp	r5, #2
 802223c:	d954      	bls.n	80222e8 <lv_draw_sw_rect+0x9c0>
    if(dsc->outline_width == 0) return;
 802223e:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 8022242:	2b00      	cmp	r3, #0
 8022244:	d050      	beq.n	80222e8 <lv_draw_sw_rect+0x9c0>
    dest->y2 = src->y2;
 8022246:	9908      	ldr	r1, [sp, #32]
    area_outer.x1 -= dsc->outline_width;
 8022248:	b29b      	uxth	r3, r3
    area_inner.y1 -= pad;
 802224a:	9f08      	ldr	r7, [sp, #32]
 802224c:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
    lv_coord_t pad = dsc->outline_pad - 1;
 8022250:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    area_inner.x1 -= pad;
 8022252:	9e08      	ldr	r6, [sp, #32]
    lv_coord_t pad = dsc->outline_pad - 1;
 8022254:	3901      	subs	r1, #1
    area_inner.y1 -= pad;
 8022256:	f8b7 c002 	ldrh.w	ip, [r7, #2]
    area_inner.x1 -= pad;
 802225a:	8836      	ldrh	r6, [r6, #0]
    lv_coord_t pad = dsc->outline_pad - 1;
 802225c:	b289      	uxth	r1, r1
    dest->x2 = src->x2;
 802225e:	9a08      	ldr	r2, [sp, #32]
    area_inner.x1 -= pad;
 8022260:	eba6 0e01 	sub.w	lr, r6, r1
 8022264:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
    area_inner.y1 -= pad;
 8022268:	ebac 0701 	sub.w	r7, ip, r1
    area_inner.y2 += pad;
 802226c:	4408      	add	r0, r1
    area_inner.x1 -= pad;
 802226e:	fa1f fe8e 	uxth.w	lr, lr
    area_inner.x2 += pad;
 8022272:	440a      	add	r2, r1
    area_inner.y1 -= pad;
 8022274:	b2bf      	uxth	r7, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8022276:	f1c6 0601 	rsb	r6, r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802227a:	f1cc 0c01 	rsb	ip, ip, #1
    area_inner.x2 += pad;
 802227e:	b292      	uxth	r2, r2
    area_inner.y2 += pad;
 8022280:	b280      	uxth	r0, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8022282:	440e      	add	r6, r1
    area_inner.x1 -= pad;
 8022284:	f8ad e074 	strh.w	lr, [sp, #116]	; 0x74
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8022288:	4461      	add	r1, ip
    area_outer.x1 -= dsc->outline_width;
 802228a:	ebae 0e03 	sub.w	lr, lr, r3
    area_inner.y1 -= pad;
 802228e:	f8ad 7076 	strh.w	r7, [sp, #118]	; 0x76
    area_outer.y1 -= dsc->outline_width;
 8022292:	1aff      	subs	r7, r7, r3
    area_inner.x2 += pad;
 8022294:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    area_inner.y2 += pad;
 8022298:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    area_outer.x1 -= dsc->outline_width;
 802229c:	f8ad e08c 	strh.w	lr, [sp, #140]	; 0x8c
    area_outer.x2 += dsc->outline_width;
 80222a0:	eb02 0e03 	add.w	lr, r2, r3
    area_outer.y1 -= dsc->outline_width;
 80222a4:	f8ad 708e 	strh.w	r7, [sp, #142]	; 0x8e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80222a8:	4432      	add	r2, r6
    area_outer.y2 += dsc->outline_width;
 80222aa:	18c7      	adds	r7, r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80222ac:	4408      	add	r0, r1
    int32_t inner_w = lv_area_get_width(&area_inner);
 80222ae:	b212      	sxth	r2, r2
    int32_t rin = dsc->radius;
 80222b0:	f9b4 1000 	ldrsh.w	r1, [r4]
    int32_t inner_h = lv_area_get_height(&area_inner);
 80222b4:	b200      	sxth	r0, r0
    area_outer.x2 += dsc->outline_width;
 80222b6:	f8ad e090 	strh.w	lr, [sp, #144]	; 0x90
    area_outer.y2 += dsc->outline_width;
 80222ba:	f8ad 7092 	strh.w	r7, [sp, #146]	; 0x92
    int32_t short_side = LV_MIN(inner_w, inner_h);
 80222be:	4282      	cmp	r2, r0
 80222c0:	bfa8      	it	ge
 80222c2:	4602      	movge	r2, r0
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 80222c4:	9805      	ldr	r0, [sp, #20]
    if(rin > short_side >> 1) rin = short_side >> 1;
 80222c6:	1052      	asrs	r2, r2, #1
 80222c8:	428a      	cmp	r2, r1
 80222ca:	bfa8      	it	ge
 80222cc:	460a      	movge	r2, r1
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 80222ce:	78a1      	ldrb	r1, [r4, #2]
    lv_coord_t rout = rin + dsc->outline_width;
 80222d0:	4413      	add	r3, r2
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 80222d2:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80222d6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80222d8:	b21b      	sxth	r3, r3
 80222da:	9200      	str	r2, [sp, #0]
 80222dc:	aa1d      	add	r2, sp, #116	; 0x74
 80222de:	f8ad 1004 	strh.w	r1, [sp, #4]
 80222e2:	a923      	add	r1, sp, #140	; 0x8c
 80222e4:	f7ff f845 	bl	8021372 <draw_border_generic>
}
 80222e8:	b02b      	add	sp, #172	; 0xac
 80222ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    shadow_blur_corner(size, sw, sh_buf);
 80222ee:	b236      	sxth	r6, r6
 80222f0:	4629      	mov	r1, r5
 80222f2:	9a07      	ldr	r2, [sp, #28]
 80222f4:	4630      	mov	r0, r6
 80222f6:	f7fe fdac 	bl	8020e52 <shadow_blur_corner>
    sw += sw_ori & 1;
 80222fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80222fc:	4429      	add	r1, r5
 80222fe:	b28d      	uxth	r5, r1
 8022300:	b209      	sxth	r1, r1
    if(sw > 1) {
 8022302:	2901      	cmp	r1, #1
 8022304:	dd0c      	ble.n	8022320 <lv_draw_sw_rect+0x9f8>
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 8022306:	f44f 507f 	mov.w	r0, #16320	; 0x3fc0
 802230a:	9a07      	ldr	r2, [sp, #28]
 802230c:	fbb0 f0f5 	udiv	r0, r0, r5
        for(i = 0; i < (uint32_t)size * size; i++) {
 8022310:	eb02 0c47 	add.w	ip, r2, r7, lsl #1
 8022314:	4594      	cmp	ip, r2
 8022316:	d10e      	bne.n	8022336 <lv_draw_sw_rect+0xa0e>
        shadow_blur_corner(size, sw, sh_buf);
 8022318:	9a07      	ldr	r2, [sp, #28]
 802231a:	4630      	mov	r0, r6
 802231c:	f7fe fd99 	bl	8020e52 <shadow_blur_corner>
        for(i = 0; i < size * size; i++) {
 8022320:	2300      	movs	r3, #0
    for(x = 0; x < size * size; x++) {
 8022322:	42bb      	cmp	r3, r7
 8022324:	f43f ac31 	beq.w	8021b8a <lv_draw_sw_rect+0x262>
        res_buf[x] = sh_buf[x];
 8022328:	9a07      	ldr	r2, [sp, #28]
 802232a:	9907      	ldr	r1, [sp, #28]
 802232c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8022330:	54ca      	strb	r2, [r1, r3]
    for(x = 0; x < size * size; x++) {
 8022332:	3301      	adds	r3, #1
 8022334:	e7f5      	b.n	8022322 <lv_draw_sw_rect+0x9fa>
            if(sh_buf[i] == 0) continue;
 8022336:	f832 3b02 	ldrh.w	r3, [r2], #2
 802233a:	2b00      	cmp	r3, #0
 802233c:	d0ea      	beq.n	8022314 <lv_draw_sw_rect+0x9ec>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 802233e:	2bff      	cmp	r3, #255	; 0xff
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 8022340:	bf17      	itett	ne
 8022342:	019b      	lslne	r3, r3, #6
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 8022344:	f822 0c02 	strheq.w	r0, [r2, #-2]
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 8022348:	fbb3 f3f5 	udivne	r3, r3, r5
 802234c:	f822 3c02 	strhne.w	r3, [r2, #-2]
        for(i = 0; i < (uint32_t)size * size; i++) {
 8022350:	e7e0      	b.n	8022314 <lv_draw_sw_rect+0x9ec>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 8022352:	8863      	ldrh	r3, [r4, #2]
 8022354:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8022358:	f47f ac1d 	bne.w	8021b96 <lv_draw_sw_rect+0x26e>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 802235c:	f04f 33ff 	mov.w	r3, #4294967295
 8022360:	930f      	str	r3, [sp, #60]	; 0x3c
 8022362:	e425      	b.n	8021bb0 <lv_draw_sw_rect+0x288>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8022364:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8022368:	a917      	add	r1, sp, #92	; 0x5c
 802236a:	a81b      	add	r0, sp, #108	; 0x6c
 802236c:	920d      	str	r2, [sp, #52]	; 0x34
 802236e:	f002 f8b3 	bl	80244d8 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8022372:	2800      	cmp	r0, #0
 8022374:	f47f ac7b 	bne.w	8021c6e <lv_draw_sw_rect+0x346>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8022378:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 802237c:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8022380:	f108 0801 	add.w	r8, r8, #1
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8022384:	9906      	ldr	r1, [sp, #24]
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 8022386:	f9bd a06e 	ldrsh.w	sl, [sp, #110]	; 0x6e
 802238a:	eba8 0807 	sub.w	r8, r8, r7
 802238e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8022392:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 8022396:	fa0f f888 	sxth.w	r8, r8
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 802239a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802239c:	b129      	cbz	r1, 80223aa <lv_draw_sw_rect+0xa82>
 802239e:	a917      	add	r1, sp, #92	; 0x5c
 80223a0:	a81b      	add	r0, sp, #108	; 0x6c
 80223a2:	930d      	str	r3, [sp, #52]	; 0x34
 80223a4:	f002 f8e1 	bl	802456a <_lv_area_is_out>
 80223a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if(w > 0) {
 80223aa:	f1b8 0f00 	cmp.w	r8, #0
 80223ae:	f77f ac5e 	ble.w	8021c6e <lv_draw_sw_rect+0x346>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 80223b2:	eba9 090b 	sub.w	r9, r9, fp
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 80223b6:	ebaa 0a03 	sub.w	sl, sl, r3
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 80223ba:	9b07      	ldr	r3, [sp, #28]
 80223bc:	f109 0901 	add.w	r9, r9, #1
            blend_dsc.mask_buf = mask_buf;
 80223c0:	9526      	str	r5, [sp, #152]	; 0x98
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 80223c2:	eba7 0709 	sub.w	r7, r7, r9
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80223c6:	f9bd 906e 	ldrsh.w	r9, [sp, #110]	; 0x6e
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 80223ca:	fb0b 770a 	mla	r7, fp, sl, r7
 80223ce:	441f      	add	r7, r3
            blend_area.x1 = clip_area_sub.x1;
 80223d0:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 80223d4:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 80223d8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80223dc:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 80223e0:	2302      	movs	r3, #2
 80223e2:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80223e6:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 80223ea:	454b      	cmp	r3, r9
 80223ec:	f6ff ac3f 	blt.w	8021c6e <lv_draw_sw_rect+0x346>
                if(!simple_sub) {
 80223f0:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 80223f2:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                blend_area.y2 = y;
 80223f6:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                if(!simple_sub) {
 80223fa:	b9e3      	cbnz	r3, 8022436 <lv_draw_sw_rect+0xb0e>
    return memcpy(dst, src, len);
 80223fc:	465a      	mov	r2, fp
 80223fe:	4639      	mov	r1, r7
 8022400:	4628      	mov	r0, r5
 8022402:	f7f8 f9b6 	bl	801a772 <memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8022406:	4643      	mov	r3, r8
 8022408:	464a      	mov	r2, r9
 802240a:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 802240e:	4628      	mov	r0, r5
 8022410:	f7e5 ff60 	bl	80082d4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8022414:	2801      	cmp	r0, #1
 8022416:	bf0a      	itet	eq
 8022418:	2302      	moveq	r3, #2
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 802241a:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 802241e:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022422:	f109 0901 	add.w	r9, r9, #1
 8022426:	a923      	add	r1, sp, #140	; 0x8c
 8022428:	9805      	ldr	r0, [sp, #20]
                sh_buf_tmp += corner_size;
 802242a:	445f      	add	r7, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 802242c:	fa0f f989 	sxth.w	r9, r9
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022430:	f7fe f803 	bl	802043a <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022434:	e7d7      	b.n	80223e6 <lv_draw_sw_rect+0xabe>
                    blend_dsc.mask_buf = sh_buf_tmp;
 8022436:	9726      	str	r7, [sp, #152]	; 0x98
 8022438:	e7f3      	b.n	8022422 <lv_draw_sw_rect+0xafa>
                if(!simple_sub) {
 802243a:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 802243c:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8022440:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                if(!simple_sub) {
 8022444:	b9e3      	cbnz	r3, 8022480 <lv_draw_sw_rect+0xb58>
 8022446:	465a      	mov	r2, fp
 8022448:	4639      	mov	r1, r7
 802244a:	4628      	mov	r0, r5
 802244c:	f7f8 f991 	bl	801a772 <memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8022450:	4643      	mov	r3, r8
 8022452:	464a      	mov	r2, r9
 8022454:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8022458:	4628      	mov	r0, r5
 802245a:	f7e5 ff3b 	bl	80082d4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 802245e:	2801      	cmp	r0, #1
 8022460:	bf0a      	itet	eq
 8022462:	2302      	moveq	r3, #2
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8022464:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8022468:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802246c:	f109 39ff 	add.w	r9, r9, #4294967295
 8022470:	a923      	add	r1, sp, #140	; 0x8c
 8022472:	9805      	ldr	r0, [sp, #20]
                sh_buf_tmp += corner_size;
 8022474:	445f      	add	r7, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8022476:	fa0f f989 	sxth.w	r9, r9
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802247a:	f7fd ffde 	bl	802043a <lv_draw_sw_blend>
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 802247e:	e459      	b.n	8021d34 <lv_draw_sw_rect+0x40c>
                    blend_dsc.mask_buf = sh_buf_tmp;
 8022480:	9726      	str	r7, [sp, #152]	; 0x98
 8022482:	e7f3      	b.n	802246c <lv_draw_sw_rect+0xb44>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8022484:	464a      	mov	r2, r9
 8022486:	a917      	add	r1, sp, #92	; 0x5c
 8022488:	a81b      	add	r0, sp, #108	; 0x6c
 802248a:	9311      	str	r3, [sp, #68]	; 0x44
 802248c:	f002 f86d 	bl	802456a <_lv_area_is_out>
 8022490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022492:	4681      	mov	r9, r0
 8022494:	2800      	cmp	r0, #0
 8022496:	d03b      	beq.n	8022510 <lv_draw_sw_rect+0xbe8>
        if(w > 0) {
 8022498:	2f00      	cmp	r7, #0
 802249a:	f77f ac8b 	ble.w	8021db4 <lv_draw_sw_rect+0x48c>
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 802249e:	ebaa 0a03 	sub.w	sl, sl, r3
 80224a2:	9b07      	ldr	r3, [sp, #28]
                blend_dsc.mask_buf = mask_buf;
 80224a4:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 80224a8:	fb0b 3a0a 	mla	sl, fp, sl, r3
            blend_area.x1 = clip_area_sub.x1;
 80224ac:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80224b0:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
            blend_area.x1 = clip_area_sub.x1;
 80224b4:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 80224b8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80224bc:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80224c0:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 80224c4:	4543      	cmp	r3, r8
 80224c6:	f6ff ac75 	blt.w	8021db4 <lv_draw_sw_rect+0x48c>
                blend_area.y1 = y;
 80224ca:	f8ad 8066 	strh.w	r8, [sp, #102]	; 0x66
                blend_area.y2 = y;
 80224ce:	f8ad 806a 	strh.w	r8, [sp, #106]	; 0x6a
                if(!simple_sub) {
 80224d2:	f89a 1000 	ldrb.w	r1, [sl]
 80224d6:	f1b9 0f00 	cmp.w	r9, #0
 80224da:	d121      	bne.n	8022520 <lv_draw_sw_rect+0xbf8>
    memset(dst, v, len);
 80224dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80224de:	4628      	mov	r0, r5
 80224e0:	f7f8 f952 	bl	801a788 <memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80224e4:	463b      	mov	r3, r7
 80224e6:	4642      	mov	r2, r8
 80224e8:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 80224ec:	4628      	mov	r0, r5
 80224ee:	f7e5 fef1 	bl	80082d4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80224f2:	2801      	cmp	r0, #1
 80224f4:	bf08      	it	eq
 80224f6:	2002      	moveq	r0, #2
 80224f8:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80224fc:	f108 0801 	add.w	r8, r8, #1
 8022500:	a923      	add	r1, sp, #140	; 0x8c
 8022502:	9805      	ldr	r0, [sp, #20]
                sh_buf_tmp += corner_size;
 8022504:	44da      	add	sl, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022506:	fa0f f888 	sxth.w	r8, r8
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802250a:	f7fd ff96 	bl	802043a <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 802250e:	e7d7      	b.n	80224c0 <lv_draw_sw_rect+0xb98>
        if(w > 0) {
 8022510:	2f00      	cmp	r7, #0
 8022512:	f77f ac4f 	ble.w	8021db4 <lv_draw_sw_rect+0x48c>
 8022516:	f8dd 9018 	ldr.w	r9, [sp, #24]
 802251a:	e7c0      	b.n	802249e <lv_draw_sw_rect+0xb76>
 802251c:	46a8      	mov	r8, r5
 802251e:	e7fa      	b.n	8022516 <lv_draw_sw_rect+0xbee>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 8022520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022522:	2bff      	cmp	r3, #255	; 0xff
 8022524:	bf1e      	ittt	ne
 8022526:	f894 3036 	ldrbne.w	r3, [r4, #54]	; 0x36
 802252a:	fb13 f101 	smulbbne	r1, r3, r1
 802252e:	0a09      	lsrne	r1, r1, #8
 8022530:	f88d 10a4 	strb.w	r1, [sp, #164]	; 0xa4
 8022534:	e7e2      	b.n	80224fc <lv_draw_sw_rect+0xbd4>
 8022536:	462b      	mov	r3, r5
 8022538:	e482      	b.n	8021e40 <lv_draw_sw_rect+0x518>
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 802253a:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 802253c:	f8ad 8066 	strh.w	r8, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8022540:	f8ad 806a 	strh.w	r8, [sp, #106]	; 0x6a
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8022544:	b9db      	cbnz	r3, 802257e <lv_draw_sw_rect+0xc56>
 8022546:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022548:	4628      	mov	r0, r5
 802254a:	f899 1000 	ldrb.w	r1, [r9]
 802254e:	f7f8 f91b 	bl	801a788 <memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8022552:	463b      	mov	r3, r7
 8022554:	4642      	mov	r2, r8
 8022556:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 802255a:	4628      	mov	r0, r5
 802255c:	f7e5 feba 	bl	80082d4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8022560:	2801      	cmp	r0, #1
 8022562:	bf08      	it	eq
 8022564:	2002      	moveq	r0, #2
 8022566:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802256a:	f108 38ff 	add.w	r8, r8, #4294967295
 802256e:	a923      	add	r1, sp, #140	; 0x8c
 8022570:	9805      	ldr	r0, [sp, #20]
                sh_buf_tmp += corner_size;
 8022572:	44d9      	add	r9, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8022574:	fa0f f888 	sxth.w	r8, r8
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022578:	f7fd ff5f 	bl	802043a <lv_draw_sw_blend>
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 802257c:	e471      	b.n	8021e62 <lv_draw_sw_rect+0x53a>
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 802257e:	4652      	mov	r2, sl
 8022580:	a917      	add	r1, sp, #92	; 0x5c
 8022582:	a81b      	add	r0, sp, #108	; 0x6c
 8022584:	f001 fff1 	bl	802456a <_lv_area_is_out>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 8022588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802258a:	2bff      	cmp	r3, #255	; 0xff
 802258c:	f899 3000 	ldrb.w	r3, [r9]
 8022590:	bf1e      	ittt	ne
 8022592:	f894 2036 	ldrbne.w	r2, [r4, #54]	; 0x36
 8022596:	fb13 f302 	smulbbne	r3, r3, r2
 802259a:	0a1b      	lsrne	r3, r3, #8
 802259c:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
 80225a0:	e7e3      	b.n	802256a <lv_draw_sw_rect+0xc42>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80225a2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80225a6:	a917      	add	r1, sp, #92	; 0x5c
 80225a8:	a81b      	add	r0, sp, #108	; 0x6c
 80225aa:	464a      	mov	r2, r9
 80225ac:	f001 ff94 	bl	80244d8 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80225b0:	2800      	cmp	r0, #0
 80225b2:	f47f ac8b 	bne.w	8021ecc <lv_draw_sw_rect+0x5a4>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 80225b6:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 80225ba:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 80225be:	eba3 030b 	sub.w	r3, r3, fp
 80225c2:	f9bd 806c 	ldrsh.w	r8, [sp, #108]	; 0x6c
 80225c6:	3701      	adds	r7, #1
 80225c8:	3301      	adds	r3, #1
 80225ca:	eba7 0708 	sub.w	r7, r7, r8
 80225ce:	eba8 0803 	sub.w	r8, r8, r3
        sh_buf_tmp += (corner_size - 1) * corner_size;
 80225d2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80225d6:	fa1f fa87 	uxth.w	sl, r7
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 80225da:	fb0b 8803 	mla	r8, fp, r3, r8
 80225de:	9b07      	ldr	r3, [sp, #28]
 80225e0:	b23f      	sxth	r7, r7
 80225e2:	4498      	add	r8, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 80225e4:	9b06      	ldr	r3, [sp, #24]
 80225e6:	2b00      	cmp	r3, #0
 80225e8:	d03d      	beq.n	8022666 <lv_draw_sw_rect+0xd3e>
 80225ea:	464a      	mov	r2, r9
 80225ec:	a917      	add	r1, sp, #92	; 0x5c
 80225ee:	a81b      	add	r0, sp, #108	; 0x6c
 80225f0:	f001 ffbb 	bl	802456a <_lv_area_is_out>
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 80225f4:	4643      	mov	r3, r8
        if(w > 0) {
 80225f6:	2f00      	cmp	r7, #0
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 80225f8:	9326      	str	r3, [sp, #152]	; 0x98
        if(w > 0) {
 80225fa:	f77f ac67 	ble.w	8021ecc <lv_draw_sw_rect+0x5a4>
            blend_area.x1 = clip_area_sub.x1;
 80225fe:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022602:	f9bd 906e 	ldrsh.w	r9, [sp, #110]	; 0x6e
            blend_area.x1 = clip_area_sub.x1;
 8022606:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 802260a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 802260e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8022612:	2302      	movs	r3, #2
 8022614:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022618:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 802261c:	454b      	cmp	r3, r9
 802261e:	f6ff ac55 	blt.w	8021ecc <lv_draw_sw_rect+0x5a4>
                if(!simple_sub) {
 8022622:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 8022624:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8022628:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                if(!simple_sub) {
 802262c:	b993      	cbnz	r3, 8022654 <lv_draw_sw_rect+0xd2c>
    return memcpy(dst, src, len);
 802262e:	4652      	mov	r2, sl
 8022630:	4641      	mov	r1, r8
 8022632:	4628      	mov	r0, r5
 8022634:	f7f8 f89d 	bl	801a772 <memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8022638:	463b      	mov	r3, r7
 802263a:	464a      	mov	r2, r9
 802263c:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8022640:	4628      	mov	r0, r5
 8022642:	f7e5 fe47 	bl	80082d4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8022646:	2801      	cmp	r0, #1
 8022648:	bf0a      	itet	eq
 802264a:	2302      	moveq	r3, #2
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 802264c:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8022650:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022654:	f109 0901 	add.w	r9, r9, #1
 8022658:	a923      	add	r1, sp, #140	; 0x8c
 802265a:	9805      	ldr	r0, [sp, #20]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 802265c:	fa0f f989 	sxth.w	r9, r9
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022660:	f7fd feeb 	bl	802043a <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022664:	e7d8      	b.n	8022618 <lv_draw_sw_rect+0xcf0>
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 8022666:	462b      	mov	r3, r5
 8022668:	e7c5      	b.n	80225f6 <lv_draw_sw_rect+0xcce>
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 802266a:	eb03 070b 	add.w	r7, r3, fp
 802266e:	463a      	mov	r2, r7
        for(x = 0; x < corner_size / 2; x++) {
 8022670:	eba7 0c02 	sub.w	ip, r7, r2
 8022674:	4560      	cmp	r0, ip
 8022676:	dc02      	bgt.n	802267e <lv_draw_sw_rect+0xd56>
    for(y = 0; y < corner_size; y++) {
 8022678:	3101      	adds	r1, #1
        for(x = 0; x < corner_size / 2; x++) {
 802267a:	463b      	mov	r3, r7
 802267c:	e42c      	b.n	8021ed8 <lv_draw_sw_rect+0x5b0>
            lv_opa_t tmp = *start;
 802267e:	f813 cf01 	ldrb.w	ip, [r3, #1]!
            *start = *end;
 8022682:	f892 e000 	ldrb.w	lr, [r2]
 8022686:	f883 e000 	strb.w	lr, [r3]
            *end = tmp;
 802268a:	f802 c901 	strb.w	ip, [r2], #-1
        for(x = 0; x < corner_size / 2; x++) {
 802268e:	e7ef      	b.n	8022670 <lv_draw_sw_rect+0xd48>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8022690:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022694:	a917      	add	r1, sp, #92	; 0x5c
 8022696:	a81b      	add	r0, sp, #108	; 0x6c
 8022698:	464a      	mov	r2, r9
 802269a:	f001 ff1d 	bl	80244d8 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 802269e:	2800      	cmp	r0, #0
 80226a0:	f47f ac4d 	bne.w	8021f3e <lv_draw_sw_rect+0x616>
 80226a4:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 80226a8:	f9bd 806c 	ldrsh.w	r8, [sp, #108]	; 0x6c
 80226ac:	3701      	adds	r7, #1
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 80226ae:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80226b2:	eba7 0708 	sub.w	r7, r7, r8
 80226b6:	eba8 0802 	sub.w	r8, r8, r2
 80226ba:	b2bb      	uxth	r3, r7
 80226bc:	b23f      	sxth	r7, r7
 80226be:	930b      	str	r3, [sp, #44]	; 0x2c
        sh_buf_tmp += (corner_size - 1) * corner_size;
 80226c0:	f10b 33ff 	add.w	r3, fp, #4294967295
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 80226c4:	fb0b 8803 	mla	r8, fp, r3, r8
 80226c8:	9b07      	ldr	r3, [sp, #28]
 80226ca:	4498      	add	r8, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 80226cc:	9b06      	ldr	r3, [sp, #24]
 80226ce:	2b00      	cmp	r3, #0
 80226d0:	d03d      	beq.n	802274e <lv_draw_sw_rect+0xe26>
 80226d2:	464a      	mov	r2, r9
 80226d4:	a917      	add	r1, sp, #92	; 0x5c
 80226d6:	a81b      	add	r0, sp, #108	; 0x6c
 80226d8:	f001 ff47 	bl	802456a <_lv_area_is_out>
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 80226dc:	4643      	mov	r3, r8
        if(w > 0) {
 80226de:	2f00      	cmp	r7, #0
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 80226e0:	9326      	str	r3, [sp, #152]	; 0x98
        if(w > 0) {
 80226e2:	f77f ac2c 	ble.w	8021f3e <lv_draw_sw_rect+0x616>
            blend_area.x1 = clip_area_sub.x1;
 80226e6:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80226ea:	f9bd 906e 	ldrsh.w	r9, [sp, #110]	; 0x6e
            blend_area.x1 = clip_area_sub.x1;
 80226ee:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 80226f2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80226f6:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 80226fa:	2302      	movs	r3, #2
 80226fc:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022700:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8022704:	454b      	cmp	r3, r9
 8022706:	f6ff ac1a 	blt.w	8021f3e <lv_draw_sw_rect+0x616>
                if(!simple_sub) {
 802270a:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 802270c:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8022710:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                if(!simple_sub) {
 8022714:	b993      	cbnz	r3, 802273c <lv_draw_sw_rect+0xe14>
 8022716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022718:	4641      	mov	r1, r8
 802271a:	4628      	mov	r0, r5
 802271c:	f7f8 f829 	bl	801a772 <memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8022720:	463b      	mov	r3, r7
 8022722:	464a      	mov	r2, r9
 8022724:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8022728:	4628      	mov	r0, r5
 802272a:	f7e5 fdd3 	bl	80082d4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 802272e:	2801      	cmp	r0, #1
 8022730:	bf0a      	itet	eq
 8022732:	2302      	moveq	r3, #2
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8022734:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8022738:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802273c:	f109 0901 	add.w	r9, r9, #1
 8022740:	a923      	add	r1, sp, #140	; 0x8c
 8022742:	9805      	ldr	r0, [sp, #20]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022744:	fa0f f989 	sxth.w	r9, r9
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022748:	f7fd fe77 	bl	802043a <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 802274c:	e7d8      	b.n	8022700 <lv_draw_sw_rect+0xdd8>
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 802274e:	462b      	mov	r3, r5
 8022750:	e7c5      	b.n	80226de <lv_draw_sw_rect+0xdb6>
                if(!simple_sub) {
 8022752:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 8022754:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8022758:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                if(!simple_sub) {
 802275c:	b9e3      	cbnz	r3, 8022798 <lv_draw_sw_rect+0xe70>
 802275e:	465a      	mov	r2, fp
 8022760:	4639      	mov	r1, r7
 8022762:	4628      	mov	r0, r5
 8022764:	f7f8 f805 	bl	801a772 <memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8022768:	4643      	mov	r3, r8
 802276a:	464a      	mov	r2, r9
 802276c:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8022770:	4628      	mov	r0, r5
 8022772:	f7e5 fdaf 	bl	80082d4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8022776:	2801      	cmp	r0, #1
 8022778:	bf0a      	itet	eq
 802277a:	2302      	moveq	r3, #2
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 802277c:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8022780:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022784:	f109 0901 	add.w	r9, r9, #1
 8022788:	a923      	add	r1, sp, #140	; 0x8c
 802278a:	9805      	ldr	r0, [sp, #20]
                sh_buf_tmp += corner_size;
 802278c:	445f      	add	r7, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 802278e:	fa0f f989 	sxth.w	r9, r9
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022792:	f7fd fe52 	bl	802043a <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022796:	e42f      	b.n	8021ff8 <lv_draw_sw_rect+0x6d0>
                    blend_dsc.mask_buf = sh_buf_tmp;
 8022798:	9726      	str	r7, [sp, #152]	; 0x98
 802279a:	e7f3      	b.n	8022784 <lv_draw_sw_rect+0xe5c>
                if(!simple_sub) {
 802279c:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 802279e:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                blend_area.y2 = y;
 80227a2:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                if(!simple_sub) {
 80227a6:	b9e3      	cbnz	r3, 80227e2 <lv_draw_sw_rect+0xeba>
 80227a8:	465a      	mov	r2, fp
 80227aa:	4639      	mov	r1, r7
 80227ac:	4628      	mov	r0, r5
 80227ae:	f7f7 ffe0 	bl	801a772 <memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80227b2:	4643      	mov	r3, r8
 80227b4:	464a      	mov	r2, r9
 80227b6:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 80227ba:	4628      	mov	r0, r5
 80227bc:	f7e5 fd8a 	bl	80082d4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80227c0:	2801      	cmp	r0, #1
 80227c2:	bf0a      	itet	eq
 80227c4:	2302      	moveq	r3, #2
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80227c6:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80227ca:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80227ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80227d2:	a923      	add	r1, sp, #140	; 0x8c
 80227d4:	9805      	ldr	r0, [sp, #20]
                sh_buf_tmp += corner_size;
 80227d6:	445f      	add	r7, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 80227d8:	fa0f f989 	sxth.w	r9, r9
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80227dc:	f7fd fe2d 	bl	802043a <lv_draw_sw_blend>
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 80227e0:	e46a      	b.n	80220b8 <lv_draw_sw_rect+0x790>
                    blend_dsc.mask_buf = sh_buf_tmp;
 80227e2:	9726      	str	r7, [sp, #152]	; 0x98
 80227e4:	e7f3      	b.n	80227ce <lv_draw_sw_rect+0xea6>
                lv_memset_ff(mask_buf, w);
 80227e6:	4639      	mov	r1, r7
 80227e8:	4628      	mov	r0, r5
                blend_area.y1 = y;
 80227ea:	f8ad 8066 	strh.w	r8, [sp, #102]	; 0x66
                blend_area.y2 = y;
 80227ee:	f8ad 806a 	strh.w	r8, [sp, #106]	; 0x6a
                lv_memset_ff(mask_buf, w);
 80227f2:	f7fe fa28 	bl	8020c46 <lv_memset_ff>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80227f6:	4642      	mov	r2, r8
 80227f8:	4633      	mov	r3, r6
 80227fa:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 80227fe:	4628      	mov	r0, r5
 8022800:	f108 0801 	add.w	r8, r8, #1
 8022804:	f7e5 fd66 	bl	80082d4 <lv_draw_mask_apply>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022808:	a923      	add	r1, sp, #140	; 0x8c
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 802280a:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802280e:	9805      	ldr	r0, [sp, #20]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022810:	fa0f f888 	sxth.w	r8, r8
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022814:	f7fd fe11 	bl	802043a <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022818:	e485      	b.n	8022126 <lv_draw_sw_rect+0x7fe>

0802281a <lv_color_mix>:
{
 802281a:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 802281c:	f3c1 1345 	ubfx	r3, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8022820:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022824:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8022828:	f000 071f 	and.w	r7, r0, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 802282c:	4373      	muls	r3, r6
 802282e:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8022832:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022836:	fb04 3302 	mla	r3, r4, r2, r3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 802283a:	f001 041f 	and.w	r4, r1, #31
 802283e:	4374      	muls	r4, r6
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022840:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8022842:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022846:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8022848:	3480      	adds	r4, #128	; 0x80
    return ret;
 802284a:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 802284e:	436c      	muls	r4, r5
    return ret;
 8022850:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 8022854:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8022858:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 802285c:	4373      	muls	r3, r6
 802285e:	fb00 3302 	mla	r3, r0, r2, r3
 8022862:	3380      	adds	r3, #128	; 0x80
 8022864:	436b      	muls	r3, r5
 8022866:	0ddb      	lsrs	r3, r3, #23
}
 8022868:	ea44 20c3 	orr.w	r0, r4, r3, lsl #11
 802286c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802286e <transform_point_upscaled>:
    }
}

static void transform_point_upscaled(point_transform_dsc_t * t, int32_t xin, int32_t yin, int32_t * xout,
                                     int32_t * yout)
{
 802286e:	b570      	push	{r4, r5, r6, lr}
    if(t->angle == 0 && t->zoom == LV_IMG_ZOOM_NONE) {
 8022870:	e9d0 5406 	ldrd	r5, r4, [r0, #24]
 8022874:	b944      	cbnz	r4, 8022888 <transform_point_upscaled+0x1a>
 8022876:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 802287a:	d123      	bne.n	80228c4 <transform_point_upscaled+0x56>
        *xout = xin * 256;
 802287c:	0209      	lsls	r1, r1, #8
        *yout = yin * 256;
 802287e:	0212      	lsls	r2, r2, #8
        *xout = xin * 256;
 8022880:	6019      	str	r1, [r3, #0]
        *yout = yin * 256;
 8022882:	9b04      	ldr	r3, [sp, #16]
 8022884:	601a      	str	r2, [r3, #0]
    }
    else {
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
    }
}
 8022886:	bd70      	pop	{r4, r5, r6, pc}
    xin -= t->pivot.x;
 8022888:	f9b0 4028 	ldrsh.w	r4, [r0, #40]	; 0x28
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 802288c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 8022890:	6946      	ldr	r6, [r0, #20]
    xin -= t->pivot.x;
 8022892:	eba1 0104 	sub.w	r1, r1, r4
    yin -= t->pivot.y;
 8022896:	f9b0 402a 	ldrsh.w	r4, [r0, #42]	; 0x2a
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 802289a:	fb01 f606 	mul.w	r6, r1, r6
    yin -= t->pivot.y;
 802289e:	eba2 0204 	sub.w	r2, r2, r4
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 80228a2:	6904      	ldr	r4, [r0, #16]
 80228a4:	fb04 6612 	mls	r6, r4, r2, r6
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 80228a8:	6a04      	ldr	r4, [r0, #32]
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 80228aa:	d11a      	bne.n	80228e2 <transform_point_upscaled+0x74>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 80228ac:	eb04 04a6 	add.w	r4, r4, r6, asr #2
 80228b0:	601c      	str	r4, [r3, #0]
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
 80228b2:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 80228b6:	4353      	muls	r3, r2
 80228b8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80228ba:	fb04 3301 	mla	r3, r4, r1, r3
 80228be:	eb02 02a3 	add.w	r2, r2, r3, asr #2
 80228c2:	e7de      	b.n	8022882 <transform_point_upscaled+0x14>
    yin -= t->pivot.y;
 80228c4:	f9b0 402a 	ldrsh.w	r4, [r0, #42]	; 0x2a
 80228c8:	1b14      	subs	r4, r2, r4
    xin -= t->pivot.x;
 80228ca:	f9b0 2028 	ldrsh.w	r2, [r0, #40]	; 0x28
 80228ce:	1a89      	subs	r1, r1, r2
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 80228d0:	6a02      	ldr	r2, [r0, #32]
 80228d2:	fb05 2201 	mla	r2, r5, r1, r2
 80228d6:	601a      	str	r2, [r3, #0]
        *yout = ((int32_t)(yin * t->zoom)) + (t->pivot_y_256);
 80228d8:	6983      	ldr	r3, [r0, #24]
 80228da:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80228dc:	fb03 2204 	mla	r2, r3, r4, r2
 80228e0:	e7cf      	b.n	8022882 <transform_point_upscaled+0x14>
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
 80228e2:	4375      	muls	r5, r6
 80228e4:	eb04 24a5 	add.w	r4, r4, r5, asr #10
 80228e8:	601c      	str	r4, [r3, #0]
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
 80228ea:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 80228ee:	4353      	muls	r3, r2
 80228f0:	6982      	ldr	r2, [r0, #24]
 80228f2:	fb04 3301 	mla	r3, r4, r1, r3
 80228f6:	4353      	muls	r3, r2
 80228f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80228fa:	eb02 22a3 	add.w	r2, r2, r3, asr #10
 80228fe:	e7c0      	b.n	8022882 <transform_point_upscaled+0x14>

08022900 <lv_draw_sw_transform>:
{
 8022900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022904:	b0ab      	sub	sp, #172	; 0xac
 8022906:	4693      	mov	fp, r2
    int32_t angle_low = tr_dsc.angle / 10;
 8022908:	270a      	movs	r7, #10
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 802290a:	f06f 0609 	mvn.w	r6, #9
{
 802290e:	9307      	str	r3, [sp, #28]
 8022910:	f9bd 30d0 	ldrsh.w	r3, [sp, #208]	; 0xd0
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 8022914:	9a36      	ldr	r2, [sp, #216]	; 0xd8
{
 8022916:	9303      	str	r3, [sp, #12]
 8022918:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 802291c:	9106      	str	r1, [sp, #24]
 802291e:	9304      	str	r3, [sp, #16]
    tr_dsc.angle = -draw_dsc->angle;
 8022920:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 8022922:	8851      	ldrh	r1, [r2, #2]
 8022924:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    tr_dsc.angle = -draw_dsc->angle;
 8022928:	f9b3 3000 	ldrsh.w	r3, [r3]
{
 802292c:	f89d 90dc 	ldrb.w	r9, [sp, #220]	; 0xdc
    tr_dsc.angle = -draw_dsc->angle;
 8022930:	425d      	negs	r5, r3
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 8022932:	fbb2 f2f1 	udiv	r2, r2, r1
    tr_dsc.angle = -draw_dsc->angle;
 8022936:	9526      	str	r5, [sp, #152]	; 0x98
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 8022938:	9225      	str	r2, [sp, #148]	; 0x94
    tr_dsc.pivot = draw_dsc->pivot;
 802293a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    int32_t angle_low = tr_dsc.angle / 10;
 802293c:	fb95 f5f7 	sdiv	r5, r5, r7
    tr_dsc.pivot = draw_dsc->pivot;
 8022940:	6852      	ldr	r2, [r2, #4]
    int32_t angle_high = angle_low + 1;
 8022942:	1c6c      	adds	r4, r5, #1
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 8022944:	436e      	muls	r6, r5
    int32_t s1 = lv_trigo_sin(angle_low);
 8022946:	b228      	sxth	r0, r5
    tr_dsc.pivot = draw_dsc->pivot;
 8022948:	9229      	str	r2, [sp, #164]	; 0xa4
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 802294a:	1af6      	subs	r6, r6, r3
    int32_t s1 = lv_trigo_sin(angle_low);
 802294c:	f7ef feaa 	bl	80126a4 <lv_trigo_sin>
 8022950:	4682      	mov	sl, r0
    int32_t s2 = lv_trigo_sin(angle_high);
 8022952:	b220      	sxth	r0, r4
 8022954:	f7ef fea6 	bl	80126a4 <lv_trigo_sin>
 8022958:	4604      	mov	r4, r0
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 802295a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 802295e:	4374      	muls	r4, r6
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 8022960:	b200      	sxth	r0, r0
 8022962:	f7ef fe9f 	bl	80126a4 <lv_trigo_sin>
 8022966:	4680      	mov	r8, r0
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 8022968:	f105 005b 	add.w	r0, r5, #91	; 0x5b
 802296c:	b200      	sxth	r0, r0
 802296e:	f7ef fe99 	bl	80126a4 <lv_trigo_sin>
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8022972:	1bba      	subs	r2, r7, r6
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8022974:	fb06 f300 	mul.w	r3, r6, r0
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8022978:	fb02 440a 	mla	r4, r2, sl, r4
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 802297c:	fb02 3308 	mla	r3, r2, r8, r3
 8022980:	9a06      	ldr	r2, [sp, #24]
 8022982:	fb93 f3f7 	sdiv	r3, r3, r7
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 8022986:	115b      	asrs	r3, r3, #5
 8022988:	8812      	ldrh	r2, [r2, #0]
 802298a:	9324      	str	r3, [sp, #144]	; 0x90
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 802298c:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 8022990:	021b      	lsls	r3, r3, #8
 8022992:	9327      	str	r3, [sp, #156]	; 0x9c
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 8022994:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 8022998:	021b      	lsls	r3, r3, #8
 802299a:	9328      	str	r3, [sp, #160]	; 0xa0
 802299c:	9b06      	ldr	r3, [sp, #24]
 802299e:	889b      	ldrh	r3, [r3, #4]
 80229a0:	3301      	adds	r3, #1
 80229a2:	1a9b      	subs	r3, r3, r2
 80229a4:	b29a      	uxth	r2, r3
 80229a6:	b21b      	sxth	r3, r3
 80229a8:	9218      	str	r2, [sp, #96]	; 0x60
 80229aa:	9305      	str	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80229ac:	9b06      	ldr	r3, [sp, #24]
 80229ae:	9a06      	ldr	r2, [sp, #24]
 80229b0:	88db      	ldrh	r3, [r3, #6]
 80229b2:	8852      	ldrh	r2, [r2, #2]
 80229b4:	3301      	adds	r3, #1
 80229b6:	1a9b      	subs	r3, r3, r2
 80229b8:	b21b      	sxth	r3, r3
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80229ba:	fb94 f4f7 	sdiv	r4, r4, r7
 80229be:	9317      	str	r3, [sp, #92]	; 0x5c
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 80229c0:	1164      	asrs	r4, r4, #5
        cbuf += dest_w;
 80229c2:	9b05      	ldr	r3, [sp, #20]
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 80229c4:	9423      	str	r4, [sp, #140]	; 0x8c
        cbuf += dest_w;
 80229c6:	005b      	lsls	r3, r3, #1
 80229c8:	9316      	str	r3, [sp, #88]	; 0x58
    for(y = 0; y < dest_h; y++) {
 80229ca:	2300      	movs	r3, #0
 80229cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80229ce:	9311      	str	r3, [sp, #68]	; 0x44
 80229d0:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 80229d4:	429a      	cmp	r2, r3
 80229d6:	dc02      	bgt.n	80229de <lv_draw_sw_transform+0xde>
}
 80229d8:	b02b      	add	sp, #172	; 0xac
 80229da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        transform_point_upscaled(&tr_dsc, dest_area->x1, dest_area->y1 + y, &xs1_ups, &ys1_ups);
 80229de:	9b06      	ldr	r3, [sp, #24]
 80229e0:	a81f      	add	r0, sp, #124	; 0x7c
 80229e2:	9906      	ldr	r1, [sp, #24]
 80229e4:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 80229e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80229ea:	441c      	add	r4, r3
 80229ec:	ab1c      	add	r3, sp, #112	; 0x70
 80229ee:	4622      	mov	r2, r4
 80229f0:	9300      	str	r3, [sp, #0]
 80229f2:	ab1b      	add	r3, sp, #108	; 0x6c
 80229f4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80229f8:	f7ff ff39 	bl	802286e <transform_point_upscaled>
        transform_point_upscaled(&tr_dsc, dest_area->x2, dest_area->y1 + y, &xs2_ups, &ys2_ups);
 80229fc:	ab1e      	add	r3, sp, #120	; 0x78
 80229fe:	9906      	ldr	r1, [sp, #24]
 8022a00:	4622      	mov	r2, r4
 8022a02:	9300      	str	r3, [sp, #0]
 8022a04:	ab1d      	add	r3, sp, #116	; 0x74
 8022a06:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8022a0a:	f7ff ff30 	bl	802286e <transform_point_upscaled>
        if(dest_w > 1) {
 8022a0e:	9a05      	ldr	r2, [sp, #20]
        int32_t xs_diff = xs2_ups - xs1_ups;
 8022a10:	9c1d      	ldr	r4, [sp, #116]	; 0x74
        if(dest_w > 1) {
 8022a12:	2a01      	cmp	r2, #1
        int32_t xs_diff = xs2_ups - xs1_ups;
 8022a14:	981b      	ldr	r0, [sp, #108]	; 0x6c
        int32_t ys_diff = ys2_ups - ys1_ups;
 8022a16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022a18:	991c      	ldr	r1, [sp, #112]	; 0x70
        if(dest_w > 1) {
 8022a1a:	dd2c      	ble.n	8022a76 <lv_draw_sw_transform+0x176>
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 8022a1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
        int32_t xs_diff = xs2_ups - xs1_ups;
 8022a1e:	1a24      	subs	r4, r4, r0
        int32_t ys_diff = ys2_ups - ys1_ups;
 8022a20:	1a5b      	subs	r3, r3, r1
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 8022a22:	3a01      	subs	r2, #1
 8022a24:	0224      	lsls	r4, r4, #8
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 8022a26:	021b      	lsls	r3, r3, #8
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 8022a28:	fb94 f4f2 	sdiv	r4, r4, r2
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 8022a2c:	fb93 f3f2 	sdiv	r3, r3, r2
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 8022a30:	940a      	str	r4, [sp, #40]	; 0x28
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 8022a32:	930b      	str	r3, [sp, #44]	; 0x2c
        int32_t xs_ups = xs1_ups + 0x80;
 8022a34:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8022a38:	930e      	str	r3, [sp, #56]	; 0x38
        int32_t ys_ups = ys1_ups + 0x80;
 8022a3a:	f101 0380 	add.w	r3, r1, #128	; 0x80
 8022a3e:	930f      	str	r3, [sp, #60]	; 0x3c
        if(draw_dsc->antialias == 0) {
 8022a40:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022a42:	7d1b      	ldrb	r3, [r3, #20]
 8022a44:	f013 0301 	ands.w	r3, r3, #1
 8022a48:	f040 80b9 	bne.w	8022bbe <lv_draw_sw_transform+0x2be>
            switch(cf) {
 8022a4c:	f1b9 0f06 	cmp.w	r9, #6
 8022a50:	d075      	beq.n	8022b3e <lv_draw_sw_transform+0x23e>
 8022a52:	d814      	bhi.n	8022a7e <lv_draw_sw_transform+0x17e>
 8022a54:	f1b9 0f04 	cmp.w	r9, #4
 8022a58:	d071      	beq.n	8022b3e <lv_draw_sw_transform+0x23e>
 8022a5a:	f1b9 0f05 	cmp.w	r9, #5
 8022a5e:	d041      	beq.n	8022ae4 <lv_draw_sw_transform+0x1e4>
        cbuf += dest_w;
 8022a60:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022a62:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022a64:	4413      	add	r3, r2
        abuf += dest_w;
 8022a66:	9a05      	ldr	r2, [sp, #20]
        cbuf += dest_w;
 8022a68:	9338      	str	r3, [sp, #224]	; 0xe0
        abuf += dest_w;
 8022a6a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8022a6c:	4413      	add	r3, r2
 8022a6e:	9339      	str	r3, [sp, #228]	; 0xe4
    for(y = 0; y < dest_h; y++) {
 8022a70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022a72:	3301      	adds	r3, #1
 8022a74:	e7aa      	b.n	80229cc <lv_draw_sw_transform+0xcc>
        int32_t ys_step_256 = 0;
 8022a76:	2300      	movs	r3, #0
        int32_t xs_step_256 = 0;
 8022a78:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8022a7c:	e7da      	b.n	8022a34 <lv_draw_sw_transform+0x134>
            switch(cf) {
 8022a7e:	f1b9 0f14 	cmp.w	r9, #20
 8022a82:	d1ed      	bne.n	8022a60 <lv_draw_sw_transform+0x160>
 8022a84:	4618      	mov	r0, r3
 8022a86:	4619      	mov	r1, r3
    for(x = 0; x < x_end; x++) {
 8022a88:	b20a      	sxth	r2, r1
 8022a8a:	9c05      	ldr	r4, [sp, #20]
 8022a8c:	4294      	cmp	r4, r2
 8022a8e:	dde7      	ble.n	8022a60 <lv_draw_sw_transform+0x160>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8022a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022a92:	eb02 2420 	add.w	r4, r2, r0, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022a96:	1224      	asrs	r4, r4, #8
 8022a98:	f100 808f 	bmi.w	8022bba <lv_draw_sw_transform+0x2ba>
 8022a9c:	9a07      	ldr	r2, [sp, #28]
 8022a9e:	4294      	cmp	r4, r2
 8022aa0:	f280 808b 	bge.w	8022bba <lv_draw_sw_transform+0x2ba>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8022aa4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022aa6:	eb02 2223 	add.w	r2, r2, r3, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022aaa:	1212      	asrs	r2, r2, #8
 8022aac:	f100 8085 	bmi.w	8022bba <lv_draw_sw_transform+0x2ba>
 8022ab0:	9d03      	ldr	r5, [sp, #12]
 8022ab2:	42aa      	cmp	r2, r5
 8022ab4:	f280 8081 	bge.w	8022bba <lv_draw_sw_transform+0x2ba>
            src_tmp += ys_int * src_stride + xs_int;
 8022ab8:	9d04      	ldr	r5, [sp, #16]
 8022aba:	fb02 4205 	mla	r2, r2, r5, r4
            cbuf[x] = *src_tmp;
 8022abe:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 8022ac0:	f83b 4012 	ldrh.w	r4, [fp, r2, lsl #1]
 8022ac4:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
            const lv_opa_t * a_tmp = src + src_stride * src_h * sizeof(lv_color_t);
 8022ac8:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
 8022acc:	436c      	muls	r4, r5
            abuf[x] = *a_tmp;
 8022ace:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 8022ad2:	5ca2      	ldrb	r2, [r4, r2]
            abuf[x] = 0;
 8022ad4:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8022ad6:	5462      	strb	r2, [r4, r1]
    for(x = 0; x < x_end; x++) {
 8022ad8:	3101      	adds	r1, #1
 8022ada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022adc:	4410      	add	r0, r2
 8022ade:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022ae0:	4413      	add	r3, r2
 8022ae2:	e7d1      	b.n	8022a88 <lv_draw_sw_transform+0x188>
            switch(cf) {
 8022ae4:	4618      	mov	r0, r3
 8022ae6:	4619      	mov	r1, r3
    for(x = 0; x < x_end; x++) {
 8022ae8:	b20a      	sxth	r2, r1
 8022aea:	9c05      	ldr	r4, [sp, #20]
 8022aec:	4294      	cmp	r4, r2
 8022aee:	ddb7      	ble.n	8022a60 <lv_draw_sw_transform+0x160>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8022af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022af2:	eb02 2220 	add.w	r2, r2, r0, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022af6:	1212      	asrs	r2, r2, #8
 8022af8:	d41f      	bmi.n	8022b3a <lv_draw_sw_transform+0x23a>
 8022afa:	9c07      	ldr	r4, [sp, #28]
 8022afc:	42a2      	cmp	r2, r4
 8022afe:	da1c      	bge.n	8022b3a <lv_draw_sw_transform+0x23a>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8022b00:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022b02:	eb04 2423 	add.w	r4, r4, r3, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022b06:	1224      	asrs	r4, r4, #8
 8022b08:	d417      	bmi.n	8022b3a <lv_draw_sw_transform+0x23a>
 8022b0a:	9d03      	ldr	r5, [sp, #12]
 8022b0c:	42ac      	cmp	r4, r5
 8022b0e:	da14      	bge.n	8022b3a <lv_draw_sw_transform+0x23a>
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8022b10:	9d04      	ldr	r5, [sp, #16]
 8022b12:	fb04 2205 	mla	r2, r4, r5, r2
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8022b16:	9d38      	ldr	r5, [sp, #224]	; 0xe0
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8022b18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022b1c:	eb0b 0402 	add.w	r4, fp, r2
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8022b20:	f83b 2002 	ldrh.w	r2, [fp, r2]
 8022b24:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
            abuf[x] = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8022b28:	78a2      	ldrb	r2, [r4, #2]
            abuf[x] = 0;
 8022b2a:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8022b2c:	5462      	strb	r2, [r4, r1]
    for(x = 0; x < x_end; x++) {
 8022b2e:	3101      	adds	r1, #1
 8022b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022b32:	4410      	add	r0, r2
 8022b34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022b36:	4413      	add	r3, r2
 8022b38:	e7d6      	b.n	8022ae8 <lv_draw_sw_transform+0x1e8>
 8022b3a:	2200      	movs	r2, #0
 8022b3c:	e7f5      	b.n	8022b2a <lv_draw_sw_transform+0x22a>
    lv_disp_t * d = _lv_refr_get_disp_refreshing();
 8022b3e:	f7e4 fb95 	bl	800726c <_lv_refr_get_disp_refreshing>
    lv_color_t ck = d->driver->color_chroma_key;
 8022b42:	6803      	ldr	r3, [r0, #0]
    memset(dst, 0xFF, len);
 8022b44:	21ff      	movs	r1, #255	; 0xff
 8022b46:	9a05      	ldr	r2, [sp, #20]
 8022b48:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8022b4a:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 8022b4c:	f7f7 fe1c 	bl	801a788 <memset>
}
 8022b50:	2100      	movs	r1, #0
 8022b52:	460d      	mov	r5, r1
 8022b54:	460b      	mov	r3, r1
    for(x = 0; x < x_end; x++) {
 8022b56:	b21a      	sxth	r2, r3
 8022b58:	9805      	ldr	r0, [sp, #20]
 8022b5a:	4290      	cmp	r0, r2
 8022b5c:	dd80      	ble.n	8022a60 <lv_draw_sw_transform+0x160>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8022b5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022b60:	eb02 2221 	add.w	r2, r2, r1, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022b64:	1212      	asrs	r2, r2, #8
 8022b66:	d40a      	bmi.n	8022b7e <lv_draw_sw_transform+0x27e>
 8022b68:	9807      	ldr	r0, [sp, #28]
 8022b6a:	4282      	cmp	r2, r0
 8022b6c:	da07      	bge.n	8022b7e <lv_draw_sw_transform+0x27e>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8022b6e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022b70:	eb00 2025 	add.w	r0, r0, r5, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022b74:	1200      	asrs	r0, r0, #8
 8022b76:	d402      	bmi.n	8022b7e <lv_draw_sw_transform+0x27e>
 8022b78:	9e03      	ldr	r6, [sp, #12]
 8022b7a:	42b0      	cmp	r0, r6
 8022b7c:	db14      	blt.n	8022ba8 <lv_draw_sw_transform+0x2a8>
            abuf[x] = 0x00;
 8022b7e:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8022b80:	f04f 0000 	mov.w	r0, #0
 8022b84:	54d0      	strb	r0, [r2, r3]
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 8022b86:	f1b9 0f06 	cmp.w	r9, #6
 8022b8a:	d107      	bne.n	8022b9c <lv_draw_sw_transform+0x29c>
 8022b8c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8022b8e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8022b92:	42a2      	cmp	r2, r4
            abuf[x] = 0x00;
 8022b94:	bf02      	ittt	eq
 8022b96:	9a39      	ldreq	r2, [sp, #228]	; 0xe4
 8022b98:	2000      	moveq	r0, #0
 8022b9a:	54d0      	strbeq	r0, [r2, r3]
    for(x = 0; x < x_end; x++) {
 8022b9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022b9e:	3301      	adds	r3, #1
 8022ba0:	4415      	add	r5, r2
 8022ba2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022ba4:	4411      	add	r1, r2
 8022ba6:	e7d6      	b.n	8022b56 <lv_draw_sw_transform+0x256>
            src_tmp += ys_int * src_stride + xs_int;
 8022ba8:	9e04      	ldr	r6, [sp, #16]
 8022baa:	fb00 2206 	mla	r2, r0, r6, r2
            cbuf[x] = *src_tmp;
 8022bae:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8022bb0:	f83b 2012 	ldrh.w	r2, [fp, r2, lsl #1]
 8022bb4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8022bb8:	e7e5      	b.n	8022b86 <lv_draw_sw_transform+0x286>
 8022bba:	2200      	movs	r2, #0
 8022bbc:	e78a      	b.n	8022ad4 <lv_draw_sw_transform+0x1d4>
    switch(cf) {
 8022bbe:	f1b9 0f06 	cmp.w	r9, #6
 8022bc2:	d013      	beq.n	8022bec <lv_draw_sw_transform+0x2ec>
 8022bc4:	d80c      	bhi.n	8022be0 <lv_draw_sw_transform+0x2e0>
 8022bc6:	f1b9 0f04 	cmp.w	r9, #4
 8022bca:	d015      	beq.n	8022bf8 <lv_draw_sw_transform+0x2f8>
 8022bcc:	f1b9 0f05 	cmp.w	r9, #5
 8022bd0:	f47f af46 	bne.w	8022a60 <lv_draw_sw_transform+0x160>
    lv_color_t ck = {0};
 8022bd4:	2600      	movs	r6, #0
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 8022bd6:	2303      	movs	r3, #3
            px_size = sizeof(lv_color_t);
 8022bd8:	9308      	str	r3, [sp, #32]
            has_alpha = true;
 8022bda:	2301      	movs	r3, #1
 8022bdc:	9310      	str	r3, [sp, #64]	; 0x40
 8022bde:	e00f      	b.n	8022c00 <lv_draw_sw_transform+0x300>
    switch(cf) {
 8022be0:	f1b9 0f14 	cmp.w	r9, #20
 8022be4:	f47f af3c 	bne.w	8022a60 <lv_draw_sw_transform+0x160>
    lv_color_t ck = {0};
 8022be8:	2600      	movs	r6, #0
 8022bea:	e003      	b.n	8022bf4 <lv_draw_sw_transform+0x2f4>
                lv_disp_t * d = _lv_refr_get_disp_refreshing();
 8022bec:	f7e4 fb3e 	bl	800726c <_lv_refr_get_disp_refreshing>
                ck = d->driver->color_chroma_key;
 8022bf0:	6803      	ldr	r3, [r0, #0]
 8022bf2:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
            px_size = sizeof(lv_color_t);
 8022bf4:	2302      	movs	r3, #2
 8022bf6:	e7ef      	b.n	8022bd8 <lv_draw_sw_transform+0x2d8>
    switch(cf) {
 8022bf8:	2600      	movs	r6, #0
 8022bfa:	2302      	movs	r3, #2
 8022bfc:	9610      	str	r6, [sp, #64]	; 0x40
 8022bfe:	9308      	str	r3, [sp, #32]
    for(x = 0; x < x_end; x++) {
 8022c00:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8022c04:	9309      	str	r3, [sp, #36]	; 0x24
 8022c06:	2300      	movs	r3, #0
 8022c08:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8022c0c:	9312      	str	r3, [sp, #72]	; 0x48
 8022c0e:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8022c12:	9a05      	ldr	r2, [sp, #20]
 8022c14:	429a      	cmp	r2, r3
 8022c16:	f77f af23 	ble.w	8022a60 <lv_draw_sw_transform+0x160>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8022c1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022c1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022c1e:	eb03 2522 	add.w	r5, r3, r2, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022c22:	1228      	asrs	r0, r5, #8
 8022c24:	d40c      	bmi.n	8022c40 <lv_draw_sw_transform+0x340>
 8022c26:	9b07      	ldr	r3, [sp, #28]
 8022c28:	4298      	cmp	r0, r3
 8022c2a:	da09      	bge.n	8022c40 <lv_draw_sw_transform+0x340>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8022c2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022c2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022c30:	eb03 2322 	add.w	r3, r3, r2, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022c34:	ea5f 2c23 	movs.w	ip, r3, asr #8
 8022c38:	d402      	bmi.n	8022c40 <lv_draw_sw_transform+0x340>
 8022c3a:	9a03      	ldr	r2, [sp, #12]
 8022c3c:	4594      	cmp	ip, r2
 8022c3e:	db02      	blt.n	8022c46 <lv_draw_sw_transform+0x346>
                abuf[x] = 0x00;
 8022c40:	f04f 0300 	mov.w	r3, #0
 8022c44:	e0ab      	b.n	8022d9e <lv_draw_sw_transform+0x49e>
        int32_t xs_fract = xs_ups & 0xFF;
 8022c46:	b2e9      	uxtb	r1, r5
        if(xs_fract < 0x80) {
 8022c48:	062d      	lsls	r5, r5, #24
        int32_t ys_fract = ys_ups & 0xFF;
 8022c4a:	b2da      	uxtb	r2, r3
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8022c4c:	9d08      	ldr	r5, [sp, #32]
            xs_fract = (0x7F - xs_fract) * 2;
 8022c4e:	bf55      	itete	pl
 8022c50:	f1c1 017f 	rsbpl	r1, r1, #127	; 0x7f
            xs_fract = (xs_fract - 0x80) * 2;
 8022c54:	3980      	submi	r1, #128	; 0x80
            xs_fract = (0x7F - xs_fract) * 2;
 8022c56:	0049      	lslpl	r1, r1, #1
            xs_fract = (xs_fract - 0x80) * 2;
 8022c58:	0049      	lslmi	r1, r1, #1
            xs_fract = (0x7F - xs_fract) * 2;
 8022c5a:	bf59      	ittee	pl
 8022c5c:	910d      	strpl	r1, [sp, #52]	; 0x34
            x_next = -1;
 8022c5e:	f04f 31ff 	movpl.w	r1, #4294967295
            xs_fract = (xs_fract - 0x80) * 2;
 8022c62:	910d      	strmi	r1, [sp, #52]	; 0x34
            x_next = 1;
 8022c64:	2101      	movmi	r1, #1
        if(ys_fract < 0x80) {
 8022c66:	061b      	lsls	r3, r3, #24
        if(xs_int + x_next >= 0 &&
 8022c68:	eb00 0e01 	add.w	lr, r0, r1
            ys_fract = (0x7F - ys_fract) * 2;
 8022c6c:	bf55      	itete	pl
 8022c6e:	f1c2 027f 	rsbpl	r2, r2, #127	; 0x7f
            ys_fract = (ys_fract - 0x80) * 2;
 8022c72:	3a80      	submi	r2, #128	; 0x80
            ys_fract = (0x7F - ys_fract) * 2;
 8022c74:	0053      	lslpl	r3, r2, #1
            ys_fract = (ys_fract - 0x80) * 2;
 8022c76:	0053      	lslmi	r3, r2, #1
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8022c78:	9a04      	ldr	r2, [sp, #16]
            ys_fract = (0x7F - ys_fract) * 2;
 8022c7a:	bf5c      	itt	pl
 8022c7c:	930c      	strpl	r3, [sp, #48]	; 0x30
            y_next = -1;
 8022c7e:	f04f 33ff 	movpl.w	r3, #4294967295
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8022c82:	fb02 fa0c 	mul.w	sl, r2, ip
            ys_fract = (ys_fract - 0x80) * 2;
 8022c86:	bf44      	itt	mi
 8022c88:	930c      	strmi	r3, [sp, #48]	; 0x30
            y_next = 1;
 8022c8a:	2301      	movmi	r3, #1
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8022c8c:	eb00 020a 	add.w	r2, r0, sl
        if(xs_int + x_next >= 0 &&
 8022c90:	f1be 3fff 	cmp.w	lr, #4294967295
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8022c94:	fb05 f702 	mul.w	r7, r5, r2
 8022c98:	9215      	str	r2, [sp, #84]	; 0x54
 8022c9a:	eb0b 0507 	add.w	r5, fp, r7
        if(xs_int + x_next >= 0 &&
 8022c9e:	f000 8099 	beq.w	8022dd4 <lv_draw_sw_transform+0x4d4>
 8022ca2:	9a07      	ldr	r2, [sp, #28]
 8022ca4:	4572      	cmp	r2, lr
 8022ca6:	f340 80a7 	ble.w	8022df8 <lv_draw_sw_transform+0x4f8>
           ys_int + y_next >= 0 &&
 8022caa:	eb0c 0803 	add.w	r8, ip, r3
           xs_int + x_next <= src_w - 1 &&
 8022cae:	f1b8 3fff 	cmp.w	r8, #4294967295
 8022cb2:	f000 80a1 	beq.w	8022df8 <lv_draw_sw_transform+0x4f8>
           ys_int + y_next >= 0 &&
 8022cb6:	9a03      	ldr	r2, [sp, #12]
 8022cb8:	4542      	cmp	r2, r8
 8022cba:	f340 809d 	ble.w	8022df8 <lv_draw_sw_transform+0x4f8>
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 8022cbe:	9a08      	ldr	r2, [sp, #32]
 8022cc0:	fb01 fe02 	mul.w	lr, r1, r2
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 8022cc4:	9a04      	ldr	r2, [sp, #16]
 8022cc6:	4353      	muls	r3, r2
 8022cc8:	9a08      	ldr	r2, [sp, #32]
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 8022cca:	eb05 0a0e 	add.w	sl, r5, lr
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 8022cce:	4353      	muls	r3, r2
 8022cd0:	18ea      	adds	r2, r5, r3
 8022cd2:	9219      	str	r2, [sp, #100]	; 0x64
            if(has_alpha) {
 8022cd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022cd6:	2a00      	cmp	r2, #0
 8022cd8:	d063      	beq.n	8022da2 <lv_draw_sw_transform+0x4a2>
                if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8022cda:	f1b9 0f05 	cmp.w	r9, #5
 8022cde:	d12d      	bne.n	8022d3c <lv_draw_sw_transform+0x43c>
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8022ce0:	18ea      	adds	r2, r5, r3
                    a_base = px_base[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8022ce2:	f895 c002 	ldrb.w	ip, [r5, #2]
                    a_hor = px_hor[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8022ce6:	f89a 1002 	ldrb.w	r1, [sl, #2]
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8022cea:	7890      	ldrb	r0, [r2, #2]
                if(a_ver != a_base) a_ver = ((a_ver * ys_fract) + (a_base * (0x100 - ys_fract))) >> 8;
 8022cec:	4584      	cmp	ip, r0
 8022cee:	d007      	beq.n	8022d00 <lv_draw_sw_transform+0x400>
 8022cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022cf2:	f5c2 7880 	rsb	r8, r2, #256	; 0x100
 8022cf6:	4350      	muls	r0, r2
 8022cf8:	fb0c 0008 	mla	r0, ip, r8, r0
 8022cfc:	f3c0 2007 	ubfx	r0, r0, #8, #8
                if(a_hor != a_base) a_hor = ((a_hor * xs_fract) + (a_base * (0x100 - xs_fract))) >> 8;
 8022d00:	458c      	cmp	ip, r1
 8022d02:	d007      	beq.n	8022d14 <lv_draw_sw_transform+0x414>
 8022d04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022d06:	f5c2 7880 	rsb	r8, r2, #256	; 0x100
 8022d0a:	4351      	muls	r1, r2
 8022d0c:	fb0c 1108 	mla	r1, ip, r8, r1
 8022d10:	f3c1 2107 	ubfx	r1, r1, #8, #8
                abuf[x] = (a_ver + a_hor) >> 1;
 8022d14:	4408      	add	r0, r1
 8022d16:	1040      	asrs	r0, r0, #1
 8022d18:	7020      	strb	r0, [r4, #0]
                if(abuf[x] == 0x00) continue;
 8022d1a:	bb40      	cbnz	r0, 8022d6e <lv_draw_sw_transform+0x46e>
    for(x = 0; x < x_end; x++) {
 8022d1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022d1e:	3401      	adds	r4, #1
 8022d20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022d22:	3301      	adds	r3, #1
 8022d24:	9312      	str	r3, [sp, #72]	; 0x48
 8022d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d28:	3302      	adds	r3, #2
 8022d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8022d2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022d2e:	4413      	add	r3, r2
 8022d30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022d32:	9314      	str	r3, [sp, #80]	; 0x50
 8022d34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022d36:	4413      	add	r3, r2
 8022d38:	9313      	str	r3, [sp, #76]	; 0x4c
 8022d3a:	e768      	b.n	8022c0e <lv_draw_sw_transform+0x30e>
                else if(cf == LV_IMG_CF_RGB565A8) {
 8022d3c:	f1b9 0f14 	cmp.w	r9, #20
 8022d40:	d110      	bne.n	8022d64 <lv_draw_sw_transform+0x464>
                    const lv_opa_t * a_tmp = src + src_stride * src_h * sizeof(lv_color_t);
 8022d42:	e9dd c203 	ldrd	ip, r2, [sp, #12]
 8022d46:	fb0c fa02 	mul.w	sl, ip, r2
                    a_base = *(a_tmp + (ys_int * src_stride) + xs_int);
 8022d4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
                    const lv_opa_t * a_tmp = src + src_stride * src_h * sizeof(lv_color_t);
 8022d4c:	eb0b 0a4a 	add.w	sl, fp, sl, lsl #1
                    a_hor = *(a_tmp + (ys_int * src_stride) + xs_int + x_next);
 8022d50:	4451      	add	r1, sl
                    a_base = *(a_tmp + (ys_int * src_stride) + xs_int);
 8022d52:	f81a c002 	ldrb.w	ip, [sl, r2]
                    a_hor = *(a_tmp + (ys_int * src_stride) + xs_int + x_next);
 8022d56:	5c89      	ldrb	r1, [r1, r2]
                    a_ver = *(a_tmp + ((ys_int + y_next) * src_stride) + xs_int);
 8022d58:	9a04      	ldr	r2, [sp, #16]
 8022d5a:	fb08 aa02 	mla	sl, r8, r2, sl
 8022d5e:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8022d62:	e7c3      	b.n	8022cec <lv_draw_sw_transform+0x3ec>
                else if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8022d64:	f1b9 0f06 	cmp.w	r9, #6
 8022d68:	d00d      	beq.n	8022d86 <lv_draw_sw_transform+0x486>
                abuf[x] = (a_ver + a_hor) >> 1;
 8022d6a:	21ff      	movs	r1, #255	; 0xff
 8022d6c:	7021      	strb	r1, [r4, #0]
                c_base.full = px_base[0] + (px_base[1] << 8);
 8022d6e:	f83b 1007 	ldrh.w	r1, [fp, r7]
                c_ver.full = px_ver[0] + (px_ver[1] << 8);
 8022d72:	5ae8      	ldrh	r0, [r5, r3]
                c_hor.full = px_hor[0] + (px_hor[1] << 8);
 8022d74:	f835 700e 	ldrh.w	r7, [r5, lr]
            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 8022d78:	4288      	cmp	r0, r1
 8022d7a:	d11a      	bne.n	8022db2 <lv_draw_sw_transform+0x4b2>
 8022d7c:	42b8      	cmp	r0, r7
 8022d7e:	d118      	bne.n	8022db2 <lv_draw_sw_transform+0x4b2>
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 8022d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d82:	8018      	strh	r0, [r3, #0]
 8022d84:	e7ca      	b.n	8022d1c <lv_draw_sw_transform+0x41c>
                    if(((lv_color_t *)px_base)->full == ck.full ||
 8022d86:	f83b 1007 	ldrh.w	r1, [fp, r7]
 8022d8a:	42b1      	cmp	r1, r6
 8022d8c:	d006      	beq.n	8022d9c <lv_draw_sw_transform+0x49c>
 8022d8e:	5ae9      	ldrh	r1, [r5, r3]
 8022d90:	42b1      	cmp	r1, r6
 8022d92:	d003      	beq.n	8022d9c <lv_draw_sw_transform+0x49c>
                       ((lv_color_t *)px_ver)->full == ck.full ||
 8022d94:	f835 100e 	ldrh.w	r1, [r5, lr]
 8022d98:	42b1      	cmp	r1, r6
 8022d9a:	d1e6      	bne.n	8022d6a <lv_draw_sw_transform+0x46a>
                        abuf[x] = 0x00;
 8022d9c:	2300      	movs	r3, #0
                abuf[x] = 0x00;
 8022d9e:	7023      	strb	r3, [r4, #0]
 8022da0:	e7bc      	b.n	8022d1c <lv_draw_sw_transform+0x41c>
                c_ver = *((const lv_color_t *) px_ver);
 8022da2:	5ae8      	ldrh	r0, [r5, r3]
                abuf[x] = 0xff;
 8022da4:	23ff      	movs	r3, #255	; 0xff
                c_base = *((const lv_color_t *) px_base);
 8022da6:	f83b 1007 	ldrh.w	r1, [fp, r7]
                c_hor = *((const lv_color_t *) px_hor);
 8022daa:	f835 700e 	ldrh.w	r7, [r5, lr]
                abuf[x] = 0xff;
 8022dae:	7023      	strb	r3, [r4, #0]
 8022db0:	e7e2      	b.n	8022d78 <lv_draw_sw_transform+0x478>
                c_ver = lv_color_mix(c_ver, c_base, ys_fract);
 8022db2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022db4:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8022db8:	f7ff fd2f 	bl	802281a <lv_color_mix>
                c_hor = lv_color_mix(c_hor, c_base, xs_fract);
 8022dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                c_ver = lv_color_mix(c_ver, c_base, ys_fract);
 8022dbe:	4605      	mov	r5, r0
                c_hor = lv_color_mix(c_hor, c_base, xs_fract);
 8022dc0:	4638      	mov	r0, r7
 8022dc2:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8022dc6:	f7ff fd28 	bl	802281a <lv_color_mix>
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 8022dca:	227f      	movs	r2, #127	; 0x7f
 8022dcc:	4629      	mov	r1, r5
 8022dce:	f7ff fd24 	bl	802281a <lv_color_mix>
 8022dd2:	e7d5      	b.n	8022d80 <lv_draw_sw_transform+0x480>
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8022dd4:	f83b 7007 	ldrh.w	r7, [fp, r7]
            switch(cf) {
 8022dd8:	f1b9 0f06 	cmp.w	r9, #6
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8022ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022dde:	8017      	strh	r7, [r2, #0]
            switch(cf) {
 8022de0:	d111      	bne.n	8022e06 <lv_draw_sw_transform+0x506>
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 8022de2:	1bf7      	subs	r7, r6, r7
 8022de4:	bf18      	it	ne
 8022de6:	f04f 37ff 	movne.w	r7, #4294967295
 8022dea:	b2ff      	uxtb	r7, r7
                abuf[x] = (a * (0xFF - xs_fract)) >> 8;
 8022dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022dee:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8022df2:	437b      	muls	r3, r7
 8022df4:	121b      	asrs	r3, r3, #8
 8022df6:	e7d2      	b.n	8022d9e <lv_draw_sw_transform+0x49e>
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8022df8:	f83b 7007 	ldrh.w	r7, [fp, r7]
            switch(cf) {
 8022dfc:	f1b9 0f06 	cmp.w	r9, #6
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8022e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022e02:	8017      	strh	r7, [r2, #0]
            switch(cf) {
 8022e04:	d01d      	beq.n	8022e42 <lv_draw_sw_transform+0x542>
 8022e06:	f1b9 0f14 	cmp.w	r9, #20
 8022e0a:	d020      	beq.n	8022e4e <lv_draw_sw_transform+0x54e>
 8022e0c:	f1b9 0f05 	cmp.w	r9, #5
 8022e10:	d126      	bne.n	8022e60 <lv_draw_sw_transform+0x560>
                    a = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8022e12:	78af      	ldrb	r7, [r5, #2]
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 8022e14:	bb30      	cbnz	r0, 8022e64 <lv_draw_sw_transform+0x564>
 8022e16:	f1be 3fff 	cmp.w	lr, #4294967295
 8022e1a:	d0e7      	beq.n	8022dec <lv_draw_sw_transform+0x4ec>
 8022e1c:	9a07      	ldr	r2, [sp, #28]
 8022e1e:	2a01      	cmp	r2, #1
 8022e20:	d0e4      	beq.n	8022dec <lv_draw_sw_transform+0x4ec>
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 8022e22:	f1bc 0f00 	cmp.w	ip, #0
 8022e26:	d123      	bne.n	8022e70 <lv_draw_sw_transform+0x570>
 8022e28:	3301      	adds	r3, #1
 8022e2a:	d003      	beq.n	8022e34 <lv_draw_sw_transform+0x534>
 8022e2c:	9b03      	ldr	r3, [sp, #12]
 8022e2e:	2b01      	cmp	r3, #1
 8022e30:	f47f af06 	bne.w	8022c40 <lv_draw_sw_transform+0x340>
                abuf[x] = (a * (0xFF - ys_fract)) >> 8;
 8022e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e36:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8022e3a:	437a      	muls	r2, r7
 8022e3c:	1212      	asrs	r2, r2, #8
 8022e3e:	7022      	strb	r2, [r4, #0]
 8022e40:	e76c      	b.n	8022d1c <lv_draw_sw_transform+0x41c>
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 8022e42:	1bf7      	subs	r7, r6, r7
 8022e44:	bf18      	it	ne
 8022e46:	f04f 37ff 	movne.w	r7, #4294967295
 8022e4a:	b2ff      	uxtb	r7, r7
 8022e4c:	e7e2      	b.n	8022e14 <lv_draw_sw_transform+0x514>
                    a = *(src + src_stride * src_h * sizeof(lv_color_t) + (ys_int * src_stride) + xs_int);
 8022e4e:	e9dd 5203 	ldrd	r5, r2, [sp, #12]
 8022e52:	4355      	muls	r5, r2
 8022e54:	eb0b 0545 	add.w	r5, fp, r5, lsl #1
 8022e58:	4405      	add	r5, r0
 8022e5a:	f815 700a 	ldrb.w	r7, [r5, sl]
                    break;
 8022e5e:	e7d9      	b.n	8022e14 <lv_draw_sw_transform+0x514>
            switch(cf) {
 8022e60:	27ff      	movs	r7, #255	; 0xff
 8022e62:	e7d7      	b.n	8022e14 <lv_draw_sw_transform+0x514>
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 8022e64:	9a07      	ldr	r2, [sp, #28]
 8022e66:	1e55      	subs	r5, r2, #1
 8022e68:	42a8      	cmp	r0, r5
 8022e6a:	d1da      	bne.n	8022e22 <lv_draw_sw_transform+0x522>
 8022e6c:	2901      	cmp	r1, #1
 8022e6e:	e7d7      	b.n	8022e20 <lv_draw_sw_transform+0x520>
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 8022e70:	9a03      	ldr	r2, [sp, #12]
 8022e72:	1e51      	subs	r1, r2, #1
 8022e74:	458c      	cmp	ip, r1
 8022e76:	f47f aee3 	bne.w	8022c40 <lv_draw_sw_transform+0x340>
 8022e7a:	e7d8      	b.n	8022e2e <lv_draw_sw_transform+0x52e>

08022e7c <lv_area_get_width>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8022e7c:	8883      	ldrh	r3, [r0, #4]
 8022e7e:	8802      	ldrh	r2, [r0, #0]
 8022e80:	3301      	adds	r3, #1
 8022e82:	1a98      	subs	r0, r3, r2
}
 8022e84:	b200      	sxth	r0, r0
 8022e86:	4770      	bx	lr

08022e88 <lv_area_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8022e88:	88c3      	ldrh	r3, [r0, #6]
 8022e8a:	8842      	ldrh	r2, [r0, #2]
 8022e8c:	3301      	adds	r3, #1
 8022e8e:	1a98      	subs	r0, r3, r2
}
 8022e90:	b200      	sxth	r0, r0
 8022e92:	4770      	bx	lr

08022e94 <place_content>:
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, lv_coord_t max_size, lv_coord_t content_size, lv_coord_t item_cnt,
                          lv_coord_t * start_pos, lv_coord_t * gap)
{
    if(item_cnt <= 1) {
 8022e94:	2b01      	cmp	r3, #1
{
 8022e96:	b570      	push	{r4, r5, r6, lr}
 8022e98:	461e      	mov	r6, r3
 8022e9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    if(item_cnt <= 1) {
 8022e9e:	dc02      	bgt.n	8022ea6 <place_content+0x12>
        switch(place) {
 8022ea0:	1ec3      	subs	r3, r0, #3
 8022ea2:	2b02      	cmp	r3, #2
 8022ea4:	d907      	bls.n	8022eb6 <place_content+0x22>
            default:
                break;
        }
    }

    switch(place) {
 8022ea6:	3801      	subs	r0, #1
 8022ea8:	2804      	cmp	r0, #4
 8022eaa:	d836      	bhi.n	8022f1a <place_content+0x86>
 8022eac:	e8df f000 	tbb	[pc, r0]
 8022eb0:	1c2a030d 	.word	0x1c2a030d
 8022eb4:	14          	.byte	0x14
 8022eb5:	00          	.byte	0x00
        case LV_FLEX_ALIGN_CENTER:
            *gap = 0;
 8022eb6:	2300      	movs	r3, #0
            *start_pos += (max_size - content_size) / 2;
 8022eb8:	1a8a      	subs	r2, r1, r2
            *gap = 0;
 8022eba:	802b      	strh	r3, [r5, #0]
            *start_pos += (max_size - content_size) / 2;
 8022ebc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8022ec0:	8823      	ldrh	r3, [r4, #0]
 8022ec2:	eb03 0362 	add.w	r3, r3, r2, asr #1
        case LV_FLEX_ALIGN_SPACE_BETWEEN:
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
            break;
        case LV_FLEX_ALIGN_SPACE_AROUND:
            *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
            *start_pos += *gap / 2;
 8022ec6:	8023      	strh	r3, [r4, #0]
            break;
 8022ec8:	e005      	b.n	8022ed6 <place_content+0x42>
            *gap = 0;
 8022eca:	2300      	movs	r3, #0
            *start_pos += max_size - content_size;
 8022ecc:	1a8a      	subs	r2, r1, r2
            *gap = 0;
 8022ece:	802b      	strh	r3, [r5, #0]
            *start_pos += max_size - content_size;
 8022ed0:	8823      	ldrh	r3, [r4, #0]
 8022ed2:	441a      	add	r2, r3
 8022ed4:	8022      	strh	r2, [r4, #0]
            *start_pos += *gap;
            break;
        default:
            *gap = 0;
    }
}
 8022ed6:	bd70      	pop	{r4, r5, r6, pc}
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
 8022ed8:	1a8a      	subs	r2, r1, r2
 8022eda:	3e01      	subs	r6, #1
 8022edc:	b212      	sxth	r2, r2
 8022ede:	b236      	sxth	r6, r6
 8022ee0:	fb92 f2f6 	sdiv	r2, r2, r6
 8022ee4:	802a      	strh	r2, [r5, #0]
            break;
 8022ee6:	e7f6      	b.n	8022ed6 <place_content+0x42>
            *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
 8022ee8:	1a8a      	subs	r2, r1, r2
 8022eea:	b213      	sxth	r3, r2
 8022eec:	882a      	ldrh	r2, [r5, #0]
 8022eee:	fb93 f3f6 	sdiv	r3, r3, r6
 8022ef2:	4413      	add	r3, r2
 8022ef4:	b21b      	sxth	r3, r3
 8022ef6:	802b      	strh	r3, [r5, #0]
            *start_pos += *gap / 2;
 8022ef8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8022efc:	8822      	ldrh	r2, [r4, #0]
 8022efe:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8022f02:	e7e0      	b.n	8022ec6 <place_content+0x32>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt + 1);
 8022f04:	1a89      	subs	r1, r1, r2
 8022f06:	3601      	adds	r6, #1
 8022f08:	b209      	sxth	r1, r1
 8022f0a:	b236      	sxth	r6, r6
 8022f0c:	fb91 f1f6 	sdiv	r1, r1, r6
 8022f10:	8029      	strh	r1, [r5, #0]
            *start_pos += *gap;
 8022f12:	8823      	ldrh	r3, [r4, #0]
 8022f14:	4419      	add	r1, r3
 8022f16:	8021      	strh	r1, [r4, #0]
            break;
 8022f18:	e7dd      	b.n	8022ed6 <place_content+0x42>
            *gap = 0;
 8022f1a:	2300      	movs	r3, #0
 8022f1c:	802b      	strh	r3, [r5, #0]
}
 8022f1e:	e7da      	b.n	8022ed6 <place_content+0x42>

08022f20 <get_next_item>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
    if(rev) {
        (*item_id)--;
 8022f20:	6813      	ldr	r3, [r2, #0]
    if(rev) {
 8022f22:	b151      	cbz	r1, 8022f3a <get_next_item+0x1a>
        (*item_id)--;
 8022f24:	3b01      	subs	r3, #1
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 8022f26:	2b00      	cmp	r3, #0
        (*item_id)--;
 8022f28:	6013      	str	r3, [r2, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 8022f2a:	da01      	bge.n	8022f30 <get_next_item+0x10>
        else return NULL;
 8022f2c:	2000      	movs	r0, #0
 8022f2e:	4770      	bx	lr
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 8022f30:	6882      	ldr	r2, [r0, #8]
    }
    else {
        (*item_id)++;
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 8022f32:	6812      	ldr	r2, [r2, #0]
 8022f34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        else return NULL;
    }
}
 8022f38:	4770      	bx	lr
        (*item_id)++;
 8022f3a:	3301      	adds	r3, #1
 8022f3c:	6013      	str	r3, [r2, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 8022f3e:	6882      	ldr	r2, [r0, #8]
 8022f40:	6851      	ldr	r1, [r2, #4]
 8022f42:	428b      	cmp	r3, r1
 8022f44:	dbf5      	blt.n	8022f32 <get_next_item+0x12>
 8022f46:	e7f1      	b.n	8022f2c <get_next_item+0xc>

08022f48 <lv_obj_set_flex_grow>:
{
 8022f48:	b510      	push	{r4, lr}
 8022f4a:	4604      	mov	r4, r0
    lv_obj_set_style_flex_grow(obj, grow, 0);
 8022f4c:	2200      	movs	r2, #0
 8022f4e:	f7e8 fb81 	bl	800b654 <lv_obj_set_style_flex_grow>
    lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8022f52:	4620      	mov	r0, r4
 8022f54:	f7fb f94c 	bl	801e1f0 <lv_obj_get_parent>
}
 8022f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8022f5c:	f7f9 bc1d 	b.w	801c79a <lv_obj_mark_layout_as_dirty>

08022f60 <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 8022f60:	b508      	push	{r3, lr}
#if LV_USE_FLEX
    lv_flex_init();
 8022f62:	f7e8 fb03 	bl	800b56c <lv_flex_init>
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 8022f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lv_grid_init();
 8022f6a:	f7e9 b80b 	b.w	800bf84 <lv_grid_init>

08022f6e <lv_color_mix>:
{
 8022f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022f70:	f3c1 1345 	ubfx	r3, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8022f74:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022f78:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8022f7c:	f000 071f 	and.w	r7, r0, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022f80:	4373      	muls	r3, r6
 8022f82:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8022f86:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022f8a:	fb04 3302 	mla	r3, r4, r2, r3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8022f8e:	f001 041f 	and.w	r4, r1, #31
 8022f92:	4374      	muls	r4, r6
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022f94:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8022f96:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022f9a:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8022f9c:	3480      	adds	r4, #128	; 0x80
    return ret;
 8022f9e:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8022fa2:	436c      	muls	r4, r5
    return ret;
 8022fa4:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 8022fa8:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8022fac:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 8022fb0:	4373      	muls	r3, r6
 8022fb2:	fb00 3302 	mla	r3, r0, r2, r3
 8022fb6:	3380      	adds	r3, #128	; 0x80
 8022fb8:	436b      	muls	r3, r5
 8022fba:	0ddb      	lsrs	r3, r3, #23
}
 8022fbc:	ea44 20c3 	orr.w	r0, r4, r3, lsl #11
 8022fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022fc2 <lv_color_white>:
}
 8022fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8022fc6:	4770      	bx	lr

08022fc8 <lv_style_set_pad_gap>:
{
 8022fc8:	b538      	push	{r3, r4, r5, lr}
 8022fca:	4604      	mov	r4, r0
 8022fcc:	460d      	mov	r5, r1
    lv_style_set_pad_row(style, value);
 8022fce:	f001 ffe6 	bl	8024f9e <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8022fd2:	4629      	mov	r1, r5
 8022fd4:	4620      	mov	r0, r4
}
 8022fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_style_set_pad_column(style, value);
 8022fda:	f001 bfe4 	b.w	8024fa6 <lv_style_set_pad_column>

08022fde <lv_style_set_pad_ver>:
{
 8022fde:	b538      	push	{r3, r4, r5, lr}
 8022fe0:	4604      	mov	r4, r0
 8022fe2:	460d      	mov	r5, r1
    lv_style_set_pad_top(style, value);
 8022fe4:	f001 ffcb 	bl	8024f7e <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8022fe8:	4629      	mov	r1, r5
 8022fea:	4620      	mov	r0, r4
}
 8022fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_style_set_pad_bottom(style, value);
 8022ff0:	f001 bfc9 	b.w	8024f86 <lv_style_set_pad_bottom>

08022ff4 <dark_color_filter_cb>:
{
 8022ff4:	4608      	mov	r0, r1
    return lv_color_darken(c, opa);
 8022ff6:	4611      	mov	r1, r2
 8022ff8:	f001 bb4e 	b.w	8024698 <lv_color_darken>

08022ffc <lv_style_set_size>:
{
 8022ffc:	b538      	push	{r3, r4, r5, lr}
 8022ffe:	4604      	mov	r4, r0
 8023000:	460d      	mov	r5, r1
    lv_style_set_width(style, value);
 8023002:	f001 ffa4 	bl	8024f4e <lv_style_set_width>
    lv_style_set_height(style, value);
 8023006:	4629      	mov	r1, r5
 8023008:	4620      	mov	r0, r4
}
 802300a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_style_set_height(style, value);
 802300e:	f001 bfa6 	b.w	8024f5e <lv_style_set_height>

08023012 <lv_style_set_pad_hor>:
{
 8023012:	b538      	push	{r3, r4, r5, lr}
 8023014:	4604      	mov	r4, r0
 8023016:	460d      	mov	r5, r1
    lv_style_set_pad_left(style, value);
 8023018:	f001 ffb9 	bl	8024f8e <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 802301c:	4629      	mov	r1, r5
 802301e:	4620      	mov	r0, r4
}
 8023020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_style_set_pad_right(style, value);
 8023024:	f001 bfb7 	b.w	8024f96 <lv_style_set_pad_right>

08023028 <lv_style_set_pad_all>:
{
 8023028:	b538      	push	{r3, r4, r5, lr}
 802302a:	4604      	mov	r4, r0
 802302c:	460d      	mov	r5, r1
    lv_style_set_pad_left(style, value);
 802302e:	f001 ffae 	bl	8024f8e <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8023032:	4629      	mov	r1, r5
 8023034:	4620      	mov	r0, r4
 8023036:	f001 ffae 	bl	8024f96 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 802303a:	4629      	mov	r1, r5
 802303c:	4620      	mov	r0, r4
 802303e:	f001 ff9e 	bl	8024f7e <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8023042:	4629      	mov	r1, r5
 8023044:	4620      	mov	r0, r4
}
 8023046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_style_set_pad_bottom(style, value);
 802304a:	f001 bf9c 	b.w	8024f86 <lv_style_set_pad_bottom>

0802304e <lv_disp_dpx.part.0>:
static inline lv_coord_t lv_disp_dpx(const lv_disp_t * disp, lv_coord_t n)
 802304e:	b538      	push	{r3, r4, r5, lr}
 8023050:	460c      	mov	r4, r1
 8023052:	4605      	mov	r5, r0
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 8023054:	f7ef f874 	bl	8012140 <lv_disp_get_dpi>
 8023058:	4360      	muls	r0, r4
 802305a:	28ef      	cmp	r0, #239	; 0xef
 802305c:	dd0a      	ble.n	8023074 <lv_disp_dpx.part.0+0x26>
 802305e:	4628      	mov	r0, r5
 8023060:	f7ef f86e 	bl	8012140 <lv_disp_get_dpi>
 8023064:	2350      	movs	r3, #80	; 0x50
 8023066:	fb04 3000 	mla	r0, r4, r0, r3
 802306a:	23a0      	movs	r3, #160	; 0xa0
 802306c:	fb90 f0f3 	sdiv	r0, r0, r3
 8023070:	b200      	sxth	r0, r0
}
 8023072:	bd38      	pop	{r3, r4, r5, pc}
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 8023074:	2001      	movs	r0, #1
 8023076:	e7fc      	b.n	8023072 <lv_disp_dpx.part.0+0x24>

08023078 <get_month_length>:
 * @return [28..31]
 */
static uint8_t get_month_length(int32_t year, int32_t month)
{
    month--;
    if(month < 0) {
 8023078:	1e4b      	subs	r3, r1, #1
 802307a:	d519      	bpl.n	80230b0 <get_month_length+0x38>
        year--;             /*Already in the previous year (won't be less then -12 to skip a whole year)*/
 802307c:	3801      	subs	r0, #1
        month = 12 + month; /*`month` is negative, the result will be < 12*/
 802307e:	f101 030b 	add.w	r3, r1, #11
        year++;
        month -= 12;
    }

    /*month == 1 is february*/
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8023082:	2b01      	cmp	r3, #1
 8023084:	d11c      	bne.n	80230c0 <get_month_length+0x48>
 * @param year a year
 * @return 0: not leap year; 1: leap year
 */
static uint8_t is_leap_year(uint32_t year)
{
    return (year % 4) || ((year % 100 == 0) && (year % 400)) ? 0 : 1;
 8023086:	0782      	lsls	r2, r0, #30
 8023088:	d118      	bne.n	80230bc <get_month_length+0x44>
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 802308a:	2164      	movs	r1, #100	; 0x64
 802308c:	fbb0 f2f1 	udiv	r2, r0, r1
 8023090:	fb01 0212 	mls	r2, r1, r2, r0
    return (year % 4) || ((year % 100 == 0) && (year % 400)) ? 0 : 1;
 8023094:	b942      	cbnz	r2, 80230a8 <get_month_length+0x30>
 8023096:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802309a:	fbb0 f2f3 	udiv	r2, r0, r3
 802309e:	fb03 0012 	mls	r0, r3, r2, r0
 80230a2:	fab0 f380 	clz	r3, r0
 80230a6:	095b      	lsrs	r3, r3, #5
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 80230a8:	f103 001c 	add.w	r0, r3, #28
 80230ac:	b2c0      	uxtb	r0, r0
}
 80230ae:	4770      	bx	lr
    if(month >= 12) {
 80230b0:	2b0b      	cmp	r3, #11
        year++;
 80230b2:	bfc4      	itt	gt
 80230b4:	3001      	addgt	r0, #1
        month -= 12;
 80230b6:	f1a1 030d 	subgt.w	r3, r1, #13
 80230ba:	e7e2      	b.n	8023082 <get_month_length+0xa>
    return (year % 4) || ((year % 100 == 0) && (year % 400)) ? 0 : 1;
 80230bc:	2300      	movs	r3, #0
 80230be:	e7f3      	b.n	80230a8 <get_month_length+0x30>
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 80230c0:	2207      	movs	r2, #7
 80230c2:	fb93 f2f2 	sdiv	r2, r3, r2
 80230c6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80230ca:	1a9b      	subs	r3, r3, r2
 80230cc:	f003 0001 	and.w	r0, r3, #1
 80230d0:	bf48      	it	mi
 80230d2:	4240      	negmi	r0, r0
 80230d4:	f1c0 001f 	rsb	r0, r0, #31
 80230d8:	e7e8      	b.n	80230ac <get_month_length+0x34>

080230da <draw_part_begin_event_cb>:
{
 80230da:	b570      	push	{r4, r5, r6, lr}
 80230dc:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80230de:	f7f8 f8bc 	bl	801b25a <lv_event_get_target>
 80230e2:	4605      	mov	r5, r0
    lv_obj_draw_part_dsc_t * dsc = lv_event_get_param(e);
 80230e4:	4620      	mov	r0, r4
 80230e6:	f7f8 f8c0 	bl	801b26a <lv_event_get_param>
    if(dsc->part == LV_PART_ITEMS) {
 80230ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
    lv_obj_draw_part_dsc_t * dsc = lv_event_get_param(e);
 80230ec:	4604      	mov	r4, r0
    if(dsc->part == LV_PART_ITEMS) {
 80230ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80230f2:	d134      	bne.n	802315e <draw_part_begin_event_cb+0x84>
        if(dsc->id < 7) {
 80230f4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80230f6:	2906      	cmp	r1, #6
 80230f8:	d832      	bhi.n	8023160 <draw_part_begin_event_cb+0x86>
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 80230fa:	6902      	ldr	r2, [r0, #16]
 80230fc:	2300      	movs	r3, #0
 80230fe:	70d3      	strb	r3, [r2, #3]
            dsc->rect_dsc->border_opa = LV_OPA_TRANSP;
 8023100:	6902      	ldr	r2, [r0, #16]
 8023102:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
        if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_CALENDAR_CTRL_HIGHLIGHT)) {
 8023106:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 802310a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 802310c:	4628      	mov	r0, r5
 802310e:	f003 fa05 	bl	802651c <lv_btnmatrix_has_btn_ctrl>
 8023112:	b180      	cbz	r0, 8023136 <draw_part_begin_event_cb+0x5c>
            dsc->rect_dsc->bg_opa = LV_OPA_40;
 8023114:	2266      	movs	r2, #102	; 0x66
 8023116:	6923      	ldr	r3, [r4, #16]
            dsc->rect_dsc->bg_color = lv_theme_get_color_primary(obj);
 8023118:	4628      	mov	r0, r5
            dsc->rect_dsc->bg_opa = LV_OPA_40;
 802311a:	70da      	strb	r2, [r3, #3]
            dsc->rect_dsc->bg_color = lv_theme_get_color_primary(obj);
 802311c:	6926      	ldr	r6, [r4, #16]
 802311e:	f7fb fb4c 	bl	801e7ba <lv_theme_get_color_primary>
 8023122:	80b0      	strh	r0, [r6, #4]
            if(lv_btnmatrix_get_selected_btn(obj) == dsc->id) {
 8023124:	4628      	mov	r0, r5
 8023126:	f003 f9f7 	bl	8026518 <lv_btnmatrix_get_selected_btn>
 802312a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802312c:	4298      	cmp	r0, r3
                dsc->rect_dsc->bg_opa = LV_OPA_70;
 802312e:	bf02      	ittt	eq
 8023130:	6923      	ldreq	r3, [r4, #16]
 8023132:	22b2      	moveq	r2, #178	; 0xb2
 8023134:	70da      	strbeq	r2, [r3, #3]
        if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_CALENDAR_CTRL_TODAY)) {
 8023136:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802313a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 802313c:	4628      	mov	r0, r5
 802313e:	f003 f9ed 	bl	802651c <lv_btnmatrix_has_btn_ctrl>
 8023142:	b160      	cbz	r0, 802315e <draw_part_begin_event_cb+0x84>
            dsc->rect_dsc->border_opa = LV_OPA_COVER;
 8023144:	6923      	ldr	r3, [r4, #16]
 8023146:	22ff      	movs	r2, #255	; 0xff
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 8023148:	4628      	mov	r0, r5
            dsc->rect_dsc->border_opa = LV_OPA_COVER;
 802314a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 802314e:	6926      	ldr	r6, [r4, #16]
 8023150:	f7fb fb33 	bl	801e7ba <lv_theme_get_color_primary>
 8023154:	83f0      	strh	r0, [r6, #30]
            dsc->rect_dsc->border_width += 1;
 8023156:	6922      	ldr	r2, [r4, #16]
 8023158:	8c13      	ldrh	r3, [r2, #32]
 802315a:	3301      	adds	r3, #1
 802315c:	8413      	strh	r3, [r2, #32]
}
 802315e:	bd70      	pop	{r4, r5, r6, pc}
        else if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_BTNMATRIX_CTRL_DISABLED)) {
 8023160:	2240      	movs	r2, #64	; 0x40
 8023162:	b289      	uxth	r1, r1
 8023164:	4628      	mov	r0, r5
 8023166:	f003 f9d9 	bl	802651c <lv_btnmatrix_has_btn_ctrl>
 802316a:	2800      	cmp	r0, #0
 802316c:	d0cb      	beq.n	8023106 <draw_part_begin_event_cb+0x2c>
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 802316e:	6922      	ldr	r2, [r4, #16]
 8023170:	2300      	movs	r3, #0
            dsc->label_dsc->color = lv_palette_main(LV_PALETTE_GREY);
 8023172:	2012      	movs	r0, #18
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 8023174:	70d3      	strb	r3, [r2, #3]
            dsc->rect_dsc->border_opa = LV_OPA_TRANSP;
 8023176:	6922      	ldr	r2, [r4, #16]
 8023178:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            dsc->label_dsc->color = lv_palette_main(LV_PALETTE_GREY);
 802317c:	6966      	ldr	r6, [r4, #20]
 802317e:	f7ef fa31 	bl	80125e4 <lv_palette_main>
 8023182:	81b0      	strh	r0, [r6, #12]
 8023184:	e7bf      	b.n	8023106 <draw_part_begin_event_cb+0x2c>

08023186 <get_day_of_week.constprop.0>:
 * @param day a day [1..32]
 * @return [0..6] which means [Sun..Sat] or [Mon..Sun] depending on LV_CALENDAR_WEEK_STARTS_MONDAY
 */
static uint8_t get_day_of_week(uint32_t year, uint32_t month, uint32_t day)
{
    uint32_t a = month < 3 ? 1 : 0;
 8023186:	2902      	cmp	r1, #2
    uint32_t b = year - a;

#if LV_CALENDAR_WEEK_STARTS_MONDAY
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400) - 1) % 7;
#else
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400)) % 7;
 8023188:	f44f 72c8 	mov.w	r2, #400	; 0x190
    uint32_t a = month < 3 ? 1 : 0;
 802318c:	bf94      	ite	ls
 802318e:	2301      	movls	r3, #1
 8023190:	2300      	movhi	r3, #0
    uint32_t b = year - a;
 8023192:	eba0 0303 	sub.w	r3, r0, r3
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400)) % 7;
 8023196:	fbb3 f2f2 	udiv	r2, r3, r2
 802319a:	f103 0001 	add.w	r0, r3, #1
 802319e:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 80231a2:	4410      	add	r0, r2
 80231a4:	f04f 0264 	mov.w	r2, #100	; 0x64
 80231a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80231ac:	eba0 0003 	sub.w	r0, r0, r3
 80231b0:	bf94      	ite	ls
 80231b2:	230c      	movls	r3, #12
 80231b4:	2300      	movhi	r3, #0
 80231b6:	4419      	add	r1, r3
 80231b8:	230c      	movs	r3, #12
 80231ba:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 80231be:	393e      	subs	r1, #62	; 0x3e
 80231c0:	fbb1 f1f3 	udiv	r1, r1, r3
 80231c4:	2307      	movs	r3, #7
 80231c6:	4408      	add	r0, r1
 80231c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80231cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80231d0:	1ac0      	subs	r0, r0, r3
#endif

    return day_of_week  ;
}
 80231d2:	b2c0      	uxtb	r0, r0
 80231d4:	4770      	bx	lr

080231d6 <highlight_update>:

static void highlight_update(lv_obj_t * obj)
{
 80231d6:	b570      	push	{r4, r5, r6, lr}
 80231d8:	4604      	mov	r4, r0
    lv_calendar_t * calendar = (lv_calendar_t *)obj;
    uint16_t i;

    /*Clear all kind of selection*/
    lv_btnmatrix_clear_btn_ctrl_all(calendar->btnm, LV_CALENDAR_CTRL_TODAY | LV_CALENDAR_CTRL_HIGHLIGHT);
 80231da:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80231de:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80231e0:	f003 f959 	bl	8026496 <lv_btnmatrix_clear_btn_ctrl_all>

    uint8_t day_first = get_day_of_week(calendar->showed_date.year, calendar->showed_date.month, 1);
 80231e4:	f994 102e 	ldrsb.w	r1, [r4, #46]	; 0x2e
 80231e8:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80231ea:	f7ff ffcc 	bl	8023186 <get_day_of_week.constprop.0>
    if(calendar->highlighted_dates) {
 80231ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    uint8_t day_first = get_day_of_week(calendar->showed_date.year, calendar->showed_date.month, 1);
 80231f0:	4605      	mov	r5, r0
    if(calendar->highlighted_dates) {
 80231f2:	bb83      	cbnz	r3, 8023256 <highlight_update+0x80>
                                          LV_CALENDAR_CTRL_HIGHLIGHT);
            }
        }
    }

    if(calendar->showed_date.year == calendar->today.year && calendar->showed_date.month == calendar->today.month) {
 80231f4:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80231f8:	4053      	eors	r3, r2
 80231fa:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 80231fe:	d12c      	bne.n	802325a <highlight_update+0x84>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, calendar->today.day - 1 + day_first + 7, LV_CALENDAR_CTRL_TODAY);
 8023200:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
 8023204:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8023208:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802320a:	3306      	adds	r3, #6
 802320c:	18e9      	adds	r1, r5, r3
    }
}
 802320e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, calendar->today.day - 1 + day_first + 7, LV_CALENDAR_CTRL_TODAY);
 8023212:	b289      	uxth	r1, r1
 8023214:	f003 b94e 	b.w	80264b4 <lv_btnmatrix_set_btn_ctrl>
            if(calendar->highlighted_dates[i].year == calendar->showed_date.year &&
 8023218:	b2b3      	uxth	r3, r6
 802321a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802321c:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8023220:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
 8023224:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8023226:	4299      	cmp	r1, r3
 8023228:	d10f      	bne.n	802324a <highlight_update+0x74>
 802322a:	f992 1002 	ldrsb.w	r1, [r2, #2]
 802322e:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 8023232:	4299      	cmp	r1, r3
 8023234:	d109      	bne.n	802324a <highlight_update+0x74>
                lv_btnmatrix_set_btn_ctrl(calendar->btnm, calendar->highlighted_dates[i].day - 1 + day_first + 7,
 8023236:	f992 1003 	ldrsb.w	r1, [r2, #3]
 802323a:	1dab      	adds	r3, r5, #6
 802323c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8023240:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8023242:	4419      	add	r1, r3
 8023244:	b289      	uxth	r1, r1
 8023246:	f003 f935 	bl	80264b4 <lv_btnmatrix_set_btn_ctrl>
        for(i = 0; i < calendar->highlighted_dates_num; i++) {
 802324a:	3601      	adds	r6, #1
 802324c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 802324e:	b2b3      	uxth	r3, r6
 8023250:	429a      	cmp	r2, r3
 8023252:	d8e1      	bhi.n	8023218 <highlight_update+0x42>
 8023254:	e7ce      	b.n	80231f4 <highlight_update+0x1e>
 8023256:	2600      	movs	r6, #0
 8023258:	e7f8      	b.n	802324c <highlight_update+0x76>
}
 802325a:	bd70      	pop	{r4, r5, r6, pc}

0802325c <lv_calendar_get_showed_date>:
}
 802325c:	302c      	adds	r0, #44	; 0x2c
 802325e:	4770      	bx	lr

08023260 <value_changed_event_cb>:

    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
}

static void value_changed_event_cb(lv_event_t * e)
{
 8023260:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * header = lv_event_get_target(e);
 8023262:	f7f7 fffa 	bl	801b25a <lv_event_get_target>
 8023266:	4605      	mov	r5, r0
    lv_obj_t * calendar = lv_obj_get_parent(header);
 8023268:	f7fa ffc2 	bl	801e1f0 <lv_obj_get_parent>
    const lv_calendar_date_t * cur_date = lv_calendar_get_showed_date(calendar);
 802326c:	f7ff fff6 	bl	802325c <lv_calendar_get_showed_date>
 8023270:	4604      	mov	r4, r0

    lv_obj_t * year_dd = lv_obj_get_child(header, 0);
 8023272:	2100      	movs	r1, #0
 8023274:	4628      	mov	r0, r5
 8023276:	f7fa ffbe 	bl	801e1f6 <lv_obj_get_child>
    lv_dropdown_set_selected(year_dd, 2023 - cur_date->year);
 802327a:	8821      	ldrh	r1, [r4, #0]
 802327c:	f5c1 61fc 	rsb	r1, r1, #2016	; 0x7e0
 8023280:	3107      	adds	r1, #7
 8023282:	b289      	uxth	r1, r1
 8023284:	f003 fb3d 	bl	8026902 <lv_dropdown_set_selected>

    lv_obj_t * month_dd = lv_obj_get_child(header, 1);
 8023288:	2101      	movs	r1, #1
 802328a:	4628      	mov	r0, r5
 802328c:	f7fa ffb3 	bl	801e1f6 <lv_obj_get_child>
    lv_dropdown_set_selected(month_dd, cur_date->month - 1);
 8023290:	f994 1002 	ldrsb.w	r1, [r4, #2]
 8023294:	3901      	subs	r1, #1
}
 8023296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_dropdown_set_selected(month_dd, cur_date->month - 1);
 802329a:	b289      	uxth	r1, r1
 802329c:	f003 bb31 	b.w	8026902 <lv_dropdown_set_selected>

080232a0 <month_event_cb>:
{
 80232a0:	b538      	push	{r3, r4, r5, lr}
 80232a2:	4605      	mov	r5, r0
    lv_obj_t * dropdown = lv_event_get_target(e);
 80232a4:	f7f7 ffd9 	bl	801b25a <lv_event_get_target>
 80232a8:	4604      	mov	r4, r0
    lv_obj_t * calendar = lv_event_get_user_data(e);
 80232aa:	4628      	mov	r0, r5
 80232ac:	f7f7 ffdf 	bl	801b26e <lv_event_get_user_data>
 80232b0:	4605      	mov	r5, r0
    uint16_t sel = lv_dropdown_get_selected(dropdown);
 80232b2:	4620      	mov	r0, r4
 80232b4:	f003 fb33 	bl	802691e <lv_dropdown_get_selected>
 80232b8:	4604      	mov	r4, r0
    d = lv_calendar_get_showed_date(calendar);
 80232ba:	4628      	mov	r0, r5
 80232bc:	f7ff ffce 	bl	802325c <lv_calendar_get_showed_date>
    newd.month = sel + 1;
 80232c0:	1c62      	adds	r2, r4, #1
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 80232c2:	8801      	ldrh	r1, [r0, #0]
 80232c4:	4628      	mov	r0, r5
 80232c6:	b252      	sxtb	r2, r2
}
 80232c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 80232cc:	f7eb b906 	b.w	800e4dc <lv_calendar_set_showed_date>

080232d0 <year_event_cb>:
{
 80232d0:	b538      	push	{r3, r4, r5, lr}
 80232d2:	4605      	mov	r5, r0
    lv_obj_t * dropdown = lv_event_get_target(e);
 80232d4:	f7f7 ffc1 	bl	801b25a <lv_event_get_target>
 80232d8:	4604      	mov	r4, r0
    lv_obj_t * calendar = lv_event_get_user_data(e);
 80232da:	4628      	mov	r0, r5
 80232dc:	f7f7 ffc7 	bl	801b26e <lv_event_get_user_data>
 80232e0:	4605      	mov	r5, r0
    uint16_t sel = lv_dropdown_get_selected(dropdown);
 80232e2:	4620      	mov	r0, r4
 80232e4:	f003 fb1b 	bl	802691e <lv_dropdown_get_selected>
 80232e8:	4604      	mov	r4, r0
    d = lv_calendar_get_showed_date(calendar);
 80232ea:	4628      	mov	r0, r5
 80232ec:	f7ff ffb6 	bl	802325c <lv_calendar_get_showed_date>
    newd.year = 2023 - sel;
 80232f0:	f5c4 61fc 	rsb	r1, r4, #2016	; 0x7e0
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 80232f4:	f990 2002 	ldrsb.w	r2, [r0, #2]
 80232f8:	4628      	mov	r0, r5
    newd.year = 2023 - sel;
 80232fa:	3107      	adds	r1, #7
}
 80232fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 8023300:	b289      	uxth	r1, r1
 8023302:	f7eb b8eb 	b.w	800e4dc <lv_calendar_set_showed_date>

08023306 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8023306:	2212      	movs	r2, #18
{
 8023308:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802330a:	f7fa fbed 	bl	801dae8 <lv_obj_get_style_prop>
}
 802330e:	b200      	sxth	r0, r0
 8023310:	bd08      	pop	{r3, pc}

08023312 <lv_obj_get_style_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8023312:	2201      	movs	r2, #1
{
 8023314:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8023316:	f7fa fbe7 	bl	801dae8 <lv_obj_get_style_prop>
}
 802331a:	b200      	sxth	r0, r0
 802331c:	bd08      	pop	{r3, pc}

0802331e <lv_obj_get_style_pad_column>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 802331e:	2215      	movs	r2, #21
{
 8023320:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8023322:	f7fa fbe1 	bl	801dae8 <lv_obj_get_style_prop>
}
 8023326:	b200      	sxth	r0, r0
 8023328:	bd08      	pop	{r3, pc}

0802332a <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802332a:	2210      	movs	r2, #16
{
 802332c:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802332e:	f7fa fbdb 	bl	801dae8 <lv_obj_get_style_prop>
}
 8023332:	b200      	sxth	r0, r0
 8023334:	bd08      	pop	{r3, pc}

08023336 <lv_chart_destructor>:
{
 8023336:	b570      	push	{r4, r5, r6, lr}
 8023338:	460c      	mov	r4, r1
        ser = _lv_ll_get_head(&chart->series_ll);
 802333a:	f101 0624 	add.w	r6, r1, #36	; 0x24
    while(chart->series_ll.head) {
 802333e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        ser = _lv_ll_get_head(&chart->series_ll);
 8023340:	4630      	mov	r0, r6
    while(chart->series_ll.head) {
 8023342:	b953      	cbnz	r3, 802335a <lv_chart_destructor+0x24>
        cur = _lv_ll_get_head(&chart->cursor_ll);
 8023344:	f104 0630 	add.w	r6, r4, #48	; 0x30
    _lv_ll_clear(&chart->series_ll);
 8023348:	f001 fbe2 	bl	8024b10 <_lv_ll_clear>
    while(chart->cursor_ll.head) {
 802334c:	6b63      	ldr	r3, [r4, #52]	; 0x34
        cur = _lv_ll_get_head(&chart->cursor_ll);
 802334e:	4630      	mov	r0, r6
    while(chart->cursor_ll.head) {
 8023350:	b9a3      	cbnz	r3, 802337c <lv_chart_destructor+0x46>
}
 8023352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _lv_ll_clear(&chart->cursor_ll);
 8023356:	f001 bbdb 	b.w	8024b10 <_lv_ll_clear>
        ser = _lv_ll_get_head(&chart->series_ll);
 802335a:	f001 fbeb 	bl	8024b34 <_lv_ll_get_head>
        if(!ser->y_ext_buf_assigned) lv_mem_free(ser->y_points);
 802335e:	7b03      	ldrb	r3, [r0, #12]
        ser = _lv_ll_get_head(&chart->series_ll);
 8023360:	4605      	mov	r5, r0
        if(!ser->y_ext_buf_assigned) lv_mem_free(ser->y_points);
 8023362:	075b      	lsls	r3, r3, #29
 8023364:	d402      	bmi.n	802336c <lv_chart_destructor+0x36>
 8023366:	6840      	ldr	r0, [r0, #4]
 8023368:	f7ef f9f4 	bl	8012754 <lv_mem_free>
        _lv_ll_remove(&chart->series_ll, ser);
 802336c:	4630      	mov	r0, r6
 802336e:	4629      	mov	r1, r5
 8023370:	f001 fba5 	bl	8024abe <_lv_ll_remove>
        lv_mem_free(ser);
 8023374:	4628      	mov	r0, r5
 8023376:	f7ef f9ed 	bl	8012754 <lv_mem_free>
 802337a:	e7e0      	b.n	802333e <lv_chart_destructor+0x8>
        cur = _lv_ll_get_head(&chart->cursor_ll);
 802337c:	f001 fbda 	bl	8024b34 <_lv_ll_get_head>
 8023380:	4605      	mov	r5, r0
        _lv_ll_remove(&chart->cursor_ll, cur);
 8023382:	4601      	mov	r1, r0
 8023384:	4630      	mov	r0, r6
 8023386:	f001 fb9a 	bl	8024abe <_lv_ll_remove>
        lv_mem_free(cur);
 802338a:	4628      	mov	r0, r5
 802338c:	f7ef f9e2 	bl	8012754 <lv_mem_free>
 8023390:	e7dc      	b.n	802334c <lv_chart_destructor+0x16>

08023392 <lv_obj_get_style_border_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8023392:	2232      	movs	r2, #50	; 0x32
 8023394:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
 8023396:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8023398:	f7fa fba6 	bl	801dae8 <lv_obj_get_style_prop>
}
 802339c:	b200      	sxth	r0, r0
 802339e:	bd08      	pop	{r3, pc}

080233a0 <invalidate_point>:

    return 0;
}

static void invalidate_point(lv_obj_t * obj, uint16_t i)
{
 80233a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    lv_chart_t * chart  = (lv_chart_t *)obj;
    if(i >= chart->point_cnt) return;
 80233a4:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
{
 80233a8:	4604      	mov	r4, r0
 80233aa:	460d      	mov	r5, r1
    if(i >= chart->point_cnt) return;
 80233ac:	428b      	cmp	r3, r1
 80233ae:	d97c      	bls.n	80234aa <invalidate_point+0x10a>

    lv_coord_t w  = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80233b0:	f7f9 fa80 	bl	801c8b4 <lv_obj_get_content_width>
 80233b4:	f8b4 6084 	ldrh.w	r6, [r4, #132]	; 0x84
 80233b8:	4346      	muls	r6, r0
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 80233ba:	4620      	mov	r0, r4
 80233bc:	f7e2 fc52 	bl	8005c64 <lv_obj_get_scroll_left>

    /*In shift mode the whole chart changes so the whole object*/
    if(chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
 80233c0:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    lv_coord_t w  = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80233c4:	f346 260f 	sbfx	r6, r6, #8, #16
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 80233c8:	4680      	mov	r8, r0
    if(chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
 80233ca:	071a      	lsls	r2, r3, #28
 80233cc:	d405      	bmi.n	80233da <invalidate_point+0x3a>
        lv_obj_invalidate(obj);
 80233ce:	4620      	mov	r0, r4
        lv_obj_invalidate_area(obj, &col_a);
    }
    else {
        lv_obj_invalidate(obj);
    }
}
 80233d0:	b002      	add	sp, #8
 80233d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        lv_obj_invalidate(obj);
 80233d6:	f7f9 bc61 	b.w	801cc9c <lv_obj_invalidate>
    if(chart->type == LV_CHART_TYPE_LINE) {
 80233da:	f003 0307 	and.w	r3, r3, #7
 80233de:	2b01      	cmp	r3, #1
 80233e0:	d166      	bne.n	80234b0 <invalidate_point+0x110>
        lv_coord_t bwidth = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80233e2:	4620      	mov	r0, r4
 80233e4:	f7ff ffd5 	bl	8023392 <lv_obj_get_style_border_width.constprop.0>
        lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80233e8:	2100      	movs	r1, #0
        lv_coord_t bwidth = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80233ea:	4681      	mov	r9, r0
        lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80233ec:	4620      	mov	r0, r4
 80233ee:	f7ff ff8a 	bl	8023306 <lv_obj_get_style_pad_left>
        lv_coord_t x_ofs = obj->coords.x1 + pleft + bwidth - scroll_left;
 80233f2:	8aa7      	ldrh	r7, [r4, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 80233f4:	2249      	movs	r2, #73	; 0x49
 80233f6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80233fa:	eba7 0708 	sub.w	r7, r7, r8
 80233fe:	4407      	add	r7, r0
 8023400:	4620      	mov	r0, r4
 8023402:	f7fa fb71 	bl	801dae8 <lv_obj_get_style_prop>
        lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR);
 8023406:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 802340a:	4682      	mov	sl, r0
 802340c:	4620      	mov	r0, r4
 802340e:	f7ff ff80 	bl	8023312 <lv_obj_get_style_width>
        lv_coord_t x_ofs = obj->coords.x1 + pleft + bwidth - scroll_left;
 8023412:	444f      	add	r7, r9
        coords.y1 -= line_width + point_w;
 8023414:	fa1f f880 	uxth.w	r8, r0
        if(i < chart->point_cnt - 1) {
 8023418:	f8b4 1082 	ldrh.w	r1, [r4, #130]	; 0x82
        coords.y1 -= line_width + point_w;
 802341c:	fa1f f98a 	uxth.w	r9, sl
    dest->y1 = src->y1;
 8023420:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023424:	fa18 fa8a 	uxtah	sl, r8, sl
    dest->y2 = src->y2;
 8023428:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
        if(i < chart->point_cnt - 1) {
 802342c:	3901      	subs	r1, #1
        lv_coord_t x_ofs = obj->coords.x1 + pleft + bwidth - scroll_left;
 802342e:	b2bf      	uxth	r7, r7
        coords.y1 -= line_width + point_w;
 8023430:	fa1f fa8a 	uxth.w	sl, sl
        if(i < chart->point_cnt - 1) {
 8023434:	428d      	cmp	r5, r1
        coords.y1 -= line_width + point_w;
 8023436:	eba3 030a 	sub.w	r3, r3, sl
        coords.y2 += line_width + point_w;
 802343a:	4492      	add	sl, r2
        coords.y1 -= line_width + point_w;
 802343c:	f8ad 3002 	strh.w	r3, [sp, #2]
        coords.y2 += line_width + point_w;
 8023440:	f8ad a006 	strh.w	sl, [sp, #6]
        if(i < chart->point_cnt - 1) {
 8023444:	da16      	bge.n	8023474 <invalidate_point+0xd4>
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8023446:	fb06 f305 	mul.w	r3, r6, r5
            lv_obj_invalidate_area(obj, &coords);
 802344a:	4620      	mov	r0, r4
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 802344c:	fb93 f2f1 	sdiv	r2, r3, r1
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8023450:	4433      	add	r3, r6
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8023452:	eba2 0209 	sub.w	r2, r2, r9
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8023456:	fb93 f3f1 	sdiv	r3, r3, r1
 802345a:	444b      	add	r3, r9
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 802345c:	eba2 0208 	sub.w	r2, r2, r8
            lv_obj_invalidate_area(obj, &coords);
 8023460:	4669      	mov	r1, sp
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8023462:	4443      	add	r3, r8
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8023464:	443a      	add	r2, r7
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8023466:	443b      	add	r3, r7
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8023468:	f8ad 2000 	strh.w	r2, [sp]
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 802346c:	f8ad 3004 	strh.w	r3, [sp, #4]
            lv_obj_invalidate_area(obj, &coords);
 8023470:	f7f9 fbf3 	bl	801cc5a <lv_obj_invalidate_area>
        if(i > 0) {
 8023474:	b1cd      	cbz	r5, 80234aa <invalidate_point+0x10a>
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8023476:	3d01      	subs	r5, #1
 8023478:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 802347c:	4375      	muls	r5, r6
 802347e:	3a01      	subs	r2, #1
 8023480:	fb95 f3f2 	sdiv	r3, r5, r2
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8023484:	4435      	add	r5, r6
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8023486:	eba3 0309 	sub.w	r3, r3, r9
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 802348a:	fb95 f5f2 	sdiv	r5, r5, r2
 802348e:	44a9      	add	r9, r5
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8023490:	eba3 0308 	sub.w	r3, r3, r8
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8023494:	44c8      	add	r8, r9
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8023496:	443b      	add	r3, r7
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8023498:	4447      	add	r7, r8
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 802349a:	f8ad 3000 	strh.w	r3, [sp]
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 802349e:	f8ad 7004 	strh.w	r7, [sp, #4]
        lv_obj_invalidate_area(obj, &col_a);
 80234a2:	4669      	mov	r1, sp
 80234a4:	4620      	mov	r0, r4
 80234a6:	f7f9 fbd8 	bl	801cc5a <lv_obj_invalidate_area>
}
 80234aa:	b002      	add	sp, #8
 80234ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(chart->type == LV_CHART_TYPE_BAR) {
 80234b0:	2b02      	cmp	r3, #2
 80234b2:	d18c      	bne.n	80233ce <invalidate_point+0x2e>
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 80234b4:	2100      	movs	r1, #0
 80234b6:	4620      	mov	r0, r4
 80234b8:	f7ff ff31 	bl	802331e <lv_obj_get_style_pad_column>
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 80234bc:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 80234c0:	4358      	muls	r0, r3
        lv_coord_t block_w = (w + block_gap) / chart->point_cnt;
 80234c2:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 80234c6:	eb06 2620 	add.w	r6, r6, r0, asr #8
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 80234ca:	1207      	asrs	r7, r0, #8
        lv_coord_t bwidth = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80234cc:	4620      	mov	r0, r4
        lv_coord_t block_w = (w + block_gap) / chart->point_cnt;
 80234ce:	fb96 f6f3 	sdiv	r6, r6, r3
        lv_coord_t bwidth = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80234d2:	f7ff ff5e 	bl	8023392 <lv_obj_get_style_border_width.constprop.0>
        x_act += obj->coords.x1 + bwidth + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80234d6:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80234da:	2100      	movs	r1, #0
        x_act = (int32_t)((int32_t)(block_w) * i) ;
 80234dc:	fa1f f986 	uxth.w	r9, r6
 80234e0:	fb15 f506 	smulbb	r5, r5, r6
        x_act += obj->coords.x1 + bwidth + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80234e4:	4482      	add	sl, r0
 80234e6:	4620      	mov	r0, r4
 80234e8:	f7ff ff0d 	bl	8023306 <lv_obj_get_style_pad_left>
 80234ec:	4606      	mov	r6, r0
        lv_obj_get_coords(obj, &col_a);
 80234ee:	4669      	mov	r1, sp
 80234f0:	4620      	mov	r0, r4
 80234f2:	f7f9 f983 	bl	801c7fc <lv_obj_get_coords>
        x_act += obj->coords.x1 + bwidth + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80234f6:	eb06 000a 	add.w	r0, r6, sl
        x_act = (int32_t)((int32_t)(block_w) * i) ;
 80234fa:	b2ad      	uxth	r5, r5
        col_a.x1 = x_act - scroll_left;
 80234fc:	eba0 0008 	sub.w	r0, r0, r8
 8023500:	4405      	add	r5, r0
        col_a.x2 = col_a.x1 + block_w;
 8023502:	fa19 f985 	uxtah	r9, r9, r5
        col_a.x1 -= block_gap;
 8023506:	1bed      	subs	r5, r5, r7
        col_a.x2 = col_a.x1 + block_w;
 8023508:	f8ad 9004 	strh.w	r9, [sp, #4]
        col_a.x1 -= block_gap;
 802350c:	f8ad 5000 	strh.w	r5, [sp]
 8023510:	e7c7      	b.n	80234a2 <invalidate_point+0x102>

08023512 <lv_chart_get_point_pos_by_id>:
{
 8023512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023516:	460f      	mov	r7, r1
 8023518:	b087      	sub	sp, #28
 802351a:	4690      	mov	r8, r2
 802351c:	461d      	mov	r5, r3
    LV_ASSERT_NULL(obj);
 802351e:	4604      	mov	r4, r0
 8023520:	b900      	cbnz	r0, 8023524 <lv_chart_get_point_pos_by_id+0x12>
 8023522:	e7fe      	b.n	8023522 <lv_chart_get_point_pos_by_id+0x10>
    LV_ASSERT_NULL(ser);
 8023524:	b901      	cbnz	r1, 8023528 <lv_chart_get_point_pos_by_id+0x16>
 8023526:	e7fe      	b.n	8023526 <lv_chart_get_point_pos_by_id+0x14>
    if(id >= chart->point_cnt) {
 8023528:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 802352c:	4293      	cmp	r3, r2
 802352e:	d805      	bhi.n	802353c <lv_chart_get_point_pos_by_id+0x2a>
        p_out->x = 0;
 8023530:	2000      	movs	r0, #0
 8023532:	8028      	strh	r0, [r5, #0]
        p_out->y = 0;
 8023534:	8068      	strh	r0, [r5, #2]
}
 8023536:	b007      	add	sp, #28
 8023538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 802353c:	f7f9 f9ba 	bl	801c8b4 <lv_obj_get_content_width>
 8023540:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8023544:	4343      	muls	r3, r0
    lv_coord_t h = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8023546:	4620      	mov	r0, r4
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8023548:	f343 2b0f 	sbfx	fp, r3, #8, #16
    lv_coord_t h = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 802354c:	f7f9 f9c8 	bl	801c8e0 <lv_obj_get_content_height>
 8023550:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
 8023554:	4350      	muls	r0, r2
    if(chart->type == LV_CHART_TYPE_LINE) {
 8023556:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    lv_coord_t h = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 802355a:	1203      	asrs	r3, r0, #8
    if(chart->type == LV_CHART_TYPE_LINE) {
 802355c:	f002 0207 	and.w	r2, r2, #7
    lv_coord_t h = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8023560:	9303      	str	r3, [sp, #12]
    if(chart->type == LV_CHART_TYPE_LINE) {
 8023562:	2a01      	cmp	r2, #1
    lv_coord_t h = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8023564:	f340 230f 	sbfx	r3, r0, #8, #16
 8023568:	9304      	str	r3, [sp, #16]
    if(chart->type == LV_CHART_TYPE_LINE) {
 802356a:	d108      	bne.n	802357e <lv_chart_get_point_pos_by_id+0x6c>
        p_out->x = (w * id) / (chart->point_cnt - 1);
 802356c:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 8023570:	fb08 f30b 	mul.w	r3, r8, fp
 8023574:	3a01      	subs	r2, #1
 8023576:	fb93 f3f2 	sdiv	r3, r3, r2
        p_out->x += (col_w - ser_gap) / 2;
 802357a:	802b      	strh	r3, [r5, #0]
 802357c:	e013      	b.n	80235a6 <lv_chart_get_point_pos_by_id+0x94>
    else if(chart->type == LV_CHART_TYPE_SCATTER) {
 802357e:	2a03      	cmp	r2, #3
 8023580:	d147      	bne.n	8023612 <lv_chart_get_point_pos_by_id+0x100>
        p_out->x = lv_map(ser->x_points[id], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 8023582:	7b39      	ldrb	r1, [r7, #12]
 8023584:	2300      	movs	r3, #0
 8023586:	683a      	ldr	r2, [r7, #0]
 8023588:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 802358c:	f932 0018 	ldrsh.w	r0, [r2, r8, lsl #1]
 8023590:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8023594:	f8cd b000 	str.w	fp, [sp]
 8023598:	f9b1 2078 	ldrsh.w	r2, [r1, #120]	; 0x78
 802359c:	f9b1 1074 	ldrsh.w	r1, [r1, #116]	; 0x74
 80235a0:	f001 fb70 	bl	8024c84 <lv_map>
 80235a4:	8028      	strh	r0, [r5, #0]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80235a6:	4620      	mov	r0, r4
 80235a8:	f7ff fef3 	bl	8023392 <lv_obj_get_style_border_width.constprop.0>
 80235ac:	4606      	mov	r6, r0
    p_out->x += lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80235ae:	2100      	movs	r1, #0
 80235b0:	4620      	mov	r0, r4
 80235b2:	f7ff fea8 	bl	8023306 <lv_obj_get_style_pad_left>
 80235b6:	882b      	ldrh	r3, [r5, #0]
 80235b8:	4430      	add	r0, r6
 80235ba:	4418      	add	r0, r3
 80235bc:	8028      	strh	r0, [r5, #0]
    p_out->x -= lv_obj_get_scroll_left(obj);
 80235be:	4620      	mov	r0, r4
 80235c0:	f7e2 fb50 	bl	8005c64 <lv_obj_get_scroll_left>
 80235c4:	882b      	ldrh	r3, [r5, #0]
 80235c6:	1a1b      	subs	r3, r3, r0
    temp_y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 80235c8:	9804      	ldr	r0, [sp, #16]
    p_out->x -= lv_obj_get_scroll_left(obj);
 80235ca:	802b      	strh	r3, [r5, #0]
    temp_y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 80235cc:	7b3a      	ldrb	r2, [r7, #12]
 80235ce:	687b      	ldr	r3, [r7, #4]
 80235d0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80235d4:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
 80235d8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80235dc:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
    temp_y = temp_y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 80235e0:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
    temp_y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 80235e4:	1a5b      	subs	r3, r3, r1
    temp_y = temp_y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 80235e6:	1a52      	subs	r2, r2, r1
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80235e8:	2100      	movs	r1, #0
    temp_y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 80235ea:	4343      	muls	r3, r0
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80235ec:	4620      	mov	r0, r4
    temp_y = temp_y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 80235ee:	fb93 f3f2 	sdiv	r3, r3, r2
    p_out->y = h - temp_y;
 80235f2:	9a03      	ldr	r2, [sp, #12]
 80235f4:	1ad3      	subs	r3, r2, r3
 80235f6:	806b      	strh	r3, [r5, #2]
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80235f8:	f7ff fe97 	bl	802332a <lv_obj_get_style_pad_top>
 80235fc:	886b      	ldrh	r3, [r5, #2]
 80235fe:	4430      	add	r0, r6
 8023600:	4418      	add	r0, r3
 8023602:	8068      	strh	r0, [r5, #2]
    p_out->y -= lv_obj_get_scroll_top(obj);
 8023604:	4620      	mov	r0, r4
 8023606:	f7f9 fce8 	bl	801cfda <lv_obj_get_scroll_top>
 802360a:	886b      	ldrh	r3, [r5, #2]
 802360c:	1a18      	subs	r0, r3, r0
 802360e:	b200      	sxth	r0, r0
 8023610:	e790      	b.n	8023534 <lv_chart_get_point_pos_by_id+0x22>
    else if(chart->type == LV_CHART_TYPE_BAR) {
 8023612:	2a02      	cmp	r2, #2
 8023614:	d1c7      	bne.n	80235a6 <lv_chart_get_point_pos_by_id+0x94>
        uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8023616:	f104 0324 	add.w	r3, r4, #36	; 0x24
 802361a:	4618      	mov	r0, r3
 802361c:	9305      	str	r3, [sp, #20]
 802361e:	f001 fa96 	bl	8024b4e <_lv_ll_get_len>
        int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 8023622:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
        uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8023626:	4681      	mov	r9, r0
        int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 8023628:	4620      	mov	r0, r4
 802362a:	f7ff fe78 	bl	802331e <lv_obj_get_style_pad_column>
                                                                LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 802362e:	f8b4 a084 	ldrh.w	sl, [r4, #132]	; 0x84
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 8023632:	2100      	movs	r1, #0
                                                                LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8023634:	fb00 fa0a 	mul.w	sl, r0, sl
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 8023638:	4620      	mov	r0, r4
 802363a:	f7ff fe70 	bl	802331e <lv_obj_get_style_pad_column>
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 802363e:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8023642:	f8b4 1082 	ldrh.w	r1, [r4, #130]	; 0x82
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 8023646:	fb0b f308 	mul.w	r3, fp, r8
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 802364a:	fb00 f602 	mul.w	r6, r0, r2
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 802364e:	f104 0024 	add.w	r0, r4, #36	; 0x24
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8023652:	1e4a      	subs	r2, r1, #1
        int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 8023654:	ea4f 2a2a 	mov.w	sl, sl, asr #8
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 8023658:	1236      	asrs	r6, r6, #8
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 802365a:	fb02 b616 	mls	r6, r2, r6, fp
 802365e:	fb96 f6f1 	sdiv	r6, r6, r1
        lv_coord_t col_w = block_w / ser_cnt;
 8023662:	b236      	sxth	r6, r6
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 8023664:	fb93 f3f1 	sdiv	r3, r3, r1
        lv_coord_t col_w = block_w / ser_cnt;
 8023668:	fbb6 f6f9 	udiv	r6, r6, r9
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 802366c:	802b      	strh	r3, [r5, #0]
        lv_coord_t col_w = block_w / ser_cnt;
 802366e:	fa0f f986 	sxth.w	r9, r6
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8023672:	f001 fa62 	bl	8024b3a <_lv_ll_get_tail>
 8023676:	4601      	mov	r1, r0
            p_out->x += col_w;
 8023678:	882b      	ldrh	r3, [r5, #0]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 802367a:	b930      	cbnz	r0, 802368a <lv_chart_get_point_pos_by_id+0x178>
        p_out->x += (col_w - ser_gap) / 2;
 802367c:	eba9 090a 	sub.w	r9, r9, sl
 8023680:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 8023684:	eb03 0369 	add.w	r3, r3, r9, asr #1
 8023688:	e777      	b.n	802357a <lv_chart_get_point_pos_by_id+0x68>
            if(ser_i == ser) break;
 802368a:	428f      	cmp	r7, r1
 802368c:	d0f6      	beq.n	802367c <lv_chart_get_point_pos_by_id+0x16a>
            p_out->x += col_w;
 802368e:	4433      	add	r3, r6
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8023690:	9805      	ldr	r0, [sp, #20]
            p_out->x += col_w;
 8023692:	802b      	strh	r3, [r5, #0]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8023694:	f001 fa58 	bl	8024b48 <_lv_ll_get_prev>
 8023698:	e7ed      	b.n	8023676 <lv_chart_get_point_pos_by_id+0x164>

0802369a <get_tick_gsc>:
}

lv_chart_tick_dsc_t * get_tick_gsc(lv_obj_t * obj, lv_chart_axis_t axis)
{
    lv_chart_t * chart = (lv_chart_t *) obj;
    switch(axis) {
 802369a:	2904      	cmp	r1, #4
 802369c:	d80c      	bhi.n	80236b8 <get_tick_gsc+0x1e>
 802369e:	e8df f001 	tbb	[pc, r1]
 80236a2:	0703      	.short	0x0703
 80236a4:	0b05      	.short	0x0b05
 80236a6:	09          	.byte	0x09
 80236a7:	00          	.byte	0x00
        case LV_CHART_AXIS_PRIMARY_Y:
            return &chart->tick[0];
 80236a8:	303c      	adds	r0, #60	; 0x3c
 80236aa:	4770      	bx	lr
        case LV_CHART_AXIS_PRIMARY_X:
            return &chart->tick[1];
 80236ac:	3048      	adds	r0, #72	; 0x48
 80236ae:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_Y:
            return &chart->tick[2];
 80236b0:	3054      	adds	r0, #84	; 0x54
 80236b2:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_X:
            return &chart->tick[3];
 80236b4:	3060      	adds	r0, #96	; 0x60
 80236b6:	4770      	bx	lr
    switch(axis) {
 80236b8:	2000      	movs	r0, #0
        default:
            return NULL;
    }
}
 80236ba:	4770      	bx	lr

080236bc <fast_hsv2rgb.constprop.0>:
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t * r, uint8_t * g, uint8_t * b)
 80236bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80236be:	e9dd 6505 	ldrd	r6, r5, [sp, #20]
    if(!s) {
 80236c2:	b919      	cbnz	r1, 80236cc <fast_hsv2rgb.constprop.0+0x10>
        *r = *g = *b = v;
 80236c4:	702a      	strb	r2, [r5, #0]
 80236c6:	7032      	strb	r2, [r6, #0]
 80236c8:	701a      	strb	r2, [r3, #0]
}
 80236ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 80236cc:	0587      	lsls	r7, r0, #22
    uint8_t sextant = h >> 8;
 80236ce:	ea4f 2410 	mov.w	r4, r0, lsr #8
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 80236d2:	b2c0      	uxtb	r0, r0
 80236d4:	bf42      	ittt	mi
 80236d6:	461f      	movmi	r7, r3
 80236d8:	462b      	movmi	r3, r5
 80236da:	463d      	movmi	r5, r7
 80236dc:	0767      	lsls	r7, r4, #29
 80236de:	bf42      	ittt	mi
 80236e0:	4637      	movmi	r7, r6
 80236e2:	462e      	movmi	r6, r5
 80236e4:	463d      	movmi	r5, r7
 80236e6:	f014 0f06 	tst.w	r4, #6
 80236ea:	f004 0701 	and.w	r7, r4, #1
 80236ee:	ea6f 0401 	mvn.w	r4, r1
 80236f2:	d115      	bne.n	8023720 <fast_hsv2rgb.constprop.0+0x64>
 80236f4:	b137      	cbz	r7, 8023704 <fast_hsv2rgb.constprop.0+0x48>
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 80236f6:	b2e4      	uxtb	r4, r4
    *g = v;
 80236f8:	7032      	strb	r2, [r6, #0]
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 80236fa:	461e      	mov	r6, r3
    *b = ww >> 8;
 80236fc:	4354      	muls	r4, r2
 80236fe:	0a24      	lsrs	r4, r4, #8
 8023700:	702c      	strb	r4, [r5, #0]
 8023702:	e01b      	b.n	802373c <fast_hsv2rgb.constprop.0+0x80>
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 8023704:	b2e4      	uxtb	r4, r4
    *g = v;
 8023706:	701a      	strb	r2, [r3, #0]
    *b = ww >> 8;
 8023708:	4354      	muls	r4, r2
 802370a:	0a24      	lsrs	r4, r4, #8
 802370c:	702c      	strb	r4, [r5, #0]
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 802370e:	b998      	cbnz	r0, 8023738 <fast_hsv2rgb.constprop.0+0x7c>
 8023710:	0209      	lsls	r1, r1, #8
    bb = ~bb;
 8023712:	ea6f 2111 	mvn.w	r1, r1, lsr #8
    ww = v * bb;
 8023716:	b2c9      	uxtb	r1, r1
    *r = ww >> 8;
 8023718:	434a      	muls	r2, r1
 802371a:	0a12      	lsrs	r2, r2, #8
 802371c:	7032      	strb	r2, [r6, #0]
 802371e:	e7d4      	b.n	80236ca <fast_hsv2rgb.constprop.0+0xe>
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 8023720:	b92f      	cbnz	r7, 802372e <fast_hsv2rgb.constprop.0+0x72>
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 8023722:	b2e4      	uxtb	r4, r4
    *g = v;
 8023724:	7032      	strb	r2, [r6, #0]
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 8023726:	461e      	mov	r6, r3
    *b = ww >> 8;
 8023728:	4354      	muls	r4, r2
 802372a:	0a24      	lsrs	r4, r4, #8
    if(!(sextant & 1)) {
 802372c:	e7ee      	b.n	802370c <fast_hsv2rgb.constprop.0+0x50>
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 802372e:	b2e4      	uxtb	r4, r4
    *g = v;
 8023730:	701a      	strb	r2, [r3, #0]
    *b = ww >> 8;
 8023732:	4354      	muls	r4, r2
 8023734:	0a24      	lsrs	r4, r4, #8
    if(!(sextant & 1)) {
 8023736:	e7e3      	b.n	8023700 <fast_hsv2rgb.constprop.0+0x44>
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 8023738:	4240      	negs	r0, r0
 802373a:	b2c0      	uxtb	r0, r0
        ww = s * h_frac;
 802373c:	4341      	muls	r1, r0
 802373e:	e7e8      	b.n	8023712 <fast_hsv2rgb.constprop.0+0x56>

08023740 <get_knob_area>:
{
 8023740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023744:	460d      	mov	r5, r1
 8023746:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8023748:	2250      	movs	r2, #80	; 0x50
 802374a:	2100      	movs	r1, #0
 802374c:	4628      	mov	r0, r5
 802374e:	f7fa f9cb 	bl	801dae8 <lv_obj_get_style_prop>
    r = lv_obj_get_style_arc_width(obj, LV_PART_MAIN) / 2;
 8023752:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8023756:	2212      	movs	r2, #18
 8023758:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802375c:	fa03 f080 	sxtah	r0, r3, r0
 8023760:	f3c0 044f 	ubfx	r4, r0, #1, #16
 8023764:	4628      	mov	r0, r5
 8023766:	f7fa f9bf 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802376a:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802376c:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802376e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8023772:	4628      	mov	r0, r5
 8023774:	f7fa f9b8 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8023778:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802377a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802377c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8023780:	4628      	mov	r0, r5
 8023782:	f7fa f9b1 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8023786:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8023788:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802378a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802378e:	4628      	mov	r0, r5
 8023790:	f7fa f9aa 	bl	801dae8 <lv_obj_get_style_prop>
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8023794:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8023796:	8aaa      	ldrh	r2, [r5, #20]
    knob_area.x2 = obj->coords.x1 + colorwheel->knob.pos.x + r + top;
 8023798:	4427      	add	r7, r4
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 802379a:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 802379c:	441a      	add	r2, r3
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 802379e:	8aeb      	ldrh	r3, [r5, #22]
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 80237a0:	eb04 0509 	add.w	r5, r4, r9
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 80237a4:	440b      	add	r3, r1
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 80237a6:	b292      	uxth	r2, r2
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 80237a8:	eb04 0108 	add.w	r1, r4, r8
    knob_area.y2 = obj->coords.y1 + colorwheel->knob.pos.y + r + bottom;
 80237ac:	4404      	add	r4, r0
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 80237ae:	b29b      	uxth	r3, r3
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 80237b0:	1b55      	subs	r5, r2, r5
    knob_area.x2 = obj->coords.x1 + colorwheel->knob.pos.x + r + top;
 80237b2:	443a      	add	r2, r7
}
 80237b4:	4630      	mov	r0, r6
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 80237b6:	1a59      	subs	r1, r3, r1
    knob_area.y2 = obj->coords.y1 + colorwheel->knob.pos.y + r + bottom;
 80237b8:	4423      	add	r3, r4
    return knob_area;
 80237ba:	8035      	strh	r5, [r6, #0]
 80237bc:	8071      	strh	r1, [r6, #2]
 80237be:	80b2      	strh	r2, [r6, #4]
 80237c0:	80f3      	strh	r3, [r6, #6]
}
 80237c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080237c6 <refr_knob_pos>:
{
 80237c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80237c8:	4605      	mov	r5, r0
    lv_area_t knob_area = get_knob_area(obj);
 80237ca:	4601      	mov	r1, r0
 80237cc:	4668      	mov	r0, sp
 80237ce:	f7ff ffb7 	bl	8023740 <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 80237d2:	4669      	mov	r1, sp
 80237d4:	4628      	mov	r0, r5
 80237d6:	f7f9 fa40 	bl	801cc5a <lv_obj_invalidate_area>
    lv_coord_t w = lv_obj_get_width(obj);
 80237da:	4628      	mov	r0, r5
 80237dc:	f7f9 f85e 	bl	801c89c <lv_obj_get_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80237e0:	2250      	movs	r2, #80	; 0x50
 80237e2:	4607      	mov	r7, r0
 80237e4:	2100      	movs	r1, #0
 80237e6:	4628      	mov	r0, r5
 80237e8:	f7fa f97e 	bl	801dae8 <lv_obj_get_style_prop>

static uint16_t get_angle(lv_obj_t * obj)
{
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;
    uint16_t angle;
    switch(colorwheel->mode) {
 80237ec:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    return (lv_coord_t)v.num;
 80237f0:	b206      	sxth	r6, r0
 80237f2:	f003 0303 	and.w	r3, r3, #3
    lv_coord_t r = (w - scale_w) / 2;
 80237f6:	1bbe      	subs	r6, r7, r6
    switch(colorwheel->mode) {
 80237f8:	2b01      	cmp	r3, #1
    lv_coord_t r = (w - scale_w) / 2;
 80237fa:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80237fe:	ea4f 0666 	mov.w	r6, r6, asr #1
    switch(colorwheel->mode) {
 8023802:	d021      	beq.n	8023848 <refr_knob_pos+0x82>
 8023804:	2b02      	cmp	r3, #2
 8023806:	d029      	beq.n	802385c <refr_knob_pos+0x96>
        default:
        case LV_COLORWHEEL_MODE_HUE:
            angle = colorwheel->hsv.h;
 8023808:	8cac      	ldrh	r4, [r5, #36]	; 0x24
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 802380a:	b220      	sxth	r0, r4
 802380c:	345a      	adds	r4, #90	; 0x5a
 802380e:	f7ee ff49 	bl	80126a4 <lv_trigo_sin>
 8023812:	4370      	muls	r0, r6
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 8023814:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 8023818:	13c0      	asrs	r0, r0, #15
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 802381a:	f3c7 074f 	ubfx	r7, r7, #1, #16
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 802381e:	8528      	strh	r0, [r5, #40]	; 0x28
 8023820:	b220      	sxth	r0, r4
 8023822:	f7ee ff3f 	bl	80126a4 <lv_trigo_sin>
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 8023826:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    colorwheel->knob.pos.y = (((int32_t)r * lv_trigo_cos(angle)) >> LV_TRIGO_SHIFT);
 8023828:	4370      	muls	r0, r6
    lv_area_t knob_area = get_knob_area(obj);
 802382a:	4629      	mov	r1, r5
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 802382c:	443b      	add	r3, r7
    colorwheel->knob.pos.y = colorwheel->knob.pos.y + w / 2;
 802382e:	eb07 37e0 	add.w	r7, r7, r0, asr #15
    lv_area_t knob_area = get_knob_area(obj);
 8023832:	4668      	mov	r0, sp
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 8023834:	852b      	strh	r3, [r5, #40]	; 0x28
    colorwheel->knob.pos.y = colorwheel->knob.pos.y + w / 2;
 8023836:	856f      	strh	r7, [r5, #42]	; 0x2a
    lv_area_t knob_area = get_knob_area(obj);
 8023838:	f7ff ff82 	bl	8023740 <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 802383c:	4669      	mov	r1, sp
 802383e:	4628      	mov	r0, r5
 8023840:	f7f9 fa0b 	bl	801cc5a <lv_obj_invalidate_area>
}
 8023844:	b003      	add	sp, #12
 8023846:	bdf0      	pop	{r4, r5, r6, r7, pc}
            break;
        case LV_COLORWHEEL_MODE_SATURATION:
            angle = (colorwheel->hsv.s * 360) / 100;
 8023848:	f895 4026 	ldrb.w	r4, [r5, #38]	; 0x26
            break;
        case LV_COLORWHEEL_MODE_VALUE:
            angle = (colorwheel->hsv.v * 360) / 100 ;
 802384c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8023850:	435c      	muls	r4, r3
 8023852:	2364      	movs	r3, #100	; 0x64
 8023854:	fbb4 f4f3 	udiv	r4, r4, r3
 8023858:	b2a4      	uxth	r4, r4
            break;
 802385a:	e7d6      	b.n	802380a <refr_knob_pos+0x44>
            angle = (colorwheel->hsv.v * 360) / 100 ;
 802385c:	f895 4027 	ldrb.w	r4, [r5, #39]	; 0x27
 8023860:	e7f4      	b.n	802384c <refr_knob_pos+0x86>

08023862 <lv_colorwheel_set_hsv>:
{
 8023862:	460b      	mov	r3, r1
 8023864:	b29b      	uxth	r3, r3
    if(hsv.h > 360) hsv.h %= 360;
 8023866:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
{
 802386a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802386c:	4604      	mov	r4, r0
    if(hsv.h > 360) hsv.h %= 360;
 802386e:	bf88      	it	hi
 8023870:	f44f 70b4 	movhi.w	r0, #360	; 0x168
{
 8023874:	460a      	mov	r2, r1
 8023876:	f3c1 4107 	ubfx	r1, r1, #16, #8
    if(hsv.h > 360) hsv.h %= 360;
 802387a:	bf84      	itt	hi
 802387c:	fbb3 f5f0 	udivhi	r5, r3, r0
 8023880:	fb00 3315 	mlshi	r3, r0, r5, r3
 8023884:	ea4f 6212 	mov.w	r2, r2, lsr #24
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 8023888:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    if(hsv.h > 360) hsv.h %= 360;
 802388a:	bf88      	it	hi
 802388c:	b29b      	uxthhi	r3, r3
    if(hsv.s > 100) hsv.s = 100;
 802388e:	2964      	cmp	r1, #100	; 0x64
 8023890:	bf28      	it	cs
 8023892:	2164      	movcs	r1, #100	; 0x64
    if(hsv.v > 100) hsv.v = 100;
 8023894:	2a64      	cmp	r2, #100	; 0x64
 8023896:	bf28      	it	cs
 8023898:	2264      	movcs	r2, #100	; 0x64
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 802389a:	4298      	cmp	r0, r3
 802389c:	d00d      	beq.n	80238ba <lv_colorwheel_set_hsv+0x58>
    refr_knob_pos(obj);
 802389e:	4620      	mov	r0, r4
    colorwheel->hsv = hsv;
 80238a0:	84a3      	strh	r3, [r4, #36]	; 0x24
 80238a2:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
 80238a6:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    refr_knob_pos(obj);
 80238aa:	f7ff ff8c 	bl	80237c6 <refr_knob_pos>
    lv_obj_invalidate(obj);
 80238ae:	4620      	mov	r0, r4
 80238b0:	f7f9 f9f4 	bl	801cc9c <lv_obj_invalidate>
    return true;
 80238b4:	2001      	movs	r0, #1
}
 80238b6:	b003      	add	sp, #12
 80238b8:	bd30      	pop	{r4, r5, pc}
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 80238ba:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80238bc:	f88d 1006 	strb.w	r1, [sp, #6]
 80238c0:	f88d 2007 	strb.w	r2, [sp, #7]
 80238c4:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80238c8:	4285      	cmp	r5, r0
 80238ca:	d1e8      	bne.n	802389e <lv_colorwheel_set_hsv+0x3c>
 80238cc:	2000      	movs	r0, #0
 80238ce:	e7f2      	b.n	80238b6 <lv_colorwheel_set_hsv+0x54>

080238d0 <lv_colorwheel_get_rgb>:
    return lv_color_hsv_to_rgb(colorwheel->hsv.h, colorwheel->hsv.s, colorwheel->hsv.v);
 80238d0:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
 80238d4:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
 80238d8:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 80238da:	f000 bee3 	b.w	80246a4 <lv_color_hsv_to_rgb>

080238de <lv_color_to32>:
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 80238de:	f240 1107 	movw	r1, #263	; 0x107
 80238e2:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 80238e6:	2200      	movs	r2, #0
 80238e8:	434b      	muls	r3, r1
 80238ea:	3307      	adds	r3, #7
 80238ec:	115b      	asrs	r3, r3, #5
{
 80238ee:	b510      	push	{r4, lr}
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 80238f0:	f363 4217 	bfi	r2, r3, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 80238f4:	f240 1403 	movw	r4, #259	; 0x103
 80238f8:	f3c0 1345 	ubfx	r3, r0, #5, #6
 80238fc:	4363      	muls	r3, r4
 80238fe:	3303      	adds	r3, #3
 8023900:	119b      	asrs	r3, r3, #6
 8023902:	f363 220f 	bfi	r2, r3, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8023906:	f000 031f 	and.w	r3, r0, #31
 802390a:	434b      	muls	r3, r1
 802390c:	3307      	adds	r3, #7
 802390e:	115b      	asrs	r3, r3, #5
 8023910:	f363 0207 	bfi	r2, r3, #0, #8
}
 8023914:	f042 407f 	orr.w	r0, r2, #4278190080	; 0xff000000
 8023918:	bd10      	pop	{r4, pc}

0802391a <lv_color_mix>:
{
 802391a:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 802391c:	f3c1 1345 	ubfx	r3, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8023920:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8023924:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8023928:	f000 071f 	and.w	r7, r0, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 802392c:	4373      	muls	r3, r6
 802392e:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8023932:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8023936:	fb04 3302 	mla	r3, r4, r2, r3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 802393a:	f001 041f 	and.w	r4, r1, #31
 802393e:	4374      	muls	r4, r6
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8023940:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8023942:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8023946:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8023948:	3480      	adds	r4, #128	; 0x80
    return ret;
 802394a:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 802394e:	436c      	muls	r4, r5
    return ret;
 8023950:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 8023954:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8023958:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 802395c:	4373      	muls	r3, r6
 802395e:	fb00 3302 	mla	r3, r0, r2, r3
 8023962:	3380      	adds	r3, #128	; 0x80
 8023964:	436b      	muls	r3, r5
 8023966:	0ddb      	lsrs	r3, r3, #23
}
 8023968:	ea44 20c3 	orr.w	r0, r4, r3, lsl #11
 802396c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802396e <lv_color_black>:
}
 802396e:	f04f 0000 	mov.w	r0, #0
 8023972:	4770      	bx	lr

08023974 <lv_led_constructor>:
{
 8023974:	b510      	push	{r4, lr}
    led->color = lv_theme_get_color_primary(obj);
 8023976:	4608      	mov	r0, r1
{
 8023978:	460c      	mov	r4, r1
    led->color = lv_theme_get_color_primary(obj);
 802397a:	f7fa ff1e 	bl	801e7ba <lv_theme_get_color_primary>
    led->bright = LV_LED_BRIGHT_MAX;
 802397e:	23ff      	movs	r3, #255	; 0xff
    led->color = lv_theme_get_color_primary(obj);
 8023980:	84a0      	strh	r0, [r4, #36]	; 0x24
    led->bright = LV_LED_BRIGHT_MAX;
 8023982:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
 8023986:	bd10      	pop	{r4, pc}

08023988 <lv_menu_destructor>:
    LV_TRACE_OBJ_CREATE("begin");

    lv_menu_t * menu = (lv_menu_t *)obj;
    lv_ll_t * history_ll = &(menu->history_ll);

    _lv_ll_clear(history_ll);
 8023988:	f101 0054 	add.w	r0, r1, #84	; 0x54
 802398c:	f001 b8c0 	b.w	8024b10 <_lv_ll_clear>

08023990 <lv_menu_section_constructor>:
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
}

static void lv_menu_section_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8023990:	b510      	push	{r4, lr}
 8023992:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 8023994:	2101      	movs	r1, #1
 8023996:	4620      	mov	r0, r4
 8023998:	f7e7 fe18 	bl	800b5cc <lv_obj_set_flex_flow>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 802399c:	4620      	mov	r0, r4
 802399e:	2102      	movs	r1, #2
}
 80239a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80239a4:	f7f8 b817 	b.w	801b9d6 <lv_obj_clear_flag>

080239a8 <lv_menu_cont_constructor>:
{
 80239a8:	b510      	push	{r4, lr}
 80239aa:	460c      	mov	r4, r1
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 80239ac:	2100      	movs	r1, #0
 80239ae:	4620      	mov	r0, r4
 80239b0:	f7e7 fe0c 	bl	800b5cc <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 80239b4:	2302      	movs	r3, #2
 80239b6:	4620      	mov	r0, r4
 80239b8:	2100      	movs	r1, #0
 80239ba:	461a      	mov	r2, r3
 80239bc:	f7e7 fe2e 	bl	800b61c <lv_obj_set_flex_align>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80239c0:	4620      	mov	r0, r4
 80239c2:	2102      	movs	r1, #2
}
 80239c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80239c8:	f7f8 b805 	b.w	801b9d6 <lv_obj_clear_flag>

080239cc <lv_menu_value_changed_event_cb>:
        }
    }
}

static void lv_menu_value_changed_event_cb(lv_event_t * e)
{
 80239cc:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_event_get_user_data(e);
 80239ce:	f7f7 fc4e 	bl	801b26e <lv_event_get_user_data>
    return menu->main_page;
 80239d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    lv_obj_t * obj = lv_event_get_user_data(e);
 80239d4:	4604      	mov	r4, r0
    lv_menu_t * menu = (lv_menu_t *)obj;

    lv_menu_page_t * main_page = (lv_menu_page_t *)lv_menu_get_cur_main_page(obj);
    if(main_page != NULL && menu->main_header_title != NULL) {
 80239d6:	b14b      	cbz	r3, 80239ec <lv_menu_value_changed_event_cb+0x20>
 80239d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80239da:	b138      	cbz	r0, 80239ec <lv_menu_value_changed_event_cb+0x20>
        if(main_page->title != NULL) {
 80239dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80239de:	b199      	cbz	r1, 8023a08 <lv_menu_value_changed_event_cb+0x3c>
            lv_label_set_text(menu->main_header_title, main_page->title);
 80239e0:	f003 fa80 	bl	8026ee4 <lv_label_set_text>
            lv_obj_clear_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
 80239e4:	2101      	movs	r1, #1
 80239e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80239e8:	f7f7 fff5 	bl	801b9d6 <lv_obj_clear_flag>
    return menu->sidebar_page;
 80239ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
            lv_obj_add_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
        }
    }

    lv_menu_page_t * sidebar_page = (lv_menu_page_t *)lv_menu_get_cur_sidebar_page(obj);
    if(sidebar_page != NULL && menu->sidebar_header_title != NULL) {
 80239ee:	b1a3      	cbz	r3, 8023a1a <lv_menu_value_changed_event_cb+0x4e>
 80239f0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80239f2:	b190      	cbz	r0, 8023a1a <lv_menu_value_changed_event_cb+0x4e>
        if(sidebar_page->title != NULL) {
 80239f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80239f6:	b159      	cbz	r1, 8023a10 <lv_menu_value_changed_event_cb+0x44>
            lv_label_set_text(menu->sidebar_header_title, sidebar_page->title);
 80239f8:	f003 fa74 	bl	8026ee4 <lv_label_set_text>
            lv_obj_clear_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 80239fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80239fe:	2101      	movs	r1, #1
        }
        else {
            lv_obj_add_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
        }
    }
}
 8023a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            lv_obj_clear_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 8023a04:	f7f7 bfe7 	b.w	801b9d6 <lv_obj_clear_flag>
            lv_obj_add_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
 8023a08:	2101      	movs	r1, #1
 8023a0a:	f7f7 ffae 	bl	801b96a <lv_obj_add_flag>
 8023a0e:	e7ed      	b.n	80239ec <lv_menu_value_changed_event_cb+0x20>
            lv_obj_add_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 8023a10:	2101      	movs	r1, #1
}
 8023a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            lv_obj_add_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 8023a16:	f7f7 bfa8 	b.w	801b96a <lv_obj_add_flag>
}
 8023a1a:	bd10      	pop	{r4, pc}

08023a1c <lv_menu_page_destructor>:
    if(page->title != NULL) {
 8023a1c:	6a48      	ldr	r0, [r1, #36]	; 0x24
{
 8023a1e:	b510      	push	{r4, lr}
 8023a20:	460c      	mov	r4, r1
    if(page->title != NULL) {
 8023a22:	b118      	cbz	r0, 8023a2c <lv_menu_page_destructor+0x10>
        lv_mem_free(page->title);
 8023a24:	f7ee fe96 	bl	8012754 <lv_mem_free>
        page->title = NULL;
 8023a28:	2300      	movs	r3, #0
 8023a2a:	6263      	str	r3, [r4, #36]	; 0x24
}
 8023a2c:	bd10      	pop	{r4, pc}

08023a2e <lv_menu_page_constructor>:
{
 8023a2e:	b510      	push	{r4, lr}
 8023a30:	460c      	mov	r4, r1
    lv_menu_t * menu = (lv_menu_t *)lv_obj_get_parent(obj);
 8023a32:	4608      	mov	r0, r1
 8023a34:	f7fa fbdc 	bl	801e1f0 <lv_obj_get_parent>
    lv_obj_set_parent(obj, ((lv_menu_t *)menu)->storage);
 8023a38:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8023a3a:	4620      	mov	r0, r4
 8023a3c:	f7fa fcbc 	bl	801e3b8 <lv_obj_set_parent>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 8023a40:	4620      	mov	r0, r4
 8023a42:	2101      	movs	r1, #1
 8023a44:	f7e7 fdc2 	bl	800b5cc <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 8023a48:	2302      	movs	r3, #2
 8023a4a:	4620      	mov	r0, r4
 8023a4c:	2100      	movs	r1, #0
 8023a4e:	461a      	mov	r2, r3
 8023a50:	f7e7 fde4 	bl	800b61c <lv_obj_set_flex_align>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_EVENT_BUBBLE);
 8023a54:	4620      	mov	r0, r4
 8023a56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 8023a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_EVENT_BUBBLE);
 8023a5e:	f7f7 bf84 	b.w	801b96a <lv_obj_add_flag>

08023a62 <lv_menu_refr_main_header_mode>:
{
 8023a62:	b510      	push	{r4, lr}
 8023a64:	4604      	mov	r4, r0
    if(menu->main_header == NULL || menu->main_page == NULL) return;
 8023a66:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8023a68:	b378      	cbz	r0, 8023aca <lv_menu_refr_main_header_mode+0x68>
 8023a6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023a6c:	b36b      	cbz	r3, 8023aca <lv_menu_refr_main_header_mode+0x68>
    switch(menu->mode_header) {
 8023a6e:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
 8023a72:	f3c1 0141 	ubfx	r1, r1, #1, #2
 8023a76:	2901      	cmp	r1, #1
 8023a78:	d006      	beq.n	8023a88 <lv_menu_refr_main_header_mode+0x26>
 8023a7a:	2902      	cmp	r1, #2
 8023a7c:	d01e      	beq.n	8023abc <lv_menu_refr_main_header_mode+0x5a>
 8023a7e:	b951      	cbnz	r1, 8023a96 <lv_menu_refr_main_header_mode+0x34>
            lv_obj_move_to_index(menu->main_header, 1);
 8023a80:	f7fa fd0d 	bl	801e49e <lv_obj_move_to_index>
            lv_obj_set_flex_grow(menu->main_page, 1);
 8023a84:	2101      	movs	r1, #1
 8023a86:	e003      	b.n	8023a90 <lv_menu_refr_main_header_mode+0x2e>
            lv_obj_move_to_index(menu->main_header, 0);
 8023a88:	2100      	movs	r1, #0
 8023a8a:	f7fa fd08 	bl	801e49e <lv_obj_move_to_index>
            lv_obj_set_flex_grow(menu->main_page, 0);
 8023a8e:	2100      	movs	r1, #0
            lv_obj_set_flex_grow(menu->main_page, 1);
 8023a90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8023a92:	f7ff fa59 	bl	8022f48 <lv_obj_set_flex_grow>
    lv_obj_refr_size(menu->main_header);
 8023a96:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8023a98:	f7e1 fbac 	bl	80051f4 <lv_obj_refr_size>
    lv_obj_refr_size(menu->main_page);
 8023a9c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8023a9e:	f7e1 fba9 	bl	80051f4 <lv_obj_refr_size>
    lv_obj_update_layout(menu->main_header);
 8023aa2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8023aa4:	f7e1 fe90 	bl	80057c8 <lv_obj_update_layout>
    if(lv_obj_get_content_height(menu->main_header) == 0) {
 8023aa8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8023aaa:	f7f8 ff19 	bl	801c8e0 <lv_obj_get_content_height>
        lv_obj_add_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 8023aae:	2101      	movs	r1, #1
    if(lv_obj_get_content_height(menu->main_header) == 0) {
 8023ab0:	b930      	cbnz	r0, 8023ac0 <lv_menu_refr_main_header_mode+0x5e>
        lv_obj_add_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 8023ab2:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 8023ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_add_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 8023ab8:	f7f7 bf57 	b.w	801b96a <lv_obj_add_flag>
            lv_obj_move_to_index(menu->main_header, 1);
 8023abc:	2101      	movs	r1, #1
 8023abe:	e7df      	b.n	8023a80 <lv_menu_refr_main_header_mode+0x1e>
        lv_obj_clear_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 8023ac0:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 8023ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_clear_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 8023ac6:	f7f7 bf86 	b.w	801b9d6 <lv_obj_clear_flag>
}
 8023aca:	bd10      	pop	{r4, pc}

08023acc <lv_menu_back_btn_is_root>:
    if(obj == ((lv_menu_t *)menu)->sidebar_header_back_btn) {
 8023acc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8023ace:	428b      	cmp	r3, r1
 8023ad0:	d009      	beq.n	8023ae6 <lv_menu_back_btn_is_root+0x1a>
    if(obj == ((lv_menu_t *)menu)->main_header_back_btn && ((lv_menu_t *)menu)->prev_depth <= 1) {
 8023ad2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8023ad4:	428b      	cmp	r3, r1
 8023ad6:	d108      	bne.n	8023aea <lv_menu_back_btn_is_root+0x1e>
 8023ad8:	f890 0061 	ldrb.w	r0, [r0, #97]	; 0x61
 8023adc:	2801      	cmp	r0, #1
 8023ade:	bf8c      	ite	hi
 8023ae0:	2000      	movhi	r0, #0
 8023ae2:	2001      	movls	r0, #1
 8023ae4:	4770      	bx	lr
        return true;
 8023ae6:	2001      	movs	r0, #1
 8023ae8:	4770      	bx	lr
    return false;
 8023aea:	2000      	movs	r0, #0
}
 8023aec:	4770      	bx	lr

08023aee <lv_menu_clear_history>:
{
 8023aee:	b510      	push	{r4, lr}
 8023af0:	4604      	mov	r4, r0
    _lv_ll_clear(history_ll);
 8023af2:	3054      	adds	r0, #84	; 0x54
 8023af4:	f001 f80c 	bl	8024b10 <_lv_ll_clear>
    menu->cur_depth = 0;
 8023af8:	2300      	movs	r3, #0
 8023afa:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
 8023afe:	bd10      	pop	{r4, pc}

08023b00 <lv_menu_set_page>:
{
 8023b00:	b538      	push	{r3, r4, r5, lr}
 8023b02:	4604      	mov	r4, r0
    if(menu->main_page == page) {
 8023b04:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
 8023b06:	460d      	mov	r5, r1
    if(menu->main_page == page) {
 8023b08:	4288      	cmp	r0, r1
 8023b0a:	d063      	beq.n	8023bd4 <lv_menu_set_page+0xd4>
    if(menu->main_page != NULL) {
 8023b0c:	b110      	cbz	r0, 8023b14 <lv_menu_set_page+0x14>
        lv_obj_set_parent(menu->main_page, menu->storage);
 8023b0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8023b10:	f7fa fc52 	bl	801e3b8 <lv_obj_set_parent>
    if(page != NULL) {
 8023b14:	2d00      	cmp	r5, #0
 8023b16:	d03e      	beq.n	8023b96 <lv_menu_set_page+0x96>
        lv_menu_history_t * new_node = _lv_ll_ins_head(history_ll);
 8023b18:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8023b1c:	f000 ff98 	bl	8024a50 <_lv_ll_ins_head>
        LV_ASSERT_MALLOC(new_node);
 8023b20:	b900      	cbnz	r0, 8023b24 <lv_menu_set_page+0x24>
 8023b22:	e7fe      	b.n	8023b22 <lv_menu_set_page+0x22>
        new_node->page = page;
 8023b24:	6005      	str	r5, [r0, #0]
        lv_obj_set_parent(page, menu->main);
 8023b26:	4628      	mov	r0, r5
        menu->cur_depth++;
 8023b28:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
        lv_obj_set_parent(page, menu->main);
 8023b2c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        menu->cur_depth++;
 8023b2e:	3301      	adds	r3, #1
 8023b30:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
        lv_obj_set_parent(page, menu->main);
 8023b34:	f7fa fc40 	bl	801e3b8 <lv_obj_set_parent>
    if(menu->selected_tab != NULL) {
 8023b38:	6d20      	ldr	r0, [r4, #80]	; 0x50
    menu->main_page = page;
 8023b3a:	62e5      	str	r5, [r4, #44]	; 0x2c
    if(menu->selected_tab != NULL) {
 8023b3c:	b120      	cbz	r0, 8023b48 <lv_menu_set_page+0x48>
        if(menu->sidebar_page != NULL) {
 8023b3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
            lv_obj_add_state(menu->selected_tab, LV_STATE_CHECKED);
 8023b40:	2101      	movs	r1, #1
        if(menu->sidebar_page != NULL) {
 8023b42:	b363      	cbz	r3, 8023b9e <lv_menu_set_page+0x9e>
            lv_obj_add_state(menu->selected_tab, LV_STATE_CHECKED);
 8023b44:	f7f7 ff83 	bl	801ba4e <lv_obj_add_state>
    if(menu->sidebar_page != NULL) {
 8023b48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023b4a:	b393      	cbz	r3, 8023bb2 <lv_menu_set_page+0xb2>
        if(menu->sidebar_generated) {
 8023b4c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8023b50:	07d9      	lsls	r1, r3, #31
 8023b52:	d50a      	bpl.n	8023b6a <lv_menu_set_page+0x6a>
            if(menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 8023b54:	071a      	lsls	r2, r3, #28
                lv_obj_clear_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023b56:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8023b58:	f04f 0101 	mov.w	r1, #1
            if(menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 8023b5c:	d522      	bpl.n	8023ba4 <lv_menu_set_page+0xa4>
                lv_obj_clear_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023b5e:	f7f7 ff3a 	bl	801b9d6 <lv_obj_clear_flag>
                lv_obj_add_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 8023b62:	2102      	movs	r1, #2
 8023b64:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8023b66:	f7f7 ff00 	bl	801b96a <lv_obj_add_flag>
        if(menu->cur_depth >= 2) {
 8023b6a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023b6e:	2101      	movs	r1, #1
 8023b70:	6b60      	ldr	r0, [r4, #52]	; 0x34
        if(menu->cur_depth >= 2) {
 8023b72:	2b01      	cmp	r3, #1
 8023b74:	d927      	bls.n	8023bc6 <lv_menu_set_page+0xc6>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023b76:	f7f7 ff2e 	bl	801b9d6 <lv_obj_clear_flag>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 8023b7a:	2102      	movs	r1, #2
 8023b7c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8023b7e:	f7f7 fef4 	bl	801b96a <lv_obj_add_flag>
    lv_event_send((lv_obj_t *)menu, LV_EVENT_VALUE_CHANGED, NULL);
 8023b82:	4620      	mov	r0, r4
 8023b84:	2200      	movs	r2, #0
 8023b86:	211c      	movs	r1, #28
 8023b88:	f7e0 fddc 	bl	8004744 <lv_event_send>
    lv_menu_refr_main_header_mode(obj);
 8023b8c:	4620      	mov	r0, r4
}
 8023b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_menu_refr_main_header_mode(obj);
 8023b92:	f7ff bf66 	b.w	8023a62 <lv_menu_refr_main_header_mode>
        lv_menu_clear_history(obj);
 8023b96:	4620      	mov	r0, r4
 8023b98:	f7ff ffa9 	bl	8023aee <lv_menu_clear_history>
 8023b9c:	e7cc      	b.n	8023b38 <lv_menu_set_page+0x38>
            lv_obj_clear_state(menu->selected_tab, LV_STATE_CHECKED);
 8023b9e:	f7f7 ff60 	bl	801ba62 <lv_obj_clear_state>
 8023ba2:	e7d1      	b.n	8023b48 <lv_menu_set_page+0x48>
                lv_obj_add_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023ba4:	f7f7 fee1 	bl	801b96a <lv_obj_add_flag>
                lv_obj_clear_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 8023ba8:	2102      	movs	r1, #2
 8023baa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8023bac:	f7f7 ff13 	bl	801b9d6 <lv_obj_clear_flag>
 8023bb0:	e7db      	b.n	8023b6a <lv_menu_set_page+0x6a>
        if(menu->cur_depth >= 2 || menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 8023bb2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023bb6:	2101      	movs	r1, #1
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023bb8:	6b60      	ldr	r0, [r4, #52]	; 0x34
        if(menu->cur_depth >= 2 || menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 8023bba:	2b01      	cmp	r3, #1
 8023bbc:	d8db      	bhi.n	8023b76 <lv_menu_set_page+0x76>
 8023bbe:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8023bc2:	071b      	lsls	r3, r3, #28
 8023bc4:	d4d7      	bmi.n	8023b76 <lv_menu_set_page+0x76>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023bc6:	f7f7 fed0 	bl	801b96a <lv_obj_add_flag>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 8023bca:	2102      	movs	r1, #2
 8023bcc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8023bce:	f7f7 ff02 	bl	801b9d6 <lv_obj_clear_flag>
 8023bd2:	e7d6      	b.n	8023b82 <lv_menu_set_page+0x82>
}
 8023bd4:	bd38      	pop	{r3, r4, r5, pc}

08023bd6 <lv_menu_back_event_cb>:
{
 8023bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023bd8:	4604      	mov	r4, r0
    lv_event_code_t code = lv_event_get_code(e);
 8023bda:	f7f7 fb42 	bl	801b262 <lv_event_get_code>
    if(code == LV_EVENT_CLICKED) {
 8023bde:	2807      	cmp	r0, #7
 8023be0:	d140      	bne.n	8023c64 <lv_menu_back_event_cb+0x8e>
        lv_obj_t * obj = lv_event_get_target(e);
 8023be2:	4620      	mov	r0, r4
 8023be4:	f7f7 fb39 	bl	801b25a <lv_event_get_target>
 8023be8:	4605      	mov	r5, r0
        lv_menu_t * menu = (lv_menu_t *)lv_event_get_user_data(e);
 8023bea:	4620      	mov	r0, r4
 8023bec:	f7f7 fb3f 	bl	801b26e <lv_event_get_user_data>
        if(!(obj == menu->main_header_back_btn || obj == menu->sidebar_header_back_btn)) return;
 8023bf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
        lv_menu_t * menu = (lv_menu_t *)lv_event_get_user_data(e);
 8023bf2:	4604      	mov	r4, r0
        if(!(obj == menu->main_header_back_btn || obj == menu->sidebar_header_back_btn)) return;
 8023bf4:	429d      	cmp	r5, r3
 8023bf6:	d002      	beq.n	8023bfe <lv_menu_back_event_cb+0x28>
 8023bf8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8023bfa:	429d      	cmp	r5, r3
 8023bfc:	d132      	bne.n	8023c64 <lv_menu_back_event_cb+0x8e>
        menu->prev_depth = menu->cur_depth; /* Save the previous value for user event handler */
 8023bfe:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
        if(lv_menu_back_btn_is_root((lv_obj_t *)menu, obj)) return;
 8023c02:	4629      	mov	r1, r5
 8023c04:	4620      	mov	r0, r4
        menu->prev_depth = menu->cur_depth; /* Save the previous value for user event handler */
 8023c06:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
        if(lv_menu_back_btn_is_root((lv_obj_t *)menu, obj)) return;
 8023c0a:	f7ff ff5f 	bl	8023acc <lv_menu_back_btn_is_root>
 8023c0e:	bb48      	cbnz	r0, 8023c64 <lv_menu_back_event_cb+0x8e>
        lv_ll_t * history_ll = &(menu->history_ll);
 8023c10:	f104 0754 	add.w	r7, r4, #84	; 0x54
        lv_menu_history_t * act_hist = _lv_ll_get_head(history_ll);
 8023c14:	4638      	mov	r0, r7
 8023c16:	f000 ff8d 	bl	8024b34 <_lv_ll_get_head>
        lv_menu_history_t * prev_hist = _lv_ll_get_next(history_ll, act_hist);
 8023c1a:	4601      	mov	r1, r0
        lv_menu_history_t * act_hist = _lv_ll_get_head(history_ll);
 8023c1c:	4606      	mov	r6, r0
        lv_menu_history_t * prev_hist = _lv_ll_get_next(history_ll, act_hist);
 8023c1e:	4638      	mov	r0, r7
 8023c20:	f000 ff8e 	bl	8024b40 <_lv_ll_get_next>
        if(prev_hist != NULL) {
 8023c24:	4605      	mov	r5, r0
 8023c26:	b1e8      	cbz	r0, 8023c64 <lv_menu_back_event_cb+0x8e>
            _lv_ll_remove(history_ll, act_hist);
 8023c28:	4631      	mov	r1, r6
 8023c2a:	4638      	mov	r0, r7
 8023c2c:	f000 ff47 	bl	8024abe <_lv_ll_remove>
            lv_mem_free(act_hist);
 8023c30:	4630      	mov	r0, r6
 8023c32:	f7ee fd8f 	bl	8012754 <lv_mem_free>
            menu->cur_depth--;
 8023c36:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
            _lv_ll_remove(history_ll, prev_hist);
 8023c3a:	4629      	mov	r1, r5
 8023c3c:	4638      	mov	r0, r7
            menu->cur_depth--;
 8023c3e:	3b01      	subs	r3, #1
 8023c40:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            _lv_ll_remove(history_ll, prev_hist);
 8023c44:	f000 ff3b 	bl	8024abe <_lv_ll_remove>
            menu->cur_depth--;
 8023c48:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
            lv_menu_set_page(&(menu->obj), prev_hist->page);
 8023c4c:	4620      	mov	r0, r4
            menu->cur_depth--;
 8023c4e:	3b01      	subs	r3, #1
 8023c50:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            lv_menu_set_page(&(menu->obj), prev_hist->page);
 8023c54:	6829      	ldr	r1, [r5, #0]
 8023c56:	f7ff ff53 	bl	8023b00 <lv_menu_set_page>
            lv_mem_free(prev_hist);
 8023c5a:	4628      	mov	r0, r5
}
 8023c5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_mem_free(prev_hist);
 8023c60:	f7ee bd78 	b.w	8012754 <lv_mem_free>
}
 8023c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023c66 <lv_meter_destructor>:
{
 8023c66:	b510      	push	{r4, lr}
 8023c68:	460c      	mov	r4, r1
    _lv_ll_clear(&meter->indicator_ll);
 8023c6a:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8023c6e:	f000 ff4f 	bl	8024b10 <_lv_ll_clear>
    _lv_ll_clear(&meter->scale_ll);
 8023c72:	f104 0024 	add.w	r0, r4, #36	; 0x24
}
 8023c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _lv_ll_clear(&meter->scale_ll);
 8023c7a:	f000 bf49 	b.w	8024b10 <_lv_ll_clear>

08023c7e <lv_meter_constructor>:
{
 8023c7e:	b510      	push	{r4, lr}
 8023c80:	460c      	mov	r4, r1
    _lv_ll_init(&meter->scale_ll, sizeof(lv_meter_scale_t));
 8023c82:	2124      	movs	r1, #36	; 0x24
 8023c84:	1860      	adds	r0, r4, r1
 8023c86:	f000 fedb 	bl	8024a40 <_lv_ll_init>
    _lv_ll_init(&meter->indicator_ll, sizeof(lv_meter_indicator_t));
 8023c8a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8023c8e:	211c      	movs	r1, #28
}
 8023c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _lv_ll_init(&meter->indicator_ll, sizeof(lv_meter_indicator_t));
 8023c94:	f000 bed4 	b.w	8024a40 <_lv_ll_init>

08023c98 <lv_spinbox_step_next>:
    int32_t new_step = spinbox->step / 10;
 8023c98:	6f03      	ldr	r3, [r0, #112]	; 0x70
    if((new_step) > 0)
 8023c9a:	2b09      	cmp	r3, #9
    int32_t new_step = spinbox->step / 10;
 8023c9c:	bfca      	itet	gt
 8023c9e:	220a      	movgt	r2, #10
        spinbox->step = 1;
 8023ca0:	2301      	movle	r3, #1
    int32_t new_step = spinbox->step / 10;
 8023ca2:	fb93 f3f2 	sdivgt	r3, r3, r2
 8023ca6:	6703      	str	r3, [r0, #112]	; 0x70
    lv_spinbox_updatevalue(obj);
 8023ca8:	f7ed bd6c 	b.w	8011784 <lv_spinbox_updatevalue>

08023cac <lv_spinbox_step_prev>:
    int32_t new_step = spinbox->step * 10;
 8023cac:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8023cae:	230a      	movs	r3, #10
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 8023cb0:	6e81      	ldr	r1, [r0, #104]	; 0x68
    int32_t new_step = spinbox->step * 10;
 8023cb2:	435a      	muls	r2, r3
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 8023cb4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8023cb6:	2b00      	cmp	r3, #0
 8023cb8:	bfb8      	it	lt
 8023cba:	425b      	neglt	r3, r3
 8023cbc:	428b      	cmp	r3, r1
 8023cbe:	bfb8      	it	lt
 8023cc0:	460b      	movlt	r3, r1
    if(new_step <= step_limit) spinbox->step = new_step;
 8023cc2:	4293      	cmp	r3, r2
 8023cc4:	bfa8      	it	ge
 8023cc6:	6702      	strge	r2, [r0, #112]	; 0x70
    lv_spinbox_updatevalue(obj);
 8023cc8:	f7ed bd5c 	b.w	8011784 <lv_spinbox_updatevalue>

08023ccc <lv_spinbox_increment>:
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 8023ccc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8023cce:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8023cd0:	6e83      	ldr	r3, [r0, #104]	; 0x68
{
 8023cd2:	b410      	push	{r4}
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 8023cd4:	1854      	adds	r4, r2, r1
 8023cd6:	429c      	cmp	r4, r3
 8023cd8:	dc0b      	bgt.n	8023cf2 <lv_spinbox_increment+0x26>
        if((spinbox->value + spinbox->step) > 0 && spinbox->value < 0) spinbox->value = -spinbox->value;
 8023cda:	2c00      	cmp	r4, #0
 8023cdc:	dd03      	ble.n	8023ce6 <lv_spinbox_increment+0x1a>
 8023cde:	2a00      	cmp	r2, #0
 8023ce0:	bfbc      	itt	lt
 8023ce2:	4252      	neglt	r2, r2
 8023ce4:	6642      	strlt	r2, [r0, #100]	; 0x64
        spinbox->value += spinbox->step;
 8023ce6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8023ce8:	440b      	add	r3, r1
}
 8023cea:	bc10      	pop	{r4}
        spinbox->value += spinbox->step;
 8023cec:	6643      	str	r3, [r0, #100]	; 0x64
    lv_spinbox_updatevalue(obj);
 8023cee:	f7ed bd49 	b.w	8011784 <lv_spinbox_updatevalue>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_max))
 8023cf2:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
 8023cf6:	07c9      	lsls	r1, r1, #31
 8023cf8:	d5f7      	bpl.n	8023cea <lv_spinbox_increment+0x1e>
 8023cfa:	429a      	cmp	r2, r3
            spinbox->value = spinbox->range_min;
 8023cfc:	bf08      	it	eq
 8023cfe:	6ec3      	ldreq	r3, [r0, #108]	; 0x6c
 8023d00:	e7f3      	b.n	8023cea <lv_spinbox_increment+0x1e>

08023d02 <lv_spinbox_decrement>:
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 8023d02:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8023d04:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8023d06:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8023d08:	b410      	push	{r4}
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 8023d0a:	1a54      	subs	r4, r2, r1
 8023d0c:	429c      	cmp	r4, r3
 8023d0e:	db0b      	blt.n	8023d28 <lv_spinbox_decrement+0x26>
        if((spinbox->value - spinbox->step) < 0 && spinbox->value > 0) spinbox->value = -spinbox->value;
 8023d10:	2c00      	cmp	r4, #0
 8023d12:	da03      	bge.n	8023d1c <lv_spinbox_decrement+0x1a>
 8023d14:	2a00      	cmp	r2, #0
 8023d16:	bfc4      	itt	gt
 8023d18:	4252      	neggt	r2, r2
 8023d1a:	6642      	strgt	r2, [r0, #100]	; 0x64
        spinbox->value -= spinbox->step;
 8023d1c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8023d1e:	1a5b      	subs	r3, r3, r1
}
 8023d20:	bc10      	pop	{r4}
        spinbox->value -= spinbox->step;
 8023d22:	6643      	str	r3, [r0, #100]	; 0x64
    lv_spinbox_updatevalue(obj);
 8023d24:	f7ed bd2e 	b.w	8011784 <lv_spinbox_updatevalue>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_min))
 8023d28:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
 8023d2c:	07c9      	lsls	r1, r1, #31
 8023d2e:	d5f7      	bpl.n	8023d20 <lv_spinbox_decrement+0x1e>
 8023d30:	429a      	cmp	r2, r3
            spinbox->value = spinbox->range_max;
 8023d32:	bf08      	it	eq
 8023d34:	6e83      	ldreq	r3, [r0, #104]	; 0x68
 8023d36:	e7f3      	b.n	8023d20 <lv_spinbox_decrement+0x1e>

08023d38 <arc_anim_start_angle>:


static void arc_anim_start_angle(void * obj, int32_t v)
{
    lv_arc_set_start_angle(obj, (uint16_t) v);
 8023d38:	b289      	uxth	r1, r1
 8023d3a:	f001 bfe7 	b.w	8025d0c <lv_arc_set_start_angle>

08023d3e <arc_anim_end_angle>:
}


static void arc_anim_end_angle(void * obj, int32_t v)
{
    lv_arc_set_end_angle(obj, (uint16_t) v);
 8023d3e:	b289      	uxth	r1, r1
 8023d40:	f002 b822 	b.w	8025d88 <lv_arc_set_end_angle>

08023d44 <lv_tabview_destructor>:
    if(tabview->tab_pos & LV_DIR_VER) {
 8023d44:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8023d48:	f013 0f0c 	tst.w	r3, #12
{
 8023d4c:	b570      	push	{r4, r5, r6, lr}
 8023d4e:	460c      	mov	r4, r1
    if(tabview->tab_pos & LV_DIR_VER) {
 8023d50:	d116      	bne.n	8023d80 <lv_tabview_destructor+0x3c>
    if(tabview->tab_pos & LV_DIR_HOR) {
 8023d52:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8023d56:	079b      	lsls	r3, r3, #30
 8023d58:	d122      	bne.n	8023da0 <lv_tabview_destructor+0x5c>
    lv_mem_free(tabview->map);
 8023d5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8023d5c:	f7ee fcfa 	bl	8012754 <lv_mem_free>
    tabview->map = NULL;
 8023d60:	2300      	movs	r3, #0
 8023d62:	6263      	str	r3, [r4, #36]	; 0x24
}
 8023d64:	bd70      	pop	{r4, r5, r6, pc}
            lv_mem_free(tabview->map[i]);
 8023d66:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8023d6a:	f7ee fcf3 	bl	8012754 <lv_mem_free>
            tabview->map[i] = NULL;
 8023d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023d70:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
        for(i = 0; i < tabview->tab_cnt; i++) {
 8023d74:	3501      	adds	r5, #1
 8023d76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            lv_mem_free(tabview->map[i]);
 8023d78:	6a62      	ldr	r2, [r4, #36]	; 0x24
        for(i = 0; i < tabview->tab_cnt; i++) {
 8023d7a:	42ab      	cmp	r3, r5
 8023d7c:	d8f3      	bhi.n	8023d66 <lv_tabview_destructor+0x22>
 8023d7e:	e7e8      	b.n	8023d52 <lv_tabview_destructor+0xe>
 8023d80:	2500      	movs	r5, #0
            tabview->map[i] = NULL;
 8023d82:	462e      	mov	r6, r5
 8023d84:	e7f7      	b.n	8023d76 <lv_tabview_destructor+0x32>
            lv_mem_free(tabview->map[i * 2]);
 8023d86:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8023d8a:	f7ee fce3 	bl	8012754 <lv_mem_free>
            tabview->map[i * 2] = NULL;
 8023d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023d90:	f843 6035 	str.w	r6, [r3, r5, lsl #3]
        for(i = 0; i < tabview->tab_cnt; i++) {
 8023d94:	3501      	adds	r5, #1
 8023d96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            lv_mem_free(tabview->map[i * 2]);
 8023d98:	6a62      	ldr	r2, [r4, #36]	; 0x24
        for(i = 0; i < tabview->tab_cnt; i++) {
 8023d9a:	42ab      	cmp	r3, r5
 8023d9c:	d8f3      	bhi.n	8023d86 <lv_tabview_destructor+0x42>
 8023d9e:	e7dc      	b.n	8023d5a <lv_tabview_destructor+0x16>
 8023da0:	2500      	movs	r5, #0
            tabview->map[i * 2] = NULL;
 8023da2:	462e      	mov	r6, r5
 8023da4:	e7f7      	b.n	8023d96 <lv_tabview_destructor+0x52>

08023da6 <lv_tabview_get_content>:
    return lv_obj_get_child(tv, 1);
 8023da6:	2101      	movs	r1, #1
 8023da8:	f7fa ba25 	b.w	801e1f6 <lv_obj_get_child>

08023dac <lv_tabview_get_tab_btns>:
    return lv_obj_get_child(tv, 0);
 8023dac:	2100      	movs	r1, #0
 8023dae:	f7fa ba22 	b.w	801e1f6 <lv_obj_get_child>

08023db2 <lv_tabview_set_act>:
{
 8023db2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(id >= tabview->tab_cnt) {
 8023db6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
{
 8023db8:	4605      	mov	r5, r0
 8023dba:	4689      	mov	r9, r1
 8023dbc:	4617      	mov	r7, r2
    if(id >= tabview->tab_cnt) {
 8023dbe:	428b      	cmp	r3, r1
        id = tabview->tab_cnt - 1;
 8023dc0:	bf98      	it	ls
 8023dc2:	f103 39ff 	addls.w	r9, r3, #4294967295
    lv_obj_update_layout(obj);
 8023dc6:	f7e1 fcff 	bl	80057c8 <lv_obj_update_layout>
    lv_obj_t * cont = lv_tabview_get_content(obj);
 8023dca:	4628      	mov	r0, r5
 8023dcc:	f7ff ffeb 	bl	8023da6 <lv_tabview_get_content>
    if(cont == NULL) return;
 8023dd0:	4606      	mov	r6, r0
 8023dd2:	b370      	cbz	r0, 8023e32 <lv_tabview_set_act+0x80>
    if((tabview->tab_pos & LV_DIR_VER) != 0) {
 8023dd4:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
            lv_obj_scroll_to_x(cont, id * (gap + w), anim_en);
 8023dd8:	fa1f f889 	uxth.w	r8, r9
    if((tabview->tab_pos & LV_DIR_VER) != 0) {
 8023ddc:	f011 010c 	ands.w	r1, r1, #12
 8023de0:	d029      	beq.n	8023e36 <lv_tabview_set_act+0x84>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8023de2:	2215      	movs	r2, #21
 8023de4:	2100      	movs	r1, #0
 8023de6:	f7f9 fe7f 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8023dea:	b204      	sxth	r4, r0
        lv_coord_t w = lv_obj_get_content_width(cont);
 8023dec:	4630      	mov	r0, r6
 8023dee:	f7f8 fd61 	bl	801c8b4 <lv_obj_get_content_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8023df2:	2100      	movs	r1, #0
 8023df4:	4682      	mov	sl, r0
 8023df6:	2216      	movs	r2, #22
 8023df8:	4628      	mov	r0, r5
 8023dfa:	f7f9 fe75 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8023dfe:	eb04 030a 	add.w	r3, r4, sl
 8023e02:	b2c0      	uxtb	r0, r0
            lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 8023e04:	463a      	mov	r2, r7
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8023e06:	2801      	cmp	r0, #1
            lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 8023e08:	4630      	mov	r0, r6
            lv_obj_scroll_to_x(cont, id * (gap + w), anim_en);
 8023e0a:	bf12      	itee	ne
 8023e0c:	fb13 f108 	smulbbne	r1, r3, r8
            int32_t id_rtl = -(int32_t)id;
 8023e10:	f1c9 0900 	rsbeq	r9, r9, #0
            lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 8023e14:	fb13 f109 	smulbbeq	r1, r3, r9
 8023e18:	b209      	sxth	r1, r1
 8023e1a:	f7e2 f897 	bl	8005f4c <lv_obj_scroll_to_x>
    lv_obj_t * btns = lv_tabview_get_tab_btns(obj);
 8023e1e:	4628      	mov	r0, r5
 8023e20:	f7ff ffc4 	bl	8023dac <lv_tabview_get_tab_btns>
    lv_btnmatrix_set_btn_ctrl(btns, id, LV_BTNMATRIX_CTRL_CHECKED);
 8023e24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8023e28:	4641      	mov	r1, r8
 8023e2a:	f002 fb43 	bl	80264b4 <lv_btnmatrix_set_btn_ctrl>
    tabview->tab_cur = id;
 8023e2e:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
}
 8023e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8023e36:	2214      	movs	r2, #20
 8023e38:	f7f9 fe56 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8023e3c:	b204      	sxth	r4, r0
        lv_coord_t h = lv_obj_get_content_height(cont);
 8023e3e:	4630      	mov	r0, r6
 8023e40:	f7f8 fd4e 	bl	801c8e0 <lv_obj_get_content_height>
        lv_obj_scroll_to_y(cont, id * (gap + h), anim_en);
 8023e44:	463a      	mov	r2, r7
 8023e46:	1821      	adds	r1, r4, r0
 8023e48:	4630      	mov	r0, r6
 8023e4a:	fb11 f108 	smulbb	r1, r1, r8
 8023e4e:	b209      	sxth	r1, r1
 8023e50:	f7e2 f892 	bl	8005f78 <lv_obj_scroll_to_y>
 8023e54:	e7e3      	b.n	8023e1e <lv_tabview_set_act+0x6c>

08023e56 <cont_scroll_end_event_cb>:
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
}

static void cont_scroll_end_event_cb(lv_event_t * e)
{
 8023e56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023e58:	4604      	mov	r4, r0
    lv_obj_t * cont = lv_event_get_target(e);
 8023e5a:	f7f7 f9fe 	bl	801b25a <lv_event_get_target>
 8023e5e:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 8023e60:	4620      	mov	r0, r4
 8023e62:	f7f7 f9fe 	bl	801b262 <lv_event_get_code>
 8023e66:	4606      	mov	r6, r0

    lv_obj_t * tv = lv_obj_get_parent(cont);
 8023e68:	4628      	mov	r0, r5
 8023e6a:	f7fa f9c1 	bl	801e1f0 <lv_obj_get_parent>
    lv_tabview_t * tv_obj = (lv_tabview_t *)tv;
    if(code == LV_EVENT_LAYOUT_CHANGED) {
 8023e6e:	2e2b      	cmp	r6, #43	; 0x2b
    lv_obj_t * tv = lv_obj_get_parent(cont);
 8023e70:	4604      	mov	r4, r0
    if(code == LV_EVENT_LAYOUT_CHANGED) {
 8023e72:	d106      	bne.n	8023e82 <cont_scroll_end_event_cb+0x2c>
        lv_tabview_set_act(tv, lv_tabview_get_tab_act(tv), LV_ANIM_OFF);
 8023e74:	2200      	movs	r2, #0
 8023e76:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
        if(t != lv_tabview_get_tab_act(tv)) new_tab = true;
        lv_tabview_set_act(tv, t, LV_ANIM_ON);

        if(new_tab) lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
    }
}
 8023e78:	b002      	add	sp, #8
 8023e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_tabview_set_act(tv, lv_tabview_get_tab_act(tv), LV_ANIM_OFF);
 8023e7e:	f7ff bf98 	b.w	8023db2 <lv_tabview_set_act>
    else if(code == LV_EVENT_SCROLL_END) {
 8023e82:	2e0a      	cmp	r6, #10
 8023e84:	d12d      	bne.n	8023ee2 <cont_scroll_end_event_cb+0x8c>
        lv_indev_t * indev = lv_indev_get_act();
 8023e86:	f7e0 fcc3 	bl	8004810 <lv_indev_get_act>
        if(indev && indev->proc.state == LV_INDEV_STATE_PRESSED) {
 8023e8a:	b110      	cbz	r0, 8023e92 <cont_scroll_end_event_cb+0x3c>
 8023e8c:	7903      	ldrb	r3, [r0, #4]
 8023e8e:	2b01      	cmp	r3, #1
 8023e90:	d027      	beq.n	8023ee2 <cont_scroll_end_event_cb+0x8c>
        lv_obj_get_scroll_end(cont, &p);
 8023e92:	4628      	mov	r0, r5
 8023e94:	a901      	add	r1, sp, #4
 8023e96:	f7e1 ffa9 	bl	8005dec <lv_obj_get_scroll_end>
        if((tv_obj->tab_pos & LV_DIR_VER) != 0) {
 8023e9a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
            lv_coord_t w = lv_obj_get_content_width(cont);
 8023e9e:	4628      	mov	r0, r5
        if((tv_obj->tab_pos & LV_DIR_VER) != 0) {
 8023ea0:	f013 0f0c 	tst.w	r3, #12
 8023ea4:	d024      	beq.n	8023ef0 <cont_scroll_end_event_cb+0x9a>
            lv_coord_t w = lv_obj_get_content_width(cont);
 8023ea6:	f7f8 fd05 	bl	801c8b4 <lv_obj_get_content_width>
 8023eaa:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8023eac:	2100      	movs	r1, #0
 8023eae:	2216      	movs	r2, #22
 8023eb0:	4620      	mov	r0, r4
 8023eb2:	f7f9 fe19 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8023eb6:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8023eba:	b2c0      	uxtb	r0, r0
 8023ebc:	0feb      	lsrs	r3, r5, #31
            if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w / 2) / w;
 8023ebe:	2801      	cmp	r0, #1
 8023ec0:	442b      	add	r3, r5
 8023ec2:	f343 034f 	sbfx	r3, r3, #1, #16
 8023ec6:	d10e      	bne.n	8023ee6 <cont_scroll_end_event_cb+0x90>
 8023ec8:	1a5b      	subs	r3, r3, r1
 8023eca:	fb93 f0f5 	sdiv	r0, r3, r5
 8023ece:	b201      	sxth	r1, r0
        if(t < 0) t = 0;
 8023ed0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        if(t != lv_tabview_get_tab_act(tv)) new_tab = true;
 8023ed4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 8023ed6:	2201      	movs	r2, #1
 8023ed8:	4620      	mov	r0, r4
        if(t != lv_tabview_get_tab_act(tv)) new_tab = true;
 8023eda:	4299      	cmp	r1, r3
 8023edc:	d114      	bne.n	8023f08 <cont_scroll_end_event_cb+0xb2>
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 8023ede:	f7ff ff68 	bl	8023db2 <lv_tabview_set_act>
}
 8023ee2:	b002      	add	sp, #8
 8023ee4:	bd70      	pop	{r4, r5, r6, pc}
            else t = (p.x + w / 2) / w;
 8023ee6:	4419      	add	r1, r3
 8023ee8:	fb91 f1f5 	sdiv	r1, r1, r5
            t = (p.y + h / 2) / h;
 8023eec:	b209      	sxth	r1, r1
 8023eee:	e7ef      	b.n	8023ed0 <cont_scroll_end_event_cb+0x7a>
            lv_coord_t h = lv_obj_get_content_height(cont);
 8023ef0:	f7f8 fcf6 	bl	801c8e0 <lv_obj_get_content_height>
            t = (p.y + h / 2) / h;
 8023ef4:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 8023ef8:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8023efc:	f343 034f 	sbfx	r3, r3, #1, #16
 8023f00:	4419      	add	r1, r3
 8023f02:	fb91 f1f0 	sdiv	r1, r1, r0
 8023f06:	e7f1      	b.n	8023eec <cont_scroll_end_event_cb+0x96>
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 8023f08:	f7ff ff53 	bl	8023db2 <lv_tabview_set_act>
        if(new_tab) lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 8023f0c:	2200      	movs	r2, #0
 8023f0e:	211c      	movs	r1, #28
 8023f10:	4620      	mov	r0, r4
 8023f12:	f7e0 fc17 	bl	8004744 <lv_event_send>
 8023f16:	e7e4      	b.n	8023ee2 <cont_scroll_end_event_cb+0x8c>

08023f18 <btns_value_changed_event_cb>:
{
 8023f18:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * btns = lv_event_get_target(e);
 8023f1a:	f7f7 f99e 	bl	801b25a <lv_event_get_target>
 8023f1e:	4605      	mov	r5, r0
    lv_obj_t * tv = lv_obj_get_parent(btns);
 8023f20:	f7fa f966 	bl	801e1f0 <lv_obj_get_parent>
 8023f24:	4604      	mov	r4, r0
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
 8023f26:	4628      	mov	r0, r5
 8023f28:	f002 faf6 	bl	8026518 <lv_btnmatrix_get_selected_btn>
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 8023f2c:	2201      	movs	r2, #1
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
 8023f2e:	4601      	mov	r1, r0
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 8023f30:	4620      	mov	r0, r4
}
 8023f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 8023f36:	f7ff bf3c 	b.w	8023db2 <lv_tabview_set_act>

08023f3a <tileview_event_cb>:

static void tileview_event_cb(lv_event_t * e)
{
 8023f3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023f3e:	4604      	mov	r4, r0
    lv_event_code_t code = lv_event_get_code(e);
 8023f40:	f7f7 f98f 	bl	801b262 <lv_event_get_code>
 8023f44:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8023f46:	4620      	mov	r0, r4
 8023f48:	f7f7 f987 	bl	801b25a <lv_event_get_target>
    lv_tileview_t * tv = (lv_tileview_t *) obj;

    if(code == LV_EVENT_SCROLL_END) {
 8023f4c:	2d0a      	cmp	r5, #10
    lv_obj_t * obj = lv_event_get_target(e);
 8023f4e:	4604      	mov	r4, r0
    if(code == LV_EVENT_SCROLL_END) {
 8023f50:	d14d      	bne.n	8023fee <tileview_event_cb+0xb4>
        lv_indev_t * indev = lv_indev_get_act();
 8023f52:	f7e0 fc5d 	bl	8004810 <lv_indev_get_act>
        if(indev && indev->proc.state == LV_INDEV_STATE_PRESSED) {
 8023f56:	b110      	cbz	r0, 8023f5e <tileview_event_cb+0x24>
 8023f58:	7903      	ldrb	r3, [r0, #4]
 8023f5a:	2b01      	cmp	r3, #1
 8023f5c:	d047      	beq.n	8023fee <tileview_event_cb+0xb4>
            return;
        }

        lv_coord_t w = lv_obj_get_content_width(obj);
 8023f5e:	4620      	mov	r0, r4
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
        lv_coord_t ty = ((top + (h / 2)) / h) * h;

        lv_dir_t dir = LV_DIR_ALL;
        uint32_t i;
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8023f60:	f04f 0800 	mov.w	r8, #0
        lv_coord_t w = lv_obj_get_content_width(obj);
 8023f64:	f7f8 fca6 	bl	801c8b4 <lv_obj_get_content_width>
 8023f68:	4606      	mov	r6, r0
        lv_coord_t h = lv_obj_get_content_height(obj);
 8023f6a:	4620      	mov	r0, r4
 8023f6c:	f7f8 fcb8 	bl	801c8e0 <lv_obj_get_content_height>
        lv_obj_get_scroll_end(obj, &scroll_end);
 8023f70:	a901      	add	r1, sp, #4
        lv_coord_t h = lv_obj_get_content_height(obj);
 8023f72:	4607      	mov	r7, r0
        lv_obj_get_scroll_end(obj, &scroll_end);
 8023f74:	4620      	mov	r0, r4
 8023f76:	f7e1 ff39 	bl	8005dec <lv_obj_get_scroll_end>
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8023f7a:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8023f7e:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 8023f82:	f343 034f 	sbfx	r3, r3, #1, #16
 8023f86:	441d      	add	r5, r3
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 8023f88:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8023f8c:	fb95 f5f6 	sdiv	r5, r5, r6
 8023f90:	fb15 f506 	smulbb	r5, r5, r6
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 8023f94:	f343 034f 	sbfx	r3, r3, #1, #16
 8023f98:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8023f9c:	b22d      	sxth	r5, r5
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 8023f9e:	441e      	add	r6, r3
 8023fa0:	fb96 f6f7 	sdiv	r6, r6, r7
 8023fa4:	fb16 f607 	smulbb	r6, r6, r7
 8023fa8:	b236      	sxth	r6, r6
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8023faa:	4620      	mov	r0, r4
 8023fac:	f7fa f932 	bl	801e214 <lv_obj_get_child_cnt>
 8023fb0:	4540      	cmp	r0, r8
 8023fb2:	d801      	bhi.n	8023fb8 <tileview_event_cb+0x7e>
        lv_dir_t dir = LV_DIR_ALL;
 8023fb4:	250f      	movs	r5, #15
 8023fb6:	e016      	b.n	8023fe6 <tileview_event_cb+0xac>
            lv_obj_t * tile_obj = lv_obj_get_child(obj, i);
 8023fb8:	4641      	mov	r1, r8
 8023fba:	4620      	mov	r0, r4
 8023fbc:	f7fa f91b 	bl	801e1f6 <lv_obj_get_child>
 8023fc0:	4607      	mov	r7, r0
            lv_coord_t x = lv_obj_get_x(tile_obj);
 8023fc2:	f7f8 fc28 	bl	801c816 <lv_obj_get_x>
 8023fc6:	4681      	mov	r9, r0
            lv_coord_t y = lv_obj_get_y(tile_obj);
 8023fc8:	4638      	mov	r0, r7
 8023fca:	f7f8 fc40 	bl	801c84e <lv_obj_get_y>
            if(x == tx && y == ty) {
 8023fce:	454d      	cmp	r5, r9
 8023fd0:	d110      	bne.n	8023ff4 <tileview_event_cb+0xba>
 8023fd2:	4286      	cmp	r6, r0
 8023fd4:	d10e      	bne.n	8023ff4 <tileview_event_cb+0xba>
                lv_tileview_tile_t * tile = (lv_tileview_tile_t *)tile_obj;
                tv->tile_act = (lv_obj_t *)tile;
 8023fd6:	6267      	str	r7, [r4, #36]	; 0x24
                dir = tile->dir;
                lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8023fd8:	2200      	movs	r2, #0
 8023fda:	211c      	movs	r1, #28
 8023fdc:	4620      	mov	r0, r4
                dir = tile->dir;
 8023fde:	f897 5024 	ldrb.w	r5, [r7, #36]	; 0x24
                lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8023fe2:	f7e0 fbaf 	bl	8004744 <lv_event_send>
                break;
            }
        }
        lv_obj_set_scroll_dir(obj, dir);
 8023fe6:	4629      	mov	r1, r5
 8023fe8:	4620      	mov	r0, r4
 8023fea:	f7f8 ffa9 	bl	801cf40 <lv_obj_set_scroll_dir>
    }
}
 8023fee:	b003      	add	sp, #12
 8023ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8023ff4:	f108 0801 	add.w	r8, r8, #1
 8023ff8:	e7d7      	b.n	8023faa <tileview_event_cb+0x70>

08023ffa <lv_font_get_glyph_bitmap>:
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    LV_ASSERT_NULL(font_p);
 8023ffa:	b900      	cbnz	r0, 8023ffe <lv_font_get_glyph_bitmap+0x4>
 8023ffc:	e7fe      	b.n	8023ffc <lv_font_get_glyph_bitmap+0x2>
    return font_p->get_glyph_bitmap(font_p, letter);
 8023ffe:	6843      	ldr	r3, [r0, #4]
 8024000:	4718      	bx	r3

08024002 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 8024002:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8024006:	460d      	mov	r5, r1
 8024008:	4692      	mov	sl, r2
 802400a:	4699      	mov	r9, r3

    LV_ASSERT_NULL(font_p);
 802400c:	4607      	mov	r7, r0
 802400e:	b900      	cbnz	r0, 8024012 <lv_font_get_glyph_dsc+0x10>
 8024010:	e7fe      	b.n	8024010 <lv_font_get_glyph_dsc+0xe>
    LV_ASSERT_NULL(dsc_out);
 8024012:	b1f9      	cbz	r1, 8024054 <lv_font_get_glyph_dsc+0x52>
    const lv_font_t * placeholder_font = NULL;
#endif

    const lv_font_t * f = font_p;

    dsc_out->resolved_font = NULL;
 8024014:	2400      	movs	r4, #0
 8024016:	4606      	mov	r6, r0
 8024018:	600c      	str	r4, [r1, #0]

    while(f) {
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 802401a:	464b      	mov	r3, r9
 802401c:	4652      	mov	r2, sl
 802401e:	4629      	mov	r1, r5
 8024020:	4630      	mov	r0, r6
 8024022:	f8d6 c000 	ldr.w	ip, [r6]
 8024026:	47e0      	blx	ip
        if(found) {
 8024028:	b128      	cbz	r0, 8024036 <lv_font_get_glyph_dsc+0x34>
            if(!dsc_out->is_placeholder) {
 802402a:	7bab      	ldrb	r3, [r5, #14]
 802402c:	06db      	lsls	r3, r3, #27
 802402e:	d50d      	bpl.n	802404c <lv_font_get_glyph_dsc+0x4a>
                dsc_out->resolved_font = f;
                return true;
            }
#if LV_USE_FONT_PLACEHOLDER
            else if(placeholder_font == NULL) {
 8024030:	2c00      	cmp	r4, #0
 8024032:	bf08      	it	eq
 8024034:	4634      	moveq	r4, r6
                placeholder_font = f;
            }
#endif
        }
        f = f->fallback;
 8024036:	6976      	ldr	r6, [r6, #20]
    while(f) {
 8024038:	2e00      	cmp	r6, #0
 802403a:	d1ee      	bne.n	802401a <lv_font_get_glyph_dsc+0x18>
    }

#if LV_USE_FONT_PLACEHOLDER
    if(placeholder_font != NULL) {
 802403c:	b15c      	cbz	r4, 8024056 <lv_font_get_glyph_dsc+0x54>
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter, letter_next);
 802403e:	6826      	ldr	r6, [r4, #0]
 8024040:	464b      	mov	r3, r9
 8024042:	4652      	mov	r2, sl
 8024044:	4629      	mov	r1, r5
 8024046:	4620      	mov	r0, r4
 8024048:	47b0      	blx	r6
        dsc_out->resolved_font = placeholder_font;
        return true;
 802404a:	4626      	mov	r6, r4
                return true;
 802404c:	2001      	movs	r0, #1
        dsc_out->resolved_font = placeholder_font;
 802404e:	602e      	str	r6, [r5, #0]
    dsc_out->ofs_y = 0;
    dsc_out->bpp   = 1;
    dsc_out->is_placeholder = true;

    return false;
}
 8024050:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}
    LV_ASSERT_NULL(dsc_out);
 8024054:	e7fe      	b.n	8024054 <lv_font_get_glyph_dsc+0x52>
    if(letter < 0x20 ||
 8024056:	f1ba 0f1f 	cmp.w	sl, #31
 802405a:	d91e      	bls.n	802409a <lv_font_get_glyph_dsc+0x98>
 802405c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8024060:	459a      	cmp	sl, r3
 8024062:	d01a      	beq.n	802409a <lv_font_get_glyph_dsc+0x98>
       letter == 0xf8ff || /*LV_SYMBOL_DUMMY*/
 8024064:	f242 030c 	movw	r3, #8204	; 0x200c
 8024068:	459a      	cmp	sl, r3
 802406a:	d016      	beq.n	802409a <lv_font_get_glyph_dsc+0x98>
        dsc_out->box_w = font_p->line_height / 2;
 802406c:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
 8024070:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8024074:	f3c4 044f 	ubfx	r4, r4, #1, #16
        dsc_out->adv_w = dsc_out->box_w + 2;
 8024078:	1ca3      	adds	r3, r4, #2
 802407a:	b29b      	uxth	r3, r3
    dsc_out->resolved_font = NULL;
 802407c:	2000      	movs	r0, #0
        dsc_out->box_w = 0;
 802407e:	80ec      	strh	r4, [r5, #6]
        dsc_out->adv_w = 0;
 8024080:	80ab      	strh	r3, [r5, #4]
    dsc_out->resolved_font = NULL;
 8024082:	6028      	str	r0, [r5, #0]
    dsc_out->box_h = font_p->line_height;
 8024084:	893b      	ldrh	r3, [r7, #8]
    dsc_out->ofs_x = 0;
 8024086:	8168      	strh	r0, [r5, #10]
    dsc_out->box_h = font_p->line_height;
 8024088:	812b      	strh	r3, [r5, #8]
    dsc_out->bpp   = 1;
 802408a:	7bab      	ldrb	r3, [r5, #14]
    dsc_out->ofs_y = 0;
 802408c:	81a8      	strh	r0, [r5, #12]
    dsc_out->bpp   = 1;
 802408e:	f023 031f 	bic.w	r3, r3, #31
 8024092:	f043 0311 	orr.w	r3, r3, #17
 8024096:	73ab      	strb	r3, [r5, #14]
    return false;
 8024098:	e7da      	b.n	8024050 <lv_font_get_glyph_dsc+0x4e>
 802409a:	4623      	mov	r3, r4
 802409c:	e7ee      	b.n	802407c <lv_font_get_glyph_dsc+0x7a>

0802409e <lv_font_get_glyph_width>:
 * @param letter a UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 802409e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80240a0:	4613      	mov	r3, r2
    LV_ASSERT_NULL(font);
 80240a2:	b900      	cbnz	r0, 80240a6 <lv_font_get_glyph_width+0x8>
 80240a4:	e7fe      	b.n	80240a4 <lv_font_get_glyph_width+0x6>
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 80240a6:	460a      	mov	r2, r1
 80240a8:	4669      	mov	r1, sp
 80240aa:	f7ff ffaa 	bl	8024002 <lv_font_get_glyph_dsc>
    return g.adv_w;
}
 80240ae:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80240b2:	b005      	add	sp, #20
 80240b4:	f85d fb04 	ldr.w	pc, [sp], #4

080240b8 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 80240b8:	7803      	ldrb	r3, [r0, #0]
 80240ba:	780a      	ldrb	r2, [r1, #0]
 80240bc:	4293      	cmp	r3, r2
 80240be:	bf11      	iteee	ne
 80240c0:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 80240c2:	784b      	ldrbeq	r3, [r1, #1]
 80240c4:	7840      	ldrbeq	r0, [r0, #1]
 80240c6:	1ac0      	subeq	r0, r0, r3

}
 80240c8:	4770      	bx	lr

080240ca <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 80240ca:	8803      	ldrh	r3, [r0, #0]
 80240cc:	880a      	ldrh	r2, [r1, #0]
 80240ce:	4293      	cmp	r3, r2
 80240d0:	bf11      	iteee	ne
 80240d2:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 80240d4:	884b      	ldrheq	r3, [r1, #2]
 80240d6:	8840      	ldrheq	r0, [r0, #2]
 80240d8:	1ac0      	subeq	r0, r0, r3
}
 80240da:	4770      	bx	lr

080240dc <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 80240dc:	8800      	ldrh	r0, [r0, #0]
 80240de:	880b      	ldrh	r3, [r1, #0]
}
 80240e0:	1ac0      	subs	r0, r0, r3
 80240e2:	4770      	bx	lr

080240e4 <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
 80240e4:	2909      	cmp	r1, #9
{
 80240e6:	b510      	push	{r4, lr}
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 80240e8:	bf08      	it	eq
 80240ea:	2120      	moveq	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 80240ec:	6904      	ldr	r4, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 80240ee:	f7ed fe3b 	bl	8011d68 <get_glyph_dsc_id>
    if(!gid) return NULL;
 80240f2:	b158      	cbz	r0, 802410c <lv_font_get_bitmap_fmt_txt+0x28>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 80240f4:	7ce3      	ldrb	r3, [r4, #19]
 80240f6:	2b3f      	cmp	r3, #63	; 0x3f
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 80240f8:	bf97      	itett	ls
 80240fa:	6863      	ldrls	r3, [r4, #4]
    if(!gid) return NULL;
 80240fc:	2000      	movhi	r0, #0
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 80240fe:	f853 3030 	ldrls.w	r3, [r3, r0, lsl #3]
 8024102:	6820      	ldrls	r0, [r4, #0]
 8024104:	bf9c      	itt	ls
 8024106:	f3c3 0313 	ubfxls	r3, r3, #0, #20
 802410a:	18c0      	addls	r0, r0, r3
}
 802410c:	bd10      	pop	{r4, pc}

0802410e <_lv_font_clean_up_fmt_txt>:
}
 802410e:	4770      	bx	lr

08024110 <lv_disp_draw_buf_init>:
{
 8024110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024112:	4604      	mov	r4, r0
 8024114:	460d      	mov	r5, r1
 8024116:	4617      	mov	r7, r2
 8024118:	461e      	mov	r6, r3
    memset(dst, 0x00, len);
 802411a:	221c      	movs	r2, #28
 802411c:	2100      	movs	r1, #0
 802411e:	f7f6 fb33 	bl	801a788 <memset>
    draw_buf->buf2    = buf2;
 8024122:	e9c4 5700 	strd	r5, r7, [r4]
    draw_buf->size    = size_in_px_cnt;
 8024126:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
 802412a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802412c <lv_disp_flush_ready>:
    disp_drv->draw_buf->flushing = 0;
 802412c:	68c2      	ldr	r2, [r0, #12]
 802412e:	2300      	movs	r3, #0
 8024130:	6113      	str	r3, [r2, #16]
    disp_drv->draw_buf->flushing_last = 0;
 8024132:	68c2      	ldr	r2, [r0, #12]
 8024134:	6153      	str	r3, [r2, #20]
}
 8024136:	4770      	bx	lr

08024138 <lv_disp_flush_is_last>:
    return disp_drv->draw_buf->flushing_last;
 8024138:	68c3      	ldr	r3, [r0, #12]
 802413a:	6958      	ldr	r0, [r3, #20]
}
 802413c:	3800      	subs	r0, #0
 802413e:	bf18      	it	ne
 8024140:	2001      	movne	r0, #1
 8024142:	4770      	bx	lr

08024144 <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
 8024144:	6803      	ldr	r3, [r0, #0]
}
 8024146:	68d8      	ldr	r0, [r3, #12]
 8024148:	4770      	bx	lr

0802414a <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 802414a:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 802414c:	f004 f87a 	bl	8028244 <z_impl_k_uptime_ticks>
 8024150:	220a      	movs	r2, #10
 8024152:	2300      	movs	r3, #0
 8024154:	f7dc f8ba 	bl	80002cc <__aeabi_uldivmod>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8024158:	bd08      	pop	{r3, pc}

0802415a <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 802415a:	b510      	push	{r4, lr}
 802415c:	4604      	mov	r4, r0
 802415e:	f004 f871 	bl	8028244 <z_impl_k_uptime_ticks>
 8024162:	220a      	movs	r2, #10
 8024164:	2300      	movs	r3, #0
 8024166:	f7dc f8b1 	bl	80002cc <__aeabi_uldivmod>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 802416a:	1b00      	subs	r0, r0, r4
 802416c:	bd10      	pop	{r4, pc}

0802416e <lv_anim_path_linear>:
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 802416e:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8024172:	b513      	push	{r0, r1, r4, lr}
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8024174:	9300      	str	r3, [sp, #0]
 8024176:	2300      	movs	r3, #0
{
 8024178:	4604      	mov	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 802417a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 802417c:	4619      	mov	r1, r3
 802417e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8024180:	f000 fd80 	bl	8024c84 <lv_map>
    new_value = step * (a->end_value - a->start_value);
 8024184:	6a22      	ldr	r2, [r4, #32]
 8024186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024188:	1a9b      	subs	r3, r3, r2
 802418a:	4358      	muls	r0, r3
}
 802418c:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8024190:	b002      	add	sp, #8
 8024192:	bd10      	pop	{r4, pc}

08024194 <lv_anim_speed_to_time>:
    uint32_t d    = LV_ABS(start - end);
 8024194:	1a89      	subs	r1, r1, r2
    uint32_t time = (d * 1000) / speed;
 8024196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
{
 802419a:	4603      	mov	r3, r0
    uint32_t d    = LV_ABS(start - end);
 802419c:	2900      	cmp	r1, #0
 802419e:	bfb8      	it	lt
 80241a0:	4249      	neglt	r1, r1
    uint32_t time = (d * 1000) / speed;
 80241a2:	4351      	muls	r1, r2
 80241a4:	fbb1 f0f0 	udiv	r0, r1, r0
    if(time == 0) {
 80241a8:	4299      	cmp	r1, r3
        time++;
 80241aa:	bf38      	it	cc
 80241ac:	3001      	addcc	r0, #1
}
 80241ae:	4770      	bx	lr

080241b0 <lv_anim_path_ease_out>:
{
 80241b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 80241b2:	2300      	movs	r3, #0
 80241b4:	f44f 6580 	mov.w	r5, #1024	; 0x400
{
 80241b8:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 80241ba:	9500      	str	r5, [sp, #0]
 80241bc:	4619      	mov	r1, r3
 80241be:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80241c0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80241c2:	f000 fd5f 	bl	8024c84 <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 80241c6:	f240 33b6 	movw	r3, #950	; 0x3b6
 80241ca:	f44f 7261 	mov.w	r2, #900	; 0x384
 80241ce:	2100      	movs	r1, #0
 80241d0:	9500      	str	r5, [sp, #0]
 80241d2:	f000 fcd4 	bl	8024b7e <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 80241d6:	6a22      	ldr	r2, [r4, #32]
 80241d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80241da:	1a9b      	subs	r3, r3, r2
 80241dc:	4358      	muls	r0, r3
}
 80241de:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 80241e2:	b003      	add	sp, #12
 80241e4:	bd30      	pop	{r4, r5, pc}

080241e6 <lv_anim_path_ease_in_out>:
{
 80241e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 80241e8:	2300      	movs	r3, #0
 80241ea:	f44f 6580 	mov.w	r5, #1024	; 0x400
{
 80241ee:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 80241f0:	9500      	str	r5, [sp, #0]
 80241f2:	4619      	mov	r1, r3
 80241f4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80241f6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80241f8:	f000 fd44 	bl	8024c84 <lv_map>
    int32_t step = lv_bezier3(t, 0, 50, 952, LV_BEZIER_VAL_MAX);
 80241fc:	f44f 736e 	mov.w	r3, #952	; 0x3b8
 8024200:	2232      	movs	r2, #50	; 0x32
 8024202:	2100      	movs	r1, #0
 8024204:	9500      	str	r5, [sp, #0]
 8024206:	f000 fcba 	bl	8024b7e <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 802420a:	6a22      	ldr	r2, [r4, #32]
 802420c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802420e:	1a9b      	subs	r3, r3, r2
 8024210:	4358      	muls	r0, r3
}
 8024212:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8024216:	b003      	add	sp, #12
 8024218:	bd30      	pop	{r4, r5, pc}

0802421a <lv_anim_path_step>:
    if(a->act_time >= a->time)
 802421a:	e9d0 320b 	ldrd	r3, r2, [r0, #44]	; 0x2c
 802421e:	429a      	cmp	r2, r3
        return a->end_value;
 8024220:	bfac      	ite	ge
 8024222:	6a80      	ldrge	r0, [r0, #40]	; 0x28
        return a->start_value;
 8024224:	6a00      	ldrlt	r0, [r0, #32]
}
 8024226:	4770      	bx	lr

08024228 <lv_point_within_circle.isra.0>:

/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
 8024228:	b530      	push	{r4, r5, lr}
{
    lv_coord_t r = (area->x2 - area->x1) / 2;
 802422a:	f9b0 5000 	ldrsh.w	r5, [r0]
 802422e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
    lv_coord_t py = p->y - cy;
 8024232:	8840      	ldrh	r0, [r0, #2]
    lv_coord_t px = p->x - cx;
 8024234:	1b49      	subs	r1, r1, r5
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8024236:	1b5b      	subs	r3, r3, r5
    lv_coord_t py = p->y - cy;
 8024238:	1a12      	subs	r2, r2, r0
    lv_coord_t r = (area->x2 - area->x1) / 2;
 802423a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802423e:	105c      	asrs	r4, r3, #1
    lv_coord_t cx = area->x1 + r;
 8024240:	f3c3 034f 	ubfx	r3, r3, #1, #16
    lv_coord_t py = p->y - cy;
 8024244:	1ad2      	subs	r2, r2, r3
    lv_coord_t px = p->x - cx;
 8024246:	1ac9      	subs	r1, r1, r3

    uint32_t r_sqrd = r * r;
 8024248:	4364      	muls	r4, r4
    uint32_t dist = (px * px) + (py * py);
 802424a:	fb12 f202 	smulbb	r2, r2, r2
 802424e:	fb11 2101 	smlabb	r1, r1, r1, r2

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
 8024252:	428c      	cmp	r4, r1
 8024254:	bf34      	ite	cc
 8024256:	2000      	movcc	r0, #0
 8024258:	2001      	movcs	r0, #1
 802425a:	bd30      	pop	{r4, r5, pc}

0802425c <lv_area_set>:
    area_p->x2 = x2;
 802425c:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 802425e:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 8024262:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 8024264:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 8024266:	80c3      	strh	r3, [r0, #6]
}
 8024268:	4770      	bx	lr

0802426a <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
 802426a:	3901      	subs	r1, #1
 802426c:	8803      	ldrh	r3, [r0, #0]
 802426e:	4419      	add	r1, r3
 8024270:	8081      	strh	r1, [r0, #4]
}
 8024272:	4770      	bx	lr

08024274 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 8024274:	3901      	subs	r1, #1
 8024276:	8843      	ldrh	r3, [r0, #2]
 8024278:	4419      	add	r1, r3
 802427a:	80c1      	strh	r1, [r0, #6]
}
 802427c:	4770      	bx	lr

0802427e <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 802427e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8024282:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8024286:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 802428a:	1ad2      	subs	r2, r2, r3
 802428c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8024290:	1a58      	subs	r0, r3, r1
 8024292:	3001      	adds	r0, #1
}
 8024294:	fb02 0000 	mla	r0, r2, r0, r0
 8024298:	4770      	bx	lr

0802429a <lv_area_increase>:
    area->x1 -= w_extra;
 802429a:	b289      	uxth	r1, r1
 802429c:	8803      	ldrh	r3, [r0, #0]
    area->y1 -= h_extra;
 802429e:	b292      	uxth	r2, r2
    area->x1 -= w_extra;
 80242a0:	1a5b      	subs	r3, r3, r1
 80242a2:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 80242a4:	8883      	ldrh	r3, [r0, #4]
 80242a6:	4419      	add	r1, r3
    area->y1 -= h_extra;
 80242a8:	8843      	ldrh	r3, [r0, #2]
 80242aa:	1a9b      	subs	r3, r3, r2
    area->x2 += w_extra;
 80242ac:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 80242ae:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 80242b0:	88c3      	ldrh	r3, [r0, #6]
 80242b2:	441a      	add	r2, r3
 80242b4:	80c2      	strh	r2, [r0, #6]
}
 80242b6:	4770      	bx	lr

080242b8 <lv_area_move>:
    area->x1 += x_ofs;
 80242b8:	8803      	ldrh	r3, [r0, #0]
 80242ba:	fa13 f381 	uxtah	r3, r3, r1
 80242be:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
 80242c0:	8883      	ldrh	r3, [r0, #4]
 80242c2:	fa13 f181 	uxtah	r1, r3, r1
    area->y1 += y_ofs;
 80242c6:	8843      	ldrh	r3, [r0, #2]
 80242c8:	fa13 f382 	uxtah	r3, r3, r2
    area->x2 += x_ofs;
 80242cc:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
 80242ce:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
 80242d0:	88c3      	ldrh	r3, [r0, #6]
 80242d2:	fa13 f282 	uxtah	r2, r3, r2
 80242d6:	80c2      	strh	r2, [r0, #6]
}
 80242d8:	4770      	bx	lr

080242da <_lv_area_intersect>:
{
 80242da:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 80242dc:	f9b2 5000 	ldrsh.w	r5, [r2]
{
 80242e0:	4604      	mov	r4, r0
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 80242e2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80242e6:	429d      	cmp	r5, r3
 80242e8:	bfb8      	it	lt
 80242ea:	461d      	movlt	r5, r3
 80242ec:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 80242ee:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 80242f2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80242f6:	4283      	cmp	r3, r0
 80242f8:	bfb8      	it	lt
 80242fa:	4603      	movlt	r3, r0
 80242fc:	8063      	strh	r3, [r4, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 80242fe:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8024302:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 8024306:	42b0      	cmp	r0, r6
 8024308:	bfa8      	it	ge
 802430a:	4630      	movge	r0, r6
 802430c:	80a0      	strh	r0, [r4, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 802430e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8024312:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8024316:	428a      	cmp	r2, r1
 8024318:	bfa8      	it	ge
 802431a:	460a      	movge	r2, r1
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 802431c:	4285      	cmp	r5, r0
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 802431e:	80e2      	strh	r2, [r4, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8024320:	dc04      	bgt.n	802432c <_lv_area_intersect+0x52>
 8024322:	4293      	cmp	r3, r2
 8024324:	bfcc      	ite	gt
 8024326:	2000      	movgt	r0, #0
 8024328:	2001      	movle	r0, #1
}
 802432a:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 802432c:	2000      	movs	r0, #0
 802432e:	e7fc      	b.n	802432a <_lv_area_intersect+0x50>

08024330 <_lv_area_join>:
{
 8024330:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 8024332:	f9b1 4000 	ldrsh.w	r4, [r1]
 8024336:	f9b2 3000 	ldrsh.w	r3, [r2]
 802433a:	42a3      	cmp	r3, r4
 802433c:	bfa8      	it	ge
 802433e:	4623      	movge	r3, r4
 8024340:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 8024342:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8024346:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 802434a:	42a3      	cmp	r3, r4
 802434c:	bfa8      	it	ge
 802434e:	4623      	movge	r3, r4
 8024350:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 8024352:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8024356:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 802435a:	42a3      	cmp	r3, r4
 802435c:	bfb8      	it	lt
 802435e:	4623      	movlt	r3, r4
 8024360:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 8024362:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8024366:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 802436a:	4293      	cmp	r3, r2
 802436c:	bfb8      	it	lt
 802436e:	4613      	movlt	r3, r2
 8024370:	80c3      	strh	r3, [r0, #6]
}
 8024372:	bd10      	pop	{r4, pc}

08024374 <_lv_area_is_point_on>:
{
 8024374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8024378:	f9b1 9000 	ldrsh.w	r9, [r1]
{
 802437c:	b087      	sub	sp, #28
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 802437e:	f9b0 4000 	ldrsh.w	r4, [r0]
{
 8024382:	4688      	mov	r8, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8024384:	45a1      	cmp	r9, r4
 8024386:	f2c0 8088 	blt.w	802449a <_lv_area_is_point_on+0x126>
 802438a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802438e:	4599      	cmp	r9, r3
 8024390:	9301      	str	r3, [sp, #4]
 8024392:	f300 8082 	bgt.w	802449a <_lv_area_is_point_on+0x126>
 8024396:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
 802439a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 802439e:	45da      	cmp	sl, fp
 80243a0:	db7b      	blt.n	802449a <_lv_area_is_point_on+0x126>
 80243a2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80243a6:	459a      	cmp	sl, r3
 80243a8:	dc77      	bgt.n	802449a <_lv_area_is_point_on+0x126>
    if(radius <= 0) {
 80243aa:	2a00      	cmp	r2, #0
 80243ac:	dc03      	bgt.n	80243b6 <_lv_area_is_point_on+0x42>
        return true;
 80243ae:	2001      	movs	r0, #1
}
 80243b0:	b007      	add	sp, #28
 80243b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80243b6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80243ba:	b2a7      	uxth	r7, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80243bc:	b29e      	uxth	r6, r3
    corner_area.x1 = a_p->x1;
 80243be:	f8ad 4010 	strh.w	r4, [sp, #16]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80243c2:	9002      	str	r0, [sp, #8]
 80243c4:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80243c6:	fa1f fc8b 	uxth.w	ip, fp
 80243ca:	9303      	str	r3, [sp, #12]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80243cc:	1bc0      	subs	r0, r0, r7
    corner_area.y1 = a_p->y1;
 80243ce:	f8ad b012 	strh.w	fp, [sp, #18]
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 80243d2:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 80243d6:	fa04 f080 	sxtah	r0, r4, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80243da:	1c74      	adds	r4, r6, #1
 80243dc:	eba4 040c 	sub.w	r4, r4, ip
    lv_coord_t max_radius = LV_MIN(w, h);
 80243e0:	1040      	asrs	r0, r0, #1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 80243e2:	f3c4 35c0 	ubfx	r5, r4, #15, #1
 80243e6:	fa05 f584 	sxtah	r5, r5, r4
    lv_coord_t max_radius = LV_MIN(w, h);
 80243ea:	106d      	asrs	r5, r5, #1
    corner_area.x2 = a_p->x1 + radius;
 80243ec:	42a8      	cmp	r0, r5
 80243ee:	bfa8      	it	ge
 80243f0:	4628      	movge	r0, r5
 80243f2:	4290      	cmp	r0, r2
 80243f4:	bfa8      	it	ge
 80243f6:	4610      	movge	r0, r2
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80243f8:	2200      	movs	r2, #0
    corner_area.y2 = a_p->y1 + radius;
 80243fa:	fa1c f480 	uxtah	r4, ip, r0
    corner_area.x2 = a_p->x1 + radius;
 80243fe:	fa17 f780 	uxtah	r7, r7, r0
 8024402:	b285      	uxth	r5, r0
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8024404:	a804      	add	r0, sp, #16
    corner_area.x2 = a_p->x1 + radius;
 8024406:	b2bf      	uxth	r7, r7
    corner_area.y2 = a_p->y1 + radius;
 8024408:	b224      	sxth	r4, r4
    corner_area.x2 = a_p->x1 + radius;
 802440a:	f8ad 7014 	strh.w	r7, [sp, #20]
    corner_area.y2 = a_p->y1 + radius;
 802440e:	f8ad 4016 	strh.w	r4, [sp, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8024412:	f7ff ffaf 	bl	8024374 <_lv_area_is_point_on>
 8024416:	9b03      	ldr	r3, [sp, #12]
 8024418:	4602      	mov	r2, r0
 802441a:	b140      	cbz	r0, 802442e <_lv_area_is_point_on+0xba>
        corner_area.x2 += radius;
 802441c:	443d      	add	r5, r7
 802441e:	f8ad 5014 	strh.w	r5, [sp, #20]
        return lv_point_within_circle(&corner_area, p_p);
 8024422:	4652      	mov	r2, sl
 8024424:	4649      	mov	r1, r9
 8024426:	a804      	add	r0, sp, #16
 8024428:	f7ff fefe 	bl	8024228 <lv_point_within_circle.isra.0>
 802442c:	e7c0      	b.n	80243b0 <_lv_area_is_point_on+0x3c>
    corner_area.y1 = a_p->y2 - radius;
 802442e:	1b76      	subs	r6, r6, r5
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8024430:	4641      	mov	r1, r8
 8024432:	a804      	add	r0, sp, #16
    corner_area.y2 = a_p->y2;
 8024434:	f8ad 3016 	strh.w	r3, [sp, #22]
    corner_area.y1 = a_p->y2 - radius;
 8024438:	b2b6      	uxth	r6, r6
 802443a:	f8ad 6012 	strh.w	r6, [sp, #18]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 802443e:	f7ff ff99 	bl	8024374 <_lv_area_is_point_on>
 8024442:	4602      	mov	r2, r0
 8024444:	b130      	cbz	r0, 8024454 <_lv_area_is_point_on+0xe0>
        corner_area.x2 += radius;
 8024446:	442f      	add	r7, r5
        corner_area.y1 -= radius;
 8024448:	1b75      	subs	r5, r6, r5
        corner_area.x2 += radius;
 802444a:	f8ad 7014 	strh.w	r7, [sp, #20]
        corner_area.y1 -= radius;
 802444e:	f8ad 5012 	strh.w	r5, [sp, #18]
        return lv_point_within_circle(&corner_area, p_p);
 8024452:	e7e6      	b.n	8024422 <_lv_area_is_point_on+0xae>
    corner_area.x1 = a_p->x2 - radius;
 8024454:	9b02      	ldr	r3, [sp, #8]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8024456:	4641      	mov	r1, r8
 8024458:	a804      	add	r0, sp, #16
    corner_area.x1 = a_p->x2 - radius;
 802445a:	1b5f      	subs	r7, r3, r5
    corner_area.x2 = a_p->x2;
 802445c:	9b01      	ldr	r3, [sp, #4]
    corner_area.x1 = a_p->x2 - radius;
 802445e:	b2bf      	uxth	r7, r7
    corner_area.x2 = a_p->x2;
 8024460:	f8ad 3014 	strh.w	r3, [sp, #20]
    corner_area.x1 = a_p->x2 - radius;
 8024464:	f8ad 7010 	strh.w	r7, [sp, #16]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8024468:	f7ff ff84 	bl	8024374 <_lv_area_is_point_on>
 802446c:	4602      	mov	r2, r0
 802446e:	b130      	cbz	r0, 802447e <_lv_area_is_point_on+0x10a>
        corner_area.x1 -= radius;
 8024470:	1b7f      	subs	r7, r7, r5
        corner_area.y1 -= radius;
 8024472:	1b76      	subs	r6, r6, r5
        corner_area.x1 -= radius;
 8024474:	f8ad 7010 	strh.w	r7, [sp, #16]
        corner_area.y1 -= radius;
 8024478:	f8ad 6012 	strh.w	r6, [sp, #18]
        return lv_point_within_circle(&corner_area, p_p);
 802447c:	e7d1      	b.n	8024422 <_lv_area_is_point_on+0xae>
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 802447e:	4641      	mov	r1, r8
 8024480:	a804      	add	r0, sp, #16
    corner_area.y1 = a_p->y1;
 8024482:	f8ad b012 	strh.w	fp, [sp, #18]
    corner_area.y2 = a_p->y1 + radius;
 8024486:	f8ad 4016 	strh.w	r4, [sp, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 802448a:	f7ff ff73 	bl	8024374 <_lv_area_is_point_on>
 802448e:	2800      	cmp	r0, #0
 8024490:	d08d      	beq.n	80243ae <_lv_area_is_point_on+0x3a>
        corner_area.x1 -= radius;
 8024492:	1b7f      	subs	r7, r7, r5
 8024494:	f8ad 7010 	strh.w	r7, [sp, #16]
 8024498:	e7c3      	b.n	8024422 <_lv_area_is_point_on+0xae>
        return false;
 802449a:	2000      	movs	r0, #0
 802449c:	e788      	b.n	80243b0 <_lv_area_is_point_on+0x3c>

0802449e <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 802449e:	f9b0 2000 	ldrsh.w	r2, [r0]
 80244a2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80244a6:	429a      	cmp	r2, r3
 80244a8:	dc14      	bgt.n	80244d4 <_lv_area_is_on+0x36>
 80244aa:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80244ae:	f9b1 3000 	ldrsh.w	r3, [r1]
 80244b2:	429a      	cmp	r2, r3
 80244b4:	db0e      	blt.n	80244d4 <_lv_area_is_on+0x36>
 80244b6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80244ba:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80244be:	429a      	cmp	r2, r3
 80244c0:	dc08      	bgt.n	80244d4 <_lv_area_is_on+0x36>
 80244c2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80244c6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80244ca:	4298      	cmp	r0, r3
 80244cc:	bfb4      	ite	lt
 80244ce:	2000      	movlt	r0, #0
 80244d0:	2001      	movge	r0, #1
 80244d2:	4770      	bx	lr
        return false;
 80244d4:	2000      	movs	r0, #0
}
 80244d6:	4770      	bx	lr

080244d8 <_lv_area_is_in>:
{
 80244d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80244dc:	f9b0 7000 	ldrsh.w	r7, [r0]
{
 80244e0:	460c      	mov	r4, r1
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80244e2:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 80244e6:	4615      	mov	r5, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80244e8:	42bb      	cmp	r3, r7
 80244ea:	dd03      	ble.n	80244f4 <_lv_area_is_in+0x1c>
    if(!is_in) return false;
 80244ec:	2000      	movs	r0, #0
}
 80244ee:	b002      	add	sp, #8
 80244f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80244f4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80244f8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80244fc:	4299      	cmp	r1, r3
 80244fe:	dcf5      	bgt.n	80244ec <_lv_area_is_in+0x14>
 8024500:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8024504:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024508:	42b1      	cmp	r1, r6
 802450a:	dbef      	blt.n	80244ec <_lv_area_is_in+0x14>
       ain_p->y2 <= aholder_p->y2) {
 802450c:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8024510:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8024514:	4541      	cmp	r1, r8
 8024516:	dbe9      	blt.n	80244ec <_lv_area_is_in+0x14>
    if(radius == 0) return true;
 8024518:	b32a      	cbz	r2, 8024566 <_lv_area_is_in+0x8e>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 802451a:	a901      	add	r1, sp, #4
 802451c:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 802451e:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y1;
 8024522:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8024526:	f7ff ff25 	bl	8024374 <_lv_area_is_point_on>
 802452a:	2800      	cmp	r0, #0
 802452c:	d0de      	beq.n	80244ec <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 802452e:	462a      	mov	r2, r5
 8024530:	a901      	add	r1, sp, #4
 8024532:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 8024534:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8024538:	f7ff ff1c 	bl	8024374 <_lv_area_is_point_on>
 802453c:	2800      	cmp	r0, #0
 802453e:	d0d5      	beq.n	80244ec <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8024540:	462a      	mov	r2, r5
 8024542:	a901      	add	r1, sp, #4
 8024544:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 8024546:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y2;
 802454a:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 802454e:	f7ff ff11 	bl	8024374 <_lv_area_is_point_on>
 8024552:	2800      	cmp	r0, #0
 8024554:	d0ca      	beq.n	80244ec <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8024556:	462a      	mov	r2, r5
 8024558:	a901      	add	r1, sp, #4
 802455a:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 802455c:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8024560:	f7ff ff08 	bl	8024374 <_lv_area_is_point_on>
 8024564:	e7c3      	b.n	80244ee <_lv_area_is_in+0x16>
    if(radius == 0) return true;
 8024566:	2001      	movs	r0, #1
 8024568:	e7c1      	b.n	80244ee <_lv_area_is_in+0x16>

0802456a <_lv_area_is_out>:
{
 802456a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 802456e:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
{
 8024572:	460c      	mov	r4, r1
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8024574:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8024578:	4615      	mov	r5, r2
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 802457a:	42b3      	cmp	r3, r6
 802457c:	dc3f      	bgt.n	80245fe <_lv_area_is_out+0x94>
 802457e:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8024582:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8024586:	4543      	cmp	r3, r8
 8024588:	dc39      	bgt.n	80245fe <_lv_area_is_out+0x94>
 802458a:	f9b0 7000 	ldrsh.w	r7, [r0]
 802458e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8024592:	42bb      	cmp	r3, r7
 8024594:	db33      	blt.n	80245fe <_lv_area_is_out+0x94>
       aout_p->y1 > aholder_p->y2) {
 8024596:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 802459a:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 802459e:	4299      	cmp	r1, r3
 80245a0:	db2d      	blt.n	80245fe <_lv_area_is_out+0x94>
    if(radius == 0) return false;
 80245a2:	b91a      	cbnz	r2, 80245ac <_lv_area_is_out+0x42>
 80245a4:	2000      	movs	r0, #0
}
 80245a6:	b002      	add	sp, #8
 80245a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 80245ac:	a901      	add	r1, sp, #4
 80245ae:	4620      	mov	r0, r4
    p.x = aout_p->x1;
 80245b0:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = aout_p->y1;
 80245b4:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 80245b8:	f7ff fedc 	bl	8024374 <_lv_area_is_point_on>
 80245bc:	2800      	cmp	r0, #0
 80245be:	d1f1      	bne.n	80245a4 <_lv_area_is_out+0x3a>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 80245c0:	462a      	mov	r2, r5
 80245c2:	a901      	add	r1, sp, #4
 80245c4:	4620      	mov	r0, r4
    p.x = aout_p->x2;
 80245c6:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 80245ca:	f7ff fed3 	bl	8024374 <_lv_area_is_point_on>
 80245ce:	2800      	cmp	r0, #0
 80245d0:	d1e8      	bne.n	80245a4 <_lv_area_is_out+0x3a>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 80245d2:	462a      	mov	r2, r5
 80245d4:	a901      	add	r1, sp, #4
 80245d6:	4620      	mov	r0, r4
    p.x = aout_p->x1;
 80245d8:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = aout_p->y2;
 80245dc:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 80245e0:	f7ff fec8 	bl	8024374 <_lv_area_is_point_on>
 80245e4:	2800      	cmp	r0, #0
 80245e6:	d1dd      	bne.n	80245a4 <_lv_area_is_out+0x3a>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 80245e8:	462a      	mov	r2, r5
 80245ea:	a901      	add	r1, sp, #4
 80245ec:	4620      	mov	r0, r4
    p.x = aout_p->x2;
 80245ee:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 80245f2:	f7ff febf 	bl	8024374 <_lv_area_is_point_on>
 80245f6:	f080 0001 	eor.w	r0, r0, #1
 80245fa:	b2c0      	uxtb	r0, r0
 80245fc:	e7d3      	b.n	80245a6 <_lv_area_is_out+0x3c>
        return true;
 80245fe:	2001      	movs	r0, #1
 8024600:	e7d1      	b.n	80245a6 <_lv_area_is_out+0x3c>

08024602 <lv_color_mix>:
{
 8024602:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8024604:	f3c1 1345 	ubfx	r3, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8024608:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 802460c:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8024610:	f000 071f 	and.w	r7, r0, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8024614:	4373      	muls	r3, r6
 8024616:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 802461a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 802461e:	fb04 3302 	mla	r3, r4, r2, r3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8024622:	f001 041f 	and.w	r4, r1, #31
 8024626:	4374      	muls	r4, r6
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8024628:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 802462a:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 802462e:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8024630:	3480      	adds	r4, #128	; 0x80
    return ret;
 8024632:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8024636:	436c      	muls	r4, r5
    return ret;
 8024638:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 802463c:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8024640:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 8024644:	4373      	muls	r3, r6
 8024646:	fb00 3302 	mla	r3, r0, r2, r3
 802464a:	3380      	adds	r3, #128	; 0x80
 802464c:	436b      	muls	r3, r5
 802464e:	0ddb      	lsrs	r3, r3, #23
}
 8024650:	ea44 20c3 	orr.w	r0, r4, r3, lsl #11
 8024654:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024656 <lv_color_fill>:
    if(buf_int & 0x3) {
 8024656:	0783      	lsls	r3, r0, #30
{
 8024658:	b510      	push	{r4, lr}
 802465a:	b28c      	uxth	r4, r1
        *buf = color;
 802465c:	bf1c      	itt	ne
 802465e:	f820 1b02 	strhne.w	r1, [r0], #2
        px_num--;
 8024662:	f102 32ff 	addne.w	r2, r2, #4294967295
    uint32_t c32 = (uint32_t)color.full + ((uint32_t)color.full << 16);
 8024666:	eb04 4104 	add.w	r1, r4, r4, lsl #16
    while(px_num > 16) {
 802466a:	2a10      	cmp	r2, #16
 802466c:	f100 0320 	add.w	r3, r0, #32
 8024670:	d804      	bhi.n	802467c <lv_color_fill+0x26>
 8024672:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    while(px_num) {
 8024676:	4290      	cmp	r0, r2
 8024678:	d10b      	bne.n	8024692 <lv_color_fill+0x3c>
}
 802467a:	bd10      	pop	{r4, pc}
        px_num -= 16;
 802467c:	3a10      	subs	r2, #16
 802467e:	4618      	mov	r0, r3
        *buf32 = c32;
 8024680:	e943 1108 	strd	r1, r1, [r3, #-32]
        *buf32 = c32;
 8024684:	e943 1106 	strd	r1, r1, [r3, #-24]
        *buf32 = c32;
 8024688:	e943 1104 	strd	r1, r1, [r3, #-16]
        *buf32 = c32;
 802468c:	e943 1102 	strd	r1, r1, [r3, #-8]
        px_num -= 16;
 8024690:	e7eb      	b.n	802466a <lv_color_fill+0x14>
        *buf = color;
 8024692:	f820 4b02 	strh.w	r4, [r0], #2
        px_num--;
 8024696:	e7ee      	b.n	8024676 <lv_color_fill+0x20>

08024698 <lv_color_darken>:
{
 8024698:	460a      	mov	r2, r1
    return lv_color_mix(lv_color_black(), c, lvl);
 802469a:	4601      	mov	r1, r0
 802469c:	f04f 0000 	mov.w	r0, #0
 80246a0:	f7ff bfaf 	b.w	8024602 <lv_color_mix>

080246a4 <lv_color_hsv_to_rgb>:
    s = (uint16_t)((uint16_t)s * 255) / 100;
 80246a4:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80246a8:	2364      	movs	r3, #100	; 0x64
    v = (uint16_t)((uint16_t)v * 255) / 100;
 80246aa:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    s = (uint16_t)((uint16_t)s * 255) / 100;
 80246ae:	b289      	uxth	r1, r1
    v = (uint16_t)((uint16_t)v * 255) / 100;
 80246b0:	b292      	uxth	r2, r2
    s = (uint16_t)((uint16_t)s * 255) / 100;
 80246b2:	fbb1 f1f3 	udiv	r1, r1, r3
    v = (uint16_t)((uint16_t)v * 255) / 100;
 80246b6:	fbb2 f2f3 	udiv	r2, r2, r3
{
 80246ba:	b570      	push	{r4, r5, r6, lr}
    if(s == 0) {
 80246bc:	f011 06ff 	ands.w	r6, r1, #255	; 0xff
    v = (uint16_t)((uint16_t)v * 255) / 100;
 80246c0:	b2d2      	uxtb	r2, r2
    if(s == 0) {
 80246c2:	d107      	bne.n	80246d4 <lv_color_hsv_to_rgb+0x30>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80246c4:	08d0      	lsrs	r0, r2, #3
 80246c6:	0892      	lsrs	r2, r2, #2
 80246c8:	4603      	mov	r3, r0
 80246ca:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
}
 80246ce:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 80246d2:	bd70      	pop	{r4, r5, r6, pc}
    h = (uint32_t)((uint32_t)h * 255) / 360;
 80246d4:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80246d8:	f44f 73b4 	mov.w	r3, #360	; 0x168
    region    = h / 43;
 80246dc:	212b      	movs	r1, #43	; 0x2b
    h = (uint32_t)((uint32_t)h * 255) / 360;
 80246de:	fbb0 f3f3 	udiv	r3, r0, r3
    region    = h / 43;
 80246e2:	b29c      	uxth	r4, r3
    p = (v * (255 - s)) >> 8;
 80246e4:	f1c6 00ff 	rsb	r0, r6, #255	; 0xff
    region    = h / 43;
 80246e8:	fbb4 f4f1 	udiv	r4, r4, r1
    remainder = (h - (region * 43)) * 6;
 80246ec:	f06f 012a 	mvn.w	r1, #42	; 0x2a
    region    = h / 43;
 80246f0:	b2e4      	uxtb	r4, r4
    p = (v * (255 - s)) >> 8;
 80246f2:	4350      	muls	r0, r2
    remainder = (h - (region * 43)) * 6;
 80246f4:	fb01 3304 	mla	r3, r1, r4, r3
    p = (v * (255 - s)) >> 8;
 80246f8:	f3c0 2007 	ubfx	r0, r0, #8, #8
    remainder = (h - (region * 43)) * 6;
 80246fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024700:	005b      	lsls	r3, r3, #1
 8024702:	b2db      	uxtb	r3, r3
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8024704:	fb16 f503 	smulbb	r5, r6, r3
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8024708:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 802470c:	4373      	muls	r3, r6
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 802470e:	122d      	asrs	r5, r5, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8024710:	121b      	asrs	r3, r3, #8
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8024712:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8024716:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 802471a:	4355      	muls	r5, r2
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 802471c:	4353      	muls	r3, r2
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 802471e:	f3c5 2107 	ubfx	r1, r5, #8, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8024722:	f3c3 2307 	ubfx	r3, r3, #8, #8
    switch(region) {
 8024726:	2c04      	cmp	r4, #4
 8024728:	d819      	bhi.n	802475e <lv_color_hsv_to_rgb+0xba>
 802472a:	e8df f004 	tbb	[pc, r4]
 802472e:	0503      	.short	0x0503
 8024730:	0f0c      	.short	0x0f0c
 8024732:	13          	.byte	0x13
 8024733:	00          	.byte	0x00
            r = v;
 8024734:	4611      	mov	r1, r2
            g = q;
 8024736:	461a      	mov	r2, r3
 8024738:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 802473c:	f3c2 0285 	ubfx	r2, r2, #2, #6
 8024740:	f3c1 00c4 	ubfx	r0, r1, #3, #5
    return result;
 8024744:	e7c1      	b.n	80246ca <lv_color_hsv_to_rgb+0x26>
            r = p;
 8024746:	4601      	mov	r1, r0
            b = q;
 8024748:	4618      	mov	r0, r3
            break;
 802474a:	e7f5      	b.n	8024738 <lv_color_hsv_to_rgb+0x94>
            break;
 802474c:	460b      	mov	r3, r1
            r = p;
 802474e:	4601      	mov	r1, r0
            b = v;
 8024750:	4610      	mov	r0, r2
 8024752:	e7f0      	b.n	8024736 <lv_color_hsv_to_rgb+0x92>
            break;
 8024754:	4611      	mov	r1, r2
            g = p;
 8024756:	4602      	mov	r2, r0
            b = v;
 8024758:	4608      	mov	r0, r1
            r = t;
 802475a:	4619      	mov	r1, r3
            break;
 802475c:	e7ec      	b.n	8024738 <lv_color_hsv_to_rgb+0x94>
            break;
 802475e:	460b      	mov	r3, r1
            r = v;
 8024760:	4611      	mov	r1, r2
            g = p;
 8024762:	4602      	mov	r2, r0
 8024764:	e7f0      	b.n	8024748 <lv_color_hsv_to_rgb+0xa4>

08024766 <lv_fs_close>:
{
 8024766:	b538      	push	{r3, r4, r5, lr}
 8024768:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 802476a:	6840      	ldr	r0, [r0, #4]
 802476c:	b1b0      	cbz	r0, 802479c <lv_fs_close+0x36>
    if(file_p->drv->close_cb == NULL) {
 802476e:	68c3      	ldr	r3, [r0, #12]
 8024770:	b1b3      	cbz	r3, 80247a0 <lv_fs_close+0x3a>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8024772:	6821      	ldr	r1, [r4, #0]
 8024774:	4798      	blx	r3
    if(file_p->drv->cache_size && file_p->cache) {
 8024776:	6863      	ldr	r3, [r4, #4]
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8024778:	4605      	mov	r5, r0
    if(file_p->drv->cache_size && file_p->cache) {
 802477a:	885b      	ldrh	r3, [r3, #2]
 802477c:	b143      	cbz	r3, 8024790 <lv_fs_close+0x2a>
 802477e:	68a3      	ldr	r3, [r4, #8]
 8024780:	b133      	cbz	r3, 8024790 <lv_fs_close+0x2a>
        if(file_p->cache->buffer) {
 8024782:	68d8      	ldr	r0, [r3, #12]
 8024784:	b108      	cbz	r0, 802478a <lv_fs_close+0x24>
            lv_mem_free(file_p->cache->buffer);
 8024786:	f7ed ffe5 	bl	8012754 <lv_mem_free>
        lv_mem_free(file_p->cache);
 802478a:	68a0      	ldr	r0, [r4, #8]
 802478c:	f7ed ffe2 	bl	8012754 <lv_mem_free>
    file_p->file_d = NULL;
 8024790:	2300      	movs	r3, #0
    file_p->drv    = NULL;
 8024792:	e9c4 3300 	strd	r3, r3, [r4]
    file_p->cache  = NULL;
 8024796:	60a3      	str	r3, [r4, #8]
}
 8024798:	4628      	mov	r0, r5
 802479a:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 802479c:	250b      	movs	r5, #11
 802479e:	e7fb      	b.n	8024798 <lv_fs_close+0x32>
        return LV_FS_RES_NOT_IMP;
 80247a0:	2509      	movs	r5, #9
 80247a2:	e7f9      	b.n	8024798 <lv_fs_close+0x32>

080247a4 <lv_fs_read>:
{
 80247a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247a8:	4604      	mov	r4, r0
 80247aa:	b087      	sub	sp, #28
 80247ac:	460e      	mov	r6, r1
 80247ae:	4615      	mov	r5, r2
    if(br != NULL) *br = 0;
 80247b0:	4699      	mov	r9, r3
 80247b2:	b113      	cbz	r3, 80247ba <lv_fs_read+0x16>
 80247b4:	2300      	movs	r3, #0
 80247b6:	f8c9 3000 	str.w	r3, [r9]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 80247ba:	6860      	ldr	r0, [r4, #4]
 80247bc:	2800      	cmp	r0, #0
 80247be:	f000 80ad 	beq.w	802491c <lv_fs_read+0x178>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 80247c2:	f8d0 b010 	ldr.w	fp, [r0, #16]
 80247c6:	f1bb 0f00 	cmp.w	fp, #0
 80247ca:	f000 80aa 	beq.w	8024922 <lv_fs_read+0x17e>
    uint32_t br_tmp = 0;
 80247ce:	2300      	movs	r3, #0
 80247d0:	9304      	str	r3, [sp, #16]
    if(file_p->drv->cache_size) {
 80247d2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 80247d6:	f1b8 0f00 	cmp.w	r8, #0
 80247da:	f000 8097 	beq.w	802490c <lv_fs_read+0x168>
    uint32_t file_position = file_p->cache->file_position;
 80247de:	68a2      	ldr	r2, [r4, #8]
 80247e0:	f8d2 a008 	ldr.w	sl, [r2, #8]
    char * buffer = file_p->cache->buffer;
 80247e4:	68d7      	ldr	r7, [r2, #12]
    uint32_t end = file_p->cache->end;
 80247e6:	e9d2 1c00 	ldrd	r1, ip, [r2]
    if(start <= file_position && file_position < end) {
 80247ea:	458a      	cmp	sl, r1
 80247ec:	d35c      	bcc.n	80248a8 <lv_fs_read+0x104>
 80247ee:	45e2      	cmp	sl, ip
 80247f0:	d25a      	bcs.n	80248a8 <lv_fs_read+0x104>
        uint16_t buffer_offset = file_position - start;
 80247f2:	ebaa 0101 	sub.w	r1, sl, r1
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 80247f6:	ebac 0a0a 	sub.w	sl, ip, sl
 80247fa:	b289      	uxth	r1, r1
 80247fc:	eba8 0201 	sub.w	r2, r8, r1
            lv_memcpy(buf, buffer + buffer_offset, btr);
 8024800:	4439      	add	r1, r7
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 8024802:	4592      	cmp	sl, r2
 8024804:	bf28      	it	cs
 8024806:	4692      	movcs	sl, r2
        if(btr <= buffer_remaining_length) {
 8024808:	4555      	cmp	r5, sl
 802480a:	d80c      	bhi.n	8024826 <lv_fs_read+0x82>
    return memcpy(dst, src, len);
 802480c:	462a      	mov	r2, r5
 802480e:	4630      	mov	r0, r6
 8024810:	f7f5 ffaf 	bl	801a772 <memcpy>
            *br = btr;
 8024814:	9504      	str	r5, [sp, #16]
        file_p->cache->file_position += *br;
 8024816:	68a2      	ldr	r2, [r4, #8]
 8024818:	f04f 0800 	mov.w	r8, #0
 802481c:	9904      	ldr	r1, [sp, #16]
 802481e:	6893      	ldr	r3, [r2, #8]
 8024820:	440b      	add	r3, r1
 8024822:	6093      	str	r3, [r2, #8]
 8024824:	e01f      	b.n	8024866 <lv_fs_read+0xc2>
 8024826:	4630      	mov	r0, r6
 8024828:	4652      	mov	r2, sl
 802482a:	f7f5 ffa2 	bl	801a772 <memcpy>
            uint32_t bytes_read_to_buffer = 0;
 802482e:	2300      	movs	r3, #0
 8024830:	6860      	ldr	r0, [r4, #4]
            if(btr > buffer_size) {
 8024832:	4545      	cmp	r5, r8
            uint32_t bytes_read_to_buffer = 0;
 8024834:	9305      	str	r3, [sp, #20]
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 8024836:	eb06 030a 	add.w	r3, r6, sl
 802483a:	eba5 0b0a 	sub.w	fp, r5, sl
 802483e:	9303      	str	r3, [sp, #12]
 8024840:	ab05      	add	r3, sp, #20
 8024842:	9300      	str	r3, [sp, #0]
 8024844:	6906      	ldr	r6, [r0, #16]
            if(btr > buffer_size) {
 8024846:	d918      	bls.n	802487a <lv_fs_read+0xd6>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 8024848:	465b      	mov	r3, fp
 802484a:	9a03      	ldr	r2, [sp, #12]
 802484c:	6821      	ldr	r1, [r4, #0]
 802484e:	47b0      	blx	r6
 8024850:	4680      	mov	r8, r0
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 8024852:	9b05      	ldr	r3, [sp, #20]
 8024854:	449a      	add	sl, r3
 8024856:	45aa      	cmp	sl, r5
 8024858:	bf94      	ite	ls
 802485a:	f8cd a010 	strls.w	sl, [sp, #16]
 802485e:	9504      	strhi	r5, [sp, #16]
    if(res == LV_FS_RES_OK) {
 8024860:	f1b8 0f00 	cmp.w	r8, #0
 8024864:	d0d7      	beq.n	8024816 <lv_fs_read+0x72>
    if(br != NULL) *br = br_tmp;
 8024866:	f1b9 0f00 	cmp.w	r9, #0
 802486a:	d002      	beq.n	8024872 <lv_fs_read+0xce>
 802486c:	9b04      	ldr	r3, [sp, #16]
 802486e:	f8c9 3000 	str.w	r3, [r9]
}
 8024872:	4640      	mov	r0, r8
 8024874:	b007      	add	sp, #28
 8024876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 802487a:	4643      	mov	r3, r8
 802487c:	463a      	mov	r2, r7
 802487e:	6821      	ldr	r1, [r4, #0]
 8024880:	47b0      	blx	r6
                file_p->cache->start = file_p->cache->end;
 8024882:	68a3      	ldr	r3, [r4, #8]
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8024884:	4680      	mov	r8, r0
 8024886:	9803      	ldr	r0, [sp, #12]
                file_p->cache->start = file_p->cache->end;
 8024888:	685a      	ldr	r2, [r3, #4]
 802488a:	601a      	str	r2, [r3, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 802488c:	9a05      	ldr	r2, [sp, #20]
 802488e:	68a1      	ldr	r1, [r4, #8]
                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 8024890:	4593      	cmp	fp, r2
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8024892:	680b      	ldr	r3, [r1, #0]
                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 8024894:	bf28      	it	cs
 8024896:	4693      	movcs	fp, r2
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8024898:	4413      	add	r3, r2
 802489a:	fa1f f28b 	uxth.w	r2, fp
 802489e:	604b      	str	r3, [r1, #4]
 80248a0:	4639      	mov	r1, r7
 80248a2:	f7f5 ff66 	bl	801a772 <memcpy>
 80248a6:	e7d4      	b.n	8024852 <lv_fs_read+0xae>
        if(btr > buffer_size) {
 80248a8:	4545      	cmp	r5, r8
 80248aa:	d907      	bls.n	80248bc <lv_fs_read+0x118>
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 80248ac:	ab04      	add	r3, sp, #16
 80248ae:	4632      	mov	r2, r6
 80248b0:	9300      	str	r3, [sp, #0]
 80248b2:	462b      	mov	r3, r5
 80248b4:	6821      	ldr	r1, [r4, #0]
 80248b6:	47d8      	blx	fp
 80248b8:	4680      	mov	r8, r0
 80248ba:	e7d1      	b.n	8024860 <lv_fs_read+0xbc>
            if(buffer == NULL) {
 80248bc:	b94f      	cbnz	r7, 80248d2 <lv_fs_read+0x12e>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 80248be:	4640      	mov	r0, r8
 80248c0:	9203      	str	r2, [sp, #12]
 80248c2:	f7ed ff29 	bl	8012718 <lv_mem_alloc>
 80248c6:	9a03      	ldr	r2, [sp, #12]
 80248c8:	60d0      	str	r0, [r2, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 80248ca:	68a3      	ldr	r3, [r4, #8]
 80248cc:	68df      	ldr	r7, [r3, #12]
 80248ce:	b907      	cbnz	r7, 80248d2 <lv_fs_read+0x12e>
 80248d0:	e7fe      	b.n	80248d0 <lv_fs_read+0x12c>
            uint32_t bytes_read_to_buffer = 0;
 80248d2:	2300      	movs	r3, #0
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 80248d4:	6860      	ldr	r0, [r4, #4]
 80248d6:	463a      	mov	r2, r7
            uint32_t bytes_read_to_buffer = 0;
 80248d8:	9305      	str	r3, [sp, #20]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 80248da:	ab05      	add	r3, sp, #20
 80248dc:	9300      	str	r3, [sp, #0]
 80248de:	4643      	mov	r3, r8
 80248e0:	6821      	ldr	r1, [r4, #0]
 80248e2:	f8d0 b010 	ldr.w	fp, [r0, #16]
 80248e6:	47d8      	blx	fp
            file_p->cache->start = file_position;
 80248e8:	68a3      	ldr	r3, [r4, #8]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 80248ea:	4680      	mov	r8, r0
 80248ec:	4630      	mov	r0, r6
            file_p->cache->start = file_position;
 80248ee:	f8c3 a000 	str.w	sl, [r3]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 80248f2:	68a1      	ldr	r1, [r4, #8]
 80248f4:	9a05      	ldr	r2, [sp, #20]
 80248f6:	680b      	ldr	r3, [r1, #0]
            *br = LV_MIN(btr, bytes_read_to_buffer);
 80248f8:	42aa      	cmp	r2, r5
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 80248fa:	4413      	add	r3, r2
            *br = LV_MIN(btr, bytes_read_to_buffer);
 80248fc:	bf28      	it	cs
 80248fe:	462a      	movcs	r2, r5
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8024900:	604b      	str	r3, [r1, #4]
 8024902:	4639      	mov	r1, r7
            *br = LV_MIN(btr, bytes_read_to_buffer);
 8024904:	9204      	str	r2, [sp, #16]
 8024906:	f7f5 ff34 	bl	801a772 <memcpy>
 802490a:	e7a9      	b.n	8024860 <lv_fs_read+0xbc>
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 802490c:	ab04      	add	r3, sp, #16
 802490e:	4632      	mov	r2, r6
 8024910:	9300      	str	r3, [sp, #0]
 8024912:	462b      	mov	r3, r5
 8024914:	6821      	ldr	r1, [r4, #0]
 8024916:	47d8      	blx	fp
 8024918:	4680      	mov	r8, r0
 802491a:	e7a4      	b.n	8024866 <lv_fs_read+0xc2>
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 802491c:	f04f 080b 	mov.w	r8, #11
 8024920:	e7a7      	b.n	8024872 <lv_fs_read+0xce>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8024922:	f04f 0809 	mov.w	r8, #9
 8024926:	e7a4      	b.n	8024872 <lv_fs_read+0xce>

08024928 <lv_fs_seek>:
{
 8024928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802492a:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 802492c:	6840      	ldr	r0, [r0, #4]
{
 802492e:	4613      	mov	r3, r2
    if(file_p->drv == NULL) {
 8024930:	2800      	cmp	r0, #0
 8024932:	d037      	beq.n	80249a4 <lv_fs_seek+0x7c>
    if(file_p->drv->seek_cb == NULL) {
 8024934:	6985      	ldr	r5, [r0, #24]
 8024936:	2d00      	cmp	r5, #0
 8024938:	d036      	beq.n	80249a8 <lv_fs_seek+0x80>
    if(file_p->drv->cache_size) {
 802493a:	8842      	ldrh	r2, [r0, #2]
 802493c:	2a00      	cmp	r2, #0
 802493e:	d02f      	beq.n	80249a0 <lv_fs_seek+0x78>
        switch(whence) {
 8024940:	2b01      	cmp	r3, #1
 8024942:	d018      	beq.n	8024976 <lv_fs_seek+0x4e>
 8024944:	2b02      	cmp	r3, #2
 8024946:	d01b      	beq.n	8024980 <lv_fs_seek+0x58>
 8024948:	b113      	cbz	r3, 8024950 <lv_fs_seek+0x28>
        return LV_FS_RES_NOT_IMP;
 802494a:	2000      	movs	r0, #0
}
 802494c:	b003      	add	sp, #12
 802494e:	bd30      	pop	{r4, r5, pc}
                    file_p->cache->file_position = pos;
 8024950:	68a3      	ldr	r3, [r4, #8]
 8024952:	6099      	str	r1, [r3, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8024954:	68a3      	ldr	r3, [r4, #8]
 8024956:	689a      	ldr	r2, [r3, #8]
 8024958:	6819      	ldr	r1, [r3, #0]
 802495a:	428a      	cmp	r2, r1
 802495c:	d302      	bcc.n	8024964 <lv_fs_seek+0x3c>
 802495e:	685b      	ldr	r3, [r3, #4]
 8024960:	429a      	cmp	r2, r3
 8024962:	d9f2      	bls.n	802494a <lv_fs_seek+0x22>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8024964:	6860      	ldr	r0, [r4, #4]
 8024966:	2300      	movs	r3, #0
 8024968:	6985      	ldr	r5, [r0, #24]
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 802496a:	6821      	ldr	r1, [r4, #0]
 802496c:	46ac      	mov	ip, r5
}
 802496e:	b003      	add	sp, #12
 8024970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8024974:	4760      	bx	ip
                    file_p->cache->file_position += pos;
 8024976:	68a2      	ldr	r2, [r4, #8]
 8024978:	6893      	ldr	r3, [r2, #8]
 802497a:	440b      	add	r3, r1
 802497c:	6093      	str	r3, [r2, #8]
 802497e:	e7e9      	b.n	8024954 <lv_fs_seek+0x2c>
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8024980:	460a      	mov	r2, r1
 8024982:	6821      	ldr	r1, [r4, #0]
 8024984:	47a8      	blx	r5
                    if(res == LV_FS_RES_OK) {
 8024986:	2800      	cmp	r0, #0
 8024988:	d1e0      	bne.n	802494c <lv_fs_seek+0x24>
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 802498a:	6860      	ldr	r0, [r4, #4]
 802498c:	aa01      	add	r2, sp, #4
 802498e:	6821      	ldr	r1, [r4, #0]
 8024990:	69c3      	ldr	r3, [r0, #28]
 8024992:	4798      	blx	r3
                        if(res == LV_FS_RES_OK) {
 8024994:	2800      	cmp	r0, #0
 8024996:	d1d9      	bne.n	802494c <lv_fs_seek+0x24>
                            file_p->cache->file_position = tmp_position;
 8024998:	68a3      	ldr	r3, [r4, #8]
 802499a:	9a01      	ldr	r2, [sp, #4]
 802499c:	609a      	str	r2, [r3, #8]
 802499e:	e7d5      	b.n	802494c <lv_fs_seek+0x24>
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 80249a0:	460a      	mov	r2, r1
 80249a2:	e7e2      	b.n	802496a <lv_fs_seek+0x42>
        return LV_FS_RES_INV_PARAM;
 80249a4:	200b      	movs	r0, #11
 80249a6:	e7d1      	b.n	802494c <lv_fs_seek+0x24>
        return LV_FS_RES_NOT_IMP;
 80249a8:	2009      	movs	r0, #9
 80249aa:	e7cf      	b.n	802494c <lv_fs_seek+0x24>

080249ac <lv_fs_open>:
{
 80249ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80249ae:	4606      	mov	r6, r0
 80249b0:	4617      	mov	r7, r2
    if(path == NULL) {
 80249b2:	460c      	mov	r4, r1
 80249b4:	2900      	cmp	r1, #0
 80249b6:	d034      	beq.n	8024a22 <lv_fs_open+0x76>
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 80249b8:	7808      	ldrb	r0, [r1, #0]
 80249ba:	f7ed fe47 	bl	801264c <lv_fs_get_drv>
    if(drv == NULL) {
 80249be:	4605      	mov	r5, r0
 80249c0:	2800      	cmp	r0, #0
 80249c2:	d030      	beq.n	8024a26 <lv_fs_open+0x7a>
    if(drv->ready_cb) {
 80249c4:	6843      	ldr	r3, [r0, #4]
 80249c6:	b91b      	cbnz	r3, 80249d0 <lv_fs_open+0x24>
    if(drv->open_cb == NULL) {
 80249c8:	68ab      	ldr	r3, [r5, #8]
 80249ca:	b933      	cbnz	r3, 80249da <lv_fs_open+0x2e>
        return LV_FS_RES_NOT_IMP;
 80249cc:	2009      	movs	r0, #9
 80249ce:	e003      	b.n	80249d8 <lv_fs_open+0x2c>
        if(drv->ready_cb(drv) == false) {
 80249d0:	4798      	blx	r3
 80249d2:	2800      	cmp	r0, #0
 80249d4:	d1f8      	bne.n	80249c8 <lv_fs_open+0x1c>
            return LV_FS_RES_HW_ERR;
 80249d6:	2001      	movs	r0, #1
}
 80249d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
    path++; /*Ignore the driver letter*/
    if(*path == ':') path++;
 80249da:	7862      	ldrb	r2, [r4, #1]
    void * file_d = drv->open_cb(drv, real_path, mode);
 80249dc:	4628      	mov	r0, r5
    if(*path == ':') path++;
 80249de:	2a3a      	cmp	r2, #58	; 0x3a
    void * file_d = drv->open_cb(drv, real_path, mode);
 80249e0:	463a      	mov	r2, r7
    path++; /*Ignore the driver letter*/
 80249e2:	bf14      	ite	ne
 80249e4:	1c61      	addne	r1, r4, #1
    if(*path == ':') path++;
 80249e6:	1ca1      	addeq	r1, r4, #2
    void * file_d = drv->open_cb(drv, real_path, mode);
 80249e8:	4798      	blx	r3
    if(file_d == NULL || file_d == (void *)(-1)) {
 80249ea:	1e43      	subs	r3, r0, #1
 80249ec:	3303      	adds	r3, #3
 80249ee:	d81c      	bhi.n	8024a2a <lv_fs_open+0x7e>
    file_p->file_d = file_d;
 80249f0:	e9c6 0500 	strd	r0, r5, [r6]
    if(drv->cache_size) {
 80249f4:	886b      	ldrh	r3, [r5, #2]
 80249f6:	b90b      	cbnz	r3, 80249fc <lv_fs_open+0x50>
    return LV_FS_RES_OK;
 80249f8:	2000      	movs	r0, #0
 80249fa:	e7ed      	b.n	80249d8 <lv_fs_open+0x2c>
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 80249fc:	2010      	movs	r0, #16
 80249fe:	f7ed fe8b 	bl	8012718 <lv_mem_alloc>
 8024a02:	60b0      	str	r0, [r6, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 8024a04:	b900      	cbnz	r0, 8024a08 <lv_fs_open+0x5c>
 8024a06:	e7fe      	b.n	8024a06 <lv_fs_open+0x5a>
    memset(dst, 0x00, len);
 8024a08:	2210      	movs	r2, #16
 8024a0a:	2100      	movs	r1, #0
 8024a0c:	f7f5 febc 	bl	801a788 <memset>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 8024a10:	68b3      	ldr	r3, [r6, #8]
 8024a12:	f04f 32ff 	mov.w	r2, #4294967295
 8024a16:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 8024a18:	f06f 0201 	mvn.w	r2, #1
 8024a1c:	68b3      	ldr	r3, [r6, #8]
 8024a1e:	605a      	str	r2, [r3, #4]
 8024a20:	e7ea      	b.n	80249f8 <lv_fs_open+0x4c>
        return LV_FS_RES_INV_PARAM;
 8024a22:	200b      	movs	r0, #11
 8024a24:	e7d8      	b.n	80249d8 <lv_fs_open+0x2c>
        return LV_FS_RES_NOT_EX;
 8024a26:	2003      	movs	r0, #3
 8024a28:	e7d6      	b.n	80249d8 <lv_fs_open+0x2c>
        return LV_FS_RES_UNKNOWN;
 8024a2a:	200c      	movs	r0, #12
 8024a2c:	e7d4      	b.n	80249d8 <lv_fs_open+0x2c>

08024a2e <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8024a2e:	b109      	cbz	r1, 8024a34 <node_set_prev+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 8024a30:	6803      	ldr	r3, [r0, #0]
 8024a32:	50ca      	str	r2, [r1, r3]
}
 8024a34:	4770      	bx	lr

08024a36 <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8024a36:	b111      	cbz	r1, 8024a3e <node_set_next+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 8024a38:	6803      	ldr	r3, [r0, #0]
 8024a3a:	4419      	add	r1, r3
 8024a3c:	604a      	str	r2, [r1, #4]
}
 8024a3e:	4770      	bx	lr

08024a40 <_lv_ll_init>:
    node_size = (node_size + 3) & (~0x3);
 8024a40:	3103      	adds	r1, #3
    ll_p->head = NULL;
 8024a42:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
 8024a44:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
 8024a48:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
 8024a4c:	6001      	str	r1, [r0, #0]
}
 8024a4e:	4770      	bx	lr

08024a50 <_lv_ll_ins_head>:
{
 8024a50:	b538      	push	{r3, r4, r5, lr}
 8024a52:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8024a54:	6800      	ldr	r0, [r0, #0]
 8024a56:	3008      	adds	r0, #8
 8024a58:	f7ed fe5e 	bl	8012718 <lv_mem_alloc>
    if(n_new != NULL) {
 8024a5c:	4605      	mov	r5, r0
 8024a5e:	b180      	cbz	r0, 8024a82 <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8024a60:	4601      	mov	r1, r0
 8024a62:	2200      	movs	r2, #0
 8024a64:	4620      	mov	r0, r4
 8024a66:	f7ff ffe2 	bl	8024a2e <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8024a6a:	6862      	ldr	r2, [r4, #4]
 8024a6c:	f7ff ffe3 	bl	8024a36 <node_set_next>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8024a70:	6861      	ldr	r1, [r4, #4]
 8024a72:	b111      	cbz	r1, 8024a7a <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
 8024a74:	462a      	mov	r2, r5
 8024a76:	f7ff ffda 	bl	8024a2e <node_set_prev>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8024a7a:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8024a7c:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8024a7e:	b903      	cbnz	r3, 8024a82 <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
 8024a80:	60a5      	str	r5, [r4, #8]
}
 8024a82:	4628      	mov	r0, r5
 8024a84:	bd38      	pop	{r3, r4, r5, pc}

08024a86 <_lv_ll_ins_tail>:
{
 8024a86:	b538      	push	{r3, r4, r5, lr}
 8024a88:	4605      	mov	r5, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8024a8a:	6800      	ldr	r0, [r0, #0]
 8024a8c:	3008      	adds	r0, #8
 8024a8e:	f7ed fe43 	bl	8012718 <lv_mem_alloc>
    if(n_new != NULL) {
 8024a92:	4604      	mov	r4, r0
 8024a94:	b188      	cbz	r0, 8024aba <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8024a96:	4601      	mov	r1, r0
 8024a98:	2200      	movs	r2, #0
 8024a9a:	4628      	mov	r0, r5
 8024a9c:	f7ff ffcb 	bl	8024a36 <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 8024aa0:	4621      	mov	r1, r4
 8024aa2:	68aa      	ldr	r2, [r5, #8]
 8024aa4:	f7ff ffc3 	bl	8024a2e <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8024aa8:	68a9      	ldr	r1, [r5, #8]
 8024aaa:	b111      	cbz	r1, 8024ab2 <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
 8024aac:	4622      	mov	r2, r4
 8024aae:	f7ff ffc2 	bl	8024a36 <node_set_next>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8024ab2:	686b      	ldr	r3, [r5, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8024ab4:	60ac      	str	r4, [r5, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8024ab6:	b903      	cbnz	r3, 8024aba <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
 8024ab8:	606c      	str	r4, [r5, #4]
}
 8024aba:	4620      	mov	r0, r4
 8024abc:	bd38      	pop	{r3, r4, r5, pc}

08024abe <_lv_ll_remove>:
{
 8024abe:	b538      	push	{r3, r4, r5, lr}
 8024ac0:	460b      	mov	r3, r1
    if(ll_p == NULL) return;
 8024ac2:	b140      	cbz	r0, 8024ad6 <_lv_ll_remove+0x18>
    if(_lv_ll_get_head(ll_p) == node_p) {
 8024ac4:	e9d0 1400 	ldrd	r1, r4, [r0]
 8024ac8:	42a3      	cmp	r3, r4
 8024aca:	d10a      	bne.n	8024ae2 <_lv_ll_remove+0x24>
    return *((lv_ll_node_t **)n_act_d);
 8024acc:	440b      	add	r3, r1
 8024ace:	6859      	ldr	r1, [r3, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8024ad0:	6041      	str	r1, [r0, #4]
        if(ll_p->head == NULL) {
 8024ad2:	b909      	cbnz	r1, 8024ad8 <_lv_ll_remove+0x1a>
            ll_p->tail = NULL;
 8024ad4:	6081      	str	r1, [r0, #8]
}
 8024ad6:	bd38      	pop	{r3, r4, r5, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 8024ad8:	2200      	movs	r2, #0
}
 8024ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        node_set_prev(ll_p, n_next, n_prev);
 8024ade:	f7ff bfa6 	b.w	8024a2e <node_set_prev>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8024ae2:	6885      	ldr	r5, [r0, #8]
    return *((lv_ll_node_t **)n_act_d);
 8024ae4:	585c      	ldr	r4, [r3, r1]
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8024ae6:	42ab      	cmp	r3, r5
 8024ae8:	d109      	bne.n	8024afe <_lv_ll_remove+0x40>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8024aea:	6084      	str	r4, [r0, #8]
        if(ll_p->tail == NULL) {
 8024aec:	b90c      	cbnz	r4, 8024af2 <_lv_ll_remove+0x34>
            ll_p->head = NULL;
 8024aee:	6044      	str	r4, [r0, #4]
 8024af0:	e7f1      	b.n	8024ad6 <_lv_ll_remove+0x18>
            node_set_next(ll_p, ll_p->tail, NULL);
 8024af2:	4621      	mov	r1, r4
 8024af4:	2200      	movs	r2, #0
}
 8024af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 8024afa:	f7ff bf9c 	b.w	8024a36 <node_set_next>
    return *((lv_ll_node_t **)n_act_d);
 8024afe:	440b      	add	r3, r1
        node_set_next(ll_p, n_prev, n_next);
 8024b00:	4621      	mov	r1, r4
    return *((lv_ll_node_t **)n_act_d);
 8024b02:	685d      	ldr	r5, [r3, #4]
        node_set_next(ll_p, n_prev, n_next);
 8024b04:	462a      	mov	r2, r5
 8024b06:	f7ff ff96 	bl	8024a36 <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 8024b0a:	4622      	mov	r2, r4
 8024b0c:	4629      	mov	r1, r5
 8024b0e:	e7e4      	b.n	8024ada <_lv_ll_remove+0x1c>

08024b10 <_lv_ll_clear>:
{
 8024b10:	b570      	push	{r4, r5, r6, lr}
    if(ll_p == NULL) return NULL;
 8024b12:	4604      	mov	r4, r0
 8024b14:	b108      	cbz	r0, 8024b1a <_lv_ll_clear+0xa>
    return ll_p->head;
 8024b16:	6845      	ldr	r5, [r0, #4]
    while(i != NULL) {
 8024b18:	b905      	cbnz	r5, 8024b1c <_lv_ll_clear+0xc>
}
 8024b1a:	bd70      	pop	{r4, r5, r6, pc}
    return *((lv_ll_node_t **)n_act_d);
 8024b1c:	6823      	ldr	r3, [r4, #0]
        _lv_ll_remove(ll_p, i);
 8024b1e:	4629      	mov	r1, r5
 8024b20:	4620      	mov	r0, r4
    return *((lv_ll_node_t **)n_act_d);
 8024b22:	442b      	add	r3, r5
 8024b24:	685e      	ldr	r6, [r3, #4]
        _lv_ll_remove(ll_p, i);
 8024b26:	f7ff ffca 	bl	8024abe <_lv_ll_remove>
        lv_mem_free(i);
 8024b2a:	4628      	mov	r0, r5
 8024b2c:	f7ed fe12 	bl	8012754 <lv_mem_free>
        i = i_next;
 8024b30:	4635      	mov	r5, r6
 8024b32:	e7f1      	b.n	8024b18 <_lv_ll_clear+0x8>

08024b34 <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 8024b34:	b100      	cbz	r0, 8024b38 <_lv_ll_get_head+0x4>
    return ll_p->head;
 8024b36:	6840      	ldr	r0, [r0, #4]
}
 8024b38:	4770      	bx	lr

08024b3a <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 8024b3a:	b100      	cbz	r0, 8024b3e <_lv_ll_get_tail+0x4>
    return ll_p->tail;
 8024b3c:	6880      	ldr	r0, [r0, #8]
}
 8024b3e:	4770      	bx	lr

08024b40 <_lv_ll_get_next>:
    return *((lv_ll_node_t **)n_act_d);
 8024b40:	6803      	ldr	r3, [r0, #0]
 8024b42:	4419      	add	r1, r3
}
 8024b44:	6848      	ldr	r0, [r1, #4]
 8024b46:	4770      	bx	lr

08024b48 <_lv_ll_get_prev>:
    return *((lv_ll_node_t **)n_act_d);
 8024b48:	6803      	ldr	r3, [r0, #0]
}
 8024b4a:	58c8      	ldr	r0, [r1, r3]
 8024b4c:	4770      	bx	lr

08024b4e <_lv_ll_get_len>:
    if(ll_p == NULL) return NULL;
 8024b4e:	4603      	mov	r3, r0
 8024b50:	b140      	cbz	r0, 8024b64 <_lv_ll_get_len+0x16>
    return ll_p->head;
 8024b52:	6842      	ldr	r2, [r0, #4]
 8024b54:	2000      	movs	r0, #0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 8024b56:	b902      	cbnz	r2, 8024b5a <_lv_ll_get_len+0xc>
 8024b58:	4770      	bx	lr
    return *((lv_ll_node_t **)n_act_d);
 8024b5a:	6819      	ldr	r1, [r3, #0]
        len++;
 8024b5c:	3001      	adds	r0, #1
    return *((lv_ll_node_t **)n_act_d);
 8024b5e:	440a      	add	r2, r1
 8024b60:	6852      	ldr	r2, [r2, #4]
 8024b62:	e7f8      	b.n	8024b56 <_lv_ll_get_len+0x8>
}
 8024b64:	4770      	bx	lr

08024b66 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 8024b66:	b130      	cbz	r0, 8024b76 <_lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8024b68:	6843      	ldr	r3, [r0, #4]
 8024b6a:	b933      	cbnz	r3, 8024b7a <_lv_ll_is_empty+0x14>
 8024b6c:	6880      	ldr	r0, [r0, #8]
 8024b6e:	fab0 f080 	clz	r0, r0
 8024b72:	0940      	lsrs	r0, r0, #5
 8024b74:	4770      	bx	lr
    if(ll_p == NULL) return true;
 8024b76:	2001      	movs	r0, #1
 8024b78:	4770      	bx	lr
    return false;
 8024b7a:	2000      	movs	r0, #0
}
 8024b7c:	4770      	bx	lr

08024b7e <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 8024b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t t_rem  = 1024 - t;
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
    uint32_t t2     = (t * t) >> 10;
 8024b80:	fb00 f600 	mul.w	r6, r0, r0
    uint32_t t_rem  = 1024 - t;
 8024b84:	f5c0 6480 	rsb	r4, r0, #1024	; 0x400
    uint32_t t3     = (t2 * t) >> 10;

    uint32_t v1 = (t_rem3 * u0) >> 10;
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8024b88:	4342      	muls	r2, r0
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
    uint32_t v4 = (t3 * u3) >> 10;
 8024b8a:	9f05      	ldr	r7, [sp, #20]
    uint32_t t2     = (t * t) >> 10;
 8024b8c:	0ab6      	lsrs	r6, r6, #10
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8024b8e:	fb04 f504 	mul.w	r5, r4, r4
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8024b92:	4363      	muls	r3, r4
    uint32_t t3     = (t2 * t) >> 10;
 8024b94:	4370      	muls	r0, r6
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8024b96:	0aad      	lsrs	r5, r5, #10
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8024b98:	4373      	muls	r3, r6
    uint32_t t3     = (t2 * t) >> 10;
 8024b9a:	0a80      	lsrs	r0, r0, #10
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8024b9c:	436a      	muls	r2, r5
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8024b9e:	436c      	muls	r4, r5
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8024ba0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    uint32_t v4 = (t3 * u3) >> 10;
 8024ba4:	4378      	muls	r0, r7
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8024ba6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8024baa:	0aa4      	lsrs	r4, r4, #10
    uint32_t v4 = (t3 * u3) >> 10;
 8024bac:	0a80      	lsrs	r0, r0, #10
    uint32_t v1 = (t_rem3 * u0) >> 10;
 8024bae:	434c      	muls	r4, r1

    return v1 + v2 + v3 + v4;
 8024bb0:	eb00 5012 	add.w	r0, r0, r2, lsr #20
 8024bb4:	eb00 5013 	add.w	r0, r0, r3, lsr #20
}
 8024bb8:	eb00 2094 	add.w	r0, r0, r4, lsr #10
 8024bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024bbe <lv_atan2>:
    unsigned int ux;
    unsigned int uy;

    // Save the sign flags then remove signs and get XY as unsigned ints
    negflag = 0;
    if(x < 0) {
 8024bbe:	2800      	cmp	r0, #0
        negflag += 0x01;    // x flag bit
        x = (0 - x);        // is now +
 8024bc0:	f04f 022d 	mov.w	r2, #45	; 0x2d
 8024bc4:	bfba      	itte	lt
 8024bc6:	4240      	neglt	r0, r0
        negflag += 0x01;    // x flag bit
 8024bc8:	2301      	movlt	r3, #1
    negflag = 0;
 8024bca:	2300      	movge	r3, #0
    }
    ux = x;                // copy to unsigned var before multiply
    if(y < 0) {
 8024bcc:	2900      	cmp	r1, #0
        negflag += 0x02;    // y flag bit
        y = (0 - y);        // is now +
 8024bce:	bfbe      	ittt	lt
 8024bd0:	4249      	neglt	r1, r1
        negflag += 0x02;    // y flag bit
 8024bd2:	3302      	addlt	r3, #2
 8024bd4:	b2db      	uxtblt	r3, r3
    }
    uy = y;                // copy to unsigned var before multiply

    // 1. Calc the scaled "degrees"
    if(ux > uy) {
 8024bd6:	4288      	cmp	r0, r1
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 8024bd8:	bf85      	ittet	hi
 8024bda:	4351      	mulhi	r1, r2
        negflag += 0x10;    // octant flag bit
 8024bdc:	3310      	addhi	r3, #16
    }
    else {
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 8024bde:	4350      	mulls	r0, r2
        negflag += 0x10;    // octant flag bit
 8024be0:	b2db      	uxtbhi	r3, r3
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 8024be2:	bf8c      	ite	hi
 8024be4:	fbb1 f1f0 	udivhi	r1, r1, r0
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 8024be8:	fbb0 f1f1 	udivls	r1, r0, r1
    }

    // 2. Compensate for the 4 degree error curve
    comp = 0;
    tempdegree = degree;    // use an unsigned char for speed!
 8024bec:	b2ca      	uxtb	r2, r1
    if(tempdegree > 22) {    // if top half of range
 8024bee:	2a16      	cmp	r2, #22
 8024bf0:	d916      	bls.n	8024c20 <lv_atan2+0x62>
        if(tempdegree <= 44) comp++;
 8024bf2:	2a2c      	cmp	r2, #44	; 0x2c
 8024bf4:	d81f      	bhi.n	8024c36 <lv_atan2+0x78>
        if(tempdegree <= 41) comp++;
 8024bf6:	2a29      	cmp	r2, #41	; 0x29
 8024bf8:	d81f      	bhi.n	8024c3a <lv_atan2+0x7c>
        if(tempdegree <= 37) comp++;
 8024bfa:	2a25      	cmp	r2, #37	; 0x25
 8024bfc:	d81f      	bhi.n	8024c3e <lv_atan2+0x80>
        if(tempdegree <= 32) comp++;  // max is 4 degrees compensated
 8024bfe:	2a20      	cmp	r2, #32
 8024c00:	bf8c      	ite	hi
 8024c02:	2003      	movhi	r0, #3
 8024c04:	2004      	movls	r0, #4
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
    }
    degree += comp;   // degree is now accurate to +/- 1 degree!

    // Invert degree if it was X>Y octant, makes 0-45 into 90-45
    if(negflag & 0x10) degree = (90 - degree);
 8024c06:	06da      	lsls	r2, r3, #27
    degree += comp;   // degree is now accurate to +/- 1 degree!
 8024c08:	4408      	add	r0, r1
    if(negflag & 0x10) degree = (90 - degree);
 8024c0a:	f003 0201 	and.w	r2, r3, #1
 8024c0e:	bf48      	it	mi
 8024c10:	f1c0 005a 	rsbmi	r0, r0, #90	; 0x5a

    // 3. Degree is now 0-90 range for this quadrant,
    // need to invert it for whichever quadrant it was in
    if(negflag & 0x02) { // if -Y
 8024c14:	079b      	lsls	r3, r3, #30
 8024c16:	d517      	bpl.n	8024c48 <lv_atan2+0x8a>
        if(negflag & 0x01)   // if -Y -X
 8024c18:	b19a      	cbz	r2, 8024c42 <lv_atan2+0x84>
            degree = (180 + degree);
 8024c1a:	30b4      	adds	r0, #180	; 0xb4
    else {   // else is +Y
        if(negflag & 0x01)   // if +Y -X
            degree = (360 - degree);
    }
    return degree;
}
 8024c1c:	b280      	uxth	r0, r0
 8024c1e:	4770      	bx	lr
        if(tempdegree >= 2) comp++;
 8024c20:	2a01      	cmp	r2, #1
 8024c22:	d908      	bls.n	8024c36 <lv_atan2+0x78>
        if(tempdegree >= 6) comp++;
 8024c24:	2a05      	cmp	r2, #5
 8024c26:	d908      	bls.n	8024c3a <lv_atan2+0x7c>
        if(tempdegree >= 10) comp++;
 8024c28:	2a09      	cmp	r2, #9
 8024c2a:	d908      	bls.n	8024c3e <lv_atan2+0x80>
        if(tempdegree <= 32) comp++;  // max is 4 degrees compensated
 8024c2c:	2a0f      	cmp	r2, #15
 8024c2e:	bf34      	ite	cc
 8024c30:	2003      	movcc	r0, #3
 8024c32:	2004      	movcs	r0, #4
 8024c34:	e7e7      	b.n	8024c06 <lv_atan2+0x48>
    comp = 0;
 8024c36:	2000      	movs	r0, #0
 8024c38:	e7e5      	b.n	8024c06 <lv_atan2+0x48>
        if(tempdegree <= 44) comp++;
 8024c3a:	2001      	movs	r0, #1
 8024c3c:	e7e3      	b.n	8024c06 <lv_atan2+0x48>
        if(tempdegree <= 41) comp++;
 8024c3e:	2002      	movs	r0, #2
 8024c40:	e7e1      	b.n	8024c06 <lv_atan2+0x48>
            degree = (180 - degree);
 8024c42:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8024c46:	e7e9      	b.n	8024c1c <lv_atan2+0x5e>
        if(negflag & 0x01)   // if +Y -X
 8024c48:	2a00      	cmp	r2, #0
 8024c4a:	d0e7      	beq.n	8024c1c <lv_atan2+0x5e>
            degree = (360 - degree);
 8024c4c:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
 8024c50:	e7e4      	b.n	8024c1c <lv_atan2+0x5e>

08024c52 <lv_pow>:
 * @param base
 * @param power
 * @return base raised to the power exponent
 */
int64_t lv_pow(int64_t base, int8_t exp)
{
 8024c52:	4603      	mov	r3, r0
    int64_t result = 1;
 8024c54:	2001      	movs	r0, #1
{
 8024c56:	b530      	push	{r4, r5, lr}
 8024c58:	460c      	mov	r4, r1
    int64_t result = 1;
 8024c5a:	2100      	movs	r1, #0
    while(exp) {
 8024c5c:	b902      	cbnz	r2, 8024c60 <lv_pow+0xe>
        exp >>= 1;
        base *= base;
    }

    return result;
}
 8024c5e:	bd30      	pop	{r4, r5, pc}
        if(exp & 1)
 8024c60:	07d5      	lsls	r5, r2, #31
        exp >>= 1;
 8024c62:	ea4f 0262 	mov.w	r2, r2, asr #1
            result *= base;
 8024c66:	bf41      	itttt	mi
 8024c68:	fb00 f504 	mulmi.w	r5, r0, r4
 8024c6c:	fb03 5501 	mlami	r5, r3, r1, r5
 8024c70:	fba0 0103 	umullmi	r0, r1, r0, r3
 8024c74:	1949      	addmi	r1, r1, r5
        base *= base;
 8024c76:	fb03 f504 	mul.w	r5, r3, r4
 8024c7a:	fba3 3403 	umull	r3, r4, r3, r3
 8024c7e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8024c82:	e7eb      	b.n	8024c5c <lv_pow+0xa>

08024c84 <lv_map>:
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
    if(max_in >= min_in && x >= max_in) return max_out;
 8024c84:	428a      	cmp	r2, r1
{
 8024c86:	b510      	push	{r4, lr}
 8024c88:	4604      	mov	r4, r0
 8024c8a:	4618      	mov	r0, r3
 8024c8c:	9b02      	ldr	r3, [sp, #8]
    if(max_in >= min_in && x >= max_in) return max_out;
 8024c8e:	db04      	blt.n	8024c9a <lv_map+0x16>
 8024c90:	42a2      	cmp	r2, r4
 8024c92:	dd0e      	ble.n	8024cb2 <lv_map+0x2e>
    if(max_in >= min_in && x <= min_in) return min_out;
 8024c94:	42a1      	cmp	r1, r4
 8024c96:	db04      	blt.n	8024ca2 <lv_map+0x1e>

    int32_t delta_in = max_in - min_in;
    int32_t delta_out = max_out - min_out;

    return ((x - min_in) * delta_out) / delta_in + min_out;
}
 8024c98:	bd10      	pop	{r4, pc}
    if(max_in <= min_in && x <= max_in) return max_out;
 8024c9a:	42a2      	cmp	r2, r4
 8024c9c:	da09      	bge.n	8024cb2 <lv_map+0x2e>
    if(max_in <= min_in && x >= min_in) return min_out;
 8024c9e:	42a1      	cmp	r1, r4
 8024ca0:	ddfa      	ble.n	8024c98 <lv_map+0x14>
    int32_t delta_out = max_out - min_out;
 8024ca2:	1a1b      	subs	r3, r3, r0
    return ((x - min_in) * delta_out) / delta_in + min_out;
 8024ca4:	1a64      	subs	r4, r4, r1
    int32_t delta_in = max_in - min_in;
 8024ca6:	1a52      	subs	r2, r2, r1
    return ((x - min_in) * delta_out) / delta_in + min_out;
 8024ca8:	435c      	muls	r4, r3
 8024caa:	fb94 f4f2 	sdiv	r4, r4, r2
 8024cae:	4420      	add	r0, r4
 8024cb0:	e7f2      	b.n	8024c98 <lv_map+0x14>
    if(max_in >= min_in && x >= max_in) return max_out;
 8024cb2:	4618      	mov	r0, r3
 8024cb4:	e7f0      	b.n	8024c98 <lv_map+0x14>

08024cb6 <lv_style_set_prop_helper>:
 **********************/

static void lv_style_set_prop_helper(lv_style_prop_t prop, lv_style_value_t value, uint16_t * prop_storage,
                                     lv_style_value_t * value_storage)
{
    *prop_storage = prop;
 8024cb6:	8010      	strh	r0, [r2, #0]
    *value_storage = value;
 8024cb8:	6019      	str	r1, [r3, #0]
}
 8024cba:	4770      	bx	lr

08024cbc <lv_style_init>:
 8024cbc:	2208      	movs	r2, #8
 8024cbe:	2100      	movs	r1, #0
 8024cc0:	f7f5 bd62 	b.w	801a788 <memset>

08024cc4 <lv_style_reset>:
{
 8024cc4:	b510      	push	{r4, lr}
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024cca:	8882      	ldrh	r2, [r0, #4]
{
 8024ccc:	4604      	mov	r4, r0
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024cce:	429a      	cmp	r2, r3
 8024cd0:	d00c      	beq.n	8024cec <lv_style_reset+0x28>
    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8024cd2:	79c3      	ldrb	r3, [r0, #7]
 8024cd4:	2b01      	cmp	r3, #1
 8024cd6:	d902      	bls.n	8024cde <lv_style_reset+0x1a>
 8024cd8:	6800      	ldr	r0, [r0, #0]
 8024cda:	f7ed fd3b 	bl	8012754 <lv_mem_free>
 8024cde:	4620      	mov	r0, r4
 8024ce0:	2208      	movs	r2, #8
 8024ce2:	2100      	movs	r1, #0
}
 8024ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024ce8:	f7f5 bd4e 	b.w	801a788 <memset>
 8024cec:	bd10      	pop	{r4, pc}

08024cee <lv_style_remove_prop>:
{
 8024cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024cf4:	8883      	ldrh	r3, [r0, #4]
{
 8024cf6:	4604      	mov	r4, r0
 8024cf8:	460f      	mov	r7, r1
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024cfa:	4293      	cmp	r3, r2
 8024cfc:	d051      	beq.n	8024da2 <lv_style_remove_prop+0xb4>
    if(style->prop_cnt == 0)  return false;
 8024cfe:	79c0      	ldrb	r0, [r0, #7]
 8024d00:	2800      	cmp	r0, #0
 8024d02:	d04e      	beq.n	8024da2 <lv_style_remove_prop+0xb4>
    if(style->prop_cnt == 1) {
 8024d04:	2801      	cmp	r0, #1
 8024d06:	d108      	bne.n	8024d1a <lv_style_remove_prop+0x2c>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8024d08:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8024d0c:	428b      	cmp	r3, r1
 8024d0e:	d148      	bne.n	8024da2 <lv_style_remove_prop+0xb4>
            style->prop1 = LV_STYLE_PROP_INV;
 8024d10:	2300      	movs	r3, #0
 8024d12:	80a3      	strh	r3, [r4, #4]
            style->prop_cnt = 0;
 8024d14:	71e3      	strb	r3, [r4, #7]
            return true;
 8024d16:	2001      	movs	r0, #1
}
 8024d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024d1a:	6826      	ldr	r6, [r4, #0]
 8024d1c:	b201      	sxth	r1, r0
    for(i = 0; i < style->prop_cnt; i++) {
 8024d1e:	2300      	movs	r3, #0
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024d20:	eb06 0580 	add.w	r5, r6, r0, lsl #2
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 8024d24:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8024d28:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8024d2c:	42ba      	cmp	r2, r7
 8024d2e:	d135      	bne.n	8024d9c <lv_style_remove_prop+0xae>
            if(style->prop_cnt == 2) {
 8024d30:	2802      	cmp	r0, #2
 8024d32:	d10f      	bne.n	8024d54 <lv_style_remove_prop+0x66>
                style->prop_cnt = 1;
 8024d34:	2201      	movs	r2, #1
 8024d36:	71e2      	strb	r2, [r4, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8024d38:	b93b      	cbnz	r3, 8024d4a <lv_style_remove_prop+0x5c>
 8024d3a:	886b      	ldrh	r3, [r5, #2]
 8024d3c:	80a3      	strh	r3, [r4, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8024d3e:	6873      	ldr	r3, [r6, #4]
 8024d40:	6023      	str	r3, [r4, #0]
            lv_mem_free(old_values);
 8024d42:	4630      	mov	r0, r6
 8024d44:	f7ed fd06 	bl	8012754 <lv_mem_free>
            return true;
 8024d48:	e7e5      	b.n	8024d16 <lv_style_remove_prop+0x28>
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8024d4a:	f836 3021 	ldrh.w	r3, [r6, r1, lsl #2]
 8024d4e:	80a3      	strh	r3, [r4, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8024d50:	6833      	ldr	r3, [r6, #0]
 8024d52:	e7f5      	b.n	8024d40 <lv_style_remove_prop+0x52>
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8024d54:	3801      	subs	r0, #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 8024d56:	2306      	movs	r3, #6
 8024d58:	4358      	muls	r0, r3
 8024d5a:	f7ed fcdd 	bl	8012718 <lv_mem_alloc>
                if(new_values_and_props == NULL) return false;
 8024d5e:	b300      	cbz	r0, 8024da2 <lv_style_remove_prop+0xb4>
                style->prop_cnt--;
 8024d60:	79e3      	ldrb	r3, [r4, #7]
                for(i = j = 0; j <= style->prop_cnt;
 8024d62:	2200      	movs	r2, #0
 8024d64:	3d02      	subs	r5, #2
                style->v_p.values_and_props = new_values_and_props;
 8024d66:	6020      	str	r0, [r4, #0]
                style->prop_cnt--;
 8024d68:	3b01      	subs	r3, #1
                for(i = j = 0; j <= style->prop_cnt;
 8024d6a:	4611      	mov	r1, r2
                style->prop_cnt--;
 8024d6c:	b2db      	uxtb	r3, r3
 8024d6e:	71e3      	strb	r3, [r4, #7]
                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024d70:	009b      	lsls	r3, r3, #2
                    if(old_props[j] != prop) {
 8024d72:	f835 cf02 	ldrh.w	ip, [r5, #2]!
 8024d76:	45bc      	cmp	ip, r7
 8024d78:	d00a      	beq.n	8024d90 <lv_style_remove_prop+0xa2>
                        new_values[i] = old_values[j];
 8024d7a:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 8024d7e:	f840 c021 	str.w	ip, [r0, r1, lsl #2]
                        new_props[i++] = old_props[j];
 8024d82:	eb00 0c41 	add.w	ip, r0, r1, lsl #1
 8024d86:	f8b5 e000 	ldrh.w	lr, [r5]
 8024d8a:	3101      	adds	r1, #1
 8024d8c:	f82c e003 	strh.w	lr, [ip, r3]
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8024d90:	3201      	adds	r2, #1
                for(i = j = 0; j <= style->prop_cnt;
 8024d92:	f894 c007 	ldrb.w	ip, [r4, #7]
 8024d96:	4594      	cmp	ip, r2
 8024d98:	d2eb      	bcs.n	8024d72 <lv_style_remove_prop+0x84>
 8024d9a:	e7d2      	b.n	8024d42 <lv_style_remove_prop+0x54>
    for(i = 0; i < style->prop_cnt; i++) {
 8024d9c:	3301      	adds	r3, #1
 8024d9e:	4298      	cmp	r0, r3
 8024da0:	d8c0      	bhi.n	8024d24 <lv_style_remove_prop+0x36>
        return false;
 8024da2:	2000      	movs	r0, #0
 8024da4:	e7b8      	b.n	8024d18 <lv_style_remove_prop+0x2a>

08024da6 <lv_style_get_prop>:
{
 8024da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024da8:	4605      	mov	r5, r0
 8024daa:	4614      	mov	r4, r2
 8024dac:	4608      	mov	r0, r1
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024dae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8024db2:	88aa      	ldrh	r2, [r5, #4]
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8024db4:	79eb      	ldrb	r3, [r5, #7]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024db6:	428a      	cmp	r2, r1
 8024db8:	d11c      	bne.n	8024df4 <lv_style_get_prop+0x4e>
        for(i = 0; i < style->prop_cnt; i++) {
 8024dba:	2200      	movs	r2, #0
 8024dbc:	429a      	cmp	r2, r3
 8024dbe:	d301      	bcc.n	8024dc4 <lv_style_get_prop+0x1e>
        return LV_STYLE_RES_NOT_FOUND;
 8024dc0:	2300      	movs	r3, #0
 8024dc2:	e013      	b.n	8024dec <lv_style_get_prop+0x46>
            const_prop = style->v_p.const_props + i;
 8024dc4:	6829      	ldr	r1, [r5, #0]
 8024dc6:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8024dca:	f831 1032 	ldrh.w	r1, [r1, r2, lsl #3]
 8024dce:	f3c1 070d 	ubfx	r7, r1, #0, #14
            if(prop_id == prop) {
 8024dd2:	42b8      	cmp	r0, r7
 8024dd4:	d10c      	bne.n	8024df0 <lv_style_get_prop+0x4a>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8024dd6:	040a      	lsls	r2, r1, #16
 8024dd8:	d42f      	bmi.n	8024e3a <lv_style_get_prop+0x94>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8024dda:	044b      	lsls	r3, r1, #17
 8024ddc:	d503      	bpl.n	8024de6 <lv_style_get_prop+0x40>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8024dde:	f7ed fdb3 	bl	8012948 <lv_style_prop_get_default>
 8024de2:	6020      	str	r0, [r4, #0]
 8024de4:	e001      	b.n	8024dea <lv_style_get_prop+0x44>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8024de6:	6873      	ldr	r3, [r6, #4]
                    *value = values[i];
 8024de8:	6023      	str	r3, [r4, #0]
                return LV_STYLE_RES_FOUND;
 8024dea:	2301      	movs	r3, #1
}
 8024dec:	4618      	mov	r0, r3
 8024dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for(i = 0; i < style->prop_cnt; i++) {
 8024df0:	3201      	adds	r2, #1
 8024df2:	e7e3      	b.n	8024dbc <lv_style_get_prop+0x16>
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8024df4:	2b00      	cmp	r3, #0
 8024df6:	d0f9      	beq.n	8024dec <lv_style_get_prop+0x46>
    if(style->prop_cnt > 1) {
 8024df8:	2b01      	cmp	r3, #1
 8024dfa:	d014      	beq.n	8024e26 <lv_style_get_prop+0x80>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024dfc:	682e      	ldr	r6, [r5, #0]
        for(i = 0; i < style->prop_cnt; i++) {
 8024dfe:	2200      	movs	r2, #0
 8024e00:	eb06 0583 	add.w	r5, r6, r3, lsl #2
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8024e04:	f835 1b02 	ldrh.w	r1, [r5], #2
 8024e08:	f3c1 070d 	ubfx	r7, r1, #0, #14
            if(prop_id == prop) {
 8024e0c:	42b8      	cmp	r0, r7
 8024e0e:	d106      	bne.n	8024e1e <lv_style_get_prop+0x78>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8024e10:	040f      	lsls	r7, r1, #16
 8024e12:	d412      	bmi.n	8024e3a <lv_style_get_prop+0x94>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8024e14:	044d      	lsls	r5, r1, #17
 8024e16:	d4e2      	bmi.n	8024dde <lv_style_get_prop+0x38>
                    *value = values[i];
 8024e18:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
 8024e1c:	e7e4      	b.n	8024de8 <lv_style_get_prop+0x42>
        for(i = 0; i < style->prop_cnt; i++) {
 8024e1e:	3201      	adds	r2, #1
 8024e20:	429a      	cmp	r2, r3
 8024e22:	d3ef      	bcc.n	8024e04 <lv_style_get_prop+0x5e>
 8024e24:	e7cc      	b.n	8024dc0 <lv_style_get_prop+0x1a>
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8024e26:	f3c2 030d 	ubfx	r3, r2, #0, #14
 8024e2a:	4298      	cmp	r0, r3
 8024e2c:	d1c8      	bne.n	8024dc0 <lv_style_get_prop+0x1a>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8024e2e:	0411      	lsls	r1, r2, #16
 8024e30:	d403      	bmi.n	8024e3a <lv_style_get_prop+0x94>
                                                                                             style->prop1)) : style->v_p.value1;
 8024e32:	0453      	lsls	r3, r2, #17
 8024e34:	d4d3      	bmi.n	8024dde <lv_style_get_prop+0x38>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8024e36:	682b      	ldr	r3, [r5, #0]
 8024e38:	e7d6      	b.n	8024de8 <lv_style_get_prop+0x42>
                    return LV_STYLE_RES_INHERIT;
 8024e3a:	2302      	movs	r3, #2
 8024e3c:	e7d6      	b.n	8024dec <lv_style_get_prop+0x46>

08024e3e <lv_style_is_empty>:
    return style->prop_cnt == 0 ? true : false;
 8024e3e:	79c0      	ldrb	r0, [r0, #7]
}
 8024e40:	fab0 f080 	clz	r0, r0
 8024e44:	0940      	lsrs	r0, r0, #5
 8024e46:	4770      	bx	lr

08024e48 <_lv_style_get_prop_group>:
    uint16_t group = (prop & 0x1FF) >> 4;
 8024e48:	0900      	lsrs	r0, r0, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8024e4a:	f010 0f18 	tst.w	r0, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 8024e4e:	bf0c      	ite	eq
 8024e50:	f000 001f 	andeq.w	r0, r0, #31
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8024e54:	2007      	movne	r0, #7
}
 8024e56:	4770      	bx	lr

08024e58 <lv_style_set_prop_internal>:
    *prop_storage = prop; /* meta is OR-ed into the prop ID already */
}

static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
 8024e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024e5c:	4617      	mov	r7, r2
 8024e5e:	461e      	mov	r6, r3
    LV_ASSERT_STYLE(style);

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024e64:	8883      	ldrh	r3, [r0, #4]
{
 8024e66:	4604      	mov	r4, r0
 8024e68:	460d      	mov	r5, r1
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024e6a:	4293      	cmp	r3, r2
 8024e6c:	d045      	beq.n	8024efa <lv_style_set_prop_internal+0xa2>
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);

    if(style->prop_cnt > 1) {
 8024e6e:	f890 e007 	ldrb.w	lr, [r0, #7]
    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 8024e72:	f3c1 080d 	ubfx	r8, r1, #0, #14
    if(style->prop_cnt > 1) {
 8024e76:	f1be 0f01 	cmp.w	lr, #1
 8024e7a:	d945      	bls.n	8024f08 <lv_style_set_prop_internal+0xb0>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
        uint16_t * props = (uint16_t *)tmp;
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8024e7c:	f10e 33ff 	add.w	r3, lr, #4294967295
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024e80:	6800      	ldr	r0, [r0, #0]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8024e82:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8024e86:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8024e8a:	4484      	add	ip, r0
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 8024e8c:	4662      	mov	r2, ip
 8024e8e:	f1ac 0c02 	sub.w	ip, ip, #2
 8024e92:	8811      	ldrh	r1, [r2, #0]
 8024e94:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8024e98:	4588      	cmp	r8, r1
 8024e9a:	d107      	bne.n	8024eac <lv_style_set_prop_internal+0x54>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
 8024e9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
    }
    else if(style->prop_cnt == 1) {
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8024ea0:	4639      	mov	r1, r7
 8024ea2:	4628      	mov	r0, r5
 8024ea4:	46b4      	mov	ip, r6
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
    style->has_group |= 1 << group;
}
 8024ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8024eaa:	4760      	bx	ip
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8024eac:	3b01      	subs	r3, #1
 8024eae:	d2ed      	bcs.n	8024e8c <lv_style_set_prop_internal+0x34>
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8024eb0:	2106      	movs	r1, #6
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 8024eb2:	fb0e 1101 	mla	r1, lr, r1, r1
 8024eb6:	f7ed fc65 	bl	8012784 <lv_mem_realloc>
        if(values_and_props == NULL) return;
 8024eba:	b1f0      	cbz	r0, 8024efa <lv_style_set_prop_internal+0xa2>
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024ebc:	79e3      	ldrb	r3, [r4, #7]
        style->v_p.values_and_props = values_and_props;
 8024ebe:	6020      	str	r0, [r4, #0]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024ec0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 8024ec4:	1d11      	adds	r1, r2, #4
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8024ec6:	3b01      	subs	r3, #1
 8024ec8:	d219      	bcs.n	8024efe <lv_style_set_prop_internal+0xa6>
        style->prop_cnt++;
 8024eca:	79e1      	ldrb	r1, [r4, #7]
 8024ecc:	3101      	adds	r1, #1
 8024ece:	b2c9      	uxtb	r1, r1
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024ed0:	008a      	lsls	r2, r1, #2
        style->prop_cnt++;
 8024ed2:	71e1      	strb	r1, [r4, #7]
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 8024ed4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8024ed8:	1f13      	subs	r3, r2, #4
 8024eda:	3901      	subs	r1, #1
 8024edc:	4403      	add	r3, r0
 8024ede:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8024ee2:	4402      	add	r2, r0
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8024ee4:	4628      	mov	r0, r5
 8024ee6:	4639      	mov	r1, r7
 8024ee8:	47b0      	blx	r6
    style->has_group |= 1 << group;
 8024eea:	2301      	movs	r3, #1
    uint8_t group = _lv_style_get_prop_group(prop_id);
 8024eec:	4640      	mov	r0, r8
 8024eee:	f7ff ffab 	bl	8024e48 <_lv_style_get_prop_group>
    style->has_group |= 1 << group;
 8024ef2:	4083      	lsls	r3, r0
 8024ef4:	79a0      	ldrb	r0, [r4, #6]
 8024ef6:	4318      	orrs	r0, r3
 8024ef8:	71a0      	strb	r0, [r4, #6]
}
 8024efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 8024efe:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
 8024f02:	f821 c013 	strh.w	ip, [r1, r3, lsl #1]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8024f06:	e7de      	b.n	8024ec6 <lv_style_set_prop_internal+0x6e>
    else if(style->prop_cnt == 1) {
 8024f08:	d11c      	bne.n	8024f44 <lv_style_set_prop_internal+0xec>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 8024f0a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8024f0e:	4543      	cmp	r3, r8
 8024f10:	d102      	bne.n	8024f18 <lv_style_set_prop_internal+0xc0>
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8024f12:	4603      	mov	r3, r0
 8024f14:	1d02      	adds	r2, r0, #4
 8024f16:	e7c3      	b.n	8024ea0 <lv_style_set_prop_internal+0x48>
        uint8_t * values_and_props = lv_mem_alloc(size);
 8024f18:	200c      	movs	r0, #12
 8024f1a:	f7ed fbfd 	bl	8012718 <lv_mem_alloc>
        if(values_and_props == NULL) return;
 8024f1e:	2800      	cmp	r0, #0
 8024f20:	d0eb      	beq.n	8024efa <lv_style_set_prop_internal+0xa2>
        style->prop_cnt++;
 8024f22:	79e3      	ldrb	r3, [r4, #7]
        props[0] = style->prop1;
 8024f24:	f8b4 c004 	ldrh.w	ip, [r4, #4]
        style->prop_cnt++;
 8024f28:	3301      	adds	r3, #1
        lv_style_value_t value_tmp = style->v_p.value1;
 8024f2a:	6821      	ldr	r1, [r4, #0]
        style->v_p.values_and_props = values_and_props;
 8024f2c:	6020      	str	r0, [r4, #0]
        style->prop_cnt++;
 8024f2e:	b2db      	uxtb	r3, r3
 8024f30:	71e3      	strb	r3, [r4, #7]
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024f32:	eb00 0283 	add.w	r2, r0, r3, lsl #2
        props[0] = style->prop1;
 8024f36:	f820 c023 	strh.w	ip, [r0, r3, lsl #2]
        values[0] = value_tmp;
 8024f3a:	4603      	mov	r3, r0
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 8024f3c:	3202      	adds	r2, #2
        values[0] = value_tmp;
 8024f3e:	f843 1b04 	str.w	r1, [r3], #4
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 8024f42:	e7cf      	b.n	8024ee4 <lv_style_set_prop_internal+0x8c>
        style->prop_cnt = 1;
 8024f44:	2301      	movs	r3, #1
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8024f46:	1d02      	adds	r2, r0, #4
        style->prop_cnt = 1;
 8024f48:	71c3      	strb	r3, [r0, #7]
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8024f4a:	4603      	mov	r3, r0
 8024f4c:	e7ca      	b.n	8024ee4 <lv_style_set_prop_internal+0x8c>

08024f4e <lv_style_set_width>:
#include "lv_style.h"

void lv_style_set_width(lv_style_t * style, lv_coord_t value)
{
 8024f4e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_WIDTH, v);
 8024f50:	2101      	movs	r1, #1
 8024f52:	f7ed bd45 	b.w	80129e0 <lv_style_set_prop>

08024f56 <lv_style_set_max_width>:
    };
    lv_style_set_prop(style, LV_STYLE_MIN_WIDTH, v);
}

void lv_style_set_max_width(lv_style_t * style, lv_coord_t value)
{
 8024f56:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_MAX_WIDTH, v);
 8024f58:	2103      	movs	r1, #3
 8024f5a:	f7ed bd41 	b.w	80129e0 <lv_style_set_prop>

08024f5e <lv_style_set_height>:
}

void lv_style_set_height(lv_style_t * style, lv_coord_t value)
{
 8024f5e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_HEIGHT, v);
 8024f60:	2104      	movs	r1, #4
 8024f62:	f7ed bd3d 	b.w	80129e0 <lv_style_set_prop>

08024f66 <lv_style_set_max_height>:
    };
    lv_style_set_prop(style, LV_STYLE_MIN_HEIGHT, v);
}

void lv_style_set_max_height(lv_style_t * style, lv_coord_t value)
{
 8024f66:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_MAX_HEIGHT, v);
 8024f68:	2106      	movs	r1, #6
 8024f6a:	f7ed bd39 	b.w	80129e0 <lv_style_set_prop>

08024f6e <lv_style_set_transform_width>:
    };
    lv_style_set_prop(style, LV_STYLE_ALIGN, v);
}

void lv_style_set_transform_width(lv_style_t * style, lv_coord_t value)
{
 8024f6e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_WIDTH, v);
 8024f70:	2168      	movs	r1, #104	; 0x68
 8024f72:	f7ed bd35 	b.w	80129e0 <lv_style_set_prop>

08024f76 <lv_style_set_transform_height>:
}

void lv_style_set_transform_height(lv_style_t * style, lv_coord_t value)
{
 8024f76:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_HEIGHT, v);
 8024f78:	2169      	movs	r1, #105	; 0x69
 8024f7a:	f7ed bd31 	b.w	80129e0 <lv_style_set_prop>

08024f7e <lv_style_set_pad_top>:
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_PIVOT_Y, v);
}

void lv_style_set_pad_top(lv_style_t * style, lv_coord_t value)
{
 8024f7e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 8024f80:	2110      	movs	r1, #16
 8024f82:	f7ed bd2d 	b.w	80129e0 <lv_style_set_prop>

08024f86 <lv_style_set_pad_bottom>:
}

void lv_style_set_pad_bottom(lv_style_t * style, lv_coord_t value)
{
 8024f86:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_BOTTOM, v);
 8024f88:	2111      	movs	r1, #17
 8024f8a:	f7ed bd29 	b.w	80129e0 <lv_style_set_prop>

08024f8e <lv_style_set_pad_left>:
}

void lv_style_set_pad_left(lv_style_t * style, lv_coord_t value)
{
 8024f8e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 8024f90:	2112      	movs	r1, #18
 8024f92:	f7ed bd25 	b.w	80129e0 <lv_style_set_prop>

08024f96 <lv_style_set_pad_right>:
}

void lv_style_set_pad_right(lv_style_t * style, lv_coord_t value)
{
 8024f96:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 8024f98:	2113      	movs	r1, #19
 8024f9a:	f7ed bd21 	b.w	80129e0 <lv_style_set_prop>

08024f9e <lv_style_set_pad_row>:
}

void lv_style_set_pad_row(lv_style_t * style, lv_coord_t value)
{
 8024f9e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_ROW, v);
 8024fa0:	2114      	movs	r1, #20
 8024fa2:	f7ed bd1d 	b.w	80129e0 <lv_style_set_prop>

08024fa6 <lv_style_set_pad_column>:
}

void lv_style_set_pad_column(lv_style_t * style, lv_coord_t value)
{
 8024fa6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v);
 8024fa8:	2115      	movs	r1, #21
 8024faa:	f7ed bd19 	b.w	80129e0 <lv_style_set_prop>

08024fae <lv_style_set_bg_color>:
}

void lv_style_set_bg_color(lv_style_t * style, lv_color_t value)
{
 8024fae:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8024fb0:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8024fb2:	b28a      	uxth	r2, r1
 8024fb4:	2120      	movs	r1, #32
    lv_style_value_t v = {
 8024fb6:	f8ad 3000 	strh.w	r3, [sp]
}
 8024fba:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8024fbc:	f7ed bd10 	b.w	80129e0 <lv_style_set_prop>

08024fc0 <lv_style_set_bg_opa>:

void lv_style_set_bg_opa(lv_style_t * style, lv_opa_t value)
{
 8024fc0:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BG_OPA, v);
 8024fc2:	2121      	movs	r1, #33	; 0x21
 8024fc4:	f7ed bd0c 	b.w	80129e0 <lv_style_set_prop>

08024fc8 <lv_style_set_bg_grad_color>:
}

void lv_style_set_bg_grad_color(lv_style_t * style, lv_color_t value)
{
 8024fc8:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8024fca:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_GRAD_COLOR, v);
 8024fcc:	b28a      	uxth	r2, r1
 8024fce:	2122      	movs	r1, #34	; 0x22
    lv_style_value_t v = {
 8024fd0:	f8ad 3000 	strh.w	r3, [sp]
}
 8024fd4:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BG_GRAD_COLOR, v);
 8024fd6:	f7ed bd03 	b.w	80129e0 <lv_style_set_prop>

08024fda <lv_style_set_bg_img_src>:
    };
    lv_style_set_prop(style, LV_STYLE_BG_DITHER_MODE, v);
}

void lv_style_set_bg_img_src(lv_style_t * style, const void * value)
{
 8024fda:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_IMG_SRC, v);
 8024fdc:	2128      	movs	r1, #40	; 0x28
 8024fde:	f7ed bcff 	b.w	80129e0 <lv_style_set_prop>

08024fe2 <lv_style_set_border_color>:
    };
    lv_style_set_prop(style, LV_STYLE_BG_IMG_TILED, v);
}

void lv_style_set_border_color(lv_style_t * style, lv_color_t value)
{
 8024fe2:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8024fe4:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 8024fe6:	b28a      	uxth	r2, r1
 8024fe8:	2130      	movs	r1, #48	; 0x30
    lv_style_value_t v = {
 8024fea:	f8ad 3000 	strh.w	r3, [sp]
}
 8024fee:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 8024ff0:	f7ed bcf6 	b.w	80129e0 <lv_style_set_prop>

08024ff4 <lv_style_set_border_opa>:

void lv_style_set_border_opa(lv_style_t * style, lv_opa_t value)
{
 8024ff4:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_OPA, v);
 8024ff6:	2131      	movs	r1, #49	; 0x31
 8024ff8:	f7ed bcf2 	b.w	80129e0 <lv_style_set_prop>

08024ffc <lv_style_set_border_width>:
}

void lv_style_set_border_width(lv_style_t * style, lv_coord_t value)
{
 8024ffc:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_WIDTH, v);
 8024ffe:	2132      	movs	r1, #50	; 0x32
 8025000:	f7ed bcee 	b.w	80129e0 <lv_style_set_prop>

08025004 <lv_style_set_border_side>:
}

void lv_style_set_border_side(lv_style_t * style, lv_border_side_t value)
{
 8025004:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 8025006:	2133      	movs	r1, #51	; 0x33
 8025008:	f7ed bcea 	b.w	80129e0 <lv_style_set_prop>

0802500c <lv_style_set_border_post>:
}

void lv_style_set_border_post(lv_style_t * style, bool value)
{
 802500c:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_POST, v);
 802500e:	2134      	movs	r1, #52	; 0x34
 8025010:	f7ed bce6 	b.w	80129e0 <lv_style_set_prop>

08025014 <lv_style_set_outline_width>:
}

void lv_style_set_outline_width(lv_style_t * style, lv_coord_t value)
{
 8025014:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_WIDTH, v);
 8025016:	2135      	movs	r1, #53	; 0x35
 8025018:	f7ed bce2 	b.w	80129e0 <lv_style_set_prop>

0802501c <lv_style_set_outline_color>:
}

void lv_style_set_outline_color(lv_style_t * style, lv_color_t value)
{
 802501c:	b082      	sub	sp, #8
    lv_style_value_t v = {
 802501e:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8025020:	b28a      	uxth	r2, r1
 8025022:	2136      	movs	r1, #54	; 0x36
    lv_style_value_t v = {
 8025024:	f8ad 3000 	strh.w	r3, [sp]
}
 8025028:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 802502a:	f7ed bcd9 	b.w	80129e0 <lv_style_set_prop>

0802502e <lv_style_set_outline_opa>:

void lv_style_set_outline_opa(lv_style_t * style, lv_opa_t value)
{
 802502e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_OPA, v);
 8025030:	2137      	movs	r1, #55	; 0x37
 8025032:	f7ed bcd5 	b.w	80129e0 <lv_style_set_prop>

08025036 <lv_style_set_outline_pad>:
}

void lv_style_set_outline_pad(lv_style_t * style, lv_coord_t value)
{
 8025036:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_PAD, v);
 8025038:	2138      	movs	r1, #56	; 0x38
 802503a:	f7ed bcd1 	b.w	80129e0 <lv_style_set_prop>

0802503e <lv_style_set_shadow_width>:
}

void lv_style_set_shadow_width(lv_style_t * style, lv_coord_t value)
{
 802503e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 8025040:	2140      	movs	r1, #64	; 0x40
 8025042:	f7ed bccd 	b.w	80129e0 <lv_style_set_prop>

08025046 <lv_style_set_shadow_ofs_y>:
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OFS_X, v);
}

void lv_style_set_shadow_ofs_y(lv_style_t * style, lv_coord_t value)
{
 8025046:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OFS_Y, v);
 8025048:	2142      	movs	r1, #66	; 0x42
 802504a:	f7ed bcc9 	b.w	80129e0 <lv_style_set_prop>

0802504e <lv_style_set_shadow_spread>:
}

void lv_style_set_shadow_spread(lv_style_t * style, lv_coord_t value)
{
 802504e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_SPREAD, v);
 8025050:	2143      	movs	r1, #67	; 0x43
 8025052:	f7ed bcc5 	b.w	80129e0 <lv_style_set_prop>

08025056 <lv_style_set_shadow_color>:
}

void lv_style_set_shadow_color(lv_style_t * style, lv_color_t value)
{
 8025056:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8025058:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 802505a:	b28a      	uxth	r2, r1
 802505c:	2144      	movs	r1, #68	; 0x44
    lv_style_value_t v = {
 802505e:	f8ad 3000 	strh.w	r3, [sp]
}
 8025062:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 8025064:	f7ed bcbc 	b.w	80129e0 <lv_style_set_prop>

08025068 <lv_style_set_shadow_opa>:

void lv_style_set_shadow_opa(lv_style_t * style, lv_opa_t value)
{
 8025068:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OPA, v);
 802506a:	2145      	movs	r1, #69	; 0x45
 802506c:	f7ed bcb8 	b.w	80129e0 <lv_style_set_prop>

08025070 <lv_style_set_line_width>:
    };
    lv_style_set_prop(style, LV_STYLE_IMG_RECOLOR_OPA, v);
}

void lv_style_set_line_width(lv_style_t * style, lv_coord_t value)
{
 8025070:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_WIDTH, v);
 8025072:	2149      	movs	r1, #73	; 0x49
 8025074:	f7ed bcb4 	b.w	80129e0 <lv_style_set_prop>

08025078 <lv_style_set_line_color>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_ROUNDED, v);
}

void lv_style_set_line_color(lv_style_t * style, lv_color_t value)
{
 8025078:	b082      	sub	sp, #8
    lv_style_value_t v = {
 802507a:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 802507c:	b28a      	uxth	r2, r1
 802507e:	214d      	movs	r1, #77	; 0x4d
    lv_style_value_t v = {
 8025080:	f8ad 3000 	strh.w	r3, [sp]
}
 8025084:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 8025086:	f7ed bcab 	b.w	80129e0 <lv_style_set_prop>

0802508a <lv_style_set_arc_width>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_OPA, v);
}

void lv_style_set_arc_width(lv_style_t * style, lv_coord_t value)
{
 802508a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 802508c:	2150      	movs	r1, #80	; 0x50
 802508e:	f7ed bca7 	b.w	80129e0 <lv_style_set_prop>

08025092 <lv_style_set_arc_rounded>:
}

void lv_style_set_arc_rounded(lv_style_t * style, bool value)
{
 8025092:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_ROUNDED, v);
 8025094:	2151      	movs	r1, #81	; 0x51
 8025096:	f7ed bca3 	b.w	80129e0 <lv_style_set_prop>

0802509a <lv_style_set_arc_color>:
}

void lv_style_set_arc_color(lv_style_t * style, lv_color_t value)
{
 802509a:	b082      	sub	sp, #8
    lv_style_value_t v = {
 802509c:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 802509e:	b28a      	uxth	r2, r1
 80250a0:	2152      	movs	r1, #82	; 0x52
    lv_style_value_t v = {
 80250a2:	f8ad 3000 	strh.w	r3, [sp]
}
 80250a6:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 80250a8:	f7ed bc9a 	b.w	80129e0 <lv_style_set_prop>

080250ac <lv_style_set_text_color>:
    };
    lv_style_set_prop(style, LV_STYLE_ARC_IMG_SRC, v);
}

void lv_style_set_text_color(lv_style_t * style, lv_color_t value)
{
 80250ac:	b082      	sub	sp, #8
    lv_style_value_t v = {
 80250ae:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 80250b0:	b28a      	uxth	r2, r1
 80250b2:	2155      	movs	r1, #85	; 0x55
    lv_style_value_t v = {
 80250b4:	f8ad 3000 	strh.w	r3, [sp]
}
 80250b8:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 80250ba:	f7ed bc91 	b.w	80129e0 <lv_style_set_prop>

080250be <lv_style_set_text_font>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_OPA, v);
}

void lv_style_set_text_font(lv_style_t * style, const lv_font_t * value)
{
 80250be:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_FONT, v);
 80250c0:	2157      	movs	r1, #87	; 0x57
 80250c2:	f7ed bc8d 	b.w	80129e0 <lv_style_set_prop>

080250c6 <lv_style_set_text_line_space>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_LETTER_SPACE, v);
}

void lv_style_set_text_line_space(lv_style_t * style, lv_coord_t value)
{
 80250c6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_LINE_SPACE, v);
 80250c8:	2159      	movs	r1, #89	; 0x59
 80250ca:	f7ed bc89 	b.w	80129e0 <lv_style_set_prop>

080250ce <lv_style_set_text_align>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_DECOR, v);
}

void lv_style_set_text_align(lv_style_t * style, lv_text_align_t value)
{
 80250ce:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_ALIGN, v);
 80250d0:	215b      	movs	r1, #91	; 0x5b
 80250d2:	f7ed bc85 	b.w	80129e0 <lv_style_set_prop>

080250d6 <lv_style_set_radius>:
}

void lv_style_set_radius(lv_style_t * style, lv_coord_t value)
{
 80250d6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_RADIUS, v);
 80250d8:	210b      	movs	r1, #11
 80250da:	f7ed bc81 	b.w	80129e0 <lv_style_set_prop>

080250de <lv_style_set_clip_corner>:
}

void lv_style_set_clip_corner(lv_style_t * style, bool value)
{
 80250de:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_CLIP_CORNER, v);
 80250e0:	2117      	movs	r1, #23
 80250e2:	f7ed bc7d 	b.w	80129e0 <lv_style_set_prop>

080250e6 <lv_style_set_color_filter_dsc>:
    };
    lv_style_set_prop(style, LV_STYLE_OPA, v);
}

void lv_style_set_color_filter_dsc(lv_style_t * style, const lv_color_filter_dsc_t * value)
{
 80250e6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_DSC, v);
 80250e8:	2161      	movs	r1, #97	; 0x61
 80250ea:	f7ed bc79 	b.w	80129e0 <lv_style_set_prop>

080250ee <lv_style_set_color_filter_opa>:
}

void lv_style_set_color_filter_opa(lv_style_t * style, lv_opa_t value)
{
 80250ee:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_OPA, v);
 80250f0:	2162      	movs	r1, #98	; 0x62
 80250f2:	f7ed bc75 	b.w	80129e0 <lv_style_set_prop>

080250f6 <lv_style_set_anim_time>:
    };
    lv_style_set_prop(style, LV_STYLE_ANIM, v);
}

void lv_style_set_anim_time(lv_style_t * style, uint32_t value)
{
 80250f6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ANIM_TIME, v);
 80250f8:	2164      	movs	r1, #100	; 0x64
 80250fa:	f7ed bc71 	b.w	80129e0 <lv_style_set_prop>

080250fe <lv_style_set_transition>:
    };
    lv_style_set_prop(style, LV_STYLE_ANIM_SPEED, v);
}

void lv_style_set_transition(lv_style_t * style, const lv_style_transition_dsc_t * value)
{
 80250fe:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSITION, v);
 8025100:	2166      	movs	r1, #102	; 0x66
 8025102:	f7ed bc6d 	b.w	80129e0 <lv_style_set_prop>

08025106 <lv_timer_pause>:
    timer->paused = true;
 8025106:	7d03      	ldrb	r3, [r0, #20]
 8025108:	f043 0301 	orr.w	r3, r3, #1
 802510c:	7503      	strb	r3, [r0, #20]
}
 802510e:	4770      	bx	lr

08025110 <lv_timer_resume>:
    timer->paused = false;
 8025110:	7d03      	ldrb	r3, [r0, #20]
 8025112:	f36f 0300 	bfc	r3, #0, #1
 8025116:	7503      	strb	r3, [r0, #20]
}
 8025118:	4770      	bx	lr

0802511a <lv_timer_ready>:
{
 802511a:	b510      	push	{r4, lr}
 802511c:	4604      	mov	r4, r0
    timer->last_run = lv_tick_get() - timer->period - 1;
 802511e:	f7ff f814 	bl	802414a <lv_tick_get>
 8025122:	6823      	ldr	r3, [r4, #0]
 8025124:	1ac3      	subs	r3, r0, r3
 8025126:	3b01      	subs	r3, #1
 8025128:	6063      	str	r3, [r4, #4]
}
 802512a:	bd10      	pop	{r4, pc}

0802512c <block_next>:
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802512c:	6843      	ldr	r3, [r0, #4]
/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
    block_header_t * next = offset_to_block(block_to_ptr(block),
                                            block_size(block) - block_header_overhead);
    tlsf_assert(!block_is_last(block));
 802512e:	2b03      	cmp	r3, #3
 8025130:	d800      	bhi.n	8025134 <block_next+0x8>
 8025132:	e7fe      	b.n	8025132 <block_next+0x6>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025134:	f023 0303 	bic.w	r3, r3, #3
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8025138:	4418      	add	r0, r3
    return next;
}
 802513a:	3004      	adds	r0, #4
 802513c:	4770      	bx	lr

0802513e <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 802513e:	4602      	mov	r2, r0
 8025140:	b508      	push	{r3, lr}
    block_header_t * next = block_next(block);
 8025142:	f7ff fff3 	bl	802512c <block_next>
    next->prev_phys_block = block;
 8025146:	6002      	str	r2, [r0, #0]
    return next;
}
 8025148:	bd08      	pop	{r3, pc}

0802514a <block_split>:
    return block_size(block) >= sizeof(block_header_t) + size;
}

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 802514a:	b538      	push	{r3, r4, r5, lr}
    return tlsf_cast(void *,
 802514c:	1843      	adds	r3, r0, r1
 802514e:	f103 020c 	add.w	r2, r3, #12
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8025152:	1d1c      	adds	r4, r3, #4
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8025154:	330f      	adds	r3, #15
 8025156:	f023 0303 	bic.w	r3, r3, #3
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);

    const size_t remain_size = block_size(block) - (size + block_header_overhead);

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 802515a:	429a      	cmp	r2, r3
 802515c:	d000      	beq.n	8025160 <block_split+0x16>
 802515e:	e7fe      	b.n	802515e <block_split+0x14>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025160:	6843      	ldr	r3, [r0, #4]
 8025162:	f023 0303 	bic.w	r3, r3, #3
    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 8025166:	1a5a      	subs	r2, r3, r1
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 8025168:	1f15      	subs	r5, r2, #4
 802516a:	440a      	add	r2, r1
 802516c:	429a      	cmp	r2, r3
 802516e:	d000      	beq.n	8025172 <block_split+0x28>
 8025170:	e7fe      	b.n	8025170 <block_split+0x26>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8025172:	6863      	ldr	r3, [r4, #4]
 8025174:	f003 0303 	and.w	r3, r3, #3
 8025178:	432b      	orrs	r3, r5
 802517a:	6063      	str	r3, [r4, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802517c:	f023 0303 	bic.w	r3, r3, #3
    block_set_size(remaining, remain_size);
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8025180:	2b0b      	cmp	r3, #11
 8025182:	d800      	bhi.n	8025186 <block_split+0x3c>
 8025184:	e7fe      	b.n	8025184 <block_split+0x3a>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8025186:	6843      	ldr	r3, [r0, #4]
 8025188:	f003 0303 	and.w	r3, r3, #3
 802518c:	430b      	orrs	r3, r1
 802518e:	6043      	str	r3, [r0, #4]
    block_header_t * next = block_link_next(block);
 8025190:	4620      	mov	r0, r4
 8025192:	f7ff ffd4 	bl	802513e <block_link_next>
    block->size |= block_header_prev_free_bit;
 8025196:	6843      	ldr	r3, [r0, #4]
 8025198:	f043 0302 	orr.w	r3, r3, #2
 802519c:	6043      	str	r3, [r0, #4]

    block_set_size(block, size);
    block_mark_as_free(remaining);

    return remaining;
}
 802519e:	4620      	mov	r0, r4
    block->size |= block_header_free_bit;
 80251a0:	6863      	ldr	r3, [r4, #4]
 80251a2:	f043 0301 	orr.w	r3, r3, #1
 80251a6:	6063      	str	r3, [r4, #4]
}
 80251a8:	bd38      	pop	{r3, r4, r5, pc}

080251aa <adjust_request_size>:
    if(size) {
 80251aa:	4603      	mov	r3, r0
 80251ac:	b168      	cbz	r0, 80251ca <adjust_request_size+0x20>
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 80251ae:	1e4a      	subs	r2, r1, #1
 80251b0:	ea11 0002 	ands.w	r0, r1, r2
 80251b4:	d000      	beq.n	80251b8 <adjust_request_size+0xe>
 80251b6:	e7fe      	b.n	80251b6 <adjust_request_size+0xc>
    return (x + (align - 1)) & ~(align - 1);
 80251b8:	4413      	add	r3, r2
 80251ba:	4249      	negs	r1, r1
 80251bc:	400b      	ands	r3, r1
        if(aligned < block_size_max) {
 80251be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80251c2:	d203      	bcs.n	80251cc <adjust_request_size+0x22>
            adjust = tlsf_max(aligned, block_size_min);
 80251c4:	2b0c      	cmp	r3, #12
 80251c6:	bf38      	it	cc
 80251c8:	230c      	movcc	r3, #12
    size_t adjust = 0;
 80251ca:	4618      	mov	r0, r3
}
 80251cc:	4770      	bx	lr

080251ce <remove_free_block>:
{
 80251ce:	b570      	push	{r4, r5, r6, lr}
    block_header_t * prev = block->prev_free;
 80251d0:	68cd      	ldr	r5, [r1, #12]
    tlsf_assert(prev && "prev_free field can not be null");
 80251d2:	b905      	cbnz	r5, 80251d6 <remove_free_block+0x8>
 80251d4:	e7fe      	b.n	80251d4 <remove_free_block+0x6>
    block_header_t * next = block->next_free;
 80251d6:	688c      	ldr	r4, [r1, #8]
    tlsf_assert(next && "next_free field can not be null");
 80251d8:	b904      	cbnz	r4, 80251dc <remove_free_block+0xe>
 80251da:	e7fe      	b.n	80251da <remove_free_block+0xc>
    next->prev_free = prev;
 80251dc:	60e5      	str	r5, [r4, #12]
    prev->next_free = next;
 80251de:	60ac      	str	r4, [r5, #8]
    if(control->blocks[fl][sl] == block) {
 80251e0:	eb03 1542 	add.w	r5, r3, r2, lsl #5
 80251e4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80251e8:	6bae      	ldr	r6, [r5, #56]	; 0x38
 80251ea:	428e      	cmp	r6, r1
 80251ec:	d111      	bne.n	8025212 <remove_free_block+0x44>
        if(next == &control->block_null) {
 80251ee:	42a0      	cmp	r0, r4
        control->blocks[fl][sl] = next;
 80251f0:	63ac      	str	r4, [r5, #56]	; 0x38
        if(next == &control->block_null) {
 80251f2:	d10e      	bne.n	8025212 <remove_free_block+0x44>
            control->sl_bitmap[fl] &= ~(1U << sl);
 80251f4:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 80251f8:	2101      	movs	r1, #1
 80251fa:	696c      	ldr	r4, [r5, #20]
 80251fc:	fa01 f303 	lsl.w	r3, r1, r3
 8025200:	ea24 0303 	bic.w	r3, r4, r3
 8025204:	616b      	str	r3, [r5, #20]
            if(!control->sl_bitmap[fl]) {
 8025206:	b923      	cbnz	r3, 8025212 <remove_free_block+0x44>
                control->fl_bitmap &= ~(1U << fl);
 8025208:	6903      	ldr	r3, [r0, #16]
 802520a:	4091      	lsls	r1, r2
 802520c:	ea23 0301 	bic.w	r3, r3, r1
 8025210:	6103      	str	r3, [r0, #16]
}
 8025212:	bd70      	pop	{r4, r5, r6, pc}

08025214 <mapping_insert>:
    if(size < SMALL_BLOCK_SIZE) {
 8025214:	287f      	cmp	r0, #127	; 0x7f
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8025216:	bf8e      	itee	hi
 8025218:	fab0 f380 	clzhi	r3, r0
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 802521c:	1080      	asrls	r0, r0, #2
        fl = 0;
 802521e:	2300      	movls	r3, #0
{
 8025220:	b510      	push	{r4, lr}
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8025222:	bf82      	ittt	hi
 8025224:	f1c3 041a 	rsbhi	r4, r3, #26
        fl -= (FL_INDEX_SHIFT - 1);
 8025228:	f1c3 0319 	rsbhi	r3, r3, #25
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 802522c:	40e0      	lsrhi	r0, r4
    *fli = fl;
 802522e:	600b      	str	r3, [r1, #0]
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8025230:	bf88      	it	hi
 8025232:	f080 0020 	eorhi.w	r0, r0, #32
    *sli = sl;
 8025236:	6010      	str	r0, [r2, #0]
}
 8025238:	bd10      	pop	{r4, pc}

0802523a <block_insert>:
{
 802523a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802523c:	4604      	mov	r4, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802523e:	6848      	ldr	r0, [r1, #4]
    mapping_insert(block_size(block), &fl, &sl);
 8025240:	aa01      	add	r2, sp, #4
{
 8025242:	460d      	mov	r5, r1
    mapping_insert(block_size(block), &fl, &sl);
 8025244:	f020 0003 	bic.w	r0, r0, #3
 8025248:	4669      	mov	r1, sp
 802524a:	f7ff ffe3 	bl	8025214 <mapping_insert>
    insert_free_block(control, block, fl, sl);
 802524e:	e9dd 2600 	ldrd	r2, r6, [sp]
    block_header_t * current = control->blocks[fl][sl];
 8025252:	eb06 1342 	add.w	r3, r6, r2, lsl #5
 8025256:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802525a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tlsf_assert(current && "free list cannot have a null entry");
 802525c:	b901      	cbnz	r1, 8025260 <block_insert+0x26>
 802525e:	e7fe      	b.n	802525e <block_insert+0x24>
    block->prev_free = &control->block_null;
 8025260:	e9c5 1402 	strd	r1, r4, [r5, #8]
    current->prev_free = block;
 8025264:	60cd      	str	r5, [r1, #12]
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8025266:	f105 010b 	add.w	r1, r5, #11
    return tlsf_cast(void *,
 802526a:	f105 0008 	add.w	r0, r5, #8
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 802526e:	f021 0103 	bic.w	r1, r1, #3
    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8025272:	4288      	cmp	r0, r1
 8025274:	d000      	beq.n	8025278 <block_insert+0x3e>
 8025276:	e7fe      	b.n	8025276 <block_insert+0x3c>
    control->blocks[fl][sl] = block;
 8025278:	639d      	str	r5, [r3, #56]	; 0x38
    control->fl_bitmap |= (1U << fl);
 802527a:	2301      	movs	r3, #1
 802527c:	6921      	ldr	r1, [r4, #16]
 802527e:	fa03 f002 	lsl.w	r0, r3, r2
    control->sl_bitmap[fl] |= (1U << sl);
 8025282:	40b3      	lsls	r3, r6
    control->fl_bitmap |= (1U << fl);
 8025284:	4301      	orrs	r1, r0
 8025286:	6121      	str	r1, [r4, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 8025288:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 802528c:	6962      	ldr	r2, [r4, #20]
 802528e:	431a      	orrs	r2, r3
 8025290:	6162      	str	r2, [r4, #20]
}
 8025292:	b002      	add	sp, #8
 8025294:	bd70      	pop	{r4, r5, r6, pc}

08025296 <block_prepare_used>:

    return block;
}

static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
{
 8025296:	b538      	push	{r3, r4, r5, lr}
 8025298:	4605      	mov	r5, r0
    void * p = 0;
    if(block) {
 802529a:	460c      	mov	r4, r1
 802529c:	b341      	cbz	r1, 80252f0 <block_prepare_used+0x5a>
        tlsf_assert(size && "size must be non-zero");
 802529e:	b902      	cbnz	r2, 80252a2 <block_prepare_used+0xc>
 80252a0:	e7fe      	b.n	80252a0 <block_prepare_used+0xa>
    return tlsf_cast(int, block->size & block_header_free_bit);
 80252a2:	684b      	ldr	r3, [r1, #4]
    tlsf_assert(block_is_free(block) && "block must be free");
 80252a4:	07d9      	lsls	r1, r3, #31
 80252a6:	d400      	bmi.n	80252aa <block_prepare_used+0x14>
 80252a8:	e7fe      	b.n	80252a8 <block_prepare_used+0x12>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80252aa:	f023 0303 	bic.w	r3, r3, #3
    return block_size(block) >= sizeof(block_header_t) + size;
 80252ae:	f102 0110 	add.w	r1, r2, #16
    if(block_can_split(block, size)) {
 80252b2:	428b      	cmp	r3, r1
 80252b4:	d30e      	bcc.n	80252d4 <block_prepare_used+0x3e>
        block_header_t * remaining_block = block_split(block, size);
 80252b6:	4611      	mov	r1, r2
 80252b8:	4620      	mov	r0, r4
 80252ba:	f7ff ff46 	bl	802514a <block_split>
 80252be:	4601      	mov	r1, r0
        block_link_next(block);
 80252c0:	4620      	mov	r0, r4
 80252c2:	f7ff ff3c 	bl	802513e <block_link_next>
    block->size |= block_header_prev_free_bit;
 80252c6:	684b      	ldr	r3, [r1, #4]
        block_insert(control, remaining_block);
 80252c8:	4628      	mov	r0, r5
    block->size |= block_header_prev_free_bit;
 80252ca:	f043 0302 	orr.w	r3, r3, #2
 80252ce:	604b      	str	r3, [r1, #4]
        block_insert(control, remaining_block);
 80252d0:	f7ff ffb3 	bl	802523a <block_insert>
    block_header_t * next = block_next(block);
 80252d4:	4620      	mov	r0, r4
    return tlsf_cast(void *,
 80252d6:	3408      	adds	r4, #8
    block_header_t * next = block_next(block);
 80252d8:	f7ff ff28 	bl	802512c <block_next>
    block->size &= ~block_header_prev_free_bit;
 80252dc:	6843      	ldr	r3, [r0, #4]
 80252de:	f023 0302 	bic.w	r3, r3, #2
 80252e2:	6043      	str	r3, [r0, #4]
    block->size &= ~block_header_free_bit;
 80252e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80252e8:	f023 0301 	bic.w	r3, r3, #1
 80252ec:	f844 3c04 	str.w	r3, [r4, #-4]
        block_trim_free(control, block, size);
        block_mark_as_used(block);
        p = block_to_ptr(block);
    }
    return p;
}
 80252f0:	4620      	mov	r0, r4
 80252f2:	bd38      	pop	{r3, r4, r5, pc}

080252f4 <block_remove>:
{
 80252f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80252f6:	4605      	mov	r5, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80252f8:	6848      	ldr	r0, [r1, #4]
{
 80252fa:	460c      	mov	r4, r1
    mapping_insert(block_size(block), &fl, &sl);
 80252fc:	aa01      	add	r2, sp, #4
 80252fe:	4669      	mov	r1, sp
 8025300:	f020 0003 	bic.w	r0, r0, #3
 8025304:	f7ff ff86 	bl	8025214 <mapping_insert>
    remove_free_block(control, block, fl, sl);
 8025308:	4621      	mov	r1, r4
 802530a:	4628      	mov	r0, r5
 802530c:	e9dd 2300 	ldrd	r2, r3, [sp]
}
 8025310:	b003      	add	sp, #12
 8025312:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    remove_free_block(control, block, fl, sl);
 8025316:	f7ff bf5a 	b.w	80251ce <remove_free_block>

0802531a <block_locate_free>:
    int fl = 0, sl = 0;
 802531a:	2300      	movs	r3, #0
{
 802531c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802531e:	4604      	mov	r4, r0
    if(size) {
 8025320:	460d      	mov	r5, r1
    int fl = 0, sl = 0;
 8025322:	e9cd 3300 	strd	r3, r3, [sp]
    if(size) {
 8025326:	b919      	cbnz	r1, 8025330 <block_locate_free+0x16>
            block = search_suitable_block(control, &fl, &sl);
 8025328:	2600      	movs	r6, #0
}
 802532a:	4630      	mov	r0, r6
 802532c:	b002      	add	sp, #8
 802532e:	bd70      	pop	{r4, r5, r6, pc}
    if(size >= SMALL_BLOCK_SIZE) {
 8025330:	297f      	cmp	r1, #127	; 0x7f
    mapping_insert(size, fli, sli);
 8025332:	aa01      	add	r2, sp, #4
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8025334:	bf85      	ittet	hi
 8025336:	fab1 f381 	clzhi	r3, r1
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 802533a:	2001      	movhi	r0, #1
 802533c:	4608      	movls	r0, r1
 802533e:	f1c3 031a 	rsbhi	r3, r3, #26
 8025342:	bf82      	ittt	hi
 8025344:	4098      	lslhi	r0, r3
 8025346:	f100 30ff 	addhi.w	r0, r0, #4294967295
        size += round;
 802534a:	1840      	addhi	r0, r0, r1
    mapping_insert(size, fli, sli);
 802534c:	4669      	mov	r1, sp
 802534e:	f7ff ff61 	bl	8025214 <mapping_insert>
        if(fl < FL_INDEX_COUNT) {
 8025352:	9a00      	ldr	r2, [sp, #0]
 8025354:	2a08      	cmp	r2, #8
 8025356:	dce7      	bgt.n	8025328 <block_locate_free+0xe>
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 8025358:	f04f 31ff 	mov.w	r1, #4294967295
 802535c:	9b01      	ldr	r3, [sp, #4]
 802535e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8025362:	fa01 f303 	lsl.w	r3, r1, r3
 8025366:	6940      	ldr	r0, [r0, #20]
    if(!sl_map) {
 8025368:	4003      	ands	r3, r0
 802536a:	d10f      	bne.n	802538c <block_locate_free+0x72>
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 802536c:	3201      	adds	r2, #1
 802536e:	fa01 f302 	lsl.w	r3, r1, r2
 8025372:	6922      	ldr	r2, [r4, #16]
        if(!fl_map) {
 8025374:	401a      	ands	r2, r3
 8025376:	d0d7      	beq.n	8025328 <block_locate_free+0xe>
    return __builtin_ffs(word) - 1;
 8025378:	fa92 f2a2 	rbit	r2, r2
 802537c:	fab2 f282 	clz	r2, r2
        sl_map = control->sl_bitmap[fl];
 8025380:	eb04 0382 	add.w	r3, r4, r2, lsl #2
        *fli = fl;
 8025384:	9200      	str	r2, [sp, #0]
        sl_map = control->sl_bitmap[fl];
 8025386:	695b      	ldr	r3, [r3, #20]
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 8025388:	b903      	cbnz	r3, 802538c <block_locate_free+0x72>
 802538a:	e7fe      	b.n	802538a <block_locate_free+0x70>
    return __builtin_ffs(word) - 1;
 802538c:	fa93 f3a3 	rbit	r3, r3
 8025390:	fab3 f383 	clz	r3, r3
    return control->blocks[fl][sl];
 8025394:	eb03 1242 	add.w	r2, r3, r2, lsl #5
    *sli = sl;
 8025398:	9301      	str	r3, [sp, #4]
    return control->blocks[fl][sl];
 802539a:	320e      	adds	r2, #14
 802539c:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    if(block) {
 80253a0:	2e00      	cmp	r6, #0
 80253a2:	d0c1      	beq.n	8025328 <block_locate_free+0xe>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80253a4:	6872      	ldr	r2, [r6, #4]
 80253a6:	f022 0203 	bic.w	r2, r2, #3
        tlsf_assert(block_size(block) >= size);
 80253aa:	4295      	cmp	r5, r2
 80253ac:	d900      	bls.n	80253b0 <block_locate_free+0x96>
 80253ae:	e7fe      	b.n	80253ae <block_locate_free+0x94>
        remove_free_block(control, block, fl, sl);
 80253b0:	9a00      	ldr	r2, [sp, #0]
 80253b2:	4631      	mov	r1, r6
 80253b4:	4620      	mov	r0, r4
 80253b6:	f7ff ff0a 	bl	80251ce <remove_free_block>
    return block;
 80253ba:	e7b6      	b.n	802532a <block_locate_free+0x10>

080253bc <block_merge_next>:
{
 80253bc:	b538      	push	{r3, r4, r5, lr}
 80253be:	4602      	mov	r2, r0
    block_header_t * next = block_next(block);
 80253c0:	4608      	mov	r0, r1
 80253c2:	f7ff feb3 	bl	802512c <block_next>
{
 80253c6:	460c      	mov	r4, r1
    tlsf_assert(next && "next physical block can't be null");
 80253c8:	4605      	mov	r5, r0
 80253ca:	b900      	cbnz	r0, 80253ce <block_merge_next+0x12>
 80253cc:	e7fe      	b.n	80253cc <block_merge_next+0x10>
    if(block_is_free(next)) {
 80253ce:	6843      	ldr	r3, [r0, #4]
 80253d0:	07db      	lsls	r3, r3, #31
 80253d2:	d514      	bpl.n	80253fe <block_merge_next+0x42>
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 80253d4:	684b      	ldr	r3, [r1, #4]
 80253d6:	2b03      	cmp	r3, #3
 80253d8:	d800      	bhi.n	80253dc <block_merge_next+0x20>
 80253da:	e7fe      	b.n	80253da <block_merge_next+0x1e>
        block_remove(control, next);
 80253dc:	4601      	mov	r1, r0
 80253de:	4610      	mov	r0, r2
 80253e0:	f7ff ff88 	bl	80252f4 <block_remove>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80253e4:	6862      	ldr	r2, [r4, #4]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 80253e6:	2a03      	cmp	r2, #3
 80253e8:	d800      	bhi.n	80253ec <block_merge_next+0x30>
 80253ea:	e7fe      	b.n	80253ea <block_merge_next+0x2e>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80253ec:	686b      	ldr	r3, [r5, #4]
    prev->size += block_size(block) + block_header_overhead;
 80253ee:	3204      	adds	r2, #4
    block_link_next(prev);
 80253f0:	4620      	mov	r0, r4
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80253f2:	f023 0303 	bic.w	r3, r3, #3
    prev->size += block_size(block) + block_header_overhead;
 80253f6:	4413      	add	r3, r2
 80253f8:	6063      	str	r3, [r4, #4]
    block_link_next(prev);
 80253fa:	f7ff fea0 	bl	802513e <block_link_next>
}
 80253fe:	4620      	mov	r0, r4
 8025400:	bd38      	pop	{r3, r4, r5, pc}

08025402 <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 8025402:	b538      	push	{r3, r4, r5, lr}
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 8025404:	3a08      	subs	r2, #8

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 8025406:	f011 0303 	ands.w	r3, r1, #3
{
 802540a:	460c      	mov	r4, r1
    return x - (x & (align - 1));
 802540c:	f022 0203 	bic.w	r2, r2, #3
    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 8025410:	d115      	bne.n	802543e <lv_tlsf_add_pool+0x3c>
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 8025412:	f1a2 050c 	sub.w	r5, r2, #12
 8025416:	f647 71f4 	movw	r1, #32756	; 0x7ff4
 802541a:	428d      	cmp	r5, r1
 802541c:	d811      	bhi.n	8025442 <lv_tlsf_add_pool+0x40>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 802541e:	4625      	mov	r5, r4
    block->size &= ~block_header_prev_free_bit;
 8025420:	f042 0201 	orr.w	r2, r2, #1
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8025424:	f855 3904 	ldr.w	r3, [r5], #-4
    block->size &= ~block_header_prev_free_bit;
 8025428:	606a      	str	r2, [r5, #4]
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
    block_set_size(block, pool_bytes);
    block_set_free(block);
    block_set_prev_used(block);
    block_insert(tlsf_cast(control_t *, tlsf), block);
 802542a:	4629      	mov	r1, r5
 802542c:	f7ff ff05 	bl	802523a <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 8025430:	4628      	mov	r0, r5
 8025432:	f7ff fe84 	bl	802513e <block_link_next>
    block->size |= block_header_prev_free_bit;
 8025436:	2302      	movs	r3, #2
 8025438:	6043      	str	r3, [r0, #4]
    block_set_size(next, 0);
    block_set_used(next);
    block_set_prev_free(next);

    return mem;
}
 802543a:	4620      	mov	r0, r4
 802543c:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 802543e:	2400      	movs	r4, #0
 8025440:	e7fb      	b.n	802543a <lv_tlsf_add_pool+0x38>
 8025442:	461c      	mov	r4, r3
 8025444:	e7f9      	b.n	802543a <lv_tlsf_add_pool+0x38>

08025446 <lv_tlsf_create>:
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8025446:	f010 0103 	ands.w	r1, r0, #3
{
 802544a:	b530      	push	{r4, r5, lr}
    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 802544c:	d113      	bne.n	8025476 <lv_tlsf_create+0x30>
    control->fl_bitmap = 0;
 802544e:	4602      	mov	r2, r0
 8025450:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8025454:	f200 44b4 	addw	r4, r0, #1204	; 0x4b4
    control->block_null.prev_free = &control->block_null;
 8025458:	e9c0 0002 	strd	r0, r0, [r0, #8]
    control->fl_bitmap = 0;
 802545c:	f842 1f10 	str.w	r1, [r2, #16]!
        control->sl_bitmap[i] = 0;
 8025460:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8025464:	f842 1f04 	str.w	r1, [r2, #4]!
            control->blocks[i][j] = &control->block_null;
 8025468:	f843 0f04 	str.w	r0, [r3, #4]!
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 802546c:	42ab      	cmp	r3, r5
 802546e:	d1fb      	bne.n	8025468 <lv_tlsf_create+0x22>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8025470:	429c      	cmp	r4, r3
 8025472:	d1f5      	bne.n	8025460 <lv_tlsf_create+0x1a>
    }

    control_constructor(tlsf_cast(control_t *, mem));

    return tlsf_cast(lv_tlsf_t, mem);
}
 8025474:	bd30      	pop	{r4, r5, pc}
        return 0;
 8025476:	2000      	movs	r0, #0
 8025478:	e7fc      	b.n	8025474 <lv_tlsf_create+0x2e>

0802547a <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 802547a:	b570      	push	{r4, r5, r6, lr}
 802547c:	460e      	mov	r6, r1
 802547e:	4605      	mov	r5, r0
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 8025480:	f7ff ffe1 	bl	8025446 <lv_tlsf_create>
 8025484:	4604      	mov	r4, r0
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 8025486:	f5a6 6297 	sub.w	r2, r6, #1208	; 0x4b8
 802548a:	f505 6197 	add.w	r1, r5, #1208	; 0x4b8
 802548e:	f7ff ffb8 	bl	8025402 <lv_tlsf_add_pool>
    return tlsf;
}
 8025492:	4620      	mov	r0, r4
 8025494:	bd70      	pop	{r4, r5, r6, pc}

08025496 <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 8025496:	b538      	push	{r3, r4, r5, lr}
 8025498:	4604      	mov	r4, r0
 802549a:	4608      	mov	r0, r1
    control_t * control = tlsf_cast(control_t *, tlsf);
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 802549c:	2104      	movs	r1, #4
 802549e:	f7ff fe84 	bl	80251aa <adjust_request_size>
 80254a2:	4605      	mov	r5, r0
    block_header_t * block = block_locate_free(control, adjust);
 80254a4:	4601      	mov	r1, r0
 80254a6:	4620      	mov	r0, r4
 80254a8:	f7ff ff37 	bl	802531a <block_locate_free>
    return block_prepare_used(control, block, adjust);
 80254ac:	462a      	mov	r2, r5
    block_header_t * block = block_locate_free(control, adjust);
 80254ae:	4601      	mov	r1, r0
    return block_prepare_used(control, block, adjust);
 80254b0:	4620      	mov	r0, r4
}
 80254b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return block_prepare_used(control, block, adjust);
 80254b6:	f7ff beee 	b.w	8025296 <block_prepare_used>

080254ba <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 80254ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80254bc:	4606      	mov	r6, r0
    size_t size = 0;
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 80254be:	460c      	mov	r4, r1
 80254c0:	2900      	cmp	r1, #0
 80254c2:	d039      	beq.n	8025538 <lv_tlsf_free+0x7e>
    return tlsf_cast(int, block->size & block_header_free_bit);
 80254c4:	f851 7c04 	ldr.w	r7, [r1, #-4]
        control_t * control = tlsf_cast(control_t *, tlsf);
        block_header_t * block = block_from_ptr(ptr);
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 80254c8:	07f9      	lsls	r1, r7, #31
 80254ca:	d500      	bpl.n	80254ce <lv_tlsf_free+0x14>
 80254cc:	e7fe      	b.n	80254cc <lv_tlsf_free+0x12>
    return tlsf_cast(block_header_t *,
 80254ce:	f1a4 0508 	sub.w	r5, r4, #8
    block_header_t * next = block_link_next(block);
 80254d2:	4628      	mov	r0, r5
 80254d4:	f7ff fe33 	bl	802513e <block_link_next>
    block->size |= block_header_prev_free_bit;
 80254d8:	6843      	ldr	r3, [r0, #4]
 80254da:	f043 0302 	orr.w	r3, r3, #2
 80254de:	6043      	str	r3, [r0, #4]
    block->size |= block_header_free_bit;
 80254e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80254e4:	f043 0201 	orr.w	r2, r3, #1
 80254e8:	f844 2c04 	str.w	r2, [r4, #-4]
    if(block_is_prev_free(block)) {
 80254ec:	079a      	lsls	r2, r3, #30
 80254ee:	d519      	bpl.n	8025524 <lv_tlsf_free+0x6a>
    return block->prev_phys_block;
 80254f0:	f854 5c08 	ldr.w	r5, [r4, #-8]
        tlsf_assert(prev && "prev physical block can't be null");
 80254f4:	b905      	cbnz	r5, 80254f8 <lv_tlsf_free+0x3e>
 80254f6:	e7fe      	b.n	80254f6 <lv_tlsf_free+0x3c>
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 80254f8:	686b      	ldr	r3, [r5, #4]
 80254fa:	07db      	lsls	r3, r3, #31
 80254fc:	d400      	bmi.n	8025500 <lv_tlsf_free+0x46>
 80254fe:	e7fe      	b.n	80254fe <lv_tlsf_free+0x44>
        block_remove(control, prev);
 8025500:	4629      	mov	r1, r5
 8025502:	4630      	mov	r0, r6
 8025504:	f7ff fef6 	bl	80252f4 <block_remove>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025508:	686a      	ldr	r2, [r5, #4]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 802550a:	2a03      	cmp	r2, #3
 802550c:	d800      	bhi.n	8025510 <lv_tlsf_free+0x56>
 802550e:	e7fe      	b.n	802550e <lv_tlsf_free+0x54>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025510:	f854 3c04 	ldr.w	r3, [r4, #-4]
    block_link_next(prev);
 8025514:	4628      	mov	r0, r5
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025516:	f023 0303 	bic.w	r3, r3, #3
    prev->size += block_size(block) + block_header_overhead;
 802551a:	4413      	add	r3, r2
 802551c:	3304      	adds	r3, #4
 802551e:	606b      	str	r3, [r5, #4]
    block_link_next(prev);
 8025520:	f7ff fe0d 	bl	802513e <block_link_next>
        size = block->size;
        block_mark_as_free(block);
        block = block_merge_prev(control, block);
        block = block_merge_next(control, block);
 8025524:	4629      	mov	r1, r5
 8025526:	4630      	mov	r0, r6
 8025528:	f7ff ff48 	bl	80253bc <block_merge_next>
 802552c:	4601      	mov	r1, r0
        block_insert(control, block);
 802552e:	4630      	mov	r0, r6
 8025530:	f7ff fe83 	bl	802523a <block_insert>
    }

    return size;
}
 8025534:	4638      	mov	r0, r7
 8025536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t size = 0;
 8025538:	460f      	mov	r7, r1
    return size;
 802553a:	e7fb      	b.n	8025534 <lv_tlsf_free+0x7a>

0802553c <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 802553c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025540:	4606      	mov	r6, r0
 8025542:	4615      	mov	r5, r2
    control_t * control = tlsf_cast(control_t *, tlsf);
    void * p = 0;

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 8025544:	460c      	mov	r4, r1
 8025546:	b131      	cbz	r1, 8025556 <lv_tlsf_realloc+0x1a>
 8025548:	b952      	cbnz	r2, 8025560 <lv_tlsf_realloc+0x24>
        lv_tlsf_free(tlsf, ptr);
 802554a:	f7ff ffb6 	bl	80254ba <lv_tlsf_free>
        const size_t cursize = block_size(block);
        const size_t combined = cursize + block_size(next) + block_header_overhead;
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
        if(size > cursize && adjust == 0) {
            /* The request is probably too large, fail */
            return NULL;
 802554e:	2700      	movs	r7, #0
            p = ptr;
        }
    }

    return p;
}
 8025550:	4638      	mov	r0, r7
 8025552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        p = lv_tlsf_malloc(tlsf, size);
 8025556:	4611      	mov	r1, r2
}
 8025558:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        p = lv_tlsf_malloc(tlsf, size);
 802555c:	f7ff bf9b 	b.w	8025496 <lv_tlsf_malloc>
    return tlsf_cast(block_header_t *,
 8025560:	f1a1 0908 	sub.w	r9, r1, #8
        block_header_t * next = block_next(block);
 8025564:	4648      	mov	r0, r9
 8025566:	f7ff fde1 	bl	802512c <block_next>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802556a:	f851 bc04 	ldr.w	fp, [r1, #-4]
 802556e:	f8d0 8004 	ldr.w	r8, [r0, #4]
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8025572:	2104      	movs	r1, #4
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025574:	f02b 0a03 	bic.w	sl, fp, #3
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8025578:	4610      	mov	r0, r2
 802557a:	f7ff fe16 	bl	80251aa <adjust_request_size>
 802557e:	4607      	mov	r7, r0
        if(size > cursize && adjust == 0) {
 8025580:	4555      	cmp	r5, sl
 8025582:	d901      	bls.n	8025588 <lv_tlsf_realloc+0x4c>
 8025584:	2800      	cmp	r0, #0
 8025586:	d0e2      	beq.n	802554e <lv_tlsf_realloc+0x12>
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8025588:	f01b 0f01 	tst.w	fp, #1
 802558c:	d000      	beq.n	8025590 <lv_tlsf_realloc+0x54>
 802558e:	e7fe      	b.n	802558e <lv_tlsf_realloc+0x52>
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 8025590:	45ba      	cmp	sl, r7
 8025592:	d22d      	bcs.n	80255f0 <lv_tlsf_realloc+0xb4>
 8025594:	f018 0f01 	tst.w	r8, #1
 8025598:	d006      	beq.n	80255a8 <lv_tlsf_realloc+0x6c>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802559a:	f028 0803 	bic.w	r8, r8, #3
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 802559e:	f10a 0304 	add.w	r3, sl, #4
 80255a2:	4498      	add	r8, r3
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 80255a4:	45b8      	cmp	r8, r7
 80255a6:	d212      	bcs.n	80255ce <lv_tlsf_realloc+0x92>
            p = lv_tlsf_malloc(tlsf, size);
 80255a8:	4629      	mov	r1, r5
 80255aa:	4630      	mov	r0, r6
 80255ac:	f7ff ff73 	bl	8025496 <lv_tlsf_malloc>
            if(p) {
 80255b0:	4607      	mov	r7, r0
 80255b2:	2800      	cmp	r0, #0
 80255b4:	d0cc      	beq.n	8025550 <lv_tlsf_realloc+0x14>
    return memcpy(dst, src, len);
 80255b6:	4555      	cmp	r5, sl
 80255b8:	462a      	mov	r2, r5
 80255ba:	4621      	mov	r1, r4
 80255bc:	bf28      	it	cs
 80255be:	4652      	movcs	r2, sl
 80255c0:	f7f5 f8d7 	bl	801a772 <memcpy>
                lv_tlsf_free(tlsf, ptr);
 80255c4:	4621      	mov	r1, r4
 80255c6:	4630      	mov	r0, r6
 80255c8:	f7ff ff77 	bl	80254ba <lv_tlsf_free>
 80255cc:	e7c0      	b.n	8025550 <lv_tlsf_realloc+0x14>
                block_merge_next(control, block);
 80255ce:	4649      	mov	r1, r9
 80255d0:	4630      	mov	r0, r6
 80255d2:	f7ff fef3 	bl	80253bc <block_merge_next>
    block_header_t * next = block_next(block);
 80255d6:	4648      	mov	r0, r9
 80255d8:	f7ff fda8 	bl	802512c <block_next>
    block->size &= ~block_header_prev_free_bit;
 80255dc:	6843      	ldr	r3, [r0, #4]
 80255de:	f023 0302 	bic.w	r3, r3, #2
 80255e2:	6043      	str	r3, [r0, #4]
    block->size &= ~block_header_free_bit;
 80255e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80255e8:	f023 0301 	bic.w	r3, r3, #1
 80255ec:	f844 3c04 	str.w	r3, [r4, #-4]
    return tlsf_cast(int, block->size & block_header_free_bit);
 80255f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tlsf_assert(!block_is_free(block) && "block must be used");
 80255f4:	07da      	lsls	r2, r3, #31
 80255f6:	d500      	bpl.n	80255fa <lv_tlsf_realloc+0xbe>
 80255f8:	e7fe      	b.n	80255f8 <lv_tlsf_realloc+0xbc>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80255fa:	f023 0303 	bic.w	r3, r3, #3
    return block_size(block) >= sizeof(block_header_t) + size;
 80255fe:	f107 0210 	add.w	r2, r7, #16
    if(block_can_split(block, size)) {
 8025602:	4293      	cmp	r3, r2
 8025604:	d30f      	bcc.n	8025626 <lv_tlsf_realloc+0xea>
        block_header_t * remaining_block = block_split(block, size);
 8025606:	4639      	mov	r1, r7
 8025608:	4648      	mov	r0, r9
 802560a:	f7ff fd9e 	bl	802514a <block_split>
    block->size &= ~block_header_prev_free_bit;
 802560e:	6843      	ldr	r3, [r0, #4]
        block_header_t * remaining_block = block_split(block, size);
 8025610:	4601      	mov	r1, r0
    block->size &= ~block_header_prev_free_bit;
 8025612:	f023 0302 	bic.w	r3, r3, #2
 8025616:	6043      	str	r3, [r0, #4]
        remaining_block = block_merge_next(control, remaining_block);
 8025618:	4630      	mov	r0, r6
 802561a:	f7ff fecf 	bl	80253bc <block_merge_next>
 802561e:	4601      	mov	r1, r0
        block_insert(control, remaining_block);
 8025620:	4630      	mov	r0, r6
 8025622:	f7ff fe0a 	bl	802523a <block_insert>
            return NULL;
 8025626:	4627      	mov	r7, r4
 8025628:	e792      	b.n	8025550 <lv_tlsf_realloc+0x14>

0802562a <lv_txt_utf8_size>:
    if(LV_IS_ASCII(str[0]))
 802562a:	f990 2000 	ldrsb.w	r2, [r0]
 802562e:	7803      	ldrb	r3, [r0, #0]
 8025630:	2a00      	cmp	r2, #0
 8025632:	da0f      	bge.n	8025654 <lv_txt_utf8_size+0x2a>
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 8025634:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8025638:	2ac0      	cmp	r2, #192	; 0xc0
 802563a:	d00d      	beq.n	8025658 <lv_txt_utf8_size+0x2e>
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 802563c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8025640:	2ae0      	cmp	r2, #224	; 0xe0
 8025642:	d00b      	beq.n	802565c <lv_txt_utf8_size+0x32>
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 8025644:	f003 00f8 	and.w	r0, r3, #248	; 0xf8
 8025648:	f1a0 03f0 	sub.w	r3, r0, #240	; 0xf0
 802564c:	4258      	negs	r0, r3
 802564e:	4158      	adcs	r0, r3
 8025650:	0080      	lsls	r0, r0, #2
 8025652:	4770      	bx	lr
        return 1;
 8025654:	2001      	movs	r0, #1
 8025656:	4770      	bx	lr
        return 2;
 8025658:	2002      	movs	r0, #2
 802565a:	4770      	bx	lr
        return 3;
 802565c:	2003      	movs	r0, #3
}
 802565e:	4770      	bx	lr

08025660 <lv_txt_utf8_next>:
    uint32_t i_tmp = 0;
 8025660:	2300      	movs	r3, #0
{
 8025662:	4602      	mov	r2, r0
 8025664:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i_tmp = 0;
 8025666:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 8025668:	b901      	cbnz	r1, 802566c <lv_txt_utf8_next+0xc>
 802566a:	a901      	add	r1, sp, #4
    if(LV_IS_ASCII(txt[*i])) {
 802566c:	680b      	ldr	r3, [r1, #0]
 802566e:	56d5      	ldrsb	r5, [r2, r3]
        (*i)++;
 8025670:	1c5c      	adds	r4, r3, #1
    if(LV_IS_ASCII(txt[*i])) {
 8025672:	5cd0      	ldrb	r0, [r2, r3]
 8025674:	2d00      	cmp	r5, #0
 8025676:	db02      	blt.n	802567e <lv_txt_utf8_next+0x1e>
        (*i)++;
 8025678:	600c      	str	r4, [r1, #0]
}
 802567a:	b002      	add	sp, #8
 802567c:	bd70      	pop	{r4, r5, r6, pc}
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 802567e:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8025682:	2dc0      	cmp	r5, #192	; 0xc0
 8025684:	d10e      	bne.n	80256a4 <lv_txt_utf8_next+0x44>
            (*i)++;
 8025686:	600c      	str	r4, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8025688:	5d12      	ldrb	r2, [r2, r4]
 802568a:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 802568e:	2c80      	cmp	r4, #128	; 0x80
 8025690:	d14c      	bne.n	802572c <lv_txt_utf8_next+0xcc>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8025692:	0180      	lsls	r0, r0, #6
            result += (txt[*i] & 0x3F);
 8025694:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            (*i)++;
 8025698:	3302      	adds	r3, #2
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 802569a:	f400 60f8 	and.w	r0, r0, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 802569e:	4410      	add	r0, r2
            (*i)++;
 80256a0:	600b      	str	r3, [r1, #0]
 80256a2:	e7ea      	b.n	802567a <lv_txt_utf8_next+0x1a>
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 80256a4:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 80256a8:	2de0      	cmp	r5, #224	; 0xe0
 80256aa:	d117      	bne.n	80256dc <lv_txt_utf8_next+0x7c>
            (*i)++;
 80256ac:	600c      	str	r4, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80256ae:	5d14      	ldrb	r4, [r2, r4]
 80256b0:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 80256b4:	2d80      	cmp	r5, #128	; 0x80
 80256b6:	d139      	bne.n	802572c <lv_txt_utf8_next+0xcc>
            (*i)++;
 80256b8:	1c9d      	adds	r5, r3, #2
 80256ba:	600d      	str	r5, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80256bc:	5d52      	ldrb	r2, [r2, r5]
 80256be:	f002 05c0 	and.w	r5, r2, #192	; 0xc0
 80256c2:	2d80      	cmp	r5, #128	; 0x80
 80256c4:	d132      	bne.n	802572c <lv_txt_utf8_next+0xcc>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 80256c6:	0300      	lsls	r0, r0, #12
            result += (txt[*i] & 0x3F);
 80256c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80256cc:	01a4      	lsls	r4, r4, #6
            (*i)++;
 80256ce:	3303      	adds	r3, #3
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 80256d0:	b280      	uxth	r0, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80256d2:	f404 647c 	and.w	r4, r4, #4032	; 0xfc0
 80256d6:	4410      	add	r0, r2
            result += (txt[*i] & 0x3F);
 80256d8:	4420      	add	r0, r4
            (*i)++;
 80256da:	e7e1      	b.n	80256a0 <lv_txt_utf8_next+0x40>
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 80256dc:	f000 05f8 	and.w	r5, r0, #248	; 0xf8
            (*i)++;
 80256e0:	600c      	str	r4, [r1, #0]
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 80256e2:	2df0      	cmp	r5, #240	; 0xf0
 80256e4:	d122      	bne.n	802572c <lv_txt_utf8_next+0xcc>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80256e6:	5d14      	ldrb	r4, [r2, r4]
 80256e8:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 80256ec:	2d80      	cmp	r5, #128	; 0x80
 80256ee:	d11d      	bne.n	802572c <lv_txt_utf8_next+0xcc>
            (*i)++;
 80256f0:	1c9d      	adds	r5, r3, #2
 80256f2:	600d      	str	r5, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80256f4:	5d55      	ldrb	r5, [r2, r5]
 80256f6:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 80256fa:	2e80      	cmp	r6, #128	; 0x80
 80256fc:	d116      	bne.n	802572c <lv_txt_utf8_next+0xcc>
            (*i)++;
 80256fe:	1cde      	adds	r6, r3, #3
 8025700:	600e      	str	r6, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8025702:	5d92      	ldrb	r2, [r2, r6]
 8025704:	f002 06c0 	and.w	r6, r2, #192	; 0xc0
 8025708:	2e80      	cmp	r6, #128	; 0x80
 802570a:	d10f      	bne.n	802572c <lv_txt_utf8_next+0xcc>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 802570c:	0480      	lsls	r0, r0, #18
            result += txt[*i] & 0x3F;
 802570e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8025712:	0324      	lsls	r4, r4, #12
            (*i)++;
 8025714:	3304      	adds	r3, #4
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8025716:	01ad      	lsls	r5, r5, #6
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8025718:	f400 10e0 	and.w	r0, r0, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 802571c:	f404 347c 	and.w	r4, r4, #258048	; 0x3f000
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8025720:	f405 657c 	and.w	r5, r5, #4032	; 0xfc0
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8025724:	4304      	orrs	r4, r0
            result += txt[*i] & 0x3F;
 8025726:	4415      	add	r5, r2
 8025728:	1928      	adds	r0, r5, r4
            (*i)++;
 802572a:	e7b9      	b.n	80256a0 <lv_txt_utf8_next+0x40>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 802572c:	2000      	movs	r0, #0
 802572e:	e7a4      	b.n	802567a <lv_txt_utf8_next+0x1a>

08025730 <lv_txt_unicode_to_utf8>:
    if(letter_uni < 128) return letter_uni;
 8025730:	287f      	cmp	r0, #127	; 0x7f
{
 8025732:	b082      	sub	sp, #8
    if(letter_uni < 128) return letter_uni;
 8025734:	d915      	bls.n	8025762 <lv_txt_unicode_to_utf8+0x32>
    if(letter_uni < 0x0800) {
 8025736:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 802573a:	d214      	bcs.n	8025766 <lv_txt_unicode_to_utf8+0x36>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 802573c:	f3c0 1387 	ubfx	r3, r0, #6, #8
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8025740:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8025744:	2100      	movs	r1, #0
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8025746:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 802574a:	f040 0280 	orr.w	r2, r0, #128	; 0x80
        bytes[3] = 0;
 802574e:	2000      	movs	r0, #0
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8025750:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8025754:	f88d 2005 	strb.w	r2, [sp, #5]
        bytes[2] = 0;
 8025758:	f88d 1006 	strb.w	r1, [sp, #6]
        bytes[3] = 0;
 802575c:	f88d 0007 	strb.w	r0, [sp, #7]
    return *res_p;
 8025760:	9801      	ldr	r0, [sp, #4]
}
 8025762:	b002      	add	sp, #8
 8025764:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
 8025766:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 802576a:	d20c      	bcs.n	8025786 <lv_txt_unicode_to_utf8+0x56>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 802576c:	f3c0 3307 	ubfx	r3, r0, #12, #8
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8025770:	f3c0 1285 	ubfx	r2, r0, #6, #6
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8025774:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 8025778:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 802577c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8025780:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 8025784:	e7e3      	b.n	802574e <lv_txt_unicode_to_utf8+0x1e>
    else if(letter_uni < 0x110000) {
 8025786:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 802578a:	d210      	bcs.n	80257ae <lv_txt_unicode_to_utf8+0x7e>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 802578c:	f3c0 4387 	ubfx	r3, r0, #18, #8
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 8025790:	f3c0 3205 	ubfx	r2, r0, #12, #6
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8025794:	f3c0 1185 	ubfx	r1, r0, #6, #6
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8025798:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 802579c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 80257a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 80257a4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 80257a8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80257ac:	e7d0      	b.n	8025750 <lv_txt_unicode_to_utf8+0x20>
        return 0;
 80257ae:	2000      	movs	r0, #0
 80257b0:	e7d7      	b.n	8025762 <lv_txt_unicode_to_utf8+0x32>

080257b2 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80257b2:	2923      	cmp	r1, #35	; 0x23
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 80257b4:	7803      	ldrb	r3, [r0, #0]
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80257b6:	d10f      	bne.n	80257d8 <_lv_txt_is_cmd+0x26>
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 80257b8:	b913      	cbnz	r3, 80257c0 <_lv_txt_is_cmd+0xe>
            *state = LV_TEXT_CMD_STATE_PAR;
 80257ba:	2301      	movs	r3, #1
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 80257bc:	7003      	strb	r3, [r0, #0]
 80257be:	e009      	b.n	80257d4 <_lv_txt_is_cmd+0x22>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 80257c0:	2b01      	cmp	r3, #1
 80257c2:	f04f 0200 	mov.w	r2, #0
 80257c6:	d102      	bne.n	80257ce <_lv_txt_is_cmd+0x1c>
            *state = LV_TEXT_CMD_STATE_WAIT;
 80257c8:	7002      	strb	r2, [r0, #0]
    bool ret = false;
 80257ca:	2000      	movs	r0, #0
 80257cc:	4770      	bx	lr
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 80257ce:	2b02      	cmp	r3, #2
 80257d0:	d1fb      	bne.n	80257ca <_lv_txt_is_cmd+0x18>
            *state = LV_TEXT_CMD_STATE_WAIT;
 80257d2:	7002      	strb	r2, [r0, #0]
            ret    = true;
 80257d4:	2001      	movs	r0, #1
}
 80257d6:	4770      	bx	lr
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 80257d8:	2b01      	cmp	r3, #1
 80257da:	d1f6      	bne.n	80257ca <_lv_txt_is_cmd+0x18>
        if(c == ' ') {
 80257dc:	2920      	cmp	r1, #32
 80257de:	d1f9      	bne.n	80257d4 <_lv_txt_is_cmd+0x22>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 80257e0:	2302      	movs	r3, #2
 80257e2:	e7eb      	b.n	80257bc <_lv_txt_is_cmd+0xa>

080257e4 <_lv_txt_set_text_vfmt>:
{
 80257e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 80257e8:	460b      	mov	r3, r1
    va_copy(ap_copy, ap);
 80257ea:	9101      	str	r1, [sp, #4]
{
 80257ec:	460d      	mov	r5, r1
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 80257ee:	2100      	movs	r1, #0
 80257f0:	4602      	mov	r2, r0
{
 80257f2:	4606      	mov	r6, r0
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 80257f4:	4608      	mov	r0, r1
 80257f6:	f7dd faa5 	bl	8002d44 <vsnprintf>
    text = lv_mem_alloc(len + 1);
 80257fa:	f100 0801 	add.w	r8, r0, #1
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 80257fe:	4607      	mov	r7, r0
    text = lv_mem_alloc(len + 1);
 8025800:	4640      	mov	r0, r8
 8025802:	f7ec ff89 	bl	8012718 <lv_mem_alloc>
 8025806:	4604      	mov	r4, r0
    LV_ASSERT_MALLOC(text);
 8025808:	b900      	cbnz	r0, 802580c <_lv_txt_set_text_vfmt+0x28>
 802580a:	e7fe      	b.n	802580a <_lv_txt_set_text_vfmt+0x26>
    text[len] = 0; /*Ensure NULL termination*/
 802580c:	2300      	movs	r3, #0
    lv_vsnprintf(text, len + 1, fmt, ap);
 802580e:	4632      	mov	r2, r6
 8025810:	4641      	mov	r1, r8
    text[len] = 0; /*Ensure NULL termination*/
 8025812:	55c3      	strb	r3, [r0, r7]
    lv_vsnprintf(text, len + 1, fmt, ap);
 8025814:	462b      	mov	r3, r5
 8025816:	f7dd fa95 	bl	8002d44 <vsnprintf>
}
 802581a:	4620      	mov	r0, r4
 802581c:	b002      	add	sp, #8
 802581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08025822 <lv_txt_get_width>:
{
 8025822:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025826:	460f      	mov	r7, r1
 8025828:	b085      	sub	sp, #20
 802582a:	4690      	mov	r8, r2
 802582c:	461d      	mov	r5, r3
    if(txt == NULL) return 0;
 802582e:	4606      	mov	r6, r0
 8025830:	b920      	cbnz	r0, 802583c <lv_txt_get_width+0x1a>
 8025832:	2400      	movs	r4, #0
}
 8025834:	4620      	mov	r0, r4
 8025836:	b005      	add	sp, #20
 8025838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(font == NULL) return 0;
 802583c:	2a00      	cmp	r2, #0
 802583e:	d0f8      	beq.n	8025832 <lv_txt_get_width+0x10>
    if(txt[0] == '\0') return 0;
 8025840:	7803      	ldrb	r3, [r0, #0]
 8025842:	2b00      	cmp	r3, #0
 8025844:	d0f5      	beq.n	8025832 <lv_txt_get_width+0x10>
    uint32_t i                   = 0;
 8025846:	2400      	movs	r4, #0
 8025848:	9401      	str	r4, [sp, #4]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 802584a:	f88d 4003 	strb.w	r4, [sp, #3]
    if(length != 0) {
 802584e:	2900      	cmp	r1, #0
 8025850:	d0ef      	beq.n	8025832 <lv_txt_get_width+0x10>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8025852:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
 8025856:	f009 0901 	and.w	r9, r9, #1
 802585a:	e019      	b.n	8025890 <lv_txt_get_width+0x6e>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 802585c:	ab01      	add	r3, sp, #4
 802585e:	aa03      	add	r2, sp, #12
 8025860:	a902      	add	r1, sp, #8
 8025862:	4630      	mov	r0, r6
 8025864:	f7ed fbbc 	bl	8012fe0 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8025868:	f1b9 0f00 	cmp.w	r9, #0
 802586c:	d005      	beq.n	802587a <lv_txt_get_width+0x58>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 802586e:	9902      	ldr	r1, [sp, #8]
 8025870:	f10d 0003 	add.w	r0, sp, #3
 8025874:	f7ff ff9d 	bl	80257b2 <_lv_txt_is_cmd>
 8025878:	b950      	cbnz	r0, 8025890 <lv_txt_get_width+0x6e>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 802587a:	4640      	mov	r0, r8
 802587c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8025880:	f7fe fc0d 	bl	802409e <lv_font_get_glyph_width>
            if(char_width > 0) {
 8025884:	b203      	sxth	r3, r0
 8025886:	2b00      	cmp	r3, #0
 8025888:	dd02      	ble.n	8025890 <lv_txt_get_width+0x6e>
                width += letter_space;
 802588a:	442c      	add	r4, r5
 802588c:	4404      	add	r4, r0
 802588e:	b224      	sxth	r4, r4
        while(i < length) {
 8025890:	9b01      	ldr	r3, [sp, #4]
 8025892:	42bb      	cmp	r3, r7
 8025894:	d3e2      	bcc.n	802585c <lv_txt_get_width+0x3a>
        if(width > 0) {
 8025896:	2c00      	cmp	r4, #0
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 8025898:	bfc4      	itt	gt
 802589a:	1b65      	subgt	r5, r4, r5
 802589c:	b22c      	sxthgt	r4, r5
 802589e:	e7c9      	b.n	8025834 <lv_txt_get_width+0x12>

080258a0 <lv_txt_get_size>:
{
 80258a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_res->x = 0;
 80258a4:	2500      	movs	r5, #0
{
 80258a6:	b087      	sub	sp, #28
 80258a8:	4604      	mov	r4, r0
 80258aa:	4616      	mov	r6, r2
 80258ac:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
    if(text == NULL) return;
 80258b0:	460f      	mov	r7, r1
{
 80258b2:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80258b6:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
 80258ba:	9303      	str	r3, [sp, #12]
    size_res->x = 0;
 80258bc:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 80258be:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 80258c0:	b311      	cbz	r1, 8025908 <lv_txt_get_size+0x68>
    if(font == NULL) return;
 80258c2:	b30a      	cbz	r2, 8025908 <lv_txt_get_size+0x68>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80258c4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80258c8:	f01b 0f02 	tst.w	fp, #2
 80258cc:	bf18      	it	ne
 80258ce:	469a      	movne	sl, r3
 80258d0:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80258d4:	9304      	str	r3, [sp, #16]
    uint16_t letter_height = lv_font_get_line_height(font);
 80258d6:	8913      	ldrh	r3, [r2, #8]
 80258d8:	9302      	str	r3, [sp, #8]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80258da:	4443      	add	r3, r8
 80258dc:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 80258de:	5d7b      	ldrb	r3, [r7, r5]
 80258e0:	eb07 0905 	add.w	r9, r7, r5
 80258e4:	b99b      	cbnz	r3, 802590e <lv_txt_get_size+0x6e>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 80258e6:	b155      	cbz	r5, 80258fe <lv_txt_get_size+0x5e>
 80258e8:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 80258ec:	2b0a      	cmp	r3, #10
 80258ee:	d001      	beq.n	80258f4 <lv_txt_get_size+0x54>
 80258f0:	2b0d      	cmp	r3, #13
 80258f2:	d104      	bne.n	80258fe <lv_txt_get_size+0x5e>
        size_res->y += letter_height + line_space;
 80258f4:	9b02      	ldr	r3, [sp, #8]
 80258f6:	8862      	ldrh	r2, [r4, #2]
 80258f8:	4443      	add	r3, r8
 80258fa:	4413      	add	r3, r2
 80258fc:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 80258fe:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8025902:	bb33      	cbnz	r3, 8025952 <lv_txt_get_size+0xb2>
        size_res->y = letter_height;
 8025904:	9b04      	ldr	r3, [sp, #16]
        size_res->y -= line_space;
 8025906:	8063      	strh	r3, [r4, #2]
}
 8025908:	b007      	add	sp, #28
 802590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 802590e:	2300      	movs	r3, #0
 8025910:	9a03      	ldr	r2, [sp, #12]
 8025912:	4631      	mov	r1, r6
 8025914:	4648      	mov	r0, r9
 8025916:	9300      	str	r3, [sp, #0]
 8025918:	4653      	mov	r3, sl
 802591a:	f8cd b004 	str.w	fp, [sp, #4]
 802591e:	f7ed f9fd 	bl	8012d1c <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8025922:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8025926:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8025928:	4601      	mov	r1, r0
 802592a:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 802592c:	4413      	add	r3, r2
 802592e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8025932:	d2e9      	bcs.n	8025908 <lv_txt_get_size+0x68>
            size_res->y += line_space;
 8025934:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 8025936:	4632      	mov	r2, r6
 8025938:	9b03      	ldr	r3, [sp, #12]
 802593a:	4648      	mov	r0, r9
 802593c:	f8cd b000 	str.w	fp, [sp]
 8025940:	f7ff ff6f 	bl	8025822 <lv_txt_get_width>
        size_res->x = LV_MAX(act_line_length, size_res->x);
 8025944:	f9b4 3000 	ldrsh.w	r3, [r4]
 8025948:	4283      	cmp	r3, r0
 802594a:	bfb8      	it	lt
 802594c:	4603      	movlt	r3, r0
 802594e:	8023      	strh	r3, [r4, #0]
        line_start  = new_line_start;
 8025950:	e7c5      	b.n	80258de <lv_txt_get_size+0x3e>
        size_res->y -= line_space;
 8025952:	eba3 0308 	sub.w	r3, r3, r8
 8025956:	e7d6      	b.n	8025906 <lv_txt_get_size+0x66>

08025958 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8025958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802595c:	9d08      	ldr	r5, [sp, #32]
 802595e:	4680      	mov	r8, r0
 8025960:	460f      	mov	r7, r1
 8025962:	4614      	mov	r4, r2
 8025964:	4699      	mov	r9, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8025966:	b90c      	cbnz	r4, 802596c <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 8025968:	4626      	mov	r6, r4
 802596a:	e012      	b.n	8025992 <_lv_utils_bsearch+0x3a>
        middle += (n / 2) * size;
 802596c:	ea4f 0a54 	mov.w	sl, r4, lsr #1
        if((c = (*cmp)(key, middle)) > 0) {
 8025970:	4640      	mov	r0, r8
        middle += (n / 2) * size;
 8025972:	fb09 760a 	mla	r6, r9, sl, r7
        if((c = (*cmp)(key, middle)) > 0) {
 8025976:	4631      	mov	r1, r6
 8025978:	47a8      	blx	r5
 802597a:	2800      	cmp	r0, #0
 802597c:	dd08      	ble.n	8025990 <_lv_utils_bsearch+0x38>
            n    = (n / 2) - ((n & 1) == 0);
 802597e:	43e4      	mvns	r4, r4
            base = (middle += size);
 8025980:	eb06 0709 	add.w	r7, r6, r9
 8025984:	f004 0401 	and.w	r4, r4, #1
            n    = (n / 2) - ((n & 1) == 0);
 8025988:	ebaa 0a04 	sub.w	sl, sl, r4
{
 802598c:	4654      	mov	r4, sl
 802598e:	e7ea      	b.n	8025966 <_lv_utils_bsearch+0xe>
        else if(c < 0) {
 8025990:	d1fc      	bne.n	802598c <_lv_utils_bsearch+0x34>
}
 8025992:	4630      	mov	r0, r6
 8025994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08025998 <get_angle>:

    if(arc_r) *arc_r = r;
}

static lv_coord_t get_angle(const lv_obj_t * obj)
{
 8025998:	b530      	push	{r4, r5, lr}
    lv_arc_t * arc = (lv_arc_t *)obj;
    uint16_t angle = arc->rotation;
    if(arc->type == LV_ARC_MODE_NORMAL) {
 802599a:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
    uint16_t angle = arc->rotation;
 802599e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
    if(arc->type == LV_ARC_MODE_NORMAL) {
 80259a0:	f012 0206 	ands.w	r2, r2, #6
 80259a4:	d104      	bne.n	80259b0 <get_angle+0x18>
        angle += arc->indic_angle_end;
 80259a6:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    }
    else if(arc->type == LV_ARC_MODE_REVERSE) {
        angle += arc->indic_angle_start;
 80259a8:	441a      	add	r2, r3
 80259aa:	b293      	uxth	r3, r2
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
        else angle += angle_midpoint;
    }

    return angle;
}
 80259ac:	b218      	sxth	r0, r3
 80259ae:	bd30      	pop	{r4, r5, pc}
    else if(arc->type == LV_ARC_MODE_REVERSE) {
 80259b0:	2a04      	cmp	r2, #4
 80259b2:	d101      	bne.n	80259b8 <get_angle+0x20>
        angle += arc->indic_angle_start;
 80259b4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80259b6:	e7f7      	b.n	80259a8 <get_angle+0x10>
    else if(arc->type == LV_ARC_MODE_SYMMETRICAL) {
 80259b8:	2a02      	cmp	r2, #2
 80259ba:	d1f7      	bne.n	80259ac <get_angle+0x14>
        int16_t bg_end = arc->bg_angle_end;
 80259bc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
        if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 80259be:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;
 80259c0:	8cc5      	ldrh	r5, [r0, #38]	; 0x26
        if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 80259c2:	4291      	cmp	r1, r2
        int16_t indic_end = arc->indic_angle_end;
 80259c4:	8d04      	ldrh	r4, [r0, #40]	; 0x28
        if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 80259c6:	bf3c      	itt	cc
 80259c8:	f501 71b4 	addcc.w	r1, r1, #360	; 0x168
 80259cc:	b289      	uxthcc	r1, r1
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;
 80259ce:	42ac      	cmp	r4, r5
 80259d0:	b209      	sxth	r1, r1
 80259d2:	bf34      	ite	cc
 80259d4:	f504 70b4 	addcc.w	r0, r4, #360	; 0x168
 80259d8:	4620      	movcs	r0, r4
        int32_t angle_midpoint = (int32_t)(arc->bg_angle_start + bg_end) / 2;
 80259da:	440a      	add	r2, r1
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;
 80259dc:	bf38      	it	cc
 80259de:	b280      	uxthcc	r0, r0
        int32_t angle_midpoint = (int32_t)(arc->bg_angle_start + bg_end) / 2;
 80259e0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        if(arc->indic_angle_start < angle_midpoint) angle += arc->indic_angle_start;
 80259e4:	ebb5 0f62 	cmp.w	r5, r2, asr #1
        int32_t angle_midpoint = (int32_t)(arc->bg_angle_start + bg_end) / 2;
 80259e8:	ea4f 0162 	mov.w	r1, r2, asr #1
        if(arc->indic_angle_start < angle_midpoint) angle += arc->indic_angle_start;
 80259ec:	da02      	bge.n	80259f4 <get_angle+0x5c>
 80259ee:	441d      	add	r5, r3
 80259f0:	b2ab      	uxth	r3, r5
 80259f2:	e7db      	b.n	80259ac <get_angle+0x14>
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
 80259f4:	b200      	sxth	r0, r0
 80259f6:	4288      	cmp	r0, r1
 80259f8:	bfcb      	itete	gt
 80259fa:	18e4      	addgt	r4, r4, r3
        else angle += angle_midpoint;
 80259fc:	18c9      	addle	r1, r1, r3
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
 80259fe:	b2a3      	uxthgt	r3, r4
        else angle += angle_midpoint;
 8025a00:	b28b      	uxthle	r3, r1
 8025a02:	e7d3      	b.n	80259ac <get_angle+0x14>

08025a04 <lv_obj_get_style_arc_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8025a04:	2250      	movs	r2, #80	; 0x50
{
 8025a06:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8025a08:	f7f8 f86e 	bl	801dae8 <lv_obj_get_style_prop>
}
 8025a0c:	b200      	sxth	r0, r0
 8025a0e:	bd08      	pop	{r3, pc}

08025a10 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8025a10:	2212      	movs	r2, #18
{
 8025a12:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8025a14:	f7f8 f868 	bl	801dae8 <lv_obj_get_style_prop>
}
 8025a18:	b200      	sxth	r0, r0
 8025a1a:	bd08      	pop	{r3, pc}

08025a1c <lv_obj_get_style_pad_right>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8025a1c:	2213      	movs	r2, #19
{
 8025a1e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8025a20:	f7f8 f862 	bl	801dae8 <lv_obj_get_style_prop>
}
 8025a24:	b200      	sxth	r0, r0
 8025a26:	bd08      	pop	{r3, pc}

08025a28 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8025a28:	2210      	movs	r2, #16
{
 8025a2a:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8025a2c:	f7f8 f85c 	bl	801dae8 <lv_obj_get_style_prop>
}
 8025a30:	b200      	sxth	r0, r0
 8025a32:	bd08      	pop	{r3, pc}

08025a34 <lv_obj_get_style_pad_bottom>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8025a34:	2211      	movs	r2, #17
{
 8025a36:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8025a38:	f7f8 f856 	bl	801dae8 <lv_obj_get_style_prop>
}
 8025a3c:	b200      	sxth	r0, r0
 8025a3e:	bd08      	pop	{r3, pc}

08025a40 <get_center>:
{
 8025a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a44:	4604      	mov	r4, r0
 8025a46:	460f      	mov	r7, r1
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8025a48:	2100      	movs	r1, #0
{
 8025a4a:	4690      	mov	r8, r2
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8025a4c:	f7ff ffe0 	bl	8025a10 <lv_obj_get_style_pad_left>
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8025a50:	2100      	movs	r1, #0
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8025a52:	4606      	mov	r6, r0
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8025a54:	4620      	mov	r0, r4
 8025a56:	f7ff ffe1 	bl	8025a1c <lv_obj_get_style_pad_right>
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8025a5a:	2100      	movs	r1, #0
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8025a5c:	4682      	mov	sl, r0
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8025a5e:	4620      	mov	r0, r4
 8025a60:	f7ff ffe2 	bl	8025a28 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_bg = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8025a64:	2100      	movs	r1, #0
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8025a66:	4605      	mov	r5, r0
    lv_coord_t bottom_bg = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8025a68:	4620      	mov	r0, r4
 8025a6a:	f7ff ffe3 	bl	8025a34 <lv_obj_get_style_pad_bottom>
 8025a6e:	4681      	mov	r9, r0
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8025a70:	4620      	mov	r0, r4
 8025a72:	f7f6 ff13 	bl	801c89c <lv_obj_get_width>
 8025a76:	eba0 0b06 	sub.w	fp, r0, r6
 8025a7a:	4620      	mov	r0, r4
 8025a7c:	f7f6 ff14 	bl	801c8a8 <lv_obj_get_height>
 8025a80:	1b40      	subs	r0, r0, r5
 8025a82:	ebab 0b0a 	sub.w	fp, fp, sl
 8025a86:	eba0 0009 	sub.w	r0, r0, r9
 8025a8a:	4583      	cmp	fp, r0
 8025a8c:	4620      	mov	r0, r4
 8025a8e:	da16      	bge.n	8025abe <get_center+0x7e>
 8025a90:	f7f6 ff04 	bl	801c89c <lv_obj_get_width>
 8025a94:	1b83      	subs	r3, r0, r6
 8025a96:	eba3 030a 	sub.w	r3, r3, sl
    center->x = obj->coords.x1 + r + left_bg;
 8025a9a:	8aa2      	ldrh	r2, [r4, #20]
                           lv_obj_get_height(obj) - top_bg - bottom_bg)) / 2;
 8025a9c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    center->x = obj->coords.x1 + r + left_bg;
 8025aa0:	4416      	add	r6, r2
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8025aa2:	f343 034f 	sbfx	r3, r3, #1, #16
    center->x = obj->coords.x1 + r + left_bg;
 8025aa6:	fa16 f683 	uxtah	r6, r6, r3
 8025aaa:	803e      	strh	r6, [r7, #0]
    center->y = obj->coords.y1 + r + top_bg;
 8025aac:	8ae2      	ldrh	r2, [r4, #22]
 8025aae:	4415      	add	r5, r2
 8025ab0:	fa15 f583 	uxtah	r5, r5, r3
 8025ab4:	807d      	strh	r5, [r7, #2]
    if(arc_r) *arc_r = r;
 8025ab6:	f8a8 3000 	strh.w	r3, [r8]
}
 8025aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8025abe:	f7f6 fef3 	bl	801c8a8 <lv_obj_get_height>
 8025ac2:	1b43      	subs	r3, r0, r5
 8025ac4:	eba3 0309 	sub.w	r3, r3, r9
 8025ac8:	e7e7      	b.n	8025a9a <get_center+0x5a>

08025aca <get_knob_area>:


static void get_knob_area(lv_obj_t * obj, const lv_point_t * center, lv_coord_t r, lv_area_t * knob_area)
{
 8025aca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ace:	4688      	mov	r8, r1
    lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
 8025ad0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
{
 8025ad4:	4699      	mov	r9, r3
 8025ad6:	4616      	mov	r6, r2
 8025ad8:	4683      	mov	fp, r0
    lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
 8025ada:	f7ff ff93 	bl	8025a04 <lv_obj_get_style_arc_width>
    lv_coord_t indic_width_half = indic_width / 2;
 8025ade:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    r -= indic_width_half;
 8025ae2:	f3c0 044f 	ubfx	r4, r0, #1, #16

    lv_coord_t angle = get_angle(obj);
 8025ae6:	4658      	mov	r0, fp
 8025ae8:	f7ff ff56 	bl	8025998 <get_angle>
 8025aec:	4605      	mov	r5, r0
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8025aee:	305a      	adds	r0, #90	; 0x5a
    r -= indic_width_half;
 8025af0:	1b36      	subs	r6, r6, r4
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8025af2:	b200      	sxth	r0, r0
 8025af4:	f7ec fdd6 	bl	80126a4 <lv_trigo_sin>
 8025af8:	9001      	str	r0, [sp, #4]
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8025afa:	4628      	mov	r0, r5
    r -= indic_width_half;
 8025afc:	b236      	sxth	r6, r6
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8025afe:	f7ec fdd1 	bl	80126a4 <lv_trigo_sin>

    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8025b02:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8025b06:	4605      	mov	r5, r0
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8025b08:	4658      	mov	r0, fp
 8025b0a:	f7ff ff81 	bl	8025a10 <lv_obj_get_style_pad_left>
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8025b0e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8025b12:	9000      	str	r0, [sp, #0]
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8025b14:	4658      	mov	r0, fp
 8025b16:	f7ff ff81 	bl	8025a1c <lv_obj_get_style_pad_right>
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8025b1a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8025b1e:	4607      	mov	r7, r0
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8025b20:	4658      	mov	r0, fp
 8025b22:	f7ff ff81 	bl	8025a28 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8025b26:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8025b2a:	4682      	mov	sl, r0
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8025b2c:	4658      	mov	r0, fp
 8025b2e:	f7ff ff81 	bl	8025a34 <lv_obj_get_style_pad_bottom>

    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8025b32:	f8b8 1000 	ldrh.w	r1, [r8]
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8025b36:	9a01      	ldr	r2, [sp, #4]
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8025b38:	9b00      	ldr	r3, [sp, #0]
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8025b3a:	4372      	muls	r2, r6
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8025b3c:	1acb      	subs	r3, r1, r3
 8025b3e:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8025b42:	1b1b      	subs	r3, r3, r4
 8025b44:	4413      	add	r3, r2
 8025b46:	f8a9 3000 	strh.w	r3, [r9]
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 8025b4a:	f8b8 3000 	ldrh.w	r3, [r8]
 8025b4e:	441f      	add	r7, r3
 8025b50:	4427      	add	r7, r4
 8025b52:	443a      	add	r2, r7
 8025b54:	f8a9 2004 	strh.w	r2, [r9, #4]
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8025b58:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8025b5c:	fb06 f205 	mul.w	r2, r6, r5
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8025b60:	eba3 030a 	sub.w	r3, r3, sl
 8025b64:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8025b68:	1b1b      	subs	r3, r3, r4
 8025b6a:	4413      	add	r3, r2
 8025b6c:	f8a9 3002 	strh.w	r3, [r9, #2]
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 8025b70:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8025b74:	4418      	add	r0, r3
 8025b76:	4404      	add	r4, r0
 8025b78:	4422      	add	r2, r4
 8025b7a:	f8a9 2006 	strh.w	r2, [r9, #6]
}
 8025b7e:	b003      	add	sp, #12
 8025b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025b84 <inv_arc_area>:
{
 8025b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025b88:	b088      	sub	sp, #32
 8025b8a:	4607      	mov	r7, r0
 8025b8c:	460d      	mov	r5, r1
 8025b8e:	4616      	mov	r6, r2
 8025b90:	4698      	mov	r8, r3
    if(lv_obj_is_visible(obj) == false) return;
 8025b92:	f7f7 f93d 	bl	801ce10 <lv_obj_is_visible>
 8025b96:	2800      	cmp	r0, #0
 8025b98:	d047      	beq.n	8025c2a <inv_arc_area+0xa6>
    if(start_angle == end_angle) return;
 8025b9a:	42b5      	cmp	r5, r6
 8025b9c:	d045      	beq.n	8025c2a <inv_arc_area+0xa6>
    if(start_angle > 360) start_angle -= 360;
 8025b9e:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
    start_angle += arc->rotation;
 8025ba2:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
    get_center(obj, &c, &r);
 8025ba4:	f10d 0212 	add.w	r2, sp, #18
 8025ba8:	a905      	add	r1, sp, #20
    if(start_angle > 360) start_angle -= 360;
 8025baa:	bf88      	it	hi
 8025bac:	f5a5 75b4 	subhi.w	r5, r5, #360	; 0x168
    get_center(obj, &c, &r);
 8025bb0:	4638      	mov	r0, r7
    if(start_angle > 360) start_angle -= 360;
 8025bb2:	bf88      	it	hi
 8025bb4:	b2ad      	uxthhi	r5, r5
    if(end_angle > 360) end_angle -= 360;
 8025bb6:	f5b6 7fb4 	cmp.w	r6, #360	; 0x168
    start_angle += arc->rotation;
 8025bba:	4425      	add	r5, r4
    if(end_angle > 360) end_angle -= 360;
 8025bbc:	bf88      	it	hi
 8025bbe:	f5a6 76b4 	subhi.w	r6, r6, #360	; 0x168
    start_angle += arc->rotation;
 8025bc2:	b2ad      	uxth	r5, r5
    if(end_angle > 360) end_angle -= 360;
 8025bc4:	bf88      	it	hi
 8025bc6:	b2b6      	uxthhi	r6, r6
    if(start_angle > 360) start_angle -= 360;
 8025bc8:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
    end_angle += arc->rotation;
 8025bcc:	4434      	add	r4, r6
    if(start_angle > 360) start_angle -= 360;
 8025bce:	bf88      	it	hi
 8025bd0:	f5a5 75b4 	subhi.w	r5, r5, #360	; 0x168
    end_angle += arc->rotation;
 8025bd4:	b2a4      	uxth	r4, r4
    if(start_angle > 360) start_angle -= 360;
 8025bd6:	bf88      	it	hi
 8025bd8:	b2ad      	uxthhi	r5, r5
    if(end_angle > 360) end_angle -= 360;
 8025bda:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 8025bde:	bf84      	itt	hi
 8025be0:	f5a4 74b4 	subhi.w	r4, r4, #360	; 0x168
 8025be4:	b2a4      	uxthhi	r4, r4
    get_center(obj, &c, &r);
 8025be6:	f7ff ff2b 	bl	8025a40 <get_center>
    lv_coord_t w = lv_obj_get_style_arc_width(obj, part);
 8025bea:	4641      	mov	r1, r8
 8025bec:	4638      	mov	r0, r7
 8025bee:	f7ff ff09 	bl	8025a04 <lv_obj_get_style_arc_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8025bf2:	4641      	mov	r1, r8
 8025bf4:	4606      	mov	r6, r0
 8025bf6:	2251      	movs	r2, #81	; 0x51
 8025bf8:	4638      	mov	r0, r7
    lv_draw_arc_get_area(c.x, c.y, r, start_angle, end_angle, w, rounded, &inv_area);
 8025bfa:	f10d 0818 	add.w	r8, sp, #24
 8025bfe:	f7f7 ff73 	bl	801dae8 <lv_obj_get_style_prop>
    return (bool)v.num;
 8025c02:	3800      	subs	r0, #0
 8025c04:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8025c08:	462b      	mov	r3, r5
 8025c0a:	bf18      	it	ne
 8025c0c:	2001      	movne	r0, #1
 8025c0e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8025c12:	e9cd 0802 	strd	r0, r8, [sp, #8]
 8025c16:	e9cd 4600 	strd	r4, r6, [sp]
 8025c1a:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8025c1e:	f7e1 fd2b 	bl	8007678 <lv_draw_arc_get_area>
    lv_obj_invalidate_area(obj, &inv_area);
 8025c22:	4641      	mov	r1, r8
 8025c24:	4638      	mov	r0, r7
 8025c26:	f7f7 f818 	bl	801cc5a <lv_obj_invalidate_area>
}
 8025c2a:	b008      	add	sp, #32
 8025c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08025c30 <knob_get_extra_size>:
    }
    arc->last_angle = angle; /*Cache angle for slew rate limiting*/
}

static lv_coord_t knob_get_extra_size(lv_obj_t * obj)
{
 8025c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8025c32:	2240      	movs	r2, #64	; 0x40
 8025c34:	4605      	mov	r5, r0
 8025c36:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025c3a:	f7f7 ff55 	bl	801dae8 <lv_obj_get_style_prop>
 8025c3e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8025c40:	2243      	movs	r2, #67	; 0x43
 8025c42:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025c46:	4628      	mov	r0, r5
 8025c48:	f7f7 ff4e 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8025c4c:	2241      	movs	r2, #65	; 0x41
    lv_coord_t knob_shadow_size = 0;
    knob_shadow_size += lv_obj_get_style_shadow_width(obj, LV_PART_KNOB);
    knob_shadow_size += lv_obj_get_style_shadow_spread(obj, LV_PART_KNOB);
 8025c4e:	4404      	add	r4, r0
 8025c50:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025c54:	4628      	mov	r0, r5
 8025c56:	f7f7 ff47 	bl	801dae8 <lv_obj_get_style_prop>
 8025c5a:	2241      	movs	r2, #65	; 0x41
    return (lv_coord_t)v.num;
 8025c5c:	b200      	sxth	r0, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8025c5e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025c62:	b2a4      	uxth	r4, r4
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_x(obj, LV_PART_KNOB));
 8025c64:	2800      	cmp	r0, #0
 8025c66:	4628      	mov	r0, r5
 8025c68:	dd29      	ble.n	8025cbe <knob_get_extra_size+0x8e>
 8025c6a:	f7f7 ff3d 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025c6e:	b200      	sxth	r0, r0
 8025c70:	4404      	add	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8025c72:	2242      	movs	r2, #66	; 0x42
 8025c74:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025c78:	4628      	mov	r0, r5
 8025c7a:	f7f7 ff35 	bl	801dae8 <lv_obj_get_style_prop>
 8025c7e:	2242      	movs	r2, #66	; 0x42
    return (lv_coord_t)v.num;
 8025c80:	b200      	sxth	r0, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8025c82:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025c86:	b2a4      	uxth	r4, r4
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_y(obj, LV_PART_KNOB));
 8025c88:	2800      	cmp	r0, #0
 8025c8a:	4628      	mov	r0, r5
 8025c8c:	dd1c      	ble.n	8025cc8 <knob_get_extra_size+0x98>
 8025c8e:	f7f7 ff2b 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025c92:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8025c94:	2235      	movs	r2, #53	; 0x35
 8025c96:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025c9a:	4628      	mov	r0, r5
 8025c9c:	4434      	add	r4, r6
 8025c9e:	f7f7 ff23 	bl	801dae8 <lv_obj_get_style_prop>
 8025ca2:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8025ca4:	2238      	movs	r2, #56	; 0x38
 8025ca6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025caa:	4628      	mov	r0, r5
 8025cac:	f7f7 ff1c 	bl	801dae8 <lv_obj_get_style_prop>

    lv_coord_t knob_outline_size = 0;
    knob_outline_size += lv_obj_get_style_outline_width(obj, LV_PART_KNOB);
    knob_outline_size += lv_obj_get_style_outline_pad(obj, LV_PART_KNOB);
 8025cb0:	4407      	add	r7, r0

    return LV_MAX(knob_shadow_size, knob_outline_size);
 8025cb2:	b220      	sxth	r0, r4
 8025cb4:	b23f      	sxth	r7, r7
}
 8025cb6:	42b8      	cmp	r0, r7
 8025cb8:	bfb8      	it	lt
 8025cba:	4638      	movlt	r0, r7
 8025cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8025cbe:	f7f7 ff13 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025cc2:	b200      	sxth	r0, r0
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_x(obj, LV_PART_KNOB));
 8025cc4:	4240      	negs	r0, r0
 8025cc6:	e7d3      	b.n	8025c70 <knob_get_extra_size+0x40>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8025cc8:	f7f7 ff0e 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025ccc:	b206      	sxth	r6, r0
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_y(obj, LV_PART_KNOB));
 8025cce:	4276      	negs	r6, r6
 8025cd0:	e7e0      	b.n	8025c94 <knob_get_extra_size+0x64>

08025cd2 <inv_knob_area>:
{
 8025cd2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025cd4:	4604      	mov	r4, r0
    get_center(obj, &c, &r);
 8025cd6:	f10d 0202 	add.w	r2, sp, #2
 8025cda:	a901      	add	r1, sp, #4
 8025cdc:	f7ff feb0 	bl	8025a40 <get_center>
    get_knob_area(obj, &c, r, &a);
 8025ce0:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8025ce4:	ab02      	add	r3, sp, #8
 8025ce6:	a901      	add	r1, sp, #4
 8025ce8:	4620      	mov	r0, r4
 8025cea:	f7ff feee 	bl	8025aca <get_knob_area>
    lv_coord_t knob_extra_size = knob_get_extra_size(obj);
 8025cee:	4620      	mov	r0, r4
 8025cf0:	f7ff ff9e 	bl	8025c30 <knob_get_extra_size>
    if(knob_extra_size > 0) {
 8025cf4:	1e02      	subs	r2, r0, #0
 8025cf6:	dd03      	ble.n	8025d00 <inv_knob_area+0x2e>
        lv_area_increase(&a, knob_extra_size, knob_extra_size);
 8025cf8:	4611      	mov	r1, r2
 8025cfa:	a802      	add	r0, sp, #8
 8025cfc:	f7fe facd 	bl	802429a <lv_area_increase>
    lv_obj_invalidate_area(obj, &a);
 8025d00:	a902      	add	r1, sp, #8
 8025d02:	4620      	mov	r0, r4
 8025d04:	f7f6 ffa9 	bl	801cc5a <lv_obj_invalidate_area>
}
 8025d08:	b004      	add	sp, #16
 8025d0a:	bd10      	pop	{r4, pc}

08025d0c <lv_arc_set_start_angle>:
    if(start > 360) start -= 360;
 8025d0c:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8025d10:	b570      	push	{r4, r5, r6, lr}
 8025d12:	460c      	mov	r4, r1
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025d14:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    if(start > 360) start -= 360;
 8025d16:	bf88      	it	hi
 8025d18:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025d1c:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
{
 8025d1e:	4605      	mov	r5, r0
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025d20:	eba3 0201 	sub.w	r2, r3, r1
    if(start > 360) start -= 360;
 8025d24:	bf88      	it	hi
 8025d26:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025d28:	b296      	uxth	r6, r2
    int16_t new_delta = arc->indic_angle_end - start;
 8025d2a:	1b1b      	subs	r3, r3, r4
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025d2c:	b212      	sxth	r2, r2
    int16_t new_delta = arc->indic_angle_end - start;
 8025d2e:	b298      	uxth	r0, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025d30:	2a00      	cmp	r2, #0
    int16_t new_delta = arc->indic_angle_end - start;
 8025d32:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025d34:	bfbc      	itt	lt
 8025d36:	f506 72b4 	addlt.w	r2, r6, #360	; 0x168
 8025d3a:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8025d3c:	2b00      	cmp	r3, #0
 8025d3e:	bfbc      	itt	lt
 8025d40:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 8025d44:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8025d46:	1a98      	subs	r0, r3, r2
 8025d48:	2800      	cmp	r0, #0
 8025d4a:	bfb8      	it	lt
 8025d4c:	4240      	neglt	r0, r0
 8025d4e:	28b4      	cmp	r0, #180	; 0xb4
 8025d50:	dd0b      	ble.n	8025d6a <lv_arc_set_start_angle+0x5e>
 8025d52:	4628      	mov	r0, r5
 8025d54:	f7f6 ffa2 	bl	801cc9c <lv_obj_invalidate>
    inv_knob_area(obj);
 8025d58:	4628      	mov	r0, r5
 8025d5a:	f7ff ffba 	bl	8025cd2 <inv_knob_area>
    inv_knob_area(obj);
 8025d5e:	4628      	mov	r0, r5
    arc->indic_angle_start = start;
 8025d60:	84ec      	strh	r4, [r5, #38]	; 0x26
}
 8025d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    inv_knob_area(obj);
 8025d66:	f7ff bfb4 	b.w	8025cd2 <inv_knob_area>
    else if(new_delta < old_delta) inv_arc_area(obj, arc->indic_angle_start, start, LV_PART_INDICATOR);
 8025d6a:	429a      	cmp	r2, r3
 8025d6c:	dd06      	ble.n	8025d7c <lv_arc_set_start_angle+0x70>
 8025d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8025d72:	4622      	mov	r2, r4
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->indic_angle_start, LV_PART_INDICATOR);
 8025d74:	4628      	mov	r0, r5
 8025d76:	f7ff ff05 	bl	8025b84 <inv_arc_area>
 8025d7a:	e7ed      	b.n	8025d58 <lv_arc_set_start_angle+0x4c>
 8025d7c:	daec      	bge.n	8025d58 <lv_arc_set_start_angle+0x4c>
 8025d7e:	460a      	mov	r2, r1
 8025d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8025d84:	4621      	mov	r1, r4
 8025d86:	e7f5      	b.n	8025d74 <lv_arc_set_start_angle+0x68>

08025d88 <lv_arc_set_end_angle>:
    if(end > 360) end -= 360;
 8025d88:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8025d8c:	b570      	push	{r4, r5, r6, lr}
 8025d8e:	460c      	mov	r4, r1
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025d90:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    if(end > 360) end -= 360;
 8025d92:	bf88      	it	hi
 8025d94:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025d98:	8d01      	ldrh	r1, [r0, #40]	; 0x28
{
 8025d9a:	4605      	mov	r5, r0
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025d9c:	eba1 0203 	sub.w	r2, r1, r3
    if(end > 360) end -= 360;
 8025da0:	bf88      	it	hi
 8025da2:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025da4:	b296      	uxth	r6, r2
    int16_t new_delta = end - arc->indic_angle_start;
 8025da6:	1ae3      	subs	r3, r4, r3
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025da8:	b212      	sxth	r2, r2
    int16_t new_delta = end - arc->indic_angle_start;
 8025daa:	b298      	uxth	r0, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025dac:	2a00      	cmp	r2, #0
    int16_t new_delta = end - arc->indic_angle_start;
 8025dae:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025db0:	bfbc      	itt	lt
 8025db2:	f506 72b4 	addlt.w	r2, r6, #360	; 0x168
 8025db6:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8025db8:	2b00      	cmp	r3, #0
 8025dba:	bfbc      	itt	lt
 8025dbc:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 8025dc0:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8025dc2:	1a98      	subs	r0, r3, r2
 8025dc4:	2800      	cmp	r0, #0
 8025dc6:	bfb8      	it	lt
 8025dc8:	4240      	neglt	r0, r0
 8025dca:	28b4      	cmp	r0, #180	; 0xb4
 8025dcc:	dd0b      	ble.n	8025de6 <lv_arc_set_end_angle+0x5e>
 8025dce:	4628      	mov	r0, r5
 8025dd0:	f7f6 ff64 	bl	801cc9c <lv_obj_invalidate>
    inv_knob_area(obj);
 8025dd4:	4628      	mov	r0, r5
 8025dd6:	f7ff ff7c 	bl	8025cd2 <inv_knob_area>
    inv_knob_area(obj);
 8025dda:	4628      	mov	r0, r5
    arc->indic_angle_end = end;
 8025ddc:	852c      	strh	r4, [r5, #40]	; 0x28
}
 8025dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    inv_knob_area(obj);
 8025de2:	f7ff bf76 	b.w	8025cd2 <inv_knob_area>
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->indic_angle_end, LV_PART_INDICATOR);
 8025de6:	429a      	cmp	r2, r3
 8025de8:	dd07      	ble.n	8025dfa <lv_arc_set_end_angle+0x72>
 8025dea:	460a      	mov	r2, r1
 8025dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8025df0:	4621      	mov	r1, r4
    else if(old_delta < new_delta) inv_arc_area(obj, arc->indic_angle_end, end, LV_PART_INDICATOR);
 8025df2:	4628      	mov	r0, r5
 8025df4:	f7ff fec6 	bl	8025b84 <inv_arc_area>
 8025df8:	e7ec      	b.n	8025dd4 <lv_arc_set_end_angle+0x4c>
 8025dfa:	daeb      	bge.n	8025dd4 <lv_arc_set_end_angle+0x4c>
 8025dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8025e00:	4622      	mov	r2, r4
 8025e02:	e7f6      	b.n	8025df2 <lv_arc_set_end_angle+0x6a>

08025e04 <lv_arc_set_angles>:
{
 8025e04:	b538      	push	{r3, r4, r5, lr}
 8025e06:	4604      	mov	r4, r0
 8025e08:	460d      	mov	r5, r1
    lv_arc_set_end_angle(obj, end);
 8025e0a:	4611      	mov	r1, r2
 8025e0c:	f7ff ffbc 	bl	8025d88 <lv_arc_set_end_angle>
    lv_arc_set_start_angle(obj, start);
 8025e10:	4629      	mov	r1, r5
 8025e12:	4620      	mov	r0, r4
}
 8025e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_arc_set_start_angle(obj, start);
 8025e18:	f7ff bf78 	b.w	8025d0c <lv_arc_set_start_angle>

08025e1c <value_update>:
{
 8025e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025e1e:	4604      	mov	r4, r0
    if(arc->value == VALUE_UNSET) return;
 8025e20:	f9b0 002e 	ldrsh.w	r0, [r0, #46]	; 0x2e
 8025e24:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8025e28:	d03f      	beq.n	8025eaa <value_update+0x8e>
    int16_t bg_midpoint, range_midpoint, bg_end = arc->bg_angle_end;
 8025e2a:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
    if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 8025e2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    switch(arc->type) {
 8025e2e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 8025e32:	429d      	cmp	r5, r3
    switch(arc->type) {
 8025e34:	f3c2 0241 	ubfx	r2, r2, #1, #2
    if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 8025e38:	bf3c      	itt	cc
 8025e3a:	f505 75b4 	addcc.w	r5, r5, #360	; 0x168
 8025e3e:	b2ad      	uxthcc	r5, r5
    switch(arc->type) {
 8025e40:	2a01      	cmp	r2, #1
 8025e42:	b22d      	sxth	r5, r5
 8025e44:	d00d      	beq.n	8025e62 <value_update+0x46>
 8025e46:	2a02      	cmp	r2, #2
 8025e48:	d03d      	beq.n	8025ec6 <value_update+0xaa>
 8025e4a:	bb72      	cbnz	r2, 8025eaa <value_update+0x8e>
            angle = lv_map(arc->value, arc->min_value, arc->max_value, arc->bg_angle_start, bg_end);
 8025e4c:	9500      	str	r5, [sp, #0]
 8025e4e:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 8025e52:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8025e56:	f7fe ff15 	bl	8024c84 <lv_map>
            lv_arc_set_angles(obj, arc->bg_angle_start, angle);
 8025e5a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
            angle = lv_map(arc->value, arc->min_value, arc->max_value, arc->bg_angle_start, bg_end);
 8025e5c:	b205      	sxth	r5, r0
            lv_arc_set_angles(obj, arc->bg_angle_start, angle);
 8025e5e:	b282      	uxth	r2, r0
 8025e60:	e03c      	b.n	8025edc <value_update+0xc0>
            range_midpoint = (int32_t)(arc->min_value + arc->max_value) / 2;
 8025e62:	f9b4 c030 	ldrsh.w	ip, [r4, #48]	; 0x30
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 8025e66:	195f      	adds	r7, r3, r5
            range_midpoint = (int32_t)(arc->min_value + arc->max_value) / 2;
 8025e68:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 8025e6c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
            range_midpoint = (int32_t)(arc->min_value + arc->max_value) / 2;
 8025e70:	eb0c 0602 	add.w	r6, ip, r2
                angle = lv_map(arc->value, arc->min_value, range_midpoint, arc->bg_angle_start, bg_midpoint);
 8025e74:	f347 0e4f 	sbfx	lr, r7, #1, #16
                lv_arc_set_end_angle(obj, bg_midpoint);
 8025e78:	f3c7 074f 	ubfx	r7, r7, #1, #16
            range_midpoint = (int32_t)(arc->min_value + arc->max_value) / 2;
 8025e7c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8025e80:	1071      	asrs	r1, r6, #1
            if(arc->value < range_midpoint) {
 8025e82:	f346 064f 	sbfx	r6, r6, #1, #16
 8025e86:	42b0      	cmp	r0, r6
 8025e88:	da11      	bge.n	8025eae <value_update+0x92>
                angle = lv_map(arc->value, arc->min_value, range_midpoint, arc->bg_angle_start, bg_midpoint);
 8025e8a:	460a      	mov	r2, r1
 8025e8c:	f8cd e000 	str.w	lr, [sp]
 8025e90:	4661      	mov	r1, ip
 8025e92:	f7fe fef7 	bl	8024c84 <lv_map>
                lv_arc_set_start_angle(obj, angle);
 8025e96:	b281      	uxth	r1, r0
                angle = lv_map(arc->value, arc->min_value, range_midpoint, arc->bg_angle_start, bg_midpoint);
 8025e98:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, angle);
 8025e9a:	4620      	mov	r0, r4
 8025e9c:	f7ff ff36 	bl	8025d0c <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, bg_midpoint);
 8025ea0:	4639      	mov	r1, r7
                lv_arc_set_end_angle(obj, angle);
 8025ea2:	4620      	mov	r0, r4
 8025ea4:	f7ff ff70 	bl	8025d88 <lv_arc_set_end_angle>
    arc->last_angle = angle; /*Cache angle for slew rate limiting*/
 8025ea8:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 8025eaa:	b003      	add	sp, #12
 8025eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
                angle = lv_map(arc->value, range_midpoint, arc->max_value, bg_midpoint, bg_end);
 8025eae:	4673      	mov	r3, lr
 8025eb0:	9500      	str	r5, [sp, #0]
 8025eb2:	f7fe fee7 	bl	8024c84 <lv_map>
 8025eb6:	4606      	mov	r6, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 8025eb8:	4639      	mov	r1, r7
                angle = lv_map(arc->value, range_midpoint, arc->max_value, bg_midpoint, bg_end);
 8025eba:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 8025ebc:	4620      	mov	r0, r4
 8025ebe:	f7ff ff25 	bl	8025d0c <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, angle);
 8025ec2:	b2b1      	uxth	r1, r6
 8025ec4:	e7ed      	b.n	8025ea2 <value_update+0x86>
            angle = lv_map(arc->value, arc->min_value, arc->max_value, bg_end, arc->bg_angle_start);
 8025ec6:	9300      	str	r3, [sp, #0]
 8025ec8:	462b      	mov	r3, r5
 8025eca:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 8025ece:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8025ed2:	f7fe fed7 	bl	8024c84 <lv_map>
            lv_arc_set_angles(obj, angle, arc->bg_angle_end);
 8025ed6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
            angle = lv_map(arc->value, arc->min_value, arc->max_value, bg_end, arc->bg_angle_start);
 8025ed8:	b205      	sxth	r5, r0
            lv_arc_set_angles(obj, angle, arc->bg_angle_end);
 8025eda:	b281      	uxth	r1, r0
            lv_arc_set_angles(obj, arc->bg_angle_start, angle);
 8025edc:	4620      	mov	r0, r4
 8025ede:	f7ff ff91 	bl	8025e04 <lv_arc_set_angles>
            break;
 8025ee2:	e7e1      	b.n	8025ea8 <value_update+0x8c>

08025ee4 <lv_arc_set_bg_start_angle>:
    if(start > 360) start -= 360;
 8025ee4:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8025ee8:	b570      	push	{r4, r5, r6, lr}
 8025eea:	460c      	mov	r4, r1
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025eec:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    if(start > 360) start -= 360;
 8025eee:	bf88      	it	hi
 8025ef0:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025ef4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
{
 8025ef6:	4605      	mov	r5, r0
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025ef8:	eba3 0201 	sub.w	r2, r3, r1
    if(start > 360) start -= 360;
 8025efc:	bf88      	it	hi
 8025efe:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025f00:	b296      	uxth	r6, r2
    int16_t new_delta = arc->bg_angle_end - start;
 8025f02:	1b1b      	subs	r3, r3, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025f04:	b212      	sxth	r2, r2
    int16_t new_delta = arc->bg_angle_end - start;
 8025f06:	b298      	uxth	r0, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025f08:	2a00      	cmp	r2, #0
    int16_t new_delta = arc->bg_angle_end - start;
 8025f0a:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025f0c:	bfbc      	itt	lt
 8025f0e:	f506 72b4 	addlt.w	r2, r6, #360	; 0x168
 8025f12:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8025f14:	2b00      	cmp	r3, #0
 8025f16:	bfbc      	itt	lt
 8025f18:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 8025f1c:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8025f1e:	1a98      	subs	r0, r3, r2
 8025f20:	2800      	cmp	r0, #0
 8025f22:	bfb8      	it	lt
 8025f24:	4240      	neglt	r0, r0
 8025f26:	28b4      	cmp	r0, #180	; 0xb4
 8025f28:	dd08      	ble.n	8025f3c <lv_arc_set_bg_start_angle+0x58>
 8025f2a:	4628      	mov	r0, r5
 8025f2c:	f7f6 feb6 	bl	801cc9c <lv_obj_invalidate>
    value_update(obj);
 8025f30:	4628      	mov	r0, r5
    arc->bg_angle_start = start;
 8025f32:	856c      	strh	r4, [r5, #42]	; 0x2a
}
 8025f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    value_update(obj);
 8025f38:	f7ff bf70 	b.w	8025e1c <value_update>
    else if(new_delta < old_delta) inv_arc_area(obj, arc->bg_angle_start, start, LV_PART_MAIN);
 8025f3c:	429a      	cmp	r2, r3
 8025f3e:	dd05      	ble.n	8025f4c <lv_arc_set_bg_start_angle+0x68>
 8025f40:	2300      	movs	r3, #0
 8025f42:	4622      	mov	r2, r4
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->bg_angle_start, LV_PART_MAIN);
 8025f44:	4628      	mov	r0, r5
 8025f46:	f7ff fe1d 	bl	8025b84 <inv_arc_area>
 8025f4a:	e7f1      	b.n	8025f30 <lv_arc_set_bg_start_angle+0x4c>
 8025f4c:	daf0      	bge.n	8025f30 <lv_arc_set_bg_start_angle+0x4c>
 8025f4e:	460a      	mov	r2, r1
 8025f50:	2300      	movs	r3, #0
 8025f52:	4621      	mov	r1, r4
 8025f54:	e7f6      	b.n	8025f44 <lv_arc_set_bg_start_angle+0x60>

08025f56 <lv_arc_set_bg_end_angle>:
    if(end > 360) end -= 360;
 8025f56:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8025f5a:	b570      	push	{r4, r5, r6, lr}
 8025f5c:	460c      	mov	r4, r1
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025f5e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    if(end > 360) end -= 360;
 8025f60:	bf88      	it	hi
 8025f62:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025f66:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
{
 8025f68:	4605      	mov	r5, r0
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025f6a:	eba1 0203 	sub.w	r2, r1, r3
    if(end > 360) end -= 360;
 8025f6e:	bf88      	it	hi
 8025f70:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025f72:	b296      	uxth	r6, r2
    int16_t new_delta = end - arc->bg_angle_start;
 8025f74:	1ae3      	subs	r3, r4, r3
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025f76:	b212      	sxth	r2, r2
    int16_t new_delta = end - arc->bg_angle_start;
 8025f78:	b298      	uxth	r0, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025f7a:	2a00      	cmp	r2, #0
    int16_t new_delta = end - arc->bg_angle_start;
 8025f7c:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025f7e:	bfbc      	itt	lt
 8025f80:	f506 72b4 	addlt.w	r2, r6, #360	; 0x168
 8025f84:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8025f86:	2b00      	cmp	r3, #0
 8025f88:	bfbc      	itt	lt
 8025f8a:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 8025f8e:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8025f90:	1a98      	subs	r0, r3, r2
 8025f92:	2800      	cmp	r0, #0
 8025f94:	bfb8      	it	lt
 8025f96:	4240      	neglt	r0, r0
 8025f98:	28b4      	cmp	r0, #180	; 0xb4
 8025f9a:	dd08      	ble.n	8025fae <lv_arc_set_bg_end_angle+0x58>
 8025f9c:	4628      	mov	r0, r5
 8025f9e:	f7f6 fe7d 	bl	801cc9c <lv_obj_invalidate>
    value_update(obj);
 8025fa2:	4628      	mov	r0, r5
    arc->bg_angle_end = end;
 8025fa4:	85ac      	strh	r4, [r5, #44]	; 0x2c
}
 8025fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    value_update(obj);
 8025faa:	f7ff bf37 	b.w	8025e1c <value_update>
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->bg_angle_end, LV_PART_MAIN);
 8025fae:	429a      	cmp	r2, r3
 8025fb0:	dd06      	ble.n	8025fc0 <lv_arc_set_bg_end_angle+0x6a>
 8025fb2:	460a      	mov	r2, r1
 8025fb4:	2300      	movs	r3, #0
 8025fb6:	4621      	mov	r1, r4
    else if(old_delta < new_delta) inv_arc_area(obj, arc->bg_angle_end, end, LV_PART_MAIN);
 8025fb8:	4628      	mov	r0, r5
 8025fba:	f7ff fde3 	bl	8025b84 <inv_arc_area>
 8025fbe:	e7f0      	b.n	8025fa2 <lv_arc_set_bg_end_angle+0x4c>
 8025fc0:	daef      	bge.n	8025fa2 <lv_arc_set_bg_end_angle+0x4c>
 8025fc2:	2300      	movs	r3, #0
 8025fc4:	4622      	mov	r2, r4
 8025fc6:	e7f7      	b.n	8025fb8 <lv_arc_set_bg_end_angle+0x62>

08025fc8 <lv_arc_set_bg_angles>:
{
 8025fc8:	b538      	push	{r3, r4, r5, lr}
 8025fca:	4604      	mov	r4, r0
 8025fcc:	460d      	mov	r5, r1
    lv_arc_set_bg_end_angle(obj, end);
 8025fce:	4611      	mov	r1, r2
 8025fd0:	f7ff ffc1 	bl	8025f56 <lv_arc_set_bg_end_angle>
    lv_arc_set_bg_start_angle(obj, start);
 8025fd4:	4629      	mov	r1, r5
 8025fd6:	4620      	mov	r0, r4
}
 8025fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_arc_set_bg_start_angle(obj, start);
 8025fdc:	f7ff bf82 	b.w	8025ee4 <lv_arc_set_bg_start_angle>

08025fe0 <lv_arc_set_rotation>:
    arc->rotation = rotation;
 8025fe0:	8481      	strh	r1, [r0, #36]	; 0x24
    lv_obj_invalidate(obj);
 8025fe2:	f7f6 be5b 	b.w	801cc9c <lv_obj_invalidate>

08025fe6 <lv_arc_set_value>:
{
 8025fe6:	b410      	push	{r4}
    if(arc->value == value) return;
 8025fe8:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 8025fec:	428c      	cmp	r4, r1
 8025fee:	d00f      	beq.n	8026010 <lv_arc_set_value+0x2a>
    new_value = value > arc->max_value ? arc->max_value : value;
 8025ff0:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	; 0x32
 8025ff4:	428a      	cmp	r2, r1
 8025ff6:	bfa8      	it	ge
 8025ff8:	460a      	movge	r2, r1
    new_value = new_value < arc->min_value ? arc->min_value : new_value;
 8025ffa:	f9b0 1030 	ldrsh.w	r1, [r0, #48]	; 0x30
 8025ffe:	4291      	cmp	r1, r2
 8026000:	bfb8      	it	lt
 8026002:	4611      	movlt	r1, r2
    if(arc->value == new_value) return;
 8026004:	428c      	cmp	r4, r1
 8026006:	d003      	beq.n	8026010 <lv_arc_set_value+0x2a>
}
 8026008:	bc10      	pop	{r4}
    arc->value = new_value;
 802600a:	85c1      	strh	r1, [r0, #46]	; 0x2e
    value_update(obj);
 802600c:	f7ff bf06 	b.w	8025e1c <value_update>
}
 8026010:	bc10      	pop	{r4}
 8026012:	4770      	bx	lr

08026014 <lv_area_get_width>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8026014:	8883      	ldrh	r3, [r0, #4]
 8026016:	8802      	ldrh	r2, [r0, #0]
 8026018:	3301      	adds	r3, #1
 802601a:	1a98      	subs	r0, r3, r2
}
 802601c:	b200      	sxth	r0, r0
 802601e:	4770      	bx	lr

08026020 <lv_area_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8026020:	88c3      	ldrh	r3, [r0, #6]
 8026022:	8842      	ldrh	r2, [r0, #2]
 8026024:	3301      	adds	r3, #1
 8026026:	1a98      	subs	r0, r3, r2
}
 8026028:	b200      	sxth	r0, r0
 802602a:	4770      	bx	lr

0802602c <lv_bar_destructor>:
{
 802602c:	b510      	push	{r4, lr}
 802602e:	460c      	mov	r4, r1
    lv_anim_del(&bar->cur_value_anim, NULL);
 8026030:	2100      	movs	r1, #0
 8026032:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8026036:	f7ec f9b3 	bl	80123a0 <lv_anim_del>
    lv_anim_del(&bar->start_value_anim, NULL);
 802603a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 802603e:	2100      	movs	r1, #0
}
 8026040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_anim_del(&bar->start_value_anim, NULL);
 8026044:	f7ec b9ac 	b.w	80123a0 <lv_anim_del>

08026048 <lv_bar_anim_ready>:
    _lv_bar_anim_t * var = a->var;
 8026048:	6803      	ldr	r3, [r0, #0]
    var->anim_state = LV_BAR_ANIM_STATE_INV;
 802604a:	f04f 31ff 	mov.w	r1, #4294967295
    lv_obj_t * obj = (lv_obj_t *)var->bar;
 802604e:	681a      	ldr	r2, [r3, #0]
    var->anim_state = LV_BAR_ANIM_STATE_INV;
 8026050:	60d9      	str	r1, [r3, #12]
    if(var == &bar->cur_value_anim)
 8026052:	f102 013c 	add.w	r1, r2, #60	; 0x3c
 8026056:	428b      	cmp	r3, r1
 8026058:	d104      	bne.n	8026064 <lv_bar_anim_ready+0x1c>
        bar->cur_value = var->anim_end;
 802605a:	6899      	ldr	r1, [r3, #8]
 802605c:	6251      	str	r1, [r2, #36]	; 0x24
    lv_obj_invalidate(var->bar);
 802605e:	6818      	ldr	r0, [r3, #0]
 8026060:	f7f6 be1c 	b.w	801cc9c <lv_obj_invalidate>
    else if(var == &bar->start_value_anim)
 8026064:	f102 014c 	add.w	r1, r2, #76	; 0x4c
 8026068:	428b      	cmp	r3, r1
        bar->start_value = var->anim_end;
 802606a:	bf04      	itt	eq
 802606c:	6899      	ldreq	r1, [r3, #8]
 802606e:	6311      	streq	r1, [r2, #48]	; 0x30
 8026070:	e7f5      	b.n	802605e <lv_bar_anim_ready+0x16>

08026072 <lv_bar_anim>:
    bar_anim->anim_state    = value;
 8026072:	60c1      	str	r1, [r0, #12]
    lv_obj_invalidate(bar_anim->bar);
 8026074:	6800      	ldr	r0, [r0, #0]
 8026076:	f7f6 be11 	b.w	801cc9c <lv_obj_invalidate>

0802607a <lv_bar_set_value>:
{
 802607a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(bar->cur_value == value) return;
 802607c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802607e:	428e      	cmp	r6, r1
 8026080:	d015      	beq.n	80260ae <lv_bar_set_value+0x34>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 8026082:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8026084:	4299      	cmp	r1, r3
 8026086:	bfa8      	it	ge
 8026088:	4619      	movge	r1, r3
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller than the left value*/
 802608a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 802608c:	460d      	mov	r5, r1
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller than the left value*/
 802608e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8026090:	4299      	cmp	r1, r3
 8026092:	bfb8      	it	lt
 8026094:	4619      	movlt	r1, r3
 8026096:	42a9      	cmp	r1, r5
 8026098:	bfb8      	it	lt
 802609a:	4629      	movlt	r1, r5
    if(bar->cur_value == value) return;
 802609c:	428e      	cmp	r6, r1
 802609e:	d006      	beq.n	80260ae <lv_bar_set_value+0x34>
    lv_bar_set_value_with_anim(obj, value, &bar->cur_value, &bar->cur_value_anim, anim);
 80260a0:	9200      	str	r2, [sp, #0]
 80260a2:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 80260a6:	f100 0224 	add.w	r2, r0, #36	; 0x24
 80260aa:	f7ed fad7 	bl	801365c <lv_bar_set_value_with_anim>
}
 80260ae:	b002      	add	sp, #8
 80260b0:	bd70      	pop	{r4, r5, r6, pc}

080260b2 <lv_bar_constructor>:
{
 80260b2:	b538      	push	{r3, r4, r5, lr}
    bar->cur_value = 0;
 80260b4:	2500      	movs	r5, #0
    bar->max_value = 100;
 80260b6:	2364      	movs	r3, #100	; 0x64
{
 80260b8:	460c      	mov	r4, r1

static void lv_bar_init_anim(lv_obj_t * obj, _lv_bar_anim_t * bar_anim)
{
    bar_anim->bar = obj;
    bar_anim->anim_start = 0;
    bar_anim->anim_end = 0;
 80260ba:	644d      	str	r5, [r1, #68]	; 0x44
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 80260bc:	4620      	mov	r0, r4
    bar->start_value = 0;
 80260be:	e9c1 350b 	strd	r3, r5, [r1, #44]	; 0x2c
    bar->mode = LV_BAR_MODE_NORMAL;
 80260c2:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
 80260c6:	f365 0301 	bfi	r3, r5, #0, #2
 80260ca:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 80260ce:	f04f 33ff 	mov.w	r3, #4294967295
    bar->min_value = 0;
 80260d2:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    bar_anim->bar = obj;
 80260d6:	e9c1 3112 	strd	r3, r1, [r1, #72]	; 0x48
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 80260da:	658b      	str	r3, [r1, #88]	; 0x58
    bar->indic_area.x2 = 0;
 80260dc:	e9c1 550d 	strd	r5, r5, [r1, #52]	; 0x34
    bar_anim->anim_start = 0;
 80260e0:	e9c1 150f 	strd	r1, r5, [r1, #60]	; 0x3c
    bar_anim->anim_end = 0;
 80260e4:	e9c1 5514 	strd	r5, r5, [r1, #80]	; 0x50
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 80260e8:	2108      	movs	r1, #8
 80260ea:	f7f5 fc74 	bl	801b9d6 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 80260ee:	4620      	mov	r0, r4
 80260f0:	2110      	movs	r1, #16
 80260f2:	f7f5 fc70 	bl	801b9d6 <lv_obj_clear_flag>
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 80260f6:	462a      	mov	r2, r5
 80260f8:	4629      	mov	r1, r5
 80260fa:	4620      	mov	r0, r4
}
 80260fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 8026100:	f7ff bfbb 	b.w	802607a <lv_bar_set_value>

08026104 <lv_bar_set_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) {
 8026104:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8026108:	f003 0303 	and.w	r3, r3, #3
 802610c:	2b02      	cmp	r3, #2
{
 802610e:	b513      	push	{r0, r1, r4, lr}
    if(bar->mode != LV_BAR_MODE_RANGE) {
 8026110:	d115      	bne.n	802613e <lv_bar_set_start_value+0x3a>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 8026112:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8026114:	4299      	cmp	r1, r3
 8026116:	bfa8      	it	ge
 8026118:	4619      	movge	r1, r3
 802611a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802611c:	4299      	cmp	r1, r3
 802611e:	bfb8      	it	lt
 8026120:	4619      	movlt	r1, r3
    value = value > bar->cur_value ? bar->cur_value : value; /*Can't be greater than the right value*/
 8026122:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8026124:	4299      	cmp	r1, r3
 8026126:	bfa8      	it	ge
 8026128:	4619      	movge	r1, r3
    if(bar->start_value == value) return;
 802612a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 802612c:	428b      	cmp	r3, r1
 802612e:	d006      	beq.n	802613e <lv_bar_set_start_value+0x3a>
    lv_bar_set_value_with_anim(obj, value, &bar->start_value, &bar->start_value_anim, anim);
 8026130:	9200      	str	r2, [sp, #0]
 8026132:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 8026136:	f100 0230 	add.w	r2, r0, #48	; 0x30
 802613a:	f7ed fa8f 	bl	801365c <lv_bar_set_value_with_anim>
}
 802613e:	b002      	add	sp, #8
 8026140:	bd10      	pop	{r4, pc}

08026142 <lv_bar_get_value>:
    return LV_BAR_GET_ANIM_VALUE(bar->cur_value, bar->cur_value_anim);
 8026142:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8026144:	3301      	adds	r3, #1
 8026146:	bf14      	ite	ne
 8026148:	6c40      	ldrne	r0, [r0, #68]	; 0x44
 802614a:	6a40      	ldreq	r0, [r0, #36]	; 0x24
}
 802614c:	4770      	bx	lr

0802614e <lv_bar_get_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) return bar->min_value;
 802614e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8026152:	f003 0303 	and.w	r3, r3, #3
 8026156:	2b02      	cmp	r3, #2
 8026158:	d001      	beq.n	802615e <lv_bar_get_start_value+0x10>
 802615a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 802615c:	4770      	bx	lr
    return LV_BAR_GET_ANIM_VALUE(bar->start_value, bar->start_value_anim);
 802615e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8026160:	3301      	adds	r3, #1
 8026162:	bf14      	ite	ne
 8026164:	6d40      	ldrne	r0, [r0, #84]	; 0x54
 8026166:	6b00      	ldreq	r0, [r0, #48]	; 0x30
}
 8026168:	4770      	bx	lr

0802616a <lv_bar_get_mode>:
    return bar->mode;
 802616a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
}
 802616e:	f000 0003 	and.w	r0, r0, #3
 8026172:	4770      	bx	lr

08026174 <lv_btn_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_btn_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8026174:	b510      	push	{r4, lr}
 8026176:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8026178:	2110      	movs	r1, #16
 802617a:	4620      	mov	r0, r4
 802617c:	f7f5 fc2b 	bl	801b9d6 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8026180:	4620      	mov	r0, r4
 8026182:	f44f 6180 	mov.w	r1, #1024	; 0x400

    LV_TRACE_OBJ_CREATE("finished");
}
 8026186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 802618a:	f7f5 bbee 	b.w	801b96a <lv_obj_add_flag>

0802618e <lv_btnmatrix_destructor>:
{
 802618e:	b510      	push	{r4, lr}
 8026190:	460c      	mov	r4, r1
    lv_mem_free(btnm->button_areas);
 8026192:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8026194:	f7ec fade 	bl	8012754 <lv_mem_free>
    lv_mem_free(btnm->ctrl_bits);
 8026198:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802619a:	f7ec fadb 	bl	8012754 <lv_mem_free>
    btnm->button_areas = NULL;
 802619e:	2300      	movs	r3, #0
    btnm->ctrl_bits = NULL;
 80261a0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
}
 80261a4:	bd10      	pop	{r4, pc}

080261a6 <lv_obj_get_style_pad_column.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80261a6:	2215      	movs	r2, #21
 80261a8:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
 80261aa:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80261ac:	f7f7 fc9c 	bl	801dae8 <lv_obj_get_style_prop>
}
 80261b0:	b200      	sxth	r0, r0
 80261b2:	bd08      	pop	{r3, pc}

080261b4 <get_button_from_point>:
{
 80261b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261b8:	b08b      	sub	sp, #44	; 0x2c
 80261ba:	4605      	mov	r5, r0
    for(i = 0; i < btnm->btn_cnt; i++) {
 80261bc:	f04f 0b00 	mov.w	fp, #0
{
 80261c0:	9103      	str	r1, [sp, #12]
    lv_obj_get_coords(obj, &obj_cords);
 80261c2:	a906      	add	r1, sp, #24
 80261c4:	f7f6 fb1a 	bl	801c7fc <lv_obj_get_coords>
    lv_coord_t w = lv_obj_get_width(obj);
 80261c8:	4628      	mov	r0, r5
 80261ca:	f7f6 fb67 	bl	801c89c <lv_obj_get_width>
 80261ce:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(obj);
 80261d0:	4628      	mov	r0, r5
 80261d2:	f7f6 fb69 	bl	801c8a8 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80261d6:	2212      	movs	r2, #18
 80261d8:	2100      	movs	r1, #0
 80261da:	9002      	str	r0, [sp, #8]
 80261dc:	4628      	mov	r0, r5
 80261de:	f7f7 fc83 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80261e2:	2213      	movs	r2, #19
    return (lv_coord_t)v.num;
 80261e4:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80261e8:	2100      	movs	r1, #0
 80261ea:	4628      	mov	r0, r5
 80261ec:	f7f7 fc7c 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80261f0:	2210      	movs	r2, #16
    return (lv_coord_t)v.num;
 80261f2:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80261f4:	2100      	movs	r1, #0
 80261f6:	4628      	mov	r0, r5
 80261f8:	f7f7 fc76 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80261fc:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 80261fe:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8026200:	2100      	movs	r1, #0
 8026202:	4628      	mov	r0, r5
 8026204:	f7f7 fc70 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8026208:	2214      	movs	r2, #20
    return (lv_coord_t)v.num;
 802620a:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 802620e:	2100      	movs	r1, #0
 8026210:	4628      	mov	r0, r5
 8026212:	f7f7 fc69 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8026216:	b204      	sxth	r4, r0
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 8026218:	4628      	mov	r0, r5
 802621a:	f7ff ffc4 	bl	80261a6 <lv_obj_get_style_pad_column.constprop.0>
    prow = (prow / 2) + 1 + (prow & 1);
 802621e:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
 8026222:	f004 0301 	and.w	r3, r4, #1
    pcol = (pcol / 2) + 1 + (pcol & 1);
 8026226:	f000 0401 	and.w	r4, r0, #1
    prow = (prow / 2) + 1 + (prow & 1);
 802622a:	eb03 0362 	add.w	r3, r3, r2, asr #1
    pcol = (pcol / 2) + 1 + (pcol & 1);
 802622e:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
    prow = (prow / 2) + 1 + (prow & 1);
 8026232:	3301      	adds	r3, #1
    pcol = (pcol / 2) + 1 + (pcol & 1);
 8026234:	eb04 0462 	add.w	r4, r4, r2, asr #1
    prow = (prow / 2) + 1 + (prow & 1);
 8026238:	b21b      	sxth	r3, r3
    pcol = (pcol / 2) + 1 + (pcol & 1);
 802623a:	3401      	adds	r4, #1
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 802623c:	2b0d      	cmp	r3, #13
    pcol = (pcol / 2) + 1 + (pcol & 1);
 802623e:	b224      	sxth	r4, r4
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 8026240:	bfa8      	it	ge
 8026242:	230d      	movge	r3, #13
    pcol = LV_MIN(pcol, BTN_EXTRA_CLICK_AREA_MAX);
 8026244:	2c0d      	cmp	r4, #13
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 8026246:	9301      	str	r3, [sp, #4]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8026248:	4653      	mov	r3, sl
    pcol = LV_MIN(pcol, BTN_EXTRA_CLICK_AREA_MAX);
 802624a:	bfa8      	it	ge
 802624c:	240d      	movge	r4, #13
    pright = LV_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
 802624e:	2e0d      	cmp	r6, #13
 8026250:	bfa8      	it	ge
 8026252:	260d      	movge	r6, #13
    ptop = LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8026254:	2f0d      	cmp	r7, #13
 8026256:	bfa8      	it	ge
 8026258:	270d      	movge	r7, #13
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 802625a:	f1b8 0f0d 	cmp.w	r8, #13
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 802625e:	eba9 0906 	sub.w	r9, r9, r6
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 8026262:	bfa8      	it	ge
 8026264:	f04f 080d 	movge.w	r8, #13
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8026268:	2b0d      	cmp	r3, #13
 802626a:	bfa8      	it	ge
 802626c:	230d      	movge	r3, #13
 802626e:	9304      	str	r3, [sp, #16]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 8026270:	f1a9 0302 	sub.w	r3, r9, #2
 8026274:	9305      	str	r3, [sp, #20]
 8026276:	fa1f f98b 	uxth.w	r9, fp
    for(i = 0; i < btnm->btn_cnt; i++) {
 802627a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 802627c:	454b      	cmp	r3, r9
 802627e:	d955      	bls.n	802632c <get_button_from_point+0x178>
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
 8026280:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8026282:	fa1f f38b 	uxth.w	r3, fp
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 8026286:	f10b 0b01 	add.w	fp, fp, #1
    dest->x1 = src->x1;
 802628a:	f932 1033 	ldrsh.w	r1, [r2, r3, lsl #3]
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
 802628e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8026292:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8026296:	458a      	cmp	sl, r1
 8026298:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    dest->y1 = src->y1;
 802629c:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80262a0:	bfac      	ite	ge
 80262a2:	9904      	ldrge	r1, [sp, #16]
        else btn_area.x1 += obj_cords.x1 - pcol;
 80262a4:	1b11      	sublt	r1, r2, r4
    dest->x2 = src->x2;
 80262a6:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 80262aa:	bfac      	ite	ge
 80262ac:	1a51      	subge	r1, r2, r1
        else btn_area.x1 += obj_cords.x1 - pcol;
 80262ae:	185b      	addlt	r3, r3, r1
    dest->y2 = src->y2;
 80262b0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 80262b4:	bfaa      	itet	ge
 80262b6:	18c9      	addge	r1, r1, r3
        else btn_area.x1 += obj_cords.x1 - pcol;
 80262b8:	b21b      	sxthlt	r3, r3
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 80262ba:	b20b      	sxthge	r3, r1
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 80262bc:	4577      	cmp	r7, lr
 80262be:	fa1f f18e 	uxth.w	r1, lr
 80262c2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80262c6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
        else btn_area.y1 += obj_cords.y1 - prow;
 80262ca:	bfb5      	itete	lt
 80262cc:	f8dd e004 	ldrlt.w	lr, [sp, #4]
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 80262d0:	eba3 0e07 	subge.w	lr, r3, r7
        else btn_area.y1 += obj_cords.y1 - prow;
 80262d4:	eba3 0e0e 	sublt.w	lr, r3, lr
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 80262d8:	448e      	addge	lr, r1
        else btn_area.y1 += obj_cords.y1 - prow;
 80262da:	bfb4      	ite	lt
 80262dc:	4471      	addlt	r1, lr
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 80262de:	fa0f f18e 	sxthge.w	r1, lr
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 80262e2:	f8dd e014 	ldr.w	lr, [sp, #20]
        else btn_area.y1 += obj_cords.y1 - prow;
 80262e6:	bfb8      	it	lt
 80262e8:	b209      	sxthlt	r1, r1
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 80262ea:	45f4      	cmp	ip, lr
 80262ec:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 80262f0:	fa1f f18c 	uxth.w	r1, ip
 80262f4:	bfac      	ite	ge
 80262f6:	1992      	addge	r2, r2, r6
        else btn_area.x2 += obj_cords.x1 + pcol;
 80262f8:	1912      	addlt	r2, r2, r4
 80262fa:	440a      	add	r2, r1
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 80262fc:	9902      	ldr	r1, [sp, #8]
 80262fe:	eba1 0108 	sub.w	r1, r1, r8
        else btn_area.x2 += obj_cords.x1 + pcol;
 8026302:	b212      	sxth	r2, r2
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 8026304:	3902      	subs	r1, #2
 8026306:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 802630a:	b282      	uxth	r2, r0
 802630c:	4288      	cmp	r0, r1
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 802630e:	a808      	add	r0, sp, #32
        else btn_area.y2 += obj_cords.y1 + prow;
 8026310:	bfb6      	itet	lt
 8026312:	9901      	ldrlt	r1, [sp, #4]
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 8026314:	4443      	addge	r3, r8
        else btn_area.y2 += obj_cords.y1 + prow;
 8026316:	185b      	addlt	r3, r3, r1
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 8026318:	9903      	ldr	r1, [sp, #12]
        else btn_area.y2 += obj_cords.y1 + prow;
 802631a:	4413      	add	r3, r2
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 802631c:	2200      	movs	r2, #0
        else btn_area.y2 += obj_cords.y1 + prow;
 802631e:	b21b      	sxth	r3, r3
 8026320:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 8026324:	f7fe f826 	bl	8024374 <_lv_area_is_point_on>
 8026328:	2800      	cmp	r0, #0
 802632a:	d0a4      	beq.n	8026276 <get_button_from_point+0xc2>
    if(i == btnm->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
 802632c:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 802632e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026332:	454a      	cmp	r2, r9
 8026334:	bf08      	it	eq
 8026336:	4699      	moveq	r9, r3
}
 8026338:	4648      	mov	r0, r9
 802633a:	b00b      	add	sp, #44	; 0x2c
 802633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026340 <invalidate_button_area>:
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 8026340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026344:	4299      	cmp	r1, r3
{
 8026346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026348:	4605      	mov	r5, r0
 802634a:	b085      	sub	sp, #20
 802634c:	460e      	mov	r6, r1
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 802634e:	d062      	beq.n	8026416 <invalidate_button_area+0xd6>
    if(btn_idx >= btnm->btn_cnt) return;
 8026350:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8026352:	428b      	cmp	r3, r1
 8026354:	d95f      	bls.n	8026416 <invalidate_button_area+0xd6>
    lv_area_copy(&btn_area, &btnm->button_areas[btn_idx]);
 8026356:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8026358:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    dest->x1 = src->x1;
 802635c:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
    lv_obj_get_coords(obj, &obj_area);
 8026360:	a902      	add	r1, sp, #8
 8026362:	f8ad 2000 	strh.w	r2, [sp]
    dest->y1 = src->y1;
 8026366:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 802636a:	f8ad 2002 	strh.w	r2, [sp, #2]
    dest->x2 = src->x2;
 802636e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    dest->y2 = src->y2;
 8026372:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    dest->x2 = src->x2;
 8026376:	f8ad 2004 	strh.w	r2, [sp, #4]
    dest->y2 = src->y2;
 802637a:	f8ad 3006 	strh.w	r3, [sp, #6]
 802637e:	f7f6 fa3d 	bl	801c7fc <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8026382:	2214      	movs	r2, #20
 8026384:	2100      	movs	r1, #0
 8026386:	4628      	mov	r0, r5
 8026388:	f7f7 fbae 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802638c:	b207      	sxth	r7, r0
    lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 802638e:	4628      	mov	r0, r5
 8026390:	f7ff ff09 	bl	80261a6 <lv_obj_get_style_pad_column.constprop.0>
 8026394:	4604      	mov	r4, r0
    lv_coord_t dpi = lv_disp_get_dpi(lv_obj_get_disp(obj));
 8026396:	4628      	mov	r0, r5
 8026398:	f7e0 fa9c 	bl	80068d4 <lv_obj_get_disp>
 802639c:	f7eb fed0 	bl	8012140 <lv_disp_get_dpi>
    row_gap = LV_MAX(row_gap, dpi / 10);
 80263a0:	230a      	movs	r3, #10
    btn_area.x1 += obj_area.x1 - row_gap;
 80263a2:	f8bd c008 	ldrh.w	ip, [sp, #8]
 80263a6:	f8bd 1000 	ldrh.w	r1, [sp]
    row_gap = LV_MAX(row_gap, dpi / 10);
 80263aa:	fb90 f3f3 	sdiv	r3, r0, r3
 80263ae:	b21b      	sxth	r3, r3
    btn_area.x1 += obj_area.x1 - row_gap;
 80263b0:	4461      	add	r1, ip
    btn_area.y1 += obj_area.y1 - col_gap;
 80263b2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    row_gap = LV_MAX(row_gap, dpi / 10);
 80263b6:	429f      	cmp	r7, r3
 80263b8:	bfb8      	it	lt
 80263ba:	461f      	movlt	r7, r3
    col_gap = LV_MAX(col_gap, dpi / 10);
 80263bc:	429c      	cmp	r4, r3
 80263be:	bfb8      	it	lt
 80263c0:	461c      	movlt	r4, r3
    btn_area.x1 += obj_area.x1 - row_gap;
 80263c2:	b2ba      	uxth	r2, r7
    btn_area.y1 += obj_area.y1 - col_gap;
 80263c4:	b2a3      	uxth	r3, r4
    btn_area.x2 += obj_area.x1 + row_gap;
 80263c6:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    btn_area.x1 += obj_area.x1 - row_gap;
 80263ca:	1a89      	subs	r1, r1, r2
    btn_area.x2 += obj_area.x1 + row_gap;
 80263cc:	44a4      	add	ip, r4
    btn_area.x1 += obj_area.x1 - row_gap;
 80263ce:	f8ad 1000 	strh.w	r1, [sp]
    btn_area.x2 += obj_area.x1 + row_gap;
 80263d2:	4494      	add	ip, r2
    btn_area.y1 += obj_area.y1 - col_gap;
 80263d4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    btn_area.y2 += obj_area.y1 + col_gap;
 80263d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    btn_area.y1 += obj_area.y1 - col_gap;
 80263dc:	4401      	add	r1, r0
    btn_area.x2 += obj_area.x1 + row_gap;
 80263de:	f8ad c004 	strh.w	ip, [sp, #4]
    btn_area.y2 += obj_area.y1 + col_gap;
 80263e2:	4402      	add	r2, r0
    btn_area.y1 += obj_area.y1 - col_gap;
 80263e4:	1ac9      	subs	r1, r1, r3
    btn_area.y2 += obj_area.y1 + col_gap;
 80263e6:	4413      	add	r3, r2
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 80263e8:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
    btn_area.y1 += obj_area.y1 - col_gap;
 80263ea:	b289      	uxth	r1, r1
    btn_area.y2 += obj_area.y1 + col_gap;
 80263ec:	b29b      	uxth	r3, r3
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 80263ee:	42b2      	cmp	r2, r6
    btn_area.y1 += obj_area.y1 - col_gap;
 80263f0:	f8ad 1002 	strh.w	r1, [sp, #2]
    btn_area.y2 += obj_area.y1 + col_gap;
 80263f4:	f8ad 3006 	strh.w	r3, [sp, #6]
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 80263f8:	d109      	bne.n	802640e <invalidate_button_area+0xce>
 80263fa:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80263fc:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8026400:	0552      	lsls	r2, r2, #21
        btn_area.y1 -= lv_area_get_height(&btn_area);
 8026402:	bf42      	ittt	mi
 8026404:	43db      	mvnmi	r3, r3
 8026406:	eb03 0341 	addmi.w	r3, r3, r1, lsl #1
 802640a:	f8ad 3002 	strhmi.w	r3, [sp, #2]
    lv_obj_invalidate_area(obj, &btn_area);
 802640e:	4669      	mov	r1, sp
 8026410:	4628      	mov	r0, r5
 8026412:	f7f6 fc22 	bl	801cc5a <lv_obj_invalidate_area>
}
 8026416:	b005      	add	sp, #20
 8026418:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802641a <lv_btnmatrix_set_map>:
    if(map == NULL) return;
 802641a:	b109      	cbz	r1, 8026420 <lv_btnmatrix_set_map+0x6>
 802641c:	f7ed bc64 	b.w	8013ce8 <lv_btnmatrix_set_map.part.0>
}
 8026420:	4770      	bx	lr

08026422 <lv_btnmatrix_set_ctrl_map>:
{
 8026422:	b510      	push	{r4, lr}
    lv_memcpy(btnm->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 8026424:	8e02      	ldrh	r2, [r0, #48]	; 0x30
{
 8026426:	4604      	mov	r4, r0
 8026428:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 802642a:	0052      	lsls	r2, r2, #1
 802642c:	f7f4 f9a1 	bl	801a772 <memcpy>
    lv_btnmatrix_set_map(obj, btnm->map_p);
 8026430:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8026432:	4620      	mov	r0, r4
}
 8026434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_btnmatrix_set_map(obj, btnm->map_p);
 8026438:	f7ff bfef 	b.w	802641a <lv_btnmatrix_set_map>

0802643c <lv_btnmatrix_set_selected_btn>:
{
 802643c:	b538      	push	{r3, r4, r5, lr}
    if(btn_id >= btnm->btn_cnt && btn_id != LV_BTNMATRIX_BTN_NONE) return;
 802643e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8026440:	4604      	mov	r4, r0
 8026442:	460d      	mov	r5, r1
    if(btn_id >= btnm->btn_cnt && btn_id != LV_BTNMATRIX_BTN_NONE) return;
 8026444:	428b      	cmp	r3, r1
 8026446:	d803      	bhi.n	8026450 <lv_btnmatrix_set_selected_btn+0x14>
 8026448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802644c:	4299      	cmp	r1, r3
 802644e:	d10a      	bne.n	8026466 <lv_btnmatrix_set_selected_btn+0x2a>
    invalidate_button_area(obj, btnm->btn_id_sel);
 8026450:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8026452:	4620      	mov	r0, r4
 8026454:	f7ff ff74 	bl	8026340 <invalidate_button_area>
    invalidate_button_area(obj, btn_id);
 8026458:	4629      	mov	r1, r5
 802645a:	4620      	mov	r0, r4
    btnm->btn_id_sel = btn_id;
 802645c:	86a5      	strh	r5, [r4, #52]	; 0x34
}
 802645e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    invalidate_button_area(obj, btn_id);
 8026462:	f7ff bf6d 	b.w	8026340 <invalidate_button_area>
}
 8026466:	bd38      	pop	{r3, r4, r5, pc}

08026468 <lv_btnmatrix_clear_btn_ctrl>:
{
 8026468:	b570      	push	{r4, r5, r6, lr}
 802646a:	4615      	mov	r5, r2
    if(btn_id >= btnm->btn_cnt) return;
 802646c:	8e02      	ldrh	r2, [r0, #48]	; 0x30
{
 802646e:	4604      	mov	r4, r0
    if(btn_id >= btnm->btn_cnt) return;
 8026470:	428a      	cmp	r2, r1
 8026472:	d90f      	bls.n	8026494 <lv_btnmatrix_clear_btn_ctrl+0x2c>
    btnm->ctrl_bits[btn_id] &= (~ctrl);
 8026474:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8026476:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 802647a:	ea22 0205 	bic.w	r2, r2, r5
 802647e:	f826 2011 	strh.w	r2, [r6, r1, lsl #1]
    invalidate_button_area(obj, btn_id);
 8026482:	f7ff ff5d 	bl	8026340 <invalidate_button_area>
    if(ctrl & LV_BTNMATRIX_CTRL_POPOVER) {
 8026486:	056b      	lsls	r3, r5, #21
 8026488:	d504      	bpl.n	8026494 <lv_btnmatrix_clear_btn_ctrl+0x2c>
        lv_obj_refresh_ext_draw_size(obj);
 802648a:	4620      	mov	r0, r4
}
 802648c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_refresh_ext_draw_size(obj);
 8026490:	f7f6 b836 	b.w	801c500 <lv_obj_refresh_ext_draw_size>
}
 8026494:	bd70      	pop	{r4, r5, r6, pc}

08026496 <lv_btnmatrix_clear_btn_ctrl_all>:
{
 8026496:	b570      	push	{r4, r5, r6, lr}
 8026498:	4604      	mov	r4, r0
 802649a:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 802649c:	2500      	movs	r5, #0
 802649e:	b2a9      	uxth	r1, r5
 80264a0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80264a2:	428b      	cmp	r3, r1
 80264a4:	d800      	bhi.n	80264a8 <lv_btnmatrix_clear_btn_ctrl_all+0x12>
}
 80264a6:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_clear_btn_ctrl(obj, i, ctrl);
 80264a8:	4632      	mov	r2, r6
 80264aa:	4620      	mov	r0, r4
 80264ac:	3501      	adds	r5, #1
 80264ae:	f7ff ffdb 	bl	8026468 <lv_btnmatrix_clear_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 80264b2:	e7f4      	b.n	802649e <lv_btnmatrix_clear_btn_ctrl_all+0x8>

080264b4 <lv_btnmatrix_set_btn_ctrl>:
{
 80264b4:	b570      	push	{r4, r5, r6, lr}
    if(btn_id >= btnm->btn_cnt) return;
 80264b6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 80264b8:	4604      	mov	r4, r0
 80264ba:	460d      	mov	r5, r1
 80264bc:	4616      	mov	r6, r2
    if(btn_id >= btnm->btn_cnt) return;
 80264be:	428b      	cmp	r3, r1
 80264c0:	d91a      	bls.n	80264f8 <lv_btnmatrix_set_btn_ctrl+0x44>
    if(btnm->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECKED)) {
 80264c2:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80264c6:	07d9      	lsls	r1, r3, #31
 80264c8:	d505      	bpl.n	80264d6 <lv_btnmatrix_set_btn_ctrl+0x22>
 80264ca:	05f2      	lsls	r2, r6, #23
 80264cc:	d503      	bpl.n	80264d6 <lv_btnmatrix_set_btn_ctrl+0x22>
        lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 80264ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80264d2:	f7ff ffe0 	bl	8026496 <lv_btnmatrix_clear_btn_ctrl_all>
    btnm->ctrl_bits[btn_id] |= ctrl;
 80264d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    invalidate_button_area(obj, btn_id);
 80264d8:	4629      	mov	r1, r5
 80264da:	4620      	mov	r0, r4
    btnm->ctrl_bits[btn_id] |= ctrl;
 80264dc:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80264e0:	4333      	orrs	r3, r6
 80264e2:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
    invalidate_button_area(obj, btn_id);
 80264e6:	f7ff ff2b 	bl	8026340 <invalidate_button_area>
    if(ctrl & LV_BTNMATRIX_CTRL_POPOVER) {
 80264ea:	0573      	lsls	r3, r6, #21
 80264ec:	d504      	bpl.n	80264f8 <lv_btnmatrix_set_btn_ctrl+0x44>
        lv_obj_refresh_ext_draw_size(obj);
 80264ee:	4620      	mov	r0, r4
}
 80264f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_refresh_ext_draw_size(obj);
 80264f4:	f7f6 b804 	b.w	801c500 <lv_obj_refresh_ext_draw_size>
}
 80264f8:	bd70      	pop	{r4, r5, r6, pc}

080264fa <lv_btnmatrix_set_btn_ctrl_all>:
{
 80264fa:	b570      	push	{r4, r5, r6, lr}
 80264fc:	4604      	mov	r4, r0
 80264fe:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 8026500:	2500      	movs	r5, #0
 8026502:	b2a9      	uxth	r1, r5
 8026504:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8026506:	428b      	cmp	r3, r1
 8026508:	d800      	bhi.n	802650c <lv_btnmatrix_set_btn_ctrl_all+0x12>
}
 802650a:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_set_btn_ctrl(obj, i, ctrl);
 802650c:	4632      	mov	r2, r6
 802650e:	4620      	mov	r0, r4
 8026510:	3501      	adds	r5, #1
 8026512:	f7ff ffcf 	bl	80264b4 <lv_btnmatrix_set_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 8026516:	e7f4      	b.n	8026502 <lv_btnmatrix_set_btn_ctrl_all+0x8>

08026518 <lv_btnmatrix_get_selected_btn>:
}
 8026518:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 802651a:	4770      	bx	lr

0802651c <lv_btnmatrix_has_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return false;
 802651c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 802651e:	428b      	cmp	r3, r1
 8026520:	d907      	bls.n	8026532 <lv_btnmatrix_has_btn_ctrl+0x16>
    return ((btnm->ctrl_bits[btn_id] & ctrl) == ctrl) ? true : false;
 8026522:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8026524:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8026528:	439a      	bics	r2, r3
 802652a:	bf0c      	ite	eq
 802652c:	2001      	moveq	r0, #1
 802652e:	2000      	movne	r0, #0
 8026530:	4770      	bx	lr
    if(btn_id >= btnm->btn_cnt) return false;
 8026532:	2000      	movs	r0, #0
}
 8026534:	4770      	bx	lr

08026536 <make_one_button_checked>:
{
 8026536:	b570      	push	{r4, r5, r6, lr}
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 8026538:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 802653c:	4604      	mov	r4, r0
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 802653e:	f7ff ffed 	bl	802651c <lv_btnmatrix_has_btn_ctrl>
 8026542:	4606      	mov	r6, r0
{
 8026544:	460d      	mov	r5, r1
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 8026546:	4620      	mov	r0, r4
 8026548:	f44f 7180 	mov.w	r1, #256	; 0x100
 802654c:	f7ff ffa3 	bl	8026496 <lv_btnmatrix_clear_btn_ctrl_all>
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 8026550:	b13e      	cbz	r6, 8026562 <make_one_button_checked+0x2c>
 8026552:	4629      	mov	r1, r5
 8026554:	4620      	mov	r0, r4
 8026556:	f44f 7280 	mov.w	r2, #256	; 0x100
}
 802655a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 802655e:	f7ff bfa9 	b.w	80264b4 <lv_btnmatrix_set_btn_ctrl>
}
 8026562:	bd70      	pop	{r4, r5, r6, pc}

08026564 <lv_btnmatrix_set_one_checked>:
    btnm->one_check     = en;
 8026564:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 8026568:	f361 0200 	bfi	r2, r1, #0, #1
    make_one_button_checked(obj, 0);
 802656c:	2100      	movs	r1, #0
    btnm->one_check     = en;
 802656e:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
    make_one_button_checked(obj, 0);
 8026572:	f7ff bfe0 	b.w	8026536 <make_one_button_checked>

08026576 <lv_checkbox_destructor>:
{
 8026576:	b538      	push	{r3, r4, r5, lr}
    if(!cb->static_txt) {
 8026578:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
{
 802657c:	460c      	mov	r4, r1
    if(!cb->static_txt) {
 802657e:	f013 0501 	ands.w	r5, r3, #1
 8026582:	d103      	bne.n	802658c <lv_checkbox_destructor+0x16>
        lv_mem_free(cb->txt);
 8026584:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8026586:	f7ec f8e5 	bl	8012754 <lv_mem_free>
        cb->txt = NULL;
 802658a:	6265      	str	r5, [r4, #36]	; 0x24
}
 802658c:	bd38      	pop	{r3, r4, r5, pc}

0802658e <lv_dropdownlist_destructor>:
    lv_obj_t * dropdown_obj = list->dropdown;
 802658e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    dropdown->list = NULL;
 8026590:	2200      	movs	r2, #0
 8026592:	625a      	str	r2, [r3, #36]	; 0x24
}
 8026594:	4770      	bx	lr

08026596 <get_label>:
}

static lv_obj_t * get_label(const lv_obj_t * obj)
{
    lv_dropdown_t * dropdown = (lv_dropdown_t *)obj;
    if(dropdown->list == NULL) return NULL;
 8026596:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026598:	b110      	cbz	r0, 80265a0 <get_label+0xa>

    return lv_obj_get_child(dropdown->list, 0);
 802659a:	2100      	movs	r1, #0
 802659c:	f7f7 be2b 	b.w	801e1f6 <lv_obj_get_child>
}
 80265a0:	4770      	bx	lr

080265a2 <position_to_selected>:
{
 80265a2:	b570      	push	{r4, r5, r6, lr}
 80265a4:	4604      	mov	r4, r0
    lv_obj_t * label = get_label(dropdown_obj);
 80265a6:	f7ff fff6 	bl	8026596 <get_label>
    if(label == NULL) return;
 80265aa:	4605      	mov	r5, r0
 80265ac:	b308      	cbz	r0, 80265f2 <position_to_selected+0x50>
    if(lv_obj_get_height(label) <= lv_obj_get_content_height(dropdown_obj)) return;
 80265ae:	f7f6 f97b 	bl	801c8a8 <lv_obj_get_height>
 80265b2:	4606      	mov	r6, r0
 80265b4:	4620      	mov	r0, r4
 80265b6:	f7f6 f993 	bl	801c8e0 <lv_obj_get_content_height>
 80265ba:	4286      	cmp	r6, r0
 80265bc:	dd19      	ble.n	80265f2 <position_to_selected+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80265be:	2257      	movs	r2, #87	; 0x57
 80265c0:	2100      	movs	r1, #0
 80265c2:	4628      	mov	r0, r5
 80265c4:	f7f7 fa90 	bl	801dae8 <lv_obj_get_style_prop>
 80265c8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80265cc:	2259      	movs	r2, #89	; 0x59
 80265ce:	2100      	movs	r1, #0
 80265d0:	4628      	mov	r0, r5
 80265d2:	f7f7 fa89 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 80265d6:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    lv_coord_t unit_h = font_h + line_space;
 80265d8:	4406      	add	r6, r0
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 80265da:	2200      	movs	r2, #0
 80265dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 80265de:	fb11 f106 	smulbb	r1, r1, r6
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 80265e2:	b209      	sxth	r1, r1
 80265e4:	f7df fcc8 	bl	8005f78 <lv_obj_scroll_to_y>
    lv_obj_invalidate(dropdown->list);
 80265e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
 80265ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(dropdown->list);
 80265ee:	f7f6 bb55 	b.w	801cc9c <lv_obj_invalidate>
}
 80265f2:	bd70      	pop	{r4, r5, r6, pc}

080265f4 <lv_dropdownlist_constructor>:
{
 80265f4:	b510      	push	{r4, lr}
 80265f6:	460c      	mov	r4, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80265f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80265fc:	4620      	mov	r0, r4
 80265fe:	f7f5 f9ea 	bl	801b9d6 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 8026602:	4620      	mov	r0, r4
 8026604:	2104      	movs	r1, #4
 8026606:	f7f5 f9e6 	bl	801b9d6 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_IGNORE_LAYOUT);
 802660a:	4620      	mov	r0, r4
 802660c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026610:	f7f5 f9ab 	bl	801b96a <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_HIDDEN);
 8026614:	4620      	mov	r0, r4
 8026616:	2101      	movs	r1, #1
 8026618:	f7f5 f9a7 	bl	801b96a <lv_obj_add_flag>
    lv_label_create(obj);
 802661c:	4620      	mov	r0, r4
}
 802661e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_label_create(obj);
 8026622:	f7ef be17 	b.w	8016254 <lv_label_create>

08026626 <lv_dropdown_destructor>:
    if(dropdown->list) {
 8026626:	6a48      	ldr	r0, [r1, #36]	; 0x24
{
 8026628:	b538      	push	{r3, r4, r5, lr}
 802662a:	460c      	mov	r4, r1
    if(dropdown->list) {
 802662c:	b118      	cbz	r0, 8026636 <lv_dropdown_destructor+0x10>
        lv_obj_del(dropdown->list);
 802662e:	f7f7 fe8e 	bl	801e34e <lv_obj_del>
        dropdown->list = NULL;
 8026632:	2300      	movs	r3, #0
 8026634:	6263      	str	r3, [r4, #36]	; 0x24
    if(!dropdown->static_txt) {
 8026636:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 802663a:	f013 0510 	ands.w	r5, r3, #16
 802663e:	d103      	bne.n	8026648 <lv_dropdown_destructor+0x22>
        lv_mem_free(dropdown->options);
 8026640:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8026642:	f7ec f887 	bl	8012754 <lv_mem_free>
        dropdown->options = NULL;
 8026646:	6325      	str	r5, [r4, #48]	; 0x30
}
 8026648:	bd38      	pop	{r3, r4, r5, pc}

0802664a <draw_box_label>:
{
 802664a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802664e:	4690      	mov	r8, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 8026650:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8026654:	b08f      	sub	sp, #60	; 0x3c
 8026656:	4606      	mov	r6, r0
    if(id == LV_DROPDOWN_PR_NONE) return;
 8026658:	4590      	cmp	r8, r2
{
 802665a:	460d      	mov	r5, r1
    if(id == LV_DROPDOWN_PR_NONE) return;
 802665c:	d05e      	beq.n	802671c <draw_box_label+0xd2>
    lv_obj_t * list_obj = dropdown->list;
 802665e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_draw_label_dsc_init(&label_dsc);
 8026660:	a806      	add	r0, sp, #24
    lv_state_t state_orig = list_obj->state;
 8026662:	8c27      	ldrh	r7, [r4, #32]
    if(state != list_obj->state) {
 8026664:	429f      	cmp	r7, r3
        list_obj->state = state;
 8026666:	bf1f      	itttt	ne
 8026668:	8423      	strhne	r3, [r4, #32]
        list_obj->skip_trans = 1;
 802666a:	f894 3022 	ldrbne.w	r3, [r4, #34]	; 0x22
 802666e:	f043 0304 	orrne.w	r3, r3, #4
 8026672:	f884 3022 	strbne.w	r3, [r4, #34]	; 0x22
    lv_draw_label_dsc_init(&label_dsc);
 8026676:	f7e1 fb4b 	bl	8007d10 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(list_obj, LV_PART_SELECTED, &label_dsc);
 802667a:	aa06      	add	r2, sp, #24
 802667c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8026680:	4620      	mov	r0, r4
 8026682:	f7f5 fd88 	bl	801c196 <lv_obj_init_draw_label_dsc>
 8026686:	2259      	movs	r2, #89	; 0x59
 8026688:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 802668c:	4620      	mov	r0, r4
 802668e:	f7f7 fa2b 	bl	801dae8 <lv_obj_get_style_prop>
    label_dsc.line_space = lv_obj_get_style_text_line_space(list_obj,
 8026692:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    lv_obj_t * label = get_label(dropdown_obj);
 8026696:	4630      	mov	r0, r6
 8026698:	f7ff ff7d 	bl	8026596 <get_label>
    if(label == NULL) return;
 802669c:	4606      	mov	r6, r0
 802669e:	2800      	cmp	r0, #0
 80266a0:	d03c      	beq.n	802671c <draw_box_label+0xd2>
 80266a2:	9b06      	ldr	r3, [sp, #24]
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 80266a4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80266a8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
    area_sel.y1 -= label_dsc.line_space / 2;
 80266ac:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 80266b0:	1853      	adds	r3, r2, r1
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 80266b2:	3901      	subs	r1, #1
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 80266b4:	fb13 f308 	smulbb	r3, r3, r8
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 80266b8:	4411      	add	r1, r2
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 80266ba:	f10d 0810 	add.w	r8, sp, #16
 80266be:	aa02      	add	r2, sp, #8
    area_sel.y1 -= label_dsc.line_space / 2;
 80266c0:	eba3 0360 	sub.w	r3, r3, r0, asr #1
 80266c4:	8af0      	ldrh	r0, [r6, #22]
 80266c6:	4403      	add	r3, r0
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 80266c8:	4640      	mov	r0, r8
    area_sel.y1 -= label_dsc.line_space / 2;
 80266ca:	b29b      	uxth	r3, r3
 80266cc:	f8ad 300a 	strh.w	r3, [sp, #10]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 80266d0:	440b      	add	r3, r1
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 80266d2:	68a9      	ldr	r1, [r5, #8]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 80266d4:	f8ad 300e 	strh.w	r3, [sp, #14]
    area_sel.x1 = list_obj->coords.x1;
 80266d8:	8aa3      	ldrh	r3, [r4, #20]
 80266da:	f8ad 3008 	strh.w	r3, [sp, #8]
    area_sel.x2 = list_obj->coords.x2;
 80266de:	8b23      	ldrh	r3, [r4, #24]
 80266e0:	f8ad 300c 	strh.w	r3, [sp, #12]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 80266e4:	f7fd fdf9 	bl	80242da <_lv_area_intersect>
    if(area_ok) {
 80266e8:	b188      	cbz	r0, 802670e <draw_box_label+0xc4>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80266ea:	f8d5 9008 	ldr.w	r9, [r5, #8]
        lv_draw_label(draw_ctx, &label_dsc, &label->coords, lv_label_get_text(label), NULL);
 80266ee:	4630      	mov	r0, r6
        draw_ctx->clip_area = &mask_sel;
 80266f0:	f8c5 8008 	str.w	r8, [r5, #8]
        lv_draw_label(draw_ctx, &label_dsc, &label->coords, lv_label_get_text(label), NULL);
 80266f4:	f000 fc77 	bl	8026fe6 <lv_label_get_text>
 80266f8:	2200      	movs	r2, #0
 80266fa:	4603      	mov	r3, r0
 80266fc:	a906      	add	r1, sp, #24
 80266fe:	9200      	str	r2, [sp, #0]
 8026700:	4628      	mov	r0, r5
 8026702:	f106 0214 	add.w	r2, r6, #20
 8026706:	f7e1 fb1b 	bl	8007d40 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 802670a:	f8c5 9008 	str.w	r9, [r5, #8]
    list_obj->skip_trans = 0;
 802670e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    list_obj->state = state_orig;
 8026712:	8427      	strh	r7, [r4, #32]
    list_obj->skip_trans = 0;
 8026714:	f36f 0382 	bfc	r3, #2, #1
 8026718:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 802671c:	b00f      	add	sp, #60	; 0x3c
 802671e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08026722 <draw_box>:
{
 8026722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026726:	4692      	mov	sl, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 8026728:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 802672c:	b091      	sub	sp, #68	; 0x44
 802672e:	4605      	mov	r5, r0
    if(id == LV_DROPDOWN_PR_NONE) return;
 8026730:	4592      	cmp	sl, r2
{
 8026732:	460e      	mov	r6, r1
    if(id == LV_DROPDOWN_PR_NONE) return;
 8026734:	d04e      	beq.n	80267d4 <draw_box+0xb2>
    lv_obj_t * list_obj = dropdown->list;
 8026736:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026738:	2257      	movs	r2, #87	; 0x57
 802673a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    lv_state_t state_ori = list_obj->state;
 802673e:	8c27      	ldrh	r7, [r4, #32]
 8026740:	4620      	mov	r0, r4
    if(state != list_obj->state) {
 8026742:	429f      	cmp	r7, r3
        list_obj->state = state;
 8026744:	bf1f      	itttt	ne
 8026746:	8423      	strhne	r3, [r4, #32]
        list_obj->skip_trans = 1;
 8026748:	f894 3022 	ldrbne.w	r3, [r4, #34]	; 0x22
 802674c:	f043 0304 	orrne.w	r3, r3, #4
 8026750:	f884 3022 	strbne.w	r3, [r4, #34]	; 0x22
 8026754:	f7f7 f9c8 	bl	801dae8 <lv_obj_get_style_prop>
 8026758:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802675a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 802675e:	2259      	movs	r2, #89	; 0x59
 8026760:	4620      	mov	r0, r4
 8026762:	f7f7 f9c1 	bl	801dae8 <lv_obj_get_style_prop>
 8026766:	f9b9 9008 	ldrsh.w	r9, [r9, #8]
    return (lv_coord_t)v.num;
 802676a:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802676e:	4680      	mov	r8, r0
    lv_obj_t * label = get_label(dropdown_obj);
 8026770:	4628      	mov	r0, r5
 8026772:	f7ff ff10 	bl	8026596 <get_label>
    rect_area.y1 += id * (font_h + line_space);
 8026776:	eb09 020b 	add.w	r2, r9, fp
    rect_area.y1 -= line_space / 2;
 802677a:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 802677e:	8ac3      	ldrh	r3, [r0, #22]
    rect_area.y1 += id * (font_h + line_space);
 8026780:	fb12 f20a 	smulbb	r2, r2, sl
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 8026784:	f108 38ff 	add.w	r8, r8, #4294967295
    lv_draw_rect_dsc_init(&sel_rect);
 8026788:	a802      	add	r0, sp, #8
    rect_area.y1 -= line_space / 2;
 802678a:	eba2 026b 	sub.w	r2, r2, fp, asr #1
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 802678e:	44c8      	add	r8, r9
    rect_area.y1 -= line_space / 2;
 8026790:	441a      	add	r2, r3
    rect_area.x1 = dropdown->list->coords.x1;
 8026792:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    rect_area.y1 -= line_space / 2;
 8026794:	b292      	uxth	r2, r2
 8026796:	f8ad 2002 	strh.w	r2, [sp, #2]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 802679a:	4442      	add	r2, r8
 802679c:	f8ad 2006 	strh.w	r2, [sp, #6]
    rect_area.x1 = dropdown->list->coords.x1;
 80267a0:	8a9a      	ldrh	r2, [r3, #20]
    rect_area.x2 = dropdown->list->coords.x2;
 80267a2:	8b1b      	ldrh	r3, [r3, #24]
    rect_area.x1 = dropdown->list->coords.x1;
 80267a4:	f8ad 2000 	strh.w	r2, [sp]
    rect_area.x2 = dropdown->list->coords.x2;
 80267a8:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_draw_rect_dsc_init(&sel_rect);
 80267ac:	f7e2 f8fa 	bl	80089a4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(list_obj,  LV_PART_SELECTED, &sel_rect);
 80267b0:	aa02      	add	r2, sp, #8
 80267b2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80267b6:	4620      	mov	r0, r4
 80267b8:	f7f5 fb9e 	bl	801bef8 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &sel_rect, &rect_area);
 80267bc:	466a      	mov	r2, sp
 80267be:	a902      	add	r1, sp, #8
 80267c0:	4630      	mov	r0, r6
 80267c2:	f7f8 fe24 	bl	801f40e <lv_draw_rect>
    list_obj->skip_trans = 0;
 80267c6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    list_obj->state = state_ori;
 80267ca:	8427      	strh	r7, [r4, #32]
    list_obj->skip_trans = 0;
 80267cc:	f36f 0382 	bfc	r3, #2, #1
 80267d0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 80267d4:	b011      	add	sp, #68	; 0x44
 80267d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080267da <get_id_on_point>:
{
 80267da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80267de:	4606      	mov	r6, r0
 80267e0:	460d      	mov	r5, r1
    lv_obj_t * label = get_label(dropdown_obj);
 80267e2:	f7ff fed8 	bl	8026596 <get_label>
    if(label == NULL) return 0;
 80267e6:	4604      	mov	r4, r0
 80267e8:	b1f8      	cbz	r0, 802682a <get_id_on_point+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80267ea:	2257      	movs	r2, #87	; 0x57
 80267ec:	2100      	movs	r1, #0
    y -= label->coords.y1;
 80267ee:	f8b0 8016 	ldrh.w	r8, [r0, #22]
 80267f2:	f7f7 f979 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80267f6:	2259      	movs	r2, #89	; 0x59
 80267f8:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80267fc:	2100      	movs	r1, #0
 80267fe:	4620      	mov	r0, r4
 8026800:	f7f7 f972 	bl	801dae8 <lv_obj_get_style_prop>
    y += line_space / 2;
 8026804:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    lv_coord_t h = font_h + line_space;
 8026808:	4407      	add	r7, r0
    y += line_space / 2;
 802680a:	fa03 f380 	sxtah	r3, r3, r0
    uint16_t opt = y / h;
 802680e:	b23f      	sxth	r7, r7
    y += line_space / 2;
 8026810:	eb05 0563 	add.w	r5, r5, r3, asr #1
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 8026814:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
    y += line_space / 2;
 8026816:	eba5 0508 	sub.w	r5, r5, r8
    uint16_t opt = y / h;
 802681a:	b22d      	sxth	r5, r5
 802681c:	fb95 f5f7 	sdiv	r5, r5, r7
 8026820:	b2a8      	uxth	r0, r5
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 8026822:	4283      	cmp	r3, r0
 8026824:	d801      	bhi.n	802682a <get_id_on_point+0x50>
 8026826:	3b01      	subs	r3, #1
 8026828:	b298      	uxth	r0, r3
}
 802682a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802682e <lv_dropdown_set_options>:
{
 802682e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026830:	4604      	mov	r4, r0
    LV_ASSERT_NULL(options);
 8026832:	460d      	mov	r5, r1
 8026834:	b901      	cbnz	r1, 8026838 <lv_dropdown_set_options+0xa>
 8026836:	e7fe      	b.n	8026836 <lv_dropdown_set_options+0x8>
    dropdown->option_cnt = 0;
 8026838:	2300      	movs	r3, #0
 802683a:	3901      	subs	r1, #1
 802683c:	8683      	strh	r3, [r0, #52]	; 0x34
        if(options[i] == '\n') dropdown->option_cnt++;
 802683e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 8026840:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        if(options[i] == '\n') dropdown->option_cnt++;
 8026844:	3301      	adds	r3, #1
 8026846:	b29b      	uxth	r3, r3
    for(i = 0; options[i] != '\0'; i++) {
 8026848:	b9b2      	cbnz	r2, 8026878 <lv_dropdown_set_options+0x4a>
    size_t len = strlen(options) + 1;
 802684a:	4628      	mov	r0, r5
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 802684c:	86a3      	strh	r3, [r4, #52]	; 0x34
    dropdown->sel_opt_id      = 0;
 802684e:	86e2      	strh	r2, [r4, #54]	; 0x36
    dropdown->sel_opt_id_orig = 0;
 8026850:	8722      	strh	r2, [r4, #56]	; 0x38
    size_t len = strlen(options) + 1;
 8026852:	f7f3 ff7b 	bl	801a74c <strlen>
 8026856:	1c47      	adds	r7, r0, #1
    if(dropdown->options != NULL && dropdown->static_txt == 0) {
 8026858:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802685a:	b138      	cbz	r0, 802686c <lv_dropdown_set_options+0x3e>
 802685c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8026860:	f013 0610 	ands.w	r6, r3, #16
 8026864:	d102      	bne.n	802686c <lv_dropdown_set_options+0x3e>
        lv_mem_free(dropdown->options);
 8026866:	f7eb ff75 	bl	8012754 <lv_mem_free>
        dropdown->options = NULL;
 802686a:	6326      	str	r6, [r4, #48]	; 0x30
    dropdown->options = lv_mem_alloc(len);
 802686c:	4638      	mov	r0, r7
 802686e:	f7eb ff53 	bl	8012718 <lv_mem_alloc>
 8026872:	6320      	str	r0, [r4, #48]	; 0x30
    LV_ASSERT_MALLOC(dropdown->options);
 8026874:	b920      	cbnz	r0, 8026880 <lv_dropdown_set_options+0x52>
 8026876:	e7fe      	b.n	8026876 <lv_dropdown_set_options+0x48>
        if(options[i] == '\n') dropdown->option_cnt++;
 8026878:	2a0a      	cmp	r2, #10
 802687a:	bf08      	it	eq
 802687c:	86a3      	strheq	r3, [r4, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 802687e:	e7de      	b.n	802683e <lv_dropdown_set_options+0x10>
    strcpy(dropdown->options, options);
 8026880:	4629      	mov	r1, r5
 8026882:	f7f3 ff59 	bl	801a738 <strcpy>
    dropdown->static_txt = 0;
 8026886:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    lv_obj_invalidate(obj);
 802688a:	4620      	mov	r0, r4
    dropdown->static_txt = 0;
 802688c:	f36f 1304 	bfc	r3, #4, #1
 8026890:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    lv_obj_invalidate(obj);
 8026894:	f7f6 fa02 	bl	801cc9c <lv_obj_invalidate>
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 8026898:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802689a:	b118      	cbz	r0, 80268a4 <lv_dropdown_set_options+0x76>
}
 802689c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 80268a0:	f7f6 b9fc 	b.w	801cc9c <lv_obj_invalidate>
}
 80268a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080268a6 <lv_dropdown_set_options_static>:
{
 80268a6:	b538      	push	{r3, r4, r5, lr}
 80268a8:	4604      	mov	r4, r0
    LV_ASSERT_NULL(options);
 80268aa:	460d      	mov	r5, r1
 80268ac:	b901      	cbnz	r1, 80268b0 <lv_dropdown_set_options_static+0xa>
 80268ae:	e7fe      	b.n	80268ae <lv_dropdown_set_options_static+0x8>
    dropdown->option_cnt = 0;
 80268b0:	2300      	movs	r3, #0
 80268b2:	3901      	subs	r1, #1
 80268b4:	8683      	strh	r3, [r0, #52]	; 0x34
        if(options[i] == '\n') dropdown->option_cnt++;
 80268b6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 80268b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        if(options[i] == '\n') dropdown->option_cnt++;
 80268bc:	3301      	adds	r3, #1
 80268be:	b29b      	uxth	r3, r3
    for(i = 0; options[i] != '\0'; i++) {
 80268c0:	b9d2      	cbnz	r2, 80268f8 <lv_dropdown_set_options_static+0x52>
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 80268c2:	86a3      	strh	r3, [r4, #52]	; 0x34
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 80268c4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    dropdown->sel_opt_id      = 0;
 80268c8:	86e2      	strh	r2, [r4, #54]	; 0x36
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 80268ca:	06db      	lsls	r3, r3, #27
    dropdown->sel_opt_id_orig = 0;
 80268cc:	8722      	strh	r2, [r4, #56]	; 0x38
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 80268ce:	d403      	bmi.n	80268d8 <lv_dropdown_set_options_static+0x32>
 80268d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80268d2:	b108      	cbz	r0, 80268d8 <lv_dropdown_set_options_static+0x32>
        lv_mem_free(dropdown->options);
 80268d4:	f7eb ff3e 	bl	8012754 <lv_mem_free>
    dropdown->static_txt = 1;
 80268d8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    lv_obj_invalidate(obj);
 80268dc:	4620      	mov	r0, r4
    dropdown->options = (char *)options;
 80268de:	6325      	str	r5, [r4, #48]	; 0x30
    dropdown->static_txt = 1;
 80268e0:	f043 0310 	orr.w	r3, r3, #16
 80268e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    lv_obj_invalidate(obj);
 80268e8:	f7f6 f9d8 	bl	801cc9c <lv_obj_invalidate>
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 80268ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80268ee:	b138      	cbz	r0, 8026900 <lv_dropdown_set_options_static+0x5a>
}
 80268f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 80268f4:	f7f6 b9d2 	b.w	801cc9c <lv_obj_invalidate>
        if(options[i] == '\n') dropdown->option_cnt++;
 80268f8:	2a0a      	cmp	r2, #10
 80268fa:	bf08      	it	eq
 80268fc:	86a3      	strheq	r3, [r4, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 80268fe:	e7da      	b.n	80268b6 <lv_dropdown_set_options_static+0x10>
}
 8026900:	bd38      	pop	{r3, r4, r5, pc}

08026902 <lv_dropdown_set_selected>:
    if(dropdown->sel_opt_id == sel_opt) return;
 8026902:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8026904:	428b      	cmp	r3, r1
 8026906:	d009      	beq.n	802691c <lv_dropdown_set_selected+0x1a>
    dropdown->sel_opt_id      = sel_opt < dropdown->option_cnt ? sel_opt : dropdown->option_cnt - 1;
 8026908:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 802690a:	428b      	cmp	r3, r1
 802690c:	bf9c      	itt	ls
 802690e:	f103 33ff 	addls.w	r3, r3, #4294967295
 8026912:	b299      	uxthls	r1, r3
 8026914:	86c1      	strh	r1, [r0, #54]	; 0x36
    dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8026916:	8701      	strh	r1, [r0, #56]	; 0x38
    lv_obj_invalidate(obj);
 8026918:	f7f6 b9c0 	b.w	801cc9c <lv_obj_invalidate>
}
 802691c:	4770      	bx	lr

0802691e <lv_dropdown_get_selected>:
}
 802691e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
 8026920:	4770      	bx	lr

08026922 <lv_dropdown_get_selected_str>:
{
 8026922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026924:	4604      	mov	r4, r0
    if(dropdown->options)  {
 8026926:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 8026928:	460d      	mov	r5, r1
 802692a:	4616      	mov	r6, r2
    if(dropdown->options)  {
 802692c:	b160      	cbz	r0, 8026948 <lv_dropdown_get_selected_str+0x26>
        txt_len     = strlen(dropdown->options);
 802692e:	f7f3 ff0d 	bl	801a74c <strlen>
    uint32_t line        = 0;
 8026932:	2300      	movs	r3, #0
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8026934:	4619      	mov	r1, r3
 8026936:	4281      	cmp	r1, r0
 8026938:	d002      	beq.n	8026940 <lv_dropdown_get_selected_str+0x1e>
 802693a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 802693c:	429a      	cmp	r2, r3
 802693e:	d105      	bne.n	802694c <lv_dropdown_get_selected_str+0x2a>
 8026940:	2300      	movs	r3, #0
        if(buf_size && c >= buf_size - 1) {
 8026942:	f106 3cff 	add.w	ip, r6, #4294967295
 8026946:	e00a      	b.n	802695e <lv_dropdown_get_selected_str+0x3c>
        buf[0] = '\0';
 8026948:	7008      	strb	r0, [r1, #0]
}
 802694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(dropdown->options[i] == '\n') line++;
 802694c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 802694e:	5c52      	ldrb	r2, [r2, r1]
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8026950:	3101      	adds	r1, #1
        if(dropdown->options[i] == '\n') line++;
 8026952:	2a0a      	cmp	r2, #10
 8026954:	bf08      	it	eq
 8026956:	3301      	addeq	r3, #1
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8026958:	e7ed      	b.n	8026936 <lv_dropdown_get_selected_str+0x14>
        buf[c] = dropdown->options[i];
 802695a:	54ea      	strb	r2, [r5, r3]
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 802695c:	3301      	adds	r3, #1
 802695e:	18ca      	adds	r2, r1, r3
 8026960:	4282      	cmp	r2, r0
 8026962:	d207      	bcs.n	8026974 <lv_dropdown_get_selected_str+0x52>
 8026964:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8026966:	5cba      	ldrb	r2, [r7, r2]
 8026968:	2a0a      	cmp	r2, #10
 802696a:	d003      	beq.n	8026974 <lv_dropdown_get_selected_str+0x52>
        if(buf_size && c >= buf_size - 1) {
 802696c:	2e00      	cmp	r6, #0
 802696e:	d0f4      	beq.n	802695a <lv_dropdown_get_selected_str+0x38>
 8026970:	459c      	cmp	ip, r3
 8026972:	d8f2      	bhi.n	802695a <lv_dropdown_get_selected_str+0x38>
    buf[c] = '\0';
 8026974:	2200      	movs	r2, #0
 8026976:	54ea      	strb	r2, [r5, r3]
 8026978:	e7e7      	b.n	802694a <lv_dropdown_get_selected_str+0x28>

0802697a <lv_dropdown_open>:
{
 802697a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802697e:	4604      	mov	r4, r0
    lv_obj_add_state(dropdown_obj, LV_STATE_CHECKED);
 8026980:	2101      	movs	r1, #1
 8026982:	f7f5 f864 	bl	801ba4e <lv_obj_add_state>
    lv_obj_set_parent(dropdown->list, lv_obj_get_screen(dropdown_obj));
 8026986:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8026988:	4620      	mov	r0, r4
 802698a:	f7f7 fc29 	bl	801e1e0 <lv_obj_get_screen>
 802698e:	4601      	mov	r1, r0
 8026990:	4628      	mov	r0, r5
 8026992:	f7f7 fd11 	bl	801e3b8 <lv_obj_set_parent>
    lv_obj_move_to_index(dropdown->list, -1);
 8026996:	f04f 31ff 	mov.w	r1, #4294967295
 802699a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802699c:	f7f7 fd7f 	bl	801e49e <lv_obj_move_to_index>
    lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 80269a0:	2101      	movs	r1, #1
 80269a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80269a4:	f7f5 f817 	bl	801b9d6 <lv_obj_clear_flag>
    lv_event_send(dropdown_obj, LV_EVENT_READY, NULL);
 80269a8:	2200      	movs	r2, #0
 80269aa:	211f      	movs	r1, #31
 80269ac:	4620      	mov	r0, r4
 80269ae:	f7dd fec9 	bl	8004744 <lv_event_send>
    lv_obj_t * label = get_label(dropdown_obj);
 80269b2:	4620      	mov	r0, r4
 80269b4:	f7ff fdef 	bl	8026596 <get_label>
    lv_label_set_text_static(label, dropdown->options);
 80269b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    lv_obj_t * label = get_label(dropdown_obj);
 80269ba:	4606      	mov	r6, r0
    lv_label_set_text_static(label, dropdown->options);
 80269bc:	f000 faf3 	bl	8026fa6 <lv_label_set_text_static>
    lv_obj_set_width(dropdown->list, LV_SIZE_CONTENT);
 80269c0:	f242 71d1 	movw	r1, #10193	; 0x27d1
 80269c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80269c6:	f7f5 feaf 	bl	801c728 <lv_obj_set_width>
    lv_obj_update_layout(label);
 80269ca:	4630      	mov	r0, r6
 80269cc:	f7de fefc 	bl	80057c8 <lv_obj_update_layout>
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 80269d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80269d2:	f7f5 ff63 	bl	801c89c <lv_obj_get_width>
 80269d6:	4605      	mov	r5, r0
 80269d8:	4620      	mov	r0, r4
 80269da:	f7f5 ff5f 	bl	801c89c <lv_obj_get_width>
 80269de:	4285      	cmp	r5, r0
 80269e0:	dc10      	bgt.n	8026a04 <lv_dropdown_open+0x8a>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 80269e2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 80269e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80269ea:	f002 020f 	and.w	r2, r2, #15
 80269ee:	40d3      	lsrs	r3, r2
 80269f0:	07db      	lsls	r3, r3, #31
 80269f2:	d507      	bpl.n	8026a04 <lv_dropdown_open+0x8a>
        lv_obj_set_width(dropdown->list, lv_obj_get_width(dropdown_obj));
 80269f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80269f6:	4620      	mov	r0, r4
 80269f8:	f7f5 ff50 	bl	801c89c <lv_obj_get_width>
 80269fc:	4601      	mov	r1, r0
 80269fe:	4628      	mov	r0, r5
 8026a00:	f7f5 fe92 	bl	801c728 <lv_obj_set_width>
    lv_coord_t label_h = lv_obj_get_height(label);
 8026a04:	4630      	mov	r0, r6
 8026a06:	f7f5 ff4f 	bl	801c8a8 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8026a0a:	2232      	movs	r2, #50	; 0x32
 8026a0c:	4607      	mov	r7, r0
 8026a0e:	2100      	movs	r1, #0
 8026a10:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026a12:	f7f7 f869 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8026a16:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8026a18:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8026a1a:	2100      	movs	r1, #0
 8026a1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026a1e:	f7f7 f863 	bl	801dae8 <lv_obj_get_style_prop>
 8026a22:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8026a24:	2211      	movs	r2, #17
 8026a26:	2100      	movs	r1, #0
 8026a28:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026a2a:	f7f7 f85d 	bl	801dae8 <lv_obj_get_style_prop>
    lv_coord_t list_fit_h = label_h + top + bottom;
 8026a2e:	4405      	add	r5, r0
    lv_dir_t dir = dropdown->dir;
 8026a30:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    lv_coord_t list_fit_h = label_h + top + bottom;
 8026a34:	eb05 0548 	add.w	r5, r5, r8, lsl #1
 8026a38:	443d      	add	r5, r7
    lv_dir_t dir = dropdown->dir;
 8026a3a:	f003 070f 	and.w	r7, r3, #15
    if(dropdown->dir == LV_DIR_BOTTOM) {
 8026a3e:	2f08      	cmp	r7, #8
    lv_coord_t list_fit_h = label_h + top + bottom;
 8026a40:	b22d      	sxth	r5, r5
    if(dropdown->dir == LV_DIR_BOTTOM) {
 8026a42:	d16a      	bne.n	8026b1a <lv_dropdown_open+0x1a0>
        if(dropdown_obj->coords.y2 + list_h > LV_VER_RES) {
 8026a44:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 8026a48:	f7eb fb54 	bl	80120f4 <lv_disp_get_default>
 8026a4c:	f7eb fb68 	bl	8012120 <lv_disp_get_ver_res>
 8026a50:	44a8      	add	r8, r5
 8026a52:	4580      	cmp	r8, r0
 8026a54:	dd67      	ble.n	8026b26 <lv_dropdown_open+0x1ac>
            if(dropdown_obj->coords.y1 > LV_VER_RES - dropdown_obj->coords.y2) {
 8026a56:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026a5a:	f7eb fb4b 	bl	80120f4 <lv_disp_get_default>
 8026a5e:	f7eb fb5f 	bl	8012120 <lv_disp_get_ver_res>
 8026a62:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8026a66:	1ac0      	subs	r0, r0, r3
 8026a68:	4580      	cmp	r8, r0
 8026a6a:	dd4d      	ble.n	8026b08 <lv_dropdown_open+0x18e>
                list_h = dropdown_obj->coords.y1 - 1;
 8026a6c:	8ae1      	ldrh	r1, [r4, #22]
                dir = LV_DIR_TOP;
 8026a6e:	2704      	movs	r7, #4
                list_h = dropdown_obj->coords.y1 - 1;
 8026a70:	3901      	subs	r1, #1
 8026a72:	b209      	sxth	r1, r1
    lv_obj_set_height(dropdown->list, list_h);
 8026a74:	42a9      	cmp	r1, r5
 8026a76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026a78:	bfa8      	it	ge
 8026a7a:	4629      	movge	r1, r5
 8026a7c:	f7f5 fe6b 	bl	801c756 <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 8026a80:	4620      	mov	r0, r4
 8026a82:	f7ff fd8e 	bl	80265a2 <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8026a86:	2f08      	cmp	r7, #8
 8026a88:	d164      	bne.n	8026b54 <lv_dropdown_open+0x1da>
 8026a8a:	2300      	movs	r3, #0
 8026a8c:	220d      	movs	r2, #13
 8026a8e:	4621      	mov	r1, r4
 8026a90:	9300      	str	r3, [sp, #0]
 8026a92:	6a60      	ldr	r0, [r4, #36]	; 0x24
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8026a94:	f7de feb2 	bl	80057fc <lv_obj_align_to>
    lv_obj_update_layout(dropdown->list);
 8026a98:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026a9a:	f7de fe95 	bl	80057c8 <lv_obj_update_layout>
    if(dropdown->dir == LV_DIR_LEFT || dropdown->dir == LV_DIR_RIGHT) {
 8026a9e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8026aa2:	f003 030f 	and.w	r3, r3, #15
 8026aa6:	3b01      	subs	r3, #1
 8026aa8:	2b01      	cmp	r3, #1
 8026aaa:	d81a      	bhi.n	8026ae2 <lv_dropdown_open+0x168>
        lv_coord_t y1 = lv_obj_get_y(dropdown->list);
 8026aac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026aae:	f7f5 fece 	bl	801c84e <lv_obj_get_y>
 8026ab2:	4605      	mov	r5, r0
        lv_coord_t y2 = lv_obj_get_y2(dropdown->list);
 8026ab4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026ab6:	f7f5 fee6 	bl	801c886 <lv_obj_get_y2>
 8026aba:	4607      	mov	r7, r0
        if(y2 >= LV_VER_RES) {
 8026abc:	f7eb fb1a 	bl	80120f4 <lv_disp_get_default>
 8026ac0:	f7eb fb2e 	bl	8012120 <lv_disp_get_ver_res>
 8026ac4:	42b8      	cmp	r0, r7
 8026ac6:	dc0c      	bgt.n	8026ae2 <lv_dropdown_open+0x168>
            lv_obj_set_y(dropdown->list, y1 - (y2 - LV_VER_RES) - 1);
 8026ac8:	3d01      	subs	r5, #1
 8026aca:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8026ace:	f7eb fb11 	bl	80120f4 <lv_disp_get_default>
 8026ad2:	1bed      	subs	r5, r5, r7
 8026ad4:	f7eb fb24 	bl	8012120 <lv_disp_get_ver_res>
 8026ad8:	4405      	add	r5, r0
 8026ada:	4640      	mov	r0, r8
 8026adc:	b229      	sxth	r1, r5
 8026ade:	f7f5 fe01 	bl	801c6e4 <lv_obj_set_y>
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, dropdown->options);
 8026ae2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8026ae4:	2100      	movs	r1, #0
 8026ae6:	4630      	mov	r0, r6
 8026ae8:	f7f7 fb37 	bl	801e15a <lv_obj_calculate_style_text_align>
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 8026aec:	2300      	movs	r3, #0
    switch(align) {
 8026aee:	2802      	cmp	r0, #2
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, dropdown->options);
 8026af0:	4601      	mov	r1, r0
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 8026af2:	461a      	mov	r2, r3
    switch(align) {
 8026af4:	d002      	beq.n	8026afc <lv_dropdown_open+0x182>
 8026af6:	2803      	cmp	r0, #3
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 8026af8:	bf18      	it	ne
 8026afa:	2101      	movne	r1, #1
            lv_obj_align(label, LV_ALIGN_TOP_MID, 0, 0);
 8026afc:	4630      	mov	r0, r6
}
 8026afe:	b002      	add	sp, #8
 8026b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            lv_obj_align(label, LV_ALIGN_TOP_MID, 0, 0);
 8026b04:	f7f5 be6c 	b.w	801c7e0 <lv_obj_align>
                list_h = LV_VER_RES - dropdown_obj->coords.y2 - 1 ;
 8026b08:	f7eb faf4 	bl	80120f4 <lv_disp_get_default>
 8026b0c:	f7eb fb08 	bl	8012120 <lv_disp_get_ver_res>
 8026b10:	8b63      	ldrh	r3, [r4, #26]
 8026b12:	1ac1      	subs	r1, r0, r3
 8026b14:	3901      	subs	r1, #1
 8026b16:	b209      	sxth	r1, r1
 8026b18:	e7ac      	b.n	8026a74 <lv_dropdown_open+0xfa>
    else if(dropdown->dir == LV_DIR_TOP) {
 8026b1a:	2f04      	cmp	r7, #4
 8026b1c:	d103      	bne.n	8026b26 <lv_dropdown_open+0x1ac>
        if(dropdown_obj->coords.y1 - list_h < 0) {
 8026b1e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026b22:	45a8      	cmp	r8, r5
 8026b24:	db01      	blt.n	8026b2a <lv_dropdown_open+0x1b0>
    lv_coord_t list_h = list_fit_h;
 8026b26:	4629      	mov	r1, r5
 8026b28:	e7a4      	b.n	8026a74 <lv_dropdown_open+0xfa>
            if(dropdown_obj->coords.y1 < LV_VER_RES - dropdown_obj->coords.y2) {
 8026b2a:	f7eb fae3 	bl	80120f4 <lv_disp_get_default>
 8026b2e:	f7eb faf7 	bl	8012120 <lv_disp_get_ver_res>
 8026b32:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8026b36:	1ac0      	subs	r0, r0, r3
 8026b38:	4580      	cmp	r8, r0
 8026b3a:	da08      	bge.n	8026b4e <lv_dropdown_open+0x1d4>
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 8026b3c:	f7eb fada 	bl	80120f4 <lv_disp_get_default>
                dir = LV_DIR_BOTTOM;
 8026b40:	2708      	movs	r7, #8
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 8026b42:	f7eb faed 	bl	8012120 <lv_disp_get_ver_res>
 8026b46:	8b63      	ldrh	r3, [r4, #26]
 8026b48:	1ac1      	subs	r1, r0, r3
 8026b4a:	b209      	sxth	r1, r1
 8026b4c:	e792      	b.n	8026a74 <lv_dropdown_open+0xfa>
                list_h = dropdown_obj->coords.y1;
 8026b4e:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8026b52:	e78f      	b.n	8026a74 <lv_dropdown_open+0xfa>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 8026b54:	2f04      	cmp	r7, #4
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8026b56:	6a60      	ldr	r0, [r4, #36]	; 0x24
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 8026b58:	d104      	bne.n	8026b64 <lv_dropdown_open+0x1ea>
 8026b5a:	2300      	movs	r3, #0
 8026b5c:	220a      	movs	r2, #10
 8026b5e:	9300      	str	r3, [sp, #0]
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8026b60:	4621      	mov	r1, r4
 8026b62:	e797      	b.n	8026a94 <lv_dropdown_open+0x11a>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 8026b64:	2f01      	cmp	r7, #1
 8026b66:	d103      	bne.n	8026b70 <lv_dropdown_open+0x1f6>
 8026b68:	2300      	movs	r3, #0
 8026b6a:	2210      	movs	r2, #16
 8026b6c:	9300      	str	r3, [sp, #0]
 8026b6e:	e7f7      	b.n	8026b60 <lv_dropdown_open+0x1e6>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8026b70:	2f02      	cmp	r7, #2
 8026b72:	d191      	bne.n	8026a98 <lv_dropdown_open+0x11e>
 8026b74:	2300      	movs	r3, #0
 8026b76:	2213      	movs	r2, #19
 8026b78:	9300      	str	r3, [sp, #0]
 8026b7a:	e7f1      	b.n	8026b60 <lv_dropdown_open+0x1e6>

08026b7c <lv_dropdown_close>:
{
 8026b7c:	b510      	push	{r4, lr}
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8026b7e:	2101      	movs	r1, #1
{
 8026b80:	4604      	mov	r4, r0
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8026b82:	f7f4 ff6e 	bl	801ba62 <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8026b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8026b8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026b8c:	2101      	movs	r1, #1
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8026b8e:	8763      	strh	r3, [r4, #58]	; 0x3a
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8026b90:	f7f4 feeb 	bl	801b96a <lv_obj_add_flag>
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 8026b94:	4620      	mov	r0, r4
 8026b96:	2200      	movs	r2, #0
 8026b98:	2120      	movs	r1, #32
}
 8026b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 8026b9e:	f7dd bdd1 	b.w	8004744 <lv_event_send>

08026ba2 <lv_dropdown_is_open>:
{
 8026ba2:	b508      	push	{r3, lr}
    return lv_obj_has_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN) ? false : true;
 8026ba4:	2101      	movs	r1, #1
 8026ba6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026ba8:	f7f4 ff64 	bl	801ba74 <lv_obj_has_flag>
 8026bac:	f080 0001 	eor.w	r0, r0, #1
}
 8026bb0:	b2c0      	uxtb	r0, r0
 8026bb2:	bd08      	pop	{r3, pc}

08026bb4 <btn_release_handler.isra.0>:
static lv_res_t btn_release_handler(lv_obj_t * obj)
 8026bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026bb6:	4604      	mov	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 8026bb8:	f7dd fe2a 	bl	8004810 <lv_indev_get_act>
 8026bbc:	4605      	mov	r5, r0
    if(lv_indev_get_scroll_obj(indev) == NULL) {
 8026bbe:	f7f4 fd45 	bl	801b64c <lv_indev_get_scroll_obj>
 8026bc2:	bb50      	cbnz	r0, 8026c1a <btn_release_handler.isra.0+0x66>
        if(lv_dropdown_is_open(obj)) {
 8026bc4:	4620      	mov	r0, r4
 8026bc6:	f7ff ffec 	bl	8026ba2 <lv_dropdown_is_open>
 8026bca:	b300      	cbz	r0, 8026c0e <btn_release_handler.isra.0+0x5a>
            lv_dropdown_close(obj);
 8026bcc:	4620      	mov	r0, r4
 8026bce:	f7ff ffd5 	bl	8026b7c <lv_dropdown_close>
            if(dropdown->sel_opt_id_orig != dropdown->sel_opt_id) {
 8026bd2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8026bd4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8026bd6:	429a      	cmp	r2, r3
 8026bd8:	d00b      	beq.n	8026bf2 <btn_release_handler.isra.0+0x3e>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8026bda:	aa01      	add	r2, sp, #4
 8026bdc:	211c      	movs	r1, #28
 8026bde:	4620      	mov	r0, r4
                dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8026be0:	8723      	strh	r3, [r4, #56]	; 0x38
                uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 8026be2:	9301      	str	r3, [sp, #4]
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8026be4:	f7dd fdae 	bl	8004744 <lv_event_send>
                if(res != LV_RES_OK) return res;
 8026be8:	2801      	cmp	r0, #1
 8026bea:	d11e      	bne.n	8026c2a <btn_release_handler.isra.0+0x76>
                lv_obj_invalidate(obj);
 8026bec:	4620      	mov	r0, r4
 8026bee:	f7f6 f855 	bl	801cc9c <lv_obj_invalidate>
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8026bf2:	4628      	mov	r0, r5
 8026bf4:	f7f4 fcf5 	bl	801b5e2 <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8026bf8:	2804      	cmp	r0, #4
 8026bfa:	d116      	bne.n	8026c2a <btn_release_handler.isra.0+0x76>
                lv_group_set_editing(lv_obj_get_group(obj), false);
 8026bfc:	4620      	mov	r0, r4
 8026bfe:	f7f4 ff47 	bl	801ba90 <lv_obj_get_group>
 8026c02:	2100      	movs	r1, #0
}
 8026c04:	b003      	add	sp, #12
 8026c06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                lv_group_set_editing(lv_obj_get_group(obj), false);
 8026c0a:	f7f4 bcc4 	b.w	801b596 <lv_group_set_editing>
            lv_dropdown_open(obj);
 8026c0e:	4620      	mov	r0, r4
}
 8026c10:	b003      	add	sp, #12
 8026c12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            lv_dropdown_open(obj);
 8026c16:	f7ff beb0 	b.w	802697a <lv_dropdown_open>
        dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 8026c1a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
        lv_obj_invalidate(obj);
 8026c1c:	4620      	mov	r0, r4
        dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 8026c1e:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 8026c20:	b003      	add	sp, #12
 8026c22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        lv_obj_invalidate(obj);
 8026c26:	f7f6 b839 	b.w	801cc9c <lv_obj_invalidate>
}
 8026c2a:	b003      	add	sp, #12
 8026c2c:	bd30      	pop	{r4, r5, pc}

08026c2e <lv_img_get_transformed_size>:
{
 8026c2e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
                                     img->angle, img->zoom, &img->pivot);
 8026c30:	f100 0332 	add.w	r3, r0, #50	; 0x32
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 8026c34:	9301      	str	r3, [sp, #4]
 8026c36:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8026c38:	9300      	str	r3, [sp, #0]
 8026c3a:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 8026c3e:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 8026c42:	f9b0 102c 	ldrsh.w	r1, [r0, #44]	; 0x2c
 8026c46:	a804      	add	r0, sp, #16
 8026c48:	f7f8 fc08 	bl	801f45c <_lv_img_buf_get_transformed_area>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8026c4c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8026c50:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8026c54:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8026c58:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8026c5a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    return (lv_point_t) {
 8026c5e:	1a12      	subs	r2, r2, r0
 8026c60:	3301      	adds	r3, #1
 8026c62:	2000      	movs	r0, #0
 8026c64:	1a5b      	subs	r3, r3, r1
 8026c66:	b292      	uxth	r2, r2
 8026c68:	b29b      	uxth	r3, r3
 8026c6a:	f362 000f 	bfi	r0, r2, #0, #16
 8026c6e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8026c72:	b007      	add	sp, #28
 8026c74:	f85d fb04 	ldr.w	pc, [sp], #4

08026c78 <lv_img_constructor>:
{
 8026c78:	b538      	push	{r3, r4, r5, lr}
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 8026c7a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    img->src       = NULL;
 8026c7e:	2500      	movs	r5, #0
{
 8026c80:	460c      	mov	r4, r1
    img->w         = lv_obj_get_width(obj);
 8026c82:	4608      	mov	r0, r1
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 8026c84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    img->src       = NULL;
 8026c88:	624d      	str	r5, [r1, #36]	; 0x24
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 8026c8a:	f043 0303 	orr.w	r3, r3, #3
 8026c8e:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
    img->w         = lv_obj_get_width(obj);
 8026c92:	f7f5 fe03 	bl	801c89c <lv_obj_get_width>
 8026c96:	85a0      	strh	r0, [r4, #44]	; 0x2c
    img->h         = lv_obj_get_height(obj);
 8026c98:	4620      	mov	r0, r4
 8026c9a:	f7f5 fe05 	bl	801c8a8 <lv_obj_get_height>
    img->pivot.y = 0;
 8026c9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    img->h         = lv_obj_get_height(obj);
 8026ca2:	85e0      	strh	r0, [r4, #46]	; 0x2e
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8026ca4:	2102      	movs	r1, #2
    img->pivot.y = 0;
 8026ca6:	6363      	str	r3, [r4, #52]	; 0x34
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8026ca8:	4620      	mov	r0, r4
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8026caa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    img->offset.x  = 0;
 8026cac:	62a5      	str	r5, [r4, #40]	; 0x28
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8026cae:	f423 7360 	bic.w	r3, r3, #896	; 0x380
    img->angle = 0;
 8026cb2:	6325      	str	r5, [r4, #48]	; 0x30
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8026cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026cb8:	8723      	strh	r3, [r4, #56]	; 0x38
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8026cba:	f7f4 fe8c 	bl	801b9d6 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8026cbe:	4620      	mov	r0, r4
 8026cc0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
}
 8026cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8026cc8:	f7f4 be4f 	b.w	801b96a <lv_obj_add_flag>

08026ccc <lv_img_destructor>:
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8026ccc:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8026cd0:	f003 0303 	and.w	r3, r3, #3
 8026cd4:	3b01      	subs	r3, #1
 8026cd6:	2b01      	cmp	r3, #1
{
 8026cd8:	b510      	push	{r4, lr}
 8026cda:	460c      	mov	r4, r1
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8026cdc:	d80a      	bhi.n	8026cf4 <lv_img_destructor+0x28>
        lv_mem_free((void *)img->src);
 8026cde:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8026ce0:	f7eb fd38 	bl	8012754 <lv_mem_free>
        img->src      = NULL;
 8026ce4:	2300      	movs	r3, #0
 8026ce6:	6263      	str	r3, [r4, #36]	; 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8026ce8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8026cec:	f043 0303 	orr.w	r3, r3, #3
 8026cf0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8026cf4:	bd10      	pop	{r4, pc}

08026cf6 <lv_img_set_src>:
{
 8026cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026cfa:	460e      	mov	r6, r1
 8026cfc:	b086      	sub	sp, #24
 8026cfe:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 8026d00:	f7f5 ffcc 	bl	801cc9c <lv_obj_invalidate>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8026d04:	4630      	mov	r0, r6
 8026d06:	f7f7 fdcd 	bl	801e8a4 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8026d0a:	2803      	cmp	r0, #3
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8026d0c:	4605      	mov	r5, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8026d0e:	d114      	bne.n	8026d3a <lv_img_set_src+0x44>
        if(img->src_type == LV_IMG_SRC_SYMBOL || img->src_type == LV_IMG_SRC_FILE) {
 8026d10:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8026d14:	f003 0303 	and.w	r3, r3, #3
 8026d18:	3b01      	subs	r3, #1
 8026d1a:	2b01      	cmp	r3, #1
 8026d1c:	d802      	bhi.n	8026d24 <lv_img_set_src+0x2e>
            lv_mem_free((void *)img->src);
 8026d1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026d20:	f7eb fd18 	bl	8012754 <lv_mem_free>
        img->src      = NULL;
 8026d24:	2300      	movs	r3, #0
 8026d26:	6263      	str	r3, [r4, #36]	; 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8026d28:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8026d2c:	f043 0303 	orr.w	r3, r3, #3
 8026d30:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8026d34:	b006      	add	sp, #24
 8026d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_decoder_get_info(src, &header);
 8026d3a:	a904      	add	r1, sp, #16
 8026d3c:	4630      	mov	r0, r6
 8026d3e:	f7e2 f933 	bl	8008fa8 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8026d42:	2d00      	cmp	r5, #0
 8026d44:	d138      	bne.n	8026db8 <lv_img_set_src+0xc2>
        if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8026d46:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8026d4a:	f003 0303 	and.w	r3, r3, #3
 8026d4e:	3b01      	subs	r3, #1
 8026d50:	2b01      	cmp	r3, #1
 8026d52:	d802      	bhi.n	8026d5a <lv_img_set_src+0x64>
            lv_mem_free((void *)img->src);
 8026d54:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026d56:	f7eb fcfd 	bl	8012754 <lv_mem_free>
        img->src = src;
 8026d5a:	6266      	str	r6, [r4, #36]	; 0x24
    img->w        = header.w;
 8026d5c:	9a04      	ldr	r2, [sp, #16]
    img->src_type = src_type;
 8026d5e:	f005 0503 	and.w	r5, r5, #3
    lv_obj_refresh_self_size(obj);
 8026d62:	4620      	mov	r0, r4
    img->w        = header.w;
 8026d64:	f3c2 238a 	ubfx	r3, r2, #10, #11
    img->pivot.x = header.w / 2;
 8026d68:	f3c2 22c9 	ubfx	r2, r2, #11, #10
    img->w        = header.w;
 8026d6c:	85a3      	strh	r3, [r4, #44]	; 0x2c
    img->h        = header.h;
 8026d6e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    img->pivot.x = header.w / 2;
 8026d72:	8662      	strh	r2, [r4, #50]	; 0x32
    img->h        = header.h;
 8026d74:	f3c3 114a 	ubfx	r1, r3, #5, #11
    img->pivot.y = header.h / 2;
 8026d78:	f3c3 1389 	ubfx	r3, r3, #6, #10
    img->h        = header.h;
 8026d7c:	85e1      	strh	r1, [r4, #46]	; 0x2e
    img->cf       = header.cf;
 8026d7e:	f89d 1010 	ldrb.w	r1, [sp, #16]
    img->pivot.y = header.h / 2;
 8026d82:	86a3      	strh	r3, [r4, #52]	; 0x34
    img->cf       = header.cf;
 8026d84:	f3c1 0104 	ubfx	r1, r1, #0, #5
    img->src_type = src_type;
 8026d88:	ea45 0581 	orr.w	r5, r5, r1, lsl #2
 8026d8c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8026d90:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8026d94:	430d      	orrs	r5, r1
 8026d96:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    lv_obj_refresh_self_size(obj);
 8026d9a:	f7f5 fdf4 	bl	801c986 <lv_obj_refresh_self_size>
    if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_size(obj);
 8026d9e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8026da0:	b91b      	cbnz	r3, 8026daa <lv_img_set_src+0xb4>
 8026da2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8026da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8026da8:	d002      	beq.n	8026db0 <lv_img_set_src+0xba>
 8026daa:	4620      	mov	r0, r4
 8026dac:	f7f5 fba8 	bl	801c500 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8026db0:	4620      	mov	r0, r4
 8026db2:	f7f5 ff73 	bl	801cc9c <lv_obj_invalidate>
 8026db6:	e7bd      	b.n	8026d34 <lv_img_set_src+0x3e>
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8026db8:	1e6b      	subs	r3, r5, #1
 8026dba:	b2db      	uxtb	r3, r3
 8026dbc:	2b01      	cmp	r3, #1
 8026dbe:	d8cd      	bhi.n	8026d5c <lv_img_set_src+0x66>
        if(img->src != src) {
 8026dc0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8026dc2:	42b7      	cmp	r7, r6
 8026dc4:	d019      	beq.n	8026dfa <lv_img_set_src+0x104>
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8026dc6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8026dca:	4630      	mov	r0, r6
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8026dcc:	f003 0303 	and.w	r3, r3, #3
 8026dd0:	3b01      	subs	r3, #1
            const void * old_src = NULL;
 8026dd2:	2b01      	cmp	r3, #1
 8026dd4:	bf88      	it	hi
 8026dd6:	2700      	movhi	r7, #0
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8026dd8:	f7f3 fcb8 	bl	801a74c <strlen>
 8026ddc:	3001      	adds	r0, #1
 8026dde:	f7eb fc9b 	bl	8012718 <lv_mem_alloc>
            LV_ASSERT_MALLOC(new_str);
 8026de2:	4680      	mov	r8, r0
 8026de4:	b900      	cbnz	r0, 8026de8 <lv_img_set_src+0xf2>
 8026de6:	e7fe      	b.n	8026de6 <lv_img_set_src+0xf0>
            strcpy(new_str, src);
 8026de8:	4631      	mov	r1, r6
 8026dea:	f7f3 fca5 	bl	801a738 <strcpy>
            img->src = new_str;
 8026dee:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
            if(old_src) lv_mem_free((void *)old_src);
 8026df2:	b117      	cbz	r7, 8026dfa <lv_img_set_src+0x104>
 8026df4:	4638      	mov	r0, r7
 8026df6:	f7eb fcad 	bl	8012754 <lv_mem_free>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8026dfa:	2d02      	cmp	r5, #2
 8026dfc:	d1ae      	bne.n	8026d5c <lv_img_set_src+0x66>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026dfe:	2257      	movs	r2, #87	; 0x57
 8026e00:	2100      	movs	r1, #0
 8026e02:	4620      	mov	r0, r4
 8026e04:	f7f6 fe70 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8026e08:	2258      	movs	r2, #88	; 0x58
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026e0a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8026e0c:	2100      	movs	r1, #0
 8026e0e:	4620      	mov	r0, r4
 8026e10:	f7f6 fe6a 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026e14:	2259      	movs	r2, #89	; 0x59
    return (lv_coord_t)v.num;
 8026e16:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026e1a:	2100      	movs	r1, #0
 8026e1c:	4620      	mov	r0, r4
 8026e1e:	f7f6 fe63 	bl	801dae8 <lv_obj_get_style_prop>
        lv_txt_get_size(&size, src, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8026e22:	f641 73ff 	movw	r3, #8191	; 0x1fff
    return (lv_coord_t)v.num;
 8026e26:	b200      	sxth	r0, r0
 8026e28:	2200      	movs	r2, #0
 8026e2a:	4631      	mov	r1, r6
 8026e2c:	9000      	str	r0, [sp, #0]
 8026e2e:	a805      	add	r0, sp, #20
 8026e30:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8026e34:	4643      	mov	r3, r8
 8026e36:	463a      	mov	r2, r7
 8026e38:	f7fe fd32 	bl	80258a0 <lv_txt_get_size>
        header.w = size.x;
 8026e3c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8026e40:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8026e44:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8026e48:	055b      	lsls	r3, r3, #21
 8026e4a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8026e4e:	9a04      	ldr	r2, [sp, #16]
 8026e50:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8026e54:	4313      	orrs	r3, r2
 8026e56:	9304      	str	r3, [sp, #16]
 8026e58:	e780      	b.n	8026d5c <lv_img_set_src+0x66>

08026e5a <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
 8026e5a:	b510      	push	{r4, lr}
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8026e5c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8026e60:	4604      	mov	r4, r0
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8026e62:	065b      	lsls	r3, r3, #25
 8026e64:	d503      	bpl.n	8026e6e <lv_label_dot_tmp_free+0x14>
 8026e66:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8026e68:	b108      	cbz	r0, 8026e6e <lv_label_dot_tmp_free+0x14>
        lv_mem_free(label->dot.tmp_ptr);
 8026e6a:	f7eb fc73 	bl	8012754 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 8026e6e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8026e72:	f36f 1386 	bfc	r3, #6, #1
 8026e76:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 8026e7a:	2300      	movs	r3, #0
 8026e7c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8026e7e:	bd10      	pop	{r4, pc}

08026e80 <lv_label_destructor>:
{
 8026e80:	b510      	push	{r4, lr}
 8026e82:	460c      	mov	r4, r1
    lv_label_dot_tmp_free(obj);
 8026e84:	4608      	mov	r0, r1
 8026e86:	f7ff ffe8 	bl	8026e5a <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 8026e8a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8026e8e:	071b      	lsls	r3, r3, #28
 8026e90:	d402      	bmi.n	8026e98 <lv_label_destructor+0x18>
 8026e92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026e94:	f7eb fc5e 	bl	8012754 <lv_mem_free>
    label->text = NULL;
 8026e98:	2300      	movs	r3, #0
 8026e9a:	6263      	str	r3, [r4, #36]	; 0x24
}
 8026e9c:	bd10      	pop	{r4, pc}

08026e9e <set_ofs_y_anim>:
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
 8026e9e:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    lv_obj_invalidate(obj);
 8026ea2:	f7f5 befb 	b.w	801cc9c <lv_obj_invalidate>

08026ea6 <set_ofs_x_anim>:
    label->offset.x    = v;
 8026ea6:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    lv_obj_invalidate(obj);
 8026eaa:	f7f5 bef7 	b.w	801cc9c <lv_obj_invalidate>

08026eae <lv_obj_get_style_text_line_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026eae:	2259      	movs	r2, #89	; 0x59
 8026eb0:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
 8026eb2:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026eb4:	f7f6 fe18 	bl	801dae8 <lv_obj_get_style_prop>
}
 8026eb8:	b200      	sxth	r0, r0
 8026eba:	bd08      	pop	{r3, pc}

08026ebc <lv_obj_get_style_text_letter_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8026ebc:	2258      	movs	r2, #88	; 0x58
 8026ebe:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_letter_space(const struct _lv_obj_t * obj, uint32_t part)
 8026ec0:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8026ec2:	f7f6 fe11 	bl	801dae8 <lv_obj_get_style_prop>
}
 8026ec6:	b200      	sxth	r0, r0
 8026ec8:	bd08      	pop	{r3, pc}

08026eca <lv_obj_get_style_text_font.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026eca:	2257      	movs	r2, #87	; 0x57
 8026ecc:	2100      	movs	r1, #0
static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
 8026ece:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026ed0:	f7f6 fe0a 	bl	801dae8 <lv_obj_get_style_prop>
}
 8026ed4:	bd08      	pop	{r3, pc}

08026ed6 <lv_obj_get_style_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8026ed6:	2201      	movs	r2, #1
 8026ed8:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
 8026eda:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8026edc:	f7f6 fe04 	bl	801dae8 <lv_obj_get_style_prop>
}
 8026ee0:	b200      	sxth	r0, r0
 8026ee2:	bd08      	pop	{r3, pc}

08026ee4 <lv_label_set_text>:
{
 8026ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026ee6:	4604      	mov	r4, r0
 8026ee8:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
 8026eea:	f7f5 fed7 	bl	801cc9c <lv_obj_invalidate>
    if(text == NULL) text = label->text;
 8026eee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8026ef0:	2d00      	cmp	r5, #0
 8026ef2:	bf08      	it	eq
 8026ef4:	4635      	moveq	r5, r6
    if(label->text == text && label->static_txt == 0) {
 8026ef6:	42ae      	cmp	r6, r5
 8026ef8:	d112      	bne.n	8026f20 <lv_label_set_text+0x3c>
 8026efa:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8026efe:	071b      	lsls	r3, r3, #28
 8026f00:	d418      	bmi.n	8026f34 <lv_label_set_text+0x50>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 8026f02:	4630      	mov	r0, r6
 8026f04:	f7f3 fc22 	bl	801a74c <strlen>
 8026f08:	1c41      	adds	r1, r0, #1
 8026f0a:	4630      	mov	r0, r6
 8026f0c:	f7eb fc3a 	bl	8012784 <lv_mem_realloc>
        LV_ASSERT_MALLOC(label->text);
 8026f10:	b128      	cbz	r0, 8026f1e <lv_label_set_text+0x3a>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 8026f12:	6260      	str	r0, [r4, #36]	; 0x24
    lv_label_refr_text(obj);
 8026f14:	4620      	mov	r0, r4
}
 8026f16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(obj);
 8026f1a:	f7ee bd9b 	b.w	8015a54 <lv_label_refr_text>
        LV_ASSERT_MALLOC(label->text);
 8026f1e:	e7fe      	b.n	8026f1e <lv_label_set_text+0x3a>
        if(label->text != NULL && label->static_txt == 0) {
 8026f20:	b146      	cbz	r6, 8026f34 <lv_label_set_text+0x50>
 8026f22:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8026f26:	f013 0708 	ands.w	r7, r3, #8
 8026f2a:	d103      	bne.n	8026f34 <lv_label_set_text+0x50>
            lv_mem_free(label->text);
 8026f2c:	4630      	mov	r0, r6
 8026f2e:	f7eb fc11 	bl	8012754 <lv_mem_free>
            label->text = NULL;
 8026f32:	6267      	str	r7, [r4, #36]	; 0x24
        size_t len = strlen(text) + 1;
 8026f34:	4628      	mov	r0, r5
 8026f36:	f7f3 fc09 	bl	801a74c <strlen>
        label->text = lv_mem_alloc(len);
 8026f3a:	3001      	adds	r0, #1
 8026f3c:	f7eb fbec 	bl	8012718 <lv_mem_alloc>
 8026f40:	6260      	str	r0, [r4, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 8026f42:	b900      	cbnz	r0, 8026f46 <lv_label_set_text+0x62>
 8026f44:	e7fe      	b.n	8026f44 <lv_label_set_text+0x60>
        strcpy(label->text, text);
 8026f46:	4629      	mov	r1, r5
 8026f48:	f7f3 fbf6 	bl	801a738 <strcpy>
        label->static_txt = 0;
 8026f4c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8026f50:	f36f 03c3 	bfc	r3, #3, #1
 8026f54:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8026f58:	e7dc      	b.n	8026f14 <lv_label_set_text+0x30>

08026f5a <lv_label_set_text_fmt>:
{
 8026f5a:	b40e      	push	{r1, r2, r3}
 8026f5c:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
 8026f5e:	9e07      	ldr	r6, [sp, #28]
 8026f60:	4604      	mov	r4, r0
    LV_ASSERT_NULL(fmt);
 8026f62:	b906      	cbnz	r6, 8026f66 <lv_label_set_text_fmt+0xc>
 8026f64:	e7fe      	b.n	8026f64 <lv_label_set_text_fmt+0xa>
    lv_obj_invalidate(obj);
 8026f66:	f7f5 fe99 	bl	801cc9c <lv_obj_invalidate>
    if(label->text != NULL && label->static_txt == 0) {
 8026f6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026f6c:	b138      	cbz	r0, 8026f7e <lv_label_set_text_fmt+0x24>
 8026f6e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8026f72:	f013 0508 	ands.w	r5, r3, #8
 8026f76:	d102      	bne.n	8026f7e <lv_label_set_text_fmt+0x24>
        lv_mem_free(label->text);
 8026f78:	f7eb fbec 	bl	8012754 <lv_mem_free>
        label->text = NULL;
 8026f7c:	6265      	str	r5, [r4, #36]	; 0x24
    va_start(args, fmt);
 8026f7e:	a908      	add	r1, sp, #32
    label->text = _lv_txt_set_text_vfmt(fmt, args);
 8026f80:	4630      	mov	r0, r6
    va_start(args, fmt);
 8026f82:	9101      	str	r1, [sp, #4]
    label->text = _lv_txt_set_text_vfmt(fmt, args);
 8026f84:	f7fe fc2e 	bl	80257e4 <_lv_txt_set_text_vfmt>
    label->static_txt = 0; /*Now the text is dynamically allocated*/
 8026f88:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    label->text = _lv_txt_set_text_vfmt(fmt, args);
 8026f8c:	6260      	str	r0, [r4, #36]	; 0x24
    lv_label_refr_text(obj);
 8026f8e:	4620      	mov	r0, r4
    label->static_txt = 0; /*Now the text is dynamically allocated*/
 8026f90:	f36f 03c3 	bfc	r3, #3, #1
 8026f94:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 8026f98:	f7ee fd5c 	bl	8015a54 <lv_label_refr_text>
}
 8026f9c:	b003      	add	sp, #12
 8026f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026fa2:	b003      	add	sp, #12
 8026fa4:	4770      	bx	lr

08026fa6 <lv_label_set_text_static>:
{
 8026fa6:	b570      	push	{r4, r5, r6, lr}
    if(label->static_txt == 0 && label->text != NULL) {
 8026fa8:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8026fac:	4604      	mov	r4, r0
 8026fae:	460d      	mov	r5, r1
    if(label->static_txt == 0 && label->text != NULL) {
 8026fb0:	f013 0608 	ands.w	r6, r3, #8
 8026fb4:	d104      	bne.n	8026fc0 <lv_label_set_text_static+0x1a>
 8026fb6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026fb8:	b110      	cbz	r0, 8026fc0 <lv_label_set_text_static+0x1a>
        lv_mem_free(label->text);
 8026fba:	f7eb fbcb 	bl	8012754 <lv_mem_free>
        label->text = NULL;
 8026fbe:	6266      	str	r6, [r4, #36]	; 0x24
    if(text != NULL) {
 8026fc0:	b135      	cbz	r5, 8026fd0 <lv_label_set_text_static+0x2a>
        label->static_txt = 1;
 8026fc2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        label->text       = (char *)text;
 8026fc6:	6265      	str	r5, [r4, #36]	; 0x24
        label->static_txt = 1;
 8026fc8:	f043 0308 	orr.w	r3, r3, #8
 8026fcc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 8026fd0:	4620      	mov	r0, r4
}
 8026fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(obj);
 8026fd6:	f7ee bd3d 	b.w	8015a54 <lv_label_refr_text>

08026fda <lv_label_set_text_sel_start>:
    label->sel_start   = index;
 8026fda:	63c1      	str	r1, [r0, #60]	; 0x3c
    lv_obj_invalidate(obj);
 8026fdc:	f7f5 be5e 	b.w	801cc9c <lv_obj_invalidate>

08026fe0 <lv_label_set_text_sel_end>:
    label->sel_end     = index;
 8026fe0:	6401      	str	r1, [r0, #64]	; 0x40
    lv_obj_invalidate(obj);
 8026fe2:	f7f5 be5b 	b.w	801cc9c <lv_obj_invalidate>

08026fe6 <lv_label_get_text>:
}
 8026fe6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026fe8:	4770      	bx	lr

08026fea <lv_label_get_recolor>:
    return label->recolor == 0 ? false : true;
 8026fea:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
}
 8026fee:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8026ff2:	4770      	bx	lr

08026ff4 <lv_label_get_letter_on>:
    LV_ASSERT_NULL(pos_in);
 8026ff4:	b901      	cbnz	r1, 8026ff8 <lv_label_get_letter_on+0x4>
 8026ff6:	e7fe      	b.n	8026ff6 <lv_label_get_letter_on+0x2>
 8026ff8:	f7ee bc36 	b.w	8015868 <lv_label_get_letter_on.part.0>

08026ffc <lv_label_is_char_under_pos>:
{
 8026ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027000:	4604      	mov	r4, r0
 8027002:	b08f      	sub	sp, #60	; 0x3c
    LV_ASSERT_NULL(pos);
 8027004:	468b      	mov	fp, r1
 8027006:	b901      	cbnz	r1, 802700a <lv_label_is_char_under_pos+0xe>
 8027008:	e7fe      	b.n	8027008 <lv_label_is_char_under_pos+0xc>
    lv_obj_get_content_coords(obj, &txt_coords);
 802700a:	a90c      	add	r1, sp, #48	; 0x30
 802700c:	f7f5 fc7e 	bl	801c90c <lv_obj_get_content_coords>
    return label->text;
 8027010:	6a63      	ldr	r3, [r4, #36]	; 0x24
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8027012:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8027016:	4620      	mov	r0, r4
    return label->text;
 8027018:	9303      	str	r3, [sp, #12]
 802701a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 802701e:	3301      	adds	r3, #1
 8027020:	1a9b      	subs	r3, r3, r2
 8027022:	b21b      	sxth	r3, r3
 8027024:	9306      	str	r3, [sp, #24]
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8027026:	f7ff ff50 	bl	8026eca <lv_obj_get_style_text_font.constprop.0>
 802702a:	4682      	mov	sl, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 802702c:	4620      	mov	r0, r4
 802702e:	f7ff ff3e 	bl	8026eae <lv_obj_get_style_text_line_space.constprop.0>
 8027032:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8027034:	4620      	mov	r0, r4
 8027036:	f7ff ff41 	bl	8026ebc <lv_obj_get_style_text_letter_space.constprop.0>
 802703a:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 802703e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8027040:	2100      	movs	r1, #0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8027042:	4681      	mov	r9, r0
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8027044:	4620      	mov	r0, r4
 8027046:	9305      	str	r3, [sp, #20]
 8027048:	f7f7 f887 	bl	801e15a <lv_obj_calculate_style_text_align>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 802704c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8027050:	9004      	str	r0, [sp, #16]
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8027052:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8027054:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8027056:	f3c3 1800 	ubfx	r8, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 802705a:	bf48      	it	mi
 802705c:	f048 0802 	orrmi.w	r8, r8, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8027060:	f7ff ff39 	bl	8026ed6 <lv_obj_get_style_width.constprop.0>
 8027064:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8027068:	4298      	cmp	r0, r3
 802706a:	d105      	bne.n	8027078 <lv_label_is_char_under_pos+0x7c>
 802706c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8027070:	075b      	lsls	r3, r3, #29
 8027072:	d401      	bmi.n	8027078 <lv_label_is_char_under_pos+0x7c>
 8027074:	f048 0804 	orr.w	r8, r8, #4
        y += letter_height + line_space;
 8027078:	9b05      	ldr	r3, [sp, #20]
{
 802707a:	2400      	movs	r4, #0
        y += letter_height + line_space;
 802707c:	442b      	add	r3, r5
{
 802707e:	4627      	mov	r7, r4
        y += letter_height + line_space;
 8027080:	9307      	str	r3, [sp, #28]
 8027082:	e014      	b.n	80270ae <lv_label_is_char_under_pos+0xb2>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8027084:	2300      	movs	r3, #0
 8027086:	464a      	mov	r2, r9
 8027088:	4651      	mov	r1, sl
 802708a:	4630      	mov	r0, r6
 802708c:	9300      	str	r3, [sp, #0]
 802708e:	f8cd 8004 	str.w	r8, [sp, #4]
 8027092:	9b06      	ldr	r3, [sp, #24]
 8027094:	f7eb fe42 	bl	8012d1c <_lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8027098:	9b05      	ldr	r3, [sp, #20]
 802709a:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 802709e:	183d      	adds	r5, r7, r0
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 80270a0:	18e3      	adds	r3, r4, r3
 80270a2:	429a      	cmp	r2, r3
 80270a4:	dd09      	ble.n	80270ba <lv_label_is_char_under_pos+0xbe>
        y += letter_height + line_space;
 80270a6:	9b07      	ldr	r3, [sp, #28]
        line_start = new_line_start;
 80270a8:	462f      	mov	r7, r5
 80270aa:	441c      	add	r4, r3
        y += letter_height + line_space;
 80270ac:	b224      	sxth	r4, r4
    while(txt[line_start] != '\0') {
 80270ae:	9b03      	ldr	r3, [sp, #12]
 80270b0:	19de      	adds	r6, r3, r7
 80270b2:	5ddb      	ldrb	r3, [r3, r7]
 80270b4:	2b00      	cmp	r3, #0
 80270b6:	d1e5      	bne.n	8027084 <lv_label_is_char_under_pos+0x88>
 80270b8:	463d      	mov	r5, r7
    if(align == LV_TEXT_ALIGN_CENTER) {
 80270ba:	9b04      	ldr	r3, [sp, #16]
 80270bc:	2b02      	cmp	r3, #2
 80270be:	d136      	bne.n	802712e <lv_label_is_char_under_pos+0x132>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 80270c0:	464b      	mov	r3, r9
 80270c2:	4652      	mov	r2, sl
 80270c4:	1be9      	subs	r1, r5, r7
 80270c6:	4630      	mov	r0, r6
 80270c8:	f8cd 8000 	str.w	r8, [sp]
 80270cc:	f7fe fba9 	bl	8025822 <lv_txt_get_width>
 80270d0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80270d4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 80270d8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80270dc:	3301      	adds	r3, #1
 80270de:	1044      	asrs	r4, r0, #1
 80270e0:	1a9b      	subs	r3, r3, r2
 80270e2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80270e6:	fa02 f383 	sxtah	r3, r2, r3
 80270ea:	ebc4 0463 	rsb	r4, r4, r3, asr #1
        x += lv_area_get_width(&txt_coords) - line_w;
 80270ee:	b224      	sxth	r4, r4
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80270f0:	2600      	movs	r6, #0
 80270f2:	f88d 6023 	strb.w	r6, [sp, #35]	; 0x23
    uint32_t letter_next = '\0';
 80270f6:	960b      	str	r6, [sp, #44]	; 0x2c
    uint32_t letter      = '\0';
 80270f8:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 80270fc:	2d00      	cmp	r5, #0
 80270fe:	d153      	bne.n	80271a8 <lv_label_is_char_under_pos+0x1ac>
    lv_coord_t last_x = 0;
 8027100:	462e      	mov	r6, r5
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 8027102:	4650      	mov	r0, sl
 8027104:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8027108:	f7fc ffc9 	bl	802409e <lv_font_get_glyph_width>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 802710c:	f9bb 2000 	ldrsh.w	r2, [fp]
 8027110:	eba6 0309 	sub.w	r3, r6, r9
 8027114:	429a      	cmp	r2, r3
 8027116:	db4b      	blt.n	80271b0 <lv_label_is_char_under_pos+0x1b4>
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 8027118:	eb00 0309 	add.w	r3, r0, r9
 802711c:	3301      	adds	r3, #1
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 802711e:	4433      	add	r3, r6
 8027120:	429a      	cmp	r2, r3
 8027122:	bfcc      	ite	gt
 8027124:	2000      	movgt	r0, #0
 8027126:	2001      	movle	r0, #1
}
 8027128:	b00f      	add	sp, #60	; 0x3c
 802712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 802712e:	9b04      	ldr	r3, [sp, #16]
 8027130:	2b03      	cmp	r3, #3
 8027132:	d10f      	bne.n	8027154 <lv_label_is_char_under_pos+0x158>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 8027134:	464b      	mov	r3, r9
 8027136:	4652      	mov	r2, sl
 8027138:	1be9      	subs	r1, r5, r7
 802713a:	4630      	mov	r0, r6
 802713c:	f8cd 8000 	str.w	r8, [sp]
 8027140:	f7fe fb6f 	bl	8025822 <lv_txt_get_width>
 8027144:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8027148:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 802714c:	3401      	adds	r4, #1
 802714e:	1ae4      	subs	r4, r4, r3
        x += lv_area_get_width(&txt_coords) - line_w;
 8027150:	1a24      	subs	r4, r4, r0
 8027152:	e7cc      	b.n	80270ee <lv_label_is_char_under_pos+0xf2>
    lv_coord_t x      = 0;
 8027154:	2400      	movs	r4, #0
 8027156:	e7cb      	b.n	80270f0 <lv_label_is_char_under_pos+0xf4>
                if(_lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 8027158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802715a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 802715e:	9a03      	ldr	r2, [sp, #12]
 8027160:	5cd1      	ldrb	r1, [r2, r3]
 8027162:	f7fe fb26 	bl	80257b2 <_lv_txt_is_cmd>
 8027166:	b158      	cbz	r0, 8027180 <lv_label_is_char_under_pos+0x184>
        while(i <= new_line_start - 1) {
 8027168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802716a:	429d      	cmp	r5, r3
 802716c:	d3c9      	bcc.n	8027102 <lv_label_is_char_under_pos+0x106>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 802716e:	ab09      	add	r3, sp, #36	; 0x24
 8027170:	aa0b      	add	r2, sp, #44	; 0x2c
 8027172:	a90a      	add	r1, sp, #40	; 0x28
 8027174:	9803      	ldr	r0, [sp, #12]
 8027176:	f7eb ff33 	bl	8012fe0 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 802717a:	f1b8 0f00 	cmp.w	r8, #0
 802717e:	d1eb      	bne.n	8027158 <lv_label_is_char_under_pos+0x15c>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8027180:	4650      	mov	r0, sl
 8027182:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8027186:	f7fc ff8a 	bl	802409e <lv_font_get_glyph_width>
 802718a:	4420      	add	r0, r4
            if(pos->x < x) {
 802718c:	f9bb 2000 	ldrsh.w	r2, [fp]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8027190:	b283      	uxth	r3, r0
            if(pos->x < x) {
 8027192:	b200      	sxth	r0, r0
 8027194:	4282      	cmp	r2, r0
 8027196:	da02      	bge.n	802719e <lv_label_is_char_under_pos+0x1a2>
                break;
 8027198:	4626      	mov	r6, r4
                i = i_current;
 802719a:	9709      	str	r7, [sp, #36]	; 0x24
                break;
 802719c:	e7b1      	b.n	8027102 <lv_label_is_char_under_pos+0x106>
            x += letter_space;
 802719e:	444b      	add	r3, r9
            i_current = i;
 80271a0:	4626      	mov	r6, r4
 80271a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
            x += letter_space;
 80271a4:	b21c      	sxth	r4, r3
 80271a6:	e7df      	b.n	8027168 <lv_label_is_char_under_pos+0x16c>
        while(i <= new_line_start - 1) {
 80271a8:	3d01      	subs	r5, #1
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80271aa:	f008 0801 	and.w	r8, r8, #1
 80271ae:	e7db      	b.n	8027168 <lv_label_is_char_under_pos+0x16c>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 80271b0:	2000      	movs	r0, #0
 80271b2:	e7b9      	b.n	8027128 <lv_label_is_char_under_pos+0x12c>

080271b4 <lv_label_get_text_selection_start>:
}
 80271b4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80271b6:	4770      	bx	lr

080271b8 <lv_label_get_text_selection_end>:
}
 80271b8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80271ba:	4770      	bx	lr

080271bc <lv_line_constructor>:
    line->point_num   = 0;
 80271bc:	2300      	movs	r3, #0
    line->y_inv       = 0;
 80271be:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
{
 80271c2:	4608      	mov	r0, r1
    line->y_inv       = 0;
 80271c4:	f363 0200 	bfi	r2, r3, #0, #1
    line->point_num   = 0;
 80271c8:	850b      	strh	r3, [r1, #40]	; 0x28
    line->point_array = NULL;
 80271ca:	624b      	str	r3, [r1, #36]	; 0x24
    line->y_inv       = 0;
 80271cc:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80271d0:	2102      	movs	r1, #2
 80271d2:	f7f4 bc00 	b.w	801b9d6 <lv_obj_clear_flag>

080271d6 <set_y_anim>:
}


static void set_y_anim(void * obj, int32_t v)
{
    lv_obj_set_y(obj, v);
 80271d6:	b209      	sxth	r1, r1
 80271d8:	f7f5 ba84 	b.w	801c6e4 <lv_obj_set_y>

080271dc <lv_obj_get_style_text_font>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80271dc:	2257      	movs	r2, #87	; 0x57
{
 80271de:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80271e0:	f7f6 fc82 	bl	801dae8 <lv_obj_get_style_prop>
}
 80271e4:	bd08      	pop	{r3, pc}

080271e6 <get_label>:
    return lv_obj_get_child(obj, 0);
 80271e6:	2100      	movs	r1, #0
 80271e8:	f7f7 b805 	b.w	801e1f6 <lv_obj_get_child>

080271ec <lv_obj_get_style_text_line_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80271ec:	2259      	movs	r2, #89	; 0x59
 80271ee:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
 80271f0:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80271f2:	f7f6 fc79 	bl	801dae8 <lv_obj_get_style_prop>
}
 80271f6:	b200      	sxth	r0, r0
 80271f8:	bd08      	pop	{r3, pc}

080271fa <get_sel_area>:
{
 80271fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80271fc:	4606      	mov	r6, r0
 80271fe:	460f      	mov	r7, r1
    const lv_font_t * font_main = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8027200:	2100      	movs	r1, #0
 8027202:	f7ff ffeb 	bl	80271dc <lv_obj_get_style_text_font>
 8027206:	4604      	mov	r4, r0
    const lv_font_t * font_sel = lv_obj_get_style_text_font(obj, LV_PART_SELECTED);
 8027208:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 802720c:	4630      	mov	r0, r6
 802720e:	f7ff ffe5 	bl	80271dc <lv_obj_get_style_text_font>
 8027212:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8027216:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 802721a:	4630      	mov	r0, r6
 802721c:	f7ff ffe6 	bl	80271ec <lv_obj_get_style_text_line_space.constprop.0>
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 8027220:	1963      	adds	r3, r4, r5
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 8027222:	8af5      	ldrh	r5, [r6, #22]
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 8027224:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8027228:	eb00 0463 	add.w	r4, r0, r3, asr #1
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 802722c:	4630      	mov	r0, r6
 802722e:	f7f5 fb3b 	bl	801c8a8 <lv_obj_get_height>
    lv_obj_get_coords(obj, &roller_coords);
 8027232:	4669      	mov	r1, sp
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 8027234:	b2a4      	uxth	r4, r4
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 8027236:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802723a:	0be2      	lsrs	r2, r4, #15
 802723c:	eb05 0360 	add.w	r3, r5, r0, asr #1
    lv_obj_get_coords(obj, &roller_coords);
 8027240:	4630      	mov	r0, r6
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 8027242:	fa02 f284 	sxtah	r2, r2, r4
 8027246:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 802724a:	b29b      	uxth	r3, r3
    sel_area->y2 = sel_area->y1 + d;
 802724c:	441c      	add	r4, r3
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 802724e:	807b      	strh	r3, [r7, #2]
    sel_area->y2 = sel_area->y1 + d;
 8027250:	80fc      	strh	r4, [r7, #6]
    lv_obj_get_coords(obj, &roller_coords);
 8027252:	f7f5 fad3 	bl	801c7fc <lv_obj_get_coords>
    sel_area->x1 = roller_coords.x1;
 8027256:	f8bd 3000 	ldrh.w	r3, [sp]
 802725a:	803b      	strh	r3, [r7, #0]
    sel_area->x2 = roller_coords.x2;
 802725c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8027260:	80bb      	strh	r3, [r7, #4]
}
 8027262:	b003      	add	sp, #12
 8027264:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027266 <inf_normalize>:
{
 8027266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8027268:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
{
 802726c:	4604      	mov	r4, r0
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 802726e:	07db      	lsls	r3, r3, #31
 8027270:	d537      	bpl.n	80272e2 <inf_normalize+0x7c>
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 8027272:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8027274:	2307      	movs	r3, #7
 8027276:	fbb2 f2f3 	udiv	r2, r2, r3
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 802727a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 802727c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 8027280:	fbb3 f5f2 	udiv	r5, r3, r2
 8027284:	fb02 3315 	mls	r3, r2, r5, r3
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 8027288:	fa13 f381 	uxtah	r3, r3, r1
 802728c:	b29b      	uxth	r3, r3
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 802728e:	fbb3 f5f2 	udiv	r5, r3, r2
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 8027292:	84c3      	strh	r3, [r0, #38]	; 0x26
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 8027294:	fb02 3315 	mls	r3, r2, r5, r3
        roller->sel_opt_id_ori += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 8027298:	fa13 f181 	uxtah	r1, r3, r1
 802729c:	8501      	strh	r1, [r0, #40]	; 0x28
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 802729e:	2100      	movs	r1, #0
 80272a0:	f7ff ff9c 	bl	80271dc <lv_obj_get_style_text_font>
 80272a4:	4605      	mov	r5, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 80272a6:	4620      	mov	r0, r4
 80272a8:	f7ff ffa0 	bl	80271ec <lv_obj_get_style_text_line_space.constprop.0>
 80272ac:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 80272b0:	4607      	mov	r7, r0
        lv_coord_t h                   = lv_obj_get_content_height(obj);
 80272b2:	4620      	mov	r0, r4
 80272b4:	f7f5 fb14 	bl	801c8e0 <lv_obj_get_content_height>
 80272b8:	4605      	mov	r5, r0
        lv_obj_t * label = get_label(obj);
 80272ba:	4620      	mov	r0, r4
 80272bc:	f7ff ff93 	bl	80271e6 <get_label>
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 80272c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80272c2:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 80272c6:	443e      	add	r6, r7
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80272c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 80272cc:	fb13 f306 	smulbb	r3, r3, r6
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80272d0:	1049      	asrs	r1, r1, #1
 80272d2:	ebc1 0165 	rsb	r1, r1, r5, asr #1
        lv_coord_t new_y = mid_y1 - sel_y1;
 80272d6:	1ac9      	subs	r1, r1, r3
}
 80272d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_set_y(label, new_y);
 80272dc:	b209      	sxth	r1, r1
 80272de:	f7f5 ba01 	b.w	801c6e4 <lv_obj_set_y>
}
 80272e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080272e4 <scroll_anim_ready_cb>:
{
 80272e4:	b508      	push	{r3, lr}
    lv_obj_t * obj = lv_obj_get_parent(a->var); /*The label is animated*/
 80272e6:	6800      	ldr	r0, [r0, #0]
 80272e8:	f7f6 ff82 	bl	801e1f0 <lv_obj_get_parent>
}
 80272ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    inf_normalize(obj);
 80272f0:	f7ff bfb9 	b.w	8027266 <inf_normalize>

080272f4 <lv_roller_set_options.part.0>:
void lv_roller_set_options(lv_obj_t * obj, const char * options, lv_roller_mode_t mode)
 80272f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272f8:	4688      	mov	r8, r1
 80272fa:	4604      	mov	r4, r0
 80272fc:	4615      	mov	r5, r2
    lv_obj_t * label = get_label(obj);
 80272fe:	f7ff ff72 	bl	80271e6 <get_label>
    roller->option_cnt = 0;
 8027302:	2300      	movs	r3, #0
    lv_obj_t * label = get_label(obj);
 8027304:	4606      	mov	r6, r0
    roller->option_cnt = 0;
 8027306:	f108 31ff 	add.w	r1, r8, #4294967295
 802730a:	6263      	str	r3, [r4, #36]	; 0x24
    roller->sel_opt_id_ori = 0;
 802730c:	8523      	strh	r3, [r4, #40]	; 0x28
        if(options[cnt] == '\n') roller->option_cnt++;
 802730e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8027310:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        if(options[cnt] == '\n') roller->option_cnt++;
 8027314:	3301      	adds	r3, #1
 8027316:	b29b      	uxth	r3, r3
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8027318:	b992      	cbnz	r2, 8027340 <lv_roller_set_options.part.0+0x4c>
    roller->option_cnt++; /*Last option has no `\n`*/
 802731a:	84a3      	strh	r3, [r4, #36]	; 0x24
    if(mode == LV_ROLLER_MODE_NORMAL) {
 802731c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8027320:	b995      	cbnz	r5, 8027348 <lv_roller_set_options.part.0+0x54>
        roller->mode = LV_ROLLER_MODE_NORMAL;
 8027322:	f365 0300 	bfi	r3, r5, #0, #1
        lv_label_set_text(label, options);
 8027326:	4641      	mov	r1, r8
 8027328:	4630      	mov	r0, r6
        roller->mode = LV_ROLLER_MODE_NORMAL;
 802732a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        lv_label_set_text(label, options);
 802732e:	f7ff fdd9 	bl	8026ee4 <lv_label_set_text>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 8027332:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    lv_obj_refresh_ext_draw_size(label);
 8027334:	4630      	mov	r0, r6
    roller->sel_opt_id_ori = roller->sel_opt_id;
 8027336:	8523      	strh	r3, [r4, #40]	; 0x28
}
 8027338:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_refresh_ext_draw_size(label);
 802733c:	f7f5 b8e0 	b.w	801c500 <lv_obj_refresh_ext_draw_size>
        if(options[cnt] == '\n') roller->option_cnt++;
 8027340:	2a0a      	cmp	r2, #10
 8027342:	bf08      	it	eq
 8027344:	84a3      	strheq	r3, [r4, #36]	; 0x24
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8027346:	e7e2      	b.n	802730e <lv_roller_set_options.part.0+0x1a>
        roller->mode = LV_ROLLER_MODE_INFINITE;
 8027348:	f043 0301 	orr.w	r3, r3, #1
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 802734c:	4640      	mov	r0, r8
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 802734e:	f04f 0907 	mov.w	r9, #7
        roller->mode = LV_ROLLER_MODE_INFINITE;
 8027352:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 8027356:	f7f3 f9f9 	bl	801a74c <strlen>
 802735a:	1c45      	adds	r5, r0, #1
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 802735c:	ebc5 0ac5 	rsb	sl, r5, r5, lsl #3
 8027360:	4650      	mov	r0, sl
 8027362:	f7eb fa29 	bl	80127b8 <lv_mem_buf_get>
 8027366:	4607      	mov	r7, r0
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 8027368:	eb00 0b05 	add.w	fp, r0, r5
 802736c:	f109 39ff 	add.w	r9, r9, #4294967295
            strcpy(&opt_extra[opt_len * i], options);
 8027370:	ebab 0005 	sub.w	r0, fp, r5
 8027374:	4641      	mov	r1, r8
 8027376:	f7f3 f9df 	bl	801a738 <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 802737a:	230a      	movs	r3, #10
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 802737c:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8027380:	f80b 3c01 	strb.w	r3, [fp, #-1]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 8027384:	44ab      	add	fp, r5
 8027386:	d1f1      	bne.n	802736c <lv_roller_set_options.part.0+0x78>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 8027388:	44ba      	add	sl, r7
        lv_label_set_text(label, opt_extra);
 802738a:	4639      	mov	r1, r7
 802738c:	4630      	mov	r0, r6
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 802738e:	f80a 9c01 	strb.w	r9, [sl, #-1]
        lv_label_set_text(label, opt_extra);
 8027392:	f7ff fda7 	bl	8026ee4 <lv_label_set_text>
        lv_mem_buf_release(opt_extra);
 8027396:	4638      	mov	r0, r7
 8027398:	f7eb fa58 	bl	801284c <lv_mem_buf_release>
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 802739c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
        inf_normalize(obj);
 802739e:	4620      	mov	r0, r4
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 80273a0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 80273a4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 80273a8:	84e2      	strh	r2, [r4, #38]	; 0x26
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 80273aa:	84a3      	strh	r3, [r4, #36]	; 0x24
        inf_normalize(obj);
 80273ac:	f7ff ff5b 	bl	8027266 <inf_normalize>
 80273b0:	e7bf      	b.n	8027332 <lv_roller_set_options.part.0+0x3e>

080273b2 <get_selected_label_width>:
{
 80273b2:	b570      	push	{r4, r5, r6, lr}
 80273b4:	b086      	sub	sp, #24
 80273b6:	4605      	mov	r5, r0
    lv_obj_t * label = get_label(obj);
 80273b8:	f7ff ff15 	bl	80271e6 <get_label>
    if(label == NULL) return 0;
 80273bc:	4604      	mov	r4, r0
 80273be:	b1e8      	cbz	r0, 80273fc <get_selected_label_width+0x4a>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_SELECTED);
 80273c0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80273c4:	4628      	mov	r0, r5
 80273c6:	f7ff ff09 	bl	80271dc <lv_obj_get_style_text_font>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80273ca:	2258      	movs	r2, #88	; 0x58
 80273cc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80273d0:	4606      	mov	r6, r0
 80273d2:	4628      	mov	r0, r5
 80273d4:	f7f6 fb88 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80273d8:	b205      	sxth	r5, r0
    const char * txt = lv_label_get_text(label);
 80273da:	4620      	mov	r0, r4
 80273dc:	f7ff fe03 	bl	8026fe6 <lv_label_get_text>
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 80273e0:	2300      	movs	r3, #0
 80273e2:	f641 72ff 	movw	r2, #8191	; 0x1fff
    const char * txt = lv_label_get_text(label);
 80273e6:	4601      	mov	r1, r0
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 80273e8:	9300      	str	r3, [sp, #0]
 80273ea:	a805      	add	r0, sp, #20
 80273ec:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80273f0:	462b      	mov	r3, r5
 80273f2:	4632      	mov	r2, r6
 80273f4:	f7fe fa54 	bl	80258a0 <lv_txt_get_size>
    return size.x;
 80273f8:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
}
 80273fc:	b006      	add	sp, #24
 80273fe:	bd70      	pop	{r4, r5, r6, pc}

08027400 <lv_roller_set_selected>:
{
 8027400:	460b      	mov	r3, r1
 8027402:	4611      	mov	r1, r2
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8027404:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
 8027408:	07d2      	lsls	r2, r2, #31
{
 802740a:	b4f0      	push	{r4, r5, r6, r7}
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 802740c:	8c86      	ldrh	r6, [r0, #36]	; 0x24
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 802740e:	d51a      	bpl.n	8027446 <lv_roller_set_selected+0x46>
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 8027410:	2207      	movs	r2, #7
 8027412:	fbb6 f2f2 	udiv	r2, r6, r2
        if(sel_opt < real_option_cnt) {
 8027416:	429a      	cmp	r2, r3
 8027418:	d915      	bls.n	8027446 <lv_roller_set_selected+0x46>
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 802741a:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
 802741c:	fbb4 f5f2 	udiv	r5, r4, r2
            uint16_t act_opt = roller->sel_opt_id - current_page * real_option_cnt;
 8027420:	fb15 f502 	smulbb	r5, r5, r2
 8027424:	b2ad      	uxth	r5, r5
 8027426:	1b64      	subs	r4, r4, r5
 8027428:	b2a7      	uxth	r7, r4
            if(LV_ABS((int16_t)act_opt - sel_opt) > real_option_cnt / 2) {
 802742a:	b224      	sxth	r4, r4
 802742c:	1ae4      	subs	r4, r4, r3
 802742e:	2c00      	cmp	r4, #0
 8027430:	bfb8      	it	lt
 8027432:	4264      	neglt	r4, r4
 8027434:	ebb4 0f52 	cmp.w	r4, r2, lsr #1
 8027438:	d903      	bls.n	8027442 <lv_roller_set_selected+0x42>
                if(act_opt > sel_opt) sel_opt_signed += real_option_cnt;
 802743a:	42bb      	cmp	r3, r7
 802743c:	bf34      	ite	cc
 802743e:	189b      	addcc	r3, r3, r2
                else sel_opt_signed -= real_option_cnt;
 8027440:	1a9b      	subcs	r3, r3, r2
            sel_opt = sel_opt_signed + real_option_cnt * current_page;
 8027442:	441d      	add	r5, r3
 8027444:	b2ab      	uxth	r3, r5
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 8027446:	42b3      	cmp	r3, r6
 8027448:	bf24      	itt	cs
 802744a:	f106 36ff 	addcs.w	r6, r6, #4294967295
 802744e:	b2b3      	uxthcs	r3, r6
}
 8027450:	bcf0      	pop	{r4, r5, r6, r7}
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 8027452:	84c3      	strh	r3, [r0, #38]	; 0x26
    roller->sel_opt_id_ori = roller->sel_opt_id;
 8027454:	8503      	strh	r3, [r0, #40]	; 0x28
    refr_position(obj, anim);
 8027456:	f7ef b929 	b.w	80166ac <refr_position>

0802745a <lv_slider_get_mode>:
 * Get the mode of the slider.
 * @param obj       pointer to a bar object
 * @return          see ::lv_slider_mode_t
 */
static inline lv_slider_mode_t lv_slider_get_mode(lv_obj_t * slider)
{
 802745a:	b508      	push	{r3, lr}
    lv_bar_mode_t mode = lv_bar_get_mode(slider);
 802745c:	f7fe fe85 	bl	802616a <lv_bar_get_mode>
    if(mode == LV_BAR_MODE_SYMMETRICAL) return LV_SLIDER_MODE_SYMMETRICAL;
 8027460:	2801      	cmp	r0, #1
 8027462:	d003      	beq.n	802746c <lv_slider_get_mode+0x12>
    else if(mode == LV_BAR_MODE_RANGE) return LV_SLIDER_MODE_RANGE;
 8027464:	1e83      	subs	r3, r0, #2
 8027466:	4258      	negs	r0, r3
 8027468:	4158      	adcs	r0, r3
 802746a:	0040      	lsls	r0, r0, #1
    else return LV_SLIDER_MODE_NORMAL;
}
 802746c:	bd08      	pop	{r3, pc}

0802746e <lv_slider_constructor>:
{
 802746e:	b538      	push	{r3, r4, r5, lr}
    slider->dragging = 0U;
 8027470:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
{
 8027474:	460c      	mov	r4, r1
    slider->value_to_set = NULL;
 8027476:	2500      	movs	r5, #0
    slider->dragging = 0U;
 8027478:	f023 0303 	bic.w	r3, r3, #3
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 802747c:	4620      	mov	r0, r4
    slider->value_to_set = NULL;
 802747e:	670d      	str	r5, [r1, #112]	; 0x70
    slider->dragging = 0U;
 8027480:	f881 3074 	strb.w	r3, [r1, #116]	; 0x74
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8027484:	f44f 7140 	mov.w	r1, #768	; 0x300
 8027488:	f7f4 faa5 	bl	801b9d6 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 802748c:	2110      	movs	r1, #16
 802748e:	4620      	mov	r0, r4
 8027490:	f7f4 faa1 	bl	801b9d6 <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 8027494:	4628      	mov	r0, r5
 8027496:	f7ea fe53 	bl	8012140 <lv_disp_get_dpi>
 802749a:	281d      	cmp	r0, #29
 802749c:	dd0d      	ble.n	80274ba <lv_slider_constructor+0x4c>
 802749e:	4628      	mov	r0, r5
 80274a0:	f7ea fe4e 	bl	8012140 <lv_disp_get_dpi>
 80274a4:	2314      	movs	r3, #20
 80274a6:	f100 010a 	add.w	r1, r0, #10
 80274aa:	fb91 f1f3 	sdiv	r1, r1, r3
 80274ae:	b209      	sxth	r1, r1
 80274b0:	4620      	mov	r0, r4
}
 80274b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 80274b6:	f7f5 bcc9 	b.w	801ce4c <lv_obj_set_ext_click_area>
 80274ba:	2101      	movs	r1, #1
 80274bc:	e7f8      	b.n	80274b0 <lv_slider_constructor+0x42>

080274be <position_knob>:
{
 80274be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80274c2:	460c      	mov	r4, r1
        knob_area->x1 -= (knob_size >> 1);
 80274c4:	f3c2 014f 	ubfx	r1, r2, #1, #16
 80274c8:	3a01      	subs	r2, #1
{
 80274ca:	4605      	mov	r5, r0
 80274cc:	b292      	uxth	r2, r2
    if(hor) {
 80274ce:	2b00      	cmp	r3, #0
 80274d0:	d04c      	beq.n	802756c <position_knob+0xae>
        knob_area->x1 -= (knob_size >> 1);
 80274d2:	8823      	ldrh	r3, [r4, #0]
 80274d4:	1a5b      	subs	r3, r3, r1
 80274d6:	b29b      	uxth	r3, r3
 80274d8:	8023      	strh	r3, [r4, #0]
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 80274da:	4413      	add	r3, r2
 80274dc:	80a3      	strh	r3, [r4, #4]
        knob_area->y1 = obj->coords.y1;
 80274de:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 80274e2:	8063      	strh	r3, [r4, #2]
        knob_area->y2 = obj->coords.y2;
 80274e4:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 80274e8:	80e3      	strh	r3, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80274ea:	2212      	movs	r2, #18
 80274ec:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80274f0:	4628      	mov	r0, r5
 80274f2:	f7f6 faf9 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80274f6:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80274f8:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80274fa:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80274fe:	4628      	mov	r0, r5
 8027500:	f7f6 faf2 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8027504:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8027506:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8027508:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802750c:	4628      	mov	r0, r5
 802750e:	f7f6 faeb 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8027512:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8027514:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8027516:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802751a:	4628      	mov	r0, r5
 802751c:	f7f6 fae4 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8027520:	2268      	movs	r2, #104	; 0x68
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8027522:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8027524:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8027528:	4628      	mov	r0, r5
 802752a:	f7f6 fadd 	bl	801dae8 <lv_obj_get_style_prop>
 802752e:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8027530:	2269      	movs	r2, #105	; 0x69
 8027532:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8027536:	4628      	mov	r0, r5
    knob_area->x1 -= knob_left + transf_w;
 8027538:	fa18 f886 	uxtah	r8, r8, r6
 802753c:	f7f6 fad4 	bl	801dae8 <lv_obj_get_style_prop>
 8027540:	8823      	ldrh	r3, [r4, #0]
    knob_area->x2 += knob_right + transf_w;
 8027542:	fa1a f686 	uxtah	r6, sl, r6
    knob_area->y1 -= knob_top + transf_h;
 8027546:	fa17 f780 	uxtah	r7, r7, r0
    knob_area->x1 -= knob_left + transf_w;
 802754a:	eba3 0808 	sub.w	r8, r3, r8
    knob_area->x2 += knob_right + transf_w;
 802754e:	88a3      	ldrh	r3, [r4, #4]
    knob_area->y2 += knob_bottom + transf_h;
 8027550:	fa19 f080 	uxtah	r0, r9, r0
    knob_area->x2 += knob_right + transf_w;
 8027554:	441e      	add	r6, r3
    knob_area->y1 -= knob_top + transf_h;
 8027556:	8863      	ldrh	r3, [r4, #2]
    knob_area->x1 -= knob_left + transf_w;
 8027558:	f8a4 8000 	strh.w	r8, [r4]
    knob_area->y1 -= knob_top + transf_h;
 802755c:	1bdf      	subs	r7, r3, r7
    knob_area->y2 += knob_bottom + transf_h;
 802755e:	88e3      	ldrh	r3, [r4, #6]
    knob_area->x2 += knob_right + transf_w;
 8027560:	80a6      	strh	r6, [r4, #4]
    knob_area->y2 += knob_bottom + transf_h;
 8027562:	4418      	add	r0, r3
    knob_area->y1 -= knob_top + transf_h;
 8027564:	8067      	strh	r7, [r4, #2]
    knob_area->y2 += knob_bottom + transf_h;
 8027566:	80e0      	strh	r0, [r4, #6]
}
 8027568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        knob_area->y1 -= (knob_size >> 1);
 802756c:	8863      	ldrh	r3, [r4, #2]
 802756e:	1a5b      	subs	r3, r3, r1
 8027570:	b29b      	uxth	r3, r3
 8027572:	8063      	strh	r3, [r4, #2]
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 8027574:	4413      	add	r3, r2
 8027576:	80e3      	strh	r3, [r4, #6]
        knob_area->x1 = obj->coords.x1;
 8027578:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 802757c:	8023      	strh	r3, [r4, #0]
        knob_area->x2 = obj->coords.x2;
 802757e:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8027582:	80a3      	strh	r3, [r4, #4]
 8027584:	e7b1      	b.n	80274ea <position_knob+0x2c>

08027586 <lv_switch_anim_ready>:
    lv_switch_t * sw = a->var;
 8027586:	6800      	ldr	r0, [r0, #0]
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 8027588:	f04f 33ff 	mov.w	r3, #4294967295
 802758c:	6243      	str	r3, [r0, #36]	; 0x24
    lv_obj_invalidate((lv_obj_t *)sw);
 802758e:	f7f5 bb85 	b.w	801cc9c <lv_obj_invalidate>

08027592 <lv_switch_anim_exec_cb>:
    sw->anim_state = value;
 8027592:	6241      	str	r1, [r0, #36]	; 0x24
    lv_obj_invalidate((lv_obj_t *)sw);
 8027594:	f7f5 bb82 	b.w	801cc9c <lv_obj_invalidate>

08027598 <lv_switch_destructor>:
{
 8027598:	4608      	mov	r0, r1
    lv_anim_del(sw, NULL);
 802759a:	2100      	movs	r1, #0
 802759c:	f7ea bf00 	b.w	80123a0 <lv_anim_del>

080275a0 <lv_switch_constructor>:
{
 80275a0:	b510      	push	{r4, lr}
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 80275a2:	f04f 33ff 	mov.w	r3, #4294967295
{
 80275a6:	460c      	mov	r4, r1
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 80275a8:	624b      	str	r3, [r1, #36]	; 0x24
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 80275aa:	4620      	mov	r0, r4
 80275ac:	2110      	movs	r1, #16
 80275ae:	f7f4 fa12 	bl	801b9d6 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 80275b2:	4620      	mov	r0, r4
 80275b4:	2108      	movs	r1, #8
 80275b6:	f7f4 f9d8 	bl	801b96a <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80275ba:	4620      	mov	r0, r4
 80275bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 80275c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80275c4:	f7f4 b9d1 	b.w	801b96a <lv_obj_add_flag>

080275c8 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80275c8:	2212      	movs	r2, #18
{
 80275ca:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80275cc:	f7f6 fa8c 	bl	801dae8 <lv_obj_get_style_prop>
}
 80275d0:	b200      	sxth	r0, r0
 80275d2:	bd08      	pop	{r3, pc}

080275d4 <lv_obj_get_style_pad_right>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80275d4:	2213      	movs	r2, #19
{
 80275d6:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80275d8:	f7f6 fa86 	bl	801dae8 <lv_obj_get_style_prop>
}
 80275dc:	b200      	sxth	r0, r0
 80275de:	bd08      	pop	{r3, pc}

080275e0 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80275e0:	2210      	movs	r2, #16
{
 80275e2:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80275e4:	f7f6 fa80 	bl	801dae8 <lv_obj_get_style_prop>
}
 80275e8:	b200      	sxth	r0, r0
 80275ea:	bd08      	pop	{r3, pc}

080275ec <get_row_height>:
{
 80275ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80275f0:	b08d      	sub	sp, #52	; 0x34
 80275f2:	4607      	mov	r7, r0
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 80275f4:	2400      	movs	r4, #0
{
 80275f6:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 80275fa:	f9bd 9068 	ldrsh.w	r9, [sp, #104]	; 0x68
 80275fe:	9307      	str	r3, [sp, #28]
 8027600:	eb08 0509 	add.w	r5, r8, r9
 8027604:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 8027608:	9204      	str	r2, [sp, #16]
 802760a:	9308      	str	r3, [sp, #32]
 802760c:	b2ab      	uxth	r3, r5
 802760e:	9306      	str	r3, [sp, #24]
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 8027610:	8913      	ldrh	r3, [r2, #8]
            txt_w -= cell_left + cell_right;
 8027612:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 8027616:	fa13 f585 	uxtah	r5, r3, r5
    uint16_t row_start = row_id * table->col_cnt;
 802761a:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 802761c:	fb13 f301 	smulbb	r3, r3, r1
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 8027620:	b22d      	sxth	r5, r5
    uint16_t row_start = row_id * table->col_cnt;
 8027622:	b29b      	uxth	r3, r3
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 8027624:	461e      	mov	r6, r3
    uint16_t row_start = row_id * table->col_cnt;
 8027626:	9305      	str	r3, [sp, #20]
            txt_w -= cell_left + cell_right;
 8027628:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 802762c:	18d3      	adds	r3, r2, r3
 802762e:	9309      	str	r3, [sp, #36]	; 0x24
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 8027630:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8027632:	9b05      	ldr	r3, [sp, #20]
 8027634:	4413      	add	r3, r2
 8027636:	429e      	cmp	r6, r3
 8027638:	db03      	blt.n	8027642 <get_row_height+0x56>
}
 802763a:	4628      	mov	r0, r5
 802763c:	b00d      	add	sp, #52	; 0x34
 802763e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        char * cell_data = table->cell_data[cell];
 8027642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027644:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8027648:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
        if(is_cell_empty(cell_data)) {
 802764c:	b1b1      	cbz	r1, 802767c <get_row_height+0x90>
        lv_coord_t txt_w = table->col_w[col];
 802764e:	f8d7 e030 	ldr.w	lr, [r7, #48]	; 0x30
 8027652:	4620      	mov	r0, r4
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 8027654:	3a01      	subs	r2, #1
        lv_coord_t txt_w = table->col_w[col];
 8027656:	f93e 3014 	ldrsh.w	r3, [lr, r4, lsl #1]
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 802765a:	4282      	cmp	r2, r0
 802765c:	dc13      	bgt.n	8027686 <get_row_height+0x9a>
        if(ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP) {
 802765e:	780a      	ldrb	r2, [r1, #0]
 8027660:	f012 0202 	ands.w	r2, r2, #2
 8027664:	d021      	beq.n	80276aa <get_row_height+0xbe>
 8027666:	9b04      	ldr	r3, [sp, #16]
 8027668:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
            h_max = LV_MAX(lv_font_get_line_height(font) + cell_top + cell_bottom,
 802766c:	eb03 0208 	add.w	r2, r3, r8
 8027670:	444a      	add	r2, r9
 8027672:	42aa      	cmp	r2, r5
 8027674:	dd02      	ble.n	802767c <get_row_height+0x90>
 8027676:	9a06      	ldr	r2, [sp, #24]
 8027678:	4413      	add	r3, r2
 802767a:	b21d      	sxth	r5, r3
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 802767c:	3601      	adds	r6, #1
 802767e:	3401      	adds	r4, #1
 8027680:	b2b6      	uxth	r6, r6
 8027682:	b2a4      	uxth	r4, r4
 8027684:	e7d4      	b.n	8027630 <get_row_height+0x44>
            char * next_cell_data = table->cell_data[cell + col_merge];
 8027686:	f85c bb04 	ldr.w	fp, [ip], #4
            if(is_cell_empty(next_cell_data)) break;
 802768a:	f1bb 0f00 	cmp.w	fp, #0
 802768e:	d0e6      	beq.n	802765e <get_row_height+0x72>
            if(ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT) {
 8027690:	f89b b000 	ldrb.w	fp, [fp]
 8027694:	f100 0a01 	add.w	sl, r0, #1
 8027698:	f01b 0f01 	tst.w	fp, #1
 802769c:	d0df      	beq.n	802765e <get_row_height+0x72>
                txt_w += table->col_w[col + col_merge + 1];
 802769e:	f83e 001a 	ldrh.w	r0, [lr, sl, lsl #1]
 80276a2:	4418      	add	r0, r3
 80276a4:	b203      	sxth	r3, r0
 80276a6:	4650      	mov	r0, sl
 80276a8:	e7d7      	b.n	802765a <get_row_height+0x6e>
 80276aa:	fa1f fa80 	uxth.w	sl, r0
            txt_w -= cell_left + cell_right;
 80276ae:	9809      	ldr	r0, [sp, #36]	; 0x24
            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 80276b0:	9202      	str	r2, [sp, #8]
 80276b2:	3101      	adds	r1, #1
            txt_w -= cell_left + cell_right;
 80276b4:	1a1b      	subs	r3, r3, r0
            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 80276b6:	9a04      	ldr	r2, [sp, #16]
 80276b8:	a80b      	add	r0, sp, #44	; 0x2c
            cell += col_merge;
 80276ba:	ebaa 0404 	sub.w	r4, sl, r4
            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 80276be:	b21b      	sxth	r3, r3
            cell += col_merge;
 80276c0:	4434      	add	r4, r6
            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 80276c2:	9301      	str	r3, [sp, #4]
 80276c4:	9b08      	ldr	r3, [sp, #32]
            cell += col_merge;
 80276c6:	b2a6      	uxth	r6, r4
 80276c8:	4654      	mov	r4, sl
            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 80276ca:	9300      	str	r3, [sp, #0]
 80276cc:	9b07      	ldr	r3, [sp, #28]
 80276ce:	f7fe f8e7 	bl	80258a0 <lv_txt_get_size>
            h_max = LV_MAX(txt_size.y + cell_top + cell_bottom, h_max);
 80276d2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80276d6:	4443      	add	r3, r8
 80276d8:	444b      	add	r3, r9
 80276da:	42ab      	cmp	r3, r5
 80276dc:	bfb8      	it	lt
 80276de:	462b      	movlt	r3, r5
 80276e0:	b21d      	sxth	r5, r3
            col += col_merge;
 80276e2:	e7cb      	b.n	802767c <get_row_height+0x90>

080276e4 <lv_table_destructor>:
{
 80276e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 80276e6:	2500      	movs	r5, #0
{
 80276e8:	460c      	mov	r4, r1
            table->cell_data[i] = NULL;
 80276ea:	462f      	mov	r7, r5
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 80276ec:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80276ee:	b2ae      	uxth	r6, r5
 80276f0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
        if(table->cell_data[i]) {
 80276f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 80276f4:	4353      	muls	r3, r2
 80276f6:	429e      	cmp	r6, r3
 80276f8:	db0c      	blt.n	8027714 <lv_table_destructor+0x30>
    if(table->cell_data) lv_mem_free(table->cell_data);
 80276fa:	b108      	cbz	r0, 8027700 <lv_table_destructor+0x1c>
 80276fc:	f7eb f82a 	bl	8012754 <lv_mem_free>
    if(table->row_h) lv_mem_free(table->row_h);
 8027700:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027702:	b108      	cbz	r0, 8027708 <lv_table_destructor+0x24>
 8027704:	f7eb f826 	bl	8012754 <lv_mem_free>
    if(table->col_w) lv_mem_free(table->col_w);
 8027708:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802770a:	b168      	cbz	r0, 8027728 <lv_table_destructor+0x44>
}
 802770c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if(table->col_w) lv_mem_free(table->col_w);
 8027710:	f7eb b820 	b.w	8012754 <lv_mem_free>
        if(table->cell_data[i]) {
 8027714:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8027718:	b120      	cbz	r0, 8027724 <lv_table_destructor+0x40>
            lv_mem_free(table->cell_data[i]);
 802771a:	f7eb f81b 	bl	8012754 <lv_mem_free>
            table->cell_data[i] = NULL;
 802771e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8027720:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 8027724:	3501      	adds	r5, #1
 8027726:	e7e1      	b.n	80276ec <lv_table_destructor+0x8>
}
 8027728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802772a <lv_table_constructor>:
    table->col_cnt = 1;
 802772a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 802772e:	2002      	movs	r0, #2
{
 8027730:	b510      	push	{r4, lr}
 8027732:	460c      	mov	r4, r1
    table->col_cnt = 1;
 8027734:	624b      	str	r3, [r1, #36]	; 0x24
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 8027736:	f7ea ffef 	bl	8012718 <lv_mem_alloc>
 802773a:	6320      	str	r0, [r4, #48]	; 0x30
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 802773c:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 802773e:	0040      	lsls	r0, r0, #1
 8027740:	f7ea ffea 	bl	8012718 <lv_mem_alloc>
    table->col_w[0] = LV_DPI_DEF;
 8027744:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8027746:	2382      	movs	r3, #130	; 0x82
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 8027748:	62e0      	str	r0, [r4, #44]	; 0x2c
    table->col_w[0] = LV_DPI_DEF;
 802774a:	8013      	strh	r3, [r2, #0]
    table->row_h[0] = LV_DPI_DEF;
 802774c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802774e:	8013      	strh	r3, [r2, #0]
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 8027750:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8027752:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8027754:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8027756:	4359      	muls	r1, r3
 8027758:	0089      	lsls	r1, r1, #2
 802775a:	f7eb f813 	bl	8012784 <lv_mem_realloc>
    table->cell_data[0] = NULL;
 802775e:	2300      	movs	r3, #0
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 8027760:	62a0      	str	r0, [r4, #40]	; 0x28
    table->cell_data[0] = NULL;
 8027762:	6003      	str	r3, [r0, #0]
}
 8027764:	bd10      	pop	{r4, pc}

08027766 <get_cell_area>:
    strcpy(&dst[1], txt);
#endif
}

static void get_cell_area(lv_obj_t * obj, uint16_t row, uint16_t col, lv_area_t * area)
{
 8027766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802776a:	461c      	mov	r4, r3
    lv_table_t * table = (lv_table_t *)obj;

    uint32_t c;
    area->x1 = 0;
    for(c = 0; c < col; c++) {
 802776c:	2300      	movs	r3, #0
{
 802776e:	4690      	mov	r8, r2
 8027770:	4605      	mov	r5, r0
 8027772:	460f      	mov	r7, r1
    for(c = 0; c < col; c++) {
 8027774:	461a      	mov	r2, r3
 8027776:	4590      	cmp	r8, r2
    area->x1 = 0;
 8027778:	8023      	strh	r3, [r4, #0]
    for(c = 0; c < col; c++) {
 802777a:	d83a      	bhi.n	80277f2 <get_cell_area+0x8c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802777c:	2216      	movs	r2, #22
 802777e:	2100      	movs	r1, #0
 8027780:	4628      	mov	r0, r5
 8027782:	f7f6 f9b1 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8027786:	b2c0      	uxtb	r0, r0
        area->x1 += table->col_w[c];
    }

    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL;
    if(rtl) {
 8027788:	2801      	cmp	r0, #1
        area->x1 += lv_obj_get_scroll_x(obj);
 802778a:	4628      	mov	r0, r5
    if(rtl) {
 802778c:	d138      	bne.n	8027800 <get_cell_area+0x9a>
        area->x1 += lv_obj_get_scroll_x(obj);
 802778e:	f7f5 fc18 	bl	801cfc2 <lv_obj_get_scroll_x>
 8027792:	8823      	ldrh	r3, [r4, #0]
 8027794:	4418      	add	r0, r3
 8027796:	8020      	strh	r0, [r4, #0]
        lv_coord_t w = lv_obj_get_width(obj);
 8027798:	4628      	mov	r0, r5
 802779a:	f7f5 f87f 	bl	801c89c <lv_obj_get_width>
        area->x2 = w - area->x1 - lv_obj_get_style_pad_right(obj, 0);
 802779e:	8823      	ldrh	r3, [r4, #0]
 80277a0:	2100      	movs	r1, #0
 80277a2:	1ac6      	subs	r6, r0, r3
 80277a4:	4628      	mov	r0, r5
 80277a6:	f7ff ff15 	bl	80275d4 <lv_obj_get_style_pad_right>
 80277aa:	b2b6      	uxth	r6, r6
 80277ac:	1a33      	subs	r3, r6, r0
 80277ae:	b29b      	uxth	r3, r3
 80277b0:	80a3      	strh	r3, [r4, #4]
        area->x1 = area->x2 - table->col_w[col];
 80277b2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80277b4:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
 80277b8:	1a9b      	subs	r3, r3, r2
 80277ba:	8023      	strh	r3, [r4, #0]
        area->x2 = area->x1 + table->col_w[col] - 1;
    }

    uint32_t r;
    area->y1 = 0;
    for(r = 0; r < row; r++) {
 80277bc:	2300      	movs	r3, #0
 80277be:	461a      	mov	r2, r3
 80277c0:	4297      	cmp	r7, r2
    area->y1 = 0;
 80277c2:	8063      	strh	r3, [r4, #2]
    for(r = 0; r < row; r++) {
 80277c4:	d830      	bhi.n	8027828 <get_cell_area+0xc2>
        area->y1 += table->row_h[r];
    }

    area->y1 += lv_obj_get_style_pad_top(obj, 0);
 80277c6:	2100      	movs	r1, #0
 80277c8:	4628      	mov	r0, r5
 80277ca:	f7ff ff09 	bl	80275e0 <lv_obj_get_style_pad_top>
 80277ce:	8863      	ldrh	r3, [r4, #2]
 80277d0:	4418      	add	r0, r3
 80277d2:	8060      	strh	r0, [r4, #2]
    area->y1 -= lv_obj_get_scroll_y(obj);
 80277d4:	4628      	mov	r0, r5
 80277d6:	f7f5 fbfa 	bl	801cfce <lv_obj_get_scroll_y>
 80277da:	8863      	ldrh	r3, [r4, #2]
 80277dc:	1a18      	subs	r0, r3, r0
 80277de:	b280      	uxth	r0, r0
 80277e0:	8060      	strh	r0, [r4, #2]
    area->y2 = area->y1 + table->row_h[row] - 1;
 80277e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80277e4:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 80277e8:	3b01      	subs	r3, #1
 80277ea:	4418      	add	r0, r3
 80277ec:	80e0      	strh	r0, [r4, #6]

}
 80277ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        area->x1 += table->col_w[c];
 80277f2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80277f4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
    for(c = 0; c < col; c++) {
 80277f8:	3201      	adds	r2, #1
        area->x1 += table->col_w[c];
 80277fa:	440b      	add	r3, r1
 80277fc:	b21b      	sxth	r3, r3
    for(c = 0; c < col; c++) {
 80277fe:	e7ba      	b.n	8027776 <get_cell_area+0x10>
        area->x1 -= lv_obj_get_scroll_x(obj);
 8027800:	f7f5 fbdf 	bl	801cfc2 <lv_obj_get_scroll_x>
 8027804:	8823      	ldrh	r3, [r4, #0]
        area->x1 += lv_obj_get_style_pad_left(obj, 0);
 8027806:	2100      	movs	r1, #0
        area->x1 -= lv_obj_get_scroll_x(obj);
 8027808:	1a1b      	subs	r3, r3, r0
        area->x1 += lv_obj_get_style_pad_left(obj, 0);
 802780a:	4628      	mov	r0, r5
        area->x1 -= lv_obj_get_scroll_x(obj);
 802780c:	8023      	strh	r3, [r4, #0]
        area->x1 += lv_obj_get_style_pad_left(obj, 0);
 802780e:	f7ff fedb 	bl	80275c8 <lv_obj_get_style_pad_left>
 8027812:	8823      	ldrh	r3, [r4, #0]
 8027814:	4418      	add	r0, r3
 8027816:	b280      	uxth	r0, r0
 8027818:	8020      	strh	r0, [r4, #0]
        area->x2 = area->x1 + table->col_w[col] - 1;
 802781a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802781c:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
 8027820:	3b01      	subs	r3, #1
 8027822:	4418      	add	r0, r3
 8027824:	80a0      	strh	r0, [r4, #4]
 8027826:	e7c9      	b.n	80277bc <get_cell_area+0x56>
        area->y1 += table->row_h[r];
 8027828:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 802782a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
    for(r = 0; r < row; r++) {
 802782e:	3201      	adds	r2, #1
        area->y1 += table->row_h[r];
 8027830:	440b      	add	r3, r1
 8027832:	b21b      	sxth	r3, r3
    for(r = 0; r < row; r++) {
 8027834:	e7c4      	b.n	80277c0 <get_cell_area+0x5a>

08027836 <scroll_to_selected_cell>:


static void scroll_to_selected_cell(lv_obj_t * obj)
{
 8027836:	b537      	push	{r0, r1, r2, r4, r5, lr}
    lv_table_t * table = (lv_table_t *)obj;

    lv_area_t a;
    get_cell_area(obj, table->row_act, table->col_act, &a);
 8027838:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 802783a:	466b      	mov	r3, sp
 802783c:	8e82      	ldrh	r2, [r0, #52]	; 0x34
{
 802783e:	4604      	mov	r4, r0
    get_cell_area(obj, table->row_act, table->col_act, &a);
 8027840:	f7ff ff91 	bl	8027766 <get_cell_area>
    if(a.x1 < 0) {
 8027844:	f9bd 1000 	ldrsh.w	r1, [sp]
 8027848:	2900      	cmp	r1, #0
 802784a:	da14      	bge.n	8027876 <scroll_to_selected_cell+0x40>
        lv_obj_scroll_by_bounded(obj, -a.x1, 0, LV_ANIM_ON);
 802784c:	4249      	negs	r1, r1
    }
    else if(a.x2 > lv_obj_get_width(obj)) {
        lv_obj_scroll_by_bounded(obj, lv_obj_get_width(obj) - a.x2, 0, LV_ANIM_ON);
 802784e:	2301      	movs	r3, #1
 8027850:	2200      	movs	r2, #0
 8027852:	b209      	sxth	r1, r1
 8027854:	4620      	mov	r0, r4
 8027856:	f7f5 fbfd 	bl	801d054 <lv_obj_scroll_by_bounded>
    }

    if(a.y1 < 0) {
 802785a:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 802785e:	2a00      	cmp	r2, #0
 8027860:	da15      	bge.n	802788e <scroll_to_selected_cell+0x58>
        lv_obj_scroll_by_bounded(obj, 0, -a.y1, LV_ANIM_ON);
 8027862:	4252      	negs	r2, r2
    }
    else if(a.y2 > lv_obj_get_height(obj)) {
        lv_obj_scroll_by_bounded(obj, 0, lv_obj_get_height(obj) - a.y2, LV_ANIM_ON);
 8027864:	2301      	movs	r3, #1
 8027866:	b212      	sxth	r2, r2
 8027868:	2100      	movs	r1, #0
 802786a:	4620      	mov	r0, r4
    }

}
 802786c:	b003      	add	sp, #12
 802786e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        lv_obj_scroll_by_bounded(obj, 0, lv_obj_get_height(obj) - a.y2, LV_ANIM_ON);
 8027872:	f7f5 bbef 	b.w	801d054 <lv_obj_scroll_by_bounded>
    else if(a.x2 > lv_obj_get_width(obj)) {
 8027876:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 802787a:	4620      	mov	r0, r4
 802787c:	f7f5 f80e 	bl	801c89c <lv_obj_get_width>
 8027880:	4285      	cmp	r5, r0
 8027882:	ddea      	ble.n	802785a <scroll_to_selected_cell+0x24>
        lv_obj_scroll_by_bounded(obj, lv_obj_get_width(obj) - a.x2, 0, LV_ANIM_ON);
 8027884:	4620      	mov	r0, r4
 8027886:	f7f5 f809 	bl	801c89c <lv_obj_get_width>
 802788a:	1b41      	subs	r1, r0, r5
 802788c:	e7df      	b.n	802784e <scroll_to_selected_cell+0x18>
    else if(a.y2 > lv_obj_get_height(obj)) {
 802788e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8027892:	4620      	mov	r0, r4
 8027894:	f7f5 f808 	bl	801c8a8 <lv_obj_get_height>
 8027898:	4285      	cmp	r5, r0
 802789a:	dd04      	ble.n	80278a6 <scroll_to_selected_cell+0x70>
        lv_obj_scroll_by_bounded(obj, 0, lv_obj_get_height(obj) - a.y2, LV_ANIM_ON);
 802789c:	4620      	mov	r0, r4
 802789e:	f7f5 f803 	bl	801c8a8 <lv_obj_get_height>
 80278a2:	1b42      	subs	r2, r0, r5
 80278a4:	e7de      	b.n	8027864 <scroll_to_selected_cell+0x2e>
}
 80278a6:	b003      	add	sp, #12
 80278a8:	bd30      	pop	{r4, r5, pc}

080278aa <refr_size_form_row.constprop.0>:
static void refr_size_form_row(lv_obj_t * obj, uint32_t start_row)
 80278aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278ae:	4604      	mov	r4, r0
 80278b0:	b08b      	sub	sp, #44	; 0x2c
    const lv_coord_t cell_pad_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 80278b2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    for(i = start_row; i < table->row_cnt; i++) {
 80278b6:	2500      	movs	r5, #0
    const lv_coord_t cell_pad_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 80278b8:	f7ff fe86 	bl	80275c8 <lv_obj_get_style_pad_left>
    const lv_coord_t cell_pad_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 80278bc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    const lv_coord_t cell_pad_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 80278c0:	9007      	str	r0, [sp, #28]
    const lv_coord_t cell_pad_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 80278c2:	4620      	mov	r0, r4
 80278c4:	f7ff fe86 	bl	80275d4 <lv_obj_get_style_pad_right>
    const lv_coord_t cell_pad_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 80278c8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    const lv_coord_t cell_pad_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 80278cc:	4606      	mov	r6, r0
    const lv_coord_t cell_pad_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 80278ce:	4620      	mov	r0, r4
 80278d0:	f7ff fe86 	bl	80275e0 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80278d4:	2211      	movs	r2, #17
 80278d6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80278da:	4607      	mov	r7, r0
 80278dc:	4620      	mov	r0, r4
 80278de:	f7f6 f903 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80278e2:	2258      	movs	r2, #88	; 0x58
 80278e4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    return (lv_coord_t)v.num;
 80278e8:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80278ec:	4620      	mov	r0, r4
 80278ee:	f7f6 f8fb 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80278f2:	2259      	movs	r2, #89	; 0x59
    return (lv_coord_t)v.num;
 80278f4:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80278f6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80278fa:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 80278fc:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80278fe:	f7f6 f8f3 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8027902:	2257      	movs	r2, #87	; 0x57
 8027904:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    return (lv_coord_t)v.num;
 8027908:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802790c:	4620      	mov	r0, r4
 802790e:	f7f6 f8eb 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8027912:	2205      	movs	r2, #5
 8027914:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8027918:	9008      	str	r0, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 802791a:	4620      	mov	r0, r4
 802791c:	f7f6 f8e4 	bl	801dae8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8027920:	2206      	movs	r2, #6
    return (lv_coord_t)v.num;
 8027922:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8027926:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802792a:	4620      	mov	r0, r4
 802792c:	f7f6 f8dc 	bl	801dae8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8027930:	fa0f f880 	sxth.w	r8, r0
    for(i = start_row; i < table->row_cnt; i++) {
 8027934:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8027936:	429d      	cmp	r5, r3
 8027938:	d308      	bcc.n	802794c <refr_size_form_row.constprop.0+0xa2>
    lv_obj_refresh_self_size(obj);
 802793a:	4620      	mov	r0, r4
 802793c:	f7f5 f823 	bl	801c986 <lv_obj_refresh_self_size>
    lv_obj_invalidate(obj);
 8027940:	4620      	mov	r0, r4
}
 8027942:	b00b      	add	sp, #44	; 0x2c
 8027944:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(obj);
 8027948:	f7f5 b9a8 	b.w	801cc9c <lv_obj_invalidate>
        lv_coord_t calculated_height = get_row_height(obj, i, font, letter_space, line_space,
 802794c:	9b07      	ldr	r3, [sp, #28]
 802794e:	b2a9      	uxth	r1, r5
 8027950:	4620      	mov	r0, r4
 8027952:	9602      	str	r6, [sp, #8]
 8027954:	e9cd a300 	strd	sl, r3, [sp]
 8027958:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 802795c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8027960:	f7ff fe44 	bl	80275ec <get_row_height>
        table->row_h[i] = LV_CLAMP(minh, calculated_height, maxh);
 8027964:	4540      	cmp	r0, r8
 8027966:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8027968:	bfa8      	it	ge
 802796a:	4640      	movge	r0, r8
 802796c:	b200      	sxth	r0, r0
 802796e:	4548      	cmp	r0, r9
 8027970:	bfb8      	it	lt
 8027972:	4648      	movlt	r0, r9
 8027974:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
    for(i = start_row; i < table->row_cnt; i++) {
 8027978:	3501      	adds	r5, #1
 802797a:	e7db      	b.n	8027934 <refr_size_form_row.constprop.0+0x8a>

0802797c <pwd_char_hider_anim>:
}
 802797c:	4770      	bx	lr

0802797e <lv_textarea_destructor>:
    if(ta->pwd_tmp != NULL) {
 802797e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
{
 8027980:	b510      	push	{r4, lr}
 8027982:	460c      	mov	r4, r1
    if(ta->pwd_tmp != NULL) {
 8027984:	b118      	cbz	r0, 802798e <lv_textarea_destructor+0x10>
        lv_mem_free(ta->pwd_tmp);
 8027986:	f7ea fee5 	bl	8012754 <lv_mem_free>
        ta->pwd_tmp = NULL;
 802798a:	2300      	movs	r3, #0
 802798c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if(ta->pwd_bullet != NULL) {
 802798e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8027990:	b118      	cbz	r0, 802799a <lv_textarea_destructor+0x1c>
        lv_mem_free(ta->pwd_bullet);
 8027992:	f7ea fedf 	bl	8012754 <lv_mem_free>
        ta->pwd_bullet = NULL;
 8027996:	2300      	movs	r3, #0
 8027998:	6323      	str	r3, [r4, #48]	; 0x30
    if(ta->placeholder_txt != NULL) {
 802799a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802799c:	b118      	cbz	r0, 80279a6 <lv_textarea_destructor+0x28>
        lv_mem_free(ta->placeholder_txt);
 802799e:	f7ea fed9 	bl	8012754 <lv_mem_free>
        ta->placeholder_txt = NULL;
 80279a2:	2300      	movs	r3, #0
 80279a4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80279a6:	bd10      	pop	{r4, pc}

080279a8 <cursor_blink_anim_cb>:
    if(show != ta->cursor.show) {
 80279a8:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
{
 80279ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(show != ta->cursor.show) {
 80279ae:	f002 0401 	and.w	r4, r2, #1
 80279b2:	428c      	cmp	r4, r1
 80279b4:	d020      	beq.n	80279f8 <cursor_blink_anim_cb+0x50>
        ta->cursor.show = show ? 1U : 0U;
 80279b6:	3900      	subs	r1, #0
        area_tmp.x1 += ta->label->coords.x1;
 80279b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80279ba:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
        ta->cursor.show = show ? 1U : 0U;
 80279be:	bf18      	it	ne
 80279c0:	2101      	movne	r1, #1
    dest->x2 = src->x2;
 80279c2:	f9b0 604c 	ldrsh.w	r6, [r0, #76]	; 0x4c
    dest->y2 = src->y2;
 80279c6:	f9b0 504e 	ldrsh.w	r5, [r0, #78]	; 0x4e
 80279ca:	f361 0200 	bfi	r2, r1, #0, #1
    dest->y1 = src->y1;
 80279ce:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	; 0x4a
 80279d2:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
        area_tmp.x1 += ta->label->coords.x1;
 80279d6:	8aa2      	ldrh	r2, [r4, #20]
 80279d8:	4413      	add	r3, r2
        area_tmp.x2 += ta->label->coords.x1;
 80279da:	4432      	add	r2, r6
        area_tmp.x1 += ta->label->coords.x1;
 80279dc:	f8ad 3000 	strh.w	r3, [sp]
        area_tmp.y1 += ta->label->coords.y1;
 80279e0:	8ae3      	ldrh	r3, [r4, #22]
        area_tmp.x2 += ta->label->coords.x1;
 80279e2:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_tmp.y1 += ta->label->coords.y1;
 80279e6:	4419      	add	r1, r3
        area_tmp.y2 += ta->label->coords.y1;
 80279e8:	442b      	add	r3, r5
        area_tmp.y1 += ta->label->coords.y1;
 80279ea:	f8ad 1002 	strh.w	r1, [sp, #2]
        lv_obj_invalidate_area(obj, &area_tmp);
 80279ee:	4669      	mov	r1, sp
        area_tmp.y2 += ta->label->coords.y1;
 80279f0:	f8ad 3006 	strh.w	r3, [sp, #6]
        lv_obj_invalidate_area(obj, &area_tmp);
 80279f4:	f7f5 f931 	bl	801cc5a <lv_obj_invalidate_area>
}
 80279f8:	b002      	add	sp, #8
 80279fa:	bd70      	pop	{r4, r5, r6, pc}

080279fc <lv_obj_get_style_text_font.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80279fc:	2257      	movs	r2, #87	; 0x57
 80279fe:	2100      	movs	r1, #0
static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
 8027a00:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8027a02:	f7f6 f871 	bl	801dae8 <lv_obj_get_style_prop>
}
 8027a06:	bd08      	pop	{r3, pc}

08027a08 <label_event_cb>:
{
 8027a08:	b570      	push	{r4, r5, r6, lr}
 8027a0a:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 8027a0c:	f7f3 fc29 	bl	801b262 <lv_event_get_code>
 8027a10:	4604      	mov	r4, r0
    lv_obj_t * label = lv_event_get_target(e);
 8027a12:	4628      	mov	r0, r5
    if(code == LV_EVENT_STYLE_CHANGED || code == LV_EVENT_SIZE_CHANGED) {
 8027a14:	3c29      	subs	r4, #41	; 0x29
    lv_obj_t * label = lv_event_get_target(e);
 8027a16:	f7f3 fc20 	bl	801b25a <lv_event_get_target>
 8027a1a:	4606      	mov	r6, r0
    lv_obj_t * ta = lv_obj_get_parent(label);
 8027a1c:	f7f6 fbe8 	bl	801e1f0 <lv_obj_get_parent>
    if(code == LV_EVENT_STYLE_CHANGED || code == LV_EVENT_SIZE_CHANGED) {
 8027a20:	b2e4      	uxtb	r4, r4
    lv_obj_t * ta = lv_obj_get_parent(label);
 8027a22:	4605      	mov	r5, r0
    if(code == LV_EVENT_STYLE_CHANGED || code == LV_EVENT_SIZE_CHANGED) {
 8027a24:	2c01      	cmp	r4, #1
 8027a26:	d80b      	bhi.n	8027a40 <label_event_cb+0x38>
        lv_label_set_text(label, NULL);
 8027a28:	4630      	mov	r0, r6
 8027a2a:	2100      	movs	r1, #0
 8027a2c:	f7ff fa5a 	bl	8026ee4 <lv_label_set_text>
        refr_cursor_area(ta);
 8027a30:	4628      	mov	r0, r5
 8027a32:	f7f0 fac5 	bl	8017fc0 <refr_cursor_area>
        start_cursor_blink(ta);
 8027a36:	4628      	mov	r0, r5
}
 8027a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        start_cursor_blink(ta);
 8027a3c:	f7f0 ba8e 	b.w	8017f5c <start_cursor_blink>
}
 8027a40:	bd70      	pop	{r4, r5, r6, pc}

08027a42 <lv_textarea_set_cursor_click_pos>:
    ta->cursor.click_pos = en ? 1U : 0U;
 8027a42:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8027a46:	f361 0341 	bfi	r3, r1, #1, #1
 8027a4a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
}
 8027a4e:	4770      	bx	lr

08027a50 <lv_textarea_set_one_line>:
{
 8027a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(ta->one_line == en) return;
 8027a54:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
{
 8027a58:	4604      	mov	r4, r0
 8027a5a:	460d      	mov	r5, r1
    if(ta->one_line == en) return;
 8027a5c:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8027a60:	428a      	cmp	r2, r1
 8027a62:	d029      	beq.n	8027ab8 <lv_textarea_set_one_line+0x68>
    lv_coord_t width = en ? LV_SIZE_CONTENT : lv_pct(100);
 8027a64:	2d00      	cmp	r5, #0
    ta->one_line = en ? 1U : 0U;
 8027a66:	f361 03c3 	bfi	r3, r1, #3, #1
    lv_coord_t width = en ? LV_SIZE_CONTENT : lv_pct(100);
 8027a6a:	f242 0164 	movw	r1, #8292	; 0x2064
 8027a6e:	f242 76d1 	movw	r6, #10193	; 0x27d1
 8027a72:	bf08      	it	eq
 8027a74:	2700      	moveq	r7, #0
    ta->one_line = en ? 1U : 0U;
 8027a76:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    lv_coord_t width = en ? LV_SIZE_CONTENT : lv_pct(100);
 8027a7a:	bf18      	it	ne
 8027a7c:	460f      	movne	r7, r1
    lv_obj_set_width(ta->label, width);
 8027a7e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8027a80:	bf18      	it	ne
 8027a82:	4631      	movne	r1, r6
 8027a84:	f7f4 fe50 	bl	801c728 <lv_obj_set_width>
    lv_obj_set_style_min_width(ta->label, min_width_value, 0);
 8027a88:	2200      	movs	r2, #0
 8027a8a:	4639      	mov	r1, r7
 8027a8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027a8e:	f7f6 fb7a 	bl	801e186 <lv_obj_set_style_min_width>
    if(en) {
 8027a92:	b15d      	cbz	r5, 8027aac <lv_textarea_set_one_line+0x5c>
        lv_obj_set_height(obj, LV_SIZE_CONTENT);
 8027a94:	4631      	mov	r1, r6
 8027a96:	4620      	mov	r0, r4
 8027a98:	f7f4 fe5d 	bl	801c756 <lv_obj_set_height>
    lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 8027a9c:	2300      	movs	r3, #0
 8027a9e:	4620      	mov	r0, r4
 8027aa0:	461a      	mov	r2, r3
 8027aa2:	4619      	mov	r1, r3
}
 8027aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 8027aa8:	f7f5 bb38 	b.w	801d11c <lv_obj_scroll_to>
        lv_obj_remove_local_style_prop(obj, LV_STYLE_HEIGHT, LV_PART_MAIN);
 8027aac:	462a      	mov	r2, r5
 8027aae:	2104      	movs	r1, #4
 8027ab0:	4620      	mov	r0, r4
 8027ab2:	f7f6 fa06 	bl	801dec2 <lv_obj_remove_local_style_prop>
 8027ab6:	e7f1      	b.n	8027a9c <lv_textarea_set_one_line+0x4c>
}
 8027ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08027abc <lv_textarea_get_text>:
    if(ta->pwd_mode == 0) {
 8027abc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8027ac0:	075b      	lsls	r3, r3, #29
 8027ac2:	d402      	bmi.n	8027aca <lv_textarea_get_text+0xe>
        txt = lv_label_get_text(ta->label);
 8027ac4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8027ac6:	f7ff ba8e 	b.w	8026fe6 <lv_label_get_text>
}
 8027aca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8027acc:	4770      	bx	lr

08027ace <lv_textarea_get_cursor_pos>:
}
 8027ace:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8027ad0:	4770      	bx	lr

08027ad2 <pwd_char_hider_anim_ready>:
    pwd_char_hider(obj);
 8027ad2:	6800      	ldr	r0, [r0, #0]
 8027ad4:	f7f0 bc50 	b.w	8018378 <pwd_char_hider>

08027ad8 <lv_textarea_get_one_line>:
    return ta->one_line == 1U;
 8027ad8:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
}
 8027adc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8027ae0:	4770      	bx	lr

08027ae2 <lv_textarea_clear_selection>:
{
 8027ae2:	b538      	push	{r3, r4, r5, lr}
 8027ae4:	4604      	mov	r4, r0
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 8027ae6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8027ae8:	f7ff fb64 	bl	80271b4 <lv_label_get_text_selection_start>
 8027aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8027af0:	4605      	mov	r5, r0
 8027af2:	4298      	cmp	r0, r3
 8027af4:	d00b      	beq.n	8027b0e <lv_textarea_clear_selection+0x2c>
        lv_label_set_text_sel_start(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 8027af6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027af8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8027afc:	f7ff fa6d 	bl	8026fda <lv_label_set_text_sel_start>
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 8027b00:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027b02:	f64f 71ff 	movw	r1, #65535	; 0xffff
}
 8027b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 8027b0a:	f7ff ba69 	b.w	8026fe0 <lv_label_set_text_sel_end>
       lv_label_get_text_selection_end(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL) {
 8027b0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027b10:	f7ff fb52 	bl	80271b8 <lv_label_get_text_selection_end>
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 8027b14:	42a8      	cmp	r0, r5
 8027b16:	d1ee      	bne.n	8027af6 <lv_textarea_clear_selection+0x14>
}
 8027b18:	bd38      	pop	{r3, r4, r5, pc}

08027b1a <lv_textarea_del_char>:
{
 8027b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(cur_pos == 0) return;
 8027b1c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8027b1e:	4604      	mov	r4, r0
    if(cur_pos == 0) return;
 8027b20:	2b00      	cmp	r3, #0
 8027b22:	d040      	beq.n	8027ba6 <lv_textarea_del_char+0x8c>
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 8027b24:	237f      	movs	r3, #127	; 0x7f
    lv_res_t res = insert_handler(obj, del_buf);
 8027b26:	a901      	add	r1, sp, #4
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 8027b28:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_res_t res = insert_handler(obj, del_buf);
 8027b2c:	f7f0 fcf4 	bl	8018518 <insert_handler>
    if(res != LV_RES_OK) return;
 8027b30:	2801      	cmp	r0, #1
    lv_res_t res = insert_handler(obj, del_buf);
 8027b32:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return;
 8027b34:	d137      	bne.n	8027ba6 <lv_textarea_del_char+0x8c>
    char * label_txt = lv_label_get_text(ta->label);
 8027b36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027b38:	f7ff fa55 	bl	8026fe6 <lv_label_get_text>
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 8027b3c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    char * label_txt = lv_label_get_text(ta->label);
 8027b3e:	4606      	mov	r6, r0
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 8027b40:	462a      	mov	r2, r5
 8027b42:	3901      	subs	r1, #1
 8027b44:	f7eb fa28 	bl	8012f98 <_lv_txt_cut>
    lv_label_set_text(ta->label, label_txt);
 8027b48:	4631      	mov	r1, r6
 8027b4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027b4c:	f7ff f9ca 	bl	8026ee4 <lv_label_set_text>
    lv_textarea_clear_selection(obj);
 8027b50:	4620      	mov	r0, r4
 8027b52:	f7ff ffc6 	bl	8027ae2 <lv_textarea_clear_selection>
    if(ta->placeholder_txt) {
 8027b56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8027b58:	b13b      	cbz	r3, 8027b6a <lv_textarea_del_char+0x50>
        const char * txt = lv_label_get_text(ta->label);
 8027b5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027b5c:	f7ff fa43 	bl	8026fe6 <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 8027b60:	7803      	ldrb	r3, [r0, #0]
 8027b62:	b913      	cbnz	r3, 8027b6a <lv_textarea_del_char+0x50>
 8027b64:	4620      	mov	r0, r4
 8027b66:	f7f5 f899 	bl	801cc9c <lv_obj_invalidate>
    if(ta->pwd_mode) {
 8027b6a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
        _lv_txt_cut(ta->pwd_tmp, ta->cursor.pos - 1, 1);
 8027b6e:	6c61      	ldr	r1, [r4, #68]	; 0x44
    if(ta->pwd_mode) {
 8027b70:	075b      	lsls	r3, r3, #29
 8027b72:	d50e      	bpl.n	8027b92 <lv_textarea_del_char+0x78>
        _lv_txt_cut(ta->pwd_tmp, ta->cursor.pos - 1, 1);
 8027b74:	3901      	subs	r1, #1
 8027b76:	2201      	movs	r2, #1
 8027b78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027b7a:	f7eb fa0d 	bl	8012f98 <_lv_txt_cut>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 8027b7e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8027b80:	4628      	mov	r0, r5
 8027b82:	f7f2 fde3 	bl	801a74c <strlen>
 8027b86:	1c41      	adds	r1, r0, #1
 8027b88:	4628      	mov	r0, r5
 8027b8a:	f7ea fdfb 	bl	8012784 <lv_mem_realloc>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8027b8e:	b160      	cbz	r0, 8027baa <lv_textarea_del_char+0x90>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 8027b90:	62e0      	str	r0, [r4, #44]	; 0x2c
    lv_textarea_set_cursor_pos(obj, ta->cursor.pos - 1);
 8027b92:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8027b94:	4620      	mov	r0, r4
 8027b96:	3901      	subs	r1, #1
 8027b98:	f7f0 fb1a 	bl	80181d0 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8027b9c:	2200      	movs	r2, #0
 8027b9e:	211c      	movs	r1, #28
 8027ba0:	4620      	mov	r0, r4
 8027ba2:	f7dc fdcf 	bl	8004744 <lv_event_send>
}
 8027ba6:	b002      	add	sp, #8
 8027ba8:	bd70      	pop	{r4, r5, r6, pc}
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8027baa:	e7fe      	b.n	8027baa <lv_textarea_del_char+0x90>

08027bac <lv_textarea_del_char_forward>:
{
 8027bac:	b538      	push	{r3, r4, r5, lr}
    return ta->cursor.pos;
 8027bae:	6c45      	ldr	r5, [r0, #68]	; 0x44
{
 8027bb0:	4604      	mov	r4, r0
    lv_textarea_set_cursor_pos(obj, cp + 1);
 8027bb2:	1c69      	adds	r1, r5, #1
 8027bb4:	f7f0 fb0c 	bl	80181d0 <lv_textarea_set_cursor_pos>
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 8027bb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8027bba:	429d      	cmp	r5, r3
 8027bbc:	d004      	beq.n	8027bc8 <lv_textarea_del_char_forward+0x1c>
 8027bbe:	4620      	mov	r0, r4
}
 8027bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 8027bc4:	f7ff bfa9 	b.w	8027b1a <lv_textarea_del_char>
}
 8027bc8:	bd38      	pop	{r3, r4, r5, pc}

08027bca <lv_textarea_cursor_right>:
    cp++;
 8027bca:	6c41      	ldr	r1, [r0, #68]	; 0x44
    lv_textarea_set_cursor_pos(obj, cp);
 8027bcc:	3101      	adds	r1, #1
 8027bce:	f7f0 baff 	b.w	80181d0 <lv_textarea_set_cursor_pos>

08027bd2 <lv_textarea_cursor_left>:
    return ta->cursor.pos;
 8027bd2:	6c41      	ldr	r1, [r0, #68]	; 0x44
    if(cp > 0) {
 8027bd4:	b111      	cbz	r1, 8027bdc <lv_textarea_cursor_left+0xa>
        lv_textarea_set_cursor_pos(obj, cp);
 8027bd6:	3901      	subs	r1, #1
 8027bd8:	f7f0 bafa 	b.w	80181d0 <lv_textarea_set_cursor_pos>
}
 8027bdc:	4770      	bx	lr

08027bde <lv_textarea_cursor_down>:
{
 8027bde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027be0:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 8027be2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8027be4:	aa01      	add	r2, sp, #4
 8027be6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8027be8:	f7ee fb96 	bl	8016318 <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8027bec:	2259      	movs	r2, #89	; 0x59
 8027bee:	2100      	movs	r1, #0
 8027bf0:	4620      	mov	r0, r4
 8027bf2:	f7f5 ff79 	bl	801dae8 <lv_obj_get_style_prop>
 8027bf6:	4605      	mov	r5, r0
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8027bf8:	4620      	mov	r0, r4
 8027bfa:	f7ff feff 	bl	80279fc <lv_obj_get_style_text_font.constprop.0>
    pos.y += font_h + line_space + 1;
 8027bfe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8027c02:	441d      	add	r5, r3
 8027c04:	8903      	ldrh	r3, [r0, #8]
    if(pos.y < lv_obj_get_height(ta->label)) {
 8027c06:	6a60      	ldr	r0, [r4, #36]	; 0x24
    pos.y += font_h + line_space + 1;
 8027c08:	3501      	adds	r5, #1
 8027c0a:	441d      	add	r5, r3
    pos.x = ta->cursor.valid_x;
 8027c0c:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    pos.y += font_h + line_space + 1;
 8027c10:	b22d      	sxth	r5, r5
    pos.x = ta->cursor.valid_x;
 8027c12:	f8ad 3004 	strh.w	r3, [sp, #4]
    pos.y += font_h + line_space + 1;
 8027c16:	f8ad 5006 	strh.w	r5, [sp, #6]
    if(pos.y < lv_obj_get_height(ta->label)) {
 8027c1a:	f7f4 fe45 	bl	801c8a8 <lv_obj_get_height>
 8027c1e:	4285      	cmp	r5, r0
 8027c20:	da0b      	bge.n	8027c3a <lv_textarea_cursor_down+0x5c>
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 8027c22:	a901      	add	r1, sp, #4
 8027c24:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027c26:	f7ff f9e5 	bl	8026ff4 <lv_label_get_letter_on>
        lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 8027c2a:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 8027c2e:	4601      	mov	r1, r0
        lv_textarea_set_cursor_pos(obj, new_cur_pos);
 8027c30:	4620      	mov	r0, r4
 8027c32:	f7f0 facd 	bl	80181d0 <lv_textarea_set_cursor_pos>
        ta->cursor.valid_x = cur_valid_x_tmp;
 8027c36:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
 8027c3a:	b003      	add	sp, #12
 8027c3c:	bd30      	pop	{r4, r5, pc}

08027c3e <lv_textarea_cursor_up>:
{
 8027c3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027c40:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 8027c42:	aa01      	add	r2, sp, #4
 8027c44:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8027c46:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8027c48:	f7ee fb66 	bl	8016318 <lv_label_get_letter_pos>
 8027c4c:	2259      	movs	r2, #89	; 0x59
 8027c4e:	2100      	movs	r1, #0
 8027c50:	4620      	mov	r0, r4
 8027c52:	f7f5 ff49 	bl	801dae8 <lv_obj_get_style_prop>
 8027c56:	4605      	mov	r5, r0
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8027c58:	4620      	mov	r0, r4
 8027c5a:	f7ff fecf 	bl	80279fc <lv_obj_get_style_text_font.constprop.0>
    pos.y -= font_h + line_space - 1;
 8027c5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8027c62:	8902      	ldrh	r2, [r0, #8]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 8027c64:	a901      	add	r1, sp, #4
    pos.y -= font_h + line_space - 1;
 8027c66:	3301      	adds	r3, #1
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 8027c68:	6a60      	ldr	r0, [r4, #36]	; 0x24
    pos.y -= font_h + line_space - 1;
 8027c6a:	1b5b      	subs	r3, r3, r5
 8027c6c:	1a9b      	subs	r3, r3, r2
 8027c6e:	f8ad 3006 	strh.w	r3, [sp, #6]
    pos.x = ta->cursor.valid_x;
 8027c72:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8027c76:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 8027c7a:	f7ff f9bb 	bl	8026ff4 <lv_label_get_letter_on>
    lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 8027c7e:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 8027c82:	4601      	mov	r1, r0
    lv_textarea_set_cursor_pos(obj, new_cur_pos);
 8027c84:	4620      	mov	r0, r4
 8027c86:	f7f0 faa3 	bl	80181d0 <lv_textarea_set_cursor_pos>
    ta->cursor.valid_x = cur_valid_x_tmp;
 8027c8a:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
 8027c8e:	b003      	add	sp, #12
 8027c90:	bd30      	pop	{r4, r5, pc}

08027c92 <lvgl_flush_cb_mono>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_mono(lv_disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
 8027c92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t w = area->x2 - area->x1 + 1;
 8027c96:	888b      	ldrh	r3, [r1, #4]
{
 8027c98:	4693      	mov	fp, r2
	uint16_t h = area->y2 - area->y1 + 1;
 8027c9a:	88ce      	ldrh	r6, [r1, #6]
{
 8027c9c:	b089      	sub	sp, #36	; 0x24
	uint16_t w = area->x2 - area->x1 + 1;
 8027c9e:	880a      	ldrh	r2, [r1, #0]
 8027ca0:	3301      	adds	r3, #1
	struct lvgl_disp_data *data =
 8027ca2:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
	uint16_t h = area->y2 - area->y1 + 1;
 8027ca4:	3601      	adds	r6, #1
	uint16_t w = area->x2 - area->x1 + 1;
 8027ca6:	1a9b      	subs	r3, r3, r2
	uint16_t h = area->y2 - area->y1 + 1;
 8027ca8:	884a      	ldrh	r2, [r1, #2]
{
 8027caa:	4680      	mov	r8, r0
 8027cac:	460c      	mov	r4, r1
	uint16_t h = area->y2 - area->y1 + 1;
 8027cae:	1ab6      	subs	r6, r6, r2
		(struct lvgl_disp_data *)disp_drv->user_data;
	const struct device *display_dev = data->display_dev;
	struct display_buffer_descriptor desc;
	const bool is_epd = data->cap.screen_info & SCREEN_INFO_EPD;
 8027cb0:	68fa      	ldr	r2, [r7, #12]
	uint16_t w = area->x2 - area->x1 + 1;
 8027cb2:	fa1f f983 	uxth.w	r9, r3
	const struct device *display_dev = data->display_dev;
 8027cb6:	683d      	ldr	r5, [r7, #0]
	const bool is_epd = data->cap.screen_info & SCREEN_INFO_EPD;
 8027cb8:	f002 0a04 	and.w	sl, r2, #4
	uint16_t h = area->y2 - area->y1 + 1;
 8027cbc:	b2b6      	uxth	r6, r6
	const bool is_last = lv_disp_flush_is_last(disp_drv);
 8027cbe:	f7fc fa3b 	bl	8024138 <lv_disp_flush_is_last>
 8027cc2:	9003      	str	r0, [sp, #12]

	if (is_epd && !data->blanking_on && !is_last) {
 8027cc4:	f1ba 0f00 	cmp.w	sl, #0
 8027cc8:	d008      	beq.n	8027cdc <lvgl_flush_cb_mono+0x4a>
 8027cca:	7d3a      	ldrb	r2, [r7, #20]
 8027ccc:	b932      	cbnz	r2, 8027cdc <lvgl_flush_cb_mono+0x4a>
 8027cce:	b928      	cbnz	r0, 8027cdc <lvgl_flush_cb_mono+0x4a>
	return api->blanking_on(dev);
 8027cd0:	68aa      	ldr	r2, [r5, #8]
 8027cd2:	4628      	mov	r0, r5
 8027cd4:	6812      	ldr	r2, [r2, #0]
 8027cd6:	4790      	blx	r2
		 * display. This prevents updates and the associated
		 * flicker if the screen is rendered in multiple
		 * steps.
		 */
		display_blanking_on(display_dev);
		data->blanking_on = true;
 8027cd8:	2201      	movs	r2, #1
 8027cda:	753a      	strb	r2, [r7, #20]
	}

	desc.buf_size = (w * h)/8U;
 8027cdc:	fb06 f209 	mul.w	r2, r6, r9
	return api->write(dev, x, y, desc, buf);
 8027ce0:	4628      	mov	r0, r5
	desc.width = w;
	desc.pitch = w;
 8027ce2:	f8ad 901c 	strh.w	r9, [sp, #28]
	desc.buf_size = (w * h)/8U;
 8027ce6:	08d2      	lsrs	r2, r2, #3
 8027ce8:	68ab      	ldr	r3, [r5, #8]
	desc.height = h;
 8027cea:	f8ad 601a 	strh.w	r6, [sp, #26]
 8027cee:	f8cd b000 	str.w	fp, [sp]
	desc.buf_size = (w * h)/8U;
 8027cf2:	9205      	str	r2, [sp, #20]
 8027cf4:	689e      	ldr	r6, [r3, #8]
 8027cf6:	ab05      	add	r3, sp, #20
 8027cf8:	8862      	ldrh	r2, [r4, #2]
 8027cfa:	8821      	ldrh	r1, [r4, #0]
	desc.width = w;
 8027cfc:	f8ad 9018 	strh.w	r9, [sp, #24]
 8027d00:	47b0      	blx	r6
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);
	if (data->cap.screen_info & SCREEN_INFO_DOUBLE_BUFFER) {
 8027d02:	68fb      	ldr	r3, [r7, #12]
 8027d04:	071b      	lsls	r3, r3, #28
 8027d06:	d508      	bpl.n	8027d1a <lvgl_flush_cb_mono+0x88>
 8027d08:	68ab      	ldr	r3, [r5, #8]
 8027d0a:	4628      	mov	r0, r5
 8027d0c:	f8cd b000 	str.w	fp, [sp]
 8027d10:	689e      	ldr	r6, [r3, #8]
 8027d12:	ab05      	add	r3, sp, #20
 8027d14:	8862      	ldrh	r2, [r4, #2]
 8027d16:	8821      	ldrh	r1, [r4, #0]
 8027d18:	47b0      	blx	r6
		display_write(display_dev, area->x1, area->y1, &desc,
				(void *) color_p);
	}

	if (is_epd && is_last && data->blanking_on) {
 8027d1a:	f1ba 0f00 	cmp.w	sl, #0
 8027d1e:	d009      	beq.n	8027d34 <lvgl_flush_cb_mono+0xa2>
 8027d20:	9b03      	ldr	r3, [sp, #12]
 8027d22:	b13b      	cbz	r3, 8027d34 <lvgl_flush_cb_mono+0xa2>
 8027d24:	7d3b      	ldrb	r3, [r7, #20]
 8027d26:	b12b      	cbz	r3, 8027d34 <lvgl_flush_cb_mono+0xa2>
	return api->blanking_off(dev);
 8027d28:	68ab      	ldr	r3, [r5, #8]
 8027d2a:	4628      	mov	r0, r5
 8027d2c:	685b      	ldr	r3, [r3, #4]
 8027d2e:	4798      	blx	r3
		/*
		 * The entire screen has now been rendered. Update the
		 * display by disabling blanking.
		 */
		display_blanking_off(display_dev);
		data->blanking_on = false;
 8027d30:	2300      	movs	r3, #0
 8027d32:	753b      	strb	r3, [r7, #20]
	}

	lv_disp_flush_ready(disp_drv);
 8027d34:	4640      	mov	r0, r8
 8027d36:	f7fc f9f9 	bl	802412c <lv_disp_flush_ready>
}
 8027d3a:	b009      	add	sp, #36	; 0x24
 8027d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027d40 <lvgl_set_px_cb_mono>:


void lvgl_set_px_cb_mono(lv_disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
 8027d40:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lvgl_disp_data *data =
 8027d42:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
 8027d44:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
		(struct lvgl_disp_data *)disp_drv->user_data;
	uint8_t *buf_xy;
	uint8_t bit;

	if (data->cap.screen_info & SCREEN_INFO_MONO_VTILED) {
 8027d48:	68c6      	ldr	r6, [r0, #12]
 8027d4a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
		buf_xy = buf + x + y/8 * buf_w;

		if (data->cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
 8027d4e:	f006 0702 	and.w	r7, r6, #2
	if (data->cap.screen_info & SCREEN_INFO_MONO_VTILED) {
 8027d52:	07f6      	lsls	r6, r6, #31
 8027d54:	d51f      	bpl.n	8027d96 <lvgl_set_px_cb_mono+0x56>
		buf_xy = buf + x + y/8 * buf_w;
 8027d56:	2c00      	cmp	r4, #0
 8027d58:	4626      	mov	r6, r4
 8027d5a:	bfb8      	it	lt
 8027d5c:	1de6      	addlt	r6, r4, #7
 8027d5e:	10f6      	asrs	r6, r6, #3
 8027d60:	fb16 3202 	smlabb	r2, r6, r2, r3
			bit = 7 - y%8;
 8027d64:	4263      	negs	r3, r4
 8027d66:	f004 0407 	and.w	r4, r4, #7
 8027d6a:	f003 0307 	and.w	r3, r3, #7
		buf_xy = buf + x + y/8 * buf_w;
 8027d6e:	4411      	add	r1, r2
			bit = 7 - y%8;
 8027d70:	bf58      	it	pl
 8027d72:	425c      	negpl	r4, r3
 8027d74:	b2e3      	uxtb	r3, r4
			bit = y%8;
		}
	} else {
		buf_xy = buf + x/8 + y * buf_w/8;

		if (data->cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
 8027d76:	b117      	cbz	r7, 8027d7e <lvgl_set_px_cb_mono+0x3e>
			bit = 7 - x%8;
 8027d78:	f1c3 0307 	rsb	r3, r3, #7
 8027d7c:	b2db      	uxtb	r3, r3
		}
	}

	if (data->cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
		if (color.full == 0) {
			*buf_xy &= ~BIT(bit);
 8027d7e:	2401      	movs	r4, #1
	if (data->cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
 8027d80:	7c00      	ldrb	r0, [r0, #16]
			*buf_xy &= ~BIT(bit);
 8027d82:	780a      	ldrb	r2, [r1, #0]
 8027d84:	fa04 f303 	lsl.w	r3, r4, r3
	if (data->cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
 8027d88:	2804      	cmp	r0, #4
			*buf_xy &= ~BIT(bit);
 8027d8a:	b2db      	uxtb	r3, r3
	if (data->cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
 8027d8c:	d118      	bne.n	8027dc0 <lvgl_set_px_cb_mono+0x80>
		if (color.full == 0) {
 8027d8e:	b9cd      	cbnz	r5, 8027dc4 <lvgl_set_px_cb_mono+0x84>
		}
	} else {
		if (color.full == 0) {
			*buf_xy |= BIT(bit);
		} else {
			*buf_xy &= ~BIT(bit);
 8027d90:	ea22 0303 	bic.w	r3, r2, r3
 8027d94:	e017      	b.n	8027dc6 <lvgl_set_px_cb_mono+0x86>
		buf_xy = buf + x/8 + y * buf_w/8;
 8027d96:	4354      	muls	r4, r2
 8027d98:	461a      	mov	r2, r3
 8027d9a:	bf48      	it	mi
 8027d9c:	3407      	addmi	r4, #7
 8027d9e:	2b00      	cmp	r3, #0
 8027da0:	ea4f 04e4 	mov.w	r4, r4, asr #3
 8027da4:	bfb8      	it	lt
 8027da6:	1dda      	addlt	r2, r3, #7
 8027da8:	eb04 04e2 	add.w	r4, r4, r2, asr #3
			bit = 7 - x%8;
 8027dac:	425a      	negs	r2, r3
 8027dae:	f003 0307 	and.w	r3, r3, #7
 8027db2:	f002 0207 	and.w	r2, r2, #7
		buf_xy = buf + x/8 + y * buf_w/8;
 8027db6:	4421      	add	r1, r4
			bit = 7 - x%8;
 8027db8:	bf58      	it	pl
 8027dba:	4253      	negpl	r3, r2
 8027dbc:	b2db      	uxtb	r3, r3
 8027dbe:	e7da      	b.n	8027d76 <lvgl_set_px_cb_mono+0x36>
		if (color.full == 0) {
 8027dc0:	2d00      	cmp	r5, #0
 8027dc2:	d1e5      	bne.n	8027d90 <lvgl_set_px_cb_mono+0x50>
			*buf_xy |= BIT(bit);
 8027dc4:	4313      	orrs	r3, r2
			*buf_xy |= BIT(bit);
 8027dc6:	700b      	strb	r3, [r1, #0]
		}
	}
}
 8027dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027dca <lvgl_rounder_cb_mono>:

void lvgl_rounder_cb_mono(lv_disp_drv_t *disp_drv,
		lv_area_t *area)
{
	struct lvgl_disp_data *data =
 8027dca:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
		(struct lvgl_disp_data *)disp_drv->user_data;

	if (data->cap.screen_info & SCREEN_INFO_X_ALIGNMENT_WIDTH) {
 8027dcc:	68d3      	ldr	r3, [r2, #12]
 8027dce:	06d8      	lsls	r0, r3, #27
 8027dd0:	d505      	bpl.n	8027dde <lvgl_rounder_cb_mono+0x14>
		area->x1 = 0;
 8027dd2:	2300      	movs	r3, #0
 8027dd4:	800b      	strh	r3, [r1, #0]
		area->x2 = data->cap.x_resolution - 1;
 8027dd6:	8893      	ldrh	r3, [r2, #4]
 8027dd8:	3b01      	subs	r3, #1
		if (data->cap.screen_info & SCREEN_INFO_MONO_VTILED) {
			area->y1 &= ~0x7;
			area->y2 |= 0x7;
		} else {
			area->x1 &= ~0x7;
			area->x2 |= 0x7;
 8027dda:	808b      	strh	r3, [r1, #4]
		}
	}
}
 8027ddc:	4770      	bx	lr
		if (data->cap.screen_info & SCREEN_INFO_MONO_VTILED) {
 8027dde:	07db      	lsls	r3, r3, #31
 8027de0:	d508      	bpl.n	8027df4 <lvgl_rounder_cb_mono+0x2a>
			area->y1 &= ~0x7;
 8027de2:	884b      	ldrh	r3, [r1, #2]
 8027de4:	f023 0307 	bic.w	r3, r3, #7
 8027de8:	804b      	strh	r3, [r1, #2]
			area->y2 |= 0x7;
 8027dea:	88cb      	ldrh	r3, [r1, #6]
 8027dec:	f043 0307 	orr.w	r3, r3, #7
 8027df0:	80cb      	strh	r3, [r1, #6]
 8027df2:	4770      	bx	lr
			area->x1 &= ~0x7;
 8027df4:	880b      	ldrh	r3, [r1, #0]
 8027df6:	f023 0307 	bic.w	r3, r3, #7
 8027dfa:	800b      	strh	r3, [r1, #0]
			area->x2 |= 0x7;
 8027dfc:	888b      	ldrh	r3, [r1, #4]
 8027dfe:	f043 0307 	orr.w	r3, r3, #7
 8027e02:	e7ea      	b.n	8027dda <lvgl_rounder_cb_mono+0x10>

08027e04 <lvgl_flush_cb_16bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_16bit(lv_disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
 8027e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027e06:	460c      	mov	r4, r1
	struct lvgl_disp_data *data =
		(struct lvgl_disp_data *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
 8027e08:	8809      	ldrh	r1, [r1, #0]
{
 8027e0a:	b087      	sub	sp, #28
 8027e0c:	4605      	mov	r5, r0
	uint16_t h = area->y2 - area->y1 + 1;
 8027e0e:	8867      	ldrh	r7, [r4, #2]
	uint16_t w = area->x2 - area->x1 + 1;
 8027e10:	88a3      	ldrh	r3, [r4, #4]
	uint16_t h = area->y2 - area->y1 + 1;
 8027e12:	88e4      	ldrh	r4, [r4, #6]
	uint16_t w = area->x2 - area->x1 + 1;
 8027e14:	3301      	adds	r3, #1
	struct lvgl_disp_data *data =
 8027e16:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	uint16_t h = area->y2 - area->y1 + 1;
 8027e18:	3401      	adds	r4, #1
	uint16_t w = area->x2 - area->x1 + 1;
 8027e1a:	1a5b      	subs	r3, r3, r1
	uint16_t h = area->y2 - area->y1 + 1;
 8027e1c:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
 8027e1e:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
 8027e20:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 2U * h;
	desc.width = w;
	desc.pitch = w;
 8027e22:	f8ad 3014 	strh.w	r3, [sp, #20]
	desc.buf_size = w * 2U * h;
 8027e26:	fb04 f603 	mul.w	r6, r4, r3
	desc.width = w;
 8027e2a:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.buf_size = w * 2U * h;
 8027e2e:	0076      	lsls	r6, r6, #1
	desc.height = h;
 8027e30:	f8ad 4012 	strh.w	r4, [sp, #18]
	desc.buf_size = w * 2U * h;
 8027e34:	9603      	str	r6, [sp, #12]
	display_write(data->display_dev, area->x1, area->y1, &desc,
 8027e36:	6800      	ldr	r0, [r0, #0]
	return api->write(dev, x, y, desc, buf);
 8027e38:	6883      	ldr	r3, [r0, #8]
 8027e3a:	9200      	str	r2, [sp, #0]
 8027e3c:	463a      	mov	r2, r7
 8027e3e:	689c      	ldr	r4, [r3, #8]
 8027e40:	ab03      	add	r3, sp, #12
 8027e42:	47a0      	blx	r4
		      (void *) color_p);

	lv_disp_flush_ready(disp_drv);
 8027e44:	4628      	mov	r0, r5
 8027e46:	f7fc f971 	bl	802412c <lv_disp_flush_ready>
}
 8027e4a:	b007      	add	sp, #28
 8027e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027e4e <lvgl_flush_cb_24bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_24bit(lv_disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
 8027e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027e50:	460c      	mov	r4, r1
	struct lvgl_disp_data *data =
		(struct lvgl_disp_data *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
 8027e52:	8809      	ldrh	r1, [r1, #0]
{
 8027e54:	b087      	sub	sp, #28
 8027e56:	4605      	mov	r5, r0
	uint16_t h = area->y2 - area->y1 + 1;
 8027e58:	8867      	ldrh	r7, [r4, #2]
	uint16_t w = area->x2 - area->x1 + 1;
 8027e5a:	88a3      	ldrh	r3, [r4, #4]
	uint16_t h = area->y2 - area->y1 + 1;
 8027e5c:	88e4      	ldrh	r4, [r4, #6]
	uint16_t w = area->x2 - area->x1 + 1;
 8027e5e:	3301      	adds	r3, #1
	struct lvgl_disp_data *data =
 8027e60:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	uint16_t h = area->y2 - area->y1 + 1;
 8027e62:	3401      	adds	r4, #1
	uint16_t w = area->x2 - area->x1 + 1;
 8027e64:	1a5b      	subs	r3, r3, r1
	uint16_t h = area->y2 - area->y1 + 1;
 8027e66:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
 8027e68:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
 8027e6a:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 3U * h;
	desc.width = w;
	desc.pitch = w;
 8027e6c:	f8ad 3014 	strh.w	r3, [sp, #20]
	desc.buf_size = w * 3U * h;
 8027e70:	fb04 f603 	mul.w	r6, r4, r3
	desc.width = w;
 8027e74:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.buf_size = w * 3U * h;
 8027e78:	eb06 0646 	add.w	r6, r6, r6, lsl #1
	desc.height = h;
 8027e7c:	f8ad 4012 	strh.w	r4, [sp, #18]
	desc.buf_size = w * 3U * h;
 8027e80:	9603      	str	r6, [sp, #12]
	display_write(data->display_dev, area->x1, area->y1, &desc,
 8027e82:	6800      	ldr	r0, [r0, #0]
 8027e84:	6883      	ldr	r3, [r0, #8]
 8027e86:	9200      	str	r2, [sp, #0]
 8027e88:	463a      	mov	r2, r7
 8027e8a:	689c      	ldr	r4, [r3, #8]
 8027e8c:	ab03      	add	r3, sp, #12
 8027e8e:	47a0      	blx	r4
		      (void *) color_p);

	lv_disp_flush_ready(disp_drv);
 8027e90:	4628      	mov	r0, r5
 8027e92:	f7fc f94b 	bl	802412c <lv_disp_flush_ready>
}
 8027e96:	b007      	add	sp, #28
 8027e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027e9a <lvgl_set_px_cb_24bit>:

void lvgl_set_px_cb_24bit(lv_disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
 8027e9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027e9c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8027ea0:	f240 1707 	movw	r7, #263	; 0x107
	uint8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
 8027ea4:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8027ea8:	f3c0 1645 	ubfx	r6, r0, #5, #6
 8027eac:	fb04 3302 	mla	r3, r4, r2, r3
 8027eb0:	f000 021f 	and.w	r2, r0, #31
 8027eb4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8027eb8:	2400      	movs	r4, #0
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8027eba:	437a      	muls	r2, r7
 8027ebc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8027ec0:	4378      	muls	r0, r7
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8027ec2:	3207      	adds	r2, #7
 8027ec4:	18cd      	adds	r5, r1, r3
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8027ec6:	3007      	adds	r0, #7
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8027ec8:	1152      	asrs	r2, r2, #5
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8027eca:	1140      	asrs	r0, r0, #5
 8027ecc:	f360 4417 	bfi	r4, r0, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8027ed0:	f240 1003 	movw	r0, #259	; 0x103
 8027ed4:	4370      	muls	r0, r6
 8027ed6:	3003      	adds	r0, #3
 8027ed8:	1180      	asrs	r0, r0, #6
 8027eda:	f360 240f 	bfi	r4, r0, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8027ede:	f362 0407 	bfi	r4, r2, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 8027ee2:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
		color = lv_color_mix(color, mix_color, opa);
	}
#endif

	converted_color.full = lv_color_to32(color);
	*buf_xy = converted_color.ch.red;
 8027ee6:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8027eea:	54ca      	strb	r2, [r1, r3]
	*(buf_xy + 1) = converted_color.ch.green;
 8027eec:	f3c4 2307 	ubfx	r3, r4, #8, #8
	*(buf_xy + 2) = converted_color.ch.blue;
 8027ef0:	70ac      	strb	r4, [r5, #2]
	*(buf_xy + 1) = converted_color.ch.green;
 8027ef2:	706b      	strb	r3, [r5, #1]
}
 8027ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027ef6 <lv_color_to32>:
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8027ef6:	f240 1107 	movw	r1, #263	; 0x107
 8027efa:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8027efe:	2200      	movs	r2, #0
 8027f00:	434b      	muls	r3, r1
 8027f02:	3307      	adds	r3, #7
 8027f04:	115b      	asrs	r3, r3, #5
{
 8027f06:	b510      	push	{r4, lr}
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8027f08:	f363 4217 	bfi	r2, r3, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8027f0c:	f240 1403 	movw	r4, #259	; 0x103
 8027f10:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8027f14:	4363      	muls	r3, r4
 8027f16:	3303      	adds	r3, #3
 8027f18:	119b      	asrs	r3, r3, #6
 8027f1a:	f363 220f 	bfi	r2, r3, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8027f1e:	f000 031f 	and.w	r3, r0, #31
 8027f22:	434b      	muls	r3, r1
 8027f24:	3307      	adds	r3, #7
 8027f26:	115b      	asrs	r3, r3, #5
 8027f28:	f363 0207 	bfi	r2, r3, #0, #8
}
 8027f2c:	f042 407f 	orr.w	r0, r2, #4278190080	; 0xff000000
 8027f30:	bd10      	pop	{r4, pc}

08027f32 <lvgl_flush_cb_32bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_32bit(lv_disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
 8027f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027f34:	460c      	mov	r4, r1
	struct lvgl_disp_data *data =
		(struct lvgl_disp_data *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
 8027f36:	8809      	ldrh	r1, [r1, #0]
{
 8027f38:	b087      	sub	sp, #28
 8027f3a:	4605      	mov	r5, r0
	uint16_t h = area->y2 - area->y1 + 1;
 8027f3c:	8867      	ldrh	r7, [r4, #2]
	uint16_t w = area->x2 - area->x1 + 1;
 8027f3e:	88a3      	ldrh	r3, [r4, #4]
	uint16_t h = area->y2 - area->y1 + 1;
 8027f40:	88e4      	ldrh	r4, [r4, #6]
	uint16_t w = area->x2 - area->x1 + 1;
 8027f42:	3301      	adds	r3, #1
	struct lvgl_disp_data *data =
 8027f44:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	uint16_t h = area->y2 - area->y1 + 1;
 8027f46:	3401      	adds	r4, #1
	uint16_t w = area->x2 - area->x1 + 1;
 8027f48:	1a5b      	subs	r3, r3, r1
	uint16_t h = area->y2 - area->y1 + 1;
 8027f4a:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
 8027f4c:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
 8027f4e:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 4U * h;
	desc.width = w;
	desc.pitch = w;
 8027f50:	f8ad 3014 	strh.w	r3, [sp, #20]
	desc.buf_size = w * 4U * h;
 8027f54:	fb04 f603 	mul.w	r6, r4, r3
	desc.width = w;
 8027f58:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.buf_size = w * 4U * h;
 8027f5c:	00b6      	lsls	r6, r6, #2
	desc.height = h;
 8027f5e:	f8ad 4012 	strh.w	r4, [sp, #18]
	desc.buf_size = w * 4U * h;
 8027f62:	9603      	str	r6, [sp, #12]
	display_write(data->display_dev, area->x1, area->y1, &desc,
 8027f64:	6800      	ldr	r0, [r0, #0]
 8027f66:	6883      	ldr	r3, [r0, #8]
 8027f68:	9200      	str	r2, [sp, #0]
 8027f6a:	463a      	mov	r2, r7
 8027f6c:	689c      	ldr	r4, [r3, #8]
 8027f6e:	ab03      	add	r3, sp, #12
 8027f70:	47a0      	blx	r4
		      (void *) color_p);

	lv_disp_flush_ready(disp_drv);
 8027f72:	4628      	mov	r0, r5
 8027f74:	f7fc f8da 	bl	802412c <lv_disp_flush_ready>
}
 8027f78:	b007      	add	sp, #28
 8027f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027f7c <lvgl_set_px_cb_32bit>:

#ifndef CONFIG_LV_COLOR_DEPTH_32
void lvgl_set_px_cb_32bit(lv_disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
 8027f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027f7e:	460d      	mov	r5, r1
	uint32_t *buf_xy = (uint32_t *)(buf + x * 4U + y * 4U * buf_w);
 8027f80:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
{
 8027f84:	f89d 1020 	ldrb.w	r1, [sp, #32]
	uint32_t *buf_xy = (uint32_t *)(buf + x * 4U + y * 4U * buf_w);
 8027f88:	fb04 3602 	mla	r6, r4, r2, r3
{
 8027f8c:	f8bd 001c 	ldrh.w	r0, [sp, #28]

	if (opa == LV_OPA_COVER) {
 8027f90:	29ff      	cmp	r1, #255	; 0xff
	uint32_t *buf_xy = (uint32_t *)(buf + x * 4U + y * 4U * buf_w);
 8027f92:	eb05 0786 	add.w	r7, r5, r6, lsl #2
	if (opa == LV_OPA_COVER) {
 8027f96:	d104      	bne.n	8027fa2 <lvgl_set_px_cb_32bit+0x26>
		/* Do not mix if not required */
		*buf_xy = lv_color_to32(color);
	} else {
		lv_color_t bg_color = *((lv_color_t *)buf_xy);
		*buf_xy = lv_color_to32(lv_color_mix(color, bg_color, opa));
 8027f98:	f7ff ffad 	bl	8027ef6 <lv_color_to32>
		*buf_xy = lv_color_to32(color);
 8027f9c:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
	}
}
 8027fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		lv_color_t bg_color = *((lv_color_t *)buf_xy);
 8027fa2:	f835 c026 	ldrh.w	ip, [r5, r6, lsl #2]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8027fa6:	f1c1 02ff 	rsb	r2, r1, #255	; 0xff
 8027faa:	f815 4026 	ldrb.w	r4, [r5, r6, lsl #2]
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8027fae:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8027fb2:	f3cc 1c45 	ubfx	ip, ip, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8027fb6:	f000 0e1f 	and.w	lr, r0, #31
 8027fba:	f004 041f 	and.w	r4, r4, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8027fbe:	fb02 fc0c 	mul.w	ip, r2, ip
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8027fc2:	4354      	muls	r4, r2
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8027fc4:	fb03 cc01 	mla	ip, r3, r1, ip
 8027fc8:	f248 0381 	movw	r3, #32897	; 0x8081
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8027fcc:	fb0e 4401 	mla	r4, lr, r1, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8027fd0:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8027fd4:	3480      	adds	r4, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8027fd6:	fb03 fc0c 	mul.w	ip, r3, ip
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8027fda:	435c      	muls	r4, r3
 8027fdc:	f3cc 5cc5 	ubfx	ip, ip, #23, #6
 8027fe0:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 8027fe4:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8027fe8:	f3c0 2cc4 	ubfx	ip, r0, #11, #5
 8027fec:	7878      	ldrb	r0, [r7, #1]
 8027fee:	08c0      	lsrs	r0, r0, #3
 8027ff0:	4350      	muls	r0, r2
 8027ff2:	fb0c 0001 	mla	r0, ip, r1, r0
 8027ff6:	3080      	adds	r0, #128	; 0x80
 8027ff8:	4358      	muls	r0, r3
 8027ffa:	0dc0      	lsrs	r0, r0, #23
		*buf_xy = lv_color_to32(lv_color_mix(color, bg_color, opa));
 8027ffc:	ea44 20c0 	orr.w	r0, r4, r0, lsl #11
 8028000:	e7ca      	b.n	8027f98 <lvgl_set_px_cb_32bit+0x1c>

08028002 <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		z_object_init(dev);
	}
}
 8028002:	4770      	bx	lr

08028004 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8028004:	b140      	cbz	r0, 8028018 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8028006:	68c3      	ldr	r3, [r0, #12]
 8028008:	7858      	ldrb	r0, [r3, #1]
 802800a:	f010 0001 	ands.w	r0, r0, #1
 802800e:	bf1e      	ittt	ne
 8028010:	7818      	ldrbne	r0, [r3, #0]
 8028012:	fab0 f080 	clzne	r0, r0
 8028016:	0940      	lsrne	r0, r0, #5
}
 8028018:	4770      	bx	lr

0802801a <arch_system_halt>:
	__asm__ volatile(
 802801a:	f04f 0210 	mov.w	r2, #16
 802801e:	f3ef 8311 	mrs	r3, BASEPRI
 8028022:	f382 8812 	msr	BASEPRI_MAX, r2
 8028026:	f3bf 8f6f 	isb	sy
	for (;;) {
 802802a:	e7fe      	b.n	802802a <arch_system_halt+0x10>

0802802c <z_early_memset>:
	(void) memset(dst, c, n);
 802802c:	f7f2 bbac 	b.w	801a788 <memset>

08028030 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8028030:	f7f2 bb9f 	b.w	801a772 <memcpy>

08028034 <k_is_in_isr>:
 8028034:	f3ef 8005 	mrs	r0, IPSR
}
 8028038:	3800      	subs	r0, #0
 802803a:	bf18      	it	ne
 802803c:	2001      	movne	r0, #1
 802803e:	4770      	bx	lr

08028040 <z_impl_k_thread_name_set>:
}
 8028040:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8028044:	4770      	bx	lr

08028046 <k_thread_name_get>:
}
 8028046:	2000      	movs	r0, #0
 8028048:	4770      	bx	lr

0802804a <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
 802804a:	b508      	push	{r3, lr}
 802804c:	f04f 0210 	mov.w	r2, #16
 8028050:	f3ef 8311 	mrs	r3, BASEPRI
 8028054:	f382 8812 	msr	BASEPRI_MAX, r2
 8028058:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 802805c:	f7da f8b2 	bl	80021c4 <arch_cpu_idle>
 8028060:	e7f4      	b.n	802804c <idle+0x2>

08028062 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8028062:	b13a      	cbz	r2, 8028074 <z_impl_k_sem_init+0x12>
 8028064:	428a      	cmp	r2, r1
 8028066:	d305      	bcc.n	8028074 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 8028068:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 802806c:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 8028070:	2000      	movs	r0, #0
 8028072:	4770      	bx	lr
		return -EINVAL;
 8028074:	f06f 0015 	mvn.w	r0, #21
}
 8028078:	4770      	bx	lr

0802807a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 802807a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 802807e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8028080:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8028082:	2300      	movs	r3, #0
	node->prev = NULL;
 8028084:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8028088:	4770      	bx	lr

0802808a <unpend_thread_no_timeout>:
{
 802808a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 802808c:	f7ff fff5 	bl	802807a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8028090:	7b43      	ldrb	r3, [r0, #13]
 8028092:	f023 0302 	bic.w	r3, r3, #2
 8028096:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8028098:	2300      	movs	r3, #0
 802809a:	6083      	str	r3, [r0, #8]
}
 802809c:	bd08      	pop	{r3, pc}

0802809e <add_to_waitq_locked>:
{
 802809e:	b538      	push	{r3, r4, r5, lr}
 80280a0:	4604      	mov	r4, r0
 80280a2:	460d      	mov	r5, r1
	unready_thread(thread);
 80280a4:	f7f1 f9e4 	bl	8019470 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 80280a8:	7b63      	ldrb	r3, [r4, #13]
 80280aa:	f043 0302 	orr.w	r3, r3, #2
 80280ae:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 80280b0:	b1e5      	cbz	r5, 80280ec <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
 80280b2:	60a5      	str	r5, [r4, #8]
	return list->head == list;
 80280b4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80280b6:	429d      	cmp	r5, r3
 80280b8:	d109      	bne.n	80280ce <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
 80280ba:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 80280bc:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 80280c0:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80280c2:	606c      	str	r4, [r5, #4]
}
 80280c4:	e012      	b.n	80280ec <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
 80280c6:	686a      	ldr	r2, [r5, #4]
 80280c8:	4293      	cmp	r3, r2
 80280ca:	d0f6      	beq.n	80280ba <add_to_waitq_locked+0x1c>
 80280cc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80280ce:	2b00      	cmp	r3, #0
 80280d0:	d0f3      	beq.n	80280ba <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
 80280d2:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 80280d6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 80280da:	428a      	cmp	r2, r1
 80280dc:	d0f3      	beq.n	80280c6 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80280de:	4291      	cmp	r1, r2
 80280e0:	ddf1      	ble.n	80280c6 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
 80280e2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80280e4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 80280e8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80280ea:	605c      	str	r4, [r3, #4]
}
 80280ec:	bd38      	pop	{r3, r4, r5, pc}

080280ee <z_ready_thread>:
{
 80280ee:	b510      	push	{r4, lr}
 80280f0:	f04f 0310 	mov.w	r3, #16
 80280f4:	f3ef 8411 	mrs	r4, BASEPRI
 80280f8:	f383 8812 	msr	BASEPRI_MAX, r3
 80280fc:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8028100:	f7f1 f982 	bl	8019408 <ready_thread>
	__asm__ volatile(
 8028104:	f384 8811 	msr	BASEPRI, r4
 8028108:	f3bf 8f6f 	isb	sy
}
 802810c:	bd10      	pop	{r4, pc}

0802810e <z_unpend_thread_no_timeout>:
{
 802810e:	b508      	push	{r3, lr}
	__asm__ volatile(
 8028110:	f04f 0210 	mov.w	r2, #16
 8028114:	f3ef 8111 	mrs	r1, BASEPRI
 8028118:	f382 8812 	msr	BASEPRI_MAX, r2
 802811c:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
 8028120:	6883      	ldr	r3, [r0, #8]
 8028122:	b10b      	cbz	r3, 8028128 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
 8028124:	f7ff ffb1 	bl	802808a <unpend_thread_no_timeout>
	__asm__ volatile(
 8028128:	f381 8811 	msr	BASEPRI, r1
 802812c:	f3bf 8f6f 	isb	sy
}
 8028130:	bd08      	pop	{r3, pc}

08028132 <z_sched_wake_thread>:
{
 8028132:	b538      	push	{r3, r4, r5, lr}
 8028134:	4604      	mov	r4, r0
	__asm__ volatile(
 8028136:	f04f 0310 	mov.w	r3, #16
 802813a:	f3ef 8511 	mrs	r5, BASEPRI
 802813e:	f383 8812 	msr	BASEPRI_MAX, r3
 8028142:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8028146:	7b43      	ldrb	r3, [r0, #13]
 8028148:	f013 0f28 	tst.w	r3, #40	; 0x28
 802814c:	d10b      	bne.n	8028166 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
 802814e:	6883      	ldr	r3, [r0, #8]
 8028150:	b10b      	cbz	r3, 8028156 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
 8028152:	f7ff ff9a 	bl	802808a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8028156:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
 8028158:	b951      	cbnz	r1, 8028170 <z_sched_wake_thread+0x3e>
 802815a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
 802815e:	4620      	mov	r0, r4
 8028160:	7363      	strb	r3, [r4, #13]
 8028162:	f7f1 f951 	bl	8019408 <ready_thread>
	__asm__ volatile(
 8028166:	f385 8811 	msr	BASEPRI, r5
 802816a:	f3bf 8f6f 	isb	sy
}
 802816e:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8028170:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
 8028174:	e7f3      	b.n	802815e <z_sched_wake_thread+0x2c>

08028176 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
 8028176:	2101      	movs	r1, #1
 8028178:	3818      	subs	r0, #24
 802817a:	f7ff bfda 	b.w	8028132 <z_sched_wake_thread>

0802817e <z_unpend1_no_timeout>:
{
 802817e:	b508      	push	{r3, lr}
 8028180:	4603      	mov	r3, r0
	__asm__ volatile(
 8028182:	f04f 0210 	mov.w	r2, #16
 8028186:	f3ef 8111 	mrs	r1, BASEPRI
 802818a:	f382 8812 	msr	BASEPRI_MAX, r2
 802818e:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8028192:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8028194:	4283      	cmp	r3, r0
 8028196:	d007      	beq.n	80281a8 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
 8028198:	b108      	cbz	r0, 802819e <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
 802819a:	f7ff ff76 	bl	802808a <unpend_thread_no_timeout>
	__asm__ volatile(
 802819e:	f381 8811 	msr	BASEPRI, r1
 80281a2:	f3bf 8f6f 	isb	sy
}
 80281a6:	bd08      	pop	{r3, pc}
 80281a8:	2000      	movs	r0, #0
 80281aa:	e7f8      	b.n	802819e <z_unpend1_no_timeout+0x20>

080281ac <z_unpend_first_thread>:
{
 80281ac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80281ae:	f04f 0310 	mov.w	r3, #16
 80281b2:	f3ef 8511 	mrs	r5, BASEPRI
 80281b6:	f383 8812 	msr	BASEPRI_MAX, r3
 80281ba:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80281be:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80281c0:	42a0      	cmp	r0, r4
 80281c2:	d00d      	beq.n	80281e0 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
 80281c4:	b134      	cbz	r4, 80281d4 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
 80281c6:	4620      	mov	r0, r4
 80281c8:	f7ff ff5f 	bl	802808a <unpend_thread_no_timeout>
 80281cc:	f104 0018 	add.w	r0, r4, #24
 80281d0:	f000 f81e 	bl	8028210 <z_abort_timeout>
	__asm__ volatile(
 80281d4:	f385 8811 	msr	BASEPRI, r5
 80281d8:	f3bf 8f6f 	isb	sy
}
 80281dc:	4620      	mov	r0, r4
 80281de:	bd38      	pop	{r3, r4, r5, pc}
 80281e0:	2400      	movs	r4, #0
 80281e2:	e7f7      	b.n	80281d4 <z_unpend_first_thread+0x28>

080281e4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80281e4:	4603      	mov	r3, r0
 80281e6:	b920      	cbnz	r0, 80281f2 <z_reschedule_irqlock+0xe>
 80281e8:	f3ef 8205 	mrs	r2, IPSR
 80281ec:	b90a      	cbnz	r2, 80281f2 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 80281ee:	f7da b8a9 	b.w	8002344 <arch_swap>
 80281f2:	f383 8811 	msr	BASEPRI, r3
 80281f6:	f3bf 8f6f 	isb	sy
}
 80281fa:	4770      	bx	lr

080281fc <z_reschedule_unlocked>:
	__asm__ volatile(
 80281fc:	f04f 0310 	mov.w	r3, #16
 8028200:	f3ef 8011 	mrs	r0, BASEPRI
 8028204:	f383 8812 	msr	BASEPRI_MAX, r3
 8028208:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 802820c:	f7ff bfea 	b.w	80281e4 <z_reschedule_irqlock>

08028210 <z_abort_timeout>:
{
 8028210:	b510      	push	{r4, lr}
 8028212:	f04f 0210 	mov.w	r2, #16
 8028216:	f3ef 8411 	mrs	r4, BASEPRI
 802821a:	f382 8812 	msr	BASEPRI_MAX, r2
 802821e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8028222:	6803      	ldr	r3, [r0, #0]
 8028224:	b13b      	cbz	r3, 8028236 <z_abort_timeout+0x26>
			remove_timeout(to);
 8028226:	f7f1 fb8b 	bl	8019940 <remove_timeout>
			ret = 0;
 802822a:	2000      	movs	r0, #0
	__asm__ volatile(
 802822c:	f384 8811 	msr	BASEPRI, r4
 8028230:	f3bf 8f6f 	isb	sy
}
 8028234:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8028236:	f06f 0015 	mvn.w	r0, #21
 802823a:	e7f7      	b.n	802822c <z_abort_timeout+0x1c>

0802823c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 802823c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 802823e:	f7f1 fc7d 	bl	8019b3c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 8028242:	bd08      	pop	{r3, pc}

08028244 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
 8028244:	f7f1 bc7a 	b.w	8019b3c <sys_clock_tick_get>

08028248 <k_timer_init>:
	timer->status = 0U;
 8028248:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 802824a:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 802824e:	f100 0218 	add.w	r2, r0, #24
	timer->status = 0U;
 8028252:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 8028254:	6343      	str	r3, [r0, #52]	; 0x34
	list->tail = (sys_dnode_t *)list;
 8028256:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 802825a:	e9c0 3300 	strd	r3, r3, [r0]
}
 802825e:	4770      	bx	lr

08028260 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8028260:	b510      	push	{r4, lr}
 8028262:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
 8028264:	f7ff ffd4 	bl	8028210 <z_abort_timeout>

	if (inactive) {
 8028268:	b9b0      	cbnz	r0, 8028298 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 802826a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802826c:	b10b      	cbz	r3, 8028272 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 802826e:	4620      	mov	r0, r4
 8028270:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 8028272:	f104 0018 	add.w	r0, r4, #24
 8028276:	f7ff ff82 	bl	802817e <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 802827a:	b168      	cbz	r0, 8028298 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 802827c:	f7ff ff37 	bl	80280ee <z_ready_thread>
	__asm__ volatile(
 8028280:	f04f 0310 	mov.w	r3, #16
 8028284:	f3ef 8011 	mrs	r0, BASEPRI
 8028288:	f383 8812 	msr	BASEPRI_MAX, r3
 802828c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 8028290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028294:	f7ff bfa6 	b.w	80281e4 <z_reschedule_irqlock>
 8028298:	bd10      	pop	{r4, pc}

0802829a <k_heap_init>:
{
 802829a:	b410      	push	{r4}
 802829c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 80282a0:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 80282a4:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 80282a6:	f7f1 be7b 	b.w	8019fa0 <sys_heap_init>
	...
