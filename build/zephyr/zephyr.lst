
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	40 3b 01 24 71 2a 00 08 bd a6 01 08 45 2a 00 08     @;.$q*......E*..
 8000010:	45 2a 00 08 45 2a 00 08 45 2a 00 08 00 00 00 00     E*..E*..E*......
	...
 800002c:	65 23 00 08 45 2a 00 08 00 00 00 00 11 23 00 08     e#..E*.......#..
 800003c:	65 42 00 08                                         eB..

08000040 <_irq_vector_table>:
 8000040:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000050:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000060:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000070:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000080:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000090:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80000a0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80000b0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80000c0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80000d0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80000e0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80000f0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000100:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000110:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000120:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000130:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000140:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000150:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000160:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000170:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000180:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000190:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80001a0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80001b0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80001c0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80001d0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80001e0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80001f0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000200:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000210:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000220:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000230:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000240:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000250:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000260:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000270:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000280:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 8000290:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80002a0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80002b0:	09 24 00 08 09 24 00 08 09 24 00 08 09 24 00 08     .$...$...$...$..
 80002c0:	09 24 00 08 09 24 00 08 09 24 00 08                 .$...$...$..

Disassembly of section text:

080002cc <__aeabi_uldivmod>:
 80002cc:	b953      	cbnz	r3, 80002e4 <__aeabi_uldivmod+0x18>
 80002ce:	b94a      	cbnz	r2, 80002e4 <__aeabi_uldivmod+0x18>
 80002d0:	2900      	cmp	r1, #0
 80002d2:	bf08      	it	eq
 80002d4:	2800      	cmpeq	r0, #0
 80002d6:	bf1c      	itt	ne
 80002d8:	f04f 31ff 	movne.w	r1, #4294967295
 80002dc:	f04f 30ff 	movne.w	r0, #4294967295
 80002e0:	f000 b80c 	b.w	80002fc <__aeabi_idiv0>
 80002e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ec:	f000 f808 	bl	8000300 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4770      	bx	lr

080002fc <__aeabi_idiv0>:
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	4686      	mov	lr, r0
 8000306:	468c      	mov	ip, r1
 8000308:	4608      	mov	r0, r1
 800030a:	9e08      	ldr	r6, [sp, #32]
 800030c:	4615      	mov	r5, r2
 800030e:	4674      	mov	r4, lr
 8000310:	4619      	mov	r1, r3
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 80c2 	bne.w	800049c <__udivmoddi4+0x19c>
 8000318:	4285      	cmp	r5, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d945      	bls.n	80003ac <__udivmoddi4+0xac>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x36>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	fa00 fc02 	lsl.w	ip, r0, r2
 800032a:	fa2e f303 	lsr.w	r3, lr, r3
 800032e:	4095      	lsls	r5, r2
 8000330:	ea43 0c0c 	orr.w	ip, r3, ip
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	b2a8      	uxth	r0, r5
 800033c:	fbbc f8fe 	udiv	r8, ip, lr
 8000340:	0c23      	lsrs	r3, r4, #16
 8000342:	fb0e cc18 	mls	ip, lr, r8, ip
 8000346:	fb08 f900 	mul.w	r9, r8, r0
 800034a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800034e:	4599      	cmp	r9, r3
 8000350:	d928      	bls.n	80003a4 <__udivmoddi4+0xa4>
 8000352:	18eb      	adds	r3, r5, r3
 8000354:	f108 37ff 	add.w	r7, r8, #4294967295
 8000358:	d204      	bcs.n	8000364 <__udivmoddi4+0x64>
 800035a:	4599      	cmp	r9, r3
 800035c:	d902      	bls.n	8000364 <__udivmoddi4+0x64>
 800035e:	f1a8 0702 	sub.w	r7, r8, #2
 8000362:	442b      	add	r3, r5
 8000364:	eba3 0309 	sub.w	r3, r3, r9
 8000368:	b2a4      	uxth	r4, r4
 800036a:	fbb3 fcfe 	udiv	ip, r3, lr
 800036e:	fb0e 331c 	mls	r3, lr, ip, r3
 8000372:	fb0c f000 	mul.w	r0, ip, r0
 8000376:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037a:	42a0      	cmp	r0, r4
 800037c:	d914      	bls.n	80003a8 <__udivmoddi4+0xa8>
 800037e:	192c      	adds	r4, r5, r4
 8000380:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000384:	d204      	bcs.n	8000390 <__udivmoddi4+0x90>
 8000386:	42a0      	cmp	r0, r4
 8000388:	d902      	bls.n	8000390 <__udivmoddi4+0x90>
 800038a:	f1ac 0302 	sub.w	r3, ip, #2
 800038e:	442c      	add	r4, r5
 8000390:	1a24      	subs	r4, r4, r0
 8000392:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	6034      	str	r4, [r6, #0]
 800039e:	6073      	str	r3, [r6, #4]
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	4647      	mov	r7, r8
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0x64>
 80003a8:	4663      	mov	r3, ip
 80003aa:	e7f1      	b.n	8000390 <__udivmoddi4+0x90>
 80003ac:	bb92      	cbnz	r2, 8000414 <__udivmoddi4+0x114>
 80003ae:	1b43      	subs	r3, r0, r5
 80003b0:	2101      	movs	r1, #1
 80003b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b6:	b2af      	uxth	r7, r5
 80003b8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003bc:	0c20      	lsrs	r0, r4, #16
 80003be:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c2:	fb0c f807 	mul.w	r8, ip, r7
 80003c6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ca:	4598      	cmp	r8, r3
 80003cc:	d962      	bls.n	8000494 <__udivmoddi4+0x194>
 80003ce:	18eb      	adds	r3, r5, r3
 80003d0:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003d4:	d204      	bcs.n	80003e0 <__udivmoddi4+0xe0>
 80003d6:	4598      	cmp	r8, r3
 80003d8:	d902      	bls.n	80003e0 <__udivmoddi4+0xe0>
 80003da:	f1ac 0002 	sub.w	r0, ip, #2
 80003de:	442b      	add	r3, r5
 80003e0:	eba3 0308 	sub.w	r3, r3, r8
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ea:	fb0e 331c 	mls	r3, lr, ip, r3
 80003ee:	fb0c f707 	mul.w	r7, ip, r7
 80003f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f6:	42a7      	cmp	r7, r4
 80003f8:	d94e      	bls.n	8000498 <__udivmoddi4+0x198>
 80003fa:	192c      	adds	r4, r5, r4
 80003fc:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000400:	d204      	bcs.n	800040c <__udivmoddi4+0x10c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	d902      	bls.n	800040c <__udivmoddi4+0x10c>
 8000406:	f1ac 0302 	sub.w	r3, ip, #2
 800040a:	442c      	add	r4, r5
 800040c:	1be4      	subs	r4, r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	e7c0      	b.n	8000396 <__udivmoddi4+0x96>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	4090      	lsls	r0, r2
 8000420:	fa2e f303 	lsr.w	r3, lr, r3
 8000424:	4303      	orrs	r3, r0
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	b2af      	uxth	r7, r5
 800042c:	fbb1 fcfe 	udiv	ip, r1, lr
 8000430:	fb0e 101c 	mls	r0, lr, ip, r1
 8000434:	0c19      	lsrs	r1, r3, #16
 8000436:	fb0c f807 	mul.w	r8, ip, r7
 800043a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800043e:	4588      	cmp	r8, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d922      	bls.n	800048c <__udivmoddi4+0x18c>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f10c 30ff 	add.w	r0, ip, #4294967295
 800044c:	d204      	bcs.n	8000458 <__udivmoddi4+0x158>
 800044e:	4588      	cmp	r8, r1
 8000450:	d902      	bls.n	8000458 <__udivmoddi4+0x158>
 8000452:	f1ac 0002 	sub.w	r0, ip, #2
 8000456:	4429      	add	r1, r5
 8000458:	eba1 0108 	sub.w	r1, r1, r8
 800045c:	b29b      	uxth	r3, r3
 800045e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000462:	fb0e 111c 	mls	r1, lr, ip, r1
 8000466:	fb0c f707 	mul.w	r7, ip, r7
 800046a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046e:	429f      	cmp	r7, r3
 8000470:	d90e      	bls.n	8000490 <__udivmoddi4+0x190>
 8000472:	18eb      	adds	r3, r5, r3
 8000474:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000478:	d204      	bcs.n	8000484 <__udivmoddi4+0x184>
 800047a:	429f      	cmp	r7, r3
 800047c:	d902      	bls.n	8000484 <__udivmoddi4+0x184>
 800047e:	f1ac 0102 	sub.w	r1, ip, #2
 8000482:	442b      	add	r3, r5
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048a:	e792      	b.n	80003b2 <__udivmoddi4+0xb2>
 800048c:	4660      	mov	r0, ip
 800048e:	e7e3      	b.n	8000458 <__udivmoddi4+0x158>
 8000490:	4661      	mov	r1, ip
 8000492:	e7f7      	b.n	8000484 <__udivmoddi4+0x184>
 8000494:	4660      	mov	r0, ip
 8000496:	e7a3      	b.n	80003e0 <__udivmoddi4+0xe0>
 8000498:	4663      	mov	r3, ip
 800049a:	e7b7      	b.n	800040c <__udivmoddi4+0x10c>
 800049c:	4283      	cmp	r3, r0
 800049e:	d906      	bls.n	80004ae <__udivmoddi4+0x1ae>
 80004a0:	b916      	cbnz	r6, 80004a8 <__udivmoddi4+0x1a8>
 80004a2:	2100      	movs	r1, #0
 80004a4:	4608      	mov	r0, r1
 80004a6:	e77b      	b.n	80003a0 <__udivmoddi4+0xa0>
 80004a8:	e9c6 e000 	strd	lr, r0, [r6]
 80004ac:	e7f9      	b.n	80004a2 <__udivmoddi4+0x1a2>
 80004ae:	fab3 f783 	clz	r7, r3
 80004b2:	b98f      	cbnz	r7, 80004d8 <__udivmoddi4+0x1d8>
 80004b4:	4283      	cmp	r3, r0
 80004b6:	d301      	bcc.n	80004bc <__udivmoddi4+0x1bc>
 80004b8:	4572      	cmp	r2, lr
 80004ba:	d808      	bhi.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	ebbe 0402 	subs.w	r4, lr, r2
 80004c0:	eb60 0303 	sbc.w	r3, r0, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	469c      	mov	ip, r3
 80004c8:	b91e      	cbnz	r6, 80004d2 <__udivmoddi4+0x1d2>
 80004ca:	2100      	movs	r1, #0
 80004cc:	e768      	b.n	80003a0 <__udivmoddi4+0xa0>
 80004ce:	4638      	mov	r0, r7
 80004d0:	e7fa      	b.n	80004c8 <__udivmoddi4+0x1c8>
 80004d2:	e9c6 4c00 	strd	r4, ip, [r6]
 80004d6:	e7f8      	b.n	80004ca <__udivmoddi4+0x1ca>
 80004d8:	f1c7 0c20 	rsb	ip, r7, #32
 80004dc:	40bb      	lsls	r3, r7
 80004de:	fa22 f40c 	lsr.w	r4, r2, ip
 80004e2:	431c      	orrs	r4, r3
 80004e4:	fa2e f10c 	lsr.w	r1, lr, ip
 80004e8:	fa20 f30c 	lsr.w	r3, r0, ip
 80004ec:	40b8      	lsls	r0, r7
 80004ee:	4301      	orrs	r1, r0
 80004f0:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80004f4:	fa0e f507 	lsl.w	r5, lr, r7
 80004f8:	fbb3 f8f9 	udiv	r8, r3, r9
 80004fc:	fa1f fe84 	uxth.w	lr, r4
 8000500:	fb09 3018 	mls	r0, r9, r8, r3
 8000504:	0c0b      	lsrs	r3, r1, #16
 8000506:	fb08 fa0e 	mul.w	sl, r8, lr
 800050a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800050e:	459a      	cmp	sl, r3
 8000510:	fa02 f207 	lsl.w	r2, r2, r7
 8000514:	d940      	bls.n	8000598 <__udivmoddi4+0x298>
 8000516:	18e3      	adds	r3, r4, r3
 8000518:	f108 30ff 	add.w	r0, r8, #4294967295
 800051c:	d204      	bcs.n	8000528 <__udivmoddi4+0x228>
 800051e:	459a      	cmp	sl, r3
 8000520:	d902      	bls.n	8000528 <__udivmoddi4+0x228>
 8000522:	f1a8 0002 	sub.w	r0, r8, #2
 8000526:	4423      	add	r3, r4
 8000528:	eba3 030a 	sub.w	r3, r3, sl
 800052c:	b289      	uxth	r1, r1
 800052e:	fbb3 f8f9 	udiv	r8, r3, r9
 8000532:	fb09 3318 	mls	r3, r9, r8, r3
 8000536:	fb08 fe0e 	mul.w	lr, r8, lr
 800053a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053e:	458e      	cmp	lr, r1
 8000540:	d92c      	bls.n	800059c <__udivmoddi4+0x29c>
 8000542:	1861      	adds	r1, r4, r1
 8000544:	f108 33ff 	add.w	r3, r8, #4294967295
 8000548:	d204      	bcs.n	8000554 <__udivmoddi4+0x254>
 800054a:	458e      	cmp	lr, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x254>
 800054e:	f1a8 0302 	sub.w	r3, r8, #2
 8000552:	4421      	add	r1, r4
 8000554:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000558:	fba0 9802 	umull	r9, r8, r0, r2
 800055c:	eba1 010e 	sub.w	r1, r1, lr
 8000560:	4541      	cmp	r1, r8
 8000562:	46ce      	mov	lr, r9
 8000564:	4643      	mov	r3, r8
 8000566:	d302      	bcc.n	800056e <__udivmoddi4+0x26e>
 8000568:	d106      	bne.n	8000578 <__udivmoddi4+0x278>
 800056a:	454d      	cmp	r5, r9
 800056c:	d204      	bcs.n	8000578 <__udivmoddi4+0x278>
 800056e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000572:	eb68 0304 	sbc.w	r3, r8, r4
 8000576:	3801      	subs	r0, #1
 8000578:	2e00      	cmp	r6, #0
 800057a:	d0a6      	beq.n	80004ca <__udivmoddi4+0x1ca>
 800057c:	ebb5 020e 	subs.w	r2, r5, lr
 8000580:	eb61 0103 	sbc.w	r1, r1, r3
 8000584:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000588:	fa22 f307 	lsr.w	r3, r2, r7
 800058c:	ea4c 0303 	orr.w	r3, ip, r3
 8000590:	40f9      	lsrs	r1, r7
 8000592:	e9c6 3100 	strd	r3, r1, [r6]
 8000596:	e798      	b.n	80004ca <__udivmoddi4+0x1ca>
 8000598:	4640      	mov	r0, r8
 800059a:	e7c5      	b.n	8000528 <__udivmoddi4+0x228>
 800059c:	4643      	mov	r3, r8
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x254>

080005a0 <main>:
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec lcd_bl = GPIO_DT_SPEC_GET(ZEPHYR_USER_NODE, bl_gpios);

int main(void)
{
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	b085      	sub	sp, #20
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 80005a4:	4c2e      	ldr	r4, [pc, #184]	; (8000660 <main+0xc0>)
 80005a6:	4620      	mov	r0, r4
 80005a8:	f027 fcf8 	bl	8027f9c <z_device_is_ready>
	int ret;

	if (!gpio_is_ready_dt(&lcd_bl)) {
 80005ac:	2800      	cmp	r0, #0
 80005ae:	d053      	beq.n	8000658 <main+0xb8>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 80005b0:	6926      	ldr	r6, [r4, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
 80005b2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
	const struct gpio_driver_api *api =
 80005b6:	68a5      	ldr	r5, [r4, #8]
	return api->pin_configure(port, pin, flags);
 80005b8:	2106      	movs	r1, #6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80005ba:	6833      	ldr	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 80005bc:	4620      	mov	r0, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80005be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005c2:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 80005c4:	682b      	ldr	r3, [r5, #0]
 80005c6:	4798      	blx	r3
		return -1;
	}
	ret = gpio_pin_configure_dt(&lcd_bl, GPIO_OUTPUT_ACTIVE);
	if (ret < 0) {
 80005c8:	2800      	cmp	r0, #0
 80005ca:	db45      	blt.n	8000658 <main+0xb8>
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80005cc:	6833      	ldr	r3, [r6, #0]
 80005ce:	065b      	lsls	r3, r3, #25
	return api->port_clear_bits_raw(port, pins);
 80005d0:	f04f 0140 	mov.w	r1, #64	; 0x40
	return api->port_set_bits_raw(port, pins);
 80005d4:	bf54      	ite	pl
 80005d6:	68eb      	ldrpl	r3, [r5, #12]
	return api->port_clear_bits_raw(port, pins);
 80005d8:	692b      	ldrmi	r3, [r5, #16]
 80005da:	4620      	mov	r0, r4
 80005dc:	4798      	blx	r3
static inline int display_blanking_off(const struct device *dev)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	return api->blanking_off(dev);
 80005de:	2664      	movs	r6, #100	; 0x64
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
 80005e0:	f011 fd54 	bl	801208c <lv_disp_get_default>
		lv_task_handler();
		k_timeout_t t;
		t.ticks = 10;
		k_sleep(t);
		++count;
		if(count>99900) {
 80005e4:	4f1f      	ldr	r7, [pc, #124]	; (8000664 <main+0xc4>)
 80005e6:	f01a fdb3 	bl	801b150 <lv_disp_get_scr_act>
	hello_world_label = lv_label_create(lv_scr_act());
 80005ea:	f015 fdff 	bl	80161ec <lv_label_create>
	lv_label_set_text(hello_world_label, "Hello world!");
 80005ee:	491e      	ldr	r1, [pc, #120]	; (8000668 <main+0xc8>)
	hello_world_label = lv_label_create(lv_scr_act());
 80005f0:	4604      	mov	r4, r0
	lv_label_set_text(hello_world_label, "Hello world!");
 80005f2:	f026 fc43 	bl	8026e7c <lv_label_set_text>
	lv_obj_align(hello_world_label,  LV_ALIGN_CENTER, 0, 0);
 80005f6:	2300      	movs	r3, #0
 80005f8:	2109      	movs	r1, #9
 80005fa:	4620      	mov	r0, r4
	uint32_t count = 0U;
 80005fc:	2400      	movs	r4, #0
	lv_obj_align(hello_world_label,  LV_ALIGN_CENTER, 0, 0);
 80005fe:	461a      	mov	r2, r3
 8000600:	f01c f8ba 	bl	801c778 <lv_obj_align>
 8000604:	f011 fd42 	bl	801208c <lv_disp_get_default>
 8000608:	f01a fda2 	bl	801b150 <lv_disp_get_scr_act>
	count_label = lv_label_create(lv_scr_act());
 800060c:	f015 fdee 	bl	80161ec <lv_label_create>
	lv_obj_align(count_label, LV_ALIGN_CENTER, 0, 50);
 8000610:	2332      	movs	r3, #50	; 0x32
 8000612:	2200      	movs	r2, #0
 8000614:	2109      	movs	r1, #9
	count_label = lv_label_create(lv_scr_act());
 8000616:	4605      	mov	r5, r0
	lv_obj_align(count_label, LV_ALIGN_CENTER, 0, 50);
 8000618:	f01c f8ae 	bl	801c778 <lv_obj_align>
 800061c:	4813      	ldr	r0, [pc, #76]	; (800066c <main+0xcc>)
 800061e:	6883      	ldr	r3, [r0, #8]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	4798      	blx	r3
 8000624:	fbb4 f3f6 	udiv	r3, r4, r6
 8000628:	fb06 4313 	mls	r3, r6, r3, r4
		if ((count % 100) == 0U) {
 800062c:	b94b      	cbnz	r3, 8000642 <main+0xa2>
			citoa(count/100,sz,10);
 800062e:	4669      	mov	r1, sp
 8000630:	220a      	movs	r2, #10
 8000632:	fbb4 f0f6 	udiv	r0, r4, r6
 8000636:	f019 fb39 	bl	8019cac <_Z5citoaiPci>
			lv_label_set_text(count_label, sz);
 800063a:	4669      	mov	r1, sp
 800063c:	4628      	mov	r0, r5
 800063e:	f026 fc1d 	bl	8026e7c <lv_label_set_text>
 * GLOBAL PROTOTYPES
 **********************/

static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_task_handler(void)
{
    return lv_timer_handler();
 8000642:	f012 f9ff 	bl	8012a44 <lv_timer_handler>
		++count;
 8000646:	3401      	adds	r4, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8000648:	200a      	movs	r0, #10
 800064a:	2100      	movs	r1, #0
 800064c:	f019 f876 	bl	801973c <z_impl_k_sleep>
		if(count>99900) {
 8000650:	42bc      	cmp	r4, r7
 8000652:	d1e7      	bne.n	8000624 <main+0x84>
			count = 0;
 8000654:	2400      	movs	r4, #0
 8000656:	e7ea      	b.n	800062e <main+0x8e>
		}
	}

	return 0;
}
 8000658:	f04f 30ff 	mov.w	r0, #4294967295
 800065c:	b005      	add	sp, #20
 800065e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000660:	080283f8 	.word	0x080283f8
 8000664:	0001863d 	.word	0x0001863d
 8000668:	08029ec8 	.word	0x08029ec8
 800066c:	08028470 	.word	0x08028470

08000670 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 8000670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000674:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 8000676:	0784      	lsls	r4, r0, #30
{
 8000678:	4605      	mov	r5, r0
 800067a:	460e      	mov	r6, r1
 800067c:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
 800067e:	f002 0304 	and.w	r3, r2, #4
 8000682:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8000686:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 8000688:	f3c2 03c2 	ubfx	r3, r2, #3, #3
{
 800068c:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 800068e:	f103 0301 	add.w	r3, r3, #1
 8000692:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
 8000694:	f040 81ba 	bne.w	8000a0c <cbvprintf_package+0x39c>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
 8000698:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 800069a:	b130      	cbz	r0, 80006aa <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 800069c:	2907      	cmp	r1, #7
 800069e:	d809      	bhi.n	80006b4 <cbvprintf_package+0x44>
		return -ENOSPC;
 80006a0:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 80006a4:	b011      	add	sp, #68	; 0x44
 80006a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 80006aa:	f001 0607 	and.w	r6, r1, #7
 80006ae:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 80006b0:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
 80006b4:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 80006b6:	f04f 0800 	mov.w	r8, #0
	align = VA_STACK_ALIGN(char *);
 80006ba:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
 80006be:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 80006c4:	4647      	mov	r7, r8
	bool parsing = false;
 80006c6:	46c3      	mov	fp, r8
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
 80006c8:	9301      	str	r3, [sp, #4]
	size = sizeof(char *);
 80006ca:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 80006cc:	f8cd 8010 	str.w	r8, [sp, #16]
			if (buf0 != NULL) {
 80006d0:	b10d      	cbz	r5, 80006d6 <cbvprintf_package+0x66>
				*(const char **)buf = s;
 80006d2:	9a00      	ldr	r2, [sp, #0]
 80006d4:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80006d6:	9805      	ldr	r0, [sp, #20]
 80006d8:	2800      	cmp	r0, #0
 80006da:	f300 80e8 	bgt.w	80008ae <cbvprintf_package+0x23e>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 80006de:	4898      	ldr	r0, [pc, #608]	; (8000940 <cbvprintf_package+0x2d0>)
 80006e0:	9a00      	ldr	r2, [sp, #0]
 80006e2:	4282      	cmp	r2, r0
 80006e4:	d303      	bcc.n	80006ee <cbvprintf_package+0x7e>
 80006e6:	4897      	ldr	r0, [pc, #604]	; (8000944 <cbvprintf_package+0x2d4>)
 80006e8:	4282      	cmp	r2, r0
 80006ea:	f0c0 80e0 	bcc.w	80008ae <cbvprintf_package+0x23e>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 80006ee:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 80006f0:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 80006f4:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 80006f6:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 80006fa:	f100 8103 	bmi.w	8000904 <cbvprintf_package+0x294>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 80006fe:	2f0f      	cmp	r7, #15
 8000700:	f200 80b1 	bhi.w	8000866 <cbvprintf_package+0x1f6>
				if (buf0 != NULL) {
 8000704:	2d00      	cmp	r5, #0
 8000706:	f000 8105 	beq.w	8000914 <cbvprintf_package+0x2a4>
					str_ptr_pos[s_idx] = s_ptr_idx;
 800070a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800070e:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
 8000712:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
 8000714:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
 8000718:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
 800071c:	9804      	ldr	r0, [sp, #16]
 800071e:	3001      	adds	r0, #1
 8000720:	9004      	str	r0, [sp, #16]
 8000722:	e0e7      	b.n	80008f4 <cbvprintf_package+0x284>
			switch (*fmt) {
 8000724:	287a      	cmp	r0, #122	; 0x7a
 8000726:	d85d      	bhi.n	80007e4 <cbvprintf_package+0x174>
 8000728:	284b      	cmp	r0, #75	; 0x4b
 800072a:	d80e      	bhi.n	800074a <cbvprintf_package+0xda>
 800072c:	2847      	cmp	r0, #71	; 0x47
 800072e:	d859      	bhi.n	80007e4 <cbvprintf_package+0x174>
 8000730:	2829      	cmp	r0, #41	; 0x29
 8000732:	d82d      	bhi.n	8000790 <cbvprintf_package+0x120>
 8000734:	2825      	cmp	r0, #37	; 0x25
 8000736:	d052      	beq.n	80007de <cbvprintf_package+0x16e>
 8000738:	d854      	bhi.n	80007e4 <cbvprintf_package+0x174>
 800073a:	2820      	cmp	r0, #32
 800073c:	d07a      	beq.n	8000834 <cbvprintf_package+0x1c4>
 800073e:	3823      	subs	r0, #35	; 0x23
 8000740:	f1d0 0b00 	rsbs	fp, r0, #0
 8000744:	eb4b 0b00 	adc.w	fp, fp, r0
 8000748:	e074      	b.n	8000834 <cbvprintf_package+0x1c4>
 800074a:	384c      	subs	r0, #76	; 0x4c
 800074c:	282e      	cmp	r0, #46	; 0x2e
 800074e:	d849      	bhi.n	80007e4 <cbvprintf_package+0x174>
 8000750:	e8df f000 	tbb	[pc, r0]
 8000754:	48484870 	.word	0x48484870
 8000758:	48484848 	.word	0x48484848
 800075c:	48484848 	.word	0x48484848
 8000760:	4848484b 	.word	0x4848484b
 8000764:	48484848 	.word	0x48484848
 8000768:	4b485948 	.word	0x4b485948
 800076c:	5959594b 	.word	0x5959594b
 8000770:	486d4b70 	.word	0x486d4b70
 8000774:	4b184870 	.word	0x4b184870
 8000778:	82484818 	.word	0x82484818
 800077c:	48484b7f 	.word	0x48484b7f
 8000780:	484b      	.short	0x484b
 8000782:	7f          	.byte	0x7f
 8000783:	00          	.byte	0x00
 8000784:	2000      	movs	r0, #0
 8000786:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
 800078a:	f04f 0a04 	mov.w	sl, #4
 800078e:	e038      	b.n	8000802 <cbvprintf_package+0x192>
			switch (*fmt) {
 8000790:	382a      	subs	r0, #42	; 0x2a
 8000792:	2201      	movs	r2, #1
 8000794:	b2c0      	uxtb	r0, r0
 8000796:	fa02 f000 	lsl.w	r0, r2, r0
 800079a:	ea10 0f0e 	tst.w	r0, lr
 800079e:	d149      	bne.n	8000834 <cbvprintf_package+0x1c4>
 80007a0:	f010 5c62 	ands.w	ip, r0, #947912704	; 0x38800000
 80007a4:	d12f      	bne.n	8000806 <cbvprintf_package+0x196>
 80007a6:	ea10 0b02 	ands.w	fp, r0, r2
 80007aa:	d043      	beq.n	8000834 <cbvprintf_package+0x1c4>
 80007ac:	4660      	mov	r0, ip
		buf = (void *) ROUND_UP(buf, align);
 80007ae:	3c01      	subs	r4, #1
 80007b0:	4454      	add	r4, sl
 80007b2:	fbb4 f4fa 	udiv	r4, r4, sl
 80007b6:	fb0a f404 	mul.w	r4, sl, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 80007ba:	2d00      	cmp	r5, #0
 80007bc:	d061      	beq.n	8000882 <cbvprintf_package+0x212>
 80007be:	eba3 0c05 	sub.w	ip, r3, r5
 80007c2:	44a4      	add	ip, r4
 80007c4:	45b4      	cmp	ip, r6
 80007c6:	f63f af6b 	bhi.w	80006a0 <cbvprintf_package+0x30>
		if (is_str_arg) {
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d168      	bne.n	80008a0 <cbvprintf_package+0x230>
		} else if (size == sizeof(int)) {
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	d147      	bne.n	8000862 <cbvprintf_package+0x1f2>
			int v = va_arg(ap, int);
 80007d2:	f859 3b04 	ldr.w	r3, [r9], #4
				*(int *)buf = v;
 80007d6:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
 80007d8:	3404      	adds	r4, #4
 80007da:	2304      	movs	r3, #4
 80007dc:	e02a      	b.n	8000834 <cbvprintf_package+0x1c4>
				arg_idx--;
 80007de:	9a01      	ldr	r2, [sp, #4]
 80007e0:	3a01      	subs	r2, #1
 80007e2:	9201      	str	r2, [sp, #4]
				parsing = false;
 80007e4:	f04f 0b00 	mov.w	fp, #0
				continue;
 80007e8:	e024      	b.n	8000834 <cbvprintf_package+0x1c4>
				if (fmt[-1] == 'l') {
 80007ea:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 80007ee:	286c      	cmp	r0, #108	; 0x6c
 80007f0:	d134      	bne.n	800085c <cbvprintf_package+0x1ec>
					if (fmt[-2] == 'l') {
 80007f2:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80007f6:	2000      	movs	r0, #0
 80007f8:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
 80007fa:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
 80007fc:	d1c5      	bne.n	800078a <cbvprintf_package+0x11a>
						align = VA_STACK_ALIGN(long long);
 80007fe:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
 8000802:	4653      	mov	r3, sl
 8000804:	e7d3      	b.n	80007ae <cbvprintf_package+0x13e>
					v.ld = va_arg(ap, long double);
 8000806:	f109 0907 	add.w	r9, r9, #7
				buf = (void *) ROUND_UP(buf, align);
 800080a:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
 800080c:	f029 0907 	bic.w	r9, r9, #7
				buf = (void *) ROUND_UP(buf, align);
 8000810:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
 8000814:	e8f9 ab02 	ldrd	sl, fp, [r9], #8
				if (buf0 != NULL) {
 8000818:	b135      	cbz	r5, 8000828 <cbvprintf_package+0x1b8>
					if (BUF_OFFSET + size > len) {
 800081a:	9806      	ldr	r0, [sp, #24]
 800081c:	4420      	add	r0, r4
 800081e:	42b0      	cmp	r0, r6
 8000820:	f63f af3e 	bhi.w	80006a0 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
 8000824:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
 8000828:	3408      	adds	r4, #8
				parsing = false;
 800082a:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
 800082e:	f04f 0a08 	mov.w	sl, #8
 8000832:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
 8000834:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8000838:	2800      	cmp	r0, #0
 800083a:	d078      	beq.n	800092e <cbvprintf_package+0x2be>
			if (!parsing) {
 800083c:	f1bb 0f00 	cmp.w	fp, #0
 8000840:	f47f af70 	bne.w	8000724 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
 8000844:	2825      	cmp	r0, #37	; 0x25
 8000846:	d1f5      	bne.n	8000834 <cbvprintf_package+0x1c4>
					arg_idx++;
 8000848:	9b01      	ldr	r3, [sp, #4]
					parsing = true;
 800084a:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
 800084e:	3301      	adds	r3, #1
 8000850:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
 8000852:	f04f 0a04 	mov.w	sl, #4
 8000856:	e7ec      	b.n	8000832 <cbvprintf_package+0x1c2>
			switch (*fmt) {
 8000858:	4658      	mov	r0, fp
 800085a:	e794      	b.n	8000786 <cbvprintf_package+0x116>
 800085c:	2000      	movs	r0, #0
				parsing = false;
 800085e:	4683      	mov	fp, r0
 8000860:	e7a5      	b.n	80007ae <cbvprintf_package+0x13e>
		} else if (size == sizeof(long long)) {
 8000862:	2b08      	cmp	r3, #8
 8000864:	d002      	beq.n	800086c <cbvprintf_package+0x1fc>
					return -EINVAL;
 8000866:	f06f 0015 	mvn.w	r0, #21
 800086a:	e71b      	b.n	80006a4 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
 800086c:	f109 0907 	add.w	r9, r9, #7
 8000870:	f029 0907 	bic.w	r9, r9, #7
 8000874:	e8f9 2302 	ldrd	r2, r3, [r9], #8
					*(long long *)buf = v;
 8000878:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
 800087c:	3408      	adds	r4, #8
 800087e:	2308      	movs	r3, #8
 8000880:	e7d8      	b.n	8000834 <cbvprintf_package+0x1c4>
		if (is_str_arg) {
 8000882:	b968      	cbnz	r0, 80008a0 <cbvprintf_package+0x230>
		} else if (size == sizeof(int)) {
 8000884:	2b04      	cmp	r3, #4
 8000886:	d102      	bne.n	800088e <cbvprintf_package+0x21e>
			int v = va_arg(ap, int);
 8000888:	f109 0904 	add.w	r9, r9, #4
			if (buf0 != NULL) {
 800088c:	e7a4      	b.n	80007d8 <cbvprintf_package+0x168>
		} else if (size == sizeof(long long)) {
 800088e:	2b08      	cmp	r3, #8
 8000890:	d1e9      	bne.n	8000866 <cbvprintf_package+0x1f6>
			long long v = va_arg(ap, long long);
 8000892:	f109 0907 	add.w	r9, r9, #7
 8000896:	f029 0907 	bic.w	r9, r9, #7
 800089a:	f109 0908 	add.w	r9, r9, #8
			if (buf0 != NULL) {
 800089e:	e7ed      	b.n	800087c <cbvprintf_package+0x20c>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80008a0:	9a05      	ldr	r2, [sp, #20]
 80008a2:	3a01      	subs	r2, #1
 80008a4:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
 80008a6:	f859 2b04 	ldr.w	r2, [r9], #4
 80008aa:	9200      	str	r2, [sp, #0]
 80008ac:	e710      	b.n	80006d0 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
 80008ae:	9a03      	ldr	r2, [sp, #12]
 80008b0:	0790      	lsls	r0, r2, #30
 80008b2:	d520      	bpl.n	80008f6 <cbvprintf_package+0x286>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 80008b4:	eba4 0e05 	sub.w	lr, r4, r5
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80008b8:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 80008bc:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 80008c0:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 80008c4:	d2cf      	bcs.n	8000866 <cbvprintf_package+0x1f6>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 80008c6:	2f0f      	cmp	r7, #15
 80008c8:	d8cd      	bhi.n	8000866 <cbvprintf_package+0x1f6>
				if (buf0 != NULL) {
 80008ca:	b1f5      	cbz	r5, 800090a <cbvprintf_package+0x29a>
					str_ptr_pos[s_idx] = s_ptr_idx;
 80008cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80008d0:	b2c0      	uxtb	r0, r0
 80008d2:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
 80008d6:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
 80008d8:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
 80008dc:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
 80008e0:	f1bc 0f00 	cmp.w	ip, #0
 80008e4:	f43f af1a 	beq.w	800071c <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 80008e8:	f060 007f 	orn	r0, r0, #127	; 0x7f
						s_ro_cnt++;
 80008ec:	f108 0801 	add.w	r8, r8, #1
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 80008f0:	f80e 0c20 	strb.w	r0, [lr, #-32]
				s_idx++;
 80008f4:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
 80008f6:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
 80008fa:	3404      	adds	r4, #4
			switch (*fmt) {
 80008fc:	f64f 7eda 	movw	lr, #65498	; 0xffda
					if (BUF_OFFSET + size > len) {
 8000900:	9206      	str	r2, [sp, #24]
 8000902:	e797      	b.n	8000834 <cbvprintf_package+0x1c4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8000904:	f04f 0c00 	mov.w	ip, #0
 8000908:	e7da      	b.n	80008c0 <cbvprintf_package+0x250>
				} else if (is_ro) {
 800090a:	f1bc 0f00 	cmp.w	ip, #0
 800090e:	d001      	beq.n	8000914 <cbvprintf_package+0x2a4>
					len += 1;
 8000910:	3601      	adds	r6, #1
 8000912:	e7ef      	b.n	80008f4 <cbvprintf_package+0x284>
				} else if (rws_pos_en) {
 8000914:	9802      	ldr	r0, [sp, #8]
					len += 2;
 8000916:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
 8000918:	2800      	cmp	r0, #0
 800091a:	d1eb      	bne.n	80008f4 <cbvprintf_package+0x284>
					len += strlen(s) + 1 + 1;
 800091c:	9800      	ldr	r0, [sp, #0]
 800091e:	e9cd 3106 	strd	r3, r1, [sp, #24]
 8000922:	f019 fedf 	bl	801a6e4 <strlen>
 8000926:	4406      	add	r6, r0
 8000928:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 800092c:	e7e2      	b.n	80008f4 <cbvprintf_package+0x284>
	if (BUF_OFFSET / sizeof(int) > 255) {
 800092e:	1b63      	subs	r3, r4, r5
 8000930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000934:	d297      	bcs.n	8000866 <cbvprintf_package+0x1f6>
	if (buf0 == NULL) {
 8000936:	b93d      	cbnz	r5, 8000948 <cbvprintf_package+0x2d8>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 8000938:	f1a6 0408 	sub.w	r4, r6, #8
 800093c:	18e0      	adds	r0, r4, r3
 800093e:	e6b1      	b.n	80006a4 <cbvprintf_package+0x34>
 8000940:	0802824c 	.word	0x0802824c
 8000944:	0802e0e8 	.word	0x0802e0e8
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
 8000948:	089b      	lsrs	r3, r3, #2
	if (rws_pos_en) {
 800094a:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
 800094c:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
 800094e:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
 8000950:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
 8000954:	b1c2      	cbz	r2, 8000988 <cbvprintf_package+0x318>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
 8000956:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
 8000958:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
 800095c:	f1b8 0f00 	cmp.w	r8, #0
 8000960:	d005      	beq.n	800096e <cbvprintf_package+0x2fe>
 8000962:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
 8000964:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
 8000966:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
 800096a:	4297      	cmp	r7, r2
 800096c:	d10e      	bne.n	800098c <cbvprintf_package+0x31c>
		if (BUF_OFFSET + 1 + size > len) {
 800096e:	f1c5 0301 	rsb	r3, r5, #1
 8000972:	f10d 0920 	add.w	r9, sp, #32
			*buf++ = str_ptr_arg[i];
 8000976:	f04f 0a00 	mov.w	sl, #0
 800097a:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
		if (BUF_OFFSET + 1 + size > len) {
 800097e:	9301      	str	r3, [sp, #4]
	for (i = 0; i < s_idx; i++) {
 8000980:	4557      	cmp	r7, sl
 8000982:	d112      	bne.n	80009aa <cbvprintf_package+0x33a>
	return BUF_OFFSET;
 8000984:	1b60      	subs	r0, r4, r5
 8000986:	e68d      	b.n	80006a4 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
 8000988:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
 800098a:	e7e5      	b.n	8000958 <cbvprintf_package+0x2e8>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 800098c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000990:	0619      	lsls	r1, r3, #24
 8000992:	d508      	bpl.n	80009a6 <cbvprintf_package+0x336>
			if (BUF_OFFSET + 1 > len) {
 8000994:	eb04 0e0c 	add.w	lr, r4, ip
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 8000998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
 800099c:	45b6      	cmp	lr, r6
 800099e:	f63f ae7f 	bhi.w	80006a0 <cbvprintf_package+0x30>
			*buf++ = pos;
 80009a2:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
 80009a6:	3201      	adds	r2, #1
 80009a8:	e7df      	b.n	800096a <cbvprintf_package+0x2fa>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 80009aa:	f1b8 0f00 	cmp.w	r8, #0
 80009ae:	d003      	beq.n	80009b8 <cbvprintf_package+0x348>
 80009b0:	f999 2000 	ldrsb.w	r2, [r9]
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	db17      	blt.n	80009e8 <cbvprintf_package+0x378>
		if (rws_pos_en) {
 80009b8:	9b02      	ldr	r3, [sp, #8]
 80009ba:	b1d3      	cbz	r3, 80009f2 <cbvprintf_package+0x382>
			*buf++ = str_ptr_arg[i];
 80009bc:	f81a 200b 	ldrb.w	r2, [sl, fp]
 80009c0:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
 80009c4:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
 80009c6:	9b01      	ldr	r3, [sp, #4]
 80009c8:	1898      	adds	r0, r3, r2
 80009ca:	4420      	add	r0, r4
 80009cc:	42b0      	cmp	r0, r6
 80009ce:	f63f ae67 	bhi.w	80006a0 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
 80009d2:	f899 0000 	ldrb.w	r0, [r9]
		memcpy(buf, s, size);
 80009d6:	9900      	ldr	r1, [sp, #0]
		*buf++ = str_ptr_pos[i];
 80009d8:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
 80009dc:	4620      	mov	r0, r4
 80009de:	9203      	str	r2, [sp, #12]
 80009e0:	f019 fe93 	bl	801a70a <memcpy>
		buf += size;
 80009e4:	9a03      	ldr	r2, [sp, #12]
 80009e6:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
 80009e8:	f10a 0a01 	add.w	sl, sl, #1
 80009ec:	f109 0901 	add.w	r9, r9, #1
 80009f0:	e7c6      	b.n	8000980 <cbvprintf_package+0x310>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 80009f2:	f899 2000 	ldrb.w	r2, [r9]
 80009f6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 80009fa:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 80009fc:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
 80009fe:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 8000a00:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
 8000a04:	f019 fe6e 	bl	801a6e4 <strlen>
 8000a08:	1c42      	adds	r2, r0, #1
 8000a0a:	e7dc      	b.n	80009c6 <cbvprintf_package+0x356>
		return -EFAULT;
 8000a0c:	f06f 000d 	mvn.w	r0, #13
 8000a10:	e648      	b.n	80006a4 <cbvprintf_package+0x34>
 8000a12:	bf00      	nop

08000a14 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
 8000a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a18:	b095      	sub	sp, #84	; 0x54
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
 8000a22:	61bb      	str	r3, [r7, #24]
 8000a24:	f3cb 03c0 	ubfx	r3, fp, #3, #1
 8000a28:	627a      	str	r2, [r7, #36]	; 0x24
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
 8000a2a:	6239      	str	r1, [r7, #32]
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	b951      	cbnz	r1, 8000a46 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
 8000a30:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
 8000a32:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
 8000a34:	7880      	ldrb	r0, [r0, #2]
 8000a36:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8000a3a:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
 8000a3c:	6a3b      	ldr	r3, [r7, #32]
 8000a3e:	429e      	cmp	r6, r3
 8000a40:	d81a      	bhi.n	8000a78 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
 8000a42:	1b03      	subs	r3, r0, r4
 8000a44:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
 8000a46:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
 8000a4a:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
 8000a4c:	4656      	mov	r6, sl
	rws_nbr = in_desc->rw_str_cnt;
 8000a4e:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
 8000a50:	f1ba 0f00 	cmp.w	sl, #0
 8000a54:	d002      	beq.n	8000a5c <cbprintf_package_convert+0x48>
 8000a56:	f01b 0f01 	tst.w	fp, #1
 8000a5a:	d117      	bne.n	8000a8c <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	bb5b      	cbnz	r3, 8000ab8 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	b11b      	cbz	r3, 8000a6c <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4620      	mov	r0, r4
 8000a68:	6a39      	ldr	r1, [r7, #32]
 8000a6a:	4798      	blx	r3
		}

		return in_len;
 8000a6c:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
 8000a6e:	4628      	mov	r0, r5
 8000a70:	3754      	adds	r7, #84	; 0x54
 8000a72:	46bd      	mov	sp, r7
 8000a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
 8000a78:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
 8000a7a:	4628      	mov	r0, r5
 8000a7c:	f019 fe32 	bl	801a6e4 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
 8000a80:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
 8000a82:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
 8000a84:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
 8000a86:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
 8000a88:	623b      	str	r3, [r7, #32]
 8000a8a:	e7d7      	b.n	8000a3c <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
 8000a8c:	f894 8000 	ldrb.w	r8, [r4]
 8000a90:	6863      	ldr	r3, [r4, #4]
	args_size = in_desc->len * sizeof(int);
 8000a92:	ea4f 0288 	mov.w	r2, r8, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
 8000a96:	61fb      	str	r3, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
 8000a98:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
 8000a9e:	60fa      	str	r2, [r7, #12]
	if (cb == NULL) {
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f040 8102 	bne.w	8000caa <cbprintf_package_convert+0x296>
		out_len = (int)in_len;
 8000aa6:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
 8000aa8:	46c1      	mov	r9, r8
 8000aaa:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
 8000aae:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
 8000ab0:	454b      	cmp	r3, r9
 8000ab2:	d14e      	bne.n	8000b52 <cbprintf_package_convert+0x13e>
 8000ab4:	44d0      	add	r8, sl
 8000ab6:	e013      	b.n	8000ae0 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
 8000ab8:	f01b 0f02 	tst.w	fp, #2
 8000abc:	d0d0      	beq.n	8000a60 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
 8000abe:	f894 8000 	ldrb.w	r8, [r4]
 8000ac2:	ea4f 0388 	mov.w	r3, r8, lsl #2
	uint8_t *str_pos = &buf[args_size];
 8000ac6:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	args_size = in_desc->len * sizeof(int);
 8000aca:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
 8000acc:	6863      	ldr	r3, [r4, #4]
 8000ace:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d178      	bne.n	8000bc8 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
 8000ad6:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 8000ad8:	f1ba 0f00 	cmp.w	sl, #0
 8000adc:	d14e      	bne.n	8000b7c <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
 8000ade:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
 8000ae0:	f01b 0f05 	tst.w	fp, #5
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2302      	moveq	r3, #2
 8000ae8:	2301      	movne	r3, #1
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 8000af2:	f00b 0302 	and.w	r3, fp, #2
 8000af6:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
 8000af8:	45d0      	cmp	r8, sl
 8000afa:	d0b8      	beq.n	8000a6e <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
 8000afc:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
 8000b00:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8000b04:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
 8000b08:	4bad      	ldr	r3, [pc, #692]	; (8000dc0 <cbprintf_package_convert+0x3ac>)
 8000b0a:	4599      	cmp	r9, r3
 8000b0c:	d302      	bcc.n	8000b14 <cbprintf_package_convert+0x100>
 8000b0e:	4bad      	ldr	r3, [pc, #692]	; (8000dc4 <cbprintf_package_convert+0x3b0>)
 8000b10:	4599      	cmp	r9, r3
 8000b12:	d339      	bcc.n	8000b88 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d043      	beq.n	8000ba2 <cbprintf_package_convert+0x18e>
 8000b1a:	69f8      	ldr	r0, [r7, #28]
 8000b1c:	f019 f926 	bl	8019d6c <is_ptr>
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d03e      	beq.n	8000ba2 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
 8000b24:	46e9      	mov	r9, sp
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	466a      	mov	r2, sp
 8000b2a:	4ba7      	ldr	r3, [pc, #668]	; (8000dc8 <cbprintf_package_convert+0x3b4>)
 8000b2c:	6153      	str	r3, [r2, #20]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	e9c2 3106 	strd	r3, r1, [r2, #24]
 8000b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b38:	8413      	strh	r3, [r2, #32]
 8000b3a:	4ba4      	ldr	r3, [pc, #656]	; (8000dcc <cbprintf_package_convert+0x3b8>)
 8000b3c:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
 8000b40:	2300      	movs	r3, #0
 8000b42:	f44f 5112 	mov.w	r1, #9344	; 0x2480
 8000b46:	48a2      	ldr	r0, [pc, #648]	; (8000dd0 <cbprintf_package_convert+0x3bc>)
				out_len -= 2;
 8000b48:	3d02      	subs	r5, #2
 8000b4a:	f001 f811 	bl	8001b70 <z_impl_z_log_msg_static_create>
 8000b4e:	46cd      	mov	sp, r9
				continue;
 8000b50:	e7d2      	b.n	8000af8 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
 8000b52:	f819 2b01 	ldrb.w	r2, [r9], #1
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
 8000b58:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8000b5c:	f019 fdc2 	bl	801a6e4 <strlen>
				if (strl && strl_cnt < strl_len) {
 8000b60:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
 8000b62:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	b13a      	cbz	r2, 8000b78 <cbprintf_package_convert+0x164>
 8000b68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000b6c:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
 8000b6e:	bf3e      	ittt	cc
 8000b70:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
 8000b72:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
 8000b76:	3601      	addcc	r6, #1
				out_len += len;
 8000b78:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
 8000b7a:	e799      	b.n	8000ab0 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 8000b7c:	f01b 0604 	ands.w	r6, fp, #4
				str_pos += ros_nbr;
 8000b80:	bf1c      	itt	ne
 8000b82:	44d0      	addne	r8, sl
	size_t strl_cnt = 0;
 8000b84:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
 8000b86:	e7ab      	b.n	8000ae0 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	b123      	cbz	r3, 8000b96 <cbprintf_package_convert+0x182>
 8000b8c:	69f8      	ldr	r0, [r7, #28]
 8000b8e:	f019 f8ed 	bl	8019d6c <is_ptr>
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d1c6      	bne.n	8000b24 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 8000b96:	f01b 0f01 	tst.w	fp, #1
 8000b9a:	d105      	bne.n	8000ba8 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	1aed      	subs	r5, r5, r3
 8000ba0:	e7aa      	b.n	8000af8 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 8000ba2:	6a3b      	ldr	r3, [r7, #32]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0a7      	beq.n	8000af8 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
 8000ba8:	4648      	mov	r0, r9
 8000baa:	f019 fd9b 	bl	801a6e4 <strlen>
				if (strl && strl_cnt < strl_len) {
 8000bae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bb0:	b143      	cbz	r3, 8000bc4 <cbprintf_package_convert+0x1b0>
 8000bb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000bb6:	429e      	cmp	r6, r3
		return 1 + strlen(str);
 8000bb8:	bf3f      	itttt	cc
 8000bba:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
 8000bbc:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
 8000bbe:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
 8000bc2:	3601      	addcc	r6, #1
				out_len += (len - 1);
 8000bc4:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
 8000bc6:	e797      	b.n	8000af8 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 8000bc8:	f1ba 0f00 	cmp.w	sl, #0
 8000bcc:	d072      	beq.n	8000cb4 <cbprintf_package_convert+0x2a0>
 8000bce:	f01b 0604 	ands.w	r6, fp, #4
 8000bd2:	d072      	beq.n	8000cba <cbprintf_package_convert+0x2a6>
		keep_cnt = ros_nbr;
 8000bd4:	46d1      	mov	r9, sl
		scpy_cnt = 0;
 8000bd6:	2600      	movs	r6, #0
		dst = keep_str_pos;
 8000bd8:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
 8000bdc:	4652      	mov	r2, sl
 8000bde:	4641      	mov	r1, r8
 8000be0:	f019 fd93 	bl	801a70a <memcpy>
	str_pos += ros_nbr;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8000bf2:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 8000bf4:	f00b 0302 	and.w	r3, fp, #2
 8000bf8:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	4598      	cmp	r8, r3
 8000bfe:	d15e      	bne.n	8000cbe <cbprintf_package_convert+0x2aa>
	out_desc.len = in_desc->len;
 8000c00:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 8000c02:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
 8000c06:	61fb      	str	r3, [r7, #28]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 8000c08:	bf08      	it	eq
 8000c0a:	ea4f 0159 	moveq.w	r1, r9, lsr #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 8000c0e:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 8000c10:	bf18      	it	ne
 8000c12:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 8000c14:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 8000c18:	eb06 0203 	add.w	r2, r6, r3
 8000c1c:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 8000c1e:	f040 809d 	bne.w	8000d5c <cbprintf_package_convert+0x348>
 8000c22:	f01b 0f04 	tst.w	fp, #4
 8000c26:	bf14      	ite	ne
 8000c28:	4648      	movne	r0, r9
 8000c2a:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
 8000c2c:	f894 b002 	ldrb.w	fp, [r4, #2]
 8000c30:	f894 8003 	ldrb.w	r8, [r4, #3]
 8000c34:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
 8000c36:	7062      	strb	r2, [r4, #1]
 8000c38:	70a0      	strb	r0, [r4, #2]
	rv = cb(in_packaged, args_size, ctx);
 8000c3a:	4620      	mov	r0, r4
	*in_desc = out_desc;
 8000c3c:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	68f9      	ldr	r1, [r7, #12]
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	4798      	blx	r3
	if (rv < 0) {
 8000c46:	1e05      	subs	r5, r0, #0
 8000c48:	f6ff af11 	blt.w	8000a6e <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
 8000c4c:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8000c4e:	4649      	mov	r1, r9
	*in_desc = in_desc_backup;
 8000c50:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8000c54:	f107 0040 	add.w	r0, r7, #64	; 0x40
	*in_desc = in_desc_backup;
 8000c58:	7023      	strb	r3, [r4, #0]
 8000c5a:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8000c5c:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
 8000c5e:	7063      	strb	r3, [r4, #1]
 8000c60:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	4798      	blx	r3
	if (rv < 0) {
 8000c68:	f1b0 0800 	subs.w	r8, r0, #0
 8000c6c:	f2c0 80a3 	blt.w	8000db6 <cbprintf_package_convert+0x3a2>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
 8000c70:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
 8000c72:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
 8000c74:	eba3 010a 	sub.w	r1, r3, sl
 8000c78:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
 8000c7a:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
 8000c7c:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	4798      	blx	r3
	if (rv < 0) {
 8000c86:	2800      	cmp	r0, #0
 8000c88:	f2c0 8097 	blt.w	8000dba <cbprintf_package_convert+0x3a6>
	out_len += rv;
 8000c8c:	44a8      	add	r8, r5
	for (unsigned int i = 0; i < scpy_cnt; i++) {
 8000c8e:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
 8000c92:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	out_len += rv;
 8000c96:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
 8000c9a:	45b3      	cmp	fp, r6
 8000c9c:	d360      	bcc.n	8000d60 <cbprintf_package_convert+0x34c>
	(void)cb(NULL, 0, ctx);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	4798      	blx	r3
	return out_len;
 8000ca8:	e6e1      	b.n	8000a6e <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
 8000caa:	f04f 0900 	mov.w	r9, #0
 8000cae:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000cb2:	e793      	b.n	8000bdc <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
 8000cb4:	4656      	mov	r6, sl
		keep_cnt = 0;
 8000cb6:	46d1      	mov	r9, sl
 8000cb8:	e794      	b.n	8000be4 <cbprintf_package_convert+0x1d0>
 8000cba:	46b1      	mov	r9, r6
 8000cbc:	e792      	b.n	8000be4 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
 8000cbe:	f818 1b02 	ldrb.w	r1, [r8], #2
 8000cc2:	4a3f      	ldr	r2, [pc, #252]	; (8000dc0 <cbprintf_package_convert+0x3ac>)
		uint8_t arg_pos = *str_pos++;
 8000cc4:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
 8000cc8:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d302      	bcc.n	8000cd6 <cbprintf_package_convert+0x2c2>
 8000cd0:	4a3c      	ldr	r2, [pc, #240]	; (8000dc4 <cbprintf_package_convert+0x3b0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d31c      	bcc.n	8000d10 <cbprintf_package_convert+0x2fc>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	b123      	cbz	r3, 8000ce4 <cbprintf_package_convert+0x2d0>
 8000cda:	69f8      	ldr	r0, [r7, #28]
 8000cdc:	f019 f846 	bl	8019d6c <is_ptr>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d18a      	bne.n	8000bfa <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	b9f3      	cbnz	r3, 8000d26 <cbprintf_package_convert+0x312>
				keep_str_pos[keep_cnt++] = arg_idx;
 8000ce8:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8000cec:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000cf0:	f109 0301 	add.w	r3, r9, #1
				keep_str_pos[keep_cnt++] = arg_pos;
 8000cf4:	f109 0902 	add.w	r9, r9, #2
				keep_str_pos[keep_cnt++] = arg_idx;
 8000cf8:	4402      	add	r2, r0
				keep_str_pos[keep_cnt++] = arg_pos;
 8000cfa:	fa5f f989 	uxtb.w	r9, r9
				keep_str_pos[keep_cnt++] = arg_idx;
 8000cfe:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
 8000d02:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d06:	fa52 f383 	uxtab	r3, r2, r3
 8000d0a:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
 8000d0e:	e774      	b.n	8000bfa <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	b12b      	cbz	r3, 8000d20 <cbprintf_package_convert+0x30c>
 8000d14:	69f8      	ldr	r0, [r7, #28]
 8000d16:	f019 f829 	bl	8019d6c <is_ptr>
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	f47f af6d 	bne.w	8000bfa <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 8000d20:	f01b 0f01 	tst.w	fp, #1
 8000d24:	d009      	beq.n	8000d3a <cbprintf_package_convert+0x326>
				cpy_str_pos[scpy_cnt++] = arg_pos;
 8000d26:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8000d2a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d2e:	1c73      	adds	r3, r6, #1
 8000d30:	1856      	adds	r6, r2, r1
 8000d32:	f806 5c20 	strb.w	r5, [r6, #-32]
 8000d36:	b2de      	uxtb	r6, r3
 8000d38:	e75f      	b.n	8000bfa <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 8000d3a:	f01b 0f04 	tst.w	fp, #4
 8000d3e:	f43f af5c 	beq.w	8000bfa <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
 8000d42:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8000d46:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d4a:	f109 0301 	add.w	r3, r9, #1
 8000d4e:	eb02 0901 	add.w	r9, r2, r1
 8000d52:	f809 5c10 	strb.w	r5, [r9, #-16]
 8000d56:	fa5f f983 	uxtb.w	r9, r3
 8000d5a:	e74e      	b.n	8000bfa <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e765      	b.n	8000c2c <cbprintf_package_convert+0x218>
		uint8_t loc = cpy_str_pos[i];
 8000d60:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
 8000d64:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
 8000d68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
 8000d6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d6e:	b1fb      	cbz	r3, 8000db0 <cbprintf_package_convert+0x39c>
 8000d70:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	2101      	movs	r1, #1
 8000d78:	f107 002f 	add.w	r0, r7, #47	; 0x2f
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	4798      	blx	r3
		if (rv < 0) {
 8000d80:	2800      	cmp	r0, #0
 8000d82:	db1a      	blt.n	8000dba <cbprintf_package_convert+0x3a6>
		out_len += rv;
 8000d84:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
 8000d86:	f1b8 0f00 	cmp.w	r8, #0
 8000d8a:	d106      	bne.n	8000d9a <cbprintf_package_convert+0x386>
 8000d8c:	4648      	mov	r0, r9
 8000d8e:	f019 fca9 	bl	801a6e4 <strlen>
 8000d92:	f100 0801 	add.w	r8, r0, #1
 8000d96:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4641      	mov	r1, r8
 8000d9e:	4648      	mov	r0, r9
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	4798      	blx	r3
		if (rv < 0) {
 8000da4:	2800      	cmp	r0, #0
 8000da6:	db08      	blt.n	8000dba <cbprintf_package_convert+0x3a6>
		out_len += rv;
 8000da8:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
 8000daa:	f10b 0b01 	add.w	fp, fp, #1
 8000dae:	e774      	b.n	8000c9a <cbprintf_package_convert+0x286>
		uint16_t str_len = strl ? strl[i] : 0;
 8000db0:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
 8000db4:	e7de      	b.n	8000d74 <cbprintf_package_convert+0x360>
 8000db6:	4645      	mov	r5, r8
 8000db8:	e659      	b.n	8000a6e <cbprintf_package_convert+0x5a>
 8000dba:	4605      	mov	r5, r0
 8000dbc:	e657      	b.n	8000a6e <cbprintf_package_convert+0x5a>
 8000dbe:	bf00      	nop
 8000dc0:	0802824c 	.word	0x0802824c
 8000dc4:	0802e0e8 	.word	0x0802e0e8
 8000dc8:	08029ed9 	.word	0x08029ed9
 8000dcc:	01000004 	.word	0x01000004
 8000dd0:	080289a4 	.word	0x080289a4

08000dd4 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
 8000dd4:	4b01      	ldr	r3, [pc, #4]	; (8000ddc <__printk_hook_install+0x8>)
 8000dd6:	6018      	str	r0, [r3, #0]
}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	24000000 	.word	0x24000000

08000de0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8000de0:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
 8000de2:	2500      	movs	r5, #0
{
 8000de4:	b087      	sub	sp, #28
 8000de6:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 8000de8:	9500      	str	r5, [sp, #0]
	struct str_context ctx = { str, size, 0 };
 8000dea:	9505      	str	r5, [sp, #20]
 8000dec:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8000df0:	a903      	add	r1, sp, #12
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <vsnprintk+0x28>)
 8000df4:	f000 f80a 	bl	8000e0c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
 8000df8:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8000dfc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 8000dfe:	bfb8      	it	lt
 8000e00:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 8000e02:	b007      	add	sp, #28
 8000e04:	bd30      	pop	{r4, r5, pc}
 8000e06:	bf00      	nop
 8000e08:	08019dbb 	.word	0x08019dbb

08000e0c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8000e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e10:	4681      	mov	r9, r0
 8000e12:	b095      	sub	sp, #84	; 0x54
 8000e14:	468b      	mov	fp, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8000e1a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000e1c:	7838      	ldrb	r0, [r7, #0]
 8000e1e:	b908      	cbnz	r0, 8000e24 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000e20:	4628      	mov	r0, r5
 8000e22:	e358      	b.n	80014d6 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
 8000e24:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 8000e26:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000e28:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 8000e2a:	d006      	beq.n	8000e3a <z_cbvprintf_impl+0x2e>
			OUTC('%');
 8000e2c:	4659      	mov	r1, fp
 8000e2e:	47c8      	blx	r9
 8000e30:	2800      	cmp	r0, #0
 8000e32:	f2c0 8350 	blt.w	80014d6 <z_cbvprintf_impl+0x6ca>
 8000e36:	3501      	adds	r5, #1
		if (bps == NULL) {
 8000e38:	e1fb      	b.n	8001232 <z_cbvprintf_impl+0x426>
		} state = {
 8000e3a:	2218      	movs	r2, #24
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	a80e      	add	r0, sp, #56	; 0x38
 8000e40:	f019 fc6e 	bl	801a720 <memset>
	if (*sp == '%') {
 8000e44:	787b      	ldrb	r3, [r7, #1]
 8000e46:	2b25      	cmp	r3, #37	; 0x25
 8000e48:	d07d      	beq.n	8000f46 <z_cbvprintf_impl+0x13a>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	1c78      	adds	r0, r7, #1
 8000e4e:	4698      	mov	r8, r3
 8000e50:	469e      	mov	lr, r3
 8000e52:	469c      	mov	ip, r3
 8000e54:	461e      	mov	r6, r3
 8000e56:	4601      	mov	r1, r0
		switch (*sp) {
 8000e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e5c:	2a2b      	cmp	r2, #43	; 0x2b
 8000e5e:	f000 80a1 	beq.w	8000fa4 <z_cbvprintf_impl+0x198>
 8000e62:	f200 8098 	bhi.w	8000f96 <z_cbvprintf_impl+0x18a>
 8000e66:	2a20      	cmp	r2, #32
 8000e68:	f000 809f 	beq.w	8000faa <z_cbvprintf_impl+0x19e>
 8000e6c:	2a23      	cmp	r2, #35	; 0x23
 8000e6e:	f000 809f 	beq.w	8000fb0 <z_cbvprintf_impl+0x1a4>
 8000e72:	b12b      	cbz	r3, 8000e80 <z_cbvprintf_impl+0x74>
 8000e74:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000e80:	f1b8 0f00 	cmp.w	r8, #0
 8000e84:	d005      	beq.n	8000e92 <z_cbvprintf_impl+0x86>
 8000e86:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000e8a:	f043 0320 	orr.w	r3, r3, #32
 8000e8e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000e92:	f1be 0f00 	cmp.w	lr, #0
 8000e96:	d005      	beq.n	8000ea4 <z_cbvprintf_impl+0x98>
 8000e98:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000e9c:	f043 0310 	orr.w	r3, r3, #16
 8000ea0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000ea4:	f1bc 0f00 	cmp.w	ip, #0
 8000ea8:	d005      	beq.n	8000eb6 <z_cbvprintf_impl+0xaa>
 8000eaa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000eb6:	b12e      	cbz	r6, 8000ec4 <z_cbvprintf_impl+0xb8>
 8000eb8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 8000ec4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000ec8:	f003 0044 	and.w	r0, r3, #68	; 0x44
 8000ecc:	2844      	cmp	r0, #68	; 0x44
 8000ece:	d103      	bne.n	8000ed8 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 8000ed0:	f36f 1386 	bfc	r3, #6, #1
 8000ed4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 8000ed8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 8000edc:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 8000ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 8000ee6:	d17f      	bne.n	8000fe8 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
 8000ee8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 8000eec:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 8000eee:	f042 0201 	orr.w	r2, r2, #1
 8000ef2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	2a2e      	cmp	r2, #46	; 0x2e
 8000efa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000efe:	bf0c      	ite	eq
 8000f00:	2101      	moveq	r1, #1
 8000f02:	2100      	movne	r1, #0
 8000f04:	f361 0241 	bfi	r2, r1, #1, #1
 8000f08:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 8000f0c:	d178      	bne.n	8001000 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
 8000f0e:	785a      	ldrb	r2, [r3, #1]
 8000f10:	2a2a      	cmp	r2, #42	; 0x2a
 8000f12:	d06e      	beq.n	8000ff2 <z_cbvprintf_impl+0x1e6>
	++sp;
 8000f14:	3301      	adds	r3, #1
	size_t val = 0;
 8000f16:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000f18:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000f22:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 8000f26:	2e09      	cmp	r6, #9
 8000f28:	f240 8095 	bls.w	8001056 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 8000f2c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 8000f30:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 8000f32:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8000f36:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 8000f3a:	460a      	mov	r2, r1
 8000f3c:	f360 0241 	bfi	r2, r0, #1, #1
 8000f40:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000f44:	e05c      	b.n	8001000 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
 8000f46:	1cba      	adds	r2, r7, #2
 8000f48:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 8000f4c:	9203      	str	r2, [sp, #12]
		if (conv->width_star) {
 8000f4e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8000f52:	07da      	lsls	r2, r3, #31
 8000f54:	f140 812e 	bpl.w	80011b4 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
 8000f58:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 8000f5c:	f1b8 0f00 	cmp.w	r8, #0
 8000f60:	da07      	bge.n	8000f72 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
 8000f62:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
 8000f66:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
 8000f6a:	f042 0204 	orr.w	r2, r2, #4
 8000f6e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
 8000f72:	075e      	lsls	r6, r3, #29
 8000f74:	f140 8127 	bpl.w	80011c6 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
 8000f78:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 8000f7c:	f1ba 0f00 	cmp.w	sl, #0
 8000f80:	f280 8126 	bge.w	80011d0 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
 8000f84:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8000f88:	f36f 0341 	bfc	r3, #1, #1
 8000f8c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 8000f90:	f04f 3aff 	mov.w	sl, #4294967295
 8000f94:	e11c      	b.n	80011d0 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
 8000f96:	2a2d      	cmp	r2, #45	; 0x2d
 8000f98:	d00d      	beq.n	8000fb6 <z_cbvprintf_impl+0x1aa>
 8000f9a:	2a30      	cmp	r2, #48	; 0x30
 8000f9c:	f47f af69 	bne.w	8000e72 <z_cbvprintf_impl+0x66>
 8000fa0:	2301      	movs	r3, #1
	} while (loop);
 8000fa2:	e758      	b.n	8000e56 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	e755      	b.n	8000e56 <z_cbvprintf_impl+0x4a>
 8000faa:	f04f 0e01 	mov.w	lr, #1
 8000fae:	e752      	b.n	8000e56 <z_cbvprintf_impl+0x4a>
 8000fb0:	f04f 0801 	mov.w	r8, #1
 8000fb4:	e74f      	b.n	8000e56 <z_cbvprintf_impl+0x4a>
 8000fb6:	2601      	movs	r6, #1
 8000fb8:	e74d      	b.n	8000e56 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
 8000fba:	fb0e 6202 	mla	r2, lr, r2, r6
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	3a30      	subs	r2, #48	; 0x30
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f810 6b01 	ldrb.w	r6, [r0], #1
 8000fc8:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 8000fcc:	f1bc 0f09 	cmp.w	ip, #9
 8000fd0:	d9f3      	bls.n	8000fba <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
 8000fd2:	4299      	cmp	r1, r3
 8000fd4:	d08f      	beq.n	8000ef6 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 8000fd6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 8000fda:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 8000fdc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 8000fde:	f362 0141 	bfi	r1, r2, #1, #1
 8000fe2:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 8000fe6:	e786      	b.n	8000ef6 <z_cbvprintf_impl+0xea>
 8000fe8:	460b      	mov	r3, r1
	size_t val = 0;
 8000fea:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000fec:	f04f 0e0a 	mov.w	lr, #10
 8000ff0:	e7e7      	b.n	8000fc2 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
 8000ff2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 8000ff6:	3302      	adds	r3, #2
		conv->prec_star = true;
 8000ff8:	f042 0204 	orr.w	r2, r2, #4
 8000ffc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	2a6c      	cmp	r2, #108	; 0x6c
 8001004:	d047      	beq.n	8001096 <z_cbvprintf_impl+0x28a>
 8001006:	d82b      	bhi.n	8001060 <z_cbvprintf_impl+0x254>
 8001008:	2a68      	cmp	r2, #104	; 0x68
 800100a:	d031      	beq.n	8001070 <z_cbvprintf_impl+0x264>
 800100c:	2a6a      	cmp	r2, #106	; 0x6a
 800100e:	d04b      	beq.n	80010a8 <z_cbvprintf_impl+0x29c>
 8001010:	2a4c      	cmp	r2, #76	; 0x4c
 8001012:	d051      	beq.n	80010b8 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
 8001014:	461a      	mov	r2, r3
 8001016:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
 800101a:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
 800101c:	9203      	str	r2, [sp, #12]
 800101e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001022:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
 8001026:	f200 80be 	bhi.w	80011a6 <z_cbvprintf_impl+0x39a>
 800102a:	2b6d      	cmp	r3, #109	; 0x6d
 800102c:	d851      	bhi.n	80010d2 <z_cbvprintf_impl+0x2c6>
 800102e:	2b69      	cmp	r3, #105	; 0x69
 8001030:	f200 80b9 	bhi.w	80011a6 <z_cbvprintf_impl+0x39a>
 8001034:	2b57      	cmp	r3, #87	; 0x57
 8001036:	d867      	bhi.n	8001108 <z_cbvprintf_impl+0x2fc>
 8001038:	2b41      	cmp	r3, #65	; 0x41
 800103a:	d003      	beq.n	8001044 <z_cbvprintf_impl+0x238>
 800103c:	3b45      	subs	r3, #69	; 0x45
 800103e:	2b02      	cmp	r3, #2
 8001040:	f200 80b1 	bhi.w	80011a6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 8001044:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8001048:	2204      	movs	r2, #4
 800104a:	f362 0302 	bfi	r3, r2, #0, #3
 800104e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 8001052:	2301      	movs	r3, #1
			break;
 8001054:	e073      	b.n	800113e <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
 8001056:	fb0c 0202 	mla	r2, ip, r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	3a30      	subs	r2, #48	; 0x30
 800105e:	e75d      	b.n	8000f1c <z_cbvprintf_impl+0x110>
	switch (*sp) {
 8001060:	2a74      	cmp	r2, #116	; 0x74
 8001062:	d025      	beq.n	80010b0 <z_cbvprintf_impl+0x2a4>
 8001064:	2a7a      	cmp	r2, #122	; 0x7a
 8001066:	d1d5      	bne.n	8001014 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
 8001068:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800106c:	2106      	movs	r1, #6
 800106e:	e00c      	b.n	800108a <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
 8001070:	785a      	ldrb	r2, [r3, #1]
 8001072:	2a68      	cmp	r2, #104	; 0x68
 8001074:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8001078:	d106      	bne.n	8001088 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
 800107a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 800107c:	f361 02c6 	bfi	r2, r1, #3, #4
			++sp;
 8001080:	3302      	adds	r3, #2
			conv->length_mod = LENGTH_LL;
 8001082:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 8001086:	e7c5      	b.n	8001014 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
 8001088:	2102      	movs	r1, #2
 800108a:	f361 02c6 	bfi	r2, r1, #3, #4
 800108e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 8001092:	3301      	adds	r3, #1
 8001094:	e7be      	b.n	8001014 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
 8001096:	785a      	ldrb	r2, [r3, #1]
 8001098:	2a6c      	cmp	r2, #108	; 0x6c
 800109a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800109e:	d101      	bne.n	80010a4 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
 80010a0:	2104      	movs	r1, #4
 80010a2:	e7eb      	b.n	800107c <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
 80010a4:	2103      	movs	r1, #3
 80010a6:	e7f0      	b.n	800108a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
 80010a8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80010ac:	2105      	movs	r1, #5
 80010ae:	e7ec      	b.n	800108a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
 80010b0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80010b4:	2107      	movs	r1, #7
 80010b6:	e7e8      	b.n	800108a <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
 80010b8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80010bc:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80010c0:	f022 0202 	bic.w	r2, r2, #2
 80010c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010c8:	f042 0202 	orr.w	r2, r2, #2
 80010cc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 80010d0:	e7df      	b.n	8001092 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
 80010d2:	3b6e      	subs	r3, #110	; 0x6e
 80010d4:	b2d9      	uxtb	r1, r3
 80010d6:	2301      	movs	r3, #1
 80010d8:	408b      	lsls	r3, r1
 80010da:	f240 4182 	movw	r1, #1154	; 0x482
 80010de:	420b      	tst	r3, r1
 80010e0:	d137      	bne.n	8001152 <z_cbvprintf_impl+0x346>
 80010e2:	f013 0f24 	tst.w	r3, #36	; 0x24
 80010e6:	d151      	bne.n	800118c <z_cbvprintf_impl+0x380>
 80010e8:	07d8      	lsls	r0, r3, #31
 80010ea:	d55c      	bpl.n	80011a6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 80010ec:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80010f0:	2103      	movs	r1, #3
 80010f2:	f361 0302 	bfi	r3, r1, #0, #3
 80010f6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 80010fa:	f002 0378 	and.w	r3, r2, #120	; 0x78
 80010fe:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 8001102:	424b      	negs	r3, r1
 8001104:	414b      	adcs	r3, r1
 8001106:	e01a      	b.n	800113e <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
 8001108:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 800110c:	2001      	movs	r0, #1
 800110e:	b2c9      	uxtb	r1, r1
 8001110:	fa00 f101 	lsl.w	r1, r0, r1
 8001114:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 8001118:	d194      	bne.n	8001044 <z_cbvprintf_impl+0x238>
 800111a:	f640 0601 	movw	r6, #2049	; 0x801
 800111e:	4231      	tst	r1, r6
 8001120:	d11d      	bne.n	800115e <z_cbvprintf_impl+0x352>
 8001122:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 8001126:	d03e      	beq.n	80011a6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 8001128:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800112c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001130:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_SINT;
 8001134:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001138:	2a40      	cmp	r2, #64	; 0x40
 800113a:	d034      	beq.n	80011a6 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
 800113c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 800113e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001142:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8001146:	430b      	orrs	r3, r1
 8001148:	f363 0241 	bfi	r2, r3, #1, #1
 800114c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8001150:	e6fd      	b.n	8000f4e <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 8001152:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8001156:	2102      	movs	r1, #2
 8001158:	f361 0302 	bfi	r3, r1, #0, #3
 800115c:	e7e8      	b.n	8001130 <z_cbvprintf_impl+0x324>
 800115e:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
 8001162:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001164:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8001168:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 800116c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 800116e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 8001172:	bf02      	ittt	eq
 8001174:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 8001178:	f041 0101 	orreq.w	r1, r1, #1
 800117c:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 8001180:	2b63      	cmp	r3, #99	; 0x63
 8001182:	d1db      	bne.n	800113c <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8001184:	1e13      	subs	r3, r2, #0
 8001186:	bf18      	it	ne
 8001188:	2301      	movne	r3, #1
 800118a:	e7d8      	b.n	800113e <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 800118c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8001190:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 8001192:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8001196:	f361 0302 	bfi	r3, r1, #0, #3
 800119a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 800119e:	bf14      	ite	ne
 80011a0:	2301      	movne	r3, #1
 80011a2:	2300      	moveq	r3, #0
 80011a4:	e7cb      	b.n	800113e <z_cbvprintf_impl+0x332>
		conv->invalid = true;
 80011a6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 80011b2:	e7c3      	b.n	800113c <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
 80011b4:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 80011b8:	2a00      	cmp	r2, #0
			width = conv->width_value;
 80011ba:	bfb4      	ite	lt
 80011bc:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
 80011c0:	f04f 38ff 	movge.w	r8, #4294967295
 80011c4:	e6d5      	b.n	8000f72 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
 80011c6:	0798      	lsls	r0, r3, #30
 80011c8:	f57f aee2 	bpl.w	8000f90 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
 80011cc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
 80011d0:	2300      	movs	r3, #0
			= (enum length_mod_enum)conv->length_mod;
 80011d2:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_pre_exp = 0;
 80011d6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 80011da:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
 80011de:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		enum specifier_cat_enum specifier_cat
 80011e2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d133      	bne.n	8001252 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
 80011ea:	1ecb      	subs	r3, r1, #3
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d804      	bhi.n	80011fa <z_cbvprintf_impl+0x3ee>
 80011f0:	e8df f003 	tbb	[pc, r3]
 80011f4:	21464621 	.word	0x21464621
 80011f8:	21          	.byte	0x21
 80011f9:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 80011fa:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 80011fc:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 80011fe:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8001202:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 8001206:	d11c      	bne.n	8001242 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
 8001208:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 800120c:	17da      	asrs	r2, r3, #31
 800120e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
 8001212:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 8001214:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8001218:	f013 0603 	ands.w	r6, r3, #3
 800121c:	d050      	beq.n	80012c0 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
 800121e:	9b03      	ldr	r3, [sp, #12]
 8001220:	463a      	mov	r2, r7
 8001222:	4659      	mov	r1, fp
 8001224:	4648      	mov	r0, r9
 8001226:	f018 ff1f 	bl	801a068 <outs>
 800122a:	2800      	cmp	r0, #0
 800122c:	f2c0 8153 	blt.w	80014d6 <z_cbvprintf_impl+0x6ca>
 8001230:	4405      	add	r5, r0
			continue;
 8001232:	9f03      	ldr	r7, [sp, #12]
 8001234:	e5f2      	b.n	8000e1c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8001236:	f854 3b04 	ldr.w	r3, [r4], #4
 800123a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 800123c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8001240:	e7e8      	b.n	8001214 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
 8001242:	2902      	cmp	r1, #2
 8001244:	d1e5      	bne.n	8001212 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
 8001246:	b21a      	sxth	r2, r3
 8001248:	f343 33c0 	sbfx	r3, r3, #15, #1
 800124c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001250:	e7df      	b.n	8001212 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8001252:	2b02      	cmp	r3, #2
 8001254:	d124      	bne.n	80012a0 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
 8001256:	1ecb      	subs	r3, r1, #3
 8001258:	2b04      	cmp	r3, #4
 800125a:	d804      	bhi.n	8001266 <z_cbvprintf_impl+0x45a>
 800125c:	e8df f003 	tbb	[pc, r3]
 8001260:	18101018 	.word	0x18101018
 8001264:	18          	.byte	0x18
 8001265:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 8001266:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
 8001268:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	d014      	beq.n	800129c <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
 8001272:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 8001274:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 8001278:	d1cc      	bne.n	8001214 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
 800127a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 800127c:	930e      	str	r3, [sp, #56]	; 0x38
 800127e:	e7c9      	b.n	8001214 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
 8001280:	3407      	adds	r4, #7
 8001282:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8001286:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 800128a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 800128e:	e7c1      	b.n	8001214 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
 8001290:	f854 3b04 	ldr.w	r3, [r4], #4
 8001294:	930e      	str	r3, [sp, #56]	; 0x38
 8001296:	2300      	movs	r3, #0
 8001298:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 800129a:	e7bb      	b.n	8001214 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
 800129c:	b2db      	uxtb	r3, r3
 800129e:	e7cd      	b.n	800123c <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d108      	bne.n	80012b6 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 80012a4:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 80012a6:	f024 0407 	bic.w	r4, r4, #7
 80012aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80012ae:	3408      	adds	r4, #8
 80012b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80012b4:	e7ae      	b.n	8001214 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d1ac      	bne.n	8001214 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
 80012ba:	f854 3b04 	ldr.w	r3, [r4], #4
 80012be:	e7dd      	b.n	800127c <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
 80012c0:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 80012c4:	2878      	cmp	r0, #120	; 0x78
 80012c6:	d8b4      	bhi.n	8001232 <z_cbvprintf_impl+0x426>
 80012c8:	2862      	cmp	r0, #98	; 0x62
 80012ca:	d81c      	bhi.n	8001306 <z_cbvprintf_impl+0x4fa>
 80012cc:	2825      	cmp	r0, #37	; 0x25
 80012ce:	f43f adad 	beq.w	8000e2c <z_cbvprintf_impl+0x20>
 80012d2:	2858      	cmp	r0, #88	; 0x58
 80012d4:	d1ad      	bne.n	8001232 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
 80012d6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80012da:	aa10      	add	r2, sp, #64	; 0x40
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	ab08      	add	r3, sp, #32
 80012e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80012e4:	f018 fe7a 	bl	8019fdc <encode_uint>
			if (precision >= 0) {
 80012e8:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 80012ec:	4607      	mov	r7, r0
			if (precision >= 0) {
 80012ee:	f280 809a 	bge.w	8001426 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
 80012f2:	2f00      	cmp	r7, #0
 80012f4:	d09d      	beq.n	8001232 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 80012f6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80012fa:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 80012fc:	2e00      	cmp	r6, #0
 80012fe:	f000 80c1 	beq.w	8001484 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
 8001302:	3001      	adds	r0, #1
 8001304:	e0be      	b.n	8001484 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
 8001306:	3863      	subs	r0, #99	; 0x63
 8001308:	2815      	cmp	r0, #21
 800130a:	d892      	bhi.n	8001232 <z_cbvprintf_impl+0x426>
 800130c:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <z_cbvprintf_impl+0x508>)
 800130e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8001312:	bf00      	nop
 8001314:	080013e9 	.word	0x080013e9
 8001318:	080013fb 	.word	0x080013fb
 800131c:	08001233 	.word	0x08001233
 8001320:	08001233 	.word	0x08001233
 8001324:	08001233 	.word	0x08001233
 8001328:	08001233 	.word	0x08001233
 800132c:	080013fb 	.word	0x080013fb
 8001330:	08001233 	.word	0x08001233
 8001334:	08001233 	.word	0x08001233
 8001338:	08001233 	.word	0x08001233
 800133c:	08001233 	.word	0x08001233
 8001340:	08001489 	.word	0x08001489
 8001344:	08001421 	.word	0x08001421
 8001348:	08001447 	.word	0x08001447
 800134c:	08001233 	.word	0x08001233
 8001350:	08001233 	.word	0x08001233
 8001354:	0800136d 	.word	0x0800136d
 8001358:	08001233 	.word	0x08001233
 800135c:	08001421 	.word	0x08001421
 8001360:	08001233 	.word	0x08001233
 8001364:	08001233 	.word	0x08001233
 8001368:	08001421 	.word	0x08001421
			if (precision >= 0) {
 800136c:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 8001370:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 8001372:	db35      	blt.n	80013e0 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
 8001374:	4651      	mov	r1, sl
 8001376:	4638      	mov	r0, r7
 8001378:	f019 f9eb 	bl	801a752 <strnlen>
			bpe = bps + len;
 800137c:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 8001380:	2f00      	cmp	r7, #0
 8001382:	f43f af56 	beq.w	8001232 <z_cbvprintf_impl+0x426>
		char sign = 0;
 8001386:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 8001388:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800138c:	f013 0210 	ands.w	r2, r3, #16
 8001390:	9205      	str	r2, [sp, #20]
 8001392:	f000 8093 	beq.w	80014bc <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
 8001396:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8001398:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 800139a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 800139c:	bf48      	it	mi
 800139e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 80013a0:	4410      	add	r0, r2
 80013a2:	9204      	str	r2, [sp, #16]
			nj_len += conv->pad0_pre_exp;
 80013a4:	bf48      	it	mi
 80013a6:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 80013a8:	f1b8 0f00 	cmp.w	r8, #0
 80013ac:	f340 809f 	ble.w	80014ee <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
 80013b0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 80013b4:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 80013b8:	f3c2 0380 	ubfx	r3, r2, #2, #1
 80013bc:	0750      	lsls	r0, r2, #29
 80013be:	9306      	str	r3, [sp, #24]
 80013c0:	f100 8095 	bmi.w	80014ee <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
 80013c4:	0651      	lsls	r1, r2, #25
 80013c6:	f140 8089 	bpl.w	80014dc <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
 80013ca:	b13e      	cbz	r6, 80013dc <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
 80013cc:	4659      	mov	r1, fp
 80013ce:	4630      	mov	r0, r6
 80013d0:	47c8      	blx	r9
 80013d2:	2800      	cmp	r0, #0
 80013d4:	db7f      	blt.n	80014d6 <z_cbvprintf_impl+0x6ca>
 80013d6:	9b06      	ldr	r3, [sp, #24]
 80013d8:	3501      	adds	r5, #1
 80013da:	461e      	mov	r6, r3
					pad = '0';
 80013dc:	2230      	movs	r2, #48	; 0x30
 80013de:	e07e      	b.n	80014de <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
 80013e0:	4638      	mov	r0, r7
 80013e2:	f019 f97f 	bl	801a6e4 <strlen>
 80013e6:	e7c9      	b.n	800137c <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 80013e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
 80013ea:	2600      	movs	r6, #0
			bps = buf;
 80013ec:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 80013ee:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
 80013f2:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 80013f4:	f88d 3020 	strb.w	r3, [sp, #32]
		if (sign != 0) {
 80013f8:	e7c6      	b.n	8001388 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
 80013fa:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 80013fc:	bf56      	itet	pl
 80013fe:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
				sign = '+';
 8001402:	262b      	movmi	r6, #43	; 0x2b
			} else if (conv->flag_space) {
 8001404:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
 8001406:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
 800140a:	2b00      	cmp	r3, #0
 800140c:	f6bf af63 	bge.w	80012d6 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
 8001410:	4252      	negs	r2, r2
				sign = '-';
 8001412:	f04f 062d 	mov.w	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 8001416:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800141a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800141e:	e75a      	b.n	80012d6 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 8001420:	2600      	movs	r6, #0
 8001422:	e758      	b.n	80012d6 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
 8001424:	2600      	movs	r6, #0
				size_t len = bpe - bps;
 8001426:	f10d 0336 	add.w	r3, sp, #54	; 0x36
				conv->flag_zero = false;
 800142a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 800142e:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 8001430:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8001434:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 8001436:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 800143a:	f67f af5a 	bls.w	80012f2 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
 800143e:	ebaa 0303 	sub.w	r3, sl, r3
 8001442:	9311      	str	r3, [sp, #68]	; 0x44
 8001444:	e755      	b.n	80012f2 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
 8001446:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001448:	b390      	cbz	r0, 80014b0 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 800144a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800144e:	aa10      	add	r2, sp, #64	; 0x40
 8001450:	2100      	movs	r1, #0
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	ab08      	add	r3, sp, #32
 8001456:	f018 fdc1 	bl	8019fdc <encode_uint>
				conv->altform_0c = true;
 800145a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 800145e:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8001462:	4607      	mov	r7, r0
				conv->altform_0c = true;
 8001464:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8001468:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 8001474:	dad6      	bge.n	8001424 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
 8001476:	2800      	cmp	r0, #0
 8001478:	f43f aedb 	beq.w	8001232 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 800147c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
		char sign = 0;
 8001480:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 8001482:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
 8001484:	469a      	mov	sl, r3
 8001486:	e77f      	b.n	8001388 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
 8001488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 800148a:	2907      	cmp	r1, #7
 800148c:	f63f aed1 	bhi.w	8001232 <z_cbvprintf_impl+0x426>
 8001490:	e8df f001 	tbb	[pc, r1]
 8001494:	0c06040c 	.word	0x0c06040c
 8001498:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 800149c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 800149e:	e6c8      	b.n	8001232 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
 80014a0:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 80014a2:	e6c6      	b.n	8001232 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
 80014a4:	17ea      	asrs	r2, r5, #31
 80014a6:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 80014aa:	e6c2      	b.n	8001232 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 80014ac:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 80014ae:	e6c0      	b.n	8001232 <z_cbvprintf_impl+0x426>
 80014b0:	4f2e      	ldr	r7, [pc, #184]	; (800156c <z_cbvprintf_impl+0x760>)
		char sign = 0;
 80014b2:	4606      	mov	r6, r0
		size_t nj_len = (bpe - bps);
 80014b4:	2005      	movs	r0, #5
			bpe = bps + 5;
 80014b6:	f107 0a05 	add.w	sl, r7, #5
 80014ba:	e765      	b.n	8001388 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
 80014bc:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 80014be:	bf48      	it	mi
 80014c0:	3001      	addmi	r0, #1
 80014c2:	e769      	b.n	8001398 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
 80014c4:	4610      	mov	r0, r2
 80014c6:	9307      	str	r3, [sp, #28]
 80014c8:	9206      	str	r2, [sp, #24]
 80014ca:	4659      	mov	r1, fp
 80014cc:	47c8      	blx	r9
 80014ce:	2800      	cmp	r0, #0
 80014d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80014d4:	da04      	bge.n	80014e0 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
 80014d6:	b015      	add	sp, #84	; 0x54
 80014d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 80014dc:	2220      	movs	r2, #32
					pad = '0';
 80014de:	4643      	mov	r3, r8
				while (width-- > 0) {
 80014e0:	4619      	mov	r1, r3
 80014e2:	3b01      	subs	r3, #1
 80014e4:	2900      	cmp	r1, #0
 80014e6:	dced      	bgt.n	80014c4 <z_cbvprintf_impl+0x6b8>
 80014e8:	4445      	add	r5, r8
 80014ea:	4698      	mov	r8, r3
 80014ec:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
 80014ee:	b12e      	cbz	r6, 80014fc <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
 80014f0:	4659      	mov	r1, fp
 80014f2:	4630      	mov	r0, r6
 80014f4:	47c8      	blx	r9
 80014f6:	2800      	cmp	r0, #0
 80014f8:	dbed      	blt.n	80014d6 <z_cbvprintf_impl+0x6ca>
 80014fa:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 80014fc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8001500:	06da      	lsls	r2, r3, #27
 8001502:	d401      	bmi.n	8001508 <z_cbvprintf_impl+0x6fc>
 8001504:	071b      	lsls	r3, r3, #28
 8001506:	d505      	bpl.n	8001514 <z_cbvprintf_impl+0x708>
				OUTC('0');
 8001508:	4659      	mov	r1, fp
 800150a:	2030      	movs	r0, #48	; 0x30
 800150c:	47c8      	blx	r9
 800150e:	2800      	cmp	r0, #0
 8001510:	dbe1      	blt.n	80014d6 <z_cbvprintf_impl+0x6ca>
 8001512:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8001514:	9b05      	ldr	r3, [sp, #20]
 8001516:	b133      	cbz	r3, 8001526 <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
 8001518:	4659      	mov	r1, fp
 800151a:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 800151e:	47c8      	blx	r9
 8001520:	2800      	cmp	r0, #0
 8001522:	dbd8      	blt.n	80014d6 <z_cbvprintf_impl+0x6ca>
 8001524:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8001526:	9e04      	ldr	r6, [sp, #16]
 8001528:	442e      	add	r6, r5
 800152a:	e005      	b.n	8001538 <z_cbvprintf_impl+0x72c>
				OUTC('0');
 800152c:	4659      	mov	r1, fp
 800152e:	2030      	movs	r0, #48	; 0x30
 8001530:	47c8      	blx	r9
 8001532:	2800      	cmp	r0, #0
 8001534:	dbcf      	blt.n	80014d6 <z_cbvprintf_impl+0x6ca>
 8001536:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8001538:	1b73      	subs	r3, r6, r5
 800153a:	2b00      	cmp	r3, #0
 800153c:	dcf6      	bgt.n	800152c <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
 800153e:	4653      	mov	r3, sl
 8001540:	463a      	mov	r2, r7
 8001542:	4659      	mov	r1, fp
 8001544:	4648      	mov	r0, r9
 8001546:	f018 fd8f 	bl	801a068 <outs>
 800154a:	2800      	cmp	r0, #0
 800154c:	dbc3      	blt.n	80014d6 <z_cbvprintf_impl+0x6ca>
 800154e:	4405      	add	r5, r0
		while (width > 0) {
 8001550:	44a8      	add	r8, r5
 8001552:	eba8 0305 	sub.w	r3, r8, r5
 8001556:	2b00      	cmp	r3, #0
 8001558:	f77f ae6b 	ble.w	8001232 <z_cbvprintf_impl+0x426>
			OUTC(' ');
 800155c:	4659      	mov	r1, fp
 800155e:	2020      	movs	r0, #32
 8001560:	47c8      	blx	r9
 8001562:	2800      	cmp	r0, #0
 8001564:	dbb7      	blt.n	80014d6 <z_cbvprintf_impl+0x6ca>
 8001566:	3501      	adds	r5, #1
			--width;
 8001568:	e7f3      	b.n	8001552 <z_cbvprintf_impl+0x746>
 800156a:	bf00      	nop
 800156c:	08029f8d 	.word	0x08029f8d

08001570 <stm32h7_init>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001570:	4b32      	ldr	r3, [pc, #200]	; (800163c <stm32h7_init+0xcc>)
 * So the init priority has to be 0 (zero).
 *
 * @return 0
 */
static int stm32h7_init(void)
{
 8001572:	b570      	push	{r4, r5, r6, lr}
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800157a:	d111      	bne.n	80015a0 <stm32h7_init+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001580:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001584:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001588:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800158c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001596:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001598:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800159c:	f3bf 8f6f 	isb	sy
	SCB_EnableICache();

	if (IS_ENABLED(CONFIG_DCACHE)) {
		if (!(SCB->CCR & SCB_CCR_DC_Msk)) {
 80015a0:	4a26      	ldr	r2, [pc, #152]	; (800163c <stm32h7_init+0xcc>)
 80015a2:	6953      	ldr	r3, [r2, #20]
 80015a4:	03d9      	lsls	r1, r3, #15
 80015a6:	d427      	bmi.n	80015f8 <stm32h7_init+0x88>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80015a8:	6953      	ldr	r3, [r2, #20]
 80015aa:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80015ae:	d123      	bne.n	80015f8 <stm32h7_init+0x88>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80015b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015b4:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015b8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015bc:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015c0:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015c4:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80015c8:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015ca:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015ce:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015d0:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80015d4:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015d6:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80015da:	d2f9      	bcs.n	80015d0 <stm32h7_init+0x60>
    } while(sets-- != 0U);
 80015dc:	3b20      	subs	r3, #32
 80015de:	f113 0f20 	cmn.w	r3, #32
 80015e2:	d1f2      	bne.n	80015ca <stm32h7_init+0x5a>
 80015e4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80015e8:	6953      	ldr	r3, [r2, #20]
 80015ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ee:	6153      	str	r3, [r2, #20]
 80015f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
		}
	}

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 64 MHz from HSI */
	SystemCoreClock = 64000000;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <stm32h7_init+0xd0>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <stm32h7_init+0xd4>)
 80015fc:	601a      	str	r2, [r3, #0]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <stm32h7_init+0xd8>)
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	f022 0207 	bic.w	r2, r2, #7
 8001606:	f042 0202 	orr.w	r2, r2, #2
 800160a:	60da      	str	r2, [r3, #12]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001612:	619a      	str	r2, [r3, #24]
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
#if defined (PWR_CPUCR_PDDS_D2)
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 8001614:	699a      	ldr	r2, [r3, #24]
 8001616:	0492      	lsls	r2, r2, #18
 8001618:	d5fc      	bpl.n	8001614 <stm32h7_init+0xa4>
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <stm32h7_init+0xdc>)
 800161c:	681a      	ldr	r2, [r3, #0]
	 * 2.2.9: Reading from AXI SRAM may lead to data read corruption
	 * Workaround: Set the READ_ISS_OVERRIDE bit in the AXI_TARG7_FN_MOD
	 * register.
	 * Applicable only to RevY (REV_ID 0x1003)
	 */
	if (LL_DBGMCU_GetRevisionID() == 0x1003) {
 800161e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001622:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
 8001626:	d106      	bne.n	8001636 <stm32h7_init+0xc6>
		MODIFY_REG(GPV->AXI_TARG7_FN_MOD, 0x1, 0x1);
 8001628:	4a09      	ldr	r2, [pc, #36]	; (8001650 <stm32h7_init+0xe0>)
 800162a:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	}

	return 0;
}
 8001636:	2000      	movs	r0, #0
 8001638:	bd70      	pop	{r4, r5, r6, pc}
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00
 8001640:	2400009c 	.word	0x2400009c
 8001644:	03d09000 	.word	0x03d09000
 8001648:	58024800 	.word	0x58024800
 800164c:	5c001000 	.word	0x5c001000
 8001650:	51008000 	.word	0x51008000

08001654 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
 8001654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001658:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
 800165a:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
 800165c:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8001660:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80016b4 <activate_foreach_backend+0x60>
	while (mask_cpy) {
 8001664:	b914      	cbnz	r4, 800166c <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
 8001666:	4638      	mov	r0, r7
 8001668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
 800166c:	fa94 f5a4 	rbit	r5, r4
 8001670:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
 8001674:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8001678:	012e      	lsls	r6, r5, #4
 800167a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
 800167e:	ea6f 0a03 	mvn.w	sl, r3
 8001682:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8001686:	7b2b      	ldrb	r3, [r5, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0eb      	beq.n	8001664 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
 800168c:	f858 3006 	ldr.w	r3, [r8, r6]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	b94b      	cbnz	r3, 80016a8 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
 8001694:	4446      	add	r6, r8
			log_backend_enable(backend,
 8001696:	2204      	movs	r2, #4
 8001698:	4628      	mov	r0, r5
			mask &= ~BIT(i);
 800169a:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
 800169e:	6873      	ldr	r3, [r6, #4]
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	f000 fa51 	bl	8001b48 <log_backend_enable>
 80016a6:	e7dd      	b.n	8001664 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
 80016a8:	4628      	mov	r0, r5
 80016aa:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d1d9      	bne.n	8001664 <activate_foreach_backend+0x10>
 80016b0:	e7f0      	b.n	8001694 <activate_foreach_backend+0x40>
 80016b2:	bf00      	nop
 80016b4:	080289fc 	.word	0x080289fc

080016b8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
 80016b8:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 80016ba:	2200      	movs	r2, #0
{
 80016bc:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 80016be:	490f      	ldr	r1, [pc, #60]	; (80016fc <enable_logger+0x44>)
 80016c0:	480f      	ldr	r0, [pc, #60]	; (8001700 <enable_logger+0x48>)
 80016c2:	f026 fd8d 	bl	80281e0 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2300      	movs	r3, #0
 80016ca:	2400      	movs	r4, #0
 80016cc:	4d0d      	ldr	r5, [pc, #52]	; (8001704 <enable_logger+0x4c>)
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <enable_logger+0x50>)
 80016d0:	4628      	mov	r0, r5
 80016d2:	9400      	str	r4, [sp, #0]
 80016d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80016d8:	230e      	movs	r3, #14
 80016da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016de:	e9cd 3403 	strd	r3, r4, [sp, #12]
 80016e2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <enable_logger+0x54>)
 80016e8:	f017 fcea 	bl	80190c0 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
 80016ec:	4908      	ldr	r1, [pc, #32]	; (8001710 <enable_logger+0x58>)
 80016ee:	4628      	mov	r0, r5
 80016f0:	f026 fc72 	bl	8027fd8 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
 80016f4:	4620      	mov	r0, r4
 80016f6:	b009      	add	sp, #36	; 0x24
 80016f8:	bd30      	pop	{r4, r5, pc}
 80016fa:	bf00      	nop
 80016fc:	08001715 	.word	0x08001715
 8001700:	24000668 	.word	0x24000668
 8001704:	240001e0 	.word	0x240001e0
 8001708:	24010e40 	.word	0x24010e40
 800170c:	080019f5 	.word	0x080019f5
 8001710:	08029fc0 	.word	0x08029fc0

08001714 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8001714:	4801      	ldr	r0, [pc, #4]	; (800171c <log_process_thread_timer_expiry_fn+0x8>)
 8001716:	f017 bd49 	b.w	80191ac <z_impl_k_sem_give>
 800171a:	bf00      	nop
 800171c:	240001cc 	.word	0x240001cc

08001720 <z_log_init>:
{
 8001720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001724:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
 8001726:	481e      	ldr	r0, [pc, #120]	; (80017a0 <z_log_init+0x80>)
{
 8001728:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
 800172a:	f018 ff1d 	bl	801a568 <atomic_inc>
 800172e:	4606      	mov	r6, r0
 8001730:	b378      	cbz	r0, 8001792 <z_log_init+0x72>
	uint32_t mask = 0;
 8001732:	2500      	movs	r5, #0
}
 8001734:	4628      	mov	r0, r5
 8001736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
 800173a:	7b23      	ldrb	r3, [r4, #12]
 800173c:	b173      	cbz	r3, 800175c <z_log_init+0x3c>
	if (backend->api->init) {
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	b10b      	cbz	r3, 8001748 <z_log_init+0x28>
		backend->api->init(backend);
 8001744:	4620      	mov	r0, r4
 8001746:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	b9cb      	cbnz	r3, 8001782 <z_log_init+0x62>
				log_backend_enable(backend,
 800174e:	6863      	ldr	r3, [r4, #4]
 8001750:	2204      	movs	r2, #4
 8001752:	4620      	mov	r0, r4
 8001754:	6819      	ldr	r1, [r3, #0]
 8001756:	f000 f9f7 	bl	8001b48 <log_backend_enable>
			i++;
 800175a:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 800175c:	3410      	adds	r4, #16
 800175e:	454c      	cmp	r4, r9
 8001760:	d3eb      	bcc.n	800173a <z_log_init+0x1a>
	if (blocking) {
 8001762:	f1b8 0f00 	cmp.w	r8, #0
 8001766:	d0e5      	beq.n	8001734 <z_log_init+0x14>
		while (mask) {
 8001768:	2d00      	cmp	r5, #0
 800176a:	d0e2      	beq.n	8001732 <z_log_init+0x12>
			mask = activate_foreach_backend(mask);
 800176c:	4628      	mov	r0, r5
 800176e:	f7ff ff71 	bl	8001654 <activate_foreach_backend>
 8001772:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
 8001774:	2f00      	cmp	r7, #0
 8001776:	d0f7      	beq.n	8001768 <z_log_init+0x48>
	return z_impl_k_sleep(timeout);
 8001778:	2100      	movs	r1, #0
 800177a:	2064      	movs	r0, #100	; 0x64
 800177c:	f017 ffde 	bl	801973c <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 8001780:	e7f2      	b.n	8001768 <z_log_init+0x48>
		return backend->api->is_ready(backend);
 8001782:	4620      	mov	r0, r4
 8001784:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
 8001786:	2800      	cmp	r0, #0
 8001788:	d0e1      	beq.n	800174e <z_log_init+0x2e>
				mask |= BIT(i);
 800178a:	fa0a f306 	lsl.w	r3, sl, r6
 800178e:	431d      	orrs	r5, r3
 8001790:	e7e3      	b.n	800175a <z_log_init+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001792:	4c04      	ldr	r4, [pc, #16]	; (80017a4 <z_log_init+0x84>)
	uint32_t mask = 0;
 8001794:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001796:	f8df 9010 	ldr.w	r9, [pc, #16]	; 80017a8 <z_log_init+0x88>
				mask |= BIT(i);
 800179a:	f04f 0a01 	mov.w	sl, #1
 800179e:	e7de      	b.n	800175e <z_log_init+0x3e>
 80017a0:	24000fe0 	.word	0x24000fe0
 80017a4:	080289fc 	.word	0x080289fc
 80017a8:	08028a0c 	.word	0x08028a0c

080017ac <log_format_func_t_get>:
}
 80017ac:	4b01      	ldr	r3, [pc, #4]	; (80017b4 <log_format_func_t_get+0x8>)
 80017ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80017b2:	4770      	bx	lr
 80017b4:	08028aa4 	.word	0x08028aa4

080017b8 <log_set_timestamp_func>:
{
 80017b8:	b508      	push	{r3, lr}
 80017ba:	4603      	mov	r3, r0
 80017bc:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
 80017be:	b12b      	cbz	r3, 80017cc <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <log_set_timestamp_func+0x1c>)
 80017c2:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
 80017c4:	f000 fc74 	bl	80020b0 <log_output_timestamp_freq_set>
	return 0;
 80017c8:	2000      	movs	r0, #0
}
 80017ca:	bd08      	pop	{r3, pc}
		return -EINVAL;
 80017cc:	f06f 0015 	mvn.w	r0, #21
 80017d0:	e7fb      	b.n	80017ca <log_set_timestamp_func+0x12>
 80017d2:	bf00      	nop
 80017d4:	24000004 	.word	0x24000004

080017d8 <z_log_notify_backend_enabled>:
{
 80017d8:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 80017da:	4c04      	ldr	r4, [pc, #16]	; (80017ec <z_log_notify_backend_enabled+0x14>)
 80017dc:	7823      	ldrb	r3, [r4, #0]
 80017de:	b913      	cbnz	r3, 80017e6 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <z_log_notify_backend_enabled+0x18>)
 80017e2:	f017 fce3 	bl	80191ac <z_impl_k_sem_give>
	backend_attached = true;
 80017e6:	2301      	movs	r3, #1
 80017e8:	7023      	strb	r3, [r4, #0]
}
 80017ea:	bd10      	pop	{r4, pc}
 80017ec:	24010d24 	.word	0x24010d24
 80017f0:	240001cc 	.word	0x240001cc

080017f4 <z_log_dropped>:
{
 80017f4:	b510      	push	{r4, lr}
 80017f6:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
 80017f8:	4808      	ldr	r0, [pc, #32]	; (800181c <z_log_dropped+0x28>)
 80017fa:	f018 feb5 	bl	801a568 <atomic_inc>
	if (buffered) {
 80017fe:	b15c      	cbz	r4, 8001818 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <z_log_dropped+0x2c>)
 8001802:	f3bf 8f5b 	dmb	ish
 8001806:	e853 1f00 	ldrex	r1, [r3]
 800180a:	3901      	subs	r1, #1
 800180c:	e843 1200 	strex	r2, r1, [r3]
 8001810:	2a00      	cmp	r2, #0
 8001812:	d1f8      	bne.n	8001806 <z_log_dropped+0x12>
 8001814:	f3bf 8f5b 	dmb	ish
}
 8001818:	bd10      	pop	{r4, pc}
 800181a:	bf00      	nop
 800181c:	24000fd8 	.word	0x24000fd8
 8001820:	24000fdc 	.word	0x24000fdc

08001824 <z_log_dropped_read_and_clear>:
}
 8001824:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <z_log_dropped_read_and_clear+0x1c>)
 8001828:	f3bf 8f5b 	dmb	ish
 800182c:	4601      	mov	r1, r0
 800182e:	e853 0f00 	ldrex	r0, [r3]
 8001832:	e843 1200 	strex	r2, r1, [r3]
 8001836:	2a00      	cmp	r2, #0
 8001838:	d1f9      	bne.n	800182e <z_log_dropped_read_and_clear+0xa>
 800183a:	f3bf 8f5b 	dmb	ish
 800183e:	4770      	bx	lr
 8001840:	24000fd8 	.word	0x24000fd8

08001844 <dropped_notify>:
{
 8001844:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 8001846:	f7ff ffed 	bl	8001824 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 800184a:	4c08      	ldr	r4, [pc, #32]	; (800186c <dropped_notify+0x28>)
	uint32_t dropped = z_log_dropped_read_and_clear();
 800184c:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 800184e:	4e08      	ldr	r6, [pc, #32]	; (8001870 <dropped_notify+0x2c>)
 8001850:	42b4      	cmp	r4, r6
 8001852:	d300      	bcc.n	8001856 <dropped_notify+0x12>
}
 8001854:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8001856:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8001858:	795b      	ldrb	r3, [r3, #5]
 800185a:	b12b      	cbz	r3, 8001868 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	b113      	cbz	r3, 8001868 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
 8001862:	4629      	mov	r1, r5
 8001864:	4620      	mov	r0, r4
 8001866:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001868:	3410      	adds	r4, #16
 800186a:	e7f1      	b.n	8001850 <dropped_notify+0xc>
 800186c:	080289fc 	.word	0x080289fc
 8001870:	08028a0c 	.word	0x08028a0c

08001874 <z_log_msg_init>:
{
 8001874:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 8001876:	4c04      	ldr	r4, [pc, #16]	; (8001888 <z_log_msg_init+0x14>)
 8001878:	4904      	ldr	r1, [pc, #16]	; (800188c <z_log_msg_init+0x18>)
 800187a:	4620      	mov	r0, r4
 800187c:	f018 fd05 	bl	801a28a <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <z_log_msg_init+0x1c>)
 8001882:	601c      	str	r4, [r3, #0]
}
 8001884:	bd10      	pop	{r4, pc}
 8001886:	bf00      	nop
 8001888:	2400017c 	.word	0x2400017c
 800188c:	08028a90 	.word	0x08028a90
 8001890:	24000fd0 	.word	0x24000fd0

08001894 <log_core_init>:
{
 8001894:	b508      	push	{r3, lr}
	panic_mode = false;
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <log_core_init+0x24>)
 8001898:	2300      	movs	r3, #0
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
 800189a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800189e:	4807      	ldr	r0, [pc, #28]	; (80018bc <log_core_init+0x28>)
	panic_mode = false;
 80018a0:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 80018a2:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <log_core_init+0x2c>)
 80018a4:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
 80018a6:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <log_core_init+0x30>)
 80018a8:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
 80018aa:	f7ff ff85 	bl	80017b8 <log_set_timestamp_func>
}
 80018ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
 80018b2:	f7ff bfdf 	b.w	8001874 <z_log_msg_init>
 80018b6:	bf00      	nop
 80018b8:	24010d25 	.word	0x24010d25
 80018bc:	0801a583 	.word	0x0801a583
 80018c0:	24000fd8 	.word	0x24000fd8
 80018c4:	24000fdc 	.word	0x24000fdc

080018c8 <z_log_msg_alloc>:
{
 80018c8:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
 80018ca:	2200      	movs	r2, #0
 80018cc:	2300      	movs	r3, #0
 80018ce:	4801      	ldr	r0, [pc, #4]	; (80018d4 <z_log_msg_alloc+0xc>)
 80018d0:	f018 bcfc 	b.w	801a2cc <mpsc_pbuf_alloc>
 80018d4:	2400017c 	.word	0x2400017c

080018d8 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
 80018d8:	4801      	ldr	r0, [pc, #4]	; (80018e0 <z_log_msg_local_claim+0x8>)
 80018da:	f018 bd95 	b.w	801a408 <mpsc_pbuf_claim>
 80018de:	bf00      	nop
 80018e0:	2400017c 	.word	0x2400017c

080018e4 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <z_log_msg_free+0xc>)
{
 80018e6:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	f018 bddf 	b.w	801a4ac <mpsc_pbuf_free>
 80018ee:	bf00      	nop
 80018f0:	24000fd0 	.word	0x24000fd0

080018f4 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
 80018f4:	4801      	ldr	r0, [pc, #4]	; (80018fc <z_log_msg_pending+0x8>)
 80018f6:	f018 be15 	b.w	801a524 <mpsc_pbuf_is_pending>
 80018fa:	bf00      	nop
 80018fc:	2400017c 	.word	0x2400017c

08001900 <z_impl_log_process>:
	if (!backend_attached) {
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <z_impl_log_process+0x98>)
{
 8001902:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
 8001904:	7818      	ldrb	r0, [r3, #0]
 8001906:	2800      	cmp	r0, #0
 8001908:	d044      	beq.n	8001994 <z_impl_log_process+0x94>
	return z_log_msg_local_claim();
 800190a:	f7ff ffe5 	bl	80018d8 <z_log_msg_local_claim>
	if (msg) {
 800190e:	4605      	mov	r5, r0
 8001910:	b190      	cbz	r0, 8001938 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <z_impl_log_process+0x9c>)
 8001914:	f3bf 8f5b 	dmb	ish
 8001918:	e853 1f00 	ldrex	r1, [r3]
 800191c:	3901      	subs	r1, #1
 800191e:	e843 1200 	strex	r2, r1, [r3]
 8001922:	2a00      	cmp	r2, #0
 8001924:	d1f8      	bne.n	8001918 <z_impl_log_process+0x18>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001926:	4c1e      	ldr	r4, [pc, #120]	; (80019a0 <z_impl_log_process+0xa0>)
 8001928:	f3bf 8f5b 	dmb	ish
 800192c:	4e1d      	ldr	r6, [pc, #116]	; (80019a4 <z_impl_log_process+0xa4>)
 800192e:	42b4      	cmp	r4, r6
 8001930:	d326      	bcc.n	8001980 <z_impl_log_process+0x80>
		z_log_msg_free(msg);
 8001932:	4628      	mov	r0, r5
 8001934:	f7ff ffd6 	bl	80018e4 <z_log_msg_free>
	return dropped_cnt > 0;
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <z_impl_log_process+0xa8>)
 800193a:	4c1c      	ldr	r4, [pc, #112]	; (80019ac <z_impl_log_process+0xac>)
		if ((dropped_pend || unordered_pend) &&
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	dd12      	ble.n	8001968 <z_impl_log_process+0x68>
	return z_impl_k_uptime_ticks();
 8001942:	f026 fc4b 	bl	80281dc <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 8001946:	220a      	movs	r2, #10
 8001948:	2300      	movs	r3, #0
 800194a:	f7fe fcbf 	bl	80002cc <__aeabi_uldivmod>
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
 800194e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001952:	1ac0      	subs	r0, r0, r3
		if ((dropped_pend || unordered_pend) &&
 8001954:	f240 33e9 	movw	r3, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
 8001958:	eb61 0102 	sbc.w	r1, r1, r2
		if ((dropped_pend || unordered_pend) &&
 800195c:	4298      	cmp	r0, r3
 800195e:	f171 0100 	sbcs.w	r1, r1, #0
 8001962:	d301      	bcc.n	8001968 <z_impl_log_process+0x68>
				dropped_notify();
 8001964:	f7ff ff6e 	bl	8001844 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
 8001968:	e9d4 3200 	ldrd	r3, r2, [r4]
 800196c:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
 8001970:	f142 0200 	adc.w	r2, r2, #0
 8001974:	e9c4 3200 	strd	r3, r2, [r4]
}
 8001978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
 800197c:	f7ff bfba 	b.w	80018f4 <z_log_msg_pending>
	return backend->cb->active;
 8001980:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
 8001982:	795b      	ldrb	r3, [r3, #5]
 8001984:	b123      	cbz	r3, 8001990 <z_impl_log_process+0x90>
	backend->api->process(backend, msg);
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	4629      	mov	r1, r5
 800198a:	4620      	mov	r0, r4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001990:	3410      	adds	r4, #16
 8001992:	e7cc      	b.n	800192e <z_impl_log_process+0x2e>
}
 8001994:	bd70      	pop	{r4, r5, r6, pc}
 8001996:	bf00      	nop
 8001998:	24010d24 	.word	0x24010d24
 800199c:	24000fdc 	.word	0x24000fdc
 80019a0:	080289fc 	.word	0x080289fc
 80019a4:	08028a0c 	.word	0x08028a0c
 80019a8:	24000fd8 	.word	0x24000fd8
 80019ac:	24000660 	.word	0x24000660

080019b0 <z_impl_log_panic>:
{
 80019b0:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
 80019b2:	4d0d      	ldr	r5, [pc, #52]	; (80019e8 <z_impl_log_panic+0x38>)
 80019b4:	7829      	ldrb	r1, [r5, #0]
 80019b6:	b961      	cbnz	r1, 80019d2 <z_impl_log_panic+0x22>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 80019b8:	4c0c      	ldr	r4, [pc, #48]	; (80019ec <z_impl_log_panic+0x3c>)
	(void)z_log_init(true, false);
 80019ba:	2001      	movs	r0, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 80019bc:	4e0c      	ldr	r6, [pc, #48]	; (80019f0 <z_impl_log_panic+0x40>)
	(void)z_log_init(true, false);
 80019be:	f7ff feaf 	bl	8001720 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 80019c2:	42b4      	cmp	r4, r6
 80019c4:	d306      	bcc.n	80019d4 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
 80019c6:	f7ff ff9b 	bl	8001900 <z_impl_log_process>
		while (log_process() == true) {
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d1fb      	bne.n	80019c6 <z_impl_log_panic+0x16>
	panic_mode = true;
 80019ce:	2301      	movs	r3, #1
 80019d0:	702b      	strb	r3, [r5, #0]
}
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
 80019d4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 80019d6:	795b      	ldrb	r3, [r3, #5]
 80019d8:	b11b      	cbz	r3, 80019e2 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	4620      	mov	r0, r4
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 80019e2:	3410      	adds	r4, #16
 80019e4:	e7ed      	b.n	80019c2 <z_impl_log_panic+0x12>
 80019e6:	bf00      	nop
 80019e8:	24010d25 	.word	0x24010d25
 80019ec:	080289fc 	.word	0x080289fc
 80019f0:	08028a0c 	.word	0x08028a0c

080019f4 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
 80019f4:	2100      	movs	r1, #0
{
 80019f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
 80019fa:	4608      	mov	r0, r1
 80019fc:	f7ff fe90 	bl	8001720 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8001a00:	4604      	mov	r4, r0
 8001a02:	b348      	cbz	r0, 8001a58 <log_process_thread_func+0x64>
 8001a04:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
 8001a08:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
 8001a0c:	f017 feae 	bl	801976c <z_impl_z_current_get>
	proc_tid = process_tid;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <log_process_thread_func+0x88>)
 8001a12:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8001a14:	b130      	cbz	r0, 8001a24 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <log_process_thread_func+0x8c>)
	    process_tid &&
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b09      	cmp	r3, #9
 8001a1c:	dd02      	ble.n	8001a24 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
 8001a1e:	4819      	ldr	r0, [pc, #100]	; (8001a84 <log_process_thread_func+0x90>)
 8001a20:	f017 fbc4 	bl	80191ac <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8001a24:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001a26:	4f18      	ldr	r7, [pc, #96]	; (8001a88 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
 8001a28:	f8df a058 	ldr.w	sl, [pc, #88]	; 8001a84 <log_process_thread_func+0x90>
		if (activate_mask) {
 8001a2c:	b144      	cbz	r4, 8001a40 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f7ff fe10 	bl	8001654 <activate_foreach_backend>
			if (!activate_mask) {
 8001a34:	4604      	mov	r4, r0
 8001a36:	b918      	cbnz	r0, 8001a40 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
 8001a38:	f04f 38ff 	mov.w	r8, #4294967295
 8001a3c:	f04f 39ff 	mov.w	r9, #4294967295
 8001a40:	f7ff ff5e 	bl	8001900 <z_impl_log_process>
		if (log_process() == false) {
 8001a44:	4606      	mov	r6, r0
 8001a46:	b928      	cbnz	r0, 8001a54 <log_process_thread_func+0x60>
			if (processed_any) {
 8001a48:	b9b5      	cbnz	r5, 8001a78 <log_process_thread_func+0x84>
 8001a4a:	4642      	mov	r2, r8
 8001a4c:	464b      	mov	r3, r9
 8001a4e:	4650      	mov	r0, sl
 8001a50:	f017 fbd0 	bl	80191f4 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 8001a54:	4635      	mov	r5, r6
 8001a56:	e7e9      	b.n	8001a2c <log_process_thread_func+0x38>
 8001a58:	f04f 38ff 	mov.w	r8, #4294967295
 8001a5c:	f04f 39ff 	mov.w	r9, #4294967295
 8001a60:	e7d4      	b.n	8001a0c <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
 8001a62:	682b      	ldr	r3, [r5, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	b11b      	cbz	r3, 8001a70 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 8001a70:	3510      	adds	r5, #16
 8001a72:	42bd      	cmp	r5, r7
 8001a74:	d3f5      	bcc.n	8001a62 <log_process_thread_func+0x6e>
 8001a76:	e7e8      	b.n	8001a4a <log_process_thread_func+0x56>
 8001a78:	4d04      	ldr	r5, [pc, #16]	; (8001a8c <log_process_thread_func+0x98>)
 8001a7a:	e7fa      	b.n	8001a72 <log_process_thread_func+0x7e>
 8001a7c:	24000fd4 	.word	0x24000fd4
 8001a80:	24000fdc 	.word	0x24000fdc
 8001a84:	240001cc 	.word	0x240001cc
 8001a88:	08028a0c 	.word	0x08028a0c
 8001a8c:	080289fc 	.word	0x080289fc

08001a90 <z_log_msg_post_finalize>:
{
 8001a90:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
 8001a92:	4818      	ldr	r0, [pc, #96]	; (8001af4 <z_log_msg_post_finalize+0x64>)
 8001a94:	f018 fd68 	bl	801a568 <atomic_inc>
	if (panic_mode) {
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <z_log_msg_post_finalize+0x68>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b17b      	cbz	r3, 8001abe <z_log_msg_post_finalize+0x2e>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8001a9e:	f04f 0310 	mov.w	r3, #16
 8001aa2:	f3ef 8411 	mrs	r4, BASEPRI
 8001aa6:	f383 8812 	msr	BASEPRI_MAX, r3
 8001aaa:	f3bf 8f6f 	isb	sy
 8001aae:	f7ff ff27 	bl	8001900 <z_impl_log_process>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8001ab2:	f384 8811 	msr	BASEPRI, r4
 8001ab6:	f3bf 8f6f 	isb	sy
}
 8001aba:	b002      	add	sp, #8
 8001abc:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <z_log_msg_post_finalize+0x6c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f9      	beq.n	8001aba <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
 8001ac6:	b950      	cbnz	r0, 8001ade <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2300      	movs	r3, #0
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <z_log_msg_post_finalize+0x70>)
 8001ace:	e9cd 2300 	strd	r2, r3, [sp]
 8001ad2:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f018 f888 	bl	8019bec <z_impl_k_timer_start>
 8001adc:	e7ed      	b.n	8001aba <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8001ade:	2809      	cmp	r0, #9
 8001ae0:	d1eb      	bne.n	8001aba <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
 8001ae2:	4807      	ldr	r0, [pc, #28]	; (8001b00 <z_log_msg_post_finalize+0x70>)
 8001ae4:	f026 fb88 	bl	80281f8 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8001ae8:	4806      	ldr	r0, [pc, #24]	; (8001b04 <z_log_msg_post_finalize+0x74>)
}
 8001aea:	b002      	add	sp, #8
 8001aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001af0:	f017 bb5c 	b.w	80191ac <z_impl_k_sem_give>
 8001af4:	24000fdc 	.word	0x24000fdc
 8001af8:	24010d25 	.word	0x24010d25
 8001afc:	24000fd4 	.word	0x24000fd4
 8001b00:	24000668 	.word	0x24000668
 8001b04:	240001cc 	.word	0x240001cc

08001b08 <z_log_msg_commit>:
	msg->hdr.timestamp = timestamp_func();
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <z_log_msg_commit+0x1c>)
{
 8001b0a:	b510      	push	{r4, lr}
 8001b0c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
 8001b12:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
 8001b14:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
 8001b16:	4804      	ldr	r0, [pc, #16]	; (8001b28 <z_log_msg_commit+0x20>)
 8001b18:	f018 fc56 	bl	801a3c8 <mpsc_pbuf_commit>
}
 8001b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
 8001b20:	f7ff bfb6 	b.w	8001a90 <z_log_msg_post_finalize>
 8001b24:	24000004 	.word	0x24000004
 8001b28:	2400017c 	.word	0x2400017c

08001b2c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)TYPE_SECTION_START(log_const))/
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <log_source_name_get+0x14>)
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <log_source_name_get+0x18>)
 8001b30:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
 8001b32:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return TYPE_SECTION_START(log_const)[source_id].name;
 8001b36:	bf34      	ite	cc
 8001b38:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
 8001b3c:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
 8001b3e:	4770      	bx	lr
 8001b40:	0802899c 	.word	0x0802899c
 8001b44:	080289fc 	.word	0x080289fc

08001b48 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <log_backend_enable+0x24>)
 8001b4a:	1ac3      	subs	r3, r0, r3
 8001b4c:	111b      	asrs	r3, r3, #4
{
 8001b4e:	b410      	push	{r4}
	id += backend - log_backend_get(0);
 8001b50:	3301      	adds	r3, #1
	backend->cb->id = id;
 8001b52:	6844      	ldr	r4, [r0, #4]

	log_backend_id_set(backend, id);
 8001b54:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
 8001b56:	6843      	ldr	r3, [r0, #4]
 8001b58:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
 8001b5a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
 8001b5c:	6843      	ldr	r3, [r0, #4]
 8001b5e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8001b60:	6843      	ldr	r3, [r0, #4]
 8001b62:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
 8001b64:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
 8001b66:	f7ff be37 	b.w	80017d8 <z_log_notify_backend_enabled>
 8001b6a:	bf00      	nop
 8001b6c:	080289fc 	.word	0x080289fc

08001b70 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
 8001b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b74:	b08f      	sub	sp, #60	; 0x3c
 8001b76:	f3c1 284a 	ubfx	r8, r1, #9, #11
 8001b7a:	460d      	mov	r5, r1
 8001b7c:	4691      	mov	r9, r2
 8001b7e:	af04      	add	r7, sp, #16

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
 8001b80:	0d0c      	lsrs	r4, r1, #20
{
 8001b82:	60b8      	str	r0, [r7, #8]
 8001b84:	607b      	str	r3, [r7, #4]
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
 8001b86:	f1b8 0f00 	cmp.w	r8, #0
 8001b8a:	d063      	beq.n	8001c54 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
 8001b8c:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	f04f 0b04 	mov.w	fp, #4
 8001b96:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
 8001b9a:	f8c7 800c 	str.w	r8, [r7, #12]
 8001b9e:	4632      	mov	r2, r6
	struct z_cbprintf_buf_desc buf_desc = {
 8001ba0:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
 8001ba2:	4648      	mov	r0, r9
	struct z_cbprintf_buf_desc buf_desc = {
 8001ba4:	e9c7 6607 	strd	r6, r6, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	f8cd b008 	str.w	fp, [sp, #8]
 8001bb2:	f8cd a000 	str.w	sl, [sp]
 8001bb6:	68f9      	ldr	r1, [r7, #12]
 8001bb8:	f7fe ff2c 	bl	8000a14 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
 8001bbc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	d31c      	bcc.n	8001bfe <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
 8001bc4:	466c      	mov	r4, sp
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001bcc:	ab04      	add	r3, sp, #16
 8001bce:	4826      	ldr	r0, [pc, #152]	; (8001c68 <z_impl_z_log_msg_static_create+0xf8>)
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	e9c3 0105 	strd	r0, r1, [r3, #20]
 8001bd6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001bda:	61d9      	str	r1, [r3, #28]
 8001bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be0:	8419      	strh	r1, [r3, #32]
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <z_impl_z_log_msg_static_create+0xfc>)
 8001be4:	f842 3f10 	str.w	r3, [r2, #16]!
 8001be8:	f44f 5112 	mov.w	r1, #9344	; 0x2480
 8001bec:	4633      	mov	r3, r6
 8001bee:	4820      	ldr	r0, [pc, #128]	; (8001c70 <z_impl_z_log_msg_static_create+0x100>)
 8001bf0:	f7ff ffbe 	bl	8001b70 <z_impl_z_log_msg_static_create>
 8001bf4:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
 8001bf6:	372c      	adds	r7, #44	; 0x2c
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
 8001bfe:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
 8001c02:	f104 0017 	add.w	r0, r4, #23
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	4418      	add	r0, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 8001c0a:	f368 2553 	bfi	r5, r8, #9, #11
 8001c0e:	f020 0007 	bic.w	r0, r0, #7
 8001c12:	0880      	lsrs	r0, r0, #2
 8001c14:	f7ff fe58 	bl	80018c8 <z_log_msg_alloc>
		if (msg) {
 8001c18:	4604      	mov	r4, r0
 8001c1a:	b190      	cbz	r0, 8001c42 <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
 8001c1c:	683b      	ldr	r3, [r7, #0]
						    msg->data, out_desc.package_len,
 8001c1e:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
 8001c22:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <z_impl_z_log_msg_static_create+0x104>)
 8001c24:	4648      	mov	r0, r9
	struct z_cbprintf_buf_desc buf_desc = {
 8001c26:	61f9      	str	r1, [r7, #28]
 8001c28:	e9c7 3608 	strd	r3, r6, [r7, #32]
	return cbprintf_package_convert(in_packaged, in_len,
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	f8cd b008 	str.w	fp, [sp, #8]
 8001c34:	e9cd a300 	strd	sl, r3, [sp]
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	68f9      	ldr	r1, [r7, #12]
 8001c3e:	f7fe fee9 	bl	8000a14 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
 8001c42:	f368 2553 	bfi	r5, r8, #9, #11
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	462a      	mov	r2, r5
 8001c4e:	f018 fcc9 	bl	801a5e4 <z_log_msg_finalize>
 8001c52:	e7d0      	b.n	8001bf6 <z_impl_z_log_msg_static_create+0x86>
 8001c54:	f104 0017 	add.w	r0, r4, #23
 8001c58:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 8001c5c:	0880      	lsrs	r0, r0, #2
 8001c5e:	f7ff fe33 	bl	80018c8 <z_log_msg_alloc>
 8001c62:	4604      	mov	r4, r0
 8001c64:	e7ed      	b.n	8001c42 <z_impl_z_log_msg_static_create+0xd2>
 8001c66:	bf00      	nop
 8001c68:	08029fd5 	.word	0x08029fd5
 8001c6c:	01000004 	.word	0x01000004
 8001c70:	080289bc 	.word	0x080289bc
 8001c74:	0801a5b9 	.word	0x0801a5b9

08001c78 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
 8001c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c7c:	b087      	sub	sp, #28
 8001c7e:	4604      	mov	r4, r0
 8001c80:	460f      	mov	r7, r1
 8001c82:	4693      	mov	fp, r2
 8001c84:	4698      	mov	r8, r3
 8001c86:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
 8001c8a:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
 8001c8e:	b3a6      	cbz	r6, 8001cfa <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
 8001c90:	2110      	movs	r1, #16
 8001c92:	4633      	mov	r3, r6
 8001c94:	4652      	mov	r2, sl
 8001c96:	2000      	movs	r0, #0
 8001c98:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
 8001c9c:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
 8001ca0:	f7fe fce6 	bl	8000670 <cbvprintf_package>
 8001ca4:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
 8001ca6:	f004 0407 	and.w	r4, r4, #7
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
 8001caa:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
 8001cae:	f00b 0b07 	and.w	fp, fp, #7
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <z_impl_z_log_msg_runtime_vcreate+0x88>)
 8001cb4:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
 8001cb6:	4408      	add	r0, r1
	struct log_msg_desc desc =
 8001cb8:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
 8001cbc:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
 8001cbe:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
 8001cc2:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
 8001cc6:	431c      	orrs	r4, r3
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
 8001cc8:	0880      	lsrs	r0, r0, #2
 8001cca:	f7ff fdfd 	bl	80018c8 <z_log_msg_alloc>
	struct log_msg_desc desc =
 8001cce:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
 8001cd2:	4605      	mov	r5, r0
 8001cd4:	b140      	cbz	r0, 8001ce8 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
 8001cd6:	b13e      	cbz	r6, 8001ce8 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
 8001cd8:	4633      	mov	r3, r6
 8001cda:	4652      	mov	r2, sl
 8001cdc:	9903      	ldr	r1, [sp, #12]
 8001cde:	3010      	adds	r0, #16
 8001ce0:	f8cd 9000 	str.w	r9, [sp]
 8001ce4:	f7fe fcc4 	bl	8000670 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
 8001ce8:	4643      	mov	r3, r8
 8001cea:	4622      	mov	r2, r4
 8001cec:	4639      	mov	r1, r7
 8001cee:	4628      	mov	r0, r5
	}
}
 8001cf0:	b007      	add	sp, #28
 8001cf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
 8001cf6:	f018 bc75 	b.w	801a5e4 <z_log_msg_finalize>
		plen = 0;
 8001cfa:	4631      	mov	r1, r6
 8001cfc:	e7d3      	b.n	8001ca6 <z_impl_z_log_msg_runtime_vcreate+0x2e>
 8001cfe:	bf00      	nop
 8001d00:	000ffe00 	.word	0x000ffe00

08001d04 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8001d04:	b40e      	push	{r1, r2, r3}
 8001d06:	b503      	push	{r0, r1, lr}
 8001d08:	ab03      	add	r3, sp, #12
 8001d0a:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <print_formatted+0x20>)
{
 8001d0e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
 8001d12:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8001d14:	f018 fc8c 	bl	801a630 <cbvprintf>
	va_end(args);

	return length;
}
 8001d18:	b002      	add	sp, #8
 8001d1a:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d1e:	b003      	add	sp, #12
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	0801a659 	.word	0x0801a659

08001d28 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8001d28:	06ca      	lsls	r2, r1, #27
 8001d2a:	d405      	bmi.n	8001d38 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8001d2c:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
 8001d2e:	bf4c      	ite	mi
 8001d30:	4902      	ldrmi	r1, [pc, #8]	; (8001d3c <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
 8001d32:	4903      	ldrpl	r1, [pc, #12]	; (8001d40 <newline_print+0x18>)
 8001d34:	f7ff bfe6 	b.w	8001d04 <print_formatted>
	}
}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	0802a015 	.word	0x0802a015
 8001d40:	0802a014 	.word	0x0802a014

08001d44 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
 8001d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d48:	b089      	sub	sp, #36	; 0x24
 8001d4a:	469b      	mov	fp, r3
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	460d      	mov	r5, r1
 8001d50:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8001d54:	9206      	str	r2, [sp, #24]
 8001d56:	9304      	str	r3, [sp, #16]
 8001d58:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
 8001d5c:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
 8001d60:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
 8001d62:	9b04      	ldr	r3, [sp, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8087 	beq.w	8001e78 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8001d6a:	f006 0308 	and.w	r3, r6, #8
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 8001d6e:	f006 0a02 	and.w	sl, r6, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8001d72:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
 8001d74:	f018 fc1e 	bl	801a5b4 <z_log_get_tag>
	if (tag) {
 8001d78:	4602      	mov	r2, r0
 8001d7a:	2800      	cmp	r0, #0
 8001d7c:	d04b      	beq.n	8001e16 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
 8001d7e:	4986      	ldr	r1, [pc, #536]	; (8001f98 <log_output_process+0x254>)
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff ffbf 	bl	8001d04 <print_formatted>
 8001d86:	4680      	mov	r8, r0
	if (stamp) {
 8001d88:	f1ba 0f00 	cmp.w	sl, #0
 8001d8c:	d008      	beq.n	8001da0 <log_output_process+0x5c>
	if (!format) {
 8001d8e:	f016 0f44 	tst.w	r6, #68	; 0x44
 8001d92:	d142      	bne.n	8001e1a <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
 8001d94:	462a      	mov	r2, r5
 8001d96:	4981      	ldr	r1, [pc, #516]	; (8001f9c <log_output_process+0x258>)
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7ff ffb3 	bl	8001d04 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 8001d9e:	4480      	add	r8, r0
	if (color) {
 8001da0:	f006 0301 	and.w	r3, r6, #1
 8001da4:	b15b      	cbz	r3, 8001dbe <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
 8001da6:	4b7e      	ldr	r3, [pc, #504]	; (8001fa0 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
 8001da8:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
 8001daa:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
 8001dac:	497d      	ldr	r1, [pc, #500]	; (8001fa4 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
 8001dae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
 8001db2:	4b7d      	ldr	r3, [pc, #500]	; (8001fa8 <log_output_process+0x264>)
 8001db4:	2a00      	cmp	r2, #0
 8001db6:	bf08      	it	eq
 8001db8:	461a      	moveq	r2, r3
 8001dba:	f7ff ffa3 	bl	8001d04 <print_formatted>
	if (level_on) {
 8001dbe:	f006 0308 	and.w	r3, r6, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d055      	beq.n	8001e72 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
 8001dc6:	4b79      	ldr	r3, [pc, #484]	; (8001fac <log_output_process+0x268>)
 8001dc8:	4620      	mov	r0, r4
 8001dca:	9a04      	ldr	r2, [sp, #16]
 8001dcc:	4978      	ldr	r1, [pc, #480]	; (8001fb0 <log_output_process+0x26c>)
 8001dce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001dd2:	f7ff ff97 	bl	8001d04 <print_formatted>
 8001dd6:	4605      	mov	r5, r0
	if (domain) {
 8001dd8:	9b06      	ldr	r3, [sp, #24]
 8001dda:	b12b      	cbz	r3, 8001de8 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4975      	ldr	r1, [pc, #468]	; (8001fb4 <log_output_process+0x270>)
 8001de0:	4620      	mov	r0, r4
 8001de2:	f7ff ff8f 	bl	8001d04 <print_formatted>
 8001de6:	4405      	add	r5, r0
	if (source) {
 8001de8:	f1bb 0f00 	cmp.w	fp, #0
 8001dec:	d005      	beq.n	8001dfa <log_output_process+0xb6>
		total += print_formatted(output,
 8001dee:	465a      	mov	r2, fp
 8001df0:	4971      	ldr	r1, [pc, #452]	; (8001fb8 <log_output_process+0x274>)
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7ff ff86 	bl	8001d04 <print_formatted>
 8001df8:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
 8001dfa:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
 8001dfc:	f1b9 0f00 	cmp.w	r9, #0
 8001e00:	d149      	bne.n	8001e96 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
 8001e02:	2f00      	cmp	r7, #0
 8001e04:	d14f      	bne.n	8001ea6 <log_output_process+0x162>
	if (color) {
 8001e06:	07f3      	lsls	r3, r6, #31
 8001e08:	f100 80c0 	bmi.w	8001f8c <log_output_process+0x248>
	newline_print(output, flags);
 8001e0c:	4631      	mov	r1, r6
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f7ff ff8a 	bl	8001d28 <newline_print>
}
 8001e14:	e0b4      	b.n	8001f80 <log_output_process+0x23c>
	uint32_t length = 0U;
 8001e16:	4680      	mov	r8, r0
 8001e18:	e7b6      	b.n	8001d88 <log_output_process+0x44>
	} else if (freq != 0U) {
 8001e1a:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <log_output_process+0x278>)
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	d0bd      	beq.n	8001d9e <log_output_process+0x5a>
		timestamp /= timestamp_div;
 8001e22:	4b67      	ldr	r3, [pc, #412]	; (8001fc0 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
 8001e24:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 8001e28:	f44f 6261 	mov.w	r2, #3600	; 0xe10
		mins = seconds / 60U;
 8001e2c:	213c      	movs	r1, #60	; 0x3c
		timestamp /= timestamp_div;
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
 8001e34:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
 8001e38:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
 8001e3c:	fb0e f505 	mul.w	r5, lr, r5
 8001e40:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8001e44:	fbb5 fcf0 	udiv	ip, r5, r0
 8001e48:	fb02 321a 	mls	r2, r2, sl, r3
 8001e4c:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
 8001e50:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8001e54:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
 8001e58:	fb01 2213 	mls	r2, r1, r3, r2
 8001e5c:	4959      	ldr	r1, [pc, #356]	; (8001fc4 <log_output_process+0x280>)
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8001e5e:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
 8001e62:	9200      	str	r2, [sp, #0]
 8001e64:	4620      	mov	r0, r4
 8001e66:	4652      	mov	r2, sl
 8001e68:	e9cd c501 	strd	ip, r5, [sp, #4]
 8001e6c:	f7ff ff4a 	bl	8001d04 <print_formatted>
 8001e70:	e795      	b.n	8001d9e <log_output_process+0x5a>
	int total = 0;
 8001e72:	f006 0508 	and.w	r5, r6, #8
 8001e76:	e7af      	b.n	8001dd8 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8001e78:	f1bb 0f01 	cmp.w	fp, #1
 8001e7c:	d106      	bne.n	8001e8c <log_output_process+0x148>
	if (package) {
 8001e7e:	f1b9 0f00 	cmp.w	r9, #0
 8001e82:	d164      	bne.n	8001f4e <log_output_process+0x20a>
	if (data_len) {
 8001e84:	2f00      	cmp	r7, #0
 8001e86:	d07b      	beq.n	8001f80 <log_output_process+0x23c>
		prefix_offset = 0;
 8001e88:	2500      	movs	r5, #0
 8001e8a:	e00c      	b.n	8001ea6 <log_output_process+0x162>
	if (package) {
 8001e8c:	f1b9 0f00 	cmp.w	r9, #0
 8001e90:	d0f8      	beq.n	8001e84 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8001e92:	484d      	ldr	r0, [pc, #308]	; (8001fc8 <log_output_process+0x284>)
 8001e94:	e05c      	b.n	8001f50 <log_output_process+0x20c>
		cb = out_func;
 8001e96:	484d      	ldr	r0, [pc, #308]	; (8001fcc <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 8001e98:	464b      	mov	r3, r9
 8001e9a:	4622      	mov	r2, r4
 8001e9c:	494c      	ldr	r1, [pc, #304]	; (8001fd0 <log_output_process+0x28c>)
 8001e9e:	f017 ff34 	bl	8019d0a <cbpprintf_external>
	if (data_len) {
 8001ea2:	2f00      	cmp	r7, #0
 8001ea4:	d068      	beq.n	8001f78 <log_output_process+0x234>
		print_formatted(output, " ");
 8001ea6:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8001fd4 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
 8001eaa:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8001fd8 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8001eae:	2f10      	cmp	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
 8001eb0:	f04f 0b00 	mov.w	fp, #0
	newline_print(output, flags);
 8001eb4:	4631      	mov	r1, r6
 8001eb6:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8001eb8:	46b8      	mov	r8, r7
 8001eba:	bf28      	it	cs
 8001ebc:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
 8001ec0:	f7ff ff32 	bl	8001d28 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
 8001ec4:	455d      	cmp	r5, fp
 8001ec6:	dc45      	bgt.n	8001f54 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
 8001ec8:	9b05      	ldr	r3, [sp, #20]
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8001eca:	f04f 0b01 	mov.w	fp, #1
			print_formatted(output, "%02x ", data[i]);
 8001ece:	4651      	mov	r1, sl
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	f7ff ff16 	bl	8001d04 <print_formatted>
		if (i > 0 && !(i % 8)) {
 8001ed8:	f01b 0f07 	tst.w	fp, #7
 8001edc:	d103      	bne.n	8001ee6 <log_output_process+0x1a2>
			print_formatted(output, " ");
 8001ede:	4649      	mov	r1, r9
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7ff ff0f 	bl	8001d04 <print_formatted>
		if (i < length) {
 8001ee6:	45d8      	cmp	r8, fp
 8001ee8:	d93b      	bls.n	8001f62 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
 8001eea:	9b05      	ldr	r3, [sp, #20]
 8001eec:	4651      	mov	r1, sl
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f813 200b 	ldrb.w	r2, [r3, fp]
 8001ef4:	f7ff ff06 	bl	8001d04 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8001ef8:	f10b 0b01 	add.w	fp, fp, #1
 8001efc:	f1bb 0f10 	cmp.w	fp, #16
 8001f00:	d1ea      	bne.n	8001ed8 <log_output_process+0x194>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8001f02:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
 8001f06:	4935      	ldr	r1, [pc, #212]	; (8001fdc <log_output_process+0x298>)
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff fefb 	bl	8001d04 <print_formatted>
		if (i < length) {
 8001f0e:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
 8001f10:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
 8001f12:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
 8001f14:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
 8001f16:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
 8001f1a:	295f      	cmp	r1, #95	; 0x5f
 8001f1c:	4930      	ldr	r1, [pc, #192]	; (8001fe0 <log_output_process+0x29c>)
 8001f1e:	bf28      	it	cs
 8001f20:	222e      	movcs	r2, #46	; 0x2e
 8001f22:	f7ff feef 	bl	8001d04 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8001f26:	f10b 0b01 	add.w	fp, fp, #1
 8001f2a:	f1bb 0f10 	cmp.w	fp, #16
 8001f2e:	d01d      	beq.n	8001f6c <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
 8001f30:	f01b 0f07 	tst.w	fp, #7
 8001f34:	d103      	bne.n	8001f3e <log_output_process+0x1fa>
			print_formatted(output, " ");
 8001f36:	4649      	mov	r1, r9
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f7ff fee3 	bl	8001d04 <print_formatted>
		if (i < length) {
 8001f3e:	45d8      	cmp	r8, fp
 8001f40:	465a      	mov	r2, fp
 8001f42:	d8e5      	bhi.n	8001f10 <log_output_process+0x1cc>
			print_formatted(output, " ");
 8001f44:	4649      	mov	r1, r9
 8001f46:	4620      	mov	r0, r4
 8001f48:	f7ff fedc 	bl	8001d04 <print_formatted>
 8001f4c:	e7eb      	b.n	8001f26 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8001f4e:	481f      	ldr	r0, [pc, #124]	; (8001fcc <log_output_process+0x288>)
		prefix_offset = 0;
 8001f50:	9d04      	ldr	r5, [sp, #16]
 8001f52:	e7a1      	b.n	8001e98 <log_output_process+0x154>
		print_formatted(output, " ");
 8001f54:	4649      	mov	r1, r9
 8001f56:	4620      	mov	r0, r4
	for (int i = 0; i < prefix_offset; i++) {
 8001f58:	f10b 0b01 	add.w	fp, fp, #1
		print_formatted(output, " ");
 8001f5c:	f7ff fed2 	bl	8001d04 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8001f60:	e7b0      	b.n	8001ec4 <log_output_process+0x180>
			print_formatted(output, "   ");
 8001f62:	4920      	ldr	r1, [pc, #128]	; (8001fe4 <log_output_process+0x2a0>)
 8001f64:	4620      	mov	r0, r4
 8001f66:	f7ff fecd 	bl	8001d04 <print_formatted>
 8001f6a:	e7c5      	b.n	8001ef8 <log_output_process+0x1b4>
		data += length;
 8001f6c:	9b05      	ldr	r3, [sp, #20]
	} while (len);
 8001f6e:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
 8001f72:	4443      	add	r3, r8
 8001f74:	9305      	str	r3, [sp, #20]
	} while (len);
 8001f76:	d19a      	bne.n	8001eae <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
 8001f78:	9b04      	ldr	r3, [sp, #16]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f47f af43 	bne.w	8001e06 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 8001f80:	4620      	mov	r0, r4
}
 8001f82:	b009      	add	sp, #36	; 0x24
 8001f84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
 8001f88:	f018 bb59 	b.w	801a63e <log_output_flush>
		print_formatted(output, "%s", log_color);
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <log_output_process+0x264>)
 8001f8e:	4620      	mov	r0, r4
 8001f90:	4904      	ldr	r1, [pc, #16]	; (8001fa4 <log_output_process+0x260>)
 8001f92:	f7ff feb7 	bl	8001d04 <print_formatted>
}
 8001f96:	e739      	b.n	8001e0c <log_output_process+0xc8>
 8001f98:	0802a01c 	.word	0x0802a01c
 8001f9c:	0802a020 	.word	0x0802a020
 8001fa0:	08028ab4 	.word	0x08028ab4
 8001fa4:	0802ab7c 	.word	0x0802ab7c
 8001fa8:	0802a017 	.word	0x0802a017
 8001fac:	08028ac8 	.word	0x08028ac8
 8001fb0:	0802a045 	.word	0x0802a045
 8001fb4:	0802a04b 	.word	0x0802a04b
 8001fb8:	0802a04f 	.word	0x0802a04f
 8001fbc:	24000fe8 	.word	0x24000fe8
 8001fc0:	24000fe4 	.word	0x24000fe4
 8001fc4:	0802a029 	.word	0x0802a029
 8001fc8:	0801a68f 	.word	0x0801a68f
 8001fcc:	0801a659 	.word	0x0801a659
 8001fd0:	0801a631 	.word	0x0801a631
 8001fd4:	0802a05c 	.word	0x0802a05c
 8001fd8:	0802a054 	.word	0x0802a054
 8001fdc:	0802a05e 	.word	0x0802a05e
 8001fe0:	0802a060 	.word	0x0802a060
 8001fe4:	0802a05a 	.word	0x0802a05a

08001fe8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
 8001fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
 8001fec:	880f      	ldrh	r7, [r1, #0]
 8001fee:	b086      	sub	sp, #24
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
 8001ff0:	684b      	ldr	r3, [r1, #4]
 8001ff2:	4605      	mov	r5, r0
 8001ff4:	460c      	mov	r4, r1
 8001ff6:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
 8001ff8:	688e      	ldr	r6, [r1, #8]
	return msg->hdr.desc.level;
 8001ffa:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
 8001ffe:	b15b      	cbz	r3, 8002018 <log_output_msg_process+0x30>
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <log_output_msg_process+0x6c>)
 8002002:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
 8002004:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 8002008:	2900      	cmp	r1, #0
 800200a:	db20      	blt.n	800204e <log_output_msg_process+0x66>
	return msg->hdr.desc.domain;
 800200c:	7820      	ldrb	r0, [r4, #0]
 800200e:	f3c0 00c2 	ubfx	r0, r0, #3, #3
 8002012:	f7ff fd8b 	bl	8001b2c <log_source_name_get>
 8002016:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 8002018:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
 800201a:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
 800201c:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
 8002020:	f3c0 100b 	ubfx	r0, r0, #4, #12
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
 8002024:	9700      	str	r7, [sp, #0]
	*len = msg->hdr.desc.package_len;
 8002026:	f3c2 224a 	ubfx	r2, r2, #9, #11
 800202a:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
 800202c:	eb01 0402 	add.w	r4, r1, r2
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	bf08      	it	eq
 8002036:	2100      	moveq	r1, #0
 8002038:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800203c:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8002040:	4628      	mov	r0, r5
 8002042:	4631      	mov	r1, r6
 8002044:	f7ff fe7e 	bl	8001d44 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
 8002048:	b006      	add	sp, #24
 800204a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 800204e:	2300      	movs	r3, #0
 8002050:	e7e2      	b.n	8002018 <log_output_msg_process+0x30>
 8002052:	bf00      	nop
 8002054:	0802899c 	.word	0x0802899c

08002058 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8002058:	f242 730f 	movw	r3, #9999	; 0x270f
 800205c:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <log_output_dropped_process+0x4c>)
 800205e:	428b      	cmp	r3, r1
{
 8002060:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002062:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8002064:	bf28      	it	cs
 8002066:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 8002068:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800206a:	2105      	movs	r1, #5
 800206c:	4668      	mov	r0, sp
 800206e:	f017 fec3 	bl	8019df8 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8002072:	6863      	ldr	r3, [r4, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8002074:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8002076:	220b      	movs	r2, #11
 8002078:	4628      	mov	r0, r5
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	490a      	ldr	r1, [pc, #40]	; (80020a8 <log_output_dropped_process+0x50>)
 800207e:	f018 faca 	bl	801a616 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 8002082:	6863      	ldr	r3, [r4, #4]
 8002084:	4632      	mov	r2, r6
 8002086:	4669      	mov	r1, sp
 8002088:	4628      	mov	r0, r5
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f018 fac3 	bl	801a616 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8002090:	6863      	ldr	r3, [r4, #4]
 8002092:	221b      	movs	r2, #27
 8002094:	4905      	ldr	r1, [pc, #20]	; (80020ac <log_output_dropped_process+0x54>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4628      	mov	r0, r5
 800209a:	f018 fabc 	bl	801a616 <buffer_write>
		     output->control_block->ctx);
}
 800209e:	b002      	add	sp, #8
 80020a0:	bd70      	pop	{r4, r5, r6, pc}
 80020a2:	bf00      	nop
 80020a4:	0802e035 	.word	0x0802e035
 80020a8:	0802a07f 	.word	0x0802a07f
 80020ac:	0802a063 	.word	0x0802a063

080020b0 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 80020b0:	2100      	movs	r1, #0
 80020b2:	2301      	movs	r3, #1
 80020b4:	4a06      	ldr	r2, [pc, #24]	; (80020d0 <log_output_timestamp_freq_set+0x20>)
 80020b6:	4290      	cmp	r0, r2
 80020b8:	d806      	bhi.n	80020c8 <log_output_timestamp_freq_set+0x18>
 80020ba:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <log_output_timestamp_freq_set+0x24>)
 80020bc:	b901      	cbnz	r1, 80020c0 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
 80020be:	2301      	movs	r3, #1
 80020c0:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <log_output_timestamp_freq_set+0x28>)
 80020c4:	6018      	str	r0, [r3, #0]
}
 80020c6:	4770      	bx	lr
		frequency /= 2U;
 80020c8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 80020ca:	2101      	movs	r1, #1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	e7f2      	b.n	80020b6 <log_output_timestamp_freq_set+0x6>
 80020d0:	000f4240 	.word	0x000f4240
 80020d4:	24000fe4 	.word	0x24000fe4
 80020d8:	24000fe8 	.word	0x24000fe8

080020dc <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
 80020dc:	4b01      	ldr	r3, [pc, #4]	; (80020e4 <format_set+0x8>)
	return 0;
}
 80020de:	2000      	movs	r0, #0
	log_format_current = log_type;
 80020e0:	6019      	str	r1, [r3, #0]
}
 80020e2:	4770      	bx	lr
 80020e4:	24001000 	.word	0x24001000

080020e8 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
 80020e8:	4b02      	ldr	r3, [pc, #8]	; (80020f4 <panic+0xc>)
 80020ea:	2201      	movs	r2, #1
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <panic+0x10>)
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	f018 baa5 	b.w	801a63e <log_output_flush>
 80020f4:	24010d27 	.word	0x24010d27
 80020f8:	08028af8 	.word	0x08028af8

080020fc <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 80020fc:	4801      	ldr	r0, [pc, #4]	; (8002104 <dropped+0x8>)
 80020fe:	f7ff bfab 	b.w	8002058 <log_output_dropped_process>
 8002102:	bf00      	nop
 8002104:	08028af8 	.word	0x08028af8

08002108 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <process+0x1c>)
{
 800210a:	b510      	push	{r4, lr}
 800210c:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	f7ff fb4c 	bl	80017ac <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
 8002114:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8002116:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
 8002118:	4621      	mov	r1, r4
 800211a:	4803      	ldr	r0, [pc, #12]	; (8002128 <process+0x20>)
}
 800211c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
 8002120:	4718      	bx	r3
 8002122:	bf00      	nop
 8002124:	24001000 	.word	0x24001000
 8002128:	08028af8 	.word	0x08028af8

0800212c <char_out>:
{
 800212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212e:	460d      	mov	r5, r1
 8002130:	4604      	mov	r4, r0
 8002132:	1846      	adds	r6, r0, r1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8002134:	4f05      	ldr	r7, [pc, #20]	; (800214c <char_out+0x20>)
		for (size_t i = 0; i < length; i++) {
 8002136:	42b4      	cmp	r4, r6
 8002138:	d101      	bne.n	800213e <char_out+0x12>
}
 800213a:	4628      	mov	r0, r5
 800213c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
 800213e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	4801      	ldr	r0, [pc, #4]	; (800214c <char_out+0x20>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 800214a:	e7f4      	b.n	8002136 <char_out+0xa>
 800214c:	08028434 	.word	0x08028434

08002150 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8002150:	4901      	ldr	r1, [pc, #4]	; (8002158 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8002152:	2210      	movs	r2, #16
	str	r2, [r1]
 8002154:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8002156:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8002158:	e000ed10 	.word	0xe000ed10

0800215c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 800215c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 800215e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8002160:	f380 8811 	msr	BASEPRI, r0
	isb
 8002164:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
 8002168:	f3bf 8f4f 	dsb	sy
 800216c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800216e:	b662      	cpsie	i
	isb
 8002170:	f3bf 8f6f 	isb	sy

	bx	lr
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop

08002178 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8002178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800217c:	4681      	mov	r9, r0
 800217e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
 8002180:	460c      	mov	r4, r1
 8002182:	2900      	cmp	r1, #0
 8002184:	d04c      	beq.n	8002220 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8002186:	466e      	mov	r6, sp
 8002188:	b08a      	sub	sp, #40	; 0x28
 800218a:	68a3      	ldr	r3, [r4, #8]
 800218c:	466d      	mov	r5, sp
 800218e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8002192:	4827      	ldr	r0, [pc, #156]	; (8002230 <z_arm_fatal_error+0xb8>)
 8002194:	f04f 0a05 	mov.w	sl, #5
 8002198:	46a8      	mov	r8, r5
 800219a:	e9c5 0105 	strd	r0, r1, [r5, #20]
 800219e:	e9c5 2307 	strd	r2, r3, [r5, #28]
 80021a2:	f848 af10 	str.w	sl, [r8, #16]!
 80021a6:	2300      	movs	r3, #0
 80021a8:	4642      	mov	r2, r8
 80021aa:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 80021ae:	4821      	ldr	r0, [pc, #132]	; (8002234 <z_arm_fatal_error+0xbc>)
 80021b0:	f7ff fcde 	bl	8001b70 <z_impl_z_log_msg_static_create>
 80021b4:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 80021b6:	6963      	ldr	r3, [r4, #20]
 80021b8:	46ad      	mov	sp, r5
 80021ba:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80021be:	481e      	ldr	r0, [pc, #120]	; (8002238 <z_arm_fatal_error+0xc0>)
 80021c0:	f8c5 a010 	str.w	sl, [r5, #16]
 80021c4:	e9c5 0105 	strd	r0, r1, [r5, #20]
 80021c8:	e9c5 2307 	strd	r2, r3, [r5, #28]
 80021cc:	2300      	movs	r3, #0
 80021ce:	4642      	mov	r2, r8
 80021d0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 80021d4:	4817      	ldr	r0, [pc, #92]	; (8002234 <z_arm_fatal_error+0xbc>)
 80021d6:	f7ff fccb 	bl	8001b70 <z_impl_z_log_msg_static_create>
 80021da:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 80021dc:	69e3      	ldr	r3, [r4, #28]
 80021de:	b088      	sub	sp, #32
 80021e0:	466d      	mov	r5, sp
 80021e2:	4a16      	ldr	r2, [pc, #88]	; (800223c <z_arm_fatal_error+0xc4>)
 80021e4:	f04f 0a03 	mov.w	sl, #3
 80021e8:	46a8      	mov	r8, r5
 80021ea:	e9c5 2305 	strd	r2, r3, [r5, #20]
 80021ee:	f848 af10 	str.w	sl, [r8, #16]!
 80021f2:	2300      	movs	r3, #0
 80021f4:	4642      	mov	r2, r8
 80021f6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80021fa:	480e      	ldr	r0, [pc, #56]	; (8002234 <z_arm_fatal_error+0xbc>)
 80021fc:	f7ff fcb8 	bl	8001b70 <z_impl_z_log_msg_static_create>
 8002200:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8002202:	69a3      	ldr	r3, [r4, #24]
 8002204:	46ad      	mov	sp, r5
 8002206:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <z_arm_fatal_error+0xc8>)
 8002208:	f8c5 a010 	str.w	sl, [r5, #16]
 800220c:	e9c5 2305 	strd	r2, r3, [r5, #20]
 8002210:	2300      	movs	r3, #0
 8002212:	4642      	mov	r2, r8
 8002214:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8002218:	4806      	ldr	r0, [pc, #24]	; (8002234 <z_arm_fatal_error+0xbc>)
 800221a:	f7ff fca9 	bl	8001b70 <z_impl_z_log_msg_static_create>
 800221e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002220:	4621      	mov	r1, r4
 8002222:	4648      	mov	r0, r9
 8002224:	f016 fd94 	bl	8018d50 <z_fatal_error>
}
 8002228:	46bd      	mov	sp, r7
 800222a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800222e:	bf00      	nop
 8002230:	0802a0c5 	.word	0x0802a0c5
 8002234:	080289e4 	.word	0x080289e4
 8002238:	0802a0f4 	.word	0x0802a0f4
 800223c:	0802a123 	.word	0x0802a123
 8002240:	0802a132 	.word	0x0802a132

08002244 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8002244:	b200      	sxth	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8002246:	2800      	cmp	r0, #0
 8002248:	db07      	blt.n	800225a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224a:	2301      	movs	r3, #1
 800224c:	0941      	lsrs	r1, r0, #5
 800224e:	f000 001f 	and.w	r0, r0, #31
 8002252:	4a02      	ldr	r2, [pc, #8]	; (800225c <arch_irq_enable+0x18>)
 8002254:	4083      	lsls	r3, r0
 8002256:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100

08002260 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8002260:	b200      	sxth	r0, r0
		prio += _IRQ_PRIO_OFFSET;
 8002262:	3101      	adds	r1, #1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002264:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002266:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800226a:	b2c9      	uxtb	r1, r1
  if ((int32_t)(IRQn) >= 0)
 800226c:	db06      	blt.n	800227c <z_arm_irq_priority_set+0x1c>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002272:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002276:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 800227a:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227c:	f000 000f 	and.w	r0, r0, #15
 8002280:	4b01      	ldr	r3, [pc, #4]	; (8002288 <z_arm_irq_priority_set+0x28>)
 8002282:	5419      	strb	r1, [r3, r0]
}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000ed14 	.word	0xe000ed14

0800228c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 800228c:	bf30      	wfi
    b z_SysNmiOnReset
 800228e:	f7ff bffd 	b.w	800228c <z_SysNmiOnReset>
 8002292:	bf00      	nop

08002294 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8002294:	4a0f      	ldr	r2, [pc, #60]	; (80022d4 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8002296:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8002298:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <z_arm_prep_c+0x44>)
 800229e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80022a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022a4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 80022a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80022b4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 80022b8:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80022bc:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80022c0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 80022c4:	f016 fe02 	bl	8018ecc <z_bss_zero>
	z_data_copy();
 80022c8:	f017 fab6 	bl	8019838 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 80022cc:	f000 fbc4 	bl	8002a58 <z_arm_interrupt_init>
	z_cstart();
 80022d0:	f016 fe58 	bl	8018f84 <z_cstart>
 80022d4:	08000000 	.word	0x08000000
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 80022dc:	4a09      	ldr	r2, [pc, #36]	; (8002304 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 80022de:	490a      	ldr	r1, [pc, #40]	; (8002308 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 80022e0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 80022e2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 80022e4:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
 80022e6:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80022e8:	4908      	ldr	r1, [pc, #32]	; (800230c <arch_swap+0x30>)
 80022ea:	684b      	ldr	r3, [r1, #4]
 80022ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f0:	604b      	str	r3, [r1, #4]
 80022f2:	2300      	movs	r3, #0
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 80022fc:	6893      	ldr	r3, [r2, #8]
}
 80022fe:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	24010cc4 	.word	0x24010cc4
 8002308:	08029abc 	.word	0x08029abc
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8002310:	4912      	ldr	r1, [pc, #72]	; (800235c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8002312:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8002314:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8002318:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800231a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 800231e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002322:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8002324:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8002328:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 800232c:	4f0c      	ldr	r7, [pc, #48]	; (8002360 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 800232e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8002332:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
 8002334:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8002336:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8002338:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 800233a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 800233c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 800233e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8002342:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8002344:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8002346:	f000 fbcb 	bl	8002ae0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 800234a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 800234e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8002352:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8002356:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 800235a:	4770      	bx	lr
    ldr r1, =_kernel
 800235c:	24010cc4 	.word	0x24010cc4
    ldr v4, =_SCS_ICSR
 8002360:	e000ed04 	.word	0xe000ed04

08002364 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8002364:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8002368:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 800236a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 800236e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8002372:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8002374:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8002378:	2902      	cmp	r1, #2
    beq _oops
 800237a:	d0ff      	beq.n	800237c <_oops>

0800237c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 800237c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 800237e:	f018 f995 	bl	801a6ac <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8002382:	bd01      	pop	{r0, pc}

08002384 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8002384:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8002388:	3a20      	subs	r2, #32
	iframe->a2 = (uint32_t)p1;
 800238a:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <arch_new_thread+0x28>)
	iframe->a2 = (uint32_t)p1;
 800238e:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
 8002390:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 8002392:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 8002396:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
 8002398:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 800239a:	6191      	str	r1, [r2, #24]
	iframe->a4 = (uint32_t)p3;
 800239c:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 800239e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023a2:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 80023a4:	2300      	movs	r3, #0
	thread->callee_saved.psp = (uint32_t)iframe;
 80023a6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 80023a8:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 80023aa:	4770      	bx	lr
 80023ac:	08019e13 	.word	0x08019e13

080023b0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 80023b0:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <z_check_thread_stack_fail+0x28>)
{
 80023b2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 80023b4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 80023b6:	b170      	cbz	r0, 80023d6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80023b8:	f113 0f16 	cmn.w	r3, #22
 80023bc:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80023be:	d005      	beq.n	80023cc <z_check_thread_stack_fail+0x1c>
 80023c0:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d805      	bhi.n	80023d4 <z_check_thread_stack_fail+0x24>
 80023c8:	4283      	cmp	r3, r0
 80023ca:	d203      	bcs.n	80023d4 <z_check_thread_stack_fail+0x24>
		return 0;
 80023cc:	4281      	cmp	r1, r0
 80023ce:	bf28      	it	cs
 80023d0:	2000      	movcs	r0, #0
 80023d2:	4770      	bx	lr
 80023d4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
 80023d6:	4770      	bx	lr
 80023d8:	24010cc4 	.word	0x24010cc4

080023dc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 80023dc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <arch_switch_to_main_thread+0x28>)
{
 80023e0:	460d      	mov	r5, r1
 80023e2:	4614      	mov	r4, r2
	_current = main_thread;
 80023e4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80023e6:	f000 fb7b 	bl	8002ae0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80023ea:	4620      	mov	r0, r4
 80023ec:	f385 8809 	msr	PSP, r5
 80023f0:	2100      	movs	r1, #0
 80023f2:	b663      	cpsie	if
 80023f4:	f381 8811 	msr	BASEPRI, r1
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	2200      	movs	r2, #0
 80023fe:	2300      	movs	r3, #0
 8002400:	f017 fd07 	bl	8019e12 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8002404:	24010cc4 	.word	0x24010cc4

08002408 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8002408:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 800240a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 800240e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8002412:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8002416:	4904      	ldr	r1, [pc, #16]	; (8002428 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8002418:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800241a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 800241c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 800241e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8002422:	4902      	ldr	r1, [pc, #8]	; (800242c <_isr_wrapper+0x24>)
	bx r1
 8002424:	4708      	bx	r1
 8002426:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8002428:	08028484 	.word	0x08028484
	ldr r1, =z_arm_int_exit
 800242c:	08002431 	.word	0x08002431

08002430 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8002432:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8002434:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
 8002436:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8002438:	d003      	beq.n	8002442 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 800243a:	4903      	ldr	r1, [pc, #12]	; (8002448 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 800243c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8002440:	600a      	str	r2, [r1, #0]

08002442 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8002442:	4770      	bx	lr
	ldr r3, =_kernel
 8002444:	24010cc4 	.word	0x24010cc4
	ldr r1, =_SCS_ICSR
 8002448:	e000ed04 	.word	0xe000ed04

0800244c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 800244c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002450:	b086      	sub	sp, #24
 8002452:	4606      	mov	r6, r0
 8002454:	460d      	mov	r5, r1
 8002456:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
 8002458:	4b47      	ldr	r3, [pc, #284]	; (8002578 <bus_fault.constprop.0+0x12c>)
 800245a:	2402      	movs	r4, #2
 800245c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002460:	f107 0210 	add.w	r2, r7, #16
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	4845      	ldr	r0, [pc, #276]	; (800257c <bus_fault.constprop.0+0x130>)
 8002468:	613c      	str	r4, [r7, #16]
 800246a:	f018 f92e 	bl	801a6ca <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800246e:	4b44      	ldr	r3, [pc, #272]	; (8002580 <bus_fault.constprop.0+0x134>)
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	04d9      	lsls	r1, r3, #19
 8002474:	d56d      	bpl.n	8002552 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
 8002476:	4b43      	ldr	r3, [pc, #268]	; (8002584 <bus_fault.constprop.0+0x138>)
 8002478:	f107 0210 	add.w	r2, r7, #16
 800247c:	483f      	ldr	r0, [pc, #252]	; (800257c <bus_fault.constprop.0+0x130>)
 800247e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002482:	e9c7 4304 	strd	r4, r3, [r7, #16]
 8002486:	f018 f920 	bl	801a6ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
 800248a:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800248c:	4b3c      	ldr	r3, [pc, #240]	; (8002580 <bus_fault.constprop.0+0x134>)
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	051a      	lsls	r2, r3, #20
 8002492:	d50b      	bpl.n	80024ac <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
 8002494:	4b3c      	ldr	r3, [pc, #240]	; (8002588 <bus_fault.constprop.0+0x13c>)
 8002496:	f107 0210 	add.w	r2, r7, #16
 800249a:	4838      	ldr	r0, [pc, #224]	; (800257c <bus_fault.constprop.0+0x130>)
 800249c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	2302      	movs	r3, #2
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	f018 f910 	bl	801a6ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
 80024aa:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80024ac:	4c34      	ldr	r4, [pc, #208]	; (8002580 <bus_fault.constprop.0+0x134>)
 80024ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024b0:	059b      	lsls	r3, r3, #22
 80024b2:	d523      	bpl.n	80024fc <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
 80024b4:	46e8      	mov	r8, sp
 80024b6:	4b35      	ldr	r3, [pc, #212]	; (800258c <bus_fault.constprop.0+0x140>)
 80024b8:	f107 0210 	add.w	r2, r7, #16
 80024bc:	482f      	ldr	r0, [pc, #188]	; (800257c <bus_fault.constprop.0+0x130>)
 80024be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	2302      	movs	r3, #2
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	f018 f8ff 	bl	801a6ca <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 80024cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80024ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024d0:	0410      	lsls	r0, r2, #16
 80024d2:	d512      	bpl.n	80024fa <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 80024d4:	b088      	sub	sp, #32
 80024d6:	466a      	mov	r2, sp
 80024d8:	492d      	ldr	r1, [pc, #180]	; (8002590 <bus_fault.constprop.0+0x144>)
 80024da:	4828      	ldr	r0, [pc, #160]	; (800257c <bus_fault.constprop.0+0x130>)
 80024dc:	e9c2 1305 	strd	r1, r3, [r2, #20]
 80024e0:	2303      	movs	r3, #3
 80024e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80024e6:	f842 3f10 	str.w	r3, [r2, #16]!
 80024ea:	f018 f8ee 	bl	801a6ca <z_log_msg_static_create.constprop.0>
 80024ee:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
 80024f0:	b11e      	cbz	r6, 80024fa <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80024f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80024f8:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 80024fa:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80024fc:	4b20      	ldr	r3, [pc, #128]	; (8002580 <bus_fault.constprop.0+0x134>)
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	0559      	lsls	r1, r3, #21
 8002502:	d50b      	bpl.n	800251c <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
 8002504:	4b23      	ldr	r3, [pc, #140]	; (8002594 <bus_fault.constprop.0+0x148>)
 8002506:	f107 0210 	add.w	r2, r7, #16
 800250a:	481c      	ldr	r0, [pc, #112]	; (800257c <bus_fault.constprop.0+0x130>)
 800250c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	2302      	movs	r3, #2
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	f018 f8d8 	bl	801a6ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 800251a:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <bus_fault.constprop.0+0x134>)
 800251e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002520:	05d2      	lsls	r2, r2, #23
 8002522:	d518      	bpl.n	8002556 <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
 8002524:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <bus_fault.constprop.0+0x14c>)
 8002526:	f107 0210 	add.w	r2, r7, #16
 800252a:	4814      	ldr	r0, [pc, #80]	; (800257c <bus_fault.constprop.0+0x130>)
 800252c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	2302      	movs	r3, #2
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	f018 f8c8 	bl	801a6ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 800253a:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800253c:	4a10      	ldr	r2, [pc, #64]	; (8002580 <bus_fault.constprop.0+0x134>)

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
 800253e:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8002540:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002542:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8002546:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8002548:	2300      	movs	r3, #0
 800254a:	702b      	strb	r3, [r5, #0]
}
 800254c:	46bd      	mov	sp, r7
 800254e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
 8002552:	2016      	movs	r0, #22
 8002554:	e79a      	b.n	800248c <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	049b      	lsls	r3, r3, #18
 800255a:	d5ef      	bpl.n	800253c <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <bus_fault.constprop.0+0x150>)
 800255e:	f107 0210 	add.w	r2, r7, #16
 8002562:	4806      	ldr	r0, [pc, #24]	; (800257c <bus_fault.constprop.0+0x130>)
 8002564:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	2302      	movs	r3, #2
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	f018 f8ac 	bl	801a6ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
 8002572:	201c      	movs	r0, #28
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8002574:	e7e2      	b.n	800253c <bus_fault.constprop.0+0xf0>
 8002576:	bf00      	nop
 8002578:	0802a160 	.word	0x0802a160
 800257c:	080289e4 	.word	0x080289e4
 8002580:	e000ed00 	.word	0xe000ed00
 8002584:	0802a176 	.word	0x0802a176
 8002588:	0802a187 	.word	0x0802a187
 800258c:	0802a19a 	.word	0x0802a19a
 8002590:	0802a1b3 	.word	0x0802a1b3
 8002594:	0802a1c8 	.word	0x0802a1c8
 8002598:	0802a1e3 	.word	0x0802a1e3
 800259c:	0802a1fb 	.word	0x0802a1fb

080025a0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 80025a0:	b510      	push	{r4, lr}
 80025a2:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <usage_fault.constprop.0+0xe0>)
 80025a6:	2402      	movs	r4, #2
 80025a8:	aa04      	add	r2, sp, #16
 80025aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80025ae:	4835      	ldr	r0, [pc, #212]	; (8002684 <usage_fault.constprop.0+0xe4>)
 80025b0:	9305      	str	r3, [sp, #20]
 80025b2:	9404      	str	r4, [sp, #16]
 80025b4:	f018 f889 	bl	801a6ca <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80025b8:	4b33      	ldr	r3, [pc, #204]	; (8002688 <usage_fault.constprop.0+0xe8>)
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	019a      	lsls	r2, r3, #6
 80025be:	d55d      	bpl.n	800267c <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
 80025c0:	4b32      	ldr	r3, [pc, #200]	; (800268c <usage_fault.constprop.0+0xec>)
 80025c2:	aa04      	add	r2, sp, #16
 80025c4:	482f      	ldr	r0, [pc, #188]	; (8002684 <usage_fault.constprop.0+0xe4>)
 80025c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80025ca:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80025ce:	f018 f87c 	bl	801a6ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
 80025d2:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80025d4:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <usage_fault.constprop.0+0xe8>)
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	01db      	lsls	r3, r3, #7
 80025da:	d50a      	bpl.n	80025f2 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
 80025dc:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <usage_fault.constprop.0+0xf0>)
 80025de:	aa04      	add	r2, sp, #16
 80025e0:	4828      	ldr	r0, [pc, #160]	; (8002684 <usage_fault.constprop.0+0xe4>)
 80025e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80025e6:	9305      	str	r3, [sp, #20]
 80025e8:	2302      	movs	r3, #2
 80025ea:	9304      	str	r3, [sp, #16]
 80025ec:	f018 f86d 	bl	801a6ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 80025f0:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80025f2:	4b25      	ldr	r3, [pc, #148]	; (8002688 <usage_fault.constprop.0+0xe8>)
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	031c      	lsls	r4, r3, #12
 80025f8:	d50a      	bpl.n	8002610 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <usage_fault.constprop.0+0xf4>)
 80025fc:	aa04      	add	r2, sp, #16
 80025fe:	4821      	ldr	r0, [pc, #132]	; (8002684 <usage_fault.constprop.0+0xe4>)
 8002600:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002604:	9305      	str	r3, [sp, #20]
 8002606:	2302      	movs	r3, #2
 8002608:	9304      	str	r3, [sp, #16]
 800260a:	f018 f85e 	bl	801a6ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 800260e:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <usage_fault.constprop.0+0xe8>)
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	0359      	lsls	r1, r3, #13
 8002616:	d50a      	bpl.n	800262e <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <usage_fault.constprop.0+0xf8>)
 800261a:	aa04      	add	r2, sp, #16
 800261c:	4819      	ldr	r0, [pc, #100]	; (8002684 <usage_fault.constprop.0+0xe4>)
 800261e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002622:	9305      	str	r3, [sp, #20]
 8002624:	2302      	movs	r3, #2
 8002626:	9304      	str	r3, [sp, #16]
 8002628:	f018 f84f 	bl	801a6ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 800262c:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <usage_fault.constprop.0+0xe8>)
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	039a      	lsls	r2, r3, #14
 8002634:	d50a      	bpl.n	800264c <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <usage_fault.constprop.0+0xfc>)
 8002638:	aa04      	add	r2, sp, #16
 800263a:	4812      	ldr	r0, [pc, #72]	; (8002684 <usage_fault.constprop.0+0xe4>)
 800263c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002640:	9305      	str	r3, [sp, #20]
 8002642:	2302      	movs	r3, #2
 8002644:	9304      	str	r3, [sp, #16]
 8002646:	f018 f840 	bl	801a6ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 800264a:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <usage_fault.constprop.0+0xe8>)
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	03db      	lsls	r3, r3, #15
 8002652:	d50a      	bpl.n	800266a <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <usage_fault.constprop.0+0x100>)
 8002656:	aa04      	add	r2, sp, #16
 8002658:	480a      	ldr	r0, [pc, #40]	; (8002684 <usage_fault.constprop.0+0xe4>)
 800265a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800265e:	9305      	str	r3, [sp, #20]
 8002660:	2302      	movs	r3, #2
 8002662:	9304      	str	r3, [sp, #16]
 8002664:	f018 f831 	bl	801a6ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 8002668:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800266a:	4a07      	ldr	r2, [pc, #28]	; (8002688 <usage_fault.constprop.0+0xe8>)
 800266c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800266e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002672:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002676:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 8002678:	b006      	add	sp, #24
 800267a:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
 800267c:	201d      	movs	r0, #29
 800267e:	e7a9      	b.n	80025d4 <usage_fault.constprop.0+0x34>
 8002680:	0802a22a 	.word	0x0802a22a
 8002684:	080289e4 	.word	0x080289e4
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	0802a242 	.word	0x0802a242
 8002690:	0802a255 	.word	0x0802a255
 8002694:	0802a26f 	.word	0x0802a26f
 8002698:	0802a28d 	.word	0x0802a28d
 800269c:	0802a2b2 	.word	0x0802a2b2
 80026a0:	0802a2cc 	.word	0x0802a2cc

080026a4 <mem_manage_fault>:
{
 80026a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	4681      	mov	r9, r0
 80026ac:	468a      	mov	sl, r1
 80026ae:	4690      	mov	r8, r2
 80026b0:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
 80026b2:	4b51      	ldr	r3, [pc, #324]	; (80027f8 <mem_manage_fault+0x154>)
 80026b4:	2402      	movs	r4, #2
 80026b6:	f107 0210 	add.w	r2, r7, #16
 80026ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	484e      	ldr	r0, [pc, #312]	; (80027fc <mem_manage_fault+0x158>)
 80026c2:	613c      	str	r4, [r7, #16]
 80026c4:	f018 f801 	bl	801a6ca <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80026c8:	4b4d      	ldr	r3, [pc, #308]	; (8002800 <mem_manage_fault+0x15c>)
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	06de      	lsls	r6, r3, #27
 80026ce:	d545      	bpl.n	800275c <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
 80026d0:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <mem_manage_fault+0x160>)
 80026d2:	f107 0210 	add.w	r2, r7, #16
 80026d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80026da:	4848      	ldr	r0, [pc, #288]	; (80027fc <mem_manage_fault+0x158>)
 80026dc:	e9c7 4304 	strd	r4, r3, [r7, #16]
		reason = K_ERR_ARM_MEM_STACKING;
 80026e0:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
 80026e2:	f017 fff2 	bl	801a6ca <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80026e6:	4b46      	ldr	r3, [pc, #280]	; (8002800 <mem_manage_fault+0x15c>)
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	071d      	lsls	r5, r3, #28
 80026ec:	d50b      	bpl.n	8002706 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
 80026ee:	4b46      	ldr	r3, [pc, #280]	; (8002808 <mem_manage_fault+0x164>)
		reason = K_ERR_ARM_MEM_UNSTACKING;
 80026f0:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
 80026f2:	f107 0210 	add.w	r2, r7, #16
 80026f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	2302      	movs	r3, #2
 80026fe:	483f      	ldr	r0, [pc, #252]	; (80027fc <mem_manage_fault+0x158>)
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	f017 ffe2 	bl	801a6ca <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8002706:	4d3e      	ldr	r5, [pc, #248]	; (8002800 <mem_manage_fault+0x15c>)
 8002708:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800270a:	0798      	lsls	r0, r3, #30
 800270c:	d528      	bpl.n	8002760 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
 800270e:	466c      	mov	r4, sp
 8002710:	4b3e      	ldr	r3, [pc, #248]	; (800280c <mem_manage_fault+0x168>)
 8002712:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002716:	f107 0210 	add.w	r2, r7, #16
 800271a:	4838      	ldr	r0, [pc, #224]	; (80027fc <mem_manage_fault+0x158>)
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	2302      	movs	r3, #2
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	f017 ffd2 	bl	801a6ca <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
 8002726:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8002728:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800272a:	0619      	lsls	r1, r3, #24
 800272c:	d560      	bpl.n	80027f0 <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 800272e:	b088      	sub	sp, #32
 8002730:	466a      	mov	r2, sp
 8002732:	4b37      	ldr	r3, [pc, #220]	; (8002810 <mem_manage_fault+0x16c>)
 8002734:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8002738:	4830      	ldr	r0, [pc, #192]	; (80027fc <mem_manage_fault+0x158>)
 800273a:	e9c2 3605 	strd	r3, r6, [r2, #20]
 800273e:	2303      	movs	r3, #3
 8002740:	f842 3f10 	str.w	r3, [r2, #16]!
 8002744:	f017 ffc1 	bl	801a6ca <z_log_msg_static_create.constprop.0>
 8002748:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
 800274a:	f1ba 0f00 	cmp.w	sl, #0
 800274e:	d003      	beq.n	8002758 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8002750:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002756:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 8002758:	2413      	movs	r4, #19
 800275a:	e003      	b.n	8002764 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
 800275c:	2410      	movs	r4, #16
 800275e:	e7c2      	b.n	80026e6 <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
 8002760:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8002764:	4b26      	ldr	r3, [pc, #152]	; (8002800 <mem_manage_fault+0x15c>)
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	07da      	lsls	r2, r3, #31
 800276a:	d50b      	bpl.n	8002784 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <mem_manage_fault+0x170>)
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 800276e:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
 8002770:	f107 0210 	add.w	r2, r7, #16
 8002774:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	2302      	movs	r3, #2
 800277c:	481f      	ldr	r0, [pc, #124]	; (80027fc <mem_manage_fault+0x158>)
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	f017 ffa3 	bl	801a6ca <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8002784:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <mem_manage_fault+0x15c>)
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	069b      	lsls	r3, r3, #26
 800278a:	d50b      	bpl.n	80027a4 <mem_manage_fault+0x100>
		PR_FAULT_INFO(
 800278c:	4b22      	ldr	r3, [pc, #136]	; (8002818 <mem_manage_fault+0x174>)
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 800278e:	2415      	movs	r4, #21
		PR_FAULT_INFO(
 8002790:	f107 0210 	add.w	r2, r7, #16
 8002794:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	2302      	movs	r3, #2
 800279c:	4817      	ldr	r0, [pc, #92]	; (80027fc <mem_manage_fault+0x158>)
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	f017 ff93 	bl	801a6ca <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80027a4:	4b16      	ldr	r3, [pc, #88]	; (8002800 <mem_manage_fault+0x15c>)
 80027a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027a8:	06d5      	lsls	r5, r2, #27
 80027aa:	d402      	bmi.n	80027b2 <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 80027ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80027ae:	0790      	lsls	r0, r2, #30
 80027b0:	d50a      	bpl.n	80027c8 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	0519      	lsls	r1, r3, #20
 80027b6:	d507      	bpl.n	80027c8 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 80027b8:	4649      	mov	r1, r9
 80027ba:	4630      	mov	r0, r6
 80027bc:	f7ff fdf8 	bl	80023b0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 80027c0:	b110      	cbz	r0, 80027c8 <mem_manage_fault+0x124>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80027c2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 80027c6:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80027c8:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <mem_manage_fault+0x15c>)
 80027ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027cc:	0692      	lsls	r2, r2, #26
 80027ce:	d503      	bpl.n	80027d8 <mem_manage_fault+0x134>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 80027d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80027d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}
 80027da:	4620      	mov	r0, r4
 80027dc:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80027de:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80027e4:	2300      	movs	r3, #0
 80027e6:	f888 3000 	strb.w	r3, [r8]
}
 80027ea:	46bd      	mov	sp, r7
 80027ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
 80027f0:	f06f 0615 	mvn.w	r6, #21
 80027f4:	e7b0      	b.n	8002758 <mem_manage_fault+0xb4>
 80027f6:	bf00      	nop
 80027f8:	0802a2f7 	.word	0x0802a2f7
 80027fc:	080289e4 	.word	0x080289e4
 8002800:	e000ed00 	.word	0xe000ed00
 8002804:	0802a30d 	.word	0x0802a30d
 8002808:	0802a187 	.word	0x0802a187
 800280c:	0802a340 	.word	0x0802a340
 8002810:	0802a358 	.word	0x0802a358
 8002814:	0802a36e 	.word	0x0802a36e
 8002818:	0802a1fb 	.word	0x0802a1fb

0800281c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 800281c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8002820:	4b77      	ldr	r3, [pc, #476]	; (8002a00 <z_arm_fault+0x1e4>)
{
 8002822:	b08b      	sub	sp, #44	; 0x2c
 8002824:	4605      	mov	r5, r0
 8002826:	2600      	movs	r6, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8002828:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
 800282c:	af00      	add	r7, sp, #0
 800282e:	f3c8 0408 	ubfx	r4, r8, #0, #9
 8002832:	f386 8811 	msr	BASEPRI, r6
 8002836:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 800283a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 800283e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8002842:	d10e      	bne.n	8002862 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8002844:	f002 030c 	and.w	r3, r2, #12
 8002848:	2b08      	cmp	r3, #8
 800284a:	d119      	bne.n	8002880 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 800284c:	4b6d      	ldr	r3, [pc, #436]	; (8002a04 <z_arm_fault+0x1e8>)
 800284e:	f107 0218 	add.w	r2, r7, #24
 8002852:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002856:	486c      	ldr	r0, [pc, #432]	; (8002a08 <z_arm_fault+0x1ec>)
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	2302      	movs	r3, #2
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	f017 ff34 	bl	801a6ca <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
 8002862:	2600      	movs	r6, #0
		return NULL;
 8002864:	4635      	mov	r5, r6
	*recoverable = false;
 8002866:	2300      	movs	r3, #0
 8002868:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
 800286a:	1ee3      	subs	r3, r4, #3
 800286c:	2b09      	cmp	r3, #9
 800286e:	f200 80a6 	bhi.w	80029be <z_arm_fault+0x1a2>
 8002872:	e8df f003 	tbb	[pc, r3]
 8002876:	990a      	.short	0x990a
 8002878:	a4a4959c 	.word	0xa4a4959c
 800287c:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8002880:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8002882:	bf4c      	ite	mi
 8002884:	460d      	movmi	r5, r1
			*nested_exc = true;
 8002886:	2601      	movpl	r6, #1
 8002888:	e7ed      	b.n	8002866 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
 800288a:	46e9      	mov	r9, sp
 800288c:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <z_arm_fault+0x1f0>)
 800288e:	f04f 0802 	mov.w	r8, #2
 8002892:	f107 0218 	add.w	r2, r7, #24
 8002896:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	485a      	ldr	r0, [pc, #360]	; (8002a08 <z_arm_fault+0x1ec>)
 800289e:	f8c7 8018 	str.w	r8, [r7, #24]
 80028a2:	f017 ff12 	bl	801a6ca <z_log_msg_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80028a6:	4c56      	ldr	r4, [pc, #344]	; (8002a00 <z_arm_fault+0x1e4>)
	*recoverable = false;
 80028a8:	2300      	movs	r3, #0
 80028aa:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80028ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028ae:	079a      	lsls	r2, r3, #30
 80028b0:	d50b      	bpl.n	80028ca <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
 80028b2:	4b57      	ldr	r3, [pc, #348]	; (8002a10 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
 80028b4:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
 80028b8:	f107 0218 	add.w	r2, r7, #24
 80028bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80028c0:	4851      	ldr	r0, [pc, #324]	; (8002a08 <z_arm_fault+0x1ec>)
 80028c2:	f017 ff02 	bl	801a6ca <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80028c6:	2400      	movs	r4, #0
 80028c8:	e041      	b.n	800294e <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 80028ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da01      	bge.n	80028d4 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
 80028d0:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <z_arm_fault+0x1f8>)
 80028d2:	e7ef      	b.n	80028b4 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80028d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	d5f5      	bpl.n	80028c6 <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
 80028da:	4b4f      	ldr	r3, [pc, #316]	; (8002a18 <z_arm_fault+0x1fc>)
 80028dc:	f107 0218 	add.w	r2, r7, #24
 80028e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80028e4:	4848      	ldr	r0, [pc, #288]	; (8002a08 <z_arm_fault+0x1ec>)
 80028e6:	e9c7 8306 	strd	r8, r3, [r7, #24]
 80028ea:	f017 feee 	bl	801a6ca <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80028ee:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 80028f0:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80028f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f6:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80028f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80028fc:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8002900:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 8002902:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8002906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800290a:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800290c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002910:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8002914:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8002918:	429a      	cmp	r2, r3
 800291a:	d008      	beq.n	800292e <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 800291c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800291e:	b2db      	uxtb	r3, r3
 8002920:	b38b      	cbz	r3, 8002986 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
 8002922:	1dfa      	adds	r2, r7, #7
 8002924:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8002926:	4628      	mov	r0, r5
 8002928:	f7ff febc 	bl	80026a4 <mem_manage_fault>
 800292c:	e03a      	b.n	80029a4 <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 800292e:	b088      	sub	sp, #32
 8002930:	682b      	ldr	r3, [r5, #0]
 8002932:	466a      	mov	r2, sp
 8002934:	4939      	ldr	r1, [pc, #228]	; (8002a1c <z_arm_fault+0x200>)
 8002936:	4834      	ldr	r0, [pc, #208]	; (8002a08 <z_arm_fault+0x1ec>)
 8002938:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800293c:	2303      	movs	r3, #3
 800293e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8002942:	f842 3f10 	str.w	r3, [r2, #16]!
 8002946:	f017 fec0 	bl	801a6ca <z_log_msg_static_create.constprop.0>
 800294a:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
 800294c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	b9ab      	cbnz	r3, 800297e <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8002952:	2220      	movs	r2, #32
 8002954:	4629      	mov	r1, r5
 8002956:	f107 0008 	add.w	r0, r7, #8
 800295a:	f017 fed6 	bl	801a70a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	2e00      	cmp	r6, #0
 8002962:	d047      	beq.n	80029f4 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8002964:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002968:	b922      	cbnz	r2, 8002974 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800296a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800296e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8002972:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 8002974:	f107 0108 	add.w	r1, r7, #8
 8002978:	4620      	mov	r0, r4
 800297a:	f7ff fbfd 	bl	8002178 <z_arm_fatal_error>
}
 800297e:	372c      	adds	r7, #44	; 0x2c
 8002980:	46bd      	mov	sp, r7
 8002982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 8002986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002988:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800298c:	d004      	beq.n	8002998 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
 800298e:	1df9      	adds	r1, r7, #7
 8002990:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8002992:	f7ff fd5b 	bl	800244c <bus_fault.constprop.0>
 8002996:	e005      	b.n	80029a4 <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 8002998:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299e:	d392      	bcc.n	80028c6 <z_arm_fault+0xaa>
			reason = usage_fault(esf);
 80029a0:	f7ff fdfe 	bl	80025a0 <usage_fault.constprop.0>
 80029a4:	4604      	mov	r4, r0
 80029a6:	e7d2      	b.n	800294e <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
 80029a8:	1dfa      	adds	r2, r7, #7
 80029aa:	2100      	movs	r1, #0
 80029ac:	e7bb      	b.n	8002926 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
 80029ae:	1df9      	adds	r1, r7, #7
 80029b0:	2000      	movs	r0, #0
 80029b2:	e7ee      	b.n	8002992 <z_arm_fault+0x176>
	PR_FAULT_INFO(
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <z_arm_fault+0x204>)
 80029b6:	61fb      	str	r3, [r7, #28]
 80029b8:	2302      	movs	r3, #2
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	e77c      	b.n	80028b8 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
 80029be:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
 80029c2:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <z_arm_fault+0x208>)
 80029c4:	46e8      	mov	r8, sp
 80029c6:	b08a      	sub	sp, #40	; 0x28
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <z_arm_fault+0x20c>)
 80029ca:	bf18      	it	ne
 80029cc:	4613      	movne	r3, r2
 80029ce:	466a      	mov	r2, sp
 80029d0:	4916      	ldr	r1, [pc, #88]	; (8002a2c <z_arm_fault+0x210>)
 80029d2:	3c10      	subs	r4, #16
 80029d4:	480c      	ldr	r0, [pc, #48]	; (8002a08 <z_arm_fault+0x1ec>)
 80029d6:	61d4      	str	r4, [r2, #28]
 80029d8:	e9c2 1305 	strd	r1, r3, [r2, #20]
 80029dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e0:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 80029e4:	8413      	strh	r3, [r2, #32]
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <z_arm_fault+0x214>)
 80029e8:	f842 3f10 	str.w	r3, [r2, #16]!
 80029ec:	f017 fe6d 	bl	801a6ca <z_log_msg_static_create.constprop.0>
 80029f0:	46c5      	mov	sp, r8
}
 80029f2:	e768      	b.n	80028c6 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80029f4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	e7b9      	b.n	8002972 <z_arm_fault+0x156>
 80029fe:	bf00      	nop
 8002a00:	e000ed00 	.word	0xe000ed00
 8002a04:	0802a3bb 	.word	0x0802a3bb
 8002a08:	080289e4 	.word	0x080289e4
 8002a0c:	0802a3e6 	.word	0x0802a3e6
 8002a10:	0802a3fd 	.word	0x0802a3fd
 8002a14:	0802a41e 	.word	0x0802a41e
 8002a18:	0802a42c 	.word	0x0802a42c
 8002a1c:	0802a44b 	.word	0x0802a44b
 8002a20:	0802a467 	.word	0x0802a467
 8002a24:	0802a3a2 	.word	0x0802a3a2
 8002a28:	0802a38d 	.word	0x0802a38d
 8002a2c:	0802a48b 	.word	0x0802a48b
 8002a30:	01000004 	.word	0x01000004

08002a34 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8002a34:	4a02      	ldr	r2, [pc, #8]	; (8002a40 <z_arm_fault_init+0xc>)
 8002a36:	6953      	ldr	r3, [r2, #20]
 8002a38:	f043 0310 	orr.w	r3, r3, #16
 8002a3c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8002a44:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8002a48:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8002a4c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8002a4e:	4672      	mov	r2, lr
	bl z_arm_fault
 8002a50:	f7ff fee4 	bl	800281c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8002a54:	bd01      	pop	{r0, pc}
 8002a56:	bf00      	nop

08002a58 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8002a58:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5a:	4804      	ldr	r0, [pc, #16]	; (8002a6c <z_arm_interrupt_init+0x14>)
 8002a5c:	2110      	movs	r1, #16
 8002a5e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8002a60:	3301      	adds	r3, #1
 8002a62:	2ba3      	cmp	r3, #163	; 0xa3
 8002a64:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8002a68:	d1f9      	bne.n	8002a5e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100

08002a70 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002a70:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8002a72:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8002a76:	4808      	ldr	r0, [pc, #32]	; (8002a98 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8002a78:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 8002a7c:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8002a7e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8002a82:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8002a86:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8002a88:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8002a8a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8002a8e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8002a92:	f7ff fbff 	bl	8002294 <z_arm_prep_c>
 8002a96:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8002a98:	24011180 	.word	0x24011180

08002a9c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <z_impl_k_thread_abort+0x24>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4283      	cmp	r3, r0
 8002aa2:	d10b      	bne.n	8002abc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aa4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8002aa8:	b143      	cbz	r3, 8002abc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <z_impl_k_thread_abort+0x28>)
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ab2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8002ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 8002abc:	f016 be5c 	b.w	8019778 <z_thread_abort>
 8002ac0:	24010cc4 	.word	0x24010cc4
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8002ac8:	4b02      	ldr	r3, [pc, #8]	; (8002ad4 <z_arm_configure_static_mpu_regions+0xc>)
 8002aca:	2101      	movs	r1, #1
 8002acc:	4a02      	ldr	r2, [pc, #8]	; (8002ad8 <z_arm_configure_static_mpu_regions+0x10>)
 8002ace:	4803      	ldr	r0, [pc, #12]	; (8002adc <z_arm_configure_static_mpu_regions+0x14>)
 8002ad0:	f000 b892 	b.w	8002bf8 <arm_core_mpu_configure_static_mpu_regions>
 8002ad4:	24050000 	.word	0x24050000
 8002ad8:	24000000 	.word	0x24000000
 8002adc:	08028b08 	.word	0x08028b08

08002ae0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8002ae0:	6e42      	ldr	r2, [r0, #100]	; 0x64
	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8002ae2:	2140      	movs	r1, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8002ae6:	3a40      	subs	r2, #64	; 0x40

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002ae8:	4618      	mov	r0, r3
	dynamic_regions[region_num].start = guard_start;
 8002aea:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8002aec:	4a03      	ldr	r2, [pc, #12]	; (8002afc <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8002aee:	e9c3 1201 	strd	r1, r2, [r3, #4]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002af2:	2101      	movs	r1, #1
 8002af4:	f000 b88a 	b.w	8002c0c <arm_core_mpu_configure_dynamic_mpu_regions>
 8002af8:	24001004 	.word	0x24001004
 8002afc:	150b0000 	.word	0x150b0000

08002b00 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8002b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b04:	469c      	mov	ip, r3
 8002b06:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
 8002b08:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
 8002b0a:	2300      	movs	r3, #0
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8002b0c:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 8002bbc <mpu_configure_regions+0xbc>
 8002b10:	428b      	cmp	r3, r1
 8002b12:	da1a      	bge.n	8002b4a <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
 8002b14:	6844      	ldr	r4, [r0, #4]
 8002b16:	2c00      	cmp	r4, #0
 8002b18:	d04d      	beq.n	8002bb6 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 8002b1a:	f1bc 0f00 	cmp.w	ip, #0
 8002b1e:	d01d      	beq.n	8002b5c <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8002b20:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8002b22:	4234      	tst	r4, r6
 8002b24:	d015      	beq.n	8002b52 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 8002b26:	466c      	mov	r4, sp
 8002b28:	b088      	sub	sp, #32
 8002b2a:	466a      	mov	r2, sp
 8002b2c:	4924      	ldr	r1, [pc, #144]	; (8002bc0 <mpu_configure_regions+0xc0>)
 8002b2e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8002b32:	2303      	movs	r3, #3
 8002b34:	f842 3f10 	str.w	r3, [r2, #16]!
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8002b3e:	4821      	ldr	r0, [pc, #132]	; (8002bc4 <mpu_configure_regions+0xc4>)
			return -EINVAL;
 8002b40:	f06f 0515 	mvn.w	r5, #21
 8002b44:	f7ff f814 	bl	8001b70 <z_impl_z_log_msg_static_create>
 8002b48:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
 8002b52:	2c1f      	cmp	r4, #31
 8002b54:	d9e7      	bls.n	8002b26 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
 8002b56:	6802      	ldr	r2, [r0, #0]
		&&
 8002b58:	4216      	tst	r6, r2
 8002b5a:	d1e4      	bne.n	8002b26 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8002b5c:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8002b5e:	fa5f f885 	uxtb.w	r8, r5
	region_conf.base = new_region->start;
 8002b62:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8002b64:	6886      	ldr	r6, [r0, #8]
	if (size <= 32U) {
 8002b66:	d914      	bls.n	8002b92 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
 8002b68:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002b6c:	d813      	bhi.n	8002b96 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8002b6e:	3c01      	subs	r4, #1
 8002b70:	fab4 f484 	clz	r4, r4
 8002b74:	f1c4 041f 	rsb	r4, r4, #31
 8002b78:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8002b7a:	f1b8 0f0f 	cmp.w	r8, #15
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8002b7e:	ea46 0604 	orr.w	r6, r6, r4
 8002b82:	d90a      	bls.n	8002b9a <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8002b84:	466c      	mov	r4, sp
 8002b86:	b088      	sub	sp, #32
 8002b88:	466a      	mov	r2, sp
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <mpu_configure_regions+0xc8>)
 8002b8c:	e9c2 3505 	strd	r3, r5, [r2, #20]
 8002b90:	e7cf      	b.n	8002b32 <mpu_configure_regions+0x32>
		return REGION_32B;
 8002b92:	2408      	movs	r4, #8
 8002b94:	e7f1      	b.n	8002b7a <mpu_configure_regions+0x7a>
		return REGION_4G;
 8002b96:	243e      	movs	r4, #62	; 0x3e
 8002b98:	e7ef      	b.n	8002b7a <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002b9a:	f022 021f 	bic.w	r2, r2, #31
 8002b9e:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002ba2:	f046 0601 	orr.w	r6, r6, #1
				| MPU_RBAR_VALID_Msk | index;
 8002ba6:	432a      	orrs	r2, r5
		reg_index++;
 8002ba8:	3501      	adds	r5, #1
 8002baa:	f042 0210 	orr.w	r2, r2, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002bae:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002bb2:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	300c      	adds	r0, #12
 8002bba:	e7a9      	b.n	8002b10 <mpu_configure_regions+0x10>
 8002bbc:	e000ed00 	.word	0xe000ed00
 8002bc0:	0802a4a2 	.word	0x0802a4a2
 8002bc4:	080289dc 	.word	0x080289dc
 8002bc8:	0802a4c5 	.word	0x0802a4c5

08002bcc <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <arm_core_mpu_enable+0x14>)
 8002bce:	2205      	movs	r2, #5
 8002bd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8002bd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002bd8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002be4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
 8002be8:	4b02      	ldr	r3, [pc, #8]	; (8002bf4 <arm_core_mpu_disable+0x10>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8002bf8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8002bfa:	4c03      	ldr	r4, [pc, #12]	; (8002c08 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	7822      	ldrb	r2, [r4, #0]
 8002c00:	f7ff ff7e 	bl	8002b00 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8002c04:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8002c06:	bd10      	pop	{r4, pc}
 8002c08:	24010d28 	.word	0x24010d28

08002c0c <arm_core_mpu_configure_dynamic_mpu_regions>:

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8002c0c:	4a09      	ldr	r2, [pc, #36]	; (8002c34 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 8002c0e:	b508      	push	{r3, lr}
 8002c10:	2300      	movs	r3, #0
 8002c12:	7812      	ldrb	r2, [r2, #0]
 8002c14:	f7ff ff74 	bl	8002b00 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8002c18:	f110 0f16 	cmn.w	r0, #22
 8002c1c:	d003      	beq.n	8002c26 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
 8002c20:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8002c22:	280f      	cmp	r0, #15
 8002c24:	dd00      	ble.n	8002c28 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8002c26:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8002c28:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
 8002c2c:	3001      	adds	r0, #1
  MPU->RASR = 0U;
 8002c2e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8002c32:	e7f6      	b.n	8002c22 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8002c34:	24010d28 	.word	0x24010d28
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8002c3c:	4914      	ldr	r1, [pc, #80]	; (8002c90 <z_arm_mpu_init+0x54>)
 8002c3e:	6808      	ldr	r0, [r1, #0]
 8002c40:	2810      	cmp	r0, #16
{
 8002c42:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8002c44:	d821      	bhi.n	8002c8a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8002c46:	f7ff ffcd 	bl	8002be4 <arm_core_mpu_disable>
 8002c4a:	4c12      	ldr	r4, [pc, #72]	; (8002c94 <z_arm_mpu_init+0x58>)
 8002c4c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002c4e:	2200      	movs	r2, #0
 8002c50:	4290      	cmp	r0, r2
 8002c52:	f101 010c 	add.w	r1, r1, #12
 8002c56:	d105      	bne.n	8002c64 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <z_arm_mpu_init+0x5c>)
 8002c5a:	7018      	strb	r0, [r3, #0]
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8002c5c:	2000      	movs	r0, #0
	arm_core_mpu_enable();
 8002c5e:	f7ff ffb5 	bl	8002bcc <arm_core_mpu_enable>
}
 8002c62:	bd10      	pop	{r4, pc}
 8002c64:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002c68:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8002c6c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8002c70:	4313      	orrs	r3, r2
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002c72:	3201      	adds	r2, #1
 8002c74:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002c78:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8002c88:	e7e2      	b.n	8002c50 <z_arm_mpu_init+0x14>
		return -1;
 8002c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8e:	e7e8      	b.n	8002c62 <z_arm_mpu_init+0x26>
 8002c90:	08028a4c 	.word	0x08028a4c
 8002c94:	e000ed00 	.word	0xe000ed00
 8002c98:	24010d28 	.word	0x24010d28

08002c9c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 8002c9c:	4b01      	ldr	r3, [pc, #4]	; (8002ca4 <__stdout_hook_install+0x8>)
 8002c9e:	6018      	str	r0, [r3, #0]
}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	24000008 	.word	0x24000008

08002ca8 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
 8002ca8:	b40c      	push	{r2, r3}
 8002caa:	b510      	push	{r4, lr}
 8002cac:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
 8002cae:	b909      	cbnz	r1, 8002cb4 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
 8002cb0:	f10d 000b 	add.w	r0, sp, #11
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 8002cb4:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;

	va_start(vargs, format);
 8002cb6:	ab09      	add	r3, sp, #36	; 0x24
 8002cb8:	9a08      	ldr	r2, [sp, #32]
 8002cba:	9400      	str	r4, [sp, #0]
 8002cbc:	9303      	str	r3, [sp, #12]
	p.len = (int) len;
 8002cbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002cc2:	a904      	add	r1, sp, #16
 8002cc4:	4804      	ldr	r0, [pc, #16]	; (8002cd8 <snprintf+0x30>)
 8002cc6:	f7fe f8a1 	bl	8000e0c <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
 8002cca:	9b04      	ldr	r3, [sp, #16]
 8002ccc:	701c      	strb	r4, [r3, #0]
	return r;
}
 8002cce:	b006      	add	sp, #24
 8002cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cd4:	b002      	add	sp, #8
 8002cd6:	4770      	bx	lr
 8002cd8:	0801a739 	.word	0x0801a739

08002cdc <vsnprintf>:
	return r;
}

int vsnprintf(char *ZRESTRICT str, size_t len,
	      const char *ZRESTRICT format, va_list vargs)
{
 8002cdc:	b510      	push	{r4, lr}
 8002cde:	b086      	sub	sp, #24
	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
 8002ce0:	b909      	cbnz	r1, 8002ce6 <vsnprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change * *s */
 8002ce2:	f10d 000f 	add.w	r0, sp, #15
 8002ce6:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
 8002ce8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002cec:	9400      	str	r4, [sp, #0]
 8002cee:	a904      	add	r1, sp, #16
 8002cf0:	4803      	ldr	r0, [pc, #12]	; (8002d00 <vsnprintf+0x24>)
 8002cf2:	f7fe f88b 	bl	8000e0c <z_cbvprintf_impl>

	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);

	*(p.ptr) = 0;
 8002cf6:	9b04      	ldr	r3, [sp, #16]
 8002cf8:	701c      	strb	r4, [r3, #0]
	return r;
}
 8002cfa:	b006      	add	sp, #24
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	bf00      	nop
 8002d00:	0801a739 	.word	0x0801a739

08002d04 <stm32_exti_isr>:
 * Check EXTI lines in exti_range for pending interrupts
 *
 * @param exti_range Pointer to a exti_range structure
 */
static void stm32_exti_isr(const void *exti_range)
{
 8002d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d08:	4605      	mov	r5, r0
 8002d0a:	2400      	movs	r4, #0
		return LL_EXTI_IsActiveFlag_0_31(BIT((uint32_t)line));
 8002d0c:	f04f 0801 	mov.w	r8, #1
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1U : 0U);
 8002d10:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
		if (stm32_exti_is_pending(line) != 0) {
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8002d14:	4f0e      	ldr	r7, [pc, #56]	; (8002d50 <stm32_exti_isr+0x4c>)
		line = range->start + i;
 8002d16:	782b      	ldrb	r3, [r5, #0]
 8002d18:	fa53 f084 	uxtab	r0, r3, r4
	if (line < 32) {
 8002d1c:	281f      	cmp	r0, #31
 8002d1e:	dc0f      	bgt.n	8002d40 <stm32_exti_isr+0x3c>
		return LL_EXTI_IsActiveFlag_0_31(BIT((uint32_t)line));
 8002d20:	fa08 f300 	lsl.w	r3, r8, r0
 8002d24:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
		if (stm32_exti_is_pending(line) != 0) {
 8002d28:	ea33 0202 	bics.w	r2, r3, r2
 8002d2c:	d108      	bne.n	8002d40 <stm32_exti_isr+0x3c>
  *         @arg @ref LL_EXTI_LINE_21
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002d2e:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
			if (!data->cb[line].cb) {
 8002d32:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
 8002d36:	b11b      	cbz	r3, 8002d40 <stm32_exti_isr+0x3c>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8002d38:	eb07 02c0 	add.w	r2, r7, r0, lsl #3
 8002d3c:	6851      	ldr	r1, [r2, #4]
 8002d3e:	4798      	blx	r3
	for (uint8_t i = 0; i <= range->len; i++) {
 8002d40:	3401      	adds	r4, #1
 8002d42:	786a      	ldrb	r2, [r5, #1]
 8002d44:	b2e3      	uxtb	r3, r4
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d2e5      	bcs.n	8002d16 <stm32_exti_isr+0x12>
		}
	}
}
 8002d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d4e:	bf00      	nop
 8002d50:	24001010 	.word	0x24001010

08002d54 <stm32_fill_irq_table>:

static void stm32_fill_irq_table(int8_t start, int8_t len, int32_t irqn)
{
	for (int i = 0; i < len; i++) {
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <stm32_fill_irq_table+0x14>)
 8002d56:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	3301      	adds	r3, #1
		exti_irq_table[start + i] = irqn;
 8002d5e:	f820 2b02 	strh.w	r2, [r0], #2
	for (int i = 0; i < len; i++) {
 8002d62:	4299      	cmp	r1, r3
 8002d64:	dcfa      	bgt.n	8002d5c <stm32_fill_irq_table+0x8>
	}
}
 8002d66:	4770      	bx	lr
 8002d68:	24000130 	.word	0x24000130

08002d6c <stm32_exti_enable>:
	irqnum = exti_irq_table[line];
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <stm32_exti_enable+0x24>)
{
 8002d6e:	4602      	mov	r2, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d74:	b410      	push	{r4}
	irqnum = exti_irq_table[line];
 8002d76:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
	LL_EXTI_EnableIT_0_31(BIT((uint32_t)line));
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 8002d80:	4093      	lsls	r3, r2
 8002d82:	4323      	orrs	r3, r4
 8002d84:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002d88:	bc10      	pop	{r4}
	irq_enable(irqnum);
 8002d8a:	f7ff ba5b 	b.w	8002244 <arch_irq_enable>
 8002d8e:	bf00      	nop
 8002d90:	24000130 	.word	0x24000130

08002d94 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if ((data->cb[line].cb == cb) && (data->cb[line].data == arg)) {
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <stm32_exti_set_callback+0x2c>)
{
 8002d96:	b530      	push	{r4, r5, lr}
	if ((data->cb[line].cb == cb) && (data->cb[line].data == arg)) {
 8002d98:	f853 4030 	ldr.w	r4, [r3, r0, lsl #3]
 8002d9c:	428c      	cmp	r4, r1
 8002d9e:	d104      	bne.n	8002daa <stm32_exti_set_callback+0x16>
 8002da0:	eb03 05c0 	add.w	r5, r3, r0, lsl #3
 8002da4:	686d      	ldr	r5, [r5, #4]
 8002da6:	4295      	cmp	r5, r2
 8002da8:	d005      	beq.n	8002db6 <stm32_exti_set_callback+0x22>
		return 0;
	}

	/* if callback already exists/maybe-running return busy */
	if (data->cb[line].cb != NULL) {
 8002daa:	b934      	cbnz	r4, 8002dba <stm32_exti_set_callback+0x26>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8002dac:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 8002db0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002db4:	605a      	str	r2, [r3, #4]
		return 0;
 8002db6:	2000      	movs	r0, #0

	return 0;
}
 8002db8:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 8002dba:	f06f 000f 	mvn.w	r0, #15
 8002dbe:	e7fb      	b.n	8002db8 <stm32_exti_set_callback+0x24>
 8002dc0:	24001010 	.word	0x24001010

08002dc4 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <stm32_exti_unset_callback+0x10>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8002dcc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002dd0:	605a      	str	r2, [r3, #4]
}
 8002dd2:	4770      	bx	lr
 8002dd4:	24001010 	.word	0x24001010

08002dd8 <get_pllsrc_frequency>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <get_pllsrc_frequency+0x14>)
		return STM32_HSE_FREQ;
	case LL_RCC_PLLSOURCE_NONE:
	default:
		return 0;
	}
}
 8002dda:	4805      	ldr	r0, [pc, #20]	; (8002df0 <get_pllsrc_frequency+0x18>)
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	f003 0303 	and.w	r3, r3, #3
		return STM32_HSI_FREQ;
 8002de2:	2b02      	cmp	r3, #2
}
 8002de4:	bf18      	it	ne
 8002de6:	2000      	movne	r0, #0
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	58024400 	.word	0x58024400
 8002df0:	007a1200 	.word	0x007a1200

08002df4 <get_hclk_frequency>:

__unused
static uint32_t get_hclk_frequency(void)
{
 8002df4:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <get_hclk_frequency+0x2c>)
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
	uint32_t sysclk = 0;

	/* Get the current system clock source */
	switch (LL_RCC_GetSysClkSource()) {
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d009      	beq.n	8002e16 <get_hclk_frequency+0x22>
 8002e02:	2b18      	cmp	r3, #24
 8002e04:	d109      	bne.n	8002e1a <get_hclk_frequency+0x26>
	case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
		sysclk = STM32_HSE_FREQ;
		break;
#if defined(STM32_PLL_ENABLED)
	case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
		sysclk = get_pllout_frequency(get_pllsrc_frequency(),
 8002e06:	f7ff ffe7 	bl	8002dd8 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 8002e0a:	f240 1313 	movw	r3, #275	; 0x113
 8002e0e:	0880      	lsrs	r0, r0, #2
 8002e10:	4358      	muls	r0, r3
		break;
#endif /* STM32_PLL_ENABLED */
	}

	return get_bus_clock(sysclk, STM32_HPRE);
}
 8002e12:	0840      	lsrs	r0, r0, #1
 8002e14:	bd08      	pop	{r3, pc}
	switch (LL_RCC_GetSysClkSource()) {
 8002e16:	4803      	ldr	r0, [pc, #12]	; (8002e24 <get_hclk_frequency+0x30>)
 8002e18:	e7fb      	b.n	8002e12 <get_hclk_frequency+0x1e>
	uint32_t sysclk = 0;
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	e7f9      	b.n	8002e12 <get_hclk_frequency+0x1e>
 8002e1e:	bf00      	nop
 8002e20:	58024400 	.word	0x58024400
 8002e24:	007a1200 	.word	0x007a1200

08002e28 <stm32_clock_control_configure>:
}

static inline int stm32_clock_control_configure(const struct device *dev,
						clock_control_subsys_t sub_system,
						void *data)
{
 8002e28:	b510      	push	{r4, lr}
	int err;

	ARG_UNUSED(dev);
	ARG_UNUSED(data);

	err = enabled_clock(pclken->bus);
 8002e2a:	680a      	ldr	r2, [r1, #0]
 8002e2c:	2a10      	cmp	r2, #16
 8002e2e:	d823      	bhi.n	8002e78 <stm32_clock_control_configure+0x50>
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <stm32_clock_control_configure+0x58>)
 8002e32:	40d3      	lsrs	r3, r2
 8002e34:	07db      	lsls	r3, r3, #31
 8002e36:	d51f      	bpl.n	8002e78 <stm32_clock_control_configure+0x50>
		return err;
	}

	z_stm32_hsem_lock(CFG_HW_RCC_SEMID, HSEM_LOCK_DEFAULT_RETRY);

	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002e38:	684a      	ldr	r2, [r1, #4]
 8002e3a:	b2d3      	uxtb	r3, r2
		       STM32_CLOCK_MASK_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 8002e3c:	f3c2 3442 	ubfx	r4, r2, #13, #3
 8002e40:	f3c2 2204 	ubfx	r2, r2, #8, #5
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002e44:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8002e48:	fa04 f202 	lsl.w	r2, r4, r2
 8002e4c:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	*(volatile uint32_t *)addr = temp | mask;
}

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;
 8002e50:	6818      	ldr	r0, [r3, #0]

	*(volatile uint32_t *)addr = temp & ~mask;
 8002e52:	ea20 0202 	bic.w	r2, r0, r2
 8002e56:	601a      	str	r2, [r3, #0]
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002e58:	6849      	ldr	r1, [r1, #4]
 8002e5a:	b2cb      	uxtb	r3, r1
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 8002e5c:	f3c1 4202 	ubfx	r2, r1, #16, #3
 8002e60:	f3c1 2104 	ubfx	r1, r1, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8002e64:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8002e68:	408a      	lsls	r2, r1
 8002e6a:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 8002e6e:	6818      	ldr	r0, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 8002e70:	4302      	orrs	r2, r0

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

	return 0;
 8002e72:	2000      	movs	r0, #0
 8002e74:	601a      	str	r2, [r3, #0]
}
 8002e76:	bd10      	pop	{r4, pc}
	err = enabled_clock(pclken->bus);
 8002e78:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002e7c:	e7fb      	b.n	8002e76 <stm32_clock_control_configure+0x4e>
 8002e7e:	bf00      	nop
 8002e80:	00013c0e 	.word	0x00013c0e

08002e84 <stm32_clock_control_get_subsys_rate>:

static int stm32_clock_control_get_subsys_rate(const struct device *clock,
					       clock_control_subsys_t sub_system,
					       uint32_t *rate)
{
 8002e84:	b508      	push	{r3, lr}
	 * more likely to contain actual clock speed
	 */
#if defined(CONFIG_CPU_CORTEX_M4)
	uint32_t ahb_clock = SystemCoreClock;
#else
	uint32_t ahb_clock = get_bus_clock(SystemCoreClock, STM32_HPRE);
 8002e86:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <stm32_clock_control_get_subsys_rate+0xcc>)
 8002e88:	6818      	ldr	r0, [r3, #0]
	uint32_t apb3_clock = get_bus_clock(ahb_clock, STM32_D1PPRE);
	uint32_t apb4_clock = get_bus_clock(ahb_clock, STM32_D3PPRE);

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8002e8a:	680b      	ldr	r3, [r1, #0]
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d82d      	bhi.n	8002eec <stm32_clock_control_get_subsys_rate+0x68>
 8002e90:	b913      	cbnz	r3, 8002e98 <stm32_clock_control_get_subsys_rate+0x14>
 8002e92:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002e96:	e028      	b.n	8002eea <stm32_clock_control_get_subsys_rate+0x66>
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	d8f9      	bhi.n	8002e92 <stm32_clock_control_get_subsys_rate+0xe>
 8002e9e:	a101      	add	r1, pc, #4	; (adr r1, 8002ea4 <stm32_clock_control_get_subsys_rate+0x20>)
 8002ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ea4:	08002f25 	.word	0x08002f25
 8002ea8:	08002f33 	.word	0x08002f33
 8002eac:	08002f43 	.word	0x08002f43
 8002eb0:	08002e93 	.word	0x08002e93
 8002eb4:	08002e93 	.word	0x08002e93
 8002eb8:	08002e93 	.word	0x08002e93
 8002ebc:	08002e93 	.word	0x08002e93
 8002ec0:	08002e93 	.word	0x08002e93
 8002ec4:	08002e93 	.word	0x08002e93
 8002ec8:	08002ee5 	.word	0x08002ee5
 8002ecc:	08002f0f 	.word	0x08002f0f
 8002ed0:	08002f1b 	.word	0x08002f1b
 8002ed4:	08002f21 	.word	0x08002f21
 8002ed8:	08002e93 	.word	0x08002e93
 8002edc:	08002e93 	.word	0x08002e93
 8002ee0:	08002f15 	.word	0x08002f15
 8002ee4:	481b      	ldr	r0, [pc, #108]	; (8002f54 <stm32_clock_control_get_subsys_rate+0xd0>)
	case STM32_CLOCK_BUS_AHB1:
	case STM32_CLOCK_BUS_AHB2:
	case STM32_CLOCK_BUS_AHB3:
	case STM32_CLOCK_BUS_AHB4:
		*rate = ahb_clock;
 8002ee6:	6010      	str	r0, [r2, #0]
#endif /* STM32_PLL3_ENABLED */
	default:
		return -ENOTSUP;
	}

	return 0;
 8002ee8:	2000      	movs	r0, #0
}
 8002eea:	bd08      	pop	{r3, pc}
	switch (pclken->bus) {
 8002eec:	2bd4      	cmp	r3, #212	; 0xd4
 8002eee:	d00c      	beq.n	8002f0a <stm32_clock_control_get_subsys_rate+0x86>
 8002ef0:	3bd8      	subs	r3, #216	; 0xd8
 8002ef2:	2b1c      	cmp	r3, #28
 8002ef4:	d8cd      	bhi.n	8002e92 <stm32_clock_control_get_subsys_rate+0xe>
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8002efc:	4916      	ldr	r1, [pc, #88]	; (8002f58 <stm32_clock_control_get_subsys_rate+0xd4>)
 8002efe:	420b      	tst	r3, r1
 8002f00:	d11d      	bne.n	8002f3e <stm32_clock_control_get_subsys_rate+0xba>
 8002f02:	f240 1111 	movw	r1, #273	; 0x111
 8002f06:	420b      	tst	r3, r1
 8002f08:	d0c3      	beq.n	8002e92 <stm32_clock_control_get_subsys_rate+0xe>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 8002f0a:	0840      	lsrs	r0, r0, #1
		break;
 8002f0c:	e7eb      	b.n	8002ee6 <stm32_clock_control_get_subsys_rate+0x62>
	switch (pclken->bus) {
 8002f0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f12:	e7e8      	b.n	8002ee6 <stm32_clock_control_get_subsys_rate+0x62>
		*rate = get_hclk_frequency();
 8002f14:	f7ff ff6e 	bl	8002df4 <get_hclk_frequency>
		break;
 8002f18:	e7e5      	b.n	8002ee6 <stm32_clock_control_get_subsys_rate+0x62>
		break;
 8002f1a:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8002f1e:	e7e2      	b.n	8002ee6 <stm32_clock_control_get_subsys_rate+0x62>
		break;
 8002f20:	480e      	ldr	r0, [pc, #56]	; (8002f5c <stm32_clock_control_get_subsys_rate+0xd8>)
 8002f22:	e7e0      	b.n	8002ee6 <stm32_clock_control_get_subsys_rate+0x62>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 8002f24:	f7ff ff58 	bl	8002dd8 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 8002f28:	f240 1313 	movw	r3, #275	; 0x113
 8002f2c:	0880      	lsrs	r0, r0, #2
 8002f2e:	4358      	muls	r0, r3
		break;
 8002f30:	e7d9      	b.n	8002ee6 <stm32_clock_control_get_subsys_rate+0x62>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 8002f32:	f7ff ff51 	bl	8002dd8 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 8002f36:	f240 1313 	movw	r3, #275	; 0x113
 8002f3a:	0880      	lsrs	r0, r0, #2
 8002f3c:	4358      	muls	r0, r3
 8002f3e:	0880      	lsrs	r0, r0, #2
		break;
 8002f40:	e7d1      	b.n	8002ee6 <stm32_clock_control_get_subsys_rate+0x62>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 8002f42:	f7ff ff49 	bl	8002dd8 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 8002f46:	f240 1313 	movw	r3, #275	; 0x113
 8002f4a:	0880      	lsrs	r0, r0, #2
 8002f4c:	4358      	muls	r0, r3
 8002f4e:	e7dc      	b.n	8002f0a <stm32_clock_control_get_subsys_rate+0x86>
 8002f50:	2400009c 	.word	0x2400009c
 8002f54:	007a1200 	.word	0x007a1200
 8002f58:	11111000 	.word	0x11111000
 8002f5c:	02dc6c00 	.word	0x02dc6c00

08002f60 <stm32_clock_control_init>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8002f60:	4b7d      	ldr	r3, [pc, #500]	; (8003158 <stm32_clock_control_init+0x1f8>)
	return 0;
}

#if defined(CONFIG_CPU_CORTEX_M7)
int stm32_clock_control_init(const struct device *dev)
{
 8002f62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002f68:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002f6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8002f70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002f74:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002f78:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002f7a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002f82:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f8a:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	0394      	lsls	r4, r2, #14
 8002f90:	d5fc      	bpl.n	8002f8c <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f92:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	675a      	str	r2, [r3, #116]	; 0x74
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002f9a:	4b6f      	ldr	r3, [pc, #444]	; (8003158 <stm32_clock_control_init+0x1f8>)
 8002f9c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002f9e:	0790      	lsls	r0, r2, #30
 8002fa0:	d5fc      	bpl.n	8002f9c <stm32_clock_control_init+0x3c>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa2:	496e      	ldr	r1, [pc, #440]	; (800315c <stm32_clock_control_init+0x1fc>)
 8002fa4:	680a      	ldr	r2, [r1, #0]
 8002fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002faa:	600a      	str	r2, [r1, #0]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002fac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fae:	f022 0218 	bic.w	r2, r2, #24
 8002fb2:	671a      	str	r2, [r3, #112]	; 0x70
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002fb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	671a      	str	r2, [r3, #112]	; 0x70
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002fbc:	4b66      	ldr	r3, [pc, #408]	; (8003158 <stm32_clock_control_init+0x1f8>)
 8002fbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fc0:	0791      	lsls	r1, r2, #30
 8002fc2:	d5fc      	bpl.n	8002fbe <stm32_clock_control_init+0x5e>
  SET_BIT(RCC->CR, RCC_CR_HSI48ON);
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fca:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == (RCC_CR_HSI48RDY)) ? 1UL : 0UL);
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	0492      	lsls	r2, r2, #18
 8002fd0:	d5fc      	bpl.n	8002fcc <stm32_clock_control_init+0x6c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	f002 0238 	and.w	r2, r2, #56	; 0x38
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL1) {
 8002fd8:	2a18      	cmp	r2, #24
 8002fda:	d117      	bne.n	800300c <stm32_clock_control_init+0xac>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	0755      	lsls	r5, r2, #29
 8002fe0:	d407      	bmi.n	8002ff2 <stm32_clock_control_init+0x92>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	f042 0201 	orr.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002fea:	4a5b      	ldr	r2, [pc, #364]	; (8003158 <stm32_clock_control_init+0x1f8>)
 8002fec:	6813      	ldr	r3, [r2, #0]
 8002fee:	075c      	lsls	r4, r3, #29
 8002ff0:	d5fc      	bpl.n	8002fec <stm32_clock_control_init+0x8c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ff2:	4b59      	ldr	r3, [pc, #356]	; (8003158 <stm32_clock_control_init+0x1f8>)
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	f022 0207 	bic.w	r2, r2, #7
 8002ffa:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002ffc:	691a      	ldr	r2, [r3, #16]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8002ffe:	f012 0f38 	tst.w	r2, #56	; 0x38
 8003002:	d1fb      	bne.n	8002ffc <stm32_clock_control_init+0x9c>
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	f022 020f 	bic.w	r2, r2, #15
 800300a:	619a      	str	r2, [r3, #24]
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 800300c:	4b52      	ldr	r3, [pc, #328]	; (8003158 <stm32_clock_control_init+0x1f8>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003014:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 8003016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003018:	f022 0203 	bic.w	r2, r2, #3
 800301c:	f042 0202 	orr.w	r2, r2, #2
 8003020:	629a      	str	r2, [r3, #40]	; 0x28
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 8003022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003024:	f422 727c 	bic.w	r2, r2, #1008	; 0x3f0
 8003028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800302c:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 800302e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003030:	f022 020c 	bic.w	r2, r2, #12
 8003034:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 8003036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003038:	f042 0202 	orr.w	r2, r2, #2
 800303c:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N - 1UL) << RCC_PLL1DIVR_N1_Pos);
 800303e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003040:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	f442 7289 	orr.w	r2, r2, #274	; 0x112
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c
  *
  * (*) : For stm32h72xxx and stm32h73xxx family lines.
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P - 1UL) << RCC_PLL1DIVR_P1_Pos);
 8003056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003058:	f422 427e 	bic.w	r2, r2, #65024	; 0xfe00
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 800305e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003060:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003064:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q - 1UL) << RCC_PLL1DIVR_Q1_Pos);
 8003066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003068:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800306c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN);
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003074:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003078:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R - 1UL) << RCC_PLL1DIVR_R1_Pos);
 800307a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307c:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8003080:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN);
 8003086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003088:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800308c:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003094:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY)) ? 1UL : 0UL);
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	0190      	lsls	r0, r2, #6
 800309a:	d5fc      	bpl.n	8003096 <stm32_clock_control_init+0x136>
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 800309c:	4b2f      	ldr	r3, [pc, #188]	; (800315c <stm32_clock_control_init+0x1fc>)
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	f022 0207 	bic.w	r2, r2, #7
 80030a4:	f042 0202 	orr.w	r2, r2, #2
 80030a8:	60da      	str	r2, [r3, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 80030aa:	699a      	ldr	r2, [r3, #24]
 80030ac:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80030b0:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 80030b2:	699a      	ldr	r2, [r3, #24]
 80030b4:	0491      	lsls	r1, r2, #18
 80030b6:	d5fc      	bpl.n	80030b2 <stm32_clock_control_init+0x152>
				      STM32_HPRE);

	/* Set flash latency */
	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq increases, set flash latency before any clock setting */
	if (new_hclk_freq > old_hclk_freq) {
 80030b8:	4d29      	ldr	r5, [pc, #164]	; (8003160 <stm32_clock_control_init+0x200>)
	old_hclk_freq = get_hclk_frequency();
 80030ba:	f7ff fe9b 	bl	8002df4 <get_hclk_frequency>
 80030be:	4604      	mov	r4, r0
	if (new_hclk_freq > old_hclk_freq) {
 80030c0:	42a8      	cmp	r0, r5
 80030c2:	d802      	bhi.n	80030ca <stm32_clock_control_init+0x16a>
		LL_SetFlashLatency(new_hclk_freq);
 80030c4:	4827      	ldr	r0, [pc, #156]	; (8003164 <stm32_clock_control_init+0x204>)
 80030c6:	f001 f9a9 	bl	800441c <LL_SetFlashLatency>
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 80030ca:	4b23      	ldr	r3, [pc, #140]	; (8003158 <stm32_clock_control_init+0x1f8>)
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80030d2:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	f022 020f 	bic.w	r2, r2, #15
 80030da:	f042 0208 	orr.w	r2, r2, #8
 80030de:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ea:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030f6:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003102:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 8003104:	6a1a      	ldr	r2, [r3, #32]
 8003106:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800310a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800310e:	621a      	str	r2, [r3, #32]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	f022 0207 	bic.w	r2, r2, #7
 8003116:	f042 0203 	orr.w	r2, r2, #3
 800311a:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	f002 0238 	and.w	r2, r2, #56	; 0x38

	/* Set up sys clock */
	if (IS_ENABLED(STM32_SYSCLK_SRC_PLL)) {
		/* Set PLL1 as System Clock Source */
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
		while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1) {
 8003122:	2a18      	cmp	r2, #24
 8003124:	d1fa      	bne.n	800311c <stm32_clock_control_init+0x1bc>
	}

	/* Set FLASH latency */
	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq not increased, set flash latency after all clock setting */
	if (new_hclk_freq <= old_hclk_freq) {
 8003126:	42ac      	cmp	r4, r5
 8003128:	d902      	bls.n	8003130 <stm32_clock_control_init+0x1d0>
		LL_SetFlashLatency(new_hclk_freq);
 800312a:	480e      	ldr	r0, [pc, #56]	; (8003164 <stm32_clock_control_init+0x204>)
 800312c:	f001 f976 	bl	800441c <LL_SetFlashLatency>
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8003130:	4b0a      	ldr	r3, [pc, #40]	; (800315c <stm32_clock_control_init+0x1fc>)
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	f022 0207 	bic.w	r2, r2, #7
 8003138:	f042 0202 	orr.w	r2, r2, #2
 800313c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 800313e:	699a      	ldr	r2, [r3, #24]
 8003140:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003144:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 8003146:	699a      	ldr	r2, [r3, #24]
 8003148:	0492      	lsls	r2, r2, #18
 800314a:	d5fc      	bpl.n	8003146 <stm32_clock_control_init+0x1e6>
	optimize_regulator_voltage_scale(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

	/* Update CMSIS variable */
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <stm32_clock_control_init+0x208>)

	return r;
}
 800314e:	2000      	movs	r0, #0
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8003150:	4a06      	ldr	r2, [pc, #24]	; (800316c <stm32_clock_control_init+0x20c>)
 8003152:	601a      	str	r2, [r3, #0]
}
 8003154:	b003      	add	sp, #12
 8003156:	bd30      	pop	{r4, r5, pc}
 8003158:	58024400 	.word	0x58024400
 800315c:	58024800 	.word	0x58024800
 8003160:	10642abf 	.word	0x10642abf
 8003164:	10642ac0 	.word	0x10642ac0
 8003168:	2400009c 	.word	0x2400009c
 800316c:	20c85580 	.word	0x20c85580

08003170 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
 8003170:	b508      	push	{r3, lr}
 8003172:	4807      	ldr	r0, [pc, #28]	; (8003190 <uart_console_init+0x20>)
 8003174:	f024 ff12 	bl	8027f9c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 8003178:	b138      	cbz	r0, 800318a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 800317a:	4806      	ldr	r0, [pc, #24]	; (8003194 <uart_console_init+0x24>)
 800317c:	f7ff fd8e 	bl	8002c9c <__stdout_hook_install>
	__printk_hook_install(console_out);
 8003180:	4804      	ldr	r0, [pc, #16]	; (8003194 <uart_console_init+0x24>)
 8003182:	f7fd fe27 	bl	8000dd4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 8003186:	2000      	movs	r0, #0
}
 8003188:	bd08      	pop	{r3, pc}
		return -ENODEV;
 800318a:	f06f 0012 	mvn.w	r0, #18
 800318e:	e7fb      	b.n	8003188 <uart_console_init+0x18>
 8003190:	08028434 	.word	0x08028434
 8003194:	08003199 	.word	0x08003199

08003198 <console_out>:
	if ('\n' == c) {
 8003198:	280a      	cmp	r0, #10
{
 800319a:	b538      	push	{r3, r4, r5, lr}
 800319c:	4604      	mov	r4, r0
 800319e:	4d07      	ldr	r5, [pc, #28]	; (80031bc <console_out+0x24>)
	if ('\n' == c) {
 80031a0:	d104      	bne.n	80031ac <console_out+0x14>
 80031a2:	68ab      	ldr	r3, [r5, #8]
 80031a4:	210d      	movs	r1, #13
 80031a6:	4628      	mov	r0, r5
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4798      	blx	r3
 80031ac:	68ab      	ldr	r3, [r5, #8]
 80031ae:	b2e1      	uxtb	r1, r4
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <console_out+0x24>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4798      	blx	r3
}
 80031b6:	4620      	mov	r0, r4
 80031b8:	bd38      	pop	{r3, r4, r5, pc}
 80031ba:	bf00      	nop
 80031bc:	08028434 	.word	0x08028434

080031c0 <ili9xxx_set_pixel_format.part.0>:
	LOG_ERR("Set contrast not supported");
	return -ENOTSUP;
}

static int
ili9xxx_set_pixel_format(const struct device *dev,
 80031c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		tx_data = ILI9XXX_PIXSET_MCU_16_BIT | ILI9XXX_PIXSET_RGB_16_BIT;
	} else if (pixel_format == PIXEL_FORMAT_RGB_888) {
		bytes_per_pixel = 3U;
		tx_data = ILI9XXX_PIXSET_MCU_18_BIT | ILI9XXX_PIXSET_RGB_18_BIT;
	} else {
		LOG_ERR("Unsupported pixel format");
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <ili9xxx_set_pixel_format.part.0+0x20>)
 80031c4:	aa04      	add	r2, sp, #16
 80031c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80031ca:	4806      	ldr	r0, [pc, #24]	; (80031e4 <ili9xxx_set_pixel_format.part.0+0x24>)
 80031cc:	9305      	str	r3, [sp, #20]
 80031ce:	2302      	movs	r3, #2
 80031d0:	9304      	str	r3, [sp, #16]
 80031d2:	f017 fbb0 	bl	801a936 <z_log_msg_static_create.constprop.0>

	data->pixel_format = pixel_format;
	data->bytes_per_pixel = bytes_per_pixel;

	return 0;
}
 80031d6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80031da:	b007      	add	sp, #28
 80031dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80031e0:	0802a524 	.word	0x0802a524
 80031e4:	080289b4 	.word	0x080289b4

080031e8 <ili9xxx_read>:
{
 80031e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Reading not supported");
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <ili9xxx_read+0x20>)
 80031ec:	aa04      	add	r2, sp, #16
 80031ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80031f2:	4806      	ldr	r0, [pc, #24]	; (800320c <ili9xxx_read+0x24>)
 80031f4:	9305      	str	r3, [sp, #20]
 80031f6:	2302      	movs	r3, #2
 80031f8:	9304      	str	r3, [sp, #16]
 80031fa:	f017 fb9c 	bl	801a936 <z_log_msg_static_create.constprop.0>
}
 80031fe:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003202:	b007      	add	sp, #28
 8003204:	f85d fb04 	ldr.w	pc, [sp], #4
 8003208:	0802a53d 	.word	0x0802a53d
 800320c:	080289b4 	.word	0x080289b4

08003210 <ili9xxx_get_framebuffer>:
{
 8003210:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Direct framebuffer access not supported");
 8003212:	4b07      	ldr	r3, [pc, #28]	; (8003230 <ili9xxx_get_framebuffer+0x20>)
 8003214:	aa04      	add	r2, sp, #16
 8003216:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800321a:	4806      	ldr	r0, [pc, #24]	; (8003234 <ili9xxx_get_framebuffer+0x24>)
 800321c:	9305      	str	r3, [sp, #20]
 800321e:	2302      	movs	r3, #2
 8003220:	9304      	str	r3, [sp, #16]
 8003222:	f017 fb88 	bl	801a936 <z_log_msg_static_create.constprop.0>
}
 8003226:	2000      	movs	r0, #0
 8003228:	b007      	add	sp, #28
 800322a:	f85d fb04 	ldr.w	pc, [sp], #4
 800322e:	bf00      	nop
 8003230:	0802a553 	.word	0x0802a553
 8003234:	080289b4 	.word	0x080289b4

08003238 <ili9xxx_set_brightness>:
{
 8003238:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Set brightness not implemented");
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <ili9xxx_set_brightness+0x20>)
 800323c:	aa04      	add	r2, sp, #16
 800323e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003242:	4806      	ldr	r0, [pc, #24]	; (800325c <ili9xxx_set_brightness+0x24>)
 8003244:	9305      	str	r3, [sp, #20]
 8003246:	2302      	movs	r3, #2
 8003248:	9304      	str	r3, [sp, #16]
 800324a:	f017 fb74 	bl	801a936 <z_log_msg_static_create.constprop.0>
}
 800324e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003252:	b007      	add	sp, #28
 8003254:	f85d fb04 	ldr.w	pc, [sp], #4
 8003258:	0802a57b 	.word	0x0802a57b
 800325c:	080289b4 	.word	0x080289b4

08003260 <ili9xxx_set_contrast>:
{
 8003260:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Set contrast not supported");
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <ili9xxx_set_contrast+0x20>)
 8003264:	aa04      	add	r2, sp, #16
 8003266:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800326a:	4806      	ldr	r0, [pc, #24]	; (8003284 <ili9xxx_set_contrast+0x24>)
 800326c:	9305      	str	r3, [sp, #20]
 800326e:	2302      	movs	r3, #2
 8003270:	9304      	str	r3, [sp, #16]
 8003272:	f017 fb60 	bl	801a936 <z_log_msg_static_create.constprop.0>
}
 8003276:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800327a:	b007      	add	sp, #28
 800327c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003280:	0802a59a 	.word	0x0802a59a
 8003284:	080289b4 	.word	0x080289b4

08003288 <ili9xxx_init>:

	return 0;
}

static int ili9xxx_init(const struct device *dev)
{
 8003288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328a:	b087      	sub	sp, #28
 800328c:	4605      	mov	r5, r0
	const struct ili9xxx_config *config = dev->config;
 800328e:	6846      	ldr	r6, [r0, #4]
{
 8003290:	af00      	add	r7, sp, #0
 * @retval false if the SPI bus (or the CS gpio defined) is not ready for use.
 */
static inline bool spi_is_ready_dt(const struct spi_dt_spec *spec)
{
	/* Validate bus is ready */
	if (!device_is_ready(spec->bus)) {
 8003292:	6870      	ldr	r0, [r6, #4]
 8003294:	f024 fe82 	bl	8027f9c <z_device_is_ready>
 8003298:	b980      	cbnz	r0, 80032bc <ili9xxx_init+0x34>

	int r;

	if (!spi_is_ready_dt(&config->spi)) {
		LOG_ERR("SPI device is not ready");
 800329a:	4b5b      	ldr	r3, [pc, #364]	; (8003408 <ili9xxx_init+0x180>)
		return -ENODEV;
	}

	if (!device_is_ready(config->cmd_data.port)) {
		LOG_ERR("Command/Data GPIO device not ready");
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	2302      	movs	r3, #2
		return -ENODEV;
 80032a0:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Command/Data GPIO device not ready");
 80032a4:	f107 0210 	add.w	r2, r7, #16
 80032a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80032ac:	4857      	ldr	r0, [pc, #348]	; (800340c <ili9xxx_init+0x184>)
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	f017 fb41 	bl	801a936 <z_log_msg_static_create.constprop.0>
		LOG_ERR("Could not exit sleep mode (%d)", r);
		return r;
	}

	return 0;
}
 80032b4:	4620      	mov	r0, r4
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return config->cs.gpio.port != NULL;
 80032bc:	6930      	ldr	r0, [r6, #16]
		return false;
	}
	/* Validate CS gpio port is ready, if it is used */
	if (spi_cs_is_gpio_dt(spec) &&
 80032be:	b118      	cbz	r0, 80032c8 <ili9xxx_init+0x40>
 80032c0:	f024 fe6c 	bl	8027f9c <z_device_is_ready>
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d0e8      	beq.n	800329a <ili9xxx_init+0x12>
	if (!device_is_ready(config->cmd_data.port)) {
 80032c8:	69f0      	ldr	r0, [r6, #28]
 80032ca:	f024 fe67 	bl	8027f9c <z_device_is_ready>
 80032ce:	b908      	cbnz	r0, 80032d4 <ili9xxx_init+0x4c>
		LOG_ERR("Command/Data GPIO device not ready");
 80032d0:	4b4f      	ldr	r3, [pc, #316]	; (8003410 <ili9xxx_init+0x188>)
 80032d2:	e7e3      	b.n	800329c <ili9xxx_init+0x14>
	r = gpio_pin_configure_dt(&config->cmd_data, GPIO_OUTPUT);
 80032d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80032d8:	f106 001c 	add.w	r0, r6, #28
 80032dc:	f017 faef 	bl	801a8be <gpio_pin_configure_dt>
	if (r < 0) {
 80032e0:	1e04      	subs	r4, r0, #0
 80032e2:	da0f      	bge.n	8003304 <ili9xxx_init+0x7c>
		LOG_ERR("Could not configure command/data GPIO (%d)", r);
 80032e4:	466d      	mov	r5, sp
 80032e6:	b088      	sub	sp, #32
 80032e8:	466a      	mov	r2, sp
 80032ea:	4b4a      	ldr	r3, [pc, #296]	; (8003414 <ili9xxx_init+0x18c>)
		LOG_ERR("Could not exit sleep mode (%d)", r);
 80032ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80032f0:	4846      	ldr	r0, [pc, #280]	; (800340c <ili9xxx_init+0x184>)
 80032f2:	e9c2 3405 	strd	r3, r4, [r2, #20]
 80032f6:	2303      	movs	r3, #3
 80032f8:	f842 3f10 	str.w	r3, [r2, #16]!
 80032fc:	f017 fb1b 	bl	801a936 <z_log_msg_static_create.constprop.0>
 8003300:	46ad      	mov	sp, r5
		return r;
 8003302:	e7d7      	b.n	80032b4 <ili9xxx_init+0x2c>
	if (config->reset.port != NULL) {
 8003304:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003306:	b188      	cbz	r0, 800332c <ili9xxx_init+0xa4>
 8003308:	f024 fe48 	bl	8027f9c <z_device_is_ready>
		if (!device_is_ready(config->reset.port)) {
 800330c:	b908      	cbnz	r0, 8003312 <ili9xxx_init+0x8a>
			LOG_ERR("Reset GPIO device not ready");
 800330e:	4b42      	ldr	r3, [pc, #264]	; (8003418 <ili9xxx_init+0x190>)
 8003310:	e7c4      	b.n	800329c <ili9xxx_init+0x14>
		r = gpio_pin_configure_dt(&config->reset, GPIO_OUTPUT_INACTIVE);
 8003312:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8003316:	f106 0024 	add.w	r0, r6, #36	; 0x24
 800331a:	f017 fad0 	bl	801a8be <gpio_pin_configure_dt>
		if (r < 0) {
 800331e:	1e04      	subs	r4, r0, #0
 8003320:	da04      	bge.n	800332c <ili9xxx_init+0xa4>
			LOG_ERR("Could not configure reset GPIO (%d)", r);
 8003322:	466d      	mov	r5, sp
 8003324:	b088      	sub	sp, #32
 8003326:	466a      	mov	r2, sp
 8003328:	4b3c      	ldr	r3, [pc, #240]	; (800341c <ili9xxx_init+0x194>)
 800332a:	e7df      	b.n	80032ec <ili9xxx_init+0x64>
	ili9xxx_hw_reset(dev);
 800332c:	686c      	ldr	r4, [r5, #4]
	if (config->reset.port == NULL) {
 800332e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003330:	b183      	cbz	r3, 8003354 <ili9xxx_init+0xcc>
	gpio_pin_set_dt(&config->reset, 1);
 8003332:	3424      	adds	r4, #36	; 0x24
 8003334:	2101      	movs	r1, #1
 8003336:	4620      	mov	r0, r4
 8003338:	f017 fb0b 	bl	801a952 <gpio_pin_set_dt.isra.0>
	return z_impl_k_sleep(timeout);
 800333c:	2100      	movs	r1, #0
 800333e:	200a      	movs	r0, #10
 8003340:	f016 f9fc 	bl	801973c <z_impl_k_sleep>
	gpio_pin_set_dt(&config->reset, 0);
 8003344:	2100      	movs	r1, #0
 8003346:	4620      	mov	r0, r4
 8003348:	f017 fb03 	bl	801a952 <gpio_pin_set_dt.isra.0>
 800334c:	2032      	movs	r0, #50	; 0x32
 800334e:	2100      	movs	r1, #0
 8003350:	f016 f9f4 	bl	801973c <z_impl_k_sleep>
	r = ili9xxx_transmit(dev, ILI9XXX_SWRESET, NULL, 0);
 8003354:	2300      	movs	r3, #0
 8003356:	2101      	movs	r1, #1
 8003358:	4628      	mov	r0, r5
 800335a:	461a      	mov	r2, r3
 800335c:	f017 fb0d 	bl	801a97a <ili9xxx_transmit>
	if (r < 0) {
 8003360:	1e04      	subs	r4, r0, #0
 8003362:	da04      	bge.n	800336e <ili9xxx_init+0xe6>
		LOG_ERR("Error transmit command Software Reset (%d)", r);
 8003364:	466d      	mov	r5, sp
 8003366:	b088      	sub	sp, #32
 8003368:	466a      	mov	r2, sp
 800336a:	4b2d      	ldr	r3, [pc, #180]	; (8003420 <ili9xxx_init+0x198>)
 800336c:	e7be      	b.n	80032ec <ili9xxx_init+0x64>
 800336e:	2100      	movs	r1, #0
 8003370:	2032      	movs	r0, #50	; 0x32
 8003372:	f016 f9e3 	bl	801973c <z_impl_k_sleep>
	ili9xxx_display_blanking_on(dev);
 8003376:	4628      	mov	r0, r5
 8003378:	f017 fbf2 	bl	801ab60 <ili9xxx_display_blanking_on>
	const struct ili9xxx_config *config = dev->config;
 800337c:	686e      	ldr	r6, [r5, #4]
	r = ili9xxx_set_pixel_format(dev, pixel_format);
 800337e:	4628      	mov	r0, r5
	if (config->pixel_format == ILI9XXX_PIXEL_FORMAT_RGB565) {
 8003380:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
		pixel_format = PIXEL_FORMAT_RGB_565;
 8003384:	2b00      	cmp	r3, #0
	r = ili9xxx_set_pixel_format(dev, pixel_format);
 8003386:	bf14      	ite	ne
 8003388:	2101      	movne	r1, #1
 800338a:	2110      	moveq	r1, #16
 800338c:	f017 fb54 	bl	801aa38 <ili9xxx_set_pixel_format>
	if (r < 0) {
 8003390:	1e04      	subs	r4, r0, #0
 8003392:	db14      	blt.n	80033be <ili9xxx_init+0x136>
	if (config->rotation == 0U) {
 8003394:	8df1      	ldrh	r1, [r6, #46]	; 0x2e
 8003396:	b129      	cbz	r1, 80033a4 <ili9xxx_init+0x11c>
	} else if (config->rotation == 90U) {
 8003398:	295a      	cmp	r1, #90	; 0x5a
 800339a:	d015      	beq.n	80033c8 <ili9xxx_init+0x140>
		orientation = DISPLAY_ORIENTATION_ROTATED_180;
 800339c:	29b4      	cmp	r1, #180	; 0xb4
 800339e:	bf14      	ite	ne
 80033a0:	2103      	movne	r1, #3
 80033a2:	2102      	moveq	r1, #2
	r = ili9xxx_set_orientation(dev, orientation);
 80033a4:	4628      	mov	r0, r5
 80033a6:	f017 fb14 	bl	801a9d2 <ili9xxx_set_orientation>
	if (r < 0) {
 80033aa:	1e04      	subs	r4, r0, #0
 80033ac:	db07      	blt.n	80033be <ili9xxx_init+0x136>
	if (config->inversion) {
 80033ae:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80033b2:	b95b      	cbnz	r3, 80033cc <ili9xxx_init+0x144>
	r = config->regs_init_fn(dev);
 80033b4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80033b6:	4628      	mov	r0, r5
 80033b8:	4798      	blx	r3
	if (r < 0) {
 80033ba:	1e04      	subs	r4, r0, #0
 80033bc:	da0f      	bge.n	80033de <ili9xxx_init+0x156>
		LOG_ERR("Could not configure display (%d)", r);
 80033be:	466d      	mov	r5, sp
 80033c0:	b088      	sub	sp, #32
 80033c2:	466a      	mov	r2, sp
 80033c4:	4b17      	ldr	r3, [pc, #92]	; (8003424 <ili9xxx_init+0x19c>)
 80033c6:	e791      	b.n	80032ec <ili9xxx_init+0x64>
		orientation = DISPLAY_ORIENTATION_ROTATED_90;
 80033c8:	2101      	movs	r1, #1
 80033ca:	e7eb      	b.n	80033a4 <ili9xxx_init+0x11c>
		r = ili9xxx_transmit(dev, ILI9XXX_DINVON, NULL, 0U);
 80033cc:	2300      	movs	r3, #0
 80033ce:	2121      	movs	r1, #33	; 0x21
 80033d0:	4628      	mov	r0, r5
 80033d2:	461a      	mov	r2, r3
 80033d4:	f017 fad1 	bl	801a97a <ili9xxx_transmit>
		if (r < 0) {
 80033d8:	1e04      	subs	r4, r0, #0
 80033da:	daeb      	bge.n	80033b4 <ili9xxx_init+0x12c>
 80033dc:	e7ef      	b.n	80033be <ili9xxx_init+0x136>
	r = ili9xxx_transmit(dev, ILI9XXX_SLPOUT, NULL, 0);
 80033de:	2300      	movs	r3, #0
 80033e0:	2111      	movs	r1, #17
 80033e2:	4628      	mov	r0, r5
 80033e4:	461a      	mov	r2, r3
 80033e6:	f017 fac8 	bl	801a97a <ili9xxx_transmit>
	if (r < 0) {
 80033ea:	1e04      	subs	r4, r0, #0
 80033ec:	db06      	blt.n	80033fc <ili9xxx_init+0x174>
 80033ee:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80033f2:	2100      	movs	r1, #0
	return 0;
 80033f4:	2400      	movs	r4, #0
 80033f6:	f016 f9a1 	bl	801973c <z_impl_k_sleep>
	if (r < 0) {
 80033fa:	e75b      	b.n	80032b4 <ili9xxx_init+0x2c>
		LOG_ERR("Could not exit sleep mode (%d)", r);
 80033fc:	466d      	mov	r5, sp
 80033fe:	b088      	sub	sp, #32
 8003400:	466a      	mov	r2, sp
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <ili9xxx_init+0x1a0>)
 8003404:	e772      	b.n	80032ec <ili9xxx_init+0x64>
 8003406:	bf00      	nop
 8003408:	0802a5b5 	.word	0x0802a5b5
 800340c:	080289b4 	.word	0x080289b4
 8003410:	0802a5cd 	.word	0x0802a5cd
 8003414:	0802a5f0 	.word	0x0802a5f0
 8003418:	0802a61b 	.word	0x0802a61b
 800341c:	0802a637 	.word	0x0802a637
 8003420:	0802a65b 	.word	0x0802a65b
 8003424:	0802a686 	.word	0x0802a686
 8003428:	0802a6a7 	.word	0x0802a6a7

0800342c <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800342c:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 800342e:	6903      	ldr	r3, [r0, #16]
{
 8003430:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 8003432:	6058      	str	r0, [r3, #4]
 8003434:	4d08      	ldr	r5, [pc, #32]	; (8003458 <gpio_stm32_init+0x2c>)
 8003436:	4628      	mov	r0, r5
 8003438:	f024 fdb0 	bl	8027f9c <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 800343c:	b140      	cbz	r0, 8003450 <gpio_stm32_init+0x24>
					(clock_control_subsys_t)&cfg->pclken);
 800343e:	6861      	ldr	r1, [r4, #4]
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8003440:	4628      	mov	r0, r5
 8003442:	68ab      	ldr	r3, [r5, #8]
 8003444:	310c      	adds	r1, #12
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 800344a:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 800344e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8003450:	f06f 0012 	mvn.w	r0, #18
 8003454:	e7fb      	b.n	800344e <gpio_stm32_init+0x22>
 8003456:	bf00      	nop
 8003458:	0802831c 	.word	0x0802831c

0800345c <gpio_stm32_pin_interrupt_configure>:
{
 800345c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800345e:	4617      	mov	r7, r2
 8003460:	460c      	mov	r4, r1
 8003462:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config;
 8003464:	6846      	ldr	r6, [r0, #4]
	if (mode == GPIO_INT_MODE_DISABLED) {
 8003466:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	struct gpio_stm32_data *data = dev->data;
 800346a:	6902      	ldr	r2, [r0, #16]
	if (mode == GPIO_INT_MODE_DISABLED) {
 800346c:	d128      	bne.n	80034c0 <gpio_stm32_pin_interrupt_configure+0x64>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800346e:	f001 0303 	and.w	r3, r1, #3
 8003472:	220f      	movs	r2, #15
 8003474:	3304      	adds	r3, #4
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	409a      	lsls	r2, r3
 800347a:	ea42 0291 	orr.w	r2, r2, r1, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U)) >> (POSITION_VAL(Line >> 16U) & 31U));
 800347e:	4937      	ldr	r1, [pc, #220]	; (800355c <gpio_stm32_pin_interrupt_configure+0x100>)
 8003480:	f002 0303 	and.w	r3, r2, #3
 8003484:	3302      	adds	r3, #2
 8003486:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800348a:	0c13      	lsrs	r3, r2, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8003490:	fab3 f383 	clz	r3, r3
 8003494:	ea01 4212 	and.w	r2, r1, r2, lsr #16
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80034a0:	68b2      	ldr	r2, [r6, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d109      	bne.n	80034ba <gpio_stm32_pin_interrupt_configure+0x5e>
			stm32_exti_disable(pin);
 80034a6:	4620      	mov	r0, r4
 80034a8:	f017 f9a5 	bl	801a7f6 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80034ac:	4620      	mov	r0, r4
 80034ae:	f7ff fc89 	bl	8002dc4 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80034b2:	2100      	movs	r1, #0
 80034b4:	4620      	mov	r0, r4
 80034b6:	f017 f9ab 	bl	801a810 <stm32_exti_trigger>
	int err = 0;
 80034ba:	2000      	movs	r0, #0
}
 80034bc:	b003      	add	sp, #12
 80034be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 80034c0:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 80034c4:	d044      	beq.n	8003550 <gpio_stm32_pin_interrupt_configure+0xf4>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 80034c6:	4926      	ldr	r1, [pc, #152]	; (8003560 <gpio_stm32_pin_interrupt_configure+0x104>)
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff fc63 	bl	8002d94 <stm32_exti_set_callback>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d141      	bne.n	8003556 <gpio_stm32_pin_interrupt_configure+0xfa>
	struct stm32_pclken pclken = {
 80034d2:	4a24      	ldr	r2, [pc, #144]	; (8003564 <gpio_stm32_pin_interrupt_configure+0x108>)
 80034d4:	466b      	mov	r3, sp
	gpio_stm32_enable_int(cfg->port, pin);
 80034d6:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 80034d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80034e0:	4821      	ldr	r0, [pc, #132]	; (8003568 <gpio_stm32_pin_interrupt_configure+0x10c>)
 80034e2:	4619      	mov	r1, r3
 80034e4:	6882      	ldr	r2, [r0, #8]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	4790      	blx	r2
	if (ret != 0) {
 80034ea:	b9d8      	cbnz	r0, 8003524 <gpio_stm32_pin_interrupt_configure+0xc8>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80034ec:	f004 0303 	and.w	r3, r4, #3
 80034f0:	210f      	movs	r1, #15
 80034f2:	3304      	adds	r3, #4
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4099      	lsls	r1, r3
 80034f8:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << ((POSITION_VAL(Line >> 16U)) & 31U));
 80034fc:	f001 0303 	and.w	r3, r1, #3
 8003500:	0c0a      	lsrs	r2, r1, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	fa92 f2a2 	rbit	r2, r2
 8003506:	009b      	lsls	r3, r3, #2
  return __builtin_clz(value);
 8003508:	fab2 f282 	clz	r2, r2
 800350c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8003510:	f002 021f 	and.w	r2, r2, #31
 8003514:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
 8003518:	4096      	lsls	r6, r2
 800351a:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 800351e:	430e      	orrs	r6, r1
 8003520:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
	switch (trig) {
 8003524:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8003528:	d00e      	beq.n	8003548 <gpio_stm32_pin_interrupt_configure+0xec>
 800352a:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 800352e:	d00d      	beq.n	800354c <gpio_stm32_pin_interrupt_configure+0xf0>
 8003530:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 8003534:	4259      	negs	r1, r3
 8003536:	4159      	adcs	r1, r3
 8003538:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 800353a:	4620      	mov	r0, r4
 800353c:	f017 f968 	bl	801a810 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8003540:	4620      	mov	r0, r4
 8003542:	f7ff fc13 	bl	8002d6c <stm32_exti_enable>
 8003546:	e7b8      	b.n	80034ba <gpio_stm32_pin_interrupt_configure+0x5e>
		edge = STM32_EXTI_TRIG_RISING;
 8003548:	2101      	movs	r1, #1
 800354a:	e7f6      	b.n	800353a <gpio_stm32_pin_interrupt_configure+0xde>
		edge = STM32_EXTI_TRIG_BOTH;
 800354c:	2103      	movs	r1, #3
 800354e:	e7f4      	b.n	800353a <gpio_stm32_pin_interrupt_configure+0xde>
		err = -ENOTSUP;
 8003550:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003554:	e7b2      	b.n	80034bc <gpio_stm32_pin_interrupt_configure+0x60>
		err = -EBUSY;
 8003556:	f06f 000f 	mvn.w	r0, #15
	return err;
 800355a:	e7af      	b.n	80034bc <gpio_stm32_pin_interrupt_configure+0x60>
 800355c:	58000400 	.word	0x58000400
 8003560:	0801adb9 	.word	0x0801adb9
 8003564:	08028a0c 	.word	0x08028a0c
 8003568:	0802831c 	.word	0x0802831c

0800356c <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 800356c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003570:	4604      	mov	r4, r0
 8003572:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 8003576:	2500      	movs	r5, #0
	port_device = gpio_ports[STM32_PORT(pin)];
 8003578:	4f1c      	ldr	r7, [pc, #112]	; (80035ec <pinctrl_configure_pins+0x80>)
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800357a:	42b4      	cmp	r4, r6
 800357c:	d101      	bne.n	8003582 <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 800357e:	2000      	movs	r0, #0
 8003580:	e014      	b.n	80035ac <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8003582:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8003584:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8003586:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800358a:	d411      	bmi.n	80035b0 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 800358c:	6865      	ldr	r5, [r4, #4]
 800358e:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8003592:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8003596:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800359a:	280a      	cmp	r0, #10
 800359c:	d823      	bhi.n	80035e6 <pinctrl_configure_pins+0x7a>
	port_device = gpio_ports[STM32_PORT(pin)];
 800359e:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 80035a2:	f1b8 0f00 	cmp.w	r8, #0
 80035a6:	d10d      	bne.n	80035c4 <pinctrl_configure_pins+0x58>
		return -ENODEV;
 80035a8:	f06f 0012 	mvn.w	r0, #18
}
 80035ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 80035b0:	f1b9 0f10 	cmp.w	r9, #16
 80035b4:	d004      	beq.n	80035c0 <pinctrl_configure_pins+0x54>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 80035b6:	f1b9 0f11 	cmp.w	r9, #17
 80035ba:	d1ea      	bne.n	8003592 <pinctrl_configure_pins+0x26>
			pin_cgf = pins[i].pincfg;
 80035bc:	6865      	ldr	r5, [r4, #4]
 80035be:	e7e8      	b.n	8003592 <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 80035c0:	2530      	movs	r5, #48	; 0x30
 80035c2:	e7e6      	b.n	8003592 <pinctrl_configure_pins+0x26>
 80035c4:	4640      	mov	r0, r8
 80035c6:	f024 fce9 	bl	8027f9c <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d0ec      	beq.n	80035a8 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 80035ce:	464b      	mov	r3, r9
 80035d0:	462a      	mov	r2, r5
 80035d2:	f00a 010f 	and.w	r1, sl, #15
 80035d6:	4640      	mov	r0, r8
 80035d8:	f017 fc05 	bl	801ade6 <gpio_stm32_configure>
		if (ret < 0) {
 80035dc:	2800      	cmp	r0, #0
 80035de:	f104 0408 	add.w	r4, r4, #8
 80035e2:	daca      	bge.n	800357a <pinctrl_configure_pins+0xe>
 80035e4:	e7e2      	b.n	80035ac <pinctrl_configure_pins+0x40>
		return -EINVAL;
 80035e6:	f06f 0015 	mvn.w	r0, #21
 80035ea:	e7df      	b.n	80035ac <pinctrl_configure_pins+0x40>
 80035ec:	08028c7c 	.word	0x08028c7c

080035f0 <uart_stm32_set_baudrate.part.0>:
		pm_policy_state_lock_put(PM_STATE_SUSPEND_TO_IDLE, PM_ALL_SUBSTATES);
	}
}
#endif /* CONFIG_PM */

static inline void uart_stm32_set_baudrate(const struct device *dev, uint32_t baud_rate)
 80035f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		}
	} else {
		if (clock_control_get_rate(data->clock,
					   (clock_control_subsys_t)&config->pclken[0],
					   &clock_rate) < 0) {
			LOG_ERR("Failed call clock_control_get_rate(pclken[0])");
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <uart_stm32_set_baudrate.part.0+0x20>)
 80035f4:	9305      	str	r3, [sp, #20]
 80035f6:	2302      	movs	r3, #2
 80035f8:	9304      	str	r3, [sp, #16]
 80035fa:	2300      	movs	r3, #0
 80035fc:	aa04      	add	r2, sp, #16
 80035fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003602:	4804      	ldr	r0, [pc, #16]	; (8003614 <uart_stm32_set_baudrate.part.0+0x24>)
 8003604:	f7fe fab4 	bl	8001b70 <z_impl_z_log_msg_static_create>
			 "BaudRateReg >= 16");

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 8003608:	b007      	add	sp, #28
 800360a:	f85d fb04 	ldr.w	pc, [sp], #4
 800360e:	bf00      	nop
 8003610:	0802a7c6 	.word	0x0802a7c6
 8003614:	080289f4 	.word	0x080289f4

08003618 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 8003618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800361c:	790b      	ldrb	r3, [r1, #4]
{
 800361e:	460d      	mov	r5, r1
	const struct uart_stm32_config *config = dev->config;
 8003620:	6846      	ldr	r6, [r0, #4]
	switch (parity) {
 8003622:	2b01      	cmp	r3, #1
	struct uart_stm32_data *data = dev->data;
 8003624:	6907      	ldr	r7, [r0, #16]
	switch (parity) {
 8003626:	d02e      	beq.n	8003686 <uart_stm32_configure+0x6e>
 8003628:	f1a3 0e02 	sub.w	lr, r3, #2
 800362c:	f1de 0800 	rsbs	r8, lr, #0
 8003630:	eb48 080e 	adc.w	r8, r8, lr
 8003634:	ea4f 2888 	mov.w	r8, r8, lsl #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8003638:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 800363c:	f895 a006 	ldrb.w	sl, [r5, #6]
 8003640:	f1b9 0f02 	cmp.w	r9, #2
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8003644:	79ec      	ldrb	r4, [r5, #7]
 8003646:	bf96      	itet	ls
 8003648:	4a74      	ldrls	r2, [pc, #464]	; (800381c <uart_stm32_configure+0x204>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800364a:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 800364e:	f832 e019 	ldrhls.w	lr, [r2, r9, lsl #1]
	switch (db) {
 8003652:	f1ba 0f02 	cmp.w	sl, #2
 8003656:	d019      	beq.n	800368c <uart_stm32_configure+0x74>
 8003658:	f1ba 0f04 	cmp.w	sl, #4
 800365c:	d04c      	beq.n	80036f8 <uart_stm32_configure+0xe0>
		if (p == UART_CFG_PARITY_NONE) {
 800365e:	2b00      	cmp	r3, #0
 8003660:	d14a      	bne.n	80036f8 <uart_stm32_configure+0xe0>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8003662:	2c01      	cmp	r4, #1
 8003664:	f000 80cf 	beq.w	8003806 <uart_stm32_configure+0x1ee>
#if HAS_DRIVER_ENABLE
	bool driver_enable = cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485;
 8003668:	1ee2      	subs	r2, r4, #3
 800366a:	469c      	mov	ip, r3
 800366c:	4251      	negs	r1, r2
 800366e:	4151      	adcs	r1, r2
			return LL_USART_DATAWIDTH_8B;
 8003670:	461a      	mov	r2, r3
	if (IS_LPUART_INSTANCE(config->usart) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8003672:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8003676:	d03c      	beq.n	80036f2 <uart_stm32_configure+0xda>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8003678:	f1ba 0f01 	cmp.w	sl, #1
 800367c:	d939      	bls.n	80036f2 <uart_stm32_configure+0xda>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 800367e:	f1ba 0f04 	cmp.w	sl, #4
 8003682:	d036      	beq.n	80036f2 <uart_stm32_configure+0xda>
 8003684:	e011      	b.n	80036aa <uart_stm32_configure+0x92>
	switch (parity) {
 8003686:	f44f 68c0 	mov.w	r8, #1536	; 0x600
 800368a:	e7d5      	b.n	8003638 <uart_stm32_configure+0x20>
		if (p == UART_CFG_PARITY_NONE) {
 800368c:	b9a3      	cbnz	r3, 80036b8 <uart_stm32_configure+0xa0>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800368e:	2c01      	cmp	r4, #1
 8003690:	f029 0202 	bic.w	r2, r9, #2
 8003694:	d033      	beq.n	80036fe <uart_stm32_configure+0xe6>
	bool driver_enable = cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485;
 8003696:	f1a4 0c03 	sub.w	ip, r4, #3
 800369a:	f1dc 0100 	rsbs	r1, ip, #0
 800369e:	eb41 010c 	adc.w	r1, r1, ip
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80036a2:	b332      	cbz	r2, 80036f2 <uart_stm32_configure+0xda>
 80036a4:	469c      	mov	ip, r3
			return LL_USART_DATAWIDTH_7B;
 80036a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		return -ENOTSUP;
	}

	/* Driver supports only RTS/CTS and RS485 flow control */
	if (!(cfg->flow_ctrl == UART_CFG_FLOW_CTRL_NONE
 80036aa:	2c00      	cmp	r4, #0
 80036ac:	d059      	beq.n	8003762 <uart_stm32_configure+0x14a>
		|| (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS &&
 80036ae:	2c01      	cmp	r4, #1
 80036b0:	d02c      	beq.n	800370c <uart_stm32_configure+0xf4>
	if (!(cfg->flow_ctrl == UART_CFG_FLOW_CTRL_NONE
 80036b2:	2c03      	cmp	r4, #3
 80036b4:	d02a      	beq.n	800370c <uart_stm32_configure+0xf4>
 80036b6:	e01c      	b.n	80036f2 <uart_stm32_configure+0xda>
			return LL_USART_DATAWIDTH_8B;
 80036b8:	2200      	movs	r2, #0
		return LL_USART_HWCONTROL_RTS_CTS;
 80036ba:	2c01      	cmp	r4, #1
	bool driver_enable = cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485;
 80036bc:	f1a4 0b03 	sub.w	fp, r4, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 80036c0:	bf14      	ite	ne
 80036c2:	f04f 0c00 	movne.w	ip, #0
 80036c6:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	bool driver_enable = cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485;
 80036ca:	f1db 0100 	rsbs	r1, fp, #0
 80036ce:	eb41 010b 	adc.w	r1, r1, fp
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80036d2:	f1a3 0b03 	sub.w	fp, r3, #3
 80036d6:	f1bb 0f01 	cmp.w	fp, #1
 80036da:	d90a      	bls.n	80036f2 <uart_stm32_configure+0xda>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0c8      	beq.n	8003672 <uart_stm32_configure+0x5a>
 80036e0:	f1ba 0f04 	cmp.w	sl, #4
 80036e4:	d005      	beq.n	80036f2 <uart_stm32_configure+0xda>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80036e6:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 80036ea:	d002      	beq.n	80036f2 <uart_stm32_configure+0xda>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 80036ec:	f1ba 0f01 	cmp.w	sl, #1
 80036f0:	d8db      	bhi.n	80036aa <uart_stm32_configure+0x92>
		return -ENOTSUP;
 80036f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80036f6:	e084      	b.n	8003802 <uart_stm32_configure+0x1ea>
 80036f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036fc:	e7dd      	b.n	80036ba <uart_stm32_configure+0xa2>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80036fe:	2a00      	cmp	r2, #0
 8003700:	d0f7      	beq.n	80036f2 <uart_stm32_configure+0xda>
	bool driver_enable = cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485;
 8003702:	4619      	mov	r1, r3
		return LL_USART_HWCONTROL_RTS_CTS;
 8003704:	f44f 7c40 	mov.w	ip, #768	; 0x300
			return LL_USART_DATAWIDTH_7B;
 8003708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
			IS_UART_HWFLOW_INSTANCE(config->usart))
#if HAS_DRIVER_ENABLE
		|| (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485 &&
			IS_UART_DRIVER_ENABLE_INSTANCE(config->usart))
 800370c:	6833      	ldr	r3, [r6, #0]
		|| (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485 &&
 800370e:	4c44      	ldr	r4, [pc, #272]	; (8003820 <uart_stm32_configure+0x208>)
 8003710:	42a3      	cmp	r3, r4
 8003712:	d026      	beq.n	8003762 <uart_stm32_configure+0x14a>
			IS_UART_DRIVER_ENABLE_INSTANCE(config->usart))
 8003714:	f5a4 444c 	sub.w	r4, r4, #52224	; 0xcc00
 8003718:	42a3      	cmp	r3, r4
 800371a:	d022      	beq.n	8003762 <uart_stm32_configure+0x14a>
 800371c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003720:	42a3      	cmp	r3, r4
 8003722:	d01e      	beq.n	8003762 <uart_stm32_configure+0x14a>
 8003724:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003728:	42a3      	cmp	r3, r4
 800372a:	d01a      	beq.n	8003762 <uart_stm32_configure+0x14a>
 800372c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003730:	42a3      	cmp	r3, r4
 8003732:	d016      	beq.n	8003762 <uart_stm32_configure+0x14a>
 8003734:	f504 4444 	add.w	r4, r4, #50176	; 0xc400
 8003738:	42a3      	cmp	r3, r4
 800373a:	d012      	beq.n	8003762 <uart_stm32_configure+0x14a>
 800373c:	f5a4 441c 	sub.w	r4, r4, #39936	; 0x9c00
 8003740:	42a3      	cmp	r3, r4
 8003742:	d00e      	beq.n	8003762 <uart_stm32_configure+0x14a>
 8003744:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003748:	42a3      	cmp	r3, r4
 800374a:	d00a      	beq.n	8003762 <uart_stm32_configure+0x14a>
 800374c:	f504 441c 	add.w	r4, r4, #39936	; 0x9c00
 8003750:	42a3      	cmp	r3, r4
 8003752:	d006      	beq.n	8003762 <uart_stm32_configure+0x14a>
 8003754:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003758:	42a3      	cmp	r3, r4
 800375a:	d002      	beq.n	8003762 <uart_stm32_configure+0x14a>
 800375c:	4c31      	ldr	r4, [pc, #196]	; (8003824 <uart_stm32_configure+0x20c>)
 800375e:	42a3      	cmp	r3, r4
 8003760:	d1c7      	bne.n	80036f2 <uart_stm32_configure+0xda>
#endif
		)) {
		return -ENOTSUP;
	}

	LL_USART_Disable(config->usart);
 8003762:	6834      	ldr	r4, [r6, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	6023      	str	r3, [r4, #0]
	return LL_USART_GetParity(config->usart);
 800376c:	6843      	ldr	r3, [r0, #4]
 800376e:	681c      	ldr	r4, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(const USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600

	if (parity != uart_stm32_get_parity(dev)) {
 8003776:	4598      	cmp	r8, r3
 8003778:	d005      	beq.n	8003786 <uart_stm32_configure+0x16e>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003780:	ea43 0308 	orr.w	r3, r3, r8
 8003784:	6023      	str	r3, [r4, #0]
	return LL_USART_GetStopBitsLength(config->usart);
 8003786:	6843      	ldr	r3, [r0, #4]
 8003788:	681c      	ldr	r4, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(const USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800378a:	6863      	ldr	r3, [r4, #4]
 800378c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8003790:	459e      	cmp	lr, r3
 8003792:	d005      	beq.n	80037a0 <uart_stm32_configure+0x188>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003794:	6863      	ldr	r3, [r4, #4]
 8003796:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800379a:	ea43 030e 	orr.w	r3, r3, lr
 800379e:	6063      	str	r3, [r4, #4]
	return LL_USART_GetDataWidth(config->usart);
 80037a0:	6843      	ldr	r3, [r0, #4]
 80037a2:	681c      	ldr	r4, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <uart_stm32_configure+0x1a0>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80037b4:	4313      	orrs	r3, r2
 80037b6:	6023      	str	r3, [r4, #0]
	return LL_USART_GetHWFlowCtrl(config->usart);
 80037b8:	6843      	ldr	r3, [r0, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(const USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80037bc:	6893      	ldr	r3, [r2, #8]
 80037be:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80037c2:	4563      	cmp	r3, ip
 80037c4:	d005      	beq.n	80037d2 <uart_stm32_configure+0x1ba>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80037c6:	6893      	ldr	r3, [r2, #8]
 80037c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037cc:	ea43 030c 	orr.w	r3, r3, ip
 80037d0:	6093      	str	r3, [r2, #8]
	return LL_USART_IsEnabledDEMode(config->usart);
 80037d2:	6843      	ldr	r3, [r0, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledDEMode(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM)) ? 1UL : 0UL);
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	0452      	lsls	r2, r2, #17
 80037da:	d419      	bmi.n	8003810 <uart_stm32_configure+0x1f8>
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

#if HAS_DRIVER_ENABLE
	if (driver_enable != uart_stm32_get_driver_enable(dev)) {
 80037dc:	b119      	cbz	r1, 80037e6 <uart_stm32_configure+0x1ce>
  SET_BIT(USARTx->CR3, USART_CR3_DEM);
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
 80037e4:	609a      	str	r2, [r3, #8]
		uart_stm32_set_driver_enable(dev, driver_enable);
	}
#endif

	if (cfg->baudrate != data->baud_rate) {
 80037e6:	6829      	ldr	r1, [r5, #0]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4299      	cmp	r1, r3
 80037ec:	d003      	beq.n	80037f6 <uart_stm32_configure+0x1de>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 80037ee:	f017 fc17 	bl	801b020 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 80037f2:	682b      	ldr	r3, [r5, #0]
 80037f4:	603b      	str	r3, [r7, #0]
	}

	LL_USART_Enable(config->usart);
 80037f6:	6832      	ldr	r2, [r6, #0]
	return 0;
 80037f8:	2000      	movs	r0, #0
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80037fa:	6813      	ldr	r3, [r2, #0]
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6013      	str	r3, [r2, #0]
};
 8003802:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return LL_USART_DATAWIDTH_8B;
 8003806:	461a      	mov	r2, r3
		return LL_USART_HWCONTROL_RTS_CTS;
 8003808:	f44f 7c40 	mov.w	ip, #768	; 0x300
	bool driver_enable = cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RS485;
 800380c:	4619      	mov	r1, r3
 800380e:	e730      	b.n	8003672 <uart_stm32_configure+0x5a>
	if (driver_enable != uart_stm32_get_driver_enable(dev)) {
 8003810:	2900      	cmp	r1, #0
 8003812:	d1e8      	bne.n	80037e6 <uart_stm32_configure+0x1ce>
  CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800381a:	e7e3      	b.n	80037e4 <uart_stm32_configure+0x1cc>
 800381c:	08029aec 	.word	0x08029aec
 8003820:	40011000 	.word	0x40011000
 8003824:	58000c00 	.word	0x58000c00

08003828 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8003828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	4606      	mov	r6, r0
	const struct uart_stm32_config *config = dev->config;
 8003830:	6844      	ldr	r4, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8003832:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
 8003836:	af00      	add	r7, sp, #0
	data->clock = clk;
 8003838:	4893      	ldr	r0, [pc, #588]	; (8003a88 <uart_stm32_init+0x260>)
 800383a:	f8c8 0004 	str.w	r0, [r8, #4]
 800383e:	f024 fbad 	bl	8027f9c <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 8003842:	4603      	mov	r3, r0
 8003844:	b968      	cbnz	r0, 8003862 <uart_stm32_init+0x3a>
		LOG_ERR("clock control device not ready");
 8003846:	4a91      	ldr	r2, [pc, #580]	; (8003a8c <uart_stm32_init+0x264>)
	}

	LL_USART_Disable(config->usart);

	if (!device_is_ready(data->reset.dev)) {
		LOG_ERR("reset controller not ready");
 8003848:	617a      	str	r2, [r7, #20]
 800384a:	2202      	movs	r2, #2
 800384c:	613a      	str	r2, [r7, #16]
 800384e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003852:	f107 0210 	add.w	r2, r7, #16
 8003856:	488e      	ldr	r0, [pc, #568]	; (8003a90 <uart_stm32_init+0x268>)
		return -ENODEV;
 8003858:	f06f 0512 	mvn.w	r5, #18
 800385c:	f7fe f988 	bl	8001b70 <z_impl_z_log_msg_static_create>
		return -ENODEV;
 8003860:	e013      	b.n	800388a <uart_stm32_init+0x62>
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8003862:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003866:	6861      	ldr	r1, [r4, #4]
 8003868:	6883      	ldr	r3, [r0, #8]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4798      	blx	r3
	if (err != 0) {
 800386e:	4605      	mov	r5, r0
 8003870:	b180      	cbz	r0, 8003894 <uart_stm32_init+0x6c>
		LOG_ERR("Could not enable (LP)UART clock");
 8003872:	4b88      	ldr	r3, [pc, #544]	; (8003a94 <uart_stm32_init+0x26c>)
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	2302      	movs	r3, #2
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	2300      	movs	r3, #0
 800387c:	f107 0210 	add.w	r2, r7, #16
 8003880:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003884:	4882      	ldr	r0, [pc, #520]	; (8003a90 <uart_stm32_init+0x268>)
 8003886:	f7fe f973 	bl	8001b70 <z_impl_z_log_msg_static_create>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 800388a:	4628      	mov	r0, r5
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8003894:	4601      	mov	r1, r0
 8003896:	463a      	mov	r2, r7
 8003898:	69e0      	ldr	r0, [r4, #28]
 800389a:	f017 fabc 	bl	801ae16 <pinctrl_lookup_state>
	if (ret < 0) {
 800389e:	2800      	cmp	r0, #0
 80038a0:	da01      	bge.n	80038a6 <uart_stm32_init+0x7e>
 80038a2:	4605      	mov	r5, r0
 80038a4:	e7f1      	b.n	800388a <uart_stm32_init+0x62>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 80038a6:	683b      	ldr	r3, [r7, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80038a8:	462a      	mov	r2, r5
 80038aa:	7919      	ldrb	r1, [r3, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	f7ff fe5d 	bl	800356c <pinctrl_configure_pins>
	if (err < 0) {
 80038b2:	2800      	cmp	r0, #0
 80038b4:	dbf5      	blt.n	80038a2 <uart_stm32_init+0x7a>
	LL_USART_Disable(config->usart);
 80038b6:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	6013      	str	r3, [r2, #0]
	if (!device_is_ready(data->reset.dev)) {
 80038c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80038c4:	f024 fb6a 	bl	8027f9c <z_device_is_ready>
 80038c8:	4603      	mov	r3, r0
 80038ca:	b908      	cbnz	r0, 80038d0 <uart_stm32_init+0xa8>
		LOG_ERR("reset controller not ready");
 80038cc:	4a72      	ldr	r2, [pc, #456]	; (8003a98 <uart_stm32_init+0x270>)
 80038ce:	e7bb      	b.n	8003848 <uart_stm32_init+0x20>
 *
 * @return a value from reset_line_toggle()
 */
static inline int reset_line_toggle_dt(const struct reset_dt_spec *spec)
{
	return reset_line_toggle(spec->dev, spec->id);
 80038d0:	e9d8 0102 	ldrd	r0, r1, [r8, #8]
	if (api->line_toggle == NULL) {
 80038d4:	6883      	ldr	r3, [r0, #8]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	b103      	cbz	r3, 80038dc <uart_stm32_init+0xb4>
	return api->line_toggle(dev, id);
 80038da:	4798      	blx	r3
	LL_USART_SetTransferDirection(config->usart,
 80038dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80038e2:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	e842 3900 	strex	r9, r3, [r2]
 80038ea:	f1b9 0f00 	cmp.w	r9, #0
 80038ee:	d1f6      	bne.n	80038de <uart_stm32_init+0xb6>
	if (config->parity == 2) {
 80038f0:	6923      	ldr	r3, [r4, #16]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	f000 8093 	beq.w	8003a1e <uart_stm32_init+0x1f6>
	} else if (config->parity == 1) {
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	f000 8095 	beq.w	8003a28 <uart_stm32_init+0x200>
		if (config->parity != 0) {
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d17c      	bne.n	80039fc <uart_stm32_init+0x1d4>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8003902:	2300      	movs	r3, #0
	LL_USART_ConfigCharacter(config->usart,
 8003904:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8003906:	ea43 0309 	orr.w	r3, r3, r9
 800390a:	680a      	ldr	r2, [r1, #0]
 800390c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003910:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003914:	431a      	orrs	r2, r3
 8003916:	600a      	str	r2, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003918:	684b      	ldr	r3, [r1, #4]
 800391a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800391e:	604b      	str	r3, [r1, #4]
	if (config->hw_flow_control) {
 8003920:	7b23      	ldrb	r3, [r4, #12]
 8003922:	b12b      	cbz	r3, 8003930 <uart_stm32_init+0x108>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 8003924:	6873      	ldr	r3, [r6, #4]
 8003926:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003928:	6893      	ldr	r3, [r2, #8]
 800392a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800392e:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8003930:	f8d8 1000 	ldr.w	r1, [r8]
 8003934:	4630      	mov	r0, r6
 8003936:	f017 fb73 	bl	801b020 <uart_stm32_set_baudrate>
	if (config->single_wire) {
 800393a:	7d23      	ldrb	r3, [r4, #20]
 800393c:	b123      	cbz	r3, 8003948 <uart_stm32_init+0x120>
		LL_USART_EnableHalfDuplex(config->usart);
 800393e:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8003940:	6893      	ldr	r3, [r2, #8]
 8003942:	f043 0308 	orr.w	r3, r3, #8
 8003946:	6093      	str	r3, [r2, #8]
	if (config->tx_rx_swap) {
 8003948:	7d63      	ldrb	r3, [r4, #21]
 800394a:	b123      	cbz	r3, 8003956 <uart_stm32_init+0x12e>
		LL_USART_SetTXRXSwap(config->usart, LL_USART_TXRX_SWAPPED);
 800394c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 800394e:	6853      	ldr	r3, [r2, #4]
 8003950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003954:	6053      	str	r3, [r2, #4]
	if (config->rx_invert) {
 8003956:	7da3      	ldrb	r3, [r4, #22]
 8003958:	b123      	cbz	r3, 8003964 <uart_stm32_init+0x13c>
		LL_USART_SetRXPinLevel(config->usart, LL_USART_RXPIN_LEVEL_INVERTED);
 800395a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 800395c:	6853      	ldr	r3, [r2, #4]
 800395e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003962:	6053      	str	r3, [r2, #4]
	if (config->tx_invert) {
 8003964:	7de3      	ldrb	r3, [r4, #23]
 8003966:	b123      	cbz	r3, 8003972 <uart_stm32_init+0x14a>
		LL_USART_SetTXPinLevel(config->usart, LL_USART_TXPIN_LEVEL_INVERTED);
 8003968:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 800396a:	6853      	ldr	r3, [r2, #4]
 800396c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003970:	6053      	str	r3, [r2, #4]
	if (config->de_enable) {
 8003972:	7e22      	ldrb	r2, [r4, #24]
		if (!IS_UART_DRIVER_ENABLE_INSTANCE(config->usart)) {
 8003974:	6823      	ldr	r3, [r4, #0]
	if (config->de_enable) {
 8003976:	2a00      	cmp	r2, #0
 8003978:	d078      	beq.n	8003a6c <uart_stm32_init+0x244>
		if (!IS_UART_DRIVER_ENABLE_INSTANCE(config->usart)) {
 800397a:	4a48      	ldr	r2, [pc, #288]	; (8003a9c <uart_stm32_init+0x274>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d058      	beq.n	8003a32 <uart_stm32_init+0x20a>
 8003980:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8003984:	4293      	cmp	r3, r2
 8003986:	d054      	beq.n	8003a32 <uart_stm32_init+0x20a>
 8003988:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800398c:	4293      	cmp	r3, r2
 800398e:	d050      	beq.n	8003a32 <uart_stm32_init+0x20a>
 8003990:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003994:	4293      	cmp	r3, r2
 8003996:	d04c      	beq.n	8003a32 <uart_stm32_init+0x20a>
 8003998:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800399c:	4293      	cmp	r3, r2
 800399e:	d048      	beq.n	8003a32 <uart_stm32_init+0x20a>
 80039a0:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d044      	beq.n	8003a32 <uart_stm32_init+0x20a>
 80039a8:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d040      	beq.n	8003a32 <uart_stm32_init+0x20a>
 80039b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d03c      	beq.n	8003a32 <uart_stm32_init+0x20a>
 80039b8:	f502 421c 	add.w	r2, r2, #39936	; 0x9c00
 80039bc:	4293      	cmp	r3, r2
 80039be:	d038      	beq.n	8003a32 <uart_stm32_init+0x20a>
 80039c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d034      	beq.n	8003a32 <uart_stm32_init+0x20a>
 80039c8:	4a35      	ldr	r2, [pc, #212]	; (8003aa0 <uart_stm32_init+0x278>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d031      	beq.n	8003a32 <uart_stm32_init+0x20a>
			LOG_ERR("%s does not support driver enable", dev->name);
 80039ce:	466c      	mov	r4, sp
 80039d0:	b088      	sub	sp, #32
 80039d2:	6833      	ldr	r3, [r6, #0]
 80039d4:	466a      	mov	r2, sp
 80039d6:	4933      	ldr	r1, [pc, #204]	; (8003aa4 <uart_stm32_init+0x27c>)
 80039d8:	e9c2 1305 	strd	r1, r3, [r2, #20]
 80039dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039e0:	8393      	strh	r3, [r2, #28]
 80039e2:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <uart_stm32_init+0x280>)
 80039e4:	f842 3f10 	str.w	r3, [r2, #16]!
 80039e8:	2300      	movs	r3, #0
 80039ea:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 80039ee:	4828      	ldr	r0, [pc, #160]	; (8003a90 <uart_stm32_init+0x268>)
			return -EINVAL;
 80039f0:	f06f 0515 	mvn.w	r5, #21
 80039f4:	f7fe f8bc 	bl	8001b70 <z_impl_z_log_msg_static_create>
 80039f8:	46a5      	mov	sp, r4
 80039fa:	e746      	b.n	800388a <uart_stm32_init+0x62>
			LOG_WRN("Invalid parity setting '%d'."
 80039fc:	46ea      	mov	sl, sp
 80039fe:	b088      	sub	sp, #32
 8003a00:	466a      	mov	r2, sp
 8003a02:	492a      	ldr	r1, [pc, #168]	; (8003aac <uart_stm32_init+0x284>)
 8003a04:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8003a08:	2303      	movs	r3, #3
 8003a0a:	f842 3f10 	str.w	r3, [r2, #16]!
 8003a0e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8003a12:	464b      	mov	r3, r9
 8003a14:	481e      	ldr	r0, [pc, #120]	; (8003a90 <uart_stm32_init+0x268>)
 8003a16:	f7fe f8ab 	bl	8001b70 <z_impl_z_log_msg_static_create>
 8003a1a:	46d5      	mov	sp, sl
 8003a1c:	e771      	b.n	8003902 <uart_stm32_init+0xda>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8003a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8003a22:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8003a26:	e76d      	b.n	8003904 <uart_stm32_init+0xdc>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8003a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8003a2c:	f44f 69c0 	mov.w	r9, #1536	; 0x600
 8003a30:	e768      	b.n	8003904 <uart_stm32_init+0xdc>
		LL_USART_EnableDEMode(config->usart);
 8003a32:	6873      	ldr	r3, [r6, #4]
 8003a34:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DEM);
 8003a36:	6893      	ldr	r3, [r2, #8]
 8003a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a3c:	6093      	str	r3, [r2, #8]
		LL_USART_SetDEAssertionTime(config->usart, config->de_assert_time);
 8003a3e:	6822      	ldr	r2, [r4, #0]
 8003a40:	7e61      	ldrb	r1, [r4, #25]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
 8003a42:	6813      	ldr	r3, [r2, #0]
 8003a44:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 8003a48:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003a4c:	6013      	str	r3, [r2, #0]
		LL_USART_SetDEDeassertionTime(config->usart, config->de_deassert_time);
 8003a4e:	6822      	ldr	r2, [r4, #0]
 8003a50:	7ea1      	ldrb	r1, [r4, #26]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
 8003a52:	6813      	ldr	r3, [r2, #0]
 8003a54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003a5c:	6013      	str	r3, [r2, #0]
		if (config->de_invert) {
 8003a5e:	7ee3      	ldrb	r3, [r4, #27]
 8003a60:	b123      	cbz	r3, 8003a6c <uart_stm32_init+0x244>
			LL_USART_SetDESignalPolarity(config->usart, LL_USART_DE_POLARITY_LOW);
 8003a62:	6822      	ldr	r2, [r4, #0]
  *         @arg @ref LL_USART_DE_POLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
 8003a64:	6893      	ldr	r3, [r2, #8]
 8003a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6a:	6093      	str	r3, [r2, #8]
	LL_USART_Enable(config->usart);
 8003a6c:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003a6e:	6813      	ldr	r3, [r2, #0]
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6013      	str	r3, [r2, #0]
	while (!(LL_USART_IsActiveFlag_TEACK(config->usart))) {
 8003a76:	6823      	ldr	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8003a78:	69da      	ldr	r2, [r3, #28]
 8003a7a:	0291      	lsls	r1, r2, #10
 8003a7c:	d5fc      	bpl.n	8003a78 <uart_stm32_init+0x250>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	0252      	lsls	r2, r2, #9
 8003a82:	d5fc      	bpl.n	8003a7e <uart_stm32_init+0x256>
 8003a84:	e701      	b.n	800388a <uart_stm32_init+0x62>
 8003a86:	bf00      	nop
 8003a88:	0802831c 	.word	0x0802831c
 8003a8c:	0802a7f4 	.word	0x0802a7f4
 8003a90:	080289f4 	.word	0x080289f4
 8003a94:	0802a813 	.word	0x0802a813
 8003a98:	0802a833 	.word	0x0802a833
 8003a9c:	40011000 	.word	0x40011000
 8003aa0:	58000c00 	.word	0x58000c00
 8003aa4:	0802a880 	.word	0x0802a880
 8003aa8:	01000003 	.word	0x01000003
 8003aac:	0802a84e 	.word	0x0802a84e

08003ab0 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8003ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ab4:	b087      	sub	sp, #28
 8003ab6:	af00      	add	r7, sp, #0
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8003ab8:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8003aba:	6845      	ldr	r5, [r0, #4]
 8003abc:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8003c18 <spi_stm32_init+0x168>
 8003ac0:	4640      	mov	r0, r8
 8003ac2:	f024 fa6b 	bl	8027f9c <z_device_is_ready>
	int err;

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	b988      	cbnz	r0, 8003aee <spi_stm32_init+0x3e>
		LOG_ERR("clock control device not ready");
 8003aca:	4a54      	ldr	r2, [pc, #336]	; (8003c1c <spi_stm32_init+0x16c>)
 8003acc:	617a      	str	r2, [r7, #20]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	613a      	str	r2, [r7, #16]
 8003ad2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003ad6:	f107 0210 	add.w	r2, r7, #16
 8003ada:	4851      	ldr	r0, [pc, #324]	; (8003c20 <spi_stm32_init+0x170>)
 8003adc:	f7fe f848 	bl	8001b70 <z_impl_z_log_msg_static_create>
		return -ENODEV;
 8003ae0:	f06f 0412 	mvn.w	r4, #18
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	const struct clock_control_driver_api *api =
 8003aee:	f8d8 9008 	ldr.w	r9, [r8, #8]
	return api->on(dev, sys);
 8003af2:	4640      	mov	r0, r8
 8003af4:	68e9      	ldr	r1, [r5, #12]
 8003af6:	f8d9 3000 	ldr.w	r3, [r9]
 8003afa:	4798      	blx	r3
	if (err < 0) {
 8003afc:	1e04      	subs	r4, r0, #0
 8003afe:	da0c      	bge.n	8003b1a <spi_stm32_init+0x6a>
		LOG_ERR("Could not enable SPI clock");
 8003b00:	4b48      	ldr	r3, [pc, #288]	; (8003c24 <spi_stm32_init+0x174>)
			LOG_ERR("Could not select SPI domain clock");
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	2302      	movs	r3, #2
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f107 0210 	add.w	r2, r7, #16
 8003b0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003b12:	4843      	ldr	r0, [pc, #268]	; (8003c20 <spi_stm32_init+0x170>)
 8003b14:	f7fe f82c 	bl	8001b70 <z_impl_z_log_msg_static_create>
			return err;
 8003b18:	e7e4      	b.n	8003ae4 <spi_stm32_init+0x34>
	if (IS_ENABLED(STM32_SPI_DOMAIN_CLOCK_SUPPORT) && (cfg->pclk_len > 1)) {
 8003b1a:	68ab      	ldr	r3, [r5, #8]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d90e      	bls.n	8003b3e <spi_stm32_init+0x8e>
					      (clock_control_subsys_t) &cfg->pclken[1],
 8003b20:	68e9      	ldr	r1, [r5, #12]
					  void *data)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->configure == NULL) {
 8003b22:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8003b26:	3108      	adds	r1, #8
 8003b28:	b133      	cbz	r3, 8003b38 <spi_stm32_init+0x88>
		return -ENOSYS;
	}

	return api->configure(dev, sys, data);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	4798      	blx	r3
		if (err < 0) {
 8003b30:	1e04      	subs	r4, r0, #0
 8003b32:	da04      	bge.n	8003b3e <spi_stm32_init+0x8e>
			LOG_ERR("Could not select SPI domain clock");
 8003b34:	4b3c      	ldr	r3, [pc, #240]	; (8003c28 <spi_stm32_init+0x178>)
 8003b36:	e7e4      	b.n	8003b02 <spi_stm32_init+0x52>
		return -ENOSYS;
 8003b38:	f06f 0457 	mvn.w	r4, #87	; 0x57
 8003b3c:	e7fa      	b.n	8003b34 <spi_stm32_init+0x84>
	ret = pinctrl_lookup_state(config, id, &state);
 8003b3e:	463a      	mov	r2, r7
 8003b40:	2100      	movs	r1, #0
 8003b42:	6868      	ldr	r0, [r5, #4]
 8003b44:	f017 f967 	bl	801ae16 <pinctrl_lookup_state>
	if (ret < 0) {
 8003b48:	1e04      	subs	r4, r0, #0
 8003b4a:	db07      	blt.n	8003b5c <spi_stm32_init+0xac>
	return pinctrl_apply_state_direct(config, state);
 8003b4c:	683b      	ldr	r3, [r7, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	7919      	ldrb	r1, [r3, #4]
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	f7ff fd0a 	bl	800356c <pinctrl_configure_pins>
		if (err < 0) {
 8003b58:	1e04      	subs	r4, r0, #0
 8003b5a:	da10      	bge.n	8003b7e <spi_stm32_init+0xce>
			LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8003b5c:	466d      	mov	r5, sp
 8003b5e:	b088      	sub	sp, #32
 8003b60:	466a      	mov	r2, sp
 8003b62:	4b32      	ldr	r3, [pc, #200]	; (8003c2c <spi_stm32_init+0x17c>)
 8003b64:	e9c2 3405 	strd	r3, r4, [r2, #20]
 8003b68:	2303      	movs	r3, #3
 8003b6a:	f842 3f10 	str.w	r3, [r2, #16]!
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8003b74:	482a      	ldr	r0, [pc, #168]	; (8003c20 <spi_stm32_init+0x170>)
 8003b76:	f7fd fffb 	bl	8001b70 <z_impl_z_log_msg_static_create>
 8003b7a:	46ad      	mov	sp, r5
			return err;
 8003b7c:	e7b2      	b.n	8003ae4 <spi_stm32_init+0x34>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8003b7e:	68b5      	ldr	r5, [r6, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003b80:	f04f 0801 	mov.w	r8, #1
 8003b84:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003b88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b8c:	429d      	cmp	r5, r3
 8003b8e:	d304      	bcc.n	8003b9a <spi_stm32_init+0xea>
	spi_context_unlock_unconditionally(&data->ctx);
 8003b90:	4630      	mov	r0, r6
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8003b92:	2400      	movs	r4, #0
 8003b94:	f017 fabe 	bl	801b114 <spi_context_unlock_unconditionally>
	return 0;
 8003b98:	e7a4      	b.n	8003ae4 <spi_stm32_init+0x34>
		if (!device_is_ready(cs_gpio->port)) {
 8003b9a:	6828      	ldr	r0, [r5, #0]
 8003b9c:	f024 f9fe 	bl	8027f9c <z_device_is_ready>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	b9b0      	cbnz	r0, 8003bd2 <spi_stm32_init+0x122>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 8003ba4:	682a      	ldr	r2, [r5, #0]
 8003ba6:	466c      	mov	r4, sp
 8003ba8:	b08a      	sub	sp, #40	; 0x28
 8003baa:	7929      	ldrb	r1, [r5, #4]
 8003bac:	6810      	ldr	r0, [r2, #0]
 8003bae:	466a      	mov	r2, sp
 8003bb0:	61d1      	str	r1, [r2, #28]
 8003bb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bb6:	4d1e      	ldr	r5, [pc, #120]	; (8003c30 <spi_stm32_init+0x180>)
 8003bb8:	8411      	strh	r1, [r2, #32]
 8003bba:	491e      	ldr	r1, [pc, #120]	; (8003c34 <spi_stm32_init+0x184>)
 8003bbc:	e9c2 5005 	strd	r5, r0, [r2, #20]
 8003bc0:	f842 1f10 	str.w	r1, [r2, #16]!
 8003bc4:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 8003bc8:	4815      	ldr	r0, [pc, #84]	; (8003c20 <spi_stm32_init+0x170>)
 8003bca:	f7fd ffd1 	bl	8001b70 <z_impl_z_log_msg_static_create>
 8003bce:	46a5      	mov	sp, r4
	if (err < 0) {
 8003bd0:	e786      	b.n	8003ae0 <spi_stm32_init+0x30>
	return gpio_pin_configure(spec->port,
 8003bd2:	6828      	ldr	r0, [r5, #0]
				  spec->pin,
 8003bd4:	7929      	ldrb	r1, [r5, #4]
				  spec->dt_flags | extra_flags);
 8003bd6:	88eb      	ldrh	r3, [r5, #6]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8003bd8:	07da      	lsls	r2, r3, #31
	struct gpio_driver_data *data =
 8003bda:	f8d0 c010 	ldr.w	ip, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003bde:	fa08 fe01 	lsl.w	lr, r8, r1
	const struct gpio_driver_api *api =
 8003be2:	f8d0 9008 	ldr.w	r9, [r0, #8]
	return gpio_pin_configure(spec->port,
 8003be6:	bf54      	ite	pl
 8003be8:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8003bec:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003bf0:	f8dc 4000 	ldr.w	r4, [ip]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8003bf4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8003bf8:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003bfa:	bf4c      	ite	mi
 8003bfc:	ea44 040e 	orrmi.w	r4, r4, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8003c00:	ea24 040e 	bicpl.w	r4, r4, lr
 8003c04:	f8cc 4000 	str.w	r4, [ip]
	return api->pin_configure(port, pin, flags);
 8003c08:	f8d9 3000 	ldr.w	r3, [r9]
 8003c0c:	4798      	blx	r3
		if (ret < 0) {
 8003c0e:	1e04      	subs	r4, r0, #0
 8003c10:	f6ff af68 	blt.w	8003ae4 <spi_stm32_init+0x34>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8003c14:	3508      	adds	r5, #8
 8003c16:	e7b5      	b.n	8003b84 <spi_stm32_init+0xd4>
 8003c18:	0802831c 	.word	0x0802831c
 8003c1c:	0802a7f4 	.word	0x0802a7f4
 8003c20:	080289ec 	.word	0x080289ec
 8003c24:	0802a8cd 	.word	0x0802a8cd
 8003c28:	0802a8e8 	.word	0x0802a8e8
 8003c2c:	0802a90a 	.word	0x0802a90a
 8003c30:	0802a928 	.word	0x0802a928
 8003c34:	01000004 	.word	0x01000004

08003c38 <spi_stm32_transceive>:
{
 8003c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3c:	b093      	sub	sp, #76	; 0x4c
 8003c3e:	4699      	mov	r9, r3
 8003c40:	4682      	mov	sl, r0
 8003c42:	4688      	mov	r8, r1
 8003c44:	af00      	add	r7, sp, #0
	SPI_TypeDef *spi = cfg->spi;
 8003c46:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8003c48:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8003c4a:	681e      	ldr	r6, [r3, #0]
	if (!tx_bufs && !rx_bufs) {
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	b912      	cbnz	r2, 8003c56 <spi_stm32_transceive+0x1e>
 8003c50:	f1b9 0f00 	cmp.w	r9, #0
 8003c54:	d037      	beq.n	8003cc6 <spi_stm32_transceive+0x8e>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8003c56:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003c5a:	049d      	lsls	r5, r3, #18
 8003c5c:	d438      	bmi.n	8003cd0 <spi_stm32_transceive+0x98>
	return z_impl_k_sem_take(sem, timeout);
 8003c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295
 8003c66:	f104 0010 	add.w	r0, r4, #16
 8003c6a:	f015 fac3 	bl	80191f4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8003c6e:	f8c4 8004 	str.w	r8, [r4, #4]
	const uint32_t scaler[] = {
 8003c72:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8003db0 <spi_stm32_transceive+0x178>
 8003c76:	f107 0528 	add.w	r5, r7, #40	; 0x28
	struct spi_stm32_data *data = dev->data;
 8003c7a:	f8da b010 	ldr.w	fp, [sl, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8003c7e:	f8da c004 	ldr.w	ip, [sl, #4]
	const uint32_t scaler[] = {
 8003c82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c88:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8003c8c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 8003c90:	f8db 2000 	ldr.w	r2, [fp]
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8003c94:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	if (spi_context_configured(&data->ctx, config)) {
 8003c98:	4590      	cmp	r8, r2
	SPI_TypeDef *spi = cfg->spi;
 8003c9a:	f8dc 5000 	ldr.w	r5, [ip]
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8003c9e:	f3c3 1145 	ubfx	r1, r3, #5, #6
	if (spi_context_configured(&data->ctx, config)) {
 8003ca2:	f000 80ec 	beq.w	8003e7e <spi_stm32_transceive+0x246>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8003ca6:	2908      	cmp	r1, #8
 8003ca8:	d019      	beq.n	8003cde <spi_stm32_transceive+0xa6>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8003caa:	2910      	cmp	r1, #16
 8003cac:	d017      	beq.n	8003cde <spi_stm32_transceive+0xa6>
		return -ENOTSUP;
 8003cae:	f06f 0985 	mvn.w	r9, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	889b      	ldrh	r3, [r3, #4]
 8003cb6:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8003cba:	d104      	bne.n	8003cc6 <spi_stm32_transceive+0x8e>
		ctx->owner = NULL;
 8003cbc:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 8003cbe:	f104 0010 	add.w	r0, r4, #16
 8003cc2:	f015 fa73 	bl	80191ac <z_impl_k_sem_give>
}
 8003cc6:	4648      	mov	r0, r9
 8003cc8:	374c      	adds	r7, #76	; 0x4c
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8003cd0:	69a3      	ldr	r3, [r4, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1c3      	bne.n	8003c5e <spi_stm32_transceive+0x26>
		(k_sem_count_get(&ctx->lock) == 0) &&
 8003cd6:	6863      	ldr	r3, [r4, #4]
 8003cd8:	4598      	cmp	r8, r3
 8003cda:	d1c0      	bne.n	8003c5e <spi_stm32_transceive+0x26>
 8003cdc:	e7c9      	b.n	8003c72 <spi_stm32_transceive+0x3a>
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 8003cde:	0418      	lsls	r0, r3, #16
 8003ce0:	d505      	bpl.n	8003cee <spi_stm32_transceive+0xb6>
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 8003ce2:	68eb      	ldr	r3, [r5, #12]
 8003ce4:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8003ce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cec:	60eb      	str	r3, [r5, #12]
	const struct clock_control_driver_api *api =
 8003cee:	4831      	ldr	r0, [pc, #196]	; (8003db4 <spi_stm32_transceive+0x17c>)
	if (IS_ENABLED(STM32_SPI_DOMAIN_CLOCK_SUPPORT) && (cfg->pclk_len > 1)) {
 8003cf0:	f8dc 2008 	ldr.w	r2, [ip, #8]
	if (api->get_rate == NULL) {
 8003cf4:	6883      	ldr	r3, [r0, #8]
 8003cf6:	2a01      	cmp	r2, #1
					   (clock_control_subsys_t) &cfg->pclken[1], &clock) < 0) {
 8003cf8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8003cfc:	68db      	ldr	r3, [r3, #12]
	if (IS_ENABLED(STM32_SPI_DOMAIN_CLOCK_SUPPORT) && (cfg->pclk_len > 1)) {
 8003cfe:	d937      	bls.n	8003d70 <spi_stm32_transceive+0x138>
					   (clock_control_subsys_t) &cfg->pclken[1], &clock) < 0) {
 8003d00:	3108      	adds	r1, #8
 8003d02:	b973      	cbnz	r3, 8003d22 <spi_stm32_transceive+0xea>
			LOG_ERR("Failed call clock_control_get_rate(pclk[1])");
 8003d04:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <spi_stm32_transceive+0x180>)
			LOG_ERR("Failed call clock_control_get_rate(pclk[0])");
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
 8003d08:	2302      	movs	r3, #2
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f107 0220 	add.w	r2, r7, #32
 8003d12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003d16:	4829      	ldr	r0, [pc, #164]	; (8003dbc <spi_stm32_transceive+0x184>)
 8003d18:	f7fd ff2a 	bl	8001b70 <z_impl_z_log_msg_static_create>
			return -EIO;
 8003d1c:	f06f 0904 	mvn.w	r9, #4
	if (ret) {
 8003d20:	e7c7      	b.n	8003cb2 <spi_stm32_transceive+0x7a>
	return api->get_rate(dev, sys, rate);
 8003d22:	f107 020c 	add.w	r2, r7, #12
 8003d26:	4798      	blx	r3
		if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	dbeb      	blt.n	8003d04 <spi_stm32_transceive+0xcc>
		uint32_t clk = clock >> br;
 8003d2c:	68f9      	ldr	r1, [r7, #12]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8003d2e:	2301      	movs	r3, #1
		if (clk <= config->frequency) {
 8003d30:	f8d8 0000 	ldr.w	r0, [r8]
		uint32_t clk = clock >> br;
 8003d34:	fa21 f203 	lsr.w	r2, r1, r3
		if (clk <= config->frequency) {
 8003d38:	4282      	cmp	r2, r0
 8003d3a:	d922      	bls.n	8003d82 <spi_stm32_transceive+0x14a>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	2b09      	cmp	r3, #9
 8003d40:	d1f8      	bne.n	8003d34 <spi_stm32_transceive+0xfc>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8003d42:	466d      	mov	r5, sp
 8003d44:	b08a      	sub	sp, #40	; 0x28
 8003d46:	466a      	mov	r2, sp
 8003d48:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <spi_stm32_transceive+0x188>)
 8003d4a:	e9c2 3005 	strd	r3, r0, [r2, #20]
 8003d4e:	084b      	lsrs	r3, r1, #1
 8003d50:	0a09      	lsrs	r1, r1, #8
 8003d52:	61d3      	str	r3, [r2, #28]
 8003d54:	2305      	movs	r3, #5
 8003d56:	6211      	str	r1, [r2, #32]
 8003d58:	f842 3f10 	str.w	r3, [r2, #16]!
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8003d62:	4816      	ldr	r0, [pc, #88]	; (8003dbc <spi_stm32_transceive+0x184>)
		return -EINVAL;
 8003d64:	f06f 0915 	mvn.w	r9, #21
 8003d68:	f7fd ff02 	bl	8001b70 <z_impl_z_log_msg_static_create>
 8003d6c:	46ad      	mov	sp, r5
	if (ret) {
 8003d6e:	e7a0      	b.n	8003cb2 <spi_stm32_transceive+0x7a>
	if (api->get_rate == NULL) {
 8003d70:	b90b      	cbnz	r3, 8003d76 <spi_stm32_transceive+0x13e>
			LOG_ERR("Failed call clock_control_get_rate(pclk[0])");
 8003d72:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <spi_stm32_transceive+0x18c>)
 8003d74:	e7c7      	b.n	8003d06 <spi_stm32_transceive+0xce>
	return api->get_rate(dev, sys, rate);
 8003d76:	f107 020c 	add.w	r2, r7, #12
 8003d7a:	4798      	blx	r3
		if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	dad5      	bge.n	8003d2c <spi_stm32_transceive+0xf4>
 8003d80:	e7f7      	b.n	8003d72 <spi_stm32_transceive+0x13a>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003d82:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8003d84:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003d90:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t Baudrate)
{
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR, Baudrate);
 8003d92:	68aa      	ldr	r2, [r5, #8]
 8003d94:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003d98:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60ab      	str	r3, [r5, #8]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8003da0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003da4:	0799      	lsls	r1, r3, #30
 8003da6:	d40f      	bmi.n	8003dc8 <spi_stm32_transceive+0x190>
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPOL, ClockPolarity);
 8003da8:	68eb      	ldr	r3, [r5, #12]
 8003daa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003dae:	e00e      	b.n	8003dce <spi_stm32_transceive+0x196>
 8003db0:	08028a14 	.word	0x08028a14
 8003db4:	0802831c 	.word	0x0802831c
 8003db8:	0802a94c 	.word	0x0802a94c
 8003dbc:	080289ec 	.word	0x080289ec
 8003dc0:	0802a9a4 	.word	0x0802a9a4
 8003dc4:	0802a978 	.word	0x0802a978
 8003dc8:	68eb      	ldr	r3, [r5, #12]
 8003dca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dce:	60eb      	str	r3, [r5, #12]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8003dd0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003dd4:	f013 0f04 	tst.w	r3, #4
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPHA, ClockPhase);
 8003dd8:	68eb      	ldr	r3, [r5, #12]
 8003dda:	bf14      	ite	ne
 8003ddc:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8003de0:	f023 7380 	biceq.w	r3, r3, #16777216	; 0x1000000
 8003de4:	60eb      	str	r3, [r5, #12]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR,  TransferDirection & SPI_CR1_HDDIR);
 8003de6:	682b      	ldr	r3, [r5, #0]
 8003de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dec:	602b      	str	r3, [r5, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_COMM, TransferDirection & SPI_CFG2_COMM);
 8003dee:	68eb      	ldr	r3, [r5, #12]
 8003df0:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8003df4:	60eb      	str	r3, [r5, #12]
	if (config->operation & SPI_TRANSFER_LSB) {
 8003df6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003dfa:	f013 0f10 	tst.w	r3, #16
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_LSBFRST, BitOrder);
 8003dfe:	68eb      	ldr	r3, [r5, #12]
 8003e00:	bf14      	ite	ne
 8003e02:	f443 0300 	orrne.w	r3, r3, #8388608	; 0x800000
 8003e06:	f423 0300 	biceq.w	r3, r3, #8388608	; 0x800000
 8003e0a:	60eb      	str	r3, [r5, #12]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CFG1, SPI_CFG1_CRCEN);
 8003e0c:	68ab      	ldr	r3, [r5, #8]
 8003e0e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003e12:	60ab      	str	r3, [r5, #8]
	if (spi_cs_is_gpio(config) || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8003e14:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8003e18:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003e1c:	2a00      	cmp	r2, #0
 8003e1e:	f000 8106 	beq.w	800402e <spi_stm32_transceive+0x3f6>
		if (SPI_OP_MODE_GET(config->operation) == SPI_OP_MODE_MASTER) {
 8003e22:	07da      	lsls	r2, r3, #31
 8003e24:	d406      	bmi.n	8003e34 <spi_stm32_transceive+0x1fc>
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 8003e26:	68eb      	ldr	r3, [r5, #12]
			if (LL_SPI_GetNSSPolarity(spi) == LL_SPI_NSS_POLARITY_LOW)
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	d403      	bmi.n	8003e34 <spi_stm32_transceive+0x1fc>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e32:	602b      	str	r3, [r5, #0]
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM | SPI_CFG2_SSOE, NSS);
 8003e34:	68eb      	ldr	r3, [r5, #12]
 8003e36:	f023 5310 	bic.w	r3, r3, #603979776	; 0x24000000
 8003e3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e3e:	60eb      	str	r3, [r5, #12]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8003e40:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003e44:	f013 0f01 	tst.w	r3, #1
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_MASTER, Mode);
 8003e48:	68eb      	ldr	r3, [r5, #12]
 8003e4a:	bf14      	ite	ne
 8003e4c:	f423 0380 	bicne.w	r3, r3, #4194304	; 0x400000
 8003e50:	f443 0380 	orreq.w	r3, r3, #4194304	; 0x400000
 8003e54:	60eb      	str	r3, [r5, #12]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8003e56:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003e5a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8003e5e:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_DSIZE, DataWidth);
 8003e60:	68ab      	ldr	r3, [r5, #8]
 8003e62:	f023 031f 	bic.w	r3, r3, #31
 8003e66:	bf0c      	ite	eq
 8003e68:	f043 0307 	orreq.w	r3, r3, #7
 8003e6c:	f043 030f 	orrne.w	r3, r3, #15
 8003e70:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8003e72:	68ab      	ldr	r3, [r5, #8]
 8003e74:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8003e78:	60ab      	str	r3, [r5, #8]
	data->ctx.config = config;
 8003e7a:	f8cb 8000 	str.w	r8, [fp]
	if (SPI_WORD_SIZE_GET(config->operation) == 8) {
 8003e7e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
		spi_context_buffers_setup(&data->ctx, tx_bufs, rx_bufs, 2);
 8003e82:	464a      	mov	r2, r9
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4620      	mov	r0, r4
	if (SPI_WORD_SIZE_GET(config->operation) == 8) {
 8003e88:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8003e8c:	2b08      	cmp	r3, #8
		spi_context_buffers_setup(&data->ctx, tx_bufs, rx_bufs, 1);
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
		spi_context_buffers_setup(&data->ctx, tx_bufs, rx_bufs, 2);
 8003e92:	2302      	movne	r3, #2
 8003e94:	f017 f8fb 	bl	801b08e <spi_context_buffers_setup>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXP(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8003e98:	6973      	ldr	r3, [r6, #20]
 8003e9a:	07dd      	lsls	r5, r3, #31
 8003e9c:	f100 80d0 	bmi.w	8004040 <spi_stm32_transceive+0x408>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003ea0:	6833      	ldr	r3, [r6, #0]
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	6033      	str	r3, [r6, #0]
	z_impl_k_busy_wait(usec_to_wait);
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	f014 ff21 	bl	8018cf0 <z_impl_k_busy_wait>
	spi_stm32_cs_control(dev, true);
 8003eae:	f8da 5010 	ldr.w	r5, [sl, #16]
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 8003eb2:	6828      	ldr	r0, [r5, #0]
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	f040 80c6 	bne.w	8004046 <spi_stm32_transceive+0x40e>
	uint16_t operation = data->ctx.config->operation;
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	889a      	ldrh	r2, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8003ebe:	f012 0301 	ands.w	r3, r2, #1
 8003ec2:	f040 810c 	bne.w	80040de <spi_stm32_transceive+0x4a6>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXP(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8003ec6:	6972      	ldr	r2, [r6, #20]
 8003ec8:	0790      	lsls	r0, r2, #30
 8003eca:	d5fc      	bpl.n	8003ec6 <spi_stm32_transceive+0x28e>
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_MASTER));
 8003ecc:	68f2      	ldr	r2, [r6, #12]
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8003ece:	0251      	lsls	r1, r2, #9
 8003ed0:	f100 80c6 	bmi.w	8004060 <spi_stm32_transceive+0x428>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8003ed4:	6821      	ldr	r1, [r4, #0]
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 8003ed6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003ed8:	8889      	ldrh	r1, [r1, #4]
 8003eda:	f3c1 1145 	ubfx	r1, r1, #5, #6
 8003ede:	2908      	cmp	r1, #8
 8003ee0:	f040 80ce 	bne.w	8004080 <spi_stm32_transceive+0x448>
 8003ee4:	b112      	cbz	r2, 8003eec <spi_stm32_transceive+0x2b4>
 8003ee6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003ee8:	b101      	cbz	r1, 8003eec <spi_stm32_transceive+0x2b4>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8003eea:	7813      	ldrb	r3, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8003eec:	b2db      	uxtb	r3, r3
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8003eee:	f886 3020 	strb.w	r3, [r6, #32]
	if (!ctx->tx_len) {
 8003ef2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003ef4:	b1a3      	cbz	r3, 8003f20 <spi_stm32_transceive+0x2e8>
	ctx->tx_len -= len;
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f040 80b9 	bne.w	8004072 <spi_stm32_transceive+0x43a>
		++ctx->current_tx;
 8003f00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f02:	3308      	adds	r3, #8
 8003f04:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 8003f06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8003f12:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8003f16:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8003f1a:	f017 f8a2 	bl	801b062 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 8003f1e:	6460      	str	r0, [r4, #68]	; 0x44
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8003f20:	6973      	ldr	r3, [r6, #20]
 8003f22:	07dd      	lsls	r5, r3, #31
 8003f24:	d5fc      	bpl.n	8003f20 <spi_stm32_transceive+0x2e8>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8003f26:	6822      	ldr	r2, [r4, #0]
 8003f28:	8892      	ldrh	r2, [r2, #4]
 8003f2a:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8003f2e:	2a08      	cmp	r2, #8
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8003f30:	e9d4 3113 	ldrd	r3, r1, [r4, #76]	; 0x4c
 8003f34:	f040 80be 	bne.w	80040b4 <spi_stm32_transceive+0x47c>
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8003f38:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	b10b      	cbz	r3, 8003f44 <spi_stm32_transceive+0x30c>
 8003f40:	b101      	cbz	r1, 8003f44 <spi_stm32_transceive+0x30c>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8003f42:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8003f44:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f46:	b1a3      	cbz	r3, 8003f72 <spi_stm32_transceive+0x33a>
	ctx->rx_len -= len;
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f040 811e 	bne.w	800418e <spi_stm32_transceive+0x556>
		++ctx->current_rx;
 8003f52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003f54:	3308      	adds	r3, #8
 8003f56:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
 8003f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003f64:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8003f68:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8003f6c:	f017 f879 	bl	801b062 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 8003f70:	64e0      	str	r0, [r4, #76]	; 0x4c
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8003f72:	6973      	ldr	r3, [r6, #20]
	if (sr & SPI_STM32_ERR_MSK) {
 8003f74:	f413 7378 	ands.w	r3, r3, #992	; 0x3e0
 8003f78:	f000 8118 	beq.w	80041ac <spi_stm32_transceive+0x574>
		LOG_ERR("%s: err=%d", __func__,
 8003f7c:	466d      	mov	r5, sp
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	466a      	mov	r2, sp
 8003f82:	4998      	ldr	r1, [pc, #608]	; (80041e4 <spi_stm32_transceive+0x5ac>)
 8003f84:	6151      	str	r1, [r2, #20]
 8003f86:	4998      	ldr	r1, [pc, #608]	; (80041e8 <spi_stm32_transceive+0x5b0>)
 8003f88:	e9c2 1306 	strd	r1, r3, [r2, #24]
 8003f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f90:	8413      	strh	r3, [r2, #32]
 8003f92:	4b96      	ldr	r3, [pc, #600]	; (80041ec <spi_stm32_transceive+0x5b4>)
 8003f94:	f842 3f10 	str.w	r3, [r2, #16]!
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 8003f9e:	4894      	ldr	r0, [pc, #592]	; (80041f0 <spi_stm32_transceive+0x5b8>)
 8003fa0:	f7fd fde6 	bl	8001b70 <z_impl_z_log_msg_static_create>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8003fa4:	6973      	ldr	r3, [r6, #20]
 8003fa6:	46ad      	mov	sp, r5
 8003fa8:	065a      	lsls	r2, r3, #25
 8003faa:	d503      	bpl.n	8003fb4 <spi_stm32_transceive+0x37c>
  SET_BIT(SPIx->IFCR, SPI_IFCR_OVRC);
 8003fac:	69b3      	ldr	r3, [r6, #24]
 8003fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb2:	61b3      	str	r3, [r6, #24]
		return -EIO;
 8003fb4:	f06f 0904 	mvn.w	r9, #4
	SPI_TypeDef *spi = cfg->spi;
 8003fb8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003fbc:	f8da 8010 	ldr.w	r8, [sl, #16]
 8003fc0:	681d      	ldr	r5, [r3, #0]
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 8003fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8003fc6:	b173      	cbz	r3, 8003fe6 <spi_stm32_transceive+0x3ae>
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	b162      	cbz	r2, 8003fe6 <spi_stm32_transceive+0x3ae>
			if (!force_off &&
 8003fcc:	8899      	ldrh	r1, [r3, #4]
 8003fce:	f411 5680 	ands.w	r6, r1, #4096	; 0x1000
 8003fd2:	d108      	bne.n	8003fe6 <spi_stm32_transceive+0x3ae>
			k_busy_wait(ctx->config->cs.delay);
 8003fd4:	6918      	ldr	r0, [r3, #16]
 8003fd6:	f014 fe8b 	bl	8018cf0 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs.gpio, 0);
 8003fda:	f8d8 0000 	ldr.w	r0, [r8]
 8003fde:	4631      	mov	r1, r6
 8003fe0:	3008      	adds	r0, #8
 8003fe2:	f017 f883 	bl	801b0ec <gpio_pin_set_dt.isra.0>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8003fe6:	696b      	ldr	r3, [r5, #20]
 8003fe8:	07db      	lsls	r3, r3, #31
 8003fea:	f100 80e9 	bmi.w	80041c0 <spi_stm32_transceive+0x588>
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_MASTER));
 8003fee:	68eb      	ldr	r3, [r5, #12]
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8003ff0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
  return ((READ_BIT(SPIx->SR, SPI_SR_EOT) == (SPI_SR_EOT)) ? 1UL : 0UL);
 8003ff4:	696b      	ldr	r3, [r5, #20]
 8003ff6:	f040 80e6 	bne.w	80041c6 <spi_stm32_transceive+0x58e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8003ffa:	059e      	lsls	r6, r3, #22
 8003ffc:	d503      	bpl.n	8004006 <spi_stm32_transceive+0x3ce>
  SET_BIT(SPIx->IFCR, SPI_IFCR_MODFC);
 8003ffe:	69ab      	ldr	r3, [r5, #24]
 8004000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004004:	61ab      	str	r3, [r5, #24]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_CSTART) == (SPI_CR1_CSTART)) ? 1UL : 0UL);
 8004006:	682b      	ldr	r3, [r5, #0]
 8004008:	0598      	lsls	r0, r3, #22
 800400a:	f100 80df 	bmi.w	80041cc <spi_stm32_transceive+0x594>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800400e:	682b      	ldr	r3, [r5, #0]
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	602b      	str	r3, [r5, #0]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004016:	682b      	ldr	r3, [r5, #0]
 8004018:	07da      	lsls	r2, r3, #31
 800401a:	d4fc      	bmi.n	8004016 <spi_stm32_transceive+0x3de>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 800401c:	696b      	ldr	r3, [r5, #20]
 800401e:	07db      	lsls	r3, r3, #31
 8004020:	f100 80dc 	bmi.w	80041dc <spi_stm32_transceive+0x5a4>
  SET_BIT(SPIx->IFCR, SPI_IFCR_SUSPC);
 8004024:	69ab      	ldr	r3, [r5, #24]
 8004026:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800402a:	61ab      	str	r3, [r5, #24]
	}
	LL_SPI_ClearFlag_SUSP(spi);
#else
	LL_SPI_Disable(spi);
#endif /* st_stm32h7_spi */
}
 800402c:	e641      	b.n	8003cb2 <spi_stm32_transceive+0x7a>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 800402e:	f013 0f01 	tst.w	r3, #1
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM | SPI_CFG2_SSOE, NSS);
 8004032:	68eb      	ldr	r3, [r5, #12]
 8004034:	f023 5310 	bic.w	r3, r3, #603979776	; 0x24000000
 8004038:	bf08      	it	eq
 800403a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 800403e:	e6fe      	b.n	8003e3e <spi_stm32_transceive+0x206>
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8004040:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8004044:	e728      	b.n	8003e98 <spi_stm32_transceive+0x260>
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 8004046:	6883      	ldr	r3, [r0, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f43f af36 	beq.w	8003eba <spi_stm32_transceive+0x282>
			gpio_pin_set_dt(&ctx->config->cs.gpio, 1);
 800404e:	2101      	movs	r1, #1
 8004050:	3008      	adds	r0, #8
 8004052:	f017 f84b 	bl	801b0ec <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs.delay);
 8004056:	682b      	ldr	r3, [r5, #0]
 8004058:	6918      	ldr	r0, [r3, #16]
 800405a:	f014 fe49 	bl	8018cf0 <z_impl_k_busy_wait>
}
 800405e:	e72c      	b.n	8003eba <spi_stm32_transceive+0x282>
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 8004060:	6832      	ldr	r2, [r6, #0]
 8004062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004066:	6032      	str	r2, [r6, #0]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_CSTART) == (SPI_CR1_CSTART)) ? 1UL : 0UL);
 8004068:	6832      	ldr	r2, [r6, #0]
 800406a:	0592      	lsls	r2, r2, #22
 800406c:	f53f af32 	bmi.w	8003ed4 <spi_stm32_transceive+0x29c>
 8004070:	e7fa      	b.n	8004068 <spi_stm32_transceive+0x430>
	} else if (ctx->tx_buf) {
 8004072:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004074:	2b00      	cmp	r3, #0
 8004076:	f43f af53 	beq.w	8003f20 <spi_stm32_transceive+0x2e8>
		ctx->tx_buf += dfs * len;
 800407a:	3301      	adds	r3, #1
 800407c:	6463      	str	r3, [r4, #68]	; 0x44
 800407e:	e74f      	b.n	8003f20 <spi_stm32_transceive+0x2e8>
	return !!(ctx->tx_buf && ctx->tx_len);
 8004080:	b112      	cbz	r2, 8004088 <spi_stm32_transceive+0x450>
 8004082:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004084:	b101      	cbz	r1, 8004088 <spi_stm32_transceive+0x450>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8004086:	8813      	ldrh	r3, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spitxdr = ((__IO uint16_t *)&SPIx->TXDR);
  *spitxdr = TxData;
 8004088:	8433      	strh	r3, [r6, #32]
	if (!ctx->tx_len) {
 800408a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800408c:	2b00      	cmp	r3, #0
 800408e:	f43f af47 	beq.w	8003f20 <spi_stm32_transceive+0x2e8>
	ctx->tx_len -= len;
 8004092:	3b01      	subs	r3, #1
 8004094:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8004096:	b93b      	cbnz	r3, 80040a8 <spi_stm32_transceive+0x470>
		++ctx->current_tx;
 8004098:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800409a:	3308      	adds	r3, #8
 800409c:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 800409e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040a0:	3b01      	subs	r3, #1
 80040a2:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 80040a4:	2302      	movs	r3, #2
 80040a6:	e732      	b.n	8003f0e <spi_stm32_transceive+0x2d6>
	} else if (ctx->tx_buf) {
 80040a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f43f af38 	beq.w	8003f20 <spi_stm32_transceive+0x2e8>
		ctx->tx_buf += dfs * len;
 80040b0:	3302      	adds	r3, #2
 80040b2:	e7e3      	b.n	800407c <spi_stm32_transceive+0x444>
  return (*spirxdr);
 80040b4:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 80040b6:	b292      	uxth	r2, r2
	return !!(ctx->rx_buf && ctx->rx_len);
 80040b8:	b10b      	cbz	r3, 80040be <spi_stm32_transceive+0x486>
 80040ba:	b101      	cbz	r1, 80040be <spi_stm32_transceive+0x486>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 80040bc:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 80040be:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f43f af56 	beq.w	8003f72 <spi_stm32_transceive+0x33a>
	ctx->rx_len -= len;
 80040c6:	3b01      	subs	r3, #1
 80040c8:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d168      	bne.n	80041a0 <spi_stm32_transceive+0x568>
		++ctx->current_rx;
 80040ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040d0:	3308      	adds	r3, #8
 80040d2:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
 80040d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040d6:	3b01      	subs	r3, #1
 80040d8:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
 80040da:	2302      	movs	r3, #2
 80040dc:	e740      	b.n	8003f60 <spi_stm32_transceive+0x328>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 80040de:	6973      	ldr	r3, [r6, #20]
 80040e0:	0798      	lsls	r0, r3, #30
 80040e2:	d54f      	bpl.n	8004184 <spi_stm32_transceive+0x54c>
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 80040e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d04c      	beq.n	8004184 <spi_stm32_transceive+0x54c>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80040ea:	f3c2 1245 	ubfx	r2, r2, #5, #6
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80040ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80040f0:	2a08      	cmp	r2, #8
 80040f2:	d132      	bne.n	800415a <spi_stm32_transceive+0x522>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80040f4:	781b      	ldrb	r3, [r3, #0]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 80040f6:	f886 3020 	strb.w	r3, [r6, #32]
	if (!ctx->tx_len) {
 80040fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80040fc:	b193      	cbz	r3, 8004124 <spi_stm32_transceive+0x4ec>
	ctx->tx_len -= len;
 80040fe:	3b01      	subs	r3, #1
 8004100:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8004102:	bb23      	cbnz	r3, 800414e <spi_stm32_transceive+0x516>
		++ctx->current_tx;
 8004104:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004106:	3308      	adds	r3, #8
 8004108:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 800410a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800410c:	3b01      	subs	r3, #1
 800410e:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8004110:	2301      	movs	r3, #1
 8004112:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8004116:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800411a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800411e:	f016 ffa0 	bl	801b062 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 8004122:	6460      	str	r0, [r4, #68]	; 0x44
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8004124:	6973      	ldr	r3, [r6, #20]
 8004126:	07d9      	lsls	r1, r3, #31
 8004128:	f57f af23 	bpl.w	8003f72 <spi_stm32_transceive+0x33a>
	return !!(ctx->rx_buf && ctx->rx_len);
 800412c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800412e:	2b00      	cmp	r3, #0
 8004130:	f43f af1f 	beq.w	8003f72 <spi_stm32_transceive+0x33a>
 8004134:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004136:	2a00      	cmp	r2, #0
 8004138:	f43f af1b 	beq.w	8003f72 <spi_stm32_transceive+0x33a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800413c:	6822      	ldr	r2, [r4, #0]
 800413e:	8892      	ldrh	r2, [r2, #4]
 8004140:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8004144:	2a08      	cmp	r2, #8
 8004146:	d129      	bne.n	800419c <spi_stm32_transceive+0x564>
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8004148:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 800414c:	e6f9      	b.n	8003f42 <spi_stm32_transceive+0x30a>
	} else if (ctx->tx_buf) {
 800414e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0e7      	beq.n	8004124 <spi_stm32_transceive+0x4ec>
		ctx->tx_buf += dfs * len;
 8004154:	3301      	adds	r3, #1
 8004156:	6463      	str	r3, [r4, #68]	; 0x44
 8004158:	e7e4      	b.n	8004124 <spi_stm32_transceive+0x4ec>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800415a:	881b      	ldrh	r3, [r3, #0]
  *spitxdr = TxData;
 800415c:	8433      	strh	r3, [r6, #32]
	if (!ctx->tx_len) {
 800415e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0df      	beq.n	8004124 <spi_stm32_transceive+0x4ec>
	ctx->tx_len -= len;
 8004164:	3b01      	subs	r3, #1
 8004166:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8004168:	b93b      	cbnz	r3, 800417a <spi_stm32_transceive+0x542>
		++ctx->current_tx;
 800416a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800416c:	3308      	adds	r3, #8
 800416e:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 8004170:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004172:	3b01      	subs	r3, #1
 8004174:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8004176:	2302      	movs	r3, #2
 8004178:	e7cb      	b.n	8004112 <spi_stm32_transceive+0x4da>
	} else if (ctx->tx_buf) {
 800417a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0d1      	beq.n	8004124 <spi_stm32_transceive+0x4ec>
		ctx->tx_buf += dfs * len;
 8004180:	3302      	adds	r3, #2
 8004182:	e7e8      	b.n	8004156 <spi_stm32_transceive+0x51e>
  CLEAR_BIT(SPIx->IER, SPI_IER_TXPIE);
 8004184:	6933      	ldr	r3, [r6, #16]
 8004186:	f023 0302 	bic.w	r3, r3, #2
 800418a:	6133      	str	r3, [r6, #16]
}
 800418c:	e7ca      	b.n	8004124 <spi_stm32_transceive+0x4ec>
	} else if (ctx->rx_buf) {
 800418e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004190:	2b00      	cmp	r3, #0
 8004192:	f43f aeee 	beq.w	8003f72 <spi_stm32_transceive+0x33a>
		ctx->rx_buf += dfs * len;
 8004196:	3301      	adds	r3, #1
 8004198:	64e3      	str	r3, [r4, #76]	; 0x4c
 800419a:	e6ea      	b.n	8003f72 <spi_stm32_transceive+0x33a>
  return (*spirxdr);
 800419c:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800419e:	e78d      	b.n	80040bc <spi_stm32_transceive+0x484>
	} else if (ctx->rx_buf) {
 80041a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f43f aee5 	beq.w	8003f72 <spi_stm32_transceive+0x33a>
		ctx->rx_buf += dfs * len;
 80041a8:	3302      	adds	r3, #2
 80041aa:	e7f5      	b.n	8004198 <spi_stm32_transceive+0x560>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 80041ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f47f ae83 	bne.w	8003eba <spi_stm32_transceive+0x282>
 80041b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f47f ae7f 	bne.w	8003eba <spi_stm32_transceive+0x282>
		ret = spi_stm32_shift_frames(spi, data);
 80041bc:	4699      	mov	r9, r3
 80041be:	e6fb      	b.n	8003fb8 <spi_stm32_transceive+0x380>
  return (*((__IO uint8_t *)&SPIx->RXDR));
 80041c0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80041c4:	e70f      	b.n	8003fe6 <spi_stm32_transceive+0x3ae>
  return ((READ_BIT(SPIx->SR, SPI_SR_EOT) == (SPI_SR_EOT)) ? 1UL : 0UL);
 80041c6:	f013 0f08 	tst.w	r3, #8
 80041ca:	e713      	b.n	8003ff4 <spi_stm32_transceive+0x3bc>
  SET_BIT(SPIx->CR1, SPI_CR1_CSUSP);
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041d2:	602b      	str	r3, [r5, #0]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_CSTART) == (SPI_CR1_CSTART)) ? 1UL : 0UL);
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	0599      	lsls	r1, r3, #22
 80041d8:	d4fc      	bmi.n	80041d4 <spi_stm32_transceive+0x59c>
 80041da:	e718      	b.n	800400e <spi_stm32_transceive+0x3d6>
  return (*((__IO uint8_t *)&SPIx->RXDR));
 80041dc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80041e0:	e71c      	b.n	800401c <spi_stm32_transceive+0x3e4>
 80041e2:	bf00      	nop
 80041e4:	0802a9d3 	.word	0x0802a9d3
 80041e8:	0802a9de 	.word	0x0802a9de
 80041ec:	01000004 	.word	0x01000004
 80041f0:	080289ec 	.word	0x080289ec

080041f4 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 80041f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 80041f8:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 80041fa:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 80041fc:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 80041fe:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8004200:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8004204:	4b08      	ldr	r3, [pc, #32]	; (8004228 <elapsed+0x34>)
 8004206:	4909      	ldr	r1, [pc, #36]	; (800422c <elapsed+0x38>)
 8004208:	d101      	bne.n	800420e <elapsed+0x1a>
	    || (val1 < val2)) {
 800420a:	4282      	cmp	r2, r0
 800420c:	d206      	bcs.n	800421c <elapsed+0x28>
		overflow_cyc += last_load;
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	680c      	ldr	r4, [r1, #0]
 8004212:	4422      	add	r2, r4
 8004214:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8004216:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800421a:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	680a      	ldr	r2, [r1, #0]
 8004220:	4413      	add	r3, r2
}
 8004222:	1a18      	subs	r0, r3, r0
 8004224:	bd10      	pop	{r4, pc}
 8004226:	bf00      	nop
 8004228:	24001140 	.word	0x24001140
 800422c:	24001144 	.word	0x24001144

08004230 <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004230:	4b09      	ldr	r3, [pc, #36]	; (8004258 <sys_clock_driver_init+0x28>)
 8004232:	2210      	movs	r2, #16
static int sys_clock_driver_init(void)
{

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
 8004234:	2000      	movs	r0, #0
 8004236:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
 800423a:	f24d 62d7 	movw	r2, #54999	; 0xd6d7
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <sys_clock_driver_init+0x2c>)
 8004240:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8004242:	4b07      	ldr	r3, [pc, #28]	; (8004260 <sys_clock_driver_init+0x30>)
 8004244:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8004246:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800424a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800424c:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	f042 0207 	orr.w	r2, r2, #7
 8004254:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00
 800425c:	24001144 	.word	0x24001144
 8004260:	24001140 	.word	0x24001140

08004264 <sys_clock_isr>:
{
 8004264:	b510      	push	{r4, lr}
	elapsed();
 8004266:	f7ff ffc5 	bl	80041f4 <elapsed>
	cycle_count += overflow_cyc;
 800426a:	4910      	ldr	r1, [pc, #64]	; (80042ac <sys_clock_isr+0x48>)
 800426c:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <sys_clock_isr+0x4c>)
 800426e:	6808      	ldr	r0, [r1, #0]
 8004270:	e9d3 4200 	ldrd	r4, r2, [r3]
 8004274:	1900      	adds	r0, r0, r4
 8004276:	f142 0200 	adc.w	r2, r2, #0
 800427a:	e9c3 0200 	strd	r0, r2, [r3]
		dcycles = cycle_count - announced_cycles;
 800427e:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <sys_clock_isr+0x50>)
	overflow_cyc = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	600b      	str	r3, [r1, #0]
		dticks = dcycles / CYC_PER_TICK;
 8004284:	f24d 63d8 	movw	r3, #55000	; 0xd6d8
		dcycles = cycle_count - announced_cycles;
 8004288:	e9d2 4100 	ldrd	r4, r1, [r2]
 800428c:	1b00      	subs	r0, r0, r4
		dticks = dcycles / CYC_PER_TICK;
 800428e:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 8004292:	4343      	muls	r3, r0
 8004294:	191b      	adds	r3, r3, r4
 8004296:	f141 0100 	adc.w	r1, r1, #0
 800429a:	e9c2 3100 	strd	r3, r1, [r2]
		sys_clock_announce(dticks);
 800429e:	f015 fbad 	bl	80199fc <sys_clock_announce>
}
 80042a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_arm_int_exit();
 80042a6:	f7fe b8c3 	b.w	8002430 <z_arm_exc_exit>
 80042aa:	bf00      	nop
 80042ac:	24001140 	.word	0x24001140
 80042b0:	240006a8 	.word	0x240006a8
 80042b4:	240006a0 	.word	0x240006a0

080042b8 <sys_clock_set_timeout>:
{
 80042b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042bc:	4f38      	ldr	r7, [pc, #224]	; (80043a0 <sys_clock_set_timeout+0xe8>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 80042be:	2900      	cmp	r1, #0
 80042c0:	d05e      	beq.n	8004380 <sys_clock_set_timeout+0xc8>
 80042c2:	1c42      	adds	r2, r0, #1
 80042c4:	d10a      	bne.n	80042dc <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80042c6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80042ca:	6913      	ldr	r3, [r2, #16]
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 80042d2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80042d6:	603b      	str	r3, [r7, #0]
}
 80042d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 80042dc:	683e      	ldr	r6, [r7, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80042de:	2801      	cmp	r0, #1
 80042e0:	dd54      	ble.n	800438c <sys_clock_set_timeout+0xd4>
 80042e2:	f5b0 7f98 	cmp.w	r0, #304	; 0x130
 80042e6:	dc54      	bgt.n	8004392 <sys_clock_set_timeout+0xda>
 80042e8:	f100 38ff 	add.w	r8, r0, #4294967295
	__asm__ volatile(
 80042ec:	f04f 0310 	mov.w	r3, #16
 80042f0:	f3ef 8511 	mrs	r5, BASEPRI
 80042f4:	f383 8812 	msr	BASEPRI_MAX, r3
 80042f8:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 80042fc:	f7ff ff7a 	bl	80041f4 <elapsed>
	val1 = SysTick->VAL;
 8004300:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	cycle_count += pending;
 8004304:	4927      	ldr	r1, [pc, #156]	; (80043a4 <sys_clock_set_timeout+0xec>)
	val1 = SysTick->VAL;
 8004306:	699a      	ldr	r2, [r3, #24]
	cycle_count += pending;
 8004308:	e9d1 4300 	ldrd	r4, r3, [r1]
 800430c:	1900      	adds	r0, r0, r4
	overflow_cyc = 0U;
 800430e:	f04f 0400 	mov.w	r4, #0
	cycle_count += pending;
 8004312:	f143 0300 	adc.w	r3, r3, #0
 8004316:	e9c1 0300 	strd	r0, r3, [r1]
	overflow_cyc = 0U;
 800431a:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <sys_clock_set_timeout+0xf0>)
 800431c:	601c      	str	r4, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800431e:	4b23      	ldr	r3, [pc, #140]	; (80043ac <sys_clock_set_timeout+0xf4>)
 8004320:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8004322:	1ac4      	subs	r4, r0, r3
 8004324:	d438      	bmi.n	8004398 <sys_clock_set_timeout+0xe0>
		delay = ticks * CYC_PER_TICK;
 8004326:	f24d 6cd8 	movw	ip, #55000	; 0xd6d8
		delay -= unannounced;
 800432a:	1a18      	subs	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
 800432c:	f640 536d 	movw	r3, #3437	; 0xd6d
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
 8004330:	fb0c 4408 	mla	r4, ip, r8, r4
 8004334:	f504 4456 	add.w	r4, r4, #54784	; 0xd600
 8004338:	34d7      	adds	r4, #215	; 0xd7
 800433a:	fbb4 f4fc 	udiv	r4, r4, ip
		delay -= unannounced;
 800433e:	fb0c 0004 	mla	r0, ip, r4, r0
		delay = MAX(delay, MIN_DELAY);
 8004342:	4298      	cmp	r0, r3
 8004344:	d928      	bls.n	8004398 <sys_clock_set_timeout+0xe0>
		if (delay > MAX_CYCLES) {
 8004346:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <sys_clock_set_timeout+0xf8>)
 8004348:	4298      	cmp	r0, r3
 800434a:	bf28      	it	cs
 800434c:	4618      	movcs	r0, r3
		last_load = MIN_DELAY;
 800434e:	6038      	str	r0, [r7, #0]
	val2 = SysTick->VAL;
 8004350:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8004354:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
 8004356:	699c      	ldr	r4, [r3, #24]
	SysTick->LOAD = last_load - 1;
 8004358:	6158      	str	r0, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800435a:	2000      	movs	r0, #0
	if (val1 < val2) {
 800435c:	42a2      	cmp	r2, r4
	SysTick->VAL = 0; /* resets timer to last_load */
 800435e:	6198      	str	r0, [r3, #24]
	if (val1 < val2) {
 8004360:	eba2 0304 	sub.w	r3, r2, r4
		cycle_count += (val1 - val2);
 8004364:	e9d1 0200 	ldrd	r0, r2, [r1]
		cycle_count += (val1 + (last_load_ - val2));
 8004368:	bf38      	it	cc
 800436a:	199b      	addcc	r3, r3, r6
		cycle_count += (val1 - val2);
 800436c:	181b      	adds	r3, r3, r0
 800436e:	f142 0200 	adc.w	r2, r2, #0
 8004372:	e9c1 3200 	strd	r3, r2, [r1]
	__asm__ volatile(
 8004376:	f385 8811 	msr	BASEPRI, r5
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	e7ab      	b.n	80042d8 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8004380:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8004382:	683e      	ldr	r6, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8004384:	d1ab      	bne.n	80042de <sys_clock_set_timeout+0x26>
 8004386:	f44f 7098 	mov.w	r0, #304	; 0x130
 800438a:	e7ad      	b.n	80042e8 <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800438c:	f04f 0800 	mov.w	r8, #0
 8004390:	e7ac      	b.n	80042ec <sys_clock_set_timeout+0x34>
 8004392:	f44f 7898 	mov.w	r8, #304	; 0x130
 8004396:	e7a9      	b.n	80042ec <sys_clock_set_timeout+0x34>
 8004398:	f640 506d 	movw	r0, #3437	; 0xd6d
 800439c:	e7d7      	b.n	800434e <sys_clock_set_timeout+0x96>
 800439e:	bf00      	nop
 80043a0:	24001144 	.word	0x24001144
 80043a4:	240006a8 	.word	0x240006a8
 80043a8:	24001140 	.word	0x24001140
 80043ac:	240006a0 	.word	0x240006a0
 80043b0:	00ff2080 	.word	0x00ff2080

080043b4 <sys_clock_elapsed>:
{
 80043b4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80043b6:	f04f 0310 	mov.w	r3, #16
 80043ba:	f3ef 8511 	mrs	r5, BASEPRI
 80043be:	f383 8812 	msr	BASEPRI_MAX, r3
 80043c2:	f3bf 8f6f 	isb	sy
	uint32_t unannounced = cycle_count - announced_cycles;
 80043c6:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <sys_clock_elapsed+0x34>)
 80043c8:	681c      	ldr	r4, [r3, #0]
 80043ca:	4b08      	ldr	r3, [pc, #32]	; (80043ec <sys_clock_elapsed+0x38>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	1ae4      	subs	r4, r4, r3
	uint32_t cyc = elapsed() + unannounced;
 80043d0:	f7ff ff10 	bl	80041f4 <elapsed>
	__asm__ volatile(
 80043d4:	f385 8811 	msr	BASEPRI, r5
 80043d8:	f3bf 8f6f 	isb	sy
}
 80043dc:	f24d 63d8 	movw	r3, #55000	; 0xd6d8
	uint32_t cyc = elapsed() + unannounced;
 80043e0:	4420      	add	r0, r4
}
 80043e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	240006a8 	.word	0x240006a8
 80043ec:	240006a0 	.word	0x240006a0

080043f0 <sys_clock_cycle_get_32>:
{
 80043f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80043f2:	f04f 0310 	mov.w	r3, #16
 80043f6:	f3ef 8511 	mrs	r5, BASEPRI
 80043fa:	f383 8812 	msr	BASEPRI_MAX, r3
 80043fe:	f3bf 8f6f 	isb	sy
	uint32_t ret = cycle_count;
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <sys_clock_cycle_get_32+0x28>)
 8004404:	681c      	ldr	r4, [r3, #0]
	ret += elapsed();
 8004406:	f7ff fef5 	bl	80041f4 <elapsed>
	__asm__ volatile(
 800440a:	f385 8811 	msr	BASEPRI, r5
 800440e:	f3bf 8f6f 	isb	sy
}
 8004412:	4420      	add	r0, r4
 8004414:	bd38      	pop	{r3, r4, r5, pc}
 8004416:	bf00      	nop
 8004418:	240006a8 	.word	0x240006a8

0800441c <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */



  /* Frequency cannot be equal to 0 */
  if (HCLK_Frequency == 0U)
 800441c:	4602      	mov	r2, r0
{
 800441e:	b510      	push	{r4, lr}
  if (HCLK_Frequency == 0U)
 8004420:	b178      	cbz	r0, 8004442 <LL_SetFlashLatency+0x26>
  return (uint32_t)(READ_BIT(PWR->D3CR, PWR_D3CR_VOS));
 8004422:	494f      	ldr	r1, [pc, #316]	; (8004560 <LL_SetFlashLatency+0x144>)
 8004424:	698b      	ldr	r3, [r1, #24]
    status = ERROR;
  }
  else
  {
#if (STM32H7_DEV_ID == 0x480UL) || (STM32H7_DEV_ID == 0x483UL)
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE0)
 8004426:	f413 4340 	ands.w	r3, r3, #49152	; 0xc000
 800442a:	d13f      	bne.n	80044ac <LL_SetFlashLatency+0x90>
        /* 176 < HCLK <= 220 => 4WS (5 CPU cycles) */
        latency = LL_FLASH_LATENCY_4;
      }
      else if((HCLK_Frequency > UTILS_SCALE0_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE0_LATENCY3_FREQ))
#elif (STM32H7_DEV_ID == 0x483UL)
      if((HCLK_Frequency > UTILS_SCALE0_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE0_LATENCY3_FREQ))
 800442c:	484d      	ldr	r0, [pc, #308]	; (8004564 <LL_SetFlashLatency+0x148>)
 800442e:	4c4e      	ldr	r4, [pc, #312]	; (8004568 <LL_SetFlashLatency+0x14c>)
 8004430:	4410      	add	r0, r2
 8004432:	42a0      	cmp	r0, r4
 8004434:	d207      	bcs.n	8004446 <LL_SetFlashLatency+0x2a>
 8004436:	698b      	ldr	r3, [r1, #24]
 8004438:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        /* 126 < HCLK <= 168 => 3WS (4 CPU cycles) */
        latency = LL_FLASH_LATENCY_3;
      }
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
#else
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800443c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004440:	d151      	bne.n	80044e6 <LL_SetFlashLatency+0xca>
    status = ERROR;
 8004442:	2001      	movs	r0, #1
 8004444:	e07c      	b.n	8004540 <LL_SetFlashLatency+0x124>
      else if((HCLK_Frequency > UTILS_SCALE0_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE0_LATENCY2_FREQ))
 8004446:	4849      	ldr	r0, [pc, #292]	; (800456c <LL_SetFlashLatency+0x150>)
 8004448:	4c49      	ldr	r4, [pc, #292]	; (8004570 <LL_SetFlashLatency+0x154>)
 800444a:	4410      	add	r0, r2
 800444c:	42a0      	cmp	r0, r4
 800444e:	d946      	bls.n	80044de <LL_SetFlashLatency+0xc2>
      else if((HCLK_Frequency > UTILS_SCALE0_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE0_LATENCY1_FREQ))
 8004450:	4848      	ldr	r0, [pc, #288]	; (8004574 <LL_SetFlashLatency+0x158>)
 8004452:	4410      	add	r0, r2
 8004454:	42a0      	cmp	r0, r4
 8004456:	d944      	bls.n	80044e2 <LL_SetFlashLatency+0xc6>
      else if(HCLK_Frequency <= UTILS_SCALE0_LATENCY0_FREQ)
 8004458:	4847      	ldr	r0, [pc, #284]	; (8004578 <LL_SetFlashLatency+0x15c>)
 800445a:	4282      	cmp	r2, r0
 800445c:	6988      	ldr	r0, [r1, #24]
 800445e:	f400 4040 	and.w	r0, r0, #49152	; 0xc000
 8004462:	d907      	bls.n	8004474 <LL_SetFlashLatency+0x58>
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8004464:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8004468:	d0eb      	beq.n	8004442 <LL_SetFlashLatency+0x26>
 800446a:	6989      	ldr	r1, [r1, #24]
        status = ERROR;
 800446c:	2001      	movs	r0, #1
 800446e:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8004472:	e04c      	b.n	800450e <LL_SetFlashLatency+0xf2>
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8004474:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8004478:	d145      	bne.n	8004506 <LL_SetFlashLatency+0xea>
#endif /* STM32H7_DEV_ID == 0x480UL || STM32H7_DEV_ID == 0x483UL */
      {
        /* 140 < HCLK <= 210 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY1_FREQ))
 800447a:	4b40      	ldr	r3, [pc, #256]	; (800457c <LL_SetFlashLatency+0x160>)
 800447c:	4413      	add	r3, r2
 800447e:	4a40      	ldr	r2, [pc, #256]	; (8004580 <LL_SetFlashLatency+0x164>)
 8004480:	4293      	cmp	r3, r2
 8004482:	bf8c      	ite	hi
 8004484:	2300      	movhi	r3, #0
 8004486:	2301      	movls	r3, #1
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004488:	493e      	ldr	r1, [pc, #248]	; (8004584 <LL_SetFlashLatency+0x168>)
 800448a:	680a      	ldr	r2, [r1, #0]
 800448c:	f022 020f 	bic.w	r2, r2, #15
 8004490:	431a      	orrs	r2, r3
 8004492:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004494:	680a      	ldr	r2, [r1, #0]
 8004496:	f002 020f 	and.w	r2, r2, #15
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      } while ((getlatency != latency) && (timeout > 0U));
 800449a:	429a      	cmp	r2, r3
 800449c:	d05e      	beq.n	800455c <LL_SetFlashLatency+0x140>
 800449e:	6808      	ldr	r0, [r1, #0]
 80044a0:	f000 000f 	and.w	r0, r0, #15

      if(getlatency != latency)
 80044a4:	1ac0      	subs	r0, r0, r3
 80044a6:	bf18      	it	ne
 80044a8:	2001      	movne	r0, #1
 80044aa:	e049      	b.n	8004540 <LL_SetFlashLatency+0x124>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80044ac:	2300      	movs	r3, #0
 80044ae:	482c      	ldr	r0, [pc, #176]	; (8004560 <LL_SetFlashLatency+0x144>)
 80044b0:	6981      	ldr	r1, [r0, #24]
 80044b2:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 80044b6:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 80044ba:	d12b      	bne.n	8004514 <LL_SetFlashLatency+0xf8>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
 80044bc:	4932      	ldr	r1, [pc, #200]	; (8004588 <LL_SetFlashLatency+0x16c>)
 80044be:	4833      	ldr	r0, [pc, #204]	; (800458c <LL_SetFlashLatency+0x170>)
 80044c0:	4411      	add	r1, r2
 80044c2:	4281      	cmp	r1, r0
 80044c4:	d946      	bls.n	8004554 <LL_SetFlashLatency+0x138>
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY1_FREQ))
 80044c6:	492d      	ldr	r1, [pc, #180]	; (800457c <LL_SetFlashLatency+0x160>)
 80044c8:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
 80044cc:	4411      	add	r1, r2
 80044ce:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
 80044d2:	4281      	cmp	r1, r0
 80044d4:	d940      	bls.n	8004558 <LL_SetFlashLatency+0x13c>
      else if(HCLK_Frequency <= UTILS_SCALE1_LATENCY0_FREQ)
 80044d6:	492e      	ldr	r1, [pc, #184]	; (8004590 <LL_SetFlashLatency+0x174>)
 80044d8:	428a      	cmp	r2, r1
 80044da:	d9d5      	bls.n	8004488 <LL_SetFlashLatency+0x6c>
 80044dc:	e7b1      	b.n	8004442 <LL_SetFlashLatency+0x26>
        latency = LL_FLASH_LATENCY_2;
 80044de:	2302      	movs	r3, #2
 80044e0:	e7e5      	b.n	80044ae <LL_SetFlashLatency+0x92>
        latency = LL_FLASH_LATENCY_1;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e7e3      	b.n	80044ae <LL_SetFlashLatency+0x92>
 80044e6:	698b      	ldr	r3, [r1, #24]
  ErrorStatus status = SUCCESS;
 80044e8:	2000      	movs	r0, #0
 80044ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80044ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        latency = LL_FLASH_LATENCY_3;
 80044f2:	f04f 0303 	mov.w	r3, #3
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80044f6:	d019      	beq.n	800452c <LL_SetFlashLatency+0x110>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
 80044f8:	4926      	ldr	r1, [pc, #152]	; (8004594 <LL_SetFlashLatency+0x178>)
 80044fa:	4c27      	ldr	r4, [pc, #156]	; (8004598 <LL_SetFlashLatency+0x17c>)
 80044fc:	4411      	add	r1, r2
 80044fe:	42a1      	cmp	r1, r4
 8004500:	d926      	bls.n	8004550 <LL_SetFlashLatency+0x134>
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 8004502:	4926      	ldr	r1, [pc, #152]	; (800459c <LL_SetFlashLatency+0x180>)
 8004504:	e018      	b.n	8004538 <LL_SetFlashLatency+0x11c>
 8004506:	6989      	ldr	r1, [r1, #24]
  ErrorStatus status = SUCCESS;
 8004508:	4618      	mov	r0, r3
 800450a:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 800450e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004512:	e7f0      	b.n	80044f6 <LL_SetFlashLatency+0xda>
 8004514:	6981      	ldr	r1, [r0, #24]
 8004516:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 800451a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800451e:	d110      	bne.n	8004542 <LL_SetFlashLatency+0x126>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY2_FREQ))
 8004520:	491f      	ldr	r1, [pc, #124]	; (80045a0 <LL_SetFlashLatency+0x184>)
 8004522:	4820      	ldr	r0, [pc, #128]	; (80045a4 <LL_SetFlashLatency+0x188>)
 8004524:	4411      	add	r1, r2
 8004526:	4281      	cmp	r1, r0
 8004528:	d914      	bls.n	8004554 <LL_SetFlashLatency+0x138>
 800452a:	2000      	movs	r0, #0
      else if((HCLK_Frequency > UTILS_SCALE2_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY1_FREQ))
 800452c:	491e      	ldr	r1, [pc, #120]	; (80045a8 <LL_SetFlashLatency+0x18c>)
 800452e:	4c1d      	ldr	r4, [pc, #116]	; (80045a4 <LL_SetFlashLatency+0x188>)
 8004530:	4411      	add	r1, r2
 8004532:	42a1      	cmp	r1, r4
 8004534:	d90c      	bls.n	8004550 <LL_SetFlashLatency+0x134>
      else if(HCLK_Frequency <= UTILS_SCALE2_LATENCY0_FREQ)
 8004536:	491d      	ldr	r1, [pc, #116]	; (80045ac <LL_SetFlashLatency+0x190>)
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 8004538:	428a      	cmp	r2, r1
 800453a:	d882      	bhi.n	8004442 <LL_SetFlashLatency+0x26>
    if(status == SUCCESS)
 800453c:	2800      	cmp	r0, #0
 800453e:	d0a3      	beq.n	8004488 <LL_SetFlashLatency+0x6c>
      }
    }
  }

  return status;
}
 8004540:	bd10      	pop	{r4, pc}
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY2_FREQ))
 8004542:	490c      	ldr	r1, [pc, #48]	; (8004574 <LL_SetFlashLatency+0x158>)
 8004544:	481a      	ldr	r0, [pc, #104]	; (80045b0 <LL_SetFlashLatency+0x194>)
 8004546:	4411      	add	r1, r2
 8004548:	4281      	cmp	r1, r0
 800454a:	d303      	bcc.n	8004554 <LL_SetFlashLatency+0x138>
 800454c:	2000      	movs	r0, #0
 800454e:	e7d3      	b.n	80044f8 <LL_SetFlashLatency+0xdc>
        latency = LL_FLASH_LATENCY_1;
 8004550:	2301      	movs	r3, #1
 8004552:	e7f3      	b.n	800453c <LL_SetFlashLatency+0x120>
        latency = LL_FLASH_LATENCY_2;
 8004554:	2302      	movs	r3, #2
 8004556:	e797      	b.n	8004488 <LL_SetFlashLatency+0x6c>
        latency = LL_FLASH_LATENCY_1;
 8004558:	2301      	movs	r3, #1
 800455a:	e795      	b.n	8004488 <LL_SetFlashLatency+0x6c>
 800455c:	4618      	mov	r0, r3
 800455e:	e7a1      	b.n	80044a4 <LL_SetFlashLatency+0x88>
 8004560:	58024800 	.word	0x58024800
 8004564:	f37ba77f 	.word	0xf37ba77f
 8004568:	03dfd240 	.word	0x03dfd240
 800456c:	f7a7c4ff 	.word	0xf7a7c4ff
 8004570:	042c1d7f 	.word	0x042c1d7f
 8004574:	fbd3e27f 	.word	0xfbd3e27f
 8004578:	042c1d80 	.word	0x042c1d80
 800457c:	fc01a93f 	.word	0xfc01a93f
 8004580:	03ef147f 	.word	0x03ef147f
 8004584:	52002000 	.word	0x52002000
 8004588:	f81294bf 	.word	0xf81294bf
 800458c:	03fe56bf 	.word	0x03fe56bf
 8004590:	03fe56c0 	.word	0x03fe56c0
 8004594:	fde9f13f 	.word	0xfde9f13f
 8004598:	02160ebf 	.word	0x02160ebf
 800459c:	02160ec0 	.word	0x02160ec0
 80045a0:	fa0a1eff 	.word	0xfa0a1eff
 80045a4:	02faf07f 	.word	0x02faf07f
 80045a8:	fd050f7f 	.word	0xfd050f7f
 80045ac:	02faf080 	.word	0x02faf080
 80045b0:	00e4e1c0 	.word	0x00e4e1c0

080045b4 <event_send_core>:

    return &obj->spec_attr->event_dsc[id];
}

static lv_res_t event_send_core(lv_event_t * e)
{
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	4604      	mov	r4, r0
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 80045b8:	f000 f8f6 	bl	80047a8 <lv_indev_get_act>
    if(indev_act) {
 80045bc:	b9b8      	cbnz	r0, 80045ee <event_send_core+0x3a>
        if(e->stop_processing) return LV_RES_OK;
        if(e->deleted) return LV_RES_INV;
    }

    lv_res_t res = LV_RES_OK;
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 80045be:	6863      	ldr	r3, [r4, #4]
 80045c0:	2100      	movs	r1, #0
 80045c2:	6898      	ldr	r0, [r3, #8]

    uint32_t i = 0;
 80045c4:	460e      	mov	r6, r1
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 80045c6:	f016 fdf1 	bl	801b1ac <lv_obj_get_event_dsc.isra.0>
 80045ca:	4605      	mov	r5, r0
    while(event_dsc && res == LV_RES_OK) {
 80045cc:	b9e5      	cbnz	r5, 8004608 <event_send_core+0x54>

        i++;
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
    }

    res = lv_obj_event_base(NULL, e);
 80045ce:	4621      	mov	r1, r4
 80045d0:	4628      	mov	r0, r5
 80045d2:	f016 fdf8 	bl	801b1c6 <lv_obj_event_base>

    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 80045d6:	4602      	mov	r2, r0
 80045d8:	b198      	cbz	r0, 8004602 <event_send_core+0x4e>
 80045da:	6863      	ldr	r3, [r4, #4]
 80045dc:	4629      	mov	r1, r5
 80045de:	6898      	ldr	r0, [r3, #8]
 80045e0:	f016 fde4 	bl	801b1ac <lv_obj_get_event_dsc.isra.0>

    i = 0;
    while(event_dsc && res == LV_RES_OK) {
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d144      	bne.n	8004672 <event_send_core+0xbe>

        i++;
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
    }

    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 80045e8:	2a01      	cmp	r2, #1
 80045ea:	d04f      	beq.n	800468c <event_send_core+0xd8>
 80045ec:	e00a      	b.n	8004604 <event_send_core+0x50>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 80045ee:	6800      	ldr	r0, [r0, #0]
 80045f0:	6883      	ldr	r3, [r0, #8]
 80045f2:	b10b      	cbz	r3, 80045f8 <event_send_core+0x44>
 80045f4:	7a21      	ldrb	r1, [r4, #8]
 80045f6:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 80045f8:	7e23      	ldrb	r3, [r4, #24]
 80045fa:	0798      	lsls	r0, r3, #30
 80045fc:	d45f      	bmi.n	80046be <event_send_core+0x10a>
        if(e->deleted) return LV_RES_INV;
 80045fe:	07d9      	lsls	r1, r3, #31
 8004600:	d5dd      	bpl.n	80045be <event_send_core+0xa>
 8004602:	2200      	movs	r2, #0
        res = event_send_core(e);
        if(res != LV_RES_OK) return LV_RES_INV;
    }

    return res;
}
 8004604:	4610      	mov	r0, r2
 8004606:	bd70      	pop	{r4, r5, r6, pc}
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8004608:	682b      	ldr	r3, [r5, #0]
 800460a:	b93b      	cbnz	r3, 800461c <event_send_core+0x68>
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 800460c:	6863      	ldr	r3, [r4, #4]
        i++;
 800460e:	3601      	adds	r6, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004610:	6898      	ldr	r0, [r3, #8]
 8004612:	4631      	mov	r1, r6
 8004614:	f016 fdca 	bl	801b1ac <lv_obj_get_event_dsc.isra.0>
 8004618:	4605      	mov	r5, r0
 800461a:	e7d7      	b.n	80045cc <event_send_core+0x18>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 800461c:	f995 2008 	ldrsb.w	r2, [r5, #8]
 8004620:	7a2b      	ldrb	r3, [r5, #8]
 8004622:	2a00      	cmp	r2, #0
 8004624:	daf2      	bge.n	800460c <event_send_core+0x58>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	d004      	beq.n	8004634 <event_send_core+0x80>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 800462a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800462e:	7a22      	ldrb	r2, [r4, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004630:	4293      	cmp	r3, r2
 8004632:	d1eb      	bne.n	800460c <event_send_core+0x58>
            e->user_data = event_dsc->user_data;
 8004634:	686b      	ldr	r3, [r5, #4]
            event_dsc->cb(e);
 8004636:	4620      	mov	r0, r4
            e->user_data = event_dsc->user_data;
 8004638:	60e3      	str	r3, [r4, #12]
            event_dsc->cb(e);
 800463a:	682b      	ldr	r3, [r5, #0]
 800463c:	4798      	blx	r3
            if(e->stop_processing) return LV_RES_OK;
 800463e:	7e23      	ldrb	r3, [r4, #24]
 8004640:	079a      	lsls	r2, r3, #30
 8004642:	d43c      	bmi.n	80046be <event_send_core+0x10a>
            if(e->deleted) return LV_RES_INV;
 8004644:	07db      	lsls	r3, r3, #31
 8004646:	d5e1      	bpl.n	800460c <event_send_core+0x58>
 8004648:	e7db      	b.n	8004602 <event_send_core+0x4e>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 800464a:	f990 2008 	ldrsb.w	r2, [r0, #8]
 800464e:	7a03      	ldrb	r3, [r0, #8]
 8004650:	2a00      	cmp	r2, #0
 8004652:	db13      	blt.n	800467c <event_send_core+0xc8>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8004654:	b113      	cbz	r3, 800465c <event_send_core+0xa8>
 8004656:	7a22      	ldrb	r2, [r4, #8]
 8004658:	429a      	cmp	r2, r3
 800465a:	d10f      	bne.n	800467c <event_send_core+0xc8>
            e->user_data = event_dsc->user_data;
 800465c:	6843      	ldr	r3, [r0, #4]
 800465e:	60e3      	str	r3, [r4, #12]
            event_dsc->cb(e);
 8004660:	6803      	ldr	r3, [r0, #0]
 8004662:	4620      	mov	r0, r4
 8004664:	4798      	blx	r3
            if(e->stop_processing) return LV_RES_OK;
 8004666:	7e23      	ldrb	r3, [r4, #24]
 8004668:	079e      	lsls	r6, r3, #30
 800466a:	d428      	bmi.n	80046be <event_send_core+0x10a>
            if(e->deleted) return LV_RES_INV;
 800466c:	07d8      	lsls	r0, r3, #31
 800466e:	d505      	bpl.n	800467c <event_send_core+0xc8>
 8004670:	e7c7      	b.n	8004602 <event_send_core+0x4e>
    while(event_dsc && res == LV_RES_OK) {
 8004672:	2a01      	cmp	r2, #1
 8004674:	d1c6      	bne.n	8004604 <event_send_core+0x50>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8004676:	6803      	ldr	r3, [r0, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e6      	bne.n	800464a <event_send_core+0x96>
        i++;
 800467c:	3501      	adds	r5, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 800467e:	6863      	ldr	r3, [r4, #4]
 8004680:	4629      	mov	r1, r5
 8004682:	6898      	ldr	r0, [r3, #8]
 8004684:	f016 fd92 	bl	801b1ac <lv_obj_get_event_dsc.isra.0>
    while(event_dsc && res == LV_RES_OK) {
 8004688:	2800      	cmp	r0, #0
 800468a:	d1f4      	bne.n	8004676 <event_send_core+0xc2>
    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 800468c:	6860      	ldr	r0, [r4, #4]
 800468e:	6843      	ldr	r3, [r0, #4]
 8004690:	b1ab      	cbz	r3, 80046be <event_send_core+0x10a>

static bool event_is_bubbled(lv_event_t * e)
{
    if(e->stop_bubbling) return false;
 8004692:	7e23      	ldrb	r3, [r4, #24]
 8004694:	0759      	lsls	r1, r3, #29
 8004696:	d412      	bmi.n	80046be <event_send_core+0x10a>

    /*Event codes that always bubble*/
    switch(e->code) {
 8004698:	7a23      	ldrb	r3, [r4, #8]
 800469a:	3b23      	subs	r3, #35	; 0x23
 800469c:	2b01      	cmp	r3, #1
 800469e:	d910      	bls.n	80046c2 <event_send_core+0x10e>
        default:
            break;
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 80046a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046a4:	f017 f9b2 	bl	801ba0c <lv_obj_has_flag>
 80046a8:	b148      	cbz	r0, 80046be <event_send_core+0x10a>

    switch(e->code) {
 80046aa:	7a23      	ldrb	r3, [r4, #8]
 80046ac:	3b11      	subs	r3, #17
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b1b      	cmp	r3, #27
 80046b2:	d806      	bhi.n	80046c2 <event_send_core+0x10e>
 80046b4:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <event_send_core+0x124>)
 80046b6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ba:	07da      	lsls	r2, r3, #31
 80046bc:	d501      	bpl.n	80046c2 <event_send_core+0x10e>
        if(e->stop_processing) return LV_RES_OK;
 80046be:	2201      	movs	r2, #1
 80046c0:	e7a0      	b.n	8004604 <event_send_core+0x50>
        e->current_target = e->current_target->parent;
 80046c2:	6863      	ldr	r3, [r4, #4]
        res = event_send_core(e);
 80046c4:	4620      	mov	r0, r4
        e->current_target = e->current_target->parent;
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	6063      	str	r3, [r4, #4]
        res = event_send_core(e);
 80046ca:	f7ff ff73 	bl	80045b4 <event_send_core>
        if(res != LV_RES_OK) return LV_RES_INV;
 80046ce:	1e43      	subs	r3, r0, #1
 80046d0:	425a      	negs	r2, r3
 80046d2:	415a      	adcs	r2, r3
 80046d4:	e796      	b.n	8004604 <event_send_core+0x50>
 80046d6:	bf00      	nop
 80046d8:	0b0f27ff 	.word	0x0b0f27ff

080046dc <lv_event_send>:
{
 80046dc:	b510      	push	{r4, lr}
 80046de:	b088      	sub	sp, #32
    if(obj == NULL) return LV_RES_OK;
 80046e0:	b1b8      	cbz	r0, 8004712 <lv_event_send+0x36>
    e.user_data = NULL;
 80046e2:	2300      	movs	r3, #0
    e.prev = event_head;
 80046e4:	4c0c      	ldr	r4, [pc, #48]	; (8004718 <lv_event_send+0x3c>)
    e.code = event_code;
 80046e6:	f88d 100c 	strb.w	r1, [sp, #12]
    e.param = param;
 80046ea:	e9cd 3204 	strd	r3, r2, [sp, #16]
    e.deleted = 0;
 80046ee:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80046f2:	f023 0307 	bic.w	r3, r3, #7
    e.current_target = obj;
 80046f6:	e9cd 0001 	strd	r0, r0, [sp, #4]
    e.deleted = 0;
 80046fa:	f88d 301c 	strb.w	r3, [sp, #28]
    event_head = &e;
 80046fe:	a801      	add	r0, sp, #4
    e.prev = event_head;
 8004700:	6823      	ldr	r3, [r4, #0]
    event_head = &e;
 8004702:	6020      	str	r0, [r4, #0]
    e.prev = event_head;
 8004704:	9306      	str	r3, [sp, #24]
    lv_res_t res = event_send_core(&e);
 8004706:	f7ff ff55 	bl	80045b4 <event_send_core>
    event_head = e.prev;
 800470a:	9b06      	ldr	r3, [sp, #24]
 800470c:	6023      	str	r3, [r4, #0]
}
 800470e:	b008      	add	sp, #32
 8004710:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 8004712:	2001      	movs	r0, #1
 8004714:	e7fb      	b.n	800470e <lv_event_send+0x32>
 8004716:	bf00      	nop
 8004718:	24001148 	.word	0x24001148

0800471c <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
 800471c:	4b07      	ldr	r3, [pc, #28]	; (800473c <_lv_event_mark_deleted+0x20>)
 800471e:	681b      	ldr	r3, [r3, #0]
    while(e) {
 8004720:	b903      	cbnz	r3, 8004724 <_lv_event_mark_deleted+0x8>
}
 8004722:	4770      	bx	lr
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	4282      	cmp	r2, r0
 8004728:	d002      	beq.n	8004730 <_lv_event_mark_deleted+0x14>
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4282      	cmp	r2, r0
 800472e:	d103      	bne.n	8004738 <_lv_event_mark_deleted+0x1c>
 8004730:	7e1a      	ldrb	r2, [r3, #24]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	761a      	strb	r2, [r3, #24]
        e = e->prev;
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	e7f1      	b.n	8004720 <_lv_event_mark_deleted+0x4>
 800473c:	24001148 	.word	0x24001148

08004740 <_lv_group_init>:
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_group_init(void)
{
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8004740:	2120      	movs	r1, #32
 8004742:	4801      	ldr	r0, [pc, #4]	; (8004748 <_lv_group_init+0x8>)
 8004744:	f020 b948 	b.w	80249d8 <_lv_ll_init>
 8004748:	240013c8 	.word	0x240013c8

0800474c <lv_group_get_default>:
}

lv_group_t * lv_group_get_default(void)
{
    return default_group;
}
 800474c:	4b01      	ldr	r3, [pc, #4]	; (8004754 <lv_group_get_default+0x8>)
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	2400114c 	.word	0x2400114c

08004758 <lv_group_focus_next>:
        }
    }
}

void lv_group_focus_next(lv_group_t * group)
{
 8004758:	b510      	push	{r4, lr}
 800475a:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 800475c:	4a06      	ldr	r2, [pc, #24]	; (8004778 <lv_group_focus_next+0x20>)
 800475e:	4907      	ldr	r1, [pc, #28]	; (800477c <lv_group_focus_next+0x24>)
 8004760:	f016 fdd9 	bl	801b316 <focus_next_core>
    if(group->edge_cb) {
 8004764:	6963      	ldr	r3, [r4, #20]
 8004766:	b12b      	cbz	r3, 8004774 <lv_group_focus_next+0x1c>
        if(!focus_changed)
 8004768:	b920      	cbnz	r0, 8004774 <lv_group_focus_next+0x1c>
            group->edge_cb(group, true);
 800476a:	4620      	mov	r0, r4
 800476c:	2101      	movs	r1, #1
    }
}
 800476e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            group->edge_cb(group, true);
 8004772:	4718      	bx	r3
}
 8004774:	bd10      	pop	{r4, pc}
 8004776:	bf00      	nop
 8004778:	08024ad9 	.word	0x08024ad9
 800477c:	08024acd 	.word	0x08024acd

08004780 <lv_group_focus_prev>:

void lv_group_focus_prev(lv_group_t * group)
{
 8004780:	b510      	push	{r4, lr}
 8004782:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 8004784:	4906      	ldr	r1, [pc, #24]	; (80047a0 <lv_group_focus_prev+0x20>)
 8004786:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <lv_group_focus_prev+0x24>)
 8004788:	f016 fdc5 	bl	801b316 <focus_next_core>
    if(group->edge_cb) {
 800478c:	6963      	ldr	r3, [r4, #20]
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 800478e:	4601      	mov	r1, r0
    if(group->edge_cb) {
 8004790:	b123      	cbz	r3, 800479c <lv_group_focus_prev+0x1c>
        if(!focus_changed)
 8004792:	b918      	cbnz	r0, 800479c <lv_group_focus_prev+0x1c>
            group->edge_cb(group, false);
 8004794:	4620      	mov	r0, r4
    }
}
 8004796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            group->edge_cb(group, false);
 800479a:	4718      	bx	r3
}
 800479c:	bd10      	pop	{r4, pc}
 800479e:	bf00      	nop
 80047a0:	08024ad3 	.word	0x08024ad3
 80047a4:	08024ae1 	.word	0x08024ae1

080047a8 <lv_indev_get_act>:
}

lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
}
 80047a8:	4b01      	ldr	r3, [pc, #4]	; (80047b0 <lv_indev_get_act+0x8>)
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	24001154 	.word	0x24001154

080047b4 <lv_indev_reset>:

    return indev->driver->type;
}

void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	460d      	mov	r5, r1
    if(indev) {
 80047b8:	4604      	mov	r4, r0
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d03e      	beq.n	800483c <lv_indev_reset+0x88>
        indev->proc.reset_query = 1;
 80047be:	7943      	ldrb	r3, [r0, #5]
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	7143      	strb	r3, [r0, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 80047c6:	4b21      	ldr	r3, [pc, #132]	; (800484c <lv_indev_reset+0x98>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4283      	cmp	r3, r0
 80047cc:	bf02      	ittt	eq
 80047ce:	4b20      	ldreq	r3, [pc, #128]	; (8004850 <lv_indev_reset+0x9c>)
 80047d0:	2200      	moveq	r2, #0
 80047d2:	601a      	streq	r2, [r3, #0]
        if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 80047d4:	6803      	ldr	r3, [r0, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	3b01      	subs	r3, #1
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d812      	bhi.n	8004804 <lv_indev_reset+0x50>
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 80047de:	b921      	cbnz	r1, 80047ea <lv_indev_reset+0x36>
                indev->proc.types.pointer.last_pressed = NULL;
 80047e0:	6341      	str	r1, [r0, #52]	; 0x34
            }
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
                indev->proc.types.pointer.act_obj = NULL;
 80047e2:	6281      	str	r1, [r0, #40]	; 0x28
            }
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
                indev->proc.types.pointer.last_obj = NULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047e8:	e00c      	b.n	8004804 <lv_indev_reset+0x50>
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 80047ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047ec:	428b      	cmp	r3, r1
                indev->proc.types.pointer.last_pressed = NULL;
 80047ee:	bf04      	itt	eq
 80047f0:	2300      	moveq	r3, #0
 80047f2:	6343      	streq	r3, [r0, #52]	; 0x34
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 80047f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80047f6:	428b      	cmp	r3, r1
                indev->proc.types.pointer.act_obj = NULL;
 80047f8:	bf04      	itt	eq
 80047fa:	2300      	moveq	r3, #0
 80047fc:	6283      	streq	r3, [r0, #40]	; 0x28
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 80047fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004800:	428b      	cmp	r3, r1
 8004802:	d0ef      	beq.n	80047e4 <lv_indev_reset+0x30>
            }
            i = lv_indev_get_next(i);
        }
        indev_obj_act = NULL;
    }
}
 8004804:	bd38      	pop	{r3, r4, r5, pc}
            i->proc.reset_query = 1;
 8004806:	7943      	ldrb	r3, [r0, #5]
 8004808:	f043 0302 	orr.w	r3, r3, #2
 800480c:	7143      	strb	r3, [r0, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 800480e:	6803      	ldr	r3, [r0, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	3b01      	subs	r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	d811      	bhi.n	800483c <lv_indev_reset+0x88>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8004818:	b91d      	cbnz	r5, 8004822 <lv_indev_reset+0x6e>
                    i->proc.types.pointer.last_pressed = NULL;
 800481a:	6345      	str	r5, [r0, #52]	; 0x34
                    i->proc.types.pointer.act_obj = NULL;
 800481c:	6285      	str	r5, [r0, #40]	; 0x28
                    i->proc.types.pointer.last_obj = NULL;
 800481e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8004820:	e00c      	b.n	800483c <lv_indev_reset+0x88>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8004822:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004824:	42ab      	cmp	r3, r5
                    i->proc.types.pointer.last_pressed = NULL;
 8004826:	bf04      	itt	eq
 8004828:	2300      	moveq	r3, #0
 800482a:	6343      	streq	r3, [r0, #52]	; 0x34
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 800482c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800482e:	42ab      	cmp	r3, r5
                    i->proc.types.pointer.act_obj = NULL;
 8004830:	bf04      	itt	eq
 8004832:	2300      	moveq	r3, #0
 8004834:	6283      	streq	r3, [r0, #40]	; 0x28
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 8004836:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004838:	42ab      	cmp	r3, r5
 800483a:	d0f0      	beq.n	800481e <lv_indev_reset+0x6a>
            i = lv_indev_get_next(i);
 800483c:	f00d fc64 	bl	8012108 <lv_indev_get_next>
        while(i) {
 8004840:	2800      	cmp	r0, #0
 8004842:	d1e0      	bne.n	8004806 <lv_indev_reset+0x52>
        indev_obj_act = NULL;
 8004844:	4b02      	ldr	r3, [pc, #8]	; (8004850 <lv_indev_reset+0x9c>)
 8004846:	6018      	str	r0, [r3, #0]
}
 8004848:	e7dc      	b.n	8004804 <lv_indev_reset+0x50>
 800484a:	bf00      	nop
 800484c:	24001154 	.word	0x24001154
 8004850:	24001150 	.word	0x24001150

08004854 <lv_indev_get_obj_act>:
}

lv_obj_t * lv_indev_get_obj_act(void)
{
    return indev_obj_act;
}
 8004854:	4b01      	ldr	r3, [pc, #4]	; (800485c <lv_indev_get_obj_act+0x8>)
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	24001150 	.word	0x24001150

08004860 <lv_obj_draw>:
        obj->spec_attr = NULL;
    }
}

static void lv_obj_draw(lv_event_t * e)
{
 8004860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004864:	4605      	mov	r5, r0
 8004866:	b0a4      	sub	sp, #144	; 0x90
    lv_event_code_t code = lv_event_get_code(e);
 8004868:	f016 fcc7 	bl	801b1fa <lv_event_get_code>
 800486c:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 800486e:	4628      	mov	r0, r5
 8004870:	f016 fcbf 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_COVER_CHECK) {
 8004874:	2e12      	cmp	r6, #18
    lv_obj_t * obj = lv_event_get_target(e);
 8004876:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 8004878:	d14b      	bne.n	8004912 <lv_obj_draw+0xb2>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 800487a:	4628      	mov	r0, r5
 800487c:	f016 fcc1 	bl	801b202 <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 8004880:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8004882:	4605      	mov	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 8004884:	2b02      	cmp	r3, #2
 8004886:	d008      	beq.n	800489a <lv_obj_draw+0x3a>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8004888:	2217      	movs	r2, #23
 800488a:	2100      	movs	r1, #0
 800488c:	4620      	mov	r0, r4
 800488e:	f019 f8f7 	bl	801da80 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8004892:	4606      	mov	r6, r0
 8004894:	b120      	cbz	r0, 80048a0 <lv_obj_draw+0x40>
            info->res = LV_COVER_RES_MASKED;
 8004896:	2302      	movs	r3, #2
        coords.x2 += w;
        coords.y1 -= h;
        coords.y2 += h;

        if(_lv_area_is_in(info->area, &coords, r) == false) {
            info->res = LV_COVER_RES_NOT_COVER;
 8004898:	702b      	strb	r3, [r5, #0]

            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
        }
    }
}
 800489a:	b024      	add	sp, #144	; 0x90
 800489c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 80048a0:	4601      	mov	r1, r0
 80048a2:	220b      	movs	r2, #11
 80048a4:	4620      	mov	r0, r4
 80048a6:	f019 f8eb 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80048aa:	2268      	movs	r2, #104	; 0x68
    return (lv_coord_t)v.num;
 80048ac:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80048b0:	4631      	mov	r1, r6
 80048b2:	4620      	mov	r0, r4
 80048b4:	f019 f8e4 	bl	801da80 <lv_obj_get_style_prop>
 80048b8:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80048ba:	2269      	movs	r2, #105	; 0x69
 80048bc:	4631      	mov	r1, r6
 80048be:	4620      	mov	r0, r4
 80048c0:	f019 f8de 	bl	801da80 <lv_obj_get_style_prop>
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
    dest->y1 = src->y1;
 80048c4:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 80048c8:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
        coords.x1 -= w;
 80048cc:	b2bb      	uxth	r3, r7
    dest->y2 = src->y2;
 80048ce:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
        coords.y1 -= h;
 80048d2:	b280      	uxth	r0, r0
        coords.x1 -= w;
 80048d4:	8aa1      	ldrh	r1, [r4, #20]
        coords.y1 -= h;
 80048d6:	1a12      	subs	r2, r2, r0
        coords.y2 += h;
 80048d8:	4460      	add	r0, ip
        coords.x1 -= w;
 80048da:	1ac9      	subs	r1, r1, r3
        coords.x2 += w;
 80048dc:	4473      	add	r3, lr
        coords.y1 -= h;
 80048de:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80048e2:	4642      	mov	r2, r8
        coords.x1 -= w;
 80048e4:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80048e8:	a912      	add	r1, sp, #72	; 0x48
        coords.x2 += w;
 80048ea:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        coords.y2 += h;
 80048ee:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80048f2:	6868      	ldr	r0, [r5, #4]
 80048f4:	f01f fdbc 	bl	8024470 <_lv_area_is_in>
 80048f8:	b908      	cbnz	r0, 80048fe <lv_obj_draw+0x9e>
            info->res = LV_COVER_RES_NOT_COVER;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e7cc      	b.n	8004898 <lv_obj_draw+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80048fe:	2221      	movs	r2, #33	; 0x21
 8004900:	4631      	mov	r1, r6
 8004902:	4620      	mov	r0, r4
 8004904:	f019 f8bc 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004908:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 800490a:	28fc      	cmp	r0, #252	; 0xfc
 800490c:	d9f5      	bls.n	80048fa <lv_obj_draw+0x9a>
        info->res = LV_COVER_RES_COVER;
 800490e:	702e      	strb	r6, [r5, #0]
 8004910:	e7c3      	b.n	800489a <lv_obj_draw+0x3a>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8004912:	2e15      	cmp	r6, #21
 8004914:	f040 8086 	bne.w	8004a24 <lv_obj_draw+0x1c4>
        lv_draw_rect_dsc_init(&draw_dsc);
 8004918:	af04      	add	r7, sp, #16
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800491a:	4628      	mov	r0, r5
 800491c:	f016 fcc2 	bl	801b2a4 <lv_event_get_draw_ctx>
 8004920:	4606      	mov	r6, r0
        lv_draw_rect_dsc_init(&draw_dsc);
 8004922:	4638      	mov	r0, r7
 8004924:	f004 f80a 	bl	800893c <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8004928:	2234      	movs	r2, #52	; 0x34
 800492a:	2100      	movs	r1, #0
 800492c:	4620      	mov	r0, r4
 800492e:	f019 f8a7 	bl	801da80 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8004932:	b128      	cbz	r0, 8004940 <lv_obj_draw+0xe0>
            draw_dsc.border_post = 1;
 8004934:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8004940:	463a      	mov	r2, r7
 8004942:	2100      	movs	r1, #0
 8004944:	4620      	mov	r0, r4
        part_dsc.draw_area = &coords;
 8004946:	f10d 0808 	add.w	r8, sp, #8
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 800494a:	f017 faa1 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800494e:	2268      	movs	r2, #104	; 0x68
 8004950:	2100      	movs	r1, #0
 8004952:	4620      	mov	r0, r4
 8004954:	f019 f894 	bl	801da80 <lv_obj_get_style_prop>
 8004958:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 800495a:	2269      	movs	r2, #105	; 0x69
 800495c:	2100      	movs	r1, #0
 800495e:	4620      	mov	r0, r4
 8004960:	f019 f88e 	bl	801da80 <lv_obj_get_style_prop>
 8004964:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
    dest->y1 = src->y1;
 8004968:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
        coords.x1 -= w;
 800496c:	b2ab      	uxth	r3, r5
 800496e:	8aa1      	ldrh	r1, [r4, #20]
        coords.y1 -= h;
 8004970:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 8004972:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 8004976:	2500      	movs	r5, #0
        coords.y1 -= h;
 8004978:	1a12      	subs	r2, r2, r0
        coords.x1 -= w;
 800497a:	1ac9      	subs	r1, r1, r3
        coords.y2 += h;
 800497c:	4460      	add	r0, ip
        coords.x2 += w;
 800497e:	4473      	add	r3, lr
        coords.x1 -= w;
 8004980:	f8ad 1008 	strh.w	r1, [sp, #8]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8004984:	4631      	mov	r1, r6
        coords.y2 += h;
 8004986:	f8ad 000e 	strh.w	r0, [sp, #14]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 800498a:	a812      	add	r0, sp, #72	; 0x48
        coords.x2 += w;
 800498c:	f8ad 300c 	strh.w	r3, [sp, #12]
        coords.y1 -= h;
 8004990:	f8ad 200a 	strh.w	r2, [sp, #10]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8004994:	f017 fd72 	bl	801c47c <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 8004998:	4bc1      	ldr	r3, [pc, #772]	; (8004ca0 <lv_obj_draw+0x440>)
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 800499a:	aa12      	add	r2, sp, #72	; 0x48
 800499c:	211a      	movs	r1, #26
 800499e:	4620      	mov	r0, r4
        part_dsc.class_p = MY_CLASS;
 80049a0:	9313      	str	r3, [sp, #76]	; 0x4c
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 80049a2:	9514      	str	r5, [sp, #80]	; 0x50
        part_dsc.rect_dsc = &draw_dsc;
 80049a4:	9716      	str	r7, [sp, #88]	; 0x58
        part_dsc.draw_area = &coords;
 80049a6:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
        part_dsc.part = LV_PART_MAIN;
 80049aa:	951f      	str	r5, [sp, #124]	; 0x7c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80049ac:	f7ff fe96 	bl	80046dc <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 80049b0:	2217      	movs	r2, #23
 80049b2:	4629      	mov	r1, r5
 80049b4:	4620      	mov	r0, r4
 80049b6:	f019 f863 	bl	801da80 <lv_obj_get_style_prop>
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 80049ba:	b368      	cbz	r0, 8004a18 <lv_obj_draw+0x1b8>
 80049bc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80049c0:	b353      	cbz	r3, 8004a18 <lv_obj_draw+0x1b8>
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 80049c2:	4642      	mov	r2, r8
 80049c4:	4639      	mov	r1, r7
 80049c6:	4630      	mov	r0, r6
        const void * bg_img_src = draw_dsc.bg_img_src;
 80049c8:	f8dd a020 	ldr.w	sl, [sp, #32]
            draw_dsc.bg_img_src = NULL;
 80049cc:	9508      	str	r5, [sp, #32]
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 80049ce:	f01a fcea 	bl	801f3a6 <lv_draw_rect>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 80049d2:	2018      	movs	r0, #24
 80049d4:	f00d febc 	bl	8012750 <lv_mem_buf_get>
 80049d8:	4681      	mov	r9, r0
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 80049da:	f104 0114 	add.w	r1, r4, #20
 80049de:	462b      	mov	r3, r5
 80049e0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80049e4:	f003 fda4 	bl	8008530 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 80049e8:	f504 7190 	add.w	r1, r4, #288	; 0x120
 80049ec:	4648      	mov	r0, r9
 80049ee:	f003 fc27 	bl	8008240 <lv_draw_mask_add>
            if(bg_img_src) {
 80049f2:	f1ba 0f00 	cmp.w	sl, #0
 80049f6:	d105      	bne.n	8004a04 <lv_obj_draw+0x1a4>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80049f8:	aa12      	add	r2, sp, #72	; 0x48
 80049fa:	211b      	movs	r1, #27
 80049fc:	4620      	mov	r0, r4
 80049fe:	f7ff fe6d 	bl	80046dc <lv_event_send>
 8004a02:	e74a      	b.n	800489a <lv_obj_draw+0x3a>
                draw_dsc.bg_opa = LV_OPA_TRANSP;
 8004a04:	f88d 5013 	strb.w	r5, [sp, #19]
                draw_dsc.border_opa = LV_OPA_TRANSP;
 8004a08:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
                draw_dsc.outline_opa = LV_OPA_TRANSP;
 8004a0c:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
                draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8004a10:	f88d 5046 	strb.w	r5, [sp, #70]	; 0x46
                draw_dsc.bg_img_src = bg_img_src;
 8004a14:	f8cd a020 	str.w	sl, [sp, #32]
                lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8004a18:	4642      	mov	r2, r8
 8004a1a:	4639      	mov	r1, r7
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	f01a fcc2 	bl	801f3a6 <lv_draw_rect>
 8004a22:	e7e9      	b.n	80049f8 <lv_obj_draw+0x198>
    else if(code == LV_EVENT_DRAW_POST) {
 8004a24:	2e18      	cmp	r6, #24
 8004a26:	f47f af38 	bne.w	800489a <lv_obj_draw+0x3a>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f016 fc3a 	bl	801b2a4 <lv_event_get_draw_ctx>
static void draw_scrollbar(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx)
{

    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8004a30:	aa02      	add	r2, sp, #8
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8004a32:	4606      	mov	r6, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8004a34:	4669      	mov	r1, sp
 8004a36:	4620      	mov	r0, r4
 8004a38:	f018 fb65 	bl	801d106 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8004a3c:	4668      	mov	r0, sp
 8004a3e:	f01f fbea 	bl	8024216 <lv_area_get_size>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	f000 80bc 	beq.w	8004bc0 <lv_obj_draw+0x360>
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
    lv_draw_rect_dsc_init(dsc);
 8004a48:	ad04      	add	r5, sp, #16
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f003 ff76 	bl	800893c <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8004a50:	2221      	movs	r2, #33	; 0x21
 8004a52:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004a56:	4620      	mov	r0, r4
 8004a58:	f019 f812 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004a5c:	b2c0      	uxtb	r0, r0
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
    if(dsc->bg_opa > LV_OPA_MIN) {
 8004a5e:	2802      	cmp	r0, #2
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 8004a60:	f88d 0013 	strb.w	r0, [sp, #19]
    if(dsc->bg_opa > LV_OPA_MIN) {
 8004a64:	d907      	bls.n	8004a76 <lv_obj_draw+0x216>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8004a66:	2220      	movs	r2, #32
 8004a68:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f019 f807 	bl	801da80 <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8004a72:	f8ad 0014 	strh.w	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8004a76:	2231      	movs	r2, #49	; 0x31
 8004a78:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f018 ffff 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004a82:	b2c0      	uxtb	r0, r0
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
    if(dsc->border_opa > LV_OPA_MIN) {
 8004a84:	2802      	cmp	r0, #2
    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 8004a86:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    if(dsc->border_opa > LV_OPA_MIN) {
 8004a8a:	d913      	bls.n	8004ab4 <lv_obj_draw+0x254>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004a8c:	2232      	movs	r2, #50	; 0x32
 8004a8e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004a92:	4620      	mov	r0, r4
 8004a94:	f018 fff4 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004a98:	b200      	sxth	r0, r0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
        if(dsc->border_width > 0) {
 8004a9a:	2800      	cmp	r0, #0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 8004a9c:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
        if(dsc->border_width > 0) {
 8004aa0:	f340 80f5 	ble.w	8004c8e <lv_obj_draw+0x42e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8004aa4:	2230      	movs	r2, #48	; 0x30
 8004aa6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f018 ffe8 	bl	801da80 <lv_obj_get_style_prop>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 8004ab0:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8004ab4:	2245      	movs	r2, #69	; 0x45
 8004ab6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004aba:	4620      	mov	r0, r4
 8004abc:	f018 ffe0 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004ac0:	b2c0      	uxtb	r0, r0
        }
    }

#if LV_DRAW_COMPLEX
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8004ac2:	2802      	cmp	r0, #2
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 8004ac4:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8004ac8:	d91b      	bls.n	8004b02 <lv_obj_draw+0x2a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8004aca:	2240      	movs	r2, #64	; 0x40
 8004acc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f018 ffd5 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004ad6:	b200      	sxth	r0, r0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
        if(dsc->shadow_width > 0) {
 8004ad8:	2800      	cmp	r0, #0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 8004ada:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
        if(dsc->shadow_width > 0) {
 8004ade:	f340 80da 	ble.w	8004c96 <lv_obj_draw+0x436>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8004ae2:	2243      	movs	r2, #67	; 0x43
 8004ae4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f018 ffc9 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8004aee:	2244      	movs	r2, #68	; 0x44
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 8004af0:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 8004af4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004af8:	4620      	mov	r0, r4
 8004afa:	f018 ffc1 	bl	801da80 <lv_obj_get_style_prop>
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8004afe:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
    return (bool)v.num;
}

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8004b02:	2260      	movs	r2, #96	; 0x60
 8004b04:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f018 ffb9 	bl	801da80 <lv_obj_get_style_prop>
            dsc->shadow_opa = LV_OPA_TRANSP;
        }
    }

    lv_opa_t opa = lv_obj_get_style_opa(obj, LV_PART_SCROLLBAR);
    if(opa < LV_OPA_MAX) {
 8004b0e:	b2c0      	uxtb	r0, r0
 8004b10:	28fc      	cmp	r0, #252	; 0xfc
 8004b12:	d80b      	bhi.n	8004b2c <lv_obj_draw+0x2cc>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 8004b14:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004b18:	4343      	muls	r3, r0
 8004b1a:	121b      	asrs	r3, r3, #8
 8004b1c:	f88d 3013 	strb.w	r3, [sp, #19]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 8004b20:	4343      	muls	r3, r0
 8004b22:	0a1b      	lsrs	r3, r3, #8
 8004b24:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 8004b28:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    }

    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 8004b2c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8004b30:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	d046      	beq.n	8004bcc <lv_obj_draw+0x36c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8004b3e:	220b      	movs	r2, #11
 8004b40:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004b44:	4620      	mov	r0, r4
 8004b46:	f018 ff9b 	bl	801da80 <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8004b4a:	4631      	mov	r1, r6
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 8004b4c:	f8ad 0010 	strh.w	r0, [sp, #16]
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8004b50:	a812      	add	r0, sp, #72	; 0x48
 8004b52:	f017 fc93 	bl	801c47c <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 8004b56:	4b52      	ldr	r3, [pc, #328]	; (8004ca0 <lv_obj_draw+0x440>)
    if(lv_area_get_size(&hor_area) > 0) {
 8004b58:	4668      	mov	r0, sp
    part_dsc.rect_dsc = &draw_dsc;
 8004b5a:	9516      	str	r5, [sp, #88]	; 0x58
    part_dsc.class_p = MY_CLASS;
 8004b5c:	9313      	str	r3, [sp, #76]	; 0x4c
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	9314      	str	r3, [sp, #80]	; 0x50
    part_dsc.part = LV_PART_SCROLLBAR;
 8004b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b66:	931f      	str	r3, [sp, #124]	; 0x7c
    if(lv_area_get_size(&hor_area) > 0) {
 8004b68:	f01f fb55 	bl	8024216 <lv_area_get_size>
 8004b6c:	b180      	cbz	r0, 8004b90 <lv_obj_draw+0x330>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004b6e:	aa12      	add	r2, sp, #72	; 0x48
 8004b70:	211a      	movs	r1, #26
 8004b72:	4620      	mov	r0, r4
        part_dsc.draw_area = &hor_area;
 8004b74:	f8cd d054 	str.w	sp, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004b78:	f7ff fdb0 	bl	80046dc <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 8004b7c:	466a      	mov	r2, sp
 8004b7e:	4629      	mov	r1, r5
 8004b80:	4630      	mov	r0, r6
 8004b82:	f01a fc10 	bl	801f3a6 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8004b86:	aa12      	add	r2, sp, #72	; 0x48
 8004b88:	211b      	movs	r1, #27
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f7ff fda6 	bl	80046dc <lv_event_send>
    if(lv_area_get_size(&ver_area) > 0) {
 8004b90:	a802      	add	r0, sp, #8
 8004b92:	f01f fb40 	bl	8024216 <lv_area_get_size>
 8004b96:	b1c8      	cbz	r0, 8004bcc <lv_obj_draw+0x36c>
        part_dsc.draw_area = &ver_area;
 8004b98:	ab02      	add	r3, sp, #8
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004b9a:	aa12      	add	r2, sp, #72	; 0x48
 8004b9c:	211a      	movs	r1, #26
 8004b9e:	4620      	mov	r0, r4
        part_dsc.draw_area = &ver_area;
 8004ba0:	9315      	str	r3, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004ba2:	f7ff fd9b 	bl	80046dc <lv_event_send>
        part_dsc.draw_area = &ver_area;
 8004ba6:	ab02      	add	r3, sp, #8
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 8004ba8:	4629      	mov	r1, r5
 8004baa:	4630      	mov	r0, r6
 8004bac:	461a      	mov	r2, r3
        part_dsc.draw_area = &ver_area;
 8004bae:	9315      	str	r3, [sp, #84]	; 0x54
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 8004bb0:	f01a fbf9 	bl	801f3a6 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8004bb4:	aa12      	add	r2, sp, #72	; 0x48
 8004bb6:	211b      	movs	r1, #27
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f7ff fd8f 	bl	80046dc <lv_event_send>
 8004bbe:	e005      	b.n	8004bcc <lv_obj_draw+0x36c>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8004bc0:	a802      	add	r0, sp, #8
 8004bc2:	f01f fb28 	bl	8024216 <lv_area_get_size>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	f47f af3e 	bne.w	8004a48 <lv_obj_draw+0x1e8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8004bcc:	2217      	movs	r2, #23
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f018 ff55 	bl	801da80 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8004bd6:	b150      	cbz	r0, 8004bee <lv_obj_draw+0x38e>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8004bd8:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8004bdc:	f003 fb78 	bl	80082d0 <lv_draw_mask_remove_custom>
            if(param) {
 8004be0:	4605      	mov	r5, r0
 8004be2:	b120      	cbz	r0, 8004bee <lv_obj_draw+0x38e>
                lv_draw_mask_free_param(param);
 8004be4:	f01a fb9e 	bl	801f324 <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 8004be8:	4628      	mov	r0, r5
 8004bea:	f00d fdfb 	bl	80127e4 <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8004bee:	2234      	movs	r2, #52	; 0x34
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f018 ff44 	bl	801da80 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	f43f ae4e 	beq.w	800489a <lv_obj_draw+0x3a>
            lv_draw_rect_dsc_init(&draw_dsc);
 8004bfe:	f10d 0810 	add.w	r8, sp, #16
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8004c02:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
 8004c04:	4640      	mov	r0, r8
 8004c06:	f003 fe99 	bl	800893c <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8004c0a:	4642      	mov	r2, r8
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8004c10:	f88d 5013 	strb.w	r5, [sp, #19]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 8004c14:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 8004c18:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8004c1c:	f88d 5046 	strb.w	r5, [sp, #70]	; 0x46
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8004c20:	f017 f936 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8004c24:	2268      	movs	r2, #104	; 0x68
 8004c26:	4629      	mov	r1, r5
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f018 ff29 	bl	801da80 <lv_obj_get_style_prop>
 8004c2e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004c30:	2269      	movs	r2, #105	; 0x69
 8004c32:	4629      	mov	r1, r5
 8004c34:	4620      	mov	r0, r4
 8004c36:	f018 ff23 	bl	801da80 <lv_obj_get_style_prop>
    dest->y2 = src->y2;
 8004c3a:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
    dest->y1 = src->y1;
 8004c3e:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
            coords.x1 -= w;
 8004c42:	b2bb      	uxth	r3, r7
 8004c44:	8aa1      	ldrh	r1, [r4, #20]
            coords.y1 -= h;
 8004c46:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 8004c48:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
 8004c4c:	1a12      	subs	r2, r2, r0
            coords.x1 -= w;
 8004c4e:	1ac9      	subs	r1, r1, r3
            coords.y2 += h;
 8004c50:	4460      	add	r0, ip
            coords.x2 += w;
 8004c52:	4473      	add	r3, lr
            coords.x1 -= w;
 8004c54:	f8ad 1008 	strh.w	r1, [sp, #8]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8004c58:	4631      	mov	r1, r6
            coords.y2 += h;
 8004c5a:	f8ad 000e 	strh.w	r0, [sp, #14]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8004c5e:	a812      	add	r0, sp, #72	; 0x48
            coords.x2 += w;
 8004c60:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.y1 -= h;
 8004c64:	f8ad 200a 	strh.w	r2, [sp, #10]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8004c68:	f017 fc08 	bl	801c47c <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <lv_obj_draw+0x440>)
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004c6e:	aa12      	add	r2, sp, #72	; 0x48
 8004c70:	211a      	movs	r1, #26
 8004c72:	4620      	mov	r0, r4
            part_dsc.class_p = MY_CLASS;
 8004c74:	9313      	str	r3, [sp, #76]	; 0x4c
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 8004c76:	2301      	movs	r3, #1
            part_dsc.rect_dsc = &draw_dsc;
 8004c78:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 8004c7c:	9314      	str	r3, [sp, #80]	; 0x50
            part_dsc.draw_area = &coords;
 8004c7e:	ab02      	add	r3, sp, #8
            part_dsc.part = LV_PART_MAIN;
 8004c80:	951f      	str	r5, [sp, #124]	; 0x7c
            part_dsc.draw_area = &coords;
 8004c82:	9315      	str	r3, [sp, #84]	; 0x54
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004c84:	f7ff fd2a 	bl	80046dc <lv_event_send>
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8004c88:	aa02      	add	r2, sp, #8
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	e6c6      	b.n	8004a1c <lv_obj_draw+0x1bc>
            dsc->border_opa = LV_OPA_TRANSP;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8004c94:	e70e      	b.n	8004ab4 <lv_obj_draw+0x254>
            dsc->shadow_opa = LV_OPA_TRANSP;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8004c9c:	e731      	b.n	8004b02 <lv_obj_draw+0x2a2>
 8004c9e:	bf00      	nop
 8004ca0:	08028db8 	.word	0x08028db8

08004ca4 <lv_init>:
{
 8004ca4:	b510      	push	{r4, lr}
    if(lv_initialized) {
 8004ca6:	4c11      	ldr	r4, [pc, #68]	; (8004cec <lv_init+0x48>)
 8004ca8:	7823      	ldrb	r3, [r4, #0]
 8004caa:	b9f3      	cbnz	r3, 8004cea <lv_init+0x46>
    lv_mem_init();
 8004cac:	f00d fcf2 	bl	8012694 <lv_mem_init>
    _lv_timer_core_init();
 8004cb0:	f00d fe88 	bl	80129c4 <_lv_timer_core_init>
    _lv_fs_init();
 8004cb4:	f00d fc90 	bl	80125d8 <_lv_fs_init>
    _lv_anim_core_init();
 8004cb8:	f00d fb08 	bl	80122cc <_lv_anim_core_init>
    _lv_group_init();
 8004cbc:	f7ff fd40 	bl	8004740 <_lv_group_init>
    lv_draw_init();
 8004cc0:	f019 fd52 	bl	801e768 <lv_draw_init>
    _lv_obj_style_init();
 8004cc4:	f001 fb04 	bl	80062d0 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8004cc8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8004ccc:	4808      	ldr	r0, [pc, #32]	; (8004cf0 <lv_init+0x4c>)
 8004cce:	f01f fe83 	bl	80249d8 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8004cd2:	215c      	movs	r1, #92	; 0x5c
 8004cd4:	4807      	ldr	r0, [pc, #28]	; (8004cf4 <lv_init+0x50>)
 8004cd6:	f01f fe7f 	bl	80249d8 <_lv_ll_init>
    _lv_refr_init();
 8004cda:	f019 fc3e 	bl	801e55a <_lv_refr_init>
    _lv_img_decoder_init();
 8004cde:	f004 f9d1 	bl	8009084 <_lv_img_decoder_init>
    lv_extra_init();
 8004ce2:	f01e f909 	bl	8022ef8 <lv_extra_init>
    lv_initialized = true;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	7023      	strb	r3, [r4, #0]
}
 8004cea:	bd10      	pop	{r4, pc}
 8004cec:	24010d2c 	.word	0x24010d2c
 8004cf0:	240013f8 	.word	0x240013f8
 8004cf4:	240013ec 	.word	0x240013ec

08004cf8 <lv_obj_create>:
{
 8004cf8:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8004cfa:	4804      	ldr	r0, [pc, #16]	; (8004d0c <lv_obj_create+0x14>)
{
 8004cfc:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8004cfe:	f000 f85b 	bl	8004db8 <lv_obj_class_create_obj>
 8004d02:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8004d04:	f017 f866 	bl	801bdd4 <lv_obj_class_init_obj>
}
 8004d08:	4620      	mov	r0, r4
 8004d0a:	bd10      	pop	{r4, pc}
 8004d0c:	08028db8 	.word	0x08028db8

08004d10 <lv_obj_destructor>:
{
 8004d10:	b510      	push	{r4, lr}
    _lv_event_mark_deleted(obj);
 8004d12:	4608      	mov	r0, r1
{
 8004d14:	460c      	mov	r4, r1
    _lv_event_mark_deleted(obj);
 8004d16:	f7ff fd01 	bl	800471c <_lv_event_mark_deleted>
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f001 fade 	bl	80062dc <lv_obj_enable_style_refresh>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8004d20:	4a14      	ldr	r2, [pc, #80]	; (8004d74 <lv_obj_destructor+0x64>)
 8004d22:	2100      	movs	r1, #0
 8004d24:	4620      	mov	r0, r4
 8004d26:	f018 ffe4 	bl	801dcf2 <lv_obj_remove_style>
    lv_obj_enable_style_refresh(true);
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	f001 fad6 	bl	80062dc <lv_obj_enable_style_refresh>
    lv_anim_del(obj, NULL);
 8004d30:	2100      	movs	r1, #0
 8004d32:	4620      	mov	r0, r4
 8004d34:	f00d fb00 	bl	8012338 <lv_anim_del>
    lv_group_t * group = lv_obj_get_group(obj);
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f016 fe75 	bl	801ba28 <lv_obj_get_group>
    if(group) lv_group_remove_obj(obj);
 8004d3e:	b110      	cbz	r0, 8004d46 <lv_obj_destructor+0x36>
 8004d40:	4620      	mov	r0, r4
 8004d42:	f016 fb6e 	bl	801b422 <lv_group_remove_obj>
    if(obj->spec_attr) {
 8004d46:	68a3      	ldr	r3, [r4, #8]
 8004d48:	b19b      	cbz	r3, 8004d72 <lv_obj_destructor+0x62>
        if(obj->spec_attr->children) {
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	b120      	cbz	r0, 8004d58 <lv_obj_destructor+0x48>
            lv_mem_free(obj->spec_attr->children);
 8004d4e:	f00d fccd 	bl	80126ec <lv_mem_free>
            obj->spec_attr->children = NULL;
 8004d52:	68a3      	ldr	r3, [r4, #8]
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
        if(obj->spec_attr->event_dsc) {
 8004d58:	68a3      	ldr	r3, [r4, #8]
 8004d5a:	68d8      	ldr	r0, [r3, #12]
 8004d5c:	b120      	cbz	r0, 8004d68 <lv_obj_destructor+0x58>
            lv_mem_free(obj->spec_attr->event_dsc);
 8004d5e:	f00d fcc5 	bl	80126ec <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 8004d62:	68a3      	ldr	r3, [r4, #8]
 8004d64:	2200      	movs	r2, #0
 8004d66:	60da      	str	r2, [r3, #12]
        lv_mem_free(obj->spec_attr);
 8004d68:	68a0      	ldr	r0, [r4, #8]
 8004d6a:	f00d fcbf 	bl	80126ec <lv_mem_free>
        obj->spec_attr = NULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60a3      	str	r3, [r4, #8]
}
 8004d72:	bd10      	pop	{r4, pc}
 8004d74:	000fffff 	.word	0x000fffff

08004d78 <lv_obj_allocate_spec_attr>:
{
 8004d78:	b538      	push	{r3, r4, r5, lr}
    if(obj->spec_attr == NULL) {
 8004d7a:	6885      	ldr	r5, [r0, #8]
{
 8004d7c:	4604      	mov	r4, r0
    if(obj->spec_attr == NULL) {
 8004d7e:	b9bd      	cbnz	r5, 8004db0 <lv_obj_allocate_spec_attr+0x38>
        x++;
 8004d80:	4a0c      	ldr	r2, [pc, #48]	; (8004db4 <lv_obj_allocate_spec_attr+0x3c>)
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8004d82:	201c      	movs	r0, #28
        x++;
 8004d84:	6813      	ldr	r3, [r2, #0]
 8004d86:	3301      	adds	r3, #1
 8004d88:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8004d8a:	f00d fc91 	bl	80126b0 <lv_mem_alloc>
 8004d8e:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8004d90:	b900      	cbnz	r0, 8004d94 <lv_obj_allocate_spec_attr+0x1c>
 8004d92:	e7fe      	b.n	8004d92 <lv_obj_allocate_spec_attr+0x1a>
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void lv_memset_00(void * dst, size_t len)
{
    memset(dst, 0x00, len);
 8004d94:	221c      	movs	r2, #28
 8004d96:	4629      	mov	r1, r5
 8004d98:	f015 fcc2 	bl	801a720 <memset>
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8004d9c:	68a2      	ldr	r2, [r4, #8]
 8004d9e:	7e53      	ldrb	r3, [r2, #25]
 8004da0:	f043 030f 	orr.w	r3, r3, #15
 8004da4:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8004da6:	68a2      	ldr	r2, [r4, #8]
 8004da8:	7e13      	ldrb	r3, [r2, #24]
 8004daa:	f043 0303 	orr.w	r3, r3, #3
 8004dae:	7613      	strb	r3, [r2, #24]
}
 8004db0:	bd38      	pop	{r3, r4, r5, pc}
 8004db2:	bf00      	nop
 8004db4:	24001158 	.word	0x24001158

08004db8 <lv_obj_class_create_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_obj_class_create_obj(const lv_obj_class_t * class_p, lv_obj_t * parent)
{
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
 8004dba:	4602      	mov	r2, r0
{
 8004dbc:	460d      	mov	r5, r1
 8004dbe:	4607      	mov	r7, r0
    while(base && base->instance_size == 0) base = base->base_class;
 8004dc0:	4935      	ldr	r1, [pc, #212]	; (8004e98 <lv_obj_class_create_obj+0xe0>)
 8004dc2:	b13a      	cbz	r2, 8004dd4 <lv_obj_class_create_obj+0x1c>
 8004dc4:	6996      	ldr	r6, [r2, #24]
 8004dc6:	4231      	tst	r1, r6
 8004dc8:	d002      	beq.n	8004dd0 <lv_obj_class_create_obj+0x18>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/

    return base->instance_size;
 8004dca:	f3c6 160f 	ubfx	r6, r6, #4, #16
 8004dce:	e002      	b.n	8004dd6 <lv_obj_class_create_obj+0x1e>
    while(base && base->instance_size == 0) base = base->base_class;
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	e7f6      	b.n	8004dc2 <lv_obj_class_create_obj+0xa>
    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8004dd4:	4616      	mov	r6, r2
    lv_obj_t * obj = lv_mem_alloc(s);
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f00d fc6a 	bl	80126b0 <lv_mem_alloc>
    if(obj == NULL) return NULL;
 8004ddc:	4604      	mov	r4, r0
 8004dde:	b168      	cbz	r0, 8004dfc <lv_obj_class_create_obj+0x44>
 8004de0:	4632      	mov	r2, r6
 8004de2:	2100      	movs	r1, #0
 8004de4:	f015 fc9c 	bl	801a720 <memset>
    obj->parent = parent;
 8004de8:	e9c4 7500 	strd	r7, r5, [r4]
    if(parent == NULL) {
 8004dec:	bb6d      	cbnz	r5, 8004e4a <lv_obj_class_create_obj+0x92>
        lv_disp_t * disp = lv_disp_get_default();
 8004dee:	f00d f94d 	bl	801208c <lv_disp_get_default>
        if(!disp) {
 8004df2:	4605      	mov	r5, r0
 8004df4:	b928      	cbnz	r0, 8004e02 <lv_obj_class_create_obj+0x4a>
            lv_mem_free(obj);
 8004df6:	4620      	mov	r0, r4
 8004df8:	f00d fc78 	bl	80126ec <lv_mem_free>
    if(obj == NULL) return NULL;
 8004dfc:	2400      	movs	r4, #0
}
 8004dfe:	4620      	mov	r0, r4
 8004e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(disp->screens == NULL) {
 8004e02:	68c0      	ldr	r0, [r0, #12]
 8004e04:	b998      	cbnz	r0, 8004e2e <lv_obj_class_create_obj+0x76>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8004e06:	2004      	movs	r0, #4
 8004e08:	f00d fc52 	bl	80126b0 <lv_mem_alloc>
            disp->screen_cnt = 1;
 8004e0c:	2301      	movs	r3, #1
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8004e0e:	60e8      	str	r0, [r5, #12]
            disp->screens[0] = obj;
 8004e10:	6004      	str	r4, [r0, #0]
            disp->screen_cnt = 1;
 8004e12:	626b      	str	r3, [r5, #36]	; 0x24
        obj->coords.x1 = 0;
 8004e14:	2500      	movs	r5, #0
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8004e16:	4628      	mov	r0, r5
        obj->coords.x1 = 0;
 8004e18:	6165      	str	r5, [r4, #20]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8004e1a:	f00d f93d 	bl	8012098 <lv_disp_get_hor_res>
 8004e1e:	3801      	subs	r0, #1
 8004e20:	8320      	strh	r0, [r4, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 8004e22:	4628      	mov	r0, r5
 8004e24:	f00d f948 	bl	80120b8 <lv_disp_get_ver_res>
 8004e28:	3801      	subs	r0, #1
 8004e2a:	8360      	strh	r0, [r4, #26]
 8004e2c:	e7e7      	b.n	8004dfe <lv_obj_class_create_obj+0x46>
            disp->screen_cnt++;
 8004e2e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004e30:	3101      	adds	r1, #1
 8004e32:	6269      	str	r1, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8004e34:	0089      	lsls	r1, r1, #2
 8004e36:	f00d fc71 	bl	801271c <lv_mem_realloc>
            disp->screens[disp->screen_cnt - 1] = obj;
 8004e3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8004e3c:	60e8      	str	r0, [r5, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 8004e3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e42:	3b01      	subs	r3, #1
 8004e44:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8004e48:	e7e4      	b.n	8004e14 <lv_obj_class_create_obj+0x5c>
        if(parent->spec_attr == NULL) {
 8004e4a:	68ab      	ldr	r3, [r5, #8]
 8004e4c:	b913      	cbnz	r3, 8004e54 <lv_obj_class_create_obj+0x9c>
            lv_obj_allocate_spec_attr(parent);
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f7ff ff92 	bl	8004d78 <lv_obj_allocate_spec_attr>
        if(parent->spec_attr->children == NULL) {
 8004e54:	68ae      	ldr	r6, [r5, #8]
 8004e56:	6833      	ldr	r3, [r6, #0]
 8004e58:	b953      	cbnz	r3, 8004e70 <lv_obj_class_create_obj+0xb8>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8004e5a:	2004      	movs	r0, #4
 8004e5c:	f00d fc28 	bl	80126b0 <lv_mem_alloc>
 8004e60:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[0] = obj;
 8004e62:	68ab      	ldr	r3, [r5, #8]
            parent->spec_attr->child_cnt = 1;
 8004e64:	2201      	movs	r2, #1
            parent->spec_attr->children[0] = obj;
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	601c      	str	r4, [r3, #0]
            parent->spec_attr->child_cnt = 1;
 8004e6a:	68ab      	ldr	r3, [r5, #8]
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	e7c6      	b.n	8004dfe <lv_obj_class_create_obj+0x46>
            parent->spec_attr->child_cnt++;
 8004e70:	6873      	ldr	r3, [r6, #4]
 8004e72:	3301      	adds	r3, #1
 8004e74:	6073      	str	r3, [r6, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8004e76:	68ae      	ldr	r6, [r5, #8]
 8004e78:	6871      	ldr	r1, [r6, #4]
 8004e7a:	6830      	ldr	r0, [r6, #0]
 8004e7c:	0089      	lsls	r1, r1, #2
 8004e7e:	f00d fc4d 	bl	801271c <lv_mem_realloc>
 8004e82:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8004e84:	68aa      	ldr	r2, [r5, #8]
 8004e86:	6853      	ldr	r3, [r2, #4]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8004e94:	e7b3      	b.n	8004dfe <lv_obj_class_create_obj+0x46>
 8004e96:	bf00      	nop
 8004e98:	000ffff0 	.word	0x000ffff0

08004e9c <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 8004e9c:	b538      	push	{r3, r4, r5, lr}
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8004e9e:	490b      	ldr	r1, [pc, #44]	; (8004ecc <lv_obj_is_layout_positioned+0x30>)
{
 8004ea0:	4605      	mov	r5, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8004ea2:	f016 fdb9 	bl	801ba18 <lv_obj_has_flag_any>
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	b108      	cbz	r0, 8004eae <lv_obj_is_layout_positioned+0x12>
 8004eaa:	2000      	movs	r0, #0
    if(parent == NULL) return false;

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
    if(layout) return true;
    else return false;
}
 8004eac:	bd38      	pop	{r3, r4, r5, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f019 f96a 	bl	801e188 <lv_obj_get_parent>
    if(parent == NULL) return false;
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d0f8      	beq.n	8004eaa <lv_obj_is_layout_positioned+0xe>
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004eb8:	220a      	movs	r2, #10
 8004eba:	4621      	mov	r1, r4
 8004ebc:	f018 fde0 	bl	801da80 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8004ec0:	b280      	uxth	r0, r0
    if(layout) return true;
 8004ec2:	3800      	subs	r0, #0
 8004ec4:	bf18      	it	ne
 8004ec6:	2001      	movne	r0, #1
 8004ec8:	e7f0      	b.n	8004eac <lv_obj_is_layout_positioned+0x10>
 8004eca:	bf00      	nop
 8004ecc:	00060001 	.word	0x00060001

08004ed0 <lv_layout_register>:

    mutex = false;
}

uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data)
{
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    layout_cnt++;
 8004ed2:	4f0d      	ldr	r7, [pc, #52]	; (8004f08 <lv_layout_register+0x38>)
{
 8004ed4:	4606      	mov	r6, r0
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004ed6:	4d0d      	ldr	r5, [pc, #52]	; (8004f0c <lv_layout_register+0x3c>)
{
 8004ed8:	460c      	mov	r4, r1
    layout_cnt++;
 8004eda:	683b      	ldr	r3, [r7, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004edc:	6828      	ldr	r0, [r5, #0]
    layout_cnt++;
 8004ede:	3301      	adds	r3, #1
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004ee0:	00d9      	lsls	r1, r3, #3
    layout_cnt++;
 8004ee2:	603b      	str	r3, [r7, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004ee4:	f00d fc1a 	bl	801271c <lv_mem_realloc>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 8004eec:	b900      	cbnz	r0, 8004ef0 <lv_layout_register+0x20>
 8004eee:	e7fe      	b.n	8004eee <lv_layout_register+0x1e>

    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].cb = cb;
 8004ef0:	6838      	ldr	r0, [r7, #0]
 8004ef2:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8004ef6:	3a01      	subs	r2, #1
 8004ef8:	f843 6032 	str.w	r6, [r3, r2, lsl #3]
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].user_data = user_data;
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f02:	605c      	str	r4, [r3, #4]
    return layout_cnt;  /*No -1 to skip 0th index*/
}
 8004f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f06:	bf00      	nop
 8004f08:	2400115c 	.word	0x2400115c
 8004f0c:	240013ac 	.word	0x240013ac

08004f10 <lv_obj_get_self_width>:

}

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
    lv_point_t p = {0, LV_COORD_MIN};
 8004f10:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <lv_obj_get_self_width+0x18>)
{
 8004f12:	b507      	push	{r0, r1, r2, lr}
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8004f14:	212c      	movs	r1, #44	; 0x2c
 8004f16:	aa01      	add	r2, sp, #4
    lv_point_t p = {0, LV_COORD_MIN};
 8004f18:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8004f1a:	f7ff fbdf 	bl	80046dc <lv_event_send>
    return p.x;
}
 8004f1e:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8004f22:	b003      	add	sp, #12
 8004f24:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f28:	e0010000 	.word	0xe0010000

08004f2c <lv_obj_refr_pos>:
    lv_obj_mark_layout_as_dirty(obj);
    return true;
}

void lv_obj_refr_pos(lv_obj_t * obj)
{
 8004f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f30:	b087      	sub	sp, #28
 8004f32:	4680      	mov	r8, r0
    if(lv_obj_is_layout_positioned(obj)) return;
 8004f34:	f7ff ffb2 	bl	8004e9c <lv_obj_is_layout_positioned>
 8004f38:	4605      	mov	r5, r0
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	f040 8123 	bne.w	8005186 <lv_obj_refr_pos+0x25a>


    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004f40:	4640      	mov	r0, r8
 8004f42:	f019 f921 	bl	801e188 <lv_obj_get_parent>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8004f46:	4629      	mov	r1, r5
 8004f48:	2207      	movs	r2, #7
 8004f4a:	9000      	str	r0, [sp, #0]
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	f018 fd97 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8004f52:	4629      	mov	r1, r5
    return (lv_coord_t)v.num;
 8004f54:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8004f56:	2208      	movs	r2, #8
 8004f58:	4640      	mov	r0, r8
 8004f5a:	f018 fd91 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t x = lv_obj_get_style_x(obj, LV_PART_MAIN);
    lv_coord_t y = lv_obj_get_style_y(obj, LV_PART_MAIN);

    if(parent == NULL) {
 8004f5e:	9b00      	ldr	r3, [sp, #0]
    return (lv_coord_t)v.num;
 8004f60:	b205      	sxth	r5, r0
 8004f62:	b93b      	cbnz	r3, 8004f74 <lv_obj_refr_pos+0x48>
                y += ph / 2 - h / 2;
                break;
            default:
                break;
        }
        lv_obj_move_to(obj, x, y);
 8004f64:	462a      	mov	r2, r5
 8004f66:	4621      	mov	r1, r4
 8004f68:	4640      	mov	r0, r8
    }
}
 8004f6a:	b007      	add	sp, #28
 8004f6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_move_to(obj, x, y);
 8004f70:	f017 be7e 	b.w	801cc70 <lv_obj_move_to>
    lv_coord_t pw = lv_obj_get_content_width(parent);
 8004f74:	9800      	ldr	r0, [sp, #0]
 8004f76:	f017 fc69 	bl	801c84c <lv_obj_get_content_width>
 8004f7a:	4607      	mov	r7, r0
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8004f7c:	9800      	ldr	r0, [sp, #0]
 8004f7e:	f017 fc7b 	bl	801c878 <lv_obj_get_content_height>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8004f82:	f404 43c0 	and.w	r3, r4, #24576	; 0x6000
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8004f86:	4606      	mov	r6, r0
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8004f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8c:	d10f      	bne.n	8004fae <lv_obj_refr_pos+0x82>
 8004f8e:	f424 43c0 	bic.w	r3, r4, #24576	; 0x6000
 8004f92:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004f96:	dc0a      	bgt.n	8004fae <lv_obj_refr_pos+0x82>
 8004f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f9c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8004fa0:	bfc8      	it	gt
 8004fa2:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8004fa6:	437b      	muls	r3, r7
 8004fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fac:	b21c      	sxth	r4, r3
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8004fae:	f405 43c0 	and.w	r3, r5, #24576	; 0x6000
 8004fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb6:	d10f      	bne.n	8004fd8 <lv_obj_refr_pos+0xac>
 8004fb8:	f425 43c0 	bic.w	r3, r5, #24576	; 0x6000
 8004fbc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004fc0:	dc0a      	bgt.n	8004fd8 <lv_obj_refr_pos+0xac>
 8004fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fc6:	f04f 0264 	mov.w	r2, #100	; 0x64
 8004fca:	bfc8      	it	gt
 8004fcc:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8004fd0:	4373      	muls	r3, r6
 8004fd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fd6:	b21d      	sxth	r5, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8004fd8:	226a      	movs	r2, #106	; 0x6a
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4640      	mov	r0, r8
 8004fde:	f018 fd4f 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8004fe2:	226b      	movs	r2, #107	; 0x6b
    return (lv_coord_t)v.num;
 8004fe4:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4640      	mov	r0, r8
 8004fec:	f018 fd48 	bl	801da80 <lv_obj_get_style_prop>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004ff0:	f8b8 3014 	ldrh.w	r3, [r8, #20]
    return (lv_coord_t)v.num;
 8004ff4:	b200      	sxth	r0, r0
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 8004ffc:	9a01      	ldr	r2, [sp, #4]
 8004ffe:	3301      	adds	r3, #1
 8005000:	b29b      	uxth	r3, r3
 8005002:	eba3 0a02 	sub.w	sl, r3, r2
 8005006:	9304      	str	r3, [sp, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005008:	f8b8 3016 	ldrh.w	r3, [r8, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800500c:	fa0f fa8a 	sxth.w	sl, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005010:	9302      	str	r3, [sp, #8]
 8005012:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8005016:	9a02      	ldr	r2, [sp, #8]
 8005018:	3301      	adds	r3, #1
 800501a:	b29b      	uxth	r3, r3
 800501c:	eba3 0902 	sub.w	r9, r3, r2
 8005020:	9303      	str	r3, [sp, #12]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8005022:	f40b 43c0 	and.w	r3, fp, #24576	; 0x6000
 8005026:	fa0f f989 	sxth.w	r9, r9
 800502a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502e:	d111      	bne.n	8005054 <lv_obj_refr_pos+0x128>
 8005030:	f42b 43c0 	bic.w	r3, fp, #24576	; 0x6000
 8005034:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005038:	dc0c      	bgt.n	8005054 <lv_obj_refr_pos+0x128>
 800503a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800503e:	f04f 0264 	mov.w	r2, #100	; 0x64
 8005042:	bfc8      	it	gt
 8005044:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8005048:	fb03 f30a 	mul.w	r3, r3, sl
 800504c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005050:	fa0f fb83 	sxth.w	fp, r3
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8005054:	f400 43c0 	and.w	r3, r0, #24576	; 0x6000
 8005058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505c:	d110      	bne.n	8005080 <lv_obj_refr_pos+0x154>
 800505e:	f420 43c0 	bic.w	r3, r0, #24576	; 0x6000
 8005062:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005066:	dc0b      	bgt.n	8005080 <lv_obj_refr_pos+0x154>
 8005068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800506c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8005070:	bfc8      	it	gt
 8005072:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8005076:	fb03 f309 	mul.w	r3, r3, r9
 800507a:	fb93 f3f2 	sdiv	r3, r3, r2
 800507e:	b218      	sxth	r0, r3
    x += tr_x;
 8005080:	445c      	add	r4, fp
    y += tr_y;
 8005082:	4405      	add	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8005084:	2209      	movs	r2, #9
 8005086:	2100      	movs	r1, #0
    x += tr_x;
 8005088:	b2a3      	uxth	r3, r4
 800508a:	4640      	mov	r0, r8
    y += tr_y;
 800508c:	fa1f fb85 	uxth.w	fp, r5
    x += tr_x;
 8005090:	9305      	str	r3, [sp, #20]
 8005092:	f018 fcf5 	bl	801da80 <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 8005096:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    x += tr_x;
 800509a:	b224      	sxth	r4, r4
    y += tr_y;
 800509c:	b22d      	sxth	r5, r5
    if(align == LV_ALIGN_DEFAULT) {
 800509e:	9b05      	ldr	r3, [sp, #20]
 80050a0:	d10c      	bne.n	80050bc <lv_obj_refr_pos+0x190>
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 80050a2:	9800      	ldr	r0, [sp, #0]
 80050a4:	9302      	str	r3, [sp, #8]
 80050a6:	f017 fa29 	bl	801c4fc <lv_obj_get_style_base_dir.constprop.0>
 80050aa:	2801      	cmp	r0, #1
 80050ac:	9b02      	ldr	r3, [sp, #8]
 80050ae:	f47f af59 	bne.w	8004f64 <lv_obj_refr_pos+0x38>
                x += pw - w;
 80050b2:	9a01      	ldr	r2, [sp, #4]
 80050b4:	9904      	ldr	r1, [sp, #16]
 80050b6:	1a54      	subs	r4, r2, r1
 80050b8:	443c      	add	r4, r7
 80050ba:	e020      	b.n	80050fe <lv_obj_refr_pos+0x1d2>
    if(align == LV_ALIGN_TOP_LEFT) {
 80050bc:	2801      	cmp	r0, #1
 80050be:	f43f af51 	beq.w	8004f64 <lv_obj_refr_pos+0x38>
        switch(align) {
 80050c2:	3802      	subs	r0, #2
 80050c4:	2807      	cmp	r0, #7
 80050c6:	f63f af4d 	bhi.w	8004f64 <lv_obj_refr_pos+0x38>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <lv_obj_refr_pos+0x1a4>)
 80050cc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 80050d0:	080050f1 	.word	0x080050f1
 80050d4:	080050b3 	.word	0x080050b3
 80050d8:	08005117 	.word	0x08005117
 80050dc:	08005105 	.word	0x08005105
 80050e0:	08005125 	.word	0x08005125
 80050e4:	0800514b 	.word	0x0800514b
 80050e8:	0800513f 	.word	0x0800513f
 80050ec:	0800515b 	.word	0x0800515b
                x += pw / 2 - w / 2;
 80050f0:	eb0a 74da 	add.w	r4, sl, sl, lsr #31
 80050f4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80050f8:	1064      	asrs	r4, r4, #1
 80050fa:	ebc4 0467 	rsb	r4, r4, r7, asr #1
                x += pw - w;
 80050fe:	441c      	add	r4, r3
 8005100:	b224      	sxth	r4, r4
                break;
 8005102:	e72f      	b.n	8004f64 <lv_obj_refr_pos+0x38>
                x += pw / 2 - w / 2;
 8005104:	eb0a 74da 	add.w	r4, sl, sl, lsr #31
 8005108:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800510c:	1064      	asrs	r4, r4, #1
 800510e:	ebc4 0467 	rsb	r4, r4, r7, asr #1
 8005112:	441c      	add	r4, r3
 8005114:	b224      	sxth	r4, r4
                y += ph - h;
 8005116:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800511a:	1a9d      	subs	r5, r3, r2
 800511c:	4435      	add	r5, r6
                y += ph / 2 - h / 2;
 800511e:	445d      	add	r5, fp
 8005120:	b22d      	sxth	r5, r5
                break;
 8005122:	e71f      	b.n	8004f64 <lv_obj_refr_pos+0x38>
                x += pw - w;
 8005124:	9a01      	ldr	r2, [sp, #4]
 8005126:	9904      	ldr	r1, [sp, #16]
 8005128:	1a54      	subs	r4, r2, r1
 800512a:	443c      	add	r4, r7
 800512c:	441c      	add	r4, r3
                y += ph - h;
 800512e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
                x += pw - w;
 8005132:	b224      	sxth	r4, r4
                y += ph - h;
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	4433      	add	r3, r6
 8005138:	445b      	add	r3, fp
 800513a:	b21d      	sxth	r5, r3
                break;
 800513c:	e712      	b.n	8004f64 <lv_obj_refr_pos+0x38>
                x += pw - w;
 800513e:	9a01      	ldr	r2, [sp, #4]
 8005140:	9904      	ldr	r1, [sp, #16]
 8005142:	1a52      	subs	r2, r2, r1
 8005144:	443a      	add	r2, r7
 8005146:	4413      	add	r3, r2
 8005148:	b21c      	sxth	r4, r3
                y += ph / 2 - h / 2;
 800514a:	eb09 75d9 	add.w	r5, r9, r9, lsr #31
 800514e:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8005152:	106d      	asrs	r5, r5, #1
 8005154:	ebc5 0566 	rsb	r5, r5, r6, asr #1
 8005158:	e7e1      	b.n	800511e <lv_obj_refr_pos+0x1f2>
                x += pw / 2 - w / 2;
 800515a:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
                y += ph / 2 - h / 2;
 800515e:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
                x += pw / 2 - w / 2;
 8005162:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8005166:	ea4f 0a6a 	mov.w	sl, sl, asr #1
                y += ph / 2 - h / 2;
 800516a:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800516e:	ea4f 0969 	mov.w	r9, r9, asr #1
                x += pw / 2 - w / 2;
 8005172:	ebca 0a67 	rsb	sl, sl, r7, asr #1
                y += ph / 2 - h / 2;
 8005176:	ebc9 0966 	rsb	r9, r9, r6, asr #1
                x += pw / 2 - w / 2;
 800517a:	4453      	add	r3, sl
                y += ph / 2 - h / 2;
 800517c:	44cb      	add	fp, r9
                x += pw / 2 - w / 2;
 800517e:	b21c      	sxth	r4, r3
                y += ph / 2 - h / 2;
 8005180:	fa0f f58b 	sxth.w	r5, fp
                break;
 8005184:	e6ee      	b.n	8004f64 <lv_obj_refr_pos+0x38>
}
 8005186:	b007      	add	sp, #28
 8005188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800518c <lv_obj_refr_size>:
{
 800518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(obj->w_layout && obj->h_layout) return false;
 8005190:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
{
 8005194:	b08f      	sub	sp, #60	; 0x3c
 8005196:	4604      	mov	r4, r0
    if(obj->w_layout && obj->h_layout) return false;
 8005198:	f003 0306 	and.w	r3, r3, #6
 800519c:	2b06      	cmp	r3, #6
 800519e:	d103      	bne.n	80051a8 <lv_obj_refr_size+0x1c>
 80051a0:	2000      	movs	r0, #0
}
 80051a2:	b00f      	add	sp, #60	; 0x3c
 80051a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80051a8:	f018 ffee 	bl	801e188 <lv_obj_get_parent>
    if(parent == NULL) return false;
 80051ac:	4607      	mov	r7, r0
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d0f6      	beq.n	80051a0 <lv_obj_refr_size+0x14>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 80051b2:	4620      	mov	r0, r4
 80051b4:	f000 fd22 	bl	8005bfc <lv_obj_get_scroll_left>
    if(obj->w_layout) {
 80051b8:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 80051bc:	9005      	str	r0, [sp, #20]
    if(obj->w_layout) {
 80051be:	f011 0104 	ands.w	r1, r1, #4
 80051c2:	d020      	beq.n	8005206 <lv_obj_refr_size+0x7a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80051c4:	8b26      	ldrh	r6, [r4, #24]
 80051c6:	8aa3      	ldrh	r3, [r4, #20]
 80051c8:	3601      	adds	r6, #1
 80051ca:	1af6      	subs	r6, r6, r3
    bool w_is_content = false;
 80051cc:	2300      	movs	r3, #0
 80051ce:	b236      	sxth	r6, r6
 80051d0:	9301      	str	r3, [sp, #4]
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 80051d2:	4620      	mov	r0, r4
 80051d4:	f017 fecd 	bl	801cf72 <lv_obj_get_scroll_top>
    if(obj->h_layout) {
 80051d8:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 80051dc:	9006      	str	r0, [sp, #24]
    if(obj->h_layout) {
 80051de:	f011 0102 	ands.w	r1, r1, #2
 80051e2:	f000 813b 	beq.w	800545c <lv_obj_refr_size+0x2d0>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80051e6:	8b65      	ldrh	r5, [r4, #26]
 80051e8:	8ae3      	ldrh	r3, [r4, #22]
 80051ea:	3501      	adds	r5, #1
 80051ec:	1aed      	subs	r5, r5, r3
    if(w_is_content || h_is_content) {
 80051ee:	9b01      	ldr	r3, [sp, #4]
 80051f0:	b22d      	sxth	r5, r5
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 8169 	beq.w	80054ca <lv_obj_refr_size+0x33e>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 80051f8:	2300      	movs	r3, #0
 80051fa:	4620      	mov	r0, r4
 80051fc:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8005200:	f017 ff58 	bl	801d0b4 <lv_obj_scroll_to>
 8005204:	e161      	b.n	80054ca <lv_obj_refr_size+0x33e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8005206:	2201      	movs	r2, #1
 8005208:	4620      	mov	r0, r4
 800520a:	f018 fc39 	bl	801da80 <lv_obj_get_style_prop>
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 800520e:	f242 78d1 	movw	r8, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 8005212:	b205      	sxth	r5, r0
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8005214:	4638      	mov	r0, r7
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 8005216:	eba5 0108 	sub.w	r1, r5, r8
 800521a:	424b      	negs	r3, r1
 800521c:	414b      	adcs	r3, r1
 800521e:	9301      	str	r3, [sp, #4]
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8005220:	f405 43c0 	and.w	r3, r5, #24576	; 0x6000
 8005224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005228:	d141      	bne.n	80052ae <lv_obj_refr_size+0x122>
 800522a:	f425 46c0 	bic.w	r6, r5, #24576	; 0x6000
 800522e:	f5b6 6ffa 	cmp.w	r6, #2000	; 0x7d0
 8005232:	dc3c      	bgt.n	80052ae <lv_obj_refr_size+0x122>
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8005234:	f017 fb0a 	bl	801c84c <lv_obj_get_content_width>
        if(w_is_content) {
 8005238:	4545      	cmp	r5, r8
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 800523a:	9002      	str	r0, [sp, #8]
        if(w_is_content) {
 800523c:	f040 80e1 	bne.w	8005402 <lv_obj_refr_size+0x276>
 *   STATIC FUNCTIONS
 **********************/

static lv_coord_t calc_content_width(lv_obj_t * obj)
{
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8005240:	2200      	movs	r2, #0
 8005242:	4620      	mov	r0, r4
 8005244:	4611      	mov	r1, r2
 8005246:	f000 fe4d 	bl	8005ee4 <lv_obj_scroll_to_x>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800524a:	4620      	mov	r0, r4
 800524c:	f017 f95d 	bl	801c50a <lv_obj_get_style_border_width.constprop.0>
 8005250:	4606      	mov	r6, r0
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8005252:	4620      	mov	r0, r4
 8005254:	fa1f fa86 	uxth.w	sl, r6
 8005258:	f017 f95e 	bl	801c518 <lv_obj_get_style_pad_right.constprop.0>
 800525c:	fa10 f686 	uxtah	r6, r0, r6
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8005260:	4620      	mov	r0, r4
 8005262:	f017 f960 	bl	801c526 <lv_obj_get_style_pad_left.constprop.0>
 8005266:	4482      	add	sl, r0
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8005268:	b2b6      	uxth	r6, r6

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 800526a:	4620      	mov	r0, r4
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800526c:	fa1f fa8a 	uxth.w	sl, sl
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8005270:	f7ff fe4e 	bl	8004f10 <lv_obj_get_self_width>
 8005274:	eb06 050a 	add.w	r5, r6, sl
 8005278:	4405      	add	r5, r0

    lv_coord_t child_res = LV_COORD_MIN;
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800527a:	4620      	mov	r0, r4
 800527c:	f018 ff96 	bl	801e1ac <lv_obj_get_child_cnt>
 8005280:	9003      	str	r0, [sp, #12]
    /*With RTL find the left most coordinate*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005282:	4620      	mov	r0, r4
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8005284:	b22d      	sxth	r5, r5
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005286:	f017 f939 	bl	801c4fc <lv_obj_get_style_base_dir.constprop.0>
 800528a:	2801      	cmp	r0, #1
 800528c:	d029      	beq.n	80052e2 <lv_obj_refr_size+0x156>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800528e:	fa0f f38a 	sxth.w	r3, sl
            child_res += pad_left;
        }
    }
    /*Else find the right most coordinate*/
    else {
        for(i = 0; i < child_cnt; i++) {
 8005292:	f04f 0800 	mov.w	r8, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8005296:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8005454 <lv_obj_refr_size+0x2c8>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800529a:	9304      	str	r3, [sp, #16]
        for(i = 0; i < child_cnt; i++) {
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	4543      	cmp	r3, r8
 80052a0:	d172      	bne.n	8005388 <lv_obj_refr_size+0x1fc>
            else {
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
            }
        }

        if(child_res != LV_COORD_MIN) {
 80052a2:	4b6c      	ldr	r3, [pc, #432]	; (8005454 <lv_obj_refr_size+0x2c8>)
 80052a4:	4599      	cmp	r9, r3
 80052a6:	d009      	beq.n	80052bc <lv_obj_refr_size+0x130>
            child_res += pad_right;
 80052a8:	444e      	add	r6, r9
 80052aa:	b236      	sxth	r6, r6
 80052ac:	e028      	b.n	8005300 <lv_obj_refr_size+0x174>
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 80052ae:	f017 facd 	bl	801c84c <lv_obj_get_content_width>
        if(w_is_content) {
 80052b2:	f242 73d1 	movw	r3, #10193	; 0x27d1
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 80052b6:	9002      	str	r0, [sp, #8]
        if(w_is_content) {
 80052b8:	429d      	cmp	r5, r3
 80052ba:	d0c1      	beq.n	8005240 <lv_obj_refr_size+0xb4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 80052bc:	2202      	movs	r2, #2
 80052be:	2100      	movs	r1, #0
 80052c0:	4620      	mov	r0, r4
 80052c2:	f018 fbdd 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 80052c6:	2203      	movs	r2, #3
    return (lv_coord_t)v.num;
 80052c8:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 80052ca:	2100      	movs	r1, #0
 80052cc:	4620      	mov	r0, r4
 80052ce:	f018 fbd7 	bl	801da80 <lv_obj_get_style_prop>
        w = lv_clamp_width(w, minw, maxw, parent_w);
 80052d2:	4631      	mov	r1, r6
 80052d4:	b202      	sxth	r2, r0
 80052d6:	9b02      	ldr	r3, [sp, #8]
 80052d8:	4628      	mov	r0, r5
 80052da:	f017 fdaa 	bl	801ce32 <lv_clamp_width>
 80052de:	4606      	mov	r6, r0
 80052e0:	e777      	b.n	80051d2 <lv_obj_refr_size+0x46>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 80052e2:	b233      	sxth	r3, r6
        for(i = 0; i < child_cnt; i++) {
 80052e4:	f04f 0900 	mov.w	r9, #0
    lv_coord_t child_res = LV_COORD_MIN;
 80052e8:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8005454 <lv_obj_refr_size+0x2c8>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 80052ec:	9304      	str	r3, [sp, #16]
        for(i = 0; i < child_cnt; i++) {
 80052ee:	9b03      	ldr	r3, [sp, #12]
 80052f0:	454b      	cmp	r3, r9
 80052f2:	d10c      	bne.n	800530e <lv_obj_refr_size+0x182>
        if(child_res != LV_COORD_MIN) {
 80052f4:	4b57      	ldr	r3, [pc, #348]	; (8005454 <lv_obj_refr_size+0x2c8>)
 80052f6:	4598      	cmp	r8, r3
 80052f8:	d0e0      	beq.n	80052bc <lv_obj_refr_size+0x130>
            child_res += pad_left;
 80052fa:	44d0      	add	r8, sl
 80052fc:	fa0f f688 	sxth.w	r6, r8
        }
    }

    if(child_res == LV_COORD_MIN) return self_w;
 8005300:	4b54      	ldr	r3, [pc, #336]	; (8005454 <lv_obj_refr_size+0x2c8>)
 8005302:	429e      	cmp	r6, r3
 8005304:	d0da      	beq.n	80052bc <lv_obj_refr_size+0x130>
    else return LV_MAX(child_res, self_w);
 8005306:	42b5      	cmp	r5, r6
 8005308:	bfb8      	it	lt
 800530a:	4635      	movlt	r5, r6
 800530c:	e7d6      	b.n	80052bc <lv_obj_refr_size+0x130>
            lv_obj_t * child = obj->spec_attr->children[i];
 800530e:	68a3      	ldr	r3, [r4, #8]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005310:	4951      	ldr	r1, [pc, #324]	; (8005458 <lv_obj_refr_size+0x2cc>)
            lv_obj_t * child = obj->spec_attr->children[i];
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f853 b029 	ldr.w	fp, [r3, r9, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005318:	4658      	mov	r0, fp
 800531a:	f016 fb7d 	bl	801ba18 <lv_obj_has_flag_any>
 800531e:	bb80      	cbnz	r0, 8005382 <lv_obj_refr_size+0x1f6>
            if(!lv_obj_is_layout_positioned(child)) {
 8005320:	4658      	mov	r0, fp
 8005322:	f7ff fdbb 	bl	8004e9c <lv_obj_is_layout_positioned>
 8005326:	4601      	mov	r1, r0
 8005328:	b958      	cbnz	r0, 8005342 <lv_obj_refr_size+0x1b6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800532a:	2209      	movs	r2, #9
 800532c:	4658      	mov	r0, fp
 800532e:	f018 fba7 	bl	801da80 <lv_obj_get_style_prop>
                switch(align) {
 8005332:	b2c0      	uxtb	r0, r0
 8005334:	2808      	cmp	r0, #8
 8005336:	d80e      	bhi.n	8005356 <lv_obj_refr_size+0x1ca>
 8005338:	f240 1249 	movw	r2, #329	; 0x149
 800533c:	40c2      	lsrs	r2, r0
 800533e:	07d2      	lsls	r2, r2, #31
 8005340:	d509      	bpl.n	8005356 <lv_obj_refr_size+0x1ca>
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8005342:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8005346:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	3301      	adds	r3, #1
 800534e:	4543      	cmp	r3, r8
 8005350:	bfb8      	it	lt
 8005352:	4643      	movlt	r3, r8
 8005354:	e013      	b.n	800537e <lv_obj_refr_size+0x1f2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8005356:	2207      	movs	r2, #7
 8005358:	2100      	movs	r1, #0
 800535a:	4658      	mov	r0, fp
 800535c:	f018 fb90 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005360:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_x(child, 0) == 0) {
 8005362:	b970      	cbnz	r0, 8005382 <lv_obj_refr_size+0x1f6>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005364:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 8005368:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800536c:	3201      	adds	r2, #1
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 800536e:	9904      	ldr	r1, [sp, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	b29a      	uxth	r2, r3
 8005374:	fa01 f383 	sxtah	r3, r1, r3
 8005378:	4598      	cmp	r8, r3
 800537a:	dc02      	bgt.n	8005382 <lv_obj_refr_size+0x1f6>
 800537c:	18b3      	adds	r3, r6, r2
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 800537e:	fa0f f883 	sxth.w	r8, r3
        for(i = 0; i < child_cnt; i++) {
 8005382:	f109 0901 	add.w	r9, r9, #1
 8005386:	e7b2      	b.n	80052ee <lv_obj_refr_size+0x162>
            lv_obj_t * child = obj->spec_attr->children[i];
 8005388:	68a3      	ldr	r3, [r4, #8]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800538a:	4933      	ldr	r1, [pc, #204]	; (8005458 <lv_obj_refr_size+0x2cc>)
            lv_obj_t * child = obj->spec_attr->children[i];
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005392:	4658      	mov	r0, fp
 8005394:	f016 fb40 	bl	801ba18 <lv_obj_has_flag_any>
 8005398:	bb80      	cbnz	r0, 80053fc <lv_obj_refr_size+0x270>
            if(!lv_obj_is_layout_positioned(child)) {
 800539a:	4658      	mov	r0, fp
 800539c:	f7ff fd7e 	bl	8004e9c <lv_obj_is_layout_positioned>
 80053a0:	4601      	mov	r1, r0
 80053a2:	b950      	cbnz	r0, 80053ba <lv_obj_refr_size+0x22e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80053a4:	2209      	movs	r2, #9
 80053a6:	4658      	mov	r0, fp
 80053a8:	f018 fb6a 	bl	801da80 <lv_obj_get_style_prop>
                switch(align) {
 80053ac:	b2c0      	uxtb	r0, r0
 80053ae:	2807      	cmp	r0, #7
 80053b0:	d80d      	bhi.n	80053ce <lv_obj_refr_size+0x242>
 80053b2:	2293      	movs	r2, #147	; 0x93
 80053b4:	40c2      	lsrs	r2, r0
 80053b6:	07d3      	lsls	r3, r2, #31
 80053b8:	d509      	bpl.n	80053ce <lv_obj_refr_size+0x242>
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 80053ba:	f9bb 3018 	ldrsh.w	r3, [fp, #24]
 80053be:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80053c2:	1a9b      	subs	r3, r3, r2
 80053c4:	3301      	adds	r3, #1
 80053c6:	454b      	cmp	r3, r9
 80053c8:	bfb8      	it	lt
 80053ca:	464b      	movlt	r3, r9
 80053cc:	e014      	b.n	80053f8 <lv_obj_refr_size+0x26c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 80053ce:	2208      	movs	r2, #8
 80053d0:	2100      	movs	r1, #0
 80053d2:	4658      	mov	r0, fp
 80053d4:	f018 fb54 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80053d8:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_y(child, 0) == 0) {
 80053da:	b978      	cbnz	r0, 80053fc <lv_obj_refr_size+0x270>
 80053dc:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 80053e0:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80053e4:	3201      	adds	r2, #1
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 80053e6:	9904      	ldr	r1, [sp, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	fa01 f383 	sxtah	r3, r1, r3
 80053f0:	4599      	cmp	r9, r3
 80053f2:	dc03      	bgt.n	80053fc <lv_obj_refr_size+0x270>
 80053f4:	eb0a 0302 	add.w	r3, sl, r2
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 80053f8:	fa0f f983 	sxth.w	r9, r3
        for(i = 0; i < child_cnt; i++) {
 80053fc:	f108 0801 	add.w	r8, r8, #1
 8005400:	e74c      	b.n	800529c <lv_obj_refr_size+0x110>
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8005402:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8005406:	f011 0104 	ands.w	r1, r1, #4
 800540a:	d116      	bne.n	800543a <lv_obj_refr_size+0x2ae>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800540c:	2201      	movs	r2, #1
 800540e:	4638      	mov	r0, r7
 8005410:	f018 fb36 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005414:	b200      	sxth	r0, r0
 8005416:	4540      	cmp	r0, r8
 8005418:	d10f      	bne.n	800543a <lv_obj_refr_size+0x2ae>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 800541a:	4620      	mov	r0, r4
 800541c:	f017 f875 	bl	801c50a <lv_obj_get_style_border_width.constprop.0>
 8005420:	4606      	mov	r6, r0
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 8005422:	4620      	mov	r0, r4
 8005424:	f017 f87f 	bl	801c526 <lv_obj_get_style_pad_left.constprop.0>
 8005428:	1985      	adds	r5, r0, r6
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 800542a:	4620      	mov	r0, r4
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 800542c:	b2ad      	uxth	r5, r5
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 800542e:	f017 f873 	bl	801c518 <lv_obj_get_style_pad_right.constprop.0>
 8005432:	4430      	add	r0, r6
 8005434:	4405      	add	r5, r0
 8005436:	b22d      	sxth	r5, r5
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8005438:	e740      	b.n	80052bc <lv_obj_refr_size+0x130>
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 800543a:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 800543e:	4633      	mov	r3, r6
 8005440:	9a02      	ldr	r2, [sp, #8]
 8005442:	bfc8      	it	gt
 8005444:	f5c6 737a 	rsbgt	r3, r6, #1000	; 0x3e8
 8005448:	4353      	muls	r3, r2
 800544a:	2264      	movs	r2, #100	; 0x64
 800544c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005450:	b21d      	sxth	r5, r3
 8005452:	e733      	b.n	80052bc <lv_obj_refr_size+0x130>
 8005454:	ffffe001 	.word	0xffffe001
 8005458:	00040001 	.word	0x00040001
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800545c:	2204      	movs	r2, #4
 800545e:	4620      	mov	r0, r4
 8005460:	f018 fb0e 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005464:	fa0f fa80 	sxth.w	sl, r0
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8005468:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 800546c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8005470:	4638      	mov	r0, r7
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8005472:	d105      	bne.n	8005480 <lv_obj_refr_size+0x2f4>
 8005474:	f42a 45c0 	bic.w	r5, sl, #24576	; 0x6000
 8005478:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 800547c:	f340 808b 	ble.w	8005596 <lv_obj_refr_size+0x40a>
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8005480:	f017 f9fa 	bl	801c878 <lv_obj_get_content_height>
        if(h_is_content) {
 8005484:	f242 73d1 	movw	r3, #10193	; 0x27d1
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8005488:	9002      	str	r0, [sp, #8]
        if(h_is_content) {
 800548a:	459a      	cmp	sl, r3
 800548c:	f000 808a 	beq.w	80055a4 <lv_obj_refr_size+0x418>
 8005490:	4655      	mov	r5, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8005492:	2205      	movs	r2, #5
 8005494:	2100      	movs	r1, #0
 8005496:	4620      	mov	r0, r4
 8005498:	f018 faf2 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800549c:	2206      	movs	r2, #6
    return (lv_coord_t)v.num;
 800549e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 80054a2:	2100      	movs	r1, #0
 80054a4:	4620      	mov	r0, r4
 80054a6:	f018 faeb 	bl	801da80 <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 80054aa:	9b02      	ldr	r3, [sp, #8]
 80054ac:	b202      	sxth	r2, r0
 80054ae:	4641      	mov	r1, r8
 80054b0:	4628      	mov	r0, r5
 80054b2:	f017 fcbe 	bl	801ce32 <lv_clamp_width>
    if(w_is_content || h_is_content) {
 80054b6:	9b01      	ldr	r3, [sp, #4]
        h = lv_clamp_height(h, minh, maxh, parent_h);
 80054b8:	4605      	mov	r5, r0
    if(w_is_content || h_is_content) {
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f47f ae9c 	bne.w	80051f8 <lv_obj_refr_size+0x6c>
 80054c0:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80054c4:	459a      	cmp	sl, r3
 80054c6:	f43f ae97 	beq.w	80051f8 <lv_obj_refr_size+0x6c>
 80054ca:	8b23      	ldrh	r3, [r4, #24]
 80054cc:	8aa2      	ldrh	r2, [r4, #20]
 80054ce:	3301      	adds	r3, #1
 80054d0:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 80054d2:	b21b      	sxth	r3, r3
 80054d4:	429e      	cmp	r6, r3
 80054d6:	d107      	bne.n	80054e8 <lv_obj_refr_size+0x35c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80054d8:	8b63      	ldrh	r3, [r4, #26]
 80054da:	8ae2      	ldrh	r2, [r4, #22]
 80054dc:	3301      	adds	r3, #1
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	b21b      	sxth	r3, r3
 80054e2:	429d      	cmp	r5, r3
 80054e4:	f43f ae5c 	beq.w	80051a0 <lv_obj_refr_size+0x14>
    lv_obj_invalidate(obj);
 80054e8:	4620      	mov	r0, r4
    lv_area_copy(coords, &obj->coords);
 80054ea:	f104 0914 	add.w	r9, r4, #20
    lv_obj_invalidate(obj);
 80054ee:	f017 fba1 	bl	801cc34 <lv_obj_invalidate>
    dest->x1 = src->x1;
 80054f2:	8aa3      	ldrh	r3, [r4, #20]
    lv_obj_get_content_coords(parent, &parent_fit_area);
 80054f4:	a90c      	add	r1, sp, #48	; 0x30
 80054f6:	4638      	mov	r0, r7
 80054f8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    dest->y1 = src->y1;
 80054fc:	8ae3      	ldrh	r3, [r4, #22]
 80054fe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    dest->x2 = src->x2;
 8005502:	8b23      	ldrh	r3, [r4, #24]
 8005504:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    dest->y2 = src->y2;
 8005508:	8b63      	ldrh	r3, [r4, #26]
 800550a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800550e:	f017 f9c9 	bl	801c8a4 <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8005512:	2200      	movs	r2, #0
 8005514:	a90c      	add	r1, sp, #48	; 0x30
 8005516:	a80a      	add	r0, sp, #40	; 0x28
 8005518:	f01e ffaa 	bl	8024470 <_lv_area_is_in>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 800551c:	4680      	mov	r8, r0
 800551e:	b910      	cbnz	r0, 8005526 <lv_obj_refr_size+0x39a>
 8005520:	4638      	mov	r0, r7
 8005522:	f018 f97f 	bl	801d824 <lv_obj_scrollbar_invalidate>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8005526:	8ae3      	ldrh	r3, [r4, #22]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005528:	4620      	mov	r0, r4
        obj->coords.x1 = obj->coords.x2 - w + 1;
 800552a:	b2b6      	uxth	r6, r6
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800552c:	3b01      	subs	r3, #1
 800552e:	442b      	add	r3, r5
 8005530:	8363      	strh	r3, [r4, #26]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005532:	f016 ffe3 	bl	801c4fc <lv_obj_get_style_base_dir.constprop.0>
 8005536:	2801      	cmp	r0, #1
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8005538:	aa0a      	add	r2, sp, #40	; 0x28
 800553a:	f04f 0129 	mov.w	r1, #41	; 0x29
        obj->coords.x1 = obj->coords.x2 - w + 1;
 800553e:	bf08      	it	eq
 8005540:	8b23      	ldrheq	r3, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8005542:	4620      	mov	r0, r4
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8005544:	bf15      	itete	ne
 8005546:	8aa3      	ldrhne	r3, [r4, #20]
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8005548:	3301      	addeq	r3, #1
        obj->coords.x2 = obj->coords.x1 + w - 1;
 800554a:	f103 33ff 	addne.w	r3, r3, #4294967295
        obj->coords.x1 = obj->coords.x2 - w + 1;
 800554e:	1b9b      	subeq	r3, r3, r6
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8005550:	bf16      	itet	ne
 8005552:	18f6      	addne	r6, r6, r3
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8005554:	82a3      	strheq	r3, [r4, #20]
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8005556:	8326      	strhne	r6, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8005558:	f7ff f8c0 	bl	80046dc <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800555c:	4622      	mov	r2, r4
 800555e:	2122      	movs	r1, #34	; 0x22
 8005560:	4638      	mov	r0, r7
 8005562:	f7ff f8bb 	bl	80046dc <lv_event_send>
    lv_obj_invalidate(obj);
 8005566:	4620      	mov	r0, r4
 8005568:	f017 fb64 	bl	801cc34 <lv_obj_invalidate>
    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 800556c:	2100      	movs	r1, #0
 800556e:	4620      	mov	r0, r4
 8005570:	f018 f978 	bl	801d864 <lv_obj_readjust_scroll>
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8005574:	2200      	movs	r2, #0
 8005576:	a90c      	add	r1, sp, #48	; 0x30
 8005578:	4648      	mov	r0, r9
 800557a:	f01e ff79 	bl	8024470 <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 800557e:	f1b8 0f00 	cmp.w	r8, #0
 8005582:	d100      	bne.n	8005586 <lv_obj_refr_size+0x3fa>
 8005584:	b110      	cbz	r0, 800558c <lv_obj_refr_size+0x400>
 8005586:	4638      	mov	r0, r7
 8005588:	f018 f94c 	bl	801d824 <lv_obj_scrollbar_invalidate>
    lv_obj_refresh_ext_draw_size(obj);
 800558c:	4620      	mov	r0, r4
 800558e:	f016 ff83 	bl	801c498 <lv_obj_refresh_ext_draw_size>
    return true;
 8005592:	2001      	movs	r0, #1
 8005594:	e605      	b.n	80051a2 <lv_obj_refr_size+0x16>
        if(h_is_content) {
 8005596:	f242 78d1 	movw	r8, #10193	; 0x27d1
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 800559a:	f017 f96d 	bl	801c878 <lv_obj_get_content_height>
 800559e:	9002      	str	r0, [sp, #8]
        if(h_is_content) {
 80055a0:	45c2      	cmp	sl, r8
 80055a2:	d172      	bne.n	800568a <lv_obj_refr_size+0x4fe>
}

static lv_coord_t calc_content_height(lv_obj_t * obj)
{
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 80055a4:	2200      	movs	r2, #0
 80055a6:	4620      	mov	r0, r4
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;

    lv_coord_t child_res = LV_COORD_MIN;
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
    for(i = 0; i < child_cnt; i++) {
 80055a8:	f04f 0b00 	mov.w	fp, #0
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 80055ac:	4611      	mov	r1, r2
 80055ae:	f000 fcaf 	bl	8005f10 <lv_obj_scroll_to_y>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80055b2:	4620      	mov	r0, r4
 80055b4:	f016 ffa9 	bl	801c50a <lv_obj_get_style_border_width.constprop.0>
 80055b8:	4605      	mov	r5, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80055ba:	4620      	mov	r0, r4
 80055bc:	f016 ffc1 	bl	801c542 <lv_obj_get_style_pad_top.constprop.0>
 80055c0:	fa1f f885 	uxth.w	r8, r5
 80055c4:	fa10 f585 	uxtah	r5, r0, r5
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 80055c8:	4620      	mov	r0, r4
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80055ca:	b2ab      	uxth	r3, r5
 80055cc:	9303      	str	r3, [sp, #12]
 80055ce:	b22b      	sxth	r3, r5
 80055d0:	9307      	str	r3, [sp, #28]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 80055d2:	f016 ffaf 	bl	801c534 <lv_obj_get_style_pad_bottom.constprop.0>
 80055d6:	4480      	add	r8, r0
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 80055d8:	4620      	mov	r0, r4
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 80055da:	fa1f f388 	uxth.w	r3, r8
    lv_coord_t child_res = LV_COORD_MIN;
 80055de:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80056dc <lv_obj_refr_size+0x550>
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 80055e2:	9304      	str	r3, [sp, #16]
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 80055e4:	f017 f98e 	bl	801c904 <lv_obj_get_self_height>
 80055e8:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80055ec:	189d      	adds	r5, r3, r2
 80055ee:	4405      	add	r5, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80055f0:	4620      	mov	r0, r4
 80055f2:	f018 fddb 	bl	801e1ac <lv_obj_get_child_cnt>
 80055f6:	9008      	str	r0, [sp, #32]
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 80055f8:	b22d      	sxth	r5, r5
    for(i = 0; i < child_cnt; i++) {
 80055fa:	9b08      	ldr	r3, [sp, #32]
 80055fc:	455b      	cmp	r3, fp
 80055fe:	d10a      	bne.n	8005616 <lv_obj_refr_size+0x48a>
        else {
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
        }
    }

    if(child_res != LV_COORD_MIN) {
 8005600:	4b36      	ldr	r3, [pc, #216]	; (80056dc <lv_obj_refr_size+0x550>)
 8005602:	4598      	cmp	r8, r3
 8005604:	f43f af45 	beq.w	8005492 <lv_obj_refr_size+0x306>
        child_res += pad_bottom;
 8005608:	9b04      	ldr	r3, [sp, #16]
 800560a:	4443      	add	r3, r8
        return LV_MAX(child_res, self_h);
 800560c:	b21b      	sxth	r3, r3
 800560e:	429d      	cmp	r5, r3
 8005610:	bfb8      	it	lt
 8005612:	461d      	movlt	r5, r3
 8005614:	e73d      	b.n	8005492 <lv_obj_refr_size+0x306>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005616:	68a3      	ldr	r3, [r4, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005618:	4931      	ldr	r1, [pc, #196]	; (80056e0 <lv_obj_refr_size+0x554>)
        lv_obj_t * child = obj->spec_attr->children[i];
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f853 902b 	ldr.w	r9, [r3, fp, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005620:	4648      	mov	r0, r9
 8005622:	f016 f9f9 	bl	801ba18 <lv_obj_has_flag_any>
 8005626:	bb68      	cbnz	r0, 8005684 <lv_obj_refr_size+0x4f8>
        if(!lv_obj_is_layout_positioned(child)) {
 8005628:	4648      	mov	r0, r9
 800562a:	f7ff fc37 	bl	8004e9c <lv_obj_is_layout_positioned>
 800562e:	4601      	mov	r1, r0
 8005630:	b940      	cbnz	r0, 8005644 <lv_obj_refr_size+0x4b8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8005632:	9009      	str	r0, [sp, #36]	; 0x24
 8005634:	2209      	movs	r2, #9
 8005636:	4648      	mov	r0, r9
 8005638:	f018 fa22 	bl	801da80 <lv_obj_get_style_prop>
            switch(align) {
 800563c:	9909      	ldr	r1, [sp, #36]	; 0x24
    return (lv_align_t)v.num;
 800563e:	b2c0      	uxtb	r0, r0
 8005640:	2803      	cmp	r0, #3
 8005642:	d809      	bhi.n	8005658 <lv_obj_refr_size+0x4cc>
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8005644:	f9b9 301a 	ldrsh.w	r3, [r9, #26]
 8005648:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	3301      	adds	r3, #1
 8005650:	4543      	cmp	r3, r8
 8005652:	bfb8      	it	lt
 8005654:	4643      	movlt	r3, r8
 8005656:	e013      	b.n	8005680 <lv_obj_refr_size+0x4f4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8005658:	2208      	movs	r2, #8
 800565a:	4648      	mov	r0, r9
 800565c:	f018 fa10 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005660:	b200      	sxth	r0, r0
                    if(lv_obj_get_style_y(child, 0) == 0) {
 8005662:	b978      	cbnz	r0, 8005684 <lv_obj_refr_size+0x4f8>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005664:	f8b9 201a 	ldrh.w	r2, [r9, #26]
 8005668:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800566c:	3201      	adds	r2, #1
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 800566e:	9907      	ldr	r1, [sp, #28]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	b29a      	uxth	r2, r3
 8005674:	fa01 f383 	sxtah	r3, r1, r3
 8005678:	4598      	cmp	r8, r3
 800567a:	dc03      	bgt.n	8005684 <lv_obj_refr_size+0x4f8>
 800567c:	9b03      	ldr	r3, [sp, #12]
 800567e:	4413      	add	r3, r2
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8005680:	fa0f f883 	sxth.w	r8, r3
    for(i = 0; i < child_cnt; i++) {
 8005684:	f10b 0b01 	add.w	fp, fp, #1
 8005688:	e7b7      	b.n	80055fa <lv_obj_refr_size+0x46e>
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 800568a:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800568e:	f011 0102 	ands.w	r1, r1, #2
 8005692:	d117      	bne.n	80056c4 <lv_obj_refr_size+0x538>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8005694:	2204      	movs	r2, #4
 8005696:	4638      	mov	r0, r7
 8005698:	f018 f9f2 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800569c:	b200      	sxth	r0, r0
 800569e:	4540      	cmp	r0, r8
 80056a0:	d110      	bne.n	80056c4 <lv_obj_refr_size+0x538>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 80056a2:	4620      	mov	r0, r4
 80056a4:	f016 ff31 	bl	801c50a <lv_obj_get_style_border_width.constprop.0>
 80056a8:	4680      	mov	r8, r0
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 80056aa:	4620      	mov	r0, r4
 80056ac:	f016 ff49 	bl	801c542 <lv_obj_get_style_pad_top.constprop.0>
 80056b0:	eb00 0508 	add.w	r5, r0, r8
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 80056b4:	4620      	mov	r0, r4
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 80056b6:	b2ad      	uxth	r5, r5
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 80056b8:	f016 ff3c 	bl	801c534 <lv_obj_get_style_pad_bottom.constprop.0>
 80056bc:	4440      	add	r0, r8
 80056be:	4405      	add	r5, r0
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 80056c0:	b22d      	sxth	r5, r5
 80056c2:	e6e6      	b.n	8005492 <lv_obj_refr_size+0x306>
 80056c4:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80056c8:	9b02      	ldr	r3, [sp, #8]
 80056ca:	bfc8      	it	gt
 80056cc:	f5c5 757a 	rsbgt	r5, r5, #1000	; 0x3e8
 80056d0:	435d      	muls	r5, r3
 80056d2:	2364      	movs	r3, #100	; 0x64
 80056d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80056d8:	e7f2      	b.n	80056c0 <lv_obj_refr_size+0x534>
 80056da:	bf00      	nop
 80056dc:	ffffe001 	.word	0xffffe001
 80056e0:	00040001 	.word	0x00040001

080056e4 <layout_update_core>:
    }

}

static void layout_update_core(lv_obj_t * obj)
{
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	4604      	mov	r4, r0
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
    for(i = 0; i < child_cnt; i++) {
 80056e8:	2500      	movs	r5, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80056ea:	f018 fd5f 	bl	801e1ac <lv_obj_get_child_cnt>
 80056ee:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 80056f0:	42b5      	cmp	r5, r6
 80056f2:	d127      	bne.n	8005744 <layout_update_core+0x60>
        lv_obj_t * child = obj->spec_attr->children[i];
        layout_update_core(child);
    }

    if(obj->layout_inv == 0) return;
 80056f4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80056f8:	07da      	lsls	r2, r3, #31
 80056fa:	d52b      	bpl.n	8005754 <layout_update_core+0x70>

    obj->layout_inv = 0;
 80056fc:	f36f 0300 	bfc	r3, #0, #1

    lv_obj_refr_size(obj);
 8005700:	4620      	mov	r0, r4
    obj->layout_inv = 0;
 8005702:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_obj_refr_size(obj);
 8005706:	f7ff fd41 	bl	800518c <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 800570a:	4620      	mov	r0, r4
 800570c:	f7ff fc0e 	bl	8004f2c <lv_obj_refr_pos>

    if(child_cnt > 0) {
 8005710:	b305      	cbz	r5, 8005754 <layout_update_core+0x70>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8005712:	220a      	movs	r2, #10
 8005714:	2100      	movs	r1, #0
 8005716:	4620      	mov	r0, r4
 8005718:	f018 f9b2 	bl	801da80 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 800571c:	b283      	uxth	r3, r0
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
        if(layout_id > 0 && layout_id <= layout_cnt) {
 800571e:	b1cb      	cbz	r3, 8005754 <layout_update_core+0x70>
 8005720:	4a0d      	ldr	r2, [pc, #52]	; (8005758 <layout_update_core+0x74>)
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d315      	bcc.n	8005754 <layout_update_core+0x70>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 8005728:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800572c:	4a0b      	ldr	r2, [pc, #44]	; (800575c <layout_update_core+0x78>)
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 800572e:	4620      	mov	r0, r4
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 8005730:	3b01      	subs	r3, #1
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 8005738:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800573c:	6849      	ldr	r1, [r1, #4]
        }
    }
}
 800573e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 8005742:	4718      	bx	r3
        lv_obj_t * child = obj->spec_attr->children[i];
 8005744:	68a3      	ldr	r3, [r4, #8]
 8005746:	681b      	ldr	r3, [r3, #0]
        layout_update_core(child);
 8005748:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    for(i = 0; i < child_cnt; i++) {
 800574c:	3501      	adds	r5, #1
        layout_update_core(child);
 800574e:	f7ff ffc9 	bl	80056e4 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 8005752:	e7cd      	b.n	80056f0 <layout_update_core+0xc>
}
 8005754:	bd70      	pop	{r4, r5, r6, pc}
 8005756:	bf00      	nop
 8005758:	2400115c 	.word	0x2400115c
 800575c:	240013ac 	.word	0x240013ac

08005760 <lv_obj_update_layout>:
{
 8005760:	b538      	push	{r3, r4, r5, lr}
    if(mutex) {
 8005762:	4d0b      	ldr	r5, [pc, #44]	; (8005790 <lv_obj_update_layout+0x30>)
 8005764:	782b      	ldrb	r3, [r5, #0]
 8005766:	b953      	cbnz	r3, 800577e <lv_obj_update_layout+0x1e>
    mutex = true;
 8005768:	2301      	movs	r3, #1
 800576a:	702b      	strb	r3, [r5, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 800576c:	f018 fd04 	bl	801e178 <lv_obj_get_screen>
 8005770:	4604      	mov	r4, r0
    while(scr->scr_layout_inv) {
 8005772:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005776:	f013 0202 	ands.w	r2, r3, #2
 800577a:	d101      	bne.n	8005780 <lv_obj_update_layout+0x20>
    mutex = false;
 800577c:	702a      	strb	r2, [r5, #0]
}
 800577e:	bd38      	pop	{r3, r4, r5, pc}
        scr->scr_layout_inv = 0;
 8005780:	f36f 0341 	bfc	r3, #1, #1
        layout_update_core(scr);
 8005784:	4620      	mov	r0, r4
        scr->scr_layout_inv = 0;
 8005786:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        layout_update_core(scr);
 800578a:	f7ff ffab 	bl	80056e4 <layout_update_core>
 800578e:	e7f0      	b.n	8005772 <lv_obj_update_layout+0x12>
 8005790:	24010d2d 	.word	0x24010d2d

08005794 <lv_obj_align_to>:
{
 8005794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	b085      	sub	sp, #20
 800579a:	468a      	mov	sl, r1
 800579c:	4604      	mov	r4, r0
 800579e:	4691      	mov	r9, r2
 80057a0:	9301      	str	r3, [sp, #4]
 80057a2:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80057a6:	9303      	str	r3, [sp, #12]
    lv_obj_update_layout(obj);
 80057a8:	f7ff ffda 	bl	8005760 <lv_obj_update_layout>
    if(base == NULL) base = lv_obj_get_parent(obj);
 80057ac:	f1ba 0f00 	cmp.w	sl, #0
 80057b0:	d103      	bne.n	80057ba <lv_obj_align_to+0x26>
 80057b2:	4620      	mov	r0, r4
 80057b4:	f018 fce8 	bl	801e188 <lv_obj_get_parent>
 80057b8:	4682      	mov	sl, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80057ba:	4620      	mov	r0, r4
 80057bc:	f018 fce4 	bl	801e188 <lv_obj_get_parent>
 80057c0:	4605      	mov	r5, r0
    lv_coord_t pborder = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 80057c2:	f016 fea2 	bl	801c50a <lv_obj_get_style_border_width.constprop.0>
 80057c6:	4680      	mov	r8, r0
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + pborder;
 80057c8:	4628      	mov	r0, r5
 80057ca:	f016 feac 	bl	801c526 <lv_obj_get_style_pad_left.constprop.0>
 80057ce:	fa1f f688 	uxth.w	r6, r8
 80057d2:	fa10 f888 	uxtah	r8, r0, r8
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 80057d6:	4628      	mov	r0, r5
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + pborder;
 80057d8:	fa0f f388 	sxth.w	r3, r8
 80057dc:	9300      	str	r3, [sp, #0]
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 80057de:	f016 feb0 	bl	801c542 <lv_obj_get_style_pad_top.constprop.0>
 80057e2:	4406      	add	r6, r0
    lv_coord_t bborder = lv_obj_get_style_border_width(base, LV_PART_MAIN);
 80057e4:	4650      	mov	r0, sl
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 80057e6:	b233      	sxth	r3, r6
 80057e8:	9302      	str	r3, [sp, #8]
    lv_coord_t bborder = lv_obj_get_style_border_width(base, LV_PART_MAIN);
 80057ea:	f016 fe8e 	bl	801c50a <lv_obj_get_style_border_width.constprop.0>
 80057ee:	4607      	mov	r7, r0
    lv_coord_t bleft = lv_obj_get_style_pad_left(base, LV_PART_MAIN) + bborder;
 80057f0:	4650      	mov	r0, sl
 80057f2:	f016 fe98 	bl	801c526 <lv_obj_get_style_pad_left.constprop.0>
 80057f6:	b2be      	uxth	r6, r7
 80057f8:	fa10 f387 	uxtah	r3, r0, r7
    lv_coord_t btop = lv_obj_get_style_pad_top(base, LV_PART_MAIN) + bborder;
 80057fc:	4650      	mov	r0, sl
    lv_coord_t bleft = lv_obj_get_style_pad_left(base, LV_PART_MAIN) + bborder;
 80057fe:	b29f      	uxth	r7, r3
 8005800:	fa0f f883 	sxth.w	r8, r3
    lv_coord_t btop = lv_obj_get_style_pad_top(base, LV_PART_MAIN) + bborder;
 8005804:	f016 fe9d 	bl	801c542 <lv_obj_get_style_pad_top.constprop.0>
 8005808:	1832      	adds	r2, r6, r0
 800580a:	b296      	uxth	r6, r2
 800580c:	fa0f fb82 	sxth.w	fp, r2
    if(align == LV_ALIGN_DEFAULT) {
 8005810:	f1b9 0f00 	cmp.w	r9, #0
 8005814:	d10e      	bne.n	8005834 <lv_obj_align_to+0xa0>
        if(lv_obj_get_style_base_dir(base, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8005816:	4650      	mov	r0, sl
 8005818:	f016 fe70 	bl	801c4fc <lv_obj_get_style_base_dir.constprop.0>
 800581c:	2801      	cmp	r0, #1
 800581e:	d178      	bne.n	8005912 <lv_obj_align_to+0x17e>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8005820:	4650      	mov	r0, sl
 8005822:	f017 f813 	bl	801c84c <lv_obj_get_content_width>
 8005826:	8aa3      	ldrh	r3, [r4, #20]
 8005828:	8b26      	ldrh	r6, [r4, #24]
 800582a:	3b01      	subs	r3, #1
 800582c:	1b9b      	subs	r3, r3, r6
 800582e:	443b      	add	r3, r7
 8005830:	4403      	add	r3, r0
 8005832:	e06c      	b.n	800590e <lv_obj_align_to+0x17a>
    switch(align) {
 8005834:	f109 39ff 	add.w	r9, r9, #4294967295
 8005838:	f1b9 0f14 	cmp.w	r9, #20
 800583c:	d82c      	bhi.n	8005898 <lv_obj_align_to+0x104>
 800583e:	a001      	add	r0, pc, #4	; (adr r0, 8005844 <lv_obj_align_to+0xb0>)
 8005840:	f850 f029 	ldr.w	pc, [r0, r9, lsl #2]
 8005844:	08005913 	.word	0x08005913
 8005848:	080058ed 	.word	0x080058ed
 800584c:	08005821 	.word	0x08005821
 8005850:	080059a1 	.word	0x080059a1
 8005854:	0800597b 	.word	0x0800597b
 8005858:	080059b9 	.word	0x080059b9
 800585c:	080058c9 	.word	0x080058c9
 8005860:	080059cd 	.word	0x080059cd
 8005864:	080058a3 	.word	0x080058a3
 8005868:	08005a0b 	.word	0x08005a0b
 800586c:	08005a19 	.word	0x08005a19
 8005870:	08005a51 	.word	0x08005a51
 8005874:	08005a65 	.word	0x08005a65
 8005878:	08005a71 	.word	0x08005a71
 800587c:	08005aab 	.word	0x08005aab
 8005880:	08005abf 	.word	0x08005abf
 8005884:	08005ad1 	.word	0x08005ad1
 8005888:	08005b09 	.word	0x08005b09
 800588c:	08005b23 	.word	0x08005b23
 8005890:	08005b2f 	.word	0x08005b2f
 8005894:	08005b3b 	.word	0x08005b3b
    lv_coord_t y = 0;
 8005898:	f04f 0b00 	mov.w	fp, #0
            x = 0;
 800589c:	f04f 0800 	mov.w	r8, #0
            break;
 80058a0:	e037      	b.n	8005912 <lv_obj_align_to+0x17e>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 80058a2:	4650      	mov	r0, sl
 80058a4:	f016 ffd2 	bl	801c84c <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80058a8:	8b23      	ldrh	r3, [r4, #24]
 80058aa:	8aa2      	ldrh	r2, [r4, #20]
 80058ac:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80058b0:	3301      	adds	r3, #1
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80058b8:	fa02 f383 	sxtah	r3, r2, r3
 80058bc:	eba7 0363 	sub.w	r3, r7, r3, asr #1
 80058c0:	eb03 0360 	add.w	r3, r3, r0, asr #1
 80058c4:	fa0f f883 	sxth.w	r8, r3
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 80058c8:	4650      	mov	r0, sl
 80058ca:	f016 ffd5 	bl	801c878 <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80058ce:	8b62      	ldrh	r2, [r4, #26]
 80058d0:	8ae7      	ldrh	r7, [r4, #22]
 80058d2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80058d6:	3201      	adds	r2, #1
 80058d8:	1bd2      	subs	r2, r2, r7
 80058da:	f3c2 37c0 	ubfx	r7, r2, #15, #1
 80058de:	fa07 f282 	sxtah	r2, r7, r2
 80058e2:	eba6 0262 	sub.w	r2, r6, r2, asr #1
 80058e6:	eb02 0260 	add.w	r2, r2, r0, asr #1
 80058ea:	e062      	b.n	80059b2 <lv_obj_align_to+0x21e>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 80058ec:	4650      	mov	r0, sl
 80058ee:	f016 ffad 	bl	801c84c <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80058f2:	8b23      	ldrh	r3, [r4, #24]
 80058f4:	8aa6      	ldrh	r6, [r4, #20]
 80058f6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80058fa:	3301      	adds	r3, #1
 80058fc:	1b9b      	subs	r3, r3, r6
 80058fe:	f3c3 36c0 	ubfx	r6, r3, #15, #1
 8005902:	fa06 f383 	sxtah	r3, r6, r3
 8005906:	eba7 0363 	sub.w	r3, r7, r3, asr #1
 800590a:	eb03 0360 	add.w	r3, r3, r0, asr #1
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 800590e:	fa0f f883 	sxth.w	r8, r3
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005912:	4628      	mov	r0, r5
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 8005914:	fa1f f688 	uxth.w	r6, r8
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005918:	f016 fdf0 	bl	801c4fc <lv_obj_get_style_base_dir.constprop.0>
 800591c:	f9ba 3014 	ldrsh.w	r3, [sl, #20]
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 8005920:	9a01      	ldr	r2, [sp, #4]
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005922:	2801      	cmp	r0, #1
 8005924:	f9b5 0014 	ldrsh.w	r0, [r5, #20]
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 8005928:	4413      	add	r3, r2
 800592a:	eba3 0700 	sub.w	r7, r3, r0
 800592e:	4628      	mov	r0, r5
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005930:	f040 8109 	bne.w	8005b46 <lv_obj_align_to+0x3b2>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 8005934:	f000 f9ca 	bl	8005ccc <lv_obj_get_scroll_right>
 8005938:	9b00      	ldr	r3, [sp, #0]
 800593a:	4438      	add	r0, r7
 800593c:	1ac0      	subs	r0, r0, r3
 800593e:	4430      	add	r0, r6
 8005940:	b206      	sxth	r6, r0
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 8005942:	9b03      	ldr	r3, [sp, #12]
 8005944:	4628      	mov	r0, r5
 8005946:	f9ba 7016 	ldrsh.w	r7, [sl, #22]
 800594a:	441f      	add	r7, r3
 800594c:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8005950:	1aff      	subs	r7, r7, r3
 8005952:	f017 fb0e 	bl	801cf72 <lv_obj_get_scroll_top>
 8005956:	9b02      	ldr	r3, [sp, #8]
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 8005958:	2200      	movs	r2, #0
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 800595a:	19c5      	adds	r5, r0, r7
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 800595c:	2101      	movs	r1, #1
 800595e:	4620      	mov	r0, r4
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 8005960:	1aed      	subs	r5, r5, r3
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 8005962:	f018 fbf0 	bl	801e146 <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x, y);
 8005966:	4631      	mov	r1, r6
 8005968:	4620      	mov	r0, r4
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 800596a:	445d      	add	r5, fp
 800596c:	b2ad      	uxth	r5, r5
    lv_obj_set_pos(obj, x, y);
 800596e:	b22a      	sxth	r2, r5
}
 8005970:	b005      	add	sp, #20
 8005972:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_set_pos(obj, x, y);
 8005976:	f016 be98 	b.w	801c6aa <lv_obj_set_pos>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 800597a:	4650      	mov	r0, sl
 800597c:	f016 ff66 	bl	801c84c <lv_obj_get_content_width>
 8005980:	8b23      	ldrh	r3, [r4, #24]
 8005982:	8aa2      	ldrh	r2, [r4, #20]
 8005984:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005988:	3301      	adds	r3, #1
 800598a:	1a9b      	subs	r3, r3, r2
 800598c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8005990:	fa02 f383 	sxtah	r3, r2, r3
 8005994:	eba7 0363 	sub.w	r3, r7, r3, asr #1
 8005998:	eb03 0360 	add.w	r3, r3, r0, asr #1
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 800599c:	fa0f f883 	sxth.w	r8, r3
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 80059a0:	4650      	mov	r0, sl
 80059a2:	f016 ff69 	bl	801c878 <lv_obj_get_content_height>
 80059a6:	8ae2      	ldrh	r2, [r4, #22]
 80059a8:	8b67      	ldrh	r7, [r4, #26]
 80059aa:	3a01      	subs	r2, #1
 80059ac:	1bd2      	subs	r2, r2, r7
 80059ae:	4432      	add	r2, r6
 80059b0:	4402      	add	r2, r0
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80059b2:	fa0f fb82 	sxth.w	fp, r2
            break;
 80059b6:	e7ac      	b.n	8005912 <lv_obj_align_to+0x17e>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 80059b8:	4650      	mov	r0, sl
 80059ba:	f016 ff47 	bl	801c84c <lv_obj_get_content_width>
 80059be:	8aa3      	ldrh	r3, [r4, #20]
 80059c0:	8b22      	ldrh	r2, [r4, #24]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	443b      	add	r3, r7
 80059c8:	4403      	add	r3, r0
 80059ca:	e7e7      	b.n	800599c <lv_obj_align_to+0x208>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 80059cc:	4650      	mov	r0, sl
 80059ce:	f016 ff3d 	bl	801c84c <lv_obj_get_content_width>
 80059d2:	8aa3      	ldrh	r3, [r4, #20]
 80059d4:	8b22      	ldrh	r2, [r4, #24]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	1a9b      	subs	r3, r3, r2
 80059da:	441f      	add	r7, r3
 80059dc:	4407      	add	r7, r0
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 80059de:	4650      	mov	r0, sl
 80059e0:	f016 ff4a 	bl	801c878 <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80059e4:	8b62      	ldrh	r2, [r4, #26]
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 80059e6:	fa0f f887 	sxth.w	r8, r7
 80059ea:	8ae7      	ldrh	r7, [r4, #22]
 80059ec:	3201      	adds	r2, #1
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 80059ee:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80059f2:	1bd2      	subs	r2, r2, r7
 80059f4:	f3c2 37c0 	ubfx	r7, r2, #15, #1
 80059f8:	fa07 f282 	sxtah	r2, r7, r2
 80059fc:	eba6 0662 	sub.w	r6, r6, r2, asr #1
 8005a00:	eb06 0660 	add.w	r6, r6, r0, asr #1
 8005a04:	fa0f fb86 	sxth.w	fp, r6
            break;
 8005a08:	e783      	b.n	8005912 <lv_obj_align_to+0x17e>
            y = -lv_obj_get_height(obj);
 8005a0a:	8ae2      	ldrh	r2, [r4, #22]
 8005a0c:	8b63      	ldrh	r3, [r4, #26]
 8005a0e:	3a01      	subs	r2, #1
 8005a10:	1ad2      	subs	r2, r2, r3
 8005a12:	fa0f fb82 	sxth.w	fp, r2
 8005a16:	e741      	b.n	800589c <lv_obj_align_to+0x108>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005a18:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8005a1c:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005a20:	3301      	adds	r3, #1
 8005a22:	8aa0      	ldrh	r0, [r4, #20]
 8005a24:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005a26:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8005a2a:	fa02 f283 	sxtah	r2, r2, r3
 8005a2e:	8b23      	ldrh	r3, [r4, #24]
 8005a30:	3301      	adds	r3, #1
 8005a32:	1a1b      	subs	r3, r3, r0
 8005a34:	f3c3 30c0 	ubfx	r0, r3, #15, #1
 8005a38:	fa00 f383 	sxtah	r3, r0, r3
 8005a3c:	105b      	asrs	r3, r3, #1
 8005a3e:	ebc3 0362 	rsb	r3, r3, r2, asr #1
            y = -lv_obj_get_height(obj);
 8005a42:	8ae2      	ldrh	r2, [r4, #22]
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8005a44:	fa0f f883 	sxth.w	r8, r3
            y = -lv_obj_get_height(obj);
 8005a48:	8b60      	ldrh	r0, [r4, #26]
 8005a4a:	3a01      	subs	r2, #1
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8005a4c:	1a12      	subs	r2, r2, r0
 8005a4e:	e7b0      	b.n	80059b2 <lv_obj_align_to+0x21e>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8005a50:	8b22      	ldrh	r2, [r4, #24]
 8005a52:	8aa3      	ldrh	r3, [r4, #20]
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	f8ba 2018 	ldrh.w	r2, [sl, #24]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	e7ee      	b.n	8005a42 <lv_obj_align_to+0x2ae>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005a64:	f8ba 201a 	ldrh.w	r2, [sl, #26]
 8005a68:	f8ba 3016 	ldrh.w	r3, [sl, #22]
 8005a6c:	3201      	adds	r2, #1
 8005a6e:	e7cf      	b.n	8005a10 <lv_obj_align_to+0x27c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005a70:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8005a74:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	8aa0      	ldrh	r0, [r4, #20]
 8005a7c:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005a7e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8005a82:	fa02 f283 	sxtah	r2, r2, r3
 8005a86:	8b23      	ldrh	r3, [r4, #24]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	1a1b      	subs	r3, r3, r0
 8005a8c:	f3c3 30c0 	ubfx	r0, r3, #15, #1
 8005a90:	fa00 f383 	sxtah	r3, r0, r3
 8005a94:	105b      	asrs	r3, r3, #1
 8005a96:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005a9a:	f8ba 201a 	ldrh.w	r2, [sl, #26]
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8005a9e:	fa0f f883 	sxth.w	r8, r3
 8005aa2:	3201      	adds	r2, #1
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8005aa4:	f8ba 0016 	ldrh.w	r0, [sl, #22]
 8005aa8:	e7d0      	b.n	8005a4c <lv_obj_align_to+0x2b8>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8005aaa:	8b22      	ldrh	r2, [r4, #24]
 8005aac:	8aa3      	ldrh	r3, [r4, #20]
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	f8ba 2018 	ldrh.w	r2, [sl, #24]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	e7ed      	b.n	8005a9a <lv_obj_align_to+0x306>
            x = -lv_obj_get_width(obj);
 8005abe:	8aa3      	ldrh	r3, [r4, #20]
 8005ac0:	8b22      	ldrh	r2, [r4, #24]
 8005ac2:	3b01      	subs	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005ac4:	1a9b      	subs	r3, r3, r2
            y = 0;
 8005ac6:	f04f 0b00 	mov.w	fp, #0
 8005aca:	fa0f f883 	sxth.w	r8, r3
            break;
 8005ace:	e720      	b.n	8005912 <lv_obj_align_to+0x17e>
            x = -lv_obj_get_width(obj);
 8005ad0:	8aa3      	ldrh	r3, [r4, #20]
 8005ad2:	8b22      	ldrh	r2, [r4, #24]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005ad8:	f8ba 201a 	ldrh.w	r2, [sl, #26]
 8005adc:	f8ba 0016 	ldrh.w	r0, [sl, #22]
 8005ae0:	3201      	adds	r2, #1
 8005ae2:	8ae6      	ldrh	r6, [r4, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005ae4:	fa0f f883 	sxth.w	r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005ae8:	1a12      	subs	r2, r2, r0
            y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8005aea:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8005aee:	fa00 f082 	sxtah	r0, r0, r2
 8005af2:	8b62      	ldrh	r2, [r4, #26]
 8005af4:	3201      	adds	r2, #1
 8005af6:	1b92      	subs	r2, r2, r6
 8005af8:	f3c2 36c0 	ubfx	r6, r2, #15, #1
 8005afc:	fa06 f282 	sxtah	r2, r6, r2
 8005b00:	1052      	asrs	r2, r2, #1
 8005b02:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 8005b06:	e754      	b.n	80059b2 <lv_obj_align_to+0x21e>
            x = -lv_obj_get_width(obj);
 8005b08:	8aa3      	ldrh	r3, [r4, #20]
 8005b0a:	8b22      	ldrh	r2, [r4, #24]
 8005b0c:	3b01      	subs	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005b0e:	1a9b      	subs	r3, r3, r2
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8005b10:	8b60      	ldrh	r0, [r4, #26]
 8005b12:	8ae2      	ldrh	r2, [r4, #22]
 8005b14:	fa0f f883 	sxth.w	r8, r3
 8005b18:	1a12      	subs	r2, r2, r0
 8005b1a:	f8ba 001a 	ldrh.w	r0, [sl, #26]
 8005b1e:	4402      	add	r2, r0
 8005b20:	e7c0      	b.n	8005aa4 <lv_obj_align_to+0x310>
 8005b22:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8005b26:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	e7ca      	b.n	8005ac4 <lv_obj_align_to+0x330>
 8005b2e:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8005b32:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005b36:	3301      	adds	r3, #1
 8005b38:	e7cd      	b.n	8005ad6 <lv_obj_align_to+0x342>
 8005b3a:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8005b3e:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 8005b42:	3301      	adds	r3, #1
 8005b44:	e7e3      	b.n	8005b0e <lv_obj_align_to+0x37a>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent) - pleft;
 8005b46:	f000 f859 	bl	8005bfc <lv_obj_get_scroll_left>
 8005b4a:	9b00      	ldr	r3, [sp, #0]
 8005b4c:	4438      	add	r0, r7
 8005b4e:	1ac0      	subs	r0, r0, r3
 8005b50:	4406      	add	r6, r0
 8005b52:	b236      	sxth	r6, r6
 8005b54:	e6f5      	b.n	8005942 <lv_obj_align_to+0x1ae>
 8005b56:	bf00      	nop

08005b58 <lv_obj_get_scroll_bottom>:
    if(obj->spec_attr == NULL) return 0;
    return -obj->spec_attr->scroll.y;
}

lv_coord_t lv_obj_get_scroll_bottom(lv_obj_t * obj)
{
 8005b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b5c:	4606      	mov	r6, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t child_res = LV_COORD_MIN;
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
    for(i = 0; i < child_cnt; i++) {
 8005b5e:	2400      	movs	r4, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005b60:	f018 fb24 	bl	801e1ac <lv_obj_get_child_cnt>
    lv_coord_t child_res = LV_COORD_MIN;
 8005b64:	4d23      	ldr	r5, [pc, #140]	; (8005bf4 <lv_obj_get_scroll_bottom+0x9c>)
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005b66:	4607      	mov	r7, r0
        lv_obj_t * child = obj->spec_attr->children[i];
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005b68:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005bf8 <lv_obj_get_scroll_bottom+0xa0>
    for(i = 0; i < child_cnt; i++) {
 8005b6c:	42bc      	cmp	r4, r7
 8005b6e:	d130      	bne.n	8005bd2 <lv_obj_get_scroll_bottom+0x7a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005b70:	2210      	movs	r2, #16
 8005b72:	2100      	movs	r1, #0
 8005b74:	4630      	mov	r0, r6
 8005b76:	f017 ff83 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005b7a:	2211      	movs	r2, #17
 8005b7c:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005b7e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005b80:	4630      	mov	r0, r6
 8005b82:	f017 ff7d 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005b86:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005b88:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f017 ff77 	bl	801da80 <lv_obj_get_style_prop>

    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);

    if(child_res != LV_COORD_MIN) {
 8005b92:	4b18      	ldr	r3, [pc, #96]	; (8005bf4 <lv_obj_get_scroll_bottom+0x9c>)
 8005b94:	4680      	mov	r8, r0
 8005b96:	429d      	cmp	r5, r3
 8005b98:	d004      	beq.n	8005ba4 <lv_obj_get_scroll_bottom+0x4c>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 8005b9a:	183b      	adds	r3, r7, r0
 8005b9c:	8b72      	ldrh	r2, [r6, #26]
 8005b9e:	1a9b      	subs	r3, r3, r2
 8005ba0:	442b      	add	r3, r5
 8005ba2:	b21d      	sxth	r5, r3
    }

    lv_coord_t self_h = lv_obj_get_self_height(obj);
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	f016 fead 	bl	801c904 <lv_obj_get_self_height>
 8005baa:	4681      	mov	r9, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8005bac:	4630      	mov	r0, r6
 8005bae:	f016 fe47 	bl	801c840 <lv_obj_get_height>
 8005bb2:	19e3      	adds	r3, r4, r7
 8005bb4:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 8005bb8:	444b      	add	r3, r9
 8005bba:	1a1b      	subs	r3, r3, r0
    self_h -= lv_obj_get_scroll_y(obj);
 8005bbc:	4630      	mov	r0, r6
 8005bbe:	f017 f9d2 	bl	801cf66 <lv_obj_get_scroll_y>
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8005bc2:	b29b      	uxth	r3, r3
    self_h -= lv_obj_get_scroll_y(obj);
 8005bc4:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_h);
 8005bc6:	b200      	sxth	r0, r0
}
 8005bc8:	42a8      	cmp	r0, r5
 8005bca:	bfb8      	it	lt
 8005bcc:	4628      	movlt	r0, r5
 8005bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lv_obj_t * child = obj->spec_attr->children[i];
 8005bd2:	68b3      	ldr	r3, [r6, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005bd4:	4649      	mov	r1, r9
        lv_obj_t * child = obj->spec_attr->children[i];
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005bdc:	4640      	mov	r0, r8
 8005bde:	f015 ff1b 	bl	801ba18 <lv_obj_has_flag_any>
 8005be2:	b920      	cbnz	r0, 8005bee <lv_obj_get_scroll_bottom+0x96>
        child_res = LV_MAX(child_res, child->coords.y2);
 8005be4:	f9b8 301a 	ldrsh.w	r3, [r8, #26]
 8005be8:	429d      	cmp	r5, r3
 8005bea:	bfb8      	it	lt
 8005bec:	461d      	movlt	r5, r3
    for(i = 0; i < child_cnt; i++) {
 8005bee:	3401      	adds	r4, #1
 8005bf0:	e7bc      	b.n	8005b6c <lv_obj_get_scroll_bottom+0x14>
 8005bf2:	bf00      	nop
 8005bf4:	ffffe001 	.word	0xffffe001
 8005bf8:	00040001 	.word	0x00040001

08005bfc <lv_obj_get_scroll_left>:

lv_coord_t lv_obj_get_scroll_left(lv_obj_t * obj)
{
 8005bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Normally can't scroll the object out on the left.
     *So simply use the current scroll position as "left size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8005c00:	2100      	movs	r1, #0
{
 8005c02:	4605      	mov	r5, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8005c04:	f017 f949 	bl	801ce9a <lv_obj_get_style_base_dir>
 8005c08:	2801      	cmp	r0, #1
 8005c0a:	d006      	beq.n	8005c1a <lv_obj_get_scroll_left+0x1e>
        if(obj->spec_attr == NULL) return 0;
 8005c0c:	68a8      	ldr	r0, [r5, #8]
 8005c0e:	b110      	cbz	r0, 8005c16 <lv_obj_get_scroll_left+0x1a>
        return -obj->spec_attr->scroll.x;
 8005c10:	8a00      	ldrh	r0, [r0, #16]
 8005c12:	4240      	negs	r0, r0
 8005c14:	b200      	sxth	r0, r0
    lv_coord_t self_w = lv_obj_get_self_width(obj);
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
    self_w += lv_obj_get_scroll_x(obj);

    return LV_MAX(child_res, self_w);
}
 8005c16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005c1a:	2213      	movs	r2, #19
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	4628      	mov	r0, r5
    lv_coord_t x1 = LV_COORD_MAX;
 8005c20:	f641 79ff 	movw	r9, #8191	; 0x1fff
 8005c24:	f017 ff2c 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005c28:	2212      	movs	r2, #18
 8005c2a:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005c2c:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005c2e:	4628      	mov	r0, r5
    for(i = 0; i < child_cnt; i++) {
 8005c30:	2600      	movs	r6, #0
 8005c32:	f017 ff25 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005c36:	2100      	movs	r1, #0
 8005c38:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005c3a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f017 ff1f 	bl	801da80 <lv_obj_get_style_prop>
 8005c42:	4680      	mov	r8, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005c44:	4628      	mov	r0, r5
 8005c46:	f018 fab1 	bl	801e1ac <lv_obj_get_child_cnt>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005c4a:	491e      	ldr	r1, [pc, #120]	; (8005cc4 <lv_obj_get_scroll_left+0xc8>)
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005c4c:	4682      	mov	sl, r0
    for(i = 0; i < child_cnt; i++) {
 8005c4e:	45b2      	cmp	sl, r6
 8005c50:	d127      	bne.n	8005ca2 <lv_obj_get_scroll_left+0xa6>
    if(x1 != LV_COORD_MAX) {
 8005c52:	f641 73ff 	movw	r3, #8191	; 0x1fff
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8005c56:	b2a4      	uxth	r4, r4
 8005c58:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8005c5c:	4628      	mov	r0, r5
    if(x1 != LV_COORD_MAX) {
 8005c5e:	4599      	cmp	r9, r3
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8005c60:	bf1c      	itt	ne
 8005c62:	eb04 0608 	addne.w	r6, r4, r8
 8005c66:	8aab      	ldrhne	r3, [r5, #20]
 8005c68:	443c      	add	r4, r7
        child_res = LV_COORD_MIN;
 8005c6a:	bf0c      	ite	eq
 8005c6c:	4e16      	ldreq	r6, [pc, #88]	; (8005cc8 <lv_obj_get_scroll_left+0xcc>)
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8005c6e:	18f6      	addne	r6, r6, r3
 8005c70:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8005c74:	bf1c      	itt	ne
 8005c76:	eba6 0609 	subne.w	r6, r6, r9
 8005c7a:	b236      	sxthne	r6, r6
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8005c7c:	f7ff f948 	bl	8004f10 <lv_obj_get_self_width>
 8005c80:	4681      	mov	r9, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8005c82:	4628      	mov	r0, r5
 8005c84:	444c      	add	r4, r9
 8005c86:	f016 fdd5 	bl	801c834 <lv_obj_get_width>
 8005c8a:	4603      	mov	r3, r0
    self_w += lv_obj_get_scroll_x(obj);
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	b2a4      	uxth	r4, r4
 8005c90:	f017 f963 	bl	801cf5a <lv_obj_get_scroll_x>
 8005c94:	4404      	add	r4, r0
 8005c96:	1ae0      	subs	r0, r4, r3
    return LV_MAX(child_res, self_w);
 8005c98:	b200      	sxth	r0, r0
 8005c9a:	42b0      	cmp	r0, r6
 8005c9c:	bfb8      	it	lt
 8005c9e:	4630      	movlt	r0, r6
 8005ca0:	e7b9      	b.n	8005c16 <lv_obj_get_scroll_left+0x1a>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005ca2:	68ab      	ldr	r3, [r5, #8]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f853 b026 	ldr.w	fp, [r3, r6, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005caa:	4658      	mov	r0, fp
 8005cac:	f015 feb4 	bl	801ba18 <lv_obj_has_flag_any>
 8005cb0:	4904      	ldr	r1, [pc, #16]	; (8005cc4 <lv_obj_get_scroll_left+0xc8>)
 8005cb2:	b920      	cbnz	r0, 8005cbe <lv_obj_get_scroll_left+0xc2>
        x1 = LV_MIN(x1, child->coords.x1);
 8005cb4:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 8005cb8:	4599      	cmp	r9, r3
 8005cba:	bfa8      	it	ge
 8005cbc:	4699      	movge	r9, r3
    for(i = 0; i < child_cnt; i++) {
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7c5      	b.n	8005c4e <lv_obj_get_scroll_left+0x52>
 8005cc2:	bf00      	nop
 8005cc4:	00040001 	.word	0x00040001
 8005cc8:	ffffe001 	.word	0xffffe001

08005ccc <lv_obj_get_scroll_right>:

lv_coord_t lv_obj_get_scroll_right(lv_obj_t * obj)
{
 8005ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*With RTL base dir can't scroll to the object out on the right.
     *So simply use the current scroll position as "right size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005cd0:	2100      	movs	r1, #0
{
 8005cd2:	4606      	mov	r6, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005cd4:	f017 f8e1 	bl	801ce9a <lv_obj_get_style_base_dir>
 8005cd8:	2801      	cmp	r0, #1
 8005cda:	d105      	bne.n	8005ce8 <lv_obj_get_scroll_right+0x1c>
        if(obj->spec_attr == NULL) return 0;
 8005cdc:	68b0      	ldr	r0, [r6, #8]
 8005cde:	b108      	cbz	r0, 8005ce4 <lv_obj_get_scroll_right+0x18>
        return obj->spec_attr->scroll.x;
 8005ce0:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj);
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
    self_w -= lv_obj_get_scroll_x(obj);
    return LV_MAX(child_res, self_w);
}
 8005ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005ce8:	4630      	mov	r0, r6
    for(i = 0; i < child_cnt; i++) {
 8005cea:	2400      	movs	r4, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005cec:	f018 fa5e 	bl	801e1ac <lv_obj_get_child_cnt>
    lv_coord_t child_res = LV_COORD_MIN;
 8005cf0:	4d22      	ldr	r5, [pc, #136]	; (8005d7c <lv_obj_get_scroll_right+0xb0>)
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005cf2:	4607      	mov	r7, r0
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005cf4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005d80 <lv_obj_get_scroll_right+0xb4>
    for(i = 0; i < child_cnt; i++) {
 8005cf8:	42a7      	cmp	r7, r4
 8005cfa:	d12f      	bne.n	8005d5c <lv_obj_get_scroll_right+0x90>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005cfc:	2213      	movs	r2, #19
 8005cfe:	2100      	movs	r1, #0
 8005d00:	4630      	mov	r0, r6
 8005d02:	f017 febd 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005d06:	2212      	movs	r2, #18
 8005d08:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005d0a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f017 feb7 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005d12:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005d14:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005d16:	2100      	movs	r1, #0
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f017 feb1 	bl	801da80 <lv_obj_get_style_prop>
    if(child_res != LV_COORD_MIN) {
 8005d1e:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <lv_obj_get_scroll_right+0xb0>)
 8005d20:	4680      	mov	r8, r0
 8005d22:	429d      	cmp	r5, r3
 8005d24:	d004      	beq.n	8005d30 <lv_obj_get_scroll_right+0x64>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 8005d26:	1823      	adds	r3, r4, r0
 8005d28:	8b32      	ldrh	r2, [r6, #24]
 8005d2a:	1a9b      	subs	r3, r3, r2
 8005d2c:	442b      	add	r3, r5
 8005d2e:	b21d      	sxth	r5, r3
    self_w = lv_obj_get_self_width(obj);
 8005d30:	4630      	mov	r0, r6
 8005d32:	f7ff f8ed 	bl	8004f10 <lv_obj_get_self_width>
 8005d36:	4681      	mov	r9, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f016 fd7b 	bl	801c834 <lv_obj_get_width>
 8005d3e:	19e3      	adds	r3, r4, r7
 8005d40:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 8005d44:	444b      	add	r3, r9
 8005d46:	1a1b      	subs	r3, r3, r0
    self_w -= lv_obj_get_scroll_x(obj);
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f017 f906 	bl	801cf5a <lv_obj_get_scroll_x>
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8005d4e:	b29b      	uxth	r3, r3
    self_w -= lv_obj_get_scroll_x(obj);
 8005d50:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_w);
 8005d52:	b200      	sxth	r0, r0
 8005d54:	42a8      	cmp	r0, r5
 8005d56:	bfb8      	it	lt
 8005d58:	4628      	movlt	r0, r5
 8005d5a:	e7c3      	b.n	8005ce4 <lv_obj_get_scroll_right+0x18>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005d5c:	68b3      	ldr	r3, [r6, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005d5e:	4649      	mov	r1, r9
        lv_obj_t * child = obj->spec_attr->children[i];
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005d66:	4640      	mov	r0, r8
 8005d68:	f015 fe56 	bl	801ba18 <lv_obj_has_flag_any>
 8005d6c:	b920      	cbnz	r0, 8005d78 <lv_obj_get_scroll_right+0xac>
        child_res = LV_MAX(child_res, child->coords.x2);
 8005d6e:	f9b8 3018 	ldrsh.w	r3, [r8, #24]
 8005d72:	429d      	cmp	r5, r3
 8005d74:	bfb8      	it	lt
 8005d76:	461d      	movlt	r5, r3
    for(i = 0; i < child_cnt; i++) {
 8005d78:	3401      	adds	r4, #1
 8005d7a:	e7bd      	b.n	8005cf8 <lv_obj_get_scroll_right+0x2c>
 8005d7c:	ffffe001 	.word	0xffffe001
 8005d80:	00040001 	.word	0x00040001

08005d84 <lv_obj_get_scroll_end>:

void lv_obj_get_scroll_end(struct _lv_obj_t  * obj, lv_point_t * end)
{
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	460c      	mov	r4, r1
    lv_anim_t * a;
    a = lv_anim_get(obj, scroll_x_anim);
 8005d88:	490d      	ldr	r1, [pc, #52]	; (8005dc0 <lv_obj_get_scroll_end+0x3c>)
{
 8005d8a:	4605      	mov	r5, r0
    a = lv_anim_get(obj, scroll_x_anim);
 8005d8c:	f00c fb46 	bl	801241c <lv_anim_get>
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 8005d90:	b168      	cbz	r0, 8005dae <lv_obj_get_scroll_end+0x2a>
 8005d92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005d94:	425b      	negs	r3, r3
 8005d96:	b218      	sxth	r0, r3
 8005d98:	8020      	strh	r0, [r4, #0]

    a = lv_anim_get(obj, scroll_y_anim);
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	4909      	ldr	r1, [pc, #36]	; (8005dc4 <lv_obj_get_scroll_end+0x40>)
 8005d9e:	f00c fb3d 	bl	801241c <lv_anim_get>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 8005da2:	b140      	cbz	r0, 8005db6 <lv_obj_get_scroll_end+0x32>
 8005da4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005da6:	4240      	negs	r0, r0
 8005da8:	b200      	sxth	r0, r0
 8005daa:	8060      	strh	r0, [r4, #2]
}
 8005dac:	bd38      	pop	{r3, r4, r5, pc}
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 8005dae:	4628      	mov	r0, r5
 8005db0:	f017 f8d3 	bl	801cf5a <lv_obj_get_scroll_x>
 8005db4:	e7f0      	b.n	8005d98 <lv_obj_get_scroll_end+0x14>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 8005db6:	4628      	mov	r0, r5
 8005db8:	f017 f8d5 	bl	801cf66 <lv_obj_get_scroll_y>
 8005dbc:	e7f5      	b.n	8005daa <lv_obj_get_scroll_end+0x26>
 8005dbe:	bf00      	nop
 8005dc0:	0801cfd5 	.word	0x0801cfd5
 8005dc4:	0801cfbd 	.word	0x0801cfbd

08005dc8 <lv_obj_scroll_by>:
    }
}


void lv_obj_scroll_by(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 8005dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dca:	4616      	mov	r6, r2
 8005dcc:	b093      	sub	sp, #76	; 0x4c
 8005dce:	4604      	mov	r4, r0
 8005dd0:	460d      	mov	r5, r1
    if(dx == 0 && dy == 0) return;
 8005dd2:	ea51 0206 	orrs.w	r2, r1, r6
 8005dd6:	d05e      	beq.n	8005e96 <lv_obj_scroll_by+0xce>
    if(anim_en == LV_ANIM_ON) {
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d15e      	bne.n	8005e9a <lv_obj_scroll_by+0xd2>
        lv_disp_t * d = lv_obj_get_disp(obj);
 8005ddc:	f000 fd46 	bl	800686c <lv_obj_get_disp>
 8005de0:	4607      	mov	r7, r0
        lv_anim_t a;
        lv_anim_init(&a);
 8005de2:	a801      	add	r0, sp, #4
 8005de4:	f00c fa8c 	bl	8012300 <lv_anim_init>
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8005de8:	4b3a      	ldr	r3, [pc, #232]	; (8005ed4 <lv_obj_scroll_by+0x10c>)
    a->var = var;
 8005dea:	9401      	str	r4, [sp, #4]
    a->ready_cb = ready_cb;
 8005dec:	9304      	str	r3, [sp, #16]
        lv_anim_set_var(&a, obj);
        lv_anim_set_ready_cb(&a, scroll_anim_ready_cb);

        if(dx) {
 8005dee:	b345      	cbz	r5, 8005e42 <lv_obj_scroll_by+0x7a>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 8005df0:	4638      	mov	r0, r7
 8005df2:	f00c f951 	bl	8012098 <lv_disp_get_hor_res>
 8005df6:	462a      	mov	r2, r5
 8005df8:	2100      	movs	r1, #0
 8005dfa:	f340 005d 	sbfx	r0, r0, #1, #30
 8005dfe:	f01e f995 	bl	802412c <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8005e02:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8005e06:	4603      	mov	r3, r0
            lv_anim_set_time(&a, t);
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 8005e08:	4620      	mov	r0, r4
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8005e0a:	bf28      	it	cs
 8005e0c:	f44f 73c8 	movcs.w	r3, #400	; 0x190
            lv_anim_set_values(&a, -sx, -sx + dx);
            lv_anim_set_exec_cb(&a, scroll_x_anim);
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8005e10:	aa01      	add	r2, sp, #4
 8005e12:	2109      	movs	r1, #9
    a->time = duration;
 8005e14:	2bc8      	cmp	r3, #200	; 0xc8
 8005e16:	bf38      	it	cc
 8005e18:	23c8      	movcc	r3, #200	; 0xc8
 8005e1a:	930c      	str	r3, [sp, #48]	; 0x30
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 8005e1c:	f017 f89d 	bl	801cf5a <lv_obj_get_scroll_x>
            lv_anim_set_values(&a, -sx, -sx + dx);
 8005e20:	4243      	negs	r3, r0
 8005e22:	1a28      	subs	r0, r5, r0
    a->current_value = start;
 8005e24:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8005e28:	4b2b      	ldr	r3, [pc, #172]	; (8005ed8 <lv_obj_scroll_by+0x110>)
    a->end_value = end;
 8005e2a:	900b      	str	r0, [sp, #44]	; 0x2c
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8005e2c:	4620      	mov	r0, r4
    a->exec_cb = exec_cb;
 8005e2e:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8005e30:	4b2a      	ldr	r3, [pc, #168]	; (8005edc <lv_obj_scroll_by+0x114>)
 8005e32:	9308      	str	r3, [sp, #32]
 8005e34:	f7fe fc52 	bl	80046dc <lv_event_send>
            if(res != LV_RES_OK) return;
 8005e38:	2801      	cmp	r0, #1
 8005e3a:	d12c      	bne.n	8005e96 <lv_obj_scroll_by+0xce>
            lv_anim_start(&a);
 8005e3c:	a801      	add	r0, sp, #4
 8005e3e:	f00c faab 	bl	8012398 <lv_anim_start>
        }

        if(dy) {
 8005e42:	b346      	cbz	r6, 8005e96 <lv_obj_scroll_by+0xce>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 8005e44:	4638      	mov	r0, r7
 8005e46:	f00c f937 	bl	80120b8 <lv_disp_get_ver_res>
 8005e4a:	4632      	mov	r2, r6
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	f340 005d 	sbfx	r0, r0, #1, #30
 8005e52:	f01e f96b 	bl	802412c <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8005e56:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
            lv_anim_set_values(&a, -sy, -sy + dy);
            lv_anim_set_exec_cb(&a,  scroll_y_anim);
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8005e5a:	aa01      	add	r2, sp, #4
 8005e5c:	f04f 0109 	mov.w	r1, #9
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8005e60:	bf28      	it	cs
 8005e62:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 8005e66:	28c8      	cmp	r0, #200	; 0xc8
 8005e68:	bf38      	it	cc
 8005e6a:	20c8      	movcc	r0, #200	; 0xc8
 8005e6c:	900c      	str	r0, [sp, #48]	; 0x30
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f017 f879 	bl	801cf66 <lv_obj_get_scroll_y>
            lv_anim_set_values(&a, -sy, -sy + dy);
 8005e74:	4243      	negs	r3, r0
 8005e76:	1a30      	subs	r0, r6, r0
    a->current_value = start;
 8005e78:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8005e7c:	4b18      	ldr	r3, [pc, #96]	; (8005ee0 <lv_obj_scroll_by+0x118>)
    a->end_value = end;
 8005e7e:	900b      	str	r0, [sp, #44]	; 0x2c
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8005e80:	4620      	mov	r0, r4
    a->exec_cb = exec_cb;
 8005e82:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8005e84:	4b15      	ldr	r3, [pc, #84]	; (8005edc <lv_obj_scroll_by+0x114>)
 8005e86:	9308      	str	r3, [sp, #32]
 8005e88:	f7fe fc28 	bl	80046dc <lv_event_send>
            if(res != LV_RES_OK) return;
 8005e8c:	2801      	cmp	r0, #1
 8005e8e:	d102      	bne.n	8005e96 <lv_obj_scroll_by+0xce>
            lv_anim_start(&a);
 8005e90:	a801      	add	r0, sp, #4
 8005e92:	f00c fa81 	bl	8012398 <lv_anim_start>
        if(res != LV_RES_OK) return;

        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
        if(res != LV_RES_OK) return;
    }
}
 8005e96:	b013      	add	sp, #76	; 0x4c
 8005e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_anim_del(obj, scroll_y_anim);
 8005e9a:	4911      	ldr	r1, [pc, #68]	; (8005ee0 <lv_obj_scroll_by+0x118>)
 8005e9c:	f00c fa4c 	bl	8012338 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 8005ea0:	490d      	ldr	r1, [pc, #52]	; (8005ed8 <lv_obj_scroll_by+0x110>)
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f00c fa48 	bl	8012338 <lv_anim_del>
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2109      	movs	r1, #9
 8005eac:	4620      	mov	r0, r4
 8005eae:	f7fe fc15 	bl	80046dc <lv_event_send>
        if(res != LV_RES_OK) return;
 8005eb2:	2801      	cmp	r0, #1
 8005eb4:	d1ef      	bne.n	8005e96 <lv_obj_scroll_by+0xce>
        res = _lv_obj_scroll_by_raw(obj, dx, dy);
 8005eb6:	4632      	mov	r2, r6
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f017 f85b 	bl	801cf76 <_lv_obj_scroll_by_raw>
        if(res != LV_RES_OK) return;
 8005ec0:	2801      	cmp	r0, #1
 8005ec2:	d1e8      	bne.n	8005e96 <lv_obj_scroll_by+0xce>
        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	210a      	movs	r1, #10
 8005ec8:	4620      	mov	r0, r4
}
 8005eca:	b013      	add	sp, #76	; 0x4c
 8005ecc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 8005ed0:	f7fe bc04 	b.w	80046dc <lv_event_send>
 8005ed4:	0801cea7 	.word	0x0801cea7
 8005ed8:	0801cfd5 	.word	0x0801cfd5
 8005edc:	08024149 	.word	0x08024149
 8005ee0:	0801cfbd 	.word	0x0801cfbd

08005ee4 <lv_obj_scroll_to_x>:
    lv_obj_scroll_to_x(obj, x, anim_en);
    lv_obj_scroll_to_y(obj, y, anim_en);
}

void lv_obj_scroll_to_x(lv_obj_t * obj, lv_coord_t x, lv_anim_enable_t anim_en)
{
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	460e      	mov	r6, r1
    lv_anim_del(obj, scroll_x_anim);
 8005eea:	4908      	ldr	r1, [pc, #32]	; (8005f0c <lv_obj_scroll_to_x+0x28>)
{
 8005eec:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_x_anim);
 8005eee:	f00c fa23 	bl	8012338 <lv_anim_del>

    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f017 f831 	bl	801cf5a <lv_obj_get_scroll_x>
    lv_coord_t diff = -x + scroll_x;
 8005ef8:	1b81      	subs	r1, r0, r6

    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 8005efa:	462b      	mov	r3, r5
 8005efc:	4620      	mov	r0, r4
 8005efe:	2200      	movs	r2, #0
 8005f00:	b209      	sxth	r1, r1
}
 8005f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 8005f06:	f017 b871 	b.w	801cfec <lv_obj_scroll_by_bounded>
 8005f0a:	bf00      	nop
 8005f0c:	0801cfd5 	.word	0x0801cfd5

08005f10 <lv_obj_scroll_to_y>:

void lv_obj_scroll_to_y(lv_obj_t * obj, lv_coord_t y, lv_anim_enable_t anim_en)
{
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4604      	mov	r4, r0
 8005f14:	460e      	mov	r6, r1
    lv_anim_del(obj, scroll_y_anim);
 8005f16:	4908      	ldr	r1, [pc, #32]	; (8005f38 <lv_obj_scroll_to_y+0x28>)
{
 8005f18:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_y_anim);
 8005f1a:	f00c fa0d 	bl	8012338 <lv_anim_del>

    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f017 f821 	bl	801cf66 <lv_obj_get_scroll_y>
    lv_coord_t diff = -y + scroll_y;
 8005f24:	1b82      	subs	r2, r0, r6

    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 8005f26:	462b      	mov	r3, r5
 8005f28:	4620      	mov	r0, r4
 8005f2a:	b212      	sxth	r2, r2
 8005f2c:	2100      	movs	r1, #0
}
 8005f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 8005f32:	f017 b85b 	b.w	801cfec <lv_obj_scroll_by_bounded>
 8005f36:	bf00      	nop
 8005f38:	0801cfbd 	.word	0x0801cfbd

08005f3c <scroll_area_into_view>:
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
}

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 8005f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f40:	b08b      	sub	sp, #44	; 0x2c
 8005f42:	4607      	mov	r7, r0
    lv_obj_t * parent = lv_obj_get_parent(child);
 8005f44:	4608      	mov	r0, r1
{
 8005f46:	4691      	mov	r9, r2
 8005f48:	9102      	str	r1, [sp, #8]
 8005f4a:	9303      	str	r3, [sp, #12]
    lv_obj_t * parent = lv_obj_get_parent(child);
 8005f4c:	f018 f91c 	bl	801e188 <lv_obj_get_parent>
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 8005f50:	2110      	movs	r1, #16
    lv_obj_t * parent = lv_obj_get_parent(child);
 8005f52:	4605      	mov	r5, r0
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 8005f54:	f015 fd5a 	bl	801ba0c <lv_obj_has_flag>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	f000 815b 	beq.w	8006214 <scroll_area_into_view+0x2d8>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 8005f5e:	4628      	mov	r0, r5
 8005f60:	f016 ffe7 	bl	801cf32 <lv_obj_get_scroll_dir>
 8005f64:	9000      	str	r0, [sp, #0]
    lv_coord_t snap_goal = 0;
    lv_coord_t act = 0;
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 8005f66:	4628      	mov	r0, r5
 8005f68:	f016 fff1 	bl	801cf4e <lv_obj_get_scroll_snap_y>
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 8005f6c:	4683      	mov	fp, r0
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	f000 80d6 	beq.w	8006120 <scroll_area_into_view+0x1e4>
 8005f74:	9b02      	ldr	r3, [sp, #8]
 8005f76:	f103 0a14 	add.w	sl, r3, #20
 8005f7a:	2232      	movs	r2, #50	; 0x32
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f017 fd7e 	bl	801da80 <lv_obj_get_style_prop>
 8005f84:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005f86:	2210      	movs	r2, #16
 8005f88:	2100      	movs	r1, #0
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f017 fd78 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005f90:	2211      	movs	r2, #17
    else area_tmp = area;

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005f92:	b2b3      	uxth	r3, r6
 8005f94:	2100      	movs	r1, #0
 8005f96:	fa10 f686 	uxtah	r6, r0, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	9301      	str	r3, [sp, #4]
 8005f9e:	f017 fd6f 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 8005fa2:	9b01      	ldr	r3, [sp, #4]
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005fa4:	b2b6      	uxth	r6, r6
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8005fa6:	f8b9 8002 	ldrh.w	r8, [r9, #2]
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 8005faa:	4418      	add	r0, r3
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8005fac:	f8ba 1006 	ldrh.w	r1, [sl, #6]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8005fb0:	eba6 0408 	sub.w	r4, r6, r8
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 8005fb4:	b283      	uxth	r3, r0
 8005fb6:	fa18 f880 	uxtah	r8, r8, r0
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8005fba:	4628      	mov	r0, r5
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8005fbc:	9108      	str	r1, [sp, #32]
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 8005fbe:	9304      	str	r3, [sp, #16]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8005fc0:	fa1f f888 	uxth.w	r8, r8
 8005fc4:	8aeb      	ldrh	r3, [r5, #22]
 8005fc6:	441c      	add	r4, r3
 8005fc8:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8005fcc:	1ae4      	subs	r4, r4, r3
 8005fce:	b2a3      	uxth	r3, r4
 8005fd0:	b224      	sxth	r4, r4
 8005fd2:	9305      	str	r3, [sp, #20]
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8005fd4:	8b6b      	ldrh	r3, [r5, #26]
 8005fd6:	eba8 0203 	sub.w	r2, r8, r3
 8005fda:	9309      	str	r3, [sp, #36]	; 0x24
 8005fdc:	440a      	add	r2, r1
 8005fde:	b212      	sxth	r2, r2
 8005fe0:	9207      	str	r2, [sp, #28]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8005fe2:	f016 fc2d 	bl	801c840 <lv_obj_get_height>
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 8005fe6:	2c00      	cmp	r4, #0
 8005fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8005fea:	9006      	str	r0, [sp, #24]
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 8005fec:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 8005ff0:	f2c0 80a3 	blt.w	800613a <scroll_area_into_view+0x1fe>
 8005ff4:	2a00      	cmp	r2, #0
 8005ff6:	f2c0 8095 	blt.w	8006124 <scroll_area_into_view+0x1e8>
 8005ffa:	2400      	movs	r4, #0
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
 8005ffc:	f1bb 0f02 	cmp.w	fp, #2
 8006000:	f000 80a9 	beq.w	8006156 <scroll_area_into_view+0x21a>
 8006004:	f1bb 0f03 	cmp.w	fp, #3
 8006008:	f000 80ab 	beq.w	8006162 <scroll_area_into_view+0x226>
 800600c:	f1bb 0f01 	cmp.w	fp, #1
 8006010:	d105      	bne.n	800601e <scroll_area_into_view+0xe2>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.y1 + ptop;
            act = area_tmp->y1 + y_scroll;
            y_scroll += snap_goal - act;
 8006012:	8aec      	ldrh	r4, [r5, #22]
 8006014:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8006018:	4434      	add	r4, r6
            break;
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.y2 - pbottom;
            act = area_tmp->y2 + y_scroll;
            y_scroll += snap_goal - act;
 800601a:	1ae4      	subs	r4, r4, r3
 800601c:	b224      	sxth	r4, r4
            y_scroll += snap_goal - act;
            break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 800601e:	4628      	mov	r0, r5
 8006020:	f016 ff8f 	bl	801cf42 <lv_obj_get_scroll_snap_x>
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 8006024:	4682      	mov	sl, r0
 8006026:	b108      	cbz	r0, 800602c <scroll_area_into_view+0xf0>
 8006028:	9f02      	ldr	r7, [sp, #8]
 800602a:	3714      	adds	r7, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800602c:	2212      	movs	r2, #18
 800602e:	2100      	movs	r1, #0
 8006030:	4628      	mov	r0, r5
 8006032:	f017 fd25 	bl	801da80 <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 8006036:	9b01      	ldr	r3, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006038:	2213      	movs	r2, #19
 800603a:	2100      	movs	r1, #0
 800603c:	eb03 0800 	add.w	r8, r3, r0
 8006040:	4628      	mov	r0, r5
 8006042:	f017 fd1d 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8006046:	f8b9 1000 	ldrh.w	r1, [r9]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 800604a:	9b01      	ldr	r3, [sp, #4]
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 800604c:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 8006050:	f8b7 c004 	ldrh.w	ip, [r7, #4]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 8006054:	4418      	add	r0, r3
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8006056:	eba8 0601 	sub.w	r6, r8, r1
 800605a:	8aab      	ldrh	r3, [r5, #20]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 800605c:	fa1f fb80 	uxth.w	fp, r0
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8006060:	fa11 f080 	uxtah	r0, r1, r0
 8006064:	441e      	add	r6, r3
 8006066:	883b      	ldrh	r3, [r7, #0]
 8006068:	b280      	uxth	r0, r0
 800606a:	1af6      	subs	r6, r6, r3
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800606c:	8b2b      	ldrh	r3, [r5, #24]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800606e:	b2b2      	uxth	r2, r6
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 8006070:	1ac1      	subs	r1, r0, r3
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8006072:	b236      	sxth	r6, r6
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 8006074:	4461      	add	r1, ip
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 8006076:	2e00      	cmp	r6, #0
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 8006078:	b209      	sxth	r1, r1
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 800607a:	f2c0 8099 	blt.w	80061b0 <scroll_area_into_view+0x274>
 800607e:	2900      	cmp	r1, #0
 8006080:	f2c0 808a 	blt.w	8006198 <scroll_area_into_view+0x25c>
 8006084:	2600      	movs	r6, #0
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8006086:	4628      	mov	r0, r5
 8006088:	f016 fbd4 	bl	801c834 <lv_obj_get_width>
    switch(snap_x) {
 800608c:	f1ba 0f02 	cmp.w	sl, #2
 8006090:	f000 809c 	beq.w	80061cc <scroll_area_into_view+0x290>
 8006094:	f1ba 0f03 	cmp.w	sl, #3
 8006098:	f000 809d 	beq.w	80061d6 <scroll_area_into_view+0x29a>
 800609c:	f1ba 0f01 	cmp.w	sl, #1
 80060a0:	d104      	bne.n	80060ac <scroll_area_into_view+0x170>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.x1 + pleft;
            act = area_tmp->x1 + x_scroll;
            x_scroll += snap_goal - act;
 80060a2:	8aae      	ldrh	r6, [r5, #20]
 80060a4:	883b      	ldrh	r3, [r7, #0]
 80060a6:	4446      	add	r6, r8
            break;
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.x2 - pright;
            act = area_tmp->x2 + x_scroll;
            x_scroll += snap_goal - act;
 80060a8:	1af6      	subs	r6, r6, r3
            break;
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
            x_scroll += snap_goal - act;
 80060aa:	b236      	sxth	r6, r6
            break;
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 80060ac:	495d      	ldr	r1, [pc, #372]	; (8006224 <scroll_area_into_view+0x2e8>)
 80060ae:	4628      	mov	r0, r5
 80060b0:	f00c f942 	bl	8012338 <lv_anim_del>
 80060b4:	4607      	mov	r7, r0
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 80060b6:	495c      	ldr	r1, [pc, #368]	; (8006228 <scroll_area_into_view+0x2ec>)
 80060b8:	4628      	mov	r0, r5
 80060ba:	f00c f93d 	bl	8012338 <lv_anim_del>
    if(y_del || x_del) {
 80060be:	2f00      	cmp	r7, #0
 80060c0:	f040 80a0 	bne.w	8006204 <scroll_area_into_view+0x2c8>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	f040 809d 	bne.w	8006204 <scroll_area_into_view+0x2c8>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
        if(res != LV_RES_OK) return;
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 80060ca:	9b00      	ldr	r3, [sp, #0]
 80060cc:	07d8      	lsls	r0, r3, #31
 80060ce:	f140 80a4 	bpl.w	800621a <scroll_area_into_view+0x2de>
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 80060d2:	9b00      	ldr	r3, [sp, #0]
 80060d4:	0799      	lsls	r1, r3, #30
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 80060d6:	9b00      	ldr	r3, [sp, #0]
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 80060d8:	bf58      	it	pl
 80060da:	ea06 76e6 	andpl.w	r6, r6, r6, asr #31
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 80060de:	075a      	lsls	r2, r3, #29
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 80060e0:	9b00      	ldr	r3, [sp, #0]
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 80060e2:	bf58      	it	pl
 80060e4:	ea24 74e4 	bicpl.w	r4, r4, r4, asr #31

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 80060e8:	9a03      	ldr	r2, [sp, #12]
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 80060ea:	071b      	lsls	r3, r3, #28
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 80060ec:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 80060f0:	bf58      	it	pl
 80060f2:	ea04 74e4 	andpl.w	r4, r4, r4, asr #31
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 80060f6:	2a00      	cmp	r2, #0
 80060f8:	f000 8092 	beq.w	8006220 <scroll_area_into_view+0x2e4>
 80060fc:	f8b9 2000 	ldrh.w	r2, [r9]
 8006100:	4432      	add	r2, r6
 8006102:	f8a9 2000 	strh.w	r2, [r9]
 8006106:	4622      	mov	r2, r4
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8006108:	4413      	add	r3, r2
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800610a:	4631      	mov	r1, r6
 800610c:	4622      	mov	r2, r4
 800610e:	4628      	mov	r0, r5
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8006110:	f8a9 3002 	strh.w	r3, [r9, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8006114:	9b03      	ldr	r3, [sp, #12]
}
 8006116:	b00b      	add	sp, #44	; 0x2c
 8006118:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800611c:	f7ff be54 	b.w	8005dc8 <lv_obj_scroll_by>
    else area_tmp = area;
 8006120:	46ba      	mov	sl, r7
 8006122:	e72a      	b.n	8005f7a <scroll_area_into_view+0x3e>
    else if(top_diff > 0) {
 8006124:	2c00      	cmp	r4, #0
 8006126:	f43f af68 	beq.w	8005ffa <scroll_area_into_view+0xbe>
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 800612a:	4628      	mov	r0, r5
 800612c:	f016 ff1b 	bl	801cf66 <lv_obj_get_scroll_y>
        if(st - y_scroll < 0) y_scroll = 0;
 8006130:	9b05      	ldr	r3, [sp, #20]
 8006132:	4298      	cmp	r0, r3
 8006134:	f6bf af62 	bge.w	8005ffc <scroll_area_into_view+0xc0>
 8006138:	e75f      	b.n	8005ffa <scroll_area_into_view+0xbe>
    else if(bottom_diff > 0) {
 800613a:	2a00      	cmp	r2, #0
 800613c:	f77f af5d 	ble.w	8005ffa <scroll_area_into_view+0xbe>
        y_scroll = -bottom_diff;
 8006140:	eba3 0308 	sub.w	r3, r3, r8
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 8006144:	4628      	mov	r0, r5
        y_scroll = -bottom_diff;
 8006146:	1a5b      	subs	r3, r3, r1
 8006148:	b21c      	sxth	r4, r3
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 800614a:	f7ff fd05 	bl	8005b58 <lv_obj_get_scroll_bottom>
        if(sb + y_scroll < 0) y_scroll = 0;
 800614e:	42e0      	cmn	r0, r4
 8006150:	f57f af54 	bpl.w	8005ffc <scroll_area_into_view+0xc0>
 8006154:	e751      	b.n	8005ffa <scroll_area_into_view+0xbe>
            y_scroll += snap_goal - act;
 8006156:	9b04      	ldr	r3, [sp, #16]
 8006158:	8b6c      	ldrh	r4, [r5, #26]
 800615a:	1ae4      	subs	r4, r4, r3
 800615c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8006160:	e75b      	b.n	800601a <scroll_area_into_view+0xde>
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8006162:	9b04      	ldr	r3, [sp, #16]
 8006164:	9906      	ldr	r1, [sp, #24]
 8006166:	4433      	add	r3, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006168:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800616c:	1acb      	subs	r3, r1, r3
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 800616e:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8006172:	fa01 f383 	sxtah	r3, r1, r3
            y_scroll += snap_goal - act;
 8006176:	8ae9      	ldrh	r1, [r5, #22]
 8006178:	440e      	add	r6, r1
 800617a:	1ab6      	subs	r6, r6, r2
 800617c:	eb06 0663 	add.w	r6, r6, r3, asr #1
 8006180:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8006184:	3301      	adds	r3, #1
 8006186:	1a9b      	subs	r3, r3, r2
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 8006188:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800618c:	fa02 f383 	sxtah	r3, r2, r3
            y_scroll += snap_goal - act;
 8006190:	eba6 0663 	sub.w	r6, r6, r3, asr #1
 8006194:	b234      	sxth	r4, r6
            break;
 8006196:	e742      	b.n	800601e <scroll_area_into_view+0xe2>
    else if(left_diff > 0) {
 8006198:	2e00      	cmp	r6, #0
 800619a:	f43f af73 	beq.w	8006084 <scroll_area_into_view+0x148>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 800619e:	4628      	mov	r0, r5
 80061a0:	9201      	str	r2, [sp, #4]
 80061a2:	f7ff fd2b 	bl	8005bfc <lv_obj_get_scroll_left>
        if(sl - x_scroll < 0) x_scroll = 0;
 80061a6:	9a01      	ldr	r2, [sp, #4]
 80061a8:	4290      	cmp	r0, r2
 80061aa:	f6bf af6c 	bge.w	8006086 <scroll_area_into_view+0x14a>
 80061ae:	e769      	b.n	8006084 <scroll_area_into_view+0x148>
    else if(right_diff > 0) {
 80061b0:	2900      	cmp	r1, #0
 80061b2:	f77f af67 	ble.w	8006084 <scroll_area_into_view+0x148>
        x_scroll = -right_diff;
 80061b6:	1a1b      	subs	r3, r3, r0
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 80061b8:	4628      	mov	r0, r5
        x_scroll = -right_diff;
 80061ba:	eba3 030c 	sub.w	r3, r3, ip
 80061be:	b21e      	sxth	r6, r3
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 80061c0:	f7ff fd84 	bl	8005ccc <lv_obj_get_scroll_right>
        if(sr + x_scroll < 0) x_scroll = 0;
 80061c4:	42f0      	cmn	r0, r6
 80061c6:	f57f af5e 	bpl.w	8006086 <scroll_area_into_view+0x14a>
 80061ca:	e75b      	b.n	8006084 <scroll_area_into_view+0x148>
            x_scroll += snap_goal - act;
 80061cc:	8b2e      	ldrh	r6, [r5, #24]
 80061ce:	88bb      	ldrh	r3, [r7, #4]
 80061d0:	eba6 060b 	sub.w	r6, r6, fp
 80061d4:	e768      	b.n	80060a8 <scroll_area_into_view+0x16c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80061d6:	88bb      	ldrh	r3, [r7, #4]
 80061d8:	883a      	ldrh	r2, [r7, #0]
            x_scroll += snap_goal - act;
 80061da:	8aae      	ldrh	r6, [r5, #20]
 80061dc:	3301      	adds	r3, #1
 80061de:	4446      	add	r6, r8
 80061e0:	1a9b      	subs	r3, r3, r2
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 80061e2:	44d8      	add	r8, fp
            x_scroll += snap_goal - act;
 80061e4:	1ab6      	subs	r6, r6, r2
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 80061e6:	f3c3 32c0 	ubfx	r2, r3, #15, #1
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 80061ea:	eba0 0008 	sub.w	r0, r0, r8
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 80061ee:	fa02 f383 	sxtah	r3, r2, r3
            x_scroll += snap_goal - act;
 80061f2:	eba6 0663 	sub.w	r6, r6, r3, asr #1
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 80061f6:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 80061fa:	fa03 f080 	sxtah	r0, r3, r0
            x_scroll += snap_goal - act;
 80061fe:	eb06 0660 	add.w	r6, r6, r0, asr #1
 8006202:	e752      	b.n	80060aa <scroll_area_into_view+0x16e>
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 8006204:	2200      	movs	r2, #0
 8006206:	210a      	movs	r1, #10
 8006208:	4628      	mov	r0, r5
 800620a:	f7fe fa67 	bl	80046dc <lv_event_send>
        if(res != LV_RES_OK) return;
 800620e:	2801      	cmp	r0, #1
 8006210:	f43f af5b 	beq.w	80060ca <scroll_area_into_view+0x18e>
}
 8006214:	b00b      	add	sp, #44	; 0x2c
 8006216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 800621a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800621e:	e758      	b.n	80060d2 <scroll_area_into_view+0x196>
 8006220:	9a03      	ldr	r2, [sp, #12]
 8006222:	e771      	b.n	8006108 <scroll_area_into_view+0x1cc>
 8006224:	0801cfbd 	.word	0x0801cfbd
 8006228:	0801cfd5 	.word	0x0801cfd5

0800622c <trans_del.isra.0>:
 * @param obj pointer to an object which transition(s) should be removed
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 800622c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006230:	4606      	mov	r6, r0
{
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006232:	4826      	ldr	r0, [pc, #152]	; (80062cc <trans_del.isra.0+0xa0>)
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 8006234:	460d      	mov	r5, r1
 8006236:	4617      	mov	r7, r2
 8006238:	4698      	mov	r8, r3
        if(tr == tr_limit) break;

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800623a:	f64f 7bff 	movw	fp, #65535	; 0xffff
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800623e:	f01e fc48 	bl	8024ad2 <_lv_ll_get_tail>
 8006242:	4604      	mov	r4, r0
    while(tr != NULL) {
 8006244:	b90c      	cbnz	r4, 800624a <trans_del.isra.0+0x1e>

        }
        tr = tr_prev;
    }
    return removed;
}
 8006246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(tr == tr_limit) break;
 800624a:	4544      	cmp	r4, r8
 800624c:	d0fb      	beq.n	8006246 <trans_del.isra.0+0x1a>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800624e:	4621      	mov	r1, r4
 8006250:	481e      	ldr	r0, [pc, #120]	; (80062cc <trans_del.isra.0+0xa0>)
 8006252:	f01e fc45 	bl	8024ae0 <_lv_ll_get_prev>
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 8006256:	6823      	ldr	r3, [r4, #0]
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8006258:	4681      	mov	r9, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800625a:	42b3      	cmp	r3, r6
 800625c:	d11c      	bne.n	8006298 <trans_del.isra.0+0x6c>
 800625e:	68a3      	ldr	r3, [r4, #8]
 8006260:	42ab      	cmp	r3, r5
 8006262:	d002      	beq.n	800626a <trans_del.isra.0+0x3e>
 8006264:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 8006268:	d116      	bne.n	8006298 <trans_del.isra.0+0x6c>
 800626a:	88a3      	ldrh	r3, [r4, #4]
 800626c:	42bb      	cmp	r3, r7
 800626e:	d001      	beq.n	8006274 <trans_del.isra.0+0x48>
 8006270:	455f      	cmp	r7, fp
 8006272:	d111      	bne.n	8006298 <trans_del.isra.0+0x6c>
 8006274:	f04f 0a00 	mov.w	sl, #0
            for(i = 0; i < obj->style_cnt; i++) {
 8006278:	8c72      	ldrh	r2, [r6, #34]	; 0x22
 800627a:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 800627e:	4592      	cmp	sl, r2
 8006280:	d30c      	bcc.n	800629c <trans_del.isra.0+0x70>
            lv_anim_del(tr, NULL);
 8006282:	2100      	movs	r1, #0
 8006284:	4620      	mov	r0, r4
 8006286:	f00c f857 	bl	8012338 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800628a:	4810      	ldr	r0, [pc, #64]	; (80062cc <trans_del.isra.0+0xa0>)
 800628c:	4621      	mov	r1, r4
 800628e:	f01e fbe2 	bl	8024a56 <_lv_ll_remove>
            lv_mem_free(tr);
 8006292:	4620      	mov	r0, r4
 8006294:	f00c fa2a 	bl	80126ec <lv_mem_free>
            removed = true;
 8006298:	464c      	mov	r4, r9
 800629a:	e7d3      	b.n	8006244 <trans_del.isra.0+0x18>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800629c:	68f0      	ldr	r0, [r6, #12]
 800629e:	ea4f 0cca 	mov.w	ip, sl, lsl #3
 80062a2:	eb00 02ca 	add.w	r2, r0, sl, lsl #3
 80062a6:	79d1      	ldrb	r1, [r2, #7]
 80062a8:	078b      	lsls	r3, r1, #30
 80062aa:	d50c      	bpl.n	80062c6 <trans_del.isra.0+0x9a>
 80062ac:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 80062b0:	d004      	beq.n	80062bc <trans_del.isra.0+0x90>
 80062b2:	6852      	ldr	r2, [r2, #4]
 80062b4:	f3c2 0217 	ubfx	r2, r2, #0, #24
 80062b8:	4295      	cmp	r5, r2
 80062ba:	d104      	bne.n	80062c6 <trans_del.isra.0+0x9a>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 80062bc:	88a1      	ldrh	r1, [r4, #4]
 80062be:	f850 000c 	ldr.w	r0, [r0, ip]
 80062c2:	f01e fce0 	bl	8024c86 <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 80062c6:	f10a 0a01 	add.w	sl, sl, #1
 80062ca:	e7d5      	b.n	8006278 <trans_del.isra.0+0x4c>
 80062cc:	240013b0 	.word	0x240013b0

080062d0 <_lv_obj_style_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 80062d0:	2114      	movs	r1, #20
 80062d2:	4801      	ldr	r0, [pc, #4]	; (80062d8 <_lv_obj_style_init+0x8>)
 80062d4:	f01e bb80 	b.w	80249d8 <_lv_ll_init>
 80062d8:	240013b0 	.word	0x240013b0

080062dc <lv_obj_enable_style_refresh>:
    style_refr = en;
 80062dc:	4b01      	ldr	r3, [pc, #4]	; (80062e4 <lv_obj_enable_style_refresh+0x8>)
 80062de:	7018      	strb	r0, [r3, #0]
}
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	24000154 	.word	0x24000154

080062e8 <lv_obj_refresh_style>:
    if(!style_refr) return;
 80062e8:	4b77      	ldr	r3, [pc, #476]	; (80064c8 <lv_obj_refresh_style+0x1e0>)
{
 80062ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(!style_refr) return;
 80062ee:	781b      	ldrb	r3, [r3, #0]
{
 80062f0:	4604      	mov	r4, r0
 80062f2:	460e      	mov	r6, r1
 80062f4:	4615      	mov	r5, r2
    if(!style_refr) return;
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 80a3 	beq.w	8006442 <lv_obj_refresh_style+0x15a>
    lv_obj_invalidate(obj);
 80062fc:	f016 fc9a 	bl	801cc34 <lv_obj_invalidate>
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
    return _lv_style_prop_lookup_flags(prop) & flag;
 8006300:	4628      	mov	r0, r5
 8006302:	f00c fb3f 	bl	8012984 <_lv_style_prop_lookup_flags>
 8006306:	f000 0904 	and.w	r9, r0, #4
 800630a:	4628      	mov	r0, r5
    return selector & 0xFF0000;
 800630c:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8006310:	f00c fb38 	bl	8012984 <_lv_style_prop_lookup_flags>
 8006314:	f000 0702 	and.w	r7, r0, #2
 8006318:	4628      	mov	r0, r5
 800631a:	f00c fb33 	bl	8012984 <_lv_style_prop_lookup_flags>
 800631e:	f000 0801 	and.w	r8, r0, #1
 8006322:	4628      	mov	r0, r5
 8006324:	f00c fb2e 	bl	8012984 <_lv_style_prop_lookup_flags>
 8006328:	f000 0a10 	and.w	sl, r0, #16
    if(is_layout_refr) {
 800632c:	f1b9 0f00 	cmp.w	r9, #0
 8006330:	d050      	beq.n	80063d4 <lv_obj_refresh_style+0xec>
        if(part == LV_PART_ANY ||
 8006332:	f5b6 2f70 	cmp.w	r6, #983040	; 0xf0000
 8006336:	d03a      	beq.n	80063ae <lv_obj_refresh_style+0xc6>
 8006338:	b35e      	cbz	r6, 8006392 <lv_obj_refresh_style+0xaa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800633a:	2204      	movs	r2, #4
 800633c:	2100      	movs	r1, #0
 800633e:	4620      	mov	r0, r4
           part == LV_PART_MAIN ||
 8006340:	f242 7ad1 	movw	sl, #10193	; 0x27d1
 8006344:	f017 fb9c 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006348:	b200      	sxth	r0, r0
 800634a:	4550      	cmp	r0, sl
 800634c:	d007      	beq.n	800635e <lv_obj_refresh_style+0x76>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800634e:	2201      	movs	r2, #1
 8006350:	2100      	movs	r1, #0
 8006352:	4620      	mov	r0, r4
 8006354:	f017 fb94 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006358:	b200      	sxth	r0, r0
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800635a:	4550      	cmp	r0, sl
 800635c:	d107      	bne.n	800636e <lv_obj_refresh_style+0x86>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 800635e:	2200      	movs	r2, #0
 8006360:	212a      	movs	r1, #42	; 0x2a
 8006362:	4620      	mov	r0, r4
 8006364:	f7fe f9ba 	bl	80046dc <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 8006368:	4620      	mov	r0, r4
 800636a:	f016 f9e2 	bl	801c732 <lv_obj_mark_layout_as_dirty>
    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 800636e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006372:	429d      	cmp	r5, r3
 8006374:	d15d      	bne.n	8006432 <lv_obj_refresh_style+0x14a>
        lv_obj_refresh_ext_draw_size(obj);
 8006376:	4620      	mov	r0, r4
 8006378:	f016 f88e 	bl	801c498 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 800637c:	4620      	mov	r0, r4
 800637e:	f016 fc59 	bl	801cc34 <lv_obj_invalidate>
        if(part != LV_PART_SCROLLBAR) {
 8006382:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8006386:	d05c      	beq.n	8006442 <lv_obj_refresh_style+0x15a>
            refresh_children_style(obj);
 8006388:	4620      	mov	r0, r4
}
 800638a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            refresh_children_style(obj);
 800638e:	f017 bab3 	b.w	801d8f8 <refresh_children_style>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 8006392:	4632      	mov	r2, r6
 8006394:	212a      	movs	r1, #42	; 0x2a
 8006396:	4620      	mov	r0, r4
 8006398:	f7fe f9a0 	bl	80046dc <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 800639c:	4620      	mov	r0, r4
 800639e:	f016 f9c8 	bl	801c732 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 80063a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063a6:	429d      	cmp	r5, r3
 80063a8:	d13a      	bne.n	8006420 <lv_obj_refresh_style+0x138>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 80063aa:	4620      	mov	r0, r4
 80063ac:	e00c      	b.n	80063c8 <lv_obj_refresh_style+0xe0>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 80063ae:	2200      	movs	r2, #0
 80063b0:	212a      	movs	r1, #42	; 0x2a
 80063b2:	4620      	mov	r0, r4
 80063b4:	f7fe f992 	bl	80046dc <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 80063b8:	4620      	mov	r0, r4
 80063ba:	f016 f9ba 	bl	801c732 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 80063be:	f64f 73ff 	movw	r3, #65535	; 0xffff
        lv_obj_t * parent = lv_obj_get_parent(obj);
 80063c2:	4620      	mov	r0, r4
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 80063c4:	429d      	cmp	r5, r3
 80063c6:	d12c      	bne.n	8006422 <lv_obj_refresh_style+0x13a>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 80063c8:	f017 fede 	bl	801e188 <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 80063cc:	b1a8      	cbz	r0, 80063fa <lv_obj_refresh_style+0x112>
 80063ce:	f016 f9b0 	bl	801c732 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 80063d2:	e02a      	b.n	800642a <lv_obj_refresh_style+0x142>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 80063d4:	f5b6 2f70 	cmp.w	r6, #983040	; 0xf0000
 80063d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063dc:	d001      	beq.n	80063e2 <lv_obj_refresh_style+0xfa>
 80063de:	2e00      	cmp	r6, #0
 80063e0:	d1c5      	bne.n	800636e <lv_obj_refresh_style+0x86>
 80063e2:	429d      	cmp	r5, r3
 80063e4:	d0e1      	beq.n	80063aa <lv_obj_refresh_style+0xc2>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 80063e6:	f1ba 0f00 	cmp.w	sl, #0
 80063ea:	d109      	bne.n	8006400 <lv_obj_refresh_style+0x118>
    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 80063ec:	2f00      	cmp	r7, #0
 80063ee:	d15c      	bne.n	80064aa <lv_obj_refresh_style+0x1c2>
    lv_obj_invalidate(obj);
 80063f0:	4620      	mov	r0, r4
}
 80063f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_invalidate(obj);
 80063f6:	f016 bc1d 	b.w	801cc34 <lv_obj_invalidate>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 80063fa:	f1ba 0f00 	cmp.w	sl, #0
 80063fe:	d0ba      	beq.n	8006376 <lv_obj_refresh_style+0x8e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8006400:	226d      	movs	r2, #109	; 0x6d
 8006402:	2100      	movs	r1, #0
 8006404:	4620      	mov	r0, r4
 8006406:	f017 fb3b 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800640a:	fa0f fa80 	sxth.w	sl, r0
    }
}

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800640e:	f1ba 0f00 	cmp.w	sl, #0
 8006412:	d018      	beq.n	8006446 <lv_obj_refresh_style+0x15e>
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 8006414:	68a3      	ldr	r3, [r4, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d145      	bne.n	80064a6 <lv_obj_refresh_style+0x1be>
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800641a:	f04f 0a02 	mov.w	sl, #2
 800641e:	e029      	b.n	8006474 <lv_obj_refresh_style+0x18c>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 8006420:	4620      	mov	r0, r4
 8006422:	f017 feb1 	bl	801e188 <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 8006426:	2800      	cmp	r0, #0
 8006428:	d1d1      	bne.n	80063ce <lv_obj_refresh_style+0xe6>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800642a:	f1ba 0f00 	cmp.w	sl, #0
 800642e:	d09e      	beq.n	800636e <lv_obj_refresh_style+0x86>
 8006430:	e7e6      	b.n	8006400 <lv_obj_refresh_style+0x118>
    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 8006432:	2f00      	cmp	r7, #0
 8006434:	d139      	bne.n	80064aa <lv_obj_refresh_style+0x1c2>
    lv_obj_invalidate(obj);
 8006436:	4620      	mov	r0, r4
 8006438:	f016 fbfc 	bl	801cc34 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800643c:	f1b8 0f00 	cmp.w	r8, #0
 8006440:	d13d      	bne.n	80064be <lv_obj_refresh_style+0x1d6>
}
 8006442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8006446:	226c      	movs	r2, #108	; 0x6c
 8006448:	4651      	mov	r1, sl
 800644a:	4620      	mov	r0, r4
 800644c:	f017 fb18 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006450:	b200      	sxth	r0, r0
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 8006452:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006456:	d1dd      	bne.n	8006414 <lv_obj_refresh_style+0x12c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8006458:	2260      	movs	r2, #96	; 0x60
 800645a:	4651      	mov	r1, sl
 800645c:	4620      	mov	r0, r4
 800645e:	f017 fb0f 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8006462:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 8006464:	28ff      	cmp	r0, #255	; 0xff
 8006466:	d00d      	beq.n	8006484 <lv_obj_refresh_style+0x19c>
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 8006468:	68a3      	ldr	r3, [r4, #8]
 800646a:	b10b      	cbz	r3, 8006470 <lv_obj_refresh_style+0x188>
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 800646c:	2001      	movs	r0, #1
 800646e:	e015      	b.n	800649c <lv_obj_refresh_style+0x1b4>
 8006470:	f04f 0a01 	mov.w	sl, #1
            lv_obj_allocate_spec_attr(obj);
 8006474:	4620      	mov	r0, r4
 8006476:	f7fe fc7f 	bl	8004d78 <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 800647a:	68a3      	ldr	r3, [r4, #8]
 800647c:	7e9a      	ldrb	r2, [r3, #26]
 800647e:	f36a 1287 	bfi	r2, sl, #6, #2
 8006482:	e00e      	b.n	80064a2 <lv_obj_refresh_style+0x1ba>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8006484:	2267      	movs	r2, #103	; 0x67
 8006486:	4651      	mov	r1, sl
 8006488:	4620      	mov	r0, r4
 800648a:	f017 faf9 	bl	801da80 <lv_obj_get_style_prop>

#if LV_DRAW_COMPLEX
    if(lv_obj_get_style_blend_mode(obj, 0) != LV_BLEND_MODE_NORMAL) return LV_LAYER_TYPE_SIMPLE;
 800648e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8006492:	68a3      	ldr	r3, [r4, #8]
 8006494:	d1e9      	bne.n	800646a <lv_obj_refresh_style+0x182>
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 8006496:	2b00      	cmp	r3, #0
 8006498:	f43f af69 	beq.w	800636e <lv_obj_refresh_style+0x86>
 800649c:	7e9a      	ldrb	r2, [r3, #26]
 800649e:	f360 1287 	bfi	r2, r0, #6, #2
            obj->spec_attr->layer_type = layer_type;
 80064a2:	769a      	strb	r2, [r3, #26]
 80064a4:	e763      	b.n	800636e <lv_obj_refresh_style+0x86>
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 80064a6:	2002      	movs	r0, #2
 80064a8:	e7f8      	b.n	800649c <lv_obj_refresh_style+0x1b4>
        lv_obj_refresh_ext_draw_size(obj);
 80064aa:	4620      	mov	r0, r4
 80064ac:	f015 fff4 	bl	801c498 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 80064b0:	4620      	mov	r0, r4
 80064b2:	f016 fbbf 	bl	801cc34 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 80064b6:	f1b8 0f00 	cmp.w	r8, #0
 80064ba:	d0c2      	beq.n	8006442 <lv_obj_refresh_style+0x15a>
 80064bc:	e761      	b.n	8006382 <lv_obj_refresh_style+0x9a>
 80064be:	f1b9 0f00 	cmp.w	r9, #0
 80064c2:	f47f af5e 	bne.w	8006382 <lv_obj_refresh_style+0x9a>
 80064c6:	e7bc      	b.n	8006442 <lv_obj_refresh_style+0x15a>
 80064c8:	24000154 	.word	0x24000154

080064cc <lv_obj_report_style_change>:
    if(!style_refr) return;
 80064cc:	4b0c      	ldr	r3, [pc, #48]	; (8006500 <lv_obj_report_style_change+0x34>)
{
 80064ce:	b570      	push	{r4, r5, r6, lr}
    if(!style_refr) return;
 80064d0:	781b      	ldrb	r3, [r3, #0]
{
 80064d2:	4606      	mov	r6, r0
    if(!style_refr) return;
 80064d4:	b123      	cbz	r3, 80064e0 <lv_obj_report_style_change+0x14>
    lv_disp_t * d = lv_disp_get_next(NULL);
 80064d6:	2000      	movs	r0, #0
        d = lv_disp_get_next(d);
 80064d8:	f00b fe0c 	bl	80120f4 <lv_disp_get_next>
 80064dc:	4604      	mov	r4, r0
    while(d) {
 80064de:	b960      	cbnz	r0, 80064fa <lv_obj_report_style_change+0x2e>
}
 80064e0:	bd70      	pop	{r4, r5, r6, pc}
            report_style_change_core(style, d->screens[i]);
 80064e2:	68e3      	ldr	r3, [r4, #12]
 80064e4:	4630      	mov	r0, r6
 80064e6:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
        for(i = 0; i < d->screen_cnt; i++) {
 80064ea:	3501      	adds	r5, #1
            report_style_change_core(style, d->screens[i]);
 80064ec:	f017 fbd5 	bl	801dc9a <report_style_change_core>
        for(i = 0; i < d->screen_cnt; i++) {
 80064f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f2:	42ab      	cmp	r3, r5
 80064f4:	d8f5      	bhi.n	80064e2 <lv_obj_report_style_change+0x16>
        d = lv_disp_get_next(d);
 80064f6:	4620      	mov	r0, r4
 80064f8:	e7ee      	b.n	80064d8 <lv_obj_report_style_change+0xc>
        for(i = 0; i < d->screen_cnt; i++) {
 80064fa:	2500      	movs	r5, #0
 80064fc:	e7f8      	b.n	80064f0 <lv_obj_report_style_change+0x24>
 80064fe:	bf00      	nop
 8006500:	24000154 	.word	0x24000154

08006504 <trans_anim_cb>:
{
 8006504:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    lv_obj_t * obj = tr->obj;
 8006508:	6806      	ldr	r6, [r0, #0]
{
 800650a:	460a      	mov	r2, r1
 800650c:	4604      	mov	r4, r0
    for(i = 0; i < obj->style_cnt; i++) {
 800650e:	2300      	movs	r3, #0
 8006510:	8c71      	ldrh	r1, [r6, #34]	; 0x22
 8006512:	f3c1 01c5 	ubfx	r1, r1, #3, #6
 8006516:	4299      	cmp	r1, r3
 8006518:	d940      	bls.n	800659c <trans_anim_cb+0x98>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 800651a:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800651e:	00df      	lsls	r7, r3, #3
 8006520:	eb0c 00c3 	add.w	r0, ip, r3, lsl #3
 8006524:	79c5      	ldrb	r5, [r0, #7]
 8006526:	07ad      	lsls	r5, r5, #30
 8006528:	d505      	bpl.n	8006536 <trans_anim_cb+0x32>
 800652a:	6845      	ldr	r5, [r0, #4]
 800652c:	68a0      	ldr	r0, [r4, #8]
 800652e:	f3c5 0517 	ubfx	r5, r5, #0, #24
 8006532:	4285      	cmp	r5, r0
 8006534:	d001      	beq.n	800653a <trans_anim_cb+0x36>
    for(i = 0; i < obj->style_cnt; i++) {
 8006536:	3301      	adds	r3, #1
 8006538:	e7ed      	b.n	8006516 <trans_anim_cb+0x12>
        switch(tr->prop) {
 800653a:	88a1      	ldrh	r1, [r4, #4]
 800653c:	2961      	cmp	r1, #97	; 0x61
 800653e:	d055      	beq.n	80065ec <trans_anim_cb+0xe8>
 8006540:	d84e      	bhi.n	80065e0 <trans_anim_cb+0xdc>
 8006542:	2936      	cmp	r1, #54	; 0x36
 8006544:	d82d      	bhi.n	80065a2 <trans_anim_cb+0x9e>
 8006546:	291f      	cmp	r1, #31
 8006548:	d93f      	bls.n	80065ca <trans_anim_cb+0xc6>
 800654a:	f1a1 0020 	sub.w	r0, r1, #32
 800654e:	2301      	movs	r3, #1
 8006550:	b280      	uxth	r0, r0
 8006552:	4083      	lsls	r3, r0
 8006554:	4848      	ldr	r0, [pc, #288]	; (8006678 <trans_anim_cb+0x174>)
 8006556:	4018      	ands	r0, r3
 8006558:	bb70      	cbnz	r0, 80065b8 <trans_anim_cb+0xb4>
 800655a:	f413 1fc0 	tst.w	r3, #1572864	; 0x180000
 800655e:	d034      	beq.n	80065ca <trans_anim_cb+0xc6>
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 8006560:	2afe      	cmp	r2, #254	; 0xfe
 8006562:	dc41      	bgt.n	80065e8 <trans_anim_cb+0xe4>
 8006564:	68e5      	ldr	r5, [r4, #12]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 8006566:	aa01      	add	r2, sp, #4
 8006568:	f85c 0007 	ldr.w	r0, [ip, r7]
 800656c:	f01e fbe7 	bl	8024d3e <lv_style_get_prop>
 8006570:	2800      	cmp	r0, #0
 8006572:	d07d      	beq.n	8006670 <trans_anim_cb+0x16c>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 8006574:	9b01      	ldr	r3, [sp, #4]
 8006576:	ebb3 0805 	subs.w	r8, r3, r5
 800657a:	bf18      	it	ne
 800657c:	f04f 0801 	movne.w	r8, #1
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 8006580:	68f3      	ldr	r3, [r6, #12]
 8006582:	462a      	mov	r2, r5
 8006584:	88a1      	ldrh	r1, [r4, #4]
 8006586:	59d8      	ldr	r0, [r3, r7]
 8006588:	f00c f9f6 	bl	8012978 <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800658c:	f1b8 0f00 	cmp.w	r8, #0
 8006590:	d004      	beq.n	800659c <trans_anim_cb+0x98>
 8006592:	88a2      	ldrh	r2, [r4, #4]
 8006594:	68a1      	ldr	r1, [r4, #8]
 8006596:	6820      	ldr	r0, [r4, #0]
 8006598:	f7ff fea6 	bl	80062e8 <lv_obj_refresh_style>
}
 800659c:	b002      	add	sp, #8
 800659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch(tr->prop) {
 80065a2:	2955      	cmp	r1, #85	; 0x55
 80065a4:	d80f      	bhi.n	80065c6 <trans_anim_cb+0xc2>
 80065a6:	2943      	cmp	r1, #67	; 0x43
 80065a8:	d90f      	bls.n	80065ca <trans_anim_cb+0xc6>
 80065aa:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
 80065ae:	4b33      	ldr	r3, [pc, #204]	; (800667c <trans_anim_cb+0x178>)
 80065b0:	b280      	uxth	r0, r0
 80065b2:	40c3      	lsrs	r3, r0
 80065b4:	07db      	lsls	r3, r3, #31
 80065b6:	d508      	bpl.n	80065ca <trans_anim_cb+0xc6>
                if(v <= 0) value_final.color = tr->start_value.color;
 80065b8:	2a00      	cmp	r2, #0
 80065ba:	dc22      	bgt.n	8006602 <trans_anim_cb+0xfe>
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	2500      	movs	r5, #0
 80065c0:	f363 050f 	bfi	r5, r3, #0, #16
 80065c4:	e7cf      	b.n	8006566 <trans_anim_cb+0x62>
        switch(tr->prop) {
 80065c6:	2957      	cmp	r1, #87	; 0x57
 80065c8:	d0ca      	beq.n	8006560 <trans_anim_cb+0x5c>
                if(v == 0) value_final.num = tr->start_value.num;
 80065ca:	2a00      	cmp	r2, #0
 80065cc:	d0ca      	beq.n	8006564 <trans_anim_cb+0x60>
                else if(v == 255) value_final.num = tr->end_value.num;
 80065ce:	2aff      	cmp	r2, #255	; 0xff
 80065d0:	d00a      	beq.n	80065e8 <trans_anim_cb+0xe4>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 80065d2:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 80065d6:	1b5b      	subs	r3, r3, r5
 80065d8:	4353      	muls	r3, r2
 80065da:	eb05 2523 	add.w	r5, r5, r3, asr #8
 80065de:	e7c2      	b.n	8006566 <trans_anim_cb+0x62>
        switch(tr->prop) {
 80065e0:	2966      	cmp	r1, #102	; 0x66
 80065e2:	d0bd      	beq.n	8006560 <trans_anim_cb+0x5c>
 80065e4:	2967      	cmp	r1, #103	; 0x67
 80065e6:	e7ef      	b.n	80065c8 <trans_anim_cb+0xc4>
                else value_final.ptr = tr->end_value.ptr;
 80065e8:	6925      	ldr	r5, [r4, #16]
 80065ea:	e7bc      	b.n	8006566 <trans_anim_cb+0x62>
                else value_final.num = tr->end_value.num;
 80065ec:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 80065f0:	b90d      	cbnz	r5, 80065f6 <trans_anim_cb+0xf2>
 80065f2:	461d      	mov	r5, r3
 80065f4:	e7b7      	b.n	8006566 <trans_anim_cb+0x62>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0b5      	beq.n	8006566 <trans_anim_cb+0x62>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 80065fa:	2a7f      	cmp	r2, #127	; 0x7f
 80065fc:	bfc8      	it	gt
 80065fe:	461d      	movgt	r5, r3
 8006600:	e7b1      	b.n	8006566 <trans_anim_cb+0x62>
                else if(v >= 255) value_final.color = tr->end_value.color;
 8006602:	2afe      	cmp	r2, #254	; 0xfe
 8006604:	dd01      	ble.n	800660a <trans_anim_cb+0x106>
 8006606:	8a23      	ldrh	r3, [r4, #16]
 8006608:	e7d9      	b.n	80065be <trans_anim_cb+0xba>
#endif
#elif LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800660a:	89a0      	ldrh	r0, [r4, #12]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800660c:	f1c2 0eff 	rsb	lr, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006610:	8a23      	ldrh	r3, [r4, #16]
 8006612:	f248 0581 	movw	r5, #32897	; 0x8081
 8006616:	f3c0 1045 	ubfx	r0, r0, #5, #6
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800661a:	f894 8010 	ldrb.w	r8, [r4, #16]
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800661e:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8006622:	fb0e f000 	mul.w	r0, lr, r0
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006626:	f008 081f 	and.w	r8, r8, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800662a:	fb02 0003 	mla	r0, r2, r3, r0
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800662e:	7b23      	ldrb	r3, [r4, #12]
 8006630:	f003 031f 	and.w	r3, r3, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006634:	3080      	adds	r0, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006636:	fb0e f303 	mul.w	r3, lr, r3
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800663a:	4368      	muls	r0, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800663c:	fb02 3308 	mla	r3, r2, r8, r3
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8006640:	f894 8011 	ldrb.w	r8, [r4, #17]
 8006644:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006648:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800664a:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800664e:	436b      	muls	r3, r5
 8006650:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 8006654:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8006658:	7b60      	ldrb	r0, [r4, #13]
 800665a:	08c0      	lsrs	r0, r0, #3
 800665c:	fb0e f000 	mul.w	r0, lr, r0
 8006660:	fb02 0208 	mla	r2, r2, r8, r0
 8006664:	3280      	adds	r2, #128	; 0x80
 8006666:	436a      	muls	r2, r5
 8006668:	0dd2      	lsrs	r2, r2, #23
 800666a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800666e:	e7a6      	b.n	80065be <trans_anim_cb+0xba>
        bool refr = true;
 8006670:	f04f 0801 	mov.w	r8, #1
 8006674:	e784      	b.n	8006580 <trans_anim_cb+0x7c>
 8006676:	bf00      	nop
 8006678:	00410005 	.word	0x00410005
 800667c:	00020009 	.word	0x00020009

08006680 <trans_anim_ready_cb>:
{
 8006680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    trans_t * tr = a->var;
 8006684:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8006686:	4827      	ldr	r0, [pc, #156]	; (8006724 <trans_anim_ready_cb+0xa4>)
    lv_obj_t * obj = tr->obj;
 8006688:	6825      	ldr	r5, [r4, #0]
    lv_style_prop_t prop = tr->prop;
 800668a:	88a7      	ldrh	r7, [r4, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800668c:	f01e fa1e 	bl	8024acc <_lv_ll_get_head>
 8006690:	4e24      	ldr	r6, [pc, #144]	; (8006724 <trans_anim_ready_cb+0xa4>)
 8006692:	4601      	mov	r1, r0
 8006694:	b919      	cbnz	r1, 800669e <trans_anim_ready_cb+0x1e>
        for(i = 0; i < obj->style_cnt; i++) {
 8006696:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 8006698:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 800669c:	e03d      	b.n	800671a <trans_anim_ready_cb+0x9a>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 800669e:	42a1      	cmp	r1, r4
 80066a0:	d00b      	beq.n	80066ba <trans_anim_ready_cb+0x3a>
 80066a2:	680a      	ldr	r2, [r1, #0]
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d107      	bne.n	80066ba <trans_anim_ready_cb+0x3a>
 80066aa:	688a      	ldr	r2, [r1, #8]
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d103      	bne.n	80066ba <trans_anim_ready_cb+0x3a>
 80066b2:	888a      	ldrh	r2, [r1, #4]
 80066b4:	88a3      	ldrh	r3, [r4, #4]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d031      	beq.n	800671e <trans_anim_ready_cb+0x9e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 80066ba:	4630      	mov	r0, r6
 80066bc:	f01e fa0c 	bl	8024ad8 <_lv_ll_get_next>
 80066c0:	4601      	mov	r1, r0
 80066c2:	e7e7      	b.n	8006694 <trans_anim_ready_cb+0x14>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 80066c4:	68eb      	ldr	r3, [r5, #12]
 80066c6:	00ce      	lsls	r6, r1, #3
 80066c8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80066cc:	79d8      	ldrb	r0, [r3, #7]
 80066ce:	0780      	lsls	r0, r0, #30
 80066d0:	d522      	bpl.n	8006718 <trans_anim_ready_cb+0x98>
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	68a0      	ldr	r0, [r4, #8]
 80066d6:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80066da:	4283      	cmp	r3, r0
 80066dc:	d11c      	bne.n	8006718 <trans_anim_ready_cb+0x98>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80066de:	4621      	mov	r1, r4
 80066e0:	4810      	ldr	r0, [pc, #64]	; (8006724 <trans_anim_ready_cb+0xa4>)
 80066e2:	f01e f9b8 	bl	8024a56 <_lv_ll_remove>
                lv_mem_free(tr);
 80066e6:	4620      	mov	r0, r4
 80066e8:	f00c f800 	bl	80126ec <lv_mem_free>
                _lv_obj_style_t * obj_style = &obj->styles[i];
 80066ec:	68ec      	ldr	r4, [r5, #12]
                lv_style_remove_prop(obj_style->style, prop);
 80066ee:	4639      	mov	r1, r7
 80066f0:	59a0      	ldr	r0, [r4, r6]
                _lv_obj_style_t * obj_style = &obj->styles[i];
 80066f2:	eb04 0806 	add.w	r8, r4, r6
                lv_style_remove_prop(obj_style->style, prop);
 80066f6:	f01e fac6 	bl	8024c86 <lv_style_remove_prop>
                if(lv_style_is_empty(obj->styles[i].style)) {
 80066fa:	68eb      	ldr	r3, [r5, #12]
 80066fc:	5998      	ldr	r0, [r3, r6]
 80066fe:	f01e fb6a 	bl	8024dd6 <lv_style_is_empty>
 8006702:	b160      	cbz	r0, 800671e <trans_anim_ready_cb+0x9e>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 8006704:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006708:	4628      	mov	r0, r5
 800670a:	59a1      	ldr	r1, [r4, r6]
 800670c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
}
 8006710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 8006714:	f017 baed 	b.w	801dcf2 <lv_obj_remove_style>
        for(i = 0; i < obj->style_cnt; i++) {
 8006718:	3101      	adds	r1, #1
 800671a:	428a      	cmp	r2, r1
 800671c:	d8d2      	bhi.n	80066c4 <trans_anim_ready_cb+0x44>
}
 800671e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006722:	bf00      	nop
 8006724:	240013b0 	.word	0x240013b0

08006728 <_lv_obj_style_create_transition>:
{
 8006728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800672c:	4698      	mov	r8, r3
 800672e:	b092      	sub	sp, #72	; 0x48
    obj->skip_trans = 1;
 8006730:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
{
 8006734:	4604      	mov	r4, r0
 8006736:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8006738:	460f      	mov	r7, r1
    obj->skip_trans = 1;
 800673a:	f043 0304 	orr.w	r3, r3, #4
    obj->state = prev_state;
 800673e:	8402      	strh	r2, [r0, #32]
{
 8006740:	4615      	mov	r5, r2
    obj->skip_trans = 1;
 8006742:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8006746:	8932      	ldrh	r2, [r6, #8]
 8006748:	f017 f99a 	bl	801da80 <lv_obj_get_style_prop>
    obj->state = new_state;
 800674c:	f8a4 8020 	strh.w	r8, [r4, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8006750:	4682      	mov	sl, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8006752:	8932      	ldrh	r2, [r6, #8]
 8006754:	4639      	mov	r1, r7
 8006756:	4620      	mov	r0, r4
 8006758:	f017 f992 	bl	801da80 <lv_obj_get_style_prop>
    obj->skip_trans = 0;
 800675c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 8006760:	4582      	cmp	sl, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8006762:	4681      	mov	r9, r0
    obj->skip_trans = 0;
 8006764:	f36f 0382 	bfc	r3, #2, #1
 8006768:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800676c:	d072      	beq.n	8006854 <_lv_obj_style_create_transition+0x12c>
    obj->state = prev_state;
 800676e:	8425      	strh	r5, [r4, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8006770:	4639      	mov	r1, r7
 8006772:	8932      	ldrh	r2, [r6, #8]
 8006774:	4620      	mov	r0, r4
 8006776:	f017 f983 	bl	801da80 <lv_obj_get_style_prop>
 800677a:	4605      	mov	r5, r0
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800677c:	4639      	mov	r1, r7
 800677e:	4620      	mov	r0, r4
    obj->state = new_state;
 8006780:	f8a4 8020 	strh.w	r8, [r4, #32]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 8006784:	f017 f931 	bl	801d9ea <get_trans_style>
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 8006788:	462a      	mov	r2, r5
 800678a:	8931      	ldrh	r1, [r6, #8]
 800678c:	6800      	ldr	r0, [r0, #0]
 800678e:	f00c f8f3 	bl	8012978 <lv_style_set_prop>
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 8006792:	8933      	ldrh	r3, [r6, #8]
 8006794:	2b0b      	cmp	r3, #11
 8006796:	d122      	bne.n	80067de <_lv_obj_style_create_transition+0xb6>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 8006798:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800679c:	429d      	cmp	r5, r3
 800679e:	d001      	beq.n	80067a4 <_lv_obj_style_create_transition+0x7c>
 80067a0:	4599      	cmp	r9, r3
 80067a2:	d11c      	bne.n	80067de <_lv_obj_style_create_transition+0xb6>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 80067a4:	4620      	mov	r0, r4
 80067a6:	f016 f845 	bl	801c834 <lv_obj_get_width>
 80067aa:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80067ae:	f340 084f 	sbfx	r8, r0, #1, #16
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 80067b2:	4620      	mov	r0, r4
 80067b4:	f016 f844 	bl	801c840 <lv_obj_get_height>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80067b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 80067bc:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80067c0:	4295      	cmp	r5, r2
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 80067c2:	f343 034f 	sbfx	r3, r3, #1, #16
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80067c6:	d118      	bne.n	80067fa <_lv_obj_style_create_transition+0xd2>
 80067c8:	4598      	cmp	r8, r3
 80067ca:	da0e      	bge.n	80067ea <_lv_obj_style_create_transition+0xc2>
 80067cc:	f108 0501 	add.w	r5, r8, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 80067d0:	4591      	cmp	r9, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80067d2:	b22d      	sxth	r5, r5
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 80067d4:	d103      	bne.n	80067de <_lv_obj_style_create_transition+0xb6>
 80067d6:	f108 0801 	add.w	r8, r8, #1
 80067da:	fa0f f988 	sxth.w	r9, r8
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 80067de:	481f      	ldr	r0, [pc, #124]	; (800685c <_lv_obj_style_create_transition+0x134>)
 80067e0:	f01e f902 	bl	80249e8 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(tr);
 80067e4:	4680      	mov	r8, r0
 80067e6:	b968      	cbnz	r0, 8006804 <_lv_obj_style_create_transition+0xdc>
 80067e8:	e7fe      	b.n	80067e8 <_lv_obj_style_create_transition+0xc0>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80067ea:	1c5d      	adds	r5, r3, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 80067ec:	4591      	cmp	r9, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80067ee:	b22d      	sxth	r5, r5
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 80067f0:	d1f5      	bne.n	80067de <_lv_obj_style_create_transition+0xb6>
 80067f2:	3301      	adds	r3, #1
 80067f4:	fa0f f983 	sxth.w	r9, r3
 80067f8:	e7f1      	b.n	80067de <_lv_obj_style_create_transition+0xb6>
 80067fa:	4591      	cmp	r9, r2
 80067fc:	d1ef      	bne.n	80067de <_lv_obj_style_create_transition+0xb6>
 80067fe:	4598      	cmp	r8, r3
 8006800:	daf7      	bge.n	80067f2 <_lv_obj_style_create_transition+0xca>
 8006802:	e7e8      	b.n	80067d6 <_lv_obj_style_create_transition+0xae>
    tr->end_value = v2;
 8006804:	e9c0 5903 	strd	r5, r9, [r0, #12]
    tr->obj = obj;
 8006808:	6004      	str	r4, [r0, #0]
    tr->prop = tr_dsc->prop;
 800680a:	8933      	ldrh	r3, [r6, #8]
    tr->selector = part;
 800680c:	6087      	str	r7, [r0, #8]
    tr->prop = tr_dsc->prop;
 800680e:	8083      	strh	r3, [r0, #4]
    lv_anim_init(&a);
 8006810:	a801      	add	r0, sp, #4
 8006812:	f00b fd75 	bl	8012300 <lv_anim_init>
    a->end_value = end;
 8006816:	22ff      	movs	r2, #255	; 0xff
    a->exec_cb = exec_cb;
 8006818:	4b11      	ldr	r3, [pc, #68]	; (8006860 <_lv_obj_style_create_transition+0x138>)
    lv_anim_start(&a);
 800681a:	a801      	add	r0, sp, #4
    a->end_value = end;
 800681c:	920b      	str	r2, [sp, #44]	; 0x2c
    a->time = duration;
 800681e:	8832      	ldrh	r2, [r6, #0]
    a->exec_cb = exec_cb;
 8006820:	9302      	str	r3, [sp, #8]
    a->time = duration;
 8006822:	920c      	str	r2, [sp, #48]	; 0x30
    a->act_time = -(int32_t)(delay);
 8006824:	8872      	ldrh	r2, [r6, #2]
    a->start_cb = start_cb;
 8006826:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <_lv_obj_style_create_transition+0x13c>)
    a->act_time = -(int32_t)(delay);
 8006828:	4252      	negs	r2, r2
    a->var = var;
 800682a:	f8cd 8004 	str.w	r8, [sp, #4]
    a->start_cb = start_cb;
 800682e:	9303      	str	r3, [sp, #12]
    a->act_time = -(int32_t)(delay);
 8006830:	920d      	str	r2, [sp, #52]	; 0x34
    a->ready_cb = ready_cb;
 8006832:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <_lv_obj_style_create_transition+0x140>)
    a->path_cb = path_cb;
 8006834:	68f2      	ldr	r2, [r6, #12]
    a->ready_cb = ready_cb;
 8006836:	9304      	str	r3, [sp, #16]
    a->start_value = start;
 8006838:	2300      	movs	r3, #0
    a->path_cb = path_cb;
 800683a:	9208      	str	r2, [sp, #32]
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
 800683c:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
    a->current_value = start;
 8006840:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a->early_apply = en;
 8006844:	f363 0200 	bfi	r2, r3, #0, #1
    a.user_data = tr_dsc->user_data;
 8006848:	6933      	ldr	r3, [r6, #16]
 800684a:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
 800684e:	9307      	str	r3, [sp, #28]
    lv_anim_start(&a);
 8006850:	f00b fda2 	bl	8012398 <lv_anim_start>
}
 8006854:	b012      	add	sp, #72	; 0x48
 8006856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800685a:	bf00      	nop
 800685c:	240013b0 	.word	0x240013b0
 8006860:	08006505 	.word	0x08006505
 8006864:	0801dbc7 	.word	0x0801dbc7
 8006868:	08006681 	.word	0x08006681

0800686c <lv_obj_get_disp>:

    return (lv_obj_t *)act_par;
}

lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 800686c:	b510      	push	{r4, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * scr;

    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800686e:	6843      	ldr	r3, [r0, #4]
{
 8006870:	4604      	mov	r4, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 8006872:	b113      	cbz	r3, 800687a <lv_obj_get_disp+0xe>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 8006874:	f017 fc80 	bl	801e178 <lv_obj_get_screen>
 8006878:	4604      	mov	r4, r0

    lv_disp_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800687a:	480a      	ldr	r0, [pc, #40]	; (80068a4 <lv_obj_get_disp+0x38>)
 800687c:	f01e f926 	bl	8024acc <_lv_ll_get_head>
 8006880:	b178      	cbz	r0, 80068a2 <lv_obj_get_disp+0x36>
        uint32_t i;
        for(i = 0; i < d->screen_cnt; i++) {
 8006882:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006884:	2300      	movs	r3, #0
 8006886:	e005      	b.n	8006894 <lv_obj_get_disp+0x28>
            if(d->screens[i] == scr) return d;
 8006888:	68c1      	ldr	r1, [r0, #12]
 800688a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800688e:	42a1      	cmp	r1, r4
 8006890:	d007      	beq.n	80068a2 <lv_obj_get_disp+0x36>
        for(i = 0; i < d->screen_cnt; i++) {
 8006892:	3301      	adds	r3, #1
 8006894:	429a      	cmp	r2, r3
 8006896:	d1f7      	bne.n	8006888 <lv_obj_get_disp+0x1c>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 8006898:	4601      	mov	r1, r0
 800689a:	4802      	ldr	r0, [pc, #8]	; (80068a4 <lv_obj_get_disp+0x38>)
 800689c:	f01e f91c 	bl	8024ad8 <_lv_ll_get_next>
 80068a0:	e7ee      	b.n	8006880 <lv_obj_get_disp+0x14>
        }
    }

    LV_LOG_WARN("No screen found");
    return NULL;
}
 80068a2:	bd10      	pop	{r4, pc}
 80068a4:	240013f8 	.word	0x240013f8

080068a8 <refr_obj>:
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
}


void refr_obj(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 80068a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	460d      	mov	r5, r1
 80068ae:	b091      	sub	sp, #68	; 0x44
 80068b0:	4680      	mov	r8, r0
    /*Do not refresh hidden objects*/
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 80068b2:	2101      	movs	r1, #1
 80068b4:	4628      	mov	r0, r5
 80068b6:	f015 f8a9 	bl	801ba0c <lv_obj_has_flag>
 80068ba:	4606      	mov	r6, r0
 80068bc:	2800      	cmp	r0, #0
 80068be:	f040 8153 	bne.w	8006b68 <refr_obj+0x2c0>
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80068c2:	4628      	mov	r0, r5
 80068c4:	f015 fe15 	bl	801c4f2 <_lv_obj_get_layer_type>
    if(layer_type == LV_LAYER_TYPE_NONE) {
 80068c8:	4607      	mov	r7, r0
 80068ca:	b930      	cbnz	r0, 80068da <refr_obj+0x32>
        lv_obj_redraw(draw_ctx, obj);
 80068cc:	4629      	mov	r1, r5
 80068ce:	4640      	mov	r0, r8
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
        }

        lv_draw_layer_destroy(draw_ctx, layer_ctx);
    }
}
 80068d0:	b011      	add	sp, #68	; 0x44
 80068d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_redraw(draw_ctx, obj);
 80068d6:	f017 be41 	b.w	801e55c <lv_obj_redraw>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80068da:	2260      	movs	r2, #96	; 0x60
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	f017 f8ce 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80068e4:	fa5f fa80 	uxtb.w	sl, r0
        if(opa < LV_OPA_MIN) return;
 80068e8:	f1ba 0f01 	cmp.w	sl, #1
 80068ec:	f240 813c 	bls.w	8006b68 <refr_obj+0x2c0>
    lv_obj_get_coords(obj, &obj_coords_ext);
 80068f0:	f10d 0910 	add.w	r9, sp, #16
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 80068f4:	4628      	mov	r0, r5
 80068f6:	f015 fdca 	bl	801c48e <_lv_obj_get_ext_draw_size>
 80068fa:	4604      	mov	r4, r0
    lv_obj_get_coords(obj, &obj_coords_ext);
 80068fc:	4649      	mov	r1, r9
 80068fe:	4628      	mov	r0, r5
 8006900:	f015 ff48 	bl	801c794 <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 8006904:	4622      	mov	r2, r4
 8006906:	4621      	mov	r1, r4
 8006908:	4648      	mov	r0, r9
 800690a:	f01d fc92 	bl	8024232 <lv_area_increase>
    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 800690e:	2f02      	cmp	r7, #2
 8006910:	f040 812d 	bne.w	8006b6e <refr_obj+0x2c6>
        lv_area_t tranf_coords = obj_coords_ext;
 8006914:	ac08      	add	r4, sp, #32
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 8006916:	f10d 0b18 	add.w	fp, sp, #24
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 800691a:	4632      	mov	r2, r6
 800691c:	4633      	mov	r3, r6
        lv_area_t tranf_coords = obj_coords_ext;
 800691e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8006922:	e884 0003 	stmia.w	r4, {r0, r1}
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 8006926:	4621      	mov	r1, r4
 8006928:	4628      	mov	r0, r5
 800692a:	f016 f876 	bl	801ca1a <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 800692e:	4622      	mov	r2, r4
 8006930:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8006934:	4658      	mov	r0, fp
 8006936:	f01d fc9c 	bl	8024272 <_lv_area_intersect>
 800693a:	2800      	cmp	r0, #0
 800693c:	f000 8114 	beq.w	8006b68 <refr_obj+0x2c0>
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 8006940:	ac0a      	add	r4, sp, #40	; 0x28
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 8006942:	4632      	mov	r2, r6
 8006944:	2301      	movs	r3, #1
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 8006946:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800694a:	e884 0003 	stmia.w	r4, {r0, r1}
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 800694e:	4621      	mov	r1, r4
 8006950:	4628      	mov	r0, r5
 8006952:	f016 f862 	bl	801ca1a <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 8006956:	464a      	mov	r2, r9
 8006958:	4621      	mov	r1, r4
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 800695a:	4620      	mov	r0, r4
 800695c:	f01d fc89 	bl	8024272 <_lv_area_intersect>
 8006960:	2800      	cmp	r0, #0
 8006962:	f000 8101 	beq.w	8006b68 <refr_obj+0x2c0>
        *layer_area_out = clip_coords_for_obj;
 8006966:	ab02      	add	r3, sp, #8
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 8006968:	f105 0b14 	add.w	fp, r5, #20
 800696c:	2200      	movs	r2, #0
        *layer_area_out = clip_coords_for_obj;
 800696e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006972:	e883 0003 	stmia.w	r3, {r0, r1}
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 8006976:	4659      	mov	r1, fp
 8006978:	a802      	add	r0, sp, #8
 800697a:	f01d fd79 	bl	8024470 <_lv_area_is_in>
 800697e:	2800      	cmp	r0, #0
 8006980:	f000 80fc 	beq.w	8006b7c <refr_obj+0x2d4>
            info.res = LV_COVER_RES_COVER;
 8006984:	2300      	movs	r3, #0
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8006986:	aa0a      	add	r2, sp, #40	; 0x28
 8006988:	2112      	movs	r1, #18
 800698a:	4628      	mov	r0, r5
            info.res = LV_COVER_RES_COVER;
 800698c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            info.area = &layer_area_full;
 8006990:	ab02      	add	r3, sp, #8
 8006992:	930b      	str	r3, [sp, #44]	; 0x2c
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8006994:	f7fd fea2 	bl	80046dc <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 8006998:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 800699c:	f1b9 0900 	subs.w	r9, r9, #0
 80069a0:	bf18      	it	ne
 80069a2:	f04f 0901 	movne.w	r9, #1
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 80069a6:	2f01      	cmp	r7, #1
        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 80069a8:	a902      	add	r1, sp, #8
 80069aa:	4640      	mov	r0, r8
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 80069ac:	bf08      	it	eq
 80069ae:	f049 0902 	orreq.w	r9, r9, #2
        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 80069b2:	464a      	mov	r2, r9
 80069b4:	f017 ff71 	bl	801e89a <lv_draw_layer_create>
        if(layer_ctx == NULL) {
 80069b8:	4604      	mov	r4, r0
 80069ba:	2800      	cmp	r0, #0
 80069bc:	f000 80d4 	beq.w	8006b68 <refr_obj+0x2c0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 80069c0:	226e      	movs	r2, #110	; 0x6e
 80069c2:	2100      	movs	r1, #0
 80069c4:	4628      	mov	r0, r5
 80069c6:	f017 f85b 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 80069ca:	226f      	movs	r2, #111	; 0x6f
    return (lv_coord_t)v.num;
 80069cc:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 80069ce:	2100      	movs	r1, #0
 80069d0:	4628      	mov	r0, r5
 80069d2:	f017 f855 	bl	801da80 <lv_obj_get_style_prop>
        if(LV_COORD_IS_PCT(pivot.x)) {
 80069d6:	f406 43c0 	and.w	r3, r6, #24576	; 0x6000
    return (lv_coord_t)v.num;
 80069da:	b207      	sxth	r7, r0
 80069dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069e0:	d114      	bne.n	8006a0c <refr_obj+0x164>
 80069e2:	f426 43c0 	bic.w	r3, r6, #24576	; 0x6000
 80069e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80069ea:	dc0f      	bgt.n	8006a0c <refr_obj+0x164>
 80069ec:	8b2e      	ldrh	r6, [r5, #24]
            pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 80069ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069f2:	8aaa      	ldrh	r2, [r5, #20]
 80069f4:	f106 0601 	add.w	r6, r6, #1
 80069f8:	bfc8      	it	gt
 80069fa:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 80069fe:	1ab6      	subs	r6, r6, r2
 8006a00:	b236      	sxth	r6, r6
 8006a02:	435e      	muls	r6, r3
 8006a04:	2364      	movs	r3, #100	; 0x64
 8006a06:	fb96 f6f3 	sdiv	r6, r6, r3
 8006a0a:	b236      	sxth	r6, r6
        if(LV_COORD_IS_PCT(pivot.y)) {
 8006a0c:	f407 43c0 	and.w	r3, r7, #24576	; 0x6000
 8006a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a14:	d114      	bne.n	8006a40 <refr_obj+0x198>
 8006a16:	f427 43c0 	bic.w	r3, r7, #24576	; 0x6000
 8006a1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006a1e:	dc0f      	bgt.n	8006a40 <refr_obj+0x198>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006a20:	8b6f      	ldrh	r7, [r5, #26]
            pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 8006a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a26:	8aea      	ldrh	r2, [r5, #22]
 8006a28:	f107 0701 	add.w	r7, r7, #1
 8006a2c:	bfc8      	it	gt
 8006a2e:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8006a32:	1abf      	subs	r7, r7, r2
 8006a34:	b23f      	sxth	r7, r7
 8006a36:	435f      	muls	r7, r3
 8006a38:	2364      	movs	r3, #100	; 0x64
 8006a3a:	fb97 f7f3 	sdiv	r7, r7, r3
 8006a3e:	b23f      	sxth	r7, r7
        lv_draw_img_dsc_init(&draw_dsc);
 8006a40:	a80a      	add	r0, sp, #40	; 0x28
 8006a42:	f017 fed7 	bl	801e7f4 <lv_draw_img_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8006a46:	226d      	movs	r2, #109	; 0x6d
 8006a48:	2100      	movs	r1, #0
 8006a4a:	4628      	mov	r0, r5
        draw_dsc.opa = opa;
 8006a4c:	f88d a033 	strb.w	sl, [sp, #51]	; 0x33
 8006a50:	f017 f816 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006a54:	b203      	sxth	r3, r0
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 8006a56:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8006a5a:	f340 8092 	ble.w	8006b82 <refr_obj+0x2da>
 8006a5e:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 8006a62:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8006a64:	226c      	movs	r2, #108	; 0x6c
 8006a66:	2100      	movs	r1, #0
 8006a68:	4628      	mov	r0, r5
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 8006a6a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8006a6e:	f017 f807 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8006a72:	2267      	movs	r2, #103	; 0x67
        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 8006a74:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f017 f800 	bl	801da80 <lv_obj_get_style_prop>
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 8006a80:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 8006a84:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8006a88:	f019 0a02 	ands.w	sl, r9, #2
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 8006a8c:	f360 0303 	bfi	r3, r0, #0, #4
 8006a90:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 8006a94:	4b48      	ldr	r3, [pc, #288]	; (8006bb8 <refr_obj+0x310>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	7c1b      	ldrb	r3, [r3, #16]
 8006a9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006aa0:	f363 0200 	bfi	r2, r3, #0, #1
 8006aa4:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8006aa8:	d010      	beq.n	8006acc <refr_obj+0x224>
            layer_ctx->area_act = layer_ctx->area_full;
 8006aaa:	f104 0308 	add.w	r3, r4, #8
 8006aae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ab2:	e883 0003 	stmia.w	r3, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8006ab6:	8a62      	ldrh	r2, [r4, #18]
 8006ab8:	8963      	ldrh	r3, [r4, #10]
 8006aba:	4413      	add	r3, r2
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 8006abc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b21b      	sxth	r3, r3
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	bfa8      	it	ge
 8006ac8:	4613      	movge	r3, r2
 8006aca:	81e3      	strh	r3, [r4, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 8006acc:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8006ad0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	dc43      	bgt.n	8006b60 <refr_obj+0x2b8>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8006ad8:	f1ba 0f00 	cmp.w	sl, #0
 8006adc:	d026      	beq.n	8006b2c <refr_obj+0x284>
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8006ade:	f1b9 0f02 	cmp.w	r9, #2
 8006ae2:	d017      	beq.n	8006b14 <refr_obj+0x26c>
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 8006ae4:	f104 0308 	add.w	r3, r4, #8
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4659      	mov	r1, fp
 8006aec:	4618      	mov	r0, r3
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	f01d fcbe 	bl	8024470 <_lv_area_is_in>
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d049      	beq.n	8006b8e <refr_obj+0x2e6>
            info.res = LV_COVER_RES_COVER;
 8006afa:	2200      	movs	r2, #0
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8006afc:	2112      	movs	r1, #18
 8006afe:	4628      	mov	r0, r5
            info.area = &layer_ctx->area_act;
 8006b00:	9309      	str	r3, [sp, #36]	; 0x24
            info.res = LV_COVER_RES_COVER;
 8006b02:	f88d 2020 	strb.w	r2, [sp, #32]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8006b06:	aa08      	add	r2, sp, #32
 8006b08:	f7fd fde8 	bl	80046dc <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 8006b0c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d13c      	bne.n	8006b8e <refr_obj+0x2e6>
        has_alpha = false;
 8006b14:	2200      	movs	r2, #0
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 8006b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 8006b1a:	4640      	mov	r0, r8
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 8006b1c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8006b20:	4299      	cmp	r1, r3
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 8006b22:	4621      	mov	r1, r4
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 8006b24:	bfc8      	it	gt
 8006b26:	81e3      	strhgt	r3, [r4, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 8006b28:	f017 fee7 	bl	801e8fa <lv_draw_layer_adjust>
            lv_obj_redraw(draw_ctx, obj);
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	4640      	mov	r0, r8
 8006b30:	f017 fd14 	bl	801e55c <lv_obj_redraw>
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 8006b34:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006b38:	8aab      	ldrh	r3, [r5, #20]
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 8006b3a:	4640      	mov	r0, r8
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 8006b3c:	8811      	ldrh	r1, [r2, #0]
 8006b3e:	1a5b      	subs	r3, r3, r1
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 8006b40:	4621      	mov	r1, r4
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 8006b42:	4433      	add	r3, r6
 8006b44:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 8006b48:	8aeb      	ldrh	r3, [r5, #22]
 8006b4a:	8852      	ldrh	r2, [r2, #2]
 8006b4c:	1a9b      	subs	r3, r3, r2
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 8006b4e:	aa0a      	add	r2, sp, #40	; 0x28
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 8006b50:	443b      	add	r3, r7
 8006b52:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 8006b56:	f017 fed4 	bl	801e902 <lv_draw_layer_blend>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 8006b5a:	f1ba 0f00 	cmp.w	sl, #0
 8006b5e:	d11d      	bne.n	8006b9c <refr_obj+0x2f4>
        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 8006b60:	4621      	mov	r1, r4
 8006b62:	4640      	mov	r0, r8
 8006b64:	f017 fed1 	bl	801e90a <lv_draw_layer_destroy>
}
 8006b68:	b011      	add	sp, #68	; 0x44
 8006b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 8006b6e:	2f01      	cmp	r7, #1
 8006b70:	d1fa      	bne.n	8006b68 <refr_obj+0x2c0>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 8006b72:	ac0a      	add	r4, sp, #40	; 0x28
 8006b74:	464a      	mov	r2, r9
 8006b76:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8006b7a:	e6ee      	b.n	800695a <refr_obj+0xb2>
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 8006b7c:	f04f 0901 	mov.w	r9, #1
 8006b80:	e711      	b.n	80069a6 <refr_obj+0xfe>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f6bf af6e 	bge.w	8006a64 <refr_obj+0x1bc>
 8006b88:	f500 6061 	add.w	r0, r0, #3600	; 0xe10
 8006b8c:	e769      	b.n	8006a62 <refr_obj+0x1ba>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 8006b8e:	8a22      	ldrh	r2, [r4, #16]
 8006b90:	8963      	ldrh	r3, [r4, #10]
 8006b92:	4413      	add	r3, r2
 8006b94:	2201      	movs	r2, #1
 8006b96:	3b01      	subs	r3, #1
 8006b98:	81e3      	strh	r3, [r4, #14]
 8006b9a:	e7bc      	b.n	8006b16 <refr_obj+0x26e>
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 8006b9c:	89e3      	ldrh	r3, [r4, #14]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8006b9e:	8a62      	ldrh	r2, [r4, #18]
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 8006ba0:	3301      	adds	r3, #1
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8006ba2:	3a01      	subs	r2, #1
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 8006ba4:	b29b      	uxth	r3, r3
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8006ba6:	441a      	add	r2, r3
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 8006ba8:	8163      	strh	r3, [r4, #10]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 8006baa:	b21b      	sxth	r3, r3
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8006bac:	81e2      	strh	r2, [r4, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 8006bae:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	da93      	bge.n	8006ade <refr_obj+0x236>
 8006bb6:	e7d3      	b.n	8006b60 <refr_obj+0x2b8>
 8006bb8:	24001160 	.word	0x24001160

08006bbc <refr_obj_and_children>:
{
 8006bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc0:	4606      	mov	r6, r0
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 8006bc2:	460d      	mov	r5, r1
 8006bc4:	b929      	cbnz	r1, 8006bd2 <refr_obj_and_children+0x16>
 8006bc6:	4b1f      	ldr	r3, [pc, #124]	; (8006c44 <refr_obj_and_children+0x88>)
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	f014 fac1 	bl	801b150 <lv_disp_get_scr_act>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 8006bce:	4605      	mov	r5, r0
 8006bd0:	b140      	cbz	r0, 8006be4 <refr_obj_and_children+0x28>
    refr_obj(draw_ctx, top_obj);
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	f7ff fe67 	bl	80068a8 <refr_obj>
    parent = lv_obj_get_parent(top_obj);
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f017 fad4 	bl	801e188 <lv_obj_get_parent>
        parent = lv_obj_get_parent(parent);
 8006be0:	4604      	mov	r4, r0
    while(parent != NULL) {
 8006be2:	b908      	cbnz	r0, 8006be8 <refr_obj_and_children+0x2c>
}
 8006be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; i < child_cnt; i++) {
 8006be8:	2700      	movs	r7, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 8006bea:	4620      	mov	r0, r4
 8006bec:	f017 fade 	bl	801e1ac <lv_obj_get_child_cnt>
 8006bf0:	4680      	mov	r8, r0
        bool go = false;
 8006bf2:	46b9      	mov	r9, r7
        for(i = 0; i < child_cnt; i++) {
 8006bf4:	4547      	cmp	r7, r8
 8006bf6:	d113      	bne.n	8006c20 <refr_obj_and_children+0x64>
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 8006bf8:	4632      	mov	r2, r6
 8006bfa:	2117      	movs	r1, #23
 8006bfc:	4620      	mov	r0, r4
        parent = lv_obj_get_parent(parent);
 8006bfe:	4625      	mov	r5, r4
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 8006c00:	f7fd fd6c 	bl	80046dc <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 8006c04:	4632      	mov	r2, r6
 8006c06:	2118      	movs	r1, #24
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f7fd fd67 	bl	80046dc <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 8006c0e:	4632      	mov	r2, r6
 8006c10:	2119      	movs	r1, #25
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7fd fd62 	bl	80046dc <lv_event_send>
        parent = lv_obj_get_parent(parent);
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f017 fab5 	bl	801e188 <lv_obj_get_parent>
 8006c1e:	e7df      	b.n	8006be0 <refr_obj_and_children+0x24>
            lv_obj_t * child = parent->spec_attr->children[i];
 8006c20:	68a3      	ldr	r3, [r4, #8]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
            if(!go) {
 8006c28:	f1b9 0f00 	cmp.w	r9, #0
 8006c2c:	d106      	bne.n	8006c3c <refr_obj_and_children+0x80>
                if(child == border_p) go = true;
 8006c2e:	1a6b      	subs	r3, r5, r1
 8006c30:	f1d3 0900 	rsbs	r9, r3, #0
 8006c34:	eb49 0903 	adc.w	r9, r9, r3
        for(i = 0; i < child_cnt; i++) {
 8006c38:	3701      	adds	r7, #1
 8006c3a:	e7db      	b.n	8006bf4 <refr_obj_and_children+0x38>
                refr_obj(draw_ctx, child);
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	f7ff fe33 	bl	80068a8 <refr_obj>
 8006c42:	e7f9      	b.n	8006c38 <refr_obj_and_children+0x7c>
 8006c44:	24001160 	.word	0x24001160

08006c48 <refr_area_part>:
{
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006c4c:	4c81      	ldr	r4, [pc, #516]	; (8006e54 <refr_area_part+0x20c>)
{
 8006c4e:	4605      	mov	r5, r0
 8006c50:	b0a9      	sub	sp, #164	; 0xa4
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006c52:	6820      	ldr	r0, [r4, #0]
 8006c54:	f01d fa42 	bl	80240dc <lv_disp_get_draw_buf>
    if(draw_ctx->init_buf)
 8006c58:	68eb      	ldr	r3, [r5, #12]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006c5a:	4606      	mov	r6, r0
    if(draw_ctx->init_buf)
 8006c5c:	b10b      	cbz	r3, 8006c62 <refr_area_part+0x1a>
        draw_ctx->init_buf(draw_ctx);
 8006c5e:	4628      	mov	r0, r5
 8006c60:	4798      	blx	r3
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 8006c62:	6833      	ldr	r3, [r6, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d13b      	bne.n	8006ce0 <refr_area_part+0x98>
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 8006c68:	686e      	ldr	r6, [r5, #4]
 8006c6a:	6820      	ldr	r0, [r4, #0]
 8006c6c:	f014 fa70 	bl	801b150 <lv_disp_get_scr_act>
 8006c70:	4601      	mov	r1, r0
 8006c72:	4630      	mov	r0, r6
 8006c74:	f017 fc38 	bl	801e4e8 <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
 8006c78:	6823      	ldr	r3, [r4, #0]
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 8006c7a:	4607      	mov	r7, r0
    if(disp_refr->prev_scr) {
 8006c7c:	695e      	ldr	r6, [r3, #20]
 8006c7e:	2e00      	cmp	r6, #0
 8006c80:	d144      	bne.n	8006d0c <refr_area_part+0xc4>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8006c82:	2800      	cmp	r0, #0
 8006c84:	f040 8089 	bne.w	8006d9a <refr_area_part+0x152>
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8006c88:	6820      	ldr	r0, [r4, #0]
 8006c8a:	f00b fa05 	bl	8012098 <lv_disp_get_hor_res>
 8006c8e:	4606      	mov	r6, r0
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	f00b fa11 	bl	80120b8 <lv_disp_get_ver_res>
 8006c96:	3801      	subs	r0, #1
        lv_area_set(&a, 0, 0,
 8006c98:	2200      	movs	r2, #0
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8006c9a:	1e73      	subs	r3, r6, #1
        lv_area_set(&a, 0, 0,
 8006c9c:	b200      	sxth	r0, r0
 8006c9e:	b21b      	sxth	r3, r3
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	9000      	str	r0, [sp, #0]
 8006ca4:	a818      	add	r0, sp, #96	; 0x60
 8006ca6:	f01d faa5 	bl	80241f4 <lv_area_set>
        if(draw_ctx->draw_bg) {
 8006caa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d144      	bne.n	8006d3a <refr_area_part+0xf2>
        else if(disp_refr->bg_img) {
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d05f      	beq.n	8006d78 <refr_area_part+0x130>
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 8006cb8:	a917      	add	r1, sp, #92	; 0x5c
 8006cba:	f002 f941 	bl	8008f40 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 8006cbe:	2801      	cmp	r0, #1
 8006cc0:	d14f      	bne.n	8006d62 <refr_area_part+0x11a>
                lv_draw_img_dsc_init(&dsc);
 8006cc2:	a81a      	add	r0, sp, #104	; 0x68
 8006cc4:	f017 fd96 	bl	801e7f4 <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 8006cc8:	6823      	ldr	r3, [r4, #0]
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 8006cca:	a91a      	add	r1, sp, #104	; 0x68
 8006ccc:	4628      	mov	r0, r5
                dsc.opa = disp_refr->bg_opa;
 8006cce:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006cd2:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 8006cd6:	aa18      	add	r2, sp, #96	; 0x60
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	f000 fecf 	bl	8007a7c <lv_draw_img>
                LV_LOG_WARN("Can't draw the background image");
 8006cde:	e040      	b.n	8006d62 <refr_area_part+0x11a>
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 8006ce0:	6823      	ldr	r3, [r4, #0]
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 8006ce2:	6870      	ldr	r0, [r6, #4]
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68f2      	ldr	r2, [r6, #12]
 8006ce8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006cec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 8006cf0:	b110      	cbz	r0, 8006cf8 <refr_area_part+0xb0>
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 8006cf2:	434b      	muls	r3, r1
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d1b7      	bne.n	8006c68 <refr_area_part+0x20>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8006cf8:	6822      	ldr	r2, [r4, #0]
        while(draw_buf->flushing) {
 8006cfa:	6933      	ldr	r3, [r6, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0b3      	beq.n	8006c68 <refr_area_part+0x20>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8006d00:	6810      	ldr	r0, [r2, #0]
 8006d02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0f8      	beq.n	8006cfa <refr_area_part+0xb2>
 8006d08:	4798      	blx	r3
 8006d0a:	e7f5      	b.n	8006cf8 <refr_area_part+0xb0>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	6868      	ldr	r0, [r5, #4]
 8006d10:	f017 fbea 	bl	801e4e8 <lv_refr_get_top_obj>
 8006d14:	4606      	mov	r6, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8006d16:	2f00      	cmp	r7, #0
 8006d18:	d13f      	bne.n	8006d9a <refr_area_part+0x152>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d0b4      	beq.n	8006c88 <refr_area_part+0x40>
    if(disp_refr->draw_prev_over_act) {
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006d24:	07d1      	lsls	r1, r2, #31
 8006d26:	d445      	bmi.n	8006db4 <refr_area_part+0x16c>
        if(disp_refr->prev_scr) {
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	b313      	cbz	r3, 8006d72 <refr_area_part+0x12a>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f7ff ff44 	bl	8006bbc <refr_obj_and_children>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 8006d34:	b1ef      	cbz	r7, 8006d72 <refr_area_part+0x12a>
        refr_obj_and_children(draw_ctx, top_act_scr);
 8006d36:	4639      	mov	r1, r7
 8006d38:	e047      	b.n	8006dca <refr_area_part+0x182>
            lv_draw_rect_dsc_init(&dsc);
 8006d3a:	a81a      	add	r0, sp, #104	; 0x68
 8006d3c:	f001 fdfe 	bl	800893c <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 8006d40:	6823      	ldr	r3, [r4, #0]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 8006d42:	a91a      	add	r1, sp, #104	; 0x68
 8006d44:	4628      	mov	r0, r5
            dsc.bg_img_src = disp_refr->bg_img;
 8006d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d48:	921e      	str	r2, [sp, #120]	; 0x78
            dsc.bg_img_opa = disp_refr->bg_opa;
 8006d4a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006d4e:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
            dsc.bg_color = disp_refr->bg_color;
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
            dsc.bg_opa = disp_refr->bg_opa;
 8006d54:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 8006d58:	aa18      	add	r2, sp, #96	; 0x60
            dsc.bg_color = disp_refr->bg_color;
 8006d5a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 8006d5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006d60:	4798      	blx	r3
    if(disp_refr->draw_prev_over_act) {
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006d68:	07d0      	lsls	r0, r2, #31
 8006d6a:	d422      	bmi.n	8006db2 <refr_area_part+0x16a>
        if(disp_refr->prev_scr) {
 8006d6c:	695e      	ldr	r6, [r3, #20]
 8006d6e:	2e00      	cmp	r6, #0
 8006d70:	d1dc      	bne.n	8006d2c <refr_area_part+0xe4>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	691f      	ldr	r7, [r3, #16]
 8006d76:	e7de      	b.n	8006d36 <refr_area_part+0xee>
            lv_draw_rect_dsc_init(&dsc);
 8006d78:	a81a      	add	r0, sp, #104	; 0x68
 8006d7a:	f001 fddf 	bl	800893c <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 8006d7e:	6823      	ldr	r3, [r4, #0]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 8006d80:	a91a      	add	r1, sp, #104	; 0x68
 8006d82:	4628      	mov	r0, r5
            dsc.bg_color = disp_refr->bg_color;
 8006d84:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006d86:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            dsc.bg_opa = disp_refr->bg_opa;
 8006d8a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 8006d8e:	686a      	ldr	r2, [r5, #4]
            dsc.bg_opa = disp_refr->bg_opa;
 8006d90:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 8006d94:	f018 fb07 	bl	801f3a6 <lv_draw_rect>
 8006d98:	e7e3      	b.n	8006d62 <refr_area_part+0x11a>
    if(disp_refr->draw_prev_over_act) {
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006da0:	07d2      	lsls	r2, r2, #31
 8006da2:	d408      	bmi.n	8006db6 <refr_area_part+0x16e>
        if(disp_refr->prev_scr) {
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0c4      	beq.n	8006d34 <refr_area_part+0xec>
 8006daa:	2e00      	cmp	r6, #0
 8006dac:	bf08      	it	eq
 8006dae:	461e      	moveq	r6, r3
 8006db0:	e7bc      	b.n	8006d2c <refr_area_part+0xe4>
    if(disp_refr->draw_prev_over_act) {
 8006db2:	2600      	movs	r6, #0
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 8006db4:	691f      	ldr	r7, [r3, #16]
        refr_obj_and_children(draw_ctx, top_act_scr);
 8006db6:	4639      	mov	r1, r7
 8006db8:	4628      	mov	r0, r5
 8006dba:	f7ff feff 	bl	8006bbc <refr_obj_and_children>
        if(disp_refr->prev_scr) {
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	6959      	ldr	r1, [r3, #20]
 8006dc2:	b129      	cbz	r1, 8006dd0 <refr_area_part+0x188>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 8006dc4:	2e00      	cmp	r6, #0
 8006dc6:	bf18      	it	ne
 8006dc8:	4631      	movne	r1, r6
        refr_obj_and_children(draw_ctx, top_act_scr);
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f7ff fef6 	bl	8006bbc <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 8006dd0:	6820      	ldr	r0, [r4, #0]
 8006dd2:	f014 f9cb 	bl	801b16c <lv_disp_get_layer_top>
 8006dd6:	4601      	mov	r1, r0
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f7ff feef 	bl	8006bbc <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 8006dde:	6820      	ldr	r0, [r4, #0]
 8006de0:	f014 f9cb 	bl	801b17a <lv_disp_get_layer_sys>
 8006de4:	4601      	mov	r1, r0
 8006de6:	4628      	mov	r0, r5
 8006de8:	f7ff fee8 	bl	8006bbc <refr_obj_and_children>
    draw_buf_flush(disp_refr);
 8006dec:	6823      	ldr	r3, [r4, #0]
/**
 * Flush the content of the draw buffer
 */
static void draw_buf_flush(lv_disp_t * disp)
{
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006dee:	4618      	mov	r0, r3
    draw_buf_flush(disp_refr);
 8006df0:	9307      	str	r3, [sp, #28]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006df2:	f01d f973 	bl	80240dc <lv_disp_get_draw_buf>

    /*Flush the rendered content to the display*/
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 8006df6:	9b07      	ldr	r3, [sp, #28]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006df8:	4680      	mov	r8, r0
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 8006dfe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006e00:	b10b      	cbz	r3, 8006e06 <refr_area_part+0x1be>
 8006e02:	4628      	mov	r0, r5
 8006e04:	4798      	blx	r3

    /* In partial double buffered mode wait until the other buffer is freed
     * and driver is ready to receive the new buffer */
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 8006e06:	f8d8 3000 	ldr.w	r3, [r8]
 8006e0a:	b953      	cbnz	r3, 8006e22 <refr_area_part+0x1da>
        while(draw_buf->flushing) {
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
        }
    }

    draw_buf->flushing = 1;
 8006e0c:	2301      	movs	r3, #1

    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8006e0e:	6820      	ldr	r0, [r4, #0]
    draw_buf->flushing = 1;
 8006e10:	f8c8 3010 	str.w	r3, [r8, #16]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8006e14:	6802      	ldr	r2, [r0, #0]
 8006e16:	68d2      	ldr	r2, [r2, #12]
 8006e18:	6991      	ldr	r1, [r2, #24]
 8006e1a:	07ce      	lsls	r6, r1, #31
 8006e1c:	d41c      	bmi.n	8006e58 <refr_area_part+0x210>
    else draw_buf->flushing_last = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e01d      	b.n	8006e5e <refr_area_part+0x216>
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 8006e22:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0f0      	beq.n	8006e0c <refr_area_part+0x1c4>
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	8813      	ldrh	r3, [r2, #0]
 8006e30:	8852      	ldrh	r2, [r2, #2]
 8006e32:	fb13 f302 	smulbb	r3, r3, r2
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 8006e36:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d0e6      	beq.n	8006e0c <refr_area_part+0x1c4>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8006e3e:	6822      	ldr	r2, [r4, #0]
        while(draw_buf->flushing) {
 8006e40:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0e1      	beq.n	8006e0c <refr_area_part+0x1c4>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8006e48:	6810      	ldr	r0, [r2, #0]
 8006e4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0f7      	beq.n	8006e40 <refr_area_part+0x1f8>
 8006e50:	4798      	blx	r3
 8006e52:	e7f4      	b.n	8006e3e <refr_area_part+0x1f6>
 8006e54:	24001160 	.word	0x24001160
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8006e58:	6992      	ldr	r2, [r2, #24]
 8006e5a:	0794      	lsls	r4, r2, #30
 8006e5c:	d5df      	bpl.n	8006e1e <refr_area_part+0x1d6>
    else draw_buf->flushing_last = 0;
 8006e5e:	f8c8 3014 	str.w	r3, [r8, #20]

    bool flushing_last = draw_buf->flushing_last;
 8006e62:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006e66:	930e      	str	r3, [sp, #56]	; 0x38

    if(disp->driver->flush_cb) {
 8006e68:	9b07      	ldr	r3, [sp, #28]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	695a      	ldr	r2, [r3, #20]
 8006e6e:	2a00      	cmp	r2, #0
 8006e70:	f000 80a1 	beq.w	8006fb6 <refr_area_part+0x36e>
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 8006e74:	7c1a      	ldrb	r2, [r3, #16]
 8006e76:	f012 0f30 	tst.w	r2, #48	; 0x30
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 8006e7a:	e9d5 5400 	ldrd	r5, r4, [r5]
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 8006e7e:	f000 81bc 	beq.w	80071fa <refr_area_part+0x5b2>
 8006e82:	0751      	lsls	r1, r2, #29
 8006e84:	f140 81b9 	bpl.w	80071fa <refr_area_part+0x5b2>
    lv_disp_drv_t * drv = disp_refr->driver;
 8006e88:	6806      	ldr	r6, [r0, #0]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 8006e8a:	7c33      	ldrb	r3, [r6, #16]
 8006e8c:	f003 0206 	and.w	r2, r3, #6
 8006e90:	2a06      	cmp	r2, #6
 8006e92:	f000 8090 	beq.w	8006fb6 <refr_area_part+0x36e>
    if(drv->rotated == LV_DISP_ROT_180) {
 8006e96:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8006e9a:	2a20      	cmp	r2, #32
 8006e9c:	d13a      	bne.n	8006f14 <refr_area_part+0x2cc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006e9e:	88a2      	ldrh	r2, [r4, #4]
 8006ea0:	1ea8      	subs	r0, r5, #2
 8006ea2:	8823      	ldrh	r3, [r4, #0]
 8006ea4:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006ea6:	8861      	ldrh	r1, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006ea8:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006eaa:	88e3      	ldrh	r3, [r4, #6]
 8006eac:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006eae:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006eb0:	1a5b      	subs	r3, r3, r1
    uint32_t i = total - 1, j = 0;
 8006eb2:	f04f 31ff 	mov.w	r1, #4294967295
 8006eb6:	b21b      	sxth	r3, r3
 8006eb8:	fb02 1103 	mla	r1, r2, r3, r1
    uint32_t total = area_w * area_h;
 8006ebc:	4353      	muls	r3, r2
    uint32_t i = total - 1, j = 0;
 8006ebe:	460a      	mov	r2, r1
 8006ec0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    while(i > j) {
 8006ec4:	1a8f      	subs	r7, r1, r2
 8006ec6:	42ba      	cmp	r2, r7
 8006ec8:	d81b      	bhi.n	8006f02 <refr_area_part+0x2ba>
    area->y2 = drv->ver_res - area->y1 - 1;
 8006eca:	8873      	ldrh	r3, [r6, #2]
        call_flush_cb(drv, area, color_p);
 8006ecc:	4630      	mov	r0, r6
    area->y2 = drv->ver_res - area->y1 - 1;
 8006ece:	8861      	ldrh	r1, [r4, #2]
 8006ed0:	3b01      	subs	r3, #1
    tmp_coord = area->y2;
 8006ed2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    area->y2 = drv->ver_res - area->y1 - 1;
 8006ed6:	1a5b      	subs	r3, r3, r1
    area->x2 = drv->hor_res - area->x1 - 1;
 8006ed8:	8821      	ldrh	r1, [r4, #0]
    area->y2 = drv->ver_res - area->y1 - 1;
 8006eda:	80e3      	strh	r3, [r4, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 8006edc:	8873      	ldrh	r3, [r6, #2]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	1a9b      	subs	r3, r3, r2
    tmp_coord = area->x2;
 8006ee2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    area->y1 = drv->ver_res - tmp_coord - 1;
 8006ee6:	8063      	strh	r3, [r4, #2]
    area->x2 = drv->hor_res - area->x1 - 1;
 8006ee8:	8833      	ldrh	r3, [r6, #0]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	1a5b      	subs	r3, r3, r1
        call_flush_cb(drv, area, color_p);
 8006eee:	4621      	mov	r1, r4
    area->x2 = drv->hor_res - area->x1 - 1;
 8006ef0:	80a3      	strh	r3, [r4, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 8006ef2:	8833      	ldrh	r3, [r6, #0]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	1a9b      	subs	r3, r3, r2
        call_flush_cb(drv, area, color_p);
 8006ef8:	462a      	mov	r2, r5
    area->x1 = drv->hor_res - tmp_coord - 1;
 8006efa:	8023      	strh	r3, [r4, #0]
        }
        else {
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 8006efc:	f017 fadc 	bl	801e4b8 <call_flush_cb>
 8006f00:	e059      	b.n	8006fb6 <refr_area_part+0x36e>
        tmp = color_p[i];
 8006f02:	f833 7d02 	ldrh.w	r7, [r3, #-2]!
        i--;
 8006f06:	3a01      	subs	r2, #1
        color_p[i] = color_p[j];
 8006f08:	f830 cf02 	ldrh.w	ip, [r0, #2]!
 8006f0c:	f8a3 c000 	strh.w	ip, [r3]
        color_p[j] = tmp;
 8006f10:	8007      	strh	r7, [r0, #0]
        j++;
 8006f12:	e7d7      	b.n	8006ec4 <refr_area_part+0x27c>
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 8006f14:	06da      	lsls	r2, r3, #27
 8006f16:	d54e      	bpl.n	8006fb6 <refr_area_part+0x36e>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006f18:	f01d f8e0 	bl	80240dc <lv_disp_get_draw_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006f1c:	8823      	ldrh	r3, [r4, #0]
 8006f1e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8006f22:	9308      	str	r3, [sp, #32]
 8006f24:	1c53      	adds	r3, r2, #1
 8006f26:	9003      	str	r0, [sp, #12]
 8006f28:	9808      	ldr	r0, [sp, #32]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8006f30:	1a1f      	subs	r7, r3, r0
 8006f32:	9309      	str	r3, [sp, #36]	; 0x24
 8006f34:	b2bb      	uxth	r3, r7
 8006f36:	b23f      	sxth	r7, r7
 8006f38:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006f3a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8006f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f40:	8863      	ldrh	r3, [r4, #2]
 8006f42:	9304      	str	r3, [sp, #16]
 8006f44:	88e3      	ldrh	r3, [r4, #6]
 8006f46:	9804      	ldr	r0, [sp, #16]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	1a1b      	subs	r3, r3, r0
 8006f4c:	b21b      	sxth	r3, r3
 8006f4e:	9305      	str	r3, [sp, #20]
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 8006f50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006f54:	9805      	ldr	r0, [sp, #20]
 8006f56:	fbb3 f3f7 	udiv	r3, r3, r7
 8006f5a:	4283      	cmp	r3, r0
 8006f5c:	bfa8      	it	ge
 8006f5e:	4603      	movge	r3, r0
 8006f60:	9310      	str	r3, [sp, #64]	; 0x40
        if(drv->rotated == LV_DISP_ROT_90) {
 8006f62:	7c33      	ldrb	r3, [r6, #16]
 8006f64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f68:	2b10      	cmp	r3, #16
 8006f6a:	d13b      	bne.n	8006fe4 <refr_area_part+0x39c>
            area->y2 = drv->ver_res - area->x1 - 1;
 8006f6c:	8873      	ldrh	r3, [r6, #2]
 8006f6e:	9908      	ldr	r1, [sp, #32]
 8006f70:	1e5a      	subs	r2, r3, #1
 8006f72:	1a52      	subs	r2, r2, r1
 8006f74:	80e2      	strh	r2, [r4, #6]
            area->y1 = area->y2 - area_w + 1;
 8006f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f78:	1a9b      	subs	r3, r3, r2
 8006f7a:	8063      	strh	r3, [r4, #2]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8006f7c:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 8006f80:	f04f 0a00 	mov.w	sl, #0
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8006f84:	105b      	asrs	r3, r3, #1
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 8006f86:	46d3      	mov	fp, sl
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8006f88:	9314      	str	r3, [sp, #80]	; 0x50
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 8006f8a:	1c7b      	adds	r3, r7, #1
 8006f8c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006f90:	105b      	asrs	r3, r3, #1
 8006f92:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f94:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	9315      	str	r3, [sp, #84]	; 0x54
 8006f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	930d      	str	r3, [sp, #52]	; 0x34
        while(row < area_h) {
 8006fa4:	9b05      	ldr	r3, [sp, #20]
 8006fa6:	4553      	cmp	r3, sl
 8006fa8:	dc1f      	bgt.n	8006fea <refr_area_part+0x3a2>
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 8006faa:	f1bb 0f00 	cmp.w	fp, #0
 8006fae:	d002      	beq.n	8006fb6 <refr_area_part+0x36e>
 8006fb0:	4658      	mov	r0, fp
 8006fb2:	f00b fc17 	bl	80127e4 <lv_mem_buf_release>
        }
    }

    /*If there are 2 buffers swap them. With direct mode swap only on the last area*/
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 8006fb6:	f8d8 2000 	ldr.w	r2, [r8]
 8006fba:	b182      	cbz	r2, 8006fde <refr_area_part+0x396>
 8006fbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006fc0:	b16b      	cbz	r3, 8006fde <refr_area_part+0x396>
 8006fc2:	9907      	ldr	r1, [sp, #28]
 8006fc4:	6809      	ldr	r1, [r1, #0]
 8006fc6:	7c09      	ldrb	r1, [r1, #16]
 8006fc8:	07c9      	lsls	r1, r1, #31
 8006fca:	d501      	bpl.n	8006fd0 <refr_area_part+0x388>
 8006fcc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006fce:	b131      	cbz	r1, 8006fde <refr_area_part+0x396>
        if(draw_buf->buf_act == draw_buf->buf1)
 8006fd0:	f8d8 1008 	ldr.w	r1, [r8, #8]
            draw_buf->buf_act = draw_buf->buf2;
 8006fd4:	428a      	cmp	r2, r1
 8006fd6:	bf18      	it	ne
 8006fd8:	4613      	movne	r3, r2
 8006fda:	f8c8 3008 	str.w	r3, [r8, #8]
}
 8006fde:	b029      	add	sp, #164	; 0xa4
 8006fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            area->y1 = area->x1;
 8006fe4:	8061      	strh	r1, [r4, #2]
            area->y2 = area->y1 + area_w - 1;
 8006fe6:	80e2      	strh	r2, [r4, #6]
 8006fe8:	e7c8      	b.n	8006f7c <refr_area_part+0x334>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 8006fea:	9b05      	ldr	r3, [sp, #20]
 8006fec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fee:	eba3 030a 	sub.w	r3, r3, sl
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	bfa8      	it	ge
 8006ff6:	4613      	movge	r3, r2
            draw_buf->flushing = 1;
 8006ff8:	9a03      	ldr	r2, [sp, #12]
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 8006ffa:	9306      	str	r3, [sp, #24]
            draw_buf->flushing = 1;
 8006ffc:	2301      	movs	r3, #1
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 8006ffe:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
            draw_buf->flushing = 1;
 8007002:	6113      	str	r3, [r2, #16]
            if((row == 0) && (area_h >= area_w)) {
 8007004:	f1ba 0f00 	cmp.w	sl, #0
 8007008:	f040 809f 	bne.w	800714a <refr_area_part+0x502>
 800700c:	9b05      	ldr	r3, [sp, #20]
 800700e:	429f      	cmp	r7, r3
 8007010:	f300 809b 	bgt.w	800714a <refr_area_part+0x502>
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8007014:	7c33      	ldrb	r3, [r6, #16]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8007016:	46d1      	mov	r9, sl
 8007018:	f8cd a018 	str.w	sl, [sp, #24]
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 800701c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007020:	9311      	str	r3, [sp, #68]	; 0x44
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8007022:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8007026:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007028:	429a      	cmp	r2, r3
 800702a:	dd4f      	ble.n	80070cc <refr_area_part+0x484>
            lv_coord_t inv_i = (w - 1) - i;
 800702c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                    &color_p[inv_i * w + inv_j],
 800702e:	f04f 0c00 	mov.w	ip, #0
            lv_coord_t inv_i = (w - 1) - i;
 8007032:	9a06      	ldr	r2, [sp, #24]
 8007034:	eba3 0e02 	sub.w	lr, r3, r2
 8007038:	fa0f f38e 	sxth.w	r3, lr
 800703c:	930b      	str	r3, [sp, #44]	; 0x2c
                    &color_p[inv_i * w + inv_j],
 800703e:	437b      	muls	r3, r7
 8007040:	9312      	str	r3, [sp, #72]	; 0x48
 8007042:	e026      	b.n	8007092 <refr_area_part+0x44a>
            lv_coord_t inv_j = (w - 1) - j;
 8007044:	990d      	ldr	r1, [sp, #52]	; 0x34
                    &color_p[i * w + j],
 8007046:	eb02 0e09 	add.w	lr, r2, r9
                    &color_p[j * w + inv_i]
 800704a:	980b      	ldr	r0, [sp, #44]	; 0x2c
            lv_coord_t inv_j = (w - 1) - j;
 800704c:	1acb      	subs	r3, r1, r3
                    &color_p[j * w + inv_i]
 800704e:	fb07 0202 	mla	r2, r7, r2, r0
                    &color_p[inv_i * w + inv_j],
 8007052:	9812      	ldr	r0, [sp, #72]	; 0x48
            lv_coord_t inv_j = (w - 1) - j;
 8007054:	b219      	sxth	r1, r3
                    &color_p[inv_i * w + inv_j],
 8007056:	fa00 f383 	sxtah	r3, r0, r3
                    &color_p[inv_j * w + i],
 800705a:	9806      	ldr	r0, [sp, #24]
 800705c:	fb07 0101 	mla	r1, r7, r1, r0
            if(is_270) {
 8007060:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007062:	2830      	cmp	r0, #48	; 0x30
 8007064:	f835 001e 	ldrh.w	r0, [r5, lr, lsl #1]
 8007068:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 800706c:	d11d      	bne.n	80070aa <refr_area_part+0x462>
    *a = *b;
 800706e:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
 8007072:	f825 001e 	strh.w	r0, [r5, lr, lsl #1]
    *b = *c;
 8007076:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
 800707a:	f825 e011 	strh.w	lr, [r5, r1, lsl #1]
    *c = *d;
 800707e:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
 8007082:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
    *d = tmp;
 8007086:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800708a:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800708e:	f10c 0c01 	add.w	ip, ip, #1
 8007092:	fa0f f28c 	sxth.w	r2, ip
 8007096:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007098:	fa1f f38c 	uxth.w	r3, ip
 800709c:	428a      	cmp	r2, r1
 800709e:	dbd1      	blt.n	8007044 <refr_area_part+0x3fc>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 80070a0:	9b06      	ldr	r3, [sp, #24]
 80070a2:	44b9      	add	r9, r7
 80070a4:	3301      	adds	r3, #1
 80070a6:	9306      	str	r3, [sp, #24]
 80070a8:	e7bb      	b.n	8007022 <refr_area_part+0x3da>
    *a = *b;
 80070aa:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 80070ae:	f825 001e 	strh.w	r0, [r5, lr, lsl #1]
    *b = *c;
 80070b2:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
 80070b6:	f825 e012 	strh.w	lr, [r5, r2, lsl #1]
    *c = *d;
 80070ba:	f835 2011 	ldrh.w	r2, [r5, r1, lsl #1]
 80070be:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
    *d = tmp;
 80070c2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80070c6:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
}
 80070ca:	e7e0      	b.n	800708e <refr_area_part+0x446>
                if(drv->rotated == LV_DISP_ROT_90) {
 80070cc:	7c33      	ldrb	r3, [r6, #16]
 80070ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070d2:	2b10      	cmp	r3, #16
 80070d4:	d12c      	bne.n	8007130 <refr_area_part+0x4e8>
                    area->x1 = init_y_off;
 80070d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                    area->x2 = init_y_off + area_w - 1;
 80070d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                    area->x1 = init_y_off;
 80070da:	8023      	strh	r3, [r4, #0]
                    area->x2 = init_y_off + area_w - 1;
 80070dc:	9b04      	ldr	r3, [sp, #16]
 80070de:	3b01      	subs	r3, #1
 80070e0:	4413      	add	r3, r2
 80070e2:	80a3      	strh	r3, [r4, #4]
    for(lv_coord_t y = 0; y < area_h; y++) {
 80070e4:	46b9      	mov	r9, r7
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 80070e6:	eb09 030a 	add.w	r3, r9, sl
 80070ea:	9a05      	ldr	r2, [sp, #20]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	dc7c      	bgt.n	80071ea <refr_area_part+0x5a2>
 80070f0:	9b03      	ldr	r3, [sp, #12]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	07db      	lsls	r3, r3, #31
 80070f6:	d578      	bpl.n	80071ea <refr_area_part+0x5a2>
 80070f8:	9b03      	ldr	r3, [sp, #12]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	0798      	lsls	r0, r3, #30
 80070fe:	d574      	bpl.n	80071ea <refr_area_part+0x5a2>
                draw_buf->flushing_last = 1;
 8007100:	2301      	movs	r3, #1
                draw_buf->flushing_last = 0;
 8007102:	9a03      	ldr	r2, [sp, #12]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 8007104:	4621      	mov	r1, r4
 8007106:	4630      	mov	r0, r6
                draw_buf->flushing_last = 0;
 8007108:	6153      	str	r3, [r2, #20]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 800710a:	f1bb 0f00 	cmp.w	fp, #0
 800710e:	bf14      	ite	ne
 8007110:	465a      	movne	r2, fp
 8007112:	462a      	moveq	r2, r5
 8007114:	f017 f9d0 	bl	801e4b8 <call_flush_cb>
            while(draw_buf->flushing) {
 8007118:	9b03      	ldr	r3, [sp, #12]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d166      	bne.n	80071ee <refr_area_part+0x5a6>
            color_p += area_w * height;
 8007120:	fb09 f307 	mul.w	r3, r9, r7
            row += height;
 8007124:	44d1      	add	r9, sl
            color_p += area_w * height;
 8007126:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            row += height;
 800712a:	fa0f fa89 	sxth.w	sl, r9
 800712e:	e739      	b.n	8006fa4 <refr_area_part+0x35c>
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8007130:	8833      	ldrh	r3, [r6, #0]
 8007132:	9a04      	ldr	r2, [sp, #16]
 8007134:	3b01      	subs	r3, #1
 8007136:	1a9b      	subs	r3, r3, r2
                    area->x1 = area->x2 - area_w + 1;
 8007138:	9a08      	ldr	r2, [sp, #32]
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800713a:	b29b      	uxth	r3, r3
                    area->x1 = area->x2 - area_w + 1;
 800713c:	3201      	adds	r2, #1
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800713e:	80a3      	strh	r3, [r4, #4]
                    area->x1 = area->x2 - area_w + 1;
 8007140:	4413      	add	r3, r2
 8007142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007144:	1a9b      	subs	r3, r3, r2
 8007146:	8023      	strh	r3, [r4, #0]
 8007148:	e7cc      	b.n	80070e4 <refr_area_part+0x49c>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800714a:	f1bb 0f00 	cmp.w	fp, #0
 800714e:	d104      	bne.n	800715a <refr_area_part+0x512>
 8007150:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8007154:	f00b fafc 	bl	8012750 <lv_mem_buf_get>
 8007158:	4683      	mov	fp, r0
    uint32_t invert = (area_w * area_h) - 1;
 800715a:	fb07 f309 	mul.w	r3, r7, r9
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800715e:	7c30      	ldrb	r0, [r6, #16]
    for(lv_coord_t y = 0; y < area_h; y++) {
 8007160:	46ae      	mov	lr, r5
 8007162:	2100      	movs	r1, #0
    uint32_t initial_i = ((area_w - 1) * area_h);
 8007164:	eba3 0209 	sub.w	r2, r3, r9
            i = invert - i;
 8007168:	3b01      	subs	r3, #1
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800716a:	f000 0030 	and.w	r0, r0, #48	; 0x30
            i = invert - i;
 800716e:	1a9b      	subs	r3, r3, r2
    uint32_t initial_i = ((area_w - 1) * area_h);
 8007170:	920b      	str	r2, [sp, #44]	; 0x2c
            i = invert - i;
 8007172:	930c      	str	r3, [sp, #48]	; 0x30
    for(lv_coord_t y = 0; y < area_h; y++) {
 8007174:	b20a      	sxth	r2, r1
 8007176:	4591      	cmp	r9, r2
 8007178:	dc10      	bgt.n	800719c <refr_area_part+0x554>
                if(drv->rotated == LV_DISP_ROT_90) {
 800717a:	7c33      	ldrb	r3, [r6, #16]
                    area->x1 = init_y_off + row;
 800717c:	fa1f f18a 	uxth.w	r1, sl
                    area->x2 = init_y_off + row + height - 1;
 8007180:	f8bd 2018 	ldrh.w	r2, [sp, #24]
                if(drv->rotated == LV_DISP_ROT_90) {
 8007184:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007188:	2b10      	cmp	r3, #16
 800718a:	d123      	bne.n	80071d4 <refr_area_part+0x58c>
                    area->x1 = init_y_off + row;
 800718c:	9b04      	ldr	r3, [sp, #16]
 800718e:	4419      	add	r1, r3
 8007190:	b289      	uxth	r1, r1
 8007192:	8021      	strh	r1, [r4, #0]
                    area->x2 = init_y_off + row + height - 1;
 8007194:	3901      	subs	r1, #1
 8007196:	4411      	add	r1, r2
 8007198:	80a1      	strh	r1, [r4, #4]
 800719a:	e7a4      	b.n	80070e6 <refr_area_part+0x49e>
        if(invert_i)
 800719c:	2830      	cmp	r0, #48	; 0x30
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800719e:	f04f 0c00 	mov.w	ip, #0
        uint32_t i = initial_i + y;
 80071a2:	bf15      	itete	ne
 80071a4:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
            i = invert - i;
 80071a6:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
        uint32_t i = initial_i + y;
 80071a8:	188a      	addne	r2, r1, r2
            i = invert - i;
 80071aa:	1a5a      	subeq	r2, r3, r1
        for(lv_coord_t x = 0; x < area_w; x++) {
 80071ac:	fa0f f38c 	sxth.w	r3, ip
 80071b0:	429f      	cmp	r7, r3
 80071b2:	dc03      	bgt.n	80071bc <refr_area_part+0x574>
 80071b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071b6:	3101      	adds	r1, #1
 80071b8:	449e      	add	lr, r3
    for(lv_coord_t y = 0; y < area_h; y++) {
 80071ba:	e7db      	b.n	8007174 <refr_area_part+0x52c>
            rot_buf[i] = *(orig_color_p++);
 80071bc:	f83e 301c 	ldrh.w	r3, [lr, ip, lsl #1]
            if(invert_i)
 80071c0:	2830      	cmp	r0, #48	; 0x30
 80071c2:	f10c 0c01 	add.w	ip, ip, #1
            rot_buf[i] = *(orig_color_p++);
 80071c6:	f82b 3012 	strh.w	r3, [fp, r2, lsl #1]
                i += area_h;
 80071ca:	bf0c      	ite	eq
 80071cc:	444a      	addeq	r2, r9
                i -= area_h;
 80071ce:	eba2 0209 	subne.w	r2, r2, r9
        for(lv_coord_t x = 0; x < area_w; x++) {
 80071d2:	e7eb      	b.n	80071ac <refr_area_part+0x564>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 80071d4:	8833      	ldrh	r3, [r6, #0]
 80071d6:	9804      	ldr	r0, [sp, #16]
 80071d8:	3b01      	subs	r3, #1
 80071da:	1a1b      	subs	r3, r3, r0
 80071dc:	1a5b      	subs	r3, r3, r1
 80071de:	b29b      	uxth	r3, r3
 80071e0:	80a3      	strh	r3, [r4, #4]
                    area->x1 = area->x2 - height + 1;
 80071e2:	3301      	adds	r3, #1
 80071e4:	1a9b      	subs	r3, r3, r2
 80071e6:	8023      	strh	r3, [r4, #0]
 80071e8:	e77d      	b.n	80070e6 <refr_area_part+0x49e>
                draw_buf->flushing_last = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	e789      	b.n	8007102 <refr_area_part+0x4ba>
                if(drv->wait_cb) drv->wait_cb(drv);
 80071ee:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d091      	beq.n	8007118 <refr_area_part+0x4d0>
 80071f4:	4630      	mov	r0, r6
 80071f6:	4798      	blx	r3
 80071f8:	e78e      	b.n	8007118 <refr_area_part+0x4d0>
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 80071fa:	462a      	mov	r2, r5
 80071fc:	4621      	mov	r1, r4
 80071fe:	4618      	mov	r0, r3
 8007200:	e67c      	b.n	8006efc <refr_area_part+0x2b4>
 8007202:	bf00      	nop

08007204 <_lv_refr_get_disp_refreshing>:
}
 8007204:	4b01      	ldr	r3, [pc, #4]	; (800720c <_lv_refr_get_disp_refreshing+0x8>)
 8007206:	6818      	ldr	r0, [r3, #0]
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	24001160 	.word	0x24001160

08007210 <_lv_disp_refr_timer>:
{
 8007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	b08d      	sub	sp, #52	; 0x34
 8007216:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
 8007218:	f01c ff63 	bl	80240e2 <lv_tick_get>
    volatile uint32_t elaps = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	4c99      	ldr	r4, [pc, #612]	; (8007484 <_lv_disp_refr_timer+0x274>)
    uint32_t start = lv_tick_get();
 8007220:	9004      	str	r0, [sp, #16]
    volatile uint32_t elaps = 0;
 8007222:	9309      	str	r3, [sp, #36]	; 0x24
    if(tmr) {
 8007224:	b1fd      	cbz	r5, 8007266 <_lv_disp_refr_timer+0x56>
        disp_refr = tmr->user_data;
 8007226:	68eb      	ldr	r3, [r5, #12]
        lv_timer_pause(tmr);
 8007228:	4628      	mov	r0, r5
        disp_refr = tmr->user_data;
 800722a:	6023      	str	r3, [r4, #0]
        lv_timer_pause(tmr);
 800722c:	f01d ff37 	bl	802509e <lv_timer_pause>
    lv_obj_update_layout(disp_refr->act_scr);
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	6918      	ldr	r0, [r3, #16]
 8007234:	f7fe fa94 	bl	8005760 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	6958      	ldr	r0, [r3, #20]
 800723c:	b108      	cbz	r0, 8007242 <_lv_disp_refr_timer+0x32>
 800723e:	f7fe fa8f 	bl	8005760 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->top_layer);
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	69d8      	ldr	r0, [r3, #28]
 8007246:	f7fe fa8b 	bl	8005760 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	6a18      	ldr	r0, [r3, #32]
 800724e:	f7fe fa87 	bl	8005760 <lv_obj_update_layout>
    if(disp_refr->act_scr == NULL) {
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	691a      	ldr	r2, [r3, #16]
 8007256:	2a00      	cmp	r2, #0
 8007258:	f040 80b3 	bne.w	80073c2 <_lv_disp_refr_timer+0x1b2>
        disp_refr->inv_p = 0;
 800725c:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
 8007260:	b00d      	add	sp, #52	; 0x34
 8007262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disp_refr = lv_disp_get_default();
 8007266:	f00a ff11 	bl	801208c <lv_disp_get_default>
 800726a:	6020      	str	r0, [r4, #0]
 800726c:	e7e0      	b.n	8007230 <_lv_disp_refr_timer+0x20>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800726e:	4433      	add	r3, r6
 8007270:	f893 5130 	ldrb.w	r5, [r3, #304]	; 0x130
 8007274:	2d00      	cmp	r5, #0
 8007276:	d067      	beq.n	8007348 <_lv_disp_refr_timer+0x138>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007278:	3601      	adds	r6, #1
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 8007280:	4296      	cmp	r6, r2
 8007282:	d3f4      	bcc.n	800726e <_lv_disp_refr_timer+0x5e>
    px_num = 0;
 8007284:	4980      	ldr	r1, [pc, #512]	; (8007488 <_lv_disp_refr_timer+0x278>)
 8007286:	2000      	movs	r0, #0
 8007288:	6008      	str	r0, [r1, #0]
    if(disp_refr->inv_p == 0) return;
 800728a:	2a00      	cmp	r2, #0
 800728c:	d032      	beq.n	80072f4 <_lv_disp_refr_timer+0xe4>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800728e:	f102 38ff 	add.w	r8, r2, #4294967295
        if(disp_refr->inv_area_joined[i] == 0) {
 8007292:	f503 7298 	add.w	r2, r3, #304	; 0x130
 8007296:	f812 1008 	ldrb.w	r1, [r2, r8]
 800729a:	b121      	cbz	r1, 80072a6 <_lv_disp_refr_timer+0x96>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800729c:	f1b8 0801 	subs.w	r8, r8, #1
 80072a0:	d2f9      	bcs.n	8007296 <_lv_disp_refr_timer+0x86>
    int32_t last_i = 0;
 80072a2:	f04f 0800 	mov.w	r8, #0
    if(disp_refr->driver->render_start_cb) {
 80072a6:	6818      	ldr	r0, [r3, #0]
 80072a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072aa:	b103      	cbz	r3, 80072ae <_lv_disp_refr_timer+0x9e>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 80072ac:	4798      	blx	r3
    disp_refr->driver->draw_buf->last_area = 0;
 80072ae:	6823      	ldr	r3, [r4, #0]
        draw_ctx->buf_area = &sub_area;
 80072b0:	f10d 0928 	add.w	r9, sp, #40	; 0x28
    disp_refr->driver->draw_buf->last_area = 0;
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68d1      	ldr	r1, [r2, #12]
 80072b8:	7e0a      	ldrb	r2, [r1, #24]
 80072ba:	f36f 0200 	bfc	r2, #0, #1
 80072be:	760a      	strb	r2, [r1, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68d1      	ldr	r1, [r2, #12]
 80072c4:	7e0a      	ldrb	r2, [r1, #24]
 80072c6:	f36f 0241 	bfc	r2, #1, #1
 80072ca:	760a      	strb	r2, [r1, #24]
    disp_refr->rendering_in_progress = true;
 80072cc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80072d0:	f042 0204 	orr.w	r2, r2, #4
 80072d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    for(i = 0; i < disp_refr->inv_p; i++) {
 80072d8:	2300      	movs	r3, #0
 80072da:	9302      	str	r3, [sp, #8]
 80072dc:	6825      	ldr	r5, [r4, #0]
 80072de:	9a02      	ldr	r2, [sp, #8]
 80072e0:	f8b5 3150 	ldrh.w	r3, [r5, #336]	; 0x150
 80072e4:	429a      	cmp	r2, r3
 80072e6:	db70      	blt.n	80073ca <_lv_disp_refr_timer+0x1ba>
    disp_refr->rendering_in_progress = false;
 80072e8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80072ec:	f36f 0382 	bfc	r3, #2, #1
 80072f0:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    if(disp_refr->inv_p != 0) {
 80072f4:	6820      	ldr	r0, [r4, #0]
 80072f6:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 80072fa:	b1e3      	cbz	r3, 8007336 <_lv_disp_refr_timer+0x126>
 80072fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007300:	2100      	movs	r1, #0
 8007302:	3030      	adds	r0, #48	; 0x30
 8007304:	f013 fa0c 	bl	801a720 <memset>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 8007308:	6820      	ldr	r0, [r4, #0]
 800730a:	2220      	movs	r2, #32
 800730c:	2100      	movs	r1, #0
 800730e:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8007312:	f013 fa05 	bl	801a720 <memset>
        disp_refr->inv_p = 0;
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	2200      	movs	r2, #0
        elaps = lv_tick_elaps(start);
 800731a:	9804      	ldr	r0, [sp, #16]
        disp_refr->inv_p = 0;
 800731c:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        elaps = lv_tick_elaps(start);
 8007320:	f01c fee7 	bl	80240f2 <lv_tick_elaps>
        if(disp_refr->driver->monitor_cb) {
 8007324:	6823      	ldr	r3, [r4, #0]
        elaps = lv_tick_elaps(start);
 8007326:	9009      	str	r0, [sp, #36]	; 0x24
        if(disp_refr->driver->monitor_cb) {
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800732c:	b11b      	cbz	r3, 8007336 <_lv_disp_refr_timer+0x126>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 800732e:	4a56      	ldr	r2, [pc, #344]	; (8007488 <_lv_disp_refr_timer+0x278>)
 8007330:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007332:	6812      	ldr	r2, [r2, #0]
 8007334:	4798      	blx	r3
    lv_mem_buf_free_all();
 8007336:	f00b fa69 	bl	801280c <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800733a:	f01c feb4 	bl	80240a6 <_lv_font_clean_up_fmt_txt>
}
 800733e:	b00d      	add	sp, #52	; 0x34
 8007340:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _lv_draw_mask_cleanup();
 8007344:	f000 bfd8 	b.w	80082f8 <_lv_draw_mask_cleanup>
 8007348:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 800734c:	f10a 0830 	add.w	r8, sl, #48	; 0x30
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 8007356:	429d      	cmp	r5, r3
 8007358:	d28e      	bcs.n	8007278 <_lv_disp_refr_timer+0x68>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800735a:	1943      	adds	r3, r0, r5
 800735c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007360:	bb6b      	cbnz	r3, 80073be <_lv_disp_refr_timer+0x1ae>
 8007362:	42ae      	cmp	r6, r5
 8007364:	d02b      	beq.n	80073be <_lv_disp_refr_timer+0x1ae>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8007366:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 800736a:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800736e:	eb00 010b 	add.w	r1, r0, fp
 8007372:	4440      	add	r0, r8
 8007374:	f01d f85f 	bl	8024436 <_lv_area_is_on>
 8007378:	b308      	cbz	r0, 80073be <_lv_disp_refr_timer+0x1ae>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800737a:	6821      	ldr	r1, [r4, #0]
 800737c:	a80a      	add	r0, sp, #40	; 0x28
 800737e:	eb01 020b 	add.w	r2, r1, fp
 8007382:	4441      	add	r1, r8
 8007384:	f01c ffa0 	bl	80242c8 <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007388:	a80a      	add	r0, sp, #40	; 0x28
 800738a:	f01c ff44 	bl	8024216 <lv_area_get_size>
 800738e:	9002      	str	r0, [sp, #8]
 8007390:	6820      	ldr	r0, [r4, #0]
 8007392:	4440      	add	r0, r8
 8007394:	f01c ff3f 	bl	8024216 <lv_area_get_size>
 8007398:	4607      	mov	r7, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800739a:	6820      	ldr	r0, [r4, #0]
 800739c:	4458      	add	r0, fp
 800739e:	f01c ff3a 	bl	8024216 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80073a2:	9b02      	ldr	r3, [sp, #8]
 80073a4:	4407      	add	r7, r0
 80073a6:	42bb      	cmp	r3, r7
 80073a8:	d209      	bcs.n	80073be <_lv_disp_refr_timer+0x1ae>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 80073aa:	6823      	ldr	r3, [r4, #0]
    dest->x1 = src->x1;
 80073ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073ae:	eb03 020a 	add.w	r2, r3, sl
                disp_refr->inv_area_joined[join_from] = 1;
 80073b2:	442b      	add	r3, r5
 80073b4:	6311      	str	r1, [r2, #48]	; 0x30
    dest->x2 = src->x2;
 80073b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073b8:	6351      	str	r1, [r2, #52]	; 0x34
 80073ba:	f883 9130 	strb.w	r9, [r3, #304]	; 0x130
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80073be:	3501      	adds	r5, #1
 80073c0:	e7c6      	b.n	8007350 <_lv_disp_refr_timer+0x140>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80073c2:	2600      	movs	r6, #0
                disp_refr->inv_area_joined[join_from] = 1;
 80073c4:	f04f 0901 	mov.w	r9, #1
 80073c8:	e757      	b.n	800727a <_lv_disp_refr_timer+0x6a>
        if(disp_refr->inv_area_joined[i] == 0) {
 80073ca:	9b02      	ldr	r3, [sp, #8]
 80073cc:	18eb      	adds	r3, r5, r3
 80073ce:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d148      	bne.n	8007468 <_lv_disp_refr_timer+0x258>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 80073d6:	9b02      	ldr	r3, [sp, #8]
 80073d8:	4543      	cmp	r3, r8
 80073da:	d105      	bne.n	80073e8 <_lv_disp_refr_timer+0x1d8>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	7e13      	ldrb	r3, [r2, #24]
 80073e2:	f043 0301 	orr.w	r3, r3, #1
 80073e6:	7613      	strb	r3, [r2, #24]
            disp_refr->driver->draw_buf->last_part = 0;
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	7e13      	ldrb	r3, [r2, #24]
 80073ee:	f36f 0341 	bfc	r3, #1, #1
 80073f2:	7613      	strb	r3, [r2, #24]
            refr_area(&disp_refr->inv_areas[i]);
 80073f4:	9b02      	ldr	r3, [sp, #8]
 80073f6:	00df      	lsls	r7, r3, #3
 80073f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80073fc:	9303      	str	r3, [sp, #12]
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 80073fe:	682b      	ldr	r3, [r5, #0]
 8007400:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	6033      	str	r3, [r6, #0]
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	7c1b      	ldrb	r3, [r3, #16]
 800740c:	079b      	lsls	r3, r3, #30
 800740e:	d03d      	beq.n	800748c <_lv_disp_refr_timer+0x27c>
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8007410:	4628      	mov	r0, r5
 8007412:	f00a fe41 	bl	8012098 <lv_disp_get_hor_res>
 8007416:	4607      	mov	r7, r0
 8007418:	6820      	ldr	r0, [r4, #0]
 800741a:	f00a fe4d 	bl	80120b8 <lv_disp_get_ver_res>
 800741e:	3801      	subs	r0, #1
 8007420:	2200      	movs	r2, #0
 8007422:	1e7b      	subs	r3, r7, #1
 8007424:	b200      	sxth	r0, r0
 8007426:	b21b      	sxth	r3, r3
 8007428:	4611      	mov	r1, r2
 800742a:	9000      	str	r0, [sp, #0]
 800742c:	4648      	mov	r0, r9
 800742e:	f01c fee1 	bl	80241f4 <lv_area_set>
        if(disp_refr->driver->full_refresh) {
 8007432:	6823      	ldr	r3, [r4, #0]
        draw_ctx->buf_area = &disp_area;
 8007434:	f8c6 9004 	str.w	r9, [r6, #4]
        if(disp_refr->driver->full_refresh) {
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	7c1a      	ldrb	r2, [r3, #16]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	f012 0f02 	tst.w	r2, #2
 8007442:	d015      	beq.n	8007470 <_lv_disp_refr_timer+0x260>
            disp_refr->driver->draw_buf->last_part = 1;
 8007444:	7e1a      	ldrb	r2, [r3, #24]
 8007446:	f042 0202 	orr.w	r2, r2, #2
 800744a:	761a      	strb	r2, [r3, #24]
            draw_ctx->clip_area = &disp_area;
 800744c:	f8c6 9008 	str.w	r9, [r6, #8]
        refr_area_part(draw_ctx);
 8007450:	4630      	mov	r0, r6
 8007452:	f7ff fbf9 	bl	8006c48 <refr_area_part>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	4418      	add	r0, r3
 800745c:	f01c fedb 	bl	8024216 <lv_area_get_size>
 8007460:	4a09      	ldr	r2, [pc, #36]	; (8007488 <_lv_disp_refr_timer+0x278>)
 8007462:	6813      	ldr	r3, [r2, #0]
 8007464:	4403      	add	r3, r0
 8007466:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007468:	9b02      	ldr	r3, [sp, #8]
 800746a:	3301      	adds	r3, #1
 800746c:	9302      	str	r3, [sp, #8]
 800746e:	e735      	b.n	80072dc <_lv_disp_refr_timer+0xcc>
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 8007470:	6999      	ldr	r1, [r3, #24]
 8007472:	7e1a      	ldrb	r2, [r3, #24]
 8007474:	f361 0241 	bfi	r2, r1, #1, #1
 8007478:	761a      	strb	r2, [r3, #24]
            refr_area(&disp_refr->inv_areas[i]);
 800747a:	9b03      	ldr	r3, [sp, #12]
 800747c:	441d      	add	r5, r3
            draw_ctx->clip_area = area_p;
 800747e:	60b5      	str	r5, [r6, #8]
            refr_area_part(draw_ctx);
 8007480:	e7e6      	b.n	8007450 <_lv_disp_refr_timer+0x240>
 8007482:	bf00      	nop
 8007484:	24001160 	.word	0x24001160
 8007488:	24001164 	.word	0x24001164
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800748c:	442f      	add	r7, r5
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800748e:	4628      	mov	r0, r5
 8007490:	f8b7 a034 	ldrh.w	sl, [r7, #52]	; 0x34
 8007494:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007496:	f10a 0a01 	add.w	sl, sl, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800749a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800749c:	ebaa 0a03 	sub.w	sl, sl, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80074a0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80074a4:	f103 0b01 	add.w	fp, r3, #1
 80074a8:	9305      	str	r3, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80074aa:	fa0f fa8a 	sxth.w	sl, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80074ae:	ebab 0b02 	sub.w	fp, fp, r2
 80074b2:	f00a fe01 	bl	80120b8 <lv_disp_get_ver_res>
 80074b6:	9b05      	ldr	r3, [sp, #20]
 80074b8:	fa0f fb8b 	sxth.w	fp, fp
 80074bc:	4283      	cmp	r3, r0
 80074be:	db57      	blt.n	8007570 <_lv_disp_refr_timer+0x360>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 80074c0:	6820      	ldr	r0, [r4, #0]
 80074c2:	f00a fdf9 	bl	80120b8 <lv_disp_get_ver_res>
 80074c6:	1e43      	subs	r3, r0, #1
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 80074c8:	b21b      	sxth	r3, r3
    int32_t max_row = get_max_row(disp_refr, w, h);
 80074ca:	6822      	ldr	r2, [r4, #0]
 80074cc:	6812      	ldr	r2, [r2, #0]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 80074ce:	68d1      	ldr	r1, [r2, #12]
    if(disp_refr->driver->rounder_cb) {
 80074d0:	6992      	ldr	r2, [r2, #24]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 80074d2:	68cd      	ldr	r5, [r1, #12]
 80074d4:	fbb5 f5fa 	udiv	r5, r5, sl
 80074d8:	455d      	cmp	r5, fp
 80074da:	bfa8      	it	ge
 80074dc:	465d      	movge	r5, fp
    if(disp_refr->driver->rounder_cb) {
 80074de:	b302      	cbz	r2, 8007522 <_lv_disp_refr_timer+0x312>
        tmp.x1 = 0;
 80074e0:	2200      	movs	r2, #0
        lv_coord_t h_tmp = max_row;
 80074e2:	fa0f fa85 	sxth.w	sl, r5
        tmp.x1 = 0;
 80074e6:	920a      	str	r2, [sp, #40]	; 0x28
        tmp.x2 = 0;
 80074e8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        lv_coord_t h_tmp = max_row;
 80074ec:	46d3      	mov	fp, sl
            tmp.y2 = h_tmp - 1;
 80074ee:	f10a 3aff 	add.w	sl, sl, #4294967295
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 80074f2:	6822      	ldr	r2, [r4, #0]
 80074f4:	4649      	mov	r1, r9
            tmp.y2 = h_tmp - 1;
 80074f6:	fa0f fa8a 	sxth.w	sl, sl
 80074fa:	9305      	str	r3, [sp, #20]
 80074fc:	f8ad a02e 	strh.w	sl, [sp, #46]	; 0x2e
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 8007500:	6810      	ldr	r0, [r2, #0]
 8007502:	6982      	ldr	r2, [r0, #24]
 8007504:	4790      	blx	r2
 8007506:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
 800750a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800750e:	3101      	adds	r1, #1
            if(lv_area_get_height(&tmp) <= max_row) break;
 8007510:	9b05      	ldr	r3, [sp, #20]
 8007512:	1a8a      	subs	r2, r1, r2
 8007514:	b212      	sxth	r2, r2
 8007516:	4295      	cmp	r5, r2
 8007518:	da2d      	bge.n	8007576 <_lv_disp_refr_timer+0x366>
        } while(h_tmp > 0);
 800751a:	f1ba 0f00 	cmp.w	sl, #0
 800751e:	dce5      	bgt.n	80074ec <_lv_disp_refr_timer+0x2dc>
            return 0;
 8007520:	2500      	movs	r5, #0
        sub_area.y2 = row + max_row - 1;
 8007522:	b2aa      	uxth	r2, r5
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007524:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	; 0x32
    lv_coord_t row_last = 0;
 8007528:	f04f 0a00 	mov.w	sl, #0
        sub_area.y2 = row + max_row - 1;
 800752c:	1e51      	subs	r1, r2, #1
 800752e:	9105      	str	r1, [sp, #20]
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007530:	eb00 0e05 	add.w	lr, r0, r5
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8007534:	6821      	ldr	r1, [r4, #0]
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007536:	f10e 3eff 	add.w	lr, lr, #4294967295
 800753a:	459e      	cmp	lr, r3
 800753c:	dd20      	ble.n	8007580 <_lv_disp_refr_timer+0x370>
    if(y2 != row_last) {
 800753e:	4553      	cmp	r3, sl
 8007540:	d089      	beq.n	8007456 <_lv_disp_refr_timer+0x246>
        sub_area.x1 = area_p->x1;
 8007542:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8007544:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
        sub_area.x2 = area_p->x2;
 8007548:	8eba      	ldrh	r2, [r7, #52]	; 0x34
        sub_area.y1 = row;
 800754a:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        sub_area.x2 = area_p->x2;
 800754e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        sub_area.y2 = y2;
 8007552:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        draw_ctx->clip_area = &sub_area;
 8007556:	e9c6 9901 	strd	r9, r9, [r6, #4]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800755a:	680b      	ldr	r3, [r1, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	6033      	str	r3, [r6, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 8007562:	680b      	ldr	r3, [r1, #0]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	7e13      	ldrb	r3, [r2, #24]
 8007568:	f043 0302 	orr.w	r3, r3, #2
 800756c:	7613      	strb	r3, [r2, #24]
 800756e:	e76f      	b.n	8007450 <_lv_disp_refr_timer+0x240>
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 8007570:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8007574:	e7a9      	b.n	80074ca <_lv_disp_refr_timer+0x2ba>
        if(h_tmp <= 0) {
 8007576:	f1bb 0f00 	cmp.w	fp, #0
 800757a:	ddd1      	ble.n	8007520 <_lv_disp_refr_timer+0x310>
            max_row = tmp.y2 + 1;
 800757c:	460d      	mov	r5, r1
    return max_row;
 800757e:	e7d0      	b.n	8007522 <_lv_disp_refr_timer+0x312>
        sub_area.x1 = area_p->x1;
 8007580:	f8b7 e030 	ldrh.w	lr, [r7, #48]	; 0x30
 8007584:	fa1f fb80 	uxth.w	fp, r0
        sub_area.y2 = row + max_row - 1;
 8007588:	f8dd c014 	ldr.w	ip, [sp, #20]
        sub_area.x1 = area_p->x1;
 800758c:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
        sub_area.x2 = area_p->x2;
 8007590:	f8b7 e034 	ldrh.w	lr, [r7, #52]	; 0x34
        sub_area.y1 = row;
 8007594:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        sub_area.y2 = row + max_row - 1;
 8007598:	fa1c f080 	uxtah	r0, ip, r0
        sub_area.x2 = area_p->x2;
 800759c:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
        sub_area.y2 = row + max_row - 1;
 80075a0:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
        draw_ctx->clip_area = &sub_area;
 80075a4:	e9c6 9901 	strd	r9, r9, [r6, #4]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 80075a8:	6808      	ldr	r0, [r1, #0]
 80075aa:	68c0      	ldr	r0, [r0, #12]
 80075ac:	6880      	ldr	r0, [r0, #8]
 80075ae:	6030      	str	r0, [r6, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 80075b0:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
 80075b4:	4298      	cmp	r0, r3
 80075b6:	4682      	mov	sl, r0
 80075b8:	bfa8      	it	ge
 80075ba:	469a      	movge	sl, r3
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 80075bc:	4298      	cmp	r0, r3
 80075be:	f8ad a02e 	strh.w	sl, [sp, #46]	; 0x2e
 80075c2:	db05      	blt.n	80075d0 <_lv_disp_refr_timer+0x3c0>
 80075c4:	6808      	ldr	r0, [r1, #0]
 80075c6:	68c1      	ldr	r1, [r0, #12]
 80075c8:	7e08      	ldrb	r0, [r1, #24]
 80075ca:	f040 0002 	orr.w	r0, r0, #2
 80075ce:	7608      	strb	r0, [r1, #24]
        refr_area_part(draw_ctx);
 80075d0:	4630      	mov	r0, r6
 80075d2:	e9cd 3206 	strd	r3, r2, [sp, #24]
 80075d6:	f7ff fb37 	bl	8006c48 <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 80075da:	9a07      	ldr	r2, [sp, #28]
 80075dc:	9b06      	ldr	r3, [sp, #24]
 80075de:	4493      	add	fp, r2
 80075e0:	fa0f f08b 	sxth.w	r0, fp
 80075e4:	e7a4      	b.n	8007530 <_lv_disp_refr_timer+0x320>
 80075e6:	bf00      	nop

080075e8 <lv_theme_apply>:
 * Apply the active theme on an object
 * @param obj pointer to an object
 * @param name the name of the theme element to apply. E.g. `LV_THEME_BTN`
 */
void lv_theme_apply(lv_obj_t * obj)
{
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4605      	mov	r5, r0
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 80075ec:	f017 f8a6 	bl	801e73c <lv_theme_get_from_obj>
    if(th == NULL) return;
 80075f0:	4604      	mov	r4, r0
 80075f2:	b150      	cbz	r0, 800760a <lv_theme_apply+0x22>
 80075f4:	4628      	mov	r0, r5
 80075f6:	2100      	movs	r1, #0
 80075f8:	4a04      	ldr	r2, [pc, #16]	; (800760c <lv_theme_apply+0x24>)
 80075fa:	f016 fb7a 	bl	801dcf2 <lv_obj_remove_style>

    lv_obj_remove_style_all(obj);

    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 80075fe:	4629      	mov	r1, r5
 8007600:	4620      	mov	r0, r4
}
 8007602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 8007606:	f017 b88a 	b.w	801e71e <apply_theme>
}
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	000fffff 	.word	0x000fffff

08007610 <lv_draw_arc_get_area>:
    //    backend->draw_arc(center_x, center_y, radius, start_angle, end_angle, clip_area, dsc);
}

void lv_draw_arc_get_area(lv_coord_t x, lv_coord_t y, uint16_t radius,  uint16_t start_angle, uint16_t end_angle,
                          lv_coord_t w, bool rounded, lv_area_t * area)
{
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	461e      	mov	r6, r3
 8007616:	b085      	sub	sp, #20
 8007618:	4604      	mov	r4, r0
 800761a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800761e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8007622:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007624:	e9cd 1200 	strd	r1, r2, [sp]
    lv_coord_t rout = radius;

    /*Special case: full arc invalidation */
    if(end_angle == start_angle + 360) {
 8007628:	f506 71b4 	add.w	r1, r6, #360	; 0x168
{
 800762c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    lv_coord_t rout = radius;
 8007630:	f9bd 9004 	ldrsh.w	r9, [sp, #4]
    if(end_angle == start_angle + 360) {
 8007634:	428d      	cmp	r5, r1
 8007636:	d110      	bne.n	800765a <lv_draw_arc_get_area+0x4a>
        area->x1 = x - rout;
 8007638:	b2a4      	uxth	r4, r4
 800763a:	9b01      	ldr	r3, [sp, #4]
        area->y1 = y - rout;
 800763c:	9a01      	ldr	r2, [sp, #4]
        area->x1 = x - rout;
 800763e:	1ae3      	subs	r3, r4, r3
 8007640:	803b      	strh	r3, [r7, #0]
        area->y1 = y - rout;
 8007642:	f8bd 3000 	ldrh.w	r3, [sp]
 8007646:	1a9a      	subs	r2, r3, r2
 8007648:	807a      	strh	r2, [r7, #2]
        area->x2 = x + rout;
 800764a:	9a01      	ldr	r2, [sp, #4]
 800764c:	4414      	add	r4, r2
        area->y2 = y + rout;
 800764e:	4413      	add	r3, r2
        area->x2 = x + rout;
 8007650:	80bc      	strh	r4, [r7, #4]
        area->y2 = y + rout;
 8007652:	80fb      	strh	r3, [r7, #6]
        area->x1 = x - rout;
        area->y1 = y - rout;
        area->x2 = x + rout;
        area->y2 = y + rout;
    }
}
 8007654:	b005      	add	sp, #20
 8007656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(start_angle > 360) start_angle -= 360;
 800765a:	f5b6 7fb4 	cmp.w	r6, #360	; 0x168
    lv_coord_t rin = radius - w;
 800765e:	9901      	ldr	r1, [sp, #4]
    if(start_angle > 360) start_angle -= 360;
 8007660:	bf88      	it	hi
 8007662:	f5a6 76b4 	subhi.w	r6, r6, #360	; 0x168
    lv_coord_t rin = radius - w;
 8007666:	eba1 0803 	sub.w	r8, r1, r3
    if(start_angle > 360) start_angle -= 360;
 800766a:	bf88      	it	hi
 800766c:	b2b6      	uxthhi	r6, r6
    if(end_angle > 360) end_angle -= 360;
 800766e:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
    lv_coord_t rin = radius - w;
 8007672:	fa0f f888 	sxth.w	r8, r8
    if(end_angle > 360) end_angle -= 360;
 8007676:	bf84      	itt	hi
 8007678:	f5a5 75b4 	subhi.w	r5, r5, #360	; 0x168
 800767c:	b2ad      	uxthhi	r5, r5
    lv_coord_t extra_area = rounded ? w / 2 + 1 : 0;
 800767e:	2a00      	cmp	r2, #0
 8007680:	d043      	beq.n	800770a <lv_draw_arc_get_area+0xfa>
 8007682:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007686:	105b      	asrs	r3, r3, #1
 8007688:	3301      	adds	r3, #1
 800768a:	b21b      	sxth	r3, r3
 800768c:	9302      	str	r3, [sp, #8]
    uint8_t start_quarter = start_angle / 90;
 800768e:	235a      	movs	r3, #90	; 0x5a
 8007690:	fbb6 f2f3 	udiv	r2, r6, r3
    uint8_t end_quarter = end_angle / 90;
 8007694:	fbb5 f3f3 	udiv	r3, r5, r3
    uint8_t start_quarter = start_angle / 90;
 8007698:	b2d2      	uxtb	r2, r2
    uint8_t end_quarter = end_angle / 90;
 800769a:	b2db      	uxtb	r3, r3
    if(start_quarter == 4) start_quarter = 3;
 800769c:	2a04      	cmp	r2, #4
 800769e:	d136      	bne.n	800770e <lv_draw_arc_get_area+0xfe>
    if(end_quarter == 4) end_quarter = 3;
 80076a0:	2b04      	cmp	r3, #4
 80076a2:	d176      	bne.n	8007792 <lv_draw_arc_get_area+0x182>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 80076a4:	42ae      	cmp	r6, r5
 80076a6:	d8c7      	bhi.n	8007638 <lv_draw_arc_get_area+0x28>
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80076a8:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 80076ac:	b2a4      	uxth	r4, r4
 80076ae:	b200      	sxth	r0, r0
 80076b0:	f00a ffc4 	bl	801263c <lv_trigo_sin>
 80076b4:	f8bd a008 	ldrh.w	sl, [sp, #8]
 80076b8:	fb00 f008 	mul.w	r0, r0, r8
 80076bc:	eba4 030a 	sub.w	r3, r4, sl
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80076c0:	4454      	add	r4, sl
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80076c2:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80076c6:	b230      	sxth	r0, r6
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80076c8:	803b      	strh	r3, [r7, #0]
            area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80076ca:	f00a ffb7 	bl	801263c <lv_trigo_sin>
 80076ce:	f8bd 6000 	ldrh.w	r6, [sp]
 80076d2:	fb00 f009 	mul.w	r0, r0, r9
 80076d6:	eba6 030a 	sub.w	r3, r6, sl
 80076da:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80076de:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80076e2:	807b      	strh	r3, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80076e4:	b200      	sxth	r0, r0
 80076e6:	f00a ffa9 	bl	801263c <lv_trigo_sin>
 80076ea:	fb09 f000 	mul.w	r0, r9, r0
 80076ee:	eb04 34e0 	add.w	r4, r4, r0, asr #15
            area->y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80076f2:	b228      	sxth	r0, r5
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80076f4:	80bc      	strh	r4, [r7, #4]
            area->y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80076f6:	f00a ffa1 	bl	801263c <lv_trigo_sin>
 80076fa:	fb08 f000 	mul.w	r0, r8, r0
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80076fe:	44b2      	add	sl, r6
 8007700:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 8007704:	f8a7 a006 	strh.w	sl, [r7, #6]
 8007708:	e7a4      	b.n	8007654 <lv_draw_arc_get_area+0x44>
    lv_coord_t extra_area = rounded ? w / 2 + 1 : 0;
 800770a:	9202      	str	r2, [sp, #8]
 800770c:	e7bf      	b.n	800768e <lv_draw_arc_get_area+0x7e>
    if(end_quarter == 4) end_quarter = 3;
 800770e:	2b04      	cmp	r3, #4
 8007710:	d17a      	bne.n	8007808 <lv_draw_arc_get_area+0x1f8>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 8007712:	2a03      	cmp	r2, #3
 8007714:	d0c6      	beq.n	80076a4 <lv_draw_arc_get_area+0x94>
    else if(start_quarter == 0 && end_quarter == 1) {
 8007716:	2a02      	cmp	r2, #2
    else if(start_quarter == 2 && end_quarter == 3) {
 8007718:	d18e      	bne.n	8007638 <lv_draw_arc_get_area+0x28>
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800771a:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 800771e:	b2a4      	uxth	r4, r4
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8007720:	b236      	sxth	r6, r6
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007722:	b200      	sxth	r0, r0
 8007724:	f00a ff8a 	bl	801263c <lv_trigo_sin>
 8007728:	f8bd a008 	ldrh.w	sl, [sp, #8]
 800772c:	fb00 f009 	mul.w	r0, r0, r9
        area->y1 = y - rout - extra_area;
 8007730:	f8bd b000 	ldrh.w	fp, [sp]
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007734:	eba4 030a 	sub.w	r3, r4, sl
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007738:	4454      	add	r4, sl
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800773a:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800773e:	f105 005a 	add.w	r0, r5, #90	; 0x5a
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8007742:	b22d      	sxth	r5, r5
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007744:	803b      	strh	r3, [r7, #0]
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007746:	b200      	sxth	r0, r0
        area->y1 = y - rout - extra_area;
 8007748:	9b01      	ldr	r3, [sp, #4]
 800774a:	ebab 0303 	sub.w	r3, fp, r3
 800774e:	eba3 030a 	sub.w	r3, r3, sl
                               lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007752:	44da      	add	sl, fp
        area->y1 = y - rout - extra_area;
 8007754:	807b      	strh	r3, [r7, #2]
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007756:	f00a ff71 	bl	801263c <lv_trigo_sin>
 800775a:	fb09 f000 	mul.w	r0, r9, r0
 800775e:	eb04 34e0 	add.w	r4, r4, r0, asr #15
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8007762:	4628      	mov	r0, r5
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007764:	80bc      	strh	r4, [r7, #4]
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8007766:	f00a ff69 	bl	801263c <lv_trigo_sin>
 800776a:	fb00 f408 	mul.w	r4, r0, r8
 800776e:	4630      	mov	r0, r6
 8007770:	f00a ff64 	bl	801263c <lv_trigo_sin>
 8007774:	fb08 f000 	mul.w	r0, r8, r0
 8007778:	4284      	cmp	r4, r0
 800777a:	bfcc      	ite	gt
 800777c:	4628      	movgt	r0, r5
 800777e:	4630      	movle	r0, r6
 8007780:	f00a ff5c 	bl	801263c <lv_trigo_sin>
 8007784:	fb08 f000 	mul.w	r0, r8, r0
 8007788:	f3c0 30cf 	ubfx	r0, r0, #15, #16
                               lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800778c:	4450      	add	r0, sl
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 800778e:	80f8      	strh	r0, [r7, #6]
 8007790:	e760      	b.n	8007654 <lv_draw_arc_get_area+0x44>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 8007792:	2b03      	cmp	r3, #3
 8007794:	d086      	beq.n	80076a4 <lv_draw_arc_get_area+0x94>
    else if(start_quarter == 3 && end_quarter == 0) {
 8007796:	2b00      	cmp	r3, #0
 8007798:	f47f af4e 	bne.w	8007638 <lv_draw_arc_get_area+0x28>
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 800779c:	f105 0b5a 	add.w	fp, r5, #90	; 0x5a
 80077a0:	f106 0a5a 	add.w	sl, r6, #90	; 0x5a
 80077a4:	b2a4      	uxth	r4, r4
 80077a6:	fa0f fb8b 	sxth.w	fp, fp
 80077aa:	fa0f fa8a 	sxth.w	sl, sl
 80077ae:	4658      	mov	r0, fp
 80077b0:	f00a ff44 	bl	801263c <lv_trigo_sin>
 80077b4:	9003      	str	r0, [sp, #12]
 80077b6:	4650      	mov	r0, sl
 80077b8:	f00a ff40 	bl	801263c <lv_trigo_sin>
 80077bc:	9b03      	ldr	r3, [sp, #12]
 80077be:	4283      	cmp	r3, r0
 80077c0:	bfac      	ite	ge
 80077c2:	4650      	movge	r0, sl
 80077c4:	4658      	movlt	r0, fp
 80077c6:	f00a ff39 	bl	801263c <lv_trigo_sin>
                                lv_trigo_sin(start_angle + 90)) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80077ca:	f8bd a008 	ldrh.w	sl, [sp, #8]
 80077ce:	fb00 f008 	mul.w	r0, r0, r8
 80077d2:	eba4 030a 	sub.w	r3, r4, sl
 80077d6:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80077da:	b230      	sxth	r0, r6
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 80077dc:	803b      	strh	r3, [r7, #0]
        area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80077de:	f00a ff2d 	bl	801263c <lv_trigo_sin>
 80077e2:	f8bd 6000 	ldrh.w	r6, [sp]
 80077e6:	fb00 f009 	mul.w	r0, r0, r9
 80077ea:	eba6 030a 	sub.w	r3, r6, sl
 80077ee:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80077f2:	b228      	sxth	r0, r5
        area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80077f4:	807b      	strh	r3, [r7, #2]
        area->x2 = x + rout + extra_area;
 80077f6:	9b01      	ldr	r3, [sp, #4]
 80077f8:	441c      	add	r4, r3
 80077fa:	4454      	add	r4, sl
 80077fc:	80bc      	strh	r4, [r7, #4]
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80077fe:	f00a ff1d 	bl	801263c <lv_trigo_sin>
 8007802:	fb09 f000 	mul.w	r0, r9, r0
 8007806:	e77a      	b.n	80076fe <lv_draw_arc_get_area+0xee>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 8007808:	429a      	cmp	r2, r3
 800780a:	f040 80a6 	bne.w	800795a <lv_draw_arc_get_area+0x34a>
 800780e:	42ae      	cmp	r6, r5
 8007810:	f200 80a3 	bhi.w	800795a <lv_draw_arc_get_area+0x34a>
        if(start_quarter == 0) {
 8007814:	2a03      	cmp	r2, #3
 8007816:	f63f af1d 	bhi.w	8007654 <lv_draw_arc_get_area+0x44>
 800781a:	a301      	add	r3, pc, #4	; (adr r3, 8007820 <lv_draw_arc_get_area+0x210>)
 800781c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8007820:	08007831 	.word	0x08007831
 8007824:	08007895 	.word	0x08007895
 8007828:	080078f7 	.word	0x080078f7
 800782c:	080076a9 	.word	0x080076a9
            area->y1 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007830:	b230      	sxth	r0, r6
 8007832:	f00a ff03 	bl	801263c <lv_trigo_sin>
 8007836:	f8bd b008 	ldrh.w	fp, [sp, #8]
 800783a:	f8bd a000 	ldrh.w	sl, [sp]
 800783e:	fb00 f008 	mul.w	r0, r0, r8
 8007842:	ebaa 030b 	sub.w	r3, sl, fp
            area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007846:	44da      	add	sl, fp
            area->y1 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007848:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800784c:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 8007850:	b2a6      	uxth	r6, r4
 8007852:	fa1b f484 	uxtah	r4, fp, r4
            area->y1 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007856:	807b      	strh	r3, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007858:	b200      	sxth	r0, r0
 800785a:	f00a feef 	bl	801263c <lv_trigo_sin>
 800785e:	fb00 f009 	mul.w	r0, r0, r9
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007862:	eba6 060b 	sub.w	r6, r6, fp
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007866:	eb04 34e0 	add.w	r4, r4, r0, asr #15
            area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800786a:	b228      	sxth	r0, r5
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800786c:	80bc      	strh	r4, [r7, #4]
            area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800786e:	f00a fee5 	bl	801263c <lv_trigo_sin>
 8007872:	fb09 f000 	mul.w	r0, r9, r0
 8007876:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800787a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800787e:	f8a7 a006 	strh.w	sl, [r7, #6]
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007882:	b200      	sxth	r0, r0
 8007884:	f00a feda 	bl	801263c <lv_trigo_sin>
 8007888:	fb08 f000 	mul.w	r0, r8, r0
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800788c:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 8007890:	803e      	strh	r6, [r7, #0]
 8007892:	e6df      	b.n	8007654 <lv_draw_arc_get_area+0x44>
            area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007894:	b230      	sxth	r0, r6
 8007896:	f00a fed1 	bl	801263c <lv_trigo_sin>
 800789a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 800789e:	9b00      	ldr	r3, [sp, #0]
 80078a0:	fb00 f009 	mul.w	r0, r0, r9
 80078a4:	f8bd b000 	ldrh.w	fp, [sp]
 80078a8:	fa1a f383 	uxtah	r3, sl, r3
            area->y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80078ac:	ebab 0b0a 	sub.w	fp, fp, sl
            area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80078b0:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80078b4:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 80078b8:	b2a6      	uxth	r6, r4
 80078ba:	fa1a f484 	uxtah	r4, sl, r4
            area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80078be:	80fb      	strh	r3, [r7, #6]
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80078c0:	b200      	sxth	r0, r0
 80078c2:	f00a febb 	bl	801263c <lv_trigo_sin>
 80078c6:	fb00 f008 	mul.w	r0, r0, r8
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80078ca:	eba6 060a 	sub.w	r6, r6, sl
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80078ce:	eb04 34e0 	add.w	r4, r4, r0, asr #15
            area->y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80078d2:	b228      	sxth	r0, r5
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80078d4:	80bc      	strh	r4, [r7, #4]
            area->y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80078d6:	f00a feb1 	bl	801263c <lv_trigo_sin>
 80078da:	fb08 f000 	mul.w	r0, r8, r0
 80078de:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80078e2:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            area->y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80078e6:	f8a7 b002 	strh.w	fp, [r7, #2]
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80078ea:	b200      	sxth	r0, r0
 80078ec:	f00a fea6 	bl	801263c <lv_trigo_sin>
 80078f0:	fb09 f000 	mul.w	r0, r9, r0
 80078f4:	e7ca      	b.n	800788c <lv_draw_arc_get_area+0x27c>
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80078f6:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 80078fa:	b2a4      	uxth	r4, r4
 80078fc:	b200      	sxth	r0, r0
 80078fe:	f00a fe9d 	bl	801263c <lv_trigo_sin>
 8007902:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8007906:	fb00 f009 	mul.w	r0, r0, r9
 800790a:	eba4 030a 	sub.w	r3, r4, sl
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800790e:	4454      	add	r4, sl
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007910:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            area->y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007914:	b230      	sxth	r0, r6
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007916:	803b      	strh	r3, [r7, #0]
            area->y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007918:	f00a fe90 	bl	801263c <lv_trigo_sin>
 800791c:	9b00      	ldr	r3, [sp, #0]
 800791e:	fb00 f008 	mul.w	r0, r0, r8
 8007922:	f8bd 6000 	ldrh.w	r6, [sp]
 8007926:	fa1a f383 	uxtah	r3, sl, r3
            area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800792a:	eba6 060a 	sub.w	r6, r6, sl
            area->y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800792e:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007932:	b228      	sxth	r0, r5
            area->y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007934:	80fb      	strh	r3, [r7, #6]
            area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007936:	f00a fe81 	bl	801263c <lv_trigo_sin>
 800793a:	fb09 f000 	mul.w	r0, r9, r0
 800793e:	eb06 36e0 	add.w	r6, r6, r0, asr #15
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007942:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007946:	807e      	strh	r6, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007948:	b200      	sxth	r0, r0
 800794a:	f00a fe77 	bl	801263c <lv_trigo_sin>
 800794e:	fb08 f000 	mul.w	r0, r8, r0
 8007952:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 8007956:	80bc      	strh	r4, [r7, #4]
 8007958:	e67c      	b.n	8007654 <lv_draw_arc_get_area+0x44>
        area->x1 = x - rout;
 800795a:	fa1f fa84 	uxth.w	sl, r4
        area->y1 = y - rout;
 800795e:	f8bd b000 	ldrh.w	fp, [sp]
    else if(start_quarter == 0 && end_quarter == 1) {
 8007962:	2a00      	cmp	r2, #0
 8007964:	d13a      	bne.n	80079dc <lv_draw_arc_get_area+0x3cc>
 8007966:	2b01      	cmp	r3, #1
 8007968:	f47f ae66 	bne.w	8007638 <lv_draw_arc_get_area+0x28>
        area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800796c:	f105 005a 	add.w	r0, r5, #90	; 0x5a
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8007970:	b22d      	sxth	r5, r5
        area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007972:	b200      	sxth	r0, r0
 8007974:	f00a fe62 	bl	801263c <lv_trigo_sin>
 8007978:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 800797c:	fb00 f009 	mul.w	r0, r0, r9
 8007980:	ebaa 0304 	sub.w	r3, sl, r4
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007984:	44a2      	add	sl, r4
        area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007986:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 800798a:	4628      	mov	r0, r5
        area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800798c:	803b      	strh	r3, [r7, #0]
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 800798e:	f00a fe55 	bl	801263c <lv_trigo_sin>
 8007992:	9002      	str	r0, [sp, #8]
 8007994:	b233      	sxth	r3, r6
 8007996:	4618      	mov	r0, r3
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	f00a fe4f 	bl	801263c <lv_trigo_sin>
 800799e:	9a02      	ldr	r2, [sp, #8]
 80079a0:	9b00      	ldr	r3, [sp, #0]
 80079a2:	4282      	cmp	r2, r0
 80079a4:	bfac      	ite	ge
 80079a6:	4618      	movge	r0, r3
 80079a8:	4628      	movlt	r0, r5
 80079aa:	f00a fe47 	bl	801263c <lv_trigo_sin>
                                lv_trigo_sin(start_angle))  * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80079ae:	ebab 0304 	sub.w	r3, fp, r4
 80079b2:	fb00 f008 	mul.w	r0, r0, r8
 80079b6:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80079ba:	f106 005a 	add.w	r0, r6, #90	; 0x5a
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 80079be:	807b      	strh	r3, [r7, #2]
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80079c0:	b200      	sxth	r0, r0
 80079c2:	f00a fe3b 	bl	801263c <lv_trigo_sin>
        area->y2 = y + rout + extra_area;
 80079c6:	9b01      	ldr	r3, [sp, #4]
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80079c8:	fb09 f000 	mul.w	r0, r9, r0
        area->y2 = y + rout + extra_area;
 80079cc:	449b      	add	fp, r3
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80079ce:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        area->y2 = y + rout + extra_area;
 80079d2:	445c      	add	r4, fp
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80079d4:	f8a7 a004 	strh.w	sl, [r7, #4]
        area->y2 = y + rout + extra_area;
 80079d8:	80fc      	strh	r4, [r7, #6]
 80079da:	e63b      	b.n	8007654 <lv_draw_arc_get_area+0x44>
    else if(start_quarter == 1 && end_quarter == 2) {
 80079dc:	2a01      	cmp	r2, #1
 80079de:	d13a      	bne.n	8007a56 <lv_draw_arc_get_area+0x446>
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	f47f ae29 	bne.w	8007638 <lv_draw_arc_get_area+0x28>
        area->x1 = x - rout - extra_area;
 80079e6:	9b01      	ldr	r3, [sp, #4]
        area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80079e8:	b228      	sxth	r0, r5
        area->x1 = x - rout - extra_area;
 80079ea:	f8bd 4008 	ldrh.w	r4, [sp, #8]
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 80079ee:	355a      	adds	r5, #90	; 0x5a
        area->x1 = x - rout - extra_area;
 80079f0:	ebaa 0303 	sub.w	r3, sl, r3
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 80079f4:	b22d      	sxth	r5, r5
                                lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80079f6:	44a2      	add	sl, r4
        area->x1 = x - rout - extra_area;
 80079f8:	1b1b      	subs	r3, r3, r4
 80079fa:	803b      	strh	r3, [r7, #0]
        area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80079fc:	f00a fe1e 	bl	801263c <lv_trigo_sin>
 8007a00:	ebab 0304 	sub.w	r3, fp, r4
 8007a04:	fb00 f009 	mul.w	r0, r0, r9
        area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007a08:	44a3      	add	fp, r4
        area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007a0a:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 8007a0e:	807b      	strh	r3, [r7, #2]
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8007a10:	f106 035a 	add.w	r3, r6, #90	; 0x5a
 8007a14:	b21b      	sxth	r3, r3
 8007a16:	4618      	mov	r0, r3
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	f00a fe0f 	bl	801263c <lv_trigo_sin>
 8007a1e:	9000      	str	r0, [sp, #0]
 8007a20:	4628      	mov	r0, r5
 8007a22:	f00a fe0b 	bl	801263c <lv_trigo_sin>
 8007a26:	9a00      	ldr	r2, [sp, #0]
 8007a28:	4282      	cmp	r2, r0
 8007a2a:	bfca      	itet	gt
 8007a2c:	9b01      	ldrgt	r3, [sp, #4]
 8007a2e:	4628      	movle	r0, r5
 8007a30:	4618      	movgt	r0, r3
 8007a32:	f00a fe03 	bl	801263c <lv_trigo_sin>
                                lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007a36:	fb00 f008 	mul.w	r0, r0, r8
 8007a3a:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007a3e:	b230      	sxth	r0, r6
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8007a40:	f8a7 a004 	strh.w	sl, [r7, #4]
        area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007a44:	f00a fdfa 	bl	801263c <lv_trigo_sin>
 8007a48:	fb09 f000 	mul.w	r0, r9, r0
 8007a4c:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
 8007a50:	f8a7 b006 	strh.w	fp, [r7, #6]
 8007a54:	e5fe      	b.n	8007654 <lv_draw_arc_get_area+0x44>
    else if(start_quarter == 2 && end_quarter == 3) {
 8007a56:	2a02      	cmp	r2, #2
 8007a58:	d101      	bne.n	8007a5e <lv_draw_arc_get_area+0x44e>
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	e65c      	b.n	8007718 <lv_draw_arc_get_area+0x108>
    else if(start_quarter == 3 && end_quarter == 0) {
 8007a5e:	2a03      	cmp	r2, #3
 8007a60:	f47f adea 	bne.w	8007638 <lv_draw_arc_get_area+0x28>
 8007a64:	e697      	b.n	8007796 <lv_draw_arc_get_area+0x186>
 8007a66:	bf00      	nop

08007a68 <lv_img_cf_get_px_size>:
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
    uint8_t px_size = 0;

    switch(cf) {
 8007a68:	3804      	subs	r0, #4
 8007a6a:	b2c0      	uxtb	r0, r0
 8007a6c:	280a      	cmp	r0, #10
 8007a6e:	bf9a      	itte	ls
 8007a70:	4b01      	ldrls	r3, [pc, #4]	; (8007a78 <lv_img_cf_get_px_size+0x10>)
 8007a72:	5c18      	ldrbls	r0, [r3, r0]
{
 8007a74:	2000      	movhi	r0, #0
            px_size = 0;
            break;
    }

    return px_size;
}
 8007a76:	4770      	bx	lr
 8007a78:	0802aa12 	.word	0x0802aa12

08007a7c <lv_draw_img>:
{
 8007a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a80:	4604      	mov	r4, r0
 8007a82:	b08d      	sub	sp, #52	; 0x34
 8007a84:	4688      	mov	r8, r1
 8007a86:	4617      	mov	r7, r2
    if(src == NULL) {
 8007a88:	461d      	mov	r5, r3
 8007a8a:	b93b      	cbnz	r3, 8007a9c <lv_draw_img+0x20>
        show_error(draw_ctx, coords, "No\ndata");
 8007a8c:	4a85      	ldr	r2, [pc, #532]	; (8007ca4 <lv_draw_img+0x228>)
 8007a8e:	4639      	mov	r1, r7
 8007a90:	4620      	mov	r0, r4
}
 8007a92:	b00d      	add	sp, #52	; 0x34
 8007a94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        show_error(draw_ctx, coords, "No\ndata");
 8007a98:	f016 be8e 	b.w	801e7b8 <show_error>
    if(dsc->opa <= LV_OPA_MIN) return;
 8007a9c:	7ace      	ldrb	r6, [r1, #11]
 8007a9e:	2e02      	cmp	r6, #2
 8007aa0:	d92f      	bls.n	8007b02 <lv_draw_img+0x86>
    if(draw_ctx->draw_img) {
 8007aa2:	69c6      	ldr	r6, [r0, #28]
 8007aa4:	bb36      	cbnz	r6, 8007af4 <lv_draw_img+0x78>
LV_ATTRIBUTE_FAST_MEM static lv_res_t decode_and_draw(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                      const lv_area_t * coords, const void * src)
{
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;

    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007aac:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8007ab0:	f000 ff6a 	bl	8008988 <_lv_img_cache_open>

    if(cdsc == NULL) return LV_RES_INV;
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d0e8      	beq.n	8007a8c <lv_draw_img+0x10>

    lv_img_cf_t cf;
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 8007aba:	7d06      	ldrb	r6, [r0, #20]
 8007abc:	f006 021f 	and.w	r2, r6, #31
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f016 fea9 	bl	801e818 <lv_img_cf_is_chroma_keyed>
 8007ac6:	bb38      	cbnz	r0, 8007b18 <lv_draw_img+0x9c>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 8007ac8:	2a0e      	cmp	r2, #14
 8007aca:	4616      	mov	r6, r2
 8007acc:	d01c      	beq.n	8007b08 <lv_draw_img+0x8c>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 8007ace:	2a14      	cmp	r2, #20
 8007ad0:	d004      	beq.n	8007adc <lv_draw_img+0x60>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	f016 fea8 	bl	801e828 <lv_img_cf_has_alpha>
 8007ad8:	1d06      	adds	r6, r0, #4
 8007ada:	b2f6      	uxtb	r6, r6
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
            cdsc->dec_dsc.img_data = NULL;
        }
    }

    if(cdsc->dec_dsc.error_msg != NULL) {
 8007adc:	6a2a      	ldr	r2, [r5, #32]
 8007ade:	b1ea      	cbz	r2, 8007b1c <lv_draw_img+0xa0>
        LV_LOG_WARN("Image draw error");

        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f016 fe68 	bl	801e7b8 <show_error>

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 8007ae8:	4628      	mov	r0, r5
}
 8007aea:	b00d      	add	sp, #52	; 0x34
 8007aec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_img_decoder_close(&cache->dec_dsc);
 8007af0:	f017 bd24 	b.w	801f53c <lv_img_decoder_close>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 8007af4:	47b0      	blx	r6
    if(res != LV_RES_OK) {
 8007af6:	2801      	cmp	r0, #1
 8007af8:	d003      	beq.n	8007b02 <lv_draw_img+0x86>
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 8007afa:	f898 300b 	ldrb.w	r3, [r8, #11]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d8d1      	bhi.n	8007aa6 <lv_draw_img+0x2a>
}
 8007b02:	b00d      	add	sp, #52	; 0x34
 8007b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 8007b08:	f8d8 3000 	ldr.w	r3, [r8]
 8007b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b10:	d0e4      	beq.n	8007adc <lv_draw_img+0x60>
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8007b12:	2605      	movs	r6, #5
            cdsc->dec_dsc.img_data = NULL;
 8007b14:	61a8      	str	r0, [r5, #24]
 8007b16:	e7e1      	b.n	8007adc <lv_draw_img+0x60>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 8007b18:	2606      	movs	r6, #6
 8007b1a:	e7df      	b.n	8007adc <lv_draw_img+0x60>
    else if(cdsc->dec_dsc.img_data) {
 8007b1c:	69ab      	ldr	r3, [r5, #24]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d056      	beq.n	8007bd0 <lv_draw_img+0x154>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 8007b22:	f8d8 3000 	ldr.w	r3, [r8]
    dest->x1 = src->x1;
 8007b26:	f9b7 c000 	ldrsh.w	ip, [r7]
    dest->y1 = src->y1;
 8007b2a:	f9b7 e002 	ldrsh.w	lr, [r7, #2]
 8007b2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    dest->x2 = src->x2;
 8007b32:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    dest->y2 = src->y2;
 8007b36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    dest->x1 = src->x1;
 8007b3a:	f8ad c020 	strh.w	ip, [sp, #32]
    dest->y1 = src->y1;
 8007b3e:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 8007b42:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    dest->y2 = src->y2;
 8007b46:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8007b4a:	d027      	beq.n	8007b9c <lv_draw_img+0x120>
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 8007b4c:	4640      	mov	r0, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007b4e:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007b50:	3101      	adds	r1, #1
 8007b52:	f930 3b04 	ldrsh.w	r3, [r0], #4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007b56:	eba2 020e 	sub.w	r2, r2, lr
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007b5a:	eba1 010c 	sub.w	r1, r1, ip
 8007b5e:	9001      	str	r0, [sp, #4]
 8007b60:	b212      	sxth	r2, r2
 8007b62:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8007b66:	b209      	sxth	r1, r1
 8007b68:	9000      	str	r0, [sp, #0]
 8007b6a:	a808      	add	r0, sp, #32
 8007b6c:	f017 fc42 	bl	801f3f4 <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 8007b70:	883a      	ldrh	r2, [r7, #0]
 8007b72:	f8bd 3020 	ldrh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 8007b76:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x1 += coords->x1;
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 8007b80:	887b      	ldrh	r3, [r7, #2]
 8007b82:	4419      	add	r1, r3
 8007b84:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
 8007b88:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8007b8c:	440a      	add	r2, r1
 8007b8e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
 8007b92:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8007b96:	4413      	add	r3, r2
 8007b98:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 8007b9c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8007ba0:	aa08      	add	r2, sp, #32
 8007ba2:	68a1      	ldr	r1, [r4, #8]
 8007ba4:	4648      	mov	r0, r9
 8007ba6:	f01c fb64 	bl	8024272 <_lv_area_intersect>
        if(union_ok == false) {
 8007baa:	b918      	cbnz	r0, 8007bb4 <lv_draw_img+0x138>
    lv_img_decoder_close(&cache->dec_dsc);
 8007bac:	4628      	mov	r0, r5
 8007bae:	f017 fcc5 	bl	801f53c <lv_img_decoder_close>
    if(res != LV_RES_OK) {
 8007bb2:	e7a6      	b.n	8007b02 <lv_draw_img+0x86>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8007bb4:	f8d4 a008 	ldr.w	sl, [r4, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 8007bb8:	463a      	mov	r2, r7
        draw_ctx->clip_area = &clip_com;
 8007bba:	f8c4 9008 	str.w	r9, [r4, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 8007bbe:	4641      	mov	r1, r8
 8007bc0:	9600      	str	r6, [sp, #0]
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	69ab      	ldr	r3, [r5, #24]
 8007bc6:	f016 fe46 	bl	801e856 <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 8007bca:	f8c4 a008 	str.w	sl, [r4, #8]
 8007bce:	e78b      	b.n	8007ae8 <lv_draw_img+0x6c>
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 8007bd0:	463a      	mov	r2, r7
 8007bd2:	68a1      	ldr	r1, [r4, #8]
 8007bd4:	a806      	add	r0, sp, #24
 8007bd6:	f01c fb4c 	bl	8024272 <_lv_area_intersect>
        if(union_ok == false) {
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	d0e6      	beq.n	8007bac <lv_draw_img+0x130>
 8007bde:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007be2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8007be6:	3301      	adds	r3, #1
 8007be8:	1a9b      	subs	r3, r3, r2
 8007bea:	b21b      	sxth	r3, r3
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8007bec:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	f00a fdad 	bl	8012750 <lv_mem_buf_get>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8007bf6:	68a3      	ldr	r3, [r4, #8]
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8007bf8:	4681      	mov	r9, r0
        lv_area_set_height(&line, 1);
 8007bfa:	2101      	movs	r1, #1
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8007bfc:	9303      	str	r3, [sp, #12]
        lv_area_set_height(&line, 1);
 8007bfe:	a808      	add	r0, sp, #32
    dest->x1 = src->x1;
 8007c00:	9b06      	ldr	r3, [sp, #24]
 8007c02:	9308      	str	r3, [sp, #32]
    dest->x2 = src->x2;
 8007c04:	9b07      	ldr	r3, [sp, #28]
 8007c06:	9309      	str	r3, [sp, #36]	; 0x24
 8007c08:	f01c fb00 	bl	802420c <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 8007c0c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8007c10:	f9b7 2000 	ldrsh.w	r2, [r7]
        int32_t y = mask_com.y1 - coords->y1;
 8007c14:	f9bd b01a 	ldrsh.w	fp, [sp, #26]
 8007c18:	f9b7 a002 	ldrsh.w	sl, [r7, #2]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8007c1c:	1a9b      	subs	r3, r3, r2
        int32_t y = mask_com.y1 - coords->y1;
 8007c1e:	ebab 0a0a 	sub.w	sl, fp, sl
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8007c22:	b21b      	sxth	r3, r3
 8007c24:	9305      	str	r3, [sp, #20]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8007c26:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8007c2a:	459b      	cmp	fp, r3
 8007c2c:	dd05      	ble.n	8007c3a <lv_draw_img+0x1be>
        draw_ctx->clip_area = clip_area_ori;
 8007c2e:	9b03      	ldr	r3, [sp, #12]
        lv_mem_buf_release(buf);
 8007c30:	4648      	mov	r0, r9
        draw_ctx->clip_area = clip_area_ori;
 8007c32:	60a3      	str	r3, [r4, #8]
        lv_mem_buf_release(buf);
 8007c34:	f00a fdd6 	bl	80127e4 <lv_mem_buf_release>
 8007c38:	e756      	b.n	8007ae8 <lv_draw_img+0x6c>
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 8007c3a:	aa08      	add	r2, sp, #32
 8007c3c:	9903      	ldr	r1, [sp, #12]
 8007c3e:	a80a      	add	r0, sp, #40	; 0x28
 8007c40:	f01c fb17 	bl	8024272 <_lv_area_intersect>
            if(union_ok == false) continue;
 8007c44:	b358      	cbz	r0, 8007c9e <lv_draw_img+0x222>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8007c46:	9b04      	ldr	r3, [sp, #16]
 8007c48:	fa0f f28a 	sxth.w	r2, sl
 8007c4c:	9905      	ldr	r1, [sp, #20]
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f8cd 9000 	str.w	r9, [sp]
 8007c54:	f017 fc62 	bl	801f51c <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 8007c58:	2801      	cmp	r0, #1
 8007c5a:	d00b      	beq.n	8007c74 <lv_draw_img+0x1f8>
                lv_img_decoder_close(&cdsc->dec_dsc);
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f017 fc6d 	bl	801f53c <lv_img_decoder_close>
                lv_mem_buf_release(buf);
 8007c62:	4648      	mov	r0, r9
 8007c64:	f00a fdbe 	bl	80127e4 <lv_mem_buf_release>
    lv_img_decoder_close(&cache->dec_dsc);
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f017 fc67 	bl	801f53c <lv_img_decoder_close>
                draw_ctx->clip_area = clip_area_ori;
 8007c6e:	9b03      	ldr	r3, [sp, #12]
 8007c70:	60a3      	str	r3, [r4, #8]
    if(res != LV_RES_OK) {
 8007c72:	e70b      	b.n	8007a8c <lv_draw_img+0x10>
            draw_ctx->clip_area = &mask_line;
 8007c74:	ab0a      	add	r3, sp, #40	; 0x28
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 8007c76:	aa08      	add	r2, sp, #32
 8007c78:	4641      	mov	r1, r8
 8007c7a:	4620      	mov	r0, r4
            draw_ctx->clip_area = &mask_line;
 8007c7c:	60a3      	str	r3, [r4, #8]
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 8007c7e:	464b      	mov	r3, r9
 8007c80:	9600      	str	r6, [sp, #0]
            y++;
 8007c82:	f10a 0a01 	add.w	sl, sl, #1
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 8007c86:	f016 fde6 	bl	801e856 <lv_draw_img_decoded>
            line.y1++;
 8007c8a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8007c8e:	3301      	adds	r3, #1
 8007c90:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
 8007c94:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8007c98:	3301      	adds	r3, #1
 8007c9a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8007c9e:	f10b 0b01 	add.w	fp, fp, #1
 8007ca2:	e7c0      	b.n	8007c26 <lv_draw_img+0x1aa>
 8007ca4:	0802aa0a 	.word	0x0802aa0a

08007ca8 <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	2220      	movs	r2, #32
 8007cac:	2100      	movs	r1, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	f012 fd36 	bl	801a720 <memset>
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
    dsc->opa = LV_OPA_COVER;
 8007cb4:	23ff      	movs	r3, #255	; 0xff
    dsc->color = lv_color_black();
 8007cb6:	2500      	movs	r5, #0
    dsc->font = LV_FONT_DEFAULT;
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
    dsc->sel_color = lv_color_black();
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8007cb8:	2005      	movs	r0, #5
    dsc->opa = LV_OPA_COVER;
 8007cba:	76a3      	strb	r3, [r4, #26]
    dsc->font = LV_FONT_DEFAULT;
 8007cbc:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <lv_draw_label_dsc_init+0x2c>)
    dsc->color = lv_color_black();
 8007cbe:	60e5      	str	r5, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 8007cc0:	6023      	str	r3, [r4, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8007cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 8007cc6:	e9c4 3301 	strd	r3, r3, [r4, #4]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8007cca:	f00a fc57 	bl	801257c <lv_palette_main>
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 8007cce:	76e5      	strb	r5, [r4, #27]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8007cd0:	8220      	strh	r0, [r4, #16]
}
 8007cd2:	bd38      	pop	{r3, r4, r5, pc}
 8007cd4:	080293a0 	.word	0x080293a0

08007cd8 <lv_draw_label>:
 * @param hint pointer to a `lv_draw_label_hint_t` variable.
 * It is managed by the draw to speed up the drawing of very long texts (thousands of lines).
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                         const lv_area_t * coords, const char * txt, lv_draw_label_hint_t * hint)
{
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	b0b5      	sub	sp, #212	; 0xd4
 8007cde:	4683      	mov	fp, r0
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	4615      	mov	r5, r2
 8007ce4:	9305      	str	r3, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
 8007ce6:	7e8b      	ldrb	r3, [r1, #26]
{
 8007ce8:	f8dd 80f8 	ldr.w	r8, [sp, #248]	; 0xf8
    if(dsc->opa <= LV_OPA_MIN) return;
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	f240 80b7 	bls.w	8007e60 <lv_draw_label+0x188>
    if(dsc->font == NULL) {
 8007cf2:	680b      	ldr	r3, [r1, #0]
 8007cf4:	9304      	str	r3, [sp, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 80b2 	beq.w	8007e60 <lv_draw_label+0x188>
        LV_LOG_WARN("dsc->font == NULL");
        return;
    }

    if(draw_ctx->draw_letter == NULL) {
 8007cfc:	6a03      	ldr	r3, [r0, #32]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 80ae 	beq.w	8007e60 <lv_draw_label+0x188>
        LV_LOG_WARN("draw->draw_letter == NULL (there is no function to draw letters)");
        return;
    }

    lv_draw_label_dsc_t dsc_mod = *dsc;
 8007d04:	460f      	mov	r7, r1
 8007d06:	ae1e      	add	r6, sp, #120	; 0x78
 8007d08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007d0a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007d0c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8007d10:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

    const lv_font_t * font = dsc->font;
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt == NULL || txt[0] == '\0')
 8007d14:	9b05      	ldr	r3, [sp, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 80a2 	beq.w	8007e60 <lv_draw_label+0x188>
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 809e 	beq.w	8007e60 <lv_draw_label+0x188>
        return;

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 8007d24:	f8db 2008 	ldr.w	r2, [fp, #8]
 8007d28:	4629      	mov	r1, r5
 8007d2a:	a817      	add	r0, sp, #92	; 0x5c
 8007d2c:	f01c faa1 	bl	8024272 <_lv_area_intersect>
    if(!clip_ok) return;
 8007d30:	2800      	cmp	r0, #0
 8007d32:	f000 8095 	beq.w	8007e60 <lv_draw_label+0x188>

    lv_text_align_t align = dsc->align;
 8007d36:	7f23      	ldrb	r3, [r4, #28]
 8007d38:	9308      	str	r3, [sp, #32]
    lv_base_dir_t base_dir = dsc->bidi_dir;

    lv_bidi_calculate_align(&align, &base_dir, txt);

    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 8007d3a:	7f63      	ldrb	r3, [r4, #29]
 8007d3c:	0798      	lsls	r0, r3, #30
 8007d3e:	f100 8092 	bmi.w	8007e66 <lv_draw_label+0x18e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007d42:	88ab      	ldrh	r3, [r5, #4]
 8007d44:	882a      	ldrh	r2, [r5, #0]
 8007d46:	3301      	adds	r3, #1
 8007d48:	1a9b      	subs	r3, r3, r2
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 8007d4a:	b21b      	sxth	r3, r3
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
                        dsc->flag);
        w = p.x;
    }

    int32_t line_height_font = lv_font_get_line_height(font);
 8007d4c:	9a04      	ldr	r2, [sp, #16]

    /*Init variables for the first line*/
    int32_t line_width = 0;
    lv_point_t pos;
    pos.x = coords->x1;
    pos.y = coords->y1;
 8007d4e:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
    int32_t line_height_font = lv_font_get_line_height(font);
 8007d52:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
 8007d56:	f9b4 2012 	ldrsh.w	r2, [r4, #18]

    int32_t x_ofs = 0;
    int32_t y_ofs = 0;
    x_ofs = dsc->ofs_x;
    y_ofs = dsc->ofs_y;
 8007d5a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
    int32_t line_height = line_height_font + dsc->line_space;
 8007d5e:	444a      	add	r2, r9
 8007d60:	9209      	str	r2, [sp, #36]	; 0x24
    pos.x = coords->x1;
 8007d62:	882a      	ldrh	r2, [r5, #0]
 8007d64:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    x_ofs = dsc->ofs_x;
 8007d68:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8007d6c:	9210      	str	r2, [sp, #64]	; 0x40
    pos.y += y_ofs;
 8007d6e:	1842      	adds	r2, r0, r1
 8007d70:	b292      	uxth	r2, r2
 8007d72:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e

    uint32_t line_start     = 0;
    int32_t last_line_start = -1;

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8007d76:	f1b8 0f00 	cmp.w	r8, #0
 8007d7a:	f040 8085 	bne.w	8007e88 <lv_draw_label+0x1b0>
    uint32_t line_start     = 0;
 8007d7e:	2600      	movs	r6, #0
    if(hint && last_line_start >= 0) {
        line_start = last_line_start;
        pos.y += hint->y;
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8007d80:	b21b      	sxth	r3, r3
 8007d82:	930a      	str	r3, [sp, #40]	; 0x28
 8007d84:	7f63      	ldrb	r3, [r4, #29]
 8007d86:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8007d8a:	9301      	str	r3, [sp, #4]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4430      	add	r0, r6
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d94:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8007d98:	f00a ff8c 	bl	8012cb4 <_lv_txt_get_next_line>
 8007d9c:	1987      	adds	r7, r0, r6

    /*Go the first visible line*/
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8007d9e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8007da2:	f8db 2008 	ldr.w	r2, [fp, #8]
 8007da6:	444b      	add	r3, r9
 8007da8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8007dac:	4293      	cmp	r3, r2
        /*Go to next line*/
        line_start = line_end;
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8007dae:	9b05      	ldr	r3, [sp, #20]
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8007db0:	f2c0 808b 	blt.w	8007eca <lv_draw_label+0x1f2>
        if(txt[line_start] == '\0') return;
    }

    /*Align to middle*/
    if(align == LV_TEXT_ALIGN_CENTER) {
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8007db4:	1998      	adds	r0, r3, r6
    if(align == LV_TEXT_ALIGN_CENTER) {
 8007db6:	9b08      	ldr	r3, [sp, #32]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	f040 80b7 	bne.w	8007f2c <lv_draw_label+0x254>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8007dbe:	7f63      	ldrb	r3, [r4, #29]
 8007dc0:	1bb9      	subs	r1, r7, r6
 8007dc2:	9a04      	ldr	r2, [sp, #16]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8007dca:	f01d fcf6 	bl	80257ba <lv_txt_get_width>
 8007dce:	88ab      	ldrh	r3, [r5, #4]
 8007dd0:	882a      	ldrh	r2, [r5, #0]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	1a9b      	subs	r3, r3, r2

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8007dd6:	b21b      	sxth	r3, r3
 8007dd8:	1a18      	subs	r0, r3, r0
 8007dda:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8007dde:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8007de2:	eb03 0360 	add.w	r3, r3, r0, asr #1

    }
    /*Align to the right*/
    else if(align == LV_TEXT_ALIGN_RIGHT) {
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
        pos.x += lv_area_get_width(coords) - line_width;
 8007de6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    }
    uint32_t sel_start = dsc->sel_start;
 8007dea:	6863      	ldr	r3, [r4, #4]
 8007dec:	9306      	str	r3, [sp, #24]
    uint32_t sel_end = dsc->sel_end;
 8007dee:	68a3      	ldr	r3, [r4, #8]
 8007df0:	9307      	str	r3, [sp, #28]
    if(sel_start > sel_end) {
 8007df2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007df6:	4293      	cmp	r3, r2
 8007df8:	bf88      	it	hi
 8007dfa:	e9cd 2306 	strdhi	r2, r3, [sp, #24]
        sel_start = sel_end;
        sel_end = tmp;
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 8007dfe:	7fa3      	ldrb	r3, [r4, #30]
 8007e00:	0799      	lsls	r1, r3, #30
 8007e02:	d019      	beq.n	8007e38 <lv_draw_label+0x160>
        lv_draw_line_dsc_init(&line_dsc);
 8007e04:	a81b      	add	r0, sp, #108	; 0x6c
 8007e06:	f016 fd9e 	bl	801e946 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
        line_dsc.opa = dsc->opa;
        line_dsc.blend_mode = dsc->blend_mode;
 8007e0c:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
        line_dsc.color = dsc->color;
 8007e10:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 8007e14:	9b04      	ldr	r3, [sp, #16]
 8007e16:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	bf08      	it	eq
 8007e1e:	2301      	moveq	r3, #1
 8007e20:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        line_dsc.opa = dsc->opa;
 8007e24:	7ea3      	ldrb	r3, [r4, #26]
 8007e26:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
        line_dsc.blend_mode = dsc->blend_mode;
 8007e2a:	7fa3      	ldrb	r3, [r4, #30]
 8007e2c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8007e30:	f363 0201 	bfi	r2, r3, #0, #2
 8007e34:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
    lv_color_t recolor  = lv_color_black();
    lv_color_t color = lv_color_black();
    int32_t letter_w;

    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 8007e38:	a826      	add	r0, sp, #152	; 0x98
    lv_color_t color = lv_color_black();
 8007e3a:	f04f 0800 	mov.w	r8, #0
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 8007e3e:	f000 fd7d 	bl	800893c <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 8007e42:	8a23      	ldrh	r3, [r4, #16]
 8007e44:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c

    int32_t pos_x_start = pos.x;
 8007e48:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    uint32_t par_start = 0;
 8007e4c:	e9cd 880c 	strd	r8, r8, [sp, #48]	; 0x30
    int32_t pos_x_start = pos.x;
 8007e50:	930e      	str	r3, [sp, #56]	; 0x38
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 8007e52:	9b05      	ldr	r3, [sp, #20]
 8007e54:	4433      	add	r3, r6
 8007e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e58:	9b05      	ldr	r3, [sp, #20]
 8007e5a:	5d9b      	ldrb	r3, [r3, r6]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d17b      	bne.n	8007f58 <lv_draw_label+0x280>

        if(pos.y > draw_ctx->clip_area->y2) return;
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 8007e60:	b035      	add	sp, #212	; 0xd4
 8007e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 8007e66:	9302      	str	r3, [sp, #8]
 8007e68:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8007e6c:	9905      	ldr	r1, [sp, #20]
 8007e6e:	a826      	add	r0, sp, #152	; 0x98
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8007e7c:	6822      	ldr	r2, [r4, #0]
 8007e7e:	f01d fcdb 	bl	8025838 <lv_txt_get_size>
        w = p.x;
 8007e82:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
 8007e86:	e761      	b.n	8007d4c <lv_draw_label+0x74>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8007e88:	2900      	cmp	r1, #0
 8007e8a:	f47f af78 	bne.w	8007d7e <lv_draw_label+0xa6>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	f6bf af75 	bge.w	8007d7e <lv_draw_label+0xa6>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8007e94:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8007e98:	1a09      	subs	r1, r1, r0
 8007e9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e9c:	2900      	cmp	r1, #0
 8007e9e:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8007ea2:	bfb8      	it	lt
 8007ea4:	4249      	neglt	r1, r1
 8007ea6:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
            hint->line_start = -1;
 8007eaa:	bfc4      	itt	gt
 8007eac:	f04f 31ff 	movgt.w	r1, #4294967295
 8007eb0:	f8c8 1000 	strgt.w	r1, [r8]
        last_line_start = hint->line_start;
 8007eb4:	f8d8 6000 	ldr.w	r6, [r8]
    if(hint && last_line_start >= 0) {
 8007eb8:	2e00      	cmp	r6, #0
 8007eba:	f6ff af60 	blt.w	8007d7e <lv_draw_label+0xa6>
        pos.y += hint->y;
 8007ebe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ec2:	440a      	add	r2, r1
 8007ec4:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
 8007ec8:	e75a      	b.n	8007d80 <lv_draw_label+0xa8>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8007eca:	eb03 0a07 	add.w	sl, r3, r7
 8007ece:	7f63      	ldrb	r3, [r4, #29]
 8007ed0:	9904      	ldr	r1, [sp, #16]
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4650      	mov	r0, sl
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007edc:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8007ee0:	f00a fee8 	bl	8012cb4 <_lv_txt_get_next_line>
        pos.y += line_height;
 8007ee4:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8007ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8007eea:	4438      	add	r0, r7
        pos.y += line_height;
 8007eec:	4413      	add	r3, r2
 8007eee:	b21b      	sxth	r3, r3
 8007ef0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8007ef4:	f1b8 0f00 	cmp.w	r8, #0
 8007ef8:	d011      	beq.n	8007f1e <lv_draw_label+0x246>
 8007efa:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8007efe:	db0e      	blt.n	8007f1e <lv_draw_label+0x246>
 8007f00:	f8d8 2000 	ldr.w	r2, [r8]
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	da0a      	bge.n	8007f1e <lv_draw_label+0x246>
            hint->line_start = line_start;
 8007f08:	f8c8 7000 	str.w	r7, [r8]
            hint->y          = pos.y - coords->y1;
 8007f0c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	f8c8 3004 	str.w	r3, [r8, #4]
            hint->coord_y    = coords->y1;
 8007f16:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8007f1a:	f8c8 3008 	str.w	r3, [r8, #8]
        if(txt[line_start] == '\0') return;
 8007f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f22:	463e      	mov	r6, r7
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d09b      	beq.n	8007e60 <lv_draw_label+0x188>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8007f28:	4607      	mov	r7, r0
 8007f2a:	e738      	b.n	8007d9e <lv_draw_label+0xc6>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8007f2c:	9b08      	ldr	r3, [sp, #32]
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	f47f af5b 	bne.w	8007dea <lv_draw_label+0x112>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8007f34:	7f63      	ldrb	r3, [r4, #29]
 8007f36:	1bb9      	subs	r1, r7, r6
 8007f38:	9a04      	ldr	r2, [sp, #16]
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8007f40:	f01d fc3b 	bl	80257ba <lv_txt_get_width>
 8007f44:	88ab      	ldrh	r3, [r5, #4]
 8007f46:	882a      	ldrh	r2, [r5, #0]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 8007f4c:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8007f50:	b21b      	sxth	r3, r3
 8007f52:	1a1b      	subs	r3, r3, r0
 8007f54:	4413      	add	r3, r2
 8007f56:	e746      	b.n	8007de6 <lv_draw_label+0x10e>
        pos.x += x_ofs;
 8007f58:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8007f5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f5e:	4413      	add	r3, r2
 8007f60:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        i         = 0;
 8007f64:	2300      	movs	r3, #0
        cmd_state = CMD_STATE_WAIT;
 8007f66:	4699      	mov	r9, r3
        i         = 0;
 8007f68:	9314      	str	r3, [sp, #80]	; 0x50
        while(i < line_end - line_start) {
 8007f6a:	1bbb      	subs	r3, r7, r6
 8007f6c:	9311      	str	r3, [sp, #68]	; 0x44
 8007f6e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f72:	428b      	cmp	r3, r1
 8007f74:	f200 8086 	bhi.w	8008084 <lv_draw_label+0x3ac>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 8007f78:	7fa3      	ldrb	r3, [r4, #30]
 8007f7a:	079a      	lsls	r2, r3, #30
 8007f7c:	d522      	bpl.n	8007fc4 <lv_draw_label+0x2ec>
            p1.x = pos_x_start;
 8007f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8007f80:	a91b      	add	r1, sp, #108	; 0x6c
 8007f82:	4658      	mov	r0, fp
            line_dsc.color = color;
 8007f84:	f8ad 806c 	strh.w	r8, [sp, #108]	; 0x6c
            p1.x = pos_x_start;
 8007f88:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8007f8c:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8007f90:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8007f94:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8007f98:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8007f9c:	6822      	ldr	r2, [r4, #0]
 8007f9e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8007fa2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8007fa6:	eb03 0362 	add.w	r3, r3, r2, asr #1
            p2.x = pos.x;
 8007faa:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8007fae:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 8007fb0:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8007fb4:	aa16      	add	r2, sp, #88	; 0x58
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8007fb6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            p2.y = p1.y;
 8007fba:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8007fbe:	ab19      	add	r3, sp, #100	; 0x64
 8007fc0:	f016 fcce 	bl	801e960 <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 8007fc4:	7fa3      	ldrb	r3, [r4, #30]
 8007fc6:	07db      	lsls	r3, r3, #31
 8007fc8:	d51e      	bpl.n	8008008 <lv_draw_label+0x330>
            p1.x = pos_x_start;
 8007fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8007fcc:	4658      	mov	r0, fp
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8007fce:	6822      	ldr	r2, [r4, #0]
            p1.x = pos_x_start;
 8007fd0:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8007fd4:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8007fd8:	8911      	ldrh	r1, [r2, #8]
 8007fda:	8952      	ldrh	r2, [r2, #10]
 8007fdc:	440b      	add	r3, r1
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8007fde:	a91b      	add	r1, sp, #108	; 0x6c
            line_dsc.color = color;
 8007fe0:	f8ad 806c 	strh.w	r8, [sp, #108]	; 0x6c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8007fe4:	1a9b      	subs	r3, r3, r2
 8007fe6:	9a04      	ldr	r2, [sp, #16]
 8007fe8:	f992 200d 	ldrsb.w	r2, [r2, #13]
 8007fec:	1a9b      	subs	r3, r3, r2
            p2.x = pos.x;
 8007fee:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8007ff2:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 8007ff4:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8007ff8:	aa16      	add	r2, sp, #88	; 0x58
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8007ffa:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            p2.y = p1.y;
 8007ffe:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8008002:	ab19      	add	r3, sp, #100	; 0x64
 8008004:	f016 fcac 	bl	801e960 <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8008008:	9b05      	ldr	r3, [sp, #20]
 800800a:	9904      	ldr	r1, [sp, #16]
 800800c:	19de      	adds	r6, r3, r7
 800800e:	7f63      	ldrb	r3, [r4, #29]
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	2300      	movs	r3, #0
 8008014:	4630      	mov	r0, r6
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800801a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800801e:	f00a fe49 	bl	8012cb4 <_lv_txt_get_next_line>
        pos.x = coords->x1;
 8008022:	882b      	ldrh	r3, [r5, #0]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8008024:	4601      	mov	r1, r0
 8008026:	eb07 0900 	add.w	r9, r7, r0
        pos.x = coords->x1;
 800802a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        if(align == LV_TEXT_ALIGN_CENTER) {
 800802e:	9b08      	ldr	r3, [sp, #32]
 8008030:	2b02      	cmp	r3, #2
 8008032:	f040 80ec 	bne.w	800820e <lv_draw_label+0x536>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8008036:	7f63      	ldrb	r3, [r4, #29]
 8008038:	4630      	mov	r0, r6
 800803a:	9a04      	ldr	r2, [sp, #16]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8008042:	f01d fbba 	bl	80257ba <lv_txt_get_width>
 8008046:	88ab      	ldrh	r3, [r5, #4]
 8008048:	882a      	ldrh	r2, [r5, #0]
 800804a:	3301      	adds	r3, #1
 800804c:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800804e:	b21b      	sxth	r3, r3
 8008050:	1a18      	subs	r0, r3, r0
 8008052:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8008056:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800805a:	eb03 0360 	add.w	r3, r3, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
 800805e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        pos.y += line_height;
 8008062:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
        line_start = line_end;
 8008066:	463e      	mov	r6, r7
        pos.y += line_height;
 8008068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800806a:	4413      	add	r3, r2
        if(pos.y > draw_ctx->clip_area->y2) return;
 800806c:	f8db 2008 	ldr.w	r2, [fp, #8]
        pos.y += line_height;
 8008070:	b21b      	sxth	r3, r3
        if(pos.y > draw_ctx->clip_area->y2) return;
 8008072:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8008076:	429a      	cmp	r2, r3
        pos.y += line_height;
 8008078:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(pos.y > draw_ctx->clip_area->y2) return;
 800807c:	f6ff aef0 	blt.w	8007e60 <lv_draw_label+0x188>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8008080:	464f      	mov	r7, r9
 8008082:	e6e6      	b.n	8007e52 <lv_draw_label+0x17a>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8008084:	9a06      	ldr	r2, [sp, #24]
 8008086:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800808a:	429a      	cmp	r2, r3
 800808c:	d01d      	beq.n	80080ca <lv_draw_label+0x3f2>
 800808e:	9a07      	ldr	r2, [sp, #28]
 8008090:	429a      	cmp	r2, r3
 8008092:	d01a      	beq.n	80080ca <lv_draw_label+0x3f2>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 8008094:	4b69      	ldr	r3, [pc, #420]	; (800823c <lv_draw_label+0x564>)
 8008096:	4431      	add	r1, r6
 8008098:	9805      	ldr	r0, [sp, #20]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4798      	blx	r3
 800809e:	4682      	mov	sl, r0
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 80080a0:	ab14      	add	r3, sp, #80	; 0x50
 80080a2:	aa16      	add	r2, sp, #88	; 0x58
 80080a4:	a915      	add	r1, sp, #84	; 0x54
 80080a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80080a8:	f00a ff66 	bl	8012f78 <_lv_txt_encoded_letter_next_2>
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80080ac:	7f63      	ldrb	r3, [r4, #29]
 80080ae:	f013 0301 	ands.w	r3, r3, #1
 80080b2:	f000 80a2 	beq.w	80081fa <lv_draw_label+0x522>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80080b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080b8:	2a23      	cmp	r2, #35	; 0x23
 80080ba:	d113      	bne.n	80080e4 <lv_draw_label+0x40c>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 80080bc:	f1b9 0f00 	cmp.w	r9, #0
 80080c0:	d106      	bne.n	80080d0 <lv_draw_label+0x3f8>
                        par_start = i;
 80080c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
                        cmd_state = CMD_STATE_PAR;
 80080c4:	4699      	mov	r9, r3
                        par_start = i;
 80080c6:	920c      	str	r2, [sp, #48]	; 0x30
                        continue;
 80080c8:	e751      	b.n	8007f6e <lv_draw_label+0x296>
            uint32_t logical_char_pos = 0;
 80080ca:	f04f 0a00 	mov.w	sl, #0
 80080ce:	e7e7      	b.n	80080a0 <lv_draw_label+0x3c8>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 80080d0:	f1b9 0f01 	cmp.w	r9, #1
 80080d4:	d04a      	beq.n	800816c <lv_draw_label+0x494>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 80080d6:	f1b9 0f02 	cmp.w	r9, #2
 80080da:	f000 8095 	beq.w	8008208 <lv_draw_label+0x530>
            color = dsc->color;
 80080de:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 80080e2:	e047      	b.n	8008174 <lv_draw_label+0x49c>
                if(cmd_state == CMD_STATE_PAR) {
 80080e4:	f1b9 0f01 	cmp.w	r9, #1
 80080e8:	f040 8087 	bne.w	80081fa <lv_draw_label+0x522>
                    if(letter == ' ') {
 80080ec:	2a20      	cmp	r2, #32
 80080ee:	f47f af3e 	bne.w	8007f6e <lv_draw_label+0x296>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 80080f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080f6:	1a9b      	subs	r3, r3, r2
 80080f8:	2b07      	cmp	r3, #7
 80080fa:	d135      	bne.n	8008168 <lv_draw_label+0x490>
    return memcpy(dst, src, len);
 80080fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080fe:	2206      	movs	r2, #6
 8008100:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008102:	a819      	add	r0, sp, #100	; 0x64
 8008104:	1859      	adds	r1, r3, r1
 8008106:	f012 fb00 	bl	801a70a <memcpy>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800810a:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 800810e:	f016 fbad 	bl	801e86c <hex_char_to_num>
 8008112:	4601      	mov	r1, r0
 8008114:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
 8008118:	f016 fba8 	bl	801e86c <hex_char_to_num>
 800811c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 8008120:	f89d 0066 	ldrb.w	r0, [sp, #102]	; 0x66
 8008124:	f016 fba2 	bl	801e86c <hex_char_to_num>
 8008128:	4681      	mov	r9, r0
 800812a:	f89d 0067 	ldrb.w	r0, [sp, #103]	; 0x67
 800812e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8008132:	f016 fb9b 	bl	801e86c <hex_char_to_num>
 8008136:	eb00 1909 	add.w	r9, r0, r9, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800813a:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 800813e:	f016 fb95 	bl	801e86c <hex_char_to_num>
 8008142:	4682      	mov	sl, r0
 8008144:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
 8008148:	f3c9 0985 	ubfx	r9, r9, #2, #6
 800814c:	f016 fb8e 	bl	801e86c <hex_char_to_num>
 8008150:	eb00 130a 	add.w	r3, r0, sl, lsl #4
 8008154:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8008158:	ea43 1349 	orr.w	r3, r3, r9, lsl #5
 800815c:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8008160:	f04f 0902 	mov.w	r9, #2
                            recolor.full = dsc->color.full;
 8008164:	930d      	str	r3, [sp, #52]	; 0x34
 8008166:	e702      	b.n	8007f6e <lv_draw_label+0x296>
 8008168:	89a3      	ldrh	r3, [r4, #12]
 800816a:	e7f9      	b.n	8008160 <lv_draw_label+0x488>
            color = dsc->color;
 800816c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
                        cmd_state = CMD_STATE_WAIT;
 8008170:	f04f 0900 	mov.w	r9, #0
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8008174:	9804      	ldr	r0, [sp, #16]
 8008176:	e9dd 1215 	ldrd	r1, r2, [sp, #84]	; 0x54
 800817a:	f01b ff5c 	bl	8024036 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800817e:	9a06      	ldr	r2, [sp, #24]
 8008180:	f64f 73ff 	movw	r3, #65535	; 0xffff
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8008184:	900b      	str	r0, [sp, #44]	; 0x2c
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8008186:	429a      	cmp	r2, r3
 8008188:	d021      	beq.n	80081ce <lv_draw_label+0x4f6>
 800818a:	9a07      	ldr	r2, [sp, #28]
 800818c:	429a      	cmp	r2, r3
 800818e:	d01e      	beq.n	80081ce <lv_draw_label+0x4f6>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 8008190:	9b06      	ldr	r3, [sp, #24]
 8008192:	4553      	cmp	r3, sl
 8008194:	d81b      	bhi.n	80081ce <lv_draw_label+0x4f6>
 8008196:	4552      	cmp	r2, sl
 8008198:	d919      	bls.n	80081ce <lv_draw_label+0x4f6>
                    sel_coords.x1 = pos.x;
 800819a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800819e:	8aa1      	ldrh	r1, [r4, #20]
                    sel_coords.x1 = pos.x;
 80081a0:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 80081a4:	3b01      	subs	r3, #1
                    sel_coords.y1 = pos.y;
 80081a6:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 80081aa:	440b      	add	r3, r1
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 80081ac:	a926      	add	r1, sp, #152	; 0x98
                    sel_coords.y1 = pos.y;
 80081ae:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    sel_coords.y2 = pos.y + line_height - 1;
 80081b2:	3a01      	subs	r2, #1
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 80081b4:	4403      	add	r3, r0
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 80081b6:	4658      	mov	r0, fp
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 80081b8:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
                    sel_coords.y2 = pos.y + line_height - 1;
 80081bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081be:	441a      	add	r2, r3
 80081c0:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 80081c4:	aa19      	add	r2, sp, #100	; 0x64
 80081c6:	f017 f8ee 	bl	801f3a6 <lv_draw_rect>
                    color = dsc->sel_color;
 80081ca:	f8b4 800e 	ldrh.w	r8, [r4, #14]
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 80081ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081d0:	aa13      	add	r2, sp, #76	; 0x4c
 80081d2:	a91e      	add	r1, sp, #120	; 0x78
 80081d4:	4658      	mov	r0, fp
            dsc_mod.color = color;
 80081d6:	f8ad 8084 	strh.w	r8, [sp, #132]	; 0x84
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 80081da:	f016 fb59 	bl	801e890 <lv_draw_letter>
            if(letter_w > 0) {
 80081de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f43f aec4 	beq.w	8007f6e <lv_draw_label+0x296>
                pos.x += letter_w + dsc->letter_space;
 80081e6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80081ea:	8aa2      	ldrh	r2, [r4, #20]
 80081ec:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80081f0:	4413      	add	r3, r2
 80081f2:	449a      	add	sl, r3
 80081f4:	f8ad a04c 	strh.w	sl, [sp, #76]	; 0x4c
 80081f8:	e6b9      	b.n	8007f6e <lv_draw_label+0x296>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 80081fa:	f1b9 0f02 	cmp.w	r9, #2
 80081fe:	f47f af6e 	bne.w	80080de <lv_draw_label+0x406>
 8008202:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8008206:	e7b5      	b.n	8008174 <lv_draw_label+0x49c>
                        cmd_state = CMD_STATE_WAIT;
 8008208:	f04f 0900 	mov.w	r9, #0
 800820c:	e6af      	b.n	8007f6e <lv_draw_label+0x296>
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 800820e:	9b08      	ldr	r3, [sp, #32]
 8008210:	2b03      	cmp	r3, #3
 8008212:	f47f af26 	bne.w	8008062 <lv_draw_label+0x38a>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8008216:	7f63      	ldrb	r3, [r4, #29]
 8008218:	4630      	mov	r0, r6
 800821a:	9a04      	ldr	r2, [sp, #16]
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8008222:	f01d faca 	bl	80257ba <lv_txt_get_width>
 8008226:	88ab      	ldrh	r3, [r5, #4]
 8008228:	882a      	ldrh	r2, [r5, #0]
 800822a:	3301      	adds	r3, #1
 800822c:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800822e:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8008232:	b21b      	sxth	r3, r3
 8008234:	1a1b      	subs	r3, r3, r0
 8008236:	4413      	add	r3, r2
 8008238:	e711      	b.n	800805e <lv_draw_label+0x386>
 800823a:	bf00      	nop
 800823c:	240000f4 	.word	0x240000f4

08008240 <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
 8008240:	2300      	movs	r3, #0
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 8008242:	4a09      	ldr	r2, [pc, #36]	; (8008268 <lv_draw_mask_add+0x28>)
{
 8008244:	b530      	push	{r4, r5, lr}
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 8008246:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800824a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800824e:	b12d      	cbz	r5, 800825c <lv_draw_mask_add+0x1c>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8008250:	3301      	adds	r3, #1
 8008252:	2b10      	cmp	r3, #16
 8008254:	d1f7      	bne.n	8008246 <lv_draw_mask_add+0x6>
    }

    if(i >= _LV_MASK_MAX_NUM) {
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
        return LV_MASK_ID_INV;
 8008256:	f04f 30ff 	mov.w	r0, #4294967295

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;

    return i;
}
 800825a:	bd30      	pop	{r4, r5, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 800825c:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    return i;
 8008260:	b2d8      	uxtb	r0, r3
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 8008262:	6061      	str	r1, [r4, #4]
    return i;
 8008264:	e7f9      	b.n	800825a <lv_draw_mask_add+0x1a>
 8008266:	bf00      	nop
 8008268:	2400120c 	.word	0x2400120c

0800826c <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
 800826c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008270:	4607      	mov	r7, r0
 8008272:	4688      	mov	r8, r1
 8008274:	4691      	mov	r9, r2
 8008276:	469a      	mov	sl, r3
    bool changed = false;
    _lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 8008278:	4e0b      	ldr	r6, [pc, #44]	; (80082a8 <lv_draw_mask_apply+0x3c>)
    bool changed = false;
 800827a:	2400      	movs	r4, #0

    while(m->param) {
 800827c:	6835      	ldr	r5, [r6, #0]
 800827e:	b925      	cbnz	r5, 800828a <lv_draw_mask_apply+0x1e>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;

        m++;
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 8008280:	3401      	adds	r4, #1
 8008282:	b2e0      	uxtb	r0, r4
}
 8008284:	b002      	add	sp, #8
 8008286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 800828a:	9500      	str	r5, [sp, #0]
 800828c:	4653      	mov	r3, sl
 800828e:	682d      	ldr	r5, [r5, #0]
 8008290:	464a      	mov	r2, r9
 8008292:	4641      	mov	r1, r8
 8008294:	4638      	mov	r0, r7
 8008296:	47a8      	blx	r5
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8008298:	2800      	cmp	r0, #0
 800829a:	d0f3      	beq.n	8008284 <lv_draw_mask_apply+0x18>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800829c:	2802      	cmp	r0, #2
        m++;
 800829e:	f106 0608 	add.w	r6, r6, #8
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 80082a2:	bf08      	it	eq
 80082a4:	2401      	moveq	r4, #1
        m++;
 80082a6:	e7e9      	b.n	800827c <lv_draw_mask_apply+0x10>
 80082a8:	2400120c 	.word	0x2400120c

080082ac <lv_draw_mask_remove_id>:
 */
void * lv_draw_mask_remove_id(int16_t id)
{
    _lv_draw_mask_common_dsc_t * p = NULL;

    if(id != LV_MASK_ID_INV) {
 80082ac:	1c42      	adds	r2, r0, #1
{
 80082ae:	4603      	mov	r3, r0
 80082b0:	f04f 0100 	mov.w	r1, #0
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 80082b4:	bf1b      	ittet	ne
 80082b6:	4a05      	ldrne	r2, [pc, #20]	; (80082cc <lv_draw_mask_remove_id+0x20>)
 80082b8:	f852 0030 	ldrne.w	r0, [r2, r0, lsl #3]
    _lv_draw_mask_common_dsc_t * p = NULL;
 80082bc:	4608      	moveq	r0, r1
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 80082be:	f842 1033 	strne.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 80082c2:	bf1c      	itt	ne
 80082c4:	eb02 02c3 	addne.w	r2, r2, r3, lsl #3
 80082c8:	6051      	strne	r1, [r2, #4]
    }

    return p;
}
 80082ca:	4770      	bx	lr
 80082cc:	2400120c 	.word	0x2400120c

080082d0 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	2400      	movs	r4, #0
 80082d4:	4606      	mov	r6, r0
 80082d6:	4d07      	ldr	r5, [pc, #28]	; (80082f4 <lv_draw_mask_remove_custom+0x24>)
    _lv_draw_mask_common_dsc_t * p = NULL;
 80082d8:	4627      	mov	r7, r4
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 80082da:	686b      	ldr	r3, [r5, #4]
 80082dc:	42b3      	cmp	r3, r6
 80082de:	d103      	bne.n	80082e8 <lv_draw_mask_remove_custom+0x18>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
            lv_draw_mask_remove_id(i);
 80082e0:	b220      	sxth	r0, r4
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 80082e2:	682f      	ldr	r7, [r5, #0]
            lv_draw_mask_remove_id(i);
 80082e4:	f7ff ffe2 	bl	80082ac <lv_draw_mask_remove_id>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80082e8:	3401      	adds	r4, #1
 80082ea:	3508      	adds	r5, #8
 80082ec:	2c10      	cmp	r4, #16
 80082ee:	d1f4      	bne.n	80082da <lv_draw_mask_remove_custom+0xa>
        }
    }
    return p;
}
 80082f0:	4638      	mov	r0, r7
 80082f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f4:	2400120c 	.word	0x2400120c

080082f8 <_lv_draw_mask_cleanup>:
        lv_mem_free(poly_p->cfg.points);
    }
}

void _lv_draw_mask_cleanup(void)
{
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4c07      	ldr	r4, [pc, #28]	; (8008318 <_lv_draw_mask_cleanup+0x20>)
 80082fc:	2500      	movs	r5, #0
    uint8_t i;
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 80082fe:	6820      	ldr	r0, [r4, #0]
 8008300:	b108      	cbz	r0, 8008306 <_lv_draw_mask_cleanup+0xe>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 8008302:	f00a f9f3 	bl	80126ec <lv_mem_free>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8008306:	3507      	adds	r5, #7
        }
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 8008308:	4620      	mov	r0, r4
 800830a:	211c      	movs	r1, #28
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800830c:	341c      	adds	r4, #28
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 800830e:	f016 fb34 	bl	801e97a <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8008312:	2d1c      	cmp	r5, #28
 8008314:	d1f3      	bne.n	80082fe <_lv_draw_mask_cleanup+0x6>
    }
}
 8008316:	bd38      	pop	{r3, r4, r5, pc}
 8008318:	2400128c 	.word	0x2400128c

0800831c <lv_draw_mask_is_any>:
    }
    return cnt;
}

bool lv_draw_mask_is_any(const lv_area_t * a)
{
 800831c:	b570      	push	{r4, r5, r6, lr}
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 800831e:	4e13      	ldr	r6, [pc, #76]	; (800836c <lv_draw_mask_is_any+0x50>)
 8008320:	4604      	mov	r4, r0
 8008322:	6833      	ldr	r3, [r6, #0]
 8008324:	b918      	cbnz	r0, 800832e <lv_draw_mask_is_any+0x12>
 8008326:	1e18      	subs	r0, r3, #0
 8008328:	bf18      	it	ne
 800832a:	2001      	movne	r0, #1
        }
    }

    return false;

}
 800832c:	bd70      	pop	{r4, r5, r6, pc}
 800832e:	2500      	movs	r5, #0
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8008330:	f856 3035 	ldr.w	r3, [r6, r5, lsl #3]
        if(comm_param == NULL) continue;
 8008334:	b923      	cbnz	r3, 8008340 <lv_draw_mask_is_any+0x24>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8008336:	3501      	adds	r5, #1
 8008338:	2d10      	cmp	r5, #16
 800833a:	d1f9      	bne.n	8008330 <lv_draw_mask_is_any+0x14>
    return false;
 800833c:	2000      	movs	r0, #0
 800833e:	e7f5      	b.n	800832c <lv_draw_mask_is_any+0x10>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8008340:	791a      	ldrb	r2, [r3, #4]
 8008342:	2a02      	cmp	r2, #2
 8008344:	d001      	beq.n	800834a <lv_draw_mask_is_any+0x2e>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8008346:	2001      	movs	r0, #1
 8008348:	e7f0      	b.n	800832c <lv_draw_mask_is_any+0x10>
 800834a:	f103 0108 	add.w	r1, r3, #8
 800834e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
            if(radius_param->cfg.outer) {
 8008352:	7c9b      	ldrb	r3, [r3, #18]
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8008354:	4620      	mov	r0, r4
            if(radius_param->cfg.outer) {
 8008356:	07db      	lsls	r3, r3, #31
 8008358:	d504      	bpl.n	8008364 <lv_draw_mask_is_any+0x48>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800835a:	f01c f8d2 	bl	8024502 <_lv_area_is_out>
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800835e:	2800      	cmp	r0, #0
 8008360:	d1e9      	bne.n	8008336 <lv_draw_mask_is_any+0x1a>
 8008362:	e7f0      	b.n	8008346 <lv_draw_mask_is_any+0x2a>
 8008364:	f01c f884 	bl	8024470 <_lv_area_is_in>
 8008368:	e7f9      	b.n	800835e <lv_draw_mask_is_any+0x42>
 800836a:	bf00      	nop
 800836c:	2400120c 	.word	0x2400120c

08008370 <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
 8008370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008374:	4615      	mov	r5, r2
 8008376:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800837a:	460f      	mov	r7, r1
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800837c:	212c      	movs	r1, #44	; 0x2c
{
 800837e:	4604      	mov	r4, r0
 8008380:	4698      	mov	r8, r3
 8008382:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8008386:	f016 faf8 	bl	801e97a <lv_memset_00>

    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 800838a:	42b5      	cmp	r5, r6
 800838c:	d106      	bne.n	800839c <lv_draw_mask_line_points_init+0x2c>
 800838e:	f1b9 0f03 	cmp.w	r9, #3
 8008392:	d10b      	bne.n	80083ac <lv_draw_mask_line_points_init+0x3c>
        p1y--;
 8008394:	3d01      	subs	r5, #1
        p2y--;
 8008396:	3e01      	subs	r6, #1
        p1y--;
 8008398:	b22d      	sxth	r5, r5
        p2y--;
 800839a:	b236      	sxth	r6, r6
    }

    if(p1y > p2y) {
 800839c:	42b5      	cmp	r5, r6
 800839e:	dd05      	ble.n	80083ac <lv_draw_mask_line_points_init+0x3c>
 80083a0:	462a      	mov	r2, r5
 80083a2:	4635      	mov	r5, r6
 80083a4:	4616      	mov	r6, r2
 80083a6:	463a      	mov	r2, r7
        lv_coord_t t;
        t = p2x;
        p2x = p1x;
        p1x = t;
 80083a8:	4647      	mov	r7, r8
        p2x = p1x;
 80083aa:	4690      	mov	r8, r2

    param->cfg.p1.x = p1x;
    param->cfg.p1.y = p1y;
    param->cfg.p2.x = p2x;
    param->cfg.p2.y = p2y;
    param->cfg.side = side;
 80083ac:	7c22      	ldrb	r2, [r4, #16]

    param->origo.x = p1x;
    param->origo.y = p1y;
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 80083ae:	eba8 0307 	sub.w	r3, r8, r7
    param->cfg.p2.y = p2y;
 80083b2:	81e6      	strh	r6, [r4, #14]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 80083b4:	1b76      	subs	r6, r6, r5
    param->cfg.side = side;
 80083b6:	f369 0201 	bfi	r2, r9, #0, #2
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 80083ba:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
    param->yx_steep = 0;
    param->xy_steep = 0;
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 80083be:	4833      	ldr	r0, [pc, #204]	; (800848c <lv_draw_mask_line_points_init+0x11c>)
    param->cfg.side = side;
 80083c0:	7422      	strb	r2, [r4, #16]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 80083c2:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
 80083c6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
    param->cfg.p1.x = p1x;
 80083ca:	8127      	strh	r7, [r4, #8]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 80083cc:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    param->cfg.p1.y = p1y;
 80083d0:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
 80083d2:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 80083d6:	4291      	cmp	r1, r2
 80083d8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    param->origo.x = p1x;
 80083dc:	8267      	strh	r7, [r4, #18]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 80083de:	bfd4      	ite	le
 80083e0:	2100      	movle	r1, #0
 80083e2:	2101      	movgt	r1, #1
    param->origo.y = p1y;
 80083e4:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 80083e6:	f361 0200 	bfi	r2, r1, #0, #1
    param->yx_steep = 0;
 80083ea:	2100      	movs	r1, #0
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 80083ec:	6020      	str	r0, [r4, #0]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 80083ee:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;

    int32_t dx = p2x - p1x;
    int32_t dy = p2y - p1y;

    if(param->flat) {
 80083f2:	07d2      	lsls	r2, r2, #31
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 80083f4:	7121      	strb	r1, [r4, #4]
    param->xy_steep = 0;
 80083f6:	e9c4 1106 	strd	r1, r1, [r4, #24]
    if(param->flat) {
 80083fa:	d525      	bpl.n	8008448 <lv_draw_mask_line_points_init+0xd8>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
 80083fc:	b133      	cbz	r3, 800840c <lv_draw_mask_line_points_init+0x9c>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 80083fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008402:	fb92 f2f3 	sdiv	r2, r2, r3
            param->yx_steep = (m * dy) >> 10;
 8008406:	4372      	muls	r2, r6
 8008408:	1292      	asrs	r2, r2, #10
 800840a:	61e2      	str	r2, [r4, #28]
        }

        if(dy) {
 800840c:	b136      	cbz	r6, 800841c <lv_draw_mask_line_points_init+0xac>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800840e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008412:	fb92 f2f6 	sdiv	r2, r2, r6
            param->xy_steep = (m * dx) >> 10;
 8008416:	4353      	muls	r3, r2
 8008418:	129b      	asrs	r3, r3, #10
 800841a:	61a3      	str	r3, [r4, #24]
        }
        param->steep = param->yx_steep;
 800841c:	69e0      	ldr	r0, [r4, #28]
            param->yx_steep = (m * dy) >> 10;
        }
        param->steep = param->xy_steep;
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800841e:	7c23      	ldrb	r3, [r4, #16]
 8008420:	1081      	asrs	r1, r0, #2
 8008422:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8008426:	f013 0303 	ands.w	r3, r3, #3
        param->steep = param->yx_steep;
 800842a:	6220      	str	r0, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800842c:	d024      	beq.n	8008478 <lv_draw_mask_line_points_init+0x108>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800842e:	2b01      	cmp	r3, #1
 8008430:	d022      	beq.n	8008478 <lv_draw_mask_line_points_init+0x108>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 8008432:	2b02      	cmp	r3, #2
 8008434:	d11a      	bne.n	800846c <lv_draw_mask_line_points_init+0xfc>
        if(param->steep > 0) param->inv = 1;
 8008436:	2800      	cmp	r0, #0
 8008438:	dd1d      	ble.n	8008476 <lv_draw_mask_line_points_init+0x106>
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800843a:	f042 0202 	orr.w	r2, r2, #2
 800843e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
        if(param->steep > 0) param->inv = 0;
        else param->inv = 1;
    }

    param->spx = param->steep >> 2;
 8008442:	6261      	str	r1, [r4, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
}
 8008444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(dy) {
 8008448:	b136      	cbz	r6, 8008458 <lv_draw_mask_line_points_init+0xe8>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800844a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800844e:	fb92 f2f6 	sdiv	r2, r2, r6
            param->xy_steep = (m * dx) >> 10;
 8008452:	435a      	muls	r2, r3
 8008454:	1292      	asrs	r2, r2, #10
 8008456:	61a2      	str	r2, [r4, #24]
        if(dx) {
 8008458:	b133      	cbz	r3, 8008468 <lv_draw_mask_line_points_init+0xf8>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800845a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800845e:	fb92 f3f3 	sdiv	r3, r2, r3
            param->yx_steep = (m * dy) >> 10;
 8008462:	4373      	muls	r3, r6
 8008464:	129b      	asrs	r3, r3, #10
 8008466:	61e3      	str	r3, [r4, #28]
        param->steep = param->xy_steep;
 8008468:	69a0      	ldr	r0, [r4, #24]
 800846a:	e7d8      	b.n	800841e <lv_draw_mask_line_points_init+0xae>
        if(param->steep > 0) param->inv = 0;
 800846c:	2800      	cmp	r0, #0
 800846e:	dd0b      	ble.n	8008488 <lv_draw_mask_line_points_init+0x118>
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8008470:	f36f 0241 	bfc	r2, #1, #1
 8008474:	e7e3      	b.n	800843e <lv_draw_mask_line_points_init+0xce>
 8008476:	2300      	movs	r3, #0
 8008478:	f363 0241 	bfi	r2, r3, #1, #1
    if(param->steep < 0) param->spx = -param->spx;
 800847c:	2800      	cmp	r0, #0
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800847e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    if(param->steep < 0) param->spx = -param->spx;
 8008482:	bfb8      	it	lt
 8008484:	4249      	neglt	r1, r1
 8008486:	e7dc      	b.n	8008442 <lv_draw_mask_line_points_init+0xd2>
 8008488:	2301      	movs	r3, #1
 800848a:	e7f5      	b.n	8008478 <lv_draw_mask_line_points_init+0x108>
 800848c:	0801e99f 	.word	0x0801e99f

08008490 <lv_draw_mask_angle_init>:
 * @param start_angle start angle in degrees. 0 deg on the right, 90 deg, on the bottom
 * @param end_angle end angle
 */
void lv_draw_mask_angle_init(lv_draw_mask_angle_param_t * param, lv_coord_t vertex_x, lv_coord_t vertex_y,
                             lv_coord_t start_angle, lv_coord_t end_angle)
{
 8008490:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    lv_draw_mask_line_side_t end_side;

    /*Constrain the input angles*/
    if(start_angle < 0)
        start_angle = 0;
    else if(start_angle > 359)
 8008494:	f240 1567 	movw	r5, #359	; 0x167
{
 8008498:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 800849c:	4617      	mov	r7, r2
 800849e:	461a      	mov	r2, r3
 80084a0:	42ab      	cmp	r3, r5
 80084a2:	460e      	mov	r6, r1
 80084a4:	4604      	mov	r4, r0
 80084a6:	bfa8      	it	ge
 80084a8:	462b      	movge	r3, r5
 80084aa:	4565      	cmp	r5, ip
 80084ac:	bfa8      	it	ge
 80084ae:	4665      	movge	r5, ip
 80084b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        start_angle = 359;

    if(end_angle < 0)
 80084b4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
        end_angle = 0;
    else if(end_angle > 359)
        end_angle = 359;

    if(end_angle < start_angle) {
 80084b8:	429d      	cmp	r5, r3
        param->delta_deg = 360 - start_angle + end_angle;
 80084ba:	b2a9      	uxth	r1, r5
    if(end_angle < start_angle) {
 80084bc:	da30      	bge.n	8008520 <lv_draw_mask_angle_init+0x90>
        param->delta_deg = 360 - start_angle + end_angle;
 80084be:	f501 70b4 	add.w	r0, r1, #360	; 0x168
 80084c2:	1ac0      	subs	r0, r0, r3
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;

    LV_ASSERT_MSG(start_angle >= 0 && start_angle <= 360, "Unexpected start angle");

    if(start_angle >= 0 && start_angle < 180) {
 80084c4:	2ab3      	cmp	r2, #179	; 0xb3
        param->delta_deg = LV_ABS(end_angle - start_angle);
 80084c6:	b280      	uxth	r0, r0
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 80084c8:	f04f 0801 	mov.w	r8, #1
    param->cfg.start_angle = start_angle;
 80084cc:	81a3      	strh	r3, [r4, #12]
    if(start_angle >= 0 && start_angle < 180) {
 80084ce:	bfd4      	ite	le
 80084d0:	2200      	movle	r2, #0
 80084d2:	2201      	movgt	r2, #1
 80084d4:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    else
        start_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/

    LV_ASSERT_MSG(end_angle >= 0 && start_angle <= 360, "Unexpected end angle");

    if(end_angle >= 0 && end_angle < 180) {
 80084d8:	f1bc 0fb3 	cmp.w	ip, #179	; 0xb3
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 80084dc:	4813      	ldr	r0, [pc, #76]	; (800852c <lv_draw_mask_angle_init+0x9c>)
    param->cfg.end_angle = end_angle;
 80084de:	81e5      	strh	r5, [r4, #14]
    param->cfg.vertex_p.x = vertex_x;
 80084e0:	8126      	strh	r6, [r4, #8]
    param->cfg.vertex_p.y = vertex_y;
 80084e2:	8167      	strh	r7, [r4, #10]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 80084e4:	6020      	str	r0, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 80084e6:	f884 8004 	strb.w	r8, [r4, #4]
    if(end_angle >= 0 && end_angle < 180) {
 80084ea:	dd06      	ble.n	80084fa <lv_draw_mask_angle_init+0x6a>
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT;
    }
    else if(end_angle >= 180 && end_angle < 360) {
 80084ec:	39b4      	subs	r1, #180	; 0xb4
 80084ee:	29b3      	cmp	r1, #179	; 0xb3
 80084f0:	bf94      	ite	ls
 80084f2:	f04f 0800 	movls.w	r8, #0
 80084f6:	f04f 0801 	movhi.w	r8, #1
        end_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
    }
    else
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/

    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 80084fa:	4631      	mov	r1, r6
 80084fc:	f104 0010 	add.w	r0, r4, #16
 8008500:	9200      	str	r2, [sp, #0]
 8008502:	463a      	mov	r2, r7
 8008504:	f016 ff28 	bl	801f358 <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 8008508:	462b      	mov	r3, r5
 800850a:	463a      	mov	r2, r7
 800850c:	4631      	mov	r1, r6
 800850e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8008512:	f8cd 8020 	str.w	r8, [sp, #32]
}
 8008516:	b002      	add	sp, #8
 8008518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 800851c:	f016 bf1c 	b.w	801f358 <lv_draw_mask_line_angle_init>
        param->delta_deg = LV_ABS(end_angle - start_angle);
 8008520:	1ae8      	subs	r0, r5, r3
 8008522:	2800      	cmp	r0, #0
 8008524:	bfb8      	it	lt
 8008526:	4240      	neglt	r0, r0
 8008528:	e7cc      	b.n	80084c4 <lv_draw_mask_angle_init+0x34>
 800852a:	bf00      	nop
 800852c:	0801edab 	.word	0x0801edab

08008530 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
 8008530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	4690      	mov	r8, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008536:	88ca      	ldrh	r2, [r1, #6]
 8008538:	4607      	mov	r7, r0
 800853a:	8848      	ldrh	r0, [r1, #2]
 800853c:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800853e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8008542:	b08f      	sub	sp, #60	; 0x3c
 8008544:	2600      	movs	r6, #0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008546:	1a12      	subs	r2, r2, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008548:	8888      	ldrh	r0, [r1, #4]
    dest->x1 = src->x1;
 800854a:	813c      	strh	r4, [r7, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800854c:	3001      	adds	r0, #1
    lv_coord_t w = lv_area_get_width(rect);
    lv_coord_t h = lv_area_get_height(rect);
    int32_t short_side = LV_MIN(w, h);
 800854e:	b212      	sxth	r2, r2
 8008550:	1b00      	subs	r0, r0, r4
 8008552:	b200      	sxth	r0, r0
 8008554:	4282      	cmp	r2, r0
 8008556:	bfa8      	it	ge
 8008558:	4602      	movge	r2, r0
    if(radius > short_side >> 1) radius = short_side >> 1;
 800855a:	ebb8 0f62 	cmp.w	r8, r2, asr #1
 800855e:	ea4f 0062 	mov.w	r0, r2, asr #1
    dest->y1 = src->y1;
 8008562:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8008566:	817a      	strh	r2, [r7, #10]
 8008568:	bfc8      	it	gt
 800856a:	fa0f f880 	sxthgt.w	r8, r0
    dest->x2 = src->x2;
 800856e:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
    if(radius < 0) radius = 0;
 8008572:	ea28 75e8 	bic.w	r5, r8, r8, asr #31
    param->cfg.radius = radius;
    param->cfg.outer = inv ? 1 : 0;
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;

    if(radius == 0) {
 8008576:	f1b8 0f00 	cmp.w	r8, #0
 800857a:	81ba      	strh	r2, [r7, #12]
    dest->y2 = src->y2;
 800857c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
    param->cfg.radius = radius;
 8008580:	823d      	strh	r5, [r7, #16]
 8008582:	81fa      	strh	r2, [r7, #14]
    param->cfg.outer = inv ? 1 : 0;
 8008584:	7cba      	ldrb	r2, [r7, #18]
 8008586:	f363 0200 	bfi	r2, r3, #0, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 800858a:	4b9f      	ldr	r3, [pc, #636]	; (8008808 <lv_draw_mask_radius_init+0x2d8>)
 800858c:	603b      	str	r3, [r7, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800858e:	f04f 0302 	mov.w	r3, #2
    param->cfg.outer = inv ? 1 : 0;
 8008592:	74ba      	strb	r2, [r7, #18]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 8008594:	713b      	strb	r3, [r7, #4]
    if(radius == 0) {
 8008596:	dc03      	bgt.n	80085a0 <lv_draw_mask_radius_init+0x70>
        param->circle = NULL;
 8008598:	617e      	str	r6, [r7, #20]
    }

    param->circle = entry;

    circ_calc_aa4(param->circle, radius);
}
 800859a:	b00f      	add	sp, #60	; 0x3c
 800859c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a0:	4b9a      	ldr	r3, [pc, #616]	; (800880c <lv_draw_mask_radius_init+0x2dc>)
    if(radius == 0) {
 80085a2:	4619      	mov	r1, r3
 80085a4:	461a      	mov	r2, r3
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 80085a6:	f9b1 0018 	ldrsh.w	r0, [r1, #24]
 80085aa:	42a8      	cmp	r0, r5
 80085ac:	d117      	bne.n	80085de <lv_draw_mask_radius_init+0xae>
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 80085ae:	201c      	movs	r0, #28
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 80085b0:	f1b8 0f0f 	cmp.w	r8, #15
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 80085b4:	fb00 2306 	mla	r3, r0, r6, r2
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 80085b8:	bfcc      	ite	gt
 80085ba:	f345 150f 	sbfxgt	r5, r5, #4, #16
 80085be:	2501      	movle	r5, #1
 80085c0:	fb00 2206 	mla	r2, r0, r6, r2
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 80085c4:	6959      	ldr	r1, [r3, #20]
 80085c6:	3101      	adds	r1, #1
 80085c8:	6159      	str	r1, [r3, #20]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	442b      	add	r3, r5
 80085ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085d2:	bfa8      	it	ge
 80085d4:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 80085d8:	6113      	str	r3, [r2, #16]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 80085da:	617a      	str	r2, [r7, #20]
            return;
 80085dc:	e7dd      	b.n	800859a <lv_draw_mask_radius_init+0x6a>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80085de:	3601      	adds	r6, #1
 80085e0:	311c      	adds	r1, #28
 80085e2:	2e04      	cmp	r6, #4
 80085e4:	d1df      	bne.n	80085a6 <lv_draw_mask_radius_init+0x76>
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 80085e6:	2400      	movs	r4, #0
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 80085e8:	695a      	ldr	r2, [r3, #20]
 80085ea:	b92a      	cbnz	r2, 80085f8 <lv_draw_mask_radius_init+0xc8>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 80085ec:	b17c      	cbz	r4, 800860e <lv_draw_mask_radius_init+0xde>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 80085ee:	6919      	ldr	r1, [r3, #16]
 80085f0:	6922      	ldr	r2, [r4, #16]
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 80085f2:	4291      	cmp	r1, r2
 80085f4:	bfb8      	it	lt
 80085f6:	461c      	movlt	r4, r3
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80085f8:	3e01      	subs	r6, #1
 80085fa:	f103 031c 	add.w	r3, r3, #28
 80085fe:	d1f3      	bne.n	80085e8 <lv_draw_mask_radius_init+0xb8>
    if(!entry) {
 8008600:	b9ec      	cbnz	r4, 800863e <lv_draw_mask_radius_init+0x10e>
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 8008602:	201c      	movs	r0, #28
 8008604:	f00a f854 	bl	80126b0 <lv_mem_alloc>
        LV_ASSERT_MALLOC(entry);
 8008608:	4604      	mov	r4, r0
 800860a:	b910      	cbnz	r0, 8008612 <lv_draw_mask_radius_init+0xe2>
 800860c:	e7fe      	b.n	800860c <lv_draw_mask_radius_init+0xdc>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 800860e:	461c      	mov	r4, r3
 8008610:	e7f2      	b.n	80085f8 <lv_draw_mask_radius_init+0xc8>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 8008612:	211c      	movs	r1, #28
 8008614:	f016 f9b1 	bl	801e97a <lv_memset_00>
        entry->life = -1;
 8008618:	f04f 33ff 	mov.w	r3, #4294967295
        CIRCLE_CACHE_AGING(entry->life, radius);
 800861c:	6123      	str	r3, [r4, #16]
    param->circle = entry;
 800861e:	617c      	str	r4, [r7, #20]
{
    if(radius == 0) return;
    c->radius = radius;

    /*Allocate buffers*/
    if(c->buf) lv_mem_free(c->buf);
 8008620:	6820      	ldr	r0, [r4, #0]
    c->radius = radius;
 8008622:	8325      	strh	r5, [r4, #24]
    if(c->buf) lv_mem_free(c->buf);
 8008624:	b108      	cbz	r0, 800862a <lv_draw_mask_radius_init+0xfa>
 8008626:	f00a f861 	bl	80126ec <lv_mem_free>

    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 800862a:	2006      	movs	r0, #6
 800862c:	f105 0901 	add.w	r9, r5, #1
 8008630:	fb05 0000 	mla	r0, r5, r0, r0
 8008634:	f00a f83c 	bl	80126b0 <lv_mem_alloc>
 8008638:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MALLOC(c->buf);
 800863a:	b980      	cbnz	r0, 800865e <lv_draw_mask_radius_init+0x12e>
 800863c:	e7fe      	b.n	800863c <lv_draw_mask_radius_init+0x10c>
        entry->used_cnt++;
 800863e:	6963      	ldr	r3, [r4, #20]
        CIRCLE_CACHE_AGING(entry->life, radius);
 8008640:	f1b8 0f0f 	cmp.w	r8, #15
        entry->used_cnt++;
 8008644:	f103 0301 	add.w	r3, r3, #1
 8008648:	6163      	str	r3, [r4, #20]
        CIRCLE_CACHE_AGING(entry->life, radius);
 800864a:	bfcc      	ite	gt
 800864c:	f345 130f 	sbfxgt	r3, r5, #4, #16
 8008650:	2301      	movle	r3, #1
 8008652:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008656:	bfa8      	it	ge
 8008658:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800865c:	e7de      	b.n	800861c <lv_draw_mask_radius_init+0xec>
    c->cir_opa = c->buf;
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 800865e:	eb00 0345 	add.w	r3, r0, r5, lsl #1
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 8008662:	2204      	movs	r2, #4

    /*Special case, handle manually*/
    if(radius == 1) {
 8008664:	f1b8 0f01 	cmp.w	r8, #1
    c->cir_opa = c->buf;
 8008668:	6060      	str	r0, [r4, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 800866a:	f103 0302 	add.w	r3, r3, #2
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 800866e:	eb02 0785 	add.w	r7, r2, r5, lsl #2
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 8008672:	60e3      	str	r3, [r4, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 8008674:	eb00 0307 	add.w	r3, r0, r7
 8008678:	60a3      	str	r3, [r4, #8]
    if(radius == 1) {
 800867a:	d10a      	bne.n	8008692 <lv_draw_mask_radius_init+0x162>
        c->cir_opa[0] = 180;
 800867c:	23b4      	movs	r3, #180	; 0xb4
 800867e:	7003      	strb	r3, [r0, #0]
        c->opa_start_on_y[0] = 0;
 8008680:	2300      	movs	r3, #0
 8008682:	68e2      	ldr	r2, [r4, #12]
 8008684:	8013      	strh	r3, [r2, #0]
        c->opa_start_on_y[1] = 1;
 8008686:	68e2      	ldr	r2, [r4, #12]
 8008688:	f8a2 8002 	strh.w	r8, [r2, #2]
        c->x_start_on_y[0] = 0;
 800868c:	68a2      	ldr	r2, [r4, #8]
 800868e:	8013      	strh	r3, [r2, #0]
        return;
 8008690:	e783      	b.n	800859a <lv_draw_mask_radius_init+0x6a>
    }

    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 8008692:	ea4f 00c9 	mov.w	r0, r9, lsl #3
 8008696:	f00a f85b 	bl	8012750 <lv_mem_buf_get>
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 800869a:	19c2      	adds	r2, r0, r7

    uint32_t y_8th_cnt = 0;
    lv_point_t cp;
    lv_coord_t tmp;
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 800869c:	00ab      	lsls	r3, r5, #2
    *tmp = 1 - radius;
 800869e:	f1c3 0101 	rsb	r1, r3, #1
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 80086a2:	fa0f fa83 	sxth.w	sl, r3
    int32_t i;

    uint32_t x_int[4];
    uint32_t x_fract[4];
    lv_coord_t cir_size = 0;
    x_int[0] = cp.x >> 2;
 80086a6:	f343 038d 	sbfx	r3, r3, #2, #14
    *tmp = 1 - radius;
 80086aa:	b209      	sxth	r1, r1
    x_int[0] = cp.x >> 2;
 80086ac:	9306      	str	r3, [sp, #24]
    x_fract[0] = 0;
 80086ae:	2300      	movs	r3, #0
    *tmp = 1 - radius;
 80086b0:	9101      	str	r1, [sp, #4]
    uint32_t y_8th_cnt = 0;
 80086b2:	469b      	mov	fp, r3
    c->y = 0;
 80086b4:	4699      	mov	r9, r3
    x_fract[0] = 0;
 80086b6:	930a      	str	r3, [sp, #40]	; 0x28

    /*Calculate an 1/8 circle*/
    while(circ_cont(&cp)) {
 80086b8:	45d1      	cmp	r9, sl
 80086ba:	dc24      	bgt.n	8008706 <lv_draw_mask_radius_init+0x1d6>
 80086bc:	f10d 0e18 	add.w	lr, sp, #24
 80086c0:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
        /*Calculate 4 point of the circle */
        for(i = 0; i < 4; i++) {
 80086c4:	2700      	movs	r7, #0
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 80086c6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80086ca:	9102      	str	r1, [sp, #8]
    if(*tmp <= 0) {
 80086cc:	9901      	ldr	r1, [sp, #4]
 80086ce:	2900      	cmp	r1, #0
 80086d0:	dc63      	bgt.n	800879a <lv_draw_mask_radius_init+0x26a>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 80086d2:	9902      	ldr	r1, [sp, #8]
 80086d4:	3103      	adds	r1, #3
 80086d6:	eb01 0149 	add.w	r1, r1, r9, lsl #1
 80086da:	b209      	sxth	r1, r1
 80086dc:	9101      	str	r1, [sp, #4]
    c->y++;
 80086de:	f109 0101 	add.w	r1, r9, #1
 80086e2:	fa0f f981 	sxth.w	r9, r1
            circ_next(&cp, &tmp);
            if(circ_cont(&cp) == false) break;
 80086e6:	45d1      	cmp	r9, sl
 80086e8:	dc0a      	bgt.n	8008700 <lv_draw_mask_radius_init+0x1d0>
            x_int[i] = cp.x >> 2;
 80086ea:	ea4f 01aa 	mov.w	r1, sl, asr #2
        for(i = 0; i < 4; i++) {
 80086ee:	3701      	adds	r7, #1
            x_int[i] = cp.x >> 2;
 80086f0:	f84e 1b04 	str.w	r1, [lr], #4
        for(i = 0; i < 4; i++) {
 80086f4:	2f04      	cmp	r7, #4
            x_fract[i] = cp.x & 0x3;
 80086f6:	f00a 0103 	and.w	r1, sl, #3
 80086fa:	f84c 1b04 	str.w	r1, [ip], #4
        for(i = 0; i < 4; i++) {
 80086fe:	d1e2      	bne.n	80086c6 <lv_draw_mask_radius_init+0x196>
        }
        if(i != 4) break;
 8008700:	2f04      	cmp	r7, #4
    }

    /*The point on the 1/8 circle is special, calculate it manually*/
    int32_t mid = radius * 723;
    int32_t mid_int = mid >> 10;
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 8008702:	469c      	mov	ip, r3
        if(i != 4) break;
 8008704:	d056      	beq.n	80087b4 <lv_draw_mask_radius_init+0x284>
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 8008706:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
    int32_t mid = radius * 723;
 800870a:	f240 21d3 	movw	r1, #723	; 0x2d3
 800870e:	fb15 f501 	smulbb	r5, r5, r1
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 8008712:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008716:	f930 e01c 	ldrsh.w	lr, [r0, ip, lsl #1]
    int32_t mid_int = mid >> 10;
 800871a:	12a9      	asrs	r1, r5, #10
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 800871c:	ea4f 074c 	mov.w	r7, ip, lsl #1
 8008720:	ebbe 2fa5 	cmp.w	lr, r5, asr #10
 8008724:	d103      	bne.n	800872e <lv_draw_mask_radius_init+0x1fe>
 8008726:	f932 c01c 	ldrsh.w	ip, [r2, ip, lsl #1]
 800872a:	4561      	cmp	r1, ip
 800872c:	d01a      	beq.n	8008764 <lv_draw_mask_radius_init+0x234>
        int32_t tmp_val = mid - (mid_int << 10);
 800872e:	f3c5 0509 	ubfx	r5, r5, #0, #10
            tmp_val = tmp_val * tmp_val * 2;
            tmp_val = tmp_val >> (10 + 6);
            tmp_val = 15 - tmp_val;
        }

        cir_x[cir_size] = mid_int;
 8008732:	b209      	sxth	r1, r1
 8008734:	3702      	adds	r7, #2
        if(tmp_val <= 512) {
 8008736:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
        cir_x[cir_size] = mid_int;
 800873a:	53c1      	strh	r1, [r0, r7]
            tmp_val = 1024 - tmp_val;
 800873c:	bfcc      	ite	gt
 800873e:	f5c5 6580 	rsbgt	r5, r5, #1024	; 0x400
            tmp_val = tmp_val * tmp_val * 2;
 8008742:	436d      	mulle	r5, r5
        cir_y[cir_size] = mid_int;
 8008744:	53d1      	strh	r1, [r2, r7]
            tmp_val = tmp_val * tmp_val * 2;
 8008746:	bfc8      	it	gt
 8008748:	436d      	mulgt	r5, r5
        c->cir_opa[cir_size] = tmp_val;
 800874a:	6861      	ldr	r1, [r4, #4]
            tmp_val = tmp_val >> (10 + 6);
 800874c:	bfd2      	itee	le
 800874e:	0bed      	lsrle	r5, r5, #15
            tmp_val = tmp_val >> (10 + 6);
 8008750:	13ed      	asrgt	r5, r5, #15
            tmp_val = 15 - tmp_val;
 8008752:	f1c5 050f 	rsbgt	r5, r5, #15
        c->cir_opa[cir_size] = tmp_val;
 8008756:	54cd      	strb	r5, [r1, r3]
        c->cir_opa[cir_size] *= 16;
 8008758:	6865      	ldr	r5, [r4, #4]
 800875a:	5ce9      	ldrb	r1, [r5, r3]
 800875c:	0109      	lsls	r1, r1, #4
 800875e:	54e9      	strb	r1, [r5, r3]
        cir_size++;
 8008760:	3301      	adds	r3, #1
 8008762:	b21b      	sxth	r3, r3
    }

    /*Build the second octet by mirroring the first*/
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8008764:	1e9d      	subs	r5, r3, #2
 8008766:	4619      	mov	r1, r3
 8008768:	2d00      	cmp	r5, #0
 800876a:	f280 80b7 	bge.w	80088dc <lv_draw_mask_radius_init+0x3ac>
 800876e:	b299      	uxth	r1, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	f101 35ff 	add.w	r5, r1, #4294967295
 8008776:	bfd4      	ite	le
 8008778:	2300      	movle	r3, #0
 800877a:	462b      	movgt	r3, r5
        c->cir_opa[cir_size] = c->cir_opa[i];
    }

    lv_coord_t y = 0;
    i = 0;
    c->opa_start_on_y[0] = 0;
 800877c:	68e5      	ldr	r5, [r4, #12]
 800877e:	4419      	add	r1, r3
 8008780:	2300      	movs	r3, #0
 8008782:	b209      	sxth	r1, r1
 8008784:	802b      	strh	r3, [r5, #0]
    while(i < cir_size) {
 8008786:	428b      	cmp	r3, r1
 8008788:	fa0f fc86 	sxth.w	ip, r6
 800878c:	f2c0 80b7 	blt.w	80088fe <lv_draw_mask_radius_init+0x3ce>
}
 8008790:	b00f      	add	sp, #60	; 0x3c
 8008792:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
        }
        y++;
    }

    lv_mem_buf_release(cir_x);
 8008796:	f00a b825 	b.w	80127e4 <lv_mem_buf_release>
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 800879a:	9902      	ldr	r1, [sp, #8]
 800879c:	eba9 080a 	sub.w	r8, r9, sl
 80087a0:	3105      	adds	r1, #5
 80087a2:	eb01 0148 	add.w	r1, r1, r8, lsl #1
 80087a6:	b209      	sxth	r1, r1
 80087a8:	9101      	str	r1, [sp, #4]
        c->x--;
 80087aa:	f10a 31ff 	add.w	r1, sl, #4294967295
 80087ae:	fa0f fa81 	sxth.w	sl, r1
 80087b2:	e794      	b.n	80086de <lv_draw_mask_radius_init+0x1ae>
        if(x_int[0] == x_int[3]) {
 80087b4:	f8dd 8018 	ldr.w	r8, [sp, #24]
            cir_x[cir_size] = x_int[0];
 80087b8:	005f      	lsls	r7, r3, #1
        cir_size++;
 80087ba:	b29b      	uxth	r3, r3
            cir_x[cir_size] = x_int[0];
 80087bc:	fa0f f188 	sxth.w	r1, r8
        cir_size++;
 80087c0:	9305      	str	r3, [sp, #20]
            cir_size++;
 80087c2:	3301      	adds	r3, #1
            cir_x[cir_size] = x_int[0];
 80087c4:	9102      	str	r1, [sp, #8]
            cir_y[cir_size] = y_8th_cnt;
 80087c6:	fa0f fe8b 	sxth.w	lr, fp
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 80087ca:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
            cir_size++;
 80087ce:	b21b      	sxth	r3, r3
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 80087d0:	9103      	str	r1, [sp, #12]
        if(x_int[0] == x_int[3]) {
 80087d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087d4:	4588      	cmp	r8, r1
 80087d6:	d11b      	bne.n	8008810 <lv_draw_mask_radius_init+0x2e0>
            cir_x[cir_size] = x_int[0];
 80087d8:	9902      	ldr	r1, [sp, #8]
 80087da:	53c1      	strh	r1, [r0, r7]
            cir_y[cir_size] = y_8th_cnt;
 80087dc:	f822 e007 	strh.w	lr, [r2, r7]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 80087e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087e2:	9f03      	ldr	r7, [sp, #12]
 80087e4:	440f      	add	r7, r1
 80087e6:	4639      	mov	r1, r7
 80087e8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80087ea:	4439      	add	r1, r7
 80087ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80087ee:	4439      	add	r1, r7
 80087f0:	6867      	ldr	r7, [r4, #4]
 80087f2:	f807 100c 	strb.w	r1, [r7, ip]
            c->cir_opa[cir_size] *= 16;
 80087f6:	6867      	ldr	r7, [r4, #4]
 80087f8:	f817 100c 	ldrb.w	r1, [r7, ip]
 80087fc:	0109      	lsls	r1, r1, #4
 80087fe:	f807 100c 	strb.w	r1, [r7, ip]
        y_8th_cnt++;
 8008802:	f10b 0b01 	add.w	fp, fp, #1
 8008806:	e757      	b.n	80086b8 <lv_draw_mask_radius_init+0x188>
 8008808:	0801f0af 	.word	0x0801f0af
 800880c:	2400128c 	.word	0x2400128c
            cir_x[cir_size] = x_int[0] - 1;
 8008810:	f108 31ff 	add.w	r1, r8, #4294967295
 8008814:	b209      	sxth	r1, r1
 8008816:	9104      	str	r1, [sp, #16]
        else if(x_int[0] != x_int[1]) {
 8008818:	9907      	ldr	r1, [sp, #28]
 800881a:	4588      	cmp	r8, r1
 800881c:	d023      	beq.n	8008866 <lv_draw_mask_radius_init+0x336>
            cir_x[cir_size] = x_int[0];
 800881e:	9902      	ldr	r1, [sp, #8]
 8008820:	53c1      	strh	r1, [r0, r7]
            cir_y[cir_size] = y_8th_cnt;
 8008822:	f822 e007 	strh.w	lr, [r2, r7]
            c->cir_opa[cir_size] = x_fract[0];
 8008826:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008828:	6861      	ldr	r1, [r4, #4]
 800882a:	f801 700c 	strb.w	r7, [r1, ip]
            c->cir_opa[cir_size] *= 16;
 800882e:	6867      	ldr	r7, [r4, #4]
 8008830:	f817 100c 	ldrb.w	r1, [r7, ip]
 8008834:	0109      	lsls	r1, r1, #4
 8008836:	f807 100c 	strb.w	r1, [r7, ip]
            cir_x[cir_size] = x_int[0] - 1;
 800883a:	9904      	ldr	r1, [sp, #16]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 800883c:	9f03      	ldr	r7, [sp, #12]
            cir_x[cir_size] = x_int[0] - 1;
 800883e:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 8008842:	990b      	ldr	r1, [sp, #44]	; 0x2c
            cir_y[cir_size] = y_8th_cnt;
 8008844:	f822 e013 	strh.w	lr, [r2, r3, lsl #1]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 8008848:	440f      	add	r7, r1
 800884a:	4639      	mov	r1, r7
 800884c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800884e:	3104      	adds	r1, #4
 8008850:	4439      	add	r1, r7
 8008852:	6867      	ldr	r7, [r4, #4]
 8008854:	54f9      	strb	r1, [r7, r3]
            c->cir_opa[cir_size] *= 16;
 8008856:	6867      	ldr	r7, [r4, #4]
 8008858:	5cf9      	ldrb	r1, [r7, r3]
 800885a:	0109      	lsls	r1, r1, #4
 800885c:	54f9      	strb	r1, [r7, r3]
            cir_size++;
 800885e:	9b05      	ldr	r3, [sp, #20]
 8008860:	3302      	adds	r3, #2
 8008862:	b21b      	sxth	r3, r3
 8008864:	e7cd      	b.n	8008802 <lv_draw_mask_radius_init+0x2d2>
        else if(x_int[0] != x_int[2]) {
 8008866:	9908      	ldr	r1, [sp, #32]
 8008868:	4588      	cmp	r8, r1
            cir_x[cir_size] = x_int[0];
 800886a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800886e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008870:	f820 8007 	strh.w	r8, [r0, r7]
            cir_y[cir_size] = y_8th_cnt;
 8008874:	f822 e007 	strh.w	lr, [r2, r7]
        else if(x_int[0] != x_int[2]) {
 8008878:	d018      	beq.n	80088ac <lv_draw_mask_radius_init+0x37c>
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 800887a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800887e:	6867      	ldr	r7, [r4, #4]
 8008880:	4441      	add	r1, r8
 8008882:	f807 100c 	strb.w	r1, [r7, ip]
            c->cir_opa[cir_size] *= 16;
 8008886:	6867      	ldr	r7, [r4, #4]
 8008888:	f817 100c 	ldrb.w	r1, [r7, ip]
 800888c:	0109      	lsls	r1, r1, #4
 800888e:	f807 100c 	strb.w	r1, [r7, ip]
            cir_x[cir_size] = x_int[0] - 1;
 8008892:	0059      	lsls	r1, r3, #1
 8008894:	9f04      	ldr	r7, [sp, #16]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 8008896:	f8dd c00c 	ldr.w	ip, [sp, #12]
            cir_x[cir_size] = x_int[0] - 1;
 800889a:	5247      	strh	r7, [r0, r1]
            cir_y[cir_size] = y_8th_cnt;
 800889c:	f822 e001 	strh.w	lr, [r2, r1]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 80088a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088a2:	6867      	ldr	r7, [r4, #4]
 80088a4:	448c      	add	ip, r1
 80088a6:	4661      	mov	r1, ip
 80088a8:	3108      	adds	r1, #8
 80088aa:	e7d3      	b.n	8008854 <lv_draw_mask_radius_init+0x324>
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 80088ac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80088ae:	eb01 0807 	add.w	r8, r1, r7
 80088b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088b4:	4488      	add	r8, r1
 80088b6:	6861      	ldr	r1, [r4, #4]
 80088b8:	f801 800c 	strb.w	r8, [r1, ip]
            c->cir_opa[cir_size] *= 16;
 80088bc:	6867      	ldr	r7, [r4, #4]
 80088be:	f817 100c 	ldrb.w	r1, [r7, ip]
 80088c2:	0109      	lsls	r1, r1, #4
 80088c4:	f807 100c 	strb.w	r1, [r7, ip]
            cir_x[cir_size] = x_int[0] - 1;
 80088c8:	0059      	lsls	r1, r3, #1
 80088ca:	9f04      	ldr	r7, [sp, #16]
 80088cc:	5247      	strh	r7, [r0, r1]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 80088ce:	9f03      	ldr	r7, [sp, #12]
            cir_y[cir_size] = y_8th_cnt;
 80088d0:	f822 e001 	strh.w	lr, [r2, r1]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 80088d4:	370c      	adds	r7, #12
 80088d6:	6861      	ldr	r1, [r4, #4]
 80088d8:	54cf      	strb	r7, [r1, r3]
            c->cir_opa[cir_size] *= 16;
 80088da:	e7bc      	b.n	8008856 <lv_draw_mask_radius_init+0x326>
        cir_x[cir_size] = cir_y[i];
 80088dc:	f932 7015 	ldrsh.w	r7, [r2, r5, lsl #1]
 80088e0:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
        cir_y[cir_size] = cir_x[i];
 80088e4:	f930 7015 	ldrsh.w	r7, [r0, r5, lsl #1]
 80088e8:	f822 7011 	strh.w	r7, [r2, r1, lsl #1]
        c->cir_opa[cir_size] = c->cir_opa[i];
 80088ec:	6867      	ldr	r7, [r4, #4]
 80088ee:	f817 c005 	ldrb.w	ip, [r7, r5]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 80088f2:	3d01      	subs	r5, #1
        c->cir_opa[cir_size] = c->cir_opa[i];
 80088f4:	f807 c001 	strb.w	ip, [r7, r1]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 80088f8:	3101      	adds	r1, #1
 80088fa:	b209      	sxth	r1, r1
 80088fc:	e734      	b.n	8008768 <lv_draw_mask_radius_init+0x238>
        c->opa_start_on_y[y] = i;
 80088fe:	68e5      	ldr	r5, [r4, #12]
 8008900:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 8008904:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
        c->x_start_on_y[y] = cir_x[i];
 8008908:	68a5      	ldr	r5, [r4, #8]
 800890a:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 800890e:	f825 701c 	strh.w	r7, [r5, ip, lsl #1]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8008912:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 8008916:	4565      	cmp	r5, ip
 8008918:	d101      	bne.n	800891e <lv_draw_mask_radius_init+0x3ee>
 800891a:	428b      	cmp	r3, r1
 800891c:	db01      	blt.n	8008922 <lv_draw_mask_radius_init+0x3f2>
        y++;
 800891e:	3601      	adds	r6, #1
 8008920:	e731      	b.n	8008786 <lv_draw_mask_radius_init+0x256>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 8008922:	68a7      	ldr	r7, [r4, #8]
 8008924:	f930 5013 	ldrsh.w	r5, [r0, r3, lsl #1]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8008928:	3301      	adds	r3, #1
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 800892a:	f837 800e 	ldrh.w	r8, [r7, lr]
 800892e:	4545      	cmp	r5, r8
 8008930:	bfa8      	it	ge
 8008932:	4645      	movge	r5, r8
 8008934:	f827 500e 	strh.w	r5, [r7, lr]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8008938:	e7eb      	b.n	8008912 <lv_draw_mask_radius_init+0x3e2>
 800893a:	bf00      	nop

0800893c <lv_draw_rect_dsc_init>:
    memset(dst, 0x00, len);
 800893c:	2238      	movs	r2, #56	; 0x38
 800893e:	2100      	movs	r1, #0
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 8008940:	b510      	push	{r4, lr}
 8008942:	4604      	mov	r4, r0
 8008944:	f011 feec 	bl	801a720 <memset>
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
    dsc->bg_color = lv_color_white();
    dsc->bg_grad.stops[0].color = lv_color_white();
    dsc->bg_grad.stops[1].color = lv_color_black();
    dsc->bg_grad.stops[1].frac = 0xFF;
 8008948:	23ff      	movs	r3, #255	; 0xff
    dsc->bg_grad.stops[1].color = lv_color_black();
 800894a:	2200      	movs	r2, #0
    dsc->bg_grad.stops_count = 2;
 800894c:	2102      	movs	r1, #2
    dsc->bg_grad.stops[1].frac = 0xFF;
 800894e:	7323      	strb	r3, [r4, #12]
    dsc->border_color = lv_color_black();
    dsc->shadow_color = lv_color_black();
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
    dsc->bg_opa = LV_OPA_COVER;
 8008950:	70e3      	strb	r3, [r4, #3]
    dsc->bg_img_opa = LV_OPA_COVER;
    dsc->outline_opa = LV_OPA_COVER;
 8008952:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_opa = LV_OPA_COVER;
    dsc->shadow_opa = LV_OPA_COVER;
 8008956:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->border_opa = LV_OPA_COVER;
 800895a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    dsc->bg_grad.stops[1].color = lv_color_black();
 800895c:	8162      	strh	r2, [r4, #10]
    dsc->border_opa = LV_OPA_COVER;
 800895e:	f423 537b 	bic.w	r3, r3, #16064	; 0x3ec0
    dsc->border_color = lv_color_black();
 8008962:	83e2      	strh	r2, [r4, #30]
    dsc->shadow_color = lv_color_black();
 8008964:	85a2      	strh	r2, [r4, #44]	; 0x2c
    dsc->border_opa = LV_OPA_COVER;
 8008966:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800896a:	4a06      	ldr	r2, [pc, #24]	; (8008984 <lv_draw_rect_dsc_init+0x48>)
    dsc->bg_grad.stops_count = 2;
 800896c:	73a1      	strb	r1, [r4, #14]
    dsc->border_opa = LV_OPA_COVER;
 800896e:	f443 53f7 	orr.w	r3, r3, #7904	; 0x1ee0
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 8008972:	6162      	str	r2, [r4, #20]
    dsc->bg_color = lv_color_white();
 8008974:	f04f 32ff 	mov.w	r2, #4294967295
    dsc->border_opa = LV_OPA_COVER;
 8008978:	f043 031f 	orr.w	r3, r3, #31
    dsc->bg_color = lv_color_white();
 800897c:	6062      	str	r2, [r4, #4]
    dsc->bg_img_opa = LV_OPA_COVER;
 800897e:	76a2      	strb	r2, [r4, #26]
    dsc->border_opa = LV_OPA_COVER;
 8008980:	8463      	strh	r3, [r4, #34]	; 0x22
    dsc->border_side = LV_BORDER_SIDE_FULL;
}
 8008982:	bd10      	pop	{r4, pc}
 8008984:	080293a0 	.word	0x080293a0

08008988 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 8008988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800898c:	4604      	mov	r4, r0
 800898e:	460f      	mov	r7, r1
 8008990:	4690      	mov	r8, r2
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 8008992:	4d13      	ldr	r5, [pc, #76]	; (80089e0 <_lv_img_cache_open+0x58>)
    uint32_t t_start  = lv_tick_get();
 8008994:	f01b fba5 	bl	80240e2 <lv_tick_get>
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 8008998:	4621      	mov	r1, r4
    uint32_t t_start  = lv_tick_get();
 800899a:	4606      	mov	r6, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800899c:	4643      	mov	r3, r8
 800899e:	463a      	mov	r2, r7
 80089a0:	4628      	mov	r0, r5
 80089a2:	f000 fafd 	bl	8008fa0 <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 80089a6:	4604      	mov	r4, r0
 80089a8:	b950      	cbnz	r0, 80089c0 <_lv_img_cache_open+0x38>
 80089aa:	4601      	mov	r1, r0
 80089ac:	222c      	movs	r2, #44	; 0x2c
 80089ae:	4628      	mov	r0, r5
 80089b0:	f011 feb6 	bl	801a720 <memset>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 80089b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        return NULL;
 80089b8:	4620      	mov	r0, r4
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 80089ba:	62ab      	str	r3, [r5, #40]	; 0x28
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
 80089bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cached_src->life = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	62ab      	str	r3, [r5, #40]	; 0x28
    if(cached_src->dec_dsc.time_to_open == 0) {
 80089c4:	69eb      	ldr	r3, [r5, #28]
 80089c6:	b10b      	cbz	r3, 80089cc <_lv_img_cache_open+0x44>
    return cached_src;
 80089c8:	4805      	ldr	r0, [pc, #20]	; (80089e0 <_lv_img_cache_open+0x58>)
 80089ca:	e7f7      	b.n	80089bc <_lv_img_cache_open+0x34>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 80089cc:	4630      	mov	r0, r6
 80089ce:	f01b fb90 	bl	80240f2 <lv_tick_elaps>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 80089d2:	b108      	cbz	r0, 80089d8 <_lv_img_cache_open+0x50>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 80089d4:	61e8      	str	r0, [r5, #28]
 80089d6:	e7f7      	b.n	80089c8 <_lv_img_cache_open+0x40>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 80089d8:	2301      	movs	r3, #1
 80089da:	61eb      	str	r3, [r5, #28]
 80089dc:	e7f4      	b.n	80089c8 <_lv_img_cache_open+0x40>
 80089de:	bf00      	nop
 80089e0:	24001380 	.word	0x24001380

080089e4 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 80089e4:	b530      	push	{r4, r5, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 80089e6:	4608      	mov	r0, r1
{
 80089e8:	b085      	sub	sp, #20
 80089ea:	460d      	mov	r5, r1
 80089ec:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 80089ee:	f015 ff25 	bl	801e83c <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 80089f2:	b9e0      	cbnz	r0, 8008a2e <lv_img_decoder_built_in_info+0x4a>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 80089f4:	782b      	ldrb	r3, [r5, #0]
 80089f6:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 80089fa:	3b04      	subs	r3, #4
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b10      	cmp	r3, #16
 8008a00:	d839      	bhi.n	8008a76 <lv_img_decoder_built_in_info+0x92>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 8008a02:	682b      	ldr	r3, [r5, #0]
 8008a04:	6822      	ldr	r2, [r4, #0]
 8008a06:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8008a0a:	f363 2294 	bfi	r2, r3, #10, #11
 8008a0e:	6022      	str	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8008a10:	886b      	ldrh	r3, [r5, #2]
 8008a12:	8862      	ldrh	r2, [r4, #2]
 8008a14:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8008a18:	f363 124f 	bfi	r2, r3, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8008a1c:	7823      	ldrb	r3, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8008a1e:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8008a20:	782a      	ldrb	r2, [r5, #0]
 8008a22:	f362 0304 	bfi	r3, r2, #0, #5
 8008a26:	7023      	strb	r3, [r4, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
 8008a28:	2001      	movs	r0, #1
}
 8008a2a:	b005      	add	sp, #20
 8008a2c:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 8008a2e:	2801      	cmp	r0, #1
 8008a30:	d123      	bne.n	8008a7a <lv_img_decoder_built_in_info+0x96>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8008a32:	4628      	mov	r0, r5
 8008a34:	f009 fdec 	bl	8012610 <lv_fs_get_ext>
 8008a38:	4914      	ldr	r1, [pc, #80]	; (8008a8c <lv_img_decoder_built_in_info+0xa8>)
 8008a3a:	f011 fe5a 	bl	801a6f2 <strcmp>
 8008a3e:	b9d0      	cbnz	r0, 8008a76 <lv_img_decoder_built_in_info+0x92>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 8008a40:	2202      	movs	r2, #2
 8008a42:	4629      	mov	r1, r5
 8008a44:	a801      	add	r0, sp, #4
 8008a46:	f01b ff7d 	bl	8024944 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 8008a4a:	b970      	cbnz	r0, 8008a6a <lv_img_decoder_built_in_info+0x86>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 8008a4c:	2204      	movs	r2, #4
 8008a4e:	466b      	mov	r3, sp
 8008a50:	4621      	mov	r1, r4
 8008a52:	eb0d 0002 	add.w	r0, sp, r2
 8008a56:	f01b fe71 	bl	802473c <lv_fs_read>
 8008a5a:	4605      	mov	r5, r0
            lv_fs_close(&f);
 8008a5c:	a801      	add	r0, sp, #4
 8008a5e:	f01b fe4e 	bl	80246fe <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8008a62:	b945      	cbnz	r5, 8008a76 <lv_img_decoder_built_in_info+0x92>
 8008a64:	9b00      	ldr	r3, [sp, #0]
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	d105      	bne.n	8008a76 <lv_img_decoder_built_in_info+0x92>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8008a6a:	7823      	ldrb	r3, [r4, #0]
 8008a6c:	331c      	adds	r3, #28
 8008a6e:	f003 031f 	and.w	r3, r3, #31
 8008a72:	2b10      	cmp	r3, #16
 8008a74:	d9d8      	bls.n	8008a28 <lv_img_decoder_built_in_info+0x44>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8008a76:	2000      	movs	r0, #0
 8008a78:	e7d7      	b.n	8008a2a <lv_img_decoder_built_in_info+0x46>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8008a7a:	2802      	cmp	r0, #2
 8008a7c:	d1fb      	bne.n	8008a76 <lv_img_decoder_built_in_info+0x92>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8008a84:	4b02      	ldr	r3, [pc, #8]	; (8008a90 <lv_img_decoder_built_in_info+0xac>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	e7cd      	b.n	8008a28 <lv_img_decoder_built_in_info+0x44>
 8008a8c:	0802aa1d 	.word	0x0802aa1d
 8008a90:	0020040b 	.word	0x0020040b

08008a94 <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8008a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_res_t res = LV_RES_INV;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008a98:	7d08      	ldrb	r0, [r1, #20]
{
 8008a9a:	461f      	mov	r7, r3
 8008a9c:	b089      	sub	sp, #36	; 0x24
 8008a9e:	460e      	mov	r6, r1
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008aa0:	f000 031e 	and.w	r3, r0, #30
{
 8008aa4:	4614      	mov	r4, r2
 8008aa6:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d003      	beq.n	8008ab6 <lv_img_decoder_built_in_read_line+0x22>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8008aae:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008ab2:	2b06      	cmp	r3, #6
 8008ab4:	d12d      	bne.n	8008b12 <lv_img_decoder_built_in_read_line+0x7e>
        /*For TRUE_COLOR images read line required only for files.
         *For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8008ab6:	7c33      	ldrb	r3, [r6, #16]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d003      	beq.n	8008ac4 <lv_img_decoder_built_in_read_line+0x30>
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
    if(res != LV_FS_RES_OK) {
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8008abc:	2000      	movs	r0, #0
}
 8008abe:	b009      	add	sp, #36	; 0x24
 8008ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008ac4:	f000 001f 	and.w	r0, r0, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8008ac8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008acc:	f7fe ffcc 	bl	8007a68 <lv_img_cf_get_px_size>
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8008ad0:	6971      	ldr	r1, [r6, #20]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008ad2:	4605      	mov	r5, r0
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 8008ad4:	2200      	movs	r2, #0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8008ad6:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8008ada:	fb17 4101 	smlabb	r1, r7, r1, r4
 8008ade:	4341      	muls	r1, r0
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 8008ae0:	4640      	mov	r0, r8
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8008ae2:	10c9      	asrs	r1, r1, #3
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 8008ae4:	3104      	adds	r1, #4
 8008ae6:	f01b feeb 	bl	80248c0 <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d1e6      	bne.n	8008abc <lv_img_decoder_built_in_read_line+0x28>
    }
    uint32_t btr = len * (px_size >> 3);
 8008aee:	f3c5 05c7 	ubfx	r5, r5, #3, #8
    uint32_t br  = 0;
 8008af2:	9004      	str	r0, [sp, #16]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 8008af4:	ab04      	add	r3, sp, #16
 8008af6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    uint32_t btr = len * (px_size >> 3);
 8008af8:	fb15 f509 	smulbb	r5, r5, r9
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 8008afc:	4640      	mov	r0, r8
 8008afe:	462a      	mov	r2, r5
 8008b00:	f01b fe1c 	bl	802473c <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d1d9      	bne.n	8008abc <lv_img_decoder_built_in_read_line+0x28>
 8008b08:	9804      	ldr	r0, [sp, #16]
 8008b0a:	1b43      	subs	r3, r0, r5
 8008b0c:	4258      	negs	r0, r3
 8008b0e:	4158      	adcs	r0, r3
 8008b10:	e7d5      	b.n	8008abe <lv_img_decoder_built_in_read_line+0x2a>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8008b12:	f1a3 020b 	sub.w	r2, r3, #11
 8008b16:	2a03      	cmp	r2, #3
 8008b18:	f200 80bb 	bhi.w	8008c92 <lv_img_decoder_built_in_read_line+0x1fe>
}

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8008b1c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8008b20:	aa04      	add	r2, sp, #16
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8008b22:	f8ad 3008 	strh.w	r3, [sp, #8]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8008b26:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 8008b2a:	4690      	mov	r8, r2
 8008b2c:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 8008b30:	9303      	str	r3, [sp, #12]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8008b32:	4ba6      	ldr	r3, [pc, #664]	; (8008dcc <lv_img_decoder_built_in_read_line+0x338>)
 8008b34:	f103 0c10 	add.w	ip, r3, #16
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8008b40:	4615      	mov	r5, r2
 8008b42:	4563      	cmp	r3, ip
 8008b44:	c503      	stmia	r5!, {r0, r1}
 8008b46:	462a      	mov	r2, r5
 8008b48:	d1f6      	bne.n	8008b38 <lv_img_decoder_built_in_read_line+0xa4>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 8008b4a:	8931      	ldrh	r1, [r6, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8008b50:	0a0d      	lsrs	r5, r1, #8
    for(i = 0; i < len; i++) {
 8008b52:	b210      	sxth	r0, r2
 8008b54:	3303      	adds	r3, #3
 8008b56:	4581      	cmp	r9, r0
 8008b58:	dc14      	bgt.n	8008b84 <lv_img_decoder_built_in_read_line+0xf0>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8008b5a:	7d30      	ldrb	r0, [r6, #20]
 8008b5c:	f000 001f 	and.w	r0, r0, #31
 8008b60:	f7fe ff82 	bl	8007a68 <lv_img_cf_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8008b64:	2301      	movs	r3, #1
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8008b66:	4682      	mov	sl, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8008b68:	4083      	lsls	r3, r0
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	9300      	str	r3, [sp, #0]

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 8008b70:	7d33      	ldrb	r3, [r6, #20]
 8008b72:	f003 031f 	and.w	r3, r3, #31
 8008b76:	3b0b      	subs	r3, #11
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d856      	bhi.n	8008c2a <lv_img_decoder_built_in_read_line+0x196>
 8008b7c:	e8df f003 	tbb	[pc, r3]
 8008b80:	4c3e2e08 	.word	0x4c3e2e08
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8008b84:	3201      	adds	r2, #1
 8008b86:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8008b8a:	f803 5c02 	strb.w	r5, [r3, #-2]
    for(i = 0; i < len; i++) {
 8008b8e:	e7e0      	b.n	8008b52 <lv_img_decoder_built_in_read_line+0xbe>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008b90:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 8008b92:	10e1      	asrs	r1, r4, #3
            pos = 7 - (x & 0x7);
 8008b94:	43e4      	mvns	r4, r4
            opa_table = alpha1_opa_table;
 8008b96:	f10d 0808 	add.w	r8, sp, #8
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008b9a:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 7 - (x & 0x7);
 8008b9e:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008ba2:	3507      	adds	r5, #7
 8008ba4:	10eb      	asrs	r3, r5, #3
 8008ba6:	461d      	mov	r5, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 8008ba8:	fb03 1107 	mla	r1, r3, r7, r1
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8008bac:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8008bae:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 8008bb2:	9101      	str	r1, [sp, #4]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8008bb4:	f009 fdcc 	bl	8012750 <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 8008bb8:	4607      	mov	r7, r0
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	f43f af7e 	beq.w	8008abc <lv_img_decoder_built_in_read_line+0x28>

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8008bc0:	7c33      	ldrb	r3, [r6, #16]
 8008bc2:	9901      	ldr	r1, [sp, #4]
 8008bc4:	bbab      	cbnz	r3, 8008c32 <lv_img_decoder_built_in_read_line+0x19e>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 8008bc6:	6873      	ldr	r3, [r6, #4]
 8008bc8:	689a      	ldr	r2, [r3, #8]
 8008bca:	440a      	add	r2, r1
    }

    for(i = 0; i < len; i++) {
        uint8_t val_act = (*data_tmp >> pos) & mask;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8008bcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 8008bce:	f1ca 0008 	rsb	r0, sl, #8
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8008bd2:	2100      	movs	r1, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8008bd4:	1c9d      	adds	r5, r3, #2
            pos = 8 - px_size;
 8008bd6:	fa4f fe80 	sxtb.w	lr, r0
 8008bda:	e052      	b.n	8008c82 <lv_img_decoder_built_in_read_line+0x1ee>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008bdc:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 8008bde:	10a1      	asrs	r1, r4, #2
            pos = 6 - (x & 0x3) * 2;
 8008be0:	43e4      	mvns	r4, r4
            opa_table = alpha2_opa_table;
 8008be2:	f10d 080c 	add.w	r8, sp, #12
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008be6:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 6 - (x & 0x3) * 2;
 8008bea:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008bee:	3503      	adds	r5, #3
            pos = 6 - (x & 0x3) * 2;
 8008bf0:	0064      	lsls	r4, r4, #1
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008bf2:	10ab      	asrs	r3, r5, #2
 8008bf4:	461d      	mov	r5, r3
            ofs += w * y + (x >> 2); /*First pixel*/
 8008bf6:	fb03 1107 	mla	r1, r3, r7, r1
            break;
 8008bfa:	e7d7      	b.n	8008bac <lv_img_decoder_built_in_read_line+0x118>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008bfc:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 8008bfe:	1061      	asrs	r1, r4, #1
            pos = 4 - (x & 0x1) * 4;
 8008c00:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008c02:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 4 - (x & 0x1) * 4;
 8008c06:	f004 0401 	and.w	r4, r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008c0a:	3501      	adds	r5, #1
            pos = 4 - (x & 0x1) * 4;
 8008c0c:	00a4      	lsls	r4, r4, #2
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008c0e:	106b      	asrs	r3, r5, #1
 8008c10:	461d      	mov	r5, r3
            ofs += w * y + (x >> 1); /*First pixel*/
 8008c12:	fb03 1107 	mla	r1, r3, r7, r1
            pos = 4 - (x & 0x1) * 4;
 8008c16:	e7c9      	b.n	8008bac <lv_img_decoder_built_in_read_line+0x118>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8008c18:	6975      	ldr	r5, [r6, #20]
 8008c1a:	f3c5 218a 	ubfx	r1, r5, #10, #11
 8008c1e:	460d      	mov	r5, r1
            ofs += w * y + x;  /*First pixel*/
 8008c20:	fb17 4101 	smlabb	r1, r7, r1, r4
            pos = 0;
 8008c24:	2400      	movs	r4, #0
    switch(dsc->header.cf) {
 8008c26:	46a0      	mov	r8, r4
 8008c28:	e7c0      	b.n	8008bac <lv_img_decoder_built_in_read_line+0x118>
 8008c2a:	2400      	movs	r4, #0
 8008c2c:	4621      	mov	r1, r4
 8008c2e:	4625      	mov	r5, r4
 8008c30:	e7f9      	b.n	8008c26 <lv_img_decoder_built_in_read_line+0x192>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8008c32:	2200      	movs	r2, #0
 8008c34:	3104      	adds	r1, #4
 8008c36:	4658      	mov	r0, fp
 8008c38:	f01b fe42 	bl	80248c0 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8008c3c:	462a      	mov	r2, r5
 8008c3e:	2300      	movs	r3, #0
 8008c40:	4639      	mov	r1, r7
 8008c42:	4658      	mov	r0, fp
 8008c44:	f01b fd7a 	bl	802473c <lv_fs_read>
 8008c48:	463a      	mov	r2, r7
 8008c4a:	e7bf      	b.n	8008bcc <lv_img_decoder_built_in_read_line+0x138>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008c4c:	7813      	ldrb	r3, [r2, #0]
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8008c4e:	f896 c014 	ldrb.w	ip, [r6, #20]
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008c52:	4123      	asrs	r3, r4
 8008c54:	9800      	ldr	r0, [sp, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8008c56:	f00c 0c1f 	and.w	ip, ip, #31
        pos -= px_size;
 8008c5a:	eba4 040a 	sub.w	r4, r4, sl
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008c5e:	4003      	ands	r3, r0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8008c60:	f1bc 0f0e 	cmp.w	ip, #14
        pos -= px_size;
 8008c64:	b264      	sxtb	r4, r4
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008c66:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8008c68:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8008c6c:	f101 0101 	add.w	r1, r1, #1
 8008c70:	bf18      	it	ne
 8008c72:	f818 3003 	ldrbne.w	r3, [r8, r3]
        if(pos < 0) {
 8008c76:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 8008c78:	bfbc      	itt	lt
 8008c7a:	4674      	movlt	r4, lr
            data_tmp++;
 8008c7c:	3201      	addlt	r2, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8008c7e:	f805 300c 	strb.w	r3, [r5, ip]
    for(i = 0; i < len; i++) {
 8008c82:	b20b      	sxth	r3, r1
 8008c84:	4599      	cmp	r9, r3
 8008c86:	dce1      	bgt.n	8008c4c <lv_img_decoder_built_in_read_line+0x1b8>
        if(pos < 0) {
            pos = 8 - px_size;
            data_tmp++;
        }
    }
    lv_mem_buf_release(fs_buf);
 8008c88:	4638      	mov	r0, r7
 8008c8a:	f009 fdab 	bl	80127e4 <lv_mem_buf_release>
    return LV_RES_OK;
 8008c8e:	2001      	movs	r0, #1
 8008c90:	e715      	b.n	8008abe <lv_img_decoder_built_in_read_line+0x2a>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8008c92:	3b07      	subs	r3, #7
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	f63f af11 	bhi.w	8008abc <lv_img_decoder_built_in_read_line+0x28>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008c9a:	f000 001f 	and.w	r0, r0, #31
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8008c9e:	f04f 0801 	mov.w	r8, #1
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008ca2:	f7fe fee1 	bl	8007a68 <lv_img_cf_get_px_size>
    switch(dsc->header.cf) {
 8008ca6:	7d33      	ldrb	r3, [r6, #20]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8008ca8:	fa08 f800 	lsl.w	r8, r8, r0
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008cac:	4682      	mov	sl, r0
    switch(dsc->header.cf) {
 8008cae:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8008cb2:	f108 38ff 	add.w	r8, r8, #4294967295
    switch(dsc->header.cf) {
 8008cb6:	3b07      	subs	r3, #7
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8008cb8:	fa1f f888 	uxth.w	r8, r8
    switch(dsc->header.cf) {
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d851      	bhi.n	8008d64 <lv_img_decoder_built_in_read_line+0x2d0>
 8008cc0:	e8df f003 	tbb	[pc, r3]
 8008cc4:	46362602 	.word	0x46362602
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008cc8:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 8008cca:	10e3      	asrs	r3, r4, #3
            pos = 7 - (x & 0x7);
 8008ccc:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008cce:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 7 - (x & 0x7);
 8008cd2:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008cd6:	3507      	adds	r5, #7
 8008cd8:	10ea      	asrs	r2, r5, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 8008cda:	fb02 3307 	mla	r3, r2, r7, r3
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008cde:	4615      	mov	r5, r2
            ofs += 8;                /*Skip the palette*/
 8008ce0:	f103 0108 	add.w	r1, r3, #8
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8008ce4:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8008ce6:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 8008cea:	9100      	str	r1, [sp, #0]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8008cec:	f009 fd30 	bl	8012750 <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	f43f aee2 	beq.w	8008abc <lv_img_decoder_built_in_read_line+0x28>
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8008cf8:	7c33      	ldrb	r3, [r6, #16]
 8008cfa:	9900      	ldr	r1, [sp, #0]
 8008cfc:	bbb3      	cbnz	r3, 8008d6c <lv_img_decoder_built_in_read_line+0x2d8>
        data_tmp                     = img_dsc->data + ofs;
 8008cfe:	6873      	ldr	r3, [r6, #4]
 8008d00:	689a      	ldr	r2, [r3, #8]
 8008d02:	440a      	add	r2, r1
            pos = 8 - px_size;
 8008d04:	f1ca 0608 	rsb	r6, sl, #8
 8008d08:	9913      	ldr	r1, [sp, #76]	; 0x4c
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8008d0a:	2000      	movs	r0, #0
            pos = 8 - px_size;
 8008d0c:	b276      	sxtb	r6, r6
 8008d0e:	e058      	b.n	8008dc2 <lv_img_decoder_built_in_read_line+0x32e>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008d10:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 8008d12:	10a3      	asrs	r3, r4, #2
            pos = 6 - (x & 0x3) * 2;
 8008d14:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008d16:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 6 - (x & 0x3) * 2;
 8008d1a:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008d1e:	3503      	adds	r5, #3
            pos = 6 - (x & 0x3) * 2;
 8008d20:	0064      	lsls	r4, r4, #1
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008d22:	10aa      	asrs	r2, r5, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 8008d24:	fb02 3307 	mla	r3, r2, r7, r3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8008d28:	4615      	mov	r5, r2
            ofs += 16;               /*Skip the palette*/
 8008d2a:	f103 0110 	add.w	r1, r3, #16
            break;
 8008d2e:	e7d9      	b.n	8008ce4 <lv_img_decoder_built_in_read_line+0x250>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008d30:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 8008d32:	1063      	asrs	r3, r4, #1
            pos = 4 - (x & 0x1) * 4;
 8008d34:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008d36:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 4 - (x & 0x1) * 4;
 8008d3a:	f004 0401 	and.w	r4, r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008d3e:	3501      	adds	r5, #1
            pos = 4 - (x & 0x1) * 4;
 8008d40:	00a4      	lsls	r4, r4, #2
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008d42:	106a      	asrs	r2, r5, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 8008d44:	fb02 3307 	mla	r3, r2, r7, r3
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8008d48:	4615      	mov	r5, r2
            ofs += 64;               /*Skip the palette*/
 8008d4a:	f103 0140 	add.w	r1, r3, #64	; 0x40
            pos = 4 - (x & 0x1) * 4;
 8008d4e:	e7c9      	b.n	8008ce4 <lv_img_decoder_built_in_read_line+0x250>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8008d50:	6975      	ldr	r5, [r6, #20]
 8008d52:	f3c5 238a 	ubfx	r3, r5, #10, #11
            ofs += w * y + x;  /*First pixel*/
 8008d56:	fb17 4703 	smlabb	r7, r7, r3, r4
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8008d5a:	461d      	mov	r5, r3
            pos = 0;
 8008d5c:	2400      	movs	r4, #0
            ofs += 1024;       /*Skip the palette*/
 8008d5e:	f507 6180 	add.w	r1, r7, #1024	; 0x400
            break;
 8008d62:	e7bf      	b.n	8008ce4 <lv_img_decoder_built_in_read_line+0x250>
    switch(dsc->header.cf) {
 8008d64:	2100      	movs	r1, #0
 8008d66:	460c      	mov	r4, r1
 8008d68:	460d      	mov	r5, r1
 8008d6a:	e7bb      	b.n	8008ce4 <lv_img_decoder_built_in_read_line+0x250>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	3104      	adds	r1, #4
 8008d70:	4658      	mov	r0, fp
 8008d72:	f01b fda5 	bl	80248c0 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8008d76:	462a      	mov	r2, r5
 8008d78:	2300      	movs	r3, #0
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	4658      	mov	r0, fp
 8008d7e:	f01b fcdd 	bl	802473c <lv_fs_read>
 8008d82:	463a      	mov	r2, r7
 8008d84:	e7be      	b.n	8008d04 <lv_img_decoder_built_in_read_line+0x270>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008d86:	7813      	ldrb	r3, [r2, #0]
 8008d88:	3001      	adds	r0, #1
        lv_color_t color = user_data->palette[val_act];
 8008d8a:	f8db 500c 	ldr.w	r5, [fp, #12]
 8008d8e:	3103      	adds	r1, #3
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008d90:	4123      	asrs	r3, r4
        pos -= px_size;
 8008d92:	eba4 040a 	sub.w	r4, r4, sl
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008d96:	ea03 0308 	and.w	r3, r3, r8
        pos -= px_size;
 8008d9a:	b264      	sxtb	r4, r4
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8008d9c:	fa5f fc83 	uxtb.w	ip, r3
        if(pos < 0) {
 8008da0:	2c00      	cmp	r4, #0
        lv_color_t color = user_data->palette[val_act];
 8008da2:	f835 301c 	ldrh.w	r3, [r5, ip, lsl #1]
            pos = 8 - px_size;
 8008da6:	bfbc      	itt	lt
 8008da8:	4634      	movlt	r4, r6
            data_tmp++;
 8008daa:	3201      	addlt	r2, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 8008dac:	f801 3c03 	strb.w	r3, [r1, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 8008db0:	0a1b      	lsrs	r3, r3, #8
 8008db2:	f801 3c02 	strb.w	r3, [r1, #-2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 8008db6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008dba:	f813 300c 	ldrb.w	r3, [r3, ip]
 8008dbe:	f801 3c01 	strb.w	r3, [r1, #-1]
    for(i = 0; i < len; i++) {
 8008dc2:	b203      	sxth	r3, r0
 8008dc4:	4599      	cmp	r9, r3
 8008dc6:	dcde      	bgt.n	8008d86 <lv_img_decoder_built_in_read_line+0x2f2>
 8008dc8:	e75e      	b.n	8008c88 <lv_img_decoder_built_in_read_line+0x1f4>
 8008dca:	bf00      	nop
 8008dcc:	08028a3c 	.word	0x08028a3c

08008dd0 <lv_img_decoder_built_in_open>:
{
 8008dd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8008dd4:	7c0b      	ldrb	r3, [r1, #16]
{
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d12f      	bne.n	8008e3e <lv_img_decoder_built_in_open+0x6e>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8008dde:	6848      	ldr	r0, [r1, #4]
 8008de0:	f009 fc16 	bl	8012610 <lv_fs_get_ext>
 8008de4:	4955      	ldr	r1, [pc, #340]	; (8008f3c <lv_img_decoder_built_in_open+0x16c>)
 8008de6:	f011 fc84 	bl	801a6f2 <strcmp>
 8008dea:	bb70      	cbnz	r0, 8008e4a <lv_img_decoder_built_in_open+0x7a>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8008dec:	2202      	movs	r2, #2
 8008dee:	6861      	ldr	r1, [r4, #4]
 8008df0:	a801      	add	r0, sp, #4
 8008df2:	f01b fda7 	bl	8024944 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 8008df6:	bb40      	cbnz	r0, 8008e4a <lv_img_decoder_built_in_open+0x7a>
        if(dsc->user_data == NULL) {
 8008df8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008dfa:	b94d      	cbnz	r5, 8008e10 <lv_img_decoder_built_in_open+0x40>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8008dfc:	2014      	movs	r0, #20
 8008dfe:	f009 fc57 	bl	80126b0 <lv_mem_alloc>
 8008e02:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8008e04:	b900      	cbnz	r0, 8008e08 <lv_img_decoder_built_in_open+0x38>
 8008e06:	e7fe      	b.n	8008e06 <lv_img_decoder_built_in_open+0x36>
 8008e08:	2214      	movs	r2, #20
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	f011 fc88 	bl	801a720 <memset>
    return memcpy(dst, src, len);
 8008e10:	220c      	movs	r2, #12
 8008e12:	a901      	add	r1, sp, #4
 8008e14:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e16:	f011 fc78 	bl	801a70a <memcpy>
    lv_img_cf_t cf = dsc->header.cf;
 8008e1a:	7d23      	ldrb	r3, [r4, #20]
 8008e1c:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008e20:	1f03      	subs	r3, r0, #4
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d915      	bls.n	8008e52 <lv_img_decoder_built_in_open+0x82>
 8008e26:	1fc3      	subs	r3, r0, #7
 8008e28:	2b0d      	cmp	r3, #13
 8008e2a:	d83c      	bhi.n	8008ea6 <lv_img_decoder_built_in_open+0xd6>
 8008e2c:	e8df f003 	tbb	[pc, r3]
 8008e30:	18181818 	.word	0x18181818
 8008e34:	11161616 	.word	0x11161616
 8008e38:	3b3b3b3b 	.word	0x3b3b3b3b
 8008e3c:	113b      	.short	0x113b
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1eb      	bne.n	8008e1a <lv_img_decoder_built_in_open+0x4a>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8008e42:	684b      	ldr	r3, [r1, #4]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e7      	bne.n	8008e1a <lv_img_decoder_built_in_open+0x4a>
            for(i = 0; i < palette_size; i++) {
 8008e4a:	2000      	movs	r0, #0
}
 8008e4c:	b004      	add	sp, #16
 8008e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8008e52:	7c23      	ldrb	r3, [r4, #16]
 8008e54:	b913      	cbnz	r3, 8008e5c <lv_img_decoder_built_in_open+0x8c>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8008e56:	6863      	ldr	r3, [r4, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	61a3      	str	r3, [r4, #24]
            return LV_RES_OK;
 8008e5c:	2001      	movs	r0, #1
 8008e5e:	e7f5      	b.n	8008e4c <lv_img_decoder_built_in_open+0x7c>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8008e60:	f7fe fe02 	bl	8007a68 <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
 8008e64:	6a65      	ldr	r5, [r4, #36]	; 0x24
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8008e66:	4680      	mov	r8, r0
        if(dsc->user_data == NULL) {
 8008e68:	b94d      	cbnz	r5, 8008e7e <lv_img_decoder_built_in_open+0xae>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8008e6a:	2014      	movs	r0, #20
 8008e6c:	f009 fc20 	bl	80126b0 <lv_mem_alloc>
 8008e70:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8008e72:	b900      	cbnz	r0, 8008e76 <lv_img_decoder_built_in_open+0xa6>
 8008e74:	e7fe      	b.n	8008e74 <lv_img_decoder_built_in_open+0xa4>
    memset(dst, 0x00, len);
 8008e76:	2214      	movs	r2, #20
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f011 fc51 	bl	801a720 <memset>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8008e7e:	2002      	movs	r0, #2
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8008e80:	6a65      	ldr	r5, [r4, #36]	; 0x24
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8008e82:	fa00 f008 	lsl.w	r0, r0, r8
 8008e86:	f009 fc13 	bl	80126b0 <lv_mem_alloc>
 8008e8a:	60e8      	str	r0, [r5, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 8008e8c:	b900      	cbnz	r0, 8008e90 <lv_img_decoder_built_in_open+0xc0>
 8008e8e:	e7fe      	b.n	8008e8e <lv_img_decoder_built_in_open+0xbe>
        uint32_t palette_size = 1 << px_size;
 8008e90:	2601      	movs	r6, #1
 8008e92:	fa06 f608 	lsl.w	r6, r6, r8
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 8008e96:	4630      	mov	r0, r6
 8008e98:	f009 fc0a 	bl	80126b0 <lv_mem_alloc>
 8008e9c:	6128      	str	r0, [r5, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 8008e9e:	b900      	cbnz	r0, 8008ea2 <lv_img_decoder_built_in_open+0xd2>
 8008ea0:	e7fe      	b.n	8008ea0 <lv_img_decoder_built_in_open+0xd0>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 8008ea2:	68eb      	ldr	r3, [r5, #12]
 8008ea4:	b923      	cbnz	r3, 8008eb0 <lv_img_decoder_built_in_open+0xe0>
        lv_img_decoder_built_in_close(decoder, dsc);
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4638      	mov	r0, r7
 8008eaa:	f016 fb1f 	bl	801f4ec <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 8008eae:	e7cc      	b.n	8008e4a <lv_img_decoder_built_in_open+0x7a>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8008eb0:	7c23      	ldrb	r3, [r4, #16]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d124      	bne.n	8008f00 <lv_img_decoder_built_in_open+0x130>
            for(i = 0; i < palette_size; i++) {
 8008eb6:	2400      	movs	r4, #0
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2104      	movs	r1, #4
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	f01b fcff 	bl	80248c0 <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 8008ec2:	42b4      	cmp	r4, r6
 8008ec4:	d0ca      	beq.n	8008e5c <lv_img_decoder_built_in_open+0x8c>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8008ec6:	2204      	movs	r2, #4
 8008ec8:	2300      	movs	r3, #0
 8008eca:	4628      	mov	r0, r5
 8008ecc:	eb0d 0102 	add.w	r1, sp, r2
 8008ed0:	f01b fc34 	bl	802473c <lv_fs_read>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8008ed4:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8008ed8:	f89d 3004 	ldrb.w	r3, [sp, #4]
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8008edc:	0889      	lsrs	r1, r1, #2
 8008ede:	68ea      	ldr	r2, [r5, #12]
 8008ee0:	08db      	lsrs	r3, r3, #3
 8008ee2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8008ee6:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8008eea:	08c9      	lsrs	r1, r1, #3
 8008eec:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 8008ef0:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
 8008ef4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008ef8:	692b      	ldr	r3, [r5, #16]
 8008efa:	551a      	strb	r2, [r3, r4]
            for(i = 0; i < palette_size; i++) {
 8008efc:	3401      	adds	r4, #1
 8008efe:	e7e0      	b.n	8008ec2 <lv_img_decoder_built_in_open+0xf2>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8008f00:	6863      	ldr	r3, [r4, #4]
            for(i = 0; i < palette_size; i++) {
 8008f02:	2000      	movs	r0, #0
 8008f04:	689a      	ldr	r2, [r3, #8]
 8008f06:	42b0      	cmp	r0, r6
 8008f08:	f102 0204 	add.w	r2, r2, #4
 8008f0c:	d0a6      	beq.n	8008e5c <lv_img_decoder_built_in_open+0x8c>
 8008f0e:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 8008f12:	f812 3c04 	ldrb.w	r3, [r2, #-4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8008f16:	08a4      	lsrs	r4, r4, #2
 8008f18:	68e9      	ldr	r1, [r5, #12]
 8008f1a:	08db      	lsrs	r3, r3, #3
 8008f1c:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8008f20:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8008f24:	08e4      	lsrs	r4, r4, #3
 8008f26:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 8008f2a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 8008f2e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008f32:	692b      	ldr	r3, [r5, #16]
 8008f34:	5419      	strb	r1, [r3, r0]
            for(i = 0; i < palette_size; i++) {
 8008f36:	3001      	adds	r0, #1
 8008f38:	e7e5      	b.n	8008f06 <lv_img_decoder_built_in_open+0x136>
 8008f3a:	bf00      	nop
 8008f3c:	0802aa1d 	.word	0x0802aa1d

08008f40 <lv_img_decoder_get_info>:
{
 8008f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f44:	460f      	mov	r7, r1
 8008f46:	4606      	mov	r6, r0
 8008f48:	2204      	movs	r2, #4
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f011 fbe7 	bl	801a720 <memset>
    if(src == NULL) return LV_RES_INV;
 8008f52:	b91e      	cbnz	r6, 8008f5c <lv_img_decoder_get_info+0x1c>
 8008f54:	2500      	movs	r5, #0
}
 8008f56:	4628      	mov	r0, r5
 8008f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	f015 fc6d 	bl	801e83c <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8008f62:	b910      	cbnz	r0, 8008f6a <lv_img_decoder_get_info+0x2a>
        if(img_dsc->data == NULL) return LV_RES_INV;
 8008f64:	68b3      	ldr	r3, [r6, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d0f4      	beq.n	8008f54 <lv_img_decoder_get_info+0x14>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8008f6a:	480c      	ldr	r0, [pc, #48]	; (8008f9c <lv_img_decoder_get_info+0x5c>)
    lv_res_t res = LV_RES_INV;
 8008f6c:	2500      	movs	r5, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8008f6e:	f01b fdad 	bl	8024acc <_lv_ll_get_head>
 8008f72:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8008f9c <lv_img_decoder_get_info+0x5c>
 8008f76:	4604      	mov	r4, r0
 8008f78:	2c00      	cmp	r4, #0
 8008f7a:	d0ec      	beq.n	8008f56 <lv_img_decoder_get_info+0x16>
        if(d->info_cb) {
 8008f7c:	6823      	ldr	r3, [r4, #0]
 8008f7e:	b133      	cbz	r3, 8008f8e <lv_img_decoder_get_info+0x4e>
            res = d->info_cb(d, src, header);
 8008f80:	463a      	mov	r2, r7
 8008f82:	4631      	mov	r1, r6
 8008f84:	4620      	mov	r0, r4
 8008f86:	4798      	blx	r3
            if(res == LV_RES_OK) break;
 8008f88:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 8008f8a:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
 8008f8c:	d0e3      	beq.n	8008f56 <lv_img_decoder_get_info+0x16>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8008f8e:	4621      	mov	r1, r4
 8008f90:	4640      	mov	r0, r8
 8008f92:	f01b fda1 	bl	8024ad8 <_lv_ll_get_next>
 8008f96:	4604      	mov	r4, r0
 8008f98:	e7ee      	b.n	8008f78 <lv_img_decoder_get_info+0x38>
 8008f9a:	bf00      	nop
 8008f9c:	240013bc 	.word	0x240013bc

08008fa0 <lv_img_decoder_open>:
{
 8008fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa4:	460f      	mov	r7, r1
 8008fa6:	4616      	mov	r6, r2
 8008fa8:	2100      	movs	r1, #0
 8008faa:	2228      	movs	r2, #40	; 0x28
 8008fac:	4604      	mov	r4, r0
 8008fae:	461d      	mov	r5, r3
 8008fb0:	f011 fbb6 	bl	801a720 <memset>
    if(src == NULL) return LV_RES_INV;
 8008fb4:	b91f      	cbnz	r7, 8008fbe <lv_img_decoder_open+0x1e>
 8008fb6:	2600      	movs	r6, #0
}
 8008fb8:	4630      	mov	r0, r6
 8008fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	f015 fc3c 	bl	801e83c <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8008fc4:	b938      	cbnz	r0, 8008fd6 <lv_img_decoder_open+0x36>
        if(img_dsc->data == NULL) return LV_RES_INV;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d0f4      	beq.n	8008fb6 <lv_img_decoder_open+0x16>
    dsc->color    = color;
 8008fcc:	8126      	strh	r6, [r4, #8]
    dsc->src_type = src_type;
 8008fce:	7420      	strb	r0, [r4, #16]
    dsc->frame_id = frame_id;
 8008fd0:	60e5      	str	r5, [r4, #12]
        dsc->src = src;
 8008fd2:	6067      	str	r7, [r4, #4]
 8008fd4:	e010      	b.n	8008ff8 <lv_img_decoder_open+0x58>
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8008fd6:	2801      	cmp	r0, #1
    dsc->color    = color;
 8008fd8:	8126      	strh	r6, [r4, #8]
    dsc->src_type = src_type;
 8008fda:	7420      	strb	r0, [r4, #16]
    dsc->frame_id = frame_id;
 8008fdc:	60e5      	str	r5, [r4, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8008fde:	d1f8      	bne.n	8008fd2 <lv_img_decoder_open+0x32>
        size_t fnlen = strlen(src);
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	f011 fb7f 	bl	801a6e4 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	f009 fb62 	bl	80126b0 <lv_mem_alloc>
 8008fec:	6060      	str	r0, [r4, #4]
        LV_ASSERT_MALLOC(dsc->src);
 8008fee:	b900      	cbnz	r0, 8008ff2 <lv_img_decoder_open+0x52>
 8008ff0:	e7fe      	b.n	8008ff0 <lv_img_decoder_open+0x50>
        strcpy((char *)dsc->src, src);
 8008ff2:	4639      	mov	r1, r7
 8008ff4:	f011 fb6c 	bl	801a6d0 <strcpy>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8008ff8:	4819      	ldr	r0, [pc, #100]	; (8009060 <lv_img_decoder_open+0xc0>)
    lv_res_t res = LV_RES_INV;
 8008ffa:	2600      	movs	r6, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8008ffc:	f01b fd66 	bl	8024acc <_lv_ll_get_head>
        res = decoder->info_cb(decoder, src, &dsc->header);
 8009000:	f104 0814 	add.w	r8, r4, #20
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8009004:	4605      	mov	r5, r0
 8009006:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8009060 <lv_img_decoder_open+0xc0>
 800900a:	b935      	cbnz	r5, 800901a <lv_img_decoder_open+0x7a>
    if(dsc->src_type == LV_IMG_SRC_FILE)
 800900c:	7c23      	ldrb	r3, [r4, #16]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d1d2      	bne.n	8008fb8 <lv_img_decoder_open+0x18>
        lv_mem_free((void *)dsc->src);
 8009012:	6860      	ldr	r0, [r4, #4]
 8009014:	f009 fb6a 	bl	80126ec <lv_mem_free>
 8009018:	e7ce      	b.n	8008fb8 <lv_img_decoder_open+0x18>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 800901a:	682b      	ldr	r3, [r5, #0]
 800901c:	b1d3      	cbz	r3, 8009054 <lv_img_decoder_open+0xb4>
 800901e:	686a      	ldr	r2, [r5, #4]
 8009020:	b1c2      	cbz	r2, 8009054 <lv_img_decoder_open+0xb4>
        res = decoder->info_cb(decoder, src, &dsc->header);
 8009022:	4642      	mov	r2, r8
 8009024:	4639      	mov	r1, r7
 8009026:	4628      	mov	r0, r5
 8009028:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 800902a:	2801      	cmp	r0, #1
        res = decoder->info_cb(decoder, src, &dsc->header);
 800902c:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
 800902e:	d111      	bne.n	8009054 <lv_img_decoder_open+0xb4>
        dsc->decoder = decoder;
 8009030:	6025      	str	r5, [r4, #0]
        res = decoder->open_cb(decoder, dsc);
 8009032:	4621      	mov	r1, r4
 8009034:	686b      	ldr	r3, [r5, #4]
 8009036:	4628      	mov	r0, r5
 8009038:	4798      	blx	r3
        if(res == LV_RES_OK) return res;
 800903a:	2801      	cmp	r0, #1
        res = decoder->open_cb(decoder, dsc);
 800903c:	4606      	mov	r6, r0
        if(res == LV_RES_OK) return res;
 800903e:	d0bb      	beq.n	8008fb8 <lv_img_decoder_open+0x18>
 8009040:	2204      	movs	r2, #4
 8009042:	2100      	movs	r1, #0
 8009044:	4640      	mov	r0, r8
 8009046:	f011 fb6b 	bl	801a720 <memset>
        dsc->error_msg = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	6223      	str	r3, [r4, #32]
        dsc->img_data  = NULL;
 800904e:	61a3      	str	r3, [r4, #24]
        dsc->user_data = NULL;
 8009050:	6263      	str	r3, [r4, #36]	; 0x24
        dsc->time_to_open = 0;
 8009052:	61e3      	str	r3, [r4, #28]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8009054:	4629      	mov	r1, r5
 8009056:	4648      	mov	r0, r9
 8009058:	f01b fd3e 	bl	8024ad8 <_lv_ll_get_next>
 800905c:	4605      	mov	r5, r0
 800905e:	e7d4      	b.n	800900a <lv_img_decoder_open+0x6a>
 8009060:	240013bc 	.word	0x240013bc

08009064 <lv_img_decoder_create>:
{
 8009064:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 8009066:	4806      	ldr	r0, [pc, #24]	; (8009080 <lv_img_decoder_create+0x1c>)
 8009068:	f01b fcbe 	bl	80249e8 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(decoder);
 800906c:	4604      	mov	r4, r0
 800906e:	b900      	cbnz	r0, 8009072 <lv_img_decoder_create+0xe>
 8009070:	e7fe      	b.n	8009070 <lv_img_decoder_create+0xc>
 8009072:	2214      	movs	r2, #20
 8009074:	2100      	movs	r1, #0
 8009076:	f011 fb53 	bl	801a720 <memset>
}
 800907a:	4620      	mov	r0, r4
 800907c:	bd10      	pop	{r4, pc}
 800907e:	bf00      	nop
 8009080:	240013bc 	.word	0x240013bc

08009084 <_lv_img_decoder_init>:
{
 8009084:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 8009086:	2114      	movs	r1, #20
 8009088:	4807      	ldr	r0, [pc, #28]	; (80090a8 <_lv_img_decoder_init+0x24>)
 800908a:	f01b fca5 	bl	80249d8 <_lv_ll_init>
    decoder = lv_img_decoder_create();
 800908e:	f7ff ffe9 	bl	8009064 <lv_img_decoder_create>
    LV_ASSERT_MALLOC(decoder);
 8009092:	b900      	cbnz	r0, 8009096 <_lv_img_decoder_init+0x12>
 8009094:	e7fe      	b.n	8009094 <_lv_img_decoder_init+0x10>
    decoder->info_cb = info_cb;
 8009096:	4b05      	ldr	r3, [pc, #20]	; (80090ac <_lv_img_decoder_init+0x28>)
 8009098:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800909a:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <_lv_img_decoder_init+0x2c>)
 800909c:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800909e:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <_lv_img_decoder_init+0x30>)
 80090a0:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 80090a2:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <_lv_img_decoder_init+0x34>)
 80090a4:	60c3      	str	r3, [r0, #12]
}
 80090a6:	bd08      	pop	{r3, pc}
 80090a8:	240013bc 	.word	0x240013bc
 80090ac:	080089e5 	.word	0x080089e5
 80090b0:	08008dd1 	.word	0x08008dd1
 80090b4:	08008a95 	.word	0x08008a95
 80090b8:	0801f4ed 	.word	0x0801f4ed

080090bc <lv_draw_sw_init_ctx>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_init_ctx(lv_disp_drv_t * drv, lv_draw_ctx_t * draw_ctx)
{
 80090bc:	b510      	push	{r4, lr}
 80090be:	460c      	mov	r4, r1
 80090c0:	2258      	movs	r2, #88	; 0x58
 80090c2:	2100      	movs	r1, #0
 80090c4:	4620      	mov	r0, r4
 80090c6:	f011 fb2b 	bl	801a720 <memset>
    LV_UNUSED(drv);

    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));

    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 80090ca:	4b10      	ldr	r3, [pc, #64]	; (800910c <lv_draw_sw_init_ctx+0x50>)
 80090cc:	6163      	str	r3, [r4, #20]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 80090ce:	4b10      	ldr	r3, [pc, #64]	; (8009110 <lv_draw_sw_init_ctx+0x54>)
 80090d0:	6123      	str	r3, [r4, #16]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 80090d2:	4b10      	ldr	r3, [pc, #64]	; (8009114 <lv_draw_sw_init_ctx+0x58>)
 80090d4:	6323      	str	r3, [r4, #48]	; 0x30
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 80090d6:	4b10      	ldr	r3, [pc, #64]	; (8009118 <lv_draw_sw_init_ctx+0x5c>)
 80090d8:	6223      	str	r3, [r4, #32]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 80090da:	4b10      	ldr	r3, [pc, #64]	; (800911c <lv_draw_sw_init_ctx+0x60>)
 80090dc:	61a3      	str	r3, [r4, #24]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 80090de:	4b10      	ldr	r3, [pc, #64]	; (8009120 <lv_draw_sw_init_ctx+0x64>)
 80090e0:	6263      	str	r3, [r4, #36]	; 0x24
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 80090e2:	4b10      	ldr	r3, [pc, #64]	; (8009124 <lv_draw_sw_init_ctx+0x68>)
 80090e4:	62a3      	str	r3, [r4, #40]	; 0x28
#if LV_DRAW_COMPLEX
    draw_sw_ctx->base_draw.draw_transform = lv_draw_sw_transform;
 80090e6:	4b10      	ldr	r3, [pc, #64]	; (8009128 <lv_draw_sw_init_ctx+0x6c>)
 80090e8:	62e3      	str	r3, [r4, #44]	; 0x2c
#endif
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 80090ea:	4b10      	ldr	r3, [pc, #64]	; (800912c <lv_draw_sw_init_ctx+0x70>)
 80090ec:	6363      	str	r3, [r4, #52]	; 0x34
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 80090ee:	4b10      	ldr	r3, [pc, #64]	; (8009130 <lv_draw_sw_init_ctx+0x74>)
 80090f0:	63a3      	str	r3, [r4, #56]	; 0x38
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 80090f2:	4b10      	ldr	r3, [pc, #64]	; (8009134 <lv_draw_sw_init_ctx+0x78>)
 80090f4:	63e3      	str	r3, [r4, #60]	; 0x3c
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 80090f6:	4b10      	ldr	r3, [pc, #64]	; (8009138 <lv_draw_sw_init_ctx+0x7c>)
 80090f8:	6423      	str	r3, [r4, #64]	; 0x40
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 80090fa:	4b10      	ldr	r3, [pc, #64]	; (800913c <lv_draw_sw_init_ctx+0x80>)
 80090fc:	6463      	str	r3, [r4, #68]	; 0x44
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 80090fe:	4b10      	ldr	r3, [pc, #64]	; (8009140 <lv_draw_sw_init_ctx+0x84>)
 8009100:	64a3      	str	r3, [r4, #72]	; 0x48
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 8009102:	4b10      	ldr	r3, [pc, #64]	; (8009144 <lv_draw_sw_init_ctx+0x88>)
 8009104:	6563      	str	r3, [r4, #84]	; 0x54
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 8009106:	232c      	movs	r3, #44	; 0x2c
 8009108:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800910a:	bd10      	pop	{r4, pc}
 800910c:	0801f645 	.word	0x0801f645
 8009110:	080218c1 	.word	0x080218c1
 8009114:	080212f1 	.word	0x080212f1
 8009118:	08009d91 	.word	0x08009d91
 800911c:	0802053f 	.word	0x0802053f
 8009120:	0800a1b9 	.word	0x0800a1b9
 8009124:	0800a911 	.word	0x0800a911
 8009128:	08022899 	.word	0x08022899
 800912c:	0801f55f 	.word	0x0801f55f
 8009130:	0801f561 	.word	0x0801f561
 8009134:	080209fd 	.word	0x080209fd
 8009138:	08020aeb 	.word	0x08020aeb
 800913c:	08020b47 	.word	0x08020b47
 8009140:	08020bd9 	.word	0x08020bd9
 8009144:	08009149 	.word	0x08009149

08009148 <lv_draw_sw_blend_basic>:

    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
}

LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_blend_basic(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_opa_t * mask;
    if(dsc->mask_buf == NULL) mask = NULL;
 800914c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
 8009150:	b091      	sub	sp, #68	; 0x44
 8009152:	4681      	mov	r9, r0
 8009154:	4688      	mov	r8, r1
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8009156:	7c0b      	ldrb	r3, [r1, #16]
 8009158:	f1ba 0f00 	cmp.w	sl, #0
 800915c:	d002      	beq.n	8009164 <lv_draw_sw_blend_basic+0x1c>
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 8092 	beq.w	8009288 <lv_draw_sw_blend_basic+0x140>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 8009164:	2b01      	cmp	r3, #1
    else mask = dsc->mask_buf;

    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 8009166:	f8d9 3004 	ldr.w	r3, [r9, #4]

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 800916a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800916e:	a80e      	add	r0, sp, #56	; 0x38
 8009170:	f8d8 1000 	ldr.w	r1, [r8]
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 8009174:	bf08      	it	eq
 8009176:	f04f 0a00 	moveq.w	sl, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800917a:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 800917e:	f9b3 4000 	ldrsh.w	r4, [r3]
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8009182:	f01b f876 	bl	8024272 <_lv_area_intersect>
 8009186:	2800      	cmp	r0, #0
 8009188:	d07e      	beq.n	8009288 <lv_draw_sw_blend_basic+0x140>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800918a:	f7fe f83b 	bl	8007204 <_lv_refr_get_disp_refreshing>
 800918e:	3501      	adds	r5, #1
    lv_color_t * dest_buf = draw_ctx->buf;
    if(disp->driver->set_px_cb == NULL) {
 8009190:	6802      	ldr	r2, [r0, #0]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009192:	4607      	mov	r7, r0
 8009194:	1b2d      	subs	r5, r5, r4
    lv_color_t * dest_buf = draw_ctx->buf;
 8009196:	f8d9 b000 	ldr.w	fp, [r9]
    if(disp->driver->set_px_cb == NULL) {
 800919a:	69d3      	ldr	r3, [r2, #28]
 800919c:	b22d      	sxth	r5, r5
 800919e:	b9cb      	cbnz	r3, 80091d4 <lv_draw_sw_blend_basic+0x8c>
        if(disp->driver->screen_transp == 0) {
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 80091a0:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80091a4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80091a8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80091ac:	f9b0 0000 	ldrsh.w	r0, [r0]
 80091b0:	1a5b      	subs	r3, r3, r1
 80091b2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80091b6:	1a09      	subs	r1, r1, r0
        if(disp->driver->screen_transp == 0) {
 80091b8:	7c10      	ldrb	r0, [r2, #16]
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 80091ba:	436b      	muls	r3, r5
        if(disp->driver->screen_transp == 0) {
 80091bc:	0644      	lsls	r4, r0, #25
        }
        else {
            /*With LV_COLOR_DEPTH 16 it means ARGB8565 (3 bytes format)*/
            uint8_t * dest_buf8 = (uint8_t *) dest_buf;
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80091be:	bf4b      	itete	mi
 80091c0:	eb03 0343 	addmi.w	r3, r3, r3, lsl #1
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 80091c4:	185b      	addpl	r3, r3, r1
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80091c6:	eb01 0141 	addmi.w	r1, r1, r1, lsl #1
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 80091ca:	eb0b 0b43 	addpl.w	fp, fp, r3, lsl #1
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80091ce:	bf44      	itt	mi
 80091d0:	185b      	addmi	r3, r3, r1
 80091d2:	449b      	addmi	fp, r3
            dest_buf = (lv_color_t *)dest_buf8;
        }
    }

    const lv_color_t * src_buf = dsc->src_buf;
 80091d4:	f8d8 4004 	ldr.w	r4, [r8, #4]
    lv_coord_t src_stride;
    if(src_buf) {
 80091d8:	2c00      	cmp	r4, #0
 80091da:	d058      	beq.n	800928e <lv_draw_sw_blend_basic+0x146>
        src_stride = lv_area_get_width(dsc->blend_area);
 80091dc:	f8d8 3000 	ldr.w	r3, [r8]
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 80091e0:	f9bd 003a 	ldrsh.w	r0, [sp, #58]	; 0x3a
 80091e4:	889e      	ldrh	r6, [r3, #4]
 80091e6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80091ea:	3601      	adds	r6, #1
 80091ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80091f0:	1a76      	subs	r6, r6, r1
 80091f2:	1ac0      	subs	r0, r0, r3
 80091f4:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80091f8:	b236      	sxth	r6, r6
 80091fa:	1a5b      	subs	r3, r3, r1
 80091fc:	fb06 3300 	mla	r3, r6, r0, r3
 8009200:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    else {
        src_stride = 0;
    }

    lv_coord_t mask_stride;
    if(mask) {
 8009204:	f1ba 0f00 	cmp.w	sl, #0
 8009208:	d057      	beq.n	80092ba <lv_draw_sw_blend_basic+0x172>
        /*Round the values in the mask if anti-aliasing is disabled*/
        if(disp->driver->antialiasing == 0) {
 800920a:	7c13      	ldrb	r3, [r2, #16]
 800920c:	0718      	lsls	r0, r3, #28
 800920e:	d540      	bpl.n	8009292 <lv_draw_sw_blend_basic+0x14a>
            for(i = 0; i < mask_size; i++) {
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
            }
        }

        mask_stride = lv_area_get_width(dsc->mask_area);
 8009210:	f8d8 0014 	ldr.w	r0, [r8, #20]
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 8009214:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8009218:	8883      	ldrh	r3, [r0, #4]
 800921a:	f9b0 2000 	ldrsh.w	r2, [r0]
 800921e:	3301      	adds	r3, #1
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	b21b      	sxth	r3, r3
 8009224:	9307      	str	r3, [sp, #28]
 8009226:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800922a:	1ac9      	subs	r1, r1, r3
 800922c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8009230:	1a9b      	subs	r3, r3, r2
 8009232:	9a07      	ldr	r2, [sp, #28]
 8009234:	fb02 3301 	mla	r3, r2, r1, r3
 8009238:	449a      	add	sl, r3
    }
    else {
        mask_stride = 0;
    }

    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 800923a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800923e:	a80e      	add	r0, sp, #56	; 0x38
 8009240:	885a      	ldrh	r2, [r3, #2]
 8009242:	8819      	ldrh	r1, [r3, #0]
 8009244:	4252      	negs	r2, r2
 8009246:	4249      	negs	r1, r1
 8009248:	b212      	sxth	r2, r2
 800924a:	b209      	sxth	r1, r1
 800924c:	f01b f800 	bl	8024250 <lv_area_move>


    if(disp->driver->set_px_cb) {
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	f898 2018 	ldrb.w	r2, [r8, #24]
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800925c:	9204      	str	r2, [sp, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	f000 80e5 	beq.w	800942e <lv_draw_sw_blend_basic+0x2e6>
        if(dsc->src_buf == NULL) {
 8009264:	2f00      	cmp	r7, #0
 8009266:	d17c      	bne.n	8009362 <lv_draw_sw_blend_basic+0x21a>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 8009268:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800926c:	f8ad 3014 	strh.w	r3, [sp, #20]
 **********************/

static void fill_set_px(lv_color_t * dest_buf, const lv_area_t * blend_area, lv_coord_t dest_stride,
                        lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stide)
{
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009270:	f7fd ffc8 	bl	8007204 <_lv_refr_get_disp_refreshing>
 8009274:	4681      	mov	r9, r0

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 8009276:	f1ba 0f00 	cmp.w	sl, #0
 800927a:	d13b      	bne.n	80092f4 <lv_draw_sw_blend_basic+0x1ac>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 800927c:	f9bd 403a 	ldrsh.w	r4, [sp, #58]	; 0x3a
 8009280:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8009284:	429c      	cmp	r4, r3
 8009286:	dd1b      	ble.n	80092c0 <lv_draw_sw_blend_basic+0x178>
}
 8009288:	b011      	add	sp, #68	; 0x44
 800928a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        src_stride = 0;
 800928e:	4626      	mov	r6, r4
 8009290:	e7b8      	b.n	8009204 <lv_draw_sw_blend_basic+0xbc>
            int32_t mask_size = lv_area_get_size(dsc->mask_area);
 8009292:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8009296:	f01a ffbe 	bl	8024216 <lv_area_get_size>
            for(i = 0; i < mask_size; i++) {
 800929a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800929e:	f1ca 0101 	rsb	r1, sl, #1
 80092a2:	18ca      	adds	r2, r1, r3
 80092a4:	4290      	cmp	r0, r2
 80092a6:	ddb3      	ble.n	8009210 <lv_draw_sw_blend_basic+0xc8>
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 80092a8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80092ac:	2a80      	cmp	r2, #128	; 0x80
 80092ae:	f04f 32ff 	mov.w	r2, #4294967295
 80092b2:	bf98      	it	ls
 80092b4:	2200      	movls	r2, #0
 80092b6:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < mask_size; i++) {
 80092b8:	e7f3      	b.n	80092a2 <lv_draw_sw_blend_basic+0x15a>
        mask_stride = 0;
 80092ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80092be:	e7bc      	b.n	800923a <lv_draw_sw_blend_basic+0xf2>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 80092c0:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 80092c4:	b227      	sxth	r7, r4
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 80092c6:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 80092ca:	429e      	cmp	r6, r3
 80092cc:	dd01      	ble.n	80092d2 <lv_draw_sw_blend_basic+0x18a>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 80092ce:	3401      	adds	r4, #1
 80092d0:	e7d6      	b.n	8009280 <lv_draw_sw_blend_basic+0x138>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 80092d2:	9b04      	ldr	r3, [sp, #16]
 80092d4:	462a      	mov	r2, r5
 80092d6:	f8d9 0000 	ldr.w	r0, [r9]
 80092da:	4659      	mov	r1, fp
 80092dc:	9302      	str	r3, [sp, #8]
 80092de:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80092e2:	9700      	str	r7, [sp, #0]
 80092e4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80092e8:	b233      	sxth	r3, r6
 80092ea:	f8d0 801c 	ldr.w	r8, [r0, #28]
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 80092ee:	3601      	adds	r6, #1
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 80092f0:	47c0      	blx	r8
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 80092f2:	e7e8      	b.n	80092c6 <lv_draw_sw_blend_basic+0x17e>
 80092f4:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80092f8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80092fc:	3601      	adds	r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80092fe:	f8bd 403e 	ldrh.w	r4, [sp, #62]	; 0x3e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009302:	1af6      	subs	r6, r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009304:	3401      	adds	r4, #1
 8009306:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
            }
        }
    }
    else {
        int32_t w = lv_area_get_width(blend_area);
 800930a:	b236      	sxth	r6, r6
 800930c:	1ae4      	subs	r4, r4, r3
        int32_t h = lv_area_get_height(blend_area);
 800930e:	b224      	sxth	r4, r4

        for(y = 0; y < h; y++) {
 8009310:	42bc      	cmp	r4, r7
 8009312:	ddb9      	ble.n	8009288 <lv_draw_sw_blend_basic+0x140>
            for(x = 0; x < w; x++) {
 8009314:	f04f 0800 	mov.w	r8, #0
 8009318:	e01d      	b.n	8009356 <lv_draw_sw_blend_basic+0x20e>
                if(mask[x]) {
 800931a:	f81a 2008 	ldrb.w	r2, [sl, r8]
 800931e:	b1c2      	cbz	r2, 8009352 <lv_draw_sw_blend_basic+0x20a>


                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8009320:	9904      	ldr	r1, [sp, #16]
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8009322:	f8d9 0000 	ldr.w	r0, [r9]
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8009326:	fb11 f202 	smulbb	r2, r1, r2
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 800932a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800932e:	4659      	mov	r1, fp
 8009330:	0a12      	lsrs	r2, r2, #8
 8009332:	4443      	add	r3, r8
 8009334:	9202      	str	r2, [sp, #8]
 8009336:	b21b      	sxth	r3, r3
 8009338:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800933c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8009340:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8009344:	443a      	add	r2, r7
 8009346:	b212      	sxth	r2, r2
 8009348:	9200      	str	r2, [sp, #0]
 800934a:	69c2      	ldr	r2, [r0, #28]
 800934c:	4694      	mov	ip, r2
 800934e:	462a      	mov	r2, r5
 8009350:	47e0      	blx	ip
            for(x = 0; x < w; x++) {
 8009352:	f108 0801 	add.w	r8, r8, #1
 8009356:	4546      	cmp	r6, r8
 8009358:	dcdf      	bgt.n	800931a <lv_draw_sw_blend_basic+0x1d2>
                }
            }
            mask += mask_stide;
 800935a:	9b07      	ldr	r3, [sp, #28]
        for(y = 0; y < h; y++) {
 800935c:	3701      	adds	r7, #1
            mask += mask_stide;
 800935e:	449a      	add	sl, r3
        for(y = 0; y < h; y++) {
 8009360:	e7d6      	b.n	8009310 <lv_draw_sw_blend_basic+0x1c8>

static void map_set_px(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                       const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009362:	f7fd ff4f 	bl	8007204 <_lv_refr_get_disp_refreshing>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009366:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800936a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
        for(y = 0; y < h; y++) {
            for(x = 0; x < w; x++) {
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
                                        opa);
            }
            src_buf += src_stride;
 800936e:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8009372:	3301      	adds	r3, #1
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009374:	9005      	str	r0, [sp, #20]
 8009376:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009378:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
    int32_t w = lv_area_get_width(dest_area);
 800937c:	b21b      	sxth	r3, r3
 800937e:	9306      	str	r3, [sp, #24]
 8009380:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009384:	3301      	adds	r3, #1
 8009386:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);
 8009388:	b21b      	sxth	r3, r3
 800938a:	9308      	str	r3, [sp, #32]
    if(mask == NULL) {
 800938c:	f1ba 0f00 	cmp.w	sl, #0
 8009390:	d022      	beq.n	80093d8 <lv_draw_sw_blend_basic+0x290>
        }
    }
    else {
        for(y = 0; y < h; y++) {
 8009392:	2700      	movs	r7, #0
 8009394:	9b08      	ldr	r3, [sp, #32]
 8009396:	42bb      	cmp	r3, r7
 8009398:	f77f af76 	ble.w	8009288 <lv_draw_sw_blend_basic+0x140>
            for(x = 0; x < w; x++) {
 800939c:	2600      	movs	r6, #0
 800939e:	e03e      	b.n	800941e <lv_draw_sw_blend_basic+0x2d6>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 80093a0:	9b05      	ldr	r3, [sp, #20]
 80093a2:	4659      	mov	r1, fp
 80093a4:	9a04      	ldr	r2, [sp, #16]
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	9202      	str	r2, [sp, #8]
 80093aa:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 80093ae:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80093b2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80093b6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80093ba:	4433      	add	r3, r6
            for(x = 0; x < w; x++) {
 80093bc:	3601      	adds	r6, #1
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 80093be:	4452      	add	r2, sl
 80093c0:	b21b      	sxth	r3, r3
 80093c2:	b212      	sxth	r2, r2
 80093c4:	9200      	str	r2, [sp, #0]
 80093c6:	462a      	mov	r2, r5
 80093c8:	69c7      	ldr	r7, [r0, #28]
 80093ca:	47b8      	blx	r7
            for(x = 0; x < w; x++) {
 80093cc:	9b06      	ldr	r3, [sp, #24]
 80093ce:	42b3      	cmp	r3, r6
 80093d0:	dce6      	bgt.n	80093a0 <lv_draw_sw_blend_basic+0x258>
            src_buf += src_stride;
 80093d2:	444c      	add	r4, r9
        for(y = 0; y < h; y++) {
 80093d4:	f10a 0a01 	add.w	sl, sl, #1
 80093d8:	9b08      	ldr	r3, [sp, #32]
 80093da:	4553      	cmp	r3, sl
 80093dc:	f77f af54 	ble.w	8009288 <lv_draw_sw_blend_basic+0x140>
            for(x = 0; x < w; x++) {
 80093e0:	2600      	movs	r6, #0
 80093e2:	e7f3      	b.n	80093cc <lv_draw_sw_blend_basic+0x284>
                if(mask[x]) {
 80093e4:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80093e8:	b1c2      	cbz	r2, 800941c <lv_draw_sw_blend_basic+0x2d4>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 80093ea:	9904      	ldr	r1, [sp, #16]
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 80093ec:	9b05      	ldr	r3, [sp, #20]
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 80093ee:	fb11 f202 	smulbb	r2, r1, r2
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 80093f2:	4659      	mov	r1, fp
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	0a12      	lsrs	r2, r2, #8
 80093f8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80093fc:	9202      	str	r2, [sp, #8]
 80093fe:	4433      	add	r3, r6
 8009400:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 8009404:	b21b      	sxth	r3, r3
 8009406:	f8ad 2004 	strh.w	r2, [sp, #4]
 800940a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800940e:	443a      	add	r2, r7
 8009410:	b212      	sxth	r2, r2
 8009412:	9200      	str	r2, [sp, #0]
 8009414:	462a      	mov	r2, r5
 8009416:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800941a:	47c0      	blx	r8
            for(x = 0; x < w; x++) {
 800941c:	3601      	adds	r6, #1
 800941e:	9b06      	ldr	r3, [sp, #24]
 8009420:	42b3      	cmp	r3, r6
 8009422:	dcdf      	bgt.n	80093e4 <lv_draw_sw_blend_basic+0x29c>
                }
            }
            mask += mask_stride;
 8009424:	9b07      	ldr	r3, [sp, #28]
            src_buf += src_stride;
 8009426:	444c      	add	r4, r9
        for(y = 0; y < h; y++) {
 8009428:	3701      	adds	r7, #1
            mask += mask_stride;
 800942a:	449a      	add	sl, r3
        for(y = 0; y < h; y++) {
 800942c:	e7b2      	b.n	8009394 <lv_draw_sw_blend_basic+0x24c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800942e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8009432:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8009436:	3201      	adds	r2, #1
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 8009438:	f898 3019 	ldrb.w	r3, [r8, #25]
 800943c:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800943e:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009442:	b212      	sxth	r2, r2
 8009444:	9205      	str	r2, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009446:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 800944a:	3201      	adds	r2, #1
 800944c:	1a52      	subs	r2, r2, r1
    int32_t h = lv_area_get_height(dest_area);
 800944e:	b212      	sxth	r2, r2
 8009450:	9206      	str	r2, [sp, #24]
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 8009452:	2b00      	cmp	r3, #0
 8009454:	f040 824f 	bne.w	80098f6 <lv_draw_sw_blend_basic+0x7ae>
        if(dsc->src_buf == NULL) {
 8009458:	2f00      	cmp	r7, #0
 800945a:	f040 814e 	bne.w	80096fa <lv_draw_sw_blend_basic+0x5b2>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 800945e:	f8b8 4008 	ldrh.w	r4, [r8, #8]
    if(mask == NULL) {
 8009462:	f1ba 0f00 	cmp.w	sl, #0
 8009466:	d16d      	bne.n	8009544 <lv_draw_sw_blend_basic+0x3fc>
        if(opa >= LV_OPA_MAX) {
 8009468:	9b04      	ldr	r3, [sp, #16]
                dest_buf += dest_stride;
 800946a:	006d      	lsls	r5, r5, #1
        if(opa >= LV_OPA_MAX) {
 800946c:	2bfc      	cmp	r3, #252	; 0xfc
 800946e:	d82a      	bhi.n	80094c6 <lv_draw_sw_blend_basic+0x37e>
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8009470:	9a04      	ldr	r2, [sp, #16]
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 8009472:	0ae6      	lsrs	r6, r4, #11
 8009474:	4651      	mov	r1, sl
 8009476:	4620      	mov	r0, r4
 8009478:	4356      	muls	r6, r2
 800947a:	f016 fed2 	bl	8020222 <lv_color_mix>
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800947e:	f248 0881 	movw	r8, #32897	; 0x8081
 8009482:	f000 031f 	and.w	r3, r0, #31
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 8009486:	9604      	str	r6, [sp, #16]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 8009488:	f3c4 1645 	ubfx	r6, r4, #5, #6
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800948c:	f004 041f 	and.w	r4, r4, #31
 8009490:	f3c0 1145 	ubfx	r1, r0, #5, #6
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 8009494:	4356      	muls	r6, r2
 8009496:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800949a:	4354      	muls	r4, r2
            lv_opa_t opa_inv = 255 - opa;
 800949c:	43d2      	mvns	r2, r2
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 800949e:	9607      	str	r6, [sp, #28]
            lv_color_t last_dest_color = lv_color_black();
 80094a0:	4656      	mov	r6, sl
            lv_opa_t opa_inv = 255 - opa;
 80094a2:	b2d2      	uxtb	r2, r2
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 80094a4:	9408      	str	r4, [sp, #32]
            for(y = 0; y < h; y++) {
 80094a6:	46b6      	mov	lr, r6
 80094a8:	9c06      	ldr	r4, [sp, #24]
 80094aa:	45a6      	cmp	lr, r4
 80094ac:	f6bf aeec 	bge.w	8009288 <lv_draw_sw_blend_basic+0x140>
 80094b0:	46dc      	mov	ip, fp
                for(x = 0; x < w; x++) {
 80094b2:	2700      	movs	r7, #0
 80094b4:	e03f      	b.n	8009536 <lv_draw_sw_blend_basic+0x3ee>
                lv_color_fill(dest_buf, color, w);
 80094b6:	4658      	mov	r0, fp
            for(y = 0; y < h; y++) {
 80094b8:	f10a 0a01 	add.w	sl, sl, #1
                dest_buf += dest_stride;
 80094bc:	44ab      	add	fp, r5
                lv_color_fill(dest_buf, color, w);
 80094be:	9a05      	ldr	r2, [sp, #20]
 80094c0:	4621      	mov	r1, r4
 80094c2:	f01b f894 	bl	80245ee <lv_color_fill>
            for(y = 0; y < h; y++) {
 80094c6:	9b06      	ldr	r3, [sp, #24]
 80094c8:	459a      	cmp	sl, r3
 80094ca:	dbf4      	blt.n	80094b6 <lv_draw_sw_blend_basic+0x36e>
 80094cc:	e6dc      	b.n	8009288 <lv_draw_sw_blend_basic+0x140>
                    if(last_dest_color.full != dest_buf[x].full) {
 80094ce:	4664      	mov	r4, ip
 80094d0:	f83c 9b02 	ldrh.w	r9, [ip], #2
 80094d4:	45b1      	cmp	r9, r6
 80094d6:	d01f      	beq.n	8009518 <lv_draw_sw_blend_basic+0x3d0>
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094d8:	7860      	ldrb	r0, [r4, #1]
 80094da:	9b04      	ldr	r3, [sp, #16]
 80094dc:	08c0      	lsrs	r0, r0, #3
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094de:	8821      	ldrh	r1, [r4, #0]
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094e0:	9e08      	ldr	r6, [sp, #32]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094e2:	fb00 3002 	mla	r0, r0, r2, r3
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094e6:	f3c1 1145 	ubfx	r1, r1, #5, #6
 80094ea:	9b07      	ldr	r3, [sp, #28]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094ec:	3080      	adds	r0, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094ee:	fb01 3102 	mla	r1, r1, r2, r3
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094f2:	7823      	ldrb	r3, [r4, #0]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094f4:	fb08 f000 	mul.w	r0, r8, r0
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094f8:	f003 031f 	and.w	r3, r3, #31
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094fc:	3180      	adds	r1, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094fe:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009502:	fb03 6302 	mla	r3, r3, r2, r6
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009506:	fb08 f101 	mul.w	r1, r8, r1
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800950a:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800950c:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009510:	fb08 f303 	mul.w	r3, r8, r3
 8009514:	f3c3 53c4 	ubfx	r3, r3, #23, #5
                    dest_buf[x] = last_res_color;
 8009518:	7826      	ldrb	r6, [r4, #0]
                for(x = 0; x < w; x++) {
 800951a:	3701      	adds	r7, #1
                    dest_buf[x] = last_res_color;
 800951c:	f363 0604 	bfi	r6, r3, #0, #5
 8009520:	7026      	strb	r6, [r4, #0]
 8009522:	8826      	ldrh	r6, [r4, #0]
 8009524:	f361 164a 	bfi	r6, r1, #5, #6
 8009528:	8026      	strh	r6, [r4, #0]
 800952a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 800952e:	f360 06c7 	bfi	r6, r0, #3, #5
 8009532:	7066      	strb	r6, [r4, #1]
                for(x = 0; x < w; x++) {
 8009534:	464e      	mov	r6, r9
 8009536:	9c05      	ldr	r4, [sp, #20]
 8009538:	42a7      	cmp	r7, r4
 800953a:	dbc8      	blt.n	80094ce <lv_draw_sw_blend_basic+0x386>
                dest_buf += dest_stride;
 800953c:	44ab      	add	fp, r5
            for(y = 0; y < h; y++) {
 800953e:	f10e 0e01 	add.w	lr, lr, #1
 8009542:	e7b1      	b.n	80094a8 <lv_draw_sw_blend_basic+0x360>
        if(opa >= LV_OPA_MAX) {
 8009544:	9a04      	ldr	r2, [sp, #16]
 8009546:	2afc      	cmp	r2, #252	; 0xfc
 8009548:	f240 809c 	bls.w	8009684 <lv_draw_sw_blend_basic+0x53c>
            int32_t x_end4 = w - 4;
 800954c:	9b05      	ldr	r3, [sp, #20]
 800954e:	eb04 4904 	add.w	r9, r4, r4, lsl #16
                mask += (mask_stride - w);
 8009552:	9a05      	ldr	r2, [sp, #20]
            int32_t x_end4 = w - 4;
 8009554:	3b04      	subs	r3, #4
 8009556:	9304      	str	r3, [sp, #16]
                dest_buf += (dest_stride - w);
 8009558:	9b05      	ldr	r3, [sp, #20]
 800955a:	1aed      	subs	r5, r5, r3
 800955c:	006b      	lsls	r3, r5, #1
 800955e:	9308      	str	r3, [sp, #32]
                mask += (mask_stride - w);
 8009560:	9b07      	ldr	r3, [sp, #28]
 8009562:	1a9b      	subs	r3, r3, r2
 8009564:	9307      	str	r3, [sp, #28]
            for(y = 0; y < h; y++) {
 8009566:	9b06      	ldr	r3, [sp, #24]
 8009568:	429f      	cmp	r7, r3
 800956a:	f6bf ae8d 	bge.w	8009288 <lv_draw_sw_blend_basic+0x140>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 800956e:	f04f 0800 	mov.w	r8, #0
 8009572:	e009      	b.n	8009588 <lv_draw_sw_blend_basic+0x440>
                    FILL_NORMAL_MASK_PX(color)
 8009574:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8009578:	2aff      	cmp	r2, #255	; 0xff
 800957a:	d11d      	bne.n	80095b8 <lv_draw_sw_blend_basic+0x470>
 800957c:	f8ab 4000 	strh.w	r4, [fp]
 8009580:	f10b 0b02 	add.w	fp, fp, #2
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 8009584:	f108 0801 	add.w	r8, r8, #1
 8009588:	9b05      	ldr	r3, [sp, #20]
 800958a:	4655      	mov	r5, sl
 800958c:	4598      	cmp	r8, r3
 800958e:	da02      	bge.n	8009596 <lv_draw_sw_blend_basic+0x44e>
 8009590:	f01a 0f03 	tst.w	sl, #3
 8009594:	d1ee      	bne.n	8009574 <lv_draw_sw_blend_basic+0x42c>
                for(; x <= x_end4; x += 4) {
 8009596:	9b04      	ldr	r3, [sp, #16]
 8009598:	4543      	cmp	r3, r8
 800959a:	da15      	bge.n	80095c8 <lv_draw_sw_blend_basic+0x480>
 800959c:	46aa      	mov	sl, r5
 800959e:	eba8 0805 	sub.w	r8, r8, r5
                for(; x < w ; x++) {
 80095a2:	eb08 030a 	add.w	r3, r8, sl
 80095a6:	9a05      	ldr	r2, [sp, #20]
 80095a8:	4293      	cmp	r3, r2
 80095aa:	db5a      	blt.n	8009662 <lv_draw_sw_blend_basic+0x51a>
                dest_buf += (dest_stride - w);
 80095ac:	9b08      	ldr	r3, [sp, #32]
            for(y = 0; y < h; y++) {
 80095ae:	3701      	adds	r7, #1
                dest_buf += (dest_stride - w);
 80095b0:	449b      	add	fp, r3
                mask += (mask_stride - w);
 80095b2:	9b07      	ldr	r3, [sp, #28]
 80095b4:	449a      	add	sl, r3
            for(y = 0; y < h; y++) {
 80095b6:	e7d6      	b.n	8009566 <lv_draw_sw_blend_basic+0x41e>
                    FILL_NORMAL_MASK_PX(color)
 80095b8:	f8bb 1000 	ldrh.w	r1, [fp]
 80095bc:	4620      	mov	r0, r4
 80095be:	f016 fe30 	bl	8020222 <lv_color_mix>
 80095c2:	f8ab 0000 	strh.w	r0, [fp]
 80095c6:	e7db      	b.n	8009580 <lv_draw_sw_blend_basic+0x438>
                    uint32_t mask32 = *((uint32_t *)mask);
 80095c8:	f855 2b04 	ldr.w	r2, [r5], #4
                        dest_buf += 4;
 80095cc:	f10b 0608 	add.w	r6, fp, #8
                    if(mask32 == 0xFFFFFFFF) {
 80095d0:	1c51      	adds	r1, r2, #1
 80095d2:	d10e      	bne.n	80095f2 <lv_draw_sw_blend_basic+0x4aa>
                        if((lv_uintptr_t)dest_buf & 0x3) {
 80095d4:	07b3      	lsls	r3, r6, #30
 80095d6:	d006      	beq.n	80095e6 <lv_draw_sw_blend_basic+0x49e>
                            *(dest_buf + 0) = color;
 80095d8:	f826 4c08 	strh.w	r4, [r6, #-8]
                            *d = c32;
 80095dc:	f846 9c06 	str.w	r9, [r6, #-6]
                        FILL_NORMAL_MASK_PX(color)
 80095e0:	f826 4c02 	strh.w	r4, [r6, #-2]
 80095e4:	e001      	b.n	80095ea <lv_draw_sw_blend_basic+0x4a2>
                            *(d + 1) = c32;
 80095e6:	e946 9902 	strd	r9, r9, [r6, #-8]
                for(; x <= x_end4; x += 4) {
 80095ea:	f108 0804 	add.w	r8, r8, #4
 80095ee:	46b3      	mov	fp, r6
 80095f0:	e7d1      	b.n	8009596 <lv_draw_sw_blend_basic+0x44e>
                    else if(mask32) {
 80095f2:	2a00      	cmp	r2, #0
 80095f4:	d0f9      	beq.n	80095ea <lv_draw_sw_blend_basic+0x4a2>
                        FILL_NORMAL_MASK_PX(color)
 80095f6:	f815 2c04 	ldrb.w	r2, [r5, #-4]
 80095fa:	2aff      	cmp	r2, #255	; 0xff
 80095fc:	d119      	bne.n	8009632 <lv_draw_sw_blend_basic+0x4ea>
 80095fe:	f826 4c08 	strh.w	r4, [r6, #-8]
                        FILL_NORMAL_MASK_PX(color)
 8009602:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8009606:	2aff      	cmp	r2, #255	; 0xff
 8009608:	d11b      	bne.n	8009642 <lv_draw_sw_blend_basic+0x4fa>
 800960a:	f826 4c06 	strh.w	r4, [r6, #-6]
                        FILL_NORMAL_MASK_PX(color)
 800960e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8009612:	2aff      	cmp	r2, #255	; 0xff
 8009614:	d11d      	bne.n	8009652 <lv_draw_sw_blend_basic+0x50a>
 8009616:	f826 4c04 	strh.w	r4, [r6, #-4]
                        FILL_NORMAL_MASK_PX(color)
 800961a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800961e:	2aff      	cmp	r2, #255	; 0xff
 8009620:	d0de      	beq.n	80095e0 <lv_draw_sw_blend_basic+0x498>
 8009622:	f836 1c02 	ldrh.w	r1, [r6, #-2]
 8009626:	4620      	mov	r0, r4
 8009628:	f016 fdfb 	bl	8020222 <lv_color_mix>
 800962c:	f826 0c02 	strh.w	r0, [r6, #-2]
 8009630:	e7db      	b.n	80095ea <lv_draw_sw_blend_basic+0x4a2>
                        FILL_NORMAL_MASK_PX(color)
 8009632:	f8bb 1000 	ldrh.w	r1, [fp]
 8009636:	4620      	mov	r0, r4
 8009638:	f016 fdf3 	bl	8020222 <lv_color_mix>
 800963c:	f8ab 0000 	strh.w	r0, [fp]
 8009640:	e7df      	b.n	8009602 <lv_draw_sw_blend_basic+0x4ba>
                        FILL_NORMAL_MASK_PX(color)
 8009642:	f836 1c06 	ldrh.w	r1, [r6, #-6]
 8009646:	4620      	mov	r0, r4
 8009648:	f016 fdeb 	bl	8020222 <lv_color_mix>
 800964c:	f826 0c06 	strh.w	r0, [r6, #-6]
 8009650:	e7dd      	b.n	800960e <lv_draw_sw_blend_basic+0x4c6>
                        FILL_NORMAL_MASK_PX(color)
 8009652:	f836 1c04 	ldrh.w	r1, [r6, #-4]
 8009656:	4620      	mov	r0, r4
 8009658:	f016 fde3 	bl	8020222 <lv_color_mix>
 800965c:	f826 0c04 	strh.w	r0, [r6, #-4]
 8009660:	e7db      	b.n	800961a <lv_draw_sw_blend_basic+0x4d2>
                    FILL_NORMAL_MASK_PX(color)
 8009662:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8009666:	2aff      	cmp	r2, #255	; 0xff
 8009668:	d104      	bne.n	8009674 <lv_draw_sw_blend_basic+0x52c>
 800966a:	f8ab 4000 	strh.w	r4, [fp]
 800966e:	f10b 0b02 	add.w	fp, fp, #2
                for(; x < w ; x++) {
 8009672:	e796      	b.n	80095a2 <lv_draw_sw_blend_basic+0x45a>
                    FILL_NORMAL_MASK_PX(color)
 8009674:	f8bb 1000 	ldrh.w	r1, [fp]
 8009678:	4620      	mov	r0, r4
 800967a:	f016 fdd2 	bl	8020222 <lv_color_mix>
 800967e:	f8ab 0000 	strh.w	r0, [fp]
 8009682:	e7f4      	b.n	800966e <lv_draw_sw_blend_basic+0x526>
                dest_buf += dest_stride;
 8009684:	006a      	lsls	r2, r5, #1
                mask += (mask_stride - w);
 8009686:	9e05      	ldr	r6, [sp, #20]
 8009688:	9d07      	ldr	r5, [sp, #28]
            for(y = 0; y < h; y++) {
 800968a:	4698      	mov	r8, r3
            last_dest_color.full = dest_buf[0].full;
 800968c:	f8bb 1000 	ldrh.w	r1, [fp]
                mask += (mask_stride - w);
 8009690:	1bad      	subs	r5, r5, r6
                dest_buf += dest_stride;
 8009692:	9208      	str	r2, [sp, #32]
            last_res_color.full = dest_buf[0].full;
 8009694:	4608      	mov	r0, r1
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 8009696:	461a      	mov	r2, r3
                mask += (mask_stride - w);
 8009698:	2e00      	cmp	r6, #0
 800969a:	bfa8      	it	ge
 800969c:	19ad      	addge	r5, r5, r6
 800969e:	9507      	str	r5, [sp, #28]
            for(y = 0; y < h; y++) {
 80096a0:	9d06      	ldr	r5, [sp, #24]
 80096a2:	45a8      	cmp	r8, r5
 80096a4:	f6bf adf0 	bge.w	8009288 <lv_draw_sw_blend_basic+0x140>
 80096a8:	465d      	mov	r5, fp
                for(x = 0; x < w; x++) {
 80096aa:	2700      	movs	r7, #0
 80096ac:	e019      	b.n	80096e2 <lv_draw_sw_blend_basic+0x59a>
                    if(*mask) {
 80096ae:	f81a 6007 	ldrb.w	r6, [sl, r7]
 80096b2:	b1a6      	cbz	r6, 80096de <lv_draw_sw_blend_basic+0x596>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80096b4:	429e      	cmp	r6, r3
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 80096b6:	f8b5 9000 	ldrh.w	r9, [r5]
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80096ba:	d00c      	beq.n	80096d6 <lv_draw_sw_blend_basic+0x58e>
 80096bc:	2eff      	cmp	r6, #255	; 0xff
 80096be:	d01a      	beq.n	80096f6 <lv_draw_sw_blend_basic+0x5ae>
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 80096c0:	9b04      	ldr	r3, [sp, #16]
 80096c2:	fb16 f203 	smulbb	r2, r6, r3
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80096c6:	0a12      	lsrs	r2, r2, #8
                            else last_res_color = lv_color_mix(color, dest_buf[x], opa_tmp);
 80096c8:	8829      	ldrh	r1, [r5, #0]
 80096ca:	4620      	mov	r0, r4
 80096cc:	f016 fda9 	bl	8020222 <lv_color_mix>
 80096d0:	4633      	mov	r3, r6
 80096d2:	b280      	uxth	r0, r0
                            last_dest_color.full = dest_buf[x].full;
 80096d4:	e001      	b.n	80096da <lv_draw_sw_blend_basic+0x592>
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 80096d6:	4549      	cmp	r1, r9
 80096d8:	d1f6      	bne.n	80096c8 <lv_draw_sw_blend_basic+0x580>
                        dest_buf[x] = last_res_color;
 80096da:	4649      	mov	r1, r9
 80096dc:	8028      	strh	r0, [r5, #0]
                for(x = 0; x < w; x++) {
 80096de:	3701      	adds	r7, #1
 80096e0:	3502      	adds	r5, #2
 80096e2:	9e05      	ldr	r6, [sp, #20]
 80096e4:	42b7      	cmp	r7, r6
 80096e6:	dbe2      	blt.n	80096ae <lv_draw_sw_blend_basic+0x566>
                dest_buf += dest_stride;
 80096e8:	9d08      	ldr	r5, [sp, #32]
            for(y = 0; y < h; y++) {
 80096ea:	f108 0801 	add.w	r8, r8, #1
                dest_buf += dest_stride;
 80096ee:	44ab      	add	fp, r5
                mask += (mask_stride - w);
 80096f0:	9d07      	ldr	r5, [sp, #28]
 80096f2:	44aa      	add	sl, r5
            for(y = 0; y < h; y++) {
 80096f4:	e7d4      	b.n	80096a0 <lv_draw_sw_blend_basic+0x558>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80096f6:	9a04      	ldr	r2, [sp, #16]
 80096f8:	e7e6      	b.n	80096c8 <lv_draw_sw_blend_basic+0x580>
    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
        if(opa >= LV_OPA_MAX) {
            for(y = 0; y < h; y++) {
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
                dest_buf += dest_stride;
 80096fa:	006a      	lsls	r2, r5, #1
 80096fc:	9209      	str	r2, [sp, #36]	; 0x24
                src_buf += src_stride;
 80096fe:	0072      	lsls	r2, r6, #1
 8009700:	9208      	str	r2, [sp, #32]
    if(mask == NULL) {
 8009702:	f1ba 0f00 	cmp.w	sl, #0
 8009706:	d12d      	bne.n	8009764 <lv_draw_sw_blend_basic+0x61c>
        if(opa >= LV_OPA_MAX) {
 8009708:	9b04      	ldr	r3, [sp, #16]
 800970a:	2bfc      	cmp	r3, #252	; 0xfc
 800970c:	d924      	bls.n	8009758 <lv_draw_sw_blend_basic+0x610>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 800970e:	9b05      	ldr	r3, [sp, #20]
 8009710:	005e      	lsls	r6, r3, #1
            for(y = 0; y < h; y++) {
 8009712:	9b06      	ldr	r3, [sp, #24]
 8009714:	459a      	cmp	sl, r3
 8009716:	f6bf adb7 	bge.w	8009288 <lv_draw_sw_blend_basic+0x140>
    return memcpy(dst, src, len);
 800971a:	4621      	mov	r1, r4
 800971c:	4658      	mov	r0, fp
 800971e:	4632      	mov	r2, r6
 8009720:	f10a 0a01 	add.w	sl, sl, #1
 8009724:	f010 fff1 	bl	801a70a <memcpy>
                dest_buf += dest_stride;
 8009728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800972a:	449b      	add	fp, r3
                src_buf += src_stride;
 800972c:	9b08      	ldr	r3, [sp, #32]
 800972e:	441c      	add	r4, r3
            for(y = 0; y < h; y++) {
 8009730:	e7ef      	b.n	8009712 <lv_draw_sw_blend_basic+0x5ca>
            }
        }
        else {
            for(y = 0; y < h; y++) {
                for(x = 0; x < w; x++) {
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 8009732:	f83b 1015 	ldrh.w	r1, [fp, r5, lsl #1]
 8009736:	f834 0015 	ldrh.w	r0, [r4, r5, lsl #1]
 800973a:	9a04      	ldr	r2, [sp, #16]
 800973c:	f016 fd71 	bl	8020222 <lv_color_mix>
 8009740:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
                for(x = 0; x < w; x++) {
 8009744:	3501      	adds	r5, #1
 8009746:	9b05      	ldr	r3, [sp, #20]
 8009748:	429d      	cmp	r5, r3
 800974a:	dbf2      	blt.n	8009732 <lv_draw_sw_blend_basic+0x5ea>
                }
                dest_buf += dest_stride;
 800974c:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 800974e:	f10a 0a01 	add.w	sl, sl, #1
                dest_buf += dest_stride;
 8009752:	449b      	add	fp, r3
                src_buf += src_stride;
 8009754:	9b08      	ldr	r3, [sp, #32]
 8009756:	441c      	add	r4, r3
            for(y = 0; y < h; y++) {
 8009758:	9b06      	ldr	r3, [sp, #24]
 800975a:	459a      	cmp	sl, r3
 800975c:	f6bf ad94 	bge.w	8009288 <lv_draw_sw_blend_basic+0x140>
                for(x = 0; x < w; x++) {
 8009760:	2500      	movs	r5, #0
 8009762:	e7f0      	b.n	8009746 <lv_draw_sw_blend_basic+0x5fe>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 8009764:	9a04      	ldr	r2, [sp, #16]
 8009766:	2afd      	cmp	r2, #253	; 0xfd
 8009768:	f240 80c3 	bls.w	80098f2 <lv_draw_sw_blend_basic+0x7aa>
            int32_t x_end4 = w - 4;
 800976c:	9a05      	ldr	r2, [sp, #20]
 800976e:	3a04      	subs	r2, #4
 8009770:	920a      	str	r2, [sp, #40]	; 0x28

            for(y = 0; y < h; y++) {
 8009772:	9304      	str	r3, [sp, #16]
 8009774:	9b04      	ldr	r3, [sp, #16]
 8009776:	9a06      	ldr	r2, [sp, #24]
 8009778:	4293      	cmp	r3, r2
 800977a:	f6bf ad85 	bge.w	8009288 <lv_draw_sw_blend_basic+0x140>
 800977e:	46d1      	mov	r9, sl
 8009780:	46a0      	mov	r8, r4
 8009782:	465f      	mov	r7, fp
#if 0
                for(x = 0; x < w; x++) {
                    MAP_NORMAL_MASK_PX(x);
                }
#else
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8009784:	2500      	movs	r5, #0
 8009786:	e015      	b.n	80097b4 <lv_draw_sw_blend_basic+0x66c>
                    MAP_NORMAL_MASK_PX(x)
 8009788:	8839      	ldrh	r1, [r7, #0]
 800978a:	f8b8 0000 	ldrh.w	r0, [r8]
 800978e:	f016 fd48 	bl	8020222 <lv_color_mix>
 8009792:	8038      	strh	r0, [r7, #0]
 8009794:	e00a      	b.n	80097ac <lv_draw_sw_blend_basic+0x664>
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8009796:	f019 0f03 	tst.w	r9, #3
 800979a:	d00f      	beq.n	80097bc <lv_draw_sw_blend_basic+0x674>
                    MAP_NORMAL_MASK_PX(x)
 800979c:	f819 2b01 	ldrb.w	r2, [r9], #1
 80097a0:	b122      	cbz	r2, 80097ac <lv_draw_sw_blend_basic+0x664>
 80097a2:	2aff      	cmp	r2, #255	; 0xff
 80097a4:	d1f0      	bne.n	8009788 <lv_draw_sw_blend_basic+0x640>
 80097a6:	f8b8 3000 	ldrh.w	r3, [r8]
 80097aa:	803b      	strh	r3, [r7, #0]
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80097ac:	3501      	adds	r5, #1
 80097ae:	f108 0802 	add.w	r8, r8, #2
 80097b2:	3702      	adds	r7, #2
 80097b4:	9b05      	ldr	r3, [sp, #20]
 80097b6:	464e      	mov	r6, r9
 80097b8:	429d      	cmp	r5, r3
 80097ba:	dbec      	blt.n	8009796 <lv_draw_sw_blend_basic+0x64e>
 80097bc:	eb04 0845 	add.w	r8, r4, r5, lsl #1
 80097c0:	eb0b 0745 	add.w	r7, fp, r5, lsl #1
                }

                uint32_t * mask32 = (uint32_t *)mask_tmp_x;
                for(; x < x_end4; x += 4) {
 80097c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c6:	42ab      	cmp	r3, r5
 80097c8:	dc10      	bgt.n	80097ec <lv_draw_sw_blend_basic+0x6a4>
 80097ca:	3e01      	subs	r6, #1
 80097cc:	eb04 0845 	add.w	r8, r4, r5, lsl #1
 80097d0:	eb0b 0745 	add.w	r7, fp, r5, lsl #1
                    }
                    mask32++;
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
                for(; x < w ; x++) {
 80097d4:	9b05      	ldr	r3, [sp, #20]
 80097d6:	429d      	cmp	r5, r3
 80097d8:	db54      	blt.n	8009884 <lv_draw_sw_blend_basic+0x73c>
                    MAP_NORMAL_MASK_PX(x)
                }
#endif
                dest_buf += dest_stride;
 80097da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097dc:	449b      	add	fp, r3
                src_buf += src_stride;
 80097de:	9b08      	ldr	r3, [sp, #32]
 80097e0:	441c      	add	r4, r3
                mask += mask_stride;
 80097e2:	9b07      	ldr	r3, [sp, #28]
 80097e4:	449a      	add	sl, r3
            for(y = 0; y < h; y++) {
 80097e6:	9b04      	ldr	r3, [sp, #16]
 80097e8:	3301      	adds	r3, #1
 80097ea:	e7c2      	b.n	8009772 <lv_draw_sw_blend_basic+0x62a>
                    if(*mask32) {
 80097ec:	6833      	ldr	r3, [r6, #0]
 80097ee:	b16b      	cbz	r3, 800980c <lv_draw_sw_blend_basic+0x6c4>
                        if((*mask32) == 0xFFFFFFFF) {
 80097f0:	3301      	adds	r3, #1
 80097f2:	d111      	bne.n	8009818 <lv_draw_sw_blend_basic+0x6d0>
                            dest_buf[x] = src_buf[x];
 80097f4:	f8b8 3000 	ldrh.w	r3, [r8]
 80097f8:	803b      	strh	r3, [r7, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 80097fa:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80097fe:	807b      	strh	r3, [r7, #2]
                            dest_buf[x + 2] = src_buf[x + 2];
 8009800:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8009804:	80bb      	strh	r3, [r7, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 8009806:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800980a:	80fb      	strh	r3, [r7, #6]
                    mask32++;
 800980c:	3604      	adds	r6, #4
                for(; x < x_end4; x += 4) {
 800980e:	3504      	adds	r5, #4
 8009810:	f108 0808 	add.w	r8, r8, #8
 8009814:	3708      	adds	r7, #8
 8009816:	e7d5      	b.n	80097c4 <lv_draw_sw_blend_basic+0x67c>
                            MAP_NORMAL_MASK_PX(x)
 8009818:	7832      	ldrb	r2, [r6, #0]
 800981a:	b122      	cbz	r2, 8009826 <lv_draw_sw_blend_basic+0x6de>
 800981c:	2aff      	cmp	r2, #255	; 0xff
 800981e:	d11c      	bne.n	800985a <lv_draw_sw_blend_basic+0x712>
 8009820:	f8b8 3000 	ldrh.w	r3, [r8]
 8009824:	803b      	strh	r3, [r7, #0]
                            MAP_NORMAL_MASK_PX(x + 1)
 8009826:	7872      	ldrb	r2, [r6, #1]
 8009828:	b122      	cbz	r2, 8009834 <lv_draw_sw_blend_basic+0x6ec>
 800982a:	2aff      	cmp	r2, #255	; 0xff
 800982c:	d11c      	bne.n	8009868 <lv_draw_sw_blend_basic+0x720>
 800982e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8009832:	807b      	strh	r3, [r7, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 8009834:	78b2      	ldrb	r2, [r6, #2]
 8009836:	b122      	cbz	r2, 8009842 <lv_draw_sw_blend_basic+0x6fa>
 8009838:	2aff      	cmp	r2, #255	; 0xff
 800983a:	d11c      	bne.n	8009876 <lv_draw_sw_blend_basic+0x72e>
 800983c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8009840:	80bb      	strh	r3, [r7, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 8009842:	78f2      	ldrb	r2, [r6, #3]
 8009844:	2a00      	cmp	r2, #0
 8009846:	d0e1      	beq.n	800980c <lv_draw_sw_blend_basic+0x6c4>
 8009848:	2aff      	cmp	r2, #255	; 0xff
 800984a:	d0dc      	beq.n	8009806 <lv_draw_sw_blend_basic+0x6be>
 800984c:	88f9      	ldrh	r1, [r7, #6]
 800984e:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 8009852:	f016 fce6 	bl	8020222 <lv_color_mix>
 8009856:	80f8      	strh	r0, [r7, #6]
 8009858:	e7d8      	b.n	800980c <lv_draw_sw_blend_basic+0x6c4>
                            MAP_NORMAL_MASK_PX(x)
 800985a:	8839      	ldrh	r1, [r7, #0]
 800985c:	f8b8 0000 	ldrh.w	r0, [r8]
 8009860:	f016 fcdf 	bl	8020222 <lv_color_mix>
 8009864:	8038      	strh	r0, [r7, #0]
 8009866:	e7de      	b.n	8009826 <lv_draw_sw_blend_basic+0x6de>
                            MAP_NORMAL_MASK_PX(x + 1)
 8009868:	8879      	ldrh	r1, [r7, #2]
 800986a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800986e:	f016 fcd8 	bl	8020222 <lv_color_mix>
 8009872:	8078      	strh	r0, [r7, #2]
 8009874:	e7de      	b.n	8009834 <lv_draw_sw_blend_basic+0x6ec>
                            MAP_NORMAL_MASK_PX(x + 2)
 8009876:	88b9      	ldrh	r1, [r7, #4]
 8009878:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800987c:	f016 fcd1 	bl	8020222 <lv_color_mix>
 8009880:	80b8      	strh	r0, [r7, #4]
 8009882:	e7de      	b.n	8009842 <lv_draw_sw_blend_basic+0x6fa>
                    MAP_NORMAL_MASK_PX(x)
 8009884:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8009888:	b122      	cbz	r2, 8009894 <lv_draw_sw_blend_basic+0x74c>
 800988a:	2aff      	cmp	r2, #255	; 0xff
 800988c:	d107      	bne.n	800989e <lv_draw_sw_blend_basic+0x756>
 800988e:	f8b8 3000 	ldrh.w	r3, [r8]
 8009892:	803b      	strh	r3, [r7, #0]
                for(; x < w ; x++) {
 8009894:	3501      	adds	r5, #1
 8009896:	f108 0802 	add.w	r8, r8, #2
 800989a:	3702      	adds	r7, #2
 800989c:	e79a      	b.n	80097d4 <lv_draw_sw_blend_basic+0x68c>
                    MAP_NORMAL_MASK_PX(x)
 800989e:	8839      	ldrh	r1, [r7, #0]
 80098a0:	f8b8 0000 	ldrh.w	r0, [r8]
 80098a4:	f016 fcbd 	bl	8020222 <lv_color_mix>
 80098a8:	8038      	strh	r0, [r7, #0]
 80098aa:	e7f3      	b.n	8009894 <lv_draw_sw_blend_basic+0x74c>
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < h; y++) {
                for(x = 0; x < w; x++) {
                    if(mask[x]) {
 80098ac:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80098b0:	b172      	cbz	r2, 80098d0 <lv_draw_sw_blend_basic+0x788>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 80098b2:	2afc      	cmp	r2, #252	; 0xfc
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 80098b4:	f83b 1016 	ldrh.w	r1, [fp, r6, lsl #1]
 80098b8:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 80098bc:	bf97      	itett	ls
 80098be:	9b04      	ldrls	r3, [sp, #16]
 80098c0:	9a04      	ldrhi	r2, [sp, #16]
 80098c2:	fb13 f202 	smulbbls	r2, r3, r2
 80098c6:	0a12      	lsrls	r2, r2, #8
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 80098c8:	f016 fcab 	bl	8020222 <lv_color_mix>
 80098cc:	f82b 0016 	strh.w	r0, [fp, r6, lsl #1]
                for(x = 0; x < w; x++) {
 80098d0:	3601      	adds	r6, #1
 80098d2:	9b05      	ldr	r3, [sp, #20]
 80098d4:	429e      	cmp	r6, r3
 80098d6:	dbe9      	blt.n	80098ac <lv_draw_sw_blend_basic+0x764>
                    }
                }
                dest_buf += dest_stride;
 80098d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 80098da:	3501      	adds	r5, #1
                dest_buf += dest_stride;
 80098dc:	449b      	add	fp, r3
                src_buf += src_stride;
 80098de:	9b08      	ldr	r3, [sp, #32]
 80098e0:	441c      	add	r4, r3
                mask += mask_stride;
 80098e2:	9b07      	ldr	r3, [sp, #28]
 80098e4:	449a      	add	sl, r3
            for(y = 0; y < h; y++) {
 80098e6:	9b06      	ldr	r3, [sp, #24]
 80098e8:	429d      	cmp	r5, r3
 80098ea:	f6bf accd 	bge.w	8009288 <lv_draw_sw_blend_basic+0x140>
                for(x = 0; x < w; x++) {
 80098ee:	2600      	movs	r6, #0
 80098f0:	e7ef      	b.n	80098d2 <lv_draw_sw_blend_basic+0x78a>
            for(y = 0; y < h; y++) {
 80098f2:	461d      	mov	r5, r3
 80098f4:	e7f7      	b.n	80098e6 <lv_draw_sw_blend_basic+0x79e>
        if(dsc->src_buf == NULL) {
 80098f6:	3b01      	subs	r3, #1
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2f00      	cmp	r7, #0
 80098fc:	d169      	bne.n	80099d2 <lv_draw_sw_blend_basic+0x88a>
            fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
 80098fe:	2b02      	cmp	r3, #2
 8009900:	f8b8 8008 	ldrh.w	r8, [r8, #8]
    switch(blend_mode) {
 8009904:	f63f acc0 	bhi.w	8009288 <lv_draw_sw_blend_basic+0x140>
 8009908:	4a76      	ldr	r2, [pc, #472]	; (8009ae4 <lv_draw_sw_blend_basic+0x99c>)
            last_dest_color.full = dest_buf[0].full;
 800990a:	f8bb 6000 	ldrh.w	r6, [fp]
 800990e:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
            dest_buf += dest_stride;
 8009912:	006b      	lsls	r3, r5, #1
 8009914:	9308      	str	r3, [sp, #32]
    if(mask == NULL) {
 8009916:	f1ba 0f00 	cmp.w	sl, #0
 800991a:	d11f      	bne.n	800995c <lv_draw_sw_blend_basic+0x814>
        for(y = 0; y < h; y++) {
 800991c:	46d1      	mov	r9, sl
        lv_color_t last_res_color = blend_fp(color, dest_buf[0], opa);
 800991e:	9a04      	ldr	r2, [sp, #16]
 8009920:	4631      	mov	r1, r6
 8009922:	4640      	mov	r0, r8
 8009924:	47b8      	blx	r7
        for(y = 0; y < h; y++) {
 8009926:	9b06      	ldr	r3, [sp, #24]
 8009928:	4599      	cmp	r9, r3
 800992a:	f6bf acad 	bge.w	8009288 <lv_draw_sw_blend_basic+0x140>
 800992e:	465d      	mov	r5, fp
            for(x = 0; x < w; x++) {
 8009930:	2400      	movs	r4, #0
 8009932:	e00b      	b.n	800994c <lv_draw_sw_blend_basic+0x804>
                if(last_dest_color.full != dest_buf[x].full) {
 8009934:	f8b5 a000 	ldrh.w	sl, [r5]
 8009938:	45b2      	cmp	sl, r6
 800993a:	d003      	beq.n	8009944 <lv_draw_sw_blend_basic+0x7fc>
                    last_res_color = blend_fp(color, dest_buf[x], opa);
 800993c:	9a04      	ldr	r2, [sp, #16]
 800993e:	4651      	mov	r1, sl
 8009940:	4640      	mov	r0, r8
 8009942:	47b8      	blx	r7
            for(x = 0; x < w; x++) {
 8009944:	3401      	adds	r4, #1
 8009946:	4656      	mov	r6, sl
                dest_buf[x] = last_res_color;
 8009948:	f825 0b02 	strh.w	r0, [r5], #2
            for(x = 0; x < w; x++) {
 800994c:	9b05      	ldr	r3, [sp, #20]
 800994e:	429c      	cmp	r4, r3
 8009950:	dbf0      	blt.n	8009934 <lv_draw_sw_blend_basic+0x7ec>
            dest_buf += dest_stride;
 8009952:	9b08      	ldr	r3, [sp, #32]
        for(y = 0; y < h; y++) {
 8009954:	f109 0901 	add.w	r9, r9, #1
            dest_buf += dest_stride;
 8009958:	449b      	add	fp, r3
        for(y = 0; y < h; y++) {
 800995a:	e7e4      	b.n	8009926 <lv_draw_sw_blend_basic+0x7de>
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 800995c:	f89a 2000 	ldrb.w	r2, [sl]
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 8009960:	4631      	mov	r1, r6
 8009962:	4640      	mov	r0, r8
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 8009964:	2afc      	cmp	r2, #252	; 0xfc
 8009966:	bf97      	itett	ls
 8009968:	9b04      	ldrls	r3, [sp, #16]
 800996a:	9a04      	ldrhi	r2, [sp, #16]
 800996c:	fb12 f203 	smulbbls	r2, r2, r3
 8009970:	0a12      	lsrls	r2, r2, #8
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 8009972:	47b8      	blx	r7
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8009974:	2300      	movs	r3, #0
        for(y = 0; y < h; y++) {
 8009976:	4699      	mov	r9, r3
 8009978:	9a06      	ldr	r2, [sp, #24]
 800997a:	4591      	cmp	r9, r2
 800997c:	f6bf ac84 	bge.w	8009288 <lv_draw_sw_blend_basic+0x140>
            for(x = 0; x < w; x++) {
 8009980:	f1ca 0201 	rsb	r2, sl, #1
 8009984:	f10a 35ff 	add.w	r5, sl, #4294967295
 8009988:	465c      	mov	r4, fp
 800998a:	9209      	str	r2, [sp, #36]	; 0x24
 800998c:	e015      	b.n	80099ba <lv_draw_sw_blend_basic+0x872>
                if(mask[x] == 0) continue;
 800998e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8009992:	b18a      	cbz	r2, 80099b8 <lv_draw_sw_blend_basic+0x870>
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 8009994:	429a      	cmp	r2, r3
 8009996:	d102      	bne.n	800999e <lv_draw_sw_blend_basic+0x856>
 8009998:	8821      	ldrh	r1, [r4, #0]
 800999a:	42b1      	cmp	r1, r6
 800999c:	d00b      	beq.n	80099b6 <lv_draw_sw_blend_basic+0x86e>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 800999e:	2afc      	cmp	r2, #252	; 0xfc
                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 80099a0:	8821      	ldrh	r1, [r4, #0]
 80099a2:	4640      	mov	r0, r8
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 80099a4:	bf97      	itett	ls
 80099a6:	9b04      	ldrls	r3, [sp, #16]
 80099a8:	9a04      	ldrhi	r2, [sp, #16]
 80099aa:	fb12 f203 	smulbbls	r2, r2, r3
 80099ae:	0a12      	lsrls	r2, r2, #8
                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 80099b0:	47b8      	blx	r7
                    last_mask = mask[x];
 80099b2:	782b      	ldrb	r3, [r5, #0]
                    last_dest_color.full = dest_buf[x].full;
 80099b4:	8826      	ldrh	r6, [r4, #0]
                dest_buf[x] = last_res_color;
 80099b6:	8020      	strh	r0, [r4, #0]
            for(x = 0; x < w; x++) {
 80099b8:	3402      	adds	r4, #2
 80099ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099bc:	9905      	ldr	r1, [sp, #20]
 80099be:	442a      	add	r2, r5
 80099c0:	428a      	cmp	r2, r1
 80099c2:	dbe4      	blt.n	800998e <lv_draw_sw_blend_basic+0x846>
            dest_buf += dest_stride;
 80099c4:	9a08      	ldr	r2, [sp, #32]
        for(y = 0; y < h; y++) {
 80099c6:	f109 0901 	add.w	r9, r9, #1
            dest_buf += dest_stride;
 80099ca:	4493      	add	fp, r2
            mask += mask_stride;
 80099cc:	9a07      	ldr	r2, [sp, #28]
 80099ce:	4492      	add	sl, r2
        for(y = 0; y < h; y++) {
 80099d0:	e7d2      	b.n	8009978 <lv_draw_sw_blend_basic+0x830>

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	f63f ac58 	bhi.w	8009288 <lv_draw_sw_blend_basic+0x140>
 80099d8:	4a43      	ldr	r2, [pc, #268]	; (8009ae8 <lv_draw_sw_blend_basic+0x9a0>)
            last_dest_color.full = dest_buf[0].full;
 80099da:	f8bb 7000 	ldrh.w	r7, [fp]
 80099de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099e2:	9309      	str	r3, [sp, #36]	; 0x24
    lv_color_t last_dest_color;
    lv_color_t last_src_color;
    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
        last_dest_color = dest_buf[0];
        last_src_color = src_buf[0];
 80099e4:	8823      	ldrh	r3, [r4, #0]
 80099e6:	9308      	str	r3, [sp, #32]
                    last_src_color = src_buf[x];
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
                }
                dest_buf[x] = last_res_color;
            }
            dest_buf += dest_stride;
 80099e8:	006b      	lsls	r3, r5, #1
 80099ea:	930b      	str	r3, [sp, #44]	; 0x2c
            src_buf += src_stride;
 80099ec:	0073      	lsls	r3, r6, #1
 80099ee:	930c      	str	r3, [sp, #48]	; 0x30
    if(mask == NULL) {
 80099f0:	f1ba 0f00 	cmp.w	sl, #0
 80099f4:	d12c      	bne.n	8009a50 <lv_draw_sw_blend_basic+0x908>
        for(y = 0; y < h; y++) {
 80099f6:	46d0      	mov	r8, sl
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 80099f8:	9a04      	ldr	r2, [sp, #16]
 80099fa:	4639      	mov	r1, r7
 80099fc:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8009a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a02:	4798      	blx	r3
        for(y = 0; y < h; y++) {
 8009a04:	9b06      	ldr	r3, [sp, #24]
 8009a06:	4598      	cmp	r8, r3
 8009a08:	f6bf ac3e 	bge.w	8009288 <lv_draw_sw_blend_basic+0x140>
 8009a0c:	f1ab 0602 	sub.w	r6, fp, #2
            for(x = 0; x < w; x++) {
 8009a10:	2500      	movs	r5, #0
 8009a12:	e013      	b.n	8009a3c <lv_draw_sw_blend_basic+0x8f4>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 8009a14:	f834 a015 	ldrh.w	sl, [r4, r5, lsl #1]
 8009a18:	9b08      	ldr	r3, [sp, #32]
 8009a1a:	f8b6 9002 	ldrh.w	r9, [r6, #2]
 8009a1e:	459a      	cmp	sl, r3
 8009a20:	d101      	bne.n	8009a26 <lv_draw_sw_blend_basic+0x8de>
 8009a22:	454f      	cmp	r7, r9
 8009a24:	d006      	beq.n	8009a34 <lv_draw_sw_blend_basic+0x8ec>
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 8009a26:	9a04      	ldr	r2, [sp, #16]
 8009a28:	4649      	mov	r1, r9
 8009a2a:	4650      	mov	r0, sl
 8009a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a2e:	4798      	blx	r3
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 8009a30:	f8cd a020 	str.w	sl, [sp, #32]
            for(x = 0; x < w; x++) {
 8009a34:	3501      	adds	r5, #1
 8009a36:	464f      	mov	r7, r9
                dest_buf[x] = last_res_color;
 8009a38:	f826 0f02 	strh.w	r0, [r6, #2]!
            for(x = 0; x < w; x++) {
 8009a3c:	9b05      	ldr	r3, [sp, #20]
 8009a3e:	429d      	cmp	r5, r3
 8009a40:	dbe8      	blt.n	8009a14 <lv_draw_sw_blend_basic+0x8cc>
            dest_buf += dest_stride;
 8009a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        for(y = 0; y < h; y++) {
 8009a44:	f108 0801 	add.w	r8, r8, #1
            dest_buf += dest_stride;
 8009a48:	449b      	add	fp, r3
            src_buf += src_stride;
 8009a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a4c:	441c      	add	r4, r3
        for(y = 0; y < h; y++) {
 8009a4e:	e7d9      	b.n	8009a04 <lv_draw_sw_blend_basic+0x8bc>
    }
    /*Masked*/
    else {
        last_dest_color = dest_buf[0];
        last_src_color = src_buf[0];
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 8009a50:	f89a 3000 	ldrb.w	r3, [sl]
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 8009a54:	4639      	mov	r1, r7
 8009a56:	f8bd 0020 	ldrh.w	r0, [sp, #32]
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 8009a5a:	2bfc      	cmp	r3, #252	; 0xfc
 8009a5c:	bf97      	itett	ls
 8009a5e:	9a04      	ldrls	r2, [sp, #16]
 8009a60:	9b04      	ldrhi	r3, [sp, #16]
 8009a62:	fb12 f303 	smulbbls	r3, r2, r3
 8009a66:	0a1b      	lsrls	r3, r3, #8
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 8009a68:	461a      	mov	r2, r3
 8009a6a:	930d      	str	r3, [sp, #52]	; 0x34
 8009a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a6e:	4798      	blx	r3
        for(y = 0; y < h; y++) {
 8009a70:	2300      	movs	r3, #0
 8009a72:	930a      	str	r3, [sp, #40]	; 0x28
 8009a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a78:	9906      	ldr	r1, [sp, #24]
 8009a7a:	428a      	cmp	r2, r1
 8009a7c:	f6bf ac04 	bge.w	8009288 <lv_draw_sw_blend_basic+0x140>
            for(x = 0; x < w; x++) {
 8009a80:	2500      	movs	r5, #0
 8009a82:	e022      	b.n	8009aca <lv_draw_sw_blend_basic+0x982>
                if(mask[x] == 0) continue;
 8009a84:	f81a 2005 	ldrb.w	r2, [sl, r5]
 8009a88:	b1f2      	cbz	r2, 8009ac8 <lv_draw_sw_blend_basic+0x980>
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8009a8a:	2afc      	cmp	r2, #252	; 0xfc
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 8009a8c:	f834 8015 	ldrh.w	r8, [r4, r5, lsl #1]
 8009a90:	f83b 6015 	ldrh.w	r6, [fp, r5, lsl #1]
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8009a94:	bf97      	itett	ls
 8009a96:	9904      	ldrls	r1, [sp, #16]
 8009a98:	f8dd 9010 	ldrhi.w	r9, [sp, #16]
 8009a9c:	fb11 f202 	smulbbls	r2, r1, r2
 8009aa0:	ea4f 2912 	movls.w	r9, r2, lsr #8
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 8009aa4:	9a08      	ldr	r2, [sp, #32]
 8009aa6:	4590      	cmp	r8, r2
 8009aa8:	d103      	bne.n	8009ab2 <lv_draw_sw_blend_basic+0x96a>
 8009aaa:	42b7      	cmp	r7, r6
 8009aac:	d101      	bne.n	8009ab2 <lv_draw_sw_blend_basic+0x96a>
 8009aae:	454b      	cmp	r3, r9
 8009ab0:	d006      	beq.n	8009ac0 <lv_draw_sw_blend_basic+0x978>
                    last_dest_color = dest_buf[x];
                    last_src_color = src_buf[x];
                    last_opa = opa_tmp;
                    last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 8009ab2:	464a      	mov	r2, r9
 8009ab4:	4631      	mov	r1, r6
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aba:	4798      	blx	r3
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 8009abc:	f8cd 8020 	str.w	r8, [sp, #32]
                }
                dest_buf[x] = last_res_color;
 8009ac0:	4637      	mov	r7, r6
 8009ac2:	464b      	mov	r3, r9
 8009ac4:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
            for(x = 0; x < w; x++) {
 8009ac8:	3501      	adds	r5, #1
 8009aca:	9a05      	ldr	r2, [sp, #20]
 8009acc:	4295      	cmp	r5, r2
 8009ace:	dbd9      	blt.n	8009a84 <lv_draw_sw_blend_basic+0x93c>
            }
            dest_buf += dest_stride;
 8009ad0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ad2:	4493      	add	fp, r2
            src_buf += src_stride;
 8009ad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ad6:	4414      	add	r4, r2
            mask += mask_stride;
 8009ad8:	9a07      	ldr	r2, [sp, #28]
 8009ada:	4492      	add	sl, r2
        for(y = 0; y < h; y++) {
 8009adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ade:	3201      	adds	r2, #1
 8009ae0:	920a      	str	r2, [sp, #40]	; 0x28
 8009ae2:	e7c8      	b.n	8009a76 <lv_draw_sw_blend_basic+0x92e>
 8009ae4:	08028dd4 	.word	0x08028dd4
 8009ae8:	08028dd4 	.word	0x08028dd4

08009aec <iterate_cache>:
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
    else return (lv_grad_t *)((uint8_t *)item + s);
}

static lv_res_t iterate_cache(op_cache_t func, void * ctx, lv_grad_t ** out)
{
 8009aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(grad_cache_size == 0) return NULL;
 8009af0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8009b4c <iterate_cache+0x60>
{
 8009af4:	4606      	mov	r6, r0
 8009af6:	460f      	mov	r7, r1
 8009af8:	4615      	mov	r5, r2
    if(grad_cache_size == 0) return NULL;
 8009afa:	f8d8 3000 	ldr.w	r3, [r8]
 8009afe:	b31b      	cbz	r3, 8009b48 <iterate_cache+0x5c>
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
 8009b00:	4b13      	ldr	r3, [pc, #76]	; (8009b50 <iterate_cache+0x64>)
 8009b02:	681c      	ldr	r4, [r3, #0]
    lv_grad_t * first = next_in_cache(NULL);
    while(first != NULL && first->life) {
 8009b04:	b304      	cbz	r4, 8009b48 <iterate_cache+0x5c>
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009b06:	f04f 0902 	mov.w	r9, #2
 8009b0a:	f04f 0a03 	mov.w	sl, #3
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 8009b0e:	f8df b044 	ldr.w	fp, [pc, #68]	; 8009b54 <iterate_cache+0x68>
    while(first != NULL && first->life) {
 8009b12:	6863      	ldr	r3, [r4, #4]
 8009b14:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 8009b18:	d016      	beq.n	8009b48 <iterate_cache+0x5c>
        if((*func)(first, ctx) == LV_RES_OK) {
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	47b0      	blx	r6
 8009b20:	2801      	cmp	r0, #1
 8009b22:	d103      	bne.n	8009b2c <iterate_cache+0x40>
            if(out != NULL) *out = first;
 8009b24:	b105      	cbz	r5, 8009b28 <iterate_cache+0x3c>
 8009b26:	602c      	str	r4, [r5, #0]
            return LV_RES_OK;
        }
        first = next_in_cache(first);
    }
    return LV_RES_INV;
}
 8009b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(grad_cache_size == 0) return NULL;
 8009b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b30:	b153      	cbz	r3, 8009b48 <iterate_cache+0x5c>
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	fb13 a309 	smlabb	r3, r3, r9, sl
 8009b38:	f023 0303 	bic.w	r3, r3, #3
 8009b3c:	3310      	adds	r3, #16
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 8009b3e:	441c      	add	r4, r3
 8009b40:	f8db 3000 	ldr.w	r3, [fp]
 8009b44:	429c      	cmp	r4, r3
 8009b46:	d3e4      	bcc.n	8009b12 <iterate_cache+0x26>
    return LV_RES_INV;
 8009b48:	2000      	movs	r0, #0
 8009b4a:	e7ed      	b.n	8009b28 <iterate_cache+0x3c>
 8009b4c:	2400116c 	.word	0x2400116c
 8009b50:	24001204 	.word	0x24001204
 8009b54:	24001168 	.word	0x24001168

08009b58 <kill_oldest_item>:
        lv_memset_00(old + next_items_size, size);
    }
}

static lv_res_t kill_oldest_item(lv_grad_t * c, void * ctx)
{
 8009b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t * min_life = (uint32_t *)ctx;
    if(c->life == *min_life) {
 8009b5c:	6843      	ldr	r3, [r0, #4]
{
 8009b5e:	4605      	mov	r5, r0
    if(c->life == *min_life) {
 8009b60:	680a      	ldr	r2, [r1, #0]
 8009b62:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d136      	bne.n	8009bd8 <kill_oldest_item+0x80>
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009b6a:	8984      	ldrh	r4, [r0, #12]
 8009b6c:	f04f 0802 	mov.w	r8, #2
 8009b70:	f04f 0903 	mov.w	r9, #3
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 8009b74:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009bdc <kill_oldest_item+0x84>
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009b78:	fb14 9408 	smlabb	r4, r4, r8, r9
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 8009b7c:	f8da 3000 	ldr.w	r3, [sl]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009b80:	f024 0403 	bic.w	r4, r4, #3
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 8009b84:	1a1e      	subs	r6, r3, r0
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009b86:	f104 0710 	add.w	r7, r4, #16
    grad_cache_end -= size;
 8009b8a:	f1c4 24ff 	rsb	r4, r4, #4278255360	; 0xff00ff00
 8009b8e:	f504 047f 	add.w	r4, r4, #16711680	; 0xff0000
    if(next_items_size) {
 8009b92:	1bf6      	subs	r6, r6, r7
    grad_cache_end -= size;
 8009b94:	f104 04f0 	add.w	r4, r4, #240	; 0xf0
 8009b98:	4423      	add	r3, r4
 8009b9a:	f8ca 3000 	str.w	r3, [sl]
    if(next_items_size) {
 8009b9e:	d00d      	beq.n	8009bbc <kill_oldest_item+0x64>
 8009ba0:	4632      	mov	r2, r6
 8009ba2:	19c1      	adds	r1, r0, r7
 8009ba4:	f010 fdb1 	bl	801a70a <memcpy>
        while((uint8_t *)c != grad_cache_end) {
 8009ba8:	f8da 1000 	ldr.w	r1, [sl]
 8009bac:	462a      	mov	r2, r5
 8009bae:	428a      	cmp	r2, r1
 8009bb0:	d107      	bne.n	8009bc2 <kill_oldest_item+0x6a>
    memset(dst, 0x00, len);
 8009bb2:	463a      	mov	r2, r7
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	19a8      	adds	r0, r5, r6
 8009bb8:	f010 fdb2 	bl	801a720 <memset>
        /*Found, let's kill it*/
        free_item(c);
        return LV_RES_OK;
 8009bbc:	2001      	movs	r0, #1
    }
    return LV_RES_INV;
}
 8009bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 8009bc2:	6893      	ldr	r3, [r2, #8]
 8009bc4:	4423      	add	r3, r4
 8009bc6:	6093      	str	r3, [r2, #8]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8009bc8:	8993      	ldrh	r3, [r2, #12]
 8009bca:	fb13 9308 	smlabb	r3, r3, r8, r9
 8009bce:	f023 0303 	bic.w	r3, r3, #3
 8009bd2:	3310      	adds	r3, #16
            c = (lv_grad_t *)(((uint8_t *)c) + get_cache_item_size(c));
 8009bd4:	441a      	add	r2, r3
 8009bd6:	e7ea      	b.n	8009bae <kill_oldest_item+0x56>
    return LV_RES_INV;
 8009bd8:	2000      	movs	r0, #0
 8009bda:	e7f0      	b.n	8009bbe <kill_oldest_item+0x66>
 8009bdc:	24001168 	.word	0x24001168

08009be0 <lv_gradient_set_cache_size>:
    LV_GC_ROOT(_lv_grad_cache_mem) = grad_cache_end = NULL;
    grad_cache_size = 0;
}

void lv_gradient_set_cache_size(size_t max_bytes)
{
 8009be0:	b538      	push	{r3, r4, r5, lr}
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 8009be2:	4d0a      	ldr	r5, [pc, #40]	; (8009c0c <lv_gradient_set_cache_size+0x2c>)
{
 8009be4:	4604      	mov	r4, r0
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 8009be6:	6828      	ldr	r0, [r5, #0]
 8009be8:	f008 fd80 	bl	80126ec <lv_mem_free>
    grad_cache_end = LV_GC_ROOT(_lv_grad_cache_mem) = lv_mem_alloc(max_bytes);
 8009bec:	4620      	mov	r0, r4
 8009bee:	f008 fd5f 	bl	80126b0 <lv_mem_alloc>
 8009bf2:	4a07      	ldr	r2, [pc, #28]	; (8009c10 <lv_gradient_set_cache_size+0x30>)
 8009bf4:	6028      	str	r0, [r5, #0]
 8009bf6:	6010      	str	r0, [r2, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 8009bf8:	b900      	cbnz	r0, 8009bfc <lv_gradient_set_cache_size+0x1c>
 8009bfa:	e7fe      	b.n	8009bfa <lv_gradient_set_cache_size+0x1a>
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	2100      	movs	r1, #0
 8009c00:	f010 fd8e 	bl	801a720 <memset>
    lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
    grad_cache_size = max_bytes;
 8009c04:	4b03      	ldr	r3, [pc, #12]	; (8009c14 <lv_gradient_set_cache_size+0x34>)
 8009c06:	601c      	str	r4, [r3, #0]
}
 8009c08:	bd38      	pop	{r3, r4, r5, pc}
 8009c0a:	bf00      	nop
 8009c0c:	24001204 	.word	0x24001204
 8009c10:	24001168 	.word	0x24001168
 8009c14:	2400116c 	.word	0x2400116c

08009c18 <lv_gradient_get>:

lv_grad_t * lv_gradient_get(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* No gradient, no cache */
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 8009c1c:	7a44      	ldrb	r4, [r0, #9]
{
 8009c1e:	b087      	sub	sp, #28
 8009c20:	4607      	mov	r7, r0
 8009c22:	460d      	mov	r5, r1
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 8009c24:	f014 0407 	ands.w	r4, r4, #7
{
 8009c28:	4616      	mov	r6, r2
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 8009c2a:	d023      	beq.n	8009c74 <lv_gradient_get+0x5c>

    /* Step 0: Check if the cache exist (else create it) */
    static bool inited = false;
    if(!inited) {
 8009c2c:	4c51      	ldr	r4, [pc, #324]	; (8009d74 <lv_gradient_get+0x15c>)
 8009c2e:	7820      	ldrb	r0, [r4, #0]
 8009c30:	b918      	cbnz	r0, 8009c3a <lv_gradient_get+0x22>
        lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 8009c32:	f7ff ffd5 	bl	8009be0 <lv_gradient_set_cache_size>
        inited = true;
 8009c36:	2301      	movs	r3, #1
 8009c38:	7023      	strb	r3, [r4, #0]
    }

    /* Step 1: Search cache for the given key */
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009c3a:	7a7a      	ldrb	r2, [r7, #9]
 8009c3c:	ea87 0965 	eor.w	r9, r7, r5, asr #1
    uint32_t key = compute_key(g, size, w);
    lv_grad_t * item = NULL;
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 8009c40:	a903      	add	r1, sp, #12
 8009c42:	484d      	ldr	r0, [pc, #308]	; (8009d78 <lv_gradient_get+0x160>)
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009c44:	f002 0207 	and.w	r2, r2, #7
 8009c48:	2a02      	cmp	r2, #2
 8009c4a:	bf14      	ite	ne
 8009c4c:	4633      	movne	r3, r6
 8009c4e:	462b      	moveq	r3, r5
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 8009c50:	aa04      	add	r2, sp, #16
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 8009c52:	ea83 0309 	eor.w	r3, r3, r9
    uint32_t key = compute_key(g, size, w);
 8009c56:	9303      	str	r3, [sp, #12]
    lv_grad_t * item = NULL;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	9304      	str	r3, [sp, #16]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 8009c5c:	f7ff ff46 	bl	8009aec <iterate_cache>
 8009c60:	2801      	cmp	r0, #1
 8009c62:	f04f 0300 	mov.w	r3, #0
 8009c66:	d109      	bne.n	8009c7c <lv_gradient_get+0x64>
        item->life++; /* Don't forget to bump the counter */
 8009c68:	9c04      	ldr	r4, [sp, #16]
 8009c6a:	6863      	ldr	r3, [r4, #4]
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	f362 031d 	bfi	r3, r2, #0, #30
 8009c72:	6063      	str	r3, [r4, #4]
        item->map[i] = lv_gradient_calculate(g, item->size, i);
    }
#endif

    return item;
}
 8009c74:	4620      	mov	r0, r4
 8009c76:	b007      	add	sp, #28
 8009c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009c7c:	7a7a      	ldrb	r2, [r7, #9]
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8009c7e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8009d7c <lv_gradient_get+0x164>
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009c82:	f002 0207 	and.w	r2, r2, #7
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8009c86:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8009d80 <lv_gradient_get+0x168>
 8009c8a:	f8d8 4000 	ldr.w	r4, [r8]
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009c8e:	2a02      	cmp	r2, #2
 8009c90:	bf14      	ite	ne
 8009c92:	4632      	movne	r2, r6
 8009c94:	462a      	moveq	r2, r5
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 8009c96:	42ae      	cmp	r6, r5
    if(req_size + act_size < grad_cache_size) {
 8009c98:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8009d84 <lv_gradient_get+0x16c>
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 8009c9c:	bfb8      	it	lt
 8009c9e:	462e      	movlt	r6, r5
    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 8009ca0:	2503      	movs	r5, #3
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009ca2:	9201      	str	r2, [sp, #4]
    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 8009ca4:	eb05 0546 	add.w	r5, r5, r6, lsl #1
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8009ca8:	f8db 2000 	ldr.w	r2, [fp]
    if(req_size + act_size < grad_cache_size) {
 8009cac:	f8da 1000 	ldr.w	r1, [sl]
    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 8009cb0:	f025 0503 	bic.w	r5, r5, #3
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8009cb4:	1aa2      	subs	r2, r4, r2
    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 8009cb6:	3510      	adds	r5, #16
    if(req_size + act_size < grad_cache_size) {
 8009cb8:	18a8      	adds	r0, r5, r2
 8009cba:	4288      	cmp	r0, r1
 8009cbc:	d22e      	bcs.n	8009d1c <lv_gradient_get+0x104>
        item->not_cached = 0;
 8009cbe:	79e2      	ldrb	r2, [r4, #7]
 8009cc0:	f363 12c7 	bfi	r2, r3, #7, #1
 8009cc4:	71e2      	strb	r2, [r4, #7]
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 8009cc6:	9b01      	ldr	r3, [sp, #4]
    item->alloc_size = map_size;
 8009cc8:	81a6      	strh	r6, [r4, #12]
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8009cca:	2600      	movs	r6, #0
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 8009ccc:	ea83 0309 	eor.w	r3, r3, r9
    item->key = compute_key(g, size, w);
 8009cd0:	6023      	str	r3, [r4, #0]
    item->life = 1;
 8009cd2:	6863      	ldr	r3, [r4, #4]
 8009cd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    if(item->not_cached) {
 8009cd8:	2b00      	cmp	r3, #0
    item->life = 1;
 8009cda:	f043 0201 	orr.w	r2, r3, #1
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 8009cde:	bfac      	ite	ge
 8009ce0:	f8d8 3000 	ldrge.w	r3, [r8]
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 8009ce4:	f104 0310 	addlt.w	r3, r4, #16
    item->life = 1;
 8009ce8:	6062      	str	r2, [r4, #4]
    item->size = size;
 8009cea:	9a01      	ldr	r2, [sp, #4]
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 8009cec:	bfb8      	it	lt
 8009cee:	60a3      	strlt	r3, [r4, #8]
    item->size = size;
 8009cf0:	81e2      	strh	r2, [r4, #14]
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 8009cf2:	bfa1      	itttt	ge
 8009cf4:	f103 0210 	addge.w	r2, r3, #16
        grad_cache_end += req_size;
 8009cf8:	195b      	addge	r3, r3, r5
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 8009cfa:	60a2      	strge	r2, [r4, #8]
        grad_cache_end += req_size;
 8009cfc:	f8c8 3000 	strge.w	r3, [r8]
    if(item == NULL) {
 8009d00:	b235      	sxth	r5, r6
    for(lv_coord_t i = 0; i < item->size; i++) {
 8009d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d06:	42a9      	cmp	r1, r5
 8009d08:	ddb4      	ble.n	8009c74 <lv_gradient_get+0x5c>
        item->map[i] = lv_gradient_calculate(g, item->size, i);
 8009d0a:	462a      	mov	r2, r5
 8009d0c:	4638      	mov	r0, r7
 8009d0e:	f016 fba3 	bl	8020458 <lv_gradient_calculate>
 8009d12:	68a3      	ldr	r3, [r4, #8]
 8009d14:	3601      	adds	r6, #1
 8009d16:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
    for(lv_coord_t i = 0; i < item->size; i++) {
 8009d1a:	e7f1      	b.n	8009d00 <lv_gradient_get+0xe8>
        if(req_size <= grad_cache_size) {
 8009d1c:	428d      	cmp	r5, r1
 8009d1e:	d81e      	bhi.n	8009d5e <lv_gradient_get+0x146>
                uint32_t oldest_life = UINT32_MAX;
 8009d20:	f04f 34ff 	mov.w	r4, #4294967295
            while(act_size + req_size > grad_cache_size) {
 8009d24:	442a      	add	r2, r5
 8009d26:	f8da 3000 	ldr.w	r3, [sl]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d806      	bhi.n	8009d3c <lv_gradient_get+0x124>
            item = (lv_grad_t *)grad_cache_end;
 8009d2e:	f8d8 4000 	ldr.w	r4, [r8]
            item->not_cached = 0;
 8009d32:	79e3      	ldrb	r3, [r4, #7]
 8009d34:	f36f 13c7 	bfc	r3, #7, #1
            item->not_cached = 1;
 8009d38:	71e3      	strb	r3, [r4, #7]
 8009d3a:	e7c4      	b.n	8009cc6 <lv_gradient_get+0xae>
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	a905      	add	r1, sp, #20
 8009d40:	4811      	ldr	r0, [pc, #68]	; (8009d88 <lv_gradient_get+0x170>)
                uint32_t oldest_life = UINT32_MAX;
 8009d42:	9405      	str	r4, [sp, #20]
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 8009d44:	f7ff fed2 	bl	8009aec <iterate_cache>
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 8009d48:	2200      	movs	r2, #0
 8009d4a:	a905      	add	r1, sp, #20
 8009d4c:	480f      	ldr	r0, [pc, #60]	; (8009d8c <lv_gradient_get+0x174>)
 8009d4e:	f7ff fecd 	bl	8009aec <iterate_cache>
                act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8009d52:	f8d8 2000 	ldr.w	r2, [r8]
 8009d56:	f8db 3000 	ldr.w	r3, [fp]
 8009d5a:	1ad2      	subs	r2, r2, r3
 8009d5c:	e7e2      	b.n	8009d24 <lv_gradient_get+0x10c>
            item = lv_mem_alloc(req_size);
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f008 fca6 	bl	80126b0 <lv_mem_alloc>
            LV_ASSERT_MALLOC(item);
 8009d64:	4604      	mov	r4, r0
 8009d66:	b900      	cbnz	r0, 8009d6a <lv_gradient_get+0x152>
 8009d68:	e7fe      	b.n	8009d68 <lv_gradient_get+0x150>
            item->not_cached = 1;
 8009d6a:	79c3      	ldrb	r3, [r0, #7]
 8009d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d70:	e7e2      	b.n	8009d38 <lv_gradient_get+0x120>
 8009d72:	bf00      	nop
 8009d74:	24010d2e 	.word	0x24010d2e
 8009d78:	0802044d 	.word	0x0802044d
 8009d7c:	24001168 	.word	0x24001168
 8009d80:	24001204 	.word	0x24001204
 8009d84:	2400116c 	.word	0x2400116c
 8009d88:	0802043b 	.word	0x0802043b
 8009d8c:	08009b59 	.word	0x08009b59

08009d90 <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 8009d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d94:	4689      	mov	r9, r1
 8009d96:	b0a5      	sub	sp, #148	; 0x94
 8009d98:	461d      	mov	r5, r3
 8009d9a:	4614      	mov	r4, r2
 8009d9c:	9005      	str	r0, [sp, #20]
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 8009d9e:	2300      	movs	r3, #0
 8009da0:	462a      	mov	r2, r5
 8009da2:	a912      	add	r1, sp, #72	; 0x48
 8009da4:	f8d9 0000 	ldr.w	r0, [r9]
 8009da8:	f01a f8f7 	bl	8023f9a <lv_font_get_glyph_dsc>
    if(g_ret == false) {
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d13d      	bne.n	8009e2c <lv_draw_sw_letter+0x9c>
        /*Add warning if the dsc is not found
         *but do not print warning for non printable ASCII chars (e.g. '\n')*/
        if(letter >= 0x20 &&
 8009db0:	2d1f      	cmp	r5, #31
 8009db2:	d938      	bls.n	8009e26 <lv_draw_sw_letter+0x96>
 8009db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009db8:	429d      	cmp	r5, r3
 8009dba:	d034      	beq.n	8009e26 <lv_draw_sw_letter+0x96>
           letter != 0xf8ff && /*LV_SYMBOL_DUMMY*/
 8009dbc:	f242 030c 	movw	r3, #8204	; 0x200c
 8009dc0:	429d      	cmp	r5, r3
 8009dc2:	d030      	beq.n	8009e26 <lv_draw_sw_letter+0x96>

#if LV_USE_FONT_PLACEHOLDER
            /* draw placeholder */
            lv_area_t glyph_coords;
            lv_draw_rect_dsc_t glyph_dsc;
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 8009dc4:	8821      	ldrh	r1, [r4, #0]
 8009dc6:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 8009dca:	8862      	ldrh	r2, [r4, #2]
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 8009dcc:	4419      	add	r1, r3
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 8009dce:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 8009dd2:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 8009dd6:	441a      	add	r2, r3
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 8009dd8:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8009ddc:	fa10 f082 	uxtah	r0, r0, r2
 8009de0:	fa13 f381 	uxtah	r3, r3, r1
 8009de4:	b212      	sxth	r2, r2
 8009de6:	b200      	sxth	r0, r0
 8009de8:	b21b      	sxth	r3, r3
 8009dea:	b209      	sxth	r1, r1
 8009dec:	9000      	str	r0, [sp, #0]
 8009dee:	a810      	add	r0, sp, #64	; 0x40
 8009df0:	f01a fa00 	bl	80241f4 <lv_area_set>
            lv_draw_rect_dsc_init(&glyph_dsc);
 8009df4:	a816      	add	r0, sp, #88	; 0x58
 8009df6:	f7fe fda1 	bl	800893c <lv_draw_rect_dsc_init>
            glyph_dsc.bg_opa = LV_OPA_MIN;
 8009dfa:	2302      	movs	r3, #2
            glyph_dsc.outline_opa = LV_OPA_MIN;
            glyph_dsc.shadow_opa = LV_OPA_MIN;
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
            glyph_dsc.border_color = dsc->color;
            glyph_dsc.border_width = 1;
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 8009dfc:	aa10      	add	r2, sp, #64	; 0x40
 8009dfe:	a916      	add	r1, sp, #88	; 0x58
            glyph_dsc.bg_opa = LV_OPA_MIN;
 8009e00:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
            glyph_dsc.outline_opa = LV_OPA_MIN;
 8009e04:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
            glyph_dsc.shadow_opa = LV_OPA_MIN;
 8009e08:	f88d 308e 	strb.w	r3, [sp, #142]	; 0x8e
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
 8009e0c:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
            glyph_dsc.border_color = dsc->color;
 8009e10:	f8b9 300c 	ldrh.w	r3, [r9, #12]
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 8009e14:	9805      	ldr	r0, [sp, #20]
            glyph_dsc.border_color = dsc->color;
 8009e16:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            glyph_dsc.border_width = 1;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 8009e20:	9b05      	ldr	r3, [sp, #20]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	4798      	blx	r3
#endif
    }
    else {
        draw_letter_normal(draw_ctx, dsc, &gpos, &g, map_p);
    }
}
 8009e26:	b025      	add	sp, #148	; 0x94
 8009e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((g.box_h == 0) || (g.box_w == 0)) return;
 8009e2c:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 8009e30:	2900      	cmp	r1, #0
 8009e32:	d0f8      	beq.n	8009e26 <lv_draw_sw_letter+0x96>
 8009e34:	f8bd e04e 	ldrh.w	lr, [sp, #78]	; 0x4e
 8009e38:	f1be 0f00 	cmp.w	lr, #0
 8009e3c:	d0f3      	beq.n	8009e26 <lv_draw_sw_letter+0x96>
    gpos.x = pos_p->x + g.ofs_x;
 8009e3e:	8823      	ldrh	r3, [r4, #0]
 8009e40:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8009e44:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    gpos.x = pos_p->x + g.ofs_x;
 8009e48:	4413      	add	r3, r2
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8009e4a:	f8d9 2000 	ldr.w	r2, [r9]
 8009e4e:	f9bd c054 	ldrsh.w	ip, [sp, #84]	; 0x54
 8009e52:	f9b2 7008 	ldrsh.w	r7, [r2, #8]
    gpos.x = pos_p->x + g.ofs_x;
 8009e56:	fa1f fb83 	uxth.w	fp, r3
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8009e5a:	f9b2 400a 	ldrsh.w	r4, [r2, #10]
    gpos.x = pos_p->x + g.ofs_x;
 8009e5e:	b21e      	sxth	r6, r3
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 8009e60:	9a05      	ldr	r2, [sp, #20]
 8009e62:	fa0e f383 	sxtah	r3, lr, r3
 8009e66:	6892      	ldr	r2, [r2, #8]
 8009e68:	f9b2 e000 	ldrsh.w	lr, [r2]
 8009e6c:	4573      	cmp	r3, lr
 8009e6e:	dbda      	blt.n	8009e26 <lv_draw_sw_letter+0x96>
 8009e70:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8009e74:	42b3      	cmp	r3, r6
 8009e76:	dbd6      	blt.n	8009e26 <lv_draw_sw_letter+0x96>
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8009e78:	eb01 030c 	add.w	r3, r1, ip
 8009e7c:	1ac0      	subs	r0, r0, r3
 8009e7e:	4438      	add	r0, r7
 8009e80:	1b00      	subs	r0, r0, r4
 8009e82:	b283      	uxth	r3, r0
 8009e84:	b204      	sxth	r4, r0
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8009e86:	fa01 f080 	sxtah	r0, r1, r0
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8009e8a:	930a      	str	r3, [sp, #40]	; 0x28
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8009e8c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
       gpos.x > draw_ctx->clip_area->x2 ||
 8009e90:	4298      	cmp	r0, r3
 8009e92:	dbc8      	blt.n	8009e26 <lv_draw_sw_letter+0x96>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8009e94:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8009e98:	42a3      	cmp	r3, r4
 8009e9a:	dbc4      	blt.n	8009e26 <lv_draw_sw_letter+0x96>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009ea0:	f01a f877 	bl	8023f92 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d0be      	beq.n	8009e26 <lv_draw_sw_letter+0x96>
    if(g.resolved_font->subpx) {
 8009ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009eaa:	7b1b      	ldrb	r3, [r3, #12]
 8009eac:	079b      	lsls	r3, r3, #30
 8009eae:	d1ba      	bne.n	8009e26 <lv_draw_sw_letter+0x96>
{

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 8009eb0:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    lv_opa_t opa = dsc->opa;
 8009eb4:	f899 101a 	ldrb.w	r1, [r9, #26]
    uint32_t bpp = g->bpp;
 8009eb8:	f003 030f 	and.w	r3, r3, #15
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	f000 80e6 	beq.w	800a08e <lv_draw_sw_letter+0x2fe>
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	2b07      	cmp	r3, #7
 8009ec6:	d8ae      	bhi.n	8009e26 <lv_draw_sw_letter+0x96>
 8009ec8:	a201      	add	r2, pc, #4	; (adr r2, 8009ed0 <lv_draw_sw_letter+0x140>)
 8009eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ece:	bf00      	nop
 8009ed0:	08009ef1 	.word	0x08009ef1
 8009ed4:	0800a09b 	.word	0x0800a09b
 8009ed8:	08009e27 	.word	0x08009e27
 8009edc:	0800a08f 	.word	0x0800a08f
 8009ee0:	08009e27 	.word	0x08009e27
 8009ee4:	08009e27 	.word	0x08009e27
 8009ee8:	08009e27 	.word	0x08009e27
 8009eec:	0800a081 	.word	0x0800a081
        case 1:
            bpp_opa_table_p = _lv_bpp1_opa_table;
            bitmask_init  = 0x80;
 8009ef0:	2280      	movs	r2, #128	; 0x80
    uint32_t bpp = g->bpp;
 8009ef2:	2501      	movs	r5, #1
            shades = 2;
 8009ef4:	2302      	movs	r3, #2
            bitmask_init  = 0x80;
 8009ef6:	9204      	str	r2, [sp, #16]
            bpp_opa_table_p = _lv_bpp1_opa_table;
 8009ef8:	4aa8      	ldr	r2, [pc, #672]	; (800a19c <lv_draw_sw_letter+0x40c>)
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 8009efa:	29fc      	cmp	r1, #252	; 0xfc
    switch(bpp) {
 8009efc:	9202      	str	r2, [sp, #8]
    if(opa < LV_OPA_MAX) {
 8009efe:	d811      	bhi.n	8009f24 <lv_draw_sw_letter+0x194>
        if(prev_opa != opa || prev_bpp != bpp) {
 8009f00:	f8df c29c 	ldr.w	ip, [pc, #668]	; 800a1a0 <lv_draw_sw_letter+0x410>
 8009f04:	f89c 2000 	ldrb.w	r2, [ip]
 8009f08:	428a      	cmp	r2, r1
 8009f0a:	f040 80cc 	bne.w	800a0a6 <lv_draw_sw_letter+0x316>
 8009f0e:	4aa5      	ldr	r2, [pc, #660]	; (800a1a4 <lv_draw_sw_letter+0x414>)
 8009f10:	6812      	ldr	r2, [r2, #0]
 8009f12:	42aa      	cmp	r2, r5
 8009f14:	f040 80c7 	bne.w	800a0a6 <lv_draw_sw_letter+0x316>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
            }
        }
        bpp_opa_table_p = opa_table;
        prev_opa = opa;
        prev_bpp = bpp;
 8009f18:	4ba2      	ldr	r3, [pc, #648]	; (800a1a4 <lv_draw_sw_letter+0x414>)
        prev_opa = opa;
 8009f1a:	f88c 1000 	strb.w	r1, [ip]
        prev_bpp = bpp;
 8009f1e:	601d      	str	r5, [r3, #0]
        bpp_opa_table_p = opa_table;
 8009f20:	4ba1      	ldr	r3, [pc, #644]	; (800a1a8 <lv_draw_sw_letter+0x418>)
 8009f22:	9302      	str	r3, [sp, #8]
    int32_t box_w = g->box_w;
    int32_t box_h = g->box_h;
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8009f24:	9b05      	ldr	r3, [sp, #20]
    int32_t box_w = g->box_w;
 8009f26:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8009f2a:	689b      	ldr	r3, [r3, #8]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8009f2c:	eb06 0c08 	add.w	ip, r6, r8
    int32_t box_h = g->box_h;
 8009f30:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8009f34:	f9b3 7000 	ldrsh.w	r7, [r3]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8009f38:	fb05 f108 	mul.w	r1, r5, r8
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8009f3c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8009f40:	42be      	cmp	r6, r7
 8009f42:	bfb4      	ite	lt
 8009f44:	1bbf      	sublt	r7, r7, r6
 8009f46:	2700      	movge	r7, #0
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8009f48:	4594      	cmp	ip, r2
 8009f4a:	bfc8      	it	gt
 8009f4c:	1b96      	subgt	r6, r2, r6
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 8009f4e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8009f52:	bfd8      	it	le
 8009f54:	4646      	movle	r6, r8
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8009f56:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8009f5a:	bfc8      	it	gt
 8009f5c:	3601      	addgt	r6, #1
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 8009f5e:	4294      	cmp	r4, r2
 8009f60:	bfb4      	ite	lt
 8009f62:	1b12      	sublt	r2, r2, r4
 8009f64:	2200      	movge	r2, #0
 8009f66:	9203      	str	r2, [sp, #12]
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8009f68:	eb04 020a 	add.w	r2, r4, sl
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	f04f 021c 	mov.w	r2, #28
 8009f72:	bfc8      	it	gt
 8009f74:	1b1b      	subgt	r3, r3, r4

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8009f76:	fb07 f405 	mul.w	r4, r7, r5
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8009f7a:	bfd4      	ite	le
 8009f7c:	f8cd a020 	strle.w	sl, [sp, #32]
 8009f80:	3301      	addgt	r3, #1
    blend_dsc.color = dsc->color;
    blend_dsc.opa = dsc->opa;
    blend_dsc.blend_mode = dsc->blend_mode;

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 8009f82:	fb0a fa08 	mul.w	sl, sl, r8
#endif
    blend_dsc.blend_area = &fill_area;
    blend_dsc.mask_area = &fill_area;

    uint32_t col_bit_max = 8 - bpp;
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 8009f86:	44b8      	add	r8, r7
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8009f88:	bfc8      	it	gt
 8009f8a:	9308      	strgt	r3, [sp, #32]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8009f8c:	9b03      	ldr	r3, [sp, #12]
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 8009f8e:	eba8 0806 	sub.w	r8, r8, r6
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8009f92:	fb03 4401 	mla	r4, r3, r1, r4
 8009f96:	2100      	movs	r1, #0
    map_p += bit_ofs >> 3;
 8009f98:	eb00 03d4 	add.w	r3, r0, r4, lsr #3
 8009f9c:	a816      	add	r0, sp, #88	; 0x58
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 8009f9e:	f004 0407 	and.w	r4, r4, #7
    map_p += bit_ofs >> 3;
 8009fa2:	9306      	str	r3, [sp, #24]
 8009fa4:	f010 fbbc 	bl	801a720 <memset>
    blend_dsc.color = dsc->color;
 8009fa8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009fac:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    blend_dsc.opa = dsc->opa;
 8009fb0:	f899 301a 	ldrb.w	r3, [r9, #26]
 8009fb4:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    blend_dsc.blend_mode = dsc->blend_mode;
 8009fb8:	f899 301e 	ldrb.w	r3, [r9, #30]
 8009fbc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8009fc0:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 8009fc4:	f7fd f91e 	bl	8007204 <_lv_refr_get_disp_refreshing>
 8009fc8:	f008 f866 	bl	8012098 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 8009fcc:	4582      	cmp	sl, r0
 8009fce:	bfa8      	it	ge
 8009fd0:	4682      	movge	sl, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8009fd2:	4650      	mov	r0, sl
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 8009fd4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8009fd8:	f008 fbba 	bl	8012750 <lv_mem_buf_get>
    fill_area.x1 = col_start + pos->x;
 8009fdc:	eb0b 0307 	add.w	r3, fp, r7
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8009fe0:	9007      	str	r0, [sp, #28]
    fill_area.x2 = col_end  + pos->x - 1;
 8009fe2:	f10b 3bff 	add.w	fp, fp, #4294967295
    blend_dsc.mask_buf = mask_buf;
 8009fe6:	9019      	str	r0, [sp, #100]	; 0x64
    fill_area.x1 = col_start + pos->x;
 8009fe8:	b298      	uxth	r0, r3
    fill_area.x2 = col_end  + pos->x - 1;
 8009fea:	44b3      	add	fp, r6
    fill_area.x1 = col_start + pos->x;
 8009fec:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009fee:	f1c0 0001 	rsb	r0, r0, #1
    fill_area.y1 = row_start + pos->y;
 8009ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ff4:	9903      	ldr	r1, [sp, #12]
    fill_area.x2 = col_end  + pos->x - 1;
 8009ff6:	fa0f fc8b 	sxth.w	ip, fp
 8009ffa:	fa10 fb8b 	uxtah	fp, r0, fp
    fill_area.x1 = col_start + pos->x;
 8009ffe:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    fill_area.y1 = row_start + pos->y;
 800a002:	440a      	add	r2, r1
    dest->x1 = src->x1;
 800a004:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    mask_area.y2 = mask_area.y1 + row_end;
 800a008:	9b08      	ldr	r3, [sp, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a00a:	fa0f f08b 	sxth.w	r0, fp
    fill_area.y1 = row_start + pos->y;
 800a00e:	b211      	sxth	r1, r2
    fill_area.x2 = col_end  + pos->x - 1;
 800a010:	f8ad c03c 	strh.w	ip, [sp, #60]	; 0x3c
    mask_area.y2 = mask_area.y1 + row_end;
 800a014:	fa13 f282 	uxtah	r2, r3, r2
 800a018:	900a      	str	r0, [sp, #40]	; 0x28
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 800a01a:	a810      	add	r0, sp, #64	; 0x40
    fill_area.y1 = row_start + pos->y;
 800a01c:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    fill_area.y2 = fill_area.y1;
 800a020:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    dest->y1 = src->y1;
 800a024:	eba6 0a07 	sub.w	sl, r6, r7
 800a028:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
    dest->x2 = src->x2;
 800a02c:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
    mask_area.y2 = mask_area.y1 + row_end;
 800a030:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 800a034:	f7fe f972 	bl	800831c <lv_draw_mask_is_any>
    blend_dsc.blend_area = &fill_area;
 800a038:	ab0e      	add	r3, sp, #56	; 0x38
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 800a03a:	900c      	str	r0, [sp, #48]	; 0x30
    blend_dsc.blend_area = &fill_area;
 800a03c:	9316      	str	r3, [sp, #88]	; 0x58
    blend_dsc.mask_area = &fill_area;
 800a03e:	931b      	str	r3, [sp, #108]	; 0x6c
    uint32_t col_bit_max = 8 - bpp;
 800a040:	f1c5 0308 	rsb	r3, r5, #8
 800a044:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a046:	fb05 f308 	mul.w	r3, r5, r8
    int32_t mask_p = 0;
 800a04a:	f04f 0800 	mov.w	r8, #0
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a04e:	930d      	str	r3, [sp, #52]	; 0x34

    for(row = row_start ; row < row_end; row++) {
 800a050:	9b08      	ldr	r3, [sp, #32]
 800a052:	9a03      	ldr	r2, [sp, #12]
 800a054:	4293      	cmp	r3, r2
 800a056:	dc37      	bgt.n	800a0c8 <lv_draw_sw_letter+0x338>
        map_p += (col_bit >> 3);
        col_bit = col_bit & 0x7;
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800a058:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800a05c:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
 800a060:	429a      	cmp	r2, r3
 800a062:	d009      	beq.n	800a078 <lv_draw_sw_letter+0x2e8>
        fill_area.y2--;
 800a064:	3b01      	subs	r3, #1
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a066:	a916      	add	r1, sp, #88	; 0x58
 800a068:	9805      	ldr	r0, [sp, #20]
        fill_area.y2--;
 800a06a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a06e:	2302      	movs	r3, #2
 800a070:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a074:	f016 f9ad 	bl	80203d2 <lv_draw_sw_blend>
        mask_p = 0;
    }

    lv_mem_buf_release(mask_buf);
 800a078:	9807      	ldr	r0, [sp, #28]
 800a07a:	f008 fbb3 	bl	80127e4 <lv_mem_buf_release>
 800a07e:	e6d2      	b.n	8009e26 <lv_draw_sw_letter+0x96>
            bitmask_init  = 0xFF;
 800a080:	22ff      	movs	r2, #255	; 0xff
    uint32_t bpp = g->bpp;
 800a082:	2508      	movs	r5, #8
            shades = 256;
 800a084:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
 800a088:	9204      	str	r2, [sp, #16]
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800a08a:	4a48      	ldr	r2, [pc, #288]	; (800a1ac <lv_draw_sw_letter+0x41c>)
 800a08c:	e735      	b.n	8009efa <lv_draw_sw_letter+0x16a>
            bitmask_init  = 0xF0;
 800a08e:	22f0      	movs	r2, #240	; 0xf0
 800a090:	2504      	movs	r5, #4
            shades = 16;
 800a092:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
 800a094:	9204      	str	r2, [sp, #16]
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800a096:	4a46      	ldr	r2, [pc, #280]	; (800a1b0 <lv_draw_sw_letter+0x420>)
 800a098:	e72f      	b.n	8009efa <lv_draw_sw_letter+0x16a>
    switch(bpp) {
 800a09a:	22c0      	movs	r2, #192	; 0xc0
 800a09c:	2502      	movs	r5, #2
 800a09e:	2304      	movs	r3, #4
 800a0a0:	9204      	str	r2, [sp, #16]
 800a0a2:	4a44      	ldr	r2, [pc, #272]	; (800a1b4 <lv_draw_sw_letter+0x424>)
 800a0a4:	e729      	b.n	8009efa <lv_draw_sw_letter+0x16a>
 800a0a6:	9f02      	ldr	r7, [sp, #8]
 800a0a8:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 800a1a8 <lv_draw_sw_letter+0x418>
 800a0ac:	443b      	add	r3, r7
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800a0ae:	f817 2b01 	ldrb.w	r2, [r7], #1
 800a0b2:	2aff      	cmp	r2, #255	; 0xff
 800a0b4:	bf16      	itet	ne
 800a0b6:	fb12 f201 	smulbbne	r2, r2, r1
 800a0ba:	460a      	moveq	r2, r1
 800a0bc:	0a12      	lsrne	r2, r2, #8
            for(i = 0; i < shades; i++) {
 800a0be:	42bb      	cmp	r3, r7
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800a0c0:	f80e 2b01 	strb.w	r2, [lr], #1
            for(i = 0; i < shades; i++) {
 800a0c4:	d1f3      	bne.n	800a0ae <lv_draw_sw_letter+0x31e>
 800a0c6:	e727      	b.n	8009f18 <lv_draw_sw_letter+0x188>
        bitmask = bitmask_init >> col_bit;
 800a0c8:	9b04      	ldr	r3, [sp, #16]
        for(col = col_start; col < col_end; col++) {
 800a0ca:	4639      	mov	r1, r7
        bitmask = bitmask_init >> col_bit;
 800a0cc:	fa23 f204 	lsr.w	r2, r3, r4
        for(col = col_start; col < col_end; col++) {
 800a0d0:	9b07      	ldr	r3, [sp, #28]
 800a0d2:	eb03 0b08 	add.w	fp, r3, r8
 800a0d6:	4658      	mov	r0, fp
 800a0d8:	428e      	cmp	r6, r1
 800a0da:	dc32      	bgt.n	800a142 <lv_draw_sw_letter+0x3b2>
        if(mask_any) {
 800a0dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0de:	42b7      	cmp	r7, r6
 800a0e0:	bfd4      	ite	le
 800a0e2:	46d1      	movle	r9, sl
 800a0e4:	f04f 0900 	movgt.w	r9, #0
 800a0e8:	b17b      	cbz	r3, 800a10a <lv_draw_sw_letter+0x37a>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 800a0ea:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 800a0ee:	4658      	mov	r0, fp
 800a0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f2:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 800a0f6:	f7fe f8b9 	bl	800826c <lv_draw_mask_apply>
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	f88d 0068 	strb.w	r0, [sp, #104]	; 0x68
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800a100:	b918      	cbnz	r0, 800a10a <lv_draw_sw_letter+0x37a>
 800a102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a104:	4658      	mov	r0, fp
 800a106:	f010 fb0b 	bl	801a720 <memset>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800a10a:	44d1      	add	r9, sl
 800a10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a10e:	44c1      	add	r9, r8
 800a110:	454b      	cmp	r3, r9
 800a112:	d933      	bls.n	800a17c <lv_draw_sw_letter+0x3ec>
 800a114:	42b7      	cmp	r7, r6
 800a116:	bfd4      	ite	le
 800a118:	4653      	movle	r3, sl
 800a11a:	2300      	movgt	r3, #0
 800a11c:	4498      	add	r8, r3
            fill_area.y2 ++;
 800a11e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a122:	3301      	adds	r3, #1
 800a124:	b21b      	sxth	r3, r3
 800a126:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        col_bit += col_bit_row_ofs;
 800a12a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a12c:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
 800a12e:	9b06      	ldr	r3, [sp, #24]
 800a130:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
        col_bit = col_bit & 0x7;
 800a134:	f004 0407 	and.w	r4, r4, #7
        map_p += (col_bit >> 3);
 800a138:	9306      	str	r3, [sp, #24]
    for(row = row_start ; row < row_end; row++) {
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	3301      	adds	r3, #1
 800a13e:	9303      	str	r3, [sp, #12]
 800a140:	e786      	b.n	800a050 <lv_draw_sw_letter+0x2c0>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800a142:	9b06      	ldr	r3, [sp, #24]
        for(col = col_start; col < col_end; col++) {
 800a144:	3101      	adds	r1, #1
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800a146:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	ebac 0c04 	sub.w	ip, ip, r4
 800a150:	4013      	ands	r3, r2
            if(letter_px) {
 800a152:	fa33 f30c 	lsrs.w	r3, r3, ip
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800a156:	bf1c      	itt	ne
 800a158:	f8dd c008 	ldrne.w	ip, [sp, #8]
 800a15c:	f81c 3003 	ldrbne.w	r3, [ip, r3]
 800a160:	f800 3b01 	strb.w	r3, [r0], #1
            if(col_bit < col_bit_max) {
 800a164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a166:	42a3      	cmp	r3, r4
                map_p++;
 800a168:	bf93      	iteet	ls
 800a16a:	9b06      	ldrls	r3, [sp, #24]
                col_bit += bpp;
 800a16c:	1964      	addhi	r4, r4, r5
                bitmask = bitmask >> bpp;
 800a16e:	40ea      	lsrhi	r2, r5
                bitmask = bitmask_init;
 800a170:	9a04      	ldrls	r2, [sp, #16]
                map_p++;
 800a172:	bf9e      	ittt	ls
 800a174:	3301      	addls	r3, #1
                col_bit = 0;
 800a176:	2400      	movls	r4, #0
                map_p++;
 800a178:	9306      	strls	r3, [sp, #24]
        for(col = col_start; col < col_end; col++) {
 800a17a:	e7ad      	b.n	800a0d8 <lv_draw_sw_letter+0x348>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a17c:	2302      	movs	r3, #2
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a17e:	a916      	add	r1, sp, #88	; 0x58
 800a180:	9805      	ldr	r0, [sp, #20]
            mask_p = 0;
 800a182:	f04f 0800 	mov.w	r8, #0
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a186:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a18a:	f016 f922 	bl	80203d2 <lv_draw_sw_blend>
            fill_area.y1 = fill_area.y2 + 1;
 800a18e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a192:	3301      	adds	r3, #1
 800a194:	b21b      	sxth	r3, r3
 800a196:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            mask_p = 0;
 800a19a:	e7c4      	b.n	800a126 <lv_draw_sw_letter+0x396>
 800a19c:	0802ab35 	.word	0x0802ab35
 800a1a0:	24010e2f 	.word	0x24010e2f
 800a1a4:	24001170 	.word	0x24001170
 800a1a8:	24010d2f 	.word	0x24010d2f
 800a1ac:	0802aa21 	.word	0x0802aa21
 800a1b0:	0802ab21 	.word	0x0802ab21
 800a1b4:	0802ab31 	.word	0x0802ab31

0800a1b8 <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 800a1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1bc:	b0c5      	sub	sp, #276	; 0x114
 800a1be:	460c      	mov	r4, r1
 800a1c0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    if(dsc->width == 0) return;
 800a1c4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
{
 800a1c8:	9002      	str	r0, [sp, #8]
    if(dsc->width == 0) return;
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f000 80e7 	beq.w	800a39e <lv_draw_sw_line+0x1e6>
    if(dsc->opa <= LV_OPA_MIN) return;
 800a1d0:	7a0a      	ldrb	r2, [r1, #8]
 800a1d2:	2a02      	cmp	r2, #2
 800a1d4:	f240 80e3 	bls.w	800a39e <lv_draw_sw_line+0x1e6>

    if(point1->x == point2->x && point1->y == point2->y) return;
 800a1d8:	9a03      	ldr	r2, [sp, #12]
 800a1da:	f9b2 5000 	ldrsh.w	r5, [r2]
 800a1de:	9a04      	ldr	r2, [sp, #16]
 800a1e0:	f9b2 0000 	ldrsh.w	r0, [r2]
 800a1e4:	9a03      	ldr	r2, [sp, #12]
 800a1e6:	4285      	cmp	r5, r0
 800a1e8:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800a1ec:	9a04      	ldr	r2, [sp, #16]
 800a1ee:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a1f2:	d102      	bne.n	800a1fa <lv_draw_sw_line+0x42>
 800a1f4:	4291      	cmp	r1, r2
 800a1f6:	f000 80d2 	beq.w	800a39e <lv_draw_sw_line+0x1e6>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800a1fa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800a1fe:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800a202:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800a206:	4285      	cmp	r5, r0
 800a208:	bfd4      	ite	le
 800a20a:	ebc3 0605 	rsble	r6, r3, r5
 800a20e:	ebc3 0600 	rsbgt	r6, r3, r0
 800a212:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800a216:	4285      	cmp	r5, r0
 800a218:	bfac      	ite	ge
 800a21a:	195e      	addge	r6, r3, r5
 800a21c:	181e      	addlt	r6, r3, r0
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800a21e:	4291      	cmp	r1, r2
 800a220:	bfd4      	ite	le
 800a222:	ebc3 0001 	rsble	r0, r3, r1
 800a226:	ebc3 0002 	rsbgt	r0, r3, r2
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800a22a:	4291      	cmp	r1, r2
 800a22c:	bfac      	ite	ge
 800a22e:	185b      	addge	r3, r3, r1
 800a230:	189b      	addlt	r3, r3, r2
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800a232:	4651      	mov	r1, sl
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800a234:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800a238:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800a23c:	9b02      	ldr	r3, [sp, #8]
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800a23e:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800a242:	4650      	mov	r0, sl
 800a244:	689a      	ldr	r2, [r3, #8]
 800a246:	f01a f814 	bl	8024272 <_lv_area_intersect>
    if(!is_common) return;
 800a24a:	2800      	cmp	r0, #0
 800a24c:	f000 80a7 	beq.w	800a39e <lv_draw_sw_line+0x1e6>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800a250:	9b02      	ldr	r3, [sp, #8]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	9306      	str	r3, [sp, #24]
    draw_ctx->clip_area = &clip_line;
 800a256:	9b02      	ldr	r3, [sp, #8]
 800a258:	f8c3 a008 	str.w	sl, [r3, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800a262:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	4546      	cmp	r6, r8
 800a270:	f040 810e 	bne.w	800a490 <lv_draw_sw_line+0x2d8>
 800a274:	9a04      	ldr	r2, [sp, #16]


LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
    int32_t w = dsc->width - 1;
 800a276:	3d01      	subs	r5, #1
 800a278:	f9b3 3000 	ldrsh.w	r3, [r3]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(point1->x, point2->x);
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
    blend_area.y1 = point1->y - w_half1;
 800a27c:	b2b6      	uxth	r6, r6
 800a27e:	f9b2 2000 	ldrsh.w	r2, [r2]
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800a282:	4619      	mov	r1, r3
 800a284:	4293      	cmp	r3, r2
 800a286:	bfa8      	it	ge
 800a288:	4611      	movge	r1, r2
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800a28a:	4293      	cmp	r3, r2
 800a28c:	bfb8      	it	lt
 800a28e:	4613      	movlt	r3, r2
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800a290:	f8ad 10ac 	strh.w	r1, [sp, #172]	; 0xac
    blend_area.y2 = point1->y + w_half0;

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a294:	a92b      	add	r1, sp, #172	; 0xac
 800a296:	4652      	mov	r2, sl
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800a298:	3b01      	subs	r3, #1
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a29a:	4608      	mov	r0, r1
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800a29c:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800a2a0:	f005 0301 	and.w	r3, r5, #1
 800a2a4:	eb03 0365 	add.w	r3, r3, r5, asr #1
    blend_area.y1 = point1->y - w_half1;
 800a2a8:	1af3      	subs	r3, r6, r3
    blend_area.y2 = point1->y + w_half0;
 800a2aa:	eb06 0665 	add.w	r6, r6, r5, asr #1
    blend_area.y1 = point1->y - w_half1;
 800a2ae:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
    blend_area.y2 = point1->y + w_half0;
 800a2b2:	f8ad 60b2 	strh.w	r6, [sp, #178]	; 0xb2
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a2b6:	f019 ffdc 	bl	8024272 <_lv_area_intersect>
    if(!is_common) return;
 800a2ba:	b300      	cbz	r0, 800a2fe <lv_draw_sw_line+0x146>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a2bc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    bool simple_mode = true;
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a2c0:	a82b      	add	r0, sp, #172	; 0xac
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d06e      	beq.n	800a3a4 <lv_draw_sw_line+0x1ec>
 800a2c6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d06a      	beq.n	800a3a4 <lv_draw_sw_line+0x1ec>
 800a2ce:	f04f 0901 	mov.w	r9, #1
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a2d2:	2500      	movs	r5, #0
 800a2d4:	f7fe f822 	bl	800831c <lv_draw_mask_is_any>
 800a2d8:	221c      	movs	r2, #28
 800a2da:	2100      	movs	r1, #0
 800a2dc:	a836      	add	r0, sp, #216	; 0xd8
 800a2de:	f010 fa1f 	bl	801a720 <memset>
    else if(dashed) simple_mode = false;

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
    blend_dsc.blend_area = &blend_area;
 800a2e2:	ab2b      	add	r3, sp, #172	; 0xac
 800a2e4:	9336      	str	r3, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 800a2e6:	8823      	ldrh	r3, [r4, #0]
 800a2e8:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 800a2ec:	7a23      	ldrb	r3, [r4, #8]
 800a2ee:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 800a2f2:	2d00      	cmp	r5, #0
 800a2f4:	d05e      	beq.n	800a3b4 <lv_draw_sw_line+0x1fc>
    blend_dsc.color = dsc->color;
    blend_dsc.opa = dsc->opa;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a2f6:	a936      	add	r1, sp, #216	; 0xd8
 800a2f8:	9802      	ldr	r0, [sp, #8]
 800a2fa:	f016 f86a 	bl	80203d2 <lv_draw_sw_blend>
    if(dsc->round_end || dsc->round_start) {
 800a2fe:	7a63      	ldrb	r3, [r4, #9]
 800a300:	f013 0f0c 	tst.w	r3, #12
 800a304:	d048      	beq.n	800a398 <lv_draw_sw_line+0x1e0>
        lv_draw_rect_dsc_init(&cir_dsc);
 800a306:	a836      	add	r0, sp, #216	; 0xd8
 800a308:	f7fe fb18 	bl	800893c <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 800a30c:	8823      	ldrh	r3, [r4, #0]
        int32_t r = (dsc->width >> 1);
 800a30e:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
        cir_dsc.bg_color = dsc->color;
 800a312:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800a316:	f647 73ff 	movw	r3, #32767	; 0x7fff
        int32_t r = (dsc->width >> 1);
 800a31a:	1075      	asrs	r5, r6, #1
 800a31c:	43f6      	mvns	r6, r6
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800a31e:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
        cir_dsc.bg_opa = dsc->opa;
 800a322:	7a23      	ldrb	r3, [r4, #8]
 800a324:	f006 0601 	and.w	r6, r6, #1
 800a328:	f88d 30db 	strb.w	r3, [sp, #219]	; 0xdb
        if(dsc->round_start) {
 800a32c:	7a63      	ldrb	r3, [r4, #9]
 800a32e:	075a      	lsls	r2, r3, #29
 800a330:	d517      	bpl.n	800a362 <lv_draw_sw_line+0x1aa>
            cir_area.x1 = point1->x - r;
 800a332:	9b03      	ldr	r3, [sp, #12]
 800a334:	881a      	ldrh	r2, [r3, #0]
 800a336:	b2ab      	uxth	r3, r5
 800a338:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point1->x + r - r_corr;
 800a33a:	441a      	add	r2, r3
            cir_area.x1 = point1->x - r;
 800a33c:	f8ad 10ac 	strh.w	r1, [sp, #172]	; 0xac
            cir_area.x2 = point1->x + r - r_corr;
 800a340:	1b92      	subs	r2, r2, r6
            cir_area.y1 = point1->y - r;
 800a342:	9903      	ldr	r1, [sp, #12]
            cir_area.x2 = point1->x + r - r_corr;
 800a344:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a348:	aa2b      	add	r2, sp, #172	; 0xac
            cir_area.y1 = point1->y - r;
 800a34a:	8849      	ldrh	r1, [r1, #2]
 800a34c:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point1->y + r - r_corr ;
 800a34e:	440b      	add	r3, r1
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a350:	a936      	add	r1, sp, #216	; 0xd8
            cir_area.y2 = point1->y + r - r_corr ;
 800a352:	1b9b      	subs	r3, r3, r6
            cir_area.y1 = point1->y - r;
 800a354:	f8ad 00ae 	strh.w	r0, [sp, #174]	; 0xae
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a358:	9802      	ldr	r0, [sp, #8]
            cir_area.y2 = point1->y + r - r_corr ;
 800a35a:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a35e:	f015 f822 	bl	801f3a6 <lv_draw_rect>
        if(dsc->round_end) {
 800a362:	7a63      	ldrb	r3, [r4, #9]
 800a364:	071b      	lsls	r3, r3, #28
 800a366:	d517      	bpl.n	800a398 <lv_draw_sw_line+0x1e0>
            cir_area.x1 = point2->x - r;
 800a368:	9b04      	ldr	r3, [sp, #16]
 800a36a:	881a      	ldrh	r2, [r3, #0]
 800a36c:	b2ab      	uxth	r3, r5
 800a36e:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point2->x + r - r_corr;
 800a370:	441a      	add	r2, r3
            cir_area.x1 = point2->x - r;
 800a372:	f8ad 10ac 	strh.w	r1, [sp, #172]	; 0xac
            cir_area.x2 = point2->x + r - r_corr;
 800a376:	1b92      	subs	r2, r2, r6
            cir_area.y1 = point2->y - r;
 800a378:	9904      	ldr	r1, [sp, #16]
            cir_area.x2 = point2->x + r - r_corr;
 800a37a:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a37e:	aa2b      	add	r2, sp, #172	; 0xac
            cir_area.y1 = point2->y - r;
 800a380:	8849      	ldrh	r1, [r1, #2]
 800a382:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point2->y + r - r_corr ;
 800a384:	440b      	add	r3, r1
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a386:	a936      	add	r1, sp, #216	; 0xd8
            cir_area.y2 = point2->y + r - r_corr ;
 800a388:	1b9b      	subs	r3, r3, r6
            cir_area.y1 = point2->y - r;
 800a38a:	f8ad 00ae 	strh.w	r0, [sp, #174]	; 0xae
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a38e:	9802      	ldr	r0, [sp, #8]
            cir_area.y2 = point2->y + r - r_corr ;
 800a390:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800a394:	f015 f807 	bl	801f3a6 <lv_draw_rect>
    draw_ctx->clip_area = clip_area_ori;
 800a398:	9b02      	ldr	r3, [sp, #8]
 800a39a:	9a06      	ldr	r2, [sp, #24]
 800a39c:	609a      	str	r2, [r3, #8]
}
 800a39e:	b045      	add	sp, #276	; 0x114
 800a3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a3a4:	f7fd ffba 	bl	800831c <lv_draw_mask_is_any>
 800a3a8:	f080 0501 	eor.w	r5, r0, #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a3ac:	f04f 0900 	mov.w	r9, #0
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a3b0:	b2ed      	uxtb	r5, r5
 800a3b2:	e791      	b.n	800a2d8 <lv_draw_sw_line+0x120>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a3b4:	f8bd 50b0 	ldrh.w	r5, [sp, #176]	; 0xb0
 800a3b8:	f9bd 60ac 	ldrsh.w	r6, [sp, #172]	; 0xac
 800a3bc:	3501      	adds	r5, #1
        blend_area.y2 = blend_area.y1;
 800a3be:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
        lv_coord_t y2 = blend_area.y2;
 800a3c2:	f9bd a0b2 	ldrsh.w	sl, [sp, #178]	; 0xb2
 800a3c6:	1bad      	subs	r5, r5, r6
        blend_area.y2 = blend_area.y1;
 800a3c8:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
 800a3cc:	b22d      	sxth	r5, r5
        if(dashed) {
 800a3ce:	f1b9 0f00 	cmp.w	r9, #0
 800a3d2:	d01a      	beq.n	800a40a <lv_draw_sw_line+0x252>
            dash_start = (blend_area.x1) % (dsc->dash_gap + dsc->dash_width);
 800a3d4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800a3d8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800a3dc:	4413      	add	r3, r2
 800a3de:	fb96 f2f3 	sdiv	r2, r6, r3
 800a3e2:	fb03 6612 	mls	r6, r3, r2, r6
 800a3e6:	b236      	sxth	r6, r6
        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 800a3e8:	4628      	mov	r0, r5
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800a3ea:	f04f 0b00 	mov.w	fp, #0
        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 800a3ee:	f008 f9af 	bl	8012750 <lv_mem_buf_get>
        blend_dsc.mask_area = &blend_area;
 800a3f2:	ab2b      	add	r3, sp, #172	; 0xac
        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 800a3f4:	4607      	mov	r7, r0
        for(h = blend_area.y1; h <= y2; h++) {
 800a3f6:	f9bd 80ae 	ldrsh.w	r8, [sp, #174]	; 0xae
        blend_dsc.mask_buf = mask_buf;
 800a3fa:	9039      	str	r0, [sp, #228]	; 0xe4
        blend_dsc.mask_area = &blend_area;
 800a3fc:	933b      	str	r3, [sp, #236]	; 0xec
        for(h = blend_area.y1; h <= y2; h++) {
 800a3fe:	45d0      	cmp	r8, sl
 800a400:	dd05      	ble.n	800a40e <lv_draw_sw_line+0x256>
        lv_mem_buf_release(mask_buf);
 800a402:	4638      	mov	r0, r7
            lv_draw_sw_blend(draw_ctx, &blend_dsc);

            blend_area.y1++;
            blend_area.y2++;
        }
        lv_mem_buf_release(mask_buf);
 800a404:	f008 f9ee 	bl	80127e4 <lv_mem_buf_release>
 800a408:	e779      	b.n	800a2fe <lv_draw_sw_line+0x146>
        lv_coord_t dash_start = 0;
 800a40a:	464e      	mov	r6, r9
 800a40c:	e7ec      	b.n	800a3e8 <lv_draw_sw_line+0x230>
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void lv_memset_ff(void * dst, size_t len)
{
    memset(dst, 0xFF, len);
 800a40e:	462a      	mov	r2, r5
 800a410:	21ff      	movs	r1, #255	; 0xff
 800a412:	4638      	mov	r0, r7
 800a414:	f010 f984 	bl	801a720 <memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_area_w);
 800a418:	462b      	mov	r3, r5
 800a41a:	fa0f f288 	sxth.w	r2, r8
 800a41e:	f9bd 10ac 	ldrsh.w	r1, [sp, #172]	; 0xac
 800a422:	4638      	mov	r0, r7
 800a424:	f7fd ff22 	bl	800826c <lv_draw_mask_apply>
 800a428:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
            if(dashed) {
 800a42c:	f1b9 0f00 	cmp.w	r9, #0
 800a430:	d013      	beq.n	800a45a <lv_draw_sw_line+0x2a2>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800a432:	b190      	cbz	r0, 800a45a <lv_draw_sw_line+0x2a2>
                    lv_coord_t dash_cnt = dash_start;
 800a434:	4631      	mov	r1, r6
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800a436:	2300      	movs	r3, #0
 800a438:	e00a      	b.n	800a450 <lv_draw_sw_line+0x298>
                        if(dash_cnt <= dsc->dash_width) {
 800a43a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800a43e:	428a      	cmp	r2, r1
 800a440:	db1c      	blt.n	800a47c <lv_draw_sw_line+0x2c4>
                            i += diff;
 800a442:	4413      	add	r3, r2
 800a444:	1a5b      	subs	r3, r3, r1
 800a446:	b21b      	sxth	r3, r3
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800a448:	3301      	adds	r3, #1
 800a44a:	3201      	adds	r2, #1
 800a44c:	b21b      	sxth	r3, r3
 800a44e:	b211      	sxth	r1, r2
 800a450:	429d      	cmp	r5, r3
 800a452:	dcf2      	bgt.n	800a43a <lv_draw_sw_line+0x282>
                    blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a454:	2302      	movs	r3, #2
 800a456:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a45a:	a936      	add	r1, sp, #216	; 0xd8
 800a45c:	9802      	ldr	r0, [sp, #8]
 800a45e:	f015 ffb8 	bl	80203d2 <lv_draw_sw_blend>
            blend_area.y1++;
 800a462:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
        for(h = blend_area.y1; h <= y2; h++) {
 800a466:	f108 0801 	add.w	r8, r8, #1
            blend_area.y1++;
 800a46a:	3301      	adds	r3, #1
 800a46c:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
            blend_area.y2++;
 800a470:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 800a474:	3301      	adds	r3, #1
 800a476:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        for(h = blend_area.y1; h <= y2; h++) {
 800a47a:	e7c0      	b.n	800a3fe <lv_draw_sw_line+0x246>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800a47c:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800a480:	4402      	add	r2, r0
 800a482:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
 800a484:	bfb6      	itet	lt
 800a486:	460a      	movlt	r2, r1
                            dash_cnt = 0;
 800a488:	2200      	movge	r2, #0
                            mask_buf[i] = 0x00;
 800a48a:	f807 b003 	strblt.w	fp, [r7, r3]
 800a48e:	e7db      	b.n	800a448 <lv_draw_sw_line+0x290>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 800a490:	f9b3 7000 	ldrsh.w	r7, [r3]
 800a494:	9b04      	ldr	r3, [sp, #16]
 800a496:	f9b3 9000 	ldrsh.w	r9, [r3]
 800a49a:	454f      	cmp	r7, r9
 800a49c:	f040 80a1 	bne.w	800a5e2 <lv_draw_sw_line+0x42a>
    int32_t w = dsc->width - 1;
 800a4a0:	3d01      	subs	r5, #1
    blend_area.x1 = point1->x - w_half1;
 800a4a2:	b2bf      	uxth	r7, r7
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 800a4a4:	4546      	cmp	r6, r8
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a4a6:	a92b      	add	r1, sp, #172	; 0xac
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800a4a8:	f005 0301 	and.w	r3, r5, #1
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a4ac:	4652      	mov	r2, sl
 800a4ae:	4608      	mov	r0, r1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800a4b0:	eb03 0365 	add.w	r3, r3, r5, asr #1
    blend_area.x1 = point1->x - w_half1;
 800a4b4:	eba7 0303 	sub.w	r3, r7, r3
    blend_area.x2 = point1->x + w_half0;
 800a4b8:	eb07 0765 	add.w	r7, r7, r5, asr #1
    blend_area.x1 = point1->x - w_half1;
 800a4bc:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 800a4c0:	4633      	mov	r3, r6
 800a4c2:	bfa8      	it	ge
 800a4c4:	4643      	movge	r3, r8
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800a4c6:	4546      	cmp	r6, r8
    blend_area.x2 = point1->x + w_half0;
 800a4c8:	f8ad 70b0 	strh.w	r7, [sp, #176]	; 0xb0
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800a4cc:	bfb8      	it	lt
 800a4ce:	4646      	movlt	r6, r8
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 800a4d0:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800a4d4:	3e01      	subs	r6, #1
 800a4d6:	f8ad 60b2 	strh.w	r6, [sp, #178]	; 0xb2
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a4da:	f019 feca 	bl	8024272 <_lv_area_intersect>
    if(!is_common) return;
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	f43f af0d 	beq.w	800a2fe <lv_draw_sw_line+0x146>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a4e4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a4e8:	a82b      	add	r0, sp, #172	; 0xac
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a4ea:	b11b      	cbz	r3, 800a4f4 <lv_draw_sw_line+0x33c>
 800a4ec:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d13d      	bne.n	800a570 <lv_draw_sw_line+0x3b8>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a4f4:	f7fd ff12 	bl	800831c <lv_draw_mask_is_any>
 800a4f8:	f080 0501 	eor.w	r5, r0, #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a4fc:	f04f 0900 	mov.w	r9, #0
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a500:	b2ed      	uxtb	r5, r5
    memset(dst, 0x00, len);
 800a502:	221c      	movs	r2, #28
 800a504:	2100      	movs	r1, #0
 800a506:	a836      	add	r0, sp, #216	; 0xd8
 800a508:	f010 f90a 	bl	801a720 <memset>
    blend_dsc.blend_area = &blend_area;
 800a50c:	ab2b      	add	r3, sp, #172	; 0xac
 800a50e:	9336      	str	r3, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 800a510:	8823      	ldrh	r3, [r4, #0]
 800a512:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 800a516:	7a23      	ldrb	r3, [r4, #8]
 800a518:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
    if(simple_mode) {
 800a51c:	2d00      	cmp	r5, #0
 800a51e:	f47f aeea 	bne.w	800a2f6 <lv_draw_sw_line+0x13e>
 800a522:	f8bd 60b0 	ldrh.w	r6, [sp, #176]	; 0xb0
 800a526:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 800a52a:	3601      	adds	r6, #1
        lv_coord_t y2 = blend_area.y2;
 800a52c:	f9bd a0b2 	ldrsh.w	sl, [sp, #178]	; 0xb2
 800a530:	1af6      	subs	r6, r6, r3
        blend_area.y2 = blend_area.y1;
 800a532:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 800a536:	b236      	sxth	r6, r6
 800a538:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800a53c:	4630      	mov	r0, r6
 800a53e:	f008 f907 	bl	8012750 <lv_mem_buf_get>
        blend_dsc.mask_area = &blend_area;
 800a542:	ab2b      	add	r3, sp, #172	; 0xac
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800a544:	4680      	mov	r8, r0
        blend_dsc.mask_buf = mask_buf;
 800a546:	f9bd 70ae 	ldrsh.w	r7, [sp, #174]	; 0xae
 800a54a:	9039      	str	r0, [sp, #228]	; 0xe4
        blend_dsc.mask_area = &blend_area;
 800a54c:	933b      	str	r3, [sp, #236]	; 0xec
        if(dashed) {
 800a54e:	f1b9 0f00 	cmp.w	r9, #0
 800a552:	d013      	beq.n	800a57c <lv_draw_sw_line+0x3c4>
            dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800a554:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800a558:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800a55c:	4413      	add	r3, r2
 800a55e:	fb97 f5f3 	sdiv	r5, r7, r3
 800a562:	fb03 7515 	mls	r5, r3, r5, r7
 800a566:	b22d      	sxth	r5, r5
        for(h = blend_area.y1; h <= y2; h++) {
 800a568:	4557      	cmp	r7, sl
 800a56a:	dd09      	ble.n	800a580 <lv_draw_sw_line+0x3c8>
        lv_mem_buf_release(mask_buf);
 800a56c:	4640      	mov	r0, r8
 800a56e:	e749      	b.n	800a404 <lv_draw_sw_line+0x24c>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a570:	f04f 0901 	mov.w	r9, #1
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800a574:	2500      	movs	r5, #0
 800a576:	f7fd fed1 	bl	800831c <lv_draw_mask_is_any>
 800a57a:	e7c2      	b.n	800a502 <lv_draw_sw_line+0x34a>
        lv_coord_t dash_start = 0;
 800a57c:	464d      	mov	r5, r9
        for(h = blend_area.y1; h <= y2; h++) {
 800a57e:	e7f3      	b.n	800a568 <lv_draw_sw_line+0x3b0>
    memset(dst, 0xFF, len);
 800a580:	4632      	mov	r2, r6
 800a582:	21ff      	movs	r1, #255	; 0xff
 800a584:	4640      	mov	r0, r8
 800a586:	f010 f8cb 	bl	801a720 <memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, draw_area_w);
 800a58a:	4633      	mov	r3, r6
 800a58c:	b23a      	sxth	r2, r7
 800a58e:	f9bd 10ac 	ldrsh.w	r1, [sp, #172]	; 0xac
 800a592:	4640      	mov	r0, r8
 800a594:	f7fd fe6a 	bl	800826c <lv_draw_mask_apply>
 800a598:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
            if(dashed) {
 800a59c:	f1b9 0f00 	cmp.w	r9, #0
 800a5a0:	d00f      	beq.n	800a5c2 <lv_draw_sw_line+0x40a>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800a5a2:	b160      	cbz	r0, 800a5be <lv_draw_sw_line+0x406>
                    if(dash_cnt > dsc->dash_width) {
 800a5a4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800a5a8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 800a5ac:	42aa      	cmp	r2, r5
 800a5ae:	bfb8      	it	lt
 800a5b0:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
                        dash_cnt = 0;
 800a5b8:	429d      	cmp	r5, r3
 800a5ba:	bfa8      	it	ge
 800a5bc:	2500      	movge	r5, #0
                dash_cnt ++;
 800a5be:	3501      	adds	r5, #1
 800a5c0:	b22d      	sxth	r5, r5
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a5c2:	a936      	add	r1, sp, #216	; 0xd8
 800a5c4:	9802      	ldr	r0, [sp, #8]
 800a5c6:	f015 ff04 	bl	80203d2 <lv_draw_sw_blend>
            blend_area.y1++;
 800a5ca:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
        for(h = blend_area.y1; h <= y2; h++) {
 800a5ce:	3701      	adds	r7, #1
            blend_area.y1++;
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
            blend_area.y2++;
 800a5d6:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 800a5da:	3301      	adds	r3, #1
 800a5dc:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        for(h = blend_area.y1; h <= y2; h++) {
 800a5e0:	e7c2      	b.n	800a568 <lv_draw_sw_line+0x3b0>
{
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 800a5e2:	4546      	cmp	r6, r8
 800a5e4:	db05      	blt.n	800a5f2 <lv_draw_sw_line+0x43a>
 800a5e6:	4633      	mov	r3, r6
 800a5e8:	4646      	mov	r6, r8
 800a5ea:	4698      	mov	r8, r3
 800a5ec:	463b      	mov	r3, r7
 800a5ee:	464f      	mov	r7, r9
 800a5f0:	4699      	mov	r9, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
 800a5f2:	eba9 0307 	sub.w	r3, r9, r7
    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800a5f6:	4ac5      	ldr	r2, [pc, #788]	; (800a90c <lv_draw_sw_line+0x754>)
    int32_t xdiff = p2.x - p1.x;
 800a5f8:	9307      	str	r3, [sp, #28]
    int32_t ydiff = p2.y - p1.y;
 800a5fa:	eba8 0306 	sub.w	r3, r8, r6
 800a5fe:	9308      	str	r3, [sp, #32]
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 800a600:	eba9 0307 	sub.w	r3, r9, r7
 800a604:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 800a608:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
 800a60c:	eba8 0306 	sub.w	r3, r8, r6
 800a610:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 800a614:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800a618:	45d3      	cmp	fp, sl
 800a61a:	bfcb      	itete	gt
 800a61c:	ea4f 134a 	movgt.w	r3, sl, lsl #5
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800a620:	ea4f 134b 	movle.w	r3, fp, lsl #5
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800a624:	fbb3 f3fb 	udivgt	r3, r3, fp
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800a628:	fbb3 f3fa 	udivle	r3, r3, sl
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800a62c:	5cd2      	ldrb	r2, [r2, r3]
 800a62e:	233f      	movs	r3, #63	; 0x3f
 800a630:	fb15 3502 	smlabb	r5, r5, r2, r3
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800a634:	f3c5 12cf 	ubfx	r2, r5, #7, #16
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800a638:	11eb      	asrs	r3, r5, #7
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800a63a:	45b9      	cmp	r9, r7
 800a63c:	bfd4      	ite	le
 800a63e:	ebc2 0109 	rsble	r1, r2, r9
 800a642:	ebc2 0107 	rsbgt	r1, r2, r7
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800a646:	9305      	str	r3, [sp, #20]
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800a648:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 800a64c:	45b9      	cmp	r9, r7
 800a64e:	bfac      	ite	ge
 800a650:	eb02 0109 	addge.w	r1, r2, r9
 800a654:	19d1      	addlt	r1, r2, r7
 800a656:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800a65a:	45b0      	cmp	r8, r6
 800a65c:	bfd4      	ite	le
 800a65e:	ebc2 0108 	rsble	r1, r2, r8
 800a662:	ebc2 0106 	rsbgt	r1, r2, r6
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800a666:	45b0      	cmp	r8, r6
 800a668:	bfac      	ite	ge
 800a66a:	4442      	addge	r2, r8
 800a66c:	1992      	addlt	r2, r2, r6
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800a66e:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a672:	a90c      	add	r1, sp, #48	; 0x30
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800a674:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800a678:	aa0a      	add	r2, sp, #40	; 0x28
 800a67a:	4608      	mov	r0, r1
 800a67c:	f019 fdf9 	bl	8024272 <_lv_area_intersect>
    if(is_common == false) return;
 800a680:	2800      	cmp	r0, #0
 800a682:	f43f ae3c 	beq.w	800a2fe <lv_draw_sw_line+0x146>
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800a686:	9b05      	ldr	r3, [sp, #20]
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 800a688:	45d3      	cmp	fp, sl
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800a68a:	f003 0101 	and.w	r1, r3, #1
 800a68e:	eb01 2125 	add.w	r1, r1, r5, asr #8
        if(xdiff > 0) {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a692:	f3c5 250f 	ubfx	r5, r5, #8, #16
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800a696:	b289      	uxth	r1, r1
    if(flat) {
 800a698:	f340 80dd 	ble.w	800a856 <lv_draw_sw_line+0x69e>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800a69c:	fa11 fb86 	uxtah	fp, r1, r6
 800a6a0:	fa11 f188 	uxtah	r1, r1, r8
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a6a4:	eba6 0a05 	sub.w	sl, r6, r5
 800a6a8:	eba8 0505 	sub.w	r5, r8, r5
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800a6ac:	b20b      	sxth	r3, r1
 800a6ae:	fa0f fb8b 	sxth.w	fp, fp
 800a6b2:	9305      	str	r3, [sp, #20]
        if(xdiff > 0) {
 800a6b4:	eba9 0307 	sub.w	r3, r9, r7
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a6b8:	fa0f fa8a 	sxth.w	sl, sl
        if(xdiff > 0) {
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f04f 0300 	mov.w	r3, #0
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a6c2:	b22d      	sxth	r5, r5
 800a6c4:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
 800a6c6:	f340 80b8 	ble.w	800a83a <lv_draw_sw_line+0x682>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a6ca:	464b      	mov	r3, r9
 800a6cc:	4652      	mov	r2, sl
 800a6ce:	4639      	mov	r1, r7
 800a6d0:	a815      	add	r0, sp, #84	; 0x54
 800a6d2:	9500      	str	r5, [sp, #0]
 800a6d4:	f7fd fe4c 	bl	8008370 <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800a6d8:	2301      	movs	r3, #1
 800a6da:	465a      	mov	r2, fp
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	9b05      	ldr	r3, [sp, #20]
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	464b      	mov	r3, r9
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a6e4:	4639      	mov	r1, r7
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800a6e6:	a820      	add	r0, sp, #128	; 0x80
 800a6e8:	f7fd fe42 	bl	8008370 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	a815      	add	r0, sp, #84	; 0x54
 800a6f0:	f7fd fda6 	bl	8008240 <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800a6f4:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800a6f6:	9005      	str	r0, [sp, #20]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800a6f8:	a820      	add	r0, sp, #128	; 0x80
 800a6fa:	f7fd fda1 	bl	8008240 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 800a6fe:	f894 a009 	ldrb.w	sl, [r4, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800a702:	9009      	str	r0, [sp, #36]	; 0x24
    if(!dsc->raw_end) {
 800a704:	f01a 0a10 	ands.w	sl, sl, #16
 800a708:	f040 80c1 	bne.w	800a88e <lv_draw_sw_line+0x6d6>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800a70c:	2203      	movs	r2, #3
 800a70e:	f8bd 5020 	ldrh.w	r5, [sp, #32]
 800a712:	f8bd b01c 	ldrh.w	fp, [sp, #28]
 800a716:	4639      	mov	r1, r7
 800a718:	9201      	str	r2, [sp, #4]
 800a71a:	eba9 0207 	sub.w	r2, r9, r7
 800a71e:	1b7b      	subs	r3, r7, r5
 800a720:	a82b      	add	r0, sp, #172	; 0xac
 800a722:	fa16 f282 	uxtah	r2, r6, r2
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800a726:	44c3      	add	fp, r8
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800a728:	b21b      	sxth	r3, r3
 800a72a:	b212      	sxth	r2, r2
 800a72c:	9200      	str	r2, [sp, #0]
 800a72e:	4632      	mov	r2, r6
 800a730:	f7fd fe1e 	bl	8008370 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800a734:	2202      	movs	r2, #2
 800a736:	eba9 0305 	sub.w	r3, r9, r5
 800a73a:	4649      	mov	r1, r9
 800a73c:	9201      	str	r2, [sp, #4]
 800a73e:	fa0f f28b 	sxth.w	r2, fp
 800a742:	b21b      	sxth	r3, r3
 800a744:	a836      	add	r0, sp, #216	; 0xd8
 800a746:	9200      	str	r2, [sp, #0]
 800a748:	4642      	mov	r2, r8
 800a74a:	f7fd fe11 	bl	8008370 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800a74e:	4651      	mov	r1, sl
 800a750:	a82b      	add	r0, sp, #172	; 0xac
 800a752:	f7fd fd75 	bl	8008240 <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800a756:	4651      	mov	r1, sl
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800a758:	4683      	mov	fp, r0
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800a75a:	a836      	add	r0, sp, #216	; 0xd8
 800a75c:	f7fd fd70 	bl	8008240 <lv_draw_mask_add>
 800a760:	4607      	mov	r7, r0
 800a762:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
 800a766:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800a76a:	3501      	adds	r5, #1
 800a76c:	1aed      	subs	r5, r5, r3
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800a76e:	f7fc fd49 	bl	8007204 <_lv_refr_get_disp_refreshing>
 800a772:	f007 fc91 	bl	8012098 <lv_disp_get_hor_res>
 800a776:	4606      	mov	r6, r0
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 800a778:	a80c      	add	r0, sp, #48	; 0x30
 800a77a:	b22d      	sxth	r5, r5
 800a77c:	f019 fd4b 	bl	8024216 <lv_area_get_size>
 800a780:	4286      	cmp	r6, r0
 800a782:	d903      	bls.n	800a78c <lv_draw_sw_line+0x5d4>
 800a784:	a80c      	add	r0, sp, #48	; 0x30
 800a786:	f019 fd46 	bl	8024216 <lv_area_get_size>
 800a78a:	4606      	mov	r6, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a78c:	4630      	mov	r0, r6

    lv_coord_t y2 = blend_area.y2;
    blend_area.y2 = blend_area.y1;

    uint32_t mask_p = 0;
 800a78e:	f04f 0900 	mov.w	r9, #0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a792:	f007 ffdd 	bl	8012750 <lv_mem_buf_get>
    lv_coord_t y2 = blend_area.y2;
 800a796:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800a79a:	4632      	mov	r2, r6
 800a79c:	21ff      	movs	r1, #255	; 0xff
 800a79e:	9307      	str	r3, [sp, #28]
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a7a0:	4680      	mov	r8, r0
    blend_area.y2 = blend_area.y1;
 800a7a2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800a7a6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800a7aa:	f00f ffb9 	bl	801a720 <memset>
    memset(dst, 0x00, len);
 800a7ae:	221c      	movs	r2, #28
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	a80e      	add	r0, sp, #56	; 0x38
 800a7b4:	f00f ffb4 	bl	801a720 <memset>
    lv_memset_ff(mask_buf, mask_buf_size);

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
    blend_dsc.blend_area = &blend_area;
    blend_dsc.color = dsc->color;
 800a7b8:	8822      	ldrh	r2, [r4, #0]
    blend_dsc.blend_area = &blend_area;
 800a7ba:	ab0c      	add	r3, sp, #48	; 0x30
    blend_dsc.opa = dsc->opa;
    blend_dsc.mask_buf = mask_buf;
    blend_dsc.mask_area = &blend_area;

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 800a7bc:	f9bd a032 	ldrsh.w	sl, [sp, #50]	; 0x32
    blend_dsc.color = dsc->color;
 800a7c0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    blend_dsc.opa = dsc->opa;
 800a7c4:	7a22      	ldrb	r2, [r4, #8]
    blend_dsc.blend_area = &blend_area;
 800a7c6:	930e      	str	r3, [sp, #56]	; 0x38
    blend_dsc.opa = dsc->opa;
 800a7c8:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
    blend_dsc.mask_buf = mask_buf;
 800a7cc:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    blend_dsc.mask_area = &blend_area;
 800a7d0:	9313      	str	r3, [sp, #76]	; 0x4c
    for(h = blend_area.y1; h <= y2; h++) {
 800a7d2:	9b07      	ldr	r3, [sp, #28]
 800a7d4:	459a      	cmp	sl, r3
 800a7d6:	dd5e      	ble.n	800a896 <lv_draw_sw_line+0x6de>
            lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 800a7d8:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800a7dc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d009      	beq.n	800a7f8 <lv_draw_sw_line+0x640>
        blend_area.y2--;
 800a7e4:	3b01      	subs	r3, #1
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a7e6:	a90e      	add	r1, sp, #56	; 0x38
 800a7e8:	9802      	ldr	r0, [sp, #8]
        blend_area.y2--;
 800a7ea:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a7ee:	2302      	movs	r3, #2
 800a7f0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a7f4:	f015 fded 	bl	80203d2 <lv_draw_sw_blend>
    }

    lv_mem_buf_release(mask_buf);
 800a7f8:	4640      	mov	r0, r8
 800a7fa:	f007 fff3 	bl	80127e4 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_left_param);
 800a7fe:	a815      	add	r0, sp, #84	; 0x54
 800a800:	f014 fd90 	bl	801f324 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_right_param);
 800a804:	a820      	add	r0, sp, #128	; 0x80
 800a806:	f014 fd8d 	bl	801f324 <lv_draw_mask_free_param>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 800a80a:	f1bb 3fff 	cmp.w	fp, #4294967295
 800a80e:	d002      	beq.n	800a816 <lv_draw_sw_line+0x65e>
 800a810:	a82b      	add	r0, sp, #172	; 0xac
 800a812:	f014 fd87 	bl	801f324 <lv_draw_mask_free_param>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 800a816:	1c79      	adds	r1, r7, #1
 800a818:	d002      	beq.n	800a820 <lv_draw_sw_line+0x668>
 800a81a:	a836      	add	r0, sp, #216	; 0xd8
 800a81c:	f014 fd82 	bl	801f324 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_left_id);
 800a820:	9805      	ldr	r0, [sp, #20]
 800a822:	f7fd fd43 	bl	80082ac <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 800a826:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a828:	f7fd fd40 	bl	80082ac <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 800a82c:	4658      	mov	r0, fp
 800a82e:	f7fd fd3d 	bl	80082ac <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 800a832:	4638      	mov	r0, r7
 800a834:	f7fd fd3a 	bl	80082ac <lv_draw_mask_remove_id>
 800a838:	e561      	b.n	800a2fe <lv_draw_sw_line+0x146>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800a83a:	9b05      	ldr	r3, [sp, #20]
 800a83c:	465a      	mov	r2, fp
 800a83e:	4639      	mov	r1, r7
 800a840:	a815      	add	r0, sp, #84	; 0x54
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	464b      	mov	r3, r9
 800a846:	f7fd fd93 	bl	8008370 <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800a84a:	2301      	movs	r3, #1
 800a84c:	4652      	mov	r2, sl
 800a84e:	e9cd 5300 	strd	r5, r3, [sp]
 800a852:	464b      	mov	r3, r9
 800a854:	e746      	b.n	800a6e4 <lv_draw_sw_line+0x52c>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 800a856:	fa11 f389 	uxtah	r3, r1, r9
 800a85a:	2200      	movs	r2, #0
 800a85c:	fa11 f187 	uxtah	r1, r1, r7
 800a860:	fa1f fa87 	uxth.w	sl, r7
 800a864:	fa1f fb89 	uxth.w	fp, r9
 800a868:	a815      	add	r0, sp, #84	; 0x54
 800a86a:	b21b      	sxth	r3, r3
 800a86c:	b209      	sxth	r1, r1
 800a86e:	e9cd 8200 	strd	r8, r2, [sp]
 800a872:	4632      	mov	r2, r6
 800a874:	f7fd fd7c 	bl	8008370 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800a878:	2201      	movs	r2, #1
 800a87a:	ebab 0305 	sub.w	r3, fp, r5
 800a87e:	ebaa 0105 	sub.w	r1, sl, r5
 800a882:	e9cd 8200 	strd	r8, r2, [sp]
 800a886:	b21b      	sxth	r3, r3
 800a888:	4632      	mov	r2, r6
 800a88a:	b209      	sxth	r1, r1
 800a88c:	e72b      	b.n	800a6e6 <lv_draw_sw_line+0x52e>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 800a88e:	f04f 37ff 	mov.w	r7, #4294967295
    int16_t mask_top_id = LV_MASK_ID_INV;
 800a892:	46bb      	mov	fp, r7
 800a894:	e765      	b.n	800a762 <lv_draw_sw_line+0x5aa>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 800a896:	eb08 0309 	add.w	r3, r8, r9
 800a89a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 800a89e:	fa0f f28a 	sxth.w	r2, sl
 800a8a2:	eb08 0009 	add.w	r0, r8, r9
 800a8a6:	9308      	str	r3, [sp, #32]
 800a8a8:	462b      	mov	r3, r5
 800a8aa:	f7fd fcdf 	bl	800826c <lv_draw_mask_apply>
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800a8b4:	b920      	cbnz	r0, 800a8c0 <lv_draw_sw_line+0x708>
 800a8b6:	462a      	mov	r2, r5
 800a8b8:	eb08 0009 	add.w	r0, r8, r9
 800a8bc:	f00f ff30 	bl	801a720 <memset>
        mask_p += draw_area_w;
 800a8c0:	44a9      	add	r9, r5
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 800a8c2:	eb05 0309 	add.w	r3, r5, r9
 800a8c6:	429e      	cmp	r6, r3
 800a8c8:	d907      	bls.n	800a8da <lv_draw_sw_line+0x722>
            blend_area.y2 ++;
 800a8ca:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    for(h = blend_area.y1; h <= y2; h++) {
 800a8d4:	f10a 0a01 	add.w	sl, sl, #1
 800a8d8:	e77b      	b.n	800a7d2 <lv_draw_sw_line+0x61a>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a8da:	f04f 0302 	mov.w	r3, #2
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a8de:	a90e      	add	r1, sp, #56	; 0x38
 800a8e0:	9802      	ldr	r0, [sp, #8]
            mask_p = 0;
 800a8e2:	f04f 0900 	mov.w	r9, #0
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a8e6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800a8ea:	f015 fd72 	bl	80203d2 <lv_draw_sw_blend>
            blend_area.y1 = blend_area.y2 + 1;
 800a8ee:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    memset(dst, 0xFF, len);
 800a8f2:	4632      	mov	r2, r6
 800a8f4:	21ff      	movs	r1, #255	; 0xff
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	b21b      	sxth	r3, r3
 800a8fc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            blend_area.y2 = blend_area.y1;
 800a900:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800a904:	f00f ff0c 	bl	801a720 <memset>
}
 800a908:	e7e4      	b.n	800a8d4 <lv_draw_sw_line+0x71c>
 800a90a:	bf00      	nop
 800a90c:	0802ab37 	.word	0x0802ab37

0800a910 <lv_draw_sw_polygon>:
 * @param clip_area polygon will be drawn only in this area
 * @param draw_dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_sw_polygon(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * draw_dsc, const lv_point_t * points,
                        uint16_t point_cnt)
{
 800a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LV_DRAW_COMPLEX
    if(point_cnt < 3) return;
 800a914:	2b02      	cmp	r3, #2
{
 800a916:	b08d      	sub	sp, #52	; 0x34
 800a918:	4616      	mov	r6, r2
 800a91a:	461d      	mov	r5, r3
 800a91c:	9003      	str	r0, [sp, #12]
 800a91e:	9107      	str	r1, [sp, #28]
    if(point_cnt < 3) return;
 800a920:	d97c      	bls.n	800aa1c <lv_draw_sw_polygon+0x10c>
    if(points == NULL) return;
 800a922:	2a00      	cmp	r2, #0
 800a924:	d07a      	beq.n	800aa1c <lv_draw_sw_polygon+0x10c>

    /*Join adjacent points if they are on the same coordinate*/
    lv_point_t * p = lv_mem_buf_get(point_cnt * sizeof(lv_point_t));
 800a926:	009f      	lsls	r7, r3, #2
 800a928:	4638      	mov	r0, r7
 800a92a:	f007 ff11 	bl	8012750 <lv_mem_buf_get>
    if(p == NULL) return;
 800a92e:	4604      	mov	r4, r0
 800a930:	2800      	cmp	r0, #0
 800a932:	d073      	beq.n	800aa1c <lv_draw_sw_polygon+0x10c>
    uint16_t i;
    uint16_t pcnt = 0;
    p[0] = points[0];
 800a934:	6833      	ldr	r3, [r6, #0]
 800a936:	6003      	str	r3, [r0, #0]
    for(i = 0; i < point_cnt - 1; i++) {
 800a938:	1e6b      	subs	r3, r5, #1
    uint16_t pcnt = 0;
 800a93a:	2500      	movs	r5, #0
    for(i = 0; i < point_cnt - 1; i++) {
 800a93c:	462a      	mov	r2, r5
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
 800a93e:	0091      	lsls	r1, r2, #2
 800a940:	f936 8022 	ldrsh.w	r8, [r6, r2, lsl #2]
 800a944:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
 800a948:	1d08      	adds	r0, r1, #4
 800a94a:	eb06 0e00 	add.w	lr, r6, r0
 800a94e:	5e30      	ldrsh	r0, [r6, r0]
 800a950:	4580      	cmp	r8, r0
 800a952:	d105      	bne.n	800a960 <lv_draw_sw_polygon+0x50>
 800a954:	f9bc c002 	ldrsh.w	ip, [ip, #2]
 800a958:	f9be 0002 	ldrsh.w	r0, [lr, #2]
 800a95c:	4584      	cmp	ip, r0
 800a95e:	d004      	beq.n	800a96a <lv_draw_sw_polygon+0x5a>
            p[pcnt] = points[i];
 800a960:	5871      	ldr	r1, [r6, r1]
 800a962:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
            pcnt++;
 800a966:	3501      	adds	r5, #1
 800a968:	b2ad      	uxth	r5, r5
    for(i = 0; i < point_cnt - 1; i++) {
 800a96a:	3201      	adds	r2, #1
 800a96c:	b292      	uxth	r2, r2
 800a96e:	429a      	cmp	r2, r3
 800a970:	dbe5      	blt.n	800a93e <lv_draw_sw_polygon+0x2e>
        }
    }
    /*The first and the last points are also adjacent*/
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 800a972:	1f38      	subs	r0, r7, #4
 800a974:	f9b6 1000 	ldrsh.w	r1, [r6]
 800a978:	5e32      	ldrsh	r2, [r6, r0]
 800a97a:	1833      	adds	r3, r6, r0
 800a97c:	4291      	cmp	r1, r2
 800a97e:	d105      	bne.n	800a98c <lv_draw_sw_polygon+0x7c>
 800a980:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 800a984:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d004      	beq.n	800a996 <lv_draw_sw_polygon+0x86>
        p[pcnt] = points[point_cnt - 1];
 800a98c:	5833      	ldr	r3, [r6, r0]
 800a98e:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
        pcnt++;
 800a992:	3501      	adds	r5, #1
 800a994:	b2ad      	uxth	r5, r5
    }

    point_cnt = pcnt;
    if(point_cnt < 3) {
 800a996:	2d02      	cmp	r5, #2
 800a998:	d805      	bhi.n	800a9a6 <lv_draw_sw_polygon+0x96>
        lv_mem_buf_release(p);
 800a99a:	4620      	mov	r0, r4
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 800a99c:	b00d      	add	sp, #52	; 0x34
 800a99e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_mem_buf_release(p);
 800a9a2:	f007 bf1f 	b.w	80127e4 <lv_mem_buf_release>
    lv_area_t poly_coords = {.x1 = LV_COORD_MAX, .y1 = LV_COORD_MAX, .x2 = LV_COORD_MIN, .y2 = LV_COORD_MIN};
 800a9a6:	4a79      	ldr	r2, [pc, #484]	; (800ab8c <lv_draw_sw_polygon+0x27c>)
 800a9a8:	ab08      	add	r3, sp, #32
 800a9aa:	6810      	ldr	r0, [r2, #0]
 800a9ac:	6851      	ldr	r1, [r2, #4]
 800a9ae:	4622      	mov	r2, r4
 800a9b0:	c303      	stmia	r3!, {r0, r1}
 800a9b2:	2300      	movs	r3, #0
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 800a9b4:	f934 1023 	ldrsh.w	r1, [r4, r3, lsl #2]
    for(i = 0; i < point_cnt; i++) {
 800a9b8:	3204      	adds	r2, #4
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 800a9ba:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 800a9be:	4281      	cmp	r1, r0
 800a9c0:	bfa8      	it	ge
 800a9c2:	4601      	movge	r1, r0
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 800a9c4:	f9bd 0022 	ldrsh.w	r0, [sp, #34]	; 0x22
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 800a9c8:	f8ad 1020 	strh.w	r1, [sp, #32]
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 800a9cc:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 800a9d0:	4281      	cmp	r1, r0
 800a9d2:	bfa8      	it	ge
 800a9d4:	4601      	movge	r1, r0
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 800a9d6:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 800a9da:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 800a9de:	f934 1023 	ldrsh.w	r1, [r4, r3, lsl #2]
    for(i = 0; i < point_cnt; i++) {
 800a9e2:	3301      	adds	r3, #1
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 800a9e4:	4281      	cmp	r1, r0
 800a9e6:	bfb8      	it	lt
 800a9e8:	4601      	movlt	r1, r0
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 800a9ea:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 800a9ee:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 800a9f2:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 800a9f6:	4281      	cmp	r1, r0
 800a9f8:	bfb8      	it	lt
 800a9fa:	4601      	movlt	r1, r0
 800a9fc:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    for(i = 0; i < point_cnt; i++) {
 800aa00:	b299      	uxth	r1, r3
 800aa02:	428d      	cmp	r5, r1
 800aa04:	d8d6      	bhi.n	800a9b4 <lv_draw_sw_polygon+0xa4>
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
 800aa06:	ae0a      	add	r6, sp, #40	; 0x28
 800aa08:	9b03      	ldr	r3, [sp, #12]
 800aa0a:	a908      	add	r1, sp, #32
 800aa0c:	689a      	ldr	r2, [r3, #8]
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f019 fc2f 	bl	8024272 <_lv_area_intersect>
    if(!is_common) {
 800aa14:	b928      	cbnz	r0, 800aa22 <lv_draw_sw_polygon+0x112>
        lv_mem_buf_release(p);
 800aa16:	4620      	mov	r0, r4
 800aa18:	f007 fee4 	bl	80127e4 <lv_mem_buf_release>
}
 800aa1c:	b00d      	add	sp, #52	; 0x34
 800aa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800aa22:	9b03      	ldr	r3, [sp, #12]
    lv_coord_t y_min = p[0].y;
 800aa24:	4622      	mov	r2, r4
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	9306      	str	r3, [sp, #24]
    draw_ctx->clip_area = &clip_area;
 800aa2a:	9b03      	ldr	r3, [sp, #12]
 800aa2c:	609e      	str	r6, [r3, #8]
    lv_coord_t y_min = p[0].y;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
    int16_t y_min_i = 0;
 800aa34:	2600      	movs	r6, #0
        if(p[i].y < y_min) {
 800aa36:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 800aa3a:	4288      	cmp	r0, r1
            y_min_i = i;
 800aa3c:	bfb8      	it	lt
 800aa3e:	b21e      	sxthlt	r6, r3
    for(i = 1; i < point_cnt; i++) {
 800aa40:	f103 0301 	add.w	r3, r3, #1
            y_min_i = i;
 800aa44:	bfb8      	it	lt
 800aa46:	4601      	movlt	r1, r0
    for(i = 1; i < point_cnt; i++) {
 800aa48:	b298      	uxth	r0, r3
 800aa4a:	4285      	cmp	r5, r0
 800aa4c:	d8f3      	bhi.n	800aa36 <lv_draw_sw_polygon+0x126>
    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 800aa4e:	202c      	movs	r0, #44	; 0x2c
    int32_t i_prev_left = y_min_i;
 800aa50:	46b3      	mov	fp, r6
    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 800aa52:	4368      	muls	r0, r5
 800aa54:	f007 fe7c 	bl	8012750 <lv_mem_buf_get>
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800aa58:	1e72      	subs	r2, r6, #1
    i_next_right = y_min_i + 1;
 800aa5a:	f106 0301 	add.w	r3, r6, #1
    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 800aa5e:	9002      	str	r0, [sp, #8]
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800aa60:	d563      	bpl.n	800ab2a <lv_draw_sw_polygon+0x21a>
 800aa62:	442a      	add	r2, r5
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 800aa64:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800aa68:	f834 0026 	ldrh.w	r0, [r4, r6, lsl #2]
 800aa6c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    if(dyl * dxr < dyr * dxl) inv = true;
 800aa70:	f8dd 9008 	ldr.w	r9, [sp, #8]
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 800aa74:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 800aa78:	f8bc c002 	ldrh.w	ip, [ip, #2]
 800aa7c:	887f      	ldrh	r7, [r7, #2]
    if(dyl * dxr < dyr * dxl) inv = true;
 800aa7e:	f04f 0a00 	mov.w	sl, #0
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 800aa82:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 800aa86:	ebac 0c07 	sub.w	ip, ip, r7
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 800aa8a:	8849      	ldrh	r1, [r1, #2]
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 800aa8c:	1a1b      	subs	r3, r3, r0
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 800aa8e:	1bc9      	subs	r1, r1, r7
    if(dyl * dxr < dyr * dxl) inv = true;
 800aa90:	fb1c f303 	smulbb	r3, ip, r3
 800aa94:	9304      	str	r3, [sp, #16]
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 800aa96:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800aa9a:	1a1b      	subs	r3, r3, r0
    if(dyl * dxr < dyr * dxl) inv = true;
 800aa9c:	fb11 f303 	smulbb	r3, r1, r3
 800aaa0:	9305      	str	r3, [sp, #20]
        if(!inv) {
 800aaa2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	db43      	blt.n	800ab32 <lv_draw_sw_polygon+0x222>
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800aaaa:	f1bb 0801 	subs.w	r8, fp, #1
            i_next_right = i_prev_right + 1;
 800aaae:	f106 0701 	add.w	r7, r6, #1
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800aab2:	bf48      	it	mi
 800aab4:	44a8      	addmi	r8, r5
            if(i_next_right > point_cnt - 1) i_next_right = 0;
 800aab6:	42af      	cmp	r7, r5
 800aab8:	bfa8      	it	ge
 800aaba:	2700      	movge	r7, #0
        if(p[i_next_left].y >= p[i_prev_left].y) {
 800aabc:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 800aac0:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800aac4:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800aac8:	eb04 028b 	add.w	r2, r4, fp, lsl #2
 800aacc:	ea4f 018b 	mov.w	r1, fp, lsl #2
 800aad0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800aad4:	4290      	cmp	r0, r2
 800aad6:	db14      	blt.n	800ab02 <lv_draw_sw_polygon+0x1f2>
            if(p[i_next_left].y != p[i_prev_left].y &&
 800aad8:	d010      	beq.n	800aafc <lv_draw_sw_polygon+0x1ec>
               p[i_next_left].x != p[i_prev_left].x) {
 800aada:	5ee3      	ldrsh	r3, [r4, r3]
 800aadc:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_left].y != p[i_prev_left].y &&
 800aade:	428b      	cmp	r3, r1
 800aae0:	d00c      	beq.n	800aafc <lv_draw_sw_polygon+0x1ec>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 800aae2:	f04f 0c01 	mov.w	ip, #1
 800aae6:	e9cd 0c00 	strd	r0, ip, [sp]
 800aaea:	4648      	mov	r0, r9
 800aaec:	f7fd fc40 	bl	8008370 <lv_draw_mask_line_points_init>
                lv_draw_mask_add(mp_next, mp);
 800aaf0:	4648      	mov	r0, r9
                mp_next++;
 800aaf2:	f109 092c 	add.w	r9, r9, #44	; 0x2c
                lv_draw_mask_add(mp_next, mp);
 800aaf6:	9902      	ldr	r1, [sp, #8]
 800aaf8:	f7fd fba2 	bl	8008240 <lv_draw_mask_add>
            mask_cnt++;
 800aafc:	f10a 0a01 	add.w	sl, sl, #1
            i_prev_left = i_next_left;
 800ab00:	46c3      	mov	fp, r8
        if(mask_cnt == point_cnt) break;
 800ab02:	4555      	cmp	r5, sl
 800ab04:	d11f      	bne.n	800ab46 <lv_draw_sw_polygon+0x236>
    lv_draw_rect(draw_ctx, draw_dsc, &poly_coords);
 800ab06:	aa08      	add	r2, sp, #32
 800ab08:	9907      	ldr	r1, [sp, #28]
 800ab0a:	9803      	ldr	r0, [sp, #12]
 800ab0c:	f014 fc4b 	bl	801f3a6 <lv_draw_rect>
    lv_draw_mask_remove_custom(mp);
 800ab10:	9802      	ldr	r0, [sp, #8]
 800ab12:	f7fd fbdd 	bl	80082d0 <lv_draw_mask_remove_custom>
    lv_mem_buf_release(mp);
 800ab16:	9802      	ldr	r0, [sp, #8]
 800ab18:	f007 fe64 	bl	80127e4 <lv_mem_buf_release>
    lv_mem_buf_release(p);
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f007 fe61 	bl	80127e4 <lv_mem_buf_release>
    draw_ctx->clip_area = clip_area_ori;
 800ab22:	9b03      	ldr	r3, [sp, #12]
 800ab24:	9a06      	ldr	r2, [sp, #24]
 800ab26:	609a      	str	r2, [r3, #8]
 800ab28:	e778      	b.n	800aa1c <lv_draw_sw_polygon+0x10c>
    if(i_next_right > point_cnt - 1) i_next_right = 0;
 800ab2a:	429d      	cmp	r5, r3
 800ab2c:	bfd8      	it	le
 800ab2e:	2300      	movle	r3, #0
 800ab30:	e798      	b.n	800aa64 <lv_draw_sw_polygon+0x154>
            i_next_left = i_prev_left + 1;
 800ab32:	f10b 0801 	add.w	r8, fp, #1
            if(i_next_left > point_cnt - 1) i_next_left = 0;
 800ab36:	45a8      	cmp	r8, r5
 800ab38:	bfa8      	it	ge
 800ab3a:	f04f 0800 	movge.w	r8, #0
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 800ab3e:	1e77      	subs	r7, r6, #1
 800ab40:	bf48      	it	mi
 800ab42:	197f      	addmi	r7, r7, r5
 800ab44:	e7ba      	b.n	800aabc <lv_draw_sw_polygon+0x1ac>
        if(p[i_next_right].y >= p[i_prev_right].y) {
 800ab46:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 800ab4a:	00bb      	lsls	r3, r7, #2
 800ab4c:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800ab50:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 800ab54:	00b1      	lsls	r1, r6, #2
 800ab56:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800ab5a:	4290      	cmp	r0, r2
 800ab5c:	db13      	blt.n	800ab86 <lv_draw_sw_polygon+0x276>
            if(p[i_next_right].y != p[i_prev_right].y &&
 800ab5e:	d00f      	beq.n	800ab80 <lv_draw_sw_polygon+0x270>
               p[i_next_right].x != p[i_prev_right].x) {
 800ab60:	5ee3      	ldrsh	r3, [r4, r3]
 800ab62:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_right].y != p[i_prev_right].y &&
 800ab64:	428b      	cmp	r3, r1
 800ab66:	d00b      	beq.n	800ab80 <lv_draw_sw_polygon+0x270>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 800ab68:	2600      	movs	r6, #0
 800ab6a:	e9cd 0600 	strd	r0, r6, [sp]
 800ab6e:	4648      	mov	r0, r9
 800ab70:	f7fd fbfe 	bl	8008370 <lv_draw_mask_line_points_init>
                lv_draw_mask_add(mp_next, mp);
 800ab74:	4648      	mov	r0, r9
                mp_next++;
 800ab76:	f109 092c 	add.w	r9, r9, #44	; 0x2c
                lv_draw_mask_add(mp_next, mp);
 800ab7a:	9902      	ldr	r1, [sp, #8]
 800ab7c:	f7fd fb60 	bl	8008240 <lv_draw_mask_add>
            mask_cnt++;
 800ab80:	f10a 0a01 	add.w	sl, sl, #1
            i_prev_right = i_next_right;
 800ab84:	463e      	mov	r6, r7
    } while(mask_cnt < point_cnt);
 800ab86:	4555      	cmp	r5, sl
 800ab88:	d88b      	bhi.n	800aaa2 <lv_draw_sw_polygon+0x192>
 800ab8a:	e7bc      	b.n	800ab06 <lv_draw_sw_polygon+0x1f6>
 800ab8c:	08028a34 	.word	0x08028a34

0800ab90 <find_track_end>:
/**
 * Find the last item of a track
 */
static int32_t find_track_end(lv_obj_t * cont, flex_t * f, int32_t item_start_id, lv_coord_t max_main_size,
                              lv_coord_t item_gap, track_t * t)
{
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	4607      	mov	r7, r0
 800ab96:	b087      	sub	sp, #28
 800ab98:	460d      	mov	r5, r1
 800ab9a:	4690      	mov	r8, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	2201      	movs	r2, #1
 800aba0:	9301      	str	r3, [sp, #4]
 800aba2:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 800aba6:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800abaa:	f012 ff69 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800abae:	2204      	movs	r2, #4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800abb0:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800abb2:	2100      	movs	r1, #0
 800abb4:	4638      	mov	r0, r7
 800abb6:	f012 ff63 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t w_set = lv_obj_get_style_width(cont, LV_PART_MAIN);
    lv_coord_t h_set = lv_obj_get_style_height(cont, LV_PART_MAIN);

    /*Can't wrap if the size if auto (i.e. the size depends on the children)*/
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 800abba:	78ea      	ldrb	r2, [r5, #3]
 800abbc:	0796      	lsls	r6, r2, #30
 800abbe:	d554      	bpl.n	800ac6a <find_track_end+0xda>
 800abc0:	f012 0f01 	tst.w	r2, #1
 800abc4:	f242 72d1 	movw	r2, #10193	; 0x27d1
 800abc8:	d048      	beq.n	800ac5c <find_track_end+0xcc>
 800abca:	b224      	sxth	r4, r4
 800abcc:	4294      	cmp	r4, r2
 800abce:	d048      	beq.n	800ac62 <find_track_end+0xd2>
        f->wrap = false;
    }
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800abd0:	4b85      	ldr	r3, [pc, #532]	; (800ade8 <find_track_end+0x258>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 800abd2:	f8df a218 	ldr.w	sl, [pc, #536]	; 800adec <find_track_end+0x25c>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800abd6:	9300      	str	r3, [sp, #0]

    t->track_main_size = 0;
    t->track_fix_main_size = 0;
    t->grow_item_cnt = 0;
 800abd8:	2200      	movs	r2, #0
    t->item_cnt = 0;
    t->grow_dsc = NULL;

    int32_t item_id = item_start_id;

    lv_obj_t * item = lv_obj_get_child(cont, item_id);
 800abda:	4641      	mov	r1, r8
    int32_t item_id = item_start_id;
 800abdc:	f8cd 8014 	str.w	r8, [sp, #20]
    t->grow_item_cnt = 0;
 800abe0:	f8c9 2010 	str.w	r2, [r9, #16]
    t->track_cross_size = 0;
 800abe4:	f8c9 2000 	str.w	r2, [r9]
    t->track_fix_main_size = 0;
 800abe8:	f8a9 2004 	strh.w	r2, [r9, #4]
    t->grow_dsc = NULL;
 800abec:	e9c9 2202 	strd	r2, r2, [r9, #8]
            t->item_cnt++;
        }

        item_id += f->rev ? -1 : +1;
        if(item_id < 0) break;
        item = lv_obj_get_child(cont, item_id);
 800abf0:	4638      	mov	r0, r7
 800abf2:	f013 facc 	bl	801e18e <lv_obj_get_child>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800abf6:	9b05      	ldr	r3, [sp, #20]
        item = lv_obj_get_child(cont, item_id);
 800abf8:	4604      	mov	r4, r0
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800abfa:	9302      	str	r3, [sp, #8]
    while(item) {
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d043      	beq.n	800ac88 <find_track_end+0xf8>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800ac00:	9b02      	ldr	r3, [sp, #8]
 800ac02:	4543      	cmp	r3, r8
 800ac04:	d139      	bne.n	800ac7a <find_track_end+0xea>
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800ac06:	497a      	ldr	r1, [pc, #488]	; (800adf0 <find_track_end+0x260>)
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f010 ff05 	bl	801ba18 <lv_obj_has_flag_any>
 800ac0e:	4601      	mov	r1, r0
 800ac10:	2800      	cmp	r0, #0
 800ac12:	f040 80c6 	bne.w	800ada2 <find_track_end+0x212>
    return (lv_flex_align_t)v.num;
}

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 800ac16:	4b77      	ldr	r3, [pc, #476]	; (800adf4 <find_track_end+0x264>)
 800ac18:	4620      	mov	r0, r4
 800ac1a:	881a      	ldrh	r2, [r3, #0]
 800ac1c:	f012 ff30 	bl	801da80 <lv_obj_get_style_prop>
 800ac20:	9003      	str	r0, [sp, #12]
            if(grow_value) {
 800ac22:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ac26:	2a00      	cmp	r2, #0
 800ac28:	f000 80c9 	beq.w	800adbe <find_track_end+0x22e>
                t->track_fix_main_size += item_gap;
 800ac2c:	f8b9 2004 	ldrh.w	r2, [r9, #4]
                t->grow_item_cnt++;
 800ac30:	f8d9 0010 	ldr.w	r0, [r9, #16]
                t->track_fix_main_size += item_gap;
 800ac34:	445a      	add	r2, fp
                t->grow_item_cnt++;
 800ac36:	3001      	adds	r0, #1
                t->track_fix_main_size += item_gap;
 800ac38:	f8a9 2004 	strh.w	r2, [r9, #4]
                if(t->grow_dsc_calc) {
 800ac3c:	f899 2014 	ldrb.w	r2, [r9, #20]
                t->grow_item_cnt++;
 800ac40:	f8c9 0010 	str.w	r0, [r9, #16]
                if(t->grow_dsc_calc) {
 800ac44:	07d2      	lsls	r2, r2, #31
 800ac46:	f140 809c 	bpl.w	800ad82 <find_track_end+0x1f2>
                    grow_dsc_t * new_dsc = lv_mem_buf_get(sizeof(grow_dsc_t) * (t->grow_item_cnt));
 800ac4a:	2214      	movs	r2, #20
 800ac4c:	4350      	muls	r0, r2
 800ac4e:	f007 fd7f 	bl	8012750 <lv_mem_buf_get>
                    LV_ASSERT_MALLOC(new_dsc);
 800ac52:	2214      	movs	r2, #20
 800ac54:	4606      	mov	r6, r0
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d147      	bne.n	800acea <find_track_end+0x15a>
 800ac5a:	e7fe      	b.n	800ac5a <find_track_end+0xca>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 800ac5c:	b200      	sxth	r0, r0
 800ac5e:	4290      	cmp	r0, r2
 800ac60:	d106      	bne.n	800ac70 <find_track_end+0xe0>
        f->wrap = false;
 800ac62:	78ea      	ldrb	r2, [r5, #3]
 800ac64:	f36f 0241 	bfc	r2, #1, #1
 800ac68:	70ea      	strb	r2, [r5, #3]
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800ac6a:	78ea      	ldrb	r2, [r5, #3]
 800ac6c:	07d1      	lsls	r1, r2, #31
 800ac6e:	d4af      	bmi.n	800abd0 <find_track_end+0x40>
 800ac70:	4b5e      	ldr	r3, [pc, #376]	; (800adec <find_track_end+0x25c>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 800ac72:	f8df a174 	ldr.w	sl, [pc, #372]	; 800ade8 <find_track_end+0x258>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	e7ae      	b.n	800abd8 <find_track_end+0x48>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800ac7a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f010 fec4 	bl	801ba0c <lv_obj_has_flag>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d0be      	beq.n	800ac06 <find_track_end+0x76>
    }

    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 800ac88:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800ac8c:	2a00      	cmp	r2, #0
 800ac8e:	bfc4      	itt	gt
 800ac90:	eba2 020b 	subgt.w	r2, r2, fp
 800ac94:	f8a9 2004 	strhgt.w	r2, [r9, #4]

    /*If there is at least one "grow item" the track takes the full space*/
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 800ac98:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ac9c:	b912      	cbnz	r2, 800aca4 <find_track_end+0x114>
 800ac9e:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 800aca2:	9301      	str	r3, [sp, #4]
 800aca4:	9b01      	ldr	r3, [sp, #4]

    /*Have at least one item in a row*/
    if(item && item_id == item_start_id) {
 800aca6:	9a05      	ldr	r2, [sp, #20]
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 800aca8:	f8a9 3002 	strh.w	r3, [r9, #2]
    if(item && item_id == item_start_id) {
 800acac:	b1cc      	cbz	r4, 800ace2 <find_track_end+0x152>
 800acae:	4590      	cmp	r8, r2
 800acb0:	d117      	bne.n	800ace2 <find_track_end+0x152>
        item = cont->spec_attr->children[item_id];
 800acb2:	68ba      	ldr	r2, [r7, #8]
        get_next_item(cont, f->rev, &item_id);
 800acb4:	4638      	mov	r0, r7
 800acb6:	78e9      	ldrb	r1, [r5, #3]
        item = cont->spec_attr->children[item_id];
 800acb8:	6812      	ldr	r2, [r2, #0]
        get_next_item(cont, f->rev, &item_id);
 800acba:	f3c1 0180 	ubfx	r1, r1, #2, #1
        item = cont->spec_attr->children[item_id];
 800acbe:	f852 4028 	ldr.w	r4, [r2, r8, lsl #2]
        get_next_item(cont, f->rev, &item_id);
 800acc2:	aa05      	add	r2, sp, #20
 800acc4:	f018 f8f8 	bl	8022eb8 <get_next_item>
        if(item) {
 800acc8:	b15c      	cbz	r4, 800ace2 <find_track_end+0x152>
            t->track_cross_size = get_cross_size(item);
 800acca:	4620      	mov	r0, r4
 800accc:	47d0      	blx	sl
            t->track_main_size = get_main_size(item);
 800acce:	9b00      	ldr	r3, [sp, #0]
            t->track_cross_size = get_cross_size(item);
 800acd0:	f8a9 0000 	strh.w	r0, [r9]
            t->track_main_size = get_main_size(item);
 800acd4:	4620      	mov	r0, r4
 800acd6:	4798      	blx	r3
            t->item_cnt = 1;
 800acd8:	2201      	movs	r2, #1
            t->track_main_size = get_main_size(item);
 800acda:	f8a9 0002 	strh.w	r0, [r9, #2]
            t->item_cnt = 1;
 800acde:	f8c9 2008 	str.w	r2, [r9, #8]
        }
    }

    return item_id;
}
 800ace2:	9805      	ldr	r0, [sp, #20]
 800ace4:	b007      	add	sp, #28
 800ace6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if(t->grow_dsc) {
 800acea:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800acee:	b149      	cbz	r1, 800ad04 <find_track_end+0x174>
                        lv_memcpy(new_dsc, t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt - 1));
 800acf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800acf4:	435a      	muls	r2, r3
    return memcpy(dst, src, len);
 800acf6:	3a14      	subs	r2, #20
 800acf8:	f00f fd07 	bl	801a70a <memcpy>
                        lv_mem_buf_release(t->grow_dsc);
 800acfc:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800ad00:	f007 fd70 	bl	80127e4 <lv_mem_buf_release>
                    new_dsc[t->grow_item_cnt - 1].item = item;
 800ad04:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ad08:	2114      	movs	r1, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	fb01 6202 	mla	r2, r1, r2, r6
 800ad10:	f842 4c14 	str.w	r4, [r2, #-20]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
 800ad14:	78e9      	ldrb	r1, [r5, #3]
 800ad16:	f011 0101 	ands.w	r1, r1, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 800ad1a:	bf1a      	itte	ne
 800ad1c:	2202      	movne	r2, #2
 800ad1e:	2100      	movne	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800ad20:	2205      	moveq	r2, #5
 800ad22:	f012 fead 	bl	801da80 <lv_obj_get_style_prop>
 800ad26:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ad2a:	2114      	movs	r1, #20
    return (lv_coord_t)v.num;
 800ad2c:	b200      	sxth	r0, r0
 800ad2e:	fb01 6202 	mla	r2, r1, r2, r6
 800ad32:	f822 0c10 	strh.w	r0, [r2, #-16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800ad36:	4620      	mov	r0, r4
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
 800ad38:	78e9      	ldrb	r1, [r5, #3]
 800ad3a:	f011 0101 	ands.w	r1, r1, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 800ad3e:	bf1a      	itte	ne
 800ad40:	2203      	movne	r2, #3
 800ad42:	2100      	movne	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800ad44:	2206      	moveq	r2, #6
 800ad46:	f012 fe9b 	bl	801da80 <lv_obj_get_style_prop>
 800ad4a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ad4e:	2114      	movs	r1, #20
    return (lv_coord_t)v.num;
 800ad50:	b200      	sxth	r0, r0
 800ad52:	fb01 6202 	mla	r2, r1, r2, r6
 800ad56:	f822 0c0e 	strh.w	r0, [r2, #-14]
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 800ad5a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ad5e:	fb01 6002 	mla	r0, r1, r2, r6
 800ad62:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ad66:	f840 2c08 	str.w	r2, [r0, #-8]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800ad6a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ad6e:	fb01 6202 	mla	r2, r1, r2, r6
 800ad72:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 800ad76:	f36f 0100 	bfc	r1, #0, #1
 800ad7a:	f802 1c04 	strb.w	r1, [r2, #-4]
                    t->grow_dsc = new_dsc;
 800ad7e:	f8c9 600c 	str.w	r6, [r9, #12]
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
 800ad82:	4620      	mov	r0, r4
 800ad84:	47d0      	blx	sl
 800ad86:	f9b9 2000 	ldrsh.w	r2, [r9]
 800ad8a:	4290      	cmp	r0, r2
 800ad8c:	dd02      	ble.n	800ad94 <find_track_end+0x204>
 800ad8e:	4620      	mov	r0, r4
 800ad90:	47d0      	blx	sl
 800ad92:	4602      	mov	r2, r0
 800ad94:	f8a9 2000 	strh.w	r2, [r9]
            t->item_cnt++;
 800ad98:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800ad9c:	3201      	adds	r2, #1
 800ad9e:	f8c9 2008 	str.w	r2, [r9, #8]
        item_id += f->rev ? -1 : +1;
 800ada2:	78ea      	ldrb	r2, [r5, #3]
 800ada4:	9b02      	ldr	r3, [sp, #8]
 800ada6:	f012 0f04 	tst.w	r2, #4
 800adaa:	bf0c      	ite	eq
 800adac:	2101      	moveq	r1, #1
 800adae:	f04f 31ff 	movne.w	r1, #4294967295
 800adb2:	4419      	add	r1, r3
        if(item_id < 0) break;
 800adb4:	2900      	cmp	r1, #0
        item_id += f->rev ? -1 : +1;
 800adb6:	9105      	str	r1, [sp, #20]
        if(item_id < 0) break;
 800adb8:	f6bf af1a 	bge.w	800abf0 <find_track_end+0x60>
 800adbc:	e764      	b.n	800ac88 <find_track_end+0xf8>
                lv_coord_t item_size = get_main_size(item);
 800adbe:	9b00      	ldr	r3, [sp, #0]
 800adc0:	4620      	mov	r0, r4
 800adc2:	4798      	blx	r3
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 800adc4:	78ea      	ldrb	r2, [r5, #3]
 800adc6:	0793      	lsls	r3, r2, #30
 800adc8:	d506      	bpl.n	800add8 <find_track_end+0x248>
 800adca:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800adce:	9b01      	ldr	r3, [sp, #4]
 800add0:	4402      	add	r2, r0
 800add2:	429a      	cmp	r2, r3
 800add4:	f73f af58 	bgt.w	800ac88 <find_track_end+0xf8>
                t->track_fix_main_size += item_size + item_gap;
 800add8:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 800addc:	445a      	add	r2, fp
 800adde:	4410      	add	r0, r2
 800ade0:	f8a9 0004 	strh.w	r0, [r9, #4]
 800ade4:	e7cd      	b.n	800ad82 <find_track_end+0x1f2>
 800ade6:	bf00      	nop
 800ade8:	0801c835 	.word	0x0801c835
 800adec:	0801c841 	.word	0x0801c841
 800adf0:	00060001 	.word	0x00060001
 800adf4:	24010cf4 	.word	0x24010cf4

0800adf8 <flex_update>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
 800adf8:	4ba4      	ldr	r3, [pc, #656]	; (800b08c <flex_update+0x294>)
 800adfa:	2100      	movs	r1, #0
{
 800adfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae00:	b0a3      	sub	sp, #140	; 0x8c
 800ae02:	881a      	ldrh	r2, [r3, #0]
 800ae04:	4604      	mov	r4, r0
 800ae06:	f012 fe3b 	bl	801da80 <lv_obj_get_style_prop>
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
 800ae0a:	43c3      	mvns	r3, r0
 800ae0c:	f3c0 0280 	ubfx	r2, r0, #2, #1
 800ae10:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
 800ae14:	2100      	movs	r1, #0
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800ae1e:	f89d 2063 	ldrb.w	r2, [sp, #99]	; 0x63
 800ae22:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 800ae26:	f022 0207 	bic.w	r2, r2, #7
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f003 0307 	and.w	r3, r3, #7
 800ae30:	4313      	orrs	r3, r2
 800ae32:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
 800ae36:	4b96      	ldr	r3, [pc, #600]	; (800b090 <flex_update+0x298>)
 800ae38:	881a      	ldrh	r2, [r3, #0]
 800ae3a:	f012 fe21 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
 800ae3e:	4b95      	ldr	r3, [pc, #596]	; (800b094 <flex_update+0x29c>)
 800ae40:	2100      	movs	r1, #0
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
 800ae42:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 800ae46:	881a      	ldrh	r2, [r3, #0]
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f012 fe19 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
 800ae4e:	4b92      	ldr	r3, [pc, #584]	; (800b098 <flex_update+0x2a0>)
 800ae50:	2100      	movs	r1, #0
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
 800ae52:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
 800ae56:	881a      	ldrh	r2, [r3, #0]
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f012 fe11 	bl	801da80 <lv_obj_get_style_prop>
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800ae5e:	2216      	movs	r2, #22
    return (lv_flex_align_t)v.num;
 800ae60:	b2c5      	uxtb	r5, r0
 800ae62:	2100      	movs	r1, #0
 800ae64:	4620      	mov	r0, r4
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
 800ae66:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
 800ae6a:	f012 fe09 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 800ae6e:	f89d 6063 	ldrb.w	r6, [sp, #99]	; 0x63
    return (lv_base_dir_t)v.num;
 800ae72:	b2c3      	uxtb	r3, r0
 800ae74:	f016 0801 	ands.w	r8, r6, #1
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	f040 8085 	bne.w	800af88 <flex_update+0x190>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800ae7e:	2215      	movs	r2, #21
 800ae80:	4641      	mov	r1, r8
 800ae82:	4620      	mov	r0, r4
 800ae84:	f012 fdfc 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800ae88:	2214      	movs	r2, #20
    return (lv_coord_t)v.num;
 800ae8a:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800ae8c:	4641      	mov	r1, r8
 800ae8e:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 800ae90:	9307      	str	r3, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800ae92:	f012 fdf5 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800ae96:	b203      	sxth	r3, r0
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800ae98:	4620      	mov	r0, r4
 800ae9a:	9305      	str	r3, [sp, #20]
 800ae9c:	f011 fcec 	bl	801c878 <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800aea0:	2232      	movs	r2, #50	; 0x32
 800aea2:	2100      	movs	r1, #0
 800aea4:	9008      	str	r0, [sp, #32]
 800aea6:	4620      	mov	r0, r4
 800aea8:	f012 fdea 	bl	801da80 <lv_obj_get_style_prop>
 800aeac:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800aeae:	2210      	movs	r2, #16
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	4620      	mov	r0, r4
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 800aeb4:	8ae7      	ldrh	r7, [r4, #22]
                                                                  LV_PART_MAIN) + border_width - lv_obj_get_scroll_y(cont);
 800aeb6:	fa1f fa89 	uxth.w	sl, r9
 800aeba:	f012 fde1 	bl	801da80 <lv_obj_get_style_prop>
 800aebe:	fa10 f989 	uxtah	r9, r0, r9
 800aec2:	4620      	mov	r0, r4
 800aec4:	444f      	add	r7, r9
 800aec6:	f012 f84e 	bl	801cf66 <lv_obj_get_scroll_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800aeca:	2212      	movs	r2, #18
 800aecc:	2100      	movs	r1, #0
 800aece:	b2bf      	uxth	r7, r7
 800aed0:	1a3f      	subs	r7, r7, r0
 800aed2:	4620      	mov	r0, r4
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 800aed4:	f8ad 7056 	strh.w	r7, [sp, #86]	; 0x56
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 800aed8:	8aa7      	ldrh	r7, [r4, #20]
 800aeda:	f012 fdd1 	bl	801da80 <lv_obj_get_style_prop>
                                                                   LV_PART_MAIN) + border_width - lv_obj_get_scroll_x(cont);
 800aede:	4482      	add	sl, r0
 800aee0:	4620      	mov	r0, r4
 800aee2:	f012 f83a 	bl	801cf5a <lv_obj_get_scroll_x>
 800aee6:	4457      	add	r7, sl
 800aee8:	b2bf      	uxth	r7, r7
 800aeea:	1a3f      	subs	r7, r7, r0
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 800aeec:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800aef0:	f1b8 0f00 	cmp.w	r8, #0
 800aef4:	d15a      	bne.n	800afac <flex_update+0x1b4>
 800aef6:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800aefa:	2201      	movs	r2, #1
 800aefc:	2100      	movs	r1, #0
 800aefe:	4620      	mov	r0, r4
 800af00:	f012 fdbe 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800af04:	2204      	movs	r2, #4
    return (lv_coord_t)v.num;
 800af06:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800af08:	2100      	movs	r1, #0
 800af0a:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 800af0c:	930e      	str	r3, [sp, #56]	; 0x38
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800af0e:	f012 fdb7 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800af12:	b203      	sxth	r3, r0
 800af14:	930d      	str	r3, [sp, #52]	; 0x34
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 800af16:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800af1a:	f1b8 0f00 	cmp.w	r8, #0
 800af1e:	d048      	beq.n	800afb2 <flex_update+0x1ba>
 800af20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af22:	429a      	cmp	r2, r3
 800af24:	f040 8090 	bne.w	800b048 <flex_update+0x250>
 800af28:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800af2c:	079a      	lsls	r2, r3, #30
 800af2e:	f100 808b 	bmi.w	800b048 <flex_update+0x250>
    lv_coord_t gap = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    lv_coord_t total_track_cross_size = 0;
 800af38:	2700      	movs	r7, #0
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800af3a:	f89d 6063 	ldrb.w	r6, [sp, #99]	; 0x63
 800af3e:	f016 0504 	ands.w	r5, r6, #4
 800af42:	d002      	beq.n	800af4a <flex_update+0x152>
 800af44:	68a3      	ldr	r3, [r4, #8]
 800af46:	685d      	ldr	r5, [r3, #4]
 800af48:	3d01      	subs	r5, #1
    if(rtl && !f.row) {
 800af4a:	9b04      	ldr	r3, [sp, #16]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d101      	bne.n	800af54 <flex_update+0x15c>
 800af50:	07f6      	lsls	r6, r6, #31
 800af52:	d53e      	bpl.n	800afd2 <flex_update+0x1da>
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800af54:	68a3      	ldr	r3, [r4, #8]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	42ab      	cmp	r3, r5
 800af5a:	dd02      	ble.n	800af62 <flex_update+0x16a>
 800af5c:	2d00      	cmp	r5, #0
 800af5e:	f280 809d 	bge.w	800b09c <flex_update+0x2a4>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 800af62:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800af66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af68:	429a      	cmp	r2, r3
 800af6a:	d002      	beq.n	800af72 <flex_update+0x17a>
 800af6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af6e:	429a      	cmp	r2, r3
 800af70:	d102      	bne.n	800af78 <flex_update+0x180>
        lv_obj_refr_size(cont);
 800af72:	4620      	mov	r0, r4
 800af74:	f7fa f90a 	bl	800518c <lv_obj_refr_size>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800af78:	2200      	movs	r2, #0
 800af7a:	212b      	movs	r1, #43	; 0x2b
 800af7c:	4620      	mov	r0, r4
}
 800af7e:	b023      	add	sp, #140	; 0x8c
 800af80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800af84:	f7f9 bbaa 	b.w	80046dc <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800af88:	2214      	movs	r2, #20
 800af8a:	2100      	movs	r1, #0
 800af8c:	4620      	mov	r0, r4
 800af8e:	f012 fd77 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800af92:	2215      	movs	r2, #21
    return (lv_coord_t)v.num;
 800af94:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800af96:	2100      	movs	r1, #0
 800af98:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 800af9a:	9307      	str	r3, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800af9c:	f012 fd70 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800afa0:	b203      	sxth	r3, r0
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800afa2:	4620      	mov	r0, r4
 800afa4:	9305      	str	r3, [sp, #20]
 800afa6:	f011 fc51 	bl	801c84c <lv_obj_get_content_width>
 800afaa:	e779      	b.n	800aea0 <flex_update+0xa8>
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800afac:	f10d 0b56 	add.w	fp, sp, #86	; 0x56
 800afb0:	e7a3      	b.n	800aefa <flex_update+0x102>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 800afb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d012      	beq.n	800afde <flex_update+0x1e6>
    if(rtl && !f.row) {
 800afb8:	9b04      	ldr	r3, [sp, #16]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d144      	bne.n	800b048 <flex_update+0x250>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800afbe:	b1b5      	cbz	r5, 800afee <flex_update+0x1f6>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 800afc0:	2700      	movs	r7, #0
 800afc2:	2d01      	cmp	r5, #1
    lv_coord_t gap = 0;
 800afc4:	f8ad 705a 	strh.w	r7, [sp, #90]	; 0x5a
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 800afc8:	d115      	bne.n	800aff6 <flex_update+0x1fe>
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800afca:	f016 0504 	ands.w	r5, r6, #4
 800afce:	d1b9      	bne.n	800af44 <flex_update+0x14c>
    lv_coord_t total_track_cross_size = 0;
 800afd0:	462f      	mov	r7, r5
        *cross_pos += total_track_cross_size;
 800afd2:	f8bb 3000 	ldrh.w	r3, [fp]
 800afd6:	441f      	add	r7, r3
 800afd8:	f8ab 7000 	strh.w	r7, [fp]
 800afdc:	e7ba      	b.n	800af54 <flex_update+0x15c>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 800afde:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800afe2:	f013 0f04 	tst.w	r3, #4
    if(rtl && !f.row) {
 800afe6:	9b04      	ldr	r3, [sp, #16]
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 800afe8:	d1e7      	bne.n	800afba <flex_update+0x1c2>
    if(rtl && !f.row) {
 800afea:	2b01      	cmp	r3, #1
 800afec:	d1a1      	bne.n	800af32 <flex_update+0x13a>
    lv_coord_t gap = 0;
 800afee:	2300      	movs	r3, #0
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800aff0:	2501      	movs	r5, #1
    lv_coord_t gap = 0;
 800aff2:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800aff6:	f016 0204 	ands.w	r2, r6, #4
 800affa:	f04f 0600 	mov.w	r6, #0
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800affe:	f10d 0870 	add.w	r8, sp, #112	; 0x70
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800b002:	bf18      	it	ne
 800b004:	68a3      	ldrne	r3, [r4, #8]
 800b006:	4637      	mov	r7, r6
 800b008:	bf1c      	itt	ne
 800b00a:	685a      	ldrne	r2, [r3, #4]
 800b00c:	f102 32ff 	addne.w	r2, r2, #4294967295
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800b010:	68a3      	ldr	r3, [r4, #8]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	4293      	cmp	r3, r2
 800b016:	dd01      	ble.n	800b01c <flex_update+0x224>
 800b018:	2a00      	cmp	r2, #0
 800b01a:	da1b      	bge.n	800b054 <flex_update+0x25c>
        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
 800b01c:	b116      	cbz	r6, 800b024 <flex_update+0x22c>
 800b01e:	9b07      	ldr	r3, [sp, #28]
 800b020:	1aff      	subs	r7, r7, r3
 800b022:	b23f      	sxth	r7, r7
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800b024:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
 800b028:	4620      	mov	r0, r4
 800b02a:	07db      	lsls	r3, r3, #31
 800b02c:	d52a      	bpl.n	800b084 <flex_update+0x28c>
 800b02e:	f011 fc23 	bl	801c878 <lv_obj_get_content_height>
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 800b032:	f10d 035a 	add.w	r3, sp, #90	; 0x5a
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800b036:	4601      	mov	r1, r0
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 800b038:	463a      	mov	r2, r7
 800b03a:	4628      	mov	r0, r5
 800b03c:	e9cd b300 	strd	fp, r3, [sp]
 800b040:	b233      	sxth	r3, r6
 800b042:	f017 fef3 	bl	8022e2c <place_content>
 800b046:	e778      	b.n	800af3a <flex_update+0x142>
    lv_coord_t gap = 0;
 800b048:	2300      	movs	r3, #0
 800b04a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 800b04e:	2d00      	cmp	r5, #0
 800b050:	d1d1      	bne.n	800aff6 <flex_update+0x1fe>
 800b052:	e771      	b.n	800af38 <flex_update+0x140>
            t.grow_dsc_calc = 0;
 800b054:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b058:	a918      	add	r1, sp, #96	; 0x60
 800b05a:	4620      	mov	r0, r4
 800b05c:	f8cd 8004 	str.w	r8, [sp, #4]
            t.grow_dsc_calc = 0;
 800b060:	f36f 0300 	bfc	r3, #0, #1
            track_cnt++;
 800b064:	3601      	adds	r6, #1
            t.grow_dsc_calc = 0;
 800b066:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b06a:	9b05      	ldr	r3, [sp, #20]
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	9b08      	ldr	r3, [sp, #32]
 800b070:	f7ff fd8e 	bl	800ab90 <find_track_end>
            total_track_cross_size += t.track_cross_size + track_gap;
 800b074:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800b078:	9907      	ldr	r1, [sp, #28]
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b07a:	4602      	mov	r2, r0
            total_track_cross_size += t.track_cross_size + track_gap;
 800b07c:	440b      	add	r3, r1
 800b07e:	443b      	add	r3, r7
 800b080:	b21f      	sxth	r7, r3
            track_first_item = next_track_first_item;
 800b082:	e7c5      	b.n	800b010 <flex_update+0x218>
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800b084:	f011 fbe2 	bl	801c84c <lv_obj_get_content_width>
 800b088:	e7d3      	b.n	800b032 <flex_update+0x23a>
 800b08a:	bf00      	nop
 800b08c:	24010cfc 	.word	0x24010cfc
 800b090:	24010cfa 	.word	0x24010cfa
 800b094:	24010cf8 	.word	0x24010cf8
 800b098:	24010cf6 	.word	0x24010cf6
        t.grow_dsc_calc = 1;
 800b09c:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b0a0:	462a      	mov	r2, r5
 800b0a2:	a918      	add	r1, sp, #96	; 0x60
 800b0a4:	4620      	mov	r0, r4
        t.grow_dsc_calc = 1;
 800b0a6:	f043 0301 	orr.w	r3, r3, #1
 800b0aa:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b0ae:	ab1c      	add	r3, sp, #112	; 0x70
 800b0b0:	9301      	str	r3, [sp, #4]
 800b0b2:	9b05      	ldr	r3, [sp, #20]
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	9b08      	ldr	r3, [sp, #32]
 800b0b8:	f7ff fd6a 	bl	800ab90 <find_track_end>
        if(rtl && !f.row) {
 800b0bc:	9b04      	ldr	r3, [sp, #16]
 800b0be:	f89d 2063 	ldrb.w	r2, [sp, #99]	; 0x63
 800b0c2:	2b01      	cmp	r3, #1
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b0c4:	900c      	str	r0, [sp, #48]	; 0x30
        if(rtl && !f.row) {
 800b0c6:	d108      	bne.n	800b0da <flex_update+0x2e2>
 800b0c8:	07d0      	lsls	r0, r2, #31
            *cross_pos -= t.track_cross_size;
 800b0ca:	bf5f      	itttt	pl
 800b0cc:	f8bb 3000 	ldrhpl.w	r3, [fp]
 800b0d0:	f8bd 1070 	ldrhpl.w	r1, [sp, #112]	; 0x70
 800b0d4:	1a5b      	subpl	r3, r3, r1
 800b0d6:	f8ab 3000 	strhpl.w	r3, [fp]
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800b0da:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 800b0de:	f04f 0914 	mov.w	r9, #20
    uint32_t i;
    bool grow_reiterate  = true;
    while(grow_reiterate) {
        grow_reiterate = false;
        lv_coord_t grow_value_sum = 0;
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800b0e2:	f9bd 7072 	ldrsh.w	r7, [sp, #114]	; 0x72
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800b0e6:	9311      	str	r3, [sp, #68]	; 0x44
 800b0e8:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800b0ec:	9519      	str	r5, [sp, #100]	; 0x64
 800b0ee:	9312      	str	r3, [sp, #72]	; 0x48
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 800b0f0:	f002 0301 	and.w	r3, r2, #1
 800b0f4:	4a66      	ldr	r2, [pc, #408]	; (800b290 <flex_update+0x498>)
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	9303      	str	r3, [sp, #12]
 800b0fa:	4b66      	ldr	r3, [pc, #408]	; (800b294 <flex_update+0x49c>)
 800b0fc:	bf08      	it	eq
 800b0fe:	4613      	moveq	r3, r2
 800b100:	4a65      	ldr	r2, [pc, #404]	; (800b298 <flex_update+0x4a0>)
 800b102:	9313      	str	r3, [sp, #76]	; 0x4c
 800b104:	bf18      	it	ne
 800b106:	4611      	movne	r1, r2
 800b108:	4b64      	ldr	r3, [pc, #400]	; (800b29c <flex_update+0x4a4>)
 800b10a:	bf04      	itt	eq
 800b10c:	4619      	moveq	r1, r3
 800b10e:	4613      	moveq	r3, r2
 800b110:	930f      	str	r3, [sp, #60]	; 0x3c
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800b112:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 800b116:	910b      	str	r1, [sp, #44]	; 0x2c
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800b118:	1afb      	subs	r3, r7, r3
 800b11a:	b21b      	sxth	r3, r3
 800b11c:	930a      	str	r3, [sp, #40]	; 0x28
            }
        }
        lv_coord_t grow_unit;

        for(i = 0; i < t->grow_item_cnt; i++) {
            if(t->grow_dsc[i].clamped == 0) {
 800b11e:	e9dd 3a1f 	ldrd	r3, sl, [sp, #124]	; 0x7c
 800b122:	9306      	str	r3, [sp, #24]
 800b124:	fb09 330a 	mla	r3, r9, sl, r3
 800b128:	9310      	str	r3, [sp, #64]	; 0x40
        for(i = 0; i < t->grow_item_cnt; i++) {
 800b12a:	9a06      	ldr	r2, [sp, #24]
        lv_coord_t grow_value_sum = 0;
 800b12c:	2100      	movs	r1, #0
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800b12e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
        for(i = 0; i < t->grow_item_cnt; i++) {
 800b132:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b134:	4293      	cmp	r3, r2
 800b136:	d14e      	bne.n	800b1d6 <flex_update+0x3de>
        grow_reiterate = false;
 800b138:	2600      	movs	r6, #0
 800b13a:	9a06      	ldr	r2, [sp, #24]
        for(i = 0; i < t->grow_item_cnt; i++) {
 800b13c:	9609      	str	r6, [sp, #36]	; 0x24
 800b13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b140:	459a      	cmp	sl, r3
 800b142:	d158      	bne.n	800b1f6 <flex_update+0x3fe>
    while(grow_reiterate) {
 800b144:	2e00      	cmp	r6, #0
 800b146:	d1f0      	bne.n	800b12a <flex_update+0x332>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b148:	2216      	movs	r2, #22
 800b14a:	4631      	mov	r1, r6
 800b14c:	4620      	mov	r0, r4
 800b14e:	f012 fc97 	bl	801da80 <lv_obj_get_style_prop>
    bool rtl = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL ? true : false;

    lv_coord_t main_pos = 0;

    lv_coord_t place_gap = 0;
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800b152:	463a      	mov	r2, r7
    return (lv_base_dir_t)v.num;
 800b154:	b2c3      	uxtb	r3, r0
 800b156:	9908      	ldr	r1, [sp, #32]
 800b158:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
 800b15c:	930a      	str	r3, [sp, #40]	; 0x28
 800b15e:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
    lv_coord_t main_pos = 0;
 800b162:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800b166:	9301      	str	r3, [sp, #4]
 800b168:	ab17      	add	r3, sp, #92	; 0x5c
    lv_coord_t place_gap = 0;
 800b16a:	f8ad 605e 	strh.w	r6, [sp, #94]	; 0x5e
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 800b174:	f017 fe5a 	bl	8022e2c <place_content>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 800b178:	9b03      	ldr	r3, [sp, #12]
 800b17a:	b153      	cbz	r3, 800b192 <flex_update+0x39a>
 800b17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d107      	bne.n	800b192 <flex_update+0x39a>
 800b182:	4620      	mov	r0, r4
 800b184:	f011 fb62 	bl	801c84c <lv_obj_get_content_width>
 800b188:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800b18c:	4418      	add	r0, r3
 800b18e:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c

    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
 800b192:	4629      	mov	r1, r5
 800b194:	4620      	mov	r0, r4
 800b196:	f012 fffa 	bl	801e18e <lv_obj_get_child>
        }

        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
        else main_pos -= item_gap + place_gap;

        item = get_next_item(cont, f->rev, &item_first_id);
 800b19a:	4605      	mov	r5, r0
    while(item && item_first_id != item_last_id) {
 800b19c:	b118      	cbz	r0, 800b1a6 <flex_update+0x3ae>
 800b19e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d157      	bne.n	800b256 <flex_update+0x45e>
        lv_mem_buf_release(t.grow_dsc);
 800b1a6:	9806      	ldr	r0, [sp, #24]
 800b1a8:	f007 fb1c 	bl	80127e4 <lv_mem_buf_release>
        if(rtl && !f.row) {
 800b1ac:	9904      	ldr	r1, [sp, #16]
            total_track_cross_size += t.track_cross_size + track_gap;
 800b1ae:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        if(rtl && !f.row) {
 800b1b2:	2901      	cmp	r1, #1
            *cross_pos -= gap + track_gap;
 800b1b4:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
 800b1b8:	f8bb 1000 	ldrh.w	r1, [fp]
        if(rtl && !f.row) {
 800b1bc:	f040 819c 	bne.w	800b4f8 <flex_update+0x700>
 800b1c0:	9803      	ldr	r0, [sp, #12]
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	f040 8198 	bne.w	800b4f8 <flex_update+0x700>
            *cross_pos -= gap + track_gap;
 800b1c8:	4413      	add	r3, r2
 800b1ca:	1acb      	subs	r3, r1, r3
            *cross_pos += t.track_cross_size + gap + track_gap;
 800b1cc:	b21b      	sxth	r3, r3
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800b1ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1d0:	f8ab 3000 	strh.w	r3, [fp]
 800b1d4:	e6be      	b.n	800af54 <flex_update+0x15c>
            if(t->grow_dsc[i].clamped == 0) {
 800b1d6:	7c13      	ldrb	r3, [r2, #16]
 800b1d8:	3214      	adds	r2, #20
 800b1da:	07db      	lsls	r3, r3, #31
                grow_value_sum += t->grow_dsc[i].grow_value;
 800b1dc:	bf55      	itete	pl
 800b1de:	f852 3c08 	ldrpl.w	r3, [r2, #-8]
                grow_max_size -= t->grow_dsc[i].final_size;
 800b1e2:	f832 3c0c 	ldrhmi.w	r3, [r2, #-12]
                grow_value_sum += t->grow_dsc[i].grow_value;
 800b1e6:	185b      	addpl	r3, r3, r1
                grow_max_size -= t->grow_dsc[i].final_size;
 800b1e8:	ebac 0303 	submi.w	r3, ip, r3
                grow_value_sum += t->grow_dsc[i].grow_value;
 800b1ec:	bf54      	ite	pl
 800b1ee:	b219      	sxthpl	r1, r3
                grow_max_size -= t->grow_dsc[i].final_size;
 800b1f0:	fa0f fc83 	sxthmi.w	ip, r3
        for(i = 0; i < t->grow_item_cnt; i++) {
 800b1f4:	e79d      	b.n	800b132 <flex_update+0x33a>
            if(t->grow_dsc[i].clamped == 0) {
 800b1f6:	f892 8010 	ldrb.w	r8, [r2, #16]
 800b1fa:	f018 0f01 	tst.w	r8, #1
 800b1fe:	d125      	bne.n	800b24c <flex_update+0x454>
                LV_ASSERT(grow_value_sum != 0);
 800b200:	b901      	cbnz	r1, 800b204 <flex_update+0x40c>
 800b202:	e7fe      	b.n	800b202 <flex_update+0x40a>
                grow_unit = grow_max_size / grow_value_sum;
 800b204:	fb9c f0f1 	sdiv	r0, ip, r1
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800b208:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800b20c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800b210:	fb10 f00e 	smulbb	r0, r0, lr
                grow_value_sum -= t->grow_dsc[i].grow_value;
 800b214:	eba1 0e0e 	sub.w	lr, r1, lr
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800b218:	b200      	sxth	r0, r0
                grow_value_sum -= t->grow_dsc[i].grow_value;
 800b21a:	fa0f f18e 	sxth.w	r1, lr
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800b21e:	4283      	cmp	r3, r0
 800b220:	bfa8      	it	ge
 800b222:	4603      	movge	r3, r0
 800b224:	4699      	mov	r9, r3
 800b226:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800b22a:	4599      	cmp	r9, r3
 800b22c:	bfb8      	it	lt
 800b22e:	4699      	movlt	r9, r3
                if(size_clamp != size) {
 800b230:	4548      	cmp	r0, r9
                grow_max_size  -= t->grow_dsc[i].final_size;
 800b232:	ebac 0309 	sub.w	r3, ip, r9
                t->grow_dsc[i].final_size = size_clamp;
 800b236:	f8a2 9008 	strh.w	r9, [r2, #8]
                    t->grow_dsc[i].clamped = 1;
 800b23a:	bf1c      	itt	ne
 800b23c:	f048 0801 	orrne.w	r8, r8, #1
                    grow_reiterate = true;
 800b240:	2601      	movne	r6, #1
                grow_max_size  -= t->grow_dsc[i].final_size;
 800b242:	fa0f fc83 	sxth.w	ip, r3
                    t->grow_dsc[i].clamped = 1;
 800b246:	bf18      	it	ne
 800b248:	f882 8010 	strbne.w	r8, [r2, #16]
        for(i = 0; i < t->grow_item_cnt; i++) {
 800b24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b24e:	3214      	adds	r2, #20
 800b250:	3301      	adds	r3, #1
 800b252:	9309      	str	r3, [sp, #36]	; 0x24
 800b254:	e773      	b.n	800b13e <flex_update+0x346>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800b256:	4912      	ldr	r1, [pc, #72]	; (800b2a0 <flex_update+0x4a8>)
 800b258:	4628      	mov	r0, r5
 800b25a:	f010 fbdd 	bl	801ba18 <lv_obj_has_flag_any>
            item = get_next_item(cont, f->rev, &item_first_id);
 800b25e:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800b262:	4606      	mov	r6, r0
            item = get_next_item(cont, f->rev, &item_first_id);
 800b264:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b268:	9310      	str	r3, [sp, #64]	; 0x40
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800b26a:	b128      	cbz	r0, 800b278 <flex_update+0x480>
            item = get_next_item(cont, f->rev, &item_first_id);
 800b26c:	aa19      	add	r2, sp, #100	; 0x64
 800b26e:	4619      	mov	r1, r3
        item = get_next_item(cont, f->rev, &item_first_id);
 800b270:	4620      	mov	r0, r4
 800b272:	f017 fe21 	bl	8022eb8 <get_next_item>
 800b276:	e790      	b.n	800b19a <flex_update+0x3a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 800b278:	4b0a      	ldr	r3, [pc, #40]	; (800b2a4 <flex_update+0x4ac>)
 800b27a:	4601      	mov	r1, r0
 800b27c:	4628      	mov	r0, r5
 800b27e:	881a      	ldrh	r2, [r3, #0]
 800b280:	f012 fbfe 	bl	801da80 <lv_obj_get_style_prop>
    return (uint8_t)v.num;
 800b284:	b2c0      	uxtb	r0, r0
        if(grow_size) {
 800b286:	2800      	cmp	r0, #0
 800b288:	f000 80f4 	beq.w	800b474 <flex_update+0x67c>
 800b28c:	9b06      	ldr	r3, [sp, #24]
 800b28e:	e0e8      	b.n	800b462 <flex_update+0x66a>
 800b290:	0802420d 	.word	0x0802420d
 800b294:	08024203 	.word	0x08024203
 800b298:	08022e15 	.word	0x08022e15
 800b29c:	08022e21 	.word	0x08022e21
 800b2a0:	00060001 	.word	0x00060001
 800b2a4:	24010cf4 	.word	0x24010cf4
                if(t->grow_dsc[i].item == item) {
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	f852 1b14 	ldr.w	r1, [r2], #20
 800b2ae:	428d      	cmp	r5, r1
 800b2b0:	f040 80d5 	bne.w	800b45e <flex_update+0x666>
                    s = t->grow_dsc[i].final_size;
 800b2b4:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
            if(f->row) {
 800b2b8:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800b2bc:	9a03      	ldr	r2, [sp, #12]
                item->h_layout = 0;
 800b2be:	f023 0306 	bic.w	r3, r3, #6
            if(f->row) {
 800b2c2:	2a00      	cmp	r2, #0
 800b2c4:	f000 80d3 	beq.w	800b46e <flex_update+0x676>
                item->h_layout = 0;
 800b2c8:	f043 0304 	orr.w	r3, r3, #4
            if(s != area_get_main_size(&item->coords)) {
 800b2cc:	f105 0614 	add.w	r6, r5, #20
                item->h_layout = 1;
 800b2d0:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            if(s != area_get_main_size(&item->coords)) {
 800b2d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	4798      	blx	r3
 800b2da:	42b8      	cmp	r0, r7
 800b2dc:	d021      	beq.n	800b322 <flex_update+0x52a>
                lv_obj_invalidate(item);
 800b2de:	4628      	mov	r0, r5
 800b2e0:	f011 fca8 	bl	801cc34 <lv_obj_invalidate>
    dest->x1 = src->x1;
 800b2e4:	8aab      	ldrh	r3, [r5, #20]
                area_set_main_size(&item->coords, s);
 800b2e6:	4639      	mov	r1, r7
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    dest->y1 = src->y1;
 800b2ee:	8aeb      	ldrh	r3, [r5, #22]
 800b2f0:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    dest->x2 = src->x2;
 800b2f4:	8b2b      	ldrh	r3, [r5, #24]
 800b2f6:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    dest->y2 = src->y2;
 800b2fa:	8b6b      	ldrh	r3, [r5, #26]
 800b2fc:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 800b300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b302:	4798      	blx	r3
                lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 800b304:	aa1a      	add	r2, sp, #104	; 0x68
 800b306:	2129      	movs	r1, #41	; 0x29
 800b308:	4628      	mov	r0, r5
 800b30a:	f7f9 f9e7 	bl	80046dc <lv_event_send>
                lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 800b30e:	4628      	mov	r0, r5
 800b310:	f012 ff3a 	bl	801e188 <lv_obj_get_parent>
 800b314:	462a      	mov	r2, r5
 800b316:	2122      	movs	r1, #34	; 0x22
 800b318:	f7f9 f9e0 	bl	80046dc <lv_event_send>
                lv_obj_invalidate(item);
 800b31c:	4628      	mov	r0, r5
 800b31e:	f011 fc89 	bl	801cc34 <lv_obj_invalidate>
        switch(f->cross_place) {
 800b322:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 800b326:	2b01      	cmp	r3, #1
 800b328:	f000 80ab 	beq.w	800b482 <flex_update+0x68a>
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	f040 80b1 	bne.w	800b494 <flex_update+0x69c>
                cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
 800b332:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 800b336:	f105 0014 	add.w	r0, r5, #20
 800b33a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b33c:	3701      	adds	r7, #1
 800b33e:	4798      	blx	r3
 800b340:	f027 0701 	bic.w	r7, r7, #1
 800b344:	1a3f      	subs	r7, r7, r0
 800b346:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800b34a:	f347 074f 	sbfx	r7, r7, #1, #16
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 800b34e:	9b03      	ldr	r3, [sp, #12]
 800b350:	b15b      	cbz	r3, 800b36a <flex_update+0x572>
 800b352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b354:	2b01      	cmp	r3, #1
 800b356:	d108      	bne.n	800b36a <flex_update+0x572>
        diff_x += f->row ? main_pos : cross_pos;
 800b358:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 800b35c:	f105 0014 	add.w	r0, r5, #20
 800b360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b362:	4798      	blx	r3
 800b364:	1a36      	subs	r6, r6, r0
 800b366:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800b36a:	226a      	movs	r2, #106	; 0x6a
 800b36c:	2100      	movs	r1, #0
 800b36e:	4628      	mov	r0, r5
 800b370:	f012 fb86 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800b374:	226b      	movs	r2, #107	; 0x6b
 800b376:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 800b378:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800b37c:	4628      	mov	r0, r5
 800b37e:	f012 fb7f 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800b382:	fa0f f980 	sxth.w	r9, r0
        lv_coord_t w = lv_obj_get_width(item);
 800b386:	4628      	mov	r0, r5
 800b388:	f011 fa54 	bl	801c834 <lv_obj_get_width>
 800b38c:	4606      	mov	r6, r0
        lv_coord_t h = lv_obj_get_height(item);
 800b38e:	4628      	mov	r0, r5
 800b390:	f011 fa56 	bl	801c840 <lv_obj_get_height>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800b394:	f408 43c0 	and.w	r3, r8, #24576	; 0x6000
 800b398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b39c:	d10f      	bne.n	800b3be <flex_update+0x5c6>
 800b39e:	f428 43c0 	bic.w	r3, r8, #24576	; 0x6000
 800b3a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b3a6:	dc0a      	bgt.n	800b3be <flex_update+0x5c6>
 800b3a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3ac:	bfc8      	it	gt
 800b3ae:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 800b3b2:	435e      	muls	r6, r3
 800b3b4:	2364      	movs	r3, #100	; 0x64
 800b3b6:	fb96 f6f3 	sdiv	r6, r6, r3
 800b3ba:	fa0f f886 	sxth.w	r8, r6
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800b3be:	f409 43c0 	and.w	r3, r9, #24576	; 0x6000
 800b3c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3c6:	d10f      	bne.n	800b3e8 <flex_update+0x5f0>
 800b3c8:	f429 43c0 	bic.w	r3, r9, #24576	; 0x6000
 800b3cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b3d0:	dc0a      	bgt.n	800b3e8 <flex_update+0x5f0>
 800b3d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3d6:	bfc8      	it	gt
 800b3d8:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 800b3dc:	4358      	muls	r0, r3
 800b3de:	2364      	movs	r3, #100	; 0x64
 800b3e0:	fb90 f0f3 	sdiv	r0, r0, r3
 800b3e4:	fa0f f980 	sxth.w	r9, r0
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800b3e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3ea:	8aae      	ldrh	r6, [r5, #20]
        diff_x += f->row ? main_pos : cross_pos;
 800b3ec:	9a03      	ldr	r2, [sp, #12]
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800b3ee:	1b9e      	subs	r6, r3, r6
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800b3f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800b3f2:	4446      	add	r6, r8
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800b3f4:	f8b5 8016 	ldrh.w	r8, [r5, #22]
 800b3f8:	eba3 0808 	sub.w	r8, r3, r8
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800b3fc:	b2b6      	uxth	r6, r6
        diff_y += f->row ? cross_pos : main_pos;
 800b3fe:	b2bb      	uxth	r3, r7
        diff_x += f->row ? main_pos : cross_pos;
 800b400:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800b404:	44c8      	add	r8, r9
 800b406:	fa1f f888 	uxth.w	r8, r8
        diff_x += f->row ? main_pos : cross_pos;
 800b40a:	2a00      	cmp	r2, #0
 800b40c:	d044      	beq.n	800b498 <flex_update+0x6a0>
 800b40e:	443e      	add	r6, r7
        diff_y += f->row ? cross_pos : main_pos;
 800b410:	4443      	add	r3, r8
        diff_x += f->row ? main_pos : cross_pos;
 800b412:	fa1f f986 	uxth.w	r9, r6
 800b416:	b236      	sxth	r6, r6
        diff_y += f->row ? cross_pos : main_pos;
 800b418:	fa1f fa83 	uxth.w	sl, r3
 800b41c:	fa0f f883 	sxth.w	r8, r3
        if(diff_x || diff_y) {
 800b420:	2e00      	cmp	r6, #0
 800b422:	d057      	beq.n	800b4d4 <flex_update+0x6dc>
            lv_obj_invalidate(item);
 800b424:	4628      	mov	r0, r5
 800b426:	f011 fc05 	bl	801cc34 <lv_obj_invalidate>
            item->coords.x1 += diff_x;
 800b42a:	8aab      	ldrh	r3, [r5, #20]
            lv_obj_invalidate(item);
 800b42c:	4628      	mov	r0, r5
            item->coords.x1 += diff_x;
 800b42e:	444b      	add	r3, r9
 800b430:	82ab      	strh	r3, [r5, #20]
            item->coords.x2 += diff_x;
 800b432:	8b2b      	ldrh	r3, [r5, #24]
 800b434:	4499      	add	r9, r3
            item->coords.y1 += diff_y;
 800b436:	8aeb      	ldrh	r3, [r5, #22]
 800b438:	4453      	add	r3, sl
            item->coords.x2 += diff_x;
 800b43a:	f8a5 9018 	strh.w	r9, [r5, #24]
            item->coords.y1 += diff_y;
 800b43e:	82eb      	strh	r3, [r5, #22]
            item->coords.y2 += diff_y;
 800b440:	8b6b      	ldrh	r3, [r5, #26]
 800b442:	449a      	add	sl, r3
 800b444:	f8a5 a01a 	strh.w	sl, [r5, #26]
            lv_obj_invalidate(item);
 800b448:	f011 fbf4 	bl	801cc34 <lv_obj_invalidate>
            lv_obj_move_children_by(item, diff_x, diff_y, false);
 800b44c:	2300      	movs	r3, #0
 800b44e:	4642      	mov	r2, r8
 800b450:	4631      	mov	r1, r6
 800b452:	4628      	mov	r0, r5
 800b454:	f011 fa7d 	bl	801c952 <lv_obj_move_children_by>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800b458:	9b03      	ldr	r3, [sp, #12]
 800b45a:	b35b      	cbz	r3, 800b4b4 <flex_update+0x6bc>
 800b45c:	e03d      	b.n	800b4da <flex_update+0x6e2>
            for(i = 0; i < t->grow_item_cnt; i++) {
 800b45e:	3601      	adds	r6, #1
 800b460:	4613      	mov	r3, r2
 800b462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b464:	42b2      	cmp	r2, r6
 800b466:	f47f af1f 	bne.w	800b2a8 <flex_update+0x4b0>
            lv_coord_t s = 0;
 800b46a:	2700      	movs	r7, #0
 800b46c:	e724      	b.n	800b2b8 <flex_update+0x4c0>
                item->h_layout = 1;
 800b46e:	f043 0302 	orr.w	r3, r3, #2
 800b472:	e72b      	b.n	800b2cc <flex_update+0x4d4>
            item->h_layout = 0;
 800b474:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800b478:	f023 0306 	bic.w	r3, r3, #6
 800b47c:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 800b480:	e74f      	b.n	800b322 <flex_update+0x52a>
                cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
 800b482:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 800b486:	f105 0014 	add.w	r0, r5, #20
 800b48a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b48c:	4798      	blx	r3
 800b48e:	1a3f      	subs	r7, r7, r0
 800b490:	b23f      	sxth	r7, r7
                break;
 800b492:	e75c      	b.n	800b34e <flex_update+0x556>
        switch(f->cross_place) {
 800b494:	2700      	movs	r7, #0
 800b496:	e75a      	b.n	800b34e <flex_update+0x556>
        diff_x += f->row ? main_pos : cross_pos;
 800b498:	441e      	add	r6, r3
        diff_y += f->row ? cross_pos : main_pos;
 800b49a:	44b8      	add	r8, r7
        diff_x += f->row ? main_pos : cross_pos;
 800b49c:	fa1f f986 	uxth.w	r9, r6
 800b4a0:	b236      	sxth	r6, r6
        diff_y += f->row ? cross_pos : main_pos;
 800b4a2:	fa1f fa88 	uxth.w	sl, r8
 800b4a6:	fa0f f888 	sxth.w	r8, r8
        if(diff_x || diff_y) {
 800b4aa:	2e00      	cmp	r6, #0
 800b4ac:	d1ba      	bne.n	800b424 <flex_update+0x62c>
 800b4ae:	f1b8 0f00 	cmp.w	r8, #0
 800b4b2:	d11c      	bne.n	800b4ee <flex_update+0x6f6>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800b4b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4b6:	f105 0014 	add.w	r0, r5, #20
 800b4ba:	4798      	blx	r3
 800b4bc:	9b05      	ldr	r3, [sp, #20]
 800b4be:	4418      	add	r0, r3
 800b4c0:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800b4c4:	4418      	add	r0, r3
 800b4c6:	4438      	add	r0, r7
 800b4c8:	b207      	sxth	r7, r0
        item = get_next_item(cont, f->rev, &item_first_id);
 800b4ca:	aa19      	add	r2, sp, #100	; 0x64
 800b4cc:	9910      	ldr	r1, [sp, #64]	; 0x40
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800b4ce:	f8ad 705c 	strh.w	r7, [sp, #92]	; 0x5c
        item = get_next_item(cont, f->rev, &item_first_id);
 800b4d2:	e6cd      	b.n	800b270 <flex_update+0x478>
        if(diff_x || diff_y) {
 800b4d4:	f1b8 0f00 	cmp.w	r8, #0
 800b4d8:	d10c      	bne.n	800b4f4 <flex_update+0x6fc>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800b4da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        else main_pos -= item_gap + place_gap;
 800b4dc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800b4e0:	2a01      	cmp	r2, #1
 800b4e2:	d1e7      	bne.n	800b4b4 <flex_update+0x6bc>
        else main_pos -= item_gap + place_gap;
 800b4e4:	1aff      	subs	r7, r7, r3
 800b4e6:	9b05      	ldr	r3, [sp, #20]
 800b4e8:	1aff      	subs	r7, r7, r3
 800b4ea:	b23f      	sxth	r7, r7
 800b4ec:	e7ed      	b.n	800b4ca <flex_update+0x6d2>
        diff_x += f->row ? main_pos : cross_pos;
 800b4ee:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b4f2:	e797      	b.n	800b424 <flex_update+0x62c>
 800b4f4:	46b1      	mov	r9, r6
 800b4f6:	e795      	b.n	800b424 <flex_update+0x62c>
            *cross_pos += t.track_cross_size + gap + track_gap;
 800b4f8:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 800b4fc:	4402      	add	r2, r0
 800b4fe:	4413      	add	r3, r2
 800b500:	440b      	add	r3, r1
 800b502:	e663      	b.n	800b1cc <flex_update+0x3d4>

0800b504 <lv_flex_init>:
{
 800b504:	b508      	push	{r3, lr}
    LV_LAYOUT_FLEX = lv_layout_register(flex_update, NULL);
 800b506:	2100      	movs	r1, #0
 800b508:	480c      	ldr	r0, [pc, #48]	; (800b53c <lv_flex_init+0x38>)
 800b50a:	f7f9 fce1 	bl	8004ed0 <lv_layout_register>
 800b50e:	4b0c      	ldr	r3, [pc, #48]	; (800b540 <lv_flex_init+0x3c>)
 800b510:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_FLOW = lv_style_register_prop(LV_STYLE_PROP_FLAG_NONE);
 800b512:	2000      	movs	r0, #0
 800b514:	f007 f992 	bl	801283c <lv_style_register_prop>
 800b518:	4b0a      	ldr	r3, [pc, #40]	; (800b544 <lv_flex_init+0x40>)
 800b51a:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_MAIN_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800b51c:	2004      	movs	r0, #4
 800b51e:	f007 f98d 	bl	801283c <lv_style_register_prop>
 800b522:	4b09      	ldr	r3, [pc, #36]	; (800b548 <lv_flex_init+0x44>)
 800b524:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_CROSS_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800b526:	2004      	movs	r0, #4
 800b528:	f007 f988 	bl	801283c <lv_style_register_prop>
 800b52c:	4b07      	ldr	r3, [pc, #28]	; (800b54c <lv_flex_init+0x48>)
 800b52e:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_TRACK_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800b530:	2004      	movs	r0, #4
 800b532:	f007 f983 	bl	801283c <lv_style_register_prop>
 800b536:	4b06      	ldr	r3, [pc, #24]	; (800b550 <lv_flex_init+0x4c>)
 800b538:	8018      	strh	r0, [r3, #0]
}
 800b53a:	bd08      	pop	{r3, pc}
 800b53c:	0800adf9 	.word	0x0800adf9
 800b540:	24010cfe 	.word	0x24010cfe
 800b544:	24010cfc 	.word	0x24010cfc
 800b548:	24010cfa 	.word	0x24010cfa
 800b54c:	24010cf8 	.word	0x24010cf8
 800b550:	24010cf6 	.word	0x24010cf6

0800b554 <lv_obj_set_style_flex_flow>:
{
 800b554:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_FLOW, v, selector);
 800b556:	460a      	mov	r2, r1
 800b558:	4901      	ldr	r1, [pc, #4]	; (800b560 <lv_obj_set_style_flex_flow+0xc>)
 800b55a:	8809      	ldrh	r1, [r1, #0]
 800b55c:	f012 bc4a 	b.w	801ddf4 <lv_obj_set_local_style_prop>
 800b560:	24010cfc 	.word	0x24010cfc

0800b564 <lv_obj_set_flex_flow>:
{
 800b564:	b510      	push	{r4, lr}
    lv_obj_set_style_flex_flow(obj, flow, 0);
 800b566:	2200      	movs	r2, #0
{
 800b568:	4604      	mov	r4, r0
    lv_obj_set_style_flex_flow(obj, flow, 0);
 800b56a:	f7ff fff3 	bl	800b554 <lv_obj_set_style_flex_flow>
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 800b56e:	4b04      	ldr	r3, [pc, #16]	; (800b580 <lv_obj_set_flex_flow+0x1c>)
 800b570:	4620      	mov	r0, r4
 800b572:	2200      	movs	r2, #0
 800b574:	8819      	ldrh	r1, [r3, #0]
}
 800b576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 800b57a:	f012 bdf3 	b.w	801e164 <lv_obj_set_style_layout>
 800b57e:	bf00      	nop
 800b580:	24010cfe 	.word	0x24010cfe

0800b584 <lv_obj_set_style_flex_main_place>:
{
 800b584:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_MAIN_PLACE, v, selector);
 800b586:	460a      	mov	r2, r1
 800b588:	4901      	ldr	r1, [pc, #4]	; (800b590 <lv_obj_set_style_flex_main_place+0xc>)
 800b58a:	8809      	ldrh	r1, [r1, #0]
 800b58c:	f012 bc32 	b.w	801ddf4 <lv_obj_set_local_style_prop>
 800b590:	24010cfa 	.word	0x24010cfa

0800b594 <lv_obj_set_style_flex_cross_place>:
{
 800b594:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_CROSS_PLACE, v, selector);
 800b596:	460a      	mov	r2, r1
 800b598:	4901      	ldr	r1, [pc, #4]	; (800b5a0 <lv_obj_set_style_flex_cross_place+0xc>)
 800b59a:	8809      	ldrh	r1, [r1, #0]
 800b59c:	f012 bc2a 	b.w	801ddf4 <lv_obj_set_local_style_prop>
 800b5a0:	24010cf8 	.word	0x24010cf8

0800b5a4 <lv_obj_set_style_flex_track_place>:
{
 800b5a4:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_TRACK_PLACE, v, selector);
 800b5a6:	460a      	mov	r2, r1
 800b5a8:	4901      	ldr	r1, [pc, #4]	; (800b5b0 <lv_obj_set_style_flex_track_place+0xc>)
 800b5aa:	8809      	ldrh	r1, [r1, #0]
 800b5ac:	f012 bc22 	b.w	801ddf4 <lv_obj_set_local_style_prop>
 800b5b0:	24010cf6 	.word	0x24010cf6

0800b5b4 <lv_obj_set_flex_align>:
{
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	4616      	mov	r6, r2
 800b5ba:	461d      	mov	r5, r3
    lv_obj_set_style_flex_main_place(obj, main_place, 0);
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f7ff ffe1 	bl	800b584 <lv_obj_set_style_flex_main_place>
    lv_obj_set_style_flex_cross_place(obj, cross_place, 0);
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f7ff ffe4 	bl	800b594 <lv_obj_set_style_flex_cross_place>
    lv_obj_set_style_flex_track_place(obj, track_place, 0);
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f7ff ffe7 	bl	800b5a4 <lv_obj_set_style_flex_track_place>
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 800b5d6:	4b04      	ldr	r3, [pc, #16]	; (800b5e8 <lv_obj_set_flex_align+0x34>)
 800b5d8:	4620      	mov	r0, r4
 800b5da:	2200      	movs	r2, #0
 800b5dc:	8819      	ldrh	r1, [r3, #0]
}
 800b5de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 800b5e2:	f012 bdbf 	b.w	801e164 <lv_obj_set_style_layout>
 800b5e6:	bf00      	nop
 800b5e8:	24010cfe 	.word	0x24010cfe

0800b5ec <lv_obj_set_style_flex_grow>:
{
 800b5ec:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_GROW, v, selector);
 800b5ee:	460a      	mov	r2, r1
 800b5f0:	4901      	ldr	r1, [pc, #4]	; (800b5f8 <lv_obj_set_style_flex_grow+0xc>)
 800b5f2:	8809      	ldrh	r1, [r1, #0]
 800b5f4:	f012 bbfe 	b.w	801ddf4 <lv_obj_set_local_style_prop>
 800b5f8:	24010cf4 	.word	0x24010cf4

0800b5fc <grid_align>:
 * @param pos_array write the positions of the tracks here
 * @return the total size of the grid
 */
static lv_coord_t grid_align(lv_coord_t cont_size,  bool auto_size, uint8_t align, lv_coord_t gap, uint32_t track_num,
                             lv_coord_t * size_array, lv_coord_t * pos_array, bool reverse)
{
 800b5fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b600:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b602:	4605      	mov	r5, r0
 800b604:	4618      	mov	r0, r3
 800b606:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800b60a:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
    lv_coord_t grid_size = 0;
    uint32_t i;

    if(auto_size) {
 800b60e:	b311      	cbz	r1, 800b656 <grid_align+0x5a>
        pos_array[0] = 0;
 800b610:	2200      	movs	r2, #0
 800b612:	8022      	strh	r2, [r4, #0]

        }
    }

    /*Set the position of all tracks from the start position, gaps and track sizes*/
    for(i = 0; i < track_num - 1; i++) {
 800b614:	46a4      	mov	ip, r4
 800b616:	2100      	movs	r1, #0
 800b618:	f106 3eff 	add.w	lr, r6, #4294967295
 800b61c:	458e      	cmp	lr, r1
 800b61e:	d87d      	bhi.n	800b71c <grid_align+0x120>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
    }

    lv_coord_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
 800b620:	f106 4200 	add.w	r2, r6, #2147483648	; 0x80000000
 800b624:	3a01      	subs	r2, #1
 800b626:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 800b62a:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800b62e:	4410      	add	r0, r2
 800b630:	8822      	ldrh	r2, [r4, #0]
 800b632:	1a80      	subs	r0, r0, r2
 800b634:	b200      	sxth	r0, r0

    if(reverse) {
 800b636:	b163      	cbz	r3, 800b652 <grid_align+0x56>
        for(i = 0; i < track_num; i++) {
 800b638:	3c02      	subs	r4, #2
 800b63a:	2200      	movs	r2, #0
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 800b63c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 800b640:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
        for(i = 0; i < track_num; i++) {
 800b644:	3201      	adds	r2, #1
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 800b646:	1aeb      	subs	r3, r5, r3
        for(i = 0; i < track_num; i++) {
 800b648:	4296      	cmp	r6, r2
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 800b64a:	eba3 0301 	sub.w	r3, r3, r1
 800b64e:	8023      	strh	r3, [r4, #0]
        for(i = 0; i < track_num; i++) {
 800b650:	d1f4      	bne.n	800b63c <grid_align+0x40>

    }

    /*Return the full size of the grid*/
    return total_gird_size;
}
 800b652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(align == LV_GRID_ALIGN_SPACE_AROUND || align == LV_GRID_ALIGN_SPACE_BETWEEN || align == LV_GRID_ALIGN_SPACE_EVENLY) {
 800b656:	f1a2 0c04 	sub.w	ip, r2, #4
 800b65a:	fa5f fc8c 	uxtb.w	ip, ip
 800b65e:	f1bc 0f02 	cmp.w	ip, #2
 800b662:	d803      	bhi.n	800b66c <grid_align+0x70>
            gap = 0;
 800b664:	2e01      	cmp	r6, #1
 800b666:	4608      	mov	r0, r1
 800b668:	bf08      	it	eq
 800b66a:	2201      	moveq	r2, #1
        for(i = 0; i < track_num; i++) {
 800b66c:	46be      	mov	lr, r7
 800b66e:	eb07 0846 	add.w	r8, r7, r6, lsl #1
    lv_coord_t grid_size = 0;
 800b672:	2100      	movs	r1, #0
            grid_size += size_array[i] + gap;
 800b674:	fa1f fc80 	uxth.w	ip, r0
        for(i = 0; i < track_num; i++) {
 800b678:	45f0      	cmp	r8, lr
            grid_size += size_array[i] + gap;
 800b67a:	b289      	uxth	r1, r1
        for(i = 0; i < track_num; i++) {
 800b67c:	d116      	bne.n	800b6ac <grid_align+0xb0>
        switch(align) {
 800b67e:	f04f 0e00 	mov.w	lr, #0
 800b682:	2a06      	cmp	r2, #6
 800b684:	d8c6      	bhi.n	800b614 <grid_align+0x18>
 800b686:	f20f 0808 	addw	r8, pc, #8
 800b68a:	f858 f022 	ldr.w	pc, [r8, r2, lsl #2]
 800b68e:	bf00      	nop
 800b690:	0800b6b9 	.word	0x0800b6b9
 800b694:	0800b6bf 	.word	0x0800b6bf
 800b698:	0800b6cf 	.word	0x0800b6cf
 800b69c:	0800b615 	.word	0x0800b615
 800b6a0:	0800b705 	.word	0x0800b705
 800b6a4:	0800b6ed 	.word	0x0800b6ed
 800b6a8:	0800b6d7 	.word	0x0800b6d7
            grid_size += size_array[i] + gap;
 800b6ac:	f93e 9b02 	ldrsh.w	r9, [lr], #2
 800b6b0:	4461      	add	r1, ip
 800b6b2:	4449      	add	r1, r9
 800b6b4:	b209      	sxth	r1, r1
        for(i = 0; i < track_num; i++) {
 800b6b6:	e7df      	b.n	800b678 <grid_align+0x7c>
                pos_array[0] = 0;
 800b6b8:	f8a4 e000 	strh.w	lr, [r4]
                break;
 800b6bc:	e7aa      	b.n	800b614 <grid_align+0x18>
        grid_size -= gap;
 800b6be:	eba1 010c 	sub.w	r1, r1, ip
                pos_array[0] = (cont_size - grid_size) / 2;
 800b6c2:	b209      	sxth	r1, r1
 800b6c4:	1a69      	subs	r1, r5, r1
 800b6c6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
                pos_array[0] = gap / 2;
 800b6ca:	1049      	asrs	r1, r1, #1
 800b6cc:	e001      	b.n	800b6d2 <grid_align+0xd6>
                pos_array[0] = cont_size - grid_size;
 800b6ce:	1a69      	subs	r1, r5, r1
 800b6d0:	4461      	add	r1, ip
                pos_array[0] = gap / 2;
 800b6d2:	8021      	strh	r1, [r4, #0]
                break;
 800b6d4:	e79e      	b.n	800b614 <grid_align+0x18>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 800b6d6:	1a69      	subs	r1, r5, r1
 800b6d8:	1e72      	subs	r2, r6, #1
                pos_array[0] = 0;
 800b6da:	f8a4 e000 	strh.w	lr, [r4]
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 800b6de:	4461      	add	r1, ip
 800b6e0:	b212      	sxth	r2, r2
 800b6e2:	b209      	sxth	r1, r1
 800b6e4:	fb91 f1f2 	sdiv	r1, r1, r2
 800b6e8:	b208      	sxth	r0, r1
                break;
 800b6ea:	e793      	b.n	800b614 <grid_align+0x18>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 800b6ec:	1a69      	subs	r1, r5, r1
 800b6ee:	b232      	sxth	r2, r6
 800b6f0:	4461      	add	r1, ip
 800b6f2:	b209      	sxth	r1, r1
 800b6f4:	fb91 f1f2 	sdiv	r1, r1, r2
                pos_array[0] = gap / 2;
 800b6f8:	f3c1 32c0 	ubfx	r2, r1, #15, #1
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 800b6fc:	b208      	sxth	r0, r1
                pos_array[0] = gap / 2;
 800b6fe:	fa02 f181 	sxtah	r1, r2, r1
 800b702:	e7e2      	b.n	800b6ca <grid_align+0xce>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num + 1);
 800b704:	1a69      	subs	r1, r5, r1
 800b706:	1c72      	adds	r2, r6, #1
 800b708:	448c      	add	ip, r1
 800b70a:	b212      	sxth	r2, r2
 800b70c:	fa0f fc8c 	sxth.w	ip, ip
 800b710:	fb9c fcf2 	sdiv	ip, ip, r2
 800b714:	fa0f f08c 	sxth.w	r0, ip
                pos_array[0] = gap;
 800b718:	8020      	strh	r0, [r4, #0]
                break;
 800b71a:	e77b      	b.n	800b614 <grid_align+0x18>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
 800b71c:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 800b720:	3101      	adds	r1, #1
 800b722:	f9bc 8000 	ldrsh.w	r8, [ip]
 800b726:	4402      	add	r2, r0
 800b728:	4442      	add	r2, r8
 800b72a:	f82c 2f02 	strh.w	r2, [ip, #2]!
    for(i = 0; i < track_num - 1; i++) {
 800b72e:	e775      	b.n	800b61c <grid_align+0x20>

0800b730 <grid_update>:
{
 800b730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (const lv_coord_t *)v.ptr;
}

static inline const lv_coord_t * lv_obj_get_style_grid_column_dsc_array(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 800b734:	f8df 9314 	ldr.w	r9, [pc, #788]	; 800ba4c <grid_update+0x31c>
 800b738:	b097      	sub	sp, #92	; 0x5c
 800b73a:	4682      	mov	sl, r0
 800b73c:	2100      	movs	r1, #0
 800b73e:	f8b9 2000 	ldrh.w	r2, [r9]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 800b742:	4dc3      	ldr	r5, [pc, #780]	; (800ba50 <grid_update+0x320>)
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 800b744:	f012 f99c 	bl	801da80 <lv_obj_get_style_prop>
 800b748:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 800b74a:	2100      	movs	r1, #0
 800b74c:	882a      	ldrh	r2, [r5, #0]
 800b74e:	4650      	mov	r0, sl
 800b750:	f012 f996 	bl	801da80 <lv_obj_get_style_prop>
    if(col_templ == NULL || row_templ == NULL) return;
 800b754:	2c00      	cmp	r4, #0
 800b756:	d06a      	beq.n	800b82e <grid_update+0xfe>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d068      	beq.n	800b82e <grid_update+0xfe>
    if(lv_obj_get_child(cont, 0) == NULL) {
 800b75c:	2100      	movs	r1, #0
 800b75e:	4650      	mov	r0, sl
 800b760:	f012 fd15 	bl	801e18e <lv_obj_get_child>
 800b764:	4601      	mov	r1, r0
 800b766:	2800      	cmp	r0, #0
 800b768:	d164      	bne.n	800b834 <grid_update+0x104>
    memset(dst, 0x00, len);
 800b76a:	221c      	movs	r2, #28
 800b76c:	a80f      	add	r0, sp, #60	; 0x3c
 800b76e:	f00e ffd7 	bl	801a720 <memset>
 800b772:	220c      	movs	r2, #12
 800b774:	2100      	movs	r1, #0
 800b776:	a80c      	add	r0, sp, #48	; 0x30
 800b778:	f00e ffd2 	bl	801a720 <memset>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800b77c:	2232      	movs	r2, #50	; 0x32
 800b77e:	2100      	movs	r1, #0
 800b780:	4650      	mov	r0, sl
 800b782:	f012 f97d 	bl	801da80 <lv_obj_get_style_prop>
 800b786:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800b788:	2212      	movs	r2, #18
 800b78a:	2100      	movs	r1, #0
 800b78c:	4650      	mov	r0, sl
    lv_coord_t pad_left = lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt;
 800b78e:	b2a5      	uxth	r5, r4
 800b790:	f012 f976 	bl	801da80 <lv_obj_get_style_prop>
 800b794:	fa10 f484 	uxtah	r4, r0, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800b798:	2210      	movs	r2, #16
 800b79a:	2100      	movs	r1, #0
 800b79c:	4650      	mov	r0, sl
 800b79e:	b2a4      	uxth	r4, r4
 800b7a0:	f012 f96e 	bl	801da80 <lv_obj_get_style_prop>
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800b7a4:	f8ba 3014 	ldrh.w	r3, [sl, #20]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 800b7a8:	4405      	add	r5, r0
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800b7aa:	4650      	mov	r0, sl
 800b7ac:	441c      	add	r4, r3
 800b7ae:	f011 fbd4 	bl	801cf5a <lv_obj_get_scroll_x>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 800b7b2:	b2ad      	uxth	r5, r5
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800b7b4:	f8ba 3016 	ldrh.w	r3, [sl, #22]
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800b7b8:	b2a4      	uxth	r4, r4
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800b7ba:	441d      	add	r5, r3
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800b7bc:	1a24      	subs	r4, r4, r0
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800b7be:	4650      	mov	r0, sl
 800b7c0:	b2ad      	uxth	r5, r5
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800b7c2:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800b7c6:	f011 fbce 	bl	801cf66 <lv_obj_get_scroll_y>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 800b7ca:	2300      	movs	r3, #0
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800b7cc:	1a2d      	subs	r5, r5, r0
 800b7ce:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 800b7d2:	9304      	str	r3, [sp, #16]
 800b7d4:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b7d8:	9904      	ldr	r1, [sp, #16]
 800b7da:	685a      	ldr	r2, [r3, #4]
 800b7dc:	4291      	cmp	r1, r2
 800b7de:	f0c0 8213 	bcc.w	800bc08 <grid_update+0x4d8>
    lv_mem_buf_release(calc->x);
 800b7e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b7e4:	f006 fffe 	bl	80127e4 <lv_mem_buf_release>
    lv_mem_buf_release(calc->y);
 800b7e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b7ea:	f006 fffb 	bl	80127e4 <lv_mem_buf_release>
    lv_mem_buf_release(calc->w);
 800b7ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b7f0:	f006 fff8 	bl	80127e4 <lv_mem_buf_release>
    lv_mem_buf_release(calc->h);
 800b7f4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b7f6:	f006 fff5 	bl	80127e4 <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	2100      	movs	r1, #0
 800b7fe:	4650      	mov	r0, sl
 800b800:	f012 f93e 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800b804:	2204      	movs	r2, #4
    return (lv_coord_t)v.num;
 800b806:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800b808:	2100      	movs	r1, #0
 800b80a:	4650      	mov	r0, sl
 800b80c:	f012 f938 	bl	801da80 <lv_obj_get_style_prop>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 800b810:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 800b814:	b200      	sxth	r0, r0
 800b816:	429c      	cmp	r4, r3
 800b818:	d001      	beq.n	800b81e <grid_update+0xee>
 800b81a:	4298      	cmp	r0, r3
 800b81c:	d102      	bne.n	800b824 <grid_update+0xf4>
        lv_obj_refr_size(cont);
 800b81e:	4650      	mov	r0, sl
 800b820:	f7f9 fcb4 	bl	800518c <lv_obj_refr_size>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800b824:	2200      	movs	r2, #0
 800b826:	212b      	movs	r1, #43	; 0x2b
 800b828:	4650      	mov	r0, sl
 800b82a:	f7f8 ff57 	bl	80046dc <lv_event_send>
}
 800b82e:	b017      	add	sp, #92	; 0x5c
 800b830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b834:	882a      	ldrh	r2, [r5, #0]
 800b836:	2100      	movs	r1, #0
 800b838:	4650      	mov	r0, sl
 800b83a:	f012 f921 	bl	801da80 <lv_obj_get_style_prop>

static uint32_t count_tracks(const lv_coord_t * templ)
{
    uint32_t i;
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800b83e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800b842:	4605      	mov	r5, r0
 800b844:	2000      	movs	r0, #0
 800b846:	f935 2010 	ldrsh.w	r2, [r5, r0, lsl #1]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	f040 80fb 	bne.w	800ba46 <grid_update+0x316>
    c->row_num = count_tracks(row_templ);
 800b850:	9014      	str	r0, [sp, #80]	; 0x50
    c->y = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 800b852:	0040      	lsls	r0, r0, #1
 800b854:	f006 ff7c 	bl	8012750 <lv_mem_buf_get>
 800b858:	9010      	str	r0, [sp, #64]	; 0x40
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 800b85a:	9814      	ldr	r0, [sp, #80]	; 0x50
    for(i = 0; i < c->row_num; i++) {
 800b85c:	2400      	movs	r4, #0
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 800b85e:	0040      	lsls	r0, r0, #1
 800b860:	f006 ff76 	bl	8012750 <lv_mem_buf_get>
 800b864:	9012      	str	r0, [sp, #72]	; 0x48
    for(i = 0; i < c->row_num; i++) {
 800b866:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b868:	429c      	cmp	r4, r3
 800b86a:	f0c0 80f7 	bcc.w	800ba5c <grid_update+0x32c>
    lv_coord_t grid_h = 0;
 800b86e:	2300      	movs	r3, #0
        if(IS_FR(x)) {
 800b870:	f641 709a 	movw	r0, #8090	; 0x1f9a
    uint32_t row_fr_cnt = 0;
 800b874:	461c      	mov	r4, r3
    for(i = 0; i < c->row_num; i++) {
 800b876:	4619      	mov	r1, r3
 800b878:	9a14      	ldr	r2, [sp, #80]	; 0x50
            grid_h += c->h[i];
 800b87a:	b29e      	uxth	r6, r3
    for(i = 0; i < c->row_num; i++) {
 800b87c:	4291      	cmp	r1, r2
 800b87e:	f0c0 812f 	bcc.w	800bae0 <grid_update+0x3b0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800b882:	2100      	movs	r1, #0
 800b884:	2214      	movs	r2, #20
 800b886:	4650      	mov	r0, sl
 800b888:	f012 f8fa 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800b88c:	b207      	sxth	r7, r0
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 800b88e:	4650      	mov	r0, sl
 800b890:	f010 fff2 	bl	801c878 <lv_obj_get_content_height>
 800b894:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b896:	3b01      	subs	r3, #1
 800b898:	fb13 f307 	smulbb	r3, r3, r7
        if(IS_FR(x)) {
 800b89c:	f641 779a 	movw	r7, #8090	; 0x1f9a
    lv_coord_t free_h = cont_h - grid_h;
 800b8a0:	441e      	add	r6, r3
    int32_t last_fr_x = 0;
 800b8a2:	2300      	movs	r3, #0
    lv_coord_t free_h = cont_h - grid_h;
 800b8a4:	1b81      	subs	r1, r0, r6
    int32_t last_fr_i = -1;
 800b8a6:	f04f 36ff 	mov.w	r6, #4294967295
    for(i = 0; i < c->row_num; i++) {
 800b8aa:	4618      	mov	r0, r3
    if(free_h < 0) free_h = 0;
 800b8ac:	b209      	sxth	r1, r1
 800b8ae:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    for(i = 0; i < c->row_num; i++) {
 800b8b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8b4:	4290      	cmp	r0, r2
 800b8b6:	f0c0 8129 	bcc.w	800bb0c <grid_update+0x3dc>
    if(last_fr_i >= 0) {
 800b8ba:	1c70      	adds	r0, r6, #1
 800b8bc:	d007      	beq.n	800b8ce <grid_update+0x19e>
        c->h[last_fr_i] = free_h - ((free_h * (row_fr_cnt - last_fr_x)) / row_fr_cnt);
 800b8be:	1ae3      	subs	r3, r4, r3
 800b8c0:	434b      	muls	r3, r1
 800b8c2:	fbb3 f3f4 	udiv	r3, r3, r4
 800b8c6:	1ac9      	subs	r1, r1, r3
 800b8c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8ca:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 800b8ce:	f8b9 2000 	ldrh.w	r2, [r9]
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	4650      	mov	r0, sl
 800b8d6:	f012 f8d3 	bl	801da80 <lv_obj_get_style_prop>
 800b8da:	4605      	mov	r5, r0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800b8dc:	4650      	mov	r0, sl
 800b8de:	f010 ffb5 	bl	801c84c <lv_obj_get_content_width>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800b8e2:	f641 73ff 	movw	r3, #8191	; 0x1fff
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800b8e6:	4681      	mov	r9, r0
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	f935 2010 	ldrsh.w	r2, [r5, r0, lsl #1]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	f040 811e 	bne.w	800bb30 <grid_update+0x400>
    c->col_num = count_tracks(col_templ);
 800b8f4:	9013      	str	r0, [sp, #76]	; 0x4c
    c->x = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 800b8f6:	0040      	lsls	r0, r0, #1
 800b8f8:	f006 ff2a 	bl	8012750 <lv_mem_buf_get>
 800b8fc:	900f      	str	r0, [sp, #60]	; 0x3c
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 800b8fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
    for(i = 0; i < c->col_num; i++) {
 800b900:	2400      	movs	r4, #0
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 800b902:	0040      	lsls	r0, r0, #1
 800b904:	f006 ff24 	bl	8012750 <lv_mem_buf_get>
 800b908:	9011      	str	r0, [sp, #68]	; 0x44
    for(i = 0; i < c->col_num; i++) {
 800b90a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b90c:	429c      	cmp	r4, r3
 800b90e:	f0c0 8111 	bcc.w	800bb34 <grid_update+0x404>
    lv_coord_t grid_w = 0;
 800b912:	2300      	movs	r3, #0
        if(IS_FR(x)) {
 800b914:	f641 709a 	movw	r0, #8090	; 0x1f9a
    uint32_t col_fr_cnt = 0;
 800b918:	461c      	mov	r4, r3
    for(i = 0; i < c->col_num; i++) {
 800b91a:	4619      	mov	r1, r3
 800b91c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            grid_w += c->w[i];
 800b91e:	b29e      	uxth	r6, r3
    for(i = 0; i < c->col_num; i++) {
 800b920:	4291      	cmp	r1, r2
 800b922:	f0c0 8149 	bcc.w	800bbb8 <grid_update+0x488>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800b926:	2215      	movs	r2, #21
 800b928:	2100      	movs	r1, #0
 800b92a:	4650      	mov	r0, sl
        if(IS_FR(x)) {
 800b92c:	f641 779a 	movw	r7, #8090	; 0x1f9a
 800b930:	f012 f8a6 	bl	801da80 <lv_obj_get_style_prop>
    cont_w -= col_gap * (c->col_num - 1);
 800b934:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    int32_t last_fr_x = 0;
 800b936:	2200      	movs	r2, #0
    cont_w -= col_gap * (c->col_num - 1);
 800b938:	3b01      	subs	r3, #1
    for(i = 0; i < c->col_num; i++) {
 800b93a:	4611      	mov	r1, r2
    cont_w -= col_gap * (c->col_num - 1);
 800b93c:	fb13 f300 	smulbb	r3, r3, r0
 800b940:	eba9 0303 	sub.w	r3, r9, r3
    lv_coord_t free_w = cont_w - grid_w;
 800b944:	1b9b      	subs	r3, r3, r6
    int32_t last_fr_i = -1;
 800b946:	f04f 36ff 	mov.w	r6, #4294967295
    if(free_w < 0) free_w = 0;
 800b94a:	b21b      	sxth	r3, r3
 800b94c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    for(i = 0; i < c->col_num; i++) {
 800b950:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b952:	4281      	cmp	r1, r0
 800b954:	f0c0 8146 	bcc.w	800bbe4 <grid_update+0x4b4>
    if(last_fr_i >= 0) {
 800b958:	1c71      	adds	r1, r6, #1
 800b95a:	d007      	beq.n	800b96c <grid_update+0x23c>
        c->w[last_fr_i] = free_w - ((free_w * (col_fr_cnt - last_fr_x)) / col_fr_cnt);
 800b95c:	1aa2      	subs	r2, r4, r2
 800b95e:	435a      	muls	r2, r3
 800b960:	fbb2 f2f4 	udiv	r2, r2, r4
 800b964:	1a9b      	subs	r3, r3, r2
 800b966:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b968:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
 800b96c:	2215      	movs	r2, #21
 800b96e:	2100      	movs	r1, #0
 800b970:	4650      	mov	r0, sl
 800b972:	f012 f885 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800b976:	2214      	movs	r2, #20
    return (lv_coord_t)v.num;
 800b978:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800b97c:	2100      	movs	r1, #0
 800b97e:	4650      	mov	r0, sl
 800b980:	f012 f87e 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b984:	2216      	movs	r2, #22
    return (lv_coord_t)v.num;
 800b986:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b988:	2100      	movs	r1, #0
 800b98a:	4650      	mov	r0, sl
 800b98c:	f012 f878 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800b990:	2201      	movs	r2, #1
    return (lv_base_dir_t)v.num;
 800b992:	b2c7      	uxtb	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800b994:	2100      	movs	r1, #0
 800b996:	4650      	mov	r0, sl
    bool rev = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL ? true : false;
 800b998:	1e7b      	subs	r3, r7, #1
 800b99a:	425f      	negs	r7, r3
 800b99c:	415f      	adcs	r7, r3
 800b99e:	f012 f86f 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800b9a2:	2204      	movs	r2, #4
    return (lv_coord_t)v.num;
 800b9a4:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	4650      	mov	r0, sl
 800b9aa:	f012 f869 	bl	801da80 <lv_obj_get_style_prop>
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 800b9ae:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 800b9b2:	fa0f f880 	sxth.w	r8, r0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800b9b6:	4650      	mov	r0, sl
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 800b9b8:	429c      	cmp	r4, r3
 800b9ba:	bf09      	itett	eq
 800b9bc:	f89a 4023 	ldrbeq.w	r4, [sl, #35]	; 0x23
 800b9c0:	2400      	movne	r4, #0
 800b9c2:	f084 0404 	eoreq.w	r4, r4, #4
 800b9c6:	f3c4 0480 	ubfxeq	r4, r4, #2, #1
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800b9ca:	f010 ff3f 	bl	801c84c <lv_obj_get_content_width>
    return (lv_grid_align_t)v.num;
}

static inline lv_grid_align_t lv_obj_get_style_grid_column_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_ALIGN);
 800b9ce:	4b21      	ldr	r3, [pc, #132]	; (800ba54 <grid_update+0x324>)
 800b9d0:	4605      	mov	r5, r0
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	4650      	mov	r0, sl
 800b9d6:	881a      	ldrh	r2, [r3, #0]
 800b9d8:	f012 f852 	bl	801da80 <lv_obj_get_style_prop>
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w,
 800b9dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9de:	4621      	mov	r1, r4
 800b9e0:	b2c2      	uxtb	r2, r0
 800b9e2:	9302      	str	r3, [sp, #8]
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9e8:	9703      	str	r7, [sp, #12]
 800b9ea:	9301      	str	r3, [sp, #4]
 800b9ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	464b      	mov	r3, r9
 800b9f2:	f7ff fe03 	bl	800b5fc <grid_align>
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 800b9f6:	f242 73d1 	movw	r3, #10193	; 0x27d1
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w,
 800b9fa:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 800b9fe:	4650      	mov	r0, sl
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 800ba00:	4598      	cmp	r8, r3
 800ba02:	bf09      	itett	eq
 800ba04:	f89a 4023 	ldrbeq.w	r4, [sl, #35]	; 0x23
 800ba08:	2400      	movne	r4, #0
 800ba0a:	f084 0402 	eoreq.w	r4, r4, #2
 800ba0e:	f3c4 0440 	ubfxeq	r4, r4, #1, #1
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 800ba12:	f010 ff31 	bl	801c878 <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_ALIGN);
 800ba16:	4b10      	ldr	r3, [pc, #64]	; (800ba58 <grid_update+0x328>)
 800ba18:	4605      	mov	r5, r0
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	4650      	mov	r0, sl
 800ba1e:	881a      	ldrh	r2, [r3, #0]
 800ba20:	f012 f82e 	bl	801da80 <lv_obj_get_style_prop>
    calc_out->grid_h = grid_align(cont_h, auto_h, get_grid_row_align(cont), row_gap, calc_out->row_num, calc_out->h,
 800ba24:	2300      	movs	r3, #0
 800ba26:	b2c2      	uxtb	r2, r0
 800ba28:	4621      	mov	r1, r4
 800ba2a:	9303      	str	r3, [sp, #12]
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba30:	9302      	str	r3, [sp, #8]
 800ba32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba34:	9301      	str	r3, [sp, #4]
 800ba36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	4633      	mov	r3, r6
 800ba3c:	f7ff fdde 	bl	800b5fc <grid_align>
 800ba40:	f8ad 0056 	strh.w	r0, [sp, #86]	; 0x56
 800ba44:	e695      	b.n	800b772 <grid_update+0x42>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800ba46:	3001      	adds	r0, #1
 800ba48:	e6fd      	b.n	800b846 <grid_update+0x116>
 800ba4a:	bf00      	nop
 800ba4c:	24010d12 	.word	0x24010d12
 800ba50:	24010d0e 	.word	0x24010d0e
 800ba54:	24010d10 	.word	0x24010d10
 800ba58:	24010d0c 	.word	0x24010d0c
        if(IS_CONTENT(row_templ[i])) {
 800ba5c:	f935 2014 	ldrsh.w	r2, [r5, r4, lsl #1]
 800ba60:	f641 739a 	movw	r3, #8090	; 0x1f9a
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d139      	bne.n	800badc <grid_update+0x3ac>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800ba68:	f04f 0800 	mov.w	r8, #0
        lv_coord_t size = LV_COORD_MIN;
 800ba6c:	4eb5      	ldr	r6, [pc, #724]	; (800bd44 <grid_update+0x614>)
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_pos(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 800ba6e:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 800bd48 <grid_update+0x618>
 800ba72:	e026      	b.n	800bac2 <grid_update+0x392>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800ba74:	4641      	mov	r1, r8
 800ba76:	4650      	mov	r0, sl
 800ba78:	f012 fb89 	bl	801e18e <lv_obj_get_child>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800ba7c:	49b3      	ldr	r1, [pc, #716]	; (800bd4c <grid_update+0x61c>)
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800ba7e:	4607      	mov	r7, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800ba80:	f00f ffca 	bl	801ba18 <lv_obj_has_flag_any>
 800ba84:	4601      	mov	r1, r0
 800ba86:	b9d0      	cbnz	r0, 800babe <grid_update+0x38e>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_span(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 800ba88:	4bb1      	ldr	r3, [pc, #708]	; (800bd50 <grid_update+0x620>)
 800ba8a:	9004      	str	r0, [sp, #16]
 800ba8c:	4638      	mov	r0, r7
 800ba8e:	881a      	ldrh	r2, [r3, #0]
 800ba90:	f011 fff6 	bl	801da80 <lv_obj_get_style_prop>
                if(row_span != 1) continue;
 800ba94:	9904      	ldr	r1, [sp, #16]
 800ba96:	b2c0      	uxtb	r0, r0
 800ba98:	2801      	cmp	r0, #1
 800ba9a:	d110      	bne.n	800babe <grid_update+0x38e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 800ba9c:	f8bb 2000 	ldrh.w	r2, [fp]
 800baa0:	4638      	mov	r0, r7
 800baa2:	f011 ffed 	bl	801da80 <lv_obj_get_style_prop>
                uint32_t row_pos = get_row_pos(item);
 800baa6:	b2c0      	uxtb	r0, r0
                if(row_pos != i) continue;
 800baa8:	4284      	cmp	r4, r0
 800baaa:	d108      	bne.n	800babe <grid_update+0x38e>
                size = LV_MAX(size, lv_obj_get_height(item));
 800baac:	4638      	mov	r0, r7
 800baae:	f010 fec7 	bl	801c840 <lv_obj_get_height>
 800bab2:	42b0      	cmp	r0, r6
 800bab4:	db03      	blt.n	800babe <grid_update+0x38e>
 800bab6:	4638      	mov	r0, r7
 800bab8:	f010 fec2 	bl	801c840 <lv_obj_get_height>
 800babc:	4606      	mov	r6, r0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800babe:	f108 0801 	add.w	r8, r8, #1
 800bac2:	4650      	mov	r0, sl
 800bac4:	f012 fb72 	bl	801e1ac <lv_obj_get_child_cnt>
 800bac8:	4580      	cmp	r8, r0
 800baca:	d3d3      	bcc.n	800ba74 <grid_update+0x344>
            if(size >= 0) c->h[i] = size;
 800bacc:	2e00      	cmp	r6, #0
 800bace:	9b12      	ldr	r3, [sp, #72]	; 0x48
            else c->h[i] = 0;
 800bad0:	bfb6      	itet	lt
 800bad2:	2200      	movlt	r2, #0
            if(size >= 0) c->h[i] = size;
 800bad4:	f823 6014 	strhge.w	r6, [r3, r4, lsl #1]
            else c->h[i] = 0;
 800bad8:	f823 2014 	strhlt.w	r2, [r3, r4, lsl #1]
    for(i = 0; i < c->row_num; i++) {
 800badc:	3401      	adds	r4, #1
 800bade:	e6c2      	b.n	800b866 <grid_update+0x136>
        lv_coord_t x = row_templ[i];
 800bae0:	f935 2011 	ldrsh.w	r2, [r5, r1, lsl #1]
        if(IS_FR(x)) {
 800bae4:	4282      	cmp	r2, r0
 800bae6:	dd05      	ble.n	800baf4 <grid_update+0x3c4>
            row_fr_cnt += GET_FR(x);
 800bae8:	f5a4 54fc 	sub.w	r4, r4, #8064	; 0x1f80
 800baec:	3c1b      	subs	r4, #27
 800baee:	4414      	add	r4, r2
    for(i = 0; i < c->row_num; i++) {
 800baf0:	3101      	adds	r1, #1
 800baf2:	e6c1      	b.n	800b878 <grid_update+0x148>
            grid_h += c->h[i];
 800baf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800baf6:	bf0d      	iteet	eq
 800baf8:	f833 3011 	ldrheq.w	r3, [r3, r1, lsl #1]
            c->h[i] = x;
 800bafc:	f823 2011 	strhne.w	r2, [r3, r1, lsl #1]
            grid_h += x;
 800bb00:	1992      	addne	r2, r2, r6
            grid_h += c->h[i];
 800bb02:	199b      	addeq	r3, r3, r6
            grid_h += x;
 800bb04:	bf14      	ite	ne
 800bb06:	b213      	sxthne	r3, r2
            grid_h += c->h[i];
 800bb08:	b21b      	sxtheq	r3, r3
            grid_h += x;
 800bb0a:	e7f1      	b.n	800baf0 <grid_update+0x3c0>
        lv_coord_t x = row_templ[i];
 800bb0c:	f935 2010 	ldrsh.w	r2, [r5, r0, lsl #1]
        if(IS_FR(x)) {
 800bb10:	42ba      	cmp	r2, r7
 800bb12:	dd0b      	ble.n	800bb2c <grid_update+0x3fc>
            lv_coord_t f = GET_FR(x);
 800bb14:	f5a2 53fc 	sub.w	r3, r2, #8064	; 0x1f80
            c->h[i] = (free_h * f) / row_fr_cnt;
 800bb18:	9a12      	ldr	r2, [sp, #72]	; 0x48
            lv_coord_t f = GET_FR(x);
 800bb1a:	3b1b      	subs	r3, #27
            c->h[i] = (free_h * f) / row_fr_cnt;
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	fb03 f601 	mul.w	r6, r3, r1
 800bb22:	fbb6 f6f4 	udiv	r6, r6, r4
 800bb26:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
            last_fr_i = i;
 800bb2a:	4606      	mov	r6, r0
    for(i = 0; i < c->row_num; i++) {
 800bb2c:	3001      	adds	r0, #1
 800bb2e:	e6c0      	b.n	800b8b2 <grid_update+0x182>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800bb30:	3001      	adds	r0, #1
 800bb32:	e6da      	b.n	800b8ea <grid_update+0x1ba>
        if(IS_CONTENT(col_templ[i])) {
 800bb34:	f935 2014 	ldrsh.w	r2, [r5, r4, lsl #1]
 800bb38:	f641 739a 	movw	r3, #8090	; 0x1f9a
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d139      	bne.n	800bbb4 <grid_update+0x484>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800bb40:	f04f 0800 	mov.w	r8, #0
        lv_coord_t size = LV_COORD_MIN;
 800bb44:	4e7f      	ldr	r6, [pc, #508]	; (800bd44 <grid_update+0x614>)
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 800bb46:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800bd54 <grid_update+0x624>
 800bb4a:	e026      	b.n	800bb9a <grid_update+0x46a>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800bb4c:	4641      	mov	r1, r8
 800bb4e:	4650      	mov	r0, sl
 800bb50:	f012 fb1d 	bl	801e18e <lv_obj_get_child>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800bb54:	497d      	ldr	r1, [pc, #500]	; (800bd4c <grid_update+0x61c>)
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800bb56:	4607      	mov	r7, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800bb58:	f00f ff5e 	bl	801ba18 <lv_obj_has_flag_any>
 800bb5c:	4601      	mov	r1, r0
 800bb5e:	b9d0      	cbnz	r0, 800bb96 <grid_update+0x466>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 800bb60:	4b7d      	ldr	r3, [pc, #500]	; (800bd58 <grid_update+0x628>)
 800bb62:	9004      	str	r0, [sp, #16]
 800bb64:	4638      	mov	r0, r7
 800bb66:	881a      	ldrh	r2, [r3, #0]
 800bb68:	f011 ff8a 	bl	801da80 <lv_obj_get_style_prop>
                if(col_span != 1) continue;
 800bb6c:	9904      	ldr	r1, [sp, #16]
 800bb6e:	b2c0      	uxtb	r0, r0
 800bb70:	2801      	cmp	r0, #1
 800bb72:	d110      	bne.n	800bb96 <grid_update+0x466>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 800bb74:	f8bb 2000 	ldrh.w	r2, [fp]
 800bb78:	4638      	mov	r0, r7
 800bb7a:	f011 ff81 	bl	801da80 <lv_obj_get_style_prop>
                uint32_t col_pos = get_col_pos(item);
 800bb7e:	b2c0      	uxtb	r0, r0
                if(col_pos != i) continue;
 800bb80:	4284      	cmp	r4, r0
 800bb82:	d108      	bne.n	800bb96 <grid_update+0x466>
                size = LV_MAX(size, lv_obj_get_width(item));
 800bb84:	4638      	mov	r0, r7
 800bb86:	f010 fe55 	bl	801c834 <lv_obj_get_width>
 800bb8a:	42b0      	cmp	r0, r6
 800bb8c:	db03      	blt.n	800bb96 <grid_update+0x466>
 800bb8e:	4638      	mov	r0, r7
 800bb90:	f010 fe50 	bl	801c834 <lv_obj_get_width>
 800bb94:	4606      	mov	r6, r0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800bb96:	f108 0801 	add.w	r8, r8, #1
 800bb9a:	4650      	mov	r0, sl
 800bb9c:	f012 fb06 	bl	801e1ac <lv_obj_get_child_cnt>
 800bba0:	4580      	cmp	r8, r0
 800bba2:	d3d3      	bcc.n	800bb4c <grid_update+0x41c>
            if(size >= 0) c->w[i] = size;
 800bba4:	2e00      	cmp	r6, #0
 800bba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
            else c->w[i] = 0;
 800bba8:	bfb6      	itet	lt
 800bbaa:	2200      	movlt	r2, #0
            if(size >= 0) c->w[i] = size;
 800bbac:	f823 6014 	strhge.w	r6, [r3, r4, lsl #1]
            else c->w[i] = 0;
 800bbb0:	f823 2014 	strhlt.w	r2, [r3, r4, lsl #1]
    for(i = 0; i < c->col_num; i++) {
 800bbb4:	3401      	adds	r4, #1
 800bbb6:	e6a8      	b.n	800b90a <grid_update+0x1da>
        lv_coord_t x = col_templ[i];
 800bbb8:	f935 2011 	ldrsh.w	r2, [r5, r1, lsl #1]
        if(IS_FR(x)) {
 800bbbc:	4282      	cmp	r2, r0
 800bbbe:	dd05      	ble.n	800bbcc <grid_update+0x49c>
            col_fr_cnt += GET_FR(x);
 800bbc0:	f5a4 54fc 	sub.w	r4, r4, #8064	; 0x1f80
 800bbc4:	3c1b      	subs	r4, #27
 800bbc6:	4414      	add	r4, r2
    for(i = 0; i < c->col_num; i++) {
 800bbc8:	3101      	adds	r1, #1
 800bbca:	e6a7      	b.n	800b91c <grid_update+0x1ec>
            grid_w += c->w[i];
 800bbcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbce:	bf0d      	iteet	eq
 800bbd0:	f833 3011 	ldrheq.w	r3, [r3, r1, lsl #1]
            c->w[i] = x;
 800bbd4:	f823 2011 	strhne.w	r2, [r3, r1, lsl #1]
            grid_w += x;
 800bbd8:	1992      	addne	r2, r2, r6
            grid_w += c->w[i];
 800bbda:	199b      	addeq	r3, r3, r6
            grid_w += x;
 800bbdc:	bf14      	ite	ne
 800bbde:	b213      	sxthne	r3, r2
            grid_w += c->w[i];
 800bbe0:	b21b      	sxtheq	r3, r3
            grid_w += x;
 800bbe2:	e7f1      	b.n	800bbc8 <grid_update+0x498>
        lv_coord_t x = col_templ[i];
 800bbe4:	f935 0011 	ldrsh.w	r0, [r5, r1, lsl #1]
        if(IS_FR(x)) {
 800bbe8:	42b8      	cmp	r0, r7
 800bbea:	dd0b      	ble.n	800bc04 <grid_update+0x4d4>
            lv_coord_t f = GET_FR(x);
 800bbec:	f5a0 52fc 	sub.w	r2, r0, #8064	; 0x1f80
            c->w[i] = (free_w * f) / col_fr_cnt;
 800bbf0:	9e11      	ldr	r6, [sp, #68]	; 0x44
            lv_coord_t f = GET_FR(x);
 800bbf2:	3a1b      	subs	r2, #27
            c->w[i] = (free_w * f) / col_fr_cnt;
 800bbf4:	b292      	uxth	r2, r2
 800bbf6:	fb02 f003 	mul.w	r0, r2, r3
 800bbfa:	fbb0 f0f4 	udiv	r0, r0, r4
 800bbfe:	f826 0011 	strh.w	r0, [r6, r1, lsl #1]
            last_fr_i = i;
 800bc02:	460e      	mov	r6, r1
    for(i = 0; i < c->col_num; i++) {
 800bc04:	3101      	adds	r1, #1
 800bc06:	e6a3      	b.n	800b950 <grid_update+0x220>
        lv_obj_t * item = cont->spec_attr->children[i];
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	9a04      	ldr	r2, [sp, #16]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 800bc0c:	494f      	ldr	r1, [pc, #316]	; (800bd4c <grid_update+0x61c>)
        lv_obj_t * item = cont->spec_attr->children[i];
 800bc0e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 800bc12:	4620      	mov	r0, r4
 800bc14:	f00f ff00 	bl	801ba18 <lv_obj_has_flag_any>
 800bc18:	4605      	mov	r5, r0
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	f040 8165 	bne.w	800beea <grid_update+0x7ba>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 800bc20:	4b4d      	ldr	r3, [pc, #308]	; (800bd58 <grid_update+0x628>)
 800bc22:	4601      	mov	r1, r0
 800bc24:	4620      	mov	r0, r4
 800bc26:	881a      	ldrh	r2, [r3, #0]
 800bc28:	f011 ff2a 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 800bc2c:	4b48      	ldr	r3, [pc, #288]	; (800bd50 <grid_update+0x620>)
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 800bc2e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 800bc30:	4629      	mov	r1, r5
 800bc32:	881a      	ldrh	r2, [r3, #0]
 800bc34:	4620      	mov	r0, r4
 800bc36:	f011 ff23 	bl	801da80 <lv_obj_get_style_prop>
    if(row_span == 0 || col_span == 0) return;
 800bc3a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 800bc3e:	f000 8154 	beq.w	800beea <grid_update+0x7ba>
 800bc42:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800bc46:	f000 8150 	beq.w	800beea <grid_update+0x7ba>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 800bc4a:	4b42      	ldr	r3, [pc, #264]	; (800bd54 <grid_update+0x624>)
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	4620      	mov	r0, r4
 800bc50:	881a      	ldrh	r2, [r3, #0]
 800bc52:	f011 ff15 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 800bc56:	4b3c      	ldr	r3, [pc, #240]	; (800bd48 <grid_update+0x618>)
    uint32_t col_pos = get_col_pos(item);
 800bc58:	fa5f fb80 	uxtb.w	fp, r0
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	881a      	ldrh	r2, [r3, #0]
 800bc60:	4620      	mov	r0, r4
 800bc62:	f011 ff0d 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_x_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_X_ALIGN);
 800bc66:	4b3d      	ldr	r3, [pc, #244]	; (800bd5c <grid_update+0x62c>)
    uint32_t row_pos = get_row_pos(item);
 800bc68:	fa5f f980 	uxtb.w	r9, r0
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	881a      	ldrh	r2, [r3, #0]
 800bc70:	4620      	mov	r0, r4
 800bc72:	f011 ff05 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_y_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_Y_ALIGN);
 800bc76:	4b3a      	ldr	r3, [pc, #232]	; (800bd60 <grid_update+0x630>)
 800bc78:	4629      	mov	r1, r5
    return lv_obj_get_style_grid_cell_x_align(obj, 0);
 800bc7a:	fa5f f880 	uxtb.w	r8, r0
 800bc7e:	881a      	ldrh	r2, [r3, #0]
 800bc80:	4620      	mov	r0, r4
 800bc82:	f011 fefd 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800bc86:	445f      	add	r7, fp
    return lv_obj_get_style_grid_cell_y_align(obj, 0);
 800bc88:	b2c3      	uxtb	r3, r0
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800bc8a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    lv_coord_t col_x1 = c->x[col_pos];
 800bc8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800bc90:	444e      	add	r6, r9
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800bc92:	4417      	add	r7, r2
    return lv_obj_get_style_grid_cell_y_align(obj, 0);
 800bc94:	9306      	str	r3, [sp, #24]
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800bc96:	9b11      	ldr	r3, [sp, #68]	; 0x44
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800bc98:	4416      	add	r6, r2
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800bc9a:	f831 0017 	ldrh.w	r0, [r1, r7, lsl #1]
 800bc9e:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
    lv_coord_t col_w = col_x2 - col_x1;
 800bca2:	f831 101b 	ldrh.w	r1, [r1, fp, lsl #1]
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800bca6:	4403      	add	r3, r0
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800bca8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    lv_coord_t col_w = col_x2 - col_x1;
 800bcaa:	1a5b      	subs	r3, r3, r1
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800bcac:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
    lv_coord_t col_w = col_x2 - col_x1;
 800bcb0:	b299      	uxth	r1, r3
 800bcb2:	b21b      	sxth	r3, r3
 800bcb4:	9108      	str	r1, [sp, #32]
    lv_coord_t row_y1 = c->y[row_pos];
 800bcb6:	9910      	ldr	r1, [sp, #64]	; 0x40
    lv_coord_t col_w = col_x2 - col_x1;
 800bcb8:	9305      	str	r3, [sp, #20]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800bcba:	f831 0016 	ldrh.w	r0, [r1, r6, lsl #1]
    lv_coord_t row_h = row_y2 - row_y1;
 800bcbe:	f831 1019 	ldrh.w	r1, [r1, r9, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800bcc2:	4402      	add	r2, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800bcc4:	4620      	mov	r0, r4
    lv_coord_t row_h = row_y2 - row_y1;
 800bcc6:	1a52      	subs	r2, r2, r1
 800bcc8:	4629      	mov	r1, r5
 800bcca:	b293      	uxth	r3, r2
 800bccc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcce:	b213      	sxth	r3, r2
 800bcd0:	2216      	movs	r2, #22
 800bcd2:	9307      	str	r3, [sp, #28]
 800bcd4:	f011 fed4 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800bcd8:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(item, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800bcda:	9b05      	ldr	r3, [sp, #20]
 800bcdc:	2801      	cmp	r0, #1
 800bcde:	d107      	bne.n	800bcf0 <grid_update+0x5c0>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 800bce0:	f1b8 0f00 	cmp.w	r8, #0
 800bce4:	d02a      	beq.n	800bd3c <grid_update+0x60c>
        else if(col_align == LV_GRID_ALIGN_END) col_align = LV_GRID_ALIGN_START;
 800bce6:	f1b8 0f02 	cmp.w	r8, #2
 800bcea:	bf08      	it	eq
 800bcec:	f04f 0800 	moveq.w	r8, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bcf0:	8b27      	ldrh	r7, [r4, #24]
    switch(col_align) {
 800bcf2:	f1b8 0f02 	cmp.w	r8, #2
 800bcf6:	8aa2      	ldrh	r2, [r4, #20]
 800bcf8:	f107 0701 	add.w	r7, r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bcfc:	8b66      	ldrh	r6, [r4, #26]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bcfe:	eba7 0702 	sub.w	r7, r7, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bd02:	f106 0601 	add.w	r6, r6, #1
 800bd06:	8ae2      	ldrh	r2, [r4, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bd08:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bd0a:	eba6 0602 	sub.w	r6, r6, r2
            x = c->x[col_pos];
 800bd0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd10:	f932 101b 	ldrsh.w	r1, [r2, fp, lsl #1]
 800bd14:	b236      	sxth	r6, r6
            x = c->x[col_pos] + (col_w - item_w) / 2;
 800bd16:	f832 201b 	ldrh.w	r2, [r2, fp, lsl #1]
            x = c->x[col_pos];
 800bd1a:	9105      	str	r1, [sp, #20]
    switch(col_align) {
 800bd1c:	d022      	beq.n	800bd64 <grid_update+0x634>
 800bd1e:	f1b8 0f03 	cmp.w	r8, #3
 800bd22:	d02b      	beq.n	800bd7c <grid_update+0x64c>
 800bd24:	f1b8 0f01 	cmp.w	r8, #1
 800bd28:	d106      	bne.n	800bd38 <grid_update+0x608>
            x = c->x[col_pos] + (col_w - item_w) / 2;
 800bd2a:	1bdb      	subs	r3, r3, r7
 800bd2c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800bd30:	eb02 0263 	add.w	r2, r2, r3, asr #1
 800bd34:	b213      	sxth	r3, r2
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 800bd36:	9305      	str	r3, [sp, #20]
    switch(col_align) {
 800bd38:	2300      	movs	r3, #0
 800bd3a:	e021      	b.n	800bd80 <grid_update+0x650>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 800bd3c:	f04f 0802 	mov.w	r8, #2
 800bd40:	e7d6      	b.n	800bcf0 <grid_update+0x5c0>
 800bd42:	bf00      	nop
 800bd44:	ffffe001 	.word	0xffffe001
 800bd48:	24010d04 	.word	0x24010d04
 800bd4c:	00060001 	.word	0x00060001
 800bd50:	24010d02 	.word	0x24010d02
 800bd54:	24010d0a 	.word	0x24010d0a
 800bd58:	24010d08 	.word	0x24010d08
 800bd5c:	24010d06 	.word	0x24010d06
 800bd60:	24010d00 	.word	0x24010d00
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 800bd64:	9b08      	ldr	r3, [sp, #32]
 800bd66:	4620      	mov	r0, r4
 800bd68:	441a      	add	r2, r3
 800bd6a:	fa1f f882 	uxth.w	r8, r2
 800bd6e:	f010 fd61 	bl	801c834 <lv_obj_get_width>
 800bd72:	eba8 0800 	sub.w	r8, r8, r0
 800bd76:	fa0f f388 	sxth.w	r3, r8
 800bd7a:	e7dc      	b.n	800bd36 <grid_update+0x606>
            item_w = col_w;
 800bd7c:	461f      	mov	r7, r3
    switch(col_align) {
 800bd7e:	2301      	movs	r3, #1
            item->w_layout = 0;
 800bd80:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800bd84:	f363 0282 	bfi	r2, r3, #2, #1
 800bd88:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
    switch(row_align) {
 800bd8c:	9a06      	ldr	r2, [sp, #24]
            y = c->y[row_pos];
 800bd8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    switch(row_align) {
 800bd90:	2a02      	cmp	r2, #2
            y = c->y[row_pos];
 800bd92:	f933 8019 	ldrsh.w	r8, [r3, r9, lsl #1]
            y = c->y[row_pos] + (row_h - item_h) / 2;
 800bd96:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
    switch(row_align) {
 800bd9a:	f000 80a9 	beq.w	800bef0 <grid_update+0x7c0>
 800bd9e:	2a03      	cmp	r2, #3
 800bda0:	f000 80b2 	beq.w	800bf08 <grid_update+0x7d8>
 800bda4:	2a01      	cmp	r2, #1
 800bda6:	d107      	bne.n	800bdb8 <grid_update+0x688>
            y = c->y[row_pos] + (row_h - item_h) / 2;
 800bda8:	9a07      	ldr	r2, [sp, #28]
 800bdaa:	1b92      	subs	r2, r2, r6
 800bdac:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800bdb0:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800bdb4:	fa0f f883 	sxth.w	r8, r3
            item->h_layout = 0;
 800bdb8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 800bdbc:	4620      	mov	r0, r4
            item->h_layout = 0;
 800bdbe:	f365 0341 	bfi	r3, r5, #1, #1
 800bdc2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 800bdc6:	f010 fd35 	bl	801c834 <lv_obj_get_width>
 800bdca:	42b8      	cmp	r0, r7
 800bdcc:	f000 809f 	beq.w	800bf0e <grid_update+0x7de>
    dest->x1 = src->x1;
 800bdd0:	8aa3      	ldrh	r3, [r4, #20]
        lv_area_copy(&old_coords, &item->coords);
 800bdd2:	f104 0514 	add.w	r5, r4, #20
        lv_obj_invalidate(item);
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    dest->y1 = src->y1;
 800bddc:	8ae3      	ldrh	r3, [r4, #22]
 800bdde:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    dest->x2 = src->x2;
 800bde2:	8b23      	ldrh	r3, [r4, #24]
 800bde4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    dest->y2 = src->y2;
 800bde8:	8b63      	ldrh	r3, [r4, #26]
 800bdea:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800bdee:	f010 ff21 	bl	801cc34 <lv_obj_invalidate>
        lv_area_set_width(&item->coords, item_w);
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f018 fa04 	bl	8024202 <lv_area_set_width>
        lv_area_set_height(&item->coords, item_h);
 800bdfa:	4631      	mov	r1, r6
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	f018 fa05 	bl	802420c <lv_area_set_height>
        lv_obj_invalidate(item);
 800be02:	4620      	mov	r0, r4
 800be04:	f010 ff16 	bl	801cc34 <lv_obj_invalidate>
        lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 800be08:	aa0a      	add	r2, sp, #40	; 0x28
 800be0a:	2129      	movs	r1, #41	; 0x29
 800be0c:	4620      	mov	r0, r4
 800be0e:	f7f8 fc65 	bl	80046dc <lv_event_send>
        lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 800be12:	4620      	mov	r0, r4
 800be14:	f012 f9b8 	bl	801e188 <lv_obj_get_parent>
 800be18:	4622      	mov	r2, r4
 800be1a:	2122      	movs	r1, #34	; 0x22
 800be1c:	f7f8 fc5e 	bl	80046dc <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800be20:	226a      	movs	r2, #106	; 0x6a
 800be22:	2100      	movs	r1, #0
 800be24:	4620      	mov	r0, r4
 800be26:	f011 fe2b 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800be2a:	226b      	movs	r2, #107	; 0x6b
 800be2c:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 800be2e:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800be30:	4620      	mov	r0, r4
 800be32:	f011 fe25 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800be36:	b207      	sxth	r7, r0
    lv_coord_t w = lv_obj_get_width(item);
 800be38:	4620      	mov	r0, r4
 800be3a:	f010 fcfb 	bl	801c834 <lv_obj_get_width>
 800be3e:	4605      	mov	r5, r0
    lv_coord_t h = lv_obj_get_height(item);
 800be40:	4620      	mov	r0, r4
 800be42:	f010 fcfd 	bl	801c840 <lv_obj_get_height>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800be46:	f406 43c0 	and.w	r3, r6, #24576	; 0x6000
 800be4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be4e:	d10e      	bne.n	800be6e <grid_update+0x73e>
 800be50:	f426 43c0 	bic.w	r3, r6, #24576	; 0x6000
 800be54:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800be58:	dc09      	bgt.n	800be6e <grid_update+0x73e>
 800be5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be5e:	bfc8      	it	gt
 800be60:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 800be64:	435d      	muls	r5, r3
 800be66:	2364      	movs	r3, #100	; 0x64
 800be68:	fb95 f5f3 	sdiv	r5, r5, r3
 800be6c:	b22e      	sxth	r6, r5
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800be6e:	f407 43c0 	and.w	r3, r7, #24576	; 0x6000
 800be72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be76:	d10e      	bne.n	800be96 <grid_update+0x766>
 800be78:	f427 43c0 	bic.w	r3, r7, #24576	; 0x6000
 800be7c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800be80:	dc09      	bgt.n	800be96 <grid_update+0x766>
 800be82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be86:	bfc8      	it	gt
 800be88:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 800be8c:	4358      	muls	r0, r3
 800be8e:	2364      	movs	r3, #100	; 0x64
 800be90:	fb90 f0f3 	sdiv	r0, r0, r3
 800be94:	b207      	sxth	r7, r0
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 800be96:	8aa3      	ldrh	r3, [r4, #20]
 800be98:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800be9c:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 800bea0:	1aed      	subs	r5, r5, r3
 800bea2:	9b05      	ldr	r3, [sp, #20]
 800bea4:	441d      	add	r5, r3
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800bea6:	8ae3      	ldrh	r3, [r4, #22]
 800bea8:	1ac0      	subs	r0, r0, r3
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 800beaa:	4435      	add	r5, r6
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800beac:	4440      	add	r0, r8
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 800beae:	b2ad      	uxth	r5, r5
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800beb0:	4438      	add	r0, r7
 800beb2:	b286      	uxth	r6, r0
    if(diff_x || diff_y) {
 800beb4:	ea55 0306 	orrs.w	r3, r5, r6
 800beb8:	d017      	beq.n	800beea <grid_update+0x7ba>
        lv_obj_invalidate(item);
 800beba:	4620      	mov	r0, r4
 800bebc:	f010 feba 	bl	801cc34 <lv_obj_invalidate>
        item->coords.x1 += diff_x;
 800bec0:	8aa3      	ldrh	r3, [r4, #20]
        lv_obj_invalidate(item);
 800bec2:	4620      	mov	r0, r4
        item->coords.x1 += diff_x;
 800bec4:	442b      	add	r3, r5
 800bec6:	82a3      	strh	r3, [r4, #20]
        item->coords.x2 += diff_x;
 800bec8:	8b23      	ldrh	r3, [r4, #24]
 800beca:	442b      	add	r3, r5
 800becc:	8323      	strh	r3, [r4, #24]
        item->coords.y1 += diff_y;
 800bece:	8ae3      	ldrh	r3, [r4, #22]
 800bed0:	4433      	add	r3, r6
 800bed2:	82e3      	strh	r3, [r4, #22]
        item->coords.y2 += diff_y;
 800bed4:	8b63      	ldrh	r3, [r4, #26]
 800bed6:	4433      	add	r3, r6
 800bed8:	8363      	strh	r3, [r4, #26]
        lv_obj_invalidate(item);
 800beda:	f010 feab 	bl	801cc34 <lv_obj_invalidate>
        lv_obj_move_children_by(item, diff_x, diff_y, false);
 800bede:	2300      	movs	r3, #0
 800bee0:	b232      	sxth	r2, r6
 800bee2:	4620      	mov	r0, r4
 800bee4:	b229      	sxth	r1, r5
 800bee6:	f010 fd34 	bl	801c952 <lv_obj_move_children_by>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 800beea:	9b04      	ldr	r3, [sp, #16]
 800beec:	3301      	adds	r3, #1
 800beee:	e470      	b.n	800b7d2 <grid_update+0xa2>
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 800bef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bef2:	4620      	mov	r0, r4
 800bef4:	4413      	add	r3, r2
 800bef6:	fa1f f883 	uxth.w	r8, r3
 800befa:	f010 fca1 	bl	801c840 <lv_obj_get_height>
 800befe:	eba8 0800 	sub.w	r8, r8, r0
 800bf02:	fa0f f888 	sxth.w	r8, r8
            break;
 800bf06:	e757      	b.n	800bdb8 <grid_update+0x688>
            item_h = row_h;
 800bf08:	9e07      	ldr	r6, [sp, #28]
    switch(row_align) {
 800bf0a:	2501      	movs	r5, #1
 800bf0c:	e754      	b.n	800bdb8 <grid_update+0x688>
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f010 fc96 	bl	801c840 <lv_obj_get_height>
 800bf14:	42b0      	cmp	r0, r6
 800bf16:	f47f af5b 	bne.w	800bdd0 <grid_update+0x6a0>
 800bf1a:	e781      	b.n	800be20 <grid_update+0x6f0>

0800bf1c <lv_grid_init>:
{
 800bf1c:	b508      	push	{r3, lr}
    LV_LAYOUT_GRID = lv_layout_register(grid_update, NULL);
 800bf1e:	2100      	movs	r1, #0
 800bf20:	481b      	ldr	r0, [pc, #108]	; (800bf90 <lv_grid_init+0x74>)
 800bf22:	f7f8 ffd5 	bl	8004ed0 <lv_layout_register>
 800bf26:	4b1b      	ldr	r3, [pc, #108]	; (800bf94 <lv_grid_init+0x78>)
 800bf28:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_DSC_ARRAY = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bf2a:	2004      	movs	r0, #4
 800bf2c:	f006 fc86 	bl	801283c <lv_style_register_prop>
 800bf30:	4b19      	ldr	r3, [pc, #100]	; (800bf98 <lv_grid_init+0x7c>)
 800bf32:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_DSC_ARRAY = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bf34:	2004      	movs	r0, #4
 800bf36:	f006 fc81 	bl	801283c <lv_style_register_prop>
 800bf3a:	4b18      	ldr	r3, [pc, #96]	; (800bf9c <lv_grid_init+0x80>)
 800bf3c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bf3e:	2004      	movs	r0, #4
 800bf40:	f006 fc7c 	bl	801283c <lv_style_register_prop>
 800bf44:	4b16      	ldr	r3, [pc, #88]	; (800bfa0 <lv_grid_init+0x84>)
 800bf46:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bf48:	2004      	movs	r0, #4
 800bf4a:	f006 fc77 	bl	801283c <lv_style_register_prop>
 800bf4e:	4b15      	ldr	r3, [pc, #84]	; (800bfa4 <lv_grid_init+0x88>)
 800bf50:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_SPAN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bf52:	2004      	movs	r0, #4
 800bf54:	f006 fc72 	bl	801283c <lv_style_register_prop>
 800bf58:	4b13      	ldr	r3, [pc, #76]	; (800bfa8 <lv_grid_init+0x8c>)
 800bf5a:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_POS = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bf5c:	2004      	movs	r0, #4
 800bf5e:	f006 fc6d 	bl	801283c <lv_style_register_prop>
 800bf62:	4b12      	ldr	r3, [pc, #72]	; (800bfac <lv_grid_init+0x90>)
 800bf64:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_SPAN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bf66:	2004      	movs	r0, #4
 800bf68:	f006 fc68 	bl	801283c <lv_style_register_prop>
 800bf6c:	4b10      	ldr	r3, [pc, #64]	; (800bfb0 <lv_grid_init+0x94>)
 800bf6e:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_POS = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bf70:	2004      	movs	r0, #4
 800bf72:	f006 fc63 	bl	801283c <lv_style_register_prop>
 800bf76:	4b0f      	ldr	r3, [pc, #60]	; (800bfb4 <lv_grid_init+0x98>)
 800bf78:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_X_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bf7a:	2004      	movs	r0, #4
 800bf7c:	f006 fc5e 	bl	801283c <lv_style_register_prop>
 800bf80:	4b0d      	ldr	r3, [pc, #52]	; (800bfb8 <lv_grid_init+0x9c>)
 800bf82:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_Y_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 800bf84:	2004      	movs	r0, #4
 800bf86:	f006 fc59 	bl	801283c <lv_style_register_prop>
 800bf8a:	4b0c      	ldr	r3, [pc, #48]	; (800bfbc <lv_grid_init+0xa0>)
 800bf8c:	8018      	strh	r0, [r3, #0]
}
 800bf8e:	bd08      	pop	{r3, pc}
 800bf90:	0800b731 	.word	0x0800b731
 800bf94:	24010d14 	.word	0x24010d14
 800bf98:	24010d12 	.word	0x24010d12
 800bf9c:	24010d0e 	.word	0x24010d0e
 800bfa0:	24010d10 	.word	0x24010d10
 800bfa4:	24010d0c 	.word	0x24010d0c
 800bfa8:	24010d02 	.word	0x24010d02
 800bfac:	24010d04 	.word	0x24010d04
 800bfb0:	24010d08 	.word	0x24010d08
 800bfb4:	24010d0a 	.word	0x24010d0a
 800bfb8:	24010d06 	.word	0x24010d06
 800bfbc:	24010d00 	.word	0x24010d00

0800bfc0 <theme_apply>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
}


static void theme_apply(lv_theme_t * th, lv_obj_t * obj)
{
 800bfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LV_UNUSED(th);

    if(lv_obj_get_parent(obj) == NULL) {
 800bfc4:	4608      	mov	r0, r1
{
 800bfc6:	460c      	mov	r4, r1
    if(lv_obj_get_parent(obj) == NULL) {
 800bfc8:	f012 f8de 	bl	801e188 <lv_obj_get_parent>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	b968      	cbnz	r0, 800bfec <theme_apply+0x2c>
        lv_obj_add_style(obj, &styles->scr, 0);
 800bfd0:	4daf      	ldr	r5, [pc, #700]	; (800c290 <theme_apply+0x2d0>)
 800bfd2:	6829      	ldr	r1, [r5, #0]
    }
#endif
#if LV_USE_LIST
    else if(lv_obj_check_type(obj, &lv_list_class)) {
        lv_obj_add_style(obj, &styles->card, 0);
        lv_obj_add_style(obj, &styles->list_bg, 0);
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f011 fe16 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scr, 0);
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
    }
    else if(lv_obj_check_type(obj, &lv_tileview_tile_class)) {
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800bfda:	6829      	ldr	r1, [r5, #0]
 800bfdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	3108      	adds	r1, #8
 800bfe4:	f011 fe0f 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 800bfe8:	6829      	ldr	r1, [r5, #0]
 800bfea:	e027      	b.n	800c03c <theme_apply+0x7c>
    if(lv_obj_check_type(obj, &lv_obj_class)) {
 800bfec:	49a9      	ldr	r1, [pc, #676]	; (800c294 <theme_apply+0x2d4>)
 800bfee:	4620      	mov	r0, r4
 800bff0:	f00f feb8 	bl	801bd64 <lv_obj_check_type>
 800bff4:	4606      	mov	r6, r0
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d061      	beq.n	800c0be <theme_apply+0xfe>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800bffa:	4620      	mov	r0, r4
 800bffc:	f012 f8c4 	bl	801e188 <lv_obj_get_parent>
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
 800c000:	49a5      	ldr	r1, [pc, #660]	; (800c298 <theme_apply+0x2d8>)
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800c002:	4606      	mov	r6, r0
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
 800c004:	f00f feae 	bl	801bd64 <lv_obj_check_type>
 800c008:	4605      	mov	r5, r0
 800c00a:	2800      	cmp	r0, #0
 800c00c:	f040 80b0 	bne.w	800c170 <theme_apply+0x1b0>
        else if(lv_obj_check_type(lv_obj_get_parent(parent), &lv_tabview_class)) {
 800c010:	4630      	mov	r0, r6
 800c012:	f012 f8b9 	bl	801e188 <lv_obj_get_parent>
 800c016:	49a0      	ldr	r1, [pc, #640]	; (800c298 <theme_apply+0x2d8>)
 800c018:	f00f fea4 	bl	801bd64 <lv_obj_check_type>
 800c01c:	b1a8      	cbz	r0, 800c04a <theme_apply+0x8a>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 800c01e:	4e9c      	ldr	r6, [pc, #624]	; (800c290 <theme_apply+0x2d0>)
 800c020:	462a      	mov	r2, r5
 800c022:	6831      	ldr	r1, [r6, #0]
 800c024:	3180      	adds	r1, #128	; 0x80
 800c026:	4620      	mov	r0, r4
 800c028:	f011 fded 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800c02c:	6831      	ldr	r1, [r6, #0]
 800c02e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c032:	4620      	mov	r0, r4
 800c034:	3108      	adds	r1, #8
 800c036:	f011 fde6 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 800c03a:	6831      	ldr	r1, [r6, #0]
 800c03c:	4a97      	ldr	r2, [pc, #604]	; (800c29c <theme_apply+0x2dc>)
 800c03e:	3110      	adds	r1, #16
    }
#endif

#if LV_USE_LED
    else if(lv_obj_check_type(obj, &lv_led_class)) {
        lv_obj_add_style(obj, &styles->led, 0);
 800c040:	4620      	mov	r0, r4
    }
#endif
}
 800c042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_add_style(obj, &styles->led, 0);
 800c046:	f011 bdde 	b.w	801dc06 <lv_obj_add_style>
        if(lv_obj_get_index(obj) == 0 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 800c04a:	4620      	mov	r0, r4
 800c04c:	f012 f8b2 	bl	801e1b4 <lv_obj_get_index>
 800c050:	4605      	mov	r5, r0
 800c052:	b988      	cbnz	r0, 800c078 <theme_apply+0xb8>
 800c054:	4620      	mov	r0, r4
 800c056:	f012 f897 	bl	801e188 <lv_obj_get_parent>
 800c05a:	4991      	ldr	r1, [pc, #580]	; (800c2a0 <theme_apply+0x2e0>)
 800c05c:	f00f fe82 	bl	801bd64 <lv_obj_check_type>
 800c060:	b150      	cbz	r0, 800c078 <theme_apply+0xb8>
            lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 800c062:	4e8b      	ldr	r6, [pc, #556]	; (800c290 <theme_apply+0x2d0>)
 800c064:	462a      	mov	r2, r5
 800c066:	4620      	mov	r0, r4
 800c068:	6831      	ldr	r1, [r6, #0]
 800c06a:	3148      	adds	r1, #72	; 0x48
 800c06c:	f011 fdcb 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_tiny, 0);
 800c070:	6831      	ldr	r1, [r6, #0]
 800c072:	462a      	mov	r2, r5
 800c074:	3170      	adds	r1, #112	; 0x70
 800c076:	e7e3      	b.n	800c040 <theme_apply+0x80>
        else if(lv_obj_get_index(obj) == 1 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 800c078:	4620      	mov	r0, r4
 800c07a:	f012 f89b 	bl	801e1b4 <lv_obj_get_index>
 800c07e:	2801      	cmp	r0, #1
 800c080:	d110      	bne.n	800c0a4 <theme_apply+0xe4>
 800c082:	4620      	mov	r0, r4
 800c084:	f012 f880 	bl	801e188 <lv_obj_get_parent>
 800c088:	4985      	ldr	r1, [pc, #532]	; (800c2a0 <theme_apply+0x2e0>)
 800c08a:	f00f fe6b 	bl	801bd64 <lv_obj_check_type>
 800c08e:	b148      	cbz	r0, 800c0a4 <theme_apply+0xe4>
            lv_obj_add_style(obj, &styles->scr, 0);
 800c090:	4d7f      	ldr	r5, [pc, #508]	; (800c290 <theme_apply+0x2d0>)
 800c092:	2200      	movs	r2, #0
 800c094:	4620      	mov	r0, r4
 800c096:	6829      	ldr	r1, [r5, #0]
 800c098:	f011 fdb5 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 800c09c:	6829      	ldr	r1, [r5, #0]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	3180      	adds	r1, #128	; 0x80
 800c0a2:	e797      	b.n	800bfd4 <theme_apply+0x14>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_calendar_class)) {
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f012 f86f 	bl	801e188 <lv_obj_get_parent>
 800c0aa:	497e      	ldr	r1, [pc, #504]	; (800c2a4 <theme_apply+0x2e4>)
 800c0ac:	f00f fe5a 	bl	801bd64 <lv_obj_check_type>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d15c      	bne.n	800c170 <theme_apply+0x1b0>
        lv_obj_add_style(obj, &styles->card, 0);
 800c0b6:	4d76      	ldr	r5, [pc, #472]	; (800c290 <theme_apply+0x2d0>)
 800c0b8:	6829      	ldr	r1, [r5, #0]
 800c0ba:	3118      	adds	r1, #24
 800c0bc:	e78a      	b.n	800bfd4 <theme_apply+0x14>
    else if(lv_obj_check_type(obj, &lv_btn_class)) {
 800c0be:	497a      	ldr	r1, [pc, #488]	; (800c2a8 <theme_apply+0x2e8>)
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f00f fe4f 	bl	801bd64 <lv_obj_check_type>
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d053      	beq.n	800c174 <theme_apply+0x1b4>
        lv_obj_add_style(obj, &styles->btn, 0);
 800c0cc:	4d70      	ldr	r5, [pc, #448]	; (800c290 <theme_apply+0x2d0>)
 800c0ce:	4632      	mov	r2, r6
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	6829      	ldr	r1, [r5, #0]
 800c0d4:	3120      	adds	r1, #32
 800c0d6:	f011 fd96 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, 0);
 800c0da:	6829      	ldr	r1, [r5, #0]
 800c0dc:	4632      	mov	r2, r6
 800c0de:	4620      	mov	r0, r4
 800c0e0:	3128      	adds	r1, #40	; 0x28
 800c0e2:	f011 fd90 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 800c0e6:	6829      	ldr	r1, [r5, #0]
 800c0e8:	4632      	mov	r2, r6
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	31d0      	adds	r1, #208	; 0xd0
 800c0ee:	f011 fd8a 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 800c0f2:	6829      	ldr	r1, [r5, #0]
 800c0f4:	2220      	movs	r2, #32
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	3158      	adds	r1, #88	; 0x58
 800c0fa:	f011 fd84 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 800c0fe:	6829      	ldr	r1, [r5, #0]
 800c100:	2220      	movs	r2, #32
 800c102:	4620      	mov	r0, r4
 800c104:	31d8      	adds	r1, #216	; 0xd8
 800c106:	f011 fd7e 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c10a:	6829      	ldr	r1, [r5, #0]
 800c10c:	2204      	movs	r2, #4
 800c10e:	4620      	mov	r0, r4
 800c110:	31a0      	adds	r1, #160	; 0xa0
 800c112:	f011 fd78 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_STATE_PRESSED);
 800c116:	6829      	ldr	r1, [r5, #0]
 800c118:	2220      	movs	r2, #32
 800c11a:	4620      	mov	r0, r4
 800c11c:	31c8      	adds	r1, #200	; 0xc8
 800c11e:	f011 fd72 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_STATE_CHECKED);
 800c122:	6829      	ldr	r1, [r5, #0]
 800c124:	2201      	movs	r2, #1
 800c126:	4620      	mov	r0, r4
 800c128:	3138      	adds	r1, #56	; 0x38
 800c12a:	f011 fd6c 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 800c12e:	6829      	ldr	r1, [r5, #0]
 800c130:	2280      	movs	r2, #128	; 0x80
 800c132:	4620      	mov	r0, r4
 800c134:	3160      	adds	r1, #96	; 0x60
 800c136:	f011 fd66 	bl	801dc06 <lv_obj_add_style>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_sidebar_header_cont_class) ||
 800c13a:	4620      	mov	r0, r4
 800c13c:	f012 f824 	bl	801e188 <lv_obj_get_parent>
 800c140:	495a      	ldr	r1, [pc, #360]	; (800c2ac <theme_apply+0x2ec>)
 800c142:	f00f fe0f 	bl	801bd64 <lv_obj_check_type>
 800c146:	b158      	cbz	r0, 800c160 <theme_apply+0x1a0>
            lv_obj_add_style(obj, &styles->menu_header_btn, 0);
 800c148:	6829      	ldr	r1, [r5, #0]
 800c14a:	2200      	movs	r2, #0
 800c14c:	4620      	mov	r0, r4
 800c14e:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
 800c152:	f011 fd58 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->menu_pressed, LV_STATE_PRESSED);
 800c156:	6829      	ldr	r1, [r5, #0]
 800c158:	2220      	movs	r2, #32
 800c15a:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
 800c15e:	e76f      	b.n	800c040 <theme_apply+0x80>
           lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_main_header_cont_class)) {
 800c160:	4620      	mov	r0, r4
 800c162:	f012 f811 	bl	801e188 <lv_obj_get_parent>
 800c166:	4952      	ldr	r1, [pc, #328]	; (800c2b0 <theme_apply+0x2f0>)
 800c168:	f00f fdfc 	bl	801bd64 <lv_obj_check_type>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_sidebar_header_cont_class) ||
 800c16c:	2800      	cmp	r0, #0
 800c16e:	d1eb      	bne.n	800c148 <theme_apply+0x188>
}
 800c170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(lv_obj_check_type(obj, &lv_line_class)) {
 800c174:	494f      	ldr	r1, [pc, #316]	; (800c2b4 <theme_apply+0x2f4>)
 800c176:	4620      	mov	r0, r4
 800c178:	f00f fdf4 	bl	801bd64 <lv_obj_check_type>
 800c17c:	4607      	mov	r7, r0
 800c17e:	b128      	cbz	r0, 800c18c <theme_apply+0x1cc>
        lv_obj_add_style(obj, &styles->line, 0);
 800c180:	4b43      	ldr	r3, [pc, #268]	; (800c290 <theme_apply+0x2d0>)
 800c182:	462a      	mov	r2, r5
 800c184:	6819      	ldr	r1, [r3, #0]
 800c186:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800c18a:	e759      	b.n	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_btnmatrix_class)) {
 800c18c:	494a      	ldr	r1, [pc, #296]	; (800c2b8 <theme_apply+0x2f8>)
 800c18e:	4620      	mov	r0, r4
 800c190:	f00f fde8 	bl	801bd64 <lv_obj_check_type>
 800c194:	4606      	mov	r6, r0
 800c196:	2800      	cmp	r0, #0
 800c198:	f000 80fc 	beq.w	800c394 <theme_apply+0x3d4>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_msgbox_class)) {
 800c19c:	4620      	mov	r0, r4
 800c19e:	4d3c      	ldr	r5, [pc, #240]	; (800c290 <theme_apply+0x2d0>)
 800c1a0:	f011 fff2 	bl	801e188 <lv_obj_get_parent>
 800c1a4:	4945      	ldr	r1, [pc, #276]	; (800c2bc <theme_apply+0x2fc>)
 800c1a6:	f00f fddd 	bl	801bd64 <lv_obj_check_type>
 800c1aa:	4680      	mov	r8, r0
 800c1ac:	b378      	cbz	r0, 800c20e <theme_apply+0x24e>
            lv_obj_add_style(obj, &styles->msgbox_btn_bg, 0);
 800c1ae:	6829      	ldr	r1, [r5, #0]
 800c1b0:	463a      	mov	r2, r7
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 800c1b8:	f011 fd25 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_gap, 0);
 800c1bc:	6829      	ldr	r1, [r5, #0]
 800c1be:	463a      	mov	r2, r7
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	3188      	adds	r1, #136	; 0x88
 800c1c4:	f011 fd1f 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 800c1c8:	6829      	ldr	r1, [r5, #0]
 800c1ca:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	3120      	adds	r1, #32
 800c1d2:	f011 fd18 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 800c1d6:	6829      	ldr	r1, [r5, #0]
 800c1d8:	4a39      	ldr	r2, [pc, #228]	; (800c2c0 <theme_apply+0x300>)
 800c1da:	4620      	mov	r0, r4
 800c1dc:	3158      	adds	r1, #88	; 0x58
 800c1de:	f011 fd12 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 800c1e2:	6829      	ldr	r1, [r5, #0]
 800c1e4:	4a37      	ldr	r2, [pc, #220]	; (800c2c4 <theme_apply+0x304>)
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	3160      	adds	r1, #96	; 0x60
 800c1ea:	f011 fd0c 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 800c1ee:	6829      	ldr	r1, [r5, #0]
 800c1f0:	4a35      	ldr	r2, [pc, #212]	; (800c2c8 <theme_apply+0x308>)
 800c1f2:	3128      	adds	r1, #40	; 0x28
        lv_obj_add_style(obj, &styles->bg_color_grey, LV_PART_ITEMS | LV_STATE_CHECKED);
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f011 fd06 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 800c1fa:	6829      	ldr	r1, [r5, #0]
 800c1fc:	4a33      	ldr	r2, [pc, #204]	; (800c2cc <theme_apply+0x30c>)
 800c1fe:	4620      	mov	r0, r4
 800c200:	3130      	adds	r1, #48	; 0x30
 800c202:	f011 fd00 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary_muted, LV_PART_ITEMS | LV_STATE_EDITED);
 800c206:	6829      	ldr	r1, [r5, #0]
 800c208:	4a31      	ldr	r2, [pc, #196]	; (800c2d0 <theme_apply+0x310>)
 800c20a:	3140      	adds	r1, #64	; 0x40
 800c20c:	e718      	b.n	800c040 <theme_apply+0x80>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_tabview_class)) {
 800c20e:	4620      	mov	r0, r4
 800c210:	f011 ffba 	bl	801e188 <lv_obj_get_parent>
 800c214:	4920      	ldr	r1, [pc, #128]	; (800c298 <theme_apply+0x2d8>)
 800c216:	f00f fda5 	bl	801bd64 <lv_obj_check_type>
 800c21a:	4606      	mov	r6, r0
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d059      	beq.n	800c2d4 <theme_apply+0x314>
            lv_obj_add_style(obj, &styles->bg_color_white, 0);
 800c220:	6829      	ldr	r1, [r5, #0]
 800c222:	4642      	mov	r2, r8
 800c224:	4620      	mov	r0, r4
 800c226:	3150      	adds	r1, #80	; 0x50
 800c228:	f011 fced 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c22c:	6829      	ldr	r1, [r5, #0]
 800c22e:	2204      	movs	r2, #4
 800c230:	4620      	mov	r0, r4
 800c232:	31a0      	adds	r1, #160	; 0xa0
 800c234:	f011 fce7 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_STATE_FOCUS_KEY);
 800c238:	6829      	ldr	r1, [r5, #0]
 800c23a:	2204      	movs	r2, #4
 800c23c:	4620      	mov	r0, r4
 800c23e:	f501 710c 	add.w	r1, r1, #560	; 0x230
 800c242:	f011 fce0 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 800c246:	6829      	ldr	r1, [r5, #0]
 800c248:	4a1d      	ldr	r2, [pc, #116]	; (800c2c0 <theme_apply+0x300>)
 800c24a:	4620      	mov	r0, r4
 800c24c:	3158      	adds	r1, #88	; 0x58
 800c24e:	f011 fcda 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_CHECKED);
 800c252:	6829      	ldr	r1, [r5, #0]
 800c254:	4a1c      	ldr	r2, [pc, #112]	; (800c2c8 <theme_apply+0x308>)
 800c256:	4620      	mov	r0, r4
 800c258:	3130      	adds	r1, #48	; 0x30
 800c25a:	f011 fcd4 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_btn, LV_PART_ITEMS | LV_STATE_CHECKED);
 800c25e:	6829      	ldr	r1, [r5, #0]
 800c260:	4a19      	ldr	r2, [pc, #100]	; (800c2c8 <theme_apply+0x308>)
 800c262:	4620      	mov	r0, r4
 800c264:	f501 710e 	add.w	r1, r1, #568	; 0x238
 800c268:	f011 fccd 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 800c26c:	6829      	ldr	r1, [r5, #0]
 800c26e:	4a17      	ldr	r2, [pc, #92]	; (800c2cc <theme_apply+0x30c>)
 800c270:	4620      	mov	r0, r4
 800c272:	31a0      	adds	r1, #160	; 0xa0
 800c274:	f011 fcc7 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 800c278:	6829      	ldr	r1, [r5, #0]
 800c27a:	4a15      	ldr	r2, [pc, #84]	; (800c2d0 <theme_apply+0x310>)
 800c27c:	4620      	mov	r0, r4
 800c27e:	31a8      	adds	r1, #168	; 0xa8
 800c280:	f011 fcc1 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 800c284:	6829      	ldr	r1, [r5, #0]
 800c286:	4a11      	ldr	r2, [pc, #68]	; (800c2cc <theme_apply+0x30c>)
 800c288:	f501 710c 	add.w	r1, r1, #560	; 0x230
 800c28c:	e6d8      	b.n	800c040 <theme_apply+0x80>
 800c28e:	bf00      	nop
 800c290:	240011d0 	.word	0x240011d0
 800c294:	08028db8 	.word	0x08028db8
 800c298:	08029330 	.word	0x08029330
 800c29c:	00010040 	.word	0x00010040
 800c2a0:	08029384 	.word	0x08029384
 800c2a4:	08028dfc 	.word	0x08028dfc
 800c2a8:	08029934 	.word	0x08029934
 800c2ac:	080291a8 	.word	0x080291a8
 800c2b0:	080291c4 	.word	0x080291c4
 800c2b4:	080299f8 	.word	0x080299f8
 800c2b8:	08029950 	.word	0x08029950
 800c2bc:	080292dc 	.word	0x080292dc
 800c2c0:	00050020 	.word	0x00050020
 800c2c4:	00050080 	.word	0x00050080
 800c2c8:	00050001 	.word	0x00050001
 800c2cc:	00050004 	.word	0x00050004
 800c2d0:	00050008 	.word	0x00050008
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_calendar_class)) {
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f011 ff57 	bl	801e188 <lv_obj_get_parent>
 800c2da:	49b6      	ldr	r1, [pc, #728]	; (800c5b4 <theme_apply+0x5f4>)
 800c2dc:	f00f fd42 	bl	801bd64 <lv_obj_check_type>
            lv_obj_add_style(obj, &styles->calendar_btnm_bg, 0);
 800c2e0:	6829      	ldr	r1, [r5, #0]
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_calendar_class)) {
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	b378      	cbz	r0, 800c346 <theme_apply+0x386>
            lv_obj_add_style(obj, &styles->calendar_btnm_bg, 0);
 800c2e6:	4632      	mov	r2, r6
 800c2e8:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f011 fc8a 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c2f2:	6829      	ldr	r1, [r5, #0]
 800c2f4:	2204      	movs	r2, #4
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	31a0      	adds	r1, #160	; 0xa0
 800c2fa:	f011 fc84 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c2fe:	6829      	ldr	r1, [r5, #0]
 800c300:	2208      	movs	r2, #8
 800c302:	4620      	mov	r0, r4
 800c304:	31a8      	adds	r1, #168	; 0xa8
 800c306:	f011 fc7e 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->calendar_btnm_day, LV_PART_ITEMS);
 800c30a:	6829      	ldr	r1, [r5, #0]
 800c30c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c310:	4620      	mov	r0, r4
 800c312:	f501 71c4 	add.w	r1, r1, #392	; 0x188
 800c316:	f011 fc76 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 800c31a:	6829      	ldr	r1, [r5, #0]
 800c31c:	4aa6      	ldr	r2, [pc, #664]	; (800c5b8 <theme_apply+0x5f8>)
 800c31e:	4620      	mov	r0, r4
 800c320:	3158      	adds	r1, #88	; 0x58
 800c322:	f011 fc70 	bl	801dc06 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 800c326:	6829      	ldr	r1, [r5, #0]
 800c328:	4aa4      	ldr	r2, [pc, #656]	; (800c5bc <theme_apply+0x5fc>)
 800c32a:	3160      	adds	r1, #96	; 0x60
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 800c32c:	4620      	mov	r0, r4
 800c32e:	f011 fc6a 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 800c332:	6829      	ldr	r1, [r5, #0]
 800c334:	4aa2      	ldr	r2, [pc, #648]	; (800c5c0 <theme_apply+0x600>)
 800c336:	4620      	mov	r0, r4
 800c338:	31a0      	adds	r1, #160	; 0xa0
 800c33a:	f011 fc64 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 800c33e:	6829      	ldr	r1, [r5, #0]
 800c340:	4aa0      	ldr	r2, [pc, #640]	; (800c5c4 <theme_apply+0x604>)
 800c342:	31a8      	adds	r1, #168	; 0xa8
 800c344:	e67c      	b.n	800c040 <theme_apply+0x80>
        lv_obj_add_style(obj, &styles->card, 0);
 800c346:	3118      	adds	r1, #24
 800c348:	4620      	mov	r0, r4
 800c34a:	f011 fc5c 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c34e:	6829      	ldr	r1, [r5, #0]
 800c350:	2204      	movs	r2, #4
 800c352:	4620      	mov	r0, r4
 800c354:	31a0      	adds	r1, #160	; 0xa0
 800c356:	f011 fc56 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c35a:	6829      	ldr	r1, [r5, #0]
 800c35c:	2208      	movs	r2, #8
 800c35e:	4620      	mov	r0, r4
 800c360:	31a8      	adds	r1, #168	; 0xa8
 800c362:	f011 fc50 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 800c366:	6829      	ldr	r1, [r5, #0]
 800c368:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c36c:	4620      	mov	r0, r4
 800c36e:	3120      	adds	r1, #32
 800c370:	f011 fc49 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 800c374:	6829      	ldr	r1, [r5, #0]
 800c376:	4a91      	ldr	r2, [pc, #580]	; (800c5bc <theme_apply+0x5fc>)
 800c378:	4620      	mov	r0, r4
 800c37a:	3160      	adds	r1, #96	; 0x60
 800c37c:	f011 fc43 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 800c380:	6829      	ldr	r1, [r5, #0]
 800c382:	4a8d      	ldr	r2, [pc, #564]	; (800c5b8 <theme_apply+0x5f8>)
 800c384:	4620      	mov	r0, r4
 800c386:	3158      	adds	r1, #88	; 0x58
 800c388:	f011 fc3d 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 800c38c:	6829      	ldr	r1, [r5, #0]
 800c38e:	4a8e      	ldr	r2, [pc, #568]	; (800c5c8 <theme_apply+0x608>)
 800c390:	3128      	adds	r1, #40	; 0x28
 800c392:	e7cb      	b.n	800c32c <theme_apply+0x36c>
    else if(lv_obj_check_type(obj, &lv_bar_class)) {
 800c394:	498d      	ldr	r1, [pc, #564]	; (800c5cc <theme_apply+0x60c>)
 800c396:	4620      	mov	r0, r4
 800c398:	f00f fce4 	bl	801bd64 <lv_obj_check_type>
 800c39c:	4607      	mov	r7, r0
 800c39e:	b320      	cbz	r0, 800c3ea <theme_apply+0x42a>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 800c3a0:	4d8b      	ldr	r5, [pc, #556]	; (800c5d0 <theme_apply+0x610>)
 800c3a2:	4632      	mov	r2, r6
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	6829      	ldr	r1, [r5, #0]
 800c3a8:	3130      	adds	r1, #48	; 0x30
 800c3aa:	f011 fc2c 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 800c3ae:	6829      	ldr	r1, [r5, #0]
 800c3b0:	4632      	mov	r2, r6
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	31b0      	adds	r1, #176	; 0xb0
 800c3b6:	f011 fc26 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c3ba:	6829      	ldr	r1, [r5, #0]
 800c3bc:	2204      	movs	r2, #4
 800c3be:	4620      	mov	r0, r4
 800c3c0:	31a0      	adds	r1, #160	; 0xa0
 800c3c2:	f011 fc20 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c3c6:	6829      	ldr	r1, [r5, #0]
 800c3c8:	2208      	movs	r2, #8
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	31a8      	adds	r1, #168	; 0xa8
 800c3ce:	f011 fc1a 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 800c3d2:	6829      	ldr	r1, [r5, #0]
 800c3d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c3d8:	4620      	mov	r0, r4
 800c3da:	3128      	adds	r1, #40	; 0x28
 800c3dc:	f011 fc13 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 800c3e0:	6829      	ldr	r1, [r5, #0]
 800c3e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c3e6:	31b0      	adds	r1, #176	; 0xb0
 800c3e8:	e62a      	b.n	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_slider_class)) {
 800c3ea:	497a      	ldr	r1, [pc, #488]	; (800c5d4 <theme_apply+0x614>)
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f00f fcb9 	bl	801bd64 <lv_obj_check_type>
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d03e      	beq.n	800c476 <theme_apply+0x4b6>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 800c3f8:	4d75      	ldr	r5, [pc, #468]	; (800c5d0 <theme_apply+0x610>)
 800c3fa:	463a      	mov	r2, r7
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	6829      	ldr	r1, [r5, #0]
 800c400:	3130      	adds	r1, #48	; 0x30
 800c402:	f011 fc00 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 800c406:	6829      	ldr	r1, [r5, #0]
 800c408:	463a      	mov	r2, r7
 800c40a:	4620      	mov	r0, r4
 800c40c:	31b0      	adds	r1, #176	; 0xb0
 800c40e:	f011 fbfa 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c412:	6829      	ldr	r1, [r5, #0]
 800c414:	2204      	movs	r2, #4
 800c416:	4620      	mov	r0, r4
 800c418:	31a0      	adds	r1, #160	; 0xa0
 800c41a:	f011 fbf4 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c41e:	6829      	ldr	r1, [r5, #0]
 800c420:	2208      	movs	r2, #8
 800c422:	4620      	mov	r0, r4
 800c424:	31a8      	adds	r1, #168	; 0xa8
 800c426:	f011 fbee 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 800c42a:	6829      	ldr	r1, [r5, #0]
 800c42c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c430:	4620      	mov	r0, r4
 800c432:	3128      	adds	r1, #40	; 0x28
 800c434:	f011 fbe7 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 800c438:	6829      	ldr	r1, [r5, #0]
 800c43a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c43e:	4620      	mov	r0, r4
 800c440:	31b0      	adds	r1, #176	; 0xb0
 800c442:	f011 fbe0 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 800c446:	6829      	ldr	r1, [r5, #0]
 800c448:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c44c:	4620      	mov	r0, r4
 800c44e:	31f0      	adds	r1, #240	; 0xf0
 800c450:	f011 fbd9 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_KNOB | LV_STATE_PRESSED);
 800c454:	6829      	ldr	r1, [r5, #0]
 800c456:	4a60      	ldr	r2, [pc, #384]	; (800c5d8 <theme_apply+0x618>)
 800c458:	4620      	mov	r0, r4
 800c45a:	31c8      	adds	r1, #200	; 0xc8
 800c45c:	f011 fbd3 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_KNOB);
 800c460:	6829      	ldr	r1, [r5, #0]
 800c462:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c466:	4620      	mov	r0, r4
 800c468:	31d0      	adds	r1, #208	; 0xd0
 800c46a:	f011 fbcc 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_KNOB | LV_STATE_PRESSED);
 800c46e:	6829      	ldr	r1, [r5, #0]
 800c470:	4a59      	ldr	r2, [pc, #356]	; (800c5d8 <theme_apply+0x618>)
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 800c472:	31d8      	adds	r1, #216	; 0xd8
 800c474:	e5e4      	b.n	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_table_class)) {
 800c476:	4959      	ldr	r1, [pc, #356]	; (800c5dc <theme_apply+0x61c>)
 800c478:	4620      	mov	r0, r4
 800c47a:	f00f fc73 	bl	801bd64 <lv_obj_check_type>
 800c47e:	4607      	mov	r7, r0
 800c480:	2800      	cmp	r0, #0
 800c482:	d051      	beq.n	800c528 <theme_apply+0x568>
        lv_obj_add_style(obj, &styles->card, 0);
 800c484:	4d52      	ldr	r5, [pc, #328]	; (800c5d0 <theme_apply+0x610>)
 800c486:	4632      	mov	r2, r6
 800c488:	4620      	mov	r0, r4
 800c48a:	6829      	ldr	r1, [r5, #0]
 800c48c:	3118      	adds	r1, #24
 800c48e:	f011 fbba 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 800c492:	6829      	ldr	r1, [r5, #0]
 800c494:	4632      	mov	r2, r6
 800c496:	4620      	mov	r0, r4
 800c498:	3168      	adds	r1, #104	; 0x68
 800c49a:	f011 fbb4 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->no_radius, 0);
 800c49e:	6829      	ldr	r1, [r5, #0]
 800c4a0:	4632      	mov	r2, r6
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	31b8      	adds	r1, #184	; 0xb8
 800c4a6:	f011 fbae 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c4aa:	6829      	ldr	r1, [r5, #0]
 800c4ac:	2204      	movs	r2, #4
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	31a0      	adds	r1, #160	; 0xa0
 800c4b2:	f011 fba8 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c4b6:	6829      	ldr	r1, [r5, #0]
 800c4b8:	2208      	movs	r2, #8
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	31a8      	adds	r1, #168	; 0xa8
 800c4be:	f011 fba2 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800c4c2:	6829      	ldr	r1, [r5, #0]
 800c4c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	3108      	adds	r1, #8
 800c4cc:	f011 fb9b 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 800c4d0:	6829      	ldr	r1, [r5, #0]
 800c4d2:	4a43      	ldr	r2, [pc, #268]	; (800c5e0 <theme_apply+0x620>)
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	3110      	adds	r1, #16
 800c4d8:	f011 fb95 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 800c4dc:	6829      	ldr	r1, [r5, #0]
 800c4de:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	3150      	adds	r1, #80	; 0x50
 800c4e6:	f011 fb8e 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->table_cell, LV_PART_ITEMS);
 800c4ea:	6829      	ldr	r1, [r5, #0]
 800c4ec:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f501 71ac 	add.w	r1, r1, #344	; 0x158
 800c4f6:	f011 fb86 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_ITEMS);
 800c4fa:	6829      	ldr	r1, [r5, #0]
 800c4fc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c500:	4620      	mov	r0, r4
 800c502:	3180      	adds	r1, #128	; 0x80
 800c504:	f011 fb7f 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 800c508:	6829      	ldr	r1, [r5, #0]
 800c50a:	4a2b      	ldr	r2, [pc, #172]	; (800c5b8 <theme_apply+0x5f8>)
 800c50c:	4620      	mov	r0, r4
 800c50e:	3158      	adds	r1, #88	; 0x58
 800c510:	f011 fb79 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 800c514:	6829      	ldr	r1, [r5, #0]
 800c516:	4a2a      	ldr	r2, [pc, #168]	; (800c5c0 <theme_apply+0x600>)
 800c518:	4620      	mov	r0, r4
 800c51a:	3128      	adds	r1, #40	; 0x28
 800c51c:	f011 fb73 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 800c520:	6829      	ldr	r1, [r5, #0]
 800c522:	4a28      	ldr	r2, [pc, #160]	; (800c5c4 <theme_apply+0x604>)
 800c524:	3138      	adds	r1, #56	; 0x38
 800c526:	e58b      	b.n	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_checkbox_class)) {
 800c528:	492e      	ldr	r1, [pc, #184]	; (800c5e4 <theme_apply+0x624>)
 800c52a:	4620      	mov	r0, r4
 800c52c:	f00f fc1a 	bl	801bd64 <lv_obj_check_type>
 800c530:	2800      	cmp	r0, #0
 800c532:	d05f      	beq.n	800c5f4 <theme_apply+0x634>
        lv_obj_add_style(obj, &styles->pad_gap, 0);
 800c534:	4d26      	ldr	r5, [pc, #152]	; (800c5d0 <theme_apply+0x610>)
 800c536:	463a      	mov	r2, r7
 800c538:	4620      	mov	r0, r4
 800c53a:	6829      	ldr	r1, [r5, #0]
 800c53c:	3188      	adds	r1, #136	; 0x88
 800c53e:	f011 fb62 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c542:	6829      	ldr	r1, [r5, #0]
 800c544:	2204      	movs	r2, #4
 800c546:	4620      	mov	r0, r4
 800c548:	31a0      	adds	r1, #160	; 0xa0
 800c54a:	f011 fb5c 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 800c54e:	6829      	ldr	r1, [r5, #0]
 800c550:	4a25      	ldr	r2, [pc, #148]	; (800c5e8 <theme_apply+0x628>)
 800c552:	4620      	mov	r0, r4
 800c554:	3160      	adds	r1, #96	; 0x60
 800c556:	f011 fb56 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker, LV_PART_INDICATOR);
 800c55a:	6829      	ldr	r1, [r5, #0]
 800c55c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c560:	4620      	mov	r0, r4
 800c562:	f501 719c 	add.w	r1, r1, #312	; 0x138
 800c566:	f011 fb4e 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR | LV_STATE_CHECKED);
 800c56a:	6829      	ldr	r1, [r5, #0]
 800c56c:	4a1f      	ldr	r2, [pc, #124]	; (800c5ec <theme_apply+0x62c>)
 800c56e:	4620      	mov	r0, r4
 800c570:	3128      	adds	r1, #40	; 0x28
 800c572:	f011 fb48 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker_checked, LV_PART_INDICATOR | LV_STATE_CHECKED);
 800c576:	6829      	ldr	r1, [r5, #0]
 800c578:	4a1c      	ldr	r2, [pc, #112]	; (800c5ec <theme_apply+0x62c>)
 800c57a:	4620      	mov	r0, r4
 800c57c:	f501 71a0 	add.w	r1, r1, #320	; 0x140
 800c580:	f011 fb41 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_INDICATOR | LV_STATE_PRESSED);
 800c584:	6829      	ldr	r1, [r5, #0]
 800c586:	4a1a      	ldr	r2, [pc, #104]	; (800c5f0 <theme_apply+0x630>)
 800c588:	4620      	mov	r0, r4
 800c58a:	3158      	adds	r1, #88	; 0x58
 800c58c:	f011 fb3b 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_INDICATOR | LV_STATE_PRESSED);
 800c590:	6829      	ldr	r1, [r5, #0]
 800c592:	4a17      	ldr	r2, [pc, #92]	; (800c5f0 <theme_apply+0x630>)
 800c594:	4620      	mov	r0, r4
 800c596:	31c8      	adds	r1, #200	; 0xc8
 800c598:	f011 fb35 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR | LV_STATE_PRESSED);
 800c59c:	6829      	ldr	r1, [r5, #0]
 800c59e:	4a14      	ldr	r2, [pc, #80]	; (800c5f0 <theme_apply+0x630>)
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	31d8      	adds	r1, #216	; 0xd8
 800c5a4:	f011 fb2f 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_INDICATOR);
 800c5a8:	6829      	ldr	r1, [r5, #0]
 800c5aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c5ae:	31d0      	adds	r1, #208	; 0xd0
 800c5b0:	e546      	b.n	800c040 <theme_apply+0x80>
 800c5b2:	bf00      	nop
 800c5b4:	08028dfc 	.word	0x08028dfc
 800c5b8:	00050020 	.word	0x00050020
 800c5bc:	00050080 	.word	0x00050080
 800c5c0:	00050004 	.word	0x00050004
 800c5c4:	00050008 	.word	0x00050008
 800c5c8:	00050001 	.word	0x00050001
 800c5cc:	08029918 	.word	0x08029918
 800c5d0:	240011d0 	.word	0x240011d0
 800c5d4:	08029a4c 	.word	0x08029a4c
 800c5d8:	00030020 	.word	0x00030020
 800c5dc:	08029a84 	.word	0x08029a84
 800c5e0:	00010040 	.word	0x00010040
 800c5e4:	0802996c 	.word	0x0802996c
 800c5e8:	00020080 	.word	0x00020080
 800c5ec:	00020001 	.word	0x00020001
 800c5f0:	00020020 	.word	0x00020020
    else if(lv_obj_check_type(obj, &lv_switch_class)) {
 800c5f4:	49c1      	ldr	r1, [pc, #772]	; (800c8fc <theme_apply+0x93c>)
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f00f fbb4 	bl	801bd64 <lv_obj_check_type>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d057      	beq.n	800c6b0 <theme_apply+0x6f0>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 800c600:	4dbf      	ldr	r5, [pc, #764]	; (800c900 <theme_apply+0x940>)
 800c602:	2200      	movs	r2, #0
 800c604:	4620      	mov	r0, r4
 800c606:	6829      	ldr	r1, [r5, #0]
 800c608:	3148      	adds	r1, #72	; 0x48
 800c60a:	f011 fafc 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 800c60e:	6829      	ldr	r1, [r5, #0]
 800c610:	2200      	movs	r2, #0
 800c612:	4620      	mov	r0, r4
 800c614:	31b0      	adds	r1, #176	; 0xb0
 800c616:	f011 faf6 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->anim_fast, 0);
 800c61a:	6829      	ldr	r1, [r5, #0]
 800c61c:	2200      	movs	r2, #0
 800c61e:	4620      	mov	r0, r4
 800c620:	31e8      	adds	r1, #232	; 0xe8
 800c622:	f011 faf0 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 800c626:	6829      	ldr	r1, [r5, #0]
 800c628:	2280      	movs	r2, #128	; 0x80
 800c62a:	4620      	mov	r0, r4
 800c62c:	3160      	adds	r1, #96	; 0x60
 800c62e:	f011 faea 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c632:	6829      	ldr	r1, [r5, #0]
 800c634:	2204      	movs	r2, #4
 800c636:	4620      	mov	r0, r4
 800c638:	31a0      	adds	r1, #160	; 0xa0
 800c63a:	f011 fae4 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR | LV_STATE_CHECKED);
 800c63e:	6829      	ldr	r1, [r5, #0]
 800c640:	4ab0      	ldr	r2, [pc, #704]	; (800c904 <theme_apply+0x944>)
 800c642:	4620      	mov	r0, r4
 800c644:	3128      	adds	r1, #40	; 0x28
 800c646:	f011 fade 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 800c64a:	6829      	ldr	r1, [r5, #0]
 800c64c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c650:	4620      	mov	r0, r4
 800c652:	31b0      	adds	r1, #176	; 0xb0
 800c654:	f011 fad7 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 800c658:	6829      	ldr	r1, [r5, #0]
 800c65a:	4aab      	ldr	r2, [pc, #684]	; (800c908 <theme_apply+0x948>)
 800c65c:	4620      	mov	r0, r4
 800c65e:	3160      	adds	r1, #96	; 0x60
 800c660:	f011 fad1 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 800c664:	6829      	ldr	r1, [r5, #0]
 800c666:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c66a:	4620      	mov	r0, r4
 800c66c:	31f0      	adds	r1, #240	; 0xf0
 800c66e:	f011 faca 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 800c672:	6829      	ldr	r1, [r5, #0]
 800c674:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c678:	4620      	mov	r0, r4
 800c67a:	3150      	adds	r1, #80	; 0x50
 800c67c:	f011 fac3 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->switch_knob, LV_PART_KNOB);
 800c680:	6829      	ldr	r1, [r5, #0]
 800c682:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c686:	4620      	mov	r0, r4
 800c688:	f501 71a4 	add.w	r1, r1, #328	; 0x148
 800c68c:	f011 fabb 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_KNOB | LV_STATE_DISABLED);
 800c690:	6829      	ldr	r1, [r5, #0]
 800c692:	4a9e      	ldr	r2, [pc, #632]	; (800c90c <theme_apply+0x94c>)
 800c694:	4620      	mov	r0, r4
 800c696:	3160      	adds	r1, #96	; 0x60
 800c698:	f011 fab5 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR | LV_STATE_CHECKED);
 800c69c:	6829      	ldr	r1, [r5, #0]
 800c69e:	4a99      	ldr	r2, [pc, #612]	; (800c904 <theme_apply+0x944>)
 800c6a0:	31d8      	adds	r1, #216	; 0xd8
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f011 faaf 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 800c6a8:	6829      	ldr	r1, [r5, #0]
 800c6aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c6ae:	e6e0      	b.n	800c472 <theme_apply+0x4b2>
    else if(lv_obj_check_type(obj, &lv_chart_class)) {
 800c6b0:	4997      	ldr	r1, [pc, #604]	; (800c910 <theme_apply+0x950>)
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f00f fb56 	bl	801bd64 <lv_obj_check_type>
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d03e      	beq.n	800c73c <theme_apply+0x77c>
        lv_obj_add_style(obj, &styles->card, 0);
 800c6be:	4d90      	ldr	r5, [pc, #576]	; (800c900 <theme_apply+0x940>)
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	6829      	ldr	r1, [r5, #0]
 800c6c6:	3118      	adds	r1, #24
 800c6c8:	f011 fa9d 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 800c6cc:	6829      	ldr	r1, [r5, #0]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	3178      	adds	r1, #120	; 0x78
 800c6d4:	f011 fa97 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_bg, 0);
 800c6d8:	6829      	ldr	r1, [r5, #0]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f501 7194 	add.w	r1, r1, #296	; 0x128
 800c6e2:	f011 fa90 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800c6e6:	6829      	ldr	r1, [r5, #0]
 800c6e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	3108      	adds	r1, #8
 800c6f0:	f011 fa89 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 800c6f4:	6829      	ldr	r1, [r5, #0]
 800c6f6:	4a87      	ldr	r2, [pc, #540]	; (800c914 <theme_apply+0x954>)
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	3110      	adds	r1, #16
 800c6fc:	f011 fa83 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_ITEMS);
 800c700:	6829      	ldr	r1, [r5, #0]
 800c702:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800c706:	4620      	mov	r0, r4
 800c708:	f501 7188 	add.w	r1, r1, #272	; 0x110
 800c70c:	f011 fa7b 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_indic, LV_PART_INDICATOR);
 800c710:	6829      	ldr	r1, [r5, #0]
 800c712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c716:	4620      	mov	r0, r4
 800c718:	f501 718c 	add.w	r1, r1, #280	; 0x118
 800c71c:	f011 fa73 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_ticks, LV_PART_TICKS);
 800c720:	6829      	ldr	r1, [r5, #0]
 800c722:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800c726:	4620      	mov	r0, r4
 800c728:	f501 7190 	add.w	r1, r1, #288	; 0x120
 800c72c:	f011 fa6b 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_CURSOR);
 800c730:	6829      	ldr	r1, [r5, #0]
 800c732:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800c736:	f501 7188 	add.w	r1, r1, #272	; 0x110
 800c73a:	e481      	b.n	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_roller_class)) {
 800c73c:	4976      	ldr	r1, [pc, #472]	; (800c918 <theme_apply+0x958>)
 800c73e:	4620      	mov	r0, r4
 800c740:	f00f fb10 	bl	801bd64 <lv_obj_check_type>
 800c744:	4607      	mov	r7, r0
 800c746:	b348      	cbz	r0, 800c79c <theme_apply+0x7dc>
        lv_obj_add_style(obj, &styles->card, 0);
 800c748:	4d6d      	ldr	r5, [pc, #436]	; (800c900 <theme_apply+0x940>)
 800c74a:	4632      	mov	r2, r6
 800c74c:	4620      	mov	r0, r4
 800c74e:	6829      	ldr	r1, [r5, #0]
 800c750:	3118      	adds	r1, #24
 800c752:	f011 fa58 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->anim, 0);
 800c756:	6829      	ldr	r1, [r5, #0]
 800c758:	4632      	mov	r2, r6
 800c75a:	4620      	mov	r0, r4
 800c75c:	31e0      	adds	r1, #224	; 0xe0
 800c75e:	f011 fa52 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 800c762:	6829      	ldr	r1, [r5, #0]
 800c764:	4632      	mov	r2, r6
 800c766:	4620      	mov	r0, r4
 800c768:	3190      	adds	r1, #144	; 0x90
 800c76a:	f011 fa4c 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->text_align_center, 0);
 800c76e:	6829      	ldr	r1, [r5, #0]
 800c770:	4632      	mov	r2, r6
 800c772:	4620      	mov	r0, r4
 800c774:	3198      	adds	r1, #152	; 0x98
 800c776:	f011 fa46 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c77a:	6829      	ldr	r1, [r5, #0]
 800c77c:	2204      	movs	r2, #4
 800c77e:	4620      	mov	r0, r4
 800c780:	31a0      	adds	r1, #160	; 0xa0
 800c782:	f011 fa40 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c786:	6829      	ldr	r1, [r5, #0]
 800c788:	2208      	movs	r2, #8
 800c78a:	4620      	mov	r0, r4
 800c78c:	31a8      	adds	r1, #168	; 0xa8
 800c78e:	f011 fa3a 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED);
 800c792:	6829      	ldr	r1, [r5, #0]
 800c794:	f44f 2280 	mov.w	r2, #262144	; 0x40000
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_CURSOR);
 800c798:	3128      	adds	r1, #40	; 0x28
 800c79a:	e451      	b.n	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_dropdown_class)) {
 800c79c:	495f      	ldr	r1, [pc, #380]	; (800c91c <theme_apply+0x95c>)
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f00f fae0 	bl	801bd64 <lv_obj_check_type>
 800c7a4:	4606      	mov	r6, r0
 800c7a6:	b340      	cbz	r0, 800c7fa <theme_apply+0x83a>
        lv_obj_add_style(obj, &styles->card, 0);
 800c7a8:	4d55      	ldr	r5, [pc, #340]	; (800c900 <theme_apply+0x940>)
 800c7aa:	463a      	mov	r2, r7
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	6829      	ldr	r1, [r5, #0]
 800c7b0:	3118      	adds	r1, #24
 800c7b2:	f011 fa28 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 800c7b6:	6829      	ldr	r1, [r5, #0]
 800c7b8:	463a      	mov	r2, r7
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	3178      	adds	r1, #120	; 0x78
 800c7be:	f011 fa22 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 800c7c2:	6829      	ldr	r1, [r5, #0]
 800c7c4:	463a      	mov	r2, r7
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	31d0      	adds	r1, #208	; 0xd0
 800c7ca:	f011 fa1c 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 800c7ce:	6829      	ldr	r1, [r5, #0]
 800c7d0:	2220      	movs	r2, #32
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	31d8      	adds	r1, #216	; 0xd8
 800c7d6:	f011 fa16 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 800c7da:	6829      	ldr	r1, [r5, #0]
 800c7dc:	2220      	movs	r2, #32
 800c7de:	4620      	mov	r0, r4
 800c7e0:	3158      	adds	r1, #88	; 0x58
 800c7e2:	f011 fa10 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c7e6:	6829      	ldr	r1, [r5, #0]
 800c7e8:	2204      	movs	r2, #4
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	31a0      	adds	r1, #160	; 0xa0
 800c7ee:	f011 fa0a 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c7f2:	6829      	ldr	r1, [r5, #0]
 800c7f4:	2208      	movs	r2, #8
 800c7f6:	31a8      	adds	r1, #168	; 0xa8
 800c7f8:	e753      	b.n	800c6a2 <theme_apply+0x6e2>
    else if(lv_obj_check_type(obj, &lv_dropdownlist_class)) {
 800c7fa:	4949      	ldr	r1, [pc, #292]	; (800c920 <theme_apply+0x960>)
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f00f fab1 	bl	801bd64 <lv_obj_check_type>
 800c802:	4607      	mov	r7, r0
 800c804:	2800      	cmp	r0, #0
 800c806:	d038      	beq.n	800c87a <theme_apply+0x8ba>
        lv_obj_add_style(obj, &styles->card, 0);
 800c808:	4d3d      	ldr	r5, [pc, #244]	; (800c900 <theme_apply+0x940>)
 800c80a:	4632      	mov	r2, r6
 800c80c:	4620      	mov	r0, r4
 800c80e:	6829      	ldr	r1, [r5, #0]
 800c810:	3118      	adds	r1, #24
 800c812:	f011 f9f8 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->clip_corner, 0);
 800c816:	6829      	ldr	r1, [r5, #0]
 800c818:	4632      	mov	r2, r6
 800c81a:	4620      	mov	r0, r4
 800c81c:	31c0      	adds	r1, #192	; 0xc0
 800c81e:	f011 f9f2 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 800c822:	6829      	ldr	r1, [r5, #0]
 800c824:	4632      	mov	r2, r6
 800c826:	4620      	mov	r0, r4
 800c828:	3190      	adds	r1, #144	; 0x90
 800c82a:	f011 f9ec 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dropdown_list, 0);
 800c82e:	6829      	ldr	r1, [r5, #0]
 800c830:	4632      	mov	r2, r6
 800c832:	4620      	mov	r0, r4
 800c834:	f501 7198 	add.w	r1, r1, #304	; 0x130
 800c838:	f011 f9e5 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800c83c:	6829      	ldr	r1, [r5, #0]
 800c83e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c842:	4620      	mov	r0, r4
 800c844:	3108      	adds	r1, #8
 800c846:	f011 f9de 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 800c84a:	6829      	ldr	r1, [r5, #0]
 800c84c:	4a31      	ldr	r2, [pc, #196]	; (800c914 <theme_apply+0x954>)
 800c84e:	4620      	mov	r0, r4
 800c850:	3110      	adds	r1, #16
 800c852:	f011 f9d8 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_SELECTED);
 800c856:	6829      	ldr	r1, [r5, #0]
 800c858:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c85c:	4620      	mov	r0, r4
 800c85e:	3150      	adds	r1, #80	; 0x50
 800c860:	f011 f9d1 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED | LV_STATE_CHECKED);
 800c864:	6829      	ldr	r1, [r5, #0]
 800c866:	4a2f      	ldr	r2, [pc, #188]	; (800c924 <theme_apply+0x964>)
 800c868:	4620      	mov	r0, r4
 800c86a:	3128      	adds	r1, #40	; 0x28
 800c86c:	f011 f9cb 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_SELECTED | LV_STATE_PRESSED);
 800c870:	6829      	ldr	r1, [r5, #0]
 800c872:	4a2d      	ldr	r2, [pc, #180]	; (800c928 <theme_apply+0x968>)
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 800c874:	3158      	adds	r1, #88	; 0x58
 800c876:	f7ff bbe3 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_arc_class)) {
 800c87a:	492c      	ldr	r1, [pc, #176]	; (800c92c <theme_apply+0x96c>)
 800c87c:	4620      	mov	r0, r4
 800c87e:	f00f fa71 	bl	801bd64 <lv_obj_check_type>
 800c882:	4606      	mov	r6, r0
 800c884:	b1e8      	cbz	r0, 800c8c2 <theme_apply+0x902>
        lv_obj_add_style(obj, &styles->arc_indic, 0);
 800c886:	4d1e      	ldr	r5, [pc, #120]	; (800c900 <theme_apply+0x940>)
 800c888:	463a      	mov	r2, r7
 800c88a:	4620      	mov	r0, r4
 800c88c:	6829      	ldr	r1, [r5, #0]
 800c88e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800c892:	f011 f9b8 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic, LV_PART_INDICATOR);
 800c896:	6829      	ldr	r1, [r5, #0]
 800c898:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c89c:	4620      	mov	r0, r4
 800c89e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800c8a2:	f011 f9b0 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic_primary, LV_PART_INDICATOR);
 800c8a6:	6829      	ldr	r1, [r5, #0]
 800c8a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f501 7184 	add.w	r1, r1, #264	; 0x108
 800c8b2:	f011 f9a8 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 800c8b6:	6829      	ldr	r1, [r5, #0]
 800c8b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c8bc:	31f0      	adds	r1, #240	; 0xf0
 800c8be:	f7ff bbbf 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_spinner_class)) {
 800c8c2:	491b      	ldr	r1, [pc, #108]	; (800c930 <theme_apply+0x970>)
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f00f fa4d 	bl	801bd64 <lv_obj_check_type>
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	b390      	cbz	r0, 800c934 <theme_apply+0x974>
        lv_obj_add_style(obj, &styles->arc_indic, 0);
 800c8ce:	4d0c      	ldr	r5, [pc, #48]	; (800c900 <theme_apply+0x940>)
 800c8d0:	4632      	mov	r2, r6
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	6829      	ldr	r1, [r5, #0]
 800c8d6:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800c8da:	f011 f994 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic, LV_PART_INDICATOR);
 800c8de:	6829      	ldr	r1, [r5, #0]
 800c8e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800c8ea:	f011 f98c 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic_primary, LV_PART_INDICATOR);
 800c8ee:	6829      	ldr	r1, [r5, #0]
 800c8f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c8f4:	f501 7184 	add.w	r1, r1, #264	; 0x108
 800c8f8:	f7ff bba2 	b.w	800c040 <theme_apply+0x80>
 800c8fc:	08029a68 	.word	0x08029a68
 800c900:	240011d0 	.word	0x240011d0
 800c904:	00020001 	.word	0x00020001
 800c908:	00020080 	.word	0x00020080
 800c90c:	00030080 	.word	0x00030080
 800c910:	08028e80 	.word	0x08028e80
 800c914:	00010040 	.word	0x00010040
 800c918:	08029a30 	.word	0x08029a30
 800c91c:	080299a4 	.word	0x080299a4
 800c920:	08029988 	.word	0x08029988
 800c924:	00040001 	.word	0x00040001
 800c928:	00040020 	.word	0x00040020
 800c92c:	080298fc 	.word	0x080298fc
 800c930:	08029314 	.word	0x08029314
    else if(lv_obj_check_type(obj, &lv_meter_class)) {
 800c934:	49bb      	ldr	r1, [pc, #748]	; (800cc24 <theme_apply+0xc64>)
 800c936:	4620      	mov	r0, r4
 800c938:	f00f fa14 	bl	801bd64 <lv_obj_check_type>
 800c93c:	4606      	mov	r6, r0
 800c93e:	b198      	cbz	r0, 800c968 <theme_apply+0x9a8>
        lv_obj_add_style(obj, &styles->card, 0);
 800c940:	4eb9      	ldr	r6, [pc, #740]	; (800cc28 <theme_apply+0xc68>)
 800c942:	462a      	mov	r2, r5
 800c944:	4620      	mov	r0, r4
 800c946:	6831      	ldr	r1, [r6, #0]
 800c948:	3118      	adds	r1, #24
 800c94a:	f011 f95c 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 800c94e:	6831      	ldr	r1, [r6, #0]
 800c950:	462a      	mov	r2, r5
 800c952:	4620      	mov	r0, r4
 800c954:	31b0      	adds	r1, #176	; 0xb0
 800c956:	f011 f956 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->meter_indic, LV_PART_INDICATOR);
 800c95a:	6831      	ldr	r1, [r6, #0]
 800c95c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c960:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800c964:	f7ff bb6c 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_textarea_class)) {
 800c968:	49b0      	ldr	r1, [pc, #704]	; (800cc2c <theme_apply+0xc6c>)
 800c96a:	4620      	mov	r0, r4
 800c96c:	f00f f9fa 	bl	801bd64 <lv_obj_check_type>
 800c970:	4605      	mov	r5, r0
 800c972:	2800      	cmp	r0, #0
 800c974:	d039      	beq.n	800c9ea <theme_apply+0xa2a>
        lv_obj_add_style(obj, &styles->card, 0);
 800c976:	4dac      	ldr	r5, [pc, #688]	; (800cc28 <theme_apply+0xc68>)
 800c978:	4632      	mov	r2, r6
 800c97a:	4620      	mov	r0, r4
 800c97c:	6829      	ldr	r1, [r5, #0]
 800c97e:	3118      	adds	r1, #24
 800c980:	f011 f941 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 800c984:	6829      	ldr	r1, [r5, #0]
 800c986:	4632      	mov	r2, r6
 800c988:	4620      	mov	r0, r4
 800c98a:	3178      	adds	r1, #120	; 0x78
 800c98c:	f011 f93b 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 800c990:	6829      	ldr	r1, [r5, #0]
 800c992:	2280      	movs	r2, #128	; 0x80
 800c994:	4620      	mov	r0, r4
 800c996:	3160      	adds	r1, #96	; 0x60
 800c998:	f011 f935 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800c99c:	6829      	ldr	r1, [r5, #0]
 800c99e:	2204      	movs	r2, #4
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	31a0      	adds	r1, #160	; 0xa0
 800c9a4:	f011 f92f 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800c9a8:	6829      	ldr	r1, [r5, #0]
 800c9aa:	2208      	movs	r2, #8
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	31a8      	adds	r1, #168	; 0xa8
 800c9b0:	f011 f929 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800c9b4:	6829      	ldr	r1, [r5, #0]
 800c9b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	3108      	adds	r1, #8
 800c9be:	f011 f922 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 800c9c2:	6829      	ldr	r1, [r5, #0]
 800c9c4:	4a9a      	ldr	r2, [pc, #616]	; (800cc30 <theme_apply+0xc70>)
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	3110      	adds	r1, #16
 800c9ca:	f011 f91c 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_cursor, LV_PART_CURSOR | LV_STATE_FOCUSED);
 800c9ce:	6829      	ldr	r1, [r5, #0]
 800c9d0:	4a98      	ldr	r2, [pc, #608]	; (800cc34 <theme_apply+0xc74>)
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	f501 71b8 	add.w	r1, r1, #368	; 0x170
 800c9d8:	f011 f915 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_placeholder, LV_PART_TEXTAREA_PLACEHOLDER);
 800c9dc:	6829      	ldr	r1, [r5, #0]
 800c9de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c9e2:	f501 71bc 	add.w	r1, r1, #376	; 0x178
 800c9e6:	f7ff bb2b 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_calendar_class)) {
 800c9ea:	4993      	ldr	r1, [pc, #588]	; (800cc38 <theme_apply+0xc78>)
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f00f f9b9 	bl	801bd64 <lv_obj_check_type>
 800c9f2:	b158      	cbz	r0, 800ca0c <theme_apply+0xa4c>
        lv_obj_add_style(obj, &styles->card, 0);
 800c9f4:	4e8c      	ldr	r6, [pc, #560]	; (800cc28 <theme_apply+0xc68>)
 800c9f6:	462a      	mov	r2, r5
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	6831      	ldr	r1, [r6, #0]
 800c9fc:	3118      	adds	r1, #24
 800c9fe:	f011 f902 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 800ca02:	6831      	ldr	r1, [r6, #0]
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 800ca04:	2200      	movs	r2, #0
 800ca06:	3168      	adds	r1, #104	; 0x68
 800ca08:	f7ff bb1a 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_calendar_header_arrow_class)) {
 800ca0c:	498b      	ldr	r1, [pc, #556]	; (800cc3c <theme_apply+0xc7c>)
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f00f f9a8 	bl	801bd64 <lv_obj_check_type>
 800ca14:	b130      	cbz	r0, 800ca24 <theme_apply+0xa64>
        lv_obj_add_style(obj, &styles->calendar_header, 0);
 800ca16:	4b84      	ldr	r3, [pc, #528]	; (800cc28 <theme_apply+0xc68>)
 800ca18:	2200      	movs	r2, #0
 800ca1a:	6819      	ldr	r1, [r3, #0]
 800ca1c:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 800ca20:	f7ff bb0e 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_calendar_header_dropdown_class)) {
 800ca24:	4986      	ldr	r1, [pc, #536]	; (800cc40 <theme_apply+0xc80>)
 800ca26:	4620      	mov	r0, r4
 800ca28:	f00f f99c 	bl	801bd64 <lv_obj_check_type>
 800ca2c:	4607      	mov	r7, r0
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d1f1      	bne.n	800ca16 <theme_apply+0xa56>
    else if(lv_obj_check_type(obj, &lv_keyboard_class)) {
 800ca32:	4984      	ldr	r1, [pc, #528]	; (800cc44 <theme_apply+0xc84>)
 800ca34:	4620      	mov	r0, r4
 800ca36:	f00f f995 	bl	801bd64 <lv_obj_check_type>
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d043      	beq.n	800cac8 <theme_apply+0xb08>
        lv_obj_add_style(obj, &styles->scr, 0);
 800ca40:	4d79      	ldr	r5, [pc, #484]	; (800cc28 <theme_apply+0xc68>)
 800ca42:	463a      	mov	r2, r7
 800ca44:	4620      	mov	r0, r4
 800ca46:	6829      	ldr	r1, [r5, #0]
 800ca48:	f011 f8dd 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, disp_size == DISP_LARGE ? &styles->pad_small : &styles->pad_tiny, 0);
 800ca4c:	4b7e      	ldr	r3, [pc, #504]	; (800cc48 <theme_apply+0xc88>)
 800ca4e:	6829      	ldr	r1, [r5, #0]
 800ca50:	2200      	movs	r2, #0
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	4620      	mov	r0, r4
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	bf0c      	ite	eq
 800ca5a:	3178      	addeq	r1, #120	; 0x78
 800ca5c:	3170      	addne	r1, #112	; 0x70
 800ca5e:	f011 f8d2 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800ca62:	6829      	ldr	r1, [r5, #0]
 800ca64:	2204      	movs	r2, #4
 800ca66:	4620      	mov	r0, r4
 800ca68:	31a0      	adds	r1, #160	; 0xa0
 800ca6a:	f011 f8cc 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800ca6e:	6829      	ldr	r1, [r5, #0]
 800ca70:	2208      	movs	r2, #8
 800ca72:	4620      	mov	r0, r4
 800ca74:	31a8      	adds	r1, #168	; 0xa8
 800ca76:	f011 f8c6 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 800ca7a:	6829      	ldr	r1, [r5, #0]
 800ca7c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800ca80:	4620      	mov	r0, r4
 800ca82:	3120      	adds	r1, #32
 800ca84:	f011 f8bf 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 800ca88:	6829      	ldr	r1, [r5, #0]
 800ca8a:	4a70      	ldr	r2, [pc, #448]	; (800cc4c <theme_apply+0xc8c>)
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	3160      	adds	r1, #96	; 0x60
 800ca90:	f011 f8b9 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 800ca94:	6829      	ldr	r1, [r5, #0]
 800ca96:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	3150      	adds	r1, #80	; 0x50
 800ca9e:	f011 f8b2 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->keyboard_btn_bg, LV_PART_ITEMS);
 800caa2:	6829      	ldr	r1, [r5, #0]
 800caa4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800caa8:	4620      	mov	r0, r4
 800caaa:	f501 7102 	add.w	r1, r1, #520	; 0x208
 800caae:	f011 f8aa 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 800cab2:	6829      	ldr	r1, [r5, #0]
 800cab4:	4a66      	ldr	r2, [pc, #408]	; (800cc50 <theme_apply+0xc90>)
 800cab6:	4620      	mov	r0, r4
 800cab8:	3158      	adds	r1, #88	; 0x58
 800caba:	f011 f8a4 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_grey, LV_PART_ITEMS | LV_STATE_CHECKED);
 800cabe:	6829      	ldr	r1, [r5, #0]
 800cac0:	4a64      	ldr	r2, [pc, #400]	; (800cc54 <theme_apply+0xc94>)
 800cac2:	3148      	adds	r1, #72	; 0x48
 800cac4:	f7ff bb96 	b.w	800c1f4 <theme_apply+0x234>
    else if(lv_obj_check_type(obj, &lv_list_class)) {
 800cac8:	4963      	ldr	r1, [pc, #396]	; (800cc58 <theme_apply+0xc98>)
 800caca:	4620      	mov	r0, r4
 800cacc:	f00f f94a 	bl	801bd64 <lv_obj_check_type>
 800cad0:	4605      	mov	r5, r0
 800cad2:	b160      	cbz	r0, 800caee <theme_apply+0xb2e>
        lv_obj_add_style(obj, &styles->card, 0);
 800cad4:	4d54      	ldr	r5, [pc, #336]	; (800cc28 <theme_apply+0xc68>)
 800cad6:	4632      	mov	r2, r6
 800cad8:	4620      	mov	r0, r4
 800cada:	6829      	ldr	r1, [r5, #0]
 800cadc:	3118      	adds	r1, #24
 800cade:	f011 f892 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_bg, 0);
 800cae2:	6829      	ldr	r1, [r5, #0]
 800cae4:	4632      	mov	r2, r6
 800cae6:	f501 7104 	add.w	r1, r1, #528	; 0x210
 800caea:	f7ff ba73 	b.w	800bfd4 <theme_apply+0x14>
    else if(lv_obj_check_type(obj, &lv_list_text_class)) {
 800caee:	495b      	ldr	r1, [pc, #364]	; (800cc5c <theme_apply+0xc9c>)
 800caf0:	4620      	mov	r0, r4
 800caf2:	f00f f937 	bl	801bd64 <lv_obj_check_type>
 800caf6:	4606      	mov	r6, r0
 800caf8:	b160      	cbz	r0, 800cb14 <theme_apply+0xb54>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 800cafa:	4e4b      	ldr	r6, [pc, #300]	; (800cc28 <theme_apply+0xc68>)
 800cafc:	462a      	mov	r2, r5
 800cafe:	4620      	mov	r0, r4
 800cb00:	6831      	ldr	r1, [r6, #0]
 800cb02:	3148      	adds	r1, #72	; 0x48
 800cb04:	f011 f87f 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, 0);
 800cb08:	6831      	ldr	r1, [r6, #0]
 800cb0a:	462a      	mov	r2, r5
 800cb0c:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800cb10:	f7ff ba96 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_list_btn_class)) {
 800cb14:	4952      	ldr	r1, [pc, #328]	; (800cc60 <theme_apply+0xca0>)
 800cb16:	4620      	mov	r0, r4
 800cb18:	f00f f924 	bl	801bd64 <lv_obj_check_type>
 800cb1c:	4605      	mov	r5, r0
 800cb1e:	b320      	cbz	r0, 800cb6a <theme_apply+0xbaa>
        lv_obj_add_style(obj, &styles->bg_color_white, 0);
 800cb20:	4d41      	ldr	r5, [pc, #260]	; (800cc28 <theme_apply+0xc68>)
 800cb22:	4632      	mov	r2, r6
 800cb24:	4620      	mov	r0, r4
 800cb26:	6829      	ldr	r1, [r5, #0]
 800cb28:	3150      	adds	r1, #80	; 0x50
 800cb2a:	f011 f86c 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_btn, 0);
 800cb2e:	6829      	ldr	r1, [r5, #0]
 800cb30:	4632      	mov	r2, r6
 800cb32:	4620      	mov	r0, r4
 800cb34:	f501 7106 	add.w	r1, r1, #536	; 0x218
 800cb38:	f011 f865 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_STATE_FOCUS_KEY);
 800cb3c:	6829      	ldr	r1, [r5, #0]
 800cb3e:	2204      	movs	r2, #4
 800cb40:	4620      	mov	r0, r4
 800cb42:	3128      	adds	r1, #40	; 0x28
 800cb44:	f011 f85f 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_FOCUS_KEY);
 800cb48:	6829      	ldr	r1, [r5, #0]
 800cb4a:	2204      	movs	r2, #4
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800cb52:	f011 f858 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_PRESSED);
 800cb56:	6829      	ldr	r1, [r5, #0]
 800cb58:	2220      	movs	r2, #32
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800cb60:	f011 f851 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 800cb64:	6829      	ldr	r1, [r5, #0]
 800cb66:	2220      	movs	r2, #32
 800cb68:	e684      	b.n	800c874 <theme_apply+0x8b4>
    else if(lv_obj_check_type(obj, &lv_menu_class)) {
 800cb6a:	493e      	ldr	r1, [pc, #248]	; (800cc64 <theme_apply+0xca4>)
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f00f f8f9 	bl	801bd64 <lv_obj_check_type>
 800cb72:	4606      	mov	r6, r0
 800cb74:	b160      	cbz	r0, 800cb90 <theme_apply+0xbd0>
        lv_obj_add_style(obj, &styles->card, 0);
 800cb76:	4e2c      	ldr	r6, [pc, #176]	; (800cc28 <theme_apply+0xc68>)
 800cb78:	462a      	mov	r2, r5
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	6831      	ldr	r1, [r6, #0]
 800cb7e:	3118      	adds	r1, #24
 800cb80:	f011 f841 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->menu_bg, 0);
 800cb84:	6831      	ldr	r1, [r6, #0]
 800cb86:	462a      	mov	r2, r5
 800cb88:	f501 71d0 	add.w	r1, r1, #416	; 0x1a0
 800cb8c:	f7ff ba58 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_cont_class)) {
 800cb90:	4935      	ldr	r1, [pc, #212]	; (800cc68 <theme_apply+0xca8>)
 800cb92:	4620      	mov	r0, r4
 800cb94:	f00f f8e6 	bl	801bd64 <lv_obj_check_type>
 800cb98:	4605      	mov	r5, r0
 800cb9a:	b130      	cbz	r0, 800cbaa <theme_apply+0xbea>
        lv_obj_add_style(obj, &styles->menu_sidebar_cont, 0);
 800cb9c:	4d22      	ldr	r5, [pc, #136]	; (800cc28 <theme_apply+0xc68>)
 800cb9e:	4632      	mov	r2, r6
 800cba0:	6829      	ldr	r1, [r5, #0]
 800cba2:	f501 71d8 	add.w	r1, r1, #432	; 0x1b0
 800cba6:	f7ff ba15 	b.w	800bfd4 <theme_apply+0x14>
    else if(lv_obj_check_type(obj, &lv_menu_main_cont_class)) {
 800cbaa:	4930      	ldr	r1, [pc, #192]	; (800cc6c <theme_apply+0xcac>)
 800cbac:	4620      	mov	r0, r4
 800cbae:	f00f f8d9 	bl	801bd64 <lv_obj_check_type>
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	b130      	cbz	r0, 800cbc4 <theme_apply+0xc04>
        lv_obj_add_style(obj, &styles->menu_main_cont, 0);
 800cbb6:	4e1c      	ldr	r6, [pc, #112]	; (800cc28 <theme_apply+0xc68>)
 800cbb8:	462a      	mov	r2, r5
 800cbba:	6831      	ldr	r1, [r6, #0]
 800cbbc:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 800cbc0:	f7ff ba31 	b.w	800c026 <theme_apply+0x66>
    else if(lv_obj_check_type(obj, &lv_menu_cont_class)) {
 800cbc4:	492a      	ldr	r1, [pc, #168]	; (800cc70 <theme_apply+0xcb0>)
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f00f f8cc 	bl	801bd64 <lv_obj_check_type>
 800cbcc:	b1e8      	cbz	r0, 800cc0a <theme_apply+0xc4a>
        lv_obj_add_style(obj, &styles->menu_cont, 0);
 800cbce:	4d16      	ldr	r5, [pc, #88]	; (800cc28 <theme_apply+0xc68>)
 800cbd0:	4632      	mov	r2, r6
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	6829      	ldr	r1, [r5, #0]
 800cbd6:	f501 71d4 	add.w	r1, r1, #424	; 0x1a8
 800cbda:	f011 f814 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->menu_pressed, LV_STATE_PRESSED);
 800cbde:	6829      	ldr	r1, [r5, #0]
 800cbe0:	2220      	movs	r2, #32
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
 800cbe8:	f011 f80d 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_STATE_PRESSED | LV_STATE_CHECKED);
 800cbec:	6829      	ldr	r1, [r5, #0]
 800cbee:	2221      	movs	r2, #33	; 0x21
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	3130      	adds	r1, #48	; 0x30
 800cbf4:	f011 f807 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_STATE_CHECKED);
 800cbf8:	6829      	ldr	r1, [r5, #0]
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	3130      	adds	r1, #48	; 0x30
 800cc00:	f011 f801 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_STATE_FOCUS_KEY);
 800cc04:	6829      	ldr	r1, [r5, #0]
 800cc06:	2204      	movs	r2, #4
 800cc08:	e5c6      	b.n	800c798 <theme_apply+0x7d8>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_header_cont_class) ||
 800cc0a:	491a      	ldr	r1, [pc, #104]	; (800cc74 <theme_apply+0xcb4>)
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	f00f f8a9 	bl	801bd64 <lv_obj_check_type>
 800cc12:	b388      	cbz	r0, 800cc78 <theme_apply+0xcb8>
        lv_obj_add_style(obj, &styles->menu_header_cont, 0);
 800cc14:	4b04      	ldr	r3, [pc, #16]	; (800cc28 <theme_apply+0xc68>)
 800cc16:	2200      	movs	r2, #0
 800cc18:	6819      	ldr	r1, [r3, #0]
 800cc1a:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 800cc1e:	f7ff ba0f 	b.w	800c040 <theme_apply+0x80>
 800cc22:	bf00      	nop
 800cc24:	080292a4 	.word	0x080292a4
 800cc28:	240011d0 	.word	0x240011d0
 800cc2c:	08029aa0 	.word	0x08029aa0
 800cc30:	00010040 	.word	0x00010040
 800cc34:	00070002 	.word	0x00070002
 800cc38:	08028dfc 	.word	0x08028dfc
 800cc3c:	08028e48 	.word	0x08028e48
 800cc40:	08028e64 	.word	0x08028e64
 800cc44:	0802911c 	.word	0x0802911c
 800cc48:	24010e31 	.word	0x24010e31
 800cc4c:	00050080 	.word	0x00050080
 800cc50:	00050020 	.word	0x00050020
 800cc54:	00050001 	.word	0x00050001
 800cc58:	0802918c 	.word	0x0802918c
 800cc5c:	08029154 	.word	0x08029154
 800cc60:	08029170 	.word	0x08029170
 800cc64:	08029288 	.word	0x08029288
 800cc68:	080291fc 	.word	0x080291fc
 800cc6c:	080291e0 	.word	0x080291e0
 800cc70:	08029250 	.word	0x08029250
 800cc74:	080291a8 	.word	0x080291a8
            lv_obj_check_type(obj, &lv_menu_main_header_cont_class)) {
 800cc78:	4965      	ldr	r1, [pc, #404]	; (800ce10 <theme_apply+0xe50>)
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f00f f872 	bl	801bd64 <lv_obj_check_type>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_header_cont_class) ||
 800cc80:	4606      	mov	r6, r0
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d1c6      	bne.n	800cc14 <theme_apply+0xc54>
    else if(lv_obj_check_type(obj, &lv_menu_page_class)) {
 800cc86:	4963      	ldr	r1, [pc, #396]	; (800ce14 <theme_apply+0xe54>)
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f00f f86b 	bl	801bd64 <lv_obj_check_type>
 800cc8e:	4605      	mov	r5, r0
 800cc90:	b130      	cbz	r0, 800cca0 <theme_apply+0xce0>
        lv_obj_add_style(obj, &styles->menu_page, 0);
 800cc92:	4d61      	ldr	r5, [pc, #388]	; (800ce18 <theme_apply+0xe58>)
 800cc94:	4632      	mov	r2, r6
 800cc96:	6829      	ldr	r1, [r5, #0]
 800cc98:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
 800cc9c:	f7ff b99a 	b.w	800bfd4 <theme_apply+0x14>
    else if(lv_obj_check_type(obj, &lv_menu_section_class)) {
 800cca0:	495e      	ldr	r1, [pc, #376]	; (800ce1c <theme_apply+0xe5c>)
 800cca2:	4620      	mov	r0, r4
 800cca4:	f00f f85e 	bl	801bd64 <lv_obj_check_type>
 800cca8:	4606      	mov	r6, r0
 800ccaa:	b130      	cbz	r0, 800ccba <theme_apply+0xcfa>
        lv_obj_add_style(obj, &styles->menu_section, 0);
 800ccac:	4b5a      	ldr	r3, [pc, #360]	; (800ce18 <theme_apply+0xe58>)
 800ccae:	462a      	mov	r2, r5
 800ccb0:	6819      	ldr	r1, [r3, #0]
 800ccb2:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
 800ccb6:	f7ff b9c3 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_menu_separator_class)) {
 800ccba:	4959      	ldr	r1, [pc, #356]	; (800ce20 <theme_apply+0xe60>)
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f00f f851 	bl	801bd64 <lv_obj_check_type>
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	b130      	cbz	r0, 800ccd4 <theme_apply+0xd14>
        lv_obj_add_style(obj, &styles->menu_separator, 0);
 800ccc6:	4b54      	ldr	r3, [pc, #336]	; (800ce18 <theme_apply+0xe58>)
 800ccc8:	4632      	mov	r2, r6
 800ccca:	6819      	ldr	r1, [r3, #0]
 800cccc:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
 800ccd0:	f7ff b9b6 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_msgbox_class)) {
 800ccd4:	4953      	ldr	r1, [pc, #332]	; (800ce24 <theme_apply+0xe64>)
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f00f f844 	bl	801bd64 <lv_obj_check_type>
 800ccdc:	4607      	mov	r7, r0
 800ccde:	b160      	cbz	r0, 800ccfa <theme_apply+0xd3a>
        lv_obj_add_style(obj, &styles->card, 0);
 800cce0:	4e4d      	ldr	r6, [pc, #308]	; (800ce18 <theme_apply+0xe58>)
 800cce2:	462a      	mov	r2, r5
 800cce4:	4620      	mov	r0, r4
 800cce6:	6831      	ldr	r1, [r6, #0]
 800cce8:	3118      	adds	r1, #24
 800ccea:	f010 ff8c 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->msgbox_bg, 0);
 800ccee:	6831      	ldr	r1, [r6, #0]
 800ccf0:	462a      	mov	r2, r5
 800ccf2:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
 800ccf6:	f7ff b9a3 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_msgbox_backdrop_class)) {
 800ccfa:	494b      	ldr	r1, [pc, #300]	; (800ce28 <theme_apply+0xe68>)
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f00f f831 	bl	801bd64 <lv_obj_check_type>
 800cd02:	4606      	mov	r6, r0
 800cd04:	b130      	cbz	r0, 800cd14 <theme_apply+0xd54>
        lv_obj_add_style(obj, &styles->msgbox_backdrop_bg, 0);
 800cd06:	4b44      	ldr	r3, [pc, #272]	; (800ce18 <theme_apply+0xe58>)
 800cd08:	463a      	mov	r2, r7
 800cd0a:	6819      	ldr	r1, [r3, #0]
 800cd0c:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800cd10:	f7ff b996 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_spinbox_class)) {
 800cd14:	4945      	ldr	r1, [pc, #276]	; (800ce2c <theme_apply+0xe6c>)
 800cd16:	4620      	mov	r0, r4
 800cd18:	f00f f824 	bl	801bd64 <lv_obj_check_type>
 800cd1c:	4605      	mov	r5, r0
 800cd1e:	b1e0      	cbz	r0, 800cd5a <theme_apply+0xd9a>
        lv_obj_add_style(obj, &styles->card, 0);
 800cd20:	4d3d      	ldr	r5, [pc, #244]	; (800ce18 <theme_apply+0xe58>)
 800cd22:	4632      	mov	r2, r6
 800cd24:	4620      	mov	r0, r4
 800cd26:	6829      	ldr	r1, [r5, #0]
 800cd28:	3118      	adds	r1, #24
 800cd2a:	f010 ff6c 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 800cd2e:	6829      	ldr	r1, [r5, #0]
 800cd30:	4632      	mov	r2, r6
 800cd32:	4620      	mov	r0, r4
 800cd34:	3178      	adds	r1, #120	; 0x78
 800cd36:	f010 ff66 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 800cd3a:	6829      	ldr	r1, [r5, #0]
 800cd3c:	2204      	movs	r2, #4
 800cd3e:	4620      	mov	r0, r4
 800cd40:	31a0      	adds	r1, #160	; 0xa0
 800cd42:	f010 ff60 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 800cd46:	6829      	ldr	r1, [r5, #0]
 800cd48:	2208      	movs	r2, #8
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	31a8      	adds	r1, #168	; 0xa8
 800cd4e:	f010 ff5a 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_CURSOR);
 800cd52:	6829      	ldr	r1, [r5, #0]
 800cd54:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800cd58:	e51e      	b.n	800c798 <theme_apply+0x7d8>
    else if(lv_obj_check_type(obj, &lv_tileview_class)) {
 800cd5a:	4935      	ldr	r1, [pc, #212]	; (800ce30 <theme_apply+0xe70>)
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f00f f801 	bl	801bd64 <lv_obj_check_type>
 800cd62:	b120      	cbz	r0, 800cd6e <theme_apply+0xdae>
        lv_obj_add_style(obj, &styles->scr, 0);
 800cd64:	4e2c      	ldr	r6, [pc, #176]	; (800ce18 <theme_apply+0xe58>)
 800cd66:	462a      	mov	r2, r5
 800cd68:	6831      	ldr	r1, [r6, #0]
 800cd6a:	f7ff b95c 	b.w	800c026 <theme_apply+0x66>
    else if(lv_obj_check_type(obj, &lv_tileview_tile_class)) {
 800cd6e:	4931      	ldr	r1, [pc, #196]	; (800ce34 <theme_apply+0xe74>)
 800cd70:	4620      	mov	r0, r4
 800cd72:	f00e fff7 	bl	801bd64 <lv_obj_check_type>
 800cd76:	b110      	cbz	r0, 800cd7e <theme_apply+0xdbe>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 800cd78:	4d27      	ldr	r5, [pc, #156]	; (800ce18 <theme_apply+0xe58>)
 800cd7a:	f7ff b92e 	b.w	800bfda <theme_apply+0x1a>
    else if(lv_obj_check_type(obj, &lv_tabview_class)) {
 800cd7e:	492e      	ldr	r1, [pc, #184]	; (800ce38 <theme_apply+0xe78>)
 800cd80:	4620      	mov	r0, r4
 800cd82:	f00e ffef 	bl	801bd64 <lv_obj_check_type>
 800cd86:	b138      	cbz	r0, 800cd98 <theme_apply+0xdd8>
        lv_obj_add_style(obj, &styles->scr, 0);
 800cd88:	4d23      	ldr	r5, [pc, #140]	; (800ce18 <theme_apply+0xe58>)
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	6829      	ldr	r1, [r5, #0]
 800cd90:	f010 ff39 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 800cd94:	6829      	ldr	r1, [r5, #0]
 800cd96:	e635      	b.n	800ca04 <theme_apply+0xa44>
    else if(lv_obj_check_type(obj, &lv_win_class)) {
 800cd98:	4928      	ldr	r1, [pc, #160]	; (800ce3c <theme_apply+0xe7c>)
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f00e ffe2 	bl	801bd64 <lv_obj_check_type>
 800cda0:	4605      	mov	r5, r0
 800cda2:	b128      	cbz	r0, 800cdb0 <theme_apply+0xdf0>
        lv_obj_add_style(obj, &styles->clip_corner, 0);
 800cda4:	4b1c      	ldr	r3, [pc, #112]	; (800ce18 <theme_apply+0xe58>)
 800cda6:	2200      	movs	r2, #0
 800cda8:	6819      	ldr	r1, [r3, #0]
 800cdaa:	31c0      	adds	r1, #192	; 0xc0
 800cdac:	f7ff b948 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_colorwheel_class)) {
 800cdb0:	4923      	ldr	r1, [pc, #140]	; (800ce40 <theme_apply+0xe80>)
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f00e ffd6 	bl	801bd64 <lv_obj_check_type>
 800cdb8:	4606      	mov	r6, r0
 800cdba:	b1d0      	cbz	r0, 800cdf2 <theme_apply+0xe32>
        lv_obj_add_style(obj, &styles->colorwheel_main, 0);
 800cdbc:	4e16      	ldr	r6, [pc, #88]	; (800ce18 <theme_apply+0xe58>)
 800cdbe:	462a      	mov	r2, r5
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	6831      	ldr	r1, [r6, #0]
 800cdc4:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 800cdc8:	f010 ff1d 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, 0);
 800cdcc:	6831      	ldr	r1, [r6, #0]
 800cdce:	462a      	mov	r2, r5
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	3180      	adds	r1, #128	; 0x80
 800cdd4:	f010 ff17 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 800cdd8:	6831      	ldr	r1, [r6, #0]
 800cdda:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800cdde:	4620      	mov	r0, r4
 800cde0:	3150      	adds	r1, #80	; 0x50
 800cde2:	f010 ff10 	bl	801dc06 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_KNOB);
 800cde6:	6831      	ldr	r1, [r6, #0]
 800cde8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800cdec:	3180      	adds	r1, #128	; 0x80
 800cdee:	f7ff b927 	b.w	800c040 <theme_apply+0x80>
    else if(lv_obj_check_type(obj, &lv_led_class)) {
 800cdf2:	4914      	ldr	r1, [pc, #80]	; (800ce44 <theme_apply+0xe84>)
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f00e ffb5 	bl	801bd64 <lv_obj_check_type>
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	f43f a9b8 	beq.w	800c170 <theme_apply+0x1b0>
        lv_obj_add_style(obj, &styles->led, 0);
 800ce00:	4b05      	ldr	r3, [pc, #20]	; (800ce18 <theme_apply+0xe58>)
 800ce02:	4632      	mov	r2, r6
 800ce04:	6819      	ldr	r1, [r3, #0]
 800ce06:	f501 7110 	add.w	r1, r1, #576	; 0x240
 800ce0a:	f7ff b919 	b.w	800c040 <theme_apply+0x80>
 800ce0e:	bf00      	nop
 800ce10:	080291c4 	.word	0x080291c4
 800ce14:	0802926c 	.word	0x0802926c
 800ce18:	240011d0 	.word	0x240011d0
 800ce1c:	08029234 	.word	0x08029234
 800ce20:	08029218 	.word	0x08029218
 800ce24:	080292dc 	.word	0x080292dc
 800ce28:	080292c0 	.word	0x080292c0
 800ce2c:	080292f8 	.word	0x080292f8
 800ce30:	08029368 	.word	0x08029368
 800ce34:	0802934c 	.word	0x0802934c
 800ce38:	08029330 	.word	0x08029330
 800ce3c:	08029384 	.word	0x08029384
 800ce40:	08028e9c 	.word	0x08028e9c
 800ce44:	08029138 	.word	0x08029138

0800ce48 <grey_filter_cb>:
{
 800ce48:	b538      	push	{r3, r4, r5, lr}
    if(theme.flags & MODE_DARK) return lv_color_mix(lv_palette_darken(LV_PALETTE_GREY, 2), color, opa);
 800ce4a:	4b09      	ldr	r3, [pc, #36]	; (800ce70 <grey_filter_cb+0x28>)
{
 800ce4c:	460c      	mov	r4, r1
 800ce4e:	4615      	mov	r5, r2
    if(theme.flags & MODE_DARK) return lv_color_mix(lv_palette_darken(LV_PALETTE_GREY, 2), color, opa);
 800ce50:	2102      	movs	r1, #2
 800ce52:	6a1b      	ldr	r3, [r3, #32]
 800ce54:	2012      	movs	r0, #18
 800ce56:	07db      	lsls	r3, r3, #31
 800ce58:	d507      	bpl.n	800ce6a <grey_filter_cb+0x22>
 800ce5a:	f005 fbab 	bl	80125b4 <lv_palette_darken>
    else return lv_color_mix(lv_palette_lighten(LV_PALETTE_GREY, 2), color, opa);
 800ce5e:	462a      	mov	r2, r5
 800ce60:	4621      	mov	r1, r4
}
 800ce62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    else return lv_color_mix(lv_palette_lighten(LV_PALETTE_GREY, 2), color, opa);
 800ce66:	f016 b84e 	b.w	8022f06 <lv_color_mix>
 800ce6a:	f005 fb91 	bl	8012590 <lv_palette_lighten>
 800ce6e:	e7f6      	b.n	800ce5e <grey_filter_cb+0x16>
 800ce70:	240011ac 	.word	0x240011ac

0800ce74 <style_init_reset>:
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) {
 800ce74:	4b03      	ldr	r3, [pc, #12]	; (800ce84 <style_init_reset+0x10>)
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	b10b      	cbz	r3, 800ce7e <style_init_reset+0xa>
        lv_style_reset(style);
 800ce7a:	f017 beef 	b.w	8024c5c <lv_style_reset>
    }
    else {
        lv_style_init(style);
 800ce7e:	f017 bee9 	b.w	8024c54 <lv_style_init>
 800ce82:	bf00      	nop
 800ce84:	24010e30 	.word	0x24010e30

0800ce88 <lv_theme_default_init>:
{
 800ce88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 800ce8c:	4da2      	ldr	r5, [pc, #648]	; (800d118 <lv_theme_default_init+0x290>)
{
 800ce8e:	b085      	sub	sp, #20
 800ce90:	4698      	mov	r8, r3
 800ce92:	468a      	mov	sl, r1
    if(!lv_theme_default_is_inited()) {
 800ce94:	682b      	ldr	r3, [r5, #0]
{
 800ce96:	4691      	mov	r9, r2
 800ce98:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ce9a:	4ca0      	ldr	r4, [pc, #640]	; (800d11c <lv_theme_default_init+0x294>)
 800ce9c:	9003      	str	r0, [sp, #12]
    if(!lv_theme_default_is_inited()) {
 800ce9e:	b93b      	cbnz	r3, 800ceb0 <lv_theme_default_init+0x28>
        inited = false;
 800cea0:	4a9f      	ldr	r2, [pc, #636]	; (800d120 <lv_theme_default_init+0x298>)
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 800cea2:	f44f 7012 	mov.w	r0, #584	; 0x248
        inited = false;
 800cea6:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 800cea8:	f005 fc02 	bl	80126b0 <lv_mem_alloc>
 800ceac:	6028      	str	r0, [r5, #0]
        styles = (my_theme_styles_t *)LV_GC_ROOT(_lv_theme_default_styles);
 800ceae:	6020      	str	r0, [r4, #0]
    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
 800ceb0:	f005 f8ec 	bl	801208c <lv_disp_get_default>
 800ceb4:	f005 f8f0 	bl	8012098 <lv_disp_get_hor_res>
 800ceb8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 800cebc:	f341 819f 	ble.w	800e1fe <lv_theme_default_init+0x1376>
    else if(LV_HOR_RES < 720) disp_size = DISP_MEDIUM;
 800cec0:	f005 f8e4 	bl	801208c <lv_disp_get_default>
 800cec4:	f005 f8e8 	bl	8012098 <lv_disp_get_hor_res>
 800cec8:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 800cecc:	bfb4      	ite	lt
 800cece:	2302      	movlt	r3, #2
 800ced0:	2301      	movge	r3, #1
    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
 800ced2:	4e94      	ldr	r6, [pc, #592]	; (800d124 <lv_theme_default_init+0x29c>)
    theme.disp = disp;
 800ced4:	4d94      	ldr	r5, [pc, #592]	; (800d128 <lv_theme_default_init+0x2a0>)
    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
 800ced6:	7033      	strb	r3, [r6, #0]
    theme.disp = disp;
 800ced8:	9b03      	ldr	r3, [sp, #12]
    theme.font_large = font;
 800ceda:	61ef      	str	r7, [r5, #28]
    theme.disp = disp;
 800cedc:	60eb      	str	r3, [r5, #12]
    theme.apply_cb = theme_apply;
 800cede:	4b93      	ldr	r3, [pc, #588]	; (800d12c <lv_theme_default_init+0x2a4>)
 800cee0:	f8df b24c 	ldr.w	fp, [pc, #588]	; 800d130 <lv_theme_default_init+0x2a8>
    theme.color_primary = color_primary;
 800cee4:	f8a5 a010 	strh.w	sl, [r5, #16]
    theme.color_secondary = color_secondary;
 800cee8:	f8a5 9012 	strh.w	r9, [r5, #18]
    theme.apply_cb = theme_apply;
 800ceec:	602b      	str	r3, [r5, #0]
    theme.flags = dark ? MODE_DARK : 0;
 800ceee:	f8c5 8020 	str.w	r8, [r5, #32]
    theme.font_normal = font;
 800cef2:	e9c5 7705 	strd	r7, r7, [r5, #20]
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 800cef6:	4f8f      	ldr	r7, [pc, #572]	; (800d134 <lv_theme_default_init+0x2ac>)
 800cef8:	f1b8 0f00 	cmp.w	r8, #0
 800cefc:	f001 8182 	beq.w	800e204 <lv_theme_default_init+0x137c>
 800cf00:	f241 03a3 	movw	r3, #4259	; 0x10a3
 800cf04:	f8ab 3000 	strh.w	r3, [fp]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 800cf08:	2105      	movs	r1, #5
 800cf0a:	2012      	movs	r0, #18
 800cf0c:	f005 fb40 	bl	8012590 <lv_palette_lighten>
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 800cf10:	6a2b      	ldr	r3, [r5, #32]
 800cf12:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800d138 <lv_theme_default_init+0x2b0>
 800cf16:	f013 0f01 	tst.w	r3, #1
 800cf1a:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800d13c <lv_theme_default_init+0x2b4>
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 800cf1e:	8038      	strh	r0, [r7, #0]
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 800cf20:	f001 8180 	beq.w	800e224 <lv_theme_default_init+0x139c>
 800cf24:	f642 1346 	movw	r3, #10566	; 0x2946
 800cf28:	f8a9 3000 	strh.w	r3, [r9]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 800cf2c:	f642 1386 	movw	r3, #10630	; 0x2986
 800cf30:	f8a8 3000 	strh.w	r3, [r8]
    style_init_reset(&styles->transition_delayed);
 800cf34:	6820      	ldr	r0, [r4, #0]
    lv_style_transition_dsc_init(&trans_delayed, trans_props, lv_anim_path_linear, TRANSITION_TIME, 70, NULL);
 800cf36:	f04f 0a00 	mov.w	sl, #0
    style_init_reset(&styles->transition_delayed);
 800cf3a:	30d0      	adds	r0, #208	; 0xd0
 800cf3c:	f7ff ff9a 	bl	800ce74 <style_init_reset>
    style_init_reset(&styles->transition_normal);
 800cf40:	6820      	ldr	r0, [r4, #0]
 800cf42:	30d8      	adds	r0, #216	; 0xd8
 800cf44:	f7ff ff96 	bl	800ce74 <style_init_reset>
    lv_style_transition_dsc_init(&trans_delayed, trans_props, lv_anim_path_linear, TRANSITION_TIME, 70, NULL);
 800cf48:	2346      	movs	r3, #70	; 0x46
 800cf4a:	4a7d      	ldr	r2, [pc, #500]	; (800d140 <lv_theme_default_init+0x2b8>)
 800cf4c:	497d      	ldr	r1, [pc, #500]	; (800d144 <lv_theme_default_init+0x2bc>)
 800cf4e:	487e      	ldr	r0, [pc, #504]	; (800d148 <lv_theme_default_init+0x2c0>)
 800cf50:	e9cd 3a00 	strd	r3, sl, [sp]
 800cf54:	2350      	movs	r3, #80	; 0x50
 800cf56:	f005 fcab 	bl	80128b0 <lv_style_transition_dsc_init>
    lv_style_transition_dsc_init(&trans_normal, trans_props, lv_anim_path_linear, TRANSITION_TIME, 0, NULL);
 800cf5a:	2350      	movs	r3, #80	; 0x50
 800cf5c:	4a78      	ldr	r2, [pc, #480]	; (800d140 <lv_theme_default_init+0x2b8>)
 800cf5e:	4979      	ldr	r1, [pc, #484]	; (800d144 <lv_theme_default_init+0x2bc>)
 800cf60:	487a      	ldr	r0, [pc, #488]	; (800d14c <lv_theme_default_init+0x2c4>)
 800cf62:	e9cd aa00 	strd	sl, sl, [sp]
 800cf66:	f005 fca3 	bl	80128b0 <lv_style_transition_dsc_init>
    lv_style_set_transition(&styles->transition_delayed, &trans_delayed); /*Go back to default state with delay*/
 800cf6a:	6820      	ldr	r0, [r4, #0]
 800cf6c:	4976      	ldr	r1, [pc, #472]	; (800d148 <lv_theme_default_init+0x2c0>)
 800cf6e:	30d0      	adds	r0, #208	; 0xd0
 800cf70:	f018 f891 	bl	8025096 <lv_style_set_transition>
    lv_style_set_transition(&styles->transition_normal, &trans_normal); /*Go back to default state with delay*/
 800cf74:	6820      	ldr	r0, [r4, #0]
 800cf76:	4975      	ldr	r1, [pc, #468]	; (800d14c <lv_theme_default_init+0x2c4>)
 800cf78:	30d8      	adds	r0, #216	; 0xd8
 800cf7a:	f018 f88c 	bl	8025096 <lv_style_set_transition>
    style_init_reset(&styles->scrollbar);
 800cf7e:	6820      	ldr	r0, [r4, #0]
 800cf80:	3008      	adds	r0, #8
 800cf82:	f7ff ff77 	bl	800ce74 <style_init_reset>
    lv_color_t sb_color = (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 800cf86:	6a2b      	ldr	r3, [r5, #32]
                                                                        2) : lv_palette_main(LV_PALETTE_GREY);
 800cf88:	07da      	lsls	r2, r3, #31
 800cf8a:	f141 8157 	bpl.w	800e23c <lv_theme_default_init+0x13b4>
    lv_color_t sb_color = (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 800cf8e:	2102      	movs	r1, #2
 800cf90:	2012      	movs	r0, #18
 800cf92:	f005 fb0f 	bl	80125b4 <lv_palette_darken>
                                                                        2) : lv_palette_main(LV_PALETTE_GREY);
 800cf96:	4601      	mov	r1, r0
    lv_style_set_bg_color(&styles->scrollbar, sb_color);
 800cf98:	6820      	ldr	r0, [r4, #0]
 800cf9a:	3008      	adds	r0, #8
 800cf9c:	f017 ffd3 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_radius(&styles->scrollbar, LV_RADIUS_CIRCLE);
 800cfa0:	6820      	ldr	r0, [r4, #0]
 800cfa2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800cfa6:	3008      	adds	r0, #8
 800cfa8:	f018 f861 	bl	802506e <lv_style_set_radius>
    lv_style_set_pad_all(&styles->scrollbar, lv_disp_dpx(theme.disp, 7));
 800cfac:	6823      	ldr	r3, [r4, #0]
 800cfae:	2107      	movs	r1, #7
 800cfb0:	68e8      	ldr	r0, [r5, #12]
 800cfb2:	f103 0a08 	add.w	sl, r3, #8
 * @param n     the number of pixels to scale
 * @return      `n x current_dpi/160`
 */
static inline lv_coord_t lv_disp_dpx(const lv_disp_t * disp, lv_coord_t n)
{
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 800cfb6:	f016 f816 	bl	8022fe6 <lv_disp_dpx.part.0>
 800cfba:	4601      	mov	r1, r0
 800cfbc:	4650      	mov	r0, sl
 800cfbe:	f015 ffff 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_width(&styles->scrollbar,  lv_disp_dpx(theme.disp, 5));
 800cfc2:	6823      	ldr	r3, [r4, #0]
 800cfc4:	2105      	movs	r1, #5
 800cfc6:	68e8      	ldr	r0, [r5, #12]
 800cfc8:	f103 0a08 	add.w	sl, r3, #8
 800cfcc:	f016 f80b 	bl	8022fe6 <lv_disp_dpx.part.0>
 800cfd0:	4601      	mov	r1, r0
 800cfd2:	4650      	mov	r0, sl
 800cfd4:	f017 ff87 	bl	8024ee6 <lv_style_set_width>
    lv_style_set_bg_opa(&styles->scrollbar,  LV_OPA_40);
 800cfd8:	6820      	ldr	r0, [r4, #0]
 800cfda:	2166      	movs	r1, #102	; 0x66
 800cfdc:	3008      	adds	r0, #8
 800cfde:	f017 ffbb 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_transition(&styles->scrollbar, &trans_normal);
 800cfe2:	6820      	ldr	r0, [r4, #0]
 800cfe4:	4959      	ldr	r1, [pc, #356]	; (800d14c <lv_theme_default_init+0x2c4>)
 800cfe6:	3008      	adds	r0, #8
 800cfe8:	f018 f855 	bl	8025096 <lv_style_set_transition>
    style_init_reset(&styles->scrollbar_scrolled);
 800cfec:	6820      	ldr	r0, [r4, #0]
 800cfee:	3010      	adds	r0, #16
 800cff0:	f7ff ff40 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_opa(&styles->scrollbar_scrolled,  LV_OPA_COVER);
 800cff4:	6820      	ldr	r0, [r4, #0]
 800cff6:	21ff      	movs	r1, #255	; 0xff
 800cff8:	3010      	adds	r0, #16
 800cffa:	f017 ffad 	bl	8024f58 <lv_style_set_bg_opa>
    style_init_reset(&styles->scr);
 800cffe:	6820      	ldr	r0, [r4, #0]
 800d000:	f7ff ff38 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_opa(&styles->scr, LV_OPA_COVER);
 800d004:	21ff      	movs	r1, #255	; 0xff
 800d006:	6820      	ldr	r0, [r4, #0]
 800d008:	f017 ffa6 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, color_scr);
 800d00c:	f8bb 1000 	ldrh.w	r1, [fp]
 800d010:	6820      	ldr	r0, [r4, #0]
 800d012:	f017 ff98 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, color_text);
 800d016:	8839      	ldrh	r1, [r7, #0]
 800d018:	6820      	ldr	r0, [r4, #0]
 800d01a:	f018 f813 	bl	8025044 <lv_style_set_text_color>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 800d01e:	7833      	ldrb	r3, [r6, #0]
 800d020:	f8d4 a000 	ldr.w	sl, [r4]
 800d024:	2b01      	cmp	r3, #1
 800d026:	f041 810e 	bne.w	800e246 <lv_theme_default_init+0x13be>
 800d02a:	210e      	movs	r1, #14
 800d02c:	68e8      	ldr	r0, [r5, #12]
 800d02e:	f015 ffda 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d032:	4601      	mov	r1, r0
 800d034:	4650      	mov	r0, sl
 800d036:	f017 ff7e 	bl	8024f36 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 800d03a:	7833      	ldrb	r3, [r6, #0]
 800d03c:	f8d4 a000 	ldr.w	sl, [r4]
 800d040:	2b01      	cmp	r3, #1
 800d042:	f041 8107 	bne.w	800e254 <lv_theme_default_init+0x13cc>
 800d046:	210e      	movs	r1, #14
 800d048:	68e8      	ldr	r0, [r5, #12]
 800d04a:	f015 ffcc 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d04e:	4601      	mov	r1, r0
 800d050:	4650      	mov	r0, sl
 800d052:	f017 ff74 	bl	8024f3e <lv_style_set_pad_column>
    style_init_reset(&styles->card);
 800d056:	6820      	ldr	r0, [r4, #0]
 800d058:	3018      	adds	r0, #24
 800d05a:	f7ff ff0b 	bl	800ce74 <style_init_reset>
    lv_style_set_radius(&styles->card, RADIUS_DEFAULT);
 800d05e:	6823      	ldr	r3, [r4, #0]
 800d060:	68e8      	ldr	r0, [r5, #12]
 800d062:	f103 0a18 	add.w	sl, r3, #24
 800d066:	7833      	ldrb	r3, [r6, #0]
 800d068:	2b01      	cmp	r3, #1
 800d06a:	bf0c      	ite	eq
 800d06c:	210c      	moveq	r1, #12
 800d06e:	2108      	movne	r1, #8
 800d070:	f015 ffb9 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d074:	4601      	mov	r1, r0
 800d076:	4650      	mov	r0, sl
 800d078:	f017 fff9 	bl	802506e <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->card, LV_OPA_COVER);
 800d07c:	6820      	ldr	r0, [r4, #0]
 800d07e:	21ff      	movs	r1, #255	; 0xff
 800d080:	3018      	adds	r0, #24
 800d082:	f017 ff69 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->card, color_card);
 800d086:	6820      	ldr	r0, [r4, #0]
 800d088:	f8b9 1000 	ldrh.w	r1, [r9]
 800d08c:	3018      	adds	r0, #24
 800d08e:	f017 ff5a 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->card, color_grey);
 800d092:	6820      	ldr	r0, [r4, #0]
 800d094:	f8b8 1000 	ldrh.w	r1, [r8]
 800d098:	3018      	adds	r0, #24
 800d09a:	f017 ff6e 	bl	8024f7a <lv_style_set_border_color>
    lv_style_set_border_width(&styles->card, BORDER_WIDTH);
 800d09e:	6823      	ldr	r3, [r4, #0]
 800d0a0:	2102      	movs	r1, #2
 800d0a2:	68e8      	ldr	r0, [r5, #12]
 800d0a4:	f103 0a18 	add.w	sl, r3, #24
 800d0a8:	f015 ff9d 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d0ac:	4601      	mov	r1, r0
 800d0ae:	4650      	mov	r0, sl
 800d0b0:	f017 ff70 	bl	8024f94 <lv_style_set_border_width>
    lv_style_set_border_post(&styles->card, true);
 800d0b4:	6820      	ldr	r0, [r4, #0]
 800d0b6:	2101      	movs	r1, #1
 800d0b8:	3018      	adds	r0, #24
 800d0ba:	f017 ff73 	bl	8024fa4 <lv_style_set_border_post>
    lv_style_set_text_color(&styles->card, color_text);
 800d0be:	6820      	ldr	r0, [r4, #0]
 800d0c0:	8839      	ldrh	r1, [r7, #0]
 800d0c2:	3018      	adds	r0, #24
 800d0c4:	f017 ffbe 	bl	8025044 <lv_style_set_text_color>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	f103 0a18 	add.w	sl, r3, #24
 800d0ce:	7833      	ldrb	r3, [r6, #0]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	f041 80c6 	bne.w	800e262 <lv_theme_default_init+0x13da>
 800d0d6:	2118      	movs	r1, #24
 800d0d8:	68e8      	ldr	r0, [r5, #12]
 800d0da:	f015 ff84 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d0de:	4601      	mov	r1, r0
 800d0e0:	4650      	mov	r0, sl
 800d0e2:	f015 ff6d 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 800d0e6:	6823      	ldr	r3, [r4, #0]
 800d0e8:	f103 0a18 	add.w	sl, r3, #24
 800d0ec:	7833      	ldrb	r3, [r6, #0]
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	f041 80be 	bne.w	800e270 <lv_theme_default_init+0x13e8>
 800d0f4:	210e      	movs	r1, #14
 800d0f6:	68e8      	ldr	r0, [r5, #12]
 800d0f8:	f015 ff75 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d0fc:	4601      	mov	r1, r0
 800d0fe:	4650      	mov	r0, sl
 800d100:	f017 ff19 	bl	8024f36 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 800d104:	6823      	ldr	r3, [r4, #0]
 800d106:	f103 0a18 	add.w	sl, r3, #24
 800d10a:	7833      	ldrb	r3, [r6, #0]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	f041 80b6 	bne.w	800e27e <lv_theme_default_init+0x13f6>
 800d112:	210e      	movs	r1, #14
 800d114:	68e8      	ldr	r0, [r5, #12]
 800d116:	e01b      	b.n	800d150 <lv_theme_default_init+0x2c8>
 800d118:	24001208 	.word	0x24001208
 800d11c:	240011d0 	.word	0x240011d0
 800d120:	24010e30 	.word	0x24010e30
 800d124:	24010e31 	.word	0x24010e31
 800d128:	240011ac 	.word	0x240011ac
 800d12c:	0800bfc1 	.word	0x0800bfc1
 800d130:	24010d1c 	.word	0x24010d1c
 800d134:	24010d1a 	.word	0x24010d1a
 800d138:	24010d18 	.word	0x24010d18
 800d13c:	24010d16 	.word	0x24010d16
 800d140:	08024107 	.word	0x08024107
 800d144:	08029af2 	.word	0x08029af2
 800d148:	24001198 	.word	0x24001198
 800d14c:	24001184 	.word	0x24001184
 800d150:	f015 ff49 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d154:	4601      	mov	r1, r0
 800d156:	4650      	mov	r0, sl
 800d158:	f017 fef1 	bl	8024f3e <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->card, lv_palette_main(LV_PALETTE_GREY));
 800d15c:	6823      	ldr	r3, [r4, #0]
 800d15e:	2012      	movs	r0, #18
 800d160:	f103 0a18 	add.w	sl, r3, #24
 800d164:	f005 fa0a 	bl	801257c <lv_palette_main>
 800d168:	4601      	mov	r1, r0
 800d16a:	4650      	mov	r0, sl
 800d16c:	f017 ff50 	bl	8025010 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->card, lv_disp_dpx(theme.disp, 1));
 800d170:	6823      	ldr	r3, [r4, #0]
 800d172:	2101      	movs	r1, #1
 800d174:	68e8      	ldr	r0, [r5, #12]
 800d176:	f103 0a18 	add.w	sl, r3, #24
 800d17a:	f015 ff34 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d17e:	4601      	mov	r1, r0
 800d180:	4650      	mov	r0, sl
 800d182:	f017 ff41 	bl	8025008 <lv_style_set_line_width>
    style_init_reset(&styles->outline_primary);
 800d186:	6820      	ldr	r0, [r4, #0]
 800d188:	30a0      	adds	r0, #160	; 0xa0
 800d18a:	f7ff fe73 	bl	800ce74 <style_init_reset>
    lv_style_set_outline_color(&styles->outline_primary, theme.color_primary);
 800d18e:	6820      	ldr	r0, [r4, #0]
 800d190:	8a29      	ldrh	r1, [r5, #16]
 800d192:	30a0      	adds	r0, #160	; 0xa0
 800d194:	f017 ff0e 	bl	8024fb4 <lv_style_set_outline_color>
    lv_style_set_outline_width(&styles->outline_primary, OUTLINE_WIDTH);
 800d198:	6823      	ldr	r3, [r4, #0]
 800d19a:	2103      	movs	r1, #3
 800d19c:	68e8      	ldr	r0, [r5, #12]
 800d19e:	f103 0aa0 	add.w	sl, r3, #160	; 0xa0
 800d1a2:	f015 ff20 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d1a6:	4601      	mov	r1, r0
 800d1a8:	4650      	mov	r0, sl
 800d1aa:	f017 feff 	bl	8024fac <lv_style_set_outline_width>
    lv_style_set_outline_pad(&styles->outline_primary, OUTLINE_WIDTH);
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	2103      	movs	r1, #3
 800d1b2:	68e8      	ldr	r0, [r5, #12]
 800d1b4:	f103 0aa0 	add.w	sl, r3, #160	; 0xa0
 800d1b8:	f015 ff15 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d1bc:	4601      	mov	r1, r0
 800d1be:	4650      	mov	r0, sl
 800d1c0:	f017 ff05 	bl	8024fce <lv_style_set_outline_pad>
    lv_style_set_outline_opa(&styles->outline_primary, LV_OPA_50);
 800d1c4:	6820      	ldr	r0, [r4, #0]
 800d1c6:	217f      	movs	r1, #127	; 0x7f
 800d1c8:	30a0      	adds	r0, #160	; 0xa0
 800d1ca:	f017 fefc 	bl	8024fc6 <lv_style_set_outline_opa>
    style_init_reset(&styles->outline_secondary);
 800d1ce:	6820      	ldr	r0, [r4, #0]
 800d1d0:	30a8      	adds	r0, #168	; 0xa8
 800d1d2:	f7ff fe4f 	bl	800ce74 <style_init_reset>
    lv_style_set_outline_color(&styles->outline_secondary, theme.color_secondary);
 800d1d6:	6820      	ldr	r0, [r4, #0]
 800d1d8:	8a69      	ldrh	r1, [r5, #18]
 800d1da:	30a8      	adds	r0, #168	; 0xa8
 800d1dc:	f017 feea 	bl	8024fb4 <lv_style_set_outline_color>
    lv_style_set_outline_width(&styles->outline_secondary, OUTLINE_WIDTH);
 800d1e0:	6823      	ldr	r3, [r4, #0]
 800d1e2:	2103      	movs	r1, #3
 800d1e4:	68e8      	ldr	r0, [r5, #12]
 800d1e6:	f103 0aa8 	add.w	sl, r3, #168	; 0xa8
 800d1ea:	f015 fefc 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d1ee:	4601      	mov	r1, r0
 800d1f0:	4650      	mov	r0, sl
 800d1f2:	f017 fedb 	bl	8024fac <lv_style_set_outline_width>
    lv_style_set_outline_opa(&styles->outline_secondary, LV_OPA_50);
 800d1f6:	6820      	ldr	r0, [r4, #0]
 800d1f8:	217f      	movs	r1, #127	; 0x7f
 800d1fa:	30a8      	adds	r0, #168	; 0xa8
 800d1fc:	f017 fee3 	bl	8024fc6 <lv_style_set_outline_opa>
    style_init_reset(&styles->btn);
 800d200:	6820      	ldr	r0, [r4, #0]
 800d202:	3020      	adds	r0, #32
 800d204:	f7ff fe36 	bl	800ce74 <style_init_reset>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp,
 800d208:	6823      	ldr	r3, [r4, #0]
 800d20a:	f103 0a20 	add.w	sl, r3, #32
 800d20e:	7833      	ldrb	r3, [r6, #0]
 800d210:	2b01      	cmp	r3, #1
 800d212:	f041 803b 	bne.w	800e28c <lv_theme_default_init+0x1404>
 800d216:	2110      	movs	r1, #16
 800d218:	68e8      	ldr	r0, [r5, #12]
 800d21a:	f015 fee4 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d21e:	4601      	mov	r1, r0
 800d220:	4650      	mov	r0, sl
 800d222:	f017 ff24 	bl	802506e <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->btn, LV_OPA_COVER);
 800d226:	6820      	ldr	r0, [r4, #0]
 800d228:	21ff      	movs	r1, #255	; 0xff
 800d22a:	3020      	adds	r0, #32
 800d22c:	f017 fe94 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->btn, color_grey);
 800d230:	6820      	ldr	r0, [r4, #0]
 800d232:	f8b8 1000 	ldrh.w	r1, [r8]
 800d236:	3020      	adds	r0, #32
 800d238:	f017 fe85 	bl	8024f46 <lv_style_set_bg_color>
    if(!(theme.flags & MODE_DARK)) {
 800d23c:	6a2b      	ldr	r3, [r5, #32]
 800d23e:	f013 0a01 	ands.w	sl, r3, #1
 800d242:	d143      	bne.n	800d2cc <lv_theme_default_init+0x444>
        lv_style_set_shadow_color(&styles->btn, lv_palette_main(LV_PALETTE_GREY));
 800d244:	6823      	ldr	r3, [r4, #0]
 800d246:	2012      	movs	r0, #18
 800d248:	f103 0b20 	add.w	fp, r3, #32
 800d24c:	f005 f996 	bl	801257c <lv_palette_main>
 800d250:	4601      	mov	r1, r0
 800d252:	4658      	mov	r0, fp
 800d254:	f017 fecb 	bl	8024fee <lv_style_set_shadow_color>
        lv_style_set_shadow_width(&styles->btn, LV_DPX(3));
 800d258:	6823      	ldr	r3, [r4, #0]
 800d25a:	4650      	mov	r0, sl
 800d25c:	f103 0b20 	add.w	fp, r3, #32
 800d260:	f004 ff3a 	bl	80120d8 <lv_disp_get_dpi>
 800d264:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d268:	28ef      	cmp	r0, #239	; 0xef
 800d26a:	f341 8016 	ble.w	800e29a <lv_theme_default_init+0x1412>
 800d26e:	4650      	mov	r0, sl
 800d270:	f004 ff32 	bl	80120d8 <lv_disp_get_dpi>
 800d274:	2303      	movs	r3, #3
 800d276:	2150      	movs	r1, #80	; 0x50
 800d278:	fb00 1103 	mla	r1, r0, r3, r1
 800d27c:	23a0      	movs	r3, #160	; 0xa0
 800d27e:	fb91 f1f3 	sdiv	r1, r1, r3
 800d282:	b209      	sxth	r1, r1
 800d284:	4658      	mov	r0, fp
 800d286:	f017 fea6 	bl	8024fd6 <lv_style_set_shadow_width>
        lv_style_set_shadow_opa(&styles->btn, LV_OPA_50);
 800d28a:	6820      	ldr	r0, [r4, #0]
 800d28c:	217f      	movs	r1, #127	; 0x7f
 800d28e:	3020      	adds	r0, #32
 800d290:	f017 feb6 	bl	8025000 <lv_style_set_shadow_opa>
        lv_style_set_shadow_ofs_y(&styles->btn, lv_disp_dpx(theme.disp, LV_DPX(4)));
 800d294:	6823      	ldr	r3, [r4, #0]
 800d296:	2000      	movs	r0, #0
 800d298:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 800d29c:	f103 0a20 	add.w	sl, r3, #32
 800d2a0:	f004 ff1a 	bl	80120d8 <lv_disp_get_dpi>
 800d2a4:	283b      	cmp	r0, #59	; 0x3b
 800d2a6:	f340 87fb 	ble.w	800e2a0 <lv_theme_default_init+0x1418>
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	f004 ff14 	bl	80120d8 <lv_disp_get_dpi>
 800d2b0:	2328      	movs	r3, #40	; 0x28
 800d2b2:	f100 0114 	add.w	r1, r0, #20
 800d2b6:	fb91 f1f3 	sdiv	r1, r1, r3
 800d2ba:	b121      	cbz	r1, 800d2c6 <lv_theme_default_init+0x43e>
 800d2bc:	b209      	sxth	r1, r1
 800d2be:	4658      	mov	r0, fp
 800d2c0:	f015 fe91 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d2c4:	4601      	mov	r1, r0
 800d2c6:	4650      	mov	r0, sl
 800d2c8:	f017 fe89 	bl	8024fde <lv_style_set_shadow_ofs_y>
    lv_style_set_text_color(&styles->btn, color_text);
 800d2cc:	6820      	ldr	r0, [r4, #0]
 800d2ce:	8839      	ldrh	r1, [r7, #0]
 800d2d0:	3020      	adds	r0, #32
 800d2d2:	f017 feb7 	bl	8025044 <lv_style_set_text_color>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 800d2d6:	6823      	ldr	r3, [r4, #0]
 800d2d8:	f103 0a20 	add.w	sl, r3, #32
 800d2dc:	7833      	ldrb	r3, [r6, #0]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	f040 87e1 	bne.w	800e2a6 <lv_theme_default_init+0x141e>
 800d2e4:	2118      	movs	r1, #24
 800d2e6:	68e8      	ldr	r0, [r5, #12]
 800d2e8:	f015 fe7d 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d2ec:	4601      	mov	r1, r0
 800d2ee:	4650      	mov	r0, sl
 800d2f0:	f015 fe5b 	bl	8022faa <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 800d2f4:	6823      	ldr	r3, [r4, #0]
 800d2f6:	f103 0a20 	add.w	sl, r3, #32
 800d2fa:	7833      	ldrb	r3, [r6, #0]
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	f040 87d9 	bne.w	800e2b4 <lv_theme_default_init+0x142c>
 800d302:	210e      	movs	r1, #14
 800d304:	68e8      	ldr	r0, [r5, #12]
 800d306:	f015 fe6e 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d30a:	4601      	mov	r1, r0
 800d30c:	4650      	mov	r0, sl
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
}

static inline void lv_color_filter_dsc_init(lv_color_filter_dsc_t * dsc, lv_color_filter_cb_t cb)
{
    dsc->filter_cb = cb;
 800d30e:	f8df b220 	ldr.w	fp, [pc, #544]	; 800d530 <lv_theme_default_init+0x6a8>
 800d312:	f015 fe30 	bl	8022f76 <lv_style_set_pad_ver>
    lv_style_set_pad_column(&styles->btn, lv_disp_dpx(theme.disp, 5));
 800d316:	6823      	ldr	r3, [r4, #0]
 800d318:	2105      	movs	r1, #5
 800d31a:	68e8      	ldr	r0, [r5, #12]
 800d31c:	f103 0a20 	add.w	sl, r3, #32
 800d320:	f015 fe61 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d324:	4601      	mov	r1, r0
 800d326:	4650      	mov	r0, sl
 800d328:	f017 fe09 	bl	8024f3e <lv_style_set_pad_column>
    lv_style_set_pad_row(&styles->btn, lv_disp_dpx(theme.disp, 5));
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	2105      	movs	r1, #5
 800d330:	68e8      	ldr	r0, [r5, #12]
 800d332:	f103 0a20 	add.w	sl, r3, #32
 800d336:	f015 fe56 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d33a:	4601      	mov	r1, r0
 800d33c:	4650      	mov	r0, sl
 800d33e:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 800d534 <lv_theme_default_init+0x6ac>
 800d342:	f017 fdf8 	bl	8024f36 <lv_style_set_pad_row>
 800d346:	4b7c      	ldr	r3, [pc, #496]	; (800d538 <lv_theme_default_init+0x6b0>)
    style_init_reset(&styles->pressed);
 800d348:	6820      	ldr	r0, [r4, #0]
 800d34a:	f8cb 3000 	str.w	r3, [fp]
 800d34e:	4b7b      	ldr	r3, [pc, #492]	; (800d53c <lv_theme_default_init+0x6b4>)
 800d350:	3058      	adds	r0, #88	; 0x58
 800d352:	f8ca 3000 	str.w	r3, [sl]
 800d356:	f7ff fd8d 	bl	800ce74 <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->pressed, &dark_filter);
 800d35a:	6820      	ldr	r0, [r4, #0]
 800d35c:	4659      	mov	r1, fp
 800d35e:	3058      	adds	r0, #88	; 0x58
 800d360:	f017 fe8d 	bl	802507e <lv_style_set_color_filter_dsc>
    lv_style_set_color_filter_opa(&styles->pressed, 35);
 800d364:	6820      	ldr	r0, [r4, #0]
 800d366:	2123      	movs	r1, #35	; 0x23
 800d368:	3058      	adds	r0, #88	; 0x58
 800d36a:	f017 fe8c 	bl	8025086 <lv_style_set_color_filter_opa>
    style_init_reset(&styles->disabled);
 800d36e:	6820      	ldr	r0, [r4, #0]
 800d370:	3060      	adds	r0, #96	; 0x60
 800d372:	f7ff fd7f 	bl	800ce74 <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->disabled, &grey_filter);
 800d376:	6820      	ldr	r0, [r4, #0]
 800d378:	4651      	mov	r1, sl
 800d37a:	3060      	adds	r0, #96	; 0x60
 800d37c:	f017 fe7f 	bl	802507e <lv_style_set_color_filter_dsc>
    lv_style_set_color_filter_opa(&styles->disabled, LV_OPA_50);
 800d380:	6820      	ldr	r0, [r4, #0]
 800d382:	217f      	movs	r1, #127	; 0x7f
 800d384:	3060      	adds	r0, #96	; 0x60
 800d386:	f017 fe7e 	bl	8025086 <lv_style_set_color_filter_opa>
    style_init_reset(&styles->clip_corner);
 800d38a:	6820      	ldr	r0, [r4, #0]
 800d38c:	30c0      	adds	r0, #192	; 0xc0
 800d38e:	f7ff fd71 	bl	800ce74 <style_init_reset>
    lv_style_set_clip_corner(&styles->clip_corner, true);
 800d392:	6820      	ldr	r0, [r4, #0]
 800d394:	2101      	movs	r1, #1
 800d396:	30c0      	adds	r0, #192	; 0xc0
 800d398:	f017 fe6d 	bl	8025076 <lv_style_set_clip_corner>
    lv_style_set_border_post(&styles->clip_corner, true);
 800d39c:	6820      	ldr	r0, [r4, #0]
 800d39e:	2101      	movs	r1, #1
 800d3a0:	30c0      	adds	r0, #192	; 0xc0
 800d3a2:	f017 fdff 	bl	8024fa4 <lv_style_set_border_post>
    style_init_reset(&styles->pad_normal);
 800d3a6:	6820      	ldr	r0, [r4, #0]
 800d3a8:	3080      	adds	r0, #128	; 0x80
 800d3aa:	f7ff fd63 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 800d3ae:	6823      	ldr	r3, [r4, #0]
 800d3b0:	f103 0a80 	add.w	sl, r3, #128	; 0x80
 800d3b4:	7833      	ldrb	r3, [r6, #0]
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	f040 8783 	bne.w	800e2c2 <lv_theme_default_init+0x143a>
 800d3bc:	2118      	movs	r1, #24
 800d3be:	68e8      	ldr	r0, [r5, #12]
 800d3c0:	f015 fe11 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d3c4:	4601      	mov	r1, r0
 800d3c6:	4650      	mov	r0, sl
 800d3c8:	f015 fdfa 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 800d3cc:	6823      	ldr	r3, [r4, #0]
 800d3ce:	f103 0a80 	add.w	sl, r3, #128	; 0x80
 800d3d2:	7833      	ldrb	r3, [r6, #0]
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	f040 877b 	bne.w	800e2d0 <lv_theme_default_init+0x1448>
 800d3da:	2118      	movs	r1, #24
 800d3dc:	68e8      	ldr	r0, [r5, #12]
 800d3de:	f015 fe02 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d3e2:	4601      	mov	r1, r0
 800d3e4:	4650      	mov	r0, sl
 800d3e6:	f017 fda6 	bl	8024f36 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 800d3ea:	6823      	ldr	r3, [r4, #0]
 800d3ec:	f103 0a80 	add.w	sl, r3, #128	; 0x80
 800d3f0:	7833      	ldrb	r3, [r6, #0]
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	f040 8773 	bne.w	800e2de <lv_theme_default_init+0x1456>
 800d3f8:	2118      	movs	r1, #24
 800d3fa:	68e8      	ldr	r0, [r5, #12]
 800d3fc:	f015 fdf3 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d400:	4601      	mov	r1, r0
 800d402:	4650      	mov	r0, sl
 800d404:	f017 fd9b 	bl	8024f3e <lv_style_set_pad_column>
    style_init_reset(&styles->pad_small);
 800d408:	6820      	ldr	r0, [r4, #0]
 800d40a:	3078      	adds	r0, #120	; 0x78
 800d40c:	f7ff fd32 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 800d410:	6823      	ldr	r3, [r4, #0]
 800d412:	f103 0a78 	add.w	sl, r3, #120	; 0x78
 800d416:	7833      	ldrb	r3, [r6, #0]
 800d418:	2b01      	cmp	r3, #1
 800d41a:	f040 8767 	bne.w	800e2ec <lv_theme_default_init+0x1464>
 800d41e:	210e      	movs	r1, #14
 800d420:	68e8      	ldr	r0, [r5, #12]
 800d422:	f015 fde0 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d426:	4601      	mov	r1, r0
 800d428:	4650      	mov	r0, sl
 800d42a:	f015 fdc9 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 800d42e:	6823      	ldr	r3, [r4, #0]
 800d430:	f103 0a78 	add.w	sl, r3, #120	; 0x78
 800d434:	7833      	ldrb	r3, [r6, #0]
 800d436:	2b01      	cmp	r3, #1
 800d438:	f040 875f 	bne.w	800e2fa <lv_theme_default_init+0x1472>
 800d43c:	210e      	movs	r1, #14
 800d43e:	68e8      	ldr	r0, [r5, #12]
 800d440:	f015 fdd1 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d444:	4601      	mov	r1, r0
 800d446:	4650      	mov	r0, sl
 800d448:	f015 fd8a 	bl	8022f60 <lv_style_set_pad_gap>
    style_init_reset(&styles->pad_gap);
 800d44c:	6820      	ldr	r0, [r4, #0]
 800d44e:	3088      	adds	r0, #136	; 0x88
 800d450:	f7ff fd10 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_row(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 800d454:	6823      	ldr	r3, [r4, #0]
 800d456:	210a      	movs	r1, #10
 800d458:	68e8      	ldr	r0, [r5, #12]
 800d45a:	f103 0a88 	add.w	sl, r3, #136	; 0x88
 800d45e:	f015 fdc2 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d462:	4601      	mov	r1, r0
 800d464:	4650      	mov	r0, sl
 800d466:	f017 fd66 	bl	8024f36 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 800d46a:	6823      	ldr	r3, [r4, #0]
 800d46c:	210a      	movs	r1, #10
 800d46e:	68e8      	ldr	r0, [r5, #12]
 800d470:	f103 0a88 	add.w	sl, r3, #136	; 0x88
 800d474:	f015 fdb7 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d478:	4601      	mov	r1, r0
 800d47a:	4650      	mov	r0, sl
 800d47c:	f017 fd5f 	bl	8024f3e <lv_style_set_pad_column>
    style_init_reset(&styles->line_space_large);
 800d480:	6820      	ldr	r0, [r4, #0]
 800d482:	3090      	adds	r0, #144	; 0x90
 800d484:	f7ff fcf6 	bl	800ce74 <style_init_reset>
    lv_style_set_text_line_space(&styles->line_space_large, lv_disp_dpx(theme.disp, 20));
 800d488:	6823      	ldr	r3, [r4, #0]
 800d48a:	2114      	movs	r1, #20
 800d48c:	68e8      	ldr	r0, [r5, #12]
 800d48e:	f103 0a90 	add.w	sl, r3, #144	; 0x90
 800d492:	f015 fda8 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d496:	4601      	mov	r1, r0
 800d498:	4650      	mov	r0, sl
 800d49a:	f017 fde0 	bl	802505e <lv_style_set_text_line_space>
    style_init_reset(&styles->text_align_center);
 800d49e:	6820      	ldr	r0, [r4, #0]
 800d4a0:	3098      	adds	r0, #152	; 0x98
 800d4a2:	f7ff fce7 	bl	800ce74 <style_init_reset>
    lv_style_set_text_align(&styles->text_align_center, LV_TEXT_ALIGN_CENTER);
 800d4a6:	6820      	ldr	r0, [r4, #0]
 800d4a8:	2102      	movs	r1, #2
 800d4aa:	3098      	adds	r0, #152	; 0x98
 800d4ac:	f017 fddb 	bl	8025066 <lv_style_set_text_align>
    style_init_reset(&styles->pad_zero);
 800d4b0:	6820      	ldr	r0, [r4, #0]
 800d4b2:	3068      	adds	r0, #104	; 0x68
 800d4b4:	f7ff fcde 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_zero, 0);
 800d4b8:	6820      	ldr	r0, [r4, #0]
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	3068      	adds	r0, #104	; 0x68
 800d4be:	f015 fd7f 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_zero, 0);
 800d4c2:	6820      	ldr	r0, [r4, #0]
 800d4c4:	2100      	movs	r1, #0
 800d4c6:	3068      	adds	r0, #104	; 0x68
 800d4c8:	f017 fd35 	bl	8024f36 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_zero, 0);
 800d4cc:	6820      	ldr	r0, [r4, #0]
 800d4ce:	2100      	movs	r1, #0
 800d4d0:	3068      	adds	r0, #104	; 0x68
 800d4d2:	f017 fd34 	bl	8024f3e <lv_style_set_pad_column>
    style_init_reset(&styles->pad_tiny);
 800d4d6:	6820      	ldr	r0, [r4, #0]
 800d4d8:	3070      	adds	r0, #112	; 0x70
 800d4da:	f7ff fccb 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	f103 0a70 	add.w	sl, r3, #112	; 0x70
 800d4e4:	7833      	ldrb	r3, [r6, #0]
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	f040 870e 	bne.w	800e308 <lv_theme_default_init+0x1480>
 800d4ec:	2108      	movs	r1, #8
 800d4ee:	68e8      	ldr	r0, [r5, #12]
 800d4f0:	f015 fd79 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d4f4:	4601      	mov	r1, r0
 800d4f6:	4650      	mov	r0, sl
 800d4f8:	f015 fd62 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 800d4fc:	6823      	ldr	r3, [r4, #0]
 800d4fe:	f103 0a70 	add.w	sl, r3, #112	; 0x70
 800d502:	7833      	ldrb	r3, [r6, #0]
 800d504:	2b01      	cmp	r3, #1
 800d506:	f040 8706 	bne.w	800e316 <lv_theme_default_init+0x148e>
 800d50a:	2108      	movs	r1, #8
 800d50c:	68e8      	ldr	r0, [r5, #12]
 800d50e:	f015 fd6a 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d512:	4601      	mov	r1, r0
 800d514:	4650      	mov	r0, sl
 800d516:	f017 fd0e 	bl	8024f36 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	f103 0a70 	add.w	sl, r3, #112	; 0x70
 800d520:	7833      	ldrb	r3, [r6, #0]
 800d522:	2b01      	cmp	r3, #1
 800d524:	f040 86fe 	bne.w	800e324 <lv_theme_default_init+0x149c>
 800d528:	2108      	movs	r1, #8
 800d52a:	68e8      	ldr	r0, [r5, #12]
 800d52c:	e008      	b.n	800d540 <lv_theme_default_init+0x6b8>
 800d52e:	bf00      	nop
 800d530:	2400117c 	.word	0x2400117c
 800d534:	24001174 	.word	0x24001174
 800d538:	08022f8d 	.word	0x08022f8d
 800d53c:	0800ce49 	.word	0x0800ce49
 800d540:	f015 fd51 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d544:	4601      	mov	r1, r0
 800d546:	4650      	mov	r0, sl
 800d548:	f017 fcf9 	bl	8024f3e <lv_style_set_pad_column>
    style_init_reset(&styles->bg_color_primary);
 800d54c:	6820      	ldr	r0, [r4, #0]
 800d54e:	3028      	adds	r0, #40	; 0x28
 800d550:	f7ff fc90 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary, theme.color_primary);
 800d554:	6820      	ldr	r0, [r4, #0]
 800d556:	8a29      	ldrh	r1, [r5, #16]
 800d558:	3028      	adds	r0, #40	; 0x28
 800d55a:	f017 fcf4 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary, lv_color_white());
 800d55e:	6820      	ldr	r0, [r4, #0]
 800d560:	f100 0328 	add.w	r3, r0, #40	; 0x28
 800d564:	f015 fcf9 	bl	8022f5a <lv_color_white>
 800d568:	4601      	mov	r1, r0
 800d56a:	4618      	mov	r0, r3
 800d56c:	f017 fd6a 	bl	8025044 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary, LV_OPA_COVER);
 800d570:	6820      	ldr	r0, [r4, #0]
 800d572:	21ff      	movs	r1, #255	; 0xff
 800d574:	3028      	adds	r0, #40	; 0x28
 800d576:	f017 fcef 	bl	8024f58 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_primary_muted);
 800d57a:	6820      	ldr	r0, [r4, #0]
 800d57c:	3030      	adds	r0, #48	; 0x30
 800d57e:	f7ff fc79 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary_muted, theme.color_primary);
 800d582:	6820      	ldr	r0, [r4, #0]
 800d584:	8a29      	ldrh	r1, [r5, #16]
 800d586:	3030      	adds	r0, #48	; 0x30
 800d588:	f017 fcdd 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary_muted, theme.color_primary);
 800d58c:	6820      	ldr	r0, [r4, #0]
 800d58e:	8a29      	ldrh	r1, [r5, #16]
 800d590:	3030      	adds	r0, #48	; 0x30
 800d592:	f017 fd57 	bl	8025044 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary_muted, LV_OPA_20);
 800d596:	6820      	ldr	r0, [r4, #0]
 800d598:	2133      	movs	r1, #51	; 0x33
 800d59a:	3030      	adds	r0, #48	; 0x30
 800d59c:	f017 fcdc 	bl	8024f58 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary);
 800d5a0:	6820      	ldr	r0, [r4, #0]
 800d5a2:	3038      	adds	r0, #56	; 0x38
 800d5a4:	f7ff fc66 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary, theme.color_secondary);
 800d5a8:	6820      	ldr	r0, [r4, #0]
 800d5aa:	8a69      	ldrh	r1, [r5, #18]
 800d5ac:	3038      	adds	r0, #56	; 0x38
 800d5ae:	f017 fcca 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary, lv_color_white());
 800d5b2:	6820      	ldr	r0, [r4, #0]
 800d5b4:	f100 0338 	add.w	r3, r0, #56	; 0x38
 800d5b8:	f015 fccf 	bl	8022f5a <lv_color_white>
 800d5bc:	4601      	mov	r1, r0
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f017 fd40 	bl	8025044 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary, LV_OPA_COVER);
 800d5c4:	6820      	ldr	r0, [r4, #0]
 800d5c6:	21ff      	movs	r1, #255	; 0xff
 800d5c8:	3038      	adds	r0, #56	; 0x38
 800d5ca:	f017 fcc5 	bl	8024f58 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary_muted);
 800d5ce:	6820      	ldr	r0, [r4, #0]
 800d5d0:	3040      	adds	r0, #64	; 0x40
 800d5d2:	f7ff fc4f 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 800d5d6:	6820      	ldr	r0, [r4, #0]
 800d5d8:	8a69      	ldrh	r1, [r5, #18]
 800d5da:	3040      	adds	r0, #64	; 0x40
 800d5dc:	f017 fcb3 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 800d5e0:	6820      	ldr	r0, [r4, #0]
 800d5e2:	8a69      	ldrh	r1, [r5, #18]
 800d5e4:	3040      	adds	r0, #64	; 0x40
 800d5e6:	f017 fd2d 	bl	8025044 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary_muted, LV_OPA_20);
 800d5ea:	6820      	ldr	r0, [r4, #0]
 800d5ec:	2133      	movs	r1, #51	; 0x33
 800d5ee:	3040      	adds	r0, #64	; 0x40
 800d5f0:	f017 fcb2 	bl	8024f58 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_grey);
 800d5f4:	6820      	ldr	r0, [r4, #0]
 800d5f6:	3048      	adds	r0, #72	; 0x48
 800d5f8:	f7ff fc3c 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_grey, color_grey);
 800d5fc:	6820      	ldr	r0, [r4, #0]
 800d5fe:	f8b8 1000 	ldrh.w	r1, [r8]
 800d602:	3048      	adds	r0, #72	; 0x48
 800d604:	f017 fc9f 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_grey, LV_OPA_COVER);
 800d608:	6820      	ldr	r0, [r4, #0]
 800d60a:	21ff      	movs	r1, #255	; 0xff
 800d60c:	3048      	adds	r0, #72	; 0x48
 800d60e:	f017 fca3 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_grey, color_text);
 800d612:	6820      	ldr	r0, [r4, #0]
 800d614:	8839      	ldrh	r1, [r7, #0]
 800d616:	3048      	adds	r0, #72	; 0x48
 800d618:	f017 fd14 	bl	8025044 <lv_style_set_text_color>
    style_init_reset(&styles->bg_color_white);
 800d61c:	6820      	ldr	r0, [r4, #0]
 800d61e:	3050      	adds	r0, #80	; 0x50
 800d620:	f7ff fc28 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_white, color_card);
 800d624:	6820      	ldr	r0, [r4, #0]
 800d626:	f8b9 1000 	ldrh.w	r1, [r9]
 800d62a:	3050      	adds	r0, #80	; 0x50
 800d62c:	f017 fc8b 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_white, LV_OPA_COVER);
 800d630:	6820      	ldr	r0, [r4, #0]
 800d632:	21ff      	movs	r1, #255	; 0xff
 800d634:	3050      	adds	r0, #80	; 0x50
 800d636:	f017 fc8f 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_white, color_text);
 800d63a:	6820      	ldr	r0, [r4, #0]
 800d63c:	8839      	ldrh	r1, [r7, #0]
 800d63e:	3050      	adds	r0, #80	; 0x50
 800d640:	f017 fd00 	bl	8025044 <lv_style_set_text_color>
    style_init_reset(&styles->circle);
 800d644:	6820      	ldr	r0, [r4, #0]
 800d646:	30b0      	adds	r0, #176	; 0xb0
 800d648:	f7ff fc14 	bl	800ce74 <style_init_reset>
    lv_style_set_radius(&styles->circle, LV_RADIUS_CIRCLE);
 800d64c:	6820      	ldr	r0, [r4, #0]
 800d64e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800d652:	30b0      	adds	r0, #176	; 0xb0
 800d654:	f017 fd0b 	bl	802506e <lv_style_set_radius>
    style_init_reset(&styles->no_radius);
 800d658:	6820      	ldr	r0, [r4, #0]
 800d65a:	30b8      	adds	r0, #184	; 0xb8
 800d65c:	f7ff fc0a 	bl	800ce74 <style_init_reset>
    lv_style_set_radius(&styles->no_radius, 0);
 800d660:	6820      	ldr	r0, [r4, #0]
 800d662:	2100      	movs	r1, #0
 800d664:	30b8      	adds	r0, #184	; 0xb8
 800d666:	f017 fd02 	bl	802506e <lv_style_set_radius>
    style_init_reset(&styles->grow);
 800d66a:	6820      	ldr	r0, [r4, #0]
 800d66c:	30c8      	adds	r0, #200	; 0xc8
 800d66e:	f7ff fc01 	bl	800ce74 <style_init_reset>
    lv_style_set_transform_width(&styles->grow, lv_disp_dpx(theme.disp, 3));
 800d672:	6823      	ldr	r3, [r4, #0]
 800d674:	2103      	movs	r1, #3
 800d676:	68e8      	ldr	r0, [r5, #12]
 800d678:	f103 0ac8 	add.w	sl, r3, #200	; 0xc8
 800d67c:	f015 fcb3 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d680:	4601      	mov	r1, r0
 800d682:	4650      	mov	r0, sl
 800d684:	f017 fc3f 	bl	8024f06 <lv_style_set_transform_width>
    lv_style_set_transform_height(&styles->grow, lv_disp_dpx(theme.disp, 3));
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	2103      	movs	r1, #3
 800d68c:	68e8      	ldr	r0, [r5, #12]
 800d68e:	f103 0ac8 	add.w	sl, r3, #200	; 0xc8
 800d692:	f015 fca8 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d696:	4601      	mov	r1, r0
 800d698:	4650      	mov	r0, sl
 800d69a:	f017 fc38 	bl	8024f0e <lv_style_set_transform_height>
    style_init_reset(&styles->knob);
 800d69e:	6820      	ldr	r0, [r4, #0]
 800d6a0:	30f0      	adds	r0, #240	; 0xf0
 800d6a2:	f7ff fbe7 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_color(&styles->knob, theme.color_primary);
 800d6a6:	6820      	ldr	r0, [r4, #0]
 800d6a8:	8a29      	ldrh	r1, [r5, #16]
 800d6aa:	30f0      	adds	r0, #240	; 0xf0
 800d6ac:	f017 fc4b 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->knob, LV_OPA_COVER);
 800d6b0:	6820      	ldr	r0, [r4, #0]
 800d6b2:	21ff      	movs	r1, #255	; 0xff
 800d6b4:	30f0      	adds	r0, #240	; 0xf0
 800d6b6:	f017 fc4f 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_pad_all(&styles->knob, lv_disp_dpx(theme.disp, 6));
 800d6ba:	6823      	ldr	r3, [r4, #0]
 800d6bc:	2106      	movs	r1, #6
 800d6be:	68e8      	ldr	r0, [r5, #12]
 800d6c0:	f103 0af0 	add.w	sl, r3, #240	; 0xf0
 800d6c4:	f015 fc8f 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d6c8:	4601      	mov	r1, r0
 800d6ca:	4650      	mov	r0, sl
 800d6cc:	f015 fc78 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_radius(&styles->knob, LV_RADIUS_CIRCLE);
 800d6d0:	6820      	ldr	r0, [r4, #0]
 800d6d2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800d6d6:	30f0      	adds	r0, #240	; 0xf0
 800d6d8:	f017 fcc9 	bl	802506e <lv_style_set_radius>
    style_init_reset(&styles->anim);
 800d6dc:	6820      	ldr	r0, [r4, #0]
 800d6de:	30e0      	adds	r0, #224	; 0xe0
 800d6e0:	f7ff fbc8 	bl	800ce74 <style_init_reset>
    lv_style_set_anim_time(&styles->anim, 200);
 800d6e4:	6820      	ldr	r0, [r4, #0]
 800d6e6:	21c8      	movs	r1, #200	; 0xc8
 800d6e8:	30e0      	adds	r0, #224	; 0xe0
 800d6ea:	f017 fcd0 	bl	802508e <lv_style_set_anim_time>
    style_init_reset(&styles->anim_fast);
 800d6ee:	6820      	ldr	r0, [r4, #0]
 800d6f0:	30e8      	adds	r0, #232	; 0xe8
 800d6f2:	f7ff fbbf 	bl	800ce74 <style_init_reset>
    lv_style_set_anim_time(&styles->anim_fast, 120);
 800d6f6:	6820      	ldr	r0, [r4, #0]
 800d6f8:	2178      	movs	r1, #120	; 0x78
 800d6fa:	30e8      	adds	r0, #232	; 0xe8
 800d6fc:	f017 fcc7 	bl	802508e <lv_style_set_anim_time>
    style_init_reset(&styles->arc_indic);
 800d700:	6820      	ldr	r0, [r4, #0]
 800d702:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800d706:	f7ff fbb5 	bl	800ce74 <style_init_reset>
    lv_style_set_arc_color(&styles->arc_indic, color_grey);
 800d70a:	6820      	ldr	r0, [r4, #0]
 800d70c:	f8b8 1000 	ldrh.w	r1, [r8]
 800d710:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800d714:	f017 fc8d 	bl	8025032 <lv_style_set_arc_color>
    lv_style_set_arc_width(&styles->arc_indic, lv_disp_dpx(theme.disp, 15));
 800d718:	6823      	ldr	r3, [r4, #0]
 800d71a:	210f      	movs	r1, #15
 800d71c:	68e8      	ldr	r0, [r5, #12]
 800d71e:	f503 7a80 	add.w	sl, r3, #256	; 0x100
 800d722:	f015 fc60 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d726:	4601      	mov	r1, r0
 800d728:	4650      	mov	r0, sl
 800d72a:	f017 fc7a 	bl	8025022 <lv_style_set_arc_width>
    lv_style_set_arc_rounded(&styles->arc_indic, true);
 800d72e:	6820      	ldr	r0, [r4, #0]
 800d730:	2101      	movs	r1, #1
 800d732:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800d736:	f017 fc78 	bl	802502a <lv_style_set_arc_rounded>
    style_init_reset(&styles->arc_indic_primary);
 800d73a:	6820      	ldr	r0, [r4, #0]
 800d73c:	f500 7084 	add.w	r0, r0, #264	; 0x108
 800d740:	f7ff fb98 	bl	800ce74 <style_init_reset>
    lv_style_set_arc_color(&styles->arc_indic_primary, theme.color_primary);
 800d744:	6820      	ldr	r0, [r4, #0]
 800d746:	8a29      	ldrh	r1, [r5, #16]
 800d748:	f500 7084 	add.w	r0, r0, #264	; 0x108
 800d74c:	f017 fc71 	bl	8025032 <lv_style_set_arc_color>
    style_init_reset(&styles->dropdown_list);
 800d750:	6820      	ldr	r0, [r4, #0]
 800d752:	f500 7098 	add.w	r0, r0, #304	; 0x130
 800d756:	f7ff fb8d 	bl	800ce74 <style_init_reset>
    lv_style_set_max_height(&styles->dropdown_list, LV_DPI_DEF * 2);
 800d75a:	6820      	ldr	r0, [r4, #0]
 800d75c:	f44f 7182 	mov.w	r1, #260	; 0x104
 800d760:	f500 7098 	add.w	r0, r0, #304	; 0x130
 800d764:	f017 fbcb 	bl	8024efe <lv_style_set_max_height>
    style_init_reset(&styles->cb_marker);
 800d768:	6820      	ldr	r0, [r4, #0]
 800d76a:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800d76e:	f7ff fb81 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_all(&styles->cb_marker, lv_disp_dpx(theme.disp, 3));
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	2103      	movs	r1, #3
 800d776:	68e8      	ldr	r0, [r5, #12]
 800d778:	f503 7a9c 	add.w	sl, r3, #312	; 0x138
 800d77c:	f015 fc33 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d780:	4601      	mov	r1, r0
 800d782:	4650      	mov	r0, sl
 800d784:	f015 fc1c 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_border_width(&styles->cb_marker, BORDER_WIDTH);
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	2102      	movs	r1, #2
 800d78c:	68e8      	ldr	r0, [r5, #12]
 800d78e:	f503 7a9c 	add.w	sl, r3, #312	; 0x138
 800d792:	f015 fc28 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d796:	4601      	mov	r1, r0
 800d798:	4650      	mov	r0, sl
 800d79a:	f017 fbfb 	bl	8024f94 <lv_style_set_border_width>
    lv_style_set_border_color(&styles->cb_marker, theme.color_primary);
 800d79e:	6820      	ldr	r0, [r4, #0]
 800d7a0:	8a29      	ldrh	r1, [r5, #16]
 800d7a2:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800d7a6:	f017 fbe8 	bl	8024f7a <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->cb_marker, color_card);
 800d7aa:	6820      	ldr	r0, [r4, #0]
 800d7ac:	f8b9 1000 	ldrh.w	r1, [r9]
 800d7b0:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800d7b4:	f017 fbc7 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->cb_marker, LV_OPA_COVER);
 800d7b8:	6820      	ldr	r0, [r4, #0]
 800d7ba:	21ff      	movs	r1, #255	; 0xff
 800d7bc:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800d7c0:	f017 fbca 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_radius(&styles->cb_marker, RADIUS_DEFAULT / 2);
 800d7c4:	6823      	ldr	r3, [r4, #0]
 800d7c6:	68e8      	ldr	r0, [r5, #12]
 800d7c8:	f503 7a9c 	add.w	sl, r3, #312	; 0x138
 800d7cc:	7833      	ldrb	r3, [r6, #0]
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	bf0c      	ite	eq
 800d7d2:	210c      	moveq	r1, #12
 800d7d4:	2108      	movne	r1, #8
 800d7d6:	f015 fc06 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d7da:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800d7de:	f340 014f 	sbfx	r1, r0, #1, #16
 800d7e2:	4650      	mov	r0, sl
 800d7e4:	f017 fc43 	bl	802506e <lv_style_set_radius>
    style_init_reset(&styles->cb_marker_checked);
 800d7e8:	6820      	ldr	r0, [r4, #0]
 800d7ea:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 800d7ee:	f7ff fb41 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_img_src(&styles->cb_marker_checked, LV_SYMBOL_OK);
 800d7f2:	6820      	ldr	r0, [r4, #0]
 800d7f4:	49ab      	ldr	r1, [pc, #684]	; (800daa4 <lv_theme_default_init+0xc1c>)
 800d7f6:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 800d7fa:	f017 fbba 	bl	8024f72 <lv_style_set_bg_img_src>
    lv_style_set_text_color(&styles->cb_marker_checked, lv_color_white());
 800d7fe:	6820      	ldr	r0, [r4, #0]
 800d800:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 800d804:	f015 fba9 	bl	8022f5a <lv_color_white>
 800d808:	4601      	mov	r1, r0
 800d80a:	4618      	mov	r0, r3
 800d80c:	f017 fc1a 	bl	8025044 <lv_style_set_text_color>
    lv_style_set_text_font(&styles->cb_marker_checked, theme.font_small);
 800d810:	6820      	ldr	r0, [r4, #0]
 800d812:	6969      	ldr	r1, [r5, #20]
 800d814:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 800d818:	f017 fc1d 	bl	8025056 <lv_style_set_text_font>
    style_init_reset(&styles->switch_knob);
 800d81c:	6820      	ldr	r0, [r4, #0]
 800d81e:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 800d822:	f7ff fb27 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_all(&styles->switch_knob, - lv_disp_dpx(theme.disp, 4));
 800d826:	6823      	ldr	r3, [r4, #0]
 800d828:	2104      	movs	r1, #4
 800d82a:	68e8      	ldr	r0, [r5, #12]
 800d82c:	f503 7aa4 	add.w	sl, r3, #328	; 0x148
 800d830:	f015 fbd9 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d834:	4241      	negs	r1, r0
 800d836:	4650      	mov	r0, sl
 800d838:	b209      	sxth	r1, r1
 800d83a:	f015 fbc1 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_bg_color(&styles->switch_knob, lv_color_white());
 800d83e:	6820      	ldr	r0, [r4, #0]
 800d840:	f500 73a4 	add.w	r3, r0, #328	; 0x148
 800d844:	f015 fb89 	bl	8022f5a <lv_color_white>
 800d848:	4601      	mov	r1, r0
 800d84a:	4618      	mov	r0, r3
 800d84c:	f017 fb7b 	bl	8024f46 <lv_style_set_bg_color>
    style_init_reset(&styles->line);
 800d850:	6820      	ldr	r0, [r4, #0]
 800d852:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 800d856:	f7ff fb0d 	bl	800ce74 <style_init_reset>
    lv_style_set_line_width(&styles->line, 1);
 800d85a:	6820      	ldr	r0, [r4, #0]
 800d85c:	2101      	movs	r1, #1
 800d85e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 800d862:	f017 fbd1 	bl	8025008 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->line, color_text);
 800d866:	6820      	ldr	r0, [r4, #0]
 800d868:	8839      	ldrh	r1, [r7, #0]
 800d86a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 800d86e:	f017 fbcf 	bl	8025010 <lv_style_set_line_color>
    style_init_reset(&styles->chart_bg);
 800d872:	6820      	ldr	r0, [r4, #0]
 800d874:	f500 7094 	add.w	r0, r0, #296	; 0x128
 800d878:	f7ff fafc 	bl	800ce74 <style_init_reset>
    lv_style_set_border_post(&styles->chart_bg, false);
 800d87c:	6820      	ldr	r0, [r4, #0]
 800d87e:	2100      	movs	r1, #0
 800d880:	f500 7094 	add.w	r0, r0, #296	; 0x128
 800d884:	f017 fb8e 	bl	8024fa4 <lv_style_set_border_post>
    lv_style_set_pad_column(&styles->chart_bg, lv_disp_dpx(theme.disp, 10));
 800d888:	6823      	ldr	r3, [r4, #0]
 800d88a:	210a      	movs	r1, #10
 800d88c:	68e8      	ldr	r0, [r5, #12]
 800d88e:	f503 7a94 	add.w	sl, r3, #296	; 0x128
 800d892:	f015 fba8 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d896:	4601      	mov	r1, r0
 800d898:	4650      	mov	r0, sl
 800d89a:	f017 fb50 	bl	8024f3e <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->chart_bg, color_grey);
 800d89e:	6820      	ldr	r0, [r4, #0]
 800d8a0:	f8b8 1000 	ldrh.w	r1, [r8]
 800d8a4:	f500 7094 	add.w	r0, r0, #296	; 0x128
 800d8a8:	f017 fbb2 	bl	8025010 <lv_style_set_line_color>
    style_init_reset(&styles->chart_series);
 800d8ac:	6820      	ldr	r0, [r4, #0]
 800d8ae:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800d8b2:	f7ff fadf 	bl	800ce74 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	2103      	movs	r1, #3
 800d8ba:	68e8      	ldr	r0, [r5, #12]
 800d8bc:	f503 7888 	add.w	r8, r3, #272	; 0x110
 800d8c0:	f015 fb91 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d8c4:	4601      	mov	r1, r0
 800d8c6:	4640      	mov	r0, r8
 800d8c8:	f017 fb9e 	bl	8025008 <lv_style_set_line_width>
    lv_style_set_radius(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 800d8cc:	6823      	ldr	r3, [r4, #0]
 800d8ce:	2103      	movs	r1, #3
 800d8d0:	68e8      	ldr	r0, [r5, #12]
 800d8d2:	f503 7888 	add.w	r8, r3, #272	; 0x110
 800d8d6:	f015 fb86 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d8da:	4601      	mov	r1, r0
 800d8dc:	4640      	mov	r0, r8
 800d8de:	f017 fbc6 	bl	802506e <lv_style_set_radius>
    lv_style_set_size(&styles->chart_series, lv_disp_dpx(theme.disp, 8));
 800d8e2:	6823      	ldr	r3, [r4, #0]
 800d8e4:	2108      	movs	r1, #8
 800d8e6:	68e8      	ldr	r0, [r5, #12]
 800d8e8:	f503 7888 	add.w	r8, r3, #272	; 0x110
 800d8ec:	f015 fb7b 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d8f0:	4601      	mov	r1, r0
 800d8f2:	4640      	mov	r0, r8
 800d8f4:	f015 fb4e 	bl	8022f94 <lv_style_set_size>
    lv_style_set_pad_column(&styles->chart_series, lv_disp_dpx(theme.disp, 2));
 800d8f8:	6823      	ldr	r3, [r4, #0]
 800d8fa:	2102      	movs	r1, #2
 800d8fc:	68e8      	ldr	r0, [r5, #12]
 800d8fe:	f503 7888 	add.w	r8, r3, #272	; 0x110
 800d902:	f015 fb70 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d906:	4601      	mov	r1, r0
 800d908:	4640      	mov	r0, r8
 800d90a:	f017 fb18 	bl	8024f3e <lv_style_set_pad_column>
    style_init_reset(&styles->chart_indic);
 800d90e:	6820      	ldr	r0, [r4, #0]
 800d910:	f500 708c 	add.w	r0, r0, #280	; 0x118
 800d914:	f7ff faae 	bl	800ce74 <style_init_reset>
    lv_style_set_radius(&styles->chart_indic, LV_RADIUS_CIRCLE);
 800d918:	6820      	ldr	r0, [r4, #0]
 800d91a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800d91e:	f500 708c 	add.w	r0, r0, #280	; 0x118
 800d922:	f017 fba4 	bl	802506e <lv_style_set_radius>
    lv_style_set_size(&styles->chart_indic, lv_disp_dpx(theme.disp, 8));
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	2108      	movs	r1, #8
 800d92a:	68e8      	ldr	r0, [r5, #12]
 800d92c:	f503 788c 	add.w	r8, r3, #280	; 0x118
 800d930:	f015 fb59 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d934:	4601      	mov	r1, r0
 800d936:	4640      	mov	r0, r8
 800d938:	f015 fb2c 	bl	8022f94 <lv_style_set_size>
    lv_style_set_bg_color(&styles->chart_indic, theme.color_primary);
 800d93c:	6820      	ldr	r0, [r4, #0]
 800d93e:	8a29      	ldrh	r1, [r5, #16]
 800d940:	f500 708c 	add.w	r0, r0, #280	; 0x118
 800d944:	f017 faff 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->chart_indic, LV_OPA_COVER);
 800d948:	6820      	ldr	r0, [r4, #0]
 800d94a:	21ff      	movs	r1, #255	; 0xff
 800d94c:	f500 708c 	add.w	r0, r0, #280	; 0x118
 800d950:	f017 fb02 	bl	8024f58 <lv_style_set_bg_opa>
    style_init_reset(&styles->chart_ticks);
 800d954:	6820      	ldr	r0, [r4, #0]
 800d956:	f500 7090 	add.w	r0, r0, #288	; 0x120
 800d95a:	f7ff fa8b 	bl	800ce74 <style_init_reset>
    lv_style_set_line_width(&styles->chart_ticks, lv_disp_dpx(theme.disp, 1));
 800d95e:	6823      	ldr	r3, [r4, #0]
 800d960:	2101      	movs	r1, #1
 800d962:	68e8      	ldr	r0, [r5, #12]
 800d964:	f503 7890 	add.w	r8, r3, #288	; 0x120
 800d968:	f015 fb3d 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d96c:	4601      	mov	r1, r0
 800d96e:	4640      	mov	r0, r8
 800d970:	f017 fb4a 	bl	8025008 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->chart_ticks, color_text);
 800d974:	6820      	ldr	r0, [r4, #0]
 800d976:	8839      	ldrh	r1, [r7, #0]
 800d978:	f500 7090 	add.w	r0, r0, #288	; 0x120
 800d97c:	f017 fb48 	bl	8025010 <lv_style_set_line_color>
    lv_style_set_pad_all(&styles->chart_ticks, lv_disp_dpx(theme.disp, 2));
 800d980:	6823      	ldr	r3, [r4, #0]
 800d982:	2102      	movs	r1, #2
 800d984:	68e8      	ldr	r0, [r5, #12]
 800d986:	f503 7890 	add.w	r8, r3, #288	; 0x120
 800d98a:	f015 fb2c 	bl	8022fe6 <lv_disp_dpx.part.0>
 800d98e:	4601      	mov	r1, r0
 800d990:	4640      	mov	r0, r8
 800d992:	f015 fb15 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_text_color(&styles->chart_ticks, lv_palette_main(LV_PALETTE_GREY));
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	2012      	movs	r0, #18
 800d99a:	f503 7890 	add.w	r8, r3, #288	; 0x120
 800d99e:	f004 fded 	bl	801257c <lv_palette_main>
 800d9a2:	4601      	mov	r1, r0
 800d9a4:	4640      	mov	r0, r8
 800d9a6:	f017 fb4d 	bl	8025044 <lv_style_set_text_color>
    style_init_reset(&styles->menu_bg);
 800d9aa:	6820      	ldr	r0, [r4, #0]
 800d9ac:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 800d9b0:	f7ff fa60 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_all(&styles->menu_bg, 0);
 800d9b4:	6820      	ldr	r0, [r4, #0]
 800d9b6:	2100      	movs	r1, #0
 800d9b8:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 800d9bc:	f015 fb00 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->menu_bg, 0);
 800d9c0:	6820      	ldr	r0, [r4, #0]
 800d9c2:	2100      	movs	r1, #0
 800d9c4:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 800d9c8:	f015 faca 	bl	8022f60 <lv_style_set_pad_gap>
    lv_style_set_radius(&styles->menu_bg, 0);
 800d9cc:	6820      	ldr	r0, [r4, #0]
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 800d9d4:	f017 fb4b 	bl	802506e <lv_style_set_radius>
    lv_style_set_clip_corner(&styles->menu_bg, true);
 800d9d8:	6820      	ldr	r0, [r4, #0]
 800d9da:	2101      	movs	r1, #1
 800d9dc:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 800d9e0:	f017 fb49 	bl	8025076 <lv_style_set_clip_corner>
    lv_style_set_border_side(&styles->menu_bg, LV_BORDER_SIDE_NONE);
 800d9e4:	6820      	ldr	r0, [r4, #0]
 800d9e6:	2100      	movs	r1, #0
 800d9e8:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 800d9ec:	f017 fad6 	bl	8024f9c <lv_style_set_border_side>
    style_init_reset(&styles->menu_section);
 800d9f0:	6820      	ldr	r0, [r4, #0]
 800d9f2:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 800d9f6:	f7ff fa3d 	bl	800ce74 <style_init_reset>
    lv_style_set_radius(&styles->menu_section, RADIUS_DEFAULT);
 800d9fa:	6823      	ldr	r3, [r4, #0]
 800d9fc:	68e8      	ldr	r0, [r5, #12]
 800d9fe:	f503 78ec 	add.w	r8, r3, #472	; 0x1d8
 800da02:	7833      	ldrb	r3, [r6, #0]
 800da04:	2b01      	cmp	r3, #1
 800da06:	bf0c      	ite	eq
 800da08:	210c      	moveq	r1, #12
 800da0a:	2108      	movne	r1, #8
 800da0c:	f015 faeb 	bl	8022fe6 <lv_disp_dpx.part.0>
 800da10:	4601      	mov	r1, r0
 800da12:	4640      	mov	r0, r8
 800da14:	f017 fb2b 	bl	802506e <lv_style_set_radius>
    lv_style_set_clip_corner(&styles->menu_section, true);
 800da18:	6820      	ldr	r0, [r4, #0]
 800da1a:	2101      	movs	r1, #1
 800da1c:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 800da20:	f017 fb29 	bl	8025076 <lv_style_set_clip_corner>
    lv_style_set_bg_opa(&styles->menu_section, LV_OPA_COVER);
 800da24:	6820      	ldr	r0, [r4, #0]
 800da26:	21ff      	movs	r1, #255	; 0xff
 800da28:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 800da2c:	f017 fa94 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->menu_section, color_card);
 800da30:	6820      	ldr	r0, [r4, #0]
 800da32:	f8b9 1000 	ldrh.w	r1, [r9]
 800da36:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 800da3a:	f017 fa84 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->menu_section, color_text);
 800da3e:	6820      	ldr	r0, [r4, #0]
 800da40:	8839      	ldrh	r1, [r7, #0]
 800da42:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 800da46:	f017 fafd 	bl	8025044 <lv_style_set_text_color>
    style_init_reset(&styles->menu_cont);
 800da4a:	6820      	ldr	r0, [r4, #0]
 800da4c:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 800da50:	f7ff fa10 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_cont, PAD_SMALL);
 800da54:	6823      	ldr	r3, [r4, #0]
 800da56:	f503 78d4 	add.w	r8, r3, #424	; 0x1a8
 800da5a:	7833      	ldrb	r3, [r6, #0]
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	f040 8468 	bne.w	800e332 <lv_theme_default_init+0x14aa>
 800da62:	210e      	movs	r1, #14
 800da64:	68e8      	ldr	r0, [r5, #12]
 800da66:	f015 fabe 	bl	8022fe6 <lv_disp_dpx.part.0>
 800da6a:	4601      	mov	r1, r0
 800da6c:	4640      	mov	r0, r8
 800da6e:	f015 fa9c 	bl	8022faa <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->menu_cont, PAD_SMALL);
 800da72:	6823      	ldr	r3, [r4, #0]
 800da74:	f503 78d4 	add.w	r8, r3, #424	; 0x1a8
 800da78:	7833      	ldrb	r3, [r6, #0]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	f040 8460 	bne.w	800e340 <lv_theme_default_init+0x14b8>
 800da80:	210e      	movs	r1, #14
 800da82:	68e8      	ldr	r0, [r5, #12]
 800da84:	f015 faaf 	bl	8022fe6 <lv_disp_dpx.part.0>
 800da88:	4601      	mov	r1, r0
 800da8a:	4640      	mov	r0, r8
 800da8c:	f015 fa73 	bl	8022f76 <lv_style_set_pad_ver>
    lv_style_set_pad_gap(&styles->menu_cont, PAD_SMALL);
 800da90:	6823      	ldr	r3, [r4, #0]
 800da92:	f503 78d4 	add.w	r8, r3, #424	; 0x1a8
 800da96:	7833      	ldrb	r3, [r6, #0]
 800da98:	2b01      	cmp	r3, #1
 800da9a:	f040 8458 	bne.w	800e34e <lv_theme_default_init+0x14c6>
 800da9e:	210e      	movs	r1, #14
 800daa0:	68e8      	ldr	r0, [r5, #12]
 800daa2:	e001      	b.n	800daa8 <lv_theme_default_init+0xc20>
 800daa4:	0802ab58 	.word	0x0802ab58
 800daa8:	f015 fa9d 	bl	8022fe6 <lv_disp_dpx.part.0>
 800daac:	4601      	mov	r1, r0
 800daae:	4640      	mov	r0, r8
 800dab0:	f015 fa56 	bl	8022f60 <lv_style_set_pad_gap>
    lv_style_set_border_width(&styles->menu_cont, lv_disp_dpx(theme.disp, 1));
 800dab4:	6823      	ldr	r3, [r4, #0]
 800dab6:	2101      	movs	r1, #1
 800dab8:	68e8      	ldr	r0, [r5, #12]
 800daba:	f503 78d4 	add.w	r8, r3, #424	; 0x1a8
 800dabe:	f015 fa92 	bl	8022fe6 <lv_disp_dpx.part.0>
 800dac2:	4601      	mov	r1, r0
 800dac4:	4640      	mov	r0, r8
 800dac6:	f017 fa65 	bl	8024f94 <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->menu_cont, LV_OPA_10);
 800daca:	6820      	ldr	r0, [r4, #0]
 800dacc:	2119      	movs	r1, #25
 800dace:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 800dad2:	f017 fa5b 	bl	8024f8c <lv_style_set_border_opa>
    lv_style_set_border_color(&styles->menu_cont, color_text);
 800dad6:	6820      	ldr	r0, [r4, #0]
 800dad8:	8839      	ldrh	r1, [r7, #0]
 800dada:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 800dade:	f017 fa4c 	bl	8024f7a <lv_style_set_border_color>
    lv_style_set_border_side(&styles->menu_cont, LV_BORDER_SIDE_NONE);
 800dae2:	6820      	ldr	r0, [r4, #0]
 800dae4:	2100      	movs	r1, #0
 800dae6:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 800daea:	f017 fa57 	bl	8024f9c <lv_style_set_border_side>
    style_init_reset(&styles->menu_sidebar_cont);
 800daee:	6820      	ldr	r0, [r4, #0]
 800daf0:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 800daf4:	f7ff f9be 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_all(&styles->menu_sidebar_cont, 0);
 800daf8:	6820      	ldr	r0, [r4, #0]
 800dafa:	2100      	movs	r1, #0
 800dafc:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 800db00:	f015 fa5e 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->menu_sidebar_cont, 0);
 800db04:	6820      	ldr	r0, [r4, #0]
 800db06:	2100      	movs	r1, #0
 800db08:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 800db0c:	f015 fa28 	bl	8022f60 <lv_style_set_pad_gap>
    lv_style_set_border_width(&styles->menu_sidebar_cont, lv_disp_dpx(theme.disp, 1));
 800db10:	6823      	ldr	r3, [r4, #0]
 800db12:	2101      	movs	r1, #1
 800db14:	68e8      	ldr	r0, [r5, #12]
 800db16:	f503 78d8 	add.w	r8, r3, #432	; 0x1b0
 800db1a:	f015 fa64 	bl	8022fe6 <lv_disp_dpx.part.0>
 800db1e:	4601      	mov	r1, r0
 800db20:	4640      	mov	r0, r8
 800db22:	f017 fa37 	bl	8024f94 <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->menu_sidebar_cont, LV_OPA_10);
 800db26:	6820      	ldr	r0, [r4, #0]
 800db28:	2119      	movs	r1, #25
 800db2a:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 800db2e:	f017 fa2d 	bl	8024f8c <lv_style_set_border_opa>
    lv_style_set_border_color(&styles->menu_sidebar_cont, color_text);
 800db32:	6820      	ldr	r0, [r4, #0]
 800db34:	8839      	ldrh	r1, [r7, #0]
 800db36:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 800db3a:	f017 fa1e 	bl	8024f7a <lv_style_set_border_color>
    lv_style_set_border_side(&styles->menu_sidebar_cont, LV_BORDER_SIDE_RIGHT);
 800db3e:	6820      	ldr	r0, [r4, #0]
 800db40:	2108      	movs	r1, #8
 800db42:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 800db46:	f017 fa29 	bl	8024f9c <lv_style_set_border_side>
    style_init_reset(&styles->menu_main_cont);
 800db4a:	6820      	ldr	r0, [r4, #0]
 800db4c:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 800db50:	f7ff f990 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_all(&styles->menu_main_cont, 0);
 800db54:	6820      	ldr	r0, [r4, #0]
 800db56:	2100      	movs	r1, #0
 800db58:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 800db5c:	f015 fa30 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->menu_main_cont, 0);
 800db60:	6820      	ldr	r0, [r4, #0]
 800db62:	2100      	movs	r1, #0
 800db64:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 800db68:	f015 f9fa 	bl	8022f60 <lv_style_set_pad_gap>
    style_init_reset(&styles->menu_header_cont);
 800db6c:	6820      	ldr	r0, [r4, #0]
 800db6e:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
 800db72:	f7ff f97f 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_header_cont, PAD_SMALL);
 800db76:	7833      	ldrb	r3, [r6, #0]
 800db78:	6827      	ldr	r7, [r4, #0]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 800db80:	f040 83ec 	bne.w	800e35c <lv_theme_default_init+0x14d4>
 800db84:	210e      	movs	r1, #14
 800db86:	68e8      	ldr	r0, [r5, #12]
 800db88:	f015 fa2d 	bl	8022fe6 <lv_disp_dpx.part.0>
 800db8c:	4601      	mov	r1, r0
 800db8e:	4638      	mov	r0, r7
 800db90:	f015 fa0b 	bl	8022faa <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->menu_header_cont, PAD_TINY);
 800db94:	7833      	ldrb	r3, [r6, #0]
 800db96:	6827      	ldr	r7, [r4, #0]
 800db98:	2b01      	cmp	r3, #1
 800db9a:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 800db9e:	f040 83e3 	bne.w	800e368 <lv_theme_default_init+0x14e0>
 800dba2:	2108      	movs	r1, #8
 800dba4:	68e8      	ldr	r0, [r5, #12]
 800dba6:	f015 fa1e 	bl	8022fe6 <lv_disp_dpx.part.0>
 800dbaa:	4601      	mov	r1, r0
 800dbac:	4638      	mov	r0, r7
 800dbae:	f015 f9e2 	bl	8022f76 <lv_style_set_pad_ver>
    lv_style_set_pad_gap(&styles->menu_header_cont, PAD_SMALL);
 800dbb2:	7833      	ldrb	r3, [r6, #0]
 800dbb4:	6824      	ldr	r4, [r4, #0]
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	f504 74e4 	add.w	r4, r4, #456	; 0x1c8
 800dbbc:	f040 83da 	bne.w	800e374 <lv_theme_default_init+0x14ec>
 800dbc0:	210e      	movs	r1, #14
 800dbc2:	68e8      	ldr	r0, [r5, #12]
 800dbc4:	f015 fa0f 	bl	8022fe6 <lv_disp_dpx.part.0>
 800dbc8:	4601      	mov	r1, r0
 800dbca:	4620      	mov	r0, r4
    style_init_reset(&styles->menu_header_btn);
 800dbcc:	4cca      	ldr	r4, [pc, #808]	; (800def8 <lv_theme_default_init+0x1070>)
    lv_style_set_pad_gap(&styles->menu_header_cont, PAD_SMALL);
 800dbce:	f015 f9c7 	bl	8022f60 <lv_style_set_pad_gap>
    style_init_reset(&styles->menu_header_btn);
 800dbd2:	6820      	ldr	r0, [r4, #0]
 800dbd4:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 800dbd8:	f7ff f94c 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_header_btn, PAD_TINY);
 800dbdc:	7833      	ldrb	r3, [r6, #0]
 800dbde:	6827      	ldr	r7, [r4, #0]
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 800dbe6:	f040 83cb 	bne.w	800e380 <lv_theme_default_init+0x14f8>
 800dbea:	2108      	movs	r1, #8
 800dbec:	68e8      	ldr	r0, [r5, #12]
 800dbee:	f015 f9fa 	bl	8022fe6 <lv_disp_dpx.part.0>
 800dbf2:	4601      	mov	r1, r0
 800dbf4:	4638      	mov	r0, r7
 800dbf6:	4dc1      	ldr	r5, [pc, #772]	; (800defc <lv_theme_default_init+0x1074>)
 800dbf8:	f015 f9d7 	bl	8022faa <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->menu_header_btn, PAD_TINY);
 800dbfc:	7833      	ldrb	r3, [r6, #0]
 800dbfe:	6827      	ldr	r7, [r4, #0]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 800dc06:	f040 83c1 	bne.w	800e38c <lv_theme_default_init+0x1504>
 800dc0a:	2108      	movs	r1, #8
 800dc0c:	68e8      	ldr	r0, [r5, #12]
 800dc0e:	f015 f9ea 	bl	8022fe6 <lv_disp_dpx.part.0>
 800dc12:	4601      	mov	r1, r0
 800dc14:	4638      	mov	r0, r7
    lv_style_set_text_color(&styles->menu_header_btn, color_text);
 800dc16:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 800df00 <lv_theme_default_init+0x1078>
    lv_style_set_pad_ver(&styles->menu_header_btn, PAD_TINY);
 800dc1a:	f015 f9ac 	bl	8022f76 <lv_style_set_pad_ver>
    lv_style_set_shadow_opa(&styles->menu_header_btn, LV_OPA_TRANSP);
 800dc1e:	6820      	ldr	r0, [r4, #0]
 800dc20:	2100      	movs	r1, #0
 800dc22:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 800dc26:	f017 f9eb 	bl	8025000 <lv_style_set_shadow_opa>
    lv_style_set_bg_opa(&styles->menu_header_btn, LV_OPA_TRANSP);
 800dc2a:	6820      	ldr	r0, [r4, #0]
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 800dc32:	f017 f991 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->menu_header_btn, color_text);
 800dc36:	6820      	ldr	r0, [r4, #0]
 800dc38:	f8b8 1000 	ldrh.w	r1, [r8]
 800dc3c:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 800dc40:	f017 fa00 	bl	8025044 <lv_style_set_text_color>
    style_init_reset(&styles->menu_page);
 800dc44:	6820      	ldr	r0, [r4, #0]
 800dc46:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 800dc4a:	f7ff f913 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_page, 0);
 800dc4e:	6820      	ldr	r0, [r4, #0]
 800dc50:	2100      	movs	r1, #0
 800dc52:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 800dc56:	f015 f9a8 	bl	8022faa <lv_style_set_pad_hor>
    lv_style_set_pad_gap(&styles->menu_page, 0);
 800dc5a:	6820      	ldr	r0, [r4, #0]
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 800dc62:	f015 f97d 	bl	8022f60 <lv_style_set_pad_gap>
    style_init_reset(&styles->menu_pressed);
 800dc66:	6820      	ldr	r0, [r4, #0]
 800dc68:	f500 70f0 	add.w	r0, r0, #480	; 0x1e0
 800dc6c:	f7ff f902 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_opa(&styles->menu_pressed, LV_OPA_20);
 800dc70:	6820      	ldr	r0, [r4, #0]
 800dc72:	2133      	movs	r1, #51	; 0x33
 800dc74:	f500 70f0 	add.w	r0, r0, #480	; 0x1e0
 800dc78:	f017 f96e 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->menu_pressed, lv_palette_main(LV_PALETTE_GREY));
 800dc7c:	6826      	ldr	r6, [r4, #0]
 800dc7e:	2012      	movs	r0, #18
 800dc80:	f506 76f0 	add.w	r6, r6, #480	; 0x1e0
 800dc84:	f004 fc7a 	bl	801257c <lv_palette_main>
 800dc88:	4601      	mov	r1, r0
 800dc8a:	4630      	mov	r0, r6
    lv_style_set_pad_ver(&styles->menu_separator, PAD_TINY);
 800dc8c:	4e9d      	ldr	r6, [pc, #628]	; (800df04 <lv_theme_default_init+0x107c>)
    lv_style_set_bg_color(&styles->menu_pressed, lv_palette_main(LV_PALETTE_GREY));
 800dc8e:	f017 f95a 	bl	8024f46 <lv_style_set_bg_color>
    style_init_reset(&styles->menu_separator);
 800dc92:	6820      	ldr	r0, [r4, #0]
 800dc94:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
 800dc98:	f7ff f8ec 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_opa(&styles->menu_separator, LV_OPA_TRANSP);
 800dc9c:	6820      	ldr	r0, [r4, #0]
 800dc9e:	2100      	movs	r1, #0
 800dca0:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
 800dca4:	f017 f958 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_pad_ver(&styles->menu_separator, PAD_TINY);
 800dca8:	7833      	ldrb	r3, [r6, #0]
 800dcaa:	6827      	ldr	r7, [r4, #0]
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 800dcb2:	f040 8371 	bne.w	800e398 <lv_theme_default_init+0x1510>
 800dcb6:	2108      	movs	r1, #8
 800dcb8:	68e8      	ldr	r0, [r5, #12]
 800dcba:	f015 f994 	bl	8022fe6 <lv_disp_dpx.part.0>
 800dcbe:	4601      	mov	r1, r0
 800dcc0:	4638      	mov	r0, r7
 800dcc2:	f015 f958 	bl	8022f76 <lv_style_set_pad_ver>
    style_init_reset(&styles->meter_marker);
 800dcc6:	6820      	ldr	r0, [r4, #0]
 800dcc8:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 800dccc:	f7ff f8d2 	bl	800ce74 <style_init_reset>
    lv_style_set_line_width(&styles->meter_marker, lv_disp_dpx(theme.disp, 5));
 800dcd0:	6827      	ldr	r7, [r4, #0]
 800dcd2:	2105      	movs	r1, #5
 800dcd4:	68e8      	ldr	r0, [r5, #12]
 800dcd6:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800dcda:	f015 f984 	bl	8022fe6 <lv_disp_dpx.part.0>
 800dcde:	4601      	mov	r1, r0
 800dce0:	4638      	mov	r0, r7
 800dce2:	f017 f991 	bl	8025008 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->meter_marker, color_text);
 800dce6:	6820      	ldr	r0, [r4, #0]
 800dce8:	f8b8 1000 	ldrh.w	r1, [r8]
 800dcec:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 800dcf0:	f017 f98e 	bl	8025010 <lv_style_set_line_color>
    lv_style_set_size(&styles->meter_marker, lv_disp_dpx(theme.disp, 20));
 800dcf4:	6827      	ldr	r7, [r4, #0]
 800dcf6:	2114      	movs	r1, #20
 800dcf8:	68e8      	ldr	r0, [r5, #12]
 800dcfa:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800dcfe:	f015 f972 	bl	8022fe6 <lv_disp_dpx.part.0>
 800dd02:	4601      	mov	r1, r0
 800dd04:	4638      	mov	r0, r7
 800dd06:	f015 f945 	bl	8022f94 <lv_style_set_size>
    lv_style_set_pad_left(&styles->meter_marker, lv_disp_dpx(theme.disp, 15));
 800dd0a:	6827      	ldr	r7, [r4, #0]
 800dd0c:	210f      	movs	r1, #15
 800dd0e:	68e8      	ldr	r0, [r5, #12]
 800dd10:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800dd14:	f015 f967 	bl	8022fe6 <lv_disp_dpx.part.0>
 800dd18:	4601      	mov	r1, r0
 800dd1a:	4638      	mov	r0, r7
 800dd1c:	f017 f903 	bl	8024f26 <lv_style_set_pad_left>
    style_init_reset(&styles->meter_indic);
 800dd20:	6820      	ldr	r0, [r4, #0]
 800dd22:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 800dd26:	f7ff f8a5 	bl	800ce74 <style_init_reset>
    lv_style_set_radius(&styles->meter_indic, LV_RADIUS_CIRCLE);
 800dd2a:	6820      	ldr	r0, [r4, #0]
 800dd2c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800dd30:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 800dd34:	f017 f99b 	bl	802506e <lv_style_set_radius>
    lv_style_set_bg_color(&styles->meter_indic, color_text);
 800dd38:	6820      	ldr	r0, [r4, #0]
 800dd3a:	f8b8 1000 	ldrh.w	r1, [r8]
 800dd3e:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 800dd42:	f017 f900 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->meter_indic, LV_OPA_COVER);
 800dd46:	6820      	ldr	r0, [r4, #0]
 800dd48:	21ff      	movs	r1, #255	; 0xff
 800dd4a:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 800dd4e:	f017 f903 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_size(&styles->meter_indic, lv_disp_dpx(theme.disp, 15));
 800dd52:	6827      	ldr	r7, [r4, #0]
 800dd54:	210f      	movs	r1, #15
 800dd56:	68e8      	ldr	r0, [r5, #12]
 800dd58:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 800dd5c:	f015 f943 	bl	8022fe6 <lv_disp_dpx.part.0>
 800dd60:	4601      	mov	r1, r0
 800dd62:	4638      	mov	r0, r7
 800dd64:	f015 f916 	bl	8022f94 <lv_style_set_size>
    style_init_reset(&styles->table_cell);
 800dd68:	6820      	ldr	r0, [r4, #0]
 800dd6a:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 800dd6e:	f7ff f881 	bl	800ce74 <style_init_reset>
    lv_style_set_border_width(&styles->table_cell, lv_disp_dpx(theme.disp, 1));
 800dd72:	6827      	ldr	r7, [r4, #0]
 800dd74:	2101      	movs	r1, #1
 800dd76:	68e8      	ldr	r0, [r5, #12]
 800dd78:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800dd7c:	f015 f933 	bl	8022fe6 <lv_disp_dpx.part.0>
 800dd80:	4601      	mov	r1, r0
 800dd82:	4638      	mov	r0, r7
    lv_style_set_border_color(&styles->table_cell, color_grey);
 800dd84:	4f60      	ldr	r7, [pc, #384]	; (800df08 <lv_theme_default_init+0x1080>)
    lv_style_set_border_width(&styles->table_cell, lv_disp_dpx(theme.disp, 1));
 800dd86:	f017 f905 	bl	8024f94 <lv_style_set_border_width>
    lv_style_set_border_color(&styles->table_cell, color_grey);
 800dd8a:	6820      	ldr	r0, [r4, #0]
 800dd8c:	8839      	ldrh	r1, [r7, #0]
 800dd8e:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 800dd92:	f017 f8f2 	bl	8024f7a <lv_style_set_border_color>
    lv_style_set_border_side(&styles->table_cell, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
 800dd96:	6820      	ldr	r0, [r4, #0]
 800dd98:	2103      	movs	r1, #3
 800dd9a:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 800dd9e:	f017 f8fd 	bl	8024f9c <lv_style_set_border_side>
    style_init_reset(&styles->ta_cursor);
 800dda2:	6820      	ldr	r0, [r4, #0]
 800dda4:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 800dda8:	f7ff f864 	bl	800ce74 <style_init_reset>
    lv_style_set_border_color(&styles->ta_cursor, color_text);
 800ddac:	6820      	ldr	r0, [r4, #0]
 800ddae:	f8b8 1000 	ldrh.w	r1, [r8]
 800ddb2:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 800ddb6:	f017 f8e0 	bl	8024f7a <lv_style_set_border_color>
    lv_style_set_border_width(&styles->ta_cursor, lv_disp_dpx(theme.disp, 2));
 800ddba:	6823      	ldr	r3, [r4, #0]
 800ddbc:	2102      	movs	r1, #2
 800ddbe:	68e8      	ldr	r0, [r5, #12]
 800ddc0:	f503 78b8 	add.w	r8, r3, #368	; 0x170
 800ddc4:	f015 f90f 	bl	8022fe6 <lv_disp_dpx.part.0>
 800ddc8:	4601      	mov	r1, r0
 800ddca:	4640      	mov	r0, r8
 800ddcc:	f017 f8e2 	bl	8024f94 <lv_style_set_border_width>
    lv_style_set_pad_left(&styles->ta_cursor, - lv_disp_dpx(theme.disp, 1));
 800ddd0:	6823      	ldr	r3, [r4, #0]
 800ddd2:	2101      	movs	r1, #1
 800ddd4:	68e8      	ldr	r0, [r5, #12]
 800ddd6:	f503 78b8 	add.w	r8, r3, #368	; 0x170
 800ddda:	f015 f904 	bl	8022fe6 <lv_disp_dpx.part.0>
 800ddde:	4241      	negs	r1, r0
 800dde0:	4640      	mov	r0, r8
 800dde2:	b209      	sxth	r1, r1
 800dde4:	f017 f89f 	bl	8024f26 <lv_style_set_pad_left>
    lv_style_set_border_side(&styles->ta_cursor, LV_BORDER_SIDE_LEFT);
 800dde8:	6820      	ldr	r0, [r4, #0]
 800ddea:	2104      	movs	r1, #4
 800ddec:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 800ddf0:	f017 f8d4 	bl	8024f9c <lv_style_set_border_side>
    lv_style_set_anim_time(&styles->ta_cursor, 400);
 800ddf4:	6820      	ldr	r0, [r4, #0]
 800ddf6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800ddfa:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 800ddfe:	f017 f946 	bl	802508e <lv_style_set_anim_time>
    style_init_reset(&styles->ta_placeholder);
 800de02:	6820      	ldr	r0, [r4, #0]
 800de04:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 800de08:	f7ff f834 	bl	800ce74 <style_init_reset>
    lv_style_set_text_color(&styles->ta_placeholder, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 800de0c:	6823      	ldr	r3, [r4, #0]
 800de0e:	f503 78bc 	add.w	r8, r3, #376	; 0x178
 800de12:	6a2b      	ldr	r3, [r5, #32]
 800de14:	07db      	lsls	r3, r3, #31
 800de16:	f140 82c5 	bpl.w	800e3a4 <lv_theme_default_init+0x151c>
 800de1a:	2102      	movs	r1, #2
 800de1c:	2012      	movs	r0, #18
 800de1e:	f004 fbc9 	bl	80125b4 <lv_palette_darken>
                                                                                                   2) : lv_palette_lighten(LV_PALETTE_GREY, 1));
 800de22:	4601      	mov	r1, r0
    lv_style_set_text_color(&styles->ta_placeholder, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 800de24:	4640      	mov	r0, r8
 800de26:	f017 f90d 	bl	8025044 <lv_style_set_text_color>
    style_init_reset(&styles->calendar_btnm_bg);
 800de2a:	6820      	ldr	r0, [r4, #0]
 800de2c:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 800de30:	f7ff f820 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_all(&styles->calendar_btnm_bg, PAD_SMALL);
 800de34:	6823      	ldr	r3, [r4, #0]
 800de36:	f503 78c0 	add.w	r8, r3, #384	; 0x180
 800de3a:	7833      	ldrb	r3, [r6, #0]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	f040 82b6 	bne.w	800e3ae <lv_theme_default_init+0x1526>
 800de42:	210e      	movs	r1, #14
 800de44:	68e8      	ldr	r0, [r5, #12]
 800de46:	f015 f8ce 	bl	8022fe6 <lv_disp_dpx.part.0>
 800de4a:	4601      	mov	r1, r0
 800de4c:	4640      	mov	r0, r8
 800de4e:	f015 f8b7 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->calendar_btnm_bg, PAD_SMALL / 2);
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	f503 78c0 	add.w	r8, r3, #384	; 0x180
 800de58:	7833      	ldrb	r3, [r6, #0]
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	f040 82ad 	bne.w	800e3ba <lv_theme_default_init+0x1532>
 800de60:	210e      	movs	r1, #14
 800de62:	68e8      	ldr	r0, [r5, #12]
 800de64:	f015 f8bf 	bl	8022fe6 <lv_disp_dpx.part.0>
 800de68:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800de6c:	f340 014f 	sbfx	r1, r0, #1, #16
 800de70:	4640      	mov	r0, r8
 800de72:	f015 f875 	bl	8022f60 <lv_style_set_pad_gap>
    style_init_reset(&styles->calendar_btnm_day);
 800de76:	6820      	ldr	r0, [r4, #0]
 800de78:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 800de7c:	f7fe fffa 	bl	800ce74 <style_init_reset>
    lv_style_set_border_width(&styles->calendar_btnm_day, lv_disp_dpx(theme.disp, 1));
 800de80:	6823      	ldr	r3, [r4, #0]
 800de82:	2101      	movs	r1, #1
 800de84:	68e8      	ldr	r0, [r5, #12]
 800de86:	f503 78c4 	add.w	r8, r3, #392	; 0x188
 800de8a:	f015 f8ac 	bl	8022fe6 <lv_disp_dpx.part.0>
 800de8e:	4601      	mov	r1, r0
 800de90:	4640      	mov	r0, r8
 800de92:	f017 f87f 	bl	8024f94 <lv_style_set_border_width>
    lv_style_set_border_color(&styles->calendar_btnm_day, color_grey);
 800de96:	6820      	ldr	r0, [r4, #0]
 800de98:	8839      	ldrh	r1, [r7, #0]
 800de9a:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 800de9e:	f017 f86c 	bl	8024f7a <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->calendar_btnm_day, color_card);
 800dea2:	4b1a      	ldr	r3, [pc, #104]	; (800df0c <lv_theme_default_init+0x1084>)
 800dea4:	6820      	ldr	r0, [r4, #0]
 800dea6:	8819      	ldrh	r1, [r3, #0]
 800dea8:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 800deac:	f017 f84b 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->calendar_btnm_day, LV_OPA_20);
 800deb0:	6820      	ldr	r0, [r4, #0]
 800deb2:	2133      	movs	r1, #51	; 0x33
 800deb4:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 800deb8:	f017 f84e 	bl	8024f58 <lv_style_set_bg_opa>
    style_init_reset(&styles->calendar_header);
 800debc:	6820      	ldr	r0, [r4, #0]
 800debe:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 800dec2:	f7fe ffd7 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_hor(&styles->calendar_header, PAD_SMALL);
 800dec6:	6823      	ldr	r3, [r4, #0]
 800dec8:	f503 78c8 	add.w	r8, r3, #400	; 0x190
 800decc:	7833      	ldrb	r3, [r6, #0]
 800dece:	2b01      	cmp	r3, #1
 800ded0:	f040 8279 	bne.w	800e3c6 <lv_theme_default_init+0x153e>
 800ded4:	210e      	movs	r1, #14
 800ded6:	68e8      	ldr	r0, [r5, #12]
 800ded8:	f015 f885 	bl	8022fe6 <lv_disp_dpx.part.0>
 800dedc:	4601      	mov	r1, r0
 800dede:	4640      	mov	r0, r8
 800dee0:	f015 f863 	bl	8022faa <lv_style_set_pad_hor>
    lv_style_set_pad_top(&styles->calendar_header, PAD_SMALL);
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	f503 78c8 	add.w	r8, r3, #400	; 0x190
 800deea:	7833      	ldrb	r3, [r6, #0]
 800deec:	2b01      	cmp	r3, #1
 800deee:	f040 8270 	bne.w	800e3d2 <lv_theme_default_init+0x154a>
 800def2:	210e      	movs	r1, #14
 800def4:	68e8      	ldr	r0, [r5, #12]
 800def6:	e00b      	b.n	800df10 <lv_theme_default_init+0x1088>
 800def8:	240011d0 	.word	0x240011d0
 800defc:	240011ac 	.word	0x240011ac
 800df00:	24010d1a 	.word	0x24010d1a
 800df04:	24010e31 	.word	0x24010e31
 800df08:	24010d16 	.word	0x24010d16
 800df0c:	24010d18 	.word	0x24010d18
 800df10:	f015 f869 	bl	8022fe6 <lv_disp_dpx.part.0>
 800df14:	4601      	mov	r1, r0
 800df16:	4640      	mov	r0, r8
 800df18:	f016 fffd 	bl	8024f16 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->calendar_header, PAD_TINY);
 800df1c:	6823      	ldr	r3, [r4, #0]
 800df1e:	f503 78c8 	add.w	r8, r3, #400	; 0x190
 800df22:	7833      	ldrb	r3, [r6, #0]
 800df24:	2b01      	cmp	r3, #1
 800df26:	f040 825a 	bne.w	800e3de <lv_theme_default_init+0x1556>
 800df2a:	2108      	movs	r1, #8
 800df2c:	68e8      	ldr	r0, [r5, #12]
 800df2e:	f015 f85a 	bl	8022fe6 <lv_disp_dpx.part.0>
 800df32:	4601      	mov	r1, r0
 800df34:	4640      	mov	r0, r8
 800df36:	f016 fff2 	bl	8024f1e <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->calendar_header, PAD_SMALL);
 800df3a:	6823      	ldr	r3, [r4, #0]
 800df3c:	f503 78c8 	add.w	r8, r3, #400	; 0x190
 800df40:	7833      	ldrb	r3, [r6, #0]
 800df42:	2b01      	cmp	r3, #1
 800df44:	f040 8251 	bne.w	800e3ea <lv_theme_default_init+0x1562>
 800df48:	210e      	movs	r1, #14
 800df4a:	68e8      	ldr	r0, [r5, #12]
 800df4c:	f015 f84b 	bl	8022fe6 <lv_disp_dpx.part.0>
 800df50:	4601      	mov	r1, r0
 800df52:	4640      	mov	r0, r8
 800df54:	f015 f804 	bl	8022f60 <lv_style_set_pad_gap>
    style_init_reset(&styles->colorwheel_main);
 800df58:	6820      	ldr	r0, [r4, #0]
 800df5a:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 800df5e:	f7fe ff89 	bl	800ce74 <style_init_reset>
    lv_style_set_arc_width(&styles->colorwheel_main, lv_disp_dpx(theme.disp, 10));
 800df62:	6823      	ldr	r3, [r4, #0]
 800df64:	210a      	movs	r1, #10
 800df66:	68e8      	ldr	r0, [r5, #12]
 800df68:	f503 78cc 	add.w	r8, r3, #408	; 0x198
 800df6c:	f015 f83b 	bl	8022fe6 <lv_disp_dpx.part.0>
 800df70:	4601      	mov	r1, r0
 800df72:	4640      	mov	r0, r8
 800df74:	f017 f855 	bl	8025022 <lv_style_set_arc_width>
    style_init_reset(&styles->msgbox_btn_bg);
 800df78:	6820      	ldr	r0, [r4, #0]
 800df7a:	f500 70fc 	add.w	r0, r0, #504	; 0x1f8
 800df7e:	f7fe ff79 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_all(&styles->msgbox_btn_bg, lv_disp_dpx(theme.disp, 4));
 800df82:	6823      	ldr	r3, [r4, #0]
 800df84:	2104      	movs	r1, #4
 800df86:	68e8      	ldr	r0, [r5, #12]
 800df88:	f503 78fc 	add.w	r8, r3, #504	; 0x1f8
 800df8c:	f015 f82b 	bl	8022fe6 <lv_disp_dpx.part.0>
 800df90:	4601      	mov	r1, r0
 800df92:	4640      	mov	r0, r8
 800df94:	f015 f814 	bl	8022fc0 <lv_style_set_pad_all>
    style_init_reset(&styles->msgbox_bg);
 800df98:	6820      	ldr	r0, [r4, #0]
 800df9a:	f500 70f8 	add.w	r0, r0, #496	; 0x1f0
 800df9e:	f7fe ff69 	bl	800ce74 <style_init_reset>
    lv_style_set_max_width(&styles->msgbox_bg, lv_pct(100));
 800dfa2:	6820      	ldr	r0, [r4, #0]
 800dfa4:	f242 0164 	movw	r1, #8292	; 0x2064
 800dfa8:	f500 70f8 	add.w	r0, r0, #496	; 0x1f0
 800dfac:	f016 ff9f 	bl	8024eee <lv_style_set_max_width>
    style_init_reset(&styles->msgbox_backdrop_bg);
 800dfb0:	6820      	ldr	r0, [r4, #0]
 800dfb2:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800dfb6:	f7fe ff5d 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_color(&styles->msgbox_backdrop_bg, lv_palette_main(LV_PALETTE_GREY));
 800dfba:	6823      	ldr	r3, [r4, #0]
 800dfbc:	2012      	movs	r0, #18
 800dfbe:	f503 7800 	add.w	r8, r3, #512	; 0x200
 800dfc2:	f004 fadb 	bl	801257c <lv_palette_main>
 800dfc6:	4601      	mov	r1, r0
 800dfc8:	4640      	mov	r0, r8
 800dfca:	f016 ffbc 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->msgbox_backdrop_bg, LV_OPA_50);
 800dfce:	6820      	ldr	r0, [r4, #0]
 800dfd0:	217f      	movs	r1, #127	; 0x7f
 800dfd2:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800dfd6:	f016 ffbf 	bl	8024f58 <lv_style_set_bg_opa>
    style_init_reset(&styles->keyboard_btn_bg);
 800dfda:	6820      	ldr	r0, [r4, #0]
 800dfdc:	f500 7002 	add.w	r0, r0, #520	; 0x208
 800dfe0:	f7fe ff48 	bl	800ce74 <style_init_reset>
    lv_style_set_shadow_width(&styles->keyboard_btn_bg, 0);
 800dfe4:	6820      	ldr	r0, [r4, #0]
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	f500 7002 	add.w	r0, r0, #520	; 0x208
 800dfec:	f016 fff3 	bl	8024fd6 <lv_style_set_shadow_width>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 800dff0:	6823      	ldr	r3, [r4, #0]
 800dff2:	f503 7802 	add.w	r8, r3, #520	; 0x208
 800dff6:	7833      	ldrb	r3, [r6, #0]
 800dff8:	2b03      	cmp	r3, #3
 800dffa:	f040 81fc 	bne.w	800e3f6 <lv_theme_default_init+0x156e>
 800dffe:	2108      	movs	r1, #8
 800e000:	68e8      	ldr	r0, [r5, #12]
 800e002:	f014 fff0 	bl	8022fe6 <lv_disp_dpx.part.0>
 800e006:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800e00a:	f340 004f 	sbfx	r0, r0, #1, #16
 800e00e:	4601      	mov	r1, r0
 800e010:	4640      	mov	r0, r8
 800e012:	f017 f82c 	bl	802506e <lv_style_set_radius>
    style_init_reset(&styles->tab_btn);
 800e016:	6820      	ldr	r0, [r4, #0]
 800e018:	f500 700e 	add.w	r0, r0, #568	; 0x238
 800e01c:	f7fe ff2a 	bl	800ce74 <style_init_reset>
    lv_style_set_border_color(&styles->tab_btn, theme.color_primary);
 800e020:	6820      	ldr	r0, [r4, #0]
 800e022:	8a29      	ldrh	r1, [r5, #16]
 800e024:	f500 700e 	add.w	r0, r0, #568	; 0x238
 800e028:	f016 ffa7 	bl	8024f7a <lv_style_set_border_color>
    lv_style_set_border_width(&styles->tab_btn, BORDER_WIDTH * 2);
 800e02c:	6823      	ldr	r3, [r4, #0]
 800e02e:	2102      	movs	r1, #2
 800e030:	68e8      	ldr	r0, [r5, #12]
 800e032:	f503 780e 	add.w	r8, r3, #568	; 0x238
 800e036:	f014 ffd6 	bl	8022fe6 <lv_disp_dpx.part.0>
 800e03a:	0041      	lsls	r1, r0, #1
 800e03c:	4640      	mov	r0, r8
 800e03e:	b209      	sxth	r1, r1
 800e040:	f016 ffa8 	bl	8024f94 <lv_style_set_border_width>
    lv_style_set_border_side(&styles->tab_btn, LV_BORDER_SIDE_BOTTOM);
 800e044:	6820      	ldr	r0, [r4, #0]
 800e046:	2101      	movs	r1, #1
 800e048:	f500 700e 	add.w	r0, r0, #568	; 0x238
 800e04c:	f016 ffa6 	bl	8024f9c <lv_style_set_border_side>
    style_init_reset(&styles->tab_bg_focus);
 800e050:	6820      	ldr	r0, [r4, #0]
 800e052:	f500 700c 	add.w	r0, r0, #560	; 0x230
 800e056:	f7fe ff0d 	bl	800ce74 <style_init_reset>
    lv_style_set_outline_pad(&styles->tab_bg_focus, -BORDER_WIDTH);
 800e05a:	6823      	ldr	r3, [r4, #0]
 800e05c:	2102      	movs	r1, #2
 800e05e:	68e8      	ldr	r0, [r5, #12]
 800e060:	f503 780c 	add.w	r8, r3, #560	; 0x230
 800e064:	f014 ffbf 	bl	8022fe6 <lv_disp_dpx.part.0>
 800e068:	4241      	negs	r1, r0
 800e06a:	4640      	mov	r0, r8
 800e06c:	b209      	sxth	r1, r1
 800e06e:	f016 ffae 	bl	8024fce <lv_style_set_outline_pad>
    style_init_reset(&styles->list_bg);
 800e072:	6820      	ldr	r0, [r4, #0]
 800e074:	f500 7004 	add.w	r0, r0, #528	; 0x210
 800e078:	f7fe fefc 	bl	800ce74 <style_init_reset>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 800e07c:	6823      	ldr	r3, [r4, #0]
 800e07e:	f503 7804 	add.w	r8, r3, #528	; 0x210
 800e082:	7833      	ldrb	r3, [r6, #0]
 800e084:	2b01      	cmp	r3, #1
 800e086:	f040 81be 	bne.w	800e406 <lv_theme_default_init+0x157e>
 800e08a:	2118      	movs	r1, #24
 800e08c:	68e8      	ldr	r0, [r5, #12]
 800e08e:	f014 ffaa 	bl	8022fe6 <lv_disp_dpx.part.0>
 800e092:	4601      	mov	r1, r0
 800e094:	4640      	mov	r0, r8
 800e096:	f014 ff88 	bl	8022faa <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->list_bg, 0);
 800e09a:	6820      	ldr	r0, [r4, #0]
 800e09c:	2100      	movs	r1, #0
 800e09e:	f500 7004 	add.w	r0, r0, #528	; 0x210
 800e0a2:	f014 ff68 	bl	8022f76 <lv_style_set_pad_ver>
    lv_style_set_pad_gap(&styles->list_bg, 0);
 800e0a6:	6820      	ldr	r0, [r4, #0]
 800e0a8:	2100      	movs	r1, #0
 800e0aa:	f500 7004 	add.w	r0, r0, #528	; 0x210
 800e0ae:	f014 ff57 	bl	8022f60 <lv_style_set_pad_gap>
    lv_style_set_clip_corner(&styles->list_bg, true);
 800e0b2:	6820      	ldr	r0, [r4, #0]
 800e0b4:	2101      	movs	r1, #1
 800e0b6:	f500 7004 	add.w	r0, r0, #528	; 0x210
 800e0ba:	f016 ffdc 	bl	8025076 <lv_style_set_clip_corner>
    style_init_reset(&styles->list_btn);
 800e0be:	6820      	ldr	r0, [r4, #0]
 800e0c0:	f500 7006 	add.w	r0, r0, #536	; 0x218
 800e0c4:	f7fe fed6 	bl	800ce74 <style_init_reset>
    lv_style_set_border_width(&styles->list_btn, lv_disp_dpx(theme.disp, 1));
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	2101      	movs	r1, #1
 800e0cc:	68e8      	ldr	r0, [r5, #12]
 800e0ce:	f503 7806 	add.w	r8, r3, #536	; 0x218
 800e0d2:	f014 ff88 	bl	8022fe6 <lv_disp_dpx.part.0>
 800e0d6:	4601      	mov	r1, r0
 800e0d8:	4640      	mov	r0, r8
 800e0da:	f016 ff5b 	bl	8024f94 <lv_style_set_border_width>
    lv_style_set_border_color(&styles->list_btn, color_grey);
 800e0de:	6820      	ldr	r0, [r4, #0]
 800e0e0:	8839      	ldrh	r1, [r7, #0]
 800e0e2:	f500 7006 	add.w	r0, r0, #536	; 0x218
 800e0e6:	f016 ff48 	bl	8024f7a <lv_style_set_border_color>
    lv_style_set_border_side(&styles->list_btn, LV_BORDER_SIDE_BOTTOM);
 800e0ea:	6820      	ldr	r0, [r4, #0]
 800e0ec:	2101      	movs	r1, #1
 800e0ee:	f500 7006 	add.w	r0, r0, #536	; 0x218
 800e0f2:	f016 ff53 	bl	8024f9c <lv_style_set_border_side>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 800e0f6:	7833      	ldrb	r3, [r6, #0]
 800e0f8:	6827      	ldr	r7, [r4, #0]
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800e100:	f040 8187 	bne.w	800e412 <lv_theme_default_init+0x158a>
 800e104:	210e      	movs	r1, #14
 800e106:	68e8      	ldr	r0, [r5, #12]
 800e108:	f014 ff6d 	bl	8022fe6 <lv_disp_dpx.part.0>
 800e10c:	4601      	mov	r1, r0
 800e10e:	4638      	mov	r0, r7
 800e110:	f014 ff56 	bl	8022fc0 <lv_style_set_pad_all>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 800e114:	7833      	ldrb	r3, [r6, #0]
 800e116:	6827      	ldr	r7, [r4, #0]
 800e118:	2b01      	cmp	r3, #1
 800e11a:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800e11e:	f040 817e 	bne.w	800e41e <lv_theme_default_init+0x1596>
 800e122:	210e      	movs	r1, #14
 800e124:	68e8      	ldr	r0, [r5, #12]
 800e126:	f014 ff5e 	bl	8022fe6 <lv_disp_dpx.part.0>
 800e12a:	4601      	mov	r1, r0
 800e12c:	4638      	mov	r0, r7
 800e12e:	f016 ff06 	bl	8024f3e <lv_style_set_pad_column>
    style_init_reset(&styles->list_item_grow);
 800e132:	6820      	ldr	r0, [r4, #0]
 800e134:	f500 7008 	add.w	r0, r0, #544	; 0x220
 800e138:	f7fe fe9c 	bl	800ce74 <style_init_reset>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 800e13c:	7833      	ldrb	r3, [r6, #0]
 800e13e:	6827      	ldr	r7, [r4, #0]
 800e140:	2b01      	cmp	r3, #1
 800e142:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800e146:	f040 8170 	bne.w	800e42a <lv_theme_default_init+0x15a2>
 800e14a:	2118      	movs	r1, #24
 800e14c:	68e8      	ldr	r0, [r5, #12]
 800e14e:	f014 ff4a 	bl	8022fe6 <lv_disp_dpx.part.0>
 800e152:	4601      	mov	r1, r0
 800e154:	4638      	mov	r0, r7
 800e156:	f016 fed6 	bl	8024f06 <lv_style_set_transform_width>
    style_init_reset(&styles->led);
 800e15a:	6820      	ldr	r0, [r4, #0]
 800e15c:	f500 7010 	add.w	r0, r0, #576	; 0x240
 800e160:	f7fe fe88 	bl	800ce74 <style_init_reset>
    lv_style_set_bg_opa(&styles->led, LV_OPA_COVER);
 800e164:	6820      	ldr	r0, [r4, #0]
 800e166:	21ff      	movs	r1, #255	; 0xff
 800e168:	f500 7010 	add.w	r0, r0, #576	; 0x240
 800e16c:	f016 fef4 	bl	8024f58 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->led, lv_color_white());
 800e170:	6820      	ldr	r0, [r4, #0]
 800e172:	f500 7310 	add.w	r3, r0, #576	; 0x240
 800e176:	f014 fef0 	bl	8022f5a <lv_color_white>
 800e17a:	4601      	mov	r1, r0
 800e17c:	4618      	mov	r0, r3
 800e17e:	f016 fee2 	bl	8024f46 <lv_style_set_bg_color>
    lv_style_set_bg_grad_color(&styles->led, lv_palette_main(LV_PALETTE_GREY));
 800e182:	6826      	ldr	r6, [r4, #0]
 800e184:	2012      	movs	r0, #18
 800e186:	f506 7610 	add.w	r6, r6, #576	; 0x240
 800e18a:	f004 f9f7 	bl	801257c <lv_palette_main>
 800e18e:	4601      	mov	r1, r0
 800e190:	4630      	mov	r0, r6
 800e192:	f016 fee5 	bl	8024f60 <lv_style_set_bg_grad_color>
    lv_style_set_radius(&styles->led, LV_RADIUS_CIRCLE);
 800e196:	6820      	ldr	r0, [r4, #0]
 800e198:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800e19c:	f500 7010 	add.w	r0, r0, #576	; 0x240
 800e1a0:	f016 ff65 	bl	802506e <lv_style_set_radius>
    lv_style_set_shadow_width(&styles->led, lv_disp_dpx(theme.disp, 15));
 800e1a4:	6826      	ldr	r6, [r4, #0]
 800e1a6:	210f      	movs	r1, #15
 800e1a8:	68e8      	ldr	r0, [r5, #12]
 800e1aa:	f506 7610 	add.w	r6, r6, #576	; 0x240
 800e1ae:	f014 ff1a 	bl	8022fe6 <lv_disp_dpx.part.0>
 800e1b2:	4601      	mov	r1, r0
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	f016 ff0e 	bl	8024fd6 <lv_style_set_shadow_width>
    lv_style_set_shadow_color(&styles->led, lv_color_white());
 800e1ba:	6820      	ldr	r0, [r4, #0]
 800e1bc:	f500 7310 	add.w	r3, r0, #576	; 0x240
 800e1c0:	f014 fecb 	bl	8022f5a <lv_color_white>
 800e1c4:	4601      	mov	r1, r0
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f016 ff11 	bl	8024fee <lv_style_set_shadow_color>
    lv_style_set_shadow_spread(&styles->led, lv_disp_dpx(theme.disp, 5));
 800e1cc:	6824      	ldr	r4, [r4, #0]
 800e1ce:	2105      	movs	r1, #5
 800e1d0:	68e8      	ldr	r0, [r5, #12]
 800e1d2:	f504 7410 	add.w	r4, r4, #576	; 0x240
 800e1d6:	f014 ff06 	bl	8022fe6 <lv_disp_dpx.part.0>
 800e1da:	4601      	mov	r1, r0
 800e1dc:	4620      	mov	r0, r4
 800e1de:	f016 ff02 	bl	8024fe6 <lv_style_set_shadow_spread>
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 800e1e2:	9b03      	ldr	r3, [sp, #12]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f040 8126 	bne.w	800e436 <lv_theme_default_init+0x15ae>
 800e1ea:	2000      	movs	r0, #0
 800e1ec:	f7f8 f96e 	bl	80064cc <lv_obj_report_style_change>
    inited = true;
 800e1f0:	4b94      	ldr	r3, [pc, #592]	; (800e444 <lv_theme_default_init+0x15bc>)
 800e1f2:	2201      	movs	r2, #1
}
 800e1f4:	4894      	ldr	r0, [pc, #592]	; (800e448 <lv_theme_default_init+0x15c0>)
    inited = true;
 800e1f6:	701a      	strb	r2, [r3, #0]
}
 800e1f8:	b005      	add	sp, #20
 800e1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1fe:	2303      	movs	r3, #3
 800e200:	f7fe be67 	b.w	800ced2 <lv_theme_default_init+0x4a>
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 800e204:	2104      	movs	r1, #4
 800e206:	2012      	movs	r0, #18
 800e208:	f004 f9c2 	bl	8012590 <lv_palette_lighten>
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 800e20c:	6a2b      	ldr	r3, [r5, #32]
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 800e20e:	f8ab 0000 	strh.w	r0, [fp]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 800e212:	07d9      	lsls	r1, r3, #31
 800e214:	f53e ae78 	bmi.w	800cf08 <lv_theme_default_init+0x80>
 800e218:	2104      	movs	r1, #4
 800e21a:	2012      	movs	r0, #18
 800e21c:	f004 f9ca 	bl	80125b4 <lv_palette_darken>
 800e220:	f7fe be76 	b.w	800cf10 <lv_theme_default_init+0x88>
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 800e224:	f014 fe99 	bl	8022f5a <lv_color_white>
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 800e228:	2102      	movs	r1, #2
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 800e22a:	f8a9 0000 	strh.w	r0, [r9]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 800e22e:	2012      	movs	r0, #18
 800e230:	f004 f9ae 	bl	8012590 <lv_palette_lighten>
 800e234:	f8a8 0000 	strh.w	r0, [r8]
 800e238:	f7fe be7c 	b.w	800cf34 <lv_theme_default_init+0xac>
                                                                        2) : lv_palette_main(LV_PALETTE_GREY);
 800e23c:	2012      	movs	r0, #18
 800e23e:	f004 f99d 	bl	801257c <lv_palette_main>
 800e242:	f7fe bea8 	b.w	800cf96 <lv_theme_default_init+0x10e>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 800e246:	2b02      	cmp	r3, #2
 800e248:	68e8      	ldr	r0, [r5, #12]
 800e24a:	bf0c      	ite	eq
 800e24c:	210c      	moveq	r1, #12
 800e24e:	210a      	movne	r1, #10
 800e250:	f7fe beed 	b.w	800d02e <lv_theme_default_init+0x1a6>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 800e254:	2b02      	cmp	r3, #2
 800e256:	68e8      	ldr	r0, [r5, #12]
 800e258:	bf0c      	ite	eq
 800e25a:	210c      	moveq	r1, #12
 800e25c:	210a      	movne	r1, #10
 800e25e:	f7fe bef4 	b.w	800d04a <lv_theme_default_init+0x1c2>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 800e262:	2b02      	cmp	r3, #2
 800e264:	68e8      	ldr	r0, [r5, #12]
 800e266:	bf0c      	ite	eq
 800e268:	2114      	moveq	r1, #20
 800e26a:	2110      	movne	r1, #16
 800e26c:	f7fe bf35 	b.w	800d0da <lv_theme_default_init+0x252>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 800e270:	2b02      	cmp	r3, #2
 800e272:	68e8      	ldr	r0, [r5, #12]
 800e274:	bf0c      	ite	eq
 800e276:	210c      	moveq	r1, #12
 800e278:	210a      	movne	r1, #10
 800e27a:	f7fe bf3d 	b.w	800d0f8 <lv_theme_default_init+0x270>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 800e27e:	2b02      	cmp	r3, #2
 800e280:	68e8      	ldr	r0, [r5, #12]
 800e282:	bf0c      	ite	eq
 800e284:	210c      	moveq	r1, #12
 800e286:	210a      	movne	r1, #10
 800e288:	f7fe bf62 	b.w	800d150 <lv_theme_default_init+0x2c8>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp,
 800e28c:	2b02      	cmp	r3, #2
 800e28e:	68e8      	ldr	r0, [r5, #12]
 800e290:	bf0c      	ite	eq
 800e292:	210c      	moveq	r1, #12
 800e294:	2108      	movne	r1, #8
 800e296:	f7fe bfc0 	b.w	800d21a <lv_theme_default_init+0x392>
        lv_style_set_shadow_width(&styles->btn, LV_DPX(3));
 800e29a:	2101      	movs	r1, #1
 800e29c:	f7fe bff2 	b.w	800d284 <lv_theme_default_init+0x3fc>
        lv_style_set_shadow_ofs_y(&styles->btn, lv_disp_dpx(theme.disp, LV_DPX(4)));
 800e2a0:	2101      	movs	r1, #1
 800e2a2:	f7ff b80c 	b.w	800d2be <lv_theme_default_init+0x436>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 800e2a6:	2b02      	cmp	r3, #2
 800e2a8:	68e8      	ldr	r0, [r5, #12]
 800e2aa:	bf0c      	ite	eq
 800e2ac:	2114      	moveq	r1, #20
 800e2ae:	2110      	movne	r1, #16
 800e2b0:	f7ff b81a 	b.w	800d2e8 <lv_theme_default_init+0x460>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 800e2b4:	2b02      	cmp	r3, #2
 800e2b6:	68e8      	ldr	r0, [r5, #12]
 800e2b8:	bf0c      	ite	eq
 800e2ba:	210c      	moveq	r1, #12
 800e2bc:	210a      	movne	r1, #10
 800e2be:	f7ff b822 	b.w	800d306 <lv_theme_default_init+0x47e>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 800e2c2:	2b02      	cmp	r3, #2
 800e2c4:	68e8      	ldr	r0, [r5, #12]
 800e2c6:	bf0c      	ite	eq
 800e2c8:	2114      	moveq	r1, #20
 800e2ca:	2110      	movne	r1, #16
 800e2cc:	f7ff b878 	b.w	800d3c0 <lv_theme_default_init+0x538>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	68e8      	ldr	r0, [r5, #12]
 800e2d4:	bf0c      	ite	eq
 800e2d6:	2114      	moveq	r1, #20
 800e2d8:	2110      	movne	r1, #16
 800e2da:	f7ff b880 	b.w	800d3de <lv_theme_default_init+0x556>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 800e2de:	2b02      	cmp	r3, #2
 800e2e0:	68e8      	ldr	r0, [r5, #12]
 800e2e2:	bf0c      	ite	eq
 800e2e4:	2114      	moveq	r1, #20
 800e2e6:	2110      	movne	r1, #16
 800e2e8:	f7ff b888 	b.w	800d3fc <lv_theme_default_init+0x574>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 800e2ec:	2b02      	cmp	r3, #2
 800e2ee:	68e8      	ldr	r0, [r5, #12]
 800e2f0:	bf0c      	ite	eq
 800e2f2:	210c      	moveq	r1, #12
 800e2f4:	210a      	movne	r1, #10
 800e2f6:	f7ff b894 	b.w	800d422 <lv_theme_default_init+0x59a>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 800e2fa:	2b02      	cmp	r3, #2
 800e2fc:	68e8      	ldr	r0, [r5, #12]
 800e2fe:	bf0c      	ite	eq
 800e300:	210c      	moveq	r1, #12
 800e302:	210a      	movne	r1, #10
 800e304:	f7ff b89c 	b.w	800d440 <lv_theme_default_init+0x5b8>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 800e308:	2b02      	cmp	r3, #2
 800e30a:	68e8      	ldr	r0, [r5, #12]
 800e30c:	bf0c      	ite	eq
 800e30e:	2106      	moveq	r1, #6
 800e310:	2102      	movne	r1, #2
 800e312:	f7ff b8ed 	b.w	800d4f0 <lv_theme_default_init+0x668>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 800e316:	2b02      	cmp	r3, #2
 800e318:	68e8      	ldr	r0, [r5, #12]
 800e31a:	bf0c      	ite	eq
 800e31c:	2106      	moveq	r1, #6
 800e31e:	2102      	movne	r1, #2
 800e320:	f7ff b8f5 	b.w	800d50e <lv_theme_default_init+0x686>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 800e324:	2b02      	cmp	r3, #2
 800e326:	68e8      	ldr	r0, [r5, #12]
 800e328:	bf0c      	ite	eq
 800e32a:	2106      	moveq	r1, #6
 800e32c:	2102      	movne	r1, #2
 800e32e:	f7ff b907 	b.w	800d540 <lv_theme_default_init+0x6b8>
    lv_style_set_pad_hor(&styles->menu_cont, PAD_SMALL);
 800e332:	2b02      	cmp	r3, #2
 800e334:	68e8      	ldr	r0, [r5, #12]
 800e336:	bf0c      	ite	eq
 800e338:	210c      	moveq	r1, #12
 800e33a:	210a      	movne	r1, #10
 800e33c:	f7ff bb93 	b.w	800da66 <lv_theme_default_init+0xbde>
    lv_style_set_pad_ver(&styles->menu_cont, PAD_SMALL);
 800e340:	2b02      	cmp	r3, #2
 800e342:	68e8      	ldr	r0, [r5, #12]
 800e344:	bf0c      	ite	eq
 800e346:	210c      	moveq	r1, #12
 800e348:	210a      	movne	r1, #10
 800e34a:	f7ff bb9b 	b.w	800da84 <lv_theme_default_init+0xbfc>
    lv_style_set_pad_gap(&styles->menu_cont, PAD_SMALL);
 800e34e:	2b02      	cmp	r3, #2
 800e350:	68e8      	ldr	r0, [r5, #12]
 800e352:	bf0c      	ite	eq
 800e354:	210c      	moveq	r1, #12
 800e356:	210a      	movne	r1, #10
 800e358:	f7ff bba6 	b.w	800daa8 <lv_theme_default_init+0xc20>
    lv_style_set_pad_hor(&styles->menu_header_cont, PAD_SMALL);
 800e35c:	2b02      	cmp	r3, #2
 800e35e:	68e8      	ldr	r0, [r5, #12]
 800e360:	bf0c      	ite	eq
 800e362:	210c      	moveq	r1, #12
 800e364:	210a      	movne	r1, #10
 800e366:	e40f      	b.n	800db88 <lv_theme_default_init+0xd00>
    lv_style_set_pad_ver(&styles->menu_header_cont, PAD_TINY);
 800e368:	2b02      	cmp	r3, #2
 800e36a:	68e8      	ldr	r0, [r5, #12]
 800e36c:	bf0c      	ite	eq
 800e36e:	2106      	moveq	r1, #6
 800e370:	2102      	movne	r1, #2
 800e372:	e418      	b.n	800dba6 <lv_theme_default_init+0xd1e>
    lv_style_set_pad_gap(&styles->menu_header_cont, PAD_SMALL);
 800e374:	2b02      	cmp	r3, #2
 800e376:	68e8      	ldr	r0, [r5, #12]
 800e378:	bf0c      	ite	eq
 800e37a:	210c      	moveq	r1, #12
 800e37c:	210a      	movne	r1, #10
 800e37e:	e421      	b.n	800dbc4 <lv_theme_default_init+0xd3c>
    lv_style_set_pad_hor(&styles->menu_header_btn, PAD_TINY);
 800e380:	2b02      	cmp	r3, #2
 800e382:	68e8      	ldr	r0, [r5, #12]
 800e384:	bf0c      	ite	eq
 800e386:	2106      	moveq	r1, #6
 800e388:	2102      	movne	r1, #2
 800e38a:	e430      	b.n	800dbee <lv_theme_default_init+0xd66>
    lv_style_set_pad_ver(&styles->menu_header_btn, PAD_TINY);
 800e38c:	2b02      	cmp	r3, #2
 800e38e:	68e8      	ldr	r0, [r5, #12]
 800e390:	bf0c      	ite	eq
 800e392:	2106      	moveq	r1, #6
 800e394:	2102      	movne	r1, #2
 800e396:	e43a      	b.n	800dc0e <lv_theme_default_init+0xd86>
    lv_style_set_pad_ver(&styles->menu_separator, PAD_TINY);
 800e398:	2b02      	cmp	r3, #2
 800e39a:	68e8      	ldr	r0, [r5, #12]
 800e39c:	bf0c      	ite	eq
 800e39e:	2106      	moveq	r1, #6
 800e3a0:	2102      	movne	r1, #2
 800e3a2:	e48a      	b.n	800dcba <lv_theme_default_init+0xe32>
                                                                                                   2) : lv_palette_lighten(LV_PALETTE_GREY, 1));
 800e3a4:	2101      	movs	r1, #1
 800e3a6:	2012      	movs	r0, #18
 800e3a8:	f004 f8f2 	bl	8012590 <lv_palette_lighten>
 800e3ac:	e539      	b.n	800de22 <lv_theme_default_init+0xf9a>
    lv_style_set_pad_all(&styles->calendar_btnm_bg, PAD_SMALL);
 800e3ae:	2b02      	cmp	r3, #2
 800e3b0:	68e8      	ldr	r0, [r5, #12]
 800e3b2:	bf0c      	ite	eq
 800e3b4:	210c      	moveq	r1, #12
 800e3b6:	210a      	movne	r1, #10
 800e3b8:	e545      	b.n	800de46 <lv_theme_default_init+0xfbe>
    lv_style_set_pad_gap(&styles->calendar_btnm_bg, PAD_SMALL / 2);
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	68e8      	ldr	r0, [r5, #12]
 800e3be:	bf0c      	ite	eq
 800e3c0:	210c      	moveq	r1, #12
 800e3c2:	210a      	movne	r1, #10
 800e3c4:	e54e      	b.n	800de64 <lv_theme_default_init+0xfdc>
    lv_style_set_pad_hor(&styles->calendar_header, PAD_SMALL);
 800e3c6:	2b02      	cmp	r3, #2
 800e3c8:	68e8      	ldr	r0, [r5, #12]
 800e3ca:	bf0c      	ite	eq
 800e3cc:	210c      	moveq	r1, #12
 800e3ce:	210a      	movne	r1, #10
 800e3d0:	e582      	b.n	800ded8 <lv_theme_default_init+0x1050>
    lv_style_set_pad_top(&styles->calendar_header, PAD_SMALL);
 800e3d2:	2b02      	cmp	r3, #2
 800e3d4:	68e8      	ldr	r0, [r5, #12]
 800e3d6:	bf0c      	ite	eq
 800e3d8:	210c      	moveq	r1, #12
 800e3da:	210a      	movne	r1, #10
 800e3dc:	e598      	b.n	800df10 <lv_theme_default_init+0x1088>
    lv_style_set_pad_bottom(&styles->calendar_header, PAD_TINY);
 800e3de:	2b02      	cmp	r3, #2
 800e3e0:	68e8      	ldr	r0, [r5, #12]
 800e3e2:	bf0c      	ite	eq
 800e3e4:	2106      	moveq	r1, #6
 800e3e6:	2102      	movne	r1, #2
 800e3e8:	e5a1      	b.n	800df2e <lv_theme_default_init+0x10a6>
    lv_style_set_pad_gap(&styles->calendar_header, PAD_SMALL);
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	68e8      	ldr	r0, [r5, #12]
 800e3ee:	bf0c      	ite	eq
 800e3f0:	210c      	moveq	r1, #12
 800e3f2:	210a      	movne	r1, #10
 800e3f4:	e5aa      	b.n	800df4c <lv_theme_default_init+0x10c4>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	68e8      	ldr	r0, [r5, #12]
 800e3fa:	bf0c      	ite	eq
 800e3fc:	210c      	moveq	r1, #12
 800e3fe:	2108      	movne	r1, #8
 800e400:	f014 fdf1 	bl	8022fe6 <lv_disp_dpx.part.0>
 800e404:	e603      	b.n	800e00e <lv_theme_default_init+0x1186>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 800e406:	2b02      	cmp	r3, #2
 800e408:	68e8      	ldr	r0, [r5, #12]
 800e40a:	bf0c      	ite	eq
 800e40c:	2114      	moveq	r1, #20
 800e40e:	2110      	movne	r1, #16
 800e410:	e63d      	b.n	800e08e <lv_theme_default_init+0x1206>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 800e412:	2b02      	cmp	r3, #2
 800e414:	68e8      	ldr	r0, [r5, #12]
 800e416:	bf0c      	ite	eq
 800e418:	210c      	moveq	r1, #12
 800e41a:	210a      	movne	r1, #10
 800e41c:	e674      	b.n	800e108 <lv_theme_default_init+0x1280>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 800e41e:	2b02      	cmp	r3, #2
 800e420:	68e8      	ldr	r0, [r5, #12]
 800e422:	bf0c      	ite	eq
 800e424:	210c      	moveq	r1, #12
 800e426:	210a      	movne	r1, #10
 800e428:	e67d      	b.n	800e126 <lv_theme_default_init+0x129e>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 800e42a:	2b02      	cmp	r3, #2
 800e42c:	68e8      	ldr	r0, [r5, #12]
 800e42e:	bf0c      	ite	eq
 800e430:	2114      	moveq	r1, #20
 800e432:	2110      	movne	r1, #16
 800e434:	e68b      	b.n	800e14e <lv_theme_default_init+0x12c6>
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 800e436:	9803      	ldr	r0, [sp, #12]
 800e438:	f00c fea6 	bl	801b188 <lv_disp_get_theme>
 800e43c:	4285      	cmp	r5, r0
 800e43e:	f47f aed7 	bne.w	800e1f0 <lv_theme_default_init+0x1368>
 800e442:	e6d2      	b.n	800e1ea <lv_theme_default_init+0x1362>
 800e444:	24010e30 	.word	0x24010e30
 800e448:	240011ac 	.word	0x240011ac

0800e44c <lv_theme_default_get>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 800e44c:	4b03      	ldr	r3, [pc, #12]	; (800e45c <lv_theme_default_get+0x10>)
}
 800e44e:	4804      	ldr	r0, [pc, #16]	; (800e460 <lv_theme_default_get+0x14>)
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 800e450:	681b      	ldr	r3, [r3, #0]
    return (lv_theme_t *)&theme;
 800e452:	2b00      	cmp	r3, #0
}
 800e454:	bf08      	it	eq
 800e456:	4618      	moveq	r0, r3
 800e458:	4770      	bx	lr
 800e45a:	bf00      	nop
 800e45c:	24001208 	.word	0x24001208
 800e460:	240011ac 	.word	0x240011ac

0800e464 <lv_theme_default_is_inited>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 800e464:	4b02      	ldr	r3, [pc, #8]	; (800e470 <lv_theme_default_is_inited+0xc>)
 800e466:	6818      	ldr	r0, [r3, #0]
}
 800e468:	3800      	subs	r0, #0
 800e46a:	bf18      	it	ne
 800e46c:	2001      	movne	r0, #1
 800e46e:	4770      	bx	lr
 800e470:	24001208 	.word	0x24001208

0800e474 <lv_calendar_set_showed_date>:

    highlight_update(obj);
}

void lv_calendar_set_showed_date(lv_obj_t * obj, uint32_t year, uint32_t month)
{
 800e474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_calendar_t * calendar = (lv_calendar_t *)obj;

    calendar->showed_date.year   = year;
    calendar->showed_date.month  = month;
 800e478:	fa4f f882 	sxtb.w	r8, r2
    calendar->showed_date.day    = 1;
 800e47c:	2301      	movs	r3, #1

    uint32_t i;

    /*Remove the disabled state but revert it for day names*/
    lv_btnmatrix_clear_btn_ctrl_all(calendar->btnm, LV_BTNMATRIX_CTRL_DISABLED);
    for(i = 0; i < 7; i++) {
 800e47e:	2500      	movs	r5, #0
    calendar->showed_date.year   = year;
 800e480:	8581      	strh	r1, [r0, #44]	; 0x2c
    calendar->showed_date.month  = month;
 800e482:	f880 802e 	strb.w	r8, [r0, #46]	; 0x2e
{
 800e486:	4604      	mov	r4, r0
    calendar->showed_date.day    = 1;
 800e488:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
{
 800e48c:	460f      	mov	r7, r1
    lv_btnmatrix_clear_btn_ctrl_all(calendar->btnm, LV_BTNMATRIX_CTRL_DISABLED);
 800e48e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e490:	2140      	movs	r1, #64	; 0x40
 800e492:	f017 ffcc 	bl	802642e <lv_btnmatrix_clear_btn_ctrl_all>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i, LV_BTNMATRIX_CTRL_DISABLED);
 800e496:	b2a9      	uxth	r1, r5
    for(i = 0; i < 7; i++) {
 800e498:	3501      	adds	r5, #1
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i, LV_BTNMATRIX_CTRL_DISABLED);
 800e49a:	2240      	movs	r2, #64	; 0x40
 800e49c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e49e:	f017 ffd5 	bl	802644c <lv_btnmatrix_set_btn_ctrl>
    for(i = 0; i < 7; i++) {
 800e4a2:	2d07      	cmp	r5, #7
 800e4a4:	d1f7      	bne.n	800e496 <lv_calendar_set_showed_date+0x22>
    }

    uint8_t act_mo_len = get_month_length(d.year, d.month);
 800e4a6:	b2bf      	uxth	r7, r7
 800e4a8:	4641      	mov	r1, r8
    uint8_t day_first = get_day_of_week(d.year, d.month, 1);
    uint8_t c;
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800e4aa:	f504 7a88 	add.w	sl, r4, #272	; 0x110
 800e4ae:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 800e5ac <lv_calendar_set_showed_date+0x138>
    uint8_t act_mo_len = get_month_length(d.year, d.month);
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	f014 fdac 	bl	8023010 <get_month_length>
 800e4b8:	4605      	mov	r5, r0
    uint8_t day_first = get_day_of_week(d.year, d.month, 1);
 800e4ba:	4641      	mov	r1, r8
 800e4bc:	4638      	mov	r0, r7
 800e4be:	f014 fe2e 	bl	802311e <get_day_of_week.constprop.0>
 800e4c2:	4606      	mov	r6, r0
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
 800e4c4:	1c41      	adds	r1, r0, #1
 800e4c6:	4405      	add	r5, r0
 800e4c8:	1b8b      	subs	r3, r1, r6
 800e4ca:	f101 0901 	add.w	r9, r1, #1
 800e4ce:	3901      	subs	r1, #1
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	428d      	cmp	r5, r1
 800e4d4:	d836      	bhi.n	800e544 <lv_calendar_set_showed_date+0xd0>
    }

    uint8_t prev_mo_len = get_month_length(d.year, d.month - 1);
 800e4d6:	f108 31ff 	add.w	r1, r8, #4294967295
 800e4da:	4638      	mov	r0, r7
 800e4dc:	f014 fd98 	bl	8023010 <get_month_length>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 800e4e0:	f1c6 0301 	rsb	r3, r6, #1
 800e4e4:	f504 798c 	add.w	r9, r4, #280	; 0x118
 800e4e8:	2700      	movs	r7, #0
 800e4ea:	eb00 0803 	add.w	r8, r0, r3
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800e4ee:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800e5ac <lv_calendar_set_showed_date+0x138>
 800e4f2:	46ca      	mov	sl, r9
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 800e4f4:	fa5f f888 	uxtb.w	r8, r8
 800e4f8:	eb08 0307 	add.w	r3, r8, r7
 800e4fc:	42b7      	cmp	r7, r6
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	d328      	bcc.n	800e554 <lv_calendar_set_showed_date+0xe0>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
    }

    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800e502:	f1c5 0701 	rsb	r7, r5, #1
 800e506:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800e5ac <lv_calendar_set_showed_date+0x138>
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 800e50a:	2d29      	cmp	r5, #41	; 0x29
 800e50c:	d931      	bls.n	800e572 <lv_calendar_set_showed_date+0xfe>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
    }

    highlight_update(obj);
 800e50e:	4620      	mov	r0, r4
 800e510:	f014 fe2d 	bl	802316e <highlight_update>

    /*Reset the focused button if the days changes*/
    if(lv_btnmatrix_get_selected_btn(calendar->btnm) != LV_BTNMATRIX_BTN_NONE) {
 800e514:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e516:	f017 ffcb 	bl	80264b0 <lv_btnmatrix_get_selected_btn>
 800e51a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e51e:	4298      	cmp	r0, r3
 800e520:	d004      	beq.n	800e52c <lv_calendar_set_showed_date+0xb8>
        lv_btnmatrix_set_selected_btn(calendar->btnm, day_first + 7);
 800e522:	1df1      	adds	r1, r6, #7
 800e524:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e526:	b289      	uxth	r1, r1
 800e528:	f017 ff54 	bl	80263d4 <lv_btnmatrix_set_selected_btn>
    }

    lv_obj_invalidate(obj);
 800e52c:	4620      	mov	r0, r4

    /* The children of the calendar are probably headers.
     * Notify them to let the headers updated to the new date*/
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
    for(i = 0; i < child_cnt; i++) {
 800e52e:	2500      	movs	r5, #0
    lv_obj_invalidate(obj);
 800e530:	f00e fb80 	bl	801cc34 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800e534:	4620      	mov	r0, r4
 800e536:	f00f fe39 	bl	801e1ac <lv_obj_get_child_cnt>
 800e53a:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 800e53c:	42b5      	cmp	r5, r6
 800e53e:	d127      	bne.n	800e590 <lv_calendar_set_showed_date+0x11c>
        lv_obj_t * child = lv_obj_get_child(obj, i);
        if(child == calendar->btnm) continue;
        lv_event_send(child, LV_EVENT_VALUE_CHANGED, obj);
    }
}
 800e540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800e544:	2104      	movs	r1, #4
 800e546:	465a      	mov	r2, fp
 800e548:	eb0a 0089 	add.w	r0, sl, r9, lsl #2
 800e54c:	f7f4 fbac 	bl	8002ca8 <snprintf>
 800e550:	4649      	mov	r1, r9
 800e552:	e7b9      	b.n	800e4c8 <lv_calendar_set_showed_date+0x54>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800e554:	465a      	mov	r2, fp
 800e556:	2104      	movs	r1, #4
 800e558:	4648      	mov	r0, r9
 800e55a:	f109 0904 	add.w	r9, r9, #4
 800e55e:	f7f4 fba3 	bl	8002ca8 <snprintf>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 800e562:	1df9      	adds	r1, r7, #7
 800e564:	2240      	movs	r2, #64	; 0x40
 800e566:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e568:	b289      	uxth	r1, r1
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 800e56a:	3701      	adds	r7, #1
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 800e56c:	f017 ff6e 	bl	802644c <lv_btnmatrix_set_btn_ctrl>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 800e570:	e7c2      	b.n	800e4f8 <lv_calendar_set_showed_date+0x84>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800e572:	197b      	adds	r3, r7, r5
 800e574:	4642      	mov	r2, r8
 800e576:	2104      	movs	r1, #4
 800e578:	eb0a 0085 	add.w	r0, sl, r5, lsl #2
 800e57c:	f7f4 fb94 	bl	8002ca8 <snprintf>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 800e580:	1de9      	adds	r1, r5, #7
 800e582:	2240      	movs	r2, #64	; 0x40
 800e584:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e586:	b289      	uxth	r1, r1
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 800e588:	3501      	adds	r5, #1
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 800e58a:	f017 ff5f 	bl	802644c <lv_btnmatrix_set_btn_ctrl>
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 800e58e:	e7bc      	b.n	800e50a <lv_calendar_set_showed_date+0x96>
        lv_obj_t * child = lv_obj_get_child(obj, i);
 800e590:	4629      	mov	r1, r5
 800e592:	4620      	mov	r0, r4
 800e594:	f00f fdfb 	bl	801e18e <lv_obj_get_child>
        if(child == calendar->btnm) continue;
 800e598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e59a:	4283      	cmp	r3, r0
 800e59c:	d003      	beq.n	800e5a6 <lv_calendar_set_showed_date+0x132>
        lv_event_send(child, LV_EVENT_VALUE_CHANGED, obj);
 800e59e:	4622      	mov	r2, r4
 800e5a0:	211c      	movs	r1, #28
 800e5a2:	f7f6 f89b 	bl	80046dc <lv_event_send>
    for(i = 0; i < child_cnt; i++) {
 800e5a6:	3501      	adds	r5, #1
 800e5a8:	e7c8      	b.n	800e53c <lv_calendar_set_showed_date+0xc8>
 800e5aa:	bf00      	nop
 800e5ac:	0802e035 	.word	0x0802e035

0800e5b0 <lv_calendar_constructor>:
/**********************
 *  STATIC FUNCTIONS
 **********************/

static void lv_calendar_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 800e5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    calendar->showed_date.year  = 2020;
    calendar->showed_date.month = 1;
    calendar->showed_date.day   = 1;

    calendar->highlighted_dates      = NULL;
 800e5b2:	2500      	movs	r5, #0
{
 800e5b4:	460c      	mov	r4, r1
    calendar->today.year  = 2020;
 800e5b6:	4b32      	ldr	r3, [pc, #200]	; (800e680 <lv_calendar_constructor+0xd0>)
 800e5b8:	22a8      	movs	r2, #168	; 0xa8
    calendar->highlighted_dates      = NULL;
 800e5ba:	630d      	str	r5, [r1, #48]	; 0x30
 800e5bc:	f504 708c 	add.w	r0, r4, #280	; 0x118
    calendar->highlighted_dates_num  = 0;
 800e5c0:	868d      	strh	r5, [r1, #52]	; 0x34
        }
        else if(i < 7) {
            calendar->map[i] = day_names_def[i];
        }
        else {
            calendar->nums[j][0] = 'x';
 800e5c2:	2778      	movs	r7, #120	; 0x78
 800e5c4:	4e2f      	ldr	r6, [pc, #188]	; (800e684 <lv_calendar_constructor+0xd4>)
    calendar->showed_date.year  = 2020;
 800e5c6:	e9c1 330a 	strd	r3, r3, [r1, #40]	; 0x28
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	f00c f8a8 	bl	801a720 <memset>
 800e5d0:	4629      	mov	r1, r5
    uint8_t j = 0;
 800e5d2:	462a      	mov	r2, r5
 800e5d4:	f104 0334 	add.w	r3, r4, #52	; 0x34
            calendar->map[i] = day_names_def[i];
 800e5d8:	4d2b      	ldr	r5, [pc, #172]	; (800e688 <lv_calendar_constructor+0xd8>)
 800e5da:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 800e68c <lv_calendar_constructor+0xdc>
        if(i != 0 && (i + 1) % 8 == 0) {
 800e5de:	3304      	adds	r3, #4
 800e5e0:	b151      	cbz	r1, 800e5f8 <lv_calendar_constructor+0x48>
 800e5e2:	1c48      	adds	r0, r1, #1
 800e5e4:	f010 0f07 	tst.w	r0, #7
 800e5e8:	d047      	beq.n	800e67a <lv_calendar_constructor+0xca>
        else if(i < 7) {
 800e5ea:	2906      	cmp	r1, #6
 800e5ec:	d807      	bhi.n	800e5fe <lv_calendar_constructor+0x4e>
            calendar->map[i] = day_names_def[i];
 800e5ee:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800e5f2:	6019      	str	r1, [r3, #0]
{
 800e5f4:	4601      	mov	r1, r0
 800e5f6:	e7f2      	b.n	800e5de <lv_calendar_constructor+0x2e>
    for(i = 0; i < 8 * 7; i++) {
 800e5f8:	2001      	movs	r0, #1
            calendar->map[i] = day_names_def[i];
 800e5fa:	601d      	str	r5, [r3, #0]
    for(i = 0; i < 8 * 7; i++) {
 800e5fc:	e7fa      	b.n	800e5f4 <lv_calendar_constructor+0x44>
            calendar->nums[j][0] = 'x';
 800e5fe:	f102 0146 	add.w	r1, r2, #70	; 0x46
            calendar->map[i] = calendar->nums[j];
            j++;
 800e602:	3201      	adds	r2, #1
            calendar->nums[j][0] = 'x';
 800e604:	f804 7021 	strb.w	r7, [r4, r1, lsl #2]
            j++;
 800e608:	b2d2      	uxtb	r2, r2
            calendar->map[i] = calendar->nums[j];
 800e60a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for(i = 0; i < 8 * 7; i++) {
 800e60e:	2838      	cmp	r0, #56	; 0x38
            calendar->map[i] = day_names_def[i];
 800e610:	6019      	str	r1, [r3, #0]
    for(i = 0; i < 8 * 7; i++) {
 800e612:	d1ef      	bne.n	800e5f4 <lv_calendar_constructor+0x44>
        }
    }
    calendar->map[8 * 7 - 1] = "";
 800e614:	4b1e      	ldr	r3, [pc, #120]	; (800e690 <lv_calendar_constructor+0xe0>)

    calendar->btnm = lv_btnmatrix_create(obj);
 800e616:	4620      	mov	r0, r4
    calendar->map[8 * 7 - 1] = "";
 800e618:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    calendar->btnm = lv_btnmatrix_create(obj);
 800e61c:	f005 fe48 	bl	80142b0 <lv_btnmatrix_create>
    lv_btnmatrix_set_map(calendar->btnm, calendar->map);
 800e620:	f104 0138 	add.w	r1, r4, #56	; 0x38
    calendar->btnm = lv_btnmatrix_create(obj);
 800e624:	6260      	str	r0, [r4, #36]	; 0x24
    lv_btnmatrix_set_map(calendar->btnm, calendar->map);
 800e626:	f017 fec4 	bl	80263b2 <lv_btnmatrix_set_map>
    lv_btnmatrix_set_btn_ctrl_all(calendar->btnm, LV_BTNMATRIX_CTRL_CLICK_TRIG | LV_BTNMATRIX_CTRL_NO_REPEAT);
 800e62a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e62c:	f44f 7108 	mov.w	r1, #544	; 0x220
 800e630:	f017 ff2f 	bl	8026492 <lv_btnmatrix_set_btn_ctrl_all>
    lv_obj_add_event_cb(calendar->btnm, draw_part_begin_event_cb, LV_EVENT_DRAW_PART_BEGIN, NULL);
 800e634:	2300      	movs	r3, #0
 800e636:	221a      	movs	r2, #26
 800e638:	4916      	ldr	r1, [pc, #88]	; (800e694 <lv_calendar_constructor+0xe4>)
 800e63a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e63c:	f00c fde5 	bl	801b20a <lv_obj_add_event_cb>
    lv_obj_set_width(calendar->btnm, lv_pct(100));
 800e640:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e642:	f242 0164 	movw	r1, #8292	; 0x2064
 800e646:	f00e f83b 	bl	801c6c0 <lv_obj_set_width>

    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 800e64a:	4620      	mov	r0, r4
 800e64c:	2101      	movs	r1, #1
 800e64e:	f7fc ff89 	bl	800b564 <lv_obj_set_flex_flow>
    lv_obj_set_flex_grow(calendar->btnm, 1);
 800e652:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e654:	2101      	movs	r1, #1
 800e656:	f014 fc43 	bl	8022ee0 <lv_obj_set_flex_grow>

    lv_calendar_set_showed_date(obj, calendar->showed_date.year, calendar->showed_date.month);
 800e65a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800e65c:	f994 202e 	ldrsb.w	r2, [r4, #46]	; 0x2e
 800e660:	4620      	mov	r0, r4
 800e662:	f7ff ff07 	bl	800e474 <lv_calendar_set_showed_date>
    highlight_update(obj);
 800e666:	4620      	mov	r0, r4
 800e668:	f014 fd81 	bl	802316e <highlight_update>
    lv_calendar_set_today_date(obj, calendar->today.year, calendar->today.month, calendar->today.day);

    lv_obj_add_flag(calendar->btnm, LV_OBJ_FLAG_EVENT_BUBBLE);
 800e66c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e66e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 800e672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_add_flag(calendar->btnm, LV_OBJ_FLAG_EVENT_BUBBLE);
 800e676:	f00d b944 	b.w	801b902 <lv_obj_add_flag>
 800e67a:	4631      	mov	r1, r6
 800e67c:	e7c7      	b.n	800e60e <lv_calendar_constructor+0x5e>
 800e67e:	bf00      	nop
 800e680:	010107e4 	.word	0x010107e4
 800e684:	0802a015 	.word	0x0802a015
 800e688:	0802ab5c 	.word	0x0802ab5c
 800e68c:	08028de0 	.word	0x08028de0
 800e690:	0802a016 	.word	0x0802a016
 800e694:	08023073 	.word	0x08023073

0800e698 <my_constructor>:
/**********************
 *  STATIC FUNCTIONS
 **********************/

static void my_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 800e698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e69a:	460c      	mov	r4, r1
    LV_TRACE_OBJ_CREATE("begin");

    LV_UNUSED(class_p);

    lv_obj_move_to_index(obj, 0);
 800e69c:	2100      	movs	r1, #0
    lv_obj_set_height(mo_prev, lv_pct(100));
    lv_obj_update_layout(mo_prev);
    lv_coord_t btn_size = lv_obj_get_height(mo_prev);
    lv_obj_set_width(mo_prev, btn_size);

    lv_obj_add_event_cb(mo_prev, month_event_cb, LV_EVENT_CLICKED, NULL);
 800e69e:	4f32      	ldr	r7, [pc, #200]	; (800e768 <my_constructor+0xd0>)
    lv_obj_move_to_index(obj, 0);
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f00f fec8 	bl	801e436 <lv_obj_move_to_index>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	2100      	movs	r1, #0
 800e6aa:	f7fc ff5b 	bl	800b564 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_START);
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	2202      	movs	r2, #2
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	f7fc ff7d 	bl	800b5b4 <lv_obj_set_flex_align>
    lv_obj_t * mo_prev = lv_btn_create(obj);
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f005 fad4 	bl	8013c68 <lv_btn_create>
 800e6c0:	4605      	mov	r5, r0
    lv_obj_set_style_bg_img_src(mo_prev, LV_SYMBOL_LEFT, 0);
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	4929      	ldr	r1, [pc, #164]	; (800e76c <my_constructor+0xd4>)
 800e6c6:	f00f fd43 	bl	801e150 <lv_obj_set_style_bg_img_src>
    lv_obj_set_height(mo_prev, lv_pct(100));
 800e6ca:	f242 0164 	movw	r1, #8292	; 0x2064
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	f00e f80d 	bl	801c6ee <lv_obj_set_height>
    lv_obj_update_layout(mo_prev);
 800e6d4:	4628      	mov	r0, r5
 800e6d6:	f7f7 f843 	bl	8005760 <lv_obj_update_layout>
    lv_coord_t btn_size = lv_obj_get_height(mo_prev);
 800e6da:	4628      	mov	r0, r5
 800e6dc:	f00e f8b0 	bl	801c840 <lv_obj_get_height>
 800e6e0:	4606      	mov	r6, r0
    lv_obj_set_width(mo_prev, btn_size);
 800e6e2:	4601      	mov	r1, r0
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	f00d ffeb 	bl	801c6c0 <lv_obj_set_width>
    lv_obj_add_event_cb(mo_prev, month_event_cb, LV_EVENT_CLICKED, NULL);
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	2207      	movs	r2, #7
 800e6ee:	4639      	mov	r1, r7
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	f00c fd8a 	bl	801b20a <lv_obj_add_event_cb>
    lv_obj_clear_flag(mo_prev, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 800e6f6:	2104      	movs	r1, #4
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	f00d f938 	bl	801b96e <lv_obj_clear_flag>

    lv_obj_t * label = lv_label_create(obj);
 800e6fe:	4620      	mov	r0, r4
 800e700:	f007 fd74 	bl	80161ec <lv_label_create>
 800e704:	4605      	mov	r5, r0
    lv_label_set_long_mode(label, LV_LABEL_LONG_SCROLL_CIRCULAR);
 800e706:	2103      	movs	r1, #3
 800e708:	f007 fd7c 	bl	8016204 <lv_label_set_long_mode>
    lv_obj_set_style_text_align(label, LV_TEXT_ALIGN_CENTER, 0);
 800e70c:	2200      	movs	r2, #0
 800e70e:	4628      	mov	r0, r5
 800e710:	2102      	movs	r1, #2
 800e712:	f00f fd22 	bl	801e15a <lv_obj_set_style_text_align>
    lv_obj_set_flex_grow(label, 1);
 800e716:	2101      	movs	r1, #1
 800e718:	4628      	mov	r0, r5
 800e71a:	f014 fbe1 	bl	8022ee0 <lv_obj_set_flex_grow>

    lv_obj_t * mo_next = lv_btn_create(obj);
 800e71e:	4620      	mov	r0, r4
 800e720:	f005 faa2 	bl	8013c68 <lv_btn_create>
 800e724:	4605      	mov	r5, r0
    lv_obj_set_style_bg_img_src(mo_next, LV_SYMBOL_RIGHT, 0);
 800e726:	2200      	movs	r2, #0
 800e728:	4911      	ldr	r1, [pc, #68]	; (800e770 <my_constructor+0xd8>)
 800e72a:	f00f fd11 	bl	801e150 <lv_obj_set_style_bg_img_src>
    lv_obj_set_size(mo_next, btn_size, btn_size);
 800e72e:	4632      	mov	r2, r6
 800e730:	4631      	mov	r1, r6
 800e732:	4628      	mov	r0, r5
 800e734:	f00d fff2 	bl	801c71c <lv_obj_set_size>

    lv_obj_add_event_cb(mo_next, month_event_cb, LV_EVENT_CLICKED, NULL);
 800e738:	2300      	movs	r3, #0
 800e73a:	2207      	movs	r2, #7
 800e73c:	4639      	mov	r1, r7
 800e73e:	4628      	mov	r0, r5
 800e740:	f00c fd63 	bl	801b20a <lv_obj_add_event_cb>
    lv_obj_clear_flag(mo_next, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 800e744:	4628      	mov	r0, r5
 800e746:	2104      	movs	r1, #4
 800e748:	f00d f911 	bl	801b96e <lv_obj_clear_flag>

    lv_obj_add_event_cb(obj, value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 800e74c:	2300      	movs	r3, #0
 800e74e:	221c      	movs	r2, #28
 800e750:	4908      	ldr	r1, [pc, #32]	; (800e774 <my_constructor+0xdc>)
 800e752:	4620      	mov	r0, r4
 800e754:	f00c fd59 	bl	801b20a <lv_obj_add_event_cb>
    /*Refresh the drop downs*/
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800e758:	4620      	mov	r0, r4
 800e75a:	2200      	movs	r2, #0
 800e75c:	211c      	movs	r1, #28
}
 800e75e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800e762:	f7f5 bfbb 	b.w	80046dc <lv_event_send>
 800e766:	bf00      	nop
 800e768:	0800e7b5 	.word	0x0800e7b5
 800e76c:	0802ab71 	.word	0x0802ab71
 800e770:	0802ab75 	.word	0x0802ab75
 800e774:	0800e779 	.word	0x0800e779

0800e778 <value_changed_event_cb>:
    lv_obj_t * label = lv_obj_get_child(header, 1);
    lv_label_set_text_fmt(label, "%d %s", newd.year, month_names_def[newd.month - 1]);
}

static void value_changed_event_cb(lv_event_t * e)
{
 800e778:	b570      	push	{r4, r5, r6, lr}
    lv_obj_t * header = lv_event_get_target(e);
 800e77a:	f00c fd3a 	bl	801b1f2 <lv_event_get_target>
 800e77e:	4605      	mov	r5, r0
    lv_obj_t * calendar = lv_obj_get_parent(header);
 800e780:	f00f fd02 	bl	801e188 <lv_obj_get_parent>

    const lv_calendar_date_t * cur_date = lv_calendar_get_showed_date(calendar);
 800e784:	f014 fd36 	bl	80231f4 <lv_calendar_get_showed_date>
 800e788:	4604      	mov	r4, r0
    lv_obj_t * label = lv_obj_get_child(header, 1);
 800e78a:	2101      	movs	r1, #1
 800e78c:	4628      	mov	r0, r5
 800e78e:	f00f fcfe 	bl	801e18e <lv_obj_get_child>
    lv_label_set_text_fmt(label, "%d %s", cur_date->year, month_names_def[cur_date->month - 1]);
 800e792:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800e796:	4a05      	ldr	r2, [pc, #20]	; (800e7ac <value_changed_event_cb+0x34>)
 800e798:	3b01      	subs	r3, #1
 800e79a:	4905      	ldr	r1, [pc, #20]	; (800e7b0 <value_changed_event_cb+0x38>)
 800e79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7a0:	8822      	ldrh	r2, [r4, #0]
}
 800e7a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_set_text_fmt(label, "%d %s", cur_date->year, month_names_def[cur_date->month - 1]);
 800e7a6:	f018 bba4 	b.w	8026ef2 <lv_label_set_text_fmt>
 800e7aa:	bf00      	nop
 800e7ac:	08028e18 	.word	0x08028e18
 800e7b0:	0802ab79 	.word	0x0802ab79

0800e7b4 <month_event_cb>:
{
 800e7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_t * btn = lv_event_get_target(e);
 800e7b8:	f00c fd1b 	bl	801b1f2 <lv_event_get_target>
 800e7bc:	4680      	mov	r8, r0
    lv_obj_t * header = lv_obj_get_parent(btn);
 800e7be:	f00f fce3 	bl	801e188 <lv_obj_get_parent>
 800e7c2:	4606      	mov	r6, r0
    lv_obj_t * calendar = lv_obj_get_parent(header);
 800e7c4:	f00f fce0 	bl	801e188 <lv_obj_get_parent>
 800e7c8:	4607      	mov	r7, r0
    d = lv_calendar_get_showed_date(calendar);
 800e7ca:	f014 fd13 	bl	80231f4 <lv_calendar_get_showed_date>
    if(lv_obj_get_child(header, 0) == btn) {
 800e7ce:	2100      	movs	r1, #0
    lv_calendar_date_t newd = *d;
 800e7d0:	8805      	ldrh	r5, [r0, #0]
 800e7d2:	f990 4002 	ldrsb.w	r4, [r0, #2]
    if(lv_obj_get_child(header, 0) == btn) {
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	f00f fcd9 	bl	801e18e <lv_obj_get_child>
 800e7dc:	4580      	cmp	r8, r0
 800e7de:	d11a      	bne.n	800e816 <month_event_cb+0x62>
        if(newd.month == 1) {
 800e7e0:	2c01      	cmp	r4, #1
 800e7e2:	d115      	bne.n	800e810 <month_event_cb+0x5c>
            newd.year --;
 800e7e4:	3d01      	subs	r5, #1
            newd.month = 12;
 800e7e6:	240c      	movs	r4, #12
            newd.year --;
 800e7e8:	b2ad      	uxth	r5, r5
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 800e7ea:	4622      	mov	r2, r4
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	4638      	mov	r0, r7
    lv_label_set_text_fmt(label, "%d %s", newd.year, month_names_def[newd.month - 1]);
 800e7f0:	3c01      	subs	r4, #1
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 800e7f2:	f7ff fe3f 	bl	800e474 <lv_calendar_set_showed_date>
    lv_obj_t * label = lv_obj_get_child(header, 1);
 800e7f6:	2101      	movs	r1, #1
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	f00f fcc8 	bl	801e18e <lv_obj_get_child>
    lv_label_set_text_fmt(label, "%d %s", newd.year, month_names_def[newd.month - 1]);
 800e7fe:	4b0a      	ldr	r3, [pc, #40]	; (800e828 <month_event_cb+0x74>)
 800e800:	462a      	mov	r2, r5
 800e802:	490a      	ldr	r1, [pc, #40]	; (800e82c <month_event_cb+0x78>)
 800e804:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
}
 800e808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_label_set_text_fmt(label, "%d %s", newd.year, month_names_def[newd.month - 1]);
 800e80c:	f018 bb71 	b.w	8026ef2 <lv_label_set_text_fmt>
            newd.month --;
 800e810:	3c01      	subs	r4, #1
            newd.month ++;
 800e812:	b264      	sxtb	r4, r4
 800e814:	e7e9      	b.n	800e7ea <month_event_cb+0x36>
        if(newd.month == 12) {
 800e816:	2c0c      	cmp	r4, #12
 800e818:	d103      	bne.n	800e822 <month_event_cb+0x6e>
            newd.year ++;
 800e81a:	3501      	adds	r5, #1
            newd.month = 1;
 800e81c:	2401      	movs	r4, #1
            newd.year ++;
 800e81e:	b2ad      	uxth	r5, r5
 800e820:	e7e3      	b.n	800e7ea <month_event_cb+0x36>
            newd.month ++;
 800e822:	3401      	adds	r4, #1
 800e824:	e7f5      	b.n	800e812 <month_event_cb+0x5e>
 800e826:	bf00      	nop
 800e828:	08028e18 	.word	0x08028e18
 800e82c:	0802ab79 	.word	0x0802ab79

0800e830 <my_constructor>:
/**********************
 *  STATIC FUNCTIONS
 **********************/

static void my_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 800e830:	b570      	push	{r4, r5, r6, lr}
 800e832:	460c      	mov	r4, r1
    LV_TRACE_OBJ_CREATE("begin");

    LV_UNUSED(class_p);

    lv_obj_t * calendar = lv_obj_get_parent(obj);
 800e834:	4608      	mov	r0, r1
 800e836:	f00f fca7 	bl	801e188 <lv_obj_get_parent>
    lv_obj_move_to_index(obj, 0);
 800e83a:	2100      	movs	r1, #0
    lv_obj_t * calendar = lv_obj_get_parent(obj);
 800e83c:	4606      	mov	r6, r0
    lv_obj_move_to_index(obj, 0);
 800e83e:	4620      	mov	r0, r4
 800e840:	f00f fdf9 	bl	801e436 <lv_obj_move_to_index>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 800e844:	2100      	movs	r1, #0
 800e846:	4620      	mov	r0, r4
 800e848:	f7fc fe8c 	bl	800b564 <lv_obj_set_flex_flow>

    lv_obj_t * year_dd = lv_dropdown_create(obj);
 800e84c:	4620      	mov	r0, r4
 800e84e:	f006 f98b 	bl	8014b68 <lv_dropdown_create>
 800e852:	4605      	mov	r5, r0
    lv_dropdown_set_options(year_dd, year_list);
 800e854:	4915      	ldr	r1, [pc, #84]	; (800e8ac <my_constructor+0x7c>)
 800e856:	f017 ffb6 	bl	80267c6 <lv_dropdown_set_options>
    lv_obj_add_event_cb(year_dd, year_event_cb, LV_EVENT_VALUE_CHANGED, calendar);
 800e85a:	4633      	mov	r3, r6
 800e85c:	221c      	movs	r2, #28
 800e85e:	4914      	ldr	r1, [pc, #80]	; (800e8b0 <my_constructor+0x80>)
 800e860:	4628      	mov	r0, r5
 800e862:	f00c fcd2 	bl	801b20a <lv_obj_add_event_cb>
    lv_obj_set_flex_grow(year_dd, 1);
 800e866:	2101      	movs	r1, #1
 800e868:	4628      	mov	r0, r5
 800e86a:	f014 fb39 	bl	8022ee0 <lv_obj_set_flex_grow>

    lv_obj_t * month_dd = lv_dropdown_create(obj);
 800e86e:	4620      	mov	r0, r4
 800e870:	f006 f97a 	bl	8014b68 <lv_dropdown_create>
 800e874:	4605      	mov	r5, r0
    lv_dropdown_set_options(month_dd, month_list);
 800e876:	490f      	ldr	r1, [pc, #60]	; (800e8b4 <my_constructor+0x84>)
 800e878:	f017 ffa5 	bl	80267c6 <lv_dropdown_set_options>
    lv_obj_add_event_cb(month_dd, month_event_cb, LV_EVENT_VALUE_CHANGED, calendar);
 800e87c:	4633      	mov	r3, r6
 800e87e:	221c      	movs	r2, #28
 800e880:	490d      	ldr	r1, [pc, #52]	; (800e8b8 <my_constructor+0x88>)
 800e882:	4628      	mov	r0, r5
 800e884:	f00c fcc1 	bl	801b20a <lv_obj_add_event_cb>
    lv_obj_set_flex_grow(month_dd, 1);
 800e888:	4628      	mov	r0, r5
 800e88a:	2101      	movs	r1, #1
 800e88c:	f014 fb28 	bl	8022ee0 <lv_obj_set_flex_grow>

    lv_obj_add_event_cb(obj, value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 800e890:	221c      	movs	r2, #28
 800e892:	490a      	ldr	r1, [pc, #40]	; (800e8bc <my_constructor+0x8c>)
 800e894:	4620      	mov	r0, r4
 800e896:	2300      	movs	r3, #0
 800e898:	f00c fcb7 	bl	801b20a <lv_obj_add_event_cb>
    /*Refresh the drop downs*/
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800e89c:	4620      	mov	r0, r4
 800e89e:	2200      	movs	r2, #0
 800e8a0:	211c      	movs	r1, #28
}
 800e8a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800e8a6:	f7f5 bf19 	b.w	80046dc <lv_event_send>
 800e8aa:	bf00      	nop
 800e8ac:	0802abd5 	.word	0x0802abd5
 800e8b0:	08023269 	.word	0x08023269
 800e8b4:	0802ae3c 	.word	0x0802ae3c
 800e8b8:	08023239 	.word	0x08023239
 800e8bc:	080231f9 	.word	0x080231f9

0800e8c0 <lv_chart_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_chart_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 800e8c0:	b510      	push	{r4, lr}
 800e8c2:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_chart_t * chart = (lv_chart_t *)obj;

    _lv_ll_init(&chart->series_ll, sizeof(lv_chart_series_t));
 800e8c4:	2110      	movs	r1, #16
 800e8c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e8ca:	f016 f885 	bl	80249d8 <_lv_ll_init>
    _lv_ll_init(&chart->cursor_ll, sizeof(lv_chart_cursor_t));
 800e8ce:	2110      	movs	r1, #16
 800e8d0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800e8d4:	f016 f880 	bl	80249d8 <_lv_ll_init>

    chart->ymin[0] = 0;
    chart->xmin[0] = 0;
    chart->ymin[1] = 0;
    chart->xmin[1] = 0;
    chart->ymax[0] = 100;
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f04f 1364 	mov.w	r3, #6553700	; 0x640064
 800e8de:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    chart->xmax[0] = 100;
 800e8e2:	e9c4 231d 	strd	r2, r3, [r4, #116]	; 0x74
    chart->ymax[1] = 100;
    chart->xmax[1] = 100;

    chart->hdiv_cnt    = LV_CHART_HDIV_DEF;
    chart->vdiv_cnt    = LV_CHART_VDIV_DEF;
 800e8e6:	4b08      	ldr	r3, [pc, #32]	; (800e908 <lv_chart_constructor+0x48>)
 800e8e8:	4a08      	ldr	r2, [pc, #32]	; (800e90c <lv_chart_constructor+0x4c>)
 800e8ea:	e9c4 231f 	strd	r2, r3, [r4, #124]	; 0x7c
    chart->point_cnt   = LV_CHART_POINT_CNT_DEF;
    chart->pressed_point_id  = LV_CHART_POINT_NONE;
    chart->type        = LV_CHART_TYPE_LINE;
    chart->update_mode = LV_CHART_UPDATE_MODE_SHIFT;
    chart->zoom_x      = LV_IMG_ZOOM_NONE;
 800e8ee:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 800e8f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    chart->type        = LV_CHART_TYPE_LINE;
 800e8f6:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 800e8fa:	f023 030f 	bic.w	r3, r3, #15
 800e8fe:	f043 0301 	orr.w	r3, r3, #1
 800e902:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    chart->zoom_y      = LV_IMG_ZOOM_NONE;

    LV_TRACE_OBJ_CREATE("finished");
}
 800e906:	bd10      	pop	{r4, pc}
 800e908:	000a0005 	.word	0x000a0005
 800e90c:	00037fff 	.word	0x00037fff

0800e910 <draw_y_ticks>:

    draw_ctx->clip_area = clip_area_ori;
}

static void draw_y_ticks(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, lv_chart_axis_t axis)
{
 800e910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e914:	4689      	mov	r9, r1
 800e916:	b0b3      	sub	sp, #204	; 0xcc
    lv_chart_t * chart  = (lv_chart_t *)obj;

    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 800e918:	4611      	mov	r1, r2
{
 800e91a:	4604      	mov	r4, r0
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 800e91c:	f014 fe89 	bl	8023632 <get_tick_gsc>

    if(t->major_cnt <= 1) return;
 800e920:	8903      	ldrh	r3, [r0, #8]
{
 800e922:	4616      	mov	r6, r2
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 800e924:	4605      	mov	r5, r0
    if(t->major_cnt <= 1) return;
 800e926:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	f240 8131 	bls.w	800eb92 <draw_y_ticks+0x282>
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 800e930:	f990 3009 	ldrsb.w	r3, [r0, #9]
 800e934:	2b00      	cmp	r3, #0
 800e936:	db03      	blt.n	800e940 <draw_y_ticks+0x30>
 800e938:	6803      	ldr	r3, [r0, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f000 8129 	beq.w	800eb92 <draw_y_ticks+0x282>
    uint32_t i;

    lv_point_t p1;
    lv_point_t p2;

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800e940:	4620      	mov	r0, r4
 800e942:	f014 fcf2 	bl	802332a <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800e946:	2100      	movs	r1, #0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800e948:	4680      	mov	r8, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800e94a:	4620      	mov	r0, r4
 800e94c:	f014 fcb9 	bl	80232c2 <lv_obj_get_style_pad_top>
 800e950:	4607      	mov	r7, r0
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800e952:	4620      	mov	r0, r4
 800e954:	f00d ff90 	bl	801c878 <lv_obj_get_content_height>
 800e958:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800e95c:	4447      	add	r7, r8
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800e95e:	4343      	muls	r3, r0
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800e960:	4620      	mov	r0, r4
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800e962:	f343 230f 	sbfx	r3, r3, #8, #16
 800e966:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800e968:	8ae3      	ldrh	r3, [r4, #22]
 800e96a:	441f      	add	r7, r3
 800e96c:	f00e fb01 	bl	801cf72 <lv_obj_get_scroll_top>
 800e970:	b2bf      	uxth	r7, r7
 800e972:	1a3f      	subs	r7, r7, r0
 800e974:	b2bb      	uxth	r3, r7
 800e976:	9307      	str	r3, [sp, #28]

    lv_coord_t label_gap;
    lv_coord_t x_ofs;
    if(axis == LV_CHART_AXIS_PRIMARY_Y) {
 800e978:	2e00      	cmp	r6, #0
 800e97a:	f040 810d 	bne.w	800eb98 <draw_y_ticks+0x288>
        label_gap = lv_obj_get_style_pad_left(obj, LV_PART_TICKS);
 800e97e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800e982:	4620      	mov	r0, r4
 800e984:	f014 fc8b 	bl	802329e <lv_obj_get_style_pad_left>
        x_ofs = obj->coords.x1;
 800e988:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
    else {
        label_gap = lv_obj_get_style_pad_right(obj, LV_PART_TICKS);
        x_ofs = obj->coords.x2;
    }

    lv_coord_t major_len = t->major_len;
 800e98c:	f9b5 3000 	ldrsh.w	r3, [r5]
    lv_coord_t minor_len = t->minor_len;
 800e990:	f9b5 7002 	ldrsh.w	r7, [r5, #2]
        label_gap = lv_obj_get_style_pad_left(obj, LV_PART_TICKS);
 800e994:	9005      	str	r0, [sp, #20]
        major_len *= -1;
        minor_len *= -1;
    }

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 800e996:	f10d 0b44 	add.w	fp, sp, #68	; 0x44
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800e99a:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 800e99e:	9306      	str	r3, [sp, #24]
    lv_draw_line_dsc_init(&line_dsc);
 800e9a0:	4658      	mov	r0, fp
 800e9a2:	f00f ffd0 	bl	801e946 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 800e9a6:	465a      	mov	r2, fp
 800e9a8:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	f00d fc5b 	bl	801c268 <lv_obj_init_draw_line_dsc>
    lv_draw_label_dsc_init(&label_dsc);
 800e9b2:	4650      	mov	r0, sl
 800e9b4:	f7f9 f978 	bl	8007ca8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 800e9b8:	4652      	mov	r2, sl
 800e9ba:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f00d fbb5 	bl	801c12e <lv_obj_init_draw_label_dsc>

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800e9c4:	4649      	mov	r1, r9
 800e9c6:	a820      	add	r0, sp, #128	; 0x80
 800e9c8:	f00d fd58 	bl	801c47c <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 800e9cc:	4a85      	ldr	r2, [pc, #532]	; (800ebe4 <draw_y_ticks+0x2d4>)
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
    part_draw_dsc.id = axis;
 800e9ce:	962e      	str	r6, [sp, #184]	; 0xb8
    part_draw_dsc.class_p = MY_CLASS;
 800e9d0:	9221      	str	r2, [sp, #132]	; 0x84
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
 800e9d2:	2206      	movs	r2, #6
    part_draw_dsc.part = LV_PART_TICKS;
    part_draw_dsc.line_dsc = &line_dsc;
    part_draw_dsc.label_dsc = &label_dsc;
 800e9d4:	e9cd ab25 	strd	sl, fp, [sp, #148]	; 0x94
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
 800e9d8:	9222      	str	r2, [sp, #136]	; 0x88
    part_draw_dsc.part = LV_PART_TICKS;
 800e9da:	f44f 22c0 	mov.w	r2, #393216	; 0x60000

    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 800e9de:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    part_draw_dsc.part = LV_PART_TICKS;
 800e9e2:	922d      	str	r2, [sp, #180]	; 0xb4
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 800e9e4:	f3ca 0a0e 	ubfx	sl, sl, #0, #15
 800e9e8:	88ea      	ldrh	r2, [r5, #6]
 800e9ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9ee:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e9f2:	fb02 fa0a 	mul.w	sl, r2, sl
        /*first point of the tick*/
        p1.x = x_ofs;

        /*move extra pixel out of chart boundary*/
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
        else p1.x++;
 800e9f6:	fa1f f288 	uxth.w	r2, r8
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
 800e9fa:	f102 38ff 	add.w	r8, r2, #4294967295
        else p1.x++;
 800e9fe:	3201      	adds	r2, #1
 800ea00:	2e00      	cmp	r6, #0
 800ea02:	bf18      	it	ne
 800ea04:	4690      	movne	r8, r2
 800ea06:	fa0f f388 	sxth.w	r3, r8
        /*second point of the tick*/
        bool major = false;
        if(i % t->minor_cnt == 0) major = true;

        if(major) p2.x = p1.x - major_len; /*major tick*/
        else p2.x = p1.x - minor_len; /*minor tick*/
 800ea0a:	fa1f f888 	uxth.w	r8, r8
 800ea0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea10:	eba8 0707 	sub.w	r7, r8, r7
 800ea14:	b23b      	sxth	r3, r7
    for(i = 0; i <= total_tick_num; i++) {
 800ea16:	2700      	movs	r7, #0
        else p2.x = p1.x - minor_len; /*minor tick*/
 800ea18:	9309      	str	r3, [sp, #36]	; 0x24
        if(major) p2.x = p1.x - major_len; /*major tick*/
 800ea1a:	9b06      	ldr	r3, [sp, #24]
 800ea1c:	eba8 0803 	sub.w	r8, r8, r3
 800ea20:	fa0f f388 	sxth.w	r3, r8
        bool major = false;
 800ea24:	46b8      	mov	r8, r7
        if(major) p2.x = p1.x - major_len; /*major tick*/
 800ea26:	9308      	str	r3, [sp, #32]
 800ea28:	eb04 0346 	add.w	r3, r4, r6, lsl #1
 800ea2c:	9306      	str	r3, [sp, #24]
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 800ea2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea30:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	9a07      	ldr	r2, [sp, #28]
 800ea38:	437b      	muls	r3, r7
 800ea3a:	fbb3 f3fa 	udiv	r3, r3, sl
 800ea3e:	4413      	add	r3, r2
 800ea40:	b21b      	sxth	r3, r3
 800ea42:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 800ea46:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
 800ea4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea4c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        if(i % t->minor_cnt == 0) major = true;
 800ea50:	88eb      	ldrh	r3, [r5, #6]
 800ea52:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ea56:	fbb7 f2f3 	udiv	r2, r7, r3
 800ea5a:	fb03 7312 	mls	r3, r3, r2, r7
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	f000 80ab 	beq.w	800ebba <draw_y_ticks+0x2aa>
        else p2.x = p1.x - minor_len; /*minor tick*/
 800ea64:	9b09      	ldr	r3, [sp, #36]	; 0x24
        bool major = false;
 800ea66:	f04f 0b00 	mov.w	fp, #0
 800ea6a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

        part_draw_dsc.p1 = &p1;
 800ea6e:	ab0c      	add	r3, sp, #48	; 0x30
        part_draw_dsc.p2 = &p2;

        int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 800ea70:	4652      	mov	r2, sl
 800ea72:	2100      	movs	r1, #0
        part_draw_dsc.p1 = &p1;
 800ea74:	9329      	str	r3, [sp, #164]	; 0xa4
        part_draw_dsc.p2 = &p2;
 800ea76:	ab0d      	add	r3, sp, #52	; 0x34
        int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 800ea78:	ebaa 0007 	sub.w	r0, sl, r7
        part_draw_dsc.p2 = &p2;
 800ea7c:	932a      	str	r3, [sp, #168]	; 0xa8
        int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 800ea7e:	9b06      	ldr	r3, [sp, #24]
 800ea80:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800ea84:	9300      	str	r3, [sp, #0]
 800ea86:	9b06      	ldr	r3, [sp, #24]
 800ea88:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800ea8c:	f016 f8c6 	bl	8024c1c <lv_map>
 800ea90:	4603      	mov	r3, r0
        part_draw_dsc.value = tick_value;
 800ea92:	9030      	str	r0, [sp, #192]	; 0xc0

        /*add text only to major tick*/
        if(major && t->label_en)  {
 800ea94:	f1bb 0f00 	cmp.w	fp, #0
 800ea98:	f000 809a 	beq.w	800ebd0 <draw_y_ticks+0x2c0>
 800ea9c:	f995 2009 	ldrsb.w	r2, [r5, #9]
 800eaa0:	2a00      	cmp	r2, #0
 800eaa2:	f280 8095 	bge.w	800ebd0 <draw_y_ticks+0x2c0>
            char buf[LV_CHART_LABEL_MAX_TEXT_LENGTH];
            lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, tick_value);
 800eaa6:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800eaaa:	4a4f      	ldr	r2, [pc, #316]	; (800ebe8 <draw_y_ticks+0x2d8>)
 800eaac:	2110      	movs	r1, #16
 800eaae:	4658      	mov	r0, fp
 800eab0:	f7f4 f8fa 	bl	8002ca8 <snprintf>
            part_draw_dsc.label_dsc = &label_dsc;
 800eab4:	ab18      	add	r3, sp, #96	; 0x60
            part_draw_dsc.text = buf;
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800eab6:	aa20      	add	r2, sp, #128	; 0x80
 800eab8:	211a      	movs	r1, #26
            part_draw_dsc.label_dsc = &label_dsc;
 800eaba:	9325      	str	r3, [sp, #148]	; 0x94
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
 800eabc:	2310      	movs	r3, #16
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800eabe:	4620      	mov	r0, r4
            part_draw_dsc.text = buf;
 800eac0:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
 800eac4:	932c      	str	r3, [sp, #176]	; 0xb0
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800eac6:	f7f5 fe09 	bl	80046dc <lv_event_send>

            /*reserve appropriate area*/
            lv_point_t size;
            lv_txt_get_size(&size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800eaca:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800eace:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ead0:	992b      	ldr	r1, [sp, #172]	; 0xac
 800ead2:	a80e      	add	r0, sp, #56	; 0x38
 800ead4:	9301      	str	r3, [sp, #4]
 800ead6:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800eada:	f8cd 8008 	str.w	r8, [sp, #8]
 800eade:	9300      	str	r3, [sp, #0]
 800eae0:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 800eae4:	f016 fea8 	bl	8025838 <lv_txt_get_size>
                            LV_TEXT_FLAG_NONE);

            /*set the area at some distance of the major tick len left of the tick*/
            lv_area_t a;
            a.y1 = p2.y - size.y / 2;
 800eae8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800eaec:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 800eaf0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800eaf4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800eaf8:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
 800eafc:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800eb00:	1ad1      	subs	r1, r2, r3
            a.y2 = p2.y + size.y / 2;
 800eb02:	441a      	add	r2, r3

            if(!sec_axis) {
                a.x1 = p2.x - size.x - label_gap;
 800eb04:	f8bd 3014 	ldrh.w	r3, [sp, #20]
            a.y1 = p2.y - size.y / 2;
 800eb08:	b209      	sxth	r1, r1
            a.y2 = p2.y + size.y / 2;
 800eb0a:	b212      	sxth	r2, r2
            a.y1 = p2.y - size.y / 2;
 800eb0c:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
            a.y2 = p2.y + size.y / 2;
 800eb10:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
            if(!sec_axis) {
 800eb14:	2e00      	cmp	r6, #0
 800eb16:	d154      	bne.n	800ebc2 <draw_y_ticks+0x2b2>
                a.x1 = p2.x - size.x - label_gap;
 800eb18:	eba0 0c0c 	sub.w	ip, r0, ip
 800eb1c:	ebac 0c03 	sub.w	ip, ip, r3
                a.x2 = p2.x - label_gap;
 800eb20:	1ac3      	subs	r3, r0, r3
                a.x1 = p2.x - size.x - label_gap;
 800eb22:	f8ad c03c 	strh.w	ip, [sp, #60]	; 0x3c
            }
            else {
                a.x1 = p2.x + label_gap;
                a.x2 = p2.x + size.x + label_gap;
 800eb26:	b21b      	sxth	r3, r3
                a.x2 = p2.x - label_gap;
 800eb28:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            }

            if(a.y2 >= obj->coords.y1 &&
 800eb2c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 800eb30:	4293      	cmp	r3, r2
 800eb32:	dc0b      	bgt.n	800eb4c <draw_y_ticks+0x23c>
 800eb34:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 800eb38:	428b      	cmp	r3, r1
 800eb3a:	db07      	blt.n	800eb4c <draw_y_ticks+0x23c>
               a.y1  <= obj->coords.y2) {
                lv_draw_label(draw_ctx, &label_dsc, &a, part_draw_dsc.text, NULL);
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	aa0f      	add	r2, sp, #60	; 0x3c
 800eb40:	a918      	add	r1, sp, #96	; 0x60
 800eb42:	4648      	mov	r0, r9
 800eb44:	9300      	str	r3, [sp, #0]
 800eb46:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800eb48:	f7f9 f8c6 	bl	8007cd8 <lv_draw_label>
            part_draw_dsc.text = NULL;
            part_draw_dsc.text_length = 0;
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
        }

        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 800eb4c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 800eb50:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 800eb54:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800eb58:	1059      	asrs	r1, r3, #1
 800eb5a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800eb5e:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800eb62:	4293      	cmp	r3, r2
 800eb64:	db0c      	blt.n	800eb80 <draw_y_ticks+0x270>
           p2.y - line_dsc.width / 2  <= obj->coords.y2) {
 800eb66:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800eb6a:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 800eb6e:	1a5b      	subs	r3, r3, r1
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 800eb70:	4293      	cmp	r3, r2
 800eb72:	dc05      	bgt.n	800eb80 <draw_y_ticks+0x270>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800eb74:	ab0d      	add	r3, sp, #52	; 0x34
 800eb76:	aa0c      	add	r2, sp, #48	; 0x30
 800eb78:	a911      	add	r1, sp, #68	; 0x44
 800eb7a:	4648      	mov	r0, r9
 800eb7c:	f00f fef0 	bl	801e960 <lv_draw_line>
    for(i = 0; i <= total_tick_num; i++) {
 800eb80:	3701      	adds	r7, #1
        }

        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800eb82:	aa20      	add	r2, sp, #128	; 0x80
 800eb84:	211b      	movs	r1, #27
 800eb86:	4620      	mov	r0, r4
 800eb88:	f7f5 fda8 	bl	80046dc <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) {
 800eb8c:	45ba      	cmp	sl, r7
 800eb8e:	f4bf af4e 	bcs.w	800ea2e <draw_y_ticks+0x11e>
    }
}
 800eb92:	b033      	add	sp, #204	; 0xcc
 800eb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800eb98:	2213      	movs	r2, #19
 800eb9a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f00e ff6e 	bl	801da80 <lv_obj_get_style_prop>
        minor_len *= -1;
 800eba4:	886f      	ldrh	r7, [r5, #2]
    return (lv_coord_t)v.num;
 800eba6:	b203      	sxth	r3, r0
        x_ofs = obj->coords.x2;
 800eba8:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
        minor_len *= -1;
 800ebac:	427f      	negs	r7, r7
 800ebae:	9305      	str	r3, [sp, #20]
        major_len *= -1;
 800ebb0:	882b      	ldrh	r3, [r5, #0]
        minor_len *= -1;
 800ebb2:	b23f      	sxth	r7, r7
        major_len *= -1;
 800ebb4:	425b      	negs	r3, r3
 800ebb6:	b21b      	sxth	r3, r3
        minor_len *= -1;
 800ebb8:	e6ed      	b.n	800e996 <draw_y_ticks+0x86>
        if(major) p2.x = p1.x - major_len; /*major tick*/
 800ebba:	9b08      	ldr	r3, [sp, #32]
        if(i % t->minor_cnt == 0) major = true;
 800ebbc:	f04f 0b01 	mov.w	fp, #1
 800ebc0:	e753      	b.n	800ea6a <draw_y_ticks+0x15a>
                a.x1 = p2.x + label_gap;
 800ebc2:	eb00 0e03 	add.w	lr, r0, r3
                a.x2 = p2.x + size.x + label_gap;
 800ebc6:	4460      	add	r0, ip
                a.x1 = p2.x + label_gap;
 800ebc8:	f8ad e03c 	strh.w	lr, [sp, #60]	; 0x3c
                a.x2 = p2.x + size.x + label_gap;
 800ebcc:	4403      	add	r3, r0
 800ebce:	e7aa      	b.n	800eb26 <draw_y_ticks+0x216>
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ebd0:	aa20      	add	r2, sp, #128	; 0x80
 800ebd2:	211a      	movs	r1, #26
 800ebd4:	4620      	mov	r0, r4
            part_draw_dsc.label_dsc = NULL;
 800ebd6:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
            part_draw_dsc.text_length = 0;
 800ebda:	e9cd 882b 	strd	r8, r8, [sp, #172]	; 0xac
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ebde:	f7f5 fd7d 	bl	80046dc <lv_event_send>
 800ebe2:	e7b3      	b.n	800eb4c <draw_y_ticks+0x23c>
 800ebe4:	08028e80 	.word	0x08028e80
 800ebe8:	0802e035 	.word	0x0802e035

0800ebec <draw_x_ticks>:

static void draw_x_ticks(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, lv_chart_axis_t axis)
{
 800ebec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf0:	b0b1      	sub	sp, #196	; 0xc4
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	4692      	mov	sl, r2
 800ebf6:	9105      	str	r1, [sp, #20]
    lv_chart_t * chart  = (lv_chart_t *)obj;

    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 800ebf8:	4611      	mov	r1, r2
 800ebfa:	f014 fd1a 	bl	8023632 <get_tick_gsc>
    if(t->major_cnt <= 1) return;
 800ebfe:	8903      	ldrh	r3, [r0, #8]
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 800ec00:	4605      	mov	r5, r0
    if(t->major_cnt <= 1) return;
 800ec02:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d93d      	bls.n	800ec86 <draw_x_ticks+0x9a>
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 800ec0a:	f990 3009 	ldrsb.w	r3, [r0, #9]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	db01      	blt.n	800ec16 <draw_x_ticks+0x2a>
 800ec12:	6803      	ldr	r3, [r0, #0]
 800ec14:	b3bb      	cbz	r3, 800ec86 <draw_x_ticks+0x9a>

    uint32_t i;
    lv_point_t p1;
    lv_point_t p2;

    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800ec16:	2100      	movs	r1, #0
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f014 fb40 	bl	802329e <lv_obj_get_style_pad_left>
 800ec1e:	4606      	mov	r6, r0
 800ec20:	4620      	mov	r0, r4
 800ec22:	f014 fb82 	bl	802332a <lv_obj_get_style_border_width.constprop.0>
 800ec26:	9006      	str	r0, [sp, #24]
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f00d fe0f 	bl	801c84c <lv_obj_get_content_width>
 800ec2e:	4607      	mov	r7, r0

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800ec30:	a816      	add	r0, sp, #88	; 0x58
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800ec32:	f8b4 b084 	ldrh.w	fp, [r4, #132]	; 0x84
    lv_draw_label_dsc_init(&label_dsc);
 800ec36:	f7f9 f837 	bl	8007ca8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 800ec3a:	aa16      	add	r2, sp, #88	; 0x58
 800ec3c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800ec40:	4620      	mov	r0, r4
 800ec42:	f00d fa74 	bl	801c12e <lv_obj_init_draw_label_dsc>

    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800ec46:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	9308      	str	r3, [sp, #32]
 800ec4e:	f7f6 ffd5 	bl	8005bfc <lv_obj_get_scroll_left>
    lv_coord_t y_ofs;
    lv_coord_t label_gap;
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 800ec52:	f1ba 0f02 	cmp.w	sl, #2
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800ec56:	4680      	mov	r8, r0
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 800ec58:	f995 3009 	ldrsb.w	r3, [r5, #9]
 800ec5c:	d119      	bne.n	800ec92 <draw_x_ticks+0xa6>
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	da14      	bge.n	800ec8c <draw_x_ticks+0xa0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800ec62:	2211      	movs	r2, #17
 800ec64:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800ec68:	4620      	mov	r0, r4
 800ec6a:	f00e ff09 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800ec6e:	fa0f f980 	sxth.w	r9, r0
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
        y_ofs = obj->coords.y1 - 1;
    }

    if(axis == LV_CHART_AXIS_PRIMARY_X) {
        if(y_ofs > draw_ctx->clip_area->y2) return;
 800ec72:	9a05      	ldr	r2, [sp, #20]
        y_ofs = obj->coords.y2 + 1;
 800ec74:	8b63      	ldrh	r3, [r4, #26]
        if(y_ofs > draw_ctx->clip_area->y2) return;
 800ec76:	6891      	ldr	r1, [r2, #8]
        y_ofs = obj->coords.y2 + 1;
 800ec78:	3301      	adds	r3, #1
        if(y_ofs > draw_ctx->clip_area->y2) return;
 800ec7a:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
        y_ofs = obj->coords.y2 + 1;
 800ec7e:	b21b      	sxth	r3, r3
        if(y_ofs > draw_ctx->clip_area->y2) return;
 800ec80:	429a      	cmp	r2, r3
 800ec82:	f280 8116 	bge.w	800eeb2 <draw_x_ticks+0x2c6>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
        }

        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
    }
}
 800ec86:	b031      	add	sp, #196	; 0xc4
 800ec88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 800ec8c:	f04f 0900 	mov.w	r9, #0
 800ec90:	e7ef      	b.n	800ec72 <draw_x_ticks+0x86>
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	f280 810a 	bge.w	800eeac <draw_x_ticks+0x2c0>
 800ec98:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	f014 fb10 	bl	80232c2 <lv_obj_get_style_pad_top>
 800eca2:	4681      	mov	r9, r0
        y_ofs = obj->coords.y1 - 1;
 800eca4:	8ae3      	ldrh	r3, [r4, #22]
 800eca6:	3b01      	subs	r3, #1
 800eca8:	b21b      	sxth	r3, r3
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800ecaa:	fb0b f707 	mul.w	r7, fp, r7
 800ecae:	9309      	str	r3, [sp, #36]	; 0x24
 800ecb0:	123b      	asrs	r3, r7, #8
 800ecb2:	f347 2b0f 	sbfx	fp, r7, #8, #16
    lv_draw_line_dsc_init(&line_dsc);
 800ecb6:	af0f      	add	r7, sp, #60	; 0x3c
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800ecb8:	9307      	str	r3, [sp, #28]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800ecba:	9b06      	ldr	r3, [sp, #24]
    lv_draw_line_dsc_init(&line_dsc);
 800ecbc:	4638      	mov	r0, r7
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800ecbe:	441e      	add	r6, r3
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800ecc0:	9b08      	ldr	r3, [sp, #32]
 800ecc2:	441e      	add	r6, r3
    lv_draw_line_dsc_init(&line_dsc);
 800ecc4:	f00f fe3f 	bl	801e946 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 800ecc8:	463a      	mov	r2, r7
 800ecca:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800ecce:	eba6 0608 	sub.w	r6, r6, r8
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 800ecd2:	4620      	mov	r0, r4
    line_dsc.dash_width = 0;
 800ecd4:	f04f 0800 	mov.w	r8, #0
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 800ecd8:	f00d fac6 	bl	801c268 <lv_obj_init_draw_line_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800ecdc:	9905      	ldr	r1, [sp, #20]
 800ecde:	a81e      	add	r0, sp, #120	; 0x78
    line_dsc.dash_width = 0;
 800ece0:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800ece4:	f00d fbca 	bl	801c47c <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 800ece8:	4a98      	ldr	r2, [pc, #608]	; (800ef4c <draw_x_ticks+0x360>)
    part_draw_dsc.part = LV_PART_TICKS;
 800ecea:	2102      	movs	r1, #2
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800ecec:	b2b6      	uxth	r6, r6
    if(chart->type == LV_CHART_TYPE_BAR) {
 800ecee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    part_draw_dsc.class_p = MY_CLASS;
 800ecf0:	921f      	str	r2, [sp, #124]	; 0x7c
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
 800ecf2:	2206      	movs	r2, #6
 800ecf4:	9220      	str	r2, [sp, #128]	; 0x80
    part_draw_dsc.part = LV_PART_TICKS;
 800ecf6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800ecfa:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
    part_draw_dsc.label_dsc = &label_dsc;
 800ecfe:	aa16      	add	r2, sp, #88	; 0x58
    part_draw_dsc.line_dsc = &line_dsc;
 800ed00:	e9cd 2723 	strd	r2, r7, [sp, #140]	; 0x8c
    if(chart->type == LV_CHART_TYPE_BAR) {
 800ed04:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 800ed08:	f1ba 0702 	subs.w	r7, sl, #2
    if(chart->type == LV_CHART_TYPE_BAR) {
 800ed0c:	f002 0207 	and.w	r2, r2, #7
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 800ed10:	bf18      	it	ne
 800ed12:	2701      	movne	r7, #1
    if(chart->type == LV_CHART_TYPE_BAR) {
 800ed14:	2a02      	cmp	r2, #2
 800ed16:	f000 80db 	beq.w	800eed0 <draw_x_ticks+0x2e4>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800ed1a:	b232      	sxth	r2, r6
 800ed1c:	9206      	str	r2, [sp, #24]
    uint32_t total_tick_num = (t->major_cnt - 1) * t->minor_cnt;
 800ed1e:	892e      	ldrh	r6, [r5, #8]
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 800ed20:	f04f 0800 	mov.w	r8, #0
    p1.y = y_ofs;
 800ed24:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    uint32_t total_tick_num = (t->major_cnt - 1) * t->minor_cnt;
 800ed28:	f3c6 060e 	ubfx	r6, r6, #0, #15
 800ed2c:	88eb      	ldrh	r3, [r5, #6]
 800ed2e:	3e01      	subs	r6, #1
 800ed30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ed34:	435e      	muls	r6, r3
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 800ed36:	eb04 0347 	add.w	r3, r4, r7, lsl #1
 800ed3a:	9307      	str	r3, [sp, #28]
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 800ed3c:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 800ed40:	f1ba 0f02 	cmp.w	sl, #2
        if(i % t->minor_cnt == 0) major = true;
 800ed44:	88ef      	ldrh	r7, [r5, #6]
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 800ed46:	ebab 0202 	sub.w	r2, fp, r2
 800ed4a:	9906      	ldr	r1, [sp, #24]
        if(i % t->minor_cnt == 0) major = true;
 800ed4c:	f3c7 070e 	ubfx	r7, r7, #0, #15
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 800ed50:	fb08 f202 	mul.w	r2, r8, r2
 800ed54:	fbb2 f2f6 	udiv	r2, r2, r6
        if(i % t->minor_cnt == 0) major = true;
 800ed58:	fbb8 f3f7 	udiv	r3, r8, r7
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 800ed5c:	440a      	add	r2, r1
        if(i % t->minor_cnt == 0) major = true;
 800ed5e:	fb07 8713 	mls	r7, r7, r3, r8
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 800ed62:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 800ed66:	b212      	sxth	r2, r2
 800ed68:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800ed6c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 800ed70:	f000 80d0 	beq.w	800ef14 <draw_x_ticks+0x328>
 800ed74:	2f00      	cmp	r7, #0
 800ed76:	f040 80cb 	bne.w	800ef10 <draw_x_ticks+0x324>
 800ed7a:	882a      	ldrh	r2, [r5, #0]
 800ed7c:	1a89      	subs	r1, r1, r2
 800ed7e:	b20a      	sxth	r2, r1
 800ed80:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        part_draw_dsc.p1 = &p1;
 800ed84:	aa0a      	add	r2, sp, #40	; 0x28
 800ed86:	9227      	str	r2, [sp, #156]	; 0x9c
        part_draw_dsc.p2 = &p2;
 800ed88:	aa0b      	add	r2, sp, #44	; 0x2c
 800ed8a:	9228      	str	r2, [sp, #160]	; 0xa0
        if(chart->type == LV_CHART_TYPE_SCATTER) {
 800ed8c:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
 800ed90:	f002 0207 	and.w	r2, r2, #7
 800ed94:	2a03      	cmp	r2, #3
 800ed96:	d10c      	bne.n	800edb2 <draw_x_ticks+0x1c6>
            tick_value = lv_map(i, 0, total_tick_num, chart->xmin[sec_axis], chart->xmax[sec_axis]);
 800ed98:	9b07      	ldr	r3, [sp, #28]
 800ed9a:	4632      	mov	r2, r6
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	4640      	mov	r0, r8
 800eda0:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800eda4:	9300      	str	r3, [sp, #0]
 800eda6:	9b07      	ldr	r3, [sp, #28]
 800eda8:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800edac:	f015 ff36 	bl	8024c1c <lv_map>
 800edb0:	4603      	mov	r3, r0
        part_draw_dsc.value = tick_value;
 800edb2:	932e      	str	r3, [sp, #184]	; 0xb8
        if(major && t->label_en) {
 800edb4:	2f00      	cmp	r7, #0
 800edb6:	f040 80be 	bne.w	800ef36 <draw_x_ticks+0x34a>
 800edba:	f995 2009 	ldrsb.w	r2, [r5, #9]
 800edbe:	2a00      	cmp	r2, #0
 800edc0:	f280 80b9 	bge.w	800ef36 <draw_x_ticks+0x34a>
            lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, tick_value);
 800edc4:	4a62      	ldr	r2, [pc, #392]	; (800ef50 <draw_x_ticks+0x364>)
 800edc6:	2110      	movs	r1, #16
 800edc8:	a812      	add	r0, sp, #72	; 0x48
 800edca:	f7f3 ff6d 	bl	8002ca8 <snprintf>
            part_draw_dsc.label_dsc = &label_dsc;
 800edce:	ab16      	add	r3, sp, #88	; 0x58
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800edd0:	aa1e      	add	r2, sp, #120	; 0x78
 800edd2:	211a      	movs	r1, #26
            part_draw_dsc.label_dsc = &label_dsc;
 800edd4:	9323      	str	r3, [sp, #140]	; 0x8c
            part_draw_dsc.text = buf;
 800edd6:	ab12      	add	r3, sp, #72	; 0x48
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800edd8:	4620      	mov	r0, r4
            part_draw_dsc.text = buf;
 800edda:	9329      	str	r3, [sp, #164]	; 0xa4
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
 800eddc:	2310      	movs	r3, #16
 800edde:	932a      	str	r3, [sp, #168]	; 0xa8
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ede0:	f7f5 fc7c 	bl	80046dc <lv_event_send>
            lv_txt_get_size(&size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800ede4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800ede8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800edea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800edec:	a80c      	add	r0, sp, #48	; 0x30
 800edee:	9301      	str	r3, [sp, #4]
 800edf0:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800edf4:	9702      	str	r7, [sp, #8]
 800edf6:	9300      	str	r3, [sp, #0]
 800edf8:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800edfc:	f016 fd1c 	bl	8025838 <lv_txt_get_size>
            a.x1 = (p2.x - size.x / 2);
 800ee00:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800ee04:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
            if(sec_axis) {
 800ee08:	f1ba 0f02 	cmp.w	sl, #2
            a.x1 = (p2.x - size.x / 2);
 800ee0c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800ee10:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800ee14:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800ee18:	eba2 0103 	sub.w	r1, r2, r3
            a.x2 = (p2.x + size.x / 2);
 800ee1c:	441a      	add	r2, r3
                a.y2 = p2.y - label_gap;
 800ee1e:	fa1f f389 	uxth.w	r3, r9
            a.x1 = (p2.x - size.x / 2);
 800ee22:	b209      	sxth	r1, r1
            a.x2 = (p2.x + size.x / 2);
 800ee24:	b212      	sxth	r2, r2
            a.x1 = (p2.x - size.x / 2);
 800ee26:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
            a.x2 = (p2.x + size.x / 2);
 800ee2a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
            if(sec_axis) {
 800ee2e:	d078      	beq.n	800ef22 <draw_x_ticks+0x336>
                a.y2 = p2.y - label_gap;
 800ee30:	1ac0      	subs	r0, r0, r3
                a.y1 = a.y2 - size.y;
 800ee32:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
                a.y2 = p2.y - label_gap;
 800ee36:	b280      	uxth	r0, r0
 800ee38:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
                a.y1 = a.y2 - size.y;
 800ee3c:	1ac0      	subs	r0, r0, r3
 800ee3e:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
            if(a.x2 >= obj->coords.x1 &&
 800ee42:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800ee46:	4293      	cmp	r3, r2
 800ee48:	dc0b      	bgt.n	800ee62 <draw_x_ticks+0x276>
 800ee4a:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 800ee4e:	428b      	cmp	r3, r1
 800ee50:	db07      	blt.n	800ee62 <draw_x_ticks+0x276>
                lv_draw_label(draw_ctx, &label_dsc, &a, part_draw_dsc.text, NULL);
 800ee52:	2300      	movs	r3, #0
 800ee54:	aa0d      	add	r2, sp, #52	; 0x34
 800ee56:	a916      	add	r1, sp, #88	; 0x58
 800ee58:	9805      	ldr	r0, [sp, #20]
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ee5e:	f7f8 ff3b 	bl	8007cd8 <lv_draw_label>
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 800ee62:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800ee66:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 800ee6a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800ee6e:	1059      	asrs	r1, r3, #1
 800ee70:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800ee74:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	db0c      	blt.n	800ee96 <draw_x_ticks+0x2aa>
           p2.x - line_dsc.width / 2  <= obj->coords.x2) {
 800ee7c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 800ee80:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 800ee84:	1a5b      	subs	r3, r3, r1
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 800ee86:	4293      	cmp	r3, r2
 800ee88:	dc05      	bgt.n	800ee96 <draw_x_ticks+0x2aa>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800ee8a:	ab0b      	add	r3, sp, #44	; 0x2c
 800ee8c:	aa0a      	add	r2, sp, #40	; 0x28
 800ee8e:	a90f      	add	r1, sp, #60	; 0x3c
 800ee90:	9805      	ldr	r0, [sp, #20]
 800ee92:	f00f fd65 	bl	801e960 <lv_draw_line>
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 800ee96:	f108 0801 	add.w	r8, r8, #1
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800ee9a:	aa1e      	add	r2, sp, #120	; 0x78
 800ee9c:	211b      	movs	r1, #27
 800ee9e:	4620      	mov	r0, r4
 800eea0:	f7f5 fc1c 	bl	80046dc <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 800eea4:	4546      	cmp	r6, r8
 800eea6:	f4bf af49 	bcs.w	800ed3c <draw_x_ticks+0x150>
 800eeaa:	e6ec      	b.n	800ec86 <draw_x_ticks+0x9a>
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
 800eeac:	f04f 0900 	mov.w	r9, #0
 800eeb0:	e6f8      	b.n	800eca4 <draw_x_ticks+0xb8>
        if(y_ofs + label_gap + label_dsc.font->line_height + t->major_len < draw_ctx->clip_area->y1) return;
 800eeb2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eeb4:	eb03 0009 	add.w	r0, r3, r9
 800eeb8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800eebc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800eec0:	4402      	add	r2, r0
 800eec2:	f9b5 0000 	ldrsh.w	r0, [r5]
 800eec6:	4402      	add	r2, r0
 800eec8:	428a      	cmp	r2, r1
 800eeca:	f6bf aeee 	bge.w	800ecaa <draw_x_ticks+0xbe>
 800eece:	e6da      	b.n	800ec86 <draw_x_ticks+0x9a>
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800eed0:	4641      	mov	r1, r8
 800eed2:	4620      	mov	r0, r4
 800eed4:	9308      	str	r3, [sp, #32]
 800eed6:	f014 f9ee 	bl	80232b6 <lv_obj_get_style_pad_column>
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the columns on ~adjacent X*/
 800eeda:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 800eede:	4350      	muls	r0, r2
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 800eee0:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 800eee4:	eb0b 2120 	add.w	r1, fp, r0, asr #8
 800eee8:	fb91 f1f2 	sdiv	r1, r1, r2
        x_ofs += (block_w - block_gap) / 2;
 800eeec:	b20a      	sxth	r2, r1
 800eeee:	eba2 2220 	sub.w	r2, r2, r0, asr #8
 800eef2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800eef6:	eb06 0662 	add.w	r6, r6, r2, asr #1
 800eefa:	b233      	sxth	r3, r6
 800eefc:	9306      	str	r3, [sp, #24]
        w -= block_w - block_gap;
 800eefe:	9b07      	ldr	r3, [sp, #28]
 800ef00:	eb03 2b20 	add.w	fp, r3, r0, asr #8
 800ef04:	9b08      	ldr	r3, [sp, #32]
 800ef06:	ebab 0b01 	sub.w	fp, fp, r1
 800ef0a:	fa0f fb8b 	sxth.w	fp, fp
 800ef0e:	e706      	b.n	800ed1e <draw_x_ticks+0x132>
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 800ef10:	886a      	ldrh	r2, [r5, #2]
 800ef12:	e733      	b.n	800ed7c <draw_x_ticks+0x190>
        else p2.y = p1.y + (major ? t->major_len : t->minor_len);
 800ef14:	b91f      	cbnz	r7, 800ef1e <draw_x_ticks+0x332>
 800ef16:	882a      	ldrh	r2, [r5, #0]
 800ef18:	440a      	add	r2, r1
 800ef1a:	b212      	sxth	r2, r2
 800ef1c:	e730      	b.n	800ed80 <draw_x_ticks+0x194>
 800ef1e:	886a      	ldrh	r2, [r5, #2]
 800ef20:	e7fa      	b.n	800ef18 <draw_x_ticks+0x32c>
                a.y1 = p2.y + label_gap;
 800ef22:	4403      	add	r3, r0
                a.y2 = a.y1 + size.y;
 800ef24:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
                a.y1 = p2.y + label_gap;
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                a.y2 = a.y1 + size.y;
 800ef2e:	4403      	add	r3, r0
 800ef30:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800ef34:	e785      	b.n	800ee42 <draw_x_ticks+0x256>
            part_draw_dsc.label_dsc = NULL;
 800ef36:	2300      	movs	r3, #0
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ef38:	aa1e      	add	r2, sp, #120	; 0x78
 800ef3a:	211a      	movs	r1, #26
 800ef3c:	4620      	mov	r0, r4
            part_draw_dsc.label_dsc = NULL;
 800ef3e:	9323      	str	r3, [sp, #140]	; 0x8c
            part_draw_dsc.text_length = 0;
 800ef40:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ef44:	f7f5 fbca 	bl	80046dc <lv_event_send>
 800ef48:	e78b      	b.n	800ee62 <draw_x_ticks+0x276>
 800ef4a:	bf00      	nop
 800ef4c:	08028e80 	.word	0x08028e80
 800ef50:	0802e035 	.word	0x0802e035

0800ef54 <lv_chart_event>:
{
 800ef54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 800ef58:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800f0b4 <lv_chart_event+0x160>
{
 800ef5c:	b0d1      	sub	sp, #324	; 0x144
 800ef5e:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 800ef60:	4648      	mov	r0, r9
 800ef62:	f00c f930 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 800ef66:	2801      	cmp	r0, #1
 800ef68:	d146      	bne.n	800eff8 <lv_chart_event+0xa4>
    lv_event_code_t code = lv_event_get_code(e);
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	f00c f945 	bl	801b1fa <lv_event_get_code>
 800ef70:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 800ef72:	4628      	mov	r0, r5
 800ef74:	f00c f93d 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_PRESSED) {
 800ef78:	2c01      	cmp	r4, #1
    lv_obj_t * obj = lv_event_get_target(e);
 800ef7a:	4683      	mov	fp, r0
    if(code == LV_EVENT_PRESSED) {
 800ef7c:	d158      	bne.n	800f030 <lv_chart_event+0xdc>
        lv_indev_t * indev = lv_indev_get_act();
 800ef7e:	f7f5 fc13 	bl	80047a8 <lv_indev_get_act>
        lv_indev_get_point(indev, &p);
 800ef82:	a93e      	add	r1, sp, #248	; 0xf8
 800ef84:	f00c fb0a 	bl	801b59c <lv_indev_get_point>
        p.x -= obj->coords.x1;
 800ef88:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800ef8c:	f8bd 40f8 	ldrh.w	r4, [sp, #248]	; 0xf8
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 800ef90:	4658      	mov	r0, fp
        p.x -= obj->coords.x1;
 800ef92:	1ae4      	subs	r4, r4, r3
 800ef94:	b2a4      	uxth	r4, r4
 800ef96:	f8ad 40f8 	strh.w	r4, [sp, #248]	; 0xf8
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 800ef9a:	f7f6 fe2f 	bl	8005bfc <lv_obj_get_scroll_left>
 800ef9e:	1823      	adds	r3, r4, r0
 * @return the found index
 */
static uint32_t get_index_from_x(lv_obj_t * obj, lv_coord_t x)
{
    lv_chart_t * chart  = (lv_chart_t *)obj;
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800efa0:	4658      	mov	r0, fp
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 800efa2:	b29d      	uxth	r5, r3
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800efa4:	f00d fc52 	bl	801c84c <lv_obj_get_content_width>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800efa8:	2100      	movs	r1, #0
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800efaa:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800efac:	4658      	mov	r0, fp
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800efae:	f8bb 6084 	ldrh.w	r6, [fp, #132]	; 0x84
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800efb2:	f014 f974 	bl	802329e <lv_obj_get_style_pad_left>
    x -= pad_left;
 800efb6:	1a2b      	subs	r3, r5, r0
 800efb8:	b299      	uxth	r1, r3
 800efba:	b21b      	sxth	r3, r3

    if(x < 0) return 0;
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	db35      	blt.n	800f02c <lv_chart_event+0xd8>
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800efc0:	4374      	muls	r4, r6
 800efc2:	f344 240f 	sbfx	r4, r4, #8, #16
    if(x > w) return chart->point_cnt - 1;
 800efc6:	429c      	cmp	r4, r3
 800efc8:	da19      	bge.n	800effe <lv_chart_event+0xaa>
 800efca:	f8bb 4082 	ldrh.w	r4, [fp, #130]	; 0x82
 800efce:	3c01      	subs	r4, #1
        if(id != (uint32_t)chart->pressed_point_id) {
 800efd0:	f9bb 307c 	ldrsh.w	r3, [fp, #124]	; 0x7c
 800efd4:	42a3      	cmp	r3, r4
 800efd6:	d00f      	beq.n	800eff8 <lv_chart_event+0xa4>
            invalidate_point(obj, id);
 800efd8:	b2a1      	uxth	r1, r4
 800efda:	4658      	mov	r0, fp
 800efdc:	f014 f9ac 	bl	8023338 <invalidate_point>
            invalidate_point(obj, chart->pressed_point_id);
 800efe0:	f8bb 107c 	ldrh.w	r1, [fp, #124]	; 0x7c
 800efe4:	4658      	mov	r0, fp
 800efe6:	f014 f9a7 	bl	8023338 <invalidate_point>
            lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800efea:	2200      	movs	r2, #0
 800efec:	211c      	movs	r1, #28
 800efee:	4658      	mov	r0, fp
            chart->pressed_point_id = id;
 800eff0:	f8ab 407c 	strh.w	r4, [fp, #124]	; 0x7c
            lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800eff4:	f7f5 fb72 	bl	80046dc <lv_event_send>
}
 800eff8:	b051      	add	sp, #324	; 0x144
 800effa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(chart->type == LV_CHART_TYPE_LINE) return (x * (chart->point_cnt - 1) + w / 2) / w;
 800effe:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 800f002:	f003 0307 	and.w	r3, r3, #7
 800f006:	2b01      	cmp	r3, #1
 800f008:	d108      	bne.n	800f01c <lv_chart_event+0xc8>
 800f00a:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
 800f00e:	1063      	asrs	r3, r4, #1
 800f010:	3a01      	subs	r2, #1
 800f012:	fb01 3302 	mla	r3, r1, r2, r3
 800f016:	fb93 f4f4 	sdiv	r4, r3, r4
 800f01a:	e7d9      	b.n	800efd0 <lv_chart_event+0x7c>
    if(chart->type == LV_CHART_TYPE_BAR) return (x * chart->point_cnt) / w;
 800f01c:	2b02      	cmp	r3, #2
 800f01e:	d105      	bne.n	800f02c <lv_chart_event+0xd8>
 800f020:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 800f024:	434b      	muls	r3, r1
 800f026:	fbb3 f4f4 	udiv	r4, r3, r4
 800f02a:	e7d1      	b.n	800efd0 <lv_chart_event+0x7c>
    if(x < 0) return 0;
 800f02c:	2400      	movs	r4, #0
 800f02e:	e7cf      	b.n	800efd0 <lv_chart_event+0x7c>
    else if(code == LV_EVENT_RELEASED) {
 800f030:	2c08      	cmp	r4, #8
 800f032:	d108      	bne.n	800f046 <lv_chart_event+0xf2>
        invalidate_point(obj, chart->pressed_point_id);
 800f034:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 800f038:	f014 f97e 	bl	8023338 <invalidate_point>
        chart->pressed_point_id = LV_CHART_POINT_NONE;
 800f03c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f040:	f8ab 307c 	strh.w	r3, [fp, #124]	; 0x7c
 800f044:	e7d8      	b.n	800eff8 <lv_chart_event+0xa4>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 800f046:	2c29      	cmp	r4, #41	; 0x29
 800f048:	d104      	bne.n	800f054 <lv_chart_event+0x100>
}
 800f04a:	b051      	add	sp, #324	; 0x144
 800f04c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_self_size(obj);
 800f050:	f00d bc65 	b.w	801c91e <lv_obj_refresh_self_size>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 800f054:	2c13      	cmp	r4, #19
 800f056:	d116      	bne.n	800f086 <lv_chart_event+0x132>
        lv_event_set_ext_draw_size(e, LV_MAX4(chart->tick[0].draw_size, chart->tick[1].draw_size, chart->tick[2].draw_size,
 800f058:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	; 0x64
 800f05c:	f9b0 3058 	ldrsh.w	r3, [r0, #88]	; 0x58
 800f060:	4299      	cmp	r1, r3
 800f062:	bfb8      	it	lt
 800f064:	4619      	movlt	r1, r3
 800f066:	f9b0 304c 	ldrsh.w	r3, [r0, #76]	; 0x4c
 800f06a:	4299      	cmp	r1, r3
 800f06c:	bfb8      	it	lt
 800f06e:	4619      	movlt	r1, r3
 800f070:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
 800f074:	4628      	mov	r0, r5
 800f076:	4299      	cmp	r1, r3
 800f078:	bfb8      	it	lt
 800f07a:	4619      	movlt	r1, r3
}
 800f07c:	b051      	add	sp, #324	; 0x144
 800f07e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_event_set_ext_draw_size(e, LV_MAX4(chart->tick[0].draw_size, chart->tick[1].draw_size, chart->tick[2].draw_size,
 800f082:	f00c b916 	b.w	801b2b2 <lv_event_set_ext_draw_size>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 800f086:	2c2c      	cmp	r4, #44	; 0x2c
 800f088:	d116      	bne.n	800f0b8 <lv_chart_event+0x164>
        lv_point_t * p = lv_event_get_param(e);
 800f08a:	4628      	mov	r0, r5
 800f08c:	f00c f8b9 	bl	801b202 <lv_event_get_param>
 800f090:	4604      	mov	r4, r0
        p->x = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f092:	4658      	mov	r0, fp
 800f094:	f00d fbda 	bl	801c84c <lv_obj_get_content_width>
 800f098:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 800f09c:	4343      	muls	r3, r0
        p->y = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f09e:	4658      	mov	r0, fp
        p->x = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f0a0:	121b      	asrs	r3, r3, #8
 800f0a2:	8023      	strh	r3, [r4, #0]
        p->y = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f0a4:	f00d fbe8 	bl	801c878 <lv_obj_get_content_height>
 800f0a8:	f8bb 3086 	ldrh.w	r3, [fp, #134]	; 0x86
 800f0ac:	4343      	muls	r3, r0
 800f0ae:	121b      	asrs	r3, r3, #8
 800f0b0:	8063      	strh	r3, [r4, #2]
 800f0b2:	e7a1      	b.n	800eff8 <lv_chart_event+0xa4>
 800f0b4:	08028e80 	.word	0x08028e80
    else if(code == LV_EVENT_DRAW_MAIN) {
 800f0b8:	2c15      	cmp	r4, #21
 800f0ba:	d19d      	bne.n	800eff8 <lv_chart_event+0xa4>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800f0bc:	4628      	mov	r0, r5
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 800f0be:	ac22      	add	r4, sp, #136	; 0x88
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800f0c0:	f00c f8f0 	bl	801b2a4 <lv_event_get_draw_ctx>
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 800f0c4:	f10b 0314 	add.w	r3, fp, #20
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800f0c8:	4682      	mov	sl, r0
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 800f0ca:	6882      	ldr	r2, [r0, #8]
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	9302      	str	r3, [sp, #8]
 800f0d2:	f015 f8ce 	bl	8024272 <_lv_area_intersect>
    if(mask_ret == false) return;
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	d071      	beq.n	800f1be <lv_chart_event+0x26a>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f0da:	f8da 3008 	ldr.w	r3, [sl, #8]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f0de:	4658      	mov	r0, fp
    draw_ctx->clip_area = &series_clip_area;
 800f0e0:	f8ca 4008 	str.w	r4, [sl, #8]
    lv_draw_line_dsc_init(&line_dsc);
 800f0e4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f0e8:	9306      	str	r3, [sp, #24]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f0ea:	f014 f91e 	bl	802332a <lv_obj_get_style_border_width.constprop.0>
 800f0ee:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	4658      	mov	r0, fp
    part_draw_dsc.part = LV_PART_MAIN;
 800f0f4:	2600      	movs	r6, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f0f6:	f014 f8d2 	bl	802329e <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f0fa:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f0fc:	b2a3      	uxth	r3, r4
 800f0fe:	9007      	str	r0, [sp, #28]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f100:	4658      	mov	r0, fp
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f102:	9303      	str	r3, [sp, #12]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f104:	f014 f8dd 	bl	80232c2 <lv_obj_get_style_pad_top>
 800f108:	4604      	mov	r4, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f10a:	4658      	mov	r0, fp
 800f10c:	f00d fb9e 	bl	801c84c <lv_obj_get_content_width>
 800f110:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 800f114:	9008      	str	r0, [sp, #32]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f116:	4658      	mov	r0, fp
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f118:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f11a:	f00d fbad 	bl	801c878 <lv_obj_get_content_height>
 800f11e:	4607      	mov	r7, r0
    lv_draw_line_dsc_init(&line_dsc);
 800f120:	4640      	mov	r0, r8
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f122:	f8bb 5086 	ldrh.w	r5, [fp, #134]	; 0x86
    lv_draw_line_dsc_init(&line_dsc);
 800f126:	f00f fc0e 	bl	801e946 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 800f12a:	4642      	mov	r2, r8
 800f12c:	2100      	movs	r1, #0
 800f12e:	4658      	mov	r0, fp
 800f130:	f00d f89a 	bl	801c268 <lv_obj_init_draw_line_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f134:	4651      	mov	r1, sl
 800f136:	a83e      	add	r0, sp, #248	; 0xf8
 800f138:	f00d f9a0 	bl	801c47c <lv_obj_draw_dsc_init>
    part_draw_dsc.id = 0xFFFFFFFF;
 800f13c:	f04f 33ff 	mov.w	r3, #4294967295
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f140:	aa3e      	add	r2, sp, #248	; 0xf8
 800f142:	211a      	movs	r1, #26
 800f144:	4658      	mov	r0, fp
    part_draw_dsc.id = 0xFFFFFFFF;
 800f146:	934c      	str	r3, [sp, #304]	; 0x130
    part_draw_dsc.part = LV_PART_MAIN;
 800f148:	964b      	str	r6, [sp, #300]	; 0x12c
    part_draw_dsc.line_dsc = &line_dsc;
 800f14a:	f8cd 8110 	str.w	r8, [sp, #272]	; 0x110
    part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_INIT;
 800f14e:	e9cd 963f 	strd	r9, r6, [sp, #252]	; 0xfc
    part_draw_dsc.p2 = NULL;
 800f152:	e9cd 6647 	strd	r6, r6, [sp, #284]	; 0x11c
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f156:	f7f5 fac1 	bl	80046dc <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800f15a:	4631      	mov	r1, r6
 800f15c:	2231      	movs	r2, #49	; 0x31
 800f15e:	4658      	mov	r0, fp
 800f160:	f00e fc8e 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800f164:	b2c3      	uxtb	r3, r0
    lv_coord_t border_w = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f166:	4658      	mov	r0, fp
 800f168:	9305      	str	r3, [sp, #20]
 800f16a:	f014 f8de 	bl	802332a <lv_obj_get_style_border_width.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 800f16e:	4631      	mov	r1, r6
 800f170:	2233      	movs	r2, #51	; 0x33
 800f172:	4681      	mov	r9, r0
 800f174:	4658      	mov	r0, fp
 800f176:	f00e fc83 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_border_side_t)v.num;
 800f17a:	b2c6      	uxtb	r6, r0
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 800f17c:	4658      	mov	r0, fp
 800f17e:	f7f6 fd3d 	bl	8005bfc <lv_obj_get_scroll_left>
 800f182:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t scroll_top = lv_obj_get_scroll_top(obj);
 800f184:	4658      	mov	r0, fp
 800f186:	f00d fef4 	bl	801cf72 <lv_obj_get_scroll_top>
    if(chart->hdiv_cnt != 0) {
 800f18a:	f8bb 807e 	ldrh.w	r8, [fp, #126]	; 0x7e
 800f18e:	f1b8 0f00 	cmp.w	r8, #0
 800f192:	f040 8148 	bne.w	800f426 <lv_chart_event+0x4d2>
    if(chart->vdiv_cnt != 0) {
 800f196:	f8bb 8080 	ldrh.w	r8, [fp, #128]	; 0x80
 800f19a:	f1b8 0f00 	cmp.w	r8, #0
 800f19e:	f040 81a7 	bne.w	800f4f0 <lv_chart_event+0x59c>
    part_draw_dsc.id = 0xFFFFFFFF;
 800f1a2:	f04f 33ff 	mov.w	r3, #4294967295
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800f1a6:	aa3e      	add	r2, sp, #248	; 0xf8
 800f1a8:	211b      	movs	r1, #27
 800f1aa:	4658      	mov	r0, fp
    part_draw_dsc.id = 0xFFFFFFFF;
 800f1ac:	934c      	str	r3, [sp, #304]	; 0x130
    part_draw_dsc.p1 = NULL;
 800f1ae:	2300      	movs	r3, #0
    part_draw_dsc.p2 = NULL;
 800f1b0:	e9cd 3347 	strd	r3, r3, [sp, #284]	; 0x11c
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800f1b4:	f7f5 fa92 	bl	80046dc <lv_event_send>
    draw_ctx->clip_area = clip_area_ori;
 800f1b8:	9b06      	ldr	r3, [sp, #24]
 800f1ba:	f8ca 3008 	str.w	r3, [sl, #8]
    draw_y_ticks(obj, draw_ctx, LV_CHART_AXIS_PRIMARY_Y);
 800f1be:	2200      	movs	r2, #0
 800f1c0:	4651      	mov	r1, sl
 800f1c2:	4658      	mov	r0, fp
 800f1c4:	f7ff fba4 	bl	800e910 <draw_y_ticks>
    draw_y_ticks(obj, draw_ctx, LV_CHART_AXIS_SECONDARY_Y);
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	4651      	mov	r1, sl
 800f1cc:	4658      	mov	r0, fp
 800f1ce:	f7ff fb9f 	bl	800e910 <draw_y_ticks>
    draw_x_ticks(obj, draw_ctx, LV_CHART_AXIS_PRIMARY_X);
 800f1d2:	2202      	movs	r2, #2
 800f1d4:	4651      	mov	r1, sl
 800f1d6:	4658      	mov	r0, fp
 800f1d8:	f7ff fd08 	bl	800ebec <draw_x_ticks>
    draw_x_ticks(obj, draw_ctx, LV_CHART_AXIS_SECONDARY_X);
 800f1dc:	2204      	movs	r2, #4
 800f1de:	4651      	mov	r1, sl
 800f1e0:	4658      	mov	r0, fp
 800f1e2:	f7ff fd03 	bl	800ebec <draw_x_ticks>
        if(_lv_ll_is_empty(&chart->series_ll) == false) {
 800f1e6:	f10b 0324 	add.w	r3, fp, #36	; 0x24
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	9306      	str	r3, [sp, #24]
 800f1ee:	f015 fc86 	bl	8024afe <_lv_ll_is_empty>
 800f1f2:	4607      	mov	r7, r0
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	f040 80bc 	bne.w	800f372 <lv_chart_event+0x41e>
            if(chart->type == LV_CHART_TYPE_LINE) draw_series_line(obj, draw_ctx);
 800f1fa:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 800f1fe:	f003 0307 	and.w	r3, r3, #7
 800f202:	2b01      	cmp	r3, #1
 800f204:	f040 8356 	bne.w	800f8b4 <lv_chart_event+0x960>
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 800f208:	ac1a      	add	r4, sp, #104	; 0x68
 800f20a:	f8da 2008 	ldr.w	r2, [sl, #8]
 800f20e:	9902      	ldr	r1, [sp, #8]
 800f210:	4620      	mov	r0, r4
 800f212:	f015 f82e 	bl	8024272 <_lv_area_intersect>
 800f216:	2800      	cmp	r0, #0
 800f218:	f000 80ab 	beq.w	800f372 <lv_chart_event+0x41e>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f21c:	f8da 3008 	ldr.w	r3, [sl, #8]
    draw_ctx->clip_area = &clip_area;
 800f220:	f8ca 4008 	str.w	r4, [sl, #8]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f224:	9309      	str	r3, [sp, #36]	; 0x24
    if(chart->point_cnt < 2) return;
 800f226:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	f240 80a1 	bls.w	800f372 <lv_chart_event+0x41e>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f230:	4658      	mov	r0, fp
 800f232:	f014 f87a 	bl	802332a <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f236:	4639      	mov	r1, r7
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f238:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f23a:	4658      	mov	r0, fp
 800f23c:	f014 f82f 	bl	802329e <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f240:	4639      	mov	r1, r7
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f242:	4605      	mov	r5, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f244:	4658      	mov	r0, fp
 800f246:	f014 f83c 	bl	80232c2 <lv_obj_get_style_pad_top>
 800f24a:	9003      	str	r0, [sp, #12]
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f24c:	4658      	mov	r0, fp
 800f24e:	f00d fafd 	bl	801c84c <lv_obj_get_content_width>
 800f252:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 800f256:	9004      	str	r0, [sp, #16]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f258:	4658      	mov	r0, fp
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f25a:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f25c:	f00d fb0c 	bl	801c878 <lv_obj_get_content_height>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800f260:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f264:	4606      	mov	r6, r0
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800f266:	4658      	mov	r0, fp
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f268:	f8bb 9086 	ldrh.w	r9, [fp, #134]	; 0x86
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800f26c:	9308      	str	r3, [sp, #32]
 800f26e:	f7f6 fcc5 	bl	8005bfc <lv_obj_get_scroll_left>
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 800f272:	f9bb 3016 	ldrsh.w	r3, [fp, #22]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800f276:	4607      	mov	r7, r0
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 800f278:	4658      	mov	r0, fp
 800f27a:	930a      	str	r3, [sp, #40]	; 0x28
 800f27c:	f00d fe79 	bl	801cf72 <lv_obj_get_scroll_top>
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 800f280:	f8da 2008 	ldr.w	r2, [sl, #8]
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 800f284:	900b      	str	r0, [sp, #44]	; 0x2c
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 800f286:	a81c      	add	r0, sp, #112	; 0x70
 800f288:	9902      	ldr	r1, [sp, #8]
 800f28a:	f014 fff2 	bl	8024272 <_lv_area_intersect>
    if(mask_ret == false) return;
 800f28e:	2800      	cmp	r0, #0
 800f290:	d06f      	beq.n	800f372 <lv_chart_event+0x41e>
    lv_draw_line_dsc_init(&line_dsc_default);
 800f292:	a822      	add	r0, sp, #136	; 0x88
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f294:	fb09 f606 	mul.w	r6, r9, r6
    lv_draw_line_dsc_init(&line_dsc_default);
 800f298:	f00f fb55 	bl	801e946 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 800f29c:	aa22      	add	r2, sp, #136	; 0x88
 800f29e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f2a2:	4658      	mov	r0, fp
 800f2a4:	f00c ffe0 	bl	801c268 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 800f2a8:	a830      	add	r0, sp, #192	; 0xc0
 800f2aa:	f7f9 fb47 	bl	800893c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 800f2ae:	aa30      	add	r2, sp, #192	; 0xc0
 800f2b0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800f2b4:	4658      	mov	r0, fp
 800f2b6:	f00c fdeb 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 800f2ba:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800f2be:	4658      	mov	r0, fp
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f2c0:	fa15 f584 	uxtah	r5, r5, r4
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 800f2c4:	f013 fff1 	bl	80232aa <lv_obj_get_style_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f2c8:	2204      	movs	r2, #4
 800f2ca:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800f2ce:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f2d2:	ea4f 2926 	mov.w	r9, r6, asr #8
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 800f2d6:	f340 084f 	sbfx	r8, r0, #1, #16
 800f2da:	4658      	mov	r0, fp
 800f2dc:	f00e fbd0 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 800f2e0:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 800f2e4:	fa03 f080 	sxtah	r0, r3, r0
 800f2e8:	1043      	asrs	r3, r0, #1
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800f2ea:	f10b 0024 	add.w	r0, fp, #36	; 0x24
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 800f2ee:	9307      	str	r3, [sp, #28]
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 800f2f0:	9a07      	ldr	r2, [sp, #28]
 800f2f2:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 800f2f6:	4542      	cmp	r2, r8
 800f2f8:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 800f2fc:	bfa8      	it	ge
 800f2fe:	4642      	movge	r2, r8
 800f300:	b212      	sxth	r2, r2
 800f302:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 800f306:	bfc2      	ittt	gt
 800f308:	f89d 2091 	ldrbgt.w	r2, [sp, #145]	; 0x91
 800f30c:	f042 0210 	orrgt.w	r2, r2, #16
 800f310:	f88d 2091 	strbgt.w	r2, [sp, #145]	; 0x91
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 800f314:	2b01      	cmp	r3, #1
 800f316:	bf02      	ittt	eq
 800f318:	f89d 3091 	ldrbeq.w	r3, [sp, #145]	; 0x91
 800f31c:	f043 0310 	orreq.w	r3, r3, #16
 800f320:	f88d 3091 	strbeq.w	r3, [sp, #145]	; 0x91
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f324:	f346 230f 	sbfx	r3, r6, #8, #16
 800f328:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 800f32a:	9b08      	ldr	r3, [sp, #32]
 800f32c:	441d      	add	r5, r3
 800f32e:	1bed      	subs	r5, r5, r7
 800f330:	b2ab      	uxth	r3, r5
 800f332:	9314      	str	r3, [sp, #80]	; 0x50
 800f334:	b22b      	sxth	r3, r5
 800f336:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f338:	9b03      	ldr	r3, [sp, #12]
 800f33a:	fa13 f584 	uxtah	r5, r3, r4
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 800f33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f340:	441d      	add	r5, r3
 800f342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f344:	1aed      	subs	r5, r5, r3
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 800f346:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 800f34a:	930e      	str	r3, [sp, #56]	; 0x38
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 800f34c:	b2ad      	uxth	r5, r5
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f34e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f352:	444d      	add	r5, r9
 800f354:	4353      	muls	r3, r2
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 800f356:	f343 230f 	sbfx	r3, r3, #8, #16
 800f35a:	930a      	str	r3, [sp, #40]	; 0x28
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800f35c:	f015 fbb9 	bl	8024ad2 <_lv_ll_get_tail>
 800f360:	b2ab      	uxth	r3, r5
 800f362:	4604      	mov	r4, r0
 800f364:	9313      	str	r3, [sp, #76]	; 0x4c
 800f366:	2c00      	cmp	r4, #0
 800f368:	f040 8128 	bne.w	800f5bc <lv_chart_event+0x668>
    draw_ctx->clip_area = clip_area_ori;
 800f36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    draw_ctx->clip_area = clip_area_ori;
 800f36e:	f8ca 3008 	str.w	r3, [sl, #8]
    if(_lv_ll_is_empty(&chart->cursor_ll)) return;
 800f372:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 800f376:	4618      	mov	r0, r3
 800f378:	9303      	str	r3, [sp, #12]
 800f37a:	f015 fbc0 	bl	8024afe <_lv_ll_is_empty>
 800f37e:	2800      	cmp	r0, #0
 800f380:	f47f ae3a 	bne.w	800eff8 <lv_chart_event+0xa4>
    if(!_lv_area_intersect(&clip_area, draw_ctx->clip_area, &obj->coords)) return;
 800f384:	ac18      	add	r4, sp, #96	; 0x60
 800f386:	9a02      	ldr	r2, [sp, #8]
 800f388:	f8da 1008 	ldr.w	r1, [sl, #8]
 800f38c:	4620      	mov	r0, r4
 800f38e:	f014 ff70 	bl	8024272 <_lv_area_intersect>
 800f392:	9002      	str	r0, [sp, #8]
 800f394:	2800      	cmp	r0, #0
 800f396:	f43f ae2f 	beq.w	800eff8 <lv_chart_event+0xa4>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f39a:	f8da 3008 	ldr.w	r3, [sl, #8]
    lv_draw_line_dsc_init(&line_dsc_ori);
 800f39e:	a81c      	add	r0, sp, #112	; 0x70
    draw_ctx->clip_area = &clip_area;
 800f3a0:	f8ca 4008 	str.w	r4, [sl, #8]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f3a4:	9304      	str	r3, [sp, #16]
    lv_draw_line_dsc_init(&line_dsc_ori);
 800f3a6:	f00f face 	bl	801e946 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_CURSOR, &line_dsc_ori);
 800f3aa:	aa1c      	add	r2, sp, #112	; 0x70
 800f3ac:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800f3b0:	4658      	mov	r0, fp
 800f3b2:	f00c ff59 	bl	801c268 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_ori);
 800f3b6:	a822      	add	r0, sp, #136	; 0x88
 800f3b8:	f7f9 fac0 	bl	800893c <lv_draw_rect_dsc_init>
    point_dsc_ori.bg_opa = line_dsc_ori.opa;
 800f3bc:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 800f3c0:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800f3c4:	4658      	mov	r0, fp
    point_dsc_ori.bg_opa = line_dsc_ori.opa;
 800f3c6:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
    point_dsc_ori.radius = LV_RADIUS_CIRCLE;
 800f3ca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f3ce:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 800f3d2:	f013 ff6a 	bl	80232aa <lv_obj_get_style_width>
 800f3d6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 800f3da:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 800f3de:	f340 074f 	sbfx	r7, r0, #1, #16
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 800f3e2:	4658      	mov	r0, fp
 800f3e4:	f013 ff61 	bl	80232aa <lv_obj_get_style_width>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f3e8:	4651      	mov	r1, sl
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 800f3ea:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800f3ee:	f340 084f 	sbfx	r8, r0, #1, #16
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f3f2:	a83e      	add	r0, sp, #248	; 0xf8
 800f3f4:	f00d f842 	bl	801c47c <lv_obj_draw_dsc_init>
    part_draw_dsc.line_dsc = &line_dsc_tmp;
 800f3f8:	ab1f      	add	r3, sp, #124	; 0x7c
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 800f3fa:	f10b 0030 	add.w	r0, fp, #48	; 0x30
    part_draw_dsc.line_dsc = &line_dsc_tmp;
 800f3fe:	9344      	str	r3, [sp, #272]	; 0x110
    part_draw_dsc.rect_dsc = &point_dsc_tmp;
 800f400:	ab30      	add	r3, sp, #192	; 0xc0
 800f402:	9342      	str	r3, [sp, #264]	; 0x108
    part_draw_dsc.part = LV_PART_CURSOR;
 800f404:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800f408:	934b      	str	r3, [sp, #300]	; 0x12c
    part_draw_dsc.class_p = MY_CLASS;
 800f40a:	4bb7      	ldr	r3, [pc, #732]	; (800f6e8 <lv_chart_event+0x794>)
 800f40c:	933f      	str	r3, [sp, #252]	; 0xfc
    part_draw_dsc.type = LV_CHART_DRAW_PART_CURSOR;
 800f40e:	2305      	movs	r3, #5
 800f410:	9340      	str	r3, [sp, #256]	; 0x100
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 800f412:	f015 fb5e 	bl	8024ad2 <_lv_ll_get_tail>
 800f416:	4604      	mov	r4, r0
 800f418:	2800      	cmp	r0, #0
 800f41a:	f040 8559 	bne.w	800fed0 <lv_chart_event+0xf7c>
    draw_ctx->clip_area = clip_area_ori;
 800f41e:	9b04      	ldr	r3, [sp, #16]
 800f420:	f8ca 3008 	str.w	r3, [sl, #8]
 800f424:	e5e8      	b.n	800eff8 <lv_chart_event+0xa4>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800f426:	9b03      	ldr	r3, [sp, #12]
 800f428:	441c      	add	r4, r3
        lv_coord_t y_ofs = obj->coords.y1 + pad_top - scroll_top;
 800f42a:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 800f42e:	441c      	add	r4, r3
 800f430:	1a20      	subs	r0, r4, r0
 800f432:	b283      	uxth	r3, r0
 800f434:	930b      	str	r3, [sp, #44]	; 0x2c
        p1.x = obj->coords.x1;
 800f436:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800f43a:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        p2.x = obj->coords.x2;
 800f43e:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800f442:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        i_end = chart->hdiv_cnt;
 800f446:	fa0f f388 	sxth.w	r3, r8
 800f44a:	9304      	str	r3, [sp, #16]
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 800f44c:	9b05      	ldr	r3, [sp, #20]
 800f44e:	2b02      	cmp	r3, #2
 800f450:	d94c      	bls.n	800f4ec <lv_chart_event+0x598>
 800f452:	f1b9 0f00 	cmp.w	r9, #0
 800f456:	dd49      	ble.n	800f4ec <lv_chart_event+0x598>
            if((border_side & LV_BORDER_SIDE_TOP) && (lv_obj_get_style_pad_top(obj, LV_PART_MAIN) == 0)) i_start++;
 800f458:	f016 0402 	ands.w	r4, r6, #2
 800f45c:	d006      	beq.n	800f46c <lv_chart_event+0x518>
 800f45e:	2100      	movs	r1, #0
 800f460:	4658      	mov	r0, fp
 800f462:	f013 ff2e 	bl	80232c2 <lv_obj_get_style_pad_top>
 800f466:	fab0 f480 	clz	r4, r0
 800f46a:	0964      	lsrs	r4, r4, #5
            if((border_side & LV_BORDER_SIDE_BOTTOM) && (lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) == 0)) i_end--;
 800f46c:	07f3      	lsls	r3, r6, #31
 800f46e:	d50b      	bpl.n	800f488 <lv_chart_event+0x534>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800f470:	2211      	movs	r2, #17
 800f472:	2100      	movs	r1, #0
 800f474:	4658      	mov	r0, fp
 800f476:	f00e fb03 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800f47a:	b200      	sxth	r0, r0
 800f47c:	b920      	cbnz	r0, 800f488 <lv_chart_event+0x534>
 800f47e:	f108 38ff 	add.w	r8, r8, #4294967295
 800f482:	fa0f f388 	sxth.w	r3, r8
 800f486:	9304      	str	r3, [sp, #16]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f488:	437d      	muls	r5, r7
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_HOR;
 800f48a:	f04f 0801 	mov.w	r8, #1
            part_draw_dsc.p1 = &p1;
 800f48e:	af1c      	add	r7, sp, #112	; 0x70
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f490:	f345 250f 	sbfx	r5, r5, #8, #16
        for(i = i_start; i < i_end; i++) {
 800f494:	9b04      	ldr	r3, [sp, #16]
 800f496:	429c      	cmp	r4, r3
 800f498:	f6bf ae7d 	bge.w	800f196 <lv_chart_event+0x242>
            p1.y = (int32_t)((int32_t)h * i) / (chart->hdiv_cnt - 1);
 800f49c:	f8bb 207e 	ldrh.w	r2, [fp, #126]	; 0x7e
 800f4a0:	fb05 f304 	mul.w	r3, r5, r4
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f4a4:	211a      	movs	r1, #26
 800f4a6:	4658      	mov	r0, fp
            p1.y = (int32_t)((int32_t)h * i) / (chart->hdiv_cnt - 1);
 800f4a8:	3a01      	subs	r2, #1
            part_draw_dsc.id = i;
 800f4aa:	944c      	str	r4, [sp, #304]	; 0x130
            part_draw_dsc.p1 = &p1;
 800f4ac:	9747      	str	r7, [sp, #284]	; 0x11c
        for(i = i_start; i < i_end; i++) {
 800f4ae:	3401      	adds	r4, #1
            p1.y = (int32_t)((int32_t)h * i) / (chart->hdiv_cnt - 1);
 800f4b0:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.y += y_ofs;
 800f4b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        for(i = i_start; i < i_end; i++) {
 800f4b6:	b224      	sxth	r4, r4
            p1.y += y_ofs;
 800f4b8:	4413      	add	r3, r2
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f4ba:	aa3e      	add	r2, sp, #248	; 0xf8
            p1.y += y_ofs;
 800f4bc:	b21b      	sxth	r3, r3
 800f4be:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            p2.y = p1.y;
 800f4c2:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            part_draw_dsc.class_p = MY_CLASS;
 800f4c6:	4b88      	ldr	r3, [pc, #544]	; (800f6e8 <lv_chart_event+0x794>)
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_HOR;
 800f4c8:	e9cd 383f 	strd	r3, r8, [sp, #252]	; 0xfc
            part_draw_dsc.p2 = &p2;
 800f4cc:	ab1f      	add	r3, sp, #124	; 0x7c
 800f4ce:	9348      	str	r3, [sp, #288]	; 0x120
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f4d0:	f7f5 f904 	bl	80046dc <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800f4d4:	ab1f      	add	r3, sp, #124	; 0x7c
 800f4d6:	463a      	mov	r2, r7
 800f4d8:	a930      	add	r1, sp, #192	; 0xc0
 800f4da:	4650      	mov	r0, sl
 800f4dc:	f00f fa40 	bl	801e960 <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800f4e0:	aa3e      	add	r2, sp, #248	; 0xf8
 800f4e2:	211b      	movs	r1, #27
 800f4e4:	4658      	mov	r0, fp
 800f4e6:	f7f5 f8f9 	bl	80046dc <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 800f4ea:	e7d3      	b.n	800f494 <lv_chart_event+0x540>
        i_start = 0;
 800f4ec:	2400      	movs	r4, #0
 800f4ee:	e7cb      	b.n	800f488 <lv_chart_event+0x534>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f4f0:	9b07      	ldr	r3, [sp, #28]
        i_end = chart->vdiv_cnt;
 800f4f2:	fa0f f788 	sxth.w	r7, r8
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800f4f6:	9d03      	ldr	r5, [sp, #12]
 800f4f8:	441d      	add	r5, r3
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 800f4fa:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800f4fe:	441d      	add	r5, r3
 800f500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f502:	1aed      	subs	r5, r5, r3
        p1.y = obj->coords.y1;
 800f504:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 800f508:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 800f50c:	b2ad      	uxth	r5, r5
        p2.y = obj->coords.y2;
 800f50e:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 800f512:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 800f516:	9b05      	ldr	r3, [sp, #20]
 800f518:	2b02      	cmp	r3, #2
 800f51a:	d94d      	bls.n	800f5b8 <lv_chart_event+0x664>
 800f51c:	f1b9 0f00 	cmp.w	r9, #0
 800f520:	dd4a      	ble.n	800f5b8 <lv_chart_event+0x664>
            if((border_side & LV_BORDER_SIDE_LEFT) && (lv_obj_get_style_pad_left(obj, LV_PART_MAIN) == 0)) i_start++;
 800f522:	f016 0404 	ands.w	r4, r6, #4
 800f526:	d006      	beq.n	800f536 <lv_chart_event+0x5e2>
 800f528:	2100      	movs	r1, #0
 800f52a:	4658      	mov	r0, fp
 800f52c:	f013 feb7 	bl	802329e <lv_obj_get_style_pad_left>
 800f530:	fab0 f480 	clz	r4, r0
 800f534:	0964      	lsrs	r4, r4, #5
            if((border_side & LV_BORDER_SIDE_RIGHT) && (lv_obj_get_style_pad_right(obj, LV_PART_MAIN) == 0)) i_end--;
 800f536:	0736      	lsls	r6, r6, #28
 800f538:	d50a      	bpl.n	800f550 <lv_chart_event+0x5fc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800f53a:	2213      	movs	r2, #19
 800f53c:	2100      	movs	r1, #0
 800f53e:	4658      	mov	r0, fp
 800f540:	f00e fa9e 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800f544:	b200      	sxth	r0, r0
 800f546:	b918      	cbnz	r0, 800f550 <lv_chart_event+0x5fc>
 800f548:	f108 38ff 	add.w	r8, r8, #4294967295
 800f54c:	fa0f f788 	sxth.w	r7, r8
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_VER;
 800f550:	f04f 0902 	mov.w	r9, #2
            part_draw_dsc.p1 = &p1;
 800f554:	f10d 0870 	add.w	r8, sp, #112	; 0x70
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f558:	e9dd 6308 	ldrd	r6, r3, [sp, #32]
 800f55c:	435e      	muls	r6, r3
 800f55e:	f346 260f 	sbfx	r6, r6, #8, #16
        for(i = i_start; i < i_end; i++) {
 800f562:	42bc      	cmp	r4, r7
 800f564:	f6bf ae1d 	bge.w	800f1a2 <lv_chart_event+0x24e>
            p1.x = (int32_t)((int32_t)w * i) / (chart->vdiv_cnt - 1);
 800f568:	f8bb 2080 	ldrh.w	r2, [fp, #128]	; 0x80
 800f56c:	fb06 f304 	mul.w	r3, r6, r4
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f570:	211a      	movs	r1, #26
 800f572:	4658      	mov	r0, fp
            p1.x = (int32_t)((int32_t)w * i) / (chart->vdiv_cnt - 1);
 800f574:	3a01      	subs	r2, #1
            part_draw_dsc.id = i;
 800f576:	944c      	str	r4, [sp, #304]	; 0x130
            part_draw_dsc.p1 = &p1;
 800f578:	f8cd 811c 	str.w	r8, [sp, #284]	; 0x11c
        for(i = i_start; i < i_end; i++) {
 800f57c:	3401      	adds	r4, #1
            p1.x = (int32_t)((int32_t)w * i) / (chart->vdiv_cnt - 1);
 800f57e:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.x += x_ofs;
 800f582:	442b      	add	r3, r5
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f584:	aa3e      	add	r2, sp, #248	; 0xf8
        for(i = i_start; i < i_end; i++) {
 800f586:	b224      	sxth	r4, r4
            p1.x += x_ofs;
 800f588:	b21b      	sxth	r3, r3
 800f58a:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            p2.x = p1.x;
 800f58e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            part_draw_dsc.class_p = MY_CLASS;
 800f592:	4b55      	ldr	r3, [pc, #340]	; (800f6e8 <lv_chart_event+0x794>)
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_VER;
 800f594:	e9cd 393f 	strd	r3, r9, [sp, #252]	; 0xfc
            part_draw_dsc.p2 = &p2;
 800f598:	ab1f      	add	r3, sp, #124	; 0x7c
 800f59a:	9348      	str	r3, [sp, #288]	; 0x120
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f59c:	f7f5 f89e 	bl	80046dc <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800f5a0:	ab1f      	add	r3, sp, #124	; 0x7c
 800f5a2:	4642      	mov	r2, r8
 800f5a4:	a930      	add	r1, sp, #192	; 0xc0
 800f5a6:	4650      	mov	r0, sl
 800f5a8:	f00f f9da 	bl	801e960 <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800f5ac:	aa3e      	add	r2, sp, #248	; 0xf8
 800f5ae:	211b      	movs	r1, #27
 800f5b0:	4658      	mov	r0, fp
 800f5b2:	f7f5 f893 	bl	80046dc <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 800f5b6:	e7d4      	b.n	800f562 <lv_chart_event+0x60e>
        i_start = 0;
 800f5b8:	2400      	movs	r4, #0
 800f5ba:	e7c9      	b.n	800f550 <lv_chart_event+0x5fc>
        if(ser->hidden) continue;
 800f5bc:	7b23      	ldrb	r3, [r4, #12]
 800f5be:	f013 0301 	ands.w	r3, r3, #1
 800f5c2:	d005      	beq.n	800f5d0 <lv_chart_event+0x67c>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800f5c4:	4621      	mov	r1, r4
 800f5c6:	9806      	ldr	r0, [sp, #24]
 800f5c8:	f015 fa8a 	bl	8024ae0 <_lv_ll_get_prev>
 800f5cc:	4604      	mov	r4, r0
 800f5ce:	e6ca      	b.n	800f366 <lv_chart_event+0x412>
        line_dsc_default.color = ser->color;
 800f5d0:	8922      	ldrh	r2, [r4, #8]
                    part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800f5d2:	f647 79ff 	movw	r9, #32767	; 0x7fff
        line_dsc_default.color = ser->color;
 800f5d6:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
        point_dsc_default.bg_color = ser->color;
 800f5da:	8922      	ldrh	r2, [r4, #8]
 800f5dc:	f8ad 20c4 	strh.w	r2, [sp, #196]	; 0xc4
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800f5e0:	f89b 2088 	ldrb.w	r2, [fp, #136]	; 0x88
 800f5e4:	0710      	lsls	r0, r2, #28
 800f5e6:	bf58      	it	pl
 800f5e8:	f9b4 300a 	ldrshpl.w	r3, [r4, #10]
 800f5ec:	9308      	str	r3, [sp, #32]
        p1.x = x_ofs;
 800f5ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 800f5f0:	9808      	ldr	r0, [sp, #32]
        p1.x = x_ofs;
 800f5f2:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
        p2.x = x_ofs;
 800f5f6:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 800f5fa:	7b22      	ldrb	r2, [r4, #12]
 800f5fc:	6863      	ldr	r3, [r4, #4]
 800f5fe:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800f602:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 800f606:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 800f60a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f60c:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800f610:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 800f614:	1a5b      	subs	r3, r3, r1
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800f616:	1a52      	subs	r2, r2, r1
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f618:	4651      	mov	r1, sl
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 800f61a:	4343      	muls	r3, r0
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f61c:	a83e      	add	r0, sp, #248	; 0xf8
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800f61e:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y   = h - y_tmp + y_ofs;
 800f622:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f624:	1ad3      	subs	r3, r2, r3
 800f626:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f62a:	f00c ff27 	bl	801c47c <lv_obj_draw_dsc_init>
        part_draw_dsc.class_p = MY_CLASS;
 800f62e:	4b2e      	ldr	r3, [pc, #184]	; (800f6e8 <lv_chart_event+0x794>)
        lv_coord_t y_min = p2.y;
 800f630:	f9bd 6062 	ldrsh.w	r6, [sp, #98]	; 0x62
        part_draw_dsc.class_p = MY_CLASS;
 800f634:	933f      	str	r3, [sp, #252]	; 0xfc
        part_draw_dsc.type = LV_CHART_DRAW_PART_LINE_AND_POINT;
 800f636:	2303      	movs	r3, #3
        lv_coord_t p_act = start_point;
 800f638:	9808      	ldr	r0, [sp, #32]
        part_draw_dsc.type = LV_CHART_DRAW_PART_LINE_AND_POINT;
 800f63a:	9340      	str	r3, [sp, #256]	; 0x100
        part_draw_dsc.part = LV_PART_ITEMS;
 800f63c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
        part_draw_dsc.sub_part_ptr = ser;
 800f640:	944f      	str	r4, [sp, #316]	; 0x13c
        part_draw_dsc.part = LV_PART_ITEMS;
 800f642:	934b      	str	r3, [sp, #300]	; 0x12c
        part_draw_dsc.line_dsc = &line_dsc_default;
 800f644:	ab22      	add	r3, sp, #136	; 0x88
        lv_coord_t y_min = p2.y;
 800f646:	9604      	str	r6, [sp, #16]
        part_draw_dsc.line_dsc = &line_dsc_default;
 800f648:	9344      	str	r3, [sp, #272]	; 0x110
        part_draw_dsc.rect_dsc = &point_dsc_default;
 800f64a:	ab30      	add	r3, sp, #192	; 0xc0
 800f64c:	9342      	str	r3, [sp, #264]	; 0x108
        for(i = 0; i < chart->point_cnt; i++) {
 800f64e:	2300      	movs	r3, #0
 800f650:	9305      	str	r3, [sp, #20]
                    point_area.x1 = p1.x - point_w;
 800f652:	fa1f f388 	uxth.w	r3, r8
 800f656:	9311      	str	r3, [sp, #68]	; 0x44
                    point_area.y1 = p1.y - point_h;
 800f658:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f65c:	9312      	str	r3, [sp, #72]	; 0x48
 800f65e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
        for(i = 0; i < chart->point_cnt; i++) {
 800f662:	f8bb 5082 	ldrh.w	r5, [fp, #130]	; 0x82
 800f666:	428d      	cmp	r5, r1
 800f668:	d840      	bhi.n	800f6ec <lv_chart_event+0x798>
        if(!crowded_mode && i == chart->point_cnt) {
 800f66a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f66c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f66e:	4293      	cmp	r3, r2
 800f670:	daa8      	bge.n	800f5c4 <lv_chart_event+0x670>
 800f672:	428d      	cmp	r5, r1
 800f674:	d1a6      	bne.n	800f5c4 <lv_chart_event+0x670>
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800f676:	6863      	ldr	r3, [r4, #4]
 800f678:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 800f67c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f680:	429a      	cmp	r2, r3
 800f682:	d09f      	beq.n	800f5c4 <lv_chart_event+0x670>
                point_area.x1 = p2.x - point_w;
 800f684:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800f688:	fa1f f288 	uxth.w	r2, r8
                part_draw_dsc.draw_area = &point_area;
 800f68c:	ad1f      	add	r5, sp, #124	; 0x7c
                point_area.x1 = p2.x - point_w;
 800f68e:	1a99      	subs	r1, r3, r2
                point_area.x2 = p2.x + point_w;
 800f690:	4413      	add	r3, r2
                point_area.y1 = p2.y - point_h;
 800f692:	f8bd 201c 	ldrh.w	r2, [sp, #28]
                point_area.x2 = p2.x + point_w;
 800f696:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
                point_area.y1 = p2.y - point_h;
 800f69a:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
                point_area.x1 = p2.x - point_w;
 800f69e:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
                point_area.y1 = p2.y - point_h;
 800f6a2:	1a99      	subs	r1, r3, r2
                point_area.y2 = p2.y + point_h;
 800f6a4:	4413      	add	r3, r2
                part_draw_dsc.draw_area = &point_area;
 800f6a6:	9541      	str	r5, [sp, #260]	; 0x104
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f6a8:	aa3e      	add	r2, sp, #248	; 0xf8
                point_area.y2 = p2.y + point_h;
 800f6aa:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                part_draw_dsc.id = i - 1;
 800f6ae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
                point_area.y1 = p2.y - point_h;
 800f6b2:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f6b6:	211a      	movs	r1, #26
                part_draw_dsc.id = i - 1;
 800f6b8:	3b01      	subs	r3, #1
 800f6ba:	934c      	str	r3, [sp, #304]	; 0x130
                part_draw_dsc.p1 = NULL;
 800f6bc:	2300      	movs	r3, #0
                part_draw_dsc.p2 = NULL;
 800f6be:	e9cd 3347 	strd	r3, r3, [sp, #284]	; 0x11c
                part_draw_dsc.value = ser->y_points[p_act];
 800f6c2:	6863      	ldr	r3, [r4, #4]
 800f6c4:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f6c8:	4658      	mov	r0, fp
                part_draw_dsc.value = ser->y_points[p_act];
 800f6ca:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f6cc:	f7f5 f806 	bl	80046dc <lv_event_send>
                lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 800f6d0:	462a      	mov	r2, r5
 800f6d2:	a930      	add	r1, sp, #192	; 0xc0
 800f6d4:	4650      	mov	r0, sl
 800f6d6:	f00f fe66 	bl	801f3a6 <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800f6da:	aa3e      	add	r2, sp, #248	; 0xf8
 800f6dc:	211b      	movs	r1, #27
 800f6de:	4658      	mov	r0, fp
 800f6e0:	f7f4 fffc 	bl	80046dc <lv_event_send>
 800f6e4:	e76e      	b.n	800f5c4 <lv_chart_event+0x670>
 800f6e6:	bf00      	nop
 800f6e8:	08028e80 	.word	0x08028e80
            p1.y = p2.y;
 800f6ec:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
            p1.x = p2.x;
 800f6f0:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
            p1.y = p2.y;
 800f6f4:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 800f6f8:	930f      	str	r3, [sp, #60]	; 0x3c
            if(p1.x > clip_area_ori->x2 + point_w + 1) break;
 800f6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
            p1.x = p2.x;
 800f6fc:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
            if(p1.x > clip_area_ori->x2 + point_w + 1) break;
 800f700:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f704:	4443      	add	r3, r8
 800f706:	3301      	adds	r3, #1
 800f708:	429a      	cmp	r2, r3
 800f70a:	f73f af5b 	bgt.w	800f5c4 <lv_chart_event+0x670>
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 800f70e:	f8bd c014 	ldrh.w	ip, [sp, #20]
 800f712:	1e6f      	subs	r7, r5, #1
 800f714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f716:	fb0c f303 	mul.w	r3, ip, r3
 800f71a:	fb93 f3f7 	sdiv	r3, r3, r7
 800f71e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f720:	443b      	add	r3, r7
 800f722:	b29f      	uxth	r7, r3
 800f724:	b21b      	sxth	r3, r3
 800f726:	9715      	str	r7, [sp, #84]	; 0x54
 800f728:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800f72c:	930b      	str	r3, [sp, #44]	; 0x2c
            p_act = (start_point + i) % chart->point_cnt;
 800f72e:	9b08      	ldr	r3, [sp, #32]
 800f730:	eb03 070c 	add.w	r7, r3, ip
 800f734:	fb97 fef5 	sdiv	lr, r7, r5
 800f738:	fb05 771e 	mls	r7, r5, lr, r7
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800f73c:	f8d4 e004 	ldr.w	lr, [r4, #4]
            p_act = (start_point + i) % chart->point_cnt;
 800f740:	b23b      	sxth	r3, r7
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800f742:	7b27      	ldrb	r7, [r4, #12]
 800f744:	f3c7 1700 	ubfx	r7, r7, #4, #1
            p_act = (start_point + i) % chart->point_cnt;
 800f748:	9303      	str	r3, [sp, #12]
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800f74a:	eb0b 0747 	add.w	r7, fp, r7, lsl #1
 800f74e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800f752:	f9b7 7070 	ldrsh.w	r7, [r7, #112]	; 0x70
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800f756:	9310      	str	r3, [sp, #64]	; 0x40
 800f758:	9b03      	ldr	r3, [sp, #12]
 800f75a:	f93e 5013 	ldrsh.w	r5, [lr, r3, lsl #1]
 800f75e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f760:	1aed      	subs	r5, r5, r3
 800f762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f764:	435d      	muls	r5, r3
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800f766:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f768:	1aff      	subs	r7, r7, r3
            p2.y  = h - y_tmp + y_ofs;
 800f76a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800f76c:	fb95 f5f7 	sdiv	r5, r5, r7
            p2.y  = h - y_tmp + y_ofs;
 800f770:	1b5d      	subs	r5, r3, r5
            if(p2.x < clip_area_ori->x1 - point_w - 1) {
 800f772:	9b09      	ldr	r3, [sp, #36]	; 0x24
            p2.y  = h - y_tmp + y_ofs;
 800f774:	b22d      	sxth	r5, r5
 800f776:	f8ad 5062 	strh.w	r5, [sp, #98]	; 0x62
            if(p2.x < clip_area_ori->x1 - point_w - 1) {
 800f77a:	f9b3 7000 	ldrsh.w	r7, [r3]
 800f77e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f780:	eba7 0708 	sub.w	r7, r7, r8
 800f784:	3f01      	subs	r7, #1
 800f786:	42bb      	cmp	r3, r7
 800f788:	db39      	blt.n	800f7fe <lv_chart_event+0x8aa>
            if(i != 0) {
 800f78a:	2900      	cmp	r1, #0
 800f78c:	d037      	beq.n	800f7fe <lv_chart_event+0x8aa>
                if(crowded_mode) {
 800f78e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800f790:	0047      	lsls	r7, r0, #1
                if(crowded_mode) {
 800f792:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f794:	428b      	cmp	r3, r1
 800f796:	db37      	blt.n	800f808 <lv_chart_event+0x8b4>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800f798:	f93e 1010 	ldrsh.w	r1, [lr, r0, lsl #1]
 800f79c:	4549      	cmp	r1, r9
 800f79e:	d02e      	beq.n	800f7fe <lv_chart_event+0x8aa>
 800f7a0:	9b03      	ldr	r3, [sp, #12]
 800f7a2:	f93e 1013 	ldrsh.w	r1, [lr, r3, lsl #1]
 800f7a6:	4549      	cmp	r1, r9
 800f7a8:	d029      	beq.n	800f7fe <lv_chart_event+0x8aa>
                        y_min = LV_MIN(y_min, p2.y);
 800f7aa:	9b04      	ldr	r3, [sp, #16]
                        y_max = LV_MAX(y_max, p2.y);
 800f7ac:	42ae      	cmp	r6, r5
 800f7ae:	bfb8      	it	lt
 800f7b0:	462e      	movlt	r6, r5
                        y_min = LV_MIN(y_min, p2.y);
 800f7b2:	42ab      	cmp	r3, r5
 800f7b4:	bfa8      	it	ge
 800f7b6:	462b      	movge	r3, r5
 800f7b8:	9304      	str	r3, [sp, #16]
                        if(p1.x != p2.x) {
 800f7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d01e      	beq.n	800f7fe <lv_chart_event+0x8aa>
                            p2.x--;         /*It's already on the next x value*/
 800f7c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
                            lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 800f7c2:	a922      	add	r1, sp, #136	; 0x88
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 800f7c4:	9a04      	ldr	r2, [sp, #16]
                            lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 800f7c6:	4650      	mov	r0, sl
                            p2.x--;         /*It's already on the next x value*/
 800f7c8:	3b01      	subs	r3, #1
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 800f7ca:	4296      	cmp	r6, r2
                            lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 800f7cc:	aa17      	add	r2, sp, #92	; 0x5c
                            p2.x--;         /*It's already on the next x value*/
 800f7ce:	b21b      	sxth	r3, r3
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 800f7d0:	bf08      	it	eq
 800f7d2:	3601      	addeq	r6, #1
                            p2.x--;         /*It's already on the next x value*/
 800f7d4:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                            p1.x = p2.x;
 800f7d8:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 800f7dc:	bf08      	it	eq
 800f7de:	b236      	sxtheq	r6, r6
                            p1.y = y_min;
 800f7e0:	9b04      	ldr	r3, [sp, #16]
                            p2.y = y_max;
 800f7e2:	f8ad 6062 	strh.w	r6, [sp, #98]	; 0x62
                            y_max = y_cur;
 800f7e6:	462e      	mov	r6, r5
                            p1.y = y_min;
 800f7e8:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                            lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 800f7ec:	ab18      	add	r3, sp, #96	; 0x60
 800f7ee:	f00f f8b7 	bl	801e960 <lv_draw_line>
                            p2.x++;         /*Compensate the previous x--*/
 800f7f2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
                            y_min = y_cur;  /*Start the line of the next x from the current last y*/
 800f7f6:	9504      	str	r5, [sp, #16]
                            p2.x++;         /*Compensate the previous x--*/
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        for(i = 0; i < chart->point_cnt; i++) {
 800f7fe:	9b05      	ldr	r3, [sp, #20]
            p_act = (start_point + i) % chart->point_cnt;
 800f800:	9803      	ldr	r0, [sp, #12]
 800f802:	3301      	adds	r3, #1
 800f804:	9305      	str	r3, [sp, #20]
 800f806:	e72a      	b.n	800f65e <lv_chart_event+0x70a>
                    point_area.x1 = p1.x - point_w;
 800f808:	b292      	uxth	r2, r2
 800f80a:	9b11      	ldr	r3, [sp, #68]	; 0x44
                    point_area.y1 = p1.y - point_h;
 800f80c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
                    point_area.x1 = p1.x - point_w;
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                    point_area.x2 = p1.x + point_w;
 800f816:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f818:	441a      	add	r2, r3
                    point_area.y1 = p1.y - point_h;
 800f81a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f81c:	1acb      	subs	r3, r1, r3
                    point_area.x2 = p1.x + point_w;
 800f81e:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
                    part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 800f822:	9a03      	ldr	r2, [sp, #12]
                    point_area.y1 = p1.y - point_h;
 800f824:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
                    point_area.y2 = p1.y + point_h;
 800f828:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f82a:	4419      	add	r1, r3
                    part_draw_dsc.id = i - 1;
 800f82c:	f10c 33ff 	add.w	r3, ip, #4294967295
                    point_area.y2 = p1.y + point_h;
 800f830:	f8ad 1082 	strh.w	r1, [sp, #130]	; 0x82
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f834:	211a      	movs	r1, #26
                    part_draw_dsc.id = i - 1;
 800f836:	934c      	str	r3, [sp, #304]	; 0x130
                    part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800f838:	6863      	ldr	r3, [r4, #4]
 800f83a:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f83e:	4658      	mov	r0, fp
                    part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800f840:	454b      	cmp	r3, r9
 800f842:	bf14      	ite	ne
 800f844:	ab17      	addne	r3, sp, #92	; 0x5c
 800f846:	2300      	moveq	r3, #0
 800f848:	9347      	str	r3, [sp, #284]	; 0x11c
                    part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 800f84a:	6863      	ldr	r3, [r4, #4]
 800f84c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f850:	aa3e      	add	r2, sp, #248	; 0xf8
                    part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 800f852:	454b      	cmp	r3, r9
 800f854:	bf14      	ite	ne
 800f856:	ab18      	addne	r3, sp, #96	; 0x60
 800f858:	2300      	moveq	r3, #0
 800f85a:	9348      	str	r3, [sp, #288]	; 0x120
                    part_draw_dsc.draw_area = &point_area;
 800f85c:	ab1f      	add	r3, sp, #124	; 0x7c
 800f85e:	9341      	str	r3, [sp, #260]	; 0x104
                    part_draw_dsc.value = ser->y_points[p_prev];
 800f860:	6863      	ldr	r3, [r4, #4]
 800f862:	5fdb      	ldrsh	r3, [r3, r7]
 800f864:	934e      	str	r3, [sp, #312]	; 0x138
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800f866:	f7f4 ff39 	bl	80046dc <lv_event_send>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800f86a:	6863      	ldr	r3, [r4, #4]
 800f86c:	5fda      	ldrsh	r2, [r3, r7]
 800f86e:	454a      	cmp	r2, r9
 800f870:	d00a      	beq.n	800f888 <lv_chart_event+0x934>
 800f872:	9a03      	ldr	r2, [sp, #12]
 800f874:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800f878:	454b      	cmp	r3, r9
 800f87a:	d005      	beq.n	800f888 <lv_chart_event+0x934>
                        lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 800f87c:	ab18      	add	r3, sp, #96	; 0x60
 800f87e:	aa17      	add	r2, sp, #92	; 0x5c
 800f880:	a922      	add	r1, sp, #136	; 0x88
 800f882:	4650      	mov	r0, sl
 800f884:	f00f f86c 	bl	801e960 <lv_draw_line>
                    if(point_w && point_h && ser->y_points[p_prev] != LV_CHART_POINT_NONE) {
 800f888:	f1b8 0f00 	cmp.w	r8, #0
 800f88c:	d00c      	beq.n	800f8a8 <lv_chart_event+0x954>
 800f88e:	9b07      	ldr	r3, [sp, #28]
 800f890:	b153      	cbz	r3, 800f8a8 <lv_chart_event+0x954>
 800f892:	6863      	ldr	r3, [r4, #4]
 800f894:	5fda      	ldrsh	r2, [r3, r7]
 800f896:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d004      	beq.n	800f8a8 <lv_chart_event+0x954>
                        lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 800f89e:	aa1f      	add	r2, sp, #124	; 0x7c
 800f8a0:	a930      	add	r1, sp, #192	; 0xc0
 800f8a2:	4650      	mov	r0, sl
 800f8a4:	f00f fd7f 	bl	801f3a6 <lv_draw_rect>
                    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800f8a8:	aa3e      	add	r2, sp, #248	; 0xf8
 800f8aa:	211b      	movs	r1, #27
 800f8ac:	4658      	mov	r0, fp
 800f8ae:	f7f4 ff15 	bl	80046dc <lv_event_send>
 800f8b2:	e7a4      	b.n	800f7fe <lv_chart_event+0x8aa>
            else if(chart->type == LV_CHART_TYPE_BAR) draw_series_bar(obj, draw_ctx);
 800f8b4:	2b02      	cmp	r3, #2
 800f8b6:	f040 8131 	bne.w	800fb1c <lv_chart_event+0xbc8>
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 800f8ba:	ac1f      	add	r4, sp, #124	; 0x7c
 800f8bc:	f8da 2008 	ldr.w	r2, [sl, #8]
 800f8c0:	9902      	ldr	r1, [sp, #8]
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f014 fcd5 	bl	8024272 <_lv_area_intersect>
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	f43f ad52 	beq.w	800f372 <lv_chart_event+0x41e>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f8ce:	f8da 3008 	ldr.w	r3, [sl, #8]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800f8d2:	4639      	mov	r1, r7
    draw_ctx->clip_area = &clip_area;
 800f8d4:	f8ca 4008 	str.w	r4, [sl, #8]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800f8d8:	4658      	mov	r0, fp
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f8da:	9307      	str	r3, [sp, #28]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800f8dc:	f013 fcdf 	bl	802329e <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800f8e0:	4639      	mov	r1, r7
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800f8e2:	4680      	mov	r8, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800f8e4:	4658      	mov	r0, fp
 800f8e6:	f013 fcec 	bl	80232c2 <lv_obj_get_style_pad_top>
 800f8ea:	4605      	mov	r5, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f8ec:	4658      	mov	r0, fp
 800f8ee:	f00c ffad 	bl	801c84c <lv_obj_get_content_width>
 800f8f2:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 800f8f6:	4343      	muls	r3, r0
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f8f8:	4658      	mov	r0, fp
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800f8fa:	f343 230f 	sbfx	r3, r3, #8, #16
 800f8fe:	9303      	str	r3, [sp, #12]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f900:	f00c ffba 	bl	801c878 <lv_obj_get_content_height>
 800f904:	f8bb 3086 	ldrh.w	r3, [fp, #134]	; 0x86
 800f908:	4358      	muls	r0, r3
 800f90a:	1203      	asrs	r3, r0, #8
 800f90c:	9308      	str	r3, [sp, #32]
 800f90e:	f340 230f 	sbfx	r3, r0, #8, #16
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 800f912:	f10b 0024 	add.w	r0, fp, #36	; 0x24
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800f916:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 800f918:	f015 f8e5 	bl	8024ae6 <_lv_ll_get_len>
    int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800f91c:	4639      	mov	r1, r7
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 800f91e:	4604      	mov	r4, r0
    int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800f920:	4658      	mov	r0, fp
 800f922:	f013 fcc8 	bl	80232b6 <lv_obj_get_style_pad_column>
                                                              LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 800f926:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 800f92a:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
    lv_coord_t col_w = (block_w - (ser_cnt - 1) * ser_gap) / ser_cnt;
 800f92e:	1e66      	subs	r6, r4, #1
                                                              LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 800f930:	4343      	muls	r3, r0
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 800f932:	9803      	ldr	r0, [sp, #12]
 800f934:	1e51      	subs	r1, r2, #1
    int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800f936:	121b      	asrs	r3, r3, #8
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 800f938:	fb01 0313 	mls	r3, r1, r3, r0
    int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800f93c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f940:	4658      	mov	r0, fp
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 800f942:	fb93 f3f2 	sdiv	r3, r3, r2
 800f946:	b21b      	sxth	r3, r3
 800f948:	9304      	str	r3, [sp, #16]
    int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800f94a:	f013 fcb4 	bl	80232b6 <lv_obj_get_style_pad_column>
                                                            LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the columns on the ~same X*/
 800f94e:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 800f952:	4343      	muls	r3, r0
    lv_coord_t border_w = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f954:	4658      	mov	r0, fp
    int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 800f956:	121b      	asrs	r3, r3, #8
 800f958:	9305      	str	r3, [sp, #20]
    lv_coord_t col_w = (block_w - (ser_cnt - 1) * ser_gap) / ser_cnt;
 800f95a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f95e:	fb02 3616 	mls	r6, r2, r6, r3
 800f962:	fbb6 f6f4 	udiv	r6, r6, r4
    if(col_w < 1) col_w  = 1;
 800f966:	b236      	sxth	r6, r6
 800f968:	2e01      	cmp	r6, #1
 800f96a:	bfb8      	it	lt
 800f96c:	2601      	movlt	r6, #1
    lv_coord_t border_w = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800f96e:	f013 fcdc 	bl	802332a <lv_obj_get_style_border_width.constprop.0>
 800f972:	4681      	mov	r9, r0
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj) + border_w;
 800f974:	4658      	mov	r0, fp
 800f976:	f7f6 f941 	bl	8005bfc <lv_obj_get_scroll_left>
 800f97a:	fa1f f489 	uxth.w	r4, r9
 800f97e:	fa18 f989 	uxtah	r9, r8, r9
            col_a.x2 = col_a.x1 + col_w - 1;
 800f982:	b2b6      	uxth	r6, r6
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj) + border_w;
 800f984:	eba9 0900 	sub.w	r9, r9, r0
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj) + border_w;
 800f988:	442c      	add	r4, r5
 800f98a:	4658      	mov	r0, fp
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj) + border_w;
 800f98c:	fa1f f389 	uxth.w	r3, r9
 800f990:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj) + border_w;
 800f992:	f00d faee 	bl	801cf72 <lv_obj_get_scroll_top>
 800f996:	1a24      	subs	r4, r4, r0
    lv_draw_rect_dsc_init(&col_dsc);
 800f998:	a830      	add	r0, sp, #192	; 0xc0
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj) + border_w;
 800f99a:	b2a3      	uxth	r3, r4
    for(i = 0; i < chart->point_cnt; i++) {
 800f99c:	463c      	mov	r4, r7
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj) + border_w;
 800f99e:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_draw_rect_dsc_init(&col_dsc);
 800f9a0:	f7f8 ffcc 	bl	800893c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &col_dsc);
 800f9a4:	aa30      	add	r2, sp, #192	; 0xc0
 800f9a6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f9aa:	4658      	mov	r0, fp
 800f9ac:	f00c fa70 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    col_dsc.bg_grad.dir = LV_GRAD_DIR_NONE;
 800f9b0:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 800f9b4:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f9b8:	4651      	mov	r1, sl
    col_dsc.bg_grad.dir = LV_GRAD_DIR_NONE;
 800f9ba:	f367 0302 	bfi	r3, r7, #0, #3
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f9be:	a83e      	add	r0, sp, #248	; 0xf8
    col_dsc.bg_grad.dir = LV_GRAD_DIR_NONE;
 800f9c0:	f88d 30cf 	strb.w	r3, [sp, #207]	; 0xcf
    col_dsc.bg_opa = LV_OPA_COVER;
 800f9c4:	23ff      	movs	r3, #255	; 0xff
 800f9c6:	f88d 30c3 	strb.w	r3, [sp, #195]	; 0xc3
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 800f9ca:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 800f9ce:	4413      	add	r3, r2
 800f9d0:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800f9d4:	f00c fd52 	bl	801c47c <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 800f9d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800f9dc:	934b      	str	r3, [sp, #300]	; 0x12c
    part_draw_dsc.class_p = MY_CLASS;
 800f9de:	4ba2      	ldr	r3, [pc, #648]	; (800fc68 <lv_chart_event+0xd14>)
 800f9e0:	933f      	str	r3, [sp, #252]	; 0xfc
    part_draw_dsc.type = LV_CHART_DRAW_PART_BAR;
 800f9e2:	2304      	movs	r3, #4
 800f9e4:	9340      	str	r3, [sp, #256]	; 0x100
            col_a.x2 = col_a.x1 + col_w - 1;
 800f9e6:	1e73      	subs	r3, r6, #1
 800f9e8:	930e      	str	r3, [sp, #56]	; 0x38
    for(i = 0; i < chart->point_cnt; i++) {
 800f9ea:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 800f9ee:	b2a2      	uxth	r2, r4
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d801      	bhi.n	800f9f8 <lv_chart_event+0xaa4>
    draw_ctx->clip_area = clip_area_ori;
 800f9f4:	9b07      	ldr	r3, [sp, #28]
 800f9f6:	e4ba      	b.n	800f36e <lv_chart_event+0x41a>
        lv_coord_t x_act = (int32_t)((int32_t)(w - block_w) * i) / (chart->point_cnt - 1) + obj->coords.x1 + x_ofs;
 800f9f8:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800f9fc:	b2a7      	uxth	r7, r4
 800f9fe:	3b01      	subs	r3, #1
 800fa00:	eba2 0801 	sub.w	r8, r2, r1
 800fa04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fa06:	9806      	ldr	r0, [sp, #24]
        lv_coord_t x_act = (int32_t)((int32_t)(w - block_w) * i) / (chart->point_cnt - 1) + obj->coords.x1 + x_ofs;
 800fa08:	fb07 f808 	mul.w	r8, r7, r8
 800fa0c:	fb98 f8f3 	sdiv	r8, r8, r3
 800fa10:	f8bb 3014 	ldrh.w	r3, [fp, #20]
        part_draw_dsc.id = i;
 800fa14:	974c      	str	r7, [sp, #304]	; 0x130
        lv_coord_t x_act = (int32_t)((int32_t)(w - block_w) * i) / (chart->point_cnt - 1) + obj->coords.x1 + x_ofs;
 800fa16:	4413      	add	r3, r2
 800fa18:	4498      	add	r8, r3
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fa1a:	f015 f85a 	bl	8024ad2 <_lv_ll_get_tail>
            x_act += col_w + ser_gap;
 800fa1e:	9b05      	ldr	r3, [sp, #20]
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fa20:	4605      	mov	r5, r0
        lv_coord_t x_act = (int32_t)((int32_t)(w - block_w) * i) / (chart->point_cnt - 1) + obj->coords.x1 + x_ofs;
 800fa22:	fa0f f888 	sxth.w	r8, r8
            x_act += col_w + ser_gap;
 800fa26:	18f3      	adds	r3, r6, r3
 800fa28:	930d      	str	r3, [sp, #52]	; 0x34
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fa2a:	b1f5      	cbz	r5, 800fa6a <lv_chart_event+0xb16>
            if(ser->hidden) continue;
 800fa2c:	7b2b      	ldrb	r3, [r5, #12]
 800fa2e:	f013 0301 	ands.w	r3, r3, #1
 800fa32:	d150      	bne.n	800fad6 <lv_chart_event+0xb82>
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800fa34:	f89b 2088 	ldrb.w	r2, [fp, #136]	; 0x88
            if(col_a.x2 < clip_area.x1) continue;
 800fa38:	f9bd 107c 	ldrsh.w	r1, [sp, #124]	; 0x7c
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800fa3c:	0712      	lsls	r2, r2, #28
            col_a.x2 = col_a.x1 + col_w - 1;
 800fa3e:	fa1f f288 	uxth.w	r2, r8
 800fa42:	920c      	str	r2, [sp, #48]	; 0x30
 800fa44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800fa46:	bf58      	it	pl
 800fa48:	f9b5 300a 	ldrshpl.w	r3, [r5, #10]
            col_a.x2 = col_a.x1 + col_w - 1;
 800fa4c:	fa12 f288 	uxtah	r2, r2, r8
            col_a.x1 = x_act;
 800fa50:	f8ad 8088 	strh.w	r8, [sp, #136]	; 0x88
            col_a.x2 = col_a.x1 + col_w - 1;
 800fa54:	b212      	sxth	r2, r2
            if(col_a.x2 < clip_area.x1) continue;
 800fa56:	4291      	cmp	r1, r2
            col_a.x2 = col_a.x1 + col_w - 1;
 800fa58:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
            if(col_a.x2 < clip_area.x1) continue;
 800fa5c:	dc36      	bgt.n	800facc <lv_chart_event+0xb78>
            if(col_a.x1 > clip_area.x2) break;
 800fa5e:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
    for(i = 0; i < chart->point_cnt; i++) {
 800fa62:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
            if(col_a.x1 > clip_area.x2) break;
 800fa66:	4541      	cmp	r1, r8
 800fa68:	da01      	bge.n	800fa6e <lv_chart_event+0xb1a>
    for(i = 0; i < chart->point_cnt; i++) {
 800fa6a:	3401      	adds	r4, #1
 800fa6c:	e7bd      	b.n	800f9ea <lv_chart_event+0xa96>
            col_dsc.bg_color = ser->color;
 800fa6e:	8929      	ldrh	r1, [r5, #8]
            lv_coord_t p_act = (start_point + i) % chart->point_cnt;
 800fa70:	443b      	add	r3, r7
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 800fa72:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
            col_dsc.bg_color = ser->color;
 800fa76:	f8ad 10c4 	strh.w	r1, [sp, #196]	; 0xc4
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800fa7a:	7b28      	ldrb	r0, [r5, #12]
 800fa7c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800fa80:	f3c0 1000 	ubfx	r0, r0, #4, #1
            lv_coord_t p_act = (start_point + i) % chart->point_cnt;
 800fa84:	fb93 f1f2 	sdiv	r1, r3, r2
 800fa88:	fb02 3311 	mls	r3, r2, r1, r3
 800fa8c:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800fa90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa92:	b21b      	sxth	r3, r3
 800fa94:	f9b0 e06c 	ldrsh.w	lr, [r0, #108]	; 0x6c
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800fa98:	f9b0 0070 	ldrsh.w	r0, [r0, #112]	; 0x70
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800fa9c:	f93c 1013 	ldrsh.w	r1, [ip, r3, lsl #1]
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800faa0:	eba0 000e 	sub.w	r0, r0, lr
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 800faa4:	eba1 010e 	sub.w	r1, r1, lr
 800faa8:	4351      	muls	r1, r2
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 800faaa:	f8bb 2016 	ldrh.w	r2, [fp, #22]
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800faae:	fb91 f1f0 	sdiv	r1, r1, r0
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 800fab2:	4442      	add	r2, r8
 800fab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fab8:	4442      	add	r2, r8
 800faba:	1a52      	subs	r2, r2, r1
 800fabc:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800fac0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fac4:	f93c 1013 	ldrsh.w	r1, [ip, r3, lsl #1]
 800fac8:	4291      	cmp	r1, r2
 800faca:	d10a      	bne.n	800fae2 <lv_chart_event+0xb8e>
            x_act += col_w + ser_gap;
 800facc:	e9dd 830c 	ldrd	r8, r3, [sp, #48]	; 0x30
 800fad0:	4498      	add	r8, r3
 800fad2:	fa0f f888 	sxth.w	r8, r8
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fad6:	4629      	mov	r1, r5
 800fad8:	9806      	ldr	r0, [sp, #24]
 800fada:	f015 f801 	bl	8024ae0 <_lv_ll_get_prev>
 800fade:	4605      	mov	r5, r0
 800fae0:	e7a3      	b.n	800fa2a <lv_chart_event+0xad6>
                part_draw_dsc.draw_area = &col_a;
 800fae2:	f10d 0988 	add.w	r9, sp, #136	; 0x88
                part_draw_dsc.rect_dsc = &col_dsc;
 800fae6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
                part_draw_dsc.sub_part_ptr = ser;
 800faea:	954f      	str	r5, [sp, #316]	; 0x13c
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800faec:	211a      	movs	r1, #26
                part_draw_dsc.draw_area = &col_a;
 800faee:	f8cd 9104 	str.w	r9, [sp, #260]	; 0x104
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800faf2:	4658      	mov	r0, fp
                part_draw_dsc.rect_dsc = &col_dsc;
 800faf4:	f8cd 8108 	str.w	r8, [sp, #264]	; 0x108
                part_draw_dsc.value = ser->y_points[p_act];
 800faf8:	686a      	ldr	r2, [r5, #4]
 800fafa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fafe:	aa3e      	add	r2, sp, #248	; 0xf8
                part_draw_dsc.value = ser->y_points[p_act];
 800fb00:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fb02:	f7f4 fdeb 	bl	80046dc <lv_event_send>
                lv_draw_rect(draw_ctx, &col_dsc, &col_a);
 800fb06:	464a      	mov	r2, r9
 800fb08:	4641      	mov	r1, r8
 800fb0a:	4650      	mov	r0, sl
 800fb0c:	f00f fc4b 	bl	801f3a6 <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800fb10:	aa3e      	add	r2, sp, #248	; 0xf8
 800fb12:	211b      	movs	r1, #27
 800fb14:	4658      	mov	r0, fp
 800fb16:	f7f4 fde1 	bl	80046dc <lv_event_send>
 800fb1a:	e7d7      	b.n	800facc <lv_chart_event+0xb78>
            else if(chart->type == LV_CHART_TYPE_SCATTER) draw_series_scatter(obj, draw_ctx);
 800fb1c:	2b03      	cmp	r3, #3
 800fb1e:	f47f ac28 	bne.w	800f372 <lv_chart_event+0x41e>
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 800fb22:	ac1c      	add	r4, sp, #112	; 0x70
 800fb24:	f8da 2008 	ldr.w	r2, [sl, #8]
 800fb28:	9902      	ldr	r1, [sp, #8]
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	f014 fba1 	bl	8024272 <_lv_area_intersect>
 800fb30:	2800      	cmp	r0, #0
 800fb32:	f43f ac1e 	beq.w	800f372 <lv_chart_event+0x41e>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800fb36:	f8da 3008 	ldr.w	r3, [sl, #8]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800fb3a:	4658      	mov	r0, fp
    draw_ctx->clip_area = &clip_area;
 800fb3c:	f8ca 4008 	str.w	r4, [sl, #8]
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800fb40:	f647 79ff 	movw	r9, #32767	; 0x7fff
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800fb44:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800fb46:	f013 fbf0 	bl	802332a <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800fb4a:	4639      	mov	r1, r7
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800fb4c:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800fb4e:	4658      	mov	r0, fp
 800fb50:	f013 fba5 	bl	802329e <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800fb54:	4639      	mov	r1, r7
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800fb56:	4680      	mov	r8, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800fb58:	4658      	mov	r0, fp
 800fb5a:	f013 fbb2 	bl	80232c2 <lv_obj_get_style_pad_top>
 800fb5e:	4606      	mov	r6, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800fb60:	4658      	mov	r0, fp
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 800fb62:	b2a5      	uxth	r5, r4
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800fb64:	f00c fe72 	bl	801c84c <lv_obj_get_content_width>
 800fb68:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 800fb6c:	fa18 f484 	uxtah	r4, r8, r4
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800fb70:	4435      	add	r5, r6
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800fb72:	4343      	muls	r3, r0
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800fb74:	4658      	mov	r0, fp
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800fb76:	f343 230f 	sbfx	r3, r3, #8, #16
 800fb7a:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800fb7c:	f00c fe7c 	bl	801c878 <lv_obj_get_content_height>
 800fb80:	f8bb 3086 	ldrh.w	r3, [fp, #134]	; 0x86
 800fb84:	4358      	muls	r0, r3
 800fb86:	1203      	asrs	r3, r0, #8
 800fb88:	9307      	str	r3, [sp, #28]
 800fb8a:	f340 230f 	sbfx	r3, r0, #8, #16
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 800fb8e:	4658      	mov	r0, fp
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 800fb90:	9308      	str	r3, [sp, #32]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 800fb92:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800fb96:	441c      	add	r4, r3
 800fb98:	f7f6 f830 	bl	8005bfc <lv_obj_get_scroll_left>
 800fb9c:	b2a4      	uxth	r4, r4
 800fb9e:	1a24      	subs	r4, r4, r0
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800fba0:	4658      	mov	r0, fp
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 800fba2:	b2a3      	uxth	r3, r4
 800fba4:	9309      	str	r3, [sp, #36]	; 0x24
 800fba6:	b223      	sxth	r3, r4
 800fba8:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800fbaa:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 800fbae:	441d      	add	r5, r3
 800fbb0:	f00d f9df 	bl	801cf72 <lv_obj_get_scroll_top>
 800fbb4:	b2ad      	uxth	r5, r5
 800fbb6:	1a2d      	subs	r5, r5, r0
    lv_draw_line_dsc_init(&line_dsc_default);
 800fbb8:	a822      	add	r0, sp, #136	; 0x88
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 800fbba:	b2ab      	uxth	r3, r5
 800fbbc:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_draw_line_dsc_init(&line_dsc_default);
 800fbbe:	f00e fec2 	bl	801e946 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 800fbc2:	aa22      	add	r2, sp, #136	; 0x88
 800fbc4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800fbc8:	4658      	mov	r0, fp
 800fbca:	f00c fb4d 	bl	801c268 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 800fbce:	a830      	add	r0, sp, #192	; 0xc0
 800fbd0:	f7f8 feb4 	bl	800893c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 800fbd4:	aa30      	add	r2, sp, #192	; 0xc0
 800fbd6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800fbda:	4658      	mov	r0, fp
 800fbdc:	f00c f958 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 800fbe0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800fbe4:	4658      	mov	r0, fp
 800fbe6:	f013 fb60 	bl	80232aa <lv_obj_get_style_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800fbea:	2204      	movs	r2, #4
 800fbec:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800fbf0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800fbf4:	f340 034f 	sbfx	r3, r0, #1, #16
 800fbf8:	4658      	mov	r0, fp
 800fbfa:	9303      	str	r3, [sp, #12]
 800fbfc:	f00d ff40 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 800fc00:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 800fc04:	fa03 f080 	sxtah	r0, r3, r0
 800fc08:	1043      	asrs	r3, r0, #1
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fc0a:	f10b 0024 	add.w	r0, fp, #36	; 0x24
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 800fc0e:	9304      	str	r3, [sp, #16]
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 800fc10:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 800fc14:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800fc18:	428a      	cmp	r2, r1
 800fc1a:	bfa8      	it	ge
 800fc1c:	460a      	movge	r2, r1
 800fc1e:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 800fc22:	b212      	sxth	r2, r2
 800fc24:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 800fc28:	bfc2      	ittt	gt
 800fc2a:	f89d 2091 	ldrbgt.w	r2, [sp, #145]	; 0x91
 800fc2e:	f042 0210 	orrgt.w	r2, r2, #16
 800fc32:	f88d 2091 	strbgt.w	r2, [sp, #145]	; 0x91
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	bf02      	ittt	eq
 800fc3a:	f89d 3091 	ldrbeq.w	r3, [sp, #145]	; 0x91
 800fc3e:	f043 0310 	orreq.w	r3, r3, #16
 800fc42:	f88d 3091 	strbeq.w	r3, [sp, #145]	; 0x91
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fc46:	f014 ff44 	bl	8024ad2 <_lv_ll_get_tail>
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	b914      	cbnz	r4, 800fc54 <lv_chart_event+0xd00>
    draw_ctx->clip_area = clip_area_ori;
 800fc4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc50:	f7ff bb8d 	b.w	800f36e <lv_chart_event+0x41a>
        if(ser->hidden) continue;
 800fc54:	7b25      	ldrb	r5, [r4, #12]
 800fc56:	f015 0501 	ands.w	r5, r5, #1
 800fc5a:	d007      	beq.n	800fc6c <lv_chart_event+0xd18>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800fc5c:	4621      	mov	r1, r4
 800fc5e:	9806      	ldr	r0, [sp, #24]
 800fc60:	f014 ff3e 	bl	8024ae0 <_lv_ll_get_prev>
 800fc64:	4604      	mov	r4, r0
 800fc66:	e7f1      	b.n	800fc4c <lv_chart_event+0xcf8>
 800fc68:	08028e80 	.word	0x08028e80
        line_dsc_default.color = ser->color;
 800fc6c:	8923      	ldrh	r3, [r4, #8]
 800fc6e:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        point_dsc_default.bg_color = ser->color;
 800fc72:	8923      	ldrh	r3, [r4, #8]
 800fc74:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800fc78:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 800fc7c:	071e      	lsls	r6, r3, #28
        p1.x = x_ofs;
 800fc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 800fc80:	bf58      	it	pl
 800fc82:	f9b4 500a 	ldrshpl.w	r5, [r4, #10]
        p1.x = x_ofs;
 800fc86:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        p2.x = x_ofs;
 800fc8a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        if(ser->y_points[p_act] != LV_CHART_POINT_CNT_DEF) {
 800fc8e:	6863      	ldr	r3, [r4, #4]
 800fc90:	f933 3015 	ldrsh.w	r3, [r3, r5, lsl #1]
 800fc94:	2b0a      	cmp	r3, #10
 800fc96:	d07f      	beq.n	800fd98 <lv_chart_event+0xe44>
            p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 800fc98:	7b23      	ldrb	r3, [r4, #12]
 800fc9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fc9e:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800fca2:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 800fca6:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 800fcaa:	6823      	ldr	r3, [r4, #0]
 800fcac:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 800fcb0:	9b05      	ldr	r3, [sp, #20]
 800fcb2:	9300      	str	r3, [sp, #0]
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	f014 ffb1 	bl	8024c1c <lv_map>
            p2.x += x_ofs;
 800fcba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcbc:	4418      	add	r0, r3
 800fcbe:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
            p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 800fcc2:	7b23      	ldrb	r3, [r4, #12]
 800fcc4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fcc8:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800fccc:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 800fcd0:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 800fcd4:	6863      	ldr	r3, [r4, #4]
 800fcd6:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 800fcda:	9b08      	ldr	r3, [sp, #32]
 800fcdc:	9300      	str	r3, [sp, #0]
 800fcde:	2300      	movs	r3, #0
 800fce0:	f014 ff9c 	bl	8024c1c <lv_map>
            p2.y += y_ofs;
 800fce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fce6:	9a07      	ldr	r2, [sp, #28]
 800fce8:	4413      	add	r3, r2
 800fcea:	1a18      	subs	r0, r3, r0
 800fcec:	b200      	sxth	r0, r0
 800fcee:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800fcf2:	4651      	mov	r1, sl
 800fcf4:	a83e      	add	r0, sp, #248	; 0xf8
        lv_coord_t p_act = start_point;
 800fcf6:	46a8      	mov	r8, r5
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800fcf8:	f00c fbc0 	bl	801c47c <lv_obj_draw_dsc_init>
        part_draw_dsc.part = LV_PART_ITEMS;
 800fcfc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
                p2.y += y_ofs;
 800fd00:	9a07      	ldr	r2, [sp, #28]
        for(i = 0; i < chart->point_cnt; i++) {
 800fd02:	2600      	movs	r6, #0
        part_draw_dsc.part = LV_PART_ITEMS;
 800fd04:	934b      	str	r3, [sp, #300]	; 0x12c
        part_draw_dsc.class_p = MY_CLASS;
 800fd06:	4b70      	ldr	r3, [pc, #448]	; (800fec8 <lv_chart_event+0xf74>)
        part_draw_dsc.sub_part_ptr = ser;
 800fd08:	944f      	str	r4, [sp, #316]	; 0x13c
        part_draw_dsc.class_p = MY_CLASS;
 800fd0a:	933f      	str	r3, [sp, #252]	; 0xfc
        part_draw_dsc.type = LV_CHART_DRAW_PART_LINE_AND_POINT;
 800fd0c:	2303      	movs	r3, #3
 800fd0e:	9340      	str	r3, [sp, #256]	; 0x100
        part_draw_dsc.line_dsc = &line_dsc_default;
 800fd10:	ab22      	add	r3, sp, #136	; 0x88
 800fd12:	9344      	str	r3, [sp, #272]	; 0x110
        part_draw_dsc.rect_dsc = &point_dsc_default;
 800fd14:	ab30      	add	r3, sp, #192	; 0xc0
 800fd16:	9342      	str	r3, [sp, #264]	; 0x108
                p2.y += y_ofs;
 800fd18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd1a:	4413      	add	r3, r2
 800fd1c:	930e      	str	r3, [sp, #56]	; 0x38
 800fd1e:	b2b3      	uxth	r3, r6
        for(i = 0; i < chart->point_cnt; i++) {
 800fd20:	b2b2      	uxth	r2, r6
 800fd22:	930c      	str	r3, [sp, #48]	; 0x30
 800fd24:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d83b      	bhi.n	800fda4 <lv_chart_event+0xe50>
        if(i == chart->point_cnt) {
 800fd2c:	d196      	bne.n	800fc5c <lv_chart_event+0xd08>
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800fd2e:	6863      	ldr	r3, [r4, #4]
 800fd30:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
 800fd34:	454b      	cmp	r3, r9
 800fd36:	d091      	beq.n	800fc5c <lv_chart_event+0xd08>
                point_area.x1 = p2.x - point_w;
 800fd38:	f8bd 200c 	ldrh.w	r2, [sp, #12]
                part_draw_dsc.id = i - 1;
 800fd3c:	b2b6      	uxth	r6, r6
                point_area.x1 = p2.x - point_w;
 800fd3e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
                part_draw_dsc.draw_area = &point_area;
 800fd42:	ad1f      	add	r5, sp, #124	; 0x7c
                part_draw_dsc.id = i - 1;
 800fd44:	3e01      	subs	r6, #1
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fd46:	4658      	mov	r0, fp
                point_area.x1 = p2.x - point_w;
 800fd48:	1a99      	subs	r1, r3, r2
                point_area.x2 = p2.x + point_w;
 800fd4a:	4413      	add	r3, r2
                point_area.y1 = p2.y - point_h;
 800fd4c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                point_area.x2 = p2.x + point_w;
 800fd50:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
                point_area.y1 = p2.y - point_h;
 800fd54:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
                point_area.x1 = p2.x - point_w;
 800fd58:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
                point_area.y1 = p2.y - point_h;
 800fd5c:	1a99      	subs	r1, r3, r2
                point_area.y2 = p2.y + point_h;
 800fd5e:	4413      	add	r3, r2
                part_draw_dsc.id = i - 1;
 800fd60:	964c      	str	r6, [sp, #304]	; 0x130
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fd62:	aa3e      	add	r2, sp, #248	; 0xf8
                point_area.y2 = p2.y + point_h;
 800fd64:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                part_draw_dsc.p1 = NULL;
 800fd68:	2300      	movs	r3, #0
                point_area.y1 = p2.y - point_h;
 800fd6a:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fd6e:	211a      	movs	r1, #26
                part_draw_dsc.draw_area = &point_area;
 800fd70:	9541      	str	r5, [sp, #260]	; 0x104
                part_draw_dsc.p2 = NULL;
 800fd72:	e9cd 3347 	strd	r3, r3, [sp, #284]	; 0x11c
                part_draw_dsc.value = ser->y_points[p_act];
 800fd76:	6863      	ldr	r3, [r4, #4]
 800fd78:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
 800fd7c:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fd7e:	f7f4 fcad 	bl	80046dc <lv_event_send>
                lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 800fd82:	462a      	mov	r2, r5
 800fd84:	a930      	add	r1, sp, #192	; 0xc0
 800fd86:	4650      	mov	r0, sl
 800fd88:	f00f fb0d 	bl	801f3a6 <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800fd8c:	aa3e      	add	r2, sp, #248	; 0xf8
 800fd8e:	211b      	movs	r1, #27
 800fd90:	4658      	mov	r0, fp
 800fd92:	f7f4 fca3 	bl	80046dc <lv_event_send>
 800fd96:	e761      	b.n	800fc5c <lv_chart_event+0xd08>
            p2.x = LV_COORD_MIN;
 800fd98:	f24e 0301 	movw	r3, #57345	; 0xe001
 800fd9c:	484b      	ldr	r0, [pc, #300]	; (800fecc <lv_chart_event+0xf78>)
 800fd9e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.y = LV_COORD_MIN;
 800fda2:	e7a4      	b.n	800fcee <lv_chart_event+0xd9a>
            p1.x = p2.x;
 800fda4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            p_act = (start_point + i) % chart->point_cnt;
 800fda6:	fa15 f786 	uxtah	r7, r5, r6
            p1.x = p2.x;
 800fdaa:	9218      	str	r2, [sp, #96]	; 0x60
            p_act = (start_point + i) % chart->point_cnt;
 800fdac:	b2b2      	uxth	r2, r6
 800fdae:	920f      	str	r2, [sp, #60]	; 0x3c
 800fdb0:	fb97 f2f3 	sdiv	r2, r7, r3
 800fdb4:	fb03 7712 	mls	r7, r3, r2, r7
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800fdb8:	6863      	ldr	r3, [r4, #4]
            p_act = (start_point + i) % chart->point_cnt;
 800fdba:	b23f      	sxth	r7, r7
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800fdbc:	f933 0017 	ldrsh.w	r0, [r3, r7, lsl #1]
 800fdc0:	4548      	cmp	r0, r9
 800fdc2:	d07d      	beq.n	800fec0 <lv_chart_event+0xf6c>
                p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 800fdc4:	7b23      	ldrb	r3, [r4, #12]
 800fdc6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fdca:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800fdce:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 800fdd2:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 800fdd6:	9b08      	ldr	r3, [sp, #32]
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	2300      	movs	r3, #0
 800fddc:	f014 ff1e 	bl	8024c1c <lv_map>
                p2.y += y_ofs;
 800fde0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fde2:	1a18      	subs	r0, r3, r0
 800fde4:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
                p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 800fde8:	7b23      	ldrb	r3, [r4, #12]
 800fdea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fdee:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800fdf2:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 800fdf6:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 800fdfa:	6823      	ldr	r3, [r4, #0]
 800fdfc:	f933 0017 	ldrsh.w	r0, [r3, r7, lsl #1]
 800fe00:	9b05      	ldr	r3, [sp, #20]
 800fe02:	9300      	str	r3, [sp, #0]
 800fe04:	2300      	movs	r3, #0
 800fe06:	f014 ff09 	bl	8024c1c <lv_map>
                p2.x += x_ofs;
 800fe0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe0c:	4418      	add	r0, r3
            if(i != 0) {
 800fe0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                p2.x += x_ofs;
 800fe10:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
            if(i != 0) {
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d053      	beq.n	800fec0 <lv_chart_event+0xf6c>
                point_area.x1 = p1.x - point_w;
 800fe18:	f8bd 200c 	ldrh.w	r2, [sp, #12]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fe1c:	4658      	mov	r0, fp
                point_area.x1 = p1.x - point_w;
 800fe1e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800fe22:	1a99      	subs	r1, r3, r2
                point_area.x2 = p1.x + point_w;
 800fe24:	4413      	add	r3, r2
                point_area.y1 = p1.y - point_h;
 800fe26:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                point_area.x2 = p1.x + point_w;
 800fe2a:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
                point_area.y1 = p1.y - point_h;
 800fe2e:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
                point_area.x1 = p1.x - point_w;
 800fe32:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
                point_area.y1 = p1.y - point_h;
 800fe36:	1a99      	subs	r1, r3, r2
                point_area.y2 = p1.y + point_h;
 800fe38:	4413      	add	r3, r2
 800fe3a:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                part_draw_dsc.id = i - 1;
 800fe3e:	b2b3      	uxth	r3, r6
                point_area.y1 = p1.y - point_h;
 800fe40:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fe44:	211a      	movs	r1, #26
                part_draw_dsc.id = i - 1;
 800fe46:	3b01      	subs	r3, #1
 800fe48:	934c      	str	r3, [sp, #304]	; 0x130
                part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800fe4a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800fe4e:	930c      	str	r3, [sp, #48]	; 0x30
 800fe50:	6863      	ldr	r3, [r4, #4]
                part_draw_dsc.value = ser->y_points[p_prev];
 800fe52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800fe54:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
                part_draw_dsc.draw_area = &point_area;
 800fe58:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
                part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800fe5c:	454b      	cmp	r3, r9
 800fe5e:	bf14      	ite	ne
 800fe60:	ab18      	addne	r3, sp, #96	; 0x60
 800fe62:	2300      	moveq	r3, #0
 800fe64:	9347      	str	r3, [sp, #284]	; 0x11c
                part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 800fe66:	6863      	ldr	r3, [r4, #4]
 800fe68:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
                part_draw_dsc.draw_area = &point_area;
 800fe6c:	f8cd 8104 	str.w	r8, [sp, #260]	; 0x104
                part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 800fe70:	454b      	cmp	r3, r9
 800fe72:	bf14      	ite	ne
 800fe74:	ab1a      	addne	r3, sp, #104	; 0x68
 800fe76:	2300      	moveq	r3, #0
 800fe78:	9348      	str	r3, [sp, #288]	; 0x120
                part_draw_dsc.value = ser->y_points[p_prev];
 800fe7a:	6863      	ldr	r3, [r4, #4]
 800fe7c:	5e9b      	ldrsh	r3, [r3, r2]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fe7e:	aa3e      	add	r2, sp, #248	; 0xf8
                part_draw_dsc.value = ser->y_points[p_prev];
 800fe80:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800fe82:	f7f4 fc2b 	bl	80046dc <lv_event_send>
                if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800fe86:	6863      	ldr	r3, [r4, #4]
 800fe88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe8a:	5e9a      	ldrsh	r2, [r3, r2]
 800fe8c:	454a      	cmp	r2, r9
 800fe8e:	d012      	beq.n	800feb6 <lv_chart_event+0xf62>
 800fe90:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 800fe94:	454b      	cmp	r3, r9
 800fe96:	d00e      	beq.n	800feb6 <lv_chart_event+0xf62>
                    lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 800fe98:	ab1a      	add	r3, sp, #104	; 0x68
 800fe9a:	aa18      	add	r2, sp, #96	; 0x60
 800fe9c:	a922      	add	r1, sp, #136	; 0x88
 800fe9e:	4650      	mov	r0, sl
 800fea0:	f00e fd5e 	bl	801e960 <lv_draw_line>
                    if(point_w && point_h) {
 800fea4:	9b03      	ldr	r3, [sp, #12]
 800fea6:	b133      	cbz	r3, 800feb6 <lv_chart_event+0xf62>
 800fea8:	9b04      	ldr	r3, [sp, #16]
 800feaa:	b123      	cbz	r3, 800feb6 <lv_chart_event+0xf62>
                        lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 800feac:	4642      	mov	r2, r8
 800feae:	a930      	add	r1, sp, #192	; 0xc0
 800feb0:	4650      	mov	r0, sl
 800feb2:	f00f fa78 	bl	801f3a6 <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800feb6:	aa3e      	add	r2, sp, #248	; 0xf8
 800feb8:	211b      	movs	r1, #27
 800feba:	4658      	mov	r0, fp
 800febc:	f7f4 fc0e 	bl	80046dc <lv_event_send>
        for(i = 0; i < chart->point_cnt; i++) {
 800fec0:	3601      	adds	r6, #1
            p_act = (start_point + i) % chart->point_cnt;
 800fec2:	46b8      	mov	r8, r7
 800fec4:	e72b      	b.n	800fd1e <lv_chart_event+0xdca>
 800fec6:	bf00      	nop
 800fec8:	08028e80 	.word	0x08028e80
 800fecc:	ffffe001 	.word	0xffffe001
    return memcpy(dst, src, len);
 800fed0:	220a      	movs	r2, #10
 800fed2:	a91c      	add	r1, sp, #112	; 0x70
 800fed4:	a81f      	add	r0, sp, #124	; 0x7c
 800fed6:	f00a fc18 	bl	801a70a <memcpy>
 800feda:	2238      	movs	r2, #56	; 0x38
 800fedc:	a922      	add	r1, sp, #136	; 0x88
 800fede:	a830      	add	r0, sp, #192	; 0xc0
 800fee0:	f00a fc13 	bl	801a70a <memcpy>
        line_dsc_tmp.color = cursor->color;
 800fee4:	88e3      	ldrh	r3, [r4, #6]
 800fee6:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        point_dsc_tmp.bg_color = cursor->color;
 800feea:	88e3      	ldrh	r3, [r4, #6]
 800feec:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        part_draw_dsc.p1 = &p1;
 800fef0:	ab16      	add	r3, sp, #88	; 0x58
 800fef2:	9347      	str	r3, [sp, #284]	; 0x11c
        part_draw_dsc.p2 = &p2;
 800fef4:	ab17      	add	r3, sp, #92	; 0x5c
 800fef6:	9348      	str	r3, [sp, #288]	; 0x120
        if(cursor->pos_set) {
 800fef8:	7b63      	ldrb	r3, [r4, #13]
 800fefa:	07dd      	lsls	r5, r3, #31
 800fefc:	f140 808a 	bpl.w	8010014 <lv_chart_event+0x10c0>
            cx = cursor->pos.x;
 800ff00:	f9b4 6000 	ldrsh.w	r6, [r4]
            cy = cursor->pos.y;
 800ff04:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
        cy += obj->coords.y1;
 800ff08:	f8bb 2016 	ldrh.w	r2, [fp, #22]
        cx += obj->coords.x1;
 800ff0c:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
        cy += obj->coords.y1;
 800ff10:	4415      	add	r5, r2
        cx += obj->coords.x1;
 800ff12:	441e      	add	r6, r3
        cy += obj->coords.y1;
 800ff14:	b2aa      	uxth	r2, r5
        cx += obj->coords.x1;
 800ff16:	b2b1      	uxth	r1, r6
        cy += obj->coords.y1;
 800ff18:	b22d      	sxth	r5, r5
        cx += obj->coords.x1;
 800ff1a:	b236      	sxth	r6, r6
        bool draw_point = point_w && point_h;
 800ff1c:	2f00      	cmp	r7, #0
 800ff1e:	f000 808a 	beq.w	8010036 <lv_chart_event+0x10e2>
 800ff22:	f1b8 0f00 	cmp.w	r8, #0
 800ff26:	f000 8089 	beq.w	801003c <lv_chart_event+0x10e8>
            point_area.x1 = cx - point_w;
 800ff2a:	b2b8      	uxth	r0, r7
        bool draw_point = point_w && point_h;
 800ff2c:	f8dd 9008 	ldr.w	r9, [sp, #8]
            point_area.x1 = cx - point_w;
 800ff30:	eba1 0c00 	sub.w	ip, r1, r0
            point_area.x2 = cx + point_w;
 800ff34:	4401      	add	r1, r0
 800ff36:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
            point_area.y1 = cy - point_h;
 800ff3a:	fa1f f188 	uxth.w	r1, r8
            point_area.x1 = cx - point_w;
 800ff3e:	f8ad c068 	strh.w	ip, [sp, #104]	; 0x68
            point_area.y1 = cy - point_h;
 800ff42:	1a50      	subs	r0, r2, r1
            point_area.y2 = cy + point_h;
 800ff44:	440a      	add	r2, r1
 800ff46:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
 800ff4a:	aa1a      	add	r2, sp, #104	; 0x68
            point_area.y1 = cy - point_h;
 800ff4c:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
            part_draw_dsc.draw_area = &point_area;
 800ff50:	9241      	str	r2, [sp, #260]	; 0x104
        if(cursor->dir & LV_DIR_HOR) {
 800ff52:	7b22      	ldrb	r2, [r4, #12]
 800ff54:	0790      	lsls	r0, r2, #30
 800ff56:	d029      	beq.n	800ffac <lv_chart_event+0x1058>
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 800ff58:	f012 0f01 	tst.w	r2, #1
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ff5c:	4658      	mov	r0, fp
            p1.y = cy;
 800ff5e:	f8ad 505a 	strh.w	r5, [sp, #90]	; 0x5a
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 800ff62:	bf08      	it	eq
 800ff64:	4633      	moveq	r3, r6
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 800ff66:	0791      	lsls	r1, r2, #30
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ff68:	aa3e      	add	r2, sp, #248	; 0xf8
 800ff6a:	f04f 011a 	mov.w	r1, #26
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 800ff6e:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 800ff72:	bf54      	ite	pl
 800ff74:	4633      	movpl	r3, r6
 800ff76:	f9bb 3018 	ldrshmi.w	r3, [fp, #24]
            p2.y = p1.y;
 800ff7a:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 800ff7e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ff82:	f7f4 fbab 	bl	80046dc <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc_tmp, &p1, &p2);
 800ff86:	ab17      	add	r3, sp, #92	; 0x5c
 800ff88:	aa16      	add	r2, sp, #88	; 0x58
 800ff8a:	a91f      	add	r1, sp, #124	; 0x7c
 800ff8c:	4650      	mov	r0, sl
 800ff8e:	f00e fce7 	bl	801e960 <lv_draw_line>
            if(draw_point) {
 800ff92:	f1b9 0f00 	cmp.w	r9, #0
 800ff96:	d004      	beq.n	800ffa2 <lv_chart_event+0x104e>
                lv_draw_rect(draw_ctx, &point_dsc_tmp, &point_area);
 800ff98:	aa1a      	add	r2, sp, #104	; 0x68
 800ff9a:	a930      	add	r1, sp, #192	; 0xc0
 800ff9c:	4650      	mov	r0, sl
 800ff9e:	f00f fa02 	bl	801f3a6 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800ffa2:	aa3e      	add	r2, sp, #248	; 0xf8
 800ffa4:	211b      	movs	r1, #27
 800ffa6:	4658      	mov	r0, fp
 800ffa8:	f7f4 fb98 	bl	80046dc <lv_event_send>
        if(cursor->dir & LV_DIR_VER) {
 800ffac:	7b23      	ldrb	r3, [r4, #12]
 800ffae:	f013 0f0c 	tst.w	r3, #12
 800ffb2:	d029      	beq.n	8010008 <lv_chart_event+0x10b4>
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 800ffb4:	075a      	lsls	r2, r3, #29
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ffb6:	f04f 011a 	mov.w	r1, #26
 800ffba:	4658      	mov	r0, fp
            p1.x = cx;
 800ffbc:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 800ffc0:	bf4c      	ite	mi
 800ffc2:	f9bb 2016 	ldrshmi.w	r2, [fp, #22]
 800ffc6:	462a      	movpl	r2, r5
            p2.y = cursor->dir & LV_DIR_BOTTOM ? obj->coords.y2 : cy;
 800ffc8:	071b      	lsls	r3, r3, #28
            p2.x = p1.x;
 800ffca:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 800ffce:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ffd2:	aa3e      	add	r2, sp, #248	; 0xf8
            p2.y = cursor->dir & LV_DIR_BOTTOM ? obj->coords.y2 : cy;
 800ffd4:	bf48      	it	mi
 800ffd6:	f9bb 501a 	ldrshmi.w	r5, [fp, #26]
 800ffda:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800ffde:	f7f4 fb7d 	bl	80046dc <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc_tmp, &p1, &p2);
 800ffe2:	ab17      	add	r3, sp, #92	; 0x5c
 800ffe4:	aa16      	add	r2, sp, #88	; 0x58
 800ffe6:	a91f      	add	r1, sp, #124	; 0x7c
 800ffe8:	4650      	mov	r0, sl
 800ffea:	f00e fcb9 	bl	801e960 <lv_draw_line>
            if(draw_point) {
 800ffee:	f1b9 0f00 	cmp.w	r9, #0
 800fff2:	d004      	beq.n	800fffe <lv_chart_event+0x10aa>
                lv_draw_rect(draw_ctx, &point_dsc_tmp, &point_area);
 800fff4:	aa1a      	add	r2, sp, #104	; 0x68
 800fff6:	a930      	add	r1, sp, #192	; 0xc0
 800fff8:	4650      	mov	r0, sl
 800fffa:	f00f f9d4 	bl	801f3a6 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800fffe:	aa3e      	add	r2, sp, #248	; 0xf8
 8010000:	211b      	movs	r1, #27
 8010002:	4658      	mov	r0, fp
 8010004:	f7f4 fb6a 	bl	80046dc <lv_event_send>
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 8010008:	4621      	mov	r1, r4
 801000a:	9803      	ldr	r0, [sp, #12]
 801000c:	f014 fd68 	bl	8024ae0 <_lv_ll_get_prev>
 8010010:	f7ff ba01 	b.w	800f416 <lv_chart_event+0x4c2>
            if(cursor->point_id == LV_CHART_POINT_NONE) continue;
 8010014:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010018:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801001c:	429a      	cmp	r2, r3
 801001e:	d0f3      	beq.n	8010008 <lv_chart_event+0x10b4>
            lv_chart_get_point_pos_by_id(obj, cursor->ser, cursor->point_id, &p);
 8010020:	ab1a      	add	r3, sp, #104	; 0x68
 8010022:	b292      	uxth	r2, r2
 8010024:	68a1      	ldr	r1, [r4, #8]
 8010026:	4658      	mov	r0, fp
 8010028:	f013 fa3f 	bl	80234aa <lv_chart_get_point_pos_by_id>
            cx = p.x;
 801002c:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	; 0x68
            cy = p.y;
 8010030:	f9bd 506a 	ldrsh.w	r5, [sp, #106]	; 0x6a
 8010034:	e768      	b.n	800ff08 <lv_chart_event+0xfb4>
        bool draw_point = point_w && point_h;
 8010036:	46b9      	mov	r9, r7
 8010038:	463a      	mov	r2, r7
 801003a:	e789      	b.n	800ff50 <lv_chart_event+0xffc>
 801003c:	46c1      	mov	r9, r8
 801003e:	4642      	mov	r2, r8
 8010040:	e786      	b.n	800ff50 <lv_chart_event+0xffc>
 8010042:	bf00      	nop

08010044 <lv_colorwheel_constructor>:

static void lv_colorwheel_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
    LV_UNUSED(class_p);
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;
    colorwheel->hsv.h = 0;
 8010044:	4b11      	ldr	r3, [pc, #68]	; (801008c <lv_colorwheel_constructor+0x48>)
    colorwheel->hsv.v = 100;
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
    colorwheel->mode_fixed = 0;
    colorwheel->last_click_time = 0;
    colorwheel->last_change_time = 0;
    colorwheel->knob.recolor = create_knob_recolor;
 8010046:	4a12      	ldr	r2, [pc, #72]	; (8010090 <lv_colorwheel_constructor+0x4c>)
{
 8010048:	b510      	push	{r4, lr}
    colorwheel->hsv.h = 0;
 801004a:	624b      	str	r3, [r1, #36]	; 0x24
{
 801004c:	460c      	mov	r4, r1
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
 801004e:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
    colorwheel->knob.recolor = create_knob_recolor;
 8010052:	7812      	ldrb	r2, [r2, #0]

    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8010054:	4620      	mov	r0, r4
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
 8010056:	f023 0307 	bic.w	r3, r3, #7
 801005a:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    colorwheel->last_click_time = 0;
 801005e:	2300      	movs	r3, #0
    colorwheel->last_change_time = 0;
 8010060:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
    colorwheel->knob.recolor = create_knob_recolor;
 8010064:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8010068:	f362 0300 	bfi	r3, r2, #0, #1
 801006c:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8010070:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8010074:	f00b fc45 	bl	801b902 <lv_obj_add_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8010078:	4620      	mov	r0, r4
 801007a:	f44f 7140 	mov.w	r1, #768	; 0x300
 801007e:	f00b fc76 	bl	801b96e <lv_obj_clear_flag>
    refr_knob_pos(obj);
 8010082:	4620      	mov	r0, r4
}
 8010084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    refr_knob_pos(obj);
 8010088:	f013 bb69 	b.w	802375e <refr_knob_pos>
 801008c:	64640000 	.word	0x64640000
 8010090:	24010e34 	.word	0x24010e34

08010094 <lv_colorwheel_event>:

    return knob_area;
}

static void lv_colorwheel_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8010094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    /*Call the ancestor's event handler*/
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8010098:	48c4      	ldr	r0, [pc, #784]	; (80103ac <lv_colorwheel_event+0x318>)
{
 801009a:	b0a7      	sub	sp, #156	; 0x9c
 801009c:	460d      	mov	r5, r1
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801009e:	f00b f892 	bl	801b1c6 <lv_obj_event_base>

    if(res != LV_RES_OK) return;
 80100a2:	2801      	cmp	r0, #1
 80100a4:	d13a      	bne.n	801011c <lv_colorwheel_event+0x88>

    lv_event_code_t code = lv_event_get_code(e);
 80100a6:	4628      	mov	r0, r5
 80100a8:	f00b f8a7 	bl	801b1fa <lv_event_get_code>
 80100ac:	4607      	mov	r7, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80100ae:	4628      	mov	r0, r5
 80100b0:	f00b f89f 	bl	801b1f2 <lv_event_get_target>
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;

    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80100b4:	2f13      	cmp	r7, #19
    lv_obj_t * obj = lv_event_get_target(e);
 80100b6:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80100b8:	d133      	bne.n	8010122 <lv_colorwheel_event+0x8e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80100ba:	2212      	movs	r2, #18
 80100bc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80100c0:	f00d fcde 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80100c4:	463a      	mov	r2, r7
    return (lv_coord_t)v.num;
 80100c6:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80100ca:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80100ce:	4620      	mov	r0, r4
 80100d0:	f00d fcd6 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80100d4:	2210      	movs	r2, #16
    return (lv_coord_t)v.num;
 80100d6:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80100d8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80100dc:	4620      	mov	r0, r4
 80100de:	f00d fccf 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80100e2:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 80100e4:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80100e6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80100ea:	4620      	mov	r0, r4
 80100ec:	f00d fcc8 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80100f0:	b204      	sxth	r4, r0
        lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
        lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
        lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);

        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
        lv_coord_t * s = lv_event_get_param(e);
 80100f2:	4628      	mov	r0, r5
 80100f4:	f00b f885 	bl	801b202 <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
 80100f8:	4546      	cmp	r6, r8
 80100fa:	4633      	mov	r3, r6
        *s = LV_MAX(*s, knob_pad);
 80100fc:	f9b0 2000 	ldrsh.w	r2, [r0]
        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
 8010100:	bfb8      	it	lt
 8010102:	4643      	movlt	r3, r8
 8010104:	42bb      	cmp	r3, r7
 8010106:	bfb8      	it	lt
 8010108:	463b      	movlt	r3, r7
 801010a:	42a3      	cmp	r3, r4
 801010c:	bfb8      	it	lt
 801010e:	4623      	movlt	r3, r4
 8010110:	3302      	adds	r3, #2
        *s = LV_MAX(*s, knob_pad);
 8010112:	b21b      	sxth	r3, r3
 8010114:	4293      	cmp	r3, r2
 8010116:	bfb8      	it	lt
 8010118:	4613      	movlt	r3, r2
 801011a:	8003      	strh	r3, [r0, #0]
    }
    else if(code == LV_EVENT_COVER_CHECK) {
        lv_cover_check_info_t * info = lv_event_get_param(e);
        if(info->res != LV_COVER_RES_MASKED) info->res = LV_COVER_RES_NOT_COVER;
    }
}
 801011c:	b027      	add	sp, #156	; 0x9c
 801011e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8010122:	2f15      	cmp	r7, #21
 8010124:	f200 80c2 	bhi.w	80102ac <lv_colorwheel_event+0x218>
 8010128:	2f0c      	cmp	r7, #12
 801012a:	f200 80a5 	bhi.w	8010278 <lv_colorwheel_event+0x1e4>
 801012e:	2f01      	cmp	r7, #1
 8010130:	f000 814e 	beq.w	80103d0 <lv_colorwheel_event+0x33c>
 8010134:	2f02      	cmp	r7, #2
 8010136:	d1f1      	bne.n	801011c <lv_colorwheel_event+0x88>
        lv_indev_t * indev = lv_indev_get_act();
 8010138:	f7f4 fb36 	bl	80047a8 <lv_indev_get_act>
        if(indev == NULL) return;
 801013c:	4606      	mov	r6, r0
 801013e:	2800      	cmp	r0, #0
 8010140:	d0ec      	beq.n	801011c <lv_colorwheel_event+0x88>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8010142:	f00b fa1a 	bl	801b57a <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 8010146:	2804      	cmp	r0, #4
 8010148:	d002      	beq.n	8010150 <lv_colorwheel_event+0xbc>
 801014a:	2802      	cmp	r0, #2
 801014c:	f040 817c 	bne.w	8010448 <lv_colorwheel_event+0x3b4>
            p.x = obj->coords.x1 + lv_obj_get_width(obj) / 2;
 8010150:	4620      	mov	r0, r4
 8010152:	8aa5      	ldrh	r5, [r4, #20]
 8010154:	f00c fb6e 	bl	801c834 <lv_obj_get_width>
 8010158:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801015c:	eb05 0560 	add.w	r5, r5, r0, asr #1
            p.y = obj->coords.y1 + lv_obj_get_height(obj) / 2;
 8010160:	4620      	mov	r0, r4
            p.x = obj->coords.x1 + lv_obj_get_width(obj) / 2;
 8010162:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
            p.y = obj->coords.y1 + lv_obj_get_height(obj) / 2;
 8010166:	8ae5      	ldrh	r5, [r4, #22]
 8010168:	f00c fb6a 	bl	801c840 <lv_obj_get_height>
 801016c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8010170:	eb05 0560 	add.w	r5, r5, r0, asr #1
 8010174:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
        lv_coord_t drag_limit = indev->driver->scroll_limit;
 8010178:	6833      	ldr	r3, [r6, #0]
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 801017a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 801017e:	7e1a      	ldrb	r2, [r3, #24]
 8010180:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8010184:	1a5b      	subs	r3, r3, r1
 8010186:	2b00      	cmp	r3, #0
 8010188:	bfb8      	it	lt
 801018a:	425b      	neglt	r3, r3
 801018c:	4293      	cmp	r3, r2
 801018e:	dc09      	bgt.n	80101a4 <lv_colorwheel_event+0x110>
           (LV_ABS(p.y - colorwheel->last_press_point.y) > drag_limit)) {
 8010190:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8010194:	f9b4 103a 	ldrsh.w	r1, [r4, #58]	; 0x3a
 8010198:	1a5b      	subs	r3, r3, r1
 801019a:	2b00      	cmp	r3, #0
 801019c:	bfb8      	it	lt
 801019e:	425b      	neglt	r3, r3
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 80101a0:	429a      	cmp	r2, r3
 80101a2:	da04      	bge.n	80101ae <lv_colorwheel_event+0x11a>
            colorwheel->last_change_time = lv_tick_get();
 80101a4:	f013 ff9d 	bl	80240e2 <lv_tick_get>
 80101a8:	6360      	str	r0, [r4, #52]	; 0x34
            colorwheel->last_press_point.x = p.x;
 80101aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80101ac:	63a3      	str	r3, [r4, #56]	; 0x38
        p.x -= obj->coords.x1;
 80101ae:	8aa2      	ldrh	r2, [r4, #20]
        uint16_t w = lv_obj_get_width(obj);
 80101b0:	4620      	mov	r0, r4
        p.x -= obj->coords.x1;
 80101b2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80101b6:	1a9b      	subs	r3, r3, r2
 80101b8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        p.y -= obj->coords.y1;
 80101bc:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 80101c0:	8ae2      	ldrh	r2, [r4, #22]
 80101c2:	1a9b      	subs	r3, r3, r2
 80101c4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        uint16_t w = lv_obj_get_width(obj);
 80101c8:	f00c fb34 	bl	801c834 <lv_obj_get_width>
 80101cc:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80101ce:	2250      	movs	r2, #80	; 0x50
 80101d0:	2100      	movs	r1, #0
 80101d2:	4620      	mov	r0, r4
 80101d4:	f00d fc54 	bl	801da80 <lv_obj_get_style_prop>
        lv_coord_t r_in = w / 2;
 80101d8:	f3c5 034e 	ubfx	r3, r5, #1, #15
        p.x -= r_in;
 80101dc:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
        p.y -= r_in;
 80101e0:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
        p.x -= r_in;
 80101e4:	1ad2      	subs	r2, r2, r3
        p.y -= r_in;
 80101e6:	1ac9      	subs	r1, r1, r3
        r_in -= cir_w;
 80101e8:	1a1b      	subs	r3, r3, r0
        p.x -= r_in;
 80101ea:	b212      	sxth	r2, r2
        r_in -= cir_w;
 80101ec:	b29d      	uxth	r5, r3
 80101ee:	b21b      	sxth	r3, r3
        p.x -= r_in;
 80101f0:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        p.y -= r_in;
 80101f4:	b209      	sxth	r1, r1
        if(r_in > LV_DPI_DEF / 2) {
 80101f6:	2b41      	cmp	r3, #65	; 0x41
        p.y -= r_in;
 80101f8:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
        if(r_in > LV_DPI_DEF / 2) {
 80101fc:	dd09      	ble.n	8010212 <lv_colorwheel_event+0x17e>
            lv_coord_t inner = cir_w / 2;
 80101fe:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8010202:	fa03 f080 	sxtah	r0, r3, r0
            r_in -= inner;
 8010206:	eba5 0360 	sub.w	r3, r5, r0, asr #1
            if(r_in < LV_DPI_DEF / 2) r_in = LV_DPI_DEF / 2;
 801020a:	b21b      	sxth	r3, r3
 801020c:	2b41      	cmp	r3, #65	; 0x41
 801020e:	bfb8      	it	lt
 8010210:	2341      	movlt	r3, #65	; 0x41
        if(p.x * p.x + p.y * p.y < r_in * r_in) {
 8010212:	4349      	muls	r1, r1
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 8010214:	6b60      	ldr	r0, [r4, #52]	; 0x34
        if(p.x * p.x + p.y * p.y < r_in * r_in) {
 8010216:	435b      	muls	r3, r3
 8010218:	fb02 1202 	mla	r2, r2, r2, r1
 801021c:	429a      	cmp	r2, r3
 801021e:	f2c0 8118 	blt.w	8010452 <lv_colorwheel_event+0x3be>
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 8010222:	f013 ff66 	bl	80240f2 <lv_tick_elaps>
        angle = lv_atan2(p.x, p.y) % 360;
 8010226:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 801022a:	f9bd 0048 	ldrsh.w	r0, [sp, #72]	; 0x48
 801022e:	f014 fc92 	bl	8024b56 <lv_atan2>
 8010232:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010236:	fbb0 f3f2 	udiv	r3, r0, r2
 801023a:	fb03 0012 	mls	r0, r3, r2, r0
        hsv_cur = colorwheel->hsv;
 801023e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010240:	9318      	str	r3, [sp, #96]	; 0x60
        angle = lv_atan2(p.x, p.y) % 360;
 8010242:	b280      	uxth	r0, r0
        switch(colorwheel->mode) {
 8010244:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010248:	f003 0303 	and.w	r3, r3, #3
 801024c:	2b01      	cmp	r3, #1
 801024e:	f000 8124 	beq.w	801049a <lv_colorwheel_event+0x406>
 8010252:	2b02      	cmp	r3, #2
 8010254:	f000 8128 	beq.w	80104a8 <lv_colorwheel_event+0x414>
 8010258:	b90b      	cbnz	r3, 801025e <lv_colorwheel_event+0x1ca>
                hsv_cur.h = angle;
 801025a:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 801025e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010260:	4620      	mov	r0, r4
 8010262:	f013 faca 	bl	80237fa <lv_colorwheel_set_hsv>
 8010266:	2800      	cmp	r0, #0
 8010268:	f43f af58 	beq.w	801011c <lv_colorwheel_event+0x88>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801026c:	2200      	movs	r2, #0
 801026e:	211c      	movs	r1, #28
 8010270:	4620      	mov	r0, r4
 8010272:	f7f4 fa33 	bl	80046dc <lv_event_send>
            if(res != LV_RES_OK) return;
 8010276:	e751      	b.n	801011c <lv_colorwheel_event+0x88>
 8010278:	3f0d      	subs	r7, #13
 801027a:	2f08      	cmp	r7, #8
 801027c:	f63f af4e 	bhi.w	801011c <lv_colorwheel_event+0x88>
 8010280:	a301      	add	r3, pc, #4	; (adr r3, 8010288 <lv_colorwheel_event+0x1f4>)
 8010282:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8010286:	bf00      	nop
 8010288:	080102f7 	.word	0x080102f7
 801028c:	0801011d 	.word	0x0801011d
 8010290:	0801011d 	.word	0x0801011d
 8010294:	0801011d 	.word	0x0801011d
 8010298:	080104b7 	.word	0x080104b7
 801029c:	080107ed 	.word	0x080107ed
 80102a0:	0801011d 	.word	0x0801011d
 80102a4:	0801011d 	.word	0x0801011d
 80102a8:	080104d1 	.word	0x080104d1
 80102ac:	2f29      	cmp	r7, #41	; 0x29
 80102ae:	d007      	beq.n	80102c0 <lv_colorwheel_event+0x22c>
 80102b0:	2f2a      	cmp	r7, #42	; 0x2a
 80102b2:	f47f af33 	bne.w	801011c <lv_colorwheel_event+0x88>
}
 80102b6:	b027      	add	sp, #156	; 0x9c
 80102b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        refr_knob_pos(obj);
 80102bc:	f013 ba4f 	b.w	802375e <refr_knob_pos>
        void * param = lv_event_get_param(e);
 80102c0:	4628      	mov	r0, r5
 80102c2:	f00a ff9e 	bl	801b202 <lv_event_get_param>
 80102c6:	4605      	mov	r5, r0
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 80102c8:	4620      	mov	r0, r4
 80102ca:	f00c fab3 	bl	801c834 <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80102ce:	88ab      	ldrh	r3, [r5, #4]
 80102d0:	882a      	ldrh	r2, [r5, #0]
 80102d2:	3301      	adds	r3, #1
 80102d4:	1a9b      	subs	r3, r3, r2
 80102d6:	b21b      	sxth	r3, r3
 80102d8:	4298      	cmp	r0, r3
 80102da:	d001      	beq.n	80102e0 <lv_colorwheel_event+0x24c>
            refr_knob_pos(obj);
 80102dc:	4620      	mov	r0, r4
 80102de:	e7ea      	b.n	80102b6 <lv_colorwheel_event+0x222>
           lv_obj_get_height(obj) != lv_area_get_height(param)) {
 80102e0:	4620      	mov	r0, r4
 80102e2:	f00c faad 	bl	801c840 <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80102e6:	88eb      	ldrh	r3, [r5, #6]
 80102e8:	886a      	ldrh	r2, [r5, #2]
 80102ea:	3301      	adds	r3, #1
 80102ec:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 80102ee:	b21b      	sxth	r3, r3
 80102f0:	4298      	cmp	r0, r3
 80102f2:	d1f3      	bne.n	80102dc <lv_colorwheel_event+0x248>
 80102f4:	e712      	b.n	801011c <lv_colorwheel_event+0x88>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 80102f6:	4628      	mov	r0, r5
 80102f8:	f00a ff83 	bl	801b202 <lv_event_get_param>
 80102fc:	6803      	ldr	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80102fe:	f023 0202 	bic.w	r2, r3, #2
 8010302:	2a11      	cmp	r2, #17
 8010304:	d139      	bne.n	801037a <lv_colorwheel_event+0x2e6>
            hsv_cur = colorwheel->hsv;
 8010306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010308:	9318      	str	r3, [sp, #96]	; 0x60
            switch(colorwheel->mode) {
 801030a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801030e:	f003 0303 	and.w	r3, r3, #3
 8010312:	2b01      	cmp	r3, #1
 8010314:	d01b      	beq.n	801034e <lv_colorwheel_event+0x2ba>
 8010316:	2b02      	cmp	r3, #2
 8010318:	d024      	beq.n	8010364 <lv_colorwheel_event+0x2d0>
 801031a:	b94b      	cbnz	r3, 8010330 <lv_colorwheel_event+0x29c>
                    hsv_cur.h = (colorwheel->hsv.h + 1) % 360;
 801031c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801031e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010322:	3301      	adds	r3, #1
 8010324:	fbb3 f1f2 	udiv	r1, r3, r2
 8010328:	fb02 3311 	mls	r3, r2, r1, r3
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 801032c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 8010330:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010332:	4620      	mov	r0, r4
 8010334:	f013 fa61 	bl	80237fa <lv_colorwheel_set_hsv>
 8010338:	2800      	cmp	r0, #0
 801033a:	f43f aeef 	beq.w	801011c <lv_colorwheel_event+0x88>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801033e:	2200      	movs	r2, #0
 8010340:	211c      	movs	r1, #28
 8010342:	4620      	mov	r0, r4
}
 8010344:	b027      	add	sp, #156	; 0x9c
 8010346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801034a:	f7f4 b9c7 	b.w	80046dc <lv_event_send>
                    hsv_cur.s = (colorwheel->hsv.s + 1) % 100;
 801034e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8010352:	2264      	movs	r2, #100	; 0x64
 8010354:	3301      	adds	r3, #1
 8010356:	fbb3 f1f2 	udiv	r1, r3, r2
 801035a:	fb02 3311 	mls	r3, r2, r1, r3
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 801035e:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                    break;
 8010362:	e7e5      	b.n	8010330 <lv_colorwheel_event+0x29c>
                    hsv_cur.v = (colorwheel->hsv.v + 1) % 100;
 8010364:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8010368:	2264      	movs	r2, #100	; 0x64
 801036a:	3301      	adds	r3, #1
 801036c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010370:	fb02 3311 	mls	r3, r2, r1, r3
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 8010374:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
                    break;
 8010378:	e7da      	b.n	8010330 <lv_colorwheel_event+0x29c>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801037a:	2b14      	cmp	r3, #20
 801037c:	d002      	beq.n	8010384 <lv_colorwheel_event+0x2f0>
 801037e:	2b12      	cmp	r3, #18
 8010380:	f47f aecc 	bne.w	801011c <lv_colorwheel_event+0x88>
            hsv_cur = colorwheel->hsv;
 8010384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010386:	9318      	str	r3, [sp, #96]	; 0x60
            switch(colorwheel->mode) {
 8010388:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801038c:	f003 0303 	and.w	r3, r3, #3
 8010390:	2b01      	cmp	r3, #1
 8010392:	d00d      	beq.n	80103b0 <lv_colorwheel_event+0x31c>
 8010394:	2b02      	cmp	r3, #2
 8010396:	d013      	beq.n	80103c0 <lv_colorwheel_event+0x32c>
 8010398:	2b00      	cmp	r3, #0
 801039a:	d1c9      	bne.n	8010330 <lv_colorwheel_event+0x29c>
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 801039c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801039e:	b113      	cbz	r3, 80103a6 <lv_colorwheel_event+0x312>
 80103a0:	3b01      	subs	r3, #1
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	e7c2      	b.n	801032c <lv_colorwheel_event+0x298>
 80103a6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80103aa:	e7bf      	b.n	801032c <lv_colorwheel_event+0x298>
 80103ac:	08028e9c 	.word	0x08028e9c
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 80103b0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80103b4:	b113      	cbz	r3, 80103bc <lv_colorwheel_event+0x328>
 80103b6:	3b01      	subs	r3, #1
 80103b8:	b2db      	uxtb	r3, r3
 80103ba:	e7d0      	b.n	801035e <lv_colorwheel_event+0x2ca>
 80103bc:	2364      	movs	r3, #100	; 0x64
 80103be:	e7ce      	b.n	801035e <lv_colorwheel_event+0x2ca>
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 80103c0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80103c4:	b113      	cbz	r3, 80103cc <lv_colorwheel_event+0x338>
 80103c6:	3b01      	subs	r3, #1
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	e7d3      	b.n	8010374 <lv_colorwheel_event+0x2e0>
 80103cc:	2364      	movs	r3, #100	; 0x64
 80103ce:	e7d1      	b.n	8010374 <lv_colorwheel_event+0x2e0>
        colorwheel->last_change_time = lv_tick_get();
 80103d0:	f013 fe87 	bl	80240e2 <lv_tick_get>
 80103d4:	6360      	str	r0, [r4, #52]	; 0x34
        lv_indev_get_point(lv_indev_get_act(), &colorwheel->last_press_point);
 80103d6:	f7f4 f9e7 	bl	80047a8 <lv_indev_get_act>
 80103da:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80103de:	f00b f8dd 	bl	801b59c <lv_indev_get_point>
}

static lv_res_t double_click_reset(lv_obj_t * obj)
{
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;
    lv_indev_t * indev = lv_indev_get_act();
 80103e2:	f7f4 f9e1 	bl	80047a8 <lv_indev_get_act>
 80103e6:	4605      	mov	r5, r0
    /*Double clicked? Use long press time as double click time out*/
    if(lv_tick_elaps(colorwheel->last_click_time) < indev->driver->long_press_time) {
 80103e8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80103ea:	f013 fe82 	bl	80240f2 <lv_tick_elaps>
 80103ee:	682b      	ldr	r3, [r5, #0]
 80103f0:	8b9b      	ldrh	r3, [r3, #28]
 80103f2:	4298      	cmp	r0, r3
 80103f4:	d21c      	bcs.n	8010430 <lv_colorwheel_event+0x39c>
        lv_color_hsv_t hsv_cur;
        hsv_cur = colorwheel->hsv;
 80103f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103f8:	9318      	str	r3, [sp, #96]	; 0x60

        switch(colorwheel->mode) {
 80103fa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80103fe:	f003 0303 	and.w	r3, r3, #3
 8010402:	2b01      	cmp	r3, #1
 8010404:	d018      	beq.n	8010438 <lv_colorwheel_event+0x3a4>
 8010406:	2b02      	cmp	r3, #2
 8010408:	d01a      	beq.n	8010440 <lv_colorwheel_event+0x3ac>
 801040a:	b90b      	cbnz	r3, 8010410 <lv_colorwheel_event+0x37c>
            case LV_COLORWHEEL_MODE_HUE:
                hsv_cur.h = 0;
 801040c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            case LV_COLORWHEEL_MODE_VALUE:
                hsv_cur.v = 100;
                break;
        }

        lv_indev_wait_release(indev);
 8010410:	4628      	mov	r0, r5
 8010412:	f00b f903 	bl	801b61c <lv_indev_wait_release>

        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 8010416:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010418:	4620      	mov	r0, r4
 801041a:	f013 f9ee 	bl	80237fa <lv_colorwheel_set_hsv>
 801041e:	b138      	cbz	r0, 8010430 <lv_colorwheel_event+0x39c>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8010420:	2200      	movs	r2, #0
 8010422:	211c      	movs	r1, #28
 8010424:	4620      	mov	r0, r4
 8010426:	f7f4 f959 	bl	80046dc <lv_event_send>
            if(res != LV_RES_OK) return res;
 801042a:	2801      	cmp	r0, #1
 801042c:	f47f ae76 	bne.w	801011c <lv_colorwheel_event+0x88>
        }
    }
    colorwheel->last_click_time = lv_tick_get();
 8010430:	f013 fe57 	bl	80240e2 <lv_tick_get>
 8010434:	6320      	str	r0, [r4, #48]	; 0x30

    return LV_RES_OK;
 8010436:	e671      	b.n	801011c <lv_colorwheel_event+0x88>
                hsv_cur.s = 100;
 8010438:	2364      	movs	r3, #100	; 0x64
 801043a:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                break;
 801043e:	e7e7      	b.n	8010410 <lv_colorwheel_event+0x37c>
                hsv_cur.v = 100;
 8010440:	2364      	movs	r3, #100	; 0x64
 8010442:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
                break;
 8010446:	e7e3      	b.n	8010410 <lv_colorwheel_event+0x37c>
            lv_indev_get_point(indev, &p);
 8010448:	a912      	add	r1, sp, #72	; 0x48
 801044a:	4630      	mov	r0, r6
 801044c:	f00b f8a6 	bl	801b59c <lv_indev_get_point>
 8010450:	e692      	b.n	8010178 <lv_colorwheel_event+0xe4>
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 8010452:	f013 fe4e 	bl	80240f2 <lv_tick_elaps>
        if(!on_ring && diff > indev->driver->long_press_time && !colorwheel->mode_fixed) {
 8010456:	6833      	ldr	r3, [r6, #0]
 8010458:	8b9b      	ldrh	r3, [r3, #28]
 801045a:	4283      	cmp	r3, r0
 801045c:	f4bf ae5e 	bcs.w	801011c <lv_colorwheel_event+0x88>
 8010460:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010464:	075a      	lsls	r2, r3, #29
 8010466:	f53f ae59 	bmi.w	801011c <lv_colorwheel_event+0x88>
    colorwheel->mode = (colorwheel->mode + 1) % 3;
 801046a:	f003 0203 	and.w	r2, r3, #3
 801046e:	2103      	movs	r1, #3
    refr_knob_pos(obj);
 8010470:	4620      	mov	r0, r4
    colorwheel->mode = (colorwheel->mode + 1) % 3;
 8010472:	3201      	adds	r2, #1
 8010474:	fbb2 f1f1 	udiv	r1, r2, r1
 8010478:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801047c:	1a52      	subs	r2, r2, r1
 801047e:	f362 0301 	bfi	r3, r2, #0, #2
 8010482:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    refr_knob_pos(obj);
 8010486:	f013 f96a 	bl	802375e <refr_knob_pos>
    lv_obj_invalidate(obj);
 801048a:	4620      	mov	r0, r4
 801048c:	f00c fbd2 	bl	801cc34 <lv_obj_invalidate>
            lv_indev_wait_release(lv_indev_get_act());
 8010490:	f7f4 f98a 	bl	80047a8 <lv_indev_get_act>
 8010494:	f00b f8c2 	bl	801b61c <lv_indev_wait_release>
            return;
 8010498:	e640      	b.n	801011c <lv_colorwheel_event+0x88>
                hsv_cur.s = (angle * 100) / 360;
 801049a:	2364      	movs	r3, #100	; 0x64
 801049c:	4358      	muls	r0, r3
 801049e:	fbb0 f0f2 	udiv	r0, r0, r2
 80104a2:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
                break;
 80104a6:	e6da      	b.n	801025e <lv_colorwheel_event+0x1ca>
                hsv_cur.v = (angle * 100) / 360;
 80104a8:	2364      	movs	r3, #100	; 0x64
 80104aa:	4358      	muls	r0, r3
 80104ac:	fbb0 f0f2 	udiv	r0, r0, r2
 80104b0:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
                break;
 80104b4:	e6d3      	b.n	801025e <lv_colorwheel_event+0x1ca>
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 80104b6:	4628      	mov	r0, r5
 80104b8:	f00a fea3 	bl	801b202 <lv_event_get_param>
 80104bc:	4605      	mov	r5, r0
        info->res = _lv_area_is_point_on(&obj->coords, info->point, LV_RADIUS_CIRCLE);
 80104be:	6801      	ldr	r1, [r0, #0]
 80104c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80104c4:	f104 0014 	add.w	r0, r4, #20
 80104c8:	f013 ff20 	bl	802430c <_lv_area_is_point_on>
 80104cc:	7128      	strb	r0, [r5, #4]
 80104ce:	e625      	b.n	801011c <lv_colorwheel_event+0x88>
    lv_obj_t * obj = lv_event_get_target(e);
 80104d0:	4628      	mov	r0, r5
    uint32_t a = 0;
 80104d2:	f04f 0800 	mov.w	r8, #0
    lv_obj_t * obj = lv_event_get_target(e);
 80104d6:	f00a fe8c 	bl	801b1f2 <lv_event_get_target>
 80104da:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80104dc:	4628      	mov	r0, r5
    static uint16_t h = 0;
    static uint8_t s = 0, v = 0, m = 255;
    static uint16_t angle_saved = 0xffff;

    /*If the angle is different recalculate scaling*/
    if(angle_saved != angle) m = 255;
 80104de:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8010800 <lv_colorwheel_event+0x76c>
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80104e2:	f00a fedf 	bl	801b2a4 <lv_event_get_draw_ctx>
 80104e6:	9004      	str	r0, [sp, #16]
    lv_coord_t w = lv_obj_get_width(obj);
 80104e8:	4620      	mov	r0, r4
 80104ea:	f00c f9a3 	bl	801c834 <lv_obj_get_width>
 80104ee:	4606      	mov	r6, r0
    lv_coord_t h = lv_obj_get_height(obj);
 80104f0:	4620      	mov	r0, r4
    lv_coord_t cx = obj->coords.x1 + w / 2;
 80104f2:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    lv_coord_t h = lv_obj_get_height(obj);
 80104f6:	f00c f9a3 	bl	801c840 <lv_obj_get_height>
    lv_coord_t cx = obj->coords.x1 + w / 2;
 80104fa:	8aa3      	ldrh	r3, [r4, #20]
 80104fc:	f346 064f 	sbfx	r6, r6, #1, #16
    lv_coord_t cy = obj->coords.y1 + h / 2;
 8010500:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    lv_coord_t cx = obj->coords.x1 + w / 2;
 8010504:	4433      	add	r3, r6
 8010506:	b29b      	uxth	r3, r3
 8010508:	9302      	str	r3, [sp, #8]
    lv_coord_t cy = obj->coords.y1 + h / 2;
 801050a:	8ae3      	ldrh	r3, [r4, #22]
 801050c:	eb03 0360 	add.w	r3, r3, r0, asr #1
    lv_draw_line_dsc_init(&line_dsc);
 8010510:	a80f      	add	r0, sp, #60	; 0x3c
    lv_coord_t cy = obj->coords.y1 + h / 2;
 8010512:	fa1f fb83 	uxth.w	fp, r3
    lv_draw_line_dsc_init(&line_dsc);
 8010516:	f00e fa16 	bl	801e946 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 801051a:	aa0f      	add	r2, sp, #60	; 0x3c
 801051c:	2100      	movs	r1, #0
 801051e:	4620      	mov	r0, r4
 8010520:	f00b fea2 	bl	801c268 <lv_obj_init_draw_line_dsc>
    line_dsc.width = (r * 628 / (256 / LV_CPICKER_DEF_QF)) / 100;
 8010524:	f44f 731d 	mov.w	r3, #628	; 0x274
 8010528:	f242 1234 	movw	r2, #8500	; 0x2134
 801052c:	2100      	movs	r1, #0
 801052e:	fb16 f303 	smulbb	r3, r6, r3
 8010532:	4620      	mov	r0, r4
 8010534:	fb93 f3f2 	sdiv	r3, r3, r2
    line_dsc.width += 2;
 8010538:	3302      	adds	r3, #2
 801053a:	2250      	movs	r2, #80	; 0x50
 801053c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010540:	f00d fa9e 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8010544:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8010546:	4607      	mov	r7, r0
    lv_draw_mask_radius_init(&mask_out_param, &obj->coords, LV_RADIUS_CIRCLE, false);
 8010548:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801054c:	f104 0114 	add.w	r1, r4, #20
 8010550:	a812      	add	r0, sp, #72	; 0x48
    return (lv_coord_t)v.num;
 8010552:	9307      	str	r3, [sp, #28]
 8010554:	2300      	movs	r3, #0
 8010556:	f7f7 ffeb 	bl	8008530 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
 801055a:	2100      	movs	r1, #0
 801055c:	a812      	add	r0, sp, #72	; 0x48
 801055e:	f7f7 fe6f 	bl	8008240 <lv_draw_mask_add>
    dest->y1 = src->y1;
 8010562:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    mask_area.x1 += cir_w;
 8010566:	b2ba      	uxth	r2, r7
    dest->y2 = src->y2;
 8010568:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
 801056c:	9005      	str	r0, [sp, #20]
    dest->x2 = src->x2;
 801056e:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
    mask_area.y1 += cir_w;
 8010572:	4411      	add	r1, r2
    mask_area.x1 += cir_w;
 8010574:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    mask_area.y2 -= cir_w;
 8010578:	1a9b      	subs	r3, r3, r2
    mask_area.x2 -= cir_w;
 801057a:	1a80      	subs	r0, r0, r2
    mask_area.y1 += cir_w;
 801057c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    mask_area.x1 += cir_w;
 8010580:	fa1c f787 	uxtah	r7, ip, r7
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8010584:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010588:	a90b      	add	r1, sp, #44	; 0x2c
    mask_area.x2 -= cir_w;
 801058a:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    mask_area.y2 -= cir_w;
 801058e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8010592:	a818      	add	r0, sp, #96	; 0x60
 8010594:	2301      	movs	r3, #1
    mask_area.x1 += cir_w;
 8010596:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 801059a:	f7f7 ffc9 	bl	8008530 <lv_draw_mask_radius_init>
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 801059e:	2100      	movs	r1, #0
 80105a0:	a818      	add	r0, sp, #96	; 0x60
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 80105a2:	4647      	mov	r7, r8
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 80105a4:	f7f7 fe4c 	bl	8008240 <lv_draw_mask_add>
    lv_coord_t cir_w_extra = line_dsc.width;
 80105a8:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 80105ac:	9006      	str	r0, [sp, #24]
    lv_coord_t cir_w_extra = line_dsc.width;
 80105ae:	9303      	str	r3, [sp, #12]
    uint8_t r = 0, g = 0, b = 0;
 80105b0:	2300      	movs	r3, #0
 80105b2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80105b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105ba:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    if(angle_saved != angle) m = 255;
 80105be:	4b91      	ldr	r3, [pc, #580]	; (8010804 <lv_colorwheel_event+0x770>)
 80105c0:	881b      	ldrh	r3, [r3, #0]
 80105c2:	42bb      	cmp	r3, r7
 80105c4:	bf1c      	itt	ne
 80105c6:	23ff      	movne	r3, #255	; 0xff
 80105c8:	f889 3000 	strbne.w	r3, [r9]
    angle_saved = angle;
 80105cc:	4b8d      	ldr	r3, [pc, #564]	; (8010804 <lv_colorwheel_event+0x770>)

    switch(ext->mode) {
        default:
        case LV_COLORWHEEL_MODE_HUE:
            /*Don't recompute costly scaling if it does not change*/
            if(m != ext->mode) {
 80105ce:	f899 1000 	ldrb.w	r1, [r9]
    angle_saved = angle;
 80105d2:	801f      	strh	r7, [r3, #0]
    switch(ext->mode) {
 80105d4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80105d8:	f3c3 0201 	ubfx	r2, r3, #0, #2
 80105dc:	f003 0303 	and.w	r3, r3, #3
 80105e0:	2b01      	cmp	r3, #1
 80105e2:	f000 80b9 	beq.w	8010758 <lv_colorwheel_event+0x6c4>
 80105e6:	2b02      	cmp	r3, #2
 80105e8:	f000 80dc 	beq.w	80107a4 <lv_colorwheel_event+0x710>
            if(m != ext->mode) {
 80105ec:	428b      	cmp	r3, r1
 80105ee:	d016      	beq.n	801061e <lv_colorwheel_event+0x58a>
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 80105f0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80105f4:	2114      	movs	r1, #20
 80105f6:	4884      	ldr	r0, [pc, #528]	; (8010808 <lv_colorwheel_event+0x774>)
 80105f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
                v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
                m = ext->mode;
 80105fc:	f889 2000 	strb.w	r2, [r9]
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 8010600:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8010604:	fbb3 f3f1 	udiv	r3, r3, r1
 8010608:	7003      	strb	r3, [r0, #0]
                v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 801060a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801060e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010612:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8010616:	fbb3 f3f1 	udiv	r3, r3, r1
 801061a:	497c      	ldr	r1, [pc, #496]	; (801080c <lv_colorwheel_event+0x778>)
 801061c:	700b      	strb	r3, [r1, #0]
            }
            fast_hsv2rgb(angle * 6, s, v, &r, &g,
 801061e:	ab0d      	add	r3, sp, #52	; 0x34
 8010620:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 8010624:	4a79      	ldr	r2, [pc, #484]	; (801080c <lv_colorwheel_event+0x778>)
 8010626:	9301      	str	r3, [sp, #4]
 8010628:	0040      	lsls	r0, r0, #1
 801062a:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801062e:	4976      	ldr	r1, [pc, #472]	; (8010808 <lv_colorwheel_event+0x774>)
 8010630:	b280      	uxth	r0, r0
 8010632:	9300      	str	r3, [sp, #0]
 8010634:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8010638:	7812      	ldrb	r2, [r2, #0]
 801063a:	7809      	ldrb	r1, [r1, #0]
            if(m != ext->mode) {
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
                m = ext->mode;
            }
            fast_hsv2rgb(h, s, angle, &r, &g, &b);
 801063c:	f013 f80a 	bl	8023654 <fast_hsv2rgb.constprop.0>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8010640:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8010644:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 8010648:	3703      	adds	r7, #3
 801064a:	089b      	lsrs	r3, r3, #2
 801064c:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8010650:	b2bf      	uxth	r7, r7
        line_dsc.color = angle_to_mode_color_fast(obj, i);
 8010652:	015b      	lsls	r3, r3, #5
 8010654:	08d2      	lsrs	r2, r2, #3
 8010656:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801065a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 801065e:	f348 220f 	sbfx	r2, r8, #8, #16
        line_dsc.color = angle_to_mode_color_fast(obj, i);
 8010662:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        uint16_t angle_trigo = (uint16_t)(a >> 8); /*i * 360 / 256 is the scale to apply, but we can skip multiplication here*/
 8010666:	ea4f 2318 	mov.w	r3, r8, lsr #8
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 801066a:	4610      	mov	r0, r2
 801066c:	9209      	str	r2, [sp, #36]	; 0x24
        uint16_t angle_trigo = (uint16_t)(a >> 8); /*i * 360 / 256 is the scale to apply, but we can skip multiplication here*/
 801066e:	9308      	str	r3, [sp, #32]
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 8010670:	f508 6887 	add.w	r8, r8, #1080	; 0x438
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8010674:	9b03      	ldr	r3, [sp, #12]
 8010676:	eb06 0a03 	add.w	sl, r6, r3
 801067a:	f001 ffdf 	bl	801263c <lv_trigo_sin>
 801067e:	9b02      	ldr	r3, [sp, #8]
 8010680:	fb0a f000 	mul.w	r0, sl, r0
 8010684:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle);

static inline LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 8010688:	9b08      	ldr	r3, [sp, #32]
 801068a:	335a      	adds	r3, #90	; 0x5a
 801068c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8010690:	b21b      	sxth	r3, r3
 8010692:	4618      	mov	r0, r3
 8010694:	9308      	str	r3, [sp, #32]
 8010696:	f001 ffd1 	bl	801263c <lv_trigo_sin>
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 801069a:	9b07      	ldr	r3, [sp, #28]
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 801069c:	fb0a f000 	mul.w	r0, sl, r0
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 80106a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106a2:	eba6 0a03 	sub.w	sl, r6, r3
 80106a6:	9b03      	ldr	r3, [sp, #12]
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 80106a8:	eb0b 30e0 	add.w	r0, fp, r0, asr #15
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 80106ac:	ebaa 0a03 	sub.w	sl, sl, r3
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 80106b0:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 80106b4:	4610      	mov	r0, r2
 80106b6:	f001 ffc1 	bl	801263c <lv_trigo_sin>
 80106ba:	9b02      	ldr	r3, [sp, #8]
 80106bc:	fb0a f000 	mul.w	r0, sl, r0
 80106c0:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 80106c4:	9b08      	ldr	r3, [sp, #32]
 80106c6:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 80106ca:	4618      	mov	r0, r3
 80106cc:	f001 ffb6 	bl	801263c <lv_trigo_sin>
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 80106d0:	fb0a f000 	mul.w	r0, sl, r0
        lv_draw_line(draw_ctx, &line_dsc, &p[0], &p[1]);
 80106d4:	ab0e      	add	r3, sp, #56	; 0x38
 80106d6:	aa0d      	add	r2, sp, #52	; 0x34
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 80106d8:	eb0b 30e0 	add.w	r0, fp, r0, asr #15
        lv_draw_line(draw_ctx, &line_dsc, &p[0], &p[1]);
 80106dc:	a90f      	add	r1, sp, #60	; 0x3c
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 80106de:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
        lv_draw_line(draw_ctx, &line_dsc, &p[0], &p[1]);
 80106e2:	9804      	ldr	r0, [sp, #16]
 80106e4:	f00e f93c 	bl	801e960 <lv_draw_line>
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 80106e8:	4b49      	ldr	r3, [pc, #292]	; (8010810 <lv_colorwheel_event+0x77c>)
 80106ea:	4598      	cmp	r8, r3
 80106ec:	f47f af60 	bne.w	80105b0 <lv_colorwheel_event+0x51c>
    lv_draw_mask_free_param(&mask_out_param);
 80106f0:	a812      	add	r0, sp, #72	; 0x48
 80106f2:	f00e fe17 	bl	801f324 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_in_param);
 80106f6:	a818      	add	r0, sp, #96	; 0x60
 80106f8:	f00e fe14 	bl	801f324 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_out_id);
 80106fc:	9805      	ldr	r0, [sp, #20]
 80106fe:	f7f7 fdd5 	bl	80082ac <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_in_id);
 8010702:	9806      	ldr	r0, [sp, #24]
 8010704:	f7f7 fdd2 	bl	80082ac <lv_draw_mask_remove_id>
    lv_obj_t * obj = lv_event_get_target(e);
 8010708:	4628      	mov	r0, r5
 801070a:	f00a fd72 	bl	801b1f2 <lv_event_get_target>
 801070e:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010710:	4628      	mov	r0, r5
 8010712:	f00a fdc7 	bl	801b2a4 <lv_event_get_draw_ctx>
 8010716:	4605      	mov	r5, r0
    lv_draw_rect_dsc_init(&cir_dsc);
 8010718:	a818      	add	r0, sp, #96	; 0x60
 801071a:	f7f8 f90f 	bl	800893c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &cir_dsc);
 801071e:	aa18      	add	r2, sp, #96	; 0x60
 8010720:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8010724:	4620      	mov	r0, r4
 8010726:	f00b fbb3 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    cir_dsc.radius = LV_RADIUS_CIRCLE;
 801072a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801072e:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    if(colorwheel->knob.recolor) {
 8010732:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010736:	07db      	lsls	r3, r3, #31
 8010738:	d504      	bpl.n	8010744 <lv_colorwheel_event+0x6b0>
        cir_dsc.bg_color = lv_colorwheel_get_rgb(obj);
 801073a:	4620      	mov	r0, r4
 801073c:	f013 f894 	bl	8023868 <lv_colorwheel_get_rgb>
 8010740:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
    lv_area_t knob_area = get_knob_area(obj);
 8010744:	4621      	mov	r1, r4
 8010746:	a812      	add	r0, sp, #72	; 0x48
 8010748:	f012 ffc6 	bl	80236d8 <get_knob_area>
    lv_draw_rect(draw_ctx, &cir_dsc, &knob_area);
 801074c:	aa12      	add	r2, sp, #72	; 0x48
 801074e:	a918      	add	r1, sp, #96	; 0x60
 8010750:	4628      	mov	r0, r5
 8010752:	f00e fe28 	bl	801f3a6 <lv_draw_rect>
}
 8010756:	e4e1      	b.n	801011c <lv_colorwheel_event+0x88>
            if(m != ext->mode) {
 8010758:	2901      	cmp	r1, #1
 801075a:	d016      	beq.n	801078a <lv_colorwheel_event+0x6f6>
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 801075c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010760:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
                m = ext->mode;
 8010762:	f889 2000 	strb.w	r2, [r9]
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 8010766:	434b      	muls	r3, r1
 8010768:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801076c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010770:	4928      	ldr	r1, [pc, #160]	; (8010814 <lv_colorwheel_event+0x780>)
 8010772:	800b      	strh	r3, [r1, #0]
                v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8010774:	2114      	movs	r1, #20
 8010776:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801077a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801077e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8010782:	fbb3 f3f1 	udiv	r3, r3, r1
 8010786:	4921      	ldr	r1, [pc, #132]	; (801080c <lv_colorwheel_event+0x778>)
 8010788:	700b      	strb	r3, [r1, #0]
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 801078a:	ab0d      	add	r3, sp, #52	; 0x34
 801078c:	4a1f      	ldr	r2, [pc, #124]	; (801080c <lv_colorwheel_event+0x778>)
 801078e:	b2f9      	uxtb	r1, r7
 8010790:	9301      	str	r3, [sp, #4]
 8010792:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8010796:	9300      	str	r3, [sp, #0]
 8010798:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801079c:	7812      	ldrb	r2, [r2, #0]
            fast_hsv2rgb(h, s, angle, &r, &g, &b);
 801079e:	481d      	ldr	r0, [pc, #116]	; (8010814 <lv_colorwheel_event+0x780>)
 80107a0:	8800      	ldrh	r0, [r0, #0]
 80107a2:	e74b      	b.n	801063c <lv_colorwheel_event+0x5a8>
            if(m != ext->mode) {
 80107a4:	2902      	cmp	r1, #2
 80107a6:	d016      	beq.n	80107d6 <lv_colorwheel_event+0x742>
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 80107a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80107ac:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
                m = ext->mode;
 80107ae:	f889 2000 	strb.w	r2, [r9]
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 80107b2:	434b      	muls	r3, r1
 80107b4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80107b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80107bc:	4915      	ldr	r1, [pc, #84]	; (8010814 <lv_colorwheel_event+0x780>)
 80107be:	800b      	strh	r3, [r1, #0]
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 80107c0:	2114      	movs	r1, #20
 80107c2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80107c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80107ca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80107ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80107d2:	490d      	ldr	r1, [pc, #52]	; (8010808 <lv_colorwheel_event+0x774>)
 80107d4:	700b      	strb	r3, [r1, #0]
            fast_hsv2rgb(h, s, angle, &r, &g, &b);
 80107d6:	ab0d      	add	r3, sp, #52	; 0x34
 80107d8:	490b      	ldr	r1, [pc, #44]	; (8010808 <lv_colorwheel_event+0x774>)
 80107da:	b2fa      	uxtb	r2, r7
 80107dc:	9301      	str	r3, [sp, #4]
 80107de:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 80107e2:	9300      	str	r3, [sp, #0]
 80107e4:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 80107e8:	7809      	ldrb	r1, [r1, #0]
 80107ea:	e7d8      	b.n	801079e <lv_colorwheel_event+0x70a>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 80107ec:	4628      	mov	r0, r5
 80107ee:	f00a fd08 	bl	801b202 <lv_event_get_param>
        if(info->res != LV_COVER_RES_MASKED) info->res = LV_COVER_RES_NOT_COVER;
 80107f2:	7803      	ldrb	r3, [r0, #0]
 80107f4:	2b02      	cmp	r3, #2
 80107f6:	bf1c      	itt	ne
 80107f8:	2301      	movne	r3, #1
 80107fa:	7003      	strbne	r3, [r0, #0]
 80107fc:	e48e      	b.n	801011c <lv_colorwheel_event+0x88>
 80107fe:	bf00      	nop
 8010800:	24000155 	.word	0x24000155
 8010804:	24000150 	.word	0x24000150
 8010808:	24010e33 	.word	0x24010e33
 801080c:	24010e32 	.word	0x24010e32
 8010810:	00016ad0 	.word	0x00016ad0
 8010814:	24010d1e 	.word	0x24010d1e

08010818 <lv_keyboard_update_ctrl_map>:
/**
 * Update the control map for the current mode
 * @param obj pointer to a keyboard object
 */
static void lv_keyboard_update_ctrl_map(lv_obj_t * obj)
{
 8010818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_keyboard_t * keyboard = (lv_keyboard_t *)obj;

    if(keyboard->popovers) {
 801081a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 801081e:	4604      	mov	r4, r0
 8010820:	4f17      	ldr	r7, [pc, #92]	; (8010880 <lv_keyboard_update_ctrl_map+0x68>)
    if(keyboard->popovers) {
 8010822:	f013 0501 	ands.w	r5, r3, #1
 8010826:	d007      	beq.n	8010838 <lv_keyboard_update_ctrl_map+0x20>
        /*Apply the current control map (already includes LV_BTNMATRIX_CTRL_POPOVER flags)*/
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[keyboard->mode]);
 8010828:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801082c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]

        /*Apply new control map and clean up*/
        lv_btnmatrix_set_ctrl_map(obj, ctrl_map);
        lv_mem_free(ctrl_map);
    }
}
 8010830:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[keyboard->mode]);
 8010834:	f015 bdc1 	b.w	80263ba <lv_btnmatrix_set_ctrl_map>
        lv_btnmatrix_ctrl_t * ctrl_map = lv_mem_alloc(btnm->btn_cnt * sizeof(lv_btnmatrix_ctrl_t));
 8010838:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 801083a:	0040      	lsls	r0, r0, #1
 801083c:	f001 ff38 	bl	80126b0 <lv_mem_alloc>
        lv_memcpy(ctrl_map, kb_ctrl[keyboard->mode], sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 8010840:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010844:	8e22      	ldrh	r2, [r4, #48]	; 0x30
        lv_btnmatrix_ctrl_t * ctrl_map = lv_mem_alloc(btnm->btn_cnt * sizeof(lv_btnmatrix_ctrl_t));
 8010846:	4606      	mov	r6, r0
 8010848:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 801084c:	0052      	lsls	r2, r2, #1
 801084e:	f009 ff5c 	bl	801a70a <memcpy>
 8010852:	462b      	mov	r3, r5
        for(uint16_t i = 0; i < btnm->btn_cnt; i++) {
 8010854:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8010856:	b29a      	uxth	r2, r3
 8010858:	4291      	cmp	r1, r2
 801085a:	d808      	bhi.n	801086e <lv_keyboard_update_ctrl_map+0x56>
        lv_btnmatrix_set_ctrl_map(obj, ctrl_map);
 801085c:	4620      	mov	r0, r4
 801085e:	4631      	mov	r1, r6
 8010860:	f015 fdab 	bl	80263ba <lv_btnmatrix_set_ctrl_map>
        lv_mem_free(ctrl_map);
 8010864:	4630      	mov	r0, r6
}
 8010866:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_mem_free(ctrl_map);
 801086a:	f001 bf3f 	b.w	80126ec <lv_mem_free>
            ctrl_map[i] &= (~LV_BTNMATRIX_CTRL_POPOVER);
 801086e:	b299      	uxth	r1, r3
 8010870:	3301      	adds	r3, #1
 8010872:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 8010876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801087a:	f826 2011 	strh.w	r2, [r6, r1, lsl #1]
        for(uint16_t i = 0; i < btnm->btn_cnt; i++) {
 801087e:	e7e9      	b.n	8010854 <lv_keyboard_update_ctrl_map+0x3c>
 8010880:	240000a0 	.word	0x240000a0

08010884 <lv_keyboard_update_map>:
{
 8010884:	b510      	push	{r4, lr}
    lv_btnmatrix_set_map(obj, kb_map[keyboard->mode]);
 8010886:	4b06      	ldr	r3, [pc, #24]	; (80108a0 <lv_keyboard_update_map+0x1c>)
{
 8010888:	4604      	mov	r4, r0
    lv_btnmatrix_set_map(obj, kb_map[keyboard->mode]);
 801088a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 801088e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010892:	f015 fd8e 	bl	80263b2 <lv_btnmatrix_set_map>
    lv_keyboard_update_ctrl_map(obj);
 8010896:	4620      	mov	r0, r4
}
 8010898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_keyboard_update_ctrl_map(obj);
 801089c:	f7ff bfbc 	b.w	8010818 <lv_keyboard_update_ctrl_map>
 80108a0:	240000c4 	.word	0x240000c4

080108a4 <lv_keyboard_constructor>:
{
 80108a4:	b538      	push	{r3, r4, r5, lr}
 80108a6:	460c      	mov	r4, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 80108a8:	2104      	movs	r1, #4
    keyboard->ta         = NULL;
 80108aa:	2500      	movs	r5, #0
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 80108ac:	4620      	mov	r0, r4
 80108ae:	f00b f85e 	bl	801b96e <lv_obj_clear_flag>
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;
 80108b2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 80108b4:	462a      	mov	r2, r5
 80108b6:	4620      	mov	r0, r4
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;
 80108b8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 80108bc:	2105      	movs	r1, #5
    keyboard->ta         = NULL;
 80108be:	63a5      	str	r5, [r4, #56]	; 0x38
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;
 80108c0:	f023 0301 	bic.w	r3, r3, #1
 80108c4:	87a3      	strh	r3, [r4, #60]	; 0x3c
    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 80108c6:	462b      	mov	r3, r5
 80108c8:	f00b ff56 	bl	801c778 <lv_obj_align>
    lv_obj_add_event_cb(obj, lv_keyboard_def_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 80108cc:	462b      	mov	r3, r5
 80108ce:	221c      	movs	r2, #28
 80108d0:	4906      	ldr	r1, [pc, #24]	; (80108ec <lv_keyboard_constructor+0x48>)
 80108d2:	4620      	mov	r0, r4
 80108d4:	f00a fc99 	bl	801b20a <lv_obj_add_event_cb>
    lv_obj_set_style_base_dir(obj, LV_BASE_DIR_LTR, 0);
 80108d8:	4620      	mov	r0, r4
 80108da:	462a      	mov	r2, r5
 80108dc:	4629      	mov	r1, r5
 80108de:	f00d fc46 	bl	801e16e <lv_obj_set_style_base_dir>
    lv_keyboard_update_map(obj);
 80108e2:	4620      	mov	r0, r4
}
 80108e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_keyboard_update_map(obj);
 80108e8:	f7ff bfcc 	b.w	8010884 <lv_keyboard_update_map>
 80108ec:	080108f1 	.word	0x080108f1

080108f0 <lv_keyboard_def_event_cb>:
{
 80108f0:	b570      	push	{r4, r5, r6, lr}
    lv_obj_t * obj = lv_event_get_target(e);
 80108f2:	f00a fc7e 	bl	801b1f2 <lv_event_get_target>
 80108f6:	4604      	mov	r4, r0
    uint16_t btn_id   = lv_btnmatrix_get_selected_btn(obj);
 80108f8:	f015 fdda 	bl	80264b0 <lv_btnmatrix_get_selected_btn>
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
 80108fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010900:	4298      	cmp	r0, r3
 8010902:	f000 80d5 	beq.w	8010ab0 <lv_keyboard_def_event_cb+0x1c0>
    const char * txt = lv_btnmatrix_get_btn_text(obj, lv_btnmatrix_get_selected_btn(obj));
 8010906:	4620      	mov	r0, r4
 8010908:	f015 fdd2 	bl	80264b0 <lv_btnmatrix_get_selected_btn>
 801090c:	4601      	mov	r1, r0
 801090e:	4620      	mov	r0, r4
 8010910:	f003 fcda 	bl	80142c8 <lv_btnmatrix_get_btn_text>
    if(txt == NULL) return;
 8010914:	4605      	mov	r5, r0
 8010916:	2800      	cmp	r0, #0
 8010918:	f000 80ca 	beq.w	8010ab0 <lv_keyboard_def_event_cb+0x1c0>
    if(strcmp(txt, "abc") == 0) {
 801091c:	4965      	ldr	r1, [pc, #404]	; (8010ab4 <lv_keyboard_def_event_cb+0x1c4>)
 801091e:	f009 fee8 	bl	801a6f2 <strcmp>
 8010922:	b958      	cbnz	r0, 801093c <lv_keyboard_def_event_cb+0x4c>
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_LOWER]);
 8010924:	4b64      	ldr	r3, [pc, #400]	; (8010ab8 <lv_keyboard_def_event_cb+0x1c8>)
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_LOWER;
 8010926:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_LOWER]);
 801092a:	6819      	ldr	r1, [r3, #0]
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
 801092c:	4620      	mov	r0, r4
 801092e:	f015 fd40 	bl	80263b2 <lv_btnmatrix_set_map>
        lv_keyboard_update_ctrl_map(obj);
 8010932:	4620      	mov	r0, r4
}
 8010934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_keyboard_update_ctrl_map(obj);
 8010938:	f7ff bf6e 	b.w	8010818 <lv_keyboard_update_ctrl_map>
    else if(strcmp(txt, "ABC") == 0) {
 801093c:	495f      	ldr	r1, [pc, #380]	; (8010abc <lv_keyboard_def_event_cb+0x1cc>)
 801093e:	4628      	mov	r0, r5
 8010940:	f009 fed7 	bl	801a6f2 <strcmp>
 8010944:	b928      	cbnz	r0, 8010952 <lv_keyboard_def_event_cb+0x62>
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
 8010946:	2301      	movs	r3, #1
 8010948:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
 801094c:	4b5a      	ldr	r3, [pc, #360]	; (8010ab8 <lv_keyboard_def_event_cb+0x1c8>)
 801094e:	6859      	ldr	r1, [r3, #4]
 8010950:	e7ec      	b.n	801092c <lv_keyboard_def_event_cb+0x3c>
    else if(strcmp(txt, "1#") == 0) {
 8010952:	495b      	ldr	r1, [pc, #364]	; (8010ac0 <lv_keyboard_def_event_cb+0x1d0>)
 8010954:	4628      	mov	r0, r5
 8010956:	f009 fecc 	bl	801a6f2 <strcmp>
 801095a:	b928      	cbnz	r0, 8010968 <lv_keyboard_def_event_cb+0x78>
        keyboard->mode = LV_KEYBOARD_MODE_SPECIAL;
 801095c:	2302      	movs	r3, #2
 801095e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_SPECIAL]);
 8010962:	4b55      	ldr	r3, [pc, #340]	; (8010ab8 <lv_keyboard_def_event_cb+0x1c8>)
 8010964:	6899      	ldr	r1, [r3, #8]
 8010966:	e7e1      	b.n	801092c <lv_keyboard_def_event_cb+0x3c>
    else if(strcmp(txt, LV_SYMBOL_CLOSE) == 0 || strcmp(txt, LV_SYMBOL_KEYBOARD) == 0) {
 8010968:	4956      	ldr	r1, [pc, #344]	; (8010ac4 <lv_keyboard_def_event_cb+0x1d4>)
 801096a:	4628      	mov	r0, r5
 801096c:	f009 fec1 	bl	801a6f2 <strcmp>
 8010970:	b988      	cbnz	r0, 8010996 <lv_keyboard_def_event_cb+0xa6>
        lv_res_t res = lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 8010972:	2200      	movs	r2, #0
 8010974:	2120      	movs	r1, #32
 8010976:	4620      	mov	r0, r4
 8010978:	f7f3 feb0 	bl	80046dc <lv_event_send>
        if(res != LV_RES_OK) return;
 801097c:	2801      	cmp	r0, #1
 801097e:	f040 8097 	bne.w	8010ab0 <lv_keyboard_def_event_cb+0x1c0>
        if(keyboard->ta) {
 8010982:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010984:	2800      	cmp	r0, #0
 8010986:	f000 8093 	beq.w	8010ab0 <lv_keyboard_def_event_cb+0x1c0>
            res = lv_event_send(keyboard->ta, LV_EVENT_CANCEL, NULL);
 801098a:	2200      	movs	r2, #0
 801098c:	2120      	movs	r1, #32
}
 801098e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 8010992:	f7f3 bea3 	b.w	80046dc <lv_event_send>
    else if(strcmp(txt, LV_SYMBOL_CLOSE) == 0 || strcmp(txt, LV_SYMBOL_KEYBOARD) == 0) {
 8010996:	494c      	ldr	r1, [pc, #304]	; (8010ac8 <lv_keyboard_def_event_cb+0x1d8>)
 8010998:	4628      	mov	r0, r5
 801099a:	f009 feaa 	bl	801a6f2 <strcmp>
 801099e:	2800      	cmp	r0, #0
 80109a0:	d0e7      	beq.n	8010972 <lv_keyboard_def_event_cb+0x82>
    else if(strcmp(txt, LV_SYMBOL_OK) == 0) {
 80109a2:	494a      	ldr	r1, [pc, #296]	; (8010acc <lv_keyboard_def_event_cb+0x1dc>)
 80109a4:	4628      	mov	r0, r5
 80109a6:	f009 fea4 	bl	801a6f2 <strcmp>
 80109aa:	4602      	mov	r2, r0
 80109ac:	b958      	cbnz	r0, 80109c6 <lv_keyboard_def_event_cb+0xd6>
        lv_res_t res = lv_event_send(obj, LV_EVENT_READY, NULL);
 80109ae:	211f      	movs	r1, #31
 80109b0:	4620      	mov	r0, r4
 80109b2:	f7f3 fe93 	bl	80046dc <lv_event_send>
        if(res != LV_RES_OK) return;
 80109b6:	2801      	cmp	r0, #1
 80109b8:	d17a      	bne.n	8010ab0 <lv_keyboard_def_event_cb+0x1c0>
        if(keyboard->ta) {
 80109ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80109bc:	2800      	cmp	r0, #0
 80109be:	d077      	beq.n	8010ab0 <lv_keyboard_def_event_cb+0x1c0>
            res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 80109c0:	2200      	movs	r2, #0
 80109c2:	211f      	movs	r1, #31
 80109c4:	e7e3      	b.n	801098e <lv_keyboard_def_event_cb+0x9e>
    if(keyboard->ta == NULL) return;
 80109c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d071      	beq.n	8010ab0 <lv_keyboard_def_event_cb+0x1c0>
    if(strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0) {
 80109cc:	4940      	ldr	r1, [pc, #256]	; (8010ad0 <lv_keyboard_def_event_cb+0x1e0>)
 80109ce:	4628      	mov	r0, r5
 80109d0:	f009 fe8f 	bl	801a6f2 <strcmp>
 80109d4:	b960      	cbnz	r0, 80109f0 <lv_keyboard_def_event_cb+0x100>
        lv_textarea_add_char(keyboard->ta, '\n');
 80109d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80109d8:	210a      	movs	r1, #10
 80109da:	f007 fd87 	bl	80184ec <lv_textarea_add_char>
        if(lv_textarea_get_one_line(keyboard->ta)) {
 80109de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80109e0:	f017 f846 	bl	8027a70 <lv_textarea_get_one_line>
 80109e4:	2800      	cmp	r0, #0
 80109e6:	d063      	beq.n	8010ab0 <lv_keyboard_def_event_cb+0x1c0>
            lv_res_t res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 80109e8:	2200      	movs	r2, #0
 80109ea:	211f      	movs	r1, #31
 80109ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80109ee:	e7ce      	b.n	801098e <lv_keyboard_def_event_cb+0x9e>
    if(strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0) {
 80109f0:	4938      	ldr	r1, [pc, #224]	; (8010ad4 <lv_keyboard_def_event_cb+0x1e4>)
 80109f2:	4628      	mov	r0, r5
 80109f4:	f009 fe7d 	bl	801a6f2 <strcmp>
 80109f8:	2800      	cmp	r0, #0
 80109fa:	d0ec      	beq.n	80109d6 <lv_keyboard_def_event_cb+0xe6>
    else if(strcmp(txt, LV_SYMBOL_LEFT) == 0) {
 80109fc:	4936      	ldr	r1, [pc, #216]	; (8010ad8 <lv_keyboard_def_event_cb+0x1e8>)
 80109fe:	4628      	mov	r0, r5
 8010a00:	f009 fe77 	bl	801a6f2 <strcmp>
 8010a04:	b920      	cbnz	r0, 8010a10 <lv_keyboard_def_event_cb+0x120>
        lv_textarea_cursor_left(keyboard->ta);
 8010a06:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8010a08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_textarea_cursor_left(keyboard->ta);
 8010a0c:	f017 b8ad 	b.w	8027b6a <lv_textarea_cursor_left>
    else if(strcmp(txt, LV_SYMBOL_RIGHT) == 0) {
 8010a10:	4932      	ldr	r1, [pc, #200]	; (8010adc <lv_keyboard_def_event_cb+0x1ec>)
 8010a12:	4628      	mov	r0, r5
 8010a14:	f009 fe6d 	bl	801a6f2 <strcmp>
 8010a18:	b920      	cbnz	r0, 8010a24 <lv_keyboard_def_event_cb+0x134>
        lv_textarea_cursor_right(keyboard->ta);
 8010a1a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8010a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_textarea_cursor_right(keyboard->ta);
 8010a20:	f017 b89f 	b.w	8027b62 <lv_textarea_cursor_right>
    else if(strcmp(txt, LV_SYMBOL_BACKSPACE) == 0) {
 8010a24:	492e      	ldr	r1, [pc, #184]	; (8010ae0 <lv_keyboard_def_event_cb+0x1f0>)
 8010a26:	4628      	mov	r0, r5
 8010a28:	f009 fe63 	bl	801a6f2 <strcmp>
 8010a2c:	b920      	cbnz	r0, 8010a38 <lv_keyboard_def_event_cb+0x148>
        lv_textarea_del_char(keyboard->ta);
 8010a2e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8010a30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_textarea_del_char(keyboard->ta);
 8010a34:	f017 b83d 	b.w	8027ab2 <lv_textarea_del_char>
    else if(strcmp(txt, "+/-") == 0) {
 8010a38:	492a      	ldr	r1, [pc, #168]	; (8010ae4 <lv_keyboard_def_event_cb+0x1f4>)
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	f009 fe59 	bl	801a6f2 <strcmp>
 8010a40:	4606      	mov	r6, r0
 8010a42:	bb78      	cbnz	r0, 8010aa4 <lv_keyboard_def_event_cb+0x1b4>
        uint16_t cur        = lv_textarea_get_cursor_pos(keyboard->ta);
 8010a44:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a46:	f017 f80e 	bl	8027a66 <lv_textarea_get_cursor_pos>
 8010a4a:	4605      	mov	r5, r0
        const char * ta_txt = lv_textarea_get_text(keyboard->ta);
 8010a4c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a4e:	f017 f801 	bl	8027a54 <lv_textarea_get_text>
        if(ta_txt[0] == '-') {
 8010a52:	7803      	ldrb	r3, [r0, #0]
 8010a54:	b2ad      	uxth	r5, r5
 8010a56:	2b2d      	cmp	r3, #45	; 0x2d
 8010a58:	d110      	bne.n	8010a7c <lv_keyboard_def_event_cb+0x18c>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 8010a5a:	2101      	movs	r1, #1
 8010a5c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a5e:	f007 fb83 	bl	8018168 <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 8010a62:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a64:	f017 f825 	bl	8027ab2 <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '+');
 8010a68:	212b      	movs	r1, #43	; 0x2b
            lv_textarea_add_char(keyboard->ta, '-');
 8010a6a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a6c:	f007 fd3e 	bl	80184ec <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur);
 8010a70:	4629      	mov	r1, r5
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 8010a72:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8010a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 8010a78:	f007 bb76 	b.w	8018168 <lv_textarea_set_cursor_pos>
        else if(ta_txt[0] == '+') {
 8010a7c:	2b2b      	cmp	r3, #43	; 0x2b
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 8010a7e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        else if(ta_txt[0] == '+') {
 8010a80:	d107      	bne.n	8010a92 <lv_keyboard_def_event_cb+0x1a2>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 8010a82:	2101      	movs	r1, #1
 8010a84:	f007 fb70 	bl	8018168 <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 8010a88:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a8a:	f017 f812 	bl	8027ab2 <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '-');
 8010a8e:	212d      	movs	r1, #45	; 0x2d
 8010a90:	e7eb      	b.n	8010a6a <lv_keyboard_def_event_cb+0x17a>
            lv_textarea_set_cursor_pos(keyboard->ta, 0);
 8010a92:	4631      	mov	r1, r6
 8010a94:	f007 fb68 	bl	8018168 <lv_textarea_set_cursor_pos>
            lv_textarea_add_char(keyboard->ta, '-');
 8010a98:	212d      	movs	r1, #45	; 0x2d
 8010a9a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a9c:	f007 fd26 	bl	80184ec <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 8010aa0:	1c69      	adds	r1, r5, #1
 8010aa2:	e7e6      	b.n	8010a72 <lv_keyboard_def_event_cb+0x182>
        lv_textarea_add_text(keyboard->ta, txt);
 8010aa4:	4629      	mov	r1, r5
 8010aa6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8010aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_textarea_add_text(keyboard->ta, txt);
 8010aac:	f007 bc94 	b.w	80183d8 <lv_textarea_add_text>
}
 8010ab0:	bd70      	pop	{r4, r5, r6, pc}
 8010ab2:	bf00      	nop
 8010ab4:	0802ae60 	.word	0x0802ae60
 8010ab8:	240000c4 	.word	0x240000c4
 8010abc:	0802ae64 	.word	0x0802ae64
 8010ac0:	0802ae68 	.word	0x0802ae68
 8010ac4:	0802ae6b 	.word	0x0802ae6b
 8010ac8:	0802ae6f 	.word	0x0802ae6f
 8010acc:	0802ab58 	.word	0x0802ab58
 8010ad0:	0802ae73 	.word	0x0802ae73
 8010ad4:	0802ae79 	.word	0x0802ae79
 8010ad8:	0802ab71 	.word	0x0802ab71
 8010adc:	0802ab75 	.word	0x0802ab75
 8010ae0:	0802ae7d 	.word	0x0802ae7d
 8010ae4:	0802ae81 	.word	0x0802ae81

08010ae8 <lv_led_event>:
    led->color = lv_theme_get_color_primary(obj);
    led->bright = LV_LED_BRIGHT_MAX;
}

static void lv_led_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8010ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /* Call the ancestor's event handler */
    lv_event_code_t code = lv_event_get_code(e);
 8010aec:	4608      	mov	r0, r1
{
 8010aee:	b0a0      	sub	sp, #128	; 0x80
 8010af0:	460d      	mov	r5, r1
    lv_event_code_t code = lv_event_get_code(e);
 8010af2:	f00a fb82 	bl	801b1fa <lv_event_get_code>
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_MAIN_END) {
 8010af6:	f1a0 0315 	sub.w	r3, r0, #21
    lv_event_code_t code = lv_event_get_code(e);
 8010afa:	4606      	mov	r6, r0
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_MAIN_END) {
 8010afc:	b2db      	uxtb	r3, r3
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d90c      	bls.n	8010b1c <lv_led_event+0x34>
        res = lv_obj_event_base(MY_CLASS, e);
 8010b02:	4629      	mov	r1, r5
 8010b04:	488b      	ldr	r0, [pc, #556]	; (8010d34 <lv_led_event+0x24c>)
 8010b06:	f00a fb5e 	bl	801b1c6 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8010b0a:	2801      	cmp	r0, #1
 8010b0c:	f040 810f 	bne.w	8010d2e <lv_led_event+0x246>
    }

    lv_obj_t * obj = lv_event_get_target(e);
 8010b10:	4628      	mov	r0, r5

        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
        lv_draw_rect(draw_ctx, &rect_dsc, &obj->coords);
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
    }
}
 8010b12:	b020      	add	sp, #128	; 0x80
 8010b14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t * obj = lv_event_get_target(e);
 8010b18:	f00a bb6b 	b.w	801b1f2 <lv_event_get_target>
 8010b1c:	4628      	mov	r0, r5
 8010b1e:	f00a fb68 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 8010b22:	2e15      	cmp	r6, #21
    lv_obj_t * obj = lv_event_get_target(e);
 8010b24:	4604      	mov	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8010b26:	f040 8102 	bne.w	8010d2e <lv_led_event+0x246>
        lv_draw_rect_dsc_init(&rect_dsc);
 8010b2a:	4668      	mov	r0, sp
 8010b2c:	f7f7 ff06 	bl	800893c <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &rect_dsc);
 8010b30:	466a      	mov	r2, sp
 8010b32:	2100      	movs	r1, #0
 8010b34:	4620      	mov	r0, r4
 8010b36:	f00b f9ab 	bl	801be90 <lv_obj_init_draw_rect_dsc>
        rect_dsc.bg_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.bg_color));
 8010b3a:	f012 fee4 	bl	8023906 <lv_color_black>
 8010b3e:	4606      	mov	r6, r0
    c32.full        = lv_color_to32(color);
 8010b40:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8010b44:	f012 fe97 	bl	8023876 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8010b48:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010b4c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8010b50:	4631      	mov	r1, r6
 8010b52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010b56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010b5a:	fa53 f280 	uxtab	r2, r3, r0
 8010b5e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8010b60:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8010b64:	f012 fea5 	bl	80238b2 <lv_color_mix>
 8010b68:	4681      	mov	r9, r0
        rect_dsc.bg_grad.stops[0].color = lv_color_mix(led->color, lv_color_black(),
 8010b6a:	f012 fecc 	bl	8023906 <lv_color_black>
 8010b6e:	4606      	mov	r6, r0
    c32.full        = lv_color_to32(color);
 8010b70:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8010b74:	f012 fe7f 	bl	8023876 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8010b78:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010b7c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8010b80:	4631      	mov	r1, r6
 8010b82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010b86:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010b8a:	fa53 f280 	uxtab	r2, r3, r0
 8010b8e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8010b90:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8010b94:	f012 fe8d 	bl	80238b2 <lv_color_mix>
 8010b98:	4680      	mov	r8, r0
        rect_dsc.bg_grad.stops[1].color = lv_color_mix(led->color, lv_color_black(),
 8010b9a:	f012 feb4 	bl	8023906 <lv_color_black>
 8010b9e:	4606      	mov	r6, r0
    c32.full        = lv_color_to32(color);
 8010ba0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8010ba4:	f012 fe67 	bl	8023876 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8010ba8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010bac:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8010bb0:	4631      	mov	r1, r6
 8010bb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010bb6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010bba:	fa53 f280 	uxtab	r2, r3, r0
 8010bbe:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8010bc0:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8010bc4:	f012 fe75 	bl	80238b2 <lv_color_mix>
 8010bc8:	4607      	mov	r7, r0
        rect_dsc.shadow_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.shadow_color));
 8010bca:	f012 fe9c 	bl	8023906 <lv_color_black>
 8010bce:	4606      	mov	r6, r0
    c32.full        = lv_color_to32(color);
 8010bd0:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8010bd4:	f012 fe4f 	bl	8023876 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8010bd8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010bdc:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8010be0:	4631      	mov	r1, r6
 8010be2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010be6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010bea:	fa53 f280 	uxtab	r2, r3, r0
 8010bee:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8010bf0:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8010bf4:	f012 fe5d 	bl	80238b2 <lv_color_mix>
 8010bf8:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
        rect_dsc.border_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.border_color));
 8010bfc:	f012 fe83 	bl	8023906 <lv_color_black>
 8010c00:	4606      	mov	r6, r0
    c32.full        = lv_color_to32(color);
 8010c02:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8010c06:	f012 fe36 	bl	8023876 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8010c0a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010c0e:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8010c12:	4631      	mov	r1, r6
 8010c14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010c18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010c1c:	fa53 f280 	uxtab	r2, r3, r0
 8010c20:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8010c22:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8010c26:	f012 fe44 	bl	80238b2 <lv_color_mix>
 8010c2a:	4606      	mov	r6, r0
        rect_dsc.outline_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.outline_color));
 8010c2c:	f012 fe6b 	bl	8023906 <lv_color_black>
 8010c30:	4682      	mov	sl, r0
    c32.full        = lv_color_to32(color);
 8010c32:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8010c36:	f012 fe1e 	bl	8023876 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8010c3a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010c3e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010c42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010c46:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010c4a:	4651      	mov	r1, sl
 8010c4c:	fa53 f280 	uxtab	r2, r3, r0
 8010c50:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8010c52:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8010c56:	f012 fe2c 	bl	80238b2 <lv_color_mix>
 8010c5a:	4682      	mov	sl, r0
        rect_dsc.bg_color = lv_color_mix(rect_dsc.bg_color, lv_color_black(), led->bright);
 8010c5c:	f012 fe53 	bl	8023906 <lv_color_black>
 8010c60:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8010c64:	4601      	mov	r1, r0
 8010c66:	4648      	mov	r0, r9
 8010c68:	f012 fe23 	bl	80238b2 <lv_color_mix>
 8010c6c:	f8ad 0004 	strh.w	r0, [sp, #4]
        rect_dsc.bg_grad.stops[0].color   = lv_color_mix(rect_dsc.bg_grad.stops[0].color, lv_color_black(), led->bright);
 8010c70:	f012 fe49 	bl	8023906 <lv_color_black>
 8010c74:	4601      	mov	r1, r0
 8010c76:	4640      	mov	r0, r8
 8010c78:	f012 fe1b 	bl	80238b2 <lv_color_mix>
 8010c7c:	f8ad 0006 	strh.w	r0, [sp, #6]
        rect_dsc.bg_grad.stops[1].color   = lv_color_mix(rect_dsc.bg_grad.stops[1].color, lv_color_black(), led->bright);
 8010c80:	f012 fe41 	bl	8023906 <lv_color_black>
 8010c84:	4601      	mov	r1, r0
 8010c86:	4638      	mov	r0, r7
 8010c88:	f012 fe13 	bl	80238b2 <lv_color_mix>
 8010c8c:	f8ad 000a 	strh.w	r0, [sp, #10]
        rect_dsc.border_color = lv_color_mix(rect_dsc.border_color, lv_color_black(), led->bright);
 8010c90:	f012 fe39 	bl	8023906 <lv_color_black>
 8010c94:	4601      	mov	r1, r0
 8010c96:	4630      	mov	r0, r6
        part_draw_dsc.draw_area = &obj->coords;
 8010c98:	f104 0614 	add.w	r6, r4, #20
        rect_dsc.border_color = lv_color_mix(rect_dsc.border_color, lv_color_black(), led->bright);
 8010c9c:	f012 fe09 	bl	80238b2 <lv_color_mix>
 8010ca0:	f8ad 001e 	strh.w	r0, [sp, #30]
        rect_dsc.shadow_color = lv_color_mix(rect_dsc.shadow_color, lv_color_black(), led->bright);
 8010ca4:	f012 fe2f 	bl	8023906 <lv_color_black>
 8010ca8:	4601      	mov	r1, r0
 8010caa:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8010cae:	f012 fe00 	bl	80238b2 <lv_color_mix>
 8010cb2:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 8010cb6:	f012 fe26 	bl	8023906 <lv_color_black>
 8010cba:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8010cbe:	4601      	mov	r1, r0
 8010cc0:	4650      	mov	r0, sl
 8010cc2:	f012 fdf6 	bl	80238b2 <lv_color_mix>
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 8010cc6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8010cca:	3a50      	subs	r2, #80	; 0x50
 8010ccc:	21af      	movs	r1, #175	; 0xaf
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 8010cce:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010cd2:	4628      	mov	r0, r5
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 8010cd4:	435a      	muls	r2, r3
 8010cd6:	fb92 f2f1 	sdiv	r2, r2, r1
 8010cda:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
 8010cde:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8010ce2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8010ce6:	3b50      	subs	r3, #80	; 0x50
 8010ce8:	4353      	muls	r3, r2
 8010cea:	fb93 f3f1 	sdiv	r3, r3, r1
 8010cee:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010cf2:	f00a fad7 	bl	801b2a4 <lv_event_get_draw_ctx>
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8010cf6:	4601      	mov	r1, r0
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010cf8:	4605      	mov	r5, r0
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8010cfa:	a80e      	add	r0, sp, #56	; 0x38
 8010cfc:	f00b fbbe 	bl	801c47c <lv_obj_draw_dsc_init>
        part_draw_dsc.class_p = MY_CLASS;
 8010d00:	4b0c      	ldr	r3, [pc, #48]	; (8010d34 <lv_led_event+0x24c>)
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8010d02:	aa0e      	add	r2, sp, #56	; 0x38
 8010d04:	211a      	movs	r1, #26
        part_draw_dsc.class_p = MY_CLASS;
 8010d06:	930f      	str	r3, [sp, #60]	; 0x3c
        part_draw_dsc.type = LV_LED_DRAW_PART_RECTANGLE;
 8010d08:	2300      	movs	r3, #0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8010d0a:	4620      	mov	r0, r4
        part_draw_dsc.draw_area = &obj->coords;
 8010d0c:	9611      	str	r6, [sp, #68]	; 0x44
        part_draw_dsc.type = LV_LED_DRAW_PART_RECTANGLE;
 8010d0e:	9310      	str	r3, [sp, #64]	; 0x40
        part_draw_dsc.part = LV_PART_MAIN;
 8010d10:	931b      	str	r3, [sp, #108]	; 0x6c
        part_draw_dsc.rect_dsc = &rect_dsc;
 8010d12:	f8cd d048 	str.w	sp, [sp, #72]	; 0x48
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8010d16:	f7f3 fce1 	bl	80046dc <lv_event_send>
        lv_draw_rect(draw_ctx, &rect_dsc, &obj->coords);
 8010d1a:	4632      	mov	r2, r6
 8010d1c:	4669      	mov	r1, sp
 8010d1e:	4628      	mov	r0, r5
 8010d20:	f00e fb41 	bl	801f3a6 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8010d24:	aa0e      	add	r2, sp, #56	; 0x38
 8010d26:	211b      	movs	r1, #27
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f7f3 fcd7 	bl	80046dc <lv_event_send>
}
 8010d2e:	b020      	add	sp, #128	; 0x80
 8010d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d34:	08029138 	.word	0x08029138

08010d38 <lv_menu_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_menu_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8010d38:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_set_layout(obj, LV_LAYOUT_FLEX);
 8010d3a:	4b47      	ldr	r3, [pc, #284]	; (8010e58 <lv_menu_constructor+0x120>)
{
 8010d3c:	460c      	mov	r4, r1

    lv_menu_t * menu = (lv_menu_t *)obj;

    menu->mode_header = LV_MENU_HEADER_TOP_FIXED;
    menu->mode_root_back_btn = LV_MENU_ROOT_BACK_BTN_DISABLED;
    menu->cur_depth = 0;
 8010d3e:	2500      	movs	r5, #0
    lv_obj_set_layout(obj, LV_LAYOUT_FLEX);
 8010d40:	8819      	ldrh	r1, [r3, #0]
 8010d42:	4620      	mov	r0, r4
 8010d44:	f00b fd0d 	bl	801c762 <lv_obj_set_layout>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 8010d48:	4620      	mov	r0, r4
 8010d4a:	2100      	movs	r1, #0
 8010d4c:	f7fa fc0a 	bl	800b564 <lv_obj_set_flex_flow>
    menu->prev_depth = 0;
    menu->sidebar_generated = false;
 8010d50:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62

    _lv_ll_init(&(menu->history_ll), sizeof(lv_menu_history_t));
 8010d54:	2104      	movs	r1, #4
 8010d56:	f104 0054 	add.w	r0, r4, #84	; 0x54
    menu->sidebar_generated = false;
 8010d5a:	f023 030f 	bic.w	r3, r3, #15
    menu->cur_depth = 0;
 8010d5e:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
    menu->sidebar_generated = false;
 8010d62:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    _lv_ll_init(&(menu->history_ll), sizeof(lv_menu_history_t));
 8010d66:	f013 fe37 	bl	80249d8 <_lv_ll_init>

    menu->storage = lv_obj_create(obj);
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f7f3 ffc4 	bl	8004cf8 <lv_obj_create>
    lv_obj_add_flag(menu->storage, LV_OBJ_FLAG_HIDDEN);
 8010d70:	2101      	movs	r1, #1
    menu->storage = lv_obj_create(obj);
 8010d72:	6260      	str	r0, [r4, #36]	; 0x24
    lv_obj_add_flag(menu->storage, LV_OBJ_FLAG_HIDDEN);
 8010d74:	f00a fdc5 	bl	801b902 <lv_obj_add_flag>
    menu->sidebar_header = NULL;
    menu->sidebar_header_back_btn = NULL;
    menu->sidebar_header_title = NULL;
    menu->sidebar_page = NULL;

    lv_obj_t * main_cont = lv_obj_class_create_obj(&lv_menu_main_cont_class, obj);
 8010d78:	4621      	mov	r1, r4
    menu->sidebar = NULL;
 8010d7a:	63e5      	str	r5, [r4, #60]	; 0x3c
    menu->sidebar_header_title = NULL;
 8010d7c:	64e5      	str	r5, [r4, #76]	; 0x4c
    menu->sidebar_page = NULL;
 8010d7e:	6425      	str	r5, [r4, #64]	; 0x40
    lv_obj_t * main_cont = lv_obj_class_create_obj(&lv_menu_main_cont_class, obj);
 8010d80:	4836      	ldr	r0, [pc, #216]	; (8010e5c <lv_menu_constructor+0x124>)
    menu->sidebar_header_back_btn = NULL;
 8010d82:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
    lv_obj_t * main_cont = lv_obj_class_create_obj(&lv_menu_main_cont_class, obj);
 8010d86:	f7f4 f817 	bl	8004db8 <lv_obj_class_create_obj>
 8010d8a:	4606      	mov	r6, r0
    lv_obj_class_init_obj(main_cont);
 8010d8c:	f00b f822 	bl	801bdd4 <lv_obj_class_init_obj>
    lv_obj_set_height(main_cont, LV_PCT(100));
 8010d90:	f242 0164 	movw	r1, #8292	; 0x2064
 8010d94:	4630      	mov	r0, r6
 8010d96:	f00b fcaa 	bl	801c6ee <lv_obj_set_height>
    lv_obj_set_flex_grow(main_cont, 1);
 8010d9a:	4630      	mov	r0, r6
 8010d9c:	2101      	movs	r1, #1
 8010d9e:	f012 f89f 	bl	8022ee0 <lv_obj_set_flex_grow>
    lv_obj_set_flex_flow(main_cont, LV_FLEX_FLOW_COLUMN);
 8010da2:	4630      	mov	r0, r6
 8010da4:	2101      	movs	r1, #1
 8010da6:	f7fa fbdd 	bl	800b564 <lv_obj_set_flex_flow>
    lv_obj_add_flag(main_cont, LV_OBJ_FLAG_EVENT_BUBBLE);
 8010daa:	4630      	mov	r0, r6
 8010dac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010db0:	f00a fda7 	bl	801b902 <lv_obj_add_flag>
    lv_obj_clear_flag(main_cont, LV_OBJ_FLAG_CLICKABLE);
 8010db4:	4630      	mov	r0, r6
 8010db6:	2102      	movs	r1, #2
 8010db8:	f00a fdd9 	bl	801b96e <lv_obj_clear_flag>
    menu->main = main_cont;

    lv_obj_t * main_header = lv_obj_class_create_obj(&lv_menu_main_header_cont_class, main_cont);
 8010dbc:	4631      	mov	r1, r6
    menu->main = main_cont;
 8010dbe:	62a6      	str	r6, [r4, #40]	; 0x28
    lv_obj_t * main_header = lv_obj_class_create_obj(&lv_menu_main_header_cont_class, main_cont);
 8010dc0:	4827      	ldr	r0, [pc, #156]	; (8010e60 <lv_menu_constructor+0x128>)
 8010dc2:	f7f3 fff9 	bl	8004db8 <lv_obj_class_create_obj>
 8010dc6:	4606      	mov	r6, r0
    lv_obj_class_init_obj(main_header);
 8010dc8:	f00b f804 	bl	801bdd4 <lv_obj_class_init_obj>
    lv_obj_set_size(main_header, LV_PCT(100), LV_SIZE_CONTENT);
 8010dcc:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8010dd0:	4630      	mov	r0, r6
 8010dd2:	f242 0164 	movw	r1, #8292	; 0x2064
 8010dd6:	f00b fca1 	bl	801c71c <lv_obj_set_size>
    lv_obj_set_flex_flow(main_header, LV_FLEX_FLOW_ROW);
 8010dda:	4629      	mov	r1, r5
 8010ddc:	4630      	mov	r0, r6
 8010dde:	f7fa fbc1 	bl	800b564 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(main_header, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 8010de2:	2302      	movs	r3, #2
 8010de4:	4629      	mov	r1, r5
 8010de6:	4630      	mov	r0, r6
 8010de8:	461a      	mov	r2, r3
 8010dea:	f7fa fbe3 	bl	800b5b4 <lv_obj_set_flex_align>
    lv_obj_clear_flag(main_header, LV_OBJ_FLAG_CLICKABLE);
 8010dee:	4630      	mov	r0, r6
 8010df0:	2102      	movs	r1, #2
 8010df2:	f00a fdbc 	bl	801b96e <lv_obj_clear_flag>
    lv_obj_add_flag(main_header, LV_OBJ_FLAG_EVENT_BUBBLE);
 8010df6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	f00a fd81 	bl	801b902 <lv_obj_add_flag>
    menu->main_header = main_header;
 8010e00:	6326      	str	r6, [r4, #48]	; 0x30

    /* Create the default simple back btn and title */
    lv_obj_t * main_header_back_btn = lv_btn_create(menu->main_header);
 8010e02:	4630      	mov	r0, r6
 8010e04:	f002 ff30 	bl	8013c68 <lv_btn_create>
 8010e08:	4606      	mov	r6, r0
    lv_obj_add_event_cb(main_header_back_btn, lv_menu_back_event_cb, LV_EVENT_CLICKED, menu);
 8010e0a:	4623      	mov	r3, r4
 8010e0c:	2207      	movs	r2, #7
 8010e0e:	4915      	ldr	r1, [pc, #84]	; (8010e64 <lv_menu_constructor+0x12c>)
 8010e10:	f00a f9fb 	bl	801b20a <lv_obj_add_event_cb>
    lv_obj_add_flag(main_header_back_btn, LV_OBJ_FLAG_EVENT_BUBBLE);
 8010e14:	4630      	mov	r0, r6
 8010e16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010e1a:	f00a fd72 	bl	801b902 <lv_obj_add_flag>
    lv_obj_set_flex_flow(main_header_back_btn, LV_FLEX_FLOW_ROW);
 8010e1e:	4629      	mov	r1, r5
 8010e20:	4630      	mov	r0, r6
 8010e22:	f7fa fb9f 	bl	800b564 <lv_obj_set_flex_flow>
    menu->main_header_back_btn = main_header_back_btn;
 8010e26:	6366      	str	r6, [r4, #52]	; 0x34

    lv_obj_t * main_header_back_icon = lv_img_create(menu->main_header_back_btn);
 8010e28:	4630      	mov	r0, r6
 8010e2a:	f004 f977 	bl	801511c <lv_img_create>
    lv_img_set_src(main_header_back_icon, LV_SYMBOL_LEFT);
 8010e2e:	490e      	ldr	r1, [pc, #56]	; (8010e68 <lv_menu_constructor+0x130>)
 8010e30:	f015 ff2d 	bl	8026c8e <lv_img_set_src>

    lv_obj_t * main_header_title = lv_label_create(menu->main_header);
 8010e34:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010e36:	f005 f9d9 	bl	80161ec <lv_label_create>
 8010e3a:	4606      	mov	r6, r0
    lv_obj_add_flag(main_header_title, LV_OBJ_FLAG_HIDDEN);
 8010e3c:	2101      	movs	r1, #1
 8010e3e:	f00a fd60 	bl	801b902 <lv_obj_add_flag>
    menu->main_header_title = main_header_title;

    menu->main_page = NULL;
    menu->selected_tab = NULL;

    lv_obj_add_event_cb(obj, lv_menu_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, menu);
 8010e42:	4623      	mov	r3, r4
 8010e44:	4620      	mov	r0, r4
    menu->main_header_title = main_header_title;
 8010e46:	63a6      	str	r6, [r4, #56]	; 0x38
    menu->main_page = NULL;
 8010e48:	62e5      	str	r5, [r4, #44]	; 0x2c
    lv_obj_add_event_cb(obj, lv_menu_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, menu);
 8010e4a:	221c      	movs	r2, #28
    menu->selected_tab = NULL;
 8010e4c:	6525      	str	r5, [r4, #80]	; 0x50
    lv_obj_add_event_cb(obj, lv_menu_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, menu);
 8010e4e:	4907      	ldr	r1, [pc, #28]	; (8010e6c <lv_menu_constructor+0x134>)

    LV_TRACE_OBJ_CREATE("finished");
}
 8010e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_add_event_cb(obj, lv_menu_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, menu);
 8010e54:	f00a b9d9 	b.w	801b20a <lv_obj_add_event_cb>
 8010e58:	24010cfe 	.word	0x24010cfe
 8010e5c:	080291e0 	.word	0x080291e0
 8010e60:	080291c4 	.word	0x080291c4
 8010e64:	08023b6f 	.word	0x08023b6f
 8010e68:	0802ab71 	.word	0x0802ab71
 8010e6c:	08023965 	.word	0x08023965

08010e70 <lv_meter_event>:
    _lv_ll_clear(&meter->scale_ll);

}

static void lv_meter_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8010e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8010e74:	f8df a314 	ldr.w	sl, [pc, #788]	; 801118c <lv_meter_event+0x31c>
{
 8010e78:	b0df      	sub	sp, #380	; 0x17c
 8010e7a:	460c      	mov	r4, r1
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8010e7c:	4650      	mov	r0, sl
 8010e7e:	f00a f9a2 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8010e82:	2801      	cmp	r0, #1
 8010e84:	f040 8131 	bne.w	80110ea <lv_meter_event+0x27a>

    lv_event_code_t code = lv_event_get_code(e);
 8010e88:	4620      	mov	r0, r4
 8010e8a:	f00a f9b6 	bl	801b1fa <lv_event_get_code>
 8010e8e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8010e90:	4620      	mov	r0, r4
 8010e92:	f00a f9ae 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 8010e96:	2d15      	cmp	r5, #21
    lv_obj_t * obj = lv_event_get_target(e);
 8010e98:	4606      	mov	r6, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8010e9a:	f040 8126 	bne.w	80110ea <lv_meter_event+0x27a>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010e9e:	4620      	mov	r0, r4
static void draw_arcs(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, const lv_area_t * scale_area)
{
    lv_meter_t * meter = (lv_meter_t *)obj;

    lv_draw_arc_dsc_t arc_dsc;
    lv_draw_arc_dsc_init(&arc_dsc);
 8010ea0:	ac44      	add	r4, sp, #272	; 0x110
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010ea2:	f00a f9ff 	bl	801b2a4 <lv_event_get_draw_ctx>
        lv_obj_get_content_coords(obj, &scale_area);
 8010ea6:	a919      	add	r1, sp, #100	; 0x64
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010ea8:	9005      	str	r0, [sp, #20]
        lv_obj_get_content_coords(obj, &scale_area);
 8010eaa:	4630      	mov	r0, r6
 8010eac:	f00b fcfa 	bl	801c8a4 <lv_obj_get_content_coords>
    lv_draw_arc_dsc_init(&arc_dsc);
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	f00d fc5e 	bl	801e772 <lv_draw_arc_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8010eb6:	2251      	movs	r2, #81	; 0x51
 8010eb8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	f00c fddf 	bl	801da80 <lv_obj_get_style_prop>
    return (bool)v.num;
 8010ec2:	3800      	subs	r0, #0
    arc_dsc.rounded = lv_obj_get_style_arc_rounded(obj, LV_PART_ITEMS);
 8010ec4:	f89d 311d 	ldrb.w	r3, [sp, #285]	; 0x11d
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8010ec8:	f04f 0100 	mov.w	r1, #0
    return (bool)v.num;
 8010ecc:	bf18      	it	ne
 8010ece:	2001      	movne	r0, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010ed0:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
                                   scale->rotation + scale->angle_range);

        part_draw_dsc.radius = r_out + indic->type_data.arc.r_mod;
        part_draw_dsc.sub_part_ptr = indic;
        part_draw_dsc.p1 = &scale_center;
 8010ed4:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
    arc_dsc.rounded = lv_obj_get_style_arc_rounded(obj, LV_PART_ITEMS);
 8010ed8:	f360 0382 	bfi	r3, r0, #2, #1
 8010edc:	3501      	adds	r5, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8010ede:	4630      	mov	r0, r6
 8010ee0:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 8010ee4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8010ee8:	1aed      	subs	r5, r5, r3
    lv_coord_t r_out = lv_area_get_width(scale_area) / 2 ;
 8010eea:	f3c5 32c0 	ubfx	r2, r5, #15, #1
 8010eee:	fa02 f585 	sxtah	r5, r2, r5
 8010ef2:	2260      	movs	r2, #96	; 0x60
    scale_center.x = scale_area->x1 + r_out;
 8010ef4:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8010ef8:	442b      	add	r3, r5
 8010efa:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    scale_center.y = scale_area->y1 + r_out;
 8010efe:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 8010f02:	442b      	add	r3, r5
 8010f04:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
 8010f08:	f00c fdba 	bl	801da80 <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8010f0c:	9905      	ldr	r1, [sp, #20]
 8010f0e:	4681      	mov	r9, r0
 8010f10:	a84c      	add	r0, sp, #304	; 0x130
 8010f12:	f00b fab3 	bl	801c47c <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_INDICATOR;
 8010f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    part_draw_dsc.arc_dsc = &arc_dsc;
 8010f1a:	9454      	str	r4, [sp, #336]	; 0x150
    part_draw_dsc.part = LV_PART_INDICATOR;
 8010f1c:	9359      	str	r3, [sp, #356]	; 0x164
    part_draw_dsc.type = LV_METER_DRAW_PART_ARC;
 8010f1e:	2300      	movs	r3, #0
    part_draw_dsc.class_p = MY_CLASS;
 8010f20:	f8cd a134 	str.w	sl, [sp, #308]	; 0x134
    part_draw_dsc.type = LV_METER_DRAW_PART_ARC;
 8010f24:	934e      	str	r3, [sp, #312]	; 0x138
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8010f26:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	9307      	str	r3, [sp, #28]
 8010f2e:	f013 fdd0 	bl	8024ad2 <_lv_ll_get_tail>
 8010f32:	4604      	mov	r4, r0
 8010f34:	2c00      	cmp	r4, #0
 8010f36:	f040 80db 	bne.w	80110f0 <lv_meter_event+0x280>
 8010f3a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
    lv_coord_t r_edge = LV_MIN(lv_area_get_width(scale_area) / 2, lv_area_get_height(scale_area) / 2);
    p_center.x = scale_area->x1 + r_edge;
    p_center.y = scale_area->y1 + r_edge;

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 8010f3e:	ac23      	add	r4, sp, #140	; 0x8c
 8010f40:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8010f44:	3501      	adds	r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010f46:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010f4a:	1a6d      	subs	r5, r5, r1
    lv_coord_t r_edge = LV_MIN(lv_area_get_width(scale_area) / 2, lv_area_get_height(scale_area) / 2);
 8010f4c:	f3c5 33c0 	ubfx	r3, r5, #15, #1
 8010f50:	fa03 f585 	sxtah	r5, r3, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010f54:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8010f58:	3301      	adds	r3, #1
 8010f5a:	106d      	asrs	r5, r5, #1
 8010f5c:	1a9b      	subs	r3, r3, r2
 8010f5e:	f3c3 30c0 	ubfx	r0, r3, #15, #1
 8010f62:	fa00 f383 	sxtah	r3, r0, r3
    lv_draw_line_dsc_init(&line_dsc);
 8010f66:	4620      	mov	r0, r4
 8010f68:	105b      	asrs	r3, r3, #1
 8010f6a:	429d      	cmp	r5, r3
 8010f6c:	bfa8      	it	ge
 8010f6e:	461d      	movge	r5, r3
    p_center.x = scale_area->x1 + r_edge;
 8010f70:	fa11 f185 	uxtah	r1, r1, r5
    p_center.y = scale_area->y1 + r_edge;
 8010f74:	fa12 f285 	uxtah	r2, r2, r5
    p_center.x = scale_area->x1 + r_edge;
 8010f78:	fa1f f885 	uxth.w	r8, r5
 8010f7c:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
    p_center.y = scale_area->y1 + r_edge;
 8010f80:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
    lv_draw_line_dsc_init(&line_dsc);
 8010f84:	f00d fcdf 	bl	801e946 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 8010f88:	4622      	mov	r2, r4
 8010f8a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010f8e:	4630      	mov	r0, r6
 8010f90:	f00b f96a 	bl	801c268 <lv_obj_init_draw_line_dsc>
    line_dsc.raw_end = 1;
 8010f94:	f89d 3095 	ldrb.w	r3, [sp, #149]	; 0x95

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 8010f98:	a83c      	add	r0, sp, #240	; 0xf0
    line_dsc.raw_end = 1;
 8010f9a:	f043 0310 	orr.w	r3, r3, #16
 8010f9e:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
    lv_draw_label_dsc_init(&label_dsc);
 8010fa2:	f7f6 fe81 	bl	8007ca8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 8010fa6:	aa3c      	add	r2, sp, #240	; 0xf0
 8010fa8:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010fac:	4630      	mov	r0, r6
 8010fae:	f00b f8be 	bl	801c12e <lv_obj_init_draw_label_dsc>
    lv_draw_mask_radius_param_t inner_minor_mask;
    lv_draw_mask_radius_param_t inner_major_mask;
    lv_draw_mask_radius_param_t outer_mask;

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8010fb2:	9905      	ldr	r1, [sp, #20]
 8010fb4:	a84c      	add	r0, sp, #304	; 0x130
 8010fb6:	f00b fa61 	bl	801c47c <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
    part_draw_dsc.part = LV_PART_TICKS;
 8010fba:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    part_draw_dsc.type = LV_METER_DRAW_PART_TICK;
    part_draw_dsc.line_dsc = &line_dsc;
 8010fbe:	9452      	str	r4, [sp, #328]	; 0x148
    part_draw_dsc.part = LV_PART_TICKS;
 8010fc0:	9359      	str	r3, [sp, #356]	; 0x164
    part_draw_dsc.type = LV_METER_DRAW_PART_TICK;
 8010fc2:	2303      	movs	r3, #3
    part_draw_dsc.class_p = MY_CLASS;
 8010fc4:	f8cd a134 	str.w	sl, [sp, #308]	; 0x134
    part_draw_dsc.type = LV_METER_DRAW_PART_TICK;
 8010fc8:	934e      	str	r3, [sp, #312]	; 0x138

    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 8010fca:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8010fce:	4618      	mov	r0, r3
 8010fd0:	9310      	str	r3, [sp, #64]	; 0x40
 8010fd2:	f013 fd7e 	bl	8024ad2 <_lv_ll_get_tail>
            line_dsc.width = line_width;

            /*Draw a little bit longer lines to be sure the mask will clip them correctly
             *and to get a better precision*/
            lv_point_t p_outer;
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 8010fd6:	2d82      	cmp	r5, #130	; 0x82
    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 8010fd8:	4604      	mov	r4, r0
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 8010fda:	bfb8      	it	lt
 8010fdc:	2582      	movlt	r5, #130	; 0x82
 8010fde:	9512      	str	r5, [sp, #72]	; 0x48
    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 8010fe0:	2c00      	cmp	r4, #0
 8010fe2:	f040 80d5 	bne.w	8011190 <lv_meter_event+0x320>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010fe6:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
    lv_point_t scale_center;
    scale_center.x = scale_area->x1 + r_edge;
    scale_center.y = scale_area->y1 + r_edge;

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 8010fea:	a83c      	add	r0, sp, #240	; 0xf0
 8010fec:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
            a.y2 = a.y1 + info.h - 1;

            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
            angle = angle * 10;
 8010ff0:	f04f 0a0a 	mov.w	sl, #10
 8010ff4:	3501      	adds	r5, #1
 8010ff6:	1aed      	subs	r5, r5, r3
    lv_coord_t r_edge = lv_area_get_width(scale_area) / 2;
 8010ff8:	f3c5 32c0 	ubfx	r2, r5, #15, #1
 8010ffc:	fa02 f585 	sxtah	r5, r2, r5
    scale_center.x = scale_area->x1 + r_edge;
 8011000:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8011004:	442b      	add	r3, r5
 8011006:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
    scale_center.y = scale_area->y1 + r_edge;
 801100a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 801100e:	442b      	add	r3, r5
 8011010:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
    lv_draw_line_dsc_init(&line_dsc);
 8011014:	f00d fc97 	bl	801e946 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc);
 8011018:	aa3c      	add	r2, sp, #240	; 0xf0
 801101a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801101e:	4630      	mov	r0, r6
 8011020:	f00b f922 	bl	801c268 <lv_obj_init_draw_line_dsc>
    lv_draw_img_dsc_init(&img_dsc);
 8011024:	a844      	add	r0, sp, #272	; 0x110
 8011026:	f00d fbe5 	bl	801e7f4 <lv_draw_img_dsc_init>
    lv_obj_init_draw_img_dsc(obj, LV_PART_ITEMS, &img_dsc);
 801102a:	aa44      	add	r2, sp, #272	; 0x110
 801102c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8011030:	4630      	mov	r0, r6
 8011032:	f00b f8c8 	bl	801c1c6 <lv_obj_init_draw_img_dsc>
 8011036:	2260      	movs	r2, #96	; 0x60
 8011038:	4621      	mov	r1, r4
 801103a:	4630      	mov	r0, r6
 801103c:	f00c fd20 	bl	801da80 <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8011040:	9905      	ldr	r1, [sp, #20]
 8011042:	4680      	mov	r8, r0
    return (lv_opa_t)v.num;
 8011044:	fa5f f980 	uxtb.w	r9, r0
 8011048:	a84c      	add	r0, sp, #304	; 0x130
 801104a:	f00b fa17 	bl	801c47c <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 801104e:	4b4f      	ldr	r3, [pc, #316]	; (801118c <lv_meter_event+0x31c>)
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8011050:	9807      	ldr	r0, [sp, #28]
    part_draw_dsc.class_p = MY_CLASS;
 8011052:	934d      	str	r3, [sp, #308]	; 0x134
    part_draw_dsc.p1 = &scale_center;
 8011054:	ab2a      	add	r3, sp, #168	; 0xa8
 8011056:	9355      	str	r3, [sp, #340]	; 0x154
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8011058:	f013 fd3b 	bl	8024ad2 <_lv_ll_get_tail>
 801105c:	4604      	mov	r4, r0
 801105e:	2c00      	cmp	r4, #0
 8011060:	f040 829f 	bne.w	80115a2 <lv_meter_event+0x732>
 8011064:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
        lv_draw_rect_dsc_init(&mid_dsc);
 8011068:	a84c      	add	r0, sp, #304	; 0x130
 801106a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801106e:	3401      	adds	r4, #1
 8011070:	1b64      	subs	r4, r4, r5
        lv_coord_t r_edge = lv_area_get_width(&scale_area) / 2;
 8011072:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 8011076:	fa03 f484 	sxtah	r4, r3, r4
        scale_center.y = scale_area.y1 + r_edge;
 801107a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
        scale_center.x = scale_area.x1 + r_edge;
 801107e:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8011082:	4425      	add	r5, r4
        scale_center.y = scale_area.y1 + r_edge;
 8011084:	441c      	add	r4, r3
        lv_draw_rect_dsc_init(&mid_dsc);
 8011086:	f7f7 fc59 	bl	800893c <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &mid_dsc);
 801108a:	aa4c      	add	r2, sp, #304	; 0x130
 801108c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8011090:	4630      	mov	r0, r6
 8011092:	f00a fefd 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8011096:	2201      	movs	r2, #1
 8011098:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801109c:	4630      	mov	r0, r6
 801109e:	f00c fcef 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80110a2:	2204      	movs	r2, #4
    return (lv_coord_t)v.num;
 80110a4:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80110a6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        scale_center.x = scale_area.x1 + r_edge;
 80110aa:	b2ad      	uxth	r5, r5
 80110ac:	4630      	mov	r0, r6
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 80110ae:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80110b2:	f00c fce5 	bl	801da80 <lv_obj_get_style_prop>
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
 80110b6:	aa44      	add	r2, sp, #272	; 0x110
        nm_cord.x1 = scale_center.x - w;
 80110b8:	f3c7 074f 	ubfx	r7, r7, #1, #16
        scale_center.y = scale_area.y1 + r_edge;
 80110bc:	b2a4      	uxth	r4, r4
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
 80110be:	a94c      	add	r1, sp, #304	; 0x130
        nm_cord.x1 = scale_center.x - w;
 80110c0:	1beb      	subs	r3, r5, r7
        nm_cord.x2 = scale_center.x + w;
 80110c2:	443d      	add	r5, r7
        nm_cord.x1 = scale_center.x - w;
 80110c4:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 80110c8:	f3c0 33c0 	ubfx	r3, r0, #15, #1
        nm_cord.x2 = scale_center.x + w;
 80110cc:	f8ad 5114 	strh.w	r5, [sp, #276]	; 0x114
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 80110d0:	fa03 f080 	sxtah	r0, r3, r0
        nm_cord.y1 = scale_center.y - h;
 80110d4:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80110d8:	1a23      	subs	r3, r4, r0
        nm_cord.y2 = scale_center.y + h;
 80110da:	4404      	add	r4, r0
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
 80110dc:	9805      	ldr	r0, [sp, #20]
        nm_cord.y1 = scale_center.y - h;
 80110de:	f8ad 3112 	strh.w	r3, [sp, #274]	; 0x112
        nm_cord.y2 = scale_center.y + h;
 80110e2:	f8ad 4116 	strh.w	r4, [sp, #278]	; 0x116
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
 80110e6:	f00e f95e 	bl	801f3a6 <lv_draw_rect>
}
 80110ea:	b05f      	add	sp, #380	; 0x17c
 80110ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(indic->type != LV_METER_INDICATOR_TYPE_ARC) continue;
 80110f0:	7923      	ldrb	r3, [r4, #4]
 80110f2:	2b03      	cmp	r3, #3
 80110f4:	d143      	bne.n	801117e <lv_meter_event+0x30e>
        arc_dsc.color = indic->type_data.arc.color;
 80110f6:	8b23      	ldrh	r3, [r4, #24]
 80110f8:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        arc_dsc.width = indic->type_data.arc.width;
 80110fc:	8a23      	ldrh	r3, [r4, #16]
 80110fe:	f8ad 3112 	strh.w	r3, [sp, #274]	; 0x112
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8011102:	7962      	ldrb	r2, [r4, #5]
 8011104:	2afd      	cmp	r2, #253	; 0xfd
 8011106:	bf97      	itett	ls
 8011108:	fa5f f389 	uxtbls.w	r3, r9
 801110c:	464b      	movhi	r3, r9
 801110e:	4353      	mulls	r3, r2
 8011110:	121b      	asrls	r3, r3, #8
 8011112:	f88d 311c 	strb.w	r3, [sp, #284]	; 0x11c
        lv_meter_scale_t * scale = indic->scale;
 8011116:	6827      	ldr	r7, [r4, #0]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation,
 8011118:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
                                     scale->rotation + scale->angle_range);
 801111c:	8bfa      	ldrh	r2, [r7, #30]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation,
 801111e:	441a      	add	r2, r3
 8011120:	9200      	str	r2, [sp, #0]
 8011122:	68a0      	ldr	r0, [r4, #8]
 8011124:	e9d7 1205 	ldrd	r1, r2, [r7, #20]
 8011128:	f013 fd78 	bl	8024c1c <lv_map>
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
 801112c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
                                   scale->rotation + scale->angle_range);
 8011130:	8bfa      	ldrh	r2, [r7, #30]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation,
 8011132:	4680      	mov	r8, r0
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
 8011134:	441a      	add	r2, r3
 8011136:	9200      	str	r2, [sp, #0]
 8011138:	68e0      	ldr	r0, [r4, #12]
 801113a:	e9d7 1205 	ldrd	r1, r2, [r7, #20]
 801113e:	f013 fd6d 	bl	8024c1c <lv_map>
        part_draw_dsc.radius = r_out + indic->type_data.arc.r_mod;
 8011142:	8b63      	ldrh	r3, [r4, #26]
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
 8011144:	4607      	mov	r7, r0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8011146:	aa4c      	add	r2, sp, #304	; 0x130
        part_draw_dsc.radius = r_out + indic->type_data.arc.r_mod;
 8011148:	442b      	add	r3, r5
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801114a:	211a      	movs	r1, #26
 801114c:	4630      	mov	r0, r6
        lv_draw_arc(draw_ctx, &arc_dsc, &scale_center, part_draw_dsc.radius, start_angle, end_angle);
 801114e:	b2bf      	uxth	r7, r7
        part_draw_dsc.radius = r_out + indic->type_data.arc.r_mod;
 8011150:	f8ad 316c 	strh.w	r3, [sp, #364]	; 0x16c
        part_draw_dsc.sub_part_ptr = indic;
 8011154:	945d      	str	r4, [sp, #372]	; 0x174
        part_draw_dsc.p1 = &scale_center;
 8011156:	f8cd b154 	str.w	fp, [sp, #340]	; 0x154
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801115a:	f7f3 fabf 	bl	80046dc <lv_event_send>
        lv_draw_arc(draw_ctx, &arc_dsc, &scale_center, part_draw_dsc.radius, start_angle, end_angle);
 801115e:	fa1f f388 	uxth.w	r3, r8
 8011162:	465a      	mov	r2, fp
 8011164:	a944      	add	r1, sp, #272	; 0x110
 8011166:	9805      	ldr	r0, [sp, #20]
 8011168:	9300      	str	r3, [sp, #0]
 801116a:	9701      	str	r7, [sp, #4]
 801116c:	f8bd 316c 	ldrh.w	r3, [sp, #364]	; 0x16c
 8011170:	f00d fb0b 	bl	801e78a <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8011174:	aa4c      	add	r2, sp, #304	; 0x130
 8011176:	211b      	movs	r1, #27
 8011178:	4630      	mov	r0, r6
 801117a:	f7f3 faaf 	bl	80046dc <lv_event_send>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801117e:	4621      	mov	r1, r4
 8011180:	9807      	ldr	r0, [sp, #28]
 8011182:	f013 fcad 	bl	8024ae0 <_lv_ll_get_prev>
 8011186:	4604      	mov	r4, r0
 8011188:	e6d4      	b.n	8010f34 <lv_meter_event+0xc4>
 801118a:	bf00      	nop
 801118c:	080292a4 	.word	0x080292a4
        part_draw_dsc.sub_part_ptr = scale;
 8011190:	945d      	str	r4, [sp, #372]	; 0x174
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 8011192:	89a5      	ldrh	r5, [r4, #12]
        lv_coord_t r_in_minor = r_out - scale->tick_length;
 8011194:	88a3      	ldrh	r3, [r4, #4]
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 8011196:	eba8 0205 	sub.w	r2, r8, r5
 801119a:	eba5 0508 	sub.w	r5, r5, r8
        lv_coord_t r_in_minor = r_out - scale->tick_length;
 801119e:	eba8 0103 	sub.w	r1, r8, r3
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 80111a2:	eba3 0308 	sub.w	r3, r3, r8
 80111a6:	b297      	uxth	r7, r2
 80111a8:	b212      	sxth	r2, r2
 80111aa:	9211      	str	r2, [sp, #68]	; 0x44
        area_inner_minor.x1 = p_center.x - r_in_minor;
 80111ac:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80111b0:	fa12 f083 	uxtah	r0, r2, r3
        area_inner_minor.x2 = p_center.x + r_in_minor;
 80111b4:	fa12 f281 	uxtah	r2, r2, r1
        area_inner_minor.x1 = p_center.x - r_in_minor;
 80111b8:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
        area_inner_minor.y1 = p_center.y - r_in_minor;
 80111bc:	f8bd 0056 	ldrh.w	r0, [sp, #86]	; 0x56
        area_inner_minor.x2 = p_center.x + r_in_minor;
 80111c0:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 80111c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
        area_inner_minor.y1 = p_center.y - r_in_minor;
 80111c8:	fa10 f383 	uxtah	r3, r0, r3
 80111cc:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        area_inner_minor.y2 = p_center.y + r_in_minor;
 80111d0:	fa10 f381 	uxtah	r3, r0, r1
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 80111d4:	a91b      	add	r1, sp, #108	; 0x6c
 80111d6:	a82a      	add	r0, sp, #168	; 0xa8
        area_inner_minor.y2 = p_center.y + r_in_minor;
 80111d8:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 80111dc:	2301      	movs	r3, #1
 80111de:	f7f7 f9a7 	bl	8008530 <lv_draw_mask_radius_init>
        area_inner_major.x1 = p_center.x - r_in_major;
 80111e2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 80111e6:	a91d      	add	r1, sp, #116	; 0x74
 80111e8:	a830      	add	r0, sp, #192	; 0xc0
        area_inner_major.x1 = p_center.x - r_in_major;
 80111ea:	fa13 f285 	uxtah	r2, r3, r5
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 80111ee:	3b01      	subs	r3, #1
        area_inner_major.x1 = p_center.x - r_in_major;
 80111f0:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 80111f4:	443b      	add	r3, r7
        area_inner_major.y1 = p_center.y - r_in_major;
 80111f6:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 80111fa:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 80111fe:	2301      	movs	r3, #1
        area_inner_major.y1 = p_center.y - r_in_major;
 8011200:	fa12 f585 	uxtah	r5, r2, r5
        area_inner_major.y2 = p_center.y + r_in_major - 1;
 8011204:	3a01      	subs	r2, #1
 8011206:	4417      	add	r7, r2
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 8011208:	f647 72ff 	movw	r2, #32767	; 0x7fff
        area_inner_major.y1 = p_center.y - r_in_major;
 801120c:	f8ad 5076 	strh.w	r5, [sp, #118]	; 0x76
        area_inner_major.y2 = p_center.y + r_in_major - 1;
 8011210:	f8ad 707a 	strh.w	r7, [sp, #122]	; 0x7a
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 8011214:	f7f7 f98c 	bl	8008530 <lv_draw_mask_radius_init>
        area_outer.x1 = p_center.x - r_out;
 8011218:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 801121c:	a836      	add	r0, sp, #216	; 0xd8
        area_outer.x1 = p_center.x - r_out;
 801121e:	eba2 0308 	sub.w	r3, r2, r8
        area_outer.x2 = p_center.x + r_out - 1;
 8011222:	3a01      	subs	r2, #1
        area_outer.x1 = p_center.x - r_out;
 8011224:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        area_outer.x2 = p_center.x + r_out - 1;
 8011228:	4442      	add	r2, r8
        area_outer.y1 = p_center.y - r_out;
 801122a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
        area_outer.x2 = p_center.x + r_out - 1;
 801122e:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 8011232:	f647 72ff 	movw	r2, #32767	; 0x7fff
        area_outer.y1 = p_center.y - r_out;
 8011236:	eba3 0108 	sub.w	r1, r3, r8
        area_outer.y2 = p_center.y + r_out - 1;
 801123a:	3b01      	subs	r3, #1
 801123c:	4443      	add	r3, r8
        area_outer.y1 = p_center.y - r_out;
 801123e:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 8011242:	a91f      	add	r1, sp, #124	; 0x7c
        area_outer.y2 = p_center.y + r_out - 1;
 8011244:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 8011248:	2300      	movs	r3, #0
 801124a:	f7f7 f971 	bl	8008530 <lv_draw_mask_radius_init>
        int16_t outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 801124e:	2100      	movs	r1, #0
 8011250:	a836      	add	r0, sp, #216	; 0xd8
 8011252:	f7f6 fff5 	bl	8008240 <lv_draw_mask_add>
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 8011256:	8963      	ldrh	r3, [r4, #10]
        int16_t outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 8011258:	9009      	str	r0, [sp, #36]	; 0x24
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 801125a:	b1d3      	cbz	r3, 8011292 <lv_meter_event+0x422>
 801125c:	3b01      	subs	r3, #1
 801125e:	9306      	str	r3, [sp, #24]
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 8011260:	2300      	movs	r3, #0
        for(i = 0; i < scale->tick_cnt; i++) {
 8011262:	8862      	ldrh	r2, [r4, #2]
 8011264:	9308      	str	r3, [sp, #32]
 8011266:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801126a:	429a      	cmp	r2, r3
 801126c:	d814      	bhi.n	8011298 <lv_meter_event+0x428>
        lv_draw_mask_free_param(&inner_minor_mask);
 801126e:	a82a      	add	r0, sp, #168	; 0xa8
 8011270:	f00e f858 	bl	801f324 <lv_draw_mask_free_param>
        lv_draw_mask_free_param(&inner_major_mask);
 8011274:	a830      	add	r0, sp, #192	; 0xc0
 8011276:	f00e f855 	bl	801f324 <lv_draw_mask_free_param>
        lv_draw_mask_free_param(&outer_mask);
 801127a:	a836      	add	r0, sp, #216	; 0xd8
 801127c:	f00e f852 	bl	801f324 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(outer_mask_id);
 8011280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011282:	f7f7 f813 	bl	80082ac <lv_draw_mask_remove_id>
    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 8011286:	4621      	mov	r1, r4
 8011288:	9810      	ldr	r0, [sp, #64]	; 0x40
 801128a:	f013 fc29 	bl	8024ae0 <_lv_ll_get_prev>
 801128e:	4604      	mov	r4, r0
 8011290:	e6a6      	b.n	8010fe0 <lv_meter_event+0x170>
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 8011292:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011296:	e7e2      	b.n	801125e <lv_meter_event+0x3ee>
            minor_cnt++;
 8011298:	9b06      	ldr	r3, [sp, #24]
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 801129a:	3a01      	subs	r2, #1
            minor_cnt++;
 801129c:	3301      	adds	r3, #1
 801129e:	9306      	str	r3, [sp, #24]
            if(minor_cnt == scale->tick_major_nth) {
 80112a0:	9906      	ldr	r1, [sp, #24]
 80112a2:	8963      	ldrh	r3, [r4, #10]
 80112a4:	4299      	cmp	r1, r3
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 80112a6:	f04f 0100 	mov.w	r1, #0
                minor_cnt = 0;
 80112aa:	bf05      	ittet	eq
 80112ac:	2300      	moveq	r3, #0
                major = true;
 80112ae:	f04f 0a01 	moveq.w	sl, #1
            bool major = false;
 80112b2:	f04f 0a00 	movne.w	sl, #0
                minor_cnt = 0;
 80112b6:	9306      	streq	r3, [sp, #24]
 80112b8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80112bc:	930c      	str	r3, [sp, #48]	; 0x30
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 80112be:	69a3      	ldr	r3, [r4, #24]
 80112c0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80112c2:	9300      	str	r3, [sp, #0]
 80112c4:	6963      	ldr	r3, [r4, #20]
 80112c6:	f013 fca9 	bl	8024c1c <lv_map>
 80112ca:	4681      	mov	r9, r0
            part_draw_dsc.value = value_of_line;
 80112cc:	905c      	str	r0, [sp, #368]	; 0x170
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 80112ce:	f1ba 0f00 	cmp.w	sl, #0
 80112d2:	f000 80ee 	beq.w	80114b2 <lv_meter_event+0x642>
 80112d6:	7a23      	ldrb	r3, [r4, #8]
 80112d8:	f003 031f 	and.w	r3, r3, #31
 80112dc:	930d      	str	r3, [sp, #52]	; 0x34
 80112de:	8923      	ldrh	r3, [r4, #8]
 80112e0:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80112e4:	930e      	str	r3, [sp, #56]	; 0x38
 80112e6:	7a63      	ldrb	r3, [r4, #9]
 80112e8:	08db      	lsrs	r3, r3, #3
 80112ea:	930a      	str	r3, [sp, #40]	; 0x28
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 80112ec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80112f0:	9807      	ldr	r0, [sp, #28]
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 80112f2:	930b      	str	r3, [sp, #44]	; 0x2c
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80112f4:	f013 fbed 	bl	8024ad2 <_lv_ll_get_tail>
 80112f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112fa:	4605      	mov	r5, r0
            lv_coord_t line_width = line_width_ori;
 80112fc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8011300:	e9dd 270d 	ldrd	r2, r7, [sp, #52]	; 0x34
 8011304:	2d00      	cmp	r5, #0
 8011306:	f040 80e2 	bne.w	80114ce <lv_meter_event+0x65e>
            int32_t angle_upscale = ((i * scale->angle_range) * 10) / (scale->tick_cnt - 1) +  + scale->rotation * 10;
 801130a:	8be1      	ldrh	r1, [r4, #30]
 801130c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801130e:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 8011312:	4341      	muls	r1, r0
 8011314:	200a      	movs	r0, #10
 8011316:	f10c 3cff 	add.w	ip, ip, #4294967295
            line_dsc.width = line_width;
 801131a:	f8ad b08e 	strh.w	fp, [sp, #142]	; 0x8e
            int32_t angle_upscale = ((i * scale->angle_range) * 10) / (scale->tick_cnt - 1) +  + scale->rotation * 10;
 801131e:	4341      	muls	r1, r0
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 8011320:	f10d 0b54 	add.w	fp, sp, #84	; 0x54
            int32_t angle_upscale = ((i * scale->angle_range) * 10) / (scale->tick_cnt - 1) +  + scale->rotation * 10;
 8011324:	fb91 f1fc 	sdiv	r1, r1, ip
 8011328:	f8b4 c020 	ldrh.w	ip, [r4, #32]
 801132c:	fb1c 1100 	smlabb	r1, ip, r0, r1
 8011330:	910f      	str	r1, [sp, #60]	; 0x3c
            line_dsc.color = line_color;
 8011332:	f89d 108c 	ldrb.w	r1, [sp, #140]	; 0x8c
 8011336:	f362 0104 	bfi	r1, r2, #0, #5
 801133a:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
 801133e:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
            lv_point_transform(&p_outer, angle_upscale, 256, &p_center);
 8011342:	990f      	ldr	r1, [sp, #60]	; 0x3c
            line_dsc.color = line_color;
 8011344:	f367 124a 	bfi	r2, r7, #5, #6
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 8011348:	af16      	add	r7, sp, #88	; 0x58
            line_dsc.color = line_color;
 801134a:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 801134e:	f3c2 2207 	ubfx	r2, r2, #8, #8
            lv_point_transform(&p_outer, angle_upscale, 256, &p_center);
 8011352:	4638      	mov	r0, r7
            line_dsc.color = line_color;
 8011354:	f363 02c7 	bfi	r2, r3, #3, #5
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 8011358:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
            line_dsc.color = line_color;
 801135c:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 8011360:	4443      	add	r3, r8
 8011362:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011364:	4413      	add	r3, r2
            lv_point_transform(&p_outer, angle_upscale, 256, &p_center);
 8011366:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 801136a:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p_outer.y = p_center.y;
 801136e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8011372:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            lv_point_transform(&p_outer, angle_upscale, 256, &p_center);
 8011376:	465b      	mov	r3, fp
 8011378:	f001 f868 	bl	801244c <lv_point_transform>
            part_draw_dsc.id = i;
 801137c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            part_draw_dsc.p2 = &p_outer;
 801137e:	e9cd b755 	strd	fp, r7, [sp, #340]	; 0x154
            part_draw_dsc.label_dsc = &label_dsc;
 8011382:	af3c      	add	r7, sp, #240	; 0xf0
            part_draw_dsc.id = i;
 8011384:	935a      	str	r3, [sp, #360]	; 0x168
            part_draw_dsc.label_dsc = &label_dsc;
 8011386:	9751      	str	r7, [sp, #324]	; 0x144
            if(major) {
 8011388:	f1ba 0f00 	cmp.w	sl, #0
 801138c:	f000 80fe 	beq.w	801158c <lv_meter_event+0x71c>
                lv_draw_mask_remove_id(outer_mask_id);
 8011390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011392:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 8011396:	f7f6 ff89 	bl	80082ac <lv_draw_mask_remove_id>
                uint32_t r_text = r_in_major - scale->label_gap;
 801139a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801139c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
                lv_point_transform(&p, angle_upscale, 256, &p_center);
 80113a0:	a817      	add	r0, sp, #92	; 0x5c
 80113a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
                uint32_t r_text = r_in_major - scale->label_gap;
 80113a4:	1ad3      	subs	r3, r2, r3
                p.x = p_center.x + r_text;
 80113a6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80113aa:	4413      	add	r3, r2
                lv_point_transform(&p, angle_upscale, 256, &p_center);
 80113ac:	f44f 7280 	mov.w	r2, #256	; 0x100
                p.x = p_center.x + r_text;
 80113b0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                p.y = p_center.y;
 80113b4:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80113b8:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                lv_point_transform(&p, angle_upscale, 256, &p_center);
 80113bc:	465b      	mov	r3, fp
 80113be:	f001 f845 	bl	801244c <lv_point_transform>
 80113c2:	4639      	mov	r1, r7
                lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, value_of_line);
 80113c4:	af26      	add	r7, sp, #152	; 0x98
 80113c6:	2220      	movs	r2, #32
 80113c8:	4650      	mov	r0, sl
 80113ca:	f009 f99e 	bl	801a70a <memcpy>
 80113ce:	464b      	mov	r3, r9
 80113d0:	4aa3      	ldr	r2, [pc, #652]	; (8011660 <lv_meter_event+0x7f0>)
 80113d2:	2110      	movs	r1, #16
 80113d4:	4638      	mov	r0, r7
                part_draw_dsc.label_dsc = &label_dsc_tmp;
 80113d6:	f8cd a144 	str.w	sl, [sp, #324]	; 0x144
                lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, value_of_line);
 80113da:	f7f1 fc65 	bl	8002ca8 <snprintf>
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80113de:	aa4c      	add	r2, sp, #304	; 0x130
 80113e0:	211a      	movs	r1, #26
 80113e2:	4630      	mov	r0, r6
                part_draw_dsc.text = buf;
 80113e4:	9757      	str	r7, [sp, #348]	; 0x15c
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80113e6:	f7f3 f979 	bl	80046dc <lv_event_send>
                lv_txt_get_size(&label_size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 80113ea:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80113ee:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 80113f0:	9957      	ldr	r1, [sp, #348]	; 0x15c
 80113f2:	a818      	add	r0, sp, #96	; 0x60
 80113f4:	9301      	str	r3, [sp, #4]
 80113f6:	f9bd 3102 	ldrsh.w	r3, [sp, #258]	; 0x102
 80113fa:	9502      	str	r5, [sp, #8]
 80113fc:	9300      	str	r3, [sp, #0]
 80113fe:	f9bd 3104 	ldrsh.w	r3, [sp, #260]	; 0x104
 8011402:	f014 fa19 	bl	8025838 <lv_txt_get_size>
                label_cord.x1 = p.x - label_size.x / 2;
 8011406:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
                label_cord.y1 = p.y - label_size.y / 2;
 801140a:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
                label_cord.x1 = p.x - label_size.x / 2;
 801140e:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8011412:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
                label_cord.y1 = p.y - label_size.y / 2;
 8011416:	eb01 77d1 	add.w	r7, r1, r1, lsr #31
                lv_draw_label(draw_ctx, part_draw_dsc.label_dsc, &label_cord, part_draw_dsc.text, NULL);
 801141a:	9500      	str	r5, [sp, #0]
                label_cord.x1 = p.x - label_size.x / 2;
 801141c:	eba2 0263 	sub.w	r2, r2, r3, asr #1
                label_cord.y1 = p.y - label_size.y / 2;
 8011420:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8011424:	eba3 0367 	sub.w	r3, r3, r7, asr #1
                label_cord.x1 = p.x - label_size.x / 2;
 8011428:	b292      	uxth	r2, r2
                label_cord.y1 = p.y - label_size.y / 2;
 801142a:	b29b      	uxth	r3, r3
                label_cord.x1 = p.x - label_size.x / 2;
 801142c:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
                label_cord.x2 = label_cord.x1 + label_size.x;
 8011430:	4402      	add	r2, r0
                label_cord.y1 = p.y - label_size.y / 2;
 8011432:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
                label_cord.y2 = label_cord.y1 + label_size.y;
 8011436:	440b      	add	r3, r1
                lv_draw_label(draw_ctx, part_draw_dsc.label_dsc, &label_cord, part_draw_dsc.text, NULL);
 8011438:	9805      	ldr	r0, [sp, #20]
 801143a:	9951      	ldr	r1, [sp, #324]	; 0x144
                label_cord.x2 = label_cord.x1 + label_size.x;
 801143c:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
                lv_draw_label(draw_ctx, part_draw_dsc.label_dsc, &label_cord, part_draw_dsc.text, NULL);
 8011440:	aa21      	add	r2, sp, #132	; 0x84
                label_cord.y2 = label_cord.y1 + label_size.y;
 8011442:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                lv_draw_label(draw_ctx, part_draw_dsc.label_dsc, &label_cord, part_draw_dsc.text, NULL);
 8011446:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 8011448:	f7f6 fc46 	bl	8007cd8 <lv_draw_label>
                outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 801144c:	4629      	mov	r1, r5
 801144e:	a836      	add	r0, sp, #216	; 0xd8
 8011450:	f7f6 fef6 	bl	8008240 <lv_draw_mask_add>
 8011454:	9009      	str	r0, [sp, #36]	; 0x24
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 8011456:	a830      	add	r0, sp, #192	; 0xc0
 8011458:	2100      	movs	r1, #0
 801145a:	f7f6 fef1 	bl	8008240 <lv_draw_mask_add>
 801145e:	4605      	mov	r5, r0
            lv_draw_line(draw_ctx, &line_dsc, &p_outer, &p_center);
 8011460:	ab15      	add	r3, sp, #84	; 0x54
 8011462:	aa16      	add	r2, sp, #88	; 0x58
 8011464:	a923      	add	r1, sp, #140	; 0x8c
 8011466:	9805      	ldr	r0, [sp, #20]
 8011468:	f00d fa7a 	bl	801e960 <lv_draw_line>
            lv_draw_mask_remove_id(inner_act_mask_id);
 801146c:	4628      	mov	r0, r5
 801146e:	f7f6 ff1d 	bl	80082ac <lv_draw_mask_remove_id>
            lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, &part_draw_dsc);
 8011472:	aa4c      	add	r2, sp, #304	; 0x130
 8011474:	2116      	movs	r1, #22
 8011476:	4630      	mov	r0, r6
 8011478:	f7f3 f930 	bl	80046dc <lv_event_send>
            line_dsc.color = line_color_ori;
 801147c:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
 8011480:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011482:	f362 0304 	bfi	r3, r2, #0, #5
 8011486:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011488:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 801148c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8011490:	f362 134a 	bfi	r3, r2, #5, #6
 8011494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011496:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
 801149a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801149e:	f362 03c7 	bfi	r3, r2, #3, #5
 80114a2:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
            line_dsc.width = line_width_ori;
 80114a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114a8:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(i = 0; i < scale->tick_cnt; i++) {
 80114ac:	9b08      	ldr	r3, [sp, #32]
 80114ae:	3301      	adds	r3, #1
 80114b0:	e6d7      	b.n	8011262 <lv_meter_event+0x3f2>
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 80114b2:	7823      	ldrb	r3, [r4, #0]
 80114b4:	f003 031f 	and.w	r3, r3, #31
 80114b8:	930d      	str	r3, [sp, #52]	; 0x34
 80114ba:	8823      	ldrh	r3, [r4, #0]
 80114bc:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80114c0:	930e      	str	r3, [sp, #56]	; 0x38
 80114c2:	7863      	ldrb	r3, [r4, #1]
 80114c4:	08db      	lsrs	r3, r3, #3
 80114c6:	930a      	str	r3, [sp, #40]	; 0x28
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 80114c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80114cc:	e710      	b.n	80112f0 <lv_meter_event+0x480>
                if(indic->type != LV_METER_INDICATOR_TYPE_SCALE_LINES) continue;
 80114ce:	7929      	ldrb	r1, [r5, #4]
 80114d0:	2902      	cmp	r1, #2
 80114d2:	d114      	bne.n	80114fe <lv_meter_event+0x68e>
                if(value_of_line >= indic->start_value && value_of_line <= indic->end_value) {
 80114d4:	68a9      	ldr	r1, [r5, #8]
 80114d6:	4589      	cmp	r9, r1
 80114d8:	db11      	blt.n	80114fe <lv_meter_event+0x68e>
 80114da:	68e8      	ldr	r0, [r5, #12]
 80114dc:	4581      	cmp	r9, r0
 80114de:	dc0e      	bgt.n	80114fe <lv_meter_event+0x68e>
                    line_width += indic->type_data.scale_lines.width_mod;
 80114e0:	8a2b      	ldrh	r3, [r5, #16]
                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
 80114e2:	8a6f      	ldrh	r7, [r5, #18]
                    line_width += indic->type_data.scale_lines.width_mod;
 80114e4:	445b      	add	r3, fp
 80114e6:	fa0f fb83 	sxth.w	fp, r3
                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
 80114ea:	8aab      	ldrh	r3, [r5, #20]
 80114ec:	429f      	cmp	r7, r3
 80114ee:	d110      	bne.n	8011512 <lv_meter_event+0x6a2>
                        line_color = indic->type_data.scale_lines.color_start;
 80114f0:	7caa      	ldrb	r2, [r5, #18]
 80114f2:	f3c7 1745 	ubfx	r7, r7, #5, #6
 80114f6:	7ceb      	ldrb	r3, [r5, #19]
 80114f8:	f002 021f 	and.w	r2, r2, #31
 80114fc:	08db      	lsrs	r3, r3, #3
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80114fe:	4629      	mov	r1, r5
 8011500:	9807      	ldr	r0, [sp, #28]
 8011502:	9313      	str	r3, [sp, #76]	; 0x4c
 8011504:	920f      	str	r2, [sp, #60]	; 0x3c
 8011506:	f013 faeb 	bl	8024ae0 <_lv_ll_get_prev>
 801150a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801150c:	4605      	mov	r5, r0
 801150e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011510:	e6f8      	b.n	8011304 <lv_meter_event+0x494>
                        if(indic->type_data.scale_lines.local_grad) {
 8011512:	7dab      	ldrb	r3, [r5, #22]
 8011514:	22ff      	movs	r2, #255	; 0xff
 8011516:	f013 0301 	ands.w	r3, r3, #1
                            ratio = lv_map(value_of_line, indic->start_value, indic->end_value, LV_OPA_TRANSP, LV_OPA_COVER);
 801151a:	9200      	str	r2, [sp, #0]
 801151c:	bf1c      	itt	ne
 801151e:	2300      	movne	r3, #0
 8011520:	4602      	movne	r2, r0
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 8011522:	4648      	mov	r0, r9
 8011524:	bf08      	it	eq
 8011526:	e9d4 1205 	ldrdeq	r1, r2, [r4, #20]
 801152a:	f013 fb77 	bl	8024c1c <lv_map>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801152e:	7ceb      	ldrb	r3, [r5, #19]
 8011530:	b2c0      	uxtb	r0, r0
 8011532:	7d69      	ldrb	r1, [r5, #21]
 8011534:	08db      	lsrs	r3, r3, #3
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011536:	8a6f      	ldrh	r7, [r5, #18]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011538:	f1c0 02ff 	rsb	r2, r0, #255	; 0xff
 801153c:	08c9      	lsrs	r1, r1, #3
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801153e:	f3c7 1745 	ubfx	r7, r7, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011542:	f895 e014 	ldrb.w	lr, [r5, #20]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011546:	4353      	muls	r3, r2
 8011548:	f248 0c81 	movw	ip, #32897	; 0x8081
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801154c:	4357      	muls	r7, r2
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801154e:	f00e 0e1f 	and.w	lr, lr, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011552:	fb01 3300 	mla	r3, r1, r0, r3
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011556:	8aa9      	ldrh	r1, [r5, #20]
 8011558:	f3c1 1145 	ubfx	r1, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801155c:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801155e:	fb01 7700 	mla	r7, r1, r0, r7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011562:	7ca9      	ldrb	r1, [r5, #18]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011564:	fb0c f303 	mul.w	r3, ip, r3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011568:	f001 011f 	and.w	r1, r1, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801156c:	3780      	adds	r7, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801156e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011572:	434a      	muls	r2, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011574:	fb0c f707 	mul.w	r7, ip, r7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011578:	fb0e 2200 	mla	r2, lr, r0, r2
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801157c:	f3c7 57c5 	ubfx	r7, r7, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011580:	3280      	adds	r2, #128	; 0x80
 8011582:	fb0c f202 	mul.w	r2, ip, r2
 8011586:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    return ret;
 801158a:	e7b8      	b.n	80114fe <lv_meter_event+0x68e>
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801158c:	aa4c      	add	r2, sp, #304	; 0x130
 801158e:	211a      	movs	r1, #26
 8011590:	4630      	mov	r0, r6
                part_draw_dsc.label_dsc = NULL;
 8011592:	f8cd a144 	str.w	sl, [sp, #324]	; 0x144
                part_draw_dsc.text = NULL;
 8011596:	f8cd a15c 	str.w	sl, [sp, #348]	; 0x15c
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801159a:	f7f3 f89f 	bl	80046dc <lv_event_send>
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 801159e:	a82a      	add	r0, sp, #168	; 0xa8
 80115a0:	e75a      	b.n	8011458 <lv_meter_event+0x5e8>
        lv_meter_scale_t * scale = indic->scale;
 80115a2:	6827      	ldr	r7, [r4, #0]
        part_draw_dsc.sub_part_ptr = indic;
 80115a4:	945d      	str	r4, [sp, #372]	; 0x174
        if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_LINE) {
 80115a6:	7923      	ldrb	r3, [r4, #4]
 80115a8:	2b01      	cmp	r3, #1
 80115aa:	d15b      	bne.n	8011664 <lv_meter_event+0x7f4>
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80115ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 80115b0:	f647 7bff 	movw	fp, #32767	; 0x7fff
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80115b4:	8bfa      	ldrh	r2, [r7, #30]
 80115b6:	441a      	add	r2, r3
 80115b8:	9200      	str	r2, [sp, #0]
 80115ba:	68e0      	ldr	r0, [r4, #12]
 80115bc:	e9d7 1205 	ldrd	r1, r2, [r7, #20]
 80115c0:	f013 fb2c 	bl	8024c1c <lv_map>
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 80115c4:	8a63      	ldrh	r3, [r4, #18]
 80115c6:	8bba      	ldrh	r2, [r7, #28]
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80115c8:	4601      	mov	r1, r0
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 80115ca:	442b      	add	r3, r5
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 80115cc:	b200      	sxth	r0, r0
 80115ce:	9106      	str	r1, [sp, #24]
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 80115d0:	189f      	adds	r7, r3, r2
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 80115d2:	f001 f833 	bl	801263c <lv_trigo_sin>
 80115d6:	9906      	ldr	r1, [sp, #24]
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 80115d8:	b23f      	sxth	r7, r7
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 80115da:	fb00 f207 	mul.w	r2, r0, r7
 80115de:	f8bd 00aa 	ldrh.w	r0, [sp, #170]	; 0xaa
 80115e2:	fb92 f2fb 	sdiv	r2, r2, fp
 80115e6:	4402      	add	r2, r0
 80115e8:	f101 005a 	add.w	r0, r1, #90	; 0x5a
 80115ec:	b200      	sxth	r0, r0
 80115ee:	f8ad 20da 	strh.w	r2, [sp, #218]	; 0xda
 80115f2:	f001 f823 	bl	801263c <lv_trigo_sin>
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 80115f6:	4378      	muls	r0, r7
 80115f8:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
            part_draw_dsc.line_dsc = &line_dsc;
 80115fc:	af3c      	add	r7, sp, #240	; 0xf0
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80115fe:	211a      	movs	r1, #26
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 8011600:	fb90 f0fb 	sdiv	r0, r0, fp
 8011604:	4418      	add	r0, r3
 8011606:	f8ad 00d8 	strh.w	r0, [sp, #216]	; 0xd8
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801160a:	4630      	mov	r0, r6
            line_dsc.color = indic->type_data.needle_line.color;
 801160c:	8aa3      	ldrh	r3, [r4, #20]
 801160e:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
            line_dsc.width = indic->type_data.needle_line.width;
 8011612:	8a23      	ldrh	r3, [r4, #16]
 8011614:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8011618:	7962      	ldrb	r2, [r4, #5]
            part_draw_dsc.line_dsc = &line_dsc;
 801161a:	9752      	str	r7, [sp, #328]	; 0x148
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801161c:	2afd      	cmp	r2, #253	; 0xfd
 801161e:	bf96      	itet	ls
 8011620:	fa5f f388 	uxtbls.w	r3, r8
 8011624:	464b      	movhi	r3, r9
 8011626:	4353      	mulls	r3, r2
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8011628:	aa4c      	add	r2, sp, #304	; 0x130
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801162a:	bf98      	it	ls
 801162c:	0a1b      	lsrls	r3, r3, #8
 801162e:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_LINE;
 8011632:	2301      	movs	r3, #1
 8011634:	935a      	str	r3, [sp, #360]	; 0x168
            part_draw_dsc.p2 = &p_end;
 8011636:	ab36      	add	r3, sp, #216	; 0xd8
 8011638:	9356      	str	r3, [sp, #344]	; 0x158
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801163a:	f7f3 f84f 	bl	80046dc <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &scale_center, &p_end);
 801163e:	ab36      	add	r3, sp, #216	; 0xd8
 8011640:	aa2a      	add	r2, sp, #168	; 0xa8
 8011642:	4639      	mov	r1, r7
 8011644:	9805      	ldr	r0, [sp, #20]
 8011646:	f00d f98b 	bl	801e960 <lv_draw_line>
            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_IMG;
            part_draw_dsc.img_dsc = &img_dsc;

            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
            lv_draw_img(draw_ctx, &img_dsc, &a, indic->type_data.needle_img.src);
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801164a:	aa4c      	add	r2, sp, #304	; 0x130
 801164c:	211b      	movs	r1, #27
 801164e:	4630      	mov	r0, r6
 8011650:	f7f3 f844 	bl	80046dc <lv_event_send>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8011654:	4621      	mov	r1, r4
 8011656:	9807      	ldr	r0, [sp, #28]
 8011658:	f013 fa42 	bl	8024ae0 <_lv_ll_get_prev>
 801165c:	4604      	mov	r4, r0
 801165e:	e4fe      	b.n	801105e <lv_meter_event+0x1ee>
 8011660:	0802e035 	.word	0x0802e035
        else if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_IMG) {
 8011664:	2b00      	cmp	r3, #0
 8011666:	d1f5      	bne.n	8011654 <lv_meter_event+0x7e4>
            if(indic->type_data.needle_img.src == NULL) continue;
 8011668:	6923      	ldr	r3, [r4, #16]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d0f2      	beq.n	8011654 <lv_meter_event+0x7e4>
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 801166e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011672:	8bfa      	ldrh	r2, [r7, #30]
 8011674:	441a      	add	r2, r3
 8011676:	9200      	str	r2, [sp, #0]
 8011678:	68e0      	ldr	r0, [r4, #12]
 801167a:	e9d7 1205 	ldrd	r1, r2, [r7, #20]
 801167e:	f013 facd 	bl	8024c1c <lv_map>
            lv_img_decoder_get_info(indic->type_data.needle_img.src, &info);
 8011682:	a930      	add	r1, sp, #192	; 0xc0
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 8011684:	4607      	mov	r7, r0
            lv_img_decoder_get_info(indic->type_data.needle_img.src, &info);
 8011686:	6920      	ldr	r0, [r4, #16]
 8011688:	f7f7 fc5a 	bl	8008f40 <lv_img_decoder_get_info>
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 801168c:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 8011690:	f8bd 20a8 	ldrh.w	r2, [sp, #168]	; 0xa8
            angle = angle * 10;
 8011694:	fb0a f707 	mul.w	r7, sl, r7
            a.x2 = a.x1 + info.w - 1;
 8011698:	9930      	ldr	r1, [sp, #192]	; 0xc0
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 801169a:	eba2 020c 	sub.w	r2, r2, ip
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 801169e:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
            a.x2 = a.x1 + info.w - 1;
 80116a2:	f3c1 218a 	ubfx	r1, r1, #10, #11
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 80116a6:	b292      	uxth	r2, r2
            a.x2 = a.x1 + info.w - 1;
 80116a8:	3901      	subs	r1, #1
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 80116aa:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
            a.x2 = a.x1 + info.w - 1;
 80116ae:	440a      	add	r2, r1
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 80116b0:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80116b4:	211a      	movs	r1, #26
            a.x2 = a.x1 + info.w - 1;
 80116b6:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 80116ba:	1a1b      	subs	r3, r3, r0
            a.y2 = a.y1 + info.h - 1;
 80116bc:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 80116c0:	b29b      	uxth	r3, r3
            a.y2 = a.y1 + info.h - 1;
 80116c2:	f3c2 124a 	ubfx	r2, r2, #5, #11
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 80116c6:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
            a.y2 = a.y1 + info.h - 1;
 80116ca:	3a01      	subs	r2, #1
 80116cc:	4413      	add	r3, r2
 80116ce:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80116d2:	7962      	ldrb	r2, [r4, #5]
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
 80116d4:	f8ad 0116 	strh.w	r0, [sp, #278]	; 0x116
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80116d8:	4630      	mov	r0, r6
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80116da:	2afd      	cmp	r2, #253	; 0xfd
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
 80116dc:	f8ad c114 	strh.w	ip, [sp, #276]	; 0x114
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80116e0:	bf96      	itet	ls
 80116e2:	fa5f f388 	uxtbls.w	r3, r8
 80116e6:	464b      	movhi	r3, r9
 80116e8:	4353      	mulls	r3, r2
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80116ea:	aa4c      	add	r2, sp, #304	; 0x130
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80116ec:	bf98      	it	ls
 80116ee:	0a1b      	lsrls	r3, r3, #8
            if(angle > 3600) angle -= 3600;
 80116f0:	f5b7 6f61 	cmp.w	r7, #3600	; 0xe10
 80116f4:	bfc8      	it	gt
 80116f6:	f5a7 6761 	subgt.w	r7, r7, #3600	; 0xe10
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80116fa:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_IMG;
 80116fe:	2302      	movs	r3, #2
            img_dsc.angle = angle;
 8011700:	f8ad 7110 	strh.w	r7, [sp, #272]	; 0x110
            part_draw_dsc.img_dsc = &img_dsc;
 8011704:	af44      	add	r7, sp, #272	; 0x110
            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_IMG;
 8011706:	935a      	str	r3, [sp, #360]	; 0x168
            part_draw_dsc.img_dsc = &img_dsc;
 8011708:	9753      	str	r7, [sp, #332]	; 0x14c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801170a:	f7f2 ffe7 	bl	80046dc <lv_event_send>
            lv_draw_img(draw_ctx, &img_dsc, &a, indic->type_data.needle_img.src);
 801170e:	6923      	ldr	r3, [r4, #16]
 8011710:	aa36      	add	r2, sp, #216	; 0xd8
 8011712:	4639      	mov	r1, r7
 8011714:	9805      	ldr	r0, [sp, #20]
 8011716:	f7f6 f9b1 	bl	8007a7c <lv_draw_img>
 801171a:	e796      	b.n	801164a <lv_meter_event+0x7da>

0801171c <lv_spinbox_updatevalue>:
        }
    }
}

static void lv_spinbox_updatevalue(lv_obj_t * obj)
{
 801171c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011720:	b08a      	sub	sp, #40	; 0x28
 8011722:	4604      	mov	r4, r0
    memset(dst, 0x00, len);
 8011724:	2212      	movs	r2, #18
 8011726:	2100      	movs	r1, #0
 8011728:	a805      	add	r0, sp, #20
 801172a:	f008 fff9 	bl	801a720 <memset>
    char buf[LV_SPINBOX_MAX_DIGIT_COUNT + 8];
    lv_memset_00(buf, sizeof(buf));
    char * buf_p = buf;
    uint8_t cur_shift_left = 0;

    if(spinbox->range_min < 0) {  // hide sign if there are only positive values
 801172e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011730:	2b00      	cmp	r3, #0
 8011732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011734:	da5c      	bge.n	80117f0 <lv_spinbox_updatevalue+0xd4>
        /*Add the sign*/
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 8011736:	2b00      	cmp	r3, #0
    uint8_t cur_shift_left = 0;
 8011738:	f04f 0500 	mov.w	r5, #0
        buf_p++;
 801173c:	f10d 0615 	add.w	r6, sp, #21
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 8011740:	bfb4      	ite	lt
 8011742:	222d      	movlt	r2, #45	; 0x2d
 8011744:	222b      	movge	r2, #43	; 0x2b
 8011746:	f88d 2014 	strb.w	r2, [sp, #20]
    }

    int32_t i;
    char digits[LV_SPINBOX_MAX_DIGIT_COUNT + 4];
    /*Convert the numbers to string (the sign is already handled so always covert positive number)*/
    lv_snprintf(digits, sizeof(digits), "%" LV_PRId32, LV_ABS(spinbox->value));
 801174a:	2b00      	cmp	r3, #0
 801174c:	af01      	add	r7, sp, #4
 801174e:	4a35      	ldr	r2, [pc, #212]	; (8011824 <lv_spinbox_updatevalue+0x108>)
 8011750:	f04f 010e 	mov.w	r1, #14
 8011754:	bfb8      	it	lt
 8011756:	425b      	neglt	r3, r3
 8011758:	4638      	mov	r0, r7
 801175a:	f7f1 faa5 	bl	8002ca8 <snprintf>

    /*Add leading zeros*/
    int lz_cnt = spinbox->digit_count - (int)strlen(digits);
 801175e:	f894 8074 	ldrb.w	r8, [r4, #116]	; 0x74
 8011762:	4638      	mov	r0, r7
 8011764:	f008 080f 	and.w	r8, r8, #15
 8011768:	f008 ffbc 	bl	801a6e4 <strlen>
 801176c:	eba8 0800 	sub.w	r8, r8, r0
    if(lz_cnt > 0) {
 8011770:	f1b8 0f00 	cmp.w	r8, #0
 8011774:	dd13      	ble.n	801179e <lv_spinbox_updatevalue+0x82>
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 8011776:	4638      	mov	r0, r7
 8011778:	f008 ffb4 	bl	801a6e4 <strlen>
 801177c:	463a      	mov	r2, r7
 801177e:	b283      	uxth	r3, r0
 8011780:	3301      	adds	r3, #1
 8011782:	443b      	add	r3, r7
            digits[i + lz_cnt] = digits[i];
 8011784:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 8011788:	42bb      	cmp	r3, r7
            digits[i + lz_cnt] = digits[i];
 801178a:	f803 1008 	strb.w	r1, [r3, r8]
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 801178e:	d1f9      	bne.n	8011784 <lv_spinbox_updatevalue+0x68>
        }
        for(i = 0; i < lz_cnt; i++) {
 8011790:	2300      	movs	r3, #0
            digits[i] = '0';
 8011792:	2130      	movs	r1, #48	; 0x30
        for(i = 0; i < lz_cnt; i++) {
 8011794:	3301      	adds	r3, #1
            digits[i] = '0';
 8011796:	f802 1b01 	strb.w	r1, [r2], #1
        for(i = 0; i < lz_cnt; i++) {
 801179a:	4598      	cmp	r8, r3
 801179c:	d1fa      	bne.n	8011794 <lv_spinbox_updatevalue+0x78>
        }
    }

    int32_t intDigits;
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 801179e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 80117a2:	4638      	mov	r0, r7

    /*Add the decimal part*/
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 80117a4:	2300      	movs	r3, #0
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 80117a6:	2a0f      	cmp	r2, #15
 80117a8:	bf94      	ite	ls
 80117aa:	f002 080f 	andls.w	r8, r2, #15
 80117ae:	ea4f 1812 	movhi.w	r8, r2, lsr #4
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 80117b2:	4543      	cmp	r3, r8
 80117b4:	d002      	beq.n	80117bc <lv_spinbox_updatevalue+0xa0>
 80117b6:	f810 1b01 	ldrb.w	r1, [r0], #1
 80117ba:	b9e1      	cbnz	r1, 80117f6 <lv_spinbox_updatevalue+0xda>
        (*buf_p) = digits[i];
        buf_p++;
    }

    if(spinbox->dec_point_pos != 0) {
 80117bc:	2a0f      	cmp	r2, #15
 80117be:	d81e      	bhi.n	80117fe <lv_spinbox_updatevalue+0xe2>
            buf_p++;
        }
    }

    /*Refresh the text*/
    lv_textarea_set_text(obj, (char *)buf);
 80117c0:	a905      	add	r1, sp, #20
 80117c2:	4620      	mov	r0, r4
 80117c4:	f006 ff0c 	bl	80185e0 <lv_textarea_set_text>

    /*Set the cursor position*/
    int32_t step    = spinbox->step;
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 80117c8:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    int32_t step    = spinbox->step;
 80117cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
    while(step >= 10) {
        step /= 10;
 80117ce:	220a      	movs	r2, #10
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 80117d0:	f001 010f 	and.w	r1, r1, #15
    while(step >= 10) {
 80117d4:	2b09      	cmp	r3, #9
 80117d6:	dc20      	bgt.n	801181a <lv_spinbox_updatevalue+0xfe>
        cur_pos--;
    }

    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 80117d8:	4541      	cmp	r1, r8

    cur_pos -= cur_shift_left;

    lv_textarea_set_cursor_pos(obj, cur_pos);
 80117da:	4620      	mov	r0, r4
    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 80117dc:	bfc4      	itt	gt
 80117de:	3101      	addgt	r1, #1
 80117e0:	b2c9      	uxtbgt	r1, r1
    cur_pos -= cur_shift_left;
 80117e2:	1b49      	subs	r1, r1, r5
    lv_textarea_set_cursor_pos(obj, cur_pos);
 80117e4:	b2c9      	uxtb	r1, r1
 80117e6:	f006 fcbf 	bl	8018168 <lv_textarea_set_cursor_pos>
}
 80117ea:	b00a      	add	sp, #40	; 0x28
 80117ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        cur_shift_left++;
 80117f0:	2501      	movs	r5, #1
    char * buf_p = buf;
 80117f2:	ae05      	add	r6, sp, #20
 80117f4:	e7a9      	b.n	801174a <lv_spinbox_updatevalue+0x2e>
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 80117f6:	3301      	adds	r3, #1
        (*buf_p) = digits[i];
 80117f8:	f806 1b01 	strb.w	r1, [r6], #1
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 80117fc:	e7d9      	b.n	80117b2 <lv_spinbox_updatevalue+0x96>
        (*buf_p) = '.';
 80117fe:	212e      	movs	r1, #46	; 0x2e
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 8011800:	f002 020f 	and.w	r2, r2, #15
        (*buf_p) = '.';
 8011804:	f806 1b01 	strb.w	r1, [r6], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 8011808:	429a      	cmp	r2, r3
 801180a:	ddd9      	ble.n	80117c0 <lv_spinbox_updatevalue+0xa4>
 801180c:	5cf9      	ldrb	r1, [r7, r3]
 801180e:	2900      	cmp	r1, #0
 8011810:	d0d6      	beq.n	80117c0 <lv_spinbox_updatevalue+0xa4>
 8011812:	3301      	adds	r3, #1
            (*buf_p) = digits[i];
 8011814:	f806 1b01 	strb.w	r1, [r6], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 8011818:	e7f6      	b.n	8011808 <lv_spinbox_updatevalue+0xec>
        cur_pos--;
 801181a:	3901      	subs	r1, #1
        step /= 10;
 801181c:	fb93 f3f2 	sdiv	r3, r3, r2
        cur_pos--;
 8011820:	b2c9      	uxtb	r1, r1
 8011822:	e7d7      	b.n	80117d4 <lv_spinbox_updatevalue+0xb8>
 8011824:	0802e035 	.word	0x0802e035

08011828 <lv_spinbox_constructor>:
{
 8011828:	b538      	push	{r3, r4, r5, lr}
    spinbox->range_max          = 99999;
 801182a:	2200      	movs	r2, #0
 801182c:	4b10      	ldr	r3, [pc, #64]	; (8011870 <lv_spinbox_constructor+0x48>)
    spinbox->step               = 1;
 801182e:	2501      	movs	r5, #1
{
 8011830:	460c      	mov	r4, r1
    spinbox->range_max          = 99999;
 8011832:	e9c1 2319 	strd	r2, r3, [r1, #100]	; 0x64
    spinbox->step               = 1;
 8011836:	4b0f      	ldr	r3, [pc, #60]	; (8011874 <lv_spinbox_constructor+0x4c>)
    lv_textarea_set_one_line(obj, true);
 8011838:	4620      	mov	r0, r4
    spinbox->step               = 1;
 801183a:	e9c1 351b 	strd	r3, r5, [r1, #108]	; 0x6c
    spinbox->digit_count        = 5;
 801183e:	f8b1 3074 	ldrh.w	r3, [r1, #116]	; 0x74
 8011842:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011846:	f023 0307 	bic.w	r3, r3, #7
 801184a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801184e:	f043 0305 	orr.w	r3, r3, #5
 8011852:	f8a1 3074 	strh.w	r3, [r1, #116]	; 0x74
    lv_textarea_set_one_line(obj, true);
 8011856:	4629      	mov	r1, r5
 8011858:	f016 f8c6 	bl	80279e8 <lv_textarea_set_one_line>
    lv_textarea_set_cursor_click_pos(obj, true);
 801185c:	4620      	mov	r0, r4
 801185e:	4629      	mov	r1, r5
 8011860:	f016 f8bb 	bl	80279da <lv_textarea_set_cursor_click_pos>
    lv_spinbox_updatevalue(obj);
 8011864:	4620      	mov	r0, r4
}
 8011866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_spinbox_updatevalue(obj);
 801186a:	f7ff bf57 	b.w	801171c <lv_spinbox_updatevalue>
 801186e:	bf00      	nop
 8011870:	0001869f 	.word	0x0001869f
 8011874:	fffe7961 	.word	0xfffe7961

08011878 <lv_spinbox_event>:
{
 8011878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801187a:	4855      	ldr	r0, [pc, #340]	; (80119d0 <lv_spinbox_event+0x158>)
{
 801187c:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801187e:	f009 fca2 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8011882:	2801      	cmp	r0, #1
    res = lv_obj_event_base(MY_CLASS, e);
 8011884:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return;
 8011886:	d16c      	bne.n	8011962 <lv_spinbox_event+0xea>
    lv_event_code_t code = lv_event_get_code(e);
 8011888:	4628      	mov	r0, r5
 801188a:	f009 fcb6 	bl	801b1fa <lv_event_get_code>
 801188e:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8011890:	4628      	mov	r0, r5
 8011892:	f009 fcae 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_RELEASED) {
 8011896:	2e08      	cmp	r6, #8
    lv_obj_t * obj = lv_event_get_target(e);
 8011898:	4604      	mov	r4, r0
    if(code == LV_EVENT_RELEASED) {
 801189a:	d173      	bne.n	8011984 <lv_spinbox_event+0x10c>
        lv_indev_t * indev = lv_indev_get_act();
 801189c:	f7f2 ff84 	bl	80047a8 <lv_indev_get_act>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 80118a0:	f009 fe6b 	bl	801b57a <lv_indev_get_type>
 80118a4:	2804      	cmp	r0, #4
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 80118a6:	4620      	mov	r0, r4
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 80118a8:	d131      	bne.n	801190e <lv_spinbox_event+0x96>
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 80118aa:	f00a f8bd 	bl	801ba28 <lv_obj_get_group>
 80118ae:	f009 fe5f 	bl	801b570 <lv_group_get_editing>
 80118b2:	2800      	cmp	r0, #0
 80118b4:	d055      	beq.n	8011962 <lv_spinbox_event+0xea>
                if(spinbox->digit_count > 1) {
 80118b6:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 80118ba:	f002 020f 	and.w	r2, r2, #15
 80118be:	2a01      	cmp	r2, #1
 80118c0:	d94f      	bls.n	8011962 <lv_spinbox_event+0xea>
                    if(spinbox->digit_step_dir == LV_DIR_RIGHT) {
 80118c2:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
                        if(spinbox->step > 1) {
 80118c6:	6f25      	ldr	r5, [r4, #112]	; 0x70
                    if(spinbox->digit_step_dir == LV_DIR_RIGHT) {
 80118c8:	f003 0306 	and.w	r3, r3, #6
 80118cc:	2b04      	cmp	r3, #4
 80118ce:	d111      	bne.n	80118f4 <lv_spinbox_event+0x7c>
                        if(spinbox->step > 1) {
 80118d0:	2d01      	cmp	r5, #1
 80118d2:	dd04      	ble.n	80118de <lv_spinbox_event+0x66>
                            lv_spinbox_step_next(obj);
 80118d4:	4620      	mov	r0, r4
}
 80118d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                            lv_spinbox_step_next(obj);
 80118da:	f012 b9a9 	b.w	8023c30 <lv_spinbox_step_next>
                            spinbox->step = lv_pow(10, spinbox->digit_count - 2);
 80118de:	3a02      	subs	r2, #2
 80118e0:	200a      	movs	r0, #10
 80118e2:	2100      	movs	r1, #0
 80118e4:	f013 f981 	bl	8024bea <lv_pow>
 80118e8:	6720      	str	r0, [r4, #112]	; 0x70
                            lv_spinbox_step_prev(obj);
 80118ea:	4620      	mov	r0, r4
}
 80118ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                lv_spinbox_step_prev(obj);
 80118f0:	f012 b9a8 	b.w	8023c44 <lv_spinbox_step_prev>
                        if(spinbox->step < lv_pow(10, spinbox->digit_count - 1)) {
 80118f4:	3a01      	subs	r2, #1
 80118f6:	200a      	movs	r0, #10
 80118f8:	2100      	movs	r1, #0
 80118fa:	f013 f976 	bl	8024bea <lv_pow>
 80118fe:	4285      	cmp	r5, r0
 8011900:	ea4f 73e5 	mov.w	r3, r5, asr #31
 8011904:	418b      	sbcs	r3, r1
 8011906:	dbf0      	blt.n	80118ea <lv_spinbox_event+0x72>
                            spinbox->step = 10;
 8011908:	230a      	movs	r3, #10
 801190a:	6723      	str	r3, [r4, #112]	; 0x70
 801190c:	e7e2      	b.n	80118d4 <lv_spinbox_event+0x5c>
            const char * txt = lv_textarea_get_text(obj);
 801190e:	f016 f8a1 	bl	8027a54 <lv_textarea_get_text>
 8011912:	4605      	mov	r5, r0
            size_t txt_len = strlen(txt);
 8011914:	f008 fee6 	bl	801a6e4 <strlen>
            if(txt[spinbox->ta.cursor.pos] == '.') {
 8011918:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801191a:	5cea      	ldrb	r2, [r5, r3]
 801191c:	2a2e      	cmp	r2, #46	; 0x2e
 801191e:	d121      	bne.n	8011964 <lv_spinbox_event+0xec>
                lv_textarea_cursor_left(obj);
 8011920:	4620      	mov	r0, r4
 8011922:	f016 f922 	bl	8027b6a <lv_textarea_cursor_left>
            size_t len = spinbox->digit_count - 1;
 8011926:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
            uint16_t cp = spinbox->ta.cursor.pos;
 801192a:	6c60      	ldr	r0, [r4, #68]	; 0x44
            size_t len = spinbox->digit_count - 1;
 801192c:	f001 030f 	and.w	r3, r1, #15
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 8011930:	ebb0 1f11 	cmp.w	r0, r1, lsr #4
            size_t len = spinbox->digit_count - 1;
 8011934:	f103 33ff 	add.w	r3, r3, #4294967295
            uint16_t cp = spinbox->ta.cursor.pos;
 8011938:	b282      	uxth	r2, r0
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 801193a:	d904      	bls.n	8011946 <lv_spinbox_event+0xce>
 801193c:	290f      	cmp	r1, #15
 801193e:	bf84      	itt	hi
 8011940:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011944:	b292      	uxthhi	r2, r2
            uint32_t pos = len - cp;
 8011946:	1a9b      	subs	r3, r3, r2
            if(spinbox->range_min < 0) pos++;
 8011948:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 801194a:	2100      	movs	r1, #0
 801194c:	250a      	movs	r5, #10
            if(spinbox->range_min < 0) pos++;
 801194e:	2a00      	cmp	r2, #0
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8011950:	f04f 0201 	mov.w	r2, #1
            if(spinbox->range_min < 0) pos++;
 8011954:	bfb8      	it	lt
 8011956:	3301      	addlt	r3, #1
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8011958:	b288      	uxth	r0, r1
 801195a:	3101      	adds	r1, #1
 801195c:	4283      	cmp	r3, r0
 801195e:	d80f      	bhi.n	8011980 <lv_spinbox_event+0x108>
 8011960:	6722      	str	r2, [r4, #112]	; 0x70
}
 8011962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if(spinbox->ta.cursor.pos == (uint32_t)txt_len) {
 8011964:	4298      	cmp	r0, r3
 8011966:	d104      	bne.n	8011972 <lv_spinbox_event+0xfa>
                lv_textarea_set_cursor_pos(obj, txt_len - 1);
 8011968:	1e41      	subs	r1, r0, #1
                lv_textarea_set_cursor_pos(obj, 1);
 801196a:	4620      	mov	r0, r4
 801196c:	f006 fbfc 	bl	8018168 <lv_textarea_set_cursor_pos>
 8011970:	e7d9      	b.n	8011926 <lv_spinbox_event+0xae>
            else if(spinbox->ta.cursor.pos == 0 && spinbox->range_min < 0) {
 8011972:	2b00      	cmp	r3, #0
 8011974:	d1d7      	bne.n	8011926 <lv_spinbox_event+0xae>
 8011976:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011978:	2b00      	cmp	r3, #0
 801197a:	dad4      	bge.n	8011926 <lv_spinbox_event+0xae>
                lv_textarea_set_cursor_pos(obj, 1);
 801197c:	4639      	mov	r1, r7
 801197e:	e7f4      	b.n	801196a <lv_spinbox_event+0xf2>
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8011980:	436a      	muls	r2, r5
 8011982:	e7e9      	b.n	8011958 <lv_spinbox_event+0xe0>
    else if(code == LV_EVENT_KEY) {
 8011984:	2e0d      	cmp	r6, #13
 8011986:	d1ec      	bne.n	8011962 <lv_spinbox_event+0xea>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8011988:	f7f2 ff0e 	bl	80047a8 <lv_indev_get_act>
 801198c:	f009 fdf5 	bl	801b57a <lv_indev_get_type>
 8011990:	4606      	mov	r6, r0
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 8011992:	4628      	mov	r0, r5
 8011994:	f009 fc35 	bl	801b202 <lv_event_get_param>
 8011998:	6803      	ldr	r3, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 801199a:	2b13      	cmp	r3, #19
 801199c:	d106      	bne.n	80119ac <lv_spinbox_event+0x134>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 801199e:	2e04      	cmp	r6, #4
                lv_spinbox_increment(obj);
 80119a0:	4620      	mov	r0, r4
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 80119a2:	d198      	bne.n	80118d6 <lv_spinbox_event+0x5e>
}
 80119a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_spinbox_increment(obj);
 80119a8:	f012 b95c 	b.w	8023c64 <lv_spinbox_increment>
        else if(c == LV_KEY_LEFT) {
 80119ac:	2b14      	cmp	r3, #20
 80119ae:	d106      	bne.n	80119be <lv_spinbox_event+0x146>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 80119b0:	2e04      	cmp	r6, #4
                lv_spinbox_decrement(obj);
 80119b2:	4620      	mov	r0, r4
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 80119b4:	d19a      	bne.n	80118ec <lv_spinbox_event+0x74>
}
 80119b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_spinbox_decrement(obj);
 80119ba:	f012 b96e 	b.w	8023c9a <lv_spinbox_decrement>
        else if(c == LV_KEY_UP) {
 80119be:	2b11      	cmp	r3, #17
 80119c0:	d101      	bne.n	80119c6 <lv_spinbox_event+0x14e>
            lv_spinbox_increment(obj);
 80119c2:	4620      	mov	r0, r4
 80119c4:	e7ee      	b.n	80119a4 <lv_spinbox_event+0x12c>
        else if(c == LV_KEY_DOWN) {
 80119c6:	2b12      	cmp	r3, #18
 80119c8:	d1cb      	bne.n	8011962 <lv_spinbox_event+0xea>
            lv_spinbox_decrement(obj);
 80119ca:	4620      	mov	r0, r4
 80119cc:	e7f3      	b.n	80119b6 <lv_spinbox_event+0x13e>
 80119ce:	bf00      	nop
 80119d0:	080292f8 	.word	0x080292f8

080119d4 <lv_spinner_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_spinner_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80119d4:	b570      	push	{r4, r5, r6, lr}
 80119d6:	460c      	mov	r4, r1
 80119d8:	b092      	sub	sp, #72	; 0x48
    LV_TRACE_OBJ_CREATE("begin");

    LV_UNUSED(class_p);

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80119da:	2102      	movs	r1, #2
    a->start_value = start;
 80119dc:	2500      	movs	r5, #0
 80119de:	4620      	mov	r0, r4
    a->end_value = end;
 80119e0:	f44f 76b4 	mov.w	r6, #360	; 0x168
 80119e4:	f009 ffc3 	bl	801b96e <lv_obj_clear_flag>

    lv_anim_t a;
    lv_anim_init(&a);
 80119e8:	a801      	add	r0, sp, #4
 80119ea:	f000 fc89 	bl	8012300 <lv_anim_init>
    a->exec_cb = exec_cb;
 80119ee:	4b15      	ldr	r3, [pc, #84]	; (8011a44 <lv_spinner_constructor+0x70>)
    lv_anim_set_var(&a, obj);
    lv_anim_set_exec_cb(&a, arc_anim_end_angle);
    lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
    lv_anim_set_time(&a, time_param);
    lv_anim_set_values(&a, arc_length_param, 360 + arc_length_param);
    lv_anim_start(&a);
 80119f0:	a801      	add	r0, sp, #4
    a->var = var;
 80119f2:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 80119f4:	9302      	str	r3, [sp, #8]
    a->repeat_cnt = cnt;
 80119f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80119fa:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    lv_anim_set_time(&a, time_param);
 80119fe:	4b12      	ldr	r3, [pc, #72]	; (8011a48 <lv_spinner_constructor+0x74>)
    a->time = duration;
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	930c      	str	r3, [sp, #48]	; 0x30
    lv_anim_set_values(&a, arc_length_param, 360 + arc_length_param);
 8011a04:	4b11      	ldr	r3, [pc, #68]	; (8011a4c <lv_spinner_constructor+0x78>)
 8011a06:	681b      	ldr	r3, [r3, #0]
    a->current_value = start;
 8011a08:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8011a0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
    a->end_value = end;
 8011a10:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_anim_start(&a);
 8011a12:	f000 fcc1 	bl	8012398 <lv_anim_start>
    a->path_cb = path_cb;
 8011a16:	4b0e      	ldr	r3, [pc, #56]	; (8011a50 <lv_spinner_constructor+0x7c>)

    lv_anim_set_path_cb(&a, lv_anim_path_ease_in_out);
    lv_anim_set_values(&a, 0, 360);
    lv_anim_set_exec_cb(&a, arc_anim_start_angle);
    lv_anim_start(&a);
 8011a18:	a801      	add	r0, sp, #4
    a->end_value = end;
 8011a1a:	960b      	str	r6, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 8011a1c:	9308      	str	r3, [sp, #32]
    a->exec_cb = exec_cb;
 8011a1e:	4b0d      	ldr	r3, [pc, #52]	; (8011a54 <lv_spinner_constructor+0x80>)
    a->current_value = start;
 8011a20:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8011a24:	9302      	str	r3, [sp, #8]
 8011a26:	f000 fcb7 	bl	8012398 <lv_anim_start>

    lv_arc_set_bg_angles(obj, 0, 360);
 8011a2a:	4632      	mov	r2, r6
 8011a2c:	4629      	mov	r1, r5
 8011a2e:	4620      	mov	r0, r4
 8011a30:	f014 fa96 	bl	8025f60 <lv_arc_set_bg_angles>
    lv_arc_set_rotation(obj, 270);
 8011a34:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8011a38:	4620      	mov	r0, r4
 8011a3a:	f014 fa9d 	bl	8025f78 <lv_arc_set_rotation>
}
 8011a3e:	b012      	add	sp, #72	; 0x48
 8011a40:	bd70      	pop	{r4, r5, r6, pc}
 8011a42:	bf00      	nop
 8011a44:	08023cd7 	.word	0x08023cd7
 8011a48:	240011d8 	.word	0x240011d8
 8011a4c:	240011d4 	.word	0x240011d4
 8011a50:	0802417f 	.word	0x0802417f
 8011a54:	08023cd1 	.word	0x08023cd1

08011a58 <lv_tabview_constructor>:
static void lv_tabview_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
    LV_UNUSED(class_p);
    lv_tabview_t * tabview = (lv_tabview_t *)obj;

    tabview->tab_pos = tabpos_create;
 8011a58:	4b4d      	ldr	r3, [pc, #308]	; (8011b90 <lv_tabview_constructor+0x138>)
{
 8011a5a:	b570      	push	{r4, r5, r6, lr}
    tabview->tab_pos = tabpos_create;
 8011a5c:	781b      	ldrb	r3, [r3, #0]
{
 8011a5e:	460d      	mov	r5, r1
    tabview->tab_pos = tabpos_create;
 8011a60:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c

    switch(tabview->tab_pos) {
 8011a64:	3b01      	subs	r3, #1
 8011a66:	2b07      	cmp	r3, #7
 8011a68:	d809      	bhi.n	8011a7e <lv_tabview_constructor+0x26>
 8011a6a:	e8df f003 	tbb	[pc, r3]
 8011a6e:	6361      	.short	0x6361
 8011a70:	08080408 	.word	0x08080408
 8011a74:	5f08      	.short	0x5f08
        case LV_DIR_TOP:
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 8011a76:	2101      	movs	r1, #1
            break;
        case LV_DIR_LEFT:
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
            break;
        case LV_DIR_RIGHT:
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_REVERSE);
 8011a78:	4628      	mov	r0, r5
 8011a7a:	f7f9 fd73 	bl	800b564 <lv_obj_set_flex_flow>
            break;
    }

    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8011a7e:	f242 0264 	movw	r2, #8292	; 0x2064
 8011a82:	4628      	mov	r0, r5
 8011a84:	4611      	mov	r1, r2
 8011a86:	f00a fe49 	bl	801c71c <lv_obj_set_size>

    lv_obj_t * btnm;
    lv_obj_t * cont;

    btnm = lv_btnmatrix_create(obj);
 8011a8a:	4628      	mov	r0, r5
 8011a8c:	f002 fc10 	bl	80142b0 <lv_btnmatrix_create>
 8011a90:	4606      	mov	r6, r0
    cont = lv_obj_create(obj);
 8011a92:	4628      	mov	r0, r5
 8011a94:	f7f3 f930 	bl	8004cf8 <lv_obj_create>

    lv_btnmatrix_set_one_checked(btnm, true);
 8011a98:	2101      	movs	r1, #1
    cont = lv_obj_create(obj);
 8011a9a:	4604      	mov	r4, r0
    lv_btnmatrix_set_one_checked(btnm, true);
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	f014 fd2d 	bl	80264fc <lv_btnmatrix_set_one_checked>
    tabview->map = lv_mem_alloc(sizeof(const char *));
 8011aa2:	2004      	movs	r0, #4
 8011aa4:	f000 fe04 	bl	80126b0 <lv_mem_alloc>
    tabview->map[0] = "";
 8011aa8:	4b3a      	ldr	r3, [pc, #232]	; (8011b94 <lv_tabview_constructor+0x13c>)
    tabview->map = lv_mem_alloc(sizeof(const char *));
 8011aaa:	6268      	str	r0, [r5, #36]	; 0x24
    tabview->map[0] = "";
 8011aac:	6003      	str	r3, [r0, #0]
    lv_btnmatrix_set_map(btnm, (const char **)tabview->map);
 8011aae:	4630      	mov	r0, r6
 8011ab0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8011ab2:	f014 fc7e 	bl	80263b2 <lv_btnmatrix_set_map>
    lv_obj_add_event_cb(btnm, btns_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	221c      	movs	r2, #28
 8011aba:	4937      	ldr	r1, [pc, #220]	; (8011b98 <lv_tabview_constructor+0x140>)
 8011abc:	4630      	mov	r0, r6
 8011abe:	f009 fba4 	bl	801b20a <lv_obj_add_event_cb>
    lv_obj_add_flag(btnm, LV_OBJ_FLAG_EVENT_BUBBLE);
 8011ac2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	f009 ff1b 	bl	801b902 <lv_obj_add_flag>

    lv_obj_add_event_cb(cont, cont_scroll_end_event_cb, LV_EVENT_ALL, NULL);
 8011acc:	2300      	movs	r3, #0
 8011ace:	4933      	ldr	r1, [pc, #204]	; (8011b9c <lv_tabview_constructor+0x144>)
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	f009 fb99 	bl	801b20a <lv_obj_add_event_cb>
    lv_obj_set_scrollbar_mode(cont, LV_SCROLLBAR_MODE_OFF);
 8011ad8:	2100      	movs	r1, #0
 8011ada:	4620      	mov	r0, r4
 8011adc:	f00b f9e8 	bl	801ceb0 <lv_obj_set_scrollbar_mode>

    switch(tabview->tab_pos) {
 8011ae0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8011ae4:	2b04      	cmp	r3, #4
 8011ae6:	d029      	beq.n	8011b3c <lv_tabview_constructor+0xe4>
 8011ae8:	d826      	bhi.n	8011b38 <lv_tabview_constructor+0xe0>
 8011aea:	3b01      	subs	r3, #1
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d937      	bls.n	8011b60 <lv_tabview_constructor+0x108>
            lv_obj_set_height(cont, LV_PCT(100));
            lv_obj_set_flex_grow(cont, 1);
            break;
    }

    lv_group_t * g = lv_group_get_default();
 8011af0:	f7f2 fe2c 	bl	800474c <lv_group_get_default>
    if(g) lv_group_add_obj(g, btnm);
 8011af4:	b110      	cbz	r0, 8011afc <lv_tabview_constructor+0xa4>
 8011af6:	4631      	mov	r1, r6
 8011af8:	f009 fcdb 	bl	801b4b2 <lv_group_add_obj>

    if((tabview->tab_pos & LV_DIR_VER) != 0) {
 8011afc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8011b00:	f013 0f0c 	tst.w	r3, #12
 8011b04:	d03a      	beq.n	8011b7c <lv_tabview_constructor+0x124>
        lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_ROW);
 8011b06:	2100      	movs	r1, #0
 8011b08:	4620      	mov	r0, r4
 8011b0a:	f7f9 fd2b 	bl	800b564 <lv_obj_set_flex_flow>
        lv_obj_set_scroll_snap_x(cont, LV_SCROLL_SNAP_CENTER);
 8011b0e:	2103      	movs	r1, #3
 8011b10:	4620      	mov	r0, r4
 8011b12:	f00b f9f0 	bl	801cef6 <lv_obj_set_scroll_snap_x>
    }
    else {
        lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_COLUMN);
        lv_obj_set_scroll_snap_y(cont, LV_SCROLL_SNAP_CENTER);
    }
    lv_obj_add_flag(cont, LV_OBJ_FLAG_SCROLL_ONE);
 8011b16:	4620      	mov	r0, r4
 8011b18:	2180      	movs	r1, #128	; 0x80
 8011b1a:	f009 fef2 	bl	801b902 <lv_obj_add_flag>
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8011b1e:	4620      	mov	r0, r4
 8011b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 8011b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8011b28:	f009 bf21 	b.w	801b96e <lv_obj_clear_flag>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN_REVERSE);
 8011b2c:	2109      	movs	r1, #9
 8011b2e:	e7a3      	b.n	8011a78 <lv_tabview_constructor+0x20>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 8011b30:	2100      	movs	r1, #0
 8011b32:	e7a1      	b.n	8011a78 <lv_tabview_constructor+0x20>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_REVERSE);
 8011b34:	2108      	movs	r1, #8
 8011b36:	e79f      	b.n	8011a78 <lv_tabview_constructor+0x20>
    switch(tabview->tab_pos) {
 8011b38:	2b08      	cmp	r3, #8
 8011b3a:	d1d9      	bne.n	8011af0 <lv_tabview_constructor+0x98>
            lv_obj_set_size(btnm, LV_PCT(100), tabsize_create);
 8011b3c:	4b18      	ldr	r3, [pc, #96]	; (8011ba0 <lv_tabview_constructor+0x148>)
 8011b3e:	f242 0164 	movw	r1, #8292	; 0x2064
 8011b42:	4630      	mov	r0, r6
 8011b44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b48:	f00a fde8 	bl	801c71c <lv_obj_set_size>
            lv_obj_set_width(cont, LV_PCT(100));
 8011b4c:	f242 0164 	movw	r1, #8292	; 0x2064
 8011b50:	4620      	mov	r0, r4
 8011b52:	f00a fdb5 	bl	801c6c0 <lv_obj_set_width>
            lv_obj_set_flex_grow(cont, 1);
 8011b56:	2101      	movs	r1, #1
 8011b58:	4620      	mov	r0, r4
 8011b5a:	f011 f9c1 	bl	8022ee0 <lv_obj_set_flex_grow>
            break;
 8011b5e:	e7c7      	b.n	8011af0 <lv_tabview_constructor+0x98>
            lv_obj_set_size(btnm, tabsize_create, LV_PCT(100));
 8011b60:	4b0f      	ldr	r3, [pc, #60]	; (8011ba0 <lv_tabview_constructor+0x148>)
 8011b62:	4630      	mov	r0, r6
 8011b64:	f242 0264 	movw	r2, #8292	; 0x2064
 8011b68:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011b6c:	f00a fdd6 	bl	801c71c <lv_obj_set_size>
            lv_obj_set_height(cont, LV_PCT(100));
 8011b70:	f242 0164 	movw	r1, #8292	; 0x2064
 8011b74:	4620      	mov	r0, r4
 8011b76:	f00a fdba 	bl	801c6ee <lv_obj_set_height>
 8011b7a:	e7ec      	b.n	8011b56 <lv_tabview_constructor+0xfe>
        lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_COLUMN);
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	2101      	movs	r1, #1
 8011b80:	f7f9 fcf0 	bl	800b564 <lv_obj_set_flex_flow>
        lv_obj_set_scroll_snap_y(cont, LV_SCROLL_SNAP_CENTER);
 8011b84:	2103      	movs	r1, #3
 8011b86:	4620      	mov	r0, r4
 8011b88:	f00b f9c0 	bl	801cf0c <lv_obj_set_scroll_snap_y>
 8011b8c:	e7c3      	b.n	8011b16 <lv_tabview_constructor+0xbe>
 8011b8e:	bf00      	nop
 8011b90:	24010e35 	.word	0x24010e35
 8011b94:	0802a016 	.word	0x0802a016
 8011b98:	08023eb1 	.word	0x08023eb1
 8011b9c:	08023def 	.word	0x08023def
 8011ba0:	24010d20 	.word	0x24010d20

08011ba4 <lv_tabview_event>:
    lv_mem_free(tabview->map);
    tabview->map = NULL;
}

static void lv_tabview_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8011ba4:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    lv_res_t res = lv_obj_event_base(&lv_tabview_class, e);
 8011ba6:	480b      	ldr	r0, [pc, #44]	; (8011bd4 <lv_tabview_event+0x30>)
{
 8011ba8:	460c      	mov	r4, r1
    lv_res_t res = lv_obj_event_base(&lv_tabview_class, e);
 8011baa:	f009 fb0c 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8011bae:	2801      	cmp	r0, #1
 8011bb0:	d10e      	bne.n	8011bd0 <lv_tabview_event+0x2c>

    lv_event_code_t code = lv_event_get_code(e);
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f009 fb21 	bl	801b1fa <lv_event_get_code>
 8011bb8:	4605      	mov	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f009 fb19 	bl	801b1f2 <lv_event_get_target>

    if(code == LV_EVENT_SIZE_CHANGED) {
 8011bc0:	2d29      	cmp	r5, #41	; 0x29
 8011bc2:	d105      	bne.n	8011bd0 <lv_tabview_event+0x2c>
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    }
}
 8011bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
 8011bcc:	f012 b8bd 	b.w	8023d4a <lv_tabview_set_act>
}
 8011bd0:	bd38      	pop	{r3, r4, r5, pc}
 8011bd2:	bf00      	nop
 8011bd4:	08029330 	.word	0x08029330

08011bd8 <lv_tileview_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_tileview_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8011bd8:	b510      	push	{r4, lr}
    LV_UNUSED(class_p);
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8011bda:	f242 0264 	movw	r2, #8292	; 0x2064
{
 8011bde:	460c      	mov	r4, r1
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8011be0:	4611      	mov	r1, r2
 8011be2:	4620      	mov	r0, r4
 8011be4:	f00a fd9a 	bl	801c71c <lv_obj_set_size>
    lv_obj_add_event_cb(obj, tileview_event_cb, LV_EVENT_ALL, NULL);
 8011be8:	2300      	movs	r3, #0
 8011bea:	4909      	ldr	r1, [pc, #36]	; (8011c10 <lv_tileview_constructor+0x38>)
 8011bec:	4620      	mov	r0, r4
 8011bee:	461a      	mov	r2, r3
 8011bf0:	f009 fb0b 	bl	801b20a <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ONE);
 8011bf4:	4620      	mov	r0, r4
 8011bf6:	2180      	movs	r1, #128	; 0x80
 8011bf8:	f009 fe83 	bl	801b902 <lv_obj_add_flag>
    lv_obj_set_scroll_snap_x(obj, LV_SCROLL_SNAP_CENTER);
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	2103      	movs	r1, #3
 8011c00:	f00b f979 	bl	801cef6 <lv_obj_set_scroll_snap_x>
    lv_obj_set_scroll_snap_y(obj, LV_SCROLL_SNAP_CENTER);
 8011c04:	4620      	mov	r0, r4
 8011c06:	2103      	movs	r1, #3

}
 8011c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_set_scroll_snap_y(obj, LV_SCROLL_SNAP_CENTER);
 8011c0c:	f00b b97e 	b.w	801cf0c <lv_obj_set_scroll_snap_y>
 8011c10:	08023ed3 	.word	0x08023ed3

08011c14 <lv_tileview_tile_constructor>:

static void lv_tileview_tile_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8011c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    LV_UNUSED(class_p);
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8011c18:	4608      	mov	r0, r1
{
 8011c1a:	460c      	mov	r4, r1
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8011c1c:	f00c fab4 	bl	801e188 <lv_obj_get_parent>
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8011c20:	f242 0264 	movw	r2, #8292	; 0x2064
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8011c24:	4605      	mov	r5, r0
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8011c26:	4620      	mov	r0, r4
 8011c28:	4611      	mov	r1, r2
    lv_obj_update_layout(obj);  /*Be sure the size is correct*/
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 8011c2a:	4f15      	ldr	r7, [pc, #84]	; (8011c80 <lv_tileview_tile_constructor+0x6c>)
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8011c2c:	f00a fd76 	bl	801c71c <lv_obj_set_size>
    lv_obj_update_layout(obj);  /*Be sure the size is correct*/
 8011c30:	4620      	mov	r0, r4
 8011c32:	f7f3 fd95 	bl	8005760 <lv_obj_update_layout>
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 8011c36:	4628      	mov	r0, r5
 8011c38:	f00a fe08 	bl	801c84c <lv_obj_get_content_width>
 8011c3c:	6839      	ldr	r1, [r7, #0]
 8011c3e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8011c84 <lv_tileview_tile_constructor+0x70>
 8011c42:	fb11 f100 	smulbb	r1, r1, r0
                   create_row_id * lv_obj_get_content_height(parent));
 8011c46:	4628      	mov	r0, r5
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 8011c48:	b20e      	sxth	r6, r1
                   create_row_id * lv_obj_get_content_height(parent));
 8011c4a:	f00a fe15 	bl	801c878 <lv_obj_get_content_height>
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 8011c4e:	f8d8 2000 	ldr.w	r2, [r8]
 8011c52:	4631      	mov	r1, r6
 8011c54:	fb12 f200 	smulbb	r2, r2, r0
 8011c58:	4620      	mov	r0, r4
 8011c5a:	b212      	sxth	r2, r2
 8011c5c:	f00a fd25 	bl	801c6aa <lv_obj_set_pos>

    lv_tileview_tile_t * tile = (lv_tileview_tile_t *)obj;
    tile->dir = create_dir;
 8011c60:	4b09      	ldr	r3, [pc, #36]	; (8011c88 <lv_tileview_tile_constructor+0x74>)

    if(create_col_id == 0 && create_row_id == 0) {
 8011c62:	f8d8 2000 	ldr.w	r2, [r8]
    tile->dir = create_dir;
 8011c66:	7819      	ldrb	r1, [r3, #0]
    if(create_col_id == 0 && create_row_id == 0) {
 8011c68:	683b      	ldr	r3, [r7, #0]
    tile->dir = create_dir;
 8011c6a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if(create_col_id == 0 && create_row_id == 0) {
 8011c6e:	4313      	orrs	r3, r2
 8011c70:	d104      	bne.n	8011c7c <lv_tileview_tile_constructor+0x68>
        lv_obj_set_scroll_dir(parent, create_dir);
 8011c72:	4628      	mov	r0, r5
    }
}
 8011c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_set_scroll_dir(parent, create_dir);
 8011c78:	f00b b92e 	b.w	801ced8 <lv_obj_set_scroll_dir>
}
 8011c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c80:	240011e0 	.word	0x240011e0
 8011c84:	240011dc 	.word	0x240011dc
 8011c88:	24010e36 	.word	0x24010e36

08011c8c <lv_win_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_win_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8011c8c:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(class_p);
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8011c8e:	4608      	mov	r0, r1
{
 8011c90:	460c      	mov	r4, r1
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8011c92:	f00c fa79 	bl	801e188 <lv_obj_get_parent>
 8011c96:	4606      	mov	r6, r0
    lv_obj_set_size(obj, lv_obj_get_width(parent), lv_obj_get_height(parent));
 8011c98:	f00a fdcc 	bl	801c834 <lv_obj_get_width>
 8011c9c:	4605      	mov	r5, r0
 8011c9e:	4630      	mov	r0, r6
 8011ca0:	f00a fdce 	bl	801c840 <lv_obj_get_height>
 8011ca4:	4629      	mov	r1, r5
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	4620      	mov	r0, r4
 8011caa:	f00a fd37 	bl	801c71c <lv_obj_set_size>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 8011cae:	2101      	movs	r1, #1
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	f7f9 fc57 	bl	800b564 <lv_obj_set_flex_flow>

    lv_obj_t * header = lv_obj_create(obj);
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	f7f3 f81e 	bl	8004cf8 <lv_obj_create>
    lv_obj_set_size(header, LV_PCT(100), create_header_height);
 8011cbc:	4b0f      	ldr	r3, [pc, #60]	; (8011cfc <lv_win_constructor+0x70>)
    lv_obj_t * header = lv_obj_create(obj);
 8011cbe:	4605      	mov	r5, r0
    lv_obj_set_size(header, LV_PCT(100), create_header_height);
 8011cc0:	f242 0164 	movw	r1, #8292	; 0x2064
 8011cc4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011cc8:	f00a fd28 	bl	801c71c <lv_obj_set_size>
    lv_obj_set_flex_flow(header, LV_FLEX_FLOW_ROW);
 8011ccc:	4628      	mov	r0, r5
 8011cce:	2100      	movs	r1, #0
 8011cd0:	f7f9 fc48 	bl	800b564 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(header, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 8011cd4:	2302      	movs	r3, #2
 8011cd6:	2100      	movs	r1, #0
 8011cd8:	4628      	mov	r0, r5
 8011cda:	461a      	mov	r2, r3
 8011cdc:	f7f9 fc6a 	bl	800b5b4 <lv_obj_set_flex_align>

    lv_obj_t * cont = lv_obj_create(obj);
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f7f3 f809 	bl	8004cf8 <lv_obj_create>
 8011ce6:	4604      	mov	r4, r0
    lv_obj_set_flex_grow(cont, 1);
 8011ce8:	2101      	movs	r1, #1
 8011cea:	f011 f8f9 	bl	8022ee0 <lv_obj_set_flex_grow>
    lv_obj_set_width(cont, LV_PCT(100));
 8011cee:	4620      	mov	r0, r4
 8011cf0:	f242 0164 	movw	r1, #8292	; 0x2064
}
 8011cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_width(cont, LV_PCT(100));
 8011cf8:	f00a bce2 	b.w	801c6c0 <lv_obj_set_width>
 8011cfc:	24010d22 	.word	0x24010d22

08011d00 <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 8011d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(letter == '\0') return 0;
 8011d02:	460d      	mov	r5, r1
{
 8011d04:	b085      	sub	sp, #20
    if(letter == '\0') return 0;
 8011d06:	b181      	cbz	r1, 8011d2a <get_glyph_dsc_id+0x2a>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8011d08:	6904      	ldr	r4, [r0, #16]

    /*Check the cache first*/
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8011d0a:	6962      	ldr	r2, [r4, #20]
 8011d0c:	b97a      	cbnz	r2, 8011d2e <get_glyph_dsc_id+0x2e>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 8011d0e:	8a67      	ldrh	r7, [r4, #18]
 8011d10:	2000      	movs	r0, #0
 8011d12:	f04f 0c14 	mov.w	ip, #20
 8011d16:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8011d1a:	b283      	uxth	r3, r0
 8011d1c:	429f      	cmp	r7, r3
 8011d1e:	d80c      	bhi.n	8011d3a <get_glyph_dsc_id+0x3a>
            fdsc->cache->last_glyph_id = glyph_id;
        }
        return glyph_id;
    }

    if(fdsc->cache) {
 8011d20:	b11a      	cbz	r2, 8011d2a <get_glyph_dsc_id+0x2a>
        fdsc->cache->last_letter = letter;
 8011d22:	6015      	str	r5, [r2, #0]
        fdsc->cache->last_glyph_id = 0;
 8011d24:	2200      	movs	r2, #0
 8011d26:	6963      	ldr	r3, [r4, #20]
 8011d28:	605a      	str	r2, [r3, #4]
    if(letter == '\0') return 0;
 8011d2a:	2000      	movs	r0, #0
 8011d2c:	e003      	b.n	8011d36 <get_glyph_dsc_id+0x36>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8011d2e:	6813      	ldr	r3, [r2, #0]
 8011d30:	428b      	cmp	r3, r1
 8011d32:	d1ec      	bne.n	8011d0e <get_glyph_dsc_id+0xe>
 8011d34:	6850      	ldr	r0, [r2, #4]
    }
    return 0;

}
 8011d36:	b005      	add	sp, #20
 8011d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8011d3a:	fb0c f600 	mul.w	r6, ip, r0
 8011d3e:	68a3      	ldr	r3, [r4, #8]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8011d40:	3001      	adds	r0, #1
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8011d42:	1999      	adds	r1, r3, r6
 8011d44:	599b      	ldr	r3, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8011d46:	f8b1 e004 	ldrh.w	lr, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8011d4a:	1aeb      	subs	r3, r5, r3
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8011d4c:	459e      	cmp	lr, r3
 8011d4e:	d3e4      	bcc.n	8011d1a <get_glyph_dsc_id+0x1a>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8011d50:	7c8a      	ldrb	r2, [r1, #18]
 8011d52:	2a02      	cmp	r2, #2
 8011d54:	d102      	bne.n	8011d5c <get_glyph_dsc_id+0x5c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8011d56:	88c8      	ldrh	r0, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8011d58:	4418      	add	r0, r3
 8011d5a:	e019      	b.n	8011d90 <get_glyph_dsc_id+0x90>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8011d5c:	b91a      	cbnz	r2, 8011d66 <get_glyph_dsc_id+0x66>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8011d5e:	68ca      	ldr	r2, [r1, #12]
 8011d60:	5cd0      	ldrb	r0, [r2, r3]
 8011d62:	88cb      	ldrh	r3, [r1, #6]
 8011d64:	e7f8      	b.n	8011d58 <get_glyph_dsc_id+0x58>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 8011d66:	2a03      	cmp	r2, #3
 8011d68:	d119      	bne.n	8011d9e <get_glyph_dsc_id+0x9e>
            uint16_t key = rcp;
 8011d6a:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8011d6e:	f10d 000e 	add.w	r0, sp, #14
 8011d72:	4b17      	ldr	r3, [pc, #92]	; (8011dd0 <get_glyph_dsc_id+0xd0>)
 8011d74:	8a0a      	ldrh	r2, [r1, #16]
 8011d76:	9300      	str	r3, [sp, #0]
 8011d78:	2302      	movs	r3, #2
 8011d7a:	6889      	ldr	r1, [r1, #8]
 8011d7c:	f013 fdb8 	bl	80258f0 <_lv_utils_bsearch>
            if(p) {
 8011d80:	b130      	cbz	r0, 8011d90 <get_glyph_dsc_id+0x90>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8011d82:	68a3      	ldr	r3, [r4, #8]
 8011d84:	4433      	add	r3, r6
 8011d86:	689a      	ldr	r2, [r3, #8]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8011d88:	88db      	ldrh	r3, [r3, #6]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8011d8a:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8011d8c:	eb03 0060 	add.w	r0, r3, r0, asr #1
        if(fdsc->cache) {
 8011d90:	6963      	ldr	r3, [r4, #20]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d0cf      	beq.n	8011d36 <get_glyph_dsc_id+0x36>
            fdsc->cache->last_letter = letter;
 8011d96:	601d      	str	r5, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 8011d98:	6963      	ldr	r3, [r4, #20]
 8011d9a:	6058      	str	r0, [r3, #4]
 8011d9c:	e7cb      	b.n	8011d36 <get_glyph_dsc_id+0x36>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8011d9e:	2a01      	cmp	r2, #1
 8011da0:	d114      	bne.n	8011dcc <get_glyph_dsc_id+0xcc>
            uint16_t key = rcp;
 8011da2:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8011da6:	f10d 000e 	add.w	r0, sp, #14
 8011daa:	4b09      	ldr	r3, [pc, #36]	; (8011dd0 <get_glyph_dsc_id+0xd0>)
 8011dac:	8a0a      	ldrh	r2, [r1, #16]
 8011dae:	9300      	str	r3, [sp, #0]
 8011db0:	2302      	movs	r3, #2
 8011db2:	6889      	ldr	r1, [r1, #8]
 8011db4:	f013 fd9c 	bl	80258f0 <_lv_utils_bsearch>
            if(p) {
 8011db8:	2800      	cmp	r0, #0
 8011dba:	d0e9      	beq.n	8011d90 <get_glyph_dsc_id+0x90>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8011dbc:	68a3      	ldr	r3, [r4, #8]
 8011dbe:	4433      	add	r3, r6
 8011dc0:	689a      	ldr	r2, [r3, #8]
 8011dc2:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8011dc4:	68da      	ldr	r2, [r3, #12]
 8011dc6:	88db      	ldrh	r3, [r3, #6]
 8011dc8:	5a10      	ldrh	r0, [r2, r0]
 8011dca:	e7c5      	b.n	8011d58 <get_glyph_dsc_id+0x58>
        uint32_t glyph_id = 0;
 8011dcc:	2000      	movs	r0, #0
 8011dce:	e7df      	b.n	8011d90 <get_glyph_dsc_id+0x90>
 8011dd0:	08024075 	.word	0x08024075

08011dd4 <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
 8011dd4:	2a09      	cmp	r2, #9
{
 8011dd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011dda:	460d      	mov	r5, r1
 8011ddc:	b085      	sub	sp, #20
 8011dde:	4611      	mov	r1, r2
        unicode_letter = ' ';
 8011de0:	bf08      	it	eq
 8011de2:	2120      	moveq	r1, #32
{
 8011de4:	4680      	mov	r8, r0
 8011de6:	4699      	mov	r9, r3
        is_tab = true;
 8011de8:	bf0c      	ite	eq
 8011dea:	2701      	moveq	r7, #1
    bool is_tab = false;
 8011dec:	2700      	movne	r7, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8011dee:	6906      	ldr	r6, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8011df0:	f7ff ff86 	bl	8011d00 <get_glyph_dsc_id>
    if(!gid) return false;
 8011df4:	4604      	mov	r4, r0
 8011df6:	b340      	cbz	r0, 8011e4a <lv_font_get_glyph_dsc_fmt_txt+0x76>
    if(fdsc->kern_dsc) {
 8011df8:	68f3      	ldr	r3, [r6, #12]
 8011dfa:	bb4b      	cbnz	r3, 8011e50 <lv_font_get_glyph_dsc_fmt_txt+0x7c>
    int8_t kvalue = 0;
 8011dfc:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8011dfe:	6871      	ldr	r1, [r6, #4]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8011e00:	8a32      	ldrh	r2, [r6, #16]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8011e02:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8011e06:	4353      	muls	r3, r2
    uint32_t adv_w = gdsc->adv_w;
 8011e08:	884a      	ldrh	r2, [r1, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8011e0a:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 8011e0c:	f3c2 100b 	ubfx	r0, r2, #4, #12
 8011e10:	4602      	mov	r2, r0
    if(is_tab) adv_w *= 2;
 8011e12:	b10f      	cbz	r7, 8011e18 <lv_font_get_glyph_dsc_fmt_txt+0x44>
 8011e14:	b202      	sxth	r2, r0
 8011e16:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8011e18:	3308      	adds	r3, #8
 8011e1a:	4413      	add	r3, r2
 8011e1c:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 8011e1e:	80ab      	strh	r3, [r5, #4]
    dsc_out->box_h = gdsc->box_h;
 8011e20:	794b      	ldrb	r3, [r1, #5]
 8011e22:	812b      	strh	r3, [r5, #8]
    dsc_out->box_w = gdsc->box_w;
 8011e24:	790a      	ldrb	r2, [r1, #4]
 8011e26:	80ea      	strh	r2, [r5, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 8011e28:	f991 3006 	ldrsb.w	r3, [r1, #6]
 8011e2c:	816b      	strh	r3, [r5, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 8011e2e:	f991 3007 	ldrsb.w	r3, [r1, #7]
 8011e32:	81ab      	strh	r3, [r5, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 8011e34:	7bab      	ldrb	r3, [r5, #14]
 8011e36:	7cf1      	ldrb	r1, [r6, #19]
 8011e38:	f023 031f 	bic.w	r3, r3, #31
 8011e3c:	f3c1 0143 	ubfx	r1, r1, #1, #4
 8011e40:	430b      	orrs	r3, r1
 8011e42:	73ab      	strb	r3, [r5, #14]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 8011e44:	2f00      	cmp	r7, #0
 8011e46:	d15f      	bne.n	8011f08 <lv_font_get_glyph_dsc_fmt_txt+0x134>
    return true;
 8011e48:	2001      	movs	r0, #1
}
 8011e4a:	b005      	add	sp, #20
 8011e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 8011e50:	4649      	mov	r1, r9
 8011e52:	4640      	mov	r0, r8
 8011e54:	f7ff ff54 	bl	8011d00 <get_glyph_dsc_id>
        if(gid_next) {
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	d0cf      	beq.n	8011dfc <lv_font_get_glyph_dsc_fmt_txt+0x28>
            kvalue = get_kern_value(font, gid, gid_next);
 8011e5c:	f8d8 2010 	ldr.w	r2, [r8, #16]

    int8_t value = 0;

    if(fdsc->kern_classes == 0) {
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 8011e60:	f8d2 800c 	ldr.w	r8, [r2, #12]
    if(fdsc->kern_classes == 0) {
 8011e64:	7cd2      	ldrb	r2, [r2, #19]
 8011e66:	0693      	lsls	r3, r2, #26
 8011e68:	d439      	bmi.n	8011ede <lv_font_get_glyph_dsc_fmt_txt+0x10a>
        if(kdsc->glyph_ids_size == 0) {
 8011e6a:	f898 200b 	ldrb.w	r2, [r8, #11]
 8011e6e:	2a3f      	cmp	r2, #63	; 0x3f
 8011e70:	d81a      	bhi.n	8011ea8 <lv_font_get_glyph_dsc_fmt_txt+0xd4>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint16_t * g_ids = kdsc->glyph_ids;
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8011e72:	eb04 2300 	add.w	r3, r4, r0, lsl #8
            const uint16_t * g_ids = kdsc->glyph_ids;
 8011e76:	f8d8 9000 	ldr.w	r9, [r8]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8011e7a:	a803      	add	r0, sp, #12
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8011e7c:	f8ad 300c 	strh.w	r3, [sp, #12]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8011e80:	4649      	mov	r1, r9
 8011e82:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8011e86:	4b22      	ldr	r3, [pc, #136]	; (8011f10 <lv_font_get_glyph_dsc_fmt_txt+0x13c>)
 8011e88:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8011e8c:	9300      	str	r3, [sp, #0]
 8011e8e:	2302      	movs	r3, #2
 8011e90:	f013 fd2e 	bl	80258f0 <_lv_utils_bsearch>

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 8011e94:	4603      	mov	r3, r0
 8011e96:	2800      	cmp	r0, #0
 8011e98:	d0b1      	beq.n	8011dfe <lv_font_get_glyph_dsc_fmt_txt+0x2a>
                lv_uintptr_t ofs = kid_p - g_ids;
 8011e9a:	eba0 0309 	sub.w	r3, r0, r9
 8011e9e:	105b      	asrs	r3, r3, #1
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
                lv_uintptr_t ofs = kid_p - g_ids;
                value = kdsc->values[ofs];
 8011ea0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8011ea4:	56d3      	ldrsb	r3, [r2, r3]
 8011ea6:	e7aa      	b.n	8011dfe <lv_font_get_glyph_dsc_fmt_txt+0x2a>
        else if(kdsc->glyph_ids_size == 1) {
 8011ea8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8011eac:	2a40      	cmp	r2, #64	; 0x40
 8011eae:	d1a5      	bne.n	8011dfc <lv_font_get_glyph_dsc_fmt_txt+0x28>
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 8011eb0:	eb04 4000 	add.w	r0, r4, r0, lsl #16
            const uint32_t * g_ids = kdsc->glyph_ids;
 8011eb4:	f8d8 9000 	ldr.w	r9, [r8]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8011eb8:	4b16      	ldr	r3, [pc, #88]	; (8011f14 <lv_font_get_glyph_dsc_fmt_txt+0x140>)
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 8011eba:	9003      	str	r0, [sp, #12]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8011ebc:	4649      	mov	r1, r9
 8011ebe:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8011ec2:	a803      	add	r0, sp, #12
 8011ec4:	9300      	str	r3, [sp, #0]
 8011ec6:	2304      	movs	r3, #4
 8011ec8:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8011ecc:	f013 fd10 	bl	80258f0 <_lv_utils_bsearch>
            if(kid_p) {
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2800      	cmp	r0, #0
 8011ed4:	d093      	beq.n	8011dfe <lv_font_get_glyph_dsc_fmt_txt+0x2a>
                lv_uintptr_t ofs = kid_p - g_ids;
 8011ed6:	eba0 0309 	sub.w	r3, r0, r9
 8011eda:	109b      	asrs	r3, r3, #2
 8011edc:	e7e0      	b.n	8011ea0 <lv_font_get_glyph_dsc_fmt_txt+0xcc>
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8011ede:	f8d8 2004 	ldr.w	r2, [r8, #4]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8011ee2:	f8d8 1008 	ldr.w	r1, [r8, #8]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8011ee6:	5d12      	ldrb	r2, [r2, r4]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8011ee8:	5c09      	ldrb	r1, [r1, r0]

        /*If class = 0, kerning not exist for that glyph
         *else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 8011eea:	2a00      	cmp	r2, #0
 8011eec:	d086      	beq.n	8011dfc <lv_font_get_glyph_dsc_fmt_txt+0x28>
 8011eee:	2900      	cmp	r1, #0
 8011ef0:	d084      	beq.n	8011dfc <lv_font_get_glyph_dsc_fmt_txt+0x28>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 8011ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8011ef6:	3a01      	subs	r2, #1
 8011ef8:	f898 000d 	ldrb.w	r0, [r8, #13]
 8011efc:	440b      	add	r3, r1
 8011efe:	fb00 3302 	mla	r3, r0, r2, r3
 8011f02:	f913 3c01 	ldrsb.w	r3, [r3, #-1]
 8011f06:	e77a      	b.n	8011dfe <lv_font_get_glyph_dsc_fmt_txt+0x2a>
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 8011f08:	0052      	lsls	r2, r2, #1
 8011f0a:	80ea      	strh	r2, [r5, #6]
 8011f0c:	e79c      	b.n	8011e48 <lv_font_get_glyph_dsc_fmt_txt+0x74>
 8011f0e:	bf00      	nop
 8011f10:	08024051 	.word	0x08024051
 8011f14:	08024063 	.word	0x08024063

08011f18 <lv_disp_drv_init>:
 8011f18:	2250      	movs	r2, #80	; 0x50
 8011f1a:	2100      	movs	r1, #0
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 8011f1c:	b510      	push	{r4, lr}
 8011f1e:	4604      	mov	r4, r0
 8011f20:	f008 fbfe 	bl	801a720 <memset>
    lv_memset_00(driver, sizeof(lv_disp_drv_t));

    driver->hor_res          = 320;
    driver->ver_res          = 240;
    driver->physical_hor_res = -1;
 8011f24:	f04f 33ff 	mov.w	r3, #4294967295
 8011f28:	4a0b      	ldr	r2, [pc, #44]	; (8011f58 <lv_disp_drv_init+0x40>)
 8011f2a:	e9c4 2300 	strd	r2, r3, [r4]
    driver->physical_ver_res = -1;
    driver->offset_x         = 0;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	60a3      	str	r3, [r4, #8]
    driver->offset_y         = 0;
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8011f32:	6923      	ldr	r3, [r4, #16]
 8011f34:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8011f38:	f423 73e4 	bic.w	r3, r3, #456	; 0x1c8
 8011f3c:	f443 4382 	orr.w	r3, r3, #16640	; 0x4100
 8011f40:	f043 0308 	orr.w	r3, r3, #8
 8011f44:	6123      	str	r3, [r4, #16]
    driver->screen_transp    = 0;
    driver->dpi              = LV_DPI_DEF;
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 8011f46:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8011f4a:	8723      	strh	r3, [r4, #56]	; 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 8011f4c:	4b03      	ldr	r3, [pc, #12]	; (8011f5c <lv_disp_drv_init+0x44>)
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 8011f4e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 8011f52:	2358      	movs	r3, #88	; 0x58
 8011f54:	64a3      	str	r3, [r4, #72]	; 0x48
#endif

}
 8011f56:	bd10      	pop	{r4, pc}
 8011f58:	00f00140 	.word	0x00f00140
 8011f5c:	080090bd 	.word	0x080090bd

08011f60 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8011f60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011f64:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8011f66:	4844      	ldr	r0, [pc, #272]	; (8012078 <lv_disp_drv_register+0x118>)
 8011f68:	f012 fd3e 	bl	80249e8 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(disp);
 8011f6c:	4604      	mov	r4, r0
 8011f6e:	b900      	cbnz	r0, 8011f72 <lv_disp_drv_register+0x12>
 8011f70:	e7fe      	b.n	8011f70 <lv_disp_drv_register+0x10>
    if(!disp) {
        return NULL;
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 8011f72:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8011f74:	b953      	cbnz	r3, 8011f8c <lv_disp_drv_register+0x2c>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 8011f76:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8011f78:	f000 fb9a 	bl	80126b0 <lv_mem_alloc>
        LV_ASSERT_MALLOC(draw_ctx);
 8011f7c:	4606      	mov	r6, r0
 8011f7e:	b900      	cbnz	r0, 8011f82 <lv_disp_drv_register+0x22>
 8011f80:	e7fe      	b.n	8011f80 <lv_disp_drv_register+0x20>
        if(draw_ctx == NULL) return NULL;
        driver->draw_ctx_init(driver, draw_ctx);
 8011f82:	4601      	mov	r1, r0
 8011f84:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8011f86:	4628      	mov	r0, r5
 8011f88:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 8011f8a:	63ee      	str	r6, [r5, #60]	; 0x3c
 8011f8c:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8011f90:	2100      	movs	r1, #0
 8011f92:	4620      	mov	r0, r4

    disp->driver = driver;

    disp->inv_en_cnt = 1;

    lv_disp_t * disp_def_tmp = disp_def;
 8011f94:	4f39      	ldr	r7, [pc, #228]	; (801207c <lv_disp_drv_register+0x11c>)
 8011f96:	f008 fbc3 	bl	801a720 <memset>
    disp->inv_en_cnt = 1;
 8011f9a:	2301      	movs	r3, #1
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8011f9c:	4622      	mov	r2, r4
 8011f9e:	211e      	movs	r1, #30
 8011fa0:	4837      	ldr	r0, [pc, #220]	; (8012080 <lv_disp_drv_register+0x120>)
    disp->driver = driver;
 8011fa2:	6025      	str	r5, [r4, #0]
    disp->inv_en_cnt = 1;
 8011fa4:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
    lv_disp_t * disp_def_tmp = disp_def;
 8011fa8:	683e      	ldr	r6, [r7, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 8011faa:	603c      	str	r4, [r7, #0]
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8011fac:	f000 fd18 	bl	80129e0 <lv_timer_create>
 8011fb0:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 8011fb2:	b900      	cbnz	r0, 8011fb6 <lv_disp_drv_register+0x56>
 8011fb4:	e7fe      	b.n	8011fb4 <lv_disp_drv_register+0x54>
    if(disp->refr_timer == NULL) {
        lv_mem_free(disp);
        return NULL;
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 8011fb6:	7c2b      	ldrb	r3, [r5, #16]
 8011fb8:	079a      	lsls	r2, r3, #30
 8011fba:	d50a      	bpl.n	8011fd2 <lv_disp_drv_register+0x72>
 8011fbc:	68e9      	ldr	r1, [r5, #12]
 8011fbe:	882a      	ldrh	r2, [r5, #0]
 8011fc0:	8868      	ldrh	r0, [r5, #2]
 8011fc2:	68c9      	ldr	r1, [r1, #12]
 8011fc4:	fb12 f200 	smulbb	r2, r2, r0
 8011fc8:	4291      	cmp	r1, r2
        driver->full_refresh = 0;
 8011fca:	bf3c      	itt	cc
 8011fcc:	f36f 0341 	bfccc	r3, #1, #1
 8011fd0:	742b      	strbcc	r3, [r5, #16]

    disp->bg_color = lv_color_white();
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 8011fd2:	23ff      	movs	r3, #255	; 0xff
 8011fd4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    disp->bg_color = lv_color_white();
 8011fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011fdc:	8563      	strh	r3, [r4, #42]	; 0x2a
#endif

#if LV_USE_THEME_DEFAULT
    if(lv_theme_default_is_inited() == false) {
 8011fde:	f7fc fa41 	bl	800e464 <lv_theme_default_is_inited>
 8011fe2:	4605      	mov	r5, r0
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	d143      	bne.n	8012070 <lv_disp_drv_register+0x110>
        disp->theme = lv_theme_default_init(disp, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED),
 8011fe8:	2005      	movs	r0, #5
 8011fea:	f000 fac7 	bl	801257c <lv_palette_main>
 8011fee:	4680      	mov	r8, r0
 8011ff0:	4628      	mov	r0, r5
 8011ff2:	f000 fac3 	bl	801257c <lv_palette_main>
 8011ff6:	4b23      	ldr	r3, [pc, #140]	; (8012084 <lv_disp_drv_register+0x124>)
 8011ff8:	4602      	mov	r2, r0
 8011ffa:	4641      	mov	r1, r8
 8011ffc:	9300      	str	r3, [sp, #0]
 8011ffe:	4620      	mov	r0, r4
 8012000:	462b      	mov	r3, r5
 8012002:	f7fa ff41 	bl	800ce88 <lv_theme_default_init>
 8012006:	60a0      	str	r0, [r4, #8]
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 8012008:	2000      	movs	r0, #0
 801200a:	f7f2 fe75 	bl	8004cf8 <lv_obj_create>
 801200e:	6120      	str	r0, [r4, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 8012010:	2000      	movs	r0, #0
 8012012:	2e00      	cmp	r6, #0
 8012014:	bf08      	it	eq
 8012016:	4626      	moveq	r6, r4
 8012018:	f7f2 fe6e 	bl	8004cf8 <lv_obj_create>
 801201c:	61e0      	str	r0, [r4, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 801201e:	2000      	movs	r0, #0
 8012020:	f7f2 fe6a 	bl	8004cf8 <lv_obj_create>
 8012024:	4a18      	ldr	r2, [pc, #96]	; (8012088 <lv_disp_drv_register+0x128>)
 8012026:	6220      	str	r0, [r4, #32]
 8012028:	2100      	movs	r1, #0
 801202a:	69e0      	ldr	r0, [r4, #28]
 801202c:	f00b fe61 	bl	801dcf2 <lv_obj_remove_style>
 8012030:	4a15      	ldr	r2, [pc, #84]	; (8012088 <lv_disp_drv_register+0x128>)
 8012032:	6a20      	ldr	r0, [r4, #32]
 8012034:	2100      	movs	r1, #0
 8012036:	f00b fe5c 	bl	801dcf2 <lv_obj_remove_style>
    lv_obj_remove_style_all(disp->top_layer);
    lv_obj_remove_style_all(disp->sys_layer);
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 801203a:	69e0      	ldr	r0, [r4, #28]
 801203c:	2102      	movs	r1, #2
 801203e:	f009 fc96 	bl	801b96e <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 8012042:	6a20      	ldr	r0, [r4, #32]
 8012044:	2102      	movs	r1, #2
 8012046:	f009 fc92 	bl	801b96e <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 801204a:	69e0      	ldr	r0, [r4, #28]
 801204c:	2100      	movs	r1, #0
 801204e:	f00a ff2f 	bl	801ceb0 <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 8012052:	2100      	movs	r1, #0
 8012054:	6a20      	ldr	r0, [r4, #32]
 8012056:	f00a ff2b 	bl	801ceb0 <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 801205a:	6920      	ldr	r0, [r4, #16]
 801205c:	f00a fdea 	bl	801cc34 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 8012060:	6860      	ldr	r0, [r4, #4]
    disp_def = disp_def_tmp; /*Revert the default display*/
 8012062:	603e      	str	r6, [r7, #0]
    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 8012064:	f013 f825 	bl	80250b2 <lv_timer_ready>

    return disp;
}
 8012068:	4620      	mov	r0, r4
 801206a:	b002      	add	sp, #8
 801206c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        disp->theme = lv_theme_default_get();
 8012070:	f7fc f9ec 	bl	800e44c <lv_theme_default_get>
 8012074:	e7c7      	b.n	8012006 <lv_disp_drv_register+0xa6>
 8012076:	bf00      	nop
 8012078:	240013f8 	.word	0x240013f8
 801207c:	240011ec 	.word	0x240011ec
 8012080:	08007211 	.word	0x08007211
 8012084:	080293a0 	.word	0x080293a0
 8012088:	000fffff 	.word	0x000fffff

0801208c <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 801208c:	4b01      	ldr	r3, [pc, #4]	; (8012094 <lv_disp_get_default+0x8>)
 801208e:	6818      	ldr	r0, [r3, #0]
 8012090:	4770      	bx	lr
 8012092:	bf00      	nop
 8012094:	240011ec 	.word	0x240011ec

08012098 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8012098:	b910      	cbnz	r0, 80120a0 <lv_disp_get_hor_res+0x8>
    return disp_def;
 801209a:	4b06      	ldr	r3, [pc, #24]	; (80120b4 <lv_disp_get_hor_res+0x1c>)
 801209c:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 801209e:	b140      	cbz	r0, 80120b2 <lv_disp_get_hor_res+0x1a>
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 80120a0:	6803      	ldr	r3, [r0, #0]
 80120a2:	7c1a      	ldrb	r2, [r3, #16]
 80120a4:	06d2      	lsls	r2, r2, #27
 80120a6:	d502      	bpl.n	80120ae <lv_disp_get_hor_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 80120a8:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80120ac:	4770      	bx	lr
            default:
                return disp->driver->hor_res;
 80120ae:	f9b3 0000 	ldrsh.w	r0, [r3]
        }
    }
}
 80120b2:	4770      	bx	lr
 80120b4:	240011ec 	.word	0x240011ec

080120b8 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80120b8:	b910      	cbnz	r0, 80120c0 <lv_disp_get_ver_res+0x8>
    return disp_def;
 80120ba:	4b06      	ldr	r3, [pc, #24]	; (80120d4 <lv_disp_get_ver_res+0x1c>)
 80120bc:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 80120be:	b140      	cbz	r0, 80120d2 <lv_disp_get_ver_res+0x1a>
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 80120c0:	6803      	ldr	r3, [r0, #0]
 80120c2:	7c1a      	ldrb	r2, [r3, #16]
 80120c4:	06d2      	lsls	r2, r2, #27
 80120c6:	d502      	bpl.n	80120ce <lv_disp_get_ver_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 80120c8:	f9b3 0000 	ldrsh.w	r0, [r3]
 80120cc:	4770      	bx	lr
            default:
                return disp->driver->ver_res;
 80120ce:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
        }
    }
}
 80120d2:	4770      	bx	lr
 80120d4:	240011ec 	.word	0x240011ec

080120d8 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80120d8:	b910      	cbnz	r0, 80120e0 <lv_disp_get_dpi+0x8>
    return disp_def;
 80120da:	4b05      	ldr	r3, [pc, #20]	; (80120f0 <lv_disp_get_dpi+0x18>)
 80120dc:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 80120de:	b120      	cbz	r0, 80120ea <lv_disp_get_dpi+0x12>
    return disp->driver->dpi;
 80120e0:	6803      	ldr	r3, [r0, #0]
 80120e2:	6918      	ldr	r0, [r3, #16]
 80120e4:	f3c0 10c9 	ubfx	r0, r0, #7, #10
 80120e8:	4770      	bx	lr
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 80120ea:	2082      	movs	r0, #130	; 0x82
}
 80120ec:	4770      	bx	lr
 80120ee:	bf00      	nop
 80120f0:	240011ec 	.word	0x240011ec

080120f4 <lv_disp_get_next>:
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
    if(disp == NULL)
 80120f4:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 80120f6:	4803      	ldr	r0, [pc, #12]	; (8012104 <lv_disp_get_next+0x10>)
    if(disp == NULL)
 80120f8:	b909      	cbnz	r1, 80120fe <lv_disp_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 80120fa:	f012 bce7 	b.w	8024acc <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 80120fe:	f012 bceb 	b.w	8024ad8 <_lv_ll_get_next>
 8012102:	bf00      	nop
 8012104:	240013f8 	.word	0x240013f8

08012108 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 8012108:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 801210a:	4803      	ldr	r0, [pc, #12]	; (8012118 <lv_indev_get_next+0x10>)
    if(indev == NULL)
 801210c:	b909      	cbnz	r1, 8012112 <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 801210e:	f012 bcdd 	b.w	8024acc <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8012112:	f012 bce1 	b.w	8024ad8 <_lv_ll_get_next>
 8012116:	bf00      	nop
 8012118:	240013ec 	.word	0x240013ec

0801211c <anim_mark_list_change>:
        }
    }
}

static void anim_mark_list_change(void)
{
 801211c:	b508      	push	{r3, lr}
    anim_list_changed = true;
 801211e:	2201      	movs	r2, #1
 8012120:	4b08      	ldr	r3, [pc, #32]	; (8012144 <anim_mark_list_change+0x28>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8012122:	4809      	ldr	r0, [pc, #36]	; (8012148 <anim_mark_list_change+0x2c>)
    anim_list_changed = true;
 8012124:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8012126:	f012 fcd1 	bl	8024acc <_lv_ll_get_head>
 801212a:	4b08      	ldr	r3, [pc, #32]	; (801214c <anim_mark_list_change+0x30>)
 801212c:	b920      	cbnz	r0, 8012138 <anim_mark_list_change+0x1c>
        lv_timer_pause(_lv_anim_tmr);
 801212e:	6818      	ldr	r0, [r3, #0]
    else
        lv_timer_resume(_lv_anim_tmr);
}
 8012130:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_pause(_lv_anim_tmr);
 8012134:	f012 bfb3 	b.w	802509e <lv_timer_pause>
        lv_timer_resume(_lv_anim_tmr);
 8012138:	6818      	ldr	r0, [r3, #0]
}
 801213a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_resume(_lv_anim_tmr);
 801213e:	f012 bfb3 	b.w	80250a8 <lv_timer_resume>
 8012142:	bf00      	nop
 8012144:	24010e38 	.word	0x24010e38
 8012148:	240013d4 	.word	0x240013d4
 801214c:	240011f0 	.word	0x240011f0

08012150 <anim_timer>:
{
 8012150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8012154:	4f59      	ldr	r7, [pc, #356]	; (80122bc <anim_timer+0x16c>)
    anim_run_round = anim_run_round ? false : true;
 8012156:	4e5a      	ldr	r6, [pc, #360]	; (80122c0 <anim_timer+0x170>)
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8012158:	6838      	ldr	r0, [r7, #0]
 801215a:	f011 ffca 	bl	80240f2 <lv_tick_elaps>
    anim_run_round = anim_run_round ? false : true;
 801215e:	7833      	ldrb	r3, [r6, #0]
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8012160:	4605      	mov	r5, r0
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012162:	4858      	ldr	r0, [pc, #352]	; (80122c4 <anim_timer+0x174>)
    anim_run_round = anim_run_round ? false : true;
 8012164:	f083 0301 	eor.w	r3, r3, #1
        anim_list_changed = false;
 8012168:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80122c8 <anim_timer+0x178>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801216c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 80122c4 <anim_timer+0x174>
    anim_run_round = anim_run_round ? false : true;
 8012170:	7033      	strb	r3, [r6, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012172:	f012 fcab 	bl	8024acc <_lv_ll_get_head>
 8012176:	4604      	mov	r4, r0
    while(a != NULL) {
 8012178:	b924      	cbnz	r4, 8012184 <anim_timer+0x34>
    last_timer_run = lv_tick_get();
 801217a:	f011 ffb2 	bl	80240e2 <lv_tick_get>
 801217e:	6038      	str	r0, [r7, #0]
}
 8012180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        anim_list_changed = false;
 8012184:	2300      	movs	r3, #0
        if(a->run_round != anim_run_round) {
 8012186:	7832      	ldrb	r2, [r6, #0]
        anim_list_changed = false;
 8012188:	f888 3000 	strb.w	r3, [r8]
        if(a->run_round != anim_run_round) {
 801218c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8012190:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8012194:	4291      	cmp	r1, r2
 8012196:	f000 808c 	beq.w	80122b2 <anim_timer+0x162>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 801219a:	f362 0382 	bfi	r3, r2, #2, #1
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 801219e:	0719      	lsls	r1, r3, #28
 80121a0:	b2da      	uxtb	r2, r3
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 80121a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 80121a6:	d41a      	bmi.n	80121de <anim_timer+0x8e>
            int32_t new_act_time = a->act_time + elaps;
 80121a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	dc17      	bgt.n	80121de <anim_timer+0x8e>
 80121ae:	42eb      	cmn	r3, r5
 80121b0:	d415      	bmi.n	80121de <anim_timer+0x8e>
                if(a->early_apply == 0 && a->get_value_cb) {
 80121b2:	07d3      	lsls	r3, r2, #31
 80121b4:	d409      	bmi.n	80121ca <anim_timer+0x7a>
 80121b6:	6963      	ldr	r3, [r4, #20]
 80121b8:	b13b      	cbz	r3, 80121ca <anim_timer+0x7a>
                    int32_t v_ofs = a->get_value_cb(a);
 80121ba:	4620      	mov	r0, r4
 80121bc:	4798      	blx	r3
                    a->start_value += v_ofs;
 80121be:	6a23      	ldr	r3, [r4, #32]
 80121c0:	4403      	add	r3, r0
 80121c2:	6223      	str	r3, [r4, #32]
                    a->end_value += v_ofs;
 80121c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80121c6:	4403      	add	r3, r0
 80121c8:	62a3      	str	r3, [r4, #40]	; 0x28
                if(a->start_cb) a->start_cb(a);
 80121ca:	68a3      	ldr	r3, [r4, #8]
 80121cc:	b10b      	cbz	r3, 80121d2 <anim_timer+0x82>
 80121ce:	4620      	mov	r0, r4
 80121d0:	4798      	blx	r3
                a->start_cb_called = 1;
 80121d2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80121d6:	f043 0308 	orr.w	r3, r3, #8
 80121da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            a->act_time += elaps;
 80121de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80121e0:	442b      	add	r3, r5
            if(a->act_time >= 0) {
 80121e2:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 80121e4:	6323      	str	r3, [r4, #48]	; 0x30
            if(a->act_time >= 0) {
 80121e6:	db2b      	blt.n	8012240 <anim_timer+0xf0>
                if(a->act_time > a->time) a->act_time = a->time;
 80121e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                new_value = a->path_cb(a);
 80121ea:	4620      	mov	r0, r4
 80121ec:	429a      	cmp	r2, r3
 80121ee:	bfd4      	ite	le
 80121f0:	6322      	strle	r2, [r4, #48]	; 0x30
 80121f2:	6323      	strgt	r3, [r4, #48]	; 0x30
 80121f4:	69e3      	ldr	r3, [r4, #28]
 80121f6:	4798      	blx	r3
                if(new_value != a->current_value) {
 80121f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
                new_value = a->path_cb(a);
 80121fa:	4601      	mov	r1, r0
                if(new_value != a->current_value) {
 80121fc:	4283      	cmp	r3, r0
 80121fe:	d004      	beq.n	801220a <anim_timer+0xba>
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8012200:	6863      	ldr	r3, [r4, #4]
                    a->current_value = new_value;
 8012202:	6260      	str	r0, [r4, #36]	; 0x24
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8012204:	b10b      	cbz	r3, 801220a <anim_timer+0xba>
 8012206:	6820      	ldr	r0, [r4, #0]
 8012208:	4798      	blx	r3
                if(a->act_time >= a->time) {
 801220a:	e9d4 030b 	ldrd	r0, r3, [r4, #44]	; 0x2c
 801220e:	4283      	cmp	r3, r0
 8012210:	db16      	blt.n	8012240 <anim_timer+0xf0>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8012212:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8012216:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 801221a:	f012 0202 	ands.w	r2, r2, #2
 801221e:	d018      	beq.n	8012252 <anim_timer+0x102>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8012220:	bb5b      	cbnz	r3, 801227a <anim_timer+0x12a>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8012222:	4621      	mov	r1, r4
 8012224:	4827      	ldr	r0, [pc, #156]	; (80122c4 <anim_timer+0x174>)
 8012226:	f012 fc16 	bl	8024a56 <_lv_ll_remove>
        anim_mark_list_change();
 801222a:	f7ff ff77 	bl	801211c <anim_mark_list_change>
        if(a->ready_cb != NULL) a->ready_cb(a);
 801222e:	68e3      	ldr	r3, [r4, #12]
 8012230:	bb03      	cbnz	r3, 8012274 <anim_timer+0x124>
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 8012232:	6923      	ldr	r3, [r4, #16]
 8012234:	b10b      	cbz	r3, 801223a <anim_timer+0xea>
 8012236:	4620      	mov	r0, r4
 8012238:	4798      	blx	r3
        lv_mem_free(a);
 801223a:	4620      	mov	r0, r4
 801223c:	f000 fa56 	bl	80126ec <lv_mem_free>
        if(anim_list_changed)
 8012240:	f898 3000 	ldrb.w	r3, [r8]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d034      	beq.n	80122b2 <anim_timer+0x162>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012248:	4648      	mov	r0, r9
 801224a:	f012 fc3f 	bl	8024acc <_lv_ll_get_head>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801224e:	4604      	mov	r4, r0
 8012250:	e792      	b.n	8012178 <anim_timer+0x28>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8012252:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8012254:	b143      	cbz	r3, 8012268 <anim_timer+0x118>
 8012256:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801225a:	4563      	cmp	r3, ip
 801225c:	d023      	beq.n	80122a6 <anim_timer+0x156>
        a->repeat_cnt--;
 801225e:	3b01      	subs	r3, #1
 8012260:	b29b      	uxth	r3, r3
 8012262:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8012266:	b9f3      	cbnz	r3, 80122a6 <anim_timer+0x156>
 8012268:	2900      	cmp	r1, #0
 801226a:	d0da      	beq.n	8012222 <anim_timer+0xd2>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 801226c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801226e:	425b      	negs	r3, r3
 8012270:	6323      	str	r3, [r4, #48]	; 0x30
 8012272:	e008      	b.n	8012286 <anim_timer+0x136>
        if(a->ready_cb != NULL) a->ready_cb(a);
 8012274:	4620      	mov	r0, r4
 8012276:	4798      	blx	r3
 8012278:	e7db      	b.n	8012232 <anim_timer+0xe2>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 801227a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
        if(a->playback_time != 0) {
 801227c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 801227e:	425b      	negs	r3, r3
 8012280:	6323      	str	r3, [r4, #48]	; 0x30
        if(a->playback_time != 0) {
 8012282:	2900      	cmp	r1, #0
 8012284:	d0dc      	beq.n	8012240 <anim_timer+0xf0>
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8012286:	fab2 f282 	clz	r2, r2
 801228a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
            a->playback_time = tmp;
 801228e:	63a0      	str	r0, [r4, #56]	; 0x38
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8012290:	0952      	lsrs	r2, r2, #5
 8012292:	f362 0341 	bfi	r3, r2, #1, #1
            int32_t tmp    = a->start_value;
 8012296:	6a22      	ldr	r2, [r4, #32]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8012298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            a->start_value = a->end_value;
 801229c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            a->time = a->playback_time;
 801229e:	e9c4 210a 	strd	r2, r1, [r4, #40]	; 0x28
            a->start_value = a->end_value;
 80122a2:	6223      	str	r3, [r4, #32]
            a->playback_time = tmp;
 80122a4:	e7cc      	b.n	8012240 <anim_timer+0xf0>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 80122a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80122a8:	425b      	negs	r3, r3
 80122aa:	6323      	str	r3, [r4, #48]	; 0x30
        if(a->playback_time != 0) {
 80122ac:	2900      	cmp	r1, #0
 80122ae:	d0c7      	beq.n	8012240 <anim_timer+0xf0>
 80122b0:	e7dc      	b.n	801226c <anim_timer+0x11c>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80122b2:	4621      	mov	r1, r4
 80122b4:	4648      	mov	r0, r9
 80122b6:	f012 fc0f 	bl	8024ad8 <_lv_ll_get_next>
 80122ba:	e7c8      	b.n	801224e <anim_timer+0xfe>
 80122bc:	240011f4 	.word	0x240011f4
 80122c0:	24010e37 	.word	0x24010e37
 80122c4:	240013d4 	.word	0x240013d4
 80122c8:	24010e38 	.word	0x24010e38

080122cc <_lv_anim_core_init>:
{
 80122cc:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 80122ce:	2144      	movs	r1, #68	; 0x44
 80122d0:	4807      	ldr	r0, [pc, #28]	; (80122f0 <_lv_anim_core_init+0x24>)
 80122d2:	f012 fb81 	bl	80249d8 <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 80122d6:	2200      	movs	r2, #0
 80122d8:	211e      	movs	r1, #30
 80122da:	4806      	ldr	r0, [pc, #24]	; (80122f4 <_lv_anim_core_init+0x28>)
 80122dc:	f000 fb80 	bl	80129e0 <lv_timer_create>
 80122e0:	4b05      	ldr	r3, [pc, #20]	; (80122f8 <_lv_anim_core_init+0x2c>)
 80122e2:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 80122e4:	f7ff ff1a 	bl	801211c <anim_mark_list_change>
    anim_list_changed = false;
 80122e8:	4b04      	ldr	r3, [pc, #16]	; (80122fc <_lv_anim_core_init+0x30>)
 80122ea:	2200      	movs	r2, #0
 80122ec:	701a      	strb	r2, [r3, #0]
}
 80122ee:	bd08      	pop	{r3, pc}
 80122f0:	240013d4 	.word	0x240013d4
 80122f4:	08012151 	.word	0x08012151
 80122f8:	240011f0 	.word	0x240011f0
 80122fc:	24010e38 	.word	0x24010e38

08012300 <lv_anim_init>:
{
 8012300:	b510      	push	{r4, lr}
 8012302:	2244      	movs	r2, #68	; 0x44
 8012304:	2100      	movs	r1, #0
 8012306:	4604      	mov	r4, r0
 8012308:	f008 fa0a 	bl	801a720 <memset>
    a->time = 500;
 801230c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012310:	62e3      	str	r3, [r4, #44]	; 0x2c
    a->start_value = 0;
 8012312:	2300      	movs	r3, #0
 8012314:	6223      	str	r3, [r4, #32]
    a->end_value = 100;
 8012316:	2364      	movs	r3, #100	; 0x64
 8012318:	62a3      	str	r3, [r4, #40]	; 0x28
    a->repeat_cnt = 1;
 801231a:	2301      	movs	r3, #1
 801231c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    a->path_cb = lv_anim_path_linear;
 8012320:	4b04      	ldr	r3, [pc, #16]	; (8012334 <lv_anim_init+0x34>)
 8012322:	61e3      	str	r3, [r4, #28]
    a->early_apply = 1;
 8012324:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8012328:	f043 0301 	orr.w	r3, r3, #1
 801232c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8012330:	bd10      	pop	{r4, pc}
 8012332:	bf00      	nop
 8012334:	08024107 	.word	0x08024107

08012338 <lv_anim_del>:
{
 8012338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801233c:	4605      	mov	r5, r0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801233e:	4815      	ldr	r0, [pc, #84]	; (8012394 <lv_anim_del+0x5c>)
{
 8012340:	460e      	mov	r6, r1
    bool del = false;
 8012342:	f04f 0800 	mov.w	r8, #0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012346:	f012 fbc1 	bl	8024acc <_lv_ll_get_head>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801234a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8012394 <lv_anim_del+0x5c>
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801234e:	4604      	mov	r4, r0
    while(a != NULL) {
 8012350:	b914      	cbnz	r4, 8012358 <lv_anim_del+0x20>
}
 8012352:	4640      	mov	r0, r8
 8012354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012358:	4621      	mov	r1, r4
 801235a:	4648      	mov	r0, r9
 801235c:	f012 fbbc 	bl	8024ad8 <_lv_ll_get_next>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8012360:	6823      	ldr	r3, [r4, #0]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012362:	4607      	mov	r7, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8012364:	42ab      	cmp	r3, r5
 8012366:	d000      	beq.n	801236a <lv_anim_del+0x32>
 8012368:	b995      	cbnz	r5, 8012390 <lv_anim_del+0x58>
 801236a:	6863      	ldr	r3, [r4, #4]
 801236c:	42b3      	cmp	r3, r6
 801236e:	d000      	beq.n	8012372 <lv_anim_del+0x3a>
 8012370:	b976      	cbnz	r6, 8012390 <lv_anim_del+0x58>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8012372:	4621      	mov	r1, r4
 8012374:	4648      	mov	r0, r9
 8012376:	f012 fb6e 	bl	8024a56 <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 801237a:	6923      	ldr	r3, [r4, #16]
 801237c:	b10b      	cbz	r3, 8012382 <lv_anim_del+0x4a>
 801237e:	4620      	mov	r0, r4
 8012380:	4798      	blx	r3
            del = true;
 8012382:	f04f 0801 	mov.w	r8, #1
            lv_mem_free(a);
 8012386:	4620      	mov	r0, r4
 8012388:	f000 f9b0 	bl	80126ec <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 801238c:	f7ff fec6 	bl	801211c <anim_mark_list_change>
            del = true;
 8012390:	463c      	mov	r4, r7
 8012392:	e7dd      	b.n	8012350 <lv_anim_del+0x18>
 8012394:	240013d4 	.word	0x240013d4

08012398 <lv_anim_start>:
{
 8012398:	b538      	push	{r3, r4, r5, lr}
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 801239a:	6841      	ldr	r1, [r0, #4]
{
 801239c:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 801239e:	b111      	cbz	r1, 80123a6 <lv_anim_start+0xe>
 80123a0:	6800      	ldr	r0, [r0, #0]
 80123a2:	f7ff ffc9 	bl	8012338 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 80123a6:	481a      	ldr	r0, [pc, #104]	; (8012410 <lv_anim_start+0x78>)
 80123a8:	f012 fba9 	bl	8024afe <_lv_ll_is_empty>
 80123ac:	b118      	cbz	r0, 80123b6 <lv_anim_start+0x1e>
        last_timer_run = lv_tick_get();
 80123ae:	f011 fe98 	bl	80240e2 <lv_tick_get>
 80123b2:	4b18      	ldr	r3, [pc, #96]	; (8012414 <lv_anim_start+0x7c>)
 80123b4:	6018      	str	r0, [r3, #0]
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 80123b6:	4816      	ldr	r0, [pc, #88]	; (8012410 <lv_anim_start+0x78>)
 80123b8:	f012 fb16 	bl	80249e8 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_anim);
 80123bc:	4604      	mov	r4, r0
 80123be:	b900      	cbnz	r0, 80123c2 <lv_anim_start+0x2a>
 80123c0:	e7fe      	b.n	80123c0 <lv_anim_start+0x28>
    return memcpy(dst, src, len);
 80123c2:	2244      	movs	r2, #68	; 0x44
 80123c4:	4629      	mov	r1, r5
 80123c6:	f008 f9a0 	bl	801a70a <memcpy>
    if(a->var == a) new_anim->var = new_anim;
 80123ca:	682b      	ldr	r3, [r5, #0]
    new_anim->run_round = anim_run_round;
 80123cc:	4a12      	ldr	r2, [pc, #72]	; (8012418 <lv_anim_start+0x80>)
    if(a->var == a) new_anim->var = new_anim;
 80123ce:	42ab      	cmp	r3, r5
    new_anim->run_round = anim_run_round;
 80123d0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80123d4:	7812      	ldrb	r2, [r2, #0]
    if(a->var == a) new_anim->var = new_anim;
 80123d6:	bf08      	it	eq
 80123d8:	6024      	streq	r4, [r4, #0]
    new_anim->run_round = anim_run_round;
 80123da:	f362 0382 	bfi	r3, r2, #2, #1
 80123de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    if(new_anim->early_apply) {
 80123e2:	07db      	lsls	r3, r3, #31
 80123e4:	d50f      	bpl.n	8012406 <lv_anim_start+0x6e>
        if(new_anim->get_value_cb) {
 80123e6:	6963      	ldr	r3, [r4, #20]
 80123e8:	b13b      	cbz	r3, 80123fa <lv_anim_start+0x62>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 80123ea:	4620      	mov	r0, r4
 80123ec:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 80123ee:	6a23      	ldr	r3, [r4, #32]
 80123f0:	4403      	add	r3, r0
 80123f2:	6223      	str	r3, [r4, #32]
            new_anim->end_value += v_ofs;
 80123f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80123f6:	4403      	add	r3, r0
 80123f8:	62a3      	str	r3, [r4, #40]	; 0x28
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 80123fa:	6863      	ldr	r3, [r4, #4]
 80123fc:	b11b      	cbz	r3, 8012406 <lv_anim_start+0x6e>
 80123fe:	6820      	ldr	r0, [r4, #0]
 8012400:	b108      	cbz	r0, 8012406 <lv_anim_start+0x6e>
 8012402:	6a21      	ldr	r1, [r4, #32]
 8012404:	4798      	blx	r3
    anim_mark_list_change();
 8012406:	f7ff fe89 	bl	801211c <anim_mark_list_change>
}
 801240a:	4620      	mov	r0, r4
 801240c:	bd38      	pop	{r3, r4, r5, pc}
 801240e:	bf00      	nop
 8012410:	240013d4 	.word	0x240013d4
 8012414:	240011f4 	.word	0x240011f4
 8012418:	24010e37 	.word	0x24010e37

0801241c <lv_anim_get>:
{
 801241c:	b570      	push	{r4, r5, r6, lr}
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 801241e:	4e0a      	ldr	r6, [pc, #40]	; (8012448 <lv_anim_get+0x2c>)
{
 8012420:	4605      	mov	r5, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8012422:	4809      	ldr	r0, [pc, #36]	; (8012448 <lv_anim_get+0x2c>)
{
 8012424:	460c      	mov	r4, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8012426:	f012 fb51 	bl	8024acc <_lv_ll_get_head>
 801242a:	b900      	cbnz	r0, 801242e <lv_anim_get+0x12>
}
 801242c:	bd70      	pop	{r4, r5, r6, pc}
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 801242e:	6803      	ldr	r3, [r0, #0]
 8012430:	42ab      	cmp	r3, r5
 8012432:	d104      	bne.n	801243e <lv_anim_get+0x22>
 8012434:	6843      	ldr	r3, [r0, #4]
 8012436:	42a3      	cmp	r3, r4
 8012438:	d0f8      	beq.n	801242c <lv_anim_get+0x10>
 801243a:	2c00      	cmp	r4, #0
 801243c:	d0f6      	beq.n	801242c <lv_anim_get+0x10>
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 801243e:	4601      	mov	r1, r0
 8012440:	4630      	mov	r0, r6
 8012442:	f012 fb49 	bl	8024ad8 <_lv_ll_get_next>
 8012446:	e7f0      	b.n	801242a <lv_anim_get+0xe>
 8012448:	240013d4 	.word	0x240013d4

0801244c <lv_point_transform>:
    to_align->y2 = to_align->y1 + h - 1;
}

#define _LV_TRANSFORM_TRIGO_SHIFT 10
void lv_point_transform(lv_point_t * p, int32_t angle, int32_t zoom, const lv_point_t * pivot)
{
 801244c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012450:	4604      	mov	r4, r0
 8012452:	4617      	mov	r7, r2
 8012454:	4698      	mov	r8, r3
    if(angle == 0 && zoom == 256) {
 8012456:	460d      	mov	r5, r1
 8012458:	b911      	cbnz	r1, 8012460 <lv_point_transform+0x14>
 801245a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801245e:	d018      	beq.n	8012492 <lv_point_transform+0x46>
        return;
    }

    p->x -= pivot->x;
 8012460:	f8b8 3000 	ldrh.w	r3, [r8]
 8012464:	8822      	ldrh	r2, [r4, #0]
 8012466:	1ad2      	subs	r2, r2, r3
    p->y -= pivot->y;
 8012468:	8863      	ldrh	r3, [r4, #2]
    p->x -= pivot->x;
 801246a:	b212      	sxth	r2, r2
 801246c:	8022      	strh	r2, [r4, #0]
    p->y -= pivot->y;
 801246e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8012472:	1a5b      	subs	r3, r3, r1
 8012474:	b21b      	sxth	r3, r3
 8012476:	8063      	strh	r3, [r4, #2]

    if(angle == 0) {
 8012478:	b975      	cbnz	r5, 8012498 <lv_point_transform+0x4c>
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 801247a:	f8b8 1000 	ldrh.w	r1, [r8]
 801247e:	437a      	muls	r2, r7
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 8012480:	437b      	muls	r3, r7
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 8012482:	eb01 2222 	add.w	r2, r1, r2, asr #8
 8012486:	8022      	strh	r2, [r4, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 8012488:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801248c:	eb02 2323 	add.w	r3, r2, r3, asr #8
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
    }
    else {
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 8012490:	8063      	strh	r3, [r4, #2]
    }
}
 8012492:	b003      	add	sp, #12
 8012494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(angle_prev != angle) {
 8012498:	4935      	ldr	r1, [pc, #212]	; (8012570 <lv_point_transform+0x124>)
 801249a:	4a36      	ldr	r2, [pc, #216]	; (8012574 <lv_point_transform+0x128>)
 801249c:	680b      	ldr	r3, [r1, #0]
 801249e:	42ab      	cmp	r3, r5
 80124a0:	d03a      	beq.n	8012518 <lv_point_transform+0xcc>
        if(angle_limited > 3600) angle_limited -= 3600;
 80124a2:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
 80124a6:	dd53      	ble.n	8012550 <lv_point_transform+0x104>
 80124a8:	f5a5 6961 	sub.w	r9, r5, #3600	; 0xe10
        int32_t angle_low = angle_limited / 10;
 80124ac:	f04f 0b0a 	mov.w	fp, #10
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 80124b0:	f06f 0309 	mvn.w	r3, #9
        int32_t angle_low = angle_limited / 10;
 80124b4:	fb99 fafb 	sdiv	sl, r9, fp
        int32_t angle_high = angle_low + 1;
 80124b8:	f10a 0601 	add.w	r6, sl, #1
        int32_t s1 = lv_trigo_sin(angle_low);
 80124bc:	fa0f f08a 	sxth.w	r0, sl
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 80124c0:	fb03 990a 	mla	r9, r3, sl, r9
        int32_t s1 = lv_trigo_sin(angle_low);
 80124c4:	f000 f8ba 	bl	801263c <lv_trigo_sin>
 80124c8:	9001      	str	r0, [sp, #4]
        int32_t s2 = lv_trigo_sin(angle_high);
 80124ca:	b230      	sxth	r0, r6
 80124cc:	f000 f8b6 	bl	801263c <lv_trigo_sin>
 80124d0:	4606      	mov	r6, r0
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 80124d2:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80124d6:	fb09 f606 	mul.w	r6, r9, r6
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 80124da:	b200      	sxth	r0, r0
 80124dc:	f000 f8ae 	bl	801263c <lv_trigo_sin>
 80124e0:	9000      	str	r0, [sp, #0]
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 80124e2:	f10a 005b 	add.w	r0, sl, #91	; 0x5b
 80124e6:	b200      	sxth	r0, r0
 80124e8:	f000 f8a8 	bl	801263c <lv_trigo_sin>
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80124ec:	ebab 0c09 	sub.w	ip, fp, r9
 80124f0:	9b01      	ldr	r3, [sp, #4]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80124f2:	9900      	ldr	r1, [sp, #0]
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80124f4:	fb0c 6603 	mla	r6, ip, r3, r6
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 80124f8:	4a1e      	ldr	r2, [pc, #120]	; (8012574 <lv_point_transform+0x128>)
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80124fa:	fb09 f300 	mul.w	r3, r9, r0
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 80124fe:	481e      	ldr	r0, [pc, #120]	; (8012578 <lv_point_transform+0x12c>)
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8012500:	fb0c 3301 	mla	r3, ip, r1, r3
        angle_prev = angle;
 8012504:	491a      	ldr	r1, [pc, #104]	; (8012570 <lv_point_transform+0x124>)
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8012506:	fb96 f6fb 	sdiv	r6, r6, fp
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801250a:	fb93 f3fb 	sdiv	r3, r3, fp
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801250e:	1176      	asrs	r6, r6, #5
        angle_prev = angle;
 8012510:	600d      	str	r5, [r1, #0]
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8012512:	115b      	asrs	r3, r3, #5
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8012514:	6016      	str	r6, [r2, #0]
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8012516:	6003      	str	r3, [r0, #0]
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8012518:	4917      	ldr	r1, [pc, #92]	; (8012578 <lv_point_transform+0x12c>)
    if(zoom == 256) {
 801251a:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    int32_t x = p->x;
 801251e:	f9b4 0000 	ldrsh.w	r0, [r4]
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8012522:	680e      	ldr	r6, [r1, #0]
 8012524:	6815      	ldr	r5, [r2, #0]
    int32_t y = p->y;
 8012526:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801252a:	fb06 f100 	mul.w	r1, r6, r0
 801252e:	f8b8 2000 	ldrh.w	r2, [r8]
 8012532:	fb05 1113 	mls	r1, r5, r3, r1
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8012536:	fb06 f303 	mul.w	r3, r6, r3
 801253a:	fb05 3300 	mla	r3, r5, r0, r3
    if(zoom == 256) {
 801253e:	d10d      	bne.n	801255c <lv_point_transform+0x110>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8012540:	eb02 22a1 	add.w	r2, r2, r1, asr #10
 8012544:	8022      	strh	r2, [r4, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8012546:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801254a:	eb02 23a3 	add.w	r3, r2, r3, asr #10
 801254e:	e79f      	b.n	8012490 <lv_point_transform+0x44>
        if(angle_limited < 0) angle_limited += 3600;
 8012550:	2d00      	cmp	r5, #0
 8012552:	bfb4      	ite	lt
 8012554:	f505 6961 	addlt.w	r9, r5, #3600	; 0xe10
 8012558:	46a9      	movge	r9, r5
 801255a:	e7a7      	b.n	80124ac <lv_point_transform+0x60>
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 801255c:	4379      	muls	r1, r7
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 801255e:	435f      	muls	r7, r3
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 8012560:	eb02 42a1 	add.w	r2, r2, r1, asr #18
 8012564:	8022      	strh	r2, [r4, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 8012566:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 801256a:	eb03 43a7 	add.w	r3, r3, r7, asr #18
 801256e:	e78f      	b.n	8012490 <lv_point_transform+0x44>
 8012570:	240000e8 	.word	0x240000e8
 8012574:	240011fc 	.word	0x240011fc
 8012578:	240011f8 	.word	0x240011f8

0801257c <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 801257c:	2812      	cmp	r0, #18
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    return colors[p];
 801257e:	bf96      	itet	ls
 8012580:	4b02      	ldrls	r3, [pc, #8]	; (801258c <lv_palette_main+0x10>)
 8012582:	2000      	movhi	r0, #0
 8012584:	f833 0010 	ldrhls.w	r0, [r3, r0, lsl #1]

}
 8012588:	4770      	bx	lr
 801258a:	bf00      	nop
 801258c:	08029dec 	.word	0x08029dec

08012590 <lv_palette_lighten>:
        {LV_COLOR_MAKE(0x8D, 0x6E, 0x63), LV_COLOR_MAKE(0xA1, 0x88, 0x7F), LV_COLOR_MAKE(0xBC, 0xAA, 0xA4), LV_COLOR_MAKE(0xD7, 0xCC, 0xC8), LV_COLOR_MAKE(0xEF, 0xEB, 0xE9)},
        {LV_COLOR_MAKE(0x78, 0x90, 0x9C), LV_COLOR_MAKE(0x90, 0xA4, 0xAE), LV_COLOR_MAKE(0xB0, 0xBE, 0xC5), LV_COLOR_MAKE(0xCF, 0xD8, 0xDC), LV_COLOR_MAKE(0xEC, 0xEF, 0xF1)},
        {LV_COLOR_MAKE(0xBD, 0xBD, 0xBD), LV_COLOR_MAKE(0xE0, 0xE0, 0xE0), LV_COLOR_MAKE(0xEE, 0xEE, 0xEE), LV_COLOR_MAKE(0xF5, 0xF5, 0xF5), LV_COLOR_MAKE(0xFA, 0xFA, 0xFA)},
    };

    if(p >= _LV_PALETTE_LAST) {
 8012590:	2812      	cmp	r0, #18
 8012592:	d902      	bls.n	801259a <lv_palette_lighten+0xa>
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
    return lv_color_make(0x00, 0x0, 0x00);
 8012594:	f04f 0000 	mov.w	r0, #0
 8012598:	4770      	bx	lr
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 5) {
 801259a:	3901      	subs	r1, #1
 801259c:	b2c9      	uxtb	r1, r1
 801259e:	2904      	cmp	r1, #4
 80125a0:	d8f8      	bhi.n	8012594 <lv_palette_lighten+0x4>
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 80125a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125a6:	4b02      	ldr	r3, [pc, #8]	; (80125b0 <lv_palette_lighten+0x20>)
 80125a8:	4408      	add	r0, r1
 80125aa:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 80125ae:	4770      	bx	lr
 80125b0:	08029d2e 	.word	0x08029d2e

080125b4 <lv_palette_darken>:
        {LV_COLOR_MAKE(0x6D, 0x4C, 0x41), LV_COLOR_MAKE(0x5D, 0x40, 0x37), LV_COLOR_MAKE(0x4E, 0x34, 0x2E), LV_COLOR_MAKE(0x3E, 0x27, 0x23)},
        {LV_COLOR_MAKE(0x54, 0x6E, 0x7A), LV_COLOR_MAKE(0x45, 0x5A, 0x64), LV_COLOR_MAKE(0x37, 0x47, 0x4F), LV_COLOR_MAKE(0x26, 0x32, 0x38)},
        {LV_COLOR_MAKE(0x75, 0x75, 0x75), LV_COLOR_MAKE(0x61, 0x61, 0x61), LV_COLOR_MAKE(0x42, 0x42, 0x42), LV_COLOR_MAKE(0x21, 0x21, 0x21)},
    };

    if(p >= _LV_PALETTE_LAST) {
 80125b4:	2812      	cmp	r0, #18
 80125b6:	d902      	bls.n	80125be <lv_palette_darken+0xa>
 80125b8:	f04f 0000 	mov.w	r0, #0
 80125bc:	4770      	bx	lr
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 4) {
 80125be:	3901      	subs	r1, #1
 80125c0:	b2c9      	uxtb	r1, r1
 80125c2:	2903      	cmp	r1, #3
 80125c4:	d8f8      	bhi.n	80125b8 <lv_palette_darken+0x4>
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 80125c6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80125ca:	4b02      	ldr	r3, [pc, #8]	; (80125d4 <lv_palette_darken+0x20>)
 80125cc:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 80125d0:	4770      	bx	lr
 80125d2:	bf00      	nop
 80125d4:	08029c96 	.word	0x08029c96

080125d8 <_lv_fs_init>:
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 80125d8:	2104      	movs	r1, #4
 80125da:	4801      	ldr	r0, [pc, #4]	; (80125e0 <_lv_fs_init+0x8>)
 80125dc:	f012 b9fc 	b.w	80249d8 <_lv_ll_init>
 80125e0:	240013e0 	.word	0x240013e0

080125e4 <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 80125e4:	b538      	push	{r3, r4, r5, lr}
 80125e6:	4604      	mov	r4, r0
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 80125e8:	4808      	ldr	r0, [pc, #32]	; (801260c <lv_fs_get_drv+0x28>)
 80125ea:	f012 fa6f 	bl	8024acc <_lv_ll_get_head>
 80125ee:	4d07      	ldr	r5, [pc, #28]	; (801260c <lv_fs_get_drv+0x28>)
 80125f0:	4601      	mov	r1, r0
 80125f2:	b909      	cbnz	r1, 80125f8 <lv_fs_get_drv+0x14>
        if((*drv)->letter == letter) {
            return *drv;
        }
    }

    return NULL;
 80125f4:	4608      	mov	r0, r1
}
 80125f6:	bd38      	pop	{r3, r4, r5, pc}
        if((*drv)->letter == letter) {
 80125f8:	6808      	ldr	r0, [r1, #0]
 80125fa:	7803      	ldrb	r3, [r0, #0]
 80125fc:	42a3      	cmp	r3, r4
 80125fe:	d0fa      	beq.n	80125f6 <lv_fs_get_drv+0x12>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8012600:	4628      	mov	r0, r5
 8012602:	f012 fa69 	bl	8024ad8 <_lv_ll_get_next>
 8012606:	4601      	mov	r1, r0
 8012608:	e7f3      	b.n	80125f2 <lv_fs_get_drv+0xe>
 801260a:	bf00      	nop
 801260c:	240013e0 	.word	0x240013e0

08012610 <lv_fs_get_ext>:

    return buf;
}

const char * lv_fs_get_ext(const char * fn)
{
 8012610:	b510      	push	{r4, lr}
 8012612:	4604      	mov	r4, r0
    size_t i;
    for(i = strlen(fn); i > 0; i--) {
 8012614:	f008 f866 	bl	801a6e4 <strlen>
 8012618:	b908      	cbnz	r0, 801261e <lv_fs_get_ext+0xe>
        if(fn[i] == '.') {
            return &fn[i + 1];
        }
        else if(fn[i] == '/' || fn[i] == '\\') {
            return ""; /*No extension if a '\' or '/' found*/
 801261a:	4807      	ldr	r0, [pc, #28]	; (8012638 <lv_fs_get_ext+0x28>)
 801261c:	e004      	b.n	8012628 <lv_fs_get_ext+0x18>
        if(fn[i] == '.') {
 801261e:	5c23      	ldrb	r3, [r4, r0]
 8012620:	2b2e      	cmp	r3, #46	; 0x2e
 8012622:	d102      	bne.n	801262a <lv_fs_get_ext+0x1a>
            return &fn[i + 1];
 8012624:	3001      	adds	r0, #1
 8012626:	4420      	add	r0, r4
        }
    }

    return ""; /*Empty string if no '.' in the file name.*/
}
 8012628:	bd10      	pop	{r4, pc}
        else if(fn[i] == '/' || fn[i] == '\\') {
 801262a:	2b2f      	cmp	r3, #47	; 0x2f
 801262c:	d0f5      	beq.n	801261a <lv_fs_get_ext+0xa>
 801262e:	2b5c      	cmp	r3, #92	; 0x5c
 8012630:	d0f3      	beq.n	801261a <lv_fs_get_ext+0xa>
    for(i = strlen(fn); i > 0; i--) {
 8012632:	3801      	subs	r0, #1
 8012634:	e7f0      	b.n	8012618 <lv_fs_get_ext+0x8>
 8012636:	bf00      	nop
 8012638:	0802a016 	.word	0x0802a016

0801263c <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 801263c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8012640:	fb90 f2f3 	sdiv	r2, r0, r3
 8012644:	fb02 0013 	mls	r0, r2, r3, r0
 8012648:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 801264a:	2800      	cmp	r0, #0
 801264c:	bfb8      	it	lt
 801264e:	18c0      	addlt	r0, r0, r3
 8012650:	4b0f      	ldr	r3, [pc, #60]	; (8012690 <lv_trigo_sin+0x54>)
 8012652:	bfb8      	it	lt
 8012654:	b200      	sxthlt	r0, r0

    if(angle < 90) {
 8012656:	2859      	cmp	r0, #89	; 0x59
 8012658:	dc02      	bgt.n	8012660 <lv_trigo_sin+0x24>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
 801265a:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 801265e:	4770      	bx	lr
    else if(angle >= 90 && angle < 180) {
 8012660:	b280      	uxth	r0, r0
 8012662:	f1a0 025a 	sub.w	r2, r0, #90	; 0x5a
 8012666:	2a59      	cmp	r2, #89	; 0x59
 8012668:	d803      	bhi.n	8012672 <lv_trigo_sin+0x36>
        angle = 180 - angle;
 801266a:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
 801266e:	b280      	uxth	r0, r0
 8012670:	e7f3      	b.n	801265a <lv_trigo_sin+0x1e>
    }
    else if(angle >= 180 && angle < 270) {
 8012672:	f1a0 02b4 	sub.w	r2, r0, #180	; 0xb4
 8012676:	b292      	uxth	r2, r2
 8012678:	2a59      	cmp	r2, #89	; 0x59
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 801267a:	bf89      	itett	hi
 801267c:	f5c0 70b4 	rsbhi	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
 8012680:	f833 0012 	ldrhls.w	r0, [r3, r2, lsl #1]
        ret   = -sin0_90_table[angle];
 8012684:	b280      	uxthhi	r0, r0
 8012686:	f833 0010 	ldrhhi.w	r0, [r3, r0, lsl #1]
 801268a:	4240      	negs	r0, r0
 801268c:	b200      	sxth	r0, r0
    }

    return ret;
}
 801268e:	4770      	bx	lr
 8012690:	08029e12 	.word	0x08029e12

08012694 <lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 8012694:	b508      	push	{r3, lr}
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 8012696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801269a:	4803      	ldr	r0, [pc, #12]	; (80126a8 <lv_mem_init+0x14>)
 801269c:	f012 feb9 	bl	8025412 <lv_tlsf_create_with_pool>
 80126a0:	4b02      	ldr	r3, [pc, #8]	; (80126ac <lv_mem_init+0x18>)
 80126a2:	6018      	str	r0, [r3, #0]
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 80126a4:	bd08      	pop	{r3, pc}
 80126a6:	bf00      	nop
 80126a8:	24001410 	.word	0x24001410
 80126ac:	24009418 	.word	0x24009418

080126b0 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 80126b0:	b510      	push	{r4, lr}
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 80126b2:	4604      	mov	r4, r0
 80126b4:	b180      	cbz	r0, 80126d8 <lv_mem_alloc+0x28>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
    }

#if LV_MEM_CUSTOM == 0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 80126b6:	4b09      	ldr	r3, [pc, #36]	; (80126dc <lv_mem_alloc+0x2c>)
 80126b8:	4601      	mov	r1, r0
 80126ba:	6818      	ldr	r0, [r3, #0]
 80126bc:	f012 feb7 	bl	802542e <lv_tlsf_malloc>
    else {
        lv_memset(alloc, 0xaa, size);
    }
#endif

    if(alloc) {
 80126c0:	b148      	cbz	r0, 80126d6 <lv_mem_alloc+0x26>
#if LV_MEM_CUSTOM == 0
        cur_used += size;
 80126c2:	4b07      	ldr	r3, [pc, #28]	; (80126e0 <lv_mem_alloc+0x30>)
 80126c4:	681a      	ldr	r2, [r3, #0]
 80126c6:	4414      	add	r4, r2
 80126c8:	601c      	str	r4, [r3, #0]
        max_used = LV_MAX(cur_used, max_used);
 80126ca:	4b06      	ldr	r3, [pc, #24]	; (80126e4 <lv_mem_alloc+0x34>)
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	42a2      	cmp	r2, r4
 80126d0:	bf2c      	ite	cs
 80126d2:	601a      	strcs	r2, [r3, #0]
 80126d4:	601c      	strcc	r4, [r3, #0]
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
}
 80126d6:	bd10      	pop	{r4, pc}
        return &zero_mem;
 80126d8:	4803      	ldr	r0, [pc, #12]	; (80126e8 <lv_mem_alloc+0x38>)
 80126da:	e7fc      	b.n	80126d6 <lv_mem_alloc+0x26>
 80126dc:	24009418 	.word	0x24009418
 80126e0:	24009414 	.word	0x24009414
 80126e4:	24009410 	.word	0x24009410
 80126e8:	240000ec 	.word	0x240000ec

080126ec <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
 80126ec:	b508      	push	{r3, lr}
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 80126ee:	4b08      	ldr	r3, [pc, #32]	; (8012710 <lv_mem_free+0x24>)
{
 80126f0:	4601      	mov	r1, r0
    if(data == &zero_mem) return;
 80126f2:	4298      	cmp	r0, r3
 80126f4:	d00b      	beq.n	801270e <lv_mem_free+0x22>
    if(data == NULL) return;
 80126f6:	b150      	cbz	r0, 801270e <lv_mem_free+0x22>

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 80126f8:	4b06      	ldr	r3, [pc, #24]	; (8012714 <lv_mem_free+0x28>)
 80126fa:	6818      	ldr	r0, [r3, #0]
 80126fc:	f012 fea9 	bl	8025452 <lv_tlsf_free>
    if(cur_used > size) cur_used -= size;
 8012700:	4a05      	ldr	r2, [pc, #20]	; (8012718 <lv_mem_free+0x2c>)
 8012702:	6813      	ldr	r3, [r2, #0]
 8012704:	4298      	cmp	r0, r3
 8012706:	bf34      	ite	cc
 8012708:	1a1b      	subcc	r3, r3, r0
    else cur_used = 0;
 801270a:	2300      	movcs	r3, #0
 801270c:	6013      	str	r3, [r2, #0]
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 801270e:	bd08      	pop	{r3, pc}
 8012710:	240000ec 	.word	0x240000ec
 8012714:	24009418 	.word	0x24009418
 8012718:	24009414 	.word	0x24009414

0801271c <lv_mem_realloc>:
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 801271c:	460a      	mov	r2, r1
{
 801271e:	b508      	push	{r3, lr}
    if(new_size == 0) {
 8012720:	b171      	cbz	r1, 8012740 <lv_mem_realloc+0x24>
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
        return &zero_mem;
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8012722:	4909      	ldr	r1, [pc, #36]	; (8012748 <lv_mem_realloc+0x2c>)
 8012724:	4288      	cmp	r0, r1
 8012726:	d104      	bne.n	8012732 <lv_mem_realloc+0x16>
 8012728:	4610      	mov	r0, r2
        return NULL;
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
}
 801272a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 801272e:	f7ff bfbf 	b.w	80126b0 <lv_mem_alloc>
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 8012732:	4b06      	ldr	r3, [pc, #24]	; (801274c <lv_mem_realloc+0x30>)
 8012734:	4601      	mov	r1, r0
 8012736:	6818      	ldr	r0, [r3, #0]
}
 8012738:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 801273c:	f012 beca 	b.w	80254d4 <lv_tlsf_realloc>
        lv_mem_free(data_p);
 8012740:	f7ff ffd4 	bl	80126ec <lv_mem_free>
}
 8012744:	4800      	ldr	r0, [pc, #0]	; (8012748 <lv_mem_realloc+0x2c>)
 8012746:	bd08      	pop	{r3, pc}
 8012748:	240000ec 	.word	0x240000ec
 801274c:	24009418 	.word	0x24009418

08012750 <lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
 8012750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
 8012752:	4605      	mov	r5, r0
 8012754:	b198      	cbz	r0, 801277e <lv_mem_buf_get+0x2e>
    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8012756:	4c22      	ldr	r4, [pc, #136]	; (80127e0 <lv_mem_buf_get+0x90>)
 8012758:	2300      	movs	r3, #0
    int8_t i_guess = -1;
 801275a:	f04f 32ff 	mov.w	r2, #4294967295
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 801275e:	1d27      	adds	r7, r4, #4
 8012760:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 8012764:	79b1      	ldrb	r1, [r6, #6]
 8012766:	07c8      	lsls	r0, r1, #31
 8012768:	d413      	bmi.n	8012792 <lv_mem_buf_get+0x42>
 801276a:	f837 0033 	ldrh.w	r0, [r7, r3, lsl #3]
 801276e:	42a8      	cmp	r0, r5
 8012770:	d30f      	bcc.n	8012792 <lv_mem_buf_get+0x42>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 8012772:	d105      	bne.n	8012780 <lv_mem_buf_get+0x30>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8012774:	f041 0101 	orr.w	r1, r1, #1
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 8012778:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 801277c:	71b1      	strb	r1, [r6, #6]
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
    return NULL;
}
 801277e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if(i_guess < 0) {
 8012780:	1c56      	adds	r6, r2, #1
 8012782:	d101      	bne.n	8012788 <lv_mem_buf_get+0x38>
                i_guess = i;
 8012784:	b25a      	sxtb	r2, r3
 8012786:	e004      	b.n	8012792 <lv_mem_buf_get+0x42>
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 8012788:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 801278c:	8889      	ldrh	r1, [r1, #4]
 801278e:	4281      	cmp	r1, r0
 8012790:	d8f8      	bhi.n	8012784 <lv_mem_buf_get+0x34>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8012792:	3301      	adds	r3, #1
 8012794:	2b10      	cmp	r3, #16
 8012796:	d1e3      	bne.n	8012760 <lv_mem_buf_get+0x10>
    if(i_guess >= 0) {
 8012798:	1c51      	adds	r1, r2, #1
 801279a:	d008      	beq.n	80127ae <lv_mem_buf_get+0x5e>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 801279c:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 80127a0:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 80127a4:	798b      	ldrb	r3, [r1, #6]
 80127a6:	f043 0301 	orr.w	r3, r3, #1
 80127aa:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 80127ac:	e7e7      	b.n	801277e <lv_mem_buf_get+0x2e>
 80127ae:	2600      	movs	r6, #0
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 80127b0:	eb04 07c6 	add.w	r7, r4, r6, lsl #3
 80127b4:	79bb      	ldrb	r3, [r7, #6]
 80127b6:	07db      	lsls	r3, r3, #31
 80127b8:	d40e      	bmi.n	80127d8 <lv_mem_buf_get+0x88>
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 80127ba:	4629      	mov	r1, r5
 80127bc:	f854 0036 	ldr.w	r0, [r4, r6, lsl #3]
 80127c0:	f7ff ffac 	bl	801271c <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 80127c4:	b900      	cbnz	r0, 80127c8 <lv_mem_buf_get+0x78>
 80127c6:	e7fe      	b.n	80127c6 <lv_mem_buf_get+0x76>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 80127c8:	79bb      	ldrb	r3, [r7, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 80127ca:	80bd      	strh	r5, [r7, #4]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 80127cc:	f043 0301 	orr.w	r3, r3, #1
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 80127d0:	f844 0036 	str.w	r0, [r4, r6, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 80127d4:	71bb      	strb	r3, [r7, #6]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 80127d6:	e7d2      	b.n	801277e <lv_mem_buf_get+0x2e>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80127d8:	3601      	adds	r6, #1
 80127da:	2e10      	cmp	r6, #16
 80127dc:	d1e8      	bne.n	80127b0 <lv_mem_buf_get+0x60>
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 80127de:	e7fe      	b.n	80127de <lv_mem_buf_get+0x8e>
 80127e0:	240012fc 	.word	0x240012fc

080127e4 <lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void lv_mem_buf_release(void * p)
{
 80127e4:	2300      	movs	r3, #0
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 80127e6:	4a08      	ldr	r2, [pc, #32]	; (8012808 <lv_mem_buf_release+0x24>)
{
 80127e8:	b510      	push	{r4, lr}
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 80127ea:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80127ee:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80127f2:	4284      	cmp	r4, r0
 80127f4:	d104      	bne.n	8012800 <lv_mem_buf_release+0x1c>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 80127f6:	798b      	ldrb	r3, [r1, #6]
 80127f8:	f36f 0300 	bfc	r3, #0, #1
 80127fc:	718b      	strb	r3, [r1, #6]
            return;
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 80127fe:	bd10      	pop	{r4, pc}
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8012800:	3301      	adds	r3, #1
 8012802:	2b10      	cmp	r3, #16
 8012804:	d1f1      	bne.n	80127ea <lv_mem_buf_release+0x6>
 8012806:	e7fa      	b.n	80127fe <lv_mem_buf_release+0x1a>
 8012808:	240012fc 	.word	0x240012fc

0801280c <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 801280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801280e:	4c0a      	ldr	r4, [pc, #40]	; (8012838 <lv_mem_buf_free_all+0x2c>)
 8012810:	2500      	movs	r5, #0
 8012812:	4627      	mov	r7, r4
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 8012814:	462e      	mov	r6, r5
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 8012816:	6820      	ldr	r0, [r4, #0]
 8012818:	b148      	cbz	r0, 801282e <lv_mem_buf_free_all+0x22>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 801281a:	f7ff ff67 	bl	80126ec <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 801281e:	6026      	str	r6, [r4, #0]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8012820:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8012824:	799a      	ldrb	r2, [r3, #6]
 8012826:	f366 0200 	bfi	r2, r6, #0, #1
 801282a:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 801282c:	80a6      	strh	r6, [r4, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801282e:	3501      	adds	r5, #1
 8012830:	3408      	adds	r4, #8
 8012832:	2d10      	cmp	r5, #16
 8012834:	d1ef      	bne.n	8012816 <lv_mem_buf_free_all+0xa>
        }
    }
}
 8012836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012838:	240012fc 	.word	0x240012fc

0801283c <lv_style_register_prop>:
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
#endif
}

lv_style_prop_t lv_style_register_prop(uint8_t flag)
{
 801283c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) == NULL) {
 8012840:	4f18      	ldr	r7, [pc, #96]	; (80128a4 <lv_style_register_prop+0x68>)
{
 8012842:	4606      	mov	r6, r0
 8012844:	4d18      	ldr	r5, [pc, #96]	; (80128a8 <lv_style_register_prop+0x6c>)
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) == NULL) {
 8012846:	6838      	ldr	r0, [r7, #0]
 8012848:	b918      	cbnz	r0, 8012852 <lv_style_register_prop+0x16>
        _lv_style_custom_prop_flag_lookup_table_size = 0;
 801284a:	4b18      	ldr	r3, [pc, #96]	; (80128ac <lv_style_register_prop+0x70>)
 801284c:	6018      	str	r0, [r3, #0]
        last_custom_prop_id = (uint16_t)_LV_STYLE_LAST_BUILT_IN_PROP;
 801284e:	236f      	movs	r3, #111	; 0x6f
 8012850:	802b      	strh	r3, [r5, #0]
    }

    if(((last_custom_prop_id + 1) & LV_STYLE_PROP_META_MASK) != 0) {
 8012852:	8829      	ldrh	r1, [r5, #0]
 8012854:	1c4b      	adds	r3, r1, #1
 8012856:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 801285a:	d002      	beq.n	8012862 <lv_style_register_prop+0x26>
        LV_LOG_ERROR("No more custom property IDs available");
        return LV_STYLE_PROP_INV;
 801285c:	2000      	movs	r0, #0
    last_custom_prop_id++;
    /* This should never happen - we should bail out above */
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
    LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[last_custom_prop_id - _LV_STYLE_NUM_BUILT_IN_PROPS] = flag;
    return last_custom_prop_id;
}
 801285e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_style_custom_prop_flag_lookup_table_size < required_size) {
 8012862:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80128ac <lv_style_register_prop+0x70>
    size_t required_size = (last_custom_prop_id + 1 - _LV_STYLE_LAST_BUILT_IN_PROP);
 8012866:	f1a1 036e 	sub.w	r3, r1, #110	; 0x6e
    if(_lv_style_custom_prop_flag_lookup_table_size < required_size) {
 801286a:	f8d8 2000 	ldr.w	r2, [r8]
 801286e:	429a      	cmp	r2, r3
 8012870:	d20c      	bcs.n	801288c <lv_style_register_prop+0x50>
        required_size = (required_size + 31) & ~31;
 8012872:	394f      	subs	r1, #79	; 0x4f
        LV_ASSERT_MSG(required_size > 0, "required size has become 0?");
 8012874:	f031 041f 	bics.w	r4, r1, #31
 8012878:	d100      	bne.n	801287c <lv_style_register_prop+0x40>
 801287a:	e7fe      	b.n	801287a <lv_style_register_prop+0x3e>
        uint8_t * new_p = lv_mem_realloc(old_p, required_size * sizeof(uint8_t));
 801287c:	4621      	mov	r1, r4
 801287e:	f7ff ff4d 	bl	801271c <lv_mem_realloc>
        if(new_p == NULL) {
 8012882:	2800      	cmp	r0, #0
 8012884:	d0ea      	beq.n	801285c <lv_style_register_prop+0x20>
        LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) = new_p;
 8012886:	6038      	str	r0, [r7, #0]
        _lv_style_custom_prop_flag_lookup_table_size = required_size;
 8012888:	f8c8 4000 	str.w	r4, [r8]
    last_custom_prop_id++;
 801288c:	882b      	ldrh	r3, [r5, #0]
 801288e:	3301      	adds	r3, #1
 8012890:	b298      	uxth	r0, r3
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 8012892:	683b      	ldr	r3, [r7, #0]
    last_custom_prop_id++;
 8012894:	8028      	strh	r0, [r5, #0]
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 8012896:	b903      	cbnz	r3, 801289a <lv_style_register_prop+0x5e>
 8012898:	e7fe      	b.n	8012898 <lv_style_register_prop+0x5c>
    LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[last_custom_prop_id - _LV_STYLE_NUM_BUILT_IN_PROPS] = flag;
 801289a:	4403      	add	r3, r0
 801289c:	f803 6c70 	strb.w	r6, [r3, #-112]
    return last_custom_prop_id;
 80128a0:	e7dd      	b.n	801285e <lv_style_register_prop+0x22>
 80128a2:	bf00      	nop
 80128a4:	24001200 	.word	0x24001200
 80128a8:	24000152 	.word	0x24000152
 80128ac:	2400941c 	.word	0x2400941c

080128b0 <lv_style_transition_dsc_init>:
    return lv_style_get_prop_inlined(style, prop, value);
}

void lv_style_transition_dsc_init(lv_style_transition_dsc_t * tr, const lv_style_prop_t props[],
                                  lv_anim_path_cb_t path_cb, uint32_t time, uint32_t delay, void * user_data)
{
 80128b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128b2:	460f      	mov	r7, r1
 80128b4:	4615      	mov	r5, r2
    memset(dst, 0x00, len);
 80128b6:	2100      	movs	r1, #0
 80128b8:	2214      	movs	r2, #20
 80128ba:	4604      	mov	r4, r0
 80128bc:	461e      	mov	r6, r3
 80128be:	f007 ff2f 	bl	801a720 <memset>
    lv_memset_00(tr, sizeof(lv_style_transition_dsc_t));
    tr->props = props;
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 80128c2:	4b06      	ldr	r3, [pc, #24]	; (80128dc <lv_style_transition_dsc_init+0x2c>)
    tr->props = props;
 80128c4:	6027      	str	r7, [r4, #0]
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 80128c6:	2d00      	cmp	r5, #0
 80128c8:	bf08      	it	eq
 80128ca:	461d      	moveq	r5, r3
    tr->time = time;
    tr->delay = delay;
 80128cc:	9b06      	ldr	r3, [sp, #24]
 80128ce:	6123      	str	r3, [r4, #16]
#if LV_USE_USER_DATA
    tr->user_data = user_data;
 80128d0:	9b07      	ldr	r3, [sp, #28]
    tr->time = time;
 80128d2:	e9c4 5602 	strd	r5, r6, [r4, #8]
    tr->user_data = user_data;
 80128d6:	6063      	str	r3, [r4, #4]
#else
    LV_UNUSED(user_data);
#endif
}
 80128d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128da:	bf00      	nop
 80128dc:	08024107 	.word	0x08024107

080128e0 <lv_style_prop_get_default>:

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
    lv_style_value_t value;
    switch(prop) {
 80128e0:	2836      	cmp	r0, #54	; 0x36
 80128e2:	d819      	bhi.n	8012918 <lv_style_prop_get_default+0x38>
 80128e4:	2821      	cmp	r0, #33	; 0x21
 80128e6:	d807      	bhi.n	80128f8 <lv_style_prop_get_default+0x18>
 80128e8:	2806      	cmp	r0, #6
 80128ea:	d03a      	beq.n	8012962 <lv_style_prop_get_default+0x82>
 80128ec:	2820      	cmp	r0, #32
 80128ee:	d02c      	beq.n	801294a <lv_style_prop_get_default+0x6a>
 80128f0:	2803      	cmp	r0, #3
 80128f2:	d036      	beq.n	8012962 <lv_style_prop_get_default+0x82>
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
            break;
        default:
            value.ptr = NULL;
 80128f4:	2000      	movs	r0, #0
            value.num = 0;
            break;
    }

    return value;
}
 80128f6:	4770      	bx	lr
    switch(prop) {
 80128f8:	f1a0 0222 	sub.w	r2, r0, #34	; 0x22
 80128fc:	2301      	movs	r3, #1
 80128fe:	b292      	uxth	r2, r2
 8012900:	4093      	lsls	r3, r2
 8012902:	4a19      	ldr	r2, [pc, #100]	; (8012968 <lv_style_prop_get_default+0x88>)
 8012904:	4213      	tst	r3, r2
 8012906:	d126      	bne.n	8012956 <lv_style_prop_get_default+0x76>
 8012908:	f248 0288 	movw	r2, #32904	; 0x8088
 801290c:	4213      	tst	r3, r2
 801290e:	d113      	bne.n	8012938 <lv_style_prop_get_default+0x58>
 8012910:	2833      	cmp	r0, #51	; 0x33
 8012912:	d1ef      	bne.n	80128f4 <lv_style_prop_get_default+0x14>
            value.num = LV_BORDER_SIDE_FULL;
 8012914:	200f      	movs	r0, #15
            break;
 8012916:	4770      	bx	lr
    switch(prop) {
 8012918:	2857      	cmp	r0, #87	; 0x57
 801291a:	d020      	beq.n	801295e <lv_style_prop_get_default+0x7e>
 801291c:	d80e      	bhi.n	801293c <lv_style_prop_get_default+0x5c>
 801291e:	2856      	cmp	r0, #86	; 0x56
 8012920:	d00a      	beq.n	8012938 <lv_style_prop_get_default+0x58>
 8012922:	3837      	subs	r0, #55	; 0x37
 8012924:	2301      	movs	r3, #1
 8012926:	4a11      	ldr	r2, [pc, #68]	; (801296c <lv_style_prop_get_default+0x8c>)
 8012928:	b280      	uxth	r0, r0
 801292a:	4083      	lsls	r3, r0
 801292c:	401a      	ands	r2, r3
 801292e:	b992      	cbnz	r2, 8012956 <lv_style_prop_get_default+0x76>
 8012930:	4a0f      	ldr	r2, [pc, #60]	; (8012970 <lv_style_prop_get_default+0x90>)
 8012932:	401a      	ands	r2, r3
 8012934:	2a00      	cmp	r2, #0
 8012936:	d0dd      	beq.n	80128f4 <lv_style_prop_get_default+0x14>
            value.num = LV_OPA_COVER;
 8012938:	20ff      	movs	r0, #255	; 0xff
            break;
 801293a:	4770      	bx	lr
    switch(prop) {
 801293c:	2860      	cmp	r0, #96	; 0x60
 801293e:	d0fb      	beq.n	8012938 <lv_style_prop_get_default+0x58>
 8012940:	286c      	cmp	r0, #108	; 0x6c
 8012942:	d1d7      	bne.n	80128f4 <lv_style_prop_get_default+0x14>
            value.num = LV_IMG_ZOOM_NONE;
 8012944:	f44f 7080 	mov.w	r0, #256	; 0x100
            break;
 8012948:	4770      	bx	lr
    return lv_color_make(0xff, 0xff, 0xff);
 801294a:	f04f 33ff 	mov.w	r3, #4294967295
 801294e:	2000      	movs	r0, #0
 8012950:	f363 000f 	bfi	r0, r3, #0, #16
 8012954:	4770      	bx	lr
    return lv_color_make(0x00, 0x0, 0x00);
 8012956:	2000      	movs	r0, #0
 8012958:	f36f 000f 	bfc	r0, #0, #16
 801295c:	4770      	bx	lr
            value.ptr = LV_FONT_DEFAULT;
 801295e:	4805      	ldr	r0, [pc, #20]	; (8012974 <lv_style_prop_get_default+0x94>)
            break;
 8012960:	4770      	bx	lr
            value.num = LV_COORD_MAX;
 8012962:	f641 70ff 	movw	r0, #8191	; 0x1fff
            break;
 8012966:	4770      	bx	lr
 8012968:	00104001 	.word	0x00104001
 801296c:	48412000 	.word	0x48412000
 8012970:	1080c001 	.word	0x1080c001
 8012974:	080293a0 	.word	0x080293a0

08012978 <lv_style_set_prop>:
    lv_style_set_prop_internal(style, prop, value, lv_style_set_prop_helper);
 8012978:	4b01      	ldr	r3, [pc, #4]	; (8012980 <lv_style_set_prop+0x8>)
 801297a:	f012 ba39 	b.w	8024df0 <lv_style_set_prop_internal>
 801297e:	bf00      	nop
 8012980:	08024c4f 	.word	0x08024c4f

08012984 <_lv_style_prop_lookup_flags>:

uint8_t _lv_style_prop_lookup_flags(lv_style_prop_t prop)
{
    extern const uint8_t _lv_style_builtin_prop_flag_lookup_table[];
    extern uint32_t _lv_style_custom_prop_flag_lookup_table_size;
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 8012984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012988:	4298      	cmp	r0, r3
 801298a:	d011      	beq.n	80129b0 <_lv_style_prop_lookup_flags+0x2c>
    if(prop == LV_STYLE_PROP_INV) return 0;
 801298c:	b198      	cbz	r0, 80129b6 <_lv_style_prop_lookup_flags+0x32>

    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 801298e:	286f      	cmp	r0, #111	; 0x6f
 8012990:	d802      	bhi.n	8012998 <_lv_style_prop_lookup_flags+0x14>
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 8012992:	4b09      	ldr	r3, [pc, #36]	; (80129b8 <_lv_style_prop_lookup_flags+0x34>)
 8012994:	5c18      	ldrb	r0, [r3, r0]
 8012996:	4770      	bx	lr
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8012998:	4b08      	ldr	r3, [pc, #32]	; (80129bc <_lv_style_prop_lookup_flags+0x38>)
 801299a:	681a      	ldr	r2, [r3, #0]
 801299c:	b152      	cbz	r2, 80129b4 <_lv_style_prop_lookup_flags+0x30>
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 801299e:	f1a0 0370 	sub.w	r3, r0, #112	; 0x70
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 80129a2:	4907      	ldr	r1, [pc, #28]	; (80129c0 <_lv_style_prop_lookup_flags+0x3c>)
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	6809      	ldr	r1, [r1, #0]
 80129a8:	428b      	cmp	r3, r1
 80129aa:	d203      	bcs.n	80129b4 <_lv_style_prop_lookup_flags+0x30>
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 80129ac:	5cd0      	ldrb	r0, [r2, r3]
 80129ae:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 80129b0:	201f      	movs	r0, #31
 80129b2:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_INV) return 0;
 80129b4:	2000      	movs	r0, #0
    return 0;
}
 80129b6:	4770      	bx	lr
 80129b8:	0802de4a 	.word	0x0802de4a
 80129bc:	24001200 	.word	0x24001200
 80129c0:	2400941c 	.word	0x2400941c

080129c4 <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 80129c4:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 80129c6:	2118      	movs	r1, #24
 80129c8:	4803      	ldr	r0, [pc, #12]	; (80129d8 <_lv_timer_core_init+0x14>)
 80129ca:	f012 f805 	bl	80249d8 <_lv_ll_init>
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
    lv_timer_run = en;
 80129ce:	4b03      	ldr	r3, [pc, #12]	; (80129dc <_lv_timer_core_init+0x18>)
 80129d0:	2201      	movs	r2, #1
 80129d2:	701a      	strb	r2, [r3, #0]
}
 80129d4:	bd08      	pop	{r3, pc}
 80129d6:	bf00      	nop
 80129d8:	24001404 	.word	0x24001404
 80129dc:	24010e3d 	.word	0x24010e3d

080129e0 <lv_timer_create>:
{
 80129e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129e2:	4606      	mov	r6, r0
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 80129e4:	480c      	ldr	r0, [pc, #48]	; (8012a18 <lv_timer_create+0x38>)
{
 80129e6:	460f      	mov	r7, r1
 80129e8:	4615      	mov	r5, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 80129ea:	f011 fffd 	bl	80249e8 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_timer);
 80129ee:	4604      	mov	r4, r0
 80129f0:	b900      	cbnz	r0, 80129f4 <lv_timer_create+0x14>
 80129f2:	e7fe      	b.n	80129f2 <lv_timer_create+0x12>
    new_timer->repeat_count = -1;
 80129f4:	f04f 33ff 	mov.w	r3, #4294967295
    new_timer->period = period;
 80129f8:	6007      	str	r7, [r0, #0]
    new_timer->timer_cb = timer_xcb;
 80129fa:	6086      	str	r6, [r0, #8]
    new_timer->repeat_count = -1;
 80129fc:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 80129fe:	7d03      	ldrb	r3, [r0, #20]
 8012a00:	f36f 0300 	bfc	r3, #0, #1
 8012a04:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 8012a06:	f011 fb6c 	bl	80240e2 <lv_tick_get>
    timer_created = true;
 8012a0a:	4b04      	ldr	r3, [pc, #16]	; (8012a1c <lv_timer_create+0x3c>)
 8012a0c:	2201      	movs	r2, #1
    new_timer->last_run = lv_tick_get();
 8012a0e:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
 8012a10:	60e5      	str	r5, [r4, #12]
}
 8012a12:	4620      	mov	r0, r4
    timer_created = true;
 8012a14:	701a      	strb	r2, [r3, #0]
}
 8012a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a18:	24001404 	.word	0x24001404
 8012a1c:	24010e3a 	.word	0x24010e3a

08012a20 <lv_timer_del>:
{
 8012a20:	b510      	push	{r4, lr}
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8012a22:	4601      	mov	r1, r0
{
 8012a24:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8012a26:	4805      	ldr	r0, [pc, #20]	; (8012a3c <lv_timer_del+0x1c>)
 8012a28:	f012 f815 	bl	8024a56 <_lv_ll_remove>
    timer_deleted = true;
 8012a2c:	4b04      	ldr	r3, [pc, #16]	; (8012a40 <lv_timer_del+0x20>)
 8012a2e:	2201      	movs	r2, #1
    lv_mem_free(timer);
 8012a30:	4620      	mov	r0, r4
    timer_deleted = true;
 8012a32:	701a      	strb	r2, [r3, #0]
}
 8012a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_mem_free(timer);
 8012a38:	f7ff be58 	b.w	80126ec <lv_mem_free>
 8012a3c:	24001404 	.word	0x24001404
 8012a40:	24010e3b 	.word	0x24010e3b

08012a44 <lv_timer_handler>:
{
 8012a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) {
 8012a48:	4e5c      	ldr	r6, [pc, #368]	; (8012bbc <lv_timer_handler+0x178>)
 8012a4a:	7833      	ldrb	r3, [r6, #0]
 8012a4c:	b92b      	cbnz	r3, 8012a5a <lv_timer_handler+0x16>
    already_running = true;
 8012a4e:	2301      	movs	r3, #1
 8012a50:	7033      	strb	r3, [r6, #0]
    if(lv_timer_run == false) {
 8012a52:	4b5b      	ldr	r3, [pc, #364]	; (8012bc0 <lv_timer_handler+0x17c>)
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	b92b      	cbnz	r3, 8012a64 <lv_timer_handler+0x20>
        already_running = false; /*Release mutex*/
 8012a58:	7033      	strb	r3, [r6, #0]
        return 1;
 8012a5a:	2501      	movs	r5, #1
}
 8012a5c:	4628      	mov	r0, r5
 8012a5e:	b003      	add	sp, #12
 8012a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t handler_start = lv_tick_get();
 8012a64:	f011 fb3d 	bl	80240e2 <lv_tick_get>
    if(handler_start == 0) {
 8012a68:	4607      	mov	r7, r0
 8012a6a:	b938      	cbnz	r0, 8012a7c <lv_timer_handler+0x38>
        run_cnt++;
 8012a6c:	4a55      	ldr	r2, [pc, #340]	; (8012bc4 <lv_timer_handler+0x180>)
 8012a6e:	6813      	ldr	r3, [r2, #0]
 8012a70:	3301      	adds	r3, #1
 8012a72:	2b64      	cmp	r3, #100	; 0x64
 8012a74:	bf94      	ite	ls
 8012a76:	4619      	movls	r1, r3
 8012a78:	4601      	movhi	r1, r0
 8012a7a:	6011      	str	r1, [r2, #0]
        timer_deleted             = false;
 8012a7c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8012bc8 <lv_timer_handler+0x184>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012a80:	f8df a148 	ldr.w	sl, [pc, #328]	; 8012bcc <lv_timer_handler+0x188>
        timer_deleted             = false;
 8012a84:	2300      	movs	r3, #0
        timer_created             = false;
 8012a86:	f8df b148 	ldr.w	fp, [pc, #328]	; 8012bd0 <lv_timer_handler+0x18c>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012a8a:	4650      	mov	r0, sl
 8012a8c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8012bd4 <lv_timer_handler+0x190>
        timer_deleted             = false;
 8012a90:	f888 3000 	strb.w	r3, [r8]
        timer_created             = false;
 8012a94:	f88b 3000 	strb.w	r3, [fp]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012a98:	f012 f818 	bl	8024acc <_lv_ll_get_head>
 8012a9c:	4605      	mov	r5, r0
 8012a9e:	f8c9 5000 	str.w	r5, [r9]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8012aa2:	bb85      	cbnz	r5, 8012b06 <lv_timer_handler+0xc2>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012aa4:	4849      	ldr	r0, [pc, #292]	; (8012bcc <lv_timer_handler+0x188>)
    uint32_t time_till_next = LV_NO_TIMER_READY;
 8012aa6:	f04f 35ff 	mov.w	r5, #4294967295
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012aaa:	f012 f80f 	bl	8024acc <_lv_ll_get_head>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8012aae:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8012bcc <lv_timer_handler+0x188>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012ab2:	4604      	mov	r4, r0
    while(next) {
 8012ab4:	2c00      	cmp	r4, #0
 8012ab6:	d16c      	bne.n	8012b92 <lv_timer_handler+0x14e>
    busy_time += lv_tick_elaps(handler_start);
 8012ab8:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8012bd8 <lv_timer_handler+0x194>
 8012abc:	4638      	mov	r0, r7
 8012abe:	f011 fb18 	bl	80240f2 <lv_tick_elaps>
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8012ac2:	4f46      	ldr	r7, [pc, #280]	; (8012bdc <lv_timer_handler+0x198>)
    busy_time += lv_tick_elaps(handler_start);
 8012ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8012ac8:	4403      	add	r3, r0
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8012aca:	6838      	ldr	r0, [r7, #0]
    busy_time += lv_tick_elaps(handler_start);
 8012acc:	f8c8 3000 	str.w	r3, [r8]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8012ad0:	f011 fb0f 	bl	80240f2 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8012ad4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8012ad8:	d312      	bcc.n	8012b00 <lv_timer_handler+0xbc>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 8012ada:	2264      	movs	r2, #100	; 0x64
 8012adc:	f8d8 3000 	ldr.w	r3, [r8]
 8012ae0:	4353      	muls	r3, r2
 8012ae2:	fbb3 f0f0 	udiv	r0, r3, r0
 8012ae6:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8012ae8:	4b3d      	ldr	r3, [pc, #244]	; (8012be0 <lv_timer_handler+0x19c>)
 8012aea:	4290      	cmp	r0, r2
 8012aec:	bf9c      	itt	ls
 8012aee:	1a10      	subls	r0, r2, r0
 8012af0:	b2c4      	uxtbls	r4, r0
 8012af2:	701c      	strb	r4, [r3, #0]
        busy_time         = 0;
 8012af4:	2300      	movs	r3, #0
 8012af6:	f8c8 3000 	str.w	r3, [r8]
        idle_period_start = lv_tick_get();
 8012afa:	f011 faf2 	bl	80240e2 <lv_tick_get>
 8012afe:	6038      	str	r0, [r7, #0]
    already_running = false; /*Release the mutex*/
 8012b00:	2300      	movs	r3, #0
 8012b02:	7033      	strb	r3, [r6, #0]
    return time_till_next;
 8012b04:	e7aa      	b.n	8012a5c <lv_timer_handler+0x18>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8012b06:	4629      	mov	r1, r5
 8012b08:	4650      	mov	r0, sl
 8012b0a:	f011 ffe5 	bl	8024ad8 <_lv_ll_get_next>
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 8012b0e:	f8d9 4000 	ldr.w	r4, [r9]
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8012b12:	4605      	mov	r5, r0
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
    if(timer->paused) return false;
 8012b14:	7d23      	ldrb	r3, [r4, #20]
 8012b16:	07db      	lsls	r3, r3, #31
 8012b18:	d4c1      	bmi.n	8012a9e <lv_timer_handler+0x5a>
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8012b1a:	6860      	ldr	r0, [r4, #4]
 8012b1c:	f011 fae9 	bl	80240f2 <lv_tick_elaps>
    if(lv_timer_time_remaining(timer) == 0) {
 8012b20:	6823      	ldr	r3, [r4, #0]
 8012b22:	4298      	cmp	r0, r3
 8012b24:	d32a      	bcc.n	8012b7c <lv_timer_handler+0x138>
        int32_t original_repeat_count = timer->repeat_count;
 8012b26:	6923      	ldr	r3, [r4, #16]
        if(timer->repeat_count > 0) timer->repeat_count--;
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	dd1a      	ble.n	8012b62 <lv_timer_handler+0x11e>
 8012b2c:	3b01      	subs	r3, #1
 8012b2e:	6123      	str	r3, [r4, #16]
        timer->last_run = lv_tick_get();
 8012b30:	f011 fad7 	bl	80240e2 <lv_tick_get>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8012b34:	68a2      	ldr	r2, [r4, #8]
        timer->last_run = lv_tick_get();
 8012b36:	6060      	str	r0, [r4, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8012b38:	b9ea      	cbnz	r2, 8012b76 <lv_timer_handler+0x132>
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8012b3a:	f898 3000 	ldrb.w	r3, [r8]
 8012b3e:	b923      	cbnz	r3, 8012b4a <lv_timer_handler+0x106>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8012b40:	6923      	ldr	r3, [r4, #16]
 8012b42:	b913      	cbnz	r3, 8012b4a <lv_timer_handler+0x106>
            lv_timer_del(timer);
 8012b44:	4620      	mov	r0, r4
 8012b46:	f7ff ff6b 	bl	8012a20 <lv_timer_del>
                if(timer_created || timer_deleted) {
 8012b4a:	f89b 3000 	ldrb.w	r3, [fp]
 8012b4e:	b91b      	cbnz	r3, 8012b58 <lv_timer_handler+0x114>
 8012b50:	f898 3000 	ldrb.w	r3, [r8]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d0a2      	beq.n	8012a9e <lv_timer_handler+0x5a>
    } while(LV_GC_ROOT(_lv_timer_act));
 8012b58:	f8d9 3000 	ldr.w	r3, [r9]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d191      	bne.n	8012a84 <lv_timer_handler+0x40>
 8012b60:	e7a0      	b.n	8012aa4 <lv_timer_handler+0x60>
 8012b62:	9301      	str	r3, [sp, #4]
        timer->last_run = lv_tick_get();
 8012b64:	f011 fabd 	bl	80240e2 <lv_tick_get>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8012b68:	68a2      	ldr	r2, [r4, #8]
        timer->last_run = lv_tick_get();
 8012b6a:	6060      	str	r0, [r4, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8012b6c:	2a00      	cmp	r2, #0
 8012b6e:	d0e4      	beq.n	8012b3a <lv_timer_handler+0xf6>
 8012b70:	9b01      	ldr	r3, [sp, #4]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d0e1      	beq.n	8012b3a <lv_timer_handler+0xf6>
 8012b76:	4620      	mov	r0, r4
 8012b78:	4790      	blx	r2
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8012b7a:	e7de      	b.n	8012b3a <lv_timer_handler+0xf6>
 8012b7c:	f898 3000 	ldrb.w	r3, [r8]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d18c      	bne.n	8012a9e <lv_timer_handler+0x5a>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8012b84:	6923      	ldr	r3, [r4, #16]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d189      	bne.n	8012a9e <lv_timer_handler+0x5a>
            lv_timer_del(timer);
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	f7ff ff48 	bl	8012a20 <lv_timer_del>
 8012b90:	e785      	b.n	8012a9e <lv_timer_handler+0x5a>
        if(!next->paused) {
 8012b92:	7d23      	ldrb	r3, [r4, #20]
 8012b94:	f013 0801 	ands.w	r8, r3, #1
 8012b98:	d10a      	bne.n	8012bb0 <lv_timer_handler+0x16c>
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8012b9a:	6860      	ldr	r0, [r4, #4]
 8012b9c:	f011 faa9 	bl	80240f2 <lv_tick_elaps>
    if(elp >= timer->period)
 8012ba0:	6823      	ldr	r3, [r4, #0]
 8012ba2:	4298      	cmp	r0, r3
        return 0;
 8012ba4:	bf2c      	ite	cs
 8012ba6:	4643      	movcs	r3, r8
    return timer->period - elp;
 8012ba8:	1a1b      	subcc	r3, r3, r0
            if(delay < time_till_next)
 8012baa:	429d      	cmp	r5, r3
 8012bac:	bf28      	it	cs
 8012bae:	461d      	movcs	r5, r3
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8012bb0:	4621      	mov	r1, r4
 8012bb2:	4648      	mov	r0, r9
 8012bb4:	f011 ff90 	bl	8024ad8 <_lv_ll_get_next>
 8012bb8:	4604      	mov	r4, r0
 8012bba:	e77b      	b.n	8012ab4 <lv_timer_handler+0x70>
 8012bbc:	24010e39 	.word	0x24010e39
 8012bc0:	24010e3d 	.word	0x24010e3d
 8012bc4:	24009428 	.word	0x24009428
 8012bc8:	24010e3b 	.word	0x24010e3b
 8012bcc:	24001404 	.word	0x24001404
 8012bd0:	24010e3a 	.word	0x24010e3a
 8012bd4:	2400137c 	.word	0x2400137c
 8012bd8:	24009424 	.word	0x24009424
 8012bdc:	24009420 	.word	0x24009420
 8012be0:	24010e3c 	.word	0x24010e3c

08012be4 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 8012be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 8012be6:	680b      	ldr	r3, [r1, #0]
{
 8012be8:	4606      	mov	r6, r0
 8012bea:	460c      	mov	r4, r1
    (*i)--;
 8012bec:	2504      	movs	r5, #4
 8012bee:	3b01      	subs	r3, #1
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
 8012bf0:	4f0c      	ldr	r7, [pc, #48]	; (8012c24 <lv_txt_utf8_prev+0x40>)
    (*i)--;
 8012bf2:	600b      	str	r3, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
 8012bf4:	6820      	ldr	r0, [r4, #0]
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	4430      	add	r0, r6
 8012bfa:	4798      	blx	r3
        if(c_size == 0) {
 8012bfc:	6823      	ldr	r3, [r4, #0]
 8012bfe:	b138      	cbz	r0, 8012c10 <lv_txt_utf8_prev+0x2c>
                return 0;
        }
        cnt++;
    } while(c_size == 0);

    uint32_t i_tmp  = *i;
 8012c00:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8012c02:	a901      	add	r1, sp, #4
 8012c04:	4b08      	ldr	r3, [pc, #32]	; (8012c28 <lv_txt_utf8_prev+0x44>)
 8012c06:	4630      	mov	r0, r6
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	4798      	blx	r3

    return letter;
}
 8012c0c:	b003      	add	sp, #12
 8012c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(*i != 0)
 8012c10:	b12b      	cbz	r3, 8012c1e <lv_txt_utf8_prev+0x3a>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8012c12:	3d01      	subs	r5, #1
                (*i)--;
 8012c14:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8012c16:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
                (*i)--;
 8012c1a:	6023      	str	r3, [r4, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8012c1c:	d1ea      	bne.n	8012bf4 <lv_txt_utf8_prev+0x10>
 8012c1e:	2000      	movs	r0, #0
 8012c20:	e7f4      	b.n	8012c0c <lv_txt_utf8_prev+0x28>
 8012c22:	bf00      	nop
 8012c24:	24000108 	.word	0x24000108
 8012c28:	24000100 	.word	0x24000100

08012c2c <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8012c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 8012c30:	2400      	movs	r4, #0
{
 8012c32:	4605      	mov	r5, r0
 8012c34:	460f      	mov	r7, r1
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8012c36:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8012c60 <lv_txt_utf8_get_byte_id+0x34>
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8012c3a:	4626      	mov	r6, r4
 8012c3c:	42be      	cmp	r6, r7
 8012c3e:	d002      	beq.n	8012c46 <lv_txt_utf8_get_byte_id+0x1a>
 8012c40:	5d2b      	ldrb	r3, [r5, r4]
 8012c42:	1928      	adds	r0, r5, r4
 8012c44:	b913      	cbnz	r3, 8012c4c <lv_txt_utf8_get_byte_id+0x20>
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
    }

    return byte_cnt;
}
 8012c46:	4620      	mov	r0, r4
 8012c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8012c4c:	f8d8 3000 	ldr.w	r3, [r8]
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8012c50:	3601      	adds	r6, #1
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8012c52:	4798      	blx	r3
        byte_cnt += c_size ? c_size : 1;
 8012c54:	2801      	cmp	r0, #1
 8012c56:	bf38      	it	cc
 8012c58:	2001      	movcc	r0, #1
 8012c5a:	fa54 f480 	uxtab	r4, r4, r0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8012c5e:	e7ed      	b.n	8012c3c <lv_txt_utf8_get_byte_id+0x10>
 8012c60:	24000108 	.word	0x24000108

08012c64 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8012c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i        = 0;
 8012c66:	2400      	movs	r4, #0
{
 8012c68:	4606      	mov	r6, r0
 8012c6a:	460d      	mov	r5, r1
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8012c6c:	4f06      	ldr	r7, [pc, #24]	; (8012c88 <lv_txt_utf8_get_char_id+0x24>)
    uint32_t i        = 0;
 8012c6e:	9401      	str	r4, [sp, #4]
    while(i < byte_id) {
 8012c70:	9b01      	ldr	r3, [sp, #4]
 8012c72:	42ab      	cmp	r3, r5
 8012c74:	d302      	bcc.n	8012c7c <lv_txt_utf8_get_char_id+0x18>
        char_cnt++;
    }

    return char_cnt;
}
 8012c76:	4620      	mov	r0, r4
 8012c78:	b003      	add	sp, #12
 8012c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	a901      	add	r1, sp, #4
 8012c80:	4630      	mov	r0, r6
        char_cnt++;
 8012c82:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8012c84:	4798      	blx	r3
        char_cnt++;
 8012c86:	e7f3      	b.n	8012c70 <lv_txt_utf8_get_char_id+0xc>
 8012c88:	24000100 	.word	0x24000100

08012c8c <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8012c8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 8012c8e:	2400      	movs	r4, #0
{
 8012c90:	4605      	mov	r5, r0

    while(txt[i] != '\0') {
        _lv_txt_encoded_next(txt, &i);
 8012c92:	4e07      	ldr	r6, [pc, #28]	; (8012cb0 <lv_txt_utf8_get_length+0x24>)
    uint32_t i   = 0;
 8012c94:	9401      	str	r4, [sp, #4]
    while(txt[i] != '\0') {
 8012c96:	9b01      	ldr	r3, [sp, #4]
 8012c98:	5ceb      	ldrb	r3, [r5, r3]
 8012c9a:	b913      	cbnz	r3, 8012ca2 <lv_txt_utf8_get_length+0x16>
        len++;
    }

    return len;
}
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	b002      	add	sp, #8
 8012ca0:	bd70      	pop	{r4, r5, r6, pc}
        _lv_txt_encoded_next(txt, &i);
 8012ca2:	6833      	ldr	r3, [r6, #0]
 8012ca4:	a901      	add	r1, sp, #4
 8012ca6:	4628      	mov	r0, r5
        len++;
 8012ca8:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i);
 8012caa:	4798      	blx	r3
        len++;
 8012cac:	e7f3      	b.n	8012c96 <lv_txt_utf8_get_length+0xa>
 8012cae:	bf00      	nop
 8012cb0:	24000100 	.word	0x24000100

08012cb4 <_lv_txt_get_next_line>:
{
 8012cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cb8:	b091      	sub	sp, #68	; 0x44
 8012cba:	4699      	mov	r9, r3
 8012cbc:	4680      	mov	r8, r0
 8012cbe:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8012cc2:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 8012cc6:	9101      	str	r1, [sp, #4]
 8012cc8:	9206      	str	r2, [sp, #24]
 8012cca:	9305      	str	r3, [sp, #20]
    if(used_width) *used_width = 0;
 8012ccc:	f1bb 0f00 	cmp.w	fp, #0
 8012cd0:	d002      	beq.n	8012cd8 <_lv_txt_get_next_line+0x24>
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	f8ab 3000 	strh.w	r3, [fp]
    if(txt == NULL) return 0;
 8012cd8:	f1b8 0f00 	cmp.w	r8, #0
 8012cdc:	f000 80f3 	beq.w	8012ec6 <_lv_txt_get_next_line+0x212>
    if(txt[0] == '\0') return 0;
 8012ce0:	f898 0000 	ldrb.w	r0, [r8]
 8012ce4:	b1d8      	cbz	r0, 8012d1e <_lv_txt_get_next_line+0x6a>
    if(font == NULL) return 0;
 8012ce6:	9b01      	ldr	r3, [sp, #4]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f000 80ee 	beq.w	8012eca <_lv_txt_get_next_line+0x216>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 8012cee:	9b05      	ldr	r3, [sp, #20]
 8012cf0:	f013 0306 	ands.w	r3, r3, #6
 8012cf4:	d016      	beq.n	8012d24 <_lv_txt_get_next_line+0x70>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8012cf6:	2000      	movs	r0, #0
 8012cf8:	e000      	b.n	8012cfc <_lv_txt_get_next_line+0x48>
 8012cfa:	3001      	adds	r0, #1
 8012cfc:	f818 3000 	ldrb.w	r3, [r8, r0]
 8012d00:	2b0a      	cmp	r3, #10
 8012d02:	f000 80e4 	beq.w	8012ece <_lv_txt_get_next_line+0x21a>
 8012d06:	2b0d      	cmp	r3, #13
 8012d08:	f000 80e1 	beq.w	8012ece <_lv_txt_get_next_line+0x21a>
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d1f4      	bne.n	8012cfa <_lv_txt_get_next_line+0x46>
        if(used_width) *used_width = -1;
 8012d10:	f1bb 0f00 	cmp.w	fp, #0
 8012d14:	d003      	beq.n	8012d1e <_lv_txt_get_next_line+0x6a>
 8012d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d1a:	f8ab 3000 	strh.w	r3, [fp]
}
 8012d1e:	b011      	add	sp, #68	; 0x44
 8012d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8012d24:	9a05      	ldr	r2, [sp, #20]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8012d26:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8012d2a:	f012 0202 	ands.w	r2, r2, #2
    uint32_t i = 0;                                        /*Iterating index into txt*/
 8012d2e:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t line_w = 0;
 8012d30:	9300      	str	r3, [sp, #0]
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8012d32:	9207      	str	r2, [sp, #28]
 8012d34:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8012d38:	bf18      	it	ne
 8012d3a:	4691      	movne	r9, r2
    while(txt[i] != '\0' && max_width > 0) {
 8012d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d3e:	9302      	str	r3, [sp, #8]
 8012d40:	4443      	add	r3, r8
 8012d42:	9303      	str	r3, [sp, #12]
 8012d44:	9b02      	ldr	r3, [sp, #8]
 8012d46:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012d4a:	b33b      	cbz	r3, 8012d9c <_lv_txt_get_next_line+0xe8>
 8012d4c:	f1b9 0f00 	cmp.w	r9, #0
 8012d50:	dd24      	ble.n	8012d9c <_lv_txt_get_next_line+0xe8>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8012d52:	9a07      	ldr	r2, [sp, #28]
 8012d54:	f641 73ff 	movw	r3, #8191	; 0x1fff
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8012d58:	2500      	movs	r5, #0
    letter = _lv_txt_encoded_next(txt, &i_next);
 8012d5a:	a90e      	add	r1, sp, #56	; 0x38
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8012d5c:	2a00      	cmp	r2, #0
 8012d5e:	bf08      	it	eq
 8012d60:	464b      	moveq	r3, r9
    letter = _lv_txt_encoded_next(txt, &i_next);
 8012d62:	9803      	ldr	r0, [sp, #12]
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 8012d64:	f04f 34ff 	mov.w	r4, #4294967295
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 8012d68:	462f      	mov	r7, r5
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8012d6a:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8012d6c:	462e      	mov	r6, r5
    letter = _lv_txt_encoded_next(txt, &i_next);
 8012d6e:	4b59      	ldr	r3, [pc, #356]	; (8012ed4 <_lv_txt_get_next_line+0x220>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8012d70:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
    letter = _lv_txt_encoded_next(txt, &i_next);
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	4798      	blx	r3
    i_next_next = i_next;
 8012d78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    letter = _lv_txt_encoded_next(txt, &i_next);
 8012d7a:	4682      	mov	sl, r0
    uint32_t letter_next = 0; /*Letter at i_next*/
 8012d7c:	462a      	mov	r2, r5
    i_next_next = i_next;
 8012d7e:	930f      	str	r3, [sp, #60]	; 0x3c
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8012d80:	9b05      	ldr	r3, [sp, #20]
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 8012d82:	9504      	str	r5, [sp, #16]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8012d84:	f003 0301 	and.w	r3, r3, #1
 8012d88:	930a      	str	r3, [sp, #40]	; 0x28
    while(txt[i] != '\0') {
 8012d8a:	9b03      	ldr	r3, [sp, #12]
 8012d8c:	5d99      	ldrb	r1, [r3, r6]
 8012d8e:	b9e9      	cbnz	r1, 8012dcc <_lv_txt_get_next_line+0x118>
    if(break_index == NO_BREAK_FOUND) {
 8012d90:	1c63      	adds	r3, r4, #1
 8012d92:	d06b      	beq.n	8012e6c <_lv_txt_get_next_line+0x1b8>
    if(force) return break_index;
 8012d94:	9b02      	ldr	r3, [sp, #8]
 8012d96:	4626      	mov	r6, r4
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d06f      	beq.n	8012e7c <_lv_txt_get_next_line+0x1c8>
    if(i == 0) {
 8012d9c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012d9e:	2d00      	cmp	r5, #0
 8012da0:	f040 808c 	bne.w	8012ebc <_lv_txt_get_next_line+0x208>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8012da4:	4b4b      	ldr	r3, [pc, #300]	; (8012ed4 <_lv_txt_get_next_line+0x220>)
 8012da6:	a90d      	add	r1, sp, #52	; 0x34
 8012da8:	4640      	mov	r0, r8
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	4798      	blx	r3
 8012dae:	4601      	mov	r1, r0
        if(used_width != NULL) {
 8012db0:	f1bb 0f00 	cmp.w	fp, #0
 8012db4:	f000 8085 	beq.w	8012ec2 <_lv_txt_get_next_line+0x20e>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 8012db8:	462a      	mov	r2, r5
 8012dba:	9801      	ldr	r0, [sp, #4]
 8012dbc:	f011 f93b 	bl	8024036 <lv_font_get_glyph_width>
 8012dc0:	b203      	sxth	r3, r0
 8012dc2:	9300      	str	r3, [sp, #0]
        *used_width = line_w;
 8012dc4:	9b00      	ldr	r3, [sp, #0]
 8012dc6:	f8ab 3000 	strh.w	r3, [fp]
 8012dca:	e07a      	b.n	8012ec2 <_lv_txt_get_next_line+0x20e>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8012dcc:	4b41      	ldr	r3, [pc, #260]	; (8012ed4 <_lv_txt_get_next_line+0x220>)
 8012dce:	a90f      	add	r1, sp, #60	; 0x3c
 8012dd0:	9803      	ldr	r0, [sp, #12]
 8012dd2:	681a      	ldr	r2, [r3, #0]
 8012dd4:	4790      	blx	r2
        word_len++;
 8012dd6:	9b04      	ldr	r3, [sp, #16]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8012dd8:	4602      	mov	r2, r0
        word_len++;
 8012dda:	3301      	adds	r3, #1
 8012ddc:	9308      	str	r3, [sp, #32]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8012dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012de0:	b173      	cbz	r3, 8012e00 <_lv_txt_get_next_line+0x14c>
 8012de2:	900b      	str	r0, [sp, #44]	; 0x2c
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 8012de4:	4651      	mov	r1, sl
 8012de6:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8012dea:	f012 fcae 	bl	802574a <_lv_txt_is_cmd>
 8012dee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012df0:	b130      	cbz	r0, 8012e00 <_lv_txt_get_next_line+0x14c>
        i_next = i_next_next;
 8012df2:	9b08      	ldr	r3, [sp, #32]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8012df4:	4692      	mov	sl, r2
        i_next = i_next_next;
 8012df6:	e9dd 610e 	ldrd	r6, r1, [sp, #56]	; 0x38
 8012dfa:	9304      	str	r3, [sp, #16]
 8012dfc:	910e      	str	r1, [sp, #56]	; 0x38
 8012dfe:	e7c4      	b.n	8012d8a <_lv_txt_get_next_line+0xd6>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8012e00:	4651      	mov	r1, sl
 8012e02:	9801      	ldr	r0, [sp, #4]
 8012e04:	920b      	str	r2, [sp, #44]	; 0x2c
 8012e06:	f011 f916 	bl	8024036 <lv_font_get_glyph_width>
        cur_w += letter_w;
 8012e0a:	4407      	add	r7, r0
        if(letter_w > 0) {
 8012e0c:	b200      	sxth	r0, r0
 8012e0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e10:	2800      	cmp	r0, #0
        cur_w += letter_w;
 8012e12:	b2bf      	uxth	r7, r7
            cur_w += letter_space;
 8012e14:	bfc2      	ittt	gt
 8012e16:	9b06      	ldrgt	r3, [sp, #24]
 8012e18:	18ff      	addgt	r7, r7, r3
 8012e1a:	b2bf      	uxthgt	r7, r7
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8012e1c:	1c60      	adds	r0, r4, #1
 8012e1e:	b23f      	sxth	r7, r7
 8012e20:	d105      	bne.n	8012e2e <_lv_txt_get_next_line+0x17a>
 8012e22:	9b06      	ldr	r3, [sp, #24]
 8012e24:	1af9      	subs	r1, r7, r3
 8012e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e28:	4299      	cmp	r1, r3
 8012e2a:	bfc8      	it	gt
 8012e2c:	4634      	movgt	r4, r6
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 8012e2e:	f1ba 0f0a 	cmp.w	sl, #10
 8012e32:	d016      	beq.n	8012e62 <_lv_txt_get_next_line+0x1ae>
 8012e34:	f1ba 0f0d 	cmp.w	sl, #13
 8012e38:	d013      	beq.n	8012e62 <_lv_txt_get_next_line+0x1ae>
{
    uint8_t i;
    bool ret = false;

    /* each chinese character can be break */
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 8012e3a:	f5aa 409c 	sub.w	r0, sl, #19968	; 0x4e00
 8012e3e:	f245 11a5 	movw	r1, #20901	; 0x51a5
 8012e42:	4288      	cmp	r0, r1
 8012e44:	d90d      	bls.n	8012e62 <_lv_txt_get_next_line+0x1ae>
 8012e46:	2100      	movs	r1, #0
        return true;
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8012e48:	b2c8      	uxtb	r0, r1
 8012e4a:	4b23      	ldr	r3, [pc, #140]	; (8012ed8 <_lv_txt_get_next_line+0x224>)
 8012e4c:	5c18      	ldrb	r0, [r3, r0]
 8012e4e:	b920      	cbnz	r0, 8012e5a <_lv_txt_get_next_line+0x1a6>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 8012e50:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012e54:	bf08      	it	eq
 8012e56:	463d      	moveq	r5, r7
 8012e58:	e7cb      	b.n	8012df2 <_lv_txt_get_next_line+0x13e>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8012e5a:	4582      	cmp	sl, r0
 8012e5c:	f101 0101 	add.w	r1, r1, #1
 8012e60:	d1f2      	bne.n	8012e48 <_lv_txt_get_next_line+0x194>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8012e62:	2e00      	cmp	r6, #0
 8012e64:	d194      	bne.n	8012d90 <_lv_txt_get_next_line+0xdc>
 8012e66:	1c61      	adds	r1, r4, #1
 8012e68:	d194      	bne.n	8012d94 <_lv_txt_get_next_line+0xe0>
 8012e6a:	463d      	mov	r5, r7
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8012e6c:	9b04      	ldr	r3, [sp, #16]
 8012e6e:	b123      	cbz	r3, 8012e7a <_lv_txt_get_next_line+0x1c6>
 8012e70:	f1ba 0f0d 	cmp.w	sl, #13
 8012e74:	d102      	bne.n	8012e7c <_lv_txt_get_next_line+0x1c8>
 8012e76:	2a0a      	cmp	r2, #10
 8012e78:	d100      	bne.n	8012e7c <_lv_txt_get_next_line+0x1c8>
 8012e7a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
        line_w += word_w;
 8012e7c:	9b00      	ldr	r3, [sp, #0]
        max_width -= word_w;
 8012e7e:	b2ad      	uxth	r5, r5
 8012e80:	eba9 0905 	sub.w	r9, r9, r5
        line_w += word_w;
 8012e84:	441d      	add	r5, r3
 8012e86:	b22b      	sxth	r3, r5
        max_width -= word_w;
 8012e88:	fa0f f989 	sxth.w	r9, r9
        line_w += word_w;
 8012e8c:	9300      	str	r3, [sp, #0]
        i += advance;
 8012e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if(advance == 0) {
 8012e90:	2e00      	cmp	r6, #0
 8012e92:	d083      	beq.n	8012d9c <_lv_txt_get_next_line+0xe8>
        i += advance;
 8012e94:	441e      	add	r6, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8012e96:	f898 3000 	ldrb.w	r3, [r8]
 8012e9a:	2b0a      	cmp	r3, #10
        i += advance;
 8012e9c:	960d      	str	r6, [sp, #52]	; 0x34
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8012e9e:	f43f af7d 	beq.w	8012d9c <_lv_txt_get_next_line+0xe8>
 8012ea2:	2b0d      	cmp	r3, #13
 8012ea4:	f43f af7a 	beq.w	8012d9c <_lv_txt_get_next_line+0xe8>
        if(txt[i] == '\n' || txt[i] == '\r') {
 8012ea8:	f818 3006 	ldrb.w	r3, [r8, r6]
 8012eac:	2b0a      	cmp	r3, #10
 8012eae:	d002      	beq.n	8012eb6 <_lv_txt_get_next_line+0x202>
 8012eb0:	2b0d      	cmp	r3, #13
 8012eb2:	f47f af43 	bne.w	8012d3c <_lv_txt_get_next_line+0x88>
            i++;  /*Include the following newline in the current line*/
 8012eb6:	3601      	adds	r6, #1
 8012eb8:	960d      	str	r6, [sp, #52]	; 0x34
            break;
 8012eba:	e76f      	b.n	8012d9c <_lv_txt_get_next_line+0xe8>
    if(used_width != NULL) {
 8012ebc:	f1bb 0f00 	cmp.w	fp, #0
 8012ec0:	d180      	bne.n	8012dc4 <_lv_txt_get_next_line+0x110>
    return i;
 8012ec2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012ec4:	e72b      	b.n	8012d1e <_lv_txt_get_next_line+0x6a>
    if(txt == NULL) return 0;
 8012ec6:	4640      	mov	r0, r8
 8012ec8:	e729      	b.n	8012d1e <_lv_txt_get_next_line+0x6a>
 8012eca:	9801      	ldr	r0, [sp, #4]
 8012ecc:	e727      	b.n	8012d1e <_lv_txt_get_next_line+0x6a>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 8012ece:	3001      	adds	r0, #1
 8012ed0:	e71e      	b.n	8012d10 <_lv_txt_get_next_line+0x5c>
 8012ed2:	bf00      	nop
 8012ed4:	24000100 	.word	0x24000100
 8012ed8:	0802deba 	.word	0x0802deba

08012edc <_lv_txt_ins>:
{
 8012edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee0:	4688      	mov	r8, r1
 8012ee2:	4617      	mov	r7, r2
    if(txt_buf == NULL || ins_txt == NULL) return;
 8012ee4:	4605      	mov	r5, r0
 8012ee6:	b1f8      	cbz	r0, 8012f28 <_lv_txt_ins+0x4c>
 8012ee8:	b1f2      	cbz	r2, 8012f28 <_lv_txt_ins+0x4c>
    size_t old_len = strlen(txt_buf);
 8012eea:	f007 fbfb 	bl	801a6e4 <strlen>
 8012eee:	4604      	mov	r4, r0
    size_t ins_len = strlen(ins_txt);
 8012ef0:	4638      	mov	r0, r7
 8012ef2:	f007 fbf7 	bl	801a6e4 <strlen>
    if(ins_len == 0) return;
 8012ef6:	4606      	mov	r6, r0
 8012ef8:	b1b0      	cbz	r0, 8012f28 <_lv_txt_ins+0x4c>
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8012efa:	4b0c      	ldr	r3, [pc, #48]	; (8012f2c <_lv_txt_ins+0x50>)
    size_t new_len = ins_len + old_len;
 8012efc:	4404      	add	r4, r0
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8012efe:	4641      	mov	r1, r8
 8012f00:	4628      	mov	r0, r5
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	4798      	blx	r3
    for(i = new_len; i >= pos + ins_len; i--) {
 8012f06:	192b      	adds	r3, r5, r4
 8012f08:	1831      	adds	r1, r6, r0
        txt_buf[i] = txt_buf[i - ins_len];
 8012f0a:	4274      	negs	r4, r6
    for(i = new_len; i >= pos + ins_len; i--) {
 8012f0c:	1b5a      	subs	r2, r3, r5
 8012f0e:	4291      	cmp	r1, r2
 8012f10:	d906      	bls.n	8012f20 <_lv_txt_ins+0x44>
    return memcpy(dst, src, len);
 8012f12:	4632      	mov	r2, r6
 8012f14:	4639      	mov	r1, r7
 8012f16:	4428      	add	r0, r5
}
 8012f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f1c:	f007 bbf5 	b.w	801a70a <memcpy>
        txt_buf[i] = txt_buf[i - ins_len];
 8012f20:	5d1a      	ldrb	r2, [r3, r4]
 8012f22:	f803 2901 	strb.w	r2, [r3], #-1
    for(i = new_len; i >= pos + ins_len; i--) {
 8012f26:	e7f1      	b.n	8012f0c <_lv_txt_ins+0x30>
}
 8012f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f2c:	240000f8 	.word	0x240000f8

08012f30 <_lv_txt_cut>:
{
 8012f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f34:	460c      	mov	r4, r1
 8012f36:	4617      	mov	r7, r2
    if(txt == NULL) return;
 8012f38:	4605      	mov	r5, r0
 8012f3a:	b1a0      	cbz	r0, 8012f66 <_lv_txt_cut+0x36>
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8012f3c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8012f74 <_lv_txt_cut+0x44>
    size_t old_len = strlen(txt);
 8012f40:	f007 fbd0 	bl	801a6e4 <strlen>
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8012f44:	4621      	mov	r1, r4
    size_t old_len = strlen(txt);
 8012f46:	4606      	mov	r6, r0
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8012f48:	f8d8 3000 	ldr.w	r3, [r8]
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	4798      	blx	r3
    len = _lv_txt_encoded_get_byte_id(&txt[pos], len);
 8012f50:	182c      	adds	r4, r5, r0
 8012f52:	f8d8 3000 	ldr.w	r3, [r8]
 8012f56:	4639      	mov	r1, r7
 8012f58:	4620      	mov	r0, r4
 8012f5a:	4798      	blx	r3
    for(i = pos; i <= old_len - len; i++) {
 8012f5c:	4623      	mov	r3, r4
 8012f5e:	1a36      	subs	r6, r6, r0
 8012f60:	1b5a      	subs	r2, r3, r5
 8012f62:	4296      	cmp	r6, r2
 8012f64:	d201      	bcs.n	8012f6a <_lv_txt_cut+0x3a>
}
 8012f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txt[i] = txt[i + len];
 8012f6a:	5c1a      	ldrb	r2, [r3, r0]
 8012f6c:	f803 2b01 	strb.w	r2, [r3], #1
    for(i = pos; i <= old_len - len; i++) {
 8012f70:	e7f6      	b.n	8012f60 <_lv_txt_cut+0x30>
 8012f72:	bf00      	nop
 8012f74:	240000f8 	.word	0x240000f8

08012f78 <_lv_txt_encoded_letter_next_2>:
{
 8012f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f7c:	461c      	mov	r4, r3
    *letter = _lv_txt_encoded_next(txt, ofs);
 8012f7e:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8012fa8 <_lv_txt_encoded_letter_next_2+0x30>
{
 8012f82:	460f      	mov	r7, r1
 8012f84:	4606      	mov	r6, r0
    *letter = _lv_txt_encoded_next(txt, ofs);
 8012f86:	f8d8 3000 	ldr.w	r3, [r8]
 8012f8a:	4621      	mov	r1, r4
{
 8012f8c:	4615      	mov	r5, r2
    *letter = _lv_txt_encoded_next(txt, ofs);
 8012f8e:	4798      	blx	r3
 8012f90:	6038      	str	r0, [r7, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8012f92:	b128      	cbz	r0, 8012fa0 <_lv_txt_encoded_letter_next_2+0x28>
 8012f94:	6820      	ldr	r0, [r4, #0]
 8012f96:	2100      	movs	r1, #0
 8012f98:	f8d8 3000 	ldr.w	r3, [r8]
 8012f9c:	4430      	add	r0, r6
 8012f9e:	4798      	blx	r3
 8012fa0:	6028      	str	r0, [r5, #0]
}
 8012fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fa6:	bf00      	nop
 8012fa8:	24000100 	.word	0x24000100

08012fac <lv_arc_constructor>:
    LV_TRACE_OBJ_CREATE("begin");

    lv_arc_t * arc = (lv_arc_t *)obj;

    /*Initialize the allocated 'ext'*/
    arc->rotation = 0;
 8012fac:	f44f 0307 	mov.w	r3, #8847360	; 0x870000
    arc->indic_angle_start = 135;
    arc->indic_angle_end   = 270;
    arc->type = LV_ARC_MODE_NORMAL;
    arc->value = VALUE_UNSET;
    arc->min_close = 1;
    arc->min_value = 0;
 8012fb0:	4a14      	ldr	r2, [pc, #80]	; (8013004 <lv_arc_constructor+0x58>)
{
 8012fb2:	b510      	push	{r4, lr}
    arc->rotation = 0;
 8012fb4:	624b      	str	r3, [r1, #36]	; 0x24
    arc->indic_angle_end   = 270;
 8012fb6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
{
 8012fba:	460c      	mov	r4, r1
    arc->indic_angle_end   = 270;
 8012fbc:	628b      	str	r3, [r1, #40]	; 0x28
    arc->min_value = 0;
 8012fbe:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8012fc2:	e9c1 230b 	strd	r2, r3, [r1, #44]	; 0x2c
    arc->max_value = 100;
    arc->dragging = false;
 8012fc6:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 8012fca:	f023 030f 	bic.w	r3, r3, #15
 8012fce:	f043 0308 	orr.w	r3, r3, #8
 8012fd2:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
    arc->chg_rate = 720;
 8012fd6:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8012fda:	86cb      	strh	r3, [r1, #54]	; 0x36
    arc->last_tick = lv_tick_get();
 8012fdc:	f011 f881 	bl	80240e2 <lv_tick_get>
    arc->last_angle = arc->indic_angle_end;
 8012fe0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    arc->last_tick = lv_tick_get();
 8012fe2:	63a0      	str	r0, [r4, #56]	; 0x38

    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8012fe4:	2102      	movs	r1, #2
 8012fe6:	4620      	mov	r0, r4
    arc->last_angle = arc->indic_angle_end;
 8012fe8:	87a3      	strh	r3, [r4, #60]	; 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8012fea:	f008 fc8a 	bl	801b902 <lv_obj_add_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN | LV_OBJ_FLAG_SCROLLABLE);
 8012fee:	4620      	mov	r0, r4
 8012ff0:	f44f 7144 	mov.w	r1, #784	; 0x310
 8012ff4:	f008 fcbb 	bl	801b96e <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	210d      	movs	r1, #13


    LV_TRACE_OBJ_CREATE("finished");
}
 8012ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 8013000:	f009 bef0 	b.w	801cde4 <lv_obj_set_ext_click_area>
 8013004:	8000002d 	.word	0x8000002d

08013008 <lv_arc_event>:

static void lv_arc_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8013008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801300c:	48c0      	ldr	r0, [pc, #768]	; (8013310 <lv_arc_event+0x308>)
{
 801300e:	b0aa      	sub	sp, #168	; 0xa8
 8013010:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8013012:	f008 f8d8 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8013016:	2801      	cmp	r0, #1
 8013018:	d138      	bne.n	801308c <lv_arc_event+0x84>

    lv_event_code_t code = lv_event_get_code(e);
 801301a:	4630      	mov	r0, r6
 801301c:	f008 f8ed 	bl	801b1fa <lv_event_get_code>
 8013020:	4607      	mov	r7, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8013022:	4630      	mov	r0, r6
 8013024:	f008 f8e5 	bl	801b1f2 <lv_event_get_target>
 8013028:	4605      	mov	r5, r0
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 801302a:	4630      	mov	r0, r6
 801302c:	f008 f8e1 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_PRESSING) {
 8013030:	2f02      	cmp	r7, #2
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 8013032:	4604      	mov	r4, r0
    if(code == LV_EVENT_PRESSING) {
 8013034:	f040 80ff 	bne.w	8013236 <lv_arc_event+0x22e>
        lv_indev_t * indev = lv_indev_get_act();
 8013038:	f7f1 fbb6 	bl	80047a8 <lv_indev_get_act>
        if(indev == NULL) return;
 801303c:	4606      	mov	r6, r0
 801303e:	b328      	cbz	r0, 801308c <lv_arc_event+0x84>

        /*Handle only pointers here*/
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8013040:	f008 fa9b 	bl	801b57a <lv_indev_get_type>
        if(indev_type != LV_INDEV_TYPE_POINTER) return;
 8013044:	2801      	cmp	r0, #1
 8013046:	d121      	bne.n	801308c <lv_arc_event+0x84>

        lv_point_t p;
        lv_indev_get_point(indev, &p);
 8013048:	a90a      	add	r1, sp, #40	; 0x28
 801304a:	4630      	mov	r0, r6
 801304c:	f008 faa6 	bl	801b59c <lv_indev_get_point>

        /*Make point relative to the arc's center*/
        lv_point_t center;
        lv_coord_t r;
        get_center(obj, &center, &r);
 8013050:	aa06      	add	r2, sp, #24
 8013052:	a918      	add	r1, sp, #96	; 0x60
 8013054:	4628      	mov	r0, r5
 8013056:	f012 fcbf 	bl	80259d8 <get_center>

        p.x -= center.x;
 801305a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801305e:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 8013062:	1a9b      	subs	r3, r3, r2
        p.y -= center.y;
 8013064:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
        p.x -= center.x;
 8013068:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        p.y -= center.y;
 801306c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8013070:	1a9b      	subs	r3, r3, r2
 8013072:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a

        /*Enter dragging mode if pressed out of the knob*/
        if(arc->dragging == false) {
 8013076:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801307a:	07da      	lsls	r2, r3, #31
 801307c:	d509      	bpl.n	8013092 <lv_arc_event+0x8a>

        /*It must be in "dragging" mode to turn the arc*/
        if(arc->dragging == false) return;

        /*No angle can be determined if exactly the middle of the arc is being pressed*/
        if(p.x == 0 && p.y == 0) return;
 801307e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8013082:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
 8013086:	ea51 0300 	orrs.w	r3, r1, r0
 801308a:	d140      	bne.n	801310e <lv_arc_event+0x106>
        *s = LV_MAX(*s, knob_extra_size);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        lv_arc_draw(e);
    }
}
 801308c:	b02a      	add	sp, #168	; 0xa8
 801308e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
 8013092:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8013096:	4628      	mov	r0, r5
 8013098:	f012 fc80 	bl	802599c <lv_obj_get_style_arc_width>
            r -= indic_width;
 801309c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 80130a0:	fa1f f880 	uxth.w	r8, r0
            lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
 80130a4:	4607      	mov	r7, r0
            if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 80130a6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80130aa:	4628      	mov	r0, r5
            r -= indic_width;
 80130ac:	eba6 0608 	sub.w	r6, r6, r8
 80130b0:	b2b6      	uxth	r6, r6
            if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 80130b2:	f008 fcab 	bl	801ba0c <lv_obj_has_flag>
 80130b6:	b300      	cbz	r0, 80130fa <lv_arc_event+0xf2>
                r -= indic_width;
 80130b8:	eba6 0608 	sub.w	r6, r6, r8
                r -= LV_MAX(r / 4, indic_width);
 80130bc:	b236      	sxth	r6, r6
            if(p.x * p.x + p.y * p.y > r * r) {
 80130be:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80130c2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
            if(r < 1) r = 1;
 80130c6:	2e01      	cmp	r6, #1
            if(p.x * p.x + p.y * p.y > r * r) {
 80130c8:	fb02 f202 	mul.w	r2, r2, r2
            if(r < 1) r = 1;
 80130cc:	bfb8      	it	lt
 80130ce:	2601      	movlt	r6, #1
            if(p.x * p.x + p.y * p.y > r * r) {
 80130d0:	fb03 2303 	mla	r3, r3, r3, r2
 80130d4:	f8ad 6018 	strh.w	r6, [sp, #24]
 80130d8:	4376      	muls	r6, r6
 80130da:	42b3      	cmp	r3, r6
 80130dc:	dd08      	ble.n	80130f0 <lv_arc_event+0xe8>
                arc->dragging = true;
 80130de:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80130e2:	f043 0301 	orr.w	r3, r3, #1
 80130e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                arc->last_tick = lv_tick_get(); /*Capture timestamp at dragging start*/
 80130ea:	f010 fffa 	bl	80240e2 <lv_tick_get>
 80130ee:	63a0      	str	r0, [r4, #56]	; 0x38
        if(arc->dragging == false) return;
 80130f0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80130f4:	07db      	lsls	r3, r3, #31
 80130f6:	d5c9      	bpl.n	801308c <lv_arc_event+0x84>
 80130f8:	e7c1      	b.n	801307e <lv_arc_event+0x76>
                r -= LV_MAX(r / 4, indic_width);
 80130fa:	b233      	sxth	r3, r6
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	bfb8      	it	lt
 8013100:	3303      	addlt	r3, #3
 8013102:	109b      	asrs	r3, r3, #2
 8013104:	42bb      	cmp	r3, r7
 8013106:	bfac      	ite	ge
 8013108:	1af6      	subge	r6, r6, r3
 801310a:	1bf6      	sublt	r6, r6, r7
 801310c:	e7d6      	b.n	80130bc <lv_arc_event+0xb4>
        int16_t bg_end = arc->bg_angle_end;
 801310e:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
        if(arc->bg_angle_end < arc->bg_angle_start) {
 8013110:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8013112:	42b3      	cmp	r3, r6
            bg_end = arc->bg_angle_end + 360;
 8013114:	bf84      	itt	hi
 8013116:	f506 76b4 	addhi.w	r6, r6, #360	; 0x168
 801311a:	b2b6      	uxthhi	r6, r6
        angle = lv_atan2(p.y, p.x);
 801311c:	f011 fd1b 	bl	8024b56 <lv_atan2>
        angle -= arc->bg_angle_start;  /*Make the angle relative to the start angle*/
 8013120:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8013122:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8013124:	b237      	sxth	r7, r6
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 8013126:	f8b4 c03c 	ldrh.w	ip, [r4, #60]	; 0x3c
        angle -= arc->bg_angle_start;  /*Make the angle relative to the start angle*/
 801312a:	4413      	add	r3, r2
 801312c:	1ac1      	subs	r1, r0, r3
 801312e:	b28b      	uxth	r3, r1
 8013130:	b209      	sxth	r1, r1
        if(angle < 0) angle += 360;
 8013132:	2900      	cmp	r1, #0
 8013134:	bfbc      	itt	lt
 8013136:	f503 73b4 	addlt.w	r3, r3, #360	; 0x168
 801313a:	b219      	sxthlt	r1, r3
        int16_t deg_range = bg_end - arc->bg_angle_start;
 801313c:	1ab3      	subs	r3, r6, r2
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 801313e:	ebac 0602 	sub.w	r6, ip, r2
 8013142:	eba2 020c 	sub.w	r2, r2, ip
        int16_t deg_range = bg_end - arc->bg_angle_start;
 8013146:	b21b      	sxth	r3, r3
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 8013148:	b290      	uxth	r0, r2
        int16_t delta_angle = angle - last_angle_rel;
 801314a:	fa11 f282 	uxtah	r2, r1, r2
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 801314e:	b2b6      	uxth	r6, r6
        if(LV_ABS(delta_angle) > 280) {
 8013150:	b212      	sxth	r2, r2
 8013152:	2a00      	cmp	r2, #0
 8013154:	bfb8      	it	lt
 8013156:	4252      	neglt	r2, r2
 8013158:	b292      	uxth	r2, r2
 801315a:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 801315e:	d942      	bls.n	80131e6 <lv_arc_event+0x1de>
            if(arc->min_close) angle = 0;
 8013160:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8013164:	f012 0f08 	tst.w	r2, #8
 8013168:	bf18      	it	ne
 801316a:	2300      	movne	r3, #0
        delta_angle = angle - last_angle_rel;
 801316c:	4418      	add	r0, r3
 801316e:	fa0f f880 	sxth.w	r8, r0
        uint32_t delta_tick = lv_tick_elaps(arc->last_tick);
 8013172:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8013174:	f010 ffbd 	bl	80240f2 <lv_tick_elaps>
        int16_t delta_angle_max = (arc->chg_rate * delta_tick) / 1000;
 8013178:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801317a:	4358      	muls	r0, r3
 801317c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013180:	fbb0 f0f3 	udiv	r0, r0, r3
 8013184:	b202      	sxth	r2, r0
        if(delta_angle > delta_angle_max) {
 8013186:	4590      	cmp	r8, r2
 8013188:	dc05      	bgt.n	8013196 <lv_arc_event+0x18e>
        else if(delta_angle < -delta_angle_max) {
 801318a:	4252      	negs	r2, r2
 801318c:	4590      	cmp	r8, r2
            delta_angle = -delta_angle_max;
 801318e:	bfb6      	itet	lt
 8013190:	4240      	neglt	r0, r0
 8013192:	4642      	movge	r2, r8
 8013194:	b202      	sxthlt	r2, r0
        int32_t round = ((bg_end - arc->bg_angle_start) * 8) / (arc->max_value - arc->min_value);
 8013196:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8013198:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801319c:	f9b4 e032 	ldrsh.w	lr, [r4, #50]	; 0x32
 80131a0:	eba7 0c01 	sub.w	ip, r7, r1
        int16_t old_value = arc->value;
 80131a4:	f9b4 802e 	ldrsh.w	r8, [r4, #46]	; 0x2e
        int32_t round = ((bg_end - arc->bg_angle_start) * 8) / (arc->max_value - arc->min_value);
 80131a8:	ebae 0003 	sub.w	r0, lr, r3
 80131ac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
        int16_t new_value = lv_map(angle, arc->bg_angle_start, bg_end, arc->min_value, arc->max_value);
 80131b0:	f8cd e000 	str.w	lr, [sp]
        int32_t round = ((bg_end - arc->bg_angle_start) * 8) / (arc->max_value - arc->min_value);
 80131b4:	fb9c fcf0 	sdiv	ip, ip, r0
        angle += arc->bg_angle_start;  /*Make the angle absolute again*/
 80131b8:	1870      	adds	r0, r6, r1
        round = (round + 4) >> 4;
 80131ba:	f10c 0c04 	add.w	ip, ip, #4
        angle += arc->bg_angle_start;  /*Make the angle absolute again*/
 80131be:	eb00 102c 	add.w	r0, r0, ip, asr #4
 80131c2:	4410      	add	r0, r2
        int16_t new_value = lv_map(angle, arc->bg_angle_start, bg_end, arc->min_value, arc->max_value);
 80131c4:	463a      	mov	r2, r7
 80131c6:	b200      	sxth	r0, r0
 80131c8:	f011 fd28 	bl	8024c1c <lv_map>
        if(new_value != lv_arc_get_value(obj)) {
 80131cc:	f9b5 302e 	ldrsh.w	r3, [r5, #46]	; 0x2e
        int16_t new_value = lv_map(angle, arc->bg_angle_start, bg_end, arc->min_value, arc->max_value);
 80131d0:	b206      	sxth	r6, r0
        if(new_value != lv_arc_get_value(obj)) {
 80131d2:	42b3      	cmp	r3, r6
 80131d4:	d117      	bne.n	8013206 <lv_arc_event+0x1fe>
        if(new_value == arc->min_value || new_value == arc->max_value) {
 80131d6:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80131da:	42b3      	cmp	r3, r6
 80131dc:	d125      	bne.n	801322a <lv_arc_event+0x222>
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 80131de:	f010 ff80 	bl	80240e2 <lv_tick_get>
 80131e2:	63a0      	str	r0, [r4, #56]	; 0x38
 80131e4:	e752      	b.n	801308c <lv_arc_event+0x84>
            if(angle < deg_range / 2)arc->min_close = 1;
 80131e6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            else arc->min_close = 0;
 80131ea:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
            if(angle < deg_range / 2)arc->min_close = 1;
 80131ee:	f343 034f 	sbfx	r3, r3, #1, #16
 80131f2:	4299      	cmp	r1, r3
 80131f4:	bfac      	ite	ge
 80131f6:	2300      	movge	r3, #0
 80131f8:	2301      	movlt	r3, #1
            else arc->min_close = 0;
 80131fa:	f363 02c3 	bfi	r2, r3, #3, #1
 80131fe:	460b      	mov	r3, r1
 8013200:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 8013204:	e7b2      	b.n	801316c <lv_arc_event+0x164>
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 8013206:	f010 ff6c 	bl	80240e2 <lv_tick_get>
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 801320a:	4631      	mov	r1, r6
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 801320c:	63a0      	str	r0, [r4, #56]	; 0x38
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 801320e:	4628      	mov	r0, r5
 8013210:	f012 feb5 	bl	8025f7e <lv_arc_set_value>
            if(new_value != old_value) {
 8013214:	45b0      	cmp	r8, r6
 8013216:	d0de      	beq.n	80131d6 <lv_arc_event+0x1ce>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8013218:	2200      	movs	r2, #0
 801321a:	211c      	movs	r1, #28
 801321c:	4628      	mov	r0, r5
 801321e:	f7f1 fa5d 	bl	80046dc <lv_event_send>
                if(res != LV_RES_OK) return;
 8013222:	2801      	cmp	r0, #1
 8013224:	f47f af32 	bne.w	801308c <lv_arc_event+0x84>
 8013228:	e7d5      	b.n	80131d6 <lv_arc_event+0x1ce>
        if(new_value == arc->min_value || new_value == arc->max_value) {
 801322a:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 801322e:	42b3      	cmp	r3, r6
 8013230:	f47f af2c 	bne.w	801308c <lv_arc_event+0x84>
 8013234:	e7d3      	b.n	80131de <lv_arc_event+0x1d6>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 8013236:	2f03      	cmp	r7, #3
 8013238:	d026      	beq.n	8013288 <lv_arc_event+0x280>
 801323a:	3f08      	subs	r7, #8
 801323c:	b2fb      	uxtb	r3, r7
 801323e:	2b0d      	cmp	r3, #13
 8013240:	f63f af24 	bhi.w	801308c <lv_arc_event+0x84>
 8013244:	2f0d      	cmp	r7, #13
 8013246:	f63f af21 	bhi.w	801308c <lv_arc_event+0x84>
 801324a:	a301      	add	r3, pc, #4	; (adr r3, 8013250 <lv_arc_event+0x248>)
 801324c:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8013250:	08013289 	.word	0x08013289
 8013254:	0801308d 	.word	0x0801308d
 8013258:	0801308d 	.word	0x0801308d
 801325c:	0801308d 	.word	0x0801308d
 8013260:	0801308d 	.word	0x0801308d
 8013264:	080132c5 	.word	0x080132c5
 8013268:	0801308d 	.word	0x0801308d
 801326c:	0801308d 	.word	0x0801308d
 8013270:	0801308d 	.word	0x0801308d
 8013274:	08013315 	.word	0x08013315
 8013278:	0801308d 	.word	0x0801308d
 801327c:	080133a3 	.word	0x080133a3
 8013280:	0801308d 	.word	0x0801308d
 8013284:	0801344f 	.word	0x0801344f
        arc->dragging = false;
 8013288:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 801328c:	4628      	mov	r0, r5
        arc->dragging = false;
 801328e:	f36f 0300 	bfc	r3, #0, #1
 8013292:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 8013296:	f008 fbc7 	bl	801ba28 <lv_obj_get_group>
 801329a:	4604      	mov	r4, r0
        bool editing               = lv_group_get_editing(g);
 801329c:	f008 f968 	bl	801b570 <lv_group_get_editing>
 80132a0:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80132a2:	f7f1 fa81 	bl	80047a8 <lv_indev_get_act>
 80132a6:	f008 f968 	bl	801b57a <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80132aa:	2804      	cmp	r0, #4
 80132ac:	f47f aeee 	bne.w	801308c <lv_arc_event+0x84>
            if(editing) lv_group_set_editing(g, false);
 80132b0:	2d00      	cmp	r5, #0
 80132b2:	f43f aeeb 	beq.w	801308c <lv_arc_event+0x84>
 80132b6:	2100      	movs	r1, #0
 80132b8:	4620      	mov	r0, r4
}
 80132ba:	b02a      	add	sp, #168	; 0xa8
 80132bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            if(editing) lv_group_set_editing(g, false);
 80132c0:	f008 b935 	b.w	801b52e <lv_group_set_editing>
        char c = *((char *)lv_event_get_param(e));
 80132c4:	4630      	mov	r0, r6
 80132c6:	f007 ff9c 	bl	801b202 <lv_event_get_param>
 80132ca:	7803      	ldrb	r3, [r0, #0]
        int16_t old_value = arc->value;
 80132cc:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80132d0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80132d4:	2a11      	cmp	r2, #17
 80132d6:	d112      	bne.n	80132fe <lv_arc_event+0x2f6>
            lv_arc_set_value(obj, lv_arc_get_value(obj) + 1);
 80132d8:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 80132da:	3101      	adds	r1, #1
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 80132dc:	b209      	sxth	r1, r1
 80132de:	4628      	mov	r0, r5
 80132e0:	f012 fe4d 	bl	8025f7e <lv_arc_set_value>
        if(old_value != arc->value) {
 80132e4:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 80132e8:	42b3      	cmp	r3, r6
 80132ea:	f43f aecf 	beq.w	801308c <lv_arc_event+0x84>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80132ee:	2200      	movs	r2, #0
 80132f0:	211c      	movs	r1, #28
 80132f2:	4628      	mov	r0, r5
}
 80132f4:	b02a      	add	sp, #168	; 0xa8
 80132f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80132fa:	f7f1 b9ef 	b.w	80046dc <lv_event_send>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 80132fe:	2b14      	cmp	r3, #20
 8013300:	d002      	beq.n	8013308 <lv_arc_event+0x300>
 8013302:	2b12      	cmp	r3, #18
 8013304:	f47f aec2 	bne.w	801308c <lv_arc_event+0x84>
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 8013308:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 801330a:	3901      	subs	r1, #1
 801330c:	e7e6      	b.n	80132dc <lv_arc_event+0x2d4>
 801330e:	bf00      	nop
 8013310:	080298fc 	.word	0x080298fc
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 8013314:	4630      	mov	r0, r6
 8013316:	f007 ff74 	bl	801b202 <lv_event_get_param>
        get_center(obj, &p, &r);
 801331a:	aa06      	add	r2, sp, #24
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 801331c:	4606      	mov	r6, r0
        get_center(obj, &p, &r);
 801331e:	a90a      	add	r1, sp, #40	; 0x28
 8013320:	4628      	mov	r0, r5
 8013322:	f012 fb59 	bl	80259d8 <get_center>
        if(obj->spec_attr) ext_click_area = obj->spec_attr->ext_click_pad;
 8013326:	68ac      	ldr	r4, [r5, #8]
 8013328:	b10c      	cbz	r4, 801332e <lv_arc_event+0x326>
 801332a:	f9b4 4014 	ldrsh.w	r4, [r4, #20]
        lv_coord_t w = lv_obj_get_style_arc_width(obj, LV_PART_MAIN);
 801332e:	2100      	movs	r1, #0
 8013330:	4628      	mov	r0, r5
 8013332:	f012 fb33 	bl	802599c <lv_obj_get_style_arc_width>
        r -= w + ext_click_area;
 8013336:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801333a:	b2a7      	uxth	r7, r4
 801333c:	fa10 f484 	uxtah	r4, r0, r4
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 8013340:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
        r -= w + ext_click_area;
 8013344:	b2a4      	uxth	r4, r4
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 8013346:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
        r -= w + ext_click_area;
 801334a:	1b0d      	subs	r5, r1, r4
 801334c:	1a61      	subs	r1, r4, r1
 801334e:	b2ad      	uxth	r5, r5
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 8013350:	fa10 f281 	uxtah	r2, r0, r1
 8013354:	fa1c f181 	uxtah	r1, ip, r1
 8013358:	eb05 030c 	add.w	r3, r5, ip
        r -= w + ext_click_area;
 801335c:	f8ad 5018 	strh.w	r5, [sp, #24]
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 8013360:	4405      	add	r5, r0
 8013362:	b212      	sxth	r2, r2
 8013364:	b209      	sxth	r1, r1
 8013366:	a818      	add	r0, sp, #96	; 0x60
 8013368:	b22d      	sxth	r5, r5
 801336a:	b21b      	sxth	r3, r3
 801336c:	9500      	str	r5, [sp, #0]
 801336e:	f010 ff41 	bl	80241f4 <lv_area_set>
        if(_lv_area_is_point_on(&a, info->point, LV_RADIUS_CIRCLE)) {
 8013372:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013376:	6831      	ldr	r1, [r6, #0]
 8013378:	a818      	add	r0, sp, #96	; 0x60
 801337a:	f010 ffc7 	bl	802430c <_lv_area_is_point_on>
 801337e:	b110      	cbz	r0, 8013386 <lv_arc_event+0x37e>
            info->res = false;
 8013380:	2300      	movs	r3, #0
 8013382:	7133      	strb	r3, [r6, #4]
            return;
 8013384:	e682      	b.n	801308c <lv_arc_event+0x84>
        lv_area_increase(&a, w + ext_click_area * 2, w + ext_click_area * 2);
 8013386:	193a      	adds	r2, r7, r4
 8013388:	a818      	add	r0, sp, #96	; 0x60
 801338a:	b212      	sxth	r2, r2
 801338c:	4611      	mov	r1, r2
 801338e:	f010 ff50 	bl	8024232 <lv_area_increase>
        info->res = _lv_area_is_point_on(&a, info->point, LV_RADIUS_CIRCLE);
 8013392:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013396:	6831      	ldr	r1, [r6, #0]
 8013398:	a818      	add	r0, sp, #96	; 0x60
 801339a:	f010 ffb7 	bl	802430c <_lv_area_is_point_on>
 801339e:	7130      	strb	r0, [r6, #4]
 80133a0:	e674      	b.n	801308c <lv_arc_event+0x84>
        lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80133a2:	2100      	movs	r1, #0
 80133a4:	4628      	mov	r0, r5
 80133a6:	f012 faff 	bl	80259a8 <lv_obj_get_style_pad_left>
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80133aa:	2100      	movs	r1, #0
        lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80133ac:	4604      	mov	r4, r0
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80133ae:	4628      	mov	r0, r5
 80133b0:	f012 fb00 	bl	80259b4 <lv_obj_get_style_pad_right>
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80133b4:	2100      	movs	r1, #0
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80133b6:	4680      	mov	r8, r0
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80133b8:	4628      	mov	r0, r5
 80133ba:	f012 fb01 	bl	80259c0 <lv_obj_get_style_pad_top>
        lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80133be:	2100      	movs	r1, #0
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80133c0:	4607      	mov	r7, r0
        lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80133c2:	4628      	mov	r0, r5
 80133c4:	f012 fb02 	bl	80259cc <lv_obj_get_style_pad_bottom>
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 80133c8:	4544      	cmp	r4, r8
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 80133ca:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 80133ce:	bfb8      	it	lt
 80133d0:	4644      	movlt	r4, r8
 80133d2:	b224      	sxth	r4, r4
 80133d4:	42bc      	cmp	r4, r7
 80133d6:	bfb8      	it	lt
 80133d8:	463c      	movlt	r4, r7
 80133da:	b224      	sxth	r4, r4
 80133dc:	4284      	cmp	r4, r0
 80133de:	bfb8      	it	lt
 80133e0:	4604      	movlt	r4, r0
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 80133e2:	4628      	mov	r0, r5
 80133e4:	f012 fae0 	bl	80259a8 <lv_obj_get_style_pad_left>
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 80133e8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 80133ec:	4680      	mov	r8, r0
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 80133ee:	4628      	mov	r0, r5
 80133f0:	f012 fae0 	bl	80259b4 <lv_obj_get_style_pad_right>
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 80133f4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 80133f8:	4682      	mov	sl, r0
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 80133fa:	4628      	mov	r0, r5
 80133fc:	f012 fae0 	bl	80259c0 <lv_obj_get_style_pad_top>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8013400:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8013404:	4681      	mov	r9, r0
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8013406:	4628      	mov	r0, r5
 8013408:	f012 fae0 	bl	80259cc <lv_obj_get_style_pad_bottom>
 801340c:	4607      	mov	r7, r0
        knob_extra_size += knob_get_extra_size(obj);
 801340e:	4628      	mov	r0, r5
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 8013410:	b224      	sxth	r4, r4
        knob_extra_size += knob_get_extra_size(obj);
 8013412:	f012 fbd9 	bl	8025bc8 <knob_get_extra_size>
 8013416:	4605      	mov	r5, r0
        lv_coord_t * s = lv_event_get_param(e);
 8013418:	4630      	mov	r0, r6
 801341a:	f007 fef2 	bl	801b202 <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 801341e:	45d0      	cmp	r8, sl
 8013420:	4642      	mov	r2, r8
        knob_extra_size += knob_get_extra_size(obj);
 8013422:	f105 0302 	add.w	r3, r5, #2
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 8013426:	bfb8      	it	lt
 8013428:	4652      	movlt	r2, sl
 801342a:	b212      	sxth	r2, r2
 801342c:	454a      	cmp	r2, r9
 801342e:	bfb8      	it	lt
 8013430:	464a      	movlt	r2, r9
 8013432:	b212      	sxth	r2, r2
        knob_extra_size += knob_get_extra_size(obj);
 8013434:	42ba      	cmp	r2, r7
 8013436:	bfac      	ite	ge
 8013438:	189b      	addge	r3, r3, r2
 801343a:	19db      	addlt	r3, r3, r7
        *s = LV_MAX(*s, knob_extra_size);
 801343c:	f9b0 2000 	ldrsh.w	r2, [r0]
        knob_extra_size += knob_get_extra_size(obj);
 8013440:	1b1b      	subs	r3, r3, r4
        *s = LV_MAX(*s, knob_extra_size);
 8013442:	b21b      	sxth	r3, r3
 8013444:	4293      	cmp	r3, r2
 8013446:	bfb8      	it	lt
 8013448:	4613      	movlt	r3, r2
 801344a:	8003      	strh	r3, [r0, #0]
 801344c:	e61e      	b.n	801308c <lv_arc_event+0x84>

static void lv_arc_draw(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 801344e:	4630      	mov	r0, r6
 8013450:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80135f0 <lv_arc_event+0x5e8>
 8013454:	f007 fecd 	bl	801b1f2 <lv_event_get_target>
 8013458:	4604      	mov	r4, r0
    lv_arc_t * arc = (lv_arc_t *)obj;

    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801345a:	4630      	mov	r0, r6
 801345c:	f007 ff22 	bl	801b2a4 <lv_event_get_draw_ctx>
 8013460:	4606      	mov	r6, r0

    lv_point_t center;
    lv_coord_t arc_r;
    get_center(obj, &center, &arc_r);
 8013462:	f10d 020a 	add.w	r2, sp, #10
 8013466:	a903      	add	r1, sp, #12
 8013468:	4620      	mov	r0, r4
 801346a:	f012 fab5 	bl	80259d8 <get_center>

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801346e:	4631      	mov	r1, r6
 8013470:	a818      	add	r0, sp, #96	; 0x60
 8013472:	f009 f803 	bl	801c47c <lv_obj_draw_dsc_init>

    /*Draw the background arc*/
    lv_draw_arc_dsc_t arc_dsc;
    if(arc_r > 0) {
 8013476:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 801347a:	2f00      	cmp	r7, #0
 801347c:	dd2b      	ble.n	80134d6 <lv_arc_event+0x4ce>
        lv_draw_arc_dsc_init(&arc_dsc);
 801347e:	ad06      	add	r5, sp, #24
 8013480:	4628      	mov	r0, r5
 8013482:	f00b f976 	bl	801e772 <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_MAIN, &arc_dsc);
 8013486:	462a      	mov	r2, r5
 8013488:	2100      	movs	r1, #0
 801348a:	4620      	mov	r0, r4
 801348c:	f008 ff43 	bl	801c316 <lv_obj_init_draw_arc_dsc>

        part_draw_dsc.part = LV_PART_MAIN;
 8013490:	2300      	movs	r3, #0
        part_draw_dsc.class_p = MY_CLASS;
        part_draw_dsc.type = LV_ARC_DRAW_PART_BACKGROUND;
        part_draw_dsc.p1 = &center;
        part_draw_dsc.radius = arc_r;
        part_draw_dsc.arc_dsc = &arc_dsc;
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8013492:	aa18      	add	r2, sp, #96	; 0x60
 8013494:	211a      	movs	r1, #26
        part_draw_dsc.part = LV_PART_MAIN;
 8013496:	9325      	str	r3, [sp, #148]	; 0x94
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8013498:	4620      	mov	r0, r4
        part_draw_dsc.radius = arc_r;
 801349a:	f8ad 709c 	strh.w	r7, [sp, #156]	; 0x9c
        part_draw_dsc.arc_dsc = &arc_dsc;
 801349e:	9520      	str	r5, [sp, #128]	; 0x80
        part_draw_dsc.type = LV_ARC_DRAW_PART_BACKGROUND;
 80134a0:	e9cd 8319 	strd	r8, r3, [sp, #100]	; 0x64
        part_draw_dsc.p1 = &center;
 80134a4:	ab03      	add	r3, sp, #12
 80134a6:	9321      	str	r3, [sp, #132]	; 0x84
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80134a8:	f7f1 f918 	bl	80046dc <lv_event_send>

        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->bg_angle_start + arc->rotation,
 80134ac:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80134ae:	4629      	mov	r1, r5
 80134b0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80134b2:	4630      	mov	r0, r6
 80134b4:	441a      	add	r2, r3
 80134b6:	b292      	uxth	r2, r2
 80134b8:	9201      	str	r2, [sp, #4]
 80134ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80134bc:	4413      	add	r3, r2
 80134be:	aa03      	add	r2, sp, #12
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	9300      	str	r3, [sp, #0]
 80134c4:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 80134c8:	f00b f95f 	bl	801e78a <lv_draw_arc>
                    arc->bg_angle_end + arc->rotation);

        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80134cc:	aa18      	add	r2, sp, #96	; 0x60
 80134ce:	211b      	movs	r1, #27
 80134d0:	4620      	mov	r0, r4
 80134d2:	f7f1 f903 	bl	80046dc <lv_event_send>
    }

    /*Make the indicator arc smaller or larger according to its greatest padding value*/
    lv_coord_t left_indic = lv_obj_get_style_pad_left(obj, LV_PART_INDICATOR);
 80134d6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80134da:	4620      	mov	r0, r4
 80134dc:	f012 fa64 	bl	80259a8 <lv_obj_get_style_pad_left>
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 80134e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t left_indic = lv_obj_get_style_pad_left(obj, LV_PART_INDICATOR);
 80134e4:	4605      	mov	r5, r0
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 80134e6:	4620      	mov	r0, r4
 80134e8:	f012 fa64 	bl	80259b4 <lv_obj_get_style_pad_right>
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 80134ec:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 80134f0:	4682      	mov	sl, r0
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 80134f2:	4620      	mov	r0, r4
 80134f4:	f012 fa64 	bl	80259c0 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_indic = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
 80134f8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 80134fc:	4681      	mov	r9, r0
    lv_coord_t bottom_indic = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
 80134fe:	4620      	mov	r0, r4
 8013500:	f012 fa64 	bl	80259cc <lv_obj_get_style_pad_bottom>
    lv_coord_t indic_r = arc_r - LV_MAX4(left_indic, right_indic, top_indic, bottom_indic);
 8013504:	4555      	cmp	r5, sl
 8013506:	bfb8      	it	lt
 8013508:	4655      	movlt	r5, sl
 801350a:	b22d      	sxth	r5, r5
 801350c:	454d      	cmp	r5, r9
 801350e:	bfb8      	it	lt
 8013510:	464d      	movlt	r5, r9
 8013512:	b22d      	sxth	r5, r5
 8013514:	4285      	cmp	r5, r0
 8013516:	bfac      	ite	ge
 8013518:	eba7 0905 	subge.w	r9, r7, r5
 801351c:	eba7 0900 	sublt.w	r9, r7, r0
 8013520:	fa0f f989 	sxth.w	r9, r9

    if(indic_r > 0) {
 8013524:	f1b9 0f00 	cmp.w	r9, #0
 8013528:	dd36      	ble.n	8013598 <lv_arc_event+0x590>
        lv_draw_arc_dsc_init(&arc_dsc);
 801352a:	ad06      	add	r5, sp, #24
 801352c:	4628      	mov	r0, r5
 801352e:	f00b f920 	bl	801e772 <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_INDICATOR, &arc_dsc);
 8013532:	462a      	mov	r2, r5
 8013534:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8013538:	4620      	mov	r0, r4
 801353a:	f008 feec 	bl	801c316 <lv_obj_init_draw_arc_dsc>

        part_draw_dsc.part = LV_PART_INDICATOR;
 801353e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
        part_draw_dsc.class_p = MY_CLASS;
        part_draw_dsc.type = LV_ARC_DRAW_PART_FOREGROUND;
        part_draw_dsc.p1 = &center;
        part_draw_dsc.radius = indic_r;
        part_draw_dsc.arc_dsc = &arc_dsc;
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8013542:	aa18      	add	r2, sp, #96	; 0x60
 8013544:	211a      	movs	r1, #26
        part_draw_dsc.part = LV_PART_INDICATOR;
 8013546:	9325      	str	r3, [sp, #148]	; 0x94
        part_draw_dsc.type = LV_ARC_DRAW_PART_FOREGROUND;
 8013548:	2301      	movs	r3, #1
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801354a:	4620      	mov	r0, r4
        part_draw_dsc.class_p = MY_CLASS;
 801354c:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
        part_draw_dsc.type = LV_ARC_DRAW_PART_FOREGROUND;
 8013550:	931a      	str	r3, [sp, #104]	; 0x68
        part_draw_dsc.p1 = &center;
 8013552:	ab03      	add	r3, sp, #12
        part_draw_dsc.radius = indic_r;
 8013554:	f8ad 909c 	strh.w	r9, [sp, #156]	; 0x9c
        part_draw_dsc.p1 = &center;
 8013558:	9321      	str	r3, [sp, #132]	; 0x84
        part_draw_dsc.arc_dsc = &arc_dsc;
 801355a:	9520      	str	r5, [sp, #128]	; 0x80
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801355c:	f7f1 f8be 	bl	80046dc <lv_event_send>

        if(arc_dsc.width > part_draw_dsc.radius) arc_dsc.width = part_draw_dsc.radius;
 8013560:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	; 0x9c
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->indic_angle_start + arc->rotation,
 8013564:	4630      	mov	r0, r6
        if(arc_dsc.width > part_draw_dsc.radius) arc_dsc.width = part_draw_dsc.radius;
 8013566:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 801356a:	429a      	cmp	r2, r3
 801356c:	bfc8      	it	gt
 801356e:	f8ad 301a 	strhgt.w	r3, [sp, #26]
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->indic_angle_start + arc->rotation,
 8013572:	b29b      	uxth	r3, r3
 8013574:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8013576:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8013578:	4411      	add	r1, r2
 801357a:	b289      	uxth	r1, r1
 801357c:	9101      	str	r1, [sp, #4]
 801357e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8013580:	440a      	add	r2, r1
 8013582:	4629      	mov	r1, r5
 8013584:	b292      	uxth	r2, r2
 8013586:	9200      	str	r2, [sp, #0]
 8013588:	aa03      	add	r2, sp, #12
 801358a:	f00b f8fe 	bl	801e78a <lv_draw_arc>
                    arc->indic_angle_end + arc->rotation);

        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801358e:	aa18      	add	r2, sp, #96	; 0x60
 8013590:	211b      	movs	r1, #27
 8013592:	4620      	mov	r0, r4
 8013594:	f7f1 f8a2 	bl	80046dc <lv_event_send>
    }

    lv_area_t knob_area;
    get_knob_area(obj, &center, arc_r, &knob_area);
 8013598:	f10d 0910 	add.w	r9, sp, #16

    lv_draw_rect_dsc_t knob_rect_dsc;
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801359c:	ad0a      	add	r5, sp, #40	; 0x28
    get_knob_area(obj, &center, arc_r, &knob_area);
 801359e:	463a      	mov	r2, r7
 80135a0:	a903      	add	r1, sp, #12
 80135a2:	464b      	mov	r3, r9
 80135a4:	4620      	mov	r0, r4
 80135a6:	f012 fa5c 	bl	8025a62 <get_knob_area>
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 80135aa:	4628      	mov	r0, r5
 80135ac:	f7f5 f9c6 	bl	800893c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 80135b0:	462a      	mov	r2, r5
 80135b2:	4620      	mov	r0, r4
 80135b4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80135b8:	f008 fc6a 	bl	801be90 <lv_obj_init_draw_rect_dsc>

    part_draw_dsc.part = LV_PART_KNOB;
 80135bc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    part_draw_dsc.class_p = MY_CLASS;
    part_draw_dsc.type = LV_ARC_DRAW_PART_KNOB;
    part_draw_dsc.draw_area = &knob_area;
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80135c0:	aa18      	add	r2, sp, #96	; 0x60
 80135c2:	211a      	movs	r1, #26
    part_draw_dsc.part = LV_PART_KNOB;
 80135c4:	9325      	str	r3, [sp, #148]	; 0x94
    part_draw_dsc.type = LV_ARC_DRAW_PART_KNOB;
 80135c6:	2302      	movs	r3, #2
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80135c8:	4620      	mov	r0, r4
    part_draw_dsc.class_p = MY_CLASS;
 80135ca:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
 80135ce:	951c      	str	r5, [sp, #112]	; 0x70
    part_draw_dsc.draw_area = &knob_area;
 80135d0:	e9cd 391a 	strd	r3, r9, [sp, #104]	; 0x68
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80135d4:	f7f1 f882 	bl	80046dc <lv_event_send>

    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 80135d8:	464a      	mov	r2, r9
 80135da:	4629      	mov	r1, r5
 80135dc:	4630      	mov	r0, r6
 80135de:	f00b fee2 	bl	801f3a6 <lv_draw_rect>

    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80135e2:	aa18      	add	r2, sp, #96	; 0x60
 80135e4:	211b      	movs	r1, #27
 80135e6:	4620      	mov	r0, r4
 80135e8:	f7f1 f878 	bl	80046dc <lv_event_send>
}
 80135ec:	e54e      	b.n	801308c <lv_arc_event+0x84>
 80135ee:	bf00      	nop
 80135f0:	080298fc 	.word	0x080298fc

080135f4 <lv_bar_set_value_with_anim>:
    lv_obj_invalidate(var->bar);
}

static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
                                       _lv_bar_anim_t * anim_info, lv_anim_enable_t en)
{
 80135f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135f6:	b093      	sub	sp, #76	; 0x4c
 80135f8:	460e      	mov	r6, r1
 80135fa:	4607      	mov	r7, r0
 80135fc:	4615      	mov	r5, r2
 80135fe:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8013602:	461c      	mov	r4, r3
    if(en == LV_ANIM_OFF) {
 8013604:	b961      	cbnz	r1, 8013620 <lv_bar_set_value_with_anim+0x2c>
        lv_anim_del(anim_info, NULL);
 8013606:	4618      	mov	r0, r3
 8013608:	f7fe fe96 	bl	8012338 <lv_anim_del>
        anim_info->anim_state = LV_BAR_ANIM_STATE_INV;
 801360c:	f04f 33ff 	mov.w	r3, #4294967295
        *value_ptr = new_value;
        lv_obj_invalidate((lv_obj_t *)obj);
 8013610:	4638      	mov	r0, r7
        anim_info->anim_state = LV_BAR_ANIM_STATE_INV;
 8013612:	60e3      	str	r3, [r4, #12]
        *value_ptr = new_value;
 8013614:	602e      	str	r6, [r5, #0]
        lv_anim_set_values(&a, LV_BAR_ANIM_STATE_START, LV_BAR_ANIM_STATE_END);
        lv_anim_set_ready_cb(&a, lv_bar_anim_ready);
        lv_anim_set_time(&a, lv_obj_get_style_anim_time(obj, LV_PART_MAIN));
        lv_anim_start(&a);
    }
}
 8013616:	b013      	add	sp, #76	; 0x4c
 8013618:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_obj_invalidate((lv_obj_t *)obj);
 801361c:	f009 bb0a 	b.w	801cc34 <lv_obj_invalidate>
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 8013620:	68db      	ldr	r3, [r3, #12]
        lv_anim_del(anim_info, NULL);
 8013622:	2100      	movs	r1, #0
 8013624:	4620      	mov	r0, r4
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 8013626:	3301      	adds	r3, #1
            anim_info->anim_start = *value_ptr;
 8013628:	bf0c      	ite	eq
 801362a:	6813      	ldreq	r3, [r2, #0]
            anim_info->anim_start = anim_info->anim_end;
 801362c:	68a3      	ldrne	r3, [r4, #8]
            anim_info->anim_end   = new_value;
 801362e:	e9c4 3601 	strd	r3, r6, [r4, #4]
        *value_ptr = new_value;
 8013632:	6016      	str	r6, [r2, #0]
        lv_anim_del(anim_info, NULL);
 8013634:	f7fe fe80 	bl	8012338 <lv_anim_del>
        lv_anim_init(&a);
 8013638:	a801      	add	r0, sp, #4
 801363a:	f7fe fe61 	bl	8012300 <lv_anim_init>
 801363e:	4b0a      	ldr	r3, [pc, #40]	; (8013668 <lv_bar_set_value_with_anim+0x74>)
    a->start_value = start;
 8013640:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 8013642:	2264      	movs	r2, #100	; 0x64
    a->exec_cb = exec_cb;
 8013644:	9302      	str	r3, [sp, #8]
    a->end_value = end;
 8013646:	f44f 7380 	mov.w	r3, #256	; 0x100
 801364a:	4638      	mov	r0, r7
    a->var = var;
 801364c:	9401      	str	r4, [sp, #4]
    a->end_value = end;
 801364e:	930b      	str	r3, [sp, #44]	; 0x2c
    a->ready_cb = ready_cb;
 8013650:	4b06      	ldr	r3, [pc, #24]	; (801366c <lv_bar_set_value_with_anim+0x78>)
    a->current_value = start;
 8013652:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
    a->ready_cb = ready_cb;
 8013656:	9304      	str	r3, [sp, #16]
 8013658:	f00a fa12 	bl	801da80 <lv_obj_get_style_prop>
    a->time = duration;
 801365c:	900c      	str	r0, [sp, #48]	; 0x30
        lv_anim_start(&a);
 801365e:	a801      	add	r0, sp, #4
 8013660:	f7fe fe9a 	bl	8012398 <lv_anim_start>
}
 8013664:	b013      	add	sp, #76	; 0x4c
 8013666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013668:	0802600b 	.word	0x0802600b
 801366c:	08025fe1 	.word	0x08025fe1

08013670 <draw_indic>:
{
 8013670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013674:	4605      	mov	r5, r0
 8013676:	b0bd      	sub	sp, #244	; 0xf4
    lv_obj_t * obj = lv_event_get_target(e);
 8013678:	f007 fdbb 	bl	801b1f2 <lv_event_get_target>
 801367c:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801367e:	4628      	mov	r0, r5
 8013680:	f007 fe10 	bl	801b2a4 <lv_event_get_draw_ctx>
    lv_obj_get_coords(obj, &bar_coords);
 8013684:	a90a      	add	r1, sp, #40	; 0x28
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8013686:	9001      	str	r0, [sp, #4]
    lv_obj_get_coords(obj, &bar_coords);
 8013688:	4620      	mov	r0, r4
 801368a:	f009 f883 	bl	801c794 <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801368e:	2268      	movs	r2, #104	; 0x68
 8013690:	2100      	movs	r1, #0
 8013692:	4620      	mov	r0, r4
 8013694:	f00a f9f4 	bl	801da80 <lv_obj_get_style_prop>
 8013698:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801369a:	2269      	movs	r2, #105	; 0x69
 801369c:	2100      	movs	r1, #0
 801369e:	4620      	mov	r0, r4
 80136a0:	f00a f9ee 	bl	801da80 <lv_obj_get_style_prop>
    bar_coords.x2 += transf_w;
 80136a4:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
    bar_coords.x1 -= transf_w;
 80136a8:	b2ab      	uxth	r3, r5
 80136aa:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    bar_coords.y1 -= transf_h;
 80136ae:	b280      	uxth	r0, r0
    bar_coords.y2 += transf_h;
 80136b0:	f8bd 802e 	ldrh.w	r8, [sp, #46]	; 0x2e
    bar_coords.x2 += transf_w;
 80136b4:	441f      	add	r7, r3
    bar_coords.x1 -= transf_w;
 80136b6:	1aca      	subs	r2, r1, r3
 80136b8:	3301      	adds	r3, #1
    bar_coords.y2 += transf_h;
 80136ba:	4480      	add	r8, r0
    bar_coords.x2 += transf_w;
 80136bc:	b2bf      	uxth	r7, r7
    bar_coords.x1 -= transf_w;
 80136be:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    bar_coords.y1 -= transf_h;
 80136c2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
    bar_coords.y2 += transf_h;
 80136c6:	fa1f f888 	uxth.w	r8, r8
    bar_coords.x2 += transf_w;
 80136ca:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 80136ce:	441f      	add	r7, r3
    bar_coords.y1 -= transf_h;
 80136d0:	1a15      	subs	r5, r2, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80136d2:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80136d4:	1a7f      	subs	r7, r7, r1
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 80136d6:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    bar_coords.y2 += transf_h;
 80136da:	f8ad 802e 	strh.w	r8, [sp, #46]	; 0x2e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80136de:	4480      	add	r8, r0
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 80136e0:	f001 0103 	and.w	r1, r1, #3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80136e4:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80136e6:	eba8 0802 	sub.w	r8, r8, r2
    bar_coords.y1 -= transf_h;
 80136ea:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 80136ee:	2901      	cmp	r1, #1
 80136f0:	fa0f f888 	sxth.w	r8, r8
    int32_t range = bar->max_value - bar->min_value;
 80136f4:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 80136f8:	eba0 0302 	sub.w	r3, r0, r2
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 80136fc:	f040 80e8 	bne.w	80138d0 <draw_indic+0x260>
 8013700:	2a00      	cmp	r2, #0
 8013702:	f280 80e5 	bge.w	80138d0 <draw_indic+0x260>
 8013706:	2800      	cmp	r0, #0
 8013708:	f340 80e2 	ble.w	80138d0 <draw_indic+0x260>
 801370c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801370e:	1a8e      	subs	r6, r1, r2
 8013710:	4272      	negs	r2, r6
 8013712:	4172      	adcs	r2, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013714:	2100      	movs	r1, #0
    bool sym = false;
 8013716:	9200      	str	r2, [sp, #0]
 8013718:	4620      	mov	r0, r4
 801371a:	2212      	movs	r2, #18
 801371c:	9306      	str	r3, [sp, #24]
 801371e:	f00a f9af 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013722:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013724:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013726:	2100      	movs	r1, #0
 8013728:	4620      	mov	r0, r4
 801372a:	f00a f9a9 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801372e:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013730:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013732:	2100      	movs	r1, #0
 8013734:	4620      	mov	r0, r4
 8013736:	f00a f9a3 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801373a:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801373c:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801373e:	2100      	movs	r1, #0
 8013740:	4620      	mov	r0, r4
 8013742:	f00a f99d 	bl	801da80 <lv_obj_get_style_prop>
    dest->x2 = src->x2;
 8013746:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
    bar->indic_area.x1 += bg_left;
 801374a:	b2ab      	uxth	r3, r5
    dest->y1 = src->y1;
 801374c:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
    dest->y2 = src->y2;
 8013750:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 8013754:	45b8      	cmp	r8, r7
    bar->indic_area.x1 += bg_left;
 8013756:	9304      	str	r3, [sp, #16]
    bar->indic_area.x2 -= bg_right;
 8013758:	fa1f f389 	uxth.w	r3, r9
    bar->indic_area.x1 += bg_left;
 801375c:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
    bar->indic_area.x2 -= bg_right;
 8013760:	eba2 0203 	sub.w	r2, r2, r3
 8013764:	9302      	str	r3, [sp, #8]
    bar->indic_area.y1 += bg_top;
 8013766:	b2b3      	uxth	r3, r6
    bar->indic_area.x1 += bg_left;
 8013768:	fa1e f585 	uxtah	r5, lr, r5
    bar->indic_area.y1 += bg_top;
 801376c:	fa1c f686 	uxtah	r6, ip, r6
    bar->indic_area.x2 -= bg_right;
 8013770:	b292      	uxth	r2, r2
    bar->indic_area.y1 += bg_top;
 8013772:	9305      	str	r3, [sp, #20]
    bar->indic_area.y2 -= bg_bottom;
 8013774:	b283      	uxth	r3, r0
    bar->indic_area.x1 += bg_left;
 8013776:	b2ad      	uxth	r5, r5
    bar->indic_area.x2 -= bg_right;
 8013778:	8722      	strh	r2, [r4, #56]	; 0x38
    bar->indic_area.y2 -= bg_bottom;
 801377a:	eba1 0103 	sub.w	r1, r1, r3
    bar->indic_area.y1 += bg_top;
 801377e:	b2b6      	uxth	r6, r6
    bar->indic_area.y2 -= bg_bottom;
 8013780:	9303      	str	r3, [sp, #12]
 8013782:	b289      	uxth	r1, r1
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 8013784:	9b06      	ldr	r3, [sp, #24]
    bar->indic_area.x1 += bg_left;
 8013786:	86a5      	strh	r5, [r4, #52]	; 0x34
    bar->indic_area.y1 += bg_top;
 8013788:	86e6      	strh	r6, [r4, #54]	; 0x36
    bar->indic_area.y2 -= bg_bottom;
 801378a:	8761      	strh	r1, [r4, #58]	; 0x3a
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 801378c:	f300 80a2 	bgt.w	80138d4 <draw_indic+0x264>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013790:	3101      	adds	r1, #1
 8013792:	1b89      	subs	r1, r1, r6
 8013794:	b209      	sxth	r1, r1
 8013796:	2903      	cmp	r1, #3
 8013798:	dc09      	bgt.n	80137ae <draw_indic+0x13e>
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 801379a:	eb08 71d8 	add.w	r1, r8, r8, lsr #31
 801379e:	8ae2      	ldrh	r2, [r4, #22]
 80137a0:	eb02 0261 	add.w	r2, r2, r1, asr #1
 80137a4:	b292      	uxth	r2, r2
 80137a6:	1e91      	subs	r1, r2, #2
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 80137a8:	3202      	adds	r2, #2
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 80137aa:	86e1      	strh	r1, [r4, #54]	; 0x36
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 80137ac:	8762      	strh	r2, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80137ae:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    lv_coord_t anim_length = hor ? indicw : indich;
 80137b0:	45b8      	cmp	r8, r7
 80137b2:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80137b4:	f102 0201 	add.w	r2, r2, #1
        axis2 = &bar->indic_area.x2;
 80137b8:	bfda      	itte	le
 80137ba:	f104 0938 	addle.w	r9, r4, #56	; 0x38
        axis1 = &bar->indic_area.x1;
 80137be:	f104 0a34 	addle.w	sl, r4, #52	; 0x34
        axis1 = &bar->indic_area.y1;
 80137c2:	f104 0a36 	addgt.w	sl, r4, #54	; 0x36
 80137c6:	eba2 0201 	sub.w	r2, r2, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80137ca:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        axis2 = &bar->indic_area.y2;
 80137cc:	bfc8      	it	gt
 80137ce:	f104 093a 	addgt.w	r9, r4, #58	; 0x3a
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 80137d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80137d4:	b212      	sxth	r2, r2
 80137d6:	9208      	str	r2, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80137d8:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    lv_coord_t anim_length = hor ? indicw : indich;
 80137da:	bfd8      	it	le
 80137dc:	f8dd b020 	ldrle.w	fp, [sp, #32]
 80137e0:	f102 0201 	add.w	r2, r2, #1
 80137e4:	eba2 0201 	sub.w	r2, r2, r1
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 80137e8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80137ea:	b212      	sxth	r2, r2
 80137ec:	9207      	str	r2, [sp, #28]
        indic_length_calc = lv_area_get_width;
 80137ee:	bfd2      	itee	le
 80137f0:	4a53      	ldrle	r2, [pc, #332]	; (8013940 <draw_indic+0x2d0>)
        indic_length_calc = lv_area_get_height;
 80137f2:	4a54      	ldrgt	r2, [pc, #336]	; (8013944 <draw_indic+0x2d4>)
    lv_coord_t anim_length = hor ? indicw : indich;
 80137f4:	f8dd b01c 	ldrgt.w	fp, [sp, #28]
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 80137f8:	1c4d      	adds	r5, r1, #1
        indic_length_calc = lv_area_get_height;
 80137fa:	9206      	str	r2, [sp, #24]
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 80137fc:	d07b      	beq.n	80138f6 <draw_indic+0x286>
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 80137fe:	6d25      	ldr	r5, [r4, #80]	; 0x50
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 8013800:	6d62      	ldr	r2, [r4, #84]	; 0x54
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 8013802:	1a2d      	subs	r5, r5, r0
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 8013804:	1a12      	subs	r2, r2, r0
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 8013806:	fb0b f505 	mul.w	r5, fp, r5
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 801380a:	fb0b f202 	mul.w	r2, fp, r2
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 801380e:	fb95 f5f3 	sdiv	r5, r5, r3
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 8013812:	fb92 f2f3 	sdiv	r2, r2, r3
        anim_start_value_x = (((anim_start_value_end_x - anim_start_value_start_x) * bar->start_value_anim.anim_state) /
 8013816:	b22e      	sxth	r6, r5
 8013818:	b212      	sxth	r2, r2
 801381a:	1b92      	subs	r2, r2, r6
 801381c:	4351      	muls	r1, r2
 801381e:	bf48      	it	mi
 8013820:	31ff      	addmi	r1, #255	; 0xff
        anim_start_value_x += anim_start_value_start_x;
 8013822:	eb05 2521 	add.w	r5, r5, r1, asr #8
    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 8013826:	6ca1      	ldr	r1, [r4, #72]	; 0x48
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 8013828:	b22d      	sxth	r5, r5
    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 801382a:	1c4a      	adds	r2, r1, #1
 801382c:	d06a      	beq.n	8013904 <draw_indic+0x294>
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 801382e:	6c26      	ldr	r6, [r4, #64]	; 0x40
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 8013830:	6c62      	ldr	r2, [r4, #68]	; 0x44
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 8013832:	1a36      	subs	r6, r6, r0
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 8013834:	1a12      	subs	r2, r2, r0
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 8013836:	fb0b f606 	mul.w	r6, fp, r6
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 801383a:	fb0b f202 	mul.w	r2, fp, r2
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 801383e:	fb96 f6f3 	sdiv	r6, r6, r3
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 8013842:	fb92 f2f3 	sdiv	r2, r2, r3
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 8013846:	b230      	sxth	r0, r6
 8013848:	b212      	sxth	r2, r2
 801384a:	1a12      	subs	r2, r2, r0
                                                      bar->cur_value_anim.anim_state) /
 801384c:	4351      	muls	r1, r2
 801384e:	bf48      	it	mi
 8013850:	31ff      	addmi	r1, #255	; 0xff
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 8013852:	eb06 2621 	add.w	r6, r6, r1, asr #8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8013856:	2100      	movs	r1, #0
 8013858:	2216      	movs	r2, #22
 801385a:	4620      	mov	r0, r4
 801385c:	9309      	str	r3, [sp, #36]	; 0x24
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 801385e:	b236      	sxth	r6, r6
 8013860:	f00a f90e 	bl	801da80 <lv_obj_get_style_prop>
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 8013864:	45b8      	cmp	r8, r7
        *axis1 = *axis2 - anim_cur_value_x + 1;
 8013866:	fa1f fc86 	uxth.w	ip, r6
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 801386a:	9b09      	ldr	r3, [sp, #36]	; 0x24
        *axis2 -= anim_start_value_x;
 801386c:	b2a9      	uxth	r1, r5
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 801386e:	dd50      	ble.n	8013912 <draw_indic+0x2a2>
        *axis1 = *axis2 - anim_cur_value_x + 1;
 8013870:	f8b9 2000 	ldrh.w	r2, [r9]
 8013874:	3201      	adds	r2, #1
 8013876:	eba2 020c 	sub.w	r2, r2, ip
 801387a:	f8aa 2000 	strh.w	r2, [sl]
        *axis2 -= anim_start_value_x;
 801387e:	f8b9 2000 	ldrh.w	r2, [r9]
 8013882:	1a52      	subs	r2, r2, r1
 8013884:	f8a9 2000 	strh.w	r2, [r9]
    if(sym) {
 8013888:	9a00      	ldr	r2, [sp, #0]
 801388a:	2a00      	cmp	r2, #0
 801388c:	d15e      	bne.n	801394c <draw_indic+0x2dc>
    if(!sym && indic_length_calc(&bar->indic_area) <= 1) {
 801388e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8013892:	9b06      	ldr	r3, [sp, #24]
 8013894:	4798      	blx	r3
 8013896:	2801      	cmp	r0, #1
 8013898:	dc71      	bgt.n	801397e <draw_indic+0x30e>
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801389a:	9901      	ldr	r1, [sp, #4]
 801389c:	a82a      	add	r0, sp, #168	; 0xa8
 801389e:	f008 fded 	bl	801c47c <lv_obj_draw_dsc_init>
        part_draw_dsc.part = LV_PART_INDICATOR;
 80138a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80138a6:	aa2a      	add	r2, sp, #168	; 0xa8
 80138a8:	211a      	movs	r1, #26
        part_draw_dsc.part = LV_PART_INDICATOR;
 80138aa:	9337      	str	r3, [sp, #220]	; 0xdc
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80138ac:	4620      	mov	r0, r4
        part_draw_dsc.class_p = MY_CLASS;
 80138ae:	4b26      	ldr	r3, [pc, #152]	; (8013948 <draw_indic+0x2d8>)
 80138b0:	932b      	str	r3, [sp, #172]	; 0xac
        part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 80138b2:	9b00      	ldr	r3, [sp, #0]
 80138b4:	932c      	str	r3, [sp, #176]	; 0xb0
        part_draw_dsc.draw_area = &bar->indic_area;
 80138b6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80138ba:	932d      	str	r3, [sp, #180]	; 0xb4
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80138bc:	f7f0 ff0e 	bl	80046dc <lv_event_send>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80138c0:	aa2a      	add	r2, sp, #168	; 0xa8
 80138c2:	211b      	movs	r1, #27
 80138c4:	4620      	mov	r0, r4
 80138c6:	f7f0 ff09 	bl	80046dc <lv_event_send>
}
 80138ca:	b03d      	add	sp, #244	; 0xf4
 80138cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool sym = false;
 80138d0:	2200      	movs	r2, #0
 80138d2:	e71f      	b.n	8013714 <draw_indic+0xa4>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80138d4:	3201      	adds	r2, #1
 80138d6:	1b52      	subs	r2, r2, r5
    else if(!hor && lv_area_get_width(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 80138d8:	b212      	sxth	r2, r2
 80138da:	2a03      	cmp	r2, #3
 80138dc:	f73f af67 	bgt.w	80137ae <draw_indic+0x13e>
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 80138e0:	eb07 71d7 	add.w	r1, r7, r7, lsr #31
 80138e4:	8aa2      	ldrh	r2, [r4, #20]
 80138e6:	eb02 0261 	add.w	r2, r2, r1, asr #1
 80138ea:	b292      	uxth	r2, r2
 80138ec:	1e91      	subs	r1, r2, #2
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 80138ee:	3202      	adds	r2, #2
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 80138f0:	86a1      	strh	r1, [r4, #52]	; 0x34
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 80138f2:	8722      	strh	r2, [r4, #56]	; 0x38
 80138f4:	e75b      	b.n	80137ae <draw_indic+0x13e>
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 80138f6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80138f8:	1a2d      	subs	r5, r5, r0
 80138fa:	fb0b f505 	mul.w	r5, fp, r5
 80138fe:	fb95 f5f3 	sdiv	r5, r5, r3
 8013902:	e790      	b.n	8013826 <draw_indic+0x1b6>
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 8013904:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013906:	1a36      	subs	r6, r6, r0
 8013908:	fb0b f606 	mul.w	r6, fp, r6
 801390c:	fb96 f6f3 	sdiv	r6, r6, r3
 8013910:	e7a1      	b.n	8013856 <draw_indic+0x1e6>
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 8013912:	b2c0      	uxtb	r0, r0
 8013914:	2801      	cmp	r0, #1
 8013916:	d108      	bne.n	801392a <draw_indic+0x2ba>
        anim_cur_value_x = -anim_cur_value_x;
 8013918:	4652      	mov	r2, sl
 801391a:	f1cc 0c00 	rsb	ip, ip, #0
        anim_start_value_x = -anim_start_value_x;
 801391e:	4249      	negs	r1, r1
        axis1 = axis2;
 8013920:	46ca      	mov	sl, r9
        anim_cur_value_x = -anim_cur_value_x;
 8013922:	fa0f f68c 	sxth.w	r6, ip
        axis2 = tmp;
 8013926:	4691      	mov	r9, r2
        anim_start_value_x = -anim_start_value_x;
 8013928:	b20d      	sxth	r5, r1
        *axis2 = *axis1 + anim_cur_value_x;
 801392a:	f8ba 2000 	ldrh.w	r2, [sl]
 801392e:	4416      	add	r6, r2
 8013930:	f8a9 6000 	strh.w	r6, [r9]
        *axis1 += anim_start_value_x;
 8013934:	f8ba 2000 	ldrh.w	r2, [sl]
 8013938:	4415      	add	r5, r2
 801393a:	f8aa 5000 	strh.w	r5, [sl]
 801393e:	e7a3      	b.n	8013888 <draw_indic+0x218>
 8013940:	08025fad 	.word	0x08025fad
 8013944:	08025fb9 	.word	0x08025fb9
 8013948:	08029918 	.word	0x08029918
        shift = (-bar->min_value * anim_length) / range;
 801394c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        if(hor) {
 801394e:	45b8      	cmp	r8, r7
            if(*axis2 > zero)
 8013950:	f9b9 0000 	ldrsh.w	r0, [r9]
        shift = (-bar->min_value * anim_length) / range;
 8013954:	f1c2 0200 	rsb	r2, r2, #0
            zero = *axis1 + shift;
 8013958:	f9ba 1000 	ldrsh.w	r1, [sl]
        shift = (-bar->min_value * anim_length) / range;
 801395c:	fb0b f202 	mul.w	r2, fp, r2
 8013960:	fb92 f2f3 	sdiv	r2, r2, r3
            zero = *axis1 + shift;
 8013964:	b292      	uxth	r2, r2
        if(hor) {
 8013966:	f300 80ef 	bgt.w	8013b48 <draw_indic+0x4d8>
            zero = *axis1 + shift;
 801396a:	440a      	add	r2, r1
 801396c:	b212      	sxth	r2, r2
            if(*axis2 > zero)
 801396e:	4282      	cmp	r2, r0
                *axis1 = *axis2;
 8013970:	bfaa      	itet	ge
 8013972:	f8aa 0000 	strhge.w	r0, [sl]
                *axis1 = zero;
 8013976:	f8aa 2000 	strhlt.w	r2, [sl]
                *axis2 = zero;
 801397a:	f8a9 2000 	strhge.w	r2, [r9]
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 801397e:	ad1c      	add	r5, sp, #112	; 0x70
    part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 8013980:	2600      	movs	r6, #0
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 8013982:	4628      	mov	r0, r5
 8013984:	f7f4 ffda 	bl	800893c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_rect_dsc);
 8013988:	462a      	mov	r2, r5
 801398a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801398e:	4620      	mov	r0, r4
 8013990:	f008 fa7e 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8013994:	9901      	ldr	r1, [sp, #4]
 8013996:	a82a      	add	r0, sp, #168	; 0xa8
 8013998:	f008 fd70 	bl	801c47c <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_INDICATOR;
 801399c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80139a0:	aa2a      	add	r2, sp, #168	; 0xa8
 80139a2:	211a      	movs	r1, #26
    part_draw_dsc.part = LV_PART_INDICATOR;
 80139a4:	9337      	str	r3, [sp, #220]	; 0xdc
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80139a6:	4620      	mov	r0, r4
    part_draw_dsc.class_p = MY_CLASS;
 80139a8:	4b7c      	ldr	r3, [pc, #496]	; (8013b9c <draw_indic+0x52c>)
    part_draw_dsc.rect_dsc = &draw_rect_dsc;
 80139aa:	952e      	str	r5, [sp, #184]	; 0xb8
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 80139ac:	4645      	mov	r5, r8
    part_draw_dsc.class_p = MY_CLASS;
 80139ae:	932b      	str	r3, [sp, #172]	; 0xac
    part_draw_dsc.draw_area = &bar->indic_area;
 80139b0:	f104 0334 	add.w	r3, r4, #52	; 0x34
    part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 80139b4:	962c      	str	r6, [sp, #176]	; 0xb0
    part_draw_dsc.draw_area = &bar->indic_area;
 80139b6:	932d      	str	r3, [sp, #180]	; 0xb4
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80139b8:	f7f0 fe90 	bl	80046dc <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 80139bc:	4631      	mov	r1, r6
 80139be:	220b      	movs	r2, #11
 80139c0:	4620      	mov	r0, r4
 80139c2:	f00a f85d 	bl	801da80 <lv_obj_get_style_prop>
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 80139c6:	45b8      	cmp	r8, r7
    return (lv_coord_t)v.num;
 80139c8:	b200      	sxth	r0, r0
 80139ca:	bfa8      	it	ge
 80139cc:	463d      	movge	r5, r7
 80139ce:	106d      	asrs	r5, r5, #1
    if(indic_radius > short_side >> 1) indic_radius = short_side >> 1;
 80139d0:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80139d4:	4285      	cmp	r5, r0
 80139d6:	bfa8      	it	ge
 80139d8:	4605      	movge	r5, r0
 80139da:	4293      	cmp	r3, r2
 80139dc:	bfa8      	it	ge
 80139de:	4613      	movge	r3, r2
 80139e0:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
 80139e4:	105b      	asrs	r3, r3, #1
 80139e6:	4293      	cmp	r3, r2
 80139e8:	bfa8      	it	ge
 80139ea:	4613      	movge	r3, r2
    if((hor && lv_area_get_width(&bar->indic_area) > indic_radius * 2) ||
 80139ec:	45b8      	cmp	r8, r7
 80139ee:	bfd8      	it	le
 80139f0:	8f22      	ldrhle	r2, [r4, #56]	; 0x38
 80139f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80139f6:	bfcd      	iteet	gt
 80139f8:	8f62      	ldrhgt	r2, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80139fa:	3201      	addle	r2, #1
 80139fc:	8ea1      	ldrhle	r1, [r4, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80139fe:	3201      	addgt	r2, #1
 8013a00:	bfc8      	it	gt
 8013a02:	8ee1      	ldrhgt	r1, [r4, #54]	; 0x36
 8013a04:	1a52      	subs	r2, r2, r1
       (!hor && lv_area_get_height(&bar->indic_area) > indic_radius * 2)) {
 8013a06:	b212      	sxth	r2, r2
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	dd18      	ble.n	8013a3e <draw_indic+0x3ce>
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 8013a0c:	2300      	movs	r3, #0
        lv_opa_t bg_opa = draw_rect_dsc.bg_opa;
 8013a0e:	f89d a073 	ldrb.w	sl, [sp, #115]	; 0x73
        lv_opa_t bg_img_opa = draw_rect_dsc.bg_img_opa;
 8013a12:	f89d 908a 	ldrb.w	r9, [sp, #138]	; 0x8a
        lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8013a16:	f104 0234 	add.w	r2, r4, #52	; 0x34
        lv_opa_t border_opa = draw_rect_dsc.border_opa;
 8013a1a:	f89d 6092 	ldrb.w	r6, [sp, #146]	; 0x92
        lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8013a1e:	a91c      	add	r1, sp, #112	; 0x70
 8013a20:	9801      	ldr	r0, [sp, #4]
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 8013a22:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
        draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 8013a26:	f88d 308a 	strb.w	r3, [sp, #138]	; 0x8a
        draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 8013a2a:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
        lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8013a2e:	f00b fcba 	bl	801f3a6 <lv_draw_rect>
        draw_rect_dsc.bg_opa = bg_opa;
 8013a32:	f88d a073 	strb.w	sl, [sp, #115]	; 0x73
        draw_rect_dsc.bg_img_opa = bg_img_opa;
 8013a36:	f88d 908a 	strb.w	r9, [sp, #138]	; 0x8a
        draw_rect_dsc.border_opa = border_opa;
 8013a3a:	f88d 6092 	strb.w	r6, [sp, #146]	; 0x92
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 8013a3e:	9a04      	ldr	r2, [sp, #16]
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 8013a40:	a90c      	add	r1, sp, #48	; 0x30
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 8013a42:	8aa3      	ldrh	r3, [r4, #20]
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 8013a44:	a810      	add	r0, sp, #64	; 0x40
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 8013a46:	4413      	add	r3, r2
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 8013a48:	9a02      	ldr	r2, [sp, #8]
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 8013a4a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 8013a4e:	8b23      	ldrh	r3, [r4, #24]
 8013a50:	1a9b      	subs	r3, r3, r2
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 8013a52:	9a05      	ldr	r2, [sp, #20]
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 8013a54:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 8013a58:	8ae3      	ldrh	r3, [r4, #22]
 8013a5a:	4413      	add	r3, r2
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 8013a5c:	9a03      	ldr	r2, [sp, #12]
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 8013a5e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 8013a62:	8b63      	ldrh	r3, [r4, #26]
 8013a64:	1a9b      	subs	r3, r3, r2
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 8013a66:	462a      	mov	r2, r5
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 8013a68:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	f7f4 fd5f 	bl	8008530 <lv_draw_mask_radius_init>
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 8013a72:	2100      	movs	r1, #0
 8013a74:	a810      	add	r0, sp, #64	; 0x40
 8013a76:	f7f4 fbe3 	bl	8008240 <lv_draw_mask_add>
    mask_indic_max_area.x1 += bg_left;
 8013a7a:	9a04      	ldr	r2, [sp, #16]
 8013a7c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 8013a80:	2300      	movs	r3, #0
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 8013a82:	4605      	mov	r5, r0
    dest->y1 = src->y1;
 8013a84:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
    mask_indic_max_area.x1 += bg_left;
 8013a88:	4411      	add	r1, r2
    mask_indic_max_area.y1 += bg_top;
 8013a8a:	9a05      	ldr	r2, [sp, #20]
    lv_opa_t border_opa = draw_rect_dsc.border_opa;
 8013a8c:	f89d 6092 	ldrb.w	r6, [sp, #146]	; 0x92
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8013a90:	45b8      	cmp	r8, r7
    mask_indic_max_area.y1 += bg_top;
 8013a92:	4410      	add	r0, r2
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 8013a94:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
    mask_indic_max_area.x2 -= bg_right;
 8013a98:	9a02      	ldr	r2, [sp, #8]
    mask_indic_max_area.x1 += bg_left;
 8013a9a:	b289      	uxth	r1, r1
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 8013a9c:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
    mask_indic_max_area.y1 += bg_top;
 8013aa0:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 8013aa2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
    dest->y2 = src->y2;
 8013aa6:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
    mask_indic_max_area.x2 -= bg_right;
 8013aaa:	eba3 0302 	sub.w	r3, r3, r2
    mask_indic_max_area.y2 -= bg_bottom;
 8013aae:	9a03      	ldr	r2, [sp, #12]
    mask_indic_max_area.x1 += bg_left;
 8013ab0:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    mask_indic_max_area.y2 -= bg_bottom;
 8013ab4:	ebac 0202 	sub.w	r2, ip, r2
    mask_indic_max_area.x2 -= bg_right;
 8013ab8:	b29b      	uxth	r3, r3
    mask_indic_max_area.y1 += bg_top;
 8013aba:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
    mask_indic_max_area.y2 -= bg_bottom;
 8013abe:	b292      	uxth	r2, r2
    mask_indic_max_area.x2 -= bg_right;
 8013ac0:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    mask_indic_max_area.y2 -= bg_bottom;
 8013ac4:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8013ac8:	dc56      	bgt.n	8013b78 <draw_indic+0x508>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013aca:	3201      	adds	r2, #1
 8013acc:	1a12      	subs	r2, r2, r0
 8013ace:	b212      	sxth	r2, r2
 8013ad0:	2a03      	cmp	r2, #3
 8013ad2:	dc0b      	bgt.n	8013aec <draw_indic+0x47c>
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 8013ad4:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8013ad8:	8ae3      	ldrh	r3, [r4, #22]
 8013ada:	eb03 0368 	add.w	r3, r3, r8, asr #1
 8013ade:	b29b      	uxth	r3, r3
 8013ae0:	1e9a      	subs	r2, r3, #2
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 8013ae2:	3302      	adds	r3, #2
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 8013ae4:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 8013ae8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    lv_draw_mask_radius_init(&mask_indic_param, &bar->indic_area, draw_rect_dsc.radius, false);
 8013aec:	2300      	movs	r3, #0
 8013aee:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
 8013af2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8013af6:	a816      	add	r0, sp, #88	; 0x58
 8013af8:	f7f4 fd1a 	bl	8008530 <lv_draw_mask_radius_init>
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 8013afc:	2100      	movs	r1, #0
 8013afe:	a816      	add	r0, sp, #88	; 0x58
 8013b00:	f7f4 fb9e 	bl	8008240 <lv_draw_mask_add>
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &mask_indic_max_area);
 8013b04:	aa0e      	add	r2, sp, #56	; 0x38
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 8013b06:	4607      	mov	r7, r0
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &mask_indic_max_area);
 8013b08:	a91c      	add	r1, sp, #112	; 0x70
 8013b0a:	9801      	ldr	r0, [sp, #4]
 8013b0c:	f00b fc4b 	bl	801f3a6 <lv_draw_rect>
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 8013b10:	2300      	movs	r3, #0
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8013b12:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8013b16:	a91c      	add	r1, sp, #112	; 0x70
 8013b18:	9801      	ldr	r0, [sp, #4]
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 8013b1a:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 8013b1e:	f88d 308a 	strb.w	r3, [sp, #138]	; 0x8a
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 8013b22:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
    draw_rect_dsc.border_opa = border_opa;
 8013b26:	f88d 6092 	strb.w	r6, [sp, #146]	; 0x92
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8013b2a:	f00b fc3c 	bl	801f3a6 <lv_draw_rect>
    lv_draw_mask_free_param(&mask_indic_param);
 8013b2e:	a816      	add	r0, sp, #88	; 0x58
 8013b30:	f00b fbf8 	bl	801f324 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_bg_param);
 8013b34:	a810      	add	r0, sp, #64	; 0x40
 8013b36:	f00b fbf5 	bl	801f324 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_indic_id);
 8013b3a:	4638      	mov	r0, r7
 8013b3c:	f7f4 fbb6 	bl	80082ac <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bg_id);
 8013b40:	4628      	mov	r0, r5
 8013b42:	f7f4 fbb3 	bl	80082ac <lv_draw_mask_remove_id>
 8013b46:	e6bb      	b.n	80138c0 <draw_indic+0x250>
            zero = *axis2 - shift + 1;
 8013b48:	f1c2 0301 	rsb	r3, r2, #1
 8013b4c:	4403      	add	r3, r0
 8013b4e:	b21b      	sxth	r3, r3
            if(*axis1 > zero)
 8013b50:	428b      	cmp	r3, r1
                *axis2 = *axis1;
 8013b52:	bfaa      	itet	ge
 8013b54:	f8a9 1000 	strhge.w	r1, [r9]
                *axis2 = zero;
 8013b58:	f8a9 3000 	strhlt.w	r3, [r9]
                *axis1 = zero;
 8013b5c:	f8aa 3000 	strhge.w	r3, [sl]
            if(*axis2 < *axis1) {
 8013b60:	f9b9 2000 	ldrsh.w	r2, [r9]
 8013b64:	f9ba 3000 	ldrsh.w	r3, [sl]
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	f6bf af08 	bge.w	801397e <draw_indic+0x30e>
                *axis1 = *axis2;
 8013b6e:	f8aa 2000 	strh.w	r2, [sl]
                *axis2 = zero;
 8013b72:	f8a9 3000 	strh.w	r3, [r9]
 8013b76:	e702      	b.n	801397e <draw_indic+0x30e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013b78:	3301      	adds	r3, #1
 8013b7a:	1a5b      	subs	r3, r3, r1
    else if(!hor && lv_area_get_width(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8013b7c:	b21b      	sxth	r3, r3
 8013b7e:	2b03      	cmp	r3, #3
 8013b80:	dcb4      	bgt.n	8013aec <draw_indic+0x47c>
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 8013b82:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8013b86:	8aa3      	ldrh	r3, [r4, #20]
 8013b88:	eb03 0367 	add.w	r3, r3, r7, asr #1
 8013b8c:	b29b      	uxth	r3, r3
 8013b8e:	1e9a      	subs	r2, r3, #2
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 8013b90:	3302      	adds	r3, #2
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 8013b92:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 8013b96:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8013b9a:	e7a7      	b.n	8013aec <draw_indic+0x47c>
 8013b9c:	08029918 	.word	0x08029918

08013ba0 <lv_bar_event>:
{
 8013ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8013ba4:	482f      	ldr	r0, [pc, #188]	; (8013c64 <lv_bar_event+0xc4>)
{
 8013ba6:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8013ba8:	f007 fb0d 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8013bac:	2801      	cmp	r0, #1
 8013bae:	d144      	bne.n	8013c3a <lv_bar_event+0x9a>
    lv_event_code_t code = lv_event_get_code(e);
 8013bb0:	4630      	mov	r0, r6
 8013bb2:	f007 fb22 	bl	801b1fa <lv_event_get_code>
 8013bb6:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8013bb8:	4630      	mov	r0, r6
 8013bba:	f007 fb1a 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8013bbe:	2c13      	cmp	r4, #19
    lv_obj_t * obj = lv_event_get_target(e);
 8013bc0:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8013bc2:	d13c      	bne.n	8013c3e <lv_bar_event+0x9e>
        indic_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 8013bc4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8013bc8:	f008 fbf1 	bl	801c3ae <lv_obj_calculate_ext_draw_size>
 8013bcc:	4607      	mov	r7, r0
        lv_coord_t * s = lv_event_get_param(e);
 8013bce:	4630      	mov	r0, r6
 8013bd0:	f007 fb17 	bl	801b202 <lv_event_get_param>
 8013bd4:	4606      	mov	r6, r0
        *s = LV_MAX(*s, indic_size);
 8013bd6:	f9b0 0000 	ldrsh.w	r0, [r0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013bda:	2212      	movs	r2, #18
 8013bdc:	2100      	movs	r1, #0
 8013bde:	42b8      	cmp	r0, r7
 8013be0:	bfb8      	it	lt
 8013be2:	4638      	movlt	r0, r7
 8013be4:	8030      	strh	r0, [r6, #0]
 8013be6:	4628      	mov	r0, r5
 8013be8:	f009 ff4a 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013bec:	4622      	mov	r2, r4
    return (lv_coord_t)v.num;
 8013bee:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013bf2:	2100      	movs	r1, #0
 8013bf4:	4628      	mov	r0, r5
 8013bf6:	f009 ff43 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013bfa:	2210      	movs	r2, #16
    return (lv_coord_t)v.num;
 8013bfc:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013bfe:	2100      	movs	r1, #0
 8013c00:	4628      	mov	r0, r5
 8013c02:	f009 ff3d 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8013c06:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 8013c08:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8013c0a:	2100      	movs	r1, #0
 8013c0c:	4628      	mov	r0, r5
 8013c0e:	f009 ff37 	bl	801da80 <lv_obj_get_style_prop>
        lv_coord_t pad = LV_MIN4(bg_left, bg_right, bg_top, bg_bottom);
 8013c12:	4544      	cmp	r4, r8
 8013c14:	4623      	mov	r3, r4
    return (lv_coord_t)v.num;
 8013c16:	b202      	sxth	r2, r0
 8013c18:	bfa8      	it	ge
 8013c1a:	4643      	movge	r3, r8
 8013c1c:	42bb      	cmp	r3, r7
 8013c1e:	bfa8      	it	ge
 8013c20:	463b      	movge	r3, r7
 8013c22:	4293      	cmp	r3, r2
 8013c24:	bfa8      	it	ge
 8013c26:	4613      	movge	r3, r2
        if(pad < 0) {
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	da06      	bge.n	8013c3a <lv_bar_event+0x9a>
            *s = LV_MAX(*s, -pad);
 8013c2c:	425b      	negs	r3, r3
 8013c2e:	f9b6 2000 	ldrsh.w	r2, [r6]
 8013c32:	4293      	cmp	r3, r2
 8013c34:	bfb8      	it	lt
 8013c36:	4613      	movlt	r3, r2
 8013c38:	8033      	strh	r3, [r6, #0]
}
 8013c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 8013c3e:	2c01      	cmp	r4, #1
 8013c40:	d001      	beq.n	8013c46 <lv_bar_event+0xa6>
 8013c42:	2c08      	cmp	r4, #8
 8013c44:	d106      	bne.n	8013c54 <lv_bar_event+0xb4>
        lv_obj_invalidate_area(obj, &bar->indic_area);
 8013c46:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8013c4a:	4628      	mov	r0, r5
}
 8013c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_invalidate_area(obj, &bar->indic_area);
 8013c50:	f008 bfcf 	b.w	801cbf2 <lv_obj_invalidate_area>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8013c54:	2c15      	cmp	r4, #21
 8013c56:	d1f0      	bne.n	8013c3a <lv_bar_event+0x9a>
        draw_indic(e);
 8013c58:	4630      	mov	r0, r6
}
 8013c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        draw_indic(e);
 8013c5e:	f7ff bd07 	b.w	8013670 <draw_indic>
 8013c62:	bf00      	nop
 8013c64:	08029918 	.word	0x08029918

08013c68 <lv_btn_create>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_btn_create(lv_obj_t * parent)
{
 8013c68:	4601      	mov	r1, r0
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8013c6a:	4804      	ldr	r0, [pc, #16]	; (8013c7c <lv_btn_create+0x14>)
{
 8013c6c:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8013c6e:	f7f1 f8a3 	bl	8004db8 <lv_obj_class_create_obj>
 8013c72:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8013c74:	f008 f8ae 	bl	801bdd4 <lv_obj_class_init_obj>
    return obj;
}
 8013c78:	4620      	mov	r0, r4
 8013c7a:	bd10      	pop	{r4, pc}
 8013c7c:	08029934 	.word	0x08029934

08013c80 <lv_btnmatrix_set_map.part.0>:

/*=====================
 * Setter functions
 *====================*/

void lv_btnmatrix_set_map(lv_obj_t * obj, const char * map[])
 8013c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;
    btnm->row_cnt = 1;
    /*Count the buttons in the map*/
    uint16_t btn_cnt = 0;
    uint16_t i       = 0;
    while(map[i] && map[i][0] != '\0') {
 8013c84:	2700      	movs	r7, #0
    btnm->row_cnt = 1;
 8013c86:	2301      	movs	r3, #1
void lv_btnmatrix_set_map(lv_obj_t * obj, const char * map[])
 8013c88:	b093      	sub	sp, #76	; 0x4c
 8013c8a:	4604      	mov	r4, r0
 8013c8c:	460e      	mov	r6, r1
    uint16_t btn_cnt = 0;
 8013c8e:	463d      	mov	r5, r7
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8013c90:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8013ed4 <lv_btnmatrix_set_map.part.0+0x254>
    btnm->row_cnt = 1;
 8013c94:	8643      	strh	r3, [r0, #50]	; 0x32
    while(map[i] && map[i][0] != '\0') {
 8013c96:	b2bb      	uxth	r3, r7
 8013c98:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8013c9c:	b108      	cbz	r0, 8013ca2 <lv_btnmatrix_set_map.part.0+0x22>
 8013c9e:	7803      	ldrb	r3, [r0, #0]
 8013ca0:	b9a3      	cbnz	r3, 8013ccc <lv_btnmatrix_set_map.part.0+0x4c>
        }
        i++;
    }

    /*Do not allocate memory for the same amount of buttons*/
    if(btn_cnt == btnm->btn_cnt) return;
 8013ca2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013ca4:	42ab      	cmp	r3, r5
 8013ca6:	d02c      	beq.n	8013d02 <lv_btnmatrix_set_map.part.0+0x82>

    if(btnm->button_areas != NULL) {
 8013ca8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013caa:	b118      	cbz	r0, 8013cb4 <lv_btnmatrix_set_map.part.0+0x34>
        lv_mem_free(btnm->button_areas);
 8013cac:	f7fe fd1e 	bl	80126ec <lv_mem_free>
        btnm->button_areas = NULL;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	62a3      	str	r3, [r4, #40]	; 0x28
    }
    if(btnm->ctrl_bits != NULL) {
 8013cb4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013cb6:	b118      	cbz	r0, 8013cc0 <lv_btnmatrix_set_map.part.0+0x40>
        lv_mem_free(btnm->ctrl_bits);
 8013cb8:	f7fe fd18 	bl	80126ec <lv_mem_free>
        btnm->ctrl_bits = NULL;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    btnm->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 8013cc0:	00e8      	lsls	r0, r5, #3
 8013cc2:	f7fe fcf5 	bl	80126b0 <lv_mem_alloc>
 8013cc6:	62a0      	str	r0, [r4, #40]	; 0x28
    LV_ASSERT_MALLOC(btnm->button_areas);
 8013cc8:	b960      	cbnz	r0, 8013ce4 <lv_btnmatrix_set_map.part.0+0x64>
 8013cca:	e7fe      	b.n	8013cca <lv_btnmatrix_set_map.part.0+0x4a>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8013ccc:	4641      	mov	r1, r8
 8013cce:	f006 fd10 	bl	801a6f2 <strcmp>
 8013cd2:	b118      	cbz	r0, 8013cdc <lv_btnmatrix_set_map.part.0+0x5c>
            btn_cnt++;
 8013cd4:	3501      	adds	r5, #1
 8013cd6:	b2ad      	uxth	r5, r5
        i++;
 8013cd8:	3701      	adds	r7, #1
 8013cda:	e7dc      	b.n	8013c96 <lv_btnmatrix_set_map.part.0+0x16>
            btnm->row_cnt++;
 8013cdc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013cde:	3301      	adds	r3, #1
 8013ce0:	8663      	strh	r3, [r4, #50]	; 0x32
 8013ce2:	e7f9      	b.n	8013cd8 <lv_btnmatrix_set_map.part.0+0x58>
    btnm->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 8013ce4:	0068      	lsls	r0, r5, #1
 8013ce6:	f7fe fce3 	bl	80126b0 <lv_mem_alloc>
 8013cea:	62e0      	str	r0, [r4, #44]	; 0x2c
    LV_ASSERT_MALLOC(btnm->ctrl_bits);
 8013cec:	b900      	cbnz	r0, 8013cf0 <lv_btnmatrix_set_map.part.0+0x70>
 8013cee:	e7fe      	b.n	8013cee <lv_btnmatrix_set_map.part.0+0x6e>
    if(btnm->button_areas == NULL || btnm->ctrl_bits == NULL) btn_cnt = 0;
 8013cf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    memset(dst, 0x00, len);
 8013cf2:	2100      	movs	r1, #0
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	bf08      	it	eq
 8013cf8:	2500      	moveq	r5, #0
 8013cfa:	006a      	lsls	r2, r5, #1
 8013cfc:	f006 fd10 	bl	801a720 <memset>

    lv_memset_00(btnm->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);

    btnm->btn_cnt = btn_cnt;
 8013d00:	8625      	strh	r5, [r4, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8013d02:	2216      	movs	r2, #22
 8013d04:	2100      	movs	r1, #0
 8013d06:	4620      	mov	r0, r4
    btnm->map_p = map;
 8013d08:	6266      	str	r6, [r4, #36]	; 0x24
 8013d0a:	f009 feb9 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013d0e:	2212      	movs	r2, #18
    return (lv_base_dir_t)v.num;
 8013d10:	b2c3      	uxtb	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013d12:	2100      	movs	r1, #0
 8013d14:	4620      	mov	r0, r4
    for(row = 0; row < btnm->row_cnt; row++) {
 8013d16:	f04f 0900 	mov.w	r9, #0
    return (lv_base_dir_t)v.num;
 8013d1a:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013d1c:	f009 feb0 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013d20:	2210      	movs	r2, #16
 8013d22:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013d24:	900e      	str	r0, [sp, #56]	; 0x38
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013d26:	4620      	mov	r0, r4
 8013d28:	f009 feaa 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8013d2c:	2214      	movs	r2, #20
 8013d2e:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013d30:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8013d32:	4620      	mov	r0, r4
    uint32_t txt_tot_i = 0; /*Act. index in the str map*/
 8013d34:	46ca      	mov	sl, r9
 8013d36:	f009 fea3 	bl	801da80 <lv_obj_get_style_prop>
 8013d3a:	4607      	mov	r7, r0
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	fa1f fb8b 	uxth.w	fp, fp
 8013d42:	f012 f9fc 	bl	802613e <lv_obj_get_style_pad_column.constprop.0>
 8013d46:	9007      	str	r0, [sp, #28]
    lv_coord_t max_w            = lv_obj_get_content_width(obj);
 8013d48:	4620      	mov	r0, r4
 8013d4a:	f008 fd7f 	bl	801c84c <lv_obj_get_content_width>
 8013d4e:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t max_h            = lv_obj_get_content_height(obj);
 8013d50:	4620      	mov	r0, r4
 8013d52:	f008 fd91 	bl	801c878 <lv_obj_get_content_height>
    lv_coord_t max_h_no_gap = max_h - (prow * (btnm->row_cnt - 1));
 8013d56:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    for(row = 0; row < btnm->row_cnt; row++) {
 8013d58:	f8cd 9014 	str.w	r9, [sp, #20]
    lv_coord_t max_h_no_gap = max_h - (prow * (btnm->row_cnt - 1));
 8013d5c:	3b01      	subs	r3, #1
 8013d5e:	fb13 f307 	smulbb	r3, r3, r7
 8013d62:	1ac0      	subs	r0, r0, r3
 8013d64:	b203      	sxth	r3, r0
 8013d66:	930a      	str	r3, [sp, #40]	; 0x28
 8013d68:	b2bb      	uxth	r3, r7
 8013d6a:	930d      	str	r3, [sp, #52]	; 0x34
    for(row = 0; row < btnm->row_cnt; row++) {
 8013d6c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013d6e:	9a05      	ldr	r2, [sp, #20]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d308      	bcc.n	8013d86 <lv_btnmatrix_set_map.part.0+0x106>
    lv_obj_refresh_ext_draw_size(obj);
 8013d74:	4620      	mov	r0, r4
 8013d76:	f008 fb8f 	bl	801c498 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8013d7a:	4620      	mov	r0, r4
}
 8013d7c:	b013      	add	sp, #76	; 0x4c
 8013d7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(obj);
 8013d82:	f008 bf57 	b.w	801cc34 <lv_obj_invalidate>
 8013d86:	2700      	movs	r7, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
 8013d88:	9702      	str	r7, [sp, #8]
 8013d8a:	e016      	b.n	8013dba <lv_btnmatrix_set_map.part.0+0x13a>
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8013d8c:	4951      	ldr	r1, [pc, #324]	; (8013ed4 <lv_btnmatrix_set_map.part.0+0x254>)
 8013d8e:	f006 fcb0 	bl	801a6f2 <strcmp>
 8013d92:	b1c8      	cbz	r0, 8013dc8 <lv_btnmatrix_set_map.part.0+0x148>
 8013d94:	f8d8 3000 	ldr.w	r3, [r8]
 8013d98:	1c7a      	adds	r2, r7, #1
 8013d9a:	781b      	ldrb	r3, [r3, #0]
 8013d9c:	b1a3      	cbz	r3, 8013dc8 <lv_btnmatrix_set_map.part.0+0x148>
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 8013d9e:	4455      	add	r5, sl
 8013da0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013da2:	9902      	ldr	r1, [sp, #8]
 8013da4:	4617      	mov	r7, r2
 * @param ctrl_bits least significant 3 bits used (1..7 valid values)
 * @return the width of the button in units
 */
static uint8_t get_button_width(lv_btnmatrix_ctrl_t ctrl_bits)
{
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 8013da6:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 8013daa:	f003 0307 	and.w	r3, r3, #7
 8013dae:	2b01      	cmp	r3, #1
 8013db0:	bf2c      	ite	cs
 8013db2:	18c9      	addcs	r1, r1, r3
 8013db4:	3101      	addcc	r1, #1
 8013db6:	b28b      	uxth	r3, r1
 8013db8:	9302      	str	r3, [sp, #8]
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8013dba:	b2bd      	uxth	r5, r7
 8013dbc:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8013dc0:	eb06 0885 	add.w	r8, r6, r5, lsl #2
 8013dc4:	2800      	cmp	r0, #0
 8013dc6:	d1e1      	bne.n	8013d8c <lv_btnmatrix_set_map.part.0+0x10c>
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8013dc8:	9a05      	ldr	r2, [sp, #20]
 8013dca:	b2bb      	uxth	r3, r7
 8013dcc:	3201      	adds	r2, #1
 8013dce:	9205      	str	r2, [sp, #20]
        if(btn_cnt == 0) {
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d076      	beq.n	8013ec2 <lv_btnmatrix_set_map.part.0+0x242>
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8013dd4:	990a      	ldr	r1, [sp, #40]	; 0x28
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 8013dd6:	3b01      	subs	r3, #1
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / btnm->row_cnt + row * prow;
 8013dd8:	8e60      	ldrh	r0, [r4, #50]	; 0x32
        if(max_w_no_gap < 0) max_w_no_gap = 0;
 8013dda:	2700      	movs	r7, #0
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8013ddc:	4449      	add	r1, r9
 8013dde:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8013de2:	fbb1 f1f0 	udiv	r1, r1, r0
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / btnm->row_cnt + row * prow;
 8013de6:	fbb9 f2f0 	udiv	r2, r9, r0
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8013dea:	f10b 30ff 	add.w	r0, fp, #4294967295
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / btnm->row_cnt + row * prow;
 8013dee:	445a      	add	r2, fp
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8013df0:	4401      	add	r1, r0
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / btnm->row_cnt + row * prow;
 8013df2:	b212      	sxth	r2, r2
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8013df4:	b209      	sxth	r1, r1
 8013df6:	910c      	str	r1, [sp, #48]	; 0x30
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 8013df8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8013dfc:	9106      	str	r1, [sp, #24]
 8013dfe:	9907      	ldr	r1, [sp, #28]
 8013e00:	fb13 f301 	smulbb	r3, r3, r1
 8013e04:	9906      	ldr	r1, [sp, #24]
 8013e06:	1acb      	subs	r3, r1, r3
        if(max_w_no_gap < 0) max_w_no_gap = 0;
 8013e08:	b21b      	sxth	r3, r3
 8013e0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013e0e:	9308      	str	r3, [sp, #32]
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8013e10:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013e14:	9310      	str	r3, [sp, #64]	; 0x40
            btn_x1 += pleft;
 8013e16:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
        uint32_t row_unit_cnt = 0;  /*The current unit position in the row*/
 8013e1a:	e9cd 7703 	strd	r7, r7, [sp, #12]
            btn_x1 += pleft;
 8013e1e:	9309      	str	r3, [sp, #36]	; 0x24
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8013e20:	9903      	ldr	r1, [sp, #12]
 8013e22:	9b08      	ldr	r3, [sp, #32]
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8013e24:	9803      	ldr	r0, [sp, #12]
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8013e26:	434b      	muls	r3, r1
 8013e28:	9902      	ldr	r1, [sp, #8]
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 8013e2a:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8013e2e:	9211      	str	r2, [sp, #68]	; 0x44
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8013e30:	fbb3 f3f1 	udiv	r3, r3, r1
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 8013e34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8013e36:	443b      	add	r3, r7
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 8013e38:	f831 1008 	ldrh.w	r1, [r1, r8]
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8013e3c:	b29b      	uxth	r3, r3
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 8013e3e:	f001 0107 	and.w	r1, r1, #7
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8013e42:	2901      	cmp	r1, #1
 8013e44:	bf2c      	ite	cs
 8013e46:	1840      	addcs	r0, r0, r1
 8013e48:	3001      	addcc	r0, #1
 8013e4a:	9908      	ldr	r1, [sp, #32]
 8013e4c:	9003      	str	r0, [sp, #12]
 8013e4e:	4348      	muls	r0, r1
 8013e50:	9902      	ldr	r1, [sp, #8]
 8013e52:	fbb0 f0f1 	udiv	r0, r0, r1
 8013e56:	1e79      	subs	r1, r7, #1
 8013e58:	4408      	add	r0, r1
            if(base_dir == LV_BASE_DIR_RTL) {
 8013e5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e5c:	2901      	cmp	r1, #1
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8013e5e:	b280      	uxth	r0, r0
                btn_x1 = max_w - btn_x1;
 8013e60:	bf0d      	iteet	eq
 8013e62:	9906      	ldreq	r1, [sp, #24]
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8013e64:	b219      	sxthne	r1, r3
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8013e66:	b203      	sxthne	r3, r0
                btn_x1 = max_w - btn_x1;
 8013e68:	1a08      	subeq	r0, r1, r0
 8013e6a:	bf02      	ittt	eq
 8013e6c:	b201      	sxtheq	r1, r0
                btn_x2 = max_w - btn_x2;
 8013e6e:	9806      	ldreq	r0, [sp, #24]
 8013e70:	1ac3      	subeq	r3, r0, r3
            btn_x1 += pleft;
 8013e72:	9809      	ldr	r0, [sp, #36]	; 0x24
                btn_x2 = max_w - btn_x2;
 8013e74:	bf08      	it	eq
 8013e76:	b21b      	sxtheq	r3, r3
            btn_x1 += pleft;
 8013e78:	4401      	add	r1, r0
            btn_x2 += pleft;
 8013e7a:	4403      	add	r3, r0
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 8013e7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013e7e:	b209      	sxth	r1, r1
 8013e80:	f8cd c000 	str.w	ip, [sp]
 8013e84:	b21b      	sxth	r3, r3
 8013e86:	eb00 0088 	add.w	r0, r0, r8, lsl #2
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8013e8a:	f108 0802 	add.w	r8, r8, #2
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 8013e8e:	f010 f9b1 	bl	80241f4 <lv_area_set>
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8013e92:	9b04      	ldr	r3, [sp, #16]
 8013e94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013e96:	3301      	adds	r3, #1
 8013e98:	9304      	str	r3, [sp, #16]
 8013e9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e9c:	441f      	add	r7, r3
 8013e9e:	9b04      	ldr	r3, [sp, #16]
 8013ea0:	42ab      	cmp	r3, r5
 8013ea2:	b2bf      	uxth	r7, r7
 8013ea4:	d3bc      	bcc.n	8013e20 <lv_btnmatrix_set_map.part.0+0x1a0>
 8013ea6:	2d00      	cmp	r5, #0
 8013ea8:	f105 33ff 	add.w	r3, r5, #4294967295
 8013eac:	f10a 0201 	add.w	r2, sl, #1
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 8013eb0:	f105 0501 	add.w	r5, r5, #1
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8013eb4:	bf08      	it	eq
 8013eb6:	2300      	moveq	r3, #0
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 8013eb8:	eb06 0685 	add.w	r6, r6, r5, lsl #2
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8013ebc:	eb03 0a02 	add.w	sl, r3, r2
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 8013ec0:	e000      	b.n	8013ec4 <lv_btnmatrix_set_map.part.0+0x244>
            map_row = &map_row[btn_cnt + 1];       /*Set the map to the next row*/
 8013ec2:	3604      	adds	r6, #4
    for(row = 0; row < btnm->row_cnt; row++) {
 8013ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ec6:	4499      	add	r9, r3
 8013ec8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013eca:	445b      	add	r3, fp
 8013ecc:	fa1f fb83 	uxth.w	fp, r3
 8013ed0:	e74c      	b.n	8013d6c <lv_btnmatrix_set_map.part.0+0xec>
 8013ed2:	bf00      	nop
 8013ed4:	0802a015 	.word	0x0802a015

08013ed8 <lv_btnmatrix_constructor>:
    btnm->btn_id_sel     = LV_BTNMATRIX_BTN_NONE;
 8013ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    btnm->map_p          = NULL;
 8013edc:	2300      	movs	r3, #0
{
 8013ede:	4608      	mov	r0, r1
    btnm->btn_id_sel     = LV_BTNMATRIX_BTN_NONE;
 8013ee0:	868a      	strh	r2, [r1, #52]	; 0x34
    btnm->one_check      = 0;
 8013ee2:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
 8013ee6:	f363 0200 	bfi	r2, r3, #0, #1
    btnm->button_areas   = NULL;
 8013eea:	e9c1 3309 	strd	r3, r3, [r1, #36]	; 0x24
    btnm->btn_cnt        = 0;
 8013eee:	e9c1 330b 	strd	r3, r3, [r1, #44]	; 0x2c
    btnm->one_check      = 0;
 8013ef2:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    if(map == NULL) return;
 8013ef6:	4901      	ldr	r1, [pc, #4]	; (8013efc <lv_btnmatrix_constructor+0x24>)
 8013ef8:	f7ff bec2 	b.w	8013c80 <lv_btnmatrix_set_map.part.0>
 8013efc:	2400010c 	.word	0x2400010c

08013f00 <draw_main>:
{
 8013f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f04:	b0d1      	sub	sp, #324	; 0x144
 8013f06:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8013f08:	f007 f973 	bl	801b1f2 <lv_event_get_target>
    if(btnm->btn_cnt == 0) return;
 8013f0c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    lv_obj_t * obj = lv_event_get_target(e);
 8013f0e:	4604      	mov	r4, r0
    if(btnm->btn_cnt == 0) return;
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d068      	beq.n	8013fe6 <draw_main+0xe6>
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8013f14:	4628      	mov	r0, r5
        btn_area.x1 += area_obj.x1;
 8013f16:	ad10      	add	r5, sp, #64	; 0x40
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8013f18:	f007 f9c4 	bl	801b2a4 <lv_event_get_draw_ctx>
    obj->skip_trans = 1;
 8013f1c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    lv_obj_get_coords(obj, &area_obj);
 8013f20:	a90e      	add	r1, sp, #56	; 0x38
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8013f22:	9005      	str	r0, [sp, #20]
    obj->skip_trans = 1;
 8013f24:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_get_coords(obj, &area_obj);
 8013f28:	4620      	mov	r0, r4
    obj->skip_trans = 1;
 8013f2a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_obj_get_coords(obj, &area_obj);
 8013f2e:	f008 fc31 	bl	801c794 <lv_obj_get_coords>
    obj->state = LV_STATE_DEFAULT;
 8013f32:	6a22      	ldr	r2, [r4, #32]
 8013f34:	4bbd      	ldr	r3, [pc, #756]	; (801422c <draw_main+0x32c>)
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 8013f36:	a830      	add	r0, sp, #192	; 0xc0
    lv_state_t state_ori = obj->state;
 8013f38:	f8b4 a020 	ldrh.w	sl, [r4, #32]
    obj->state = LV_STATE_DEFAULT;
 8013f3c:	4013      	ands	r3, r2
 8013f3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013f42:	6223      	str	r3, [r4, #32]
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 8013f44:	f7f4 fcfa 	bl	800893c <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&draw_label_dsc_def);
 8013f48:	a81a      	add	r0, sp, #104	; 0x68
 8013f4a:	f7f3 fead 	bl	8007ca8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_def);
 8013f4e:	aa30      	add	r2, sp, #192	; 0xc0
 8013f50:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8013f54:	4620      	mov	r0, r4
 8013f56:	f007 ff9b 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_def);
 8013f5a:	aa1a      	add	r2, sp, #104	; 0x68
 8013f5c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8013f60:	4620      	mov	r0, r4
 8013f62:	f008 f8e4 	bl	801c12e <lv_obj_init_draw_label_dsc>
    obj->skip_trans = 0;
 8013f66:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8013f6a:	2210      	movs	r2, #16
 8013f6c:	2100      	movs	r1, #0
 8013f6e:	f36f 0382 	bfc	r3, #2, #1
 8013f72:	4620      	mov	r0, r4
    obj->state = state_ori;
 8013f74:	f8a4 a020 	strh.w	sl, [r4, #32]
    obj->skip_trans = 0;
 8013f78:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8013f7c:	f009 fd80 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8013f80:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 8013f82:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8013f84:	2100      	movs	r1, #0
 8013f86:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8013f88:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8013f8a:	f009 fd79 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8013f8e:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013f90:	2212      	movs	r2, #18
 8013f92:	2100      	movs	r1, #0
 8013f94:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8013f96:	930a      	str	r3, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013f98:	f009 fd72 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8013f9c:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013f9e:	2213      	movs	r2, #19
 8013fa0:	2100      	movs	r1, #0
 8013fa2:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8013fa4:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013fa6:	f009 fd6b 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8013faa:	b203      	sxth	r3, r0
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8013fac:	9905      	ldr	r1, [sp, #20]
 8013fae:	a83e      	add	r0, sp, #248	; 0xf8
 8013fb0:	9308      	str	r3, [sp, #32]
 8013fb2:	f008 fa63 	bl	801c47c <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 8013fb6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
    part_draw_dsc.rect_dsc = &draw_rect_dsc_act;
 8013fba:	aa22      	add	r2, sp, #136	; 0x88
    part_draw_dsc.part = LV_PART_ITEMS;
 8013fbc:	934b      	str	r3, [sp, #300]	; 0x12c
    part_draw_dsc.class_p = MY_CLASS;
 8013fbe:	4b9c      	ldr	r3, [pc, #624]	; (8014230 <draw_main+0x330>)
    part_draw_dsc.rect_dsc = &draw_rect_dsc_act;
 8013fc0:	9242      	str	r2, [sp, #264]	; 0x108
    part_draw_dsc.label_dsc = &draw_label_dsc_act;
 8013fc2:	aa12      	add	r2, sp, #72	; 0x48
    part_draw_dsc.class_p = MY_CLASS;
 8013fc4:	933f      	str	r3, [sp, #252]	; 0xfc
    part_draw_dsc.type = LV_BTNMATRIX_DRAW_PART_BTN;
 8013fc6:	2300      	movs	r3, #0
    part_draw_dsc.label_dsc = &draw_label_dsc_act;
 8013fc8:	9243      	str	r2, [sp, #268]	; 0x10c
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 8013fca:	4698      	mov	r8, r3
    uint16_t txt_i = 0;
 8013fcc:	469b      	mov	fp, r3
    part_draw_dsc.type = LV_BTNMATRIX_DRAW_PART_BTN;
 8013fce:	9340      	str	r3, [sp, #256]	; 0x100
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 8013fd0:	fa1f f788 	uxth.w	r7, r8
 8013fd4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013fd6:	42bb      	cmp	r3, r7
 8013fd8:	d808      	bhi.n	8013fec <draw_main+0xec>
    obj->skip_trans = 0;
 8013fda:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8013fde:	f36f 0382 	bfc	r3, #2, #1
 8013fe2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 8013fe6:	b051      	add	sp, #324	; 0x144
 8013fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 8013fec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8013ff0:	4990      	ldr	r1, [pc, #576]	; (8014234 <draw_main+0x334>)
 8013ff2:	9307      	str	r3, [sp, #28]
 8013ff4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ff6:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013ffa:	f006 fb7a 	bl	801a6f2 <strcmp>
            txt_i++;
 8013ffe:	f10b 0301 	add.w	r3, fp, #1
 8014002:	fa1f fb83 	uxth.w	fp, r3
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 8014006:	2800      	cmp	r0, #0
 8014008:	d0f0      	beq.n	8013fec <draw_main+0xec>
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 801400a:	fa1f f988 	uxth.w	r9, r8
 801400e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return w != 0 ? w : 1;
}

static bool button_is_hidden(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8014010:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 8014014:	06de      	lsls	r6, r3, #27
 8014016:	f100 8106 	bmi.w	8014226 <draw_main+0x326>
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 801401a:	0658      	lsls	r0, r3, #25
        if(button_get_checked(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
 801401c:	f3c3 2600 	ubfx	r6, r3, #8, #1
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 8014020:	f140 810a 	bpl.w	8014238 <draw_main+0x338>
 8014024:	f046 0680 	orr.w	r6, r6, #128	; 0x80
        lv_area_copy(&btn_area, &btnm->button_areas[btn_i]);
 8014028:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801402a:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
        btn_area.x1 += area_obj.x1;
 801402e:	f833 3039 	ldrh.w	r3, [r3, r9, lsl #3]
    dest->y1 = src->y1;
 8014032:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
    dest->x2 = src->x2;
 8014036:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
    dest->y2 = src->y2;
 801403a:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 801403e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8014042:	4413      	add	r3, r2
        btn_area.x2 += area_obj.x1;
 8014044:	443a      	add	r2, r7
        btn_area.x1 += area_obj.x1;
 8014046:	802b      	strh	r3, [r5, #0]
        btn_area.y1 += area_obj.y1;
 8014048:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
        btn_area.x2 += area_obj.x1;
 801404c:	80aa      	strh	r2, [r5, #4]
        btn_area.y1 += area_obj.y1;
 801404e:	4419      	add	r1, r3
        btn_area.y2 += area_obj.y1;
 8014050:	4403      	add	r3, r0
        btn_area.y1 += area_obj.y1;
 8014052:	8069      	strh	r1, [r5, #2]
        btn_area.y2 += area_obj.y1;
 8014054:	80eb      	strh	r3, [r5, #6]
        if(btn_state == LV_STATE_DEFAULT) {
 8014056:	2e00      	cmp	r6, #0
 8014058:	f040 8107 	bne.w	801426a <draw_main+0x36a>
    return memcpy(dst, src, len);
 801405c:	2238      	movs	r2, #56	; 0x38
 801405e:	a930      	add	r1, sp, #192	; 0xc0
 8014060:	a822      	add	r0, sp, #136	; 0x88
 8014062:	f006 fb52 	bl	801a70a <memcpy>
 8014066:	2220      	movs	r2, #32
 8014068:	a91a      	add	r1, sp, #104	; 0x68
 801406a:	a812      	add	r0, sp, #72	; 0x48
 801406c:	f006 fb4d 	bl	801a70a <memcpy>
        bool recolor = button_is_recolor(btnm->ctrl_bits[btn_i]);
 8014070:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8014072:	4620      	mov	r0, r4
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 8014074:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECKED) ? true : false;
}

static bool button_is_recolor(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_RECOLOR) ? true : false;
 8014078:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
        part_draw_dsc.draw_area = &btn_area;
 801407c:	9541      	str	r5, [sp, #260]	; 0x104
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 801407e:	0511      	lsls	r1, r2, #20
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8014080:	aa3e      	add	r2, sp, #248	; 0xf8
 8014082:	f04f 011a 	mov.w	r1, #26
        part_draw_dsc.id = btn_i;
 8014086:	f8cd 9130 	str.w	r9, [sp, #304]	; 0x130
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 801408a:	bf4c      	ite	mi
 801408c:	f043 0301 	orrmi.w	r3, r3, #1
        else draw_label_dsc_act.flag &= ~LV_TEXT_FLAG_RECOLOR;
 8014090:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
 8014094:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8014098:	f7f0 fb20 	bl	80046dc <lv_event_send>
        if(draw_rect_dsc_act.border_side & LV_BORDER_SIDE_INTERNAL) {
 801409c:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
 80140a0:	f3c3 0244 	ubfx	r2, r3, #1, #5
 80140a4:	2a0f      	cmp	r2, #15
 80140a6:	d948      	bls.n	801413a <draw_main+0x23a>
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 80140a8:	220f      	movs	r2, #15
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 80140aa:	9909      	ldr	r1, [sp, #36]	; 0x24
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 80140ac:	9808      	ldr	r0, [sp, #32]
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 80140ae:	f362 0345 	bfi	r3, r2, #1, #5
 80140b2:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 80140b6:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80140ba:	f9b5 3000 	ldrsh.w	r3, [r5]
 80140be:	440a      	add	r2, r1
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 80140c0:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 80140c4:	4293      	cmp	r3, r2
 80140c6:	bf14      	ite	ne
 80140c8:	230f      	movne	r3, #15
 80140ca:	230b      	moveq	r3, #11
 80140cc:	f89d 20ab 	ldrb.w	r2, [sp, #171]	; 0xab
 80140d0:	f363 0245 	bfi	r2, r3, #1, #5
 80140d4:	f88d 20ab 	strb.w	r2, [sp, #171]	; 0xab
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 80140d8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80140dc:	1a12      	subs	r2, r2, r0
 80140de:	4291      	cmp	r1, r2
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 80140e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 80140e2:	bf01      	itttt	eq
 80140e4:	f89d 20ab 	ldrbeq.w	r2, [sp, #171]	; 0xab
 80140e8:	f003 0317 	andeq.w	r3, r3, #23
 80140ec:	f363 0245 	bfieq	r2, r3, #1, #5
 80140f0:	f88d 20ab 	strbeq.w	r2, [sp, #171]	; 0xab
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 80140f4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80140f8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80140fc:	440b      	add	r3, r1
 80140fe:	429a      	cmp	r2, r3
 8014100:	d109      	bne.n	8014116 <draw_main+0x216>
 8014102:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
 8014106:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801410a:	f002 021d 	and.w	r2, r2, #29
 801410e:	f362 0345 	bfi	r3, r2, #1, #5
 8014112:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
            if(btn_area.y2 == obj->coords.y2 - pbottom) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_BOTTOM;
 8014116:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801411a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801411c:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8014120:	1a5b      	subs	r3, r3, r1
 8014122:	429a      	cmp	r2, r3
 8014124:	d109      	bne.n	801413a <draw_main+0x23a>
 8014126:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
 801412a:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801412e:	f002 021e 	and.w	r2, r2, #30
 8014132:	f362 0345 	bfi	r3, r2, #1, #5
 8014136:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801413a:	88ef      	ldrh	r7, [r5, #6]
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 801413c:	f016 0620 	ands.w	r6, r6, #32
 8014140:	886b      	ldrh	r3, [r5, #2]
 8014142:	f107 0701 	add.w	r7, r7, #1
 8014146:	9306      	str	r3, [sp, #24]
 8014148:	b2bf      	uxth	r7, r7
 801414a:	d008      	beq.n	801415e <draw_main+0x25e>
 801414c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801414e:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8014152:	055a      	lsls	r2, r3, #21
            btn_area.y1 -= btn_height;
 8014154:	bf42      	ittt	mi
 8014156:	9b06      	ldrmi	r3, [sp, #24]
 8014158:	ebc7 0343 	rsbmi	r3, r7, r3, lsl #1
 801415c:	806b      	strhmi	r3, [r5, #2]
        lv_draw_rect(draw_ctx, &draw_rect_dsc_act, &btn_area);
 801415e:	462a      	mov	r2, r5
 8014160:	a922      	add	r1, sp, #136	; 0x88
 8014162:	9805      	ldr	r0, [sp, #20]
 8014164:	f00b f91f 	bl	801f3a6 <lv_draw_rect>
        const char * txt = btnm->map_p[txt_i];
 8014168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801416a:	9a07      	ldr	r2, [sp, #28]
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 801416c:	a80d      	add	r0, sp, #52	; 0x34
        const char * txt = btnm->map_p[txt_i];
 801416e:	5899      	ldr	r1, [r3, r2]
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 8014170:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014174:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8014178:	9302      	str	r3, [sp, #8]
 801417a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801417e:	9107      	str	r1, [sp, #28]
 8014180:	3301      	adds	r3, #1
 8014182:	1a9b      	subs	r3, r3, r2
 8014184:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014186:	b21b      	sxth	r3, r3
 8014188:	9301      	str	r3, [sp, #4]
 801418a:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801418e:	9300      	str	r3, [sp, #0]
 8014190:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8014194:	f011 fb50 	bl	8025838 <lv_txt_get_size>
 8014198:	88ab      	ldrh	r3, [r5, #4]
 801419a:	f8b5 c000 	ldrh.w	ip, [r5]
 801419e:	3301      	adds	r3, #1
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 80141a0:	f9bd e034 	ldrsh.w	lr, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80141a4:	886a      	ldrh	r2, [r5, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80141a6:	eba3 030c 	sub.w	r3, r3, ip
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 80141aa:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 80141ae:	9907      	ldr	r1, [sp, #28]
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 80141b0:	b21b      	sxth	r3, r3
 80141b2:	eba3 030e 	sub.w	r3, r3, lr
 80141b6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80141ba:	eb0c 0c63 	add.w	ip, ip, r3, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80141be:	88eb      	ldrh	r3, [r5, #6]
 80141c0:	3301      	adds	r3, #1
 80141c2:	fa1f fc8c 	uxth.w	ip, ip
 80141c6:	1a9b      	subs	r3, r3, r2
 80141c8:	f8a5 c000 	strh.w	ip, [r5]
        btn_area.x2 = btn_area.x1 + txt_size.x;
 80141cc:	44f4      	add	ip, lr
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 80141ce:	b21b      	sxth	r3, r3
        btn_area.x2 = btn_area.x1 + txt_size.x;
 80141d0:	f8a5 c004 	strh.w	ip, [r5, #4]
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 80141d4:	1a1b      	subs	r3, r3, r0
 80141d6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80141da:	eb02 0263 	add.w	r2, r2, r3, asr #1
 80141de:	b292      	uxth	r2, r2
        btn_area.y2 = btn_area.y1 + txt_size.y;
 80141e0:	4410      	add	r0, r2
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 80141e2:	806a      	strh	r2, [r5, #2]
        btn_area.y2 = btn_area.y1 + txt_size.y;
 80141e4:	b280      	uxth	r0, r0
 80141e6:	80e8      	strh	r0, [r5, #6]
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 80141e8:	b186      	cbz	r6, 801420c <draw_main+0x30c>
 80141ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80141ec:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 80141f0:	055b      	lsls	r3, r3, #21
 80141f2:	d50b      	bpl.n	801420c <draw_main+0x30c>
 80141f4:	9b06      	ldr	r3, [sp, #24]
 80141f6:	1aff      	subs	r7, r7, r3
            btn_area.y1 -= btn_height / 2;
 80141f8:	f3c7 33c0 	ubfx	r3, r7, #15, #1
 80141fc:	fa03 f787 	sxtah	r7, r3, r7
 8014200:	f3c7 074f 	ubfx	r7, r7, #1, #16
 8014204:	1bd2      	subs	r2, r2, r7
            btn_area.y2 -= btn_height / 2;
 8014206:	1bc0      	subs	r0, r0, r7
            btn_area.y1 -= btn_height / 2;
 8014208:	806a      	strh	r2, [r5, #2]
            btn_area.y2 -= btn_height / 2;
 801420a:	80e8      	strh	r0, [r5, #6]
        lv_draw_label(draw_ctx, &draw_label_dsc_act, &btn_area, txt, NULL);
 801420c:	2300      	movs	r3, #0
 801420e:	462a      	mov	r2, r5
 8014210:	9805      	ldr	r0, [sp, #20]
 8014212:	9300      	str	r3, [sp, #0]
 8014214:	460b      	mov	r3, r1
 8014216:	a912      	add	r1, sp, #72	; 0x48
 8014218:	f7f3 fd5e 	bl	8007cd8 <lv_draw_label>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801421c:	aa3e      	add	r2, sp, #248	; 0xf8
 801421e:	211b      	movs	r1, #27
 8014220:	4620      	mov	r0, r4
 8014222:	f7f0 fa5b 	bl	80046dc <lv_event_send>
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 8014226:	f108 0801 	add.w	r8, r8, #1
 801422a:	e6d1      	b.n	8013fd0 <draw_main+0xd0>
 801422c:	fffb0000 	.word	0xfffb0000
 8014230:	08029950 	.word	0x08029950
 8014234:	0802a015 	.word	0x0802a015
        else if(btn_i == btnm->btn_id_sel) {
 8014238:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801423a:	42bb      	cmp	r3, r7
 801423c:	f47f aef4 	bne.w	8014028 <draw_main+0x128>
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 8014240:	f01a 0f20 	tst.w	sl, #32
 8014244:	bf18      	it	ne
 8014246:	f046 0620 	orrne.w	r6, r6, #32
            if(state_ori & LV_STATE_FOCUSED) btn_state |= LV_STATE_FOCUSED;
 801424a:	f01a 0f02 	tst.w	sl, #2
 801424e:	bf18      	it	ne
 8014250:	f046 0602 	orrne.w	r6, r6, #2
            if(state_ori & LV_STATE_FOCUS_KEY) btn_state |= LV_STATE_FOCUS_KEY;
 8014254:	f01a 0f04 	tst.w	sl, #4
 8014258:	bf18      	it	ne
 801425a:	f046 0604 	orrne.w	r6, r6, #4
            if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
 801425e:	f01a 0f08 	tst.w	sl, #8
 8014262:	bf18      	it	ne
 8014264:	f046 0608 	orrne.w	r6, r6, #8
 8014268:	e6de      	b.n	8014028 <draw_main+0x128>
            obj->skip_trans = 1;
 801426a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 801426e:	a822      	add	r0, sp, #136	; 0x88
            obj->state = btn_state;
 8014270:	8426      	strh	r6, [r4, #32]
            obj->skip_trans = 1;
 8014272:	f043 0304 	orr.w	r3, r3, #4
 8014276:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 801427a:	f7f4 fb5f 	bl	800893c <lv_draw_rect_dsc_init>
            lv_draw_label_dsc_init(&draw_label_dsc_act);
 801427e:	a812      	add	r0, sp, #72	; 0x48
 8014280:	f7f3 fd12 	bl	8007ca8 <lv_draw_label_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_act);
 8014284:	aa22      	add	r2, sp, #136	; 0x88
 8014286:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801428a:	4620      	mov	r0, r4
 801428c:	f007 fe00 	bl	801be90 <lv_obj_init_draw_rect_dsc>
            lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_act);
 8014290:	aa12      	add	r2, sp, #72	; 0x48
 8014292:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8014296:	4620      	mov	r0, r4
 8014298:	f007 ff49 	bl	801c12e <lv_obj_init_draw_label_dsc>
            obj->skip_trans = 0;
 801429c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
            obj->state = state_ori;
 80142a0:	f8a4 a020 	strh.w	sl, [r4, #32]
            obj->skip_trans = 0;
 80142a4:	f36f 0382 	bfc	r3, #2, #1
 80142a8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80142ac:	e6e0      	b.n	8014070 <draw_main+0x170>
 80142ae:	bf00      	nop

080142b0 <lv_btnmatrix_create>:
{
 80142b0:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80142b2:	4804      	ldr	r0, [pc, #16]	; (80142c4 <lv_btnmatrix_create+0x14>)
{
 80142b4:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80142b6:	f7f0 fd7f 	bl	8004db8 <lv_obj_class_create_obj>
 80142ba:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 80142bc:	f007 fd8a 	bl	801bdd4 <lv_obj_class_init_obj>
}
 80142c0:	4620      	mov	r0, r4
 80142c2:	bd10      	pop	{r4, pc}
 80142c4:	08029950 	.word	0x08029950

080142c8 <lv_btnmatrix_get_btn_text>:
{
 80142c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 80142cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 80142d0:	4605      	mov	r5, r0
 80142d2:	460f      	mov	r7, r1
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 80142d4:	4299      	cmp	r1, r3
 80142d6:	d102      	bne.n	80142de <lv_btnmatrix_get_btn_text+0x16>
 80142d8:	2000      	movs	r0, #0
}
 80142da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(btn_id > btnm->btn_cnt) return NULL;
 80142de:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80142e0:	428b      	cmp	r3, r1
 80142e2:	d3f9      	bcc.n	80142d8 <lv_btnmatrix_get_btn_text+0x10>
 80142e4:	2600      	movs	r6, #0
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 80142e6:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8014320 <lv_btnmatrix_get_btn_text+0x58>
    uint16_t txt_i = 0;
 80142ea:	46b0      	mov	r8, r6
    while(btn_i != btn_id) {
 80142ec:	42be      	cmp	r6, r7
 80142ee:	d106      	bne.n	80142fe <lv_btnmatrix_get_btn_text+0x36>
    if(btn_i == btnm->btn_cnt) return NULL;
 80142f0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80142f2:	42b3      	cmp	r3, r6
 80142f4:	d0f0      	beq.n	80142d8 <lv_btnmatrix_get_btn_text+0x10>
    return btnm->map_p[txt_i];
 80142f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80142f8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80142fc:	e7ed      	b.n	80142da <lv_btnmatrix_get_btn_text+0x12>
        txt_i++;
 80142fe:	f108 0401 	add.w	r4, r8, #1
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 8014302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014304:	4649      	mov	r1, r9
        txt_i++;
 8014306:	b2a4      	uxth	r4, r4
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 8014308:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801430c:	f006 f9f1 	bl	801a6f2 <strcmp>
 8014310:	b910      	cbnz	r0, 8014318 <lv_btnmatrix_get_btn_text+0x50>
 8014312:	f108 0402 	add.w	r4, r8, #2
 8014316:	b2a4      	uxth	r4, r4
 8014318:	3601      	adds	r6, #1
{
 801431a:	46a0      	mov	r8, r4
 801431c:	e7e6      	b.n	80142ec <lv_btnmatrix_get_btn_text+0x24>
 801431e:	bf00      	nop
 8014320:	0802a015 	.word	0x0802a015

08014324 <lv_btnmatrix_event>:
{
 8014324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8014328:	48af      	ldr	r0, [pc, #700]	; (80145e8 <lv_btnmatrix_event+0x2c4>)
{
 801432a:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801432c:	f006 ff4b 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8014330:	2801      	cmp	r0, #1
 8014332:	d11c      	bne.n	801436e <lv_btnmatrix_event+0x4a>
    lv_event_code_t code = lv_event_get_code(e);
 8014334:	4630      	mov	r0, r6
 8014336:	f006 ff60 	bl	801b1fa <lv_event_get_code>
 801433a:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801433c:	4630      	mov	r0, r6
 801433e:	f006 ff58 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8014342:	2d13      	cmp	r5, #19
    lv_obj_t * obj = lv_event_get_target(e);
 8014344:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8014346:	d12a      	bne.n	801439e <lv_btnmatrix_event+0x7a>
 */
static bool has_popovers_in_top_row(lv_obj_t * obj)
{
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;

    if(btnm->row_cnt <= 0) {
 8014348:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801434a:	b183      	cbz	r3, 801436e <lv_btnmatrix_event+0x4a>
        return false;
    }

    const char ** map_row = btnm->map_p;
 801434c:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
    uint16_t btn_cnt = 0;

    while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8014350:	2700      	movs	r7, #0
 8014352:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80145ec <lv_btnmatrix_event+0x2c8>
 8014356:	b2bd      	uxth	r5, r7
 8014358:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 801435c:	b138      	cbz	r0, 801436e <lv_btnmatrix_event+0x4a>
 801435e:	4649      	mov	r1, r9
 8014360:	f006 f9c7 	bl	801a6f2 <strcmp>
 8014364:	b118      	cbz	r0, 801436e <lv_btnmatrix_event+0x4a>
 8014366:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
 801436a:	781b      	ldrb	r3, [r3, #0]
 801436c:	b913      	cbnz	r3, 8014374 <lv_btnmatrix_event+0x50>
}
 801436e:	b003      	add	sp, #12
 8014370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(button_is_popover(btnm->ctrl_bits[btn_cnt])) {
 8014374:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014376:	3701      	adds	r7, #1
    return (ctrl_bits & LV_BTNMATRIX_CTRL_POPOVER) ? true : false;
 8014378:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
        if(button_is_popover(btnm->ctrl_bits[btn_cnt])) {
 801437c:	0559      	lsls	r1, r3, #21
 801437e:	d5ea      	bpl.n	8014356 <lv_btnmatrix_event+0x32>
            lv_coord_t s = btnm->row_cnt > 0 ? lv_obj_get_content_height(obj) / btnm->row_cnt : 0;
 8014380:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8014382:	b131      	cbz	r1, 8014392 <lv_btnmatrix_event+0x6e>
 8014384:	4620      	mov	r0, r4
 8014386:	f008 fa77 	bl	801c878 <lv_obj_get_content_height>
 801438a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801438c:	fb90 f1f3 	sdiv	r1, r0, r3
 8014390:	b209      	sxth	r1, r1
            lv_event_set_ext_draw_size(e, s);
 8014392:	4630      	mov	r0, r6
}
 8014394:	b003      	add	sp, #12
 8014396:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_event_set_ext_draw_size(e, s);
 801439a:	f006 bf8a 	b.w	801b2b2 <lv_event_set_ext_draw_size>
    if(code == LV_EVENT_STYLE_CHANGED) {
 801439e:	2d2a      	cmp	r5, #42	; 0x2a
 80143a0:	d105      	bne.n	80143ae <lv_btnmatrix_event+0x8a>
        lv_btnmatrix_set_map(obj, btnm->map_p);
 80143a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
}
 80143a4:	b003      	add	sp, #12
 80143a6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        lv_btnmatrix_set_map(obj, btnm->map_p);
 80143aa:	f012 b802 	b.w	80263b2 <lv_btnmatrix_set_map>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 80143ae:	2d15      	cmp	r5, #21
 80143b0:	d832      	bhi.n	8014418 <lv_btnmatrix_event+0xf4>
 80143b2:	2d00      	cmp	r5, #0
 80143b4:	d0db      	beq.n	801436e <lv_btnmatrix_event+0x4a>
 80143b6:	3d01      	subs	r5, #1
 80143b8:	2d14      	cmp	r5, #20
 80143ba:	d8d8      	bhi.n	801436e <lv_btnmatrix_event+0x4a>
 80143bc:	a301      	add	r3, pc, #4	; (adr r3, 80143c4 <lv_btnmatrix_event+0xa0>)
 80143be:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80143c2:	bf00      	nop
 80143c4:	0801441f 	.word	0x0801441f
 80143c8:	080144a7 	.word	0x080144a7
 80143cc:	080145d9 	.word	0x080145d9
 80143d0:	0801436f 	.word	0x0801436f
 80143d4:	0801436f 	.word	0x0801436f
 80143d8:	080145b1 	.word	0x080145b1
 80143dc:	0801436f 	.word	0x0801436f
 80143e0:	08014535 	.word	0x08014535
 80143e4:	0801436f 	.word	0x0801436f
 80143e8:	0801436f 	.word	0x0801436f
 80143ec:	0801436f 	.word	0x0801436f
 80143f0:	0801436f 	.word	0x0801436f
 80143f4:	08014679 	.word	0x08014679
 80143f8:	080145f1 	.word	0x080145f1
 80143fc:	08014667 	.word	0x08014667
 8014400:	08014667 	.word	0x08014667
 8014404:	0801436f 	.word	0x0801436f
 8014408:	0801436f 	.word	0x0801436f
 801440c:	0801436f 	.word	0x0801436f
 8014410:	0801436f 	.word	0x0801436f
 8014414:	08014845 	.word	0x08014845
 8014418:	2d29      	cmp	r5, #41	; 0x29
 801441a:	d0c2      	beq.n	80143a2 <lv_btnmatrix_event+0x7e>
 801441c:	e7a7      	b.n	801436e <lv_btnmatrix_event+0x4a>
        void * param = lv_event_get_param(e);
 801441e:	4630      	mov	r0, r6
 8014420:	f006 feef 	bl	801b202 <lv_event_get_param>
        invalidate_button_area(obj, btnm->btn_id_sel);
 8014424:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
        void * param = lv_event_get_param(e);
 8014426:	4605      	mov	r5, r0
        invalidate_button_area(obj, btnm->btn_id_sel);
 8014428:	4620      	mov	r0, r4
 801442a:	f011 ff55 	bl	80262d8 <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801442e:	f7f0 f9bb 	bl	80047a8 <lv_indev_get_act>
 8014432:	f007 f8a2 	bl	801b57a <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 8014436:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801443a:	2801      	cmp	r0, #1
 801443c:	d117      	bne.n	801446e <lv_btnmatrix_event+0x14a>
            lv_indev_get_point(param, &p);
 801443e:	4669      	mov	r1, sp
 8014440:	4628      	mov	r0, r5
 8014442:	f007 f8ab 	bl	801b59c <lv_indev_get_point>
            btn_pr = get_button_from_point(obj, &p);
 8014446:	4669      	mov	r1, sp
 8014448:	4620      	mov	r0, r4
 801444a:	f011 fe7f 	bl	802614c <get_button_from_point>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 801444e:	f64f 73ff 	movw	r3, #65535	; 0xffff
            btn_pr = get_button_from_point(obj, &p);
 8014452:	4601      	mov	r1, r0
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 8014454:	4298      	cmp	r0, r3
 8014456:	d00a      	beq.n	801446e <lv_btnmatrix_event+0x14a>
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 8014458:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801445a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801445e:	065a      	lsls	r2, r3, #25
 8014460:	d405      	bmi.n	801446e <lv_btnmatrix_event+0x14a>
 8014462:	06df      	lsls	r7, r3, #27
 8014464:	d403      	bmi.n	801446e <lv_btnmatrix_event+0x14a>
                    btnm->btn_id_sel = btn_pr;
 8014466:	86a0      	strh	r0, [r4, #52]	; 0x34
                    invalidate_button_area(obj, btnm->btn_id_sel); /*Invalidate the new area*/
 8014468:	4620      	mov	r0, r4
 801446a:	f011 ff35 	bl	80262d8 <invalidate_button_area>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801446e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8014470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014474:	429a      	cmp	r2, r3
 8014476:	f43f af7a 	beq.w	801436e <lv_btnmatrix_event+0x4a>
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801447a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801447c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8014480:	059e      	lsls	r6, r3, #22
 8014482:	f53f af74 	bmi.w	801436e <lv_btnmatrix_event+0x4a>
 8014486:	055d      	lsls	r5, r3, #21
 8014488:	f53f af71 	bmi.w	801436e <lv_btnmatrix_event+0x4a>
               button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801448c:	0658      	lsls	r0, r3, #25
 801448e:	f53f af6e 	bmi.w	801436e <lv_btnmatrix_event+0x4a>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8014492:	06d9      	lsls	r1, r3, #27
 8014494:	f53f af6b 	bmi.w	801436e <lv_btnmatrix_event+0x4a>
                uint32_t b = btnm->btn_id_sel;
 8014498:	9201      	str	r2, [sp, #4]
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 801449a:	aa01      	add	r2, sp, #4
 801449c:	211c      	movs	r1, #28
 801449e:	4620      	mov	r0, r4
 80144a0:	f7f0 f91c 	bl	80046dc <lv_event_send>
                    if(res != LV_RES_OK) return;
 80144a4:	e763      	b.n	801436e <lv_btnmatrix_event+0x4a>
        void * param = lv_event_get_param(e);
 80144a6:	4630      	mov	r0, r6
 80144a8:	f006 feab 	bl	801b202 <lv_event_get_param>
 80144ac:	4606      	mov	r6, r0
        lv_indev_t * indev = lv_indev_get_act();
 80144ae:	f7f0 f97b 	bl	80047a8 <lv_indev_get_act>
 80144b2:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80144b4:	f007 f861 	bl	801b57a <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return;
 80144b8:	2804      	cmp	r0, #4
 80144ba:	f43f af58 	beq.w	801436e <lv_btnmatrix_event+0x4a>
 80144be:	2802      	cmp	r0, #2
 80144c0:	f43f af55 	beq.w	801436e <lv_btnmatrix_event+0x4a>
        lv_indev_get_point(indev, &p);
 80144c4:	4628      	mov	r0, r5
 80144c6:	4669      	mov	r1, sp
 80144c8:	f007 f868 	bl	801b59c <lv_indev_get_point>
        btn_pr = get_button_from_point(obj, &p);
 80144cc:	4669      	mov	r1, sp
 80144ce:	4620      	mov	r0, r4
 80144d0:	f011 fe3c 	bl	802614c <get_button_from_point>
        if(btn_pr != btnm->btn_id_sel) {
 80144d4:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
        btn_pr = get_button_from_point(obj, &p);
 80144d6:	4605      	mov	r5, r0
        if(btn_pr != btnm->btn_id_sel) {
 80144d8:	4281      	cmp	r1, r0
 80144da:	f43f af48 	beq.w	801436e <lv_btnmatrix_event+0x4a>
            if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 80144de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144e2:	4299      	cmp	r1, r3
 80144e4:	d002      	beq.n	80144ec <lv_btnmatrix_event+0x1c8>
                invalidate_button_area(obj, btnm->btn_id_sel);
 80144e6:	4620      	mov	r0, r4
 80144e8:	f011 fef6 	bl	80262d8 <invalidate_button_area>
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 80144ec:	4630      	mov	r0, r6
            btnm->btn_id_sel = btn_pr;
 80144ee:	86a5      	strh	r5, [r4, #52]	; 0x34
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 80144f0:	f007 f847 	bl	801b582 <lv_indev_reset_long_press>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 80144f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144f8:	429d      	cmp	r5, r3
 80144fa:	f43f af38 	beq.w	801436e <lv_btnmatrix_event+0x4a>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 80144fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 8014500:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 8014504:	065a      	lsls	r2, r3, #25
 8014506:	f53f af32 	bmi.w	801436e <lv_btnmatrix_event+0x4a>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801450a:	06db      	lsls	r3, r3, #27
 801450c:	f53f af2f 	bmi.w	801436e <lv_btnmatrix_event+0x4a>
                invalidate_button_area(obj, btn_pr);
 8014510:	4629      	mov	r1, r5
 8014512:	4620      	mov	r0, r4
 8014514:	f011 fee0 	bl	80262d8 <invalidate_button_area>
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 8014518:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801451a:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 801451e:	0597      	lsls	r7, r2, #22
 8014520:	f53f af25 	bmi.w	801436e <lv_btnmatrix_event+0x4a>
                   button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == false) {
 8014524:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_POPOVER) ? true : false;
 8014526:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 801452a:	055e      	lsls	r6, r3, #21
 801452c:	f53f af1f 	bmi.w	801436e <lv_btnmatrix_event+0x4a>
                    uint32_t b = btn_pr;
 8014530:	9501      	str	r5, [sp, #4]
 8014532:	e7b2      	b.n	801449a <lv_btnmatrix_event+0x176>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 8014534:	8e82      	ldrh	r2, [r0, #52]	; 0x34
 8014536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801453a:	429a      	cmp	r2, r3
 801453c:	d02e      	beq.n	801459c <lv_btnmatrix_event+0x278>
            if(button_is_checkable(btnm->ctrl_bits[btnm->btn_id_sel]) &&
 801453e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8014540:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8014544:	0618      	lsls	r0, r3, #24
 8014546:	d514      	bpl.n	8014572 <lv_btnmatrix_event+0x24e>
 8014548:	065f      	lsls	r7, r3, #25
 801454a:	d412      	bmi.n	8014572 <lv_btnmatrix_event+0x24e>
                if(button_get_checked(btnm->ctrl_bits[btnm->btn_id_sel]) && !btnm->one_check) {
 801454c:	05de      	lsls	r6, r3, #23
 801454e:	d52c      	bpl.n	80145aa <lv_btnmatrix_event+0x286>
 8014550:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 8014554:	07c5      	lsls	r5, r0, #31
 8014556:	d428      	bmi.n	80145aa <lv_btnmatrix_event+0x286>
                    btnm->ctrl_bits[btnm->btn_id_sel] &= (~LV_BTNMATRIX_CTRL_CHECKED);
 8014558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801455c:	b29b      	uxth	r3, r3
 801455e:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
                if(btnm->one_check) make_one_button_checked(obj, btnm->btn_id_sel);
 8014562:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8014566:	07d8      	lsls	r0, r3, #31
 8014568:	d503      	bpl.n	8014572 <lv_btnmatrix_event+0x24e>
 801456a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 801456c:	4620      	mov	r0, r4
 801456e:	f011 ffae 	bl	80264ce <make_one_button_checked>
            if((button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true ||
 8014572:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8014574:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 8014576:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            if((button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true ||
 801457a:	0599      	lsls	r1, r3, #22
 801457c:	d401      	bmi.n	8014582 <lv_btnmatrix_event+0x25e>
 801457e:	055f      	lsls	r7, r3, #21
 8014580:	d50c      	bpl.n	801459c <lv_btnmatrix_event+0x278>
                button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == true) &&
 8014582:	065e      	lsls	r6, r3, #25
 8014584:	d40a      	bmi.n	801459c <lv_btnmatrix_event+0x278>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8014586:	06dd      	lsls	r5, r3, #27
 8014588:	d408      	bmi.n	801459c <lv_btnmatrix_event+0x278>
                uint32_t b = btnm->btn_id_sel;
 801458a:	9201      	str	r2, [sp, #4]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 801458c:	211c      	movs	r1, #28
 801458e:	aa01      	add	r2, sp, #4
 8014590:	4620      	mov	r0, r4
 8014592:	f7f0 f8a3 	bl	80046dc <lv_event_send>
                if(res != LV_RES_OK) return;
 8014596:	2801      	cmp	r0, #1
 8014598:	f47f aee9 	bne.w	801436e <lv_btnmatrix_event+0x4a>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801459c:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 801459e:	4620      	mov	r0, r4
}
 80145a0:	b003      	add	sp, #12
 80145a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        invalidate_button_area(obj, btnm->btn_id_sel);
 80145a6:	f011 be97 	b.w	80262d8 <invalidate_button_area>
                    btnm->ctrl_bits[btnm->btn_id_sel] |= LV_BTNMATRIX_CTRL_CHECKED;
 80145aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80145ae:	e7d6      	b.n	801455e <lv_btnmatrix_event+0x23a>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 80145b0:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 80145b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80145b6:	4293      	cmp	r3, r2
 80145b8:	f43f aed9 	beq.w	801436e <lv_btnmatrix_event+0x4a>
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80145bc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_NO_REPEAT) ? true : false;
 80145be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80145c2:	0690      	lsls	r0, r2, #26
 80145c4:	f53f aed3 	bmi.w	801436e <lv_btnmatrix_event+0x4a>
 80145c8:	0651      	lsls	r1, r2, #25
 80145ca:	f53f aed0 	bmi.w	801436e <lv_btnmatrix_event+0x4a>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80145ce:	06d2      	lsls	r2, r2, #27
 80145d0:	f53f aecd 	bmi.w	801436e <lv_btnmatrix_event+0x4a>
                uint32_t b = btnm->btn_id_sel;
 80145d4:	9301      	str	r3, [sp, #4]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 80145d6:	e760      	b.n	801449a <lv_btnmatrix_event+0x176>
        invalidate_button_area(obj, btnm->btn_id_sel);
 80145d8:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80145da:	f011 fe7d 	bl	80262d8 <invalidate_button_area>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 80145de:	f64f 73ff 	movw	r3, #65535	; 0xffff
                btnm->btn_id_sel = b;
 80145e2:	86a3      	strh	r3, [r4, #52]	; 0x34
            if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER && editing)) {
 80145e4:	e6c3      	b.n	801436e <lv_btnmatrix_event+0x4a>
 80145e6:	bf00      	nop
 80145e8:	08029950 	.word	0x08029950
 80145ec:	0802a015 	.word	0x0802a015
        lv_indev_t * indev = lv_event_get_param(e);
 80145f0:	4630      	mov	r0, r6
 80145f2:	f006 fe06 	bl	801b202 <lv_event_get_param>
 80145f6:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80145f8:	f006 ffbf 	bl	801b57a <lv_indev_get_type>
 80145fc:	4605      	mov	r5, r0
        if(indev == NULL) {
 80145fe:	b92e      	cbnz	r6, 801460c <lv_btnmatrix_event+0x2e8>
            indev = lv_indev_get_next(NULL);
 8014600:	4630      	mov	r0, r6
 8014602:	f7fd fd81 	bl	8012108 <lv_indev_get_next>
            indev_type = lv_indev_get_type(indev);
 8014606:	f006 ffb8 	bl	801b57a <lv_indev_get_type>
 801460a:	4605      	mov	r5, r0
        bool editing = lv_group_get_editing(lv_obj_get_group(obj));
 801460c:	4620      	mov	r0, r4
 801460e:	f007 fa0b 	bl	801ba28 <lv_obj_get_group>
 8014612:	f006 ffad 	bl	801b570 <lv_group_get_editing>
        if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 8014616:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8014618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801461c:	429a      	cmp	r2, r3
 801461e:	f47f aea6 	bne.w	801436e <lv_btnmatrix_event+0x4a>
            if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER && editing)) {
 8014622:	2d02      	cmp	r5, #2
 8014624:	d005      	beq.n	8014632 <lv_btnmatrix_event+0x30e>
 8014626:	2d04      	cmp	r5, #4
 8014628:	f47f aea1 	bne.w	801436e <lv_btnmatrix_event+0x4a>
 801462c:	2800      	cmp	r0, #0
 801462e:	f43f ae9e 	beq.w	801436e <lv_btnmatrix_event+0x4a>
                if(btnm->one_check) {
 8014632:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) ||
 8014636:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
                if(btnm->one_check) {
 8014638:	f013 0301 	ands.w	r3, r3, #1
 801463c:	d111      	bne.n	8014662 <lv_btnmatrix_event+0x33e>
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801463e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 8014642:	06d0      	lsls	r0, r2, #27
 8014644:	d401      	bmi.n	801464a <lv_btnmatrix_event+0x326>
 8014646:	0657      	lsls	r7, r2, #25
 8014648:	d5cb      	bpl.n	80145e2 <lv_btnmatrix_event+0x2be>
 801464a:	3301      	adds	r3, #1
 801464c:	e7f7      	b.n	801463e <lv_btnmatrix_event+0x31a>
                          button_is_checked(btnm->ctrl_bits[b]) == false) b++;
 801464e:	3301      	adds	r3, #1
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8014650:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) ||
 8014654:	06d7      	lsls	r7, r2, #27
 8014656:	d4fa      	bmi.n	801464e <lv_btnmatrix_event+0x32a>
 8014658:	0656      	lsls	r6, r2, #25
 801465a:	d4f8      	bmi.n	801464e <lv_btnmatrix_event+0x32a>
 801465c:	05d5      	lsls	r5, r2, #23
 801465e:	d5f6      	bpl.n	801464e <lv_btnmatrix_event+0x32a>
 8014660:	e7bf      	b.n	80145e2 <lv_btnmatrix_event+0x2be>
                uint32_t b = 0;
 8014662:	2300      	movs	r3, #0
 8014664:	e7f4      	b.n	8014650 <lv_btnmatrix_event+0x32c>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(obj, btnm->btn_id_sel);
 8014666:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8014668:	f64f 75ff 	movw	r5, #65535	; 0xffff
 801466c:	42a9      	cmp	r1, r5
 801466e:	d001      	beq.n	8014674 <lv_btnmatrix_event+0x350>
 8014670:	f011 fe32 	bl	80262d8 <invalidate_button_area>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 8014674:	86a5      	strh	r5, [r4, #52]	; 0x34
 8014676:	e67a      	b.n	801436e <lv_btnmatrix_event+0x4a>
        invalidate_button_area(obj, btnm->btn_id_sel);
 8014678:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 801467a:	f011 fe2d 	bl	80262d8 <invalidate_button_area>
        char c = *((char *)lv_event_get_param(e));
 801467e:	4630      	mov	r0, r6
 8014680:	f006 fdbf 	bl	801b202 <lv_event_get_param>
 8014684:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 8014686:	2b13      	cmp	r3, #19
 8014688:	d11e      	bne.n	80146c8 <lv_btnmatrix_event+0x3a4>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 801468a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801468c:	f64f 72ff 	movw	r2, #65535	; 0xffff
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8014690:	8e21      	ldrh	r1, [r4, #48]	; 0x30
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8014692:	2500      	movs	r5, #0
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 8014694:	4293      	cmp	r3, r2
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8014696:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
            else btnm->btn_id_sel++;
 8014698:	bf16      	itet	ne
 801469a:	3301      	addne	r3, #1
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 801469c:	2300      	moveq	r3, #0
            else btnm->btn_id_sel++;
 801469e:	b29b      	uxthne	r3, r3
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80146a0:	4299      	cmp	r1, r3
 80146a2:	86a3      	strh	r3, [r4, #52]	; 0x34
 80146a4:	bf9c      	itt	ls
 80146a6:	2300      	movls	r3, #0
 80146a8:	86a3      	strhls	r3, [r4, #52]	; 0x34
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80146aa:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80146ac:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80146b0:	06d6      	lsls	r6, r2, #27
 80146b2:	d402      	bmi.n	80146ba <lv_btnmatrix_event+0x396>
 80146b4:	0652      	lsls	r2, r2, #25
 80146b6:	f57f af71 	bpl.w	801459c <lv_btnmatrix_event+0x278>
                btnm->btn_id_sel++;
 80146ba:	3301      	adds	r3, #1
 80146bc:	b29b      	uxth	r3, r3
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80146be:	4299      	cmp	r1, r3
                btnm->btn_id_sel++;
 80146c0:	86a3      	strh	r3, [r4, #52]	; 0x34
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80146c2:	bf98      	it	ls
 80146c4:	86a5      	strhls	r5, [r4, #52]	; 0x34
 80146c6:	e7f0      	b.n	80146aa <lv_btnmatrix_event+0x386>
        else if(c == LV_KEY_LEFT) {
 80146c8:	2b14      	cmp	r3, #20
 80146ca:	d11c      	bne.n	8014706 <lv_btnmatrix_event+0x3e2>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) btnm->btn_id_sel = 0;
 80146cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80146d0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80146d2:	429a      	cmp	r2, r3
 80146d4:	bf04      	itt	eq
 80146d6:	2300      	moveq	r3, #0
 80146d8:	86a3      	strheq	r3, [r4, #52]	; 0x34
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 80146da:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80146dc:	b903      	cbnz	r3, 80146e0 <lv_btnmatrix_event+0x3bc>
 80146de:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80146e0:	3b01      	subs	r3, #1
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80146e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	86a3      	strh	r3, [r4, #52]	; 0x34
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80146e8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80146ea:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80146ee:	06d7      	lsls	r7, r2, #27
 80146f0:	d402      	bmi.n	80146f8 <lv_btnmatrix_event+0x3d4>
 80146f2:	0656      	lsls	r6, r2, #25
 80146f4:	f57f af52 	bpl.w	801459c <lv_btnmatrix_event+0x278>
                if(btnm->btn_id_sel > 0) btnm->btn_id_sel--;
 80146f8:	b11b      	cbz	r3, 8014702 <lv_btnmatrix_event+0x3de>
                else btnm->btn_id_sel = btnm->btn_cnt - 1;
 80146fa:	3b01      	subs	r3, #1
 80146fc:	b29b      	uxth	r3, r3
 80146fe:	86a3      	strh	r3, [r4, #52]	; 0x34
 8014700:	e7f2      	b.n	80146e8 <lv_btnmatrix_event+0x3c4>
 8014702:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014704:	e7f9      	b.n	80146fa <lv_btnmatrix_event+0x3d6>
        else if(c == LV_KEY_DOWN) {
 8014706:	2b12      	cmp	r3, #18
 8014708:	d14c      	bne.n	80147a4 <lv_btnmatrix_event+0x480>
            lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801470a:	4620      	mov	r0, r4
 801470c:	f011 fd17 	bl	802613e <lv_obj_get_style_pad_column.constprop.0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 8014710:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8014712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014716:	4299      	cmp	r1, r3
 8014718:	d112      	bne.n	8014740 <lv_btnmatrix_event+0x41c>
                btnm->btn_id_sel = 0;
 801471a:	2100      	movs	r1, #0
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801471c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                btnm->btn_id_sel = 0;
 801471e:	86a1      	strh	r1, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8014720:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8014722:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8014726:	06d5      	lsls	r5, r2, #27
 8014728:	d402      	bmi.n	8014730 <lv_btnmatrix_event+0x40c>
 801472a:	0652      	lsls	r2, r2, #25
 801472c:	f57f af36 	bpl.w	801459c <lv_btnmatrix_event+0x278>
                    btnm->btn_id_sel++;
 8014730:	3301      	adds	r3, #1
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8014732:	8e22      	ldrh	r2, [r4, #48]	; 0x30
                    btnm->btn_id_sel++;
 8014734:	b29b      	uxth	r3, r3
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8014736:	429a      	cmp	r2, r3
                    btnm->btn_id_sel++;
 8014738:	86a3      	strh	r3, [r4, #52]	; 0x34
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801473a:	bf98      	it	ls
 801473c:	86a1      	strhls	r1, [r4, #52]	; 0x34
 801473e:	e7ef      	b.n	8014720 <lv_btnmatrix_event+0x3fc>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 8014740:	6aa5      	ldr	r5, [r4, #40]	; 0x28
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 8014742:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 8014746:	eb05 07c1 	add.w	r7, r5, r1, lsl #3
 801474a:	f835 3031 	ldrh.w	r3, [r5, r1, lsl #3]
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 801474e:	f105 0e02 	add.w	lr, r5, #2
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 8014752:	f105 0804 	add.w	r8, r5, #4
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014756:	88ba      	ldrh	r2, [r7, #4]
 8014758:	3201      	adds	r2, #1
 801475a:	1ad2      	subs	r2, r2, r3
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801475c:	f342 024e 	sbfx	r2, r2, #1, #15
 8014760:	4413      	add	r3, r2
 8014762:	004a      	lsls	r2, r1, #1
                lv_coord_t pr_center =
 8014764:	b21b      	sxth	r3, r3
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 8014766:	458c      	cmp	ip, r1
 8014768:	f67f af18 	bls.w	801459c <lv_btnmatrix_event+0x278>
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 801476c:	f93e 9022 	ldrsh.w	r9, [lr, r2, lsl #2]
 8014770:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 8014774:	45b1      	cmp	r9, r6
 8014776:	dd0f      	ble.n	8014798 <lv_btnmatrix_event+0x474>
 8014778:	f935 6022 	ldrsh.w	r6, [r5, r2, lsl #2]
 801477c:	429e      	cmp	r6, r3
 801477e:	dc0b      	bgt.n	8014798 <lv_btnmatrix_event+0x474>
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 8014780:	f938 6022 	ldrsh.w	r6, [r8, r2, lsl #2]
 8014784:	4406      	add	r6, r0
                       pr_center >= btnm->button_areas[area_below].x1 &&
 8014786:	42b3      	cmp	r3, r6
 8014788:	dc06      	bgt.n	8014798 <lv_btnmatrix_event+0x474>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 801478a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801478c:	5ab6      	ldrh	r6, [r6, r2]
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 801478e:	f016 0f40 	tst.w	r6, #64	; 0x40
 8014792:	d101      	bne.n	8014798 <lv_btnmatrix_event+0x474>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 8014794:	06f6      	lsls	r6, r6, #27
 8014796:	d503      	bpl.n	80147a0 <lv_btnmatrix_event+0x47c>
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 8014798:	3101      	adds	r1, #1
 801479a:	3202      	adds	r2, #2
 801479c:	b289      	uxth	r1, r1
 801479e:	e7e2      	b.n	8014766 <lv_btnmatrix_event+0x442>
                if(area_below < btnm->btn_cnt) btnm->btn_id_sel = area_below;
 80147a0:	86a1      	strh	r1, [r4, #52]	; 0x34
 80147a2:	e6fb      	b.n	801459c <lv_btnmatrix_event+0x278>
        else if(c == LV_KEY_UP) {
 80147a4:	2b11      	cmp	r3, #17
 80147a6:	f47f aef9 	bne.w	801459c <lv_btnmatrix_event+0x278>
            lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 80147aa:	4620      	mov	r0, r4
 80147ac:	f011 fcc7 	bl	802613e <lv_obj_get_style_pad_column.constprop.0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 80147b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80147b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80147b6:	4293      	cmp	r3, r2
 80147b8:	d112      	bne.n	80147e0 <lv_btnmatrix_event+0x4bc>
                btnm->btn_id_sel = 0;
 80147ba:	2100      	movs	r1, #0
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80147bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                btnm->btn_id_sel = 0;
 80147be:	86a1      	strh	r1, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80147c0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80147c2:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80147c6:	06d5      	lsls	r5, r2, #27
 80147c8:	d402      	bmi.n	80147d0 <lv_btnmatrix_event+0x4ac>
 80147ca:	0652      	lsls	r2, r2, #25
 80147cc:	f57f aee6 	bpl.w	801459c <lv_btnmatrix_event+0x278>
                    btnm->btn_id_sel++;
 80147d0:	3301      	adds	r3, #1
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80147d2:	8e22      	ldrh	r2, [r4, #48]	; 0x30
                    btnm->btn_id_sel++;
 80147d4:	b29b      	uxth	r3, r3
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80147d6:	429a      	cmp	r2, r3
                    btnm->btn_id_sel++;
 80147d8:	86a3      	strh	r3, [r4, #52]	; 0x34
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80147da:	bf98      	it	ls
 80147dc:	86a1      	strhls	r1, [r4, #52]	; 0x34
 80147de:	e7ef      	b.n	80147c0 <lv_btnmatrix_event+0x49c>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 80147e0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80147e2:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
 80147e6:	f835 1033 	ldrh.w	r1, [r5, r3, lsl #3]
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 80147ea:	f105 0c02 	add.w	ip, r5, #2
 80147ee:	b21b      	sxth	r3, r3
 80147f0:	88b2      	ldrh	r2, [r6, #4]
                       pr_center <= btnm->button_areas[area_above].x2 &&
 80147f2:	f105 0e04 	add.w	lr, r5, #4
 80147f6:	3201      	adds	r2, #1
 80147f8:	1a52      	subs	r2, r2, r1
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 80147fa:	f342 024e 	sbfx	r2, r2, #1, #15
 80147fe:	440a      	add	r2, r1
                lv_coord_t pr_center =
 8014800:	b212      	sxth	r2, r2
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 8014802:	b21f      	sxth	r7, r3
 8014804:	2f00      	cmp	r7, #0
 8014806:	f6ff aec9 	blt.w	801459c <lv_btnmatrix_event+0x278>
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 801480a:	f93c 8033 	ldrsh.w	r8, [ip, r3, lsl #3]
 801480e:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 8014812:	4588      	cmp	r8, r1
 8014814:	da10      	bge.n	8014838 <lv_btnmatrix_event+0x514>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 8014816:	f935 1033 	ldrsh.w	r1, [r5, r3, lsl #3]
 801481a:	1a09      	subs	r1, r1, r0
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 801481c:	428a      	cmp	r2, r1
 801481e:	db0b      	blt.n	8014838 <lv_btnmatrix_event+0x514>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 8014820:	f93e 1033 	ldrsh.w	r1, [lr, r3, lsl #3]
 8014824:	4291      	cmp	r1, r2
 8014826:	db07      	blt.n	8014838 <lv_btnmatrix_event+0x514>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 8014828:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801482a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
                       pr_center <= btnm->button_areas[area_above].x2 &&
 801482e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8014832:	d101      	bne.n	8014838 <lv_btnmatrix_event+0x514>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 8014834:	06c9      	lsls	r1, r1, #27
 8014836:	d501      	bpl.n	801483c <lv_btnmatrix_event+0x518>
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 8014838:	3b01      	subs	r3, #1
 801483a:	e7e2      	b.n	8014802 <lv_btnmatrix_event+0x4de>
                if(area_above >= 0) btnm->btn_id_sel = area_above;
 801483c:	2f00      	cmp	r7, #0
 801483e:	bfa8      	it	ge
 8014840:	86a3      	strhge	r3, [r4, #52]	; 0x34
 8014842:	e6ab      	b.n	801459c <lv_btnmatrix_event+0x278>
        draw_main(e);
 8014844:	4630      	mov	r0, r6
}
 8014846:	b003      	add	sp, #12
 8014848:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        draw_main(e);
 801484c:	f7ff bb58 	b.w	8013f00 <draw_main>

08014850 <lv_checkbox_constructor>:
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_checkbox_t * cb = (lv_checkbox_t *)obj;

    cb->txt = "Check box";
 8014850:	4b0c      	ldr	r3, [pc, #48]	; (8014884 <lv_checkbox_constructor+0x34>)
{
 8014852:	b510      	push	{r4, lr}
    cb->txt = "Check box";
 8014854:	624b      	str	r3, [r1, #36]	; 0x24
{
 8014856:	460c      	mov	r4, r1
    cb->static_txt = 1;
 8014858:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801485c:	4620      	mov	r0, r4
    cb->static_txt = 1;
 801485e:	f043 0301 	orr.w	r3, r3, #1
 8014862:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8014866:	2102      	movs	r1, #2
 8014868:	f007 f84b 	bl	801b902 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801486c:	4620      	mov	r0, r4
 801486e:	2108      	movs	r1, #8
 8014870:	f007 f847 	bl	801b902 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8014874:	4620      	mov	r0, r4
 8014876:	f44f 6180 	mov.w	r1, #1024	; 0x400

    LV_TRACE_OBJ_CREATE("finished");
}
 801487a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801487e:	f007 b840 	b.w	801b902 <lv_obj_add_flag>
 8014882:	bf00      	nop
 8014884:	0802dedb 	.word	0x0802dedb

08014888 <lv_checkbox_event>:
    }
    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_checkbox_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8014888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res;
    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801488c:	48b5      	ldr	r0, [pc, #724]	; (8014b64 <lv_checkbox_event+0x2dc>)
{
 801488e:	b0b9      	sub	sp, #228	; 0xe4
 8014890:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8014892:	f006 fc98 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8014896:	2801      	cmp	r0, #1
 8014898:	d162      	bne.n	8014960 <lv_checkbox_event+0xd8>

    lv_event_code_t code = lv_event_get_code(e);
 801489a:	4630      	mov	r0, r6
 801489c:	f006 fcad 	bl	801b1fa <lv_event_get_code>
 80148a0:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80148a2:	4630      	mov	r0, r6
 80148a4:	f006 fca5 	bl	801b1f2 <lv_event_get_target>

    if(code == LV_EVENT_GET_SELF_SIZE) {
 80148a8:	2d2c      	cmp	r5, #44	; 0x2c
    lv_obj_t * obj = lv_event_get_target(e);
 80148aa:	4604      	mov	r4, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 80148ac:	d15b      	bne.n	8014966 <lv_checkbox_event+0xde>
        lv_point_t * p = lv_event_get_param(e);
 80148ae:	4630      	mov	r0, r6
        lv_coord_t font_h = lv_font_get_line_height(font);
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);

        lv_point_t txt_size;
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 80148b0:	f04f 0900 	mov.w	r9, #0
        lv_point_t * p = lv_event_get_param(e);
 80148b4:	f006 fca5 	bl	801b202 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80148b8:	2257      	movs	r2, #87	; 0x57
 80148ba:	4606      	mov	r6, r0
 80148bc:	2100      	movs	r1, #0
 80148be:	4620      	mov	r0, r4
 80148c0:	f009 f8de 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80148c4:	2259      	movs	r2, #89	; 0x59
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 80148c6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80148ca:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80148cc:	2100      	movs	r1, #0
 80148ce:	4620      	mov	r0, r4
 80148d0:	f009 f8d6 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80148d4:	2258      	movs	r2, #88	; 0x58
    return (lv_coord_t)v.num;
 80148d6:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80148da:	2100      	movs	r1, #0
 80148dc:	4620      	mov	r0, r4
 80148de:	f009 f8cf 	bl	801da80 <lv_obj_get_style_prop>
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 80148e2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80148e6:	462a      	mov	r2, r5
 80148e8:	f8cd 8000 	str.w	r8, [sp]
 80148ec:	e9cd 3901 	strd	r3, r9, [sp, #4]
 80148f0:	b203      	sxth	r3, r0
 80148f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80148f4:	a826      	add	r0, sp, #152	; 0x98
 80148f6:	f010 ff9f 	bl	8025838 <lv_txt_get_size>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80148fa:	4649      	mov	r1, r9
 80148fc:	2215      	movs	r2, #21
 80148fe:	4620      	mov	r0, r4
 8014900:	f009 f8be 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014904:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8014906:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014908:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801490c:	4620      	mov	r0, r4
 801490e:	f009 f8b7 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014912:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014914:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014916:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801491a:	4620      	mov	r0, r4
 801491c:	f009 f8b0 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014920:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014922:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014924:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014928:	4620      	mov	r0, r4
 801492a:	f009 f8a9 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801492e:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014930:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014932:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014936:	4620      	mov	r0, r4
        lv_coord_t marker_bottomp = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
        lv_point_t marker_size;
        marker_size.x = font_h + marker_leftp + marker_rightp;
        marker_size.y = font_h + marker_topp + marker_bottomp;

        p->x = marker_size.x + txt_size.x + bg_colp;
 8014938:	4455      	add	r5, sl
 801493a:	f009 f8a1 	bl	801da80 <lv_obj_get_style_prop>
 801493e:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
        marker_size.y = font_h + marker_topp + marker_bottomp;
 8014942:	4480      	add	r8, r0
        p->x = marker_size.x + txt_size.x + bg_colp;
 8014944:	441d      	add	r5, r3
        marker_size.y = font_h + marker_topp + marker_bottomp;
 8014946:	fa18 f387 	uxtah	r3, r8, r7
        p->x = marker_size.x + txt_size.x + bg_colp;
 801494a:	444d      	add	r5, r9
        p->y = LV_MAX(marker_size.y, txt_size.y);
 801494c:	b21b      	sxth	r3, r3
        p->x = marker_size.x + txt_size.x + bg_colp;
 801494e:	fa15 f587 	uxtah	r5, r5, r7
 8014952:	8035      	strh	r5, [r6, #0]
        p->y = LV_MAX(marker_size.y, txt_size.y);
 8014954:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
 8014958:	4293      	cmp	r3, r2
 801495a:	bfb8      	it	lt
 801495c:	4613      	movlt	r3, r2
 801495e:	8073      	strh	r3, [r6, #2]
        *s = LV_MAX(*s, m);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        lv_checkbox_draw(e);
    }
}
 8014960:	b039      	add	sp, #228	; 0xe4
 8014962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8014966:	2d13      	cmp	r5, #19
 8014968:	d10f      	bne.n	801498a <lv_checkbox_event+0x102>
        lv_coord_t * s = lv_event_get_param(e);
 801496a:	4630      	mov	r0, r6
 801496c:	f006 fc49 	bl	801b202 <lv_event_get_param>
 8014970:	4605      	mov	r5, r0
        lv_coord_t m = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 8014972:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014976:	4620      	mov	r0, r4
 8014978:	f007 fd19 	bl	801c3ae <lv_obj_calculate_ext_draw_size>
        *s = LV_MAX(*s, m);
 801497c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8014980:	4283      	cmp	r3, r0
 8014982:	bfb8      	it	lt
 8014984:	4603      	movlt	r3, r0
 8014986:	802b      	strh	r3, [r5, #0]
 8014988:	e7ea      	b.n	8014960 <lv_checkbox_event+0xd8>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801498a:	2d15      	cmp	r5, #21
 801498c:	d1e8      	bne.n	8014960 <lv_checkbox_event+0xd8>

static void lv_checkbox_draw(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 801498e:	4630      	mov	r0, r6

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_INDICATOR);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_INDICATOR);

    lv_draw_rect_dsc_t indic_dsc;
    lv_draw_rect_dsc_init(&indic_dsc);
 8014990:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
    lv_obj_t * obj = lv_event_get_target(e);
 8014994:	f006 fc2d 	bl	801b1f2 <lv_event_get_target>
 8014998:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801499a:	4630      	mov	r0, r6
 801499c:	f006 fc82 	bl	801b2a4 <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80149a0:	2257      	movs	r2, #87	; 0x57
 80149a2:	4680      	mov	r8, r0
 80149a4:	2100      	movs	r1, #0
 80149a6:	4620      	mov	r0, r4
 80149a8:	f009 f86a 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80149ac:	2232      	movs	r2, #50	; 0x32
 80149ae:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 80149b2:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80149b4:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80149b6:	4620      	mov	r0, r4
 80149b8:	f009 f862 	bl	801da80 <lv_obj_get_style_prop>
 80149bc:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80149be:	2210      	movs	r2, #16
 80149c0:	2100      	movs	r1, #0
 80149c2:	4620      	mov	r0, r4
    lv_coord_t bg_topp = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + bg_border;
 80149c4:	b2be      	uxth	r6, r7
 80149c6:	f009 f85b 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80149ca:	2212      	movs	r2, #18
 80149cc:	fa10 f787 	uxtah	r7, r0, r7
 80149d0:	2100      	movs	r1, #0
 80149d2:	4620      	mov	r0, r4
 80149d4:	f009 f854 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80149d8:	462a      	mov	r2, r5
    lv_coord_t bg_leftp = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + bg_border;
 80149da:	4406      	add	r6, r0
 80149dc:	2100      	movs	r1, #0
 80149de:	4620      	mov	r0, r4
    lv_coord_t bg_topp = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + bg_border;
 80149e0:	fa1f f987 	uxth.w	r9, r7
 80149e4:	f009 f84c 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80149e8:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80149ea:	9005      	str	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80149ec:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80149f0:	4620      	mov	r0, r4
    lv_coord_t bg_leftp = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + bg_border;
 80149f2:	b2b6      	uxth	r6, r6
 80149f4:	f009 f844 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80149f8:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80149fa:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80149fc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014a00:	4620      	mov	r0, r4
 8014a02:	f009 f83d 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014a06:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014a08:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014a0a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014a0e:	4620      	mov	r0, r4
 8014a10:	f009 f836 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014a14:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014a16:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014a18:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014a1c:	4620      	mov	r0, r4
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &indic_dsc);
    lv_area_t marker_area;
    marker_area.x1 = obj->coords.x1 + bg_leftp;
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 8014a1e:	443d      	add	r5, r7
 8014a20:	f009 f82e 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8014a24:	2268      	movs	r2, #104	; 0x68
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014a26:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8014a28:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014a2c:	4620      	mov	r0, r4
 8014a2e:	3d01      	subs	r5, #1
 8014a30:	f009 f826 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8014a34:	2269      	movs	r2, #105	; 0x69
 8014a36:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8014a3a:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	fa15 f58b 	uxtah	r5, r5, fp
 8014a42:	f009 f81d 	bl	801da80 <lv_obj_get_style_prop>
 8014a46:	9008      	str	r0, [sp, #32]
    lv_draw_rect_dsc_init(&indic_dsc);
 8014a48:	4650      	mov	r0, sl
 8014a4a:	f7f3 ff77 	bl	800893c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &indic_dsc);
 8014a4e:	4652      	mov	r2, sl
 8014a50:	4620      	mov	r0, r4
 8014a52:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014a56:	f007 fa1b 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 8014a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a5c:	9806      	ldr	r0, [sp, #24]
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 8014a5e:	8aa2      	ldrh	r2, [r4, #20]
 8014a60:	4418      	add	r0, r3
    marker_area.y1 = obj->coords.y1 + bg_topp;
 8014a62:	8ae1      	ldrh	r1, [r4, #22]
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 8014a64:	4432      	add	r2, r6
 8014a66:	1e43      	subs	r3, r0, #1
    marker_area.y2 = marker_area.y1 + font_h + marker_topp + marker_bottomp - 1;

    lv_area_t marker_area_transf;
    lv_area_copy(&marker_area_transf, &marker_area);
    marker_area_transf.x1 -= transf_w;
 8014a68:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 8014a6c:	fa15 f582 	uxtah	r5, r5, r2
    marker_area.y1 = obj->coords.y1 + bg_topp;
 8014a70:	4449      	add	r1, r9
    marker_area_transf.x1 -= transf_w;
 8014a72:	1a12      	subs	r2, r2, r0
 8014a74:	fa13 f38b 	uxtah	r3, r3, fp
    marker_area.y1 = obj->coords.y1 + bg_topp;
 8014a78:	b289      	uxth	r1, r1
    marker_area_transf.x1 -= transf_w;
 8014a7a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8014a7e:	b29e      	uxth	r6, r3
    marker_area_transf.x2 += transf_w;
    marker_area_transf.y1 -= transf_h;
 8014a80:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 8014a84:	b2af      	uxth	r7, r5
    marker_area_transf.x2 += transf_w;
 8014a86:	fa10 f585 	uxtah	r5, r0, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014a8a:	3601      	adds	r6, #1
    marker_area_transf.y2 += transf_h;
 8014a8c:	fa12 f383 	uxtah	r3, r2, r3
    marker_area_transf.y1 -= transf_h;
 8014a90:	1a88      	subs	r0, r1, r2
    marker_area_transf.x2 += transf_w;
 8014a92:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
    part_draw_dsc.rect_dsc = &indic_dsc;
    part_draw_dsc.class_p = MY_CLASS;
    part_draw_dsc.type = LV_CHECKBOX_DRAW_PART_BOX;
 8014a96:	2500      	movs	r5, #0
    marker_area_transf.y2 += transf_h;
 8014a98:	4419      	add	r1, r3
    marker_area_transf.y1 -= transf_h;
 8014a9a:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8014a9e:	a826      	add	r0, sp, #152	; 0x98

    lv_draw_label_dsc_t txt_dsc;
    lv_draw_label_dsc_init(&txt_dsc);
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &txt_dsc);

    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
 8014aa0:	b236      	sxth	r6, r6
    marker_area_transf.y2 += transf_h;
 8014aa2:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8014aa6:	4641      	mov	r1, r8
 8014aa8:	f007 fce8 	bl	801c47c <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 8014aac:	4b2d      	ldr	r3, [pc, #180]	; (8014b64 <lv_checkbox_event+0x2dc>)
    part_draw_dsc.part = LV_PART_INDICATOR;
 8014aae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8014ab2:	211a      	movs	r1, #26
    part_draw_dsc.class_p = MY_CLASS;
 8014ab4:	9327      	str	r3, [sp, #156]	; 0x9c
    part_draw_dsc.draw_area = &marker_area_transf;
 8014ab6:	ab0c      	add	r3, sp, #48	; 0x30
    part_draw_dsc.part = LV_PART_INDICATOR;
 8014ab8:	9233      	str	r2, [sp, #204]	; 0xcc
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8014aba:	4620      	mov	r0, r4
 8014abc:	aa26      	add	r2, sp, #152	; 0x98
    part_draw_dsc.rect_dsc = &indic_dsc;
 8014abe:	f8cd a0a8 	str.w	sl, [sp, #168]	; 0xa8
    part_draw_dsc.draw_area = &marker_area_transf;
 8014ac2:	9329      	str	r3, [sp, #164]	; 0xa4
    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
 8014ac4:	eba6 060b 	sub.w	r6, r6, fp
    part_draw_dsc.type = LV_CHECKBOX_DRAW_PART_BOX;
 8014ac8:	9528      	str	r5, [sp, #160]	; 0xa0
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8014aca:	f7ef fe07 	bl	80046dc <lv_event_send>
    lv_draw_rect(draw_ctx, &indic_dsc, &marker_area_transf);
 8014ace:	ab0c      	add	r3, sp, #48	; 0x30
 8014ad0:	4651      	mov	r1, sl
 8014ad2:	4640      	mov	r0, r8
    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
 8014ad4:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    lv_draw_rect(draw_ctx, &indic_dsc, &marker_area_transf);
 8014ad8:	461a      	mov	r2, r3
 8014ada:	f00a fc64 	bl	801f3a6 <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8014ade:	aa26      	add	r2, sp, #152	; 0x98
 8014ae0:	211b      	movs	r1, #27
 8014ae2:	4620      	mov	r0, r4
 8014ae4:	f7ef fdfa 	bl	80046dc <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8014ae8:	4629      	mov	r1, r5
 8014aea:	2259      	movs	r2, #89	; 0x59
 8014aec:	4620      	mov	r0, r4
 8014aee:	f008 ffc7 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8014af2:	4629      	mov	r1, r5
    return (lv_coord_t)v.num;
 8014af4:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8014af8:	2258      	movs	r2, #88	; 0x58
 8014afa:	4620      	mov	r0, r4
 8014afc:	f008 ffc0 	bl	801da80 <lv_obj_get_style_prop>
    lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8014b00:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8014b04:	9a04      	ldr	r2, [sp, #16]
 8014b06:	9502      	str	r5, [sp, #8]
 8014b08:	e9cd a300 	strd	sl, r3, [sp]
 8014b0c:	b203      	sxth	r3, r0
 8014b0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014b10:	a80b      	add	r0, sp, #44	; 0x2c
 8014b12:	f010 fe91 	bl	8025838 <lv_txt_get_size>
    lv_draw_label_dsc_init(&txt_dsc);
 8014b16:	a810      	add	r0, sp, #64	; 0x40
 8014b18:	f7f3 f8c6 	bl	8007ca8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &txt_dsc);
 8014b1c:	aa10      	add	r2, sp, #64	; 0x40
 8014b1e:	4629      	mov	r1, r5
 8014b20:	4620      	mov	r0, r4
 8014b22:	f007 fb04 	bl	801c12e <lv_obj_init_draw_label_dsc>
    lv_area_t txt_area;
    txt_area.x1 = marker_area.x2 + bg_colp;
 8014b26:	9b05      	ldr	r3, [sp, #20]
    txt_area.x2 = txt_area.x1 + txt_size.x;
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8014b28:	8ae2      	ldrh	r2, [r4, #22]
    txt_area.y2 = txt_area.y1 + txt_size.y;

    lv_draw_label(draw_ctx, &txt_dsc, &txt_area, cb->txt, NULL);
 8014b2a:	a910      	add	r1, sp, #64	; 0x40
    txt_area.x1 = marker_area.x2 + bg_colp;
 8014b2c:	441f      	add	r7, r3
    txt_area.x2 = txt_area.x1 + txt_size.x;
 8014b2e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    lv_draw_label(draw_ctx, &txt_dsc, &txt_area, cb->txt, NULL);
 8014b32:	9500      	str	r5, [sp, #0]
 8014b34:	4640      	mov	r0, r8
    txt_area.x1 = marker_area.x2 + bg_colp;
 8014b36:	b2bf      	uxth	r7, r7
 8014b38:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
    txt_area.x2 = txt_area.x1 + txt_size.x;
 8014b3c:	441f      	add	r7, r3
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8014b3e:	eb09 0366 	add.w	r3, r9, r6, asr #1
    txt_area.x2 = txt_area.x1 + txt_size.x;
 8014b42:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8014b46:	4413      	add	r3, r2
    txt_area.y2 = txt_area.y1 + txt_size.y;
 8014b48:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8014b4c:	b29b      	uxth	r3, r3
 8014b4e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    txt_area.y2 = txt_area.y1 + txt_size.y;
 8014b52:	4413      	add	r3, r2
    lv_draw_label(draw_ctx, &txt_dsc, &txt_area, cb->txt, NULL);
 8014b54:	aa0e      	add	r2, sp, #56	; 0x38
    txt_area.y2 = txt_area.y1 + txt_size.y;
 8014b56:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    lv_draw_label(draw_ctx, &txt_dsc, &txt_area, cb->txt, NULL);
 8014b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b5c:	f7f3 f8bc 	bl	8007cd8 <lv_draw_label>
}
 8014b60:	e6fe      	b.n	8014960 <lv_checkbox_event+0xd8>
 8014b62:	bf00      	nop
 8014b64:	0802996c 	.word	0x0802996c

08014b68 <lv_dropdown_create>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_dropdown_create(lv_obj_t * parent)
{
 8014b68:	4601      	mov	r1, r0
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdown_class, parent);
 8014b6a:	4804      	ldr	r0, [pc, #16]	; (8014b7c <lv_dropdown_create+0x14>)
{
 8014b6c:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdown_class, parent);
 8014b6e:	f7f0 f923 	bl	8004db8 <lv_obj_class_create_obj>
 8014b72:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8014b74:	f007 f92e 	bl	801bdd4 <lv_obj_class_init_obj>
    return obj;
}
 8014b78:	4620      	mov	r0, r4
 8014b7a:	bd10      	pop	{r4, pc}
 8014b7c:	080299a4 	.word	0x080299a4

08014b80 <lv_dropdown_constructor>:
    lv_obj_class_init_obj(obj);
    return obj;
}

static void lv_dropdown_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8014b80:	b538      	push	{r3, r4, r5, lr}
    lv_dropdown_t * dropdown = (lv_dropdown_t *)obj;

    /*Initialize the allocated 'ext'*/
    dropdown->list          = NULL;
    dropdown->options     = NULL;
    dropdown->symbol         = LV_SYMBOL_DOWN;
 8014b82:	4a14      	ldr	r2, [pc, #80]	; (8014bd4 <lv_dropdown_constructor+0x54>)
    dropdown->list          = NULL;
 8014b84:	2300      	movs	r3, #0
{
 8014b86:	460c      	mov	r4, r1
    dropdown->list          = NULL;
 8014b88:	624b      	str	r3, [r1, #36]	; 0x24
    dropdown->sel_opt_id_orig = 0;
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
    dropdown->option_cnt      = 0;
    dropdown->dir = LV_DIR_BOTTOM;

    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8014b8a:	4620      	mov	r0, r4
    dropdown->text         = NULL;
 8014b8c:	e9c1 320a 	strd	r3, r2, [r1, #40]	; 0x28
    dropdown->option_cnt      = 0;
 8014b90:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
    dropdown->sel_opt_id_orig = 0;
 8014b94:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8014b98:	638b      	str	r3, [r1, #56]	; 0x38
    dropdown->dir = LV_DIR_BOTTOM;
 8014b9a:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
 8014b9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8014ba2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8014ba6:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8014baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014bae:	f006 fea8 	bl	801b902 <lv_obj_add_flag>
    lv_dropdown_set_options_static(obj, "Option 1\nOption 2\nOption 3");
 8014bb2:	4909      	ldr	r1, [pc, #36]	; (8014bd8 <lv_dropdown_constructor+0x58>)
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	f011 fe42 	bl	802683e <lv_dropdown_set_options_static>

    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 8014bba:	4620      	mov	r0, r4
 8014bbc:	f009 fadc 	bl	801e178 <lv_obj_get_screen>
 8014bc0:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdownlist_class, parent);
 8014bc2:	4806      	ldr	r0, [pc, #24]	; (8014bdc <lv_dropdown_constructor+0x5c>)
 8014bc4:	f7f0 f8f8 	bl	8004db8 <lv_obj_class_create_obj>
 8014bc8:	4605      	mov	r5, r0
    lv_obj_class_init_obj(obj);
 8014bca:	f007 f903 	bl	801bdd4 <lv_obj_class_init_obj>
    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 8014bce:	6265      	str	r5, [r4, #36]	; 0x24
    lv_dropdown_list_t * list = (lv_dropdown_list_t *)dropdown->list;
    list->dropdown = obj;
 8014bd0:	626c      	str	r4, [r5, #36]	; 0x24

    LV_TRACE_OBJ_CREATE("finished");
}
 8014bd2:	bd38      	pop	{r3, r4, r5, pc}
 8014bd4:	0802dee5 	.word	0x0802dee5
 8014bd8:	0802dee9 	.word	0x0802dee9
 8014bdc:	08029988 	.word	0x08029988

08014be0 <lv_dropdown_list_event>:
        draw_main(e);
    }
}

static void lv_dropdown_list_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8014be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    lv_event_code_t code = lv_event_get_code(e);
 8014be2:	4608      	mov	r0, r1
{
 8014be4:	460e      	mov	r6, r1
    lv_event_code_t code = lv_event_get_code(e);
 8014be6:	f006 fb08 	bl	801b1fa <lv_event_get_code>
    if(code != LV_EVENT_DRAW_POST) {
 8014bea:	2818      	cmp	r0, #24
    lv_event_code_t code = lv_event_get_code(e);
 8014bec:	4604      	mov	r4, r0
    if(code != LV_EVENT_DRAW_POST) {
 8014bee:	d119      	bne.n	8014c24 <lv_dropdown_list_event+0x44>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
        if(res != LV_RES_OK) return;
    }
    lv_obj_t * list = lv_event_get_target(e);
 8014bf0:	4630      	mov	r0, r6
 8014bf2:	f006 fafe 	bl	801b1f2 <lv_event_get_target>
    }
}

static void draw_list(lv_event_t * e)
{
    lv_obj_t * list_obj = lv_event_get_target(e);
 8014bf6:	4630      	mov	r0, r6
 8014bf8:	f006 fafb 	bl	801b1f2 <lv_event_get_target>
    lv_dropdown_list_t * list = (lv_dropdown_list_t *)list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
 8014bfc:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8014bfe:	4630      	mov	r0, r6
 8014c00:	f006 fb50 	bl	801b2a4 <lv_event_get_draw_ctx>

    /* Clip area might be too large too to shadow but
     * the selected option can be drawn on only the background*/
    lv_area_t clip_area_core;
    bool has_common;
    has_common = _lv_area_intersect(&clip_area_core, draw_ctx->clip_area, &dropdown->list->coords);
 8014c04:	6a62      	ldr	r2, [r4, #36]	; 0x24
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8014c06:	4605      	mov	r5, r0
    has_common = _lv_area_intersect(&clip_area_core, draw_ctx->clip_area, &dropdown->list->coords);
 8014c08:	6881      	ldr	r1, [r0, #8]
 8014c0a:	3214      	adds	r2, #20
 8014c0c:	4668      	mov	r0, sp
 8014c0e:	f00f fb30 	bl	8024272 <_lv_area_intersect>
    if(has_common) {
 8014c12:	2800      	cmp	r0, #0
 8014c14:	d174      	bne.n	8014d00 <lv_dropdown_list_event+0x120>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 8014c16:	4631      	mov	r1, r6
 8014c18:	4859      	ldr	r0, [pc, #356]	; (8014d80 <lv_dropdown_list_event+0x1a0>)
}
 8014c1a:	b003      	add	sp, #12
 8014c1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 8014c20:	f006 bad1 	b.w	801b1c6 <lv_obj_event_base>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 8014c24:	4631      	mov	r1, r6
 8014c26:	4856      	ldr	r0, [pc, #344]	; (8014d80 <lv_dropdown_list_event+0x1a0>)
 8014c28:	f006 facd 	bl	801b1c6 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8014c2c:	2801      	cmp	r0, #1
 8014c2e:	d140      	bne.n	8014cb2 <lv_dropdown_list_event+0xd2>
    lv_obj_t * list = lv_event_get_target(e);
 8014c30:	4630      	mov	r0, r6
 8014c32:	f006 fade 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_RELEASED) {
 8014c36:	2c08      	cmp	r4, #8
    lv_obj_t * list = lv_event_get_target(e);
 8014c38:	4605      	mov	r5, r0
    lv_obj_t * dropdown_obj = ((lv_dropdown_list_t *)list)->dropdown;
 8014c3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
    if(code == LV_EVENT_RELEASED) {
 8014c3c:	d141      	bne.n	8014cc2 <lv_dropdown_list_event+0xe2>
        if(lv_indev_get_scroll_obj(lv_indev_get_act()) == NULL) {
 8014c3e:	f7ef fdb3 	bl	80047a8 <lv_indev_get_act>
 8014c42:	f006 fccf 	bl	801b5e4 <lv_indev_get_scroll_obj>
 8014c46:	4606      	mov	r6, r0
 8014c48:	bb98      	cbnz	r0, 8014cb2 <lv_dropdown_list_event+0xd2>
 * @return LV_RES_INV if the list is not being deleted in the user callback. Else LV_RES_OK
 */
static lv_res_t list_release_handler(lv_obj_t * list_obj)
{
    lv_dropdown_list_t * list = (lv_dropdown_list_t *) list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
 8014c4a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;

    lv_indev_t * indev = lv_indev_get_act();
 8014c4c:	f7ef fdac 	bl	80047a8 <lv_indev_get_act>
 8014c50:	4605      	mov	r5, r0
    /*Leave edit mode once a new item is selected*/
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8014c52:	f006 fc92 	bl	801b57a <lv_indev_get_type>
 8014c56:	2804      	cmp	r0, #4
 8014c58:	d10c      	bne.n	8014c74 <lv_dropdown_list_event+0x94>
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8014c5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 8014c5c:	4620      	mov	r0, r4
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8014c5e:	8723      	strh	r3, [r4, #56]	; 0x38
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 8014c60:	f006 fee2 	bl	801ba28 <lv_obj_get_group>
 8014c64:	4607      	mov	r7, r0
        if(lv_group_get_editing(g)) {
 8014c66:	f006 fc83 	bl	801b570 <lv_group_get_editing>
 8014c6a:	b118      	cbz	r0, 8014c74 <lv_dropdown_list_event+0x94>
            lv_group_set_editing(g, false);
 8014c6c:	4631      	mov	r1, r6
 8014c6e:	4638      	mov	r0, r7
 8014c70:	f006 fc5d 	bl	801b52e <lv_group_set_editing>
        }
    }

    /*Search the clicked option (For KEYPAD and ENCODER the new value should be already set)*/
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8014c74:	4628      	mov	r0, r5
 8014c76:	f006 fc80 	bl	801b57a <lv_indev_get_type>
 8014c7a:	2801      	cmp	r0, #1
 8014c7c:	d11b      	bne.n	8014cb6 <lv_dropdown_list_event+0xd6>
        lv_point_t p;
        lv_indev_get_point(indev, &p);
 8014c7e:	4669      	mov	r1, sp
 8014c80:	4628      	mov	r0, r5
 8014c82:	f006 fc8b 	bl	801b59c <lv_indev_get_point>
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 8014c86:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8014c8a:	4620      	mov	r0, r4
 8014c8c:	f011 fd71 	bl	8026772 <get_id_on_point>
 8014c90:	86e0      	strh	r0, [r4, #54]	; 0x36
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8014c92:	8720      	strh	r0, [r4, #56]	; 0x38
    }

    lv_dropdown_close(dropdown_obj);
 8014c94:	4620      	mov	r0, r4
 8014c96:	f011 ff3d 	bl	8026b14 <lv_dropdown_close>

    /*Invalidate to refresh the text*/
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 8014c9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014c9c:	b913      	cbnz	r3, 8014ca4 <lv_dropdown_list_event+0xc4>
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f007 ffc8 	bl	801cc34 <lv_obj_invalidate>

    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 8014ca4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 8014ca6:	466a      	mov	r2, sp
 8014ca8:	211c      	movs	r1, #28
 8014caa:	4620      	mov	r0, r4
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 8014cac:	9300      	str	r3, [sp, #0]
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 8014cae:	f7ef fd15 	bl	80046dc <lv_event_send>
}
 8014cb2:	b003      	add	sp, #12
 8014cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8014cb6:	4628      	mov	r0, r5
 8014cb8:	f006 fc5f 	bl	801b57a <lv_indev_get_type>
 8014cbc:	2803      	cmp	r0, #3
 8014cbe:	d1e9      	bne.n	8014c94 <lv_dropdown_list_event+0xb4>
 8014cc0:	e7dd      	b.n	8014c7e <lv_dropdown_list_event+0x9e>
    else if(code == LV_EVENT_PRESSED) {
 8014cc2:	2c01      	cmp	r4, #1
 8014cc4:	d151      	bne.n	8014d6a <lv_dropdown_list_event+0x18a>
{
    lv_dropdown_list_t * list = (lv_dropdown_list_t *) list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;

    lv_indev_t * indev = lv_indev_get_act();
 8014cc6:	f7ef fd6f 	bl	80047a8 <lv_indev_get_act>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 8014cca:	4604      	mov	r4, r0
 8014ccc:	2800      	cmp	r0, #0
 8014cce:	d0f0      	beq.n	8014cb2 <lv_dropdown_list_event+0xd2>
 8014cd0:	f006 fc53 	bl	801b57a <lv_indev_get_type>
 8014cd4:	2801      	cmp	r0, #1
 8014cd6:	d10d      	bne.n	8014cf4 <lv_dropdown_list_event+0x114>
        lv_point_t p;
        lv_indev_get_point(indev, &p);
 8014cd8:	4669      	mov	r1, sp
 8014cda:	4620      	mov	r0, r4
 8014cdc:	f006 fc5e 	bl	801b59c <lv_indev_get_point>
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 8014ce0:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8014ce4:	4630      	mov	r0, r6
 8014ce6:	f011 fd44 	bl	8026772 <get_id_on_point>
 8014cea:	8770      	strh	r0, [r6, #58]	; 0x3a
        lv_obj_invalidate(list_obj);
 8014cec:	4628      	mov	r0, r5
 8014cee:	f007 ffa1 	bl	801cc34 <lv_obj_invalidate>
 8014cf2:	e7de      	b.n	8014cb2 <lv_dropdown_list_event+0xd2>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 8014cf4:	4620      	mov	r0, r4
 8014cf6:	f006 fc40 	bl	801b57a <lv_indev_get_type>
 8014cfa:	2803      	cmp	r0, #3
 8014cfc:	d1d9      	bne.n	8014cb2 <lv_dropdown_list_event+0xd2>
 8014cfe:	e7eb      	b.n	8014cd8 <lv_dropdown_list_event+0xf8>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8014d00:	68af      	ldr	r7, [r5, #8]
        draw_ctx->clip_area = &clip_area_core;
 8014d02:	f8c5 d008 	str.w	sp, [r5, #8]
        if(dropdown->selected_highlight) {
 8014d06:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014d0a:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8014d0c:	f013 0f20 	tst.w	r3, #32
 8014d10:	d024      	beq.n	8014d5c <lv_dropdown_list_event+0x17c>
            if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 8014d12:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8014d14:	4291      	cmp	r1, r2
 8014d16:	d108      	bne.n	8014d2a <lv_dropdown_list_event+0x14a>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 8014d18:	2321      	movs	r3, #33	; 0x21
 8014d1a:	460a      	mov	r2, r1
 8014d1c:	4620      	mov	r0, r4
 8014d1e:	4629      	mov	r1, r5
 8014d20:	f011 fccb 	bl	80266ba <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 8014d24:	2321      	movs	r3, #33	; 0x21
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014d26:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8014d28:	e012      	b.n	8014d50 <lv_dropdown_list_event+0x170>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014d2a:	2320      	movs	r3, #32
 8014d2c:	4629      	mov	r1, r5
 8014d2e:	4620      	mov	r0, r4
 8014d30:	f011 fcc3 	bl	80266ba <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014d34:	2320      	movs	r3, #32
 8014d36:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8014d38:	4629      	mov	r1, r5
 8014d3a:	4620      	mov	r0, r4
 8014d3c:	f011 fc51 	bl	80265e2 <draw_box_label>
                draw_box(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 8014d40:	2301      	movs	r3, #1
 8014d42:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014d44:	4629      	mov	r1, r5
 8014d46:	4620      	mov	r0, r4
 8014d48:	f011 fcb7 	bl	80266ba <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 8014d4c:	2301      	movs	r3, #1
 8014d4e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014d50:	4629      	mov	r1, r5
 8014d52:	4620      	mov	r0, r4
 8014d54:	f011 fc45 	bl	80265e2 <draw_box_label>
        draw_ctx->clip_area = clip_area_ori;
 8014d58:	60af      	str	r7, [r5, #8]
 8014d5a:	e75c      	b.n	8014c16 <lv_dropdown_list_event+0x36>
            draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014d5c:	2320      	movs	r3, #32
 8014d5e:	4629      	mov	r1, r5
 8014d60:	4620      	mov	r0, r4
 8014d62:	f011 fcaa 	bl	80266ba <draw_box>
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014d66:	2320      	movs	r3, #32
 8014d68:	e7dd      	b.n	8014d26 <lv_dropdown_list_event+0x146>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8014d6a:	2c09      	cmp	r4, #9
 8014d6c:	d1a1      	bne.n	8014cb2 <lv_dropdown_list_event+0xd2>
        dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8014d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d72:	8773      	strh	r3, [r6, #58]	; 0x3a
}
 8014d74:	b003      	add	sp, #12
 8014d76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_obj_invalidate(list);
 8014d7a:	f007 bf5b 	b.w	801cc34 <lv_obj_invalidate>
 8014d7e:	bf00      	nop
 8014d80:	08029988 	.word	0x08029988

08014d84 <lv_dropdown_event>:
{
 8014d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8014d88:	48b1      	ldr	r0, [pc, #708]	; (8015050 <lv_dropdown_event+0x2cc>)
{
 8014d8a:	b09d      	sub	sp, #116	; 0x74
 8014d8c:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8014d8e:	f006 fa1a 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8014d92:	2801      	cmp	r0, #1
 8014d94:	d132      	bne.n	8014dfc <lv_dropdown_event+0x78>
    lv_event_code_t code = lv_event_get_code(e);
 8014d96:	4630      	mov	r0, r6
 8014d98:	f006 fa2f 	bl	801b1fa <lv_event_get_code>
 8014d9c:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8014d9e:	4630      	mov	r0, r6
 8014da0:	f006 fa27 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_FOCUSED) {
 8014da4:	2d0e      	cmp	r5, #14
    lv_obj_t * obj = lv_event_get_target(e);
 8014da6:	4604      	mov	r4, r0
    if(code == LV_EVENT_FOCUSED) {
 8014da8:	d112      	bne.n	8014dd0 <lv_dropdown_event+0x4c>
        lv_group_t * g             = lv_obj_get_group(obj);
 8014daa:	f006 fe3d 	bl	801ba28 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8014dae:	f006 fbdf 	bl	801b570 <lv_group_get_editing>
 8014db2:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8014db4:	f7ef fcf8 	bl	80047a8 <lv_indev_get_act>
 8014db8:	f006 fbdf 	bl	801b57a <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8014dbc:	2804      	cmp	r0, #4
 8014dbe:	d11d      	bne.n	8014dfc <lv_dropdown_event+0x78>
            if(editing) {
 8014dc0:	2d00      	cmp	r5, #0
 8014dc2:	d05c      	beq.n	8014e7e <lv_dropdown_event+0xfa>
                lv_dropdown_open(obj);
 8014dc4:	4620      	mov	r0, r4
}
 8014dc6:	b01d      	add	sp, #116	; 0x74
 8014dc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                lv_dropdown_open(obj);
 8014dcc:	f011 bda1 	b.w	8026912 <lv_dropdown_open>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 8014dd0:	2d15      	cmp	r5, #21
 8014dd2:	d80d      	bhi.n	8014df0 <lv_dropdown_event+0x6c>
 8014dd4:	2d07      	cmp	r5, #7
 8014dd6:	d911      	bls.n	8014dfc <lv_dropdown_event+0x78>
 8014dd8:	3d08      	subs	r5, #8
 8014dda:	2d0d      	cmp	r5, #13
 8014ddc:	d80e      	bhi.n	8014dfc <lv_dropdown_event+0x78>
 8014dde:	e8df f005 	tbb	[pc, r5]
 8014de2:	0d5a      	.short	0x0d5a
 8014de4:	220d0d0d 	.word	0x220d0d0d
 8014de8:	0d50500d 	.word	0x0d50500d
 8014dec:	600d0d0d 	.word	0x600d0d0d
 8014df0:	2d2a      	cmp	r5, #42	; 0x2a
 8014df2:	d006      	beq.n	8014e02 <lv_dropdown_event+0x7e>
 8014df4:	2d2c      	cmp	r5, #44	; 0x2c
 8014df6:	d009      	beq.n	8014e0c <lv_dropdown_event+0x88>
 8014df8:	2d29      	cmp	r5, #41	; 0x29
 8014dfa:	d002      	beq.n	8014e02 <lv_dropdown_event+0x7e>
}
 8014dfc:	b01d      	add	sp, #116	; 0x74
 8014dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e02:	b01d      	add	sp, #116	; 0x74
 8014e04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_self_size(obj);
 8014e08:	f007 bd89 	b.w	801c91e <lv_obj_refresh_self_size>
        lv_point_t * p = lv_event_get_param(e);
 8014e0c:	4630      	mov	r0, r6
 8014e0e:	f006 f9f8 	bl	801b202 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8014e12:	2257      	movs	r2, #87	; 0x57
 8014e14:	4605      	mov	r5, r0
 8014e16:	2100      	movs	r1, #0
 8014e18:	4620      	mov	r0, r4
 8014e1a:	f008 fe31 	bl	801da80 <lv_obj_get_style_prop>
 8014e1e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
        p->y = lv_font_get_line_height(font);
 8014e22:	806b      	strh	r3, [r5, #2]
 8014e24:	e7ea      	b.n	8014dfc <lv_dropdown_event+0x78>
        char c = *((char *)lv_event_get_param(e));
 8014e26:	4630      	mov	r0, r6
 8014e28:	f006 f9eb 	bl	801b202 <lv_event_get_param>
 8014e2c:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8014e2e:	f1a3 0212 	sub.w	r2, r3, #18
 8014e32:	2a01      	cmp	r2, #1
 8014e34:	d810      	bhi.n	8014e58 <lv_dropdown_event+0xd4>
            if(!lv_dropdown_is_open(obj)) {
 8014e36:	4620      	mov	r0, r4
 8014e38:	f011 fe7f 	bl	8026b3a <lv_dropdown_is_open>
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	d0c1      	beq.n	8014dc4 <lv_dropdown_event+0x40>
            else if(dropdown->sel_opt_id + 1 < dropdown->option_cnt) {
 8014e40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8014e42:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8014e44:	3301      	adds	r3, #1
 8014e46:	4293      	cmp	r3, r2
 8014e48:	dad8      	bge.n	8014dfc <lv_dropdown_event+0x78>
                position_to_selected(obj);
 8014e4a:	4620      	mov	r0, r4
                dropdown->sel_opt_id--;
 8014e4c:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 8014e4e:	b01d      	add	sp, #116	; 0x74
 8014e50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                position_to_selected(obj);
 8014e54:	f011 bb71 	b.w	802653a <position_to_selected>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8014e58:	2b14      	cmp	r3, #20
 8014e5a:	d004      	beq.n	8014e66 <lv_dropdown_event+0xe2>
 8014e5c:	d80d      	bhi.n	8014e7a <lv_dropdown_event+0xf6>
 8014e5e:	2b0a      	cmp	r3, #10
 8014e60:	d015      	beq.n	8014e8e <lv_dropdown_event+0x10a>
 8014e62:	2b11      	cmp	r3, #17
 8014e64:	d1ca      	bne.n	8014dfc <lv_dropdown_event+0x78>
            if(!lv_dropdown_is_open(obj)) {
 8014e66:	4620      	mov	r0, r4
 8014e68:	f011 fe67 	bl	8026b3a <lv_dropdown_is_open>
 8014e6c:	2800      	cmp	r0, #0
 8014e6e:	d0a9      	beq.n	8014dc4 <lv_dropdown_event+0x40>
            else if(dropdown->sel_opt_id > 0) {
 8014e70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d0c2      	beq.n	8014dfc <lv_dropdown_event+0x78>
                dropdown->sel_opt_id--;
 8014e76:	3b01      	subs	r3, #1
 8014e78:	e7e7      	b.n	8014e4a <lv_dropdown_event+0xc6>
 8014e7a:	2b1b      	cmp	r3, #27
 8014e7c:	d1be      	bne.n	8014dfc <lv_dropdown_event+0x78>
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 8014e7e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8014e80:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_dropdown_close(obj);
 8014e82:	4620      	mov	r0, r4
}
 8014e84:	b01d      	add	sp, #116	; 0x74
 8014e86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            lv_dropdown_close(obj);
 8014e8a:	f011 be43 	b.w	8026b14 <lv_dropdown_close>
            lv_obj_t * indev_obj = lv_indev_get_obj_act();
 8014e8e:	f7ef fce1 	bl	8004854 <lv_indev_get_obj_act>
            if(indev_obj != obj) {
 8014e92:	4284      	cmp	r4, r0
 8014e94:	d0b2      	beq.n	8014dfc <lv_dropdown_event+0x78>
                res = btn_release_handler(obj);
 8014e96:	4620      	mov	r0, r4
}
 8014e98:	b01d      	add	sp, #116	; 0x74
 8014e9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                res = btn_release_handler(obj);
 8014e9e:	f011 be55 	b.w	8026b4c <btn_release_handler.isra.0>
    lv_obj_t * obj = lv_event_get_target(e);
 8014ea2:	4630      	mov	r0, r6
 8014ea4:	f006 f9a5 	bl	801b1f2 <lv_event_get_target>
 8014ea8:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8014eaa:	4630      	mov	r0, r6
 8014eac:	f006 f9fa 	bl	801b2a4 <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8014eb0:	2232      	movs	r2, #50	; 0x32
 8014eb2:	2100      	movs	r1, #0
 8014eb4:	4682      	mov	sl, r0
 8014eb6:	4620      	mov	r0, r4
 8014eb8:	f008 fde2 	bl	801da80 <lv_obj_get_style_prop>
 8014ebc:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014ebe:	2212      	movs	r2, #18
 8014ec0:	2100      	movs	r1, #0
 8014ec2:	4620      	mov	r0, r4
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8014ec4:	b2b5      	uxth	r5, r6
 8014ec6:	f008 fddb 	bl	801da80 <lv_obj_get_style_prop>
 8014eca:	fa10 f686 	uxtah	r6, r0, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014ece:	2213      	movs	r2, #19
 8014ed0:	2100      	movs	r1, #0
 8014ed2:	b2b3      	uxth	r3, r6
 8014ed4:	4620      	mov	r0, r4
 8014ed6:	9304      	str	r3, [sp, #16]
 8014ed8:	f008 fdd2 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014edc:	2210      	movs	r2, #16
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8014ede:	eb05 0900 	add.w	r9, r5, r0
 8014ee2:	2100      	movs	r1, #0
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	f008 fdcb 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8014eea:	4405      	add	r5, r0
    lv_draw_label_dsc_init(&symbol_dsc);
 8014eec:	a80c      	add	r0, sp, #48	; 0x30
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8014eee:	fa1f f989 	uxth.w	r9, r9
    lv_draw_label_dsc_init(&symbol_dsc);
 8014ef2:	f7f2 fed9 	bl	8007ca8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_INDICATOR, &symbol_dsc);
 8014ef6:	aa0c      	add	r2, sp, #48	; 0x30
 8014ef8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014efc:	4620      	mov	r0, r4
 8014efe:	f007 f916 	bl	801c12e <lv_obj_init_draw_label_dsc>
    if(dropdown->text) opt_txt = dropdown->text;
 8014f02:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8014f04:	b2ad      	uxth	r5, r5
    if(dropdown->text) opt_txt = dropdown->text;
 8014f06:	b947      	cbnz	r7, 8014f1a <lv_dropdown_event+0x196>
        char * buf = lv_mem_buf_get(128);
 8014f08:	2080      	movs	r0, #128	; 0x80
 8014f0a:	f7fd fc21 	bl	8012750 <lv_mem_buf_get>
        lv_dropdown_get_selected_str(obj, buf, 128);
 8014f0e:	2280      	movs	r2, #128	; 0x80
        char * buf = lv_mem_buf_get(128);
 8014f10:	4607      	mov	r7, r0
        lv_dropdown_get_selected_str(obj, buf, 128);
 8014f12:	4601      	mov	r1, r0
 8014f14:	4620      	mov	r0, r4
 8014f16:	f011 fcd0 	bl	80268ba <lv_dropdown_get_selected_str>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8014f1a:	2216      	movs	r2, #22
 8014f1c:	2100      	movs	r1, #0
 8014f1e:	4620      	mov	r0, r4
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 8014f20:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
 8014f24:	f008 fdac 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8014f28:	fa5f f880 	uxtb.w	r8, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 8014f2c:	f1b8 0f01 	cmp.w	r8, #1
 8014f30:	d006      	beq.n	8014f40 <lv_dropdown_event+0x1bc>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 8014f32:	f006 060f 	and.w	r6, r6, #15
 8014f36:	1e73      	subs	r3, r6, #1
 8014f38:	f1d3 0800 	rsbs	r8, r3, #0
 8014f3c:	eb48 0803 	adc.w	r8, r8, r3
    if(dropdown->symbol) {
 8014f40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014f42:	2800      	cmp	r0, #0
 8014f44:	d03d      	beq.n	8014fc2 <lv_dropdown_event+0x23e>
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 8014f46:	f009 fc79 	bl	801e83c <lv_img_src_get_type>
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8014f4a:	2802      	cmp	r0, #2
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 8014f4c:	4683      	mov	fp, r0
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8014f4e:	d16c      	bne.n	801502a <lv_dropdown_event+0x2a6>
            lv_txt_get_size(&size, dropdown->symbol, symbol_dsc.font, symbol_dsc.letter_space, symbol_dsc.line_space, LV_COORD_MAX,
 8014f50:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 8014f54:	a814      	add	r0, sp, #80	; 0x50
 8014f56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f58:	9302      	str	r3, [sp, #8]
 8014f5a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8014f5e:	9301      	str	r3, [sp, #4]
 8014f60:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8014f64:	9300      	str	r3, [sp, #0]
 8014f66:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8014f6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014f6c:	f010 fc64 	bl	8025838 <lv_txt_get_size>
            symbol_w = size.x;
 8014f70:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
            symbol_h = size.y;
 8014f74:	f9bd 6052 	ldrsh.w	r6, [sp, #82]	; 0x52
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8014f78:	b298      	uxth	r0, r3
        if(symbol_to_left) {
 8014f7a:	f1b8 0f00 	cmp.w	r8, #0
 8014f7e:	d069      	beq.n	8015054 <lv_dropdown_event+0x2d0>
            symbol_area.x1 = obj->coords.x1 + left;
 8014f80:	9a04      	ldr	r2, [sp, #16]
 8014f82:	8aa1      	ldrh	r1, [r4, #20]
 8014f84:	4411      	add	r1, r2
 8014f86:	b28a      	uxth	r2, r1
 8014f88:	b209      	sxth	r1, r1
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8014f8a:	3a01      	subs	r2, #1
 8014f8c:	4402      	add	r2, r0
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8014f8e:	b212      	sxth	r2, r2
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8014f90:	f1bb 0f02 	cmp.w	fp, #2
            symbol_area.x1 = obj->coords.x1 + left;
 8014f94:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8014f98:	b2b1      	uxth	r1, r6
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8014f9a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            symbol_area.y1 = obj->coords.y1 + top;
 8014f9e:	8ae2      	ldrh	r2, [r4, #22]
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8014fa0:	d160      	bne.n	8015064 <lv_dropdown_event+0x2e0>
            symbol_area.y1 = obj->coords.y1 + top;
 8014fa2:	442a      	add	r2, r5
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	4650      	mov	r0, sl
            symbol_area.y1 = obj->coords.y1 + top;
 8014fa8:	b292      	uxth	r2, r2
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 8014faa:	9300      	str	r3, [sp, #0]
            symbol_area.y1 = obj->coords.y1 + top;
 8014fac:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8014fb0:	3a01      	subs	r2, #1
 8014fb2:	440a      	add	r2, r1
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 8014fb4:	a90c      	add	r1, sp, #48	; 0x30
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8014fb6:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 8014fba:	aa0a      	add	r2, sp, #40	; 0x28
 8014fbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014fbe:	f7f2 fe8b 	bl	8007cd8 <lv_draw_label>
    lv_draw_label_dsc_init(&label_dsc);
 8014fc2:	a814      	add	r0, sp, #80	; 0x50
 8014fc4:	f7f2 fe70 	bl	8007ca8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 8014fc8:	aa14      	add	r2, sp, #80	; 0x50
 8014fca:	2100      	movs	r1, #0
 8014fcc:	4620      	mov	r0, r4
 8014fce:	f007 f8ae 	bl	801c12e <lv_obj_init_draw_label_dsc>
    lv_txt_get_size(&size, opt_txt, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 8014fd2:	f89d 306d 	ldrb.w	r3, [sp, #109]	; 0x6d
 8014fd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014fd8:	4639      	mov	r1, r7
 8014fda:	9302      	str	r3, [sp, #8]
 8014fdc:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8014fe0:	a809      	add	r0, sp, #36	; 0x24
 8014fe2:	9301      	str	r3, [sp, #4]
 8014fe4:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 8014fe8:	9300      	str	r3, [sp, #0]
 8014fea:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8014fee:	f010 fc23 	bl	8025838 <lv_txt_get_size>
    txt_area.y1 = obj->coords.y1 + top;
 8014ff2:	8ae3      	ldrh	r3, [r4, #22]
 8014ff4:	441d      	add	r5, r3
    txt_area.y2 = txt_area.y1 + size.y;
 8014ff6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    txt_area.y1 = obj->coords.y1 + top;
 8014ffa:	b2ad      	uxth	r5, r5
 8014ffc:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
    txt_area.y2 = txt_area.y1 + size.y;
 8015000:	441d      	add	r5, r3
 8015002:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    if(dropdown->symbol == NULL) {
 8015006:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015008:	2b00      	cmp	r3, #0
 801500a:	d162      	bne.n	80150d2 <lv_dropdown_event+0x34e>
        txt_area.x1 = obj->coords.x1 + (lv_obj_get_width(obj) - size.x) / 2;
 801500c:	4620      	mov	r0, r4
 801500e:	8aa5      	ldrh	r5, [r4, #20]
 8015010:	f007 fc10 	bl	801c834 <lv_obj_get_width>
 8015014:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8015018:	1a80      	subs	r0, r0, r2
 801501a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801501e:	eb05 0360 	add.w	r3, r5, r0, asr #1
            txt_area.x1 = obj->coords.x1 + left;
 8015022:	b219      	sxth	r1, r3
            txt_area.x2 = txt_area.x1 + size.x;
 8015024:	fa12 f383 	uxtah	r3, r2, r3
 8015028:	e05e      	b.n	80150e8 <lv_dropdown_event+0x364>
            lv_res_t res = lv_img_decoder_get_info(dropdown->symbol, &header);
 801502a:	a914      	add	r1, sp, #80	; 0x50
 801502c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801502e:	f7f3 ff87 	bl	8008f40 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 8015032:	2801      	cmp	r0, #1
                symbol_w = header.w;
 8015034:	bf09      	itett	eq
 8015036:	9b14      	ldreq	r3, [sp, #80]	; 0x50
                symbol_h = -1;
 8015038:	f04f 36ff 	movne.w	r6, #4294967295
                symbol_h = header.h;
 801503c:	f8bd 6052 	ldrheq.w	r6, [sp, #82]	; 0x52
                symbol_w = header.w;
 8015040:	f3c3 238a 	ubfxeq	r3, r3, #10, #11
                symbol_w = -1;
 8015044:	bf14      	ite	ne
 8015046:	4633      	movne	r3, r6
                symbol_h = header.h;
 8015048:	f3c6 164a 	ubfxeq	r6, r6, #5, #11
 801504c:	e794      	b.n	8014f78 <lv_dropdown_event+0x1f4>
 801504e:	bf00      	nop
 8015050:	080299a4 	.word	0x080299a4
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 8015054:	8b22      	ldrh	r2, [r4, #24]
 8015056:	eba2 0209 	sub.w	r2, r2, r9
 801505a:	b292      	uxth	r2, r2
 801505c:	1a10      	subs	r0, r2, r0
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 801505e:	3a01      	subs	r2, #1
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 8015060:	b201      	sxth	r1, r0
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8015062:	e794      	b.n	8014f8e <lv_dropdown_event+0x20a>
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 8015064:	4620      	mov	r0, r4
 8015066:	9305      	str	r3, [sp, #20]
 8015068:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801506c:	f007 fbe8 	bl	801c840 <lv_obj_get_height>
 8015070:	1b80      	subs	r0, r0, r6
 8015072:	9a07      	ldr	r2, [sp, #28]
            img_dsc.pivot.y = symbol_h / 2;
 8015074:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 8015078:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801507c:	9906      	ldr	r1, [sp, #24]
            img_dsc.pivot.y = symbol_h / 2;
 801507e:	1076      	asrs	r6, r6, #1
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 8015080:	eb02 0260 	add.w	r2, r2, r0, asr #1
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8015084:	3901      	subs	r1, #1
            lv_draw_img_dsc_init(&img_dsc);
 8015086:	a814      	add	r0, sp, #80	; 0x50
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 8015088:	b292      	uxth	r2, r2
 801508a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801508e:	440a      	add	r2, r1
 8015090:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            lv_draw_img_dsc_init(&img_dsc);
 8015094:	f009 fbae 	bl	801e7f4 <lv_draw_img_dsc_init>
            lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 8015098:	aa14      	add	r2, sp, #80	; 0x50
 801509a:	4620      	mov	r0, r4
 801509c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80150a0:	f007 f891 	bl	801c1c6 <lv_obj_init_draw_img_dsc>
            img_dsc.pivot.x = symbol_w / 2;
 80150a4:	9b05      	ldr	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 80150a6:	226d      	movs	r2, #109	; 0x6d
 80150a8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80150ac:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80150b0:	4620      	mov	r0, r4
            img_dsc.pivot.y = symbol_h / 2;
 80150b2:	f8ad 6056 	strh.w	r6, [sp, #86]	; 0x56
            img_dsc.pivot.x = symbol_w / 2;
 80150b6:	105b      	asrs	r3, r3, #1
 80150b8:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 80150bc:	f008 fce0 	bl	801da80 <lv_obj_get_style_prop>
            lv_draw_img(draw_ctx, &img_dsc, &symbol_area, dropdown->symbol);
 80150c0:	aa0a      	add	r2, sp, #40	; 0x28
            img_dsc.angle = lv_obj_get_style_transform_angle(obj, LV_PART_INDICATOR);
 80150c2:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
            lv_draw_img(draw_ctx, &img_dsc, &symbol_area, dropdown->symbol);
 80150c6:	a914      	add	r1, sp, #80	; 0x50
 80150c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80150ca:	4650      	mov	r0, sl
 80150cc:	f7f2 fcd6 	bl	8007a7c <lv_draw_img>
 80150d0:	e777      	b.n	8014fc2 <lv_dropdown_event+0x23e>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 80150d2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
        if(symbol_to_left) {
 80150d6:	f1b8 0f00 	cmp.w	r8, #0
 80150da:	d01a      	beq.n	8015112 <lv_dropdown_event+0x38e>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 80150dc:	8b23      	ldrh	r3, [r4, #24]
 80150de:	eba3 0309 	sub.w	r3, r3, r9
 80150e2:	b29b      	uxth	r3, r3
 80150e4:	1a9a      	subs	r2, r3, r2
 80150e6:	b211      	sxth	r1, r2
            txt_area.x2 = txt_area.x1 + size.x;
 80150e8:	b21b      	sxth	r3, r3
        txt_area.x1 = obj->coords.x1 + (lv_obj_get_width(obj) - size.x) / 2;
 80150ea:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
    lv_draw_label(draw_ctx, &label_dsc, &txt_area, opt_txt, NULL);
 80150ee:	aa0a      	add	r2, sp, #40	; 0x28
 80150f0:	a914      	add	r1, sp, #80	; 0x50
        txt_area.x2 = txt_area.x1 + size.x;
 80150f2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    lv_draw_label(draw_ctx, &label_dsc, &txt_area, opt_txt, NULL);
 80150f6:	2300      	movs	r3, #0
 80150f8:	4650      	mov	r0, sl
 80150fa:	9300      	str	r3, [sp, #0]
 80150fc:	463b      	mov	r3, r7
 80150fe:	f7f2 fdeb 	bl	8007cd8 <lv_draw_label>
    if(dropdown->text == NULL) {
 8015102:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015104:	2b00      	cmp	r3, #0
 8015106:	f47f ae79 	bne.w	8014dfc <lv_dropdown_event+0x78>
        lv_mem_buf_release((char *)opt_txt);
 801510a:	4638      	mov	r0, r7
 801510c:	f7fd fb6a 	bl	80127e4 <lv_mem_buf_release>
}
 8015110:	e674      	b.n	8014dfc <lv_dropdown_event+0x78>
            txt_area.x1 = obj->coords.x1 + left;
 8015112:	8aa3      	ldrh	r3, [r4, #20]
 8015114:	9904      	ldr	r1, [sp, #16]
 8015116:	4419      	add	r1, r3
 8015118:	460b      	mov	r3, r1
 801511a:	e782      	b.n	8015022 <lv_dropdown_event+0x29e>

0801511c <lv_img_create>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_img_create(lv_obj_t * parent)
{
 801511c:	4601      	mov	r1, r0
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801511e:	4804      	ldr	r0, [pc, #16]	; (8015130 <lv_img_create+0x14>)
{
 8015120:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8015122:	f7ef fe49 	bl	8004db8 <lv_obj_class_create_obj>
 8015126:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8015128:	f006 fe54 	bl	801bdd4 <lv_obj_class_init_obj>
    return obj;
}
 801512c:	4620      	mov	r0, r4
 801512e:	bd10      	pop	{r4, pc}
 8015130:	080299c0 	.word	0x080299c0

08015134 <lv_img_event>:
        lv_area_get_width(&area_transform), lv_area_get_height(&area_transform)
    };
}

static void lv_img_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8015134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 8015138:	4608      	mov	r0, r1
{
 801513a:	b099      	sub	sp, #100	; 0x64
 801513c:	460d      	mov	r5, r1
    lv_event_code_t code = lv_event_get_code(e);
 801513e:	f006 f85c 	bl	801b1fa <lv_event_get_code>

    /*Ancestor events will be called during drawing*/
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 8015142:	2815      	cmp	r0, #21
    lv_event_code_t code = lv_event_get_code(e);
 8015144:	4606      	mov	r6, r0
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 8015146:	d11c      	bne.n	8015182 <lv_img_event+0x4e>
        /*Call the ancestor's event handler*/
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
        if(res != LV_RES_OK) return;
    }

    lv_obj_t * obj = lv_event_get_target(e);
 8015148:	4628      	mov	r0, r5
 801514a:	f006 f852 	bl	801b1f2 <lv_event_get_target>
    }
}

static void draw_img(lv_event_t * e)
{
    lv_event_code_t code = lv_event_get_code(e);
 801514e:	4628      	mov	r0, r5
 8015150:	f006 f853 	bl	801b1fa <lv_event_get_code>
 8015154:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8015156:	4628      	mov	r0, r5
 8015158:	f006 f84b 	bl	801b1f2 <lv_event_get_target>
    lv_img_t * img = (lv_img_t *)obj;
    if(code == LV_EVENT_COVER_CHECK) {
 801515c:	2e12      	cmp	r6, #18
    lv_obj_t * obj = lv_event_get_target(e);
 801515e:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 8015160:	f040 8154 	bne.w	801540c <lv_img_event+0x2d8>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8015164:	4628      	mov	r0, r5
 8015166:	f006 f84c 	bl	801b202 <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 801516a:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 801516c:	4606      	mov	r6, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 801516e:	2b02      	cmp	r3, #2
 8015170:	d03d      	beq.n	80151ee <lv_img_event+0xba>
        if(img->src_type == LV_IMG_SRC_UNKNOWN || img->src_type == LV_IMG_SRC_SYMBOL) {
 8015172:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015176:	079a      	lsls	r2, r3, #30
 8015178:	f140 80f4 	bpl.w	8015364 <lv_img_event+0x230>
            a.y1 += obj->coords.y1;
            a.x2 += obj->coords.x1;
            a.y2 += obj->coords.y1;

            if(_lv_area_is_in(clip_area, &a, 0) == false) {
                info->res = LV_COVER_RES_NOT_COVER;
 801517c:	2301      	movs	r3, #1
 801517e:	7033      	strb	r3, [r6, #0]
                return;
 8015180:	e035      	b.n	80151ee <lv_img_event+0xba>
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 8015182:	2818      	cmp	r0, #24
 8015184:	d0e0      	beq.n	8015148 <lv_img_event+0x14>
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8015186:	4629      	mov	r1, r5
 8015188:	489f      	ldr	r0, [pc, #636]	; (8015408 <lv_img_event+0x2d4>)
 801518a:	f006 f81c 	bl	801b1c6 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801518e:	2801      	cmp	r0, #1
 8015190:	d12d      	bne.n	80151ee <lv_img_event+0xba>
    lv_obj_t * obj = lv_event_get_target(e);
 8015192:	4628      	mov	r0, r5
 8015194:	f006 f82d 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 8015198:	2e2a      	cmp	r6, #42	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 801519a:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 801519c:	d110      	bne.n	80151c0 <lv_img_event+0x8c>
        if(img->src_type == LV_IMG_SRC_SYMBOL) {
 801519e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80151a2:	f003 0303 	and.w	r3, r3, #3
 80151a6:	2b02      	cmp	r3, #2
 80151a8:	d105      	bne.n	80151b6 <lv_img_event+0x82>
            lv_img_set_src(obj, img->src);
 80151aa:	6a41      	ldr	r1, [r0, #36]	; 0x24
}
 80151ac:	b019      	add	sp, #100	; 0x64
 80151ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            lv_img_set_src(obj, img->src);
 80151b2:	f011 bd6c 	b.w	8026c8e <lv_img_set_src>
}
 80151b6:	b019      	add	sp, #100	; 0x64
 80151b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            lv_obj_refresh_ext_draw_size(obj);
 80151bc:	f007 b96c 	b.w	801c498 <lv_obj_refresh_ext_draw_size>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80151c0:	2e18      	cmp	r6, #24
 80151c2:	d811      	bhi.n	80151e8 <lv_img_event+0xb4>
 80151c4:	2e10      	cmp	r6, #16
 80151c6:	d912      	bls.n	80151ee <lv_img_event+0xba>
 80151c8:	3e11      	subs	r6, #17
 80151ca:	2e04      	cmp	r6, #4
 80151cc:	d80f      	bhi.n	80151ee <lv_img_event+0xba>
 80151ce:	a301      	add	r3, pc, #4	; (adr r3, 80151d4 <lv_img_event+0xa0>)
 80151d0:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 80151d4:	08015275 	.word	0x08015275
 80151d8:	0801514f 	.word	0x0801514f
 80151dc:	080151f5 	.word	0x080151f5
 80151e0:	080151ef 	.word	0x080151ef
 80151e4:	0801514f 	.word	0x0801514f
 80151e8:	2e2c      	cmp	r6, #44	; 0x2c
 80151ea:	f000 80a2 	beq.w	8015332 <lv_img_event+0x1fe>
}
 80151ee:	b019      	add	sp, #100	; 0x64
 80151f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_coord_t * s = lv_event_get_param(e);
 80151f4:	4628      	mov	r0, r5
 80151f6:	f006 f804 	bl	801b202 <lv_event_get_param>
        if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) {
 80151fa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
        lv_coord_t * s = lv_event_get_param(e);
 80151fc:	4605      	mov	r5, r0
        if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) {
 80151fe:	b91b      	cbnz	r3, 8015208 <lv_img_event+0xd4>
 8015200:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015206:	d0f2      	beq.n	80151ee <lv_img_event+0xba>
            lv_coord_t w = lv_obj_get_width(obj);
 8015208:	4620      	mov	r0, r4
 801520a:	f007 fb13 	bl	801c834 <lv_obj_get_width>
 801520e:	4607      	mov	r7, r0
            lv_coord_t h = lv_obj_get_height(obj);
 8015210:	4620      	mov	r0, r4
 8015212:	f007 fb15 	bl	801c840 <lv_obj_get_height>
            _lv_img_buf_get_transformed_area(&a, w, h, img->angle, img->zoom, &img->pivot);
 8015216:	f104 0232 	add.w	r2, r4, #50	; 0x32
 801521a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
            lv_coord_t h = lv_obj_get_height(obj);
 801521e:	4606      	mov	r6, r0
            _lv_img_buf_get_transformed_area(&a, w, h, img->angle, img->zoom, &img->pivot);
 8015220:	9201      	str	r2, [sp, #4]
 8015222:	4639      	mov	r1, r7
 8015224:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015226:	9200      	str	r2, [sp, #0]
 8015228:	4602      	mov	r2, r0
 801522a:	a810      	add	r0, sp, #64	; 0x40
 801522c:	f00a f8e2 	bl	801f3f4 <_lv_img_buf_get_transformed_area>
            *s = LV_MAX(*s, -a.x1);
 8015230:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8015234:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015238:	4252      	negs	r2, r2
 801523a:	429a      	cmp	r2, r3
 801523c:	bfb8      	it	lt
 801523e:	461a      	movlt	r2, r3
 8015240:	b212      	sxth	r2, r2
 8015242:	802a      	strh	r2, [r5, #0]
            *s = LV_MAX(*s, -a.y1);
 8015244:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8015248:	425b      	negs	r3, r3
 801524a:	4293      	cmp	r3, r2
 801524c:	bfb8      	it	lt
 801524e:	4613      	movlt	r3, r2
 8015250:	b21b      	sxth	r3, r3
 8015252:	802b      	strh	r3, [r5, #0]
            *s = LV_MAX(*s, a.x2 - w);
 8015254:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8015258:	1bc9      	subs	r1, r1, r7
 801525a:	4299      	cmp	r1, r3
 801525c:	bfb8      	it	lt
 801525e:	4619      	movlt	r1, r3
 8015260:	b209      	sxth	r1, r1
 8015262:	8029      	strh	r1, [r5, #0]
            *s = LV_MAX(*s, a.y2 - h);
 8015264:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8015268:	1b9b      	subs	r3, r3, r6
 801526a:	428b      	cmp	r3, r1
 801526c:	bfb8      	it	lt
 801526e:	460b      	movlt	r3, r1
 8015270:	802b      	strh	r3, [r5, #0]
 8015272:	e7bc      	b.n	80151ee <lv_img_event+0xba>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 8015274:	4628      	mov	r0, r5
 8015276:	f005 ffc4 	bl	801b202 <lv_event_get_param>
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 801527a:	f9b4 602c 	ldrsh.w	r6, [r4, #44]	; 0x2c
        lv_hit_test_info_t * info = lv_event_get_param(e);
 801527e:	4605      	mov	r5, r0
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8015280:	4620      	mov	r0, r4
 8015282:	f007 fad7 	bl	801c834 <lv_obj_get_width>
 8015286:	4286      	cmp	r6, r0
 8015288:	d14e      	bne.n	8015328 <lv_img_event+0x1f4>
 801528a:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
 801528e:	4620      	mov	r0, r4
 8015290:	f007 fad6 	bl	801c840 <lv_obj_get_height>
 8015294:	4286      	cmp	r6, r0
 8015296:	d147      	bne.n	8015328 <lv_img_event+0x1f4>
 8015298:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801529a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801529e:	d113      	bne.n	80152c8 <lv_img_event+0x194>
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 80152a0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80152a2:	b98b      	cbnz	r3, 80152c8 <lv_img_event+0x194>
 80152a4:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80152a8:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 80152ac:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80152b0:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 80152b4:	d108      	bne.n	80152c8 <lv_img_event+0x194>
 80152b6:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 80152ba:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80152be:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80152c2:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 80152c6:	d02f      	beq.n	8015328 <lv_img_event+0x1f4>
            lv_coord_t w = lv_obj_get_width(obj);
 80152c8:	4620      	mov	r0, r4
 80152ca:	f007 fab3 	bl	801c834 <lv_obj_get_width>
 80152ce:	4606      	mov	r6, r0
            lv_coord_t h = lv_obj_get_height(obj);
 80152d0:	4620      	mov	r0, r4
 80152d2:	f007 fab5 	bl	801c840 <lv_obj_get_height>
            _lv_img_buf_get_transformed_area(&coords, w, h, img->angle, img->zoom, &img->pivot);
 80152d6:	f104 0132 	add.w	r1, r4, #50	; 0x32
 80152da:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
            lv_coord_t h = lv_obj_get_height(obj);
 80152de:	4602      	mov	r2, r0
            _lv_img_buf_get_transformed_area(&coords, w, h, img->angle, img->zoom, &img->pivot);
 80152e0:	9101      	str	r1, [sp, #4]
 80152e2:	a810      	add	r0, sp, #64	; 0x40
 80152e4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80152e6:	9100      	str	r1, [sp, #0]
 80152e8:	4631      	mov	r1, r6
 80152ea:	f00a f883 	bl	801f3f4 <_lv_img_buf_get_transformed_area>
            coords.x1 += obj->coords.x1;
 80152ee:	8aa2      	ldrh	r2, [r4, #20]
 80152f0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
            coords.y1 += obj->coords.y1;
 80152f4:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
            coords.x1 += obj->coords.x1;
 80152f8:	4413      	add	r3, r2
 80152fa:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            coords.y1 += obj->coords.y1;
 80152fe:	8ae3      	ldrh	r3, [r4, #22]
 8015300:	4419      	add	r1, r3
 8015302:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            coords.x2 += obj->coords.x1;
 8015306:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 801530a:	440a      	add	r2, r1
 801530c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            coords.y2 += obj->coords.y1;
 8015310:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8015314:	4413      	add	r3, r2
 8015316:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 801531a:	2200      	movs	r2, #0
 801531c:	6829      	ldr	r1, [r5, #0]
 801531e:	a810      	add	r0, sp, #64	; 0x40
 8015320:	f00e fff4 	bl	802430c <_lv_area_is_point_on>
 8015324:	7128      	strb	r0, [r5, #4]
 8015326:	e762      	b.n	80151ee <lv_img_event+0xba>
            lv_obj_get_click_area(obj, &a);
 8015328:	a910      	add	r1, sp, #64	; 0x40
 801532a:	4620      	mov	r0, r4
 801532c:	f007 fd62 	bl	801cdf4 <lv_obj_get_click_area>
 8015330:	e7f3      	b.n	801531a <lv_img_event+0x1e6>
        lv_point_t * p = lv_event_get_param(e);
 8015332:	4628      	mov	r0, r5
 8015334:	f005 ff65 	bl	801b202 <lv_event_get_param>
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8015338:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
        lv_point_t * p = lv_event_get_param(e);
 801533c:	4605      	mov	r5, r0
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 801533e:	f003 0303 	and.w	r3, r3, #3
 8015342:	2b01      	cmp	r3, #1
 8015344:	d107      	bne.n	8015356 <lv_img_event+0x222>
            *p = lv_img_get_transformed_size(obj);
 8015346:	4620      	mov	r0, r4
 8015348:	f011 fc3d 	bl	8026bc6 <lv_img_get_transformed_size>
 801534c:	8028      	strh	r0, [r5, #0]
 801534e:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8015352:	8068      	strh	r0, [r5, #2]
 8015354:	e74b      	b.n	80151ee <lv_img_event+0xba>
            p->x = img->w;
 8015356:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 801535a:	8003      	strh	r3, [r0, #0]
            p->y = img->h;
 801535c:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 8015360:	8043      	strh	r3, [r0, #2]
 8015362:	e744      	b.n	80151ee <lv_img_event+0xba>
        if(img->cf != LV_IMG_CF_TRUE_COLOR && img->cf != LV_IMG_CF_RAW) {
 8015364:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8015368:	2b10      	cmp	r3, #16
 801536a:	d002      	beq.n	8015372 <lv_img_event+0x23e>
 801536c:	2b04      	cmp	r3, #4
 801536e:	f47f af05 	bne.w	801517c <lv_img_event+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 8015372:	2246      	movs	r2, #70	; 0x46
 8015374:	2100      	movs	r1, #0
 8015376:	4620      	mov	r0, r4
 8015378:	f008 fb82 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801537c:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_img_opa(obj, LV_PART_MAIN) != LV_OPA_COVER) {
 801537e:	28ff      	cmp	r0, #255	; 0xff
 8015380:	f47f aefc 	bne.w	801517c <lv_img_event+0x48>
        if(img->angle != 0) {
 8015384:	8e27      	ldrh	r7, [r4, #48]	; 0x30
 8015386:	2f00      	cmp	r7, #0
 8015388:	f47f aef8 	bne.w	801517c <lv_img_event+0x48>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801538c:	4628      	mov	r0, r5
 801538e:	f005 ff38 	bl	801b202 <lv_event_get_param>
        if(img->zoom == LV_IMG_ZOOM_NONE) {
 8015392:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        const lv_area_t * clip_area = lv_event_get_param(e);
 8015394:	4605      	mov	r5, r0
        if(img->zoom == LV_IMG_ZOOM_NONE) {
 8015396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801539a:	d108      	bne.n	80153ae <lv_img_event+0x27a>
            if(_lv_area_is_in(clip_area, &obj->coords, 0) == false) {
 801539c:	463a      	mov	r2, r7
 801539e:	f104 0114 	add.w	r1, r4, #20
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 80153a2:	f00f f865 	bl	8024470 <_lv_area_is_in>
 80153a6:	2800      	cmp	r0, #0
 80153a8:	f47f af21 	bne.w	80151ee <lv_img_event+0xba>
 80153ac:	e6e6      	b.n	801517c <lv_img_event+0x48>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(obj), lv_obj_get_height(obj), 0, img->zoom, &img->pivot);
 80153ae:	4620      	mov	r0, r4
 80153b0:	f007 fa40 	bl	801c834 <lv_obj_get_width>
 80153b4:	4680      	mov	r8, r0
 80153b6:	4620      	mov	r0, r4
 80153b8:	f007 fa42 	bl	801c840 <lv_obj_get_height>
 80153bc:	f104 0332 	add.w	r3, r4, #50	; 0x32
 80153c0:	4602      	mov	r2, r0
 80153c2:	4641      	mov	r1, r8
 80153c4:	9301      	str	r3, [sp, #4]
 80153c6:	a810      	add	r0, sp, #64	; 0x40
 80153c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80153ca:	9300      	str	r3, [sp, #0]
 80153cc:	463b      	mov	r3, r7
 80153ce:	f00a f811 	bl	801f3f4 <_lv_img_buf_get_transformed_area>
            a.x1 += obj->coords.x1;
 80153d2:	8aa2      	ldrh	r2, [r4, #20]
 80153d4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 80153d8:	4628      	mov	r0, r5
            a.y1 += obj->coords.y1;
 80153da:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
            a.x1 += obj->coords.x1;
 80153de:	4413      	add	r3, r2
 80153e0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            a.y1 += obj->coords.y1;
 80153e4:	8ae3      	ldrh	r3, [r4, #22]
 80153e6:	4419      	add	r1, r3
 80153e8:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            a.x2 += obj->coords.x1;
 80153ec:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 80153f0:	440a      	add	r2, r1
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 80153f2:	a910      	add	r1, sp, #64	; 0x40
            a.x2 += obj->coords.x1;
 80153f4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            a.y2 += obj->coords.y1;
 80153f8:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 80153fc:	4413      	add	r3, r2
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 80153fe:	463a      	mov	r2, r7
            a.y2 += obj->coords.y1;
 8015400:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 8015404:	e7cd      	b.n	80153a2 <lv_img_event+0x26e>
 8015406:	bf00      	nop
 8015408:	080299c0 	.word	0x080299c0
            }
        }
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 801540c:	2e15      	cmp	r6, #21
 801540e:	d002      	beq.n	8015416 <lv_img_event+0x2e2>
 8015410:	2e18      	cmp	r6, #24
 8015412:	f47f aeec 	bne.w	80151ee <lv_img_event+0xba>

        lv_coord_t obj_w = lv_obj_get_width(obj);
 8015416:	4620      	mov	r0, r4
 8015418:	f007 fa0c 	bl	801c834 <lv_obj_get_width>
 801541c:	4682      	mov	sl, r0
        lv_coord_t obj_h = lv_obj_get_height(obj);
 801541e:	4620      	mov	r0, r4
 8015420:	f007 fa0e 	bl	801c840 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8015424:	2232      	movs	r2, #50	; 0x32
 8015426:	2100      	movs	r1, #0
 8015428:	4683      	mov	fp, r0
 801542a:	4620      	mov	r0, r4
 801542c:	f008 fb28 	bl	801da80 <lv_obj_get_style_prop>
 8015430:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8015432:	2212      	movs	r2, #18
 8015434:	2100      	movs	r1, #0
 8015436:	4620      	mov	r0, r4

        lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
        lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8015438:	fa1f f788 	uxth.w	r7, r8
 801543c:	f008 fb20 	bl	801da80 <lv_obj_get_style_prop>
 8015440:	fa10 f888 	uxtah	r8, r0, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8015444:	2213      	movs	r2, #19
 8015446:	2100      	movs	r1, #0
 8015448:	fa1f f388 	uxth.w	r3, r8
 801544c:	4620      	mov	r0, r4
 801544e:	9302      	str	r3, [sp, #8]
 8015450:	f008 fb16 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8015454:	2210      	movs	r2, #16
 8015456:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8015458:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801545a:	4620      	mov	r0, r4
 801545c:	f008 fb10 	bl	801da80 <lv_obj_get_style_prop>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
        lv_coord_t ptop = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8015460:	4438      	add	r0, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8015462:	2211      	movs	r2, #17
 8015464:	2100      	movs	r1, #0
 8015466:	b283      	uxth	r3, r0
 8015468:	4620      	mov	r0, r4
 801546a:	9303      	str	r3, [sp, #12]
 801546c:	f008 fb08 	bl	801da80 <lv_obj_get_style_prop>
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;

        lv_point_t bg_pivot;
        bg_pivot.x = img->pivot.x + pleft;
 8015470:	9a02      	ldr	r2, [sp, #8]
 8015472:	4681      	mov	r9, r0
 8015474:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015476:	4413      	add	r3, r2
        bg_pivot.y = img->pivot.y + ptop;
 8015478:	9a03      	ldr	r2, [sp, #12]
        bg_pivot.x = img->pivot.x + pleft;
 801547a:	f8ad 3020 	strh.w	r3, [sp, #32]
        bg_pivot.y = img->pivot.y + ptop;
 801547e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015480:	4413      	add	r3, r2
 8015482:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        lv_area_t bg_coords;

        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8015486:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801548a:	f003 0303 	and.w	r3, r3, #3
 801548e:	2b01      	cmp	r3, #1
 8015490:	f040 8104 	bne.w	801569c <lv_img_event+0x568>
            /*Object size equals to transformed image size*/
            lv_obj_get_coords(obj, &bg_coords);
 8015494:	a90a      	add	r1, sp, #40	; 0x28
 8015496:	4620      	mov	r0, r4
 8015498:	f007 f97c 	bl	801c794 <lv_obj_get_coords>
    dest->x1 = src->x1;
 801549c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80154a0:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80154a4:	82a1      	strh	r1, [r4, #20]
    dest->y1 = src->y1;
 80154a6:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 80154aa:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80154ae:	82e1      	strh	r1, [r4, #22]
    dest->x2 = src->x2;
 80154b0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80154b4:	f9b4 b018 	ldrsh.w	fp, [r4, #24]
 80154b8:	8321      	strh	r1, [r4, #24]
    dest->y2 = src->y2;
 80154ba:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80154be:	f9b4 a01a 	ldrsh.w	sl, [r4, #26]

        lv_area_t ori_coords;
        lv_area_copy(&ori_coords, &obj->coords);
        lv_area_copy(&obj->coords, &bg_coords);

        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 80154c2:	48b8      	ldr	r0, [pc, #736]	; (80157a4 <lv_img_event+0x670>)
 80154c4:	8361      	strh	r1, [r4, #26]
 80154c6:	4629      	mov	r1, r5
    dest->x1 = src->x1;
 80154c8:	9205      	str	r2, [sp, #20]
    dest->y1 = src->y1;
 80154ca:	9304      	str	r3, [sp, #16]
 80154cc:	f005 fe7b 	bl	801b1c6 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 80154d0:	2801      	cmp	r0, #1
 80154d2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80154d6:	f47f ae8a 	bne.w	80151ee <lv_img_event+0xba>

        lv_area_copy(&obj->coords, &ori_coords);

        if(code == LV_EVENT_DRAW_MAIN) {
 80154da:	2e15      	cmp	r6, #21
    dest->x1 = src->x1;
 80154dc:	82a2      	strh	r2, [r4, #20]
    dest->y1 = src->y1;
 80154de:	82e3      	strh	r3, [r4, #22]
    dest->x2 = src->x2;
 80154e0:	f8a4 b018 	strh.w	fp, [r4, #24]
    dest->y2 = src->y2;
 80154e4:	f8a4 a01a 	strh.w	sl, [r4, #26]
 80154e8:	f47f ae81 	bne.w	80151ee <lv_img_event+0xba>
            if(img->h == 0 || img->w == 0) return;
 80154ec:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	f43f ae7c 	beq.w	80151ee <lv_img_event+0xba>
 80154f6:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	f43f ae77 	beq.w	80151ee <lv_img_event+0xba>
            if(img->zoom == 0) return;
 8015500:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015502:	2b00      	cmp	r3, #0
 8015504:	f43f ae73 	beq.w	80151ee <lv_img_event+0xba>

            lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8015508:	4628      	mov	r0, r5
 801550a:	f005 fecb 	bl	801b2a4 <lv_event_get_draw_ctx>
 801550e:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 8015512:	4606      	mov	r6, r0

            lv_area_t img_max_area;
            lv_area_copy(&img_max_area, &obj->coords);

            lv_point_t img_size_final = lv_img_get_transformed_size(obj);
 8015514:	4620      	mov	r0, r4
 8015516:	9206      	str	r2, [sp, #24]
    dest->x1 = src->x1;
 8015518:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
    dest->y1 = src->y1;
 801551c:	f9b4 a016 	ldrsh.w	sl, [r4, #22]
    dest->x2 = src->x2;
 8015520:	f9b4 b018 	ldrsh.w	fp, [r4, #24]
 8015524:	f011 fb4f 	bl	8026bc6 <lv_img_get_transformed_size>
 8015528:	b203      	sxth	r3, r0

            if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 801552a:	9a06      	ldr	r2, [sp, #24]
            lv_point_t img_size_final = lv_img_get_transformed_size(obj);
 801552c:	9009      	str	r0, [sp, #36]	; 0x24
 801552e:	9305      	str	r3, [sp, #20]
 8015530:	1403      	asrs	r3, r0, #16
 8015532:	9304      	str	r3, [sp, #16]
            if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8015534:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8015538:	f003 0303 	and.w	r3, r3, #3
 801553c:	2b01      	cmp	r3, #1
 801553e:	f040 80cf 	bne.w	80156e0 <lv_img_event+0x5ac>
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 8015542:	9905      	ldr	r1, [sp, #20]
 8015544:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8015548:	1a5b      	subs	r3, r3, r1
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 801554a:	9904      	ldr	r1, [sp, #16]
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 801554c:	3301      	adds	r3, #1
 801554e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8015552:	105b      	asrs	r3, r3, #1
 8015554:	425b      	negs	r3, r3
 8015556:	fa15 f583 	uxtah	r5, r5, r3
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
 801555a:	fa1b f383 	uxtah	r3, fp, r3
 801555e:	fa0f fb83 	sxth.w	fp, r3
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 8015562:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 8015566:	b22d      	sxth	r5, r5
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 8015568:	1a5b      	subs	r3, r3, r1
 801556a:	3301      	adds	r3, #1
 801556c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8015570:	105b      	asrs	r3, r3, #1
 8015572:	425b      	negs	r3, r3
 8015574:	fa1a fa83 	uxtah	sl, sl, r3
                img_max_area.y2 -= ((img->h - img_size_final.y) + 1) / 2;
 8015578:	fa12 f383 	uxtah	r3, r2, r3
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 801557c:	fa0f fa8a 	sxth.w	sl, sl
            img_max_area.x1 += pleft;
            img_max_area.y1 += ptop;
            img_max_area.x2 -= pright;
            img_max_area.y2 -= pbottom;

            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_VARIABLE) {
 8015580:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 8015584:	b21b      	sxth	r3, r3
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_VARIABLE) {
 8015586:	f012 0102 	ands.w	r1, r2, #2
 801558a:	f040 80ed 	bne.w	8015768 <lv_img_event+0x634>
                lv_draw_img_dsc_t img_dsc;
                lv_draw_img_dsc_init(&img_dsc);
 801558e:	a810      	add	r0, sp, #64	; 0x40
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8015590:	44b8      	add	r8, r7
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8015592:	444f      	add	r7, r9
                img_clip_area.y1 = bg_coords.y1 + ptop;
                img_clip_area.x2 = bg_coords.x2 - pright;
                img_clip_area.y2 = bg_coords.y2 - pbottom;
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;

                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 8015594:	f10d 0930 	add.w	r9, sp, #48	; 0x30
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8015598:	fa1f f888 	uxth.w	r8, r8
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 801559c:	b2bf      	uxth	r7, r7
                lv_draw_img_dsc_init(&img_dsc);
 801559e:	e9cd 1306 	strd	r1, r3, [sp, #24]
 80155a2:	f009 f927 	bl	801e7f4 <lv_draw_img_dsc_init>
                lv_obj_init_draw_img_dsc(obj, LV_PART_MAIN, &img_dsc);
 80155a6:	aa10      	add	r2, sp, #64	; 0x40
 80155a8:	9906      	ldr	r1, [sp, #24]
 80155aa:	4620      	mov	r0, r4
 80155ac:	f006 fe0b 	bl	801c1c6 <lv_obj_init_draw_img_dsc>
                img_dsc.zoom = img->zoom;
 80155b0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
                img_dsc.antialias = img->antialias;
 80155b2:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 80155b6:	4648      	mov	r0, r9
                img_dsc.zoom = img->zoom;
 80155b8:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
                img_dsc.angle = img->angle;
 80155bc:	8e22      	ldrh	r2, [r4, #48]	; 0x30
                img_clip_area.x1 = bg_coords.x1 + pleft;
 80155be:	9b02      	ldr	r3, [sp, #8]
                img_dsc.angle = img->angle;
 80155c0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
                img_dsc.pivot.x = img->pivot.x;
 80155c4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80155c6:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
                img_dsc.pivot.y = img->pivot.y;
 80155ca:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80155cc:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
                img_dsc.antialias = img->antialias;
 80155d0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80155d4:	09d2      	lsrs	r2, r2, #7
 80155d6:	f362 0100 	bfi	r1, r2, #0, #1
                img_clip_area.x1 = bg_coords.x1 + pleft;
 80155da:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80155de:	441a      	add	r2, r3
                img_clip_area.y1 = bg_coords.y1 + ptop;
 80155e0:	9b03      	ldr	r3, [sp, #12]
                img_dsc.antialias = img->antialias;
 80155e2:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
                img_clip_area.x1 = bg_coords.x1 + pleft;
 80155e6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
                img_clip_area.y1 = bg_coords.y1 + ptop;
 80155ea:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80155ee:	441a      	add	r2, r3
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80155f0:	68b3      	ldr	r3, [r6, #8]
                img_clip_area.y1 = bg_coords.y1 + ptop;
 80155f2:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 80155f6:	4619      	mov	r1, r3
                img_clip_area.x2 = bg_coords.x2 - pright;
 80155f8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80155fc:	9306      	str	r3, [sp, #24]
                img_clip_area.x2 = bg_coords.x2 - pright;
 80155fe:	eba2 0208 	sub.w	r2, r2, r8
 8015602:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 8015606:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801560a:	1bd2      	subs	r2, r2, r7
 801560c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 8015610:	464a      	mov	r2, r9
 8015612:	f00e fe2e 	bl	8024272 <_lv_area_intersect>
 8015616:	2800      	cmp	r0, #0
 8015618:	f43f ade9 	beq.w	80151ee <lv_img_event+0xba>
                draw_ctx->clip_area = &img_clip_area;
 801561c:	f8c6 9008 	str.w	r9, [r6, #8]
            img_max_area.x2 -= pright;
 8015620:	ebab 0808 	sub.w	r8, fp, r8

                lv_area_t coords_tmp;
                lv_coord_t offset_x = img->offset.x % img->w;
 8015624:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8015628:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	; 0x28
            img_max_area.x2 -= pright;
 801562c:	fa0f f888 	sxth.w	r8, r8
            img_max_area.y1 += ptop;
 8015630:	9b03      	ldr	r3, [sp, #12]
                lv_coord_t offset_x = img->offset.x % img->w;
 8015632:	fb91 f0f2 	sdiv	r0, r1, r2
 8015636:	fb02 1110 	mls	r1, r2, r0, r1
                lv_coord_t offset_y = img->offset.y % img->h;
 801563a:	f9b4 002e 	ldrsh.w	r0, [r4, #46]	; 0x2e
 801563e:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
            img_max_area.y1 += ptop;
 8015642:	4453      	add	r3, sl
                lv_coord_t offset_y = img->offset.y % img->h;
 8015644:	fb92 fcf0 	sdiv	ip, r2, r0
 8015648:	fb00 221c 	mls	r2, r0, ip, r2
                coords_tmp.y1 = img_max_area.y1 + offset_y;
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 801564c:	fa0f fa83 	sxth.w	sl, r3
                coords_tmp.y1 = img_max_area.y1 + offset_y;
 8015650:	fa12 f283 	uxtah	r2, r2, r3
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 8015654:	9b07      	ldr	r3, [sp, #28]
                coords_tmp.y1 = img_max_area.y1 + offset_y;
 8015656:	fa1f fc82 	uxth.w	ip, r2
            img_max_area.y2 -= pbottom;
 801565a:	1bdf      	subs	r7, r3, r7
                coords_tmp.y1 = img_max_area.y1 + offset_y;
 801565c:	b212      	sxth	r2, r2
            img_max_area.y2 -= pbottom;
 801565e:	b23f      	sxth	r7, r7
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 8015660:	4592      	cmp	sl, r2
 8015662:	bfbc      	itt	lt
 8015664:	ebac 0c00 	sublt.w	ip, ip, r0
 8015668:	fa0f f28c 	sxthlt.w	r2, ip
            img_max_area.x1 += pleft;
 801566c:	f8dd c008 	ldr.w	ip, [sp, #8]
                coords_tmp.y1 = img_max_area.y1 + offset_y;
 8015670:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
            img_max_area.x1 += pleft;
 8015674:	44ac      	add	ip, r5
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 8015676:	3a01      	subs	r2, #1

                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
                    coords_tmp.x1 = img_max_area.x1 + offset_x;
 8015678:	fa11 f58c 	uxtah	r5, r1, ip
            img_max_area.x1 += pleft;
 801567c:	fa0f fa8c 	sxth.w	sl, ip
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 8015680:	4402      	add	r2, r0
                    coords_tmp.x1 = img_max_area.x1 + offset_x;
 8015682:	fa1f fb85 	uxth.w	fp, r5
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 8015686:	b212      	sxth	r2, r2
                    coords_tmp.x1 = img_max_area.x1 + offset_x;
 8015688:	b22d      	sxth	r5, r5
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 801568a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 801568e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 8015692:	42bb      	cmp	r3, r7
 8015694:	db33      	blt.n	80156fe <lv_img_event+0x5ca>

                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
                    }
                }
                draw_ctx->clip_area = clip_area_ori;
 8015696:	9b06      	ldr	r3, [sp, #24]
 8015698:	60b3      	str	r3, [r6, #8]
 801569a:	e5a8      	b.n	80151ee <lv_img_event+0xba>
            _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 801569c:	aa08      	add	r2, sp, #32
 801569e:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80156a2:	4651      	mov	r1, sl
 80156a4:	a80a      	add	r0, sp, #40	; 0x28
 80156a6:	9201      	str	r2, [sp, #4]
 80156a8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80156aa:	9200      	str	r2, [sp, #0]
 80156ac:	465a      	mov	r2, fp
 80156ae:	f009 fea1 	bl	801f3f4 <_lv_img_buf_get_transformed_area>
            bg_coords.x1 += obj->coords.x1;
 80156b2:	8aa2      	ldrh	r2, [r4, #20]
 80156b4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
            bg_coords.y1 += obj->coords.y1;
 80156b8:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
            bg_coords.x1 += obj->coords.x1;
 80156bc:	4413      	add	r3, r2
 80156be:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            bg_coords.y1 += obj->coords.y1;
 80156c2:	8ae3      	ldrh	r3, [r4, #22]
 80156c4:	4419      	add	r1, r3
 80156c6:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            bg_coords.x2 += obj->coords.x1;
 80156ca:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80156ce:	440a      	add	r2, r1
 80156d0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            bg_coords.y2 += obj->coords.y1;
 80156d4:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80156d8:	4413      	add	r3, r2
 80156da:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80156de:	e6dd      	b.n	801549c <lv_img_event+0x368>
                img_max_area.x2 = img_max_area.x1 + lv_area_get_width(&bg_coords) - 1;
 80156e0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80156e4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80156e8:	1a9b      	subs	r3, r3, r2
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 80156ea:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
                img_max_area.x2 = img_max_area.x1 + lv_area_get_width(&bg_coords) - 1;
 80156ee:	442b      	add	r3, r5
 80156f0:	fa0f fb83 	sxth.w	fp, r3
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 80156f4:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80156f8:	1a9b      	subs	r3, r3, r2
 80156fa:	4453      	add	r3, sl
 80156fc:	e740      	b.n	8015580 <lv_img_event+0x44c>
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 80156fe:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8015700:	45aa      	cmp	sl, r5
                    coords_tmp.x1 = img_max_area.x1 + offset_x;
 8015702:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 8015706:	bfb8      	it	lt
 8015708:	ebab 0203 	sublt.w	r2, fp, r3
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 801570c:	f8bd 9014 	ldrh.w	r9, [sp, #20]
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 8015710:	bfb8      	it	lt
 8015712:	f8ad 2038 	strhlt.w	r2, [sp, #56]	; 0x38
                    coords_tmp.x2 = coords_tmp.x1 + img->w - 1;
 8015716:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801571a:	3a01      	subs	r2, #1
 801571c:	4413      	add	r3, r2
 801571e:	b21b      	sxth	r3, r3
 8015720:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 8015724:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8015728:	4543      	cmp	r3, r8
 801572a:	db0d      	blt.n	8015748 <lv_img_event+0x614>
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 801572c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8015730:	9a04      	ldr	r2, [sp, #16]
 8015732:	fa13 f382 	uxtah	r3, r3, r2
 8015736:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801573a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801573e:	9b04      	ldr	r3, [sp, #16]
 8015740:	fa12 f283 	uxtah	r2, r2, r3
 8015744:	b212      	sxth	r2, r2
 8015746:	e7a0      	b.n	801568a <lv_img_event+0x556>
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
 8015748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801574a:	aa0e      	add	r2, sp, #56	; 0x38
 801574c:	a910      	add	r1, sp, #64	; 0x40
 801574e:	4630      	mov	r0, r6
 8015750:	f7f2 f994 	bl	8007a7c <lv_draw_img>
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 8015754:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015758:	444b      	add	r3, r9
 801575a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801575e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015762:	444b      	add	r3, r9
 8015764:	b21b      	sxth	r3, r3
 8015766:	e7db      	b.n	8015720 <lv_img_event+0x5ec>
            }
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 8015768:	f002 0203 	and.w	r2, r2, #3
        lv_area_copy(&ori_coords, &obj->coords);
 801576c:	f104 0514 	add.w	r5, r4, #20
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 8015770:	2a02      	cmp	r2, #2
 8015772:	d110      	bne.n	8015796 <lv_img_event+0x662>
                lv_draw_label_dsc_t label_dsc;
                lv_draw_label_dsc_init(&label_dsc);
 8015774:	a810      	add	r0, sp, #64	; 0x40
 8015776:	f7f2 fa97 	bl	8007ca8 <lv_draw_label_dsc_init>
                lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 801577a:	aa10      	add	r2, sp, #64	; 0x40
 801577c:	4620      	mov	r0, r4
 801577e:	2100      	movs	r1, #0
 8015780:	f006 fcd5 	bl	801c12e <lv_obj_init_draw_label_dsc>

                lv_draw_label(draw_ctx, &label_dsc, &obj->coords, img->src, NULL);
 8015784:	2300      	movs	r3, #0
 8015786:	462a      	mov	r2, r5
 8015788:	a910      	add	r1, sp, #64	; 0x40
 801578a:	9300      	str	r3, [sp, #0]
 801578c:	4630      	mov	r0, r6
 801578e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015790:	f7f2 faa2 	bl	8007cd8 <lv_draw_label>
 8015794:	e52b      	b.n	80151ee <lv_img_event+0xba>
            }
            else {
                /*Trigger the error handler of image draw*/
                LV_LOG_WARN("draw_img: image source type is unknown");
                lv_draw_img(draw_ctx, NULL, &obj->coords, NULL);
 8015796:	2300      	movs	r3, #0
 8015798:	462a      	mov	r2, r5
 801579a:	4630      	mov	r0, r6
 801579c:	4619      	mov	r1, r3
 801579e:	f7f2 f96d 	bl	8007a7c <lv_draw_img>
 80157a2:	e524      	b.n	80151ee <lv_img_event+0xba>
 80157a4:	080299c0 	.word	0x080299c0

080157a8 <lv_label_revert_dots>:
    lv_obj_invalidate(obj);
}


static void lv_label_revert_dots(lv_obj_t * obj)
{
 80157a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    lv_label_t * label = (lv_label_t *)obj;

    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 80157aa:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 80157ae:	4604      	mov	r4, r0
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 80157b0:	f003 0307 	and.w	r3, r3, #7
 80157b4:	2b01      	cmp	r3, #1
 80157b6:	d120      	bne.n	80157fa <lv_label_revert_dots+0x52>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 80157b8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80157ba:	1c4a      	adds	r2, r1, #1
 80157bc:	d01d      	beq.n	80157fa <lv_label_revert_dots+0x52>
    uint32_t letter_i = label->dot_end - LV_LABEL_DOT_NUM;
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 80157be:	4b0f      	ldr	r3, [pc, #60]	; (80157fc <lv_label_revert_dots+0x54>)
 80157c0:	3903      	subs	r1, #3
 80157c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	4798      	blx	r3
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * obj)
{
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc) {
 80157c8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80157cc:	065b      	lsls	r3, r3, #25
    while(label->text[byte_i + i] != '\0') {
 80157ce:	f04f 0300 	mov.w	r3, #0
        return label->dot.tmp_ptr;
 80157d2:	bf4c      	ite	mi
 80157d4:	6aa6      	ldrmi	r6, [r4, #40]	; 0x28
    }
    else {
        return label->dot.tmp;
 80157d6:	f104 0628 	addpl.w	r6, r4, #40	; 0x28
    while(label->text[byte_i + i] != '\0') {
 80157da:	fa50 f283 	uxtab	r2, r0, r3
 80157de:	b2dd      	uxtb	r5, r3
 80157e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80157e2:	3301      	adds	r3, #1
        label->text[byte_i + i] = dot_tmp[i];
 80157e4:	5d75      	ldrb	r5, [r6, r5]
    while(label->text[byte_i + i] != '\0') {
 80157e6:	5c8f      	ldrb	r7, [r1, r2]
        label->text[byte_i + i] = dot_tmp[i];
 80157e8:	548d      	strb	r5, [r1, r2]
    while(label->text[byte_i + i] != '\0') {
 80157ea:	2f00      	cmp	r7, #0
 80157ec:	d1f5      	bne.n	80157da <lv_label_revert_dots+0x32>
    lv_label_dot_tmp_free(obj);
 80157ee:	4620      	mov	r0, r4
 80157f0:	f011 faff 	bl	8026df2 <lv_label_dot_tmp_free>
    label->dot_end = LV_LABEL_DOT_END_INV;
 80157f4:	f04f 33ff 	mov.w	r3, #4294967295
 80157f8:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80157fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157fc:	240000f8 	.word	0x240000f8

08015800 <lv_label_get_letter_on.part.0>:
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 8015800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015804:	460d      	mov	r5, r1
 8015806:	b091      	sub	sp, #68	; 0x44
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8015808:	f9b1 3000 	ldrsh.w	r3, [r1]
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 801580c:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801580e:	2212      	movs	r2, #18
 8015810:	2100      	movs	r1, #0
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8015812:	9305      	str	r3, [sp, #20]
 8015814:	f008 f934 	bl	801da80 <lv_obj_get_style_prop>
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8015818:	886d      	ldrh	r5, [r5, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801581a:	2210      	movs	r2, #16
 801581c:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801581e:	9008      	str	r0, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8015820:	4620      	mov	r0, r4
 8015822:	f008 f92d 	bl	801da80 <lv_obj_get_style_prop>
 8015826:	1a2d      	subs	r5, r5, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 8015828:	a90e      	add	r1, sp, #56	; 0x38
 801582a:	4620      	mov	r0, r4
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801582c:	b22b      	sxth	r3, r5
 801582e:	9306      	str	r3, [sp, #24]
    lv_obj_get_content_coords(obj, &txt_coords);
 8015830:	f007 f838 	bl	801c8a4 <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015834:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8015838:	4620      	mov	r0, r4
 801583a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801583e:	3301      	adds	r3, #1
    return label->text;
 8015840:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
 8015844:	1a9b      	subs	r3, r3, r2
 8015846:	b21b      	sxth	r3, r3
 8015848:	9307      	str	r3, [sp, #28]
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801584a:	f011 fb0a 	bl	8026e62 <lv_obj_get_style_text_font.constprop.0>
 801584e:	9003      	str	r0, [sp, #12]
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8015850:	4620      	mov	r0, r4
 8015852:	f011 faf8 	bl	8026e46 <lv_obj_get_style_text_line_space.constprop.0>
 8015856:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8015858:	4620      	mov	r0, r4
 801585a:	f011 fafb 	bl	8026e54 <lv_obj_get_style_text_letter_space.constprop.0>
 801585e:	9b03      	ldr	r3, [sp, #12]
 8015860:	9004      	str	r0, [sp, #16]
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8015862:	4620      	mov	r0, r4
 8015864:	f9b3 8008 	ldrsh.w	r8, [r3, #8]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015868:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801586c:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801586e:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015872:	bf48      	it	mi
 8015874:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8015878:	f011 faf9 	bl	8026e6e <lv_obj_get_style_width.constprop.0>
 801587c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8015880:	4298      	cmp	r0, r3
 8015882:	d105      	bne.n	8015890 <lv_label_get_letter_on.part.0+0x90>
 8015884:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8015888:	075b      	lsls	r3, r3, #29
 801588a:	bf58      	it	pl
 801588c:	f047 0704 	orrpl.w	r7, r7, #4
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8015890:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015892:	4620      	mov	r0, r4
    lv_coord_t y             = 0;
 8015894:	2400      	movs	r4, #0
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8015896:	2100      	movs	r1, #0
 8015898:	f008 fc2b 	bl	801e0f2 <lv_obj_calculate_style_text_align>
        y += letter_height + line_space;
 801589c:	eb08 0305 	add.w	r3, r8, r5
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 80158a0:	4683      	mov	fp, r0
    uint32_t line_start      = 0;
 80158a2:	4626      	mov	r6, r4
        y += letter_height + line_space;
 80158a4:	9309      	str	r3, [sp, #36]	; 0x24
    while(txt[line_start] != '\0') {
 80158a6:	f819 3006 	ldrb.w	r3, [r9, r6]
 80158aa:	eb09 0a06 	add.w	sl, r9, r6
 80158ae:	b90b      	cbnz	r3, 80158b4 <lv_label_get_letter_on.part.0+0xb4>
 80158b0:	4635      	mov	r5, r6
 80158b2:	e01a      	b.n	80158ea <lv_label_get_letter_on.part.0+0xea>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80158b4:	2300      	movs	r3, #0
 80158b6:	4650      	mov	r0, sl
 80158b8:	9701      	str	r7, [sp, #4]
 80158ba:	9300      	str	r3, [sp, #0]
 80158bc:	9b07      	ldr	r3, [sp, #28]
 80158be:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 80158c2:	f7fd f9f7 	bl	8012cb4 <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
 80158c6:	eb04 0308 	add.w	r3, r4, r8
 80158ca:	9a06      	ldr	r2, [sp, #24]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80158cc:	1985      	adds	r5, r0, r6
        if(pos.y <= y + letter_height) {
 80158ce:	429a      	cmp	r2, r3
 80158d0:	dc69      	bgt.n	80159a6 <lv_label_get_letter_on.part.0+0x1a6>
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80158d2:	4b44      	ldr	r3, [pc, #272]	; (80159e4 <lv_label_get_letter_on.part.0+0x1e4>)
 80158d4:	a90d      	add	r1, sp, #52	; 0x34
 80158d6:	4648      	mov	r0, r9
            uint32_t tmp = new_line_start;
 80158d8:	950d      	str	r5, [sp, #52]	; 0x34
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 80158de:	280a      	cmp	r0, #10
 80158e0:	d003      	beq.n	80158ea <lv_label_get_letter_on.part.0+0xea>
 80158e2:	f819 3005 	ldrb.w	r3, [r9, r5]
 80158e6:	b903      	cbnz	r3, 80158ea <lv_label_get_letter_on.part.0+0xea>
 80158e8:	3501      	adds	r5, #1
    if(align == LV_TEXT_ALIGN_CENTER) {
 80158ea:	f1bb 0f02 	cmp.w	fp, #2
 80158ee:	d15f      	bne.n	80159b0 <lv_label_get_letter_on.part.0+0x1b0>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80158f0:	1ba9      	subs	r1, r5, r6
 80158f2:	4650      	mov	r0, sl
 80158f4:	9700      	str	r7, [sp, #0]
 80158f6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80158fa:	f00f ff5e 	bl	80257ba <lv_txt_get_width>
 80158fe:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015902:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 8015906:	eb00 74d0 	add.w	r4, r0, r0, lsr #31
 801590a:	3301      	adds	r3, #1
 801590c:	1064      	asrs	r4, r4, #1
 801590e:	1a9b      	subs	r3, r3, r2
 8015910:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8015914:	fa02 f383 	sxtah	r3, r2, r3
 8015918:	ebc4 0463 	rsb	r4, r4, r3, asr #1
        x += lv_area_get_width(&txt_coords) - line_w;
 801591c:	b224      	sxth	r4, r4
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 801591e:	2300      	movs	r3, #0
 8015920:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    uint32_t i = 0;
 8015924:	930b      	str	r3, [sp, #44]	; 0x2c
    if(new_line_start > 0) {
 8015926:	b385      	cbz	r5, 801598a <lv_label_get_letter_on.part.0+0x18a>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8015928:	9a05      	ldr	r2, [sp, #20]
    uint32_t i_act = i;
 801592a:	4698      	mov	r8, r3
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801592c:	9908      	ldr	r1, [sp, #32]
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801592e:	f007 0701 	and.w	r7, r7, #1
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8015932:	eba2 0b01 	sub.w	fp, r2, r1
 8015936:	fa0f fb8b 	sxth.w	fp, fp
        while(i + line_start < new_line_start) {
 801593a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801593c:	4433      	add	r3, r6
 801593e:	429d      	cmp	r5, r3
 8015940:	d923      	bls.n	801598a <lv_label_get_letter_on.part.0+0x18a>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8015942:	ab0b      	add	r3, sp, #44	; 0x2c
 8015944:	aa0d      	add	r2, sp, #52	; 0x34
 8015946:	a90c      	add	r1, sp, #48	; 0x30
 8015948:	4650      	mov	r0, sl
 801594a:	f7fd fb15 	bl	8012f78 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801594e:	b147      	cbz	r7, 8015962 <lv_label_get_letter_on.part.0+0x162>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 8015950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015952:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 8015956:	f81a 1003 	ldrb.w	r1, [sl, r3]
 801595a:	f00f fef6 	bl	802574a <_lv_txt_is_cmd>
 801595e:	2800      	cmp	r0, #0
 8015960:	d1eb      	bne.n	801593a <lv_label_get_letter_on.part.0+0x13a>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 8015962:	9803      	ldr	r0, [sp, #12]
 8015964:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8015968:	f00e fb65 	bl	8024036 <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 801596c:	fa04 f380 	sxtah	r3, r4, r0
 8015970:	459b      	cmp	fp, r3
 8015972:	db08      	blt.n	8015986 <lv_label_get_letter_on.part.0+0x186>
 8015974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015976:	18f2      	adds	r2, r6, r3
 8015978:	4295      	cmp	r5, r2
 801597a:	d004      	beq.n	8015986 <lv_label_get_letter_on.part.0+0x186>
 801597c:	eb09 0206 	add.w	r2, r9, r6
 8015980:	f812 2008 	ldrb.w	r2, [r2, r8]
 8015984:	bb42      	cbnz	r2, 80159d8 <lv_label_get_letter_on.part.0+0x1d8>
                i = i_act;
 8015986:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 801598a:	4d17      	ldr	r5, [pc, #92]	; (80159e8 <lv_label_get_letter_on.part.0+0x1e8>)
 801598c:	4650      	mov	r0, sl
 801598e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015990:	682b      	ldr	r3, [r5, #0]
 8015992:	4798      	blx	r3
 8015994:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 8015996:	682b      	ldr	r3, [r5, #0]
 8015998:	4631      	mov	r1, r6
 801599a:	4648      	mov	r0, r9
 801599c:	4798      	blx	r3
}
 801599e:	4420      	add	r0, r4
 80159a0:	b011      	add	sp, #68	; 0x44
 80159a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + line_space;
 80159a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80159a8:	462e      	mov	r6, r5
 80159aa:	441c      	add	r4, r3
        y += letter_height + line_space;
 80159ac:	b224      	sxth	r4, r4
        line_start = new_line_start;
 80159ae:	e77a      	b.n	80158a6 <lv_label_get_letter_on.part.0+0xa6>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80159b0:	f1bb 0f03 	cmp.w	fp, #3
 80159b4:	d10e      	bne.n	80159d4 <lv_label_get_letter_on.part.0+0x1d4>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80159b6:	1ba9      	subs	r1, r5, r6
 80159b8:	4650      	mov	r0, sl
 80159ba:	9700      	str	r7, [sp, #0]
 80159bc:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80159c0:	f00f fefb 	bl	80257ba <lv_txt_get_width>
 80159c4:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 80159c8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80159cc:	3401      	adds	r4, #1
 80159ce:	1ae4      	subs	r4, r4, r3
        x += lv_area_get_width(&txt_coords) - line_w;
 80159d0:	1a24      	subs	r4, r4, r0
 80159d2:	e7a3      	b.n	801591c <lv_label_get_letter_on.part.0+0x11c>
    lv_coord_t x = 0;
 80159d4:	2400      	movs	r4, #0
 80159d6:	e7a2      	b.n	801591e <lv_label_get_letter_on.part.0+0x11e>
            x += letter_space;
 80159d8:	9a04      	ldr	r2, [sp, #16]
            i_act = i;
 80159da:	4698      	mov	r8, r3
            x += letter_space;
 80159dc:	4414      	add	r4, r2
 80159de:	4420      	add	r0, r4
 80159e0:	b204      	sxth	r4, r0
            i_act = i;
 80159e2:	e7aa      	b.n	801593a <lv_label_get_letter_on.part.0+0x13a>
 80159e4:	240000fc 	.word	0x240000fc
 80159e8:	240000f4 	.word	0x240000f4

080159ec <lv_label_refr_text>:
{
 80159ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(label->text == NULL) return;
 80159f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80159f2:	b09b      	sub	sp, #108	; 0x6c
 80159f4:	4604      	mov	r4, r0
    if(label->text == NULL) return;
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	f000 80df 	beq.w	8015bba <lv_label_refr_text+0x1ce>
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 80159fc:	f04f 33ff 	mov.w	r3, #4294967295
    lv_obj_get_content_coords(obj, &txt_coords);
 8015a00:	a907      	add	r1, sp, #28
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 8015a02:	6303      	str	r3, [r0, #48]	; 0x30
    lv_obj_get_content_coords(obj, &txt_coords);
 8015a04:	f006 ff4e 	bl	801c8a4 <lv_obj_get_content_coords>
 8015a08:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8015a0c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8015a10:	4620      	mov	r0, r4
 8015a12:	3701      	adds	r7, #1
 8015a14:	1aff      	subs	r7, r7, r3
 8015a16:	f011 fa24 	bl	8026e62 <lv_obj_get_style_text_font.constprop.0>
 8015a1a:	4606      	mov	r6, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	f011 fa12 	bl	8026e46 <lv_obj_get_style_text_line_space.constprop.0>
 8015a22:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8015a24:	4620      	mov	r0, r4
 8015a26:	b23f      	sxth	r7, r7
 8015a28:	f011 fa14 	bl	8026e54 <lv_obj_get_style_text_letter_space.constprop.0>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015a2c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8015a30:	4680      	mov	r8, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8015a32:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015a34:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015a36:	f3c3 1900 	ubfx	r9, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015a3a:	bf48      	it	mi
 8015a3c:	f049 0902 	orrmi.w	r9, r9, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8015a40:	f011 fa15 	bl	8026e6e <lv_obj_get_style_width.constprop.0>
 8015a44:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8015a48:	4298      	cmp	r0, r3
 8015a4a:	d105      	bne.n	8015a58 <lv_label_refr_text+0x6c>
 8015a4c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8015a50:	075b      	lsls	r3, r3, #29
 8015a52:	bf58      	it	pl
 8015a54:	f049 0904 	orrpl.w	r9, r9, #4
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 8015a58:	4643      	mov	r3, r8
 8015a5a:	4632      	mov	r2, r6
 8015a5c:	a805      	add	r0, sp, #20
 8015a5e:	9500      	str	r5, [sp, #0]
 8015a60:	e9cd 7901 	strd	r7, r9, [sp, #4]
 8015a64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015a66:	f00f fee7 	bl	8025838 <lv_txt_get_size>
    lv_obj_refresh_self_size(obj);
 8015a6a:	4620      	mov	r0, r4
 8015a6c:	f006 ff57 	bl	801c91e <lv_obj_refresh_self_size>
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 8015a70:	f894 9048 	ldrb.w	r9, [r4, #72]	; 0x48
 8015a74:	f009 0907 	and.w	r9, r9, #7
 8015a78:	f1b9 0f02 	cmp.w	r9, #2
 8015a7c:	f040 80ba 	bne.w	8015bf4 <lv_label_refr_text+0x208>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8015a80:	2265      	movs	r2, #101	; 0x65
 8015a82:	2100      	movs	r1, #0
 8015a84:	4620      	mov	r0, r4
 8015a86:	f007 fffb 	bl	801da80 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8015a8a:	b285      	uxth	r5, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8015a8c:	b945      	cbnz	r5, 8015aa0 <lv_label_refr_text+0xb4>
 8015a8e:	4620      	mov	r0, r4
 8015a90:	f7f0 feec 	bl	800686c <lv_obj_get_disp>
 8015a94:	f7fc fb20 	bl	80120d8 <lv_disp_get_dpi>
 8015a98:	2303      	movs	r3, #3
 8015a9a:	fb90 f5f3 	sdiv	r5, r0, r3
 8015a9e:	b2ad      	uxth	r5, r5
        lv_anim_init(&a);
 8015aa0:	a809      	add	r0, sp, #36	; 0x24
 8015aa2:	2700      	movs	r7, #0
 8015aa4:	f7fc fc2c 	bl	8012300 <lv_anim_init>
    a->repeat_cnt = cnt;
 8015aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015aac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015ab0:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a->playback_delay = delay;
 8015ab4:	f44f 7396 	mov.w	r3, #300	; 0x12c
        if(size.x > lv_area_get_width(&txt_coords)) {
 8015ab8:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8015abc:	9316      	str	r3, [sp, #88]	; 0x58
    a->repeat_delay = delay;
 8015abe:	9318      	str	r3, [sp, #96]	; 0x60
 8015ac0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    a->var = var;
 8015ac4:	9409      	str	r4, [sp, #36]	; 0x24
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	1a5b      	subs	r3, r3, r1
 8015aca:	b21b      	sxth	r3, r3
 8015acc:	429a      	cmp	r2, r3
 8015ace:	dd3f      	ble.n	8015b50 <lv_label_refr_text+0x164>
    a->exec_cb = exec_cb;
 8015ad0:	4999      	ldr	r1, [pc, #612]	; (8015d38 <lv_label_refr_text+0x34c>)
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 8015ad2:	1a9b      	subs	r3, r3, r2
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8015ad4:	4620      	mov	r0, r4
 8015ad6:	910a      	str	r1, [sp, #40]	; 0x28
    a->end_value = end;
 8015ad8:	9313      	str	r3, [sp, #76]	; 0x4c
    a->current_value = start;
 8015ada:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
 8015ade:	f7fc fc9d 	bl	801241c <lv_anim_get>
            if(anim_cur) {
 8015ae2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015ae4:	b9d0      	cbnz	r0, 8015b1c <lv_label_refr_text+0x130>
            if(act_time < a.time) {
 8015ae6:	42b9      	cmp	r1, r7
 8015ae8:	dd06      	ble.n	8015af8 <lv_label_refr_text+0x10c>
                a.early_apply = 0;
 8015aea:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
                a.act_time = act_time;      /*To keep the old position*/
 8015aee:	9015      	str	r0, [sp, #84]	; 0x54
                a.early_apply = 0;
 8015af0:	f360 0300 	bfi	r3, r0, #0, #1
 8015af4:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015af8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015afa:	4628      	mov	r0, r5
 8015afc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015afe:	f00e fb15 	bl	802412c <lv_anim_speed_to_time>
    a->time = duration;
 8015b02:	9014      	str	r0, [sp, #80]	; 0x50
    a->playback_time = time;
 8015b04:	9017      	str	r0, [sp, #92]	; 0x5c
            lv_anim_start(&a);
 8015b06:	a809      	add	r0, sp, #36	; 0x24
 8015b08:	f7fc fc46 	bl	8012398 <lv_anim_start>
            lv_anim_del(obj, set_ofs_y_anim);
 8015b0c:	498b      	ldr	r1, [pc, #556]	; (8015d3c <lv_label_refr_text+0x350>)
 8015b0e:	4620      	mov	r0, r4
 8015b10:	f7fc fc12 	bl	8012338 <lv_anim_del>
            label->offset.y = 0;
 8015b14:	2300      	movs	r3, #0
 8015b16:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8015b1a:	e04b      	b.n	8015bb4 <lv_label_refr_text+0x1c8>
                act_time = anim_cur->act_time;
 8015b1c:	6b02      	ldr	r2, [r0, #48]	; 0x30
                playback_now = anim_cur->playback_now;
 8015b1e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
            if(act_time < a.time) {
 8015b22:	428a      	cmp	r2, r1
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015b24:	9811      	ldr	r0, [sp, #68]	; 0x44
                playback_now = anim_cur->playback_now;
 8015b26:	f3c3 0340 	ubfx	r3, r3, #1, #1
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015b2a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
            if(act_time < a.time) {
 8015b2c:	dae4      	bge.n	8015af8 <lv_label_refr_text+0x10c>
                a.act_time = act_time;      /*To keep the old position*/
 8015b2e:	9215      	str	r2, [sp, #84]	; 0x54
                a.early_apply = 0;
 8015b30:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
 8015b34:	f367 0200 	bfi	r2, r7, #0, #1
 8015b38:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
                if(playback_now) {
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d0db      	beq.n	8015af8 <lv_label_refr_text+0x10c>
                    a.playback_now = 1;
 8015b40:	b2d3      	uxtb	r3, r2
                    a.start_value = a.end_value;
 8015b42:	9611      	str	r6, [sp, #68]	; 0x44
                    a.end_value   = tmp;
 8015b44:	9013      	str	r0, [sp, #76]	; 0x4c
                    a.playback_now = 1;
 8015b46:	f043 0302 	orr.w	r3, r3, #2
 8015b4a:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                    a.end_value   = tmp;
 8015b4e:	e7d3      	b.n	8015af8 <lv_label_refr_text+0x10c>
            lv_anim_del(obj, set_ofs_x_anim);
 8015b50:	4979      	ldr	r1, [pc, #484]	; (8015d38 <lv_label_refr_text+0x34c>)
 8015b52:	4620      	mov	r0, r4
 8015b54:	f7fc fbf0 	bl	8012338 <lv_anim_del>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015b58:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015b5c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8015b60:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015b62:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
            label->offset.x = 0;
 8015b66:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
 8015b6a:	1a5b      	subs	r3, r3, r1
 8015b6c:	b21b      	sxth	r3, r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	ddcc      	ble.n	8015b0c <lv_label_refr_text+0x120>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8015b72:	1a9b      	subs	r3, r3, r2
 8015b74:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
    a->exec_cb = exec_cb;
 8015b78:	4970      	ldr	r1, [pc, #448]	; (8015d3c <lv_label_refr_text+0x350>)
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8015b7a:	4620      	mov	r0, r4
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8015b7c:	1a9b      	subs	r3, r3, r2
 8015b7e:	910a      	str	r1, [sp, #40]	; 0x28
    a->end_value = end;
 8015b80:	9313      	str	r3, [sp, #76]	; 0x4c
    a->current_value = start;
 8015b82:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8015b86:	f7fc fc49 	bl	801241c <lv_anim_get>
            if(anim_cur) {
 8015b8a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015b8c:	b9c0      	cbnz	r0, 8015bc0 <lv_label_refr_text+0x1d4>
            if(act_time < a.time) {
 8015b8e:	2900      	cmp	r1, #0
 8015b90:	dd06      	ble.n	8015ba0 <lv_label_refr_text+0x1b4>
                a.early_apply = 0;
 8015b92:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
                a.act_time = act_time;      /*To keep the old position*/
 8015b96:	9015      	str	r0, [sp, #84]	; 0x54
                a.early_apply = 0;
 8015b98:	f360 0300 	bfi	r3, r0, #0, #1
 8015b9c:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015ba0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015ba2:	4628      	mov	r0, r5
 8015ba4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015ba6:	f00e fac1 	bl	802412c <lv_anim_speed_to_time>
    a->time = duration;
 8015baa:	9014      	str	r0, [sp, #80]	; 0x50
    a->playback_time = time;
 8015bac:	9017      	str	r0, [sp, #92]	; 0x5c
            lv_anim_start(&a);
 8015bae:	a809      	add	r0, sp, #36	; 0x24
 8015bb0:	f7fc fbf2 	bl	8012398 <lv_anim_start>
    lv_obj_invalidate(obj);
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	f007 f83d 	bl	801cc34 <lv_obj_invalidate>
}
 8015bba:	b01b      	add	sp, #108	; 0x6c
 8015bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                act_time = anim_cur->act_time;
 8015bc0:	6b02      	ldr	r2, [r0, #48]	; 0x30
                playback_now = anim_cur->playback_now;
 8015bc2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
            if(act_time < a.time) {
 8015bc6:	428a      	cmp	r2, r1
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015bc8:	9811      	ldr	r0, [sp, #68]	; 0x44
                playback_now = anim_cur->playback_now;
 8015bca:	f3c3 0340 	ubfx	r3, r3, #1, #1
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015bce:	9e13      	ldr	r6, [sp, #76]	; 0x4c
            if(act_time < a.time) {
 8015bd0:	dae6      	bge.n	8015ba0 <lv_label_refr_text+0x1b4>
                a.act_time = act_time;      /*To keep the old position*/
 8015bd2:	9215      	str	r2, [sp, #84]	; 0x54
                a.early_apply = 0;
 8015bd4:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
 8015bd8:	f367 0200 	bfi	r2, r7, #0, #1
 8015bdc:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
                if(playback_now) {
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d0dd      	beq.n	8015ba0 <lv_label_refr_text+0x1b4>
                    a.playback_now = 1;
 8015be4:	b2d3      	uxtb	r3, r2
                    a.start_value = a.end_value;
 8015be6:	9611      	str	r6, [sp, #68]	; 0x44
                    a.end_value   = tmp;
 8015be8:	9013      	str	r0, [sp, #76]	; 0x4c
                    a.playback_now = 1;
 8015bea:	f043 0302 	orr.w	r3, r3, #2
 8015bee:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                    a.end_value   = tmp;
 8015bf2:	e7d5      	b.n	8015ba0 <lv_label_refr_text+0x1b4>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8015bf4:	f1b9 0f03 	cmp.w	r9, #3
 8015bf8:	f040 808a 	bne.w	8015d10 <lv_label_refr_text+0x324>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 8015bfc:	2263      	movs	r2, #99	; 0x63
 8015bfe:	2100      	movs	r1, #0
 8015c00:	4620      	mov	r0, r4
 8015c02:	f007 ff3d 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8015c06:	2265      	movs	r2, #101	; 0x65
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 8015c08:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8015c0a:	2100      	movs	r1, #0
 8015c0c:	4620      	mov	r0, r4
 8015c0e:	f007 ff37 	bl	801da80 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8015c12:	b287      	uxth	r7, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8015c14:	b93f      	cbnz	r7, 8015c26 <lv_label_refr_text+0x23a>
 8015c16:	4620      	mov	r0, r4
 8015c18:	f7f0 fe28 	bl	800686c <lv_obj_get_disp>
 8015c1c:	f7fc fa5c 	bl	80120d8 <lv_disp_get_dpi>
 8015c20:	fb90 f7f9 	sdiv	r7, r0, r9
 8015c24:	b2bf      	uxth	r7, r7
        lv_anim_init(&a);
 8015c26:	a809      	add	r0, sp, #36	; 0x24
 8015c28:	f7fc fb6a 	bl	8012300 <lv_anim_init>
    a->repeat_cnt = cnt;
 8015c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015c30:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8015c34:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
 8015c38:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    a->var = var;
 8015c3c:	9409      	str	r4, [sp, #36]	; 0x24
 8015c3e:	3301      	adds	r3, #1
 8015c40:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8015c42:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8015c46:	b21b      	sxth	r3, r3
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	dd2a      	ble.n	8015ca2 <lv_label_refr_text+0x2b6>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 8015c4c:	2220      	movs	r2, #32
 8015c4e:	4630      	mov	r0, r6
    a->exec_cb = exec_cb;
 8015c50:	4e39      	ldr	r6, [pc, #228]	; (8015d38 <lv_label_refr_text+0x34c>)
 8015c52:	4611      	mov	r1, r2
 8015c54:	f00e f9ef 	bl	8024036 <lv_font_get_glyph_width>
 8015c58:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015c5c:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
    a->start_value = start;
 8015c60:	2100      	movs	r1, #0
    a->exec_cb = exec_cb;
 8015c62:	960a      	str	r6, [sp, #40]	; 0x28
 8015c64:	1ac2      	subs	r2, r0, r3
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015c66:	4638      	mov	r0, r7
    a->current_value = start;
 8015c68:	e9cd 1111 	strd	r1, r1, [sp, #68]	; 0x44
    a->end_value = end;
 8015c6c:	9213      	str	r2, [sp, #76]	; 0x4c
 8015c6e:	f00e fa5d 	bl	802412c <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8015c72:	4631      	mov	r1, r6
    a->time = duration;
 8015c74:	9014      	str	r0, [sp, #80]	; 0x50
 8015c76:	4620      	mov	r0, r4
 8015c78:	f7fc fbd0 	bl	801241c <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8015c7c:	b100      	cbz	r0, 8015c80 <lv_label_refr_text+0x294>
 8015c7e:	6b00      	ldr	r0, [r0, #48]	; 0x30
            if(anim_template) {
 8015c80:	b125      	cbz	r5, 8015c8c <lv_label_refr_text+0x2a0>
                a.act_time = anim_template->act_time;
 8015c82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015c84:	9315      	str	r3, [sp, #84]	; 0x54
                a.repeat_delay = anim_template->repeat_delay;
 8015c86:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8015c88:	9318      	str	r3, [sp, #96]	; 0x60
 8015c8a:	e73c      	b.n	8015b06 <lv_label_refr_text+0x11a>
            else if(act_time < a.time) {
 8015c8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c8e:	4283      	cmp	r3, r0
                a.early_apply = 0;
 8015c90:	bfc1      	itttt	gt
 8015c92:	f89d 3066 	ldrbgt.w	r3, [sp, #102]	; 0x66
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8015c96:	9015      	strgt	r0, [sp, #84]	; 0x54
                a.early_apply = 0;
 8015c98:	f365 0300 	bfigt	r3, r5, #0, #1
 8015c9c:	f88d 3066 	strbgt.w	r3, [sp, #102]	; 0x66
 8015ca0:	e731      	b.n	8015b06 <lv_label_refr_text+0x11a>
            lv_anim_del(obj, set_ofs_x_anim);
 8015ca2:	4925      	ldr	r1, [pc, #148]	; (8015d38 <lv_label_refr_text+0x34c>)
 8015ca4:	4620      	mov	r0, r4
 8015ca6:	f7fc fb47 	bl	8012338 <lv_anim_del>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015caa:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015cae:	f8bd 001e 	ldrh.w	r0, [sp, #30]
            label->offset.x = 0;
 8015cb2:	2100      	movs	r1, #0
 8015cb4:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015cb6:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
            label->offset.x = 0;
 8015cba:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
 8015cbe:	1a1b      	subs	r3, r3, r0
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015cc0:	b21b      	sxth	r3, r3
 8015cc2:	429a      	cmp	r2, r3
 8015cc4:	f77f af22 	ble.w	8015b0c <lv_label_refr_text+0x120>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 8015cc8:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8015ccc:	4252      	negs	r2, r2
    a->exec_cb = exec_cb;
 8015cce:	4e1b      	ldr	r6, [pc, #108]	; (8015d3c <lv_label_refr_text+0x350>)
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015cd0:	4638      	mov	r0, r7
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 8015cd2:	1ad2      	subs	r2, r2, r3
 8015cd4:	960a      	str	r6, [sp, #40]	; 0x28
    a->end_value = end;
 8015cd6:	9213      	str	r2, [sp, #76]	; 0x4c
    a->current_value = start;
 8015cd8:	e9cd 1111 	strd	r1, r1, [sp, #68]	; 0x44
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015cdc:	f00e fa26 	bl	802412c <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8015ce0:	4631      	mov	r1, r6
    a->time = duration;
 8015ce2:	9014      	str	r0, [sp, #80]	; 0x50
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	f7fc fb99 	bl	801241c <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8015cea:	b100      	cbz	r0, 8015cee <lv_label_refr_text+0x302>
 8015cec:	6b00      	ldr	r0, [r0, #48]	; 0x30
            if(anim_template) {
 8015cee:	b125      	cbz	r5, 8015cfa <lv_label_refr_text+0x30e>
                a.act_time = anim_template->act_time;
 8015cf0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015cf2:	9315      	str	r3, [sp, #84]	; 0x54
                a.repeat_delay = anim_template->repeat_delay;
 8015cf4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8015cf6:	9318      	str	r3, [sp, #96]	; 0x60
 8015cf8:	e759      	b.n	8015bae <lv_label_refr_text+0x1c2>
            else if(act_time < a.time) {
 8015cfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015cfc:	4283      	cmp	r3, r0
                a.early_apply = 0;
 8015cfe:	bfc1      	itttt	gt
 8015d00:	f89d 3066 	ldrbgt.w	r3, [sp, #102]	; 0x66
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8015d04:	9015      	strgt	r0, [sp, #84]	; 0x54
                a.early_apply = 0;
 8015d06:	f365 0300 	bfigt	r3, r5, #0, #1
 8015d0a:	f88d 3066 	strbgt.w	r3, [sp, #102]	; 0x66
 8015d0e:	e74e      	b.n	8015bae <lv_label_refr_text+0x1c2>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 8015d10:	f1b9 0f01 	cmp.w	r9, #1
 8015d14:	f47f af4e 	bne.w	8015bb4 <lv_label_refr_text+0x1c8>
 8015d18:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015d1c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8015d20:	3301      	adds	r3, #1
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 8015d22:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8015d26:	1a5b      	subs	r3, r3, r1
 8015d28:	b21b      	sxth	r3, r3
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	dc08      	bgt.n	8015d40 <lv_label_refr_text+0x354>
            label->dot_end = LV_LABEL_DOT_END_INV;
 8015d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015d34:	e73e      	b.n	8015bb4 <lv_label_refr_text+0x1c8>
 8015d36:	bf00      	nop
 8015d38:	08026e3f 	.word	0x08026e3f
 8015d3c:	08026e37 	.word	0x08026e37
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 8015d40:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8015d44:	4293      	cmp	r3, r2
 8015d46:	daf2      	bge.n	8015d2e <lv_label_refr_text+0x342>
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 8015d48:	4b52      	ldr	r3, [pc, #328]	; (8015e94 <lv_label_refr_text+0x4a8>)
 8015d4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	4798      	blx	r3
 8015d50:	2803      	cmp	r0, #3
 8015d52:	d9ec      	bls.n	8015d2e <lv_label_refr_text+0x342>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015d54:	f8bd 7020 	ldrh.w	r7, [sp, #32]
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 8015d58:	222e      	movs	r2, #46	; 0x2e
 8015d5a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015d5e:	4630      	mov	r0, r6
 8015d60:	3701      	adds	r7, #1
 8015d62:	4611      	mov	r1, r2
 8015d64:	1aff      	subs	r7, r7, r3
 8015d66:	f00e f966 	bl	8024036 <lv_font_get_glyph_width>
 8015d6a:	4440      	add	r0, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015d6c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015d70:	b2bf      	uxth	r7, r7
            p.x = lv_area_get_width(&txt_coords) -
 8015d72:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
 8015d76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015d7a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015d7e:	3301      	adds	r3, #1
 8015d80:	4407      	add	r7, r0
 8015d82:	1a9b      	subs	r3, r3, r2
 8015d84:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
 8015d88:	f8ad 7018 	strh.w	r7, [sp, #24]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 8015d8c:	1950      	adds	r0, r2, r5
 8015d8e:	b299      	uxth	r1, r3
            y_overed = p.y %
 8015d90:	b21b      	sxth	r3, r3
 8015d92:	fb93 f6f0 	sdiv	r6, r3, r0
 8015d96:	fb00 3316 	mls	r3, r0, r6, r3
                _lv_txt_encoded_prev(label->text, &byte_id);
 8015d9a:	4e3f      	ldr	r6, [pc, #252]	; (8015e98 <lv_label_refr_text+0x4ac>)
            if(y_overed >= lv_font_get_line_height(font)) {
 8015d9c:	b218      	sxth	r0, r3
 8015d9e:	4282      	cmp	r2, r0
                p.y -= line_space;
 8015da0:	bfcc      	ite	gt
 8015da2:	1b48      	subgt	r0, r1, r5
                p.y += lv_font_get_line_height(font);
 8015da4:	1888      	addle	r0, r1, r2
                p.y -= line_space;
 8015da6:	a906      	add	r1, sp, #24
 8015da8:	1ac0      	subs	r0, r0, r3
 8015daa:	b200      	sxth	r0, r0
 8015dac:	f8ad 001a 	strh.w	r0, [sp, #26]
    LV_ASSERT_NULL(pos_in);
 8015db0:	4620      	mov	r0, r4
 8015db2:	f7ff fd25 	bl	8015800 <lv_label_get_letter_on.part.0>
 8015db6:	4605      	mov	r5, r0
            size_t txt_len = strlen(label->text);
 8015db8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015dba:	f004 fc93 	bl	801a6e4 <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8015dbe:	4b37      	ldr	r3, [pc, #220]	; (8015e9c <lv_label_refr_text+0x4b0>)
            size_t txt_len = strlen(label->text);
 8015dc0:	4680      	mov	r8, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8015dc2:	4629      	mov	r1, r5
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015dc8:	4798      	blx	r3
 8015dca:	9009      	str	r0, [sp, #36]	; 0x24
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8015dcc:	9f09      	ldr	r7, [sp, #36]	; 0x24
                _lv_txt_encoded_prev(label->text, &byte_id);
 8015dce:	6a60      	ldr	r0, [r4, #36]	; 0x24
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8015dd0:	f107 0903 	add.w	r9, r7, #3
 8015dd4:	45c8      	cmp	r8, r9
 8015dd6:	d32d      	bcc.n	8015e34 <lv_label_refr_text+0x448>
 8015dd8:	f04f 0b04 	mov.w	fp, #4
            uint8_t len = 0;
 8015ddc:	2600      	movs	r6, #0
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8015dde:	4a30      	ldr	r2, [pc, #192]	; (8015ea0 <lv_label_refr_text+0x4b4>)
                _lv_txt_encoded_next(label->text, &byte_id);
 8015de0:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8015ea4 <lv_label_refr_text+0x4b8>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8015de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015de6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015de8:	6813      	ldr	r3, [r2, #0]
 8015dea:	4408      	add	r0, r1
 8015dec:	4798      	blx	r3
 8015dee:	4430      	add	r0, r6
                _lv_txt_encoded_next(label->text, &byte_id);
 8015df0:	f8da 3000 	ldr.w	r3, [sl]
 8015df4:	a909      	add	r1, sp, #36	; 0x24
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8015df6:	b2c6      	uxtb	r6, r0
                _lv_txt_encoded_next(label->text, &byte_id);
 8015df8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015dfa:	4798      	blx	r3
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 8015dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015dfe:	2e03      	cmp	r6, #3
 8015e00:	d81d      	bhi.n	8015e3e <lv_label_refr_text+0x452>
 8015e02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e04:	4588      	cmp	r8, r1
 8015e06:	d303      	bcc.n	8015e10 <lv_label_refr_text+0x424>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8015e08:	f1bb 0b01 	subs.w	fp, fp, #1
 8015e0c:	4a24      	ldr	r2, [pc, #144]	; (8015ea0 <lv_label_refr_text+0x4b4>)
 8015e0e:	d1e9      	bne.n	8015de4 <lv_label_refr_text+0x3f8>
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8015e10:	4620      	mov	r0, r4
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8015e12:	eb03 0807 	add.w	r8, r3, r7
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8015e16:	f010 ffec 	bl	8026df2 <lv_label_dot_tmp_free>
        label->dot_tmp_alloc = false;
 8015e1a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8015e1e:	4632      	mov	r2, r6
 8015e20:	4641      	mov	r1, r8
 8015e22:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015e26:	f36f 1386 	bfc	r3, #6, #1
 8015e2a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8015e2e:	f004 fc6c 	bl	801a70a <memcpy>
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 8015e32:	e01f      	b.n	8015e74 <lv_label_refr_text+0x488>
                _lv_txt_encoded_prev(label->text, &byte_id);
 8015e34:	6833      	ldr	r3, [r6, #0]
 8015e36:	a909      	add	r1, sp, #36	; 0x24
                letter_id--;
 8015e38:	3d01      	subs	r5, #1
                _lv_txt_encoded_prev(label->text, &byte_id);
 8015e3a:	4798      	blx	r3
                letter_id--;
 8015e3c:	e7c6      	b.n	8015dcc <lv_label_refr_text+0x3e0>
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8015e3e:	4620      	mov	r0, r4
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8015e40:	eb03 0807 	add.w	r8, r3, r7
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8015e44:	f010 ffd5 	bl	8026df2 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 8015e48:	2e04      	cmp	r6, #4
 8015e4a:	d0e6      	beq.n	8015e1a <lv_label_refr_text+0x42e>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8015e4c:	1c70      	adds	r0, r6, #1
 8015e4e:	f7fc fc2f 	bl	80126b0 <lv_mem_alloc>
 8015e52:	62a0      	str	r0, [r4, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 8015e54:	2800      	cmp	r0, #0
 8015e56:	f43f aead 	beq.w	8015bb4 <lv_label_refr_text+0x1c8>
 8015e5a:	4632      	mov	r2, r6
 8015e5c:	4641      	mov	r1, r8
 8015e5e:	f004 fc54 	bl	801a70a <memcpy>
        label->dot.tmp_ptr[len] = '\0';
 8015e62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015e64:	2200      	movs	r2, #0
 8015e66:	559a      	strb	r2, [r3, r6]
        label->dot_tmp_alloc    = true;
 8015e68:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8015e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e70:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                    label->text[byte_id_ori + i] = '.';
 8015e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e76:	222e      	movs	r2, #46	; 0x2e
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8015e78:	3503      	adds	r5, #3
                    label->text[byte_id_ori + i] = '.';
 8015e7a:	55da      	strb	r2, [r3, r7]
 8015e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e7e:	443b      	add	r3, r7
 8015e80:	705a      	strb	r2, [r3, #1]
 8015e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e84:	443b      	add	r3, r7
 8015e86:	709a      	strb	r2, [r3, #2]
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8015e88:	2200      	movs	r2, #0
 8015e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e8c:	f803 2009 	strb.w	r2, [r3, r9]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8015e90:	62e5      	str	r5, [r4, #44]	; 0x2c
 8015e92:	e68f      	b.n	8015bb4 <lv_label_refr_text+0x1c8>
 8015e94:	240000f0 	.word	0x240000f0
 8015e98:	240000fc 	.word	0x240000fc
 8015e9c:	240000f8 	.word	0x240000f8
 8015ea0:	24000108 	.word	0x24000108
 8015ea4:	24000100 	.word	0x24000100

08015ea8 <lv_label_event>:
{
 8015ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8015eac:	4839      	ldr	r0, [pc, #228]	; (8015f94 <lv_label_event+0xec>)
{
 8015eae:	b093      	sub	sp, #76	; 0x4c
 8015eb0:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8015eb2:	f005 f988 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8015eb6:	2801      	cmp	r0, #1
 8015eb8:	d166      	bne.n	8015f88 <lv_label_event+0xe0>
    lv_event_code_t code = lv_event_get_code(e);
 8015eba:	4628      	mov	r0, r5
 8015ebc:	f005 f99d 	bl	801b1fa <lv_event_get_code>
 8015ec0:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8015ec2:	4628      	mov	r0, r5
 8015ec4:	f005 f995 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 8015ec8:	2e2a      	cmp	r6, #42	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 8015eca:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8015ecc:	d107      	bne.n	8015ede <lv_label_event+0x36>
        lv_label_revert_dots(obj);
 8015ece:	f7ff fc6b 	bl	80157a8 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 8015ed2:	4620      	mov	r0, r4
}
 8015ed4:	b013      	add	sp, #76	; 0x4c
 8015ed6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        lv_label_refr_text(obj);
 8015eda:	f7ff bd87 	b.w	80159ec <lv_label_refr_text>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8015ede:	2e13      	cmp	r6, #19
 8015ee0:	d10d      	bne.n	8015efe <lv_label_event+0x56>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8015ee2:	f010 ffbe 	bl	8026e62 <lv_obj_get_style_text_font.constprop.0>
        lv_event_set_ext_draw_size(e, font_h / 4);
 8015ee6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015eea:	4628      	mov	r0, r5
 8015eec:	2900      	cmp	r1, #0
 8015eee:	bfb8      	it	lt
 8015ef0:	3103      	addlt	r1, #3
 8015ef2:	1089      	asrs	r1, r1, #2
}
 8015ef4:	b013      	add	sp, #76	; 0x4c
 8015ef6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        lv_event_set_ext_draw_size(e, font_h / 4);
 8015efa:	f005 b9da 	b.w	801b2b2 <lv_event_set_ext_draw_size>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8015efe:	2e29      	cmp	r6, #41	; 0x29
 8015f00:	d0e5      	beq.n	8015ece <lv_label_event+0x26>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8015f02:	2e2c      	cmp	r6, #44	; 0x2c
 8015f04:	d148      	bne.n	8015f98 <lv_label_event+0xf0>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8015f06:	f010 ffac 	bl	8026e62 <lv_obj_get_style_text_font.constprop.0>
 8015f0a:	4606      	mov	r6, r0
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	f010 ffa1 	bl	8026e54 <lv_obj_get_style_text_letter_space.constprop.0>
 8015f12:	4607      	mov	r7, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8015f14:	4620      	mov	r0, r4
 8015f16:	f010 ff96 	bl	8026e46 <lv_obj_get_style_text_line_space.constprop.0>
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015f1a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8015f1e:	4680      	mov	r8, r0
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015f20:	f3c3 1900 	ubfx	r9, r3, #4, #1
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015f24:	0698      	lsls	r0, r3, #26
        lv_coord_t w = lv_obj_get_content_width(obj);
 8015f26:	4620      	mov	r0, r4
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015f28:	bf48      	it	mi
 8015f2a:	f049 0902 	orrmi.w	r9, r9, #2
        lv_coord_t w = lv_obj_get_content_width(obj);
 8015f2e:	f006 fc8d 	bl	801c84c <lv_obj_get_content_width>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8015f32:	4620      	mov	r0, r4
 8015f34:	f010 ff9b 	bl	8026e6e <lv_obj_get_style_width.constprop.0>
 8015f38:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8015f3c:	4298      	cmp	r0, r3
 8015f3e:	d103      	bne.n	8015f48 <lv_label_event+0xa0>
 8015f40:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8015f44:	0759      	lsls	r1, r3, #29
 8015f46:	d522      	bpl.n	8015f8e <lv_label_event+0xe6>
        else w = lv_obj_get_content_width(obj);
 8015f48:	4620      	mov	r0, r4
 8015f4a:	f006 fc7f 	bl	801c84c <lv_obj_get_content_width>
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 8015f4e:	463b      	mov	r3, r7
 8015f50:	4632      	mov	r2, r6
 8015f52:	f8cd 8000 	str.w	r8, [sp]
 8015f56:	e9cd 0901 	strd	r0, r9, [sp, #4]
 8015f5a:	a80a      	add	r0, sp, #40	; 0x28
 8015f5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015f5e:	f00f fc6b 	bl	8025838 <lv_txt_get_size>
        lv_point_t * self_size = lv_event_get_param(e);
 8015f62:	4628      	mov	r0, r5
 8015f64:	f005 f94d 	bl	801b202 <lv_event_get_param>
        self_size->x = LV_MAX(self_size->x, size.x);
 8015f68:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8015f6c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015f70:	4293      	cmp	r3, r2
 8015f72:	bfb8      	it	lt
 8015f74:	4613      	movlt	r3, r2
        self_size->y = LV_MAX(self_size->y, size.y);
 8015f76:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
        self_size->x = LV_MAX(self_size->x, size.x);
 8015f7a:	8003      	strh	r3, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 8015f7c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8015f80:	4293      	cmp	r3, r2
 8015f82:	bfb8      	it	lt
 8015f84:	4613      	movlt	r3, r2
 8015f86:	8043      	strh	r3, [r0, #2]
}
 8015f88:	b013      	add	sp, #76	; 0x4c
 8015f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8015f8e:	f641 70ff 	movw	r0, #8191	; 0x1fff
 8015f92:	e7dc      	b.n	8015f4e <lv_label_event+0xa6>
 8015f94:	080299dc 	.word	0x080299dc
    else if(code == LV_EVENT_DRAW_MAIN) {
 8015f98:	2e15      	cmp	r6, #21
 8015f9a:	d1f5      	bne.n	8015f88 <lv_label_event+0xe0>
    lv_obj_t * obj = lv_event_get_target(e);
 8015f9c:	4628      	mov	r0, r5
 8015f9e:	f005 f928 	bl	801b1f2 <lv_event_get_target>
 8015fa2:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8015fa4:	4628      	mov	r0, r5
 8015fa6:	f005 f97d 	bl	801b2a4 <lv_event_get_draw_ctx>
    lv_obj_get_content_coords(obj, &txt_coords);
 8015faa:	a906      	add	r1, sp, #24
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8015fac:	4605      	mov	r5, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 8015fae:	4620      	mov	r0, r4
 8015fb0:	f006 fc78 	bl	801c8a4 <lv_obj_get_content_coords>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015fb4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8015fb8:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015fba:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015fbc:	f3c3 1600 	ubfx	r6, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015fc0:	bf48      	it	mi
 8015fc2:	f046 0602 	orrmi.w	r6, r6, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8015fc6:	f010 ff52 	bl	8026e6e <lv_obj_get_style_width.constprop.0>
 8015fca:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8015fce:	4298      	cmp	r0, r3
 8015fd0:	d105      	bne.n	8015fde <lv_label_event+0x136>
 8015fd2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8015fd6:	075b      	lsls	r3, r3, #29
 8015fd8:	bf58      	it	pl
 8015fda:	f046 0604 	orrpl.w	r6, r6, #4
    lv_draw_label_dsc_init(&label_draw_dsc);
 8015fde:	a80a      	add	r0, sp, #40	; 0x28
 8015fe0:	f7f1 fe62 	bl	8007ca8 <lv_draw_label_dsc_init>
    label_draw_dsc.ofs_x = label->offset.x;
 8015fe4:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8015fe8:	aa0a      	add	r2, sp, #40	; 0x28
 8015fea:	2100      	movs	r1, #0
    label_draw_dsc.ofs_x = label->offset.x;
 8015fec:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8015ff0:	4620      	mov	r0, r4
    label_draw_dsc.ofs_y = label->offset.y;
 8015ff2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    label_draw_dsc.flag = flag;
 8015ff6:	f88d 6045 	strb.w	r6, [sp, #69]	; 0x45
    label_draw_dsc.ofs_y = label->offset.y;
 8015ffa:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8015ffe:	f006 f896 	bl	801c12e <lv_obj_init_draw_label_dsc>
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8016002:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8016006:	b913      	cbnz	r3, 801600e <lv_label_event+0x166>
 8016008:	2301      	movs	r3, #1
 801600a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    return label->sel_start;
 801600e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8016010:	f64f 73ff 	movw	r3, #65535	; 0xffff
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 8016014:	910b      	str	r1, [sp, #44]	; 0x2c
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8016016:	4299      	cmp	r1, r3
    return label->sel_end;
 8016018:	6c22      	ldr	r2, [r4, #64]	; 0x40
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 801601a:	920c      	str	r2, [sp, #48]	; 0x30
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 801601c:	d017      	beq.n	801604e <lv_label_event+0x1a6>
 801601e:	429a      	cmp	r2, r3
 8016020:	d015      	beq.n	801604e <lv_label_event+0x1a6>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8016022:	2255      	movs	r2, #85	; 0x55
 8016024:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8016028:	4620      	mov	r0, r4
 801602a:	f007 fd29 	bl	801da80 <lv_obj_get_style_prop>
 801602e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8016032:	4602      	mov	r2, r0
 8016034:	4620      	mov	r0, r4
 8016036:	f007 ff3a 	bl	801deae <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 801603a:	2220      	movs	r2, #32
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 801603c:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
 8016040:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8016044:	4620      	mov	r0, r4
 8016046:	f007 fd1b 	bl	801da80 <lv_obj_get_style_prop>
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 801604a:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 801604e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016052:	f003 0306 	and.w	r3, r3, #6
 8016056:	2b02      	cmp	r3, #2
 8016058:	d120      	bne.n	801609c <lv_label_event+0x1f4>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 801605a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 801605e:	3b02      	subs	r3, #2
 8016060:	2b01      	cmp	r3, #1
 8016062:	d81b      	bhi.n	801609c <lv_label_event+0x1f4>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8016064:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8016068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801606a:	9602      	str	r6, [sp, #8]
 801606c:	a808      	add	r0, sp, #32
 801606e:	9301      	str	r3, [sp, #4]
 8016070:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8016074:	9300      	str	r3, [sp, #0]
 8016076:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801607a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801607c:	f00f fbdc 	bl	8025838 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016080:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8016084:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8016088:	3301      	adds	r3, #1
 801608a:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 801608c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8016090:	b21b      	sxth	r3, r3
 8016092:	429a      	cmp	r2, r3
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 8016094:	bfc4      	itt	gt
 8016096:	2301      	movgt	r3, #1
 8016098:	f88d 3044 	strbgt.w	r3, [sp, #68]	; 0x44
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 801609c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80160a0:	f003 0307 	and.w	r3, r3, #7
 80160a4:	2b03      	cmp	r3, #3
 80160a6:	f000 8096 	beq.w	80161d6 <lv_label_event+0x32e>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80160aa:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80160ae:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80160b2:	3301      	adds	r3, #1
 80160b4:	1a9b      	subs	r3, r3, r2
 80160b6:	b21b      	sxth	r3, r3
 80160b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80160bc:	f2c0 808b 	blt.w	80161d6 <lv_label_event+0x32e>
    lv_draw_label_hint_t * hint = &label->hint;
 80160c0:	f104 0730 	add.w	r7, r4, #48	; 0x30
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 80160c4:	68aa      	ldr	r2, [r5, #8]
 80160c6:	a906      	add	r1, sp, #24
 80160c8:	a808      	add	r0, sp, #32
 80160ca:	f00e f8d2 	bl	8024272 <_lv_area_intersect>
    if(!is_common) return;
 80160ce:	2800      	cmp	r0, #0
 80160d0:	f43f af5a 	beq.w	8015f88 <lv_label_event+0xe0>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 80160d4:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80160d8:	f011 0807 	ands.w	r8, r1, #7
 80160dc:	d10b      	bne.n	80160f6 <lv_label_event+0x24e>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 80160de:	4620      	mov	r0, r4
 80160e0:	f006 ff47 	bl	801cf72 <lv_obj_get_scroll_top>
        lv_area_move(&txt_coords, 0, -s);
 80160e4:	4242      	negs	r2, r0
 80160e6:	4641      	mov	r1, r8
 80160e8:	a806      	add	r0, sp, #24
 80160ea:	b212      	sxth	r2, r2
 80160ec:	f00e f8b0 	bl	8024250 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 80160f0:	8b63      	ldrh	r3, [r4, #26]
 80160f2:	f8ad 301e 	strh.w	r3, [sp, #30]
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 80160f6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80160fa:	f003 0306 	and.w	r3, r3, #6
 80160fe:	2b02      	cmp	r3, #2
 8016100:	d16b      	bne.n	80161da <lv_label_event+0x332>
        draw_ctx->clip_area = &txt_clip;
 8016102:	ab08      	add	r3, sp, #32
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8016104:	f8d5 8008 	ldr.w	r8, [r5, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8016108:	aa06      	add	r2, sp, #24
 801610a:	a90a      	add	r1, sp, #40	; 0x28
        draw_ctx->clip_area = &txt_clip;
 801610c:	60ab      	str	r3, [r5, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 801610e:	4628      	mov	r0, r5
 8016110:	9700      	str	r7, [sp, #0]
 8016112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016114:	f7f1 fde0 	bl	8007cd8 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8016118:	f8c5 8008 	str.w	r8, [r5, #8]
    draw_ctx->clip_area = &txt_clip;
 801611c:	ab08      	add	r3, sp, #32
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801611e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    draw_ctx->clip_area = &txt_clip;
 8016122:	60ab      	str	r3, [r5, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8016124:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016128:	f003 0307 	and.w	r3, r3, #7
 801612c:	2b03      	cmp	r3, #3
 801612e:	d14f      	bne.n	80161d0 <lv_label_event+0x328>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8016130:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8016134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016136:	9602      	str	r6, [sp, #8]
 8016138:	a805      	add	r0, sp, #20
 801613a:	9301      	str	r3, [sp, #4]
 801613c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8016140:	9300      	str	r3, [sp, #0]
 8016142:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8016146:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016148:	f00f fb76 	bl	8025838 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801614c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8016150:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8016154:	3201      	adds	r2, #1
        if(size.x > lv_area_get_width(&txt_coords)) {
 8016156:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801615a:	1a52      	subs	r2, r2, r1
 801615c:	b212      	sxth	r2, r2
 801615e:	4293      	cmp	r3, r2
 8016160:	dd18      	ble.n	8016194 <lv_label_event+0x2ec>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8016162:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8016166:	980a      	ldr	r0, [sp, #40]	; 0x28
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8016168:	4413      	add	r3, r2
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801616a:	2220      	movs	r2, #32
 801616c:	4611      	mov	r1, r2
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801616e:	b29e      	uxth	r6, r3
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8016170:	f00d ff61 	bl	8024036 <lv_font_get_glyph_width>
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8016174:	aa06      	add	r2, sp, #24
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8016176:	eb00 0040 	add.w	r0, r0, r0, lsl #1
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 801617a:	a90a      	add	r1, sp, #40	; 0x28
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801617c:	4406      	add	r6, r0
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 801617e:	4628      	mov	r0, r5
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8016180:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
            label_draw_dsc.ofs_y = label->offset.y;
 8016184:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8016188:	9700      	str	r7, [sp, #0]
            label_draw_dsc.ofs_y = label->offset.y;
 801618a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 801618e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016190:	f7f1 fda2 	bl	8007cd8 <lv_draw_label>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016194:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8016198:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801619c:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords)) {
 801619e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80161a2:	1a5b      	subs	r3, r3, r1
 80161a4:	b21b      	sxth	r3, r3
 80161a6:	429a      	cmp	r2, r3
 80161a8:	dd12      	ble.n	80161d0 <lv_label_event+0x328>
            label_draw_dsc.ofs_x = label->offset.x;
 80161aa:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80161ae:	a90a      	add	r1, sp, #40	; 0x28
 80161b0:	4628      	mov	r0, r5
            label_draw_dsc.ofs_x = label->offset.x;
 80161b2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80161b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 80161b8:	891b      	ldrh	r3, [r3, #8]
 80161ba:	441a      	add	r2, r3
 80161bc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80161c0:	9700      	str	r7, [sp, #0]
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 80161c2:	441a      	add	r2, r3
 80161c4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80161c8:	aa06      	add	r2, sp, #24
 80161ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161cc:	f7f1 fd84 	bl	8007cd8 <lv_draw_label>
    draw_ctx->clip_area = clip_area_ori;
 80161d0:	f8c5 8008 	str.w	r8, [r5, #8]
 80161d4:	e6d8      	b.n	8015f88 <lv_label_event+0xe0>
        hint = NULL;
 80161d6:	2700      	movs	r7, #0
 80161d8:	e774      	b.n	80160c4 <lv_label_event+0x21c>
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80161da:	9700      	str	r7, [sp, #0]
 80161dc:	aa06      	add	r2, sp, #24
 80161de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161e0:	a90a      	add	r1, sp, #40	; 0x28
 80161e2:	4628      	mov	r0, r5
 80161e4:	f7f1 fd78 	bl	8007cd8 <lv_draw_label>
 80161e8:	e798      	b.n	801611c <lv_label_event+0x274>
 80161ea:	bf00      	nop

080161ec <lv_label_create>:
{
 80161ec:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80161ee:	4804      	ldr	r0, [pc, #16]	; (8016200 <lv_label_create+0x14>)
{
 80161f0:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80161f2:	f7ee fde1 	bl	8004db8 <lv_obj_class_create_obj>
 80161f6:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 80161f8:	f005 fdec 	bl	801bdd4 <lv_obj_class_init_obj>
}
 80161fc:	4620      	mov	r0, r4
 80161fe:	bd10      	pop	{r4, pc}
 8016200:	080299dc 	.word	0x080299dc

08016204 <lv_label_set_long_mode>:
{
 8016204:	b538      	push	{r3, r4, r5, lr}
 8016206:	4604      	mov	r4, r0
 8016208:	460d      	mov	r5, r1
    lv_anim_del(obj, set_ofs_x_anim);
 801620a:	4914      	ldr	r1, [pc, #80]	; (801625c <lv_label_set_long_mode+0x58>)
 801620c:	f7fc f894 	bl	8012338 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 8016210:	4913      	ldr	r1, [pc, #76]	; (8016260 <lv_label_set_long_mode+0x5c>)
 8016212:	4620      	mov	r0, r4
 8016214:	f7fc f890 	bl	8012338 <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 8016218:	1eaa      	subs	r2, r5, #2
    label->offset.x = 0;
 801621a:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 801621c:	2a02      	cmp	r2, #2
    label->offset.x = 0;
 801621e:	6463      	str	r3, [r4, #68]	; 0x44
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 8016220:	bf8c      	ite	hi
 8016222:	2200      	movhi	r2, #0
 8016224:	2201      	movls	r2, #1
 8016226:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801622a:	f362 1345 	bfi	r3, r2, #5, #1
 801622e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 8016232:	f003 0307 	and.w	r3, r3, #7
 8016236:	2b01      	cmp	r3, #1
 8016238:	d105      	bne.n	8016246 <lv_label_set_long_mode+0x42>
 801623a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801623c:	3301      	adds	r3, #1
 801623e:	d002      	beq.n	8016246 <lv_label_set_long_mode+0x42>
        lv_label_revert_dots(obj);
 8016240:	4620      	mov	r0, r4
 8016242:	f7ff fab1 	bl	80157a8 <lv_label_revert_dots>
    label->long_mode = long_mode;
 8016246:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 801624a:	4620      	mov	r0, r4
    label->long_mode = long_mode;
 801624c:	f365 0302 	bfi	r3, r5, #0, #3
 8016250:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 8016254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(obj);
 8016258:	f7ff bbc8 	b.w	80159ec <lv_label_refr_text>
 801625c:	08026e3f 	.word	0x08026e3f
 8016260:	08026e37 	.word	0x08026e37

08016264 <lv_label_constructor>:
{
 8016264:	b538      	push	{r3, r4, r5, lr}
    label->dot_end    = LV_LABEL_DOT_END_INV;
 8016266:	f04f 33ff 	mov.w	r3, #4294967295
{
 801626a:	460c      	mov	r4, r1
    label->text       = NULL;
 801626c:	2500      	movs	r5, #0
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801626e:	4620      	mov	r0, r4
    label->offset.x = 0;
 8016270:	644d      	str	r5, [r1, #68]	; 0x44
    label->hint.line_start = -1;
 8016272:	e9c1 330b 	strd	r3, r3, [r1, #44]	; 0x2c
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8016276:	f64f 73ff 	movw	r3, #65535	; 0xffff
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 801627a:	e9c1 330f 	strd	r3, r3, [r1, #60]	; 0x3c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801627e:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 8016282:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    label->dot.tmp_ptr   = NULL;
 8016286:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801628a:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    label->hint.coord_y    = 0;
 801628e:	e9c1 550d 	strd	r5, r5, [r1, #52]	; 0x34
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8016292:	2102      	movs	r1, #2
 8016294:	f005 fb6b 	bl	801b96e <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 8016298:	4629      	mov	r1, r5
 801629a:	4620      	mov	r0, r4
 801629c:	f7ff ffb2 	bl	8016204 <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 80162a0:	4620      	mov	r0, r4
 80162a2:	4902      	ldr	r1, [pc, #8]	; (80162ac <lv_label_constructor+0x48>)
}
 80162a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_set_text(obj, "Text");
 80162a8:	f010 bde8 	b.w	8026e7c <lv_label_set_text>
 80162ac:	0802df04 	.word	0x0802df04

080162b0 <lv_label_get_letter_pos>:
{
 80162b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b4:	b08d      	sub	sp, #52	; 0x34
 80162b6:	4605      	mov	r5, r0
    LV_ASSERT_NULL(pos);
 80162b8:	4617      	mov	r7, r2
{
 80162ba:	9107      	str	r1, [sp, #28]
    LV_ASSERT_NULL(pos);
 80162bc:	b902      	cbnz	r2, 80162c0 <lv_label_get_letter_pos+0x10>
 80162be:	e7fe      	b.n	80162be <lv_label_get_letter_pos+0xe>
    return label->text;
 80162c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, txt);
 80162c2:	2100      	movs	r1, #0
 80162c4:	4622      	mov	r2, r4
 80162c6:	f007 ff14 	bl	801e0f2 <lv_obj_calculate_style_text_align>
    if(txt[0] == '\0') {
 80162ca:	7823      	ldrb	r3, [r4, #0]
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, txt);
 80162cc:	4683      	mov	fp, r0
    if(txt[0] == '\0') {
 80162ce:	b9b3      	cbnz	r3, 80162fe <lv_label_get_letter_pos+0x4e>
        switch(align) {
 80162d0:	2802      	cmp	r0, #2
        pos->y = 0;
 80162d2:	807b      	strh	r3, [r7, #2]
        switch(align) {
 80162d4:	d00c      	beq.n	80162f0 <lv_label_get_letter_pos+0x40>
 80162d6:	2803      	cmp	r0, #3
 80162d8:	d005      	beq.n	80162e6 <lv_label_get_letter_pos+0x36>
 80162da:	2801      	cmp	r0, #1
 80162dc:	d100      	bne.n	80162e0 <lv_label_get_letter_pos+0x30>
                pos->x = 0;
 80162de:	803b      	strh	r3, [r7, #0]
}
 80162e0:	b00d      	add	sp, #52	; 0x34
 80162e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                pos->x = lv_obj_get_content_width(obj);
 80162e6:	4628      	mov	r0, r5
 80162e8:	f006 fab0 	bl	801c84c <lv_obj_get_content_width>
                pos->x = lv_obj_get_content_width(obj) / 2;
 80162ec:	8038      	strh	r0, [r7, #0]
                break;
 80162ee:	e7f7      	b.n	80162e0 <lv_label_get_letter_pos+0x30>
                pos->x = lv_obj_get_content_width(obj) / 2;
 80162f0:	4628      	mov	r0, r5
 80162f2:	f006 faab 	bl	801c84c <lv_obj_get_content_width>
 80162f6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80162fa:	1040      	asrs	r0, r0, #1
 80162fc:	e7f6      	b.n	80162ec <lv_label_get_letter_pos+0x3c>
    lv_obj_get_content_coords(obj, &txt_coords);
 80162fe:	a90a      	add	r1, sp, #40	; 0x28
 8016300:	4628      	mov	r0, r5
 8016302:	f006 facf 	bl	801c8a4 <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016306:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801630a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801630e:	4628      	mov	r0, r5
 8016310:	3301      	adds	r3, #1
 8016312:	1a9b      	subs	r3, r3, r2
 8016314:	b21b      	sxth	r3, r3
 8016316:	9308      	str	r3, [sp, #32]
 8016318:	f010 fda3 	bl	8026e62 <lv_obj_get_style_text_font.constprop.0>
 801631c:	9003      	str	r0, [sp, #12]
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801631e:	4628      	mov	r0, r5
 8016320:	f010 fd91 	bl	8026e46 <lv_obj_get_style_text_line_space.constprop.0>
 8016324:	9005      	str	r0, [sp, #20]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8016326:	4628      	mov	r0, r5
 8016328:	f010 fd94 	bl	8026e54 <lv_obj_get_style_text_letter_space.constprop.0>
 801632c:	9b03      	ldr	r3, [sp, #12]
 801632e:	9004      	str	r0, [sp, #16]
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8016330:	4628      	mov	r0, r5
 8016332:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016336:	9306      	str	r3, [sp, #24]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8016338:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801633c:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801633e:	f3c3 1a00 	ubfx	sl, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8016342:	bf48      	it	mi
 8016344:	f04a 0a02 	orrmi.w	sl, sl, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8016348:	f010 fd91 	bl	8026e6e <lv_obj_get_style_width.constprop.0>
 801634c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8016350:	4298      	cmp	r0, r3
 8016352:	d105      	bne.n	8016360 <lv_label_get_letter_pos+0xb0>
 8016354:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8016358:	075b      	lsls	r3, r3, #29
 801635a:	bf58      	it	pl
 801635c:	f04a 0a04 	orrpl.w	sl, sl, #4
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 8016360:	4b41      	ldr	r3, [pc, #260]	; (8016468 <lv_label_get_letter_pos+0x1b8>)
 8016362:	4620      	mov	r0, r4
 8016364:	9907      	ldr	r1, [sp, #28]
    lv_coord_t y             = 0;
 8016366:	f04f 0800 	mov.w	r8, #0
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	4798      	blx	r3
    uint32_t line_start      = 0;
 801636e:	4646      	mov	r6, r8
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 8016370:	4605      	mov	r5, r0
        y += letter_height + line_space;
 8016372:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8016376:	4413      	add	r3, r2
 8016378:	9309      	str	r3, [sp, #36]	; 0x24
    while(txt[new_line_start] != '\0') {
 801637a:	5da3      	ldrb	r3, [r4, r6]
 801637c:	19a0      	adds	r0, r4, r6
 801637e:	2b00      	cmp	r3, #0
 8016380:	d143      	bne.n	801640a <lv_label_get_letter_pos+0x15a>
 8016382:	46b1      	mov	r9, r6
    if(byte_id > 0) {
 8016384:	b17d      	cbz	r5, 80163a6 <lv_label_get_letter_pos+0xf6>
        if((txt[byte_id - 1] == '\n' || txt[byte_id - 1] == '\r') && txt[byte_id] == '\0') {
 8016386:	1963      	adds	r3, r4, r5
 8016388:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801638c:	2b0a      	cmp	r3, #10
 801638e:	d001      	beq.n	8016394 <lv_label_get_letter_pos+0xe4>
 8016390:	2b0d      	cmp	r3, #13
 8016392:	d108      	bne.n	80163a6 <lv_label_get_letter_pos+0xf6>
 8016394:	5d63      	ldrb	r3, [r4, r5]
 8016396:	b933      	cbnz	r3, 80163a6 <lv_label_get_letter_pos+0xf6>
            y += letter_height + line_space;
 8016398:	462e      	mov	r6, r5
 801639a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801639e:	4413      	add	r3, r2
 80163a0:	4443      	add	r3, r8
 80163a2:	fa0f f883 	sxth.w	r8, r3
    bidi_txt = &txt[line_start];
 80163a6:	4434      	add	r4, r6
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 80163a8:	1ba9      	subs	r1, r5, r6
 80163aa:	f8cd a000 	str.w	sl, [sp]
 80163ae:	4620      	mov	r0, r4
 80163b0:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80163b4:	f00f fa01 	bl	80257ba <lv_txt_get_width>
    if(char_id != line_start) x += letter_space;
 80163b8:	9b07      	ldr	r3, [sp, #28]
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 80163ba:	4605      	mov	r5, r0
    if(char_id != line_start) x += letter_space;
 80163bc:	429e      	cmp	r6, r3
 80163be:	bf1e      	ittt	ne
 80163c0:	9b04      	ldrne	r3, [sp, #16]
 80163c2:	18ed      	addne	r5, r5, r3
 80163c4:	b22d      	sxthne	r5, r5
    if(align == LV_TEXT_ALIGN_CENTER) {
 80163c6:	f1bb 0f02 	cmp.w	fp, #2
 80163ca:	d135      	bne.n	8016438 <lv_label_get_letter_pos+0x188>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80163cc:	eba9 0106 	sub.w	r1, r9, r6
 80163d0:	4620      	mov	r0, r4
 80163d2:	f8cd a000 	str.w	sl, [sp]
 80163d6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80163da:	f00f f9ee 	bl	80257ba <lv_txt_get_width>
 80163de:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80163e2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 80163e6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80163ea:	3301      	adds	r3, #1
 80163ec:	f340 004f 	sbfx	r0, r0, #1, #16
 80163f0:	1a9b      	subs	r3, r3, r2
 80163f2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80163f6:	fa02 f383 	sxtah	r3, r2, r3
 80163fa:	ebc0 0063 	rsb	r0, r0, r3, asr #1
 80163fe:	4428      	add	r0, r5
 8016400:	b205      	sxth	r5, r0
    pos->x = x;
 8016402:	803d      	strh	r5, [r7, #0]
    pos->y = y;
 8016404:	f8a7 8002 	strh.w	r8, [r7, #2]
 8016408:	e76a      	b.n	80162e0 <lv_label_get_letter_pos+0x30>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 801640a:	2300      	movs	r3, #0
 801640c:	f8cd a004 	str.w	sl, [sp, #4]
 8016410:	9300      	str	r3, [sp, #0]
 8016412:	9b08      	ldr	r3, [sp, #32]
 8016414:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 8016418:	f7fc fc4c 	bl	8012cb4 <_lv_txt_get_next_line>
 801641c:	eb06 0900 	add.w	r9, r6, r0
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
 8016420:	454d      	cmp	r5, r9
 8016422:	d3af      	bcc.n	8016384 <lv_label_get_letter_pos+0xd4>
 8016424:	f814 3009 	ldrb.w	r3, [r4, r9]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d0ab      	beq.n	8016384 <lv_label_get_letter_pos+0xd4>
        y += letter_height + line_space;
 801642c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801642e:	464e      	mov	r6, r9
 8016430:	4498      	add	r8, r3
 8016432:	fa0f f888 	sxth.w	r8, r8
        line_start = new_line_start;
 8016436:	e7a0      	b.n	801637a <lv_label_get_letter_pos+0xca>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8016438:	f1bb 0f03 	cmp.w	fp, #3
 801643c:	d1e1      	bne.n	8016402 <lv_label_get_letter_pos+0x152>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801643e:	eba9 0106 	sub.w	r1, r9, r6
 8016442:	4620      	mov	r0, r4
 8016444:	f8cd a000 	str.w	sl, [sp]
 8016448:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 801644c:	f00f f9b5 	bl	80257ba <lv_txt_get_width>
 8016450:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8016454:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8016458:	3301      	adds	r3, #1
 801645a:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 801645c:	b21b      	sxth	r3, r3
 801645e:	1a1b      	subs	r3, r3, r0
 8016460:	442b      	add	r3, r5
 8016462:	b21d      	sxth	r5, r3
 8016464:	e7cd      	b.n	8016402 <lv_label_get_letter_pos+0x152>
 8016466:	bf00      	nop
 8016468:	240000f8 	.word	0x240000f8

0801646c <lv_label_ins_text>:
{
 801646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801646e:	4604      	mov	r4, r0
 8016470:	460d      	mov	r5, r1
    LV_ASSERT_NULL(txt);
 8016472:	4616      	mov	r6, r2
 8016474:	b902      	cbnz	r2, 8016478 <lv_label_ins_text+0xc>
 8016476:	e7fe      	b.n	8016476 <lv_label_ins_text+0xa>
    if(label->static_txt != 0) return;
 8016478:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801647c:	071b      	lsls	r3, r3, #28
 801647e:	d423      	bmi.n	80164c8 <lv_label_ins_text+0x5c>
    lv_obj_invalidate(obj);
 8016480:	f006 fbd8 	bl	801cc34 <lv_obj_invalidate>
    size_t old_len = strlen(label->text);
 8016484:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016486:	f004 f92d 	bl	801a6e4 <strlen>
 801648a:	4607      	mov	r7, r0
    size_t ins_len = strlen(txt);
 801648c:	4630      	mov	r0, r6
 801648e:	f004 f929 	bl	801a6e4 <strlen>
    size_t new_len = ins_len + old_len;
 8016492:	1839      	adds	r1, r7, r0
    label->text        = lv_mem_realloc(label->text, new_len + 1);
 8016494:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016496:	3101      	adds	r1, #1
 8016498:	f7fc f940 	bl	801271c <lv_mem_realloc>
 801649c:	6260      	str	r0, [r4, #36]	; 0x24
    LV_ASSERT_MALLOC(label->text);
 801649e:	b900      	cbnz	r0, 80164a2 <lv_label_ins_text+0x36>
 80164a0:	e7fe      	b.n	80164a0 <lv_label_ins_text+0x34>
    if(pos == LV_LABEL_POS_LAST) {
 80164a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80164a6:	429d      	cmp	r5, r3
 80164a8:	d103      	bne.n	80164b2 <lv_label_ins_text+0x46>
        pos = _lv_txt_get_encoded_length(label->text);
 80164aa:	4b08      	ldr	r3, [pc, #32]	; (80164cc <lv_label_ins_text+0x60>)
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	4798      	blx	r3
 80164b0:	4605      	mov	r5, r0
    _lv_txt_ins(label->text, pos, txt);
 80164b2:	4629      	mov	r1, r5
 80164b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80164b6:	4632      	mov	r2, r6
 80164b8:	f7fc fd10 	bl	8012edc <_lv_txt_ins>
    lv_label_set_text(obj, NULL);
 80164bc:	4620      	mov	r0, r4
 80164be:	2100      	movs	r1, #0
}
 80164c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_set_text(obj, NULL);
 80164c4:	f010 bcda 	b.w	8026e7c <lv_label_set_text>
}
 80164c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164ca:	bf00      	nop
 80164cc:	240000f0 	.word	0x240000f0

080164d0 <lv_line_event>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_line_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80164d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 80164d4:	485a      	ldr	r0, [pc, #360]	; (8016640 <lv_line_event+0x170>)
{
 80164d6:	b089      	sub	sp, #36	; 0x24
 80164d8:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 80164da:	f004 fe74 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80164de:	2801      	cmp	r0, #1
 80164e0:	d116      	bne.n	8016510 <lv_line_event+0x40>

    lv_event_code_t code = lv_event_get_code(e);
 80164e2:	4628      	mov	r0, r5
 80164e4:	f004 fe89 	bl	801b1fa <lv_event_get_code>
 80164e8:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80164ea:	4628      	mov	r0, r5
 80164ec:	f004 fe81 	bl	801b1f2 <lv_event_get_target>

    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80164f0:	2e13      	cmp	r6, #19
    lv_obj_t * obj = lv_event_get_target(e);
 80164f2:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80164f4:	d10f      	bne.n	8016516 <lv_line_event+0x46>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 80164f6:	2249      	movs	r2, #73	; 0x49
 80164f8:	2100      	movs	r1, #0
 80164fa:	f007 fac1 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80164fe:	b204      	sxth	r4, r0
        /*The corner of the skew lines is out of the intended area*/
        lv_coord_t line_width = lv_obj_get_style_line_width(obj, LV_PART_MAIN);
        lv_coord_t * s = lv_event_get_param(e);
 8016500:	4628      	mov	r0, r5
 8016502:	f004 fe7e 	bl	801b202 <lv_event_get_param>
        if(*s < line_width) *s = line_width;
 8016506:	f9b0 3000 	ldrsh.w	r3, [r0]
 801650a:	42a3      	cmp	r3, r4
 801650c:	da00      	bge.n	8016510 <lv_line_event+0x40>
 801650e:	8004      	strh	r4, [r0, #0]
            }
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
        }
    }
}
 8016510:	b009      	add	sp, #36	; 0x24
 8016512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8016516:	2e2c      	cmp	r6, #44	; 0x2c
 8016518:	d12b      	bne.n	8016572 <lv_line_event+0xa2>
        if(line->point_num == 0 || line->point_array == NULL) return;
 801651a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 801651c:	2b00      	cmp	r3, #0
 801651e:	d0f7      	beq.n	8016510 <lv_line_event+0x40>
 8016520:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016522:	2b00      	cmp	r3, #0
 8016524:	d0f4      	beq.n	8016510 <lv_line_event+0x40>
        lv_point_t * p = lv_event_get_param(e);
 8016526:	4628      	mov	r0, r5
 8016528:	f004 fe6b 	bl	801b202 <lv_event_get_param>
        for(i = 0; i < line->point_num; i++) {
 801652c:	2300      	movs	r3, #0
        lv_point_t * p = lv_event_get_param(e);
 801652e:	4606      	mov	r6, r0
        for(i = 0; i < line->point_num; i++) {
 8016530:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        lv_coord_t h = 0;
 8016532:	461f      	mov	r7, r3
        lv_coord_t w = 0;
 8016534:	461d      	mov	r5, r3
        for(i = 0; i < line->point_num; i++) {
 8016536:	b29a      	uxth	r2, r3
 8016538:	4291      	cmp	r1, r2
 801653a:	d80b      	bhi.n	8016554 <lv_line_event+0x84>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 801653c:	2249      	movs	r2, #73	; 0x49
 801653e:	2100      	movs	r1, #0
 8016540:	4620      	mov	r0, r4
 8016542:	f007 fa9d 	bl	801da80 <lv_obj_get_style_prop>
        w += line_width;
 8016546:	fa15 f580 	uxtah	r5, r5, r0
        h += line_width;
 801654a:	fa17 f080 	uxtah	r0, r7, r0
        p->x = w;
 801654e:	8035      	strh	r5, [r6, #0]
        p->y = h;
 8016550:	8070      	strh	r0, [r6, #2]
 8016552:	e7dd      	b.n	8016510 <lv_line_event+0x40>
            w = LV_MAX(line->point_array[i].x, w);
 8016554:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016556:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 801655a:	f932 2023 	ldrsh.w	r2, [r2, r3, lsl #2]
 801655e:	3301      	adds	r3, #1
 8016560:	4295      	cmp	r5, r2
 8016562:	bfb8      	it	lt
 8016564:	4615      	movlt	r5, r2
            h = LV_MAX(line->point_array[i].y, h);
 8016566:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801656a:	4297      	cmp	r7, r2
 801656c:	bfb8      	it	lt
 801656e:	4617      	movlt	r7, r2
        for(i = 0; i < line->point_num; i++) {
 8016570:	e7e1      	b.n	8016536 <lv_line_event+0x66>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8016572:	2e15      	cmp	r6, #21
 8016574:	d1cc      	bne.n	8016510 <lv_line_event+0x40>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016576:	4628      	mov	r0, r5
 8016578:	f004 fe94 	bl	801b2a4 <lv_event_get_draw_ctx>
        if(line->point_num == 0 || line->point_array == NULL) return;
 801657c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801657e:	4681      	mov	r9, r0
        if(line->point_num == 0 || line->point_array == NULL) return;
 8016580:	2b00      	cmp	r3, #0
 8016582:	d0c5      	beq.n	8016510 <lv_line_event+0x40>
 8016584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016586:	2b00      	cmp	r3, #0
 8016588:	d0c2      	beq.n	8016510 <lv_line_event+0x40>
        lv_obj_get_coords(obj, &area);
 801658a:	a903      	add	r1, sp, #12
 801658c:	4620      	mov	r0, r4
 801658e:	f006 f901 	bl	801c794 <lv_obj_get_coords>
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 8016592:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8016596:	4620      	mov	r0, r4
        for(i = 0; i < line->point_num - 1; i++) {
 8016598:	f04f 0800 	mov.w	r8, #0
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 801659c:	f006 fcdd 	bl	801cf5a <lv_obj_get_scroll_x>
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 80165a0:	f8bd 600e 	ldrh.w	r6, [sp, #14]
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 80165a4:	1a3f      	subs	r7, r7, r0
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 80165a6:	4620      	mov	r0, r4
 80165a8:	f006 fcdd 	bl	801cf66 <lv_obj_get_scroll_y>
 80165ac:	1a36      	subs	r6, r6, r0
        lv_coord_t h = lv_obj_get_height(obj);
 80165ae:	4620      	mov	r0, r4
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 80165b0:	b2bf      	uxth	r7, r7
        lv_coord_t h = lv_obj_get_height(obj);
 80165b2:	f006 f945 	bl	801c840 <lv_obj_get_height>
 80165b6:	4605      	mov	r5, r0
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 80165b8:	b2b6      	uxth	r6, r6
        lv_draw_line_dsc_init(&line_dsc);
 80165ba:	a805      	add	r0, sp, #20
 80165bc:	f008 f9c3 	bl	801e946 <lv_draw_line_dsc_init>
        lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 80165c0:	aa05      	add	r2, sp, #20
 80165c2:	4435      	add	r5, r6
 80165c4:	2100      	movs	r1, #0
 80165c6:	4620      	mov	r0, r4
 80165c8:	b2ad      	uxth	r5, r5
 80165ca:	f005 fe4d 	bl	801c268 <lv_obj_init_draw_line_dsc>
        for(i = 0; i < line->point_num - 1; i++) {
 80165ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80165d0:	fa1f f388 	uxth.w	r3, r8
 80165d4:	3a01      	subs	r2, #1
 80165d6:	4293      	cmp	r3, r2
 80165d8:	da9a      	bge.n	8016510 <lv_line_event+0x40>
            p1.x = line->point_array[i].x + x_ofs;
 80165da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80165dc:	009a      	lsls	r2, r3, #2
 80165de:	f108 0801 	add.w	r8, r8, #1
 80165e2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80165e6:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 80165ea:	443b      	add	r3, r7
 80165ec:	f8ad 3004 	strh.w	r3, [sp, #4]
            p2.x = line->point_array[i + 1].x + x_ofs;
 80165f0:	1d13      	adds	r3, r2, #4
 80165f2:	18ca      	adds	r2, r1, r3
 80165f4:	5acb      	ldrh	r3, [r1, r3]
            if(line->y_inv == 0) {
 80165f6:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
            p2.x = line->point_array[i + 1].x + x_ofs;
 80165fa:	443b      	add	r3, r7
            if(line->y_inv == 0) {
 80165fc:	07c9      	lsls	r1, r1, #31
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 80165fe:	a905      	add	r1, sp, #20
            p2.x = line->point_array[i + 1].x + x_ofs;
 8016600:	f8ad 3008 	strh.w	r3, [sp, #8]
                p1.y = line->point_array[i].y + y_ofs;
 8016604:	8843      	ldrh	r3, [r0, #2]
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8016606:	4648      	mov	r0, r9
                p1.y = line->point_array[i].y + y_ofs;
 8016608:	bf55      	itete	pl
 801660a:	199b      	addpl	r3, r3, r6
                p1.y = h - line->point_array[i].y + y_ofs;
 801660c:	1aeb      	submi	r3, r5, r3
                p1.y = line->point_array[i].y + y_ofs;
 801660e:	f8ad 3006 	strhpl.w	r3, [sp, #6]
                p1.y = h - line->point_array[i].y + y_ofs;
 8016612:	f8ad 3006 	strhmi.w	r3, [sp, #6]
                p2.y = line->point_array[i + 1].y + y_ofs;
 8016616:	bf54      	ite	pl
 8016618:	8853      	ldrhpl	r3, [r2, #2]
                p2.y = h - line->point_array[i + 1].y + y_ofs;
 801661a:	8853      	ldrhmi	r3, [r2, #2]
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 801661c:	aa01      	add	r2, sp, #4
                p2.y = line->point_array[i + 1].y + y_ofs;
 801661e:	bf54      	ite	pl
 8016620:	199b      	addpl	r3, r3, r6
                p2.y = h - line->point_array[i + 1].y + y_ofs;
 8016622:	1aeb      	submi	r3, r5, r3
 8016624:	b21b      	sxth	r3, r3
                p2.y = line->point_array[i + 1].y + y_ofs;
 8016626:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 801662a:	ab02      	add	r3, sp, #8
 801662c:	f008 f998 	bl	801e960 <lv_draw_line>
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
 8016630:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8016634:	f36f 0382 	bfc	r3, #2, #1
 8016638:	f88d 301d 	strb.w	r3, [sp, #29]
        for(i = 0; i < line->point_num - 1; i++) {
 801663c:	e7c7      	b.n	80165ce <lv_line_event+0xfe>
 801663e:	bf00      	nop
 8016640:	080299f8 	.word	0x080299f8

08016644 <refr_position>:
 * Refresh the position of the roller. It uses the id stored in: roller->ddlist.selected_option_id
 * @param roller pointer to a roller object
 * @param anim_en LV_ANIM_ON: refresh with animation; LV_ANOM_OFF: without animation
 */
static void refr_position(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 8016644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016648:	b095      	sub	sp, #84	; 0x54
 801664a:	4680      	mov	r8, r0
 801664c:	460f      	mov	r7, r1
    lv_obj_t * label = get_label(obj);
 801664e:	f010 fd96 	bl	802717e <get_label>
    if(label == NULL) return;
 8016652:	4605      	mov	r5, r0
 8016654:	2800      	cmp	r0, #0
 8016656:	d05a      	beq.n	801670e <refr_position+0xca>

    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, lv_label_get_text(label));
 8016658:	f010 fc91 	bl	8026f7e <lv_label_get_text>
 801665c:	2100      	movs	r1, #0
 801665e:	4602      	mov	r2, r0
 8016660:	4628      	mov	r0, r5
 8016662:	f007 fd46 	bl	801e0f2 <lv_obj_calculate_style_text_align>

    switch(align) {
 8016666:	2802      	cmp	r0, #2
 8016668:	d005      	beq.n	8016676 <refr_position+0x32>
 801666a:	2803      	cmp	r0, #3
 801666c:	d052      	beq.n	8016714 <refr_position+0xd0>
 801666e:	2801      	cmp	r0, #1
 8016670:	d110      	bne.n	8016694 <refr_position+0x50>
            break;
        case LV_TEXT_ALIGN_RIGHT:
            lv_obj_set_x(label, lv_obj_get_content_width(obj) - lv_obj_get_width(label));
            break;
        case LV_TEXT_ALIGN_LEFT:
            lv_obj_set_x(label, 0);
 8016672:	2100      	movs	r1, #0
 8016674:	e00b      	b.n	801668e <refr_position+0x4a>
            lv_obj_set_x(label, (lv_obj_get_content_width(obj) - lv_obj_get_width(label)) / 2);
 8016676:	4640      	mov	r0, r8
 8016678:	f006 f8e8 	bl	801c84c <lv_obj_get_content_width>
 801667c:	4604      	mov	r4, r0
 801667e:	4628      	mov	r0, r5
 8016680:	f006 f8d8 	bl	801c834 <lv_obj_get_width>
 8016684:	1a20      	subs	r0, r4, r0
 8016686:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801668a:	f340 014f 	sbfx	r1, r0, #1, #16
            lv_obj_set_x(label, 0);
 801668e:	4628      	mov	r0, r5
 8016690:	f005 ffdd 	bl	801c64e <lv_obj_set_x>
            break;
    }

    lv_roller_t * roller = (lv_roller_t *)obj;
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8016694:	2100      	movs	r1, #0
 8016696:	4640      	mov	r0, r8
 8016698:	f010 fd6c 	bl	8027174 <lv_obj_get_style_text_font>
 801669c:	4604      	mov	r4, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801669e:	4640      	mov	r0, r8
 80166a0:	f010 fd70 	bl	8027184 <lv_obj_get_style_text_line_space.constprop.0>
 80166a4:	4682      	mov	sl, r0
    lv_coord_t font_h              = lv_font_get_line_height(font);
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 80166a6:	4640      	mov	r0, r8
 80166a8:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 80166ac:	f006 f8e4 	bl	801c878 <lv_obj_get_content_height>
 80166b0:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 80166b2:	2264      	movs	r2, #100	; 0x64
 80166b4:	2100      	movs	r1, #0
 80166b6:	4640      	mov	r0, r8
 80166b8:	ea4f 74d9 	mov.w	r4, r9, lsr #31
 80166bc:	f007 f9e0 	bl	801da80 <lv_obj_get_style_prop>
 80166c0:	44ca      	add	sl, r9
 80166c2:	4606      	mov	r6, r0
    uint16_t anim_time             = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);
 80166c4:	b281      	uxth	r1, r0

    /*Normally the animation's `end_cb` sets correct position of the roller if infinite.
     *But without animations do it manually*/
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 80166c6:	ea4f 72db 	mov.w	r2, fp, lsr #31
 80166ca:	b36f      	cbz	r7, 8016728 <refr_position+0xe4>
 80166cc:	b361      	cbz	r1, 8016728 <refr_position+0xe4>
        inf_normalize(obj);
    }

    int32_t id = roller->sel_opt_id;
    lv_coord_t sel_y1 = id * (font_h + line_space);
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80166ce:	444c      	add	r4, r9
 80166d0:	445a      	add	r2, fp
    lv_coord_t sel_y1 = id * (font_h + line_space);
 80166d2:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80166d6:	1064      	asrs	r4, r4, #1
    lv_coord_t sel_y1 = id * (font_h + line_space);
 80166d8:	fb13 f30a 	smulbb	r3, r3, sl
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80166dc:	ebc4 0462 	rsb	r4, r4, r2, asr #1

    lv_coord_t new_y = mid_y1 - sel_y1;
 80166e0:	1ae4      	subs	r4, r4, r3
 80166e2:	b224      	sxth	r4, r4
        lv_anim_del(label, set_y_anim);
        lv_obj_set_y(label, new_y);
    }
    else {
        lv_anim_t a;
        lv_anim_init(&a);
 80166e4:	a803      	add	r0, sp, #12
 80166e6:	b2b6      	uxth	r6, r6
 80166e8:	f7fb fe0a 	bl	8012300 <lv_anim_init>
    a->exec_cb = exec_cb;
 80166ec:	4b1e      	ldr	r3, [pc, #120]	; (8016768 <refr_position+0x124>)
        lv_anim_set_var(&a, label);
        lv_anim_set_exec_cb(&a, set_y_anim);
        lv_anim_set_values(&a, lv_obj_get_y(label), new_y);
 80166ee:	4628      	mov	r0, r5
    a->var = var;
 80166f0:	9503      	str	r5, [sp, #12]
    a->exec_cb = exec_cb;
 80166f2:	9304      	str	r3, [sp, #16]
 80166f4:	f006 f877 	bl	801c7e6 <lv_obj_get_y>
    a->ready_cb = ready_cb;
 80166f8:	4b1c      	ldr	r3, [pc, #112]	; (801676c <refr_position+0x128>)
 80166fa:	940d      	str	r4, [sp, #52]	; 0x34
 80166fc:	9306      	str	r3, [sp, #24]
    a->path_cb = path_cb;
 80166fe:	4b1c      	ldr	r3, [pc, #112]	; (8016770 <refr_position+0x12c>)
    a->time = duration;
 8016700:	960e      	str	r6, [sp, #56]	; 0x38
    a->path_cb = path_cb;
 8016702:	930a      	str	r3, [sp, #40]	; 0x28
    a->current_value = start;
 8016704:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
        lv_anim_set_time(&a, anim_time);
        lv_anim_set_ready_cb(&a, scroll_anim_ready_cb);
        lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
        lv_anim_start(&a);
 8016708:	a803      	add	r0, sp, #12
 801670a:	f7fb fe45 	bl	8012398 <lv_anim_start>
    }
}
 801670e:	b015      	add	sp, #84	; 0x54
 8016710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_obj_set_x(label, lv_obj_get_content_width(obj) - lv_obj_get_width(label));
 8016714:	4640      	mov	r0, r8
 8016716:	f006 f899 	bl	801c84c <lv_obj_get_content_width>
 801671a:	4604      	mov	r4, r0
 801671c:	4628      	mov	r0, r5
 801671e:	f006 f889 	bl	801c834 <lv_obj_get_width>
 8016722:	1a21      	subs	r1, r4, r0
 8016724:	b209      	sxth	r1, r1
 8016726:	e7b2      	b.n	801668e <refr_position+0x4a>
        inf_normalize(obj);
 8016728:	4640      	mov	r0, r8
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801672a:	444c      	add	r4, r9
 801672c:	e9cd 1200 	strd	r1, r2, [sp]
        inf_normalize(obj);
 8016730:	f010 fd65 	bl	80271fe <inf_normalize>
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8016734:	9a01      	ldr	r2, [sp, #4]
 8016736:	1064      	asrs	r4, r4, #1
    lv_coord_t sel_y1 = id * (font_h + line_space);
 8016738:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801673c:	445a      	add	r2, fp
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801673e:	9900      	ldr	r1, [sp, #0]
    lv_coord_t sel_y1 = id * (font_h + line_space);
 8016740:	fb13 f30a 	smulbb	r3, r3, sl
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8016744:	ebc4 0462 	rsb	r4, r4, r2, asr #1
    lv_coord_t new_y = mid_y1 - sel_y1;
 8016748:	1ae4      	subs	r4, r4, r3
 801674a:	b224      	sxth	r4, r4
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801674c:	b10f      	cbz	r7, 8016752 <refr_position+0x10e>
 801674e:	2900      	cmp	r1, #0
 8016750:	d1c8      	bne.n	80166e4 <refr_position+0xa0>
        lv_anim_del(label, set_y_anim);
 8016752:	4905      	ldr	r1, [pc, #20]	; (8016768 <refr_position+0x124>)
 8016754:	4628      	mov	r0, r5
 8016756:	f7fb fdef 	bl	8012338 <lv_anim_del>
        lv_obj_set_y(label, new_y);
 801675a:	4621      	mov	r1, r4
 801675c:	4628      	mov	r0, r5
}
 801675e:	b015      	add	sp, #84	; 0x54
 8016760:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_set_y(label, new_y);
 8016764:	f005 bf8a 	b.w	801c67c <lv_obj_set_y>
 8016768:	0802716f 	.word	0x0802716f
 801676c:	0802727d 	.word	0x0802727d
 8016770:	08024149 	.word	0x08024149

08016774 <lv_roller_constructor>:
{
 8016774:	b538      	push	{r3, r4, r5, lr}
    roller->option_cnt = 0;
 8016776:	2500      	movs	r5, #0
    roller->mode = LV_ROLLER_MODE_NORMAL;
 8016778:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
{
 801677c:	460c      	mov	r4, r1
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801677e:	f365 0300 	bfi	r3, r5, #0, #1
    roller->option_cnt = 0;
 8016782:	624d      	str	r5, [r1, #36]	; 0x24
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8016784:	4620      	mov	r0, r4
    roller->sel_opt_id_ori = 0;
 8016786:	850d      	strh	r5, [r1, #40]	; 0x28
    roller->mode = LV_ROLLER_MODE_NORMAL;
 8016788:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801678c:	2110      	movs	r1, #16
 801678e:	f005 f8ee 	bl	801b96e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN_VER);
 8016792:	4620      	mov	r0, r4
 8016794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016798:	f005 f8e9 	bl	801b96e <lv_obj_clear_flag>
    lv_obj_t * label = lv_obj_class_create_obj(&lv_roller_label_class, obj);
 801679c:	4621      	mov	r1, r4
 801679e:	4806      	ldr	r0, [pc, #24]	; (80167b8 <lv_roller_constructor+0x44>)
 80167a0:	f7ee fb0a 	bl	8004db8 <lv_obj_class_create_obj>
    lv_obj_class_init_obj(label);
 80167a4:	f005 fb16 	bl	801bdd4 <lv_obj_class_init_obj>
    LV_ASSERT_NULL(options);
 80167a8:	462a      	mov	r2, r5
 80167aa:	4620      	mov	r0, r4
 80167ac:	4903      	ldr	r1, [pc, #12]	; (80167bc <lv_roller_constructor+0x48>)
}
 80167ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80167b2:	f010 bd6b 	b.w	802728c <lv_roller_set_options.part.0>
 80167b6:	bf00      	nop
 80167b8:	08029a14 	.word	0x08029a14
 80167bc:	0802df09 	.word	0x0802df09

080167c0 <lv_roller_label_event>:
{
 80167c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_event_code_t code = lv_event_get_code(e);
 80167c4:	4608      	mov	r0, r1
{
 80167c6:	b090      	sub	sp, #64	; 0x40
 80167c8:	460c      	mov	r4, r1
    lv_event_code_t code = lv_event_get_code(e);
 80167ca:	f004 fd16 	bl	801b1fa <lv_event_get_code>
    if(code != LV_EVENT_DRAW_MAIN) {
 80167ce:	2815      	cmp	r0, #21
    lv_event_code_t code = lv_event_get_code(e);
 80167d0:	4605      	mov	r5, r0
    if(code != LV_EVENT_DRAW_MAIN) {
 80167d2:	d16b      	bne.n	80168ac <lv_roller_label_event+0xec>
    lv_obj_t * label = lv_event_get_target(e);
 80167d4:	4620      	mov	r0, r4
 80167d6:	f004 fd0c 	bl	801b1f2 <lv_event_get_target>
    lv_obj_t * label_obj = lv_event_get_target(e);
 80167da:	4620      	mov	r0, r4
 80167dc:	f004 fd09 	bl	801b1f2 <lv_event_get_target>
 80167e0:	4605      	mov	r5, r0
    lv_obj_t * roller = lv_obj_get_parent(label_obj);
 80167e2:	f007 fcd1 	bl	801e188 <lv_obj_get_parent>
 80167e6:	4606      	mov	r6, r0
    lv_draw_label_dsc_init(&label_draw_dsc);
 80167e8:	a808      	add	r0, sp, #32
 80167ea:	f7f1 fa5d 	bl	8007ca8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(roller, LV_PART_MAIN, &label_draw_dsc);
 80167ee:	4630      	mov	r0, r6
 80167f0:	aa08      	add	r2, sp, #32
 80167f2:	2100      	movs	r1, #0
 80167f4:	f005 fc9b 	bl	801c12e <lv_obj_init_draw_label_dsc>
    if(lv_label_get_recolor(label_obj)) label_draw_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 80167f8:	4628      	mov	r0, r5
 80167fa:	f010 fbc2 	bl	8026f82 <lv_label_get_recolor>
 80167fe:	2800      	cmp	r0, #0
 8016800:	f040 8081 	bne.w	8016906 <lv_roller_label_event+0x146>
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016804:	4620      	mov	r0, r4
    if(!_lv_area_intersect(&roller_clip_area, draw_ctx->clip_area, &roller->coords)) return;
 8016806:	f10d 0808 	add.w	r8, sp, #8
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801680a:	f004 fd4b 	bl	801b2a4 <lv_event_get_draw_ctx>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801680e:	6887      	ldr	r7, [r0, #8]
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016810:	4604      	mov	r4, r0
    if(!_lv_area_intersect(&roller_clip_area, draw_ctx->clip_area, &roller->coords)) return;
 8016812:	f106 0214 	add.w	r2, r6, #20
 8016816:	4639      	mov	r1, r7
 8016818:	4640      	mov	r0, r8
 801681a:	f00d fd2a 	bl	8024272 <_lv_area_intersect>
 801681e:	2800      	cmp	r0, #0
 8016820:	d06e      	beq.n	8016900 <lv_roller_label_event+0x140>
    get_sel_area(roller, &sel_area);
 8016822:	a904      	add	r1, sp, #16
 8016824:	4630      	mov	r0, r6
    draw_ctx->clip_area = &roller_clip_area;
 8016826:	f8c4 8008 	str.w	r8, [r4, #8]
    get_sel_area(roller, &sel_area);
 801682a:	f010 fcb2 	bl	8027192 <get_sel_area>
    clip2.x1 = label_obj->coords.x1;
 801682e:	696a      	ldr	r2, [r5, #20]
    clip2.x2 = label_obj->coords.x2;
 8016830:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
    clip2.x1 = label_obj->coords.x1;
 8016834:	9206      	str	r2, [sp, #24]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8016836:	aa06      	add	r2, sp, #24
    clip2.x2 = label_obj->coords.x2;
 8016838:	f8ad 301c 	strh.w	r3, [sp, #28]
    clip2.y2 = sel_area.y1;
 801683c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8016840:	4610      	mov	r0, r2
 8016842:	68a1      	ldr	r1, [r4, #8]
    clip2.y2 = sel_area.y1;
 8016844:	f8ad 301e 	strh.w	r3, [sp, #30]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8016848:	f00d fd13 	bl	8024272 <_lv_area_intersect>
 801684c:	b178      	cbz	r0, 801686e <lv_roller_label_event+0xae>
        draw_ctx->clip_area = &clip2;
 801684e:	ab06      	add	r3, sp, #24
        const lv_area_t * clip_area_ori2 = draw_ctx->clip_area;
 8016850:	68a6      	ldr	r6, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 8016852:	4628      	mov	r0, r5
        draw_ctx->clip_area = &clip2;
 8016854:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 8016856:	f010 fb92 	bl	8026f7e <lv_label_get_text>
 801685a:	2200      	movs	r2, #0
 801685c:	4603      	mov	r3, r0
 801685e:	a908      	add	r1, sp, #32
 8016860:	9200      	str	r2, [sp, #0]
 8016862:	4620      	mov	r0, r4
 8016864:	f105 0214 	add.w	r2, r5, #20
 8016868:	f7f1 fa36 	bl	8007cd8 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori2;
 801686c:	60a6      	str	r6, [r4, #8]
    clip2.x1 = label_obj->coords.x1;
 801686e:	8aab      	ldrh	r3, [r5, #20]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8016870:	aa06      	add	r2, sp, #24
 8016872:	68a1      	ldr	r1, [r4, #8]
    clip2.x1 = label_obj->coords.x1;
 8016874:	f8ad 3018 	strh.w	r3, [sp, #24]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8016878:	4610      	mov	r0, r2
    clip2.y1 = sel_area.y2;
 801687a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801687e:	f8ad 301a 	strh.w	r3, [sp, #26]
    clip2.x2 = label_obj->coords.x2;
 8016882:	69ab      	ldr	r3, [r5, #24]
 8016884:	9307      	str	r3, [sp, #28]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8016886:	f00d fcf4 	bl	8024272 <_lv_area_intersect>
 801688a:	b168      	cbz	r0, 80168a8 <lv_roller_label_event+0xe8>
        draw_ctx->clip_area = &clip2;
 801688c:	ab06      	add	r3, sp, #24
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 801688e:	4628      	mov	r0, r5
        draw_ctx->clip_area = &clip2;
 8016890:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 8016892:	f010 fb74 	bl	8026f7e <lv_label_get_text>
 8016896:	2200      	movs	r2, #0
 8016898:	4603      	mov	r3, r0
 801689a:	a908      	add	r1, sp, #32
 801689c:	9200      	str	r2, [sp, #0]
 801689e:	4620      	mov	r0, r4
 80168a0:	f105 0214 	add.w	r2, r5, #20
 80168a4:	f7f1 fa18 	bl	8007cd8 <lv_draw_label>
    draw_ctx->clip_area = clip_area_ori;
 80168a8:	60a7      	str	r7, [r4, #8]
 80168aa:	e029      	b.n	8016900 <lv_roller_label_event+0x140>
        res = lv_obj_event_base(MY_CLASS_LABEL, e);
 80168ac:	4621      	mov	r1, r4
 80168ae:	4819      	ldr	r0, [pc, #100]	; (8016914 <lv_roller_label_event+0x154>)
 80168b0:	f004 fc89 	bl	801b1c6 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 80168b4:	2801      	cmp	r0, #1
 80168b6:	d123      	bne.n	8016900 <lv_roller_label_event+0x140>
    lv_obj_t * label = lv_event_get_target(e);
 80168b8:	4620      	mov	r0, r4
 80168ba:	f004 fc9a 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80168be:	2d13      	cmp	r5, #19
    lv_obj_t * label = lv_event_get_target(e);
 80168c0:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80168c2:	d009      	beq.n	80168d8 <lv_roller_label_event+0x118>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 80168c4:	2d29      	cmp	r5, #41	; 0x29
 80168c6:	d11b      	bne.n	8016900 <lv_roller_label_event+0x140>
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 80168c8:	f007 fc5e 	bl	801e188 <lv_obj_get_parent>
 80168cc:	2100      	movs	r1, #0
}
 80168ce:	b010      	add	sp, #64	; 0x40
 80168d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 80168d4:	f7ff beb6 	b.w	8016644 <refr_position>
        lv_coord_t * s = lv_event_get_param(e);
 80168d8:	4620      	mov	r0, r4
 80168da:	f004 fc92 	bl	801b202 <lv_event_get_param>
 80168de:	4605      	mov	r5, r0
        lv_obj_t * obj = lv_obj_get_parent(label);
 80168e0:	4630      	mov	r0, r6
 80168e2:	f007 fc51 	bl	801e188 <lv_obj_get_parent>
        lv_coord_t sel_w = get_selected_label_width(obj);
 80168e6:	f010 fd30 	bl	802734a <get_selected_label_width>
 80168ea:	4604      	mov	r4, r0
        lv_coord_t label_w = lv_obj_get_width(label);
 80168ec:	4630      	mov	r0, r6
 80168ee:	f005 ffa1 	bl	801c834 <lv_obj_get_width>
        *s = LV_MAX(*s, sel_w - label_w);
 80168f2:	f9b5 3000 	ldrsh.w	r3, [r5]
 80168f6:	1a24      	subs	r4, r4, r0
 80168f8:	429c      	cmp	r4, r3
 80168fa:	bfb8      	it	lt
 80168fc:	461c      	movlt	r4, r3
 80168fe:	802c      	strh	r4, [r5, #0]
}
 8016900:	b010      	add	sp, #64	; 0x40
 8016902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(lv_label_get_recolor(label_obj)) label_draw_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 8016906:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 801690a:	f043 0301 	orr.w	r3, r3, #1
 801690e:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8016912:	e777      	b.n	8016804 <lv_roller_label_event+0x44>
 8016914:	08029a14 	.word	0x08029a14

08016918 <lv_roller_event>:
{
 8016918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801691c:	48b9      	ldr	r0, [pc, #740]	; (8016c04 <lv_roller_event+0x2ec>)
{
 801691e:	b09b      	sub	sp, #108	; 0x6c
 8016920:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8016922:	f004 fc50 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8016926:	2801      	cmp	r0, #1
 8016928:	d111      	bne.n	801694e <lv_roller_event+0x36>
    lv_event_code_t code = lv_event_get_code(e);
 801692a:	4630      	mov	r0, r6
 801692c:	f004 fc65 	bl	801b1fa <lv_event_get_code>
 8016930:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8016932:	4630      	mov	r0, r6
 8016934:	f004 fc5d 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_GET_SELF_SIZE) {
 8016938:	2d2c      	cmp	r5, #44	; 0x2c
    lv_obj_t * obj = lv_event_get_target(e);
 801693a:	4604      	mov	r4, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 801693c:	d10a      	bne.n	8016954 <lv_roller_event+0x3c>
        lv_point_t * p = lv_event_get_param(e);
 801693e:	4630      	mov	r0, r6
 8016940:	f004 fc5f 	bl	801b202 <lv_event_get_param>
 8016944:	4605      	mov	r5, r0
        p->x = get_selected_label_width(obj);
 8016946:	4620      	mov	r0, r4
 8016948:	f010 fcff 	bl	802734a <get_selected_label_width>
 801694c:	8028      	strh	r0, [r5, #0]
}
 801694e:	b01b      	add	sp, #108	; 0x6c
 8016950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_STYLE_CHANGED) {
 8016954:	2d18      	cmp	r5, #24
 8016956:	d837      	bhi.n	80169c8 <lv_roller_event+0xb0>
 8016958:	2d00      	cmp	r5, #0
 801695a:	d0f8      	beq.n	801694e <lv_roller_event+0x36>
 801695c:	3d01      	subs	r5, #1
 801695e:	2d17      	cmp	r5, #23
 8016960:	d8f5      	bhi.n	801694e <lv_roller_event+0x36>
 8016962:	a301      	add	r3, pc, #4	; (adr r3, 8016968 <lv_roller_event+0x50>)
 8016964:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8016968:	080169f7 	.word	0x080169f7
 801696c:	08016a13 	.word	0x08016a13
 8016970:	08016a4d 	.word	0x08016a4d
 8016974:	0801694f 	.word	0x0801694f
 8016978:	0801694f 	.word	0x0801694f
 801697c:	0801694f 	.word	0x0801694f
 8016980:	0801694f 	.word	0x0801694f
 8016984:	08016a4d 	.word	0x08016a4d
 8016988:	0801694f 	.word	0x0801694f
 801698c:	0801694f 	.word	0x0801694f
 8016990:	0801694f 	.word	0x0801694f
 8016994:	0801694f 	.word	0x0801694f
 8016998:	08016bb1 	.word	0x08016bb1
 801699c:	08016b77 	.word	0x08016b77
 80169a0:	08016ba3 	.word	0x08016ba3
 80169a4:	0801694f 	.word	0x0801694f
 80169a8:	0801694f 	.word	0x0801694f
 80169ac:	0801694f 	.word	0x0801694f
 80169b0:	08016bf5 	.word	0x08016bf5
 80169b4:	0801694f 	.word	0x0801694f
 80169b8:	08016c11 	.word	0x08016c11
 80169bc:	0801694f 	.word	0x0801694f
 80169c0:	0801694f 	.word	0x0801694f
 80169c4:	08016c11 	.word	0x08016c11
 80169c8:	2d29      	cmp	r5, #41	; 0x29
 80169ca:	d00e      	beq.n	80169ea <lv_roller_event+0xd2>
 80169cc:	2d2a      	cmp	r5, #42	; 0x2a
 80169ce:	d1be      	bne.n	801694e <lv_roller_event+0x36>
        lv_obj_t * label = get_label(obj);
 80169d0:	f010 fbd5 	bl	802717e <get_label>
        if(label) lv_event_send(label, LV_EVENT_STYLE_CHANGED, NULL);
 80169d4:	b118      	cbz	r0, 80169de <lv_roller_event+0xc6>
 80169d6:	2200      	movs	r2, #0
 80169d8:	4629      	mov	r1, r5
 80169da:	f7ed fe7f 	bl	80046dc <lv_event_send>
        lv_obj_refresh_self_size(obj);
 80169de:	4620      	mov	r0, r4
 80169e0:	f005 ff9d 	bl	801c91e <lv_obj_refresh_self_size>
        refr_position(obj, LV_ANIM_OFF);
 80169e4:	2100      	movs	r1, #0
                    refr_position(obj, LV_ANIM_ON);
 80169e6:	4620      	mov	r0, r4
 80169e8:	e000      	b.n	80169ec <lv_roller_event+0xd4>
        refr_position(obj, LV_ANIM_OFF);
 80169ea:	2100      	movs	r1, #0
}
 80169ec:	b01b      	add	sp, #108	; 0x6c
 80169ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        refr_position(obj, LV_ANIM_OFF);
 80169f2:	f7ff be27 	b.w	8016644 <refr_position>
        roller->moved = 0;
 80169f6:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80169fa:	f36f 0341 	bfc	r3, #1, #1
 80169fe:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
        lv_anim_del(get_label(obj), set_y_anim);
 8016a02:	f010 fbbc 	bl	802717e <get_label>
 8016a06:	4980      	ldr	r1, [pc, #512]	; (8016c08 <lv_roller_event+0x2f0>)
}
 8016a08:	b01b      	add	sp, #108	; 0x6c
 8016a0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_anim_del(get_label(obj), set_y_anim);
 8016a0e:	f7fb bc93 	b.w	8012338 <lv_anim_del>
        lv_indev_t * indev = lv_indev_get_act();
 8016a12:	f7ed fec9 	bl	80047a8 <lv_indev_get_act>
        lv_indev_get_vect(indev, &p);
 8016a16:	a90c      	add	r1, sp, #48	; 0x30
 8016a18:	f004 fdef 	bl	801b5fa <lv_indev_get_vect>
        if(p.y) {
 8016a1c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d094      	beq.n	801694e <lv_roller_event+0x36>
            lv_obj_t * label = get_label(obj);
 8016a24:	4620      	mov	r0, r4
 8016a26:	f010 fbaa 	bl	802717e <get_label>
 8016a2a:	4605      	mov	r5, r0
            lv_obj_set_y(label, lv_obj_get_y(label) + p.y);
 8016a2c:	f005 fedb 	bl	801c7e6 <lv_obj_get_y>
 8016a30:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8016a34:	18c1      	adds	r1, r0, r3
 8016a36:	4628      	mov	r0, r5
 8016a38:	b209      	sxth	r1, r1
 8016a3a:	f005 fe1f 	bl	801c67c <lv_obj_set_y>
            roller->moved = 1;
 8016a3e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8016a42:	f043 0302 	orr.w	r3, r3, #2
 8016a46:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 8016a4a:	e780      	b.n	801694e <lv_roller_event+0x36>

static lv_res_t release_handler(lv_obj_t * obj)
{
    lv_obj_t * label = get_label(obj);
 8016a4c:	f010 fb97 	bl	802717e <get_label>
    if(label == NULL) return LV_RES_OK;
 8016a50:	4607      	mov	r7, r0
 8016a52:	2800      	cmp	r0, #0
 8016a54:	f43f af7b 	beq.w	801694e <lv_roller_event+0x36>

    lv_indev_t * indev = lv_indev_get_act();
 8016a58:	f7ed fea6 	bl	80047a8 <lv_indev_get_act>
 8016a5c:	4680      	mov	r8, r0
    lv_roller_t * roller = (lv_roller_t *)obj;

    /*Leave edit mode once a new option is selected*/
    lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8016a5e:	f004 fd8c 	bl	801b57a <lv_indev_get_type>
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 8016a62:	2804      	cmp	r0, #4
 8016a64:	d10d      	bne.n	8016a82 <lv_roller_event+0x16a>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8016a66:	8ce3      	ldrh	r3, [r4, #38]	; 0x26

        if(indev_type == LV_INDEV_TYPE_ENCODER) {
            lv_group_t * g      = lv_obj_get_group(obj);
 8016a68:	4620      	mov	r0, r4
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8016a6a:	8523      	strh	r3, [r4, #40]	; 0x28
            lv_group_t * g      = lv_obj_get_group(obj);
 8016a6c:	f004 ffdc 	bl	801ba28 <lv_obj_get_group>
 8016a70:	4605      	mov	r5, r0
            if(lv_group_get_editing(g)) {
 8016a72:	f004 fd7d 	bl	801b570 <lv_group_get_editing>
 8016a76:	b140      	cbz	r0, 8016a8a <lv_roller_event+0x172>
                lv_group_set_editing(g, false);
 8016a78:	2100      	movs	r1, #0
 8016a7a:	4628      	mov	r0, r5
 8016a7c:	f004 fd57 	bl	801b52e <lv_group_set_editing>
 8016a80:	e003      	b.n	8016a8a <lv_roller_event+0x172>
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 8016a82:	2802      	cmp	r0, #2
 8016a84:	d101      	bne.n	8016a8a <lv_roller_event+0x172>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8016a86:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8016a88:	8523      	strh	r3, [r4, #40]	; 0x28
            }
        }
    }

    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8016a8a:	4640      	mov	r0, r8
 8016a8c:	f004 fd75 	bl	801b57a <lv_indev_get_type>
 8016a90:	2801      	cmp	r0, #1
 8016a92:	d12c      	bne.n	8016aee <lv_roller_event+0x1d6>
        /*Search the clicked option (For KEYPAD and ENCODER the new value should be already set)*/
        int16_t new_opt  = -1;
        if(roller->moved == 0) {
 8016a94:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 8016a98:	f016 0602 	ands.w	r6, r6, #2
 8016a9c:	d034      	beq.n	8016b08 <lv_roller_event+0x1f0>
                i_prev = i;
            }
        }
        else {
            /*If dragged then align the list to have an element in the middle*/
            const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8016a9e:	2100      	movs	r1, #0
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	f010 fb67 	bl	8027174 <lv_obj_get_style_text_font>
 8016aa6:	4605      	mov	r5, r0
            lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8016aa8:	4620      	mov	r0, r4
 8016aaa:	f010 fb6b 	bl	8027184 <lv_obj_get_style_text_line_space.constprop.0>
            lv_coord_t font_h              = lv_font_get_line_height(font);

            lv_coord_t label_unit = font_h + line_space;
 8016aae:	892b      	ldrh	r3, [r5, #8]
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8016ab0:	f9b4 5016 	ldrsh.w	r5, [r4, #22]
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8016ab4:	210c      	movs	r1, #12
            lv_coord_t label_unit = font_h + line_space;
 8016ab6:	18c6      	adds	r6, r0, r3
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8016ab8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8016abc:	8aff      	ldrh	r7, [r7, #22]
 8016abe:	4640      	mov	r0, r8
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8016ac0:	1b5b      	subs	r3, r3, r5
            lv_coord_t label_unit = font_h + line_space;
 8016ac2:	b236      	sxth	r6, r6
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8016ac4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8016ac8:	eb05 0563 	add.w	r5, r5, r3, asr #1
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8016acc:	f004 fdac 	bl	801b628 <lv_indev_scroll_throw_predict>
 8016ad0:	4407      	add	r7, r0
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8016ad2:	b22d      	sxth	r5, r5
            int32_t id = (mid - label_y1) / label_unit;

            if(id < 0) id = 0;
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 8016ad4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
            int32_t id = (mid - label_y1) / label_unit;
 8016ad6:	b23f      	sxth	r7, r7
 8016ad8:	1bed      	subs	r5, r5, r7
 8016ada:	fb95 f5f6 	sdiv	r5, r5, r6
            if(id < 0) id = 0;
 8016ade:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 8016ae2:	429d      	cmp	r5, r3
 8016ae4:	bfa8      	it	ge
 8016ae6:	f103 35ff 	addge.w	r5, r3, #4294967295

            new_opt = id;
 8016aea:	b22d      	sxth	r5, r5
 8016aec:	e02c      	b.n	8016b48 <lv_roller_event+0x230>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8016aee:	4640      	mov	r0, r8
 8016af0:	f004 fd43 	bl	801b57a <lv_indev_get_type>
 8016af4:	2803      	cmp	r0, #3
 8016af6:	d0cd      	beq.n	8016a94 <lv_roller_event+0x17c>
        if(new_opt >= 0) {
            lv_roller_set_selected(obj, new_opt, LV_ANIM_ON);
        }
    }

    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 8016af8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8016afa:	aa0c      	add	r2, sp, #48	; 0x30
 8016afc:	211c      	movs	r1, #28
 8016afe:	4620      	mov	r0, r4
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 8016b00:	930c      	str	r3, [sp, #48]	; 0x30
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8016b02:	f7ed fdeb 	bl	80046dc <lv_event_send>
    return res;
 8016b06:	e722      	b.n	801694e <lv_roller_event+0x36>
            lv_indev_get_point(indev, &p);
 8016b08:	4640      	mov	r0, r8
 8016b0a:	a90a      	add	r1, sp, #40	; 0x28
 8016b0c:	f004 fd46 	bl	801b59c <lv_indev_get_point>
            p.y -= label->coords.y1;
 8016b10:	8afa      	ldrh	r2, [r7, #22]
 8016b12:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
            letter_i = lv_label_get_letter_on(label, &p);
 8016b16:	a90a      	add	r1, sp, #40	; 0x28
 8016b18:	4638      	mov	r0, r7
            uint32_t i_prev   = 0;
 8016b1a:	46b1      	mov	r9, r6
            p.y -= label->coords.y1;
 8016b1c:	1a9b      	subs	r3, r3, r2
            new_opt = 0;
 8016b1e:	4635      	mov	r5, r6
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8016b20:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8016c0c <lv_roller_event+0x2f4>
            p.y -= label->coords.y1;
 8016b24:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            p.x -= label->coords.x1;
 8016b28:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8016b2c:	8aba      	ldrh	r2, [r7, #20]
 8016b2e:	1a9b      	subs	r3, r3, r2
 8016b30:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            letter_i = lv_label_get_letter_on(label, &p);
 8016b34:	f010 fa2a 	bl	8026f8c <lv_label_get_letter_on>
 8016b38:	4680      	mov	r8, r0
            const char * txt  = lv_label_get_text(label);
 8016b3a:	4638      	mov	r0, r7
 8016b3c:	f010 fa1f 	bl	8026f7e <lv_label_get_text>
 8016b40:	4607      	mov	r7, r0
            uint32_t i        = 0;
 8016b42:	960c      	str	r6, [sp, #48]	; 0x30
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8016b44:	45b0      	cmp	r8, r6
 8016b46:	d107      	bne.n	8016b58 <lv_roller_event+0x240>
        if(new_opt >= 0) {
 8016b48:	2d00      	cmp	r5, #0
 8016b4a:	dbd5      	blt.n	8016af8 <lv_roller_event+0x1e0>
            lv_roller_set_selected(obj, new_opt, LV_ANIM_ON);
 8016b4c:	2201      	movs	r2, #1
 8016b4e:	b2a9      	uxth	r1, r5
 8016b50:	4620      	mov	r0, r4
 8016b52:	f010 fc21 	bl	8027398 <lv_roller_set_selected>
 8016b56:	e7cf      	b.n	8016af8 <lv_roller_event+0x1e0>
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8016b58:	f8da 3000 	ldr.w	r3, [sl]
 8016b5c:	a90c      	add	r1, sp, #48	; 0x30
 8016b5e:	4638      	mov	r0, r7
 8016b60:	4798      	blx	r3
                if(letter == '\n' && i_prev != letter_i) new_opt++;
 8016b62:	280a      	cmp	r0, #10
 8016b64:	d103      	bne.n	8016b6e <lv_roller_event+0x256>
 8016b66:	45c8      	cmp	r8, r9
 8016b68:	bf1c      	itt	ne
 8016b6a:	3501      	addne	r5, #1
 8016b6c:	b22d      	sxthne	r5, r5
                i_prev = i;
 8016b6e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8016b72:	3601      	adds	r6, #1
 8016b74:	e7e6      	b.n	8016b44 <lv_roller_event+0x22c>
        lv_group_t * g             = lv_obj_get_group(obj);
 8016b76:	f004 ff57 	bl	801ba28 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8016b7a:	f004 fcf9 	bl	801b570 <lv_group_get_editing>
 8016b7e:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8016b80:	f7ed fe12 	bl	80047a8 <lv_indev_get_act>
 8016b84:	f004 fcf9 	bl	801b57a <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8016b88:	2804      	cmp	r0, #4
                if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 8016b8a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8016b8c:	d107      	bne.n	8016b9e <lv_roller_event+0x286>
            if(!editing) {
 8016b8e:	b935      	cbnz	r5, 8016b9e <lv_roller_event+0x286>
                if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 8016b90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8016b92:	429a      	cmp	r2, r3
 8016b94:	f43f aedb 	beq.w	801694e <lv_roller_event+0x36>
                    roller->sel_opt_id = roller->sel_opt_id_ori;
 8016b98:	84e2      	strh	r2, [r4, #38]	; 0x26
                    refr_position(obj, LV_ANIM_ON);
 8016b9a:	2101      	movs	r1, #1
 8016b9c:	e723      	b.n	80169e6 <lv_roller_event+0xce>
            roller->sel_opt_id_ori = roller->sel_opt_id; /*Save the current value. Used to revert this state if
 8016b9e:	8523      	strh	r3, [r4, #40]	; 0x28
 8016ba0:	e6d5      	b.n	801694e <lv_roller_event+0x36>
        if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 8016ba2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8016ba4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	f43f aed1 	beq.w	801694e <lv_roller_event+0x36>
            roller->sel_opt_id = roller->sel_opt_id_ori;
 8016bac:	84c3      	strh	r3, [r0, #38]	; 0x26
            refr_position(obj, LV_ANIM_ON);
 8016bae:	e7f4      	b.n	8016b9a <lv_roller_event+0x282>
        char c = *((char *)lv_event_get_param(e));
 8016bb0:	4630      	mov	r0, r6
 8016bb2:	f004 fb26 	bl	801b202 <lv_event_get_param>
 8016bb6:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8016bb8:	f1a3 0212 	sub.w	r2, r3, #18
 8016bbc:	2a01      	cmp	r2, #1
 8016bbe:	d80d      	bhi.n	8016bdc <lv_roller_event+0x2c4>
            if(roller->sel_opt_id + 1 < roller->option_cnt) {
 8016bc0:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8016bc2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8016bc4:	3101      	adds	r1, #1
 8016bc6:	4299      	cmp	r1, r3
 8016bc8:	f6bf aec1 	bge.w	801694e <lv_roller_event+0x36>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 8016bcc:	8d25      	ldrh	r5, [r4, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, LV_ANIM_ON);
 8016bce:	2201      	movs	r2, #1
 8016bd0:	b289      	uxth	r1, r1
 8016bd2:	4620      	mov	r0, r4
 8016bd4:	f010 fbe0 	bl	8027398 <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 8016bd8:	8525      	strh	r5, [r4, #40]	; 0x28
 8016bda:	e6b8      	b.n	801694e <lv_roller_event+0x36>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8016bdc:	2b14      	cmp	r3, #20
 8016bde:	d002      	beq.n	8016be6 <lv_roller_event+0x2ce>
 8016be0:	2b11      	cmp	r3, #17
 8016be2:	f47f aeb4 	bne.w	801694e <lv_roller_event+0x36>
            if(roller->sel_opt_id > 0) {
 8016be6:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8016be8:	2900      	cmp	r1, #0
 8016bea:	f43f aeb0 	beq.w	801694e <lv_roller_event+0x36>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 8016bee:	8d25      	ldrh	r5, [r4, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, LV_ANIM_ON);
 8016bf0:	3901      	subs	r1, #1
 8016bf2:	e7ec      	b.n	8016bce <lv_roller_event+0x2b6>
        lv_obj_t * label = get_label(obj);
 8016bf4:	f010 fac3 	bl	802717e <get_label>
}
 8016bf8:	b01b      	add	sp, #108	; 0x6c
 8016bfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_ext_draw_size(label);
 8016bfe:	f005 bc4b 	b.w	801c498 <lv_obj_refresh_ext_draw_size>
 8016c02:	bf00      	nop
 8016c04:	08029a30 	.word	0x08029a30
 8016c08:	0802716f 	.word	0x0802716f
 8016c0c:	24000100 	.word	0x24000100
    lv_event_code_t code = lv_event_get_code(e);
 8016c10:	4630      	mov	r0, r6
 8016c12:	f004 faf2 	bl	801b1fa <lv_event_get_code>
 8016c16:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8016c18:	4630      	mov	r0, r6
 8016c1a:	f004 faea 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 8016c1e:	2d15      	cmp	r5, #21
    lv_obj_t * obj = lv_event_get_target(e);
 8016c20:	4604      	mov	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8016c22:	d116      	bne.n	8016c52 <lv_roller_event+0x33a>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016c24:	4630      	mov	r0, r6
 8016c26:	f004 fb3d 	bl	801b2a4 <lv_event_get_draw_ctx>
        get_sel_area(obj, &sel_area);
 8016c2a:	a90a      	add	r1, sp, #40	; 0x28
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016c2c:	4605      	mov	r5, r0
        get_sel_area(obj, &sel_area);
 8016c2e:	4620      	mov	r0, r4
 8016c30:	f010 faaf 	bl	8027192 <get_sel_area>
        lv_draw_rect_dsc_init(&sel_dsc);
 8016c34:	a80c      	add	r0, sp, #48	; 0x30
 8016c36:	f7f1 fe81 	bl	800893c <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_SELECTED, &sel_dsc);
 8016c3a:	aa0c      	add	r2, sp, #48	; 0x30
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8016c42:	f005 f925 	bl	801be90 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(draw_ctx, &sel_dsc, &sel_area);
 8016c46:	aa0a      	add	r2, sp, #40	; 0x28
 8016c48:	a90c      	add	r1, sp, #48	; 0x30
 8016c4a:	4628      	mov	r0, r5
 8016c4c:	f008 fbab 	bl	801f3a6 <lv_draw_rect>
 8016c50:	e67d      	b.n	801694e <lv_roller_event+0x36>
    else if(code == LV_EVENT_DRAW_POST) {
 8016c52:	2d18      	cmp	r5, #24
 8016c54:	f47f ae7b 	bne.w	801694e <lv_roller_event+0x36>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016c58:	4630      	mov	r0, r6
        area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &sel_area);
 8016c5a:	af08      	add	r7, sp, #32
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016c5c:	f004 fb22 	bl	801b2a4 <lv_event_get_draw_ctx>
 8016c60:	4605      	mov	r5, r0
        lv_draw_label_dsc_init(&label_dsc);
 8016c62:	a80c      	add	r0, sp, #48	; 0x30
 8016c64:	f7f1 f820 	bl	8007ca8 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_SELECTED, &label_dsc);
 8016c68:	aa0c      	add	r2, sp, #48	; 0x30
 8016c6a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8016c6e:	4620      	mov	r0, r4
 8016c70:	f005 fa5d 	bl	801c12e <lv_obj_init_draw_label_dsc>
        get_sel_area(obj, &sel_area);
 8016c74:	a906      	add	r1, sp, #24
 8016c76:	4620      	mov	r0, r4
 8016c78:	f010 fa8b 	bl	8027192 <get_sel_area>
        area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &sel_area);
 8016c7c:	aa06      	add	r2, sp, #24
 8016c7e:	68a9      	ldr	r1, [r5, #8]
 8016c80:	4638      	mov	r0, r7
 8016c82:	f00d faf6 	bl	8024272 <_lv_area_intersect>
        if(area_ok) {
 8016c86:	2800      	cmp	r0, #0
 8016c88:	f43f ae61 	beq.w	801694e <lv_roller_event+0x36>
            lv_obj_t * label = get_label(obj);
 8016c8c:	4620      	mov	r0, r4
 8016c8e:	f010 fa76 	bl	802717e <get_label>
 8016c92:	4606      	mov	r6, r0
            if(lv_label_get_recolor(label)) label_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 8016c94:	f010 f975 	bl	8026f82 <lv_label_get_recolor>
 8016c98:	b128      	cbz	r0, 8016ca6 <lv_roller_event+0x38e>
 8016c9a:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 8016c9e:	f043 0301 	orr.w	r3, r3, #1
 8016ca2:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 8016ca6:	4630      	mov	r0, r6
 8016ca8:	f010 f969 	bl	8026f7e <lv_label_get_text>
 8016cac:	4680      	mov	r8, r0
 8016cae:	4620      	mov	r0, r4
 8016cb0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8016cb4:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8016cb8:	f9bd b042 	ldrsh.w	fp, [sp, #66]	; 0x42
 8016cbc:	f005 fdba 	bl	801c834 <lv_obj_get_width>
 8016cc0:	2302      	movs	r3, #2
 8016cc2:	464a      	mov	r2, r9
 8016cc4:	4641      	mov	r1, r8
 8016cc6:	f8cd b000 	str.w	fp, [sp]
 8016cca:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8016cce:	4653      	mov	r3, sl
 8016cd0:	a805      	add	r0, sp, #20
 8016cd2:	f00e fdb1 	bl	8025838 <lv_txt_get_size>
            lv_coord_t roller_h = lv_obj_get_height(obj);
 8016cd6:	4620      	mov	r0, r4
 8016cd8:	f005 fdb2 	bl	801c840 <lv_obj_get_height>
                                                       obj->coords.y1); /*label offset from the middle line of the roller*/
 8016cdc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8016ce0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8016ce4:	f9b6 9016 	ldrsh.w	r9, [r6, #22]
 8016ce8:	f340 0a4f 	sbfx	sl, r0, #1, #16
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 8016cec:	4630      	mov	r0, r6
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8016cee:	4453      	add	r3, sl
 8016cf0:	eba9 0903 	sub.w	r9, r9, r3
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 8016cf4:	f005 fda4 	bl	801c840 <lv_obj_get_height>
            const lv_font_t * normal_label_font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8016cf8:	2100      	movs	r1, #0
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 8016cfa:	ea4f 3989 	mov.w	r9, r9, lsl #14
 8016cfe:	fb99 f9f0 	sdiv	r9, r9, r0
            const lv_font_t * normal_label_font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8016d02:	4620      	mov	r0, r4
 8016d04:	f010 fa36 	bl	8027174 <lv_obj_get_style_text_font>
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 8016d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 8016d0a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8016d0e:	2100      	movs	r1, #0
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 8016d10:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8016d14:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 8016d18:	44d0      	add	r8, sl
 8016d1a:	4620      	mov	r0, r4
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 8016d1c:	1ad2      	subs	r2, r2, r3
            res_p.y -= corr;
 8016d1e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 8016d22:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
            res_p.y -= corr;
 8016d26:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8016d2a:	b21b      	sxth	r3, r3
 8016d2c:	f8ad 3016 	strh.w	r3, [sp, #22]
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 8016d30:	fb09 f303 	mul.w	r3, r9, r3
 8016d34:	eb08 38a3 	add.w	r8, r8, r3, asr #14
            label_sel_y -= corr;
 8016d38:	eba8 0862 	sub.w	r8, r8, r2, asr #1
 8016d3c:	2232      	movs	r2, #50	; 0x32
 8016d3e:	f006 fe9f 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016d42:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8016d44:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016d46:	2100      	movs	r1, #0
 8016d48:	4620      	mov	r0, r4
 8016d4a:	f006 fe99 	bl	801da80 <lv_obj_get_style_prop>
 8016d4e:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016d50:	2213      	movs	r2, #19
 8016d52:	2100      	movs	r1, #0
 8016d54:	4620      	mov	r0, r4
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 8016d56:	fa19 f98a 	uxtah	r9, r9, sl
 8016d5a:	f006 fe91 	bl	801da80 <lv_obj_get_style_prop>
 8016d5e:	8aa3      	ldrh	r3, [r4, #20]
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 8016d60:	fa10 fa8a 	uxtah	sl, r0, sl
            label_sel_area.y1 = label_sel_y;
 8016d64:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 8016d68:	4499      	add	r9, r3
            lv_draw_label(draw_ctx, &label_dsc, &label_sel_area, lv_label_get_text(label), NULL);
 8016d6a:	4630      	mov	r0, r6
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 8016d6c:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 8016d70:	8b23      	ldrh	r3, [r4, #24]
 8016d72:	eba3 030a 	sub.w	r3, r3, sl
 8016d76:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 8016d7a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016d7e:	4498      	add	r8, r3
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 8016d80:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 8016d84:	f043 0302 	orr.w	r3, r3, #2
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 8016d88:	f8ad 802e 	strh.w	r8, [sp, #46]	; 0x2e
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 8016d8c:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
            const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8016d90:	68ac      	ldr	r4, [r5, #8]
            draw_ctx->clip_area = &mask_sel;
 8016d92:	60af      	str	r7, [r5, #8]
            lv_draw_label(draw_ctx, &label_dsc, &label_sel_area, lv_label_get_text(label), NULL);
 8016d94:	f010 f8f3 	bl	8026f7e <lv_label_get_text>
 8016d98:	2200      	movs	r2, #0
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	a90c      	add	r1, sp, #48	; 0x30
 8016d9e:	9200      	str	r2, [sp, #0]
 8016da0:	4628      	mov	r0, r5
 8016da2:	aa0a      	add	r2, sp, #40	; 0x28
 8016da4:	f7f0 ff98 	bl	8007cd8 <lv_draw_label>
            draw_ctx->clip_area = clip_area_ori;
 8016da8:	60ac      	str	r4, [r5, #8]
 8016daa:	e5d0      	b.n	801694e <lv_roller_event+0x36>

08016dac <lv_slider_event>:
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
}

static void lv_slider_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8016dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 8016db0:	48c0      	ldr	r0, [pc, #768]	; (80170b4 <lv_slider_event+0x308>)
{
 8016db2:	b0b3      	sub	sp, #204	; 0xcc
 8016db4:	460f      	mov	r7, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8016db6:	f004 fa06 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8016dba:	2801      	cmp	r0, #1
 8016dbc:	d152      	bne.n	8016e64 <lv_slider_event+0xb8>

    lv_event_code_t code = lv_event_get_code(e);
 8016dbe:	4638      	mov	r0, r7
 8016dc0:	f004 fa1b 	bl	801b1fa <lv_event_get_code>
 8016dc4:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8016dc6:	4638      	mov	r0, r7
 8016dc8:	f004 fa13 	bl	801b1f2 <lv_event_get_target>
 8016dcc:	4604      	mov	r4, r0
    lv_slider_t * slider = (lv_slider_t *)obj;
    lv_slider_mode_t type = lv_slider_get_mode(obj);
 8016dce:	f010 fb10 	bl	80273f2 <lv_slider_get_mode>

    /*Advanced hit testing: react only on dragging the knob(s)*/
    if(code == LV_EVENT_HIT_TEST) {
 8016dd2:	2d11      	cmp	r5, #17
    lv_slider_mode_t type = lv_slider_get_mode(obj);
 8016dd4:	4606      	mov	r6, r0
    if(code == LV_EVENT_HIT_TEST) {
 8016dd6:	d148      	bne.n	8016e6a <lv_slider_event+0xbe>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 8016dd8:	4638      	mov	r0, r7
 8016dda:	f004 fa12 	bl	801b202 <lv_event_get_param>
        lv_coord_t ext_click_area = obj->spec_attr ? obj->spec_attr->ext_click_pad : 0;
 8016dde:	68a5      	ldr	r5, [r4, #8]
        lv_hit_test_info_t * info = lv_event_get_param(e);
 8016de0:	4680      	mov	r8, r0
        lv_coord_t ext_click_area = obj->spec_attr ? obj->spec_attr->ext_click_pad : 0;
 8016de2:	b10d      	cbz	r5, 8016de8 <lv_slider_event+0x3c>
 8016de4:	f9b5 5014 	ldrsh.w	r5, [r5, #20]
    dest->x1 = src->x1;
 8016de8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68

        /*Ordinary slider: was the knob area hit?*/
        lv_area_t a;
        lv_area_copy(&a, &slider->right_knob_area);
        lv_area_increase(&a, ext_click_area, ext_click_area);
 8016dec:	462a      	mov	r2, r5
 8016dee:	4629      	mov	r1, r5
 8016df0:	a820      	add	r0, sp, #128	; 0x80
 8016df2:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    dest->y1 = src->y1;
 8016df6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8016dfa:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    dest->x2 = src->x2;
 8016dfe:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
 8016e02:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    dest->y2 = src->y2;
 8016e06:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
 8016e0a:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
 8016e0e:	f00d fa10 	bl	8024232 <lv_area_increase>
        info->res = _lv_area_is_point_on(&a, info->point, 0);
 8016e12:	2200      	movs	r2, #0
 8016e14:	f8d8 1000 	ldr.w	r1, [r8]
 8016e18:	a820      	add	r0, sp, #128	; 0x80
 8016e1a:	f00d fa77 	bl	802430c <_lv_area_is_point_on>
 8016e1e:	4607      	mov	r7, r0
 8016e20:	f888 0004 	strb.w	r0, [r8, #4]

        /*There's still a chance that there is a hit if there is another knob*/
        if((info->res == false) && (type == LV_SLIDER_MODE_RANGE)) {
 8016e24:	b9f0      	cbnz	r0, 8016e64 <lv_slider_event+0xb8>
 8016e26:	2e02      	cmp	r6, #2
 8016e28:	d11c      	bne.n	8016e64 <lv_slider_event+0xb8>
    dest->x1 = src->x1;
 8016e2a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            lv_area_copy(&a, &slider->left_knob_area);
            lv_area_increase(&a, ext_click_area, ext_click_area);
 8016e2e:	462a      	mov	r2, r5
 8016e30:	4629      	mov	r1, r5
 8016e32:	a820      	add	r0, sp, #128	; 0x80
 8016e34:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    dest->y1 = src->y1;
 8016e38:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8016e3c:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    dest->x2 = src->x2;
 8016e40:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8016e44:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    dest->y2 = src->y2;
 8016e48:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8016e4c:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
 8016e50:	f00d f9ef 	bl	8024232 <lv_area_increase>
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 8016e54:	463a      	mov	r2, r7
 8016e56:	f8d8 1000 	ldr.w	r1, [r8]
 8016e5a:	a820      	add	r0, sp, #128	; 0x80
 8016e5c:	f00d fa56 	bl	802430c <_lv_area_is_point_on>
 8016e60:	f888 0004 	strb.w	r0, [r8, #4]
        if(res != LV_RES_OK) return;
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        draw_knob(e);
    }
}
 8016e64:	b033      	add	sp, #204	; 0xcc
 8016e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_PRESSED) {
 8016e6a:	2d01      	cmp	r5, #1
 8016e6c:	f040 8089 	bne.w	8016f82 <lv_slider_event+0x1d6>
        lv_obj_invalidate(obj);
 8016e70:	4620      	mov	r0, r4
 8016e72:	f005 fedf 	bl	801cc34 <lv_obj_invalidate>
        slider->dragging = true;
 8016e76:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 8016e7a:	2e01      	cmp	r6, #1
        slider->dragging = true;
 8016e7c:	f043 0301 	orr.w	r3, r3, #1
 8016e80:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 8016e84:	d802      	bhi.n	8016e8c <lv_slider_event+0xe0>
                    slider->value_to_set = &slider->bar.cur_value;
 8016e86:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8016e8a:	e052      	b.n	8016f32 <lv_slider_event+0x186>
        else if(type == LV_SLIDER_MODE_RANGE) {
 8016e8c:	2e02      	cmp	r6, #2
 8016e8e:	d1e9      	bne.n	8016e64 <lv_slider_event+0xb8>
            lv_indev_get_point(lv_indev_get_act(), &p);
 8016e90:	f7ed fc8a 	bl	80047a8 <lv_indev_get_act>
 8016e94:	a920      	add	r1, sp, #128	; 0x80
 8016e96:	f004 fb81 	bl	801b59c <lv_indev_get_point>
            bool hor = lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 8016e9a:	4620      	mov	r0, r4
 8016e9c:	f005 fcca 	bl	801c834 <lv_obj_get_width>
 8016ea0:	4606      	mov	r6, r0
 8016ea2:	4620      	mov	r0, r4
 8016ea4:	f005 fccc 	bl	801c840 <lv_obj_get_height>
 8016ea8:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8016eaa:	2216      	movs	r2, #22
 8016eac:	2100      	movs	r1, #0
 8016eae:	4620      	mov	r0, r4
 8016eb0:	f006 fde6 	bl	801da80 <lv_obj_get_style_prop>
            if(hor) {
 8016eb4:	42ae      	cmp	r6, r5
 8016eb6:	db3e      	blt.n	8016f36 <lv_slider_event+0x18a>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 8016eb8:	b2c0      	uxtb	r0, r0
 8016eba:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
 8016ebe:	2801      	cmp	r0, #1
 8016ec0:	d02d      	beq.n	8016f1e <lv_slider_event+0x172>
 8016ec2:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 8016ec6:	428b      	cmp	r3, r1
 8016ec8:	dbdd      	blt.n	8016e86 <lv_slider_event+0xda>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 8016eca:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016ece:	428b      	cmp	r3, r1
 8016ed0:	dc2d      	bgt.n	8016f2e <lv_slider_event+0x182>
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 8016ed2:	f9b4 2060 	ldrsh.w	r2, [r4, #96]	; 0x60
 8016ed6:	f9b4 0064 	ldrsh.w	r0, [r4, #100]	; 0x64
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 8016eda:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 8016ede:	1a80      	subs	r0, r0, r2
 8016ee0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8016ee4:	eb02 0260 	add.w	r2, r2, r0, asr #1
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 8016ee8:	f9b4 006c 	ldrsh.w	r0, [r4, #108]	; 0x6c
 8016eec:	1ac0      	subs	r0, r0, r3
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 8016eee:	1a52      	subs	r2, r2, r1
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 8016ef0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 8016ef4:	2a00      	cmp	r2, #0
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 8016ef6:	eb03 0360 	add.w	r3, r3, r0, asr #1
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 8016efa:	bfb8      	it	lt
 8016efc:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 8016efe:	1a5b      	subs	r3, r3, r1
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 8016f00:	2b00      	cmp	r3, #0
                    if(dist_right < dist_left) {
 8016f02:	b212      	sxth	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 8016f04:	bfb8      	it	lt
 8016f06:	425b      	neglt	r3, r3
                    if(dist_right < dist_left) {
 8016f08:	b21b      	sxth	r3, r3
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8016f10:	dd2f      	ble.n	8016f72 <lv_slider_event+0x1c6>
                        slider->value_to_set = &slider->bar.cur_value;
 8016f12:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8016f16:	6722      	str	r2, [r4, #112]	; 0x70
            slider->left_knob_focus = 0;
 8016f18:	f36f 0341 	bfc	r3, #1, #1
 8016f1c:	e02e      	b.n	8016f7c <lv_slider_event+0x1d0>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 8016f1e:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8016f22:	428b      	cmp	r3, r1
 8016f24:	dcaf      	bgt.n	8016e86 <lv_slider_event+0xda>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 8016f26:	f9b4 3064 	ldrsh.w	r3, [r4, #100]	; 0x64
 8016f2a:	428b      	cmp	r3, r1
 8016f2c:	dad1      	bge.n	8016ed2 <lv_slider_event+0x126>
                    slider->value_to_set = &slider->bar.start_value;
 8016f2e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8016f32:	6723      	str	r3, [r4, #112]	; 0x70
 8016f34:	e796      	b.n	8016e64 <lv_slider_event+0xb8>
                if(p.y < slider->right_knob_area.y1) {
 8016f36:	f9bd 0082 	ldrsh.w	r0, [sp, #130]	; 0x82
 8016f3a:	f9b4 306a 	ldrsh.w	r3, [r4, #106]	; 0x6a
 8016f3e:	4298      	cmp	r0, r3
 8016f40:	dba1      	blt.n	8016e86 <lv_slider_event+0xda>
                else if(p.y > slider->left_knob_area.y2) {
 8016f42:	f9b4 1066 	ldrsh.w	r1, [r4, #102]	; 0x66
 8016f46:	4288      	cmp	r0, r1
 8016f48:	dcf1      	bgt.n	8016f2e <lv_slider_event+0x182>
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 8016f4a:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8016f4e:	1a89      	subs	r1, r1, r2
 8016f50:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8016f54:	eb02 0261 	add.w	r2, r2, r1, asr #1
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 8016f58:	f9b4 106e 	ldrsh.w	r1, [r4, #110]	; 0x6e
 8016f5c:	1ac9      	subs	r1, r1, r3
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 8016f5e:	1a12      	subs	r2, r2, r0
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 8016f60:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 8016f64:	2a00      	cmp	r2, #0
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 8016f66:	eb03 0361 	add.w	r3, r3, r1, asr #1
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 8016f6a:	bfb8      	it	lt
 8016f6c:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 8016f6e:	1a1b      	subs	r3, r3, r0
 8016f70:	e7c6      	b.n	8016f00 <lv_slider_event+0x154>
                        slider->value_to_set = &slider->bar.start_value;
 8016f72:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8016f76:	6722      	str	r2, [r4, #112]	; 0x70
                    if(slider->left_knob_focus == 0) slider->left_knob_focus = 1;
 8016f78:	f043 0302 	orr.w	r3, r3, #2
            slider->left_knob_focus = 0;
 8016f7c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 8016f80:	e770      	b.n	8016e64 <lv_slider_event+0xb8>
    else if(code == LV_EVENT_PRESSING && slider->value_to_set != NULL) {
 8016f82:	2d02      	cmp	r5, #2
 8016f84:	f040 8098 	bne.w	80170b8 <lv_slider_event+0x30c>
 8016f88:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	f43f af6a 	beq.w	8016e64 <lv_slider_event+0xb8>
        lv_indev_t * indev = lv_indev_get_act();
 8016f90:	f7ed fc0a 	bl	80047a8 <lv_indev_get_act>
 8016f94:	4605      	mov	r5, r0
        if(lv_indev_get_type(indev) != LV_INDEV_TYPE_POINTER) return;
 8016f96:	f004 faf0 	bl	801b57a <lv_indev_get_type>
 8016f9a:	2801      	cmp	r0, #1
 8016f9c:	f47f af62 	bne.w	8016e64 <lv_slider_event+0xb8>
        lv_indev_get_point(indev, &p);
 8016fa0:	a920      	add	r1, sp, #128	; 0x80
 8016fa2:	4628      	mov	r0, r5
 8016fa4:	f004 fafa 	bl	801b59c <lv_indev_get_point>
    knob_area->y2 += knob_bottom + transf_h;
}

static bool is_slider_horizontal(lv_obj_t * obj)
{
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 8016fa8:	4620      	mov	r0, r4
        const int32_t range = slider->bar.max_value - slider->bar.min_value;
 8016faa:	e9d4 350a 	ldrd	r3, r5, [r4, #40]	; 0x28
 8016fae:	1aed      	subs	r5, r5, r3
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 8016fb0:	f005 fc40 	bl	801c834 <lv_obj_get_width>
 8016fb4:	4606      	mov	r6, r0
 8016fb6:	4620      	mov	r0, r4
 8016fb8:	f005 fc42 	bl	801c840 <lv_obj_get_height>
        if(is_slider_horizontal(obj)) {
 8016fbc:	4286      	cmp	r6, r0
 8016fbe:	db52      	blt.n	8017066 <lv_slider_event+0x2ba>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016fc0:	2212      	movs	r2, #18
 8016fc2:	2100      	movs	r1, #0
 8016fc4:	4620      	mov	r0, r4
 8016fc6:	f006 fd5b 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016fca:	2213      	movs	r2, #19
 8016fcc:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016fce:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016fd0:	4620      	mov	r0, r4
 8016fd2:	f006 fd55 	bl	801da80 <lv_obj_get_style_prop>
 8016fd6:	4680      	mov	r8, r0
            const lv_coord_t w = lv_obj_get_width(obj);
 8016fd8:	4620      	mov	r0, r4
 8016fda:	f005 fc2b 	bl	801c834 <lv_obj_get_width>
            const lv_coord_t indic_w = w - bg_left - bg_right;
 8016fde:	eb07 0308 	add.w	r3, r7, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8016fe2:	2216      	movs	r2, #22
 8016fe4:	2100      	movs	r1, #0
 8016fe6:	1ac6      	subs	r6, r0, r3
 8016fe8:	4620      	mov	r0, r4
 8016fea:	f006 fd49 	bl	801da80 <lv_obj_get_style_prop>
 8016fee:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
    return (lv_base_dir_t)v.num;
 8016ff2:	b2c0      	uxtb	r0, r0
 8016ff4:	b236      	sxth	r6, r6
            if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8016ff6:	2801      	cmp	r0, #1
 8016ff8:	d12f      	bne.n	801705a <lv_slider_event+0x2ae>
                new_value = (obj->coords.x2 - bg_right) - p.x;
 8016ffa:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8016ffe:	fa0f f888 	sxth.w	r8, r8
 8017002:	eba2 0208 	sub.w	r2, r2, r8
 8017006:	1ad0      	subs	r0, r2, r3
            new_value = (new_value * range + indic_w / 2) / indic_w;
 8017008:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
 801700c:	1049      	asrs	r1, r1, #1
 801700e:	fb00 1105 	mla	r1, r0, r5, r1
 8017012:	fb91 f1f6 	sdiv	r1, r1, r6
            new_value += slider->bar.min_value;
 8017016:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        if(slider->value_to_set == &slider->bar.start_value) {
 8017018:	f104 0230 	add.w	r2, r4, #48	; 0x30
            new_value += slider->bar.min_value;
 801701c:	4419      	add	r1, r3
        if(slider->value_to_set == &slider->bar.start_value) {
 801701e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017020:	4293      	cmp	r3, r2
        int32_t real_min_value = slider->bar.min_value;
 8017022:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
            real_max_value = slider->bar.cur_value;
 8017026:	bf0c      	ite	eq
 8017028:	6a65      	ldreq	r5, [r4, #36]	; 0x24
            real_min_value = slider->bar.start_value;
 801702a:	6b20      	ldrne	r0, [r4, #48]	; 0x30
        new_value = LV_CLAMP(real_min_value, new_value, real_max_value);
 801702c:	42a9      	cmp	r1, r5
 801702e:	bfa8      	it	ge
 8017030:	4629      	movge	r1, r5
 8017032:	4281      	cmp	r1, r0
 8017034:	bfb8      	it	lt
 8017036:	4601      	movlt	r1, r0
        if(*slider->value_to_set != new_value) {
 8017038:	6818      	ldr	r0, [r3, #0]
 801703a:	4281      	cmp	r1, r0
 801703c:	f43f af12 	beq.w	8016e64 <lv_slider_event+0xb8>
            if(slider->value_to_set == &slider->bar.start_value) {
 8017040:	4293      	cmp	r3, r2
                lv_bar_set_start_value(obj, new_value, LV_ANIM_ON);
 8017042:	4620      	mov	r0, r4
 8017044:	f04f 0201 	mov.w	r2, #1
            if(slider->value_to_set == &slider->bar.start_value) {
 8017048:	d130      	bne.n	80170ac <lv_slider_event+0x300>
                lv_bar_set_start_value(obj, new_value, LV_ANIM_ON);
 801704a:	f00f f827 	bl	802609c <lv_bar_set_start_value>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801704e:	2200      	movs	r2, #0
 8017050:	211c      	movs	r1, #28
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8017052:	4620      	mov	r0, r4
 8017054:	f7ed fb42 	bl	80046dc <lv_event_send>
}
 8017058:	e704      	b.n	8016e64 <lv_slider_event+0xb8>
                new_value = p.x - (obj->coords.x1 + bg_left);
 801705a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801705e:	fa02 f787 	sxtah	r7, r2, r7
 8017062:	1bd8      	subs	r0, r3, r7
 8017064:	e7d0      	b.n	8017008 <lv_slider_event+0x25c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017066:	2210      	movs	r2, #16
 8017068:	2100      	movs	r1, #0
 801706a:	4620      	mov	r0, r4
 801706c:	f006 fd08 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017070:	2211      	movs	r2, #17
 8017072:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017074:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017076:	4620      	mov	r0, r4
 8017078:	f006 fd02 	bl	801da80 <lv_obj_get_style_prop>
 801707c:	4606      	mov	r6, r0
            const lv_coord_t h = lv_obj_get_height(obj);
 801707e:	4620      	mov	r0, r4
 8017080:	f005 fbde 	bl	801c840 <lv_obj_get_height>
            const lv_coord_t indic_h = h - bg_bottom - bg_top;
 8017084:	4437      	add	r7, r6
            new_value = p.y - (obj->coords.y2 + bg_bottom);
 8017086:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
            const lv_coord_t indic_h = h - bg_bottom - bg_top;
 801708a:	1bc3      	subs	r3, r0, r7
            new_value = p.y - (obj->coords.y2 + bg_bottom);
 801708c:	fa01 f686 	sxtah	r6, r1, r6
 8017090:	f9bd 1082 	ldrsh.w	r1, [sp, #130]	; 0x82
            const lv_coord_t indic_h = h - bg_bottom - bg_top;
 8017094:	b21a      	sxth	r2, r3
            new_value = (-new_value * range + indic_h / 2) / indic_h;
 8017096:	1a76      	subs	r6, r6, r1
 8017098:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 801709c:	fa01 f183 	sxtah	r1, r1, r3
 80170a0:	1049      	asrs	r1, r1, #1
 80170a2:	fb05 1106 	mla	r1, r5, r6, r1
 80170a6:	fb91 f1f2 	sdiv	r1, r1, r2
 80170aa:	e7b4      	b.n	8017016 <lv_slider_event+0x26a>
                lv_bar_set_value(obj, new_value, LV_ANIM_ON);
 80170ac:	f00e ffb1 	bl	8026012 <lv_bar_set_value>
 80170b0:	e7cd      	b.n	801704e <lv_slider_event+0x2a2>
 80170b2:	bf00      	nop
 80170b4:	08029a4c 	.word	0x08029a4c
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 80170b8:	2d15      	cmp	r5, #21
 80170ba:	d859      	bhi.n	8017170 <lv_slider_event+0x3c4>
 80170bc:	2d07      	cmp	r5, #7
 80170be:	d833      	bhi.n	8017128 <lv_slider_event+0x37c>
 80170c0:	2d03      	cmp	r5, #3
 80170c2:	f47f aecf 	bne.w	8016e64 <lv_slider_event+0xb8>
        slider->dragging = false;
 80170c6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
        slider->value_to_set = NULL;
 80170ca:	2500      	movs	r5, #0
        lv_obj_invalidate(obj);
 80170cc:	4620      	mov	r0, r4
        slider->dragging = false;
 80170ce:	f36f 0300 	bfc	r3, #0, #1
        slider->value_to_set = NULL;
 80170d2:	6725      	str	r5, [r4, #112]	; 0x70
        slider->dragging = false;
 80170d4:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        lv_obj_invalidate(obj);
 80170d8:	f005 fdac 	bl	801cc34 <lv_obj_invalidate>
        lv_group_t * g   = lv_obj_get_group(obj);
 80170dc:	4620      	mov	r0, r4
 80170de:	f004 fca3 	bl	801ba28 <lv_obj_get_group>
 80170e2:	4607      	mov	r7, r0
        bool editing     = lv_group_get_editing(g);
 80170e4:	f004 fa44 	bl	801b570 <lv_group_get_editing>
 80170e8:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80170ea:	f7ed fb5d 	bl	80047a8 <lv_indev_get_act>
 80170ee:	f004 fa44 	bl	801b57a <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80170f2:	2804      	cmp	r0, #4
 80170f4:	f47f aeb6 	bne.w	8016e64 <lv_slider_event+0xb8>
            if(editing) {
 80170f8:	2e00      	cmp	r6, #0
 80170fa:	f43f aeb3 	beq.w	8016e64 <lv_slider_event+0xb8>
                if(lv_slider_get_mode(obj) == LV_SLIDER_MODE_RANGE) {
 80170fe:	4620      	mov	r0, r4
 8017100:	f010 f977 	bl	80273f2 <lv_slider_get_mode>
 8017104:	2802      	cmp	r0, #2
 8017106:	d108      	bne.n	801711a <lv_slider_event+0x36e>
                    if(slider->left_knob_focus == 0) slider->left_knob_focus = 1;
 8017108:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801710c:	0799      	lsls	r1, r3, #30
 801710e:	f57f af33 	bpl.w	8016f78 <lv_slider_event+0x1cc>
                        slider->left_knob_focus = 0;
 8017112:	f365 0341 	bfi	r3, r5, #1, #1
 8017116:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
                    lv_group_set_editing(g, false);
 801711a:	4629      	mov	r1, r5
 801711c:	4638      	mov	r0, r7
}
 801711e:	b033      	add	sp, #204	; 0xcc
 8017120:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    lv_group_set_editing(g, false);
 8017124:	f004 ba03 	b.w	801b52e <lv_group_set_editing>
 8017128:	3d08      	subs	r5, #8
 801712a:	2d0d      	cmp	r5, #13
 801712c:	f63f ae9a 	bhi.w	8016e64 <lv_slider_event+0xb8>
 8017130:	a301      	add	r3, pc, #4	; (adr r3, 8017138 <lv_slider_event+0x38c>)
 8017132:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8017136:	bf00      	nop
 8017138:	080170c7 	.word	0x080170c7
 801713c:	08016e65 	.word	0x08016e65
 8017140:	08016e65 	.word	0x08016e65
 8017144:	08016e65 	.word	0x08016e65
 8017148:	08016e65 	.word	0x08016e65
 801714c:	08017289 	.word	0x08017289
 8017150:	08017183 	.word	0x08017183
 8017154:	08016e65 	.word	0x08016e65
 8017158:	08016e65 	.word	0x08016e65
 801715c:	08016e65 	.word	0x08016e65
 8017160:	08016e65 	.word	0x08016e65
 8017164:	0801719b 	.word	0x0801719b
 8017168:	08016e65 	.word	0x08016e65
 801716c:	080172f9 	.word	0x080172f9
 8017170:	2d29      	cmp	r5, #41	; 0x29
 8017172:	f47f ae77 	bne.w	8016e64 <lv_slider_event+0xb8>
        lv_obj_refresh_ext_draw_size(obj);
 8017176:	4620      	mov	r0, r4
}
 8017178:	b033      	add	sp, #204	; 0xcc
 801717a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_ext_draw_size(obj);
 801717e:	f005 b98b 	b.w	801c498 <lv_obj_refresh_ext_draw_size>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8017182:	f7ed fb11 	bl	80047a8 <lv_indev_get_act>
 8017186:	f004 f9f8 	bl	801b57a <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 801718a:	2804      	cmp	r0, #4
 801718c:	d002      	beq.n	8017194 <lv_slider_event+0x3e8>
 801718e:	2802      	cmp	r0, #2
 8017190:	f47f ae68 	bne.w	8016e64 <lv_slider_event+0xb8>
            slider->left_knob_focus = 0;
 8017194:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8017198:	e6be      	b.n	8016f18 <lv_slider_event+0x16c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801719a:	2212      	movs	r2, #18
 801719c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80171a0:	4620      	mov	r0, r4
 80171a2:	f006 fc6d 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80171a6:	2213      	movs	r2, #19
 80171a8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 80171ac:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80171b0:	4620      	mov	r0, r4
 80171b2:	f006 fc65 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80171b6:	2210      	movs	r2, #16
 80171b8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 80171bc:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80171be:	4620      	mov	r0, r4
 80171c0:	f006 fc5e 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80171c4:	2211      	movs	r2, #17
 80171c6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 80171ca:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80171ce:	4620      	mov	r0, r4
 80171d0:	f006 fc56 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 80171d4:	226c      	movs	r2, #108	; 0x6c
 80171d6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 80171da:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 80171de:	4620      	mov	r0, r4
 80171e0:	f006 fc4e 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80171e4:	2268      	movs	r2, #104	; 0x68
 80171e6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 80171ea:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80171ee:	4620      	mov	r0, r4
 80171f0:	f006 fc46 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80171f4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 80171f8:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80171fa:	2269      	movs	r2, #105	; 0x69
 80171fc:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 80171fe:	9300      	str	r3, [sp, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8017200:	f006 fc3e 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8017204:	b202      	sxth	r2, r0
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 8017206:	4620      	mov	r0, r4
 8017208:	9201      	str	r2, [sp, #4]
 801720a:	f005 fb13 	bl	801c834 <lv_obj_get_width>
 801720e:	9b00      	ldr	r3, [sp, #0]
 8017210:	005e      	lsls	r6, r3, #1
 8017212:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017216:	4620      	mov	r0, r4
 8017218:	9300      	str	r3, [sp, #0]
 801721a:	f005 fb11 	bl	801c840 <lv_obj_get_height>
 801721e:	9a01      	ldr	r2, [sp, #4]
 8017220:	9b00      	ldr	r3, [sp, #0]
 8017222:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8017226:	0051      	lsls	r1, r2, #1
 8017228:	4283      	cmp	r3, r0
 801722a:	da26      	bge.n	801727a <lv_slider_event+0x4ce>
 801722c:	4620      	mov	r0, r4
 801722e:	f005 fb01 	bl	801c834 <lv_obj_get_width>
 8017232:	4406      	add	r6, r0
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 8017234:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8017238:	4620      	mov	r0, r4
 801723a:	f005 f8b8 	bl	801c3ae <lv_obj_calculate_ext_draw_size>
 801723e:	4604      	mov	r4, r0
        lv_coord_t * s = lv_event_get_param(e);
 8017240:	4638      	mov	r0, r7
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 8017242:	f346 064f 	sbfx	r6, r6, #1, #16
        lv_coord_t * s = lv_event_get_param(e);
 8017246:	f003 ffdc 	bl	801b202 <lv_event_get_param>
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 801724a:	455d      	cmp	r5, fp
 801724c:	462b      	mov	r3, r5
        knob_size = (knob_size * zoom) >> 8;
 801724e:	fb06 f808 	mul.w	r8, r6, r8
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 8017252:	bfb8      	it	lt
 8017254:	465b      	movlt	r3, fp
        *s  = LV_MAX(*s, knob_size);
 8017256:	f9b0 1000 	ldrsh.w	r1, [r0]
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 801725a:	4553      	cmp	r3, sl
 801725c:	bfb8      	it	lt
 801725e:	4653      	movlt	r3, sl
 8017260:	454b      	cmp	r3, r9
 8017262:	bfb8      	it	lt
 8017264:	464b      	movlt	r3, r9
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 8017266:	3302      	adds	r3, #2
 8017268:	4423      	add	r3, r4
 801726a:	eb03 2328 	add.w	r3, r3, r8, asr #8
        *s  = LV_MAX(*s, knob_size);
 801726e:	b21b      	sxth	r3, r3
 8017270:	428b      	cmp	r3, r1
 8017272:	bfb8      	it	lt
 8017274:	460b      	movlt	r3, r1
 8017276:	8003      	strh	r3, [r0, #0]
 8017278:	e5f4      	b.n	8016e64 <lv_slider_event+0xb8>
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 801727a:	4620      	mov	r0, r4
 801727c:	9100      	str	r1, [sp, #0]
 801727e:	f005 fadf 	bl	801c840 <lv_obj_get_height>
 8017282:	9900      	ldr	r1, [sp, #0]
 8017284:	1846      	adds	r6, r0, r1
 8017286:	e7d5      	b.n	8017234 <lv_slider_event+0x488>
        char c = *((char *)lv_event_get_param(e));
 8017288:	4638      	mov	r0, r7
 801728a:	f003 ffba 	bl	801b202 <lv_event_get_param>
 801728e:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8017290:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8017294:	2a11      	cmp	r2, #17
 8017296:	d11b      	bne.n	80172d0 <lv_slider_event+0x524>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) + 1, LV_ANIM_ON);
 8017298:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 * @param obj       pointer to a slider object
 * @return          the value of the main knob of the slider
 */
static inline int32_t lv_slider_get_value(const lv_obj_t * obj)
{
    return lv_bar_get_value(obj);
 801729c:	4620      	mov	r0, r4
 801729e:	079a      	lsls	r2, r3, #30
 80172a0:	d40e      	bmi.n	80172c0 <lv_slider_event+0x514>
 80172a2:	f00e ff1a 	bl	80260da <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 80172a6:	2201      	movs	r2, #1
 80172a8:	1881      	adds	r1, r0, r2
 80172aa:	4620      	mov	r0, r4
 80172ac:	f00e feb1 	bl	8026012 <lv_bar_set_value>
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80172b0:	2200      	movs	r2, #0
 80172b2:	211c      	movs	r1, #28
 80172b4:	4620      	mov	r0, r4
}
 80172b6:	b033      	add	sp, #204	; 0xcc
 80172b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80172bc:	f7ed ba0e 	b.w	80046dc <lv_event_send>
 * @param obj       pointer to a slider object
 * @return          the value of the left knob of the slider
 */
static inline int32_t lv_slider_get_left_value(const lv_obj_t * obj)
{
    return lv_bar_get_start_value(obj);
 80172c0:	f00e ff11 	bl	80260e6 <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 80172c4:	2201      	movs	r2, #1
 80172c6:	1881      	adds	r1, r0, r2
 80172c8:	4620      	mov	r0, r4
 80172ca:	f00e fee7 	bl	802609c <lv_bar_set_start_value>
}
 80172ce:	e7ef      	b.n	80172b0 <lv_slider_event+0x504>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 80172d0:	2b14      	cmp	r3, #20
 80172d2:	d002      	beq.n	80172da <lv_slider_event+0x52e>
 80172d4:	2b12      	cmp	r3, #18
 80172d6:	f47f adc5 	bne.w	8016e64 <lv_slider_event+0xb8>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) - 1, LV_ANIM_ON);
 80172da:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    return lv_bar_get_value(obj);
 80172de:	4620      	mov	r0, r4
 80172e0:	079b      	lsls	r3, r3, #30
 80172e2:	d404      	bmi.n	80172ee <lv_slider_event+0x542>
 80172e4:	f00e fef9 	bl	80260da <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 80172e8:	2201      	movs	r2, #1
 80172ea:	1e41      	subs	r1, r0, #1
 80172ec:	e7dd      	b.n	80172aa <lv_slider_event+0x4fe>
    return lv_bar_get_start_value(obj);
 80172ee:	f00e fefa 	bl	80260e6 <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 80172f2:	2201      	movs	r2, #1
 80172f4:	1e41      	subs	r1, r0, #1
 80172f6:	e7e7      	b.n	80172c8 <lv_slider_event+0x51c>
    lv_obj_t * obj = lv_event_get_target(e);
 80172f8:	4638      	mov	r0, r7
 80172fa:	f003 ff7a 	bl	801b1f2 <lv_event_get_target>
 80172fe:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8017300:	4638      	mov	r0, r7
 8017302:	f003 ffcf 	bl	801b2a4 <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8017306:	2216      	movs	r2, #22
 8017308:	2100      	movs	r1, #0
 801730a:	4606      	mov	r6, r0
 801730c:	4620      	mov	r0, r4
 801730e:	f006 fbb7 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8017312:	fa5f f980 	uxtb.w	r9, r0
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 8017316:	4620      	mov	r0, r4
 8017318:	f005 fa8c 	bl	801c834 <lv_obj_get_width>
 801731c:	4680      	mov	r8, r0
 801731e:	4620      	mov	r0, r4
 8017320:	f005 fa8e 	bl	801c840 <lv_obj_get_height>
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 8017324:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 8017328:	4580      	cmp	r8, r0
 801732a:	4607      	mov	r7, r0
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 801732c:	f003 0303 	and.w	r3, r3, #3
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 8017330:	bfb4      	ite	lt
 8017332:	f04f 0a00 	movlt.w	sl, #0
 8017336:	f04f 0a01 	movge.w	sl, #1
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 801733a:	2b01      	cmp	r3, #1
 801733c:	d15e      	bne.n	80173fc <lv_slider_event+0x650>
 801733e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017340:	2b00      	cmp	r3, #0
 8017342:	da5b      	bge.n	80173fc <lv_slider_event+0x650>
 8017344:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017346:	2b00      	cmp	r3, #0
 8017348:	dd58      	ble.n	80173fc <lv_slider_event+0x650>
    if(is_horizontal) {
 801734a:	45b8      	cmp	r8, r7
        knob_size = lv_obj_get_height(obj);
 801734c:	4620      	mov	r0, r4
    if(is_horizontal) {
 801734e:	db4b      	blt.n	80173e8 <lv_slider_event+0x63c>
        knob_size = lv_obj_get_height(obj);
 8017350:	f005 fa76 	bl	801c840 <lv_obj_get_height>
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.x1 = slider->bar.indic_area.x1;
 8017354:	6a63      	ldr	r3, [r4, #36]	; 0x24
        knob_size = lv_obj_get_height(obj);
 8017356:	4605      	mov	r5, r0
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.x1 = slider->bar.indic_area.x1;
 8017358:	2b00      	cmp	r3, #0
 801735a:	da55      	bge.n	8017408 <lv_slider_event+0x65c>
 801735c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
        else knob_area.x1 = LV_SLIDER_KNOB_COORD(is_rtl, slider->bar.indic_area);
 801735e:	f8ad 3008 	strh.w	r3, [sp, #8]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8017362:	a804      	add	r0, sp, #16
    lv_area_copy(&slider->right_knob_area, &knob_area);
 8017364:	f104 0b68 	add.w	fp, r4, #104	; 0x68
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8017368:	f7f1 fae8 	bl	800893c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 801736c:	aa04      	add	r2, sp, #16
 801736e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8017372:	4620      	mov	r0, r4
 8017374:	f004 fd8c 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    position_knob(obj, &knob_area, knob_size, is_horizontal);
 8017378:	462a      	mov	r2, r5
 801737a:	4653      	mov	r3, sl
 801737c:	a902      	add	r1, sp, #8
 801737e:	4620      	mov	r0, r4
 8017380:	f010 f869 	bl	8027456 <position_knob>
    dest->x1 = src->x1;
 8017384:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8017388:	4631      	mov	r1, r6
 801738a:	a820      	add	r0, sp, #128	; 0x80
 801738c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    dest->y1 = src->y1;
 8017390:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017394:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    dest->x2 = src->x2;
 8017398:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801739c:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
    dest->y2 = src->y2;
 80173a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80173a4:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 80173a8:	f005 f868 	bl	801c47c <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_KNOB;
 80173ac:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if(lv_slider_get_mode(obj) != LV_SLIDER_MODE_RANGE) {
 80173b0:	4620      	mov	r0, r4
    part_draw_dsc.draw_area = &slider->right_knob_area;
 80173b2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
    part_draw_dsc.part = LV_PART_KNOB;
 80173b6:	932d      	str	r3, [sp, #180]	; 0xb4
    part_draw_dsc.class_p = MY_CLASS;
 80173b8:	4b40      	ldr	r3, [pc, #256]	; (80174bc <lv_slider_event+0x710>)
 80173ba:	9321      	str	r3, [sp, #132]	; 0x84
    part_draw_dsc.type = LV_SLIDER_DRAW_PART_KNOB;
 80173bc:	2300      	movs	r3, #0
 80173be:	9322      	str	r3, [sp, #136]	; 0x88
    part_draw_dsc.id = 0;
 80173c0:	932e      	str	r3, [sp, #184]	; 0xb8
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
 80173c2:	ab04      	add	r3, sp, #16
 80173c4:	9324      	str	r3, [sp, #144]	; 0x90
    if(lv_slider_get_mode(obj) != LV_SLIDER_MODE_RANGE) {
 80173c6:	f010 f814 	bl	80273f2 <lv_slider_get_mode>
 80173ca:	2802      	cmp	r0, #2
 80173cc:	d029      	beq.n	8017422 <lv_slider_event+0x676>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80173ce:	aa20      	add	r2, sp, #128	; 0x80
 80173d0:	211a      	movs	r1, #26
 80173d2:	4620      	mov	r0, r4
 80173d4:	f7ed f982 	bl	80046dc <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->right_knob_area);
 80173d8:	465a      	mov	r2, fp
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->left_knob_area);
 80173da:	a904      	add	r1, sp, #16
 80173dc:	4630      	mov	r0, r6
 80173de:	f007 ffe2 	bl	801f3a6 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80173e2:	aa20      	add	r2, sp, #128	; 0x80
 80173e4:	211b      	movs	r1, #27
 80173e6:	e634      	b.n	8017052 <lv_slider_event+0x2a6>
        knob_size = lv_obj_get_width(obj);
 80173e8:	f005 fa24 	bl	801c834 <lv_obj_get_width>
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.y1 = slider->bar.indic_area.y2;
 80173ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
        knob_size = lv_obj_get_width(obj);
 80173ee:	4605      	mov	r5, r0
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.y1 = slider->bar.indic_area.y2;
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	da14      	bge.n	801741e <lv_slider_event+0x672>
 80173f4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
        else knob_area.y1 = slider->bar.indic_area.y1;
 80173f6:	f8ad 300a 	strh.w	r3, [sp, #10]
 80173fa:	e7b2      	b.n	8017362 <lv_slider_event+0x5b6>
    if(is_horizontal) {
 80173fc:	45b8      	cmp	r8, r7
        knob_size = lv_obj_get_height(obj);
 80173fe:	4620      	mov	r0, r4
    if(is_horizontal) {
 8017400:	db0a      	blt.n	8017418 <lv_slider_event+0x66c>
        knob_size = lv_obj_get_height(obj);
 8017402:	f005 fa1d 	bl	801c840 <lv_obj_get_height>
 8017406:	4605      	mov	r5, r0
        else knob_area.x1 = LV_SLIDER_KNOB_COORD(is_rtl, slider->bar.indic_area);
 8017408:	f1b9 0f01 	cmp.w	r9, #1
 801740c:	bf0c      	ite	eq
 801740e:	f9b4 3034 	ldrsheq.w	r3, [r4, #52]	; 0x34
 8017412:	f9b4 3038 	ldrshne.w	r3, [r4, #56]	; 0x38
 8017416:	e7a2      	b.n	801735e <lv_slider_event+0x5b2>
        knob_size = lv_obj_get_width(obj);
 8017418:	f005 fa0c 	bl	801c834 <lv_obj_get_width>
 801741c:	4605      	mov	r5, r0
        else knob_area.y1 = slider->bar.indic_area.y1;
 801741e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017420:	e7e9      	b.n	80173f6 <lv_slider_event+0x64a>
 8017422:	2238      	movs	r2, #56	; 0x38
 8017424:	a904      	add	r1, sp, #16
 8017426:	a812      	add	r0, sp, #72	; 0x48
 8017428:	f003 f96f 	bl	801a70a <memcpy>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801742c:	aa20      	add	r2, sp, #128	; 0x80
 801742e:	211a      	movs	r1, #26
 8017430:	4620      	mov	r0, r4
 8017432:	f7ed f953 	bl	80046dc <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->right_knob_area);
 8017436:	465a      	mov	r2, fp
 8017438:	a904      	add	r1, sp, #16
 801743a:	4630      	mov	r0, r6
 801743c:	f007 ffb3 	bl	801f3a6 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8017440:	aa20      	add	r2, sp, #128	; 0x80
 8017442:	211b      	movs	r1, #27
 8017444:	4620      	mov	r0, r4
 8017446:	f7ed f949 	bl	80046dc <lv_event_send>
        if(is_horizontal) {
 801744a:	45b8      	cmp	r8, r7
 801744c:	db32      	blt.n	80174b4 <lv_slider_event+0x708>
            knob_area.x1 = LV_SLIDER_KNOB_COORD(!is_rtl, slider->bar.indic_area);
 801744e:	f1b9 0f01 	cmp.w	r9, #1
 8017452:	bf14      	ite	ne
 8017454:	f9b4 3034 	ldrshne.w	r3, [r4, #52]	; 0x34
 8017458:	f9b4 3038 	ldrsheq.w	r3, [r4, #56]	; 0x38
 801745c:	f8ad 3008 	strh.w	r3, [sp, #8]
        position_knob(obj, &knob_area, knob_size, is_horizontal);
 8017460:	462a      	mov	r2, r5
 8017462:	4653      	mov	r3, sl
 8017464:	a902      	add	r1, sp, #8
 8017466:	4620      	mov	r0, r4
 8017468:	f00f fff5 	bl	8027456 <position_knob>
    dest->x1 = src->x1;
 801746c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017470:	2238      	movs	r2, #56	; 0x38
 8017472:	a912      	add	r1, sp, #72	; 0x48
 8017474:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8017478:	a804      	add	r0, sp, #16
    dest->y1 = src->y1;
 801747a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        lv_area_copy(&slider->left_knob_area, &knob_area);
 801747e:	f104 0560 	add.w	r5, r4, #96	; 0x60
 8017482:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    dest->x2 = src->x2;
 8017486:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801748a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    dest->y2 = src->y2;
 801748e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017492:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
 8017496:	f003 f938 	bl	801a70a <memcpy>
        part_draw_dsc.rect_dsc = &knob_rect_dsc;
 801749a:	aa04      	add	r2, sp, #16
        part_draw_dsc.type = LV_SLIDER_DRAW_PART_KNOB_LEFT;
 801749c:	2301      	movs	r3, #1
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801749e:	211a      	movs	r1, #26
        part_draw_dsc.rect_dsc = &knob_rect_dsc;
 80174a0:	9224      	str	r2, [sp, #144]	; 0x90
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80174a2:	4620      	mov	r0, r4
 80174a4:	aa20      	add	r2, sp, #128	; 0x80
        part_draw_dsc.id = 1;
 80174a6:	932e      	str	r3, [sp, #184]	; 0xb8
        part_draw_dsc.draw_area = &slider->left_knob_area;
 80174a8:	e9cd 3522 	strd	r3, r5, [sp, #136]	; 0x88
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80174ac:	f7ed f916 	bl	80046dc <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->left_knob_area);
 80174b0:	462a      	mov	r2, r5
 80174b2:	e792      	b.n	80173da <lv_slider_event+0x62e>
            knob_area.y1 = slider->bar.indic_area.y2;
 80174b4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80174b6:	f8ad 300a 	strh.w	r3, [sp, #10]
 80174ba:	e7d1      	b.n	8017460 <lv_slider_event+0x6b4>
 80174bc:	08029a4c 	.word	0x08029a4c

080174c0 <lv_switch_event>:

    lv_anim_del(sw, NULL);
}

static void lv_switch_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80174c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 80174c4:	48a6      	ldr	r0, [pc, #664]	; (8017760 <lv_switch_event+0x2a0>)
{
 80174c6:	b0a5      	sub	sp, #148	; 0x94
 80174c8:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 80174ca:	f003 fe7c 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80174ce:	2801      	cmp	r0, #1
 80174d0:	d14c      	bne.n	801756c <lv_switch_event+0xac>

    lv_event_code_t code = lv_event_get_code(e);
 80174d2:	4628      	mov	r0, r5
 80174d4:	f003 fe91 	bl	801b1fa <lv_event_get_code>
 80174d8:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80174da:	4628      	mov	r0, r5
 80174dc:	f003 fe89 	bl	801b1f2 <lv_event_get_target>

    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80174e0:	2c13      	cmp	r4, #19
    lv_obj_t * obj = lv_event_get_target(e);
 80174e2:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80174e4:	d14b      	bne.n	801757e <lv_switch_event+0xbe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80174e6:	2212      	movs	r2, #18
 80174e8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80174ec:	f006 fac8 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80174f0:	4622      	mov	r2, r4
    return (lv_coord_t)v.num;
 80174f2:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80174f6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80174fa:	4630      	mov	r0, r6
 80174fc:	f006 fac0 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017500:	2210      	movs	r2, #16
    return (lv_coord_t)v.num;
 8017502:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017504:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8017508:	4630      	mov	r0, r6
 801750a:	f006 fab9 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801750e:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 8017510:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017514:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8017518:	4630      	mov	r0, r6
 801751a:	f006 fab1 	bl	801da80 <lv_obj_get_style_prop>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);

        /*The smaller size is the knob diameter*/
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
        knob_size += _LV_SWITCH_KNOB_EXT_AREA_CORRECTION;
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801751e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 8017522:	b207      	sxth	r7, r0
 8017524:	4630      	mov	r0, r6
 8017526:	f004 ff42 	bl	801c3ae <lv_obj_calculate_ext_draw_size>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 801752a:	454c      	cmp	r4, r9
 801752c:	bfb8      	it	lt
 801752e:	464c      	movlt	r4, r9
 8017530:	4544      	cmp	r4, r8
 8017532:	bfb8      	it	lt
 8017534:	4644      	movlt	r4, r8
 8017536:	42bc      	cmp	r4, r7
 8017538:	bfb8      	it	lt
 801753a:	463c      	movlt	r4, r7
        knob_size += _LV_SWITCH_KNOB_EXT_AREA_CORRECTION;
 801753c:	3402      	adds	r4, #2
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801753e:	4404      	add	r4, r0

        lv_coord_t * s = lv_event_get_param(e);
 8017540:	4628      	mov	r0, r5
 8017542:	f003 fe5e 	bl	801b202 <lv_event_get_param>
        *s = LV_MAX(*s, knob_size);
 8017546:	f9b0 3000 	ldrsh.w	r3, [r0]
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801754a:	b2a4      	uxth	r4, r4
        lv_coord_t * s = lv_event_get_param(e);
 801754c:	4605      	mov	r5, r0
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801754e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        *s = LV_MAX(*s, knob_size);
 8017552:	b224      	sxth	r4, r4
 8017554:	429c      	cmp	r4, r3
 8017556:	bfb8      	it	lt
 8017558:	461c      	movlt	r4, r3
 801755a:	8004      	strh	r4, [r0, #0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801755c:	4630      	mov	r0, r6
 801755e:	f004 ff26 	bl	801c3ae <lv_obj_calculate_ext_draw_size>
 8017562:	4284      	cmp	r4, r0
 8017564:	dd05      	ble.n	8017572 <lv_switch_event+0xb2>
 8017566:	f9b5 0000 	ldrsh.w	r0, [r5]
 801756a:	8028      	strh	r0, [r5, #0]
        lv_obj_invalidate(obj);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        draw_main(e);
    }
}
 801756c:	b025      	add	sp, #148	; 0x94
 801756e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 8017572:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8017576:	4630      	mov	r0, r6
 8017578:	f004 ff19 	bl	801c3ae <lv_obj_calculate_ext_draw_size>
 801757c:	e7f5      	b.n	801756a <lv_switch_event+0xaa>
    else if(code == LV_EVENT_VALUE_CHANGED) {
 801757e:	2c1c      	cmp	r4, #28
 8017580:	d135      	bne.n	80175ee <lv_switch_event+0x12e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 8017582:	2264      	movs	r2, #100	; 0x64
 8017584:	2100      	movs	r1, #0
 8017586:	f006 fa7b 	bl	801da80 <lv_obj_get_style_prop>
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_switch_t * sw = (lv_switch_t *)obj;

    uint32_t anim_dur_full = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);

    if(anim_dur_full > 0) {
 801758a:	4607      	mov	r7, r0
 801758c:	b338      	cbz	r0, 80175de <lv_switch_event+0x11e>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 801758e:	4630      	mov	r0, r6
 8017590:	f004 fa48 	bl	801ba24 <lv_obj_get_state>
        int32_t anim_start;
        int32_t anim_end;
        /*No animation in progress -> simply set the values*/
        if(sw->anim_state == LV_SWITCH_ANIM_STATE_INV) {
 8017594:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017596:	f000 0501 	and.w	r5, r0, #1
 801759a:	1c61      	adds	r1, r4, #1
 801759c:	d125      	bne.n	80175ea <lv_switch_event+0x12a>
            anim_start = chk ? LV_SWITCH_ANIM_STATE_START : LV_SWITCH_ANIM_STATE_END;
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 801759e:	2d00      	cmp	r5, #0
 80175a0:	ea4f 2505 	mov.w	r5, r5, lsl #8
 80175a4:	bf0c      	ite	eq
 80175a6:	f44f 7480 	moveq.w	r4, #256	; 0x100
 80175aa:	2400      	movne	r4, #0
        }
        /*Calculate actual animation duration*/
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;

        /*Stop the previous animation if it exists*/
        lv_anim_del(sw, NULL);
 80175ac:	2100      	movs	r1, #0
 80175ae:	4630      	mov	r0, r6
 80175b0:	f7fa fec2 	bl	8012338 <lv_anim_del>

        lv_anim_t a;
        lv_anim_init(&a);
 80175b4:	a813      	add	r0, sp, #76	; 0x4c
 80175b6:	f7fa fea3 	bl	8012300 <lv_anim_init>
    a->exec_cb = exec_cb;
 80175ba:	4b6a      	ldr	r3, [pc, #424]	; (8017764 <lv_switch_event+0x2a4>)
        lv_anim_set_var(&a, sw);
        lv_anim_set_exec_cb(&a, lv_switch_anim_exec_cb);
        lv_anim_set_values(&a, anim_start, anim_end);
        lv_anim_set_ready_cb(&a, lv_switch_anim_ready);
        lv_anim_set_time(&a, anim_dur);
        lv_anim_start(&a);
 80175bc:	a813      	add	r0, sp, #76	; 0x4c
    a->var = var;
 80175be:	9613      	str	r6, [sp, #76]	; 0x4c
    a->exec_cb = exec_cb;
 80175c0:	9314      	str	r3, [sp, #80]	; 0x50
    a->ready_cb = ready_cb;
 80175c2:	4b69      	ldr	r3, [pc, #420]	; (8017768 <lv_switch_event+0x2a8>)
    a->end_value = end;
 80175c4:	951d      	str	r5, [sp, #116]	; 0x74
    a->ready_cb = ready_cb;
 80175c6:	9316      	str	r3, [sp, #88]	; 0x58
    a->current_value = start;
 80175c8:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;
 80175cc:	1b64      	subs	r4, r4, r5
 80175ce:	2c00      	cmp	r4, #0
 80175d0:	bfb8      	it	lt
 80175d2:	4264      	neglt	r4, r4
 80175d4:	437c      	muls	r4, r7
 80175d6:	0a24      	lsrs	r4, r4, #8
    a->time = duration;
 80175d8:	941e      	str	r4, [sp, #120]	; 0x78
        lv_anim_start(&a);
 80175da:	f7fa fedd 	bl	8012398 <lv_anim_start>
        lv_obj_invalidate(obj);
 80175de:	4630      	mov	r0, r6
}
 80175e0:	b025      	add	sp, #148	; 0x94
 80175e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        lv_obj_invalidate(obj);
 80175e6:	f005 bb25 	b.w	801cc34 <lv_obj_invalidate>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 80175ea:	022d      	lsls	r5, r5, #8
 80175ec:	e7de      	b.n	80175ac <lv_switch_event+0xec>
    else if(code == LV_EVENT_DRAW_MAIN) {
 80175ee:	2c15      	cmp	r4, #21
 80175f0:	d1bc      	bne.n	801756c <lv_switch_event+0xac>
    lv_obj_t * obj = lv_event_get_target(e);
 80175f2:	4628      	mov	r0, r5
 80175f4:	f003 fdfd 	bl	801b1f2 <lv_event_get_target>
 80175f8:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80175fa:	4628      	mov	r0, r5
 80175fc:	f003 fe52 	bl	801b2a4 <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8017600:	2212      	movs	r2, #18
 8017602:	4607      	mov	r7, r0
 8017604:	2100      	movs	r1, #0
 8017606:	4620      	mov	r0, r4
 8017608:	f006 fa3a 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801760c:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801760e:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017610:	2100      	movs	r1, #0
 8017612:	4620      	mov	r0, r4
 8017614:	f006 fa34 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017618:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801761a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801761c:	2100      	movs	r1, #0
 801761e:	4620      	mov	r0, r4
 8017620:	f006 fa2e 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017624:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017626:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017628:	2100      	movs	r1, #0
 801762a:	4620      	mov	r0, r4
 801762c:	f006 fa28 	bl	801da80 <lv_obj_get_style_prop>
    indic_area.x1 += bg_left;
 8017630:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    dest->y1 = src->y1;
 8017634:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 8017638:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801763c:	4465      	add	r5, ip
    dest->y2 = src->y2;
 801763e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
    indic_area.y1 += bg_top;
 8017642:	4432      	add	r2, r6
    indic_area.x2 -= bg_right;
 8017644:	eba1 0108 	sub.w	r1, r1, r8
    indic_area.x1 += bg_left;
 8017648:	f8ad 5004 	strh.w	r5, [sp, #4]
    indic_area.y2 -= bg_bottom;
 801764c:	1a1b      	subs	r3, r3, r0
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 801764e:	a805      	add	r0, sp, #20
    indic_area.x2 -= bg_right;
 8017650:	f8ad 1008 	strh.w	r1, [sp, #8]
    indic_area.y2 -= bg_bottom;
 8017654:	f8ad 300a 	strh.w	r3, [sp, #10]
    indic_area.y1 += bg_top;
 8017658:	f8ad 2006 	strh.w	r2, [sp, #6]
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 801765c:	f7f1 f96e 	bl	800893c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_indic_dsc);
 8017660:	aa05      	add	r2, sp, #20
 8017662:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8017666:	4620      	mov	r0, r4
 8017668:	f004 fc12 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &draw_indic_dsc, &indic_area);
 801766c:	aa01      	add	r2, sp, #4
 801766e:	a905      	add	r1, sp, #20
 8017670:	4638      	mov	r0, r7
 8017672:	f007 fe98 	bl	801f3a6 <lv_draw_rect>
    lv_coord_t knob_size = lv_obj_get_height(obj);
 8017676:	4620      	mov	r0, r4
 8017678:	f005 f8e2 	bl	801c840 <lv_obj_get_height>
    lv_coord_t anim_length = lv_area_get_width(&obj->coords) - knob_size;
 801767c:	8b25      	ldrh	r5, [r4, #24]
 801767e:	b286      	uxth	r6, r0
 8017680:	8aa3      	ldrh	r3, [r4, #20]
 8017682:	1bad      	subs	r5, r5, r6
 8017684:	3501      	adds	r5, #1
 8017686:	1aed      	subs	r5, r5, r3
    if(LV_SWITCH_IS_ANIMATING(sw)) {
 8017688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801768a:	1c5a      	adds	r2, r3, #1
    lv_coord_t anim_length = lv_area_get_width(&obj->coords) - knob_size;
 801768c:	fa1f f885 	uxth.w	r8, r5
 8017690:	b22d      	sxth	r5, r5
    if(LV_SWITCH_IS_ANIMATING(sw)) {
 8017692:	d05d      	beq.n	8017750 <lv_switch_event+0x290>
        anim_value_x = (anim_length * sw->anim_state) / LV_SWITCH_ANIM_STATE_END;
 8017694:	435d      	muls	r5, r3
 8017696:	bf48      	it	mi
 8017698:	35ff      	addmi	r5, #255	; 0xff
 801769a:	f345 250f 	sbfx	r5, r5, #8, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801769e:	2216      	movs	r2, #22
 80176a0:	2100      	movs	r1, #0
 80176a2:	4620      	mov	r0, r4
 80176a4:	f006 f9ec 	bl	801da80 <lv_obj_get_style_prop>
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 80176a8:	8aa3      	ldrh	r3, [r4, #20]
    return (lv_base_dir_t)v.num;
 80176aa:	b2c0      	uxtb	r0, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80176ac:	2212      	movs	r2, #18
 80176ae:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    if(LV_BASE_DIR_RTL == lv_obj_get_style_base_dir(obj, LV_PART_MAIN)) {
 80176b2:	2801      	cmp	r0, #1
 80176b4:	4620      	mov	r0, r4
        anim_value_x = anim_length - anim_value_x;
 80176b6:	bf04      	itt	eq
 80176b8:	eba8 0805 	subeq.w	r8, r8, r5
 80176bc:	fa0f f588 	sxtheq.w	r5, r8
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 80176c0:	441d      	add	r5, r3
    knob_area.y1 = obj->coords.y1;
 80176c2:	8ae3      	ldrh	r3, [r4, #22]
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 80176c4:	b2ad      	uxth	r5, r5
    knob_area.y1 = obj->coords.y1;
 80176c6:	f8ad 300e 	strh.w	r3, [sp, #14]
    knob_area.y2 = obj->coords.y2;
 80176ca:	8b63      	ldrh	r3, [r4, #26]
    knob_area.x2 = knob_area.x1 + knob_size;
 80176cc:	442e      	add	r6, r5
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 80176ce:	f8ad 500c 	strh.w	r5, [sp, #12]
    knob_area.y2 = obj->coords.y2;
 80176d2:	f8ad 3012 	strh.w	r3, [sp, #18]
    knob_area.x2 = knob_area.x1 + knob_size;
 80176d6:	f8ad 6010 	strh.w	r6, [sp, #16]
 80176da:	f006 f9d1 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80176de:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80176e0:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80176e2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80176e6:	4620      	mov	r0, r4
 80176e8:	f006 f9ca 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80176ec:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80176ee:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80176f0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80176f4:	4620      	mov	r0, r4
 80176f6:	f006 f9c3 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80176fa:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80176fc:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80176fe:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8017702:	4620      	mov	r0, r4
 8017704:	f006 f9bc 	bl	801da80 <lv_obj_get_style_prop>
    knob_area.x1 -= knob_left;
 8017708:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801770c:	eba3 0308 	sub.w	r3, r3, r8
 8017710:	f8ad 300c 	strh.w	r3, [sp, #12]
    knob_area.x2 += knob_right;
 8017714:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017718:	441d      	add	r5, r3
    knob_area.y1 -= knob_top;
 801771a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801771e:	1b9b      	subs	r3, r3, r6
    knob_area.x2 += knob_right;
 8017720:	f8ad 5010 	strh.w	r5, [sp, #16]
    knob_area.y1 -= knob_top;
 8017724:	f8ad 300e 	strh.w	r3, [sp, #14]
    knob_area.y2 += knob_bottom;
 8017728:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801772c:	4418      	add	r0, r3
 801772e:	f8ad 0012 	strh.w	r0, [sp, #18]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8017732:	a813      	add	r0, sp, #76	; 0x4c
 8017734:	f7f1 f902 	bl	800893c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 8017738:	aa13      	add	r2, sp, #76	; 0x4c
 801773a:	4620      	mov	r0, r4
 801773c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8017740:	f004 fba6 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 8017744:	aa03      	add	r2, sp, #12
 8017746:	a913      	add	r1, sp, #76	; 0x4c
 8017748:	4638      	mov	r0, r7
 801774a:	f007 fe2c 	bl	801f3a6 <lv_draw_rect>
}
 801774e:	e70d      	b.n	801756c <lv_switch_event+0xac>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 8017750:	4620      	mov	r0, r4
 8017752:	f004 f967 	bl	801ba24 <lv_obj_get_state>
        anim_value_x = chk ? anim_length : 0;
 8017756:	f010 0f01 	tst.w	r0, #1
 801775a:	bf08      	it	eq
 801775c:	2500      	moveq	r5, #0
 801775e:	e79e      	b.n	801769e <lv_switch_event+0x1de>
 8017760:	08029a68 	.word	0x08029a68
 8017764:	0802752b 	.word	0x0802752b
 8017768:	0802751f 	.word	0x0802751f

0801776c <draw_main>:
    }
}


static void draw_main(lv_event_t * e)
{
 801776c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017770:	4605      	mov	r5, r0
 8017772:	b0df      	sub	sp, #380	; 0x17c
    lv_obj_t * obj = lv_event_get_target(e);
 8017774:	f003 fd3d 	bl	801b1f2 <lv_event_get_target>
 8017778:	4604      	mov	r4, r0
    lv_table_t * table = (lv_table_t *)obj;
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801777a:	4628      	mov	r0, r5
 801777c:	f003 fd92 	bl	801b2a4 <lv_event_get_draw_ctx>
    lv_area_t clip_area;
    if(!_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area)) return;
 8017780:	f104 0114 	add.w	r1, r4, #20
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8017784:	4605      	mov	r5, r0
    if(!_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area)) return;
 8017786:	6882      	ldr	r2, [r0, #8]
 8017788:	a816      	add	r0, sp, #88	; 0x58
 801778a:	f00c fd72 	bl	8024272 <_lv_area_intersect>
 801778e:	2800      	cmp	r0, #0
 8017790:	f000 8088 	beq.w	80178a4 <draw_main+0x138>

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8017794:	68ab      	ldr	r3, [r5, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8017796:	2232      	movs	r2, #50	; 0x32
 8017798:	2100      	movs	r1, #0
 801779a:	4620      	mov	r0, r4
 801779c:	930d      	str	r3, [sp, #52]	; 0x34
    draw_ctx->clip_area = &clip_area;
 801779e:	ab16      	add	r3, sp, #88	; 0x58
 80177a0:	60ab      	str	r3, [r5, #8]
 80177a2:	f006 f96d 	bl	801da80 <lv_obj_get_style_prop>

    lv_point_t txt_size;
    lv_area_t cell_area;

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80177a6:	2100      	movs	r1, #0
 80177a8:	4606      	mov	r6, r0
 80177aa:	4620      	mov	r0, r4
 80177ac:	f00f fee4 	bl	8027578 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80177b0:	2211      	movs	r2, #17
 80177b2:	2100      	movs	r1, #0
 80177b4:	9007      	str	r0, [sp, #28]
 80177b6:	4620      	mov	r0, r4
 80177b8:	f006 f962 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80177bc:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 80177be:	b203      	sxth	r3, r0
 80177c0:	4620      	mov	r0, r4
 80177c2:	9311      	str	r3, [sp, #68]	; 0x44
 80177c4:	f00f fecc 	bl	8027560 <lv_obj_get_style_pad_left>
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80177c8:	2100      	movs	r1, #0
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80177ca:	9008      	str	r0, [sp, #32]
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80177cc:	4620      	mov	r0, r4
 80177ce:	f00f fecd 	bl	802756c <lv_obj_get_style_pad_right>

    lv_state_t state_ori = obj->state;
 80177d2:	8c23      	ldrh	r3, [r4, #32]
    obj->state = LV_STATE_DEFAULT;
 80177d4:	6a22      	ldr	r2, [r4, #32]
    lv_state_t state_ori = obj->state;
 80177d6:	930a      	str	r3, [sp, #40]	; 0x28
    obj->state = LV_STATE_DEFAULT;
 80177d8:	4bbc      	ldr	r3, [pc, #752]	; (8017acc <draw_main+0x360>)
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80177da:	9009      	str	r0, [sp, #36]	; 0x24
    obj->skip_trans = 1;
    lv_draw_rect_dsc_t rect_dsc_def;
    lv_draw_rect_dsc_t rect_dsc_act; /*Passed to the event to modify it*/
    lv_draw_rect_dsc_init(&rect_dsc_def);
 80177dc:	a830      	add	r0, sp, #192	; 0xc0
    obj->state = LV_STATE_DEFAULT;
 80177de:	4013      	ands	r3, r2
 80177e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80177e4:	6223      	str	r3, [r4, #32]
    lv_draw_rect_dsc_init(&rect_dsc_def);
 80177e6:	f7f1 f8a9 	bl	800893c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_def);
 80177ea:	aa30      	add	r2, sp, #192	; 0xc0
 80177ec:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80177f0:	4620      	mov	r0, r4
 80177f2:	f004 fb4d 	bl	801be90 <lv_obj_init_draw_rect_dsc>

    lv_draw_label_dsc_t label_dsc_def;
    lv_draw_label_dsc_t label_dsc_act;  /*Passed to the event to modify it*/
    lv_draw_label_dsc_init(&label_dsc_def);
 80177f6:	a820      	add	r0, sp, #128	; 0x80
 80177f8:	f7f0 fa56 	bl	8007ca8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_def);
 80177fc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8017800:	aa20      	add	r2, sp, #128	; 0x80
 8017802:	4620      	mov	r0, r4
 8017804:	f004 fc93 	bl	801c12e <lv_obj_init_draw_label_dsc>
    obj->state = state_ori;
 8017808:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    uint16_t col;
    uint16_t row;
    uint16_t cell = 0;

    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 801780a:	4620      	mov	r0, r4
 801780c:	8ae7      	ldrh	r7, [r4, #22]
    obj->state = state_ori;
 801780e:	8423      	strh	r3, [r4, #32]
    obj->skip_trans = 0;
 8017810:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8017814:	f36f 0382 	bfc	r3, #2, #1
 8017818:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 801781c:	f005 fba3 	bl	801cf66 <lv_obj_get_scroll_y>
 8017820:	b2b3      	uxth	r3, r6
 8017822:	9306      	str	r3, [sp, #24]
 8017824:	3b01      	subs	r3, #1
 8017826:	b29a      	uxth	r2, r3
 8017828:	fa17 f383 	uxtah	r3, r7, r3
    /*Handle custom drawer*/
    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
    part_draw_dsc.part = LV_PART_ITEMS;
    part_draw_dsc.class_p = MY_CLASS;
    part_draw_dsc.type = LV_TABLE_DRAW_PART_CELL;
 801782c:	2700      	movs	r7, #0
 801782e:	9212      	str	r2, [sp, #72]	; 0x48
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 8017830:	9a07      	ldr	r2, [sp, #28]
    uint16_t cell = 0;
 8017832:	46ba      	mov	sl, r7
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 8017834:	4413      	add	r3, r2
 8017836:	1a1b      	subs	r3, r3, r0
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 8017838:	4620      	mov	r0, r4
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 801783a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 801783e:	f005 fb8c 	bl	801cf5a <lv_obj_get_scroll_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8017842:	2216      	movs	r2, #22
 8017844:	2100      	movs	r1, #0
 8017846:	900e      	str	r0, [sp, #56]	; 0x38
 8017848:	4620      	mov	r0, r4
 801784a:	f006 f919 	bl	801da80 <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801784e:	4629      	mov	r1, r5
    return (lv_base_dir_t)v.num;
 8017850:	b2c3      	uxtb	r3, r0
 8017852:	a84c      	add	r0, sp, #304	; 0x130
 8017854:	9305      	str	r3, [sp, #20]
 8017856:	f004 fe11 	bl	801c47c <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 801785a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
    part_draw_dsc.type = LV_TABLE_DRAW_PART_CELL;
 801785e:	974e      	str	r7, [sp, #312]	; 0x138
    part_draw_dsc.part = LV_PART_ITEMS;
 8017860:	9359      	str	r3, [sp, #356]	; 0x164
    part_draw_dsc.class_p = MY_CLASS;
 8017862:	4b9b      	ldr	r3, [pc, #620]	; (8017ad0 <draw_main+0x364>)
 8017864:	934d      	str	r3, [sp, #308]	; 0x134
    part_draw_dsc.rect_dsc = &rect_dsc_act;
 8017866:	ab3e      	add	r3, sp, #248	; 0xf8
 8017868:	9350      	str	r3, [sp, #320]	; 0x140
    part_draw_dsc.label_dsc = &label_dsc_act;
 801786a:	ab28      	add	r3, sp, #160	; 0xa0
 801786c:	9351      	str	r3, [sp, #324]	; 0x144

    for(row = 0; row < table->row_cnt; row++) {
 801786e:	b2bb      	uxth	r3, r7
 8017870:	b2ba      	uxth	r2, r7
 8017872:	9310      	str	r3, [sp, #64]	; 0x40
 8017874:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8017876:	4293      	cmp	r3, r2
 8017878:	d912      	bls.n	80178a0 <draw_main+0x134>
        lv_coord_t h_row = table->row_h[row];
 801787a:	b2bb      	uxth	r3, r7

        cell_area.y1 = cell_area.y2 + 1;
 801787c:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
        lv_coord_t h_row = table->row_h[row];
 8017880:	b2ba      	uxth	r2, r7
 8017882:	930b      	str	r3, [sp, #44]	; 0x2c
 8017884:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017886:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
        cell_area.y1 = cell_area.y2 + 1;
 801788a:	1c4b      	adds	r3, r1, #1
        cell_area.y2 = cell_area.y1 + h_row - 1;
 801788c:	4411      	add	r1, r2
        cell_area.y1 = cell_area.y2 + 1;
 801788e:	b21b      	sxth	r3, r3
        cell_area.y2 = cell_area.y1 + h_row - 1;
 8017890:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66

        if(cell_area.y1 > clip_area.y2) break;
 8017894:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
        cell_area.y1 = cell_area.y2 + 1;
 8017898:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        if(cell_area.y1 > clip_area.y2) break;
 801789c:	4299      	cmp	r1, r3
 801789e:	da04      	bge.n	80178aa <draw_main+0x13e>
            cell += col_merge + 1;
            col += col_merge;
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 80178a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80178a2:	60ab      	str	r3, [r5, #8]
}
 80178a4:	b05f      	add	sp, #380	; 0x17c
 80178a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(rtl) cell_area.x1 = obj->coords.x2 - bg_right - 1 - scroll_x - border_width;
 80178aa:	9b05      	ldr	r3, [sp, #20]
 80178ac:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80178b0:	2b01      	cmp	r3, #1
 80178b2:	d110      	bne.n	80178d6 <draw_main+0x16a>
 80178b4:	9806      	ldr	r0, [sp, #24]
 80178b6:	8b23      	ldrh	r3, [r4, #24]
 80178b8:	1a1b      	subs	r3, r3, r0
 80178ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80178bc:	3b01      	subs	r3, #1
 80178be:	1a1b      	subs	r3, r3, r0
 80178c0:	1a5b      	subs	r3, r3, r1
 80178c2:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 80178c6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80178ca:	f04f 0800 	mov.w	r8, #0
 80178ce:	f3c2 034f 	ubfx	r3, r2, #1, #16
 80178d2:	930c      	str	r3, [sp, #48]	; 0x30
 80178d4:	e1a4      	b.n	8017c20 <draw_main+0x4b4>
        else cell_area.x2 = obj->coords.x1 + bg_left - 1 - scroll_x + border_width;
 80178d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80178d8:	8aa3      	ldrh	r3, [r4, #20]
 80178da:	4403      	add	r3, r0
 80178dc:	9808      	ldr	r0, [sp, #32]
 80178de:	4403      	add	r3, r0
 80178e0:	1a5b      	subs	r3, r3, r1
 80178e2:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
 80178e6:	e7ee      	b.n	80178c6 <draw_main+0x15a>
            if(table->cell_data[cell]) ctrl = table->cell_data[cell][0];
 80178e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80178ec:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80178f0:	f85c 602a 	ldr.w	r6, [ip, sl, lsl #2]
 80178f4:	9304      	str	r3, [sp, #16]
 80178f6:	b106      	cbz	r6, 80178fa <draw_main+0x18e>
 80178f8:	7836      	ldrb	r6, [r6, #0]
            if(rtl) {
 80178fa:	9b05      	ldr	r3, [sp, #20]
                cell_area.x1 = cell_area.x2 - table->col_w[col] + 1;
 80178fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
            if(rtl) {
 80178fe:	2b01      	cmp	r3, #1
 8017900:	d10d      	bne.n	801791e <draw_main+0x1b2>
                cell_area.x2 = cell_area.x1 - 1;
 8017902:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8017906:	1e59      	subs	r1, r3, #1
 8017908:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
                cell_area.x1 = cell_area.x2 - table->col_w[col] + 1;
 801790c:	f830 1018 	ldrh.w	r1, [r0, r8, lsl #1]
 8017910:	1a5b      	subs	r3, r3, r1
 8017912:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            lv_table_cell_ctrl_t ctrl = 0;
 8017916:	2300      	movs	r3, #0
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 8017918:	f102 39ff 	add.w	r9, r2, #4294967295
 801791c:	e028      	b.n	8017970 <draw_main+0x204>
                cell_area.x1 = cell_area.x2 + 1;
 801791e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8017922:	1c59      	adds	r1, r3, #1
 8017924:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
                cell_area.x2 = cell_area.x1 + table->col_w[col] - 1;
 8017928:	f830 1018 	ldrh.w	r1, [r0, r8, lsl #1]
 801792c:	440b      	add	r3, r1
 801792e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
 8017932:	e7f0      	b.n	8017916 <draw_main+0x1aa>
                char * next_cell_data = table->cell_data[cell + col_merge];
 8017934:	44d6      	add	lr, sl
 8017936:	f85c e02e 	ldr.w	lr, [ip, lr, lsl #2]
                if(is_cell_empty(next_cell_data)) break;
 801793a:	f1be 0f00 	cmp.w	lr, #0
 801793e:	d01d      	beq.n	801797c <draw_main+0x210>
                if(merge_ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT) {
 8017940:	f89e e000 	ldrb.w	lr, [lr]
 8017944:	f01e 0f01 	tst.w	lr, #1
 8017948:	d018      	beq.n	801797c <draw_main+0x210>
                    if(rtl) cell_area.x1 -= offset;
 801794a:	9a05      	ldr	r2, [sp, #20]
                    lv_coord_t offset = table->col_w[col + col_merge + 1];
 801794c:	3101      	adds	r1, #1
 801794e:	3301      	adds	r3, #1
                    if(rtl) cell_area.x1 -= offset;
 8017950:	2a01      	cmp	r2, #1
 8017952:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8017956:	bf0b      	itete	eq
 8017958:	f8bd e060 	ldrheq.w	lr, [sp, #96]	; 0x60
                    else cell_area.x2 += offset;
 801795c:	f8bd e064 	ldrhne.w	lr, [sp, #100]	; 0x64
                    if(rtl) cell_area.x1 -= offset;
 8017960:	ebae 0101 	subeq.w	r1, lr, r1
                    else cell_area.x2 += offset;
 8017964:	4471      	addne	r1, lr
                    if(rtl) cell_area.x1 -= offset;
 8017966:	bf0c      	ite	eq
 8017968:	f8ad 1060 	strheq.w	r1, [sp, #96]	; 0x60
                    else cell_area.x2 += offset;
 801796c:	f8ad 1064 	strhne.w	r1, [sp, #100]	; 0x64
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 8017970:	fa18 f183 	uxtah	r1, r8, r3
 8017974:	fa1f fe83 	uxth.w	lr, r3
 8017978:	4549      	cmp	r1, r9
 801797a:	dbdb      	blt.n	8017934 <draw_main+0x1c8>
            if(cell_area.y2 < clip_area.y1) {
 801797c:	3301      	adds	r3, #1
 801797e:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 8017982:	b299      	uxth	r1, r3
                cell += col_merge + 1;
 8017984:	fa1a f383 	uxtah	r3, sl, r3
 8017988:	fa1f fa83 	uxth.w	sl, r3
            if(cell_area.y2 < clip_area.y1) {
 801798c:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8017990:	910f      	str	r1, [sp, #60]	; 0x3c
 8017992:	4293      	cmp	r3, r2
 8017994:	f300 8140 	bgt.w	8017c18 <draw_main+0x4ac>
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_LEFT) && cell_area_border.x1 > obj->coords.x1 + bg_left) {
 8017998:	f89d e0e3 	ldrb.w	lr, [sp, #227]	; 0xe3
    dest->x1 = src->x1;
 801799c:	f9bd c060 	ldrsh.w	ip, [sp, #96]	; 0x60
    dest->y1 = src->y1;
 80179a0:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 80179a4:	f01e 0f08 	tst.w	lr, #8
    dest->x2 = src->x2;
 80179a8:	f9bd 0064 	ldrsh.w	r0, [sp, #100]	; 0x64
 80179ac:	f3ce 0944 	ubfx	r9, lr, #1, #5
    dest->x1 = src->x1;
 80179b0:	f8ad c068 	strh.w	ip, [sp, #104]	; 0x68
    dest->y1 = src->y1;
 80179b4:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    dest->x2 = src->x2;
 80179b8:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
    dest->y2 = src->y2;
 80179bc:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
 80179c0:	d00d      	beq.n	80179de <draw_main+0x272>
 80179c2:	f9b4 e014 	ldrsh.w	lr, [r4, #20]
 80179c6:	9908      	ldr	r1, [sp, #32]
 80179c8:	448e      	add	lr, r1
 80179ca:	45f4      	cmp	ip, lr
                cell_area_border.x1 -= rect_dsc_def.border_width / 2;
 80179cc:	bfc1      	itttt	gt
 80179ce:	f9bd e0e0 	ldrshgt.w	lr, [sp, #224]	; 0xe0
 80179d2:	eb0e 7ede 	addgt.w	lr, lr, lr, lsr #31
 80179d6:	ebac 0c6e 	subgt.w	ip, ip, lr, asr #1
 80179da:	f8ad c068 	strhgt.w	ip, [sp, #104]	; 0x68
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_TOP) && cell_area_border.y1 > obj->coords.y1 + bg_top) {
 80179de:	f019 0f02 	tst.w	r9, #2
 80179e2:	d00d      	beq.n	8017a00 <draw_main+0x294>
 80179e4:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 80179e8:	9907      	ldr	r1, [sp, #28]
 80179ea:	448c      	add	ip, r1
 80179ec:	4563      	cmp	r3, ip
                cell_area_border.y1 -= rect_dsc_def.border_width / 2;
 80179ee:	bfc1      	itttt	gt
 80179f0:	f9bd c0e0 	ldrshgt.w	ip, [sp, #224]	; 0xe0
 80179f4:	eb0c 7cdc 	addgt.w	ip, ip, ip, lsr #31
 80179f8:	eba3 036c 	subgt.w	r3, r3, ip, asr #1
 80179fc:	f8ad 306a 	strhgt.w	r3, [sp, #106]	; 0x6a
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_RIGHT) && cell_area_border.x2 < obj->coords.x2 - bg_right - 1) {
 8017a00:	f019 0f08 	tst.w	r9, #8
 8017a04:	d011      	beq.n	8017a2a <draw_main+0x2be>
 8017a06:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8017a0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017a0c:	1a5b      	subs	r3, r3, r1
 8017a0e:	3b01      	subs	r3, #1
 8017a10:	4298      	cmp	r0, r3
 8017a12:	da0a      	bge.n	8017a2a <draw_main+0x2be>
                cell_area_border.x2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 8017a14:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8017a18:	eb03 7cd3 	add.w	ip, r3, r3, lsr #31
 8017a1c:	f003 0301 	and.w	r3, r3, #1
 8017a20:	eb03 036c 	add.w	r3, r3, ip, asr #1
 8017a24:	4403      	add	r3, r0
 8017a26:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 8017a2a:	f019 0f01 	tst.w	r9, #1
 8017a2e:	d011      	beq.n	8017a54 <draw_main+0x2e8>
               cell_area_border.y2 < obj->coords.y2 - bg_bottom - 1) {
 8017a30:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8017a34:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017a36:	1a5b      	subs	r3, r3, r1
 8017a38:	3b01      	subs	r3, #1
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 8017a3a:	429a      	cmp	r2, r3
 8017a3c:	da0a      	bge.n	8017a54 <draw_main+0x2e8>
                cell_area_border.y2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 8017a3e:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8017a42:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 8017a46:	f003 0301 	and.w	r3, r3, #1
 8017a4a:	eb03 0361 	add.w	r3, r3, r1, asr #1
 8017a4e:	4413      	add	r3, r2
 8017a50:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            if(row == table->row_act && col == table->col_act) {
 8017a54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017a56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017a58:	4293      	cmp	r3, r2
 8017a5a:	d146      	bne.n	8017aea <draw_main+0x37e>
 8017a5c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017a5e:	4543      	cmp	r3, r8
 8017a60:	d143      	bne.n	8017aea <draw_main+0x37e>
                if(!(obj->state & LV_STATE_SCROLLED) && (obj->state & LV_STATE_PRESSED)) cell_state |= LV_STATE_PRESSED;
 8017a62:	8c22      	ldrh	r2, [r4, #32]
 8017a64:	f002 0360 	and.w	r3, r2, #96	; 0x60
 8017a68:	f002 0004 	and.w	r0, r2, #4
 8017a6c:	f1a3 0120 	sub.w	r1, r3, #32
 8017a70:	424b      	negs	r3, r1
 8017a72:	414b      	adcs	r3, r1
 8017a74:	f002 0108 	and.w	r1, r2, #8
                if(obj->state & LV_STATE_FOCUSED) cell_state |= LV_STATE_FOCUSED;
 8017a78:	0792      	lsls	r2, r2, #30
                if(!(obj->state & LV_STATE_SCROLLED) && (obj->state & LV_STATE_PRESSED)) cell_state |= LV_STATE_PRESSED;
 8017a7a:	ea4f 1343 	mov.w	r3, r3, lsl #5
                if(obj->state & LV_STATE_FOCUSED) cell_state |= LV_STATE_FOCUSED;
 8017a7e:	d529      	bpl.n	8017ad4 <draw_main+0x368>
 8017a80:	f043 0302 	orr.w	r3, r3, #2
                if(obj->state & LV_STATE_FOCUS_KEY) cell_state |= LV_STATE_FOCUS_KEY;
 8017a84:	bb38      	cbnz	r0, 8017ad6 <draw_main+0x36a>
                if(obj->state & LV_STATE_EDITED) cell_state |= LV_STATE_EDITED;
 8017a86:	bb51      	cbnz	r1, 8017ade <draw_main+0x372>
                obj->state = cell_state;
 8017a88:	8423      	strh	r3, [r4, #32]
                lv_draw_rect_dsc_init(&rect_dsc_act);
 8017a8a:	a83e      	add	r0, sp, #248	; 0xf8
                obj->skip_trans = 1;
 8017a8c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8017a90:	f043 0304 	orr.w	r3, r3, #4
 8017a94:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
                lv_draw_rect_dsc_init(&rect_dsc_act);
 8017a98:	f7f0 ff50 	bl	800893c <lv_draw_rect_dsc_init>
                lv_draw_label_dsc_init(&label_dsc_act);
 8017a9c:	a828      	add	r0, sp, #160	; 0xa0
 8017a9e:	f7f0 f903 	bl	8007ca8 <lv_draw_label_dsc_init>
                lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_act);
 8017aa2:	aa3e      	add	r2, sp, #248	; 0xf8
 8017aa4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8017aa8:	4620      	mov	r0, r4
 8017aaa:	f004 f9f1 	bl	801be90 <lv_obj_init_draw_rect_dsc>
                lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_act);
 8017aae:	aa28      	add	r2, sp, #160	; 0xa0
 8017ab0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8017ab4:	4620      	mov	r0, r4
 8017ab6:	f004 fb3a 	bl	801c12e <lv_obj_init_draw_label_dsc>
                obj->state = state_ori;
 8017aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017abc:	8423      	strh	r3, [r4, #32]
                obj->skip_trans = 0;
 8017abe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8017ac2:	f36f 0382 	bfc	r3, #2, #1
 8017ac6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8017aca:	e018      	b.n	8017afe <draw_main+0x392>
 8017acc:	fffb0000 	.word	0xfffb0000
 8017ad0:	08029a84 	.word	0x08029a84
                if(obj->state & LV_STATE_FOCUS_KEY) cell_state |= LV_STATE_FOCUS_KEY;
 8017ad4:	b110      	cbz	r0, 8017adc <draw_main+0x370>
 8017ad6:	f043 0304 	orr.w	r3, r3, #4
 8017ada:	e7d4      	b.n	8017a86 <draw_main+0x31a>
                if(obj->state & LV_STATE_EDITED) cell_state |= LV_STATE_EDITED;
 8017adc:	b111      	cbz	r1, 8017ae4 <draw_main+0x378>
 8017ade:	f043 0308 	orr.w	r3, r3, #8
            if(cell_state == LV_STATE_DEFAULT) {
 8017ae2:	e7d1      	b.n	8017a88 <draw_main+0x31c>
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	f040 80a1 	bne.w	8017c2c <draw_main+0x4c0>
 8017aea:	2238      	movs	r2, #56	; 0x38
 8017aec:	a930      	add	r1, sp, #192	; 0xc0
 8017aee:	a83e      	add	r0, sp, #248	; 0xf8
 8017af0:	f002 fe0b 	bl	801a70a <memcpy>
 8017af4:	2220      	movs	r2, #32
 8017af6:	a920      	add	r1, sp, #128	; 0x80
 8017af8:	a828      	add	r0, sp, #160	; 0xa0
 8017afa:	f002 fe06 	bl	801a70a <memcpy>
            part_draw_dsc.id = row * table->col_cnt + col;
 8017afe:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
            part_draw_dsc.draw_area = &cell_area_border;
 8017b00:	f10d 0968 	add.w	r9, sp, #104	; 0x68
            part_draw_dsc.id = row * table->col_cnt + col;
 8017b04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017b06:	211a      	movs	r1, #26
 8017b08:	4620      	mov	r0, r4
            part_draw_dsc.draw_area = &cell_area_border;
 8017b0a:	f8cd 913c 	str.w	r9, [sp, #316]	; 0x13c
            part_draw_dsc.id = row * table->col_cnt + col;
 8017b0e:	fb02 8303 	mla	r3, r2, r3, r8
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017b12:	aa4c      	add	r2, sp, #304	; 0x130
            part_draw_dsc.id = row * table->col_cnt + col;
 8017b14:	935a      	str	r3, [sp, #360]	; 0x168
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017b16:	f7ec fde1 	bl	80046dc <lv_event_send>
            lv_draw_rect(draw_ctx, &rect_dsc_act, &cell_area_border);
 8017b1a:	464a      	mov	r2, r9
 8017b1c:	a93e      	add	r1, sp, #248	; 0xf8
 8017b1e:	4628      	mov	r0, r5
 8017b20:	f007 fc41 	bl	801f3a6 <lv_draw_rect>
            if(table->cell_data[cell]) {
 8017b24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017b26:	9a04      	ldr	r2, [sp, #16]
 8017b28:	589b      	ldr	r3, [r3, r2]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d06f      	beq.n	8017c0e <draw_main+0x4a2>
                const lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 8017b2e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8017b32:	4620      	mov	r0, r4
 8017b34:	f00f fd14 	bl	8027560 <lv_obj_get_style_pad_left>
                const lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 8017b38:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
                const lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 8017b3c:	4681      	mov	r9, r0
                const lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 8017b3e:	4620      	mov	r0, r4
 8017b40:	f00f fd14 	bl	802756c <lv_obj_get_style_pad_right>
                const lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 8017b44:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
                const lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 8017b48:	9013      	str	r0, [sp, #76]	; 0x4c
                const lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 8017b4a:	4620      	mov	r0, r4
 8017b4c:	f00f fd14 	bl	8027578 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017b50:	2211      	movs	r2, #17
 8017b52:	4683      	mov	fp, r0
 8017b54:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8017b58:	4620      	mov	r0, r4
 8017b5a:	f005 ff91 	bl	801da80 <lv_obj_get_style_prop>
                txt_area.x1 = cell_area.x1 + cell_left;
 8017b5e:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
                txt_area.x2 = cell_area.x2 - cell_right;
 8017b62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
                txt_area.x1 = cell_area.x1 + cell_left;
 8017b64:	4491      	add	r9, r2
                txt_area.x2 = cell_area.x2 - cell_right;
 8017b66:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 8017b6a:	9904      	ldr	r1, [sp, #16]
                txt_area.x2 = cell_area.x2 - cell_right;
 8017b6c:	1ad3      	subs	r3, r2, r3
                txt_area.y1 = cell_area.y1 + cell_top;
 8017b6e:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
                txt_area.x1 = cell_area.x1 + cell_left;
 8017b72:	fa1f f989 	uxth.w	r9, r9
                txt_area.x2 = cell_area.x2 - cell_right;
 8017b76:	b29b      	uxth	r3, r3
                txt_area.y1 = cell_area.y1 + cell_top;
 8017b78:	4493      	add	fp, r2
                txt_area.y2 = cell_area.y2 - cell_bottom;
 8017b7a:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
                txt_area.x2 = cell_area.x2 - cell_right;
 8017b7e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8017b82:	3301      	adds	r3, #1
                txt_area.y2 = cell_area.y2 - cell_bottom;
 8017b84:	1a12      	subs	r2, r2, r0
                txt_area.y1 = cell_area.y1 + cell_top;
 8017b86:	f8ad b072 	strh.w	fp, [sp, #114]	; 0x72
 8017b8a:	eba3 0309 	sub.w	r3, r3, r9
                bool crop = ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP ? true : false;
 8017b8e:	f3c6 0b40 	ubfx	fp, r6, #1, #1
                txt_area.y2 = cell_area.y2 - cell_bottom;
 8017b92:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 8017b96:	f006 0602 	and.w	r6, r6, #2
 8017b9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017b9c:	b21b      	sxth	r3, r3
                txt_area.x1 = cell_area.x1 + cell_left;
 8017b9e:	f8ad 9070 	strh.w	r9, [sp, #112]	; 0x70
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 8017ba2:	a815      	add	r0, sp, #84	; 0x54
 8017ba4:	5851      	ldr	r1, [r2, r1]
 8017ba6:	9301      	str	r3, [sp, #4]
 8017ba8:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 8017bac:	3101      	adds	r1, #1
 8017bae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017bb0:	9300      	str	r3, [sp, #0]
 8017bb2:	9602      	str	r6, [sp, #8]
 8017bb4:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 8017bb8:	f00d fe3e 	bl	8025838 <lv_txt_get_size>
                if(!crop) {
 8017bbc:	f1bb 0f00 	cmp.w	fp, #0
 8017bc0:	d110      	bne.n	8017be4 <draw_main+0x478>
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 8017bc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017bc4:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8017bc8:	4413      	add	r3, r2
 8017bca:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 8017bce:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8017bd2:	b29b      	uxth	r3, r3
 8017bd4:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8017bd8:	1a99      	subs	r1, r3, r2
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 8017bda:	4413      	add	r3, r2
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 8017bdc:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 8017be0:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                label_mask_ok = _lv_area_intersect(&label_clip_area, &clip_area, &cell_area);
 8017be4:	ae1e      	add	r6, sp, #120	; 0x78
 8017be6:	aa18      	add	r2, sp, #96	; 0x60
 8017be8:	a916      	add	r1, sp, #88	; 0x58
 8017bea:	4630      	mov	r0, r6
 8017bec:	f00c fb41 	bl	8024272 <_lv_area_intersect>
                if(label_mask_ok) {
 8017bf0:	b168      	cbz	r0, 8017c0e <draw_main+0x4a2>
                    draw_ctx->clip_area = &label_clip_area;
 8017bf2:	60ae      	str	r6, [r5, #8]
                    lv_draw_label(draw_ctx, &label_dsc_act, &txt_area, table->cell_data[cell] + 1, NULL);
 8017bf4:	a928      	add	r1, sp, #160	; 0xa0
 8017bf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017bf8:	4628      	mov	r0, r5
 8017bfa:	9a04      	ldr	r2, [sp, #16]
 8017bfc:	589b      	ldr	r3, [r3, r2]
 8017bfe:	2200      	movs	r2, #0
 8017c00:	3301      	adds	r3, #1
 8017c02:	9200      	str	r2, [sp, #0]
 8017c04:	aa1c      	add	r2, sp, #112	; 0x70
 8017c06:	f7f0 f867 	bl	8007cd8 <lv_draw_label>
                    draw_ctx->clip_area = &clip_area;
 8017c0a:	ab16      	add	r3, sp, #88	; 0x58
 8017c0c:	60ab      	str	r3, [r5, #8]
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8017c0e:	aa4c      	add	r2, sp, #304	; 0x130
 8017c10:	211b      	movs	r1, #27
 8017c12:	4620      	mov	r0, r4
 8017c14:	f7ec fd62 	bl	80046dc <lv_event_send>
        for(col = 0; col < table->col_cnt; col++) {
 8017c18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c1a:	4443      	add	r3, r8
 8017c1c:	fa1f f883 	uxth.w	r8, r3
 8017c20:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8017c22:	4542      	cmp	r2, r8
 8017c24:	f63f ae60 	bhi.w	80178e8 <draw_main+0x17c>
    for(row = 0; row < table->row_cnt; row++) {
 8017c28:	3701      	adds	r7, #1
 8017c2a:	e620      	b.n	801786e <draw_main+0x102>
 8017c2c:	2320      	movs	r3, #32
 8017c2e:	e72b      	b.n	8017a88 <draw_main+0x31c>

08017c30 <lv_table_event>:
{
 8017c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8017c32:	48a6      	ldr	r0, [pc, #664]	; (8017ecc <lv_table_event+0x29c>)
{
 8017c34:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8017c36:	f003 fac6 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8017c3a:	2801      	cmp	r0, #1
 8017c3c:	d135      	bne.n	8017caa <lv_table_event+0x7a>
    lv_event_code_t code = lv_event_get_code(e);
 8017c3e:	4630      	mov	r0, r6
 8017c40:	f003 fadb 	bl	801b1fa <lv_event_get_code>
 8017c44:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8017c46:	4630      	mov	r0, r6
 8017c48:	f003 fad3 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 8017c4c:	2d2a      	cmp	r5, #42	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 8017c4e:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8017c50:	d104      	bne.n	8017c5c <lv_table_event+0x2c>
}
 8017c52:	b003      	add	sp, #12
 8017c54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        refr_size_form_row(obj, 0);
 8017c58:	f00f bdf3 	b.w	8027842 <refr_size_form_row.constprop.0>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8017c5c:	2d0e      	cmp	r5, #14
 8017c5e:	d80c      	bhi.n	8017c7a <lv_table_event+0x4a>
 8017c60:	b31d      	cbz	r5, 8017caa <lv_table_event+0x7a>
 8017c62:	3d01      	subs	r5, #1
 8017c64:	2d0d      	cmp	r5, #13
 8017c66:	d820      	bhi.n	8017caa <lv_table_event+0x7a>
 8017c68:	e8df f005 	tbb	[pc, r5]
 8017c6c:	1f1f2f2f 	.word	0x1f1f2f2f
 8017c70:	961f1f1f 	.word	0x961f1f1f
 8017c74:	1f1f1f1f 	.word	0x1f1f1f1f
 8017c78:	86bc      	.short	0x86bc
 8017c7a:	2d15      	cmp	r5, #21
 8017c7c:	f000 8134 	beq.w	8017ee8 <lv_table_event+0x2b8>
 8017c80:	2d2c      	cmp	r5, #44	; 0x2c
 8017c82:	d112      	bne.n	8017caa <lv_table_event+0x7a>
        lv_point_t * p = lv_event_get_param(e);
 8017c84:	4630      	mov	r0, r6
 8017c86:	f003 fabc 	bl	801b202 <lv_event_get_param>
        lv_coord_t w = 0;
 8017c8a:	2300      	movs	r3, #0
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 8017c8c:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
 8017c8e:	4619      	mov	r1, r3
 8017c90:	42a9      	cmp	r1, r5
 8017c92:	b29a      	uxth	r2, r3
 8017c94:	d30b      	bcc.n	8017cae <lv_table_event+0x7e>
        lv_coord_t h = 0;
 8017c96:	2300      	movs	r3, #0
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 8017c98:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 8017c9a:	4619      	mov	r1, r3
 8017c9c:	42a9      	cmp	r1, r5
 8017c9e:	b29b      	uxth	r3, r3
 8017ca0:	d30c      	bcc.n	8017cbc <lv_table_event+0x8c>
        p->x = w - 1;
 8017ca2:	3a01      	subs	r2, #1
        p->y = h - 1;
 8017ca4:	3b01      	subs	r3, #1
        p->x = w - 1;
 8017ca6:	8002      	strh	r2, [r0, #0]
        p->y = h - 1;
 8017ca8:	8043      	strh	r3, [r0, #2]
}
 8017caa:	b003      	add	sp, #12
 8017cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 8017cae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017cb0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8017cb4:	3101      	adds	r1, #1
 8017cb6:	4413      	add	r3, r2
 8017cb8:	b21b      	sxth	r3, r3
 8017cba:	e7e9      	b.n	8017c90 <lv_table_event+0x60>
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 8017cbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017cbe:	f836 6011 	ldrh.w	r6, [r6, r1, lsl #1]
 8017cc2:	3101      	adds	r1, #1
 8017cc4:	4433      	add	r3, r6
 8017cc6:	b21b      	sxth	r3, r3
 8017cc8:	e7e8      	b.n	8017c9c <lv_table_event+0x6c>

static lv_res_t get_pressed_cell(lv_obj_t * obj, uint16_t * row, uint16_t * col)
{
    lv_table_t * table = (lv_table_t *)obj;

    lv_indev_type_t type = lv_indev_get_type(lv_indev_get_act());
 8017cca:	f7ec fd6d 	bl	80047a8 <lv_indev_get_act>
 8017cce:	f003 fc54 	bl	801b57a <lv_indev_get_type>
    if(type != LV_INDEV_TYPE_POINTER && type != LV_INDEV_TYPE_BUTTON) {
 8017cd2:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8017cd6:	2801      	cmp	r0, #1
 8017cd8:	d1e7      	bne.n	8017caa <lv_table_event+0x7a>
        if(row) *row = LV_TABLE_CELL_NONE;
        return LV_RES_INV;
    }

    lv_point_t p;
    lv_indev_get_point(lv_indev_get_act(), &p);
 8017cda:	f7ec fd65 	bl	80047a8 <lv_indev_get_act>
 8017cde:	a901      	add	r1, sp, #4
 8017ce0:	f003 fc5c 	bl	801b59c <lv_indev_get_point>

    lv_coord_t tmp;
    if(col) {
        lv_coord_t x = p.x + lv_obj_get_scroll_x(obj);
 8017ce4:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8017ce8:	4620      	mov	r0, r4
 8017cea:	f005 f936 	bl	801cf5a <lv_obj_get_scroll_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8017cee:	2216      	movs	r2, #22
 8017cf0:	4405      	add	r5, r0
 8017cf2:	2100      	movs	r1, #0
 8017cf4:	4620      	mov	r0, r4
 8017cf6:	f005 fec3 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8017cfa:	b2c0      	uxtb	r0, r0
 8017cfc:	b2ad      	uxth	r5, r5

        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8017cfe:	2801      	cmp	r0, #1
 8017d00:	d140      	bne.n	8017d84 <lv_table_event+0x154>
            x = obj->coords.x2 - lv_obj_get_style_pad_right(obj, LV_PART_MAIN) - x;
 8017d02:	8b26      	ldrh	r6, [r4, #24]
 8017d04:	2100      	movs	r1, #0
 8017d06:	4620      	mov	r0, r4
 8017d08:	1b76      	subs	r6, r6, r5
 8017d0a:	f00f fc2f 	bl	802756c <lv_obj_get_style_pad_right>
 8017d0e:	1a36      	subs	r6, r6, r0
 8017d10:	b230      	sxth	r0, r6
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
        }

        *col = 0;
        tmp = 0;
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 8017d12:	2300      	movs	r3, #0
 8017d14:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
        tmp = 0;
 8017d16:	461a      	mov	r2, r3
 8017d18:	b29e      	uxth	r6, r3
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 8017d1a:	42b1      	cmp	r1, r6
 8017d1c:	d907      	bls.n	8017d2e <lv_table_event+0xfe>
            tmp += table->col_w[*col];
 8017d1e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017d20:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
            if(x < tmp) break;
 8017d24:	3301      	adds	r3, #1
            tmp += table->col_w[*col];
 8017d26:	442a      	add	r2, r5
 8017d28:	b212      	sxth	r2, r2
            if(x < tmp) break;
 8017d2a:	4282      	cmp	r2, r0
 8017d2c:	ddf4      	ble.n	8017d18 <lv_table_event+0xe8>
        }
    }

    if(row) {
        lv_coord_t y = p.y + lv_obj_get_scroll_y(obj);;
 8017d2e:	4620      	mov	r0, r4
 8017d30:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8017d34:	f005 f917 	bl	801cf66 <lv_obj_get_scroll_y>
        y -= obj->coords.y1;
 8017d38:	8ae3      	ldrh	r3, [r4, #22]
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8017d3a:	2100      	movs	r1, #0
        y -= obj->coords.y1;
 8017d3c:	1aed      	subs	r5, r5, r3
 8017d3e:	4405      	add	r5, r0
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8017d40:	4620      	mov	r0, r4
 8017d42:	f00f fc19 	bl	8027578 <lv_obj_get_style_pad_top>

        *row = 0;
        tmp = 0;

        for(*row = 0; *row < table->row_cnt; (*row)++) {
 8017d46:	2300      	movs	r3, #0
        y -= obj->coords.y1;
 8017d48:	b2ad      	uxth	r5, r5
        tmp = 0;
 8017d4a:	461a      	mov	r2, r3
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8017d4c:	1a2d      	subs	r5, r5, r0
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 8017d4e:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8017d50:	b22d      	sxth	r5, r5
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 8017d52:	b299      	uxth	r1, r3
 8017d54:	4288      	cmp	r0, r1
 8017d56:	d907      	bls.n	8017d68 <lv_table_event+0x138>
            tmp += table->row_h[*row];
 8017d58:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8017d5a:	f837 7013 	ldrh.w	r7, [r7, r3, lsl #1]
            if(y < tmp) break;
 8017d5e:	3301      	adds	r3, #1
            tmp += table->row_h[*row];
 8017d60:	443a      	add	r2, r7
 8017d62:	b212      	sxth	r2, r2
            if(y < tmp) break;
 8017d64:	4295      	cmp	r5, r2
 8017d66:	daf4      	bge.n	8017d52 <lv_table_event+0x122>
        if(pr_res == LV_RES_OK && (table->col_act != col || table->row_act != row)) {
 8017d68:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017d6a:	42b3      	cmp	r3, r6
 8017d6c:	d102      	bne.n	8017d74 <lv_table_event+0x144>
 8017d6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017d70:	428b      	cmp	r3, r1
 8017d72:	d09a      	beq.n	8017caa <lv_table_event+0x7a>
            table->col_act = col;
 8017d74:	86a6      	strh	r6, [r4, #52]	; 0x34
            table->row_act = row;
 8017d76:	86e1      	strh	r1, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 8017d78:	4620      	mov	r0, r4
}
 8017d7a:	b003      	add	sp, #12
 8017d7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_invalidate(obj);
 8017d80:	f004 bf58 	b.w	801cc34 <lv_obj_invalidate>
            x -= obj->coords.x1;
 8017d84:	8aa3      	ldrh	r3, [r4, #20]
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8017d86:	2100      	movs	r1, #0
 8017d88:	4620      	mov	r0, r4
            x -= obj->coords.x1;
 8017d8a:	1aed      	subs	r5, r5, r3
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8017d8c:	f00f fbe8 	bl	8027560 <lv_obj_get_style_pad_left>
            x -= obj->coords.x1;
 8017d90:	b2ad      	uxth	r5, r5
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8017d92:	1a28      	subs	r0, r5, r0
 8017d94:	b200      	sxth	r0, r0
 8017d96:	e7bc      	b.n	8017d12 <lv_table_event+0xe2>
        lv_obj_invalidate(obj);
 8017d98:	f004 ff4c 	bl	801cc34 <lv_obj_invalidate>
        lv_indev_t * indev = lv_indev_get_act();
 8017d9c:	f7ec fd04 	bl	80047a8 <lv_indev_get_act>
        lv_obj_t * scroll_obj = lv_indev_get_scroll_obj(indev);
 8017da0:	f003 fc20 	bl	801b5e4 <lv_indev_get_scroll_obj>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 8017da4:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8017da6:	f64f 73ff 	movw	r3, #65535	; 0xffff
        lv_obj_t * scroll_obj = lv_indev_get_scroll_obj(indev);
 8017daa:	4602      	mov	r2, r0
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 8017dac:	4299      	cmp	r1, r3
 8017dae:	d10c      	bne.n	8017dca <lv_table_event+0x19a>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8017db0:	f7ec fcfa 	bl	80047a8 <lv_indev_get_act>
 8017db4:	f003 fbe1 	bl	801b57a <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 8017db8:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8017dbc:	2801      	cmp	r0, #1
 8017dbe:	f47f af74 	bne.w	8017caa <lv_table_event+0x7a>
            table->col_act = LV_TABLE_CELL_NONE;
 8017dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8017dc6:	6363      	str	r3, [r4, #52]	; 0x34
 8017dc8:	e76f      	b.n	8017caa <lv_table_event+0x7a>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 8017dca:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8017dcc:	4299      	cmp	r1, r3
 8017dce:	d0ef      	beq.n	8017db0 <lv_table_event+0x180>
 8017dd0:	2800      	cmp	r0, #0
 8017dd2:	d1ed      	bne.n	8017db0 <lv_table_event+0x180>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8017dd4:	211c      	movs	r1, #28
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	f7ec fc80 	bl	80046dc <lv_event_send>
            if(res != LV_RES_OK) return;
 8017ddc:	2801      	cmp	r0, #1
 8017dde:	f47f af64 	bne.w	8017caa <lv_table_event+0x7a>
 8017de2:	e7e5      	b.n	8017db0 <lv_table_event+0x180>
        int32_t c = *((int32_t *)lv_event_get_param(e));
 8017de4:	4630      	mov	r0, r6
 8017de6:	f003 fa0c 	bl	801b202 <lv_event_get_param>
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 8017dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
        int32_t c = *((int32_t *)lv_event_get_param(e));
 8017dee:	6806      	ldr	r6, [r0, #0]
        int32_t col = table->col_act;
 8017df0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
        int32_t row = table->row_act;
 8017df2:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 8017df4:	4298      	cmp	r0, r3
 8017df6:	d001      	beq.n	8017dfc <lv_table_event+0x1cc>
 8017df8:	4299      	cmp	r1, r3
 8017dfa:	d105      	bne.n	8017e08 <lv_table_event+0x1d8>
            table->col_act = 0;
 8017dfc:	2300      	movs	r3, #0
            scroll_to_selected_cell(obj);
 8017dfe:	4620      	mov	r0, r4
            table->col_act = 0;
 8017e00:	6363      	str	r3, [r4, #52]	; 0x34
            scroll_to_selected_cell(obj);
 8017e02:	f00f fce4 	bl	80277ce <scroll_to_selected_cell>
 8017e06:	e7b7      	b.n	8017d78 <lv_table_event+0x148>
        if(col >= table->col_cnt) col = 0;
 8017e08:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
 8017e0a:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
 8017e0c:	42a8      	cmp	r0, r5
 8017e0e:	d306      	bcc.n	8017e1e <lv_table_event+0x1ee>
        if(row >= table->row_cnt) row = 0;
 8017e10:	428f      	cmp	r7, r1
 8017e12:	d82f      	bhi.n	8017e74 <lv_table_event+0x244>
        if(c == LV_KEY_LEFT) col--;
 8017e14:	2e14      	cmp	r6, #20
 8017e16:	d060      	beq.n	8017eda <lv_table_event+0x2aa>
        if(col >= table->col_cnt) col = 0;
 8017e18:	2200      	movs	r2, #0
        if(row >= table->row_cnt) row = 0;
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	e02e      	b.n	8017e7c <lv_table_event+0x24c>
 8017e1e:	42b9      	cmp	r1, r7
 8017e20:	d337      	bcc.n	8017e92 <lv_table_event+0x262>
        if(c == LV_KEY_LEFT) col--;
 8017e22:	2e14      	cmp	r6, #20
 8017e24:	d143      	bne.n	8017eae <lv_table_event+0x27e>
 8017e26:	1e42      	subs	r2, r0, #1
        if(col >= table->col_cnt) {
 8017e28:	42aa      	cmp	r2, r5
 8017e2a:	db04      	blt.n	8017e36 <lv_table_event+0x206>
            if(row < table->row_cnt - 1) {
 8017e2c:	2f01      	cmp	r7, #1
 8017e2e:	dc58      	bgt.n	8017ee2 <lv_table_event+0x2b2>
        if(row >= table->row_cnt) row = 0;
 8017e30:	2300      	movs	r3, #0
                col = table->col_cnt - 1;
 8017e32:	1e6a      	subs	r2, r5, #1
 8017e34:	e003      	b.n	8017e3e <lv_table_event+0x20e>
        else if(col < 0) {
 8017e36:	1c55      	adds	r5, r2, #1
 8017e38:	f04f 0300 	mov.w	r3, #0
 8017e3c:	d027      	beq.n	8017e8e <lv_table_event+0x25e>
        if(row >= table->row_cnt) {
 8017e3e:	42bb      	cmp	r3, r7
            row = table->row_cnt - 1;
 8017e40:	bfac      	ite	ge
 8017e42:	f107 33ff 	addge.w	r3, r7, #4294967295
        else if(row < 0) {
 8017e46:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
        if(table->col_act != col || table->row_act != row) {
 8017e4a:	4290      	cmp	r0, r2
 8017e4c:	d102      	bne.n	8017e54 <lv_table_event+0x224>
 8017e4e:	4299      	cmp	r1, r3
 8017e50:	f43f af2b 	beq.w	8017caa <lv_table_event+0x7a>
            table->col_act = col;
 8017e54:	86a2      	strh	r2, [r4, #52]	; 0x34
            lv_obj_invalidate(obj);
 8017e56:	4620      	mov	r0, r4
            table->row_act = row;
 8017e58:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 8017e5a:	f004 feeb 	bl	801cc34 <lv_obj_invalidate>
            scroll_to_selected_cell(obj);
 8017e5e:	4620      	mov	r0, r4
 8017e60:	f00f fcb5 	bl	80277ce <scroll_to_selected_cell>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8017e64:	2200      	movs	r2, #0
 8017e66:	211c      	movs	r1, #28
 8017e68:	4620      	mov	r0, r4
}
 8017e6a:	b003      	add	sp, #12
 8017e6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8017e70:	f7ec bc34 	b.w	80046dc <lv_event_send>
        if(c == LV_KEY_LEFT) col--;
 8017e74:	2e14      	cmp	r6, #20
 8017e76:	d013      	beq.n	8017ea0 <lv_table_event+0x270>
 8017e78:	460b      	mov	r3, r1
        if(col >= table->col_cnt) col = 0;
 8017e7a:	2200      	movs	r2, #0
        else if(c == LV_KEY_RIGHT) col++;
 8017e7c:	2e13      	cmp	r6, #19
 8017e7e:	d11b      	bne.n	8017eb8 <lv_table_event+0x288>
 8017e80:	3201      	adds	r2, #1
        if(col >= table->col_cnt) {
 8017e82:	4295      	cmp	r5, r2
 8017e84:	dcdb      	bgt.n	8017e3e <lv_table_event+0x20e>
            if(row < table->row_cnt - 1) {
 8017e86:	1e7a      	subs	r2, r7, #1
 8017e88:	429a      	cmp	r2, r3
 8017e8a:	ddd2      	ble.n	8017e32 <lv_table_event+0x202>
                row++;
 8017e8c:	3301      	adds	r3, #1
                col = 0;
 8017e8e:	2200      	movs	r2, #0
 8017e90:	e7d5      	b.n	8017e3e <lv_table_event+0x20e>
        if(c == LV_KEY_LEFT) col--;
 8017e92:	2e14      	cmp	r6, #20
 8017e94:	d10d      	bne.n	8017eb2 <lv_table_event+0x282>
 8017e96:	1e42      	subs	r2, r0, #1
        if(col >= table->col_cnt) {
 8017e98:	4295      	cmp	r5, r2
 8017e9a:	dd19      	ble.n	8017ed0 <lv_table_event+0x2a0>
        else if(col < 0) {
 8017e9c:	1c53      	adds	r3, r2, #1
 8017e9e:	d11e      	bne.n	8017ede <lv_table_event+0x2ae>
            if(row != 0) {
 8017ea0:	b9c1      	cbnz	r1, 8017ed4 <lv_table_event+0x2a4>
        if(table->col_act != col || table->row_act != row) {
 8017ea2:	2800      	cmp	r0, #0
 8017ea4:	f43f af01 	beq.w	8017caa <lv_table_event+0x7a>
        else if(row < 0) {
 8017ea8:	460b      	mov	r3, r1
                col = 0;
 8017eaa:	460a      	mov	r2, r1
 8017eac:	e7d2      	b.n	8017e54 <lv_table_event+0x224>
        if(c == LV_KEY_LEFT) col--;
 8017eae:	4602      	mov	r2, r0
 8017eb0:	e7b3      	b.n	8017e1a <lv_table_event+0x1ea>
 8017eb2:	4602      	mov	r2, r0
 8017eb4:	460b      	mov	r3, r1
 8017eb6:	e7e1      	b.n	8017e7c <lv_table_event+0x24c>
        else if(c == LV_KEY_UP) row--;
 8017eb8:	2e11      	cmp	r6, #17
 8017eba:	d101      	bne.n	8017ec0 <lv_table_event+0x290>
 8017ebc:	3b01      	subs	r3, #1
 8017ebe:	e7e0      	b.n	8017e82 <lv_table_event+0x252>
        else if(c == LV_KEY_DOWN) row++;
 8017ec0:	2e12      	cmp	r6, #18
 8017ec2:	f47f aef2 	bne.w	8017caa <lv_table_event+0x7a>
 8017ec6:	3301      	adds	r3, #1
        if(col >= table->col_cnt) {
 8017ec8:	e7db      	b.n	8017e82 <lv_table_event+0x252>
 8017eca:	bf00      	nop
 8017ecc:	08029a84 	.word	0x08029a84
 8017ed0:	460b      	mov	r3, r1
 8017ed2:	e7d8      	b.n	8017e86 <lv_table_event+0x256>
                col = table->col_cnt - 1;
 8017ed4:	1e6a      	subs	r2, r5, #1
                row--;
 8017ed6:	1e4b      	subs	r3, r1, #1
 8017ed8:	e7b1      	b.n	8017e3e <lv_table_event+0x20e>
        if(c == LV_KEY_LEFT) col--;
 8017eda:	2300      	movs	r3, #0
 8017edc:	e7d7      	b.n	8017e8e <lv_table_event+0x25e>
 8017ede:	460b      	mov	r3, r1
 8017ee0:	e7ad      	b.n	8017e3e <lv_table_event+0x20e>
        else if(row < 0) {
 8017ee2:	2301      	movs	r3, #1
                col = 0;
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	e7b5      	b.n	8017e54 <lv_table_event+0x224>
        draw_main(e);
 8017ee8:	4630      	mov	r0, r6
}
 8017eea:	b003      	add	sp, #12
 8017eec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        draw_main(e);
 8017ef0:	f7ff bc3c 	b.w	801776c <draw_main>

08017ef4 <start_cursor_blink>:

    return false; /*The character wasn't in the list*/
}

static void start_cursor_blink(lv_obj_t * obj)
{
 8017ef4:	b530      	push	{r4, r5, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 8017ef6:	2264      	movs	r2, #100	; 0x64
 8017ef8:	b093      	sub	sp, #76	; 0x4c
 8017efa:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8017efe:	4604      	mov	r4, r0
 8017f00:	f005 fdbe 	bl	801da80 <lv_obj_get_style_prop>
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    uint32_t blink_time = lv_obj_get_style_anim_time(obj, LV_PART_CURSOR);
    if(blink_time == 0) {
 8017f04:	4605      	mov	r5, r0
 8017f06:	b958      	cbnz	r0, 8017f20 <start_cursor_blink+0x2c>
        lv_anim_del(obj, cursor_blink_anim_cb);
 8017f08:	4911      	ldr	r1, [pc, #68]	; (8017f50 <start_cursor_blink+0x5c>)
 8017f0a:	4620      	mov	r0, r4
 8017f0c:	f7fa fa14 	bl	8012338 <lv_anim_del>
        ta->cursor.show = 1;
 8017f10:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017f14:	f043 0301 	orr.w	r3, r3, #1
 8017f18:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        lv_anim_set_values(&a, 1, 0);
        lv_anim_set_path_cb(&a, lv_anim_path_step);
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
        lv_anim_start(&a);
    }
}
 8017f1c:	b013      	add	sp, #76	; 0x4c
 8017f1e:	bd30      	pop	{r4, r5, pc}
        lv_anim_init(&a);
 8017f20:	a801      	add	r0, sp, #4
 8017f22:	f7fa f9ed 	bl	8012300 <lv_anim_init>
    a->exec_cb = exec_cb;
 8017f26:	4b0a      	ldr	r3, [pc, #40]	; (8017f50 <start_cursor_blink+0x5c>)
        lv_anim_start(&a);
 8017f28:	a801      	add	r0, sp, #4
    a->var = var;
 8017f2a:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 8017f2c:	9302      	str	r3, [sp, #8]
    a->start_value = start;
 8017f2e:	2301      	movs	r3, #1
    a->time = duration;
 8017f30:	950c      	str	r5, [sp, #48]	; 0x30
    a->playback_time = time;
 8017f32:	950f      	str	r5, [sp, #60]	; 0x3c
    a->current_value = start;
 8017f34:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a->end_value = end;
 8017f38:	2300      	movs	r3, #0
 8017f3a:	930b      	str	r3, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 8017f3c:	4b05      	ldr	r3, [pc, #20]	; (8017f54 <start_cursor_blink+0x60>)
 8017f3e:	9308      	str	r3, [sp, #32]
    a->repeat_cnt = cnt;
 8017f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f44:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8017f48:	f7fa fa26 	bl	8012398 <lv_anim_start>
}
 8017f4c:	e7e6      	b.n	8017f1c <start_cursor_blink+0x28>
 8017f4e:	bf00      	nop
 8017f50:	08027941 	.word	0x08027941
 8017f54:	080241b3 	.word	0x080241b3

08017f58 <refr_cursor_area>:

static void refr_cursor_area(lv_obj_t * obj)
{
 8017f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f5c:	4604      	mov	r4, r0
 8017f5e:	b087      	sub	sp, #28
    lv_textarea_t * ta = (lv_textarea_t *)obj;

    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8017f60:	f00f fd18 	bl	8027994 <lv_obj_get_style_text_font.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8017f64:	2259      	movs	r2, #89	; 0x59
 8017f66:	2100      	movs	r1, #0
 8017f68:	4681      	mov	r9, r0
 8017f6a:	4620      	mov	r0, r4

    uint32_t cur_pos = lv_textarea_get_cursor_pos(obj);
    const char * txt = lv_label_get_text(ta->label);

    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8017f6c:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 801815c <refr_cursor_area+0x204>
 8017f70:	f005 fd86 	bl	801da80 <lv_obj_get_style_prop>
 8017f74:	9000      	str	r0, [sp, #0]
    const char * txt = lv_label_get_text(ta->label);
 8017f76:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return ta->cursor.pos;
 8017f78:	6c65      	ldr	r5, [r4, #68]	; 0x44
    const char * txt = lv_label_get_text(ta->label);
 8017f7a:	f00f f800 	bl	8026f7e <lv_label_get_text>
    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 8017f7e:	4b78      	ldr	r3, [pc, #480]	; (8018160 <refr_cursor_area+0x208>)
    const char * txt = lv_label_get_text(ta->label);
 8017f80:	4683      	mov	fp, r0
    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 8017f82:	4629      	mov	r1, r5
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	4798      	blx	r3
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8017f88:	eb0b 0300 	add.w	r3, fp, r0
    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 8017f8c:	4607      	mov	r7, r0
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8017f8e:	2100      	movs	r1, #0
 8017f90:	9301      	str	r3, [sp, #4]
 8017f92:	4458      	add	r0, fp
 8017f94:	f8da 3000 	ldr.w	r3, [sl]
 8017f98:	4798      	blx	r3
 8017f9a:	280d      	cmp	r0, #13
 8017f9c:	4680      	mov	r8, r0
 8017f9e:	f9b9 3008 	ldrsh.w	r3, [r9, #8]

    /* Letter height and width */
    const lv_coord_t letter_h = lv_font_get_line_height(font);
    /*Set letter_w (set not 0 on non printable but valid chars)*/
    uint32_t letter_space = letter;
    if(is_valid_but_non_printable_char(letter)) {
 8017fa2:	f200 80d6 	bhi.w	8018152 <refr_cursor_area+0x1fa>
 8017fa6:	f242 4201 	movw	r2, #9217	; 0x2401
 8017faa:	40c2      	lsrs	r2, r0
 8017fac:	f012 0f01 	tst.w	r2, #1
 8017fb0:	bf0c      	ite	eq
 8017fb2:	4601      	moveq	r1, r0
 8017fb4:	2120      	movne	r1, #32
        letter_space = ' ';
    }
    lv_coord_t letter_w = lv_font_get_glyph_width(font, letter_space, IGNORE_KERNING);
 8017fb6:	2200      	movs	r2, #0
 8017fb8:	4648      	mov	r0, r9
 8017fba:	9301      	str	r3, [sp, #4]
 8017fbc:	f00c f83b 	bl	8024036 <lv_font_get_glyph_width>

    lv_point_t letter_pos;
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 8017fc0:	4629      	mov	r1, r5
 8017fc2:	aa03      	add	r2, sp, #12
    lv_coord_t letter_w = lv_font_get_glyph_width(font, letter_space, IGNORE_KERNING);
 8017fc4:	b206      	sxth	r6, r0
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 8017fc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017fc8:	f7fe f972 	bl	80162b0 <lv_label_get_letter_pos>

    lv_text_align_t align = lv_obj_calculate_style_text_align(ta->label, LV_PART_MAIN, lv_label_get_text(ta->label));
 8017fcc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017fce:	4628      	mov	r0, r5
 8017fd0:	f00e ffd5 	bl	8026f7e <lv_label_get_text>
 8017fd4:	2100      	movs	r1, #0
 8017fd6:	4602      	mov	r2, r0
 8017fd8:	4628      	mov	r0, r5
 8017fda:	f006 f88a 	bl	801e0f2 <lv_obj_calculate_style_text_align>

    /*If the cursor is out of the text (most right) draw it to the next line*/
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 8017fde:	6a62      	ldr	r2, [r4, #36]	; 0x24
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {

        letter_pos.x = 0;
        letter_pos.y += letter_h + line_space;
 8017fe0:	9b01      	ldr	r3, [sp, #4]
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 8017fe2:	f9b2 1014 	ldrsh.w	r1, [r2, #20]
        letter_pos.y += letter_h + line_space;
 8017fe6:	b29d      	uxth	r5, r3
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 8017fe8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017fec:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8017ff0:	440b      	add	r3, r1
 8017ff2:	4433      	add	r3, r6
 8017ff4:	4293      	cmp	r3, r2
 8017ff6:	dd31      	ble.n	801805c <refr_cursor_area+0x104>
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {
 8017ff8:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 8017ffc:	f011 0108 	ands.w	r1, r1, #8
 8018000:	d12c      	bne.n	801805c <refr_cursor_area+0x104>
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {
 8018002:	2803      	cmp	r0, #3
 8018004:	d02a      	beq.n	801805c <refr_cursor_area+0x104>
        letter_pos.y += letter_h + line_space;
 8018006:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801800a:	9a00      	ldr	r2, [sp, #0]
        letter_pos.x = 0;
 801800c:	f8ad 100c 	strh.w	r1, [sp, #12]
        letter_pos.y += letter_h + line_space;
 8018010:	441a      	add	r2, r3
        letter_pos.x = 0;
 8018012:	9101      	str	r1, [sp, #4]
        letter_pos.y += letter_h + line_space;
 8018014:	4613      	mov	r3, r2
 8018016:	442b      	add	r3, r5
 8018018:	f8ad 300e 	strh.w	r3, [sp, #14]

        if(letter != '\0') {
 801801c:	f1b8 0f00 	cmp.w	r8, #0
 8018020:	f000 8099 	beq.w	8018156 <refr_cursor_area+0x1fe>
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
 8018024:	4b4f      	ldr	r3, [pc, #316]	; (8018164 <refr_cursor_area+0x20c>)
 8018026:	eb0b 0007 	add.w	r0, fp, r7
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	4798      	blx	r3
 801802e:	4407      	add	r7, r0
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8018030:	9901      	ldr	r1, [sp, #4]
 8018032:	f8da 3000 	ldr.w	r3, [sl]
 8018036:	eb0b 0007 	add.w	r0, fp, r7
 801803a:	4798      	blx	r3
 801803c:	280d      	cmp	r0, #13
 801803e:	4601      	mov	r1, r0
        }

        uint32_t tmp = letter;
        if(is_valid_but_non_printable_char(letter)) {
 8018040:	d807      	bhi.n	8018052 <refr_cursor_area+0xfa>
 8018042:	f242 4301 	movw	r3, #9217	; 0x2401
 8018046:	40c3      	lsrs	r3, r0
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8018048:	f013 0f01 	tst.w	r3, #1
 801804c:	bf0c      	ite	eq
 801804e:	4601      	moveq	r1, r0
 8018050:	2120      	movne	r1, #32
            tmp = ' ';
        }
        letter_w = lv_font_get_glyph_width(font, tmp, IGNORE_KERNING);
 8018052:	2200      	movs	r2, #0
 8018054:	4648      	mov	r0, r9
 8018056:	f00b ffee 	bl	8024036 <lv_font_get_glyph_width>
 801805a:	b206      	sxth	r6, r0
    }

    /*Save the byte position. It is required to draw `LV_CURSOR_BLOCK`*/
    ta->cursor.txt_byte_pos = byte_pos;
 801805c:	6527      	str	r7, [r4, #80]	; 0x50
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801805e:	2232      	movs	r2, #50	; 0x32
 8018060:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8018064:	4620      	mov	r0, r4
 8018066:	f005 fd0b 	bl	801da80 <lv_obj_get_style_prop>
 801806a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801806c:	2210      	movs	r2, #16
 801806e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000

    /*Calculate the cursor according to its type*/
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_CURSOR);
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 8018072:	fa1f fa87 	uxth.w	sl, r7
 8018076:	4620      	mov	r0, r4
 8018078:	f005 fd02 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801807c:	2211      	movs	r2, #17
 801807e:	fa10 f787 	uxtah	r7, r0, r7
 8018082:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8018086:	4620      	mov	r0, r4
 8018088:	f005 fcfa 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801808c:	2212      	movs	r2, #18
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_CURSOR) + border_width;
 801808e:	eb0a 0900 	add.w	r9, sl, r0
 8018092:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8018096:	4620      	mov	r0, r4
 8018098:	b2bf      	uxth	r7, r7
 801809a:	f005 fcf1 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801809e:	2213      	movs	r2, #19
 80180a0:	eb0a 0800 	add.w	r8, sl, r0
 80180a4:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80180a8:	4620      	mov	r0, r4
 80180aa:	fa1f f989 	uxth.w	r9, r9
 80180ae:	f005 fce7 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR) + border_width;
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_CURSOR) + border_width;
 80180b2:	4482      	add	sl, r0

    lv_area_t cur_area;
    cur_area.x1 = letter_pos.x - left;
 80180b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    cur_area.y1 = letter_pos.y - top;
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 80180b8:	f109 39ff 	add.w	r9, r9, #4294967295
    cur_area.y1 = letter_pos.y - top;
 80180bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 80180c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80180c4:	fa1f f888 	uxth.w	r8, r8

    /*Save the new area*/
    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, &ta->cursor.area);
    area_tmp.x1 += ta->label->coords.x1;
 80180c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    cur_area.y1 = letter_pos.y - top;
 80180ca:	1bd7      	subs	r7, r2, r7
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 80180cc:	444a      	add	r2, r9
    cur_area.x1 = letter_pos.x - left;
 80180ce:	eba3 0808 	sub.w	r8, r3, r8
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 80180d2:	4453      	add	r3, sl
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 80180d4:	4415      	add	r5, r2
    area_tmp.x1 += ta->label->coords.x1;
 80180d6:	8a82      	ldrh	r2, [r0, #20]
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 80180d8:	441e      	add	r6, r3
    area_tmp.x1 += ta->label->coords.x1;
 80180da:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    dest->y1 = src->y1;
 80180de:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
    cur_area.x1 = letter_pos.x - left;
 80180e2:	fa1f f888 	uxth.w	r8, r8
    area_tmp.x1 += ta->label->coords.x1;
 80180e6:	4413      	add	r3, r2
    dest->x2 = src->x2;
 80180e8:	f9b4 e04c 	ldrsh.w	lr, [r4, #76]	; 0x4c
    dest->y2 = src->y2;
 80180ec:	f9b4 c04e 	ldrsh.w	ip, [r4, #78]	; 0x4e
    cur_area.y1 = letter_pos.y - top;
 80180f0:	b2bf      	uxth	r7, r7
    area_tmp.x1 += ta->label->coords.x1;
 80180f2:	f8ad 3010 	strh.w	r3, [sp, #16]
    area_tmp.y1 += ta->label->coords.y1;
    area_tmp.x2 += ta->label->coords.x1;
 80180f6:	4472      	add	r2, lr
    area_tmp.y1 += ta->label->coords.y1;
 80180f8:	8ac3      	ldrh	r3, [r0, #22]
    area_tmp.y2 += ta->label->coords.y1;
    lv_obj_invalidate_area(obj, &area_tmp);
 80180fa:	4620      	mov	r0, r4
    area_tmp.x2 += ta->label->coords.x1;
 80180fc:	f8ad 2014 	strh.w	r2, [sp, #20]
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 8018100:	b2b6      	uxth	r6, r6
    area_tmp.y1 += ta->label->coords.y1;
 8018102:	4419      	add	r1, r3
    area_tmp.y2 += ta->label->coords.y1;
 8018104:	4463      	add	r3, ip
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 8018106:	b2ad      	uxth	r5, r5
    area_tmp.y1 += ta->label->coords.y1;
 8018108:	f8ad 1012 	strh.w	r1, [sp, #18]
    lv_obj_invalidate_area(obj, &area_tmp);
 801810c:	a904      	add	r1, sp, #16
    area_tmp.y2 += ta->label->coords.y1;
 801810e:	f8ad 3016 	strh.w	r3, [sp, #22]
    lv_obj_invalidate_area(obj, &area_tmp);
 8018112:	f004 fd6e 	bl	801cbf2 <lv_obj_invalidate_area>

    lv_area_copy(&ta->cursor.area, &cur_area);

    lv_area_copy(&area_tmp, &ta->cursor.area);
    area_tmp.x1 += ta->label->coords.x1;
 8018116:	6a63      	ldr	r3, [r4, #36]	; 0x24
    area_tmp.y1 += ta->label->coords.y1;
    area_tmp.x2 += ta->label->coords.x1;
    area_tmp.y2 += ta->label->coords.y1;
    lv_obj_invalidate_area(obj, &area_tmp);
 8018118:	a904      	add	r1, sp, #16
    dest->x1 = src->x1;
 801811a:	f8a4 8048 	strh.w	r8, [r4, #72]	; 0x48
 801811e:	4620      	mov	r0, r4
    dest->y1 = src->y1;
 8018120:	f8a4 704a 	strh.w	r7, [r4, #74]	; 0x4a
    dest->x2 = src->x2;
 8018124:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
    dest->y2 = src->y2;
 8018128:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
    area_tmp.x1 += ta->label->coords.x1;
 801812c:	8a9a      	ldrh	r2, [r3, #20]
    area_tmp.y1 += ta->label->coords.y1;
 801812e:	8adb      	ldrh	r3, [r3, #22]
    area_tmp.x1 += ta->label->coords.x1;
 8018130:	4490      	add	r8, r2
    area_tmp.x2 += ta->label->coords.x1;
 8018132:	4416      	add	r6, r2
    area_tmp.y1 += ta->label->coords.y1;
 8018134:	441f      	add	r7, r3
    area_tmp.y2 += ta->label->coords.y1;
 8018136:	441d      	add	r5, r3
    area_tmp.x1 += ta->label->coords.x1;
 8018138:	f8ad 8010 	strh.w	r8, [sp, #16]
    area_tmp.y1 += ta->label->coords.y1;
 801813c:	f8ad 7012 	strh.w	r7, [sp, #18]
    area_tmp.x2 += ta->label->coords.x1;
 8018140:	f8ad 6014 	strh.w	r6, [sp, #20]
    area_tmp.y2 += ta->label->coords.y1;
 8018144:	f8ad 5016 	strh.w	r5, [sp, #22]
    lv_obj_invalidate_area(obj, &area_tmp);
 8018148:	f004 fd53 	bl	801cbf2 <lv_obj_invalidate_area>
}
 801814c:	b007      	add	sp, #28
 801814e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018152:	4601      	mov	r1, r0
 8018154:	e72f      	b.n	8017fb6 <refr_cursor_area+0x5e>
            tmp = ' ';
 8018156:	2120      	movs	r1, #32
 8018158:	e77b      	b.n	8018052 <refr_cursor_area+0xfa>
 801815a:	bf00      	nop
 801815c:	24000100 	.word	0x24000100
 8018160:	240000f8 	.word	0x240000f8
 8018164:	24000108 	.word	0x24000108

08018168 <lv_textarea_set_cursor_pos>:
{
 8018168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 801816a:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 801816c:	4604      	mov	r4, r0
 801816e:	460e      	mov	r6, r1
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 8018170:	428b      	cmp	r3, r1
 8018172:	d06f      	beq.n	8018254 <lv_textarea_set_cursor_pos+0xec>
    uint32_t len = _lv_txt_get_encoded_length(lv_label_get_text(ta->label));
 8018174:	4b38      	ldr	r3, [pc, #224]	; (8018258 <lv_textarea_set_cursor_pos+0xf0>)
 8018176:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8018178:	681d      	ldr	r5, [r3, #0]
 801817a:	f00e ff00 	bl	8026f7e <lv_label_get_text>
 801817e:	47a8      	blx	r5
    if(pos < 0) pos = len + pos;
 8018180:	2e00      	cmp	r6, #0
    uint32_t len = _lv_txt_get_encoded_length(lv_label_get_text(ta->label));
 8018182:	4605      	mov	r5, r0
    if(pos < 0) pos = len + pos;
 8018184:	bfb8      	it	lt
 8018186:	1836      	addlt	r6, r6, r0
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
 8018188:	42b0      	cmp	r0, r6
 801818a:	db04      	blt.n	8018196 <lv_textarea_set_cursor_pos+0x2e>
 801818c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018190:	429e      	cmp	r6, r3
 8018192:	bf18      	it	ne
 8018194:	4635      	movne	r5, r6
    lv_obj_update_layout(obj);
 8018196:	4620      	mov	r0, r4
    ta->cursor.pos = pos;
 8018198:	6465      	str	r5, [r4, #68]	; 0x44
    lv_obj_update_layout(obj);
 801819a:	f7ed fae1 	bl	8005760 <lv_obj_update_layout>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801819e:	4620      	mov	r0, r4
 80181a0:	f00f fbf8 	bl	8027994 <lv_obj_get_style_text_font.constprop.0>
 80181a4:	4606      	mov	r6, r0
    lv_label_get_letter_pos(ta->label, pos, &cur_pos);
 80181a6:	4629      	mov	r1, r5
 80181a8:	aa01      	add	r2, sp, #4
 80181aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80181ac:	f7fe f880 	bl	80162b0 <lv_label_get_letter_pos>
 80181b0:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
    if(cur_pos.y < lv_obj_get_scroll_top(obj)) {
 80181b4:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 80181b8:	4620      	mov	r0, r4
 80181ba:	f004 feda 	bl	801cf72 <lv_obj_get_scroll_top>
 80181be:	4286      	cmp	r6, r0
 80181c0:	da05      	bge.n	80181ce <lv_textarea_set_cursor_pos+0x66>
        lv_obj_scroll_to_y(obj, cur_pos.y, LV_ANIM_ON);
 80181c2:	2201      	movs	r2, #1
 80181c4:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 80181c8:	4620      	mov	r0, r4
 80181ca:	f7ed fea1 	bl	8005f10 <lv_obj_scroll_to_y>
    lv_coord_t h = lv_obj_get_content_height(obj);
 80181ce:	4620      	mov	r0, r4
 80181d0:	f004 fb52 	bl	801c878 <lv_obj_get_content_height>
    if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 80181d4:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
    lv_coord_t h = lv_obj_get_content_height(obj);
 80181d8:	4607      	mov	r7, r0
    if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 80181da:	4620      	mov	r0, r4
 80181dc:	442e      	add	r6, r5
 80181de:	f004 fec8 	bl	801cf72 <lv_obj_get_scroll_top>
 80181e2:	1a36      	subs	r6, r6, r0
 80181e4:	42be      	cmp	r6, r7
 80181e6:	dd08      	ble.n	80181fa <lv_textarea_set_cursor_pos+0x92>
        lv_obj_scroll_to_y(obj, cur_pos.y - h + font_h, LV_ANIM_ON);
 80181e8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80181ec:	2201      	movs	r2, #1
 80181ee:	4620      	mov	r0, r4
 80181f0:	4429      	add	r1, r5
 80181f2:	1bc9      	subs	r1, r1, r7
 80181f4:	b209      	sxth	r1, r1
 80181f6:	f7ed fe8b 	bl	8005f10 <lv_obj_scroll_to_y>
    if(cur_pos.x < lv_obj_get_scroll_left(obj)) {
 80181fa:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 80181fe:	4620      	mov	r0, r4
 8018200:	f7ed fcfc 	bl	8005bfc <lv_obj_get_scroll_left>
 8018204:	4286      	cmp	r6, r0
 8018206:	da05      	bge.n	8018214 <lv_textarea_set_cursor_pos+0xac>
        lv_obj_scroll_to_x(obj, cur_pos.x, LV_ANIM_ON);
 8018208:	2201      	movs	r2, #1
 801820a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801820e:	4620      	mov	r0, r4
 8018210:	f7ed fe68 	bl	8005ee4 <lv_obj_scroll_to_x>
    lv_coord_t w = lv_obj_get_content_width(obj);
 8018214:	4620      	mov	r0, r4
 8018216:	f004 fb19 	bl	801c84c <lv_obj_get_content_width>
    if(cur_pos.x + font_h - lv_obj_get_scroll_left(obj) > w) {
 801821a:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
    lv_coord_t w = lv_obj_get_content_width(obj);
 801821e:	4607      	mov	r7, r0
    if(cur_pos.x + font_h - lv_obj_get_scroll_left(obj) > w) {
 8018220:	4620      	mov	r0, r4
 8018222:	442e      	add	r6, r5
 8018224:	f7ed fcea 	bl	8005bfc <lv_obj_get_scroll_left>
 8018228:	1a36      	subs	r6, r6, r0
 801822a:	42be      	cmp	r6, r7
 801822c:	dd08      	ble.n	8018240 <lv_textarea_set_cursor_pos+0xd8>
        lv_obj_scroll_to_x(obj, cur_pos.x - w + font_h, LV_ANIM_ON);
 801822e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018232:	2201      	movs	r2, #1
 8018234:	4620      	mov	r0, r4
 8018236:	18e9      	adds	r1, r5, r3
 8018238:	1bc9      	subs	r1, r1, r7
 801823a:	b209      	sxth	r1, r1
 801823c:	f7ed fe52 	bl	8005ee4 <lv_obj_scroll_to_x>
    ta->cursor.valid_x = cur_pos.x;
 8018240:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    start_cursor_blink(obj);
 8018244:	4620      	mov	r0, r4
    ta->cursor.valid_x = cur_pos.x;
 8018246:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    start_cursor_blink(obj);
 801824a:	f7ff fe53 	bl	8017ef4 <start_cursor_blink>
    refr_cursor_area(obj);
 801824e:	4620      	mov	r0, r4
 8018250:	f7ff fe82 	bl	8017f58 <refr_cursor_area>
}
 8018254:	b003      	add	sp, #12
 8018256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018258:	240000f0 	.word	0x240000f0

0801825c <lv_textarea_constructor>:
{
 801825c:	b538      	push	{r3, r4, r5, lr}
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 801825e:	f240 53dc 	movw	r3, #1500	; 0x5dc
    ta->pwd_tmp           = NULL;
 8018262:	2500      	movs	r5, #0
{
 8018264:	460c      	mov	r4, r1
    ta->label = lv_label_create(obj);
 8018266:	4608      	mov	r0, r1
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 8018268:	878b      	strh	r3, [r1, #60]	; 0x3c
    ta->cursor.pos        = 1;
 801826a:	2301      	movs	r3, #1
    ta->cursor.valid_x    = 0;
 801826c:	f8a1 5040 	strh.w	r5, [r1, #64]	; 0x40
    ta->cursor.pos        = 1;
 8018270:	644b      	str	r3, [r1, #68]	; 0x44
    ta->cursor.show      = 1;
 8018272:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
 8018276:	f023 0303 	bic.w	r3, r3, #3
 801827a:	f043 0303 	orr.w	r3, r3, #3
 801827e:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
    ta->text_sel_en = 0;
 8018282:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 8018286:	f023 030e 	bic.w	r3, r3, #14
    ta->pwd_bullet        = NULL;
 801828a:	e9c1 550b 	strd	r5, r5, [r1, #44]	; 0x2c
    ta->text_sel_en = 0;
 801828e:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
    ta->max_length        = 0;
 8018292:	e9c1 550d 	strd	r5, r5, [r1, #52]	; 0x34
    ta->placeholder_txt = NULL;
 8018296:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    ta->label = lv_label_create(obj);
 801829a:	f7fd ffa7 	bl	80161ec <lv_label_create>
    lv_obj_set_width(ta->label, lv_pct(100));
 801829e:	f242 0164 	movw	r1, #8292	; 0x2064
    ta->label = lv_label_create(obj);
 80182a2:	6260      	str	r0, [r4, #36]	; 0x24
    lv_obj_set_width(ta->label, lv_pct(100));
 80182a4:	f004 fa0c 	bl	801c6c0 <lv_obj_set_width>
    lv_label_set_text(ta->label, "");
 80182a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80182aa:	490b      	ldr	r1, [pc, #44]	; (80182d8 <lv_textarea_constructor+0x7c>)
 80182ac:	f00e fde6 	bl	8026e7c <lv_label_set_text>
    lv_obj_add_event_cb(ta->label, label_event_cb, LV_EVENT_ALL, NULL);
 80182b0:	462b      	mov	r3, r5
 80182b2:	462a      	mov	r2, r5
 80182b4:	4909      	ldr	r1, [pc, #36]	; (80182dc <lv_textarea_constructor+0x80>)
 80182b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80182b8:	f002 ffa7 	bl	801b20a <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80182bc:	4620      	mov	r0, r4
 80182be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80182c2:	f003 fb1e 	bl	801b902 <lv_obj_add_flag>
    lv_textarea_set_cursor_pos(obj, 0);
 80182c6:	4620      	mov	r0, r4
 80182c8:	4629      	mov	r1, r5
 80182ca:	f7ff ff4d 	bl	8018168 <lv_textarea_set_cursor_pos>
    start_cursor_blink(obj);
 80182ce:	4620      	mov	r0, r4
}
 80182d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    start_cursor_blink(obj);
 80182d4:	f7ff be0e 	b.w	8017ef4 <start_cursor_blink>
 80182d8:	0802a016 	.word	0x0802a016
 80182dc:	080279a1 	.word	0x080279a1

080182e0 <lv_textarea_get_password_bullet>:
{
 80182e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(ta->pwd_bullet) return ta->pwd_bullet;
 80182e2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80182e4:	b964      	cbnz	r4, 8018300 <lv_textarea_get_password_bullet+0x20>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80182e6:	f00f fb55 	bl	8027994 <lv_obj_get_style_text_font.constprop.0>
    if(lv_font_get_glyph_dsc(font, &g, LV_TEXTAREA_PWD_BULLET_UNICODE, 0))
 80182ea:	4623      	mov	r3, r4
 80182ec:	f242 0222 	movw	r2, #8226	; 0x2022
 80182f0:	4669      	mov	r1, sp
 80182f2:	f00b fe52 	bl	8023f9a <lv_font_get_glyph_dsc>
    return "*";
 80182f6:	4c04      	ldr	r4, [pc, #16]	; (8018308 <lv_textarea_get_password_bullet+0x28>)
 80182f8:	4b04      	ldr	r3, [pc, #16]	; (801830c <lv_textarea_get_password_bullet+0x2c>)
 80182fa:	2800      	cmp	r0, #0
 80182fc:	bf08      	it	eq
 80182fe:	461c      	moveq	r4, r3
}
 8018300:	4620      	mov	r0, r4
 8018302:	b004      	add	sp, #16
 8018304:	bd10      	pop	{r4, pc}
 8018306:	bf00      	nop
 8018308:	0802df36 	.word	0x0802df36
 801830c:	0802a49c 	.word	0x0802a49c

08018310 <pwd_char_hider>:
{
 8018310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(ta->pwd_mode == 0) {
 8018314:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
{
 8018318:	4604      	mov	r4, r0
    if(ta->pwd_mode == 0) {
 801831a:	075b      	lsls	r3, r3, #29
 801831c:	d531      	bpl.n	8018382 <pwd_char_hider+0x72>
    char * txt = lv_label_get_text(ta->label);
 801831e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8018320:	f00e fe2d 	bl	8026f7e <lv_label_get_text>
    uint32_t enc_len = _lv_txt_get_encoded_length(txt);
 8018324:	4b18      	ldr	r3, [pc, #96]	; (8018388 <pwd_char_hider+0x78>)
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	4798      	blx	r3
    if(enc_len == 0) return;
 801832a:	4606      	mov	r6, r0
 801832c:	b348      	cbz	r0, 8018382 <pwd_char_hider+0x72>
    const char * bullet = lv_textarea_get_password_bullet(obj);
 801832e:	4620      	mov	r0, r4
    for(i = 0; i < enc_len; i++) {
 8018330:	f04f 0800 	mov.w	r8, #0
    const char * bullet = lv_textarea_get_password_bullet(obj);
 8018334:	f7ff ffd4 	bl	80182e0 <lv_textarea_get_password_bullet>
 8018338:	4681      	mov	r9, r0
    const size_t bullet_len = strlen(bullet);
 801833a:	f002 f9d3 	bl	801a6e4 <strlen>
    char * txt_tmp = lv_mem_buf_get(enc_len * bullet_len + 1);
 801833e:	fb00 fa06 	mul.w	sl, r0, r6
    const size_t bullet_len = strlen(bullet);
 8018342:	4607      	mov	r7, r0
    char * txt_tmp = lv_mem_buf_get(enc_len * bullet_len + 1);
 8018344:	f10a 0001 	add.w	r0, sl, #1
 8018348:	f7fa fa02 	bl	8012750 <lv_mem_buf_get>
 801834c:	4605      	mov	r5, r0
    for(i = 0; i < enc_len; i++) {
 801834e:	4683      	mov	fp, r0
 8018350:	f108 0801 	add.w	r8, r8, #1
 8018354:	4658      	mov	r0, fp
 8018356:	463a      	mov	r2, r7
 8018358:	4649      	mov	r1, r9
 801835a:	f002 f9d6 	bl	801a70a <memcpy>
 801835e:	4546      	cmp	r6, r8
 8018360:	44bb      	add	fp, r7
 8018362:	d1f5      	bne.n	8018350 <pwd_char_hider+0x40>
    txt_tmp[i * bullet_len] = '\0';
 8018364:	2300      	movs	r3, #0
    lv_label_set_text(ta->label, txt_tmp);
 8018366:	4629      	mov	r1, r5
    txt_tmp[i * bullet_len] = '\0';
 8018368:	f805 300a 	strb.w	r3, [r5, sl]
    lv_label_set_text(ta->label, txt_tmp);
 801836c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801836e:	f00e fd85 	bl	8026e7c <lv_label_set_text>
    lv_mem_buf_release(txt_tmp);
 8018372:	4628      	mov	r0, r5
 8018374:	f7fa fa36 	bl	80127e4 <lv_mem_buf_release>
    refr_cursor_area(obj);
 8018378:	4620      	mov	r0, r4
}
 801837a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    refr_cursor_area(obj);
 801837e:	f7ff bdeb 	b.w	8017f58 <refr_cursor_area>
}
 8018382:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018386:	bf00      	nop
 8018388:	240000f0 	.word	0x240000f0

0801838c <auto_hide_characters>:
        lv_draw_label(draw_ctx, &cur_label_dsc, &cur_area, letter_buf, NULL);
    }
}

static void auto_hide_characters(lv_obj_t * obj)
{
 801838c:	b510      	push	{r4, lr}
    lv_textarea_t * ta = (lv_textarea_t *) obj;

    if(ta->pwd_show_time == 0) {
 801838e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
{
 8018390:	b092      	sub	sp, #72	; 0x48
 8018392:	4604      	mov	r4, r0
    if(ta->pwd_show_time == 0) {
 8018394:	b923      	cbnz	r3, 80183a0 <auto_hide_characters+0x14>
        lv_anim_set_values(&a, 0, 1);
        lv_anim_set_path_cb(&a, lv_anim_path_step);
        lv_anim_set_ready_cb(&a, pwd_char_hider_anim_ready);
        lv_anim_start(&a);
    }
}
 8018396:	b012      	add	sp, #72	; 0x48
 8018398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pwd_char_hider(obj);
 801839c:	f7ff bfb8 	b.w	8018310 <pwd_char_hider>
        lv_anim_init(&a);
 80183a0:	a801      	add	r0, sp, #4
 80183a2:	f7f9 ffad 	bl	8012300 <lv_anim_init>
    a->exec_cb = exec_cb;
 80183a6:	4b09      	ldr	r3, [pc, #36]	; (80183cc <auto_hide_characters+0x40>)
        lv_anim_start(&a);
 80183a8:	a801      	add	r0, sp, #4
    a->var = var;
 80183aa:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 80183ac:	9302      	str	r3, [sp, #8]
    a->time = duration;
 80183ae:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80183b0:	930c      	str	r3, [sp, #48]	; 0x30
    a->start_value = start;
 80183b2:	2300      	movs	r3, #0
    a->current_value = start;
 80183b4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a->end_value = end;
 80183b8:	2301      	movs	r3, #1
 80183ba:	930b      	str	r3, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 80183bc:	4b04      	ldr	r3, [pc, #16]	; (80183d0 <auto_hide_characters+0x44>)
 80183be:	9308      	str	r3, [sp, #32]
    a->ready_cb = ready_cb;
 80183c0:	4b04      	ldr	r3, [pc, #16]	; (80183d4 <auto_hide_characters+0x48>)
 80183c2:	9304      	str	r3, [sp, #16]
 80183c4:	f7f9 ffe8 	bl	8012398 <lv_anim_start>
}
 80183c8:	b012      	add	sp, #72	; 0x48
 80183ca:	bd10      	pop	{r4, pc}
 80183cc:	08027915 	.word	0x08027915
 80183d0:	080241b3 	.word	0x080241b3
 80183d4:	08027a6b 	.word	0x08027a6b

080183d8 <lv_textarea_add_text>:
{
 80183d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80183da:	4604      	mov	r4, r0
    LV_ASSERT_NULL(txt);
 80183dc:	460d      	mov	r5, r1
 80183de:	b901      	cbnz	r1, 80183e2 <lv_textarea_add_text+0xa>
 80183e0:	e7fe      	b.n	80183e0 <lv_textarea_add_text+0x8>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 80183e2:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80183e6:	075a      	lsls	r2, r3, #29
 80183e8:	d501      	bpl.n	80183ee <lv_textarea_add_text+0x16>
 80183ea:	f7ff ff91 	bl	8018310 <pwd_char_hider>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 80183ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80183f0:	b90b      	cbnz	r3, 80183f6 <lv_textarea_add_text+0x1e>
 80183f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80183f4:	b19b      	cbz	r3, 801841e <lv_textarea_add_text+0x46>
        uint32_t i = 0;
 80183f6:	2300      	movs	r3, #0
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 80183f8:	4e2a      	ldr	r6, [pc, #168]	; (80184a4 <lv_textarea_add_text+0xcc>)
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 80183fa:	4f2b      	ldr	r7, [pc, #172]	; (80184a8 <lv_textarea_add_text+0xd0>)
        uint32_t i = 0;
 80183fc:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 80183fe:	9b01      	ldr	r3, [sp, #4]
 8018400:	5ceb      	ldrb	r3, [r5, r3]
 8018402:	b90b      	cbnz	r3, 8018408 <lv_textarea_add_text+0x30>
}
 8018404:	b003      	add	sp, #12
 8018406:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 8018408:	a901      	add	r1, sp, #4
 801840a:	6833      	ldr	r3, [r6, #0]
 801840c:	4628      	mov	r0, r5
 801840e:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 8018410:	683b      	ldr	r3, [r7, #0]
 8018412:	4798      	blx	r3
 8018414:	4601      	mov	r1, r0
 8018416:	4620      	mov	r0, r4
 8018418:	f000 f868 	bl	80184ec <lv_textarea_add_char>
 801841c:	e7ef      	b.n	80183fe <lv_textarea_add_text+0x26>
    lv_res_t res = insert_handler(obj, txt);
 801841e:	4629      	mov	r1, r5
 8018420:	4620      	mov	r0, r4
 8018422:	f000 f845 	bl	80184b0 <insert_handler>
    if(res != LV_RES_OK) return;
 8018426:	2801      	cmp	r0, #1
 8018428:	d1ec      	bne.n	8018404 <lv_textarea_add_text+0x2c>
    if(ta->placeholder_txt) {
 801842a:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 801842e:	b133      	cbz	r3, 801843e <lv_textarea_add_text+0x66>
        const char * txt_act = lv_label_get_text(ta->label);
 8018430:	f00e fda5 	bl	8026f7e <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 8018434:	7803      	ldrb	r3, [r0, #0]
 8018436:	b913      	cbnz	r3, 801843e <lv_textarea_add_text+0x66>
 8018438:	4620      	mov	r0, r4
 801843a:	f004 fbfb 	bl	801cc34 <lv_obj_invalidate>
    lv_label_ins_text(ta->label, ta->cursor.pos, txt);
 801843e:	462a      	mov	r2, r5
 8018440:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018442:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018444:	f7fe f812 	bl	801646c <lv_label_ins_text>
    lv_textarea_clear_selection(obj);
 8018448:	4620      	mov	r0, r4
 801844a:	f00f fb16 	bl	8027a7a <lv_textarea_clear_selection>
    if(ta->pwd_mode) {
 801844e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8018452:	075b      	lsls	r3, r3, #29
 8018454:	d515      	bpl.n	8018482 <lv_textarea_add_text+0xaa>
        size_t realloc_size = strlen(ta->pwd_tmp) + strlen(txt) + 1;
 8018456:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8018458:	f002 f944 	bl	801a6e4 <strlen>
 801845c:	4606      	mov	r6, r0
 801845e:	4628      	mov	r0, r5
 8018460:	f002 f940 	bl	801a6e4 <strlen>
 8018464:	1831      	adds	r1, r6, r0
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, realloc_size);
 8018466:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8018468:	3101      	adds	r1, #1
 801846a:	f7fa f957 	bl	801271c <lv_mem_realloc>
 801846e:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8018470:	b900      	cbnz	r0, 8018474 <lv_textarea_add_text+0x9c>
 8018472:	e7fe      	b.n	8018472 <lv_textarea_add_text+0x9a>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, txt);
 8018474:	462a      	mov	r2, r5
 8018476:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018478:	f7fa fd30 	bl	8012edc <_lv_txt_ins>
        auto_hide_characters(obj);
 801847c:	4620      	mov	r0, r4
 801847e:	f7ff ff85 	bl	801838c <auto_hide_characters>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 8018482:	4b0a      	ldr	r3, [pc, #40]	; (80184ac <lv_textarea_add_text+0xd4>)
 8018484:	4628      	mov	r0, r5
    return ta->cursor.pos;
 8018486:	6c66      	ldr	r6, [r4, #68]	; 0x44
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	4798      	blx	r3
 801848c:	1981      	adds	r1, r0, r6
 801848e:	4620      	mov	r0, r4
 8018490:	f7ff fe6a 	bl	8018168 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8018494:	2200      	movs	r2, #0
 8018496:	211c      	movs	r1, #28
 8018498:	4620      	mov	r0, r4
}
 801849a:	b003      	add	sp, #12
 801849c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80184a0:	f7ec b91c 	b.w	80046dc <lv_event_send>
 80184a4:	24000100 	.word	0x24000100
 80184a8:	24000104 	.word	0x24000104
 80184ac:	240000f0 	.word	0x240000f0

080184b0 <insert_handler>:
{
 80184b0:	b570      	push	{r4, r5, r6, lr}
    ta_insert_replace = NULL;
 80184b2:	2300      	movs	r3, #0
 80184b4:	4e0c      	ldr	r6, [pc, #48]	; (80184e8 <insert_handler+0x38>)
    lv_event_send(obj, LV_EVENT_INSERT, (char *)txt);
 80184b6:	460a      	mov	r2, r1
{
 80184b8:	460c      	mov	r4, r1
    lv_event_send(obj, LV_EVENT_INSERT, (char *)txt);
 80184ba:	211d      	movs	r1, #29
{
 80184bc:	4605      	mov	r5, r0
    ta_insert_replace = NULL;
 80184be:	6033      	str	r3, [r6, #0]
    lv_event_send(obj, LV_EVENT_INSERT, (char *)txt);
 80184c0:	f7ec f90c 	bl	80046dc <lv_event_send>
    if(ta_insert_replace && ta_insert_replace[0] == '\0')
 80184c4:	6830      	ldr	r0, [r6, #0]
 80184c6:	b908      	cbnz	r0, 80184cc <insert_handler+0x1c>
    return LV_RES_OK;
 80184c8:	2001      	movs	r0, #1
}
 80184ca:	bd70      	pop	{r4, r5, r6, pc}
    if(ta_insert_replace && ta_insert_replace[0] == '\0')
 80184cc:	7803      	ldrb	r3, [r0, #0]
 80184ce:	b143      	cbz	r3, 80184e2 <insert_handler+0x32>
        if(strcmp(ta_insert_replace, txt)) {
 80184d0:	4621      	mov	r1, r4
 80184d2:	f002 f90e 	bl	801a6f2 <strcmp>
 80184d6:	2800      	cmp	r0, #0
 80184d8:	d0f6      	beq.n	80184c8 <insert_handler+0x18>
            lv_textarea_add_text(obj, ta_insert_replace);
 80184da:	6831      	ldr	r1, [r6, #0]
 80184dc:	4628      	mov	r0, r5
 80184de:	f7ff ff7b 	bl	80183d8 <lv_textarea_add_text>
        return LV_RES_INV;
 80184e2:	2000      	movs	r0, #0
 80184e4:	e7f1      	b.n	80184ca <insert_handler+0x1a>
 80184e6:	bf00      	nop
 80184e8:	2400942c 	.word	0x2400942c

080184ec <lv_textarea_add_char>:
{
 80184ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(ta->one_line && (c == '\n' || c == '\r')) {
 80184ee:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
{
 80184f2:	b087      	sub	sp, #28
 80184f4:	4604      	mov	r4, r0
    if(ta->one_line && (c == '\n' || c == '\r')) {
 80184f6:	0718      	lsls	r0, r3, #28
{
 80184f8:	9101      	str	r1, [sp, #4]
    if(ta->one_line && (c == '\n' || c == '\r')) {
 80184fa:	d503      	bpl.n	8018504 <lv_textarea_add_char+0x18>
 80184fc:	290a      	cmp	r1, #10
 80184fe:	d025      	beq.n	801854c <lv_textarea_add_char+0x60>
 8018500:	290d      	cmp	r1, #13
 8018502:	d023      	beq.n	801854c <lv_textarea_add_char+0x60>
    u32_buf[1] = 0;
 8018504:	2500      	movs	r5, #0
    u32_buf[0] = c;
 8018506:	9104      	str	r1, [sp, #16]
    lv_res_t res = insert_handler(obj, letter_buf);
 8018508:	4620      	mov	r0, r4
 801850a:	a904      	add	r1, sp, #16
    u32_buf[1] = 0;
 801850c:	9505      	str	r5, [sp, #20]
    lv_res_t res = insert_handler(obj, letter_buf);
 801850e:	f7ff ffcf 	bl	80184b0 <insert_handler>
    if(res != LV_RES_OK) return;
 8018512:	2801      	cmp	r0, #1
 8018514:	d11a      	bne.n	801854c <lv_textarea_add_char+0x60>
    uint32_t c_uni = _lv_txt_encoded_next((const char *)&c, NULL);
 8018516:	4e30      	ldr	r6, [pc, #192]	; (80185d8 <lv_textarea_add_char+0xec>)
 8018518:	4629      	mov	r1, r5
 801851a:	a801      	add	r0, sp, #4
 801851c:	6833      	ldr	r3, [r6, #0]
 801851e:	4798      	blx	r3
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 8018520:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    uint32_t c_uni = _lv_txt_encoded_next((const char *)&c, NULL);
 8018522:	4605      	mov	r5, r0
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 8018524:	b143      	cbz	r3, 8018538 <lv_textarea_add_char+0x4c>
 8018526:	4b2d      	ldr	r3, [pc, #180]	; (80185dc <lv_textarea_add_char+0xf0>)
 8018528:	4620      	mov	r0, r4
 801852a:	681f      	ldr	r7, [r3, #0]
 801852c:	f00f fa92 	bl	8027a54 <lv_textarea_get_text>
 8018530:	47b8      	blx	r7
 8018532:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018534:	4298      	cmp	r0, r3
 8018536:	d209      	bcs.n	801854c <lv_textarea_add_char+0x60>
    if(ta->accepted_chars == NULL || ta->accepted_chars[0] == '\0') return true;
 8018538:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801853a:	b173      	cbz	r3, 801855a <lv_textarea_add_char+0x6e>
 801853c:	781b      	ldrb	r3, [r3, #0]
 801853e:	b163      	cbz	r3, 801855a <lv_textarea_add_char+0x6e>
    uint32_t i = 0;
 8018540:	2300      	movs	r3, #0
 8018542:	9303      	str	r3, [sp, #12]
    while(ta->accepted_chars[i] != '\0') {
 8018544:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8018546:	9b03      	ldr	r3, [sp, #12]
 8018548:	5cc3      	ldrb	r3, [r0, r3]
 801854a:	b90b      	cbnz	r3, 8018550 <lv_textarea_add_char+0x64>
}
 801854c:	b007      	add	sp, #28
 801854e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t a = _lv_txt_encoded_next(ta->accepted_chars, &i);
 8018550:	6833      	ldr	r3, [r6, #0]
 8018552:	a903      	add	r1, sp, #12
 8018554:	4798      	blx	r3
        if(a == c) return true; /*Accepted*/
 8018556:	4285      	cmp	r5, r0
 8018558:	d1f4      	bne.n	8018544 <lv_textarea_add_char+0x58>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 801855a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801855e:	075a      	lsls	r2, r3, #29
 8018560:	d502      	bpl.n	8018568 <lv_textarea_add_char+0x7c>
 8018562:	4620      	mov	r0, r4
 8018564:	f7ff fed4 	bl	8018310 <pwd_char_hider>
    if(ta->placeholder_txt) {
 8018568:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 801856c:	b133      	cbz	r3, 801857c <lv_textarea_add_char+0x90>
        const char * txt = lv_label_get_text(ta->label);
 801856e:	f00e fd06 	bl	8026f7e <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 8018572:	7803      	ldrb	r3, [r0, #0]
 8018574:	b913      	cbnz	r3, 801857c <lv_textarea_add_char+0x90>
 8018576:	4620      	mov	r0, r4
 8018578:	f004 fb5c 	bl	801cc34 <lv_obj_invalidate>
    lv_label_ins_text(ta->label, ta->cursor.pos, letter_buf); /*Insert the character*/
 801857c:	aa04      	add	r2, sp, #16
 801857e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018580:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018582:	f7fd ff73 	bl	801646c <lv_label_ins_text>
    lv_textarea_clear_selection(obj); /*Clear selection*/
 8018586:	4620      	mov	r0, r4
 8018588:	f00f fa77 	bl	8027a7a <lv_textarea_clear_selection>
    if(ta->pwd_mode) {
 801858c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8018590:	075b      	lsls	r3, r3, #29
 8018592:	d515      	bpl.n	80185c0 <lv_textarea_add_char+0xd4>
        size_t realloc_size = strlen(ta->pwd_tmp) + strlen(letter_buf) + 1;
 8018594:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8018596:	f002 f8a5 	bl	801a6e4 <strlen>
 801859a:	4605      	mov	r5, r0
 801859c:	a804      	add	r0, sp, #16
 801859e:	f002 f8a1 	bl	801a6e4 <strlen>
 80185a2:	1829      	adds	r1, r5, r0
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, realloc_size);
 80185a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80185a6:	3101      	adds	r1, #1
 80185a8:	f7fa f8b8 	bl	801271c <lv_mem_realloc>
 80185ac:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 80185ae:	b900      	cbnz	r0, 80185b2 <lv_textarea_add_char+0xc6>
 80185b0:	e7fe      	b.n	80185b0 <lv_textarea_add_char+0xc4>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, (const char *)letter_buf);
 80185b2:	aa04      	add	r2, sp, #16
 80185b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80185b6:	f7fa fc91 	bl	8012edc <_lv_txt_ins>
        auto_hide_characters(obj);
 80185ba:	4620      	mov	r0, r4
 80185bc:	f7ff fee6 	bl	801838c <auto_hide_characters>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + 1);
 80185c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80185c2:	4620      	mov	r0, r4
 80185c4:	3101      	adds	r1, #1
 80185c6:	f7ff fdcf 	bl	8018168 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80185ca:	2200      	movs	r2, #0
 80185cc:	211c      	movs	r1, #28
 80185ce:	4620      	mov	r0, r4
 80185d0:	f7ec f884 	bl	80046dc <lv_event_send>
 80185d4:	e7ba      	b.n	801854c <lv_textarea_add_char+0x60>
 80185d6:	bf00      	nop
 80185d8:	24000100 	.word	0x24000100
 80185dc:	240000f0 	.word	0x240000f0

080185e0 <lv_textarea_set_text>:
{
 80185e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80185e2:	4604      	mov	r4, r0
    LV_ASSERT_NULL(txt);
 80185e4:	460d      	mov	r5, r1
 80185e6:	b901      	cbnz	r1, 80185ea <lv_textarea_set_text+0xa>
 80185e8:	e7fe      	b.n	80185e8 <lv_textarea_set_text+0x8>
    lv_textarea_clear_selection(obj);
 80185ea:	f00f fa46 	bl	8027a7a <lv_textarea_clear_selection>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 80185ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80185f0:	b913      	cbnz	r3, 80185f8 <lv_textarea_set_text+0x18>
 80185f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d03b      	beq.n	8018670 <lv_textarea_set_text+0x90>
        lv_label_set_text(ta->label, "");
 80185f8:	4929      	ldr	r1, [pc, #164]	; (80186a0 <lv_textarea_set_text+0xc0>)
 80185fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80185fc:	f00e fc3e 	bl	8026e7c <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8018600:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8018604:	4620      	mov	r0, r4
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 8018606:	4e27      	ldr	r6, [pc, #156]	; (80186a4 <lv_textarea_set_text+0xc4>)
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8018608:	f7ff fdae 	bl	8018168 <lv_textarea_set_cursor_pos>
        if(ta->pwd_mode) {
 801860c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 8018610:	4f25      	ldr	r7, [pc, #148]	; (80186a8 <lv_textarea_set_text+0xc8>)
        if(ta->pwd_mode) {
 8018612:	f013 0f04 	tst.w	r3, #4
 8018616:	f04f 0300 	mov.w	r3, #0
            ta->pwd_tmp[0] = '\0'; /*Clear the password too*/
 801861a:	bf1c      	itt	ne
 801861c:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 801861e:	7013      	strbne	r3, [r2, #0]
        uint32_t i = 0;
 8018620:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 8018622:	9b01      	ldr	r3, [sp, #4]
 8018624:	5ceb      	ldrb	r3, [r5, r3]
 8018626:	b9c3      	cbnz	r3, 801865a <lv_textarea_set_text+0x7a>
    if(ta->placeholder_txt) {
 8018628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801862a:	b13b      	cbz	r3, 801863c <lv_textarea_set_text+0x5c>
        const char * txt_act = lv_label_get_text(ta->label);
 801862c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801862e:	f00e fca6 	bl	8026f7e <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 8018632:	7803      	ldrb	r3, [r0, #0]
 8018634:	b913      	cbnz	r3, 801863c <lv_textarea_set_text+0x5c>
 8018636:	4620      	mov	r0, r4
 8018638:	f004 fafc 	bl	801cc34 <lv_obj_invalidate>
    if(ta->pwd_mode) {
 801863c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8018640:	075b      	lsls	r3, r3, #29
 8018642:	d525      	bpl.n	8018690 <lv_textarea_set_text+0xb0>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(txt) + 1);
 8018644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018646:	4628      	mov	r0, r5
 8018648:	f002 f84c 	bl	801a6e4 <strlen>
 801864c:	1c41      	adds	r1, r0, #1
 801864e:	4630      	mov	r0, r6
 8018650:	f7fa f864 	bl	801271c <lv_mem_realloc>
 8018654:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8018656:	b9a8      	cbnz	r0, 8018684 <lv_textarea_set_text+0xa4>
 8018658:	e7fe      	b.n	8018658 <lv_textarea_set_text+0x78>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 801865a:	a901      	add	r1, sp, #4
 801865c:	6833      	ldr	r3, [r6, #0]
 801865e:	4628      	mov	r0, r5
 8018660:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 8018662:	683b      	ldr	r3, [r7, #0]
 8018664:	4798      	blx	r3
 8018666:	4601      	mov	r1, r0
 8018668:	4620      	mov	r0, r4
 801866a:	f7ff ff3f 	bl	80184ec <lv_textarea_add_char>
 801866e:	e7d8      	b.n	8018622 <lv_textarea_set_text+0x42>
        lv_label_set_text(ta->label, txt);
 8018670:	4629      	mov	r1, r5
 8018672:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018674:	f00e fc02 	bl	8026e7c <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8018678:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801867c:	4620      	mov	r0, r4
 801867e:	f7ff fd73 	bl	8018168 <lv_textarea_set_cursor_pos>
 8018682:	e7d1      	b.n	8018628 <lv_textarea_set_text+0x48>
        strcpy(ta->pwd_tmp, txt);
 8018684:	4629      	mov	r1, r5
 8018686:	f002 f823 	bl	801a6d0 <strcpy>
        auto_hide_characters(obj);
 801868a:	4620      	mov	r0, r4
 801868c:	f7ff fe7e 	bl	801838c <auto_hide_characters>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8018690:	2200      	movs	r2, #0
 8018692:	211c      	movs	r1, #28
 8018694:	4620      	mov	r0, r4
}
 8018696:	b003      	add	sp, #12
 8018698:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801869c:	f7ec b81e 	b.w	80046dc <lv_event_send>
 80186a0:	0802a016 	.word	0x0802a016
 80186a4:	24000100 	.word	0x24000100
 80186a8:	24000104 	.word	0x24000104

080186ac <lv_textarea_event>:
{
 80186ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 80186b0:	48b7      	ldr	r0, [pc, #732]	; (8018990 <lv_textarea_event+0x2e4>)
{
 80186b2:	b09d      	sub	sp, #116	; 0x74
 80186b4:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 80186b6:	f002 fd86 	bl	801b1c6 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80186ba:	2801      	cmp	r0, #1
 80186bc:	f040 80b6 	bne.w	801882c <lv_textarea_event+0x180>
    lv_event_code_t code = lv_event_get_code(e);
 80186c0:	4628      	mov	r0, r5
 80186c2:	f002 fd9a 	bl	801b1fa <lv_event_get_code>
 80186c6:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80186c8:	4628      	mov	r0, r5
 80186ca:	f002 fd92 	bl	801b1f2 <lv_event_get_target>
    if(code == LV_EVENT_FOCUSED) {
 80186ce:	2e0e      	cmp	r6, #14
    lv_obj_t * obj = lv_event_get_target(e);
 80186d0:	4604      	mov	r4, r0
    if(code == LV_EVENT_FOCUSED) {
 80186d2:	d104      	bne.n	80186de <lv_textarea_event+0x32>
}
 80186d4:	b01d      	add	sp, #116	; 0x74
 80186d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        start_cursor_blink(obj);
 80186da:	f7ff bc0b 	b.w	8017ef4 <start_cursor_blink>
    else if(code == LV_EVENT_KEY) {
 80186de:	2e15      	cmp	r6, #21
 80186e0:	f000 81c4 	beq.w	8018a6c <lv_textarea_event+0x3c0>
 80186e4:	f200 80a5 	bhi.w	8018832 <lv_textarea_event+0x186>
 80186e8:	2e0d      	cmp	r6, #13
 80186ea:	f000 812a 	beq.w	8018942 <lv_textarea_event+0x296>
 80186ee:	f200 809d 	bhi.w	801882c <lv_textarea_event+0x180>
 80186f2:	2e03      	cmp	r6, #3
 80186f4:	f200 8097 	bhi.w	8018826 <lv_textarea_event+0x17a>
 80186f8:	2e00      	cmp	r6, #0
 80186fa:	f000 8097 	beq.w	801882c <lv_textarea_event+0x180>
    lv_indev_t * click_source = lv_indev_get_act();
 80186fe:	f7ec f853 	bl	80047a8 <lv_indev_get_act>
    if(click_source == NULL) return;
 8018702:	4606      	mov	r6, r0
 8018704:	2800      	cmp	r0, #0
 8018706:	f000 8091 	beq.w	801882c <lv_textarea_event+0x180>
    lv_obj_t * obj = lv_event_get_target(e);
 801870a:	4628      	mov	r0, r5
 801870c:	f002 fd71 	bl	801b1f2 <lv_event_get_target>
    if(ta->cursor.click_pos == 0) return;
 8018710:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
    lv_obj_t * obj = lv_event_get_target(e);
 8018714:	4604      	mov	r4, r0
    if(ta->cursor.click_pos == 0) return;
 8018716:	079f      	lsls	r7, r3, #30
 8018718:	f140 8088 	bpl.w	801882c <lv_textarea_event+0x180>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 801871c:	4630      	mov	r0, r6
 801871e:	f002 ff2c 	bl	801b57a <lv_indev_get_type>
 8018722:	2802      	cmp	r0, #2
 8018724:	f000 8082 	beq.w	801882c <lv_textarea_event+0x180>
       lv_indev_get_type(click_source) == LV_INDEV_TYPE_ENCODER) {
 8018728:	4630      	mov	r0, r6
 801872a:	f002 ff26 	bl	801b57a <lv_indev_get_type>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 801872e:	2804      	cmp	r0, #4
 8018730:	d07c      	beq.n	801882c <lv_textarea_event+0x180>
    lv_obj_get_coords(ta->label, &label_coords);
 8018732:	a90e      	add	r1, sp, #56	; 0x38
 8018734:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018736:	f004 f82d 	bl	801c794 <lv_obj_get_coords>
    lv_indev_get_point(click_source, &point_act);
 801873a:	a902      	add	r1, sp, #8
 801873c:	4630      	mov	r0, r6
 801873e:	f002 ff2d 	bl	801b59c <lv_indev_get_point>
    lv_indev_get_vect(click_source, &vect_act);
 8018742:	a904      	add	r1, sp, #16
 8018744:	4630      	mov	r0, r6
 8018746:	f002 ff58 	bl	801b5fa <lv_indev_get_vect>
    if(point_act.x < 0 || point_act.y < 0) return; /*Ignore event from keypad*/
 801874a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801874e:	2a00      	cmp	r2, #0
 8018750:	db6c      	blt.n	801882c <lv_textarea_event+0x180>
 8018752:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8018756:	2b00      	cmp	r3, #0
 8018758:	db68      	blt.n	801882c <lv_textarea_event+0x180>
    rel_pos.x = point_act.x - label_coords.x1;
 801875a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
    const lv_event_code_t code = lv_event_get_code(e);
 801875e:	4628      	mov	r0, r5
    rel_pos.x = point_act.x - label_coords.x1;
 8018760:	1a52      	subs	r2, r2, r1
 8018762:	f8ad 2018 	strh.w	r2, [sp, #24]
    rel_pos.y = point_act.y - label_coords.y1;
 8018766:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801876a:	1a9b      	subs	r3, r3, r2
 801876c:	f8ad 301a 	strh.w	r3, [sp, #26]
    const lv_event_code_t code = lv_event_get_code(e);
 8018770:	f002 fd43 	bl	801b1fa <lv_event_get_code>
 8018774:	4606      	mov	r6, r0
    lv_coord_t label_width = lv_obj_get_width(ta->label);
 8018776:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018778:	f004 f85c 	bl	801c834 <lv_obj_get_width>
    if(rel_pos.x < 0) {
 801877c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    lv_label_t * label_data = (lv_label_t *)ta->label;
 8018780:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if(rel_pos.x < 0) {
 8018782:	2b00      	cmp	r3, #0
 8018784:	f2c0 813c 	blt.w	8018a00 <lv_textarea_event+0x354>
    else if(rel_pos.x >= label_width) {
 8018788:	4298      	cmp	r0, r3
 801878a:	f340 813c 	ble.w	8018a06 <lv_textarea_event+0x35a>
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 801878e:	a906      	add	r1, sp, #24
 8018790:	4628      	mov	r0, r5
 8018792:	f00e fbfb 	bl	8026f8c <lv_label_get_letter_on>
        click_outside_label = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 8018796:	a906      	add	r1, sp, #24
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 8018798:	b287      	uxth	r7, r0
        click_outside_label = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 801879a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801879c:	f00e fbfa 	bl	8026f94 <lv_label_is_char_under_pos>
 80187a0:	f080 0301 	eor.w	r3, r0, #1
 80187a4:	b2db      	uxtb	r3, r3
    if(ta->text_sel_en) {
 80187a6:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 80187aa:	0790      	lsls	r0, r2, #30
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 80187ac:	f002 0101 	and.w	r1, r2, #1
    if(ta->text_sel_en) {
 80187b0:	f140 8141 	bpl.w	8018a36 <lv_textarea_event+0x38a>
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 80187b4:	2900      	cmp	r1, #0
 80187b6:	f040 812a 	bne.w	8018a0e <lv_textarea_event+0x362>
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	f040 813e 	bne.w	8018a3c <lv_textarea_event+0x390>
 80187c0:	2e01      	cmp	r6, #1
 80187c2:	d133      	bne.n	801882c <lv_textarea_event+0x180>
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 80187c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
            ta->text_sel_in_prog = 1;
 80187c8:	f042 0201 	orr.w	r2, r2, #1
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 80187cc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80187d0:	4620      	mov	r0, r4
            ta->sel_start    = char_id_at_click;
 80187d2:	65a7      	str	r7, [r4, #88]	; 0x58
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 80187d4:	65e3      	str	r3, [r4, #92]	; 0x5c
            ta->text_sel_in_prog = 1;
 80187d6:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 80187da:	f003 f8c8 	bl	801b96e <lv_obj_clear_flag>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 80187de:	4639      	mov	r1, r7
 80187e0:	4620      	mov	r0, r4
 80187e2:	f7ff fcc1 	bl	8018168 <lv_textarea_set_cursor_pos>
    if(ta->text_sel_in_prog) {
 80187e6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80187ea:	07d9      	lsls	r1, r3, #31
 80187ec:	d51e      	bpl.n	801882c <lv_textarea_event+0x180>
            if(label_data->sel_start != ta->sel_end || label_data->sel_end != ta->sel_start) {
 80187ee:	6be9      	ldr	r1, [r5, #60]	; 0x3c
        if(ta->sel_start > ta->sel_end) {
 80187f0:	e9d4 3216 	ldrd	r3, r2, [r4, #88]	; 0x58
 80187f4:	4293      	cmp	r3, r2
 80187f6:	f240 8125 	bls.w	8018a44 <lv_textarea_event+0x398>
            if(label_data->sel_start != ta->sel_end || label_data->sel_end != ta->sel_start) {
 80187fa:	428a      	cmp	r2, r1
 80187fc:	d102      	bne.n	8018804 <lv_textarea_event+0x158>
 80187fe:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8018800:	428b      	cmp	r3, r1
 8018802:	d005      	beq.n	8018810 <lv_textarea_event+0x164>
                label_data->sel_start = ta->sel_end;
 8018804:	63ea      	str	r2, [r5, #60]	; 0x3c
                label_data->sel_end   = ta->sel_start;
 8018806:	6da3      	ldr	r3, [r4, #88]	; 0x58
                lv_obj_invalidate(obj);
 8018808:	4620      	mov	r0, r4
                label_data->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 801880a:	642b      	str	r3, [r5, #64]	; 0x40
                lv_obj_invalidate(obj);
 801880c:	f004 fa12 	bl	801cc34 <lv_obj_invalidate>
        if(code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED) {
 8018810:	2e03      	cmp	r6, #3
 8018812:	d001      	beq.n	8018818 <lv_textarea_event+0x16c>
 8018814:	2e08      	cmp	r6, #8
 8018816:	d109      	bne.n	801882c <lv_textarea_event+0x180>
            ta->text_sel_in_prog = 0;
 8018818:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801881c:	f36f 0300 	bfc	r3, #0, #1
 8018820:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8018824:	e002      	b.n	801882c <lv_textarea_event+0x180>
 8018826:	2e08      	cmp	r6, #8
 8018828:	f43f af69 	beq.w	80186fe <lv_textarea_event+0x52>
}
 801882c:	b01d      	add	sp, #116	; 0x74
 801882e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018832:	2e18      	cmp	r6, #24
 8018834:	d1fa      	bne.n	801882c <lv_textarea_event+0x180>
    lv_obj_t * obj = lv_event_get_target(e);
 8018836:	4628      	mov	r0, r5
 8018838:	f002 fcdb 	bl	801b1f2 <lv_event_get_target>
 801883c:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801883e:	4628      	mov	r0, r5
 8018840:	f002 fd30 	bl	801b2a4 <lv_event_get_draw_ctx>
 8018844:	4680      	mov	r8, r0
    const char * txt = lv_label_get_text(ta->label);
 8018846:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018848:	f00e fb99 	bl	8026f7e <lv_label_get_text>
    if(ta->cursor.show == 0) return;
 801884c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
    const char * txt = lv_label_get_text(ta->label);
 8018850:	4607      	mov	r7, r0
    if(ta->cursor.show == 0) return;
 8018852:	07db      	lsls	r3, r3, #31
 8018854:	d5ea      	bpl.n	801882c <lv_textarea_event+0x180>
    lv_draw_rect_dsc_init(&cur_dsc);
 8018856:	a80e      	add	r0, sp, #56	; 0x38
    char letter_buf[8] = {0};
 8018858:	f04f 0900 	mov.w	r9, #0
    lv_draw_rect_dsc_init(&cur_dsc);
 801885c:	f7f0 f86e 	bl	800893c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_CURSOR, &cur_dsc);
 8018860:	aa0e      	add	r2, sp, #56	; 0x38
 8018862:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8018866:	4620      	mov	r0, r4
 8018868:	f003 fb12 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    cur_area.x1 += ta->label->coords.x1;
 801886c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801886e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8018872:	8a82      	ldrh	r2, [r0, #20]
    dest->x2 = src->x2;
 8018874:	f9b4 604c 	ldrsh.w	r6, [r4, #76]	; 0x4c
 8018878:	4413      	add	r3, r2
    dest->y2 = src->y2;
 801887a:	f9b4 504e 	ldrsh.w	r5, [r4, #78]	; 0x4e
    dest->y1 = src->y1;
 801887e:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
    cur_area.x2 += ta->label->coords.x1;
 8018882:	4432      	add	r2, r6
    cur_area.x1 += ta->label->coords.x1;
 8018884:	f8ad 3008 	strh.w	r3, [sp, #8]
    cur_area.y1 += ta->label->coords.y1;
 8018888:	8ac3      	ldrh	r3, [r0, #22]
    lv_draw_rect(draw_ctx, &cur_dsc, &cur_area);
 801888a:	4640      	mov	r0, r8
    cur_area.x2 += ta->label->coords.x1;
 801888c:	f8ad 200c 	strh.w	r2, [sp, #12]
    lv_draw_rect(draw_ctx, &cur_dsc, &cur_area);
 8018890:	aa02      	add	r2, sp, #8
    cur_area.y1 += ta->label->coords.y1;
 8018892:	4419      	add	r1, r3
    cur_area.y2 += ta->label->coords.y1;
 8018894:	442b      	add	r3, r5
    cur_area.y1 += ta->label->coords.y1;
 8018896:	f8ad 100a 	strh.w	r1, [sp, #10]
    lv_draw_rect(draw_ctx, &cur_dsc, &cur_area);
 801889a:	a90e      	add	r1, sp, #56	; 0x38
    cur_area.y2 += ta->label->coords.y1;
 801889c:	f8ad 300e 	strh.w	r3, [sp, #14]
    lv_draw_rect(draw_ctx, &cur_dsc, &cur_area);
 80188a0:	f006 fd81 	bl	801f3a6 <lv_draw_rect>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80188a4:	2232      	movs	r2, #50	; 0x32
 80188a6:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80188aa:	4620      	mov	r0, r4
 80188ac:	f005 f8e8 	bl	801da80 <lv_obj_get_style_prop>
 80188b0:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80188b2:	2212      	movs	r2, #18
 80188b4:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80188b8:	4620      	mov	r0, r4
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR) + border_width;
 80188ba:	b2b5      	uxth	r5, r6
 80188bc:	f005 f8e0 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80188c0:	2210      	movs	r2, #16
 80188c2:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80188c6:	fa10 f686 	uxtah	r6, r0, r6
 80188ca:	4620      	mov	r0, r4
 80188cc:	f005 f8d8 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 80188d0:	4405      	add	r5, r0
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR) + border_width;
 80188d2:	b2b6      	uxth	r6, r6
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 80188d4:	b2ad      	uxth	r5, r5
    char letter_buf[8] = {0};
 80188d6:	e9cd 9904 	strd	r9, r9, [sp, #16]
    lv_memcpy(letter_buf, &txt[ta->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ta->cursor.txt_byte_pos]));
 80188da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80188dc:	441f      	add	r7, r3
 80188de:	4b2d      	ldr	r3, [pc, #180]	; (8018994 <lv_textarea_event+0x2e8>)
 80188e0:	4638      	mov	r0, r7
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	4798      	blx	r3
 80188e6:	4639      	mov	r1, r7
 80188e8:	4602      	mov	r2, r0
 80188ea:	a804      	add	r0, sp, #16
 80188ec:	f001 ff0d 	bl	801a70a <memcpy>
    cur_area.x1 += left;
 80188f0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
 80188f4:	2255      	movs	r2, #85	; 0x55
 80188f6:	4649      	mov	r1, r9
 80188f8:	441e      	add	r6, r3
    cur_area.y1 += top;
 80188fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80188fe:	441d      	add	r5, r3
    cur_area.x1 += left;
 8018900:	f8ad 6008 	strh.w	r6, [sp, #8]
    cur_area.y1 += top;
 8018904:	f8ad 500a 	strh.w	r5, [sp, #10]
 8018908:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801890a:	f005 f8b9 	bl	801da80 <lv_obj_get_style_prop>
    return v.color;
 801890e:	b285      	uxth	r5, r0
    lv_draw_label_dsc_init(&cur_label_dsc);
 8018910:	a806      	add	r0, sp, #24
 8018912:	f7ef f9c9 	bl	8007ca8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_CURSOR, &cur_label_dsc);
 8018916:	aa06      	add	r2, sp, #24
 8018918:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801891c:	4620      	mov	r0, r4
 801891e:	f003 fc06 	bl	801c12e <lv_obj_init_draw_label_dsc>
    if(cur_dsc.bg_opa > LV_OPA_MIN || cur_label_dsc.color.full != label_color.full) {
 8018922:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8018926:	2b02      	cmp	r3, #2
 8018928:	d804      	bhi.n	8018934 <lv_textarea_event+0x288>
 801892a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801892e:	42ab      	cmp	r3, r5
 8018930:	f43f af7c 	beq.w	801882c <lv_textarea_event+0x180>
        lv_draw_label(draw_ctx, &cur_label_dsc, &cur_area, letter_buf, NULL);
 8018934:	2300      	movs	r3, #0
 8018936:	aa02      	add	r2, sp, #8
 8018938:	a906      	add	r1, sp, #24
 801893a:	4640      	mov	r0, r8
 801893c:	9300      	str	r3, [sp, #0]
 801893e:	ab04      	add	r3, sp, #16
 8018940:	e0eb      	b.n	8018b1a <lv_textarea_event+0x46e>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 8018942:	4628      	mov	r0, r5
 8018944:	f002 fc5d 	bl	801b202 <lv_event_get_param>
 8018948:	6801      	ldr	r1, [r0, #0]
        if(c == LV_KEY_RIGHT)
 801894a:	2913      	cmp	r1, #19
 801894c:	d105      	bne.n	801895a <lv_textarea_event+0x2ae>
            lv_textarea_cursor_right(obj);
 801894e:	4620      	mov	r0, r4
}
 8018950:	b01d      	add	sp, #116	; 0x74
 8018952:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_cursor_right(obj);
 8018956:	f00f b904 	b.w	8027b62 <lv_textarea_cursor_right>
        else if(c == LV_KEY_LEFT)
 801895a:	2914      	cmp	r1, #20
 801895c:	d810      	bhi.n	8018980 <lv_textarea_event+0x2d4>
 801895e:	2901      	cmp	r1, #1
 8018960:	d910      	bls.n	8018984 <lv_textarea_event+0x2d8>
 8018962:	1e8b      	subs	r3, r1, #2
 8018964:	2b12      	cmp	r3, #18
 8018966:	d80d      	bhi.n	8018984 <lv_textarea_event+0x2d8>
 8018968:	e8df f003 	tbb	[pc, r3]
 801896c:	0c0c3b34 	.word	0x0c0c3b34
 8018970:	0c280c0c 	.word	0x0c280c0c
 8018974:	0c0c0c3e 	.word	0x0c0c0c3e
 8018978:	1c0c0c0c 	.word	0x1c0c0c0c
 801897c:	0c22      	.short	0x0c22
 801897e:	16          	.byte	0x16
 801897f:	00          	.byte	0x00
 8018980:	297f      	cmp	r1, #127	; 0x7f
 8018982:	d021      	beq.n	80189c8 <lv_textarea_event+0x31c>
            lv_textarea_add_char(obj, c);
 8018984:	4620      	mov	r0, r4
}
 8018986:	b01d      	add	sp, #116	; 0x74
 8018988:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_add_char(obj, c);
 801898c:	f7ff bdae 	b.w	80184ec <lv_textarea_add_char>
 8018990:	08029aa0 	.word	0x08029aa0
 8018994:	24000108 	.word	0x24000108
            lv_textarea_cursor_left(obj);
 8018998:	4620      	mov	r0, r4
}
 801899a:	b01d      	add	sp, #116	; 0x74
 801899c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_cursor_left(obj);
 80189a0:	f00f b8e3 	b.w	8027b6a <lv_textarea_cursor_left>
            lv_textarea_cursor_up(obj);
 80189a4:	4620      	mov	r0, r4
}
 80189a6:	b01d      	add	sp, #116	; 0x74
 80189a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_cursor_up(obj);
 80189ac:	f00f b913 	b.w	8027bd6 <lv_textarea_cursor_up>
            lv_textarea_cursor_down(obj);
 80189b0:	4620      	mov	r0, r4
}
 80189b2:	b01d      	add	sp, #116	; 0x74
 80189b4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_cursor_down(obj);
 80189b8:	f00f b8dd 	b.w	8027b76 <lv_textarea_cursor_down>
            lv_textarea_del_char(obj);
 80189bc:	4620      	mov	r0, r4
}
 80189be:	b01d      	add	sp, #116	; 0x74
 80189c0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_del_char(obj);
 80189c4:	f00f b875 	b.w	8027ab2 <lv_textarea_del_char>
            lv_textarea_del_char_forward(obj);
 80189c8:	4620      	mov	r0, r4
}
 80189ca:	b01d      	add	sp, #116	; 0x74
 80189cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_del_char_forward(obj);
 80189d0:	f00f b8b8 	b.w	8027b44 <lv_textarea_del_char_forward>
            lv_textarea_set_cursor_pos(obj, 0);
 80189d4:	2100      	movs	r1, #0
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 80189d6:	4620      	mov	r0, r4
}
 80189d8:	b01d      	add	sp, #116	; 0x74
 80189da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 80189de:	f7ff bbc3 	b.w	8018168 <lv_textarea_set_cursor_pos>
 80189e2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80189e6:	e7f6      	b.n	80189d6 <lv_textarea_event+0x32a>
    return ta->one_line == 1U;
 80189e8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 80189ec:	071b      	lsls	r3, r3, #28
 80189ee:	d5c9      	bpl.n	8018984 <lv_textarea_event+0x2d8>
            lv_event_send(obj, LV_EVENT_READY, NULL);
 80189f0:	2200      	movs	r2, #0
 80189f2:	211f      	movs	r1, #31
 80189f4:	4620      	mov	r0, r4
}
 80189f6:	b01d      	add	sp, #116	; 0x74
 80189f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_event_send(obj, LV_EVENT_READY, NULL);
 80189fc:	f7eb be6e 	b.w	80046dc <lv_event_send>
        click_outside_label = true;
 8018a00:	2301      	movs	r3, #1
        char_id_at_click = 0;
 8018a02:	2700      	movs	r7, #0
 8018a04:	e6cf      	b.n	80187a6 <lv_textarea_event+0xfa>
        click_outside_label = true;
 8018a06:	2301      	movs	r3, #1
        char_id_at_click = LV_TEXTAREA_CURSOR_LAST;
 8018a08:	f647 77ff 	movw	r7, #32767	; 0x7fff
 8018a0c:	e6cb      	b.n	80187a6 <lv_textarea_event+0xfa>
        else if(ta->text_sel_in_prog && code == LV_EVENT_PRESSING) {
 8018a0e:	2e02      	cmp	r6, #2
 8018a10:	d00f      	beq.n	8018a32 <lv_textarea_event+0x386>
        else if(ta->text_sel_in_prog && (code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED)) {
 8018a12:	2e03      	cmp	r6, #3
 8018a14:	d002      	beq.n	8018a1c <lv_textarea_event+0x370>
 8018a16:	2e08      	cmp	r6, #8
 8018a18:	f47f aee1 	bne.w	80187de <lv_textarea_event+0x132>
            lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8018a1c:	4620      	mov	r0, r4
 8018a1e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8018a22:	f002 ff6e 	bl	801b902 <lv_obj_add_flag>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 8018a26:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8018a2a:	07d8      	lsls	r0, r3, #31
 8018a2c:	f57f aefe 	bpl.w	801882c <lv_textarea_event+0x180>
 8018a30:	e6d5      	b.n	80187de <lv_textarea_event+0x132>
            ta->sel_end = char_id_at_click;
 8018a32:	65e7      	str	r7, [r4, #92]	; 0x5c
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 8018a34:	e6d3      	b.n	80187de <lv_textarea_event+0x132>
 8018a36:	2900      	cmp	r1, #0
 8018a38:	f47f aed1 	bne.w	80187de <lv_textarea_event+0x132>
 8018a3c:	2e01      	cmp	r6, #1
 8018a3e:	f47f aef5 	bne.w	801882c <lv_textarea_event+0x180>
 8018a42:	e6cc      	b.n	80187de <lv_textarea_event+0x132>
        else if(ta->sel_start < ta->sel_end) {
 8018a44:	d208      	bcs.n	8018a58 <lv_textarea_event+0x3ac>
            if(label_data->sel_start != ta->sel_start || label_data->sel_end != ta->sel_end) {
 8018a46:	428b      	cmp	r3, r1
 8018a48:	d103      	bne.n	8018a52 <lv_textarea_event+0x3a6>
 8018a4a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8018a4c:	428a      	cmp	r2, r1
 8018a4e:	f43f aedf 	beq.w	8018810 <lv_textarea_event+0x164>
                label_data->sel_start = ta->sel_start;
 8018a52:	63eb      	str	r3, [r5, #60]	; 0x3c
                label_data->sel_end   = ta->sel_end;
 8018a54:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8018a56:	e6d7      	b.n	8018808 <lv_textarea_event+0x15c>
            if(label_data->sel_start != LV_DRAW_LABEL_NO_TXT_SEL || label_data->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8018a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a5c:	4299      	cmp	r1, r3
 8018a5e:	d103      	bne.n	8018a68 <lv_textarea_event+0x3bc>
 8018a60:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8018a62:	429a      	cmp	r2, r3
 8018a64:	f43f aed4 	beq.w	8018810 <lv_textarea_event+0x164>
                label_data->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8018a68:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018a6a:	e6cd      	b.n	8018808 <lv_textarea_event+0x15c>
    lv_obj_t * obj = lv_event_get_target(e);
 8018a6c:	4628      	mov	r0, r5
 8018a6e:	f002 fbc0 	bl	801b1f2 <lv_event_get_target>
 8018a72:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8018a74:	4628      	mov	r0, r5
 8018a76:	f002 fc15 	bl	801b2a4 <lv_event_get_draw_ctx>
 8018a7a:	4606      	mov	r6, r0
    const char * txt = lv_label_get_text(ta->label);
 8018a7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018a7e:	f00e fa7e 	bl	8026f7e <lv_label_get_text>
    if(txt[0] == '\0' && ta->placeholder_txt && ta->placeholder_txt[0] != 0) {
 8018a82:	7803      	ldrb	r3, [r0, #0]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	f47f aed1 	bne.w	801882c <lv_textarea_event+0x180>
 8018a8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	f43f aecd 	beq.w	801882c <lv_textarea_event+0x180>
 8018a92:	781b      	ldrb	r3, [r3, #0]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	f43f aec9 	beq.w	801882c <lv_textarea_event+0x180>
        lv_draw_label_dsc_init(&ph_dsc);
 8018a9a:	a80e      	add	r0, sp, #56	; 0x38
 8018a9c:	f7ef f904 	bl	8007ca8 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_TEXTAREA_PLACEHOLDER, &ph_dsc);
 8018aa0:	aa0e      	add	r2, sp, #56	; 0x38
 8018aa2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018aa6:	4620      	mov	r0, r4
 8018aa8:	f003 fb41 	bl	801c12e <lv_obj_init_draw_label_dsc>
        if(ta->one_line) ph_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 8018aac:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8018ab0:	2100      	movs	r1, #0
 8018ab2:	4620      	mov	r0, r4
 8018ab4:	071a      	lsls	r2, r3, #28
 8018ab6:	f04f 0212 	mov.w	r2, #18
 8018aba:	bf42      	ittt	mi
 8018abc:	f89d 3055 	ldrbmi.w	r3, [sp, #85]	; 0x55
 8018ac0:	f043 0302 	orrmi.w	r3, r3, #2
 8018ac4:	f88d 3055 	strbmi.w	r3, [sp, #85]	; 0x55
 8018ac8:	f004 ffda 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8018acc:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8018ace:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8018ad0:	2100      	movs	r1, #0
 8018ad2:	4620      	mov	r0, r4
 8018ad4:	f004 ffd4 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8018ad8:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8018ada:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8018adc:	2100      	movs	r1, #0
 8018ade:	4620      	mov	r0, r4
 8018ae0:	f004 ffce 	bl	801da80 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 8018ae4:	8aa3      	ldrh	r3, [r4, #20]
        lv_area_move(&ph_coords, left + border_width, top + border_width);
 8018ae6:	fa15 f280 	uxtah	r2, r5, r0
 8018aea:	fa17 f180 	uxtah	r1, r7, r0
 8018aee:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018af2:	a806      	add	r0, sp, #24
    dest->y1 = src->y1;
 8018af4:	8ae3      	ldrh	r3, [r4, #22]
 8018af6:	b212      	sxth	r2, r2
 8018af8:	b209      	sxth	r1, r1
 8018afa:	f8ad 301a 	strh.w	r3, [sp, #26]
    dest->x2 = src->x2;
 8018afe:	8b23      	ldrh	r3, [r4, #24]
 8018b00:	f8ad 301c 	strh.w	r3, [sp, #28]
    dest->y2 = src->y2;
 8018b04:	8b63      	ldrh	r3, [r4, #26]
 8018b06:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018b0a:	f00b fba1 	bl	8024250 <lv_area_move>
        lv_draw_label(draw_ctx, &ph_dsc, &ph_coords, ta->placeholder_txt, NULL);
 8018b0e:	2300      	movs	r3, #0
 8018b10:	aa06      	add	r2, sp, #24
 8018b12:	a90e      	add	r1, sp, #56	; 0x38
 8018b14:	4630      	mov	r0, r6
 8018b16:	9300      	str	r3, [sp, #0]
 8018b18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        lv_draw_label(draw_ctx, &cur_label_dsc, &cur_area, letter_buf, NULL);
 8018b1a:	f7ef f8dd 	bl	8007cd8 <lv_draw_label>
 8018b1e:	e685      	b.n	801882c <lv_textarea_event+0x180>

08018b20 <lvgl_init>:
	return 0;
}
#endif /* CONFIG_LV_Z_POINTER_KSCAN */

static int lvgl_init(void)
{
 8018b20:	b570      	push	{r4, r5, r6, lr}
 8018b22:	b086      	sub	sp, #24
 8018b24:	4c40      	ldr	r4, [pc, #256]	; (8018c28 <lvgl_init+0x108>)
 8018b26:	4620      	mov	r0, r4
 8018b28:	f00f fa38 	bl	8027f9c <z_device_is_ready>

	const struct device *display_dev = DEVICE_DT_GET(DISPLAY_NODE);

	int err = 0;

	if (!device_is_ready(display_dev)) {
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	b970      	cbnz	r0, 8018b4e <lvgl_init+0x2e>
		LOG_ERR("Display device not ready.");
 8018b30:	4a3e      	ldr	r2, [pc, #248]	; (8018c2c <lvgl_init+0x10c>)
 8018b32:	9205      	str	r2, [sp, #20]
 8018b34:	2202      	movs	r2, #2
 8018b36:	9204      	str	r2, [sp, #16]
		return -ENODEV;
 8018b38:	f06f 0412 	mvn.w	r4, #18
 8018b3c:	aa04      	add	r2, sp, #16
 8018b3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018b42:	483b      	ldr	r0, [pc, #236]	; (8018c30 <lvgl_init+0x110>)
 8018b44:	f7e9 f814 	bl	8001b70 <z_impl_z_log_msg_static_create>
#ifdef CONFIG_LV_Z_POINTER_KSCAN
	lvgl_pointer_kscan_init();
#endif /* CONFIG_LV_Z_POINTER_KSCAN */

	return 0;
}
 8018b48:	4620      	mov	r0, r4
 8018b4a:	b006      	add	sp, #24
 8018b4c:	bd70      	pop	{r4, r5, r6, pc}
	disp_data.display_dev = display_dev;
 8018b4e:	4e39      	ldr	r6, [pc, #228]	; (8018c34 <lvgl_init+0x114>)
	lv_init();
 8018b50:	f7ec f8a8 	bl	8004ca4 <lv_init>
					    capabilities)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	api->get_capabilities(dev, capabilities);
 8018b54:	68a3      	ldr	r3, [r4, #8]
 8018b56:	4620      	mov	r0, r4
	disp_data.display_dev = display_dev;
 8018b58:	4631      	mov	r1, r6
 8018b5a:	69db      	ldr	r3, [r3, #28]
 8018b5c:	f841 4b04 	str.w	r4, [r1], #4
	lv_disp_drv_init(&disp_drv);
 8018b60:	4c35      	ldr	r4, [pc, #212]	; (8018c38 <lvgl_init+0x118>)
 8018b62:	4798      	blx	r3
 8018b64:	4620      	mov	r0, r4
 8018b66:	f7f9 f9d7 	bl	8011f18 <lv_disp_drv_init>
	if (data->cap.x_resolution <= DISPLAY_WIDTH) {
 8018b6a:	88b3      	ldrh	r3, [r6, #4]
	disp_drv.user_data = (void *)&disp_data;
 8018b6c:	64e6      	str	r6, [r4, #76]	; 0x4c
	if (data->cap.x_resolution <= DISPLAY_WIDTH) {
 8018b6e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8018b72:	d812      	bhi.n	8018b9a <lvgl_init+0x7a>
	int err = 0;
 8018b74:	2500      	movs	r5, #0
		disp_drv->hor_res = data->cap.x_resolution;
 8018b76:	8023      	strh	r3, [r4, #0]
	if (data->cap.y_resolution <= DISPLAY_HEIGHT) {
 8018b78:	88f3      	ldrh	r3, [r6, #6]
 8018b7a:	4e30      	ldr	r6, [pc, #192]	; (8018c3c <lvgl_init+0x11c>)
 8018b7c:	2bf0      	cmp	r3, #240	; 0xf0
 8018b7e:	d81a      	bhi.n	8018bb6 <lvgl_init+0x96>
		disp_drv->ver_res = data->cap.y_resolution;
 8018b80:	8063      	strh	r3, [r4, #2]
	lv_disp_draw_buf_init(disp_drv->draw_buf, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
 8018b82:	2200      	movs	r2, #0
 8018b84:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8018b88:	492d      	ldr	r1, [pc, #180]	; (8018c40 <lvgl_init+0x120>)
 8018b8a:	4630      	mov	r0, r6
	disp_drv->draw_buf = &disp_buf;
 8018b8c:	60e6      	str	r6, [r4, #12]
	lv_disp_draw_buf_init(disp_drv->draw_buf, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
 8018b8e:	f00b fa8b 	bl	80240a8 <lv_disp_draw_buf_init>
	if (err != 0) {
 8018b92:	b325      	cbz	r5, 8018bde <lvgl_init+0xbe>
		return -ENODEV;
 8018b94:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8018b98:	e7d6      	b.n	8018b48 <lvgl_init+0x28>
		LOG_ERR("Horizontal resolution is larger than maximum");
 8018b9a:	4b2a      	ldr	r3, [pc, #168]	; (8018c44 <lvgl_init+0x124>)
 8018b9c:	9305      	str	r3, [sp, #20]
 8018b9e:	2302      	movs	r3, #2
 8018ba0:	9304      	str	r3, [sp, #16]
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	aa04      	add	r2, sp, #16
 8018ba6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018baa:	4821      	ldr	r0, [pc, #132]	; (8018c30 <lvgl_init+0x110>)
 8018bac:	f7e8 ffe0 	bl	8001b70 <z_impl_z_log_msg_static_create>
		err = -ENOTSUP;
 8018bb0:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8018bb4:	e7e0      	b.n	8018b78 <lvgl_init+0x58>
		LOG_ERR("Vertical resolution is larger than maximum");
 8018bb6:	4b24      	ldr	r3, [pc, #144]	; (8018c48 <lvgl_init+0x128>)
 8018bb8:	9305      	str	r3, [sp, #20]
 8018bba:	2302      	movs	r3, #2
 8018bbc:	9304      	str	r3, [sp, #16]
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	aa04      	add	r2, sp, #16
 8018bc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018bc6:	481a      	ldr	r0, [pc, #104]	; (8018c30 <lvgl_init+0x110>)
 8018bc8:	f7e8 ffd2 	bl	8001b70 <z_impl_z_log_msg_static_create>
	lv_disp_draw_buf_init(disp_drv->draw_buf, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
 8018bcc:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8018bd0:	2200      	movs	r2, #0
 8018bd2:	491b      	ldr	r1, [pc, #108]	; (8018c40 <lvgl_init+0x120>)
 8018bd4:	4630      	mov	r0, r6
	disp_drv->draw_buf = &disp_buf;
 8018bd6:	60e6      	str	r6, [r4, #12]
	lv_disp_draw_buf_init(disp_drv->draw_buf, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
 8018bd8:	f00b fa66 	bl	80240a8 <lv_disp_draw_buf_init>
	if (err != 0) {
 8018bdc:	e7da      	b.n	8018b94 <lvgl_init+0x74>
	if (set_lvgl_rendering_cb(&disp_drv) != 0) {
 8018bde:	4816      	ldr	r0, [pc, #88]	; (8018c38 <lvgl_init+0x118>)
 8018be0:	f000 f838 	bl	8018c54 <set_lvgl_rendering_cb>
 8018be4:	4604      	mov	r4, r0
 8018be6:	b158      	cbz	r0, 8018c00 <lvgl_init+0xe0>
		LOG_ERR("Display not supported.");
 8018be8:	4b18      	ldr	r3, [pc, #96]	; (8018c4c <lvgl_init+0x12c>)
 8018bea:	9305      	str	r3, [sp, #20]
 8018bec:	2302      	movs	r3, #2
 8018bee:	9304      	str	r3, [sp, #16]
 8018bf0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018bf4:	462b      	mov	r3, r5
 8018bf6:	aa04      	add	r2, sp, #16
 8018bf8:	480d      	ldr	r0, [pc, #52]	; (8018c30 <lvgl_init+0x110>)
 8018bfa:	f7e8 ffb9 	bl	8001b70 <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
 8018bfe:	e7c9      	b.n	8018b94 <lvgl_init+0x74>
	if (lv_disp_drv_register(&disp_drv) == NULL) {
 8018c00:	480d      	ldr	r0, [pc, #52]	; (8018c38 <lvgl_init+0x118>)
 8018c02:	f7f9 f9ad 	bl	8011f60 <lv_disp_drv_register>
 8018c06:	2800      	cmp	r0, #0
 8018c08:	d19e      	bne.n	8018b48 <lvgl_init+0x28>
		LOG_ERR("Failed to register display device.");
 8018c0a:	4b11      	ldr	r3, [pc, #68]	; (8018c50 <lvgl_init+0x130>)
 8018c0c:	9305      	str	r3, [sp, #20]
 8018c0e:	2302      	movs	r3, #2
 8018c10:	9304      	str	r3, [sp, #16]
 8018c12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018c16:	462b      	mov	r3, r5
 8018c18:	aa04      	add	r2, sp, #16
 8018c1a:	4805      	ldr	r0, [pc, #20]	; (8018c30 <lvgl_init+0x110>)
 8018c1c:	f7e8 ffa8 	bl	8001b70 <z_impl_z_log_msg_static_create>
		return -EPERM;
 8018c20:	f04f 34ff 	mov.w	r4, #4294967295
 8018c24:	e790      	b.n	8018b48 <lvgl_init+0x28>
 8018c26:	bf00      	nop
 8018c28:	08028470 	.word	0x08028470
 8018c2c:	0802df3a 	.word	0x0802df3a
 8018c30:	080289d4 	.word	0x080289d4
 8018c34:	24010c4c 	.word	0x24010c4c
 8018c38:	24010c64 	.word	0x24010c64
 8018c3c:	24010c30 	.word	0x24010c30
 8018c40:	24009430 	.word	0x24009430
 8018c44:	0802df54 	.word	0x0802df54
 8018c48:	0802df81 	.word	0x0802df81
 8018c4c:	0802dfac 	.word	0x0802dfac
 8018c50:	0802dfc3 	.word	0x0802dfc3

08018c54 <set_lvgl_rendering_cb>:
#include <errno.h>

#include "lvgl_display.h"

int set_lvgl_rendering_cb(lv_disp_drv_t *disp_drv)
{
 8018c54:	b510      	push	{r4, lr}
	int err = 0;
	struct lvgl_disp_data *data =
		(struct lvgl_disp_data *)disp_drv->user_data;

	switch (data->cap.current_pixel_format) {
 8018c56:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 8018c58:	4604      	mov	r4, r0
	switch (data->cap.current_pixel_format) {
 8018c5a:	7c1b      	ldrb	r3, [r3, #16]
 8018c5c:	2b08      	cmp	r3, #8
 8018c5e:	d80e      	bhi.n	8018c7e <set_lvgl_rendering_cb+0x2a>
 8018c60:	b193      	cbz	r3, 8018c88 <set_lvgl_rendering_cb+0x34>
 8018c62:	3b01      	subs	r3, #1
 8018c64:	2b07      	cmp	r3, #7
 8018c66:	d80e      	bhi.n	8018c86 <set_lvgl_rendering_cb+0x32>
 8018c68:	e8df f003 	tbb	[pc, r3]
 8018c6c:	130d1304 	.word	0x130d1304
 8018c70:	1b0d0d0d 	.word	0x1b0d0d0d
 8018c74:	4b0f      	ldr	r3, [pc, #60]	; (8018cb4 <set_lvgl_rendering_cb+0x60>)
 8018c76:	2200      	movs	r2, #0
 8018c78:	490f      	ldr	r1, [pc, #60]	; (8018cb8 <set_lvgl_rendering_cb+0x64>)
	int err = 0;
 8018c7a:	4610      	mov	r0, r2
 8018c7c:	e00d      	b.n	8018c9a <set_lvgl_rendering_cb+0x46>
	switch (data->cap.current_pixel_format) {
 8018c7e:	2b10      	cmp	r3, #16
 8018c80:	d013      	beq.n	8018caa <set_lvgl_rendering_cb+0x56>
 8018c82:	2b20      	cmp	r3, #32
 8018c84:	d011      	beq.n	8018caa <set_lvgl_rendering_cb+0x56>
 8018c86:	2300      	movs	r3, #0
 8018c88:	461a      	mov	r2, r3
 8018c8a:	4619      	mov	r1, r3
		break;
	default:
		disp_drv->flush_cb = NULL;
		disp_drv->rounder_cb = NULL;
		disp_drv->set_px_cb = NULL;
		err = -ENOTSUP;
 8018c8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8018c90:	e003      	b.n	8018c9a <set_lvgl_rendering_cb+0x46>
		break;
 8018c92:	4b0a      	ldr	r3, [pc, #40]	; (8018cbc <set_lvgl_rendering_cb+0x68>)
	int err = 0;
 8018c94:	2000      	movs	r0, #0
		break;
 8018c96:	4a0a      	ldr	r2, [pc, #40]	; (8018cc0 <set_lvgl_rendering_cb+0x6c>)
 8018c98:	490a      	ldr	r1, [pc, #40]	; (8018cc4 <set_lvgl_rendering_cb+0x70>)
		disp_drv->set_px_cb = lvgl_set_px_cb_24bit;
 8018c9a:	61e1      	str	r1, [r4, #28]
		disp_drv->rounder_cb = NULL;
 8018c9c:	e9c4 3205 	strd	r3, r2, [r4, #20]
		break;

	}

	return err;
}
 8018ca0:	bd10      	pop	{r4, pc}
	switch (data->cap.current_pixel_format) {
 8018ca2:	4b09      	ldr	r3, [pc, #36]	; (8018cc8 <set_lvgl_rendering_cb+0x74>)
 8018ca4:	2200      	movs	r2, #0
 8018ca6:	4909      	ldr	r1, [pc, #36]	; (8018ccc <set_lvgl_rendering_cb+0x78>)
 8018ca8:	e7e7      	b.n	8018c7a <set_lvgl_rendering_cb+0x26>
 8018caa:	2200      	movs	r2, #0
 8018cac:	4b08      	ldr	r3, [pc, #32]	; (8018cd0 <set_lvgl_rendering_cb+0x7c>)
 8018cae:	4611      	mov	r1, r2
 8018cb0:	e7e3      	b.n	8018c7a <set_lvgl_rendering_cb+0x26>
 8018cb2:	bf00      	nop
 8018cb4:	08027de7 	.word	0x08027de7
 8018cb8:	08027e33 	.word	0x08027e33
 8018cbc:	08027c2b 	.word	0x08027c2b
 8018cc0:	08027d63 	.word	0x08027d63
 8018cc4:	08027cd9 	.word	0x08027cd9
 8018cc8:	08027ecb 	.word	0x08027ecb
 8018ccc:	08027f15 	.word	0x08027f15
 8018cd0:	08027d9d 	.word	0x08027d9d

08018cd4 <lvgl_heap_init>:
	k_spin_unlock(&lvgl_heap_lock, key);
}

static int lvgl_heap_init(void)
{
	sys_heap_init(&lvgl_heap, &lvgl_heap_mem[0], HEAP_BYTES);
 8018cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018cd8:	4903      	ldr	r1, [pc, #12]	; (8018ce8 <lvgl_heap_init+0x14>)
 8018cda:	4804      	ldr	r0, [pc, #16]	; (8018cec <lvgl_heap_init+0x18>)
{
 8018cdc:	b508      	push	{r3, lr}
	sys_heap_init(&lvgl_heap, &lvgl_heap_mem[0], HEAP_BYTES);
 8018cde:	f001 f92b 	bl	8019f38 <sys_heap_init>
	return 0;
}
 8018ce2:	2000      	movs	r0, #0
 8018ce4:	bd08      	pop	{r3, pc}
 8018ce6:	bf00      	nop
 8018ce8:	240006b0 	.word	0x240006b0
 8018cec:	24010cb4 	.word	0x24010cb4

08018cf0 <z_impl_k_busy_wait>:
#include <zephyr/drivers/timer/system_timer.h>
#include <zephyr/sys_clock.h>
#include <kernel_arch_interface.h>

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8018cf0:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8018cf2:	4604      	mov	r4, r0
 8018cf4:	b178      	cbz	r0, 8018d16 <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8018cf6:	f7eb fb7b 	bl	80043f0 <sys_clock_cycle_get_32>
 8018cfa:	4605      	mov	r5, r0
#elif defined(CONFIG_SYS_CLOCK_EXISTS)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8018cfc:	4806      	ldr	r0, [pc, #24]	; (8018d18 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8018cfe:	2300      	movs	r3, #0
 8018d00:	4a06      	ldr	r2, [pc, #24]	; (8018d1c <z_impl_k_busy_wait+0x2c>)
 8018d02:	fba4 0100 	umull	r0, r1, r4, r0
 8018d06:	f7e7 fae1 	bl	80002cc <__aeabi_uldivmod>
 8018d0a:	4604      	mov	r4, r0
 8018d0c:	f7eb fb70 	bl	80043f0 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8018d10:	1b43      	subs	r3, r0, r5
 8018d12:	42a3      	cmp	r3, r4
 8018d14:	d3fa      	bcc.n	8018d0c <z_impl_k_busy_wait+0x1c>
		arch_nop();
	}
#endif

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8018d16:	bd38      	pop	{r3, r4, r5, pc}
 8018d18:	20c85580 	.word	0x20c85580
 8018d1c:	000f4240 	.word	0x000f4240

08018d20 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8018d20:	b510      	push	{r4, lr}
 8018d22:	4604      	mov	r4, r0
 8018d24:	b086      	sub	sp, #24
	z_impl_log_panic();
 8018d26:	f7e8 fe43 	bl	80019b0 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 8018d2a:	4b07      	ldr	r3, [pc, #28]	; (8018d48 <k_sys_fatal_error_handler+0x28>)
 8018d2c:	9305      	str	r3, [sp, #20]
 8018d2e:	2302      	movs	r3, #2
 8018d30:	9304      	str	r3, [sp, #16]
 8018d32:	4806      	ldr	r0, [pc, #24]	; (8018d4c <k_sys_fatal_error_handler+0x2c>)
 8018d34:	2300      	movs	r3, #0
 8018d36:	aa04      	add	r2, sp, #16
 8018d38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018d3c:	f7e8 ff18 	bl	8001b70 <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
 8018d40:	4620      	mov	r0, r4
 8018d42:	f00f f936 	bl	8027fb2 <arch_system_halt>
 8018d46:	bf00      	nop
 8018d48:	0802dfeb 	.word	0x0802dfeb
 8018d4c:	080289e4 	.word	0x080289e4

08018d50 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8018d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d54:	b086      	sub	sp, #24
 8018d56:	4605      	mov	r5, r0
 8018d58:	460e      	mov	r6, r1
 8018d5a:	af00      	add	r7, sp, #0
	__asm__ volatile(
 8018d5c:	f04f 0310 	mov.w	r3, #16
 8018d60:	f3ef 8811 	mrs	r8, BASEPRI
 8018d64:	f383 8812 	msr	BASEPRI_MAX, r3
 8018d68:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8018d6c:	f000 fcfe 	bl	801976c <z_impl_z_current_get>
 8018d70:	2d04      	cmp	r5, #4
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8018d72:	46e9      	mov	r9, sp
 8018d74:	b08a      	sub	sp, #40	; 0x28
 8018d76:	bf98      	it	ls
 8018d78:	4b2c      	ldrls	r3, [pc, #176]	; (8018e2c <z_fatal_error+0xdc>)
 8018d7a:	4604      	mov	r4, r0
 8018d7c:	bf88      	it	hi
 8018d7e:	4b2c      	ldrhi	r3, [pc, #176]	; (8018e30 <z_fatal_error+0xe0>)
 8018d80:	466a      	mov	r2, sp
 8018d82:	bf98      	it	ls
 8018d84:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
 8018d88:	61d3      	str	r3, [r2, #28]
 8018d8a:	f240 3301 	movw	r3, #769	; 0x301
 8018d8e:	4929      	ldr	r1, [pc, #164]	; (8018e34 <z_fatal_error+0xe4>)
 8018d90:	f04f 0a00 	mov.w	sl, #0
 8018d94:	8493      	strh	r3, [r2, #36]	; 0x24
 8018d96:	4b28      	ldr	r3, [pc, #160]	; (8018e38 <z_fatal_error+0xe8>)
 8018d98:	f8c2 a020 	str.w	sl, [r2, #32]
 8018d9c:	e9c2 1505 	strd	r1, r5, [r2, #20]
 8018da0:	f842 3f10 	str.w	r3, [r2, #16]!
 8018da4:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 8018da8:	4653      	mov	r3, sl
 8018daa:	4824      	ldr	r0, [pc, #144]	; (8018e3c <z_fatal_error+0xec>)
 8018dac:	f7e8 fee0 	bl	8001b70 <z_impl_z_log_msg_static_create>
 8018db0:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8018db2:	b17e      	cbz	r6, 8018dd4 <z_fatal_error+0x84>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8018db4:	69f3      	ldr	r3, [r6, #28]
 8018db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018dba:	b15b      	cbz	r3, 8018dd4 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
 8018dbc:	4b20      	ldr	r3, [pc, #128]	; (8018e40 <z_fatal_error+0xf0>)
 8018dbe:	617b      	str	r3, [r7, #20]
 8018dc0:	2302      	movs	r3, #2
 8018dc2:	613b      	str	r3, [r7, #16]
 8018dc4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8018dc8:	4653      	mov	r3, sl
 8018dca:	f107 0210 	add.w	r2, r7, #16
 8018dce:	481b      	ldr	r0, [pc, #108]	; (8018e3c <z_fatal_error+0xec>)
 8018dd0:	f7e8 fece 	bl	8001b70 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8018dd4:	b12c      	cbz	r4, 8018de2 <z_fatal_error+0x92>
 8018dd6:	4620      	mov	r0, r4
 8018dd8:	f00f f901 	bl	8027fde <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 8018ddc:	b108      	cbz	r0, 8018de2 <z_fatal_error+0x92>
 8018dde:	7803      	ldrb	r3, [r0, #0]
 8018de0:	b903      	cbnz	r3, 8018de4 <z_fatal_error+0x94>
		thread_name = "unknown";
 8018de2:	4818      	ldr	r0, [pc, #96]	; (8018e44 <z_fatal_error+0xf4>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8018de4:	46e9      	mov	r9, sp
 8018de6:	b08a      	sub	sp, #40	; 0x28
 8018de8:	466a      	mov	r2, sp
 8018dea:	4b17      	ldr	r3, [pc, #92]	; (8018e48 <z_fatal_error+0xf8>)
 8018dec:	61d0      	str	r0, [r2, #28]
 8018dee:	e9c2 3405 	strd	r3, r4, [r2, #20]
 8018df2:	f240 3301 	movw	r3, #769	; 0x301
 8018df6:	8413      	strh	r3, [r2, #32]
 8018df8:	4b14      	ldr	r3, [pc, #80]	; (8018e4c <z_fatal_error+0xfc>)
 8018dfa:	f842 3f10 	str.w	r3, [r2, #16]!
 8018dfe:	2300      	movs	r3, #0
 8018e00:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 8018e04:	480d      	ldr	r0, [pc, #52]	; (8018e3c <z_fatal_error+0xec>)
 8018e06:	f7e8 feb3 	bl	8001b70 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8018e0a:	4631      	mov	r1, r6
 8018e0c:	4628      	mov	r0, r5
 8018e0e:	46cd      	mov	sp, r9
 8018e10:	f7ff ff86 	bl	8018d20 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8018e14:	f388 8811 	msr	BASEPRI, r8
 8018e18:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8018e1c:	4620      	mov	r0, r4
 8018e1e:	f7e9 fe3d 	bl	8002a9c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8018e22:	3718      	adds	r7, #24
 8018e24:	46bd      	mov	sp, r7
 8018e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e2a:	bf00      	nop
 8018e2c:	08029ac0 	.word	0x08029ac0
 8018e30:	0802dffa 	.word	0x0802dffa
 8018e34:	0802e010 	.word	0x0802e010
 8018e38:	01000005 	.word	0x01000005
 8018e3c:	080289e4 	.word	0x080289e4
 8018e40:	0802e038 	.word	0x0802e038
 8018e44:	0802e008 	.word	0x0802e008
 8018e48:	0802e059 	.word	0x0802e059
 8018e4c:	01000004 	.word	0x01000004

08018e50 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8018e50:	4b10      	ldr	r3, [pc, #64]	; (8018e94 <z_sys_init_run_level+0x44>)
{
 8018e52:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8018e54:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8018e58:	3001      	adds	r0, #1
 8018e5a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8018e5e:	42a6      	cmp	r6, r4
 8018e60:	d800      	bhi.n	8018e64 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
 8018e62:	bd70      	pop	{r4, r5, r6, pc}
			if (entry->init_fn.dev != NULL) {
 8018e64:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
 8018e68:	b195      	cbz	r5, 8018e90 <z_sys_init_run_level+0x40>
			if (entry->init_fn.dev != NULL) {
 8018e6a:	b153      	cbz	r3, 8018e82 <z_sys_init_run_level+0x32>
				rc = entry->init_fn.dev(dev);
 8018e6c:	4628      	mov	r0, r5
 8018e6e:	4798      	blx	r3
				if (rc != 0) {
 8018e70:	b138      	cbz	r0, 8018e82 <z_sys_init_run_level+0x32>
					if (rc < 0) {
 8018e72:	2800      	cmp	r0, #0
					dev->state->init_res = rc;
 8018e74:	68eb      	ldr	r3, [r5, #12]
					if (rc < 0) {
 8018e76:	bfb8      	it	lt
 8018e78:	4240      	neglt	r0, r0
					if (rc > UINT8_MAX) {
 8018e7a:	28ff      	cmp	r0, #255	; 0xff
 8018e7c:	bfa8      	it	ge
 8018e7e:	20ff      	movge	r0, #255	; 0xff
					dev->state->init_res = rc;
 8018e80:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8018e82:	68ea      	ldr	r2, [r5, #12]
 8018e84:	7853      	ldrb	r3, [r2, #1]
 8018e86:	f043 0301 	orr.w	r3, r3, #1
 8018e8a:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8018e8c:	3408      	adds	r4, #8
 8018e8e:	e7e6      	b.n	8018e5e <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
 8018e90:	4798      	blx	r3
 8018e92:	e7fb      	b.n	8018e8c <z_sys_init_run_level+0x3c>
 8018e94:	08029ad4 	.word	0x08029ad4

08018e98 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8018e98:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8018e9a:	2003      	movs	r0, #3
{
 8018e9c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8018e9e:	4b09      	ldr	r3, [pc, #36]	; (8018ec4 <bg_thread_main+0x2c>)
 8018ea0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8018ea2:	f7ff ffd5 	bl	8018e50 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8018ea6:	f000 fed7 	bl	8019c58 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 8018eaa:	2004      	movs	r0, #4
 8018eac:	f7ff ffd0 	bl	8018e50 <z_sys_init_run_level>

	z_init_static_threads();
 8018eb0:	f000 f932 	bl	8019118 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
 8018eb4:	f7e7 fb74 	bl	80005a0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8018eb8:	4a03      	ldr	r2, [pc, #12]	; (8018ec8 <bg_thread_main+0x30>)
 8018eba:	7b13      	ldrb	r3, [r2, #12]
 8018ebc:	f023 0301 	bic.w	r3, r3, #1
 8018ec0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8018ec2:	bd08      	pop	{r3, pc}
 8018ec4:	24010e3e 	.word	0x24010e3e
 8018ec8:	24000f30 	.word	0x24000f30

08018ecc <z_bss_zero>:
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8018ecc:	4806      	ldr	r0, [pc, #24]	; (8018ee8 <z_bss_zero+0x1c>)
 8018ece:	2100      	movs	r1, #0
 8018ed0:	4a06      	ldr	r2, [pc, #24]	; (8018eec <z_bss_zero+0x20>)
{
 8018ed2:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8018ed4:	1a12      	subs	r2, r2, r0
 8018ed6:	f00f f875 	bl	8027fc4 <z_early_memset>
		       - (uintptr_t) &__dtcm_bss_start);
 8018eda:	4805      	ldr	r0, [pc, #20]	; (8018ef0 <z_bss_zero+0x24>)
	z_early_memset(&__dtcm_bss_start, 0,
 8018edc:	4a05      	ldr	r2, [pc, #20]	; (8018ef4 <z_bss_zero+0x28>)
 8018ede:	2100      	movs	r1, #0
 8018ee0:	1a12      	subs	r2, r2, r0
 8018ee2:	f00f f86f 	bl	8027fc4 <z_early_memset>
}
 8018ee6:	bd08      	pop	{r3, pc}
 8018ee8:	240001e0 	.word	0x240001e0
 8018eec:	24010e40 	.word	0x24010e40
 8018ef0:	20000000 	.word	0x20000000
 8018ef4:	20000000 	.word	0x20000000

08018ef8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8018ef8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 8018efa:	2300      	movs	r3, #0
{
 8018efc:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 8018efe:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
 8018f00:	4e1a      	ldr	r6, [pc, #104]	; (8018f6c <z_init_cpu+0x74>)
	z_setup_new_thread(thread, stack,
 8018f02:	9301      	str	r3, [sp, #4]
{
 8018f04:	4604      	mov	r4, r0
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8018f06:	4d1a      	ldr	r5, [pc, #104]	; (8018f70 <z_init_cpu+0x78>)
	struct k_thread *thread = &z_idle_threads[i];
 8018f08:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
 8018f0c:	4919      	ldr	r1, [pc, #100]	; (8018f74 <z_init_cpu+0x7c>)
 8018f0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018f12:	220f      	movs	r2, #15
 8018f14:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8018f18:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
 8018f1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8018f1e:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
 8018f22:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8018f26:	4b14      	ldr	r3, [pc, #80]	; (8018f78 <z_init_cpu+0x80>)
 8018f28:	fb00 1104 	mla	r1, r0, r4, r1
 8018f2c:	4630      	mov	r0, r6
 8018f2e:	9500      	str	r5, [sp, #0]
 8018f30:	f000 f894 	bl	801905c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8018f34:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8018f36:	4a11      	ldr	r2, [pc, #68]	; (8018f7c <z_init_cpu+0x84>)
 8018f38:	f023 0304 	bic.w	r3, r3, #4
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8018f3c:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].id = id;
 8018f3e:	742c      	strb	r4, [r5, #16]
 8018f40:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8018f42:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8018f46:	fb04 3303 	mla	r3, r4, r3, r3
 8018f4a:	4413      	add	r3, r2
	_kernel.cpus[id].irq_stack =
 8018f4c:	606b      	str	r3, [r5, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8018f4e:	f3bf 8f5b 	dmb	ish
 8018f52:	4b0b      	ldr	r3, [pc, #44]	; (8018f80 <z_init_cpu+0x88>)
 8018f54:	e853 1f00 	ldrex	r1, [r3]
 8018f58:	3101      	adds	r1, #1
 8018f5a:	e843 1200 	strex	r2, r1, [r3]
 8018f5e:	2a00      	cmp	r2, #0
 8018f60:	d1f8      	bne.n	8018f54 <z_init_cpu+0x5c>
 8018f62:	f3bf 8f5b 	dmb	ish
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
 8018f66:	b006      	add	sp, #24
 8018f68:	bd70      	pop	{r4, r5, r6, pc}
 8018f6a:	bf00      	nop
 8018f6c:	24000eb0 	.word	0x24000eb0
 8018f70:	24010cc4 	.word	0x24010cc4
 8018f74:	240119c0 	.word	0x240119c0
 8018f78:	08027fe3 	.word	0x08027fe3
 8018f7c:	24011180 	.word	0x24011180
 8018f80:	24010cc0 	.word	0x24010cc0

08018f84 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 8018f84:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8018f86:	2000      	movs	r0, #0
{
 8018f88:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8018f8a:	f7ff ff61 	bl	8018e50 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8018f8e:	4b2c      	ldr	r3, [pc, #176]	; (8019040 <z_cstart+0xbc>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8018f90:	f383 8808 	msr	MSP, r3
 8018f94:	4d2b      	ldr	r5, [pc, #172]	; (8019044 <z_cstart+0xc0>)
 8018f96:	2400      	movs	r4, #0
 8018f98:	23f0      	movs	r3, #240	; 0xf0

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8018f9a:	4e2b      	ldr	r6, [pc, #172]	; (8019048 <z_cstart+0xc4>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8018f9c:	4f2b      	ldr	r7, [pc, #172]	; (801904c <z_cstart+0xc8>)
 8018f9e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8018fa2:	77ec      	strb	r4, [r5, #31]
 8018fa4:	762c      	strb	r4, [r5, #24]
 8018fa6:	766c      	strb	r4, [r5, #25]
 8018fa8:	76ac      	strb	r4, [r5, #26]
 8018faa:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8018fae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018fb0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8018fb4:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8018fb6:	f7e9 fd3d 	bl	8002a34 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8018fba:	f7e9 f8c9 	bl	8002150 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8018fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8018fc2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8018fc4:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
 8018fc6:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8018fc8:	f7e9 fe38 	bl	8002c3c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8018fcc:	f7e9 fd7c 	bl	8002ac8 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 8018fd0:	f7e8 fc60 	bl	8001894 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8018fd4:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
 8018fd8:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
 8018fda:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
 8018fde:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
 8018fe2:	f000 fe33 	bl	8019c4c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
 8018fe6:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8018fe8:	f00e ffd7 	bl	8027f9a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 8018fec:	2001      	movs	r0, #1
 8018fee:	f7ff ff2f 	bl	8018e50 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8018ff2:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 8018ff4:	4d16      	ldr	r5, [pc, #88]	; (8019050 <z_cstart+0xcc>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8018ff6:	f7ff ff2b 	bl	8018e50 <z_sys_init_run_level>
	z_sched_init();
 8018ffa:	f000 fb15 	bl	8019628 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8018ffe:	4b15      	ldr	r3, [pc, #84]	; (8019054 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
 8019000:	6175      	str	r5, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8019002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019006:	9305      	str	r3, [sp, #20]
 8019008:	2301      	movs	r3, #1
 801900a:	4913      	ldr	r1, [pc, #76]	; (8019058 <z_cstart+0xd4>)
 801900c:	4628      	mov	r0, r5
 801900e:	9400      	str	r4, [sp, #0]
 8019010:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8019014:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8019018:	463b      	mov	r3, r7
 801901a:	f000 f81f 	bl	801905c <z_setup_new_thread>
 801901e:	7b6a      	ldrb	r2, [r5, #13]
 8019020:	4606      	mov	r6, r0
	z_ready_thread(&z_main_thread);
 8019022:	4628      	mov	r0, r5
 8019024:	f022 0204 	bic.w	r2, r2, #4
 8019028:	736a      	strb	r2, [r5, #13]
 801902a:	f00f f82c 	bl	8028086 <z_ready_thread>
	z_init_cpu(0);
 801902e:	4620      	mov	r0, r4
 8019030:	f7ff ff62 	bl	8018ef8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8019034:	463a      	mov	r2, r7
 8019036:	4631      	mov	r1, r6
 8019038:	4628      	mov	r0, r5
 801903a:	f7e9 f9cf 	bl	80023dc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 801903e:	bf00      	nop
 8019040:	240119c0 	.word	0x240119c0
 8019044:	e000ed00 	.word	0xe000ed00
 8019048:	24010cc4 	.word	0x24010cc4
 801904c:	08018e99 	.word	0x08018e99
 8019050:	24000f30 	.word	0x24000f30
 8019054:	0802e0bb 	.word	0x0802e0bb
 8019058:	24011b40 	.word	0x24011b40

0801905c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 801905c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8019060:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8019062:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 8019066:	460f      	mov	r7, r1
 8019068:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
 801906a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 801906c:	2604      	movs	r6, #4

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 801906e:	3740      	adds	r7, #64	; 0x40
 8019070:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8019072:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8019074:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8019076:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8019078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 801907a:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 801907e:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
 8019082:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8019084:	f106 0840 	add.w	r8, r6, #64	; 0x40
	thread_base->pended_on = NULL;
 8019088:	6085      	str	r5, [r0, #8]
	stack_ptr = (char *)stack + stack_obj_size;
 801908a:	4488      	add	r8, r1

	thread_base->sched_locked = 0U;
 801908c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 801908e:	66c5      	str	r5, [r0, #108]	; 0x6c
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8019090:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8019094:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8019098:	9202      	str	r2, [sp, #8]
 801909a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801909c:	9201      	str	r2, [sp, #4]
 801909e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80190a0:	9200      	str	r2, [sp, #0]
 80190a2:	4642      	mov	r2, r8
 80190a4:	f7e9 f96e 	bl	8002384 <arch_new_thread>
	if (!_current) {
 80190a8:	4b04      	ldr	r3, [pc, #16]	; (80190bc <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 80190aa:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 80190ac:	689b      	ldr	r3, [r3, #8]
 80190ae:	b103      	cbz	r3, 80190b2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 80190b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 80190b2:	4640      	mov	r0, r8
 80190b4:	6723      	str	r3, [r4, #112]	; 0x70
 80190b6:	b004      	add	sp, #16
 80190b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190bc:	24010cc4 	.word	0x24010cc4

080190c0 <z_impl_k_thread_create>:
{
 80190c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80190c2:	2500      	movs	r5, #0
{
 80190c4:	b087      	sub	sp, #28
 80190c6:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80190c8:	9505      	str	r5, [sp, #20]
 80190ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80190cc:	9504      	str	r5, [sp, #16]
 80190ce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80190d0:	9503      	str	r5, [sp, #12]
 80190d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80190d4:	9502      	str	r5, [sp, #8]
 80190d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80190d8:	9501      	str	r5, [sp, #4]
 80190da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
 80190dc:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80190e0:	9500      	str	r5, [sp, #0]
 80190e2:	f7ff ffbb 	bl	801905c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 80190e6:	f1b6 3fff 	cmp.w	r6, #4294967295
 80190ea:	bf08      	it	eq
 80190ec:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 80190f0:	d005      	beq.n	80190fe <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80190f2:	ea56 0307 	orrs.w	r3, r6, r7
 80190f6:	d105      	bne.n	8019104 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 80190f8:	4620      	mov	r0, r4
 80190fa:	f000 fa15 	bl	8019528 <z_sched_start>
}
 80190fe:	4620      	mov	r0, r4
 8019100:	b007      	add	sp, #28
 8019102:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8019104:	463a      	mov	r2, r7
 8019106:	4633      	mov	r3, r6
 8019108:	4902      	ldr	r1, [pc, #8]	; (8019114 <z_impl_k_thread_create+0x54>)
 801910a:	f104 0018 	add.w	r0, r4, #24
 801910e:	f000 fbff 	bl	8019910 <z_add_timeout>
 8019112:	e7f4      	b.n	80190fe <z_impl_k_thread_create+0x3e>
 8019114:	0802810f 	.word	0x0802810f

08019118 <z_init_static_threads>:
{
 8019118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801911a:	4c21      	ldr	r4, [pc, #132]	; (80191a0 <z_init_static_threads+0x88>)
 801911c:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
 801911e:	4d21      	ldr	r5, [pc, #132]	; (80191a4 <z_init_static_threads+0x8c>)
 8019120:	4626      	mov	r6, r4
 8019122:	342c      	adds	r4, #44	; 0x2c
 8019124:	42ae      	cmp	r6, r5
 8019126:	d30b      	bcc.n	8019140 <z_init_static_threads+0x28>
	_FOREACH_STATIC_THREAD(thread_data) {
 8019128:	4c1d      	ldr	r4, [pc, #116]	; (80191a0 <z_init_static_threads+0x88>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 801912a:	260a      	movs	r6, #10
 801912c:	4f1e      	ldr	r7, [pc, #120]	; (80191a8 <z_init_static_threads+0x90>)
	k_sched_lock();
 801912e:	f000 fa4b 	bl	80195c8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8019132:	42ac      	cmp	r4, r5
 8019134:	d320      	bcc.n	8019178 <z_init_static_threads+0x60>
}
 8019136:	b007      	add	sp, #28
 8019138:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 801913c:	f000 ba58 	b.w	80195f0 <k_sched_unlock>
		z_setup_new_thread(
 8019140:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019144:	9305      	str	r3, [sp, #20]
 8019146:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801914a:	9304      	str	r3, [sp, #16]
 801914c:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8019150:	9303      	str	r3, [sp, #12]
 8019152:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8019156:	9302      	str	r3, [sp, #8]
 8019158:	f854 3c18 	ldr.w	r3, [r4, #-24]
 801915c:	9301      	str	r3, [sp, #4]
 801915e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8019162:	9300      	str	r3, [sp, #0]
 8019164:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
 8019168:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
 801916c:	f7ff ff76 	bl	801905c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8019170:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 8019174:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8019176:	e7d3      	b.n	8019120 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8019178:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801917a:	1c53      	adds	r3, r2, #1
 801917c:	d009      	beq.n	8019192 <z_init_static_threads+0x7a>
					    K_MSEC(thread_data->init_delay));
 801917e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			schedule_new_thread(thread_data->init_thread,
 8019182:	6820      	ldr	r0, [r4, #0]
 8019184:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8019188:	ea52 0103 	orrs.w	r1, r2, r3
 801918c:	d103      	bne.n	8019196 <z_init_static_threads+0x7e>
	z_sched_start(thread);
 801918e:	f000 f9cb 	bl	8019528 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8019192:	342c      	adds	r4, #44	; 0x2c
 8019194:	e7cd      	b.n	8019132 <z_init_static_threads+0x1a>
 8019196:	4639      	mov	r1, r7
 8019198:	3018      	adds	r0, #24
 801919a:	f000 fbb9 	bl	8019910 <z_add_timeout>
 801919e:	e7f8      	b.n	8019192 <z_init_static_threads+0x7a>
 80191a0:	0802899c 	.word	0x0802899c
 80191a4:	0802899c 	.word	0x0802899c
 80191a8:	0802810f 	.word	0x0802810f

080191ac <z_impl_k_sem_give>:
	return false;
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 80191ac:	b538      	push	{r3, r4, r5, lr}
 80191ae:	4604      	mov	r4, r0
	__asm__ volatile(
 80191b0:	f04f 0310 	mov.w	r3, #16
 80191b4:	f3ef 8511 	mrs	r5, BASEPRI
 80191b8:	f383 8812 	msr	BASEPRI_MAX, r3
 80191bc:	f3bf 8f6f 	isb	sy
	struct k_thread *thread;
	bool resched = true;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 80191c0:	f00e ffc0 	bl	8028144 <z_unpend_first_thread>

	if (thread != NULL) {
 80191c4:	b148      	cbz	r0, 80191da <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80191c6:	2200      	movs	r2, #0
 80191c8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 80191ca:	f00e ff5c 	bl	8028086 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		resched = handle_poll_events(sem);
	}

	if (resched) {
		z_reschedule(&lock, key);
 80191ce:	4629      	mov	r1, r5
 80191d0:	4807      	ldr	r0, [pc, #28]	; (80191f0 <z_impl_k_sem_give+0x44>)
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 80191d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
 80191d6:	f000 b995 	b.w	8019504 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80191da:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80191de:	429a      	cmp	r2, r3
 80191e0:	bf18      	it	ne
 80191e2:	3301      	addne	r3, #1
 80191e4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 80191e6:	f385 8811 	msr	BASEPRI, r5
 80191ea:	f3bf 8f6f 	isb	sy
}
 80191ee:	bd38      	pop	{r3, r4, r5, pc}
 80191f0:	24010e3f 	.word	0x24010e3f

080191f4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 80191f4:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
 80191f6:	f04f 0410 	mov.w	r4, #16
 80191fa:	f3ef 8111 	mrs	r1, BASEPRI
 80191fe:	f384 8812 	msr	BASEPRI_MAX, r4
 8019202:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8019206:	6884      	ldr	r4, [r0, #8]
 8019208:	b144      	cbz	r4, 801921c <z_impl_k_sem_take+0x28>
		sem->count--;
 801920a:	3c01      	subs	r4, #1
 801920c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 801920e:	f381 8811 	msr	BASEPRI, r1
 8019212:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8019216:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8019218:	b002      	add	sp, #8
 801921a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 801921c:	ea52 0403 	orrs.w	r4, r2, r3
 8019220:	d106      	bne.n	8019230 <z_impl_k_sem_take+0x3c>
 8019222:	f381 8811 	msr	BASEPRI, r1
 8019226:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 801922a:	f06f 000f 	mvn.w	r0, #15
 801922e:	e7f3      	b.n	8019218 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8019230:	e9cd 2300 	strd	r2, r3, [sp]
 8019234:	4602      	mov	r2, r0
 8019236:	4802      	ldr	r0, [pc, #8]	; (8019240 <z_impl_k_sem_take+0x4c>)
 8019238:	f000 f946 	bl	80194c8 <z_pend_curr>
	return ret;
 801923c:	e7ec      	b.n	8019218 <z_impl_k_sem_take+0x24>
 801923e:	bf00      	nop
 8019240:	24010e3f 	.word	0x24010e3f

08019244 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
 8019244:	89c3      	ldrh	r3, [r0, #14]
 8019246:	2b7f      	cmp	r3, #127	; 0x7f
 8019248:	d812      	bhi.n	8019270 <sliceable+0x2c>
	int ret = slice_ticks;
 801924a:	4b0a      	ldr	r3, [pc, #40]	; (8019274 <sliceable+0x30>)
 801924c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
 801924e:	b163      	cbz	r3, 801926a <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8019250:	4b09      	ldr	r3, [pc, #36]	; (8019278 <sliceable+0x34>)
 8019252:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	429a      	cmp	r2, r3
 801925a:	db09      	blt.n	8019270 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
 801925c:	7b43      	ldrb	r3, [r0, #13]
 801925e:	06db      	lsls	r3, r3, #27
 8019260:	d106      	bne.n	8019270 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
 8019262:	4b06      	ldr	r3, [pc, #24]	; (801927c <sliceable+0x38>)
 8019264:	1ac3      	subs	r3, r0, r3
 8019266:	bf18      	it	ne
 8019268:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
 801926a:	f003 0001 	and.w	r0, r3, #1
 801926e:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
 8019270:	2300      	movs	r3, #0
 8019272:	e7fa      	b.n	801926a <sliceable+0x26>
 8019274:	24010cec 	.word	0x24010cec
 8019278:	24010ce8 	.word	0x24010ce8
 801927c:	24000eb0 	.word	0x24000eb0

08019280 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
 8019280:	4b04      	ldr	r3, [pc, #16]	; (8019294 <slice_timeout+0x14>)

	slice_expired[cpu] = true;
 8019282:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
 8019284:	1ac0      	subs	r0, r0, r3
 8019286:	4b04      	ldr	r3, [pc, #16]	; (8019298 <slice_timeout+0x18>)
 8019288:	10c0      	asrs	r0, r0, #3
 801928a:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
 801928c:	4b03      	ldr	r3, [pc, #12]	; (801929c <slice_timeout+0x1c>)
 801928e:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
 8019290:	4770      	bx	lr
 8019292:	bf00      	nop
 8019294:	24000fb0 	.word	0x24000fb0
 8019298:	aaaaaaab 	.word	0xaaaaaaab
 801929c:	24010e3f 	.word	0x24010e3f

080192a0 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
	int cpu = _current_cpu->id;
 80192a0:	4b0e      	ldr	r3, [pc, #56]	; (80192dc <z_reset_time_slice+0x3c>)
{
 80192a2:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
 80192a4:	7c1e      	ldrb	r6, [r3, #16]
{
 80192a6:	4605      	mov	r5, r0

	z_abort_timeout(&slice_timeouts[cpu]);
 80192a8:	4c0d      	ldr	r4, [pc, #52]	; (80192e0 <z_reset_time_slice+0x40>)
 80192aa:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80192ae:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80192b2:	4620      	mov	r0, r4
 80192b4:	f00e ff78 	bl	80281a8 <z_abort_timeout>
	slice_expired[cpu] = false;
 80192b8:	4b0a      	ldr	r3, [pc, #40]	; (80192e4 <z_reset_time_slice+0x44>)
 80192ba:	2200      	movs	r2, #0
	if (sliceable(curr)) {
 80192bc:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
 80192be:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
 80192c0:	f7ff ffc0 	bl	8019244 <sliceable>
 80192c4:	b148      	cbz	r0, 80192da <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
 80192c6:	4b08      	ldr	r3, [pc, #32]	; (80192e8 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 80192c8:	4620      	mov	r0, r4
 80192ca:	4908      	ldr	r1, [pc, #32]	; (80192ec <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
 80192cc:	681a      	ldr	r2, [r3, #0]
 80192ce:	3a01      	subs	r2, #1
	}
}
 80192d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 80192d4:	17d3      	asrs	r3, r2, #31
 80192d6:	f000 bb1b 	b.w	8019910 <z_add_timeout>
}
 80192da:	bd70      	pop	{r4, r5, r6, pc}
 80192dc:	24010cc4 	.word	0x24010cc4
 80192e0:	24000fb0 	.word	0x24000fb0
 80192e4:	24010e3f 	.word	0x24010e3f
 80192e8:	24010cec 	.word	0x24010cec
 80192ec:	08019281 	.word	0x08019281

080192f0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 80192f0:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 80192f2:	4d0d      	ldr	r5, [pc, #52]	; (8019328 <update_cache+0x38>)
 80192f4:	462b      	mov	r3, r5
 80192f6:	f853 4f18 	ldr.w	r4, [r3, #24]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80192fa:	429c      	cmp	r4, r3
 80192fc:	d000      	beq.n	8019300 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80192fe:	b904      	cbnz	r4, 8019302 <update_cache+0x12>
 8019300:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8019302:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8019304:	b938      	cbnz	r0, 8019316 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 8019306:	7b5a      	ldrb	r2, [r3, #13]
 8019308:	06d2      	lsls	r2, r2, #27
 801930a:	d104      	bne.n	8019316 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 801930c:	69a2      	ldr	r2, [r4, #24]
 801930e:	b912      	cbnz	r2, 8019316 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 8019310:	89da      	ldrh	r2, [r3, #14]
 8019312:	2a7f      	cmp	r2, #127	; 0x7f
 8019314:	d805      	bhi.n	8019322 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 8019316:	429c      	cmp	r4, r3
 8019318:	d002      	beq.n	8019320 <update_cache+0x30>
			z_reset_time_slice(thread);
 801931a:	4620      	mov	r0, r4
 801931c:	f7ff ffc0 	bl	80192a0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 8019320:	4623      	mov	r3, r4
 8019322:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 8019324:	bd38      	pop	{r3, r4, r5, pc}
 8019326:	bf00      	nop
 8019328:	24010cc4 	.word	0x24010cc4

0801932c <move_thread_to_end_of_prio_q>:
{
 801932c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 801932e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 8019332:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
 8019334:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8019336:	2a00      	cmp	r2, #0
 8019338:	da04      	bge.n	8019344 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 801933a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801933e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8019340:	f00e fe67 	bl	8028012 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8019344:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 8019346:	4a15      	ldr	r2, [pc, #84]	; (801939c <move_thread_to_end_of_prio_q+0x70>)
 8019348:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801934c:	4610      	mov	r0, r2
 801934e:	734b      	strb	r3, [r1, #13]
 8019350:	f850 3f18 	ldr.w	r3, [r0, #24]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8019354:	69d4      	ldr	r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019356:	4283      	cmp	r3, r0
 8019358:	bf08      	it	eq
 801935a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801935c:	b923      	cbnz	r3, 8019368 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 801935e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 8019362:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8019364:	61d1      	str	r1, [r2, #28]
}
 8019366:	e00c      	b.n	8019382 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 8019368:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 801936c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8019370:	42b5      	cmp	r5, r6
 8019372:	d00e      	beq.n	8019392 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8019374:	42ae      	cmp	r6, r5
 8019376:	dd0c      	ble.n	8019392 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8019378:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 801937a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 801937e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8019380:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8019382:	6890      	ldr	r0, [r2, #8]
 8019384:	1a43      	subs	r3, r0, r1
 8019386:	4258      	negs	r0, r3
}
 8019388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 801938c:	4158      	adcs	r0, r3
 801938e:	f7ff bfaf 	b.w	80192f0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8019392:	429c      	cmp	r4, r3
 8019394:	d0e3      	beq.n	801935e <move_thread_to_end_of_prio_q+0x32>
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	e7e0      	b.n	801935c <move_thread_to_end_of_prio_q+0x30>
 801939a:	bf00      	nop
 801939c:	24010cc4 	.word	0x24010cc4

080193a0 <ready_thread>:
{
 80193a0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 80193a2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80193a6:	7b42      	ldrb	r2, [r0, #13]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	db29      	blt.n	8019400 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80193ac:	06d3      	lsls	r3, r2, #27
 80193ae:	d127      	bne.n	8019400 <ready_thread+0x60>
	return node->next != NULL;
 80193b0:	6983      	ldr	r3, [r0, #24]
 80193b2:	bb2b      	cbnz	r3, 8019400 <ready_thread+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 80193b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
	return list->head == list;
 80193b8:	4912      	ldr	r1, [pc, #72]	; (8019404 <ready_thread+0x64>)
 80193ba:	7342      	strb	r2, [r0, #13]
 80193bc:	460a      	mov	r2, r1
 80193be:	f852 4f18 	ldr.w	r4, [r2, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80193c2:	4294      	cmp	r4, r2
 80193c4:	bf18      	it	ne
 80193c6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 80193c8:	69cc      	ldr	r4, [r1, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80193ca:	b923      	cbnz	r3, 80193d6 <ready_thread+0x36>
	node->prev = tail;
 80193cc:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 80193d0:	6020      	str	r0, [r4, #0]
	list->tail = node;
 80193d2:	61c8      	str	r0, [r1, #28]
}
 80193d4:	e00c      	b.n	80193f0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 80193d6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 80193da:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 80193de:	42b5      	cmp	r5, r6
 80193e0:	d00a      	beq.n	80193f8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80193e2:	42ae      	cmp	r6, r5
 80193e4:	dd08      	ble.n	80193f8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 80193e6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80193e8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 80193ec:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80193ee:	6058      	str	r0, [r3, #4]
		update_cache(0);
 80193f0:	2000      	movs	r0, #0
}
 80193f2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 80193f4:	f7ff bf7c 	b.w	80192f0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80193f8:	42a3      	cmp	r3, r4
 80193fa:	d0e7      	beq.n	80193cc <ready_thread+0x2c>
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	e7e4      	b.n	80193ca <ready_thread+0x2a>
}
 8019400:	bc70      	pop	{r4, r5, r6}
 8019402:	4770      	bx	lr
 8019404:	24010cc4 	.word	0x24010cc4

08019408 <unready_thread>:
{
 8019408:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 801940a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 801940e:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
 8019410:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8019412:	2a00      	cmp	r2, #0
 8019414:	da04      	bge.n	8019420 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8019416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801941a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 801941c:	f00e fdf9 	bl	8028012 <sys_dlist_remove>
	update_cache(thread == _current);
 8019420:	4b04      	ldr	r3, [pc, #16]	; (8019434 <unready_thread+0x2c>)
 8019422:	6898      	ldr	r0, [r3, #8]
 8019424:	1a43      	subs	r3, r0, r1
 8019426:	4258      	negs	r0, r3
 8019428:	4158      	adcs	r0, r3
}
 801942a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 801942e:	f7ff bf5f 	b.w	80192f0 <update_cache>
 8019432:	bf00      	nop
 8019434:	24010cc4 	.word	0x24010cc4

08019438 <pend_locked>:
{
 8019438:	b570      	push	{r4, r5, r6, lr}
 801943a:	4615      	mov	r5, r2
 801943c:	461c      	mov	r4, r3
 801943e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 8019440:	f00e fdf9 	bl	8028036 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8019444:	f1b4 3fff 	cmp.w	r4, #4294967295
 8019448:	bf08      	it	eq
 801944a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
 801944e:	d008      	beq.n	8019462 <pend_locked+0x2a>
 8019450:	462a      	mov	r2, r5
 8019452:	4623      	mov	r3, r4
 8019454:	f106 0018 	add.w	r0, r6, #24
 8019458:	4902      	ldr	r1, [pc, #8]	; (8019464 <pend_locked+0x2c>)
}
 801945a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801945e:	f000 ba57 	b.w	8019910 <z_add_timeout>
 8019462:	bd70      	pop	{r4, r5, r6, pc}
 8019464:	0802810f 	.word	0x0802810f

08019468 <z_time_slice>:
{
 8019468:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 801946a:	f04f 0310 	mov.w	r3, #16
 801946e:	f3ef 8511 	mrs	r5, BASEPRI
 8019472:	f383 8812 	msr	BASEPRI_MAX, r3
 8019476:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
 801947a:	4b10      	ldr	r3, [pc, #64]	; (80194bc <z_time_slice+0x54>)
	if (pending_current == curr) {
 801947c:	4a10      	ldr	r2, [pc, #64]	; (80194c0 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
 801947e:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
 8019480:	6810      	ldr	r0, [r2, #0]
 8019482:	42a0      	cmp	r0, r4
 8019484:	d106      	bne.n	8019494 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
 8019486:	f7ff ff0b 	bl	80192a0 <z_reset_time_slice>
	__asm__ volatile(
 801948a:	f385 8811 	msr	BASEPRI, r5
 801948e:	f3bf 8f6f 	isb	sy
}
 8019492:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8019494:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 8019496:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
 8019498:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 801949a:	4a0a      	ldr	r2, [pc, #40]	; (80194c4 <z_time_slice+0x5c>)
 801949c:	5cd3      	ldrb	r3, [r2, r3]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d0f3      	beq.n	801948a <z_time_slice+0x22>
 80194a2:	4620      	mov	r0, r4
 80194a4:	f7ff fece 	bl	8019244 <sliceable>
 80194a8:	2800      	cmp	r0, #0
 80194aa:	d0ee      	beq.n	801948a <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
 80194ac:	7b63      	ldrb	r3, [r4, #13]
 80194ae:	06db      	lsls	r3, r3, #27
 80194b0:	d102      	bne.n	80194b8 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
 80194b2:	4620      	mov	r0, r4
 80194b4:	f7ff ff3a 	bl	801932c <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
 80194b8:	4620      	mov	r0, r4
 80194ba:	e7e4      	b.n	8019486 <z_time_slice+0x1e>
 80194bc:	24010cc4 	.word	0x24010cc4
 80194c0:	24010ce4 	.word	0x24010ce4
 80194c4:	24010e3f 	.word	0x24010e3f

080194c8 <z_pend_curr>:
	pending_current = _current;
 80194c8:	480c      	ldr	r0, [pc, #48]	; (80194fc <z_pend_curr+0x34>)
{
 80194ca:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 80194cc:	4d0c      	ldr	r5, [pc, #48]	; (8019500 <z_pend_curr+0x38>)
{
 80194ce:	460c      	mov	r4, r1
	pending_current = _current;
 80194d0:	6886      	ldr	r6, [r0, #8]
{
 80194d2:	4611      	mov	r1, r2
	pending_current = _current;
 80194d4:	602e      	str	r6, [r5, #0]
{
 80194d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 80194da:	f04f 0610 	mov.w	r6, #16
 80194de:	f3ef 8511 	mrs	r5, BASEPRI
 80194e2:	f386 8812 	msr	BASEPRI_MAX, r6
 80194e6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 80194ea:	6880      	ldr	r0, [r0, #8]
 80194ec:	f7ff ffa4 	bl	8019438 <pend_locked>
	ret = arch_swap(key);
 80194f0:	4620      	mov	r0, r4
}
 80194f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80194f6:	f7e8 bef1 	b.w	80022dc <arch_swap>
 80194fa:	bf00      	nop
 80194fc:	24010cc4 	.word	0x24010cc4
 8019500:	24010ce4 	.word	0x24010ce4

08019504 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8019504:	b949      	cbnz	r1, 801951a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019506:	f3ef 8005 	mrs	r0, IPSR
 801950a:	b930      	cbnz	r0, 801951a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 801950c:	4b05      	ldr	r3, [pc, #20]	; (8019524 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 801950e:	695a      	ldr	r2, [r3, #20]
 8019510:	689b      	ldr	r3, [r3, #8]
 8019512:	429a      	cmp	r2, r3
 8019514:	d001      	beq.n	801951a <z_reschedule+0x16>
 8019516:	f7e8 bee1 	b.w	80022dc <arch_swap>
	__asm__ volatile(
 801951a:	f381 8811 	msr	BASEPRI, r1
 801951e:	f3bf 8f6f 	isb	sy
}
 8019522:	4770      	bx	lr
 8019524:	24010cc4 	.word	0x24010cc4

08019528 <z_sched_start>:
{
 8019528:	b510      	push	{r4, lr}
	__asm__ volatile(
 801952a:	f04f 0210 	mov.w	r2, #16
 801952e:	f3ef 8411 	mrs	r4, BASEPRI
 8019532:	f382 8812 	msr	BASEPRI_MAX, r2
 8019536:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 801953a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 801953c:	0751      	lsls	r1, r2, #29
 801953e:	d404      	bmi.n	801954a <z_sched_start+0x22>
	__asm__ volatile(
 8019540:	f384 8811 	msr	BASEPRI, r4
 8019544:	f3bf 8f6f 	isb	sy
}
 8019548:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 801954a:	f022 0204 	bic.w	r2, r2, #4
 801954e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8019550:	f7ff ff26 	bl	80193a0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8019554:	4621      	mov	r1, r4
 8019556:	4802      	ldr	r0, [pc, #8]	; (8019560 <z_sched_start+0x38>)
}
 8019558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 801955c:	f7ff bfd2 	b.w	8019504 <z_reschedule>
 8019560:	24010e40 	.word	0x24010e40

08019564 <z_impl_k_thread_suspend>:
{
 8019564:	b570      	push	{r4, r5, r6, lr}
 8019566:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8019568:	3018      	adds	r0, #24
 801956a:	f00e fe1d 	bl	80281a8 <z_abort_timeout>
	__asm__ volatile(
 801956e:	f04f 0310 	mov.w	r3, #16
 8019572:	f3ef 8611 	mrs	r6, BASEPRI
 8019576:	f383 8812 	msr	BASEPRI_MAX, r3
 801957a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 801957e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 8019582:	7b63      	ldrb	r3, [r4, #13]
 8019584:	2a00      	cmp	r2, #0
 8019586:	da05      	bge.n	8019594 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8019588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
 801958c:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
 801958e:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8019590:	f00e fd3f 	bl	8028012 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8019594:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 8019596:	4d0b      	ldr	r5, [pc, #44]	; (80195c4 <z_impl_k_thread_suspend+0x60>)
 8019598:	f043 0310 	orr.w	r3, r3, #16
 801959c:	68a8      	ldr	r0, [r5, #8]
 801959e:	7363      	strb	r3, [r4, #13]
 80195a0:	1b03      	subs	r3, r0, r4
 80195a2:	4258      	negs	r0, r3
 80195a4:	4158      	adcs	r0, r3
 80195a6:	f7ff fea3 	bl	80192f0 <update_cache>
	__asm__ volatile(
 80195aa:	f386 8811 	msr	BASEPRI, r6
 80195ae:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 80195b2:	68ab      	ldr	r3, [r5, #8]
 80195b4:	42a3      	cmp	r3, r4
 80195b6:	d103      	bne.n	80195c0 <z_impl_k_thread_suspend+0x5c>
}
 80195b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 80195bc:	f00e bdea 	b.w	8028194 <z_reschedule_unlocked>
}
 80195c0:	bd70      	pop	{r4, r5, r6, pc}
 80195c2:	bf00      	nop
 80195c4:	24010cc4 	.word	0x24010cc4

080195c8 <k_sched_lock>:
	__asm__ volatile(
 80195c8:	f04f 0310 	mov.w	r3, #16
 80195cc:	f3ef 8111 	mrs	r1, BASEPRI
 80195d0:	f383 8812 	msr	BASEPRI_MAX, r3
 80195d4:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 80195d8:	4b04      	ldr	r3, [pc, #16]	; (80195ec <k_sched_lock+0x24>)
 80195da:	689a      	ldr	r2, [r3, #8]
 80195dc:	7bd3      	ldrb	r3, [r2, #15]
 80195de:	3b01      	subs	r3, #1
 80195e0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80195e2:	f381 8811 	msr	BASEPRI, r1
 80195e6:	f3bf 8f6f 	isb	sy
}
 80195ea:	4770      	bx	lr
 80195ec:	24010cc4 	.word	0x24010cc4

080195f0 <k_sched_unlock>:
{
 80195f0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80195f2:	f04f 0310 	mov.w	r3, #16
 80195f6:	f3ef 8411 	mrs	r4, BASEPRI
 80195fa:	f383 8812 	msr	BASEPRI_MAX, r3
 80195fe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8019602:	4b08      	ldr	r3, [pc, #32]	; (8019624 <k_sched_unlock+0x34>)
		update_cache(0);
 8019604:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 8019606:	689a      	ldr	r2, [r3, #8]
 8019608:	7bd3      	ldrb	r3, [r2, #15]
 801960a:	3301      	adds	r3, #1
 801960c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 801960e:	f7ff fe6f 	bl	80192f0 <update_cache>
	__asm__ volatile(
 8019612:	f384 8811 	msr	BASEPRI, r4
 8019616:	f3bf 8f6f 	isb	sy
}
 801961a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 801961e:	f00e bdb9 	b.w	8028194 <z_reschedule_unlocked>
 8019622:	bf00      	nop
 8019624:	24010cc4 	.word	0x24010cc4

08019628 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8019628:	4b02      	ldr	r3, [pc, #8]	; (8019634 <z_sched_init+0xc>)
 801962a:	f103 0218 	add.w	r2, r3, #24
	list->tail = (sys_dnode_t *)list;
 801962e:	e9c3 2206 	strd	r2, r2, [r3, #24]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
 8019632:	4770      	bx	lr
 8019634:	24010cc4 	.word	0x24010cc4

08019638 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 8019638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 801963a:	f04f 0310 	mov.w	r3, #16
 801963e:	f3ef 8511 	mrs	r5, BASEPRI
 8019642:	f383 8812 	msr	BASEPRI_MAX, r3
 8019646:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 801964a:	4919      	ldr	r1, [pc, #100]	; (80196b0 <z_impl_k_yield+0x78>)
 801964c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 801964e:	7b43      	ldrb	r3, [r0, #13]
 8019650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019654:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8019656:	f00e fcdc 	bl	8028012 <sys_dlist_remove>
	}
	queue_thread(_current);
 801965a:	688b      	ldr	r3, [r1, #8]
	return list->head == list;
 801965c:	4608      	mov	r0, r1
	thread->base.thread_state |= _THREAD_QUEUED;
 801965e:	7b5a      	ldrb	r2, [r3, #13]
 8019660:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019664:	735a      	strb	r2, [r3, #13]
 8019666:	f850 2f18 	ldr.w	r2, [r0, #24]!
	return (node == list->tail) ? NULL : node->next;
 801966a:	69cc      	ldr	r4, [r1, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801966c:	4282      	cmp	r2, r0
 801966e:	bf08      	it	eq
 8019670:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8019672:	b922      	cbnz	r2, 801967e <z_impl_k_yield+0x46>
	node->prev = tail;
 8019674:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
 8019678:	6023      	str	r3, [r4, #0]
	list->tail = node;
 801967a:	61cb      	str	r3, [r1, #28]
}
 801967c:	e00c      	b.n	8019698 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
 801967e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8019682:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 8019686:	42be      	cmp	r6, r7
 8019688:	d00e      	beq.n	80196a8 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
 801968a:	42b7      	cmp	r7, r6
 801968c:	dd0c      	ble.n	80196a8 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
 801968e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8019690:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8019694:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8019696:	6053      	str	r3, [r2, #4]
	update_cache(1);
 8019698:	2001      	movs	r0, #1
 801969a:	f7ff fe29 	bl	80192f0 <update_cache>
 801969e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 80196a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80196a4:	f7e8 be1a 	b.w	80022dc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 80196a8:	42a2      	cmp	r2, r4
 80196aa:	d0e3      	beq.n	8019674 <z_impl_k_yield+0x3c>
 80196ac:	6812      	ldr	r2, [r2, #0]
 80196ae:	e7e0      	b.n	8019672 <z_impl_k_yield+0x3a>
 80196b0:	24010cc4 	.word	0x24010cc4

080196b4 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 80196b4:	ea50 0301 	orrs.w	r3, r0, r1
{
 80196b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196bc:	4605      	mov	r5, r0
 80196be:	460e      	mov	r6, r1
	if (ticks == 0) {
 80196c0:	d103      	bne.n	80196ca <z_tick_sleep+0x16>
	z_impl_k_yield();
 80196c2:	f7ff ffb9 	bl	8019638 <z_impl_k_yield>
		k_yield();
		return 0;
 80196c6:	2000      	movs	r0, #0
 80196c8:	e02c      	b.n	8019724 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 80196ca:	1c83      	adds	r3, r0, #2
 80196cc:	f171 33ff 	sbcs.w	r3, r1, #4294967295
 80196d0:	db2a      	blt.n	8019728 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 80196d2:	f00e fd7f 	bl	80281d4 <sys_clock_tick_get_32>
 80196d6:	182c      	adds	r4, r5, r0
 80196d8:	f04f 0310 	mov.w	r3, #16
 80196dc:	f3ef 8811 	mrs	r8, BASEPRI
 80196e0:	f383 8812 	msr	BASEPRI_MAX, r3
 80196e4:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 80196e8:	4f11      	ldr	r7, [pc, #68]	; (8019730 <z_tick_sleep+0x7c>)
 80196ea:	4b12      	ldr	r3, [pc, #72]	; (8019734 <z_tick_sleep+0x80>)
 80196ec:	68b8      	ldr	r0, [r7, #8]
 80196ee:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 80196f0:	f7ff fe8a 	bl	8019408 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80196f4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80196f6:	462a      	mov	r2, r5
 80196f8:	490f      	ldr	r1, [pc, #60]	; (8019738 <z_tick_sleep+0x84>)
 80196fa:	4633      	mov	r3, r6
 80196fc:	3018      	adds	r0, #24
 80196fe:	f000 f907 	bl	8019910 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8019702:	68ba      	ldr	r2, [r7, #8]
 8019704:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8019706:	7b53      	ldrb	r3, [r2, #13]
 8019708:	f043 0310 	orr.w	r3, r3, #16
 801970c:	7353      	strb	r3, [r2, #13]
 801970e:	f7e8 fde5 	bl	80022dc <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8019712:	f00e fd5f 	bl	80281d4 <sys_clock_tick_get_32>
 8019716:	1a20      	subs	r0, r4, r0
 8019718:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 801971c:	2801      	cmp	r0, #1
 801971e:	f173 0300 	sbcs.w	r3, r3, #0
 8019722:	dbd0      	blt.n	80196c6 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
 8019724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8019728:	f06f 0401 	mvn.w	r4, #1
 801972c:	1a24      	subs	r4, r4, r0
 801972e:	e7d3      	b.n	80196d8 <z_tick_sleep+0x24>
 8019730:	24010cc4 	.word	0x24010cc4
 8019734:	24010ce4 	.word	0x24010ce4
 8019738:	0802810f 	.word	0x0802810f

0801973c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 801973c:	f1b1 3fff 	cmp.w	r1, #4294967295
 8019740:	bf08      	it	eq
 8019742:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 8019746:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8019748:	d106      	bne.n	8019758 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 801974a:	4b07      	ldr	r3, [pc, #28]	; (8019768 <z_impl_k_sleep+0x2c>)
 801974c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 801974e:	f7ff ff09 	bl	8019564 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 8019752:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8019756:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8019758:	f7ff ffac 	bl	80196b4 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 801975c:	220a      	movs	r2, #10
 801975e:	2300      	movs	r3, #0
 8019760:	17c1      	asrs	r1, r0, #31
 8019762:	f7e6 fdb3 	bl	80002cc <__aeabi_uldivmod>
	return ret;
 8019766:	e7f6      	b.n	8019756 <z_impl_k_sleep+0x1a>
 8019768:	24010cc4 	.word	0x24010cc4

0801976c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 801976c:	4b01      	ldr	r3, [pc, #4]	; (8019774 <z_impl_z_current_get+0x8>)
 801976e:	6898      	ldr	r0, [r3, #8]
 8019770:	4770      	bx	lr
 8019772:	bf00      	nop
 8019774:	24010cc4 	.word	0x24010cc4

08019778 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8019778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801977c:	4604      	mov	r4, r0
 801977e:	f04f 0310 	mov.w	r3, #16
 8019782:	f3ef 8611 	mrs	r6, BASEPRI
 8019786:	f383 8812 	msr	BASEPRI_MAX, r3
 801978a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 801978e:	7b03      	ldrb	r3, [r0, #12]
 8019790:	07d9      	lsls	r1, r3, #31
 8019792:	d50b      	bpl.n	80197ac <z_thread_abort+0x34>
	__asm__ volatile(
 8019794:	f386 8811 	msr	BASEPRI, r6
 8019798:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 801979c:	4040      	eors	r0, r0
 801979e:	f380 8811 	msr	BASEPRI, r0
 80197a2:	f04f 0004 	mov.w	r0, #4
 80197a6:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 80197a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 80197ac:	7b43      	ldrb	r3, [r0, #13]
 80197ae:	071a      	lsls	r2, r3, #28
 80197b0:	d504      	bpl.n	80197bc <z_thread_abort+0x44>
 80197b2:	f386 8811 	msr	BASEPRI, r6
 80197b6:	f3bf 8f6f 	isb	sy
 80197ba:	e7f5      	b.n	80197a8 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80197bc:	f023 0220 	bic.w	r2, r3, #32
 80197c0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 80197c4:	09d2      	lsrs	r2, r2, #7
 80197c6:	d120      	bne.n	801980a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80197c8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 80197ca:	68a3      	ldr	r3, [r4, #8]
 80197cc:	b113      	cbz	r3, 80197d4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 80197ce:	4620      	mov	r0, r4
 80197d0:	f00e fc27 	bl	8028022 <unpend_thread_no_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80197d4:	f104 0758 	add.w	r7, r4, #88	; 0x58
 80197d8:	f04f 0800 	mov.w	r8, #0
	return z_abort_timeout(&thread->base.timeout);
 80197dc:	f104 0018 	add.w	r0, r4, #24
 80197e0:	f00e fce2 	bl	80281a8 <z_abort_timeout>
	return list->head == list;
 80197e4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80197e6:	42bd      	cmp	r5, r7
 80197e8:	d000      	beq.n	80197ec <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80197ea:	b9b5      	cbnz	r5, 801981a <z_thread_abort+0xa2>
		update_cache(1);
 80197ec:	2001      	movs	r0, #1
 80197ee:	f7ff fd7f 	bl	80192f0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 80197f2:	4b10      	ldr	r3, [pc, #64]	; (8019834 <z_thread_abort+0xbc>)
 80197f4:	689b      	ldr	r3, [r3, #8]
 80197f6:	42a3      	cmp	r3, r4
 80197f8:	d1db      	bne.n	80197b2 <z_thread_abort+0x3a>
 80197fa:	f3ef 8305 	mrs	r3, IPSR
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d1d7      	bne.n	80197b2 <z_thread_abort+0x3a>
 8019802:	4630      	mov	r0, r6
 8019804:	f7e8 fd6a 	bl	80022dc <arch_swap>
	return ret;
 8019808:	e7d3      	b.n	80197b2 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 801980a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 801980e:	f043 0308 	orr.w	r3, r3, #8
 8019812:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8019814:	f00e fbfd 	bl	8028012 <sys_dlist_remove>
}
 8019818:	e7d7      	b.n	80197ca <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 801981a:	4628      	mov	r0, r5
 801981c:	f00e fc01 	bl	8028022 <unpend_thread_no_timeout>
 8019820:	f105 0018 	add.w	r0, r5, #24
 8019824:	f00e fcc0 	bl	80281a8 <z_abort_timeout>
		ready_thread(thread);
 8019828:	4628      	mov	r0, r5
 801982a:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
 801982e:	f7ff fdb7 	bl	80193a0 <ready_thread>
 8019832:	e7d7      	b.n	80197e4 <z_thread_abort+0x6c>
 8019834:	24010cc4 	.word	0x24010cc4

08019838 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8019838:	4809      	ldr	r0, [pc, #36]	; (8019860 <z_data_copy+0x28>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 801983a:	4a0a      	ldr	r2, [pc, #40]	; (8019864 <z_data_copy+0x2c>)
 801983c:	490a      	ldr	r1, [pc, #40]	; (8019868 <z_data_copy+0x30>)
 801983e:	1a12      	subs	r2, r2, r0
{
 8019840:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8019842:	f00e fbc1 	bl	8027fc8 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8019846:	4a09      	ldr	r2, [pc, #36]	; (801986c <z_data_copy+0x34>)
 8019848:	4909      	ldr	r1, [pc, #36]	; (8019870 <z_data_copy+0x38>)
 801984a:	480a      	ldr	r0, [pc, #40]	; (8019874 <z_data_copy+0x3c>)
 801984c:	f00e fbbc 	bl	8027fc8 <z_early_memcpy>
	z_early_memcpy(&__itcm_start, &__itcm_load_start,
		       (uintptr_t) &__itcm_size);
#endif
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_dtcm), okay)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
		       __dtcm_data_end - __dtcm_data_start);
 8019850:	4809      	ldr	r0, [pc, #36]	; (8019878 <z_data_copy+0x40>)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
 8019852:	4a0a      	ldr	r2, [pc, #40]	; (801987c <z_data_copy+0x44>)
 8019854:	490a      	ldr	r1, [pc, #40]	; (8019880 <z_data_copy+0x48>)
 8019856:	1a12      	subs	r2, r2, r0
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8019858:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
 801985c:	f00e bbb4 	b.w	8027fc8 <z_early_memcpy>
 8019860:	24000000 	.word	0x24000000
 8019864:	240001dc 	.word	0x240001dc
 8019868:	0802e0e8 	.word	0x0802e0e8
 801986c:	00000000 	.word	0x00000000
 8019870:	0802e0e8 	.word	0x0802e0e8
 8019874:	24000000 	.word	0x24000000
 8019878:	20000000 	.word	0x20000000
 801987c:	20000000 	.word	0x20000000
 8019880:	0802e2c4 	.word	0x0802e2c4

08019884 <elapsed>:
	 *
	 * The distinction is implemented by looking at announce_remaining which
	 * will be non-zero while sys_clock_announce() is executing and zero
	 * otherwise.
	 */
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8019884:	4b03      	ldr	r3, [pc, #12]	; (8019894 <elapsed+0x10>)
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	b90b      	cbnz	r3, 801988e <elapsed+0xa>
 801988a:	f7ea bd93 	b.w	80043b4 <sys_clock_elapsed>
}
 801988e:	2000      	movs	r0, #0
 8019890:	4770      	bx	lr
 8019892:	bf00      	nop
 8019894:	24010cf0 	.word	0x24010cf0

08019898 <next_timeout>:
	return list->head == list;
 8019898:	4b0e      	ldr	r3, [pc, #56]	; (80198d4 <next_timeout+0x3c>)

static int32_t next_timeout(void)
{
 801989a:	b510      	push	{r4, lr}
 801989c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801989e:	429c      	cmp	r4, r3
 80198a0:	d104      	bne.n	80198ac <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 80198a2:	f7ff ffef 	bl	8019884 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 80198a6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
 80198aa:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 80198ac:	f7ff ffea 	bl	8019884 <elapsed>
	if ((to == NULL) ||
 80198b0:	2c00      	cmp	r4, #0
 80198b2:	d0f8      	beq.n	80198a6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 80198b4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80198b8:	1a1b      	subs	r3, r3, r0
 80198ba:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 80198be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80198c2:	f172 0100 	sbcs.w	r1, r2, #0
 80198c6:	daee      	bge.n	80198a6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 80198c8:	2a00      	cmp	r2, #0
 80198ca:	bfac      	ite	ge
 80198cc:	4618      	movge	r0, r3
 80198ce:	2000      	movlt	r0, #0
	return ret;
 80198d0:	e7eb      	b.n	80198aa <next_timeout+0x12>
 80198d2:	bf00      	nop
 80198d4:	24000128 	.word	0x24000128

080198d8 <remove_timeout>:
{
 80198d8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80198da:	b170      	cbz	r0, 80198fa <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 80198dc:	4b0b      	ldr	r3, [pc, #44]	; (801990c <remove_timeout+0x34>)
 80198de:	685b      	ldr	r3, [r3, #4]
 80198e0:	4298      	cmp	r0, r3
 80198e2:	d00a      	beq.n	80198fa <remove_timeout+0x22>
 80198e4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 80198e6:	b143      	cbz	r3, 80198fa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80198e8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80198ec:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80198f0:	1912      	adds	r2, r2, r4
 80198f2:	eb41 0105 	adc.w	r1, r1, r5
 80198f6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 80198fa:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 80198fe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8019900:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8019902:	2300      	movs	r3, #0
	node->prev = NULL;
 8019904:	e9c0 3300 	strd	r3, r3, [r0]
}
 8019908:	bd30      	pop	{r4, r5, pc}
 801990a:	bf00      	nop
 801990c:	24000128 	.word	0x24000128

08019910 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8019910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019914:	bf08      	it	eq
 8019916:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 801991a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801991c:	4604      	mov	r4, r0
 801991e:	461d      	mov	r5, r3
 8019920:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8019922:	d05c      	beq.n	80199de <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8019924:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8019926:	f04f 0310 	mov.w	r3, #16
 801992a:	f3ef 8711 	mrs	r7, BASEPRI
 801992e:	f383 8812 	msr	BASEPRI_MAX, r3
 8019932:	f3bf 8f6f 	isb	sy

	K_SPINLOCK(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8019936:	3201      	adds	r2, #1
 8019938:	f175 33ff 	sbcs.w	r3, r5, #4294967295
 801993c:	da24      	bge.n	8019988 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 801993e:	492d      	ldr	r1, [pc, #180]	; (80199f4 <z_add_timeout+0xe4>)
 8019940:	f06f 0301 	mvn.w	r3, #1
 8019944:	e9d1 2000 	ldrd	r2, r0, [r1]
 8019948:	1a9b      	subs	r3, r3, r2
 801994a:	f04f 32ff 	mov.w	r2, #4294967295
 801994e:	eb62 0000 	sbc.w	r0, r2, r0
 8019952:	1b9e      	subs	r6, r3, r6
 8019954:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 8019958:	2e01      	cmp	r6, #1
 801995a:	f170 0300 	sbcs.w	r3, r0, #0
 801995e:	da01      	bge.n	8019964 <z_add_timeout+0x54>
 8019960:	2601      	movs	r6, #1
 8019962:	2000      	movs	r0, #0
 8019964:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 8019968:	4e23      	ldr	r6, [pc, #140]	; (80199f8 <z_add_timeout+0xe8>)
 801996a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 801996e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019970:	45b4      	cmp	ip, r6
 8019972:	bf08      	it	eq
 8019974:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 8019978:	f1bc 0f00 	cmp.w	ip, #0
 801997c:	d10d      	bne.n	801999a <z_add_timeout+0x8a>
	node->prev = tail;
 801997e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 8019982:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8019984:	6074      	str	r4, [r6, #4]
}
 8019986:	e01c      	b.n	80199c2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 8019988:	f7ff ff7c 	bl	8019884 <elapsed>
 801998c:	3601      	adds	r6, #1
 801998e:	f145 0500 	adc.w	r5, r5, #0
 8019992:	1836      	adds	r6, r6, r0
 8019994:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8019998:	e7e4      	b.n	8019964 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 801999a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 801999e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 80199a2:	4293      	cmp	r3, r2
 80199a4:	eb71 0e00 	sbcs.w	lr, r1, r0
 80199a8:	da1a      	bge.n	80199e0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
 80199aa:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 80199ac:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80199b0:	eb60 0001 	sbc.w	r0, r0, r1
 80199b4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 80199b8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 80199bc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80199be:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 80199c2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80199c4:	42b3      	cmp	r3, r6
 80199c6:	d006      	beq.n	80199d6 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80199c8:	429c      	cmp	r4, r3
 80199ca:	d104      	bne.n	80199d6 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
 80199cc:	f7ff ff64 	bl	8019898 <next_timeout>
 80199d0:	2100      	movs	r1, #0
 80199d2:	f7ea fc71 	bl	80042b8 <sys_clock_set_timeout>
	__asm__ volatile(
 80199d6:	f387 8811 	msr	BASEPRI, r7
 80199da:	f3bf 8f6f 	isb	sy
		}
	}
}
 80199de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 80199e0:	1a9b      	subs	r3, r3, r2
 80199e2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 80199e6:	45ac      	cmp	ip, r5
 80199e8:	e9c4 3104 	strd	r3, r1, [r4, #16]
 80199ec:	d0c7      	beq.n	801997e <z_add_timeout+0x6e>
 80199ee:	f8dc c000 	ldr.w	ip, [ip]
 80199f2:	e7c1      	b.n	8019978 <z_add_timeout+0x68>
 80199f4:	24000fc8 	.word	0x24000fc8
 80199f8:	24000128 	.word	0x24000128

080199fc <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
 80199fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
 8019a00:	f04f 0310 	mov.w	r3, #16
 8019a04:	f3ef 8c11 	mrs	ip, BASEPRI
 8019a08:	f383 8812 	msr	BASEPRI_MAX, r3
 8019a0c:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8019a10:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8019ac8 <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
 8019a14:	2400      	movs	r4, #0
	announce_remaining = ticks;
 8019a16:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8019acc <sys_clock_announce+0xd0>
		t->dticks = 0;
 8019a1a:	2500      	movs	r5, #0
		curr_tick += dt;
 8019a1c:	4f2c      	ldr	r7, [pc, #176]	; (8019ad0 <sys_clock_announce+0xd4>)
	announce_remaining = ticks;
 8019a1e:	f8c9 0000 	str.w	r0, [r9]
 8019a22:	f8da 0000 	ldr.w	r0, [sl]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019a26:	4550      	cmp	r0, sl
 8019a28:	bf08      	it	eq
 8019a2a:	2000      	moveq	r0, #0
	     (t != NULL) && (t->dticks <= announce_remaining);
 8019a2c:	f8d9 3000 	ldr.w	r3, [r9]
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 8019a30:	46e0      	mov	r8, ip
		curr_tick += dt;
 8019a32:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
 8019a36:	b380      	cbz	r0, 8019a9a <sys_clock_announce+0x9e>
 8019a38:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 8019a3c:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
 8019a40:	42b3      	cmp	r3, r6
 8019a42:	eb7e 0b0c 	sbcs.w	fp, lr, ip
 8019a46:	da05      	bge.n	8019a54 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 8019a48:	1af6      	subs	r6, r6, r3
 8019a4a:	eb6c 040e 	sbc.w	r4, ip, lr
 8019a4e:	e9c0 6404 	strd	r6, r4, [r0, #16]
 8019a52:	e022      	b.n	8019a9a <sys_clock_announce+0x9e>
		curr_tick += dt;
 8019a54:	18b2      	adds	r2, r6, r2
 8019a56:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
 8019a5a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
 8019a5e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
 8019a62:	f7ff ff39 	bl	80198d8 <remove_timeout>
	__asm__ volatile(
 8019a66:	f388 8811 	msr	BASEPRI, r8
 8019a6a:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8019a6e:	6883      	ldr	r3, [r0, #8]
 8019a70:	4798      	blx	r3
	__asm__ volatile(
 8019a72:	f04f 0310 	mov.w	r3, #16
 8019a76:	f3ef 8811 	mrs	r8, BASEPRI
 8019a7a:	f383 8812 	msr	BASEPRI_MAX, r3
 8019a7e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 8019a82:	f8d9 3000 	ldr.w	r3, [r9]
	k.key = arch_irq_lock();
 8019a86:	46c4      	mov	ip, r8
	return list->head == list;
 8019a88:	f8da 0000 	ldr.w	r0, [sl]
 8019a8c:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019a8e:	4550      	cmp	r0, sl
 8019a90:	f8c9 3000 	str.w	r3, [r9]
 8019a94:	d1ca      	bne.n	8019a2c <sys_clock_announce+0x30>
		curr_tick += dt;
 8019a96:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
 8019a9a:	189a      	adds	r2, r3, r2
	announce_remaining = 0;
 8019a9c:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
 8019aa0:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
 8019aa4:	f8c9 4000 	str.w	r4, [r9]
	curr_tick += announce_remaining;
 8019aa8:	e9c7 2300 	strd	r2, r3, [r7]

	sys_clock_set_timeout(next_timeout(), false);
 8019aac:	f7ff fef4 	bl	8019898 <next_timeout>
 8019ab0:	4621      	mov	r1, r4
 8019ab2:	f7ea fc01 	bl	80042b8 <sys_clock_set_timeout>
	__asm__ volatile(
 8019ab6:	f388 8811 	msr	BASEPRI, r8
 8019aba:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
 8019abe:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
 8019ac2:	f7ff bcd1 	b.w	8019468 <z_time_slice>
 8019ac6:	bf00      	nop
 8019ac8:	24000128 	.word	0x24000128
 8019acc:	24010cf0 	.word	0x24010cf0
 8019ad0:	24000fc8 	.word	0x24000fc8

08019ad4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8019ad4:	b510      	push	{r4, lr}
	__asm__ volatile(
 8019ad6:	f04f 0310 	mov.w	r3, #16
 8019ada:	f3ef 8411 	mrs	r4, BASEPRI
 8019ade:	f383 8812 	msr	BASEPRI_MAX, r3
 8019ae2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	K_SPINLOCK(&timeout_lock) {
		t = curr_tick + elapsed();
 8019ae6:	f7ff fecd 	bl	8019884 <elapsed>
 8019aea:	4a06      	ldr	r2, [pc, #24]	; (8019b04 <sys_clock_tick_get+0x30>)
 8019aec:	4603      	mov	r3, r0
 8019aee:	e9d2 0100 	ldrd	r0, r1, [r2]
 8019af2:	1818      	adds	r0, r3, r0
 8019af4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
 8019af8:	f384 8811 	msr	BASEPRI, r4
 8019afc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8019b00:	bd10      	pop	{r4, pc}
 8019b02:	bf00      	nop
 8019b04:	24000fc8 	.word	0x24000fc8

08019b08 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8019b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b0a:	4604      	mov	r4, r0
	__asm__ volatile(
 8019b0c:	f04f 0310 	mov.w	r3, #16
 8019b10:	f3ef 8711 	mrs	r7, BASEPRI
 8019b14:	f383 8812 	msr	BASEPRI_MAX, r3
 8019b18:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
 8019b1c:	6802      	ldr	r2, [r0, #0]
 8019b1e:	b122      	cbz	r2, 8019b2a <z_timer_expiration_handler+0x22>
	__asm__ volatile(
 8019b20:	f387 8811 	msr	BASEPRI, r7
 8019b24:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 8019b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8019b2a:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
 8019b2e:	1c58      	adds	r0, r3, #1
 8019b30:	f146 0100 	adc.w	r1, r6, #0
 8019b34:	2802      	cmp	r0, #2
 8019b36:	f171 0100 	sbcs.w	r1, r1, #0
 8019b3a:	d327      	bcc.n	8019b8c <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
 8019b3c:	2b01      	cmp	r3, #1
 8019b3e:	f176 0100 	sbcs.w	r1, r6, #0
 8019b42:	bfbc      	itt	lt
 8019b44:	2301      	movlt	r3, #1
 8019b46:	4616      	movlt	r6, r2
 8019b48:	1e5d      	subs	r5, r3, #1
 8019b4a:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
 8019b4e:	f00e fb45 	bl	80281dc <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
 8019b52:	3001      	adds	r0, #1
 8019b54:	f141 0100 	adc.w	r1, r1, #0
 8019b58:	1940      	adds	r0, r0, r5
 8019b5a:	eb46 0101 	adc.w	r1, r6, r1
 8019b5e:	2801      	cmp	r0, #1
 8019b60:	f171 0100 	sbcs.w	r1, r1, #0
 8019b64:	db3a      	blt.n	8019bdc <z_timer_expiration_handler+0xd4>
 8019b66:	f00e fb39 	bl	80281dc <z_impl_k_uptime_ticks>
 8019b6a:	3001      	adds	r0, #1
 8019b6c:	f06f 0201 	mvn.w	r2, #1
 8019b70:	f141 0100 	adc.w	r1, r1, #0
 8019b74:	1940      	adds	r0, r0, r5
 8019b76:	eb46 0301 	adc.w	r3, r6, r1
 8019b7a:	1a12      	subs	r2, r2, r0
 8019b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8019b80:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8019b84:	4918      	ldr	r1, [pc, #96]	; (8019be8 <z_timer_expiration_handler+0xe0>)
 8019b86:	4620      	mov	r0, r4
 8019b88:	f7ff fec2 	bl	8019910 <z_add_timeout>
	timer->status += 1U;
 8019b8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019b8e:	3301      	adds	r3, #1
 8019b90:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
 8019b92:	6a23      	ldr	r3, [r4, #32]
 8019b94:	b173      	cbz	r3, 8019bb4 <z_timer_expiration_handler+0xac>
 8019b96:	f387 8811 	msr	BASEPRI, r7
 8019b9a:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
 8019b9e:	6a23      	ldr	r3, [r4, #32]
 8019ba0:	4620      	mov	r0, r4
 8019ba2:	4798      	blx	r3
	__asm__ volatile(
 8019ba4:	f04f 0310 	mov.w	r3, #16
 8019ba8:	f3ef 8711 	mrs	r7, BASEPRI
 8019bac:	f383 8812 	msr	BASEPRI_MAX, r3
 8019bb0:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8019bb4:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8019bb8:	42a5      	cmp	r5, r4
 8019bba:	d0b1      	beq.n	8019b20 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
 8019bbc:	2d00      	cmp	r5, #0
 8019bbe:	d0af      	beq.n	8019b20 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
 8019bc0:	4628      	mov	r0, r5
 8019bc2:	f00e fa70 	bl	80280a6 <z_unpend_thread_no_timeout>
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
 8019bca:	f387 8811 	msr	BASEPRI, r7
 8019bce:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 8019bd2:	4628      	mov	r0, r5
}
 8019bd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
 8019bd8:	f00e ba55 	b.w	8028086 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
 8019bdc:	f06f 0201 	mvn.w	r2, #1
 8019be0:	f04f 33ff 	mov.w	r3, #4294967295
 8019be4:	e7ce      	b.n	8019b84 <z_timer_expiration_handler+0x7c>
 8019be6:	bf00      	nop
 8019be8:	08019b09 	.word	0x08019b09

08019bec <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8019bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bf0:	bf08      	it	eq
 8019bf2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 8019bf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019bfa:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 8019bfe:	4605      	mov	r5, r0
 8019c00:	461c      	mov	r4, r3
 8019c02:	4691      	mov	r9, r2
 8019c04:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8019c06:	d01c      	beq.n	8019c42 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8019c08:	1c53      	adds	r3, r2, #1
 8019c0a:	f174 33ff 	sbcs.w	r3, r4, #4294967295
 8019c0e:	db09      	blt.n	8019c24 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8019c10:	2a01      	cmp	r2, #1
 8019c12:	f174 0300 	sbcs.w	r3, r4, #0
 8019c16:	bfbc      	itt	lt
 8019c18:	2201      	movlt	r2, #1
 8019c1a:	2400      	movlt	r4, #0
 8019c1c:	f112 39ff 	adds.w	r9, r2, #4294967295
 8019c20:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
 8019c24:	4628      	mov	r0, r5
 8019c26:	f00e fabf 	bl	80281a8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 8019c2a:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8019c2c:	464a      	mov	r2, r9
 8019c2e:	4628      	mov	r0, r5
	timer->status = 0U;
 8019c30:	632b      	str	r3, [r5, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8019c32:	4643      	mov	r3, r8
 8019c34:	4904      	ldr	r1, [pc, #16]	; (8019c48 <z_impl_k_timer_start+0x5c>)
	timer->period = period;
 8019c36:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
		     duration);
}
 8019c3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8019c3e:	f7ff be67 	b.w	8019910 <z_add_timeout>
}
 8019c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c46:	bf00      	nop
 8019c48:	08019b09 	.word	0x08019b09

08019c4c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
 8019c4c:	4b01      	ldr	r3, [pc, #4]	; (8019c54 <k_thread_system_pool_assign+0x8>)
 8019c4e:	6703      	str	r3, [r0, #112]	; 0x70
}
 8019c50:	4770      	bx	lr
 8019c52:	bf00      	nop
 8019c54:	240001b8 	.word	0x240001b8

08019c58 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 8019c58:	4801      	ldr	r0, [pc, #4]	; (8019c60 <boot_banner+0x8>)
 8019c5a:	f000 b8c0 	b.w	8019dde <printk>
 8019c5e:	bf00      	nop
 8019c60:	0802e0c3 	.word	0x0802e0c3

08019c64 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
 8019c64:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8019c66:	4c06      	ldr	r4, [pc, #24]	; (8019c80 <statics_init+0x1c>)
 8019c68:	4d06      	ldr	r5, [pc, #24]	; (8019c84 <statics_init+0x20>)
 8019c6a:	42ac      	cmp	r4, r5
 8019c6c:	d301      	bcc.n	8019c72 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 8019c6e:	2000      	movs	r0, #0
 8019c70:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8019c72:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8019c76:	4620      	mov	r0, r4
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8019c78:	3414      	adds	r4, #20
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8019c7a:	f00e fada 	bl	8028232 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8019c7e:	e7f4      	b.n	8019c6a <statics_init+0x6>
 8019c80:	240001b8 	.word	0x240001b8
 8019c84:	240001cc 	.word	0x240001cc

08019c88 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8019c88:	4770      	bx	lr

08019c8a <_Z7reversePci>:
    while (start < end) {
 8019c8a:	1e42      	subs	r2, r0, #1
    int start = 0;
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	4408      	add	r0, r1
    while (start < end) {
 8019c90:	3901      	subs	r1, #1
{
 8019c92:	b530      	push	{r4, r5, lr}
    while (start < end) {
 8019c94:	1acc      	subs	r4, r1, r3
 8019c96:	42a3      	cmp	r3, r4
 8019c98:	db00      	blt.n	8019c9c <_Z7reversePci+0x12>
}
 8019c9a:	bd30      	pop	{r4, r5, pc}
        char temp = str[start];
 8019c9c:	f812 4f01 	ldrb.w	r4, [r2, #1]!
        start++;
 8019ca0:	3301      	adds	r3, #1
        str[start] = str[end];
 8019ca2:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 8019ca6:	7015      	strb	r5, [r2, #0]
        str[end] = temp;
 8019ca8:	7004      	strb	r4, [r0, #0]
        start++;
 8019caa:	e7f3      	b.n	8019c94 <_Z7reversePci+0xa>

08019cac <_Z5citoaiPci>:
{
 8019cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (num == 0) {
 8019cae:	1e03      	subs	r3, r0, #0
{
 8019cb0:	460c      	mov	r4, r1
    if (num == 0) {
 8019cb2:	d104      	bne.n	8019cbe <_Z5citoaiPci+0x12>
        str[i++] = '0';
 8019cb4:	2230      	movs	r2, #48	; 0x30
        str[i] = '\0';
 8019cb6:	704b      	strb	r3, [r1, #1]
        str[i++] = '0';
 8019cb8:	700a      	strb	r2, [r1, #0]
}
 8019cba:	4620      	mov	r0, r4
 8019cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (num < 0 && base == 10) {
 8019cbe:	da20      	bge.n	8019d02 <_Z5citoaiPci+0x56>
 8019cc0:	2a0a      	cmp	r2, #10
 8019cc2:	d11e      	bne.n	8019d02 <_Z5citoaiPci+0x56>
        num = -num;
 8019cc4:	425b      	negs	r3, r3
        isNegative = true;
 8019cc6:	2501      	movs	r5, #1
 8019cc8:	1e67      	subs	r7, r4, #1
        str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
 8019cca:	2000      	movs	r0, #0
        int rem = num % base;
 8019ccc:	fb93 f6f2 	sdiv	r6, r3, r2
 8019cd0:	fb02 3316 	mls	r3, r2, r6, r3
        str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
 8019cd4:	b2d9      	uxtb	r1, r3
 8019cd6:	2b09      	cmp	r3, #9
 8019cd8:	bfcc      	ite	gt
 8019cda:	f101 0357 	addgt.w	r3, r1, #87	; 0x57
 8019cde:	f101 0330 	addle.w	r3, r1, #48	; 0x30
 8019ce2:	1c41      	adds	r1, r0, #1
 8019ce4:	b2db      	uxtb	r3, r3
 8019ce6:	f807 3f01 	strb.w	r3, [r7, #1]!
        num = num / base;
 8019cea:	4633      	mov	r3, r6
    while (num != 0) {
 8019cec:	b95e      	cbnz	r6, 8019d06 <_Z5citoaiPci+0x5a>
    if (isNegative)
 8019cee:	b115      	cbz	r5, 8019cf6 <_Z5citoaiPci+0x4a>
        str[i++] = '-';
 8019cf0:	232d      	movs	r3, #45	; 0x2d
 8019cf2:	5463      	strb	r3, [r4, r1]
 8019cf4:	1c81      	adds	r1, r0, #2
    str[i] = '\0'; // Append string terminator
 8019cf6:	2300      	movs	r3, #0
    reverse(str, i);
 8019cf8:	4620      	mov	r0, r4
    str[i] = '\0'; // Append string terminator
 8019cfa:	5463      	strb	r3, [r4, r1]
    reverse(str, i);
 8019cfc:	f7ff ffc5 	bl	8019c8a <_Z7reversePci>
    return str;
 8019d00:	e7db      	b.n	8019cba <_Z5citoaiPci+0xe>
    bool isNegative = false;
 8019d02:	2500      	movs	r5, #0
 8019d04:	e7e0      	b.n	8019cc8 <_Z5citoaiPci+0x1c>
        str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
 8019d06:	4608      	mov	r0, r1
 8019d08:	e7e0      	b.n	8019ccc <_Z5citoaiPci+0x20>

08019d0a <cbpprintf_external>:
{
 8019d0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d0e:	4606      	mov	r6, r0
 8019d10:	460d      	mov	r5, r1
 8019d12:	4617      	mov	r7, r2
	if (buf == NULL) {
 8019d14:	4698      	mov	r8, r3
 8019d16:	b32b      	cbz	r3, 8019d64 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
 8019d18:	f898 4000 	ldrb.w	r4, [r8]
	for (i = 0; i < s_nbr; i++) {
 8019d1c:	f04f 0a00 	mov.w	sl, #0
	s_nbr     = hdr->hdr.desc.str_cnt;
 8019d20:	f893 9001 	ldrb.w	r9, [r3, #1]
	args_size = hdr->hdr.desc.len * sizeof(int);
 8019d24:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
 8019d26:	78db      	ldrb	r3, [r3, #3]
 8019d28:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
 8019d2c:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
 8019d30:	441c      	add	r4, r3
 8019d32:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
 8019d34:	45ca      	cmp	sl, r9
 8019d36:	d309      	bcc.n	8019d4c <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
 8019d38:	f108 0308 	add.w	r3, r8, #8
 8019d3c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8019d40:	4639      	mov	r1, r7
 8019d42:	4630      	mov	r0, r6
 8019d44:	46ac      	mov	ip, r5
}
 8019d46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
 8019d4a:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
 8019d4c:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
 8019d50:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
 8019d54:	4620      	mov	r0, r4
		*ps = s;
 8019d56:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
 8019d5a:	f000 fcc3 	bl	801a6e4 <strlen>
 8019d5e:	3001      	adds	r0, #1
 8019d60:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 8019d62:	e7e7      	b.n	8019d34 <cbpprintf_external+0x2a>
}
 8019d64:	f06f 0015 	mvn.w	r0, #21
 8019d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019d6c <is_ptr>:
{
 8019d6c:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
 8019d6e:	2500      	movs	r5, #0
{
 8019d70:	4602      	mov	r2, r0
	bool mod = false;
 8019d72:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
 8019d74:	4614      	mov	r4, r2
 8019d76:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019d7a:	b90b      	cbnz	r3, 8019d80 <is_ptr+0x14>
					return false;
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	e009      	b.n	8019d94 <is_ptr+0x28>
		if (mod) {
 8019d80:	b198      	cbz	r0, 8019daa <is_ptr+0x3e>
			if (cnt == n) {
 8019d82:	428d      	cmp	r5, r1
 8019d84:	d107      	bne.n	8019d96 <is_ptr+0x2a>
				if (c == 'p') {
 8019d86:	2b70      	cmp	r3, #112	; 0x70
 8019d88:	d004      	beq.n	8019d94 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
 8019d8a:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8019d8e:	2a3a      	cmp	r2, #58	; 0x3a
 8019d90:	d80b      	bhi.n	8019daa <is_ptr+0x3e>
					return false;
 8019d92:	2000      	movs	r0, #0
}
 8019d94:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
 8019d96:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
 8019d9a:	2e3a      	cmp	r6, #58	; 0x3a
 8019d9c:	d805      	bhi.n	8019daa <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
 8019d9e:	7853      	ldrb	r3, [r2, #1]
				cnt++;
 8019da0:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
 8019da2:	1c94      	adds	r4, r2, #2
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d0e9      	beq.n	8019d7c <is_ptr+0x10>
 8019da8:	2000      	movs	r0, #0
		if (c == '%') {
 8019daa:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
 8019dac:	4622      	mov	r2, r4
			mod = !mod;
 8019dae:	bf08      	it	eq
 8019db0:	f080 0001 	eoreq.w	r0, r0, #1
 8019db4:	e7de      	b.n	8019d74 <is_ptr+0x8>

08019db6 <arch_printk_char_out>:
}
 8019db6:	2000      	movs	r0, #0
 8019db8:	4770      	bx	lr

08019dba <str_out>:
{
 8019dba:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8019dbc:	688a      	ldr	r2, [r1, #8]
 8019dbe:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 8019dc0:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8019dc2:	b114      	cbz	r4, 8019dca <str_out+0x10>
 8019dc4:	684b      	ldr	r3, [r1, #4]
 8019dc6:	4293      	cmp	r3, r2
 8019dc8:	dc01      	bgt.n	8019dce <str_out+0x14>
		ctx->count++;
 8019dca:	608d      	str	r5, [r1, #8]
}
 8019dcc:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 8019dce:	3b01      	subs	r3, #1
		ctx->str[ctx->count++] = '\0';
 8019dd0:	608d      	str	r5, [r1, #8]
	if (ctx->count == ctx->max - 1) {
 8019dd2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 8019dd4:	bf0a      	itet	eq
 8019dd6:	2200      	moveq	r2, #0
		ctx->str[ctx->count++] = c;
 8019dd8:	54a0      	strbne	r0, [r4, r2]
		ctx->str[ctx->count++] = '\0';
 8019dda:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 8019ddc:	e7f6      	b.n	8019dcc <str_out+0x12>

08019dde <printk>:
{
 8019dde:	b40f      	push	{r0, r1, r2, r3}
 8019de0:	b507      	push	{r0, r1, r2, lr}
 8019de2:	a904      	add	r1, sp, #16
 8019de4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8019de8:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
 8019dea:	f000 fbd2 	bl	801a592 <z_log_vprintk>
}
 8019dee:	b003      	add	sp, #12
 8019df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8019df4:	b004      	add	sp, #16
 8019df6:	4770      	bx	lr

08019df8 <snprintk>:
{
 8019df8:	b40c      	push	{r2, r3}
 8019dfa:	b507      	push	{r0, r1, r2, lr}
 8019dfc:	ab04      	add	r3, sp, #16
 8019dfe:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 8019e02:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 8019e04:	f7e6 ffec 	bl	8000de0 <vsnprintk>
}
 8019e08:	b003      	add	sp, #12
 8019e0a:	f85d eb04 	ldr.w	lr, [sp], #4
 8019e0e:	b002      	add	sp, #8
 8019e10:	4770      	bx	lr

08019e12 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8019e12:	4604      	mov	r4, r0
 8019e14:	4608      	mov	r0, r1
 8019e16:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8019e18:	461a      	mov	r2, r3
{
 8019e1a:	b508      	push	{r3, lr}
	entry(p1, p2, p3);
 8019e1c:	47a0      	blx	r4
	return z_impl_z_current_get();
 8019e1e:	f7ff fca5 	bl	801976c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8019e22:	f7e8 fe3b 	bl	8002a9c <z_impl_k_thread_abort>

08019e26 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 8019e26:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 8019e28:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8019e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 8019e30:	bf2c      	ite	cs
 8019e32:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 8019e36:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 8019e3a:	4770      	bx	lr

08019e3c <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 8019e3c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 8019e40:	6880      	ldr	r0, [r0, #8]
 8019e42:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 8019e46:	bf2c      	ite	cs
 8019e48:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 8019e4c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 8019e50:	4770      	bx	lr

08019e52 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8019e52:	2201      	movs	r2, #1
{
 8019e54:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8019e56:	f7ff ffe6 	bl	8019e26 <chunk_field>
}
 8019e5a:	40d0      	lsrs	r0, r2
 8019e5c:	bd08      	pop	{r3, pc}

08019e5e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 8019e5e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 8019e60:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8019e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019e68:	d308      	bcc.n	8019e7c <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 8019e6a:	684b      	ldr	r3, [r1, #4]
		if (used) {
 8019e6c:	b11a      	cbz	r2, 8019e76 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 8019e6e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8019e72:	604b      	str	r3, [r1, #4]
 8019e74:	4770      	bx	lr
 8019e76:	f023 0301 	bic.w	r3, r3, #1
 8019e7a:	e7fa      	b.n	8019e72 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8019e7c:	884b      	ldrh	r3, [r1, #2]
		if (used) {
 8019e7e:	b11a      	cbz	r2, 8019e88 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8019e80:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8019e84:	804b      	strh	r3, [r1, #2]
		}
	}
}
 8019e86:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8019e88:	f023 0301 	bic.w	r3, r3, #1
 8019e8c:	e7fa      	b.n	8019e84 <set_chunk_used+0x26>

08019e8e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8019e8e:	0053      	lsls	r3, r2, #1
 8019e90:	2201      	movs	r2, #1
 8019e92:	f7ff bfd3 	b.w	8019e3c <chunk_set>

08019e96 <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 8019e96:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8019e9a:	f101 0001 	add.w	r0, r1, #1
	return big_heap(h) ? 8 : 4;
 8019e9e:	bf34      	ite	cc
 8019ea0:	2304      	movcc	r3, #4
 8019ea2:	2308      	movcs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8019ea4:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8019ea6:	eba0 00d3 	sub.w	r0, r0, r3, lsr #3
	return 31 - __builtin_clz(usable_sz);
 8019eaa:	fab0 f080 	clz	r0, r0
}
 8019eae:	f1c0 001f 	rsb	r0, r0, #31
 8019eb2:	4770      	bx	lr

08019eb4 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 8019eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
 8019eb8:	6886      	ldr	r6, [r0, #8]
 8019eba:	460d      	mov	r5, r1
 8019ebc:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 8019ebe:	f7ff ffc8 	bl	8019e52 <chunk_size>
 8019ec2:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8019ec6:	4601      	mov	r1, r0
 8019ec8:	d301      	bcc.n	8019ece <free_list_add+0x1a>
 8019eca:	2801      	cmp	r0, #1
 8019ecc:	d032      	beq.n	8019f34 <free_list_add+0x80>
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
 8019ece:	4630      	mov	r0, r6
 8019ed0:	f7ff ffe1 	bl	8019e96 <bucket_idx.isra.0>
	if (b->next == 0U) {
 8019ed4:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 8019ed8:	690e      	ldr	r6, [r1, #16]
 8019eda:	b996      	cbnz	r6, 8019f02 <free_list_add+0x4e>
		h->avail_buckets |= BIT(bidx);
 8019edc:	2201      	movs	r2, #1
 8019ede:	68e3      	ldr	r3, [r4, #12]
 8019ee0:	4082      	lsls	r2, r0
	chunk_set(h, c, FREE_PREV, prev);
 8019ee2:	4620      	mov	r0, r4
 8019ee4:	4313      	orrs	r3, r2
 8019ee6:	2202      	movs	r2, #2
 8019ee8:	60e3      	str	r3, [r4, #12]
 8019eea:	462b      	mov	r3, r5
		b->next = c;
 8019eec:	610d      	str	r5, [r1, #16]
 8019eee:	4629      	mov	r1, r5
 8019ef0:	f7ff ffa4 	bl	8019e3c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8019ef4:	2203      	movs	r2, #3
 8019ef6:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 8019ef8:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
 8019efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019efe:	f7ff bf9d 	b.w	8019e3c <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 8019f02:	2202      	movs	r2, #2
 8019f04:	4631      	mov	r1, r6
 8019f06:	4620      	mov	r0, r4
 8019f08:	f7ff ff8d 	bl	8019e26 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 8019f0c:	4629      	mov	r1, r5
 8019f0e:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 8019f10:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 8019f12:	4620      	mov	r0, r4
 8019f14:	f7ff ff92 	bl	8019e3c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8019f18:	2203      	movs	r2, #3
 8019f1a:	4633      	mov	r3, r6
 8019f1c:	4629      	mov	r1, r5
 8019f1e:	4620      	mov	r0, r4
 8019f20:	f7ff ff8c 	bl	8019e3c <chunk_set>
 8019f24:	4639      	mov	r1, r7
 8019f26:	462b      	mov	r3, r5
 8019f28:	4620      	mov	r0, r4
 8019f2a:	f7ff ff87 	bl	8019e3c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8019f2e:	2202      	movs	r2, #2
 8019f30:	4631      	mov	r1, r6
 8019f32:	e7e1      	b.n	8019ef8 <free_list_add+0x44>
 8019f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f38 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 8019f38:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 8019f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f3e:	bf2c      	ite	cs
 8019f40:	2308      	movcs	r3, #8
 8019f42:	2304      	movcc	r3, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8019f44:	1dce      	adds	r6, r1, #7
	bytes -= heap_footer_bytes(bytes);
 8019f46:	1ad2      	subs	r2, r2, r3
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8019f48:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8019f4c:	188c      	adds	r4, r1, r2
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 8019f4e:	2200      	movs	r2, #0
 8019f50:	4637      	mov	r7, r6
	heap->heap = h;
 8019f52:	6006      	str	r6, [r0, #0]
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8019f54:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8019f58:	1ba4      	subs	r4, r4, r6
 8019f5a:	08e4      	lsrs	r4, r4, #3
	h->end_chunk = heap_sz;
 8019f5c:	60b4      	str	r4, [r6, #8]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8019f5e:	4621      	mov	r1, r4
 8019f60:	4620      	mov	r0, r4
	h->avail_buckets = 0;
 8019f62:	f847 2f0c 	str.w	r2, [r7, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8019f66:	f7ff ff96 	bl	8019e96 <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8019f6a:	4613      	mov	r3, r2
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8019f6c:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8019f6e:	351b      	adds	r5, #27
 8019f70:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < nb_buckets; i++) {
 8019f72:	4298      	cmp	r0, r3
 8019f74:	da2e      	bge.n	8019fd4 <sys_heap_init+0x9c>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 8019f76:	462a      	mov	r2, r5
 8019f78:	4630      	mov	r0, r6
 8019f7a:	2100      	movs	r1, #0
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8019f7c:	1b67      	subs	r7, r4, r5
	set_chunk_size(h, 0, chunk0_size);
 8019f7e:	f7ff ff86 	bl	8019e8e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8019f82:	2300      	movs	r3, #0
 8019f84:	4630      	mov	r0, r6
 8019f86:	461a      	mov	r2, r3
 8019f88:	4619      	mov	r1, r3
 8019f8a:	f7ff ff57 	bl	8019e3c <chunk_set>
	set_chunk_used(h, 0, true);
 8019f8e:	4619      	mov	r1, r3
 8019f90:	4630      	mov	r0, r6
 8019f92:	2201      	movs	r2, #1
 8019f94:	f7ff ff63 	bl	8019e5e <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8019f98:	463a      	mov	r2, r7
 8019f9a:	4629      	mov	r1, r5
 8019f9c:	f7ff ff77 	bl	8019e8e <set_chunk_size>
 8019fa0:	462b      	mov	r3, r5
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	4629      	mov	r1, r5
 8019fa6:	4630      	mov	r0, r6
 8019fa8:	f7ff ff48 	bl	8019e3c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
 8019fac:	4621      	mov	r1, r4
 8019fae:	4630      	mov	r0, r6
 8019fb0:	f7ff ff6d 	bl	8019e8e <set_chunk_size>
 8019fb4:	463b      	mov	r3, r7
 8019fb6:	4621      	mov	r1, r4
 8019fb8:	4630      	mov	r0, r6
 8019fba:	2200      	movs	r2, #0
 8019fbc:	f7ff ff3e 	bl	8019e3c <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
 8019fc0:	4621      	mov	r1, r4
 8019fc2:	4630      	mov	r0, r6
 8019fc4:	2201      	movs	r2, #1
 8019fc6:	f7ff ff4a 	bl	8019e5e <set_chunk_used>

	free_list_add(h, chunk0_size);
 8019fca:	4629      	mov	r1, r5
}
 8019fcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 8019fd0:	f7ff bf70 	b.w	8019eb4 <free_list_add>
	for (int i = 0; i < nb_buckets; i++) {
 8019fd4:	3301      	adds	r3, #1
		h->buckets[i].next = 0;
 8019fd6:	f847 2f04 	str.w	r2, [r7, #4]!
	for (int i = 0; i < nb_buckets; i++) {
 8019fda:	e7ca      	b.n	8019f72 <sys_heap_init+0x3a>

08019fdc <encode_uint>:
{
 8019fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fe0:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
 8019fe2:	78d3      	ldrb	r3, [r2, #3]
{
 8019fe4:	4680      	mov	r8, r0
 8019fe6:	460f      	mov	r7, r1
	switch (specifier) {
 8019fe8:	2b6f      	cmp	r3, #111	; 0x6f
{
 8019fea:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8019fec:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 8019ff0:	d029      	beq.n	801a046 <encode_uint+0x6a>
 8019ff2:	d824      	bhi.n	801a03e <encode_uint+0x62>
		return 10;
 8019ff4:	2b58      	cmp	r3, #88	; 0x58
 8019ff6:	bf0c      	ite	eq
 8019ff8:	2610      	moveq	r6, #16
 8019ffa:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 8019ffc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 801a000:	4632      	mov	r2, r6
 801a002:	2300      	movs	r3, #0
 801a004:	4640      	mov	r0, r8
 801a006:	4639      	mov	r1, r7
 801a008:	f7e6 f960 	bl	80002cc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 801a00c:	2a09      	cmp	r2, #9
 801a00e:	b2d4      	uxtb	r4, r2
 801a010:	d81e      	bhi.n	801a050 <encode_uint+0x74>
 801a012:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 801a014:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 801a016:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 801a018:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 801a01c:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 801a020:	d301      	bcc.n	801a026 <encode_uint+0x4a>
 801a022:	45d1      	cmp	r9, sl
 801a024:	d811      	bhi.n	801a04a <encode_uint+0x6e>
	if (conv->flag_hash) {
 801a026:	782b      	ldrb	r3, [r5, #0]
 801a028:	069b      	lsls	r3, r3, #26
 801a02a:	d505      	bpl.n	801a038 <encode_uint+0x5c>
		if (radix == 8) {
 801a02c:	2e08      	cmp	r6, #8
 801a02e:	d115      	bne.n	801a05c <encode_uint+0x80>
			conv->altform_0 = true;
 801a030:	78ab      	ldrb	r3, [r5, #2]
 801a032:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 801a036:	70ab      	strb	r3, [r5, #2]
}
 801a038:	4648      	mov	r0, r9
 801a03a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 801a03e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 801a042:	2b70      	cmp	r3, #112	; 0x70
 801a044:	e7d7      	b.n	8019ff6 <encode_uint+0x1a>
	switch (specifier) {
 801a046:	2608      	movs	r6, #8
 801a048:	e7d8      	b.n	8019ffc <encode_uint+0x20>
		value /= radix;
 801a04a:	4680      	mov	r8, r0
 801a04c:	460f      	mov	r7, r1
 801a04e:	e7d7      	b.n	801a000 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 801a050:	f1bb 0f19 	cmp.w	fp, #25
 801a054:	bf94      	ite	ls
 801a056:	3437      	addls	r4, #55	; 0x37
 801a058:	3457      	addhi	r4, #87	; 0x57
 801a05a:	e7db      	b.n	801a014 <encode_uint+0x38>
		} else if (radix == 16) {
 801a05c:	2e10      	cmp	r6, #16
 801a05e:	d1eb      	bne.n	801a038 <encode_uint+0x5c>
			conv->altform_0c = true;
 801a060:	78ab      	ldrb	r3, [r5, #2]
 801a062:	f043 0310 	orr.w	r3, r3, #16
 801a066:	e7e6      	b.n	801a036 <encode_uint+0x5a>

0801a068 <outs>:
{
 801a068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a06c:	4607      	mov	r7, r0
 801a06e:	4688      	mov	r8, r1
 801a070:	4615      	mov	r5, r2
 801a072:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 801a074:	4614      	mov	r4, r2
 801a076:	42b4      	cmp	r4, r6
 801a078:	d305      	bcc.n	801a086 <outs+0x1e>
 801a07a:	b10e      	cbz	r6, 801a080 <outs+0x18>
	return (int)count;
 801a07c:	1b60      	subs	r0, r4, r5
 801a07e:	e008      	b.n	801a092 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 801a080:	7823      	ldrb	r3, [r4, #0]
 801a082:	2b00      	cmp	r3, #0
 801a084:	d0fa      	beq.n	801a07c <outs+0x14>
		int rc = out((int)*sp++, ctx);
 801a086:	4641      	mov	r1, r8
 801a088:	f814 0b01 	ldrb.w	r0, [r4], #1
 801a08c:	47b8      	blx	r7
		if (rc < 0) {
 801a08e:	2800      	cmp	r0, #0
 801a090:	daf1      	bge.n	801a076 <outs+0xe>
}
 801a092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a096 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
 801a096:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
 801a098:	6903      	ldr	r3, [r0, #16]
{
 801a09a:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
 801a09c:	f013 0008 	ands.w	r0, r3, #8
 801a0a0:	d109      	bne.n	801a0b6 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 801a0a2:	6813      	ldr	r3, [r2, #0]
 801a0a4:	68d4      	ldr	r4, [r2, #12]
 801a0a6:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
 801a0a8:	bf97      	itett	ls
 801a0aa:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
 801a0ac:	1ae3      	subhi	r3, r4, r3

	return true;
 801a0ae:	2001      	movls	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
 801a0b0:	1ad3      	subls	r3, r2, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
 801a0b2:	600b      	str	r3, [r1, #0]
}
 801a0b4:	bd10      	pop	{r4, pc}
 801a0b6:	2300      	movs	r3, #0
		return false;
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	e7fa      	b.n	801a0b2 <free_space+0x1c>

0801a0bc <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
 801a0bc:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
 801a0be:	a901      	add	r1, sp, #4
{
 801a0c0:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
 801a0c2:	f7ff ffe8 	bl	801a096 <free_space>
 801a0c6:	b120      	cbz	r0, 801a0d2 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
 801a0c8:	9b01      	ldr	r3, [sp, #4]
 801a0ca:	68e2      	ldr	r2, [r4, #12]
 801a0cc:	3b01      	subs	r3, #1
 801a0ce:	4413      	add	r3, r2
 801a0d0:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
 801a0d2:	6a20      	ldr	r0, [r4, #32]
 801a0d4:	9b01      	ldr	r3, [sp, #4]
 801a0d6:	1ac0      	subs	r0, r0, r3
}
 801a0d8:	3801      	subs	r0, #1
 801a0da:	b002      	add	sp, #8
 801a0dc:	bd10      	pop	{r4, pc}

0801a0de <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
 801a0de:	b510      	push	{r4, lr}
 801a0e0:	4604      	mov	r4, r0
	uint32_t i = idx + val;
 801a0e2:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 801a0e4:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
 801a0e6:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 801a0e8:	07d2      	lsls	r2, r2, #31
 801a0ea:	d502      	bpl.n	801a0f2 <idx_inc+0x14>
		return i & (buffer->size - 1);
 801a0ec:	3b01      	subs	r3, #1
 801a0ee:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
 801a0f0:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
 801a0f2:	4298      	cmp	r0, r3
 801a0f4:	bf28      	it	cs
 801a0f6:	1ac0      	subcs	r0, r0, r3
 801a0f8:	e7fa      	b.n	801a0f0 <idx_inc+0x12>

0801a0fa <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
 801a0fa:	b510      	push	{r4, lr}
 801a0fc:	4604      	mov	r4, r0
 801a0fe:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 801a100:	68c1      	ldr	r1, [r0, #12]
 801a102:	f7ff ffec 	bl	801a0de <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
 801a106:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 801a108:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
 801a10a:	f023 0308 	bic.w	r3, r3, #8
 801a10e:	6123      	str	r3, [r4, #16]
}
 801a110:	bd10      	pop	{r4, pc}

0801a112 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 801a112:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
 801a114:	008b      	lsls	r3, r1, #2
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 801a116:	69c2      	ldr	r2, [r0, #28]
{
 801a118:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 801a11a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
 801a11c:	f043 0302 	orr.w	r3, r3, #2
{
 801a120:	4604      	mov	r4, r0
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 801a122:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801a126:	462a      	mov	r2, r5
 801a128:	6801      	ldr	r1, [r0, #0]
 801a12a:	f7ff ffd8 	bl	801a0de <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
 801a12e:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801a130:	6861      	ldr	r1, [r4, #4]
 801a132:	462a      	mov	r2, r5
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
 801a134:	4298      	cmp	r0, r3
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801a136:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801a138:	4620      	mov	r0, r4
		buffer->flags |= MPSC_PBUF_FULL;
 801a13a:	bf02      	ittt	eq
 801a13c:	6923      	ldreq	r3, [r4, #16]
 801a13e:	f043 0308 	orreq.w	r3, r3, #8
 801a142:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801a144:	f7ff ffcb 	bl	801a0de <idx_inc>
 801a148:	6060      	str	r0, [r4, #4]
}
 801a14a:	bd38      	pop	{r3, r4, r5, pc}

0801a14c <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
 801a14c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 801a150:	68c7      	ldr	r7, [r0, #12]
{
 801a152:	469b      	mov	fp, r3
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 801a154:	69c6      	ldr	r6, [r0, #28]
{
 801a156:	4604      	mov	r4, r0
 801a158:	4688      	mov	r8, r1
 801a15a:	4691      	mov	r9, r2
	if (item->hdr.busy && !item->hdr.valid) {
 801a15c:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 801a160:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 801a164:	f003 0303 	and.w	r3, r3, #3
 801a168:	2b02      	cmp	r3, #2
 801a16a:	f04f 0300 	mov.w	r3, #0
 801a16e:	d009      	beq.n	801a184 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
 801a170:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
 801a172:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
 801a176:	6923      	ldr	r3, [r4, #16]
 801a178:	0799      	lsls	r1, r3, #30
 801a17a:	d410      	bmi.n	801a19e <drop_item_locked+0x52>
		return false;
 801a17c:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
 801a17e:	b003      	add	sp, #12
 801a180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
 801a184:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
 801a188:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
 801a18a:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
 801a18c:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
 801a190:	d0f1      	beq.n	801a176 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
 801a192:	f7ff ffb2 	bl	801a0fa <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 801a196:	68e3      	ldr	r3, [r4, #12]
 801a198:	60a3      	str	r3, [r4, #8]
		return true;
 801a19a:	2001      	movs	r0, #1
 801a19c:	e7ef      	b.n	801a17e <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
 801a19e:	69a3      	ldr	r3, [r4, #24]
 801a1a0:	4650      	mov	r0, sl
 801a1a2:	4798      	blx	r3
	return item->hdr.valid;
 801a1a4:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	uint32_t rd_wlen = buffer->get_wlen(item);
 801a1a8:	4605      	mov	r5, r0
	if (!is_valid(item)) {
 801a1aa:	07da      	lsls	r2, r3, #31
 801a1ac:	d5e6      	bpl.n	801a17c <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
 801a1ae:	f013 0302 	ands.w	r3, r3, #2
 801a1b2:	d01d      	beq.n	801a1f0 <drop_item_locked+0xa4>
		if (free_wlen) {
 801a1b4:	f1b8 0f00 	cmp.w	r8, #0
 801a1b8:	d003      	beq.n	801a1c2 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
 801a1ba:	4641      	mov	r1, r8
 801a1bc:	4620      	mov	r0, r4
 801a1be:	f7ff ffa8 	bl	801a112 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 801a1c2:	6861      	ldr	r1, [r4, #4]
 801a1c4:	462a      	mov	r2, r5
 801a1c6:	4620      	mov	r0, r4
 801a1c8:	f7ff ff89 	bl	801a0de <idx_inc>
 801a1cc:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
 801a1ce:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 801a1d2:	4299      	cmp	r1, r3
 801a1d4:	d104      	bne.n	801a1e0 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
 801a1d6:	462a      	mov	r2, r5
 801a1d8:	4620      	mov	r0, r4
 801a1da:	f7ff ff80 	bl	801a0de <idx_inc>
 801a1de:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
 801a1e0:	68a3      	ldr	r3, [r4, #8]
 801a1e2:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
 801a1e4:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
 801a1e6:	6923      	ldr	r3, [r4, #16]
 801a1e8:	f043 0308 	orr.w	r3, r3, #8
 801a1ec:	6123      	str	r3, [r4, #16]
 801a1ee:	e7d4      	b.n	801a19a <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
 801a1f0:	4601      	mov	r1, r0
 801a1f2:	4620      	mov	r0, r4
 801a1f4:	9301      	str	r3, [sp, #4]
 801a1f6:	f7ff ff80 	bl	801a0fa <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 801a1fa:	68e2      	ldr	r2, [r4, #12]
 801a1fc:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
 801a1fe:	f1b8 0f00 	cmp.w	r8, #0
 801a202:	d004      	beq.n	801a20e <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
 801a204:	6821      	ldr	r1, [r4, #0]
 801a206:	69e2      	ldr	r2, [r4, #28]
 801a208:	9b01      	ldr	r3, [sp, #4]
 801a20a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
 801a20e:	eb05 0208 	add.w	r2, r5, r8
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
 801a212:	4620      	mov	r0, r4
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
 801a214:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
 801a218:	6821      	ldr	r1, [r4, #0]
 801a21a:	f7ff ff60 	bl	801a0de <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
 801a21e:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
 801a220:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
 801a222:	f043 0308 	orr.w	r3, r3, #8
 801a226:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
 801a228:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
 801a22c:	f36f 0300 	bfc	r3, #0, #1
 801a230:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
 801a234:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
 801a238:	e7af      	b.n	801a19a <drop_item_locked+0x4e>

0801a23a <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
 801a23a:	b570      	push	{r4, r5, r6, lr}
 801a23c:	4604      	mov	r4, r0
 801a23e:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
 801a240:	f7ff ff4d 	bl	801a0de <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
 801a244:	6823      	ldr	r3, [r4, #0]
 801a246:	4283      	cmp	r3, r0
 801a248:	d105      	bne.n	801a256 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
 801a24a:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
 801a24c:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
 801a24e:	f023 0308 	bic.w	r3, r3, #8
 801a252:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
 801a254:	bd70      	pop	{r4, r5, r6, pc}
	union mpsc_pbuf_generic skip = {
 801a256:	00ab      	lsls	r3, r5, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
 801a258:	69e2      	ldr	r2, [r4, #28]
	buffer->wr_idx = idx_inc(buffer,
 801a25a:	4620      	mov	r0, r4
	union mpsc_pbuf_generic skip = {
 801a25c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
 801a260:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
 801a264:	462a      	mov	r2, r5
 801a266:	6861      	ldr	r1, [r4, #4]
 801a268:	f7ff ff39 	bl	801a0de <idx_inc>
 801a26c:	6060      	str	r0, [r4, #4]
 801a26e:	e7f1      	b.n	801a254 <post_drop_action+0x1a>

0801a270 <max_utilization_update>:
{
 801a270:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 801a272:	6903      	ldr	r3, [r0, #16]
{
 801a274:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 801a276:	075b      	lsls	r3, r3, #29
 801a278:	d506      	bpl.n	801a288 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 801a27a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a27c:	f7ff ff1e 	bl	801a0bc <get_usage>
 801a280:	4285      	cmp	r5, r0
 801a282:	bf2c      	ite	cs
 801a284:	6265      	strcs	r5, [r4, #36]	; 0x24
 801a286:	6260      	strcc	r0, [r4, #36]	; 0x24
}
 801a288:	bd38      	pop	{r3, r4, r5, pc}

0801a28a <mpsc_pbuf_init>:
{
 801a28a:	b538      	push	{r3, r4, r5, lr}
 801a28c:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
 801a28e:	221c      	movs	r2, #28
 801a290:	2100      	movs	r1, #0
{
 801a292:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
 801a294:	f000 fa44 	bl	801a720 <memset>
	buffer->get_wlen = cfg->get_wlen;
 801a298:	68eb      	ldr	r3, [r5, #12]
	buffer->max_usage = 0;
 801a29a:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
 801a29c:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
 801a29e:	68ab      	ldr	r3, [r5, #8]
 801a2a0:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
 801a2a2:	682b      	ldr	r3, [r5, #0]
 801a2a4:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
 801a2a6:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
 801a2a8:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
 801a2aa:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
 801a2ac:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
 801a2ae:	b123      	cbz	r3, 801a2ba <mpsc_pbuf_init+0x30>
 801a2b0:	1e59      	subs	r1, r3, #1
 801a2b2:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 801a2b4:	bf08      	it	eq
 801a2b6:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
 801a2ba:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
 801a2bc:	2201      	movs	r2, #1
 801a2be:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801a2c2:	2100      	movs	r1, #0
}
 801a2c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a2c8:	f00d be97 	b.w	8027ffa <z_impl_k_sem_init>

0801a2cc <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 801a2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2d0:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
 801a2d2:	2500      	movs	r5, #0
{
 801a2d4:	4604      	mov	r4, r0
 801a2d6:	460e      	mov	r6, r1
 801a2d8:	9300      	str	r3, [sp, #0]
 801a2da:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
 801a2dc:	6a03      	ldr	r3, [r0, #32]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
 801a2de:	46a9      	mov	r9, r5
	union mpsc_pbuf_generic *dropped_item = NULL;
 801a2e0:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
 801a2e2:	428b      	cmp	r3, r1
	uint32_t tmp_wr_idx_shift = 0;
 801a2e4:	9505      	str	r5, [sp, #20]
	if (wlen > (buffer->size)) {
 801a2e6:	d33a      	bcc.n	801a35e <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
 801a2e8:	f04f 0310 	mov.w	r3, #16
 801a2ec:	f3ef 8b11 	mrs	fp, BASEPRI
 801a2f0:	f383 8812 	msr	BASEPRI_MAX, r3
 801a2f4:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
 801a2f8:	9a05      	ldr	r2, [sp, #20]
 801a2fa:	46d8      	mov	r8, fp
 801a2fc:	b12a      	cbz	r2, 801a30a <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
 801a2fe:	4629      	mov	r1, r5
 801a300:	4620      	mov	r0, r4
 801a302:	f7ff ff9a 	bl	801a23a <post_drop_action>
			tmp_wr_idx_shift = 0;
 801a306:	2300      	movs	r3, #0
 801a308:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
 801a30a:	a904      	add	r1, sp, #16
 801a30c:	4620      	mov	r0, r4
 801a30e:	f7ff fec2 	bl	801a096 <free_space>

		if (free_wlen >= wlen) {
 801a312:	9904      	ldr	r1, [sp, #16]
		wrap = free_space(buffer, &free_wlen);
 801a314:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
 801a316:	42b1      	cmp	r1, r6
 801a318:	d32a      	bcc.n	801a370 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 801a31a:	6822      	ldr	r2, [r4, #0]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801a31c:	4620      	mov	r0, r4
			item =
 801a31e:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
 801a320:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
 801a324:	eb03 0982 	add.w	r9, r3, r2, lsl #2
			item->hdr.valid = 0;
 801a328:	f021 0103 	bic.w	r1, r1, #3
 801a32c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801a330:	4632      	mov	r2, r6
 801a332:	6821      	ldr	r1, [r4, #0]
 801a334:	f7ff fed3 	bl	801a0de <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
 801a338:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801a33a:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
 801a33c:	4298      	cmp	r0, r3
 801a33e:	d012      	beq.n	801a366 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
 801a340:	2700      	movs	r7, #0
	__asm__ volatile(
 801a342:	f388 8811 	msr	BASEPRI, r8
 801a346:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
 801a34a:	9903      	ldr	r1, [sp, #12]
 801a34c:	b129      	cbz	r1, 801a35a <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
 801a34e:	6962      	ldr	r2, [r4, #20]
 801a350:	b10a      	cbz	r2, 801a356 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
 801a352:	4620      	mov	r0, r4
 801a354:	4790      	blx	r2
			}
			dropped_item = NULL;
 801a356:	2300      	movs	r3, #0
 801a358:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
 801a35a:	2f00      	cmp	r7, #0
 801a35c:	d1c4      	bne.n	801a2e8 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 801a35e:	4648      	mov	r0, r9
 801a360:	b007      	add	sp, #28
 801a362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
 801a366:	6923      	ldr	r3, [r4, #16]
 801a368:	f043 0308 	orr.w	r3, r3, #8
 801a36c:	6123      	str	r3, [r4, #16]
 801a36e:	e7e7      	b.n	801a340 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
 801a370:	b118      	cbz	r0, 801a37a <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
 801a372:	4620      	mov	r0, r4
 801a374:	f7ff fecd 	bl	801a112 <add_skip_item>
			cont = true;
 801a378:	e7e3      	b.n	801a342 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
 801a37a:	9b00      	ldr	r3, [sp, #0]
 801a37c:	ea5a 0303 	orrs.w	r3, sl, r3
 801a380:	d01a      	beq.n	801a3b8 <mpsc_pbuf_alloc+0xec>
 801a382:	9101      	str	r1, [sp, #4]
 801a384:	f00d fe22 	bl	8027fcc <k_is_in_isr>
 801a388:	9901      	ldr	r1, [sp, #4]
 801a38a:	b9a8      	cbnz	r0, 801a3b8 <mpsc_pbuf_alloc+0xec>
 801a38c:	f38b 8811 	msr	BASEPRI, fp
 801a390:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
 801a394:	4652      	mov	r2, sl
 801a396:	9b00      	ldr	r3, [sp, #0]
 801a398:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801a39c:	f7fe ff2a 	bl	80191f4 <z_impl_k_sem_take>
	__asm__ volatile(
 801a3a0:	f04f 0310 	mov.w	r3, #16
 801a3a4:	f3ef 8811 	mrs	r8, BASEPRI
 801a3a8:	f383 8812 	msr	BASEPRI_MAX, r3
 801a3ac:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
 801a3b0:	fab0 f780 	clz	r7, r0
 801a3b4:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
 801a3b6:	e7c4      	b.n	801a342 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
 801a3b8:	ab05      	add	r3, sp, #20
 801a3ba:	aa03      	add	r2, sp, #12
 801a3bc:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
 801a3be:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
 801a3c0:	f7ff fec4 	bl	801a14c <drop_item_locked>
 801a3c4:	4607      	mov	r7, r0
 801a3c6:	e7bc      	b.n	801a342 <mpsc_pbuf_alloc+0x76>

0801a3c8 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 801a3c8:	b570      	push	{r4, r5, r6, lr}
 801a3ca:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 801a3cc:	6983      	ldr	r3, [r0, #24]
 801a3ce:	4608      	mov	r0, r1
{
 801a3d0:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 801a3d2:	4798      	blx	r3
 801a3d4:	4602      	mov	r2, r0
 801a3d6:	f04f 0310 	mov.w	r3, #16
 801a3da:	f3ef 8611 	mrs	r6, BASEPRI
 801a3de:	f383 8812 	msr	BASEPRI_MAX, r3
 801a3e2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 801a3e6:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801a3e8:	4620      	mov	r0, r4
	item->hdr.valid = 1;
 801a3ea:	f043 0301 	orr.w	r3, r3, #1
 801a3ee:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801a3f0:	6861      	ldr	r1, [r4, #4]
 801a3f2:	f7ff fe74 	bl	801a0de <idx_inc>
 801a3f6:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
 801a3f8:	4620      	mov	r0, r4
 801a3fa:	f7ff ff39 	bl	801a270 <max_utilization_update>
	__asm__ volatile(
 801a3fe:	f386 8811 	msr	BASEPRI, r6
 801a402:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
 801a406:	bd70      	pop	{r4, r5, r6, pc}

0801a408 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 801a408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a40a:	4604      	mov	r4, r0
	__asm__ volatile(
 801a40c:	f04f 0310 	mov.w	r3, #16
 801a410:	f3ef 8611 	mrs	r6, BASEPRI
 801a414:	f383 8812 	msr	BASEPRI_MAX, r3
 801a418:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
 801a41c:	6923      	ldr	r3, [r4, #16]
 801a41e:	f013 0f08 	tst.w	r3, #8
 801a422:	68a3      	ldr	r3, [r4, #8]
 801a424:	d102      	bne.n	801a42c <mpsc_pbuf_claim+0x24>
 801a426:	6862      	ldr	r2, [r4, #4]
 801a428:	4293      	cmp	r3, r2
 801a42a:	d900      	bls.n	801a42e <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
 801a42c:	6a22      	ldr	r2, [r4, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 801a42e:	1ad2      	subs	r2, r2, r3

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
 801a430:	69e1      	ldr	r1, [r4, #28]

		if (!a || is_invalid(item)) {
 801a432:	b92a      	cbnz	r2, 801a440 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
 801a434:	f386 8811 	msr	BASEPRI, r6
 801a438:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
 801a43c:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
 801a43e:	e033      	b.n	801a4a8 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
 801a440:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
 801a444:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
 801a448:	f012 0003 	ands.w	r0, r2, #3
 801a44c:	d0f2      	beq.n	801a434 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
 801a44e:	2802      	cmp	r0, #2
 801a450:	d103      	bne.n	801a45a <mpsc_pbuf_claim+0x52>
		return item->skip.len;
 801a452:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
 801a456:	08ad      	lsrs	r5, r5, #2
 801a458:	d105      	bne.n	801a466 <mpsc_pbuf_claim+0x5e>
 801a45a:	07d0      	lsls	r0, r2, #31
 801a45c:	d412      	bmi.n	801a484 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
 801a45e:	69a3      	ldr	r3, [r4, #24]
 801a460:	4638      	mov	r0, r7
 801a462:	4798      	blx	r3
 801a464:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 801a466:	68a1      	ldr	r1, [r4, #8]
 801a468:	462a      	mov	r2, r5
 801a46a:	4620      	mov	r0, r4
 801a46c:	f7ff fe37 	bl	801a0de <idx_inc>
				rd_idx_inc(buffer, inc);
 801a470:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
 801a472:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
 801a474:	4620      	mov	r0, r4
 801a476:	f7ff fe40 	bl	801a0fa <rd_idx_inc>
 801a47a:	f386 8811 	msr	BASEPRI, r6
 801a47e:	f3bf 8f6f 	isb	sy
	} while (cont);
 801a482:	e7c3      	b.n	801a40c <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
 801a484:	f042 0202 	orr.w	r2, r2, #2
						buffer->get_wlen(item));
 801a488:	4638      	mov	r0, r7
				item->hdr.busy = 1;
 801a48a:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
 801a48e:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
 801a490:	69a3      	ldr	r3, [r4, #24]
 801a492:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
 801a494:	4629      	mov	r1, r5
						buffer->get_wlen(item));
 801a496:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
 801a498:	4620      	mov	r0, r4
 801a49a:	f7ff fe20 	bl	801a0de <idx_inc>
				buffer->tmp_rd_idx =
 801a49e:	60a0      	str	r0, [r4, #8]
 801a4a0:	f386 8811 	msr	BASEPRI, r6
 801a4a4:	f3bf 8f6f 	isb	sy
}
 801a4a8:	4638      	mov	r0, r7
 801a4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a4ac <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 801a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4ae:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 801a4b0:	6983      	ldr	r3, [r0, #24]
 801a4b2:	4608      	mov	r0, r1
{
 801a4b4:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 801a4b6:	4798      	blx	r3
 801a4b8:	4606      	mov	r6, r0
	__asm__ volatile(
 801a4ba:	f04f 0310 	mov.w	r3, #16
 801a4be:	f3ef 8711 	mrs	r7, BASEPRI
 801a4c2:	f383 8812 	msr	BASEPRI_MAX, r3
 801a4c6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 801a4ca:	782b      	ldrb	r3, [r5, #0]
 801a4cc:	f36f 0300 	bfc	r3, #0, #1
 801a4d0:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 801a4d2:	6923      	ldr	r3, [r4, #16]
 801a4d4:	079b      	lsls	r3, r3, #30
 801a4d6:	d505      	bpl.n	801a4e4 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 801a4d8:	68e2      	ldr	r2, [r4, #12]
 801a4da:	69e3      	ldr	r3, [r4, #28]
 801a4dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 801a4e0:	429d      	cmp	r5, r3
 801a4e2:	d11a      	bne.n	801a51a <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
 801a4e4:	782b      	ldrb	r3, [r5, #0]
 801a4e6:	f36f 0341 	bfc	r3, #1, #1
 801a4ea:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
 801a4ec:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 801a4f0:	4299      	cmp	r1, r3
 801a4f2:	d104      	bne.n	801a4fe <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
 801a4f4:	4632      	mov	r2, r6
 801a4f6:	4620      	mov	r0, r4
 801a4f8:	f7ff fdf1 	bl	801a0de <idx_inc>
 801a4fc:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
 801a4fe:	4631      	mov	r1, r6
 801a500:	4620      	mov	r0, r4
 801a502:	f7ff fdfa 	bl	801a0fa <rd_idx_inc>
	__asm__ volatile(
 801a506:	f387 8811 	msr	BASEPRI, r7
 801a50a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
 801a50e:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
 801a512:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a516:	f7fe be49 	b.w	80191ac <z_impl_k_sem_give>
		witem->skip.len = wlen;
 801a51a:	682b      	ldr	r3, [r5, #0]
 801a51c:	f360 039f 	bfi	r3, r0, #2, #30
 801a520:	602b      	str	r3, [r5, #0]
 801a522:	e7f0      	b.n	801a506 <mpsc_pbuf_free+0x5a>

0801a524 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
 801a524:	6902      	ldr	r2, [r0, #16]
 801a526:	6883      	ldr	r3, [r0, #8]
 801a528:	0712      	lsls	r2, r2, #28
 801a52a:	d402      	bmi.n	801a532 <mpsc_pbuf_is_pending+0xe>
 801a52c:	6842      	ldr	r2, [r0, #4]
 801a52e:	429a      	cmp	r2, r3
 801a530:	d200      	bcs.n	801a534 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
 801a532:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 801a534:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 801a536:	1e18      	subs	r0, r3, #0
 801a538:	bf18      	it	ne
 801a53a:	2001      	movne	r0, #1
 801a53c:	4770      	bx	lr

0801a53e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 801a53e:	4770      	bx	lr

0801a540 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 801a540:	2000      	movs	r0, #0
 801a542:	4770      	bx	lr

0801a544 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
 801a544:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 801a546:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
 801a548:	bf5f      	itttt	pl
 801a54a:	6803      	ldrpl	r3, [r0, #0]
 801a54c:	8842      	ldrhpl	r2, [r0, #2]
 801a54e:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
 801a552:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
 801a556:	bf5d      	ittte	pl
 801a558:	3017      	addpl	r0, #23
 801a55a:	f020 0007 	bicpl.w	r0, r0, #7
 801a55e:	0880      	lsrpl	r0, r0, #2
	return 0;
 801a560:	2000      	movmi	r0, #0
}
 801a562:	4770      	bx	lr

0801a564 <dummy_timestamp>:
}
 801a564:	2000      	movs	r0, #0
 801a566:	4770      	bx	lr

0801a568 <atomic_inc>:
{
 801a568:	4603      	mov	r3, r0
}
 801a56a:	f3bf 8f5b 	dmb	ish
 801a56e:	e853 0f00 	ldrex	r0, [r3]
 801a572:	1c42      	adds	r2, r0, #1
 801a574:	e843 2100 	strex	r1, r2, [r3]
 801a578:	2900      	cmp	r1, #0
 801a57a:	d1f8      	bne.n	801a56e <atomic_inc+0x6>
 801a57c:	f3bf 8f5b 	dmb	ish
 801a580:	4770      	bx	lr

0801a582 <default_lf_get_timestamp>:
{
 801a582:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 801a584:	f00d fe2a 	bl	80281dc <z_impl_k_uptime_ticks>
 801a588:	220a      	movs	r2, #10
 801a58a:	2300      	movs	r3, #0
 801a58c:	f7e5 fe9e 	bl	80002cc <__aeabi_uldivmod>
}
 801a590:	bd08      	pop	{r3, pc}

0801a592 <z_log_vprintk>:
{
 801a592:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 801a594:	2300      	movs	r3, #0
 801a596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a59a:	461a      	mov	r2, r3
 801a59c:	4619      	mov	r1, r3
 801a59e:	4618      	mov	r0, r3
 801a5a0:	e9cd 3300 	strd	r3, r3, [sp]
 801a5a4:	f7e7 fb68 	bl	8001c78 <z_impl_z_log_msg_runtime_vcreate>
}
 801a5a8:	b005      	add	sp, #20
 801a5aa:	f85d fb04 	ldr.w	pc, [sp], #4

0801a5ae <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
 801a5ae:	2001      	movs	r0, #1
 801a5b0:	f7e7 b920 	b.w	80017f4 <z_log_dropped>

0801a5b4 <z_log_get_tag>:
}
 801a5b4:	2000      	movs	r0, #0
 801a5b6:	4770      	bx	lr

0801a5b8 <z_cbprintf_cpy>:
{
 801a5b8:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
 801a5ba:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
{
 801a5be:	460c      	mov	r4, r1
 801a5c0:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
 801a5c2:	1b9b      	subs	r3, r3, r6
 801a5c4:	428b      	cmp	r3, r1
 801a5c6:	d30a      	bcc.n	801a5de <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
 801a5c8:	6813      	ldr	r3, [r2, #0]
 801a5ca:	460a      	mov	r2, r1
 801a5cc:	4601      	mov	r1, r0
 801a5ce:	1998      	adds	r0, r3, r6
 801a5d0:	f000 f89b 	bl	801a70a <memcpy>
	desc->off += len;
 801a5d4:	68ab      	ldr	r3, [r5, #8]
	return len;
 801a5d6:	4620      	mov	r0, r4
	desc->off += len;
 801a5d8:	4423      	add	r3, r4
 801a5da:	60ab      	str	r3, [r5, #8]
}
 801a5dc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
 801a5de:	f06f 001b 	mvn.w	r0, #27
 801a5e2:	e7fb      	b.n	801a5dc <z_cbprintf_cpy+0x24>

0801a5e4 <z_log_msg_finalize>:
{
 801a5e4:	b570      	push	{r4, r5, r6, lr}
 801a5e6:	460e      	mov	r6, r1
 801a5e8:	4615      	mov	r5, r2
 801a5ea:	4619      	mov	r1, r3
	if (!msg) {
 801a5ec:	4604      	mov	r4, r0
 801a5ee:	b918      	cbnz	r0, 801a5f8 <z_log_msg_finalize+0x14>
}
 801a5f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
 801a5f4:	f7e7 b8fe 	b.w	80017f4 <z_log_dropped>
	if (data) {
 801a5f8:	b133      	cbz	r3, 801a608 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
 801a5fa:	f3c2 234a 	ubfx	r3, r2, #9, #11
 801a5fe:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
 801a600:	0d12      	lsrs	r2, r2, #20
 801a602:	4418      	add	r0, r3
 801a604:	f000 f881 	bl	801a70a <memcpy>
	z_log_msg_commit(msg);
 801a608:	4620      	mov	r0, r4
	msg->hdr.source = source;
 801a60a:	e9c4 5600 	strd	r5, r6, [r4]
}
 801a60e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
 801a612:	f7e7 ba79 	b.w	8001b08 <z_log_msg_commit>

0801a616 <buffer_write>:
{
 801a616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a618:	4606      	mov	r6, r0
 801a61a:	460d      	mov	r5, r1
 801a61c:	4614      	mov	r4, r2
 801a61e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 801a620:	4621      	mov	r1, r4
 801a622:	4628      	mov	r0, r5
 801a624:	463a      	mov	r2, r7
 801a626:	47b0      	blx	r6
	} while (len != 0);
 801a628:	1a24      	subs	r4, r4, r0
		buf += processed;
 801a62a:	4405      	add	r5, r0
	} while (len != 0);
 801a62c:	d1f8      	bne.n	801a620 <buffer_write+0xa>
}
 801a62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a630 <cbvprintf>:
{
 801a630:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 801a632:	2400      	movs	r4, #0
 801a634:	9400      	str	r4, [sp, #0]
 801a636:	f7e6 fbe9 	bl	8000e0c <z_cbvprintf_impl>
}
 801a63a:	b002      	add	sp, #8
 801a63c:	bd10      	pop	{r4, pc}

0801a63e <log_output_flush>:
{
 801a63e:	b510      	push	{r4, lr}
		     output->control_block->offset,
 801a640:	6842      	ldr	r2, [r0, #4]
{
 801a642:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 801a644:	6881      	ldr	r1, [r0, #8]
 801a646:	6800      	ldr	r0, [r0, #0]
 801a648:	e9d2 2300 	ldrd	r2, r3, [r2]
 801a64c:	f7ff ffe3 	bl	801a616 <buffer_write>
	output->control_block->offset = 0;
 801a650:	6863      	ldr	r3, [r4, #4]
 801a652:	2200      	movs	r2, #0
 801a654:	601a      	str	r2, [r3, #0]
}
 801a656:	bd10      	pop	{r4, pc}

0801a658 <out_func>:
{
 801a658:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 801a65a:	684b      	ldr	r3, [r1, #4]
{
 801a65c:	4605      	mov	r5, r0
 801a65e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 801a660:	681a      	ldr	r2, [r3, #0]
 801a662:	68cb      	ldr	r3, [r1, #12]
 801a664:	429a      	cmp	r2, r3
 801a666:	d102      	bne.n	801a66e <out_func+0x16>
		log_output_flush(out_ctx);
 801a668:	4608      	mov	r0, r1
 801a66a:	f7ff ffe8 	bl	801a63e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 801a66e:	6863      	ldr	r3, [r4, #4]
 801a670:	f3bf 8f5b 	dmb	ish
 801a674:	e853 2f00 	ldrex	r2, [r3]
 801a678:	1c51      	adds	r1, r2, #1
 801a67a:	e843 1000 	strex	r0, r1, [r3]
 801a67e:	2800      	cmp	r0, #0
 801a680:	d1f8      	bne.n	801a674 <out_func+0x1c>
 801a682:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 801a686:	68a3      	ldr	r3, [r4, #8]
}
 801a688:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
 801a68a:	549d      	strb	r5, [r3, r2]
}
 801a68c:	bd38      	pop	{r3, r4, r5, pc}

0801a68e <cr_out_func>:
	if (c == '\n') {
 801a68e:	280a      	cmp	r0, #10
{
 801a690:	b538      	push	{r3, r4, r5, lr}
 801a692:	4604      	mov	r4, r0
 801a694:	460d      	mov	r5, r1
	if (c == '\n') {
 801a696:	d102      	bne.n	801a69e <cr_out_func+0x10>
		out_func((int)'\r', ctx);
 801a698:	200d      	movs	r0, #13
 801a69a:	f7ff ffdd 	bl	801a658 <out_func>
	out_func(c, ctx);
 801a69e:	4629      	mov	r1, r5
 801a6a0:	4620      	mov	r0, r4
 801a6a2:	f7ff ffd9 	bl	801a658 <out_func>
}
 801a6a6:	2000      	movs	r0, #0
 801a6a8:	bd38      	pop	{r3, r4, r5, pc}

0801a6aa <log_backend_uart_init>:
}
 801a6aa:	4770      	bx	lr

0801a6ac <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 801a6ac:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 801a6ae:	6800      	ldr	r0, [r0, #0]
 801a6b0:	f7e7 bd62 	b.w	8002178 <z_arm_fatal_error>

0801a6b4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 801a6b4:	2100      	movs	r1, #0
 801a6b6:	2001      	movs	r0, #1
 801a6b8:	f7e7 bd5e 	b.w	8002178 <z_arm_fatal_error>

0801a6bc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 801a6bc:	b508      	push	{r3, lr}
	handler();
 801a6be:	f7e7 fde5 	bl	800228c <z_SysNmiOnReset>
	z_arm_int_exit();
}
 801a6c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 801a6c6:	f7e7 beb3 	b.w	8002430 <z_arm_exc_exit>

0801a6ca <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	f7e7 ba50 	b.w	8001b70 <z_impl_z_log_msg_static_create>

0801a6d0 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
 801a6d0:	3901      	subs	r1, #1
 801a6d2:	4603      	mov	r3, r0
 801a6d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a6d8:	b90a      	cbnz	r2, 801a6de <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
 801a6da:	701a      	strb	r2, [r3, #0]

	return dest;
}
 801a6dc:	4770      	bx	lr
		*d = *s;
 801a6de:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
 801a6e2:	e7f7      	b.n	801a6d4 <strcpy+0x4>

0801a6e4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 801a6e4:	4603      	mov	r3, r0
	size_t n = 0;
 801a6e6:	2000      	movs	r0, #0

	while (*s != '\0') {
 801a6e8:	5c1a      	ldrb	r2, [r3, r0]
 801a6ea:	b902      	cbnz	r2, 801a6ee <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 801a6ec:	4770      	bx	lr
		n++;
 801a6ee:	3001      	adds	r0, #1
 801a6f0:	e7fa      	b.n	801a6e8 <strlen+0x4>

0801a6f2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 801a6f2:	1e43      	subs	r3, r0, #1
 801a6f4:	3901      	subs	r1, #1
 801a6f6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801a6fa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a6fe:	4282      	cmp	r2, r0
 801a700:	d101      	bne.n	801a706 <strcmp+0x14>
 801a702:	2a00      	cmp	r2, #0
 801a704:	d1f7      	bne.n	801a6f6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 801a706:	1a10      	subs	r0, r2, r0
 801a708:	4770      	bx	lr

0801a70a <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 801a70a:	1e43      	subs	r3, r0, #1
 801a70c:	440a      	add	r2, r1
{
 801a70e:	b510      	push	{r4, lr}
	while (n > 0) {
 801a710:	4291      	cmp	r1, r2
 801a712:	d100      	bne.n	801a716 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 801a714:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 801a716:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a71a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 801a71e:	e7f7      	b.n	801a710 <memcpy+0x6>

0801a720 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 801a720:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 801a722:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 801a724:	4603      	mov	r3, r0
	while (n > 0) {
 801a726:	4293      	cmp	r3, r2
 801a728:	d100      	bne.n	801a72c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 801a72a:	4770      	bx	lr
		*(d_byte++) = c_byte;
 801a72c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 801a730:	e7f9      	b.n	801a726 <memset+0x6>

0801a732 <_stdout_hook_default>:
}
 801a732:	f04f 30ff 	mov.w	r0, #4294967295
 801a736:	4770      	bx	lr

0801a738 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
 801a738:	684b      	ldr	r3, [r1, #4]
 801a73a:	2b01      	cmp	r3, #1
 801a73c:	dd07      	ble.n	801a74e <sprintf_out+0x16>
		*(p->ptr) = c;
 801a73e:	680b      	ldr	r3, [r1, #0]
 801a740:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
 801a742:	680b      	ldr	r3, [r1, #0]
 801a744:	3301      	adds	r3, #1
 801a746:	600b      	str	r3, [r1, #0]
		p->len -= 1;
 801a748:	684b      	ldr	r3, [r1, #4]
 801a74a:	3b01      	subs	r3, #1
 801a74c:	604b      	str	r3, [r1, #4]
}
 801a74e:	2000      	movs	r0, #0
 801a750:	4770      	bx	lr

0801a752 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 801a752:	4603      	mov	r3, r0
	size_t n = 0;
 801a754:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 801a756:	5c1a      	ldrb	r2, [r3, r0]
 801a758:	b10a      	cbz	r2, 801a75e <strnlen+0xc>
 801a75a:	4288      	cmp	r0, r1
 801a75c:	d100      	bne.n	801a760 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 801a75e:	4770      	bx	lr
		n++;
 801a760:	3001      	adds	r0, #1
 801a762:	e7f8      	b.n	801a756 <strnlen+0x4>

0801a764 <stm32_exti_init>:
{
 801a764:	b508      	push	{r3, lr}
	DT_FOREACH_PROP_ELEM(DT_NODELABEL(exti),
 801a766:	2206      	movs	r2, #6
 801a768:	2101      	movs	r1, #1
 801a76a:	2000      	movs	r0, #0
 801a76c:	f7e8 faf2 	bl	8002d54 <stm32_fill_irq_table>
 801a770:	2200      	movs	r2, #0
 801a772:	2006      	movs	r0, #6
 801a774:	4611      	mov	r1, r2
 801a776:	f7e7 fd73 	bl	8002260 <z_arm_irq_priority_set>
 801a77a:	2101      	movs	r1, #1
 801a77c:	2207      	movs	r2, #7
 801a77e:	4608      	mov	r0, r1
 801a780:	f7e8 fae8 	bl	8002d54 <stm32_fill_irq_table>
 801a784:	2200      	movs	r2, #0
 801a786:	2007      	movs	r0, #7
 801a788:	4611      	mov	r1, r2
 801a78a:	f7e7 fd69 	bl	8002260 <z_arm_irq_priority_set>
 801a78e:	2208      	movs	r2, #8
 801a790:	2101      	movs	r1, #1
 801a792:	2002      	movs	r0, #2
 801a794:	f7e8 fade 	bl	8002d54 <stm32_fill_irq_table>
 801a798:	2200      	movs	r2, #0
 801a79a:	2008      	movs	r0, #8
 801a79c:	4611      	mov	r1, r2
 801a79e:	f7e7 fd5f 	bl	8002260 <z_arm_irq_priority_set>
 801a7a2:	2209      	movs	r2, #9
 801a7a4:	2101      	movs	r1, #1
 801a7a6:	2003      	movs	r0, #3
 801a7a8:	f7e8 fad4 	bl	8002d54 <stm32_fill_irq_table>
 801a7ac:	2200      	movs	r2, #0
 801a7ae:	2009      	movs	r0, #9
 801a7b0:	4611      	mov	r1, r2
 801a7b2:	f7e7 fd55 	bl	8002260 <z_arm_irq_priority_set>
 801a7b6:	220a      	movs	r2, #10
 801a7b8:	2101      	movs	r1, #1
 801a7ba:	2004      	movs	r0, #4
 801a7bc:	f7e8 faca 	bl	8002d54 <stm32_fill_irq_table>
 801a7c0:	2200      	movs	r2, #0
 801a7c2:	200a      	movs	r0, #10
 801a7c4:	4611      	mov	r1, r2
 801a7c6:	f7e7 fd4b 	bl	8002260 <z_arm_irq_priority_set>
 801a7ca:	2105      	movs	r1, #5
 801a7cc:	2217      	movs	r2, #23
 801a7ce:	4608      	mov	r0, r1
 801a7d0:	f7e8 fac0 	bl	8002d54 <stm32_fill_irq_table>
 801a7d4:	2200      	movs	r2, #0
 801a7d6:	2017      	movs	r0, #23
 801a7d8:	4611      	mov	r1, r2
 801a7da:	f7e7 fd41 	bl	8002260 <z_arm_irq_priority_set>
 801a7de:	2228      	movs	r2, #40	; 0x28
 801a7e0:	2106      	movs	r1, #6
 801a7e2:	200a      	movs	r0, #10
 801a7e4:	f7e8 fab6 	bl	8002d54 <stm32_fill_irq_table>
 801a7e8:	2200      	movs	r2, #0
 801a7ea:	2028      	movs	r0, #40	; 0x28
 801a7ec:	4611      	mov	r1, r2
 801a7ee:	f7e7 fd37 	bl	8002260 <z_arm_irq_priority_set>
}
 801a7f2:	2000      	movs	r0, #0
 801a7f4:	bd08      	pop	{r3, pc}

0801a7f6 <stm32_exti_disable>:
	if (line < 32) {
 801a7f6:	281f      	cmp	r0, #31
 801a7f8:	dc09      	bgt.n	801a80e <stm32_exti_disable+0x18>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 801a7fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
		LL_EXTI_DisableIT_0_31(BIT((uint32_t)line));
 801a7fe:	2201      	movs	r2, #1
 801a800:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 801a804:	4082      	lsls	r2, r0
 801a806:	ea23 0302 	bic.w	r3, r3, r2
 801a80a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 801a80e:	4770      	bx	lr

0801a810 <stm32_exti_trigger>:
	switch (trigger) {
 801a810:	2903      	cmp	r1, #3
 801a812:	d82e      	bhi.n	801a872 <stm32_exti_trigger+0x62>
 801a814:	e8df f001 	tbb	[pc, r1]
 801a818:	22160f02 	.word	0x22160f02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 801a81c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
		LL_EXTI_DisableRisingTrig_0_31(BIT((uint32_t)line));
 801a820:	2201      	movs	r2, #1
 801a822:	6819      	ldr	r1, [r3, #0]
 801a824:	4082      	lsls	r2, r0
 801a826:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR1, ExtiLine);
 801a82a:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 801a82c:	6859      	ldr	r1, [r3, #4]
 801a82e:	ea21 0202 	bic.w	r2, r1, r2
 801a832:	605a      	str	r2, [r3, #4]
}
 801a834:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(BIT((uint32_t)line));
 801a836:	2201      	movs	r2, #1
  SET_BIT(EXTI->RTSR1, ExtiLine);
 801a838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a83c:	4082      	lsls	r2, r0
 801a83e:	6819      	ldr	r1, [r3, #0]
 801a840:	4311      	orrs	r1, r2
 801a842:	e7f2      	b.n	801a82a <stm32_exti_trigger+0x1a>
  SET_BIT(EXTI->FTSR1, ExtiLine);
 801a844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
		LL_EXTI_EnableFallingTrig_0_31(BIT((uint32_t)line));
 801a848:	2201      	movs	r2, #1
 801a84a:	6859      	ldr	r1, [r3, #4]
 801a84c:	4082      	lsls	r2, r0
 801a84e:	4311      	orrs	r1, r2
 801a850:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 801a852:	6819      	ldr	r1, [r3, #0]
 801a854:	ea21 0202 	bic.w	r2, r1, r2
 801a858:	601a      	str	r2, [r3, #0]
}
 801a85a:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(BIT((uint32_t)line));
 801a85c:	2301      	movs	r3, #1
 801a85e:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 801a862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a866:	681a      	ldr	r2, [r3, #0]
 801a868:	4302      	orrs	r2, r0
 801a86a:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 801a86c:	685a      	ldr	r2, [r3, #4]
 801a86e:	4310      	orrs	r0, r2
 801a870:	6058      	str	r0, [r3, #4]
}
 801a872:	4770      	bx	lr

0801a874 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 801a874:	680b      	ldr	r3, [r1, #0]
 801a876:	f1a3 02d4 	sub.w	r2, r3, #212	; 0xd4
 801a87a:	2a20      	cmp	r2, #32
 801a87c:	d809      	bhi.n	801a892 <stm32_clock_control_on+0x1e>
	sys_set_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 801a87e:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 801a882:	6849      	ldr	r1, [r1, #4]
	return 0;
 801a884:	2000      	movs	r0, #0
	sys_set_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 801a886:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 801a88a:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 801a88c:	430a      	orrs	r2, r1
 801a88e:	601a      	str	r2, [r3, #0]
	return 0;
 801a890:	4770      	bx	lr
		return -ENOTSUP;
 801a892:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 801a896:	4770      	bx	lr

0801a898 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 801a898:	680b      	ldr	r3, [r1, #0]
 801a89a:	f1a3 02d4 	sub.w	r2, r3, #212	; 0xd4
 801a89e:	2a20      	cmp	r2, #32
 801a8a0:	d80a      	bhi.n	801a8b8 <stm32_clock_control_off+0x20>
	sys_clear_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 801a8a2:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
	*(volatile uint32_t *)addr = temp & ~mask;
 801a8a6:	6849      	ldr	r1, [r1, #4]
	return 0;
 801a8a8:	2000      	movs	r0, #0
	sys_clear_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 801a8aa:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 801a8ae:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp & ~mask;
 801a8b0:	ea22 0201 	bic.w	r2, r2, r1
 801a8b4:	601a      	str	r2, [r3, #0]
	return 0;
 801a8b6:	4770      	bx	lr
		return -ENOTSUP;
 801a8b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 801a8bc:	4770      	bx	lr

0801a8be <gpio_pin_configure_dt>:
{
 801a8be:	4603      	mov	r3, r0
 801a8c0:	460a      	mov	r2, r1
 801a8c2:	b4f0      	push	{r4, r5, r6, r7}
				  spec->pin,
 801a8c4:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
 801a8c6:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
 801a8c8:	6800      	ldr	r0, [r0, #0]
 801a8ca:	4313      	orrs	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 801a8cc:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
 801a8ce:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 801a8d0:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 801a8d2:	d506      	bpl.n	801a8e2 <gpio_pin_configure_dt+0x24>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 801a8d4:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 801a8d8:	d003      	beq.n	801a8e2 <gpio_pin_configure_dt+0x24>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 801a8da:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 801a8dc:	bf48      	it	mi
 801a8de:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 801a8e2:	2501      	movs	r5, #1
 801a8e4:	6834      	ldr	r4, [r6, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 801a8e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 801a8ea:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 801a8ec:	fa05 f501 	lsl.w	r5, r5, r1
 801a8f0:	bf4c      	ite	mi
 801a8f2:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 801a8f4:	43ac      	bicpl	r4, r5
 801a8f6:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
 801a8f8:	683b      	ldr	r3, [r7, #0]
}
 801a8fa:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
 801a8fc:	4718      	bx	r3

0801a8fe <ili9xxx_get_capabilities>:
{
 801a8fe:	b570      	push	{r4, r5, r6, lr}
 801a900:	460c      	mov	r4, r1
	const struct ili9xxx_config *config = dev->config;
 801a902:	6845      	ldr	r5, [r0, #4]
	struct ili9xxx_data *data = dev->data;
 801a904:	6906      	ldr	r6, [r0, #16]
	memset(capabilities, 0, sizeof(struct display_capabilities));
 801a906:	2210      	movs	r2, #16
 801a908:	2100      	movs	r1, #0
 801a90a:	4620      	mov	r0, r4
 801a90c:	f7ff ff08 	bl	801a720 <memset>
	capabilities->supported_pixel_formats =
 801a910:	2311      	movs	r3, #17
 801a912:	6063      	str	r3, [r4, #4]
	capabilities->current_pixel_format = data->pixel_format;
 801a914:	7873      	ldrb	r3, [r6, #1]
 801a916:	7323      	strb	r3, [r4, #12]
	if (data->orientation == DISPLAY_ORIENTATION_NORMAL ||
 801a918:	78b3      	ldrb	r3, [r6, #2]
 801a91a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
		capabilities->x_resolution = config->x_resolution;
 801a91e:	bf0b      	itete	eq
 801a920:	8e2b      	ldrheq	r3, [r5, #48]	; 0x30
		capabilities->x_resolution = config->y_resolution;
 801a922:	8e6b      	ldrhne	r3, [r5, #50]	; 0x32
		capabilities->x_resolution = config->x_resolution;
 801a924:	8023      	strheq	r3, [r4, #0]
		capabilities->x_resolution = config->y_resolution;
 801a926:	8023      	strhne	r3, [r4, #0]
		capabilities->y_resolution = config->y_resolution;
 801a928:	bf0c      	ite	eq
 801a92a:	8e6b      	ldrheq	r3, [r5, #50]	; 0x32
		capabilities->y_resolution = config->x_resolution;
 801a92c:	8e2b      	ldrhne	r3, [r5, #48]	; 0x30
		capabilities->y_resolution = config->y_resolution;
 801a92e:	8063      	strh	r3, [r4, #2]
	capabilities->current_orientation = data->orientation;
 801a930:	78b3      	ldrb	r3, [r6, #2]
 801a932:	7363      	strb	r3, [r4, #13]
}
 801a934:	bd70      	pop	{r4, r5, r6, pc}

0801a936 <z_log_msg_static_create.constprop.0>:
 801a936:	2300      	movs	r3, #0
 801a938:	f7e7 b91a 	b.w	8001b70 <z_impl_z_log_msg_static_create>

0801a93c <spi_write_dt>:
 *
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
 801a93c:	460a      	mov	r2, r1
	return spi_write(spec->bus, &spec->config, tx_bufs);
 801a93e:	4601      	mov	r1, r0
{
 801a940:	b410      	push	{r4}
	return spi_write(spec->bus, &spec->config, tx_bufs);
 801a942:	f851 0b04 	ldr.w	r0, [r1], #4
	ret = api->transceive(dev, config, tx_bufs, rx_bufs);
 801a946:	6883      	ldr	r3, [r0, #8]
 801a948:	681c      	ldr	r4, [r3, #0]
 801a94a:	2300      	movs	r3, #0
 801a94c:	46a4      	mov	ip, r4
}
 801a94e:	bc10      	pop	{r4}
	ret = api->transceive(dev, config, tx_bufs, rx_bufs);
 801a950:	4760      	bx	ip

0801a952 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 801a952:	4603      	mov	r3, r0
 801a954:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
 801a956:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 801a958:	7919      	ldrb	r1, [r3, #4]
 801a95a:	2301      	movs	r3, #1
 801a95c:	fa03 f101 	lsl.w	r1, r3, r1
 801a960:	6903      	ldr	r3, [r0, #16]
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 801a966:	bf18      	it	ne
 801a968:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 801a96c:	b112      	cbz	r2, 801a974 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 801a96e:	6883      	ldr	r3, [r0, #8]
 801a970:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 801a972:	4718      	bx	r3
 801a974:	6883      	ldr	r3, [r0, #8]
 801a976:	691b      	ldr	r3, [r3, #16]
 801a978:	e7fb      	b.n	801a972 <gpio_pin_set_dt.isra.0+0x20>

0801a97a <ili9xxx_transmit>:
{
 801a97a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a97c:	b087      	sub	sp, #28
	const struct ili9xxx_config *config = dev->config;
 801a97e:	6845      	ldr	r5, [r0, #4]
{
 801a980:	461e      	mov	r6, r3
 801a982:	4614      	mov	r4, r2
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1U };
 801a984:	ab02      	add	r3, sp, #8
	gpio_pin_set_dt(&config->cmd_data, ILI9XXX_CMD);
 801a986:	f105 071c 	add.w	r7, r5, #28
{
 801a98a:	f88d 1007 	strb.w	r1, [sp, #7]
	r = spi_write_dt(&config->spi, &tx_bufs);
 801a98e:	3504      	adds	r5, #4
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1U };
 801a990:	2101      	movs	r1, #1
 801a992:	9304      	str	r3, [sp, #16]
	tx_buf.buf = &cmd;
 801a994:	f10d 0307 	add.w	r3, sp, #7
	gpio_pin_set_dt(&config->cmd_data, ILI9XXX_CMD);
 801a998:	4638      	mov	r0, r7
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1U };
 801a99a:	9105      	str	r1, [sp, #20]
	tx_buf.len = 1U;
 801a99c:	e9cd 3102 	strd	r3, r1, [sp, #8]
	gpio_pin_set_dt(&config->cmd_data, ILI9XXX_CMD);
 801a9a0:	f7ff ffd7 	bl	801a952 <gpio_pin_set_dt.isra.0>
	r = spi_write_dt(&config->spi, &tx_bufs);
 801a9a4:	a904      	add	r1, sp, #16
 801a9a6:	4628      	mov	r0, r5
 801a9a8:	f7ff ffc8 	bl	801a93c <spi_write_dt>
	if (r < 0) {
 801a9ac:	2800      	cmp	r0, #0
 801a9ae:	db0c      	blt.n	801a9ca <ili9xxx_transmit+0x50>
	if (tx_data != NULL) {
 801a9b0:	b16c      	cbz	r4, 801a9ce <ili9xxx_transmit+0x54>
		gpio_pin_set_dt(&config->cmd_data, ILI9XXX_DATA);
 801a9b2:	2100      	movs	r1, #0
 801a9b4:	4638      	mov	r0, r7
		tx_buf.len = tx_len;
 801a9b6:	e9cd 4602 	strd	r4, r6, [sp, #8]
		gpio_pin_set_dt(&config->cmd_data, ILI9XXX_DATA);
 801a9ba:	f7ff ffca 	bl	801a952 <gpio_pin_set_dt.isra.0>
		r = spi_write_dt(&config->spi, &tx_bufs);
 801a9be:	a904      	add	r1, sp, #16
 801a9c0:	4628      	mov	r0, r5
 801a9c2:	f7ff ffbb 	bl	801a93c <spi_write_dt>
		if (r < 0) {
 801a9c6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
 801a9ca:	b007      	add	sp, #28
 801a9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
 801a9ce:	4620      	mov	r0, r4
 801a9d0:	e7fb      	b.n	801a9ca <ili9xxx_transmit+0x50>

0801a9d2 <ili9xxx_set_orientation>:
{
 801a9d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct ili9xxx_config *config = dev->config;
 801a9d4:	6843      	ldr	r3, [r0, #4]
	uint8_t tx_data = ILI9XXX_MADCTL_BGR;
 801a9d6:	2208      	movs	r2, #8
{
 801a9d8:	460c      	mov	r4, r1
	struct ili9xxx_data *data = dev->data;
 801a9da:	6905      	ldr	r5, [r0, #16]
	if (config->quirks->cmd_set == CMD_SET_1) {
 801a9dc:	681b      	ldr	r3, [r3, #0]
	uint8_t tx_data = ILI9XXX_MADCTL_BGR;
 801a9de:	f88d 2007 	strb.w	r2, [sp, #7]
	if (config->quirks->cmd_set == CMD_SET_1) {
 801a9e2:	781b      	ldrb	r3, [r3, #0]
 801a9e4:	b9d3      	cbnz	r3, 801aa1c <ili9xxx_set_orientation+0x4a>
		if (orientation == DISPLAY_ORIENTATION_NORMAL) {
 801a9e6:	2903      	cmp	r1, #3
 801a9e8:	d806      	bhi.n	801a9f8 <ili9xxx_set_orientation+0x26>
 801a9ea:	e8df f001 	tbb	[pc, r1]
 801a9ee:	1102      	.short	0x1102
 801a9f0:	1513      	.short	0x1513
			tx_data |= ILI9XXX_MADCTL_MX;
 801a9f2:	2348      	movs	r3, #72	; 0x48
			tx_data |= ILI9XXX_MADCTL_MV | ILI9XXX_MADCTL_MX;
 801a9f4:	f88d 3007 	strb.w	r3, [sp, #7]
	r = ili9xxx_transmit(dev, ILI9XXX_MADCTL, &tx_data, 1U);
 801a9f8:	2301      	movs	r3, #1
 801a9fa:	f10d 0207 	add.w	r2, sp, #7
 801a9fe:	2136      	movs	r1, #54	; 0x36
 801aa00:	f7ff ffbb 	bl	801a97a <ili9xxx_transmit>
	if (r < 0) {
 801aa04:	2800      	cmp	r0, #0
	return 0;
 801aa06:	bfa4      	itt	ge
 801aa08:	2000      	movge	r0, #0
	data->orientation = orientation;
 801aa0a:	70ac      	strbge	r4, [r5, #2]
}
 801aa0c:	b003      	add	sp, #12
 801aa0e:	bd30      	pop	{r4, r5, pc}
			tx_data |= ILI9XXX_MADCTL_MV;
 801aa10:	2328      	movs	r3, #40	; 0x28
 801aa12:	e7ef      	b.n	801a9f4 <ili9xxx_set_orientation+0x22>
			tx_data |= ILI9XXX_MADCTL_MY;
 801aa14:	2388      	movs	r3, #136	; 0x88
 801aa16:	e7ed      	b.n	801a9f4 <ili9xxx_set_orientation+0x22>
			tx_data |= ILI9XXX_MADCTL_MV | ILI9XXX_MADCTL_MX |
 801aa18:	23e8      	movs	r3, #232	; 0xe8
 801aa1a:	e7eb      	b.n	801a9f4 <ili9xxx_set_orientation+0x22>
	} else if (config->quirks->cmd_set == CMD_SET_2) {
 801aa1c:	2b01      	cmp	r3, #1
 801aa1e:	d1eb      	bne.n	801a9f8 <ili9xxx_set_orientation+0x26>
		if (orientation == DISPLAY_ORIENTATION_NORMAL) {
 801aa20:	2902      	cmp	r1, #2
 801aa22:	d005      	beq.n	801aa30 <ili9xxx_set_orientation+0x5e>
 801aa24:	2903      	cmp	r1, #3
 801aa26:	d005      	beq.n	801aa34 <ili9xxx_set_orientation+0x62>
 801aa28:	2901      	cmp	r1, #1
 801aa2a:	d1e5      	bne.n	801a9f8 <ili9xxx_set_orientation+0x26>
			tx_data |= ILI9XXX_MADCTL_MV | ILI9XXX_MADCTL_MY;
 801aa2c:	23a8      	movs	r3, #168	; 0xa8
 801aa2e:	e7e1      	b.n	801a9f4 <ili9xxx_set_orientation+0x22>
			tx_data |= ILI9XXX_MADCTL_MY | ILI9XXX_MADCTL_MX;
 801aa30:	23c8      	movs	r3, #200	; 0xc8
 801aa32:	e7df      	b.n	801a9f4 <ili9xxx_set_orientation+0x22>
			tx_data |= ILI9XXX_MADCTL_MV | ILI9XXX_MADCTL_MX;
 801aa34:	2368      	movs	r3, #104	; 0x68
 801aa36:	e7dd      	b.n	801a9f4 <ili9xxx_set_orientation+0x22>

0801aa38 <ili9xxx_set_pixel_format>:
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
 801aa38:	2910      	cmp	r1, #16
{
 801aa3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aa3c:	460c      	mov	r4, r1
	struct ili9xxx_data *data = dev->data;
 801aa3e:	6905      	ldr	r5, [r0, #16]
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
 801aa40:	d006      	beq.n	801aa50 <ili9xxx_set_pixel_format+0x18>
	} else if (pixel_format == PIXEL_FORMAT_RGB_888) {
 801aa42:	2901      	cmp	r1, #1
 801aa44:	d015      	beq.n	801aa72 <ili9xxx_set_pixel_format+0x3a>
}
 801aa46:	b002      	add	sp, #8
 801aa48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa4c:	f7e8 bbb8 	b.w	80031c0 <ili9xxx_set_pixel_format.part.0>
 801aa50:	2355      	movs	r3, #85	; 0x55
		bytes_per_pixel = 2U;
 801aa52:	2602      	movs	r6, #2
		tx_data = ILI9XXX_PIXSET_MCU_16_BIT | ILI9XXX_PIXSET_RGB_16_BIT;
 801aa54:	f88d 3007 	strb.w	r3, [sp, #7]
	r = ili9xxx_transmit(dev, ILI9XXX_PIXSET, &tx_data, 1U);
 801aa58:	f10d 0207 	add.w	r2, sp, #7
 801aa5c:	2301      	movs	r3, #1
 801aa5e:	213a      	movs	r1, #58	; 0x3a
 801aa60:	f7ff ff8b 	bl	801a97a <ili9xxx_transmit>
	if (r < 0) {
 801aa64:	2800      	cmp	r0, #0
	return 0;
 801aa66:	bfa2      	ittt	ge
 801aa68:	2000      	movge	r0, #0
	data->pixel_format = pixel_format;
 801aa6a:	706c      	strbge	r4, [r5, #1]
	data->bytes_per_pixel = bytes_per_pixel;
 801aa6c:	702e      	strbge	r6, [r5, #0]
}
 801aa6e:	b002      	add	sp, #8
 801aa70:	bd70      	pop	{r4, r5, r6, pc}
 801aa72:	2366      	movs	r3, #102	; 0x66
		bytes_per_pixel = 3U;
 801aa74:	2603      	movs	r6, #3
 801aa76:	e7ed      	b.n	801aa54 <ili9xxx_set_pixel_format+0x1c>

0801aa78 <ili9xxx_write>:
{
 801aa78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aa7c:	4616      	mov	r6, r2
	r = ili9xxx_set_mem_area(dev, x, y, desc->width, desc->height);
 801aa7e:	88df      	ldrh	r7, [r3, #6]
 801aa80:	889a      	ldrh	r2, [r3, #4]
{
 801aa82:	461c      	mov	r4, r3
	spi_data[0] = sys_cpu_to_be16(x);
 801aa84:	ba4b      	rev16	r3, r1
{
 801aa86:	4682      	mov	sl, r0
 801aa88:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	spi_data[0] = sys_cpu_to_be16(x);
 801aa8c:	f8ad 3008 	strh.w	r3, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(x + w - 1U);
 801aa90:	188b      	adds	r3, r1, r2
 801aa92:	3901      	subs	r1, #1
	const struct ili9xxx_config *config = dev->config;
 801aa94:	f8d0 8004 	ldr.w	r8, [r0, #4]
	spi_data[1] = sys_cpu_to_be16(x + w - 1U);
 801aa98:	3b01      	subs	r3, #1
	struct ili9xxx_data *data = dev->data;
 801aa9a:	6905      	ldr	r5, [r0, #16]
	spi_data[1] = sys_cpu_to_be16(x + w - 1U);
 801aa9c:	440a      	add	r2, r1
 801aa9e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801aaa2:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
	r = ili9xxx_transmit(dev, ILI9XXX_CASET, &spi_data[0], 4U);
 801aaa6:	2304      	movs	r3, #4
 801aaa8:	aa02      	add	r2, sp, #8
	spi_data[1] = sys_cpu_to_be16(x + w - 1U);
 801aaaa:	f8ad 100a 	strh.w	r1, [sp, #10]
	r = ili9xxx_transmit(dev, ILI9XXX_CASET, &spi_data[0], 4U);
 801aaae:	212a      	movs	r1, #42	; 0x2a
 801aab0:	f7ff ff63 	bl	801a97a <ili9xxx_transmit>
	if (r < 0) {
 801aab4:	2800      	cmp	r0, #0
 801aab6:	db35      	blt.n	801ab24 <ili9xxx_write+0xac>
	spi_data[0] = sys_cpu_to_be16(y);
 801aab8:	ba73      	rev16	r3, r6
	spi_data[1] = sys_cpu_to_be16(y + h - 1U);
 801aaba:	443e      	add	r6, r7
	r = ili9xxx_transmit(dev, ILI9XXX_PASET, &spi_data[0], 4U);
 801aabc:	aa02      	add	r2, sp, #8
 801aabe:	212b      	movs	r1, #43	; 0x2b
	spi_data[1] = sys_cpu_to_be16(y + h - 1U);
 801aac0:	3e01      	subs	r6, #1
	spi_data[0] = sys_cpu_to_be16(y);
 801aac2:	f8ad 3008 	strh.w	r3, [sp, #8]
	r = ili9xxx_transmit(dev, ILI9XXX_PASET, &spi_data[0], 4U);
 801aac6:	4650      	mov	r0, sl
	spi_data[1] = sys_cpu_to_be16(y + h - 1U);
 801aac8:	f3c6 2307 	ubfx	r3, r6, #8, #8
 801aacc:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 801aad0:	f8ad 300a 	strh.w	r3, [sp, #10]
	r = ili9xxx_transmit(dev, ILI9XXX_PASET, &spi_data[0], 4U);
 801aad4:	2304      	movs	r3, #4
 801aad6:	f7ff ff50 	bl	801a97a <ili9xxx_transmit>
	if (r < 0) {
 801aada:	2800      	cmp	r0, #0
 801aadc:	db22      	blt.n	801ab24 <ili9xxx_write+0xac>
	if (desc->pitch > desc->width) {
 801aade:	88a2      	ldrh	r2, [r4, #4]
	r = ili9xxx_transmit(dev, ILI9XXX_RAMWR, write_data_start,
 801aae0:	212c      	movs	r1, #44	; 0x2c
	if (desc->pitch > desc->width) {
 801aae2:	8923      	ldrh	r3, [r4, #8]
	r = ili9xxx_transmit(dev, ILI9XXX_RAMWR, write_data_start,
 801aae4:	4650      	mov	r0, sl
		nbr_of_writes = desc->height;
 801aae6:	88e6      	ldrh	r6, [r4, #6]
	if (desc->pitch > desc->width) {
 801aae8:	4293      	cmp	r3, r2
			     desc->width * data->bytes_per_pixel * write_h);
 801aaea:	782b      	ldrb	r3, [r5, #0]
		write_h = desc->height;
 801aaec:	bf94      	ite	ls
 801aaee:	4637      	movls	r7, r6
		write_h = 1U;
 801aaf0:	2701      	movhi	r7, #1
			     desc->width * data->bytes_per_pixel * write_h);
 801aaf2:	fb02 f303 	mul.w	r3, r2, r3
	r = ili9xxx_transmit(dev, ILI9XXX_RAMWR, write_data_start,
 801aaf6:	464a      	mov	r2, r9
		nbr_of_writes = 1U;
 801aaf8:	bf98      	it	ls
 801aafa:	2601      	movls	r6, #1
	r = ili9xxx_transmit(dev, ILI9XXX_RAMWR, write_data_start,
 801aafc:	437b      	muls	r3, r7
 801aafe:	f7ff ff3c 	bl	801a97a <ili9xxx_transmit>
	if (r < 0) {
 801ab02:	2800      	cmp	r0, #0
 801ab04:	db0e      	blt.n	801ab24 <ili9xxx_write+0xac>
	tx_bufs.count = 1;
 801ab06:	2301      	movs	r3, #1
	write_data_start += desc->pitch * data->bytes_per_pixel;
 801ab08:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	tx_bufs.buffers = &tx_buf;
 801ab0c:	f8cd d008 	str.w	sp, [sp, #8]
		r = spi_write_dt(&config->spi, &tx_bufs);
 801ab10:	f108 0804 	add.w	r8, r8, #4
	tx_bufs.count = 1;
 801ab14:	9303      	str	r3, [sp, #12]
	write_data_start += desc->pitch * data->bytes_per_pixel;
 801ab16:	782a      	ldrb	r2, [r5, #0]
 801ab18:	fb02 9a0a 	mla	sl, r2, sl, r9
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
 801ab1c:	4699      	mov	r9, r3
 801ab1e:	45b1      	cmp	r9, r6
 801ab20:	d303      	bcc.n	801ab2a <ili9xxx_write+0xb2>
	return 0;
 801ab22:	2000      	movs	r0, #0
}
 801ab24:	b004      	add	sp, #16
 801ab26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tx_buf.len = desc->width * data->bytes_per_pixel * write_h;
 801ab2a:	88a3      	ldrh	r3, [r4, #4]
		r = spi_write_dt(&config->spi, &tx_bufs);
 801ab2c:	a902      	add	r1, sp, #8
		tx_buf.buf = (void *)write_data_start;
 801ab2e:	f8cd a000 	str.w	sl, [sp]
		r = spi_write_dt(&config->spi, &tx_bufs);
 801ab32:	4640      	mov	r0, r8
		tx_buf.len = desc->width * data->bytes_per_pixel * write_h;
 801ab34:	782a      	ldrb	r2, [r5, #0]
 801ab36:	4353      	muls	r3, r2
 801ab38:	437b      	muls	r3, r7
 801ab3a:	9301      	str	r3, [sp, #4]
		r = spi_write_dt(&config->spi, &tx_bufs);
 801ab3c:	f7ff fefe 	bl	801a93c <spi_write_dt>
		if (r < 0) {
 801ab40:	2800      	cmp	r0, #0
 801ab42:	dbef      	blt.n	801ab24 <ili9xxx_write+0xac>
		write_data_start += desc->pitch * data->bytes_per_pixel;
 801ab44:	8923      	ldrh	r3, [r4, #8]
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
 801ab46:	f109 0901 	add.w	r9, r9, #1
		write_data_start += desc->pitch * data->bytes_per_pixel;
 801ab4a:	782a      	ldrb	r2, [r5, #0]
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
 801ab4c:	fa1f f989 	uxth.w	r9, r9
		write_data_start += desc->pitch * data->bytes_per_pixel;
 801ab50:	fb02 aa03 	mla	sl, r2, r3, sl
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
 801ab54:	e7e3      	b.n	801ab1e <ili9xxx_write+0xa6>

0801ab56 <ili9xxx_display_blanking_off>:
	return ili9xxx_transmit(dev, ILI9XXX_DISPON, NULL, 0);
 801ab56:	2300      	movs	r3, #0
 801ab58:	2129      	movs	r1, #41	; 0x29
 801ab5a:	461a      	mov	r2, r3
 801ab5c:	f7ff bf0d 	b.w	801a97a <ili9xxx_transmit>

0801ab60 <ili9xxx_display_blanking_on>:
	return ili9xxx_transmit(dev, ILI9XXX_DISPOFF, NULL, 0);
 801ab60:	2300      	movs	r3, #0
 801ab62:	2128      	movs	r1, #40	; 0x28
 801ab64:	461a      	mov	r2, r3
 801ab66:	f7ff bf08 	b.w	801a97a <ili9xxx_transmit>

0801ab6a <ili9340_regs_init>:

#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(display_ili9340, CONFIG_DISPLAY_LOG_LEVEL);

int ili9340_regs_init(const struct device *dev)
{
 801ab6a:	b538      	push	{r3, r4, r5, lr}
	const struct ili9xxx_config *config = dev->config;
	const struct ili9340_regs *regs = config->regs;
 801ab6c:	6843      	ldr	r3, [r0, #4]

	int r;

	LOG_HEXDUMP_DBG(regs->gamset, ILI9340_GAMSET_LEN, "GAMSET");
	r = ili9xxx_transmit(dev, ILI9340_GAMSET, regs->gamset,
 801ab6e:	2126      	movs	r1, #38	; 0x26
{
 801ab70:	4604      	mov	r4, r0
	const struct ili9340_regs *regs = config->regs;
 801ab72:	6b9d      	ldr	r5, [r3, #56]	; 0x38
	r = ili9xxx_transmit(dev, ILI9340_GAMSET, regs->gamset,
 801ab74:	2301      	movs	r3, #1
 801ab76:	462a      	mov	r2, r5
 801ab78:	f7ff feff 	bl	801a97a <ili9xxx_transmit>
			     ILI9340_GAMSET_LEN);
	if (r < 0) {
 801ab7c:	2800      	cmp	r0, #0
 801ab7e:	db44      	blt.n	801ac0a <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->frmctr1, ILI9340_FRMCTR1_LEN, "FRMCTR1");
	r = ili9xxx_transmit(dev, ILI9340_FRMCTR1, regs->frmctr1,
 801ab80:	2302      	movs	r3, #2
 801ab82:	1c6a      	adds	r2, r5, #1
 801ab84:	21b1      	movs	r1, #177	; 0xb1
 801ab86:	4620      	mov	r0, r4
 801ab88:	f7ff fef7 	bl	801a97a <ili9xxx_transmit>
			     ILI9340_FRMCTR1_LEN);
	if (r < 0) {
 801ab8c:	2800      	cmp	r0, #0
 801ab8e:	db3c      	blt.n	801ac0a <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->disctrl, ILI9340_DISCTRL_LEN, "DISCTRL");
	r = ili9xxx_transmit(dev, ILI9340_DISCTRL, regs->disctrl,
 801ab90:	2303      	movs	r3, #3
 801ab92:	21b6      	movs	r1, #182	; 0xb6
 801ab94:	4620      	mov	r0, r4
 801ab96:	18ea      	adds	r2, r5, r3
 801ab98:	f7ff feef 	bl	801a97a <ili9xxx_transmit>
			     ILI9340_DISCTRL_LEN);
	if (r < 0) {
 801ab9c:	2800      	cmp	r0, #0
 801ab9e:	db34      	blt.n	801ac0a <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->pwctrl1, ILI9340_PWCTRL1_LEN, "PWCTRL1");
	r = ili9xxx_transmit(dev, ILI9340_PWCTRL1, regs->pwctrl1,
 801aba0:	2302      	movs	r3, #2
 801aba2:	1daa      	adds	r2, r5, #6
 801aba4:	21c0      	movs	r1, #192	; 0xc0
 801aba6:	4620      	mov	r0, r4
 801aba8:	f7ff fee7 	bl	801a97a <ili9xxx_transmit>
			     ILI9340_PWCTRL1_LEN);
	if (r < 0) {
 801abac:	2800      	cmp	r0, #0
 801abae:	db2c      	blt.n	801ac0a <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->pwctrl2, ILI9340_PWCTRL2_LEN, "PWCTRL2");
	r = ili9xxx_transmit(dev, ILI9340_PWCTRL2, regs->pwctrl2,
 801abb0:	2301      	movs	r3, #1
 801abb2:	f105 0208 	add.w	r2, r5, #8
 801abb6:	21c1      	movs	r1, #193	; 0xc1
 801abb8:	4620      	mov	r0, r4
 801abba:	f7ff fede 	bl	801a97a <ili9xxx_transmit>
			     ILI9340_PWCTRL2_LEN);
	if (r < 0) {
 801abbe:	2800      	cmp	r0, #0
 801abc0:	db23      	blt.n	801ac0a <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->vmctrl1, ILI9340_VMCTRL1_LEN, "VMCTRL1");
	r = ili9xxx_transmit(dev, ILI9340_VMCTRL1, regs->vmctrl1,
 801abc2:	2302      	movs	r3, #2
 801abc4:	f105 0209 	add.w	r2, r5, #9
 801abc8:	21c5      	movs	r1, #197	; 0xc5
 801abca:	4620      	mov	r0, r4
 801abcc:	f7ff fed5 	bl	801a97a <ili9xxx_transmit>
			     ILI9340_VMCTRL1_LEN);
	if (r < 0) {
 801abd0:	2800      	cmp	r0, #0
 801abd2:	db1a      	blt.n	801ac0a <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->vmctrl2, ILI9340_VMCTRL2_LEN, "VMCTRL2");
	r = ili9xxx_transmit(dev, ILI9340_VMCTRL2, regs->vmctrl2,
 801abd4:	2301      	movs	r3, #1
 801abd6:	f105 020b 	add.w	r2, r5, #11
 801abda:	21c7      	movs	r1, #199	; 0xc7
 801abdc:	4620      	mov	r0, r4
 801abde:	f7ff fecc 	bl	801a97a <ili9xxx_transmit>
			     ILI9340_VMCTRL2_LEN);
	if (r < 0) {
 801abe2:	2800      	cmp	r0, #0
 801abe4:	db11      	blt.n	801ac0a <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->pgamctrl, ILI9340_PGAMCTRL_LEN, "PGAMCTRL");
	r = ili9xxx_transmit(dev, ILI9340_PGAMCTRL, regs->pgamctrl,
 801abe6:	230f      	movs	r3, #15
 801abe8:	f105 020c 	add.w	r2, r5, #12
 801abec:	21e0      	movs	r1, #224	; 0xe0
 801abee:	4620      	mov	r0, r4
 801abf0:	f7ff fec3 	bl	801a97a <ili9xxx_transmit>
			     ILI9340_PGAMCTRL_LEN);
	if (r < 0) {
 801abf4:	2800      	cmp	r0, #0
 801abf6:	db08      	blt.n	801ac0a <ili9340_regs_init+0xa0>
		return r;
	}

	LOG_HEXDUMP_DBG(regs->ngamctrl, ILI9340_NGAMCTRL_LEN, "NGAMCTRL");
	r = ili9xxx_transmit(dev, ILI9340_NGAMCTRL, regs->ngamctrl,
 801abf8:	230f      	movs	r3, #15
 801abfa:	f105 021b 	add.w	r2, r5, #27
 801abfe:	21e1      	movs	r1, #225	; 0xe1
 801ac00:	4620      	mov	r0, r4
 801ac02:	f7ff feba 	bl	801a97a <ili9xxx_transmit>
			     ILI9340_NGAMCTRL_LEN);
	if (r < 0) {
 801ac06:	ea00 70e0 	and.w	r0, r0, r0, asr #31
		return r;
	}

	return 0;
}
 801ac0a:	bd38      	pop	{r3, r4, r5, pc}

0801ac0c <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac0c:	6843      	ldr	r3, [r0, #4]
}
 801ac0e:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac10:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 801ac12:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 801ac14:	600b      	str	r3, [r1, #0]
}
 801ac16:	4770      	bx	lr

0801ac18 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac18:	6843      	ldr	r3, [r0, #4]
 801ac1a:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 801ac1c:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 801ac1e:	4042      	eors	r2, r0
 801ac20:	400a      	ands	r2, r1
 801ac22:	4042      	eors	r2, r0
}
 801ac24:	2000      	movs	r0, #0
  WRITE_REG(GPIOx->ODR, PortValue);
 801ac26:	615a      	str	r2, [r3, #20]
 801ac28:	4770      	bx	lr

0801ac2a <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac2a:	6843      	ldr	r3, [r0, #4]
}
 801ac2c:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac2e:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 801ac30:	6199      	str	r1, [r3, #24]
}
 801ac32:	4770      	bx	lr

0801ac34 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac34:	6843      	ldr	r3, [r0, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 801ac36:	0409      	lsls	r1, r1, #16
}
 801ac38:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac3a:	685b      	ldr	r3, [r3, #4]
 801ac3c:	6199      	str	r1, [r3, #24]
}
 801ac3e:	4770      	bx	lr

0801ac40 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac40:	6843      	ldr	r3, [r0, #4]
}
 801ac42:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ac44:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 801ac46:	6953      	ldr	r3, [r2, #20]
 801ac48:	404b      	eors	r3, r1
 801ac4a:	6153      	str	r3, [r2, #20]
}
 801ac4c:	4770      	bx	lr

0801ac4e <gpio_stm32_manage_callback>:
{
 801ac4e:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 801ac50:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 801ac52:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 801ac54:	b1f8      	cbz	r0, 801ac96 <gpio_stm32_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801ac56:	4288      	cmp	r0, r1
 801ac58:	d119      	bne.n	801ac8e <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 801ac5a:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 801ac5c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 801ac5e:	42a1      	cmp	r1, r4
	list->head = node;
 801ac60:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 801ac62:	d100      	bne.n	801ac66 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 801ac64:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 801ac66:	2000      	movs	r0, #0
 801ac68:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 801ac6a:	b12a      	cbz	r2, 801ac78 <gpio_stm32_manage_callback+0x2a>
	return list->head;
 801ac6c:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 801ac6e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 801ac70:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 801ac72:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 801ac74:	b902      	cbnz	r2, 801ac78 <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 801ac76:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 801ac78:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 801ac7a:	e010      	b.n	801ac9e <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801ac7c:	4281      	cmp	r1, r0
 801ac7e:	d106      	bne.n	801ac8e <gpio_stm32_manage_callback+0x40>
	return node->next;
 801ac80:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 801ac82:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 801ac84:	68d8      	ldr	r0, [r3, #12]
 801ac86:	4281      	cmp	r1, r0
 801ac88:	d1ed      	bne.n	801ac66 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 801ac8a:	60dc      	str	r4, [r3, #12]
}
 801ac8c:	e7eb      	b.n	801ac66 <gpio_stm32_manage_callback+0x18>
	return node->next;
 801ac8e:	4604      	mov	r4, r0
 801ac90:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801ac92:	2800      	cmp	r0, #0
 801ac94:	d1f2      	bne.n	801ac7c <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 801ac96:	2a00      	cmp	r2, #0
 801ac98:	d1e8      	bne.n	801ac6c <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 801ac9a:	f06f 0015 	mvn.w	r0, #21
}
 801ac9e:	bd10      	pop	{r4, pc}

0801aca0 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 801aca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801aca4:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 801aca6:	2001      	movs	r0, #1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 801aca8:	f3c2 1680 	ubfx	r6, r2, #6, #1
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 801acac:	f3c2 1cc1 	ubfx	ip, r2, #7, #2
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801acb0:	6867      	ldr	r7, [r4, #4]
	pinval = 1 << pin;
 801acb2:	4088      	lsls	r0, r1
 801acb4:	408e      	lsls	r6, r1
 801acb6:	f002 0530 	and.w	r5, r2, #48	; 0x30
 801acba:	ea27 0700 	bic.w	r7, r7, r0
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 801acbe:	f3c2 2241 	ubfx	r2, r2, #9, #2
	if (mode == STM32_MODER_ALT_MODE) {
 801acc2:	2d20      	cmp	r5, #32
 801acc4:	ea46 0607 	orr.w	r6, r6, r7
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 801acc8:	fa00 f701 	lsl.w	r7, r0, r1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801accc:	6066      	str	r6, [r4, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 801acce:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 801acd2:	f8d4 8008 	ldr.w	r8, [r4, #8]
 801acd6:	fb07 fc0c 	mul.w	ip, r7, ip
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 801acda:	fb07 f202 	mul.w	r2, r7, r2
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 801acde:	ea6f 060e 	mvn.w	r6, lr
 801ace2:	ea28 080e 	bic.w	r8, r8, lr
 801ace6:	ea4c 0c08 	orr.w	ip, ip, r8
 801acea:	f8c4 c008 	str.w	ip, [r4, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 801acee:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801acf2:	ea2c 0c0e 	bic.w	ip, ip, lr
 801acf6:	ea42 020c 	orr.w	r2, r2, ip
 801acfa:	60e2      	str	r2, [r4, #12]
 801acfc:	d10c      	bne.n	801ad18 <gpio_stm32_configure_raw.isra.0+0x78>
		if (pin < 8) {
 801acfe:	2907      	cmp	r1, #7
 801ad00:	dc12      	bgt.n	801ad28 <gpio_stm32_configure_raw.isra.0+0x88>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 801ad02:	fa07 f201 	lsl.w	r2, r7, r1
 801ad06:	6a20      	ldr	r0, [r4, #32]
 801ad08:	408a      	lsls	r2, r1
 801ad0a:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 801ad0e:	435a      	muls	r2, r3
 801ad10:	ea20 0101 	bic.w	r1, r0, r1
 801ad14:	430a      	orrs	r2, r1
 801ad16:	6222      	str	r2, [r4, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 801ad18:	6823      	ldr	r3, [r4, #0]
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 801ad1a:	092d      	lsrs	r5, r5, #4
 801ad1c:	401e      	ands	r6, r3
 801ad1e:	437d      	muls	r5, r7
 801ad20:	4335      	orrs	r5, r6
 801ad22:	6025      	str	r5, [r4, #0]
}
 801ad24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 801ad28:	0a02      	lsrs	r2, r0, #8
 801ad2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ad2c:	4352      	muls	r2, r2
 801ad2e:	4352      	muls	r2, r2
 801ad30:	ebc2 1002 	rsb	r0, r2, r2, lsl #4
 801ad34:	435a      	muls	r2, r3
 801ad36:	ea21 0100 	bic.w	r1, r1, r0
 801ad3a:	430a      	orrs	r2, r1
 801ad3c:	6262      	str	r2, [r4, #36]	; 0x24
}
 801ad3e:	e7eb      	b.n	801ad18 <gpio_stm32_configure_raw.isra.0+0x78>

0801ad40 <gpio_stm32_config>:
{
 801ad40:	b538      	push	{r3, r4, r5, lr}
 801ad42:	4604      	mov	r4, r0
	if ((flags & GPIO_OUTPUT) != 0) {
 801ad44:	0390      	lsls	r0, r2, #14
{
 801ad46:	460d      	mov	r5, r1
 801ad48:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 801ad4a:	d517      	bpl.n	801ad7c <gpio_stm32_config+0x3c>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 801ad4c:	0791      	lsls	r1, r2, #30
 801ad4e:	d50e      	bpl.n	801ad6e <gpio_stm32_config+0x2e>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 801ad50:	075a      	lsls	r2, r3, #29
 801ad52:	d52e      	bpl.n	801adb2 <gpio_stm32_config+0x72>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 801ad54:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 801ad56:	06d8      	lsls	r0, r3, #27
 801ad58:	d50b      	bpl.n	801ad72 <gpio_stm32_config+0x32>
			*pincfg |= STM32_PINCFG_PULL_UP;
 801ad5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 801ad5e:	0319      	lsls	r1, r3, #12
 801ad60:	d51a      	bpl.n	801ad98 <gpio_stm32_config+0x58>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ad62:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801ad64:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ad66:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801ad68:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 801ad6a:	618b      	str	r3, [r1, #24]
	return 0;
 801ad6c:	e00d      	b.n	801ad8a <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 801ad6e:	2210      	movs	r2, #16
 801ad70:	e7f1      	b.n	801ad56 <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 801ad72:	0699      	lsls	r1, r3, #26
 801ad74:	d5f3      	bpl.n	801ad5e <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 801ad76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 801ad7a:	e7f0      	b.n	801ad5e <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 801ad7c:	03da      	lsls	r2, r3, #15
 801ad7e:	d513      	bpl.n	801ada8 <gpio_stm32_config+0x68>
		if ((flags & GPIO_PULL_UP) != 0) {
 801ad80:	06d8      	lsls	r0, r3, #27
 801ad82:	d413      	bmi.n	801adac <gpio_stm32_config+0x6c>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 801ad84:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801ad88:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 801ad8a:	6860      	ldr	r0, [r4, #4]
 801ad8c:	2300      	movs	r3, #0
 801ad8e:	4629      	mov	r1, r5
 801ad90:	f7ff ff86 	bl	801aca0 <gpio_stm32_configure_raw.isra.0>
	return 0;
 801ad94:	2000      	movs	r0, #0
}
 801ad96:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 801ad98:	035b      	lsls	r3, r3, #13
 801ad9a:	d5f6      	bpl.n	801ad8a <gpio_stm32_config+0x4a>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 801ad9c:	2101      	movs	r1, #1
 801ad9e:	4620      	mov	r0, r4
 801ada0:	40a9      	lsls	r1, r5
 801ada2:	f7ff ff47 	bl	801ac34 <gpio_stm32_port_clear_bits_raw>
 801ada6:	e7f0      	b.n	801ad8a <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 801ada8:	2230      	movs	r2, #48	; 0x30
 801adaa:	e7ee      	b.n	801ad8a <gpio_stm32_config+0x4a>
			*pincfg |= STM32_PINCFG_PULL_UP;
 801adac:	f44f 7200 	mov.w	r2, #512	; 0x200
 801adb0:	e7eb      	b.n	801ad8a <gpio_stm32_config+0x4a>
				return -ENOTSUP;
 801adb2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 801adb6:	e7ee      	b.n	801ad96 <gpio_stm32_config+0x56>

0801adb8 <gpio_stm32_isr>:
{
 801adb8:	460b      	mov	r3, r1
 801adba:	b570      	push	{r4, r5, r6, lr}
 801adbc:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 801adbe:	b121      	cbz	r1, 801adca <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 801adc0:	2501      	movs	r5, #1
 801adc2:	685e      	ldr	r6, [r3, #4]
	return node->next;
 801adc4:	680c      	ldr	r4, [r1, #0]
 801adc6:	4085      	lsls	r5, r0
 801adc8:	b901      	cbnz	r1, 801adcc <gpio_stm32_isr+0x14>
}
 801adca:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 801adcc:	688a      	ldr	r2, [r1, #8]
 801adce:	402a      	ands	r2, r5
 801add0:	d002      	beq.n	801add8 <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 801add2:	684b      	ldr	r3, [r1, #4]
 801add4:	4630      	mov	r0, r6
 801add6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 801add8:	b11c      	cbz	r4, 801ade2 <gpio_stm32_isr+0x2a>
 801adda:	6823      	ldr	r3, [r4, #0]
 801addc:	4621      	mov	r1, r4
 801adde:	461c      	mov	r4, r3
 801ade0:	e7f2      	b.n	801adc8 <gpio_stm32_isr+0x10>
 801ade2:	4623      	mov	r3, r4
 801ade4:	e7fa      	b.n	801addc <gpio_stm32_isr+0x24>

0801ade6 <gpio_stm32_configure>:
{
 801ade6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ade8:	461f      	mov	r7, r3
 801adea:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 801adec:	6840      	ldr	r0, [r0, #4]
{
 801adee:	460e      	mov	r6, r1
 801adf0:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 801adf2:	f7ff ff55 	bl	801aca0 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 801adf6:	2f11      	cmp	r7, #17
 801adf8:	d107      	bne.n	801ae0a <gpio_stm32_configure+0x24>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801adfa:	2101      	movs	r1, #1
		if (gpio_out == STM32_ODR_1) {
 801adfc:	052b      	lsls	r3, r5, #20
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801adfe:	fa01 f106 	lsl.w	r1, r1, r6
		if (gpio_out == STM32_ODR_1) {
 801ae02:	d504      	bpl.n	801ae0e <gpio_stm32_configure+0x28>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801ae04:	6863      	ldr	r3, [r4, #4]
 801ae06:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 801ae08:	6199      	str	r1, [r3, #24]
}
 801ae0a:	2000      	movs	r0, #0
 801ae0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 801ae0e:	4620      	mov	r0, r4
 801ae10:	f7ff ff10 	bl	801ac34 <gpio_stm32_port_clear_bits_raw>
 801ae14:	e7f9      	b.n	801ae0a <gpio_stm32_configure+0x24>

0801ae16 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 801ae16:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 801ae18:	6803      	ldr	r3, [r0, #0]
 801ae1a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 801ae1c:	7905      	ldrb	r5, [r0, #4]
 801ae1e:	6804      	ldr	r4, [r0, #0]
 801ae20:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ae24:	42a3      	cmp	r3, r4
 801ae26:	d302      	bcc.n	801ae2e <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
 801ae28:	f06f 0001 	mvn.w	r0, #1
}
 801ae2c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 801ae2e:	795c      	ldrb	r4, [r3, #5]
 801ae30:	428c      	cmp	r4, r1
 801ae32:	d001      	beq.n	801ae38 <pinctrl_lookup_state+0x22>
		(*state)++;
 801ae34:	3308      	adds	r3, #8
 801ae36:	e7f0      	b.n	801ae1a <pinctrl_lookup_state+0x4>
			return 0;
 801ae38:	2000      	movs	r0, #0
 801ae3a:	e7f7      	b.n	801ae2c <pinctrl_lookup_state+0x16>

0801ae3c <reset_stm32_status>:
static int reset_stm32_status(const struct device *dev, uint32_t id,
			      uint8_t *status)
{
	const struct reset_stm32_config *config = dev->config;

	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 801ae3c:	6843      	ldr	r3, [r0, #4]
 801ae3e:	f3c1 104b 	ubfx	r0, r1, #5, #12
 801ae42:	f001 011f 	and.w	r1, r1, #31
 801ae46:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
 801ae48:	58c0      	ldr	r0, [r0, r3]
	return temp & (1 << bit);
 801ae4a:	2301      	movs	r3, #1
 801ae4c:	408b      	lsls	r3, r1
 801ae4e:	4203      	tst	r3, r0
				 STM32_RESET_REG_BIT(id));

	return 0;
}
 801ae50:	f04f 0000 	mov.w	r0, #0
	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 801ae54:	bf14      	ite	ne
 801ae56:	2301      	movne	r3, #1
 801ae58:	2300      	moveq	r3, #0
 801ae5a:	7013      	strb	r3, [r2, #0]
}
 801ae5c:	4770      	bx	lr

0801ae5e <reset_stm32_line_assert>:

static int reset_stm32_line_assert(const struct device *dev, uint32_t id)
{
 801ae5e:	b510      	push	{r4, lr}
	const struct reset_stm32_config *config = dev->config;

	sys_set_bit(config->base + STM32_RESET_SET_OFFSET(id),
 801ae60:	6843      	ldr	r3, [r0, #4]
 801ae62:	f3c1 104b 	ubfx	r0, r1, #5, #12
 801ae66:	f001 011f 	and.w	r1, r1, #31
 801ae6a:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 801ae6c:	2301      	movs	r3, #1
	uint32_t temp = *(volatile uint32_t *)addr;
 801ae6e:	5884      	ldr	r4, [r0, r2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 801ae70:	408b      	lsls	r3, r1
 801ae72:	4323      	orrs	r3, r4
 801ae74:	5083      	str	r3, [r0, r2]
		    STM32_RESET_REG_BIT(id));

	return 0;
}
 801ae76:	2000      	movs	r0, #0
 801ae78:	bd10      	pop	{r4, pc}

0801ae7a <reset_stm32_line_deassert>:

static int reset_stm32_line_deassert(const struct device *dev, uint32_t id)
{
 801ae7a:	b510      	push	{r4, lr}

#if DT_INST_PROP(0, set_bit_to_deassert)
	sys_set_bit(config->base + STM32_RESET_CLR_OFFSET(id),
		    STM32_RESET_REG_BIT(id));
#else
	sys_clear_bit(config->base + STM32_RESET_SET_OFFSET(id),
 801ae7c:	6843      	ldr	r3, [r0, #4]
 801ae7e:	f3c1 144b 	ubfx	r4, r1, #5, #12
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 801ae82:	2201      	movs	r2, #1
 801ae84:	f001 011f 	and.w	r1, r1, #31
 801ae88:	6818      	ldr	r0, [r3, #0]
 801ae8a:	408a      	lsls	r2, r1
	uint32_t temp = *(volatile uint32_t *)addr;
 801ae8c:	5823      	ldr	r3, [r4, r0]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 801ae8e:	ea23 0302 	bic.w	r3, r3, r2
 801ae92:	5023      	str	r3, [r4, r0]
		      STM32_RESET_REG_BIT(id));
#endif

	return 0;
}
 801ae94:	2000      	movs	r0, #0
 801ae96:	bd10      	pop	{r4, pc}

0801ae98 <reset_stm32_line_toggle>:

static int reset_stm32_line_toggle(const struct device *dev, uint32_t id)
{
 801ae98:	b538      	push	{r3, r4, r5, lr}
 801ae9a:	4604      	mov	r4, r0
 801ae9c:	460d      	mov	r5, r1
	reset_stm32_line_assert(dev, id);
 801ae9e:	f7ff ffde 	bl	801ae5e <reset_stm32_line_assert>
	reset_stm32_line_deassert(dev, id);
 801aea2:	4629      	mov	r1, r5
 801aea4:	4620      	mov	r0, r4
 801aea6:	f7ff ffe8 	bl	801ae7a <reset_stm32_line_deassert>

	return 0;
}
 801aeaa:	2000      	movs	r0, #0
 801aeac:	bd38      	pop	{r3, r4, r5, pc}

0801aeae <uart_stm32_err_check>:
	const struct uart_stm32_config *config = dev->config;
 801aeae:	6842      	ldr	r2, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 801aeb0:	6813      	ldr	r3, [r2, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 801aeb2:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 801aeb4:	69d9      	ldr	r1, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 801aeb6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 801aeba:	07c9      	lsls	r1, r1, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 801aebc:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_PARITY;
 801aebe:	bf48      	it	mi
 801aec0:	f040 0002 	orrmi.w	r0, r0, #2
 801aec4:	0789      	lsls	r1, r1, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 801aec6:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_FRAMING;
 801aec8:	bf48      	it	mi
 801aeca:	f040 0004 	orrmi.w	r0, r0, #4
 801aece:	0749      	lsls	r1, r1, #29
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 801aed0:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_NOISE;
 801aed2:	bf48      	it	mi
 801aed4:	f040 0020 	orrmi.w	r0, r0, #32
 801aed8:	05c9      	lsls	r1, r1, #23
 801aeda:	d504      	bpl.n	801aee6 <uart_stm32_err_check+0x38>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 801aedc:	f44f 7180 	mov.w	r1, #256	; 0x100
		err |= UART_BREAK;
 801aee0:	f040 0008 	orr.w	r0, r0, #8
 801aee4:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 801aee6:	07c1      	lsls	r1, r0, #31
 801aee8:	d502      	bpl.n	801aef0 <uart_stm32_err_check+0x42>
		LL_USART_ClearFlag_ORE(config->usart);
 801aeea:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801aeec:	2108      	movs	r1, #8
 801aeee:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 801aef0:	0783      	lsls	r3, r0, #30
 801aef2:	d502      	bpl.n	801aefa <uart_stm32_err_check+0x4c>
		LL_USART_ClearFlag_PE(config->usart);
 801aef4:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 801aef6:	2101      	movs	r1, #1
 801aef8:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 801aefa:	0741      	lsls	r1, r0, #29
 801aefc:	d502      	bpl.n	801af04 <uart_stm32_err_check+0x56>
		LL_USART_ClearFlag_FE(config->usart);
 801aefe:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 801af00:	2102      	movs	r1, #2
 801af02:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_NOISE) {
 801af04:	0683      	lsls	r3, r0, #26
 801af06:	d502      	bpl.n	801af0e <uart_stm32_err_check+0x60>
		LL_USART_ClearFlag_NE(config->usart);
 801af08:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 801af0a:	2204      	movs	r2, #4
 801af0c:	621a      	str	r2, [r3, #32]
}
 801af0e:	4770      	bx	lr

0801af10 <uart_stm32_poll_out>:
{
 801af10:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 801af12:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 801af14:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 801af16:	69d3      	ldr	r3, [r2, #28]
 801af18:	061b      	lsls	r3, r3, #24
 801af1a:	d5fc      	bpl.n	801af16 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 801af1c:	f04f 0210 	mov.w	r2, #16
 801af20:	f3ef 8311 	mrs	r3, BASEPRI
 801af24:	f382 8812 	msr	BASEPRI_MAX, r2
 801af28:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 801af2c:	6802      	ldr	r2, [r0, #0]
 801af2e:	69d4      	ldr	r4, [r2, #28]
 801af30:	0624      	lsls	r4, r4, #24
 801af32:	d404      	bmi.n	801af3e <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 801af34:	f383 8811 	msr	BASEPRI, r3
 801af38:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 801af3c:	e7ea      	b.n	801af14 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 801af3e:	6291      	str	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 801af40:	f383 8811 	msr	BASEPRI, r3
 801af44:	f3bf 8f6f 	isb	sy
}
 801af48:	bd10      	pop	{r4, pc}

0801af4a <uart_stm32_poll_in>:
	const struct uart_stm32_config *config = dev->config;
 801af4a:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 801af4c:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 801af4e:	69d0      	ldr	r0, [r2, #28]
 801af50:	0700      	lsls	r0, r0, #28
 801af52:	d501      	bpl.n	801af58 <uart_stm32_poll_in+0xe>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801af54:	2008      	movs	r0, #8
 801af56:	6210      	str	r0, [r2, #32]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 801af58:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 801af5a:	69da      	ldr	r2, [r3, #28]
 801af5c:	0692      	lsls	r2, r2, #26
 801af5e:	d503      	bpl.n	801af68 <uart_stm32_poll_in+0x1e>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 801af60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return 0;
 801af62:	2000      	movs	r0, #0
 801af64:	700b      	strb	r3, [r1, #0]
 801af66:	4770      	bx	lr
		return -1;
 801af68:	f04f 30ff 	mov.w	r0, #4294967295
}
 801af6c:	4770      	bx	lr

0801af6e <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 801af6e:	6903      	ldr	r3, [r0, #16]
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 801af74:	6843      	ldr	r3, [r0, #4]
 801af76:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 801af7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801af82:	d03d      	beq.n	801b000 <uart_stm32_config_get+0x92>
 801af84:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 801af88:	f1dc 0300 	rsbs	r3, ip, #0
 801af8c:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 801af90:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 801af92:	6843      	ldr	r3, [r0, #4]
 801af94:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 801af96:	685b      	ldr	r3, [r3, #4]
 801af98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 801af9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801afa0:	d030      	beq.n	801b004 <uart_stm32_config_get+0x96>
 801afa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801afa6:	d02f      	beq.n	801b008 <uart_stm32_config_get+0x9a>
		return UART_CFG_STOP_BITS_2;
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	bf0c      	ite	eq
 801afac:	2301      	moveq	r3, #1
 801afae:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 801afb0:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 801afb2:	6843      	ldr	r3, [r0, #4]
 801afb4:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 801afb6:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 801afb8:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 801afba:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 801afbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (db) {
 801afc2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 801afc6:	d021      	beq.n	801b00c <uart_stm32_config_get+0x9e>
 801afc8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 801afcc:	d123      	bne.n	801b016 <uart_stm32_config_get+0xa8>
			return UART_CFG_DATA_BITS_7;
 801afce:	2b00      	cmp	r3, #0
 801afd0:	bf14      	ite	ne
 801afd2:	2301      	movne	r3, #1
 801afd4:	2302      	moveq	r3, #2
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 801afd6:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 801afd8:	6843      	ldr	r3, [r0, #4]
 801afda:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 801afdc:	689b      	ldr	r3, [r3, #8]
 801afde:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 801afe2:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 801afe6:	4253      	negs	r3, r2
 801afe8:	4153      	adcs	r3, r2
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 801afea:	71cb      	strb	r3, [r1, #7]
	return LL_USART_IsEnabledDEMode(config->usart);
 801afec:	6842      	ldr	r2, [r0, #4]
}
 801afee:	2000      	movs	r0, #0
	return LL_USART_IsEnabledDEMode(config->usart);
 801aff0:	6812      	ldr	r2, [r2, #0]
  return ((READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM)) ? 1UL : 0UL);
 801aff2:	6892      	ldr	r2, [r2, #8]
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_RS485;
 801aff4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 801aff8:	bf18      	it	ne
 801affa:	2303      	movne	r3, #3
 801affc:	71cb      	strb	r3, [r1, #7]
}
 801affe:	4770      	bx	lr
	switch (parity) {
 801b000:	2302      	movs	r3, #2
 801b002:	e7c5      	b.n	801af90 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 801b004:	2300      	movs	r3, #0
 801b006:	e7d3      	b.n	801afb0 <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 801b008:	2302      	movs	r3, #2
 801b00a:	e7d1      	b.n	801afb0 <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_9;
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	bf14      	ite	ne
 801b010:	2303      	movne	r3, #3
 801b012:	2304      	moveq	r3, #4
 801b014:	e7df      	b.n	801afd6 <uart_stm32_config_get+0x68>
			return UART_CFG_DATA_BITS_8;
 801b016:	2b00      	cmp	r3, #0
 801b018:	bf14      	ite	ne
 801b01a:	2302      	movne	r3, #2
 801b01c:	2303      	moveq	r3, #3
 801b01e:	e7da      	b.n	801afd6 <uart_stm32_config_get+0x68>

0801b020 <uart_stm32_set_baudrate>:
{
 801b020:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 801b022:	6903      	ldr	r3, [r0, #16]
{
 801b024:	460c      	mov	r4, r1
	const struct uart_stm32_config *config = dev->config;
 801b026:	6845      	ldr	r5, [r0, #4]
		if (clock_control_get_rate(data->clock,
 801b028:	6858      	ldr	r0, [r3, #4]
					   (clock_control_subsys_t)&config->pclken[0],
 801b02a:	6869      	ldr	r1, [r5, #4]
	if (api->get_rate == NULL) {
 801b02c:	6883      	ldr	r3, [r0, #8]
 801b02e:	68db      	ldr	r3, [r3, #12]
 801b030:	b91b      	cbnz	r3, 801b03a <uart_stm32_set_baudrate+0x1a>
 801b032:	f7e8 fadd 	bl	80035f0 <uart_stm32_set_baudrate.part.0>
}
 801b036:	b003      	add	sp, #12
 801b038:	bd30      	pop	{r4, r5, pc}
	return api->get_rate(dev, sys, rate);
 801b03a:	aa01      	add	r2, sp, #4
 801b03c:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 801b03e:	2800      	cmp	r0, #0
 801b040:	dbf7      	blt.n	801b032 <uart_stm32_set_baudrate+0x12>
		LL_USART_SetOverSampling(config->usart,
 801b042:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 801b044:	6813      	ldr	r3, [r2, #0]
 801b046:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801b04a:	6013      	str	r3, [r2, #0]
  else if (BaudRate == 0U)
 801b04c:	2c00      	cmp	r4, #0
 801b04e:	d0f2      	beq.n	801b036 <uart_stm32_set_baudrate+0x16>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 801b050:	9b01      	ldr	r3, [sp, #4]
		LL_USART_SetBaudRate(config->usart,
 801b052:	682a      	ldr	r2, [r5, #0]
 801b054:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 801b058:	fbb3 f3f4 	udiv	r3, r3, r4
 801b05c:	b29b      	uxth	r3, r3
 801b05e:	60d3      	str	r3, [r2, #12]
			 "BaudRateReg >= 16");
 801b060:	e7e9      	b.n	801b036 <uart_stm32_set_baudrate+0x16>

0801b062 <spi_context_get_next_buf>:
{
 801b062:	b530      	push	{r4, r5, lr}
 801b064:	4604      	mov	r4, r0
	while (*count) {
 801b066:	6808      	ldr	r0, [r1, #0]
 801b068:	b908      	cbnz	r0, 801b06e <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 801b06a:	6010      	str	r0, [r2, #0]
	return NULL;
 801b06c:	e008      	b.n	801b080 <spi_context_get_next_buf+0x1e>
		if (((*current)->len / dfs) != 0) {
 801b06e:	6820      	ldr	r0, [r4, #0]
 801b070:	6845      	ldr	r5, [r0, #4]
 801b072:	429d      	cmp	r5, r3
 801b074:	d305      	bcc.n	801b082 <spi_context_get_next_buf+0x20>
			*buf_len = (*current)->len / dfs;
 801b076:	fbb5 f5f3 	udiv	r5, r5, r3
 801b07a:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
 801b07c:	6823      	ldr	r3, [r4, #0]
 801b07e:	6818      	ldr	r0, [r3, #0]
}
 801b080:	bd30      	pop	{r4, r5, pc}
		++(*current);
 801b082:	3008      	adds	r0, #8
 801b084:	6020      	str	r0, [r4, #0]
		--(*count);
 801b086:	6808      	ldr	r0, [r1, #0]
 801b088:	3801      	subs	r0, #1
 801b08a:	6008      	str	r0, [r1, #0]
 801b08c:	e7eb      	b.n	801b066 <spi_context_get_next_buf+0x4>

0801b08e <spi_context_buffers_setup>:
{
 801b08e:	b570      	push	{r4, r5, r6, lr}
 801b090:	4604      	mov	r4, r0
 801b092:	4615      	mov	r5, r2
 801b094:	461e      	mov	r6, r3
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 801b096:	b9e9      	cbnz	r1, 801b0d4 <spi_context_buffers_setup+0x46>
 801b098:	6341      	str	r1, [r0, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 801b09a:	2300      	movs	r3, #0
 801b09c:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 801b09e:	f104 0248 	add.w	r2, r4, #72	; 0x48
 801b0a2:	4633      	mov	r3, r6
 801b0a4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 801b0a8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801b0ac:	f7ff ffd9 	bl	801b062 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 801b0b0:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 801b0b2:	b9ad      	cbnz	r5, 801b0e0 <spi_context_buffers_setup+0x52>
 801b0b4:	63e5      	str	r5, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 801b0b6:	2300      	movs	r3, #0
 801b0b8:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 801b0ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b0be:	4633      	mov	r3, r6
 801b0c0:	f104 0140 	add.w	r1, r4, #64	; 0x40
 801b0c4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801b0c8:	f7ff ffcb 	bl	801b062 <spi_context_get_next_buf>
	ctx->sync_status = 0;
 801b0cc:	2300      	movs	r3, #0
	ctx->rx_buf = (uint8_t *)
 801b0ce:	64e0      	str	r0, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
 801b0d0:	6323      	str	r3, [r4, #48]	; 0x30
}
 801b0d2:	bd70      	pop	{r4, r5, r6, pc}
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 801b0d4:	680b      	ldr	r3, [r1, #0]
 801b0d6:	6343      	str	r3, [r0, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d0de      	beq.n	801b09a <spi_context_buffers_setup+0xc>
 801b0dc:	684b      	ldr	r3, [r1, #4]
 801b0de:	e7dd      	b.n	801b09c <spi_context_buffers_setup+0xe>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 801b0e0:	682b      	ldr	r3, [r5, #0]
 801b0e2:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d0e6      	beq.n	801b0b6 <spi_context_buffers_setup+0x28>
 801b0e8:	686b      	ldr	r3, [r5, #4]
 801b0ea:	e7e5      	b.n	801b0b8 <spi_context_buffers_setup+0x2a>

0801b0ec <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 801b0ec:	4603      	mov	r3, r0
 801b0ee:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
 801b0f0:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 801b0f2:	7919      	ldrb	r1, [r3, #4]
 801b0f4:	2301      	movs	r3, #1
 801b0f6:	fa03 f101 	lsl.w	r1, r3, r1
 801b0fa:	6903      	ldr	r3, [r0, #16]
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 801b100:	bf18      	it	ne
 801b102:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 801b106:	b112      	cbz	r2, 801b10e <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 801b108:	6883      	ldr	r3, [r0, #8]
 801b10a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 801b10c:	4718      	bx	r3
 801b10e:	6883      	ldr	r3, [r0, #8]
 801b110:	691b      	ldr	r3, [r3, #16]
 801b112:	e7fb      	b.n	801b10c <gpio_pin_set_dt.isra.0+0x20>

0801b114 <spi_context_unlock_unconditionally>:
{
 801b114:	b510      	push	{r4, lr}
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 801b116:	6803      	ldr	r3, [r0, #0]
{
 801b118:	4604      	mov	r4, r0
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
 801b11a:	b14b      	cbz	r3, 801b130 <spi_context_unlock_unconditionally+0x1c>
 801b11c:	689a      	ldr	r2, [r3, #8]
 801b11e:	b13a      	cbz	r2, 801b130 <spi_context_unlock_unconditionally+0x1c>
			k_busy_wait(ctx->config->cs.delay);
 801b120:	6918      	ldr	r0, [r3, #16]
	z_impl_k_busy_wait(usec_to_wait);
 801b122:	f7fd fde5 	bl	8018cf0 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs.gpio, 0);
 801b126:	6820      	ldr	r0, [r4, #0]
 801b128:	2100      	movs	r1, #0
 801b12a:	3008      	adds	r0, #8
 801b12c:	f7ff ffde 	bl	801b0ec <gpio_pin_set_dt.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
 801b130:	69a3      	ldr	r3, [r4, #24]
 801b132:	b933      	cbnz	r3, 801b142 <spi_context_unlock_unconditionally+0x2e>
		ctx->owner = NULL;
 801b134:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 801b136:	f104 0010 	add.w	r0, r4, #16
}
 801b13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b13e:	f7fe b835 	b.w	80191ac <z_impl_k_sem_give>
 801b142:	bd10      	pop	{r4, pc}

0801b144 <spi_stm32_release>:
{
 801b144:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 801b146:	6900      	ldr	r0, [r0, #16]
 801b148:	f7ff ffe4 	bl	801b114 <spi_context_unlock_unconditionally>
}
 801b14c:	2000      	movs	r0, #0
 801b14e:	bd08      	pop	{r3, pc}

0801b150 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 801b150:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 801b152:	b910      	cbnz	r0, 801b15a <lv_disp_get_scr_act+0xa>
 801b154:	f7f6 ff9a 	bl	801208c <lv_disp_get_default>
    if(!disp) {
 801b158:	b100      	cbz	r0, 801b15c <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 801b15a:	6900      	ldr	r0, [r0, #16]
}
 801b15c:	bd08      	pop	{r3, pc}

0801b15e <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 801b15e:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 801b160:	b910      	cbnz	r0, 801b168 <lv_disp_get_scr_prev+0xa>
 801b162:	f7f6 ff93 	bl	801208c <lv_disp_get_default>
    if(!disp) {
 801b166:	b100      	cbz	r0, 801b16a <lv_disp_get_scr_prev+0xc>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 801b168:	6940      	ldr	r0, [r0, #20]
}
 801b16a:	bd08      	pop	{r3, pc}

0801b16c <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 801b16c:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 801b16e:	b910      	cbnz	r0, 801b176 <lv_disp_get_layer_top+0xa>
 801b170:	f7f6 ff8c 	bl	801208c <lv_disp_get_default>
    if(!disp) {
 801b174:	b100      	cbz	r0, 801b178 <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 801b176:	69c0      	ldr	r0, [r0, #28]
}
 801b178:	bd08      	pop	{r3, pc}

0801b17a <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 801b17a:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 801b17c:	b910      	cbnz	r0, 801b184 <lv_disp_get_layer_sys+0xa>
 801b17e:	f7f6 ff85 	bl	801208c <lv_disp_get_default>
    if(!disp) {
 801b182:	b100      	cbz	r0, 801b186 <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 801b184:	6a00      	ldr	r0, [r0, #32]
}
 801b186:	bd08      	pop	{r3, pc}

0801b188 <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 801b188:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 801b18a:	b908      	cbnz	r0, 801b190 <lv_disp_get_theme+0x8>
 801b18c:	f7f6 ff7e 	bl	801208c <lv_disp_get_default>
    return disp->theme;
}
 801b190:	6880      	ldr	r0, [r0, #8]
 801b192:	bd08      	pop	{r3, pc}

0801b194 <lv_disp_is_invalidation_enabled>:
 * Get display invalidation is enabled.
 * @param disp pointer to a display (NULL to use the default display)
 * @return return true if invalidation is enabled
 */
bool lv_disp_is_invalidation_enabled(lv_disp_t * disp)
{
 801b194:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 801b196:	b910      	cbnz	r0, 801b19e <lv_disp_is_invalidation_enabled+0xa>
 801b198:	f7f6 ff78 	bl	801208c <lv_disp_get_default>
    if(!disp) {
 801b19c:	b128      	cbz	r0, 801b1aa <lv_disp_is_invalidation_enabled+0x16>
        LV_LOG_WARN("no display registered");
        return false;
    }

    return (disp->inv_en_cnt > 0);
 801b19e:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 801b1a2:	2800      	cmp	r0, #0
 801b1a4:	bfd4      	ite	le
 801b1a6:	2000      	movle	r0, #0
 801b1a8:	2001      	movgt	r0, #1
}
 801b1aa:	bd08      	pop	{r3, pc}

0801b1ac <lv_obj_get_event_dsc.isra.0>:
    if(!obj->spec_attr) return NULL;
 801b1ac:	b150      	cbz	r0, 801b1c4 <lv_obj_get_event_dsc.isra.0+0x18>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 801b1ae:	7e83      	ldrb	r3, [r0, #26]
 801b1b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b1b4:	428b      	cmp	r3, r1
 801b1b6:	d904      	bls.n	801b1c2 <lv_obj_get_event_dsc.isra.0+0x16>
    return &obj->spec_attr->event_dsc[id];
 801b1b8:	68c0      	ldr	r0, [r0, #12]
 801b1ba:	230c      	movs	r3, #12
 801b1bc:	fb03 0001 	mla	r0, r3, r1, r0
 801b1c0:	4770      	bx	lr
    if(!obj->spec_attr) return NULL;
 801b1c2:	2000      	movs	r0, #0
}
 801b1c4:	4770      	bx	lr

0801b1c6 <lv_obj_event_base>:
{
 801b1c6:	b510      	push	{r4, lr}
 801b1c8:	460c      	mov	r4, r1
    if(class_p == NULL) base = e->current_target->class_p;
 801b1ca:	b970      	cbnz	r0, 801b1ea <lv_obj_event_base+0x24>
 801b1cc:	684b      	ldr	r3, [r1, #4]
 801b1ce:	6818      	ldr	r0, [r3, #0]
    while(base && base->event_cb == NULL) base = base->base_class;
 801b1d0:	b168      	cbz	r0, 801b1ee <lv_obj_event_base+0x28>
 801b1d2:	6903      	ldr	r3, [r0, #16]
 801b1d4:	b14b      	cbz	r3, 801b1ea <lv_obj_event_base+0x24>
    e->user_data = NULL;
 801b1d6:	2300      	movs	r3, #0
    base->event_cb(base, e);
 801b1d8:	4621      	mov	r1, r4
    e->user_data = NULL;
 801b1da:	60e3      	str	r3, [r4, #12]
    base->event_cb(base, e);
 801b1dc:	6903      	ldr	r3, [r0, #16]
 801b1de:	4798      	blx	r3
    if(e->deleted) res = LV_RES_INV;
 801b1e0:	7e20      	ldrb	r0, [r4, #24]
 801b1e2:	43c0      	mvns	r0, r0
 801b1e4:	f000 0001 	and.w	r0, r0, #1
}
 801b1e8:	bd10      	pop	{r4, pc}
    while(base && base->event_cb == NULL) base = base->base_class;
 801b1ea:	6800      	ldr	r0, [r0, #0]
 801b1ec:	e7f0      	b.n	801b1d0 <lv_obj_event_base+0xa>
    if(base == NULL) return LV_RES_OK;
 801b1ee:	2001      	movs	r0, #1
 801b1f0:	e7fa      	b.n	801b1e8 <lv_obj_event_base+0x22>

0801b1f2 <lv_event_get_target>:
}
 801b1f2:	6800      	ldr	r0, [r0, #0]
 801b1f4:	4770      	bx	lr

0801b1f6 <lv_event_get_current_target>:
}
 801b1f6:	6840      	ldr	r0, [r0, #4]
 801b1f8:	4770      	bx	lr

0801b1fa <lv_event_get_code>:
    return e->code & ~LV_EVENT_PREPROCESS;
 801b1fa:	7a00      	ldrb	r0, [r0, #8]
}
 801b1fc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801b200:	4770      	bx	lr

0801b202 <lv_event_get_param>:
}
 801b202:	6900      	ldr	r0, [r0, #16]
 801b204:	4770      	bx	lr

0801b206 <lv_event_get_user_data>:
}
 801b206:	68c0      	ldr	r0, [r0, #12]
 801b208:	4770      	bx	lr

0801b20a <lv_obj_add_event_cb>:
{
 801b20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b20e:	4604      	mov	r4, r0
 801b210:	460f      	mov	r7, r1
 801b212:	4616      	mov	r6, r2
 801b214:	461d      	mov	r5, r3
    lv_obj_allocate_spec_attr(obj);
 801b216:	f7e9 fdaf 	bl	8004d78 <lv_obj_allocate_spec_attr>
    obj->spec_attr->event_dsc_cnt++;
 801b21a:	68a2      	ldr	r2, [r4, #8]
 801b21c:	7e93      	ldrb	r3, [r2, #26]
 801b21e:	1c59      	adds	r1, r3, #1
 801b220:	f361 0305 	bfi	r3, r1, #0, #6
 801b224:	7693      	strb	r3, [r2, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 801b226:	f8d4 8008 	ldr.w	r8, [r4, #8]
                                               obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 801b22a:	f898 001a 	ldrb.w	r0, [r8, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 801b22e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801b232:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b236:	0081      	lsls	r1, r0, #2
 801b238:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801b23c:	f7f7 fa6e 	bl	801271c <lv_mem_realloc>
 801b240:	f8c8 000c 	str.w	r0, [r8, #12]
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 801b244:	68a3      	ldr	r3, [r4, #8]
 801b246:	68da      	ldr	r2, [r3, #12]
 801b248:	b902      	cbnz	r2, 801b24c <lv_obj_add_event_cb+0x42>
 801b24a:	e7fe      	b.n	801b24a <lv_obj_add_event_cb+0x40>
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
 801b24c:	7e9b      	ldrb	r3, [r3, #26]
 801b24e:	f06f 0c0b 	mvn.w	ip, #11
 801b252:	200c      	movs	r0, #12
 801b254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b258:	fb10 c303 	smlabb	r3, r0, r3, ip
 801b25c:	50d7      	str	r7, [r2, r3]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].filter = filter;
 801b25e:	68a3      	ldr	r3, [r4, #8]
 801b260:	7e99      	ldrb	r1, [r3, #26]
 801b262:	68db      	ldr	r3, [r3, #12]
 801b264:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801b268:	fb10 c101 	smlabb	r1, r0, r1, ip
 801b26c:	440b      	add	r3, r1
 801b26e:	721e      	strb	r6, [r3, #8]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 801b270:	68a3      	ldr	r3, [r4, #8]
 801b272:	7e9a      	ldrb	r2, [r3, #26]
 801b274:	68db      	ldr	r3, [r3, #12]
 801b276:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801b27a:	fb10 c202 	smlabb	r2, r0, r2, ip
 801b27e:	4413      	add	r3, r2
 801b280:	605d      	str	r5, [r3, #4]
    return &obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1];
 801b282:	68a2      	ldr	r2, [r4, #8]
 801b284:	7e93      	ldrb	r3, [r2, #26]
 801b286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b28a:	fb10 c003 	smlabb	r0, r0, r3, ip
 801b28e:	68d3      	ldr	r3, [r2, #12]
}
 801b290:	4418      	add	r0, r3
 801b292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b296 <lv_event_get_indev>:
       e->code == LV_EVENT_DEFOCUSED ||
 801b296:	7a03      	ldrb	r3, [r0, #8]
    if(e->code == LV_EVENT_PRESSED ||
 801b298:	3b01      	subs	r3, #1
 801b29a:	2b0f      	cmp	r3, #15
    return e->param;
 801b29c:	bf94      	ite	ls
 801b29e:	6900      	ldrls	r0, [r0, #16]
        return NULL;
 801b2a0:	2000      	movhi	r0, #0
}
 801b2a2:	4770      	bx	lr

0801b2a4 <lv_event_get_draw_ctx>:
    if(e->code == LV_EVENT_DRAW_MAIN ||
 801b2a4:	7a03      	ldrb	r3, [r0, #8]
 801b2a6:	3b14      	subs	r3, #20
 801b2a8:	2b05      	cmp	r3, #5
    return e->param;
 801b2aa:	bf94      	ite	ls
 801b2ac:	6900      	ldrls	r0, [r0, #16]
        return NULL;
 801b2ae:	2000      	movhi	r0, #0
}
 801b2b0:	4770      	bx	lr

0801b2b2 <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801b2b2:	7a02      	ldrb	r2, [r0, #8]
{
 801b2b4:	460b      	mov	r3, r1
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801b2b6:	2a13      	cmp	r2, #19
 801b2b8:	d106      	bne.n	801b2c8 <lv_event_set_ext_draw_size+0x16>
    return e->param;
 801b2ba:	6902      	ldr	r2, [r0, #16]
        *cur_size = LV_MAX(*cur_size, size);
 801b2bc:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b2c0:	4299      	cmp	r1, r3
 801b2c2:	bfb8      	it	lt
 801b2c4:	4619      	movlt	r1, r3
 801b2c6:	8011      	strh	r1, [r2, #0]
}
 801b2c8:	4770      	bx	lr

0801b2ca <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 801b2ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
 801b2cc:	2600      	movs	r6, #0
{
 801b2ce:	4607      	mov	r7, r0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 801b2d0:	2000      	movs	r0, #0
 801b2d2:	f7f6 ff19 	bl	8012108 <lv_indev_get_next>
    lv_indev_t * indev_encoder = NULL;
 801b2d6:	4635      	mov	r5, r6
    lv_indev_t * indev = lv_indev_get_next(NULL);
 801b2d8:	4604      	mov	r4, r0
    while(indev) {
 801b2da:	b934      	cbnz	r4, 801b2ea <get_indev+0x20>
            indev_group = indev;
        }
        indev = lv_indev_get_next(indev);
    }

    if(indev_encoder) return indev_encoder;
 801b2dc:	b9bd      	cbnz	r5, 801b30e <get_indev+0x44>
    if(indev_group) return indev_group;
 801b2de:	b9c6      	cbnz	r6, 801b312 <get_indev+0x48>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 801b2e0:	4630      	mov	r0, r6
}
 801b2e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return lv_indev_get_next(NULL);
 801b2e6:	f7f6 bf0f 	b.w	8012108 <lv_indev_get_next>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801b2ea:	4620      	mov	r0, r4
 801b2ec:	f000 f945 	bl	801b57a <lv_indev_get_type>
        if(indev->group == g) {
 801b2f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801b2f2:	42bb      	cmp	r3, r7
 801b2f4:	d105      	bne.n	801b302 <get_indev+0x38>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 801b2f6:	2802      	cmp	r0, #2
 801b2f8:	d008      	beq.n	801b30c <get_indev+0x42>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 801b2fa:	4626      	mov	r6, r4
 801b2fc:	2804      	cmp	r0, #4
 801b2fe:	bf08      	it	eq
 801b300:	4625      	moveq	r5, r4
        indev = lv_indev_get_next(indev);
 801b302:	4620      	mov	r0, r4
 801b304:	f7f6 ff00 	bl	8012108 <lv_indev_get_next>
 801b308:	4604      	mov	r4, r0
 801b30a:	e7e6      	b.n	801b2da <get_indev+0x10>
 801b30c:	4625      	mov	r5, r4
}
 801b30e:	4628      	mov	r0, r5
 801b310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b312:	4635      	mov	r5, r6
 801b314:	e7fb      	b.n	801b30e <get_indev+0x44>

0801b316 <focus_next_core>:
{
 801b316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->frozen) return focus_changed;
 801b31a:	7f03      	ldrb	r3, [r0, #28]
{
 801b31c:	4605      	mov	r5, r0
 801b31e:	4688      	mov	r8, r1
 801b320:	4692      	mov	sl, r2
    if(group->frozen) return focus_changed;
 801b322:	07dc      	lsls	r4, r3, #31
 801b324:	d502      	bpl.n	801b32c <focus_next_core+0x16>
 801b326:	2000      	movs	r0, #0
}
 801b328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_obj_t ** obj_next     = group->obj_focus;
 801b32c:	68c6      	ldr	r6, [r0, #12]
        if(obj_next == NULL) {
 801b32e:	b1be      	cbz	r6, 801b360 <focus_next_core+0x4a>
    lv_obj_t ** obj_next     = group->obj_focus;
 801b330:	4637      	mov	r7, r6
    bool can_begin           = true;
 801b332:	f04f 0901 	mov.w	r9, #1
            obj_next = move(&group->obj_ll, obj_next);
 801b336:	4631      	mov	r1, r6
 801b338:	4628      	mov	r0, r5
 801b33a:	47d0      	blx	sl
            if(obj_next == obj_sentinel) return focus_changed;
 801b33c:	42b8      	cmp	r0, r7
            obj_next = move(&group->obj_ll, obj_next);
 801b33e:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return focus_changed;
 801b340:	d0f1      	beq.n	801b326 <focus_next_core+0x10>
 801b342:	463e      	mov	r6, r7
        if(obj_next == NULL) continue;
 801b344:	b9ac      	cbnz	r4, 801b372 <focus_next_core+0x5c>
            if(group->wrap || obj_sentinel == NULL) {
 801b346:	7f2b      	ldrb	r3, [r5, #28]
 801b348:	0719      	lsls	r1, r3, #28
 801b34a:	d5ec      	bpl.n	801b326 <focus_next_core+0x10>
                if(!can_begin) return focus_changed;
 801b34c:	f1b9 0f00 	cmp.w	r9, #0
 801b350:	d0e9      	beq.n	801b326 <focus_next_core+0x10>
                obj_next  = begin(&group->obj_ll);
 801b352:	4628      	mov	r0, r5
 801b354:	47c0      	blx	r8
 801b356:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
 801b358:	b136      	cbz	r6, 801b368 <focus_next_core+0x52>
                can_begin = false;
 801b35a:	f04f 0900 	mov.w	r9, #0
 801b35e:	e7f1      	b.n	801b344 <focus_next_core+0x2e>
            if(group->wrap || obj_sentinel == NULL) {
 801b360:	071a      	lsls	r2, r3, #28
 801b362:	d4f6      	bmi.n	801b352 <focus_next_core+0x3c>
                obj_next  = begin(&group->obj_ll);
 801b364:	4788      	blx	r1
 801b366:	4604      	mov	r4, r0
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 801b368:	2c00      	cmp	r4, #0
 801b36a:	d0dc      	beq.n	801b326 <focus_next_core+0x10>
 801b36c:	4626      	mov	r6, r4
                can_begin = false;
 801b36e:	f04f 0900 	mov.w	r9, #0
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 801b372:	6820      	ldr	r0, [r4, #0]
 801b374:	f000 fb56 	bl	801ba24 <lv_obj_get_state>
 801b378:	0603      	lsls	r3, r0, #24
 801b37a:	d438      	bmi.n	801b3ee <focus_next_core+0xd8>
        lv_obj_t * parent = *obj_next;
 801b37c:	6827      	ldr	r7, [r4, #0]
        while(parent) {
 801b37e:	bb37      	cbnz	r7, 801b3ce <focus_next_core+0xb8>
    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 801b380:	68eb      	ldr	r3, [r5, #12]
 801b382:	42a3      	cmp	r3, r4
 801b384:	d0cf      	beq.n	801b326 <focus_next_core+0x10>
    if(group->obj_focus) {
 801b386:	b173      	cbz	r3, 801b3a6 <focus_next_core+0x90>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 801b388:	681e      	ldr	r6, [r3, #0]
 801b38a:	4628      	mov	r0, r5
 801b38c:	f7ff ff9d 	bl	801b2ca <get_indev>
 801b390:	210f      	movs	r1, #15
 801b392:	4602      	mov	r2, r0
 801b394:	4630      	mov	r0, r6
 801b396:	f7e9 f9a1 	bl	80046dc <lv_event_send>
        if(res != LV_RES_OK) return focus_changed;
 801b39a:	2801      	cmp	r0, #1
 801b39c:	d1c3      	bne.n	801b326 <focus_next_core+0x10>
        lv_obj_invalidate(*group->obj_focus);
 801b39e:	68eb      	ldr	r3, [r5, #12]
 801b3a0:	6818      	ldr	r0, [r3, #0]
 801b3a2:	f001 fc47 	bl	801cc34 <lv_obj_invalidate>
    group->obj_focus = obj_next;
 801b3a6:	60ec      	str	r4, [r5, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 801b3a8:	4628      	mov	r0, r5
 801b3aa:	6824      	ldr	r4, [r4, #0]
 801b3ac:	f7ff ff8d 	bl	801b2ca <get_indev>
 801b3b0:	210e      	movs	r1, #14
 801b3b2:	4602      	mov	r2, r0
 801b3b4:	4620      	mov	r0, r4
 801b3b6:	f7e9 f991 	bl	80046dc <lv_event_send>
    if(res != LV_RES_OK) return focus_changed;
 801b3ba:	2801      	cmp	r0, #1
 801b3bc:	d1b3      	bne.n	801b326 <focus_next_core+0x10>
    lv_obj_invalidate(*group->obj_focus);
 801b3be:	68eb      	ldr	r3, [r5, #12]
 801b3c0:	6818      	ldr	r0, [r3, #0]
 801b3c2:	f001 fc37 	bl	801cc34 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 801b3c6:	692b      	ldr	r3, [r5, #16]
 801b3c8:	b9a3      	cbnz	r3, 801b3f4 <focus_next_core+0xde>
    return focus_changed;
 801b3ca:	2001      	movs	r0, #1
 801b3cc:	e7ac      	b.n	801b328 <focus_next_core+0x12>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 801b3ce:	2101      	movs	r1, #1
 801b3d0:	4638      	mov	r0, r7
 801b3d2:	f000 fb1b 	bl	801ba0c <lv_obj_has_flag>
 801b3d6:	b920      	cbnz	r0, 801b3e2 <focus_next_core+0xcc>
            parent = lv_obj_get_parent(parent);
 801b3d8:	4638      	mov	r0, r7
 801b3da:	f002 fed5 	bl	801e188 <lv_obj_get_parent>
 801b3de:	4607      	mov	r7, r0
 801b3e0:	e7cd      	b.n	801b37e <focus_next_core+0x68>
        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 801b3e2:	2101      	movs	r1, #1
 801b3e4:	4638      	mov	r0, r7
 801b3e6:	f000 fb11 	bl	801ba0c <lv_obj_has_flag>
 801b3ea:	2800      	cmp	r0, #0
 801b3ec:	d0c8      	beq.n	801b380 <focus_next_core+0x6a>
    bool can_begin           = true;
 801b3ee:	4637      	mov	r7, r6
 801b3f0:	4626      	mov	r6, r4
 801b3f2:	e7a0      	b.n	801b336 <focus_next_core+0x20>
    if(group->focus_cb) group->focus_cb(group);
 801b3f4:	4628      	mov	r0, r5
 801b3f6:	4798      	blx	r3
 801b3f8:	e7e7      	b.n	801b3ca <focus_next_core+0xb4>

0801b3fa <lv_group_refocus>:
{
 801b3fa:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 801b3fc:	7f03      	ldrb	r3, [r0, #28]
{
 801b3fe:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
 801b400:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    g->wrap           = 1;
 801b404:	f043 0308 	orr.w	r3, r3, #8
 801b408:	7703      	strb	r3, [r0, #28]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 801b40a:	075b      	lsls	r3, r3, #29
 801b40c:	d406      	bmi.n	801b41c <lv_group_refocus+0x22>
        lv_group_focus_next(g);
 801b40e:	f7e9 f9a3 	bl	8004758 <lv_group_focus_next>
    g->wrap = temp_wrap;
 801b412:	7f23      	ldrb	r3, [r4, #28]
 801b414:	f365 03c3 	bfi	r3, r5, #3, #1
 801b418:	7723      	strb	r3, [r4, #28]
}
 801b41a:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 801b41c:	f7e9 f9b0 	bl	8004780 <lv_group_focus_prev>
 801b420:	e7f7      	b.n	801b412 <lv_group_refocus+0x18>

0801b422 <lv_group_remove_obj>:
{
 801b422:	b570      	push	{r4, r5, r6, lr}
 801b424:	4606      	mov	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 801b426:	f000 faff 	bl	801ba28 <lv_obj_get_group>
    if(g == NULL) return;
 801b42a:	4604      	mov	r4, r0
 801b42c:	2800      	cmp	r0, #0
 801b42e:	d038      	beq.n	801b4a2 <lv_group_remove_obj+0x80>
    if(g->obj_focus && *g->obj_focus == obj) {
 801b430:	68c3      	ldr	r3, [r0, #12]
 801b432:	b1e3      	cbz	r3, 801b46e <lv_group_remove_obj+0x4c>
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	42b3      	cmp	r3, r6
 801b438:	d119      	bne.n	801b46e <lv_group_remove_obj+0x4c>
        if(g->frozen) g->frozen = 0;
 801b43a:	7f03      	ldrb	r3, [r0, #28]
 801b43c:	07da      	lsls	r2, r3, #31
 801b43e:	bf44      	itt	mi
 801b440:	f36f 0300 	bfcmi	r3, #0, #1
 801b444:	7703      	strbmi	r3, [r0, #28]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 801b446:	f009 fb41 	bl	8024acc <_lv_ll_get_head>
 801b44a:	68e3      	ldr	r3, [r4, #12]
 801b44c:	4283      	cmp	r3, r0
 801b44e:	d129      	bne.n	801b4a4 <lv_group_remove_obj+0x82>
 801b450:	4620      	mov	r0, r4
 801b452:	f009 fb3e 	bl	8024ad2 <_lv_ll_get_tail>
 801b456:	68e3      	ldr	r3, [r4, #12]
 801b458:	4298      	cmp	r0, r3
 801b45a:	d123      	bne.n	801b4a4 <lv_group_remove_obj+0x82>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 801b45c:	6805      	ldr	r5, [r0, #0]
 801b45e:	4620      	mov	r0, r4
 801b460:	f7ff ff33 	bl	801b2ca <get_indev>
 801b464:	210f      	movs	r1, #15
 801b466:	4602      	mov	r2, r0
 801b468:	4628      	mov	r0, r5
 801b46a:	f7e9 f937 	bl	80046dc <lv_event_send>
    if(g->obj_focus && *g->obj_focus == obj) {
 801b46e:	68e3      	ldr	r3, [r4, #12]
 801b470:	b123      	cbz	r3, 801b47c <lv_group_remove_obj+0x5a>
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	42b3      	cmp	r3, r6
        g->obj_focus = NULL;
 801b476:	bf04      	itt	eq
 801b478:	2300      	moveq	r3, #0
 801b47a:	60e3      	streq	r3, [r4, #12]
    _LV_LL_READ(&g->obj_ll, i) {
 801b47c:	4620      	mov	r0, r4
 801b47e:	f009 fb25 	bl	8024acc <_lv_ll_get_head>
 801b482:	4605      	mov	r5, r0
 801b484:	b168      	cbz	r0, 801b4a2 <lv_group_remove_obj+0x80>
        if(*i == obj) {
 801b486:	682b      	ldr	r3, [r5, #0]
            _lv_ll_remove(&g->obj_ll, i);
 801b488:	4629      	mov	r1, r5
 801b48a:	4620      	mov	r0, r4
        if(*i == obj) {
 801b48c:	42b3      	cmp	r3, r6
 801b48e:	d10d      	bne.n	801b4ac <lv_group_remove_obj+0x8a>
            _lv_ll_remove(&g->obj_ll, i);
 801b490:	f009 fae1 	bl	8024a56 <_lv_ll_remove>
            lv_mem_free(i);
 801b494:	4628      	mov	r0, r5
 801b496:	f7f7 f929 	bl	80126ec <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 801b49a:	68b3      	ldr	r3, [r6, #8]
 801b49c:	b10b      	cbz	r3, 801b4a2 <lv_group_remove_obj+0x80>
 801b49e:	2200      	movs	r2, #0
 801b4a0:	609a      	str	r2, [r3, #8]
}
 801b4a2:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 801b4a4:	4620      	mov	r0, r4
 801b4a6:	f7ff ffa8 	bl	801b3fa <lv_group_refocus>
 801b4aa:	e7e0      	b.n	801b46e <lv_group_remove_obj+0x4c>
    _LV_LL_READ(&g->obj_ll, i) {
 801b4ac:	f009 fb14 	bl	8024ad8 <_lv_ll_get_next>
 801b4b0:	e7e7      	b.n	801b482 <lv_group_remove_obj+0x60>

0801b4b2 <lv_group_add_obj>:
{
 801b4b2:	b570      	push	{r4, r5, r6, lr}
 801b4b4:	460c      	mov	r4, r1
    if(group == NULL) return;
 801b4b6:	4605      	mov	r5, r0
 801b4b8:	b398      	cbz	r0, 801b522 <lv_group_add_obj+0x70>
    lv_group_remove_obj(obj);
 801b4ba:	4608      	mov	r0, r1
 801b4bc:	f7ff ffb1 	bl	801b422 <lv_group_remove_obj>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 801b4c0:	4628      	mov	r0, r5
 801b4c2:	f009 fb03 	bl	8024acc <_lv_ll_get_head>
 801b4c6:	4601      	mov	r1, r0
 801b4c8:	b9c8      	cbnz	r0, 801b4fe <lv_group_add_obj+0x4c>
    lv_group_t * group_cur = lv_obj_get_group(obj);
 801b4ca:	4620      	mov	r0, r4
 801b4cc:	f000 faac 	bl	801ba28 <lv_obj_get_group>
    if(group_cur) {
 801b4d0:	b140      	cbz	r0, 801b4e4 <lv_group_add_obj+0x32>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 801b4d2:	68a3      	ldr	r3, [r4, #8]
 801b4d4:	689b      	ldr	r3, [r3, #8]
 801b4d6:	b153      	cbz	r3, 801b4ee <lv_group_add_obj+0x3c>
 801b4d8:	68db      	ldr	r3, [r3, #12]
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	42a3      	cmp	r3, r4
 801b4de:	d106      	bne.n	801b4ee <lv_group_add_obj+0x3c>
            lv_group_refocus(group_cur);
 801b4e0:	f7ff ff8b 	bl	801b3fa <lv_group_refocus>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 801b4e4:	68a3      	ldr	r3, [r4, #8]
 801b4e6:	b913      	cbnz	r3, 801b4ee <lv_group_add_obj+0x3c>
 801b4e8:	4620      	mov	r0, r4
 801b4ea:	f7e9 fc45 	bl	8004d78 <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 801b4ee:	68a3      	ldr	r3, [r4, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 801b4f0:	4628      	mov	r0, r5
    obj->spec_attr->group_p = group;
 801b4f2:	609d      	str	r5, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 801b4f4:	f009 fa93 	bl	8024a1e <_lv_ll_ins_tail>
    LV_ASSERT_MALLOC(next);
 801b4f8:	4606      	mov	r6, r0
 801b4fa:	b938      	cbnz	r0, 801b50c <lv_group_add_obj+0x5a>
 801b4fc:	e7fe      	b.n	801b4fc <lv_group_add_obj+0x4a>
        if((*obj_i) == obj) {
 801b4fe:	680b      	ldr	r3, [r1, #0]
 801b500:	42a3      	cmp	r3, r4
 801b502:	d00e      	beq.n	801b522 <lv_group_add_obj+0x70>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 801b504:	4628      	mov	r0, r5
 801b506:	f009 fae7 	bl	8024ad8 <_lv_ll_get_next>
 801b50a:	e7dc      	b.n	801b4c6 <lv_group_add_obj+0x14>
    *next = obj;
 801b50c:	6004      	str	r4, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 801b50e:	4628      	mov	r0, r5
 801b510:	f009 fadc 	bl	8024acc <_lv_ll_get_head>
 801b514:	4286      	cmp	r6, r0
 801b516:	d104      	bne.n	801b522 <lv_group_add_obj+0x70>
        lv_group_refocus(group);
 801b518:	4628      	mov	r0, r5
}
 801b51a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 801b51e:	f7ff bf6c 	b.w	801b3fa <lv_group_refocus>
}
 801b522:	bd70      	pop	{r4, r5, r6, pc}

0801b524 <lv_group_get_focused>:
    if(!group) return NULL;
 801b524:	b110      	cbz	r0, 801b52c <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 801b526:	68c0      	ldr	r0, [r0, #12]
 801b528:	b100      	cbz	r0, 801b52c <lv_group_get_focused+0x8>
    return *group->obj_focus;
 801b52a:	6800      	ldr	r0, [r0, #0]
}
 801b52c:	4770      	bx	lr

0801b52e <lv_group_set_editing>:
{
 801b52e:	b538      	push	{r3, r4, r5, lr}
    if(group == NULL) return;
 801b530:	4603      	mov	r3, r0
 801b532:	b1e0      	cbz	r0, 801b56e <lv_group_set_editing+0x40>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 801b534:	7f02      	ldrb	r2, [r0, #28]
 801b536:	f3c2 0440 	ubfx	r4, r2, #1, #1
 801b53a:	428c      	cmp	r4, r1
 801b53c:	d017      	beq.n	801b56e <lv_group_set_editing+0x40>
    group->editing     = en_val;
 801b53e:	f361 0241 	bfi	r2, r1, #1, #1
 801b542:	7702      	strb	r2, [r0, #28]
    lv_obj_t * focused = lv_group_get_focused(group);
 801b544:	f7ff ffee 	bl	801b524 <lv_group_get_focused>
    if(focused) {
 801b548:	4604      	mov	r4, r0
 801b54a:	b180      	cbz	r0, 801b56e <lv_group_set_editing+0x40>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 801b54c:	68da      	ldr	r2, [r3, #12]
 801b54e:	4618      	mov	r0, r3
 801b550:	6815      	ldr	r5, [r2, #0]
 801b552:	f7ff feba 	bl	801b2ca <get_indev>
 801b556:	210e      	movs	r1, #14
 801b558:	4602      	mov	r2, r0
 801b55a:	4628      	mov	r0, r5
 801b55c:	f7e9 f8be 	bl	80046dc <lv_event_send>
        if(res != LV_RES_OK) return;
 801b560:	2801      	cmp	r0, #1
 801b562:	d104      	bne.n	801b56e <lv_group_set_editing+0x40>
        lv_obj_invalidate(focused);
 801b564:	4620      	mov	r0, r4
}
 801b566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(focused);
 801b56a:	f001 bb63 	b.w	801cc34 <lv_obj_invalidate>
}
 801b56e:	bd38      	pop	{r3, r4, r5, pc}

0801b570 <lv_group_get_editing>:
    if(!group) return false;
 801b570:	b110      	cbz	r0, 801b578 <lv_group_get_editing+0x8>
    return group->editing ? true : false;
 801b572:	7f00      	ldrb	r0, [r0, #28]
 801b574:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 801b578:	4770      	bx	lr

0801b57a <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 801b57a:	b108      	cbz	r0, 801b580 <lv_indev_get_type+0x6>
    return indev->driver->type;
 801b57c:	6803      	ldr	r3, [r0, #0]
 801b57e:	7818      	ldrb	r0, [r3, #0]
}
 801b580:	4770      	bx	lr

0801b582 <lv_indev_reset_long_press>:
{
 801b582:	b510      	push	{r4, lr}
    indev->proc.long_pr_sent         = 0;
 801b584:	7943      	ldrb	r3, [r0, #5]
{
 801b586:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
 801b588:	f36f 0300 	bfc	r3, #0, #1
 801b58c:	7143      	strb	r3, [r0, #5]
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 801b58e:	f008 fda8 	bl	80240e2 <lv_tick_get>
 801b592:	64e0      	str	r0, [r4, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
 801b594:	f008 fda5 	bl	80240e2 <lv_tick_get>
 801b598:	64a0      	str	r0, [r4, #72]	; 0x48
}
 801b59a:	bd10      	pop	{r4, pc}

0801b59c <lv_indev_get_point>:
    if(indev == NULL) {
 801b59c:	b910      	cbnz	r0, 801b5a4 <lv_indev_get_point+0x8>
        point->x = 0;
 801b59e:	8008      	strh	r0, [r1, #0]
        point->y = 0;
 801b5a0:	8048      	strh	r0, [r1, #2]
}
 801b5a2:	4770      	bx	lr
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) {
 801b5a4:	6803      	ldr	r3, [r0, #0]
 801b5a6:	781b      	ldrb	r3, [r3, #0]
 801b5a8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801b5ac:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.act_point.x;
 801b5ae:	bf0d      	iteet	eq
 801b5b0:	f9b0 3008 	ldrsheq.w	r3, [r0, #8]
        point->x = -1;
 801b5b4:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->y = -1;
 801b5b8:	f04f 30ff 	movne.w	r0, #4294967295
        point->x = indev->proc.types.pointer.act_point.x;
 801b5bc:	800b      	strheq	r3, [r1, #0]
        point->x = -1;
 801b5be:	bf14      	ite	ne
 801b5c0:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 801b5c2:	f9b0 000a 	ldrsheq.w	r0, [r0, #10]
 801b5c6:	e7eb      	b.n	801b5a0 <lv_indev_get_point+0x4>

0801b5c8 <lv_indev_get_scroll_dir>:
    if(indev == NULL) return false;
 801b5c8:	b158      	cbz	r0, 801b5e2 <lv_indev_get_scroll_dir+0x1a>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 801b5ca:	6803      	ldr	r3, [r0, #0]
 801b5cc:	781b      	ldrb	r3, [r3, #0]
 801b5ce:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801b5d2:	2b01      	cmp	r3, #1
 801b5d4:	d104      	bne.n	801b5e0 <lv_indev_get_scroll_dir+0x18>
    return indev->proc.types.pointer.scroll_dir;
 801b5d6:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 801b5da:	f000 000f 	and.w	r0, r0, #15
 801b5de:	4770      	bx	lr
    if(indev == NULL) return false;
 801b5e0:	2000      	movs	r0, #0
}
 801b5e2:	4770      	bx	lr

0801b5e4 <lv_indev_get_scroll_obj>:
    if(indev == NULL) return NULL;
 801b5e4:	b140      	cbz	r0, 801b5f8 <lv_indev_get_scroll_obj+0x14>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 801b5e6:	6803      	ldr	r3, [r0, #0]
 801b5e8:	781b      	ldrb	r3, [r3, #0]
 801b5ea:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801b5ee:	2b01      	cmp	r3, #1
 801b5f0:	d101      	bne.n	801b5f6 <lv_indev_get_scroll_obj+0x12>
    return indev->proc.types.pointer.scroll_obj;
 801b5f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801b5f4:	4770      	bx	lr
    if(indev == NULL) return NULL;
 801b5f6:	2000      	movs	r0, #0
}
 801b5f8:	4770      	bx	lr

0801b5fa <lv_indev_get_vect>:
    point->x = 0;
 801b5fa:	2300      	movs	r3, #0
 801b5fc:	800b      	strh	r3, [r1, #0]
    point->y = 0;
 801b5fe:	804b      	strh	r3, [r1, #2]
    if(indev == NULL) return;
 801b600:	b158      	cbz	r0, 801b61a <lv_indev_get_vect+0x20>
    if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_BUTTON) {
 801b602:	6803      	ldr	r3, [r0, #0]
 801b604:	781b      	ldrb	r3, [r3, #0]
 801b606:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801b60a:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.vect.x;
 801b60c:	bf01      	itttt	eq
 801b60e:	f9b0 3018 	ldrsheq.w	r3, [r0, #24]
 801b612:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 801b614:	f9b0 301a 	ldrsheq.w	r3, [r0, #26]
 801b618:	804b      	strheq	r3, [r1, #2]
}
 801b61a:	4770      	bx	lr

0801b61c <lv_indev_wait_release>:
    if(indev == NULL)return;
 801b61c:	b118      	cbz	r0, 801b626 <lv_indev_wait_release+0xa>
    indev->proc.wait_until_release = 1;
 801b61e:	7943      	ldrb	r3, [r0, #5]
 801b620:	f043 0308 	orr.w	r3, r3, #8
 801b624:	7143      	strb	r3, [r0, #5]
}
 801b626:	4770      	bx	lr

0801b628 <lv_indev_scroll_throw_predict>:
 * @param dir `LV_DIR_VER` or `LV_DIR_HOR`
 * @return the difference compared to the current position when the throw would be finished
 */
lv_coord_t lv_indev_scroll_throw_predict(lv_indev_t * indev, lv_dir_t dir)
{
    if(indev == NULL) return 0;
 801b628:	b1c0      	cbz	r0, 801b65c <lv_indev_scroll_throw_predict+0x34>
    lv_coord_t v;
    switch(dir) {
 801b62a:	2903      	cmp	r1, #3
 801b62c:	d00b      	beq.n	801b646 <lv_indev_scroll_throw_predict+0x1e>
 801b62e:	290c      	cmp	r1, #12
 801b630:	d113      	bne.n	801b65a <lv_indev_scroll_throw_predict+0x32>
        case LV_DIR_VER:
            v = indev->proc.types.pointer.scroll_throw_vect_ori.y;
 801b632:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
            break;
        default:
            return 0;
    }

    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 801b636:	6802      	ldr	r2, [r0, #0]
    lv_coord_t sum = 0;
    while(v) {
        sum += v;
        v = v * (100 - scroll_throw) / 100;
 801b638:	2164      	movs	r1, #100	; 0x64
    lv_coord_t sum = 0;
 801b63a:	2000      	movs	r0, #0
    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 801b63c:	7e52      	ldrb	r2, [r2, #25]
        v = v * (100 - scroll_throw) / 100;
 801b63e:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
    while(v) {
 801b642:	b91b      	cbnz	r3, 801b64c <lv_indev_scroll_throw_predict+0x24>
 801b644:	4770      	bx	lr
            v = indev->proc.types.pointer.scroll_throw_vect_ori.x;
 801b646:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
            break;
 801b64a:	e7f4      	b.n	801b636 <lv_indev_scroll_throw_predict+0xe>
        sum += v;
 801b64c:	4418      	add	r0, r3
        v = v * (100 - scroll_throw) / 100;
 801b64e:	4353      	muls	r3, r2
 801b650:	fb93 f3f1 	sdiv	r3, r3, r1
        sum += v;
 801b654:	b200      	sxth	r0, r0
        v = v * (100 - scroll_throw) / 100;
 801b656:	b21b      	sxth	r3, r3
 801b658:	e7f3      	b.n	801b642 <lv_indev_scroll_throw_predict+0x1a>
    if(indev == NULL) return 0;
 801b65a:	2000      	movs	r0, #0
    }

    return sum;
}
 801b65c:	4770      	bx	lr

0801b65e <lv_obj_constructor>:
{
 801b65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_t * parent = obj->parent;
 801b662:	684f      	ldr	r7, [r1, #4]
{
 801b664:	460d      	mov	r5, r1
    if(parent) {
 801b666:	b32f      	cbz	r7, 801b6b4 <lv_obj_constructor+0x56>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 801b668:	4638      	mov	r0, r7
 801b66a:	f7ea fac7 	bl	8005bfc <lv_obj_get_scroll_left>
 801b66e:	4606      	mov	r6, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 801b670:	4638      	mov	r0, r7
 801b672:	f001 fc7e 	bl	801cf72 <lv_obj_get_scroll_top>
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 801b676:	8afc      	ldrh	r4, [r7, #22]
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 801b678:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b67a:	2210      	movs	r2, #16
 801b67c:	2100      	movs	r1, #0
 801b67e:	4638      	mov	r0, r7
 801b680:	f002 f9fe 	bl	801da80 <lv_obj_get_style_prop>
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 801b684:	1823      	adds	r3, r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b686:	2212      	movs	r2, #18
 801b688:	2100      	movs	r1, #0
 801b68a:	eba3 0308 	sub.w	r3, r3, r8
 801b68e:	4638      	mov	r0, r7
 801b690:	b29b      	uxth	r3, r3
 801b692:	82eb      	strh	r3, [r5, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 801b694:	3b01      	subs	r3, #1
 801b696:	836b      	strh	r3, [r5, #26]
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 801b698:	8abc      	ldrh	r4, [r7, #20]
 801b69a:	f002 f9f1 	bl	801da80 <lv_obj_get_style_prop>
        obj->coords.x2  = obj->coords.x1 - 1;
 801b69e:	f64b 3376 	movw	r3, #47990	; 0xbb76
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 801b6a2:	4404      	add	r4, r0
 801b6a4:	1ba0      	subs	r0, r4, r6
 801b6a6:	b280      	uxth	r0, r0
 801b6a8:	82a8      	strh	r0, [r5, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 801b6aa:	3801      	subs	r0, #1
 801b6ac:	8328      	strh	r0, [r5, #24]
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 801b6ae:	61eb      	str	r3, [r5, #28]
}
 801b6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6b4:	f641 0376 	movw	r3, #6262	; 0x1876
 801b6b8:	e7f9      	b.n	801b6ae <lv_obj_constructor+0x50>

0801b6ba <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 801b6ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(obj->state == new_state) return;
 801b6be:	8c03      	ldrh	r3, [r0, #32]
{
 801b6c0:	b08d      	sub	sp, #52	; 0x34
 801b6c2:	4605      	mov	r5, r0
 801b6c4:	468a      	mov	sl, r1
    if(obj->state == new_state) return;
 801b6c6:	428b      	cmp	r3, r1
 801b6c8:	9304      	str	r3, [sp, #16]
 801b6ca:	f000 8117 	beq.w	801b8fc <lv_obj_set_state+0x242>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 801b6ce:	460a      	mov	r2, r1
    obj->state = new_state;
 801b6d0:	8401      	strh	r1, [r0, #32]
    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 801b6d2:	4619      	mov	r1, r3
 801b6d4:	f002 fc07 	bl	801dee6 <_lv_obj_style_state_compare>
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 801b6d8:	9003      	str	r0, [sp, #12]
 801b6da:	2800      	cmp	r0, #0
 801b6dc:	f000 810e 	beq.w	801b8fc <lv_obj_set_state+0x242>

    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 801b6e0:	f44f 7020 	mov.w	r0, #640	; 0x280
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
    uint32_t tsi = 0;
    uint32_t i;
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 801b6e4:	2400      	movs	r4, #0
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 801b6e6:	f7f7 f833 	bl	8012750 <lv_mem_buf_get>
    memset(dst, 0x00, len);
 801b6ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b6ee:	2100      	movs	r1, #0
 801b6f0:	4607      	mov	r7, r0
    uint32_t tsi = 0;
 801b6f2:	46a1      	mov	r9, r4
 801b6f4:	f7ff f814 	bl	801a720 <memset>
        _lv_obj_style_t * obj_style = &obj->styles[i];
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 801b6f8:	ea6f 030a 	mvn.w	r3, sl
 801b6fc:	9308      	str	r3, [sp, #32]
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 801b6fe:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 801b700:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801b704:	42a3      	cmp	r3, r4
 801b706:	d944      	bls.n	801b792 <lv_obj_set_state+0xd8>
 801b708:	f1b9 0f20 	cmp.w	r9, #32
 801b70c:	d041      	beq.n	801b792 <lv_obj_set_state+0xd8>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 801b70e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801b712:	00e6      	lsls	r6, r4, #3
 801b714:	eb08 0bc4 	add.w	fp, r8, r4, lsl #3
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 801b718:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b71c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801b720:	f002 fce2 	bl	801e0e8 <lv_obj_style_get_selector_state>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 801b724:	68eb      	ldr	r3, [r5, #12]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 801b726:	9005      	str	r0, [sp, #20]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 801b728:	4433      	add	r3, r6
 801b72a:	6858      	ldr	r0, [r3, #4]
 801b72c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801b730:	f002 fcdc 	bl	801e0ec <lv_obj_style_get_selector_part>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 801b734:	9b08      	ldr	r3, [sp, #32]
 801b736:	9a05      	ldr	r2, [sp, #20]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 801b738:	9006      	str	r0, [sp, #24]
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 801b73a:	4213      	tst	r3, r2
 801b73c:	d115      	bne.n	801b76a <lv_obj_set_state+0xb0>
        if(obj_style->is_trans) continue;
 801b73e:	f89b 3007 	ldrb.w	r3, [fp, #7]
 801b742:	f013 0302 	ands.w	r3, r3, #2
 801b746:	d006      	beq.n	801b756 <lv_obj_set_state+0x9c>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 801b748:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 801b74a:	3401      	adds	r4, #1
 801b74c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801b750:	429c      	cmp	r4, r3
 801b752:	d3dc      	bcc.n	801b70e <lv_obj_set_state+0x54>
 801b754:	e01d      	b.n	801b792 <lv_obj_set_state+0xd8>

        lv_style_value_t v;
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 801b756:	f858 2006 	ldr.w	r2, [r8, r6]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 801b75a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801b75e:	8890      	ldrh	r0, [r2, #4]
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 801b760:	79d1      	ldrb	r1, [r2, #7]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 801b762:	42b0      	cmp	r0, r6
 801b764:	d131      	bne.n	801b7ca <lv_obj_set_state+0x110>
        for(i = 0; i < style->prop_cnt; i++) {
 801b766:	428b      	cmp	r3, r1
 801b768:	d301      	bcc.n	801b76e <lv_obj_set_state+0xb4>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 801b76a:	3401      	adds	r4, #1
 801b76c:	e7c7      	b.n	801b6fe <lv_obj_set_state+0x44>
            const_prop = style->v_p.const_props + i;
 801b76e:	6810      	ldr	r0, [r2, #0]
 801b770:	eb00 06c3 	add.w	r6, r0, r3, lsl #3
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 801b774:	f830 0033 	ldrh.w	r0, [r0, r3, lsl #3]
            if(prop_id == prop) {
 801b778:	f3c0 0c0d 	ubfx	ip, r0, #0, #14
 801b77c:	f1bc 0f66 	cmp.w	ip, #102	; 0x66
 801b780:	d121      	bne.n	801b7c6 <lv_obj_set_state+0x10c>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 801b782:	0403      	lsls	r3, r0, #16
 801b784:	d50a      	bpl.n	801b79c <lv_obj_set_state+0xe2>
 801b786:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 801b788:	3401      	adds	r4, #1
 801b78a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801b78e:	42a3      	cmp	r3, r4
 801b790:	d8bd      	bhi.n	801b70e <lv_obj_set_state+0x54>
 801b792:	2614      	movs	r6, #20
 801b794:	463c      	mov	r4, r7
 801b796:	fb06 7609 	mla	r6, r6, r9, r7
 801b79a:	e080      	b.n	801b89e <lv_obj_set_state+0x1e4>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 801b79c:	0440      	lsls	r0, r0, #17
 801b79e:	d510      	bpl.n	801b7c2 <lv_obj_set_state+0x108>
 801b7a0:	2066      	movs	r0, #102	; 0x66
 801b7a2:	f7f7 f89d 	bl	80128e0 <lv_style_prop_get_default>
 801b7a6:	4606      	mov	r6, r0
        const lv_style_transition_dsc_t * tr = v.ptr;

        /*Add the props to the set if not added yet or added but with smaller weight*/
        uint32_t j;
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 801b7a8:	f04f 0800 	mov.w	r8, #0
 801b7ac:	6833      	ldr	r3, [r6, #0]
 801b7ae:	f833 3008 	ldrh.w	r3, [r3, r8]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d0d9      	beq.n	801b76a <lv_obj_set_state+0xb0>
 801b7b6:	f1b9 0f20 	cmp.w	r9, #32
 801b7ba:	d0d6      	beq.n	801b76a <lv_obj_set_state+0xb0>
 801b7bc:	463a      	mov	r2, r7
            uint32_t t;
            for(t = 0; t < tsi; t++) {
 801b7be:	2300      	movs	r3, #0
 801b7c0:	e046      	b.n	801b850 <lv_obj_set_state+0x196>
 801b7c2:	6876      	ldr	r6, [r6, #4]
 801b7c4:	e7f0      	b.n	801b7a8 <lv_obj_set_state+0xee>
        for(i = 0; i < style->prop_cnt; i++) {
 801b7c6:	3301      	adds	r3, #1
 801b7c8:	e7cd      	b.n	801b766 <lv_obj_set_state+0xac>
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 801b7ca:	2900      	cmp	r1, #0
 801b7cc:	d0db      	beq.n	801b786 <lv_obj_set_state+0xcc>
    if(style->prop_cnt > 1) {
 801b7ce:	2901      	cmp	r1, #1
 801b7d0:	d014      	beq.n	801b7fc <lv_obj_set_state+0x142>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 801b7d2:	6810      	ldr	r0, [r2, #0]
        for(i = 0; i < style->prop_cnt; i++) {
 801b7d4:	eb00 0681 	add.w	r6, r0, r1, lsl #2
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 801b7d8:	f836 2b02 	ldrh.w	r2, [r6], #2
            if(prop_id == prop) {
 801b7dc:	f3c2 0c0d 	ubfx	ip, r2, #0, #14
 801b7e0:	f1bc 0f66 	cmp.w	ip, #102	; 0x66
 801b7e4:	d106      	bne.n	801b7f4 <lv_obj_set_state+0x13a>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 801b7e6:	0411      	lsls	r1, r2, #16
 801b7e8:	d4ae      	bmi.n	801b748 <lv_obj_set_state+0x8e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 801b7ea:	0456      	lsls	r6, r2, #17
 801b7ec:	d4d8      	bmi.n	801b7a0 <lv_obj_set_state+0xe6>
                    *value = values[i];
 801b7ee:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 801b7f2:	e7d9      	b.n	801b7a8 <lv_obj_set_state+0xee>
        for(i = 0; i < style->prop_cnt; i++) {
 801b7f4:	3301      	adds	r3, #1
 801b7f6:	4299      	cmp	r1, r3
 801b7f8:	d8ee      	bhi.n	801b7d8 <lv_obj_set_state+0x11e>
 801b7fa:	e7b6      	b.n	801b76a <lv_obj_set_state+0xb0>
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 801b7fc:	f3c0 030d 	ubfx	r3, r0, #0, #14
 801b800:	2b66      	cmp	r3, #102	; 0x66
 801b802:	d1a1      	bne.n	801b748 <lv_obj_set_state+0x8e>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 801b804:	0401      	lsls	r1, r0, #16
 801b806:	d49f      	bmi.n	801b748 <lv_obj_set_state+0x8e>
                                                                                             style->prop1)) : style->v_p.value1;
 801b808:	0443      	lsls	r3, r0, #17
 801b80a:	d4c9      	bmi.n	801b7a0 <lv_obj_set_state+0xe6>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 801b80c:	6816      	ldr	r6, [r2, #0]
 801b80e:	e7cb      	b.n	801b7a8 <lv_obj_set_state+0xee>
                lv_style_selector_t selector = ts[t].selector;
 801b810:	6851      	ldr	r1, [r2, #4]
 801b812:	930b      	str	r3, [sp, #44]	; 0x2c
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 801b814:	4608      	mov	r0, r1
                lv_style_selector_t selector = ts[t].selector;
 801b816:	920a      	str	r2, [sp, #40]	; 0x28
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 801b818:	9109      	str	r1, [sp, #36]	; 0x24
 801b81a:	f002 fc65 	bl	801e0e8 <lv_obj_style_get_selector_state>
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 801b81e:	9909      	ldr	r1, [sp, #36]	; 0x24
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 801b820:	9007      	str	r0, [sp, #28]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 801b822:	4608      	mov	r0, r1
 801b824:	f002 fc62 	bl	801e0ec <lv_obj_style_get_selector_part>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 801b828:	6831      	ldr	r1, [r6, #0]
 801b82a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b82c:	f831 c008 	ldrh.w	ip, [r1, r8]
 801b830:	f8b2 e008 	ldrh.w	lr, [r2, #8]
 801b834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b836:	45e6      	cmp	lr, ip
 801b838:	d108      	bne.n	801b84c <lv_obj_set_state+0x192>
 801b83a:	f8dd c018 	ldr.w	ip, [sp, #24]
 801b83e:	4584      	cmp	ip, r0
 801b840:	d104      	bne.n	801b84c <lv_obj_set_state+0x192>
 801b842:	9805      	ldr	r0, [sp, #20]
 801b844:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801b848:	4560      	cmp	r0, ip
 801b84a:	d94f      	bls.n	801b8ec <lv_obj_set_state+0x232>
            for(t = 0; t < tsi; t++) {
 801b84c:	3301      	adds	r3, #1
 801b84e:	3214      	adds	r2, #20
 801b850:	454b      	cmp	r3, r9
 801b852:	d1dd      	bne.n	801b810 <lv_obj_set_state+0x156>
            }

            /*If not found  add it*/
            if(t == tsi) {
                ts[tsi].time = tr->time;
 801b854:	2314      	movs	r3, #20
 801b856:	fb03 f109 	mul.w	r1, r3, r9
 801b85a:	68f3      	ldr	r3, [r6, #12]
                ts[tsi].prop = tr->props[j];
#if LV_USE_USER_DATA
                ts[tsi].user_data = tr->user_data;
#endif
                ts[tsi].selector = obj_style->selector;
                tsi++;
 801b85c:	f109 0901 	add.w	r9, r9, #1
                ts[tsi].time = tr->time;
 801b860:	527b      	strh	r3, [r7, r1]
 801b862:	187a      	adds	r2, r7, r1
                ts[tsi].delay = tr->delay;
 801b864:	6933      	ldr	r3, [r6, #16]
 801b866:	8053      	strh	r3, [r2, #2]
                ts[tsi].path_cb = tr->path_xcb;
 801b868:	68b3      	ldr	r3, [r6, #8]
 801b86a:	60d3      	str	r3, [r2, #12]
                ts[tsi].prop = tr->props[j];
 801b86c:	6833      	ldr	r3, [r6, #0]
 801b86e:	f833 3008 	ldrh.w	r3, [r3, r8]
 801b872:	f108 0802 	add.w	r8, r8, #2
 801b876:	8113      	strh	r3, [r2, #8]
                ts[tsi].user_data = tr->user_data;
 801b878:	6873      	ldr	r3, [r6, #4]
 801b87a:	6113      	str	r3, [r2, #16]
                ts[tsi].selector = obj_style->selector;
 801b87c:	f8db 3004 	ldr.w	r3, [fp, #4]
 801b880:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801b884:	6053      	str	r3, [r2, #4]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 801b886:	e791      	b.n	801b7ac <lv_obj_set_state+0xf2>
            }
        }
    }

    for(i = 0; i < tsi; i++) {
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 801b888:	6860      	ldr	r0, [r4, #4]
 801b88a:	f002 fc2f 	bl	801e0ec <lv_obj_style_get_selector_part>
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 801b88e:	9400      	str	r4, [sp, #0]
 801b890:	3414      	adds	r4, #20
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 801b892:	4601      	mov	r1, r0
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 801b894:	4653      	mov	r3, sl
 801b896:	9a04      	ldr	r2, [sp, #16]
 801b898:	4628      	mov	r0, r5
 801b89a:	f7ea ff45 	bl	8006728 <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 801b89e:	42a6      	cmp	r6, r4
 801b8a0:	d1f2      	bne.n	801b888 <lv_obj_set_state+0x1ce>
    }

    lv_mem_buf_release(ts);
 801b8a2:	4638      	mov	r0, r7
 801b8a4:	f7f6 ff9e 	bl	80127e4 <lv_mem_buf_release>

    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 801b8a8:	9b03      	ldr	r3, [sp, #12]
 801b8aa:	2b01      	cmp	r3, #1
 801b8ac:	d105      	bne.n	801b8ba <lv_obj_set_state+0x200>
        lv_obj_invalidate(obj);
 801b8ae:	4628      	mov	r0, r5
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_invalidate(obj);
        lv_obj_refresh_ext_draw_size(obj);
    }
}
 801b8b0:	b00d      	add	sp, #52	; 0x34
 801b8b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_invalidate(obj);
 801b8b6:	f001 b9bd 	b.w	801cc34 <lv_obj_invalidate>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 801b8ba:	9b03      	ldr	r3, [sp, #12]
 801b8bc:	2b03      	cmp	r3, #3
 801b8be:	d109      	bne.n	801b8d4 <lv_obj_set_state+0x21a>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 801b8c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b8c4:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 801b8c8:	4628      	mov	r0, r5
}
 801b8ca:	b00d      	add	sp, #52	; 0x34
 801b8cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 801b8d0:	f7ea bd0a 	b.w	80062e8 <lv_obj_refresh_style>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 801b8d4:	9b03      	ldr	r3, [sp, #12]
 801b8d6:	2b02      	cmp	r3, #2
 801b8d8:	d110      	bne.n	801b8fc <lv_obj_set_state+0x242>
        lv_obj_invalidate(obj);
 801b8da:	4628      	mov	r0, r5
 801b8dc:	f001 f9aa 	bl	801cc34 <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 801b8e0:	4628      	mov	r0, r5
}
 801b8e2:	b00d      	add	sp, #52	; 0x34
 801b8e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_ext_draw_size(obj);
 801b8e8:	f000 bdd6 	b.w	801c498 <lv_obj_refresh_ext_draw_size>
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 801b8ec:	f108 0802 	add.w	r8, r8, #2
 801b8f0:	f831 3008 	ldrh.w	r3, [r1, r8]
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	f47f af61 	bne.w	801b7bc <lv_obj_set_state+0x102>
 801b8fa:	e736      	b.n	801b76a <lv_obj_set_state+0xb0>
}
 801b8fc:	b00d      	add	sp, #52	; 0x34
 801b8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b902 <lv_obj_add_flag>:
{
 801b902:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b904:	460d      	mov	r5, r1
 801b906:	4604      	mov	r4, r0
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 801b908:	f7e9 fac8 	bl	8004e9c <lv_obj_is_layout_positioned>
 801b90c:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 801b90e:	07ea      	lsls	r2, r5, #31
 801b910:	d423      	bmi.n	801b95a <lv_obj_add_flag+0x58>
    obj->flags |= f;
 801b912:	69e3      	ldr	r3, [r4, #28]
 801b914:	432b      	orrs	r3, r5
 801b916:	61e3      	str	r3, [r4, #28]
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 801b918:	4620      	mov	r0, r4
 801b91a:	f7e9 fabf 	bl	8004e9c <lv_obj_is_layout_positioned>
 801b91e:	42b0      	cmp	r0, r6
 801b920:	d102      	bne.n	801b928 <lv_obj_add_flag+0x26>
 801b922:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 801b926:	d007      	beq.n	801b938 <lv_obj_add_flag+0x36>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 801b928:	4620      	mov	r0, r4
 801b92a:	f002 fc2d 	bl	801e188 <lv_obj_get_parent>
 801b92e:	f000 ff00 	bl	801c732 <lv_obj_mark_layout_as_dirty>
        lv_obj_mark_layout_as_dirty(obj);
 801b932:	4620      	mov	r0, r4
 801b934:	f000 fefd 	bl	801c732 <lv_obj_mark_layout_as_dirty>
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 801b938:	06eb      	lsls	r3, r5, #27
 801b93a:	d50c      	bpl.n	801b956 <lv_obj_add_flag+0x54>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 801b93c:	aa02      	add	r2, sp, #8
 801b93e:	4669      	mov	r1, sp
 801b940:	4620      	mov	r0, r4
 801b942:	f001 fbe0 	bl	801d106 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 801b946:	4669      	mov	r1, sp
 801b948:	4620      	mov	r0, r4
 801b94a:	f001 f952 	bl	801cbf2 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 801b94e:	a902      	add	r1, sp, #8
 801b950:	4620      	mov	r0, r4
 801b952:	f001 f94e 	bl	801cbf2 <lv_obj_invalidate_area>
}
 801b956:	b004      	add	sp, #16
 801b958:	bd70      	pop	{r4, r5, r6, pc}
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 801b95a:	4620      	mov	r0, r4
 801b95c:	f001 f96a 	bl	801cc34 <lv_obj_invalidate>
    obj->flags |= f;
 801b960:	69e3      	ldr	r3, [r4, #28]
        lv_obj_invalidate(obj);
 801b962:	4620      	mov	r0, r4
    obj->flags |= f;
 801b964:	432b      	orrs	r3, r5
 801b966:	61e3      	str	r3, [r4, #28]
        lv_obj_invalidate(obj);
 801b968:	f001 f964 	bl	801cc34 <lv_obj_invalidate>
 801b96c:	e7d4      	b.n	801b918 <lv_obj_add_flag+0x16>

0801b96e <lv_obj_clear_flag>:
{
 801b96e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b970:	460d      	mov	r5, r1
 801b972:	4604      	mov	r4, r0
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 801b974:	f7e9 fa92 	bl	8004e9c <lv_obj_is_layout_positioned>
 801b978:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 801b97a:	06ea      	lsls	r2, r5, #27
 801b97c:	d50c      	bpl.n	801b998 <lv_obj_clear_flag+0x2a>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 801b97e:	aa02      	add	r2, sp, #8
 801b980:	4669      	mov	r1, sp
 801b982:	4620      	mov	r0, r4
 801b984:	f001 fbbf 	bl	801d106 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 801b988:	4669      	mov	r1, sp
 801b98a:	4620      	mov	r0, r4
 801b98c:	f001 f931 	bl	801cbf2 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 801b990:	a902      	add	r1, sp, #8
 801b992:	4620      	mov	r0, r4
 801b994:	f001 f92d 	bl	801cbf2 <lv_obj_invalidate_area>
    obj->flags &= (~f);
 801b998:	69e3      	ldr	r3, [r4, #28]
 801b99a:	ea23 0305 	bic.w	r3, r3, r5
 801b99e:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 801b9a0:	07eb      	lsls	r3, r5, #31
 801b9a2:	d50e      	bpl.n	801b9c2 <lv_obj_clear_flag+0x54>
        lv_obj_invalidate(obj);
 801b9a4:	4620      	mov	r0, r4
 801b9a6:	f001 f945 	bl	801cc34 <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 801b9aa:	4620      	mov	r0, r4
 801b9ac:	f7e9 fa76 	bl	8004e9c <lv_obj_is_layout_positioned>
 801b9b0:	b138      	cbz	r0, 801b9c2 <lv_obj_clear_flag+0x54>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 801b9b2:	4620      	mov	r0, r4
 801b9b4:	f002 fbe8 	bl	801e188 <lv_obj_get_parent>
 801b9b8:	f000 febb 	bl	801c732 <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 801b9bc:	4620      	mov	r0, r4
 801b9be:	f000 feb8 	bl	801c732 <lv_obj_mark_layout_as_dirty>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 801b9c2:	4620      	mov	r0, r4
 801b9c4:	f7e9 fa6a 	bl	8004e9c <lv_obj_is_layout_positioned>
 801b9c8:	42b0      	cmp	r0, r6
 801b9ca:	d102      	bne.n	801b9d2 <lv_obj_clear_flag+0x64>
 801b9cc:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 801b9d0:	d007      	beq.n	801b9e2 <lv_obj_clear_flag+0x74>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 801b9d2:	4620      	mov	r0, r4
 801b9d4:	f002 fbd8 	bl	801e188 <lv_obj_get_parent>
}
 801b9d8:	b004      	add	sp, #16
 801b9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 801b9de:	f000 bea8 	b.w	801c732 <lv_obj_mark_layout_as_dirty>
}
 801b9e2:	b004      	add	sp, #16
 801b9e4:	bd70      	pop	{r4, r5, r6, pc}

0801b9e6 <lv_obj_add_state>:
    lv_state_t new_state = obj->state | state;
 801b9e6:	8c03      	ldrh	r3, [r0, #32]
 801b9e8:	ea43 0201 	orr.w	r2, r3, r1
    if(obj->state != new_state) {
 801b9ec:	ea31 0303 	bics.w	r3, r1, r3
 801b9f0:	d002      	beq.n	801b9f8 <lv_obj_add_state+0x12>
        lv_obj_set_state(obj, new_state);
 801b9f2:	4611      	mov	r1, r2
 801b9f4:	f7ff be61 	b.w	801b6ba <lv_obj_set_state>
}
 801b9f8:	4770      	bx	lr

0801b9fa <lv_obj_clear_state>:
{
 801b9fa:	460a      	mov	r2, r1
    lv_state_t new_state = obj->state & (~state);
 801b9fc:	8c03      	ldrh	r3, [r0, #32]
    if(obj->state != new_state) {
 801b9fe:	421a      	tst	r2, r3
    lv_state_t new_state = obj->state & (~state);
 801ba00:	ea23 0101 	bic.w	r1, r3, r1
    if(obj->state != new_state) {
 801ba04:	d001      	beq.n	801ba0a <lv_obj_clear_state+0x10>
        lv_obj_set_state(obj, new_state);
 801ba06:	f7ff be58 	b.w	801b6ba <lv_obj_set_state>
}
 801ba0a:	4770      	bx	lr

0801ba0c <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
 801ba0c:	69c3      	ldr	r3, [r0, #28]
 801ba0e:	4399      	bics	r1, r3
}
 801ba10:	bf0c      	ite	eq
 801ba12:	2001      	moveq	r0, #1
 801ba14:	2000      	movne	r0, #0
 801ba16:	4770      	bx	lr

0801ba18 <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
 801ba18:	69c3      	ldr	r3, [r0, #28]
 801ba1a:	4219      	tst	r1, r3
}
 801ba1c:	bf14      	ite	ne
 801ba1e:	2001      	movne	r0, #1
 801ba20:	2000      	moveq	r0, #0
 801ba22:	4770      	bx	lr

0801ba24 <lv_obj_get_state>:
}
 801ba24:	8c00      	ldrh	r0, [r0, #32]
 801ba26:	4770      	bx	lr

0801ba28 <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
 801ba28:	6880      	ldr	r0, [r0, #8]
 801ba2a:	b100      	cbz	r0, 801ba2e <lv_obj_get_group+0x6>
 801ba2c:	6880      	ldr	r0, [r0, #8]
}
 801ba2e:	4770      	bx	lr

0801ba30 <lv_obj_event>:
{
 801ba30:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_event_code_t code = lv_event_get_code(e);
 801ba32:	4608      	mov	r0, r1
{
 801ba34:	460d      	mov	r5, r1
 801ba36:	b085      	sub	sp, #20
    lv_event_code_t code = lv_event_get_code(e);
 801ba38:	f7ff fbdf 	bl	801b1fa <lv_event_get_code>
 801ba3c:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_current_target(e);
 801ba3e:	4628      	mov	r0, r5
 801ba40:	f7ff fbd9 	bl	801b1f6 <lv_event_get_current_target>
    if(code == LV_EVENT_PRESSED) {
 801ba44:	2e01      	cmp	r6, #1
    lv_obj_t * obj = lv_event_get_current_target(e);
 801ba46:	4604      	mov	r4, r0
    if(code == LV_EVENT_PRESSED) {
 801ba48:	d105      	bne.n	801ba56 <lv_obj_event+0x26>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 801ba4a:	2120      	movs	r1, #32
}
 801ba4c:	b005      	add	sp, #20
 801ba4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_add_state(obj, state);
 801ba52:	f7ff bfc8 	b.w	801b9e6 <lv_obj_add_state>
    else if(code == LV_EVENT_RELEASED) {
 801ba56:	3e03      	subs	r6, #3
 801ba58:	2e27      	cmp	r6, #39	; 0x27
 801ba5a:	d851      	bhi.n	801bb00 <lv_obj_event+0xd0>
 801ba5c:	e8df f016 	tbh	[pc, r6, lsl #1]
 801ba60:	00500043 	.word	0x00500043
 801ba64:	00500050 	.word	0x00500050
 801ba68:	00280050 	.word	0x00280050
 801ba6c:	010f010d 	.word	0x010f010d
 801ba70:	00500050 	.word	0x00500050
 801ba74:	00e7005a 	.word	0x00e7005a
 801ba78:	00500126 	.word	0x00500126
 801ba7c:	017c0050 	.word	0x017c0050
 801ba80:	00500172 	.word	0x00500172
 801ba84:	0050017c 	.word	0x0050017c
 801ba88:	017c0050 	.word	0x017c0050
 801ba8c:	00500050 	.word	0x00500050
 801ba90:	00500050 	.word	0x00500050
 801ba94:	00500050 	.word	0x00500050
 801ba98:	00500050 	.word	0x00500050
 801ba9c:	01490050 	.word	0x01490050
 801baa0:	00500050 	.word	0x00500050
 801baa4:	00500050 	.word	0x00500050
 801baa8:	00500050 	.word	0x00500050
 801baac:	004a0128 	.word	0x004a0128
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 801bab0:	2120      	movs	r1, #32
 801bab2:	f7ff ffa2 	bl	801b9fa <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 801bab6:	4628      	mov	r0, r5
 801bab8:	f7ff fba3 	bl	801b202 <lv_event_get_param>
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 801babc:	f7ff fd92 	bl	801b5e4 <lv_indev_get_scroll_obj>
 801bac0:	b9f0      	cbnz	r0, 801bb00 <lv_obj_event+0xd0>
    return (obj->flags & f)  == f ? true : false;
 801bac2:	69e3      	ldr	r3, [r4, #28]
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 801bac4:	071e      	lsls	r6, r3, #28
 801bac6:	d51b      	bpl.n	801bb00 <lv_obj_event+0xd0>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 801bac8:	8c23      	ldrh	r3, [r4, #32]
 801baca:	2101      	movs	r1, #1
 801bacc:	4620      	mov	r0, r4
 801bace:	07dd      	lsls	r5, r3, #31
 801bad0:	d434      	bmi.n	801bb3c <lv_obj_event+0x10c>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 801bad2:	f7ff ff88 	bl	801b9e6 <lv_obj_add_state>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801bad6:	2200      	movs	r2, #0
 801bad8:	211c      	movs	r1, #28
 801bada:	4620      	mov	r0, r4
}
 801badc:	b005      	add	sp, #20
 801bade:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801bae2:	f7e8 bdfb 	b.w	80046dc <lv_event_send>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 801bae6:	2120      	movs	r1, #32
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 801bae8:	4620      	mov	r0, r4
}
 801baea:	b005      	add	sp, #20
 801baec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 801baf0:	f7ff bf83 	b.w	801b9fa <lv_obj_clear_state>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801baf4:	f002 fb5a 	bl	801e1ac <lv_obj_get_child_cnt>
        for(uint32_t i = 0; i < child_cnt; i++) {
 801baf8:	2500      	movs	r5, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801bafa:	4606      	mov	r6, r0
        for(uint32_t i = 0; i < child_cnt; i++) {
 801bafc:	42b5      	cmp	r5, r6
 801bafe:	d101      	bne.n	801bb04 <lv_obj_event+0xd4>
}
 801bb00:	b005      	add	sp, #20
 801bb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_obj_t * child = obj->spec_attr->children[i];
 801bb04:	68a3      	ldr	r3, [r4, #8]
 801bb06:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 801bb08:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
        for(uint32_t i = 0; i < child_cnt; i++) {
 801bb0c:	3501      	adds	r5, #1
            lv_obj_mark_layout_as_dirty(child);
 801bb0e:	f000 fe10 	bl	801c732 <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 801bb12:	e7f3      	b.n	801bafc <lv_obj_event+0xcc>
    return (obj->flags & f)  == f ? true : false;
 801bb14:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 801bb16:	0718      	lsls	r0, r3, #28
 801bb18:	d516      	bpl.n	801bb48 <lv_obj_event+0x118>
            char c = *((char *)lv_event_get_param(e));
 801bb1a:	4628      	mov	r0, r5
 801bb1c:	f7ff fb71 	bl	801b202 <lv_event_get_param>
 801bb20:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801bb22:	2b13      	cmp	r3, #19
 801bb24:	d102      	bne.n	801bb2c <lv_obj_event+0xfc>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 801bb26:	2101      	movs	r1, #1
 801bb28:	4620      	mov	r0, r4
 801bb2a:	e7d2      	b.n	801bad2 <lv_obj_event+0xa2>
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801bb2c:	2b11      	cmp	r3, #17
 801bb2e:	d0fa      	beq.n	801bb26 <lv_obj_event+0xf6>
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801bb30:	2b14      	cmp	r3, #20
 801bb32:	d001      	beq.n	801bb38 <lv_obj_event+0x108>
 801bb34:	2b12      	cmp	r3, #18
 801bb36:	d104      	bne.n	801bb42 <lv_obj_event+0x112>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 801bb38:	2101      	movs	r1, #1
 801bb3a:	4620      	mov	r0, r4
 801bb3c:	f7ff ff5d 	bl	801b9fa <lv_obj_clear_state>
            if(c != LV_KEY_ENTER) {
 801bb40:	e7c9      	b.n	801bad6 <lv_obj_event+0xa6>
 801bb42:	2b0a      	cmp	r3, #10
 801bb44:	d0dc      	beq.n	801bb00 <lv_obj_event+0xd0>
 801bb46:	e7c6      	b.n	801bad6 <lv_obj_event+0xa6>
    return (obj->flags & f)  == f ? true : false;
 801bb48:	f403 6301 	and.w	r3, r3, #2064	; 0x810
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 801bb4c:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 801bb50:	d1d6      	bne.n	801bb00 <lv_obj_event+0xd0>
 801bb52:	4620      	mov	r0, r4
 801bb54:	f000 f92a 	bl	801bdac <lv_obj_is_editable>
 801bb58:	2800      	cmp	r0, #0
 801bb5a:	d1d1      	bne.n	801bb00 <lv_obj_event+0xd0>
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 801bb5c:	4620      	mov	r0, r4
 801bb5e:	f7ea f84d 	bl	8005bfc <lv_obj_get_scroll_left>
 801bb62:	4607      	mov	r7, r0
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 801bb64:	4620      	mov	r0, r4
 801bb66:	f7ea f8b1 	bl	8005ccc <lv_obj_get_scroll_right>
 801bb6a:	4606      	mov	r6, r0
            char c = *((char *)lv_event_get_param(e));
 801bb6c:	4628      	mov	r0, r5
 801bb6e:	f7ff fb48 	bl	801b202 <lv_event_get_param>
 801bb72:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_DOWN) {
 801bb74:	2b12      	cmp	r3, #18
 801bb76:	d10c      	bne.n	801bb92 <lv_obj_event+0x162>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 801bb78:	4620      	mov	r0, r4
 801bb7a:	f001 f9f4 	bl	801cf66 <lv_obj_get_scroll_y>
 801bb7e:	4605      	mov	r5, r0
 801bb80:	4620      	mov	r0, r4
 801bb82:	f000 fe5d 	bl	801c840 <lv_obj_get_height>
 801bb86:	1e03      	subs	r3, r0, #0
 801bb88:	bfb8      	it	lt
 801bb8a:	3303      	addlt	r3, #3
 801bb8c:	eb05 01a3 	add.w	r1, r5, r3, asr #2
 801bb90:	e00d      	b.n	801bbae <lv_obj_event+0x17e>
            else if(c == LV_KEY_UP) {
 801bb92:	2b11      	cmp	r3, #17
 801bb94:	d113      	bne.n	801bbbe <lv_obj_event+0x18e>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 801bb96:	4620      	mov	r0, r4
 801bb98:	f001 f9e5 	bl	801cf66 <lv_obj_get_scroll_y>
 801bb9c:	4605      	mov	r5, r0
 801bb9e:	4620      	mov	r0, r4
 801bba0:	f000 fe4e 	bl	801c840 <lv_obj_get_height>
 801bba4:	1e03      	subs	r3, r0, #0
 801bba6:	da00      	bge.n	801bbaa <lv_obj_event+0x17a>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 801bba8:	3303      	adds	r3, #3
 801bbaa:	eba5 01a3 	sub.w	r1, r5, r3, asr #2
 801bbae:	2200      	movs	r2, #0
 801bbb0:	b209      	sxth	r1, r1
 801bbb2:	4620      	mov	r0, r4
}
 801bbb4:	b005      	add	sp, #20
 801bbb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 801bbba:	f7ea b9a9 	b.w	8005f10 <lv_obj_scroll_to_y>
            else if(c == LV_KEY_RIGHT) {
 801bbbe:	2b13      	cmp	r3, #19
 801bbc0:	d11c      	bne.n	801bbfc <lv_obj_event+0x1cc>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 801bbc2:	4620      	mov	r0, r4
 801bbc4:	f001 f9b5 	bl	801cf32 <lv_obj_get_scroll_dir>
 801bbc8:	0781      	lsls	r1, r0, #30
 801bbca:	d0d5      	beq.n	801bb78 <lv_obj_event+0x148>
 801bbcc:	2f00      	cmp	r7, #0
 801bbce:	dc01      	bgt.n	801bbd4 <lv_obj_event+0x1a4>
 801bbd0:	2e00      	cmp	r6, #0
 801bbd2:	ddd1      	ble.n	801bb78 <lv_obj_event+0x148>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 801bbd4:	4620      	mov	r0, r4
 801bbd6:	f001 f9c0 	bl	801cf5a <lv_obj_get_scroll_x>
 801bbda:	4605      	mov	r5, r0
 801bbdc:	4620      	mov	r0, r4
 801bbde:	f000 fe29 	bl	801c834 <lv_obj_get_width>
 801bbe2:	1e03      	subs	r3, r0, #0
 801bbe4:	bfb8      	it	lt
 801bbe6:	3303      	addlt	r3, #3
 801bbe8:	eb05 01a3 	add.w	r1, r5, r3, asr #2
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 801bbec:	2200      	movs	r2, #0
 801bbee:	b209      	sxth	r1, r1
 801bbf0:	4620      	mov	r0, r4
}
 801bbf2:	b005      	add	sp, #20
 801bbf4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 801bbf8:	f7ea b974 	b.w	8005ee4 <lv_obj_scroll_to_x>
            else if(c == LV_KEY_LEFT) {
 801bbfc:	2b14      	cmp	r3, #20
 801bbfe:	f47f af7f 	bne.w	801bb00 <lv_obj_event+0xd0>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 801bc02:	4620      	mov	r0, r4
 801bc04:	f001 f995 	bl	801cf32 <lv_obj_get_scroll_dir>
 801bc08:	0782      	lsls	r2, r0, #30
 801bc0a:	d0c4      	beq.n	801bb96 <lv_obj_event+0x166>
 801bc0c:	2f00      	cmp	r7, #0
 801bc0e:	dc01      	bgt.n	801bc14 <lv_obj_event+0x1e4>
 801bc10:	2e00      	cmp	r6, #0
 801bc12:	ddc0      	ble.n	801bb96 <lv_obj_event+0x166>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 801bc14:	4620      	mov	r0, r4
 801bc16:	f001 f9a0 	bl	801cf5a <lv_obj_get_scroll_x>
 801bc1a:	4605      	mov	r5, r0
 801bc1c:	4620      	mov	r0, r4
 801bc1e:	f000 fe09 	bl	801c834 <lv_obj_get_width>
 801bc22:	1e03      	subs	r3, r0, #0
 801bc24:	bfb8      	it	lt
 801bc26:	3303      	addlt	r3, #3
 801bc28:	eba5 01a3 	sub.w	r1, r5, r3, asr #2
 801bc2c:	e7de      	b.n	801bbec <lv_obj_event+0x1bc>
    return (obj->flags & f)  == f ? true : false;
 801bc2e:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 801bc30:	055b      	lsls	r3, r3, #21
 801bc32:	d502      	bpl.n	801bc3a <lv_obj_event+0x20a>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 801bc34:	2101      	movs	r1, #1
 801bc36:	f001 fa4b 	bl	801d0d0 <lv_obj_scroll_to_view_recursive>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 801bc3a:	4620      	mov	r0, r4
 801bc3c:	f7ff fef4 	bl	801ba28 <lv_obj_get_group>
 801bc40:	f7ff fc96 	bl	801b570 <lv_group_get_editing>
 801bc44:	4606      	mov	r6, r0
        lv_indev_t * indev = lv_indev_get_act();
 801bc46:	f7e8 fdaf 	bl	80047a8 <lv_indev_get_act>
        if(indev == NULL) indev = lv_event_get_indev(e);
 801bc4a:	b910      	cbnz	r0, 801bc52 <lv_obj_event+0x222>
 801bc4c:	4628      	mov	r0, r5
 801bc4e:	f7ff fb22 	bl	801b296 <lv_event_get_indev>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801bc52:	f7ff fc92 	bl	801b57a <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 801bc56:	2802      	cmp	r0, #2
 801bc58:	d008      	beq.n	801bc6c <lv_obj_event+0x23c>
 801bc5a:	2804      	cmp	r0, #4
 801bc5c:	bf14      	ite	ne
 801bc5e:	2102      	movne	r1, #2
 801bc60:	2106      	moveq	r1, #6
        if(editing) {
 801bc62:	b12e      	cbz	r6, 801bc70 <lv_obj_event+0x240>
            lv_obj_add_state(obj, state);
 801bc64:	f041 0108 	orr.w	r1, r1, #8
 801bc68:	4620      	mov	r0, r4
 801bc6a:	e6ef      	b.n	801ba4c <lv_obj_event+0x1c>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 801bc6c:	2106      	movs	r1, #6
 801bc6e:	e7f8      	b.n	801bc62 <lv_obj_event+0x232>
            lv_obj_add_state(obj, state);
 801bc70:	4620      	mov	r0, r4
 801bc72:	f7ff feb8 	bl	801b9e6 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 801bc76:	2108      	movs	r1, #8
 801bc78:	e736      	b.n	801bae8 <lv_obj_event+0xb8>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 801bc7a:	2140      	movs	r1, #64	; 0x40
 801bc7c:	e7f4      	b.n	801bc68 <lv_obj_event+0x238>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 801bc7e:	2140      	movs	r1, #64	; 0x40
 801bc80:	f7ff febb 	bl	801b9fa <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 801bc84:	4620      	mov	r0, r4
 801bc86:	f001 f94c 	bl	801cf22 <lv_obj_get_scrollbar_mode>
 801bc8a:	2802      	cmp	r0, #2
 801bc8c:	f47f af38 	bne.w	801bb00 <lv_obj_event+0xd0>
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 801bc90:	aa02      	add	r2, sp, #8
 801bc92:	4669      	mov	r1, sp
 801bc94:	4620      	mov	r0, r4
 801bc96:	f001 fa36 	bl	801d106 <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 801bc9a:	4669      	mov	r1, sp
 801bc9c:	4620      	mov	r0, r4
 801bc9e:	f000 ffa8 	bl	801cbf2 <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 801bca2:	a902      	add	r1, sp, #8
 801bca4:	4620      	mov	r0, r4
 801bca6:	f000 ffa4 	bl	801cbf2 <lv_obj_invalidate_area>
 801bcaa:	e729      	b.n	801bb00 <lv_obj_event+0xd0>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 801bcac:	210e      	movs	r1, #14
 801bcae:	e71b      	b.n	801bae8 <lv_obj_event+0xb8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 801bcb0:	2209      	movs	r2, #9
 801bcb2:	2100      	movs	r1, #0
 801bcb4:	f001 fee4 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 801bcb8:	220a      	movs	r2, #10
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 801bcba:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 801bcbc:	2100      	movs	r1, #0
 801bcbe:	4620      	mov	r0, r4
 801bcc0:	f001 fede 	bl	801da80 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 801bcc4:	b280      	uxth	r0, r0
        if(layout || align) {
 801bcc6:	b908      	cbnz	r0, 801bccc <lv_obj_event+0x29c>
 801bcc8:	b2ed      	uxtb	r5, r5
 801bcca:	b115      	cbz	r5, 801bcd2 <lv_obj_event+0x2a2>
            lv_obj_mark_layout_as_dirty(obj);
 801bccc:	4620      	mov	r0, r4
 801bcce:	f000 fd30 	bl	801c732 <lv_obj_mark_layout_as_dirty>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801bcd2:	4620      	mov	r0, r4
        for(i = 0; i < child_cnt; i++) {
 801bcd4:	2500      	movs	r5, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801bcd6:	f002 fa69 	bl	801e1ac <lv_obj_get_child_cnt>
 801bcda:	4606      	mov	r6, r0
        for(i = 0; i < child_cnt; i++) {
 801bcdc:	42b5      	cmp	r5, r6
 801bcde:	f43f af0f 	beq.w	801bb00 <lv_obj_event+0xd0>
            lv_obj_t * child = obj->spec_attr->children[i];
 801bce2:	68a3      	ldr	r3, [r4, #8]
 801bce4:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 801bce6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
        for(i = 0; i < child_cnt; i++) {
 801bcea:	3501      	adds	r5, #1
            lv_obj_mark_layout_as_dirty(child);
 801bcec:	f000 fd21 	bl	801c732 <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 801bcf0:	e7f4      	b.n	801bcdc <lv_obj_event+0x2ac>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801bcf2:	2201      	movs	r2, #1
 801bcf4:	2100      	movs	r1, #0
 801bcf6:	f001 fec3 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801bcfa:	2204      	movs	r2, #4
 801bcfc:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801bcfe:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801bd00:	4620      	mov	r0, r4
 801bd02:	f001 febd 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 801bd06:	2209      	movs	r2, #9
 801bd08:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801bd0a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 801bd0c:	4620      	mov	r0, r4
 801bd0e:	f001 feb7 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 801bd12:	220a      	movs	r2, #10
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 801bd14:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 801bd16:	2100      	movs	r1, #0
 801bd18:	4620      	mov	r0, r4
 801bd1a:	f001 feb1 	bl	801da80 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 801bd1e:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 801bd20:	b950      	cbnz	r0, 801bd38 <lv_obj_event+0x308>
 801bd22:	b2ff      	uxtb	r7, r7
 801bd24:	b947      	cbnz	r7, 801bd38 <lv_obj_event+0x308>
 801bd26:	b236      	sxth	r6, r6
 801bd28:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801bd2c:	429e      	cmp	r6, r3
 801bd2e:	d003      	beq.n	801bd38 <lv_obj_event+0x308>
 801bd30:	b22d      	sxth	r5, r5
 801bd32:	429d      	cmp	r5, r3
 801bd34:	f47f aee4 	bne.w	801bb00 <lv_obj_event+0xd0>
            lv_obj_mark_layout_as_dirty(obj);
 801bd38:	4620      	mov	r0, r4
}
 801bd3a:	b005      	add	sp, #20
 801bd3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_mark_layout_as_dirty(obj);
 801bd40:	f000 bcf7 	b.w	801c732 <lv_obj_mark_layout_as_dirty>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 801bd44:	2100      	movs	r1, #0
 801bd46:	f000 fb32 	bl	801c3ae <lv_obj_calculate_ext_draw_size>
 801bd4a:	4601      	mov	r1, r0
        lv_event_set_ext_draw_size(e, d);
 801bd4c:	4628      	mov	r0, r5
}
 801bd4e:	b005      	add	sp, #20
 801bd50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_event_set_ext_draw_size(e, d);
 801bd54:	f7ff baad 	b.w	801b2b2 <lv_event_set_ext_draw_size>
        lv_obj_draw(e);
 801bd58:	4628      	mov	r0, r5
}
 801bd5a:	b005      	add	sp, #20
 801bd5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_obj_draw(e);
 801bd60:	f7e8 bd7e 	b.w	8004860 <lv_obj_draw>

0801bd64 <lv_obj_check_type>:
    if(obj == NULL) return false;
 801bd64:	b118      	cbz	r0, 801bd6e <lv_obj_check_type+0xa>
    return obj->class_p == class_p ? true : false;
 801bd66:	6800      	ldr	r0, [r0, #0]
 801bd68:	1a43      	subs	r3, r0, r1
 801bd6a:	4258      	negs	r0, r3
 801bd6c:	4158      	adcs	r0, r3
}
 801bd6e:	4770      	bx	lr

0801bd70 <lv_obj_construct>:
{
 801bd70:	b570      	push	{r4, r5, r6, lr}
    const lv_obj_class_t * original_class_p = obj->class_p;
 801bd72:	6805      	ldr	r5, [r0, #0]
{
 801bd74:	4604      	mov	r4, r0
    if(obj->class_p->base_class) {
 801bd76:	682b      	ldr	r3, [r5, #0]
 801bd78:	b113      	cbz	r3, 801bd80 <lv_obj_construct+0x10>
        obj->class_p = obj->class_p->base_class;
 801bd7a:	6003      	str	r3, [r0, #0]
        lv_obj_construct(obj);
 801bd7c:	f7ff fff8 	bl	801bd70 <lv_obj_construct>
    obj->class_p = original_class_p;
 801bd80:	6025      	str	r5, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 801bd82:	686b      	ldr	r3, [r5, #4]
 801bd84:	b123      	cbz	r3, 801bd90 <lv_obj_construct+0x20>
 801bd86:	4621      	mov	r1, r4
 801bd88:	4628      	mov	r0, r5
}
 801bd8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 801bd8e:	4718      	bx	r3
}
 801bd90:	bd70      	pop	{r4, r5, r6, pc}

0801bd92 <_lv_obj_destruct>:
{
 801bd92:	b510      	push	{r4, lr}
 801bd94:	4604      	mov	r4, r0
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 801bd96:	6820      	ldr	r0, [r4, #0]
 801bd98:	6883      	ldr	r3, [r0, #8]
 801bd9a:	b10b      	cbz	r3, 801bda0 <_lv_obj_destruct+0xe>
 801bd9c:	4621      	mov	r1, r4
 801bd9e:	4798      	blx	r3
    if(obj->class_p->base_class) {
 801bda0:	6823      	ldr	r3, [r4, #0]
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	b10b      	cbz	r3, 801bdaa <_lv_obj_destruct+0x18>
        obj->class_p = obj->class_p->base_class;
 801bda6:	6023      	str	r3, [r4, #0]
        _lv_obj_destruct(obj);
 801bda8:	e7f5      	b.n	801bd96 <_lv_obj_destruct+0x4>
}
 801bdaa:	bd10      	pop	{r4, pc}

0801bdac <lv_obj_is_editable>:
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 801bdac:	6800      	ldr	r0, [r0, #0]
 801bdae:	b130      	cbz	r0, 801bdbe <lv_obj_is_editable+0x12>
 801bdb0:	7e03      	ldrb	r3, [r0, #24]
 801bdb2:	f013 0303 	ands.w	r3, r3, #3
 801bdb6:	d0f9      	beq.n	801bdac <lv_obj_is_editable>
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 801bdb8:	3b01      	subs	r3, #1
 801bdba:	4258      	negs	r0, r3
 801bdbc:	4158      	adcs	r0, r3
}
 801bdbe:	4770      	bx	lr

0801bdc0 <lv_obj_is_group_def>:
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 801bdc0:	6800      	ldr	r0, [r0, #0]
 801bdc2:	b130      	cbz	r0, 801bdd2 <lv_obj_is_group_def+0x12>
 801bdc4:	7e03      	ldrb	r3, [r0, #24]
 801bdc6:	f013 030c 	ands.w	r3, r3, #12
 801bdca:	d0f9      	beq.n	801bdc0 <lv_obj_is_group_def>
    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 801bdcc:	3b04      	subs	r3, #4
 801bdce:	4258      	negs	r0, r3
 801bdd0:	4158      	adcs	r0, r3
}
 801bdd2:	4770      	bx	lr

0801bdd4 <lv_obj_class_init_obj>:
{
 801bdd4:	b538      	push	{r3, r4, r5, lr}
 801bdd6:	4604      	mov	r4, r0
    lv_obj_mark_layout_as_dirty(obj);
 801bdd8:	f000 fcab 	bl	801c732 <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 801bddc:	2000      	movs	r0, #0
 801bdde:	f7ea fa7d 	bl	80062dc <lv_obj_enable_style_refresh>
    lv_theme_apply(obj);
 801bde2:	4620      	mov	r0, r4
 801bde4:	f7eb fc00 	bl	80075e8 <lv_theme_apply>
    lv_obj_construct(obj);
 801bde8:	4620      	mov	r0, r4
 801bdea:	f7ff ffc1 	bl	801bd70 <lv_obj_construct>
    lv_obj_enable_style_refresh(true);
 801bdee:	2001      	movs	r0, #1
 801bdf0:	f7ea fa74 	bl	80062dc <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 801bdf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bdf8:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 801bdfc:	4620      	mov	r0, r4
 801bdfe:	f7ea fa73 	bl	80062e8 <lv_obj_refresh_style>
    lv_obj_refresh_self_size(obj);
 801be02:	4620      	mov	r0, r4
 801be04:	f000 fd8b 	bl	801c91e <lv_obj_refresh_self_size>
    lv_group_t * def_group = lv_group_get_default();
 801be08:	f7e8 fca0 	bl	800474c <lv_group_get_default>
    if(def_group && lv_obj_is_group_def(obj)) {
 801be0c:	4602      	mov	r2, r0
 801be0e:	b138      	cbz	r0, 801be20 <lv_obj_class_init_obj+0x4c>
 801be10:	4620      	mov	r0, r4
 801be12:	f7ff ffd5 	bl	801bdc0 <lv_obj_is_group_def>
 801be16:	b118      	cbz	r0, 801be20 <lv_obj_class_init_obj+0x4c>
        lv_group_add_obj(def_group, obj);
 801be18:	4621      	mov	r1, r4
 801be1a:	4610      	mov	r0, r2
 801be1c:	f7ff fb49 	bl	801b4b2 <lv_group_add_obj>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801be20:	4620      	mov	r0, r4
 801be22:	f002 f9b1 	bl	801e188 <lv_obj_get_parent>
    if(parent) {
 801be26:	4605      	mov	r5, r0
 801be28:	b168      	cbz	r0, 801be46 <lv_obj_class_init_obj+0x72>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 801be2a:	4622      	mov	r2, r4
 801be2c:	2122      	movs	r1, #34	; 0x22
 801be2e:	f7e8 fc55 	bl	80046dc <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 801be32:	4622      	mov	r2, r4
 801be34:	4628      	mov	r0, r5
 801be36:	2123      	movs	r1, #35	; 0x23
 801be38:	f7e8 fc50 	bl	80046dc <lv_event_send>
        lv_obj_invalidate(obj);
 801be3c:	4620      	mov	r0, r4
}
 801be3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(obj);
 801be42:	f000 bef7 	b.w	801cc34 <lv_obj_invalidate>
}
 801be46:	bd38      	pop	{r3, r4, r5, pc}

0801be48 <lv_obj_get_style_opa>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 801be48:	2260      	movs	r2, #96	; 0x60
{
 801be4a:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 801be4c:	f001 fe18 	bl	801da80 <lv_obj_get_style_prop>
}
 801be50:	b2c0      	uxtb	r0, r0
 801be52:	bd08      	pop	{r3, pc}

0801be54 <lv_obj_get_style_blend_mode>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 801be54:	2267      	movs	r2, #103	; 0x67
{
 801be56:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 801be58:	f001 fe12 	bl	801da80 <lv_obj_get_style_prop>
}
 801be5c:	b2c0      	uxtb	r0, r0
 801be5e:	bd08      	pop	{r3, pc}

0801be60 <lv_obj_get_style_bg_color_filtered>:
{
 801be60:	b538      	push	{r3, r4, r5, lr}
 801be62:	4604      	mov	r4, r0
 801be64:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 801be66:	2220      	movs	r2, #32
 801be68:	f001 fe0a 	bl	801da80 <lv_obj_get_style_prop>
 801be6c:	4629      	mov	r1, r5
 801be6e:	4602      	mov	r2, r0
 801be70:	4620      	mov	r0, r4
 801be72:	f002 f81c 	bl	801deae <_lv_obj_style_apply_color_filter>
}
 801be76:	bd38      	pop	{r3, r4, r5, pc}

0801be78 <lv_obj_get_style_text_color_filtered>:
{
 801be78:	b538      	push	{r3, r4, r5, lr}
 801be7a:	4604      	mov	r4, r0
 801be7c:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 801be7e:	2255      	movs	r2, #85	; 0x55
 801be80:	f001 fdfe 	bl	801da80 <lv_obj_get_style_prop>
 801be84:	4629      	mov	r1, r5
 801be86:	4602      	mov	r2, r0
 801be88:	4620      	mov	r0, r4
 801be8a:	f002 f810 	bl	801deae <_lv_obj_style_apply_color_filter>
}
 801be8e:	bd38      	pop	{r3, r4, r5, pc}

0801be90 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 801be90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be92:	4606      	mov	r6, r0
 801be94:	4614      	mov	r4, r2
    lv_opa_t opa = LV_OPA_COVER;
    if(part != LV_PART_MAIN) {
 801be96:	460d      	mov	r5, r1
 801be98:	2900      	cmp	r1, #0
 801be9a:	f000 80fa 	beq.w	801c092 <lv_obj_init_draw_rect_dsc+0x202>
        opa = lv_obj_get_style_opa(obj, part);
 801be9e:	f7ff ffd3 	bl	801be48 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 801bea2:	2802      	cmp	r0, #2
        opa = lv_obj_get_style_opa(obj, part);
 801bea4:	4607      	mov	r7, r0
        if(opa <= LV_OPA_MIN) {
 801bea6:	d809      	bhi.n	801bebc <lv_obj_init_draw_rect_dsc+0x2c>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 801bea8:	2300      	movs	r3, #0
 801beaa:	70e3      	strb	r3, [r4, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 801beac:	76a3      	strb	r3, [r4, #26]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 801beae:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 801beb2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 801beb6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
        }
    }
}
 801beba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 801bebc:	4629      	mov	r1, r5
 801bebe:	4630      	mov	r0, r6
 801bec0:	f7ff ffc8 	bl	801be54 <lv_obj_get_style_blend_mode>
 801bec4:	70a0      	strb	r0, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 801bec6:	220b      	movs	r2, #11
 801bec8:	4629      	mov	r1, r5
 801beca:	4630      	mov	r0, r6
 801becc:	f001 fdd8 	bl	801da80 <lv_obj_get_style_prop>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 801bed0:	78e3      	ldrb	r3, [r4, #3]
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 801bed2:	8020      	strh	r0, [r4, #0]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 801bed4:	b1f3      	cbz	r3, 801bf14 <lv_obj_init_draw_rect_dsc+0x84>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 801bed6:	2221      	movs	r2, #33	; 0x21
 801bed8:	4629      	mov	r1, r5
 801beda:	4630      	mov	r0, r6
 801bedc:	f001 fdd0 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801bee0:	b2c0      	uxtb	r0, r0
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 801bee2:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 801bee4:	70e0      	strb	r0, [r4, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 801bee6:	d915      	bls.n	801bf14 <lv_obj_init_draw_rect_dsc+0x84>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 801bee8:	4629      	mov	r1, r5
 801beea:	4630      	mov	r0, r6
 801beec:	f7ff ffb8 	bl	801be60 <lv_obj_get_style_bg_color_filtered>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 801bef0:	4629      	mov	r1, r5
 801bef2:	80a0      	strh	r0, [r4, #4]
 801bef4:	2226      	movs	r2, #38	; 0x26
 801bef6:	4630      	mov	r0, r6
 801bef8:	f001 fdc2 	bl	801da80 <lv_obj_get_style_prop>
            if(grad && grad->dir != LV_GRAD_DIR_NONE) {
 801befc:	4601      	mov	r1, r0
 801befe:	2800      	cmp	r0, #0
 801bf00:	f000 80c9 	beq.w	801c096 <lv_obj_init_draw_rect_dsc+0x206>
 801bf04:	7a43      	ldrb	r3, [r0, #9]
 801bf06:	075a      	lsls	r2, r3, #29
 801bf08:	f000 80c5 	beq.w	801c096 <lv_obj_init_draw_rect_dsc+0x206>
    return memcpy(dst, src, len);
 801bf0c:	220a      	movs	r2, #10
 801bf0e:	1da0      	adds	r0, r4, #6
 801bf10:	f7fe fbfb 	bl	801a70a <memcpy>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801bf14:	2232      	movs	r2, #50	; 0x32
 801bf16:	4629      	mov	r1, r5
 801bf18:	4630      	mov	r0, r6
 801bf1a:	f001 fdb1 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801bf1e:	b200      	sxth	r0, r0
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 801bf20:	8420      	strh	r0, [r4, #32]
    if(draw_dsc->border_width) {
 801bf22:	b310      	cbz	r0, 801bf6a <lv_obj_init_draw_rect_dsc+0xda>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 801bf24:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801bf28:	b1fb      	cbz	r3, 801bf6a <lv_obj_init_draw_rect_dsc+0xda>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 801bf2a:	2231      	movs	r2, #49	; 0x31
 801bf2c:	4629      	mov	r1, r5
 801bf2e:	4630      	mov	r0, r6
 801bf30:	f001 fda6 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801bf34:	b2c0      	uxtb	r0, r0
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 801bf36:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 801bf38:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 801bf3c:	d915      	bls.n	801bf6a <lv_obj_init_draw_rect_dsc+0xda>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 801bf3e:	2233      	movs	r2, #51	; 0x33
 801bf40:	4629      	mov	r1, r5
 801bf42:	4630      	mov	r0, r6
 801bf44:	f001 fd9c 	bl	801da80 <lv_obj_get_style_prop>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 801bf48:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 801bf4c:	2230      	movs	r2, #48	; 0x30
 801bf4e:	4629      	mov	r1, r5
 801bf50:	f360 0345 	bfi	r3, r0, #1, #5
 801bf54:	4630      	mov	r0, r6
 801bf56:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 801bf5a:	f001 fd91 	bl	801da80 <lv_obj_get_style_prop>
 801bf5e:	4629      	mov	r1, r5
 801bf60:	4602      	mov	r2, r0
 801bf62:	4630      	mov	r0, r6
 801bf64:	f001 ffa3 	bl	801deae <_lv_obj_style_apply_color_filter>
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 801bf68:	83e0      	strh	r0, [r4, #30]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 801bf6a:	2235      	movs	r2, #53	; 0x35
 801bf6c:	4629      	mov	r1, r5
 801bf6e:	4630      	mov	r0, r6
 801bf70:	f001 fd86 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801bf74:	b200      	sxth	r0, r0
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 801bf76:	84e0      	strh	r0, [r4, #38]	; 0x26
    if(draw_dsc->outline_width) {
 801bf78:	b1e8      	cbz	r0, 801bfb6 <lv_obj_init_draw_rect_dsc+0x126>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 801bf7a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801bf7e:	b1d3      	cbz	r3, 801bfb6 <lv_obj_init_draw_rect_dsc+0x126>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 801bf80:	2237      	movs	r2, #55	; 0x37
 801bf82:	4629      	mov	r1, r5
 801bf84:	4630      	mov	r0, r6
 801bf86:	f001 fd7b 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801bf8a:	b2c0      	uxtb	r0, r0
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 801bf8c:	2802      	cmp	r0, #2
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 801bf8e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 801bf92:	d910      	bls.n	801bfb6 <lv_obj_init_draw_rect_dsc+0x126>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 801bf94:	2238      	movs	r2, #56	; 0x38
 801bf96:	4629      	mov	r1, r5
 801bf98:	4630      	mov	r0, r6
 801bf9a:	f001 fd71 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 801bf9e:	2236      	movs	r2, #54	; 0x36
 801bfa0:	4629      	mov	r1, r5
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 801bfa2:	8520      	strh	r0, [r4, #40]	; 0x28
 801bfa4:	4630      	mov	r0, r6
 801bfa6:	f001 fd6b 	bl	801da80 <lv_obj_get_style_prop>
 801bfaa:	4629      	mov	r1, r5
 801bfac:	4602      	mov	r2, r0
 801bfae:	4630      	mov	r0, r6
 801bfb0:	f001 ff7d 	bl	801deae <_lv_obj_style_apply_color_filter>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 801bfb4:	84a0      	strh	r0, [r4, #36]	; 0x24
    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 801bfb6:	7ea3      	ldrb	r3, [r4, #26]
 801bfb8:	b303      	cbz	r3, 801bffc <lv_obj_init_draw_rect_dsc+0x16c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 801bfba:	2228      	movs	r2, #40	; 0x28
 801bfbc:	4629      	mov	r1, r5
 801bfbe:	4630      	mov	r0, r6
 801bfc0:	f001 fd5e 	bl	801da80 <lv_obj_get_style_prop>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 801bfc4:	6120      	str	r0, [r4, #16]
        if(draw_dsc->bg_img_src) {
 801bfc6:	b1c8      	cbz	r0, 801bffc <lv_obj_init_draw_rect_dsc+0x16c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 801bfc8:	2229      	movs	r2, #41	; 0x29
 801bfca:	4629      	mov	r1, r5
 801bfcc:	4630      	mov	r0, r6
 801bfce:	f001 fd57 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801bfd2:	b2c0      	uxtb	r0, r0
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 801bfd4:	2802      	cmp	r0, #2
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 801bfd6:	76a0      	strb	r0, [r4, #26]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 801bfd8:	d910      	bls.n	801bffc <lv_obj_init_draw_rect_dsc+0x16c>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 801bfda:	6920      	ldr	r0, [r4, #16]
 801bfdc:	f002 fc2e 	bl	801e83c <lv_img_src_get_type>
 801bfe0:	2802      	cmp	r0, #2
 801bfe2:	f040 8089 	bne.w	801c0f8 <lv_obj_init_draw_rect_dsc+0x268>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801bfe6:	2257      	movs	r2, #87	; 0x57
 801bfe8:	4629      	mov	r1, r5
 801bfea:	4630      	mov	r0, r6
 801bfec:	f001 fd48 	bl	801da80 <lv_obj_get_style_prop>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 801bff0:	4629      	mov	r1, r5
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 801bff2:	6160      	str	r0, [r4, #20]
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 801bff4:	4630      	mov	r0, r6
 801bff6:	f7ff ff3f 	bl	801be78 <lv_obj_get_style_text_color_filtered>
 801bffa:	8320      	strh	r0, [r4, #24]
    if(draw_dsc->shadow_opa) {
 801bffc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 801c000:	b393      	cbz	r3, 801c068 <lv_obj_init_draw_rect_dsc+0x1d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 801c002:	2240      	movs	r2, #64	; 0x40
 801c004:	4629      	mov	r1, r5
 801c006:	4630      	mov	r0, r6
 801c008:	f001 fd3a 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c00c:	b200      	sxth	r0, r0
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 801c00e:	85e0      	strh	r0, [r4, #46]	; 0x2e
        if(draw_dsc->shadow_width) {
 801c010:	b350      	cbz	r0, 801c068 <lv_obj_init_draw_rect_dsc+0x1d8>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 801c012:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 801c016:	2b02      	cmp	r3, #2
 801c018:	d926      	bls.n	801c068 <lv_obj_init_draw_rect_dsc+0x1d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 801c01a:	2245      	movs	r2, #69	; 0x45
 801c01c:	4629      	mov	r1, r5
 801c01e:	4630      	mov	r0, r6
 801c020:	f001 fd2e 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c024:	b2c0      	uxtb	r0, r0
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 801c026:	2802      	cmp	r0, #2
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 801c028:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 801c02c:	d91c      	bls.n	801c068 <lv_obj_init_draw_rect_dsc+0x1d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 801c02e:	2241      	movs	r2, #65	; 0x41
 801c030:	4629      	mov	r1, r5
 801c032:	4630      	mov	r0, r6
 801c034:	f001 fd24 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 801c038:	2242      	movs	r2, #66	; 0x42
 801c03a:	4629      	mov	r1, r5
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 801c03c:	8620      	strh	r0, [r4, #48]	; 0x30
 801c03e:	4630      	mov	r0, r6
 801c040:	f001 fd1e 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 801c044:	2243      	movs	r2, #67	; 0x43
 801c046:	4629      	mov	r1, r5
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 801c048:	8660      	strh	r0, [r4, #50]	; 0x32
 801c04a:	4630      	mov	r0, r6
 801c04c:	f001 fd18 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
 801c050:	2244      	movs	r2, #68	; 0x44
 801c052:	4629      	mov	r1, r5
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 801c054:	86a0      	strh	r0, [r4, #52]	; 0x34
 801c056:	4630      	mov	r0, r6
 801c058:	f001 fd12 	bl	801da80 <lv_obj_get_style_prop>
 801c05c:	4629      	mov	r1, r5
 801c05e:	4602      	mov	r2, r0
 801c060:	4630      	mov	r0, r6
 801c062:	f001 ff24 	bl	801deae <_lv_obj_style_apply_color_filter>
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 801c066:	85a0      	strh	r0, [r4, #44]	; 0x2c
    if(part != LV_PART_MAIN) {
 801c068:	2d00      	cmp	r5, #0
 801c06a:	f43f af26 	beq.w	801beba <lv_obj_init_draw_rect_dsc+0x2a>
        if(opa < LV_OPA_MAX) {
 801c06e:	2ffc      	cmp	r7, #252	; 0xfc
 801c070:	f63f af23 	bhi.w	801beba <lv_obj_init_draw_rect_dsc+0x2a>
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 801c074:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 801c078:	fb10 f007 	smulbb	r0, r0, r7
 801c07c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c080:	70e0      	strb	r0, [r4, #3]
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
 801c082:	76a0      	strb	r0, [r4, #26]
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 801c084:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
 801c088:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 801c08c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
 801c090:	e713      	b.n	801beba <lv_obj_init_draw_rect_dsc+0x2a>
    lv_opa_t opa = LV_OPA_COVER;
 801c092:	27ff      	movs	r7, #255	; 0xff
 801c094:	e717      	b.n	801bec6 <lv_obj_init_draw_rect_dsc+0x36>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 801c096:	2223      	movs	r2, #35	; 0x23
 801c098:	4629      	mov	r1, r5
 801c09a:	4630      	mov	r0, r6
 801c09c:	f001 fcf0 	bl	801da80 <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dir = lv_obj_get_style_bg_grad_dir(obj, part);
 801c0a0:	7be3      	ldrb	r3, [r4, #15]
 801c0a2:	f360 0302 	bfi	r3, r0, #0, #3
 801c0a6:	73e3      	strb	r3, [r4, #15]
                if(draw_dsc->bg_grad.dir != LV_GRAD_DIR_NONE) {
 801c0a8:	075b      	lsls	r3, r3, #29
 801c0aa:	d01b      	beq.n	801c0e4 <lv_obj_init_draw_rect_dsc+0x254>
                    draw_dsc->bg_grad.stops[0].color = lv_obj_get_style_bg_color_filtered(obj, part);
 801c0ac:	4629      	mov	r1, r5
 801c0ae:	4630      	mov	r0, r6
 801c0b0:	f7ff fed6 	bl	801be60 <lv_obj_get_style_bg_color_filtered>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR));
 801c0b4:	2222      	movs	r2, #34	; 0x22
 801c0b6:	4629      	mov	r1, r5
 801c0b8:	80e0      	strh	r0, [r4, #6]
 801c0ba:	4630      	mov	r0, r6
 801c0bc:	f001 fce0 	bl	801da80 <lv_obj_get_style_prop>
 801c0c0:	4629      	mov	r1, r5
 801c0c2:	4602      	mov	r2, r0
 801c0c4:	4630      	mov	r0, r6
 801c0c6:	f001 fef2 	bl	801deae <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 801c0ca:	2224      	movs	r2, #36	; 0x24
 801c0cc:	4629      	mov	r1, r5
                    draw_dsc->bg_grad.stops[1].color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 801c0ce:	8160      	strh	r0, [r4, #10]
 801c0d0:	4630      	mov	r0, r6
 801c0d2:	f001 fcd5 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 801c0d6:	2225      	movs	r2, #37	; 0x25
                    draw_dsc->bg_grad.stops[0].frac = lv_obj_get_style_bg_main_stop(obj, part);
 801c0d8:	7220      	strb	r0, [r4, #8]
 801c0da:	4629      	mov	r1, r5
 801c0dc:	4630      	mov	r0, r6
 801c0de:	f001 fccf 	bl	801da80 <lv_obj_get_style_prop>
                    draw_dsc->bg_grad.stops[1].frac = lv_obj_get_style_bg_grad_stop(obj, part);
 801c0e2:	7320      	strb	r0, [r4, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 801c0e4:	2227      	movs	r2, #39	; 0x27
 801c0e6:	4629      	mov	r1, r5
 801c0e8:	4630      	mov	r0, r6
 801c0ea:	f001 fcc9 	bl	801da80 <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
 801c0ee:	7be3      	ldrb	r3, [r4, #15]
 801c0f0:	f360 03c5 	bfi	r3, r0, #3, #3
 801c0f4:	73e3      	strb	r3, [r4, #15]
 801c0f6:	e70d      	b.n	801bf14 <lv_obj_init_draw_rect_dsc+0x84>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 801c0f8:	222a      	movs	r2, #42	; 0x2a
 801c0fa:	4629      	mov	r1, r5
 801c0fc:	4630      	mov	r0, r6
 801c0fe:	f001 fcbf 	bl	801da80 <lv_obj_get_style_prop>
 801c102:	4629      	mov	r1, r5
 801c104:	4602      	mov	r2, r0
 801c106:	4630      	mov	r0, r6
 801c108:	f001 fed1 	bl	801deae <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 801c10c:	222b      	movs	r2, #43	; 0x2b
 801c10e:	4629      	mov	r1, r5
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 801c110:	8320      	strh	r0, [r4, #24]
 801c112:	4630      	mov	r0, r6
 801c114:	f001 fcb4 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 801c118:	222c      	movs	r2, #44	; 0x2c
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 801c11a:	76e0      	strb	r0, [r4, #27]
 801c11c:	4629      	mov	r1, r5
 801c11e:	4630      	mov	r0, r6
 801c120:	f001 fcae 	bl	801da80 <lv_obj_get_style_prop>
    return (bool)v.num;
 801c124:	3800      	subs	r0, #0
 801c126:	bf18      	it	ne
 801c128:	2001      	movne	r0, #1
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 801c12a:	7720      	strb	r0, [r4, #28]
 801c12c:	e766      	b.n	801bffc <lv_obj_init_draw_rect_dsc+0x16c>

0801c12e <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 801c12e:	b570      	push	{r4, r5, r6, lr}
 801c130:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 801c132:	2256      	movs	r2, #86	; 0x56
 801c134:	4606      	mov	r6, r0
 801c136:	460d      	mov	r5, r1
 801c138:	f001 fca2 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c13c:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 801c13e:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 801c140:	76a0      	strb	r0, [r4, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 801c142:	d908      	bls.n	801c156 <lv_obj_init_draw_label_dsc+0x28>

    if(part != LV_PART_MAIN) {
 801c144:	b17d      	cbz	r5, 801c166 <lv_obj_init_draw_label_dsc+0x38>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 801c146:	4629      	mov	r1, r5
 801c148:	4630      	mov	r0, r6
 801c14a:	f7ff fe7d 	bl	801be48 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 801c14e:	2802      	cmp	r0, #2
 801c150:	d802      	bhi.n	801c158 <lv_obj_init_draw_label_dsc+0x2a>
            draw_dsc->opa = LV_OPA_TRANSP;
 801c152:	2300      	movs	r3, #0
 801c154:	76a3      	strb	r3, [r4, #26]
#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
}
 801c156:	bd70      	pop	{r4, r5, r6, pc}
        if(opa < LV_OPA_MAX) {
 801c158:	28fc      	cmp	r0, #252	; 0xfc
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 801c15a:	bf9f      	itttt	ls
 801c15c:	7ea3      	ldrbls	r3, [r4, #26]
 801c15e:	fb13 f300 	smulbbls	r3, r3, r0
 801c162:	121b      	asrls	r3, r3, #8
 801c164:	76a3      	strbls	r3, [r4, #26]
    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 801c166:	4629      	mov	r1, r5
 801c168:	4630      	mov	r0, r6
 801c16a:	f7ff fe85 	bl	801be78 <lv_obj_get_style_text_color_filtered>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801c16e:	2258      	movs	r2, #88	; 0x58
 801c170:	4629      	mov	r1, r5
 801c172:	81a0      	strh	r0, [r4, #12]
 801c174:	4630      	mov	r0, r6
 801c176:	f001 fc83 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801c17a:	2259      	movs	r2, #89	; 0x59
 801c17c:	4629      	mov	r1, r5
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 801c17e:	82a0      	strh	r0, [r4, #20]
 801c180:	4630      	mov	r0, r6
 801c182:	f001 fc7d 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 801c186:	225a      	movs	r2, #90	; 0x5a
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 801c188:	8260      	strh	r0, [r4, #18]
 801c18a:	4629      	mov	r1, r5
 801c18c:	4630      	mov	r0, r6
 801c18e:	f001 fc77 	bl	801da80 <lv_obj_get_style_prop>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 801c192:	7fa3      	ldrb	r3, [r4, #30]
 801c194:	f360 0302 	bfi	r3, r0, #0, #3
 801c198:	77a3      	strb	r3, [r4, #30]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 801c19a:	b13d      	cbz	r5, 801c1ac <lv_obj_init_draw_label_dsc+0x7e>
 801c19c:	4629      	mov	r1, r5
 801c19e:	4630      	mov	r0, r6
 801c1a0:	f7ff fe58 	bl	801be54 <lv_obj_get_style_blend_mode>
 801c1a4:	7fa3      	ldrb	r3, [r4, #30]
 801c1a6:	f360 03c5 	bfi	r3, r0, #3, #3
 801c1aa:	77a3      	strb	r3, [r4, #30]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801c1ac:	2257      	movs	r2, #87	; 0x57
 801c1ae:	4629      	mov	r1, r5
 801c1b0:	4630      	mov	r0, r6
 801c1b2:	f001 fc65 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801c1b6:	225b      	movs	r2, #91	; 0x5b
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 801c1b8:	6020      	str	r0, [r4, #0]
 801c1ba:	4629      	mov	r1, r5
 801c1bc:	4630      	mov	r0, r6
 801c1be:	f001 fc5f 	bl	801da80 <lv_obj_get_style_prop>
    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 801c1c2:	7720      	strb	r0, [r4, #28]
 801c1c4:	e7c7      	b.n	801c156 <lv_obj_init_draw_label_dsc+0x28>

0801c1c6 <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint32_t part, lv_draw_img_dsc_t * draw_dsc)
{
 801c1c6:	b570      	push	{r4, r5, r6, lr}
 801c1c8:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 801c1ca:	2246      	movs	r2, #70	; 0x46
 801c1cc:	4605      	mov	r5, r0
 801c1ce:	460e      	mov	r6, r1
 801c1d0:	f001 fc56 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c1d4:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 801c1d6:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
 801c1d8:	72e0      	strb	r0, [r4, #11]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 801c1da:	d908      	bls.n	801c1ee <lv_obj_init_draw_img_dsc+0x28>

    if(part != LV_PART_MAIN) {
 801c1dc:	b17e      	cbz	r6, 801c1fe <lv_obj_init_draw_img_dsc+0x38>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 801c1de:	4631      	mov	r1, r6
 801c1e0:	4628      	mov	r0, r5
 801c1e2:	f7ff fe31 	bl	801be48 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 801c1e6:	2802      	cmp	r0, #2
 801c1e8:	d802      	bhi.n	801c1f0 <lv_obj_init_draw_img_dsc+0x2a>
            draw_dsc->opa = LV_OPA_TRANSP;
 801c1ea:	2300      	movs	r3, #0
 801c1ec:	72e3      	strb	r3, [r4, #11]
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
    }
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 801c1ee:	bd70      	pop	{r4, r5, r6, pc}
        if(opa < LV_OPA_MAX) {
 801c1f0:	28fc      	cmp	r0, #252	; 0xfc
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 801c1f2:	bf9f      	itttt	ls
 801c1f4:	7ae3      	ldrbls	r3, [r4, #11]
 801c1f6:	fb13 f300 	smulbbls	r3, r3, r0
 801c1fa:	121b      	asrls	r3, r3, #8
 801c1fc:	72e3      	strbls	r3, [r4, #11]
    draw_dsc->angle = 0;
 801c1fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_OPA);
 801c202:	4631      	mov	r1, r6
 801c204:	4628      	mov	r0, r5
 801c206:	6023      	str	r3, [r4, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801c208:	8b2b      	ldrh	r3, [r5, #24]
 801c20a:	8aaa      	ldrh	r2, [r5, #20]
 801c20c:	3301      	adds	r3, #1
 801c20e:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 801c210:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 801c214:	fa02 f383 	sxtah	r3, r2, r3
 801c218:	105b      	asrs	r3, r3, #1
 801c21a:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801c21c:	8b6b      	ldrh	r3, [r5, #26]
 801c21e:	8aea      	ldrh	r2, [r5, #22]
 801c220:	3301      	adds	r3, #1
 801c222:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 801c224:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 801c228:	fa02 f383 	sxtah	r3, r2, r3
 801c22c:	2248      	movs	r2, #72	; 0x48
 801c22e:	105b      	asrs	r3, r3, #1
 801c230:	80e3      	strh	r3, [r4, #6]
 801c232:	f001 fc25 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c236:	b2c0      	uxtb	r0, r0
    draw_dsc->recolor_opa = lv_obj_get_style_img_recolor_opa(obj, part);
 801c238:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 801c23a:	b150      	cbz	r0, 801c252 <lv_obj_init_draw_img_dsc+0x8c>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR));
 801c23c:	2247      	movs	r2, #71	; 0x47
 801c23e:	4631      	mov	r1, r6
 801c240:	4628      	mov	r0, r5
 801c242:	f001 fc1d 	bl	801da80 <lv_obj_get_style_prop>
 801c246:	4631      	mov	r1, r6
 801c248:	4602      	mov	r2, r0
 801c24a:	4628      	mov	r0, r5
 801c24c:	f001 fe2f 	bl	801deae <_lv_obj_style_apply_color_filter>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
 801c250:	8120      	strh	r0, [r4, #8]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 801c252:	2e00      	cmp	r6, #0
 801c254:	d0cb      	beq.n	801c1ee <lv_obj_init_draw_img_dsc+0x28>
 801c256:	4631      	mov	r1, r6
 801c258:	4628      	mov	r0, r5
 801c25a:	f7ff fdfb 	bl	801be54 <lv_obj_get_style_blend_mode>
 801c25e:	7b23      	ldrb	r3, [r4, #12]
 801c260:	f360 0303 	bfi	r3, r0, #0, #4
 801c264:	7323      	strb	r3, [r4, #12]
 801c266:	e7c2      	b.n	801c1ee <lv_obj_init_draw_img_dsc+0x28>

0801c268 <lv_obj_init_draw_line_dsc>:

void lv_obj_init_draw_line_dsc(lv_obj_t * obj, uint32_t part, lv_draw_line_dsc_t * draw_dsc)
{
 801c268:	b570      	push	{r4, r5, r6, lr}
 801c26a:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_OPA);
 801c26c:	224e      	movs	r2, #78	; 0x4e
 801c26e:	4606      	mov	r6, r0
 801c270:	460d      	mov	r5, r1
 801c272:	f001 fc05 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c276:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 801c278:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 801c27a:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 801c27c:	d908      	bls.n	801c290 <lv_obj_init_draw_line_dsc+0x28>

    if(part != LV_PART_MAIN) {
 801c27e:	b17d      	cbz	r5, 801c2a0 <lv_obj_init_draw_line_dsc+0x38>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 801c280:	4629      	mov	r1, r5
 801c282:	4630      	mov	r0, r6
 801c284:	f7ff fde0 	bl	801be48 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 801c288:	2802      	cmp	r0, #2
 801c28a:	d802      	bhi.n	801c292 <lv_obj_init_draw_line_dsc+0x2a>
            draw_dsc->opa = LV_OPA_TRANSP;
 801c28c:	2300      	movs	r3, #0
 801c28e:	7223      	strb	r3, [r4, #8]
    draw_dsc->round_end = draw_dsc->round_start;

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 801c290:	bd70      	pop	{r4, r5, r6, pc}
        if(opa < LV_OPA_MAX) {
 801c292:	28fc      	cmp	r0, #252	; 0xfc
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 801c294:	bf9f      	itttt	ls
 801c296:	7a23      	ldrbls	r3, [r4, #8]
 801c298:	fb13 f300 	smulbbls	r3, r3, r0
 801c29c:	121b      	asrls	r3, r3, #8
 801c29e:	7223      	strbls	r3, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 801c2a0:	2249      	movs	r2, #73	; 0x49
 801c2a2:	4629      	mov	r1, r5
 801c2a4:	4630      	mov	r0, r6
 801c2a6:	f001 fbeb 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c2aa:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 801c2ac:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 801c2ae:	2800      	cmp	r0, #0
 801c2b0:	d0ee      	beq.n	801c290 <lv_obj_init_draw_line_dsc+0x28>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_COLOR));
 801c2b2:	224d      	movs	r2, #77	; 0x4d
 801c2b4:	4629      	mov	r1, r5
 801c2b6:	4630      	mov	r0, r6
 801c2b8:	f001 fbe2 	bl	801da80 <lv_obj_get_style_prop>
 801c2bc:	4629      	mov	r1, r5
 801c2be:	4602      	mov	r2, r0
 801c2c0:	4630      	mov	r0, r6
 801c2c2:	f001 fdf4 	bl	801deae <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_WIDTH);
 801c2c6:	224a      	movs	r2, #74	; 0x4a
    draw_dsc->color = lv_obj_get_style_line_color_filtered(obj, part);
 801c2c8:	8020      	strh	r0, [r4, #0]
 801c2ca:	4629      	mov	r1, r5
 801c2cc:	4630      	mov	r0, r6
 801c2ce:	f001 fbd7 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c2d2:	b200      	sxth	r0, r0
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 801c2d4:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
 801c2d6:	b128      	cbz	r0, 801c2e4 <lv_obj_init_draw_line_dsc+0x7c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_GAP);
 801c2d8:	224b      	movs	r2, #75	; 0x4b
 801c2da:	4629      	mov	r1, r5
 801c2dc:	4630      	mov	r0, r6
 801c2de:	f001 fbcf 	bl	801da80 <lv_obj_get_style_prop>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 801c2e2:	80e0      	strh	r0, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_ROUNDED);
 801c2e4:	224c      	movs	r2, #76	; 0x4c
 801c2e6:	4629      	mov	r1, r5
 801c2e8:	4630      	mov	r0, r6
 801c2ea:	f001 fbc9 	bl	801da80 <lv_obj_get_style_prop>
    return (bool)v.num;
 801c2ee:	3800      	subs	r0, #0
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 801c2f0:	7a63      	ldrb	r3, [r4, #9]
 801c2f2:	bf18      	it	ne
 801c2f4:	2001      	movne	r0, #1
 801c2f6:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
 801c2fa:	f360 03c3 	bfi	r3, r0, #3, #1
 801c2fe:	7263      	strb	r3, [r4, #9]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 801c300:	2d00      	cmp	r5, #0
 801c302:	d0c5      	beq.n	801c290 <lv_obj_init_draw_line_dsc+0x28>
 801c304:	4629      	mov	r1, r5
 801c306:	4630      	mov	r0, r6
 801c308:	f7ff fda4 	bl	801be54 <lv_obj_get_style_blend_mode>
 801c30c:	7a63      	ldrb	r3, [r4, #9]
 801c30e:	f360 0301 	bfi	r3, r0, #0, #2
 801c312:	7263      	strb	r3, [r4, #9]
 801c314:	e7bc      	b.n	801c290 <lv_obj_init_draw_line_dsc+0x28>

0801c316 <lv_obj_init_draw_arc_dsc>:

void lv_obj_init_draw_arc_dsc(lv_obj_t * obj, uint32_t part, lv_draw_arc_dsc_t * draw_dsc)
{
 801c316:	b570      	push	{r4, r5, r6, lr}
 801c318:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 801c31a:	2250      	movs	r2, #80	; 0x50
 801c31c:	4606      	mov	r6, r0
 801c31e:	460d      	mov	r5, r1
 801c320:	f001 fbae 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c324:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_arc_width(obj, part);
 801c326:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 801c328:	b188      	cbz	r0, 801c34e <lv_obj_init_draw_arc_dsc+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_OPA);
 801c32a:	2253      	movs	r2, #83	; 0x53
 801c32c:	4629      	mov	r1, r5
 801c32e:	4630      	mov	r0, r6
 801c330:	f001 fba6 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c334:	b2c0      	uxtb	r0, r0

    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 801c336:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
 801c338:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 801c33a:	d908      	bls.n	801c34e <lv_obj_init_draw_arc_dsc+0x38>

    if(part != LV_PART_MAIN) {
 801c33c:	b17d      	cbz	r5, 801c35e <lv_obj_init_draw_arc_dsc+0x48>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 801c33e:	4629      	mov	r1, r5
 801c340:	4630      	mov	r0, r6
 801c342:	f7ff fd81 	bl	801be48 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 801c346:	2802      	cmp	r0, #2
 801c348:	d802      	bhi.n	801c350 <lv_obj_init_draw_arc_dsc+0x3a>
            draw_dsc->opa = LV_OPA_TRANSP;
 801c34a:	2300      	movs	r3, #0
 801c34c:	7323      	strb	r3, [r4, #12]
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 801c34e:	bd70      	pop	{r4, r5, r6, pc}
        if(opa < LV_OPA_MAX) {
 801c350:	28fc      	cmp	r0, #252	; 0xfc
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 801c352:	bf9f      	itttt	ls
 801c354:	7b23      	ldrbls	r3, [r4, #12]
 801c356:	fb13 f300 	smulbbls	r3, r3, r0
 801c35a:	121b      	asrls	r3, r3, #8
 801c35c:	7323      	strbls	r3, [r4, #12]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_COLOR));
 801c35e:	2252      	movs	r2, #82	; 0x52
 801c360:	4629      	mov	r1, r5
 801c362:	4630      	mov	r0, r6
 801c364:	f001 fb8c 	bl	801da80 <lv_obj_get_style_prop>
 801c368:	4629      	mov	r1, r5
 801c36a:	4602      	mov	r2, r0
 801c36c:	4630      	mov	r0, r6
 801c36e:	f001 fd9e 	bl	801deae <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_IMG_SRC);
 801c372:	2254      	movs	r2, #84	; 0x54
 801c374:	4629      	mov	r1, r5
    draw_dsc->color = lv_obj_get_style_arc_color_filtered(obj, part);
 801c376:	8020      	strh	r0, [r4, #0]
 801c378:	4630      	mov	r0, r6
 801c37a:	f001 fb81 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 801c37e:	2251      	movs	r2, #81	; 0x51
    draw_dsc->img_src = lv_obj_get_style_arc_img_src(obj, part);
 801c380:	60a0      	str	r0, [r4, #8]
 801c382:	4629      	mov	r1, r5
 801c384:	4630      	mov	r0, r6
 801c386:	f001 fb7b 	bl	801da80 <lv_obj_get_style_prop>
    return (bool)v.num;
 801c38a:	3800      	subs	r0, #0
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 801c38c:	7b63      	ldrb	r3, [r4, #13]
 801c38e:	bf18      	it	ne
 801c390:	2001      	movne	r0, #1
 801c392:	f360 0382 	bfi	r3, r0, #2, #1
 801c396:	7363      	strb	r3, [r4, #13]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 801c398:	2d00      	cmp	r5, #0
 801c39a:	d0d8      	beq.n	801c34e <lv_obj_init_draw_arc_dsc+0x38>
 801c39c:	4629      	mov	r1, r5
 801c39e:	4630      	mov	r0, r6
 801c3a0:	f7ff fd58 	bl	801be54 <lv_obj_get_style_blend_mode>
 801c3a4:	7b63      	ldrb	r3, [r4, #13]
 801c3a6:	f360 0301 	bfi	r3, r0, #0, #2
 801c3aa:	7363      	strb	r3, [r4, #13]
 801c3ac:	e7cf      	b.n	801c34e <lv_obj_init_draw_arc_dsc+0x38>

0801c3ae <lv_obj_calculate_ext_draw_size>:

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 801c3ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 801c3b0:	2240      	movs	r2, #64	; 0x40
 801c3b2:	4605      	mov	r5, r0
 801c3b4:	460e      	mov	r6, r1
 801c3b6:	f001 fb63 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c3ba:	b207      	sxth	r7, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
 801c3bc:	bb7f      	cbnz	r7, 801c41e <lv_obj_calculate_ext_draw_size+0x70>
    lv_coord_t s = 0;
 801c3be:	2400      	movs	r4, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 801c3c0:	2235      	movs	r2, #53	; 0x35
 801c3c2:	4631      	mov	r1, r6
 801c3c4:	4628      	mov	r0, r5
 801c3c6:	f001 fb5b 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c3ca:	b207      	sxth	r7, r0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
 801c3cc:	b197      	cbz	r7, 801c3f4 <lv_obj_calculate_ext_draw_size+0x46>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 801c3ce:	2237      	movs	r2, #55	; 0x37
 801c3d0:	4631      	mov	r1, r6
 801c3d2:	4628      	mov	r0, r5
 801c3d4:	f001 fb54 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c3d8:	b2c0      	uxtb	r0, r0
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
        if(outline_opa > LV_OPA_MIN) {
 801c3da:	2802      	cmp	r0, #2
 801c3dc:	d90a      	bls.n	801c3f4 <lv_obj_calculate_ext_draw_size+0x46>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 801c3de:	2238      	movs	r2, #56	; 0x38
 801c3e0:	4631      	mov	r1, r6
 801c3e2:	4628      	mov	r0, r5
 801c3e4:	f001 fb4c 	bl	801da80 <lv_obj_get_style_prop>
            lv_coord_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
            s = LV_MAX(s, outline_pad + outline_width);
 801c3e8:	fa07 f080 	sxtah	r0, r7, r0
 801c3ec:	42a0      	cmp	r0, r4
 801c3ee:	bfb8      	it	lt
 801c3f0:	4620      	movlt	r0, r4
 801c3f2:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801c3f4:	4631      	mov	r1, r6
 801c3f6:	2268      	movs	r2, #104	; 0x68
 801c3f8:	4628      	mov	r0, r5
 801c3fa:	f001 fb41 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801c3fe:	2269      	movs	r2, #105	; 0x69
    return (lv_coord_t)v.num;
 801c400:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801c402:	4631      	mov	r1, r6
 801c404:	4628      	mov	r0, r5
 801c406:	f001 fb3b 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c40a:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
 801c40c:	42b8      	cmp	r0, r7
 801c40e:	bfb8      	it	lt
 801c410:	4638      	movlt	r0, r7
    if(wh > 0) s += wh;
 801c412:	2800      	cmp	r0, #0
 801c414:	bfc4      	itt	gt
 801c416:	1900      	addgt	r0, r0, r4
 801c418:	b204      	sxthgt	r4, r0

    return s;
}
 801c41a:	4620      	mov	r0, r4
 801c41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 801c41e:	2245      	movs	r2, #69	; 0x45
 801c420:	4631      	mov	r1, r6
 801c422:	4628      	mov	r0, r5
 801c424:	f001 fb2c 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c428:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
 801c42a:	2802      	cmp	r0, #2
 801c42c:	d9c7      	bls.n	801c3be <lv_obj_calculate_ext_draw_size+0x10>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 801c42e:	2243      	movs	r2, #67	; 0x43
 801c430:	4631      	mov	r1, r6
 801c432:	4628      	mov	r0, r5
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 801c434:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801c438:	f001 fb22 	bl	801da80 <lv_obj_get_style_prop>
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 801c43c:	1c44      	adds	r4, r0, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 801c43e:	2241      	movs	r2, #65	; 0x41
 801c440:	4631      	mov	r1, r6
 801c442:	4628      	mov	r0, r5
 801c444:	eb04 0467 	add.w	r4, r4, r7, asr #1
 801c448:	f001 fb1a 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 801c44c:	2242      	movs	r2, #66	; 0x42
    return (lv_coord_t)v.num;
 801c44e:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 801c450:	4631      	mov	r1, r6
 801c452:	4628      	mov	r0, r5
 801c454:	b2a4      	uxth	r4, r4
 801c456:	f001 fb13 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c45a:	b200      	sxth	r0, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 801c45c:	2800      	cmp	r0, #0
 801c45e:	bfb8      	it	lt
 801c460:	4240      	neglt	r0, r0
 801c462:	2f00      	cmp	r7, #0
 801c464:	bfb8      	it	lt
 801c466:	427f      	neglt	r7, r7
 801c468:	b280      	uxth	r0, r0
 801c46a:	b2bf      	uxth	r7, r7
 801c46c:	42b8      	cmp	r0, r7
 801c46e:	bf2c      	ite	cs
 801c470:	1824      	addcs	r4, r4, r0
 801c472:	19e4      	addcc	r4, r4, r7
            s = LV_MAX(s, sh_width);
 801c474:	b224      	sxth	r4, r4
 801c476:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801c47a:	e7a1      	b.n	801c3c0 <lv_obj_calculate_ext_draw_size+0x12>

0801c47c <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 801c47c:	b538      	push	{r3, r4, r5, lr}
 801c47e:	4604      	mov	r4, r0
 801c480:	460d      	mov	r5, r1
    memset(dst, 0x00, len);
 801c482:	2248      	movs	r2, #72	; 0x48
 801c484:	2100      	movs	r1, #0
 801c486:	f7fe f94b 	bl	801a720 <memset>
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
    dsc->draw_ctx = draw_ctx;
 801c48a:	6025      	str	r5, [r4, #0]
}
 801c48c:	bd38      	pop	{r3, r4, r5, pc}

0801c48e <_lv_obj_get_ext_draw_size>:
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 801c48e:	6880      	ldr	r0, [r0, #8]
 801c490:	b108      	cbz	r0, 801c496 <_lv_obj_get_ext_draw_size+0x8>
 801c492:	f9b0 0016 	ldrsh.w	r0, [r0, #22]
    else return 0;
}
 801c496:	4770      	bx	lr

0801c498 <lv_obj_refresh_ext_draw_size>:
{
 801c498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c49a:	4604      	mov	r4, r0
    lv_coord_t s_new = 0;
 801c49c:	2300      	movs	r3, #0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 801c49e:	f7ff fff6 	bl	801c48e <_lv_obj_get_ext_draw_size>
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 801c4a2:	f10d 0206 	add.w	r2, sp, #6
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 801c4a6:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 801c4a8:	2113      	movs	r1, #19
 801c4aa:	4620      	mov	r0, r4
    lv_coord_t s_new = 0;
 801c4ac:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 801c4b0:	f7e8 f914 	bl	80046dc <lv_event_send>
    if(s_new != s_old) lv_obj_invalidate(obj);
 801c4b4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801c4b8:	42ab      	cmp	r3, r5
 801c4ba:	d002      	beq.n	801c4c2 <lv_obj_refresh_ext_draw_size+0x2a>
 801c4bc:	4620      	mov	r0, r4
 801c4be:	f000 fbb9 	bl	801cc34 <lv_obj_invalidate>
    if(obj->spec_attr) {
 801c4c2:	68a2      	ldr	r2, [r4, #8]
        obj->spec_attr->ext_draw_size = s_new;
 801c4c4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    if(obj->spec_attr) {
 801c4c8:	b14a      	cbz	r2, 801c4de <lv_obj_refresh_ext_draw_size+0x46>
        obj->spec_attr->ext_draw_size = s_new;
 801c4ca:	82d3      	strh	r3, [r2, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
 801c4cc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801c4d0:	42ab      	cmp	r3, r5
 801c4d2:	d002      	beq.n	801c4da <lv_obj_refresh_ext_draw_size+0x42>
 801c4d4:	4620      	mov	r0, r4
 801c4d6:	f000 fbad 	bl	801cc34 <lv_obj_invalidate>
}
 801c4da:	b003      	add	sp, #12
 801c4dc:	bd30      	pop	{r4, r5, pc}
    else if(s_new != 0) {
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d0f4      	beq.n	801c4cc <lv_obj_refresh_ext_draw_size+0x34>
        lv_obj_allocate_spec_attr(obj);
 801c4e2:	4620      	mov	r0, r4
 801c4e4:	f7e8 fc48 	bl	8004d78 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 801c4e8:	68a3      	ldr	r3, [r4, #8]
 801c4ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801c4ee:	82da      	strh	r2, [r3, #22]
 801c4f0:	e7ec      	b.n	801c4cc <lv_obj_refresh_ext_draw_size+0x34>

0801c4f2 <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 801c4f2:	6880      	ldr	r0, [r0, #8]
 801c4f4:	b108      	cbz	r0, 801c4fa <_lv_obj_get_layer_type+0x8>
 801c4f6:	7e80      	ldrb	r0, [r0, #26]
 801c4f8:	0980      	lsrs	r0, r0, #6
    else return LV_LAYER_TYPE_NONE;
}
 801c4fa:	4770      	bx	lr

0801c4fc <lv_obj_get_style_base_dir.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801c4fc:	2216      	movs	r2, #22
 801c4fe:	2100      	movs	r1, #0
static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
 801c500:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801c502:	f001 fabd 	bl	801da80 <lv_obj_get_style_prop>
}
 801c506:	b2c0      	uxtb	r0, r0
 801c508:	bd08      	pop	{r3, pc}

0801c50a <lv_obj_get_style_border_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c50a:	2232      	movs	r2, #50	; 0x32
 801c50c:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
 801c50e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c510:	f001 fab6 	bl	801da80 <lv_obj_get_style_prop>
}
 801c514:	b200      	sxth	r0, r0
 801c516:	bd08      	pop	{r3, pc}

0801c518 <lv_obj_get_style_pad_right.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801c518:	2213      	movs	r2, #19
 801c51a:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
 801c51c:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801c51e:	f001 faaf 	bl	801da80 <lv_obj_get_style_prop>
}
 801c522:	b200      	sxth	r0, r0
 801c524:	bd08      	pop	{r3, pc}

0801c526 <lv_obj_get_style_pad_left.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c526:	2212      	movs	r2, #18
 801c528:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
 801c52a:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c52c:	f001 faa8 	bl	801da80 <lv_obj_get_style_prop>
}
 801c530:	b200      	sxth	r0, r0
 801c532:	bd08      	pop	{r3, pc}

0801c534 <lv_obj_get_style_pad_bottom.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801c534:	2211      	movs	r2, #17
 801c536:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_bottom(const struct _lv_obj_t * obj, uint32_t part)
 801c538:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801c53a:	f001 faa1 	bl	801da80 <lv_obj_get_style_prop>
}
 801c53e:	b200      	sxth	r0, r0
 801c540:	bd08      	pop	{r3, pc}

0801c542 <lv_obj_get_style_pad_top.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c542:	2210      	movs	r2, #16
 801c544:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
 801c546:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c548:	f001 fa9a 	bl	801da80 <lv_obj_get_style_prop>
}
 801c54c:	b200      	sxth	r0, r0
 801c54e:	bd08      	pop	{r3, pc}

0801c550 <transform_point>:

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 801c550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c554:	4604      	mov	r4, r0
 801c556:	460f      	mov	r7, r1
 801c558:	4691      	mov	r9, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801c55a:	2100      	movs	r1, #0
 801c55c:	226d      	movs	r2, #109	; 0x6d
 801c55e:	f001 fa8f 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801c562:	226c      	movs	r2, #108	; 0x6c
    return (lv_coord_t)v.num;
 801c564:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801c568:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801c56a:	2100      	movs	r1, #0
 801c56c:	4620      	mov	r0, r4
 801c56e:	f001 fa87 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c572:	b205      	sxth	r5, r0
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 801c574:	f1b8 0f00 	cmp.w	r8, #0
 801c578:	d102      	bne.n	801c580 <transform_point+0x30>
 801c57a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801c57e:	d063      	beq.n	801c648 <transform_point+0xf8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 801c580:	226e      	movs	r2, #110	; 0x6e
 801c582:	2100      	movs	r1, #0
 801c584:	4620      	mov	r0, r4
 801c586:	f001 fa7b 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 801c58a:	226f      	movs	r2, #111	; 0x6f

    lv_point_t pivot = {
 801c58c:	f8ad 0004 	strh.w	r0, [sp, #4]
 801c590:	2100      	movs	r1, #0
 801c592:	4620      	mov	r0, r4
 801c594:	f001 fa74 	bl	801da80 <lv_obj_get_style_prop>
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 801c598:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
    return (lv_coord_t)v.num;
 801c59c:	b200      	sxth	r0, r0
 801c59e:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
    lv_point_t pivot = {
 801c5a2:	f8ad 0006 	strh.w	r0, [sp, #6]
    if(LV_COORD_IS_PCT(pivot.x)) {
 801c5a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c5aa:	d115      	bne.n	801c5d8 <transform_point+0x88>
 801c5ac:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 801c5b0:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 801c5b4:	dc10      	bgt.n	801c5d8 <transform_point+0x88>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801c5b6:	8b23      	ldrh	r3, [r4, #24]
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 801c5b8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 801c5bc:	8aa1      	ldrh	r1, [r4, #20]
 801c5be:	f103 0301 	add.w	r3, r3, #1
 801c5c2:	bfc8      	it	gt
 801c5c4:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 801c5c8:	1a5b      	subs	r3, r3, r1
 801c5ca:	b21b      	sxth	r3, r3
 801c5cc:	4353      	muls	r3, r2
 801c5ce:	2264      	movs	r2, #100	; 0x64
 801c5d0:	fb93 f3f2 	sdiv	r3, r3, r2
 801c5d4:	f8ad 3004 	strh.w	r3, [sp, #4]
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 801c5d8:	f400 43c0 	and.w	r3, r0, #24576	; 0x6000
 801c5dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c5e0:	d115      	bne.n	801c60e <transform_point+0xbe>
 801c5e2:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 801c5e6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 801c5ea:	dc10      	bgt.n	801c60e <transform_point+0xbe>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801c5ec:	8b63      	ldrh	r3, [r4, #26]
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 801c5ee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801c5f2:	8ae2      	ldrh	r2, [r4, #22]
 801c5f4:	f103 0301 	add.w	r3, r3, #1
 801c5f8:	bfc8      	it	gt
 801c5fa:	f5c0 707a 	rsbgt	r0, r0, #1000	; 0x3e8
 801c5fe:	1a9b      	subs	r3, r3, r2
 801c600:	2264      	movs	r2, #100	; 0x64
 801c602:	b21b      	sxth	r3, r3
 801c604:	4343      	muls	r3, r0
 801c606:	fb93 f3f2 	sdiv	r3, r3, r2
 801c60a:	f8ad 3006 	strh.w	r3, [sp, #6]
    }

    pivot.x = obj->coords.x1 + pivot.x;
 801c60e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801c612:	8aa3      	ldrh	r3, [r4, #20]
 801c614:	4413      	add	r3, r2
    pivot.y = obj->coords.y1 + pivot.y;
 801c616:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    pivot.x = obj->coords.x1 + pivot.x;
 801c61a:	f8ad 3004 	strh.w	r3, [sp, #4]
    pivot.y = obj->coords.y1 + pivot.y;
 801c61e:	8ae3      	ldrh	r3, [r4, #22]
 801c620:	4413      	add	r3, r2
 801c622:	f8ad 3006 	strh.w	r3, [sp, #6]

    if(inv) {
 801c626:	f1b9 0f00 	cmp.w	r9, #0
 801c62a:	d007      	beq.n	801c63c <transform_point+0xec>
        angle = -angle;
        zoom = (256 * 256) / zoom;
 801c62c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
        angle = -angle;
 801c630:	4276      	negs	r6, r6
        zoom = (256 * 256) / zoom;
 801c632:	fb93 f3f5 	sdiv	r3, r3, r5
        angle = -angle;
 801c636:	fa0f f886 	sxth.w	r8, r6
        zoom = (256 * 256) / zoom;
 801c63a:	b21d      	sxth	r5, r3
    }

    lv_point_transform(p, angle, zoom, &pivot);
 801c63c:	ab01      	add	r3, sp, #4
 801c63e:	462a      	mov	r2, r5
 801c640:	4641      	mov	r1, r8
 801c642:	4638      	mov	r0, r7
 801c644:	f7f5 ff02 	bl	801244c <lv_point_transform>
}
 801c648:	b003      	add	sp, #12
 801c64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801c64e <lv_obj_set_x>:
{
 801c64e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 801c650:	2300      	movs	r3, #0
{
 801c652:	460c      	mov	r4, r1
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 801c654:	aa01      	add	r2, sp, #4
 801c656:	2107      	movs	r1, #7
{
 801c658:	4605      	mov	r5, r0
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 801c65a:	f001 fbde 	bl	801de1a <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 801c65e:	2801      	cmp	r0, #1
 801c660:	d104      	bne.n	801c66c <lv_obj_set_x+0x1e>
 801c662:	9b01      	ldr	r3, [sp, #4]
 801c664:	42a3      	cmp	r3, r4
 801c666:	d103      	bne.n	801c670 <lv_obj_set_x+0x22>
}
 801c668:	b003      	add	sp, #12
 801c66a:	bd30      	pop	{r4, r5, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 801c66c:	2800      	cmp	r0, #0
 801c66e:	d1fb      	bne.n	801c668 <lv_obj_set_x+0x1a>
        lv_obj_set_style_x(obj, x, 0);
 801c670:	2200      	movs	r2, #0
 801c672:	4621      	mov	r1, r4
 801c674:	4628      	mov	r0, r5
 801c676:	f001 fd5c 	bl	801e132 <lv_obj_set_style_x>
}
 801c67a:	e7f5      	b.n	801c668 <lv_obj_set_x+0x1a>

0801c67c <lv_obj_set_y>:
{
 801c67c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 801c67e:	2300      	movs	r3, #0
{
 801c680:	460c      	mov	r4, r1
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 801c682:	aa01      	add	r2, sp, #4
 801c684:	2108      	movs	r1, #8
{
 801c686:	4605      	mov	r5, r0
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 801c688:	f001 fbc7 	bl	801de1a <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 801c68c:	2801      	cmp	r0, #1
 801c68e:	d104      	bne.n	801c69a <lv_obj_set_y+0x1e>
 801c690:	9b01      	ldr	r3, [sp, #4]
 801c692:	42a3      	cmp	r3, r4
 801c694:	d103      	bne.n	801c69e <lv_obj_set_y+0x22>
}
 801c696:	b003      	add	sp, #12
 801c698:	bd30      	pop	{r4, r5, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 801c69a:	2800      	cmp	r0, #0
 801c69c:	d1fb      	bne.n	801c696 <lv_obj_set_y+0x1a>
        lv_obj_set_style_y(obj, y, 0);
 801c69e:	2200      	movs	r2, #0
 801c6a0:	4621      	mov	r1, r4
 801c6a2:	4628      	mov	r0, r5
 801c6a4:	f001 fd4a 	bl	801e13c <lv_obj_set_style_y>
}
 801c6a8:	e7f5      	b.n	801c696 <lv_obj_set_y+0x1a>

0801c6aa <lv_obj_set_pos>:
{
 801c6aa:	b538      	push	{r3, r4, r5, lr}
 801c6ac:	4604      	mov	r4, r0
 801c6ae:	4615      	mov	r5, r2
    lv_obj_set_x(obj, x);
 801c6b0:	f7ff ffcd 	bl	801c64e <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 801c6b4:	4629      	mov	r1, r5
 801c6b6:	4620      	mov	r0, r4
}
 801c6b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_y(obj, y);
 801c6bc:	f7ff bfde 	b.w	801c67c <lv_obj_set_y>

0801c6c0 <lv_obj_set_width>:
{
 801c6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 801c6c2:	2300      	movs	r3, #0
{
 801c6c4:	460c      	mov	r4, r1
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 801c6c6:	aa01      	add	r2, sp, #4
 801c6c8:	2101      	movs	r1, #1
{
 801c6ca:	4605      	mov	r5, r0
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 801c6cc:	f001 fba5 	bl	801de1a <lv_obj_get_local_style_prop>
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 801c6d0:	2801      	cmp	r0, #1
 801c6d2:	d104      	bne.n	801c6de <lv_obj_set_width+0x1e>
 801c6d4:	9b01      	ldr	r3, [sp, #4]
 801c6d6:	42a3      	cmp	r3, r4
 801c6d8:	d103      	bne.n	801c6e2 <lv_obj_set_width+0x22>
}
 801c6da:	b003      	add	sp, #12
 801c6dc:	bd30      	pop	{r4, r5, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 801c6de:	2800      	cmp	r0, #0
 801c6e0:	d1fb      	bne.n	801c6da <lv_obj_set_width+0x1a>
        lv_obj_set_style_width(obj, w, 0);
 801c6e2:	2200      	movs	r2, #0
 801c6e4:	4621      	mov	r1, r4
 801c6e6:	4628      	mov	r0, r5
 801c6e8:	f001 fd14 	bl	801e114 <lv_obj_set_style_width>
}
 801c6ec:	e7f5      	b.n	801c6da <lv_obj_set_width+0x1a>

0801c6ee <lv_obj_set_height>:
{
 801c6ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 801c6f0:	2300      	movs	r3, #0
{
 801c6f2:	460c      	mov	r4, r1
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 801c6f4:	aa01      	add	r2, sp, #4
 801c6f6:	2104      	movs	r1, #4
{
 801c6f8:	4605      	mov	r5, r0
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 801c6fa:	f001 fb8e 	bl	801de1a <lv_obj_get_local_style_prop>
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 801c6fe:	2801      	cmp	r0, #1
 801c700:	d104      	bne.n	801c70c <lv_obj_set_height+0x1e>
 801c702:	9b01      	ldr	r3, [sp, #4]
 801c704:	42a3      	cmp	r3, r4
 801c706:	d103      	bne.n	801c710 <lv_obj_set_height+0x22>
}
 801c708:	b003      	add	sp, #12
 801c70a:	bd30      	pop	{r4, r5, pc}
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 801c70c:	2800      	cmp	r0, #0
 801c70e:	d1fb      	bne.n	801c708 <lv_obj_set_height+0x1a>
        lv_obj_set_style_height(obj, h, 0);
 801c710:	2200      	movs	r2, #0
 801c712:	4621      	mov	r1, r4
 801c714:	4628      	mov	r0, r5
 801c716:	f001 fd07 	bl	801e128 <lv_obj_set_style_height>
}
 801c71a:	e7f5      	b.n	801c708 <lv_obj_set_height+0x1a>

0801c71c <lv_obj_set_size>:
{
 801c71c:	b538      	push	{r3, r4, r5, lr}
 801c71e:	4604      	mov	r4, r0
 801c720:	4615      	mov	r5, r2
    lv_obj_set_width(obj, w);
 801c722:	f7ff ffcd 	bl	801c6c0 <lv_obj_set_width>
    lv_obj_set_height(obj, h);
 801c726:	4629      	mov	r1, r5
 801c728:	4620      	mov	r0, r4
}
 801c72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_height(obj, h);
 801c72e:	f7ff bfde 	b.w	801c6ee <lv_obj_set_height>

0801c732 <lv_obj_mark_layout_as_dirty>:
{
 801c732:	b508      	push	{r3, lr}
    obj->layout_inv = 1;
 801c734:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 801c738:	f042 0201 	orr.w	r2, r2, #1
 801c73c:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    lv_obj_t * scr = lv_obj_get_screen(obj);
 801c740:	f001 fd1a 	bl	801e178 <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 801c744:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 801c748:	f042 0202 	orr.w	r2, r2, #2
 801c74c:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    lv_disp_t * disp = lv_obj_get_disp(scr);
 801c750:	f7ea f88c 	bl	800686c <lv_obj_get_disp>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 801c754:	6840      	ldr	r0, [r0, #4]
 801c756:	b118      	cbz	r0, 801c760 <lv_obj_mark_layout_as_dirty+0x2e>
}
 801c758:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 801c75c:	f008 bca4 	b.w	80250a8 <lv_timer_resume>
}
 801c760:	bd08      	pop	{r3, pc}

0801c762 <lv_obj_set_layout>:
{
 801c762:	b510      	push	{r4, lr}
 801c764:	4604      	mov	r4, r0
    lv_obj_set_style_layout(obj, layout, 0);
 801c766:	2200      	movs	r2, #0
 801c768:	b289      	uxth	r1, r1
 801c76a:	f001 fcfb 	bl	801e164 <lv_obj_set_style_layout>
    lv_obj_mark_layout_as_dirty(obj);
 801c76e:	4620      	mov	r0, r4
}
 801c770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_mark_layout_as_dirty(obj);
 801c774:	f7ff bfdd 	b.w	801c732 <lv_obj_mark_layout_as_dirty>

0801c778 <lv_obj_align>:
{
 801c778:	b570      	push	{r4, r5, r6, lr}
 801c77a:	4604      	mov	r4, r0
 801c77c:	4615      	mov	r5, r2
 801c77e:	461e      	mov	r6, r3
    lv_obj_set_style_align(obj, align, 0);
 801c780:	2200      	movs	r2, #0
 801c782:	f001 fce0 	bl	801e146 <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 801c786:	4629      	mov	r1, r5
 801c788:	4632      	mov	r2, r6
 801c78a:	4620      	mov	r0, r4
}
 801c78c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 801c790:	f7ff bf8b 	b.w	801c6aa <lv_obj_set_pos>

0801c794 <lv_obj_get_coords>:
    dest->x1 = src->x1;
 801c794:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 801c798:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 801c79a:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 801c79e:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 801c7a0:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 801c7a4:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 801c7a6:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 801c7aa:	80cb      	strh	r3, [r1, #6]
}
 801c7ac:	4770      	bx	lr

0801c7ae <lv_obj_get_x>:
{
 801c7ae:	b538      	push	{r3, r4, r5, lr}
 801c7b0:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801c7b2:	f001 fce9 	bl	801e188 <lv_obj_get_parent>
    if(parent) {
 801c7b6:	4605      	mov	r5, r0
 801c7b8:	b190      	cbz	r0, 801c7e0 <lv_obj_get_x+0x32>
        rel_x  = obj->coords.x1 - parent->coords.x1;
 801c7ba:	8a83      	ldrh	r3, [r0, #20]
 801c7bc:	8aa4      	ldrh	r4, [r4, #20]
 801c7be:	1ae4      	subs	r4, r4, r3
        rel_x += lv_obj_get_scroll_x(parent);
 801c7c0:	f000 fbcb 	bl	801cf5a <lv_obj_get_scroll_x>
        rel_x  = obj->coords.x1 - parent->coords.x1;
 801c7c4:	b2a4      	uxth	r4, r4
        rel_x += lv_obj_get_scroll_x(parent);
 801c7c6:	4404      	add	r4, r0
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 801c7c8:	4628      	mov	r0, r5
 801c7ca:	f7ff feac 	bl	801c526 <lv_obj_get_style_pad_left.constprop.0>
        rel_x += lv_obj_get_scroll_x(parent);
 801c7ce:	b2a4      	uxth	r4, r4
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 801c7d0:	1a24      	subs	r4, r4, r0
        rel_x -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 801c7d2:	4628      	mov	r0, r5
 801c7d4:	f7ff fe99 	bl	801c50a <lv_obj_get_style_border_width.constprop.0>
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 801c7d8:	b2a4      	uxth	r4, r4
        rel_x -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 801c7da:	1a20      	subs	r0, r4, r0
 801c7dc:	b200      	sxth	r0, r0
}
 801c7de:	bd38      	pop	{r3, r4, r5, pc}
        rel_x = obj->coords.x1;
 801c7e0:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801c7e4:	e7fb      	b.n	801c7de <lv_obj_get_x+0x30>

0801c7e6 <lv_obj_get_y>:
{
 801c7e6:	b538      	push	{r3, r4, r5, lr}
 801c7e8:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801c7ea:	f001 fccd 	bl	801e188 <lv_obj_get_parent>
    if(parent) {
 801c7ee:	4605      	mov	r5, r0
 801c7f0:	b190      	cbz	r0, 801c818 <lv_obj_get_y+0x32>
        rel_y = obj->coords.y1 - parent->coords.y1;
 801c7f2:	8ac3      	ldrh	r3, [r0, #22]
 801c7f4:	8ae4      	ldrh	r4, [r4, #22]
 801c7f6:	1ae4      	subs	r4, r4, r3
        rel_y += lv_obj_get_scroll_y(parent);
 801c7f8:	f000 fbb5 	bl	801cf66 <lv_obj_get_scroll_y>
        rel_y = obj->coords.y1 - parent->coords.y1;
 801c7fc:	b2a4      	uxth	r4, r4
        rel_y += lv_obj_get_scroll_y(parent);
 801c7fe:	4404      	add	r4, r0
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 801c800:	4628      	mov	r0, r5
 801c802:	f7ff fe9e 	bl	801c542 <lv_obj_get_style_pad_top.constprop.0>
        rel_y += lv_obj_get_scroll_y(parent);
 801c806:	b2a4      	uxth	r4, r4
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 801c808:	1a24      	subs	r4, r4, r0
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 801c80a:	4628      	mov	r0, r5
 801c80c:	f7ff fe7d 	bl	801c50a <lv_obj_get_style_border_width.constprop.0>
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 801c810:	b2a4      	uxth	r4, r4
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 801c812:	1a20      	subs	r0, r4, r0
 801c814:	b200      	sxth	r0, r0
}
 801c816:	bd38      	pop	{r3, r4, r5, pc}
        rel_y = obj->coords.y1;
 801c818:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 801c81c:	e7fb      	b.n	801c816 <lv_obj_get_y+0x30>

0801c81e <lv_obj_get_y2>:
{
 801c81e:	b510      	push	{r4, lr}
 801c820:	4604      	mov	r4, r0
    return lv_obj_get_y(obj) + lv_obj_get_height(obj);
 801c822:	f7ff ffe0 	bl	801c7e6 <lv_obj_get_y>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801c826:	8b63      	ldrh	r3, [r4, #26]
 801c828:	8ae2      	ldrh	r2, [r4, #22]
 801c82a:	3301      	adds	r3, #1
 801c82c:	1a9b      	subs	r3, r3, r2
 801c82e:	4418      	add	r0, r3
}
 801c830:	b200      	sxth	r0, r0
 801c832:	bd10      	pop	{r4, pc}

0801c834 <lv_obj_get_width>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801c834:	8b03      	ldrh	r3, [r0, #24]
 801c836:	8a82      	ldrh	r2, [r0, #20]
 801c838:	3301      	adds	r3, #1
 801c83a:	1a98      	subs	r0, r3, r2
}
 801c83c:	b200      	sxth	r0, r0
 801c83e:	4770      	bx	lr

0801c840 <lv_obj_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801c840:	8b43      	ldrh	r3, [r0, #26]
 801c842:	8ac2      	ldrh	r2, [r0, #22]
 801c844:	3301      	adds	r3, #1
 801c846:	1a98      	subs	r0, r3, r2
}
 801c848:	b200      	sxth	r0, r0
 801c84a:	4770      	bx	lr

0801c84c <lv_obj_get_content_width>:
{
 801c84c:	b570      	push	{r4, r5, r6, lr}
 801c84e:	4604      	mov	r4, r0
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801c850:	f7ff fe69 	bl	801c526 <lv_obj_get_style_pad_left.constprop.0>
 801c854:	4606      	mov	r6, r0
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801c856:	4620      	mov	r0, r4
 801c858:	f7ff fe5e 	bl	801c518 <lv_obj_get_style_pad_right.constprop.0>
 801c85c:	4605      	mov	r5, r0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 801c85e:	4620      	mov	r0, r4
 801c860:	f7ff fe53 	bl	801c50a <lv_obj_get_style_border_width.constprop.0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801c864:	8b23      	ldrh	r3, [r4, #24]
 801c866:	8aa2      	ldrh	r2, [r4, #20]
 801c868:	3301      	adds	r3, #1
 801c86a:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 801c86c:	1b9b      	subs	r3, r3, r6
 801c86e:	1b5b      	subs	r3, r3, r5
 801c870:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
}
 801c874:	b200      	sxth	r0, r0
 801c876:	bd70      	pop	{r4, r5, r6, pc}

0801c878 <lv_obj_get_content_height>:
{
 801c878:	b570      	push	{r4, r5, r6, lr}
 801c87a:	4604      	mov	r4, r0
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801c87c:	f7ff fe61 	bl	801c542 <lv_obj_get_style_pad_top.constprop.0>
 801c880:	4606      	mov	r6, r0
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 801c882:	4620      	mov	r0, r4
 801c884:	f7ff fe56 	bl	801c534 <lv_obj_get_style_pad_bottom.constprop.0>
 801c888:	4605      	mov	r5, r0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 801c88a:	4620      	mov	r0, r4
 801c88c:	f7ff fe3d 	bl	801c50a <lv_obj_get_style_border_width.constprop.0>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801c890:	8b63      	ldrh	r3, [r4, #26]
 801c892:	8ae2      	ldrh	r2, [r4, #22]
 801c894:	3301      	adds	r3, #1
 801c896:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 801c898:	1b9b      	subs	r3, r3, r6
 801c89a:	1b5b      	subs	r3, r3, r5
 801c89c:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
}
 801c8a0:	b200      	sxth	r0, r0
 801c8a2:	bd70      	pop	{r4, r5, r6, pc}

0801c8a4 <lv_obj_get_content_coords>:
{
 801c8a4:	b538      	push	{r3, r4, r5, lr}
 801c8a6:	4605      	mov	r5, r0
 801c8a8:	460c      	mov	r4, r1
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 801c8aa:	f7ff fe2e 	bl	801c50a <lv_obj_get_style_border_width.constprop.0>
    lv_area_increase(area, -border_width, -border_width);
 801c8ae:	4242      	negs	r2, r0
    dest->x1 = src->x1;
 801c8b0:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 801c8b4:	4620      	mov	r0, r4
 801c8b6:	b212      	sxth	r2, r2
 801c8b8:	8023      	strh	r3, [r4, #0]
    dest->y1 = src->y1;
 801c8ba:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 801c8be:	4611      	mov	r1, r2
 801c8c0:	8063      	strh	r3, [r4, #2]
    dest->x2 = src->x2;
 801c8c2:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 801c8c6:	80a3      	strh	r3, [r4, #4]
    dest->y2 = src->y2;
 801c8c8:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 801c8cc:	80e3      	strh	r3, [r4, #6]
 801c8ce:	f007 fcb0 	bl	8024232 <lv_area_increase>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801c8d2:	4628      	mov	r0, r5
 801c8d4:	f7ff fe27 	bl	801c526 <lv_obj_get_style_pad_left.constprop.0>
 801c8d8:	8823      	ldrh	r3, [r4, #0]
 801c8da:	4418      	add	r0, r3
 801c8dc:	8020      	strh	r0, [r4, #0]
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801c8de:	4628      	mov	r0, r5
 801c8e0:	f7ff fe1a 	bl	801c518 <lv_obj_get_style_pad_right.constprop.0>
 801c8e4:	88a3      	ldrh	r3, [r4, #4]
 801c8e6:	1a1b      	subs	r3, r3, r0
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801c8e8:	4628      	mov	r0, r5
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801c8ea:	80a3      	strh	r3, [r4, #4]
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801c8ec:	f7ff fe29 	bl	801c542 <lv_obj_get_style_pad_top.constprop.0>
 801c8f0:	8863      	ldrh	r3, [r4, #2]
 801c8f2:	4418      	add	r0, r3
 801c8f4:	8060      	strh	r0, [r4, #2]
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 801c8f6:	4628      	mov	r0, r5
 801c8f8:	f7ff fe1c 	bl	801c534 <lv_obj_get_style_pad_bottom.constprop.0>
 801c8fc:	88e3      	ldrh	r3, [r4, #6]
 801c8fe:	1a1b      	subs	r3, r3, r0
 801c900:	80e3      	strh	r3, [r4, #6]
}
 801c902:	bd38      	pop	{r3, r4, r5, pc}

0801c904 <lv_obj_get_self_height>:
    lv_point_t p = {LV_COORD_MIN, 0};
 801c904:	f24e 0301 	movw	r3, #57345	; 0xe001
{
 801c908:	b507      	push	{r0, r1, r2, lr}
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 801c90a:	212c      	movs	r1, #44	; 0x2c
 801c90c:	aa01      	add	r2, sp, #4
    lv_point_t p = {LV_COORD_MIN, 0};
 801c90e:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 801c910:	f7e7 fee4 	bl	80046dc <lv_event_send>
}
 801c914:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 801c918:	b003      	add	sp, #12
 801c91a:	f85d fb04 	ldr.w	pc, [sp], #4

0801c91e <lv_obj_refresh_self_size>:
{
 801c91e:	b538      	push	{r3, r4, r5, lr}
 801c920:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801c922:	2201      	movs	r2, #1
 801c924:	2100      	movs	r1, #0
 801c926:	f001 f8ab 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801c92a:	2204      	movs	r2, #4
    return (lv_coord_t)v.num;
 801c92c:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801c92e:	2100      	movs	r1, #0
 801c930:	4620      	mov	r0, r4
 801c932:	f001 f8a5 	bl	801da80 <lv_obj_get_style_prop>
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 801c936:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 801c93a:	b200      	sxth	r0, r0
 801c93c:	429d      	cmp	r5, r3
 801c93e:	d001      	beq.n	801c944 <lv_obj_refresh_self_size+0x26>
 801c940:	4298      	cmp	r0, r3
 801c942:	d104      	bne.n	801c94e <lv_obj_refresh_self_size+0x30>
    lv_obj_mark_layout_as_dirty(obj);
 801c944:	4620      	mov	r0, r4
 801c946:	f7ff fef4 	bl	801c732 <lv_obj_mark_layout_as_dirty>
    return true;
 801c94a:	2001      	movs	r0, #1
}
 801c94c:	bd38      	pop	{r3, r4, r5, pc}
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 801c94e:	2000      	movs	r0, #0
 801c950:	e7fc      	b.n	801c94c <lv_obj_refresh_self_size+0x2e>

0801c952 <lv_obj_move_children_by>:
{
 801c952:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c956:	460e      	mov	r6, r1
 801c958:	4617      	mov	r7, r2
 801c95a:	4680      	mov	r8, r0
 801c95c:	9301      	str	r3, [sp, #4]
    for(i = 0; i < child_cnt; i++) {
 801c95e:	2500      	movs	r5, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801c960:	f001 fc24 	bl	801e1ac <lv_obj_get_child_cnt>
        child->coords.x1 += x_diff;
 801c964:	fa1f fa86 	uxth.w	sl, r6
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801c968:	4681      	mov	r9, r0
        child->coords.y1 += y_diff;
 801c96a:	fa1f fb87 	uxth.w	fp, r7
    for(i = 0; i < child_cnt; i++) {
 801c96e:	454d      	cmp	r5, r9
 801c970:	d102      	bne.n	801c978 <lv_obj_move_children_by+0x26>
}
 801c972:	b003      	add	sp, #12
 801c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_t * child = obj->spec_attr->children[i];
 801c978:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c97c:	681b      	ldr	r3, [r3, #0]
 801c97e:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 801c982:	9b01      	ldr	r3, [sp, #4]
 801c984:	b99b      	cbnz	r3, 801c9ae <lv_obj_move_children_by+0x5c>
        child->coords.x1 += x_diff;
 801c986:	8aa3      	ldrh	r3, [r4, #20]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 801c988:	463a      	mov	r2, r7
 801c98a:	4631      	mov	r1, r6
 801c98c:	4620      	mov	r0, r4
        child->coords.x1 += x_diff;
 801c98e:	4453      	add	r3, sl
 801c990:	82a3      	strh	r3, [r4, #20]
        child->coords.y1 += y_diff;
 801c992:	8ae3      	ldrh	r3, [r4, #22]
 801c994:	445b      	add	r3, fp
 801c996:	82e3      	strh	r3, [r4, #22]
        child->coords.x2 += x_diff;
 801c998:	8b23      	ldrh	r3, [r4, #24]
 801c99a:	4453      	add	r3, sl
 801c99c:	8323      	strh	r3, [r4, #24]
        child->coords.y2 += y_diff;
 801c99e:	8b63      	ldrh	r3, [r4, #26]
 801c9a0:	445b      	add	r3, fp
 801c9a2:	8363      	strh	r3, [r4, #26]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 801c9a4:	2300      	movs	r3, #0
 801c9a6:	f7ff ffd4 	bl	801c952 <lv_obj_move_children_by>
    for(i = 0; i < child_cnt; i++) {
 801c9aa:	3501      	adds	r5, #1
 801c9ac:	e7df      	b.n	801c96e <lv_obj_move_children_by+0x1c>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 801c9ae:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801c9b2:	4620      	mov	r0, r4
 801c9b4:	f7ff f82a 	bl	801ba0c <lv_obj_has_flag>
 801c9b8:	2800      	cmp	r0, #0
 801c9ba:	d0e4      	beq.n	801c986 <lv_obj_move_children_by+0x34>
 801c9bc:	e7f5      	b.n	801c9aa <lv_obj_move_children_by+0x58>

0801c9be <lv_obj_transform_point>:
{
 801c9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9c2:	4604      	mov	r4, r0
 801c9c4:	460d      	mov	r5, r1
 801c9c6:	4616      	mov	r6, r2
 801c9c8:	461f      	mov	r7, r3
    if(obj) {
 801c9ca:	b324      	cbz	r4, 801ca16 <lv_obj_transform_point+0x58>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 801c9cc:	4620      	mov	r0, r4
 801c9ce:	f7ff fd90 	bl	801c4f2 <_lv_obj_get_layer_type>
 801c9d2:	4680      	mov	r8, r0
        if(inv) {
 801c9d4:	b197      	cbz	r7, 801c9fc <lv_obj_transform_point+0x3e>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 801c9d6:	b13e      	cbz	r6, 801c9e8 <lv_obj_transform_point+0x2a>
 801c9d8:	4620      	mov	r0, r4
 801c9da:	f001 fbd5 	bl	801e188 <lv_obj_get_parent>
 801c9de:	2301      	movs	r3, #1
 801c9e0:	4629      	mov	r1, r5
 801c9e2:	461a      	mov	r2, r3
 801c9e4:	f7ff ffeb 	bl	801c9be <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 801c9e8:	f1b8 0f02 	cmp.w	r8, #2
 801c9ec:	d113      	bne.n	801ca16 <lv_obj_transform_point+0x58>
 801c9ee:	4629      	mov	r1, r5
 801c9f0:	4620      	mov	r0, r4
 801c9f2:	2201      	movs	r2, #1
}
 801c9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            if(do_tranf) transform_point(obj, p, inv);
 801c9f8:	f7ff bdaa 	b.w	801c550 <transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 801c9fc:	2802      	cmp	r0, #2
 801c9fe:	d104      	bne.n	801ca0a <lv_obj_transform_point+0x4c>
 801ca00:	463a      	mov	r2, r7
 801ca02:	4629      	mov	r1, r5
 801ca04:	4620      	mov	r0, r4
 801ca06:	f7ff fda3 	bl	801c550 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 801ca0a:	b126      	cbz	r6, 801ca16 <lv_obj_transform_point+0x58>
 801ca0c:	4620      	mov	r0, r4
 801ca0e:	f001 fbbb 	bl	801e188 <lv_obj_get_parent>
 801ca12:	4604      	mov	r4, r0
 801ca14:	e7d9      	b.n	801c9ca <lv_obj_transform_point+0xc>
}
 801ca16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ca1a <lv_obj_get_transformed_area>:
{
 801ca1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca1c:	460c      	mov	r4, r1
 801ca1e:	b085      	sub	sp, #20
        {area->x1, area->y1},
 801ca20:	f9b1 1000 	ldrsh.w	r1, [r1]
{
 801ca24:	4605      	mov	r5, r0
        {area->x1, area->y1},
 801ca26:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
{
 801ca2a:	4616      	mov	r6, r2
    lv_point_t p[4] = {
 801ca2c:	f8ad 1000 	strh.w	r1, [sp]
{
 801ca30:	461f      	mov	r7, r3
    lv_point_t p[4] = {
 801ca32:	f8ad 1004 	strh.w	r1, [sp, #4]
        {area->x1, area->y2},
 801ca36:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
        {area->x2, area->y1},
 801ca3a:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
    lv_point_t p[4] = {
 801ca3e:	f8ad 1006 	strh.w	r1, [sp, #6]
 801ca42:	f8ad 100e 	strh.w	r1, [sp, #14]
    lv_obj_transform_point(obj, &p[0], recursive, inv);
 801ca46:	4669      	mov	r1, sp
    lv_point_t p[4] = {
 801ca48:	f8ad e002 	strh.w	lr, [sp, #2]
 801ca4c:	f8ad c008 	strh.w	ip, [sp, #8]
 801ca50:	f8ad e00a 	strh.w	lr, [sp, #10]
 801ca54:	f8ad c00c 	strh.w	ip, [sp, #12]
    lv_obj_transform_point(obj, &p[0], recursive, inv);
 801ca58:	f7ff ffb1 	bl	801c9be <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 801ca5c:	463b      	mov	r3, r7
 801ca5e:	4632      	mov	r2, r6
 801ca60:	a901      	add	r1, sp, #4
 801ca62:	4628      	mov	r0, r5
 801ca64:	f7ff ffab 	bl	801c9be <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 801ca68:	463b      	mov	r3, r7
 801ca6a:	4632      	mov	r2, r6
 801ca6c:	a902      	add	r1, sp, #8
 801ca6e:	4628      	mov	r0, r5
 801ca70:	f7ff ffa5 	bl	801c9be <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 801ca74:	463b      	mov	r3, r7
 801ca76:	4632      	mov	r2, r6
 801ca78:	a903      	add	r1, sp, #12
 801ca7a:	4628      	mov	r0, r5
 801ca7c:	f7ff ff9f 	bl	801c9be <lv_obj_transform_point>
    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 801ca80:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801ca84:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
 801ca88:	461a      	mov	r2, r3
 801ca8a:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801ca8e:	42ab      	cmp	r3, r5
 801ca90:	f9bd 1000 	ldrsh.w	r1, [sp]
 801ca94:	bfa8      	it	ge
 801ca96:	462a      	movge	r2, r5
 801ca98:	4282      	cmp	r2, r0
 801ca9a:	bfa8      	it	ge
 801ca9c:	4602      	movge	r2, r0
 801ca9e:	428a      	cmp	r2, r1
 801caa0:	bfa8      	it	ge
 801caa2:	460a      	movge	r2, r1
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 801caa4:	42ab      	cmp	r3, r5
 801caa6:	bfb8      	it	lt
 801caa8:	462b      	movlt	r3, r5
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 801caaa:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 801caae:	8022      	strh	r2, [r4, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 801cab0:	4283      	cmp	r3, r0
 801cab2:	bfb8      	it	lt
 801cab4:	4603      	movlt	r3, r0
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cab6:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 801caba:	428b      	cmp	r3, r1
 801cabc:	bfb8      	it	lt
 801cabe:	460b      	movlt	r3, r1
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cac0:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 801cac4:	80a3      	strh	r3, [r4, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cac6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801caca:	42ab      	cmp	r3, r5
 801cacc:	461a      	mov	r2, r3
 801cace:	bfa8      	it	ge
 801cad0:	462a      	movge	r2, r5
 801cad2:	4282      	cmp	r2, r0
 801cad4:	bfa8      	it	ge
 801cad6:	4602      	movge	r2, r0
 801cad8:	428a      	cmp	r2, r1
 801cada:	bfa8      	it	ge
 801cadc:	460a      	movge	r2, r1
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cade:	42ab      	cmp	r3, r5
 801cae0:	bfb8      	it	lt
 801cae2:	462b      	movlt	r3, r5
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cae4:	8062      	strh	r2, [r4, #2]
    lv_area_increase(area, 5, 5);
 801cae6:	2205      	movs	r2, #5
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 801cae8:	4283      	cmp	r3, r0
 801caea:	bfb8      	it	lt
 801caec:	4603      	movlt	r3, r0
    lv_area_increase(area, 5, 5);
 801caee:	4620      	mov	r0, r4
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 801caf0:	428b      	cmp	r3, r1
 801caf2:	bfb8      	it	lt
 801caf4:	460b      	movlt	r3, r1
    lv_area_increase(area, 5, 5);
 801caf6:	4611      	mov	r1, r2
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 801caf8:	80e3      	strh	r3, [r4, #6]
    lv_area_increase(area, 5, 5);
 801cafa:	f007 fb9a 	bl	8024232 <lv_area_increase>
}
 801cafe:	b005      	add	sp, #20
 801cb00:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cb02 <lv_obj_area_is_visible>:
{
 801cb02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cb04:	460d      	mov	r5, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 801cb06:	2101      	movs	r1, #1
{
 801cb08:	4604      	mov	r4, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 801cb0a:	f7fe ff7f 	bl	801ba0c <lv_obj_has_flag>
 801cb0e:	2800      	cmp	r0, #0
 801cb10:	d14a      	bne.n	801cba8 <lv_obj_area_is_visible+0xa6>
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 801cb12:	4620      	mov	r0, r4
 801cb14:	f001 fb30 	bl	801e178 <lv_obj_get_screen>
 801cb18:	4606      	mov	r6, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 801cb1a:	f7e9 fea7 	bl	800686c <lv_obj_get_disp>
 801cb1e:	4607      	mov	r7, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 801cb20:	f7fe fb16 	bl	801b150 <lv_disp_get_scr_act>
 801cb24:	4286      	cmp	r6, r0
 801cb26:	d130      	bne.n	801cb8a <lv_obj_area_is_visible+0x88>
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 801cb28:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801cb2c:	4620      	mov	r0, r4
 801cb2e:	f7fe ff73 	bl	801ba18 <lv_obj_has_flag_any>
 801cb32:	b9e0      	cbnz	r0, 801cb6e <lv_obj_area_is_visible+0x6c>
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 801cb34:	4620      	mov	r0, r4
 801cb36:	f7ff fcaa 	bl	801c48e <_lv_obj_get_ext_draw_size>
    dest->y1 = src->y1;
 801cb3a:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
        obj_coords.x1 -= ext_size;
 801cb3e:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 801cb40:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    dest->y2 = src->y2;
 801cb44:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
 801cb48:	8aa1      	ldrh	r1, [r4, #20]
        obj_coords.y1 -= ext_size;
 801cb4a:	1a12      	subs	r2, r2, r0
        obj_coords.x2 += ext_size;
 801cb4c:	4403      	add	r3, r0
        obj_coords.x1 -= ext_size;
 801cb4e:	1a09      	subs	r1, r1, r0
        obj_coords.y2 += ext_size;
 801cb50:	4430      	add	r0, r6
        obj_coords.y1 -= ext_size;
 801cb52:	f8ad 2002 	strh.w	r2, [sp, #2]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 801cb56:	466a      	mov	r2, sp
        obj_coords.x1 -= ext_size;
 801cb58:	f8ad 1000 	strh.w	r1, [sp]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 801cb5c:	4629      	mov	r1, r5
        obj_coords.y2 += ext_size;
 801cb5e:	f8ad 0006 	strh.w	r0, [sp, #6]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 801cb62:	4628      	mov	r0, r5
        obj_coords.x2 += ext_size;
 801cb64:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 801cb68:	f007 fb83 	bl	8024272 <_lv_area_intersect>
 801cb6c:	b1e0      	cbz	r0, 801cba8 <lv_obj_area_is_visible+0xa6>
    lv_obj_get_transformed_area(obj, area, true, false);
 801cb6e:	4620      	mov	r0, r4
 801cb70:	2300      	movs	r3, #0
 801cb72:	2201      	movs	r2, #1
 801cb74:	4629      	mov	r1, r5
 801cb76:	f7ff ff50 	bl	801ca1a <lv_obj_get_transformed_area>
    lv_obj_t * par = lv_obj_get_parent(obj);
 801cb7a:	4620      	mov	r0, r4
 801cb7c:	f001 fb04 	bl	801e188 <lv_obj_get_parent>
            lv_area_t par_area = par->coords;
 801cb80:	466e      	mov	r6, sp
    lv_obj_t * par = lv_obj_get_parent(obj);
 801cb82:	4604      	mov	r4, r0
    while(par != NULL) {
 801cb84:	b99c      	cbnz	r4, 801cbae <lv_obj_area_is_visible+0xac>
    return true;
 801cb86:	2001      	movs	r0, #1
 801cb88:	e00f      	b.n	801cbaa <lv_obj_area_is_visible+0xa8>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 801cb8a:	4638      	mov	r0, r7
 801cb8c:	f7fe fae7 	bl	801b15e <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 801cb90:	4286      	cmp	r6, r0
 801cb92:	d0c9      	beq.n	801cb28 <lv_obj_area_is_visible+0x26>
       obj_scr != lv_disp_get_layer_top(disp) &&
 801cb94:	4638      	mov	r0, r7
 801cb96:	f7fe fae9 	bl	801b16c <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 801cb9a:	4286      	cmp	r6, r0
 801cb9c:	d0c4      	beq.n	801cb28 <lv_obj_area_is_visible+0x26>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 801cb9e:	4638      	mov	r0, r7
 801cba0:	f7fe faeb 	bl	801b17a <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 801cba4:	4286      	cmp	r6, r0
 801cba6:	d0bf      	beq.n	801cb28 <lv_obj_area_is_visible+0x26>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 801cba8:	2000      	movs	r0, #0
}
 801cbaa:	b003      	add	sp, #12
 801cbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 801cbae:	2101      	movs	r1, #1
 801cbb0:	4620      	mov	r0, r4
 801cbb2:	f7fe ff2b 	bl	801ba0c <lv_obj_has_flag>
 801cbb6:	2800      	cmp	r0, #0
 801cbb8:	d1f6      	bne.n	801cba8 <lv_obj_area_is_visible+0xa6>
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 801cbba:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801cbbe:	4620      	mov	r0, r4
 801cbc0:	f7fe ff2a 	bl	801ba18 <lv_obj_has_flag_any>
 801cbc4:	4603      	mov	r3, r0
 801cbc6:	b978      	cbnz	r0, 801cbe8 <lv_obj_area_is_visible+0xe6>
            lv_obj_get_transformed_area(par, &par_area, true, false);
 801cbc8:	2201      	movs	r2, #1
            lv_area_t par_area = par->coords;
 801cbca:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
 801cbce:	e886 0003 	stmia.w	r6, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 801cbd2:	4631      	mov	r1, r6
 801cbd4:	4620      	mov	r0, r4
 801cbd6:	f7ff ff20 	bl	801ca1a <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 801cbda:	4632      	mov	r2, r6
 801cbdc:	4629      	mov	r1, r5
 801cbde:	4628      	mov	r0, r5
 801cbe0:	f007 fb47 	bl	8024272 <_lv_area_intersect>
 801cbe4:	2800      	cmp	r0, #0
 801cbe6:	d0df      	beq.n	801cba8 <lv_obj_area_is_visible+0xa6>
        par = lv_obj_get_parent(par);
 801cbe8:	4620      	mov	r0, r4
 801cbea:	f001 facd 	bl	801e188 <lv_obj_get_parent>
 801cbee:	4604      	mov	r4, r0
 801cbf0:	e7c8      	b.n	801cb84 <lv_obj_area_is_visible+0x82>

0801cbf2 <lv_obj_invalidate_area>:
{
 801cbf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cbf4:	460c      	mov	r4, r1
 801cbf6:	4605      	mov	r5, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj);
 801cbf8:	f7e9 fe38 	bl	800686c <lv_obj_get_disp>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 801cbfc:	f7fe faca 	bl	801b194 <lv_disp_is_invalidation_enabled>
 801cc00:	b1b0      	cbz	r0, 801cc30 <lv_obj_invalidate_area+0x3e>
    dest->x1 = src->x1;
 801cc02:	8823      	ldrh	r3, [r4, #0]
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 801cc04:	4669      	mov	r1, sp
 801cc06:	4628      	mov	r0, r5
 801cc08:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 801cc0c:	8863      	ldrh	r3, [r4, #2]
 801cc0e:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 801cc12:	88a3      	ldrh	r3, [r4, #4]
 801cc14:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 801cc18:	88e3      	ldrh	r3, [r4, #6]
 801cc1a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cc1e:	f7ff ff70 	bl	801cb02 <lv_obj_area_is_visible>
 801cc22:	b128      	cbz	r0, 801cc30 <lv_obj_invalidate_area+0x3e>
    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 801cc24:	4628      	mov	r0, r5
 801cc26:	f7e9 fe21 	bl	800686c <lv_obj_get_disp>
 801cc2a:	4669      	mov	r1, sp
 801cc2c:	f001 fd07 	bl	801e63e <_lv_inv_area>
}
 801cc30:	b003      	add	sp, #12
 801cc32:	bd30      	pop	{r4, r5, pc}

0801cc34 <lv_obj_invalidate>:
{
 801cc34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cc36:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 801cc38:	f7ff fc29 	bl	801c48e <_lv_obj_get_ext_draw_size>
    obj_coords.x1 -= ext_size;
 801cc3c:	b283      	uxth	r3, r0
    dest->y1 = src->y1;
 801cc3e:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801cc42:	8aa0      	ldrh	r0, [r4, #20]
    dest->x2 = src->x2;
 801cc44:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    obj_coords.y1 -= ext_size;
 801cc48:	1ac9      	subs	r1, r1, r3
    dest->y2 = src->y2;
 801cc4a:	f9b4 501a 	ldrsh.w	r5, [r4, #26]
    obj_coords.x1 -= ext_size;
 801cc4e:	1ac0      	subs	r0, r0, r3
    obj_coords.x2 += ext_size;
 801cc50:	441a      	add	r2, r3
    obj_coords.y1 -= ext_size;
 801cc52:	f8ad 1002 	strh.w	r1, [sp, #2]
    obj_coords.y2 += ext_size;
 801cc56:	442b      	add	r3, r5
    obj_coords.x1 -= ext_size;
 801cc58:	f8ad 0000 	strh.w	r0, [sp]
    lv_obj_invalidate_area(obj, &obj_coords);
 801cc5c:	4669      	mov	r1, sp
 801cc5e:	4620      	mov	r0, r4
    obj_coords.x2 += ext_size;
 801cc60:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 801cc64:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 801cc68:	f7ff ffc3 	bl	801cbf2 <lv_obj_invalidate_area>
}
 801cc6c:	b003      	add	sp, #12
 801cc6e:	bd30      	pop	{r4, r5, pc}

0801cc70 <lv_obj_move_to>:
{
 801cc70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t * parent = obj->parent;
 801cc74:	6846      	ldr	r6, [r0, #4]
{
 801cc76:	4604      	mov	r4, r0
    if(parent) {
 801cc78:	b316      	cbz	r6, 801ccc0 <lv_obj_move_to+0x50>
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 801cc7a:	4630      	mov	r0, r6
            x += pad_left + parent->coords.x1;
 801cc7c:	b28d      	uxth	r5, r1
            y += pad_top + parent->coords.y1;
 801cc7e:	b297      	uxth	r7, r2
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 801cc80:	f7ff fc51 	bl	801c526 <lv_obj_get_style_pad_left.constprop.0>
 801cc84:	4682      	mov	sl, r0
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 801cc86:	4630      	mov	r0, r6
 801cc88:	f7ff fc5b 	bl	801c542 <lv_obj_get_style_pad_top.constprop.0>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 801cc8c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 801cc90:	4681      	mov	r9, r0
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 801cc92:	4620      	mov	r0, r4
 801cc94:	f7fe feba 	bl	801ba0c <lv_obj_has_flag>
 801cc98:	2800      	cmp	r0, #0
 801cc9a:	d059      	beq.n	801cd50 <lv_obj_move_to+0xe0>
            x += pad_left + parent->coords.x1;
 801cc9c:	8ab3      	ldrh	r3, [r6, #20]
 801cc9e:	442b      	add	r3, r5
 801cca0:	eb03 000a 	add.w	r0, r3, sl
            y += pad_top + parent->coords.y1;
 801cca4:	8af3      	ldrh	r3, [r6, #22]
 801cca6:	443b      	add	r3, r7
            x += pad_left + parent->coords.x1;
 801cca8:	b205      	sxth	r5, r0
            y += pad_top + parent->coords.y1;
 801ccaa:	444b      	add	r3, r9
 801ccac:	b21f      	sxth	r7, r3
        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 801ccae:	4630      	mov	r0, r6
 801ccb0:	f7ff fc2b 	bl	801c50a <lv_obj_get_style_border_width.constprop.0>
        x += border_width;
 801ccb4:	fa15 f180 	uxtah	r1, r5, r0
        y += border_width;
 801ccb8:	fa17 f280 	uxtah	r2, r7, r0
        x += border_width;
 801ccbc:	b209      	sxth	r1, r1
        y += border_width;
 801ccbe:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
 801ccc0:	8aa3      	ldrh	r3, [r4, #20]
 801ccc2:	1ac9      	subs	r1, r1, r3
    diff.y = y - obj->coords.y1;
 801ccc4:	8ae3      	ldrh	r3, [r4, #22]
 801ccc6:	1ad2      	subs	r2, r2, r3
    diff.x = x - obj->coords.x1;
 801ccc8:	fa1f f881 	uxth.w	r8, r1
 801cccc:	b20d      	sxth	r5, r1
    diff.y = y - obj->coords.y1;
 801ccce:	fa1f fa82 	uxth.w	sl, r2
 801ccd2:	b217      	sxth	r7, r2
    if(diff.x == 0 && diff.y == 0) return;
 801ccd4:	ea58 030a 	orrs.w	r3, r8, sl
 801ccd8:	d037      	beq.n	801cd4a <lv_obj_move_to+0xda>
    lv_obj_invalidate(obj);
 801ccda:	4620      	mov	r0, r4
 801ccdc:	f7ff ffaa 	bl	801cc34 <lv_obj_invalidate>
    dest->x1 = src->x1;
 801cce0:	8aa3      	ldrh	r3, [r4, #20]
 801cce2:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 801cce6:	8ae3      	ldrh	r3, [r4, #22]
 801cce8:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 801ccec:	8b23      	ldrh	r3, [r4, #24]
 801ccee:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 801ccf2:	8b63      	ldrh	r3, [r4, #26]
 801ccf4:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(parent) {
 801ccf8:	b16e      	cbz	r6, 801cd16 <lv_obj_move_to+0xa6>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 801ccfa:	a902      	add	r1, sp, #8
 801ccfc:	4630      	mov	r0, r6
 801ccfe:	f7ff fdd1 	bl	801c8a4 <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 801cd02:	2200      	movs	r2, #0
 801cd04:	a902      	add	r1, sp, #8
 801cd06:	4668      	mov	r0, sp
 801cd08:	f007 fbb2 	bl	8024470 <_lv_area_is_in>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 801cd0c:	4681      	mov	r9, r0
 801cd0e:	b920      	cbnz	r0, 801cd1a <lv_obj_move_to+0xaa>
 801cd10:	4630      	mov	r0, r6
 801cd12:	f000 fd87 	bl	801d824 <lv_obj_scrollbar_invalidate>
    bool on1 = false;
 801cd16:	f04f 0900 	mov.w	r9, #0
    obj->coords.x1 += diff.x;
 801cd1a:	8aa3      	ldrh	r3, [r4, #20]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 801cd1c:	463a      	mov	r2, r7
 801cd1e:	4629      	mov	r1, r5
 801cd20:	4620      	mov	r0, r4
    obj->coords.x1 += diff.x;
 801cd22:	4443      	add	r3, r8
 801cd24:	82a3      	strh	r3, [r4, #20]
    obj->coords.y1 += diff.y;
 801cd26:	8ae3      	ldrh	r3, [r4, #22]
 801cd28:	4453      	add	r3, sl
 801cd2a:	82e3      	strh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
 801cd2c:	8b23      	ldrh	r3, [r4, #24]
 801cd2e:	4498      	add	r8, r3
    obj->coords.y2 += diff.y;
 801cd30:	8b63      	ldrh	r3, [r4, #26]
 801cd32:	449a      	add	sl, r3
    obj->coords.x2 += diff.x;
 801cd34:	f8a4 8018 	strh.w	r8, [r4, #24]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 801cd38:	2300      	movs	r3, #0
    obj->coords.y2 += diff.y;
 801cd3a:	f8a4 a01a 	strh.w	sl, [r4, #26]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 801cd3e:	f7ff fe08 	bl	801c952 <lv_obj_move_children_by>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 801cd42:	b9d6      	cbnz	r6, 801cd7a <lv_obj_move_to+0x10a>
    lv_obj_invalidate(obj);
 801cd44:	4620      	mov	r0, r4
 801cd46:	f7ff ff75 	bl	801cc34 <lv_obj_invalidate>
}
 801cd4a:	b004      	add	sp, #16
 801cd4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 801cd50:	f9b6 8014 	ldrsh.w	r8, [r6, #20]
 801cd54:	4630      	mov	r0, r6
 801cd56:	f000 f900 	bl	801cf5a <lv_obj_get_scroll_x>
 801cd5a:	44d0      	add	r8, sl
 801cd5c:	eba8 0800 	sub.w	r8, r8, r0
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 801cd60:	4630      	mov	r0, r6
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 801cd62:	4445      	add	r5, r8
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 801cd64:	f9b6 8016 	ldrsh.w	r8, [r6, #22]
 801cd68:	f000 f8fd 	bl	801cf66 <lv_obj_get_scroll_y>
 801cd6c:	44c8      	add	r8, r9
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 801cd6e:	b22d      	sxth	r5, r5
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 801cd70:	eba8 0800 	sub.w	r8, r8, r0
 801cd74:	4447      	add	r7, r8
 801cd76:	b23f      	sxth	r7, r7
 801cd78:	e799      	b.n	801ccae <lv_obj_move_to+0x3e>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 801cd7a:	4622      	mov	r2, r4
 801cd7c:	2122      	movs	r1, #34	; 0x22
 801cd7e:	4630      	mov	r0, r6
 801cd80:	f7e7 fcac 	bl	80046dc <lv_event_send>
    lv_obj_invalidate(obj);
 801cd84:	4620      	mov	r0, r4
 801cd86:	f7ff ff55 	bl	801cc34 <lv_obj_invalidate>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 801cd8a:	2200      	movs	r2, #0
 801cd8c:	a902      	add	r1, sp, #8
 801cd8e:	f104 0014 	add.w	r0, r4, #20
 801cd92:	f007 fb6d 	bl	8024470 <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 801cd96:	f1b9 0f00 	cmp.w	r9, #0
 801cd9a:	d101      	bne.n	801cda0 <lv_obj_move_to+0x130>
 801cd9c:	2800      	cmp	r0, #0
 801cd9e:	d0d4      	beq.n	801cd4a <lv_obj_move_to+0xda>
 801cda0:	4630      	mov	r0, r6
 801cda2:	f000 fd3f 	bl	801d824 <lv_obj_scrollbar_invalidate>
 801cda6:	e7d0      	b.n	801cd4a <lv_obj_move_to+0xda>

0801cda8 <lv_obj_is_visible>:
{
 801cda8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cdaa:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 801cdac:	f7ff fb6f 	bl	801c48e <_lv_obj_get_ext_draw_size>
    obj_coords.x1 -= ext_size;
 801cdb0:	b283      	uxth	r3, r0
    dest->y1 = src->y1;
 801cdb2:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801cdb6:	8aa0      	ldrh	r0, [r4, #20]
    dest->x2 = src->x2;
 801cdb8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    obj_coords.y1 -= ext_size;
 801cdbc:	1ac9      	subs	r1, r1, r3
    dest->y2 = src->y2;
 801cdbe:	f9b4 501a 	ldrsh.w	r5, [r4, #26]
    obj_coords.x1 -= ext_size;
 801cdc2:	1ac0      	subs	r0, r0, r3
    obj_coords.x2 += ext_size;
 801cdc4:	441a      	add	r2, r3
    obj_coords.y1 -= ext_size;
 801cdc6:	f8ad 1002 	strh.w	r1, [sp, #2]
    obj_coords.y2 += ext_size;
 801cdca:	442b      	add	r3, r5
    return lv_obj_area_is_visible(obj, &obj_coords);
 801cdcc:	4669      	mov	r1, sp
    obj_coords.x1 -= ext_size;
 801cdce:	f8ad 0000 	strh.w	r0, [sp]
    return lv_obj_area_is_visible(obj, &obj_coords);
 801cdd2:	4620      	mov	r0, r4
    obj_coords.x2 += ext_size;
 801cdd4:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 801cdd8:	f8ad 3006 	strh.w	r3, [sp, #6]
    return lv_obj_area_is_visible(obj, &obj_coords);
 801cddc:	f7ff fe91 	bl	801cb02 <lv_obj_area_is_visible>
}
 801cde0:	b003      	add	sp, #12
 801cde2:	bd30      	pop	{r4, r5, pc}

0801cde4 <lv_obj_set_ext_click_area>:
{
 801cde4:	b538      	push	{r3, r4, r5, lr}
 801cde6:	4605      	mov	r5, r0
 801cde8:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 801cdea:	f7e7 ffc5 	bl	8004d78 <lv_obj_allocate_spec_attr>
    obj->spec_attr->ext_click_pad = size;
 801cdee:	68ab      	ldr	r3, [r5, #8]
 801cdf0:	829c      	strh	r4, [r3, #20]
}
 801cdf2:	bd38      	pop	{r3, r4, r5, pc}

0801cdf4 <lv_obj_get_click_area>:
{
 801cdf4:	b570      	push	{r4, r5, r6, lr}
    dest->x1 = src->x1;
 801cdf6:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
 801cdfa:	800d      	strh	r5, [r1, #0]
    dest->y1 = src->y1;
 801cdfc:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
 801ce00:	804a      	strh	r2, [r1, #2]
    dest->x2 = src->x2;
 801ce02:	f9b0 4018 	ldrsh.w	r4, [r0, #24]
 801ce06:	808c      	strh	r4, [r1, #4]
    dest->y2 = src->y2;
 801ce08:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 801ce0c:	80cb      	strh	r3, [r1, #6]
    if(obj->spec_attr) {
 801ce0e:	6886      	ldr	r6, [r0, #8]
 801ce10:	b176      	cbz	r6, 801ce30 <lv_obj_get_click_area+0x3c>
        area->x1 -= obj->spec_attr->ext_click_pad;
 801ce12:	8ab6      	ldrh	r6, [r6, #20]
 801ce14:	1bad      	subs	r5, r5, r6
 801ce16:	800d      	strh	r5, [r1, #0]
        area->x2 += obj->spec_attr->ext_click_pad;
 801ce18:	6885      	ldr	r5, [r0, #8]
 801ce1a:	8aad      	ldrh	r5, [r5, #20]
 801ce1c:	442c      	add	r4, r5
 801ce1e:	808c      	strh	r4, [r1, #4]
        area->y1 -= obj->spec_attr->ext_click_pad;
 801ce20:	6884      	ldr	r4, [r0, #8]
 801ce22:	8aa4      	ldrh	r4, [r4, #20]
 801ce24:	1b12      	subs	r2, r2, r4
 801ce26:	804a      	strh	r2, [r1, #2]
        area->y2 += obj->spec_attr->ext_click_pad;
 801ce28:	6882      	ldr	r2, [r0, #8]
 801ce2a:	8a92      	ldrh	r2, [r2, #20]
 801ce2c:	4413      	add	r3, r2
 801ce2e:	80cb      	strh	r3, [r1, #6]
}
 801ce30:	bd70      	pop	{r4, r5, r6, pc}

0801ce32 <lv_clamp_width>:
{
 801ce32:	b530      	push	{r4, r5, lr}
 801ce34:	4604      	mov	r4, r0
 801ce36:	4608      	mov	r0, r1
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 801ce38:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 801ce3c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 801ce40:	d10f      	bne.n	801ce62 <lv_clamp_width+0x30>
 801ce42:	f420 41c0 	bic.w	r1, r0, #24576	; 0x6000
 801ce46:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 801ce4a:	dc0a      	bgt.n	801ce62 <lv_clamp_width+0x30>
 801ce4c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 801ce50:	f04f 0064 	mov.w	r0, #100	; 0x64
 801ce54:	bfc8      	it	gt
 801ce56:	f5c1 717a 	rsbgt	r1, r1, #1000	; 0x3e8
 801ce5a:	4359      	muls	r1, r3
 801ce5c:	fb91 f1f0 	sdiv	r1, r1, r0
 801ce60:	b208      	sxth	r0, r1
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 801ce62:	f402 41c0 	and.w	r1, r2, #24576	; 0x6000
 801ce66:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 801ce6a:	d10f      	bne.n	801ce8c <lv_clamp_width+0x5a>
 801ce6c:	f422 45c0 	bic.w	r5, r2, #24576	; 0x6000
 801ce70:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 801ce74:	dc0a      	bgt.n	801ce8c <lv_clamp_width+0x5a>
 801ce76:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 801ce7a:	462a      	mov	r2, r5
 801ce7c:	bfc8      	it	gt
 801ce7e:	f5c5 727a 	rsbgt	r2, r5, #1000	; 0x3e8
 801ce82:	4353      	muls	r3, r2
 801ce84:	2264      	movs	r2, #100	; 0x64
 801ce86:	fb93 f3f2 	sdiv	r3, r3, r2
 801ce8a:	b21a      	sxth	r2, r3
    return LV_CLAMP(min_width, width, max_width);
 801ce8c:	42a2      	cmp	r2, r4
 801ce8e:	bfa8      	it	ge
 801ce90:	4622      	movge	r2, r4
}
 801ce92:	4290      	cmp	r0, r2
 801ce94:	bfb8      	it	lt
 801ce96:	4610      	movlt	r0, r2
 801ce98:	bd30      	pop	{r4, r5, pc}

0801ce9a <lv_obj_get_style_base_dir>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801ce9a:	2216      	movs	r2, #22
{
 801ce9c:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801ce9e:	f000 fdef 	bl	801da80 <lv_obj_get_style_prop>
}
 801cea2:	b2c0      	uxtb	r0, r0
 801cea4:	bd08      	pop	{r3, pc}

0801cea6 <scroll_anim_ready_cb>:
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 801cea6:	2200      	movs	r2, #0
 801cea8:	210a      	movs	r1, #10
 801ceaa:	6800      	ldr	r0, [r0, #0]
 801ceac:	f7e7 bc16 	b.w	80046dc <lv_event_send>

0801ceb0 <lv_obj_set_scrollbar_mode>:
{
 801ceb0:	b538      	push	{r3, r4, r5, lr}
 801ceb2:	4604      	mov	r4, r0
 801ceb4:	460d      	mov	r5, r1
    lv_obj_allocate_spec_attr(obj);
 801ceb6:	f7e7 ff5f 	bl	8004d78 <lv_obj_allocate_spec_attr>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 801ceba:	68a2      	ldr	r2, [r4, #8]
 801cebc:	7e13      	ldrb	r3, [r2, #24]
 801cebe:	f003 0103 	and.w	r1, r3, #3
 801cec2:	42a9      	cmp	r1, r5
 801cec4:	d007      	beq.n	801ced6 <lv_obj_set_scrollbar_mode+0x26>
    obj->spec_attr->scrollbar_mode = mode;
 801cec6:	f365 0301 	bfi	r3, r5, #0, #2
    lv_obj_invalidate(obj);
 801ceca:	4620      	mov	r0, r4
    obj->spec_attr->scrollbar_mode = mode;
 801cecc:	7613      	strb	r3, [r2, #24]
}
 801cece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(obj);
 801ced2:	f7ff beaf 	b.w	801cc34 <lv_obj_invalidate>
}
 801ced6:	bd38      	pop	{r3, r4, r5, pc}

0801ced8 <lv_obj_set_scroll_dir>:
{
 801ced8:	b538      	push	{r3, r4, r5, lr}
 801ceda:	4605      	mov	r5, r0
 801cedc:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 801cede:	f7e7 ff4b 	bl	8004d78 <lv_obj_allocate_spec_attr>
    if(dir != obj->spec_attr->scroll_dir) {
 801cee2:	68aa      	ldr	r2, [r5, #8]
 801cee4:	7e53      	ldrb	r3, [r2, #25]
 801cee6:	f003 010f 	and.w	r1, r3, #15
 801ceea:	42a1      	cmp	r1, r4
        obj->spec_attr->scroll_dir = dir;
 801ceec:	bf1c      	itt	ne
 801ceee:	f364 0303 	bfine	r3, r4, #0, #4
 801cef2:	7653      	strbne	r3, [r2, #25]
}
 801cef4:	bd38      	pop	{r3, r4, r5, pc}

0801cef6 <lv_obj_set_scroll_snap_x>:
{
 801cef6:	b538      	push	{r3, r4, r5, lr}
 801cef8:	4605      	mov	r5, r0
 801cefa:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 801cefc:	f7e7 ff3c 	bl	8004d78 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_x = align;
 801cf00:	68ab      	ldr	r3, [r5, #8]
 801cf02:	7e1a      	ldrb	r2, [r3, #24]
 801cf04:	f364 0283 	bfi	r2, r4, #2, #2
 801cf08:	761a      	strb	r2, [r3, #24]
}
 801cf0a:	bd38      	pop	{r3, r4, r5, pc}

0801cf0c <lv_obj_set_scroll_snap_y>:
{
 801cf0c:	b538      	push	{r3, r4, r5, lr}
 801cf0e:	4605      	mov	r5, r0
 801cf10:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 801cf12:	f7e7 ff31 	bl	8004d78 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_y = align;
 801cf16:	68ab      	ldr	r3, [r5, #8]
 801cf18:	7e1a      	ldrb	r2, [r3, #24]
 801cf1a:	f364 1205 	bfi	r2, r4, #4, #2
 801cf1e:	761a      	strb	r2, [r3, #24]
}
 801cf20:	bd38      	pop	{r3, r4, r5, pc}

0801cf22 <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 801cf22:	6883      	ldr	r3, [r0, #8]
 801cf24:	b11b      	cbz	r3, 801cf2e <lv_obj_get_scrollbar_mode+0xc>
 801cf26:	7e18      	ldrb	r0, [r3, #24]
 801cf28:	f000 0003 	and.w	r0, r0, #3
 801cf2c:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 801cf2e:	2003      	movs	r0, #3
}
 801cf30:	4770      	bx	lr

0801cf32 <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 801cf32:	6883      	ldr	r3, [r0, #8]
 801cf34:	b11b      	cbz	r3, 801cf3e <lv_obj_get_scroll_dir+0xc>
 801cf36:	7e58      	ldrb	r0, [r3, #25]
 801cf38:	f000 000f 	and.w	r0, r0, #15
 801cf3c:	4770      	bx	lr
    else return LV_DIR_ALL;
 801cf3e:	200f      	movs	r0, #15
}
 801cf40:	4770      	bx	lr

0801cf42 <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 801cf42:	6880      	ldr	r0, [r0, #8]
 801cf44:	b110      	cbz	r0, 801cf4c <lv_obj_get_scroll_snap_x+0xa>
 801cf46:	7e00      	ldrb	r0, [r0, #24]
 801cf48:	f3c0 0081 	ubfx	r0, r0, #2, #2
}
 801cf4c:	4770      	bx	lr

0801cf4e <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 801cf4e:	6880      	ldr	r0, [r0, #8]
 801cf50:	b110      	cbz	r0, 801cf58 <lv_obj_get_scroll_snap_y+0xa>
 801cf52:	7e00      	ldrb	r0, [r0, #24]
 801cf54:	f3c0 1001 	ubfx	r0, r0, #4, #2
}
 801cf58:	4770      	bx	lr

0801cf5a <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 801cf5a:	6880      	ldr	r0, [r0, #8]
 801cf5c:	b110      	cbz	r0, 801cf64 <lv_obj_get_scroll_x+0xa>
    return -obj->spec_attr->scroll.x;
 801cf5e:	8a00      	ldrh	r0, [r0, #16]
 801cf60:	4240      	negs	r0, r0
 801cf62:	b200      	sxth	r0, r0
}
 801cf64:	4770      	bx	lr

0801cf66 <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 801cf66:	6880      	ldr	r0, [r0, #8]
 801cf68:	b110      	cbz	r0, 801cf70 <lv_obj_get_scroll_y+0xa>
    return -obj->spec_attr->scroll.y;
 801cf6a:	8a40      	ldrh	r0, [r0, #18]
 801cf6c:	4240      	negs	r0, r0
 801cf6e:	b200      	sxth	r0, r0
}
 801cf70:	4770      	bx	lr

0801cf72 <lv_obj_get_scroll_top>:
lv_coord_t lv_obj_get_scroll_top(lv_obj_t * obj)
 801cf72:	f7ff bff8 	b.w	801cf66 <lv_obj_get_scroll_y>

0801cf76 <_lv_obj_scroll_by_raw>:
    if(x == 0 && y == 0) return LV_RES_OK;
 801cf76:	ea51 0302 	orrs.w	r3, r1, r2
{
 801cf7a:	b570      	push	{r4, r5, r6, lr}
 801cf7c:	4604      	mov	r4, r0
 801cf7e:	460d      	mov	r5, r1
 801cf80:	4616      	mov	r6, r2
    if(x == 0 && y == 0) return LV_RES_OK;
 801cf82:	d019      	beq.n	801cfb8 <_lv_obj_scroll_by_raw+0x42>
    lv_obj_allocate_spec_attr(obj);
 801cf84:	f7e7 fef8 	bl	8004d78 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 801cf88:	68a2      	ldr	r2, [r4, #8]
    lv_obj_move_children_by(obj, x, y, true);
 801cf8a:	4629      	mov	r1, r5
 801cf8c:	4620      	mov	r0, r4
    obj->spec_attr->scroll.x += x;
 801cf8e:	8a13      	ldrh	r3, [r2, #16]
 801cf90:	442b      	add	r3, r5
 801cf92:	8213      	strh	r3, [r2, #16]
    obj->spec_attr->scroll.y += y;
 801cf94:	68a2      	ldr	r2, [r4, #8]
 801cf96:	8a53      	ldrh	r3, [r2, #18]
 801cf98:	4433      	add	r3, r6
 801cf9a:	8253      	strh	r3, [r2, #18]
    lv_obj_move_children_by(obj, x, y, true);
 801cf9c:	2301      	movs	r3, #1
 801cf9e:	4632      	mov	r2, r6
 801cfa0:	f7ff fcd7 	bl	801c952 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 801cfa4:	2200      	movs	r2, #0
 801cfa6:	210b      	movs	r1, #11
 801cfa8:	4620      	mov	r0, r4
 801cfaa:	f7e7 fb97 	bl	80046dc <lv_event_send>
    if(res != LV_RES_OK) return res;
 801cfae:	2801      	cmp	r0, #1
 801cfb0:	d103      	bne.n	801cfba <_lv_obj_scroll_by_raw+0x44>
    lv_obj_invalidate(obj);
 801cfb2:	4620      	mov	r0, r4
 801cfb4:	f7ff fe3e 	bl	801cc34 <lv_obj_invalidate>
    if(x == 0 && y == 0) return LV_RES_OK;
 801cfb8:	2001      	movs	r0, #1
}
 801cfba:	bd70      	pop	{r4, r5, r6, pc}

0801cfbc <scroll_y_anim>:
{
 801cfbc:	b508      	push	{r3, lr}
 801cfbe:	4603      	mov	r3, r0
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 801cfc0:	f7ff ffd1 	bl	801cf66 <lv_obj_get_scroll_y>
 801cfc4:	1842      	adds	r2, r0, r1
 801cfc6:	2100      	movs	r1, #0
 801cfc8:	4618      	mov	r0, r3
 801cfca:	b212      	sxth	r2, r2
}
 801cfcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 801cfd0:	f7ff bfd1 	b.w	801cf76 <_lv_obj_scroll_by_raw>

0801cfd4 <scroll_x_anim>:
{
 801cfd4:	b508      	push	{r3, lr}
 801cfd6:	4603      	mov	r3, r0
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 801cfd8:	f7ff ffbf 	bl	801cf5a <lv_obj_get_scroll_x>
 801cfdc:	4401      	add	r1, r0
 801cfde:	2200      	movs	r2, #0
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	b209      	sxth	r1, r1
}
 801cfe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 801cfe8:	f7ff bfc5 	b.w	801cf76 <_lv_obj_scroll_by_raw>

0801cfec <lv_obj_scroll_by_bounded>:
{
 801cfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cff0:	4699      	mov	r9, r3
    if(dx == 0 && dy == 0) return;
 801cff2:	ea51 0302 	orrs.w	r3, r1, r2
{
 801cff6:	4607      	mov	r7, r0
 801cff8:	460c      	mov	r4, r1
 801cffa:	4615      	mov	r5, r2
    if(dx == 0 && dy == 0) return;
 801cffc:	d058      	beq.n	801d0b0 <lv_obj_scroll_by_bounded+0xc4>
    lv_obj_update_layout(obj);
 801cffe:	f7e8 fbaf 	bl	8005760 <lv_obj_update_layout>
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 801d002:	4638      	mov	r0, r7
 801d004:	f7ff ffa9 	bl	801cf5a <lv_obj_get_scroll_x>
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801d008:	2100      	movs	r1, #0
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 801d00a:	fa1f f880 	uxth.w	r8, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801d00e:	4638      	mov	r0, r7
 801d010:	f7ff ff43 	bl	801ce9a <lv_obj_get_style_base_dir>
 801d014:	2801      	cmp	r0, #1
    lv_coord_t x_bounded = x_current + dx;
 801d016:	eba4 0408 	sub.w	r4, r4, r8
 801d01a:	b224      	sxth	r4, r4
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801d01c:	d033      	beq.n	801d086 <lv_obj_scroll_by_bounded+0x9a>
        if(x_bounded < 0) {
 801d01e:	2c00      	cmp	r4, #0
 801d020:	da42      	bge.n	801d0a8 <lv_obj_scroll_by_bounded+0xbc>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 801d022:	4638      	mov	r0, r7
 801d024:	f7e8 fdea 	bl	8005bfc <lv_obj_get_scroll_left>
 801d028:	4606      	mov	r6, r0
 801d02a:	4638      	mov	r0, r7
 801d02c:	f7e8 fe4e 	bl	8005ccc <lv_obj_get_scroll_right>
 801d030:	1832      	adds	r2, r6, r0
            if(scroll_max < 0) scroll_max = 0;
 801d032:	b212      	sxth	r2, r2
 801d034:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 801d038:	4252      	negs	r2, r2
 801d03a:	4294      	cmp	r4, r2
 801d03c:	da00      	bge.n	801d040 <lv_obj_scroll_by_bounded+0x54>
 801d03e:	b214      	sxth	r4, r2
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 801d040:	4638      	mov	r0, r7
 801d042:	f7ff ff90 	bl	801cf66 <lv_obj_get_scroll_y>
 801d046:	b286      	uxth	r6, r0
    lv_coord_t y_bounded = y_current + dy;
 801d048:	1bad      	subs	r5, r5, r6
 801d04a:	b22d      	sxth	r5, r5
    if(y_bounded < 0) {
 801d04c:	2d00      	cmp	r5, #0
 801d04e:	da2d      	bge.n	801d0ac <lv_obj_scroll_by_bounded+0xc0>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 801d050:	4638      	mov	r0, r7
 801d052:	f7e8 fd81 	bl	8005b58 <lv_obj_get_scroll_bottom>
 801d056:	1833      	adds	r3, r6, r0
        if(scroll_max < 0) scroll_max = 0;
 801d058:	b21b      	sxth	r3, r3
 801d05a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 801d05e:	425b      	negs	r3, r3
 801d060:	429d      	cmp	r5, r3
 801d062:	da00      	bge.n	801d066 <lv_obj_scroll_by_bounded+0x7a>
 801d064:	b21d      	sxth	r5, r3
    dx = x_bounded - x_current;
 801d066:	eb08 0104 	add.w	r1, r8, r4
    dy = y_bounded - y_current;
 801d06a:	1972      	adds	r2, r6, r5
    dx = x_bounded - x_current;
 801d06c:	b289      	uxth	r1, r1
    dy = y_bounded - y_current;
 801d06e:	b292      	uxth	r2, r2
    if(dx || dy) {
 801d070:	ea51 0302 	orrs.w	r3, r1, r2
 801d074:	d01c      	beq.n	801d0b0 <lv_obj_scroll_by_bounded+0xc4>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 801d076:	464b      	mov	r3, r9
 801d078:	4638      	mov	r0, r7
 801d07a:	b212      	sxth	r2, r2
 801d07c:	b209      	sxth	r1, r1
}
 801d07e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 801d082:	f7e8 bea1 	b.w	8005dc8 <lv_obj_scroll_by>
        if(x_bounded > 0) {
 801d086:	2c00      	cmp	r4, #0
 801d088:	dd0e      	ble.n	801d0a8 <lv_obj_scroll_by_bounded+0xbc>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 801d08a:	4638      	mov	r0, r7
 801d08c:	f7e8 fdb6 	bl	8005bfc <lv_obj_get_scroll_left>
 801d090:	4606      	mov	r6, r0
 801d092:	4638      	mov	r0, r7
 801d094:	f7e8 fe1a 	bl	8005ccc <lv_obj_get_scroll_right>
 801d098:	4406      	add	r6, r0
            if(scroll_max < 0) scroll_max = 0;
 801d09a:	b236      	sxth	r6, r6
 801d09c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801d0a0:	42b4      	cmp	r4, r6
 801d0a2:	bfa8      	it	ge
 801d0a4:	4634      	movge	r4, r6
 801d0a6:	e7cb      	b.n	801d040 <lv_obj_scroll_by_bounded+0x54>
    lv_coord_t x_bounded = x_current + dx;
 801d0a8:	2400      	movs	r4, #0
 801d0aa:	e7c9      	b.n	801d040 <lv_obj_scroll_by_bounded+0x54>
    lv_coord_t y_bounded = y_current + dy;
 801d0ac:	2500      	movs	r5, #0
 801d0ae:	e7da      	b.n	801d066 <lv_obj_scroll_by_bounded+0x7a>
}
 801d0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801d0b4 <lv_obj_scroll_to>:
{
 801d0b4:	b570      	push	{r4, r5, r6, lr}
 801d0b6:	4605      	mov	r5, r0
 801d0b8:	4616      	mov	r6, r2
 801d0ba:	461c      	mov	r4, r3
    lv_obj_scroll_to_x(obj, x, anim_en);
 801d0bc:	461a      	mov	r2, r3
 801d0be:	f7e8 ff11 	bl	8005ee4 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 801d0c2:	4631      	mov	r1, r6
 801d0c4:	4622      	mov	r2, r4
 801d0c6:	4628      	mov	r0, r5
}
 801d0c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_scroll_to_y(obj, y, anim_en);
 801d0cc:	f7e8 bf20 	b.w	8005f10 <lv_obj_scroll_to_y>

0801d0d0 <lv_obj_scroll_to_view_recursive>:
{
 801d0d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d0d2:	4604      	mov	r4, r0
 801d0d4:	460e      	mov	r6, r1
    lv_obj_update_layout(obj);
 801d0d6:	f7e8 fb43 	bl	8005760 <lv_obj_update_layout>
    lv_point_t p = {0, 0};
 801d0da:	2300      	movs	r3, #0
    lv_obj_t * parent = lv_obj_get_parent(child);
 801d0dc:	4620      	mov	r0, r4
    lv_point_t p = {0, 0};
 801d0de:	9301      	str	r3, [sp, #4]
    lv_obj_t * parent = lv_obj_get_parent(child);
 801d0e0:	f001 f852 	bl	801e188 <lv_obj_get_parent>
    lv_obj_t * child = obj;
 801d0e4:	4621      	mov	r1, r4
    lv_obj_t * parent = lv_obj_get_parent(child);
 801d0e6:	4605      	mov	r5, r0
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 801d0e8:	3414      	adds	r4, #20
    while(parent) {
 801d0ea:	b90d      	cbnz	r5, 801d0f0 <lv_obj_scroll_to_view_recursive+0x20>
}
 801d0ec:	b002      	add	sp, #8
 801d0ee:	bd70      	pop	{r4, r5, r6, pc}
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 801d0f0:	4633      	mov	r3, r6
 801d0f2:	aa01      	add	r2, sp, #4
 801d0f4:	4620      	mov	r0, r4
 801d0f6:	f7e8 ff21 	bl	8005f3c <scroll_area_into_view>
        parent = lv_obj_get_parent(parent);
 801d0fa:	4628      	mov	r0, r5
 801d0fc:	f001 f844 	bl	801e188 <lv_obj_get_parent>
 801d100:	4629      	mov	r1, r5
 801d102:	4605      	mov	r5, r0
 801d104:	e7f1      	b.n	801d0ea <lv_obj_scroll_to_view_recursive+0x1a>

0801d106 <lv_obj_get_scrollbar_area>:
{
 801d106:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_area_set(hor_area, 0, 0, -1, -1);
 801d10a:	f04f 36ff 	mov.w	r6, #4294967295
{
 801d10e:	b093      	sub	sp, #76	; 0x4c
 801d110:	460d      	mov	r5, r1
 801d112:	4617      	mov	r7, r2
    lv_area_set(hor_area, 0, 0, -1, -1);
 801d114:	2200      	movs	r2, #0
{
 801d116:	4604      	mov	r4, r0
    lv_area_set(hor_area, 0, 0, -1, -1);
 801d118:	4633      	mov	r3, r6
 801d11a:	4628      	mov	r0, r5
 801d11c:	4611      	mov	r1, r2
 801d11e:	9600      	str	r6, [sp, #0]
 801d120:	f007 f868 	bl	80241f4 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 801d124:	2200      	movs	r2, #0
 801d126:	4633      	mov	r3, r6
 801d128:	4638      	mov	r0, r7
 801d12a:	4611      	mov	r1, r2
 801d12c:	9600      	str	r6, [sp, #0]
 801d12e:	f007 f861 	bl	80241f4 <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 801d132:	2110      	movs	r1, #16
 801d134:	4620      	mov	r0, r4
 801d136:	f7fe fc69 	bl	801ba0c <lv_obj_has_flag>
 801d13a:	4681      	mov	r9, r0
 801d13c:	b3c0      	cbz	r0, 801d1b0 <lv_obj_get_scrollbar_area+0xaa>
    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 801d13e:	4620      	mov	r0, r4
 801d140:	f7ff feef 	bl	801cf22 <lv_obj_get_scrollbar_mode>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 801d144:	4683      	mov	fp, r0
 801d146:	b398      	cbz	r0, 801d1b0 <lv_obj_get_scrollbar_area+0xaa>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 801d148:	2000      	movs	r0, #0
 801d14a:	f7f4 ffdd 	bl	8012108 <lv_indev_get_next>
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 801d14e:	f1bb 0f02 	cmp.w	fp, #2
    lv_indev_t * indev = lv_indev_get_next(NULL);
 801d152:	4682      	mov	sl, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 801d154:	d029      	beq.n	801d1aa <lv_obj_get_scrollbar_area+0xa4>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 801d156:	4620      	mov	r0, r4
 801d158:	f7ff ff05 	bl	801cf66 <lv_obj_get_scroll_y>
 801d15c:	4680      	mov	r8, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 801d15e:	4620      	mov	r0, r4
 801d160:	f7e8 fcfa 	bl	8005b58 <lv_obj_get_scroll_bottom>
 801d164:	9008      	str	r0, [sp, #32]
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 801d166:	4620      	mov	r0, r4
 801d168:	f7e8 fd48 	bl	8005bfc <lv_obj_get_scroll_left>
 801d16c:	9004      	str	r0, [sp, #16]
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 801d16e:	4620      	mov	r0, r4
 801d170:	f7e8 fdac 	bl	8005ccc <lv_obj_get_scroll_right>
 801d174:	9003      	str	r0, [sp, #12]
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 801d176:	4620      	mov	r0, r4
 801d178:	f7ff fedb 	bl	801cf32 <lv_obj_get_scroll_dir>
    if((dir & LV_DIR_VER) &&
 801d17c:	f010 0f0c 	tst.w	r0, #12
 801d180:	f000 0603 	and.w	r6, r0, #3
 801d184:	d11f      	bne.n	801d1c6 <lv_obj_get_scrollbar_area+0xc0>
    if((dir & LV_DIR_HOR) &&
 801d186:	b19e      	cbz	r6, 801d1b0 <lv_obj_get_scrollbar_area+0xaa>
 801d188:	f1bb 0f01 	cmp.w	fp, #1
 801d18c:	f040 8115 	bne.w	801d3ba <lv_obj_get_scrollbar_area+0x2b4>
        hor_draw = true;
 801d190:	464e      	mov	r6, r9
 801d192:	f04f 0900 	mov.w	r9, #0
 801d196:	e032      	b.n	801d1fe <lv_obj_get_scrollbar_area+0xf8>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 801d198:	4650      	mov	r0, sl
 801d19a:	f7fe fa23 	bl	801b5e4 <lv_indev_get_scroll_obj>
 801d19e:	4284      	cmp	r4, r0
 801d1a0:	d0d9      	beq.n	801d156 <lv_obj_get_scrollbar_area+0x50>
            indev = lv_indev_get_next(indev);
 801d1a2:	4650      	mov	r0, sl
 801d1a4:	f7f4 ffb0 	bl	8012108 <lv_indev_get_next>
 801d1a8:	4682      	mov	sl, r0
        while(indev) {
 801d1aa:	f1ba 0f00 	cmp.w	sl, #0
 801d1ae:	d1f3      	bne.n	801d198 <lv_obj_get_scrollbar_area+0x92>
}
 801d1b0:	b013      	add	sp, #76	; 0x4c
 801d1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((dir & LV_DIR_HOR) &&
 801d1b6:	2e00      	cmp	r6, #0
 801d1b8:	d0fa      	beq.n	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 801d1ba:	4650      	mov	r0, sl
 801d1bc:	f7fe fa04 	bl	801b5c8 <lv_indev_get_scroll_dir>
 801d1c0:	2803      	cmp	r0, #3
 801d1c2:	d1f5      	bne.n	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
 801d1c4:	e7e4      	b.n	801d190 <lv_obj_get_scrollbar_area+0x8a>
    if((dir & LV_DIR_VER) &&
 801d1c6:	f1bb 0f01 	cmp.w	fp, #1
 801d1ca:	b2f6      	uxtb	r6, r6
 801d1cc:	f000 80e8 	beq.w	801d3a0 <lv_obj_get_scrollbar_area+0x29a>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 801d1d0:	f1bb 0f03 	cmp.w	fp, #3
 801d1d4:	f040 80d0 	bne.w	801d378 <lv_obj_get_scrollbar_area+0x272>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 801d1d8:	f1b8 0f00 	cmp.w	r8, #0
 801d1dc:	dc0b      	bgt.n	801d1f6 <lv_obj_get_scrollbar_area+0xf0>
 801d1de:	9b08      	ldr	r3, [sp, #32]
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	dc08      	bgt.n	801d1f6 <lv_obj_get_scrollbar_area+0xf0>
    if((dir & LV_DIR_HOR) &&
 801d1e4:	2e00      	cmp	r6, #0
 801d1e6:	d0e3      	beq.n	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 801d1e8:	9b04      	ldr	r3, [sp, #16]
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	dcd0      	bgt.n	801d190 <lv_obj_get_scrollbar_area+0x8a>
 801d1ee:	9b03      	ldr	r3, [sp, #12]
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	dccd      	bgt.n	801d190 <lv_obj_get_scrollbar_area+0x8a>
 801d1f4:	e7dc      	b.n	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
    if((dir & LV_DIR_HOR) &&
 801d1f6:	2e00      	cmp	r6, #0
 801d1f8:	f040 80d6 	bne.w	801d3a8 <lv_obj_get_scrollbar_area+0x2a2>
        hor_draw = true;
 801d1fc:	2600      	movs	r6, #0
    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_SCROLLBAR) == LV_BASE_DIR_RTL ? true : false;
 801d1fe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801d202:	4620      	mov	r0, r4
 801d204:	f7ff fe49 	bl	801ce9a <lv_obj_get_style_base_dir>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801d208:	2210      	movs	r2, #16
 801d20a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801d20e:	9005      	str	r0, [sp, #20]
 801d210:	4620      	mov	r0, r4
 801d212:	f000 fc35 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801d216:	2211      	movs	r2, #17
 801d218:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801d21c:	900e      	str	r0, [sp, #56]	; 0x38
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801d21e:	4620      	mov	r0, r4
 801d220:	f000 fc2e 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801d224:	2212      	movs	r2, #18
 801d226:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801d22a:	900d      	str	r0, [sp, #52]	; 0x34
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801d22c:	4620      	mov	r0, r4
 801d22e:	f000 fc27 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801d232:	2213      	movs	r2, #19
 801d234:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801d238:	900c      	str	r0, [sp, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801d23a:	4620      	mov	r0, r4
 801d23c:	f000 fc20 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801d240:	2201      	movs	r2, #1
 801d242:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801d246:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801d248:	4620      	mov	r0, r4
 801d24a:	f000 fc19 	bl	801da80 <lv_obj_get_style_prop>
 801d24e:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t obj_h = lv_obj_get_height(obj);
 801d250:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801d252:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801d256:	f7ff faf3 	bl	801c840 <lv_obj_get_height>
 801d25a:	4682      	mov	sl, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 801d25c:	4620      	mov	r0, r4
 801d25e:	f7ff fae9 	bl	801c834 <lv_obj_get_width>
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 801d262:	f1b9 0f00 	cmp.w	r9, #0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 801d266:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 801d268:	f04f 0221 	mov.w	r2, #33	; 0x21
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 801d26c:	bf14      	ite	ne
 801d26e:	465b      	movne	r3, fp
 801d270:	2300      	moveq	r3, #0
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 801d272:	2e00      	cmp	r6, #0
 801d274:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801d278:	4620      	mov	r0, r4
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 801d27a:	9307      	str	r3, [sp, #28]
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 801d27c:	bf08      	it	eq
 801d27e:	f04f 0b00 	moveq.w	fp, #0
 801d282:	f000 fbfd 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801d286:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 801d288:	2801      	cmp	r0, #1
 801d28a:	f240 80a1 	bls.w	801d3d0 <lv_obj_get_scrollbar_area+0x2ca>
    if(ver_draw && content_h) {
 801d28e:	f1b9 0f00 	cmp.w	r9, #0
 801d292:	f040 80a8 	bne.w	801d3e6 <lv_obj_get_scrollbar_area+0x2e0>
    if(hor_draw && content_w) {
 801d296:	2e00      	cmp	r6, #0
 801d298:	d08a      	beq.n	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
    lv_coord_t content_w = obj_w + sl + sr;
 801d29a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801d29e:	9308      	str	r3, [sp, #32]
 801d2a0:	e9dd 3703 	ldrd	r3, r7, [sp, #12]
 801d2a4:	441f      	add	r7, r3
 801d2a6:	9b06      	ldr	r3, [sp, #24]
 801d2a8:	b2bf      	uxth	r7, r7
 801d2aa:	fa17 f283 	uxtah	r2, r7, r3
 801d2ae:	b212      	sxth	r2, r2
    if(hor_draw && content_w) {
 801d2b0:	2a00      	cmp	r2, #0
 801d2b2:	f43f af7d 	beq.w	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 801d2b6:	8b63      	ldrh	r3, [r4, #26]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 801d2b8:	2000      	movs	r0, #0
        hor_area->y2 = obj->coords.y2 - bottom_space;
 801d2ba:	990d      	ldr	r1, [sp, #52]	; 0x34
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 801d2bc:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
        hor_area->y2 = obj->coords.y2 - bottom_space;
 801d2c0:	1a5b      	subs	r3, r3, r1
        hor_area->y1 = hor_area->y2 - tickness + 1;
 801d2c2:	990a      	ldr	r1, [sp, #40]	; 0x28
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 801d2c4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
        hor_area->y2 = obj->coords.y2 - bottom_space;
 801d2c8:	b29b      	uxth	r3, r3
        hor_area->y1 = hor_area->y2 - tickness + 1;
 801d2ca:	f1c1 0101 	rsb	r1, r1, #1
        hor_area->y2 = obj->coords.y2 - bottom_space;
 801d2ce:	80eb      	strh	r3, [r5, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 801d2d0:	440b      	add	r3, r1
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 801d2d2:	9907      	ldr	r1, [sp, #28]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 801d2d4:	806b      	strh	r3, [r5, #2]
        hor_area->x1 = obj->coords.x1;
 801d2d6:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801d2da:	802b      	strh	r3, [r5, #0]
        hor_area->x2 = obj->coords.x2;
 801d2dc:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801d2e0:	80ab      	strh	r3, [r5, #4]
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 801d2e2:	9b06      	ldr	r3, [sp, #24]
 801d2e4:	eba3 0309 	sub.w	r3, r3, r9
 801d2e8:	eba3 030b 	sub.w	r3, r3, fp
 801d2ec:	1a5b      	subs	r3, r3, r1
 801d2ee:	9906      	ldr	r1, [sp, #24]
 801d2f0:	434b      	muls	r3, r1
 801d2f2:	fb93 f3f2 	sdiv	r3, r3, r2
 801d2f6:	b21e      	sxth	r6, r3
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 801d2f8:	f7f4 feee 	bl	80120d8 <lv_disp_get_dpi>
 801d2fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d300:	0040      	lsls	r0, r0, #1
 801d302:	28ef      	cmp	r0, #239	; 0xef
 801d304:	f340 8198 	ble.w	801d638 <lv_obj_get_scrollbar_area+0x532>
 801d308:	2000      	movs	r0, #0
 801d30a:	f7f4 fee5 	bl	80120d8 <lv_disp_get_dpi>
 801d30e:	2250      	movs	r2, #80	; 0x50
 801d310:	210a      	movs	r1, #10
 801d312:	fb00 2001 	mla	r0, r0, r1, r2
 801d316:	22a0      	movs	r2, #160	; 0xa0
 801d318:	fb90 f0f2 	sdiv	r0, r0, r2
 801d31c:	4286      	cmp	r6, r0
 801d31e:	dc13      	bgt.n	801d348 <lv_obj_get_scrollbar_area+0x242>
 801d320:	2000      	movs	r0, #0
 801d322:	f7f4 fed9 	bl	80120d8 <lv_disp_get_dpi>
 801d326:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d32a:	0040      	lsls	r0, r0, #1
 801d32c:	28ef      	cmp	r0, #239	; 0xef
 801d32e:	f340 8185 	ble.w	801d63c <lv_obj_get_scrollbar_area+0x536>
 801d332:	2000      	movs	r0, #0
 801d334:	f7f4 fed0 	bl	80120d8 <lv_disp_get_dpi>
 801d338:	220a      	movs	r2, #10
 801d33a:	2350      	movs	r3, #80	; 0x50
 801d33c:	fb00 3302 	mla	r3, r0, r2, r3
 801d340:	22a0      	movs	r2, #160	; 0xa0
 801d342:	fb93 f3f2 	sdiv	r3, r3, r2
 801d346:	b21e      	sxth	r6, r3
        if(scroll_w <= 0) {
 801d348:	b23a      	sxth	r2, r7
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 801d34a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d34e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
        if(scroll_w <= 0) {
 801d352:	2a00      	cmp	r2, #0
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 801d354:	f8bd a01c 	ldrh.w	sl, [sp, #28]
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 801d358:	8aa0      	ldrh	r0, [r4, #20]
        if(scroll_w <= 0) {
 801d35a:	f300 817a 	bgt.w	801d652 <lv_obj_get_scrollbar_area+0x54c>
            if(rtl) {
 801d35e:	9b05      	ldr	r3, [sp, #20]
 801d360:	2b01      	cmp	r3, #1
 801d362:	f040 816d 	bne.w	801d640 <lv_obj_get_scrollbar_area+0x53a>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 801d366:	3901      	subs	r1, #1
 801d368:	4401      	add	r1, r0
 801d36a:	4451      	add	r1, sl
 801d36c:	8029      	strh	r1, [r5, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 801d36e:	8b23      	ldrh	r3, [r4, #24]
 801d370:	eba3 0308 	sub.w	r3, r3, r8
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 801d374:	80ab      	strh	r3, [r5, #4]
 801d376:	e71b      	b.n	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 801d378:	f1bb 0f02 	cmp.w	fp, #2
 801d37c:	f47f af18 	bne.w	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 801d380:	4650      	mov	r0, sl
 801d382:	f7fe f921 	bl	801b5c8 <lv_indev_get_scroll_dir>
 801d386:	280c      	cmp	r0, #12
 801d388:	f47f af15 	bne.w	801d1b6 <lv_obj_get_scrollbar_area+0xb0>
    if((dir & LV_DIR_HOR) &&
 801d38c:	2e00      	cmp	r6, #0
 801d38e:	f43f af35 	beq.w	801d1fc <lv_obj_get_scrollbar_area+0xf6>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 801d392:	4650      	mov	r0, sl
 801d394:	f7fe f918 	bl	801b5c8 <lv_indev_get_scroll_dir>
 801d398:	1ec3      	subs	r3, r0, #3
 801d39a:	425e      	negs	r6, r3
 801d39c:	415e      	adcs	r6, r3
 801d39e:	e72e      	b.n	801d1fe <lv_obj_get_scrollbar_area+0xf8>
    if((dir & LV_DIR_HOR) &&
 801d3a0:	3e00      	subs	r6, #0
 801d3a2:	bf18      	it	ne
 801d3a4:	2601      	movne	r6, #1
 801d3a6:	e72a      	b.n	801d1fe <lv_obj_get_scrollbar_area+0xf8>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 801d3a8:	9b04      	ldr	r3, [sp, #16]
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	dc0e      	bgt.n	801d3cc <lv_obj_get_scrollbar_area+0x2c6>
 801d3ae:	9b03      	ldr	r3, [sp, #12]
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	bfd4      	ite	le
 801d3b4:	2600      	movle	r6, #0
 801d3b6:	2601      	movgt	r6, #1
 801d3b8:	e721      	b.n	801d1fe <lv_obj_get_scrollbar_area+0xf8>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 801d3ba:	f1bb 0f03 	cmp.w	fp, #3
 801d3be:	f43f af13 	beq.w	801d1e8 <lv_obj_get_scrollbar_area+0xe2>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 801d3c2:	f1bb 0f02 	cmp.w	fp, #2
 801d3c6:	f47f aef3 	bne.w	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
 801d3ca:	e6f6      	b.n	801d1ba <lv_obj_get_scrollbar_area+0xb4>
        hor_draw = true;
 801d3cc:	464e      	mov	r6, r9
 801d3ce:	e716      	b.n	801d1fe <lv_obj_get_scrollbar_area+0xf8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 801d3d0:	2231      	movs	r2, #49	; 0x31
 801d3d2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801d3d6:	4620      	mov	r0, r4
 801d3d8:	f000 fb52 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801d3dc:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 801d3de:	2801      	cmp	r0, #1
 801d3e0:	f63f af55 	bhi.w	801d28e <lv_obj_get_scrollbar_area+0x188>
 801d3e4:	e6e4      	b.n	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
    lv_coord_t content_h = obj_h + st + sb;
 801d3e6:	fa1f f38a 	uxth.w	r3, sl
 801d3ea:	9311      	str	r3, [sp, #68]	; 0x44
 801d3ec:	9b08      	ldr	r3, [sp, #32]
 801d3ee:	4498      	add	r8, r3
 801d3f0:	fa1f f888 	uxth.w	r8, r8
 801d3f4:	fa18 f28a 	uxtah	r2, r8, sl
 801d3f8:	b212      	sxth	r2, r2
    if(ver_draw && content_h) {
 801d3fa:	2a00      	cmp	r2, #0
 801d3fc:	f43f af4b 	beq.w	801d296 <lv_obj_get_scrollbar_area+0x190>
        ver_area->y1 = obj->coords.y1;
 801d400:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 801d404:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
        ver_area->y1 = obj->coords.y1;
 801d408:	807b      	strh	r3, [r7, #2]
        ver_area->y2 = obj->coords.y2;
 801d40a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801d40e:	80fb      	strh	r3, [r7, #6]
        if(rtl) {
 801d410:	9b05      	ldr	r3, [sp, #20]
 801d412:	2b01      	cmp	r3, #1
 801d414:	d15b      	bne.n	801d4ce <lv_obj_get_scrollbar_area+0x3c8>
            ver_area->x1 = obj->coords.x1 + left_space;
 801d416:	8aa3      	ldrh	r3, [r4, #20]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 801d418:	3901      	subs	r1, #1
            ver_area->x1 = obj->coords.x1 + left_space;
 801d41a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d41c:	4403      	add	r3, r0
 801d41e:	b29b      	uxth	r3, r3
 801d420:	803b      	strh	r3, [r7, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 801d422:	440b      	add	r3, r1
 801d424:	80bb      	strh	r3, [r7, #4]
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 801d426:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 801d42a:	2000      	movs	r0, #0
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 801d42c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d42e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d432:	9310      	str	r3, [sp, #64]	; 0x40
 801d434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d436:	9910      	ldr	r1, [sp, #64]	; 0x40
 801d438:	ebaa 0303 	sub.w	r3, sl, r3
 801d43c:	1a5b      	subs	r3, r3, r1
 801d43e:	eba3 030b 	sub.w	r3, r3, fp
 801d442:	fb0a f303 	mul.w	r3, sl, r3
 801d446:	fb93 f3f2 	sdiv	r3, r3, r2
 801d44a:	fa0f f983 	sxth.w	r9, r3
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 801d44e:	f7f4 fe43 	bl	80120d8 <lv_disp_get_dpi>
 801d452:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d456:	0040      	lsls	r0, r0, #1
 801d458:	28ef      	cmp	r0, #239	; 0xef
 801d45a:	dd42      	ble.n	801d4e2 <lv_obj_get_scrollbar_area+0x3dc>
 801d45c:	2000      	movs	r0, #0
 801d45e:	f7f4 fe3b 	bl	80120d8 <lv_disp_get_dpi>
 801d462:	2250      	movs	r2, #80	; 0x50
 801d464:	210a      	movs	r1, #10
 801d466:	fb00 2001 	mla	r0, r0, r1, r2
 801d46a:	22a0      	movs	r2, #160	; 0xa0
 801d46c:	fb90 f0f2 	sdiv	r0, r0, r2
 801d470:	4581      	cmp	r9, r0
 801d472:	dc13      	bgt.n	801d49c <lv_obj_get_scrollbar_area+0x396>
 801d474:	2000      	movs	r0, #0
 801d476:	f7f4 fe2f 	bl	80120d8 <lv_disp_get_dpi>
 801d47a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d47e:	0040      	lsls	r0, r0, #1
 801d480:	28ef      	cmp	r0, #239	; 0xef
 801d482:	dd30      	ble.n	801d4e6 <lv_obj_get_scrollbar_area+0x3e0>
 801d484:	2000      	movs	r0, #0
 801d486:	f7f4 fe27 	bl	80120d8 <lv_disp_get_dpi>
 801d48a:	220a      	movs	r2, #10
 801d48c:	2350      	movs	r3, #80	; 0x50
 801d48e:	fb00 3302 	mla	r3, r0, r2, r3
 801d492:	22a0      	movs	r2, #160	; 0xa0
 801d494:	fb93 f3f2 	sdiv	r3, r3, r2
 801d498:	fa0f f983 	sxth.w	r9, r3
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 801d49c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801d4a0:	fa1f fa8b 	uxth.w	sl, fp
            ver_area->y1 = obj->coords.y1 + top_space;
 801d4a4:	8ae2      	ldrh	r2, [r4, #22]
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 801d4a6:	9309      	str	r3, [sp, #36]	; 0x24
            ver_area->y1 = obj->coords.y1 + top_space;
 801d4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 801d4aa:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
            ver_area->y1 = obj->coords.y1 + top_space;
 801d4ae:	fa12 f083 	uxtah	r0, r2, r3
        if(scroll_h <= 0) {
 801d4b2:	fa0f f288 	sxth.w	r2, r8
 801d4b6:	2a00      	cmp	r2, #0
            ver_area->y1 = obj->coords.y1 + top_space;
 801d4b8:	b280      	uxth	r0, r0
        if(scroll_h <= 0) {
 801d4ba:	dc17      	bgt.n	801d4ec <lv_obj_get_scrollbar_area+0x3e6>
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 801d4bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
            ver_area->y1 = obj->coords.y1 + top_space;
 801d4be:	8078      	strh	r0, [r7, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 801d4c0:	8b63      	ldrh	r3, [r4, #26]
 801d4c2:	1a9b      	subs	r3, r3, r2
 801d4c4:	3b01      	subs	r3, #1
 801d4c6:	eba3 030a 	sub.w	r3, r3, sl
 801d4ca:	80fb      	strh	r3, [r7, #6]
 801d4cc:	e6e3      	b.n	801d296 <lv_obj_get_scrollbar_area+0x190>
            ver_area->x2 = obj->coords.x2 - right_space;
 801d4ce:	8b23      	ldrh	r3, [r4, #24]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 801d4d0:	f1c1 0101 	rsb	r1, r1, #1
            ver_area->x2 = obj->coords.x2 - right_space;
 801d4d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d4d6:	1a1b      	subs	r3, r3, r0
 801d4d8:	b29b      	uxth	r3, r3
 801d4da:	80bb      	strh	r3, [r7, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 801d4dc:	440b      	add	r3, r1
 801d4de:	803b      	strh	r3, [r7, #0]
 801d4e0:	e7a1      	b.n	801d426 <lv_obj_get_scrollbar_area+0x320>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 801d4e2:	2001      	movs	r0, #1
 801d4e4:	e7c4      	b.n	801d470 <lv_obj_get_scrollbar_area+0x36a>
 801d4e6:	f04f 0901 	mov.w	r9, #1
 801d4ea:	e7d7      	b.n	801d49c <lv_obj_get_scrollbar_area+0x396>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 801d4ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d4ee:	fa1f fe89 	uxth.w	lr, r9
 801d4f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d4f4:	188a      	adds	r2, r1, r2
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 801d4f6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 801d4fa:	1a9a      	subs	r2, r3, r2
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 801d4fc:	9b08      	ldr	r3, [sp, #32]
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 801d4fe:	eba2 020a 	sub.w	r2, r2, sl
 801d502:	eba2 020e 	sub.w	r2, r2, lr
 801d506:	fa1f fc82 	uxth.w	ip, r2
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 801d50a:	fa10 f282 	uxtah	r2, r0, r2
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 801d50e:	fb1c f003 	smulbb	r0, ip, r3
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 801d512:	f10e 33ff 	add.w	r3, lr, #4294967295
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 801d516:	fb90 f0f8 	sdiv	r0, r0, r8
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 801d51a:	1a12      	subs	r2, r2, r0
 801d51c:	b210      	sxth	r0, r2
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 801d51e:	fa13 f282 	uxtah	r2, r3, r2
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 801d522:	8078      	strh	r0, [r7, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 801d524:	80fa      	strh	r2, [r7, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 801d526:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801d52a:	4499      	add	r9, r3
 801d52c:	4548      	cmp	r0, r9
 801d52e:	da34      	bge.n	801d59a <lv_obj_get_scrollbar_area+0x494>
                ver_area->y1 = obj->coords.y1 + top_space;
 801d530:	eb01 0803 	add.w	r8, r1, r3
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 801d534:	2000      	movs	r0, #0
                ver_area->y1 = obj->coords.y1 + top_space;
 801d536:	fa0f f888 	sxth.w	r8, r8
 801d53a:	f8a7 8002 	strh.w	r8, [r7, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 801d53e:	f7f4 fdcb 	bl	80120d8 <lv_disp_get_dpi>
 801d542:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d546:	0040      	lsls	r0, r0, #1
 801d548:	28ef      	cmp	r0, #239	; 0xef
 801d54a:	dd6d      	ble.n	801d628 <lv_obj_get_scrollbar_area+0x522>
 801d54c:	2000      	movs	r0, #0
 801d54e:	f7f4 fdc3 	bl	80120d8 <lv_disp_get_dpi>
 801d552:	2350      	movs	r3, #80	; 0x50
 801d554:	220a      	movs	r2, #10
 801d556:	fb00 3002 	mla	r0, r0, r2, r3
 801d55a:	23a0      	movs	r3, #160	; 0xa0
 801d55c:	fb90 f0f3 	sdiv	r0, r0, r3
 801d560:	4480      	add	r8, r0
 801d562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d566:	4598      	cmp	r8, r3
 801d568:	dd17      	ble.n	801d59a <lv_obj_get_scrollbar_area+0x494>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 801d56a:	2000      	movs	r0, #0
 801d56c:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 801d570:	f7f4 fdb2 	bl	80120d8 <lv_disp_get_dpi>
 801d574:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d578:	0040      	lsls	r0, r0, #1
 801d57a:	28ef      	cmp	r0, #239	; 0xef
 801d57c:	dd56      	ble.n	801d62c <lv_obj_get_scrollbar_area+0x526>
 801d57e:	2000      	movs	r0, #0
 801d580:	f7f4 fdaa 	bl	80120d8 <lv_disp_get_dpi>
 801d584:	2350      	movs	r3, #80	; 0x50
 801d586:	220a      	movs	r2, #10
 801d588:	fb00 3002 	mla	r0, r0, r2, r3
 801d58c:	23a0      	movs	r3, #160	; 0xa0
 801d58e:	fb90 f0f3 	sdiv	r0, r0, r3
 801d592:	b280      	uxth	r0, r0
 801d594:	4480      	add	r8, r0
 801d596:	f8a7 8006 	strh.w	r8, [r7, #6]
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 801d59a:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 801d59e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801d5a0:	eba8 030b 	sub.w	r3, r8, fp
 801d5a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801d5a8:	1a5b      	subs	r3, r3, r1
 801d5aa:	429a      	cmp	r2, r3
 801d5ac:	f77f ae73 	ble.w	801d296 <lv_obj_get_scrollbar_area+0x190>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 801d5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 801d5b2:	2000      	movs	r0, #0
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 801d5b4:	eba8 0803 	sub.w	r8, r8, r3
 801d5b8:	eba8 080a 	sub.w	r8, r8, sl
 801d5bc:	fa0f f888 	sxth.w	r8, r8
 801d5c0:	f8a7 8006 	strh.w	r8, [r7, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 801d5c4:	f7f4 fd88 	bl	80120d8 <lv_disp_get_dpi>
 801d5c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d5cc:	0040      	lsls	r0, r0, #1
 801d5ce:	28ef      	cmp	r0, #239	; 0xef
 801d5d0:	dd2e      	ble.n	801d630 <lv_obj_get_scrollbar_area+0x52a>
 801d5d2:	2000      	movs	r0, #0
 801d5d4:	f7f4 fd80 	bl	80120d8 <lv_disp_get_dpi>
 801d5d8:	2350      	movs	r3, #80	; 0x50
 801d5da:	220a      	movs	r2, #10
 801d5dc:	fb00 3002 	mla	r0, r0, r2, r3
 801d5e0:	23a0      	movs	r3, #160	; 0xa0
 801d5e2:	fb90 f0f3 	sdiv	r0, r0, r3
 801d5e6:	eba8 0800 	sub.w	r8, r8, r0
 801d5ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d5ee:	4598      	cmp	r8, r3
 801d5f0:	f6bf ae51 	bge.w	801d296 <lv_obj_get_scrollbar_area+0x190>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 801d5f4:	2000      	movs	r0, #0
 801d5f6:	f8b7 8006 	ldrh.w	r8, [r7, #6]
 801d5fa:	f7f4 fd6d 	bl	80120d8 <lv_disp_get_dpi>
 801d5fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d602:	0040      	lsls	r0, r0, #1
 801d604:	28ef      	cmp	r0, #239	; 0xef
 801d606:	dd15      	ble.n	801d634 <lv_obj_get_scrollbar_area+0x52e>
 801d608:	2000      	movs	r0, #0
 801d60a:	f7f4 fd65 	bl	80120d8 <lv_disp_get_dpi>
 801d60e:	2350      	movs	r3, #80	; 0x50
 801d610:	220a      	movs	r2, #10
 801d612:	fb00 3002 	mla	r0, r0, r2, r3
 801d616:	23a0      	movs	r3, #160	; 0xa0
 801d618:	fb90 f0f3 	sdiv	r0, r0, r3
 801d61c:	b280      	uxth	r0, r0
 801d61e:	eba8 0800 	sub.w	r8, r8, r0
 801d622:	f8a7 8002 	strh.w	r8, [r7, #2]
 801d626:	e636      	b.n	801d296 <lv_obj_get_scrollbar_area+0x190>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 801d628:	2001      	movs	r0, #1
 801d62a:	e799      	b.n	801d560 <lv_obj_get_scrollbar_area+0x45a>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 801d62c:	2001      	movs	r0, #1
 801d62e:	e7b1      	b.n	801d594 <lv_obj_get_scrollbar_area+0x48e>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 801d630:	2001      	movs	r0, #1
 801d632:	e7d8      	b.n	801d5e6 <lv_obj_get_scrollbar_area+0x4e0>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 801d634:	2001      	movs	r0, #1
 801d636:	e7f2      	b.n	801d61e <lv_obj_get_scrollbar_area+0x518>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 801d638:	2001      	movs	r0, #1
 801d63a:	e66f      	b.n	801d31c <lv_obj_get_scrollbar_area+0x216>
 801d63c:	2601      	movs	r6, #1
 801d63e:	e683      	b.n	801d348 <lv_obj_get_scrollbar_area+0x242>
                hor_area->x1 = obj->coords.x1 + left_space;
 801d640:	4408      	add	r0, r1
 801d642:	8028      	strh	r0, [r5, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 801d644:	8b23      	ldrh	r3, [r4, #24]
 801d646:	eba3 0308 	sub.w	r3, r3, r8
 801d64a:	3b01      	subs	r3, #1
 801d64c:	eba3 030a 	sub.w	r3, r3, sl
 801d650:	e690      	b.n	801d374 <lv_obj_get_scrollbar_area+0x26e>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 801d652:	b2b3      	uxth	r3, r6
 801d654:	eb01 0208 	add.w	r2, r1, r8
 801d658:	9e08      	ldr	r6, [sp, #32]
 801d65a:	4408      	add	r0, r1
 801d65c:	1ab2      	subs	r2, r6, r2
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 801d65e:	9e03      	ldr	r6, [sp, #12]
 801d660:	b280      	uxth	r0, r0
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 801d662:	eba2 020a 	sub.w	r2, r2, sl
 801d666:	1ad2      	subs	r2, r2, r3
 801d668:	3b01      	subs	r3, #1
 801d66a:	b292      	uxth	r2, r2
            sb_x = rem - sb_x;
 801d66c:	b29b      	uxth	r3, r3
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 801d66e:	fb12 f606 	smulbb	r6, r2, r6
 801d672:	fb96 f6f7 	sdiv	r6, r6, r7
            sb_x = rem - sb_x;
 801d676:	1b92      	subs	r2, r2, r6
            if(rtl) {
 801d678:	9e05      	ldr	r6, [sp, #20]
 801d67a:	2e01      	cmp	r6, #1
            sb_x = rem - sb_x;
 801d67c:	b292      	uxth	r2, r2
            if(rtl) {
 801d67e:	d17e      	bne.n	801d77e <lv_obj_get_scrollbar_area+0x678>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 801d680:	4450      	add	r0, sl
 801d682:	4410      	add	r0, r2
 801d684:	b202      	sxth	r2, r0
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 801d686:	fa13 f080 	uxtah	r0, r3, r0
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 801d68a:	9b07      	ldr	r3, [sp, #28]
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 801d68c:	802a      	strh	r2, [r5, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 801d68e:	80a8      	strh	r0, [r5, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 801d690:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801d694:	44b1      	add	r9, r6
 801d696:	4499      	add	r9, r3
 801d698:	454a      	cmp	r2, r9
 801d69a:	da30      	bge.n	801d6fe <lv_obj_get_scrollbar_area+0x5f8>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 801d69c:	440e      	add	r6, r1
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801d69e:	2000      	movs	r0, #0
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 801d6a0:	4456      	add	r6, sl
 801d6a2:	b236      	sxth	r6, r6
 801d6a4:	802e      	strh	r6, [r5, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801d6a6:	f7f4 fd17 	bl	80120d8 <lv_disp_get_dpi>
 801d6aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d6ae:	0040      	lsls	r0, r0, #1
 801d6b0:	28ef      	cmp	r0, #239	; 0xef
 801d6b2:	dd60      	ble.n	801d776 <lv_obj_get_scrollbar_area+0x670>
 801d6b4:	2000      	movs	r0, #0
 801d6b6:	f7f4 fd0f 	bl	80120d8 <lv_disp_get_dpi>
 801d6ba:	2350      	movs	r3, #80	; 0x50
 801d6bc:	220a      	movs	r2, #10
 801d6be:	fb00 3002 	mla	r0, r0, r2, r3
 801d6c2:	23a0      	movs	r3, #160	; 0xa0
 801d6c4:	fb90 f0f3 	sdiv	r0, r0, r3
 801d6c8:	4406      	add	r6, r0
 801d6ca:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801d6ce:	429e      	cmp	r6, r3
 801d6d0:	dd15      	ble.n	801d6fe <lv_obj_get_scrollbar_area+0x5f8>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 801d6d2:	2000      	movs	r0, #0
 801d6d4:	882e      	ldrh	r6, [r5, #0]
 801d6d6:	f7f4 fcff 	bl	80120d8 <lv_disp_get_dpi>
 801d6da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d6de:	0040      	lsls	r0, r0, #1
 801d6e0:	28ef      	cmp	r0, #239	; 0xef
 801d6e2:	dd4a      	ble.n	801d77a <lv_obj_get_scrollbar_area+0x674>
 801d6e4:	2000      	movs	r0, #0
 801d6e6:	f7f4 fcf7 	bl	80120d8 <lv_disp_get_dpi>
 801d6ea:	2350      	movs	r3, #80	; 0x50
 801d6ec:	220a      	movs	r2, #10
 801d6ee:	fb00 3002 	mla	r0, r0, r2, r3
 801d6f2:	23a0      	movs	r3, #160	; 0xa0
 801d6f4:	fb90 f0f3 	sdiv	r0, r0, r3
 801d6f8:	b280      	uxth	r0, r0
 801d6fa:	4406      	add	r6, r0
 801d6fc:	80ae      	strh	r6, [r5, #4]
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 801d6fe:	f9b4 4018 	ldrsh.w	r4, [r4, #24]
 801d702:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801d706:	eba4 0b0b 	sub.w	fp, r4, fp
 801d70a:	455b      	cmp	r3, fp
 801d70c:	f77f ad50 	ble.w	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
                    hor_area->x2 = obj->coords.x2 - right_space;
 801d710:	eba4 0408 	sub.w	r4, r4, r8
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 801d714:	b224      	sxth	r4, r4
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 801d716:	2000      	movs	r0, #0
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 801d718:	80ac      	strh	r4, [r5, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 801d71a:	f7f4 fcdd 	bl	80120d8 <lv_disp_get_dpi>
 801d71e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d722:	0040      	lsls	r0, r0, #1
 801d724:	28ef      	cmp	r0, #239	; 0xef
 801d726:	dd79      	ble.n	801d81c <lv_obj_get_scrollbar_area+0x716>
 801d728:	2000      	movs	r0, #0
 801d72a:	f7f4 fcd5 	bl	80120d8 <lv_disp_get_dpi>
 801d72e:	2350      	movs	r3, #80	; 0x50
 801d730:	220a      	movs	r2, #10
 801d732:	fb00 3002 	mla	r0, r0, r2, r3
 801d736:	23a0      	movs	r3, #160	; 0xa0
 801d738:	fb90 f0f3 	sdiv	r0, r0, r3
 801d73c:	1a24      	subs	r4, r4, r0
 801d73e:	f9b5 3000 	ldrsh.w	r3, [r5]
 801d742:	429c      	cmp	r4, r3
 801d744:	f6bf ad34 	bge.w	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 801d748:	2000      	movs	r0, #0
 801d74a:	88ac      	ldrh	r4, [r5, #4]
 801d74c:	f7f4 fcc4 	bl	80120d8 <lv_disp_get_dpi>
 801d750:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d754:	0040      	lsls	r0, r0, #1
 801d756:	28ef      	cmp	r0, #239	; 0xef
 801d758:	dd62      	ble.n	801d820 <lv_obj_get_scrollbar_area+0x71a>
 801d75a:	2000      	movs	r0, #0
 801d75c:	f7f4 fcbc 	bl	80120d8 <lv_disp_get_dpi>
 801d760:	2350      	movs	r3, #80	; 0x50
 801d762:	220a      	movs	r2, #10
 801d764:	fb00 3002 	mla	r0, r0, r2, r3
 801d768:	23a0      	movs	r3, #160	; 0xa0
 801d76a:	fb90 f0f3 	sdiv	r0, r0, r3
 801d76e:	b280      	uxth	r0, r0
 801d770:	1a24      	subs	r4, r4, r0
 801d772:	802c      	strh	r4, [r5, #0]
 801d774:	e51c      	b.n	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801d776:	9805      	ldr	r0, [sp, #20]
 801d778:	e7a6      	b.n	801d6c8 <lv_obj_get_scrollbar_area+0x5c2>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 801d77a:	2001      	movs	r0, #1
 801d77c:	e7bd      	b.n	801d6fa <lv_obj_get_scrollbar_area+0x5f4>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 801d77e:	4402      	add	r2, r0
 801d780:	b210      	sxth	r0, r2
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 801d782:	fa13 f282 	uxtah	r2, r3, r2
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 801d786:	8028      	strh	r0, [r5, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 801d788:	80aa      	strh	r2, [r5, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 801d78a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801d78e:	4499      	add	r9, r3
 801d790:	4548      	cmp	r0, r9
 801d792:	da2f      	bge.n	801d7f4 <lv_obj_get_scrollbar_area+0x6ee>
                    hor_area->x1 = obj->coords.x1 + left_space;
 801d794:	4419      	add	r1, r3
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801d796:	2000      	movs	r0, #0
                    hor_area->x1 = obj->coords.x1 + left_space;
 801d798:	b20e      	sxth	r6, r1
 801d79a:	802e      	strh	r6, [r5, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801d79c:	f7f4 fc9c 	bl	80120d8 <lv_disp_get_dpi>
 801d7a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d7a4:	0040      	lsls	r0, r0, #1
 801d7a6:	28ef      	cmp	r0, #239	; 0xef
 801d7a8:	dd34      	ble.n	801d814 <lv_obj_get_scrollbar_area+0x70e>
 801d7aa:	2000      	movs	r0, #0
 801d7ac:	f7f4 fc94 	bl	80120d8 <lv_disp_get_dpi>
 801d7b0:	2350      	movs	r3, #80	; 0x50
 801d7b2:	220a      	movs	r2, #10
 801d7b4:	fb00 3002 	mla	r0, r0, r2, r3
 801d7b8:	23a0      	movs	r3, #160	; 0xa0
 801d7ba:	fb90 f0f3 	sdiv	r0, r0, r3
 801d7be:	1831      	adds	r1, r6, r0
 801d7c0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801d7c4:	4299      	cmp	r1, r3
 801d7c6:	dd15      	ble.n	801d7f4 <lv_obj_get_scrollbar_area+0x6ee>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 801d7c8:	2000      	movs	r0, #0
 801d7ca:	882e      	ldrh	r6, [r5, #0]
 801d7cc:	f7f4 fc84 	bl	80120d8 <lv_disp_get_dpi>
 801d7d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d7d4:	0040      	lsls	r0, r0, #1
 801d7d6:	28ef      	cmp	r0, #239	; 0xef
 801d7d8:	dd1e      	ble.n	801d818 <lv_obj_get_scrollbar_area+0x712>
 801d7da:	2000      	movs	r0, #0
 801d7dc:	f7f4 fc7c 	bl	80120d8 <lv_disp_get_dpi>
 801d7e0:	2350      	movs	r3, #80	; 0x50
 801d7e2:	220a      	movs	r2, #10
 801d7e4:	fb00 3002 	mla	r0, r0, r2, r3
 801d7e8:	23a0      	movs	r3, #160	; 0xa0
 801d7ea:	fb90 f0f3 	sdiv	r0, r0, r3
 801d7ee:	b280      	uxth	r0, r0
 801d7f0:	4406      	add	r6, r0
 801d7f2:	80ae      	strh	r6, [r5, #4]
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 801d7f4:	f9b4 4018 	ldrsh.w	r4, [r4, #24]
 801d7f8:	9b07      	ldr	r3, [sp, #28]
 801d7fa:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801d7fe:	1ae3      	subs	r3, r4, r3
 801d800:	eba3 030b 	sub.w	r3, r3, fp
 801d804:	429a      	cmp	r2, r3
 801d806:	f77f acd3 	ble.w	801d1b0 <lv_obj_get_scrollbar_area+0xaa>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 801d80a:	eba4 0408 	sub.w	r4, r4, r8
 801d80e:	eba4 040a 	sub.w	r4, r4, sl
 801d812:	e77f      	b.n	801d714 <lv_obj_get_scrollbar_area+0x60e>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801d814:	2001      	movs	r0, #1
 801d816:	e7d2      	b.n	801d7be <lv_obj_get_scrollbar_area+0x6b8>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 801d818:	2001      	movs	r0, #1
 801d81a:	e7e9      	b.n	801d7f0 <lv_obj_get_scrollbar_area+0x6ea>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 801d81c:	2001      	movs	r0, #1
 801d81e:	e78d      	b.n	801d73c <lv_obj_get_scrollbar_area+0x636>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 801d820:	2001      	movs	r0, #1
 801d822:	e7a5      	b.n	801d770 <lv_obj_get_scrollbar_area+0x66a>

0801d824 <lv_obj_scrollbar_invalidate>:
{
 801d824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 801d826:	aa02      	add	r2, sp, #8
 801d828:	4669      	mov	r1, sp
{
 801d82a:	4604      	mov	r4, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 801d82c:	f7ff fc6b 	bl	801d106 <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 801d830:	4668      	mov	r0, sp
 801d832:	f006 fcf0 	bl	8024216 <lv_area_get_size>
 801d836:	b918      	cbnz	r0, 801d840 <lv_obj_scrollbar_invalidate+0x1c>
 801d838:	a802      	add	r0, sp, #8
 801d83a:	f006 fcec 	bl	8024216 <lv_area_get_size>
 801d83e:	b178      	cbz	r0, 801d860 <lv_obj_scrollbar_invalidate+0x3c>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 801d840:	4668      	mov	r0, sp
 801d842:	f006 fce8 	bl	8024216 <lv_area_get_size>
 801d846:	b118      	cbz	r0, 801d850 <lv_obj_scrollbar_invalidate+0x2c>
 801d848:	4669      	mov	r1, sp
 801d84a:	4620      	mov	r0, r4
 801d84c:	f7ff f9d1 	bl	801cbf2 <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 801d850:	a802      	add	r0, sp, #8
 801d852:	f006 fce0 	bl	8024216 <lv_area_get_size>
 801d856:	b118      	cbz	r0, 801d860 <lv_obj_scrollbar_invalidate+0x3c>
 801d858:	a902      	add	r1, sp, #8
 801d85a:	4620      	mov	r0, r4
 801d85c:	f7ff f9c9 	bl	801cbf2 <lv_obj_invalidate_area>
}
 801d860:	b004      	add	sp, #16
 801d862:	bd10      	pop	{r4, pc}

0801d864 <lv_obj_readjust_scroll>:
{
 801d864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d868:	4604      	mov	r4, r0
 801d86a:	460e      	mov	r6, r1
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 801d86c:	f7ff fb6f 	bl	801cf4e <lv_obj_get_scroll_snap_y>
 801d870:	4605      	mov	r5, r0
 801d872:	b9a0      	cbnz	r0, 801d89e <lv_obj_readjust_scroll+0x3a>
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 801d874:	4620      	mov	r0, r4
 801d876:	f7ff fb76 	bl	801cf66 <lv_obj_get_scroll_y>
 801d87a:	4607      	mov	r7, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 801d87c:	4620      	mov	r0, r4
 801d87e:	f7e8 f96b 	bl	8005b58 <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 801d882:	1e02      	subs	r2, r0, #0
 801d884:	da0b      	bge.n	801d89e <lv_obj_readjust_scroll+0x3a>
 801d886:	2f00      	cmp	r7, #0
 801d888:	dd09      	ble.n	801d89e <lv_obj_readjust_scroll+0x3a>
            sb = LV_MIN(st, -sb);
 801d88a:	4252      	negs	r2, r2
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 801d88c:	4633      	mov	r3, r6
 801d88e:	4629      	mov	r1, r5
 801d890:	4620      	mov	r0, r4
            sb = LV_MIN(st, -sb);
 801d892:	42ba      	cmp	r2, r7
 801d894:	bfa8      	it	ge
 801d896:	463a      	movge	r2, r7
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 801d898:	b212      	sxth	r2, r2
 801d89a:	f7e8 fa95 	bl	8005dc8 <lv_obj_scroll_by>
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 801d89e:	4620      	mov	r0, r4
 801d8a0:	f7ff fb4f 	bl	801cf42 <lv_obj_get_scroll_snap_x>
 801d8a4:	4680      	mov	r8, r0
 801d8a6:	bb28      	cbnz	r0, 801d8f4 <lv_obj_readjust_scroll+0x90>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 801d8a8:	4620      	mov	r0, r4
 801d8aa:	f7e8 f9a7 	bl	8005bfc <lv_obj_get_scroll_left>
 801d8ae:	4607      	mov	r7, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 801d8b0:	4620      	mov	r0, r4
 801d8b2:	f7e8 fa0b 	bl	8005ccc <lv_obj_get_scroll_right>
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801d8b6:	4641      	mov	r1, r8
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 801d8b8:	4605      	mov	r5, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801d8ba:	4620      	mov	r0, r4
 801d8bc:	f7ff faed 	bl	801ce9a <lv_obj_get_style_base_dir>
 801d8c0:	2801      	cmp	r0, #1
 801d8c2:	d00f      	beq.n	801d8e4 <lv_obj_readjust_scroll+0x80>
            if(sr < 0 && sl > 0) {
 801d8c4:	2d00      	cmp	r5, #0
 801d8c6:	da15      	bge.n	801d8f4 <lv_obj_readjust_scroll+0x90>
 801d8c8:	2f00      	cmp	r7, #0
 801d8ca:	dd13      	ble.n	801d8f4 <lv_obj_readjust_scroll+0x90>
                sr = LV_MIN(sl, -sr);
 801d8cc:	426d      	negs	r5, r5
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 801d8ce:	4633      	mov	r3, r6
 801d8d0:	4642      	mov	r2, r8
                sr = LV_MIN(sl, -sr);
 801d8d2:	42bd      	cmp	r5, r7
 801d8d4:	bfa8      	it	ge
 801d8d6:	463d      	movge	r5, r7
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 801d8d8:	b229      	sxth	r1, r5
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 801d8da:	4620      	mov	r0, r4
}
 801d8dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 801d8e0:	f7e8 ba72 	b.w	8005dc8 <lv_obj_scroll_by>
            if(sl < 0 && sr > 0) {
 801d8e4:	2f00      	cmp	r7, #0
 801d8e6:	da05      	bge.n	801d8f4 <lv_obj_readjust_scroll+0x90>
 801d8e8:	2d00      	cmp	r5, #0
 801d8ea:	dd03      	ble.n	801d8f4 <lv_obj_readjust_scroll+0x90>
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 801d8ec:	4633      	mov	r3, r6
 801d8ee:	4642      	mov	r2, r8
 801d8f0:	4639      	mov	r1, r7
 801d8f2:	e7f2      	b.n	801d8da <lv_obj_readjust_scroll+0x76>
}
 801d8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d8f8 <refresh_children_style>:
{
 801d8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8fa:	4607      	mov	r7, r0
    for(i = 0; i < child_cnt; i++) {
 801d8fc:	2400      	movs	r4, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801d8fe:	f000 fc55 	bl	801e1ac <lv_obj_get_child_cnt>
 801d902:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 801d904:	42b4      	cmp	r4, r6
 801d906:	d100      	bne.n	801d90a <refresh_children_style+0x12>
}
 801d908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * child = obj->spec_attr->children[i];
 801d90a:	68bb      	ldr	r3, [r7, #8]
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    for(i = 0; i < child_cnt; i++) {
 801d912:	3401      	adds	r4, #1
        lv_obj_invalidate(child);
 801d914:	4628      	mov	r0, r5
 801d916:	f7ff f98d 	bl	801cc34 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 801d91a:	2200      	movs	r2, #0
 801d91c:	212a      	movs	r1, #42	; 0x2a
 801d91e:	4628      	mov	r0, r5
 801d920:	f7e6 fedc 	bl	80046dc <lv_event_send>
        lv_obj_invalidate(child);
 801d924:	4628      	mov	r0, r5
 801d926:	f7ff f985 	bl	801cc34 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 801d92a:	4628      	mov	r0, r5
 801d92c:	f7ff ffe4 	bl	801d8f8 <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 801d930:	e7e8      	b.n	801d904 <refresh_children_style+0xc>

0801d932 <get_local_style>:
{
 801d932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 801d936:	8c43      	ldrh	r3, [r0, #34]	; 0x22
{
 801d938:	4604      	mov	r4, r0
 801d93a:	460f      	mov	r7, r1
        if(obj->styles[i].is_local &&
 801d93c:	68c0      	ldr	r0, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 801d93e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801d942:	2200      	movs	r2, #0
 801d944:	4293      	cmp	r3, r2
 801d946:	d80c      	bhi.n	801d962 <get_local_style+0x30>
    obj->style_cnt++;
 801d948:	3301      	adds	r3, #1
 801d94a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 801d94c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d950:	f363 02c8 	bfi	r2, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801d954:	00d9      	lsls	r1, r3, #3
    obj->style_cnt++;
 801d956:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801d958:	f7f4 fee0 	bl	801271c <lv_mem_realloc>
 801d95c:	60e0      	str	r0, [r4, #12]
    LV_ASSERT_MALLOC(obj->styles);
 801d95e:	b980      	cbnz	r0, 801d982 <get_local_style+0x50>
 801d960:	e7fe      	b.n	801d960 <get_local_style+0x2e>
        if(obj->styles[i].is_local &&
 801d962:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801d966:	00d5      	lsls	r5, r2, #3
 801d968:	79ce      	ldrb	r6, [r1, #7]
 801d96a:	07f6      	lsls	r6, r6, #31
 801d96c:	d507      	bpl.n	801d97e <get_local_style+0x4c>
           obj->styles[i].selector == selector) {
 801d96e:	6849      	ldr	r1, [r1, #4]
 801d970:	f3c1 0117 	ubfx	r1, r1, #0, #24
        if(obj->styles[i].is_local &&
 801d974:	42b9      	cmp	r1, r7
 801d976:	d102      	bne.n	801d97e <get_local_style+0x4c>
            return obj->styles[i].style;
 801d978:	5940      	ldr	r0, [r0, r5]
}
 801d97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 801d97e:	3201      	adds	r2, #1
 801d980:	e7e0      	b.n	801d944 <get_local_style+0x12>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801d982:	8c65      	ldrh	r5, [r4, #34]	; 0x22
 801d984:	f3c5 05c5 	ubfx	r5, r5, #3, #6
 801d988:	3d01      	subs	r5, #1
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 801d98a:	68e0      	ldr	r0, [r4, #12]
 801d98c:	00ee      	lsls	r6, r5, #3
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801d98e:	bb05      	cbnz	r5, 801d9d2 <get_local_style+0xa0>
 801d990:	2208      	movs	r2, #8
 801d992:	2100      	movs	r1, #0
 801d994:	4430      	add	r0, r6
 801d996:	f7fc fec3 	bl	801a720 <memset>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 801d99a:	f8d4 800c 	ldr.w	r8, [r4, #12]
 801d99e:	2008      	movs	r0, #8
 801d9a0:	f7f4 fe86 	bl	80126b0 <lv_mem_alloc>
 801d9a4:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
    lv_style_init(obj->styles[i].style);
 801d9a8:	68e3      	ldr	r3, [r4, #12]
 801d9aa:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
 801d9ae:	f007 f951 	bl	8024c54 <lv_style_init>
    obj->styles[i].is_local = 1;
 801d9b2:	68e3      	ldr	r3, [r4, #12]
 801d9b4:	4433      	add	r3, r6
 801d9b6:	79da      	ldrb	r2, [r3, #7]
 801d9b8:	f042 0201 	orr.w	r2, r2, #1
 801d9bc:	71da      	strb	r2, [r3, #7]
    obj->styles[i].selector = selector;
 801d9be:	68e3      	ldr	r3, [r4, #12]
 801d9c0:	4433      	add	r3, r6
 801d9c2:	685a      	ldr	r2, [r3, #4]
 801d9c4:	f367 0217 	bfi	r2, r7, #0, #24
 801d9c8:	605a      	str	r2, [r3, #4]
    return obj->styles[i].style;
 801d9ca:	68e3      	ldr	r3, [r4, #12]
 801d9cc:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
 801d9d0:	e7d3      	b.n	801d97a <get_local_style+0x48>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 801d9d2:	f1a6 0308 	sub.w	r3, r6, #8
        obj->styles[i] = obj->styles[i - 1];
 801d9d6:	1982      	adds	r2, r0, r6
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 801d9d8:	4403      	add	r3, r0
 801d9da:	79d9      	ldrb	r1, [r3, #7]
 801d9dc:	0789      	lsls	r1, r1, #30
 801d9de:	d1d7      	bne.n	801d990 <get_local_style+0x5e>
        obj->styles[i] = obj->styles[i - 1];
 801d9e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d9e4:	e882 0003 	stmia.w	r2, {r0, r1}
 801d9e8:	e7ce      	b.n	801d988 <get_local_style+0x56>

0801d9ea <get_trans_style>:
{
 801d9ea:	b570      	push	{r4, r5, r6, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 801d9ec:	8c43      	ldrh	r3, [r0, #34]	; 0x22
{
 801d9ee:	4604      	mov	r4, r0
 801d9f0:	460d      	mov	r5, r1
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 801d9f2:	68c0      	ldr	r0, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 801d9f4:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801d9f8:	2200      	movs	r2, #0
 801d9fa:	4293      	cmp	r3, r2
 801d9fc:	d803      	bhi.n	801da06 <get_trans_style+0x1c>
    if(i != obj->style_cnt) return &obj->styles[i];
 801d9fe:	d00e      	beq.n	801da1e <get_trans_style+0x34>
 801da00:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
}
 801da04:	bd70      	pop	{r4, r5, r6, pc}
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 801da06:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801da0a:	79ce      	ldrb	r6, [r1, #7]
 801da0c:	07b6      	lsls	r6, r6, #30
 801da0e:	d504      	bpl.n	801da1a <get_trans_style+0x30>
 801da10:	6849      	ldr	r1, [r1, #4]
 801da12:	f3c1 0117 	ubfx	r1, r1, #0, #24
 801da16:	42a9      	cmp	r1, r5
 801da18:	d0f2      	beq.n	801da00 <get_trans_style+0x16>
    for(i = 0; i < obj->style_cnt; i++) {
 801da1a:	3201      	adds	r2, #1
 801da1c:	e7ed      	b.n	801d9fa <get_trans_style+0x10>
    obj->style_cnt++;
 801da1e:	3301      	adds	r3, #1
 801da20:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 801da22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801da26:	f363 02c8 	bfi	r2, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801da2a:	00d9      	lsls	r1, r3, #3
    obj->style_cnt++;
 801da2c:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801da2e:	f7f4 fe75 	bl	801271c <lv_mem_realloc>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801da32:	8c66      	ldrh	r6, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801da34:	60e0      	str	r0, [r4, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801da36:	f3c6 06c5 	ubfx	r6, r6, #3, #6
 801da3a:	3e01      	subs	r6, #1
        obj->styles[i] = obj->styles[i - 1];
 801da3c:	68e0      	ldr	r0, [r4, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801da3e:	d118      	bne.n	801da72 <get_trans_style+0x88>
 801da40:	2208      	movs	r2, #8
 801da42:	4631      	mov	r1, r6
 801da44:	f7fc fe6c 	bl	801a720 <memset>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 801da48:	68e6      	ldr	r6, [r4, #12]
 801da4a:	2008      	movs	r0, #8
 801da4c:	f7f4 fe30 	bl	80126b0 <lv_mem_alloc>
 801da50:	6030      	str	r0, [r6, #0]
    lv_style_init(obj->styles[0].style);
 801da52:	68e3      	ldr	r3, [r4, #12]
 801da54:	6818      	ldr	r0, [r3, #0]
 801da56:	f007 f8fd 	bl	8024c54 <lv_style_init>
    obj->styles[0].is_trans = 1;
 801da5a:	68e2      	ldr	r2, [r4, #12]
 801da5c:	79d3      	ldrb	r3, [r2, #7]
 801da5e:	f043 0302 	orr.w	r3, r3, #2
 801da62:	71d3      	strb	r3, [r2, #7]
    obj->styles[0].selector = selector;
 801da64:	68e3      	ldr	r3, [r4, #12]
 801da66:	685a      	ldr	r2, [r3, #4]
 801da68:	f365 0217 	bfi	r2, r5, #0, #24
 801da6c:	605a      	str	r2, [r3, #4]
    return &obj->styles[0];
 801da6e:	68e0      	ldr	r0, [r4, #12]
 801da70:	e7c8      	b.n	801da04 <get_trans_style+0x1a>
        obj->styles[i] = obj->styles[i - 1];
 801da72:	eb00 03c6 	add.w	r3, r0, r6, lsl #3
 801da76:	e913 0003 	ldmdb	r3, {r0, r1}
 801da7a:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801da7e:	e7dc      	b.n	801da3a <get_trans_style+0x50>

0801da80 <lv_obj_get_style_prop>:
{
 801da80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da84:	4604      	mov	r4, r0
 801da86:	b085      	sub	sp, #20
    return _lv_style_prop_lookup_flags(prop) & flag;
 801da88:	4610      	mov	r0, r2
 801da8a:	460f      	mov	r7, r1
 801da8c:	4615      	mov	r5, r2
 801da8e:	f7f4 ff79 	bl	8012984 <_lv_style_prop_lookup_flags>
 801da92:	f000 0a01 	and.w	sl, r0, #1
    while(obj) {
 801da96:	2c00      	cmp	r4, #0
 801da98:	d154      	bne.n	801db44 <lv_obj_get_style_prop+0xc4>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 801da9a:	2f00      	cmp	r7, #0
 801da9c:	f040 808f 	bne.w	801dbbe <lv_obj_get_style_prop+0x13e>
 801daa0:	2d01      	cmp	r5, #1
 801daa2:	d002      	beq.n	801daaa <lv_obj_get_style_prop+0x2a>
 801daa4:	2d04      	cmp	r5, #4
 801daa6:	f040 808a 	bne.w	801dbbe <lv_obj_get_style_prop+0x13e>
            const lv_obj_class_t * cls = obj->class_p;
 801daaa:	6823      	ldr	r3, [r4, #0]
            while(cls) {
 801daac:	2b00      	cmp	r3, #0
 801daae:	d17c      	bne.n	801dbaa <lv_obj_get_style_prop+0x12a>
                value_act.num = 0;
 801dab0:	4618      	mov	r0, r3
 801dab2:	e074      	b.n	801db9e <lv_obj_get_style_prop+0x11e>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 801dab4:	68e2      	ldr	r2, [r4, #12]
 801dab6:	00f1      	lsls	r1, r6, #3
 801dab8:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
        if(obj_style->is_trans == false) break;
 801dabc:	79d8      	ldrb	r0, [r3, #7]
 801dabe:	0780      	lsls	r0, r0, #30
 801dac0:	d558      	bpl.n	801db74 <lv_obj_get_style_prop+0xf4>
        if(skip_trans) continue;
 801dac2:	f1b9 0f00 	cmp.w	r9, #0
 801dac6:	d001      	beq.n	801dacc <lv_obj_get_style_prop+0x4c>
    for(i = 0; i < obj->style_cnt; i++) {
 801dac8:	3601      	adds	r6, #1
 801daca:	e04e      	b.n	801db6a <lv_obj_get_style_prop+0xea>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 801dacc:	685b      	ldr	r3, [r3, #4]
    return selector & 0xFF0000;
 801dace:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 801dad2:	42bb      	cmp	r3, r7
 801dad4:	d1f8      	bne.n	801dac8 <lv_obj_get_style_prop+0x48>
        if((obj_style->style->has_group & group) == 0) continue;
 801dad6:	5850      	ldr	r0, [r2, r1]
 801dad8:	7983      	ldrb	r3, [r0, #6]
 801dada:	ea18 0f03 	tst.w	r8, r3
 801dade:	d0f3      	beq.n	801dac8 <lv_obj_get_style_prop+0x48>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 801dae0:	aa03      	add	r2, sp, #12
 801dae2:	4629      	mov	r1, r5
 801dae4:	f007 f92b 	bl	8024d3e <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 801dae8:	2801      	cmp	r0, #1
 801daea:	d101      	bne.n	801daf0 <lv_obj_get_style_prop+0x70>
        *v = value_tmp;
 801daec:	9803      	ldr	r0, [sp, #12]
    if(found != LV_STYLE_RES_FOUND) {
 801daee:	e056      	b.n	801db9e <lv_obj_get_style_prop+0x11e>
        else if(found == LV_STYLE_RES_INHERIT) {
 801daf0:	2802      	cmp	r0, #2
 801daf2:	d1e9      	bne.n	801dac8 <lv_obj_get_style_prop+0x48>
        if(!inheritable) break;
 801daf4:	f1ba 0f00 	cmp.w	sl, #0
 801daf8:	d0cf      	beq.n	801da9a <lv_obj_get_style_prop+0x1a>
        obj = lv_obj_get_parent(obj);
 801dafa:	4620      	mov	r0, r4
 801dafc:	f000 fb44 	bl	801e188 <lv_obj_get_parent>
 801db00:	4604      	mov	r4, r0
 801db02:	e7c8      	b.n	801da96 <lv_obj_get_style_prop+0x16>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 801db04:	68e2      	ldr	r2, [r4, #12]
 801db06:	f852 0036 	ldr.w	r0, [r2, r6, lsl #3]
 801db0a:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
 801db0e:	7982      	ldrb	r2, [r0, #6]
 801db10:	ea18 0f02 	tst.w	r8, r2
 801db14:	d006      	beq.n	801db24 <lv_obj_get_style_prop+0xa4>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 801db16:	684a      	ldr	r2, [r1, #4]
 801db18:	f3c2 0117 	ubfx	r1, r2, #0, #24
    return selector & 0xFF0000;
 801db1c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
        if(part_act != part) continue;
 801db20:	42ba      	cmp	r2, r7
 801db22:	d02a      	beq.n	801db7a <lv_obj_get_style_prop+0xfa>
    for(i = 0; i < obj->style_cnt; i++) {
 801db24:	4699      	mov	r9, r3
    for(; i < obj->style_cnt; i++) {
 801db26:	3601      	adds	r6, #1
 801db28:	464b      	mov	r3, r9
 801db2a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 801db2c:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 801db30:	4296      	cmp	r6, r2
 801db32:	d3e7      	bcc.n	801db04 <lv_obj_get_style_prop+0x84>
    if(weight >= 0) {
 801db34:	3301      	adds	r3, #1
 801db36:	d1d9      	bne.n	801daec <lv_obj_get_style_prop+0x6c>
        if(!inheritable) break;
 801db38:	f1ba 0f00 	cmp.w	sl, #0
 801db3c:	d0ad      	beq.n	801da9a <lv_obj_get_style_prop+0x1a>
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 801db3e:	2f00      	cmp	r7, #0
 801db40:	d0db      	beq.n	801dafa <lv_obj_get_style_prop+0x7a>
            part = LV_PART_MAIN;
 801db42:	2700      	movs	r7, #0
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 801db44:	4628      	mov	r0, r5
    for(i = 0; i < obj->style_cnt; i++) {
 801db46:	2600      	movs	r6, #0
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 801db48:	f007 f94a 	bl	8024de0 <_lv_style_get_prop_group>
 801db4c:	2301      	movs	r3, #1
    lv_state_t state = obj->state;
 801db4e:	f8b4 b020 	ldrh.w	fp, [r4, #32]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 801db52:	fa03 f800 	lsl.w	r8, r3, r0
    bool skip_trans = obj->skip_trans;
 801db56:	f894 9022 	ldrb.w	r9, [r4, #34]	; 0x22
    lv_state_t state_inv = ~state;
 801db5a:	ea6f 030b 	mvn.w	r3, fp
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 801db5e:	fa5f f888 	uxtb.w	r8, r8
    bool skip_trans = obj->skip_trans;
 801db62:	f3c9 0980 	ubfx	r9, r9, #2, #1
    lv_state_t state_inv = ~state;
 801db66:	b29b      	uxth	r3, r3
 801db68:	9300      	str	r3, [sp, #0]
    for(i = 0; i < obj->style_cnt; i++) {
 801db6a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 801db6c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801db70:	429e      	cmp	r6, r3
 801db72:	d39f      	bcc.n	801dab4 <lv_obj_get_style_prop+0x34>
 801db74:	f04f 33ff 	mov.w	r3, #4294967295
 801db78:	e7d7      	b.n	801db2a <lv_obj_get_style_prop+0xaa>
        if((state_act & state_inv)) continue;
 801db7a:	9a00      	ldr	r2, [sp, #0]
    return selector & 0xFFFF;
 801db7c:	fa1f f981 	uxth.w	r9, r1
        if((state_act & state_inv)) continue;
 801db80:	4211      	tst	r1, r2
 801db82:	d1cf      	bne.n	801db24 <lv_obj_get_style_prop+0xa4>
        if(state_act <= weight) continue;
 801db84:	4599      	cmp	r9, r3
 801db86:	ddcd      	ble.n	801db24 <lv_obj_get_style_prop+0xa4>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 801db88:	aa03      	add	r2, sp, #12
 801db8a:	4629      	mov	r1, r5
 801db8c:	9301      	str	r3, [sp, #4]
 801db8e:	f007 f8d6 	bl	8024d3e <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 801db92:	2801      	cmp	r0, #1
 801db94:	9b01      	ldr	r3, [sp, #4]
 801db96:	d105      	bne.n	801dba4 <lv_obj_get_style_prop+0x124>
            if(state_act == state) {
 801db98:	45cb      	cmp	fp, r9
                *v = value_tmp;
 801db9a:	9803      	ldr	r0, [sp, #12]
            if(state_act == state) {
 801db9c:	d1c3      	bne.n	801db26 <lv_obj_get_style_prop+0xa6>
}
 801db9e:	b005      	add	sp, #20
 801dba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(found == LV_STYLE_RES_INHERIT) {
 801dba4:	2802      	cmp	r0, #2
 801dba6:	d1bd      	bne.n	801db24 <lv_obj_get_style_prop+0xa4>
 801dba8:	e7a4      	b.n	801daf4 <lv_obj_get_style_prop+0x74>
                if(prop == LV_STYLE_WIDTH) {
 801dbaa:	2d01      	cmp	r5, #1
                    if(cls->width_def != 0) break;
 801dbac:	bf0c      	ite	eq
 801dbae:	f9b3 0014 	ldrsheq.w	r0, [r3, #20]
                    if(cls->height_def != 0) break;
 801dbb2:	f9b3 0016 	ldrshne.w	r0, [r3, #22]
 801dbb6:	2800      	cmp	r0, #0
 801dbb8:	d1f1      	bne.n	801db9e <lv_obj_get_style_prop+0x11e>
                cls = cls->base_class;
 801dbba:	681b      	ldr	r3, [r3, #0]
 801dbbc:	e776      	b.n	801daac <lv_obj_get_style_prop+0x2c>
            value_act = lv_style_prop_get_default(prop);
 801dbbe:	4628      	mov	r0, r5
 801dbc0:	f7f4 fe8e 	bl	80128e0 <lv_style_prop_get_default>
 801dbc4:	e7eb      	b.n	801db9e <lv_obj_get_style_prop+0x11e>

0801dbc6 <trans_anim_start_cb>:
{
 801dbc6:	b570      	push	{r4, r5, r6, lr}
    trans_t * tr = a->var;
 801dbc8:	6804      	ldr	r4, [r0, #0]
    return selector & 0xFF0000;
 801dbca:	68a5      	ldr	r5, [r4, #8]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 801dbcc:	88a2      	ldrh	r2, [r4, #4]
    return selector & 0xFF0000;
 801dbce:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 801dbd2:	6820      	ldr	r0, [r4, #0]
 801dbd4:	4629      	mov	r1, r5
 801dbd6:	f7ff ff53 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_prop_t prop_tmp = tr->prop;
 801dbda:	88a6      	ldrh	r6, [r4, #4]
    tr->prop = LV_STYLE_PROP_INV;
 801dbdc:	2300      	movs	r3, #0
    trans_del(tr->obj, part, prop_tmp, tr);
 801dbde:	4629      	mov	r1, r5
 801dbe0:	4632      	mov	r2, r6
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 801dbe2:	60e0      	str	r0, [r4, #12]
    tr->prop = LV_STYLE_PROP_INV;
 801dbe4:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 801dbe6:	4623      	mov	r3, r4
 801dbe8:	6820      	ldr	r0, [r4, #0]
 801dbea:	f7e8 fb1f 	bl	800622c <trans_del.isra.0>
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 801dbee:	68a1      	ldr	r1, [r4, #8]
 801dbf0:	6820      	ldr	r0, [r4, #0]
    tr->prop = prop_tmp;
 801dbf2:	80a6      	strh	r6, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 801dbf4:	f7ff fef9 	bl	801d9ea <get_trans_style>
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 801dbf8:	68e2      	ldr	r2, [r4, #12]
 801dbfa:	88a1      	ldrh	r1, [r4, #4]
 801dbfc:	6800      	ldr	r0, [r0, #0]
}
 801dbfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 801dc02:	f7f4 beb9 	b.w	8012978 <lv_style_set_prop>

0801dc06 <lv_obj_add_style>:
{
 801dc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc0a:	4615      	mov	r5, r2
 801dc0c:	4604      	mov	r4, r0
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 801dc0e:	2300      	movs	r3, #0
{
 801dc10:	460e      	mov	r6, r1
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 801dc12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dc16:	4629      	mov	r1, r5
 801dc18:	f7e8 fb08 	bl	800622c <trans_del.isra.0>
    for(i = 0; i < obj->style_cnt; i++) {
 801dc1c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
        if(obj->styles[i].is_trans) continue;
 801dc1e:	68e0      	ldr	r0, [r4, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 801dc20:	f04f 0800 	mov.w	r8, #0
 801dc24:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801dc28:	4543      	cmp	r3, r8
 801dc2a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801dc2e:	d826      	bhi.n	801dc7e <lv_obj_add_style+0x78>
    obj->style_cnt++;
 801dc30:	3301      	adds	r3, #1
 801dc32:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 801dc34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801dc38:	f363 02c8 	bfi	r2, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801dc3c:	00d9      	lsls	r1, r3, #3
    obj->style_cnt++;
 801dc3e:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801dc40:	f7f4 fd6c 	bl	801271c <lv_mem_realloc>
    for(j = obj->style_cnt - 1; j > i ; j--) {
 801dc44:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801dc46:	60e0      	str	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 801dc48:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801dc4c:	3b01      	subs	r3, #1
        obj->styles[j] = obj->styles[j - 1];
 801dc4e:	68e0      	ldr	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 801dc50:	4598      	cmp	r8, r3
 801dc52:	d31b      	bcc.n	801dc8c <lv_obj_add_style+0x86>
 801dc54:	2208      	movs	r2, #8
 801dc56:	2100      	movs	r1, #0
 801dc58:	4438      	add	r0, r7
 801dc5a:	f7fc fd61 	bl	801a720 <memset>
    obj->styles[i].style = style;
 801dc5e:	68e3      	ldr	r3, [r4, #12]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 801dc60:	4629      	mov	r1, r5
 801dc62:	4620      	mov	r0, r4
    obj->styles[i].style = style;
 801dc64:	51de      	str	r6, [r3, r7]
    obj->styles[i].selector = selector;
 801dc66:	68e3      	ldr	r3, [r4, #12]
 801dc68:	443b      	add	r3, r7
 801dc6a:	685a      	ldr	r2, [r3, #4]
 801dc6c:	f365 0217 	bfi	r2, r5, #0, #24
 801dc70:	605a      	str	r2, [r3, #4]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 801dc72:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
 801dc76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 801dc7a:	f7e8 bb35 	b.w	80062e8 <lv_obj_refresh_style>
        if(obj->styles[i].is_trans) continue;
 801dc7e:	19c2      	adds	r2, r0, r7
        if(obj->styles[i].is_local) continue;
 801dc80:	79d2      	ldrb	r2, [r2, #7]
 801dc82:	0792      	lsls	r2, r2, #30
 801dc84:	d0d4      	beq.n	801dc30 <lv_obj_add_style+0x2a>
    for(i = 0; i < obj->style_cnt; i++) {
 801dc86:	f108 0801 	add.w	r8, r8, #1
 801dc8a:	e7cd      	b.n	801dc28 <lv_obj_add_style+0x22>
        obj->styles[j] = obj->styles[j - 1];
 801dc8c:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801dc90:	e912 0003 	ldmdb	r2, {r0, r1}
 801dc94:	e882 0003 	stmia.w	r2, {r0, r1}
 801dc98:	e7d8      	b.n	801dc4c <lv_obj_add_style+0x46>

0801dc9a <report_style_change_core>:
{
 801dc9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 801dc9c:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
{
 801dc9e:	4605      	mov	r5, r0
 801dca0:	460c      	mov	r4, r1
    for(i = 0; i < obj->style_cnt; i++) {
 801dca2:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 801dca6:	f3c3 02c5 	ubfx	r2, r3, #3, #6
 801dcaa:	d00d      	beq.n	801dcc8 <report_style_change_core+0x2e>
        if(style == NULL || obj->styles[i].style == style) {
 801dcac:	b128      	cbz	r0, 801dcba <report_style_change_core+0x20>
    for(i = 0; i < obj->style_cnt; i++) {
 801dcae:	2300      	movs	r3, #0
        if(style == NULL || obj->styles[i].style == style) {
 801dcb0:	68e1      	ldr	r1, [r4, #12]
 801dcb2:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 801dcb6:	42a9      	cmp	r1, r5
 801dcb8:	d10e      	bne.n	801dcd8 <report_style_change_core+0x3e>
            lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 801dcba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dcbe:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 801dcc2:	4620      	mov	r0, r4
 801dcc4:	f7e8 fb10 	bl	80062e8 <lv_obj_refresh_style>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801dcc8:	4620      	mov	r0, r4
    for(i = 0; i < child_cnt; i++) {
 801dcca:	2600      	movs	r6, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801dccc:	f000 fa6e 	bl	801e1ac <lv_obj_get_child_cnt>
 801dcd0:	4607      	mov	r7, r0
    for(i = 0; i < child_cnt; i++) {
 801dcd2:	42be      	cmp	r6, r7
 801dcd4:	d104      	bne.n	801dce0 <report_style_change_core+0x46>
}
 801dcd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 801dcd8:	3301      	adds	r3, #1
 801dcda:	429a      	cmp	r2, r3
 801dcdc:	d8e8      	bhi.n	801dcb0 <report_style_change_core+0x16>
 801dcde:	e7f3      	b.n	801dcc8 <report_style_change_core+0x2e>
        report_style_change_core(style, obj->spec_attr->children[i]);
 801dce0:	68a3      	ldr	r3, [r4, #8]
 801dce2:	4628      	mov	r0, r5
 801dce4:	681b      	ldr	r3, [r3, #0]
 801dce6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    for(i = 0; i < child_cnt; i++) {
 801dcea:	3601      	adds	r6, #1
        report_style_change_core(style, obj->spec_attr->children[i]);
 801dcec:	f7ff ffd5 	bl	801dc9a <report_style_change_core>
    for(i = 0; i < child_cnt; i++) {
 801dcf0:	e7ef      	b.n	801dcd2 <report_style_change_core+0x38>

0801dcf2 <lv_obj_remove_style>:
{
 801dcf2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcf6:	4604      	mov	r4, r0
    return selector & 0xFFFF;
 801dcf8:	fa1f f982 	uxth.w	r9, r2
    return selector & 0xFF0000;
 801dcfc:	f402 057f 	and.w	r5, r2, #16711680	; 0xff0000
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 801dd00:	4688      	mov	r8, r1
 801dd02:	b1d1      	cbz	r1, 801dd3a <lv_obj_remove_style+0x48>
 801dd04:	79ce      	ldrb	r6, [r1, #7]
 801dd06:	3e00      	subs	r6, #0
 801dd08:	bf18      	it	ne
 801dd0a:	2601      	movne	r6, #1
 801dd0c:	4276      	negs	r6, r6
 801dd0e:	b2b6      	uxth	r6, r6
    bool deleted = false;
 801dd10:	2200      	movs	r2, #0
        if((state != LV_STATE_ANY && state_act != state) ||
 801dd12:	f64f 7aff 	movw	sl, #65535	; 0xffff
    uint32_t i = 0;
 801dd16:	4617      	mov	r7, r2
    while(i <  obj->style_cnt) {
 801dd18:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 801dd1a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801dd1e:	42bb      	cmp	r3, r7
 801dd20:	d80e      	bhi.n	801dd40 <lv_obj_remove_style+0x4e>
    if(deleted && prop != LV_STYLE_PROP_INV) {
 801dd22:	2a00      	cmp	r2, #0
 801dd24:	d064      	beq.n	801ddf0 <lv_obj_remove_style+0xfe>
 801dd26:	2e00      	cmp	r6, #0
 801dd28:	d062      	beq.n	801ddf0 <lv_obj_remove_style+0xfe>
        lv_obj_refresh_style(obj, part, prop);
 801dd2a:	4629      	mov	r1, r5
 801dd2c:	4620      	mov	r0, r4
 801dd2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
 801dd32:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, part, prop);
 801dd36:	f7e8 bad7 	b.w	80062e8 <lv_obj_refresh_style>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 801dd3a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801dd3e:	e7e7      	b.n	801dd10 <lv_obj_remove_style+0x1e>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 801dd40:	68e0      	ldr	r0, [r4, #12]
        if((state != LV_STATE_ANY && state_act != state) ||
 801dd42:	45d1      	cmp	r9, sl
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 801dd44:	ea4f 0bc7 	mov.w	fp, r7, lsl #3
 801dd48:	eb00 01c7 	add.w	r1, r0, r7, lsl #3
 801dd4c:	684b      	ldr	r3, [r1, #4]
 801dd4e:	f3c3 0317 	ubfx	r3, r3, #0, #24
        if((state != LV_STATE_ANY && state_act != state) ||
 801dd52:	d003      	beq.n	801dd5c <lv_obj_remove_style+0x6a>
 801dd54:	fa1f fc83 	uxth.w	ip, r3
 801dd58:	45cc      	cmp	ip, r9
 801dd5a:	d10d      	bne.n	801dd78 <lv_obj_remove_style+0x86>
 801dd5c:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 801dd60:	d003      	beq.n	801dd6a <lv_obj_remove_style+0x78>
    return selector & 0xFF0000;
 801dd62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
           (part != LV_PART_ANY && part_act != part) ||
 801dd66:	42ab      	cmp	r3, r5
 801dd68:	d106      	bne.n	801dd78 <lv_obj_remove_style+0x86>
 801dd6a:	f1b8 0f00 	cmp.w	r8, #0
 801dd6e:	d005      	beq.n	801dd7c <lv_obj_remove_style+0x8a>
           (style != NULL && style != obj->styles[i].style)) {
 801dd70:	f850 300b 	ldr.w	r3, [r0, fp]
 801dd74:	4543      	cmp	r3, r8
 801dd76:	d001      	beq.n	801dd7c <lv_obj_remove_style+0x8a>
            i++;
 801dd78:	3701      	adds	r7, #1
            continue;
 801dd7a:	e7cd      	b.n	801dd18 <lv_obj_remove_style+0x26>
        if(obj->styles[i].is_trans) {
 801dd7c:	79cb      	ldrb	r3, [r1, #7]
 801dd7e:	0799      	lsls	r1, r3, #30
 801dd80:	d506      	bpl.n	801dd90 <lv_obj_remove_style+0x9e>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 801dd82:	2300      	movs	r3, #0
 801dd84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dd88:	4629      	mov	r1, r5
 801dd8a:	4620      	mov	r0, r4
 801dd8c:	f7e8 fa4e 	bl	800622c <trans_del.isra.0>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 801dd90:	68e3      	ldr	r3, [r4, #12]
 801dd92:	eb03 020b 	add.w	r2, r3, fp
 801dd96:	79d2      	ldrb	r2, [r2, #7]
 801dd98:	0792      	lsls	r2, r2, #30
 801dd9a:	d00c      	beq.n	801ddb6 <lv_obj_remove_style+0xc4>
            lv_style_reset(obj->styles[i].style);
 801dd9c:	f853 000b 	ldr.w	r0, [r3, fp]
 801dda0:	f006 ff5c 	bl	8024c5c <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 801dda4:	68e3      	ldr	r3, [r4, #12]
 801dda6:	f853 000b 	ldr.w	r0, [r3, fp]
 801ddaa:	f7f4 fc9f 	bl	80126ec <lv_mem_free>
            obj->styles[i].style = NULL;
 801ddae:	68e3      	ldr	r3, [r4, #12]
 801ddb0:	2200      	movs	r2, #0
 801ddb2:	f843 200b 	str.w	r2, [r3, fp]
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 801ddb6:	463a      	mov	r2, r7
 801ddb8:	e006      	b.n	801ddc8 <lv_obj_remove_style+0xd6>
            obj->styles[j] = obj->styles[j + 1];
 801ddba:	3201      	adds	r2, #1
 801ddbc:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 801ddc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ddc4:	e903 0003 	stmdb	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 801ddc8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
            obj->styles[j] = obj->styles[j + 1];
 801ddca:	68e0      	ldr	r0, [r4, #12]
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 801ddcc:	f3c3 01c5 	ubfx	r1, r3, #3, #6
 801ddd0:	f101 3cff 	add.w	ip, r1, #4294967295
 801ddd4:	4594      	cmp	ip, r2
 801ddd6:	d8f0      	bhi.n	801ddba <lv_obj_remove_style+0xc8>
        obj->style_cnt--;
 801ddd8:	313f      	adds	r1, #63	; 0x3f
 801ddda:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801ddde:	f361 03c8 	bfi	r3, r1, #3, #6
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801dde2:	00c9      	lsls	r1, r1, #3
        obj->style_cnt--;
 801dde4:	8463      	strh	r3, [r4, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801dde6:	f7f4 fc99 	bl	801271c <lv_mem_realloc>
        deleted = true;
 801ddea:	2201      	movs	r2, #1
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801ddec:	60e0      	str	r0, [r4, #12]
        deleted = true;
 801ddee:	e793      	b.n	801dd18 <lv_obj_remove_style+0x26>
}
 801ddf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ddf4 <lv_obj_set_local_style_prop>:
{
 801ddf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddf6:	460d      	mov	r5, r1
 801ddf8:	4617      	mov	r7, r2
 801ddfa:	461c      	mov	r4, r3
    lv_style_t * style = get_local_style(obj, selector);
 801ddfc:	4619      	mov	r1, r3
{
 801ddfe:	4606      	mov	r6, r0
    lv_style_t * style = get_local_style(obj, selector);
 801de00:	f7ff fd97 	bl	801d932 <get_local_style>
    lv_style_set_prop(style, prop, value);
 801de04:	463a      	mov	r2, r7
 801de06:	4629      	mov	r1, r5
 801de08:	f7f4 fdb6 	bl	8012978 <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 801de0c:	462a      	mov	r2, r5
 801de0e:	4621      	mov	r1, r4
 801de10:	4630      	mov	r0, r6
}
 801de12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_refresh_style(obj, selector, prop);
 801de16:	f7e8 ba67 	b.w	80062e8 <lv_obj_refresh_style>

0801de1a <lv_obj_get_local_style_prop>:
{
 801de1a:	b5f0      	push	{r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 801de1c:	8c45      	ldrh	r5, [r0, #34]	; 0x22
 801de1e:	2400      	movs	r4, #0
 801de20:	f3c5 05c5 	ubfx	r5, r5, #3, #6
 801de24:	42a5      	cmp	r5, r4
 801de26:	d801      	bhi.n	801de2c <lv_obj_get_local_style_prop+0x12>
}
 801de28:	2000      	movs	r0, #0
 801de2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(obj->styles[i].is_local &&
 801de2c:	68c7      	ldr	r7, [r0, #12]
 801de2e:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 801de32:	eb07 06c4 	add.w	r6, r7, r4, lsl #3
 801de36:	f896 e007 	ldrb.w	lr, [r6, #7]
 801de3a:	f01e 0f01 	tst.w	lr, #1
 801de3e:	d00a      	beq.n	801de56 <lv_obj_get_local_style_prop+0x3c>
           obj->styles[i].selector == selector) {
 801de40:	6876      	ldr	r6, [r6, #4]
 801de42:	f3c6 0617 	ubfx	r6, r6, #0, #24
        if(obj->styles[i].is_local &&
 801de46:	429e      	cmp	r6, r3
 801de48:	d105      	bne.n	801de56 <lv_obj_get_local_style_prop+0x3c>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 801de4a:	f857 000c 	ldr.w	r0, [r7, ip]
}
 801de4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 801de52:	f006 bf74 	b.w	8024d3e <lv_style_get_prop>
    for(i = 0; i < obj->style_cnt; i++) {
 801de56:	3401      	adds	r4, #1
 801de58:	e7e4      	b.n	801de24 <lv_obj_get_local_style_prop+0xa>

0801de5a <lv_obj_remove_local_style_prop>:
{
 801de5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de5c:	460f      	mov	r7, r1
    for(i = 0; i < obj->style_cnt; i++) {
 801de5e:	8c41      	ldrh	r1, [r0, #34]	; 0x22
{
 801de60:	4604      	mov	r4, r0
 801de62:	4616      	mov	r6, r2
    for(i = 0; i < obj->style_cnt; i++) {
 801de64:	f3c1 01c5 	ubfx	r1, r1, #3, #6
 801de68:	2300      	movs	r3, #0
 801de6a:	4299      	cmp	r1, r3
 801de6c:	d803      	bhi.n	801de76 <lv_obj_remove_local_style_prop+0x1c>
    if(i == obj->style_cnt) return false;
 801de6e:	d10d      	bne.n	801de8c <lv_obj_remove_local_style_prop+0x32>
 801de70:	2500      	movs	r5, #0
}
 801de72:	4628      	mov	r0, r5
 801de74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(obj->styles[i].is_local &&
 801de76:	68e2      	ldr	r2, [r4, #12]
 801de78:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801de7c:	79d0      	ldrb	r0, [r2, #7]
 801de7e:	07c0      	lsls	r0, r0, #31
 801de80:	d513      	bpl.n	801deaa <lv_obj_remove_local_style_prop+0x50>
           obj->styles[i].selector == selector) {
 801de82:	6852      	ldr	r2, [r2, #4]
 801de84:	f3c2 0217 	ubfx	r2, r2, #0, #24
        if(obj->styles[i].is_local &&
 801de88:	42b2      	cmp	r2, r6
 801de8a:	d10e      	bne.n	801deaa <lv_obj_remove_local_style_prop+0x50>
    lv_res_t res = lv_style_remove_prop(obj->styles[i].style, prop);
 801de8c:	68e2      	ldr	r2, [r4, #12]
 801de8e:	4639      	mov	r1, r7
 801de90:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801de94:	f006 fef7 	bl	8024c86 <lv_style_remove_prop>
    if(res == LV_RES_OK) {
 801de98:	4605      	mov	r5, r0
 801de9a:	2800      	cmp	r0, #0
 801de9c:	d0e8      	beq.n	801de70 <lv_obj_remove_local_style_prop+0x16>
        lv_obj_refresh_style(obj, selector, prop);
 801de9e:	463a      	mov	r2, r7
 801dea0:	4631      	mov	r1, r6
 801dea2:	4620      	mov	r0, r4
 801dea4:	f7e8 fa20 	bl	80062e8 <lv_obj_refresh_style>
 801dea8:	e7e3      	b.n	801de72 <lv_obj_remove_local_style_prop+0x18>
    for(i = 0; i < obj->style_cnt; i++) {
 801deaa:	3301      	adds	r3, #1
 801deac:	e7dd      	b.n	801de6a <lv_obj_remove_local_style_prop+0x10>

0801deae <_lv_obj_style_apply_color_filter>:
{
 801deae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801deb0:	460f      	mov	r7, r1
 801deb2:	4615      	mov	r5, r2
    if(obj == NULL) return v;
 801deb4:	4606      	mov	r6, r0
 801deb6:	b1a0      	cbz	r0, 801dee2 <_lv_obj_style_apply_color_filter+0x34>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 801deb8:	2261      	movs	r2, #97	; 0x61
 801deba:	f7ff fde1 	bl	801da80 <lv_obj_get_style_prop>
    if(f && f->filter_cb) {
 801debe:	4604      	mov	r4, r0
 801dec0:	b178      	cbz	r0, 801dee2 <_lv_obj_style_apply_color_filter+0x34>
 801dec2:	6803      	ldr	r3, [r0, #0]
 801dec4:	b16b      	cbz	r3, 801dee2 <_lv_obj_style_apply_color_filter+0x34>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 801dec6:	2262      	movs	r2, #98	; 0x62
 801dec8:	4639      	mov	r1, r7
 801deca:	4630      	mov	r0, r6
 801decc:	f7ff fdd8 	bl	801da80 <lv_obj_get_style_prop>
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 801ded0:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 801ded4:	d005      	beq.n	801dee2 <_lv_obj_style_apply_color_filter+0x34>
 801ded6:	4629      	mov	r1, r5
 801ded8:	6823      	ldr	r3, [r4, #0]
 801deda:	4620      	mov	r0, r4
 801dedc:	4798      	blx	r3
 801dede:	f360 050f 	bfi	r5, r0, #0, #16
}
 801dee2:	4628      	mov	r0, r5
 801dee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801dee6 <_lv_obj_style_state_compare>:
{
 801dee6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 801deea:	2500      	movs	r5, #0
{
 801deec:	4607      	mov	r7, r0
        bool valid1 = state_act & (~state1) ? false : true;
 801deee:	ea6f 0801 	mvn.w	r8, r1
        bool valid2 = state_act & (~state2) ? false : true;
 801def2:	ea6f 0902 	mvn.w	r9, r2
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 801def6:	462e      	mov	r6, r5
    for(i = 0; i < obj->style_cnt; i++) {
 801def8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801defa:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 801defe:	42ab      	cmp	r3, r5
 801df00:	f240 8096 	bls.w	801e030 <_lv_obj_style_state_compare+0x14a>
        if(obj->styles[i].is_trans) continue;
 801df04:	68fb      	ldr	r3, [r7, #12]
 801df06:	00e9      	lsls	r1, r5, #3
 801df08:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801df0c:	79d0      	ldrb	r0, [r2, #7]
 801df0e:	0784      	lsls	r4, r0, #30
 801df10:	f100 808b 	bmi.w	801e02a <_lv_obj_style_state_compare+0x144>
        bool valid1 = state_act & (~state1) ? false : true;
 801df14:	8892      	ldrh	r2, [r2, #4]
 801df16:	ea18 0f02 	tst.w	r8, r2
 801df1a:	bf0c      	ite	eq
 801df1c:	2001      	moveq	r0, #1
 801df1e:	2000      	movne	r0, #0
        bool valid2 = state_act & (~state2) ? false : true;
 801df20:	ea19 0f02 	tst.w	r9, r2
        if(valid1 != valid2) {
 801df24:	bf0c      	ite	eq
 801df26:	2201      	moveq	r2, #1
 801df28:	2200      	movne	r2, #0
 801df2a:	4290      	cmp	r0, r2
 801df2c:	d07d      	beq.n	801e02a <_lv_obj_style_state_compare+0x144>
            lv_style_t * style = obj->styles[i].style;
 801df2e:	585c      	ldr	r4, [r3, r1]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 801df30:	aa01      	add	r2, sp, #4
 801df32:	2110      	movs	r1, #16
 801df34:	4620      	mov	r0, r4
 801df36:	f006 ff02 	bl	8024d3e <lv_style_get_prop>
 801df3a:	2800      	cmp	r0, #0
 801df3c:	d177      	bne.n	801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 801df3e:	aa01      	add	r2, sp, #4
 801df40:	2111      	movs	r1, #17
 801df42:	4620      	mov	r0, r4
 801df44:	f006 fefb 	bl	8024d3e <lv_style_get_prop>
 801df48:	2800      	cmp	r0, #0
 801df4a:	d170      	bne.n	801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 801df4c:	aa01      	add	r2, sp, #4
 801df4e:	2112      	movs	r1, #18
 801df50:	4620      	mov	r0, r4
 801df52:	f006 fef4 	bl	8024d3e <lv_style_get_prop>
 801df56:	2800      	cmp	r0, #0
 801df58:	d169      	bne.n	801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 801df5a:	aa01      	add	r2, sp, #4
 801df5c:	2113      	movs	r1, #19
 801df5e:	4620      	mov	r0, r4
 801df60:	f006 feed 	bl	8024d3e <lv_style_get_prop>
 801df64:	2800      	cmp	r0, #0
 801df66:	d162      	bne.n	801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 801df68:	aa01      	add	r2, sp, #4
 801df6a:	2115      	movs	r1, #21
 801df6c:	4620      	mov	r0, r4
 801df6e:	f006 fee6 	bl	8024d3e <lv_style_get_prop>
 801df72:	2800      	cmp	r0, #0
 801df74:	d15b      	bne.n	801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 801df76:	aa01      	add	r2, sp, #4
 801df78:	2114      	movs	r1, #20
 801df7a:	4620      	mov	r0, r4
 801df7c:	f006 fedf 	bl	8024d3e <lv_style_get_prop>
 801df80:	2800      	cmp	r0, #0
 801df82:	d154      	bne.n	801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 801df84:	aa01      	add	r2, sp, #4
 801df86:	210a      	movs	r1, #10
 801df88:	4620      	mov	r0, r4
 801df8a:	f006 fed8 	bl	8024d3e <lv_style_get_prop>
 801df8e:	2800      	cmp	r0, #0
 801df90:	d14d      	bne.n	801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 801df92:	aa01      	add	r2, sp, #4
 801df94:	216a      	movs	r1, #106	; 0x6a
 801df96:	4620      	mov	r0, r4
 801df98:	f006 fed1 	bl	8024d3e <lv_style_get_prop>
 801df9c:	2800      	cmp	r0, #0
 801df9e:	d146      	bne.n	801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 801dfa0:	aa01      	add	r2, sp, #4
 801dfa2:	216b      	movs	r1, #107	; 0x6b
 801dfa4:	4620      	mov	r0, r4
 801dfa6:	f006 feca 	bl	8024d3e <lv_style_get_prop>
 801dfaa:	2800      	cmp	r0, #0
 801dfac:	d13f      	bne.n	801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 801dfae:	aa01      	add	r2, sp, #4
 801dfb0:	2101      	movs	r1, #1
 801dfb2:	4620      	mov	r0, r4
 801dfb4:	f006 fec3 	bl	8024d3e <lv_style_get_prop>
 801dfb8:	2800      	cmp	r0, #0
 801dfba:	d138      	bne.n	801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 801dfbc:	aa01      	add	r2, sp, #4
 801dfbe:	2104      	movs	r1, #4
 801dfc0:	4620      	mov	r0, r4
 801dfc2:	f006 febc 	bl	8024d3e <lv_style_get_prop>
 801dfc6:	bb90      	cbnz	r0, 801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 801dfc8:	aa01      	add	r2, sp, #4
 801dfca:	2102      	movs	r1, #2
 801dfcc:	4620      	mov	r0, r4
 801dfce:	f006 feb6 	bl	8024d3e <lv_style_get_prop>
 801dfd2:	bb60      	cbnz	r0, 801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 801dfd4:	aa01      	add	r2, sp, #4
 801dfd6:	2103      	movs	r1, #3
 801dfd8:	4620      	mov	r0, r4
 801dfda:	f006 feb0 	bl	8024d3e <lv_style_get_prop>
 801dfde:	bb30      	cbnz	r0, 801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 801dfe0:	aa01      	add	r2, sp, #4
 801dfe2:	2105      	movs	r1, #5
 801dfe4:	4620      	mov	r0, r4
 801dfe6:	f006 feaa 	bl	8024d3e <lv_style_get_prop>
 801dfea:	bb00      	cbnz	r0, 801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 801dfec:	aa01      	add	r2, sp, #4
 801dfee:	2106      	movs	r1, #6
 801dff0:	4620      	mov	r0, r4
 801dff2:	f006 fea4 	bl	8024d3e <lv_style_get_prop>
 801dff6:	b9d0      	cbnz	r0, 801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 801dff8:	aa01      	add	r2, sp, #4
 801dffa:	2132      	movs	r1, #50	; 0x32
 801dffc:	4620      	mov	r0, r4
 801dffe:	f006 fe9e 	bl	8024d3e <lv_style_get_prop>
 801e002:	b9a0      	cbnz	r0, 801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 801e004:	aa01      	add	r2, sp, #4
 801e006:	216d      	movs	r1, #109	; 0x6d
 801e008:	4620      	mov	r0, r4
 801e00a:	f006 fe98 	bl	8024d3e <lv_style_get_prop>
 801e00e:	b970      	cbnz	r0, 801e02e <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 801e010:	aa01      	add	r2, sp, #4
 801e012:	216c      	movs	r1, #108	; 0x6c
 801e014:	4620      	mov	r0, r4
 801e016:	f006 fe92 	bl	8024d3e <lv_style_get_prop>
 801e01a:	b940      	cbnz	r0, 801e02e <_lv_obj_style_state_compare+0x148>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e01c:	aa01      	add	r2, sp, #4
 801e01e:	2168      	movs	r1, #104	; 0x68
 801e020:	4620      	mov	r0, r4
 801e022:	f006 fe8c 	bl	8024d3e <lv_style_get_prop>
 801e026:	b138      	cbz	r0, 801e038 <_lv_obj_style_state_compare+0x152>
 801e028:	2602      	movs	r6, #2
    for(i = 0; i < obj->style_cnt; i++) {
 801e02a:	3501      	adds	r5, #1
 801e02c:	e764      	b.n	801def8 <_lv_obj_style_state_compare+0x12>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 801e02e:	2603      	movs	r6, #3
}
 801e030:	4630      	mov	r0, r6
 801e032:	b003      	add	sp, #12
 801e034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e038:	aa01      	add	r2, sp, #4
 801e03a:	2169      	movs	r1, #105	; 0x69
 801e03c:	4620      	mov	r0, r4
 801e03e:	f006 fe7e 	bl	8024d3e <lv_style_get_prop>
 801e042:	2800      	cmp	r0, #0
 801e044:	d1f0      	bne.n	801e028 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e046:	aa01      	add	r2, sp, #4
 801e048:	216d      	movs	r1, #109	; 0x6d
 801e04a:	4620      	mov	r0, r4
 801e04c:	f006 fe77 	bl	8024d3e <lv_style_get_prop>
 801e050:	2800      	cmp	r0, #0
 801e052:	d1e9      	bne.n	801e028 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e054:	aa01      	add	r2, sp, #4
 801e056:	216c      	movs	r1, #108	; 0x6c
 801e058:	4620      	mov	r0, r4
 801e05a:	f006 fe70 	bl	8024d3e <lv_style_get_prop>
 801e05e:	2800      	cmp	r0, #0
 801e060:	d1e2      	bne.n	801e028 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e062:	aa01      	add	r2, sp, #4
 801e064:	2137      	movs	r1, #55	; 0x37
 801e066:	4620      	mov	r0, r4
 801e068:	f006 fe69 	bl	8024d3e <lv_style_get_prop>
 801e06c:	2800      	cmp	r0, #0
 801e06e:	d1db      	bne.n	801e028 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e070:	aa01      	add	r2, sp, #4
 801e072:	2138      	movs	r1, #56	; 0x38
 801e074:	4620      	mov	r0, r4
 801e076:	f006 fe62 	bl	8024d3e <lv_style_get_prop>
 801e07a:	2800      	cmp	r0, #0
 801e07c:	d1d4      	bne.n	801e028 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e07e:	aa01      	add	r2, sp, #4
 801e080:	2135      	movs	r1, #53	; 0x35
 801e082:	4620      	mov	r0, r4
 801e084:	f006 fe5b 	bl	8024d3e <lv_style_get_prop>
 801e088:	2800      	cmp	r0, #0
 801e08a:	d1cd      	bne.n	801e028 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e08c:	aa01      	add	r2, sp, #4
 801e08e:	2140      	movs	r1, #64	; 0x40
 801e090:	4620      	mov	r0, r4
 801e092:	f006 fe54 	bl	8024d3e <lv_style_get_prop>
 801e096:	2800      	cmp	r0, #0
 801e098:	d1c6      	bne.n	801e028 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e09a:	aa01      	add	r2, sp, #4
 801e09c:	2145      	movs	r1, #69	; 0x45
 801e09e:	4620      	mov	r0, r4
 801e0a0:	f006 fe4d 	bl	8024d3e <lv_style_get_prop>
 801e0a4:	2800      	cmp	r0, #0
 801e0a6:	d1bf      	bne.n	801e028 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e0a8:	aa01      	add	r2, sp, #4
 801e0aa:	2141      	movs	r1, #65	; 0x41
 801e0ac:	4620      	mov	r0, r4
 801e0ae:	f006 fe46 	bl	8024d3e <lv_style_get_prop>
 801e0b2:	2800      	cmp	r0, #0
 801e0b4:	d1b8      	bne.n	801e028 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e0b6:	aa01      	add	r2, sp, #4
 801e0b8:	2142      	movs	r1, #66	; 0x42
 801e0ba:	4620      	mov	r0, r4
 801e0bc:	f006 fe3f 	bl	8024d3e <lv_style_get_prop>
 801e0c0:	2800      	cmp	r0, #0
 801e0c2:	d1b1      	bne.n	801e028 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e0c4:	aa01      	add	r2, sp, #4
 801e0c6:	2143      	movs	r1, #67	; 0x43
 801e0c8:	4620      	mov	r0, r4
 801e0ca:	f006 fe38 	bl	8024d3e <lv_style_get_prop>
 801e0ce:	2800      	cmp	r0, #0
 801e0d0:	d1aa      	bne.n	801e028 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801e0d2:	aa01      	add	r2, sp, #4
 801e0d4:	2149      	movs	r1, #73	; 0x49
 801e0d6:	4620      	mov	r0, r4
 801e0d8:	f006 fe31 	bl	8024d3e <lv_style_get_prop>
 801e0dc:	2800      	cmp	r0, #0
 801e0de:	d1a3      	bne.n	801e028 <_lv_obj_style_state_compare+0x142>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 801e0e0:	2e01      	cmp	r6, #1
 801e0e2:	bf38      	it	cc
 801e0e4:	2601      	movcc	r6, #1
 801e0e6:	e7a0      	b.n	801e02a <_lv_obj_style_state_compare+0x144>

0801e0e8 <lv_obj_style_get_selector_state>:
}
 801e0e8:	b280      	uxth	r0, r0
 801e0ea:	4770      	bx	lr

0801e0ec <lv_obj_style_get_selector_part>:
}
 801e0ec:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 801e0f0:	4770      	bx	lr

0801e0f2 <lv_obj_calculate_style_text_align>:
{
 801e0f2:	b570      	push	{r4, r5, r6, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801e0f4:	225b      	movs	r2, #91	; 0x5b
 801e0f6:	4605      	mov	r5, r0
 801e0f8:	460e      	mov	r6, r1
 801e0fa:	f7ff fcc1 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_text_align_t)v.num;
 801e0fe:	b2c4      	uxtb	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801e100:	2216      	movs	r2, #22
 801e102:	4631      	mov	r1, r6
 801e104:	4628      	mov	r0, r5
 801e106:	f7ff fcbb 	bl	801da80 <lv_obj_get_style_prop>
}
 801e10a:	2c01      	cmp	r4, #1
 801e10c:	4620      	mov	r0, r4
 801e10e:	bf38      	it	cc
 801e110:	2001      	movcc	r0, #1
 801e112:	bd70      	pop	{r4, r5, r6, pc}

0801e114 <lv_obj_set_style_width>:
#include "lv_obj.h"

void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801e114:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
 801e116:	460a      	mov	r2, r1
 801e118:	2101      	movs	r1, #1
 801e11a:	f7ff be6b 	b.w	801ddf4 <lv_obj_set_local_style_prop>

0801e11e <lv_obj_set_style_min_width>:
}

void lv_obj_set_style_min_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801e11e:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MIN_WIDTH, v, selector);
 801e120:	460a      	mov	r2, r1
 801e122:	2102      	movs	r1, #2
 801e124:	f7ff be66 	b.w	801ddf4 <lv_obj_set_local_style_prop>

0801e128 <lv_obj_set_style_height>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_WIDTH, v, selector);
}

void lv_obj_set_style_height(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801e128:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_HEIGHT, v, selector);
 801e12a:	460a      	mov	r2, r1
 801e12c:	2104      	movs	r1, #4
 801e12e:	f7ff be61 	b.w	801ddf4 <lv_obj_set_local_style_prop>

0801e132 <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801e132:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 801e134:	460a      	mov	r2, r1
 801e136:	2107      	movs	r1, #7
 801e138:	f7ff be5c 	b.w	801ddf4 <lv_obj_set_local_style_prop>

0801e13c <lv_obj_set_style_y>:
}

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801e13c:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 801e13e:	460a      	mov	r2, r1
 801e140:	2108      	movs	r1, #8
 801e142:	f7ff be57 	b.w	801ddf4 <lv_obj_set_local_style_prop>

0801e146 <lv_obj_set_style_align>:
}

void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
 801e146:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 801e148:	460a      	mov	r2, r1
 801e14a:	2109      	movs	r1, #9
 801e14c:	f7ff be52 	b.w	801ddf4 <lv_obj_set_local_style_prop>

0801e150 <lv_obj_set_style_bg_img_src>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_DITHER_MODE, v, selector);
}

void lv_obj_set_style_bg_img_src(struct _lv_obj_t * obj, const void * value, lv_style_selector_t selector)
{
 801e150:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .ptr = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_IMG_SRC, v, selector);
 801e152:	460a      	mov	r2, r1
 801e154:	2128      	movs	r1, #40	; 0x28
 801e156:	f7ff be4d 	b.w	801ddf4 <lv_obj_set_local_style_prop>

0801e15a <lv_obj_set_style_text_align>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_DECOR, v, selector);
}

void lv_obj_set_style_text_align(struct _lv_obj_t * obj, lv_text_align_t value, lv_style_selector_t selector)
{
 801e15a:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_ALIGN, v, selector);
 801e15c:	460a      	mov	r2, r1
 801e15e:	215b      	movs	r1, #91	; 0x5b
 801e160:	f7ff be48 	b.w	801ddf4 <lv_obj_set_local_style_prop>

0801e164 <lv_obj_set_style_layout>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BLEND_MODE, v, selector);
}

void lv_obj_set_style_layout(struct _lv_obj_t * obj, uint16_t value, lv_style_selector_t selector)
{
 801e164:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_LAYOUT, v, selector);
 801e166:	460a      	mov	r2, r1
 801e168:	210a      	movs	r1, #10
 801e16a:	f7ff be43 	b.w	801ddf4 <lv_obj_set_local_style_prop>

0801e16e <lv_obj_set_style_base_dir>:
}

void lv_obj_set_style_base_dir(struct _lv_obj_t * obj, lv_base_dir_t value, lv_style_selector_t selector)
{
 801e16e:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BASE_DIR, v, selector);
 801e170:	460a      	mov	r2, r1
 801e172:	2116      	movs	r1, #22
 801e174:	f7ff be3e 	b.w	801ddf4 <lv_obj_set_local_style_prop>

0801e178 <lv_obj_get_screen>:

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
 801e178:	4603      	mov	r3, r0
 801e17a:	b120      	cbz	r0, 801e186 <lv_obj_get_screen+0xe>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 801e17c:	4618      	mov	r0, r3
 801e17e:	685b      	ldr	r3, [r3, #4]
    } while(par != NULL);
 801e180:	2b00      	cmp	r3, #0
 801e182:	d1fb      	bne.n	801e17c <lv_obj_get_screen+0x4>
 801e184:	4770      	bx	lr
}
 801e186:	4770      	bx	lr

0801e188 <lv_obj_get_parent>:
    if(obj == NULL) return NULL;
 801e188:	b100      	cbz	r0, 801e18c <lv_obj_get_parent+0x4>
    return obj->parent;
 801e18a:	6840      	ldr	r0, [r0, #4]
}
 801e18c:	4770      	bx	lr

0801e18e <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 801e18e:	6880      	ldr	r0, [r0, #8]
 801e190:	b158      	cbz	r0, 801e1aa <lv_obj_get_child+0x1c>

    uint32_t idu;
    if(id < 0) {
 801e192:	2900      	cmp	r1, #0
        id = obj->spec_attr->child_cnt + id;
 801e194:	6843      	ldr	r3, [r0, #4]
    if(id < 0) {
 801e196:	da01      	bge.n	801e19c <lv_obj_get_child+0xe>
        if(id < 0) return NULL;
 801e198:	18c9      	adds	r1, r1, r3
 801e19a:	d405      	bmi.n	801e1a8 <lv_obj_get_child+0x1a>
    }
    else {
        idu = id;
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 801e19c:	4299      	cmp	r1, r3
 801e19e:	d203      	bcs.n	801e1a8 <lv_obj_get_child+0x1a>
    else return obj->spec_attr->children[id];
 801e1a0:	6803      	ldr	r3, [r0, #0]
 801e1a2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801e1a6:	4770      	bx	lr
    if(obj->spec_attr == NULL) return NULL;
 801e1a8:	2000      	movs	r0, #0
}
 801e1aa:	4770      	bx	lr

0801e1ac <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 801e1ac:	6880      	ldr	r0, [r0, #8]
 801e1ae:	b100      	cbz	r0, 801e1b2 <lv_obj_get_child_cnt+0x6>
    return obj->spec_attr->child_cnt;
 801e1b0:	6840      	ldr	r0, [r0, #4]
}
 801e1b2:	4770      	bx	lr

0801e1b4 <lv_obj_get_index>:

uint32_t lv_obj_get_index(const lv_obj_t * obj)
{
 801e1b4:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return NULL;
 801e1b6:	4604      	mov	r4, r0
 801e1b8:	b1a0      	cbz	r0, 801e1e4 <lv_obj_get_index+0x30>
    return obj->parent;
 801e1ba:	6845      	ldr	r5, [r0, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_t * parent = lv_obj_get_parent(obj);
    if(parent == NULL) return 0;
 801e1bc:	b1a5      	cbz	r5, 801e1e8 <lv_obj_get_index+0x34>

    uint32_t i = 0;
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 801e1be:	4628      	mov	r0, r5
 801e1c0:	2200      	movs	r2, #0
 801e1c2:	f7ff fff3 	bl	801e1ac <lv_obj_get_child_cnt>
 801e1c6:	4606      	mov	r6, r0
 801e1c8:	4296      	cmp	r6, r2
 801e1ca:	d103      	bne.n	801e1d4 <lv_obj_get_index+0x20>
        if(lv_obj_get_child(parent, i) == obj) return i;
    }

    return 0xFFFFFFFF; /*Shouldn't happen*/
 801e1cc:	f04f 32ff 	mov.w	r2, #4294967295
}
 801e1d0:	4610      	mov	r0, r2
 801e1d2:	bd70      	pop	{r4, r5, r6, pc}
        if(lv_obj_get_child(parent, i) == obj) return i;
 801e1d4:	4611      	mov	r1, r2
 801e1d6:	4628      	mov	r0, r5
 801e1d8:	f7ff ffd9 	bl	801e18e <lv_obj_get_child>
 801e1dc:	4284      	cmp	r4, r0
 801e1de:	d0f7      	beq.n	801e1d0 <lv_obj_get_index+0x1c>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 801e1e0:	3201      	adds	r2, #1
 801e1e2:	e7f1      	b.n	801e1c8 <lv_obj_get_index+0x14>
    if(parent == NULL) return 0;
 801e1e4:	4602      	mov	r2, r0
 801e1e6:	e7f3      	b.n	801e1d0 <lv_obj_get_index+0x1c>
 801e1e8:	462a      	mov	r2, r5
 801e1ea:	e7f1      	b.n	801e1d0 <lv_obj_get_index+0x1c>

0801e1ec <obj_del_core>:

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
{
 801e1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 801e1ee:	2200      	movs	r2, #0
 801e1f0:	2121      	movs	r1, #33	; 0x21
{
 801e1f2:	4605      	mov	r5, r0
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 801e1f4:	f7e6 fa72 	bl	80046dc <lv_event_send>
    if(res == LV_RES_INV) return;
 801e1f8:	2800      	cmp	r0, #0
 801e1fa:	d073      	beq.n	801e2e4 <obj_del_core+0xf8>

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
    while(child) {
        obj_del_core(child);
        child = lv_obj_get_child(obj, 0);
 801e1fc:	2100      	movs	r1, #0
 801e1fe:	4628      	mov	r0, r5
 801e200:	f7ff ffc5 	bl	801e18e <lv_obj_get_child>
 801e204:	4606      	mov	r6, r0
    while(child) {
 801e206:	bb28      	cbnz	r0, 801e254 <obj_del_core+0x68>
    }

    lv_group_t * group = lv_obj_get_group(obj);
 801e208:	4628      	mov	r0, r5
 801e20a:	f7fd fc0d 	bl	801ba28 <lv_obj_get_group>
 801e20e:	4607      	mov	r7, r0

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 801e210:	4630      	mov	r0, r6
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
            lv_indev_reset(indev, obj);
        }
        indev = lv_indev_get_next(indev);
 801e212:	f7f3 ff79 	bl	8012108 <lv_indev_get_next>
 801e216:	4604      	mov	r4, r0
    while(indev) {
 801e218:	bb00      	cbnz	r0, 801e25c <obj_del_core+0x70>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destruct(obj);
 801e21a:	4628      	mov	r0, r5
 801e21c:	f7fd fdb9 	bl	801bd92 <_lv_obj_destruct>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 801e220:	686b      	ldr	r3, [r5, #4]
        lv_disp_t * disp = lv_obj_get_disp(obj);
 801e222:	4628      	mov	r0, r5
    if(obj->parent == NULL) {
 801e224:	2b00      	cmp	r3, #0
 801e226:	d142      	bne.n	801e2ae <obj_del_core+0xc2>
        lv_disp_t * disp = lv_obj_get_disp(obj);
 801e228:	f7e8 fb20 	bl	800686c <lv_obj_get_disp>
 801e22c:	4606      	mov	r6, r0
        uint32_t i;
        /*Find the screen in the list*/
        for(i = 0; i < disp->screen_cnt; i++) {
 801e22e:	6a43      	ldr	r3, [r0, #36]	; 0x24
            if(disp->screens[i] == obj) break;
 801e230:	68c2      	ldr	r2, [r0, #12]
        for(i = 0; i < disp->screen_cnt; i++) {
 801e232:	429c      	cmp	r4, r3
 801e234:	d12d      	bne.n	801e292 <obj_del_core+0xa6>
        }

        uint32_t id = i;
        for(i = id; i < disp->screen_cnt - 1; i++) {
 801e236:	6a71      	ldr	r1, [r6, #36]	; 0x24
            disp->screens[i] = disp->screens[i + 1];
 801e238:	68f0      	ldr	r0, [r6, #12]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 801e23a:	3901      	subs	r1, #1
 801e23c:	428c      	cmp	r4, r1
 801e23e:	d32e      	bcc.n	801e29e <obj_del_core+0xb2>
        }
        disp->screen_cnt--;
 801e240:	6271      	str	r1, [r6, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 801e242:	0089      	lsls	r1, r1, #2
 801e244:	f7f4 fa6a 	bl	801271c <lv_mem_realloc>
 801e248:	60f0      	str	r0, [r6, #12]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 801e24a:	4628      	mov	r0, r5
}
 801e24c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_mem_free(obj);
 801e250:	f7f4 ba4c 	b.w	80126ec <lv_mem_free>
        obj_del_core(child);
 801e254:	4630      	mov	r0, r6
 801e256:	f7ff ffc9 	bl	801e1ec <obj_del_core>
 801e25a:	e7cf      	b.n	801e1fc <obj_del_core+0x10>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 801e25c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e25e:	429d      	cmp	r5, r3
 801e260:	d002      	beq.n	801e268 <obj_del_core+0x7c>
 801e262:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801e264:	429d      	cmp	r5, r3
 801e266:	d103      	bne.n	801e270 <obj_del_core+0x84>
            lv_indev_reset(indev, obj);
 801e268:	4629      	mov	r1, r5
 801e26a:	4620      	mov	r0, r4
 801e26c:	f7e6 faa2 	bl	80047b4 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 801e270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e272:	429d      	cmp	r5, r3
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 801e274:	6d63      	ldr	r3, [r4, #84]	; 0x54
            indev->proc.types.pointer.last_pressed = NULL;
 801e276:	bf08      	it	eq
 801e278:	6366      	streq	r6, [r4, #52]	; 0x34
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 801e27a:	429f      	cmp	r7, r3
 801e27c:	d107      	bne.n	801e28e <obj_del_core+0xa2>
 801e27e:	f7e6 fae9 	bl	8004854 <lv_indev_get_obj_act>
 801e282:	4285      	cmp	r5, r0
 801e284:	d103      	bne.n	801e28e <obj_del_core+0xa2>
            lv_indev_reset(indev, obj);
 801e286:	4629      	mov	r1, r5
 801e288:	4620      	mov	r0, r4
 801e28a:	f7e6 fa93 	bl	80047b4 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 801e28e:	4620      	mov	r0, r4
 801e290:	e7bf      	b.n	801e212 <obj_del_core+0x26>
            if(disp->screens[i] == obj) break;
 801e292:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 801e296:	428d      	cmp	r5, r1
 801e298:	d0cd      	beq.n	801e236 <obj_del_core+0x4a>
        for(i = 0; i < disp->screen_cnt; i++) {
 801e29a:	3401      	adds	r4, #1
 801e29c:	e7c9      	b.n	801e232 <obj_del_core+0x46>
            disp->screens[i] = disp->screens[i + 1];
 801e29e:	3401      	adds	r4, #1
 801e2a0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 801e2a4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801e2a8:	f840 3c04 	str.w	r3, [r0, #-4]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 801e2ac:	e7c3      	b.n	801e236 <obj_del_core+0x4a>
        uint32_t id = lv_obj_get_index(obj);
 801e2ae:	f7ff ff81 	bl	801e1b4 <lv_obj_get_index>
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 801e2b2:	686b      	ldr	r3, [r5, #4]
 801e2b4:	689a      	ldr	r2, [r3, #8]
 801e2b6:	6853      	ldr	r3, [r2, #4]
 801e2b8:	3b01      	subs	r3, #1
 801e2ba:	4298      	cmp	r0, r3
 801e2bc:	d309      	bcc.n	801e2d2 <obj_del_core+0xe6>
        obj->parent->spec_attr->child_cnt--;
 801e2be:	6053      	str	r3, [r2, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 801e2c0:	686b      	ldr	r3, [r5, #4]
 801e2c2:	689c      	ldr	r4, [r3, #8]
 801e2c4:	6861      	ldr	r1, [r4, #4]
 801e2c6:	6820      	ldr	r0, [r4, #0]
 801e2c8:	0089      	lsls	r1, r1, #2
 801e2ca:	f7f4 fa27 	bl	801271c <lv_mem_realloc>
 801e2ce:	6020      	str	r0, [r4, #0]
 801e2d0:	e7bb      	b.n	801e24a <obj_del_core+0x5e>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 801e2d2:	6813      	ldr	r3, [r2, #0]
 801e2d4:	3001      	adds	r0, #1
 801e2d6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 801e2da:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801e2de:	f843 2c04 	str.w	r2, [r3, #-4]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 801e2e2:	e7e6      	b.n	801e2b2 <obj_del_core+0xc6>
}
 801e2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e2e6 <lv_obj_del>:
{
 801e2e6:	b538      	push	{r3, r4, r5, lr}
 801e2e8:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 801e2ea:	f7fe fca3 	bl	801cc34 <lv_obj_invalidate>
    if(obj == NULL) return NULL;
 801e2ee:	b1ec      	cbz	r4, 801e32c <lv_obj_del+0x46>
    return obj->parent;
 801e2f0:	6865      	ldr	r5, [r4, #4]
    if(par) {
 801e2f2:	b1dd      	cbz	r5, 801e32c <lv_obj_del+0x46>
        lv_obj_scrollbar_invalidate(par);
 801e2f4:	4628      	mov	r0, r5
 801e2f6:	f7ff fa95 	bl	801d824 <lv_obj_scrollbar_invalidate>
    obj_del_core(obj);
 801e2fa:	4620      	mov	r0, r4
 801e2fc:	f7ff ff76 	bl	801e1ec <obj_del_core>
        lv_obj_update_layout(par);
 801e300:	4628      	mov	r0, r5
 801e302:	f7e7 fa2d 	bl	8005760 <lv_obj_update_layout>
        lv_obj_readjust_scroll(par, LV_ANIM_OFF);
 801e306:	2100      	movs	r1, #0
 801e308:	4628      	mov	r0, r5
 801e30a:	f7ff faab 	bl	801d864 <lv_obj_readjust_scroll>
        lv_obj_scrollbar_invalidate(par);
 801e30e:	4628      	mov	r0, r5
 801e310:	f7ff fa88 	bl	801d824 <lv_obj_scrollbar_invalidate>
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 801e314:	2200      	movs	r2, #0
 801e316:	2122      	movs	r1, #34	; 0x22
 801e318:	4628      	mov	r0, r5
 801e31a:	f7e6 f9df 	bl	80046dc <lv_event_send>
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 801e31e:	4628      	mov	r0, r5
 801e320:	2200      	movs	r2, #0
 801e322:	2124      	movs	r1, #36	; 0x24
}
 801e324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 801e328:	f7e6 b9d8 	b.w	80046dc <lv_event_send>
        disp = lv_obj_get_disp(obj);
 801e32c:	4620      	mov	r0, r4
 801e32e:	f7e8 fa9d 	bl	800686c <lv_obj_get_disp>
        if(!disp) return;   /*Shouldn't happen*/
 801e332:	4605      	mov	r5, r0
 801e334:	b138      	cbz	r0, 801e346 <lv_obj_del+0x60>
        if(disp->act_scr == obj) act_scr_del = true;
 801e336:	6903      	ldr	r3, [r0, #16]
    obj_del_core(obj);
 801e338:	4620      	mov	r0, r4
        if(disp->act_scr == obj) act_scr_del = true;
 801e33a:	42a3      	cmp	r3, r4
 801e33c:	d104      	bne.n	801e348 <lv_obj_del+0x62>
    obj_del_core(obj);
 801e33e:	f7ff ff55 	bl	801e1ec <obj_del_core>
        disp->act_scr = NULL;
 801e342:	2300      	movs	r3, #0
 801e344:	612b      	str	r3, [r5, #16]
}
 801e346:	bd38      	pop	{r3, r4, r5, pc}
 801e348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    obj_del_core(obj);
 801e34c:	f7ff bf4e 	b.w	801e1ec <obj_del_core>

0801e350 <lv_obj_set_parent>:
{
 801e350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(obj->parent == NULL) {
 801e354:	6843      	ldr	r3, [r0, #4]
{
 801e356:	4604      	mov	r4, r0
 801e358:	460d      	mov	r5, r1
    if(obj->parent == NULL) {
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d069      	beq.n	801e432 <lv_obj_set_parent+0xe2>
    if(parent == NULL) {
 801e35e:	2900      	cmp	r1, #0
 801e360:	d067      	beq.n	801e432 <lv_obj_set_parent+0xe2>
    lv_obj_invalidate(obj);
 801e362:	f7fe fc67 	bl	801cc34 <lv_obj_invalidate>
    lv_obj_allocate_spec_attr(parent);
 801e366:	4628      	mov	r0, r5
 801e368:	f7e6 fd06 	bl	8004d78 <lv_obj_allocate_spec_attr>
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 801e36c:	4620      	mov	r0, r4
 801e36e:	f7ff ff21 	bl	801e1b4 <lv_obj_get_index>
    lv_obj_t * old_parent = obj->parent;
 801e372:	6866      	ldr	r6, [r4, #4]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 801e374:	4603      	mov	r3, r0
 801e376:	4630      	mov	r0, r6
 801e378:	f7ff ff18 	bl	801e1ac <lv_obj_get_child_cnt>
 801e37c:	3801      	subs	r0, #1
        old_parent->spec_attr->children[i] = old_parent->spec_attr->children[i + 1];
 801e37e:	68b2      	ldr	r2, [r6, #8]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 801e380:	4298      	cmp	r0, r3
 801e382:	dc47      	bgt.n	801e414 <lv_obj_set_parent+0xc4>
    old_parent->spec_attr->child_cnt--;
 801e384:	6853      	ldr	r3, [r2, #4]
 801e386:	3b01      	subs	r3, #1
 801e388:	6053      	str	r3, [r2, #4]
    if(old_parent->spec_attr->child_cnt) {
 801e38a:	68b7      	ldr	r7, [r6, #8]
 801e38c:	f8d7 8004 	ldr.w	r8, [r7, #4]
 801e390:	f1b8 0f00 	cmp.w	r8, #0
 801e394:	d046      	beq.n	801e424 <lv_obj_set_parent+0xd4>
        old_parent->spec_attr->children = lv_mem_realloc(old_parent->spec_attr->children,
 801e396:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801e39a:	6838      	ldr	r0, [r7, #0]
 801e39c:	f7f4 f9be 	bl	801271c <lv_mem_realloc>
 801e3a0:	6038      	str	r0, [r7, #0]
    parent->spec_attr->child_cnt++;
 801e3a2:	68aa      	ldr	r2, [r5, #8]
 801e3a4:	6853      	ldr	r3, [r2, #4]
 801e3a6:	3301      	adds	r3, #1
 801e3a8:	6053      	str	r3, [r2, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 801e3aa:	68af      	ldr	r7, [r5, #8]
 801e3ac:	6879      	ldr	r1, [r7, #4]
 801e3ae:	6838      	ldr	r0, [r7, #0]
 801e3b0:	0089      	lsls	r1, r1, #2
 801e3b2:	f7f4 f9b3 	bl	801271c <lv_mem_realloc>
 801e3b6:	6038      	str	r0, [r7, #0]
    parent->spec_attr->children[lv_obj_get_child_cnt(parent) - 1] = obj;
 801e3b8:	4628      	mov	r0, r5
 801e3ba:	68ab      	ldr	r3, [r5, #8]
 801e3bc:	f7ff fef6 	bl	801e1ac <lv_obj_get_child_cnt>
 801e3c0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 801e3c4:	681b      	ldr	r3, [r3, #0]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 801e3c6:	2100      	movs	r1, #0
    parent->spec_attr->children[lv_obj_get_child_cnt(parent) - 1] = obj;
 801e3c8:	3801      	subs	r0, #1
 801e3ca:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 801e3ce:	4630      	mov	r0, r6
    obj->parent = parent;
 801e3d0:	6065      	str	r5, [r4, #4]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 801e3d2:	f7ff fa47 	bl	801d864 <lv_obj_readjust_scroll>
    lv_obj_scrollbar_invalidate(old_parent);
 801e3d6:	4630      	mov	r0, r6
 801e3d8:	f7ff fa24 	bl	801d824 <lv_obj_scrollbar_invalidate>
    lv_event_send(old_parent, LV_EVENT_CHILD_CHANGED, obj);
 801e3dc:	4622      	mov	r2, r4
 801e3de:	2122      	movs	r1, #34	; 0x22
 801e3e0:	4630      	mov	r0, r6
 801e3e2:	f7e6 f97b 	bl	80046dc <lv_event_send>
    lv_event_send(old_parent, LV_EVENT_CHILD_DELETED, NULL);
 801e3e6:	2200      	movs	r2, #0
 801e3e8:	2124      	movs	r1, #36	; 0x24
 801e3ea:	4630      	mov	r0, r6
 801e3ec:	f7e6 f976 	bl	80046dc <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 801e3f0:	4622      	mov	r2, r4
 801e3f2:	2122      	movs	r1, #34	; 0x22
 801e3f4:	4628      	mov	r0, r5
 801e3f6:	f7e6 f971 	bl	80046dc <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CREATED, NULL);
 801e3fa:	2200      	movs	r2, #0
 801e3fc:	2123      	movs	r1, #35	; 0x23
 801e3fe:	4628      	mov	r0, r5
 801e400:	f7e6 f96c 	bl	80046dc <lv_event_send>
    lv_obj_mark_layout_as_dirty(obj);
 801e404:	4620      	mov	r0, r4
 801e406:	f7fe f994 	bl	801c732 <lv_obj_mark_layout_as_dirty>
    lv_obj_invalidate(obj);
 801e40a:	4620      	mov	r0, r4
}
 801e40c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(obj);
 801e410:	f7fe bc10 	b.w	801cc34 <lv_obj_invalidate>
        old_parent->spec_attr->children[i] = old_parent->spec_attr->children[i + 1];
 801e414:	6812      	ldr	r2, [r2, #0]
 801e416:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801e41a:	6849      	ldr	r1, [r1, #4]
 801e41c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 801e420:	3301      	adds	r3, #1
 801e422:	e7a8      	b.n	801e376 <lv_obj_set_parent+0x26>
        lv_mem_free(old_parent->spec_attr->children);
 801e424:	6838      	ldr	r0, [r7, #0]
 801e426:	f7f4 f961 	bl	80126ec <lv_mem_free>
        old_parent->spec_attr->children = NULL;
 801e42a:	68b3      	ldr	r3, [r6, #8]
 801e42c:	f8c3 8000 	str.w	r8, [r3]
 801e430:	e7b7      	b.n	801e3a2 <lv_obj_set_parent+0x52>
}
 801e432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e436 <lv_obj_move_to_index>:
{
 801e436:	b570      	push	{r4, r5, r6, lr}
    if(index < 0) {
 801e438:	1e0c      	subs	r4, r1, #0
{
 801e43a:	4606      	mov	r6, r0
    if(index < 0) {
 801e43c:	db17      	blt.n	801e46e <lv_obj_move_to_index+0x38>
    if(obj == NULL) return NULL;
 801e43e:	b300      	cbz	r0, 801e482 <lv_obj_move_to_index+0x4c>
    return obj->parent;
 801e440:	6845      	ldr	r5, [r0, #4]
    if(index >= (int32_t) lv_obj_get_child_cnt(parent)) return;
 801e442:	4628      	mov	r0, r5
 801e444:	f7ff feb2 	bl	801e1ac <lv_obj_get_child_cnt>
 801e448:	42a0      	cmp	r0, r4
 801e44a:	dd17      	ble.n	801e47c <lv_obj_move_to_index+0x46>
    const int32_t old_index = lv_obj_get_index(obj);
 801e44c:	4630      	mov	r0, r6
 801e44e:	f7ff feb1 	bl	801e1b4 <lv_obj_get_index>
    if(index == old_index) return;
 801e452:	4284      	cmp	r4, r0
 801e454:	d012      	beq.n	801e47c <lv_obj_move_to_index+0x46>
    if(index < old_index) {
 801e456:	db1d      	blt.n	801e494 <lv_obj_move_to_index+0x5e>
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 801e458:	68ab      	ldr	r3, [r5, #8]
        while(i < index) {
 801e45a:	42a0      	cmp	r0, r4
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 801e45c:	681b      	ldr	r3, [r3, #0]
        while(i < index) {
 801e45e:	d01d      	beq.n	801e49c <lv_obj_move_to_index+0x66>
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 801e460:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 801e464:	6852      	ldr	r2, [r2, #4]
 801e466:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
            i++;
 801e46a:	3001      	adds	r0, #1
 801e46c:	e7f4      	b.n	801e458 <lv_obj_move_to_index+0x22>
    if(obj == NULL) return NULL;
 801e46e:	b130      	cbz	r0, 801e47e <lv_obj_move_to_index+0x48>
    return obj->parent;
 801e470:	6845      	ldr	r5, [r0, #4]
        index = lv_obj_get_child_cnt(lv_obj_get_parent(obj)) + index;
 801e472:	4628      	mov	r0, r5
 801e474:	f7ff fe9a 	bl	801e1ac <lv_obj_get_child_cnt>
    if(index < 0) return;
 801e478:	1824      	adds	r4, r4, r0
 801e47a:	d5e2      	bpl.n	801e442 <lv_obj_move_to_index+0xc>
}
 801e47c:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return NULL;
 801e47e:	4605      	mov	r5, r0
 801e480:	e7f7      	b.n	801e472 <lv_obj_move_to_index+0x3c>
 801e482:	4605      	mov	r5, r0
 801e484:	e7dd      	b.n	801e442 <lv_obj_move_to_index+0xc>
            parent->spec_attr->children[i] = parent->spec_attr->children[i - 1];
 801e486:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 801e48a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801e48e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
            i--;
 801e492:	3801      	subs	r0, #1
            parent->spec_attr->children[i] = parent->spec_attr->children[i - 1];
 801e494:	68ab      	ldr	r3, [r5, #8]
        while(i > index)  {
 801e496:	42a0      	cmp	r0, r4
            parent->spec_attr->children[i] = parent->spec_attr->children[i - 1];
 801e498:	681b      	ldr	r3, [r3, #0]
        while(i > index)  {
 801e49a:	d1f4      	bne.n	801e486 <lv_obj_move_to_index+0x50>
    parent->spec_attr->children[index] = obj;
 801e49c:	68ab      	ldr	r3, [r5, #8]
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, NULL);
 801e49e:	4628      	mov	r0, r5
 801e4a0:	2200      	movs	r2, #0
 801e4a2:	2122      	movs	r1, #34	; 0x22
    parent->spec_attr->children[index] = obj;
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, NULL);
 801e4aa:	f7e6 f917 	bl	80046dc <lv_event_send>
    lv_obj_invalidate(parent);
 801e4ae:	4628      	mov	r0, r5
}
 801e4b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
 801e4b4:	f7fe bbbe 	b.w	801cc34 <lv_obj_invalidate>

0801e4b8 <call_flush_cb>:
            draw_buf->buf_act = draw_buf->buf1;
    }
}

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 801e4b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 801e4ba:	8905      	ldrh	r5, [r0, #8]
 801e4bc:	880c      	ldrh	r4, [r1, #0]
        .y1 = area->y1 + drv->offset_y,
 801e4be:	884e      	ldrh	r6, [r1, #2]
        .x1 = area->x1 + drv->offset_x,
 801e4c0:	442c      	add	r4, r5
        .x2 = area->x2 + drv->offset_x,
        .y2 = area->y2 + drv->offset_y
    };

    drv->flush_cb(drv, &offset_area, color_p);
 801e4c2:	6943      	ldr	r3, [r0, #20]
    lv_area_t offset_area = {
 801e4c4:	f8ad 4000 	strh.w	r4, [sp]
        .y1 = area->y1 + drv->offset_y,
 801e4c8:	8944      	ldrh	r4, [r0, #10]
 801e4ca:	4426      	add	r6, r4
    lv_area_t offset_area = {
 801e4cc:	f8ad 6002 	strh.w	r6, [sp, #2]
        .x2 = area->x2 + drv->offset_x,
 801e4d0:	888e      	ldrh	r6, [r1, #4]
        .y2 = area->y2 + drv->offset_y
 801e4d2:	88c9      	ldrh	r1, [r1, #6]
        .x2 = area->x2 + drv->offset_x,
 801e4d4:	4435      	add	r5, r6
        .y2 = area->y2 + drv->offset_y
 801e4d6:	440c      	add	r4, r1
    drv->flush_cb(drv, &offset_area, color_p);
 801e4d8:	4669      	mov	r1, sp
    lv_area_t offset_area = {
 801e4da:	f8ad 5004 	strh.w	r5, [sp, #4]
 801e4de:	f8ad 4006 	strh.w	r4, [sp, #6]
    drv->flush_cb(drv, &offset_area, color_p);
 801e4e2:	4798      	blx	r3
}
 801e4e4:	b002      	add	sp, #8
 801e4e6:	bd70      	pop	{r4, r5, r6, pc}

0801e4e8 <lv_refr_get_top_obj>:
{
 801e4e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 801e4ea:	2200      	movs	r2, #0
{
 801e4ec:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 801e4ee:	3114      	adds	r1, #20
{
 801e4f0:	4606      	mov	r6, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 801e4f2:	f005 ffbd 	bl	8024470 <_lv_area_is_in>
 801e4f6:	b910      	cbnz	r0, 801e4fe <lv_refr_get_top_obj+0x16>
 801e4f8:	2000      	movs	r0, #0
}
 801e4fa:	b002      	add	sp, #8
 801e4fc:	bd70      	pop	{r4, r5, r6, pc}
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 801e4fe:	2101      	movs	r1, #1
 801e500:	4620      	mov	r0, r4
 801e502:	f7fd fa83 	bl	801ba0c <lv_obj_has_flag>
 801e506:	2800      	cmp	r0, #0
 801e508:	d1f6      	bne.n	801e4f8 <lv_refr_get_top_obj+0x10>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 801e50a:	4620      	mov	r0, r4
 801e50c:	f7fd fff1 	bl	801c4f2 <_lv_obj_get_layer_type>
 801e510:	2800      	cmp	r0, #0
 801e512:	d1f1      	bne.n	801e4f8 <lv_refr_get_top_obj+0x10>
    info.res = LV_COVER_RES_COVER;
 801e514:	f88d 0000 	strb.w	r0, [sp]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 801e518:	466a      	mov	r2, sp
 801e51a:	2112      	movs	r1, #18
 801e51c:	4620      	mov	r0, r4
    info.area = area_p;
 801e51e:	9601      	str	r6, [sp, #4]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 801e520:	f7e6 f8dc 	bl	80046dc <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 801e524:	f89d 3000 	ldrb.w	r3, [sp]
 801e528:	2b02      	cmp	r3, #2
 801e52a:	d0e5      	beq.n	801e4f8 <lv_refr_get_top_obj+0x10>
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 801e52c:	4620      	mov	r0, r4
 801e52e:	f7ff fe3d 	bl	801e1ac <lv_obj_get_child_cnt>
    for(i = child_cnt - 1; i >= 0; i--) {
 801e532:	1e45      	subs	r5, r0, #1
 801e534:	2d00      	cmp	r5, #0
 801e536:	da05      	bge.n	801e544 <lv_refr_get_top_obj+0x5c>
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 801e538:	f89d 3000 	ldrb.w	r3, [sp]
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	d1db      	bne.n	801e4f8 <lv_refr_get_top_obj+0x10>
 801e540:	4620      	mov	r0, r4
 801e542:	e7da      	b.n	801e4fa <lv_refr_get_top_obj+0x12>
        lv_obj_t * child = obj->spec_attr->children[i];
 801e544:	68a3      	ldr	r3, [r4, #8]
        found_p = lv_refr_get_top_obj(area_p, child);
 801e546:	4630      	mov	r0, r6
        lv_obj_t * child = obj->spec_attr->children[i];
 801e548:	681b      	ldr	r3, [r3, #0]
        found_p = lv_refr_get_top_obj(area_p, child);
 801e54a:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 801e54e:	f7ff ffcb 	bl	801e4e8 <lv_refr_get_top_obj>
        if(found_p != NULL) {
 801e552:	2800      	cmp	r0, #0
 801e554:	d1d1      	bne.n	801e4fa <lv_refr_get_top_obj+0x12>
    for(i = child_cnt - 1; i >= 0; i--) {
 801e556:	3d01      	subs	r5, #1
 801e558:	e7ec      	b.n	801e534 <lv_refr_get_top_obj+0x4c>

0801e55a <_lv_refr_init>:
}
 801e55a:	4770      	bx	lr

0801e55c <lv_obj_redraw>:
{
 801e55c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e560:	460c      	mov	r4, r1
 801e562:	b087      	sub	sp, #28
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801e564:	6886      	ldr	r6, [r0, #8]
{
 801e566:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, &obj_coords_ext);
 801e568:	a902      	add	r1, sp, #8
 801e56a:	4620      	mov	r0, r4
 801e56c:	f7fe f912 	bl	801c794 <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 801e570:	4620      	mov	r0, r4
 801e572:	f7fd ff8c 	bl	801c48e <_lv_obj_get_ext_draw_size>
 801e576:	4602      	mov	r2, r0
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 801e578:	4601      	mov	r1, r0
 801e57a:	a802      	add	r0, sp, #8
 801e57c:	f005 fe59 	bl	8024232 <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 801e580:	aa02      	add	r2, sp, #8
 801e582:	4631      	mov	r1, r6
 801e584:	4668      	mov	r0, sp
 801e586:	f005 fe74 	bl	8024272 <_lv_area_intersect>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 801e58a:	b388      	cbz	r0, 801e5f0 <lv_obj_redraw+0x94>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 801e58c:	462a      	mov	r2, r5
 801e58e:	2114      	movs	r1, #20
 801e590:	4620      	mov	r0, r4
        draw_ctx->clip_area = &clip_coords_for_obj;
 801e592:	f8c5 d008 	str.w	sp, [r5, #8]
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 801e596:	f7e6 f8a1 	bl	80046dc <lv_event_send>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 801e59a:	2701      	movs	r7, #1
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 801e59c:	462a      	mov	r2, r5
 801e59e:	2115      	movs	r1, #21
 801e5a0:	4620      	mov	r0, r4
 801e5a2:	f7e6 f89b 	bl	80046dc <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 801e5a6:	462a      	mov	r2, r5
 801e5a8:	2116      	movs	r1, #22
 801e5aa:	4620      	mov	r0, r4
 801e5ac:	f7e6 f896 	bl	80046dc <lv_event_send>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 801e5b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e5b4:	4620      	mov	r0, r4
 801e5b6:	f10d 0810 	add.w	r8, sp, #16
 801e5ba:	f7fd fa27 	bl	801ba0c <lv_obj_has_flag>
 801e5be:	b300      	cbz	r0, 801e602 <lv_obj_redraw+0xa6>
        clip_coords_for_children  = *clip_area_ori;
 801e5c0:	4643      	mov	r3, r8
 801e5c2:	6830      	ldr	r0, [r6, #0]
 801e5c4:	6871      	ldr	r1, [r6, #4]
 801e5c6:	c303      	stmia	r3!, {r0, r1}
        draw_ctx->clip_area = &clip_coords_for_children;
 801e5c8:	f8c5 8008 	str.w	r8, [r5, #8]
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801e5cc:	4620      	mov	r0, r4
 801e5ce:	f7ff fded 	bl	801e1ac <lv_obj_get_child_cnt>
        for(i = 0; i < child_cnt; i++) {
 801e5d2:	f04f 0800 	mov.w	r8, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801e5d6:	4681      	mov	r9, r0
        for(i = 0; i < child_cnt; i++) {
 801e5d8:	45c8      	cmp	r8, r9
 801e5da:	d01a      	beq.n	801e612 <lv_obj_redraw+0xb6>
            lv_obj_t * child = obj->spec_attr->children[i];
 801e5dc:	68a3      	ldr	r3, [r4, #8]
            refr_obj(draw_ctx, child);
 801e5de:	4628      	mov	r0, r5
            lv_obj_t * child = obj->spec_attr->children[i];
 801e5e0:	681b      	ldr	r3, [r3, #0]
            refr_obj(draw_ctx, child);
 801e5e2:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
        for(i = 0; i < child_cnt; i++) {
 801e5e6:	f108 0801 	add.w	r8, r8, #1
            refr_obj(draw_ctx, child);
 801e5ea:	f7e8 f95d 	bl	80068a8 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 801e5ee:	e7f3      	b.n	801e5d8 <lv_obj_redraw+0x7c>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 801e5f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e5f4:	4620      	mov	r0, r4
 801e5f6:	f7fd fa09 	bl	801ba0c <lv_obj_has_flag>
 801e5fa:	4607      	mov	r7, r0
 801e5fc:	2800      	cmp	r0, #0
 801e5fe:	d1c5      	bne.n	801e58c <lv_obj_redraw+0x30>
 801e600:	e7d6      	b.n	801e5b0 <lv_obj_redraw+0x54>
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 801e602:	f104 0214 	add.w	r2, r4, #20
 801e606:	4631      	mov	r1, r6
 801e608:	4640      	mov	r0, r8
 801e60a:	f005 fe32 	bl	8024272 <_lv_area_intersect>
 801e60e:	2800      	cmp	r0, #0
 801e610:	d1da      	bne.n	801e5c8 <lv_obj_redraw+0x6c>
    if(should_draw) {
 801e612:	b187      	cbz	r7, 801e636 <lv_obj_redraw+0xda>
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 801e614:	462a      	mov	r2, r5
 801e616:	2117      	movs	r1, #23
 801e618:	4620      	mov	r0, r4
        draw_ctx->clip_area = &clip_coords_for_obj;
 801e61a:	f8c5 d008 	str.w	sp, [r5, #8]
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 801e61e:	f7e6 f85d 	bl	80046dc <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 801e622:	462a      	mov	r2, r5
 801e624:	2118      	movs	r1, #24
 801e626:	4620      	mov	r0, r4
 801e628:	f7e6 f858 	bl	80046dc <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 801e62c:	462a      	mov	r2, r5
 801e62e:	2119      	movs	r1, #25
 801e630:	4620      	mov	r0, r4
 801e632:	f7e6 f853 	bl	80046dc <lv_event_send>
    draw_ctx->clip_area = clip_area_ori;
 801e636:	60ae      	str	r6, [r5, #8]
}
 801e638:	b007      	add	sp, #28
 801e63a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801e63e <_lv_inv_area>:
{
 801e63e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801e640:	460d      	mov	r5, r1
    if(!disp) disp = lv_disp_get_default();
 801e642:	4604      	mov	r4, r0
 801e644:	b918      	cbnz	r0, 801e64e <_lv_inv_area+0x10>
 801e646:	f7f3 fd21 	bl	801208c <lv_disp_get_default>
    if(!disp) return;
 801e64a:	4604      	mov	r4, r0
 801e64c:	b158      	cbz	r0, 801e666 <_lv_inv_area+0x28>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 801e64e:	4620      	mov	r0, r4
 801e650:	f7fc fda0 	bl	801b194 <lv_disp_is_invalidation_enabled>
 801e654:	b138      	cbz	r0, 801e666 <_lv_inv_area+0x28>
    if(disp->rendering_in_progress) {
 801e656:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801e65a:	f013 0304 	ands.w	r3, r3, #4
 801e65e:	d102      	bne.n	801e666 <_lv_inv_area+0x28>
    if(area_p == NULL) {
 801e660:	b91d      	cbnz	r5, 801e66a <_lv_inv_area+0x2c>
        disp->inv_p = 0;
 801e662:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
}
 801e666:	b004      	add	sp, #16
 801e668:	bd70      	pop	{r4, r5, r6, pc}
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 801e66a:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 801e66c:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 801e66e:	f7f3 fd13 	bl	8012098 <lv_disp_get_hor_res>
 801e672:	3801      	subs	r0, #1
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 801e674:	466e      	mov	r6, sp
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 801e676:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 801e67a:	4620      	mov	r0, r4
 801e67c:	f7f3 fd1c 	bl	80120b8 <lv_disp_get_ver_res>
 801e680:	3801      	subs	r0, #1
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 801e682:	4632      	mov	r2, r6
 801e684:	4629      	mov	r1, r5
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 801e686:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 801e68a:	a802      	add	r0, sp, #8
 801e68c:	f005 fdf1 	bl	8024272 <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 801e690:	2800      	cmp	r0, #0
 801e692:	d0e8      	beq.n	801e666 <_lv_inv_area+0x28>
    if(disp->driver->full_refresh) {
 801e694:	6820      	ldr	r0, [r4, #0]
 801e696:	7c03      	ldrb	r3, [r0, #16]
 801e698:	079b      	lsls	r3, r3, #30
 801e69a:	d50e      	bpl.n	801e6ba <_lv_inv_area+0x7c>
        disp->inv_areas[0] = scr_area;
 801e69c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801e6a0:	e896 0003 	ldmia.w	r6, {r0, r1}
 801e6a4:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 801e6a8:	2301      	movs	r3, #1
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 801e6aa:	6860      	ldr	r0, [r4, #4]
    disp->inv_p++;
 801e6ac:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 801e6b0:	2800      	cmp	r0, #0
 801e6b2:	d0d8      	beq.n	801e666 <_lv_inv_area+0x28>
 801e6b4:	f006 fcf8 	bl	80250a8 <lv_timer_resume>
 801e6b8:	e7d5      	b.n	801e666 <_lv_inv_area+0x28>
    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 801e6ba:	6983      	ldr	r3, [r0, #24]
 801e6bc:	b10b      	cbz	r3, 801e6c2 <_lv_inv_area+0x84>
 801e6be:	a902      	add	r1, sp, #8
 801e6c0:	4798      	blx	r3
{
 801e6c2:	2500      	movs	r5, #0
    for(i = 0; i < disp->inv_p; i++) {
 801e6c4:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 801e6c8:	b2aa      	uxth	r2, r5
 801e6ca:	4293      	cmp	r3, r2
 801e6cc:	d80b      	bhi.n	801e6e6 <_lv_inv_area+0xa8>
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 801e6ce:	2b1f      	cmp	r3, #31
 801e6d0:	d815      	bhi.n	801e6fe <_lv_inv_area+0xc0>
    dest->x1 = src->x1;
 801e6d2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 801e6d6:	9a02      	ldr	r2, [sp, #8]
 801e6d8:	631a      	str	r2, [r3, #48]	; 0x30
    dest->x2 = src->x2;
 801e6da:	9a03      	ldr	r2, [sp, #12]
 801e6dc:	635a      	str	r2, [r3, #52]	; 0x34
    disp->inv_p++;
 801e6de:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 801e6e2:	3301      	adds	r3, #1
 801e6e4:	e7e1      	b.n	801e6aa <_lv_inv_area+0x6c>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 801e6e6:	b2a9      	uxth	r1, r5
 801e6e8:	2200      	movs	r2, #0
 801e6ea:	a802      	add	r0, sp, #8
 801e6ec:	3501      	adds	r5, #1
 801e6ee:	3106      	adds	r1, #6
 801e6f0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 801e6f4:	f005 febc 	bl	8024470 <_lv_area_is_in>
 801e6f8:	2800      	cmp	r0, #0
 801e6fa:	d0e3      	beq.n	801e6c4 <_lv_inv_area+0x86>
 801e6fc:	e7b3      	b.n	801e666 <_lv_inv_area+0x28>
        disp->inv_p = 0;
 801e6fe:	2300      	movs	r3, #0
 801e700:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    dest->x1 = src->x1;
 801e704:	f8bd 3000 	ldrh.w	r3, [sp]
 801e708:	8623      	strh	r3, [r4, #48]	; 0x30
    dest->y1 = src->y1;
 801e70a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e70e:	8663      	strh	r3, [r4, #50]	; 0x32
    dest->x2 = src->x2;
 801e710:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801e714:	86a3      	strh	r3, [r4, #52]	; 0x34
    dest->y2 = src->y2;
 801e716:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801e71a:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 801e71c:	e7df      	b.n	801e6de <_lv_inv_area+0xa0>

0801e71e <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 801e71e:	b570      	push	{r4, r5, r6, lr}
 801e720:	4604      	mov	r4, r0
    if(th->parent) apply_theme(th->parent, obj);
 801e722:	6840      	ldr	r0, [r0, #4]
{
 801e724:	460d      	mov	r5, r1
    if(th->parent) apply_theme(th->parent, obj);
 801e726:	b108      	cbz	r0, 801e72c <apply_theme+0xe>
 801e728:	f7ff fff9 	bl	801e71e <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 801e72c:	6823      	ldr	r3, [r4, #0]
 801e72e:	b123      	cbz	r3, 801e73a <apply_theme+0x1c>
 801e730:	4629      	mov	r1, r5
 801e732:	4620      	mov	r0, r4
}
 801e734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(th->apply_cb) th->apply_cb(th, obj);
 801e738:	4718      	bx	r3
}
 801e73a:	bd70      	pop	{r4, r5, r6, pc}

0801e73c <lv_theme_get_from_obj>:
{
 801e73c:	b508      	push	{r3, lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 801e73e:	b128      	cbz	r0, 801e74c <lv_theme_get_from_obj+0x10>
 801e740:	f7e8 f894 	bl	800686c <lv_obj_get_disp>
}
 801e744:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_theme(disp);
 801e748:	f7fc bd1e 	b.w	801b188 <lv_disp_get_theme>
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 801e74c:	f7f3 fc9e 	bl	801208c <lv_disp_get_default>
 801e750:	e7f8      	b.n	801e744 <lv_theme_get_from_obj+0x8>

0801e752 <lv_theme_get_color_primary>:
{
 801e752:	b508      	push	{r3, lr}
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 801e754:	f7ff fff2 	bl	801e73c <lv_theme_get_from_obj>
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 801e758:	b920      	cbnz	r0, 801e764 <lv_theme_get_color_primary+0x12>
 801e75a:	2011      	movs	r0, #17
}
 801e75c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 801e760:	f7f3 bf0c 	b.w	801257c <lv_palette_main>
 801e764:	8a00      	ldrh	r0, [r0, #16]
}
 801e766:	bd08      	pop	{r3, pc}

0801e768 <lv_draw_init>:
 **********************/

void lv_draw_init(void)
{
    /*Nothing to init now*/
}
 801e768:	4770      	bx	lr

0801e76a <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 801e76a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801e76c:	b103      	cbz	r3, 801e770 <lv_draw_wait_for_finish+0x6>
 801e76e:	4718      	bx	r3
}
 801e770:	4770      	bx	lr

0801e772 <lv_draw_arc_dsc_init>:
{
 801e772:	b510      	push	{r4, lr}
 801e774:	2210      	movs	r2, #16
 801e776:	2100      	movs	r1, #0
 801e778:	4604      	mov	r4, r0
 801e77a:	f7fb ffd1 	bl	801a720 <memset>
    dsc->opa = LV_OPA_COVER;
 801e77e:	23ff      	movs	r3, #255	; 0xff
 801e780:	7323      	strb	r3, [r4, #12]
    dsc->color = lv_color_black();
 801e782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801e786:	6023      	str	r3, [r4, #0]
}
 801e788:	bd10      	pop	{r4, pc}

0801e78a <lv_draw_arc>:
    if(dsc->opa <= LV_OPA_MIN) return;
 801e78a:	f891 c00c 	ldrb.w	ip, [r1, #12]
 801e78e:	f1bc 0f02 	cmp.w	ip, #2
{
 801e792:	b4f0      	push	{r4, r5, r6, r7}
 801e794:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 801e798:	f8bd 7014 	ldrh.w	r7, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
 801e79c:	d90a      	bls.n	801e7b4 <lv_draw_arc+0x2a>
    if(dsc->width == 0) return;
 801e79e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801e7a2:	b13c      	cbz	r4, 801e7b4 <lv_draw_arc+0x2a>
    if(start_angle == end_angle) return;
 801e7a4:	42be      	cmp	r6, r7
 801e7a6:	d005      	beq.n	801e7b4 <lv_draw_arc+0x2a>
    draw_ctx->draw_arc(draw_ctx, dsc, center, radius, start_angle, end_angle);
 801e7a8:	6944      	ldr	r4, [r0, #20]
 801e7aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801e7ae:	46a4      	mov	ip, r4
}
 801e7b0:	bcf0      	pop	{r4, r5, r6, r7}
    draw_ctx->draw_arc(draw_ctx, dsc, center, radius, start_angle, end_angle);
 801e7b2:	4760      	bx	ip
}
 801e7b4:	bcf0      	pop	{r4, r5, r6, r7}
 801e7b6:	4770      	bx	lr

0801e7b8 <show_error>:
{
 801e7b8:	b570      	push	{r4, r5, r6, lr}
 801e7ba:	b098      	sub	sp, #96	; 0x60
 801e7bc:	460d      	mov	r5, r1
 801e7be:	4604      	mov	r4, r0
 801e7c0:	4616      	mov	r6, r2
    lv_draw_rect_dsc_init(&rect_dsc);
 801e7c2:	a80a      	add	r0, sp, #40	; 0x28
 801e7c4:	f7ea f8ba 	bl	800893c <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 801e7c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 801e7cc:	462a      	mov	r2, r5
 801e7ce:	a90a      	add	r1, sp, #40	; 0x28
 801e7d0:	4620      	mov	r0, r4
    rect_dsc.bg_color = lv_color_white();
 801e7d2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 801e7d6:	f000 fde6 	bl	801f3a6 <lv_draw_rect>
    lv_draw_label_dsc_init(&label_dsc);
 801e7da:	a802      	add	r0, sp, #8
 801e7dc:	f7e9 fa64 	bl	8007ca8 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 801e7e0:	2300      	movs	r3, #0
 801e7e2:	462a      	mov	r2, r5
 801e7e4:	a902      	add	r1, sp, #8
 801e7e6:	9300      	str	r3, [sp, #0]
 801e7e8:	4620      	mov	r0, r4
 801e7ea:	4633      	mov	r3, r6
 801e7ec:	f7e9 fa74 	bl	8007cd8 <lv_draw_label>
}
 801e7f0:	b018      	add	sp, #96	; 0x60
 801e7f2:	bd70      	pop	{r4, r5, r6, pc}

0801e7f4 <lv_draw_img_dsc_init>:
{
 801e7f4:	b510      	push	{r4, lr}
 801e7f6:	2218      	movs	r2, #24
 801e7f8:	2100      	movs	r1, #0
 801e7fa:	4604      	mov	r4, r0
 801e7fc:	f7fb ff90 	bl	801a720 <memset>
    dsc->recolor = lv_color_black();
 801e800:	2300      	movs	r3, #0
 801e802:	8123      	strh	r3, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 801e804:	23ff      	movs	r3, #255	; 0xff
 801e806:	72e3      	strb	r3, [r4, #11]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 801e808:	f44f 7380 	mov.w	r3, #256	; 0x100
 801e80c:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 801e80e:	7d23      	ldrb	r3, [r4, #20]
 801e810:	f043 0301 	orr.w	r3, r3, #1
 801e814:	7523      	strb	r3, [r4, #20]
}
 801e816:	bd10      	pop	{r4, pc}

0801e818 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
 801e818:	2803      	cmp	r0, #3
 801e81a:	d003      	beq.n	801e824 <lv_img_cf_is_chroma_keyed+0xc>
 801e81c:	1f83      	subs	r3, r0, #6
 801e81e:	4258      	negs	r0, r3
 801e820:	4158      	adcs	r0, r3
 801e822:	4770      	bx	lr
            is_chroma_keyed = true;
 801e824:	2001      	movs	r0, #1
}
 801e826:	4770      	bx	lr

0801e828 <lv_img_cf_has_alpha>:
    switch(cf) {
 801e828:	280e      	cmp	r0, #14
 801e82a:	bf9d      	ittte	ls
 801e82c:	f647 73a4 	movwls	r3, #32676	; 0x7fa4
 801e830:	fa23 f000 	lsrls.w	r0, r3, r0
 801e834:	f000 0001 	andls.w	r0, r0, #1
 801e838:	2000      	movhi	r0, #0
}
 801e83a:	4770      	bx	lr

0801e83c <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 801e83c:	b138      	cbz	r0, 801e84e <lv_img_src_get_type+0x12>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 801e83e:	7800      	ldrb	r0, [r0, #0]
 801e840:	f1a0 0320 	sub.w	r3, r0, #32
 801e844:	2b5f      	cmp	r3, #95	; 0x5f
 801e846:	d904      	bls.n	801e852 <lv_img_src_get_type+0x16>
    else if(u8_p[0] >= 0x80) {
 801e848:	09c0      	lsrs	r0, r0, #7
 801e84a:	0040      	lsls	r0, r0, #1
 801e84c:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 801e84e:	2003      	movs	r0, #3
 801e850:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 801e852:	2001      	movs	r0, #1
}
 801e854:	4770      	bx	lr

0801e856 <lv_draw_img_decoded>:
{
 801e856:	b430      	push	{r4, r5}
    if(draw_ctx->draw_img_decoded == NULL) return;
 801e858:	6984      	ldr	r4, [r0, #24]
{
 801e85a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if(draw_ctx->draw_img_decoded == NULL) return;
 801e85e:	b11c      	cbz	r4, 801e868 <lv_draw_img_decoded+0x12>
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 801e860:	46a4      	mov	ip, r4
 801e862:	9502      	str	r5, [sp, #8]
}
 801e864:	bc30      	pop	{r4, r5}
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 801e866:	4760      	bx	ip
}
 801e868:	bc30      	pop	{r4, r5}
 801e86a:	4770      	bx	lr

0801e86c <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 801e86c:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 801e86e:	3830      	subs	r0, #48	; 0x30
 801e870:	b2c0      	uxtb	r0, r0
 801e872:	2809      	cmp	r0, #9
 801e874:	d90b      	bls.n	801e88e <hex_char_to_num+0x22>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 801e876:	2b60      	cmp	r3, #96	; 0x60
 801e878:	bf84      	itt	hi
 801e87a:	3b20      	subhi	r3, #32
 801e87c:	b2db      	uxtbhi	r3, r3

        switch(hex) {
 801e87e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801e882:	2a05      	cmp	r2, #5
 801e884:	d802      	bhi.n	801e88c <hex_char_to_num+0x20>
 801e886:	3b37      	subs	r3, #55	; 0x37
 801e888:	b2d8      	uxtb	r0, r3
 801e88a:	4770      	bx	lr
{
 801e88c:	2000      	movs	r0, #0
                break;
        }
    }

    return result;
}
 801e88e:	4770      	bx	lr

0801e890 <lv_draw_letter>:
{
 801e890:	b410      	push	{r4}
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 801e892:	6a04      	ldr	r4, [r0, #32]
 801e894:	46a4      	mov	ip, r4
}
 801e896:	bc10      	pop	{r4}
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 801e898:	4760      	bx	ip

0801e89a <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 801e89a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e89c:	4605      	mov	r5, r0
    if(draw_ctx->layer_init == NULL) return NULL;
 801e89e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
{
 801e8a0:	460e      	mov	r6, r1
 801e8a2:	4617      	mov	r7, r2
    if(draw_ctx->layer_init == NULL) return NULL;
 801e8a4:	b338      	cbz	r0, 801e8f6 <lv_draw_layer_create+0x5c>

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 801e8a6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 801e8a8:	f7f3 ff02 	bl	80126b0 <lv_mem_alloc>
    LV_ASSERT_MALLOC(layer_ctx);
 801e8ac:	4604      	mov	r4, r0
 801e8ae:	b900      	cbnz	r0, 801e8b2 <lv_draw_layer_create+0x18>
 801e8b0:	e7fe      	b.n	801e8b0 <lv_draw_layer_create+0x16>
 801e8b2:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 801e8b4:	2100      	movs	r1, #0
 801e8b6:	f7fb ff33 	bl	801a720 <memset>
        return NULL;
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 801e8ba:	f7e8 fca3 	bl	8007204 <_lv_refr_get_disp_refreshing>
    layer_ctx->original.buf = draw_ctx->buf;
 801e8be:	682b      	ldr	r3, [r5, #0]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
    layer_ctx->original.clip_area = draw_ctx->clip_area;
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
    layer_ctx->area_full = *layer_area;

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 801e8c0:	463a      	mov	r2, r7
    layer_ctx->original.buf = draw_ctx->buf;
 801e8c2:	6223      	str	r3, [r4, #32]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
 801e8c4:	686b      	ldr	r3, [r5, #4]
 801e8c6:	61e3      	str	r3, [r4, #28]
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 801e8c8:	68ab      	ldr	r3, [r5, #8]
 801e8ca:	61a3      	str	r3, [r4, #24]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 801e8cc:	6803      	ldr	r3, [r0, #0]
 801e8ce:	7c1b      	ldrb	r3, [r3, #16]
 801e8d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801e8d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    layer_ctx->area_full = *layer_area;
 801e8d8:	4623      	mov	r3, r4
 801e8da:	6830      	ldr	r0, [r6, #0]
 801e8dc:	6871      	ldr	r1, [r6, #4]
 801e8de:	c303      	stmia	r3!, {r0, r1}
    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 801e8e0:	4628      	mov	r0, r5
 801e8e2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801e8e4:	4621      	mov	r1, r4
 801e8e6:	4798      	blx	r3
    if(NULL == init_layer_ctx) {
 801e8e8:	4605      	mov	r5, r0
 801e8ea:	b910      	cbnz	r0, 801e8f2 <lv_draw_layer_create+0x58>
        lv_mem_free(layer_ctx);
 801e8ec:	4620      	mov	r0, r4
 801e8ee:	f7f3 fefd 	bl	80126ec <lv_mem_free>
    }
    return init_layer_ctx;
}
 801e8f2:	4628      	mov	r0, r5
 801e8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(draw_ctx->layer_init == NULL) return NULL;
 801e8f6:	4605      	mov	r5, r0
 801e8f8:	e7fb      	b.n	801e8f2 <lv_draw_layer_create+0x58>

0801e8fa <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 801e8fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801e8fc:	b103      	cbz	r3, 801e900 <lv_draw_layer_adjust+0x6>
 801e8fe:	4718      	bx	r3
}
 801e900:	4770      	bx	lr

0801e902 <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 801e902:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801e904:	b103      	cbz	r3, 801e908 <lv_draw_layer_blend+0x6>
 801e906:	4718      	bx	r3
}
 801e908:	4770      	bx	lr

0801e90a <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 801e90a:	b538      	push	{r3, r4, r5, lr}
 801e90c:	460c      	mov	r4, r1
 801e90e:	4605      	mov	r5, r0

    lv_draw_wait_for_finish(draw_ctx);
 801e910:	f7ff ff2b 	bl	801e76a <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 801e914:	6a23      	ldr	r3, [r4, #32]
 801e916:	602b      	str	r3, [r5, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 801e918:	69e3      	ldr	r3, [r4, #28]
 801e91a:	606b      	str	r3, [r5, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 801e91c:	69a3      	ldr	r3, [r4, #24]
 801e91e:	60ab      	str	r3, [r5, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 801e920:	f7e8 fc70 	bl	8007204 <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 801e924:	6803      	ldr	r3, [r0, #0]
 801e926:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 801e92a:	7c1a      	ldrb	r2, [r3, #16]
 801e92c:	f361 1286 	bfi	r2, r1, #6, #1
 801e930:	741a      	strb	r2, [r3, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 801e932:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801e934:	b113      	cbz	r3, 801e93c <lv_draw_layer_destroy+0x32>
 801e936:	4621      	mov	r1, r4
 801e938:	4628      	mov	r0, r5
 801e93a:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 801e93c:	4620      	mov	r0, r4
}
 801e93e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_mem_free(layer_ctx);
 801e942:	f7f3 bed3 	b.w	80126ec <lv_mem_free>

0801e946 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 801e946:	b510      	push	{r4, lr}
 801e948:	220a      	movs	r2, #10
 801e94a:	2100      	movs	r1, #0
 801e94c:	4604      	mov	r4, r0
 801e94e:	f7fb fee7 	bl	801a720 <memset>
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
    dsc->width = 1;
    dsc->opa = LV_OPA_COVER;
 801e952:	23ff      	movs	r3, #255	; 0xff
 801e954:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 801e956:	2300      	movs	r3, #0
 801e958:	8023      	strh	r3, [r4, #0]
    dsc->width = 1;
 801e95a:	2301      	movs	r3, #1
 801e95c:	8063      	strh	r3, [r4, #2]
}
 801e95e:	bd10      	pop	{r4, pc}

0801e960 <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 801e960:	b470      	push	{r4, r5, r6}
    if(dsc->width == 0) return;
 801e962:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801e966:	b136      	cbz	r6, 801e976 <lv_draw_line+0x16>
    if(dsc->opa <= LV_OPA_MIN) return;
 801e968:	7a0c      	ldrb	r4, [r1, #8]
 801e96a:	2c02      	cmp	r4, #2
 801e96c:	d903      	bls.n	801e976 <lv_draw_line+0x16>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 801e96e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801e970:	46a4      	mov	ip, r4
}
 801e972:	bc70      	pop	{r4, r5, r6}
    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 801e974:	4760      	bx	ip
}
 801e976:	bc70      	pop	{r4, r5, r6}
 801e978:	4770      	bx	lr

0801e97a <lv_memset_00>:
{
 801e97a:	460a      	mov	r2, r1
    memset(dst, 0x00, len);
 801e97c:	2100      	movs	r1, #0
 801e97e:	f7fb becf 	b.w	801a720 <memset>

0801e982 <mask_mix>:
}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 801e982:	29fc      	cmp	r1, #252	; 0xfc
 801e984:	d80a      	bhi.n	801e99c <mask_mix+0x1a>
    if(mask_new <= LV_OPA_MIN) return 0;
 801e986:	2902      	cmp	r1, #2
 801e988:	d907      	bls.n	801e99a <mask_mix+0x18>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 801e98a:	fb10 f001 	smulbb	r0, r0, r1
 801e98e:	f248 0381 	movw	r3, #32897	; 0x8081
 801e992:	4358      	muls	r0, r3
 801e994:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 801e998:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
 801e99a:	2000      	movs	r0, #0
}
 801e99c:	4770      	bx	lr

0801e99e <lv_draw_mask_line>:
{
 801e99e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e9a2:	9e08      	ldr	r6, [sp, #32]
 801e9a4:	461c      	mov	r4, r3
 801e9a6:	4605      	mov	r5, r0
    abs_y -= p->origo.y;
 801e9a8:	8ab3      	ldrh	r3, [r6, #20]
        if(p->flat) {
 801e9aa:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
    abs_y -= p->origo.y;
 801e9ae:	1ad2      	subs	r2, r2, r3
    abs_x -= p->origo.x;
 801e9b0:	8a73      	ldrh	r3, [r6, #18]
    abs_y -= p->origo.y;
 801e9b2:	fa0f fc82 	sxth.w	ip, r2
    abs_x -= p->origo.x;
 801e9b6:	1aca      	subs	r2, r1, r3
        if(p->flat) {
 801e9b8:	f00e 0101 	and.w	r1, lr, #1
    abs_x -= p->origo.x;
 801e9bc:	b217      	sxth	r7, r2
    if(p->steep == 0) {
 801e9be:	6a32      	ldr	r2, [r6, #32]
 801e9c0:	2a00      	cmp	r2, #0
 801e9c2:	d141      	bne.n	801ea48 <lv_draw_mask_line+0xaa>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 801e9c4:	7c33      	ldrb	r3, [r6, #16]
 801e9c6:	f003 0002 	and.w	r0, r3, #2
        if(p->flat) {
 801e9ca:	b1a9      	cbz	r1, 801e9f8 <lv_draw_mask_line+0x5a>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 801e9cc:	b1a8      	cbz	r0, 801e9fa <lv_draw_mask_line+0x5c>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801e9ce:	f003 0303 	and.w	r3, r3, #3
 801e9d2:	2b02      	cmp	r3, #2
 801e9d4:	d106      	bne.n	801e9e4 <lv_draw_mask_line+0x46>
 801e9d6:	f1bc 3fff 	cmp.w	ip, #4294967295
 801e9da:	bfac      	ite	ge
 801e9dc:	2000      	movge	r0, #0
 801e9de:	2001      	movlt	r0, #1
}
 801e9e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801e9e4:	2b03      	cmp	r3, #3
 801e9e6:	d001      	beq.n	801e9ec <lv_draw_mask_line+0x4e>
                return LV_DRAW_MASK_RES_TRANSP;
 801e9e8:	2000      	movs	r0, #0
 801e9ea:	e7f9      	b.n	801e9e0 <lv_draw_mask_line+0x42>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801e9ec:	f1bc 0f00 	cmp.w	ip, #0
 801e9f0:	bfd4      	ite	le
 801e9f2:	2000      	movle	r0, #0
 801e9f4:	2001      	movgt	r0, #1
 801e9f6:	e7f3      	b.n	801e9e0 <lv_draw_mask_line+0x42>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 801e9f8:	b108      	cbz	r0, 801e9fe <lv_draw_mask_line+0x60>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 801e9fa:	2001      	movs	r0, #1
 801e9fc:	e7f0      	b.n	801e9e0 <lv_draw_mask_line+0x42>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801e9fe:	f003 0303 	and.w	r3, r3, #3
 801ea02:	2b01      	cmp	r3, #1
 801ea04:	d108      	bne.n	801ea18 <lv_draw_mask_line+0x7a>
 801ea06:	2f00      	cmp	r7, #0
 801ea08:	dcf7      	bgt.n	801e9fa <lv_draw_mask_line+0x5c>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 801ea0a:	42e7      	cmn	r7, r4
 801ea0c:	d4ec      	bmi.n	801e9e8 <lv_draw_mask_line+0x4a>
                    int32_t k = - abs_x;
 801ea0e:	427a      	negs	r2, r7
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 801ea10:	4294      	cmp	r4, r2
 801ea12:	dde9      	ble.n	801e9e8 <lv_draw_mask_line+0x4a>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 801ea14:	4611      	mov	r1, r2
 801ea16:	e0ff      	b.n	801ec18 <lv_draw_mask_line+0x27a>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801ea18:	1939      	adds	r1, r7, r4
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 801ea1a:	b95b      	cbnz	r3, 801ea34 <lv_draw_mask_line+0x96>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801ea1c:	2900      	cmp	r1, #0
 801ea1e:	dbec      	blt.n	801e9fa <lv_draw_mask_line+0x5c>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 801ea20:	2f00      	cmp	r7, #0
 801ea22:	dce1      	bgt.n	801e9e8 <lv_draw_mask_line+0x4a>
                    int32_t k = - abs_x;
 801ea24:	4278      	negs	r0, r7
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 801ea26:	42a0      	cmp	r0, r4
 801ea28:	da02      	bge.n	801ea30 <lv_draw_mask_line+0x92>
 801ea2a:	4428      	add	r0, r5
            lv_memset_00(&mask_buf[k], len - k);
 801ea2c:	f7ff ffa5 	bl	801e97a <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 801ea30:	2002      	movs	r0, #2
 801ea32:	e7d5      	b.n	801e9e0 <lv_draw_mask_line+0x42>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 801ea34:	2900      	cmp	r1, #0
 801ea36:	dbd7      	blt.n	801e9e8 <lv_draw_mask_line+0x4a>
                    if(k < 0) k = 0;
 801ea38:	2f00      	cmp	r7, #0
 801ea3a:	dd01      	ble.n	801ea40 <lv_draw_mask_line+0xa2>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 801ea3c:	2c00      	cmp	r4, #0
 801ea3e:	e7e8      	b.n	801ea12 <lv_draw_mask_line+0x74>
                    int32_t k = - abs_x;
 801ea40:	427a      	negs	r2, r7
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 801ea42:	42a2      	cmp	r2, r4
 801ea44:	dad0      	bge.n	801e9e8 <lv_draw_mask_line+0x4a>
 801ea46:	e7e5      	b.n	801ea14 <lv_draw_mask_line+0x76>
    if(p->flat) {
 801ea48:	f00e 0002 	and.w	r0, lr, #2
 801ea4c:	2900      	cmp	r1, #0
 801ea4e:	f000 80a2 	beq.w	801eb96 <lv_draw_mask_line+0x1f8>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 801ea52:	69f3      	ldr	r3, [r6, #28]
            if(p->inv) {
 801ea54:	b2c0      	uxtb	r0, r0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 801ea56:	fb07 f203 	mul.w	r2, r7, r3
    if(p->yx_steep > 0) {
 801ea5a:	2b00      	cmp	r3, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 801ea5c:	ea4f 22a2 	mov.w	r2, r2, asr #10
    if(p->yx_steep > 0) {
 801ea60:	dd05      	ble.n	801ea6e <lv_draw_mask_line+0xd0>
        if(y_at_x > abs_y) {
 801ea62:	4562      	cmp	r2, ip
 801ea64:	dd0e      	ble.n	801ea84 <lv_draw_mask_line+0xe6>
        if(p->inv) {
 801ea66:	3800      	subs	r0, #0
 801ea68:	bf18      	it	ne
 801ea6a:	2001      	movne	r0, #1
 801ea6c:	e7b8      	b.n	801e9e0 <lv_draw_mask_line+0x42>
        if(y_at_x < abs_y) {
 801ea6e:	4562      	cmp	r2, ip
 801ea70:	dbf9      	blt.n	801ea66 <lv_draw_mask_line+0xc8>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 801ea72:	19e2      	adds	r2, r4, r7
 801ea74:	4353      	muls	r3, r2
        if(y_at_x > abs_y) {
 801ea76:	ebbc 2fa3 	cmp.w	ip, r3, asr #10
 801ea7a:	db08      	blt.n	801ea8e <lv_draw_mask_line+0xf0>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 801ea7c:	69b3      	ldr	r3, [r6, #24]
 801ea7e:	fb0c 3303 	mla	r3, ip, r3, r3
 801ea82:	e00b      	b.n	801ea9c <lv_draw_mask_line+0xfe>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 801ea84:	19e2      	adds	r2, r4, r7
 801ea86:	4353      	muls	r3, r2
        if(y_at_x < abs_y) {
 801ea88:	ebbc 2fa3 	cmp.w	ip, r3, asr #10
 801ea8c:	dd03      	ble.n	801ea96 <lv_draw_mask_line+0xf8>
        if(p->inv) {
 801ea8e:	fab0 f080 	clz	r0, r0
 801ea92:	0940      	lsrs	r0, r0, #5
 801ea94:	e7a4      	b.n	801e9e0 <lv_draw_mask_line+0x42>
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 801ea96:	69b3      	ldr	r3, [r6, #24]
 801ea98:	fb03 f30c 	mul.w	r3, r3, ip
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 801ea9c:	f343 0395 	sbfx	r3, r3, #2, #22
    if(xef == 0) px_h = 255;
 801eaa0:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
    int32_t k = xei - abs_x;
 801eaa4:	ebc7 2223 	rsb	r2, r7, r3, asr #8
    if(xef == 0) px_h = 255;
 801eaa8:	d068      	beq.n	801eb7c <lv_draw_mask_line+0x1de>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 801eaaa:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 801eaae:	6a73      	ldr	r3, [r6, #36]	; 0x24
        if(k >= 0 && k < len) {
 801eab0:	2a00      	cmp	r2, #0
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 801eab2:	fb01 f303 	mul.w	r3, r1, r3
 801eab6:	ea4f 2323 	mov.w	r3, r3, asr #8
 801eaba:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
        if(k >= 0 && k < len) {
 801eabe:	db0b      	blt.n	801ead8 <lv_draw_mask_line+0x13a>
 801eac0:	4294      	cmp	r4, r2
 801eac2:	dd09      	ble.n	801ead8 <lv_draw_mask_line+0x13a>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 801eac4:	4359      	muls	r1, r3
 801eac6:	f3c1 2147 	ubfx	r1, r1, #9, #8
            if(p->inv) m = 255 - m;
 801eaca:	b908      	cbnz	r0, 801ead0 <lv_draw_mask_line+0x132>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 801eacc:	43c9      	mvns	r1, r1
 801eace:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 801ead0:	5ca8      	ldrb	r0, [r5, r2]
 801ead2:	f7ff ff56 	bl	801e982 <mask_mix>
 801ead6:	54a8      	strb	r0, [r5, r2]
        k++;
 801ead8:	f102 0801 	add.w	r8, r2, #1
    while(px_h > p->spx) {
 801eadc:	6a71      	ldr	r1, [r6, #36]	; 0x24
 801eade:	428f      	cmp	r7, r1
 801eae0:	dc28      	bgt.n	801eb34 <lv_draw_mask_line+0x196>
    if(k < len && k >= 0) {
 801eae2:	45a0      	cmp	r8, r4
 801eae4:	da41      	bge.n	801eb6a <lv_draw_mask_line+0x1cc>
 801eae6:	f1b8 0f00 	cmp.w	r8, #0
 801eaea:	db3e      	blt.n	801eb6a <lv_draw_mask_line+0x1cc>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 801eaec:	69b1      	ldr	r1, [r6, #24]
        if(p->yx_steep < 0) m = 255 - m;
 801eaee:	69f3      	ldr	r3, [r6, #28]
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 801eaf0:	4379      	muls	r1, r7
        mask_buf[k] = mask_mix(mask_buf[k], m);
 801eaf2:	f815 0008 	ldrb.w	r0, [r5, r8]
        if(p->yx_steep < 0) m = 255 - m;
 801eaf6:	2b00      	cmp	r3, #0
        if(p->inv) m = 255 - m;
 801eaf8:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 801eafc:	ea4f 21a1 	mov.w	r1, r1, asr #10
        m = (x_inters * px_h) >> 9;
 801eb00:	fb07 f101 	mul.w	r1, r7, r1
 801eb04:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
 801eb08:	bfbc      	itt	lt
 801eb0a:	43c9      	mvnlt	r1, r1
 801eb0c:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
 801eb0e:	079f      	lsls	r7, r3, #30
 801eb10:	bf44      	itt	mi
 801eb12:	43c9      	mvnmi	r1, r1
 801eb14:	b2c9      	uxtbmi	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
 801eb16:	f7ff ff34 	bl	801e982 <mask_mix>
 801eb1a:	f805 0008 	strb.w	r0, [r5, r8]
    if(p->inv) {
 801eb1e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 801eb22:	0798      	lsls	r0, r3, #30
 801eb24:	d52d      	bpl.n	801eb82 <lv_draw_mask_line+0x1e4>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 801eb26:	4294      	cmp	r4, r2
 801eb28:	f6ff af5e 	blt.w	801e9e8 <lv_draw_mask_line+0x4a>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 801eb2c:	2a00      	cmp	r2, #0
 801eb2e:	f6ff af7f 	blt.w	801ea30 <lv_draw_mask_line+0x92>
 801eb32:	e76f      	b.n	801ea14 <lv_draw_mask_line+0x76>
        if(k >= 0 && k < len) {
 801eb34:	f1b8 0f00 	cmp.w	r8, #0
 801eb38:	db10      	blt.n	801eb5c <lv_draw_mask_line+0x1be>
 801eb3a:	45a0      	cmp	r8, r4
 801eb3c:	da0e      	bge.n	801eb5c <lv_draw_mask_line+0x1be>
            if(p->inv) m = 255 - m;
 801eb3e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
            m = px_h - (p->spx >> 1);
 801eb42:	eba7 0161 	sub.w	r1, r7, r1, asr #1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 801eb46:	f815 0008 	ldrb.w	r0, [r5, r8]
            m = px_h - (p->spx >> 1);
 801eb4a:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
 801eb4c:	079b      	lsls	r3, r3, #30
 801eb4e:	bf44      	itt	mi
 801eb50:	43c9      	mvnmi	r1, r1
 801eb52:	b2c9      	uxtbmi	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 801eb54:	f7ff ff15 	bl	801e982 <mask_mix>
 801eb58:	f805 0008 	strb.w	r0, [r5, r8]
        k++;
 801eb5c:	f108 0801 	add.w	r8, r8, #1
        px_h -= p->spx;
 801eb60:	6a73      	ldr	r3, [r6, #36]	; 0x24
        if(k >= len) break;
 801eb62:	45a0      	cmp	r8, r4
        px_h -= p->spx;
 801eb64:	eba7 0703 	sub.w	r7, r7, r3
        if(k >= len) break;
 801eb68:	dbb8      	blt.n	801eadc <lv_draw_mask_line+0x13e>
    if(p->inv) {
 801eb6a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 801eb6e:	0799      	lsls	r1, r3, #30
 801eb70:	d4d9      	bmi.n	801eb26 <lv_draw_mask_line+0x188>
        if(k < 0) {
 801eb72:	f118 0801 	adds.w	r8, r8, #1
 801eb76:	f53f af37 	bmi.w	801e9e8 <lv_draw_mask_line+0x4a>
 801eb7a:	e004      	b.n	801eb86 <lv_draw_mask_line+0x1e8>
    int32_t k = xei - abs_x;
 801eb7c:	4690      	mov	r8, r2
    if(xef == 0) px_h = 255;
 801eb7e:	27ff      	movs	r7, #255	; 0xff
 801eb80:	e7ac      	b.n	801eadc <lv_draw_mask_line+0x13e>
        k++;
 801eb82:	f108 0801 	add.w	r8, r8, #1
        if(k <= len) {
 801eb86:	4544      	cmp	r4, r8
 801eb88:	f6ff af52 	blt.w	801ea30 <lv_draw_mask_line+0x92>
            lv_memset_00(&mask_buf[k], len - k);
 801eb8c:	eba4 0108 	sub.w	r1, r4, r8
 801eb90:	eb05 0008 	add.w	r0, r5, r8
 801eb94:	e74a      	b.n	801ea2c <lv_draw_mask_line+0x8e>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 801eb96:	69b1      	ldr	r1, [r6, #24]
            if(p->inv) {
 801eb98:	b2c0      	uxtb	r0, r0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 801eb9a:	fb0c fc01 	mul.w	ip, ip, r1
    if(p->xy_steep > 0) x_at_y++;
 801eb9e:	2900      	cmp	r1, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 801eba0:	ea4f 23ac 	mov.w	r3, ip, asr #10
    if(p->xy_steep > 0) x_at_y++;
 801eba4:	bfcc      	ite	gt
 801eba6:	1c5a      	addgt	r2, r3, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 801eba8:	461a      	movle	r2, r3
    if(x_at_y < abs_x) {
 801ebaa:	42ba      	cmp	r2, r7
 801ebac:	f6ff af5b 	blt.w	801ea66 <lv_draw_mask_line+0xc8>
    if(x_at_y > abs_x + len) {
 801ebb0:	19e2      	adds	r2, r4, r7
 801ebb2:	4293      	cmp	r3, r2
 801ebb4:	f73f af6b 	bgt.w	801ea8e <lv_draw_mask_line+0xf0>
    int32_t xsi = xs >> 8;
 801ebb8:	f34c 2a8d 	sbfx	sl, ip, #10, #14
    int32_t xsf = xs & 0xFF;
 801ebbc:	f3cc 0387 	ubfx	r3, ip, #2, #8
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 801ebc0:	448c      	add	ip, r1
    k = xsi - abs_x;
 801ebc2:	ebaa 0207 	sub.w	r2, sl, r7
    int32_t xei = xe >> 8;
 801ebc6:	f34c 288d 	sbfx	r8, ip, #10, #14
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 801ebca:	ea4f 290c 	mov.w	r9, ip, lsl #8
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 801ebce:	45c2      	cmp	sl, r8
 801ebd0:	d006      	beq.n	801ebe0 <lv_draw_mask_line+0x242>
 801ebd2:	2900      	cmp	r1, #0
 801ebd4:	f280 8096 	bge.w	801ed04 <lv_draw_mask_line+0x366>
 801ebd8:	2b00      	cmp	r3, #0
 801ebda:	d13c      	bne.n	801ec56 <lv_draw_mask_line+0x2b8>
        k--;
 801ebdc:	3a01      	subs	r2, #1
        xsf = 0xFF;
 801ebde:	23ff      	movs	r3, #255	; 0xff
        if(k >= 0 && k < len) {
 801ebe0:	2a00      	cmp	r2, #0
 801ebe2:	db22      	blt.n	801ec2a <lv_draw_mask_line+0x28c>
 801ebe4:	4294      	cmp	r4, r2
 801ebe6:	dd2a      	ble.n	801ec3e <lv_draw_mask_line+0x2a0>
    int32_t xef = xe & 0xFF;
 801ebe8:	f3c9 2187 	ubfx	r1, r9, #10, #8
            m = (xsf + xef) >> 1;
 801ebec:	4419      	add	r1, r3
 801ebee:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
 801ebf2:	b108      	cbz	r0, 801ebf8 <lv_draw_mask_line+0x25a>
 801ebf4:	43c9      	mvns	r1, r1
 801ebf6:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 801ebf8:	5ca8      	ldrb	r0, [r5, r2]
 801ebfa:	f7ff fec2 	bl	801e982 <mask_mix>
 801ebfe:	54a8      	strb	r0, [r5, r2]
        if(p->inv) {
 801ec00:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 801ec04:	079b      	lsls	r3, r3, #30
 801ec06:	d509      	bpl.n	801ec1c <lv_draw_mask_line+0x27e>
            k = xsi - abs_x;
 801ec08:	eba8 0107 	sub.w	r1, r8, r7
            if(k >= len) {
 801ec0c:	428c      	cmp	r4, r1
 801ec0e:	f77f aeeb 	ble.w	801e9e8 <lv_draw_mask_line+0x4a>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 801ec12:	2900      	cmp	r1, #0
 801ec14:	f6ff af0c 	blt.w	801ea30 <lv_draw_mask_line+0x92>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 801ec18:	4628      	mov	r0, r5
 801ec1a:	e707      	b.n	801ea2c <lv_draw_mask_line+0x8e>
        k++;
 801ec1c:	3201      	adds	r2, #1
 801ec1e:	42a2      	cmp	r2, r4
 801ec20:	bfa8      	it	ge
 801ec22:	4622      	movge	r2, r4
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 801ec24:	1aa1      	subs	r1, r4, r2
 801ec26:	18a8      	adds	r0, r5, r2
 801ec28:	e700      	b.n	801ea2c <lv_draw_mask_line+0x8e>
        if(p->inv) {
 801ec2a:	2800      	cmp	r0, #0
 801ec2c:	d1ec      	bne.n	801ec08 <lv_draw_mask_line+0x26a>
        k++;
 801ec2e:	3201      	adds	r2, #1
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 801ec30:	42a2      	cmp	r2, r4
 801ec32:	bfa8      	it	ge
 801ec34:	4622      	movge	r2, r4
 801ec36:	2a00      	cmp	r2, #0
 801ec38:	f43f aed6 	beq.w	801e9e8 <lv_draw_mask_line+0x4a>
 801ec3c:	e6f8      	b.n	801ea30 <lv_draw_mask_line+0x92>
        if(p->inv) {
 801ec3e:	2800      	cmp	r0, #0
 801ec40:	d1e2      	bne.n	801ec08 <lv_draw_mask_line+0x26a>
        k++;
 801ec42:	3201      	adds	r2, #1
 801ec44:	42a2      	cmp	r2, r4
 801ec46:	bfa8      	it	ge
 801ec48:	4622      	movge	r2, r4
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 801ec4a:	2a00      	cmp	r2, #0
 801ec4c:	f43f aecc 	beq.w	801e9e8 <lv_draw_mask_line+0x4a>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 801ec50:	f77f aeee 	ble.w	801ea30 <lv_draw_mask_line+0x92>
 801ec54:	e7e6      	b.n	801ec24 <lv_draw_mask_line+0x286>
            if(k >= 0 && k < len) {
 801ec56:	2a00      	cmp	r2, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 801ec58:	69f1      	ldr	r1, [r6, #28]
            if(k >= 0 && k < len) {
 801ec5a:	db48      	blt.n	801ecee <lv_draw_mask_line+0x350>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 801ec5c:	f1c1 0800 	rsb	r8, r1, #0
            if(k >= 0 && k < len) {
 801ec60:	4294      	cmp	r4, r2
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 801ec62:	fb03 f808 	mul.w	r8, r3, r8
 801ec66:	ea4f 28a8 	mov.w	r8, r8, asr #10
            if(k >= 0 && k < len) {
 801ec6a:	dd0a      	ble.n	801ec82 <lv_draw_mask_line+0x2e4>
                m = (y_inters * xsf) >> 9;
 801ec6c:	fb08 f103 	mul.w	r1, r8, r3
 801ec70:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 801ec74:	b108      	cbz	r0, 801ec7a <lv_draw_mask_line+0x2dc>
 801ec76:	43c9      	mvns	r1, r1
 801ec78:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801ec7a:	5ca8      	ldrb	r0, [r5, r2]
 801ec7c:	f7ff fe81 	bl	801e982 <mask_mix>
 801ec80:	54a8      	strb	r0, [r5, r2]
                if(p->inv) m = 255 - m;
 801ec82:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
            k--;
 801ec86:	1e57      	subs	r7, r2, #1
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 801ec88:	69b1      	ldr	r1, [r6, #24]
                if(p->inv) m = 255 - m;
 801ec8a:	f003 0302 	and.w	r3, r3, #2
            if(k >= 0 && k < len) {
 801ec8e:	b332      	cbz	r2, 801ecde <lv_draw_mask_line+0x340>
 801ec90:	42bc      	cmp	r4, r7
 801ec92:	dd20      	ble.n	801ecd6 <lv_draw_mask_line+0x338>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 801ec94:	f1c8 08ff 	rsb	r8, r8, #255	; 0xff
 801ec98:	4249      	negs	r1, r1
 801ec9a:	fb08 f101 	mul.w	r1, r8, r1
 801ec9e:	1289      	asrs	r1, r1, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 801eca0:	fb08 f101 	mul.w	r1, r8, r1
 801eca4:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 801eca8:	b90b      	cbnz	r3, 801ecae <lv_draw_mask_line+0x310>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 801ecaa:	43c9      	mvns	r1, r1
 801ecac:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801ecae:	5de8      	ldrb	r0, [r5, r7]
 801ecb0:	f7ff fe67 	bl	801e982 <mask_mix>
 801ecb4:	55e8      	strb	r0, [r5, r7]
            if(p->inv) {
 801ecb6:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 801ecba:	079e      	lsls	r6, r3, #30
 801ecbc:	d507      	bpl.n	801ecce <lv_draw_mask_line+0x330>
                if(k > len) k = len;
 801ecbe:	42bc      	cmp	r4, r7
 801ecc0:	f6ff aeb6 	blt.w	801ea30 <lv_draw_mask_line+0x92>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 801ecc4:	2f00      	cmp	r7, #0
 801ecc6:	f43f aeb3 	beq.w	801ea30 <lv_draw_mask_line+0x92>
 801ecca:	4639      	mov	r1, r7
 801eccc:	e7a4      	b.n	801ec18 <lv_draw_mask_line+0x27a>
            k += 2;
 801ecce:	3201      	adds	r2, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 801ecd0:	4294      	cmp	r4, r2
 801ecd2:	daa7      	bge.n	801ec24 <lv_draw_mask_line+0x286>
 801ecd4:	e691      	b.n	801e9fa <lv_draw_mask_line+0x5c>
            if(p->inv) {
 801ecd6:	2b00      	cmp	r3, #0
 801ecd8:	f43f ae8f 	beq.w	801e9fa <lv_draw_mask_line+0x5c>
 801ecdc:	e7ef      	b.n	801ecbe <lv_draw_mask_line+0x320>
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	f47f aea6 	bne.w	801ea30 <lv_draw_mask_line+0x92>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 801ece4:	2c00      	cmp	r4, #0
 801ece6:	f77f ae88 	ble.w	801e9fa <lv_draw_mask_line+0x5c>
            k += 2;
 801ecea:	2201      	movs	r2, #1
 801ecec:	e79a      	b.n	801ec24 <lv_draw_mask_line+0x286>
            if(p->inv) {
 801ecee:	2800      	cmp	r0, #0
 801ecf0:	f47f ae9e 	bne.w	801ea30 <lv_draw_mask_line+0x92>
            k += 2;
 801ecf4:	3201      	adds	r2, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 801ecf6:	4294      	cmp	r4, r2
 801ecf8:	f6ff ae7f 	blt.w	801e9fa <lv_draw_mask_line+0x5c>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 801ecfc:	2a00      	cmp	r2, #0
 801ecfe:	f47f ae97 	bne.w	801ea30 <lv_draw_mask_line+0x92>
 801ed02:	e78f      	b.n	801ec24 <lv_draw_mask_line+0x286>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 801ed04:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801ed08:	69f7      	ldr	r7, [r6, #28]
            if(k >= 0 && k < len) {
 801ed0a:	2a00      	cmp	r2, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 801ed0c:	fb03 f707 	mul.w	r7, r3, r7
 801ed10:	ea4f 2ca7 	mov.w	ip, r7, asr #10
            k += 2;
 801ed14:	f102 0701 	add.w	r7, r2, #1
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 801ed18:	f1cc 08ff 	rsb	r8, ip, #255	; 0xff
            if(k >= 0 && k < len) {
 801ed1c:	db2c      	blt.n	801ed78 <lv_draw_mask_line+0x3da>
 801ed1e:	4294      	cmp	r4, r2
 801ed20:	dd0b      	ble.n	801ed3a <lv_draw_mask_line+0x39c>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 801ed22:	fb0c f303 	mul.w	r3, ip, r3
 801ed26:	f3c3 2147 	ubfx	r1, r3, #9, #8
                if(p->inv) m = 255 - m;
 801ed2a:	b908      	cbnz	r0, 801ed30 <lv_draw_mask_line+0x392>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 801ed2c:	43c9      	mvns	r1, r1
 801ed2e:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801ed30:	5ca8      	ldrb	r0, [r5, r2]
 801ed32:	f7ff fe26 	bl	801e982 <mask_mix>
 801ed36:	54a8      	strb	r0, [r5, r2]
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 801ed38:	69b1      	ldr	r1, [r6, #24]
 801ed3a:	fb08 f101 	mul.w	r1, r8, r1
 801ed3e:	1289      	asrs	r1, r1, #10
                if(p->inv) m = 255 - m;
 801ed40:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
            if(k >= 0 && k < len) {
 801ed44:	42bc      	cmp	r4, r7
 801ed46:	f003 0302 	and.w	r3, r3, #2
 801ed4a:	dd23      	ble.n	801ed94 <lv_draw_mask_line+0x3f6>
                m = ((255 - y_inters) * x_inters) >> 9;
 801ed4c:	fb08 f101 	mul.w	r1, r8, r1
 801ed50:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 801ed54:	b10b      	cbz	r3, 801ed5a <lv_draw_mask_line+0x3bc>
 801ed56:	43c9      	mvns	r1, r1
 801ed58:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801ed5a:	5de8      	ldrb	r0, [r5, r7]
 801ed5c:	f7ff fe11 	bl	801e982 <mask_mix>
 801ed60:	55e8      	strb	r0, [r5, r7]
            if(p->inv) {
 801ed62:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 801ed66:	079b      	lsls	r3, r3, #30
 801ed68:	f53f aedd 	bmi.w	801eb26 <lv_draw_mask_line+0x188>
            k++;
 801ed6c:	3202      	adds	r2, #2
 801ed6e:	42a2      	cmp	r2, r4
 801ed70:	bfa8      	it	ge
 801ed72:	4622      	movge	r2, r4
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 801ed74:	2a00      	cmp	r2, #0
 801ed76:	e76b      	b.n	801ec50 <lv_draw_mask_line+0x2b2>
            if(k >= 0 && k < len) {
 801ed78:	1c50      	adds	r0, r2, #1
 801ed7a:	d104      	bne.n	801ed86 <lv_draw_mask_line+0x3e8>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 801ed7c:	fb08 f101 	mul.w	r1, r8, r1
 801ed80:	2700      	movs	r7, #0
 801ed82:	1289      	asrs	r1, r1, #10
 801ed84:	e7dc      	b.n	801ed40 <lv_draw_mask_line+0x3a2>
            if(p->inv) {
 801ed86:	f01e 0f02 	tst.w	lr, #2
 801ed8a:	d006      	beq.n	801ed9a <lv_draw_mask_line+0x3fc>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 801ed8c:	4294      	cmp	r4, r2
 801ed8e:	f6bf ae4f 	bge.w	801ea30 <lv_draw_mask_line+0x92>
 801ed92:	e629      	b.n	801e9e8 <lv_draw_mask_line+0x4a>
            if(p->inv) {
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	f47f aec6 	bne.w	801eb26 <lv_draw_mask_line+0x188>
            k++;
 801ed9a:	3202      	adds	r2, #2
 801ed9c:	42a2      	cmp	r2, r4
 801ed9e:	bfa8      	it	ge
 801eda0:	4622      	movge	r2, r4
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 801eda2:	2a00      	cmp	r2, #0
 801eda4:	f43f ae20 	beq.w	801e9e8 <lv_draw_mask_line+0x4a>
 801eda8:	e7e4      	b.n	801ed74 <lv_draw_mask_line+0x3d6>

0801edaa <lv_draw_mask_angle>:
{
 801edaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801edb0:	4680      	mov	r8, r0
 801edb2:	468b      	mov	fp, r1
 801edb4:	4617      	mov	r7, r2
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 801edb6:	f9b6 500c 	ldrsh.w	r5, [r6, #12]
{
 801edba:	4699      	mov	r9, r3
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 801edbc:	f9b6 e00a 	ldrsh.w	lr, [r6, #10]
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 801edc0:	f9b6 c008 	ldrsh.w	ip, [r6, #8]
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 801edc4:	2db3      	cmp	r5, #179	; 0xb3
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 801edc6:	eba2 0a0e 	sub.w	sl, r2, lr
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 801edca:	f9b6 400e 	ldrsh.w	r4, [r6, #14]
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 801edce:	eba1 0c0c 	sub.w	ip, r1, ip
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 801edd2:	f300 8094 	bgt.w	801eefe <lv_draw_mask_angle+0x154>
 801edd6:	2cb3      	cmp	r4, #179	; 0xb3
 801edd8:	f300 80f1 	bgt.w	801efbe <lv_draw_mask_angle+0x214>
 801eddc:	b93d      	cbnz	r5, 801edee <lv_draw_mask_angle+0x44>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 801edde:	4596      	cmp	lr, r2
 801ede0:	f300 8162 	bgt.w	801f0a8 <lv_draw_mask_angle+0x2fe>
        else if(p->cfg.end_angle == 0) {
 801ede4:	2c00      	cmp	r4, #0
 801ede6:	f000 8085 	beq.w	801eef4 <lv_draw_mask_angle+0x14a>
 801edea:	2401      	movs	r4, #1
 801edec:	e14a      	b.n	801f084 <lv_draw_mask_angle+0x2da>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 801edee:	2c00      	cmp	r4, #0
 801edf0:	f000 8117 	beq.w	801f022 <lv_draw_mask_angle+0x278>
 801edf4:	42a5      	cmp	r5, r4
 801edf6:	dc1b      	bgt.n	801ee30 <lv_draw_mask_angle+0x86>
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801edf8:	4596      	cmp	lr, r2
 801edfa:	f300 808a 	bgt.w	801ef12 <lv_draw_mask_angle+0x168>
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 801edfe:	f106 0310 	add.w	r3, r6, #16
 801ee02:	463a      	mov	r2, r7
 801ee04:	4659      	mov	r1, fp
 801ee06:	4640      	mov	r0, r8
 801ee08:	9300      	str	r3, [sp, #0]
 801ee0a:	464b      	mov	r3, r9
 801ee0c:	f7ff fdc7 	bl	801e99e <lv_draw_mask_line>
        if(p->cfg.end_angle == 180) {
 801ee10:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 801ee14:	4604      	mov	r4, r0
        if(p->cfg.end_angle == 180) {
 801ee16:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
 801ee1a:	2ab4      	cmp	r2, #180	; 0xb4
 801ee1c:	f040 8111 	bne.w	801f042 <lv_draw_mask_angle+0x298>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 801ee20:	42bb      	cmp	r3, r7
 801ee22:	f340 8112 	ble.w	801f04a <lv_draw_mask_angle+0x2a0>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801ee26:	2c00      	cmp	r4, #0
 801ee28:	f040 8105 	bne.w	801f036 <lv_draw_mask_angle+0x28c>
 801ee2c:	2400      	movs	r4, #0
 801ee2e:	e002      	b.n	801ee36 <lv_draw_mask_angle+0x8c>
        if(abs_y < p->cfg.vertex_p.y) {
 801ee30:	4596      	cmp	lr, r2
 801ee32:	dd04      	ble.n	801ee3e <lv_draw_mask_angle+0x94>
            return LV_DRAW_MASK_RES_FULL_COVER;
 801ee34:	2401      	movs	r4, #1
}
 801ee36:	4620      	mov	r0, r4
 801ee38:	b003      	add	sp, #12
 801ee3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ee3e:	b2ad      	uxth	r5, r5
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801ee40:	6d73      	ldr	r3, [r6, #84]	; 0x54
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 801ee42:	6ab2      	ldr	r2, [r6, #40]	; 0x28
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ee44:	b2a4      	uxth	r4, r4
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801ee46:	1e68      	subs	r0, r5, #1
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801ee48:	fb03 f30a 	mul.w	r3, r3, sl
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 801ee4c:	fb0a 2202 	mla	r2, sl, r2, r2
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801ee50:	1e61      	subs	r1, r4, #1
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801ee52:	2859      	cmp	r0, #89	; 0x59
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801ee54:	ea4f 23a3 	mov.w	r3, r3, asr #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 801ee58:	ea4f 22a2 	mov.w	r2, r2, asr #10
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801ee5c:	b289      	uxth	r1, r1
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801ee5e:	d80b      	bhi.n	801ee78 <lv_draw_mask_angle+0xce>
 801ee60:	2a00      	cmp	r2, #0
 801ee62:	da0e      	bge.n	801ee82 <lv_draw_mask_angle+0xd8>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801ee64:	2959      	cmp	r1, #89	; 0x59
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 801ee66:	f04f 0200 	mov.w	r2, #0
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801ee6a:	d90e      	bls.n	801ee8a <lv_draw_mask_angle+0xe0>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 801ee6c:	3c5b      	subs	r4, #91	; 0x5b
 801ee6e:	2cb2      	cmp	r4, #178	; 0xb2
 801ee70:	bf98      	it	ls
 801ee72:	ea02 72e2 	andls.w	r2, r2, r2, asr #31
 801ee76:	e008      	b.n	801ee8a <lv_draw_mask_angle+0xe0>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 801ee78:	3d5b      	subs	r5, #91	; 0x5b
 801ee7a:	2db2      	cmp	r5, #178	; 0xb2
 801ee7c:	bf98      	it	ls
 801ee7e:	ea02 72e2 	andls.w	r2, r2, r2, asr #31
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801ee82:	2959      	cmp	r1, #89	; 0x59
 801ee84:	d8f2      	bhi.n	801ee6c <lv_draw_mask_angle+0xc2>
 801ee86:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 801ee8a:	1a9b      	subs	r3, r3, r2
        int32_t tmp = start_angle_last + dist - rel_x;
 801ee8c:	eb02 0563 	add.w	r5, r2, r3, asr #1
 801ee90:	eba5 050c 	sub.w	r5, r5, ip
 801ee94:	454d      	cmp	r5, r9
 801ee96:	bfa8      	it	ge
 801ee98:	464d      	movge	r5, r9
        if(tmp > 0) {
 801ee9a:	2d00      	cmp	r5, #0
 801ee9c:	dd2c      	ble.n	801eef8 <lv_draw_mask_angle+0x14e>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 801ee9e:	f106 0310 	add.w	r3, r6, #16
 801eea2:	463a      	mov	r2, r7
 801eea4:	4659      	mov	r1, fp
 801eea6:	4640      	mov	r0, r8
 801eea8:	9300      	str	r3, [sp, #0]
 801eeaa:	b22b      	sxth	r3, r5
 801eeac:	f7ff fd77 	bl	801e99e <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 801eeb0:	4682      	mov	sl, r0
 801eeb2:	b918      	cbnz	r0, 801eebc <lv_draw_mask_angle+0x112>
                lv_memset_00(&mask_buf[0], tmp);
 801eeb4:	4629      	mov	r1, r5
 801eeb6:	4640      	mov	r0, r8
 801eeb8:	f7ff fd5f 	bl	801e97a <lv_memset_00>
        if(tmp < 0) tmp = 0;
 801eebc:	454d      	cmp	r5, r9
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 801eebe:	f106 063c 	add.w	r6, r6, #60	; 0x3c
        if(tmp < 0) tmp = 0;
 801eec2:	bfa8      	it	ge
 801eec4:	464d      	movge	r5, r9
 801eec6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 801eeca:	b2a9      	uxth	r1, r5
 801eecc:	44a8      	add	r8, r5
 801eece:	eba9 0301 	sub.w	r3, r9, r1
 801eed2:	4459      	add	r1, fp
 801eed4:	b21b      	sxth	r3, r3
 801eed6:	463a      	mov	r2, r7
 801eed8:	b209      	sxth	r1, r1
 801eeda:	4640      	mov	r0, r8
 801eedc:	9600      	str	r6, [sp, #0]
 801eede:	f7ff fd5e 	bl	801e99e <lv_draw_mask_line>
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 801eee2:	4604      	mov	r4, r0
 801eee4:	b920      	cbnz	r0, 801eef0 <lv_draw_mask_angle+0x146>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 801eee6:	eba9 0105 	sub.w	r1, r9, r5
 801eeea:	4640      	mov	r0, r8
 801eeec:	f7ff fd45 	bl	801e97a <lv_memset_00>
        if(res1 == res2) return res1;
 801eef0:	45a2      	cmp	sl, r4
 801eef2:	d0a0      	beq.n	801ee36 <lv_draw_mask_angle+0x8c>
        else return LV_DRAW_MASK_RES_CHANGED;
 801eef4:	2402      	movs	r4, #2
 801eef6:	e79e      	b.n	801ee36 <lv_draw_mask_angle+0x8c>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801eef8:	f04f 0a01 	mov.w	sl, #1
 801eefc:	e7de      	b.n	801eebc <lv_draw_mask_angle+0x112>
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 801eefe:	2db4      	cmp	r5, #180	; 0xb4
 801ef00:	d06f      	beq.n	801efe2 <lv_draw_mask_angle+0x238>
 801ef02:	2cb4      	cmp	r4, #180	; 0xb4
 801ef04:	f340 8090 	ble.w	801f028 <lv_draw_mask_angle+0x27e>
 801ef08:	42a5      	cmp	r5, r4
 801ef0a:	dc04      	bgt.n	801ef16 <lv_draw_mask_angle+0x16c>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 801ef0c:	4596      	cmp	lr, r2
 801ef0e:	f73f af76 	bgt.w	801edfe <lv_draw_mask_angle+0x54>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 801ef12:	2403      	movs	r4, #3
 801ef14:	e07c      	b.n	801f010 <lv_draw_mask_angle+0x266>
        if(abs_y > p->cfg.vertex_p.y) {
 801ef16:	4596      	cmp	lr, r2
 801ef18:	db8c      	blt.n	801ee34 <lv_draw_mask_angle+0x8a>
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef1a:	b2ad      	uxth	r5, r5
 801ef1c:	f46f 7087 	mvn.w	r0, #270	; 0x10e
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801ef20:	6d72      	ldr	r2, [r6, #84]	; 0x54
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef22:	b2a4      	uxth	r4, r4
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 801ef24:	6ab3      	ldr	r3, [r6, #40]	; 0x28
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef26:	f46f 7187 	mvn.w	r1, #270	; 0x10e
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef2a:	1828      	adds	r0, r5, r0
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801ef2c:	fb02 f20a 	mul.w	r2, r2, sl
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 801ef30:	fb0a 3303 	mla	r3, sl, r3, r3
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef34:	1861      	adds	r1, r4, r1
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef36:	2858      	cmp	r0, #88	; 0x58
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801ef38:	ea4f 22a2 	mov.w	r2, r2, asr #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 801ef3c:	ea4f 23a3 	mov.w	r3, r3, asr #10
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef40:	b289      	uxth	r1, r1
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef42:	d80a      	bhi.n	801ef5a <lv_draw_mask_angle+0x1b0>
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	bfb8      	it	lt
 801ef48:	2300      	movlt	r3, #0
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef4a:	2958      	cmp	r1, #88	; 0x58
 801ef4c:	d90e      	bls.n	801ef6c <lv_draw_mask_angle+0x1c2>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 801ef4e:	3c5b      	subs	r4, #91	; 0x5b
 801ef50:	2cb2      	cmp	r4, #178	; 0xb2
 801ef52:	bf98      	it	ls
 801ef54:	ea03 73e3 	andls.w	r3, r3, r3, asr #31
 801ef58:	e008      	b.n	801ef6c <lv_draw_mask_angle+0x1c2>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 801ef5a:	3d5b      	subs	r5, #91	; 0x5b
 801ef5c:	2db2      	cmp	r5, #178	; 0xb2
 801ef5e:	bf98      	it	ls
 801ef60:	ea03 73e3 	andls.w	r3, r3, r3, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801ef64:	2958      	cmp	r1, #88	; 0x58
 801ef66:	d8f2      	bhi.n	801ef4e <lv_draw_mask_angle+0x1a4>
 801ef68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 801ef6c:	1ad2      	subs	r2, r2, r3
        int32_t tmp = start_angle_last + dist - rel_x;
 801ef6e:	eb03 0562 	add.w	r5, r3, r2, asr #1
 801ef72:	eba5 050c 	sub.w	r5, r5, ip
 801ef76:	454d      	cmp	r5, r9
 801ef78:	bfa8      	it	ge
 801ef7a:	464d      	movge	r5, r9
        if(tmp > 0) {
 801ef7c:	2d00      	cmp	r5, #0
 801ef7e:	dd1b      	ble.n	801efb8 <lv_draw_mask_angle+0x20e>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 801ef80:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 801ef84:	463a      	mov	r2, r7
 801ef86:	4659      	mov	r1, fp
 801ef88:	4640      	mov	r0, r8
 801ef8a:	9300      	str	r3, [sp, #0]
 801ef8c:	b22b      	sxth	r3, r5
 801ef8e:	f7ff fd06 	bl	801e99e <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 801ef92:	4682      	mov	sl, r0
 801ef94:	b918      	cbnz	r0, 801ef9e <lv_draw_mask_angle+0x1f4>
                lv_memset_00(&mask_buf[0], tmp);
 801ef96:	4629      	mov	r1, r5
 801ef98:	4640      	mov	r0, r8
 801ef9a:	f7ff fcee 	bl	801e97a <lv_memset_00>
        if(tmp < 0) tmp = 0;
 801ef9e:	454d      	cmp	r5, r9
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 801efa0:	f106 0610 	add.w	r6, r6, #16
        if(tmp < 0) tmp = 0;
 801efa4:	bfa8      	it	ge
 801efa6:	464d      	movge	r5, r9
 801efa8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 801efac:	b2a9      	uxth	r1, r5
 801efae:	44a8      	add	r8, r5
 801efb0:	eba9 0301 	sub.w	r3, r9, r1
 801efb4:	4459      	add	r1, fp
 801efb6:	e78d      	b.n	801eed4 <lv_draw_mask_angle+0x12a>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801efb8:	f04f 0a01 	mov.w	sl, #1
 801efbc:	e7ef      	b.n	801ef9e <lv_draw_mask_angle+0x1f4>
        else if(p->cfg.start_angle == 0) {
 801efbe:	bb65      	cbnz	r5, 801f01a <lv_draw_mask_angle+0x270>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 801efc0:	4596      	cmp	lr, r2
 801efc2:	dd21      	ble.n	801f008 <lv_draw_mask_angle+0x25e>
        if(p->cfg.end_angle == 180) {
 801efc4:	2cb4      	cmp	r4, #180	; 0xb4
 801efc6:	d039      	beq.n	801f03c <lv_draw_mask_angle+0x292>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 801efc8:	2403      	movs	r4, #3
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 801efca:	363c      	adds	r6, #60	; 0x3c
 801efcc:	464b      	mov	r3, r9
 801efce:	463a      	mov	r2, r7
 801efd0:	4659      	mov	r1, fp
 801efd2:	4640      	mov	r0, r8
 801efd4:	9600      	str	r6, [sp, #0]
 801efd6:	f7ff fce2 	bl	801e99e <lv_draw_mask_line>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801efda:	2c00      	cmp	r4, #0
 801efdc:	f43f af26 	beq.w	801ee2c <lv_draw_mask_angle+0x82>
 801efe0:	e058      	b.n	801f094 <lv_draw_mask_angle+0x2ea>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801efe2:	4596      	cmp	lr, r2
 801efe4:	dd0c      	ble.n	801f000 <lv_draw_mask_angle+0x256>
        if(p->cfg.end_angle == 180) {
 801efe6:	2cb4      	cmp	r4, #180	; 0xb4
 801efe8:	d084      	beq.n	801eef4 <lv_draw_mask_angle+0x14a>
        else if(p->cfg.end_angle == 0) {
 801efea:	2c00      	cmp	r4, #0
 801efec:	f43f af22 	beq.w	801ee34 <lv_draw_mask_angle+0x8a>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801eff0:	2cb3      	cmp	r4, #179	; 0xb3
 801eff2:	dd0c      	ble.n	801f00e <lv_draw_mask_angle+0x264>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 801eff4:	363c      	adds	r6, #60	; 0x3c
 801eff6:	2401      	movs	r4, #1
 801eff8:	9600      	str	r6, [sp, #0]
 801effa:	f7ff fcd0 	bl	801e99e <lv_draw_mask_line>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801effe:	e049      	b.n	801f094 <lv_draw_mask_angle+0x2ea>
        if(p->cfg.end_angle == 180) {
 801f000:	2cb4      	cmp	r4, #180	; 0xb4
 801f002:	d136      	bne.n	801f072 <lv_draw_mask_angle+0x2c8>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 801f004:	2001      	movs	r0, #1
 801f006:	e01a      	b.n	801f03e <lv_draw_mask_angle+0x294>
        if(p->cfg.end_angle == 180) {
 801f008:	2cb4      	cmp	r4, #180	; 0xb4
 801f00a:	f43f af13 	beq.w	801ee34 <lv_draw_mask_angle+0x8a>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801f00e:	2401      	movs	r4, #1
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 801f010:	1ee0      	subs	r0, r4, #3
 801f012:	bf18      	it	ne
 801f014:	2001      	movne	r0, #1
 801f016:	0044      	lsls	r4, r0, #1
 801f018:	e70d      	b.n	801ee36 <lv_draw_mask_angle+0x8c>
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801f01a:	4596      	cmp	lr, r2
 801f01c:	f77f aeef 	ble.w	801edfe <lv_draw_mask_angle+0x54>
 801f020:	e7d0      	b.n	801efc4 <lv_draw_mask_angle+0x21a>
 801f022:	4596      	cmp	lr, r2
 801f024:	dcee      	bgt.n	801f004 <lv_draw_mask_angle+0x25a>
 801f026:	e6ea      	b.n	801edfe <lv_draw_mask_angle+0x54>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 801f028:	4596      	cmp	lr, r2
 801f02a:	f73f aee8 	bgt.w	801edfe <lv_draw_mask_angle+0x54>
        if(p->cfg.end_angle == 180) {
 801f02e:	2cb4      	cmp	r4, #180	; 0xb4
 801f030:	d0e8      	beq.n	801f004 <lv_draw_mask_angle+0x25a>
        else if(p->cfg.end_angle == 0) {
 801f032:	bb1c      	cbnz	r4, 801f07c <lv_draw_mask_angle+0x2d2>
 801f034:	e002      	b.n	801f03c <lv_draw_mask_angle+0x292>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 801f036:	2c03      	cmp	r4, #3
 801f038:	f47f af5c 	bne.w	801eef4 <lv_draw_mask_angle+0x14a>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 801f03c:	2003      	movs	r0, #3
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 801f03e:	3803      	subs	r0, #3
 801f040:	e7e7      	b.n	801f012 <lv_draw_mask_angle+0x268>
        else if(p->cfg.end_angle == 0) {
 801f042:	b95a      	cbnz	r2, 801f05c <lv_draw_mask_angle+0x2b2>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 801f044:	429f      	cmp	r7, r3
 801f046:	f6bf aeee 	bge.w	801ee26 <lv_draw_mask_angle+0x7c>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801f04a:	2c00      	cmp	r4, #0
 801f04c:	f43f aeee 	beq.w	801ee2c <lv_draw_mask_angle+0x82>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 801f050:	2c03      	cmp	r4, #3
 801f052:	d0d7      	beq.n	801f004 <lv_draw_mask_angle+0x25a>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 801f054:	2c01      	cmp	r4, #1
 801f056:	f43f aeed 	beq.w	801ee34 <lv_draw_mask_angle+0x8a>
 801f05a:	e74b      	b.n	801eef4 <lv_draw_mask_angle+0x14a>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801f05c:	2ab3      	cmp	r2, #179	; 0xb3
 801f05e:	dc05      	bgt.n	801f06c <lv_draw_mask_angle+0x2c2>
 801f060:	429f      	cmp	r7, r3
 801f062:	dab2      	bge.n	801efca <lv_draw_mask_angle+0x220>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801f064:	2c00      	cmp	r4, #0
 801f066:	f43f aee1 	beq.w	801ee2c <lv_draw_mask_angle+0x82>
 801f06a:	e7d1      	b.n	801f010 <lv_draw_mask_angle+0x266>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 801f06c:	429f      	cmp	r7, r3
 801f06e:	dbac      	blt.n	801efca <lv_draw_mask_angle+0x220>
 801f070:	e7f8      	b.n	801f064 <lv_draw_mask_angle+0x2ba>
        else if(p->cfg.end_angle == 0) {
 801f072:	2c00      	cmp	r4, #0
 801f074:	d0e2      	beq.n	801f03c <lv_draw_mask_angle+0x292>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801f076:	2cb3      	cmp	r4, #179	; 0xb3
 801f078:	f73f af4b 	bgt.w	801ef12 <lv_draw_mask_angle+0x168>
 801f07c:	45be      	cmp	lr, r7
 801f07e:	f04f 0403 	mov.w	r4, #3
 801f082:	dcc5      	bgt.n	801f010 <lv_draw_mask_angle+0x266>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 801f084:	363c      	adds	r6, #60	; 0x3c
 801f086:	464b      	mov	r3, r9
 801f088:	463a      	mov	r2, r7
 801f08a:	4659      	mov	r1, fp
 801f08c:	4640      	mov	r0, r8
 801f08e:	9600      	str	r6, [sp, #0]
 801f090:	f7ff fc85 	bl	801e99e <lv_draw_mask_line>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801f094:	2800      	cmp	r0, #0
 801f096:	f43f aec9 	beq.w	801ee2c <lv_draw_mask_angle+0x82>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 801f09a:	2c03      	cmp	r4, #3
 801f09c:	d0cf      	beq.n	801f03e <lv_draw_mask_angle+0x294>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 801f09e:	2c01      	cmp	r4, #1
 801f0a0:	f47f af28 	bne.w	801eef4 <lv_draw_mask_angle+0x14a>
 801f0a4:	2801      	cmp	r0, #1
 801f0a6:	e7d6      	b.n	801f056 <lv_draw_mask_angle+0x2ac>
        else if(p->cfg.end_angle == 0) {
 801f0a8:	2c00      	cmp	r4, #0
 801f0aa:	d0ab      	beq.n	801f004 <lv_draw_mask_angle+0x25a>
 801f0ac:	e731      	b.n	801ef12 <lv_draw_mask_angle+0x168>

0801f0ae <lv_draw_mask_radius>:
{
 801f0ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f0b4:	4605      	mov	r5, r0
 801f0b6:	461e      	mov	r6, r3
 801f0b8:	4689      	mov	r9, r1
    bool outer = p->cfg.outer;
 801f0ba:	7cb8      	ldrb	r0, [r7, #18]
    int32_t radius = p->cfg.radius;
 801f0bc:	f9b7 8010 	ldrsh.w	r8, [r7, #16]
    if(outer == false) {
 801f0c0:	f010 0001 	ands.w	r0, r0, #1
    dest->x1 = src->x1;
 801f0c4:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
    dest->y1 = src->y1;
 801f0c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    dest->x2 = src->x2;
 801f0cc:	f9b7 400c 	ldrsh.w	r4, [r7, #12]
    dest->y2 = src->y2;
 801f0d0:	f9b7 e00e 	ldrsh.w	lr, [r7, #14]
 801f0d4:	d12e      	bne.n	801f134 <lv_draw_mask_radius+0x86>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 801f0d6:	429a      	cmp	r2, r3
 801f0d8:	da03      	bge.n	801f0e2 <lv_draw_mask_radius+0x34>
            return LV_DRAW_MASK_RES_TRANSP;
 801f0da:	2000      	movs	r0, #0
}
 801f0dc:	b003      	add	sp, #12
 801f0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 801f0e2:	4572      	cmp	r2, lr
 801f0e4:	dcf9      	bgt.n	801f0da <lv_draw_mask_radius+0x2c>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 801f0e6:	eb0c 0108 	add.w	r1, ip, r8
 801f0ea:	4589      	cmp	r9, r1
 801f0ec:	db05      	blt.n	801f0fa <lv_draw_mask_radius+0x4c>
 801f0ee:	eba4 0108 	sub.w	r1, r4, r8
 801f0f2:	eb06 0a09 	add.w	sl, r6, r9
 801f0f6:	4551      	cmp	r1, sl
 801f0f8:	da08      	bge.n	801f10c <lv_draw_mask_radius+0x5e>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 801f0fa:	eb03 0108 	add.w	r1, r3, r8
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 801f0fe:	428a      	cmp	r2, r1
 801f100:	db4a      	blt.n	801f198 <lv_draw_mask_radius+0xea>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 801f102:	ebae 0108 	sub.w	r1, lr, r8
 801f106:	428a      	cmp	r2, r1
 801f108:	dc46      	bgt.n	801f198 <lv_draw_mask_radius+0xea>
        if(outer == false) {
 801f10a:	bb18      	cbnz	r0, 801f154 <lv_draw_mask_radius+0xa6>
            int32_t last = rect.x1 - abs_x;
 801f10c:	ebac 0809 	sub.w	r8, ip, r9
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 801f110:	4546      	cmp	r6, r8
 801f112:	dbe2      	blt.n	801f0da <lv_draw_mask_radius+0x2c>
            int32_t first = rect.x2 - abs_x + 1;
 801f114:	eba4 0409 	sub.w	r4, r4, r9
            if(last >= 0) {
 801f118:	f1b8 0f00 	cmp.w	r8, #0
            int32_t first = rect.x2 - abs_x + 1;
 801f11c:	f104 0701 	add.w	r7, r4, #1
            if(last >= 0) {
 801f120:	da28      	bge.n	801f174 <lv_draw_mask_radius+0xc6>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 801f122:	2c00      	cmp	r4, #0
 801f124:	dbd9      	blt.n	801f0da <lv_draw_mask_radius+0x2c>
            else if(first < len) {
 801f126:	42be      	cmp	r6, r7
 801f128:	dd31      	ble.n	801f18e <lv_draw_mask_radius+0xe0>
                lv_memset_00(&mask_buf[first], len - first);
 801f12a:	1bf1      	subs	r1, r6, r7
 801f12c:	19e8      	adds	r0, r5, r7
        lv_memset_00(&mask_buf[0], cir_x_left);
 801f12e:	f7ff fc24 	bl	801e97a <lv_memset_00>
 801f132:	e02c      	b.n	801f18e <lv_draw_mask_radius+0xe0>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 801f134:	429a      	cmp	r2, r3
 801f136:	da01      	bge.n	801f13c <lv_draw_mask_radius+0x8e>
            return LV_DRAW_MASK_RES_FULL_COVER;
 801f138:	2001      	movs	r0, #1
 801f13a:	e7cf      	b.n	801f0dc <lv_draw_mask_radius+0x2e>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 801f13c:	4572      	cmp	r2, lr
 801f13e:	dcfb      	bgt.n	801f138 <lv_draw_mask_radius+0x8a>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 801f140:	eb08 010c 	add.w	r1, r8, ip
 801f144:	4549      	cmp	r1, r9
 801f146:	dcd8      	bgt.n	801f0fa <lv_draw_mask_radius+0x4c>
 801f148:	eb06 0109 	add.w	r1, r6, r9
 801f14c:	eba4 0a08 	sub.w	sl, r4, r8
 801f150:	4551      	cmp	r1, sl
 801f152:	dcd2      	bgt.n	801f0fa <lv_draw_mask_radius+0x4c>
            int32_t first = rect.x1 - abs_x;
 801f154:	ebac 0009 	sub.w	r0, ip, r9
            if(first < 0) first = 0;
 801f158:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
            if(first <= len) {
 801f15c:	4286      	cmp	r6, r0
 801f15e:	db16      	blt.n	801f18e <lv_draw_mask_radius+0xe0>
                int32_t last = rect.x2 - abs_x - first + 1;
 801f160:	eba4 0109 	sub.w	r1, r4, r9
 801f164:	1a09      	subs	r1, r1, r0
 801f166:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 801f168:	1843      	adds	r3, r0, r1
 801f16a:	429e      	cmp	r6, r3
 801f16c:	da11      	bge.n	801f192 <lv_draw_mask_radius+0xe4>
 801f16e:	1a31      	subs	r1, r6, r0
                    lv_memset_00(&mask_buf[first], last);
 801f170:	4428      	add	r0, r5
 801f172:	e7dc      	b.n	801f12e <lv_draw_mask_radius+0x80>
                lv_memset_00(&mask_buf[0], last);
 801f174:	4641      	mov	r1, r8
 801f176:	4628      	mov	r0, r5
 801f178:	f7ff fbff 	bl	801e97a <lv_memset_00>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 801f17c:	2f00      	cmp	r7, #0
 801f17e:	ddac      	ble.n	801f0da <lv_draw_mask_radius+0x2c>
            else if(first < len) {
 801f180:	42be      	cmp	r6, r7
 801f182:	dcd2      	bgt.n	801f12a <lv_draw_mask_radius+0x7c>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 801f184:	f1b8 0f00 	cmp.w	r8, #0
 801f188:	d101      	bne.n	801f18e <lv_draw_mask_radius+0xe0>
 801f18a:	42be      	cmp	r6, r7
 801f18c:	d0d4      	beq.n	801f138 <lv_draw_mask_radius+0x8a>
            else return LV_DRAW_MASK_RES_CHANGED;
 801f18e:	2002      	movs	r0, #2
 801f190:	e7a4      	b.n	801f0dc <lv_draw_mask_radius+0x2e>
                if(last >= 0) {
 801f192:	2900      	cmp	r1, #0
 801f194:	dbfb      	blt.n	801f18e <lv_draw_mask_radius+0xe0>
 801f196:	e7eb      	b.n	801f170 <lv_draw_mask_radius+0xc2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801f198:	b29b      	uxth	r3, r3
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 801f19a:	ebac 0109 	sub.w	r1, ip, r9
    abs_y -= rect.y1;
 801f19e:	fa1f f982 	uxth.w	r9, r2
 801f1a2:	3401      	adds	r4, #1
        cir_y = radius - abs_y - 1;
 801f1a4:	fa1f f288 	uxth.w	r2, r8
    abs_y -= rect.y1;
 801f1a8:	eba9 0a03 	sub.w	sl, r9, r3
 801f1ac:	eba4 040c 	sub.w	r4, r4, ip
 801f1b0:	f102 3cff 	add.w	ip, r2, #4294967295
 801f1b4:	fa1f fb8a 	uxth.w	fp, sl
    if(abs_y < radius) {
 801f1b8:	fa0f fa8a 	sxth.w	sl, sl
 801f1bc:	fa1f fc8c 	uxth.w	ip, ip
 801f1c0:	45d0      	cmp	r8, sl
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 801f1c2:	f8d7 8014 	ldr.w	r8, [r7, #20]
 801f1c6:	b2a4      	uxth	r4, r4
        cir_y = radius - abs_y - 1;
 801f1c8:	bfcb      	itete	gt
 801f1ca:	eba3 0309 	subgt.w	r3, r3, r9
        cir_y = abs_y - (h - radius);
 801f1ce:	44e3      	addle	fp, ip
        cir_y = radius - abs_y - 1;
 801f1d0:	f103 33ff 	addgt.w	r3, r3, #4294967295
        cir_y = abs_y - (h - radius);
 801f1d4:	445b      	addle	r3, fp
        cir_y = radius - abs_y - 1;
 801f1d6:	bfcc      	ite	gt
 801f1d8:	189b      	addgt	r3, r3, r2
        cir_y = abs_y - (h - radius);
 801f1da:	eba3 030e 	suble.w	r3, r3, lr
    lv_coord_t cir_x_right = k + w - radius + x_start;
 801f1de:	1aa2      	subs	r2, r4, r2
        cir_y = abs_y - (h - radius);
 801f1e0:	fa0f fe83 	sxth.w	lr, r3
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 801f1e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
    lv_coord_t cir_x_right = k + w - radius + x_start;
 801f1e8:	fa12 f281 	uxtah	r2, r2, r1
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 801f1ec:	f10e 0701 	add.w	r7, lr, #1
 801f1f0:	f833 901e 	ldrh.w	r9, [r3, lr, lsl #1]
 801f1f4:	f833 7017 	ldrh.w	r7, [r3, r7, lsl #1]
    *x_start = c->x_start_on_y[y];
 801f1f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 801f1fc:	eba7 0709 	sub.w	r7, r7, r9
    *x_start = c->x_start_on_y[y];
 801f200:	f833 e01e 	ldrh.w	lr, [r3, lr, lsl #1]
    return &c->cir_opa[c->opa_start_on_y[y]];
 801f204:	f8d8 3004 	ldr.w	r3, [r8, #4]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 801f208:	b23f      	sxth	r7, r7
    lv_coord_t cir_x_right = k + w - radius + x_start;
 801f20a:	4472      	add	r2, lr
    return &c->cir_opa[c->opa_start_on_y[y]];
 801f20c:	444b      	add	r3, r9
    lv_coord_t cir_x_right = k + w - radius + x_start;
 801f20e:	b294      	uxth	r4, r2
 801f210:	b212      	sxth	r2, r2
 801f212:	9401      	str	r4, [sp, #4]
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 801f214:	fa1c f481 	uxtah	r4, ip, r1
 801f218:	eba4 040e 	sub.w	r4, r4, lr
 801f21c:	b224      	sxth	r4, r4
    if(outer == false) {
 801f21e:	b1d0      	cbz	r0, 801f256 <lv_draw_mask_radius+0x1a8>
 801f220:	f107 3bff 	add.w	fp, r7, #4294967295
 801f224:	4692      	mov	sl, r2
 801f226:	46a0      	mov	r8, r4
 801f228:	449b      	add	fp, r3
        for(i = 0; i < aa_len; i++) {
 801f22a:	eba4 0108 	sub.w	r1, r4, r8
 801f22e:	b209      	sxth	r1, r1
 801f230:	42b9      	cmp	r1, r7
 801f232:	db4d      	blt.n	801f2d0 <lv_draw_mask_radius+0x222>
        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 801f234:	3401      	adds	r4, #1
 801f236:	42b4      	cmp	r4, r6
 801f238:	bfa8      	it	ge
 801f23a:	4634      	movge	r4, r6
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 801f23c:	4296      	cmp	r6, r2
        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 801f23e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 801f242:	dd68      	ble.n	801f316 <lv_draw_mask_radius+0x268>
 801f244:	42a2      	cmp	r2, r4
 801f246:	db6b      	blt.n	801f320 <lv_draw_mask_radius+0x272>
 801f248:	9b01      	ldr	r3, [sp, #4]
 801f24a:	eba3 0804 	sub.w	r8, r3, r4
 801f24e:	fa0f f188 	sxth.w	r1, r8
        lv_memset_00(&mask_buf[clr_start], clr_len);
 801f252:	1928      	adds	r0, r5, r4
 801f254:	e76b      	b.n	801f12e <lv_draw_mask_radius+0x80>
 801f256:	4691      	mov	r9, r2
 801f258:	eb03 0a07 	add.w	sl, r3, r7
    if(outer == false) {
 801f25c:	46a0      	mov	r8, r4
        for(i = 0; i < aa_len; i++) {
 801f25e:	eba4 0308 	sub.w	r3, r4, r8
 801f262:	b21b      	sxth	r3, r3
 801f264:	42bb      	cmp	r3, r7
 801f266:	db14      	blt.n	801f292 <lv_draw_mask_radius+0x1e4>
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 801f268:	2f00      	cmp	r7, #0
 801f26a:	bfa8      	it	ge
 801f26c:	19d2      	addge	r2, r2, r7
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 801f26e:	1be4      	subs	r4, r4, r7
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 801f270:	42b2      	cmp	r2, r6
 801f272:	bfa8      	it	ge
 801f274:	4632      	movge	r2, r6
 801f276:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 801f27a:	1ab1      	subs	r1, r6, r2
 801f27c:	18a8      	adds	r0, r5, r2
 801f27e:	f7ff fb7c 	bl	801e97a <lv_memset_00>
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 801f282:	1c61      	adds	r1, r4, #1
        lv_memset_00(&mask_buf[0], cir_x_left);
 801f284:	4628      	mov	r0, r5
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 801f286:	42b1      	cmp	r1, r6
 801f288:	bfa8      	it	ge
 801f28a:	4631      	movge	r1, r6
        lv_memset_00(&mask_buf[0], cir_x_left);
 801f28c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801f290:	e74d      	b.n	801f12e <lv_draw_mask_radius+0x80>
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 801f292:	f1b9 0f00 	cmp.w	r9, #0
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 801f296:	f81a bd01 	ldrb.w	fp, [sl, #-1]!
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 801f29a:	db08      	blt.n	801f2ae <lv_draw_mask_radius+0x200>
 801f29c:	45b1      	cmp	r9, r6
 801f29e:	da06      	bge.n	801f2ae <lv_draw_mask_radius+0x200>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 801f2a0:	f815 1009 	ldrb.w	r1, [r5, r9]
 801f2a4:	4658      	mov	r0, fp
 801f2a6:	f7ff fb6c 	bl	801e982 <mask_mix>
 801f2aa:	f805 0009 	strb.w	r0, [r5, r9]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 801f2ae:	f1b8 0f00 	cmp.w	r8, #0
 801f2b2:	db08      	blt.n	801f2c6 <lv_draw_mask_radius+0x218>
 801f2b4:	45b0      	cmp	r8, r6
 801f2b6:	da06      	bge.n	801f2c6 <lv_draw_mask_radius+0x218>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 801f2b8:	f815 1008 	ldrb.w	r1, [r5, r8]
 801f2bc:	4658      	mov	r0, fp
 801f2be:	f7ff fb60 	bl	801e982 <mask_mix>
 801f2c2:	f805 0008 	strb.w	r0, [r5, r8]
        for(i = 0; i < aa_len; i++) {
 801f2c6:	f108 38ff 	add.w	r8, r8, #4294967295
 801f2ca:	f109 0901 	add.w	r9, r9, #1
 801f2ce:	e7c6      	b.n	801f25e <lv_draw_mask_radius+0x1b0>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 801f2d0:	f81b 9901 	ldrb.w	r9, [fp], #-1
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 801f2d4:	f1ba 0f00 	cmp.w	sl, #0
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 801f2d8:	ea6f 0909 	mvn.w	r9, r9
 801f2dc:	fa5f f989 	uxtb.w	r9, r9
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 801f2e0:	db08      	blt.n	801f2f4 <lv_draw_mask_radius+0x246>
 801f2e2:	45b2      	cmp	sl, r6
 801f2e4:	da06      	bge.n	801f2f4 <lv_draw_mask_radius+0x246>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 801f2e6:	f815 100a 	ldrb.w	r1, [r5, sl]
 801f2ea:	4648      	mov	r0, r9
 801f2ec:	f7ff fb49 	bl	801e982 <mask_mix>
 801f2f0:	f805 000a 	strb.w	r0, [r5, sl]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 801f2f4:	f1b8 0f00 	cmp.w	r8, #0
 801f2f8:	db08      	blt.n	801f30c <lv_draw_mask_radius+0x25e>
 801f2fa:	45b0      	cmp	r8, r6
 801f2fc:	da06      	bge.n	801f30c <lv_draw_mask_radius+0x25e>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 801f2fe:	f815 1008 	ldrb.w	r1, [r5, r8]
 801f302:	4648      	mov	r0, r9
 801f304:	f7ff fb3d 	bl	801e982 <mask_mix>
 801f308:	f805 0008 	strb.w	r0, [r5, r8]
        for(i = 0; i < aa_len; i++) {
 801f30c:	f108 38ff 	add.w	r8, r8, #4294967295
 801f310:	f10a 0a01 	add.w	sl, sl, #1
 801f314:	e789      	b.n	801f22a <lv_draw_mask_radius+0x17c>
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 801f316:	42a6      	cmp	r6, r4
 801f318:	db02      	blt.n	801f320 <lv_draw_mask_radius+0x272>
 801f31a:	1b31      	subs	r1, r6, r4
 801f31c:	b209      	sxth	r1, r1
 801f31e:	e798      	b.n	801f252 <lv_draw_mask_radius+0x1a4>
 801f320:	2100      	movs	r1, #0
 801f322:	e796      	b.n	801f252 <lv_draw_mask_radius+0x1a4>

0801f324 <lv_draw_mask_free_param>:
{
 801f324:	b510      	push	{r4, lr}
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 801f326:	7903      	ldrb	r3, [r0, #4]
{
 801f328:	4604      	mov	r4, r0
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 801f32a:	2b02      	cmp	r3, #2
 801f32c:	d110      	bne.n	801f350 <lv_draw_mask_free_param+0x2c>
        if(radius_p->circle) {
 801f32e:	6943      	ldr	r3, [r0, #20]
 801f330:	b16b      	cbz	r3, 801f34e <lv_draw_mask_free_param+0x2a>
            if(radius_p->circle->life < 0) {
 801f332:	691a      	ldr	r2, [r3, #16]
 801f334:	2a00      	cmp	r2, #0
 801f336:	da07      	bge.n	801f348 <lv_draw_mask_free_param+0x24>
                lv_mem_free(radius_p->circle->cir_opa);
 801f338:	6858      	ldr	r0, [r3, #4]
 801f33a:	f7f3 f9d7 	bl	80126ec <lv_mem_free>
                lv_mem_free(radius_p->circle);
 801f33e:	6960      	ldr	r0, [r4, #20]
}
 801f340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_mem_free(poly_p->cfg.points);
 801f344:	f7f3 b9d2 	b.w	80126ec <lv_mem_free>
                radius_p->circle->used_cnt--;
 801f348:	695a      	ldr	r2, [r3, #20]
 801f34a:	3a01      	subs	r2, #1
 801f34c:	615a      	str	r2, [r3, #20]
}
 801f34e:	bd10      	pop	{r4, pc}
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
 801f350:	2b05      	cmp	r3, #5
 801f352:	d1fc      	bne.n	801f34e <lv_draw_mask_free_param+0x2a>
        lv_mem_free(poly_p->cfg.points);
 801f354:	6880      	ldr	r0, [r0, #8]
 801f356:	e7f3      	b.n	801f340 <lv_draw_mask_free_param+0x1c>

0801f358 <lv_draw_mask_line_angle_init>:
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 801f358:	2bb4      	cmp	r3, #180	; 0xb4
{
 801f35a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801f35e:	461c      	mov	r4, r3
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 801f360:	bfc8      	it	gt
 801f362:	f1a3 04b4 	subgt.w	r4, r3, #180	; 0xb4
{
 801f366:	4606      	mov	r6, r0
 801f368:	4690      	mov	r8, r2
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 801f36a:	bfc8      	it	gt
 801f36c:	b224      	sxthgt	r4, r4
{
 801f36e:	460f      	mov	r7, r1
    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 801f370:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 801f374:	b200      	sxth	r0, r0
 801f376:	f7f3 f961 	bl	801263c <lv_trigo_sin>
 801f37a:	4605      	mov	r5, r0
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 801f37c:	4620      	mov	r0, r4
 801f37e:	f7f3 f95d 	bl	801263c <lv_trigo_sin>
    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 801f382:	f89d 2020 	ldrb.w	r2, [sp, #32]
 801f386:	eb08 1460 	add.w	r4, r8, r0, asr #5
 801f38a:	4639      	mov	r1, r7
 801f38c:	eb07 1365 	add.w	r3, r7, r5, asr #5
 801f390:	9201      	str	r2, [sp, #4]
 801f392:	b224      	sxth	r4, r4
 801f394:	4642      	mov	r2, r8
 801f396:	b21b      	sxth	r3, r3
 801f398:	4630      	mov	r0, r6
 801f39a:	9400      	str	r4, [sp, #0]
 801f39c:	f7e8 ffe8 	bl	8008370 <lv_draw_mask_line_points_init>
}
 801f3a0:	b002      	add	sp, #8
 801f3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f3a6 <lv_draw_rect>:
 801f3a6:	88d3      	ldrh	r3, [r2, #6]
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801f3a8:	b470      	push	{r4, r5, r6}
 801f3aa:	3301      	adds	r3, #1
 801f3ac:	8856      	ldrh	r6, [r2, #2]
 801f3ae:	1b9b      	subs	r3, r3, r6
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 801f3b0:	b21b      	sxth	r3, r3
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	dd09      	ble.n	801f3ca <lv_draw_rect+0x24>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801f3b6:	8893      	ldrh	r3, [r2, #4]
 801f3b8:	8814      	ldrh	r4, [r2, #0]
 801f3ba:	3301      	adds	r3, #1
 801f3bc:	1b1b      	subs	r3, r3, r4
 801f3be:	b21b      	sxth	r3, r3
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	dd02      	ble.n	801f3ca <lv_draw_rect+0x24>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 801f3c4:	6903      	ldr	r3, [r0, #16]

    LV_ASSERT_MEM_INTEGRITY();
}
 801f3c6:	bc70      	pop	{r4, r5, r6}
    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 801f3c8:	4718      	bx	r3
}
 801f3ca:	bc70      	pop	{r4, r5, r6}
 801f3cc:	4770      	bx	lr

0801f3ce <lv_draw_transform>:
 *   GLOBAL FUNCTIONS
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 801f3ce:	b4f0      	push	{r4, r5, r6, r7}
 801f3d0:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 801f3d4:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 801f3d8:	f89d 701c 	ldrb.w	r7, [sp, #28]
    LV_ASSERT_NULL(draw_ctx);
 801f3dc:	b900      	cbnz	r0, 801f3e0 <lv_draw_transform+0x12>
 801f3de:	e7fe      	b.n	801f3de <lv_draw_transform+0x10>
    if(draw_ctx->draw_transform == NULL) {
 801f3e0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 801f3e2:	b12c      	cbz	r4, 801f3f0 <lv_draw_transform+0x22>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 801f3e4:	46a4      	mov	ip, r4
 801f3e6:	9707      	str	r7, [sp, #28]
 801f3e8:	e9cd 5604 	strd	r5, r6, [sp, #16]

}
 801f3ec:	bcf0      	pop	{r4, r5, r6, r7}
    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 801f3ee:	4760      	bx	ip
}
 801f3f0:	bcf0      	pop	{r4, r5, r6, r7}
 801f3f2:	4770      	bx	lr

0801f3f4 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 801f3f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801f3f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801f3fc:	4605      	mov	r5, r0
 801f3fe:	4614      	mov	r4, r2
 801f400:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 801f404:	461e      	mov	r6, r3
 801f406:	b963      	cbnz	r3, 801f422 <_lv_img_buf_get_transformed_area+0x2e>
 801f408:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 801f40c:	d109      	bne.n	801f422 <_lv_img_buf_get_transformed_area+0x2e>
        res->x1 = 0;
        res->y1 = 0;
        res->x2 = w - 1;
 801f40e:	3901      	subs	r1, #1
        res->y2 = h - 1;
 801f410:	1e54      	subs	r4, r2, #1
        res->x1 = 0;
 801f412:	802b      	strh	r3, [r5, #0]
        res->y1 = 0;
 801f414:	806b      	strh	r3, [r5, #2]
        res->x2 = w - 1;
 801f416:	8081      	strh	r1, [r0, #4]
    lv_point_transform(&p[2], angle, zoom, pivot);
    lv_point_transform(&p[3], angle, zoom, pivot);
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 801f418:	b224      	sxth	r4, r4
 801f41a:	80ec      	strh	r4, [r5, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 801f41c:	b004      	add	sp, #16
 801f41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_point_t p[4] = {
 801f422:	2300      	movs	r3, #0
    lv_point_transform(&p[0], angle, zoom, pivot);
 801f424:	463a      	mov	r2, r7
 801f426:	4668      	mov	r0, sp
    lv_point_t p[4] = {
 801f428:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f42c:	9300      	str	r3, [sp, #0]
 801f42e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f432:	f8ad 3008 	strh.w	r3, [sp, #8]
    lv_point_transform(&p[0], angle, zoom, pivot);
 801f436:	4643      	mov	r3, r8
    lv_point_t p[4] = {
 801f438:	f8ad 100c 	strh.w	r1, [sp, #12]
    lv_point_transform(&p[0], angle, zoom, pivot);
 801f43c:	4631      	mov	r1, r6
    lv_point_t p[4] = {
 801f43e:	f8ad 400a 	strh.w	r4, [sp, #10]
 801f442:	f8ad 400e 	strh.w	r4, [sp, #14]
    lv_point_transform(&p[0], angle, zoom, pivot);
 801f446:	f7f3 f801 	bl	801244c <lv_point_transform>
    lv_point_transform(&p[1], angle, zoom, pivot);
 801f44a:	4643      	mov	r3, r8
 801f44c:	463a      	mov	r2, r7
 801f44e:	4631      	mov	r1, r6
 801f450:	a801      	add	r0, sp, #4
 801f452:	f7f2 fffb 	bl	801244c <lv_point_transform>
    lv_point_transform(&p[2], angle, zoom, pivot);
 801f456:	4643      	mov	r3, r8
 801f458:	463a      	mov	r2, r7
 801f45a:	4631      	mov	r1, r6
 801f45c:	a802      	add	r0, sp, #8
 801f45e:	f7f2 fff5 	bl	801244c <lv_point_transform>
    lv_point_transform(&p[3], angle, zoom, pivot);
 801f462:	4643      	mov	r3, r8
 801f464:	463a      	mov	r2, r7
 801f466:	4631      	mov	r1, r6
 801f468:	a803      	add	r0, sp, #12
 801f46a:	f7f2 ffef 	bl	801244c <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 801f46e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f472:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 801f476:	461a      	mov	r2, r3
 801f478:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801f47c:	42a3      	cmp	r3, r4
 801f47e:	f9bd 1000 	ldrsh.w	r1, [sp]
 801f482:	bfa8      	it	ge
 801f484:	4622      	movge	r2, r4
 801f486:	4282      	cmp	r2, r0
 801f488:	bfa8      	it	ge
 801f48a:	4602      	movge	r2, r0
 801f48c:	428a      	cmp	r2, r1
 801f48e:	bfa8      	it	ge
 801f490:	460a      	movge	r2, r1
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 801f492:	42a3      	cmp	r3, r4
 801f494:	bfb8      	it	lt
 801f496:	4623      	movlt	r3, r4
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 801f498:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 801f49c:	3a02      	subs	r2, #2
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 801f49e:	4283      	cmp	r3, r0
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 801f4a0:	802a      	strh	r2, [r5, #0]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 801f4a2:	bfb8      	it	lt
 801f4a4:	4603      	movlt	r3, r0
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 801f4a6:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 801f4aa:	428b      	cmp	r3, r1
 801f4ac:	bfb8      	it	lt
 801f4ae:	460b      	movlt	r3, r1
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 801f4b0:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 801f4b4:	3302      	adds	r3, #2
 801f4b6:	80ab      	strh	r3, [r5, #4]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 801f4b8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f4bc:	42a3      	cmp	r3, r4
 801f4be:	461a      	mov	r2, r3
 801f4c0:	bfa8      	it	ge
 801f4c2:	4622      	movge	r2, r4
 801f4c4:	4282      	cmp	r2, r0
 801f4c6:	bfa8      	it	ge
 801f4c8:	4602      	movge	r2, r0
 801f4ca:	428a      	cmp	r2, r1
 801f4cc:	bfa8      	it	ge
 801f4ce:	460a      	movge	r2, r1
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 801f4d0:	429c      	cmp	r4, r3
 801f4d2:	bfb8      	it	lt
 801f4d4:	461c      	movlt	r4, r3
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 801f4d6:	3a02      	subs	r2, #2
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 801f4d8:	4284      	cmp	r4, r0
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 801f4da:	806a      	strh	r2, [r5, #2]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 801f4dc:	bfb8      	it	lt
 801f4de:	4604      	movlt	r4, r0
 801f4e0:	428c      	cmp	r4, r1
 801f4e2:	bfb8      	it	lt
 801f4e4:	460c      	movlt	r4, r1
 801f4e6:	3402      	adds	r4, #2
 801f4e8:	e796      	b.n	801f418 <_lv_img_buf_get_transformed_area+0x24>

0801f4ea <lv_img_cache_invalidate_src>:

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 801f4ea:	4770      	bx	lr

0801f4ec <lv_img_decoder_built_in_close>:
{
 801f4ec:	b538      	push	{r3, r4, r5, lr}
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 801f4ee:	6a4d      	ldr	r5, [r1, #36]	; 0x24
{
 801f4f0:	460c      	mov	r4, r1
    if(user_data) {
 801f4f2:	b195      	cbz	r5, 801f51a <lv_img_decoder_built_in_close+0x2e>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 801f4f4:	7c0b      	ldrb	r3, [r1, #16]
 801f4f6:	2b01      	cmp	r3, #1
 801f4f8:	d102      	bne.n	801f500 <lv_img_decoder_built_in_close+0x14>
            lv_fs_close(&user_data->f);
 801f4fa:	4628      	mov	r0, r5
 801f4fc:	f005 f8ff 	bl	80246fe <lv_fs_close>
        if(user_data->palette) lv_mem_free(user_data->palette);
 801f500:	68e8      	ldr	r0, [r5, #12]
 801f502:	b108      	cbz	r0, 801f508 <lv_img_decoder_built_in_close+0x1c>
 801f504:	f7f3 f8f2 	bl	80126ec <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 801f508:	6928      	ldr	r0, [r5, #16]
 801f50a:	b108      	cbz	r0, 801f510 <lv_img_decoder_built_in_close+0x24>
 801f50c:	f7f3 f8ee 	bl	80126ec <lv_mem_free>
        lv_mem_free(user_data);
 801f510:	4628      	mov	r0, r5
 801f512:	f7f3 f8eb 	bl	80126ec <lv_mem_free>
        dsc->user_data = NULL;
 801f516:	2300      	movs	r3, #0
 801f518:	6263      	str	r3, [r4, #36]	; 0x24
}
 801f51a:	bd38      	pop	{r3, r4, r5, pc}

0801f51c <lv_img_decoder_read_line>:
{
 801f51c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f51e:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 801f520:	6800      	ldr	r0, [r0, #0]
 801f522:	6884      	ldr	r4, [r0, #8]
 801f524:	b144      	cbz	r4, 801f538 <lv_img_decoder_read_line+0x1c>
 801f526:	9e06      	ldr	r6, [sp, #24]
 801f528:	e9cd 3600 	strd	r3, r6, [sp]
 801f52c:	4613      	mov	r3, r2
 801f52e:	460a      	mov	r2, r1
 801f530:	4629      	mov	r1, r5
 801f532:	47a0      	blx	r4
}
 801f534:	b002      	add	sp, #8
 801f536:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 801f538:	4620      	mov	r0, r4
 801f53a:	e7fb      	b.n	801f534 <lv_img_decoder_read_line+0x18>

0801f53c <lv_img_decoder_close>:
{
 801f53c:	b510      	push	{r4, lr}
 801f53e:	4604      	mov	r4, r0
    if(dsc->decoder) {
 801f540:	6800      	ldr	r0, [r0, #0]
 801f542:	b158      	cbz	r0, 801f55c <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 801f544:	68c3      	ldr	r3, [r0, #12]
 801f546:	b10b      	cbz	r3, 801f54c <lv_img_decoder_close+0x10>
 801f548:	4621      	mov	r1, r4
 801f54a:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 801f54c:	7c23      	ldrb	r3, [r4, #16]
 801f54e:	2b01      	cmp	r3, #1
 801f550:	d104      	bne.n	801f55c <lv_img_decoder_close+0x20>
            lv_mem_free((void *)dsc->src);
 801f552:	6860      	ldr	r0, [r4, #4]
 801f554:	f7f3 f8ca 	bl	80126ec <lv_mem_free>
            dsc->src = NULL;
 801f558:	2300      	movs	r3, #0
 801f55a:	6063      	str	r3, [r4, #4]
}
 801f55c:	bd10      	pop	{r4, pc}

0801f55e <lv_draw_sw_wait_for_finish>:

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 801f55e:	4770      	bx	lr

0801f560 <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 801f560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f564:	461e      	mov	r6, r3
 801f566:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f568:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
        lv_memcpy(dest_bufc, src_bufc, line_length);
        dest_bufc += dest_stride;
 801f56c:	ea4f 0a42 	mov.w	sl, r2, lsl #1
    dest_bufc += dest_area->x1;
 801f570:	f9b6 0000 	ldrsh.w	r0, [r6]
    dest_bufc += dest_stride * dest_area->y1;
 801f574:	f9b6 5002 	ldrsh.w	r5, [r6, #2]
        src_bufc += src_stride;
 801f578:	ea4f 0943 	mov.w	r9, r3, lsl #1
    src_bufc += src_area->x1;
 801f57c:	f9b4 c000 	ldrsh.w	ip, [r4]
    dest_bufc += dest_area->x1;
 801f580:	fb02 0705 	mla	r7, r2, r5, r0
 801f584:	eb01 0747 	add.w	r7, r1, r7, lsl #1
    src_bufc += src_area->x1;
 801f588:	8861      	ldrh	r1, [r4, #2]
 801f58a:	9c08      	ldr	r4, [sp, #32]
 801f58c:	fb13 c101 	smlabb	r1, r3, r1, ip
 801f590:	eb04 0841 	add.w	r8, r4, r1, lsl #1
 801f594:	88b4      	ldrh	r4, [r6, #4]
 801f596:	3401      	adds	r4, #1
 801f598:	1a24      	subs	r4, r4, r0
    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
 801f59a:	b224      	sxth	r4, r4
 801f59c:	0064      	lsls	r4, r4, #1
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 801f59e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801f5a2:	42ab      	cmp	r3, r5
 801f5a4:	da01      	bge.n	801f5aa <lv_draw_sw_buffer_copy+0x4a>
    }
}
 801f5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return memcpy(dst, src, len);
 801f5aa:	3501      	adds	r5, #1
 801f5ac:	4641      	mov	r1, r8
 801f5ae:	4638      	mov	r0, r7
 801f5b0:	4622      	mov	r2, r4
        dest_bufc += dest_stride;
 801f5b2:	4457      	add	r7, sl
        src_bufc += src_stride;
 801f5b4:	44c8      	add	r8, r9
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 801f5b6:	b22d      	sxth	r5, r5
 801f5b8:	f7fb f8a7 	bl	801a70a <memcpy>
 801f5bc:	e7ef      	b.n	801f59e <lv_draw_sw_buffer_copy+0x3e>

0801f5be <get_rounded_area>:

    q->draw_ctx->clip_area = clip_area_ori;
}

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 801f5be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f5c2:	4681      	mov	r9, r0
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 801f5c4:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801f5c8:	eba1 0852 	sub.w	r8, r1, r2, lsr #1
{
 801f5cc:	4617      	mov	r7, r2
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 801f5ce:	b200      	sxth	r0, r0
{
 801f5d0:	461e      	mov	r6, r3
    int32_t thick_half = thickness / 2;
 801f5d2:	0855      	lsrs	r5, r2, #1
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 801f5d4:	f7f3 f832 	bl	801263c <lv_trigo_sin>
 801f5d8:	fb08 f400 	mul.w	r4, r8, r0
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 801f5dc:	4648      	mov	r0, r9
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 801f5de:	11e4      	asrs	r4, r4, #7
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 801f5e0:	f7f3 f82c 	bl	801263c <lv_trigo_sin>

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
        cir_x = (cir_x - pa) >> ps;
        res_area->x1 = cir_x - thick_half + thick_corr;
 801f5e4:	43fa      	mvns	r2, r7
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 801f5e6:	fb08 f100 	mul.w	r1, r8, r0
    if(cir_x > 0) {
 801f5ea:	2c00      	cmp	r4, #0
        res_area->x1 = cir_x - thick_half + thick_corr;
 801f5ec:	f002 0201 	and.w	r2, r2, #1
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 801f5f0:	ea4f 11e1 	mov.w	r1, r1, asr #7
    if(cir_x > 0) {
 801f5f4:	dd17      	ble.n	801f626 <get_rounded_area+0x68>
        cir_x = (cir_x - pa) >> ps;
 801f5f6:	3c7f      	subs	r4, #127	; 0x7f
        res_area->x1 = cir_x - thick_half + thick_corr;
 801f5f8:	1b53      	subs	r3, r2, r5
 801f5fa:	f3c4 240f 	ubfx	r4, r4, #8, #16
 801f5fe:	4423      	add	r3, r4
        res_area->x2 = cir_x + thick_half;
 801f600:	442c      	add	r4, r5
        res_area->x1 = cir_x - thick_half + thick_corr;
 801f602:	b21b      	sxth	r3, r3
    }
    else {
        cir_x = (cir_x + pa) >> ps;
        res_area->x1 = cir_x - thick_half;
        res_area->x2 = cir_x + thick_half - thick_corr;
 801f604:	b224      	sxth	r4, r4
    }

    if(cir_y > 0) {
 801f606:	2900      	cmp	r1, #0
        res_area->x1 = cir_x - thick_half + thick_corr;
 801f608:	8033      	strh	r3, [r6, #0]
        res_area->x2 = cir_x + thick_half;
 801f60a:	80b4      	strh	r4, [r6, #4]
    if(cir_y > 0) {
 801f60c:	dd13      	ble.n	801f636 <get_rounded_area+0x78>
        cir_y = (cir_y - pa) >> ps;
 801f60e:	397f      	subs	r1, #127	; 0x7f
        res_area->y1 = cir_y - thick_half + thick_corr;
 801f610:	1b53      	subs	r3, r2, r5
 801f612:	f3c1 210f 	ubfx	r1, r1, #8, #16
 801f616:	440b      	add	r3, r1
 801f618:	b21b      	sxth	r3, r3
        res_area->y2 = cir_y + thick_half;
    }
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
 801f61a:	4429      	add	r1, r5
        res_area->y1 = cir_y - thick_half + thick_corr;
 801f61c:	8073      	strh	r3, [r6, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 801f61e:	b209      	sxth	r1, r1
        res_area->y2 = cir_y + thick_half;
 801f620:	80f1      	strh	r1, [r6, #6]
    }
}
 801f622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        cir_x = (cir_x + pa) >> ps;
 801f626:	347f      	adds	r4, #127	; 0x7f
        res_area->x2 = cir_x + thick_half - thick_corr;
 801f628:	1aa8      	subs	r0, r5, r2
        res_area->x1 = cir_x - thick_half;
 801f62a:	f3c4 240f 	ubfx	r4, r4, #8, #16
 801f62e:	1b63      	subs	r3, r4, r5
        res_area->x2 = cir_x + thick_half - thick_corr;
 801f630:	4404      	add	r4, r0
        res_area->x1 = cir_x - thick_half;
 801f632:	b21b      	sxth	r3, r3
        res_area->x2 = cir_x + thick_half - thick_corr;
 801f634:	e7e6      	b.n	801f604 <get_rounded_area+0x46>
        cir_y = (cir_y + pa) >> ps;
 801f636:	317f      	adds	r1, #127	; 0x7f
        res_area->y1 = cir_y - thick_half;
 801f638:	f3c1 210f 	ubfx	r1, r1, #8, #16
 801f63c:	1b4b      	subs	r3, r1, r5
        res_area->y2 = cir_y + thick_half - thick_corr;
 801f63e:	1aad      	subs	r5, r5, r2
        res_area->y1 = cir_y - thick_half;
 801f640:	b21b      	sxth	r3, r3
        res_area->y2 = cir_y + thick_half - thick_corr;
 801f642:	e7ea      	b.n	801f61a <get_rounded_area+0x5c>

0801f644 <lv_draw_sw_arc>:
{
 801f644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f648:	b0d3      	sub	sp, #332	; 0x14c
 801f64a:	4604      	mov	r4, r0
 801f64c:	4615      	mov	r5, r2
 801f64e:	9303      	str	r3, [sp, #12]
    if(dsc->opa <= LV_OPA_MIN) return;
 801f650:	7b0b      	ldrb	r3, [r1, #12]
{
 801f652:	f8bd 7170 	ldrh.w	r7, [sp, #368]	; 0x170
    if(dsc->opa <= LV_OPA_MIN) return;
 801f656:	2b02      	cmp	r3, #2
{
 801f658:	f8bd 6174 	ldrh.w	r6, [sp, #372]	; 0x174
 801f65c:	9105      	str	r1, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
 801f65e:	f240 8097 	bls.w	801f790 <lv_draw_sw_arc+0x14c>
    if(dsc->width == 0) return;
 801f662:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801f666:	9304      	str	r3, [sp, #16]
 801f668:	2b00      	cmp	r3, #0
 801f66a:	f000 8091 	beq.w	801f790 <lv_draw_sw_arc+0x14c>
    if(start_angle == end_angle) return;
 801f66e:	42b7      	cmp	r7, r6
 801f670:	f000 808e 	beq.w	801f790 <lv_draw_sw_arc+0x14c>
    if(width > radius) width = radius;
 801f674:	9a03      	ldr	r2, [sp, #12]
    lv_draw_rect_dsc_init(&cir_dsc);
 801f676:	a829      	add	r0, sp, #164	; 0xa4
    if(width > radius) width = radius;
 801f678:	4293      	cmp	r3, r2
 801f67a:	bfc4      	itt	gt
 801f67c:	f9bd 300c 	ldrshgt.w	r3, [sp, #12]
 801f680:	9304      	strgt	r3, [sp, #16]
    lv_draw_rect_dsc_init(&cir_dsc);
 801f682:	f7e9 f95b 	bl	800893c <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 801f686:	9b05      	ldr	r3, [sp, #20]
 801f688:	7b5b      	ldrb	r3, [r3, #13]
 801f68a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801f68e:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
    if(dsc->img_src) {
 801f692:	9b05      	ldr	r3, [sp, #20]
 801f694:	689a      	ldr	r2, [r3, #8]
 801f696:	7b1b      	ldrb	r3, [r3, #12]
 801f698:	2a00      	cmp	r2, #0
 801f69a:	d07c      	beq.n	801f796 <lv_draw_sw_arc+0x152>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 801f69c:	2100      	movs	r1, #0
        cir_dsc.bg_img_src = dsc->img_src;
 801f69e:	922d      	str	r2, [sp, #180]	; 0xb4
        cir_dsc.bg_img_opa = dsc->opa;
 801f6a0:	f88d 30be 	strb.w	r3, [sp, #190]	; 0xbe
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 801f6a4:	f88d 10a7 	strb.w	r1, [sp, #167]	; 0xa7
    area_out.x1 = center->x - radius;
 801f6a8:	9b03      	ldr	r3, [sp, #12]
    area_out.y1 = center->y - radius;
 801f6aa:	f8b5 c002 	ldrh.w	ip, [r5, #2]
    area_out.x1 = center->x - radius;
 801f6ae:	882a      	ldrh	r2, [r5, #0]
    area_out.y1 = center->y - radius;
 801f6b0:	ebac 0103 	sub.w	r1, ip, r3
    area_out.x1 = center->x - radius;
 801f6b4:	1ad0      	subs	r0, r2, r3
 801f6b6:	3b01      	subs	r3, #1
    area_out.y1 = center->y - radius;
 801f6b8:	b289      	uxth	r1, r1
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 801f6ba:	fa12 f283 	uxtah	r2, r2, r3
    area_out.y2 = center->y + radius - 1;
 801f6be:	fa1c f383 	uxtah	r3, ip, r3
    area_in.x1 += dsc->width;
 801f6c2:	f8dd c014 	ldr.w	ip, [sp, #20]
    area_out.x1 = center->x - radius;
 801f6c6:	b280      	uxth	r0, r0
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 801f6c8:	b292      	uxth	r2, r2
    area_out.y1 = center->y - radius;
 801f6ca:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    area_in.x1 += dsc->width;
 801f6ce:	f8bc c002 	ldrh.w	ip, [ip, #2]
    area_out.y2 = center->y + radius - 1;
 801f6d2:	b29b      	uxth	r3, r3
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 801f6d4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    area_in.x2 -= dsc->width;
 801f6d8:	eba2 020c 	sub.w	r2, r2, ip
    area_out.x1 = center->x - radius;
 801f6dc:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
    area_in.x1 += dsc->width;
 801f6e0:	4460      	add	r0, ip
    area_in.y1 += dsc->width;
 801f6e2:	4461      	add	r1, ip
    area_in.x2 -= dsc->width;
 801f6e4:	b292      	uxth	r2, r2
    area_out.y2 = center->y + radius - 1;
 801f6e6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    area_in.x1 += dsc->width;
 801f6ea:	b280      	uxth	r0, r0
    area_in.y2 -= dsc->width;
 801f6ec:	eba3 030c 	sub.w	r3, r3, ip
    area_in.x2 -= dsc->width;
 801f6f0:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 801f6f4:	3201      	adds	r2, #1
    area_in.y1 += dsc->width;
 801f6f6:	b289      	uxth	r1, r1
    area_in.x1 += dsc->width;
 801f6f8:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 801f6fc:	1a12      	subs	r2, r2, r0
    area_in.y2 -= dsc->width;
 801f6fe:	b29b      	uxth	r3, r3
    area_in.y1 += dsc->width;
 801f700:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 801f704:	b212      	sxth	r2, r2
    area_in.y2 -= dsc->width;
 801f706:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 801f70a:	2a00      	cmp	r2, #0
 801f70c:	dd4a      	ble.n	801f7a4 <lv_draw_sw_arc+0x160>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801f70e:	3301      	adds	r3, #1
 801f710:	1a5b      	subs	r3, r3, r1
 801f712:	b21b      	sxth	r3, r3
 801f714:	2b00      	cmp	r3, #0
 801f716:	dd45      	ble.n	801f7a4 <lv_draw_sw_arc+0x160>
        lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 801f718:	2301      	movs	r3, #1
 801f71a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801f71e:	a911      	add	r1, sp, #68	; 0x44
 801f720:	a817      	add	r0, sp, #92	; 0x5c
 801f722:	f7e8 ff05 	bl	8008530 <lv_draw_mask_radius_init>
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 801f726:	2100      	movs	r1, #0
 801f728:	a817      	add	r0, sp, #92	; 0x5c
 801f72a:	f7e8 fd89 	bl	8008240 <lv_draw_mask_add>
        mask_in_param_valid = true;
 801f72e:	2301      	movs	r3, #1
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 801f730:	9006      	str	r0, [sp, #24]
        mask_in_param_valid = true;
 801f732:	9308      	str	r3, [sp, #32]
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 801f734:	2300      	movs	r3, #0
 801f736:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801f73a:	a90f      	add	r1, sp, #60	; 0x3c
 801f73c:	a81d      	add	r0, sp, #116	; 0x74
 801f73e:	f7e8 fef7 	bl	8008530 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 801f742:	2100      	movs	r1, #0
 801f744:	a81d      	add	r0, sp, #116	; 0x74
 801f746:	f7e8 fd7b 	bl	8008240 <lv_draw_mask_add>
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 801f74a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 801f74e:	900b      	str	r0, [sp, #44]	; 0x2c
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 801f750:	42b3      	cmp	r3, r6
 801f752:	d003      	beq.n	801f75c <lv_draw_sw_arc+0x118>
 801f754:	f506 73b4 	add.w	r3, r6, #360	; 0x168
 801f758:	429f      	cmp	r7, r3
 801f75a:	d12c      	bne.n	801f7b6 <lv_draw_sw_arc+0x172>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 801f75c:	f647 73ff 	movw	r3, #32767	; 0x7fff
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 801f760:	a929      	add	r1, sp, #164	; 0xa4
 801f762:	aa0f      	add	r2, sp, #60	; 0x3c
 801f764:	4620      	mov	r0, r4
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 801f766:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 801f76a:	f7ff fe1c 	bl	801f3a6 <lv_draw_rect>
        lv_draw_mask_remove_id(mask_out_id);
 801f76e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f770:	f7e8 fd9c 	bl	80082ac <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 801f774:	9b06      	ldr	r3, [sp, #24]
 801f776:	1c59      	adds	r1, r3, #1
 801f778:	d002      	beq.n	801f780 <lv_draw_sw_arc+0x13c>
 801f77a:	4618      	mov	r0, r3
 801f77c:	f7e8 fd96 	bl	80082ac <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_out_param);
 801f780:	a81d      	add	r0, sp, #116	; 0x74
 801f782:	f7ff fdcf 	bl	801f324 <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 801f786:	9b08      	ldr	r3, [sp, #32]
 801f788:	b113      	cbz	r3, 801f790 <lv_draw_sw_arc+0x14c>
            lv_draw_mask_free_param(&mask_in_param);
 801f78a:	a817      	add	r0, sp, #92	; 0x5c
 801f78c:	f7ff fdca 	bl	801f324 <lv_draw_mask_free_param>
}
 801f790:	b053      	add	sp, #332	; 0x14c
 801f792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cir_dsc.bg_opa = dsc->opa;
 801f796:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
        cir_dsc.bg_color = dsc->color;
 801f79a:	9b05      	ldr	r3, [sp, #20]
 801f79c:	881b      	ldrh	r3, [r3, #0]
 801f79e:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 801f7a2:	e781      	b.n	801f6a8 <lv_draw_sw_arc+0x64>
    bool mask_in_param_valid = false;
 801f7a4:	2300      	movs	r3, #0
 801f7a6:	9308      	str	r3, [sp, #32]
    int16_t mask_in_id = LV_MASK_ID_INV;
 801f7a8:	f04f 33ff 	mov.w	r3, #4294967295
 801f7ac:	9306      	str	r3, [sp, #24]
 801f7ae:	e7c1      	b.n	801f734 <lv_draw_sw_arc+0xf0>
    while(start_angle >= 360) start_angle -= 360;
 801f7b0:	f5a7 77b4 	sub.w	r7, r7, #360	; 0x168
 801f7b4:	b2bf      	uxth	r7, r7
 801f7b6:	f5b7 7fb4 	cmp.w	r7, #360	; 0x168
 801f7ba:	d2f9      	bcs.n	801f7b0 <lv_draw_sw_arc+0x16c>
    while(end_angle >= 360) end_angle -= 360;
 801f7bc:	f5b6 7fb4 	cmp.w	r6, #360	; 0x168
 801f7c0:	f080 80b7 	bcs.w	801f932 <lv_draw_sw_arc+0x2ee>
    lv_draw_mask_angle_init(&mask_angle_param, center->x, center->y, start_angle, end_angle);
 801f7c4:	b23b      	sxth	r3, r7
 801f7c6:	a837      	add	r0, sp, #220	; 0xdc
 801f7c8:	9307      	str	r3, [sp, #28]
 801f7ca:	b233      	sxth	r3, r6
 801f7cc:	9300      	str	r3, [sp, #0]
 801f7ce:	9309      	str	r3, [sp, #36]	; 0x24
 801f7d0:	b23b      	sxth	r3, r7
 801f7d2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801f7d6:	f9b5 1000 	ldrsh.w	r1, [r5]
 801f7da:	f7e8 fe59 	bl	8008490 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 801f7de:	2100      	movs	r1, #0
 801f7e0:	a837      	add	r0, sp, #220	; 0xdc
 801f7e2:	f7e8 fd2d 	bl	8008240 <lv_draw_mask_add>
    if(end_angle > start_angle) {
 801f7e6:	42b7      	cmp	r7, r6
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801f7e8:	f8d4 8008 	ldr.w	r8, [r4, #8]
        angle_gap = 360 - (end_angle - start_angle);
 801f7ec:	bf34      	ite	cc
 801f7ee:	1bf3      	subcc	r3, r6, r7
        angle_gap = start_angle - end_angle;
 801f7f0:	1bbb      	subcs	r3, r7, r6
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 801f7f2:	900c      	str	r0, [sp, #48]	; 0x30
        angle_gap = 360 - (end_angle - start_angle);
 801f7f4:	bf38      	it	cc
 801f7f6:	f5c3 73b4 	rsbcc	r3, r3, #360	; 0x168
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 801f7fa:	2b3c      	cmp	r3, #60	; 0x3c
 801f7fc:	f340 850b 	ble.w	8020216 <lv_draw_sw_arc+0xbd2>
 801f800:	9b03      	ldr	r3, [sp, #12]
 801f802:	2b0a      	cmp	r3, #10
 801f804:	f240 8507 	bls.w	8020216 <lv_draw_sw_arc+0xbd2>
        q_dsc.radius = radius;
 801f808:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 801f80c:	2f59      	cmp	r7, #89	; 0x59
        q_dsc.radius = radius;
 801f80e:	9302      	str	r3, [sp, #8]
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 801f810:	f04f 035a 	mov.w	r3, #90	; 0x5a
 801f814:	fbb7 f9f3 	udiv	r9, r7, r3
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 801f818:	fbb6 fbf3 	udiv	fp, r6, r3
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 801f81c:	f200 8095 	bhi.w	801f94a <lv_draw_sw_arc+0x306>
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f820:	eb07 0a03 	add.w	sl, r7, r3
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f824:	9a04      	ldr	r2, [sp, #16]
 801f826:	9b02      	ldr	r3, [sp, #8]
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 801f828:	2e59      	cmp	r6, #89	; 0x59
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f82a:	fa0f fa8a 	sxth.w	sl, sl
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f82e:	eba3 0302 	sub.w	r3, r3, r2
 801f832:	930a      	str	r3, [sp, #40]	; 0x28
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 801f834:	f200 80f3 	bhi.w	801fa1e <lv_draw_sw_arc+0x3da>
 801f838:	42b7      	cmp	r7, r6
 801f83a:	f080 80f0 	bcs.w	801fa1e <lv_draw_sw_arc+0x3da>
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f83e:	886b      	ldrh	r3, [r5, #2]
 801f840:	b238      	sxth	r0, r7
 801f842:	930d      	str	r3, [sp, #52]	; 0x34
 801f844:	f7f2 fefa 	bl	801263c <lv_trigo_sin>
 801f848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f84a:	4358      	muls	r0, r3
 801f84c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f84e:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f852:	4650      	mov	r0, sl
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f854:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f858:	882b      	ldrh	r3, [r5, #0]
 801f85a:	930d      	str	r3, [sp, #52]	; 0x34
 801f85c:	f7f2 feee 	bl	801263c <lv_trigo_sin>
 801f860:	9b02      	ldr	r3, [sp, #8]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801f862:	f8b5 a002 	ldrh.w	sl, [r5, #2]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f866:	4358      	muls	r0, r3
 801f868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f86a:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801f86e:	b230      	sxth	r0, r6
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f870:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801f874:	f7f2 fee2 	bl	801263c <lv_trigo_sin>
 801f878:	9b02      	ldr	r3, [sp, #8]
 801f87a:	4358      	muls	r0, r3
 801f87c:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f880:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 801f884:	b200      	sxth	r0, r0
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801f886:	f8ad a092 	strh.w	sl, [sp, #146]	; 0x92
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f88a:	f8b5 a000 	ldrh.w	sl, [r5]
 801f88e:	f7f2 fed5 	bl	801263c <lv_trigo_sin>
 801f892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801f894:	4642      	mov	r2, r8
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f896:	4358      	muls	r0, r3
 801f898:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 801f89c:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801f8a0:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 801f8a4:	4651      	mov	r1, sl
 801f8a6:	4650      	mov	r0, sl
 801f8a8:	f004 fce3 	bl	8024272 <_lv_area_intersect>
        if(ok) {
 801f8ac:	2800      	cmp	r0, #0
 801f8ae:	d144      	bne.n	801f93a <lv_draw_sw_arc+0x2f6>
    q->draw_ctx->clip_area = clip_area_ori;
 801f8b0:	f8c4 8008 	str.w	r8, [r4, #8]
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 801f8b4:	f1ab 0302 	sub.w	r3, fp, #2
 801f8b8:	b29b      	uxth	r3, r3
 801f8ba:	2b01      	cmp	r3, #1
 801f8bc:	f240 8345 	bls.w	801ff4a <lv_draw_sw_arc+0x906>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801f8c0:	f1b9 0f03 	cmp.w	r9, #3
    q->draw_ctx->clip_area = clip_area_ori;
 801f8c4:	f8c4 8008 	str.w	r8, [r4, #8]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801f8c8:	f040 8361 	bne.w	801ff8e <lv_draw_sw_arc+0x94a>
            quarter_area.x2 = q->center->x + q->radius;
 801f8cc:	f8b5 9000 	ldrh.w	r9, [r5]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f8d0:	f107 005a 	add.w	r0, r7, #90	; 0x5a
            quarter_area.x2 = q->center->x + q->radius;
 801f8d4:	9b03      	ldr	r3, [sp, #12]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f8d6:	b200      	sxth	r0, r0
            quarter_area.x2 = q->center->x + q->radius;
 801f8d8:	444b      	add	r3, r9
 801f8da:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            quarter_area.y2 = q->center->y - 1;
 801f8de:	886b      	ldrh	r3, [r5, #2]
 801f8e0:	3b01      	subs	r3, #1
 801f8e2:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f8e6:	f7f2 fea9 	bl	801263c <lv_trigo_sin>
 801f8ea:	9a04      	ldr	r2, [sp, #16]
 801f8ec:	9b02      	ldr	r3, [sp, #8]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f8ee:	886f      	ldrh	r7, [r5, #2]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f8f0:	1a9b      	subs	r3, r3, r2
 801f8f2:	4343      	muls	r3, r0
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f8f4:	9807      	ldr	r0, [sp, #28]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f8f6:	eb09 39e3 	add.w	r9, r9, r3, asr #15
 801f8fa:	f8ad 908c 	strh.w	r9, [sp, #140]	; 0x8c
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f8fe:	f7f2 fe9d 	bl	801263c <lv_trigo_sin>
 801f902:	9b02      	ldr	r3, [sp, #8]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801f904:	4642      	mov	r2, r8
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f906:	4358      	muls	r0, r3
 801f908:	eb07 37e0 	add.w	r7, r7, r0, asr #15
 801f90c:	f8ad 708e 	strh.w	r7, [sp, #142]	; 0x8e
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801f910:	af23      	add	r7, sp, #140	; 0x8c
 801f912:	4639      	mov	r1, r7
 801f914:	4638      	mov	r0, r7
 801f916:	f004 fcac 	bl	8024272 <_lv_area_intersect>
            if(ok) {
 801f91a:	b128      	cbz	r0, 801f928 <lv_draw_sw_arc+0x2e4>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801f91c:	aa0f      	add	r2, sp, #60	; 0x3c
 801f91e:	a929      	add	r1, sp, #164	; 0xa4
 801f920:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 801f922:	60a7      	str	r7, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801f924:	f7ff fd3f 	bl	801f3a6 <lv_draw_rect>
        if(q->end_quarter == 3) {
 801f928:	f1bb 0f03 	cmp.w	fp, #3
 801f92c:	f040 8352 	bne.w	801ffd4 <lv_draw_sw_arc+0x990>
 801f930:	e1a7      	b.n	801fc82 <lv_draw_sw_arc+0x63e>
    while(end_angle >= 360) end_angle -= 360;
 801f932:	f5a6 76b4 	sub.w	r6, r6, #360	; 0x168
 801f936:	b2b6      	uxth	r6, r6
 801f938:	e740      	b.n	801f7bc <lv_draw_sw_arc+0x178>
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801f93a:	aa0f      	add	r2, sp, #60	; 0x3c
 801f93c:	a929      	add	r1, sp, #164	; 0xa4
 801f93e:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 801f940:	f8c4 a008 	str.w	sl, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801f944:	f7ff fd2f 	bl	801f3a6 <lv_draw_rect>
 801f948:	e7b2      	b.n	801f8b0 <lv_draw_sw_arc+0x26c>
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 801f94a:	2e59      	cmp	r6, #89	; 0x59
 801f94c:	f240 8098 	bls.w	801fa80 <lv_draw_sw_arc+0x43c>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 801f950:	45d9      	cmp	r9, fp
 801f952:	d102      	bne.n	801f95a <lv_draw_sw_arc+0x316>
 801f954:	42b7      	cmp	r7, r6
 801f956:	f200 829c 	bhi.w	801fe92 <lv_draw_sw_arc+0x84e>
 801f95a:	f1b9 0f02 	cmp.w	r9, #2
 801f95e:	f040 81af 	bne.w	801fcc0 <lv_draw_sw_arc+0x67c>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 801f962:	f1bb 0f01 	cmp.w	fp, #1
 801f966:	f000 8294 	beq.w	801fe92 <lv_draw_sw_arc+0x84e>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 801f96a:	f1bb 0f02 	cmp.w	fp, #2
 801f96e:	f040 8146 	bne.w	801fbfe <lv_draw_sw_arc+0x5ba>
 801f972:	42b7      	cmp	r7, r6
 801f974:	f200 82e9 	bhi.w	801ff4a <lv_draw_sw_arc+0x906>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801f978:	f1b9 0f02 	cmp.w	r9, #2
    q->draw_ctx->clip_area = clip_area_ori;
 801f97c:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801f980:	f040 83d4 	bne.w	802012c <lv_draw_sw_arc+0xae8>
 801f984:	f1bb 0f02 	cmp.w	fp, #2
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f988:	f9b5 3000 	ldrsh.w	r3, [r5]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801f98c:	f040 8139 	bne.w	801fc02 <lv_draw_sw_arc+0x5be>
 801f990:	42b7      	cmp	r7, r6
 801f992:	f080 8136 	bcs.w	801fc02 <lv_draw_sw_arc+0x5be>
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f996:	f107 005a 	add.w	r0, r7, #90	; 0x5a
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f99a:	9a04      	ldr	r2, [sp, #16]
 801f99c:	930a      	str	r3, [sp, #40]	; 0x28
 801f99e:	9b02      	ldr	r3, [sp, #8]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f9a0:	b200      	sxth	r0, r0
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f9a2:	eba3 0a02 	sub.w	sl, r3, r2
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f9a6:	f7f2 fe49 	bl	801263c <lv_trigo_sin>
 801f9aa:	9b02      	ldr	r3, [sp, #8]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f9ac:	886f      	ldrh	r7, [r5, #2]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f9ae:	4358      	muls	r0, r3
 801f9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9b2:	eb03 33e0 	add.w	r3, r3, r0, asr #15
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f9b6:	9807      	ldr	r0, [sp, #28]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801f9b8:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f9bc:	f7f2 fe3e 	bl	801263c <lv_trigo_sin>
 801f9c0:	fb0a f000 	mul.w	r0, sl, r0
 801f9c4:	eb07 37e0 	add.w	r7, r7, r0, asr #15
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801f9c8:	b230      	sxth	r0, r6
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f9ca:	f8ad 7092 	strh.w	r7, [sp, #146]	; 0x92
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801f9ce:	886f      	ldrh	r7, [r5, #2]
 801f9d0:	f7f2 fe34 	bl	801263c <lv_trigo_sin>
 801f9d4:	9b02      	ldr	r3, [sp, #8]
 801f9d6:	4358      	muls	r0, r3
 801f9d8:	eb07 37e0 	add.w	r7, r7, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f9dc:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 801f9e0:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801f9e2:	f8ad 708e 	strh.w	r7, [sp, #142]	; 0x8e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f9e6:	882f      	ldrh	r7, [r5, #0]
 801f9e8:	f7f2 fe28 	bl	801263c <lv_trigo_sin>
 801f9ec:	fb0a f000 	mul.w	r0, sl, r0
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801f9f0:	4642      	mov	r2, r8
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801f9f2:	eb07 37e0 	add.w	r7, r7, r0, asr #15
 801f9f6:	f8ad 7090 	strh.w	r7, [sp, #144]	; 0x90
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801f9fa:	af23      	add	r7, sp, #140	; 0x8c
 801f9fc:	4639      	mov	r1, r7
 801f9fe:	4638      	mov	r0, r7
 801fa00:	f004 fc37 	bl	8024272 <_lv_area_intersect>
        if(ok) {
 801fa04:	2800      	cmp	r0, #0
 801fa06:	f040 838a 	bne.w	802011e <lv_draw_sw_arc+0xada>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 801fa0a:	f1b9 0f02 	cmp.w	r9, #2
    q->draw_ctx->clip_area = clip_area_ori;
 801fa0e:	f8c4 8008 	str.w	r8, [r4, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 801fa12:	f040 83fd 	bne.w	8020210 <lv_draw_sw_arc+0xbcc>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 801fa16:	2e59      	cmp	r6, #89	; 0x59
 801fa18:	f240 83df 	bls.w	80201da <lv_draw_sw_arc+0xb96>
 801fa1c:	e2da      	b.n	801ffd4 <lv_draw_sw_arc+0x990>
            quarter_area.x1 = q->center->x;
 801fa1e:	882b      	ldrh	r3, [r5, #0]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa20:	b238      	sxth	r0, r7
            quarter_area.y2 = q->center->y + q->radius;
 801fa22:	9a03      	ldr	r2, [sp, #12]
            quarter_area.x1 = q->center->x;
 801fa24:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            quarter_area.y2 = q->center->y + q->radius;
 801fa28:	886b      	ldrh	r3, [r5, #2]
 801fa2a:	441a      	add	r2, r3
 801fa2c:	930d      	str	r3, [sp, #52]	; 0x34
 801fa2e:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa32:	f7f2 fe03 	bl	801263c <lv_trigo_sin>
 801fa36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa38:	4358      	muls	r0, r3
 801fa3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fa3c:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fa40:	4650      	mov	r0, sl
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fa42:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fa46:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fa4a:	882b      	ldrh	r3, [r5, #0]
 801fa4c:	930a      	str	r3, [sp, #40]	; 0x28
 801fa4e:	f7f2 fdf5 	bl	801263c <lv_trigo_sin>
 801fa52:	9b02      	ldr	r3, [sp, #8]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fa54:	4642      	mov	r2, r8
 801fa56:	4651      	mov	r1, sl
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fa58:	4358      	muls	r0, r3
 801fa5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa5c:	eb03 33e0 	add.w	r3, r3, r0, asr #15
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fa60:	4650      	mov	r0, sl
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fa62:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fa66:	f004 fc04 	bl	8024272 <_lv_area_intersect>
            if(ok) {
 801fa6a:	b130      	cbz	r0, 801fa7a <lv_draw_sw_arc+0x436>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fa6c:	aa0f      	add	r2, sp, #60	; 0x3c
 801fa6e:	a929      	add	r1, sp, #164	; 0xa4
 801fa70:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 801fa72:	f8c4 a008 	str.w	sl, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fa76:	f7ff fc96 	bl	801f3a6 <lv_draw_rect>
        if(q->end_quarter == 0) {
 801fa7a:	2e59      	cmp	r6, #89	; 0x59
 801fa7c:	f200 8243 	bhi.w	801ff06 <lv_draw_sw_arc+0x8c2>
            quarter_area.x2 = q->center->x + q->radius;
 801fa80:	9a03      	ldr	r2, [sp, #12]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801fa82:	b230      	sxth	r0, r6
            quarter_area.x2 = q->center->x + q->radius;
 801fa84:	882b      	ldrh	r3, [r5, #0]
            quarter_area.y1 = q->center->y;
 801fa86:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
            quarter_area.x2 = q->center->x + q->radius;
 801fa8a:	4413      	add	r3, r2
            quarter_area.y1 = q->center->y;
 801fa8c:	f8ad a08e 	strh.w	sl, [sp, #142]	; 0x8e
            quarter_area.x2 = q->center->x + q->radius;
 801fa90:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801fa94:	f7f2 fdd2 	bl	801263c <lv_trigo_sin>
 801fa98:	9b02      	ldr	r3, [sp, #8]
 801fa9a:	4358      	muls	r0, r3
 801fa9c:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801faa0:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 801faa4:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 801faa6:	f8ad a092 	strh.w	sl, [sp, #146]	; 0x92
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801faaa:	f8b5 a000 	ldrh.w	sl, [r5]
 801faae:	f7f2 fdc5 	bl	801263c <lv_trigo_sin>
 801fab2:	9a04      	ldr	r2, [sp, #16]
 801fab4:	9b02      	ldr	r3, [sp, #8]
 801fab6:	1a9b      	subs	r3, r3, r2
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fab8:	4642      	mov	r2, r8
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801faba:	4343      	muls	r3, r0
 801fabc:	eb0a 3ae3 	add.w	sl, sl, r3, asr #15
 801fac0:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fac4:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 801fac8:	4651      	mov	r1, sl
 801faca:	4650      	mov	r0, sl
 801facc:	f004 fbd1 	bl	8024272 <_lv_area_intersect>
            if(ok) {
 801fad0:	2800      	cmp	r0, #0
 801fad2:	f040 808c 	bne.w	801fbee <lv_draw_sw_arc+0x5aa>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801fad6:	f1b9 0f01 	cmp.w	r9, #1
    q->draw_ctx->clip_area = clip_area_ori;
 801fada:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801fade:	f040 8225 	bne.w	801ff2c <lv_draw_sw_arc+0x8e8>
            quarter_area.x1 = q->center->x - q->radius;
 801fae2:	9a03      	ldr	r2, [sp, #12]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fae4:	b238      	sxth	r0, r7
            quarter_area.x1 = q->center->x - q->radius;
 801fae6:	882b      	ldrh	r3, [r5, #0]
            quarter_area.y1 = q->center->y;
 801fae8:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
            quarter_area.x1 = q->center->x - q->radius;
 801faec:	1a9b      	subs	r3, r3, r2
            quarter_area.y1 = q->center->y;
 801faee:	f8ad a08e 	strh.w	sl, [sp, #142]	; 0x8e
            quarter_area.x1 = q->center->x - q->radius;
 801faf2:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801faf6:	f7f2 fda1 	bl	801263c <lv_trigo_sin>
 801fafa:	9b02      	ldr	r3, [sp, #8]
 801fafc:	4358      	muls	r0, r3
 801fafe:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fb02:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 801fb06:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fb08:	f8ad a092 	strh.w	sl, [sp, #146]	; 0x92
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fb0c:	f8b5 a000 	ldrh.w	sl, [r5]
 801fb10:	f7f2 fd94 	bl	801263c <lv_trigo_sin>
 801fb14:	9a04      	ldr	r2, [sp, #16]
 801fb16:	9b02      	ldr	r3, [sp, #8]
 801fb18:	1a9b      	subs	r3, r3, r2
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fb1a:	4642      	mov	r2, r8
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fb1c:	4343      	muls	r3, r0
 801fb1e:	eb0a 3ae3 	add.w	sl, sl, r3, asr #15
 801fb22:	f8ad a090 	strh.w	sl, [sp, #144]	; 0x90
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fb26:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 801fb2a:	4651      	mov	r1, sl
 801fb2c:	4650      	mov	r0, sl
 801fb2e:	f004 fba0 	bl	8024272 <_lv_area_intersect>
            if(ok) {
 801fb32:	b130      	cbz	r0, 801fb42 <lv_draw_sw_arc+0x4fe>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fb34:	aa0f      	add	r2, sp, #60	; 0x3c
 801fb36:	a929      	add	r1, sp, #164	; 0xa4
 801fb38:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 801fb3a:	f8c4 a008 	str.w	sl, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fb3e:	f7ff fc32 	bl	801f3a6 <lv_draw_rect>
        if(q->end_quarter == 1) {
 801fb42:	f1bb 0f01 	cmp.w	fp, #1
 801fb46:	f040 832a 	bne.w	802019e <lv_draw_sw_arc+0xb5a>
            quarter_area.x2 = q->center->x - 1;
 801fb4a:	882b      	ldrh	r3, [r5, #0]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fb4c:	b230      	sxth	r0, r6
            quarter_area.y2 = q->center->y + q->radius;
 801fb4e:	f8b5 a002 	ldrh.w	sl, [r5, #2]
            quarter_area.x2 = q->center->x - 1;
 801fb52:	3b01      	subs	r3, #1
 801fb54:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            quarter_area.y2 = q->center->y + q->radius;
 801fb58:	9b03      	ldr	r3, [sp, #12]
 801fb5a:	4453      	add	r3, sl
 801fb5c:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fb60:	f7f2 fd6c 	bl	801263c <lv_trigo_sin>
 801fb64:	9a04      	ldr	r2, [sp, #16]
 801fb66:	9b02      	ldr	r3, [sp, #8]
 801fb68:	1a9b      	subs	r3, r3, r2
 801fb6a:	4343      	muls	r3, r0
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fb6c:	f106 005a 	add.w	r0, r6, #90	; 0x5a
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fb70:	eb0a 3ae3 	add.w	sl, sl, r3, asr #15
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fb74:	b200      	sxth	r0, r0
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fb76:	f8ad a08e 	strh.w	sl, [sp, #142]	; 0x8e
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fb7a:	f8b5 a000 	ldrh.w	sl, [r5]
 801fb7e:	f7f2 fd5d 	bl	801263c <lv_trigo_sin>
 801fb82:	9b02      	ldr	r3, [sp, #8]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fb84:	4642      	mov	r2, r8
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fb86:	4358      	muls	r0, r3
 801fb88:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 801fb8c:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fb90:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 801fb94:	4651      	mov	r1, sl
 801fb96:	4650      	mov	r0, sl
 801fb98:	f004 fb6b 	bl	8024272 <_lv_area_intersect>
            if(ok) {
 801fb9c:	2800      	cmp	r0, #0
 801fb9e:	f040 81bd 	bne.w	801ff1c <lv_draw_sw_arc+0x8d8>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801fba2:	f1b9 0f02 	cmp.w	r9, #2
    q->draw_ctx->clip_area = clip_area_ori;
 801fba6:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801fbaa:	d02a      	beq.n	801fc02 <lv_draw_sw_arc+0x5be>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 801fbac:	45d9      	cmp	r9, fp
 801fbae:	d102      	bne.n	801fbb6 <lv_draw_sw_arc+0x572>
 801fbb0:	42b7      	cmp	r7, r6
 801fbb2:	f200 8101 	bhi.w	801fdb8 <lv_draw_sw_arc+0x774>
 801fbb6:	2f59      	cmp	r7, #89	; 0x59
 801fbb8:	f200 80d1 	bhi.w	801fd5e <lv_draw_sw_arc+0x71a>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801fbbc:	f1bb 0f03 	cmp.w	fp, #3
 801fbc0:	f000 80fa 	beq.w	801fdb8 <lv_draw_sw_arc+0x774>
 801fbc4:	f1b9 0f01 	cmp.w	r9, #1
 801fbc8:	f000 82fb 	beq.w	80201c2 <lv_draw_sw_arc+0xb7e>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fbcc:	f1b9 0f03 	cmp.w	r9, #3
    q->draw_ctx->clip_area = clip_area_ori;
 801fbd0:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fbd4:	f43f ae7a 	beq.w	801f8cc <lv_draw_sw_arc+0x288>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 801fbd8:	45d9      	cmp	r9, fp
 801fbda:	f040 81fb 	bne.w	801ffd4 <lv_draw_sw_arc+0x990>
 801fbde:	42b7      	cmp	r7, r6
 801fbe0:	f200 82fb 	bhi.w	80201da <lv_draw_sw_arc+0xb96>
 801fbe4:	f1b9 0f02 	cmp.w	r9, #2
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 801fbe8:	f040 81f4 	bne.w	801ffd4 <lv_draw_sw_arc+0x990>
 801fbec:	e713      	b.n	801fa16 <lv_draw_sw_arc+0x3d2>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fbee:	aa0f      	add	r2, sp, #60	; 0x3c
 801fbf0:	a929      	add	r1, sp, #164	; 0xa4
 801fbf2:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 801fbf4:	f8c4 a008 	str.w	sl, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fbf8:	f7ff fbd5 	bl	801f3a6 <lv_draw_rect>
 801fbfc:	e76b      	b.n	801fad6 <lv_draw_sw_arc+0x492>
    q->draw_ctx->clip_area = clip_area_ori;
 801fbfe:	f8c4 8008 	str.w	r8, [r4, #8]
            quarter_area.x2 = q->center->x - 1;
 801fc02:	f8b5 a000 	ldrh.w	sl, [r5]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fc06:	f107 005a 	add.w	r0, r7, #90	; 0x5a
            quarter_area.y1 = q->center->y - q->radius;
 801fc0a:	9a03      	ldr	r2, [sp, #12]
            quarter_area.x2 = q->center->x - 1;
 801fc0c:	f10a 33ff 	add.w	r3, sl, #4294967295
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fc10:	b200      	sxth	r0, r0
            quarter_area.x2 = q->center->x - 1;
 801fc12:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            quarter_area.y1 = q->center->y - q->radius;
 801fc16:	886b      	ldrh	r3, [r5, #2]
 801fc18:	1a9b      	subs	r3, r3, r2
 801fc1a:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fc1e:	f7f2 fd0d 	bl	801263c <lv_trigo_sin>
 801fc22:	9b02      	ldr	r3, [sp, #8]
 801fc24:	4358      	muls	r0, r3
 801fc26:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fc2a:	b238      	sxth	r0, r7
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fc2c:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fc30:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 801fc34:	f7f2 fd02 	bl	801263c <lv_trigo_sin>
 801fc38:	9a04      	ldr	r2, [sp, #16]
 801fc3a:	9b02      	ldr	r3, [sp, #8]
 801fc3c:	1a9b      	subs	r3, r3, r2
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fc3e:	4642      	mov	r2, r8
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fc40:	4343      	muls	r3, r0
 801fc42:	eb0a 3ae3 	add.w	sl, sl, r3, asr #15
 801fc46:	f8ad a092 	strh.w	sl, [sp, #146]	; 0x92
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fc4a:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 801fc4e:	4651      	mov	r1, sl
 801fc50:	4650      	mov	r0, sl
 801fc52:	f004 fb0e 	bl	8024272 <_lv_area_intersect>
            if(ok) {
 801fc56:	b130      	cbz	r0, 801fc66 <lv_draw_sw_arc+0x622>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fc58:	aa0f      	add	r2, sp, #60	; 0x3c
 801fc5a:	a929      	add	r1, sp, #164	; 0xa4
 801fc5c:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 801fc5e:	f8c4 a008 	str.w	sl, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fc62:	f7ff fba0 	bl	801f3a6 <lv_draw_rect>
        if(q->end_quarter == 2) {
 801fc66:	f1bb 0f02 	cmp.w	fp, #2
 801fc6a:	f000 8263 	beq.w	8020134 <lv_draw_sw_arc+0xaf0>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 801fc6e:	f1bb 0f03 	cmp.w	fp, #3
    q->draw_ctx->clip_area = clip_area_ori;
 801fc72:	f8c4 8008 	str.w	r8, [r4, #8]
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 801fc76:	f040 828e 	bne.w	8020196 <lv_draw_sw_arc+0xb52>
        if(q->start_quarter == 3) {
 801fc7a:	f1b9 0f03 	cmp.w	r9, #3
 801fc7e:	f43f ae25 	beq.w	801f8cc <lv_draw_sw_arc+0x288>
            quarter_area.y1 = q->center->y - q->radius;
 801fc82:	9a03      	ldr	r2, [sp, #12]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fc84:	f106 005a 	add.w	r0, r6, #90	; 0x5a
            quarter_area.y1 = q->center->y - q->radius;
 801fc88:	886b      	ldrh	r3, [r5, #2]
            quarter_area.x1 = q->center->x;
 801fc8a:	f9b5 7000 	ldrsh.w	r7, [r5]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fc8e:	b200      	sxth	r0, r0
            quarter_area.y1 = q->center->y - q->radius;
 801fc90:	1a9b      	subs	r3, r3, r2
            quarter_area.x1 = q->center->x;
 801fc92:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
            quarter_area.y1 = q->center->y - q->radius;
 801fc96:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fc9a:	f7f2 fccf 	bl	801263c <lv_trigo_sin>
 801fc9e:	9b02      	ldr	r3, [sp, #8]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fca0:	886e      	ldrh	r6, [r5, #2]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fca2:	4358      	muls	r0, r3
 801fca4:	eb07 37e0 	add.w	r7, r7, r0, asr #15
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fca8:	9809      	ldr	r0, [sp, #36]	; 0x24
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fcaa:	f8ad 7090 	strh.w	r7, [sp, #144]	; 0x90
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fcae:	f7f2 fcc5 	bl	801263c <lv_trigo_sin>
 801fcb2:	9b02      	ldr	r3, [sp, #8]
 801fcb4:	9a04      	ldr	r2, [sp, #16]
 801fcb6:	1a9b      	subs	r3, r3, r2
 801fcb8:	4343      	muls	r3, r0
 801fcba:	eb06 36e3 	add.w	r6, r6, r3, asr #15
 801fcbe:	e0d6      	b.n	801fe6e <lv_draw_sw_arc+0x82a>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 801fcc0:	f1b9 0f03 	cmp.w	r9, #3
 801fcc4:	d068      	beq.n	801fd98 <lv_draw_sw_arc+0x754>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801fcc6:	f1bb 0f01 	cmp.w	fp, #1
 801fcca:	f47f af0a 	bne.w	801fae2 <lv_draw_sw_arc+0x49e>
 801fcce:	42b7      	cmp	r7, r6
 801fcd0:	f4bf af07 	bcs.w	801fae2 <lv_draw_sw_arc+0x49e>
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fcd4:	b238      	sxth	r0, r7
 801fcd6:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 801fcda:	f7f2 fcaf 	bl	801263c <lv_trigo_sin>
 801fcde:	9b02      	ldr	r3, [sp, #8]
 801fce0:	4358      	muls	r0, r3
 801fce2:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fce6:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 801fcea:	b200      	sxth	r0, r0
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fcec:	f8ad a092 	strh.w	sl, [sp, #146]	; 0x92
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fcf0:	f8b5 a000 	ldrh.w	sl, [r5]
 801fcf4:	f7f2 fca2 	bl	801263c <lv_trigo_sin>
 801fcf8:	9a04      	ldr	r2, [sp, #16]
 801fcfa:	9b02      	ldr	r3, [sp, #8]
 801fcfc:	1a9b      	subs	r3, r3, r2
 801fcfe:	4358      	muls	r0, r3
 801fd00:	930a      	str	r3, [sp, #40]	; 0x28
 801fd02:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fd06:	b230      	sxth	r0, r6
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fd08:	f8ad a090 	strh.w	sl, [sp, #144]	; 0x90
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fd0c:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 801fd10:	f7f2 fc94 	bl	801263c <lv_trigo_sin>
 801fd14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd16:	4358      	muls	r0, r3
 801fd18:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fd1c:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 801fd20:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fd22:	f8ad a08e 	strh.w	sl, [sp, #142]	; 0x8e
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fd26:	f8b5 a000 	ldrh.w	sl, [r5]
 801fd2a:	f7f2 fc87 	bl	801263c <lv_trigo_sin>
 801fd2e:	9b02      	ldr	r3, [sp, #8]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fd30:	4642      	mov	r2, r8
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fd32:	4358      	muls	r0, r3
 801fd34:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 801fd38:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fd3c:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 801fd40:	4651      	mov	r1, sl
 801fd42:	4650      	mov	r0, sl
 801fd44:	f004 fa95 	bl	8024272 <_lv_area_intersect>
        if(ok) {
 801fd48:	2800      	cmp	r0, #0
 801fd4a:	f040 80d4 	bne.w	801fef6 <lv_draw_sw_arc+0x8b2>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801fd4e:	f1b9 0f02 	cmp.w	r9, #2
    q->draw_ctx->clip_area = clip_area_ori;
 801fd52:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801fd56:	f43f af54 	beq.w	801fc02 <lv_draw_sw_arc+0x5be>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 801fd5a:	42b7      	cmp	r7, r6
 801fd5c:	d82c      	bhi.n	801fdb8 <lv_draw_sw_arc+0x774>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801fd5e:	f1b9 0f01 	cmp.w	r9, #1
 801fd62:	f000 824b 	beq.w	80201fc <lv_draw_sw_arc+0xbb8>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fd66:	f1b9 0f03 	cmp.w	r9, #3
    q->draw_ctx->clip_area = clip_area_ori;
 801fd6a:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fd6e:	d048      	beq.n	801fe02 <lv_draw_sw_arc+0x7be>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 801fd70:	f1bb 0f03 	cmp.w	fp, #3
 801fd74:	d085      	beq.n	801fc82 <lv_draw_sw_arc+0x63e>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 801fd76:	45d9      	cmp	r9, fp
 801fd78:	d106      	bne.n	801fd88 <lv_draw_sw_arc+0x744>
 801fd7a:	42b7      	cmp	r7, r6
 801fd7c:	f200 822d 	bhi.w	80201da <lv_draw_sw_arc+0xb96>
 801fd80:	f1b9 0f02 	cmp.w	r9, #2
 801fd84:	f040 8244 	bne.w	8020210 <lv_draw_sw_arc+0xbcc>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 801fd88:	2e59      	cmp	r6, #89	; 0x59
 801fd8a:	f240 8226 	bls.w	80201da <lv_draw_sw_arc+0xb96>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 801fd8e:	f1bb 0f01 	cmp.w	fp, #1
 801fd92:	f040 811f 	bne.w	801ffd4 <lv_draw_sw_arc+0x990>
 801fd96:	e220      	b.n	80201da <lv_draw_sw_arc+0xb96>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 801fd98:	f1bb 0f03 	cmp.w	fp, #3
 801fd9c:	d179      	bne.n	801fe92 <lv_draw_sw_arc+0x84e>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 801fd9e:	42b7      	cmp	r7, r6
 801fda0:	f200 80d3 	bhi.w	801ff4a <lv_draw_sw_arc+0x906>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 801fda4:	f1bb 0f03 	cmp.w	fp, #3
    q->draw_ctx->clip_area = clip_area_ori;
 801fda8:	f8c4 8008 	str.w	r8, [r4, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 801fdac:	f47f ad8e 	bne.w	801f8cc <lv_draw_sw_arc+0x288>
 801fdb0:	42b7      	cmp	r7, r6
 801fdb2:	d801      	bhi.n	801fdb8 <lv_draw_sw_arc+0x774>
 801fdb4:	2f59      	cmp	r7, #89	; 0x59
 801fdb6:	d8d6      	bhi.n	801fd66 <lv_draw_sw_arc+0x722>
        quarter_area.x1 = q->center->x - q->radius;
 801fdb8:	882a      	ldrh	r2, [r5, #0]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fdba:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
        quarter_area.x1 = q->center->x - q->radius;
 801fdbe:	9b03      	ldr	r3, [sp, #12]
        quarter_area.y1 = q->center->y - q->radius;
 801fdc0:	9903      	ldr	r1, [sp, #12]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fdc2:	4650      	mov	r0, sl
        quarter_area.x1 = q->center->x - q->radius;
 801fdc4:	1ad3      	subs	r3, r2, r3
        quarter_area.x2 = q->center->x - 1;
 801fdc6:	3a01      	subs	r2, #1
        quarter_area.x1 = q->center->x - q->radius;
 801fdc8:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        quarter_area.y1 = q->center->y - q->radius;
 801fdcc:	886b      	ldrh	r3, [r5, #2]
        quarter_area.x2 = q->center->x - 1;
 801fdce:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fdd2:	4642      	mov	r2, r8
        quarter_area.y1 = q->center->y - q->radius;
 801fdd4:	1a59      	subs	r1, r3, r1
        quarter_area.y2 = q->center->y - 1;
 801fdd6:	3b01      	subs	r3, #1
        quarter_area.y1 = q->center->y - q->radius;
 801fdd8:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fddc:	4651      	mov	r1, sl
        quarter_area.y2 = q->center->y - 1;
 801fdde:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fde2:	f004 fa46 	bl	8024272 <_lv_area_intersect>
        if(ok) {
 801fde6:	b130      	cbz	r0, 801fdf6 <lv_draw_sw_arc+0x7b2>
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fde8:	aa0f      	add	r2, sp, #60	; 0x3c
 801fdea:	a929      	add	r1, sp, #164	; 0xa4
 801fdec:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 801fdee:	f8c4 a008 	str.w	sl, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fdf2:	f7ff fad8 	bl	801f3a6 <lv_draw_rect>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fdf6:	f1b9 0f03 	cmp.w	r9, #3
    q->draw_ctx->clip_area = clip_area_ori;
 801fdfa:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fdfe:	f040 8202 	bne.w	8020206 <lv_draw_sw_arc+0xbc2>
 801fe02:	f1bb 0f03 	cmp.w	fp, #3
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fe06:	f9b5 a000 	ldrsh.w	sl, [r5]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801fe0a:	f47f ad5f 	bne.w	801f8cc <lv_draw_sw_arc+0x288>
 801fe0e:	42b7      	cmp	r7, r6
 801fe10:	f4bf ad5c 	bcs.w	801f8cc <lv_draw_sw_arc+0x288>
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fe14:	9a04      	ldr	r2, [sp, #16]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fe16:	f107 005a 	add.w	r0, r7, #90	; 0x5a
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fe1a:	9b02      	ldr	r3, [sp, #8]
 801fe1c:	b200      	sxth	r0, r0
 801fe1e:	eba3 0902 	sub.w	r9, r3, r2
 801fe22:	f7f2 fc0b 	bl	801263c <lv_trigo_sin>
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fe26:	886f      	ldrh	r7, [r5, #2]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fe28:	fb09 f000 	mul.w	r0, r9, r0
 801fe2c:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fe30:	9807      	ldr	r0, [sp, #28]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fe32:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fe36:	f7f2 fc01 	bl	801263c <lv_trigo_sin>
 801fe3a:	9b02      	ldr	r3, [sp, #8]
 801fe3c:	4358      	muls	r0, r3
 801fe3e:	eb07 37e0 	add.w	r7, r7, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fe42:	f106 005a 	add.w	r0, r6, #90	; 0x5a
 801fe46:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fe48:	f8ad 708e 	strh.w	r7, [sp, #142]	; 0x8e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fe4c:	882f      	ldrh	r7, [r5, #0]
 801fe4e:	f7f2 fbf5 	bl	801263c <lv_trigo_sin>
 801fe52:	9b02      	ldr	r3, [sp, #8]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fe54:	886e      	ldrh	r6, [r5, #2]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fe56:	4358      	muls	r0, r3
 801fe58:	eb07 37e0 	add.w	r7, r7, r0, asr #15
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fe5c:	9809      	ldr	r0, [sp, #36]	; 0x24
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801fe5e:	f8ad 7090 	strh.w	r7, [sp, #144]	; 0x90
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801fe62:	f7f2 fbeb 	bl	801263c <lv_trigo_sin>
 801fe66:	fb09 f000 	mul.w	r0, r9, r0
 801fe6a:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 801fe6e:	f8ad 6092 	strh.w	r6, [sp, #146]	; 0x92
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fe72:	a923      	add	r1, sp, #140	; 0x8c
 801fe74:	4642      	mov	r2, r8
 801fe76:	4608      	mov	r0, r1
 801fe78:	f004 f9fb 	bl	8024272 <_lv_area_intersect>
        if(ok) {
 801fe7c:	2800      	cmp	r0, #0
 801fe7e:	f000 80a9 	beq.w	801ffd4 <lv_draw_sw_arc+0x990>
            q->draw_ctx->clip_area = &quarter_area;
 801fe82:	ab23      	add	r3, sp, #140	; 0x8c
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fe84:	aa0f      	add	r2, sp, #60	; 0x3c
 801fe86:	a929      	add	r1, sp, #164	; 0xa4
 801fe88:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 801fe8a:	60a3      	str	r3, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fe8c:	f7ff fa8b 	bl	801f3a6 <lv_draw_rect>
 801fe90:	e0a0      	b.n	801ffd4 <lv_draw_sw_arc+0x990>
        quarter_area.x2 = q->center->x + q->radius;
 801fe92:	9903      	ldr	r1, [sp, #12]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fe94:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
        quarter_area.x1 = q->center->x;
 801fe98:	f9b5 2000 	ldrsh.w	r2, [r5]
        quarter_area.y1 = q->center->y;
 801fe9c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801fea0:	4650      	mov	r0, sl
        quarter_area.x1 = q->center->x;
 801fea2:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
        quarter_area.x2 = q->center->x + q->radius;
 801fea6:	440a      	add	r2, r1
        quarter_area.y1 = q->center->y;
 801fea8:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        quarter_area.y2 = q->center->y + q->radius;
 801feac:	440b      	add	r3, r1
        quarter_area.x2 = q->center->x + q->radius;
 801feae:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801feb2:	4651      	mov	r1, sl
 801feb4:	4642      	mov	r2, r8
        quarter_area.y2 = q->center->y + q->radius;
 801feb6:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801feba:	f004 f9da 	bl	8024272 <_lv_area_intersect>
        if(ok) {
 801febe:	b130      	cbz	r0, 801fece <lv_draw_sw_arc+0x88a>
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fec0:	aa0f      	add	r2, sp, #60	; 0x3c
 801fec2:	a929      	add	r1, sp, #164	; 0xa4
 801fec4:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 801fec6:	f8c4 a008 	str.w	sl, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801feca:	f7ff fa6c 	bl	801f3a6 <lv_draw_rect>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801fece:	f1b9 0f01 	cmp.w	r9, #1
    q->draw_ctx->clip_area = clip_area_ori;
 801fed2:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801fed6:	f43f aef6 	beq.w	801fcc6 <lv_draw_sw_arc+0x682>
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 801feda:	f1bb 0f01 	cmp.w	fp, #1
 801fede:	f43f ae34 	beq.w	801fb4a <lv_draw_sw_arc+0x506>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 801fee2:	45d9      	cmp	r9, fp
 801fee4:	f040 8112 	bne.w	802010c <lv_draw_sw_arc+0xac8>
 801fee8:	42b7      	cmp	r7, r6
 801feea:	d82e      	bhi.n	801ff4a <lv_draw_sw_arc+0x906>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801feec:	f1b9 0f03 	cmp.w	r9, #3
 801fef0:	f47f ad48 	bne.w	801f984 <lv_draw_sw_arc+0x340>
 801fef4:	e75c      	b.n	801fdb0 <lv_draw_sw_arc+0x76c>
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801fef6:	aa0f      	add	r2, sp, #60	; 0x3c
 801fef8:	a929      	add	r1, sp, #164	; 0xa4
 801fefa:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 801fefc:	f8c4 a008 	str.w	sl, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801ff00:	f7ff fa51 	bl	801f3a6 <lv_draw_rect>
 801ff04:	e723      	b.n	801fd4e <lv_draw_sw_arc+0x70a>
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 801ff06:	f1bb 0f01 	cmp.w	fp, #1
    q->draw_ctx->clip_area = clip_area_ori;
 801ff0a:	f8c4 8008 	str.w	r8, [r4, #8]
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 801ff0e:	f43f ae1c 	beq.w	801fb4a <lv_draw_sw_arc+0x506>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 801ff12:	2e59      	cmp	r6, #89	; 0x59
 801ff14:	d819      	bhi.n	801ff4a <lv_draw_sw_arc+0x906>
 801ff16:	42b7      	cmp	r7, r6
 801ff18:	d817      	bhi.n	801ff4a <lv_draw_sw_arc+0x906>
 801ff1a:	e4cb      	b.n	801f8b4 <lv_draw_sw_arc+0x270>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801ff1c:	aa0f      	add	r2, sp, #60	; 0x3c
 801ff1e:	a929      	add	r1, sp, #164	; 0xa4
 801ff20:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 801ff22:	f8c4 a008 	str.w	sl, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801ff26:	f7ff fa3e 	bl	801f3a6 <lv_draw_rect>
 801ff2a:	e63a      	b.n	801fba2 <lv_draw_sw_arc+0x55e>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 801ff2c:	45d9      	cmp	r9, fp
 801ff2e:	d101      	bne.n	801ff34 <lv_draw_sw_arc+0x8f0>
 801ff30:	42b7      	cmp	r7, r6
 801ff32:	d80a      	bhi.n	801ff4a <lv_draw_sw_arc+0x906>
 801ff34:	2f59      	cmp	r7, #89	; 0x59
 801ff36:	f67f acbd 	bls.w	801f8b4 <lv_draw_sw_arc+0x270>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801ff3a:	f1b9 0f03 	cmp.w	r9, #3
 801ff3e:	f47f ad1b 	bne.w	801f978 <lv_draw_sw_arc+0x334>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 801ff42:	f1bb 0f02 	cmp.w	fp, #2
 801ff46:	f47f af2d 	bne.w	801fda4 <lv_draw_sw_arc+0x760>
        quarter_area.x1 = q->center->x - q->radius;
 801ff4a:	882a      	ldrh	r2, [r5, #0]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801ff4c:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
        quarter_area.x1 = q->center->x - q->radius;
 801ff50:	9b03      	ldr	r3, [sp, #12]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801ff52:	4651      	mov	r1, sl
 801ff54:	4650      	mov	r0, sl
        quarter_area.x1 = q->center->x - q->radius;
 801ff56:	1ad3      	subs	r3, r2, r3
        quarter_area.x2 = q->center->x - 1;
 801ff58:	3a01      	subs	r2, #1
        quarter_area.x1 = q->center->x - q->radius;
 801ff5a:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        quarter_area.x2 = q->center->x - 1;
 801ff5e:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
        quarter_area.y1 = q->center->y;
 801ff62:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
        quarter_area.y2 = q->center->y + q->radius;
 801ff66:	9a03      	ldr	r2, [sp, #12]
        quarter_area.y1 = q->center->y;
 801ff68:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        quarter_area.y2 = q->center->y + q->radius;
 801ff6c:	4413      	add	r3, r2
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801ff6e:	4642      	mov	r2, r8
        quarter_area.y2 = q->center->y + q->radius;
 801ff70:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801ff74:	f004 f97d 	bl	8024272 <_lv_area_intersect>
        if(ok) {
 801ff78:	2800      	cmp	r0, #0
 801ff7a:	f43f acfd 	beq.w	801f978 <lv_draw_sw_arc+0x334>
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801ff7e:	aa0f      	add	r2, sp, #60	; 0x3c
 801ff80:	a929      	add	r1, sp, #164	; 0xa4
 801ff82:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 801ff84:	f8c4 a008 	str.w	sl, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801ff88:	f7ff fa0d 	bl	801f3a6 <lv_draw_rect>
 801ff8c:	e4f4      	b.n	801f978 <lv_draw_sw_arc+0x334>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 801ff8e:	45d9      	cmp	r9, fp
 801ff90:	d115      	bne.n	801ffbe <lv_draw_sw_arc+0x97a>
 801ff92:	42b7      	cmp	r7, r6
 801ff94:	f63f af10 	bhi.w	801fdb8 <lv_draw_sw_arc+0x774>
 801ff98:	2f59      	cmp	r7, #89	; 0x59
 801ff9a:	f67f ae13 	bls.w	801fbc4 <lv_draw_sw_arc+0x580>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801ff9e:	f1b9 0f01 	cmp.w	r9, #1
 801ffa2:	f47f aee0 	bne.w	801fd66 <lv_draw_sw_arc+0x722>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 801ffa6:	2e59      	cmp	r6, #89	; 0x59
 801ffa8:	f67f af06 	bls.w	801fdb8 <lv_draw_sw_arc+0x774>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 801ffac:	f1bb 0f01 	cmp.w	fp, #1
    q->draw_ctx->clip_area = clip_area_ori;
 801ffb0:	f8c4 8008 	str.w	r8, [r4, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 801ffb4:	d10e      	bne.n	801ffd4 <lv_draw_sw_arc+0x990>
 801ffb6:	42b7      	cmp	r7, r6
 801ffb8:	f200 810f 	bhi.w	80201da <lv_draw_sw_arc+0xb96>
 801ffbc:	e00a      	b.n	801ffd4 <lv_draw_sw_arc+0x990>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801ffbe:	f1b9 0f01 	cmp.w	r9, #1
 801ffc2:	f000 80fe 	beq.w	80201c2 <lv_draw_sw_arc+0xb7e>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 801ffc6:	45d9      	cmp	r9, fp
 801ffc8:	f43f ae09 	beq.w	801fbde <lv_draw_sw_arc+0x59a>
 801ffcc:	f1b9 0f02 	cmp.w	r9, #2
 801ffd0:	f43f aeda 	beq.w	801fd88 <lv_draw_sw_arc+0x744>
    q->draw_ctx->clip_area = clip_area_ori;
 801ffd4:	f8c4 8008 	str.w	r8, [r4, #8]
    lv_draw_mask_free_param(&mask_angle_param);
 801ffd8:	a837      	add	r0, sp, #220	; 0xdc
 801ffda:	f7ff f9a3 	bl	801f324 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_out_param);
 801ffde:	a81d      	add	r0, sp, #116	; 0x74
 801ffe0:	f7ff f9a0 	bl	801f324 <lv_draw_mask_free_param>
    if(mask_in_param_valid) {
 801ffe4:	9b08      	ldr	r3, [sp, #32]
 801ffe6:	b113      	cbz	r3, 801ffee <lv_draw_sw_arc+0x9aa>
        lv_draw_mask_free_param(&mask_in_param);
 801ffe8:	a817      	add	r0, sp, #92	; 0x5c
 801ffea:	f7ff f99b 	bl	801f324 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_angle_id);
 801ffee:	980c      	ldr	r0, [sp, #48]	; 0x30
 801fff0:	f7e8 f95c 	bl	80082ac <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 801fff4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fff6:	f7e8 f959 	bl	80082ac <lv_draw_mask_remove_id>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 801fffa:	9b06      	ldr	r3, [sp, #24]
 801fffc:	1c5a      	adds	r2, r3, #1
 801fffe:	d002      	beq.n	8020006 <lv_draw_sw_arc+0x9c2>
 8020000:	4618      	mov	r0, r3
 8020002:	f7e8 f953 	bl	80082ac <lv_draw_mask_remove_id>
    if(dsc->rounded) {
 8020006:	9b05      	ldr	r3, [sp, #20]
 8020008:	7b5b      	ldrb	r3, [r3, #13]
 802000a:	075b      	lsls	r3, r3, #29
 802000c:	f57f abc0 	bpl.w	801f790 <lv_draw_sw_arc+0x14c>
        get_rounded_area(start_angle, radius, width, &round_area);
 8020010:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8020014:	ab13      	add	r3, sp, #76	; 0x4c
 8020016:	f89d 7010 	ldrb.w	r7, [sp, #16]
 802001a:	4631      	mov	r1, r6
 802001c:	9807      	ldr	r0, [sp, #28]
 802001e:	463a      	mov	r2, r7
 8020020:	f7ff facd 	bl	801f5be <get_rounded_area>
        round_area.x1 += center->x;
 8020024:	882b      	ldrh	r3, [r5, #0]
 8020026:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 802002a:	4641      	mov	r1, r8
 802002c:	a815      	add	r0, sp, #84	; 0x54
        round_area.x1 += center->x;
 802002e:	441a      	add	r2, r3
 8020030:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        round_area.x2 += center->x;
 8020034:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8020038:	4413      	add	r3, r2
        round_area.y1 += center->y;
 802003a:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
        round_area.x2 += center->x;
 802003e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        round_area.y1 += center->y;
 8020042:	886b      	ldrh	r3, [r5, #2]
 8020044:	441a      	add	r2, r3
 8020046:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
        round_area.y2 += center->y;
 802004a:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 802004e:	4413      	add	r3, r2
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8020050:	aa13      	add	r2, sp, #76	; 0x4c
        round_area.y2 += center->y;
 8020052:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8020056:	f004 f90c 	bl	8024272 <_lv_area_intersect>
 802005a:	b1c0      	cbz	r0, 802008e <lv_draw_sw_arc+0xa4a>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 802005c:	2300      	movs	r3, #0
 802005e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020062:	a913      	add	r1, sp, #76	; 0x4c
 8020064:	a823      	add	r0, sp, #140	; 0x8c
 8020066:	f7e8 fa63 	bl	8008530 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 802006a:	2100      	movs	r1, #0
 802006c:	a823      	add	r0, sp, #140	; 0x8c
 802006e:	f7e8 f8e7 	bl	8008240 <lv_draw_mask_add>
            draw_ctx->clip_area = &clip_area2;
 8020072:	ab15      	add	r3, sp, #84	; 0x54
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8020074:	4681      	mov	r9, r0
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8020076:	aa0f      	add	r2, sp, #60	; 0x3c
 8020078:	a929      	add	r1, sp, #164	; 0xa4
 802007a:	4620      	mov	r0, r4
            draw_ctx->clip_area = &clip_area2;
 802007c:	60a3      	str	r3, [r4, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 802007e:	f7ff f992 	bl	801f3a6 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8020082:	4648      	mov	r0, r9
 8020084:	f7e8 f912 	bl	80082ac <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8020088:	a823      	add	r0, sp, #140	; 0x8c
 802008a:	f7ff f94b 	bl	801f324 <lv_draw_mask_free_param>
        get_rounded_area(end_angle, radius, width, &round_area);
 802008e:	ab13      	add	r3, sp, #76	; 0x4c
 8020090:	463a      	mov	r2, r7
 8020092:	4631      	mov	r1, r6
 8020094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020096:	f7ff fa92 	bl	801f5be <get_rounded_area>
        round_area.x1 += center->x;
 802009a:	882b      	ldrh	r3, [r5, #0]
 802009c:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 80200a0:	4641      	mov	r1, r8
 80200a2:	a815      	add	r0, sp, #84	; 0x54
        round_area.x1 += center->x;
 80200a4:	441a      	add	r2, r3
 80200a6:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        round_area.x2 += center->x;
 80200aa:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80200ae:	4413      	add	r3, r2
        round_area.y1 += center->y;
 80200b0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
        round_area.x2 += center->x;
 80200b4:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        round_area.y1 += center->y;
 80200b8:	886b      	ldrh	r3, [r5, #2]
 80200ba:	441a      	add	r2, r3
 80200bc:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
        round_area.y2 += center->y;
 80200c0:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 80200c4:	4413      	add	r3, r2
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 80200c6:	aa13      	add	r2, sp, #76	; 0x4c
        round_area.y2 += center->y;
 80200c8:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 80200cc:	f004 f8d1 	bl	8024272 <_lv_area_intersect>
 80200d0:	b1c0      	cbz	r0, 8020104 <lv_draw_sw_arc+0xac0>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 80200d2:	2300      	movs	r3, #0
 80200d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80200d8:	a913      	add	r1, sp, #76	; 0x4c
 80200da:	a823      	add	r0, sp, #140	; 0x8c
 80200dc:	f7e8 fa28 	bl	8008530 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 80200e0:	2100      	movs	r1, #0
 80200e2:	a823      	add	r0, sp, #140	; 0x8c
 80200e4:	f7e8 f8ac 	bl	8008240 <lv_draw_mask_add>
            draw_ctx->clip_area = &clip_area2;
 80200e8:	ab15      	add	r3, sp, #84	; 0x54
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 80200ea:	4605      	mov	r5, r0
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 80200ec:	aa0f      	add	r2, sp, #60	; 0x3c
 80200ee:	a929      	add	r1, sp, #164	; 0xa4
 80200f0:	4620      	mov	r0, r4
            draw_ctx->clip_area = &clip_area2;
 80200f2:	60a3      	str	r3, [r4, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 80200f4:	f7ff f957 	bl	801f3a6 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 80200f8:	4628      	mov	r0, r5
 80200fa:	f7e8 f8d7 	bl	80082ac <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 80200fe:	a823      	add	r0, sp, #140	; 0x8c
 8020100:	f7ff f910 	bl	801f324 <lv_draw_mask_free_param>
        draw_ctx->clip_area = clip_area_ori;
 8020104:	f8c4 8008 	str.w	r8, [r4, #8]
 8020108:	f7ff bb42 	b.w	801f790 <lv_draw_sw_arc+0x14c>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 802010c:	f1b9 0f03 	cmp.w	r9, #3
 8020110:	f47f ac38 	bne.w	801f984 <lv_draw_sw_arc+0x340>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 8020114:	f1bb 0f02 	cmp.w	fp, #2
 8020118:	f43f af17 	beq.w	801ff4a <lv_draw_sw_arc+0x906>
 802011c:	e648      	b.n	801fdb0 <lv_draw_sw_arc+0x76c>
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 802011e:	aa0f      	add	r2, sp, #60	; 0x3c
 8020120:	a929      	add	r1, sp, #164	; 0xa4
 8020122:	4620      	mov	r0, r4
            q->draw_ctx->clip_area = &quarter_area;
 8020124:	60a7      	str	r7, [r4, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8020126:	f7ff f93e 	bl	801f3a6 <lv_draw_rect>
 802012a:	e46e      	b.n	801fa0a <lv_draw_sw_arc+0x3c6>
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 802012c:	f1bb 0f02 	cmp.w	fp, #2
 8020130:	f47f ad3c 	bne.w	801fbac <lv_draw_sw_arc+0x568>
            quarter_area.x1 = q->center->x - q->radius;
 8020134:	f8b5 a000 	ldrh.w	sl, [r5]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8020138:	f106 005a 	add.w	r0, r6, #90	; 0x5a
            quarter_area.x1 = q->center->x - q->radius;
 802013c:	9b03      	ldr	r3, [sp, #12]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 802013e:	b200      	sxth	r0, r0
            quarter_area.x1 = q->center->x - q->radius;
 8020140:	ebaa 0303 	sub.w	r3, sl, r3
 8020144:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            quarter_area.y2 = q->center->y - 1;
 8020148:	886b      	ldrh	r3, [r5, #2]
 802014a:	3b01      	subs	r3, #1
 802014c:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8020150:	f7f2 fa74 	bl	801263c <lv_trigo_sin>
 8020154:	9a04      	ldr	r2, [sp, #16]
 8020156:	9b02      	ldr	r3, [sp, #8]
 8020158:	1a9b      	subs	r3, r3, r2
 802015a:	4343      	muls	r3, r0
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 802015c:	b230      	sxth	r0, r6
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 802015e:	eb0a 3ae3 	add.w	sl, sl, r3, asr #15
 8020162:	f8ad a090 	strh.w	sl, [sp, #144]	; 0x90
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8020166:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 802016a:	f7f2 fa67 	bl	801263c <lv_trigo_sin>
 802016e:	9b02      	ldr	r3, [sp, #8]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8020170:	4642      	mov	r2, r8
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8020172:	4358      	muls	r0, r3
 8020174:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 8020178:	f8ad a08e 	strh.w	sl, [sp, #142]	; 0x8e
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 802017c:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 8020180:	4651      	mov	r1, sl
 8020182:	4650      	mov	r0, sl
 8020184:	f004 f875 	bl	8024272 <_lv_area_intersect>
            if(ok) {
 8020188:	b998      	cbnz	r0, 80201b2 <lv_draw_sw_arc+0xb6e>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 802018a:	f1b9 0f03 	cmp.w	r9, #3
    q->draw_ctx->clip_area = clip_area_ori;
 802018e:	f8c4 8008 	str.w	r8, [r4, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8020192:	f43f ab9b 	beq.w	801f8cc <lv_draw_sw_arc+0x288>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8020196:	45d9      	cmp	r9, fp
 8020198:	f47f adf2 	bne.w	801fd80 <lv_draw_sw_arc+0x73c>
 802019c:	e5ed      	b.n	801fd7a <lv_draw_sw_arc+0x736>
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 802019e:	f1bb 0f02 	cmp.w	fp, #2
    q->draw_ctx->clip_area = clip_area_ori;
 80201a2:	f8c4 8008 	str.w	r8, [r4, #8]
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 80201a6:	f47f ad01 	bne.w	801fbac <lv_draw_sw_arc+0x568>
        if(q->start_quarter == 2) {
 80201aa:	f1b9 0f02 	cmp.w	r9, #2
 80201ae:	d1c1      	bne.n	8020134 <lv_draw_sw_arc+0xaf0>
 80201b0:	e527      	b.n	801fc02 <lv_draw_sw_arc+0x5be>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80201b2:	aa0f      	add	r2, sp, #60	; 0x3c
 80201b4:	a929      	add	r1, sp, #164	; 0xa4
 80201b6:	4620      	mov	r0, r4
                q->draw_ctx->clip_area = &quarter_area;
 80201b8:	f8c4 a008 	str.w	sl, [r4, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80201bc:	f7ff f8f3 	bl	801f3a6 <lv_draw_rect>
    q->draw_ctx->clip_area = clip_area_ori;
 80201c0:	e7e3      	b.n	802018a <lv_draw_sw_arc+0xb46>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 80201c2:	2e59      	cmp	r6, #89	; 0x59
 80201c4:	f67f adf8 	bls.w	801fdb8 <lv_draw_sw_arc+0x774>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 80201c8:	f1bb 0f01 	cmp.w	fp, #1
    q->draw_ctx->clip_area = clip_area_ori;
 80201cc:	f8c4 8008 	str.w	r8, [r4, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 80201d0:	f47f af00 	bne.w	801ffd4 <lv_draw_sw_arc+0x990>
 80201d4:	42b7      	cmp	r7, r6
 80201d6:	f67f ac1e 	bls.w	801fa16 <lv_draw_sw_arc+0x3d2>
        quarter_area.y1 = q->center->y - q->radius;
 80201da:	886b      	ldrh	r3, [r5, #2]
 80201dc:	9903      	ldr	r1, [sp, #12]
        quarter_area.x1 = q->center->x;
 80201de:	f9b5 2000 	ldrsh.w	r2, [r5]
        quarter_area.y1 = q->center->y - q->radius;
 80201e2:	1a59      	subs	r1, r3, r1
        quarter_area.y2 = q->center->y - 1;
 80201e4:	3b01      	subs	r3, #1
        quarter_area.x1 = q->center->x;
 80201e6:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
        quarter_area.y1 = q->center->y - q->radius;
 80201ea:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
        quarter_area.x2 = q->center->x + q->radius;
 80201ee:	9903      	ldr	r1, [sp, #12]
        quarter_area.y2 = q->center->y - 1;
 80201f0:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        quarter_area.x2 = q->center->x + q->radius;
 80201f4:	440a      	add	r2, r1
 80201f6:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80201fa:	e63a      	b.n	801fe72 <lv_draw_sw_arc+0x82e>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 80201fc:	f1bb 0f03 	cmp.w	fp, #3
 8020200:	f43f adda 	beq.w	801fdb8 <lv_draw_sw_arc+0x774>
 8020204:	e6cf      	b.n	801ffa6 <lv_draw_sw_arc+0x962>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 8020206:	f1bb 0f03 	cmp.w	fp, #3
 802020a:	f43f ad3a 	beq.w	801fc82 <lv_draw_sw_arc+0x63e>
 802020e:	e7c2      	b.n	8020196 <lv_draw_sw_arc+0xb52>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8020210:	f1b9 0f01 	cmp.w	r9, #1
 8020214:	e4e8      	b.n	801fbe8 <lv_draw_sw_arc+0x5a4>
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8020216:	aa0f      	add	r2, sp, #60	; 0x3c
 8020218:	a929      	add	r1, sp, #164	; 0xa4
 802021a:	4620      	mov	r0, r4
 802021c:	f7ff f8c3 	bl	801f3a6 <lv_draw_rect>
 8020220:	e6da      	b.n	801ffd8 <lv_draw_sw_arc+0x994>

08020222 <lv_color_mix>:
{
 8020222:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8020224:	f3c1 1345 	ubfx	r3, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8020228:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 802022c:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8020230:	f000 071f 	and.w	r7, r0, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8020234:	4373      	muls	r3, r6
 8020236:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 802023a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 802023e:	fb04 3302 	mla	r3, r4, r2, r3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8020242:	f001 041f 	and.w	r4, r1, #31
 8020246:	4374      	muls	r4, r6
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8020248:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 802024a:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 802024e:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8020250:	3480      	adds	r4, #128	; 0x80
    return ret;
 8020252:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8020256:	436c      	muls	r4, r5
    return ret;
 8020258:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 802025c:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8020260:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 8020264:	4373      	muls	r3, r6
 8020266:	fb00 3302 	mla	r3, r0, r2, r3
 802026a:	3380      	adds	r3, #128	; 0x80
 802026c:	436b      	muls	r3, r5
 802026e:	0ddb      	lsrs	r3, r3, #23
}
 8020270:	ea44 20c3 	orr.w	r0, r4, r3, lsl #11
 8020274:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020276 <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8020276:	460b      	mov	r3, r1

    if(opa <= LV_OPA_MIN) return bg;
 8020278:	2a02      	cmp	r2, #2
 802027a:	f000 0c1f 	and.w	ip, r0, #31
{
 802027e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020282:	f3c0 1e45 	ubfx	lr, r0, #5, #6
 8020286:	f3c0 28c4 	ubfx	r8, r0, #11, #5
 802028a:	f003 061f 	and.w	r6, r3, #31
 802028e:	f3c3 1545 	ubfx	r5, r3, #5, #6
 8020292:	f3c3 24c4 	ubfx	r4, r3, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 8020296:	d802      	bhi.n	802029e <color_blend_true_color_additive+0x28>
 8020298:	4608      	mov	r0, r1
#endif

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 802029a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = bg.ch.red + fg.ch.red;
 802029e:	eb04 0308 	add.w	r3, r4, r8
    tmp = bg.ch.green + fg.ch.green;
 80202a2:	eb05 040e 	add.w	r4, r5, lr
    tmp = bg.ch.blue + fg.ch.blue;
 80202a6:	eb06 050c 	add.w	r5, r6, ip
    fg.ch.red = LV_MIN(tmp, 31);
 80202aa:	2b1f      	cmp	r3, #31
 80202ac:	bf28      	it	cs
 80202ae:	231f      	movcs	r3, #31
    fg.ch.green = LV_MIN(tmp, 63);
 80202b0:	2c3f      	cmp	r4, #63	; 0x3f
 80202b2:	bf28      	it	cs
 80202b4:	243f      	movcs	r4, #63	; 0x3f
    fg.ch.blue = LV_MIN(tmp, 31);
 80202b6:	2d1f      	cmp	r5, #31
    fg.ch.red = LV_MIN(tmp, 31);
 80202b8:	f003 031f 	and.w	r3, r3, #31
    fg.ch.blue = LV_MIN(tmp, 31);
 80202bc:	bf28      	it	cs
 80202be:	251f      	movcs	r5, #31
    if(opa == LV_OPA_COVER) return fg;
 80202c0:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.green = LV_MIN(tmp, 63);
 80202c2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    fg.ch.blue = LV_MIN(tmp, 31);
 80202c6:	f005 051f 	and.w	r5, r5, #31
    if(opa == LV_OPA_COVER) return fg;
 80202ca:	d108      	bne.n	80202de <color_blend_true_color_additive+0x68>
 80202cc:	f04f 0000 	mov.w	r0, #0
 80202d0:	f365 0004 	bfi	r0, r5, #0, #5
 80202d4:	f364 104a 	bfi	r0, r4, #5, #6
 80202d8:	f363 20cf 	bfi	r0, r3, #11, #5
 80202dc:	e7dd      	b.n	802029a <color_blend_true_color_additive+0x24>
    return lv_color_mix(fg, bg, opa);
 80202de:	f365 0004 	bfi	r0, r5, #0, #5
 80202e2:	f364 104a 	bfi	r0, r4, #5, #6
}
 80202e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return lv_color_mix(fg, bg, opa);
 80202ea:	f363 20cf 	bfi	r0, r3, #11, #5
 80202ee:	f7ff bf98 	b.w	8020222 <lv_color_mix>

080202f2 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 80202f2:	460b      	mov	r3, r1
    if(opa <= LV_OPA_MIN) return bg;
 80202f4:	2a02      	cmp	r2, #2
 80202f6:	f000 0c1f 	and.w	ip, r0, #31
{
 80202fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202fe:	f3c0 1e45 	ubfx	lr, r0, #5, #6
 8020302:	f3c0 28c4 	ubfx	r8, r0, #11, #5
 8020306:	f003 061f 	and.w	r6, r3, #31
 802030a:	f3c3 1545 	ubfx	r5, r3, #5, #6
 802030e:	f3c3 24c4 	ubfx	r4, r3, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 8020312:	d802      	bhi.n	802031a <color_blend_true_color_subtractive+0x28>
 8020314:	4608      	mov	r0, r1
    fg.ch.blue = LV_MAX(tmp, 0);

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 8020316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = bg.ch.red - fg.ch.red;
 802031a:	eba4 0308 	sub.w	r3, r4, r8
    tmp = bg.ch.green - fg.ch.green;
 802031e:	eba5 040e 	sub.w	r4, r5, lr
    tmp = bg.ch.blue - fg.ch.blue;
 8020322:	eba6 050c 	sub.w	r5, r6, ip
    if(opa == LV_OPA_COVER) return fg;
 8020326:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.red = LV_MAX(tmp, 0);
 8020328:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fg.ch.green = LV_MAX(tmp, 0);
 802032c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    fg.ch.blue = LV_MAX(tmp, 0);
 8020330:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    fg.ch.red = LV_MAX(tmp, 0);
 8020334:	f003 031f 	and.w	r3, r3, #31
    fg.ch.green = LV_MAX(tmp, 0);
 8020338:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    fg.ch.blue = LV_MAX(tmp, 0);
 802033c:	f005 051f 	and.w	r5, r5, #31
    if(opa == LV_OPA_COVER) return fg;
 8020340:	d108      	bne.n	8020354 <color_blend_true_color_subtractive+0x62>
 8020342:	f04f 0000 	mov.w	r0, #0
 8020346:	f365 0004 	bfi	r0, r5, #0, #5
 802034a:	f364 104a 	bfi	r0, r4, #5, #6
 802034e:	f363 20cf 	bfi	r0, r3, #11, #5
 8020352:	e7e0      	b.n	8020316 <color_blend_true_color_subtractive+0x24>
    return lv_color_mix(fg, bg, opa);
 8020354:	f365 0004 	bfi	r0, r5, #0, #5
 8020358:	f364 104a 	bfi	r0, r4, #5, #6
}
 802035c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return lv_color_mix(fg, bg, opa);
 8020360:	f363 20cf 	bfi	r0, r3, #11, #5
 8020364:	f7ff bf5d 	b.w	8020222 <lv_color_mix>

08020368 <color_blend_true_color_multiply>:

static inline lv_color_t color_blend_true_color_multiply(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8020368:	460b      	mov	r3, r1
    if(opa <= LV_OPA_MIN) return bg;
 802036a:	2a02      	cmp	r2, #2
{
 802036c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020370:	f3c3 1c45 	ubfx	ip, r3, #5, #6
 8020374:	f000 061f 	and.w	r6, r0, #31
 8020378:	f3c0 1545 	ubfx	r5, r0, #5, #6
 802037c:	f3c0 24c4 	ubfx	r4, r0, #11, #5
 8020380:	f003 0e1f 	and.w	lr, r3, #31
 8020384:	f3c3 28c4 	ubfx	r8, r3, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 8020388:	d802      	bhi.n	8020390 <color_blend_true_color_multiply+0x28>
 802038a:	4608      	mov	r0, r1
#endif

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 802038c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 5;
 8020390:	fb14 f308 	smulbb	r3, r4, r8
    if(opa == LV_OPA_COVER) return fg;
 8020394:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 5;
 8020396:	fb16 f60e 	smulbb	r6, r6, lr
    LV_COLOR_SET_G(fg, (LV_COLOR_GET_G(fg) * LV_COLOR_GET_G(bg)) >> 6);
 802039a:	fb15 f40c 	smulbb	r4, r5, ip
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 5;
 802039e:	ea4f 1353 	mov.w	r3, r3, lsr #5
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 5;
 80203a2:	ea4f 1656 	mov.w	r6, r6, lsr #5
    LV_COLOR_SET_G(fg, (LV_COLOR_GET_G(fg) * LV_COLOR_GET_G(bg)) >> 6);
 80203a6:	ea4f 1494 	mov.w	r4, r4, lsr #6
    if(opa == LV_OPA_COVER) return fg;
 80203aa:	d108      	bne.n	80203be <color_blend_true_color_multiply+0x56>
 80203ac:	f04f 0000 	mov.w	r0, #0
 80203b0:	f366 0004 	bfi	r0, r6, #0, #5
 80203b4:	f364 104a 	bfi	r0, r4, #5, #6
 80203b8:	f363 20cf 	bfi	r0, r3, #11, #5
 80203bc:	e7e6      	b.n	802038c <color_blend_true_color_multiply+0x24>
    return lv_color_mix(fg, bg, opa);
 80203be:	f366 0004 	bfi	r0, r6, #0, #5
 80203c2:	f364 104a 	bfi	r0, r4, #5, #6
}
 80203c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return lv_color_mix(fg, bg, opa);
 80203ca:	f363 20cf 	bfi	r0, r3, #11, #5
 80203ce:	f7ff bf28 	b.w	8020222 <lv_color_mix>

080203d2 <lv_draw_sw_blend>:
{
 80203d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if(dsc->opa <= LV_OPA_MIN) return;
 80203d4:	7e0b      	ldrb	r3, [r1, #24]
{
 80203d6:	4604      	mov	r4, r0
 80203d8:	460d      	mov	r5, r1
    if(dsc->opa <= LV_OPA_MIN) return;
 80203da:	2b02      	cmp	r3, #2
 80203dc:	d90d      	bls.n	80203fa <lv_draw_sw_blend+0x28>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80203de:	6882      	ldr	r2, [r0, #8]
 80203e0:	4668      	mov	r0, sp
 80203e2:	6809      	ldr	r1, [r1, #0]
 80203e4:	f003 ff45 	bl	8024272 <_lv_area_intersect>
 80203e8:	b138      	cbz	r0, 80203fa <lv_draw_sw_blend+0x28>
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 80203ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80203ec:	b10b      	cbz	r3, 80203f2 <lv_draw_sw_blend+0x20>
 80203ee:	4620      	mov	r0, r4
 80203f0:	4798      	blx	r3
    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 80203f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80203f4:	4629      	mov	r1, r5
 80203f6:	4620      	mov	r0, r4
 80203f8:	4798      	blx	r3
}
 80203fa:	b003      	add	sp, #12
 80203fc:	bd30      	pop	{r4, r5, pc}

080203fe <lv_color_to32>:
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 80203fe:	f240 1107 	movw	r1, #263	; 0x107
 8020402:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8020406:	2200      	movs	r2, #0
 8020408:	434b      	muls	r3, r1
 802040a:	3307      	adds	r3, #7
 802040c:	115b      	asrs	r3, r3, #5
{
 802040e:	b510      	push	{r4, lr}
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8020410:	f363 4217 	bfi	r2, r3, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8020414:	f240 1403 	movw	r4, #259	; 0x103
 8020418:	f3c0 1345 	ubfx	r3, r0, #5, #6
 802041c:	4363      	muls	r3, r4
 802041e:	3303      	adds	r3, #3
 8020420:	119b      	asrs	r3, r3, #6
 8020422:	f363 220f 	bfi	r2, r3, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8020426:	f000 031f 	and.w	r3, r0, #31
 802042a:	434b      	muls	r3, r1
 802042c:	3307      	adds	r3, #7
 802042e:	115b      	asrs	r3, r3, #5
 8020430:	f363 0207 	bfi	r2, r3, #0, #8
}
 8020434:	f042 407f 	orr.w	r0, r2, #4278190080	; 0xff000000
 8020438:	bd10      	pop	{r4, pc}

0802043a <find_oldest_item_life>:
    if(c->life < *min_life) *min_life = c->life;
 802043a:	6843      	ldr	r3, [r0, #4]
}
 802043c:	2000      	movs	r0, #0
    if(c->life < *min_life) *min_life = c->life;
 802043e:	680a      	ldr	r2, [r1, #0]
 8020440:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8020444:	4293      	cmp	r3, r2
 8020446:	bf38      	it	cc
 8020448:	600b      	strcc	r3, [r1, #0]
}
 802044a:	4770      	bx	lr

0802044c <find_item>:
    if(c->key == *k) return LV_RES_OK;
 802044c:	6800      	ldr	r0, [r0, #0]
 802044e:	680b      	ldr	r3, [r1, #0]
}
 8020450:	1ac3      	subs	r3, r0, r3
 8020452:	4258      	negs	r0, r3
 8020454:	4158      	adcs	r0, r3
 8020456:	4770      	bx	lr

08020458 <lv_gradient_calculate>:

LV_ATTRIBUTE_FAST_MEM lv_grad_color_t lv_gradient_calculate(const lv_grad_dsc_t * dsc, lv_coord_t range,
                                                            lv_coord_t frac)
{
 8020458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_grad_color_t tmp;
    lv_color32_t one, two;
    /*Clip out-of-bounds first*/
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 802045c:	7883      	ldrb	r3, [r0, #2]
{
 802045e:	4606      	mov	r6, r0
 8020460:	4615      	mov	r5, r2
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 8020462:	fb13 f301 	smulbb	r3, r3, r1
    if(frac <= min) {
 8020466:	ebb2 2f23 	cmp.w	r2, r3, asr #8
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 802046a:	ea4f 2723 	mov.w	r7, r3, asr #8
    if(frac <= min) {
 802046e:	dc0d      	bgt.n	802048c <lv_gradient_calculate+0x34>
        GRAD_CONV(tmp, dsc->stops[0].color);
 8020470:	7801      	ldrb	r1, [r0, #0]
 8020472:	8805      	ldrh	r5, [r0, #0]
 8020474:	f001 011f 	and.w	r1, r1, #31
 8020478:	7843      	ldrb	r3, [r0, #1]
 802047a:	f3c5 1545 	ubfx	r5, r5, #5, #6
        return tmp;
    }

    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
    if(frac >= max) {
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 802047e:	08db      	lsrs	r3, r3, #3
        return tmp;
 8020480:	ea41 1045 	orr.w	r0, r1, r5, lsl #5

    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
                                LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
                                LV_UDIV255(two.ch.blue * mix  + one.ch.blue * imix));
    return r;
}
 8020484:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8020488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 802048c:	7a00      	ldrb	r0, [r0, #8]
 802048e:	1e43      	subs	r3, r0, #1
 8020490:	eb06 0483 	add.w	r4, r6, r3, lsl #2
 8020494:	78a2      	ldrb	r2, [r4, #2]
 8020496:	fb12 f201 	smulbb	r2, r2, r1
    if(frac >= max) {
 802049a:	ebb5 2f22 	cmp.w	r5, r2, asr #8
 802049e:	da0a      	bge.n	80204b6 <lv_gradient_calculate+0x5e>
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 80204a0:	2801      	cmp	r0, #1
 80204a2:	d907      	bls.n	80204b4 <lv_gradient_calculate+0x5c>
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 80204a4:	79b3      	ldrb	r3, [r6, #6]
 80204a6:	fb13 f301 	smulbb	r3, r3, r1
        if(frac <= cur) {
 80204aa:	ebb5 2f23 	cmp.w	r5, r3, asr #8
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 80204ae:	ea4f 2823 	mov.w	r8, r3, asr #8
        if(frac <= cur) {
 80204b2:	dd0a      	ble.n	80204ca <lv_gradient_calculate+0x72>
    LV_ASSERT(d != 0);
 80204b4:	e7fe      	b.n	80204b4 <lv_gradient_calculate+0x5c>
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 80204b6:	f816 1023 	ldrb.w	r1, [r6, r3, lsl #2]
 80204ba:	f836 5023 	ldrh.w	r5, [r6, r3, lsl #2]
 80204be:	f001 011f 	and.w	r1, r1, #31
 80204c2:	7863      	ldrb	r3, [r4, #1]
 80204c4:	f3c5 1545 	ubfx	r5, r5, #5, #6
 80204c8:	e7d9      	b.n	802047e <lv_gradient_calculate+0x26>
            one.full = lv_color_to32(dsc->stops[i - 1].color);
 80204ca:	8830      	ldrh	r0, [r6, #0]
            d = max - min;
 80204cc:	eba8 0807 	sub.w	r8, r8, r7
            one.full = lv_color_to32(dsc->stops[i - 1].color);
 80204d0:	f7ff ff95 	bl	80203fe <lv_color_to32>
 80204d4:	4604      	mov	r4, r0
            two.full = lv_color_to32(dsc->stops[i].color);
 80204d6:	88b0      	ldrh	r0, [r6, #4]
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 80204d8:	f248 0681 	movw	r6, #32897	; 0x8081
            two.full = lv_color_to32(dsc->stops[i].color);
 80204dc:	f7ff ff8f 	bl	80203fe <lv_color_to32>
    frac -= min;
 80204e0:	1bea      	subs	r2, r5, r7
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 80204e2:	b2e1      	uxtb	r1, r4
 80204e4:	f3c4 2507 	ubfx	r5, r4, #8, #8
    lv_opa_t mix = (frac * 255) / d;
 80204e8:	b212      	sxth	r2, r2
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 80204ea:	b2c3      	uxtb	r3, r0
    lv_opa_t mix = (frac * 255) / d;
 80204ec:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80204f0:	fb92 f2f8 	sdiv	r2, r2, r8
    lv_opa_t imix = 255 - mix;
 80204f4:	43d7      	mvns	r7, r2
 80204f6:	b2d2      	uxtb	r2, r2
 80204f8:	b2ff      	uxtb	r7, r7
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 80204fa:	fb15 f507 	smulbb	r5, r5, r7
 80204fe:	4379      	muls	r1, r7
 8020500:	fb02 1103 	mla	r1, r2, r3, r1
 8020504:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8020508:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802050c:	fb02 5503 	mla	r5, r2, r3, r5
 8020510:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8020514:	4371      	muls	r1, r6
 8020516:	fb13 f307 	smulbb	r3, r3, r7
 802051a:	4375      	muls	r5, r6
 802051c:	f3c1 6184 	ubfx	r1, r1, #26, #5
 8020520:	fb02 3300 	mla	r3, r2, r0, r3
 8020524:	f3c5 6545 	ubfx	r5, r5, #25, #6
 8020528:	4373      	muls	r3, r6
 802052a:	f3c3 6384 	ubfx	r3, r3, #26, #5
    return r;
 802052e:	e7a7      	b.n	8020480 <lv_gradient_calculate+0x28>

08020530 <lv_gradient_cleanup>:

void lv_gradient_cleanup(lv_grad_t * grad)
{
    if(grad->not_cached) {
 8020530:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8020534:	2b00      	cmp	r3, #0
 8020536:	da01      	bge.n	802053c <lv_gradient_cleanup+0xc>
        lv_mem_free(grad);
 8020538:	f7f2 b8d8 	b.w	80126ec <lv_mem_free>
    }
}
 802053c:	4770      	bx	lr

0802053e <lv_draw_sw_img_decoded>:
 **********************/


LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 802053e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020542:	b0a5      	sub	sp, #148	; 0x94
 8020544:	4614      	mov	r4, r2
 8020546:	460d      	mov	r5, r1
 8020548:	9309      	str	r3, [sp, #36]	; 0x24
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);
 802054a:	6883      	ldr	r3, [r0, #8]
{
 802054c:	900b      	str	r0, [sp, #44]	; 0x2c

    bool mask_any = lv_draw_mask_is_any(&draw_area);
 802054e:	a817      	add	r0, sp, #92	; 0x5c
    dest->x1 = src->x1;
 8020550:	f9b3 2000 	ldrsh.w	r2, [r3]
{
 8020554:	f89d 60b8 	ldrb.w	r6, [sp, #184]	; 0xb8
 8020558:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    dest->y1 = src->y1;
 802055c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020560:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
    dest->x2 = src->x2;
 8020564:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    dest->y2 = src->y2;
 8020568:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    dest->x2 = src->x2;
 802056c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    dest->y2 = src->y2;
 8020570:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    bool mask_any = lv_draw_mask_is_any(&draw_area);
 8020574:	f7e7 fed2 	bl	800831c <lv_draw_mask_is_any>
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 8020578:	682b      	ldr	r3, [r5, #0]
    memset(dst, 0x00, len);
 802057a:	221c      	movs	r2, #28
    bool mask_any = lv_draw_mask_is_any(&draw_area);
 802057c:	900d      	str	r0, [sp, #52]	; 0x34
 802057e:	2100      	movs	r1, #0
 8020580:	a81d      	add	r0, sp, #116	; 0x74
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 8020582:	930e      	str	r3, [sp, #56]	; 0x38
 8020584:	f7fa f8cc 	bl	801a720 <memset>

    lv_area_t blend_area;
    lv_draw_sw_blend_dsc_t blend_dsc;

    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
    blend_dsc.opa = draw_dsc->opa;
 8020588:	7aeb      	ldrb	r3, [r5, #11]
 802058a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 802058e:	7b2b      	ldrb	r3, [r5, #12]
 8020590:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8020594:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
    blend_dsc.blend_area = &blend_area;
 8020598:	ab19      	add	r3, sp, #100	; 0x64
 802059a:	931d      	str	r3, [sp, #116]	; 0x74

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 802059c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802059e:	2b00      	cmp	r3, #0
 80205a0:	d143      	bne.n	802062a <lv_draw_sw_img_decoded+0xec>
 80205a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80205a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80205a8:	d13f      	bne.n	802062a <lv_draw_sw_img_decoded+0xec>
 80205aa:	2e04      	cmp	r6, #4
 80205ac:	d10c      	bne.n	80205c8 <lv_draw_sw_img_decoded+0x8a>
 80205ae:	7aab      	ldrb	r3, [r5, #10]
 80205b0:	2b00      	cmp	r3, #0
 80205b2:	d13a      	bne.n	802062a <lv_draw_sw_img_decoded+0xec>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 80205b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205b6:	931e      	str	r3, [sp, #120]	; 0x78
        blend_dsc.mask_area = coords;
        blend_dsc.src_buf = NULL;
        blend_dsc.color = draw_dsc->recolor;
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;

        blend_dsc.blend_area = coords;
 80205b8:	941d      	str	r4, [sp, #116]	; 0x74
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
        blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
        blend_dsc.blend_area = coords;
        blend_dsc.mask_area = coords;
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80205ba:	a91d      	add	r1, sp, #116	; 0x74
 80205bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80205be:	f7ff ff08 	bl	80203d2 <lv_draw_sw_blend>
        }

        lv_mem_buf_release(mask_buf);
        lv_mem_buf_release(rgb_buf);
    }
}
 80205c2:	b025      	add	sp, #148	; 0x94
 80205c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 80205c8:	2e0e      	cmp	r6, #14
 80205ca:	d113      	bne.n	80205f4 <lv_draw_sw_img_decoded+0xb6>
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 80205cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80205ce:	4621      	mov	r1, r4
 80205d0:	a81b      	add	r0, sp, #108	; 0x6c
 80205d2:	689a      	ldr	r2, [r3, #8]
 80205d4:	f003 fe4d 	bl	8024272 <_lv_area_intersect>
 80205d8:	2800      	cmp	r0, #0
 80205da:	d0f2      	beq.n	80205c2 <lv_draw_sw_img_decoded+0x84>
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 80205dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
        blend_dsc.mask_area = coords;
 80205de:	9422      	str	r4, [sp, #136]	; 0x88
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 80205e0:	9320      	str	r3, [sp, #128]	; 0x80
        blend_dsc.src_buf = NULL;
 80205e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80205e4:	931e      	str	r3, [sp, #120]	; 0x78
        blend_dsc.color = draw_dsc->recolor;
 80205e6:	892b      	ldrh	r3, [r5, #8]
 80205e8:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80205ec:	2302      	movs	r3, #2
 80205ee:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80205f2:	e7e1      	b.n	80205b8 <lv_draw_sw_img_decoded+0x7a>
    else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 80205f4:	2e14      	cmp	r6, #20
 80205f6:	d118      	bne.n	802062a <lv_draw_sw_img_decoded+0xec>
 80205f8:	7aab      	ldrb	r3, [r5, #10]
 80205fa:	b9b3      	cbnz	r3, 802062a <lv_draw_sw_img_decoded+0xec>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80205fc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020600:	88a2      	ldrh	r2, [r4, #4]
 8020602:	8820      	ldrh	r0, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020604:	3301      	adds	r3, #1
 8020606:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802060a:	3201      	adds	r2, #1
        blend_dsc.blend_area = coords;
 802060c:	941d      	str	r4, [sp, #116]	; 0x74
 802060e:	1a12      	subs	r2, r2, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020610:	1a5b      	subs	r3, r3, r1
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 8020612:	9809      	ldr	r0, [sp, #36]	; 0x24
        blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
 8020614:	fb13 f302 	smulbb	r3, r3, r2
        blend_dsc.mask_area = coords;
 8020618:	9422      	str	r4, [sp, #136]	; 0x88
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 802061a:	901e      	str	r0, [sp, #120]	; 0x78
        blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
 802061c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020620:	9320      	str	r3, [sp, #128]	; 0x80
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8020622:	2302      	movs	r3, #2
 8020624:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8020628:	e7c7      	b.n	80205ba <lv_draw_sw_img_decoded+0x7c>
        blend_area.x1 = draw_ctx->clip_area->x1;
 802062a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802062c:	8820      	ldrh	r0, [r4, #0]
 802062e:	689a      	ldr	r2, [r3, #8]
        blend_area.x2 = draw_ctx->clip_area->x2;
 8020630:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
        blend_area.x1 = draw_ctx->clip_area->x1;
 8020634:	f9b2 1000 	ldrsh.w	r1, [r2]
        blend_area.y2 = draw_ctx->clip_area->y2;
 8020638:	f9b2 8006 	ldrsh.w	r8, [r2, #6]
        blend_area.x2 = draw_ctx->clip_area->x2;
 802063c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 8020640:	3301      	adds	r3, #1
        blend_area.y1 = draw_ctx->clip_area->y1;
 8020642:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8020646:	88a2      	ldrh	r2, [r4, #4]
 8020648:	1a5b      	subs	r3, r3, r1
        blend_area.x1 = draw_ctx->clip_area->x1;
 802064a:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
 802064e:	1a12      	subs	r2, r2, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020650:	8860      	ldrh	r0, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020652:	b21b      	sxth	r3, r3
        blend_area.y2 = draw_ctx->clip_area->y2;
 8020654:	f8ad 806a 	strh.w	r8, [sp, #106]	; 0x6a
 8020658:	b292      	uxth	r2, r2
        blend_area.y1 = draw_ctx->clip_area->y1;
 802065a:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
 802065e:	930c      	str	r3, [sp, #48]	; 0x30
 8020660:	9211      	str	r2, [sp, #68]	; 0x44
 8020662:	3201      	adds	r2, #1
 8020664:	b212      	sxth	r2, r2
 8020666:	9207      	str	r2, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020668:	88e2      	ldrh	r2, [r4, #6]
 802066a:	3201      	adds	r2, #1
 802066c:	1a12      	subs	r2, r2, r0
 802066e:	b212      	sxth	r2, r2
 8020670:	9210      	str	r2, [sp, #64]	; 0x40
        uint32_t max_buf_size = MAX_BUF_SIZE;
 8020672:	f7e6 fdc7 	bl	8007204 <_lv_refr_get_disp_refreshing>
 8020676:	f7f1 fd0f 	bl	8012098 <lv_disp_get_hor_res>
 802067a:	4607      	mov	r7, r0
        uint32_t blend_size = lv_area_get_size(&blend_area);
 802067c:	a819      	add	r0, sp, #100	; 0x64
 802067e:	f003 fdca 	bl	8024216 <lv_area_get_size>
        if(blend_size <= max_buf_size) {
 8020682:	4287      	cmp	r7, r0
 8020684:	bf2b      	itete	cs
 8020686:	f108 0801 	addcs.w	r8, r8, #1
            buf_h = max_buf_size / blend_w;
 802068a:	9b0c      	ldrcc	r3, [sp, #48]	; 0x30
 802068c:	eba8 0809 	subcs.w	r8, r8, r9
 8020690:	fbb7 f7f3 	udivcc	r7, r7, r3
            buf_h = blend_h;
 8020694:	bf28      	it	cs
 8020696:	fa0f f788 	sxthcs.w	r7, r8
        uint32_t buf_size = buf_w * buf_h;
 802069a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802069c:	fb03 f907 	mul.w	r9, r3, r7
        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 80206a0:	ea4f 0849 	mov.w	r8, r9, lsl #1
 80206a4:	4640      	mov	r0, r8
 80206a6:	f7f2 f853 	bl	8012750 <lv_mem_buf_get>
 80206aa:	9008      	str	r0, [sp, #32]
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 80206ac:	4648      	mov	r0, r9
 80206ae:	f7f2 f84f 	bl	8012750 <lv_mem_buf_get>
        blend_dsc.mask_area = &blend_area;
 80206b2:	ab19      	add	r3, sp, #100	; 0x64
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 80206b4:	2e04      	cmp	r6, #4
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 80206b6:	900a      	str	r0, [sp, #40]	; 0x28
        blend_dsc.mask_area = &blend_area;
 80206b8:	9322      	str	r3, [sp, #136]	; 0x88
        blend_dsc.src_buf = rgb_buf;
 80206ba:	9b08      	ldr	r3, [sp, #32]
        blend_dsc.mask_buf = mask_buf;
 80206bc:	9020      	str	r0, [sp, #128]	; 0x80
        blend_dsc.src_buf = rgb_buf;
 80206be:	931e      	str	r3, [sp, #120]	; 0x78
        lv_coord_t y_last = blend_area.y2;
 80206c0:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 80206c4:	930f      	str	r3, [sp, #60]	; 0x3c
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 80206c6:	b2bb      	uxth	r3, r7
 80206c8:	9312      	str	r3, [sp, #72]	; 0x48
 80206ca:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 80206ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80206d2:	fa13 f787 	uxtah	r7, r3, r7
 80206d6:	f8ad 706a 	strh.w	r7, [sp, #106]	; 0x6a
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 80206da:	d116      	bne.n	802070a <lv_draw_sw_img_decoded+0x1cc>
 80206dc:	682b      	ldr	r3, [r5, #0]
 80206de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80206e2:	bf0c      	ite	eq
 80206e4:	2301      	moveq	r3, #1
 80206e6:	2302      	movne	r3, #2
        blend_dsc.mask_res = mask_res_def;
 80206e8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
        while(blend_area.y1 <= y_last) {
 80206ec:	9b08      	ldr	r3, [sp, #32]
 80206ee:	4443      	add	r3, r8
 80206f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80206f2:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 80206f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80206f8:	4293      	cmp	r3, r2
 80206fa:	dd08      	ble.n	802070e <lv_draw_sw_img_decoded+0x1d0>
        lv_mem_buf_release(mask_buf);
 80206fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80206fe:	f7f2 f871 	bl	80127e4 <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 8020702:	9808      	ldr	r0, [sp, #32]
 8020704:	f7f2 f86e 	bl	80127e4 <lv_mem_buf_release>
 8020708:	e75b      	b.n	80205c2 <lv_draw_sw_img_decoded+0x84>
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 802070a:	2302      	movs	r3, #2
 802070c:	e7ec      	b.n	80206e8 <lv_draw_sw_img_decoded+0x1aa>
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 802070e:	8862      	ldrh	r2, [r4, #2]
 8020710:	a81b      	add	r0, sp, #108	; 0x6c
 8020712:	8821      	ldrh	r1, [r4, #0]
    dest->x1 = src->x1;
 8020714:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020716:	4252      	negs	r2, r2
 8020718:	4249      	negs	r1, r1
 802071a:	931b      	str	r3, [sp, #108]	; 0x6c
 802071c:	b212      	sxth	r2, r2
    dest->x2 = src->x2;
 802071e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020720:	b209      	sxth	r1, r1
 8020722:	931c      	str	r3, [sp, #112]	; 0x70
 8020724:	f003 fd94 	bl	8024250 <lv_area_move>
            if(transform) {
 8020728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802072a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802072e:	d033      	beq.n	8020798 <lv_draw_sw_img_decoded+0x25a>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 8020730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020732:	a91b      	add	r1, sp, #108	; 0x6c
 8020734:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020736:	9305      	str	r3, [sp, #20]
 8020738:	9b08      	ldr	r3, [sp, #32]
 802073a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802073c:	9502      	str	r5, [sp, #8]
 802073e:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8020742:	9b07      	ldr	r3, [sp, #28]
 8020744:	9301      	str	r3, [sp, #4]
 8020746:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020748:	9300      	str	r3, [sp, #0]
 802074a:	9b07      	ldr	r3, [sp, #28]
 802074c:	f7fe fe3f 	bl	801f3ce <lv_draw_transform>
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 8020750:	7aaa      	ldrb	r2, [r5, #10]
 8020752:	2a02      	cmp	r2, #2
 8020754:	f200 80ff 	bhi.w	8020956 <lv_draw_sw_img_decoded+0x418>
            if(mask_any) {
 8020758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802075a:	b153      	cbz	r3, 8020772 <lv_draw_sw_img_decoded+0x234>
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 802075c:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	; 0x66
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8020760:	f04f 0902 	mov.w	r9, #2
                lv_opa_t * mask_buf_tmp = mask_buf;
 8020764:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 8020768:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 802076c:	42bb      	cmp	r3, r7
 802076e:	f280 812c 	bge.w	80209ca <lv_draw_sw_img_decoded+0x48c>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8020772:	a91d      	add	r1, sp, #116	; 0x74
 8020774:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020776:	f7ff fe2c 	bl	80203d2 <lv_draw_sw_blend>
            blend_area.y1 = blend_area.y2 + 1;
 802077a:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 802077e:	1c5a      	adds	r2, r3, #1
 8020780:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 8020784:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020786:	4413      	add	r3, r2
 8020788:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802078a:	b21b      	sxth	r3, r3
 802078c:	4293      	cmp	r3, r2
 802078e:	bfa8      	it	ge
 8020790:	4613      	movge	r3, r2
 8020792:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 8020796:	e7ac      	b.n	80206f2 <lv_draw_sw_img_decoded+0x1b4>

    const uint8_t * src_tmp8 = (const uint8_t *)src_buf;
    lv_coord_t y;
    lv_coord_t x;

    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8020798:	2e06      	cmp	r6, #6
 802079a:	d07c      	beq.n	8020896 <lv_draw_sw_img_decoded+0x358>
 802079c:	d833      	bhi.n	8020806 <lv_draw_sw_img_decoded+0x2c8>
 802079e:	2e04      	cmp	r6, #4
 80207a0:	d079      	beq.n	8020896 <lv_draw_sw_img_decoded+0x358>
 80207a2:	2e05      	cmp	r6, #5
 80207a4:	d1d4      	bne.n	8020750 <lv_draw_sw_img_decoded+0x212>
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
            }
        }
    }
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80207a6:	f9bd 706e 	ldrsh.w	r7, [sp, #110]	; 0x6e
        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;

        lv_coord_t dest_h = lv_area_get_height(dest_area);
        lv_coord_t dest_w = lv_area_get_width(dest_area);
        for(y = 0; y < dest_h; y++) {
 80207aa:	f04f 0c00 	mov.w	ip, #0
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80207ae:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 80207b2:	9a07      	ldr	r2, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80207b4:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 80207b8:	fb02 3107 	mla	r1, r2, r7, r3
 80207bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80207be:	b29b      	uxth	r3, r3
        for(y = 0; y < dest_h; y++) {
 80207c0:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80207c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
        for(y = 0; y < dest_h; y++) {
 80207c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80207cc:	4411      	add	r1, r2
 80207ce:	1c42      	adds	r2, r0, #1
 80207d0:	1ad2      	subs	r2, r2, r3
        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 80207d2:	1a1b      	subs	r3, r3, r0
 80207d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80207d6:	b212      	sxth	r2, r2
 80207d8:	4403      	add	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80207da:	f8bd 0072 	ldrh.w	r0, [sp, #114]	; 0x72
                cbuf[x].ch.alpha = 0xff;
#endif
                src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;

            }
            cbuf += dest_w;
 80207de:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 80207e2:	3001      	adds	r0, #1
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80207e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207e8:	1bc0      	subs	r0, r0, r7
 80207ea:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
 80207ee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80207f2:	b200      	sxth	r0, r0
            abuf += dest_w;
            src_tmp8 += src_new_line_step_byte;
 80207f4:	fa07 f383 	sxtah	r3, r7, r3
        for(y = 0; y < dest_h; y++) {
 80207f8:	fa0f f78c 	sxth.w	r7, ip
 80207fc:	42b8      	cmp	r0, r7
 80207fe:	dda7      	ble.n	8020750 <lv_draw_sw_img_decoded+0x212>
 8020800:	4689      	mov	r9, r1
 8020802:	2700      	movs	r7, #0
 8020804:	e091      	b.n	802092a <lv_draw_sw_img_decoded+0x3ec>
 8020806:	2e14      	cmp	r6, #20
 8020808:	d1a2      	bne.n	8020750 <lv_draw_sw_img_decoded+0x212>
        }
    }
    else if(cf == LV_IMG_CF_RGB565A8) {
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 802080a:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);

        lv_coord_t dest_h = lv_area_get_height(dest_area);
        lv_coord_t dest_w = lv_area_get_width(dest_area);
        for(y = 0; y < dest_h; y++) {
 802080e:	f04f 0900 	mov.w	r9, #0
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 8020812:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8020816:	9907      	ldr	r1, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020818:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 802081c:	fb01 3102 	mla	r1, r1, r2, r3
 8020820:	9809      	ldr	r0, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020822:	f8bd 8072 	ldrh.w	r8, [sp, #114]	; 0x72
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020826:	3701      	adds	r7, #1
 8020828:	eb00 0141 	add.w	r1, r0, r1, lsl #1
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 802082c:	9807      	ldr	r0, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802082e:	f108 0801 	add.w	r8, r8, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020832:	1aff      	subs	r7, r7, r3
 8020834:	ea4f 0a40 	mov.w	sl, r0, lsl #1
        for(y = 0; y < dest_h; y++) {
 8020838:	f8dd b020 	ldr.w	fp, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802083c:	eba8 0802 	sub.w	r8, r8, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020840:	b23f      	sxth	r7, r7
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 8020842:	fa0f fa8a 	sxth.w	sl, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020846:	fa0f f888 	sxth.w	r8, r8
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 802084a:	007a      	lsls	r2, r7, #1
        for(y = 0; y < dest_h; y++) {
 802084c:	fa0f f389 	sxth.w	r3, r9
 8020850:	4543      	cmp	r3, r8
 8020852:	db74      	blt.n	802093e <lv_draw_sw_img_decoded+0x400>
            src_tmp8 += src_stride_byte;
        }

        src_tmp8 = (const uint8_t *)src_buf;
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 8020854:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
        for(y = 0; y < dest_h; y++) {
 8020858:	f04f 0900 	mov.w	r9, #0
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 802085c:	9a07      	ldr	r2, [sp, #28]
 802085e:	f8bd b06e 	ldrh.w	fp, [sp, #110]	; 0x6e
        for(y = 0; y < dest_h; y++) {
 8020862:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 8020866:	fb12 3b0b 	smlabb	fp, r2, fp, r3
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 802086a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802086c:	4353      	muls	r3, r2
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 802086e:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8020872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020874:	449b      	add	fp, r3
        for(y = 0; y < dest_h; y++) {
 8020876:	fa0f f389 	sxth.w	r3, r9
 802087a:	4543      	cmp	r3, r8
 802087c:	f6bf af68 	bge.w	8020750 <lv_draw_sw_img_decoded+0x212>
    return memcpy(dst, src, len);
 8020880:	4659      	mov	r1, fp
 8020882:	4650      	mov	r0, sl
 8020884:	463a      	mov	r2, r7
            lv_memcpy(abuf, src_tmp8, dest_w);
            abuf += dest_w;
 8020886:	44ba      	add	sl, r7
 8020888:	f7f9 ff3f 	bl	801a70a <memcpy>
            src_tmp8 += src_stride;
 802088c:	9b07      	ldr	r3, [sp, #28]
 802088e:	f109 0901 	add.w	r9, r9, #1
 8020892:	449b      	add	fp, r3
        for(y = 0; y < dest_h; y++) {
 8020894:	e7ef      	b.n	8020876 <lv_draw_sw_img_decoded+0x338>
        uint32_t px_cnt = lv_area_get_size(dest_area);
 8020896:	a81b      	add	r0, sp, #108	; 0x6c
 8020898:	f003 fcbd 	bl	8024216 <lv_area_get_size>
    memset(dst, 0xFF, len);
 802089c:	21ff      	movs	r1, #255	; 0xff
 802089e:	4602      	mov	r2, r0
 80208a0:	4680      	mov	r8, r0
 80208a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80208a4:	f7f9 ff3c 	bl	801a720 <memset>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 80208a8:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 80208ac:	9a07      	ldr	r2, [sp, #28]
 80208ae:	f9bd 706e 	ldrsh.w	r7, [sp, #110]	; 0x6e
        lv_color_t * cbuf_tmp = cbuf;
 80208b2:	f8dd a020 	ldr.w	sl, [sp, #32]
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 80208b6:	fb02 3b07 	mla	fp, r2, r7, r3
 80208ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80208bc:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80208c0:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 80208c4:	3201      	adds	r2, #1
 80208c6:	1ad2      	subs	r2, r2, r3
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 80208c8:	9b07      	ldr	r3, [sp, #28]
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 80208ca:	b212      	sxth	r2, r2
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 80208cc:	ea4f 0943 	mov.w	r9, r3, lsl #1
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 80208d0:	0052      	lsls	r2, r2, #1
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 80208d2:	fa0f f989 	sxth.w	r9, r9
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80208d6:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 80208da:	42bb      	cmp	r3, r7
 80208dc:	da05      	bge.n	80208ea <lv_draw_sw_img_decoded+0x3ac>
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80208de:	2e06      	cmp	r6, #6
 80208e0:	f47f af36 	bne.w	8020750 <lv_draw_sw_img_decoded+0x212>
            for(i = 0; i < px_cnt; i++) {
 80208e4:	2300      	movs	r3, #0
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 80208e6:	461a      	mov	r2, r3
 80208e8:	e013      	b.n	8020912 <lv_draw_sw_img_decoded+0x3d4>
    return memcpy(dst, src, len);
 80208ea:	4659      	mov	r1, fp
 80208ec:	4650      	mov	r0, sl
 80208ee:	9214      	str	r2, [sp, #80]	; 0x50
 80208f0:	3701      	adds	r7, #1
 80208f2:	f7f9 ff0a 	bl	801a70a <memcpy>
            cbuf_tmp += dest_w;
 80208f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
            src_tmp8 += src_stride_byte;
 80208f8:	44cb      	add	fp, r9
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80208fa:	b23f      	sxth	r7, r7
            cbuf_tmp += dest_w;
 80208fc:	4492      	add	sl, r2
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80208fe:	e7ea      	b.n	80208d6 <lv_draw_sw_img_decoded+0x398>
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 8020900:	9908      	ldr	r1, [sp, #32]
 8020902:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8020906:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
 802090a:	bf04      	itt	eq
 802090c:	990a      	ldreq	r1, [sp, #40]	; 0x28
 802090e:	54ca      	strbeq	r2, [r1, r3]
            for(i = 0; i < px_cnt; i++) {
 8020910:	3301      	adds	r3, #1
 8020912:	4598      	cmp	r8, r3
 8020914:	d1f4      	bne.n	8020900 <lv_draw_sw_img_decoded+0x3c2>
 8020916:	e71b      	b.n	8020750 <lv_draw_sw_img_decoded+0x212>
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8020918:	f899 b002 	ldrb.w	fp, [r9, #2]
 802091c:	f80e b007 	strb.w	fp, [lr, r7]
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
 8020920:	f839 bb03 	ldrh.w	fp, [r9], #3
 8020924:	f828 b017 	strh.w	fp, [r8, r7, lsl #1]
            for(x = 0; x < dest_w; x++) {
 8020928:	3701      	adds	r7, #1
 802092a:	fa0f fb87 	sxth.w	fp, r7
 802092e:	455a      	cmp	r2, fp
 8020930:	dcf2      	bgt.n	8020918 <lv_draw_sw_img_decoded+0x3da>
            cbuf += dest_w;
 8020932:	44d0      	add	r8, sl
            abuf += dest_w;
 8020934:	4496      	add	lr, r2
            src_tmp8 += src_new_line_step_byte;
 8020936:	4419      	add	r1, r3
        for(y = 0; y < dest_h; y++) {
 8020938:	f10c 0c01 	add.w	ip, ip, #1
 802093c:	e75c      	b.n	80207f8 <lv_draw_sw_img_decoded+0x2ba>
 802093e:	4658      	mov	r0, fp
 8020940:	f109 0901 	add.w	r9, r9, #1
 8020944:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
 8020948:	f7f9 fedf 	bl	801a70a <memcpy>
            cbuf += dest_w;
 802094c:	9a15      	ldr	r2, [sp, #84]	; 0x54
            src_tmp8 += src_stride_byte;
 802094e:	9914      	ldr	r1, [sp, #80]	; 0x50
            cbuf += dest_w;
 8020950:	4493      	add	fp, r2
            src_tmp8 += src_stride_byte;
 8020952:	4451      	add	r1, sl
        for(y = 0; y < dest_h; y++) {
 8020954:	e77a      	b.n	802084c <lv_draw_sw_img_decoded+0x30e>
                lv_color_t recolor = draw_dsc->recolor;
 8020956:	7a6f      	ldrb	r7, [r5, #9]
 8020958:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 802095c:	f895 e008 	ldrb.w	lr, [r5, #8]
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 8020960:	08ff      	lsrs	r7, r7, #3
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 8020962:	f3cc 1c45 	ubfx	ip, ip, #5, #6
                for(i = 0; i < buf_size; i++) {
 8020966:	9808      	ldr	r0, [sp, #32]
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 8020968:	f00e 0e1f 	and.w	lr, lr, #31
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 802096c:	fb02 f807 	mul.w	r8, r2, r7
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 8020970:	fb0c fc02 	mul.w	ip, ip, r2
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 8020974:	fb0e fe02 	mul.w	lr, lr, r2
                recolor_opa = 255 - recolor_opa;
 8020978:	43d2      	mvns	r2, r2
 802097a:	b2d2      	uxtb	r2, r2
                for(i = 0; i < buf_size; i++) {
 802097c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802097e:	4298      	cmp	r0, r3
 8020980:	f43f aeea 	beq.w	8020758 <lv_draw_sw_img_decoded+0x21a>
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8020984:	8801      	ldrh	r1, [r0, #0]
 8020986:	f248 0381 	movw	r3, #32897	; 0x8081
 802098a:	f3c1 1145 	ubfx	r1, r1, #5, #6
 802098e:	461f      	mov	r7, r3
 8020990:	fb01 c102 	mla	r1, r1, r2, ip
 8020994:	3180      	adds	r1, #128	; 0x80
 8020996:	4359      	muls	r1, r3
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8020998:	7803      	ldrb	r3, [r0, #0]
 802099a:	f003 031f 	and.w	r3, r3, #31
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 802099e:	f3c1 51c5 	ubfx	r1, r1, #23, #6
 80209a2:	fb03 e302 	mla	r3, r3, r2, lr
 80209a6:	3380      	adds	r3, #128	; 0x80
 80209a8:	437b      	muls	r3, r7
 80209aa:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 80209ae:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80209b2:	7841      	ldrb	r1, [r0, #1]
 80209b4:	08c9      	lsrs	r1, r1, #3
 80209b6:	fb01 8102 	mla	r1, r1, r2, r8
 80209ba:	3180      	adds	r1, #128	; 0x80
 80209bc:	4379      	muls	r1, r7
 80209be:	0dc9      	lsrs	r1, r1, #23
 80209c0:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 80209c4:	f820 3b02 	strh.w	r3, [r0], #2
                for(i = 0; i < buf_size; i++) {
 80209c8:	e7d8      	b.n	802097c <lv_draw_sw_img_decoded+0x43e>
                    mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 80209ca:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 80209ce:	463a      	mov	r2, r7
 80209d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80209d2:	4640      	mov	r0, r8
 80209d4:	f7e7 fc4a 	bl	800826c <lv_draw_mask_apply>
                    if(mask_res_line == LV_DRAW_MASK_RES_TRANSP) {
 80209d8:	4601      	mov	r1, r0
 80209da:	b950      	cbnz	r0, 80209f2 <lv_draw_sw_img_decoded+0x4b4>
    memset(dst, 0x00, len);
 80209dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80209de:	4640      	mov	r0, r8
 80209e0:	f7f9 fe9e 	bl	801a720 <memset>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80209e4:	f88d 9084 	strb.w	r9, [sp, #132]	; 0x84
                    mask_buf_tmp += blend_w;
 80209e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80209ea:	3701      	adds	r7, #1
 80209ec:	4498      	add	r8, r3
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 80209ee:	b23f      	sxth	r7, r7
 80209f0:	e6ba      	b.n	8020768 <lv_draw_sw_img_decoded+0x22a>
                    else if(mask_res_line == LV_DRAW_MASK_RES_CHANGED) {
 80209f2:	2802      	cmp	r0, #2
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80209f4:	bf08      	it	eq
 80209f6:	f88d 0084 	strbeq.w	r0, [sp, #132]	; 0x84
 80209fa:	e7f5      	b.n	80209e8 <lv_draw_sw_img_decoded+0x4aa>

080209fc <lv_draw_sw_layer_create>:
 **********************/


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
 80209fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 80209fe:	07d3      	lsls	r3, r2, #31
{
 8020a00:	4606      	mov	r6, r0
 8020a02:	460c      	mov	r4, r1
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 8020a04:	d502      	bpl.n	8020a0c <lv_draw_sw_layer_create+0x10>
        LV_LOG_WARN("Rendering this widget needs LV_COLOR_SCREEN_TRANSP 1");
        return NULL;
 8020a06:	2400      	movs	r4, #0
        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
    }

    return layer_ctx;
}
 8020a08:	4620      	mov	r0, r4
 8020a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8020a0c:	f012 0502 	ands.w	r5, r2, #2
 8020a10:	d03e      	beq.n	8020a90 <lv_draw_sw_layer_create+0x94>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 8020a12:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8020a14:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8020a18:	4608      	mov	r0, r1
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 8020a1a:	f362 031e 	bfi	r3, r2, #0, #31
 8020a1e:	628b      	str	r3, [r1, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8020a20:	f003 fbf9 	bl	8024216 <lv_area_get_size>
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 8020a24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8020a26:	0042      	lsls	r2, r0, #1
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 8020a28:	f3c3 011e 	ubfx	r1, r3, #0, #31
 8020a2c:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
 8020a30:	bf84      	itt	hi
 8020a32:	f362 031e 	bfihi	r3, r2, #0, #31
 8020a36:	62a3      	strhi	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8020a38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8020a3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020a3e:	f7f1 fe37 	bl	80126b0 <lv_mem_alloc>
 8020a42:	6160      	str	r0, [r4, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 8020a44:	b1c0      	cbz	r0, 8020a78 <lv_draw_sw_layer_create+0x7c>
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 8020a46:	f104 0308 	add.w	r3, r4, #8
 8020a4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8020a4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8020a52:	89a2      	ldrh	r2, [r4, #12]
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 8020a54:	8863      	ldrh	r3, [r4, #2]
 8020a56:	3201      	adds	r2, #1
 8020a58:	8921      	ldrh	r1, [r4, #8]
 8020a5a:	81e3      	strh	r3, [r4, #14]
 8020a5c:	1a52      	subs	r2, r2, r1
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 8020a5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020a60:	b212      	sxth	r2, r2
 8020a62:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8020a66:	fb93 f3f2 	sdiv	r3, r3, r2
 8020a6a:	2203      	movs	r2, #3
 8020a6c:	fb93 f2f2 	sdiv	r2, r3, r2
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 8020a70:	085b      	lsrs	r3, r3, #1
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 8020a72:	8222      	strh	r2, [r4, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 8020a74:	8263      	strh	r3, [r4, #18]
 8020a76:	e7c7      	b.n	8020a08 <lv_draw_sw_layer_create+0xc>
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 8020a78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020a7a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8020a7e:	f360 031e 	bfi	r3, r0, #0, #31
 8020a82:	62a3      	str	r3, [r4, #40]	; 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8020a84:	f7f1 fe14 	bl	80126b0 <lv_mem_alloc>
 8020a88:	6160      	str	r0, [r4, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 8020a8a:	2800      	cmp	r0, #0
 8020a8c:	d1db      	bne.n	8020a46 <lv_draw_sw_layer_create+0x4a>
 8020a8e:	e7ba      	b.n	8020a06 <lv_draw_sw_layer_create+0xa>
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 8020a90:	f101 0708 	add.w	r7, r1, #8
 8020a94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a98:	e887 0003 	stmia.w	r7, {r0, r1}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8020a9c:	4620      	mov	r0, r4
 8020a9e:	f003 fbba 	bl	8024216 <lv_area_get_size>
 8020aa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020aa4:	0040      	lsls	r0, r0, #1
 8020aa6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020aaa:	f360 031e 	bfi	r3, r0, #0, #31
 8020aae:	62a3      	str	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8020ab0:	f7f1 fdfe 	bl	80126b0 <lv_mem_alloc>
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 8020ab4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8020ab6:	4629      	mov	r1, r5
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8020ab8:	6160      	str	r0, [r4, #20]
 8020aba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8020abe:	f7f9 fe2f 	bl	801a720 <memset>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 8020ac2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8020ac6:	f365 13c7 	bfi	r3, r5, #7, #1
 8020aca:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        if(layer_sw_ctx->base_draw.buf == NULL) {
 8020ace:	6963      	ldr	r3, [r4, #20]
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	d098      	beq.n	8020a06 <lv_draw_sw_layer_create+0xa>
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 8020ad4:	60b7      	str	r7, [r6, #8]
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 8020ad6:	e9c6 3700 	strd	r3, r7, [r6]
        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8020ada:	f7e6 fb93 	bl	8007204 <_lv_refr_get_disp_refreshing>
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 8020ade:	6803      	ldr	r3, [r0, #0]
 8020ae0:	7c1a      	ldrb	r2, [r3, #16]
 8020ae2:	f365 1286 	bfi	r2, r5, #6, #1
 8020ae6:	741a      	strb	r2, [r3, #16]
 8020ae8:	e78e      	b.n	8020a08 <lv_draw_sw_layer_create+0xc>

08020aea <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 8020aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020aec:	4615      	mov	r5, r2
 8020aee:	4606      	mov	r6, r0
 8020af0:	460c      	mov	r4, r1

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8020af2:	f7e6 fb87 	bl	8007204 <_lv_refr_get_disp_refreshing>
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8020af6:	f015 0501 	ands.w	r5, r5, #1
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8020afa:	4607      	mov	r7, r0
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8020afc:	d017      	beq.n	8020b2e <lv_draw_sw_layer_adjust+0x44>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 8020afe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8020b00:	2100      	movs	r1, #0
 8020b02:	6960      	ldr	r0, [r4, #20]
 8020b04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8020b08:	f7f9 fe0a 	bl	801a720 <memset>
        layer_sw_ctx->has_alpha = 1;
 8020b0c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8020b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020b14:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        disp_refr->driver->screen_transp = 1;
 8020b18:	683a      	ldr	r2, [r7, #0]
 8020b1a:	7c13      	ldrb	r3, [r2, #16]
 8020b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020b20:	7413      	strb	r3, [r2, #16]
    else {
        layer_sw_ctx->has_alpha = 0;
        disp_refr->driver->screen_transp = 0;
    }

    draw_ctx->buf = layer_ctx->buf;
 8020b22:	6963      	ldr	r3, [r4, #20]
    draw_ctx->buf_area = &layer_ctx->area_act;
 8020b24:	3408      	adds	r4, #8
    draw_ctx->buf = layer_ctx->buf;
 8020b26:	6033      	str	r3, [r6, #0]
    draw_ctx->clip_area = &layer_ctx->area_act;
 8020b28:	e9c6 4401 	strd	r4, r4, [r6, #4]
}
 8020b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        layer_sw_ctx->has_alpha = 0;
 8020b2e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8020b32:	f365 13c7 	bfi	r3, r5, #7, #1
 8020b36:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        disp_refr->driver->screen_transp = 0;
 8020b3a:	6803      	ldr	r3, [r0, #0]
 8020b3c:	7c1a      	ldrb	r2, [r3, #16]
 8020b3e:	f365 1286 	bfi	r2, r5, #6, #1
 8020b42:	741a      	strb	r2, [r3, #16]
 8020b44:	e7ed      	b.n	8020b22 <lv_draw_sw_layer_adjust+0x38>

08020b46 <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 8020b46:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 8020b48:	6803      	ldr	r3, [r0, #0]
{
 8020b4a:	4616      	mov	r6, r2
    img.header.always_zero = 0;
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 8020b4c:	6842      	ldr	r2, [r0, #4]
{
 8020b4e:	460d      	mov	r5, r1
    img.data = draw_ctx->buf;
 8020b50:	9303      	str	r3, [sp, #12]
{
 8020b52:	4604      	mov	r4, r0
    img.header.always_zero = 0;
 8020b54:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8020b58:	f36f 1347 	bfc	r3, #5, #3
 8020b5c:	f88d 3004 	strb.w	r3, [sp, #4]
 8020b60:	8893      	ldrh	r3, [r2, #4]
 8020b62:	8811      	ldrh	r1, [r2, #0]
 8020b64:	3301      	adds	r3, #1
 8020b66:	1a5b      	subs	r3, r3, r1
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 8020b68:	9901      	ldr	r1, [sp, #4]
 8020b6a:	f363 2194 	bfi	r1, r3, #10, #11
 8020b6e:	9101      	str	r1, [sp, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020b70:	88d3      	ldrh	r3, [r2, #6]
 8020b72:	8852      	ldrh	r2, [r2, #2]
 8020b74:	3301      	adds	r3, #1
 8020b76:	1a9b      	subs	r3, r3, r2
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
 8020b78:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8020b7c:	f363 124f 	bfi	r2, r3, #5, #11
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 8020b80:	f995 302b 	ldrsb.w	r3, [r5, #43]	; 0x2b
 8020b84:	2b00      	cmp	r3, #0
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
 8020b86:	f8ad 2006 	strh.w	r2, [sp, #6]
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 8020b8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8020b8e:	bfac      	ite	ge
 8020b90:	2204      	movge	r2, #4
 8020b92:	2205      	movlt	r2, #5
 8020b94:	f362 0304 	bfi	r3, r2, #0, #5
 8020b98:	f88d 3004 	strb.w	r3, [sp, #4]

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 8020b9c:	6a2b      	ldr	r3, [r5, #32]
 8020b9e:	6003      	str	r3, [r0, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 8020ba0:	69eb      	ldr	r3, [r5, #28]
 8020ba2:	6043      	str	r3, [r0, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 8020ba4:	69ab      	ldr	r3, [r5, #24]
 8020ba6:	6083      	str	r3, [r0, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8020ba8:	f7e6 fb2c 	bl	8007204 <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8020bac:	6803      	ldr	r3, [r0, #0]
 8020bae:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 8020bb2:	4620      	mov	r0, r4
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8020bb4:	7c1a      	ldrb	r2, [r3, #16]
 8020bb6:	f361 1286 	bfi	r2, r1, #6, #1
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 8020bba:	4631      	mov	r1, r6
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8020bbc:	741a      	strb	r2, [r3, #16]
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 8020bbe:	ab01      	add	r3, sp, #4
 8020bc0:	f105 0208 	add.w	r2, r5, #8
 8020bc4:	f7e6 ff5a 	bl	8007a7c <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 8020bc8:	4620      	mov	r0, r4
 8020bca:	f7fd fdce 	bl	801e76a <lv_draw_wait_for_finish>
    lv_img_cache_invalidate_src(&img);
 8020bce:	a801      	add	r0, sp, #4
 8020bd0:	f7fe fc8b 	bl	801f4ea <lv_img_cache_invalidate_src>
}
 8020bd4:	b004      	add	sp, #16
 8020bd6:	bd70      	pop	{r4, r5, r6, pc}

08020bd8 <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 8020bd8:	6948      	ldr	r0, [r1, #20]
 8020bda:	f7f1 bd87 	b.w	80126ec <lv_mem_free>

08020bde <lv_memset_ff>:
{
 8020bde:	460a      	mov	r2, r1
    memset(dst, 0xFF, len);
 8020be0:	21ff      	movs	r1, #255	; 0xff
 8020be2:	f7f9 bd9d 	b.w	801a720 <memset>

08020be6 <draw_bg_img>:

#endif
}

static void draw_bg_img(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 8020be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(dsc->bg_img_src == NULL) return;
 8020bea:	690b      	ldr	r3, [r1, #16]
{
 8020bec:	b092      	sub	sp, #72	; 0x48
 8020bee:	4606      	mov	r6, r0
 8020bf0:	460c      	mov	r4, r1
 8020bf2:	4615      	mov	r5, r2
    if(dsc->bg_img_src == NULL) return;
 8020bf4:	2b00      	cmp	r3, #0
 8020bf6:	d063      	beq.n	8020cc0 <draw_bg_img+0xda>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 8020bf8:	7e8b      	ldrb	r3, [r1, #26]
 8020bfa:	2b02      	cmp	r3, #2
 8020bfc:	d960      	bls.n	8020cc0 <draw_bg_img+0xda>

    lv_area_t clip_area;
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 8020bfe:	f10d 0818 	add.w	r8, sp, #24
 8020c02:	6882      	ldr	r2, [r0, #8]
 8020c04:	4629      	mov	r1, r5
 8020c06:	4640      	mov	r0, r8
 8020c08:	f003 fb33 	bl	8024272 <_lv_area_intersect>
 8020c0c:	2800      	cmp	r0, #0
 8020c0e:	d057      	beq.n	8020cc0 <draw_bg_img+0xda>
        return;
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8020c10:	68b7      	ldr	r7, [r6, #8]
    draw_ctx->clip_area = &clip_area;
 8020c12:	f8c6 8008 	str.w	r8, [r6, #8]

    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 8020c16:	6920      	ldr	r0, [r4, #16]
 8020c18:	f7fd fe10 	bl	801e83c <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8020c1c:	2802      	cmp	r0, #2
 8020c1e:	d152      	bne.n	8020cc6 <draw_bg_img+0xe0>
        lv_point_t size;
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8020c20:	f04f 0800 	mov.w	r8, #0
 8020c24:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8020c28:	a805      	add	r0, sp, #20
 8020c2a:	f8cd 8000 	str.w	r8, [sp]
 8020c2e:	e9cd 3801 	strd	r3, r8, [sp, #4]
 8020c32:	4643      	mov	r3, r8
 8020c34:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8020c38:	f004 fdfe 	bl	8025838 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020c3c:	88aa      	ldrh	r2, [r5, #4]
        lv_area_t a;
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 8020c3e:	882b      	ldrh	r3, [r5, #0]
 8020c40:	3201      	adds	r2, #1
 8020c42:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8020c46:	1ad2      	subs	r2, r2, r3
 8020c48:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8020c4c:	fa00 f282 	sxtah	r2, r0, r2
 8020c50:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
        a.x2 = a.x1 + size.x - 1;
 8020c54:	3901      	subs	r1, #1
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 8020c56:	eba3 0360 	sub.w	r3, r3, r0, asr #1
 8020c5a:	eb03 0362 	add.w	r3, r3, r2, asr #1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8020c5e:	886a      	ldrh	r2, [r5, #2]
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 8020c60:	b29b      	uxth	r3, r3
 8020c62:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.x2 = a.x1 + size.x - 1;
 8020c66:	440b      	add	r3, r1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8020c68:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
        a.x2 = a.x1 + size.x - 1;
 8020c6c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020c70:	88eb      	ldrh	r3, [r5, #6]
 8020c72:	3301      	adds	r3, #1
 8020c74:	1a9b      	subs	r3, r3, r2
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8020c76:	f3c3 30c0 	ubfx	r0, r3, #15, #1
 8020c7a:	fa00 f383 	sxtah	r3, r0, r3
 8020c7e:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
        a.y2 = a.y1 + size.y - 1;
 8020c82:	3901      	subs	r1, #1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8020c84:	eba2 0260 	sub.w	r2, r2, r0, asr #1

        lv_draw_label_dsc_t label_draw_dsc;
        lv_draw_label_dsc_init(&label_draw_dsc);
 8020c88:	a80a      	add	r0, sp, #40	; 0x28
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8020c8a:	eb02 0263 	add.w	r2, r2, r3, asr #1
 8020c8e:	b292      	uxth	r2, r2
 8020c90:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
        a.y2 = a.y1 + size.y - 1;
 8020c94:	440a      	add	r2, r1
 8020c96:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
        lv_draw_label_dsc_init(&label_draw_dsc);
 8020c9a:	f7e7 f805 	bl	8007ca8 <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 8020c9e:	6963      	ldr	r3, [r4, #20]
        label_draw_dsc.color = dsc->bg_img_recolor;
        label_draw_dsc.opa = dsc->bg_img_opa;
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 8020ca0:	aa08      	add	r2, sp, #32
 8020ca2:	a90a      	add	r1, sp, #40	; 0x28
 8020ca4:	4630      	mov	r0, r6
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 8020ca6:	930a      	str	r3, [sp, #40]	; 0x28
        label_draw_dsc.color = dsc->bg_img_recolor;
 8020ca8:	8b23      	ldrh	r3, [r4, #24]
 8020caa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        label_draw_dsc.opa = dsc->bg_img_opa;
 8020cae:	7ea3      	ldrb	r3, [r4, #26]
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 8020cb0:	f8cd 8000 	str.w	r8, [sp]
        label_draw_dsc.opa = dsc->bg_img_opa;
 8020cb4:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 8020cb8:	6923      	ldr	r3, [r4, #16]
 8020cba:	f7e7 f80d 	bl	8007cd8 <lv_draw_label>
        else {
            LV_LOG_WARN("Couldn't read the background image");
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 8020cbe:	60b7      	str	r7, [r6, #8]
}
 8020cc0:	b012      	add	sp, #72	; 0x48
 8020cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 8020cc6:	a905      	add	r1, sp, #20
 8020cc8:	6920      	ldr	r0, [r4, #16]
 8020cca:	f7e8 f939 	bl	8008f40 <lv_img_decoder_get_info>
        if(res == LV_RES_OK) {
 8020cce:	2801      	cmp	r0, #1
 8020cd0:	d1f5      	bne.n	8020cbe <draw_bg_img+0xd8>
            lv_draw_img_dsc_init(&img_dsc);
 8020cd2:	a80a      	add	r0, sp, #40	; 0x28
 8020cd4:	f7fd fd8e 	bl	801e7f4 <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 8020cd8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8020cdc:	78a2      	ldrb	r2, [r4, #2]
 8020cde:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8020ce2:	f362 0303 	bfi	r3, r2, #0, #4
 8020ce6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            img_dsc.recolor = dsc->bg_img_recolor;
 8020cea:	8b23      	ldrh	r3, [r4, #24]
 8020cec:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 8020cf0:	8b63      	ldrh	r3, [r4, #26]
 8020cf2:	ba5b      	rev16	r3, r3
 8020cf4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            if(dsc->bg_img_tiled == false) {
 8020cf8:	7f23      	ldrb	r3, [r4, #28]
 8020cfa:	bbab      	cbnz	r3, 8020d68 <draw_bg_img+0x182>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020cfc:	88ab      	ldrh	r3, [r5, #4]
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8020cfe:	882a      	ldrh	r2, [r5, #0]
 8020d00:	3301      	adds	r3, #1
 8020d02:	9805      	ldr	r0, [sp, #20]
 8020d04:	1a9b      	subs	r3, r3, r2
 8020d06:	f3c0 2e8a 	ubfx	lr, r0, #10, #11
 8020d0a:	f3c0 20c9 	ubfx	r0, r0, #11, #10
 8020d0e:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
                area.x2 = area.x1 + header.w - 1;
 8020d12:	f10e 3eff 	add.w	lr, lr, #4294967295
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8020d16:	1a12      	subs	r2, r2, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020d18:	88e8      	ldrh	r0, [r5, #6]
 8020d1a:	fa0c f383 	sxtah	r3, ip, r3
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020d1e:	f3c1 1c4a 	ubfx	ip, r1, #5, #11
 8020d22:	3001      	adds	r0, #1
 8020d24:	f3c1 1189 	ubfx	r1, r1, #6, #10
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8020d28:	eb02 0263 	add.w	r2, r2, r3, asr #1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020d2c:	886b      	ldrh	r3, [r5, #2]
                area.y2 = area.y1 + header.h - 1;
 8020d2e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020d32:	1ac0      	subs	r0, r0, r3
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020d34:	1a5b      	subs	r3, r3, r1
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8020d36:	b292      	uxth	r2, r2
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8020d38:	a90a      	add	r1, sp, #40	; 0x28
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020d3a:	f3c0 35c0 	ubfx	r5, r0, #15, #1
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8020d3e:	f8ad 2020 	strh.w	r2, [sp, #32]
                area.x2 = area.x1 + header.w - 1;
 8020d42:	4472      	add	r2, lr
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020d44:	fa05 f080 	sxtah	r0, r5, r0
                area.x2 = area.x1 + header.w - 1;
 8020d48:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8020d4c:	aa08      	add	r2, sp, #32
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020d4e:	eb03 0360 	add.w	r3, r3, r0, asr #1
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8020d52:	4630      	mov	r0, r6
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8020d54:	b29b      	uxth	r3, r3
 8020d56:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
                area.y2 = area.y1 + header.h - 1;
 8020d5a:	4463      	add	r3, ip
 8020d5c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8020d60:	6923      	ldr	r3, [r4, #16]
 8020d62:	f7e6 fe8b 	bl	8007a7c <lv_draw_img>
 8020d66:	e7aa      	b.n	8020cbe <draw_bg_img+0xd8>
                area.y2 = area.y1 + header.h - 1;
 8020d68:	f3c1 114a 	ubfx	r1, r1, #5, #11
                area.y1 = coords->y1;
 8020d6c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
                area.y2 = area.y1 + header.h - 1;
 8020d70:	3901      	subs	r1, #1
                area.y1 = coords->y1;
 8020d72:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
                area.y2 = area.y1 + header.h - 1;
 8020d76:	440b      	add	r3, r1
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 8020d78:	b21b      	sxth	r3, r3
 8020d7a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
                area.y2 = area.y1 + header.h - 1;
 8020d7e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 8020d82:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8020d86:	429a      	cmp	r2, r3
 8020d88:	dc99      	bgt.n	8020cbe <draw_bg_img+0xd8>
                    area.x2 = area.x1 + header.w - 1;
 8020d8a:	9a05      	ldr	r2, [sp, #20]
                    area.x1 = coords->x1;
 8020d8c:	f9b5 3000 	ldrsh.w	r3, [r5]
                    area.x2 = area.x1 + header.w - 1;
 8020d90:	f3c2 228a 	ubfx	r2, r2, #10, #11
                    area.x1 = coords->x1;
 8020d94:	f8ad 3020 	strh.w	r3, [sp, #32]
                    area.x2 = area.x1 + header.w - 1;
 8020d98:	3a01      	subs	r2, #1
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8020d9a:	4413      	add	r3, r2
 8020d9c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020da0:	b21b      	sxth	r3, r3
                    area.x2 = area.x1 + header.w - 1;
 8020da2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8020da6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8020daa:	429a      	cmp	r2, r3
 8020dac:	dd0c      	ble.n	8020dc8 <draw_bg_img+0x1e2>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 8020dae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8020db2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020db6:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8020dba:	441a      	add	r2, r3
 8020dbc:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8020dc0:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8020dc4:	4413      	add	r3, r2
 8020dc6:	e7d7      	b.n	8020d78 <draw_bg_img+0x192>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8020dc8:	6923      	ldr	r3, [r4, #16]
 8020dca:	aa08      	add	r2, sp, #32
 8020dcc:	a90a      	add	r1, sp, #40	; 0x28
 8020dce:	4630      	mov	r0, r6
 8020dd0:	f7e6 fe54 	bl	8007a7c <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8020dd4:	9b05      	ldr	r3, [sp, #20]
 8020dd6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020dda:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8020dde:	441a      	add	r2, r3
 8020de0:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020de4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8020de8:	e7d7      	b.n	8020d9a <draw_bg_img+0x1b4>

08020dea <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 8020dea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int32_t s_left = sw >> 1;
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 8020dee:	0045      	lsls	r5, r0, #1
    if((sw & 1) == 0) s_left--;
 8020df0:	07cb      	lsls	r3, r1, #31
    int32_t s_left = sw >> 1;
 8020df2:	ea4f 0961 	mov.w	r9, r1, asr #1
{
 8020df6:	b087      	sub	sp, #28
 8020df8:	4604      	mov	r4, r0
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 8020dfa:	4628      	mov	r0, r5
{
 8020dfc:	460e      	mov	r6, r1
 8020dfe:	4617      	mov	r7, r2
    int32_t s_left = sw >> 1;
 8020e00:	46ca      	mov	sl, r9
    if((sw & 1) == 0) s_left--;
 8020e02:	bf58      	it	pl
 8020e04:	f109 3aff 	addpl.w	sl, r9, #4294967295
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 8020e08:	f7f1 fca2 	bl	8012750 <lv_mem_buf_get>
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 8020e0c:	1eab      	subs	r3, r5, #2
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 8020e0e:	4601      	mov	r1, r0
    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 8020e10:	46b8      	mov	r8, r7
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 8020e12:	9301      	str	r3, [sp, #4]
 8020e14:	ea4f 0349 	mov.w	r3, r9, lsl #1
    for(y = 0; y < size; y++) {
 8020e18:	f04f 0b00 	mov.w	fp, #0
 8020e1c:	9302      	str	r3, [sp, #8]
 8020e1e:	f06f 0301 	mvn.w	r3, #1
 8020e22:	fb0a 3303 	mla	r3, sl, r3, r3
 8020e26:	9303      	str	r3, [sp, #12]
 8020e28:	455c      	cmp	r4, fp
 8020e2a:	dc22      	bgt.n	8020e72 <shadow_blur_corner+0x88>
    }

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
    uint32_t max_v_div = max_v / sw;
 8020e2c:	f44f 5e7f 	mov.w	lr, #16320	; 0x3fc0
    for(i = 0; i < (uint32_t)size * size; i++) {
 8020e30:	fb04 fc04 	mul.w	ip, r4, r4
 8020e34:	463a      	mov	r2, r7
 8020e36:	463b      	mov	r3, r7
 8020e38:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
    uint32_t max_v_div = max_v / sw;
 8020e3c:	fbbe fef6 	udiv	lr, lr, r6
    for(i = 0; i < (uint32_t)size * size; i++) {
 8020e40:	4563      	cmp	r3, ip
 8020e42:	d141      	bne.n	8020ec8 <shadow_blur_corner+0xde>
 8020e44:	426b      	negs	r3, r5
        if(sh_ups_buf[i] == 0) continue;
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
    }

    for(x = 0; x < size; x++) {
 8020e46:	f04f 0c00 	mov.w	ip, #0
 8020e4a:	fb09 f303 	mul.w	r3, r9, r3
 8020e4e:	9305      	str	r3, [sp, #20]
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 8020e50:	1e63      	subs	r3, r4, #1
 8020e52:	fb05 7303 	mla	r3, r5, r3, r7
 8020e56:	9304      	str	r3, [sp, #16]
 8020e58:	f10a 0301 	add.w	r3, sl, #1
 8020e5c:	fb0a 5a05 	mla	sl, sl, r5, r5
 8020e60:	9302      	str	r3, [sp, #8]
    for(x = 0; x < size; x++) {
 8020e62:	4564      	cmp	r4, ip
 8020e64:	dc3e      	bgt.n	8020ee4 <shadow_blur_corner+0xfa>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 8020e66:	4608      	mov	r0, r1
}
 8020e68:	b007      	add	sp, #28
 8020e6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_mem_buf_release(sh_ups_blur_buf);
 8020e6e:	f7f1 bcb9 	b.w	80127e4 <lv_mem_buf_release>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 8020e72:	9b01      	ldr	r3, [sp, #4]
 8020e74:	9802      	ldr	r0, [sp, #8]
 8020e76:	f838 2003 	ldrh.w	r2, [r8, r3]
        for(x = size - 1; x >= 0; x--) {
 8020e7a:	1e63      	subs	r3, r4, #1
 8020e7c:	eb00 0c08 	add.w	ip, r0, r8
 8020e80:	9803      	ldr	r0, [sp, #12]
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 8020e82:	4372      	muls	r2, r6
        for(x = size - 1; x >= 0; x--) {
 8020e84:	4440      	add	r0, r8
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 8020e86:	eb03 0e09 	add.w	lr, r3, r9
            sh_ups_blur_buf[x] = v;
 8020e8a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 8020e8e:	4574      	cmp	r4, lr
 8020e90:	bfcc      	ite	gt
 8020e92:	f83c e013 	ldrhgt.w	lr, [ip, r3, lsl #1]
            uint32_t right_val = 0;
 8020e96:	f04f 0e00 	movle.w	lr, #0
            v -= right_val;
 8020e9a:	eba2 0e0e 	sub.w	lr, r2, lr
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 8020e9e:	eba3 020a 	sub.w	r2, r3, sl
 8020ea2:	2a00      	cmp	r2, #0
 8020ea4:	bfd4      	ite	le
 8020ea6:	f8b8 2000 	ldrhle.w	r2, [r8]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 8020eaa:	f830 2013 	ldrhgt.w	r2, [r0, r3, lsl #1]
        for(x = size - 1; x >= 0; x--) {
 8020eae:	3b01      	subs	r3, #1
            v += left_val;
 8020eb0:	4472      	add	r2, lr
        for(x = size - 1; x >= 0; x--) {
 8020eb2:	d2e8      	bcs.n	8020e86 <shadow_blur_corner+0x9c>
    return memcpy(dst, src, len);
 8020eb4:	4640      	mov	r0, r8
 8020eb6:	462a      	mov	r2, r5
 8020eb8:	9104      	str	r1, [sp, #16]
        sh_ups_tmp_buf += size;
 8020eba:	44a8      	add	r8, r5
 8020ebc:	f7f9 fc25 	bl	801a70a <memcpy>
    for(y = 0; y < size; y++) {
 8020ec0:	f10b 0b01 	add.w	fp, fp, #1
 8020ec4:	9904      	ldr	r1, [sp, #16]
 8020ec6:	e7af      	b.n	8020e28 <shadow_blur_corner+0x3e>
        if(sh_ups_buf[i] == 0) continue;
 8020ec8:	f833 0b02 	ldrh.w	r0, [r3], #2
 8020ecc:	2800      	cmp	r0, #0
 8020ece:	d0b7      	beq.n	8020e40 <shadow_blur_corner+0x56>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 8020ed0:	f5b0 5f7f 	cmp.w	r0, #16320	; 0x3fc0
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 8020ed4:	bf16      	itet	ne
 8020ed6:	fb90 f0f6 	sdivne	r0, r0, r6
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 8020eda:	f823 ec02 	strheq.w	lr, [r3, #-2]
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 8020ede:	f823 0c02 	strhne.w	r0, [r3, #-2]
    for(i = 0; i < (uint32_t)size * size; i++) {
 8020ee2:	e7ad      	b.n	8020e40 <shadow_blur_corner+0x56>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8020ee4:	9805      	ldr	r0, [sp, #20]
        int32_t v = sh_ups_tmp_buf[0] * sw;
 8020ee6:	2700      	movs	r7, #0
 8020ee8:	8813      	ldrh	r3, [r2, #0]
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8020eea:	4696      	mov	lr, r2
        int32_t v = sh_ups_tmp_buf[0] * sw;
 8020eec:	1810      	adds	r0, r2, r0
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8020eee:	4690      	mov	r8, r2
        int32_t v = sh_ups_tmp_buf[0] * sw;
 8020ef0:	4373      	muls	r3, r6
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8020ef2:	9003      	str	r0, [sp, #12]
 8020ef4:	eb02 000a 	add.w	r0, r2, sl
 8020ef8:	9001      	str	r0, [sp, #4]
 8020efa:	4638      	mov	r0, r7
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 8020efc:	2b00      	cmp	r3, #0
 8020efe:	bfac      	ite	ge
 8020f00:	f3c3 1b8f 	ubfxge	fp, r3, #6, #16
 8020f04:	f04f 0b00 	movlt.w	fp, #0
 8020f08:	f821 b010 	strh.w	fp, [r1, r0, lsl #1]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 8020f0c:	eba0 0b09 	sub.w	fp, r0, r9
 8020f10:	f1bb 0f00 	cmp.w	fp, #0
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 8020f14:	bfcc      	ite	gt
 8020f16:	f8dd b00c 	ldrgt.w	fp, [sp, #12]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 8020f1a:	f8b8 b000 	ldrhle.w	fp, [r8]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8020f1e:	44a8      	add	r8, r5
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 8020f20:	bfc8      	it	gt
 8020f22:	f83b b007 	ldrhgt.w	fp, [fp, r7]
            v -= top_val;
 8020f26:	eba3 0b0b 	sub.w	fp, r3, fp
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 8020f2a:	9b02      	ldr	r3, [sp, #8]
 8020f2c:	4403      	add	r3, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8020f2e:	3001      	adds	r0, #1
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 8020f30:	429c      	cmp	r4, r3
 8020f32:	bfca      	itet	gt
 8020f34:	9b01      	ldrgt	r3, [sp, #4]
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 8020f36:	9b04      	ldrle	r3, [sp, #16]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 8020f38:	5bdb      	ldrhgt	r3, [r3, r7]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8020f3a:	442f      	add	r7, r5
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 8020f3c:	bfd8      	it	le
 8020f3e:	f833 301c 	ldrhle.w	r3, [r3, ip, lsl #1]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8020f42:	4284      	cmp	r4, r0
            v += bottom_val;
 8020f44:	445b      	add	r3, fp
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8020f46:	dcd9      	bgt.n	8020efc <shadow_blur_corner+0x112>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8020f48:	2300      	movs	r3, #0
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 8020f4a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8020f4e:	3301      	adds	r3, #1
 8020f50:	429c      	cmp	r4, r3
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 8020f52:	f8ae 0000 	strh.w	r0, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8020f56:	44ae      	add	lr, r5
 8020f58:	dcf7      	bgt.n	8020f4a <shadow_blur_corner+0x160>
    for(x = 0; x < size; x++) {
 8020f5a:	f10c 0c01 	add.w	ip, ip, #1
 8020f5e:	3202      	adds	r2, #2
 8020f60:	e77f      	b.n	8020e62 <shadow_blur_corner+0x78>

08020f62 <draw_bg>:
{
 8020f62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8020f66:	78cb      	ldrb	r3, [r1, #3]
{
 8020f68:	b09b      	sub	sp, #108	; 0x6c
 8020f6a:	4682      	mov	sl, r0
 8020f6c:	460c      	mov	r4, r1
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8020f6e:	2b02      	cmp	r3, #2
 8020f70:	d95f      	bls.n	8021032 <draw_bg+0xd0>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 8020f72:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
    dest->x1 = src->x1;
 8020f76:	f9b2 5000 	ldrsh.w	r5, [r2]
    dest->y1 = src->y1;
 8020f7a:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8020f7e:	2b01      	cmp	r3, #1
    dest->x2 = src->x2;
 8020f80:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
    dest->y2 = src->y2;
 8020f84:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    dest->x1 = src->x1;
 8020f88:	f8ad 5014 	strh.w	r5, [sp, #20]
    dest->y1 = src->y1;
 8020f8c:	f8ad 0016 	strh.w	r0, [sp, #22]
    dest->x2 = src->x2;
 8020f90:	f8ad 1018 	strh.w	r1, [sp, #24]
    dest->y2 = src->y2;
 8020f94:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020f98:	dd1c      	ble.n	8020fd4 <draw_bg+0x72>
 8020f9a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8020f9e:	2bfc      	cmp	r3, #252	; 0xfc
 8020fa0:	d918      	bls.n	8020fd4 <draw_bg+0x72>
 8020fa2:	f9b4 3000 	ldrsh.w	r3, [r4]
 8020fa6:	b1ab      	cbz	r3, 8020fd4 <draw_bg+0x72>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 8020fa8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8020fac:	f3c3 06c0 	ubfx	r6, r3, #3, #1
 8020fb0:	4435      	add	r5, r6
 8020fb2:	f8ad 5014 	strh.w	r5, [sp, #20]
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 8020fb6:	f3c3 0580 	ubfx	r5, r3, #2, #1
 8020fba:	4428      	add	r0, r5
 8020fbc:	f8ad 0016 	strh.w	r0, [sp, #22]
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8020fc0:	f3c3 1000 	ubfx	r0, r3, #4, #1
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 8020fc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8020fc8:	1a09      	subs	r1, r1, r0
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 8020fca:	1ad2      	subs	r2, r2, r3
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8020fcc:	f8ad 1018 	strh.w	r1, [sp, #24]
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 8020fd0:	f8ad 201a 	strh.w	r2, [sp, #26]
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 8020fd4:	ad05      	add	r5, sp, #20
 8020fd6:	f8da 2008 	ldr.w	r2, [sl, #8]
 8020fda:	a807      	add	r0, sp, #28
 8020fdc:	4629      	mov	r1, r5
 8020fde:	f003 f948 	bl	8024272 <_lv_area_intersect>
 8020fe2:	b330      	cbz	r0, 8021032 <draw_bg+0xd0>
    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 8020fe4:	7be6      	ldrb	r6, [r4, #15]
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 8020fe6:	4628      	mov	r0, r5
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 8020fe8:	8963      	ldrh	r3, [r4, #10]
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 8020fea:	f016 0607 	ands.w	r6, r6, #7
 8020fee:	bf0c      	ite	eq
 8020ff0:	f8b4 8004 	ldrheq.w	r8, [r4, #4]
 8020ff4:	f8b4 8006 	ldrhne.w	r8, [r4, #6]
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 8020ff8:	4543      	cmp	r3, r8
 8020ffa:	bf08      	it	eq
 8020ffc:	2600      	moveq	r6, #0
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 8020ffe:	f7e7 f98d 	bl	800831c <lv_draw_mask_is_any>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 8021002:	221c      	movs	r2, #28
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 8021004:	4607      	mov	r7, r0
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 8021006:	2100      	movs	r1, #0
 8021008:	a813      	add	r0, sp, #76	; 0x4c
 802100a:	f7f9 fb89 	bl	801a720 <memset>
    blend_dsc.blend_mode = dsc->blend_mode;
 802100e:	78a3      	ldrb	r3, [r4, #2]
 8021010:	78e2      	ldrb	r2, [r4, #3]
 8021012:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
    blend_dsc.color = bg_color;
 8021016:	f8ad 8054 	strh.w	r8, [sp, #84]	; 0x54
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 802101a:	f9b4 3000 	ldrsh.w	r3, [r4]
 802101e:	b95f      	cbnz	r7, 8021038 <draw_bg+0xd6>
 8021020:	b953      	cbnz	r3, 8021038 <draw_bg+0xd6>
 8021022:	b94e      	cbnz	r6, 8021038 <draw_bg+0xd6>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021024:	a913      	add	r1, sp, #76	; 0x4c
 8021026:	4650      	mov	r0, sl
        blend_dsc.blend_area = &bg_coords;
 8021028:	9513      	str	r5, [sp, #76]	; 0x4c
        blend_dsc.opa = dsc->bg_opa;
 802102a:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802102e:	f7ff f9d0 	bl	80203d2 <lv_draw_sw_blend>
}
 8021032:	b01b      	add	sp, #108	; 0x6c
 8021034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
 8021038:	2afd      	cmp	r2, #253	; 0xfd
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802103a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802103e:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8021042:	bf28      	it	cs
 8021044:	22ff      	movcs	r2, #255	; 0xff
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8021046:	3501      	adds	r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8021048:	f10b 0b01 	add.w	fp, fp, #1
 802104c:	9201      	str	r2, [sp, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802104e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8021052:	1aad      	subs	r5, r5, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8021054:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8021058:	ebab 0b02 	sub.w	fp, fp, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802105c:	b22d      	sxth	r5, r5
 802105e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8021062:	fa0f fb8b 	sxth.w	fp, fp
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 8021066:	45ab      	cmp	fp, r5
 8021068:	46d9      	mov	r9, fp
 802106a:	bfa8      	it	ge
 802106c:	46a9      	movge	r9, r5
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 802106e:	ea4f 0969 	mov.w	r9, r9, asr #1
 8021072:	4599      	cmp	r9, r3
 8021074:	bfa8      	it	ge
 8021076:	4699      	movge	r9, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8021078:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802107c:	3301      	adds	r3, #1
    if(rout > 0 || mask_any) {
 802107e:	f1b9 0f00 	cmp.w	r9, #0
 8021082:	eba3 0302 	sub.w	r3, r3, r2
 8021086:	b21b      	sxth	r3, r3
 8021088:	9300      	str	r3, [sp, #0]
 802108a:	dc01      	bgt.n	8021090 <draw_bg+0x12e>
 802108c:	2f00      	cmp	r7, #0
 802108e:	d04f      	beq.n	8021130 <draw_bg+0x1ce>
        mask_buf = lv_mem_buf_get(clipped_w);
 8021090:	9800      	ldr	r0, [sp, #0]
 8021092:	f7f1 fb5d 	bl	8012750 <lv_mem_buf_get>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 8021096:	2300      	movs	r3, #0
 8021098:	464a      	mov	r2, r9
 802109a:	a905      	add	r1, sp, #20
        mask_buf = lv_mem_buf_get(clipped_w);
 802109c:	4680      	mov	r8, r0
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 802109e:	a80d      	add	r0, sp, #52	; 0x34
 80210a0:	f7e7 fa46 	bl	8008530 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 80210a4:	2100      	movs	r1, #0
 80210a6:	a80d      	add	r0, sp, #52	; 0x34
 80210a8:	f7e7 f8ca 	bl	8008240 <lv_draw_mask_add>
 80210ac:	9002      	str	r0, [sp, #8]
    blend_area.x1 = clipped_coords.x1;
 80210ae:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 80210b2:	465a      	mov	r2, fp
 80210b4:	4629      	mov	r1, r5
 80210b6:	1da0      	adds	r0, r4, #6
    blend_area.x1 = clipped_coords.x1;
 80210b8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    blend_area.x2 = clipped_coords.x2;
 80210bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    blend_dsc.mask_buf = mask_buf;
 80210c0:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
    blend_area.x2 = clipped_coords.x2;
 80210c4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    blend_dsc.blend_area = &blend_area;
 80210c8:	ab09      	add	r3, sp, #36	; 0x24
 80210ca:	9313      	str	r3, [sp, #76]	; 0x4c
    blend_dsc.mask_area = &blend_area;
 80210cc:	9318      	str	r3, [sp, #96]	; 0x60
    blend_dsc.opa = LV_OPA_COVER;
 80210ce:	23ff      	movs	r3, #255	; 0xff
 80210d0:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 80210d4:	f7e8 fda0 	bl	8009c18 <lv_gradient_get>
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 80210d8:	4683      	mov	fp, r0
 80210da:	b150      	cbz	r0, 80210f2 <draw_bg+0x190>
 80210dc:	2e02      	cmp	r6, #2
 80210de:	d108      	bne.n	80210f2 <draw_bg+0x190>
        blend_dsc.src_buf = grad->map + clipped_coords.x1 - bg_coords.x1;
 80210e0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80210e4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80210e8:	1ad2      	subs	r2, r2, r3
 80210ea:	6883      	ldr	r3, [r0, #8]
 80210ec:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80210f0:	9314      	str	r3, [sp, #80]	; 0x50
    if(mask_any) {
 80210f2:	2f00      	cmp	r7, #0
 80210f4:	f000 8095 	beq.w	8021222 <draw_bg+0x2c0>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 80210f8:	f9bd 401e 	ldrsh.w	r4, [sp, #30]
 80210fc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021100:	42a3      	cmp	r3, r4
 8021102:	da1a      	bge.n	802113a <draw_bg+0x1d8>
    if(mask_buf) lv_mem_buf_release(mask_buf);
 8021104:	f1b8 0f00 	cmp.w	r8, #0
 8021108:	d002      	beq.n	8021110 <draw_bg+0x1ae>
 802110a:	4640      	mov	r0, r8
 802110c:	f7f1 fb6a 	bl	80127e4 <lv_mem_buf_release>
    if(mask_rout_id != LV_MASK_ID_INV) {
 8021110:	9b02      	ldr	r3, [sp, #8]
 8021112:	1c5a      	adds	r2, r3, #1
 8021114:	d005      	beq.n	8021122 <draw_bg+0x1c0>
        lv_draw_mask_remove_id(mask_rout_id);
 8021116:	4618      	mov	r0, r3
 8021118:	f7e7 f8c8 	bl	80082ac <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_rout_param);
 802111c:	a80d      	add	r0, sp, #52	; 0x34
 802111e:	f7fe f901 	bl	801f324 <lv_draw_mask_free_param>
    if(grad) {
 8021122:	f1bb 0f00 	cmp.w	fp, #0
 8021126:	d084      	beq.n	8021032 <draw_bg+0xd0>
        lv_gradient_cleanup(grad);
 8021128:	4658      	mov	r0, fp
 802112a:	f7ff fa01 	bl	8020530 <lv_gradient_cleanup>
 802112e:	e780      	b.n	8021032 <draw_bg+0xd0>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8021130:	f04f 33ff 	mov.w	r3, #4294967295
    lv_opa_t * mask_buf = NULL;
 8021134:	46b8      	mov	r8, r7
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8021136:	9302      	str	r3, [sp, #8]
 8021138:	e7b9      	b.n	80210ae <draw_bg+0x14c>
            blend_area.y1 = h;
 802113a:	b225      	sxth	r5, r4
    memset(dst, v, len);
 802113c:	4640      	mov	r0, r8
 802113e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8021142:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
            blend_area.y2 = h;
 8021146:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 802114a:	f7f9 fae9 	bl	801a720 <memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 802114e:	9b00      	ldr	r3, [sp, #0]
 8021150:	462a      	mov	r2, r5
 8021152:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8021156:	4640      	mov	r0, r8
 8021158:	f7e7 f888 	bl	800826c <lv_draw_mask_apply>
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 802115c:	2801      	cmp	r0, #1
 802115e:	bf08      	it	eq
 8021160:	2002      	moveq	r0, #2
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 8021162:	2e01      	cmp	r6, #1
 8021164:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
 8021168:	d108      	bne.n	802117c <draw_bg+0x21a>
 802116a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 802116e:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021172:	1ae3      	subs	r3, r4, r3
 8021174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021178:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802117c:	a913      	add	r1, sp, #76	; 0x4c
 802117e:	4650      	mov	r0, sl
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 8021180:	3401      	adds	r4, #1
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021182:	f7ff f926 	bl	80203d2 <lv_draw_sw_blend>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 8021186:	e7b9      	b.n	80210fc <draw_bg+0x19a>
        lv_coord_t top_y = bg_coords.y1 + h;
 8021188:	fa14 f487 	uxtah	r4, r4, r7
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 802118c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
        lv_coord_t bottom_y = bg_coords.y2 - h;
 8021190:	1bed      	subs	r5, r5, r7
        lv_coord_t top_y = bg_coords.y1 + h;
 8021192:	b224      	sxth	r4, r4
        lv_coord_t bottom_y = bg_coords.y2 - h;
 8021194:	b22d      	sxth	r5, r5
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 8021196:	42a3      	cmp	r3, r4
 8021198:	dd03      	ble.n	80211a2 <draw_bg+0x240>
 802119a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802119e:	42ab      	cmp	r3, r5
 80211a0:	db3e      	blt.n	8021220 <draw_bg+0x2be>
 80211a2:	4640      	mov	r0, r8
 80211a4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80211a8:	f7f9 faba 	bl	801a720 <memset>
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 80211ac:	9b00      	ldr	r3, [sp, #0]
 80211ae:	4622      	mov	r2, r4
 80211b0:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 80211b4:	4640      	mov	r0, r8
 80211b6:	f7e7 f859 	bl	800826c <lv_draw_mask_apply>
        if(top_y >= clipped_coords.y1) {
 80211ba:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80211be:	2801      	cmp	r0, #1
 80211c0:	bf08      	it	eq
 80211c2:	2002      	moveq	r0, #2
        if(top_y >= clipped_coords.y1) {
 80211c4:	42a3      	cmp	r3, r4
 80211c6:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
 80211ca:	dc12      	bgt.n	80211f2 <draw_bg+0x290>
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 80211cc:	2e01      	cmp	r6, #1
            blend_area.y1 = top_y;
 80211ce:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
            blend_area.y2 = top_y;
 80211d2:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 80211d6:	d108      	bne.n	80211ea <draw_bg+0x288>
 80211d8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80211dc:	1ae4      	subs	r4, r4, r3
 80211de:	f8db 3008 	ldr.w	r3, [fp, #8]
 80211e2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80211e6:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80211ea:	a913      	add	r1, sp, #76	; 0x4c
 80211ec:	4650      	mov	r0, sl
 80211ee:	f7ff f8f0 	bl	80203d2 <lv_draw_sw_blend>
        if(bottom_y <= clipped_coords.y2) {
 80211f2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80211f6:	42ab      	cmp	r3, r5
 80211f8:	db12      	blt.n	8021220 <draw_bg+0x2be>
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 80211fa:	2e01      	cmp	r6, #1
            blend_area.y1 = bottom_y;
 80211fc:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
            blend_area.y2 = bottom_y;
 8021200:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 8021204:	d108      	bne.n	8021218 <draw_bg+0x2b6>
 8021206:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 802120a:	1aed      	subs	r5, r5, r3
 802120c:	f8db 3008 	ldr.w	r3, [fp, #8]
 8021210:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8021214:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021218:	a913      	add	r1, sp, #76	; 0x4c
 802121a:	4650      	mov	r0, sl
 802121c:	f7ff f8d9 	bl	80203d2 <lv_draw_sw_blend>
    for(h = 0; h < rout; h++) {
 8021220:	3701      	adds	r7, #1
 8021222:	454f      	cmp	r7, r9
        lv_coord_t top_y = bg_coords.y1 + h;
 8021224:	f8bd 4016 	ldrh.w	r4, [sp, #22]
        lv_coord_t bottom_y = bg_coords.y2 - h;
 8021228:	f8bd 501a 	ldrh.w	r5, [sp, #26]
    for(h = 0; h < rout; h++) {
 802122c:	dbac      	blt.n	8021188 <draw_bg+0x226>
    center_coords.x1 = bg_coords.x1;
 802122e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    center_coords.y1 = bg_coords.y1 + rout;
 8021232:	fa1f f789 	uxth.w	r7, r9
 8021236:	fa14 f489 	uxtah	r4, r4, r9
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 802123a:	a80b      	add	r0, sp, #44	; 0x2c
    center_coords.y2 = bg_coords.y2 - rout;
 802123c:	1bed      	subs	r5, r5, r7
    center_coords.x1 = bg_coords.x1;
 802123e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    center_coords.x2 = bg_coords.x2;
 8021242:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    center_coords.y2 = bg_coords.y2 - rout;
 8021246:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
    center_coords.x2 = bg_coords.x2;
 802124a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    center_coords.y1 = bg_coords.y1 + rout;
 802124e:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 8021252:	f7e7 f863 	bl	800831c <lv_draw_mask_is_any>
    if(!mask_any_center && grad_dir == LV_GRAD_DIR_NONE) {
 8021256:	4605      	mov	r5, r0
 8021258:	b998      	cbnz	r0, 8021282 <draw_bg+0x320>
 802125a:	b996      	cbnz	r6, 8021282 <draw_bg+0x320>
        blend_area.y1 = bg_coords.y1 + rout;
 802125c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021260:	a913      	add	r1, sp, #76	; 0x4c
 8021262:	4650      	mov	r0, sl
        blend_dsc.mask_buf = NULL;
 8021264:	9616      	str	r6, [sp, #88]	; 0x58
        blend_area.y1 = bg_coords.y1 + rout;
 8021266:	443b      	add	r3, r7
 8021268:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        blend_area.y2 = bg_coords.y2 - rout;
 802126c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8021270:	1bdb      	subs	r3, r3, r7
 8021272:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        blend_dsc.opa = opa;
 8021276:	9b01      	ldr	r3, [sp, #4]
 8021278:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802127c:	f7ff f8a9 	bl	80203d2 <lv_draw_sw_blend>
 8021280:	e740      	b.n	8021104 <draw_bg+0x1a2>
        blend_dsc.opa = opa;
 8021282:	9b01      	ldr	r3, [sp, #4]
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 8021284:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
        blend_dsc.opa = opa;
 8021288:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 802128c:	2301      	movs	r3, #1
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 802128e:	444c      	add	r4, r9
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8021290:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        int32_t h_end = bg_coords.y2 - rout;
 8021294:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8021298:	eba3 0309 	sub.w	r3, r3, r9
 802129c:	9303      	str	r3, [sp, #12]
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 802129e:	9b03      	ldr	r3, [sp, #12]
 80212a0:	429c      	cmp	r4, r3
 80212a2:	f73f af2f 	bgt.w	8021104 <draw_bg+0x1a2>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 80212a6:	b227      	sxth	r7, r4
            if(mask_any_center) {
 80212a8:	b16d      	cbz	r5, 80212c6 <draw_bg+0x364>
 80212aa:	4640      	mov	r0, r8
 80212ac:	e9dd 2100 	ldrd	r2, r1, [sp]
 80212b0:	f7f9 fa36 	bl	801a720 <memset>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 80212b4:	9b00      	ldr	r3, [sp, #0]
 80212b6:	463a      	mov	r2, r7
 80212b8:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 80212bc:	4640      	mov	r0, r8
 80212be:	f7e6 ffd5 	bl	800826c <lv_draw_mask_apply>
 80212c2:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 80212c6:	2e01      	cmp	r6, #1
            blend_area.y1 = h;
 80212c8:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
            blend_area.y2 = h;
 80212cc:	f8ad 702a 	strh.w	r7, [sp, #42]	; 0x2a
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 80212d0:	d108      	bne.n	80212e4 <draw_bg+0x382>
 80212d2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80212d6:	f8db 2008 	ldr.w	r2, [fp, #8]
 80212da:	1ae3      	subs	r3, r4, r3
 80212dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80212e0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80212e4:	a913      	add	r1, sp, #76	; 0x4c
 80212e6:	4650      	mov	r0, sl
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 80212e8:	3401      	adds	r4, #1
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80212ea:	f7ff f872 	bl	80203d2 <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 80212ee:	e7d6      	b.n	802129e <draw_bg+0x33c>

080212f0 <lv_draw_sw_bg>:
{
 80212f0:	b570      	push	{r4, r5, r6, lr}
 80212f2:	4604      	mov	r4, r0
 80212f4:	460d      	mov	r5, r1
 80212f6:	4616      	mov	r6, r2
    draw_bg(draw_ctx, dsc, coords);
 80212f8:	f7ff fe33 	bl	8020f62 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 80212fc:	4629      	mov	r1, r5
 80212fe:	4620      	mov	r0, r4
 8021300:	4632      	mov	r2, r6
}
 8021302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    draw_bg_img(draw_ctx, dsc, coords);
 8021306:	f7ff bc6e 	b.w	8020be6 <draw_bg_img>

0802130a <draw_border_generic>:
                        dsc->blend_mode);
}

void draw_border_generic(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         lv_coord_t rout, lv_coord_t rin, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 802130a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802130e:	b0a7      	sub	sp, #156	; 0x9c
 8021310:	4683      	mov	fp, r0
    opa = opa >= LV_OPA_COVER ? LV_OPA_COVER : opa;

    bool mask_any = lv_draw_mask_is_any(outer_area);
 8021312:	4608      	mov	r0, r1
{
 8021314:	460c      	mov	r4, r1
 8021316:	4615      	mov	r5, r2
 8021318:	461e      	mov	r6, r3
 802131a:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	; 0xc0
 802131e:	f8bd 90c4 	ldrh.w	r9, [sp, #196]	; 0xc4
 8021322:	f89d 80c8 	ldrb.w	r8, [sp, #200]	; 0xc8
    bool mask_any = lv_draw_mask_is_any(outer_area);
 8021326:	f7e6 fff9 	bl	800831c <lv_draw_mask_is_any>

#if LV_DRAW_COMPLEX

    if(!mask_any && rout == 0 && rin == 0) {
 802132a:	900c      	str	r0, [sp, #48]	; 0x30
 802132c:	2800      	cmp	r0, #0
 802132e:	d16e      	bne.n	802140e <draw_border_generic+0x104>
 8021330:	ea56 0107 	orrs.w	r1, r6, r7
 8021334:	d16b      	bne.n	802140e <draw_border_generic+0x104>
    memset(dst, 0x00, len);
 8021336:	221c      	movs	r2, #28
 8021338:	a81f      	add	r0, sp, #124	; 0x7c
 802133a:	f7f9 f9f1 	bl	801a720 <memset>
                               lv_color_t color, lv_opa_t opa)
{
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
    blend_dsc.blend_area = &a;
 802133e:	ab19      	add	r3, sp, #100	; 0x64
    blend_dsc.color = color;
    blend_dsc.opa = opa;

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 8021340:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
    blend_dsc.blend_area = &a;
 8021344:	931f      	str	r3, [sp, #124]	; 0x7c
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 8021346:	f9b5 3000 	ldrsh.w	r3, [r5]
    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 802134a:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 802134e:	9301      	str	r3, [sp, #4]
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 8021350:	f9b4 3004 	ldrsh.w	r3, [r4, #4]

    /*Top*/
    a.x1 = outer_area->x1;
    a.x2 = outer_area->x2;
    a.y1 = outer_area->y1;
    a.y2 = inner_area->y1 - 1;
 8021354:	f10a 31ff 	add.w	r1, sl, #4294967295
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 8021358:	f9b4 7000 	ldrsh.w	r7, [r4]
    if(top_side) {
 802135c:	4556      	cmp	r6, sl
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 802135e:	9300      	str	r3, [sp, #0]
 8021360:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
    blend_dsc.color = color;
 8021364:	f8ad 9084 	strh.w	r9, [sp, #132]	; 0x84
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 8021368:	9302      	str	r3, [sp, #8]
    a.x2 = outer_area->x2;
 802136a:	9b00      	ldr	r3, [sp, #0]
    blend_dsc.opa = opa;
 802136c:	f88d 8094 	strb.w	r8, [sp, #148]	; 0x94
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 8021370:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
 8021374:	f9b5 8006 	ldrsh.w	r8, [r5, #6]
    a.x1 = outer_area->x1;
 8021378:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
    a.x2 = outer_area->x2;
 802137c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = outer_area->y1;
 8021380:	f8ad 6066 	strh.w	r6, [sp, #102]	; 0x66
    a.y2 = inner_area->y1 - 1;
 8021384:	f8ad 106a 	strh.w	r1, [sp, #106]	; 0x6a
    if(top_side) {
 8021388:	dc03      	bgt.n	8021392 <draw_border_generic+0x88>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802138a:	a91f      	add	r1, sp, #124	; 0x7c
 802138c:	4658      	mov	r0, fp
 802138e:	f7ff f820 	bl	80203d2 <lv_draw_sw_blend>
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 8021392:	88e9      	ldrh	r1, [r5, #6]
    a.y2 = outer_area->y2;
    if(bottom_side) {
 8021394:	45c1      	cmp	r9, r8
    a.y1 = inner_area->y2 + 1;
 8021396:	f101 0101 	add.w	r1, r1, #1
 802139a:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
    a.y2 = outer_area->y2;
 802139e:	88e1      	ldrh	r1, [r4, #6]
 80213a0:	f8ad 106a 	strh.w	r1, [sp, #106]	; 0x6a
    if(bottom_side) {
 80213a4:	db03      	blt.n	80213ae <draw_border_generic+0xa4>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80213a6:	a91f      	add	r1, sp, #124	; 0x7c
 80213a8:	4658      	mov	r0, fp
 80213aa:	f7ff f812 	bl	80203d2 <lv_draw_sw_blend>
    }

    /*Left*/
    a.x1 = outer_area->x1;
    a.x2 = inner_area->x1 - 1;
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 80213ae:	4556      	cmp	r6, sl
    a.x1 = outer_area->x1;
 80213b0:	8821      	ldrh	r1, [r4, #0]
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 80213b2:	bfd4      	ite	le
 80213b4:	f9b5 3002 	ldrshle.w	r3, [r5, #2]
 80213b8:	f9b4 3002 	ldrshgt.w	r3, [r4, #2]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 80213bc:	45c1      	cmp	r9, r8
    a.x1 = outer_area->x1;
 80213be:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 80213c2:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 80213c6:	bfac      	ite	ge
 80213c8:	f9b5 3006 	ldrshge.w	r3, [r5, #6]
 80213cc:	f9b4 3006 	ldrshlt.w	r3, [r4, #6]
    a.x2 = inner_area->x1 - 1;
 80213d0:	8829      	ldrh	r1, [r5, #0]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 80213d2:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(left_side) {
 80213d6:	9b01      	ldr	r3, [sp, #4]
    a.x2 = inner_area->x1 - 1;
 80213d8:	3901      	subs	r1, #1
    if(left_side) {
 80213da:	429f      	cmp	r7, r3
    a.x2 = inner_area->x1 - 1;
 80213dc:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    if(left_side) {
 80213e0:	dc03      	bgt.n	80213ea <draw_border_generic+0xe0>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80213e2:	a91f      	add	r1, sp, #124	; 0x7c
 80213e4:	4658      	mov	r0, fp
 80213e6:	f7fe fff4 	bl	80203d2 <lv_draw_sw_blend>
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 80213ea:	88ab      	ldrh	r3, [r5, #4]
    a.x2 = outer_area->x2;
    if(right_side) {
 80213ec:	9a02      	ldr	r2, [sp, #8]
    a.x1 = inner_area->x2 + 1;
 80213ee:	3301      	adds	r3, #1
 80213f0:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = outer_area->x2;
 80213f4:	88a3      	ldrh	r3, [r4, #4]
 80213f6:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    if(right_side) {
 80213fa:	9b00      	ldr	r3, [sp, #0]
 80213fc:	4293      	cmp	r3, r2
 80213fe:	db03      	blt.n	8021408 <draw_border_generic+0xfe>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021400:	a91f      	add	r1, sp, #124	; 0x7c
 8021402:	4658      	mov	r0, fp
 8021404:	f7fe ffe5 	bl	80203d2 <lv_draw_sw_blend>
}
 8021408:	b027      	add	sp, #156	; 0x9c
 802140a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 802140e:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021412:	4621      	mov	r1, r4
 8021414:	a80f      	add	r0, sp, #60	; 0x3c
 8021416:	f002 ff2c 	bl	8024272 <_lv_area_intersect>
 802141a:	9008      	str	r0, [sp, #32]
 802141c:	2800      	cmp	r0, #0
 802141e:	d0f3      	beq.n	8021408 <draw_border_generic+0xfe>
 8021420:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8021424:	2100      	movs	r1, #0
 8021426:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 802142a:	a81f      	add	r0, sp, #124	; 0x7c
 802142c:	3301      	adds	r3, #1
 802142e:	1a9b      	subs	r3, r3, r2
 8021430:	221c      	movs	r2, #28
 8021432:	fa0f fa83 	sxth.w	sl, r3
 8021436:	f7f9 f973 	bl	801a720 <memset>
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 802143a:	4650      	mov	r0, sl
 802143c:	f7f1 f988 	bl	8012750 <lv_mem_buf_get>
    if(rout > 0) {
 8021440:	2e00      	cmp	r6, #0
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 8021442:	9022      	str	r0, [sp, #136]	; 0x88
    if(rout > 0) {
 8021444:	dd68      	ble.n	8021518 <draw_border_generic+0x20e>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 8021446:	2300      	movs	r3, #0
 8021448:	4632      	mov	r2, r6
 802144a:	4621      	mov	r1, r4
 802144c:	a813      	add	r0, sp, #76	; 0x4c
 802144e:	f7e7 f86f 	bl	8008530 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8021452:	2100      	movs	r1, #0
 8021454:	a813      	add	r0, sp, #76	; 0x4c
 8021456:	f7e6 fef3 	bl	8008240 <lv_draw_mask_add>
 802145a:	9007      	str	r0, [sp, #28]
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 802145c:	2301      	movs	r3, #1
 802145e:	463a      	mov	r2, r7
 8021460:	4629      	mov	r1, r5
 8021462:	a819      	add	r0, sp, #100	; 0x64
 8021464:	f7e7 f864 	bl	8008530 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 8021468:	2100      	movs	r1, #0
 802146a:	a819      	add	r0, sp, #100	; 0x64
 802146c:	f7e6 fee8 	bl	8008240 <lv_draw_mask_add>
    blend_dsc.blend_area = &blend_area;
 8021470:	ab11      	add	r3, sp, #68	; 0x44
    blend_dsc.color = color;
 8021472:	f8ad 9084 	strh.w	r9, [sp, #132]	; 0x84
    blend_dsc.blend_area = &blend_area;
 8021476:	931f      	str	r3, [sp, #124]	; 0x7c
    blend_dsc.mask_area = &blend_area;
 8021478:	9324      	str	r3, [sp, #144]	; 0x90
    blend_dsc.blend_mode = blend_mode;
 802147a:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 802147e:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
    blend_dsc.blend_mode = blend_mode;
 8021482:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 8021486:	f9b5 3000 	ldrsh.w	r3, [r5]
    blend_dsc.opa = opa;
 802148a:	f88d 8094 	strb.w	r8, [sp, #148]	; 0x94
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 802148e:	9303      	str	r3, [sp, #12]
 8021490:	f9b4 3000 	ldrsh.w	r3, [r4]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 8021494:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 8021498:	9304      	str	r3, [sp, #16]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 802149a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 802149e:	f9b5 7006 	ldrsh.w	r7, [r5, #6]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 80214a2:	9300      	str	r3, [sp, #0]
 80214a4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 80214a8:	900d      	str	r0, [sp, #52]	; 0x34
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 80214aa:	9301      	str	r3, [sp, #4]
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 80214ac:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80214b0:	9302      	str	r3, [sp, #8]
 80214b2:	4433      	add	r3, r6
 80214b4:	454b      	cmp	r3, r9
 80214b6:	bfb8      	it	lt
 80214b8:	464b      	movlt	r3, r9
 80214ba:	b21b      	sxth	r3, r3
 80214bc:	9305      	str	r3, [sp, #20]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 80214be:	eba8 0306 	sub.w	r3, r8, r6
 80214c2:	42bb      	cmp	r3, r7
 80214c4:	bfa8      	it	ge
 80214c6:	463b      	movge	r3, r7
 80214c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80214ca:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80214ce:	9306      	str	r3, [sp, #24]
    if(mask_any) {
 80214d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80214d2:	2b00      	cmp	r3, #0
 80214d4:	d047      	beq.n	8021566 <draw_border_generic+0x25c>
        blend_area.x1 = draw_area.x1;
 80214d6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80214da:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	; 0x3e
        blend_area.x1 = draw_area.x1;
 80214de:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        blend_area.x2 = draw_area.x2;
 80214e2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80214e6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80214ea:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80214ee:	42a3      	cmp	r3, r4
 80214f0:	da16      	bge.n	8021520 <draw_border_generic+0x216>
        lv_draw_mask_free_param(&mask_rin_param);
 80214f2:	a819      	add	r0, sp, #100	; 0x64
 80214f4:	f7fd ff16 	bl	801f324 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rin_id);
 80214f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80214fa:	f7e6 fed7 	bl	80082ac <lv_draw_mask_remove_id>
        if(mask_rout_id != LV_MASK_ID_INV) {
 80214fe:	9b07      	ldr	r3, [sp, #28]
 8021500:	3301      	adds	r3, #1
 8021502:	d005      	beq.n	8021510 <draw_border_generic+0x206>
            lv_draw_mask_free_param(&mask_rout_param);
 8021504:	a813      	add	r0, sp, #76	; 0x4c
 8021506:	f7fd ff0d 	bl	801f324 <lv_draw_mask_free_param>
            lv_draw_mask_remove_id(mask_rout_id);
 802150a:	9807      	ldr	r0, [sp, #28]
 802150c:	f7e6 fece 	bl	80082ac <lv_draw_mask_remove_id>
        lv_mem_buf_release(blend_dsc.mask_buf);
 8021510:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021512:	f7f1 f967 	bl	80127e4 <lv_mem_buf_release>
        return;
 8021516:	e777      	b.n	8021408 <draw_border_generic+0xfe>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8021518:	f04f 33ff 	mov.w	r3, #4294967295
 802151c:	9307      	str	r3, [sp, #28]
 802151e:	e79d      	b.n	802145c <draw_border_generic+0x152>
            if(!top_side && h < core_area.y1) continue;
 8021520:	9b02      	ldr	r3, [sp, #8]
 8021522:	4599      	cmp	r9, r3
 8021524:	da02      	bge.n	802152c <draw_border_generic+0x222>
 8021526:	9b05      	ldr	r3, [sp, #20]
 8021528:	42a3      	cmp	r3, r4
 802152a:	dc1a      	bgt.n	8021562 <draw_border_generic+0x258>
            if(!bottom_side && h > core_area.y2) break;
 802152c:	4547      	cmp	r7, r8
 802152e:	dd02      	ble.n	8021536 <draw_border_generic+0x22c>
 8021530:	9b06      	ldr	r3, [sp, #24]
 8021532:	42a3      	cmp	r3, r4
 8021534:	dbdd      	blt.n	80214f2 <draw_border_generic+0x1e8>
            blend_area.y1 = h;
 8021536:	b225      	sxth	r5, r4
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 8021538:	4651      	mov	r1, sl
 802153a:	9822      	ldr	r0, [sp, #136]	; 0x88
            blend_area.y1 = h;
 802153c:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
            blend_area.y2 = h;
 8021540:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 8021544:	f7ff fb4b 	bl	8020bde <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 8021548:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 802154c:	4653      	mov	r3, sl
 802154e:	462a      	mov	r2, r5
 8021550:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021552:	f7e6 fe8b 	bl	800826c <lv_draw_mask_apply>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021556:	a91f      	add	r1, sp, #124	; 0x7c
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 8021558:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802155c:	4658      	mov	r0, fp
 802155e:	f7fe ff38 	bl	80203d2 <lv_draw_sw_blend>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8021562:	3401      	adds	r4, #1
 8021564:	e7c1      	b.n	80214ea <draw_border_generic+0x1e0>
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 8021566:	9b04      	ldr	r3, [sp, #16]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 8021568:	9900      	ldr	r1, [sp, #0]
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 802156a:	199a      	adds	r2, r3, r6
 802156c:	9b03      	ldr	r3, [sp, #12]
 802156e:	429a      	cmp	r2, r3
 8021570:	bfb8      	it	lt
 8021572:	461a      	movlt	r2, r3
 8021574:	b213      	sxth	r3, r2
 8021576:	9309      	str	r3, [sp, #36]	; 0x24
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 8021578:	9b01      	ldr	r3, [sp, #4]
 802157a:	1b9b      	subs	r3, r3, r6
 802157c:	428b      	cmp	r3, r1
 802157e:	bfa8      	it	ge
 8021580:	460b      	movge	r3, r1
 8021582:	b219      	sxth	r1, r3
 8021584:	910a      	str	r1, [sp, #40]	; 0x28
    if(left_side && right_side && top_side && bottom_side &&
 8021586:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 802158a:	4281      	cmp	r1, r0
 802158c:	da1e      	bge.n	80215cc <draw_border_generic+0x2c2>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 802158e:	2301      	movs	r3, #1
 8021590:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
    if(top_side && split_hor) {
 8021594:	9b02      	ldr	r3, [sp, #8]
 8021596:	4599      	cmp	r9, r3
 8021598:	da3b      	bge.n	8021612 <draw_border_generic+0x308>
    if(bottom_side && split_hor) {
 802159a:	4547      	cmp	r7, r8
 802159c:	dd23      	ble.n	80215e6 <draw_border_generic+0x2dc>
    if(right_side) {
 802159e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80215a2:	4293      	cmp	r3, r2
 80215a4:	f300 80c8 	bgt.w	8021738 <draw_border_generic+0x42e>
        blend_area.x1 = inner_area->x2 + 1;
 80215a8:	88ab      	ldrh	r3, [r5, #4]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80215aa:	a91f      	add	r1, sp, #124	; 0x7c
 80215ac:	4658      	mov	r0, fp
        blend_area.x1 = inner_area->x2 + 1;
 80215ae:	3301      	adds	r3, #1
 80215b0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        blend_area.x2 = outer_area->x2;
 80215b4:	88a3      	ldrh	r3, [r4, #4]
 80215b6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        blend_area.y1 = core_area.y1;
 80215ba:	9b05      	ldr	r3, [sp, #20]
 80215bc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_area.y2 = core_area.y2;
 80215c0:	9b06      	ldr	r3, [sp, #24]
 80215c2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80215c6:	f7fe ff04 	bl	80203d2 <lv_draw_sw_blend>
 80215ca:	e058      	b.n	802167e <draw_border_generic+0x374>
    if(left_side && right_side && top_side && bottom_side &&
 80215cc:	e9dd 1000 	ldrd	r1, r0, [sp]
 80215d0:	4281      	cmp	r1, r0
 80215d2:	dc72      	bgt.n	80216ba <draw_border_generic+0x3b0>
 80215d4:	9902      	ldr	r1, [sp, #8]
 80215d6:	4589      	cmp	r9, r1
 80215d8:	f04f 0101 	mov.w	r1, #1
 80215dc:	da15      	bge.n	802160a <draw_border_generic+0x300>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 80215de:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
    if(bottom_side && split_hor) {
 80215e2:	4547      	cmp	r7, r8
 80215e4:	dc36      	bgt.n	8021654 <draw_border_generic+0x34a>
        blend_area.x1 = core_area.x1;
 80215e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80215e8:	a91f      	add	r1, sp, #124	; 0x7c
 80215ea:	4658      	mov	r0, fp
        blend_area.x1 = core_area.x1;
 80215ec:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        blend_area.x2 = core_area.x2;
 80215f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215f2:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        blend_area.y1 = inner_area->y2 + 1;
 80215f6:	88eb      	ldrh	r3, [r5, #6]
 80215f8:	3301      	adds	r3, #1
 80215fa:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_area.y2 = outer_area->y2;
 80215fe:	88e3      	ldrh	r3, [r4, #6]
 8021600:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021604:	f7fe fee5 	bl	80203d2 <lv_draw_sw_blend>
 8021608:	e016      	b.n	8021638 <draw_border_generic+0x32e>
    if(left_side && right_side && top_side && bottom_side &&
 802160a:	4547      	cmp	r7, r8
 802160c:	dd19      	ble.n	8021642 <draw_border_generic+0x338>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 802160e:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
        blend_area.x1 = core_area.x1;
 8021612:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021614:	a91f      	add	r1, sp, #124	; 0x7c
 8021616:	4658      	mov	r0, fp
        blend_area.x1 = core_area.x1;
 8021618:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        blend_area.x2 = core_area.x2;
 802161c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802161e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        blend_area.y1 = outer_area->y1;
 8021622:	9b02      	ldr	r3, [sp, #8]
 8021624:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_area.y2 = inner_area->y1 - 1;
 8021628:	f109 33ff 	add.w	r3, r9, #4294967295
 802162c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021630:	f7fe fecf 	bl	80203d2 <lv_draw_sw_blend>
    if(bottom_side && split_hor) {
 8021634:	4547      	cmp	r7, r8
 8021636:	ddd6      	ble.n	80215e6 <draw_border_generic+0x2dc>
    if(left_side) {
 8021638:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 802163c:	4293      	cmp	r3, r2
 802163e:	dbae      	blt.n	802159e <draw_border_generic+0x294>
 8021640:	e008      	b.n	8021654 <draw_border_generic+0x34a>
 8021642:	3301      	adds	r3, #1
 8021644:	1a9b      	subs	r3, r3, r2
    if(left_side && right_side && top_side && bottom_side &&
 8021646:	b21b      	sxth	r3, r3
 8021648:	2b31      	cmp	r3, #49	; 0x31
 802164a:	dc36      	bgt.n	80216ba <draw_border_generic+0x3b0>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 802164c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802164e:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
 8021652:	9308      	str	r3, [sp, #32]
        blend_area.x1 = outer_area->x1;
 8021654:	8823      	ldrh	r3, [r4, #0]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021656:	a91f      	add	r1, sp, #124	; 0x7c
 8021658:	4658      	mov	r0, fp
        blend_area.x1 = outer_area->x1;
 802165a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        blend_area.x2 = inner_area->x1 - 1;
 802165e:	882b      	ldrh	r3, [r5, #0]
 8021660:	3b01      	subs	r3, #1
 8021662:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        blend_area.y1 = core_area.y1;
 8021666:	9b05      	ldr	r3, [sp, #20]
 8021668:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_area.y2 = core_area.y2;
 802166c:	9b06      	ldr	r3, [sp, #24]
 802166e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021672:	f7fe feae 	bl	80203d2 <lv_draw_sw_blend>
    if(right_side) {
 8021676:	e9dd 3200 	ldrd	r3, r2, [sp]
 802167a:	4293      	cmp	r3, r2
 802167c:	dd94      	ble.n	80215a8 <draw_border_generic+0x29e>
    if(!split_hor) {
 802167e:	9908      	ldr	r1, [sp, #32]
        blend_area.x1 = draw_area.x1;
 8021680:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 8021684:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    if(!split_hor) {
 8021688:	2900      	cmp	r1, #0
 802168a:	d155      	bne.n	8021738 <draw_border_generic+0x42e>
        blend_area.x1 = draw_area.x1;
 802168c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        for(h = 0; h < max_h; h++) {
 8021690:	460f      	mov	r7, r1
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 8021692:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
        blend_area.x2 = draw_area.x2;
 8021696:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 802169a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 802169e:	1a9b      	subs	r3, r3, r2
 80216a0:	429e      	cmp	r6, r3
 80216a2:	bfb8      	it	lt
 80216a4:	461e      	movlt	r6, r3
 80216a6:	b236      	sxth	r6, r6
        for(h = 0; h < max_h; h++) {
 80216a8:	42be      	cmp	r6, r7
 80216aa:	dc0d      	bgt.n	80216c8 <draw_border_generic+0x3be>
    lv_draw_mask_free_param(&mask_rin_param);
 80216ac:	a819      	add	r0, sp, #100	; 0x64
 80216ae:	f7fd fe39 	bl	801f324 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rin_id);
 80216b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80216b4:	f7e6 fdfa 	bl	80082ac <lv_draw_mask_remove_id>
    lv_draw_mask_free_param(&mask_rout_param);
 80216b8:	e724      	b.n	8021504 <draw_border_generic+0x1fa>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 80216ba:	2301      	movs	r3, #1
 80216bc:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
    if(top_side && split_hor) {
 80216c0:	9b02      	ldr	r3, [sp, #8]
 80216c2:	4599      	cmp	r9, r3
 80216c4:	db8d      	blt.n	80215e2 <draw_border_generic+0x2d8>
 80216c6:	e7a4      	b.n	8021612 <draw_border_generic+0x308>
            lv_coord_t top_y = outer_area->y1 + h;
 80216c8:	f8b4 8002 	ldrh.w	r8, [r4, #2]
            lv_coord_t bottom_y = outer_area->y2 - h;
 80216cc:	88e5      	ldrh	r5, [r4, #6]
            lv_coord_t top_y = outer_area->y1 + h;
 80216ce:	fa18 f887 	uxtah	r8, r8, r7
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 80216d2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
            lv_coord_t bottom_y = outer_area->y2 - h;
 80216d6:	1bed      	subs	r5, r5, r7
            lv_coord_t top_y = outer_area->y1 + h;
 80216d8:	fa0f f888 	sxth.w	r8, r8
            lv_coord_t bottom_y = outer_area->y2 - h;
 80216dc:	b22d      	sxth	r5, r5
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 80216de:	4543      	cmp	r3, r8
 80216e0:	dd03      	ble.n	80216ea <draw_border_generic+0x3e0>
 80216e2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80216e6:	42ab      	cmp	r3, r5
 80216e8:	db24      	blt.n	8021734 <draw_border_generic+0x42a>
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 80216ea:	4651      	mov	r1, sl
 80216ec:	9822      	ldr	r0, [sp, #136]	; 0x88
 80216ee:	f7ff fa76 	bl	8020bde <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 80216f2:	4653      	mov	r3, sl
 80216f4:	4642      	mov	r2, r8
 80216f6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80216fa:	9822      	ldr	r0, [sp, #136]	; 0x88
 80216fc:	f7e6 fdb6 	bl	800826c <lv_draw_mask_apply>
            if(top_y >= draw_area.y1) {
 8021700:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 8021704:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
            if(top_y >= draw_area.y1) {
 8021708:	4543      	cmp	r3, r8
 802170a:	dc07      	bgt.n	802171c <draw_border_generic+0x412>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802170c:	a91f      	add	r1, sp, #124	; 0x7c
 802170e:	4658      	mov	r0, fp
                blend_area.y1 = top_y;
 8021710:	f8ad 8046 	strh.w	r8, [sp, #70]	; 0x46
                blend_area.y2 = top_y;
 8021714:	f8ad 804a 	strh.w	r8, [sp, #74]	; 0x4a
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021718:	f7fe fe5b 	bl	80203d2 <lv_draw_sw_blend>
            if(bottom_y <= draw_area.y2) {
 802171c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8021720:	42ab      	cmp	r3, r5
 8021722:	db07      	blt.n	8021734 <draw_border_generic+0x42a>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021724:	a91f      	add	r1, sp, #124	; 0x7c
 8021726:	4658      	mov	r0, fp
                blend_area.y1 = bottom_y;
 8021728:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
                blend_area.y2 = bottom_y;
 802172c:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021730:	f7fe fe4f 	bl	80203d2 <lv_draw_sw_blend>
        for(h = 0; h < max_h; h++) {
 8021734:	3701      	adds	r7, #1
 8021736:	e7b7      	b.n	80216a8 <draw_border_generic+0x39e>
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 8021738:	9a09      	ldr	r2, [sp, #36]	; 0x24
        blend_area.x1 = draw_area.x1;
 802173a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 802173e:	1e54      	subs	r4, r2, #1
 8021740:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
        blend_area.x1 = draw_area.x1;
 8021744:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8021748:	f1c3 0301 	rsb	r3, r3, #1
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 802174c:	4294      	cmp	r4, r2
 802174e:	bfa8      	it	ge
 8021750:	4614      	movge	r4, r2
 8021752:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
 8021756:	441c      	add	r4, r3
 8021758:	b2a6      	uxth	r6, r4
 802175a:	b224      	sxth	r4, r4
        if(blend_w > 0) {
 802175c:	2c00      	cmp	r4, #0
 802175e:	dc3d      	bgt.n	80217dc <draw_border_generic+0x4d2>
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 8021760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021762:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021766:	3301      	adds	r3, #1
        blend_area.x2 = draw_area.x2;
 8021768:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 802176c:	4293      	cmp	r3, r2
        blend_area.x2 = draw_area.x2;
 802176e:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
 8021772:	f104 0401 	add.w	r4, r4, #1
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 8021776:	bfb8      	it	lt
 8021778:	4613      	movlt	r3, r2
 802177a:	1ae4      	subs	r4, r4, r3
 802177c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8021780:	b2a5      	uxth	r5, r4
 8021782:	b224      	sxth	r4, r4
        if(blend_w > 0) {
 8021784:	2c00      	cmp	r4, #0
 8021786:	dd91      	ble.n	80216ac <draw_border_generic+0x3a2>
            if(right_side || top_side) {
 8021788:	e9dd 3200 	ldrd	r3, r2, [sp]
 802178c:	4293      	cmp	r3, r2
 802178e:	dd74      	ble.n	802187a <draw_border_generic+0x570>
 8021790:	9b02      	ldr	r3, [sp, #8]
 8021792:	4599      	cmp	r9, r3
 8021794:	da71      	bge.n	802187a <draw_border_generic+0x570>
            if(right_side || bottom_side) {
 8021796:	4547      	cmp	r7, r8
 8021798:	dc88      	bgt.n	80216ac <draw_border_generic+0x3a2>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 802179a:	2600      	movs	r6, #0
 802179c:	3601      	adds	r6, #1
 802179e:	9b06      	ldr	r3, [sp, #24]
 80217a0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80217a4:	4433      	add	r3, r6
 80217a6:	429a      	cmp	r2, r3
 80217a8:	db80      	blt.n	80216ac <draw_border_generic+0x3a2>
                    blend_area.y1 = h;
 80217aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 80217ac:	4629      	mov	r1, r5
 80217ae:	9822      	ldr	r0, [sp, #136]	; 0x88
                    blend_area.y1 = h;
 80217b0:	18f7      	adds	r7, r6, r3
 80217b2:	b23f      	sxth	r7, r7
 80217b4:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
                    blend_area.y2 = h;
 80217b8:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 80217bc:	f7ff fa0f 	bl	8020bde <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 80217c0:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80217c4:	4623      	mov	r3, r4
 80217c6:	463a      	mov	r2, r7
 80217c8:	9822      	ldr	r0, [sp, #136]	; 0x88
 80217ca:	f7e6 fd4f 	bl	800826c <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80217ce:	a91f      	add	r1, sp, #124	; 0x7c
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 80217d0:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80217d4:	4658      	mov	r0, fp
 80217d6:	f7fe fdfc 	bl	80203d2 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 80217da:	e7df      	b.n	802179c <draw_border_generic+0x492>
            if(left_side || top_side) {
 80217dc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80217e0:	4293      	cmp	r3, r2
 80217e2:	da27      	bge.n	8021834 <draw_border_generic+0x52a>
 80217e4:	9b02      	ldr	r3, [sp, #8]
 80217e6:	4599      	cmp	r9, r3
 80217e8:	da24      	bge.n	8021834 <draw_border_generic+0x52a>
            if(left_side || bottom_side) {
 80217ea:	4547      	cmp	r7, r8
 80217ec:	dcb8      	bgt.n	8021760 <draw_border_generic+0x456>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 80217ee:	2500      	movs	r5, #0
 80217f0:	3501      	adds	r5, #1
 80217f2:	9b06      	ldr	r3, [sp, #24]
 80217f4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80217f8:	442b      	add	r3, r5
 80217fa:	429a      	cmp	r2, r3
 80217fc:	dbb0      	blt.n	8021760 <draw_border_generic+0x456>
                    blend_area.y1 = h;
 80217fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 8021800:	4631      	mov	r1, r6
 8021802:	9822      	ldr	r0, [sp, #136]	; 0x88
                    blend_area.y1 = h;
 8021804:	eb05 0a03 	add.w	sl, r5, r3
 8021808:	fa0f fa8a 	sxth.w	sl, sl
 802180c:	f8ad a046 	strh.w	sl, [sp, #70]	; 0x46
                    blend_area.y2 = h;
 8021810:	f8ad a04a 	strh.w	sl, [sp, #74]	; 0x4a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 8021814:	f7ff f9e3 	bl	8020bde <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 8021818:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 802181c:	4623      	mov	r3, r4
 802181e:	4652      	mov	r2, sl
 8021820:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021822:	f7e6 fd23 	bl	800826c <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021826:	a91f      	add	r1, sp, #124	; 0x7c
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 8021828:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802182c:	4658      	mov	r0, fp
 802182e:	f7fe fdd0 	bl	80203d2 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 8021832:	e7dd      	b.n	80217f0 <draw_border_generic+0x4e6>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8021834:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8021838:	9b05      	ldr	r3, [sp, #20]
 802183a:	42ab      	cmp	r3, r5
 802183c:	dc04      	bgt.n	8021848 <draw_border_generic+0x53e>
            if(left_side || bottom_side) {
 802183e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8021842:	4293      	cmp	r3, r2
 8021844:	dad3      	bge.n	80217ee <draw_border_generic+0x4e4>
 8021846:	e7d0      	b.n	80217ea <draw_border_generic+0x4e0>
                    blend_area.y1 = h;
 8021848:	fa0f fa85 	sxth.w	sl, r5
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 802184c:	4631      	mov	r1, r6
 802184e:	9822      	ldr	r0, [sp, #136]	; 0x88
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8021850:	3501      	adds	r5, #1
                    blend_area.y1 = h;
 8021852:	f8ad a046 	strh.w	sl, [sp, #70]	; 0x46
                    blend_area.y2 = h;
 8021856:	f8ad a04a 	strh.w	sl, [sp, #74]	; 0x4a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 802185a:	f7ff f9c0 	bl	8020bde <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 802185e:	4623      	mov	r3, r4
 8021860:	4652      	mov	r2, sl
 8021862:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8021866:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021868:	f7e6 fd00 	bl	800826c <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802186c:	a91f      	add	r1, sp, #124	; 0x7c
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 802186e:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8021872:	4658      	mov	r0, fp
 8021874:	f7fe fdad 	bl	80203d2 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8021878:	e7de      	b.n	8021838 <draw_border_generic+0x52e>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 802187a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 802187e:	9b05      	ldr	r3, [sp, #20]
 8021880:	42b3      	cmp	r3, r6
 8021882:	dc04      	bgt.n	802188e <draw_border_generic+0x584>
            if(right_side || bottom_side) {
 8021884:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021888:	4293      	cmp	r3, r2
 802188a:	dd86      	ble.n	802179a <draw_border_generic+0x490>
 802188c:	e783      	b.n	8021796 <draw_border_generic+0x48c>
                    blend_area.y1 = h;
 802188e:	fa0f f986 	sxth.w	r9, r6
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 8021892:	4629      	mov	r1, r5
 8021894:	9822      	ldr	r0, [sp, #136]	; 0x88
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8021896:	3601      	adds	r6, #1
                    blend_area.y1 = h;
 8021898:	f8ad 9046 	strh.w	r9, [sp, #70]	; 0x46
                    blend_area.y2 = h;
 802189c:	f8ad 904a 	strh.w	r9, [sp, #74]	; 0x4a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 80218a0:	f7ff f99d 	bl	8020bde <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 80218a4:	4623      	mov	r3, r4
 80218a6:	464a      	mov	r2, r9
 80218a8:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80218ac:	9822      	ldr	r0, [sp, #136]	; 0x88
 80218ae:	f7e6 fcdd 	bl	800826c <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80218b2:	a91f      	add	r1, sp, #124	; 0x7c
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 80218b4:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80218b8:	4658      	mov	r0, fp
 80218ba:	f7fe fd8a 	bl	80203d2 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 80218be:	e7de      	b.n	802187e <draw_border_generic+0x574>

080218c0 <lv_draw_sw_rect>:
{
 80218c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218c4:	b0ab      	sub	sp, #172	; 0xac
 80218c6:	460c      	mov	r4, r1
 80218c8:	9208      	str	r2, [sp, #32]
    if(dsc->shadow_width == 0) return;
 80218ca:	f9b1 202e 	ldrsh.w	r2, [r1, #46]	; 0x2e
{
 80218ce:	9005      	str	r0, [sp, #20]
    if(dsc->shadow_width == 0) return;
 80218d0:	2a00      	cmp	r2, #0
 80218d2:	f000 8407 	beq.w	80220e4 <lv_draw_sw_rect+0x824>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 80218d6:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
 80218da:	2b02      	cmp	r3, #2
 80218dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80218de:	f240 8401 	bls.w	80220e4 <lv_draw_sw_rect+0x824>
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 80218e2:	2a01      	cmp	r2, #1
 80218e4:	f9b1 3034 	ldrsh.w	r3, [r1, #52]	; 0x34
 80218e8:	d105      	bne.n	80218f6 <lv_draw_sw_rect+0x36>
 80218ea:	2b00      	cmp	r3, #0
 80218ec:	dc03      	bgt.n	80218f6 <lv_draw_sw_rect+0x36>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 80218ee:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80218f0:	2900      	cmp	r1, #0
 80218f2:	f000 83f7 	beq.w	80220e4 <lv_draw_sw_rect+0x824>
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 80218f6:	9808      	ldr	r0, [sp, #32]
 80218f8:	fa1f f983 	uxth.w	r9, r3
 80218fc:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 80218fe:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 8021902:	8807      	ldrh	r7, [r0, #0]
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 8021904:	9e08      	ldr	r6, [sp, #32]
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 8021906:	f3c2 024f 	ubfx	r2, r2, #1, #16
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 802190a:	8880      	ldrh	r0, [r0, #4]
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 802190c:	440f      	add	r7, r1
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 802190e:	fa11 f183 	uxtah	r1, r1, r3
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 8021912:	8876      	ldrh	r6, [r6, #2]
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 8021914:	b2bf      	uxth	r7, r7
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 8021916:	4401      	add	r1, r0
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 8021918:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 802191a:	4406      	add	r6, r0
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 802191c:	fa10 f383 	uxtah	r3, r0, r3
 8021920:	9808      	ldr	r0, [sp, #32]
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 8021922:	b28d      	uxth	r5, r1
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 8021924:	b2b6      	uxth	r6, r6
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 8021926:	88c0      	ldrh	r0, [r0, #6]
 8021928:	4403      	add	r3, r0
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 802192a:	eba7 0009 	sub.w	r0, r7, r9
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 802192e:	3801      	subs	r0, #1
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 8021930:	fa1f f883 	uxth.w	r8, r3
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 8021934:	1a80      	subs	r0, r0, r2
 8021936:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 802193a:	1c50      	adds	r0, r2, #1
 802193c:	b280      	uxth	r0, r0
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 802193e:	fa10 f383 	uxtah	r3, r0, r3
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 8021942:	fa10 f181 	uxtah	r1, r0, r1
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 8021946:	a815      	add	r0, sp, #84	; 0x54
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 8021948:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 802194c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 802194e:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 8021952:	eba6 0109 	sub.w	r1, r6, r9
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8021956:	2bfe      	cmp	r3, #254	; 0xfe
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 8021958:	f101 31ff 	add.w	r1, r1, #4294967295
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 802195c:	bf28      	it	cs
 802195e:	23ff      	movcs	r3, #255	; 0xff
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 8021960:	1a8a      	subs	r2, r1, r2
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 8021962:	a913      	add	r1, sp, #76	; 0x4c
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8021964:	930b      	str	r3, [sp, #44]	; 0x2c
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 8021966:	9b05      	ldr	r3, [sp, #20]
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 8021968:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 802196c:	689a      	ldr	r2, [r3, #8]
 802196e:	f002 fc80 	bl	8024272 <_lv_area_intersect>
 8021972:	9006      	str	r0, [sp, #24]
 8021974:	2800      	cmp	r0, #0
 8021976:	f000 83b5 	beq.w	80220e4 <lv_draw_sw_rect+0x824>
    dest->x1 = src->x1;
 802197a:	9b08      	ldr	r3, [sp, #32]
    lv_area_increase(&bg_area, -1, -1);
 802197c:	f04f 32ff 	mov.w	r2, #4294967295
 8021980:	a817      	add	r0, sp, #92	; 0x5c
 8021982:	f109 0901 	add.w	r9, r9, #1
 8021986:	881b      	ldrh	r3, [r3, #0]
 8021988:	4611      	mov	r1, r2
 802198a:	fa15 f589 	uxtah	r5, r5, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802198e:	eba8 0806 	sub.w	r8, r8, r6
    dest->x1 = src->x1;
 8021992:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    dest->y1 = src->y1;
 8021996:	9b08      	ldr	r3, [sp, #32]
 8021998:	fa1f fa85 	uxth.w	sl, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802199c:	fa18 f989 	uxtah	r9, r8, r9
    dest->y1 = src->y1;
 80219a0:	885b      	ldrh	r3, [r3, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80219a2:	ebaa 0807 	sub.w	r8, sl, r7
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 80219a6:	eba7 070a 	sub.w	r7, r7, sl
    for(y = 0; y < size; y++) {
 80219aa:	f04f 0a00 	mov.w	sl, #0
    dest->y1 = src->y1;
 80219ae:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 80219b2:	fa0f f888 	sxth.w	r8, r8
    dest->x2 = src->x2;
 80219b6:	9b08      	ldr	r3, [sp, #32]
 80219b8:	889b      	ldrh	r3, [r3, #4]
 80219ba:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    dest->y2 = src->y2;
 80219be:	9b08      	ldr	r3, [sp, #32]
 80219c0:	88db      	ldrh	r3, [r3, #6]
 80219c2:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    lv_area_increase(&bg_area, -1, -1);
 80219c6:	f002 fc34 	bl	8024232 <lv_area_increase>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80219ca:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 80219ce:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 80219d2:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80219d4:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
    int32_t r_bg = dsc->radius;
 80219d8:	f9b4 3000 	ldrsh.w	r3, [r4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80219dc:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80219de:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
 80219e2:	3101      	adds	r1, #1
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 80219e4:	b212      	sxth	r2, r2
 80219e6:	1a09      	subs	r1, r1, r0
 80219e8:	b209      	sxth	r1, r1
 80219ea:	428a      	cmp	r2, r1
 80219ec:	bfa8      	it	ge
 80219ee:	460a      	movge	r2, r1
 80219f0:	fa1f f189 	uxth.w	r1, r9
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 80219f4:	fa0f f989 	sxth.w	r9, r9
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 80219f8:	1052      	asrs	r2, r2, #1
 80219fa:	910a      	str	r1, [sp, #40]	; 0x28
 80219fc:	429a      	cmp	r2, r3
 80219fe:	bfa8      	it	ge
 8021a00:	461a      	movge	r2, r3
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 8021a02:	45c8      	cmp	r8, r9
 8021a04:	bfa8      	it	ge
 8021a06:	46c8      	movge	r8, r9
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 8021a08:	9209      	str	r2, [sp, #36]	; 0x24
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 8021a0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8021a0e:	4598      	cmp	r8, r3
 8021a10:	bfa8      	it	ge
 8021a12:	4698      	movge	r8, r3
    int32_t corner_size = dsc->shadow_width  + r_sh;
 8021a14:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 8021a18:	eb03 0b08 	add.w	fp, r3, r8
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 8021a1c:	fb0b f00b 	mul.w	r0, fp, fp
 8021a20:	0040      	lsls	r0, r0, #1
 8021a22:	f7f0 fe95 	bl	8012750 <lv_mem_buf_get>
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 8021a26:	f9b4 502e 	ldrsh.w	r5, [r4, #46]	; 0x2e
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 8021a2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021a2c:	f005 0201 	and.w	r2, r5, #1
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8021a30:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
    int32_t size = sw_ori  + r;
 8021a34:	eb08 0605 	add.w	r6, r8, r5
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 8021a38:	9007      	str	r0, [sp, #28]
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8021a3a:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8021a3e:	920c      	str	r2, [sp, #48]	; 0x30
 8021a40:	f065 0201 	orn	r2, r5, #1
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 8021a44:	a823      	add	r0, sp, #140	; 0x8c
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8021a46:	441a      	add	r2, r3
    sh_area.y1 = sw / 2 + 1;
 8021a48:	3301      	adds	r3, #1
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8021a4a:	4442      	add	r2, r8
    sh_area.y1 = sw / 2 + 1;
 8021a4c:	b29b      	uxth	r3, r3
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8021a4e:	b292      	uxth	r2, r2
    sh_area.y1 = sw / 2 + 1;
 8021a50:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 8021a54:	440b      	add	r3, r1
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 8021a56:	a91d      	add	r1, sp, #116	; 0x74
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8021a58:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 8021a5c:	443a      	add	r2, r7
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 8021a5e:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 8021a62:	2300      	movs	r3, #0
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 8021a64:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 8021a68:	4642      	mov	r2, r8
 8021a6a:	f7e6 fd61 	bl	8008530 <lv_draw_mask_radius_init>
    if(sw_ori == 1) sw = 1;
 8021a6e:	2d01      	cmp	r5, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 8021a70:	4630      	mov	r0, r6
    else sw = sw_ori >> 1;
 8021a72:	bf18      	it	ne
 8021a74:	106d      	asrne	r5, r5, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 8021a76:	f7f0 fe6b 	bl	8012750 <lv_mem_buf_get>
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 8021a7a:	f8dd 901c 	ldr.w	r9, [sp, #28]
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 8021a7e:	0073      	lsls	r3, r6, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 8021a80:	4680      	mov	r8, r0
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 8021a82:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 8021a84:	b233      	sxth	r3, r6
 8021a86:	930d      	str	r3, [sp, #52]	; 0x34
    for(y = 0; y < size; y++) {
 8021a88:	4556      	cmp	r6, sl
 8021a8a:	dc0c      	bgt.n	8021aa6 <lv_draw_sw_rect+0x1e6>
    lv_mem_buf_release(mask_line);
 8021a8c:	4640      	mov	r0, r8
    for(x = 0; x < size * size; x++) {
 8021a8e:	fb06 f706 	mul.w	r7, r6, r6
    lv_mem_buf_release(mask_line);
 8021a92:	f7f0 fea7 	bl	80127e4 <lv_mem_buf_release>
    lv_draw_mask_free_param(&mask_param);
 8021a96:	a823      	add	r0, sp, #140	; 0x8c
 8021a98:	f7fd fc44 	bl	801f324 <lv_draw_mask_free_param>
    if(sw == 1) {
 8021a9c:	2d01      	cmp	r5, #1
 8021a9e:	f040 83f2 	bne.w	8022286 <lv_draw_sw_rect+0x9c6>
        for(i = 0; i < size * size; i++) {
 8021aa2:	2300      	movs	r3, #0
 8021aa4:	e03b      	b.n	8021b1e <lv_draw_sw_rect+0x25e>
        lv_memset_ff(mask_line, size);
 8021aa6:	4631      	mov	r1, r6
 8021aa8:	4640      	mov	r0, r8
 8021aaa:	f7ff f898 	bl	8020bde <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 8021aae:	ab23      	add	r3, sp, #140	; 0x8c
 8021ab0:	2100      	movs	r1, #0
 8021ab2:	fa0f f28a 	sxth.w	r2, sl
 8021ab6:	9300      	str	r3, [sp, #0]
 8021ab8:	4640      	mov	r0, r8
 8021aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021abc:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8021abe:	47b8      	blx	r7
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8021ac0:	4601      	mov	r1, r0
 8021ac2:	b940      	cbnz	r0, 8021ad6 <lv_draw_sw_rect+0x216>
 8021ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021ac6:	4648      	mov	r0, r9
 8021ac8:	f7f8 fe2a 	bl	801a720 <memset>
        sh_ups_tmp_buf += size;
 8021acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    for(y = 0; y < size; y++) {
 8021ace:	f10a 0a01 	add.w	sl, sl, #1
        sh_ups_tmp_buf += size;
 8021ad2:	4499      	add	r9, r3
    for(y = 0; y < size; y++) {
 8021ad4:	e7d8      	b.n	8021a88 <lv_draw_sw_rect+0x1c8>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 8021ad6:	f898 3000 	ldrb.w	r3, [r8]
 8021ada:	464a      	mov	r2, r9
 8021adc:	4641      	mov	r1, r8
 8021ade:	019b      	lsls	r3, r3, #6
 8021ae0:	fb93 f3f5 	sdiv	r3, r3, r5
 8021ae4:	f822 3b02 	strh.w	r3, [r2], #2
            for(i = 1; i < size; i++) {
 8021ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021aea:	eb03 0009 	add.w	r0, r3, r9
 8021aee:	4290      	cmp	r0, r2
 8021af0:	d0ec      	beq.n	8021acc <lv_draw_sw_rect+0x20c>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 8021af2:	460f      	mov	r7, r1
 8021af4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021af8:	783f      	ldrb	r7, [r7, #0]
 8021afa:	429f      	cmp	r7, r3
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 8021afc:	bf17      	itett	ne
 8021afe:	019b      	lslne	r3, r3, #6
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 8021b00:	f832 3c02 	ldrheq.w	r3, [r2, #-2]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 8021b04:	fb93 f3f5 	sdivne	r3, r3, r5
 8021b08:	b29b      	uxthne	r3, r3
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 8021b0a:	f822 3b02 	strh.w	r3, [r2], #2
            for(i = 1; i < size; i++) {
 8021b0e:	e7ee      	b.n	8021aee <lv_draw_sw_rect+0x22e>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 8021b10:	9a07      	ldr	r2, [sp, #28]
 8021b12:	9907      	ldr	r1, [sp, #28]
 8021b14:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8021b18:	0992      	lsrs	r2, r2, #6
 8021b1a:	54ca      	strb	r2, [r1, r3]
        for(i = 0; i < size * size; i++) {
 8021b1c:	3301      	adds	r3, #1
 8021b1e:	42bb      	cmp	r3, r7
 8021b20:	d1f6      	bne.n	8021b10 <lv_draw_sw_rect+0x250>
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
 8021b22:	a813      	add	r0, sp, #76	; 0x4c
 8021b24:	f7e6 fbfa 	bl	800831c <lv_draw_mask_is_any>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 8021b28:	2800      	cmp	r0, #0
 8021b2a:	f000 83de 	beq.w	80222ea <lv_draw_sw_rect+0xa2a>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 8021b2e:	2301      	movs	r3, #1
 8021b30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021b32:	a917      	add	r1, sp, #92	; 0x5c
 8021b34:	a81d      	add	r0, sp, #116	; 0x74
 8021b36:	f7e6 fcfb 	bl	8008530 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8021b3a:	2100      	movs	r1, #0
 8021b3c:	a81d      	add	r0, sp, #116	; 0x74
 8021b3e:	f7e6 fb7f 	bl	8008240 <lv_draw_mask_add>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 8021b42:	2300      	movs	r3, #0
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8021b44:	900f      	str	r0, [sp, #60]	; 0x3c
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 8021b46:	9306      	str	r3, [sp, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8021b48:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
 8021b4c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8021b50:	3001      	adds	r0, #1
 8021b52:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 8021b54:	b200      	sxth	r0, r0
 8021b56:	f7f0 fdfb 	bl	8012750 <lv_mem_buf_get>
 8021b5a:	221c      	movs	r2, #28
 8021b5c:	4605      	mov	r5, r0
 8021b5e:	2100      	movs	r1, #0
 8021b60:	a823      	add	r0, sp, #140	; 0x8c
 8021b62:	f7f8 fddd 	bl	801a720 <memset>
    blend_dsc.color = dsc->shadow_color;
 8021b66:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8021b68:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
    blend_dsc.blend_area = &blend_area;
 8021b6c:	a919      	add	r1, sp, #100	; 0x64
    blend_dsc.color = dsc->shadow_color;
 8021b6e:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
    blend_dsc.opa = dsc->shadow_opa;
 8021b72:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8021b76:	1c70      	adds	r0, r6, #1
    blend_area.x2 = shadow_area.x2;
 8021b78:	f8ad 6068 	strh.w	r6, [sp, #104]	; 0x68
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021b7c:	fa1f f68b 	uxth.w	r6, fp
    blend_dsc.opa = dsc->shadow_opa;
 8021b80:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
 8021b84:	b280      	uxth	r0, r0
    blend_dsc.blend_mode = dsc->blend_mode;
 8021b86:	78a3      	ldrb	r3, [r4, #2]
    blend_dsc.blend_area = &blend_area;
 8021b88:	9123      	str	r1, [sp, #140]	; 0x8c
    blend_dsc.blend_mode = dsc->blend_mode;
 8021b8a:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 8021b8e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    blend_dsc.mask_area = &blend_area;
 8021b92:	9128      	str	r1, [sp, #160]	; 0xa0
 8021b94:	1ac2      	subs	r2, r0, r3
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021b96:	1b80      	subs	r0, r0, r6
    blend_dsc.mask_buf = mask_buf;
 8021b98:	9526      	str	r5, [sp, #152]	; 0x98
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 8021b9a:	f3c2 37c0 	ubfx	r7, r2, #15, #1
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021b9e:	b200      	sxth	r0, r0
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 8021ba0:	fa07 f282 	sxtah	r2, r7, r2
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 8021ba4:	f9bd 704e 	ldrsh.w	r7, [sp, #78]	; 0x4e
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 8021ba8:	eb03 0362 	add.w	r3, r3, r2, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8021bac:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
    blend_area.y1 = shadow_area.y1;
 8021bb0:	f8ad 7066 	strh.w	r7, [sp, #102]	; 0x66
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 8021bb4:	b21b      	sxth	r3, r3
 8021bb6:	3201      	adds	r2, #1
 8021bb8:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 8021bba:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8021bbe:	1ad2      	subs	r2, r2, r3
 8021bc0:	f3c2 3cc0 	ubfx	ip, r2, #15, #1
 8021bc4:	fa0c f282 	sxtah	r2, ip, r2
 8021bc8:	eb03 0262 	add.w	r2, r3, r2, asr #1
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 8021bcc:	3b01      	subs	r3, #1
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 8021bce:	fa1f fc82 	uxth.w	ip, r2
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 8021bd2:	4433      	add	r3, r6
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 8021bd4:	b212      	sxth	r2, r2
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021bd6:	b21b      	sxth	r3, r3
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 8021bd8:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8021bdc:	920a      	str	r2, [sp, #40]	; 0x28
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021be0:	4290      	cmp	r0, r2
 8021be2:	bfb8      	it	lt
 8021be4:	4610      	movlt	r0, r2
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021be6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021be8:	4293      	cmp	r3, r2
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021bea:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021bee:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021bf0:	bfa8      	it	ge
 8021bf2:	4613      	movge	r3, r2
 8021bf4:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021bf8:	9b05      	ldr	r3, [sp, #20]
 8021bfa:	689a      	ldr	r2, [r3, #8]
 8021bfc:	f002 fb39 	bl	8024272 <_lv_area_intersect>
 8021c00:	2800      	cmp	r0, #0
 8021c02:	f040 837b 	bne.w	80222fc <lv_draw_sw_rect+0xa3c>
    blend_area.x2 = shadow_area.x2;
 8021c06:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021c0a:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021c0c:	990c      	ldr	r1, [sp, #48]	; 0x30
    blend_area.x2 = shadow_area.x2;
 8021c0e:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021c12:	3201      	adds	r2, #1
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8021c14:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021c18:	1b92      	subs	r2, r2, r6
    blend_area.y2 = shadow_area.y2;
 8021c1a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8021c1e:	3301      	adds	r3, #1
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021c20:	b212      	sxth	r2, r2
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8021c22:	1b9b      	subs	r3, r3, r6
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021c24:	428a      	cmp	r2, r1
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8021c26:	b21b      	sxth	r3, r3
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021c28:	bfb8      	it	lt
 8021c2a:	460a      	movlt	r2, r1
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021c2c:	a919      	add	r1, sp, #100	; 0x64
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021c2e:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8021c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021c34:	3201      	adds	r2, #1
 8021c36:	4293      	cmp	r3, r2
 8021c38:	920d      	str	r2, [sp, #52]	; 0x34
 8021c3a:	bfb8      	it	lt
 8021c3c:	4613      	movlt	r3, r2
 8021c3e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021c42:	9b05      	ldr	r3, [sp, #20]
 8021c44:	689a      	ldr	r2, [r3, #8]
 8021c46:	f002 fb14 	bl	8024272 <_lv_area_intersect>
 8021c4a:	2800      	cmp	r0, #0
 8021c4c:	d043      	beq.n	8021cd6 <lv_draw_sw_rect+0x416>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8021c4e:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8021c52:	a917      	add	r1, sp, #92	; 0x5c
 8021c54:	a81b      	add	r0, sp, #108	; 0x6c
 8021c56:	9210      	str	r2, [sp, #64]	; 0x40
 8021c58:	f002 fc0a 	bl	8024470 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021c5c:	2800      	cmp	r0, #0
 8021c5e:	d13a      	bne.n	8021cd6 <lv_draw_sw_rect+0x416>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8021c60:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 8021c64:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8021c68:	f108 0801 	add.w	r8, r8, #1
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021c6c:	9906      	ldr	r1, [sp, #24]
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021c6e:	f9bd a06a 	ldrsh.w	sl, [sp, #106]	; 0x6a
 8021c72:	eba8 0807 	sub.w	r8, r8, r7
 8021c76:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8021c7a:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 8021c7e:	fa0f f888 	sxth.w	r8, r8
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021c82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021c84:	b129      	cbz	r1, 8021c92 <lv_draw_sw_rect+0x3d2>
 8021c86:	a917      	add	r1, sp, #92	; 0x5c
 8021c88:	a81b      	add	r0, sp, #108	; 0x6c
 8021c8a:	9310      	str	r3, [sp, #64]	; 0x40
 8021c8c:	f002 fc39 	bl	8024502 <_lv_area_is_out>
 8021c90:	9b10      	ldr	r3, [sp, #64]	; 0x40
        if(w > 0) {
 8021c92:	f1b8 0f00 	cmp.w	r8, #0
 8021c96:	dd1e      	ble.n	8021cd6 <lv_draw_sw_rect+0x416>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8021c98:	eba9 090b 	sub.w	r9, r9, fp
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021c9c:	ebaa 0a03 	sub.w	sl, sl, r3
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8021ca0:	9b07      	ldr	r3, [sp, #28]
 8021ca2:	f109 0901 	add.w	r9, r9, #1
            blend_dsc.mask_buf = mask_buf;
 8021ca6:	9526      	str	r5, [sp, #152]	; 0x98
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8021ca8:	eba7 0709 	sub.w	r7, r7, r9
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8021cac:	f9bd 9072 	ldrsh.w	r9, [sp, #114]	; 0x72
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8021cb0:	fb0b 770a 	mla	r7, fp, sl, r7
 8021cb4:	441f      	add	r7, r3
            blend_area.x1 = clip_area_sub.x1;
 8021cb6:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8021cba:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8021cbe:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8021cc2:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8021cc6:	2302      	movs	r3, #2
 8021cc8:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8021ccc:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8021cd0:	454b      	cmp	r3, r9
 8021cd2:	f340 837e 	ble.w	80223d2 <lv_draw_sw_rect+0xb12>
    blend_area.x1 = shadow_area.x1 + corner_size;
 8021cd6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021cda:	a919      	add	r1, sp, #100	; 0x64
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021cde:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.x1 = shadow_area.x1 + corner_size;
 8021ce0:	4433      	add	r3, r6
 8021ce2:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x2 - corner_size;
 8021ce6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8021cea:	1b9b      	subs	r3, r3, r6
 8021cec:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y1;
 8021cf0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021cf4:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 8021cf8:	3b01      	subs	r3, #1
 8021cfa:	4433      	add	r3, r6
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021cfc:	b21b      	sxth	r3, r3
 8021cfe:	4293      	cmp	r3, r2
 8021d00:	bfa8      	it	ge
 8021d02:	4613      	movge	r3, r2
 8021d04:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021d08:	9b05      	ldr	r3, [sp, #20]
 8021d0a:	689a      	ldr	r2, [r3, #8]
 8021d0c:	f002 fab1 	bl	8024272 <_lv_area_intersect>
 8021d10:	b1e0      	cbz	r0, 8021d4c <lv_draw_sw_rect+0x48c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8021d12:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021d16:	a917      	add	r1, sp, #92	; 0x5c
 8021d18:	a81b      	add	r0, sp, #108	; 0x6c
 8021d1a:	464a      	mov	r2, r9
 8021d1c:	f002 fba8 	bl	8024470 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021d20:	4680      	mov	r8, r0
 8021d22:	b998      	cbnz	r0, 8021d4c <lv_draw_sw_rect+0x48c>
 8021d24:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 8021d28:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8021d2c:	3701      	adds	r7, #1
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021d2e:	9a06      	ldr	r2, [sp, #24]
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8021d30:	f9bd a06e 	ldrsh.w	sl, [sp, #110]	; 0x6e
 8021d34:	1aff      	subs	r7, r7, r3
 8021d36:	b2bb      	uxth	r3, r7
 8021d38:	b23f      	sxth	r7, r7
 8021d3a:	9310      	str	r3, [sp, #64]	; 0x40
 8021d3c:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021d40:	2a00      	cmp	r2, #0
 8021d42:	f040 836b 	bne.w	802241c <lv_draw_sw_rect+0xb5c>
        if(w > 0) {
 8021d46:	2f00      	cmp	r7, #0
 8021d48:	f300 83b4 	bgt.w	80224b4 <lv_draw_sw_rect+0xbf4>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 8021d4c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021d50:	a919      	add	r1, sp, #100	; 0x64
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8021d52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021d54:	a81b      	add	r0, sp, #108	; 0x6c
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 8021d56:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    blend_area.x1 = shadow_area.x1 + corner_size;
 8021d5a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8021d5e:	4433      	add	r3, r6
 8021d60:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x2 - corner_size;
 8021d64:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8021d68:	1b9b      	subs	r3, r3, r6
 8021d6a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8021d6e:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    blend_area.y2 = shadow_area.y2;
 8021d72:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8021d76:	3301      	adds	r3, #1
 8021d78:	1b9b      	subs	r3, r3, r6
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8021d7a:	b21b      	sxth	r3, r3
 8021d7c:	4293      	cmp	r3, r2
 8021d7e:	bfb8      	it	lt
 8021d80:	4613      	movlt	r3, r2
 8021d82:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021d86:	9b05      	ldr	r3, [sp, #20]
 8021d88:	689a      	ldr	r2, [r3, #8]
 8021d8a:	f002 fa72 	bl	8024272 <_lv_area_intersect>
 8021d8e:	2800      	cmp	r0, #0
 8021d90:	d038      	beq.n	8021e04 <lv_draw_sw_rect+0x544>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8021d92:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8021d96:	a917      	add	r1, sp, #92	; 0x5c
 8021d98:	a81b      	add	r0, sp, #108	; 0x6c
 8021d9a:	4652      	mov	r2, sl
 8021d9c:	f002 fb68 	bl	8024470 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021da0:	4680      	mov	r8, r0
 8021da2:	bb78      	cbnz	r0, 8021e04 <lv_draw_sw_rect+0x544>
 8021da4:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 8021da8:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8021dac:	3701      	adds	r7, #1
 8021dae:	1aff      	subs	r7, r7, r3
 8021db0:	b2bb      	uxth	r3, r7
 8021db2:	b23f      	sxth	r7, r7
 8021db4:	9310      	str	r3, [sp, #64]	; 0x40
        if(w > 0) {
 8021db6:	2f00      	cmp	r7, #0
 8021db8:	dd24      	ble.n	8021e04 <lv_draw_sw_rect+0x544>
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021dba:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8021dbe:	f9bd 906a 	ldrsh.w	r9, [sp, #106]	; 0x6a
 8021dc2:	9311      	str	r3, [sp, #68]	; 0x44
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021dc4:	9b06      	ldr	r3, [sp, #24]
 8021dc6:	2b00      	cmp	r3, #0
 8021dc8:	f000 8381 	beq.w	80224ce <lv_draw_sw_rect+0xc0e>
 8021dcc:	4652      	mov	r2, sl
 8021dce:	a917      	add	r1, sp, #92	; 0x5c
 8021dd0:	a81b      	add	r0, sp, #108	; 0x6c
 8021dd2:	f002 fb96 	bl	8024502 <_lv_area_is_out>
 8021dd6:	4643      	mov	r3, r8
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021dd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
                blend_dsc.mask_buf = mask_buf;
 8021dda:	9326      	str	r3, [sp, #152]	; 0x98
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021ddc:	eba9 0902 	sub.w	r9, r9, r2
            blend_area.x1 = clip_area_sub.x1;
 8021de0:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021de4:	9a07      	ldr	r2, [sp, #28]
            blend_area.x1 = clip_area_sub.x1;
 8021de6:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021dea:	fb0b 2909 	mla	r9, fp, r9, r2
            blend_area.x2 = clip_area_sub.x2;
 8021dee:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8021df2:	f9bd 8072 	ldrsh.w	r8, [sp, #114]	; 0x72
            blend_area.x2 = clip_area_sub.x2;
 8021df6:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8021dfa:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8021dfe:	4543      	cmp	r3, r8
 8021e00:	f340 8367 	ble.w	80224d2 <lv_draw_sw_rect+0xc12>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 8021e04:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    blend_area.y2 = shadow_area.y2 - corner_size;
 8021e08:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 8021e0c:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021e10:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    blend_area.y2 = shadow_area.y2 - corner_size;
 8021e14:	1b89      	subs	r1, r1, r6
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8021e16:	980a      	ldr	r0, [sp, #40]	; 0x28
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021e18:	1c5a      	adds	r2, r3, #1
    blend_area.x2 = shadow_area.x2;
 8021e1a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y1 + corner_size;
 8021e1e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
    blend_area.y2 = shadow_area.y2 - corner_size;
 8021e22:	b209      	sxth	r1, r1
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021e24:	1b92      	subs	r2, r2, r6
    blend_area.y1 = shadow_area.y1 + corner_size;
 8021e26:	4433      	add	r3, r6
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8021e28:	b212      	sxth	r2, r2
    blend_area.y1 = shadow_area.y1 + corner_size;
 8021e2a:	b21b      	sxth	r3, r3
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8021e2c:	4298      	cmp	r0, r3
 8021e2e:	da02      	bge.n	8021e36 <lv_draw_sw_rect+0x576>
 8021e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021e32:	3301      	adds	r3, #1
 8021e34:	b21b      	sxth	r3, r3
 8021e36:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021e3a:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 8021e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e3e:	428b      	cmp	r3, r1
 8021e40:	bfb8      	it	lt
 8021e42:	460b      	movlt	r3, r1
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021e44:	a919      	add	r1, sp, #100	; 0x64
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 8021e46:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e4c:	429a      	cmp	r2, r3
 8021e4e:	bfb8      	it	lt
 8021e50:	461a      	movlt	r2, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021e52:	9b05      	ldr	r3, [sp, #20]
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8021e54:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021e58:	689a      	ldr	r2, [r3, #8]
 8021e5a:	f002 fa0a 	bl	8024272 <_lv_area_intersect>
 8021e5e:	2800      	cmp	r0, #0
 8021e60:	f040 836b 	bne.w	802253a <lv_draw_sw_rect+0xc7a>
        for(x = 0; x < corner_size / 2; x++) {
 8021e64:	eb0b 70db 	add.w	r0, fp, fp, lsr #31
 8021e68:	9b07      	ldr	r3, [sp, #28]
 8021e6a:	2100      	movs	r1, #0
 8021e6c:	1040      	asrs	r0, r0, #1
 8021e6e:	3b01      	subs	r3, #1
    for(y = 0; y < corner_size; y++) {
 8021e70:	b20a      	sxth	r2, r1
 8021e72:	4593      	cmp	fp, r2
 8021e74:	f300 83c5 	bgt.w	8022602 <lv_draw_sw_rect+0xd42>
    blend_area.y1 = shadow_area.y1 + corner_size;
 8021e78:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8021e7c:	980a      	ldr	r0, [sp, #40]	; 0x28
    blend_area.y1 = shadow_area.y1 + corner_size;
 8021e7e:	4431      	add	r1, r6
    blend_area.y2 = shadow_area.y2 - corner_size;
 8021e80:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
    blend_area.x1 = shadow_area.x1;
 8021e84:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    blend_area.y1 = shadow_area.y1 + corner_size;
 8021e88:	b209      	sxth	r1, r1
    blend_area.y2 = shadow_area.y2 - corner_size;
 8021e8a:	1b92      	subs	r2, r2, r6
    blend_area.x1 = shadow_area.x1;
 8021e8c:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8021e90:	3b01      	subs	r3, #1
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8021e92:	4288      	cmp	r0, r1
    blend_area.y2 = shadow_area.y2 - corner_size;
 8021e94:	b212      	sxth	r2, r2
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8021e96:	4433      	add	r3, r6
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021e98:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8021e9a:	bfb8      	it	lt
 8021e9c:	990e      	ldrlt	r1, [sp, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8021e9e:	b21b      	sxth	r3, r3
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8021ea0:	bfbc      	itt	lt
 8021ea2:	3101      	addlt	r1, #1
 8021ea4:	b209      	sxthlt	r1, r1
 8021ea6:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 8021eaa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021eac:	428a      	cmp	r2, r1
 8021eae:	bfb8      	it	lt
 8021eb0:	460a      	movlt	r2, r1
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021eb2:	a919      	add	r1, sp, #100	; 0x64
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 8021eb4:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8021eb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021eba:	f102 3aff 	add.w	sl, r2, #4294967295
 8021ebe:	4553      	cmp	r3, sl
 8021ec0:	bfa8      	it	ge
 8021ec2:	4653      	movge	r3, sl
 8021ec4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021ec8:	9b05      	ldr	r3, [sp, #20]
 8021eca:	689a      	ldr	r2, [r3, #8]
 8021ecc:	f002 f9d1 	bl	8024272 <_lv_area_intersect>
 8021ed0:	2800      	cmp	r0, #0
 8021ed2:	f040 83a9 	bne.w	8022628 <lv_draw_sw_rect+0xd68>
    blend_area.x1 = shadow_area.x1;
 8021ed6:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021eda:	a919      	add	r1, sp, #100	; 0x64
    blend_area.y1 = shadow_area.y1;
 8021edc:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021ee0:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.x1 = shadow_area.x1;
 8021ee2:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8021ee6:	3a01      	subs	r2, #1
    blend_area.y1 = shadow_area.y1;
 8021ee8:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 8021eec:	3b01      	subs	r3, #1
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8021eee:	4432      	add	r2, r6
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 8021ef0:	4433      	add	r3, r6
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8021ef2:	b212      	sxth	r2, r2
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021ef4:	b21b      	sxth	r3, r3
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8021ef6:	4552      	cmp	r2, sl
 8021ef8:	bfa8      	it	ge
 8021efa:	4652      	movge	r2, sl
 8021efc:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8021f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021f02:	4293      	cmp	r3, r2
 8021f04:	bfa8      	it	ge
 8021f06:	4613      	movge	r3, r2
 8021f08:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021f0c:	9b05      	ldr	r3, [sp, #20]
 8021f0e:	689a      	ldr	r2, [r3, #8]
 8021f10:	f002 f9af 	bl	8024272 <_lv_area_intersect>
 8021f14:	2800      	cmp	r0, #0
 8021f16:	d040      	beq.n	8021f9a <lv_draw_sw_rect+0x6da>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8021f18:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8021f1c:	a917      	add	r1, sp, #92	; 0x5c
 8021f1e:	a81b      	add	r0, sp, #108	; 0x6c
 8021f20:	920b      	str	r2, [sp, #44]	; 0x2c
 8021f22:	f002 faa5 	bl	8024470 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021f26:	2800      	cmp	r0, #0
 8021f28:	d137      	bne.n	8021f9a <lv_draw_sw_rect+0x6da>
 8021f2a:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 8021f2e:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8021f32:	f108 0801 	add.w	r8, r8, #1
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8021f36:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021f3a:	9906      	ldr	r1, [sp, #24]
 8021f3c:	eba8 0807 	sub.w	r8, r8, r7
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8021f40:	930a      	str	r3, [sp, #40]	; 0x28
 8021f42:	f9bd 906e 	ldrsh.w	r9, [sp, #110]	; 0x6e
 8021f46:	fa0f f888 	sxth.w	r8, r8
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8021f4a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021f4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021f50:	b129      	cbz	r1, 8021f5e <lv_draw_sw_rect+0x69e>
 8021f52:	a917      	add	r1, sp, #92	; 0x5c
 8021f54:	a81b      	add	r0, sp, #108	; 0x6c
 8021f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8021f58:	f002 fad3 	bl	8024502 <_lv_area_is_out>
 8021f5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        if(w > 0) {
 8021f5e:	f1b8 0f00 	cmp.w	r8, #0
        blend_dsc.mask_buf = mask_buf;
 8021f62:	9526      	str	r5, [sp, #152]	; 0x98
        if(w > 0) {
 8021f64:	dd19      	ble.n	8021f9a <lv_draw_sw_rect+0x6da>
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8021f66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8021f68:	1aff      	subs	r7, r7, r3
 8021f6a:	9b07      	ldr	r3, [sp, #28]
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8021f6c:	eba9 0902 	sub.w	r9, r9, r2
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8021f70:	fb0b 7709 	mla	r7, fp, r9, r7
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8021f74:	f9bd 906e 	ldrsh.w	r9, [sp, #110]	; 0x6e
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8021f78:	441f      	add	r7, r3
            blend_area.x1 = clip_area_sub.x1;
 8021f7a:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8021f7e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8021f82:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8021f86:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8021f8a:	2302      	movs	r3, #2
 8021f8c:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8021f90:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8021f94:	454b      	cmp	r3, r9
 8021f96:	f280 83a8 	bge.w	80226ea <lv_draw_sw_rect+0xe2a>
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8021f9a:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021f9e:	a81b      	add	r0, sp, #108	; 0x6c
    blend_area.x1 = shadow_area.x1 ;
 8021fa0:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    blend_area.y2 = shadow_area.y2;
 8021fa4:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8021fa8:	3201      	adds	r2, #1
    blend_area.x1 = shadow_area.x1 ;
 8021faa:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8021fae:	3b01      	subs	r3, #1
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8021fb0:	1b92      	subs	r2, r2, r6
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8021fb2:	990d      	ldr	r1, [sp, #52]	; 0x34
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8021fb4:	4433      	add	r3, r6
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8021fb6:	b212      	sxth	r2, r2
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8021fb8:	b21b      	sxth	r3, r3
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8021fba:	428a      	cmp	r2, r1
 8021fbc:	bfb8      	it	lt
 8021fbe:	460a      	movlt	r2, r1
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8021fc0:	4553      	cmp	r3, sl
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021fc2:	a919      	add	r1, sp, #100	; 0x64
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8021fc4:	bfa8      	it	ge
 8021fc6:	4653      	movge	r3, sl
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8021fc8:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8021fcc:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021fd0:	9b05      	ldr	r3, [sp, #20]
 8021fd2:	689a      	ldr	r2, [r3, #8]
 8021fd4:	f002 f94d 	bl	8024272 <_lv_area_intersect>
 8021fd8:	2800      	cmp	r0, #0
 8021fda:	d03e      	beq.n	802205a <lv_draw_sw_rect+0x79a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8021fdc:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8021fe0:	a917      	add	r1, sp, #92	; 0x5c
 8021fe2:	a81b      	add	r0, sp, #108	; 0x6c
 8021fe4:	920a      	str	r2, [sp, #40]	; 0x28
 8021fe6:	f002 fa43 	bl	8024470 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8021fea:	bbb0      	cbnz	r0, 802205a <lv_draw_sw_rect+0x79a>
 8021fec:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 8021ff0:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8021ff4:	f108 0801 	add.w	r8, r8, #1
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8021ff8:	9906      	ldr	r1, [sp, #24]
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8021ffa:	f9bd 906a 	ldrsh.w	r9, [sp, #106]	; 0x6a
 8021ffe:	eba8 0807 	sub.w	r8, r8, r7
 8022002:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8022006:	f9bd a064 	ldrsh.w	sl, [sp, #100]	; 0x64
 802200a:	fa0f f888 	sxth.w	r8, r8
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 802200e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022010:	b129      	cbz	r1, 802201e <lv_draw_sw_rect+0x75e>
 8022012:	a917      	add	r1, sp, #92	; 0x5c
 8022014:	a81b      	add	r0, sp, #108	; 0x6c
 8022016:	930a      	str	r3, [sp, #40]	; 0x28
 8022018:	f002 fa73 	bl	8024502 <_lv_area_is_out>
 802201c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        if(w > 0) {
 802201e:	f1b8 0f00 	cmp.w	r8, #0
        blend_dsc.mask_buf = mask_buf;
 8022022:	9526      	str	r5, [sp, #152]	; 0x98
        if(w > 0) {
 8022024:	dd19      	ble.n	802205a <lv_draw_sw_rect+0x79a>
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8022026:	eba9 0903 	sub.w	r9, r9, r3
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 802202a:	eba7 070a 	sub.w	r7, r7, sl
 802202e:	9b07      	ldr	r3, [sp, #28]
 8022030:	fb0b 7709 	mla	r7, fp, r9, r7
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8022034:	f9bd 9072 	ldrsh.w	r9, [sp, #114]	; 0x72
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8022038:	441f      	add	r7, r3
            blend_area.x1 = clip_area_sub.x1;
 802203a:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 802203e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8022042:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8022046:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 802204a:	2302      	movs	r3, #2
 802204c:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8022050:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8022054:	454b      	cmp	r3, r9
 8022056:	f340 836d 	ble.w	8022734 <lv_draw_sw_rect+0xe74>
    blend_area.x1 = shadow_area.x1 + corner_size ;
 802205a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 802205e:	a919      	add	r1, sp, #100	; 0x64
 8022060:	a81b      	add	r0, sp, #108	; 0x6c
    blend_dsc.mask_buf = mask_buf;
 8022062:	9526      	str	r5, [sp, #152]	; 0x98
    blend_area.x1 = shadow_area.x1 + corner_size ;
 8022064:	4433      	add	r3, r6
 8022066:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x2 - corner_size;
 802206a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 802206e:	1b9b      	subs	r3, r3, r6
 8022070:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y1 + corner_size;
 8022074:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8022078:	4433      	add	r3, r6
 802207a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = shadow_area.y2 - corner_size;
 802207e:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8022082:	1b9b      	subs	r3, r3, r6
 8022084:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8022088:	9b05      	ldr	r3, [sp, #20]
 802208a:	689a      	ldr	r2, [r3, #8]
 802208c:	f002 f8f1 	bl	8024272 <_lv_area_intersect>
 8022090:	b1d0      	cbz	r0, 80220c8 <lv_draw_sw_rect+0x808>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8022092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022094:	a917      	add	r1, sp, #92	; 0x5c
 8022096:	a81b      	add	r0, sp, #108	; 0x6c
 8022098:	f002 f9ea 	bl	8024470 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 802209c:	b9a0      	cbnz	r0, 80220c8 <lv_draw_sw_rect+0x808>
 802209e:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 80220a2:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 80220a6:	1c5e      	adds	r6, r3, #1
 80220a8:	1ab6      	subs	r6, r6, r2
 80220aa:	b2b7      	uxth	r7, r6
 80220ac:	b236      	sxth	r6, r6
        if(w > 0) {
 80220ae:	2e00      	cmp	r6, #0
 80220b0:	dd0a      	ble.n	80220c8 <lv_draw_sw_rect+0x808>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80220b2:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
            blend_area.x1 = clip_area_sub.x1;
 80220b6:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 80220ba:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80220be:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 80220c2:	4543      	cmp	r3, r8
 80220c4:	f280 835b 	bge.w	802277e <lv_draw_sw_rect+0xebe>
    if(!simple) {
 80220c8:	9b06      	ldr	r3, [sp, #24]
 80220ca:	b92b      	cbnz	r3, 80220d8 <lv_draw_sw_rect+0x818>
        lv_draw_mask_free_param(&mask_rout_param);
 80220cc:	a81d      	add	r0, sp, #116	; 0x74
 80220ce:	f7fd f929 	bl	801f324 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rout_id);
 80220d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80220d4:	f7e6 f8ea 	bl	80082ac <lv_draw_mask_remove_id>
    lv_mem_buf_release(sh_buf);
 80220d8:	9807      	ldr	r0, [sp, #28]
 80220da:	f7f0 fb83 	bl	80127e4 <lv_mem_buf_release>
    lv_mem_buf_release(mask_buf);
 80220de:	4628      	mov	r0, r5
 80220e0:	f7f0 fb80 	bl	80127e4 <lv_mem_buf_release>
    draw_bg(draw_ctx, dsc, coords);
 80220e4:	9a08      	ldr	r2, [sp, #32]
 80220e6:	4621      	mov	r1, r4
 80220e8:	9805      	ldr	r0, [sp, #20]
 80220ea:	f7fe ff3a 	bl	8020f62 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 80220ee:	9a08      	ldr	r2, [sp, #32]
 80220f0:	4621      	mov	r1, r4
 80220f2:	9805      	ldr	r0, [sp, #20]
 80220f4:	f7fe fd77 	bl	8020be6 <draw_bg_img>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 80220f8:	f894 c022 	ldrb.w	ip, [r4, #34]	; 0x22
 80220fc:	f1bc 0f02 	cmp.w	ip, #2
 8022100:	d965      	bls.n	80221ce <lv_draw_sw_rect+0x90e>
    if(dsc->border_width == 0) return;
 8022102:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 8022106:	2a00      	cmp	r2, #0
 8022108:	d061      	beq.n	80221ce <lv_draw_sw_rect+0x90e>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 802210a:	f894 7023 	ldrb.w	r7, [r4, #35]	; 0x23
 802210e:	f017 0f3e 	tst.w	r7, #62	; 0x3e
 8022112:	d05c      	beq.n	80221ce <lv_draw_sw_rect+0x90e>
    if(dsc->border_post) return;
 8022114:	07fb      	lsls	r3, r7, #31
 8022116:	d45a      	bmi.n	80221ce <lv_draw_sw_rect+0x90e>
 8022118:	9b08      	ldr	r3, [sp, #32]
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 802211a:	f3c7 0844 	ubfx	r8, r7, #1, #5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802211e:	88d9      	ldrh	r1, [r3, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8022120:	889d      	ldrh	r5, [r3, #4]
 8022122:	881e      	ldrh	r6, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8022124:	f101 0e01 	add.w	lr, r1, #1
 8022128:	8858      	ldrh	r0, [r3, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802212a:	1c6b      	adds	r3, r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802212c:	ebae 0e00 	sub.w	lr, lr, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8022130:	1b9b      	subs	r3, r3, r6
    int32_t coords_h = lv_area_get_height(coords);
 8022132:	fa0f fe8e 	sxth.w	lr, lr
    int32_t coords_w = lv_area_get_width(coords);
 8022136:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MIN(coords_w, coords_h);
 8022138:	4573      	cmp	r3, lr
 802213a:	bfa8      	it	ge
 802213c:	4673      	movge	r3, lr
    int32_t rout = dsc->radius;
 802213e:	f9b4 e000 	ldrsh.w	lr, [r4]
    if(rout > short_side >> 1) rout = short_side >> 1;
 8022142:	105b      	asrs	r3, r3, #1
 8022144:	4573      	cmp	r3, lr
 8022146:	bfa8      	it	ge
 8022148:	4673      	movge	r3, lr
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 802214a:	fa1f fe82 	uxth.w	lr, r2
 802214e:	073f      	lsls	r7, r7, #28
 8022150:	b29a      	uxth	r2, r3
 8022152:	bf4f      	iteee	mi
 8022154:	4677      	movmi	r7, lr
 8022156:	eb0e 0702 	addpl.w	r7, lr, r2
 802215a:	427f      	negpl	r7, r7
 802215c:	b2bf      	uxthpl	r7, r7
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 802215e:	f018 0f08 	tst.w	r8, #8
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 8022162:	443e      	add	r6, r7
 8022164:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 8022168:	bf09      	itett	eq
 802216a:	eb0e 0602 	addeq.w	r6, lr, r2
 802216e:	4676      	movne	r6, lr
 8022170:	4276      	negeq	r6, r6
 8022172:	b2b6      	uxtheq	r6, r6
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 8022174:	f018 0f02 	tst.w	r8, #2
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 8022178:	eba5 0506 	sub.w	r5, r5, r6
 802217c:	f8ad 5090 	strh.w	r5, [sp, #144]	; 0x90
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 8022180:	bf09      	itett	eq
 8022182:	eb0e 0502 	addeq.w	r5, lr, r2
 8022186:	4675      	movne	r5, lr
 8022188:	426d      	negeq	r5, r5
 802218a:	b2ad      	uxtheq	r5, r5
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 802218c:	f018 0f01 	tst.w	r8, #1
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 8022190:	4428      	add	r0, r5
 8022192:	f8ad 008e 	strh.w	r0, [sp, #142]	; 0x8e
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 8022196:	bf0c      	ite	eq
 8022198:	eb0e 0002 	addeq.w	r0, lr, r2
 802219c:	4670      	movne	r0, lr
    lv_coord_t rin = rout - dsc->border_width;
 802219e:	eba2 020e 	sub.w	r2, r2, lr
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 80221a2:	bf08      	it	eq
 80221a4:	4240      	negeq	r0, r0
    if(rin < 0) rin = 0;
 80221a6:	b212      	sxth	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 80221a8:	bf08      	it	eq
 80221aa:	b280      	uxtheq	r0, r0
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 80221ac:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 80221b0:	1a09      	subs	r1, r1, r0
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 80221b2:	9805      	ldr	r0, [sp, #20]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 80221b4:	f8ad 1092 	strh.w	r1, [sp, #146]	; 0x92
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 80221b8:	78a1      	ldrb	r1, [r4, #2]
 80221ba:	e9cd c102 	strd	ip, r1, [sp, #8]
 80221be:	8be1      	ldrh	r1, [r4, #30]
 80221c0:	9200      	str	r2, [sp, #0]
 80221c2:	aa23      	add	r2, sp, #140	; 0x8c
 80221c4:	f8ad 1004 	strh.w	r1, [sp, #4]
 80221c8:	9908      	ldr	r1, [sp, #32]
 80221ca:	f7ff f89e 	bl	802130a <draw_border_generic>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 80221ce:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
 80221d2:	2d02      	cmp	r5, #2
 80221d4:	d954      	bls.n	8022280 <lv_draw_sw_rect+0x9c0>
    if(dsc->outline_width == 0) return;
 80221d6:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 80221da:	2b00      	cmp	r3, #0
 80221dc:	d050      	beq.n	8022280 <lv_draw_sw_rect+0x9c0>
    dest->y2 = src->y2;
 80221de:	9908      	ldr	r1, [sp, #32]
    area_outer.x1 -= dsc->outline_width;
 80221e0:	b29b      	uxth	r3, r3
    area_inner.y1 -= pad;
 80221e2:	9f08      	ldr	r7, [sp, #32]
 80221e4:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
    lv_coord_t pad = dsc->outline_pad - 1;
 80221e8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    area_inner.x1 -= pad;
 80221ea:	9e08      	ldr	r6, [sp, #32]
    lv_coord_t pad = dsc->outline_pad - 1;
 80221ec:	3901      	subs	r1, #1
    area_inner.y1 -= pad;
 80221ee:	f8b7 c002 	ldrh.w	ip, [r7, #2]
    area_inner.x1 -= pad;
 80221f2:	8836      	ldrh	r6, [r6, #0]
    lv_coord_t pad = dsc->outline_pad - 1;
 80221f4:	b289      	uxth	r1, r1
    dest->x2 = src->x2;
 80221f6:	9a08      	ldr	r2, [sp, #32]
    area_inner.x1 -= pad;
 80221f8:	eba6 0e01 	sub.w	lr, r6, r1
 80221fc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
    area_inner.y1 -= pad;
 8022200:	ebac 0701 	sub.w	r7, ip, r1
    area_inner.y2 += pad;
 8022204:	4408      	add	r0, r1
    area_inner.x1 -= pad;
 8022206:	fa1f fe8e 	uxth.w	lr, lr
    area_inner.x2 += pad;
 802220a:	440a      	add	r2, r1
    area_inner.y1 -= pad;
 802220c:	b2bf      	uxth	r7, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802220e:	f1c6 0601 	rsb	r6, r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8022212:	f1cc 0c01 	rsb	ip, ip, #1
    area_inner.x2 += pad;
 8022216:	b292      	uxth	r2, r2
    area_inner.y2 += pad;
 8022218:	b280      	uxth	r0, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802221a:	440e      	add	r6, r1
    area_inner.x1 -= pad;
 802221c:	f8ad e074 	strh.w	lr, [sp, #116]	; 0x74
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8022220:	4461      	add	r1, ip
    area_outer.x1 -= dsc->outline_width;
 8022222:	ebae 0e03 	sub.w	lr, lr, r3
    area_inner.y1 -= pad;
 8022226:	f8ad 7076 	strh.w	r7, [sp, #118]	; 0x76
    area_outer.y1 -= dsc->outline_width;
 802222a:	1aff      	subs	r7, r7, r3
    area_inner.x2 += pad;
 802222c:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    area_inner.y2 += pad;
 8022230:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    area_outer.x1 -= dsc->outline_width;
 8022234:	f8ad e08c 	strh.w	lr, [sp, #140]	; 0x8c
    area_outer.x2 += dsc->outline_width;
 8022238:	eb02 0e03 	add.w	lr, r2, r3
    area_outer.y1 -= dsc->outline_width;
 802223c:	f8ad 708e 	strh.w	r7, [sp, #142]	; 0x8e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8022240:	4432      	add	r2, r6
    area_outer.y2 += dsc->outline_width;
 8022242:	18c7      	adds	r7, r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8022244:	4408      	add	r0, r1
    int32_t inner_w = lv_area_get_width(&area_inner);
 8022246:	b212      	sxth	r2, r2
    int32_t rin = dsc->radius;
 8022248:	f9b4 1000 	ldrsh.w	r1, [r4]
    int32_t inner_h = lv_area_get_height(&area_inner);
 802224c:	b200      	sxth	r0, r0
    area_outer.x2 += dsc->outline_width;
 802224e:	f8ad e090 	strh.w	lr, [sp, #144]	; 0x90
    area_outer.y2 += dsc->outline_width;
 8022252:	f8ad 7092 	strh.w	r7, [sp, #146]	; 0x92
    int32_t short_side = LV_MIN(inner_w, inner_h);
 8022256:	4282      	cmp	r2, r0
 8022258:	bfa8      	it	ge
 802225a:	4602      	movge	r2, r0
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 802225c:	9805      	ldr	r0, [sp, #20]
    if(rin > short_side >> 1) rin = short_side >> 1;
 802225e:	1052      	asrs	r2, r2, #1
 8022260:	428a      	cmp	r2, r1
 8022262:	bfa8      	it	ge
 8022264:	460a      	movge	r2, r1
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 8022266:	78a1      	ldrb	r1, [r4, #2]
    lv_coord_t rout = rin + dsc->outline_width;
 8022268:	4413      	add	r3, r2
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 802226a:	e9cd 5102 	strd	r5, r1, [sp, #8]
 802226e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8022270:	b21b      	sxth	r3, r3
 8022272:	9200      	str	r2, [sp, #0]
 8022274:	aa1d      	add	r2, sp, #116	; 0x74
 8022276:	f8ad 1004 	strh.w	r1, [sp, #4]
 802227a:	a923      	add	r1, sp, #140	; 0x8c
 802227c:	f7ff f845 	bl	802130a <draw_border_generic>
}
 8022280:	b02b      	add	sp, #172	; 0xac
 8022282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    shadow_blur_corner(size, sw, sh_buf);
 8022286:	b236      	sxth	r6, r6
 8022288:	4629      	mov	r1, r5
 802228a:	9a07      	ldr	r2, [sp, #28]
 802228c:	4630      	mov	r0, r6
 802228e:	f7fe fdac 	bl	8020dea <shadow_blur_corner>
    sw += sw_ori & 1;
 8022292:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022294:	4429      	add	r1, r5
 8022296:	b28d      	uxth	r5, r1
 8022298:	b209      	sxth	r1, r1
    if(sw > 1) {
 802229a:	2901      	cmp	r1, #1
 802229c:	dd0c      	ble.n	80222b8 <lv_draw_sw_rect+0x9f8>
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 802229e:	f44f 507f 	mov.w	r0, #16320	; 0x3fc0
 80222a2:	9a07      	ldr	r2, [sp, #28]
 80222a4:	fbb0 f0f5 	udiv	r0, r0, r5
        for(i = 0; i < (uint32_t)size * size; i++) {
 80222a8:	eb02 0c47 	add.w	ip, r2, r7, lsl #1
 80222ac:	4594      	cmp	ip, r2
 80222ae:	d10e      	bne.n	80222ce <lv_draw_sw_rect+0xa0e>
        shadow_blur_corner(size, sw, sh_buf);
 80222b0:	9a07      	ldr	r2, [sp, #28]
 80222b2:	4630      	mov	r0, r6
 80222b4:	f7fe fd99 	bl	8020dea <shadow_blur_corner>
        for(i = 0; i < size * size; i++) {
 80222b8:	2300      	movs	r3, #0
    for(x = 0; x < size * size; x++) {
 80222ba:	42bb      	cmp	r3, r7
 80222bc:	f43f ac31 	beq.w	8021b22 <lv_draw_sw_rect+0x262>
        res_buf[x] = sh_buf[x];
 80222c0:	9a07      	ldr	r2, [sp, #28]
 80222c2:	9907      	ldr	r1, [sp, #28]
 80222c4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80222c8:	54ca      	strb	r2, [r1, r3]
    for(x = 0; x < size * size; x++) {
 80222ca:	3301      	adds	r3, #1
 80222cc:	e7f5      	b.n	80222ba <lv_draw_sw_rect+0x9fa>
            if(sh_buf[i] == 0) continue;
 80222ce:	f832 3b02 	ldrh.w	r3, [r2], #2
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	d0ea      	beq.n	80222ac <lv_draw_sw_rect+0x9ec>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 80222d6:	2bff      	cmp	r3, #255	; 0xff
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 80222d8:	bf17      	itett	ne
 80222da:	019b      	lslne	r3, r3, #6
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 80222dc:	f822 0c02 	strheq.w	r0, [r2, #-2]
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 80222e0:	fbb3 f3f5 	udivne	r3, r3, r5
 80222e4:	f822 3c02 	strhne.w	r3, [r2, #-2]
        for(i = 0; i < (uint32_t)size * size; i++) {
 80222e8:	e7e0      	b.n	80222ac <lv_draw_sw_rect+0x9ec>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 80222ea:	8863      	ldrh	r3, [r4, #2]
 80222ec:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80222f0:	f47f ac1d 	bne.w	8021b2e <lv_draw_sw_rect+0x26e>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 80222f4:	f04f 33ff 	mov.w	r3, #4294967295
 80222f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80222fa:	e425      	b.n	8021b48 <lv_draw_sw_rect+0x288>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80222fc:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8022300:	a917      	add	r1, sp, #92	; 0x5c
 8022302:	a81b      	add	r0, sp, #108	; 0x6c
 8022304:	920d      	str	r2, [sp, #52]	; 0x34
 8022306:	f002 f8b3 	bl	8024470 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 802230a:	2800      	cmp	r0, #0
 802230c:	f47f ac7b 	bne.w	8021c06 <lv_draw_sw_rect+0x346>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8022310:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 8022314:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8022318:	f108 0801 	add.w	r8, r8, #1
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 802231c:	9906      	ldr	r1, [sp, #24]
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 802231e:	f9bd a06e 	ldrsh.w	sl, [sp, #110]	; 0x6e
 8022322:	eba8 0807 	sub.w	r8, r8, r7
 8022326:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 802232a:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 802232e:	fa0f f888 	sxth.w	r8, r8
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8022332:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022334:	b129      	cbz	r1, 8022342 <lv_draw_sw_rect+0xa82>
 8022336:	a917      	add	r1, sp, #92	; 0x5c
 8022338:	a81b      	add	r0, sp, #108	; 0x6c
 802233a:	930d      	str	r3, [sp, #52]	; 0x34
 802233c:	f002 f8e1 	bl	8024502 <_lv_area_is_out>
 8022340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if(w > 0) {
 8022342:	f1b8 0f00 	cmp.w	r8, #0
 8022346:	f77f ac5e 	ble.w	8021c06 <lv_draw_sw_rect+0x346>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 802234a:	eba9 090b 	sub.w	r9, r9, fp
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 802234e:	ebaa 0a03 	sub.w	sl, sl, r3
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8022352:	9b07      	ldr	r3, [sp, #28]
 8022354:	f109 0901 	add.w	r9, r9, #1
            blend_dsc.mask_buf = mask_buf;
 8022358:	9526      	str	r5, [sp, #152]	; 0x98
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 802235a:	eba7 0709 	sub.w	r7, r7, r9
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 802235e:	f9bd 906e 	ldrsh.w	r9, [sp, #110]	; 0x6e
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8022362:	fb0b 770a 	mla	r7, fp, sl, r7
 8022366:	441f      	add	r7, r3
            blend_area.x1 = clip_area_sub.x1;
 8022368:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 802236c:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8022370:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8022374:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8022378:	2302      	movs	r3, #2
 802237a:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 802237e:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8022382:	454b      	cmp	r3, r9
 8022384:	f6ff ac3f 	blt.w	8021c06 <lv_draw_sw_rect+0x346>
                if(!simple_sub) {
 8022388:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 802238a:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                blend_area.y2 = y;
 802238e:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                if(!simple_sub) {
 8022392:	b9e3      	cbnz	r3, 80223ce <lv_draw_sw_rect+0xb0e>
    return memcpy(dst, src, len);
 8022394:	465a      	mov	r2, fp
 8022396:	4639      	mov	r1, r7
 8022398:	4628      	mov	r0, r5
 802239a:	f7f8 f9b6 	bl	801a70a <memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 802239e:	4643      	mov	r3, r8
 80223a0:	464a      	mov	r2, r9
 80223a2:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 80223a6:	4628      	mov	r0, r5
 80223a8:	f7e5 ff60 	bl	800826c <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80223ac:	2801      	cmp	r0, #1
 80223ae:	bf0a      	itet	eq
 80223b0:	2302      	moveq	r3, #2
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80223b2:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80223b6:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80223ba:	f109 0901 	add.w	r9, r9, #1
 80223be:	a923      	add	r1, sp, #140	; 0x8c
 80223c0:	9805      	ldr	r0, [sp, #20]
                sh_buf_tmp += corner_size;
 80223c2:	445f      	add	r7, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80223c4:	fa0f f989 	sxth.w	r9, r9
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80223c8:	f7fe f803 	bl	80203d2 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80223cc:	e7d7      	b.n	802237e <lv_draw_sw_rect+0xabe>
                    blend_dsc.mask_buf = sh_buf_tmp;
 80223ce:	9726      	str	r7, [sp, #152]	; 0x98
 80223d0:	e7f3      	b.n	80223ba <lv_draw_sw_rect+0xafa>
                if(!simple_sub) {
 80223d2:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 80223d4:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                blend_area.y2 = y;
 80223d8:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                if(!simple_sub) {
 80223dc:	b9e3      	cbnz	r3, 8022418 <lv_draw_sw_rect+0xb58>
 80223de:	465a      	mov	r2, fp
 80223e0:	4639      	mov	r1, r7
 80223e2:	4628      	mov	r0, r5
 80223e4:	f7f8 f991 	bl	801a70a <memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80223e8:	4643      	mov	r3, r8
 80223ea:	464a      	mov	r2, r9
 80223ec:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 80223f0:	4628      	mov	r0, r5
 80223f2:	f7e5 ff3b 	bl	800826c <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80223f6:	2801      	cmp	r0, #1
 80223f8:	bf0a      	itet	eq
 80223fa:	2302      	moveq	r3, #2
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80223fc:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8022400:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022404:	f109 39ff 	add.w	r9, r9, #4294967295
 8022408:	a923      	add	r1, sp, #140	; 0x8c
 802240a:	9805      	ldr	r0, [sp, #20]
                sh_buf_tmp += corner_size;
 802240c:	445f      	add	r7, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 802240e:	fa0f f989 	sxth.w	r9, r9
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022412:	f7fd ffde 	bl	80203d2 <lv_draw_sw_blend>
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8022416:	e459      	b.n	8021ccc <lv_draw_sw_rect+0x40c>
                    blend_dsc.mask_buf = sh_buf_tmp;
 8022418:	9726      	str	r7, [sp, #152]	; 0x98
 802241a:	e7f3      	b.n	8022404 <lv_draw_sw_rect+0xb44>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 802241c:	464a      	mov	r2, r9
 802241e:	a917      	add	r1, sp, #92	; 0x5c
 8022420:	a81b      	add	r0, sp, #108	; 0x6c
 8022422:	9311      	str	r3, [sp, #68]	; 0x44
 8022424:	f002 f86d 	bl	8024502 <_lv_area_is_out>
 8022428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802242a:	4681      	mov	r9, r0
 802242c:	2800      	cmp	r0, #0
 802242e:	d03b      	beq.n	80224a8 <lv_draw_sw_rect+0xbe8>
        if(w > 0) {
 8022430:	2f00      	cmp	r7, #0
 8022432:	f77f ac8b 	ble.w	8021d4c <lv_draw_sw_rect+0x48c>
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8022436:	ebaa 0a03 	sub.w	sl, sl, r3
 802243a:	9b07      	ldr	r3, [sp, #28]
                blend_dsc.mask_buf = mask_buf;
 802243c:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8022440:	fb0b 3a0a 	mla	sl, fp, sl, r3
            blend_area.x1 = clip_area_sub.x1;
 8022444:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022448:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
            blend_area.x1 = clip_area_sub.x1;
 802244c:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8022450:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8022454:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022458:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 802245c:	4543      	cmp	r3, r8
 802245e:	f6ff ac75 	blt.w	8021d4c <lv_draw_sw_rect+0x48c>
                blend_area.y1 = y;
 8022462:	f8ad 8066 	strh.w	r8, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8022466:	f8ad 806a 	strh.w	r8, [sp, #106]	; 0x6a
                if(!simple_sub) {
 802246a:	f89a 1000 	ldrb.w	r1, [sl]
 802246e:	f1b9 0f00 	cmp.w	r9, #0
 8022472:	d121      	bne.n	80224b8 <lv_draw_sw_rect+0xbf8>
    memset(dst, v, len);
 8022474:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022476:	4628      	mov	r0, r5
 8022478:	f7f8 f952 	bl	801a720 <memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 802247c:	463b      	mov	r3, r7
 802247e:	4642      	mov	r2, r8
 8022480:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8022484:	4628      	mov	r0, r5
 8022486:	f7e5 fef1 	bl	800826c <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 802248a:	2801      	cmp	r0, #1
 802248c:	bf08      	it	eq
 802248e:	2002      	moveq	r0, #2
 8022490:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022494:	f108 0801 	add.w	r8, r8, #1
 8022498:	a923      	add	r1, sp, #140	; 0x8c
 802249a:	9805      	ldr	r0, [sp, #20]
                sh_buf_tmp += corner_size;
 802249c:	44da      	add	sl, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 802249e:	fa0f f888 	sxth.w	r8, r8
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80224a2:	f7fd ff96 	bl	80203d2 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80224a6:	e7d7      	b.n	8022458 <lv_draw_sw_rect+0xb98>
        if(w > 0) {
 80224a8:	2f00      	cmp	r7, #0
 80224aa:	f77f ac4f 	ble.w	8021d4c <lv_draw_sw_rect+0x48c>
 80224ae:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80224b2:	e7c0      	b.n	8022436 <lv_draw_sw_rect+0xb76>
 80224b4:	46a8      	mov	r8, r5
 80224b6:	e7fa      	b.n	80224ae <lv_draw_sw_rect+0xbee>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 80224b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80224ba:	2bff      	cmp	r3, #255	; 0xff
 80224bc:	bf1e      	ittt	ne
 80224be:	f894 3036 	ldrbne.w	r3, [r4, #54]	; 0x36
 80224c2:	fb13 f101 	smulbbne	r1, r3, r1
 80224c6:	0a09      	lsrne	r1, r1, #8
 80224c8:	f88d 10a4 	strb.w	r1, [sp, #164]	; 0xa4
 80224cc:	e7e2      	b.n	8022494 <lv_draw_sw_rect+0xbd4>
 80224ce:	462b      	mov	r3, r5
 80224d0:	e482      	b.n	8021dd8 <lv_draw_sw_rect+0x518>
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 80224d2:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 80224d4:	f8ad 8066 	strh.w	r8, [sp, #102]	; 0x66
                blend_area.y2 = y;
 80224d8:	f8ad 806a 	strh.w	r8, [sp, #106]	; 0x6a
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 80224dc:	b9db      	cbnz	r3, 8022516 <lv_draw_sw_rect+0xc56>
 80224de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80224e0:	4628      	mov	r0, r5
 80224e2:	f899 1000 	ldrb.w	r1, [r9]
 80224e6:	f7f8 f91b 	bl	801a720 <memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80224ea:	463b      	mov	r3, r7
 80224ec:	4642      	mov	r2, r8
 80224ee:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 80224f2:	4628      	mov	r0, r5
 80224f4:	f7e5 feba 	bl	800826c <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80224f8:	2801      	cmp	r0, #1
 80224fa:	bf08      	it	eq
 80224fc:	2002      	moveq	r0, #2
 80224fe:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022502:	f108 38ff 	add.w	r8, r8, #4294967295
 8022506:	a923      	add	r1, sp, #140	; 0x8c
 8022508:	9805      	ldr	r0, [sp, #20]
                sh_buf_tmp += corner_size;
 802250a:	44d9      	add	r9, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 802250c:	fa0f f888 	sxth.w	r8, r8
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022510:	f7fd ff5f 	bl	80203d2 <lv_draw_sw_blend>
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8022514:	e471      	b.n	8021dfa <lv_draw_sw_rect+0x53a>
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8022516:	4652      	mov	r2, sl
 8022518:	a917      	add	r1, sp, #92	; 0x5c
 802251a:	a81b      	add	r0, sp, #108	; 0x6c
 802251c:	f001 fff1 	bl	8024502 <_lv_area_is_out>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 8022520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022522:	2bff      	cmp	r3, #255	; 0xff
 8022524:	f899 3000 	ldrb.w	r3, [r9]
 8022528:	bf1e      	ittt	ne
 802252a:	f894 2036 	ldrbne.w	r2, [r4, #54]	; 0x36
 802252e:	fb13 f302 	smulbbne	r3, r3, r2
 8022532:	0a1b      	lsrne	r3, r3, #8
 8022534:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
 8022538:	e7e3      	b.n	8022502 <lv_draw_sw_rect+0xc42>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 802253a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802253e:	a917      	add	r1, sp, #92	; 0x5c
 8022540:	a81b      	add	r0, sp, #108	; 0x6c
 8022542:	464a      	mov	r2, r9
 8022544:	f001 ff94 	bl	8024470 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8022548:	2800      	cmp	r0, #0
 802254a:	f47f ac8b 	bne.w	8021e64 <lv_draw_sw_rect+0x5a4>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 802254e:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8022552:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 8022556:	eba3 030b 	sub.w	r3, r3, fp
 802255a:	f9bd 806c 	ldrsh.w	r8, [sp, #108]	; 0x6c
 802255e:	3701      	adds	r7, #1
 8022560:	3301      	adds	r3, #1
 8022562:	eba7 0708 	sub.w	r7, r7, r8
 8022566:	eba8 0803 	sub.w	r8, r8, r3
        sh_buf_tmp += (corner_size - 1) * corner_size;
 802256a:	f10b 33ff 	add.w	r3, fp, #4294967295
 802256e:	fa1f fa87 	uxth.w	sl, r7
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8022572:	fb0b 8803 	mla	r8, fp, r3, r8
 8022576:	9b07      	ldr	r3, [sp, #28]
 8022578:	b23f      	sxth	r7, r7
 802257a:	4498      	add	r8, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 802257c:	9b06      	ldr	r3, [sp, #24]
 802257e:	2b00      	cmp	r3, #0
 8022580:	d03d      	beq.n	80225fe <lv_draw_sw_rect+0xd3e>
 8022582:	464a      	mov	r2, r9
 8022584:	a917      	add	r1, sp, #92	; 0x5c
 8022586:	a81b      	add	r0, sp, #108	; 0x6c
 8022588:	f001 ffbb 	bl	8024502 <_lv_area_is_out>
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 802258c:	4643      	mov	r3, r8
        if(w > 0) {
 802258e:	2f00      	cmp	r7, #0
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 8022590:	9326      	str	r3, [sp, #152]	; 0x98
        if(w > 0) {
 8022592:	f77f ac67 	ble.w	8021e64 <lv_draw_sw_rect+0x5a4>
            blend_area.x1 = clip_area_sub.x1;
 8022596:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 802259a:	f9bd 906e 	ldrsh.w	r9, [sp, #110]	; 0x6e
            blend_area.x1 = clip_area_sub.x1;
 802259e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 80225a2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80225a6:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 80225aa:	2302      	movs	r3, #2
 80225ac:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80225b0:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 80225b4:	454b      	cmp	r3, r9
 80225b6:	f6ff ac55 	blt.w	8021e64 <lv_draw_sw_rect+0x5a4>
                if(!simple_sub) {
 80225ba:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 80225bc:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                blend_area.y2 = y;
 80225c0:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                if(!simple_sub) {
 80225c4:	b993      	cbnz	r3, 80225ec <lv_draw_sw_rect+0xd2c>
    return memcpy(dst, src, len);
 80225c6:	4652      	mov	r2, sl
 80225c8:	4641      	mov	r1, r8
 80225ca:	4628      	mov	r0, r5
 80225cc:	f7f8 f89d 	bl	801a70a <memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80225d0:	463b      	mov	r3, r7
 80225d2:	464a      	mov	r2, r9
 80225d4:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 80225d8:	4628      	mov	r0, r5
 80225da:	f7e5 fe47 	bl	800826c <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80225de:	2801      	cmp	r0, #1
 80225e0:	bf0a      	itet	eq
 80225e2:	2302      	moveq	r3, #2
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80225e4:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80225e8:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80225ec:	f109 0901 	add.w	r9, r9, #1
 80225f0:	a923      	add	r1, sp, #140	; 0x8c
 80225f2:	9805      	ldr	r0, [sp, #20]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80225f4:	fa0f f989 	sxth.w	r9, r9
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80225f8:	f7fd feeb 	bl	80203d2 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80225fc:	e7d8      	b.n	80225b0 <lv_draw_sw_rect+0xcf0>
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 80225fe:	462b      	mov	r3, r5
 8022600:	e7c5      	b.n	802258e <lv_draw_sw_rect+0xcce>
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 8022602:	eb03 070b 	add.w	r7, r3, fp
 8022606:	463a      	mov	r2, r7
        for(x = 0; x < corner_size / 2; x++) {
 8022608:	eba7 0c02 	sub.w	ip, r7, r2
 802260c:	4560      	cmp	r0, ip
 802260e:	dc02      	bgt.n	8022616 <lv_draw_sw_rect+0xd56>
    for(y = 0; y < corner_size; y++) {
 8022610:	3101      	adds	r1, #1
        for(x = 0; x < corner_size / 2; x++) {
 8022612:	463b      	mov	r3, r7
 8022614:	e42c      	b.n	8021e70 <lv_draw_sw_rect+0x5b0>
            lv_opa_t tmp = *start;
 8022616:	f813 cf01 	ldrb.w	ip, [r3, #1]!
            *start = *end;
 802261a:	f892 e000 	ldrb.w	lr, [r2]
 802261e:	f883 e000 	strb.w	lr, [r3]
            *end = tmp;
 8022622:	f802 c901 	strb.w	ip, [r2], #-1
        for(x = 0; x < corner_size / 2; x++) {
 8022626:	e7ef      	b.n	8022608 <lv_draw_sw_rect+0xd48>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8022628:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802262c:	a917      	add	r1, sp, #92	; 0x5c
 802262e:	a81b      	add	r0, sp, #108	; 0x6c
 8022630:	464a      	mov	r2, r9
 8022632:	f001 ff1d 	bl	8024470 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8022636:	2800      	cmp	r0, #0
 8022638:	f47f ac4d 	bne.w	8021ed6 <lv_draw_sw_rect+0x616>
 802263c:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 8022640:	f9bd 806c 	ldrsh.w	r8, [sp, #108]	; 0x6c
 8022644:	3701      	adds	r7, #1
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8022646:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 802264a:	eba7 0708 	sub.w	r7, r7, r8
 802264e:	eba8 0802 	sub.w	r8, r8, r2
 8022652:	b2bb      	uxth	r3, r7
 8022654:	b23f      	sxth	r7, r7
 8022656:	930b      	str	r3, [sp, #44]	; 0x2c
        sh_buf_tmp += (corner_size - 1) * corner_size;
 8022658:	f10b 33ff 	add.w	r3, fp, #4294967295
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 802265c:	fb0b 8803 	mla	r8, fp, r3, r8
 8022660:	9b07      	ldr	r3, [sp, #28]
 8022662:	4498      	add	r8, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8022664:	9b06      	ldr	r3, [sp, #24]
 8022666:	2b00      	cmp	r3, #0
 8022668:	d03d      	beq.n	80226e6 <lv_draw_sw_rect+0xe26>
 802266a:	464a      	mov	r2, r9
 802266c:	a917      	add	r1, sp, #92	; 0x5c
 802266e:	a81b      	add	r0, sp, #108	; 0x6c
 8022670:	f001 ff47 	bl	8024502 <_lv_area_is_out>
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 8022674:	4643      	mov	r3, r8
        if(w > 0) {
 8022676:	2f00      	cmp	r7, #0
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 8022678:	9326      	str	r3, [sp, #152]	; 0x98
        if(w > 0) {
 802267a:	f77f ac2c 	ble.w	8021ed6 <lv_draw_sw_rect+0x616>
            blend_area.x1 = clip_area_sub.x1;
 802267e:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022682:	f9bd 906e 	ldrsh.w	r9, [sp, #110]	; 0x6e
            blend_area.x1 = clip_area_sub.x1;
 8022686:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 802268a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 802268e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8022692:	2302      	movs	r3, #2
 8022694:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022698:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 802269c:	454b      	cmp	r3, r9
 802269e:	f6ff ac1a 	blt.w	8021ed6 <lv_draw_sw_rect+0x616>
                if(!simple_sub) {
 80226a2:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 80226a4:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                blend_area.y2 = y;
 80226a8:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                if(!simple_sub) {
 80226ac:	b993      	cbnz	r3, 80226d4 <lv_draw_sw_rect+0xe14>
 80226ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80226b0:	4641      	mov	r1, r8
 80226b2:	4628      	mov	r0, r5
 80226b4:	f7f8 f829 	bl	801a70a <memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80226b8:	463b      	mov	r3, r7
 80226ba:	464a      	mov	r2, r9
 80226bc:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 80226c0:	4628      	mov	r0, r5
 80226c2:	f7e5 fdd3 	bl	800826c <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80226c6:	2801      	cmp	r0, #1
 80226c8:	bf0a      	itet	eq
 80226ca:	2302      	moveq	r3, #2
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80226cc:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80226d0:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80226d4:	f109 0901 	add.w	r9, r9, #1
 80226d8:	a923      	add	r1, sp, #140	; 0x8c
 80226da:	9805      	ldr	r0, [sp, #20]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80226dc:	fa0f f989 	sxth.w	r9, r9
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80226e0:	f7fd fe77 	bl	80203d2 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80226e4:	e7d8      	b.n	8022698 <lv_draw_sw_rect+0xdd8>
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 80226e6:	462b      	mov	r3, r5
 80226e8:	e7c5      	b.n	8022676 <lv_draw_sw_rect+0xdb6>
                if(!simple_sub) {
 80226ea:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 80226ec:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                blend_area.y2 = y;
 80226f0:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                if(!simple_sub) {
 80226f4:	b9e3      	cbnz	r3, 8022730 <lv_draw_sw_rect+0xe70>
 80226f6:	465a      	mov	r2, fp
 80226f8:	4639      	mov	r1, r7
 80226fa:	4628      	mov	r0, r5
 80226fc:	f7f8 f805 	bl	801a70a <memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8022700:	4643      	mov	r3, r8
 8022702:	464a      	mov	r2, r9
 8022704:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8022708:	4628      	mov	r0, r5
 802270a:	f7e5 fdaf 	bl	800826c <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 802270e:	2801      	cmp	r0, #1
 8022710:	bf0a      	itet	eq
 8022712:	2302      	moveq	r3, #2
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8022714:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8022718:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802271c:	f109 0901 	add.w	r9, r9, #1
 8022720:	a923      	add	r1, sp, #140	; 0x8c
 8022722:	9805      	ldr	r0, [sp, #20]
                sh_buf_tmp += corner_size;
 8022724:	445f      	add	r7, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8022726:	fa0f f989 	sxth.w	r9, r9
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802272a:	f7fd fe52 	bl	80203d2 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 802272e:	e42f      	b.n	8021f90 <lv_draw_sw_rect+0x6d0>
                    blend_dsc.mask_buf = sh_buf_tmp;
 8022730:	9726      	str	r7, [sp, #152]	; 0x98
 8022732:	e7f3      	b.n	802271c <lv_draw_sw_rect+0xe5c>
                if(!simple_sub) {
 8022734:	9b06      	ldr	r3, [sp, #24]
                blend_area.y1 = y;
 8022736:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                blend_area.y2 = y;
 802273a:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                if(!simple_sub) {
 802273e:	b9e3      	cbnz	r3, 802277a <lv_draw_sw_rect+0xeba>
 8022740:	465a      	mov	r2, fp
 8022742:	4639      	mov	r1, r7
 8022744:	4628      	mov	r0, r5
 8022746:	f7f7 ffe0 	bl	801a70a <memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 802274a:	4643      	mov	r3, r8
 802274c:	464a      	mov	r2, r9
 802274e:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8022752:	4628      	mov	r0, r5
 8022754:	f7e5 fd8a 	bl	800826c <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8022758:	2801      	cmp	r0, #1
 802275a:	bf0a      	itet	eq
 802275c:	2302      	moveq	r3, #2
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 802275e:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8022762:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022766:	f109 39ff 	add.w	r9, r9, #4294967295
 802276a:	a923      	add	r1, sp, #140	; 0x8c
 802276c:	9805      	ldr	r0, [sp, #20]
                sh_buf_tmp += corner_size;
 802276e:	445f      	add	r7, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8022770:	fa0f f989 	sxth.w	r9, r9
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8022774:	f7fd fe2d 	bl	80203d2 <lv_draw_sw_blend>
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8022778:	e46a      	b.n	8022050 <lv_draw_sw_rect+0x790>
                    blend_dsc.mask_buf = sh_buf_tmp;
 802277a:	9726      	str	r7, [sp, #152]	; 0x98
 802277c:	e7f3      	b.n	8022766 <lv_draw_sw_rect+0xea6>
                lv_memset_ff(mask_buf, w);
 802277e:	4639      	mov	r1, r7
 8022780:	4628      	mov	r0, r5
                blend_area.y1 = y;
 8022782:	f8ad 8066 	strh.w	r8, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8022786:	f8ad 806a 	strh.w	r8, [sp, #106]	; 0x6a
                lv_memset_ff(mask_buf, w);
 802278a:	f7fe fa28 	bl	8020bde <lv_memset_ff>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 802278e:	4642      	mov	r2, r8
 8022790:	4633      	mov	r3, r6
 8022792:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8022796:	4628      	mov	r0, r5
 8022798:	f108 0801 	add.w	r8, r8, #1
 802279c:	f7e5 fd66 	bl	800826c <lv_draw_mask_apply>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80227a0:	a923      	add	r1, sp, #140	; 0x8c
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80227a2:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80227a6:	9805      	ldr	r0, [sp, #20]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80227a8:	fa0f f888 	sxth.w	r8, r8
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80227ac:	f7fd fe11 	bl	80203d2 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80227b0:	e485      	b.n	80220be <lv_draw_sw_rect+0x7fe>

080227b2 <lv_color_mix>:
{
 80227b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80227b4:	f3c1 1345 	ubfx	r3, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80227b8:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80227bc:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80227c0:	f000 071f 	and.w	r7, r0, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80227c4:	4373      	muls	r3, r6
 80227c6:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80227ca:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80227ce:	fb04 3302 	mla	r3, r4, r2, r3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80227d2:	f001 041f 	and.w	r4, r1, #31
 80227d6:	4374      	muls	r4, r6
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80227d8:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80227da:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80227de:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80227e0:	3480      	adds	r4, #128	; 0x80
    return ret;
 80227e2:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80227e6:	436c      	muls	r4, r5
    return ret;
 80227e8:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 80227ec:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80227f0:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 80227f4:	4373      	muls	r3, r6
 80227f6:	fb00 3302 	mla	r3, r0, r2, r3
 80227fa:	3380      	adds	r3, #128	; 0x80
 80227fc:	436b      	muls	r3, r5
 80227fe:	0ddb      	lsrs	r3, r3, #23
}
 8022800:	ea44 20c3 	orr.w	r0, r4, r3, lsl #11
 8022804:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022806 <transform_point_upscaled>:
    }
}

static void transform_point_upscaled(point_transform_dsc_t * t, int32_t xin, int32_t yin, int32_t * xout,
                                     int32_t * yout)
{
 8022806:	b570      	push	{r4, r5, r6, lr}
    if(t->angle == 0 && t->zoom == LV_IMG_ZOOM_NONE) {
 8022808:	e9d0 5406 	ldrd	r5, r4, [r0, #24]
 802280c:	b944      	cbnz	r4, 8022820 <transform_point_upscaled+0x1a>
 802280e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8022812:	d123      	bne.n	802285c <transform_point_upscaled+0x56>
        *xout = xin * 256;
 8022814:	0209      	lsls	r1, r1, #8
        *yout = yin * 256;
 8022816:	0212      	lsls	r2, r2, #8
        *xout = xin * 256;
 8022818:	6019      	str	r1, [r3, #0]
        *yout = yin * 256;
 802281a:	9b04      	ldr	r3, [sp, #16]
 802281c:	601a      	str	r2, [r3, #0]
    }
    else {
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
    }
}
 802281e:	bd70      	pop	{r4, r5, r6, pc}
    xin -= t->pivot.x;
 8022820:	f9b0 4028 	ldrsh.w	r4, [r0, #40]	; 0x28
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 8022824:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 8022828:	6946      	ldr	r6, [r0, #20]
    xin -= t->pivot.x;
 802282a:	eba1 0104 	sub.w	r1, r1, r4
    yin -= t->pivot.y;
 802282e:	f9b0 402a 	ldrsh.w	r4, [r0, #42]	; 0x2a
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 8022832:	fb01 f606 	mul.w	r6, r1, r6
    yin -= t->pivot.y;
 8022836:	eba2 0204 	sub.w	r2, r2, r4
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 802283a:	6904      	ldr	r4, [r0, #16]
 802283c:	fb04 6612 	mls	r6, r4, r2, r6
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 8022840:	6a04      	ldr	r4, [r0, #32]
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 8022842:	d11a      	bne.n	802287a <transform_point_upscaled+0x74>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 8022844:	eb04 04a6 	add.w	r4, r4, r6, asr #2
 8022848:	601c      	str	r4, [r3, #0]
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
 802284a:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 802284e:	4353      	muls	r3, r2
 8022850:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8022852:	fb04 3301 	mla	r3, r4, r1, r3
 8022856:	eb02 02a3 	add.w	r2, r2, r3, asr #2
 802285a:	e7de      	b.n	802281a <transform_point_upscaled+0x14>
    yin -= t->pivot.y;
 802285c:	f9b0 402a 	ldrsh.w	r4, [r0, #42]	; 0x2a
 8022860:	1b14      	subs	r4, r2, r4
    xin -= t->pivot.x;
 8022862:	f9b0 2028 	ldrsh.w	r2, [r0, #40]	; 0x28
 8022866:	1a89      	subs	r1, r1, r2
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 8022868:	6a02      	ldr	r2, [r0, #32]
 802286a:	fb05 2201 	mla	r2, r5, r1, r2
 802286e:	601a      	str	r2, [r3, #0]
        *yout = ((int32_t)(yin * t->zoom)) + (t->pivot_y_256);
 8022870:	6983      	ldr	r3, [r0, #24]
 8022872:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8022874:	fb03 2204 	mla	r2, r3, r4, r2
 8022878:	e7cf      	b.n	802281a <transform_point_upscaled+0x14>
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
 802287a:	4375      	muls	r5, r6
 802287c:	eb04 24a5 	add.w	r4, r4, r5, asr #10
 8022880:	601c      	str	r4, [r3, #0]
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
 8022882:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 8022886:	4353      	muls	r3, r2
 8022888:	6982      	ldr	r2, [r0, #24]
 802288a:	fb04 3301 	mla	r3, r4, r1, r3
 802288e:	4353      	muls	r3, r2
 8022890:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8022892:	eb02 22a3 	add.w	r2, r2, r3, asr #10
 8022896:	e7c0      	b.n	802281a <transform_point_upscaled+0x14>

08022898 <lv_draw_sw_transform>:
{
 8022898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802289c:	b0ab      	sub	sp, #172	; 0xac
 802289e:	4693      	mov	fp, r2
    int32_t angle_low = tr_dsc.angle / 10;
 80228a0:	270a      	movs	r7, #10
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 80228a2:	f06f 0609 	mvn.w	r6, #9
{
 80228a6:	9307      	str	r3, [sp, #28]
 80228a8:	f9bd 30d0 	ldrsh.w	r3, [sp, #208]	; 0xd0
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 80228ac:	9a36      	ldr	r2, [sp, #216]	; 0xd8
{
 80228ae:	9303      	str	r3, [sp, #12]
 80228b0:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 80228b4:	9106      	str	r1, [sp, #24]
 80228b6:	9304      	str	r3, [sp, #16]
    tr_dsc.angle = -draw_dsc->angle;
 80228b8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 80228ba:	8851      	ldrh	r1, [r2, #2]
 80228bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    tr_dsc.angle = -draw_dsc->angle;
 80228c0:	f9b3 3000 	ldrsh.w	r3, [r3]
{
 80228c4:	f89d 90dc 	ldrb.w	r9, [sp, #220]	; 0xdc
    tr_dsc.angle = -draw_dsc->angle;
 80228c8:	425d      	negs	r5, r3
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 80228ca:	fbb2 f2f1 	udiv	r2, r2, r1
    tr_dsc.angle = -draw_dsc->angle;
 80228ce:	9526      	str	r5, [sp, #152]	; 0x98
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 80228d0:	9225      	str	r2, [sp, #148]	; 0x94
    tr_dsc.pivot = draw_dsc->pivot;
 80228d2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    int32_t angle_low = tr_dsc.angle / 10;
 80228d4:	fb95 f5f7 	sdiv	r5, r5, r7
    tr_dsc.pivot = draw_dsc->pivot;
 80228d8:	6852      	ldr	r2, [r2, #4]
    int32_t angle_high = angle_low + 1;
 80228da:	1c6c      	adds	r4, r5, #1
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 80228dc:	436e      	muls	r6, r5
    int32_t s1 = lv_trigo_sin(angle_low);
 80228de:	b228      	sxth	r0, r5
    tr_dsc.pivot = draw_dsc->pivot;
 80228e0:	9229      	str	r2, [sp, #164]	; 0xa4
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 80228e2:	1af6      	subs	r6, r6, r3
    int32_t s1 = lv_trigo_sin(angle_low);
 80228e4:	f7ef feaa 	bl	801263c <lv_trigo_sin>
 80228e8:	4682      	mov	sl, r0
    int32_t s2 = lv_trigo_sin(angle_high);
 80228ea:	b220      	sxth	r0, r4
 80228ec:	f7ef fea6 	bl	801263c <lv_trigo_sin>
 80228f0:	4604      	mov	r4, r0
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 80228f2:	f105 005a 	add.w	r0, r5, #90	; 0x5a
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80228f6:	4374      	muls	r4, r6
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 80228f8:	b200      	sxth	r0, r0
 80228fa:	f7ef fe9f 	bl	801263c <lv_trigo_sin>
 80228fe:	4680      	mov	r8, r0
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 8022900:	f105 005b 	add.w	r0, r5, #91	; 0x5b
 8022904:	b200      	sxth	r0, r0
 8022906:	f7ef fe99 	bl	801263c <lv_trigo_sin>
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 802290a:	1bba      	subs	r2, r7, r6
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 802290c:	fb06 f300 	mul.w	r3, r6, r0
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8022910:	fb02 440a 	mla	r4, r2, sl, r4
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8022914:	fb02 3308 	mla	r3, r2, r8, r3
 8022918:	9a06      	ldr	r2, [sp, #24]
 802291a:	fb93 f3f7 	sdiv	r3, r3, r7
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 802291e:	115b      	asrs	r3, r3, #5
 8022920:	8812      	ldrh	r2, [r2, #0]
 8022922:	9324      	str	r3, [sp, #144]	; 0x90
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 8022924:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 8022928:	021b      	lsls	r3, r3, #8
 802292a:	9327      	str	r3, [sp, #156]	; 0x9c
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 802292c:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 8022930:	021b      	lsls	r3, r3, #8
 8022932:	9328      	str	r3, [sp, #160]	; 0xa0
 8022934:	9b06      	ldr	r3, [sp, #24]
 8022936:	889b      	ldrh	r3, [r3, #4]
 8022938:	3301      	adds	r3, #1
 802293a:	1a9b      	subs	r3, r3, r2
 802293c:	b29a      	uxth	r2, r3
 802293e:	b21b      	sxth	r3, r3
 8022940:	9218      	str	r2, [sp, #96]	; 0x60
 8022942:	9305      	str	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8022944:	9b06      	ldr	r3, [sp, #24]
 8022946:	9a06      	ldr	r2, [sp, #24]
 8022948:	88db      	ldrh	r3, [r3, #6]
 802294a:	8852      	ldrh	r2, [r2, #2]
 802294c:	3301      	adds	r3, #1
 802294e:	1a9b      	subs	r3, r3, r2
 8022950:	b21b      	sxth	r3, r3
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8022952:	fb94 f4f7 	sdiv	r4, r4, r7
 8022956:	9317      	str	r3, [sp, #92]	; 0x5c
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 8022958:	1164      	asrs	r4, r4, #5
        cbuf += dest_w;
 802295a:	9b05      	ldr	r3, [sp, #20]
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 802295c:	9423      	str	r4, [sp, #140]	; 0x8c
        cbuf += dest_w;
 802295e:	005b      	lsls	r3, r3, #1
 8022960:	9316      	str	r3, [sp, #88]	; 0x58
    for(y = 0; y < dest_h; y++) {
 8022962:	2300      	movs	r3, #0
 8022964:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022966:	9311      	str	r3, [sp, #68]	; 0x44
 8022968:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 802296c:	429a      	cmp	r2, r3
 802296e:	dc02      	bgt.n	8022976 <lv_draw_sw_transform+0xde>
}
 8022970:	b02b      	add	sp, #172	; 0xac
 8022972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        transform_point_upscaled(&tr_dsc, dest_area->x1, dest_area->y1 + y, &xs1_ups, &ys1_ups);
 8022976:	9b06      	ldr	r3, [sp, #24]
 8022978:	a81f      	add	r0, sp, #124	; 0x7c
 802297a:	9906      	ldr	r1, [sp, #24]
 802297c:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8022980:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022982:	441c      	add	r4, r3
 8022984:	ab1c      	add	r3, sp, #112	; 0x70
 8022986:	4622      	mov	r2, r4
 8022988:	9300      	str	r3, [sp, #0]
 802298a:	ab1b      	add	r3, sp, #108	; 0x6c
 802298c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8022990:	f7ff ff39 	bl	8022806 <transform_point_upscaled>
        transform_point_upscaled(&tr_dsc, dest_area->x2, dest_area->y1 + y, &xs2_ups, &ys2_ups);
 8022994:	ab1e      	add	r3, sp, #120	; 0x78
 8022996:	9906      	ldr	r1, [sp, #24]
 8022998:	4622      	mov	r2, r4
 802299a:	9300      	str	r3, [sp, #0]
 802299c:	ab1d      	add	r3, sp, #116	; 0x74
 802299e:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80229a2:	f7ff ff30 	bl	8022806 <transform_point_upscaled>
        if(dest_w > 1) {
 80229a6:	9a05      	ldr	r2, [sp, #20]
        int32_t xs_diff = xs2_ups - xs1_ups;
 80229a8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
        if(dest_w > 1) {
 80229aa:	2a01      	cmp	r2, #1
        int32_t xs_diff = xs2_ups - xs1_ups;
 80229ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
        int32_t ys_diff = ys2_ups - ys1_ups;
 80229ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80229b0:	991c      	ldr	r1, [sp, #112]	; 0x70
        if(dest_w > 1) {
 80229b2:	dd2c      	ble.n	8022a0e <lv_draw_sw_transform+0x176>
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 80229b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
        int32_t xs_diff = xs2_ups - xs1_ups;
 80229b6:	1a24      	subs	r4, r4, r0
        int32_t ys_diff = ys2_ups - ys1_ups;
 80229b8:	1a5b      	subs	r3, r3, r1
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 80229ba:	3a01      	subs	r2, #1
 80229bc:	0224      	lsls	r4, r4, #8
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 80229be:	021b      	lsls	r3, r3, #8
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 80229c0:	fb94 f4f2 	sdiv	r4, r4, r2
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 80229c4:	fb93 f3f2 	sdiv	r3, r3, r2
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 80229c8:	940a      	str	r4, [sp, #40]	; 0x28
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 80229ca:	930b      	str	r3, [sp, #44]	; 0x2c
        int32_t xs_ups = xs1_ups + 0x80;
 80229cc:	f100 0380 	add.w	r3, r0, #128	; 0x80
 80229d0:	930e      	str	r3, [sp, #56]	; 0x38
        int32_t ys_ups = ys1_ups + 0x80;
 80229d2:	f101 0380 	add.w	r3, r1, #128	; 0x80
 80229d6:	930f      	str	r3, [sp, #60]	; 0x3c
        if(draw_dsc->antialias == 0) {
 80229d8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80229da:	7d1b      	ldrb	r3, [r3, #20]
 80229dc:	f013 0301 	ands.w	r3, r3, #1
 80229e0:	f040 80b9 	bne.w	8022b56 <lv_draw_sw_transform+0x2be>
            switch(cf) {
 80229e4:	f1b9 0f06 	cmp.w	r9, #6
 80229e8:	d075      	beq.n	8022ad6 <lv_draw_sw_transform+0x23e>
 80229ea:	d814      	bhi.n	8022a16 <lv_draw_sw_transform+0x17e>
 80229ec:	f1b9 0f04 	cmp.w	r9, #4
 80229f0:	d071      	beq.n	8022ad6 <lv_draw_sw_transform+0x23e>
 80229f2:	f1b9 0f05 	cmp.w	r9, #5
 80229f6:	d041      	beq.n	8022a7c <lv_draw_sw_transform+0x1e4>
        cbuf += dest_w;
 80229f8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80229fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80229fc:	4413      	add	r3, r2
        abuf += dest_w;
 80229fe:	9a05      	ldr	r2, [sp, #20]
        cbuf += dest_w;
 8022a00:	9338      	str	r3, [sp, #224]	; 0xe0
        abuf += dest_w;
 8022a02:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8022a04:	4413      	add	r3, r2
 8022a06:	9339      	str	r3, [sp, #228]	; 0xe4
    for(y = 0; y < dest_h; y++) {
 8022a08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022a0a:	3301      	adds	r3, #1
 8022a0c:	e7aa      	b.n	8022964 <lv_draw_sw_transform+0xcc>
        int32_t ys_step_256 = 0;
 8022a0e:	2300      	movs	r3, #0
        int32_t xs_step_256 = 0;
 8022a10:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8022a14:	e7da      	b.n	80229cc <lv_draw_sw_transform+0x134>
            switch(cf) {
 8022a16:	f1b9 0f14 	cmp.w	r9, #20
 8022a1a:	d1ed      	bne.n	80229f8 <lv_draw_sw_transform+0x160>
 8022a1c:	4618      	mov	r0, r3
 8022a1e:	4619      	mov	r1, r3
    for(x = 0; x < x_end; x++) {
 8022a20:	b20a      	sxth	r2, r1
 8022a22:	9c05      	ldr	r4, [sp, #20]
 8022a24:	4294      	cmp	r4, r2
 8022a26:	dde7      	ble.n	80229f8 <lv_draw_sw_transform+0x160>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8022a28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022a2a:	eb02 2420 	add.w	r4, r2, r0, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022a2e:	1224      	asrs	r4, r4, #8
 8022a30:	f100 808f 	bmi.w	8022b52 <lv_draw_sw_transform+0x2ba>
 8022a34:	9a07      	ldr	r2, [sp, #28]
 8022a36:	4294      	cmp	r4, r2
 8022a38:	f280 808b 	bge.w	8022b52 <lv_draw_sw_transform+0x2ba>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8022a3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022a3e:	eb02 2223 	add.w	r2, r2, r3, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022a42:	1212      	asrs	r2, r2, #8
 8022a44:	f100 8085 	bmi.w	8022b52 <lv_draw_sw_transform+0x2ba>
 8022a48:	9d03      	ldr	r5, [sp, #12]
 8022a4a:	42aa      	cmp	r2, r5
 8022a4c:	f280 8081 	bge.w	8022b52 <lv_draw_sw_transform+0x2ba>
            src_tmp += ys_int * src_stride + xs_int;
 8022a50:	9d04      	ldr	r5, [sp, #16]
 8022a52:	fb02 4205 	mla	r2, r2, r5, r4
            cbuf[x] = *src_tmp;
 8022a56:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 8022a58:	f83b 4012 	ldrh.w	r4, [fp, r2, lsl #1]
 8022a5c:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
            const lv_opa_t * a_tmp = src + src_stride * src_h * sizeof(lv_color_t);
 8022a60:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
 8022a64:	436c      	muls	r4, r5
            abuf[x] = *a_tmp;
 8022a66:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 8022a6a:	5ca2      	ldrb	r2, [r4, r2]
            abuf[x] = 0;
 8022a6c:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8022a6e:	5462      	strb	r2, [r4, r1]
    for(x = 0; x < x_end; x++) {
 8022a70:	3101      	adds	r1, #1
 8022a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022a74:	4410      	add	r0, r2
 8022a76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022a78:	4413      	add	r3, r2
 8022a7a:	e7d1      	b.n	8022a20 <lv_draw_sw_transform+0x188>
            switch(cf) {
 8022a7c:	4618      	mov	r0, r3
 8022a7e:	4619      	mov	r1, r3
    for(x = 0; x < x_end; x++) {
 8022a80:	b20a      	sxth	r2, r1
 8022a82:	9c05      	ldr	r4, [sp, #20]
 8022a84:	4294      	cmp	r4, r2
 8022a86:	ddb7      	ble.n	80229f8 <lv_draw_sw_transform+0x160>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8022a88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022a8a:	eb02 2220 	add.w	r2, r2, r0, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022a8e:	1212      	asrs	r2, r2, #8
 8022a90:	d41f      	bmi.n	8022ad2 <lv_draw_sw_transform+0x23a>
 8022a92:	9c07      	ldr	r4, [sp, #28]
 8022a94:	42a2      	cmp	r2, r4
 8022a96:	da1c      	bge.n	8022ad2 <lv_draw_sw_transform+0x23a>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8022a98:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022a9a:	eb04 2423 	add.w	r4, r4, r3, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022a9e:	1224      	asrs	r4, r4, #8
 8022aa0:	d417      	bmi.n	8022ad2 <lv_draw_sw_transform+0x23a>
 8022aa2:	9d03      	ldr	r5, [sp, #12]
 8022aa4:	42ac      	cmp	r4, r5
 8022aa6:	da14      	bge.n	8022ad2 <lv_draw_sw_transform+0x23a>
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8022aa8:	9d04      	ldr	r5, [sp, #16]
 8022aaa:	fb04 2205 	mla	r2, r4, r5, r2
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8022aae:	9d38      	ldr	r5, [sp, #224]	; 0xe0
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8022ab0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ab4:	eb0b 0402 	add.w	r4, fp, r2
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8022ab8:	f83b 2002 	ldrh.w	r2, [fp, r2]
 8022abc:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
            abuf[x] = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8022ac0:	78a2      	ldrb	r2, [r4, #2]
            abuf[x] = 0;
 8022ac2:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8022ac4:	5462      	strb	r2, [r4, r1]
    for(x = 0; x < x_end; x++) {
 8022ac6:	3101      	adds	r1, #1
 8022ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022aca:	4410      	add	r0, r2
 8022acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022ace:	4413      	add	r3, r2
 8022ad0:	e7d6      	b.n	8022a80 <lv_draw_sw_transform+0x1e8>
 8022ad2:	2200      	movs	r2, #0
 8022ad4:	e7f5      	b.n	8022ac2 <lv_draw_sw_transform+0x22a>
    lv_disp_t * d = _lv_refr_get_disp_refreshing();
 8022ad6:	f7e4 fb95 	bl	8007204 <_lv_refr_get_disp_refreshing>
    lv_color_t ck = d->driver->color_chroma_key;
 8022ada:	6803      	ldr	r3, [r0, #0]
    memset(dst, 0xFF, len);
 8022adc:	21ff      	movs	r1, #255	; 0xff
 8022ade:	9a05      	ldr	r2, [sp, #20]
 8022ae0:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8022ae2:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 8022ae4:	f7f7 fe1c 	bl	801a720 <memset>
}
 8022ae8:	2100      	movs	r1, #0
 8022aea:	460d      	mov	r5, r1
 8022aec:	460b      	mov	r3, r1
    for(x = 0; x < x_end; x++) {
 8022aee:	b21a      	sxth	r2, r3
 8022af0:	9805      	ldr	r0, [sp, #20]
 8022af2:	4290      	cmp	r0, r2
 8022af4:	dd80      	ble.n	80229f8 <lv_draw_sw_transform+0x160>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8022af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022af8:	eb02 2221 	add.w	r2, r2, r1, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022afc:	1212      	asrs	r2, r2, #8
 8022afe:	d40a      	bmi.n	8022b16 <lv_draw_sw_transform+0x27e>
 8022b00:	9807      	ldr	r0, [sp, #28]
 8022b02:	4282      	cmp	r2, r0
 8022b04:	da07      	bge.n	8022b16 <lv_draw_sw_transform+0x27e>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8022b06:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022b08:	eb00 2025 	add.w	r0, r0, r5, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022b0c:	1200      	asrs	r0, r0, #8
 8022b0e:	d402      	bmi.n	8022b16 <lv_draw_sw_transform+0x27e>
 8022b10:	9e03      	ldr	r6, [sp, #12]
 8022b12:	42b0      	cmp	r0, r6
 8022b14:	db14      	blt.n	8022b40 <lv_draw_sw_transform+0x2a8>
            abuf[x] = 0x00;
 8022b16:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8022b18:	f04f 0000 	mov.w	r0, #0
 8022b1c:	54d0      	strb	r0, [r2, r3]
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 8022b1e:	f1b9 0f06 	cmp.w	r9, #6
 8022b22:	d107      	bne.n	8022b34 <lv_draw_sw_transform+0x29c>
 8022b24:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8022b26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8022b2a:	42a2      	cmp	r2, r4
            abuf[x] = 0x00;
 8022b2c:	bf02      	ittt	eq
 8022b2e:	9a39      	ldreq	r2, [sp, #228]	; 0xe4
 8022b30:	2000      	moveq	r0, #0
 8022b32:	54d0      	strbeq	r0, [r2, r3]
    for(x = 0; x < x_end; x++) {
 8022b34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022b36:	3301      	adds	r3, #1
 8022b38:	4415      	add	r5, r2
 8022b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022b3c:	4411      	add	r1, r2
 8022b3e:	e7d6      	b.n	8022aee <lv_draw_sw_transform+0x256>
            src_tmp += ys_int * src_stride + xs_int;
 8022b40:	9e04      	ldr	r6, [sp, #16]
 8022b42:	fb00 2206 	mla	r2, r0, r6, r2
            cbuf[x] = *src_tmp;
 8022b46:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8022b48:	f83b 2012 	ldrh.w	r2, [fp, r2, lsl #1]
 8022b4c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8022b50:	e7e5      	b.n	8022b1e <lv_draw_sw_transform+0x286>
 8022b52:	2200      	movs	r2, #0
 8022b54:	e78a      	b.n	8022a6c <lv_draw_sw_transform+0x1d4>
    switch(cf) {
 8022b56:	f1b9 0f06 	cmp.w	r9, #6
 8022b5a:	d013      	beq.n	8022b84 <lv_draw_sw_transform+0x2ec>
 8022b5c:	d80c      	bhi.n	8022b78 <lv_draw_sw_transform+0x2e0>
 8022b5e:	f1b9 0f04 	cmp.w	r9, #4
 8022b62:	d015      	beq.n	8022b90 <lv_draw_sw_transform+0x2f8>
 8022b64:	f1b9 0f05 	cmp.w	r9, #5
 8022b68:	f47f af46 	bne.w	80229f8 <lv_draw_sw_transform+0x160>
    lv_color_t ck = {0};
 8022b6c:	2600      	movs	r6, #0
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 8022b6e:	2303      	movs	r3, #3
            px_size = sizeof(lv_color_t);
 8022b70:	9308      	str	r3, [sp, #32]
            has_alpha = true;
 8022b72:	2301      	movs	r3, #1
 8022b74:	9310      	str	r3, [sp, #64]	; 0x40
 8022b76:	e00f      	b.n	8022b98 <lv_draw_sw_transform+0x300>
    switch(cf) {
 8022b78:	f1b9 0f14 	cmp.w	r9, #20
 8022b7c:	f47f af3c 	bne.w	80229f8 <lv_draw_sw_transform+0x160>
    lv_color_t ck = {0};
 8022b80:	2600      	movs	r6, #0
 8022b82:	e003      	b.n	8022b8c <lv_draw_sw_transform+0x2f4>
                lv_disp_t * d = _lv_refr_get_disp_refreshing();
 8022b84:	f7e4 fb3e 	bl	8007204 <_lv_refr_get_disp_refreshing>
                ck = d->driver->color_chroma_key;
 8022b88:	6803      	ldr	r3, [r0, #0]
 8022b8a:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
            px_size = sizeof(lv_color_t);
 8022b8c:	2302      	movs	r3, #2
 8022b8e:	e7ef      	b.n	8022b70 <lv_draw_sw_transform+0x2d8>
    switch(cf) {
 8022b90:	2600      	movs	r6, #0
 8022b92:	2302      	movs	r3, #2
 8022b94:	9610      	str	r6, [sp, #64]	; 0x40
 8022b96:	9308      	str	r3, [sp, #32]
    for(x = 0; x < x_end; x++) {
 8022b98:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 8022b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8022b9e:	2300      	movs	r3, #0
 8022ba0:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8022ba4:	9312      	str	r3, [sp, #72]	; 0x48
 8022ba6:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8022baa:	9a05      	ldr	r2, [sp, #20]
 8022bac:	429a      	cmp	r2, r3
 8022bae:	f77f af23 	ble.w	80229f8 <lv_draw_sw_transform+0x160>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8022bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022bb4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022bb6:	eb03 2522 	add.w	r5, r3, r2, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022bba:	1228      	asrs	r0, r5, #8
 8022bbc:	d40c      	bmi.n	8022bd8 <lv_draw_sw_transform+0x340>
 8022bbe:	9b07      	ldr	r3, [sp, #28]
 8022bc0:	4298      	cmp	r0, r3
 8022bc2:	da09      	bge.n	8022bd8 <lv_draw_sw_transform+0x340>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8022bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022bc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022bc8:	eb03 2322 	add.w	r3, r3, r2, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8022bcc:	ea5f 2c23 	movs.w	ip, r3, asr #8
 8022bd0:	d402      	bmi.n	8022bd8 <lv_draw_sw_transform+0x340>
 8022bd2:	9a03      	ldr	r2, [sp, #12]
 8022bd4:	4594      	cmp	ip, r2
 8022bd6:	db02      	blt.n	8022bde <lv_draw_sw_transform+0x346>
                abuf[x] = 0x00;
 8022bd8:	f04f 0300 	mov.w	r3, #0
 8022bdc:	e0ab      	b.n	8022d36 <lv_draw_sw_transform+0x49e>
        int32_t xs_fract = xs_ups & 0xFF;
 8022bde:	b2e9      	uxtb	r1, r5
        if(xs_fract < 0x80) {
 8022be0:	062d      	lsls	r5, r5, #24
        int32_t ys_fract = ys_ups & 0xFF;
 8022be2:	b2da      	uxtb	r2, r3
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8022be4:	9d08      	ldr	r5, [sp, #32]
            xs_fract = (0x7F - xs_fract) * 2;
 8022be6:	bf55      	itete	pl
 8022be8:	f1c1 017f 	rsbpl	r1, r1, #127	; 0x7f
            xs_fract = (xs_fract - 0x80) * 2;
 8022bec:	3980      	submi	r1, #128	; 0x80
            xs_fract = (0x7F - xs_fract) * 2;
 8022bee:	0049      	lslpl	r1, r1, #1
            xs_fract = (xs_fract - 0x80) * 2;
 8022bf0:	0049      	lslmi	r1, r1, #1
            xs_fract = (0x7F - xs_fract) * 2;
 8022bf2:	bf59      	ittee	pl
 8022bf4:	910d      	strpl	r1, [sp, #52]	; 0x34
            x_next = -1;
 8022bf6:	f04f 31ff 	movpl.w	r1, #4294967295
            xs_fract = (xs_fract - 0x80) * 2;
 8022bfa:	910d      	strmi	r1, [sp, #52]	; 0x34
            x_next = 1;
 8022bfc:	2101      	movmi	r1, #1
        if(ys_fract < 0x80) {
 8022bfe:	061b      	lsls	r3, r3, #24
        if(xs_int + x_next >= 0 &&
 8022c00:	eb00 0e01 	add.w	lr, r0, r1
            ys_fract = (0x7F - ys_fract) * 2;
 8022c04:	bf55      	itete	pl
 8022c06:	f1c2 027f 	rsbpl	r2, r2, #127	; 0x7f
            ys_fract = (ys_fract - 0x80) * 2;
 8022c0a:	3a80      	submi	r2, #128	; 0x80
            ys_fract = (0x7F - ys_fract) * 2;
 8022c0c:	0053      	lslpl	r3, r2, #1
            ys_fract = (ys_fract - 0x80) * 2;
 8022c0e:	0053      	lslmi	r3, r2, #1
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8022c10:	9a04      	ldr	r2, [sp, #16]
            ys_fract = (0x7F - ys_fract) * 2;
 8022c12:	bf5c      	itt	pl
 8022c14:	930c      	strpl	r3, [sp, #48]	; 0x30
            y_next = -1;
 8022c16:	f04f 33ff 	movpl.w	r3, #4294967295
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8022c1a:	fb02 fa0c 	mul.w	sl, r2, ip
            ys_fract = (ys_fract - 0x80) * 2;
 8022c1e:	bf44      	itt	mi
 8022c20:	930c      	strmi	r3, [sp, #48]	; 0x30
            y_next = 1;
 8022c22:	2301      	movmi	r3, #1
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8022c24:	eb00 020a 	add.w	r2, r0, sl
        if(xs_int + x_next >= 0 &&
 8022c28:	f1be 3fff 	cmp.w	lr, #4294967295
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8022c2c:	fb05 f702 	mul.w	r7, r5, r2
 8022c30:	9215      	str	r2, [sp, #84]	; 0x54
 8022c32:	eb0b 0507 	add.w	r5, fp, r7
        if(xs_int + x_next >= 0 &&
 8022c36:	f000 8099 	beq.w	8022d6c <lv_draw_sw_transform+0x4d4>
 8022c3a:	9a07      	ldr	r2, [sp, #28]
 8022c3c:	4572      	cmp	r2, lr
 8022c3e:	f340 80a7 	ble.w	8022d90 <lv_draw_sw_transform+0x4f8>
           ys_int + y_next >= 0 &&
 8022c42:	eb0c 0803 	add.w	r8, ip, r3
           xs_int + x_next <= src_w - 1 &&
 8022c46:	f1b8 3fff 	cmp.w	r8, #4294967295
 8022c4a:	f000 80a1 	beq.w	8022d90 <lv_draw_sw_transform+0x4f8>
           ys_int + y_next >= 0 &&
 8022c4e:	9a03      	ldr	r2, [sp, #12]
 8022c50:	4542      	cmp	r2, r8
 8022c52:	f340 809d 	ble.w	8022d90 <lv_draw_sw_transform+0x4f8>
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 8022c56:	9a08      	ldr	r2, [sp, #32]
 8022c58:	fb01 fe02 	mul.w	lr, r1, r2
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 8022c5c:	9a04      	ldr	r2, [sp, #16]
 8022c5e:	4353      	muls	r3, r2
 8022c60:	9a08      	ldr	r2, [sp, #32]
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 8022c62:	eb05 0a0e 	add.w	sl, r5, lr
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 8022c66:	4353      	muls	r3, r2
 8022c68:	18ea      	adds	r2, r5, r3
 8022c6a:	9219      	str	r2, [sp, #100]	; 0x64
            if(has_alpha) {
 8022c6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022c6e:	2a00      	cmp	r2, #0
 8022c70:	d063      	beq.n	8022d3a <lv_draw_sw_transform+0x4a2>
                if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8022c72:	f1b9 0f05 	cmp.w	r9, #5
 8022c76:	d12d      	bne.n	8022cd4 <lv_draw_sw_transform+0x43c>
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8022c78:	18ea      	adds	r2, r5, r3
                    a_base = px_base[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8022c7a:	f895 c002 	ldrb.w	ip, [r5, #2]
                    a_hor = px_hor[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8022c7e:	f89a 1002 	ldrb.w	r1, [sl, #2]
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8022c82:	7890      	ldrb	r0, [r2, #2]
                if(a_ver != a_base) a_ver = ((a_ver * ys_fract) + (a_base * (0x100 - ys_fract))) >> 8;
 8022c84:	4584      	cmp	ip, r0
 8022c86:	d007      	beq.n	8022c98 <lv_draw_sw_transform+0x400>
 8022c88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022c8a:	f5c2 7880 	rsb	r8, r2, #256	; 0x100
 8022c8e:	4350      	muls	r0, r2
 8022c90:	fb0c 0008 	mla	r0, ip, r8, r0
 8022c94:	f3c0 2007 	ubfx	r0, r0, #8, #8
                if(a_hor != a_base) a_hor = ((a_hor * xs_fract) + (a_base * (0x100 - xs_fract))) >> 8;
 8022c98:	458c      	cmp	ip, r1
 8022c9a:	d007      	beq.n	8022cac <lv_draw_sw_transform+0x414>
 8022c9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022c9e:	f5c2 7880 	rsb	r8, r2, #256	; 0x100
 8022ca2:	4351      	muls	r1, r2
 8022ca4:	fb0c 1108 	mla	r1, ip, r8, r1
 8022ca8:	f3c1 2107 	ubfx	r1, r1, #8, #8
                abuf[x] = (a_ver + a_hor) >> 1;
 8022cac:	4408      	add	r0, r1
 8022cae:	1040      	asrs	r0, r0, #1
 8022cb0:	7020      	strb	r0, [r4, #0]
                if(abuf[x] == 0x00) continue;
 8022cb2:	bb40      	cbnz	r0, 8022d06 <lv_draw_sw_transform+0x46e>
    for(x = 0; x < x_end; x++) {
 8022cb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022cb6:	3401      	adds	r4, #1
 8022cb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022cba:	3301      	adds	r3, #1
 8022cbc:	9312      	str	r3, [sp, #72]	; 0x48
 8022cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022cc0:	3302      	adds	r3, #2
 8022cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8022cc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022cc6:	4413      	add	r3, r2
 8022cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022cca:	9314      	str	r3, [sp, #80]	; 0x50
 8022ccc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022cce:	4413      	add	r3, r2
 8022cd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8022cd2:	e768      	b.n	8022ba6 <lv_draw_sw_transform+0x30e>
                else if(cf == LV_IMG_CF_RGB565A8) {
 8022cd4:	f1b9 0f14 	cmp.w	r9, #20
 8022cd8:	d110      	bne.n	8022cfc <lv_draw_sw_transform+0x464>
                    const lv_opa_t * a_tmp = src + src_stride * src_h * sizeof(lv_color_t);
 8022cda:	e9dd c203 	ldrd	ip, r2, [sp, #12]
 8022cde:	fb0c fa02 	mul.w	sl, ip, r2
                    a_base = *(a_tmp + (ys_int * src_stride) + xs_int);
 8022ce2:	9a15      	ldr	r2, [sp, #84]	; 0x54
                    const lv_opa_t * a_tmp = src + src_stride * src_h * sizeof(lv_color_t);
 8022ce4:	eb0b 0a4a 	add.w	sl, fp, sl, lsl #1
                    a_hor = *(a_tmp + (ys_int * src_stride) + xs_int + x_next);
 8022ce8:	4451      	add	r1, sl
                    a_base = *(a_tmp + (ys_int * src_stride) + xs_int);
 8022cea:	f81a c002 	ldrb.w	ip, [sl, r2]
                    a_hor = *(a_tmp + (ys_int * src_stride) + xs_int + x_next);
 8022cee:	5c89      	ldrb	r1, [r1, r2]
                    a_ver = *(a_tmp + ((ys_int + y_next) * src_stride) + xs_int);
 8022cf0:	9a04      	ldr	r2, [sp, #16]
 8022cf2:	fb08 aa02 	mla	sl, r8, r2, sl
 8022cf6:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8022cfa:	e7c3      	b.n	8022c84 <lv_draw_sw_transform+0x3ec>
                else if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8022cfc:	f1b9 0f06 	cmp.w	r9, #6
 8022d00:	d00d      	beq.n	8022d1e <lv_draw_sw_transform+0x486>
                abuf[x] = (a_ver + a_hor) >> 1;
 8022d02:	21ff      	movs	r1, #255	; 0xff
 8022d04:	7021      	strb	r1, [r4, #0]
                c_base.full = px_base[0] + (px_base[1] << 8);
 8022d06:	f83b 1007 	ldrh.w	r1, [fp, r7]
                c_ver.full = px_ver[0] + (px_ver[1] << 8);
 8022d0a:	5ae8      	ldrh	r0, [r5, r3]
                c_hor.full = px_hor[0] + (px_hor[1] << 8);
 8022d0c:	f835 700e 	ldrh.w	r7, [r5, lr]
            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 8022d10:	4288      	cmp	r0, r1
 8022d12:	d11a      	bne.n	8022d4a <lv_draw_sw_transform+0x4b2>
 8022d14:	42b8      	cmp	r0, r7
 8022d16:	d118      	bne.n	8022d4a <lv_draw_sw_transform+0x4b2>
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 8022d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d1a:	8018      	strh	r0, [r3, #0]
 8022d1c:	e7ca      	b.n	8022cb4 <lv_draw_sw_transform+0x41c>
                    if(((lv_color_t *)px_base)->full == ck.full ||
 8022d1e:	f83b 1007 	ldrh.w	r1, [fp, r7]
 8022d22:	42b1      	cmp	r1, r6
 8022d24:	d006      	beq.n	8022d34 <lv_draw_sw_transform+0x49c>
 8022d26:	5ae9      	ldrh	r1, [r5, r3]
 8022d28:	42b1      	cmp	r1, r6
 8022d2a:	d003      	beq.n	8022d34 <lv_draw_sw_transform+0x49c>
                       ((lv_color_t *)px_ver)->full == ck.full ||
 8022d2c:	f835 100e 	ldrh.w	r1, [r5, lr]
 8022d30:	42b1      	cmp	r1, r6
 8022d32:	d1e6      	bne.n	8022d02 <lv_draw_sw_transform+0x46a>
                        abuf[x] = 0x00;
 8022d34:	2300      	movs	r3, #0
                abuf[x] = 0x00;
 8022d36:	7023      	strb	r3, [r4, #0]
 8022d38:	e7bc      	b.n	8022cb4 <lv_draw_sw_transform+0x41c>
                c_ver = *((const lv_color_t *) px_ver);
 8022d3a:	5ae8      	ldrh	r0, [r5, r3]
                abuf[x] = 0xff;
 8022d3c:	23ff      	movs	r3, #255	; 0xff
                c_base = *((const lv_color_t *) px_base);
 8022d3e:	f83b 1007 	ldrh.w	r1, [fp, r7]
                c_hor = *((const lv_color_t *) px_hor);
 8022d42:	f835 700e 	ldrh.w	r7, [r5, lr]
                abuf[x] = 0xff;
 8022d46:	7023      	strb	r3, [r4, #0]
 8022d48:	e7e2      	b.n	8022d10 <lv_draw_sw_transform+0x478>
                c_ver = lv_color_mix(c_ver, c_base, ys_fract);
 8022d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022d4c:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8022d50:	f7ff fd2f 	bl	80227b2 <lv_color_mix>
                c_hor = lv_color_mix(c_hor, c_base, xs_fract);
 8022d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                c_ver = lv_color_mix(c_ver, c_base, ys_fract);
 8022d56:	4605      	mov	r5, r0
                c_hor = lv_color_mix(c_hor, c_base, xs_fract);
 8022d58:	4638      	mov	r0, r7
 8022d5a:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8022d5e:	f7ff fd28 	bl	80227b2 <lv_color_mix>
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 8022d62:	227f      	movs	r2, #127	; 0x7f
 8022d64:	4629      	mov	r1, r5
 8022d66:	f7ff fd24 	bl	80227b2 <lv_color_mix>
 8022d6a:	e7d5      	b.n	8022d18 <lv_draw_sw_transform+0x480>
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8022d6c:	f83b 7007 	ldrh.w	r7, [fp, r7]
            switch(cf) {
 8022d70:	f1b9 0f06 	cmp.w	r9, #6
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8022d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022d76:	8017      	strh	r7, [r2, #0]
            switch(cf) {
 8022d78:	d111      	bne.n	8022d9e <lv_draw_sw_transform+0x506>
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 8022d7a:	1bf7      	subs	r7, r6, r7
 8022d7c:	bf18      	it	ne
 8022d7e:	f04f 37ff 	movne.w	r7, #4294967295
 8022d82:	b2ff      	uxtb	r7, r7
                abuf[x] = (a * (0xFF - xs_fract)) >> 8;
 8022d84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022d86:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8022d8a:	437b      	muls	r3, r7
 8022d8c:	121b      	asrs	r3, r3, #8
 8022d8e:	e7d2      	b.n	8022d36 <lv_draw_sw_transform+0x49e>
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8022d90:	f83b 7007 	ldrh.w	r7, [fp, r7]
            switch(cf) {
 8022d94:	f1b9 0f06 	cmp.w	r9, #6
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8022d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022d9a:	8017      	strh	r7, [r2, #0]
            switch(cf) {
 8022d9c:	d01d      	beq.n	8022dda <lv_draw_sw_transform+0x542>
 8022d9e:	f1b9 0f14 	cmp.w	r9, #20
 8022da2:	d020      	beq.n	8022de6 <lv_draw_sw_transform+0x54e>
 8022da4:	f1b9 0f05 	cmp.w	r9, #5
 8022da8:	d126      	bne.n	8022df8 <lv_draw_sw_transform+0x560>
                    a = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8022daa:	78af      	ldrb	r7, [r5, #2]
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 8022dac:	bb30      	cbnz	r0, 8022dfc <lv_draw_sw_transform+0x564>
 8022dae:	f1be 3fff 	cmp.w	lr, #4294967295
 8022db2:	d0e7      	beq.n	8022d84 <lv_draw_sw_transform+0x4ec>
 8022db4:	9a07      	ldr	r2, [sp, #28]
 8022db6:	2a01      	cmp	r2, #1
 8022db8:	d0e4      	beq.n	8022d84 <lv_draw_sw_transform+0x4ec>
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 8022dba:	f1bc 0f00 	cmp.w	ip, #0
 8022dbe:	d123      	bne.n	8022e08 <lv_draw_sw_transform+0x570>
 8022dc0:	3301      	adds	r3, #1
 8022dc2:	d003      	beq.n	8022dcc <lv_draw_sw_transform+0x534>
 8022dc4:	9b03      	ldr	r3, [sp, #12]
 8022dc6:	2b01      	cmp	r3, #1
 8022dc8:	f47f af06 	bne.w	8022bd8 <lv_draw_sw_transform+0x340>
                abuf[x] = (a * (0xFF - ys_fract)) >> 8;
 8022dcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022dce:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8022dd2:	437a      	muls	r2, r7
 8022dd4:	1212      	asrs	r2, r2, #8
 8022dd6:	7022      	strb	r2, [r4, #0]
 8022dd8:	e76c      	b.n	8022cb4 <lv_draw_sw_transform+0x41c>
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 8022dda:	1bf7      	subs	r7, r6, r7
 8022ddc:	bf18      	it	ne
 8022dde:	f04f 37ff 	movne.w	r7, #4294967295
 8022de2:	b2ff      	uxtb	r7, r7
 8022de4:	e7e2      	b.n	8022dac <lv_draw_sw_transform+0x514>
                    a = *(src + src_stride * src_h * sizeof(lv_color_t) + (ys_int * src_stride) + xs_int);
 8022de6:	e9dd 5203 	ldrd	r5, r2, [sp, #12]
 8022dea:	4355      	muls	r5, r2
 8022dec:	eb0b 0545 	add.w	r5, fp, r5, lsl #1
 8022df0:	4405      	add	r5, r0
 8022df2:	f815 700a 	ldrb.w	r7, [r5, sl]
                    break;
 8022df6:	e7d9      	b.n	8022dac <lv_draw_sw_transform+0x514>
            switch(cf) {
 8022df8:	27ff      	movs	r7, #255	; 0xff
 8022dfa:	e7d7      	b.n	8022dac <lv_draw_sw_transform+0x514>
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 8022dfc:	9a07      	ldr	r2, [sp, #28]
 8022dfe:	1e55      	subs	r5, r2, #1
 8022e00:	42a8      	cmp	r0, r5
 8022e02:	d1da      	bne.n	8022dba <lv_draw_sw_transform+0x522>
 8022e04:	2901      	cmp	r1, #1
 8022e06:	e7d7      	b.n	8022db8 <lv_draw_sw_transform+0x520>
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 8022e08:	9a03      	ldr	r2, [sp, #12]
 8022e0a:	1e51      	subs	r1, r2, #1
 8022e0c:	458c      	cmp	ip, r1
 8022e0e:	f47f aee3 	bne.w	8022bd8 <lv_draw_sw_transform+0x340>
 8022e12:	e7d8      	b.n	8022dc6 <lv_draw_sw_transform+0x52e>

08022e14 <lv_area_get_width>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8022e14:	8883      	ldrh	r3, [r0, #4]
 8022e16:	8802      	ldrh	r2, [r0, #0]
 8022e18:	3301      	adds	r3, #1
 8022e1a:	1a98      	subs	r0, r3, r2
}
 8022e1c:	b200      	sxth	r0, r0
 8022e1e:	4770      	bx	lr

08022e20 <lv_area_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8022e20:	88c3      	ldrh	r3, [r0, #6]
 8022e22:	8842      	ldrh	r2, [r0, #2]
 8022e24:	3301      	adds	r3, #1
 8022e26:	1a98      	subs	r0, r3, r2
}
 8022e28:	b200      	sxth	r0, r0
 8022e2a:	4770      	bx	lr

08022e2c <place_content>:
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, lv_coord_t max_size, lv_coord_t content_size, lv_coord_t item_cnt,
                          lv_coord_t * start_pos, lv_coord_t * gap)
{
    if(item_cnt <= 1) {
 8022e2c:	2b01      	cmp	r3, #1
{
 8022e2e:	b570      	push	{r4, r5, r6, lr}
 8022e30:	461e      	mov	r6, r3
 8022e32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    if(item_cnt <= 1) {
 8022e36:	dc02      	bgt.n	8022e3e <place_content+0x12>
        switch(place) {
 8022e38:	1ec3      	subs	r3, r0, #3
 8022e3a:	2b02      	cmp	r3, #2
 8022e3c:	d907      	bls.n	8022e4e <place_content+0x22>
            default:
                break;
        }
    }

    switch(place) {
 8022e3e:	3801      	subs	r0, #1
 8022e40:	2804      	cmp	r0, #4
 8022e42:	d836      	bhi.n	8022eb2 <place_content+0x86>
 8022e44:	e8df f000 	tbb	[pc, r0]
 8022e48:	1c2a030d 	.word	0x1c2a030d
 8022e4c:	14          	.byte	0x14
 8022e4d:	00          	.byte	0x00
        case LV_FLEX_ALIGN_CENTER:
            *gap = 0;
 8022e4e:	2300      	movs	r3, #0
            *start_pos += (max_size - content_size) / 2;
 8022e50:	1a8a      	subs	r2, r1, r2
            *gap = 0;
 8022e52:	802b      	strh	r3, [r5, #0]
            *start_pos += (max_size - content_size) / 2;
 8022e54:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8022e58:	8823      	ldrh	r3, [r4, #0]
 8022e5a:	eb03 0362 	add.w	r3, r3, r2, asr #1
        case LV_FLEX_ALIGN_SPACE_BETWEEN:
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
            break;
        case LV_FLEX_ALIGN_SPACE_AROUND:
            *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
            *start_pos += *gap / 2;
 8022e5e:	8023      	strh	r3, [r4, #0]
            break;
 8022e60:	e005      	b.n	8022e6e <place_content+0x42>
            *gap = 0;
 8022e62:	2300      	movs	r3, #0
            *start_pos += max_size - content_size;
 8022e64:	1a8a      	subs	r2, r1, r2
            *gap = 0;
 8022e66:	802b      	strh	r3, [r5, #0]
            *start_pos += max_size - content_size;
 8022e68:	8823      	ldrh	r3, [r4, #0]
 8022e6a:	441a      	add	r2, r3
 8022e6c:	8022      	strh	r2, [r4, #0]
            *start_pos += *gap;
            break;
        default:
            *gap = 0;
    }
}
 8022e6e:	bd70      	pop	{r4, r5, r6, pc}
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
 8022e70:	1a8a      	subs	r2, r1, r2
 8022e72:	3e01      	subs	r6, #1
 8022e74:	b212      	sxth	r2, r2
 8022e76:	b236      	sxth	r6, r6
 8022e78:	fb92 f2f6 	sdiv	r2, r2, r6
 8022e7c:	802a      	strh	r2, [r5, #0]
            break;
 8022e7e:	e7f6      	b.n	8022e6e <place_content+0x42>
            *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
 8022e80:	1a8a      	subs	r2, r1, r2
 8022e82:	b213      	sxth	r3, r2
 8022e84:	882a      	ldrh	r2, [r5, #0]
 8022e86:	fb93 f3f6 	sdiv	r3, r3, r6
 8022e8a:	4413      	add	r3, r2
 8022e8c:	b21b      	sxth	r3, r3
 8022e8e:	802b      	strh	r3, [r5, #0]
            *start_pos += *gap / 2;
 8022e90:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8022e94:	8822      	ldrh	r2, [r4, #0]
 8022e96:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8022e9a:	e7e0      	b.n	8022e5e <place_content+0x32>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt + 1);
 8022e9c:	1a89      	subs	r1, r1, r2
 8022e9e:	3601      	adds	r6, #1
 8022ea0:	b209      	sxth	r1, r1
 8022ea2:	b236      	sxth	r6, r6
 8022ea4:	fb91 f1f6 	sdiv	r1, r1, r6
 8022ea8:	8029      	strh	r1, [r5, #0]
            *start_pos += *gap;
 8022eaa:	8823      	ldrh	r3, [r4, #0]
 8022eac:	4419      	add	r1, r3
 8022eae:	8021      	strh	r1, [r4, #0]
            break;
 8022eb0:	e7dd      	b.n	8022e6e <place_content+0x42>
            *gap = 0;
 8022eb2:	2300      	movs	r3, #0
 8022eb4:	802b      	strh	r3, [r5, #0]
}
 8022eb6:	e7da      	b.n	8022e6e <place_content+0x42>

08022eb8 <get_next_item>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
    if(rev) {
        (*item_id)--;
 8022eb8:	6813      	ldr	r3, [r2, #0]
    if(rev) {
 8022eba:	b151      	cbz	r1, 8022ed2 <get_next_item+0x1a>
        (*item_id)--;
 8022ebc:	3b01      	subs	r3, #1
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 8022ebe:	2b00      	cmp	r3, #0
        (*item_id)--;
 8022ec0:	6013      	str	r3, [r2, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 8022ec2:	da01      	bge.n	8022ec8 <get_next_item+0x10>
        else return NULL;
 8022ec4:	2000      	movs	r0, #0
 8022ec6:	4770      	bx	lr
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 8022ec8:	6882      	ldr	r2, [r0, #8]
    }
    else {
        (*item_id)++;
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 8022eca:	6812      	ldr	r2, [r2, #0]
 8022ecc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        else return NULL;
    }
}
 8022ed0:	4770      	bx	lr
        (*item_id)++;
 8022ed2:	3301      	adds	r3, #1
 8022ed4:	6013      	str	r3, [r2, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 8022ed6:	6882      	ldr	r2, [r0, #8]
 8022ed8:	6851      	ldr	r1, [r2, #4]
 8022eda:	428b      	cmp	r3, r1
 8022edc:	dbf5      	blt.n	8022eca <get_next_item+0x12>
 8022ede:	e7f1      	b.n	8022ec4 <get_next_item+0xc>

08022ee0 <lv_obj_set_flex_grow>:
{
 8022ee0:	b510      	push	{r4, lr}
 8022ee2:	4604      	mov	r4, r0
    lv_obj_set_style_flex_grow(obj, grow, 0);
 8022ee4:	2200      	movs	r2, #0
 8022ee6:	f7e8 fb81 	bl	800b5ec <lv_obj_set_style_flex_grow>
    lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8022eea:	4620      	mov	r0, r4
 8022eec:	f7fb f94c 	bl	801e188 <lv_obj_get_parent>
}
 8022ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8022ef4:	f7f9 bc1d 	b.w	801c732 <lv_obj_mark_layout_as_dirty>

08022ef8 <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 8022ef8:	b508      	push	{r3, lr}
#if LV_USE_FLEX
    lv_flex_init();
 8022efa:	f7e8 fb03 	bl	800b504 <lv_flex_init>
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 8022efe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lv_grid_init();
 8022f02:	f7e9 b80b 	b.w	800bf1c <lv_grid_init>

08022f06 <lv_color_mix>:
{
 8022f06:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022f08:	f3c1 1345 	ubfx	r3, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8022f0c:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022f10:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8022f14:	f000 071f 	and.w	r7, r0, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022f18:	4373      	muls	r3, r6
 8022f1a:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8022f1e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022f22:	fb04 3302 	mla	r3, r4, r2, r3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8022f26:	f001 041f 	and.w	r4, r1, #31
 8022f2a:	4374      	muls	r4, r6
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022f2c:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8022f2e:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8022f32:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8022f34:	3480      	adds	r4, #128	; 0x80
    return ret;
 8022f36:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8022f3a:	436c      	muls	r4, r5
    return ret;
 8022f3c:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 8022f40:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8022f44:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 8022f48:	4373      	muls	r3, r6
 8022f4a:	fb00 3302 	mla	r3, r0, r2, r3
 8022f4e:	3380      	adds	r3, #128	; 0x80
 8022f50:	436b      	muls	r3, r5
 8022f52:	0ddb      	lsrs	r3, r3, #23
}
 8022f54:	ea44 20c3 	orr.w	r0, r4, r3, lsl #11
 8022f58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022f5a <lv_color_white>:
}
 8022f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8022f5e:	4770      	bx	lr

08022f60 <lv_style_set_pad_gap>:
{
 8022f60:	b538      	push	{r3, r4, r5, lr}
 8022f62:	4604      	mov	r4, r0
 8022f64:	460d      	mov	r5, r1
    lv_style_set_pad_row(style, value);
 8022f66:	f001 ffe6 	bl	8024f36 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8022f6a:	4629      	mov	r1, r5
 8022f6c:	4620      	mov	r0, r4
}
 8022f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_style_set_pad_column(style, value);
 8022f72:	f001 bfe4 	b.w	8024f3e <lv_style_set_pad_column>

08022f76 <lv_style_set_pad_ver>:
{
 8022f76:	b538      	push	{r3, r4, r5, lr}
 8022f78:	4604      	mov	r4, r0
 8022f7a:	460d      	mov	r5, r1
    lv_style_set_pad_top(style, value);
 8022f7c:	f001 ffcb 	bl	8024f16 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8022f80:	4629      	mov	r1, r5
 8022f82:	4620      	mov	r0, r4
}
 8022f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_style_set_pad_bottom(style, value);
 8022f88:	f001 bfc9 	b.w	8024f1e <lv_style_set_pad_bottom>

08022f8c <dark_color_filter_cb>:
{
 8022f8c:	4608      	mov	r0, r1
    return lv_color_darken(c, opa);
 8022f8e:	4611      	mov	r1, r2
 8022f90:	f001 bb4e 	b.w	8024630 <lv_color_darken>

08022f94 <lv_style_set_size>:
{
 8022f94:	b538      	push	{r3, r4, r5, lr}
 8022f96:	4604      	mov	r4, r0
 8022f98:	460d      	mov	r5, r1
    lv_style_set_width(style, value);
 8022f9a:	f001 ffa4 	bl	8024ee6 <lv_style_set_width>
    lv_style_set_height(style, value);
 8022f9e:	4629      	mov	r1, r5
 8022fa0:	4620      	mov	r0, r4
}
 8022fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_style_set_height(style, value);
 8022fa6:	f001 bfa6 	b.w	8024ef6 <lv_style_set_height>

08022faa <lv_style_set_pad_hor>:
{
 8022faa:	b538      	push	{r3, r4, r5, lr}
 8022fac:	4604      	mov	r4, r0
 8022fae:	460d      	mov	r5, r1
    lv_style_set_pad_left(style, value);
 8022fb0:	f001 ffb9 	bl	8024f26 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8022fb4:	4629      	mov	r1, r5
 8022fb6:	4620      	mov	r0, r4
}
 8022fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_style_set_pad_right(style, value);
 8022fbc:	f001 bfb7 	b.w	8024f2e <lv_style_set_pad_right>

08022fc0 <lv_style_set_pad_all>:
{
 8022fc0:	b538      	push	{r3, r4, r5, lr}
 8022fc2:	4604      	mov	r4, r0
 8022fc4:	460d      	mov	r5, r1
    lv_style_set_pad_left(style, value);
 8022fc6:	f001 ffae 	bl	8024f26 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8022fca:	4629      	mov	r1, r5
 8022fcc:	4620      	mov	r0, r4
 8022fce:	f001 ffae 	bl	8024f2e <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8022fd2:	4629      	mov	r1, r5
 8022fd4:	4620      	mov	r0, r4
 8022fd6:	f001 ff9e 	bl	8024f16 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8022fda:	4629      	mov	r1, r5
 8022fdc:	4620      	mov	r0, r4
}
 8022fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_style_set_pad_bottom(style, value);
 8022fe2:	f001 bf9c 	b.w	8024f1e <lv_style_set_pad_bottom>

08022fe6 <lv_disp_dpx.part.0>:
static inline lv_coord_t lv_disp_dpx(const lv_disp_t * disp, lv_coord_t n)
 8022fe6:	b538      	push	{r3, r4, r5, lr}
 8022fe8:	460c      	mov	r4, r1
 8022fea:	4605      	mov	r5, r0
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 8022fec:	f7ef f874 	bl	80120d8 <lv_disp_get_dpi>
 8022ff0:	4360      	muls	r0, r4
 8022ff2:	28ef      	cmp	r0, #239	; 0xef
 8022ff4:	dd0a      	ble.n	802300c <lv_disp_dpx.part.0+0x26>
 8022ff6:	4628      	mov	r0, r5
 8022ff8:	f7ef f86e 	bl	80120d8 <lv_disp_get_dpi>
 8022ffc:	2350      	movs	r3, #80	; 0x50
 8022ffe:	fb04 3000 	mla	r0, r4, r0, r3
 8023002:	23a0      	movs	r3, #160	; 0xa0
 8023004:	fb90 f0f3 	sdiv	r0, r0, r3
 8023008:	b200      	sxth	r0, r0
}
 802300a:	bd38      	pop	{r3, r4, r5, pc}
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 802300c:	2001      	movs	r0, #1
 802300e:	e7fc      	b.n	802300a <lv_disp_dpx.part.0+0x24>

08023010 <get_month_length>:
 * @return [28..31]
 */
static uint8_t get_month_length(int32_t year, int32_t month)
{
    month--;
    if(month < 0) {
 8023010:	1e4b      	subs	r3, r1, #1
 8023012:	d519      	bpl.n	8023048 <get_month_length+0x38>
        year--;             /*Already in the previous year (won't be less then -12 to skip a whole year)*/
 8023014:	3801      	subs	r0, #1
        month = 12 + month; /*`month` is negative, the result will be < 12*/
 8023016:	f101 030b 	add.w	r3, r1, #11
        year++;
        month -= 12;
    }

    /*month == 1 is february*/
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 802301a:	2b01      	cmp	r3, #1
 802301c:	d11c      	bne.n	8023058 <get_month_length+0x48>
 * @param year a year
 * @return 0: not leap year; 1: leap year
 */
static uint8_t is_leap_year(uint32_t year)
{
    return (year % 4) || ((year % 100 == 0) && (year % 400)) ? 0 : 1;
 802301e:	0782      	lsls	r2, r0, #30
 8023020:	d118      	bne.n	8023054 <get_month_length+0x44>
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8023022:	2164      	movs	r1, #100	; 0x64
 8023024:	fbb0 f2f1 	udiv	r2, r0, r1
 8023028:	fb01 0212 	mls	r2, r1, r2, r0
    return (year % 4) || ((year % 100 == 0) && (year % 400)) ? 0 : 1;
 802302c:	b942      	cbnz	r2, 8023040 <get_month_length+0x30>
 802302e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023032:	fbb0 f2f3 	udiv	r2, r0, r3
 8023036:	fb03 0012 	mls	r0, r3, r2, r0
 802303a:	fab0 f380 	clz	r3, r0
 802303e:	095b      	lsrs	r3, r3, #5
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8023040:	f103 001c 	add.w	r0, r3, #28
 8023044:	b2c0      	uxtb	r0, r0
}
 8023046:	4770      	bx	lr
    if(month >= 12) {
 8023048:	2b0b      	cmp	r3, #11
        year++;
 802304a:	bfc4      	itt	gt
 802304c:	3001      	addgt	r0, #1
        month -= 12;
 802304e:	f1a1 030d 	subgt.w	r3, r1, #13
 8023052:	e7e2      	b.n	802301a <get_month_length+0xa>
    return (year % 4) || ((year % 100 == 0) && (year % 400)) ? 0 : 1;
 8023054:	2300      	movs	r3, #0
 8023056:	e7f3      	b.n	8023040 <get_month_length+0x30>
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8023058:	2207      	movs	r2, #7
 802305a:	fb93 f2f2 	sdiv	r2, r3, r2
 802305e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8023062:	1a9b      	subs	r3, r3, r2
 8023064:	f003 0001 	and.w	r0, r3, #1
 8023068:	bf48      	it	mi
 802306a:	4240      	negmi	r0, r0
 802306c:	f1c0 001f 	rsb	r0, r0, #31
 8023070:	e7e8      	b.n	8023044 <get_month_length+0x34>

08023072 <draw_part_begin_event_cb>:
{
 8023072:	b570      	push	{r4, r5, r6, lr}
 8023074:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8023076:	f7f8 f8bc 	bl	801b1f2 <lv_event_get_target>
 802307a:	4605      	mov	r5, r0
    lv_obj_draw_part_dsc_t * dsc = lv_event_get_param(e);
 802307c:	4620      	mov	r0, r4
 802307e:	f7f8 f8c0 	bl	801b202 <lv_event_get_param>
    if(dsc->part == LV_PART_ITEMS) {
 8023082:	6b43      	ldr	r3, [r0, #52]	; 0x34
    lv_obj_draw_part_dsc_t * dsc = lv_event_get_param(e);
 8023084:	4604      	mov	r4, r0
    if(dsc->part == LV_PART_ITEMS) {
 8023086:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802308a:	d134      	bne.n	80230f6 <draw_part_begin_event_cb+0x84>
        if(dsc->id < 7) {
 802308c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 802308e:	2906      	cmp	r1, #6
 8023090:	d832      	bhi.n	80230f8 <draw_part_begin_event_cb+0x86>
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 8023092:	6902      	ldr	r2, [r0, #16]
 8023094:	2300      	movs	r3, #0
 8023096:	70d3      	strb	r3, [r2, #3]
            dsc->rect_dsc->border_opa = LV_OPA_TRANSP;
 8023098:	6902      	ldr	r2, [r0, #16]
 802309a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
        if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_CALENDAR_CTRL_HIGHLIGHT)) {
 802309e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80230a2:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80230a4:	4628      	mov	r0, r5
 80230a6:	f003 fa05 	bl	80264b4 <lv_btnmatrix_has_btn_ctrl>
 80230aa:	b180      	cbz	r0, 80230ce <draw_part_begin_event_cb+0x5c>
            dsc->rect_dsc->bg_opa = LV_OPA_40;
 80230ac:	2266      	movs	r2, #102	; 0x66
 80230ae:	6923      	ldr	r3, [r4, #16]
            dsc->rect_dsc->bg_color = lv_theme_get_color_primary(obj);
 80230b0:	4628      	mov	r0, r5
            dsc->rect_dsc->bg_opa = LV_OPA_40;
 80230b2:	70da      	strb	r2, [r3, #3]
            dsc->rect_dsc->bg_color = lv_theme_get_color_primary(obj);
 80230b4:	6926      	ldr	r6, [r4, #16]
 80230b6:	f7fb fb4c 	bl	801e752 <lv_theme_get_color_primary>
 80230ba:	80b0      	strh	r0, [r6, #4]
            if(lv_btnmatrix_get_selected_btn(obj) == dsc->id) {
 80230bc:	4628      	mov	r0, r5
 80230be:	f003 f9f7 	bl	80264b0 <lv_btnmatrix_get_selected_btn>
 80230c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80230c4:	4298      	cmp	r0, r3
                dsc->rect_dsc->bg_opa = LV_OPA_70;
 80230c6:	bf02      	ittt	eq
 80230c8:	6923      	ldreq	r3, [r4, #16]
 80230ca:	22b2      	moveq	r2, #178	; 0xb2
 80230cc:	70da      	strbeq	r2, [r3, #3]
        if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_CALENDAR_CTRL_TODAY)) {
 80230ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80230d2:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80230d4:	4628      	mov	r0, r5
 80230d6:	f003 f9ed 	bl	80264b4 <lv_btnmatrix_has_btn_ctrl>
 80230da:	b160      	cbz	r0, 80230f6 <draw_part_begin_event_cb+0x84>
            dsc->rect_dsc->border_opa = LV_OPA_COVER;
 80230dc:	6923      	ldr	r3, [r4, #16]
 80230de:	22ff      	movs	r2, #255	; 0xff
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 80230e0:	4628      	mov	r0, r5
            dsc->rect_dsc->border_opa = LV_OPA_COVER;
 80230e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 80230e6:	6926      	ldr	r6, [r4, #16]
 80230e8:	f7fb fb33 	bl	801e752 <lv_theme_get_color_primary>
 80230ec:	83f0      	strh	r0, [r6, #30]
            dsc->rect_dsc->border_width += 1;
 80230ee:	6922      	ldr	r2, [r4, #16]
 80230f0:	8c13      	ldrh	r3, [r2, #32]
 80230f2:	3301      	adds	r3, #1
 80230f4:	8413      	strh	r3, [r2, #32]
}
 80230f6:	bd70      	pop	{r4, r5, r6, pc}
        else if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_BTNMATRIX_CTRL_DISABLED)) {
 80230f8:	2240      	movs	r2, #64	; 0x40
 80230fa:	b289      	uxth	r1, r1
 80230fc:	4628      	mov	r0, r5
 80230fe:	f003 f9d9 	bl	80264b4 <lv_btnmatrix_has_btn_ctrl>
 8023102:	2800      	cmp	r0, #0
 8023104:	d0cb      	beq.n	802309e <draw_part_begin_event_cb+0x2c>
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 8023106:	6922      	ldr	r2, [r4, #16]
 8023108:	2300      	movs	r3, #0
            dsc->label_dsc->color = lv_palette_main(LV_PALETTE_GREY);
 802310a:	2012      	movs	r0, #18
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 802310c:	70d3      	strb	r3, [r2, #3]
            dsc->rect_dsc->border_opa = LV_OPA_TRANSP;
 802310e:	6922      	ldr	r2, [r4, #16]
 8023110:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            dsc->label_dsc->color = lv_palette_main(LV_PALETTE_GREY);
 8023114:	6966      	ldr	r6, [r4, #20]
 8023116:	f7ef fa31 	bl	801257c <lv_palette_main>
 802311a:	81b0      	strh	r0, [r6, #12]
 802311c:	e7bf      	b.n	802309e <draw_part_begin_event_cb+0x2c>

0802311e <get_day_of_week.constprop.0>:
 * @param day a day [1..32]
 * @return [0..6] which means [Sun..Sat] or [Mon..Sun] depending on LV_CALENDAR_WEEK_STARTS_MONDAY
 */
static uint8_t get_day_of_week(uint32_t year, uint32_t month, uint32_t day)
{
    uint32_t a = month < 3 ? 1 : 0;
 802311e:	2902      	cmp	r1, #2
    uint32_t b = year - a;

#if LV_CALENDAR_WEEK_STARTS_MONDAY
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400) - 1) % 7;
#else
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400)) % 7;
 8023120:	f44f 72c8 	mov.w	r2, #400	; 0x190
    uint32_t a = month < 3 ? 1 : 0;
 8023124:	bf94      	ite	ls
 8023126:	2301      	movls	r3, #1
 8023128:	2300      	movhi	r3, #0
    uint32_t b = year - a;
 802312a:	eba0 0303 	sub.w	r3, r0, r3
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400)) % 7;
 802312e:	fbb3 f2f2 	udiv	r2, r3, r2
 8023132:	f103 0001 	add.w	r0, r3, #1
 8023136:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 802313a:	4410      	add	r0, r2
 802313c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8023140:	fbb3 f3f2 	udiv	r3, r3, r2
 8023144:	eba0 0003 	sub.w	r0, r0, r3
 8023148:	bf94      	ite	ls
 802314a:	230c      	movls	r3, #12
 802314c:	2300      	movhi	r3, #0
 802314e:	4419      	add	r1, r3
 8023150:	230c      	movs	r3, #12
 8023152:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8023156:	393e      	subs	r1, #62	; 0x3e
 8023158:	fbb1 f1f3 	udiv	r1, r1, r3
 802315c:	2307      	movs	r3, #7
 802315e:	4408      	add	r0, r1
 8023160:	fbb0 f3f3 	udiv	r3, r0, r3
 8023164:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8023168:	1ac0      	subs	r0, r0, r3
#endif

    return day_of_week  ;
}
 802316a:	b2c0      	uxtb	r0, r0
 802316c:	4770      	bx	lr

0802316e <highlight_update>:

static void highlight_update(lv_obj_t * obj)
{
 802316e:	b570      	push	{r4, r5, r6, lr}
 8023170:	4604      	mov	r4, r0
    lv_calendar_t * calendar = (lv_calendar_t *)obj;
    uint16_t i;

    /*Clear all kind of selection*/
    lv_btnmatrix_clear_btn_ctrl_all(calendar->btnm, LV_CALENDAR_CTRL_TODAY | LV_CALENDAR_CTRL_HIGHLIGHT);
 8023172:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8023176:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8023178:	f003 f959 	bl	802642e <lv_btnmatrix_clear_btn_ctrl_all>

    uint8_t day_first = get_day_of_week(calendar->showed_date.year, calendar->showed_date.month, 1);
 802317c:	f994 102e 	ldrsb.w	r1, [r4, #46]	; 0x2e
 8023180:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8023182:	f7ff ffcc 	bl	802311e <get_day_of_week.constprop.0>
    if(calendar->highlighted_dates) {
 8023186:	6b23      	ldr	r3, [r4, #48]	; 0x30
    uint8_t day_first = get_day_of_week(calendar->showed_date.year, calendar->showed_date.month, 1);
 8023188:	4605      	mov	r5, r0
    if(calendar->highlighted_dates) {
 802318a:	bb83      	cbnz	r3, 80231ee <highlight_update+0x80>
                                          LV_CALENDAR_CTRL_HIGHLIGHT);
            }
        }
    }

    if(calendar->showed_date.year == calendar->today.year && calendar->showed_date.month == calendar->today.month) {
 802318c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8023190:	4053      	eors	r3, r2
 8023192:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8023196:	d12c      	bne.n	80231f2 <highlight_update+0x84>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, calendar->today.day - 1 + day_first + 7, LV_CALENDAR_CTRL_TODAY);
 8023198:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
 802319c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80231a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80231a2:	3306      	adds	r3, #6
 80231a4:	18e9      	adds	r1, r5, r3
    }
}
 80231a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, calendar->today.day - 1 + day_first + 7, LV_CALENDAR_CTRL_TODAY);
 80231aa:	b289      	uxth	r1, r1
 80231ac:	f003 b94e 	b.w	802644c <lv_btnmatrix_set_btn_ctrl>
            if(calendar->highlighted_dates[i].year == calendar->showed_date.year &&
 80231b0:	b2b3      	uxth	r3, r6
 80231b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80231b4:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80231b8:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
 80231bc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80231be:	4299      	cmp	r1, r3
 80231c0:	d10f      	bne.n	80231e2 <highlight_update+0x74>
 80231c2:	f992 1002 	ldrsb.w	r1, [r2, #2]
 80231c6:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 80231ca:	4299      	cmp	r1, r3
 80231cc:	d109      	bne.n	80231e2 <highlight_update+0x74>
                lv_btnmatrix_set_btn_ctrl(calendar->btnm, calendar->highlighted_dates[i].day - 1 + day_first + 7,
 80231ce:	f992 1003 	ldrsb.w	r1, [r2, #3]
 80231d2:	1dab      	adds	r3, r5, #6
 80231d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80231d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80231da:	4419      	add	r1, r3
 80231dc:	b289      	uxth	r1, r1
 80231de:	f003 f935 	bl	802644c <lv_btnmatrix_set_btn_ctrl>
        for(i = 0; i < calendar->highlighted_dates_num; i++) {
 80231e2:	3601      	adds	r6, #1
 80231e4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80231e6:	b2b3      	uxth	r3, r6
 80231e8:	429a      	cmp	r2, r3
 80231ea:	d8e1      	bhi.n	80231b0 <highlight_update+0x42>
 80231ec:	e7ce      	b.n	802318c <highlight_update+0x1e>
 80231ee:	2600      	movs	r6, #0
 80231f0:	e7f8      	b.n	80231e4 <highlight_update+0x76>
}
 80231f2:	bd70      	pop	{r4, r5, r6, pc}

080231f4 <lv_calendar_get_showed_date>:
}
 80231f4:	302c      	adds	r0, #44	; 0x2c
 80231f6:	4770      	bx	lr

080231f8 <value_changed_event_cb>:

    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
}

static void value_changed_event_cb(lv_event_t * e)
{
 80231f8:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * header = lv_event_get_target(e);
 80231fa:	f7f7 fffa 	bl	801b1f2 <lv_event_get_target>
 80231fe:	4605      	mov	r5, r0
    lv_obj_t * calendar = lv_obj_get_parent(header);
 8023200:	f7fa ffc2 	bl	801e188 <lv_obj_get_parent>
    const lv_calendar_date_t * cur_date = lv_calendar_get_showed_date(calendar);
 8023204:	f7ff fff6 	bl	80231f4 <lv_calendar_get_showed_date>
 8023208:	4604      	mov	r4, r0

    lv_obj_t * year_dd = lv_obj_get_child(header, 0);
 802320a:	2100      	movs	r1, #0
 802320c:	4628      	mov	r0, r5
 802320e:	f7fa ffbe 	bl	801e18e <lv_obj_get_child>
    lv_dropdown_set_selected(year_dd, 2023 - cur_date->year);
 8023212:	8821      	ldrh	r1, [r4, #0]
 8023214:	f5c1 61fc 	rsb	r1, r1, #2016	; 0x7e0
 8023218:	3107      	adds	r1, #7
 802321a:	b289      	uxth	r1, r1
 802321c:	f003 fb3d 	bl	802689a <lv_dropdown_set_selected>

    lv_obj_t * month_dd = lv_obj_get_child(header, 1);
 8023220:	2101      	movs	r1, #1
 8023222:	4628      	mov	r0, r5
 8023224:	f7fa ffb3 	bl	801e18e <lv_obj_get_child>
    lv_dropdown_set_selected(month_dd, cur_date->month - 1);
 8023228:	f994 1002 	ldrsb.w	r1, [r4, #2]
 802322c:	3901      	subs	r1, #1
}
 802322e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_dropdown_set_selected(month_dd, cur_date->month - 1);
 8023232:	b289      	uxth	r1, r1
 8023234:	f003 bb31 	b.w	802689a <lv_dropdown_set_selected>

08023238 <month_event_cb>:
{
 8023238:	b538      	push	{r3, r4, r5, lr}
 802323a:	4605      	mov	r5, r0
    lv_obj_t * dropdown = lv_event_get_target(e);
 802323c:	f7f7 ffd9 	bl	801b1f2 <lv_event_get_target>
 8023240:	4604      	mov	r4, r0
    lv_obj_t * calendar = lv_event_get_user_data(e);
 8023242:	4628      	mov	r0, r5
 8023244:	f7f7 ffdf 	bl	801b206 <lv_event_get_user_data>
 8023248:	4605      	mov	r5, r0
    uint16_t sel = lv_dropdown_get_selected(dropdown);
 802324a:	4620      	mov	r0, r4
 802324c:	f003 fb33 	bl	80268b6 <lv_dropdown_get_selected>
 8023250:	4604      	mov	r4, r0
    d = lv_calendar_get_showed_date(calendar);
 8023252:	4628      	mov	r0, r5
 8023254:	f7ff ffce 	bl	80231f4 <lv_calendar_get_showed_date>
    newd.month = sel + 1;
 8023258:	1c62      	adds	r2, r4, #1
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 802325a:	8801      	ldrh	r1, [r0, #0]
 802325c:	4628      	mov	r0, r5
 802325e:	b252      	sxtb	r2, r2
}
 8023260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 8023264:	f7eb b906 	b.w	800e474 <lv_calendar_set_showed_date>

08023268 <year_event_cb>:
{
 8023268:	b538      	push	{r3, r4, r5, lr}
 802326a:	4605      	mov	r5, r0
    lv_obj_t * dropdown = lv_event_get_target(e);
 802326c:	f7f7 ffc1 	bl	801b1f2 <lv_event_get_target>
 8023270:	4604      	mov	r4, r0
    lv_obj_t * calendar = lv_event_get_user_data(e);
 8023272:	4628      	mov	r0, r5
 8023274:	f7f7 ffc7 	bl	801b206 <lv_event_get_user_data>
 8023278:	4605      	mov	r5, r0
    uint16_t sel = lv_dropdown_get_selected(dropdown);
 802327a:	4620      	mov	r0, r4
 802327c:	f003 fb1b 	bl	80268b6 <lv_dropdown_get_selected>
 8023280:	4604      	mov	r4, r0
    d = lv_calendar_get_showed_date(calendar);
 8023282:	4628      	mov	r0, r5
 8023284:	f7ff ffb6 	bl	80231f4 <lv_calendar_get_showed_date>
    newd.year = 2023 - sel;
 8023288:	f5c4 61fc 	rsb	r1, r4, #2016	; 0x7e0
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 802328c:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8023290:	4628      	mov	r0, r5
    newd.year = 2023 - sel;
 8023292:	3107      	adds	r1, #7
}
 8023294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 8023298:	b289      	uxth	r1, r1
 802329a:	f7eb b8eb 	b.w	800e474 <lv_calendar_set_showed_date>

0802329e <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802329e:	2212      	movs	r2, #18
{
 80232a0:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80232a2:	f7fa fbed 	bl	801da80 <lv_obj_get_style_prop>
}
 80232a6:	b200      	sxth	r0, r0
 80232a8:	bd08      	pop	{r3, pc}

080232aa <lv_obj_get_style_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80232aa:	2201      	movs	r2, #1
{
 80232ac:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80232ae:	f7fa fbe7 	bl	801da80 <lv_obj_get_style_prop>
}
 80232b2:	b200      	sxth	r0, r0
 80232b4:	bd08      	pop	{r3, pc}

080232b6 <lv_obj_get_style_pad_column>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80232b6:	2215      	movs	r2, #21
{
 80232b8:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80232ba:	f7fa fbe1 	bl	801da80 <lv_obj_get_style_prop>
}
 80232be:	b200      	sxth	r0, r0
 80232c0:	bd08      	pop	{r3, pc}

080232c2 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80232c2:	2210      	movs	r2, #16
{
 80232c4:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80232c6:	f7fa fbdb 	bl	801da80 <lv_obj_get_style_prop>
}
 80232ca:	b200      	sxth	r0, r0
 80232cc:	bd08      	pop	{r3, pc}

080232ce <lv_chart_destructor>:
{
 80232ce:	b570      	push	{r4, r5, r6, lr}
 80232d0:	460c      	mov	r4, r1
        ser = _lv_ll_get_head(&chart->series_ll);
 80232d2:	f101 0624 	add.w	r6, r1, #36	; 0x24
    while(chart->series_ll.head) {
 80232d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        ser = _lv_ll_get_head(&chart->series_ll);
 80232d8:	4630      	mov	r0, r6
    while(chart->series_ll.head) {
 80232da:	b953      	cbnz	r3, 80232f2 <lv_chart_destructor+0x24>
        cur = _lv_ll_get_head(&chart->cursor_ll);
 80232dc:	f104 0630 	add.w	r6, r4, #48	; 0x30
    _lv_ll_clear(&chart->series_ll);
 80232e0:	f001 fbe2 	bl	8024aa8 <_lv_ll_clear>
    while(chart->cursor_ll.head) {
 80232e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
        cur = _lv_ll_get_head(&chart->cursor_ll);
 80232e6:	4630      	mov	r0, r6
    while(chart->cursor_ll.head) {
 80232e8:	b9a3      	cbnz	r3, 8023314 <lv_chart_destructor+0x46>
}
 80232ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _lv_ll_clear(&chart->cursor_ll);
 80232ee:	f001 bbdb 	b.w	8024aa8 <_lv_ll_clear>
        ser = _lv_ll_get_head(&chart->series_ll);
 80232f2:	f001 fbeb 	bl	8024acc <_lv_ll_get_head>
        if(!ser->y_ext_buf_assigned) lv_mem_free(ser->y_points);
 80232f6:	7b03      	ldrb	r3, [r0, #12]
        ser = _lv_ll_get_head(&chart->series_ll);
 80232f8:	4605      	mov	r5, r0
        if(!ser->y_ext_buf_assigned) lv_mem_free(ser->y_points);
 80232fa:	075b      	lsls	r3, r3, #29
 80232fc:	d402      	bmi.n	8023304 <lv_chart_destructor+0x36>
 80232fe:	6840      	ldr	r0, [r0, #4]
 8023300:	f7ef f9f4 	bl	80126ec <lv_mem_free>
        _lv_ll_remove(&chart->series_ll, ser);
 8023304:	4630      	mov	r0, r6
 8023306:	4629      	mov	r1, r5
 8023308:	f001 fba5 	bl	8024a56 <_lv_ll_remove>
        lv_mem_free(ser);
 802330c:	4628      	mov	r0, r5
 802330e:	f7ef f9ed 	bl	80126ec <lv_mem_free>
 8023312:	e7e0      	b.n	80232d6 <lv_chart_destructor+0x8>
        cur = _lv_ll_get_head(&chart->cursor_ll);
 8023314:	f001 fbda 	bl	8024acc <_lv_ll_get_head>
 8023318:	4605      	mov	r5, r0
        _lv_ll_remove(&chart->cursor_ll, cur);
 802331a:	4601      	mov	r1, r0
 802331c:	4630      	mov	r0, r6
 802331e:	f001 fb9a 	bl	8024a56 <_lv_ll_remove>
        lv_mem_free(cur);
 8023322:	4628      	mov	r0, r5
 8023324:	f7ef f9e2 	bl	80126ec <lv_mem_free>
 8023328:	e7dc      	b.n	80232e4 <lv_chart_destructor+0x16>

0802332a <lv_obj_get_style_border_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802332a:	2232      	movs	r2, #50	; 0x32
 802332c:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
 802332e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8023330:	f7fa fba6 	bl	801da80 <lv_obj_get_style_prop>
}
 8023334:	b200      	sxth	r0, r0
 8023336:	bd08      	pop	{r3, pc}

08023338 <invalidate_point>:

    return 0;
}

static void invalidate_point(lv_obj_t * obj, uint16_t i)
{
 8023338:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    lv_chart_t * chart  = (lv_chart_t *)obj;
    if(i >= chart->point_cnt) return;
 802333c:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
{
 8023340:	4604      	mov	r4, r0
 8023342:	460d      	mov	r5, r1
    if(i >= chart->point_cnt) return;
 8023344:	428b      	cmp	r3, r1
 8023346:	d97c      	bls.n	8023442 <invalidate_point+0x10a>

    lv_coord_t w  = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8023348:	f7f9 fa80 	bl	801c84c <lv_obj_get_content_width>
 802334c:	f8b4 6084 	ldrh.w	r6, [r4, #132]	; 0x84
 8023350:	4346      	muls	r6, r0
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 8023352:	4620      	mov	r0, r4
 8023354:	f7e2 fc52 	bl	8005bfc <lv_obj_get_scroll_left>

    /*In shift mode the whole chart changes so the whole object*/
    if(chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
 8023358:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    lv_coord_t w  = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 802335c:	f346 260f 	sbfx	r6, r6, #8, #16
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 8023360:	4680      	mov	r8, r0
    if(chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
 8023362:	071a      	lsls	r2, r3, #28
 8023364:	d405      	bmi.n	8023372 <invalidate_point+0x3a>
        lv_obj_invalidate(obj);
 8023366:	4620      	mov	r0, r4
        lv_obj_invalidate_area(obj, &col_a);
    }
    else {
        lv_obj_invalidate(obj);
    }
}
 8023368:	b002      	add	sp, #8
 802336a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        lv_obj_invalidate(obj);
 802336e:	f7f9 bc61 	b.w	801cc34 <lv_obj_invalidate>
    if(chart->type == LV_CHART_TYPE_LINE) {
 8023372:	f003 0307 	and.w	r3, r3, #7
 8023376:	2b01      	cmp	r3, #1
 8023378:	d166      	bne.n	8023448 <invalidate_point+0x110>
        lv_coord_t bwidth = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 802337a:	4620      	mov	r0, r4
 802337c:	f7ff ffd5 	bl	802332a <lv_obj_get_style_border_width.constprop.0>
        lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8023380:	2100      	movs	r1, #0
        lv_coord_t bwidth = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8023382:	4681      	mov	r9, r0
        lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8023384:	4620      	mov	r0, r4
 8023386:	f7ff ff8a 	bl	802329e <lv_obj_get_style_pad_left>
        lv_coord_t x_ofs = obj->coords.x1 + pleft + bwidth - scroll_left;
 802338a:	8aa7      	ldrh	r7, [r4, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 802338c:	2249      	movs	r2, #73	; 0x49
 802338e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8023392:	eba7 0708 	sub.w	r7, r7, r8
 8023396:	4407      	add	r7, r0
 8023398:	4620      	mov	r0, r4
 802339a:	f7fa fb71 	bl	801da80 <lv_obj_get_style_prop>
        lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR);
 802339e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80233a2:	4682      	mov	sl, r0
 80233a4:	4620      	mov	r0, r4
 80233a6:	f7ff ff80 	bl	80232aa <lv_obj_get_style_width>
        lv_coord_t x_ofs = obj->coords.x1 + pleft + bwidth - scroll_left;
 80233aa:	444f      	add	r7, r9
        coords.y1 -= line_width + point_w;
 80233ac:	fa1f f880 	uxth.w	r8, r0
        if(i < chart->point_cnt - 1) {
 80233b0:	f8b4 1082 	ldrh.w	r1, [r4, #130]	; 0x82
        coords.y1 -= line_width + point_w;
 80233b4:	fa1f f98a 	uxth.w	r9, sl
    dest->y1 = src->y1;
 80233b8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80233bc:	fa18 fa8a 	uxtah	sl, r8, sl
    dest->y2 = src->y2;
 80233c0:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
        if(i < chart->point_cnt - 1) {
 80233c4:	3901      	subs	r1, #1
        lv_coord_t x_ofs = obj->coords.x1 + pleft + bwidth - scroll_left;
 80233c6:	b2bf      	uxth	r7, r7
        coords.y1 -= line_width + point_w;
 80233c8:	fa1f fa8a 	uxth.w	sl, sl
        if(i < chart->point_cnt - 1) {
 80233cc:	428d      	cmp	r5, r1
        coords.y1 -= line_width + point_w;
 80233ce:	eba3 030a 	sub.w	r3, r3, sl
        coords.y2 += line_width + point_w;
 80233d2:	4492      	add	sl, r2
        coords.y1 -= line_width + point_w;
 80233d4:	f8ad 3002 	strh.w	r3, [sp, #2]
        coords.y2 += line_width + point_w;
 80233d8:	f8ad a006 	strh.w	sl, [sp, #6]
        if(i < chart->point_cnt - 1) {
 80233dc:	da16      	bge.n	802340c <invalidate_point+0xd4>
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 80233de:	fb06 f305 	mul.w	r3, r6, r5
            lv_obj_invalidate_area(obj, &coords);
 80233e2:	4620      	mov	r0, r4
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 80233e4:	fb93 f2f1 	sdiv	r2, r3, r1
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 80233e8:	4433      	add	r3, r6
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 80233ea:	eba2 0209 	sub.w	r2, r2, r9
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 80233ee:	fb93 f3f1 	sdiv	r3, r3, r1
 80233f2:	444b      	add	r3, r9
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 80233f4:	eba2 0208 	sub.w	r2, r2, r8
            lv_obj_invalidate_area(obj, &coords);
 80233f8:	4669      	mov	r1, sp
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 80233fa:	4443      	add	r3, r8
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 80233fc:	443a      	add	r2, r7
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 80233fe:	443b      	add	r3, r7
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8023400:	f8ad 2000 	strh.w	r2, [sp]
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8023404:	f8ad 3004 	strh.w	r3, [sp, #4]
            lv_obj_invalidate_area(obj, &coords);
 8023408:	f7f9 fbf3 	bl	801cbf2 <lv_obj_invalidate_area>
        if(i > 0) {
 802340c:	b1cd      	cbz	r5, 8023442 <invalidate_point+0x10a>
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 802340e:	3d01      	subs	r5, #1
 8023410:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 8023414:	4375      	muls	r5, r6
 8023416:	3a01      	subs	r2, #1
 8023418:	fb95 f3f2 	sdiv	r3, r5, r2
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 802341c:	4435      	add	r5, r6
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 802341e:	eba3 0309 	sub.w	r3, r3, r9
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8023422:	fb95 f5f2 	sdiv	r5, r5, r2
 8023426:	44a9      	add	r9, r5
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8023428:	eba3 0308 	sub.w	r3, r3, r8
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 802342c:	44c8      	add	r8, r9
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 802342e:	443b      	add	r3, r7
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8023430:	4447      	add	r7, r8
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8023432:	f8ad 3000 	strh.w	r3, [sp]
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8023436:	f8ad 7004 	strh.w	r7, [sp, #4]
        lv_obj_invalidate_area(obj, &col_a);
 802343a:	4669      	mov	r1, sp
 802343c:	4620      	mov	r0, r4
 802343e:	f7f9 fbd8 	bl	801cbf2 <lv_obj_invalidate_area>
}
 8023442:	b002      	add	sp, #8
 8023444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(chart->type == LV_CHART_TYPE_BAR) {
 8023448:	2b02      	cmp	r3, #2
 802344a:	d18c      	bne.n	8023366 <invalidate_point+0x2e>
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 802344c:	2100      	movs	r1, #0
 802344e:	4620      	mov	r0, r4
 8023450:	f7ff ff31 	bl	80232b6 <lv_obj_get_style_pad_column>
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8023454:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8023458:	4358      	muls	r0, r3
        lv_coord_t block_w = (w + block_gap) / chart->point_cnt;
 802345a:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 802345e:	eb06 2620 	add.w	r6, r6, r0, asr #8
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 8023462:	1207      	asrs	r7, r0, #8
        lv_coord_t bwidth = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8023464:	4620      	mov	r0, r4
        lv_coord_t block_w = (w + block_gap) / chart->point_cnt;
 8023466:	fb96 f6f3 	sdiv	r6, r6, r3
        lv_coord_t bwidth = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 802346a:	f7ff ff5e 	bl	802332a <lv_obj_get_style_border_width.constprop.0>
        x_act += obj->coords.x1 + bwidth + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 802346e:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8023472:	2100      	movs	r1, #0
        x_act = (int32_t)((int32_t)(block_w) * i) ;
 8023474:	fa1f f986 	uxth.w	r9, r6
 8023478:	fb15 f506 	smulbb	r5, r5, r6
        x_act += obj->coords.x1 + bwidth + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 802347c:	4482      	add	sl, r0
 802347e:	4620      	mov	r0, r4
 8023480:	f7ff ff0d 	bl	802329e <lv_obj_get_style_pad_left>
 8023484:	4606      	mov	r6, r0
        lv_obj_get_coords(obj, &col_a);
 8023486:	4669      	mov	r1, sp
 8023488:	4620      	mov	r0, r4
 802348a:	f7f9 f983 	bl	801c794 <lv_obj_get_coords>
        x_act += obj->coords.x1 + bwidth + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 802348e:	eb06 000a 	add.w	r0, r6, sl
        x_act = (int32_t)((int32_t)(block_w) * i) ;
 8023492:	b2ad      	uxth	r5, r5
        col_a.x1 = x_act - scroll_left;
 8023494:	eba0 0008 	sub.w	r0, r0, r8
 8023498:	4405      	add	r5, r0
        col_a.x2 = col_a.x1 + block_w;
 802349a:	fa19 f985 	uxtah	r9, r9, r5
        col_a.x1 -= block_gap;
 802349e:	1bed      	subs	r5, r5, r7
        col_a.x2 = col_a.x1 + block_w;
 80234a0:	f8ad 9004 	strh.w	r9, [sp, #4]
        col_a.x1 -= block_gap;
 80234a4:	f8ad 5000 	strh.w	r5, [sp]
 80234a8:	e7c7      	b.n	802343a <invalidate_point+0x102>

080234aa <lv_chart_get_point_pos_by_id>:
{
 80234aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234ae:	460f      	mov	r7, r1
 80234b0:	b087      	sub	sp, #28
 80234b2:	4690      	mov	r8, r2
 80234b4:	461d      	mov	r5, r3
    LV_ASSERT_NULL(obj);
 80234b6:	4604      	mov	r4, r0
 80234b8:	b900      	cbnz	r0, 80234bc <lv_chart_get_point_pos_by_id+0x12>
 80234ba:	e7fe      	b.n	80234ba <lv_chart_get_point_pos_by_id+0x10>
    LV_ASSERT_NULL(ser);
 80234bc:	b901      	cbnz	r1, 80234c0 <lv_chart_get_point_pos_by_id+0x16>
 80234be:	e7fe      	b.n	80234be <lv_chart_get_point_pos_by_id+0x14>
    if(id >= chart->point_cnt) {
 80234c0:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 80234c4:	4293      	cmp	r3, r2
 80234c6:	d805      	bhi.n	80234d4 <lv_chart_get_point_pos_by_id+0x2a>
        p_out->x = 0;
 80234c8:	2000      	movs	r0, #0
 80234ca:	8028      	strh	r0, [r5, #0]
        p_out->y = 0;
 80234cc:	8068      	strh	r0, [r5, #2]
}
 80234ce:	b007      	add	sp, #28
 80234d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80234d4:	f7f9 f9ba 	bl	801c84c <lv_obj_get_content_width>
 80234d8:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 80234dc:	4343      	muls	r3, r0
    lv_coord_t h = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80234de:	4620      	mov	r0, r4
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80234e0:	f343 2b0f 	sbfx	fp, r3, #8, #16
    lv_coord_t h = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80234e4:	f7f9 f9c8 	bl	801c878 <lv_obj_get_content_height>
 80234e8:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
 80234ec:	4350      	muls	r0, r2
    if(chart->type == LV_CHART_TYPE_LINE) {
 80234ee:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    lv_coord_t h = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80234f2:	1203      	asrs	r3, r0, #8
    if(chart->type == LV_CHART_TYPE_LINE) {
 80234f4:	f002 0207 	and.w	r2, r2, #7
    lv_coord_t h = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80234f8:	9303      	str	r3, [sp, #12]
    if(chart->type == LV_CHART_TYPE_LINE) {
 80234fa:	2a01      	cmp	r2, #1
    lv_coord_t h = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80234fc:	f340 230f 	sbfx	r3, r0, #8, #16
 8023500:	9304      	str	r3, [sp, #16]
    if(chart->type == LV_CHART_TYPE_LINE) {
 8023502:	d108      	bne.n	8023516 <lv_chart_get_point_pos_by_id+0x6c>
        p_out->x = (w * id) / (chart->point_cnt - 1);
 8023504:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 8023508:	fb08 f30b 	mul.w	r3, r8, fp
 802350c:	3a01      	subs	r2, #1
 802350e:	fb93 f3f2 	sdiv	r3, r3, r2
        p_out->x += (col_w - ser_gap) / 2;
 8023512:	802b      	strh	r3, [r5, #0]
 8023514:	e013      	b.n	802353e <lv_chart_get_point_pos_by_id+0x94>
    else if(chart->type == LV_CHART_TYPE_SCATTER) {
 8023516:	2a03      	cmp	r2, #3
 8023518:	d147      	bne.n	80235aa <lv_chart_get_point_pos_by_id+0x100>
        p_out->x = lv_map(ser->x_points[id], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 802351a:	7b39      	ldrb	r1, [r7, #12]
 802351c:	2300      	movs	r3, #0
 802351e:	683a      	ldr	r2, [r7, #0]
 8023520:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8023524:	f932 0018 	ldrsh.w	r0, [r2, r8, lsl #1]
 8023528:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 802352c:	f8cd b000 	str.w	fp, [sp]
 8023530:	f9b1 2078 	ldrsh.w	r2, [r1, #120]	; 0x78
 8023534:	f9b1 1074 	ldrsh.w	r1, [r1, #116]	; 0x74
 8023538:	f001 fb70 	bl	8024c1c <lv_map>
 802353c:	8028      	strh	r0, [r5, #0]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 802353e:	4620      	mov	r0, r4
 8023540:	f7ff fef3 	bl	802332a <lv_obj_get_style_border_width.constprop.0>
 8023544:	4606      	mov	r6, r0
    p_out->x += lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8023546:	2100      	movs	r1, #0
 8023548:	4620      	mov	r0, r4
 802354a:	f7ff fea8 	bl	802329e <lv_obj_get_style_pad_left>
 802354e:	882b      	ldrh	r3, [r5, #0]
 8023550:	4430      	add	r0, r6
 8023552:	4418      	add	r0, r3
 8023554:	8028      	strh	r0, [r5, #0]
    p_out->x -= lv_obj_get_scroll_left(obj);
 8023556:	4620      	mov	r0, r4
 8023558:	f7e2 fb50 	bl	8005bfc <lv_obj_get_scroll_left>
 802355c:	882b      	ldrh	r3, [r5, #0]
 802355e:	1a1b      	subs	r3, r3, r0
    temp_y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8023560:	9804      	ldr	r0, [sp, #16]
    p_out->x -= lv_obj_get_scroll_left(obj);
 8023562:	802b      	strh	r3, [r5, #0]
    temp_y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8023564:	7b3a      	ldrb	r2, [r7, #12]
 8023566:	687b      	ldr	r3, [r7, #4]
 8023568:	f3c2 1200 	ubfx	r2, r2, #4, #1
 802356c:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
 8023570:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8023574:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
    temp_y = temp_y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8023578:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
    temp_y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 802357c:	1a5b      	subs	r3, r3, r1
    temp_y = temp_y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 802357e:	1a52      	subs	r2, r2, r1
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8023580:	2100      	movs	r1, #0
    temp_y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8023582:	4343      	muls	r3, r0
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8023584:	4620      	mov	r0, r4
    temp_y = temp_y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8023586:	fb93 f3f2 	sdiv	r3, r3, r2
    p_out->y = h - temp_y;
 802358a:	9a03      	ldr	r2, [sp, #12]
 802358c:	1ad3      	subs	r3, r2, r3
 802358e:	806b      	strh	r3, [r5, #2]
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8023590:	f7ff fe97 	bl	80232c2 <lv_obj_get_style_pad_top>
 8023594:	886b      	ldrh	r3, [r5, #2]
 8023596:	4430      	add	r0, r6
 8023598:	4418      	add	r0, r3
 802359a:	8068      	strh	r0, [r5, #2]
    p_out->y -= lv_obj_get_scroll_top(obj);
 802359c:	4620      	mov	r0, r4
 802359e:	f7f9 fce8 	bl	801cf72 <lv_obj_get_scroll_top>
 80235a2:	886b      	ldrh	r3, [r5, #2]
 80235a4:	1a18      	subs	r0, r3, r0
 80235a6:	b200      	sxth	r0, r0
 80235a8:	e790      	b.n	80234cc <lv_chart_get_point_pos_by_id+0x22>
    else if(chart->type == LV_CHART_TYPE_BAR) {
 80235aa:	2a02      	cmp	r2, #2
 80235ac:	d1c7      	bne.n	802353e <lv_chart_get_point_pos_by_id+0x94>
        uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 80235ae:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80235b2:	4618      	mov	r0, r3
 80235b4:	9305      	str	r3, [sp, #20]
 80235b6:	f001 fa96 	bl	8024ae6 <_lv_ll_get_len>
        int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 80235ba:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
        uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 80235be:	4681      	mov	r9, r0
        int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 80235c0:	4620      	mov	r0, r4
 80235c2:	f7ff fe78 	bl	80232b6 <lv_obj_get_style_pad_column>
                                                                LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 80235c6:	f8b4 a084 	ldrh.w	sl, [r4, #132]	; 0x84
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 80235ca:	2100      	movs	r1, #0
                                                                LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 80235cc:	fb00 fa0a 	mul.w	sl, r0, sl
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 80235d0:	4620      	mov	r0, r4
 80235d2:	f7ff fe70 	bl	80232b6 <lv_obj_get_style_pad_column>
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 80235d6:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 80235da:	f8b4 1082 	ldrh.w	r1, [r4, #130]	; 0x82
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 80235de:	fb0b f308 	mul.w	r3, fp, r8
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 80235e2:	fb00 f602 	mul.w	r6, r0, r2
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 80235e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 80235ea:	1e4a      	subs	r2, r1, #1
        int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 80235ec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 80235f0:	1236      	asrs	r6, r6, #8
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 80235f2:	fb02 b616 	mls	r6, r2, r6, fp
 80235f6:	fb96 f6f1 	sdiv	r6, r6, r1
        lv_coord_t col_w = block_w / ser_cnt;
 80235fa:	b236      	sxth	r6, r6
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 80235fc:	fb93 f3f1 	sdiv	r3, r3, r1
        lv_coord_t col_w = block_w / ser_cnt;
 8023600:	fbb6 f6f9 	udiv	r6, r6, r9
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 8023604:	802b      	strh	r3, [r5, #0]
        lv_coord_t col_w = block_w / ser_cnt;
 8023606:	fa0f f986 	sxth.w	r9, r6
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 802360a:	f001 fa62 	bl	8024ad2 <_lv_ll_get_tail>
 802360e:	4601      	mov	r1, r0
            p_out->x += col_w;
 8023610:	882b      	ldrh	r3, [r5, #0]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8023612:	b930      	cbnz	r0, 8023622 <lv_chart_get_point_pos_by_id+0x178>
        p_out->x += (col_w - ser_gap) / 2;
 8023614:	eba9 090a 	sub.w	r9, r9, sl
 8023618:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 802361c:	eb03 0369 	add.w	r3, r3, r9, asr #1
 8023620:	e777      	b.n	8023512 <lv_chart_get_point_pos_by_id+0x68>
            if(ser_i == ser) break;
 8023622:	428f      	cmp	r7, r1
 8023624:	d0f6      	beq.n	8023614 <lv_chart_get_point_pos_by_id+0x16a>
            p_out->x += col_w;
 8023626:	4433      	add	r3, r6
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8023628:	9805      	ldr	r0, [sp, #20]
            p_out->x += col_w;
 802362a:	802b      	strh	r3, [r5, #0]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 802362c:	f001 fa58 	bl	8024ae0 <_lv_ll_get_prev>
 8023630:	e7ed      	b.n	802360e <lv_chart_get_point_pos_by_id+0x164>

08023632 <get_tick_gsc>:
}

lv_chart_tick_dsc_t * get_tick_gsc(lv_obj_t * obj, lv_chart_axis_t axis)
{
    lv_chart_t * chart = (lv_chart_t *) obj;
    switch(axis) {
 8023632:	2904      	cmp	r1, #4
 8023634:	d80c      	bhi.n	8023650 <get_tick_gsc+0x1e>
 8023636:	e8df f001 	tbb	[pc, r1]
 802363a:	0703      	.short	0x0703
 802363c:	0b05      	.short	0x0b05
 802363e:	09          	.byte	0x09
 802363f:	00          	.byte	0x00
        case LV_CHART_AXIS_PRIMARY_Y:
            return &chart->tick[0];
 8023640:	303c      	adds	r0, #60	; 0x3c
 8023642:	4770      	bx	lr
        case LV_CHART_AXIS_PRIMARY_X:
            return &chart->tick[1];
 8023644:	3048      	adds	r0, #72	; 0x48
 8023646:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_Y:
            return &chart->tick[2];
 8023648:	3054      	adds	r0, #84	; 0x54
 802364a:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_X:
            return &chart->tick[3];
 802364c:	3060      	adds	r0, #96	; 0x60
 802364e:	4770      	bx	lr
    switch(axis) {
 8023650:	2000      	movs	r0, #0
        default:
            return NULL;
    }
}
 8023652:	4770      	bx	lr

08023654 <fast_hsv2rgb.constprop.0>:
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t * r, uint8_t * g, uint8_t * b)
 8023654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023656:	e9dd 6505 	ldrd	r6, r5, [sp, #20]
    if(!s) {
 802365a:	b919      	cbnz	r1, 8023664 <fast_hsv2rgb.constprop.0+0x10>
        *r = *g = *b = v;
 802365c:	702a      	strb	r2, [r5, #0]
 802365e:	7032      	strb	r2, [r6, #0]
 8023660:	701a      	strb	r2, [r3, #0]
}
 8023662:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 8023664:	0587      	lsls	r7, r0, #22
    uint8_t sextant = h >> 8;
 8023666:	ea4f 2410 	mov.w	r4, r0, lsr #8
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 802366a:	b2c0      	uxtb	r0, r0
 802366c:	bf42      	ittt	mi
 802366e:	461f      	movmi	r7, r3
 8023670:	462b      	movmi	r3, r5
 8023672:	463d      	movmi	r5, r7
 8023674:	0767      	lsls	r7, r4, #29
 8023676:	bf42      	ittt	mi
 8023678:	4637      	movmi	r7, r6
 802367a:	462e      	movmi	r6, r5
 802367c:	463d      	movmi	r5, r7
 802367e:	f014 0f06 	tst.w	r4, #6
 8023682:	f004 0701 	and.w	r7, r4, #1
 8023686:	ea6f 0401 	mvn.w	r4, r1
 802368a:	d115      	bne.n	80236b8 <fast_hsv2rgb.constprop.0+0x64>
 802368c:	b137      	cbz	r7, 802369c <fast_hsv2rgb.constprop.0+0x48>
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 802368e:	b2e4      	uxtb	r4, r4
    *g = v;
 8023690:	7032      	strb	r2, [r6, #0]
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 8023692:	461e      	mov	r6, r3
    *b = ww >> 8;
 8023694:	4354      	muls	r4, r2
 8023696:	0a24      	lsrs	r4, r4, #8
 8023698:	702c      	strb	r4, [r5, #0]
 802369a:	e01b      	b.n	80236d4 <fast_hsv2rgb.constprop.0+0x80>
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 802369c:	b2e4      	uxtb	r4, r4
    *g = v;
 802369e:	701a      	strb	r2, [r3, #0]
    *b = ww >> 8;
 80236a0:	4354      	muls	r4, r2
 80236a2:	0a24      	lsrs	r4, r4, #8
 80236a4:	702c      	strb	r4, [r5, #0]
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 80236a6:	b998      	cbnz	r0, 80236d0 <fast_hsv2rgb.constprop.0+0x7c>
 80236a8:	0209      	lsls	r1, r1, #8
    bb = ~bb;
 80236aa:	ea6f 2111 	mvn.w	r1, r1, lsr #8
    ww = v * bb;
 80236ae:	b2c9      	uxtb	r1, r1
    *r = ww >> 8;
 80236b0:	434a      	muls	r2, r1
 80236b2:	0a12      	lsrs	r2, r2, #8
 80236b4:	7032      	strb	r2, [r6, #0]
 80236b6:	e7d4      	b.n	8023662 <fast_hsv2rgb.constprop.0+0xe>
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 80236b8:	b92f      	cbnz	r7, 80236c6 <fast_hsv2rgb.constprop.0+0x72>
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 80236ba:	b2e4      	uxtb	r4, r4
    *g = v;
 80236bc:	7032      	strb	r2, [r6, #0]
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 80236be:	461e      	mov	r6, r3
    *b = ww >> 8;
 80236c0:	4354      	muls	r4, r2
 80236c2:	0a24      	lsrs	r4, r4, #8
    if(!(sextant & 1)) {
 80236c4:	e7ee      	b.n	80236a4 <fast_hsv2rgb.constprop.0+0x50>
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 80236c6:	b2e4      	uxtb	r4, r4
    *g = v;
 80236c8:	701a      	strb	r2, [r3, #0]
    *b = ww >> 8;
 80236ca:	4354      	muls	r4, r2
 80236cc:	0a24      	lsrs	r4, r4, #8
    if(!(sextant & 1)) {
 80236ce:	e7e3      	b.n	8023698 <fast_hsv2rgb.constprop.0+0x44>
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 80236d0:	4240      	negs	r0, r0
 80236d2:	b2c0      	uxtb	r0, r0
        ww = s * h_frac;
 80236d4:	4341      	muls	r1, r0
 80236d6:	e7e8      	b.n	80236aa <fast_hsv2rgb.constprop.0+0x56>

080236d8 <get_knob_area>:
{
 80236d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80236dc:	460d      	mov	r5, r1
 80236de:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80236e0:	2250      	movs	r2, #80	; 0x50
 80236e2:	2100      	movs	r1, #0
 80236e4:	4628      	mov	r0, r5
 80236e6:	f7fa f9cb 	bl	801da80 <lv_obj_get_style_prop>
    r = lv_obj_get_style_arc_width(obj, LV_PART_MAIN) / 2;
 80236ea:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80236ee:	2212      	movs	r2, #18
 80236f0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80236f4:	fa03 f080 	sxtah	r0, r3, r0
 80236f8:	f3c0 044f 	ubfx	r4, r0, #1, #16
 80236fc:	4628      	mov	r0, r5
 80236fe:	f7fa f9bf 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8023702:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8023704:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8023706:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802370a:	4628      	mov	r0, r5
 802370c:	f7fa f9b8 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8023710:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8023712:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8023714:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8023718:	4628      	mov	r0, r5
 802371a:	f7fa f9b1 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802371e:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8023720:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8023722:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8023726:	4628      	mov	r0, r5
 8023728:	f7fa f9aa 	bl	801da80 <lv_obj_get_style_prop>
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 802372c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 802372e:	8aaa      	ldrh	r2, [r5, #20]
    knob_area.x2 = obj->coords.x1 + colorwheel->knob.pos.x + r + top;
 8023730:	4427      	add	r7, r4
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 8023732:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8023734:	441a      	add	r2, r3
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 8023736:	8aeb      	ldrh	r3, [r5, #22]
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8023738:	eb04 0509 	add.w	r5, r4, r9
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 802373c:	440b      	add	r3, r1
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 802373e:	b292      	uxth	r2, r2
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 8023740:	eb04 0108 	add.w	r1, r4, r8
    knob_area.y2 = obj->coords.y1 + colorwheel->knob.pos.y + r + bottom;
 8023744:	4404      	add	r4, r0
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 8023746:	b29b      	uxth	r3, r3
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8023748:	1b55      	subs	r5, r2, r5
    knob_area.x2 = obj->coords.x1 + colorwheel->knob.pos.x + r + top;
 802374a:	443a      	add	r2, r7
}
 802374c:	4630      	mov	r0, r6
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 802374e:	1a59      	subs	r1, r3, r1
    knob_area.y2 = obj->coords.y1 + colorwheel->knob.pos.y + r + bottom;
 8023750:	4423      	add	r3, r4
    return knob_area;
 8023752:	8035      	strh	r5, [r6, #0]
 8023754:	8071      	strh	r1, [r6, #2]
 8023756:	80b2      	strh	r2, [r6, #4]
 8023758:	80f3      	strh	r3, [r6, #6]
}
 802375a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0802375e <refr_knob_pos>:
{
 802375e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023760:	4605      	mov	r5, r0
    lv_area_t knob_area = get_knob_area(obj);
 8023762:	4601      	mov	r1, r0
 8023764:	4668      	mov	r0, sp
 8023766:	f7ff ffb7 	bl	80236d8 <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 802376a:	4669      	mov	r1, sp
 802376c:	4628      	mov	r0, r5
 802376e:	f7f9 fa40 	bl	801cbf2 <lv_obj_invalidate_area>
    lv_coord_t w = lv_obj_get_width(obj);
 8023772:	4628      	mov	r0, r5
 8023774:	f7f9 f85e 	bl	801c834 <lv_obj_get_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8023778:	2250      	movs	r2, #80	; 0x50
 802377a:	4607      	mov	r7, r0
 802377c:	2100      	movs	r1, #0
 802377e:	4628      	mov	r0, r5
 8023780:	f7fa f97e 	bl	801da80 <lv_obj_get_style_prop>

static uint16_t get_angle(lv_obj_t * obj)
{
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;
    uint16_t angle;
    switch(colorwheel->mode) {
 8023784:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    return (lv_coord_t)v.num;
 8023788:	b206      	sxth	r6, r0
 802378a:	f003 0303 	and.w	r3, r3, #3
    lv_coord_t r = (w - scale_w) / 2;
 802378e:	1bbe      	subs	r6, r7, r6
    switch(colorwheel->mode) {
 8023790:	2b01      	cmp	r3, #1
    lv_coord_t r = (w - scale_w) / 2;
 8023792:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8023796:	ea4f 0666 	mov.w	r6, r6, asr #1
    switch(colorwheel->mode) {
 802379a:	d021      	beq.n	80237e0 <refr_knob_pos+0x82>
 802379c:	2b02      	cmp	r3, #2
 802379e:	d029      	beq.n	80237f4 <refr_knob_pos+0x96>
        default:
        case LV_COLORWHEEL_MODE_HUE:
            angle = colorwheel->hsv.h;
 80237a0:	8cac      	ldrh	r4, [r5, #36]	; 0x24
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 80237a2:	b220      	sxth	r0, r4
 80237a4:	345a      	adds	r4, #90	; 0x5a
 80237a6:	f7ee ff49 	bl	801263c <lv_trigo_sin>
 80237aa:	4370      	muls	r0, r6
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 80237ac:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 80237b0:	13c0      	asrs	r0, r0, #15
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 80237b2:	f3c7 074f 	ubfx	r7, r7, #1, #16
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 80237b6:	8528      	strh	r0, [r5, #40]	; 0x28
 80237b8:	b220      	sxth	r0, r4
 80237ba:	f7ee ff3f 	bl	801263c <lv_trigo_sin>
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 80237be:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    colorwheel->knob.pos.y = (((int32_t)r * lv_trigo_cos(angle)) >> LV_TRIGO_SHIFT);
 80237c0:	4370      	muls	r0, r6
    lv_area_t knob_area = get_knob_area(obj);
 80237c2:	4629      	mov	r1, r5
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 80237c4:	443b      	add	r3, r7
    colorwheel->knob.pos.y = colorwheel->knob.pos.y + w / 2;
 80237c6:	eb07 37e0 	add.w	r7, r7, r0, asr #15
    lv_area_t knob_area = get_knob_area(obj);
 80237ca:	4668      	mov	r0, sp
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 80237cc:	852b      	strh	r3, [r5, #40]	; 0x28
    colorwheel->knob.pos.y = colorwheel->knob.pos.y + w / 2;
 80237ce:	856f      	strh	r7, [r5, #42]	; 0x2a
    lv_area_t knob_area = get_knob_area(obj);
 80237d0:	f7ff ff82 	bl	80236d8 <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 80237d4:	4669      	mov	r1, sp
 80237d6:	4628      	mov	r0, r5
 80237d8:	f7f9 fa0b 	bl	801cbf2 <lv_obj_invalidate_area>
}
 80237dc:	b003      	add	sp, #12
 80237de:	bdf0      	pop	{r4, r5, r6, r7, pc}
            break;
        case LV_COLORWHEEL_MODE_SATURATION:
            angle = (colorwheel->hsv.s * 360) / 100;
 80237e0:	f895 4026 	ldrb.w	r4, [r5, #38]	; 0x26
            break;
        case LV_COLORWHEEL_MODE_VALUE:
            angle = (colorwheel->hsv.v * 360) / 100 ;
 80237e4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80237e8:	435c      	muls	r4, r3
 80237ea:	2364      	movs	r3, #100	; 0x64
 80237ec:	fbb4 f4f3 	udiv	r4, r4, r3
 80237f0:	b2a4      	uxth	r4, r4
            break;
 80237f2:	e7d6      	b.n	80237a2 <refr_knob_pos+0x44>
            angle = (colorwheel->hsv.v * 360) / 100 ;
 80237f4:	f895 4027 	ldrb.w	r4, [r5, #39]	; 0x27
 80237f8:	e7f4      	b.n	80237e4 <refr_knob_pos+0x86>

080237fa <lv_colorwheel_set_hsv>:
{
 80237fa:	460b      	mov	r3, r1
 80237fc:	b29b      	uxth	r3, r3
    if(hsv.h > 360) hsv.h %= 360;
 80237fe:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
{
 8023802:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023804:	4604      	mov	r4, r0
    if(hsv.h > 360) hsv.h %= 360;
 8023806:	bf88      	it	hi
 8023808:	f44f 70b4 	movhi.w	r0, #360	; 0x168
{
 802380c:	460a      	mov	r2, r1
 802380e:	f3c1 4107 	ubfx	r1, r1, #16, #8
    if(hsv.h > 360) hsv.h %= 360;
 8023812:	bf84      	itt	hi
 8023814:	fbb3 f5f0 	udivhi	r5, r3, r0
 8023818:	fb00 3315 	mlshi	r3, r0, r5, r3
 802381c:	ea4f 6212 	mov.w	r2, r2, lsr #24
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 8023820:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    if(hsv.h > 360) hsv.h %= 360;
 8023822:	bf88      	it	hi
 8023824:	b29b      	uxthhi	r3, r3
    if(hsv.s > 100) hsv.s = 100;
 8023826:	2964      	cmp	r1, #100	; 0x64
 8023828:	bf28      	it	cs
 802382a:	2164      	movcs	r1, #100	; 0x64
    if(hsv.v > 100) hsv.v = 100;
 802382c:	2a64      	cmp	r2, #100	; 0x64
 802382e:	bf28      	it	cs
 8023830:	2264      	movcs	r2, #100	; 0x64
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 8023832:	4298      	cmp	r0, r3
 8023834:	d00d      	beq.n	8023852 <lv_colorwheel_set_hsv+0x58>
    refr_knob_pos(obj);
 8023836:	4620      	mov	r0, r4
    colorwheel->hsv = hsv;
 8023838:	84a3      	strh	r3, [r4, #36]	; 0x24
 802383a:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
 802383e:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    refr_knob_pos(obj);
 8023842:	f7ff ff8c 	bl	802375e <refr_knob_pos>
    lv_obj_invalidate(obj);
 8023846:	4620      	mov	r0, r4
 8023848:	f7f9 f9f4 	bl	801cc34 <lv_obj_invalidate>
    return true;
 802384c:	2001      	movs	r0, #1
}
 802384e:	b003      	add	sp, #12
 8023850:	bd30      	pop	{r4, r5, pc}
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 8023852:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8023854:	f88d 1006 	strb.w	r1, [sp, #6]
 8023858:	f88d 2007 	strb.w	r2, [sp, #7]
 802385c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8023860:	4285      	cmp	r5, r0
 8023862:	d1e8      	bne.n	8023836 <lv_colorwheel_set_hsv+0x3c>
 8023864:	2000      	movs	r0, #0
 8023866:	e7f2      	b.n	802384e <lv_colorwheel_set_hsv+0x54>

08023868 <lv_colorwheel_get_rgb>:
    return lv_color_hsv_to_rgb(colorwheel->hsv.h, colorwheel->hsv.s, colorwheel->hsv.v);
 8023868:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
 802386c:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
 8023870:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8023872:	f000 bee3 	b.w	802463c <lv_color_hsv_to_rgb>

08023876 <lv_color_to32>:
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8023876:	f240 1107 	movw	r1, #263	; 0x107
 802387a:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 802387e:	2200      	movs	r2, #0
 8023880:	434b      	muls	r3, r1
 8023882:	3307      	adds	r3, #7
 8023884:	115b      	asrs	r3, r3, #5
{
 8023886:	b510      	push	{r4, lr}
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8023888:	f363 4217 	bfi	r2, r3, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 802388c:	f240 1403 	movw	r4, #259	; 0x103
 8023890:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8023894:	4363      	muls	r3, r4
 8023896:	3303      	adds	r3, #3
 8023898:	119b      	asrs	r3, r3, #6
 802389a:	f363 220f 	bfi	r2, r3, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 802389e:	f000 031f 	and.w	r3, r0, #31
 80238a2:	434b      	muls	r3, r1
 80238a4:	3307      	adds	r3, #7
 80238a6:	115b      	asrs	r3, r3, #5
 80238a8:	f363 0207 	bfi	r2, r3, #0, #8
}
 80238ac:	f042 407f 	orr.w	r0, r2, #4278190080	; 0xff000000
 80238b0:	bd10      	pop	{r4, pc}

080238b2 <lv_color_mix>:
{
 80238b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80238b4:	f3c1 1345 	ubfx	r3, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80238b8:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80238bc:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80238c0:	f000 071f 	and.w	r7, r0, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80238c4:	4373      	muls	r3, r6
 80238c6:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80238ca:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80238ce:	fb04 3302 	mla	r3, r4, r2, r3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80238d2:	f001 041f 	and.w	r4, r1, #31
 80238d6:	4374      	muls	r4, r6
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80238d8:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80238da:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80238de:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80238e0:	3480      	adds	r4, #128	; 0x80
    return ret;
 80238e2:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80238e6:	436c      	muls	r4, r5
    return ret;
 80238e8:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 80238ec:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80238f0:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 80238f4:	4373      	muls	r3, r6
 80238f6:	fb00 3302 	mla	r3, r0, r2, r3
 80238fa:	3380      	adds	r3, #128	; 0x80
 80238fc:	436b      	muls	r3, r5
 80238fe:	0ddb      	lsrs	r3, r3, #23
}
 8023900:	ea44 20c3 	orr.w	r0, r4, r3, lsl #11
 8023904:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023906 <lv_color_black>:
}
 8023906:	f04f 0000 	mov.w	r0, #0
 802390a:	4770      	bx	lr

0802390c <lv_led_constructor>:
{
 802390c:	b510      	push	{r4, lr}
    led->color = lv_theme_get_color_primary(obj);
 802390e:	4608      	mov	r0, r1
{
 8023910:	460c      	mov	r4, r1
    led->color = lv_theme_get_color_primary(obj);
 8023912:	f7fa ff1e 	bl	801e752 <lv_theme_get_color_primary>
    led->bright = LV_LED_BRIGHT_MAX;
 8023916:	23ff      	movs	r3, #255	; 0xff
    led->color = lv_theme_get_color_primary(obj);
 8023918:	84a0      	strh	r0, [r4, #36]	; 0x24
    led->bright = LV_LED_BRIGHT_MAX;
 802391a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
 802391e:	bd10      	pop	{r4, pc}

08023920 <lv_menu_destructor>:
    LV_TRACE_OBJ_CREATE("begin");

    lv_menu_t * menu = (lv_menu_t *)obj;
    lv_ll_t * history_ll = &(menu->history_ll);

    _lv_ll_clear(history_ll);
 8023920:	f101 0054 	add.w	r0, r1, #84	; 0x54
 8023924:	f001 b8c0 	b.w	8024aa8 <_lv_ll_clear>

08023928 <lv_menu_section_constructor>:
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
}

static void lv_menu_section_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8023928:	b510      	push	{r4, lr}
 802392a:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 802392c:	2101      	movs	r1, #1
 802392e:	4620      	mov	r0, r4
 8023930:	f7e7 fe18 	bl	800b564 <lv_obj_set_flex_flow>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8023934:	4620      	mov	r0, r4
 8023936:	2102      	movs	r1, #2
}
 8023938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 802393c:	f7f8 b817 	b.w	801b96e <lv_obj_clear_flag>

08023940 <lv_menu_cont_constructor>:
{
 8023940:	b510      	push	{r4, lr}
 8023942:	460c      	mov	r4, r1
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 8023944:	2100      	movs	r1, #0
 8023946:	4620      	mov	r0, r4
 8023948:	f7e7 fe0c 	bl	800b564 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 802394c:	2302      	movs	r3, #2
 802394e:	4620      	mov	r0, r4
 8023950:	2100      	movs	r1, #0
 8023952:	461a      	mov	r2, r3
 8023954:	f7e7 fe2e 	bl	800b5b4 <lv_obj_set_flex_align>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8023958:	4620      	mov	r0, r4
 802395a:	2102      	movs	r1, #2
}
 802395c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8023960:	f7f8 b805 	b.w	801b96e <lv_obj_clear_flag>

08023964 <lv_menu_value_changed_event_cb>:
        }
    }
}

static void lv_menu_value_changed_event_cb(lv_event_t * e)
{
 8023964:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_event_get_user_data(e);
 8023966:	f7f7 fc4e 	bl	801b206 <lv_event_get_user_data>
    return menu->main_page;
 802396a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    lv_obj_t * obj = lv_event_get_user_data(e);
 802396c:	4604      	mov	r4, r0
    lv_menu_t * menu = (lv_menu_t *)obj;

    lv_menu_page_t * main_page = (lv_menu_page_t *)lv_menu_get_cur_main_page(obj);
    if(main_page != NULL && menu->main_header_title != NULL) {
 802396e:	b14b      	cbz	r3, 8023984 <lv_menu_value_changed_event_cb+0x20>
 8023970:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8023972:	b138      	cbz	r0, 8023984 <lv_menu_value_changed_event_cb+0x20>
        if(main_page->title != NULL) {
 8023974:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8023976:	b199      	cbz	r1, 80239a0 <lv_menu_value_changed_event_cb+0x3c>
            lv_label_set_text(menu->main_header_title, main_page->title);
 8023978:	f003 fa80 	bl	8026e7c <lv_label_set_text>
            lv_obj_clear_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
 802397c:	2101      	movs	r1, #1
 802397e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8023980:	f7f7 fff5 	bl	801b96e <lv_obj_clear_flag>
    return menu->sidebar_page;
 8023984:	6c23      	ldr	r3, [r4, #64]	; 0x40
            lv_obj_add_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
        }
    }

    lv_menu_page_t * sidebar_page = (lv_menu_page_t *)lv_menu_get_cur_sidebar_page(obj);
    if(sidebar_page != NULL && menu->sidebar_header_title != NULL) {
 8023986:	b1a3      	cbz	r3, 80239b2 <lv_menu_value_changed_event_cb+0x4e>
 8023988:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 802398a:	b190      	cbz	r0, 80239b2 <lv_menu_value_changed_event_cb+0x4e>
        if(sidebar_page->title != NULL) {
 802398c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 802398e:	b159      	cbz	r1, 80239a8 <lv_menu_value_changed_event_cb+0x44>
            lv_label_set_text(menu->sidebar_header_title, sidebar_page->title);
 8023990:	f003 fa74 	bl	8026e7c <lv_label_set_text>
            lv_obj_clear_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 8023994:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8023996:	2101      	movs	r1, #1
        }
        else {
            lv_obj_add_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
        }
    }
}
 8023998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            lv_obj_clear_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 802399c:	f7f7 bfe7 	b.w	801b96e <lv_obj_clear_flag>
            lv_obj_add_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
 80239a0:	2101      	movs	r1, #1
 80239a2:	f7f7 ffae 	bl	801b902 <lv_obj_add_flag>
 80239a6:	e7ed      	b.n	8023984 <lv_menu_value_changed_event_cb+0x20>
            lv_obj_add_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 80239a8:	2101      	movs	r1, #1
}
 80239aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            lv_obj_add_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 80239ae:	f7f7 bfa8 	b.w	801b902 <lv_obj_add_flag>
}
 80239b2:	bd10      	pop	{r4, pc}

080239b4 <lv_menu_page_destructor>:
    if(page->title != NULL) {
 80239b4:	6a48      	ldr	r0, [r1, #36]	; 0x24
{
 80239b6:	b510      	push	{r4, lr}
 80239b8:	460c      	mov	r4, r1
    if(page->title != NULL) {
 80239ba:	b118      	cbz	r0, 80239c4 <lv_menu_page_destructor+0x10>
        lv_mem_free(page->title);
 80239bc:	f7ee fe96 	bl	80126ec <lv_mem_free>
        page->title = NULL;
 80239c0:	2300      	movs	r3, #0
 80239c2:	6263      	str	r3, [r4, #36]	; 0x24
}
 80239c4:	bd10      	pop	{r4, pc}

080239c6 <lv_menu_page_constructor>:
{
 80239c6:	b510      	push	{r4, lr}
 80239c8:	460c      	mov	r4, r1
    lv_menu_t * menu = (lv_menu_t *)lv_obj_get_parent(obj);
 80239ca:	4608      	mov	r0, r1
 80239cc:	f7fa fbdc 	bl	801e188 <lv_obj_get_parent>
    lv_obj_set_parent(obj, ((lv_menu_t *)menu)->storage);
 80239d0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80239d2:	4620      	mov	r0, r4
 80239d4:	f7fa fcbc 	bl	801e350 <lv_obj_set_parent>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 80239d8:	4620      	mov	r0, r4
 80239da:	2101      	movs	r1, #1
 80239dc:	f7e7 fdc2 	bl	800b564 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 80239e0:	2302      	movs	r3, #2
 80239e2:	4620      	mov	r0, r4
 80239e4:	2100      	movs	r1, #0
 80239e6:	461a      	mov	r2, r3
 80239e8:	f7e7 fde4 	bl	800b5b4 <lv_obj_set_flex_align>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_EVENT_BUBBLE);
 80239ec:	4620      	mov	r0, r4
 80239ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 80239f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_EVENT_BUBBLE);
 80239f6:	f7f7 bf84 	b.w	801b902 <lv_obj_add_flag>

080239fa <lv_menu_refr_main_header_mode>:
{
 80239fa:	b510      	push	{r4, lr}
 80239fc:	4604      	mov	r4, r0
    if(menu->main_header == NULL || menu->main_page == NULL) return;
 80239fe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8023a00:	b378      	cbz	r0, 8023a62 <lv_menu_refr_main_header_mode+0x68>
 8023a02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023a04:	b36b      	cbz	r3, 8023a62 <lv_menu_refr_main_header_mode+0x68>
    switch(menu->mode_header) {
 8023a06:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
 8023a0a:	f3c1 0141 	ubfx	r1, r1, #1, #2
 8023a0e:	2901      	cmp	r1, #1
 8023a10:	d006      	beq.n	8023a20 <lv_menu_refr_main_header_mode+0x26>
 8023a12:	2902      	cmp	r1, #2
 8023a14:	d01e      	beq.n	8023a54 <lv_menu_refr_main_header_mode+0x5a>
 8023a16:	b951      	cbnz	r1, 8023a2e <lv_menu_refr_main_header_mode+0x34>
            lv_obj_move_to_index(menu->main_header, 1);
 8023a18:	f7fa fd0d 	bl	801e436 <lv_obj_move_to_index>
            lv_obj_set_flex_grow(menu->main_page, 1);
 8023a1c:	2101      	movs	r1, #1
 8023a1e:	e003      	b.n	8023a28 <lv_menu_refr_main_header_mode+0x2e>
            lv_obj_move_to_index(menu->main_header, 0);
 8023a20:	2100      	movs	r1, #0
 8023a22:	f7fa fd08 	bl	801e436 <lv_obj_move_to_index>
            lv_obj_set_flex_grow(menu->main_page, 0);
 8023a26:	2100      	movs	r1, #0
            lv_obj_set_flex_grow(menu->main_page, 1);
 8023a28:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8023a2a:	f7ff fa59 	bl	8022ee0 <lv_obj_set_flex_grow>
    lv_obj_refr_size(menu->main_header);
 8023a2e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8023a30:	f7e1 fbac 	bl	800518c <lv_obj_refr_size>
    lv_obj_refr_size(menu->main_page);
 8023a34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8023a36:	f7e1 fba9 	bl	800518c <lv_obj_refr_size>
    lv_obj_update_layout(menu->main_header);
 8023a3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8023a3c:	f7e1 fe90 	bl	8005760 <lv_obj_update_layout>
    if(lv_obj_get_content_height(menu->main_header) == 0) {
 8023a40:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8023a42:	f7f8 ff19 	bl	801c878 <lv_obj_get_content_height>
        lv_obj_add_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 8023a46:	2101      	movs	r1, #1
    if(lv_obj_get_content_height(menu->main_header) == 0) {
 8023a48:	b930      	cbnz	r0, 8023a58 <lv_menu_refr_main_header_mode+0x5e>
        lv_obj_add_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 8023a4a:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 8023a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_add_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 8023a50:	f7f7 bf57 	b.w	801b902 <lv_obj_add_flag>
            lv_obj_move_to_index(menu->main_header, 1);
 8023a54:	2101      	movs	r1, #1
 8023a56:	e7df      	b.n	8023a18 <lv_menu_refr_main_header_mode+0x1e>
        lv_obj_clear_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 8023a58:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 8023a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_clear_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 8023a5e:	f7f7 bf86 	b.w	801b96e <lv_obj_clear_flag>
}
 8023a62:	bd10      	pop	{r4, pc}

08023a64 <lv_menu_back_btn_is_root>:
    if(obj == ((lv_menu_t *)menu)->sidebar_header_back_btn) {
 8023a64:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8023a66:	428b      	cmp	r3, r1
 8023a68:	d009      	beq.n	8023a7e <lv_menu_back_btn_is_root+0x1a>
    if(obj == ((lv_menu_t *)menu)->main_header_back_btn && ((lv_menu_t *)menu)->prev_depth <= 1) {
 8023a6a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8023a6c:	428b      	cmp	r3, r1
 8023a6e:	d108      	bne.n	8023a82 <lv_menu_back_btn_is_root+0x1e>
 8023a70:	f890 0061 	ldrb.w	r0, [r0, #97]	; 0x61
 8023a74:	2801      	cmp	r0, #1
 8023a76:	bf8c      	ite	hi
 8023a78:	2000      	movhi	r0, #0
 8023a7a:	2001      	movls	r0, #1
 8023a7c:	4770      	bx	lr
        return true;
 8023a7e:	2001      	movs	r0, #1
 8023a80:	4770      	bx	lr
    return false;
 8023a82:	2000      	movs	r0, #0
}
 8023a84:	4770      	bx	lr

08023a86 <lv_menu_clear_history>:
{
 8023a86:	b510      	push	{r4, lr}
 8023a88:	4604      	mov	r4, r0
    _lv_ll_clear(history_ll);
 8023a8a:	3054      	adds	r0, #84	; 0x54
 8023a8c:	f001 f80c 	bl	8024aa8 <_lv_ll_clear>
    menu->cur_depth = 0;
 8023a90:	2300      	movs	r3, #0
 8023a92:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
 8023a96:	bd10      	pop	{r4, pc}

08023a98 <lv_menu_set_page>:
{
 8023a98:	b538      	push	{r3, r4, r5, lr}
 8023a9a:	4604      	mov	r4, r0
    if(menu->main_page == page) {
 8023a9c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
 8023a9e:	460d      	mov	r5, r1
    if(menu->main_page == page) {
 8023aa0:	4288      	cmp	r0, r1
 8023aa2:	d063      	beq.n	8023b6c <lv_menu_set_page+0xd4>
    if(menu->main_page != NULL) {
 8023aa4:	b110      	cbz	r0, 8023aac <lv_menu_set_page+0x14>
        lv_obj_set_parent(menu->main_page, menu->storage);
 8023aa6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8023aa8:	f7fa fc52 	bl	801e350 <lv_obj_set_parent>
    if(page != NULL) {
 8023aac:	2d00      	cmp	r5, #0
 8023aae:	d03e      	beq.n	8023b2e <lv_menu_set_page+0x96>
        lv_menu_history_t * new_node = _lv_ll_ins_head(history_ll);
 8023ab0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8023ab4:	f000 ff98 	bl	80249e8 <_lv_ll_ins_head>
        LV_ASSERT_MALLOC(new_node);
 8023ab8:	b900      	cbnz	r0, 8023abc <lv_menu_set_page+0x24>
 8023aba:	e7fe      	b.n	8023aba <lv_menu_set_page+0x22>
        new_node->page = page;
 8023abc:	6005      	str	r5, [r0, #0]
        lv_obj_set_parent(page, menu->main);
 8023abe:	4628      	mov	r0, r5
        menu->cur_depth++;
 8023ac0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
        lv_obj_set_parent(page, menu->main);
 8023ac4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        menu->cur_depth++;
 8023ac6:	3301      	adds	r3, #1
 8023ac8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
        lv_obj_set_parent(page, menu->main);
 8023acc:	f7fa fc40 	bl	801e350 <lv_obj_set_parent>
    if(menu->selected_tab != NULL) {
 8023ad0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    menu->main_page = page;
 8023ad2:	62e5      	str	r5, [r4, #44]	; 0x2c
    if(menu->selected_tab != NULL) {
 8023ad4:	b120      	cbz	r0, 8023ae0 <lv_menu_set_page+0x48>
        if(menu->sidebar_page != NULL) {
 8023ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
            lv_obj_add_state(menu->selected_tab, LV_STATE_CHECKED);
 8023ad8:	2101      	movs	r1, #1
        if(menu->sidebar_page != NULL) {
 8023ada:	b363      	cbz	r3, 8023b36 <lv_menu_set_page+0x9e>
            lv_obj_add_state(menu->selected_tab, LV_STATE_CHECKED);
 8023adc:	f7f7 ff83 	bl	801b9e6 <lv_obj_add_state>
    if(menu->sidebar_page != NULL) {
 8023ae0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023ae2:	b393      	cbz	r3, 8023b4a <lv_menu_set_page+0xb2>
        if(menu->sidebar_generated) {
 8023ae4:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8023ae8:	07d9      	lsls	r1, r3, #31
 8023aea:	d50a      	bpl.n	8023b02 <lv_menu_set_page+0x6a>
            if(menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 8023aec:	071a      	lsls	r2, r3, #28
                lv_obj_clear_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023aee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8023af0:	f04f 0101 	mov.w	r1, #1
            if(menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 8023af4:	d522      	bpl.n	8023b3c <lv_menu_set_page+0xa4>
                lv_obj_clear_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023af6:	f7f7 ff3a 	bl	801b96e <lv_obj_clear_flag>
                lv_obj_add_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 8023afa:	2102      	movs	r1, #2
 8023afc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8023afe:	f7f7 ff00 	bl	801b902 <lv_obj_add_flag>
        if(menu->cur_depth >= 2) {
 8023b02:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023b06:	2101      	movs	r1, #1
 8023b08:	6b60      	ldr	r0, [r4, #52]	; 0x34
        if(menu->cur_depth >= 2) {
 8023b0a:	2b01      	cmp	r3, #1
 8023b0c:	d927      	bls.n	8023b5e <lv_menu_set_page+0xc6>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023b0e:	f7f7 ff2e 	bl	801b96e <lv_obj_clear_flag>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 8023b12:	2102      	movs	r1, #2
 8023b14:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8023b16:	f7f7 fef4 	bl	801b902 <lv_obj_add_flag>
    lv_event_send((lv_obj_t *)menu, LV_EVENT_VALUE_CHANGED, NULL);
 8023b1a:	4620      	mov	r0, r4
 8023b1c:	2200      	movs	r2, #0
 8023b1e:	211c      	movs	r1, #28
 8023b20:	f7e0 fddc 	bl	80046dc <lv_event_send>
    lv_menu_refr_main_header_mode(obj);
 8023b24:	4620      	mov	r0, r4
}
 8023b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_menu_refr_main_header_mode(obj);
 8023b2a:	f7ff bf66 	b.w	80239fa <lv_menu_refr_main_header_mode>
        lv_menu_clear_history(obj);
 8023b2e:	4620      	mov	r0, r4
 8023b30:	f7ff ffa9 	bl	8023a86 <lv_menu_clear_history>
 8023b34:	e7cc      	b.n	8023ad0 <lv_menu_set_page+0x38>
            lv_obj_clear_state(menu->selected_tab, LV_STATE_CHECKED);
 8023b36:	f7f7 ff60 	bl	801b9fa <lv_obj_clear_state>
 8023b3a:	e7d1      	b.n	8023ae0 <lv_menu_set_page+0x48>
                lv_obj_add_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023b3c:	f7f7 fee1 	bl	801b902 <lv_obj_add_flag>
                lv_obj_clear_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 8023b40:	2102      	movs	r1, #2
 8023b42:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8023b44:	f7f7 ff13 	bl	801b96e <lv_obj_clear_flag>
 8023b48:	e7db      	b.n	8023b02 <lv_menu_set_page+0x6a>
        if(menu->cur_depth >= 2 || menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 8023b4a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023b4e:	2101      	movs	r1, #1
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023b50:	6b60      	ldr	r0, [r4, #52]	; 0x34
        if(menu->cur_depth >= 2 || menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 8023b52:	2b01      	cmp	r3, #1
 8023b54:	d8db      	bhi.n	8023b0e <lv_menu_set_page+0x76>
 8023b56:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8023b5a:	071b      	lsls	r3, r3, #28
 8023b5c:	d4d7      	bmi.n	8023b0e <lv_menu_set_page+0x76>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8023b5e:	f7f7 fed0 	bl	801b902 <lv_obj_add_flag>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 8023b62:	2102      	movs	r1, #2
 8023b64:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8023b66:	f7f7 ff02 	bl	801b96e <lv_obj_clear_flag>
 8023b6a:	e7d6      	b.n	8023b1a <lv_menu_set_page+0x82>
}
 8023b6c:	bd38      	pop	{r3, r4, r5, pc}

08023b6e <lv_menu_back_event_cb>:
{
 8023b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b70:	4604      	mov	r4, r0
    lv_event_code_t code = lv_event_get_code(e);
 8023b72:	f7f7 fb42 	bl	801b1fa <lv_event_get_code>
    if(code == LV_EVENT_CLICKED) {
 8023b76:	2807      	cmp	r0, #7
 8023b78:	d140      	bne.n	8023bfc <lv_menu_back_event_cb+0x8e>
        lv_obj_t * obj = lv_event_get_target(e);
 8023b7a:	4620      	mov	r0, r4
 8023b7c:	f7f7 fb39 	bl	801b1f2 <lv_event_get_target>
 8023b80:	4605      	mov	r5, r0
        lv_menu_t * menu = (lv_menu_t *)lv_event_get_user_data(e);
 8023b82:	4620      	mov	r0, r4
 8023b84:	f7f7 fb3f 	bl	801b206 <lv_event_get_user_data>
        if(!(obj == menu->main_header_back_btn || obj == menu->sidebar_header_back_btn)) return;
 8023b88:	6b43      	ldr	r3, [r0, #52]	; 0x34
        lv_menu_t * menu = (lv_menu_t *)lv_event_get_user_data(e);
 8023b8a:	4604      	mov	r4, r0
        if(!(obj == menu->main_header_back_btn || obj == menu->sidebar_header_back_btn)) return;
 8023b8c:	429d      	cmp	r5, r3
 8023b8e:	d002      	beq.n	8023b96 <lv_menu_back_event_cb+0x28>
 8023b90:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8023b92:	429d      	cmp	r5, r3
 8023b94:	d132      	bne.n	8023bfc <lv_menu_back_event_cb+0x8e>
        menu->prev_depth = menu->cur_depth; /* Save the previous value for user event handler */
 8023b96:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
        if(lv_menu_back_btn_is_root((lv_obj_t *)menu, obj)) return;
 8023b9a:	4629      	mov	r1, r5
 8023b9c:	4620      	mov	r0, r4
        menu->prev_depth = menu->cur_depth; /* Save the previous value for user event handler */
 8023b9e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
        if(lv_menu_back_btn_is_root((lv_obj_t *)menu, obj)) return;
 8023ba2:	f7ff ff5f 	bl	8023a64 <lv_menu_back_btn_is_root>
 8023ba6:	bb48      	cbnz	r0, 8023bfc <lv_menu_back_event_cb+0x8e>
        lv_ll_t * history_ll = &(menu->history_ll);
 8023ba8:	f104 0754 	add.w	r7, r4, #84	; 0x54
        lv_menu_history_t * act_hist = _lv_ll_get_head(history_ll);
 8023bac:	4638      	mov	r0, r7
 8023bae:	f000 ff8d 	bl	8024acc <_lv_ll_get_head>
        lv_menu_history_t * prev_hist = _lv_ll_get_next(history_ll, act_hist);
 8023bb2:	4601      	mov	r1, r0
        lv_menu_history_t * act_hist = _lv_ll_get_head(history_ll);
 8023bb4:	4606      	mov	r6, r0
        lv_menu_history_t * prev_hist = _lv_ll_get_next(history_ll, act_hist);
 8023bb6:	4638      	mov	r0, r7
 8023bb8:	f000 ff8e 	bl	8024ad8 <_lv_ll_get_next>
        if(prev_hist != NULL) {
 8023bbc:	4605      	mov	r5, r0
 8023bbe:	b1e8      	cbz	r0, 8023bfc <lv_menu_back_event_cb+0x8e>
            _lv_ll_remove(history_ll, act_hist);
 8023bc0:	4631      	mov	r1, r6
 8023bc2:	4638      	mov	r0, r7
 8023bc4:	f000 ff47 	bl	8024a56 <_lv_ll_remove>
            lv_mem_free(act_hist);
 8023bc8:	4630      	mov	r0, r6
 8023bca:	f7ee fd8f 	bl	80126ec <lv_mem_free>
            menu->cur_depth--;
 8023bce:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
            _lv_ll_remove(history_ll, prev_hist);
 8023bd2:	4629      	mov	r1, r5
 8023bd4:	4638      	mov	r0, r7
            menu->cur_depth--;
 8023bd6:	3b01      	subs	r3, #1
 8023bd8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            _lv_ll_remove(history_ll, prev_hist);
 8023bdc:	f000 ff3b 	bl	8024a56 <_lv_ll_remove>
            menu->cur_depth--;
 8023be0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
            lv_menu_set_page(&(menu->obj), prev_hist->page);
 8023be4:	4620      	mov	r0, r4
            menu->cur_depth--;
 8023be6:	3b01      	subs	r3, #1
 8023be8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            lv_menu_set_page(&(menu->obj), prev_hist->page);
 8023bec:	6829      	ldr	r1, [r5, #0]
 8023bee:	f7ff ff53 	bl	8023a98 <lv_menu_set_page>
            lv_mem_free(prev_hist);
 8023bf2:	4628      	mov	r0, r5
}
 8023bf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_mem_free(prev_hist);
 8023bf8:	f7ee bd78 	b.w	80126ec <lv_mem_free>
}
 8023bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023bfe <lv_meter_destructor>:
{
 8023bfe:	b510      	push	{r4, lr}
 8023c00:	460c      	mov	r4, r1
    _lv_ll_clear(&meter->indicator_ll);
 8023c02:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8023c06:	f000 ff4f 	bl	8024aa8 <_lv_ll_clear>
    _lv_ll_clear(&meter->scale_ll);
 8023c0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
}
 8023c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _lv_ll_clear(&meter->scale_ll);
 8023c12:	f000 bf49 	b.w	8024aa8 <_lv_ll_clear>

08023c16 <lv_meter_constructor>:
{
 8023c16:	b510      	push	{r4, lr}
 8023c18:	460c      	mov	r4, r1
    _lv_ll_init(&meter->scale_ll, sizeof(lv_meter_scale_t));
 8023c1a:	2124      	movs	r1, #36	; 0x24
 8023c1c:	1860      	adds	r0, r4, r1
 8023c1e:	f000 fedb 	bl	80249d8 <_lv_ll_init>
    _lv_ll_init(&meter->indicator_ll, sizeof(lv_meter_indicator_t));
 8023c22:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8023c26:	211c      	movs	r1, #28
}
 8023c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _lv_ll_init(&meter->indicator_ll, sizeof(lv_meter_indicator_t));
 8023c2c:	f000 bed4 	b.w	80249d8 <_lv_ll_init>

08023c30 <lv_spinbox_step_next>:
    int32_t new_step = spinbox->step / 10;
 8023c30:	6f03      	ldr	r3, [r0, #112]	; 0x70
    if((new_step) > 0)
 8023c32:	2b09      	cmp	r3, #9
    int32_t new_step = spinbox->step / 10;
 8023c34:	bfca      	itet	gt
 8023c36:	220a      	movgt	r2, #10
        spinbox->step = 1;
 8023c38:	2301      	movle	r3, #1
    int32_t new_step = spinbox->step / 10;
 8023c3a:	fb93 f3f2 	sdivgt	r3, r3, r2
 8023c3e:	6703      	str	r3, [r0, #112]	; 0x70
    lv_spinbox_updatevalue(obj);
 8023c40:	f7ed bd6c 	b.w	801171c <lv_spinbox_updatevalue>

08023c44 <lv_spinbox_step_prev>:
    int32_t new_step = spinbox->step * 10;
 8023c44:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8023c46:	230a      	movs	r3, #10
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 8023c48:	6e81      	ldr	r1, [r0, #104]	; 0x68
    int32_t new_step = spinbox->step * 10;
 8023c4a:	435a      	muls	r2, r3
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 8023c4c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8023c4e:	2b00      	cmp	r3, #0
 8023c50:	bfb8      	it	lt
 8023c52:	425b      	neglt	r3, r3
 8023c54:	428b      	cmp	r3, r1
 8023c56:	bfb8      	it	lt
 8023c58:	460b      	movlt	r3, r1
    if(new_step <= step_limit) spinbox->step = new_step;
 8023c5a:	4293      	cmp	r3, r2
 8023c5c:	bfa8      	it	ge
 8023c5e:	6702      	strge	r2, [r0, #112]	; 0x70
    lv_spinbox_updatevalue(obj);
 8023c60:	f7ed bd5c 	b.w	801171c <lv_spinbox_updatevalue>

08023c64 <lv_spinbox_increment>:
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 8023c64:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8023c66:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8023c68:	6e83      	ldr	r3, [r0, #104]	; 0x68
{
 8023c6a:	b410      	push	{r4}
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 8023c6c:	1854      	adds	r4, r2, r1
 8023c6e:	429c      	cmp	r4, r3
 8023c70:	dc0b      	bgt.n	8023c8a <lv_spinbox_increment+0x26>
        if((spinbox->value + spinbox->step) > 0 && spinbox->value < 0) spinbox->value = -spinbox->value;
 8023c72:	2c00      	cmp	r4, #0
 8023c74:	dd03      	ble.n	8023c7e <lv_spinbox_increment+0x1a>
 8023c76:	2a00      	cmp	r2, #0
 8023c78:	bfbc      	itt	lt
 8023c7a:	4252      	neglt	r2, r2
 8023c7c:	6642      	strlt	r2, [r0, #100]	; 0x64
        spinbox->value += spinbox->step;
 8023c7e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8023c80:	440b      	add	r3, r1
}
 8023c82:	bc10      	pop	{r4}
        spinbox->value += spinbox->step;
 8023c84:	6643      	str	r3, [r0, #100]	; 0x64
    lv_spinbox_updatevalue(obj);
 8023c86:	f7ed bd49 	b.w	801171c <lv_spinbox_updatevalue>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_max))
 8023c8a:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
 8023c8e:	07c9      	lsls	r1, r1, #31
 8023c90:	d5f7      	bpl.n	8023c82 <lv_spinbox_increment+0x1e>
 8023c92:	429a      	cmp	r2, r3
            spinbox->value = spinbox->range_min;
 8023c94:	bf08      	it	eq
 8023c96:	6ec3      	ldreq	r3, [r0, #108]	; 0x6c
 8023c98:	e7f3      	b.n	8023c82 <lv_spinbox_increment+0x1e>

08023c9a <lv_spinbox_decrement>:
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 8023c9a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8023c9c:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8023c9e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8023ca0:	b410      	push	{r4}
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 8023ca2:	1a54      	subs	r4, r2, r1
 8023ca4:	429c      	cmp	r4, r3
 8023ca6:	db0b      	blt.n	8023cc0 <lv_spinbox_decrement+0x26>
        if((spinbox->value - spinbox->step) < 0 && spinbox->value > 0) spinbox->value = -spinbox->value;
 8023ca8:	2c00      	cmp	r4, #0
 8023caa:	da03      	bge.n	8023cb4 <lv_spinbox_decrement+0x1a>
 8023cac:	2a00      	cmp	r2, #0
 8023cae:	bfc4      	itt	gt
 8023cb0:	4252      	neggt	r2, r2
 8023cb2:	6642      	strgt	r2, [r0, #100]	; 0x64
        spinbox->value -= spinbox->step;
 8023cb4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8023cb6:	1a5b      	subs	r3, r3, r1
}
 8023cb8:	bc10      	pop	{r4}
        spinbox->value -= spinbox->step;
 8023cba:	6643      	str	r3, [r0, #100]	; 0x64
    lv_spinbox_updatevalue(obj);
 8023cbc:	f7ed bd2e 	b.w	801171c <lv_spinbox_updatevalue>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_min))
 8023cc0:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
 8023cc4:	07c9      	lsls	r1, r1, #31
 8023cc6:	d5f7      	bpl.n	8023cb8 <lv_spinbox_decrement+0x1e>
 8023cc8:	429a      	cmp	r2, r3
            spinbox->value = spinbox->range_max;
 8023cca:	bf08      	it	eq
 8023ccc:	6e83      	ldreq	r3, [r0, #104]	; 0x68
 8023cce:	e7f3      	b.n	8023cb8 <lv_spinbox_decrement+0x1e>

08023cd0 <arc_anim_start_angle>:


static void arc_anim_start_angle(void * obj, int32_t v)
{
    lv_arc_set_start_angle(obj, (uint16_t) v);
 8023cd0:	b289      	uxth	r1, r1
 8023cd2:	f001 bfe7 	b.w	8025ca4 <lv_arc_set_start_angle>

08023cd6 <arc_anim_end_angle>:
}


static void arc_anim_end_angle(void * obj, int32_t v)
{
    lv_arc_set_end_angle(obj, (uint16_t) v);
 8023cd6:	b289      	uxth	r1, r1
 8023cd8:	f002 b822 	b.w	8025d20 <lv_arc_set_end_angle>

08023cdc <lv_tabview_destructor>:
    if(tabview->tab_pos & LV_DIR_VER) {
 8023cdc:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8023ce0:	f013 0f0c 	tst.w	r3, #12
{
 8023ce4:	b570      	push	{r4, r5, r6, lr}
 8023ce6:	460c      	mov	r4, r1
    if(tabview->tab_pos & LV_DIR_VER) {
 8023ce8:	d116      	bne.n	8023d18 <lv_tabview_destructor+0x3c>
    if(tabview->tab_pos & LV_DIR_HOR) {
 8023cea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8023cee:	079b      	lsls	r3, r3, #30
 8023cf0:	d122      	bne.n	8023d38 <lv_tabview_destructor+0x5c>
    lv_mem_free(tabview->map);
 8023cf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8023cf4:	f7ee fcfa 	bl	80126ec <lv_mem_free>
    tabview->map = NULL;
 8023cf8:	2300      	movs	r3, #0
 8023cfa:	6263      	str	r3, [r4, #36]	; 0x24
}
 8023cfc:	bd70      	pop	{r4, r5, r6, pc}
            lv_mem_free(tabview->map[i]);
 8023cfe:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8023d02:	f7ee fcf3 	bl	80126ec <lv_mem_free>
            tabview->map[i] = NULL;
 8023d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023d08:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
        for(i = 0; i < tabview->tab_cnt; i++) {
 8023d0c:	3501      	adds	r5, #1
 8023d0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            lv_mem_free(tabview->map[i]);
 8023d10:	6a62      	ldr	r2, [r4, #36]	; 0x24
        for(i = 0; i < tabview->tab_cnt; i++) {
 8023d12:	42ab      	cmp	r3, r5
 8023d14:	d8f3      	bhi.n	8023cfe <lv_tabview_destructor+0x22>
 8023d16:	e7e8      	b.n	8023cea <lv_tabview_destructor+0xe>
 8023d18:	2500      	movs	r5, #0
            tabview->map[i] = NULL;
 8023d1a:	462e      	mov	r6, r5
 8023d1c:	e7f7      	b.n	8023d0e <lv_tabview_destructor+0x32>
            lv_mem_free(tabview->map[i * 2]);
 8023d1e:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8023d22:	f7ee fce3 	bl	80126ec <lv_mem_free>
            tabview->map[i * 2] = NULL;
 8023d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023d28:	f843 6035 	str.w	r6, [r3, r5, lsl #3]
        for(i = 0; i < tabview->tab_cnt; i++) {
 8023d2c:	3501      	adds	r5, #1
 8023d2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            lv_mem_free(tabview->map[i * 2]);
 8023d30:	6a62      	ldr	r2, [r4, #36]	; 0x24
        for(i = 0; i < tabview->tab_cnt; i++) {
 8023d32:	42ab      	cmp	r3, r5
 8023d34:	d8f3      	bhi.n	8023d1e <lv_tabview_destructor+0x42>
 8023d36:	e7dc      	b.n	8023cf2 <lv_tabview_destructor+0x16>
 8023d38:	2500      	movs	r5, #0
            tabview->map[i * 2] = NULL;
 8023d3a:	462e      	mov	r6, r5
 8023d3c:	e7f7      	b.n	8023d2e <lv_tabview_destructor+0x52>

08023d3e <lv_tabview_get_content>:
    return lv_obj_get_child(tv, 1);
 8023d3e:	2101      	movs	r1, #1
 8023d40:	f7fa ba25 	b.w	801e18e <lv_obj_get_child>

08023d44 <lv_tabview_get_tab_btns>:
    return lv_obj_get_child(tv, 0);
 8023d44:	2100      	movs	r1, #0
 8023d46:	f7fa ba22 	b.w	801e18e <lv_obj_get_child>

08023d4a <lv_tabview_set_act>:
{
 8023d4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(id >= tabview->tab_cnt) {
 8023d4e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
{
 8023d50:	4605      	mov	r5, r0
 8023d52:	4689      	mov	r9, r1
 8023d54:	4617      	mov	r7, r2
    if(id >= tabview->tab_cnt) {
 8023d56:	428b      	cmp	r3, r1
        id = tabview->tab_cnt - 1;
 8023d58:	bf98      	it	ls
 8023d5a:	f103 39ff 	addls.w	r9, r3, #4294967295
    lv_obj_update_layout(obj);
 8023d5e:	f7e1 fcff 	bl	8005760 <lv_obj_update_layout>
    lv_obj_t * cont = lv_tabview_get_content(obj);
 8023d62:	4628      	mov	r0, r5
 8023d64:	f7ff ffeb 	bl	8023d3e <lv_tabview_get_content>
    if(cont == NULL) return;
 8023d68:	4606      	mov	r6, r0
 8023d6a:	b370      	cbz	r0, 8023dca <lv_tabview_set_act+0x80>
    if((tabview->tab_pos & LV_DIR_VER) != 0) {
 8023d6c:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
            lv_obj_scroll_to_x(cont, id * (gap + w), anim_en);
 8023d70:	fa1f f889 	uxth.w	r8, r9
    if((tabview->tab_pos & LV_DIR_VER) != 0) {
 8023d74:	f011 010c 	ands.w	r1, r1, #12
 8023d78:	d029      	beq.n	8023dce <lv_tabview_set_act+0x84>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8023d7a:	2215      	movs	r2, #21
 8023d7c:	2100      	movs	r1, #0
 8023d7e:	f7f9 fe7f 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8023d82:	b204      	sxth	r4, r0
        lv_coord_t w = lv_obj_get_content_width(cont);
 8023d84:	4630      	mov	r0, r6
 8023d86:	f7f8 fd61 	bl	801c84c <lv_obj_get_content_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8023d8a:	2100      	movs	r1, #0
 8023d8c:	4682      	mov	sl, r0
 8023d8e:	2216      	movs	r2, #22
 8023d90:	4628      	mov	r0, r5
 8023d92:	f7f9 fe75 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8023d96:	eb04 030a 	add.w	r3, r4, sl
 8023d9a:	b2c0      	uxtb	r0, r0
            lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 8023d9c:	463a      	mov	r2, r7
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8023d9e:	2801      	cmp	r0, #1
            lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 8023da0:	4630      	mov	r0, r6
            lv_obj_scroll_to_x(cont, id * (gap + w), anim_en);
 8023da2:	bf12      	itee	ne
 8023da4:	fb13 f108 	smulbbne	r1, r3, r8
            int32_t id_rtl = -(int32_t)id;
 8023da8:	f1c9 0900 	rsbeq	r9, r9, #0
            lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 8023dac:	fb13 f109 	smulbbeq	r1, r3, r9
 8023db0:	b209      	sxth	r1, r1
 8023db2:	f7e2 f897 	bl	8005ee4 <lv_obj_scroll_to_x>
    lv_obj_t * btns = lv_tabview_get_tab_btns(obj);
 8023db6:	4628      	mov	r0, r5
 8023db8:	f7ff ffc4 	bl	8023d44 <lv_tabview_get_tab_btns>
    lv_btnmatrix_set_btn_ctrl(btns, id, LV_BTNMATRIX_CTRL_CHECKED);
 8023dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8023dc0:	4641      	mov	r1, r8
 8023dc2:	f002 fb43 	bl	802644c <lv_btnmatrix_set_btn_ctrl>
    tabview->tab_cur = id;
 8023dc6:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
}
 8023dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8023dce:	2214      	movs	r2, #20
 8023dd0:	f7f9 fe56 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8023dd4:	b204      	sxth	r4, r0
        lv_coord_t h = lv_obj_get_content_height(cont);
 8023dd6:	4630      	mov	r0, r6
 8023dd8:	f7f8 fd4e 	bl	801c878 <lv_obj_get_content_height>
        lv_obj_scroll_to_y(cont, id * (gap + h), anim_en);
 8023ddc:	463a      	mov	r2, r7
 8023dde:	1821      	adds	r1, r4, r0
 8023de0:	4630      	mov	r0, r6
 8023de2:	fb11 f108 	smulbb	r1, r1, r8
 8023de6:	b209      	sxth	r1, r1
 8023de8:	f7e2 f892 	bl	8005f10 <lv_obj_scroll_to_y>
 8023dec:	e7e3      	b.n	8023db6 <lv_tabview_set_act+0x6c>

08023dee <cont_scroll_end_event_cb>:
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
}

static void cont_scroll_end_event_cb(lv_event_t * e)
{
 8023dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023df0:	4604      	mov	r4, r0
    lv_obj_t * cont = lv_event_get_target(e);
 8023df2:	f7f7 f9fe 	bl	801b1f2 <lv_event_get_target>
 8023df6:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 8023df8:	4620      	mov	r0, r4
 8023dfa:	f7f7 f9fe 	bl	801b1fa <lv_event_get_code>
 8023dfe:	4606      	mov	r6, r0

    lv_obj_t * tv = lv_obj_get_parent(cont);
 8023e00:	4628      	mov	r0, r5
 8023e02:	f7fa f9c1 	bl	801e188 <lv_obj_get_parent>
    lv_tabview_t * tv_obj = (lv_tabview_t *)tv;
    if(code == LV_EVENT_LAYOUT_CHANGED) {
 8023e06:	2e2b      	cmp	r6, #43	; 0x2b
    lv_obj_t * tv = lv_obj_get_parent(cont);
 8023e08:	4604      	mov	r4, r0
    if(code == LV_EVENT_LAYOUT_CHANGED) {
 8023e0a:	d106      	bne.n	8023e1a <cont_scroll_end_event_cb+0x2c>
        lv_tabview_set_act(tv, lv_tabview_get_tab_act(tv), LV_ANIM_OFF);
 8023e0c:	2200      	movs	r2, #0
 8023e0e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
        if(t != lv_tabview_get_tab_act(tv)) new_tab = true;
        lv_tabview_set_act(tv, t, LV_ANIM_ON);

        if(new_tab) lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
    }
}
 8023e10:	b002      	add	sp, #8
 8023e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_tabview_set_act(tv, lv_tabview_get_tab_act(tv), LV_ANIM_OFF);
 8023e16:	f7ff bf98 	b.w	8023d4a <lv_tabview_set_act>
    else if(code == LV_EVENT_SCROLL_END) {
 8023e1a:	2e0a      	cmp	r6, #10
 8023e1c:	d12d      	bne.n	8023e7a <cont_scroll_end_event_cb+0x8c>
        lv_indev_t * indev = lv_indev_get_act();
 8023e1e:	f7e0 fcc3 	bl	80047a8 <lv_indev_get_act>
        if(indev && indev->proc.state == LV_INDEV_STATE_PRESSED) {
 8023e22:	b110      	cbz	r0, 8023e2a <cont_scroll_end_event_cb+0x3c>
 8023e24:	7903      	ldrb	r3, [r0, #4]
 8023e26:	2b01      	cmp	r3, #1
 8023e28:	d027      	beq.n	8023e7a <cont_scroll_end_event_cb+0x8c>
        lv_obj_get_scroll_end(cont, &p);
 8023e2a:	4628      	mov	r0, r5
 8023e2c:	a901      	add	r1, sp, #4
 8023e2e:	f7e1 ffa9 	bl	8005d84 <lv_obj_get_scroll_end>
        if((tv_obj->tab_pos & LV_DIR_VER) != 0) {
 8023e32:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
            lv_coord_t w = lv_obj_get_content_width(cont);
 8023e36:	4628      	mov	r0, r5
        if((tv_obj->tab_pos & LV_DIR_VER) != 0) {
 8023e38:	f013 0f0c 	tst.w	r3, #12
 8023e3c:	d024      	beq.n	8023e88 <cont_scroll_end_event_cb+0x9a>
            lv_coord_t w = lv_obj_get_content_width(cont);
 8023e3e:	f7f8 fd05 	bl	801c84c <lv_obj_get_content_width>
 8023e42:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8023e44:	2100      	movs	r1, #0
 8023e46:	2216      	movs	r2, #22
 8023e48:	4620      	mov	r0, r4
 8023e4a:	f7f9 fe19 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8023e4e:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8023e52:	b2c0      	uxtb	r0, r0
 8023e54:	0feb      	lsrs	r3, r5, #31
            if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w / 2) / w;
 8023e56:	2801      	cmp	r0, #1
 8023e58:	442b      	add	r3, r5
 8023e5a:	f343 034f 	sbfx	r3, r3, #1, #16
 8023e5e:	d10e      	bne.n	8023e7e <cont_scroll_end_event_cb+0x90>
 8023e60:	1a5b      	subs	r3, r3, r1
 8023e62:	fb93 f0f5 	sdiv	r0, r3, r5
 8023e66:	b201      	sxth	r1, r0
        if(t < 0) t = 0;
 8023e68:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        if(t != lv_tabview_get_tab_act(tv)) new_tab = true;
 8023e6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 8023e6e:	2201      	movs	r2, #1
 8023e70:	4620      	mov	r0, r4
        if(t != lv_tabview_get_tab_act(tv)) new_tab = true;
 8023e72:	4299      	cmp	r1, r3
 8023e74:	d114      	bne.n	8023ea0 <cont_scroll_end_event_cb+0xb2>
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 8023e76:	f7ff ff68 	bl	8023d4a <lv_tabview_set_act>
}
 8023e7a:	b002      	add	sp, #8
 8023e7c:	bd70      	pop	{r4, r5, r6, pc}
            else t = (p.x + w / 2) / w;
 8023e7e:	4419      	add	r1, r3
 8023e80:	fb91 f1f5 	sdiv	r1, r1, r5
            t = (p.y + h / 2) / h;
 8023e84:	b209      	sxth	r1, r1
 8023e86:	e7ef      	b.n	8023e68 <cont_scroll_end_event_cb+0x7a>
            lv_coord_t h = lv_obj_get_content_height(cont);
 8023e88:	f7f8 fcf6 	bl	801c878 <lv_obj_get_content_height>
            t = (p.y + h / 2) / h;
 8023e8c:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 8023e90:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8023e94:	f343 034f 	sbfx	r3, r3, #1, #16
 8023e98:	4419      	add	r1, r3
 8023e9a:	fb91 f1f0 	sdiv	r1, r1, r0
 8023e9e:	e7f1      	b.n	8023e84 <cont_scroll_end_event_cb+0x96>
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 8023ea0:	f7ff ff53 	bl	8023d4a <lv_tabview_set_act>
        if(new_tab) lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 8023ea4:	2200      	movs	r2, #0
 8023ea6:	211c      	movs	r1, #28
 8023ea8:	4620      	mov	r0, r4
 8023eaa:	f7e0 fc17 	bl	80046dc <lv_event_send>
 8023eae:	e7e4      	b.n	8023e7a <cont_scroll_end_event_cb+0x8c>

08023eb0 <btns_value_changed_event_cb>:
{
 8023eb0:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * btns = lv_event_get_target(e);
 8023eb2:	f7f7 f99e 	bl	801b1f2 <lv_event_get_target>
 8023eb6:	4605      	mov	r5, r0
    lv_obj_t * tv = lv_obj_get_parent(btns);
 8023eb8:	f7fa f966 	bl	801e188 <lv_obj_get_parent>
 8023ebc:	4604      	mov	r4, r0
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
 8023ebe:	4628      	mov	r0, r5
 8023ec0:	f002 faf6 	bl	80264b0 <lv_btnmatrix_get_selected_btn>
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 8023ec4:	2201      	movs	r2, #1
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
 8023ec6:	4601      	mov	r1, r0
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 8023ec8:	4620      	mov	r0, r4
}
 8023eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 8023ece:	f7ff bf3c 	b.w	8023d4a <lv_tabview_set_act>

08023ed2 <tileview_event_cb>:

static void tileview_event_cb(lv_event_t * e)
{
 8023ed2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023ed6:	4604      	mov	r4, r0
    lv_event_code_t code = lv_event_get_code(e);
 8023ed8:	f7f7 f98f 	bl	801b1fa <lv_event_get_code>
 8023edc:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8023ede:	4620      	mov	r0, r4
 8023ee0:	f7f7 f987 	bl	801b1f2 <lv_event_get_target>
    lv_tileview_t * tv = (lv_tileview_t *) obj;

    if(code == LV_EVENT_SCROLL_END) {
 8023ee4:	2d0a      	cmp	r5, #10
    lv_obj_t * obj = lv_event_get_target(e);
 8023ee6:	4604      	mov	r4, r0
    if(code == LV_EVENT_SCROLL_END) {
 8023ee8:	d14d      	bne.n	8023f86 <tileview_event_cb+0xb4>
        lv_indev_t * indev = lv_indev_get_act();
 8023eea:	f7e0 fc5d 	bl	80047a8 <lv_indev_get_act>
        if(indev && indev->proc.state == LV_INDEV_STATE_PRESSED) {
 8023eee:	b110      	cbz	r0, 8023ef6 <tileview_event_cb+0x24>
 8023ef0:	7903      	ldrb	r3, [r0, #4]
 8023ef2:	2b01      	cmp	r3, #1
 8023ef4:	d047      	beq.n	8023f86 <tileview_event_cb+0xb4>
            return;
        }

        lv_coord_t w = lv_obj_get_content_width(obj);
 8023ef6:	4620      	mov	r0, r4
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
        lv_coord_t ty = ((top + (h / 2)) / h) * h;

        lv_dir_t dir = LV_DIR_ALL;
        uint32_t i;
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8023ef8:	f04f 0800 	mov.w	r8, #0
        lv_coord_t w = lv_obj_get_content_width(obj);
 8023efc:	f7f8 fca6 	bl	801c84c <lv_obj_get_content_width>
 8023f00:	4606      	mov	r6, r0
        lv_coord_t h = lv_obj_get_content_height(obj);
 8023f02:	4620      	mov	r0, r4
 8023f04:	f7f8 fcb8 	bl	801c878 <lv_obj_get_content_height>
        lv_obj_get_scroll_end(obj, &scroll_end);
 8023f08:	a901      	add	r1, sp, #4
        lv_coord_t h = lv_obj_get_content_height(obj);
 8023f0a:	4607      	mov	r7, r0
        lv_obj_get_scroll_end(obj, &scroll_end);
 8023f0c:	4620      	mov	r0, r4
 8023f0e:	f7e1 ff39 	bl	8005d84 <lv_obj_get_scroll_end>
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8023f12:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8023f16:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 8023f1a:	f343 034f 	sbfx	r3, r3, #1, #16
 8023f1e:	441d      	add	r5, r3
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 8023f20:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8023f24:	fb95 f5f6 	sdiv	r5, r5, r6
 8023f28:	fb15 f506 	smulbb	r5, r5, r6
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 8023f2c:	f343 034f 	sbfx	r3, r3, #1, #16
 8023f30:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8023f34:	b22d      	sxth	r5, r5
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 8023f36:	441e      	add	r6, r3
 8023f38:	fb96 f6f7 	sdiv	r6, r6, r7
 8023f3c:	fb16 f607 	smulbb	r6, r6, r7
 8023f40:	b236      	sxth	r6, r6
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8023f42:	4620      	mov	r0, r4
 8023f44:	f7fa f932 	bl	801e1ac <lv_obj_get_child_cnt>
 8023f48:	4540      	cmp	r0, r8
 8023f4a:	d801      	bhi.n	8023f50 <tileview_event_cb+0x7e>
        lv_dir_t dir = LV_DIR_ALL;
 8023f4c:	250f      	movs	r5, #15
 8023f4e:	e016      	b.n	8023f7e <tileview_event_cb+0xac>
            lv_obj_t * tile_obj = lv_obj_get_child(obj, i);
 8023f50:	4641      	mov	r1, r8
 8023f52:	4620      	mov	r0, r4
 8023f54:	f7fa f91b 	bl	801e18e <lv_obj_get_child>
 8023f58:	4607      	mov	r7, r0
            lv_coord_t x = lv_obj_get_x(tile_obj);
 8023f5a:	f7f8 fc28 	bl	801c7ae <lv_obj_get_x>
 8023f5e:	4681      	mov	r9, r0
            lv_coord_t y = lv_obj_get_y(tile_obj);
 8023f60:	4638      	mov	r0, r7
 8023f62:	f7f8 fc40 	bl	801c7e6 <lv_obj_get_y>
            if(x == tx && y == ty) {
 8023f66:	454d      	cmp	r5, r9
 8023f68:	d110      	bne.n	8023f8c <tileview_event_cb+0xba>
 8023f6a:	4286      	cmp	r6, r0
 8023f6c:	d10e      	bne.n	8023f8c <tileview_event_cb+0xba>
                lv_tileview_tile_t * tile = (lv_tileview_tile_t *)tile_obj;
                tv->tile_act = (lv_obj_t *)tile;
 8023f6e:	6267      	str	r7, [r4, #36]	; 0x24
                dir = tile->dir;
                lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8023f70:	2200      	movs	r2, #0
 8023f72:	211c      	movs	r1, #28
 8023f74:	4620      	mov	r0, r4
                dir = tile->dir;
 8023f76:	f897 5024 	ldrb.w	r5, [r7, #36]	; 0x24
                lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8023f7a:	f7e0 fbaf 	bl	80046dc <lv_event_send>
                break;
            }
        }
        lv_obj_set_scroll_dir(obj, dir);
 8023f7e:	4629      	mov	r1, r5
 8023f80:	4620      	mov	r0, r4
 8023f82:	f7f8 ffa9 	bl	801ced8 <lv_obj_set_scroll_dir>
    }
}
 8023f86:	b003      	add	sp, #12
 8023f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8023f8c:	f108 0801 	add.w	r8, r8, #1
 8023f90:	e7d7      	b.n	8023f42 <tileview_event_cb+0x70>

08023f92 <lv_font_get_glyph_bitmap>:
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    LV_ASSERT_NULL(font_p);
 8023f92:	b900      	cbnz	r0, 8023f96 <lv_font_get_glyph_bitmap+0x4>
 8023f94:	e7fe      	b.n	8023f94 <lv_font_get_glyph_bitmap+0x2>
    return font_p->get_glyph_bitmap(font_p, letter);
 8023f96:	6843      	ldr	r3, [r0, #4]
 8023f98:	4718      	bx	r3

08023f9a <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 8023f9a:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8023f9e:	460d      	mov	r5, r1
 8023fa0:	4692      	mov	sl, r2
 8023fa2:	4699      	mov	r9, r3

    LV_ASSERT_NULL(font_p);
 8023fa4:	4607      	mov	r7, r0
 8023fa6:	b900      	cbnz	r0, 8023faa <lv_font_get_glyph_dsc+0x10>
 8023fa8:	e7fe      	b.n	8023fa8 <lv_font_get_glyph_dsc+0xe>
    LV_ASSERT_NULL(dsc_out);
 8023faa:	b1f9      	cbz	r1, 8023fec <lv_font_get_glyph_dsc+0x52>
    const lv_font_t * placeholder_font = NULL;
#endif

    const lv_font_t * f = font_p;

    dsc_out->resolved_font = NULL;
 8023fac:	2400      	movs	r4, #0
 8023fae:	4606      	mov	r6, r0
 8023fb0:	600c      	str	r4, [r1, #0]

    while(f) {
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 8023fb2:	464b      	mov	r3, r9
 8023fb4:	4652      	mov	r2, sl
 8023fb6:	4629      	mov	r1, r5
 8023fb8:	4630      	mov	r0, r6
 8023fba:	f8d6 c000 	ldr.w	ip, [r6]
 8023fbe:	47e0      	blx	ip
        if(found) {
 8023fc0:	b128      	cbz	r0, 8023fce <lv_font_get_glyph_dsc+0x34>
            if(!dsc_out->is_placeholder) {
 8023fc2:	7bab      	ldrb	r3, [r5, #14]
 8023fc4:	06db      	lsls	r3, r3, #27
 8023fc6:	d50d      	bpl.n	8023fe4 <lv_font_get_glyph_dsc+0x4a>
                dsc_out->resolved_font = f;
                return true;
            }
#if LV_USE_FONT_PLACEHOLDER
            else if(placeholder_font == NULL) {
 8023fc8:	2c00      	cmp	r4, #0
 8023fca:	bf08      	it	eq
 8023fcc:	4634      	moveq	r4, r6
                placeholder_font = f;
            }
#endif
        }
        f = f->fallback;
 8023fce:	6976      	ldr	r6, [r6, #20]
    while(f) {
 8023fd0:	2e00      	cmp	r6, #0
 8023fd2:	d1ee      	bne.n	8023fb2 <lv_font_get_glyph_dsc+0x18>
    }

#if LV_USE_FONT_PLACEHOLDER
    if(placeholder_font != NULL) {
 8023fd4:	b15c      	cbz	r4, 8023fee <lv_font_get_glyph_dsc+0x54>
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter, letter_next);
 8023fd6:	6826      	ldr	r6, [r4, #0]
 8023fd8:	464b      	mov	r3, r9
 8023fda:	4652      	mov	r2, sl
 8023fdc:	4629      	mov	r1, r5
 8023fde:	4620      	mov	r0, r4
 8023fe0:	47b0      	blx	r6
        dsc_out->resolved_font = placeholder_font;
        return true;
 8023fe2:	4626      	mov	r6, r4
                return true;
 8023fe4:	2001      	movs	r0, #1
        dsc_out->resolved_font = placeholder_font;
 8023fe6:	602e      	str	r6, [r5, #0]
    dsc_out->ofs_y = 0;
    dsc_out->bpp   = 1;
    dsc_out->is_placeholder = true;

    return false;
}
 8023fe8:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}
    LV_ASSERT_NULL(dsc_out);
 8023fec:	e7fe      	b.n	8023fec <lv_font_get_glyph_dsc+0x52>
    if(letter < 0x20 ||
 8023fee:	f1ba 0f1f 	cmp.w	sl, #31
 8023ff2:	d91e      	bls.n	8024032 <lv_font_get_glyph_dsc+0x98>
 8023ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8023ff8:	459a      	cmp	sl, r3
 8023ffa:	d01a      	beq.n	8024032 <lv_font_get_glyph_dsc+0x98>
       letter == 0xf8ff || /*LV_SYMBOL_DUMMY*/
 8023ffc:	f242 030c 	movw	r3, #8204	; 0x200c
 8024000:	459a      	cmp	sl, r3
 8024002:	d016      	beq.n	8024032 <lv_font_get_glyph_dsc+0x98>
        dsc_out->box_w = font_p->line_height / 2;
 8024004:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
 8024008:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 802400c:	f3c4 044f 	ubfx	r4, r4, #1, #16
        dsc_out->adv_w = dsc_out->box_w + 2;
 8024010:	1ca3      	adds	r3, r4, #2
 8024012:	b29b      	uxth	r3, r3
    dsc_out->resolved_font = NULL;
 8024014:	2000      	movs	r0, #0
        dsc_out->box_w = 0;
 8024016:	80ec      	strh	r4, [r5, #6]
        dsc_out->adv_w = 0;
 8024018:	80ab      	strh	r3, [r5, #4]
    dsc_out->resolved_font = NULL;
 802401a:	6028      	str	r0, [r5, #0]
    dsc_out->box_h = font_p->line_height;
 802401c:	893b      	ldrh	r3, [r7, #8]
    dsc_out->ofs_x = 0;
 802401e:	8168      	strh	r0, [r5, #10]
    dsc_out->box_h = font_p->line_height;
 8024020:	812b      	strh	r3, [r5, #8]
    dsc_out->bpp   = 1;
 8024022:	7bab      	ldrb	r3, [r5, #14]
    dsc_out->ofs_y = 0;
 8024024:	81a8      	strh	r0, [r5, #12]
    dsc_out->bpp   = 1;
 8024026:	f023 031f 	bic.w	r3, r3, #31
 802402a:	f043 0311 	orr.w	r3, r3, #17
 802402e:	73ab      	strb	r3, [r5, #14]
    return false;
 8024030:	e7da      	b.n	8023fe8 <lv_font_get_glyph_dsc+0x4e>
 8024032:	4623      	mov	r3, r4
 8024034:	e7ee      	b.n	8024014 <lv_font_get_glyph_dsc+0x7a>

08024036 <lv_font_get_glyph_width>:
 * @param letter a UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 8024036:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024038:	4613      	mov	r3, r2
    LV_ASSERT_NULL(font);
 802403a:	b900      	cbnz	r0, 802403e <lv_font_get_glyph_width+0x8>
 802403c:	e7fe      	b.n	802403c <lv_font_get_glyph_width+0x6>
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 802403e:	460a      	mov	r2, r1
 8024040:	4669      	mov	r1, sp
 8024042:	f7ff ffaa 	bl	8023f9a <lv_font_get_glyph_dsc>
    return g.adv_w;
}
 8024046:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 802404a:	b005      	add	sp, #20
 802404c:	f85d fb04 	ldr.w	pc, [sp], #4

08024050 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8024050:	7803      	ldrb	r3, [r0, #0]
 8024052:	780a      	ldrb	r2, [r1, #0]
 8024054:	4293      	cmp	r3, r2
 8024056:	bf11      	iteee	ne
 8024058:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 802405a:	784b      	ldrbeq	r3, [r1, #1]
 802405c:	7840      	ldrbeq	r0, [r0, #1]
 802405e:	1ac0      	subeq	r0, r0, r3

}
 8024060:	4770      	bx	lr

08024062 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8024062:	8803      	ldrh	r3, [r0, #0]
 8024064:	880a      	ldrh	r2, [r1, #0]
 8024066:	4293      	cmp	r3, r2
 8024068:	bf11      	iteee	ne
 802406a:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 802406c:	884b      	ldrheq	r3, [r1, #2]
 802406e:	8840      	ldrheq	r0, [r0, #2]
 8024070:	1ac0      	subeq	r0, r0, r3
}
 8024072:	4770      	bx	lr

08024074 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 8024074:	8800      	ldrh	r0, [r0, #0]
 8024076:	880b      	ldrh	r3, [r1, #0]
}
 8024078:	1ac0      	subs	r0, r0, r3
 802407a:	4770      	bx	lr

0802407c <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
 802407c:	2909      	cmp	r1, #9
{
 802407e:	b510      	push	{r4, lr}
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8024080:	bf08      	it	eq
 8024082:	2120      	moveq	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8024084:	6904      	ldr	r4, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8024086:	f7ed fe3b 	bl	8011d00 <get_glyph_dsc_id>
    if(!gid) return NULL;
 802408a:	b158      	cbz	r0, 80240a4 <lv_font_get_bitmap_fmt_txt+0x28>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 802408c:	7ce3      	ldrb	r3, [r4, #19]
 802408e:	2b3f      	cmp	r3, #63	; 0x3f
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8024090:	bf97      	itett	ls
 8024092:	6863      	ldrls	r3, [r4, #4]
    if(!gid) return NULL;
 8024094:	2000      	movhi	r0, #0
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8024096:	f853 3030 	ldrls.w	r3, [r3, r0, lsl #3]
 802409a:	6820      	ldrls	r0, [r4, #0]
 802409c:	bf9c      	itt	ls
 802409e:	f3c3 0313 	ubfxls	r3, r3, #0, #20
 80240a2:	18c0      	addls	r0, r0, r3
}
 80240a4:	bd10      	pop	{r4, pc}

080240a6 <_lv_font_clean_up_fmt_txt>:
}
 80240a6:	4770      	bx	lr

080240a8 <lv_disp_draw_buf_init>:
{
 80240a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80240aa:	4604      	mov	r4, r0
 80240ac:	460d      	mov	r5, r1
 80240ae:	4617      	mov	r7, r2
 80240b0:	461e      	mov	r6, r3
    memset(dst, 0x00, len);
 80240b2:	221c      	movs	r2, #28
 80240b4:	2100      	movs	r1, #0
 80240b6:	f7f6 fb33 	bl	801a720 <memset>
    draw_buf->buf2    = buf2;
 80240ba:	e9c4 5700 	strd	r5, r7, [r4]
    draw_buf->size    = size_in_px_cnt;
 80240be:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
 80240c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080240c4 <lv_disp_flush_ready>:
    disp_drv->draw_buf->flushing = 0;
 80240c4:	68c2      	ldr	r2, [r0, #12]
 80240c6:	2300      	movs	r3, #0
 80240c8:	6113      	str	r3, [r2, #16]
    disp_drv->draw_buf->flushing_last = 0;
 80240ca:	68c2      	ldr	r2, [r0, #12]
 80240cc:	6153      	str	r3, [r2, #20]
}
 80240ce:	4770      	bx	lr

080240d0 <lv_disp_flush_is_last>:
    return disp_drv->draw_buf->flushing_last;
 80240d0:	68c3      	ldr	r3, [r0, #12]
 80240d2:	6958      	ldr	r0, [r3, #20]
}
 80240d4:	3800      	subs	r0, #0
 80240d6:	bf18      	it	ne
 80240d8:	2001      	movne	r0, #1
 80240da:	4770      	bx	lr

080240dc <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
 80240dc:	6803      	ldr	r3, [r0, #0]
}
 80240de:	68d8      	ldr	r0, [r3, #12]
 80240e0:	4770      	bx	lr

080240e2 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 80240e2:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80240e4:	f004 f87a 	bl	80281dc <z_impl_k_uptime_ticks>
 80240e8:	220a      	movs	r2, #10
 80240ea:	2300      	movs	r3, #0
 80240ec:	f7dc f8ee 	bl	80002cc <__aeabi_uldivmod>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 80240f0:	bd08      	pop	{r3, pc}

080240f2 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 80240f2:	b510      	push	{r4, lr}
 80240f4:	4604      	mov	r4, r0
 80240f6:	f004 f871 	bl	80281dc <z_impl_k_uptime_ticks>
 80240fa:	220a      	movs	r2, #10
 80240fc:	2300      	movs	r3, #0
 80240fe:	f7dc f8e5 	bl	80002cc <__aeabi_uldivmod>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8024102:	1b00      	subs	r0, r0, r4
 8024104:	bd10      	pop	{r4, pc}

08024106 <lv_anim_path_linear>:
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8024106:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 802410a:	b513      	push	{r0, r1, r4, lr}
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 802410c:	9300      	str	r3, [sp, #0]
 802410e:	2300      	movs	r3, #0
{
 8024110:	4604      	mov	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8024112:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8024114:	4619      	mov	r1, r3
 8024116:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8024118:	f000 fd80 	bl	8024c1c <lv_map>
    new_value = step * (a->end_value - a->start_value);
 802411c:	6a22      	ldr	r2, [r4, #32]
 802411e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024120:	1a9b      	subs	r3, r3, r2
 8024122:	4358      	muls	r0, r3
}
 8024124:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8024128:	b002      	add	sp, #8
 802412a:	bd10      	pop	{r4, pc}

0802412c <lv_anim_speed_to_time>:
    uint32_t d    = LV_ABS(start - end);
 802412c:	1a89      	subs	r1, r1, r2
    uint32_t time = (d * 1000) / speed;
 802412e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
{
 8024132:	4603      	mov	r3, r0
    uint32_t d    = LV_ABS(start - end);
 8024134:	2900      	cmp	r1, #0
 8024136:	bfb8      	it	lt
 8024138:	4249      	neglt	r1, r1
    uint32_t time = (d * 1000) / speed;
 802413a:	4351      	muls	r1, r2
 802413c:	fbb1 f0f0 	udiv	r0, r1, r0
    if(time == 0) {
 8024140:	4299      	cmp	r1, r3
        time++;
 8024142:	bf38      	it	cc
 8024144:	3001      	addcc	r0, #1
}
 8024146:	4770      	bx	lr

08024148 <lv_anim_path_ease_out>:
{
 8024148:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 802414a:	2300      	movs	r3, #0
 802414c:	f44f 6580 	mov.w	r5, #1024	; 0x400
{
 8024150:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 8024152:	9500      	str	r5, [sp, #0]
 8024154:	4619      	mov	r1, r3
 8024156:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8024158:	6b00      	ldr	r0, [r0, #48]	; 0x30
 802415a:	f000 fd5f 	bl	8024c1c <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 802415e:	f240 33b6 	movw	r3, #950	; 0x3b6
 8024162:	f44f 7261 	mov.w	r2, #900	; 0x384
 8024166:	2100      	movs	r1, #0
 8024168:	9500      	str	r5, [sp, #0]
 802416a:	f000 fcd4 	bl	8024b16 <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 802416e:	6a22      	ldr	r2, [r4, #32]
 8024170:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024172:	1a9b      	subs	r3, r3, r2
 8024174:	4358      	muls	r0, r3
}
 8024176:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 802417a:	b003      	add	sp, #12
 802417c:	bd30      	pop	{r4, r5, pc}

0802417e <lv_anim_path_ease_in_out>:
{
 802417e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 8024180:	2300      	movs	r3, #0
 8024182:	f44f 6580 	mov.w	r5, #1024	; 0x400
{
 8024186:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 8024188:	9500      	str	r5, [sp, #0]
 802418a:	4619      	mov	r1, r3
 802418c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 802418e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8024190:	f000 fd44 	bl	8024c1c <lv_map>
    int32_t step = lv_bezier3(t, 0, 50, 952, LV_BEZIER_VAL_MAX);
 8024194:	f44f 736e 	mov.w	r3, #952	; 0x3b8
 8024198:	2232      	movs	r2, #50	; 0x32
 802419a:	2100      	movs	r1, #0
 802419c:	9500      	str	r5, [sp, #0]
 802419e:	f000 fcba 	bl	8024b16 <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 80241a2:	6a22      	ldr	r2, [r4, #32]
 80241a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80241a6:	1a9b      	subs	r3, r3, r2
 80241a8:	4358      	muls	r0, r3
}
 80241aa:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 80241ae:	b003      	add	sp, #12
 80241b0:	bd30      	pop	{r4, r5, pc}

080241b2 <lv_anim_path_step>:
    if(a->act_time >= a->time)
 80241b2:	e9d0 320b 	ldrd	r3, r2, [r0, #44]	; 0x2c
 80241b6:	429a      	cmp	r2, r3
        return a->end_value;
 80241b8:	bfac      	ite	ge
 80241ba:	6a80      	ldrge	r0, [r0, #40]	; 0x28
        return a->start_value;
 80241bc:	6a00      	ldrlt	r0, [r0, #32]
}
 80241be:	4770      	bx	lr

080241c0 <lv_point_within_circle.isra.0>:

/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
 80241c0:	b530      	push	{r4, r5, lr}
{
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80241c2:	f9b0 5000 	ldrsh.w	r5, [r0]
 80241c6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
    lv_coord_t py = p->y - cy;
 80241ca:	8840      	ldrh	r0, [r0, #2]
    lv_coord_t px = p->x - cx;
 80241cc:	1b49      	subs	r1, r1, r5
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80241ce:	1b5b      	subs	r3, r3, r5
    lv_coord_t py = p->y - cy;
 80241d0:	1a12      	subs	r2, r2, r0
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80241d2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80241d6:	105c      	asrs	r4, r3, #1
    lv_coord_t cx = area->x1 + r;
 80241d8:	f3c3 034f 	ubfx	r3, r3, #1, #16
    lv_coord_t py = p->y - cy;
 80241dc:	1ad2      	subs	r2, r2, r3
    lv_coord_t px = p->x - cx;
 80241de:	1ac9      	subs	r1, r1, r3

    uint32_t r_sqrd = r * r;
 80241e0:	4364      	muls	r4, r4
    uint32_t dist = (px * px) + (py * py);
 80241e2:	fb12 f202 	smulbb	r2, r2, r2
 80241e6:	fb11 2101 	smlabb	r1, r1, r1, r2

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
 80241ea:	428c      	cmp	r4, r1
 80241ec:	bf34      	ite	cc
 80241ee:	2000      	movcc	r0, #0
 80241f0:	2001      	movcs	r0, #1
 80241f2:	bd30      	pop	{r4, r5, pc}

080241f4 <lv_area_set>:
    area_p->x2 = x2;
 80241f4:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 80241f6:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 80241fa:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 80241fc:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 80241fe:	80c3      	strh	r3, [r0, #6]
}
 8024200:	4770      	bx	lr

08024202 <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
 8024202:	3901      	subs	r1, #1
 8024204:	8803      	ldrh	r3, [r0, #0]
 8024206:	4419      	add	r1, r3
 8024208:	8081      	strh	r1, [r0, #4]
}
 802420a:	4770      	bx	lr

0802420c <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 802420c:	3901      	subs	r1, #1
 802420e:	8843      	ldrh	r3, [r0, #2]
 8024210:	4419      	add	r1, r3
 8024212:	80c1      	strh	r1, [r0, #6]
}
 8024214:	4770      	bx	lr

08024216 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 8024216:	f9b0 3000 	ldrsh.w	r3, [r0]
 802421a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 802421e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8024222:	1ad2      	subs	r2, r2, r3
 8024224:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8024228:	1a58      	subs	r0, r3, r1
 802422a:	3001      	adds	r0, #1
}
 802422c:	fb02 0000 	mla	r0, r2, r0, r0
 8024230:	4770      	bx	lr

08024232 <lv_area_increase>:
    area->x1 -= w_extra;
 8024232:	b289      	uxth	r1, r1
 8024234:	8803      	ldrh	r3, [r0, #0]
    area->y1 -= h_extra;
 8024236:	b292      	uxth	r2, r2
    area->x1 -= w_extra;
 8024238:	1a5b      	subs	r3, r3, r1
 802423a:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 802423c:	8883      	ldrh	r3, [r0, #4]
 802423e:	4419      	add	r1, r3
    area->y1 -= h_extra;
 8024240:	8843      	ldrh	r3, [r0, #2]
 8024242:	1a9b      	subs	r3, r3, r2
    area->x2 += w_extra;
 8024244:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 8024246:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 8024248:	88c3      	ldrh	r3, [r0, #6]
 802424a:	441a      	add	r2, r3
 802424c:	80c2      	strh	r2, [r0, #6]
}
 802424e:	4770      	bx	lr

08024250 <lv_area_move>:
    area->x1 += x_ofs;
 8024250:	8803      	ldrh	r3, [r0, #0]
 8024252:	fa13 f381 	uxtah	r3, r3, r1
 8024256:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
 8024258:	8883      	ldrh	r3, [r0, #4]
 802425a:	fa13 f181 	uxtah	r1, r3, r1
    area->y1 += y_ofs;
 802425e:	8843      	ldrh	r3, [r0, #2]
 8024260:	fa13 f382 	uxtah	r3, r3, r2
    area->x2 += x_ofs;
 8024264:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
 8024266:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
 8024268:	88c3      	ldrh	r3, [r0, #6]
 802426a:	fa13 f282 	uxtah	r2, r3, r2
 802426e:	80c2      	strh	r2, [r0, #6]
}
 8024270:	4770      	bx	lr

08024272 <_lv_area_intersect>:
{
 8024272:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8024274:	f9b2 5000 	ldrsh.w	r5, [r2]
{
 8024278:	4604      	mov	r4, r0
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 802427a:	f9b1 3000 	ldrsh.w	r3, [r1]
 802427e:	429d      	cmp	r5, r3
 8024280:	bfb8      	it	lt
 8024282:	461d      	movlt	r5, r3
 8024284:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8024286:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 802428a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 802428e:	4283      	cmp	r3, r0
 8024290:	bfb8      	it	lt
 8024292:	4603      	movlt	r3, r0
 8024294:	8063      	strh	r3, [r4, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8024296:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 802429a:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 802429e:	42b0      	cmp	r0, r6
 80242a0:	bfa8      	it	ge
 80242a2:	4630      	movge	r0, r6
 80242a4:	80a0      	strh	r0, [r4, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 80242a6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80242aa:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 80242ae:	428a      	cmp	r2, r1
 80242b0:	bfa8      	it	ge
 80242b2:	460a      	movge	r2, r1
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 80242b4:	4285      	cmp	r5, r0
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 80242b6:	80e2      	strh	r2, [r4, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 80242b8:	dc04      	bgt.n	80242c4 <_lv_area_intersect+0x52>
 80242ba:	4293      	cmp	r3, r2
 80242bc:	bfcc      	ite	gt
 80242be:	2000      	movgt	r0, #0
 80242c0:	2001      	movle	r0, #1
}
 80242c2:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 80242c4:	2000      	movs	r0, #0
 80242c6:	e7fc      	b.n	80242c2 <_lv_area_intersect+0x50>

080242c8 <_lv_area_join>:
{
 80242c8:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 80242ca:	f9b1 4000 	ldrsh.w	r4, [r1]
 80242ce:	f9b2 3000 	ldrsh.w	r3, [r2]
 80242d2:	42a3      	cmp	r3, r4
 80242d4:	bfa8      	it	ge
 80242d6:	4623      	movge	r3, r4
 80242d8:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 80242da:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80242de:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80242e2:	42a3      	cmp	r3, r4
 80242e4:	bfa8      	it	ge
 80242e6:	4623      	movge	r3, r4
 80242e8:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 80242ea:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80242ee:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80242f2:	42a3      	cmp	r3, r4
 80242f4:	bfb8      	it	lt
 80242f6:	4623      	movlt	r3, r4
 80242f8:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 80242fa:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 80242fe:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8024302:	4293      	cmp	r3, r2
 8024304:	bfb8      	it	lt
 8024306:	4613      	movlt	r3, r2
 8024308:	80c3      	strh	r3, [r0, #6]
}
 802430a:	bd10      	pop	{r4, pc}

0802430c <_lv_area_is_point_on>:
{
 802430c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8024310:	f9b1 9000 	ldrsh.w	r9, [r1]
{
 8024314:	b087      	sub	sp, #28
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8024316:	f9b0 4000 	ldrsh.w	r4, [r0]
{
 802431a:	4688      	mov	r8, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 802431c:	45a1      	cmp	r9, r4
 802431e:	f2c0 8088 	blt.w	8024432 <_lv_area_is_point_on+0x126>
 8024322:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8024326:	4599      	cmp	r9, r3
 8024328:	9301      	str	r3, [sp, #4]
 802432a:	f300 8082 	bgt.w	8024432 <_lv_area_is_point_on+0x126>
 802432e:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
 8024332:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8024336:	45da      	cmp	sl, fp
 8024338:	db7b      	blt.n	8024432 <_lv_area_is_point_on+0x126>
 802433a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802433e:	459a      	cmp	sl, r3
 8024340:	dc77      	bgt.n	8024432 <_lv_area_is_point_on+0x126>
    if(radius <= 0) {
 8024342:	2a00      	cmp	r2, #0
 8024344:	dc03      	bgt.n	802434e <_lv_area_is_point_on+0x42>
        return true;
 8024346:	2001      	movs	r0, #1
}
 8024348:	b007      	add	sp, #28
 802434a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802434e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8024352:	b2a7      	uxth	r7, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8024354:	b29e      	uxth	r6, r3
    corner_area.x1 = a_p->x1;
 8024356:	f8ad 4010 	strh.w	r4, [sp, #16]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802435a:	9002      	str	r0, [sp, #8]
 802435c:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802435e:	fa1f fc8b 	uxth.w	ip, fp
 8024362:	9303      	str	r3, [sp, #12]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8024364:	1bc0      	subs	r0, r0, r7
    corner_area.y1 = a_p->y1;
 8024366:	f8ad b012 	strh.w	fp, [sp, #18]
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 802436a:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 802436e:	fa04 f080 	sxtah	r0, r4, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8024372:	1c74      	adds	r4, r6, #1
 8024374:	eba4 040c 	sub.w	r4, r4, ip
    lv_coord_t max_radius = LV_MIN(w, h);
 8024378:	1040      	asrs	r0, r0, #1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 802437a:	f3c4 35c0 	ubfx	r5, r4, #15, #1
 802437e:	fa05 f584 	sxtah	r5, r5, r4
    lv_coord_t max_radius = LV_MIN(w, h);
 8024382:	106d      	asrs	r5, r5, #1
    corner_area.x2 = a_p->x1 + radius;
 8024384:	42a8      	cmp	r0, r5
 8024386:	bfa8      	it	ge
 8024388:	4628      	movge	r0, r5
 802438a:	4290      	cmp	r0, r2
 802438c:	bfa8      	it	ge
 802438e:	4610      	movge	r0, r2
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8024390:	2200      	movs	r2, #0
    corner_area.y2 = a_p->y1 + radius;
 8024392:	fa1c f480 	uxtah	r4, ip, r0
    corner_area.x2 = a_p->x1 + radius;
 8024396:	fa17 f780 	uxtah	r7, r7, r0
 802439a:	b285      	uxth	r5, r0
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 802439c:	a804      	add	r0, sp, #16
    corner_area.x2 = a_p->x1 + radius;
 802439e:	b2bf      	uxth	r7, r7
    corner_area.y2 = a_p->y1 + radius;
 80243a0:	b224      	sxth	r4, r4
    corner_area.x2 = a_p->x1 + radius;
 80243a2:	f8ad 7014 	strh.w	r7, [sp, #20]
    corner_area.y2 = a_p->y1 + radius;
 80243a6:	f8ad 4016 	strh.w	r4, [sp, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80243aa:	f7ff ffaf 	bl	802430c <_lv_area_is_point_on>
 80243ae:	9b03      	ldr	r3, [sp, #12]
 80243b0:	4602      	mov	r2, r0
 80243b2:	b140      	cbz	r0, 80243c6 <_lv_area_is_point_on+0xba>
        corner_area.x2 += radius;
 80243b4:	443d      	add	r5, r7
 80243b6:	f8ad 5014 	strh.w	r5, [sp, #20]
        return lv_point_within_circle(&corner_area, p_p);
 80243ba:	4652      	mov	r2, sl
 80243bc:	4649      	mov	r1, r9
 80243be:	a804      	add	r0, sp, #16
 80243c0:	f7ff fefe 	bl	80241c0 <lv_point_within_circle.isra.0>
 80243c4:	e7c0      	b.n	8024348 <_lv_area_is_point_on+0x3c>
    corner_area.y1 = a_p->y2 - radius;
 80243c6:	1b76      	subs	r6, r6, r5
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80243c8:	4641      	mov	r1, r8
 80243ca:	a804      	add	r0, sp, #16
    corner_area.y2 = a_p->y2;
 80243cc:	f8ad 3016 	strh.w	r3, [sp, #22]
    corner_area.y1 = a_p->y2 - radius;
 80243d0:	b2b6      	uxth	r6, r6
 80243d2:	f8ad 6012 	strh.w	r6, [sp, #18]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80243d6:	f7ff ff99 	bl	802430c <_lv_area_is_point_on>
 80243da:	4602      	mov	r2, r0
 80243dc:	b130      	cbz	r0, 80243ec <_lv_area_is_point_on+0xe0>
        corner_area.x2 += radius;
 80243de:	442f      	add	r7, r5
        corner_area.y1 -= radius;
 80243e0:	1b75      	subs	r5, r6, r5
        corner_area.x2 += radius;
 80243e2:	f8ad 7014 	strh.w	r7, [sp, #20]
        corner_area.y1 -= radius;
 80243e6:	f8ad 5012 	strh.w	r5, [sp, #18]
        return lv_point_within_circle(&corner_area, p_p);
 80243ea:	e7e6      	b.n	80243ba <_lv_area_is_point_on+0xae>
    corner_area.x1 = a_p->x2 - radius;
 80243ec:	9b02      	ldr	r3, [sp, #8]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80243ee:	4641      	mov	r1, r8
 80243f0:	a804      	add	r0, sp, #16
    corner_area.x1 = a_p->x2 - radius;
 80243f2:	1b5f      	subs	r7, r3, r5
    corner_area.x2 = a_p->x2;
 80243f4:	9b01      	ldr	r3, [sp, #4]
    corner_area.x1 = a_p->x2 - radius;
 80243f6:	b2bf      	uxth	r7, r7
    corner_area.x2 = a_p->x2;
 80243f8:	f8ad 3014 	strh.w	r3, [sp, #20]
    corner_area.x1 = a_p->x2 - radius;
 80243fc:	f8ad 7010 	strh.w	r7, [sp, #16]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8024400:	f7ff ff84 	bl	802430c <_lv_area_is_point_on>
 8024404:	4602      	mov	r2, r0
 8024406:	b130      	cbz	r0, 8024416 <_lv_area_is_point_on+0x10a>
        corner_area.x1 -= radius;
 8024408:	1b7f      	subs	r7, r7, r5
        corner_area.y1 -= radius;
 802440a:	1b76      	subs	r6, r6, r5
        corner_area.x1 -= radius;
 802440c:	f8ad 7010 	strh.w	r7, [sp, #16]
        corner_area.y1 -= radius;
 8024410:	f8ad 6012 	strh.w	r6, [sp, #18]
        return lv_point_within_circle(&corner_area, p_p);
 8024414:	e7d1      	b.n	80243ba <_lv_area_is_point_on+0xae>
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8024416:	4641      	mov	r1, r8
 8024418:	a804      	add	r0, sp, #16
    corner_area.y1 = a_p->y1;
 802441a:	f8ad b012 	strh.w	fp, [sp, #18]
    corner_area.y2 = a_p->y1 + radius;
 802441e:	f8ad 4016 	strh.w	r4, [sp, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8024422:	f7ff ff73 	bl	802430c <_lv_area_is_point_on>
 8024426:	2800      	cmp	r0, #0
 8024428:	d08d      	beq.n	8024346 <_lv_area_is_point_on+0x3a>
        corner_area.x1 -= radius;
 802442a:	1b7f      	subs	r7, r7, r5
 802442c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8024430:	e7c3      	b.n	80243ba <_lv_area_is_point_on+0xae>
        return false;
 8024432:	2000      	movs	r0, #0
 8024434:	e788      	b.n	8024348 <_lv_area_is_point_on+0x3c>

08024436 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8024436:	f9b0 2000 	ldrsh.w	r2, [r0]
 802443a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 802443e:	429a      	cmp	r2, r3
 8024440:	dc14      	bgt.n	802446c <_lv_area_is_on+0x36>
 8024442:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8024446:	f9b1 3000 	ldrsh.w	r3, [r1]
 802444a:	429a      	cmp	r2, r3
 802444c:	db0e      	blt.n	802446c <_lv_area_is_on+0x36>
 802444e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8024452:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8024456:	429a      	cmp	r2, r3
 8024458:	dc08      	bgt.n	802446c <_lv_area_is_on+0x36>
 802445a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 802445e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8024462:	4298      	cmp	r0, r3
 8024464:	bfb4      	ite	lt
 8024466:	2000      	movlt	r0, #0
 8024468:	2001      	movge	r0, #1
 802446a:	4770      	bx	lr
        return false;
 802446c:	2000      	movs	r0, #0
}
 802446e:	4770      	bx	lr

08024470 <_lv_area_is_in>:
{
 8024470:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8024474:	f9b0 7000 	ldrsh.w	r7, [r0]
{
 8024478:	460c      	mov	r4, r1
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 802447a:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 802447e:	4615      	mov	r5, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8024480:	42bb      	cmp	r3, r7
 8024482:	dd03      	ble.n	802448c <_lv_area_is_in+0x1c>
    if(!is_in) return false;
 8024484:	2000      	movs	r0, #0
}
 8024486:	b002      	add	sp, #8
 8024488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 802448c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8024490:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8024494:	4299      	cmp	r1, r3
 8024496:	dcf5      	bgt.n	8024484 <_lv_area_is_in+0x14>
 8024498:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 802449c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80244a0:	42b1      	cmp	r1, r6
 80244a2:	dbef      	blt.n	8024484 <_lv_area_is_in+0x14>
       ain_p->y2 <= aholder_p->y2) {
 80244a4:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80244a8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80244ac:	4541      	cmp	r1, r8
 80244ae:	dbe9      	blt.n	8024484 <_lv_area_is_in+0x14>
    if(radius == 0) return true;
 80244b0:	b32a      	cbz	r2, 80244fe <_lv_area_is_in+0x8e>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80244b2:	a901      	add	r1, sp, #4
 80244b4:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 80244b6:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y1;
 80244ba:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80244be:	f7ff ff25 	bl	802430c <_lv_area_is_point_on>
 80244c2:	2800      	cmp	r0, #0
 80244c4:	d0de      	beq.n	8024484 <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80244c6:	462a      	mov	r2, r5
 80244c8:	a901      	add	r1, sp, #4
 80244ca:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 80244cc:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80244d0:	f7ff ff1c 	bl	802430c <_lv_area_is_point_on>
 80244d4:	2800      	cmp	r0, #0
 80244d6:	d0d5      	beq.n	8024484 <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80244d8:	462a      	mov	r2, r5
 80244da:	a901      	add	r1, sp, #4
 80244dc:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 80244de:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y2;
 80244e2:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80244e6:	f7ff ff11 	bl	802430c <_lv_area_is_point_on>
 80244ea:	2800      	cmp	r0, #0
 80244ec:	d0ca      	beq.n	8024484 <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80244ee:	462a      	mov	r2, r5
 80244f0:	a901      	add	r1, sp, #4
 80244f2:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 80244f4:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80244f8:	f7ff ff08 	bl	802430c <_lv_area_is_point_on>
 80244fc:	e7c3      	b.n	8024486 <_lv_area_is_in+0x16>
    if(radius == 0) return true;
 80244fe:	2001      	movs	r0, #1
 8024500:	e7c1      	b.n	8024486 <_lv_area_is_in+0x16>

08024502 <_lv_area_is_out>:
{
 8024502:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8024506:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
{
 802450a:	460c      	mov	r4, r1
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 802450c:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8024510:	4615      	mov	r5, r2
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8024512:	42b3      	cmp	r3, r6
 8024514:	dc3f      	bgt.n	8024596 <_lv_area_is_out+0x94>
 8024516:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 802451a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 802451e:	4543      	cmp	r3, r8
 8024520:	dc39      	bgt.n	8024596 <_lv_area_is_out+0x94>
 8024522:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024526:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 802452a:	42bb      	cmp	r3, r7
 802452c:	db33      	blt.n	8024596 <_lv_area_is_out+0x94>
       aout_p->y1 > aholder_p->y2) {
 802452e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8024532:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8024536:	4299      	cmp	r1, r3
 8024538:	db2d      	blt.n	8024596 <_lv_area_is_out+0x94>
    if(radius == 0) return false;
 802453a:	b91a      	cbnz	r2, 8024544 <_lv_area_is_out+0x42>
 802453c:	2000      	movs	r0, #0
}
 802453e:	b002      	add	sp, #8
 8024540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8024544:	a901      	add	r1, sp, #4
 8024546:	4620      	mov	r0, r4
    p.x = aout_p->x1;
 8024548:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = aout_p->y1;
 802454c:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8024550:	f7ff fedc 	bl	802430c <_lv_area_is_point_on>
 8024554:	2800      	cmp	r0, #0
 8024556:	d1f1      	bne.n	802453c <_lv_area_is_out+0x3a>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8024558:	462a      	mov	r2, r5
 802455a:	a901      	add	r1, sp, #4
 802455c:	4620      	mov	r0, r4
    p.x = aout_p->x2;
 802455e:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8024562:	f7ff fed3 	bl	802430c <_lv_area_is_point_on>
 8024566:	2800      	cmp	r0, #0
 8024568:	d1e8      	bne.n	802453c <_lv_area_is_out+0x3a>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 802456a:	462a      	mov	r2, r5
 802456c:	a901      	add	r1, sp, #4
 802456e:	4620      	mov	r0, r4
    p.x = aout_p->x1;
 8024570:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = aout_p->y2;
 8024574:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8024578:	f7ff fec8 	bl	802430c <_lv_area_is_point_on>
 802457c:	2800      	cmp	r0, #0
 802457e:	d1dd      	bne.n	802453c <_lv_area_is_out+0x3a>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8024580:	462a      	mov	r2, r5
 8024582:	a901      	add	r1, sp, #4
 8024584:	4620      	mov	r0, r4
    p.x = aout_p->x2;
 8024586:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 802458a:	f7ff febf 	bl	802430c <_lv_area_is_point_on>
 802458e:	f080 0001 	eor.w	r0, r0, #1
 8024592:	b2c0      	uxtb	r0, r0
 8024594:	e7d3      	b.n	802453e <_lv_area_is_out+0x3c>
        return true;
 8024596:	2001      	movs	r0, #1
 8024598:	e7d1      	b.n	802453e <_lv_area_is_out+0x3c>

0802459a <lv_color_mix>:
{
 802459a:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 802459c:	f3c1 1345 	ubfx	r3, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80245a0:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80245a4:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80245a8:	f000 071f 	and.w	r7, r0, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80245ac:	4373      	muls	r3, r6
 80245ae:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80245b2:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80245b6:	fb04 3302 	mla	r3, r4, r2, r3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80245ba:	f001 041f 	and.w	r4, r1, #31
 80245be:	4374      	muls	r4, r6
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80245c0:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80245c2:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80245c6:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80245c8:	3480      	adds	r4, #128	; 0x80
    return ret;
 80245ca:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80245ce:	436c      	muls	r4, r5
    return ret;
 80245d0:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 80245d4:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80245d8:	f3c1 23c4 	ubfx	r3, r1, #11, #5
 80245dc:	4373      	muls	r3, r6
 80245de:	fb00 3302 	mla	r3, r0, r2, r3
 80245e2:	3380      	adds	r3, #128	; 0x80
 80245e4:	436b      	muls	r3, r5
 80245e6:	0ddb      	lsrs	r3, r3, #23
}
 80245e8:	ea44 20c3 	orr.w	r0, r4, r3, lsl #11
 80245ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080245ee <lv_color_fill>:
    if(buf_int & 0x3) {
 80245ee:	0783      	lsls	r3, r0, #30
{
 80245f0:	b510      	push	{r4, lr}
 80245f2:	b28c      	uxth	r4, r1
        *buf = color;
 80245f4:	bf1c      	itt	ne
 80245f6:	f820 1b02 	strhne.w	r1, [r0], #2
        px_num--;
 80245fa:	f102 32ff 	addne.w	r2, r2, #4294967295
    uint32_t c32 = (uint32_t)color.full + ((uint32_t)color.full << 16);
 80245fe:	eb04 4104 	add.w	r1, r4, r4, lsl #16
    while(px_num > 16) {
 8024602:	2a10      	cmp	r2, #16
 8024604:	f100 0320 	add.w	r3, r0, #32
 8024608:	d804      	bhi.n	8024614 <lv_color_fill+0x26>
 802460a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    while(px_num) {
 802460e:	4290      	cmp	r0, r2
 8024610:	d10b      	bne.n	802462a <lv_color_fill+0x3c>
}
 8024612:	bd10      	pop	{r4, pc}
        px_num -= 16;
 8024614:	3a10      	subs	r2, #16
 8024616:	4618      	mov	r0, r3
        *buf32 = c32;
 8024618:	e943 1108 	strd	r1, r1, [r3, #-32]
        *buf32 = c32;
 802461c:	e943 1106 	strd	r1, r1, [r3, #-24]
        *buf32 = c32;
 8024620:	e943 1104 	strd	r1, r1, [r3, #-16]
        *buf32 = c32;
 8024624:	e943 1102 	strd	r1, r1, [r3, #-8]
        px_num -= 16;
 8024628:	e7eb      	b.n	8024602 <lv_color_fill+0x14>
        *buf = color;
 802462a:	f820 4b02 	strh.w	r4, [r0], #2
        px_num--;
 802462e:	e7ee      	b.n	802460e <lv_color_fill+0x20>

08024630 <lv_color_darken>:
{
 8024630:	460a      	mov	r2, r1
    return lv_color_mix(lv_color_black(), c, lvl);
 8024632:	4601      	mov	r1, r0
 8024634:	f04f 0000 	mov.w	r0, #0
 8024638:	f7ff bfaf 	b.w	802459a <lv_color_mix>

0802463c <lv_color_hsv_to_rgb>:
    s = (uint16_t)((uint16_t)s * 255) / 100;
 802463c:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8024640:	2364      	movs	r3, #100	; 0x64
    v = (uint16_t)((uint16_t)v * 255) / 100;
 8024642:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    s = (uint16_t)((uint16_t)s * 255) / 100;
 8024646:	b289      	uxth	r1, r1
    v = (uint16_t)((uint16_t)v * 255) / 100;
 8024648:	b292      	uxth	r2, r2
    s = (uint16_t)((uint16_t)s * 255) / 100;
 802464a:	fbb1 f1f3 	udiv	r1, r1, r3
    v = (uint16_t)((uint16_t)v * 255) / 100;
 802464e:	fbb2 f2f3 	udiv	r2, r2, r3
{
 8024652:	b570      	push	{r4, r5, r6, lr}
    if(s == 0) {
 8024654:	f011 06ff 	ands.w	r6, r1, #255	; 0xff
    v = (uint16_t)((uint16_t)v * 255) / 100;
 8024658:	b2d2      	uxtb	r2, r2
    if(s == 0) {
 802465a:	d107      	bne.n	802466c <lv_color_hsv_to_rgb+0x30>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 802465c:	08d0      	lsrs	r0, r2, #3
 802465e:	0892      	lsrs	r2, r2, #2
 8024660:	4603      	mov	r3, r0
 8024662:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
}
 8024666:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 802466a:	bd70      	pop	{r4, r5, r6, pc}
    h = (uint32_t)((uint32_t)h * 255) / 360;
 802466c:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 8024670:	f44f 73b4 	mov.w	r3, #360	; 0x168
    region    = h / 43;
 8024674:	212b      	movs	r1, #43	; 0x2b
    h = (uint32_t)((uint32_t)h * 255) / 360;
 8024676:	fbb0 f3f3 	udiv	r3, r0, r3
    region    = h / 43;
 802467a:	b29c      	uxth	r4, r3
    p = (v * (255 - s)) >> 8;
 802467c:	f1c6 00ff 	rsb	r0, r6, #255	; 0xff
    region    = h / 43;
 8024680:	fbb4 f4f1 	udiv	r4, r4, r1
    remainder = (h - (region * 43)) * 6;
 8024684:	f06f 012a 	mvn.w	r1, #42	; 0x2a
    region    = h / 43;
 8024688:	b2e4      	uxtb	r4, r4
    p = (v * (255 - s)) >> 8;
 802468a:	4350      	muls	r0, r2
    remainder = (h - (region * 43)) * 6;
 802468c:	fb01 3304 	mla	r3, r1, r4, r3
    p = (v * (255 - s)) >> 8;
 8024690:	f3c0 2007 	ubfx	r0, r0, #8, #8
    remainder = (h - (region * 43)) * 6;
 8024694:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024698:	005b      	lsls	r3, r3, #1
 802469a:	b2db      	uxtb	r3, r3
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 802469c:	fb16 f503 	smulbb	r5, r6, r3
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 80246a0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80246a4:	4373      	muls	r3, r6
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 80246a6:	122d      	asrs	r5, r5, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 80246a8:	121b      	asrs	r3, r3, #8
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 80246aa:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 80246ae:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 80246b2:	4355      	muls	r5, r2
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 80246b4:	4353      	muls	r3, r2
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 80246b6:	f3c5 2107 	ubfx	r1, r5, #8, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 80246ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
    switch(region) {
 80246be:	2c04      	cmp	r4, #4
 80246c0:	d819      	bhi.n	80246f6 <lv_color_hsv_to_rgb+0xba>
 80246c2:	e8df f004 	tbb	[pc, r4]
 80246c6:	0503      	.short	0x0503
 80246c8:	0f0c      	.short	0x0f0c
 80246ca:	13          	.byte	0x13
 80246cb:	00          	.byte	0x00
            r = v;
 80246cc:	4611      	mov	r1, r2
            g = q;
 80246ce:	461a      	mov	r2, r3
 80246d0:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 80246d4:	f3c2 0285 	ubfx	r2, r2, #2, #6
 80246d8:	f3c1 00c4 	ubfx	r0, r1, #3, #5
    return result;
 80246dc:	e7c1      	b.n	8024662 <lv_color_hsv_to_rgb+0x26>
            r = p;
 80246de:	4601      	mov	r1, r0
            b = q;
 80246e0:	4618      	mov	r0, r3
            break;
 80246e2:	e7f5      	b.n	80246d0 <lv_color_hsv_to_rgb+0x94>
            break;
 80246e4:	460b      	mov	r3, r1
            r = p;
 80246e6:	4601      	mov	r1, r0
            b = v;
 80246e8:	4610      	mov	r0, r2
 80246ea:	e7f0      	b.n	80246ce <lv_color_hsv_to_rgb+0x92>
            break;
 80246ec:	4611      	mov	r1, r2
            g = p;
 80246ee:	4602      	mov	r2, r0
            b = v;
 80246f0:	4608      	mov	r0, r1
            r = t;
 80246f2:	4619      	mov	r1, r3
            break;
 80246f4:	e7ec      	b.n	80246d0 <lv_color_hsv_to_rgb+0x94>
            break;
 80246f6:	460b      	mov	r3, r1
            r = v;
 80246f8:	4611      	mov	r1, r2
            g = p;
 80246fa:	4602      	mov	r2, r0
 80246fc:	e7f0      	b.n	80246e0 <lv_color_hsv_to_rgb+0xa4>

080246fe <lv_fs_close>:
{
 80246fe:	b538      	push	{r3, r4, r5, lr}
 8024700:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 8024702:	6840      	ldr	r0, [r0, #4]
 8024704:	b1b0      	cbz	r0, 8024734 <lv_fs_close+0x36>
    if(file_p->drv->close_cb == NULL) {
 8024706:	68c3      	ldr	r3, [r0, #12]
 8024708:	b1b3      	cbz	r3, 8024738 <lv_fs_close+0x3a>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 802470a:	6821      	ldr	r1, [r4, #0]
 802470c:	4798      	blx	r3
    if(file_p->drv->cache_size && file_p->cache) {
 802470e:	6863      	ldr	r3, [r4, #4]
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8024710:	4605      	mov	r5, r0
    if(file_p->drv->cache_size && file_p->cache) {
 8024712:	885b      	ldrh	r3, [r3, #2]
 8024714:	b143      	cbz	r3, 8024728 <lv_fs_close+0x2a>
 8024716:	68a3      	ldr	r3, [r4, #8]
 8024718:	b133      	cbz	r3, 8024728 <lv_fs_close+0x2a>
        if(file_p->cache->buffer) {
 802471a:	68d8      	ldr	r0, [r3, #12]
 802471c:	b108      	cbz	r0, 8024722 <lv_fs_close+0x24>
            lv_mem_free(file_p->cache->buffer);
 802471e:	f7ed ffe5 	bl	80126ec <lv_mem_free>
        lv_mem_free(file_p->cache);
 8024722:	68a0      	ldr	r0, [r4, #8]
 8024724:	f7ed ffe2 	bl	80126ec <lv_mem_free>
    file_p->file_d = NULL;
 8024728:	2300      	movs	r3, #0
    file_p->drv    = NULL;
 802472a:	e9c4 3300 	strd	r3, r3, [r4]
    file_p->cache  = NULL;
 802472e:	60a3      	str	r3, [r4, #8]
}
 8024730:	4628      	mov	r0, r5
 8024732:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 8024734:	250b      	movs	r5, #11
 8024736:	e7fb      	b.n	8024730 <lv_fs_close+0x32>
        return LV_FS_RES_NOT_IMP;
 8024738:	2509      	movs	r5, #9
 802473a:	e7f9      	b.n	8024730 <lv_fs_close+0x32>

0802473c <lv_fs_read>:
{
 802473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024740:	4604      	mov	r4, r0
 8024742:	b087      	sub	sp, #28
 8024744:	460e      	mov	r6, r1
 8024746:	4615      	mov	r5, r2
    if(br != NULL) *br = 0;
 8024748:	4699      	mov	r9, r3
 802474a:	b113      	cbz	r3, 8024752 <lv_fs_read+0x16>
 802474c:	2300      	movs	r3, #0
 802474e:	f8c9 3000 	str.w	r3, [r9]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8024752:	6860      	ldr	r0, [r4, #4]
 8024754:	2800      	cmp	r0, #0
 8024756:	f000 80ad 	beq.w	80248b4 <lv_fs_read+0x178>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 802475a:	f8d0 b010 	ldr.w	fp, [r0, #16]
 802475e:	f1bb 0f00 	cmp.w	fp, #0
 8024762:	f000 80aa 	beq.w	80248ba <lv_fs_read+0x17e>
    uint32_t br_tmp = 0;
 8024766:	2300      	movs	r3, #0
 8024768:	9304      	str	r3, [sp, #16]
    if(file_p->drv->cache_size) {
 802476a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 802476e:	f1b8 0f00 	cmp.w	r8, #0
 8024772:	f000 8097 	beq.w	80248a4 <lv_fs_read+0x168>
    uint32_t file_position = file_p->cache->file_position;
 8024776:	68a2      	ldr	r2, [r4, #8]
 8024778:	f8d2 a008 	ldr.w	sl, [r2, #8]
    char * buffer = file_p->cache->buffer;
 802477c:	68d7      	ldr	r7, [r2, #12]
    uint32_t end = file_p->cache->end;
 802477e:	e9d2 1c00 	ldrd	r1, ip, [r2]
    if(start <= file_position && file_position < end) {
 8024782:	458a      	cmp	sl, r1
 8024784:	d35c      	bcc.n	8024840 <lv_fs_read+0x104>
 8024786:	45e2      	cmp	sl, ip
 8024788:	d25a      	bcs.n	8024840 <lv_fs_read+0x104>
        uint16_t buffer_offset = file_position - start;
 802478a:	ebaa 0101 	sub.w	r1, sl, r1
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 802478e:	ebac 0a0a 	sub.w	sl, ip, sl
 8024792:	b289      	uxth	r1, r1
 8024794:	eba8 0201 	sub.w	r2, r8, r1
            lv_memcpy(buf, buffer + buffer_offset, btr);
 8024798:	4439      	add	r1, r7
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 802479a:	4592      	cmp	sl, r2
 802479c:	bf28      	it	cs
 802479e:	4692      	movcs	sl, r2
        if(btr <= buffer_remaining_length) {
 80247a0:	4555      	cmp	r5, sl
 80247a2:	d80c      	bhi.n	80247be <lv_fs_read+0x82>
    return memcpy(dst, src, len);
 80247a4:	462a      	mov	r2, r5
 80247a6:	4630      	mov	r0, r6
 80247a8:	f7f5 ffaf 	bl	801a70a <memcpy>
            *br = btr;
 80247ac:	9504      	str	r5, [sp, #16]
        file_p->cache->file_position += *br;
 80247ae:	68a2      	ldr	r2, [r4, #8]
 80247b0:	f04f 0800 	mov.w	r8, #0
 80247b4:	9904      	ldr	r1, [sp, #16]
 80247b6:	6893      	ldr	r3, [r2, #8]
 80247b8:	440b      	add	r3, r1
 80247ba:	6093      	str	r3, [r2, #8]
 80247bc:	e01f      	b.n	80247fe <lv_fs_read+0xc2>
 80247be:	4630      	mov	r0, r6
 80247c0:	4652      	mov	r2, sl
 80247c2:	f7f5 ffa2 	bl	801a70a <memcpy>
            uint32_t bytes_read_to_buffer = 0;
 80247c6:	2300      	movs	r3, #0
 80247c8:	6860      	ldr	r0, [r4, #4]
            if(btr > buffer_size) {
 80247ca:	4545      	cmp	r5, r8
            uint32_t bytes_read_to_buffer = 0;
 80247cc:	9305      	str	r3, [sp, #20]
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 80247ce:	eb06 030a 	add.w	r3, r6, sl
 80247d2:	eba5 0b0a 	sub.w	fp, r5, sl
 80247d6:	9303      	str	r3, [sp, #12]
 80247d8:	ab05      	add	r3, sp, #20
 80247da:	9300      	str	r3, [sp, #0]
 80247dc:	6906      	ldr	r6, [r0, #16]
            if(btr > buffer_size) {
 80247de:	d918      	bls.n	8024812 <lv_fs_read+0xd6>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 80247e0:	465b      	mov	r3, fp
 80247e2:	9a03      	ldr	r2, [sp, #12]
 80247e4:	6821      	ldr	r1, [r4, #0]
 80247e6:	47b0      	blx	r6
 80247e8:	4680      	mov	r8, r0
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 80247ea:	9b05      	ldr	r3, [sp, #20]
 80247ec:	449a      	add	sl, r3
 80247ee:	45aa      	cmp	sl, r5
 80247f0:	bf94      	ite	ls
 80247f2:	f8cd a010 	strls.w	sl, [sp, #16]
 80247f6:	9504      	strhi	r5, [sp, #16]
    if(res == LV_FS_RES_OK) {
 80247f8:	f1b8 0f00 	cmp.w	r8, #0
 80247fc:	d0d7      	beq.n	80247ae <lv_fs_read+0x72>
    if(br != NULL) *br = br_tmp;
 80247fe:	f1b9 0f00 	cmp.w	r9, #0
 8024802:	d002      	beq.n	802480a <lv_fs_read+0xce>
 8024804:	9b04      	ldr	r3, [sp, #16]
 8024806:	f8c9 3000 	str.w	r3, [r9]
}
 802480a:	4640      	mov	r0, r8
 802480c:	b007      	add	sp, #28
 802480e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8024812:	4643      	mov	r3, r8
 8024814:	463a      	mov	r2, r7
 8024816:	6821      	ldr	r1, [r4, #0]
 8024818:	47b0      	blx	r6
                file_p->cache->start = file_p->cache->end;
 802481a:	68a3      	ldr	r3, [r4, #8]
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 802481c:	4680      	mov	r8, r0
 802481e:	9803      	ldr	r0, [sp, #12]
                file_p->cache->start = file_p->cache->end;
 8024820:	685a      	ldr	r2, [r3, #4]
 8024822:	601a      	str	r2, [r3, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8024824:	9a05      	ldr	r2, [sp, #20]
 8024826:	68a1      	ldr	r1, [r4, #8]
                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 8024828:	4593      	cmp	fp, r2
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 802482a:	680b      	ldr	r3, [r1, #0]
                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 802482c:	bf28      	it	cs
 802482e:	4693      	movcs	fp, r2
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8024830:	4413      	add	r3, r2
 8024832:	fa1f f28b 	uxth.w	r2, fp
 8024836:	604b      	str	r3, [r1, #4]
 8024838:	4639      	mov	r1, r7
 802483a:	f7f5 ff66 	bl	801a70a <memcpy>
 802483e:	e7d4      	b.n	80247ea <lv_fs_read+0xae>
        if(btr > buffer_size) {
 8024840:	4545      	cmp	r5, r8
 8024842:	d907      	bls.n	8024854 <lv_fs_read+0x118>
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 8024844:	ab04      	add	r3, sp, #16
 8024846:	4632      	mov	r2, r6
 8024848:	9300      	str	r3, [sp, #0]
 802484a:	462b      	mov	r3, r5
 802484c:	6821      	ldr	r1, [r4, #0]
 802484e:	47d8      	blx	fp
 8024850:	4680      	mov	r8, r0
 8024852:	e7d1      	b.n	80247f8 <lv_fs_read+0xbc>
            if(buffer == NULL) {
 8024854:	b94f      	cbnz	r7, 802486a <lv_fs_read+0x12e>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 8024856:	4640      	mov	r0, r8
 8024858:	9203      	str	r2, [sp, #12]
 802485a:	f7ed ff29 	bl	80126b0 <lv_mem_alloc>
 802485e:	9a03      	ldr	r2, [sp, #12]
 8024860:	60d0      	str	r0, [r2, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 8024862:	68a3      	ldr	r3, [r4, #8]
 8024864:	68df      	ldr	r7, [r3, #12]
 8024866:	b907      	cbnz	r7, 802486a <lv_fs_read+0x12e>
 8024868:	e7fe      	b.n	8024868 <lv_fs_read+0x12c>
            uint32_t bytes_read_to_buffer = 0;
 802486a:	2300      	movs	r3, #0
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 802486c:	6860      	ldr	r0, [r4, #4]
 802486e:	463a      	mov	r2, r7
            uint32_t bytes_read_to_buffer = 0;
 8024870:	9305      	str	r3, [sp, #20]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8024872:	ab05      	add	r3, sp, #20
 8024874:	9300      	str	r3, [sp, #0]
 8024876:	4643      	mov	r3, r8
 8024878:	6821      	ldr	r1, [r4, #0]
 802487a:	f8d0 b010 	ldr.w	fp, [r0, #16]
 802487e:	47d8      	blx	fp
            file_p->cache->start = file_position;
 8024880:	68a3      	ldr	r3, [r4, #8]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8024882:	4680      	mov	r8, r0
 8024884:	4630      	mov	r0, r6
            file_p->cache->start = file_position;
 8024886:	f8c3 a000 	str.w	sl, [r3]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 802488a:	68a1      	ldr	r1, [r4, #8]
 802488c:	9a05      	ldr	r2, [sp, #20]
 802488e:	680b      	ldr	r3, [r1, #0]
            *br = LV_MIN(btr, bytes_read_to_buffer);
 8024890:	42aa      	cmp	r2, r5
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8024892:	4413      	add	r3, r2
            *br = LV_MIN(btr, bytes_read_to_buffer);
 8024894:	bf28      	it	cs
 8024896:	462a      	movcs	r2, r5
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8024898:	604b      	str	r3, [r1, #4]
 802489a:	4639      	mov	r1, r7
            *br = LV_MIN(btr, bytes_read_to_buffer);
 802489c:	9204      	str	r2, [sp, #16]
 802489e:	f7f5 ff34 	bl	801a70a <memcpy>
 80248a2:	e7a9      	b.n	80247f8 <lv_fs_read+0xbc>
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 80248a4:	ab04      	add	r3, sp, #16
 80248a6:	4632      	mov	r2, r6
 80248a8:	9300      	str	r3, [sp, #0]
 80248aa:	462b      	mov	r3, r5
 80248ac:	6821      	ldr	r1, [r4, #0]
 80248ae:	47d8      	blx	fp
 80248b0:	4680      	mov	r8, r0
 80248b2:	e7a4      	b.n	80247fe <lv_fs_read+0xc2>
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 80248b4:	f04f 080b 	mov.w	r8, #11
 80248b8:	e7a7      	b.n	802480a <lv_fs_read+0xce>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 80248ba:	f04f 0809 	mov.w	r8, #9
 80248be:	e7a4      	b.n	802480a <lv_fs_read+0xce>

080248c0 <lv_fs_seek>:
{
 80248c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80248c2:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 80248c4:	6840      	ldr	r0, [r0, #4]
{
 80248c6:	4613      	mov	r3, r2
    if(file_p->drv == NULL) {
 80248c8:	2800      	cmp	r0, #0
 80248ca:	d037      	beq.n	802493c <lv_fs_seek+0x7c>
    if(file_p->drv->seek_cb == NULL) {
 80248cc:	6985      	ldr	r5, [r0, #24]
 80248ce:	2d00      	cmp	r5, #0
 80248d0:	d036      	beq.n	8024940 <lv_fs_seek+0x80>
    if(file_p->drv->cache_size) {
 80248d2:	8842      	ldrh	r2, [r0, #2]
 80248d4:	2a00      	cmp	r2, #0
 80248d6:	d02f      	beq.n	8024938 <lv_fs_seek+0x78>
        switch(whence) {
 80248d8:	2b01      	cmp	r3, #1
 80248da:	d018      	beq.n	802490e <lv_fs_seek+0x4e>
 80248dc:	2b02      	cmp	r3, #2
 80248de:	d01b      	beq.n	8024918 <lv_fs_seek+0x58>
 80248e0:	b113      	cbz	r3, 80248e8 <lv_fs_seek+0x28>
        return LV_FS_RES_NOT_IMP;
 80248e2:	2000      	movs	r0, #0
}
 80248e4:	b003      	add	sp, #12
 80248e6:	bd30      	pop	{r4, r5, pc}
                    file_p->cache->file_position = pos;
 80248e8:	68a3      	ldr	r3, [r4, #8]
 80248ea:	6099      	str	r1, [r3, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 80248ec:	68a3      	ldr	r3, [r4, #8]
 80248ee:	689a      	ldr	r2, [r3, #8]
 80248f0:	6819      	ldr	r1, [r3, #0]
 80248f2:	428a      	cmp	r2, r1
 80248f4:	d302      	bcc.n	80248fc <lv_fs_seek+0x3c>
 80248f6:	685b      	ldr	r3, [r3, #4]
 80248f8:	429a      	cmp	r2, r3
 80248fa:	d9f2      	bls.n	80248e2 <lv_fs_seek+0x22>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 80248fc:	6860      	ldr	r0, [r4, #4]
 80248fe:	2300      	movs	r3, #0
 8024900:	6985      	ldr	r5, [r0, #24]
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8024902:	6821      	ldr	r1, [r4, #0]
 8024904:	46ac      	mov	ip, r5
}
 8024906:	b003      	add	sp, #12
 8024908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 802490c:	4760      	bx	ip
                    file_p->cache->file_position += pos;
 802490e:	68a2      	ldr	r2, [r4, #8]
 8024910:	6893      	ldr	r3, [r2, #8]
 8024912:	440b      	add	r3, r1
 8024914:	6093      	str	r3, [r2, #8]
 8024916:	e7e9      	b.n	80248ec <lv_fs_seek+0x2c>
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8024918:	460a      	mov	r2, r1
 802491a:	6821      	ldr	r1, [r4, #0]
 802491c:	47a8      	blx	r5
                    if(res == LV_FS_RES_OK) {
 802491e:	2800      	cmp	r0, #0
 8024920:	d1e0      	bne.n	80248e4 <lv_fs_seek+0x24>
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 8024922:	6860      	ldr	r0, [r4, #4]
 8024924:	aa01      	add	r2, sp, #4
 8024926:	6821      	ldr	r1, [r4, #0]
 8024928:	69c3      	ldr	r3, [r0, #28]
 802492a:	4798      	blx	r3
                        if(res == LV_FS_RES_OK) {
 802492c:	2800      	cmp	r0, #0
 802492e:	d1d9      	bne.n	80248e4 <lv_fs_seek+0x24>
                            file_p->cache->file_position = tmp_position;
 8024930:	68a3      	ldr	r3, [r4, #8]
 8024932:	9a01      	ldr	r2, [sp, #4]
 8024934:	609a      	str	r2, [r3, #8]
 8024936:	e7d5      	b.n	80248e4 <lv_fs_seek+0x24>
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8024938:	460a      	mov	r2, r1
 802493a:	e7e2      	b.n	8024902 <lv_fs_seek+0x42>
        return LV_FS_RES_INV_PARAM;
 802493c:	200b      	movs	r0, #11
 802493e:	e7d1      	b.n	80248e4 <lv_fs_seek+0x24>
        return LV_FS_RES_NOT_IMP;
 8024940:	2009      	movs	r0, #9
 8024942:	e7cf      	b.n	80248e4 <lv_fs_seek+0x24>

08024944 <lv_fs_open>:
{
 8024944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024946:	4606      	mov	r6, r0
 8024948:	4617      	mov	r7, r2
    if(path == NULL) {
 802494a:	460c      	mov	r4, r1
 802494c:	2900      	cmp	r1, #0
 802494e:	d034      	beq.n	80249ba <lv_fs_open+0x76>
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 8024950:	7808      	ldrb	r0, [r1, #0]
 8024952:	f7ed fe47 	bl	80125e4 <lv_fs_get_drv>
    if(drv == NULL) {
 8024956:	4605      	mov	r5, r0
 8024958:	2800      	cmp	r0, #0
 802495a:	d030      	beq.n	80249be <lv_fs_open+0x7a>
    if(drv->ready_cb) {
 802495c:	6843      	ldr	r3, [r0, #4]
 802495e:	b91b      	cbnz	r3, 8024968 <lv_fs_open+0x24>
    if(drv->open_cb == NULL) {
 8024960:	68ab      	ldr	r3, [r5, #8]
 8024962:	b933      	cbnz	r3, 8024972 <lv_fs_open+0x2e>
        return LV_FS_RES_NOT_IMP;
 8024964:	2009      	movs	r0, #9
 8024966:	e003      	b.n	8024970 <lv_fs_open+0x2c>
        if(drv->ready_cb(drv) == false) {
 8024968:	4798      	blx	r3
 802496a:	2800      	cmp	r0, #0
 802496c:	d1f8      	bne.n	8024960 <lv_fs_open+0x1c>
            return LV_FS_RES_HW_ERR;
 802496e:	2001      	movs	r0, #1
}
 8024970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
    path++; /*Ignore the driver letter*/
    if(*path == ':') path++;
 8024972:	7862      	ldrb	r2, [r4, #1]
    void * file_d = drv->open_cb(drv, real_path, mode);
 8024974:	4628      	mov	r0, r5
    if(*path == ':') path++;
 8024976:	2a3a      	cmp	r2, #58	; 0x3a
    void * file_d = drv->open_cb(drv, real_path, mode);
 8024978:	463a      	mov	r2, r7
    path++; /*Ignore the driver letter*/
 802497a:	bf14      	ite	ne
 802497c:	1c61      	addne	r1, r4, #1
    if(*path == ':') path++;
 802497e:	1ca1      	addeq	r1, r4, #2
    void * file_d = drv->open_cb(drv, real_path, mode);
 8024980:	4798      	blx	r3
    if(file_d == NULL || file_d == (void *)(-1)) {
 8024982:	1e43      	subs	r3, r0, #1
 8024984:	3303      	adds	r3, #3
 8024986:	d81c      	bhi.n	80249c2 <lv_fs_open+0x7e>
    file_p->file_d = file_d;
 8024988:	e9c6 0500 	strd	r0, r5, [r6]
    if(drv->cache_size) {
 802498c:	886b      	ldrh	r3, [r5, #2]
 802498e:	b90b      	cbnz	r3, 8024994 <lv_fs_open+0x50>
    return LV_FS_RES_OK;
 8024990:	2000      	movs	r0, #0
 8024992:	e7ed      	b.n	8024970 <lv_fs_open+0x2c>
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 8024994:	2010      	movs	r0, #16
 8024996:	f7ed fe8b 	bl	80126b0 <lv_mem_alloc>
 802499a:	60b0      	str	r0, [r6, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 802499c:	b900      	cbnz	r0, 80249a0 <lv_fs_open+0x5c>
 802499e:	e7fe      	b.n	802499e <lv_fs_open+0x5a>
    memset(dst, 0x00, len);
 80249a0:	2210      	movs	r2, #16
 80249a2:	2100      	movs	r1, #0
 80249a4:	f7f5 febc 	bl	801a720 <memset>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 80249a8:	68b3      	ldr	r3, [r6, #8]
 80249aa:	f04f 32ff 	mov.w	r2, #4294967295
 80249ae:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 80249b0:	f06f 0201 	mvn.w	r2, #1
 80249b4:	68b3      	ldr	r3, [r6, #8]
 80249b6:	605a      	str	r2, [r3, #4]
 80249b8:	e7ea      	b.n	8024990 <lv_fs_open+0x4c>
        return LV_FS_RES_INV_PARAM;
 80249ba:	200b      	movs	r0, #11
 80249bc:	e7d8      	b.n	8024970 <lv_fs_open+0x2c>
        return LV_FS_RES_NOT_EX;
 80249be:	2003      	movs	r0, #3
 80249c0:	e7d6      	b.n	8024970 <lv_fs_open+0x2c>
        return LV_FS_RES_UNKNOWN;
 80249c2:	200c      	movs	r0, #12
 80249c4:	e7d4      	b.n	8024970 <lv_fs_open+0x2c>

080249c6 <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 80249c6:	b109      	cbz	r1, 80249cc <node_set_prev+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 80249c8:	6803      	ldr	r3, [r0, #0]
 80249ca:	50ca      	str	r2, [r1, r3]
}
 80249cc:	4770      	bx	lr

080249ce <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 80249ce:	b111      	cbz	r1, 80249d6 <node_set_next+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 80249d0:	6803      	ldr	r3, [r0, #0]
 80249d2:	4419      	add	r1, r3
 80249d4:	604a      	str	r2, [r1, #4]
}
 80249d6:	4770      	bx	lr

080249d8 <_lv_ll_init>:
    node_size = (node_size + 3) & (~0x3);
 80249d8:	3103      	adds	r1, #3
    ll_p->head = NULL;
 80249da:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
 80249dc:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
 80249e0:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
 80249e4:	6001      	str	r1, [r0, #0]
}
 80249e6:	4770      	bx	lr

080249e8 <_lv_ll_ins_head>:
{
 80249e8:	b538      	push	{r3, r4, r5, lr}
 80249ea:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80249ec:	6800      	ldr	r0, [r0, #0]
 80249ee:	3008      	adds	r0, #8
 80249f0:	f7ed fe5e 	bl	80126b0 <lv_mem_alloc>
    if(n_new != NULL) {
 80249f4:	4605      	mov	r5, r0
 80249f6:	b180      	cbz	r0, 8024a1a <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 80249f8:	4601      	mov	r1, r0
 80249fa:	2200      	movs	r2, #0
 80249fc:	4620      	mov	r0, r4
 80249fe:	f7ff ffe2 	bl	80249c6 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8024a02:	6862      	ldr	r2, [r4, #4]
 8024a04:	f7ff ffe3 	bl	80249ce <node_set_next>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8024a08:	6861      	ldr	r1, [r4, #4]
 8024a0a:	b111      	cbz	r1, 8024a12 <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
 8024a0c:	462a      	mov	r2, r5
 8024a0e:	f7ff ffda 	bl	80249c6 <node_set_prev>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8024a12:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8024a14:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8024a16:	b903      	cbnz	r3, 8024a1a <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
 8024a18:	60a5      	str	r5, [r4, #8]
}
 8024a1a:	4628      	mov	r0, r5
 8024a1c:	bd38      	pop	{r3, r4, r5, pc}

08024a1e <_lv_ll_ins_tail>:
{
 8024a1e:	b538      	push	{r3, r4, r5, lr}
 8024a20:	4605      	mov	r5, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8024a22:	6800      	ldr	r0, [r0, #0]
 8024a24:	3008      	adds	r0, #8
 8024a26:	f7ed fe43 	bl	80126b0 <lv_mem_alloc>
    if(n_new != NULL) {
 8024a2a:	4604      	mov	r4, r0
 8024a2c:	b188      	cbz	r0, 8024a52 <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8024a2e:	4601      	mov	r1, r0
 8024a30:	2200      	movs	r2, #0
 8024a32:	4628      	mov	r0, r5
 8024a34:	f7ff ffcb 	bl	80249ce <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 8024a38:	4621      	mov	r1, r4
 8024a3a:	68aa      	ldr	r2, [r5, #8]
 8024a3c:	f7ff ffc3 	bl	80249c6 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8024a40:	68a9      	ldr	r1, [r5, #8]
 8024a42:	b111      	cbz	r1, 8024a4a <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
 8024a44:	4622      	mov	r2, r4
 8024a46:	f7ff ffc2 	bl	80249ce <node_set_next>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8024a4a:	686b      	ldr	r3, [r5, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8024a4c:	60ac      	str	r4, [r5, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8024a4e:	b903      	cbnz	r3, 8024a52 <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
 8024a50:	606c      	str	r4, [r5, #4]
}
 8024a52:	4620      	mov	r0, r4
 8024a54:	bd38      	pop	{r3, r4, r5, pc}

08024a56 <_lv_ll_remove>:
{
 8024a56:	b538      	push	{r3, r4, r5, lr}
 8024a58:	460b      	mov	r3, r1
    if(ll_p == NULL) return;
 8024a5a:	b140      	cbz	r0, 8024a6e <_lv_ll_remove+0x18>
    if(_lv_ll_get_head(ll_p) == node_p) {
 8024a5c:	e9d0 1400 	ldrd	r1, r4, [r0]
 8024a60:	42a3      	cmp	r3, r4
 8024a62:	d10a      	bne.n	8024a7a <_lv_ll_remove+0x24>
    return *((lv_ll_node_t **)n_act_d);
 8024a64:	440b      	add	r3, r1
 8024a66:	6859      	ldr	r1, [r3, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8024a68:	6041      	str	r1, [r0, #4]
        if(ll_p->head == NULL) {
 8024a6a:	b909      	cbnz	r1, 8024a70 <_lv_ll_remove+0x1a>
            ll_p->tail = NULL;
 8024a6c:	6081      	str	r1, [r0, #8]
}
 8024a6e:	bd38      	pop	{r3, r4, r5, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 8024a70:	2200      	movs	r2, #0
}
 8024a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        node_set_prev(ll_p, n_next, n_prev);
 8024a76:	f7ff bfa6 	b.w	80249c6 <node_set_prev>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8024a7a:	6885      	ldr	r5, [r0, #8]
    return *((lv_ll_node_t **)n_act_d);
 8024a7c:	585c      	ldr	r4, [r3, r1]
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8024a7e:	42ab      	cmp	r3, r5
 8024a80:	d109      	bne.n	8024a96 <_lv_ll_remove+0x40>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8024a82:	6084      	str	r4, [r0, #8]
        if(ll_p->tail == NULL) {
 8024a84:	b90c      	cbnz	r4, 8024a8a <_lv_ll_remove+0x34>
            ll_p->head = NULL;
 8024a86:	6044      	str	r4, [r0, #4]
 8024a88:	e7f1      	b.n	8024a6e <_lv_ll_remove+0x18>
            node_set_next(ll_p, ll_p->tail, NULL);
 8024a8a:	4621      	mov	r1, r4
 8024a8c:	2200      	movs	r2, #0
}
 8024a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 8024a92:	f7ff bf9c 	b.w	80249ce <node_set_next>
    return *((lv_ll_node_t **)n_act_d);
 8024a96:	440b      	add	r3, r1
        node_set_next(ll_p, n_prev, n_next);
 8024a98:	4621      	mov	r1, r4
    return *((lv_ll_node_t **)n_act_d);
 8024a9a:	685d      	ldr	r5, [r3, #4]
        node_set_next(ll_p, n_prev, n_next);
 8024a9c:	462a      	mov	r2, r5
 8024a9e:	f7ff ff96 	bl	80249ce <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 8024aa2:	4622      	mov	r2, r4
 8024aa4:	4629      	mov	r1, r5
 8024aa6:	e7e4      	b.n	8024a72 <_lv_ll_remove+0x1c>

08024aa8 <_lv_ll_clear>:
{
 8024aa8:	b570      	push	{r4, r5, r6, lr}
    if(ll_p == NULL) return NULL;
 8024aaa:	4604      	mov	r4, r0
 8024aac:	b108      	cbz	r0, 8024ab2 <_lv_ll_clear+0xa>
    return ll_p->head;
 8024aae:	6845      	ldr	r5, [r0, #4]
    while(i != NULL) {
 8024ab0:	b905      	cbnz	r5, 8024ab4 <_lv_ll_clear+0xc>
}
 8024ab2:	bd70      	pop	{r4, r5, r6, pc}
    return *((lv_ll_node_t **)n_act_d);
 8024ab4:	6823      	ldr	r3, [r4, #0]
        _lv_ll_remove(ll_p, i);
 8024ab6:	4629      	mov	r1, r5
 8024ab8:	4620      	mov	r0, r4
    return *((lv_ll_node_t **)n_act_d);
 8024aba:	442b      	add	r3, r5
 8024abc:	685e      	ldr	r6, [r3, #4]
        _lv_ll_remove(ll_p, i);
 8024abe:	f7ff ffca 	bl	8024a56 <_lv_ll_remove>
        lv_mem_free(i);
 8024ac2:	4628      	mov	r0, r5
 8024ac4:	f7ed fe12 	bl	80126ec <lv_mem_free>
        i = i_next;
 8024ac8:	4635      	mov	r5, r6
 8024aca:	e7f1      	b.n	8024ab0 <_lv_ll_clear+0x8>

08024acc <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 8024acc:	b100      	cbz	r0, 8024ad0 <_lv_ll_get_head+0x4>
    return ll_p->head;
 8024ace:	6840      	ldr	r0, [r0, #4]
}
 8024ad0:	4770      	bx	lr

08024ad2 <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 8024ad2:	b100      	cbz	r0, 8024ad6 <_lv_ll_get_tail+0x4>
    return ll_p->tail;
 8024ad4:	6880      	ldr	r0, [r0, #8]
}
 8024ad6:	4770      	bx	lr

08024ad8 <_lv_ll_get_next>:
    return *((lv_ll_node_t **)n_act_d);
 8024ad8:	6803      	ldr	r3, [r0, #0]
 8024ada:	4419      	add	r1, r3
}
 8024adc:	6848      	ldr	r0, [r1, #4]
 8024ade:	4770      	bx	lr

08024ae0 <_lv_ll_get_prev>:
    return *((lv_ll_node_t **)n_act_d);
 8024ae0:	6803      	ldr	r3, [r0, #0]
}
 8024ae2:	58c8      	ldr	r0, [r1, r3]
 8024ae4:	4770      	bx	lr

08024ae6 <_lv_ll_get_len>:
    if(ll_p == NULL) return NULL;
 8024ae6:	4603      	mov	r3, r0
 8024ae8:	b140      	cbz	r0, 8024afc <_lv_ll_get_len+0x16>
    return ll_p->head;
 8024aea:	6842      	ldr	r2, [r0, #4]
 8024aec:	2000      	movs	r0, #0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 8024aee:	b902      	cbnz	r2, 8024af2 <_lv_ll_get_len+0xc>
 8024af0:	4770      	bx	lr
    return *((lv_ll_node_t **)n_act_d);
 8024af2:	6819      	ldr	r1, [r3, #0]
        len++;
 8024af4:	3001      	adds	r0, #1
    return *((lv_ll_node_t **)n_act_d);
 8024af6:	440a      	add	r2, r1
 8024af8:	6852      	ldr	r2, [r2, #4]
 8024afa:	e7f8      	b.n	8024aee <_lv_ll_get_len+0x8>
}
 8024afc:	4770      	bx	lr

08024afe <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 8024afe:	b130      	cbz	r0, 8024b0e <_lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8024b00:	6843      	ldr	r3, [r0, #4]
 8024b02:	b933      	cbnz	r3, 8024b12 <_lv_ll_is_empty+0x14>
 8024b04:	6880      	ldr	r0, [r0, #8]
 8024b06:	fab0 f080 	clz	r0, r0
 8024b0a:	0940      	lsrs	r0, r0, #5
 8024b0c:	4770      	bx	lr
    if(ll_p == NULL) return true;
 8024b0e:	2001      	movs	r0, #1
 8024b10:	4770      	bx	lr
    return false;
 8024b12:	2000      	movs	r0, #0
}
 8024b14:	4770      	bx	lr

08024b16 <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 8024b16:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t t_rem  = 1024 - t;
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
    uint32_t t2     = (t * t) >> 10;
 8024b18:	fb00 f600 	mul.w	r6, r0, r0
    uint32_t t_rem  = 1024 - t;
 8024b1c:	f5c0 6480 	rsb	r4, r0, #1024	; 0x400
    uint32_t t3     = (t2 * t) >> 10;

    uint32_t v1 = (t_rem3 * u0) >> 10;
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8024b20:	4342      	muls	r2, r0
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
    uint32_t v4 = (t3 * u3) >> 10;
 8024b22:	9f05      	ldr	r7, [sp, #20]
    uint32_t t2     = (t * t) >> 10;
 8024b24:	0ab6      	lsrs	r6, r6, #10
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8024b26:	fb04 f504 	mul.w	r5, r4, r4
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8024b2a:	4363      	muls	r3, r4
    uint32_t t3     = (t2 * t) >> 10;
 8024b2c:	4370      	muls	r0, r6
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8024b2e:	0aad      	lsrs	r5, r5, #10
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8024b30:	4373      	muls	r3, r6
    uint32_t t3     = (t2 * t) >> 10;
 8024b32:	0a80      	lsrs	r0, r0, #10
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8024b34:	436a      	muls	r2, r5
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8024b36:	436c      	muls	r4, r5
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8024b38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    uint32_t v4 = (t3 * u3) >> 10;
 8024b3c:	4378      	muls	r0, r7
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8024b3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8024b42:	0aa4      	lsrs	r4, r4, #10
    uint32_t v4 = (t3 * u3) >> 10;
 8024b44:	0a80      	lsrs	r0, r0, #10
    uint32_t v1 = (t_rem3 * u0) >> 10;
 8024b46:	434c      	muls	r4, r1

    return v1 + v2 + v3 + v4;
 8024b48:	eb00 5012 	add.w	r0, r0, r2, lsr #20
 8024b4c:	eb00 5013 	add.w	r0, r0, r3, lsr #20
}
 8024b50:	eb00 2094 	add.w	r0, r0, r4, lsr #10
 8024b54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024b56 <lv_atan2>:
    unsigned int ux;
    unsigned int uy;

    // Save the sign flags then remove signs and get XY as unsigned ints
    negflag = 0;
    if(x < 0) {
 8024b56:	2800      	cmp	r0, #0
        negflag += 0x01;    // x flag bit
        x = (0 - x);        // is now +
 8024b58:	f04f 022d 	mov.w	r2, #45	; 0x2d
 8024b5c:	bfba      	itte	lt
 8024b5e:	4240      	neglt	r0, r0
        negflag += 0x01;    // x flag bit
 8024b60:	2301      	movlt	r3, #1
    negflag = 0;
 8024b62:	2300      	movge	r3, #0
    }
    ux = x;                // copy to unsigned var before multiply
    if(y < 0) {
 8024b64:	2900      	cmp	r1, #0
        negflag += 0x02;    // y flag bit
        y = (0 - y);        // is now +
 8024b66:	bfbe      	ittt	lt
 8024b68:	4249      	neglt	r1, r1
        negflag += 0x02;    // y flag bit
 8024b6a:	3302      	addlt	r3, #2
 8024b6c:	b2db      	uxtblt	r3, r3
    }
    uy = y;                // copy to unsigned var before multiply

    // 1. Calc the scaled "degrees"
    if(ux > uy) {
 8024b6e:	4288      	cmp	r0, r1
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 8024b70:	bf85      	ittet	hi
 8024b72:	4351      	mulhi	r1, r2
        negflag += 0x10;    // octant flag bit
 8024b74:	3310      	addhi	r3, #16
    }
    else {
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 8024b76:	4350      	mulls	r0, r2
        negflag += 0x10;    // octant flag bit
 8024b78:	b2db      	uxtbhi	r3, r3
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 8024b7a:	bf8c      	ite	hi
 8024b7c:	fbb1 f1f0 	udivhi	r1, r1, r0
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 8024b80:	fbb0 f1f1 	udivls	r1, r0, r1
    }

    // 2. Compensate for the 4 degree error curve
    comp = 0;
    tempdegree = degree;    // use an unsigned char for speed!
 8024b84:	b2ca      	uxtb	r2, r1
    if(tempdegree > 22) {    // if top half of range
 8024b86:	2a16      	cmp	r2, #22
 8024b88:	d916      	bls.n	8024bb8 <lv_atan2+0x62>
        if(tempdegree <= 44) comp++;
 8024b8a:	2a2c      	cmp	r2, #44	; 0x2c
 8024b8c:	d81f      	bhi.n	8024bce <lv_atan2+0x78>
        if(tempdegree <= 41) comp++;
 8024b8e:	2a29      	cmp	r2, #41	; 0x29
 8024b90:	d81f      	bhi.n	8024bd2 <lv_atan2+0x7c>
        if(tempdegree <= 37) comp++;
 8024b92:	2a25      	cmp	r2, #37	; 0x25
 8024b94:	d81f      	bhi.n	8024bd6 <lv_atan2+0x80>
        if(tempdegree <= 32) comp++;  // max is 4 degrees compensated
 8024b96:	2a20      	cmp	r2, #32
 8024b98:	bf8c      	ite	hi
 8024b9a:	2003      	movhi	r0, #3
 8024b9c:	2004      	movls	r0, #4
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
    }
    degree += comp;   // degree is now accurate to +/- 1 degree!

    // Invert degree if it was X>Y octant, makes 0-45 into 90-45
    if(negflag & 0x10) degree = (90 - degree);
 8024b9e:	06da      	lsls	r2, r3, #27
    degree += comp;   // degree is now accurate to +/- 1 degree!
 8024ba0:	4408      	add	r0, r1
    if(negflag & 0x10) degree = (90 - degree);
 8024ba2:	f003 0201 	and.w	r2, r3, #1
 8024ba6:	bf48      	it	mi
 8024ba8:	f1c0 005a 	rsbmi	r0, r0, #90	; 0x5a

    // 3. Degree is now 0-90 range for this quadrant,
    // need to invert it for whichever quadrant it was in
    if(negflag & 0x02) { // if -Y
 8024bac:	079b      	lsls	r3, r3, #30
 8024bae:	d517      	bpl.n	8024be0 <lv_atan2+0x8a>
        if(negflag & 0x01)   // if -Y -X
 8024bb0:	b19a      	cbz	r2, 8024bda <lv_atan2+0x84>
            degree = (180 + degree);
 8024bb2:	30b4      	adds	r0, #180	; 0xb4
    else {   // else is +Y
        if(negflag & 0x01)   // if +Y -X
            degree = (360 - degree);
    }
    return degree;
}
 8024bb4:	b280      	uxth	r0, r0
 8024bb6:	4770      	bx	lr
        if(tempdegree >= 2) comp++;
 8024bb8:	2a01      	cmp	r2, #1
 8024bba:	d908      	bls.n	8024bce <lv_atan2+0x78>
        if(tempdegree >= 6) comp++;
 8024bbc:	2a05      	cmp	r2, #5
 8024bbe:	d908      	bls.n	8024bd2 <lv_atan2+0x7c>
        if(tempdegree >= 10) comp++;
 8024bc0:	2a09      	cmp	r2, #9
 8024bc2:	d908      	bls.n	8024bd6 <lv_atan2+0x80>
        if(tempdegree <= 32) comp++;  // max is 4 degrees compensated
 8024bc4:	2a0f      	cmp	r2, #15
 8024bc6:	bf34      	ite	cc
 8024bc8:	2003      	movcc	r0, #3
 8024bca:	2004      	movcs	r0, #4
 8024bcc:	e7e7      	b.n	8024b9e <lv_atan2+0x48>
    comp = 0;
 8024bce:	2000      	movs	r0, #0
 8024bd0:	e7e5      	b.n	8024b9e <lv_atan2+0x48>
        if(tempdegree <= 44) comp++;
 8024bd2:	2001      	movs	r0, #1
 8024bd4:	e7e3      	b.n	8024b9e <lv_atan2+0x48>
        if(tempdegree <= 41) comp++;
 8024bd6:	2002      	movs	r0, #2
 8024bd8:	e7e1      	b.n	8024b9e <lv_atan2+0x48>
            degree = (180 - degree);
 8024bda:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8024bde:	e7e9      	b.n	8024bb4 <lv_atan2+0x5e>
        if(negflag & 0x01)   // if +Y -X
 8024be0:	2a00      	cmp	r2, #0
 8024be2:	d0e7      	beq.n	8024bb4 <lv_atan2+0x5e>
            degree = (360 - degree);
 8024be4:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
 8024be8:	e7e4      	b.n	8024bb4 <lv_atan2+0x5e>

08024bea <lv_pow>:
 * @param base
 * @param power
 * @return base raised to the power exponent
 */
int64_t lv_pow(int64_t base, int8_t exp)
{
 8024bea:	4603      	mov	r3, r0
    int64_t result = 1;
 8024bec:	2001      	movs	r0, #1
{
 8024bee:	b530      	push	{r4, r5, lr}
 8024bf0:	460c      	mov	r4, r1
    int64_t result = 1;
 8024bf2:	2100      	movs	r1, #0
    while(exp) {
 8024bf4:	b902      	cbnz	r2, 8024bf8 <lv_pow+0xe>
        exp >>= 1;
        base *= base;
    }

    return result;
}
 8024bf6:	bd30      	pop	{r4, r5, pc}
        if(exp & 1)
 8024bf8:	07d5      	lsls	r5, r2, #31
        exp >>= 1;
 8024bfa:	ea4f 0262 	mov.w	r2, r2, asr #1
            result *= base;
 8024bfe:	bf41      	itttt	mi
 8024c00:	fb00 f504 	mulmi.w	r5, r0, r4
 8024c04:	fb03 5501 	mlami	r5, r3, r1, r5
 8024c08:	fba0 0103 	umullmi	r0, r1, r0, r3
 8024c0c:	1949      	addmi	r1, r1, r5
        base *= base;
 8024c0e:	fb03 f504 	mul.w	r5, r3, r4
 8024c12:	fba3 3403 	umull	r3, r4, r3, r3
 8024c16:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8024c1a:	e7eb      	b.n	8024bf4 <lv_pow+0xa>

08024c1c <lv_map>:
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
    if(max_in >= min_in && x >= max_in) return max_out;
 8024c1c:	428a      	cmp	r2, r1
{
 8024c1e:	b510      	push	{r4, lr}
 8024c20:	4604      	mov	r4, r0
 8024c22:	4618      	mov	r0, r3
 8024c24:	9b02      	ldr	r3, [sp, #8]
    if(max_in >= min_in && x >= max_in) return max_out;
 8024c26:	db04      	blt.n	8024c32 <lv_map+0x16>
 8024c28:	42a2      	cmp	r2, r4
 8024c2a:	dd0e      	ble.n	8024c4a <lv_map+0x2e>
    if(max_in >= min_in && x <= min_in) return min_out;
 8024c2c:	42a1      	cmp	r1, r4
 8024c2e:	db04      	blt.n	8024c3a <lv_map+0x1e>

    int32_t delta_in = max_in - min_in;
    int32_t delta_out = max_out - min_out;

    return ((x - min_in) * delta_out) / delta_in + min_out;
}
 8024c30:	bd10      	pop	{r4, pc}
    if(max_in <= min_in && x <= max_in) return max_out;
 8024c32:	42a2      	cmp	r2, r4
 8024c34:	da09      	bge.n	8024c4a <lv_map+0x2e>
    if(max_in <= min_in && x >= min_in) return min_out;
 8024c36:	42a1      	cmp	r1, r4
 8024c38:	ddfa      	ble.n	8024c30 <lv_map+0x14>
    int32_t delta_out = max_out - min_out;
 8024c3a:	1a1b      	subs	r3, r3, r0
    return ((x - min_in) * delta_out) / delta_in + min_out;
 8024c3c:	1a64      	subs	r4, r4, r1
    int32_t delta_in = max_in - min_in;
 8024c3e:	1a52      	subs	r2, r2, r1
    return ((x - min_in) * delta_out) / delta_in + min_out;
 8024c40:	435c      	muls	r4, r3
 8024c42:	fb94 f4f2 	sdiv	r4, r4, r2
 8024c46:	4420      	add	r0, r4
 8024c48:	e7f2      	b.n	8024c30 <lv_map+0x14>
    if(max_in >= min_in && x >= max_in) return max_out;
 8024c4a:	4618      	mov	r0, r3
 8024c4c:	e7f0      	b.n	8024c30 <lv_map+0x14>

08024c4e <lv_style_set_prop_helper>:
 **********************/

static void lv_style_set_prop_helper(lv_style_prop_t prop, lv_style_value_t value, uint16_t * prop_storage,
                                     lv_style_value_t * value_storage)
{
    *prop_storage = prop;
 8024c4e:	8010      	strh	r0, [r2, #0]
    *value_storage = value;
 8024c50:	6019      	str	r1, [r3, #0]
}
 8024c52:	4770      	bx	lr

08024c54 <lv_style_init>:
 8024c54:	2208      	movs	r2, #8
 8024c56:	2100      	movs	r1, #0
 8024c58:	f7f5 bd62 	b.w	801a720 <memset>

08024c5c <lv_style_reset>:
{
 8024c5c:	b510      	push	{r4, lr}
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024c62:	8882      	ldrh	r2, [r0, #4]
{
 8024c64:	4604      	mov	r4, r0
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024c66:	429a      	cmp	r2, r3
 8024c68:	d00c      	beq.n	8024c84 <lv_style_reset+0x28>
    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8024c6a:	79c3      	ldrb	r3, [r0, #7]
 8024c6c:	2b01      	cmp	r3, #1
 8024c6e:	d902      	bls.n	8024c76 <lv_style_reset+0x1a>
 8024c70:	6800      	ldr	r0, [r0, #0]
 8024c72:	f7ed fd3b 	bl	80126ec <lv_mem_free>
 8024c76:	4620      	mov	r0, r4
 8024c78:	2208      	movs	r2, #8
 8024c7a:	2100      	movs	r1, #0
}
 8024c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024c80:	f7f5 bd4e 	b.w	801a720 <memset>
 8024c84:	bd10      	pop	{r4, pc}

08024c86 <lv_style_remove_prop>:
{
 8024c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024c8c:	8883      	ldrh	r3, [r0, #4]
{
 8024c8e:	4604      	mov	r4, r0
 8024c90:	460f      	mov	r7, r1
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024c92:	4293      	cmp	r3, r2
 8024c94:	d051      	beq.n	8024d3a <lv_style_remove_prop+0xb4>
    if(style->prop_cnt == 0)  return false;
 8024c96:	79c0      	ldrb	r0, [r0, #7]
 8024c98:	2800      	cmp	r0, #0
 8024c9a:	d04e      	beq.n	8024d3a <lv_style_remove_prop+0xb4>
    if(style->prop_cnt == 1) {
 8024c9c:	2801      	cmp	r0, #1
 8024c9e:	d108      	bne.n	8024cb2 <lv_style_remove_prop+0x2c>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8024ca0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8024ca4:	428b      	cmp	r3, r1
 8024ca6:	d148      	bne.n	8024d3a <lv_style_remove_prop+0xb4>
            style->prop1 = LV_STYLE_PROP_INV;
 8024ca8:	2300      	movs	r3, #0
 8024caa:	80a3      	strh	r3, [r4, #4]
            style->prop_cnt = 0;
 8024cac:	71e3      	strb	r3, [r4, #7]
            return true;
 8024cae:	2001      	movs	r0, #1
}
 8024cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024cb2:	6826      	ldr	r6, [r4, #0]
 8024cb4:	b201      	sxth	r1, r0
    for(i = 0; i < style->prop_cnt; i++) {
 8024cb6:	2300      	movs	r3, #0
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024cb8:	eb06 0580 	add.w	r5, r6, r0, lsl #2
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 8024cbc:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8024cc0:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8024cc4:	42ba      	cmp	r2, r7
 8024cc6:	d135      	bne.n	8024d34 <lv_style_remove_prop+0xae>
            if(style->prop_cnt == 2) {
 8024cc8:	2802      	cmp	r0, #2
 8024cca:	d10f      	bne.n	8024cec <lv_style_remove_prop+0x66>
                style->prop_cnt = 1;
 8024ccc:	2201      	movs	r2, #1
 8024cce:	71e2      	strb	r2, [r4, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8024cd0:	b93b      	cbnz	r3, 8024ce2 <lv_style_remove_prop+0x5c>
 8024cd2:	886b      	ldrh	r3, [r5, #2]
 8024cd4:	80a3      	strh	r3, [r4, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8024cd6:	6873      	ldr	r3, [r6, #4]
 8024cd8:	6023      	str	r3, [r4, #0]
            lv_mem_free(old_values);
 8024cda:	4630      	mov	r0, r6
 8024cdc:	f7ed fd06 	bl	80126ec <lv_mem_free>
            return true;
 8024ce0:	e7e5      	b.n	8024cae <lv_style_remove_prop+0x28>
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8024ce2:	f836 3021 	ldrh.w	r3, [r6, r1, lsl #2]
 8024ce6:	80a3      	strh	r3, [r4, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8024ce8:	6833      	ldr	r3, [r6, #0]
 8024cea:	e7f5      	b.n	8024cd8 <lv_style_remove_prop+0x52>
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8024cec:	3801      	subs	r0, #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 8024cee:	2306      	movs	r3, #6
 8024cf0:	4358      	muls	r0, r3
 8024cf2:	f7ed fcdd 	bl	80126b0 <lv_mem_alloc>
                if(new_values_and_props == NULL) return false;
 8024cf6:	b300      	cbz	r0, 8024d3a <lv_style_remove_prop+0xb4>
                style->prop_cnt--;
 8024cf8:	79e3      	ldrb	r3, [r4, #7]
                for(i = j = 0; j <= style->prop_cnt;
 8024cfa:	2200      	movs	r2, #0
 8024cfc:	3d02      	subs	r5, #2
                style->v_p.values_and_props = new_values_and_props;
 8024cfe:	6020      	str	r0, [r4, #0]
                style->prop_cnt--;
 8024d00:	3b01      	subs	r3, #1
                for(i = j = 0; j <= style->prop_cnt;
 8024d02:	4611      	mov	r1, r2
                style->prop_cnt--;
 8024d04:	b2db      	uxtb	r3, r3
 8024d06:	71e3      	strb	r3, [r4, #7]
                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024d08:	009b      	lsls	r3, r3, #2
                    if(old_props[j] != prop) {
 8024d0a:	f835 cf02 	ldrh.w	ip, [r5, #2]!
 8024d0e:	45bc      	cmp	ip, r7
 8024d10:	d00a      	beq.n	8024d28 <lv_style_remove_prop+0xa2>
                        new_values[i] = old_values[j];
 8024d12:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 8024d16:	f840 c021 	str.w	ip, [r0, r1, lsl #2]
                        new_props[i++] = old_props[j];
 8024d1a:	eb00 0c41 	add.w	ip, r0, r1, lsl #1
 8024d1e:	f8b5 e000 	ldrh.w	lr, [r5]
 8024d22:	3101      	adds	r1, #1
 8024d24:	f82c e003 	strh.w	lr, [ip, r3]
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8024d28:	3201      	adds	r2, #1
                for(i = j = 0; j <= style->prop_cnt;
 8024d2a:	f894 c007 	ldrb.w	ip, [r4, #7]
 8024d2e:	4594      	cmp	ip, r2
 8024d30:	d2eb      	bcs.n	8024d0a <lv_style_remove_prop+0x84>
 8024d32:	e7d2      	b.n	8024cda <lv_style_remove_prop+0x54>
    for(i = 0; i < style->prop_cnt; i++) {
 8024d34:	3301      	adds	r3, #1
 8024d36:	4298      	cmp	r0, r3
 8024d38:	d8c0      	bhi.n	8024cbc <lv_style_remove_prop+0x36>
        return false;
 8024d3a:	2000      	movs	r0, #0
 8024d3c:	e7b8      	b.n	8024cb0 <lv_style_remove_prop+0x2a>

08024d3e <lv_style_get_prop>:
{
 8024d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024d40:	4605      	mov	r5, r0
 8024d42:	4614      	mov	r4, r2
 8024d44:	4608      	mov	r0, r1
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024d46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8024d4a:	88aa      	ldrh	r2, [r5, #4]
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8024d4c:	79eb      	ldrb	r3, [r5, #7]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024d4e:	428a      	cmp	r2, r1
 8024d50:	d11c      	bne.n	8024d8c <lv_style_get_prop+0x4e>
        for(i = 0; i < style->prop_cnt; i++) {
 8024d52:	2200      	movs	r2, #0
 8024d54:	429a      	cmp	r2, r3
 8024d56:	d301      	bcc.n	8024d5c <lv_style_get_prop+0x1e>
        return LV_STYLE_RES_NOT_FOUND;
 8024d58:	2300      	movs	r3, #0
 8024d5a:	e013      	b.n	8024d84 <lv_style_get_prop+0x46>
            const_prop = style->v_p.const_props + i;
 8024d5c:	6829      	ldr	r1, [r5, #0]
 8024d5e:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8024d62:	f831 1032 	ldrh.w	r1, [r1, r2, lsl #3]
 8024d66:	f3c1 070d 	ubfx	r7, r1, #0, #14
            if(prop_id == prop) {
 8024d6a:	42b8      	cmp	r0, r7
 8024d6c:	d10c      	bne.n	8024d88 <lv_style_get_prop+0x4a>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8024d6e:	040a      	lsls	r2, r1, #16
 8024d70:	d42f      	bmi.n	8024dd2 <lv_style_get_prop+0x94>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8024d72:	044b      	lsls	r3, r1, #17
 8024d74:	d503      	bpl.n	8024d7e <lv_style_get_prop+0x40>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8024d76:	f7ed fdb3 	bl	80128e0 <lv_style_prop_get_default>
 8024d7a:	6020      	str	r0, [r4, #0]
 8024d7c:	e001      	b.n	8024d82 <lv_style_get_prop+0x44>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8024d7e:	6873      	ldr	r3, [r6, #4]
                    *value = values[i];
 8024d80:	6023      	str	r3, [r4, #0]
                return LV_STYLE_RES_FOUND;
 8024d82:	2301      	movs	r3, #1
}
 8024d84:	4618      	mov	r0, r3
 8024d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for(i = 0; i < style->prop_cnt; i++) {
 8024d88:	3201      	adds	r2, #1
 8024d8a:	e7e3      	b.n	8024d54 <lv_style_get_prop+0x16>
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8024d8c:	2b00      	cmp	r3, #0
 8024d8e:	d0f9      	beq.n	8024d84 <lv_style_get_prop+0x46>
    if(style->prop_cnt > 1) {
 8024d90:	2b01      	cmp	r3, #1
 8024d92:	d014      	beq.n	8024dbe <lv_style_get_prop+0x80>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024d94:	682e      	ldr	r6, [r5, #0]
        for(i = 0; i < style->prop_cnt; i++) {
 8024d96:	2200      	movs	r2, #0
 8024d98:	eb06 0583 	add.w	r5, r6, r3, lsl #2
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8024d9c:	f835 1b02 	ldrh.w	r1, [r5], #2
 8024da0:	f3c1 070d 	ubfx	r7, r1, #0, #14
            if(prop_id == prop) {
 8024da4:	42b8      	cmp	r0, r7
 8024da6:	d106      	bne.n	8024db6 <lv_style_get_prop+0x78>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8024da8:	040f      	lsls	r7, r1, #16
 8024daa:	d412      	bmi.n	8024dd2 <lv_style_get_prop+0x94>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8024dac:	044d      	lsls	r5, r1, #17
 8024dae:	d4e2      	bmi.n	8024d76 <lv_style_get_prop+0x38>
                    *value = values[i];
 8024db0:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
 8024db4:	e7e4      	b.n	8024d80 <lv_style_get_prop+0x42>
        for(i = 0; i < style->prop_cnt; i++) {
 8024db6:	3201      	adds	r2, #1
 8024db8:	429a      	cmp	r2, r3
 8024dba:	d3ef      	bcc.n	8024d9c <lv_style_get_prop+0x5e>
 8024dbc:	e7cc      	b.n	8024d58 <lv_style_get_prop+0x1a>
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8024dbe:	f3c2 030d 	ubfx	r3, r2, #0, #14
 8024dc2:	4298      	cmp	r0, r3
 8024dc4:	d1c8      	bne.n	8024d58 <lv_style_get_prop+0x1a>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8024dc6:	0411      	lsls	r1, r2, #16
 8024dc8:	d403      	bmi.n	8024dd2 <lv_style_get_prop+0x94>
                                                                                             style->prop1)) : style->v_p.value1;
 8024dca:	0453      	lsls	r3, r2, #17
 8024dcc:	d4d3      	bmi.n	8024d76 <lv_style_get_prop+0x38>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8024dce:	682b      	ldr	r3, [r5, #0]
 8024dd0:	e7d6      	b.n	8024d80 <lv_style_get_prop+0x42>
                    return LV_STYLE_RES_INHERIT;
 8024dd2:	2302      	movs	r3, #2
 8024dd4:	e7d6      	b.n	8024d84 <lv_style_get_prop+0x46>

08024dd6 <lv_style_is_empty>:
    return style->prop_cnt == 0 ? true : false;
 8024dd6:	79c0      	ldrb	r0, [r0, #7]
}
 8024dd8:	fab0 f080 	clz	r0, r0
 8024ddc:	0940      	lsrs	r0, r0, #5
 8024dde:	4770      	bx	lr

08024de0 <_lv_style_get_prop_group>:
    uint16_t group = (prop & 0x1FF) >> 4;
 8024de0:	0900      	lsrs	r0, r0, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8024de2:	f010 0f18 	tst.w	r0, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 8024de6:	bf0c      	ite	eq
 8024de8:	f000 001f 	andeq.w	r0, r0, #31
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8024dec:	2007      	movne	r0, #7
}
 8024dee:	4770      	bx	lr

08024df0 <lv_style_set_prop_internal>:
    *prop_storage = prop; /* meta is OR-ed into the prop ID already */
}

static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
 8024df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024df4:	4617      	mov	r7, r2
 8024df6:	461e      	mov	r6, r3
    LV_ASSERT_STYLE(style);

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024dfc:	8883      	ldrh	r3, [r0, #4]
{
 8024dfe:	4604      	mov	r4, r0
 8024e00:	460d      	mov	r5, r1
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024e02:	4293      	cmp	r3, r2
 8024e04:	d045      	beq.n	8024e92 <lv_style_set_prop_internal+0xa2>
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);

    if(style->prop_cnt > 1) {
 8024e06:	f890 e007 	ldrb.w	lr, [r0, #7]
    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 8024e0a:	f3c1 080d 	ubfx	r8, r1, #0, #14
    if(style->prop_cnt > 1) {
 8024e0e:	f1be 0f01 	cmp.w	lr, #1
 8024e12:	d945      	bls.n	8024ea0 <lv_style_set_prop_internal+0xb0>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
        uint16_t * props = (uint16_t *)tmp;
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8024e14:	f10e 33ff 	add.w	r3, lr, #4294967295
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024e18:	6800      	ldr	r0, [r0, #0]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8024e1a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8024e1e:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8024e22:	4484      	add	ip, r0
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 8024e24:	4662      	mov	r2, ip
 8024e26:	f1ac 0c02 	sub.w	ip, ip, #2
 8024e2a:	8811      	ldrh	r1, [r2, #0]
 8024e2c:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8024e30:	4588      	cmp	r8, r1
 8024e32:	d107      	bne.n	8024e44 <lv_style_set_prop_internal+0x54>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
 8024e34:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
    }
    else if(style->prop_cnt == 1) {
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8024e38:	4639      	mov	r1, r7
 8024e3a:	4628      	mov	r0, r5
 8024e3c:	46b4      	mov	ip, r6
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
    style->has_group |= 1 << group;
}
 8024e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8024e42:	4760      	bx	ip
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8024e44:	3b01      	subs	r3, #1
 8024e46:	d2ed      	bcs.n	8024e24 <lv_style_set_prop_internal+0x34>
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8024e48:	2106      	movs	r1, #6
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 8024e4a:	fb0e 1101 	mla	r1, lr, r1, r1
 8024e4e:	f7ed fc65 	bl	801271c <lv_mem_realloc>
        if(values_and_props == NULL) return;
 8024e52:	b1f0      	cbz	r0, 8024e92 <lv_style_set_prop_internal+0xa2>
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024e54:	79e3      	ldrb	r3, [r4, #7]
        style->v_p.values_and_props = values_and_props;
 8024e56:	6020      	str	r0, [r4, #0]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024e58:	eb00 0283 	add.w	r2, r0, r3, lsl #2
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 8024e5c:	1d11      	adds	r1, r2, #4
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8024e5e:	3b01      	subs	r3, #1
 8024e60:	d219      	bcs.n	8024e96 <lv_style_set_prop_internal+0xa6>
        style->prop_cnt++;
 8024e62:	79e1      	ldrb	r1, [r4, #7]
 8024e64:	3101      	adds	r1, #1
 8024e66:	b2c9      	uxtb	r1, r1
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024e68:	008a      	lsls	r2, r1, #2
        style->prop_cnt++;
 8024e6a:	71e1      	strb	r1, [r4, #7]
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 8024e6c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8024e70:	1f13      	subs	r3, r2, #4
 8024e72:	3901      	subs	r1, #1
 8024e74:	4403      	add	r3, r0
 8024e76:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8024e7a:	4402      	add	r2, r0
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8024e7c:	4628      	mov	r0, r5
 8024e7e:	4639      	mov	r1, r7
 8024e80:	47b0      	blx	r6
    style->has_group |= 1 << group;
 8024e82:	2301      	movs	r3, #1
    uint8_t group = _lv_style_get_prop_group(prop_id);
 8024e84:	4640      	mov	r0, r8
 8024e86:	f7ff ffab 	bl	8024de0 <_lv_style_get_prop_group>
    style->has_group |= 1 << group;
 8024e8a:	4083      	lsls	r3, r0
 8024e8c:	79a0      	ldrb	r0, [r4, #6]
 8024e8e:	4318      	orrs	r0, r3
 8024e90:	71a0      	strb	r0, [r4, #6]
}
 8024e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 8024e96:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
 8024e9a:	f821 c013 	strh.w	ip, [r1, r3, lsl #1]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8024e9e:	e7de      	b.n	8024e5e <lv_style_set_prop_internal+0x6e>
    else if(style->prop_cnt == 1) {
 8024ea0:	d11c      	bne.n	8024edc <lv_style_set_prop_internal+0xec>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 8024ea2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8024ea6:	4543      	cmp	r3, r8
 8024ea8:	d102      	bne.n	8024eb0 <lv_style_set_prop_internal+0xc0>
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8024eaa:	4603      	mov	r3, r0
 8024eac:	1d02      	adds	r2, r0, #4
 8024eae:	e7c3      	b.n	8024e38 <lv_style_set_prop_internal+0x48>
        uint8_t * values_and_props = lv_mem_alloc(size);
 8024eb0:	200c      	movs	r0, #12
 8024eb2:	f7ed fbfd 	bl	80126b0 <lv_mem_alloc>
        if(values_and_props == NULL) return;
 8024eb6:	2800      	cmp	r0, #0
 8024eb8:	d0eb      	beq.n	8024e92 <lv_style_set_prop_internal+0xa2>
        style->prop_cnt++;
 8024eba:	79e3      	ldrb	r3, [r4, #7]
        props[0] = style->prop1;
 8024ebc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
        style->prop_cnt++;
 8024ec0:	3301      	adds	r3, #1
        lv_style_value_t value_tmp = style->v_p.value1;
 8024ec2:	6821      	ldr	r1, [r4, #0]
        style->v_p.values_and_props = values_and_props;
 8024ec4:	6020      	str	r0, [r4, #0]
        style->prop_cnt++;
 8024ec6:	b2db      	uxtb	r3, r3
 8024ec8:	71e3      	strb	r3, [r4, #7]
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024eca:	eb00 0283 	add.w	r2, r0, r3, lsl #2
        props[0] = style->prop1;
 8024ece:	f820 c023 	strh.w	ip, [r0, r3, lsl #2]
        values[0] = value_tmp;
 8024ed2:	4603      	mov	r3, r0
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 8024ed4:	3202      	adds	r2, #2
        values[0] = value_tmp;
 8024ed6:	f843 1b04 	str.w	r1, [r3], #4
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 8024eda:	e7cf      	b.n	8024e7c <lv_style_set_prop_internal+0x8c>
        style->prop_cnt = 1;
 8024edc:	2301      	movs	r3, #1
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8024ede:	1d02      	adds	r2, r0, #4
        style->prop_cnt = 1;
 8024ee0:	71c3      	strb	r3, [r0, #7]
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8024ee2:	4603      	mov	r3, r0
 8024ee4:	e7ca      	b.n	8024e7c <lv_style_set_prop_internal+0x8c>

08024ee6 <lv_style_set_width>:
#include "lv_style.h"

void lv_style_set_width(lv_style_t * style, lv_coord_t value)
{
 8024ee6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_WIDTH, v);
 8024ee8:	2101      	movs	r1, #1
 8024eea:	f7ed bd45 	b.w	8012978 <lv_style_set_prop>

08024eee <lv_style_set_max_width>:
    };
    lv_style_set_prop(style, LV_STYLE_MIN_WIDTH, v);
}

void lv_style_set_max_width(lv_style_t * style, lv_coord_t value)
{
 8024eee:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_MAX_WIDTH, v);
 8024ef0:	2103      	movs	r1, #3
 8024ef2:	f7ed bd41 	b.w	8012978 <lv_style_set_prop>

08024ef6 <lv_style_set_height>:
}

void lv_style_set_height(lv_style_t * style, lv_coord_t value)
{
 8024ef6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_HEIGHT, v);
 8024ef8:	2104      	movs	r1, #4
 8024efa:	f7ed bd3d 	b.w	8012978 <lv_style_set_prop>

08024efe <lv_style_set_max_height>:
    };
    lv_style_set_prop(style, LV_STYLE_MIN_HEIGHT, v);
}

void lv_style_set_max_height(lv_style_t * style, lv_coord_t value)
{
 8024efe:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_MAX_HEIGHT, v);
 8024f00:	2106      	movs	r1, #6
 8024f02:	f7ed bd39 	b.w	8012978 <lv_style_set_prop>

08024f06 <lv_style_set_transform_width>:
    };
    lv_style_set_prop(style, LV_STYLE_ALIGN, v);
}

void lv_style_set_transform_width(lv_style_t * style, lv_coord_t value)
{
 8024f06:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_WIDTH, v);
 8024f08:	2168      	movs	r1, #104	; 0x68
 8024f0a:	f7ed bd35 	b.w	8012978 <lv_style_set_prop>

08024f0e <lv_style_set_transform_height>:
}

void lv_style_set_transform_height(lv_style_t * style, lv_coord_t value)
{
 8024f0e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_HEIGHT, v);
 8024f10:	2169      	movs	r1, #105	; 0x69
 8024f12:	f7ed bd31 	b.w	8012978 <lv_style_set_prop>

08024f16 <lv_style_set_pad_top>:
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_PIVOT_Y, v);
}

void lv_style_set_pad_top(lv_style_t * style, lv_coord_t value)
{
 8024f16:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 8024f18:	2110      	movs	r1, #16
 8024f1a:	f7ed bd2d 	b.w	8012978 <lv_style_set_prop>

08024f1e <lv_style_set_pad_bottom>:
}

void lv_style_set_pad_bottom(lv_style_t * style, lv_coord_t value)
{
 8024f1e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_BOTTOM, v);
 8024f20:	2111      	movs	r1, #17
 8024f22:	f7ed bd29 	b.w	8012978 <lv_style_set_prop>

08024f26 <lv_style_set_pad_left>:
}

void lv_style_set_pad_left(lv_style_t * style, lv_coord_t value)
{
 8024f26:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 8024f28:	2112      	movs	r1, #18
 8024f2a:	f7ed bd25 	b.w	8012978 <lv_style_set_prop>

08024f2e <lv_style_set_pad_right>:
}

void lv_style_set_pad_right(lv_style_t * style, lv_coord_t value)
{
 8024f2e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 8024f30:	2113      	movs	r1, #19
 8024f32:	f7ed bd21 	b.w	8012978 <lv_style_set_prop>

08024f36 <lv_style_set_pad_row>:
}

void lv_style_set_pad_row(lv_style_t * style, lv_coord_t value)
{
 8024f36:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_ROW, v);
 8024f38:	2114      	movs	r1, #20
 8024f3a:	f7ed bd1d 	b.w	8012978 <lv_style_set_prop>

08024f3e <lv_style_set_pad_column>:
}

void lv_style_set_pad_column(lv_style_t * style, lv_coord_t value)
{
 8024f3e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v);
 8024f40:	2115      	movs	r1, #21
 8024f42:	f7ed bd19 	b.w	8012978 <lv_style_set_prop>

08024f46 <lv_style_set_bg_color>:
}

void lv_style_set_bg_color(lv_style_t * style, lv_color_t value)
{
 8024f46:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8024f48:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8024f4a:	b28a      	uxth	r2, r1
 8024f4c:	2120      	movs	r1, #32
    lv_style_value_t v = {
 8024f4e:	f8ad 3000 	strh.w	r3, [sp]
}
 8024f52:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8024f54:	f7ed bd10 	b.w	8012978 <lv_style_set_prop>

08024f58 <lv_style_set_bg_opa>:

void lv_style_set_bg_opa(lv_style_t * style, lv_opa_t value)
{
 8024f58:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BG_OPA, v);
 8024f5a:	2121      	movs	r1, #33	; 0x21
 8024f5c:	f7ed bd0c 	b.w	8012978 <lv_style_set_prop>

08024f60 <lv_style_set_bg_grad_color>:
}

void lv_style_set_bg_grad_color(lv_style_t * style, lv_color_t value)
{
 8024f60:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8024f62:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_GRAD_COLOR, v);
 8024f64:	b28a      	uxth	r2, r1
 8024f66:	2122      	movs	r1, #34	; 0x22
    lv_style_value_t v = {
 8024f68:	f8ad 3000 	strh.w	r3, [sp]
}
 8024f6c:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BG_GRAD_COLOR, v);
 8024f6e:	f7ed bd03 	b.w	8012978 <lv_style_set_prop>

08024f72 <lv_style_set_bg_img_src>:
    };
    lv_style_set_prop(style, LV_STYLE_BG_DITHER_MODE, v);
}

void lv_style_set_bg_img_src(lv_style_t * style, const void * value)
{
 8024f72:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_IMG_SRC, v);
 8024f74:	2128      	movs	r1, #40	; 0x28
 8024f76:	f7ed bcff 	b.w	8012978 <lv_style_set_prop>

08024f7a <lv_style_set_border_color>:
    };
    lv_style_set_prop(style, LV_STYLE_BG_IMG_TILED, v);
}

void lv_style_set_border_color(lv_style_t * style, lv_color_t value)
{
 8024f7a:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8024f7c:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 8024f7e:	b28a      	uxth	r2, r1
 8024f80:	2130      	movs	r1, #48	; 0x30
    lv_style_value_t v = {
 8024f82:	f8ad 3000 	strh.w	r3, [sp]
}
 8024f86:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 8024f88:	f7ed bcf6 	b.w	8012978 <lv_style_set_prop>

08024f8c <lv_style_set_border_opa>:

void lv_style_set_border_opa(lv_style_t * style, lv_opa_t value)
{
 8024f8c:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_OPA, v);
 8024f8e:	2131      	movs	r1, #49	; 0x31
 8024f90:	f7ed bcf2 	b.w	8012978 <lv_style_set_prop>

08024f94 <lv_style_set_border_width>:
}

void lv_style_set_border_width(lv_style_t * style, lv_coord_t value)
{
 8024f94:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_WIDTH, v);
 8024f96:	2132      	movs	r1, #50	; 0x32
 8024f98:	f7ed bcee 	b.w	8012978 <lv_style_set_prop>

08024f9c <lv_style_set_border_side>:
}

void lv_style_set_border_side(lv_style_t * style, lv_border_side_t value)
{
 8024f9c:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 8024f9e:	2133      	movs	r1, #51	; 0x33
 8024fa0:	f7ed bcea 	b.w	8012978 <lv_style_set_prop>

08024fa4 <lv_style_set_border_post>:
}

void lv_style_set_border_post(lv_style_t * style, bool value)
{
 8024fa4:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_POST, v);
 8024fa6:	2134      	movs	r1, #52	; 0x34
 8024fa8:	f7ed bce6 	b.w	8012978 <lv_style_set_prop>

08024fac <lv_style_set_outline_width>:
}

void lv_style_set_outline_width(lv_style_t * style, lv_coord_t value)
{
 8024fac:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_WIDTH, v);
 8024fae:	2135      	movs	r1, #53	; 0x35
 8024fb0:	f7ed bce2 	b.w	8012978 <lv_style_set_prop>

08024fb4 <lv_style_set_outline_color>:
}

void lv_style_set_outline_color(lv_style_t * style, lv_color_t value)
{
 8024fb4:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8024fb6:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8024fb8:	b28a      	uxth	r2, r1
 8024fba:	2136      	movs	r1, #54	; 0x36
    lv_style_value_t v = {
 8024fbc:	f8ad 3000 	strh.w	r3, [sp]
}
 8024fc0:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8024fc2:	f7ed bcd9 	b.w	8012978 <lv_style_set_prop>

08024fc6 <lv_style_set_outline_opa>:

void lv_style_set_outline_opa(lv_style_t * style, lv_opa_t value)
{
 8024fc6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_OPA, v);
 8024fc8:	2137      	movs	r1, #55	; 0x37
 8024fca:	f7ed bcd5 	b.w	8012978 <lv_style_set_prop>

08024fce <lv_style_set_outline_pad>:
}

void lv_style_set_outline_pad(lv_style_t * style, lv_coord_t value)
{
 8024fce:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_PAD, v);
 8024fd0:	2138      	movs	r1, #56	; 0x38
 8024fd2:	f7ed bcd1 	b.w	8012978 <lv_style_set_prop>

08024fd6 <lv_style_set_shadow_width>:
}

void lv_style_set_shadow_width(lv_style_t * style, lv_coord_t value)
{
 8024fd6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 8024fd8:	2140      	movs	r1, #64	; 0x40
 8024fda:	f7ed bccd 	b.w	8012978 <lv_style_set_prop>

08024fde <lv_style_set_shadow_ofs_y>:
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OFS_X, v);
}

void lv_style_set_shadow_ofs_y(lv_style_t * style, lv_coord_t value)
{
 8024fde:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OFS_Y, v);
 8024fe0:	2142      	movs	r1, #66	; 0x42
 8024fe2:	f7ed bcc9 	b.w	8012978 <lv_style_set_prop>

08024fe6 <lv_style_set_shadow_spread>:
}

void lv_style_set_shadow_spread(lv_style_t * style, lv_coord_t value)
{
 8024fe6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_SPREAD, v);
 8024fe8:	2143      	movs	r1, #67	; 0x43
 8024fea:	f7ed bcc5 	b.w	8012978 <lv_style_set_prop>

08024fee <lv_style_set_shadow_color>:
}

void lv_style_set_shadow_color(lv_style_t * style, lv_color_t value)
{
 8024fee:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8024ff0:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 8024ff2:	b28a      	uxth	r2, r1
 8024ff4:	2144      	movs	r1, #68	; 0x44
    lv_style_value_t v = {
 8024ff6:	f8ad 3000 	strh.w	r3, [sp]
}
 8024ffa:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 8024ffc:	f7ed bcbc 	b.w	8012978 <lv_style_set_prop>

08025000 <lv_style_set_shadow_opa>:

void lv_style_set_shadow_opa(lv_style_t * style, lv_opa_t value)
{
 8025000:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OPA, v);
 8025002:	2145      	movs	r1, #69	; 0x45
 8025004:	f7ed bcb8 	b.w	8012978 <lv_style_set_prop>

08025008 <lv_style_set_line_width>:
    };
    lv_style_set_prop(style, LV_STYLE_IMG_RECOLOR_OPA, v);
}

void lv_style_set_line_width(lv_style_t * style, lv_coord_t value)
{
 8025008:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_WIDTH, v);
 802500a:	2149      	movs	r1, #73	; 0x49
 802500c:	f7ed bcb4 	b.w	8012978 <lv_style_set_prop>

08025010 <lv_style_set_line_color>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_ROUNDED, v);
}

void lv_style_set_line_color(lv_style_t * style, lv_color_t value)
{
 8025010:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8025012:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 8025014:	b28a      	uxth	r2, r1
 8025016:	214d      	movs	r1, #77	; 0x4d
    lv_style_value_t v = {
 8025018:	f8ad 3000 	strh.w	r3, [sp]
}
 802501c:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 802501e:	f7ed bcab 	b.w	8012978 <lv_style_set_prop>

08025022 <lv_style_set_arc_width>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_OPA, v);
}

void lv_style_set_arc_width(lv_style_t * style, lv_coord_t value)
{
 8025022:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 8025024:	2150      	movs	r1, #80	; 0x50
 8025026:	f7ed bca7 	b.w	8012978 <lv_style_set_prop>

0802502a <lv_style_set_arc_rounded>:
}

void lv_style_set_arc_rounded(lv_style_t * style, bool value)
{
 802502a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_ROUNDED, v);
 802502c:	2151      	movs	r1, #81	; 0x51
 802502e:	f7ed bca3 	b.w	8012978 <lv_style_set_prop>

08025032 <lv_style_set_arc_color>:
}

void lv_style_set_arc_color(lv_style_t * style, lv_color_t value)
{
 8025032:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8025034:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8025036:	b28a      	uxth	r2, r1
 8025038:	2152      	movs	r1, #82	; 0x52
    lv_style_value_t v = {
 802503a:	f8ad 3000 	strh.w	r3, [sp]
}
 802503e:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8025040:	f7ed bc9a 	b.w	8012978 <lv_style_set_prop>

08025044 <lv_style_set_text_color>:
    };
    lv_style_set_prop(style, LV_STYLE_ARC_IMG_SRC, v);
}

void lv_style_set_text_color(lv_style_t * style, lv_color_t value)
{
 8025044:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8025046:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 8025048:	b28a      	uxth	r2, r1
 802504a:	2155      	movs	r1, #85	; 0x55
    lv_style_value_t v = {
 802504c:	f8ad 3000 	strh.w	r3, [sp]
}
 8025050:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 8025052:	f7ed bc91 	b.w	8012978 <lv_style_set_prop>

08025056 <lv_style_set_text_font>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_OPA, v);
}

void lv_style_set_text_font(lv_style_t * style, const lv_font_t * value)
{
 8025056:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_FONT, v);
 8025058:	2157      	movs	r1, #87	; 0x57
 802505a:	f7ed bc8d 	b.w	8012978 <lv_style_set_prop>

0802505e <lv_style_set_text_line_space>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_LETTER_SPACE, v);
}

void lv_style_set_text_line_space(lv_style_t * style, lv_coord_t value)
{
 802505e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_LINE_SPACE, v);
 8025060:	2159      	movs	r1, #89	; 0x59
 8025062:	f7ed bc89 	b.w	8012978 <lv_style_set_prop>

08025066 <lv_style_set_text_align>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_DECOR, v);
}

void lv_style_set_text_align(lv_style_t * style, lv_text_align_t value)
{
 8025066:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_ALIGN, v);
 8025068:	215b      	movs	r1, #91	; 0x5b
 802506a:	f7ed bc85 	b.w	8012978 <lv_style_set_prop>

0802506e <lv_style_set_radius>:
}

void lv_style_set_radius(lv_style_t * style, lv_coord_t value)
{
 802506e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_RADIUS, v);
 8025070:	210b      	movs	r1, #11
 8025072:	f7ed bc81 	b.w	8012978 <lv_style_set_prop>

08025076 <lv_style_set_clip_corner>:
}

void lv_style_set_clip_corner(lv_style_t * style, bool value)
{
 8025076:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_CLIP_CORNER, v);
 8025078:	2117      	movs	r1, #23
 802507a:	f7ed bc7d 	b.w	8012978 <lv_style_set_prop>

0802507e <lv_style_set_color_filter_dsc>:
    };
    lv_style_set_prop(style, LV_STYLE_OPA, v);
}

void lv_style_set_color_filter_dsc(lv_style_t * style, const lv_color_filter_dsc_t * value)
{
 802507e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_DSC, v);
 8025080:	2161      	movs	r1, #97	; 0x61
 8025082:	f7ed bc79 	b.w	8012978 <lv_style_set_prop>

08025086 <lv_style_set_color_filter_opa>:
}

void lv_style_set_color_filter_opa(lv_style_t * style, lv_opa_t value)
{
 8025086:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_OPA, v);
 8025088:	2162      	movs	r1, #98	; 0x62
 802508a:	f7ed bc75 	b.w	8012978 <lv_style_set_prop>

0802508e <lv_style_set_anim_time>:
    };
    lv_style_set_prop(style, LV_STYLE_ANIM, v);
}

void lv_style_set_anim_time(lv_style_t * style, uint32_t value)
{
 802508e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ANIM_TIME, v);
 8025090:	2164      	movs	r1, #100	; 0x64
 8025092:	f7ed bc71 	b.w	8012978 <lv_style_set_prop>

08025096 <lv_style_set_transition>:
    };
    lv_style_set_prop(style, LV_STYLE_ANIM_SPEED, v);
}

void lv_style_set_transition(lv_style_t * style, const lv_style_transition_dsc_t * value)
{
 8025096:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSITION, v);
 8025098:	2166      	movs	r1, #102	; 0x66
 802509a:	f7ed bc6d 	b.w	8012978 <lv_style_set_prop>

0802509e <lv_timer_pause>:
    timer->paused = true;
 802509e:	7d03      	ldrb	r3, [r0, #20]
 80250a0:	f043 0301 	orr.w	r3, r3, #1
 80250a4:	7503      	strb	r3, [r0, #20]
}
 80250a6:	4770      	bx	lr

080250a8 <lv_timer_resume>:
    timer->paused = false;
 80250a8:	7d03      	ldrb	r3, [r0, #20]
 80250aa:	f36f 0300 	bfc	r3, #0, #1
 80250ae:	7503      	strb	r3, [r0, #20]
}
 80250b0:	4770      	bx	lr

080250b2 <lv_timer_ready>:
{
 80250b2:	b510      	push	{r4, lr}
 80250b4:	4604      	mov	r4, r0
    timer->last_run = lv_tick_get() - timer->period - 1;
 80250b6:	f7ff f814 	bl	80240e2 <lv_tick_get>
 80250ba:	6823      	ldr	r3, [r4, #0]
 80250bc:	1ac3      	subs	r3, r0, r3
 80250be:	3b01      	subs	r3, #1
 80250c0:	6063      	str	r3, [r4, #4]
}
 80250c2:	bd10      	pop	{r4, pc}

080250c4 <block_next>:
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80250c4:	6843      	ldr	r3, [r0, #4]
/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
    block_header_t * next = offset_to_block(block_to_ptr(block),
                                            block_size(block) - block_header_overhead);
    tlsf_assert(!block_is_last(block));
 80250c6:	2b03      	cmp	r3, #3
 80250c8:	d800      	bhi.n	80250cc <block_next+0x8>
 80250ca:	e7fe      	b.n	80250ca <block_next+0x6>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80250cc:	f023 0303 	bic.w	r3, r3, #3
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 80250d0:	4418      	add	r0, r3
    return next;
}
 80250d2:	3004      	adds	r0, #4
 80250d4:	4770      	bx	lr

080250d6 <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 80250d6:	4602      	mov	r2, r0
 80250d8:	b508      	push	{r3, lr}
    block_header_t * next = block_next(block);
 80250da:	f7ff fff3 	bl	80250c4 <block_next>
    next->prev_phys_block = block;
 80250de:	6002      	str	r2, [r0, #0]
    return next;
}
 80250e0:	bd08      	pop	{r3, pc}

080250e2 <block_split>:
    return block_size(block) >= sizeof(block_header_t) + size;
}

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 80250e2:	b538      	push	{r3, r4, r5, lr}
    return tlsf_cast(void *,
 80250e4:	1843      	adds	r3, r0, r1
 80250e6:	f103 020c 	add.w	r2, r3, #12
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 80250ea:	1d1c      	adds	r4, r3, #4
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80250ec:	330f      	adds	r3, #15
 80250ee:	f023 0303 	bic.w	r3, r3, #3
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);

    const size_t remain_size = block_size(block) - (size + block_header_overhead);

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 80250f2:	429a      	cmp	r2, r3
 80250f4:	d000      	beq.n	80250f8 <block_split+0x16>
 80250f6:	e7fe      	b.n	80250f6 <block_split+0x14>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80250f8:	6843      	ldr	r3, [r0, #4]
 80250fa:	f023 0303 	bic.w	r3, r3, #3
    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 80250fe:	1a5a      	subs	r2, r3, r1
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 8025100:	1f15      	subs	r5, r2, #4
 8025102:	440a      	add	r2, r1
 8025104:	429a      	cmp	r2, r3
 8025106:	d000      	beq.n	802510a <block_split+0x28>
 8025108:	e7fe      	b.n	8025108 <block_split+0x26>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 802510a:	6863      	ldr	r3, [r4, #4]
 802510c:	f003 0303 	and.w	r3, r3, #3
 8025110:	432b      	orrs	r3, r5
 8025112:	6063      	str	r3, [r4, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025114:	f023 0303 	bic.w	r3, r3, #3
    block_set_size(remaining, remain_size);
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8025118:	2b0b      	cmp	r3, #11
 802511a:	d800      	bhi.n	802511e <block_split+0x3c>
 802511c:	e7fe      	b.n	802511c <block_split+0x3a>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 802511e:	6843      	ldr	r3, [r0, #4]
 8025120:	f003 0303 	and.w	r3, r3, #3
 8025124:	430b      	orrs	r3, r1
 8025126:	6043      	str	r3, [r0, #4]
    block_header_t * next = block_link_next(block);
 8025128:	4620      	mov	r0, r4
 802512a:	f7ff ffd4 	bl	80250d6 <block_link_next>
    block->size |= block_header_prev_free_bit;
 802512e:	6843      	ldr	r3, [r0, #4]
 8025130:	f043 0302 	orr.w	r3, r3, #2
 8025134:	6043      	str	r3, [r0, #4]

    block_set_size(block, size);
    block_mark_as_free(remaining);

    return remaining;
}
 8025136:	4620      	mov	r0, r4
    block->size |= block_header_free_bit;
 8025138:	6863      	ldr	r3, [r4, #4]
 802513a:	f043 0301 	orr.w	r3, r3, #1
 802513e:	6063      	str	r3, [r4, #4]
}
 8025140:	bd38      	pop	{r3, r4, r5, pc}

08025142 <adjust_request_size>:
    if(size) {
 8025142:	4603      	mov	r3, r0
 8025144:	b168      	cbz	r0, 8025162 <adjust_request_size+0x20>
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8025146:	1e4a      	subs	r2, r1, #1
 8025148:	ea11 0002 	ands.w	r0, r1, r2
 802514c:	d000      	beq.n	8025150 <adjust_request_size+0xe>
 802514e:	e7fe      	b.n	802514e <adjust_request_size+0xc>
    return (x + (align - 1)) & ~(align - 1);
 8025150:	4413      	add	r3, r2
 8025152:	4249      	negs	r1, r1
 8025154:	400b      	ands	r3, r1
        if(aligned < block_size_max) {
 8025156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802515a:	d203      	bcs.n	8025164 <adjust_request_size+0x22>
            adjust = tlsf_max(aligned, block_size_min);
 802515c:	2b0c      	cmp	r3, #12
 802515e:	bf38      	it	cc
 8025160:	230c      	movcc	r3, #12
    size_t adjust = 0;
 8025162:	4618      	mov	r0, r3
}
 8025164:	4770      	bx	lr

08025166 <remove_free_block>:
{
 8025166:	b570      	push	{r4, r5, r6, lr}
    block_header_t * prev = block->prev_free;
 8025168:	68cd      	ldr	r5, [r1, #12]
    tlsf_assert(prev && "prev_free field can not be null");
 802516a:	b905      	cbnz	r5, 802516e <remove_free_block+0x8>
 802516c:	e7fe      	b.n	802516c <remove_free_block+0x6>
    block_header_t * next = block->next_free;
 802516e:	688c      	ldr	r4, [r1, #8]
    tlsf_assert(next && "next_free field can not be null");
 8025170:	b904      	cbnz	r4, 8025174 <remove_free_block+0xe>
 8025172:	e7fe      	b.n	8025172 <remove_free_block+0xc>
    next->prev_free = prev;
 8025174:	60e5      	str	r5, [r4, #12]
    prev->next_free = next;
 8025176:	60ac      	str	r4, [r5, #8]
    if(control->blocks[fl][sl] == block) {
 8025178:	eb03 1542 	add.w	r5, r3, r2, lsl #5
 802517c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8025180:	6bae      	ldr	r6, [r5, #56]	; 0x38
 8025182:	428e      	cmp	r6, r1
 8025184:	d111      	bne.n	80251aa <remove_free_block+0x44>
        if(next == &control->block_null) {
 8025186:	42a0      	cmp	r0, r4
        control->blocks[fl][sl] = next;
 8025188:	63ac      	str	r4, [r5, #56]	; 0x38
        if(next == &control->block_null) {
 802518a:	d10e      	bne.n	80251aa <remove_free_block+0x44>
            control->sl_bitmap[fl] &= ~(1U << sl);
 802518c:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 8025190:	2101      	movs	r1, #1
 8025192:	696c      	ldr	r4, [r5, #20]
 8025194:	fa01 f303 	lsl.w	r3, r1, r3
 8025198:	ea24 0303 	bic.w	r3, r4, r3
 802519c:	616b      	str	r3, [r5, #20]
            if(!control->sl_bitmap[fl]) {
 802519e:	b923      	cbnz	r3, 80251aa <remove_free_block+0x44>
                control->fl_bitmap &= ~(1U << fl);
 80251a0:	6903      	ldr	r3, [r0, #16]
 80251a2:	4091      	lsls	r1, r2
 80251a4:	ea23 0301 	bic.w	r3, r3, r1
 80251a8:	6103      	str	r3, [r0, #16]
}
 80251aa:	bd70      	pop	{r4, r5, r6, pc}

080251ac <mapping_insert>:
    if(size < SMALL_BLOCK_SIZE) {
 80251ac:	287f      	cmp	r0, #127	; 0x7f
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 80251ae:	bf8e      	itee	hi
 80251b0:	fab0 f380 	clzhi	r3, r0
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 80251b4:	1080      	asrls	r0, r0, #2
        fl = 0;
 80251b6:	2300      	movls	r3, #0
{
 80251b8:	b510      	push	{r4, lr}
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 80251ba:	bf82      	ittt	hi
 80251bc:	f1c3 041a 	rsbhi	r4, r3, #26
        fl -= (FL_INDEX_SHIFT - 1);
 80251c0:	f1c3 0319 	rsbhi	r3, r3, #25
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 80251c4:	40e0      	lsrhi	r0, r4
    *fli = fl;
 80251c6:	600b      	str	r3, [r1, #0]
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 80251c8:	bf88      	it	hi
 80251ca:	f080 0020 	eorhi.w	r0, r0, #32
    *sli = sl;
 80251ce:	6010      	str	r0, [r2, #0]
}
 80251d0:	bd10      	pop	{r4, pc}

080251d2 <block_insert>:
{
 80251d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80251d4:	4604      	mov	r4, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80251d6:	6848      	ldr	r0, [r1, #4]
    mapping_insert(block_size(block), &fl, &sl);
 80251d8:	aa01      	add	r2, sp, #4
{
 80251da:	460d      	mov	r5, r1
    mapping_insert(block_size(block), &fl, &sl);
 80251dc:	f020 0003 	bic.w	r0, r0, #3
 80251e0:	4669      	mov	r1, sp
 80251e2:	f7ff ffe3 	bl	80251ac <mapping_insert>
    insert_free_block(control, block, fl, sl);
 80251e6:	e9dd 2600 	ldrd	r2, r6, [sp]
    block_header_t * current = control->blocks[fl][sl];
 80251ea:	eb06 1342 	add.w	r3, r6, r2, lsl #5
 80251ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80251f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tlsf_assert(current && "free list cannot have a null entry");
 80251f4:	b901      	cbnz	r1, 80251f8 <block_insert+0x26>
 80251f6:	e7fe      	b.n	80251f6 <block_insert+0x24>
    block->prev_free = &control->block_null;
 80251f8:	e9c5 1402 	strd	r1, r4, [r5, #8]
    current->prev_free = block;
 80251fc:	60cd      	str	r5, [r1, #12]
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80251fe:	f105 010b 	add.w	r1, r5, #11
    return tlsf_cast(void *,
 8025202:	f105 0008 	add.w	r0, r5, #8
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8025206:	f021 0103 	bic.w	r1, r1, #3
    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 802520a:	4288      	cmp	r0, r1
 802520c:	d000      	beq.n	8025210 <block_insert+0x3e>
 802520e:	e7fe      	b.n	802520e <block_insert+0x3c>
    control->blocks[fl][sl] = block;
 8025210:	639d      	str	r5, [r3, #56]	; 0x38
    control->fl_bitmap |= (1U << fl);
 8025212:	2301      	movs	r3, #1
 8025214:	6921      	ldr	r1, [r4, #16]
 8025216:	fa03 f002 	lsl.w	r0, r3, r2
    control->sl_bitmap[fl] |= (1U << sl);
 802521a:	40b3      	lsls	r3, r6
    control->fl_bitmap |= (1U << fl);
 802521c:	4301      	orrs	r1, r0
 802521e:	6121      	str	r1, [r4, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 8025220:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8025224:	6962      	ldr	r2, [r4, #20]
 8025226:	431a      	orrs	r2, r3
 8025228:	6162      	str	r2, [r4, #20]
}
 802522a:	b002      	add	sp, #8
 802522c:	bd70      	pop	{r4, r5, r6, pc}

0802522e <block_prepare_used>:

    return block;
}

static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
{
 802522e:	b538      	push	{r3, r4, r5, lr}
 8025230:	4605      	mov	r5, r0
    void * p = 0;
    if(block) {
 8025232:	460c      	mov	r4, r1
 8025234:	b341      	cbz	r1, 8025288 <block_prepare_used+0x5a>
        tlsf_assert(size && "size must be non-zero");
 8025236:	b902      	cbnz	r2, 802523a <block_prepare_used+0xc>
 8025238:	e7fe      	b.n	8025238 <block_prepare_used+0xa>
    return tlsf_cast(int, block->size & block_header_free_bit);
 802523a:	684b      	ldr	r3, [r1, #4]
    tlsf_assert(block_is_free(block) && "block must be free");
 802523c:	07d9      	lsls	r1, r3, #31
 802523e:	d400      	bmi.n	8025242 <block_prepare_used+0x14>
 8025240:	e7fe      	b.n	8025240 <block_prepare_used+0x12>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025242:	f023 0303 	bic.w	r3, r3, #3
    return block_size(block) >= sizeof(block_header_t) + size;
 8025246:	f102 0110 	add.w	r1, r2, #16
    if(block_can_split(block, size)) {
 802524a:	428b      	cmp	r3, r1
 802524c:	d30e      	bcc.n	802526c <block_prepare_used+0x3e>
        block_header_t * remaining_block = block_split(block, size);
 802524e:	4611      	mov	r1, r2
 8025250:	4620      	mov	r0, r4
 8025252:	f7ff ff46 	bl	80250e2 <block_split>
 8025256:	4601      	mov	r1, r0
        block_link_next(block);
 8025258:	4620      	mov	r0, r4
 802525a:	f7ff ff3c 	bl	80250d6 <block_link_next>
    block->size |= block_header_prev_free_bit;
 802525e:	684b      	ldr	r3, [r1, #4]
        block_insert(control, remaining_block);
 8025260:	4628      	mov	r0, r5
    block->size |= block_header_prev_free_bit;
 8025262:	f043 0302 	orr.w	r3, r3, #2
 8025266:	604b      	str	r3, [r1, #4]
        block_insert(control, remaining_block);
 8025268:	f7ff ffb3 	bl	80251d2 <block_insert>
    block_header_t * next = block_next(block);
 802526c:	4620      	mov	r0, r4
    return tlsf_cast(void *,
 802526e:	3408      	adds	r4, #8
    block_header_t * next = block_next(block);
 8025270:	f7ff ff28 	bl	80250c4 <block_next>
    block->size &= ~block_header_prev_free_bit;
 8025274:	6843      	ldr	r3, [r0, #4]
 8025276:	f023 0302 	bic.w	r3, r3, #2
 802527a:	6043      	str	r3, [r0, #4]
    block->size &= ~block_header_free_bit;
 802527c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8025280:	f023 0301 	bic.w	r3, r3, #1
 8025284:	f844 3c04 	str.w	r3, [r4, #-4]
        block_trim_free(control, block, size);
        block_mark_as_used(block);
        p = block_to_ptr(block);
    }
    return p;
}
 8025288:	4620      	mov	r0, r4
 802528a:	bd38      	pop	{r3, r4, r5, pc}

0802528c <block_remove>:
{
 802528c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802528e:	4605      	mov	r5, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025290:	6848      	ldr	r0, [r1, #4]
{
 8025292:	460c      	mov	r4, r1
    mapping_insert(block_size(block), &fl, &sl);
 8025294:	aa01      	add	r2, sp, #4
 8025296:	4669      	mov	r1, sp
 8025298:	f020 0003 	bic.w	r0, r0, #3
 802529c:	f7ff ff86 	bl	80251ac <mapping_insert>
    remove_free_block(control, block, fl, sl);
 80252a0:	4621      	mov	r1, r4
 80252a2:	4628      	mov	r0, r5
 80252a4:	e9dd 2300 	ldrd	r2, r3, [sp]
}
 80252a8:	b003      	add	sp, #12
 80252aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    remove_free_block(control, block, fl, sl);
 80252ae:	f7ff bf5a 	b.w	8025166 <remove_free_block>

080252b2 <block_locate_free>:
    int fl = 0, sl = 0;
 80252b2:	2300      	movs	r3, #0
{
 80252b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80252b6:	4604      	mov	r4, r0
    if(size) {
 80252b8:	460d      	mov	r5, r1
    int fl = 0, sl = 0;
 80252ba:	e9cd 3300 	strd	r3, r3, [sp]
    if(size) {
 80252be:	b919      	cbnz	r1, 80252c8 <block_locate_free+0x16>
            block = search_suitable_block(control, &fl, &sl);
 80252c0:	2600      	movs	r6, #0
}
 80252c2:	4630      	mov	r0, r6
 80252c4:	b002      	add	sp, #8
 80252c6:	bd70      	pop	{r4, r5, r6, pc}
    if(size >= SMALL_BLOCK_SIZE) {
 80252c8:	297f      	cmp	r1, #127	; 0x7f
    mapping_insert(size, fli, sli);
 80252ca:	aa01      	add	r2, sp, #4
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 80252cc:	bf85      	ittet	hi
 80252ce:	fab1 f381 	clzhi	r3, r1
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 80252d2:	2001      	movhi	r0, #1
 80252d4:	4608      	movls	r0, r1
 80252d6:	f1c3 031a 	rsbhi	r3, r3, #26
 80252da:	bf82      	ittt	hi
 80252dc:	4098      	lslhi	r0, r3
 80252de:	f100 30ff 	addhi.w	r0, r0, #4294967295
        size += round;
 80252e2:	1840      	addhi	r0, r0, r1
    mapping_insert(size, fli, sli);
 80252e4:	4669      	mov	r1, sp
 80252e6:	f7ff ff61 	bl	80251ac <mapping_insert>
        if(fl < FL_INDEX_COUNT) {
 80252ea:	9a00      	ldr	r2, [sp, #0]
 80252ec:	2a08      	cmp	r2, #8
 80252ee:	dce7      	bgt.n	80252c0 <block_locate_free+0xe>
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 80252f0:	f04f 31ff 	mov.w	r1, #4294967295
 80252f4:	9b01      	ldr	r3, [sp, #4]
 80252f6:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 80252fa:	fa01 f303 	lsl.w	r3, r1, r3
 80252fe:	6940      	ldr	r0, [r0, #20]
    if(!sl_map) {
 8025300:	4003      	ands	r3, r0
 8025302:	d10f      	bne.n	8025324 <block_locate_free+0x72>
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 8025304:	3201      	adds	r2, #1
 8025306:	fa01 f302 	lsl.w	r3, r1, r2
 802530a:	6922      	ldr	r2, [r4, #16]
        if(!fl_map) {
 802530c:	401a      	ands	r2, r3
 802530e:	d0d7      	beq.n	80252c0 <block_locate_free+0xe>
    return __builtin_ffs(word) - 1;
 8025310:	fa92 f2a2 	rbit	r2, r2
 8025314:	fab2 f282 	clz	r2, r2
        sl_map = control->sl_bitmap[fl];
 8025318:	eb04 0382 	add.w	r3, r4, r2, lsl #2
        *fli = fl;
 802531c:	9200      	str	r2, [sp, #0]
        sl_map = control->sl_bitmap[fl];
 802531e:	695b      	ldr	r3, [r3, #20]
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 8025320:	b903      	cbnz	r3, 8025324 <block_locate_free+0x72>
 8025322:	e7fe      	b.n	8025322 <block_locate_free+0x70>
    return __builtin_ffs(word) - 1;
 8025324:	fa93 f3a3 	rbit	r3, r3
 8025328:	fab3 f383 	clz	r3, r3
    return control->blocks[fl][sl];
 802532c:	eb03 1242 	add.w	r2, r3, r2, lsl #5
    *sli = sl;
 8025330:	9301      	str	r3, [sp, #4]
    return control->blocks[fl][sl];
 8025332:	320e      	adds	r2, #14
 8025334:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    if(block) {
 8025338:	2e00      	cmp	r6, #0
 802533a:	d0c1      	beq.n	80252c0 <block_locate_free+0xe>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802533c:	6872      	ldr	r2, [r6, #4]
 802533e:	f022 0203 	bic.w	r2, r2, #3
        tlsf_assert(block_size(block) >= size);
 8025342:	4295      	cmp	r5, r2
 8025344:	d900      	bls.n	8025348 <block_locate_free+0x96>
 8025346:	e7fe      	b.n	8025346 <block_locate_free+0x94>
        remove_free_block(control, block, fl, sl);
 8025348:	9a00      	ldr	r2, [sp, #0]
 802534a:	4631      	mov	r1, r6
 802534c:	4620      	mov	r0, r4
 802534e:	f7ff ff0a 	bl	8025166 <remove_free_block>
    return block;
 8025352:	e7b6      	b.n	80252c2 <block_locate_free+0x10>

08025354 <block_merge_next>:
{
 8025354:	b538      	push	{r3, r4, r5, lr}
 8025356:	4602      	mov	r2, r0
    block_header_t * next = block_next(block);
 8025358:	4608      	mov	r0, r1
 802535a:	f7ff feb3 	bl	80250c4 <block_next>
{
 802535e:	460c      	mov	r4, r1
    tlsf_assert(next && "next physical block can't be null");
 8025360:	4605      	mov	r5, r0
 8025362:	b900      	cbnz	r0, 8025366 <block_merge_next+0x12>
 8025364:	e7fe      	b.n	8025364 <block_merge_next+0x10>
    if(block_is_free(next)) {
 8025366:	6843      	ldr	r3, [r0, #4]
 8025368:	07db      	lsls	r3, r3, #31
 802536a:	d514      	bpl.n	8025396 <block_merge_next+0x42>
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 802536c:	684b      	ldr	r3, [r1, #4]
 802536e:	2b03      	cmp	r3, #3
 8025370:	d800      	bhi.n	8025374 <block_merge_next+0x20>
 8025372:	e7fe      	b.n	8025372 <block_merge_next+0x1e>
        block_remove(control, next);
 8025374:	4601      	mov	r1, r0
 8025376:	4610      	mov	r0, r2
 8025378:	f7ff ff88 	bl	802528c <block_remove>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802537c:	6862      	ldr	r2, [r4, #4]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 802537e:	2a03      	cmp	r2, #3
 8025380:	d800      	bhi.n	8025384 <block_merge_next+0x30>
 8025382:	e7fe      	b.n	8025382 <block_merge_next+0x2e>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025384:	686b      	ldr	r3, [r5, #4]
    prev->size += block_size(block) + block_header_overhead;
 8025386:	3204      	adds	r2, #4
    block_link_next(prev);
 8025388:	4620      	mov	r0, r4
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802538a:	f023 0303 	bic.w	r3, r3, #3
    prev->size += block_size(block) + block_header_overhead;
 802538e:	4413      	add	r3, r2
 8025390:	6063      	str	r3, [r4, #4]
    block_link_next(prev);
 8025392:	f7ff fea0 	bl	80250d6 <block_link_next>
}
 8025396:	4620      	mov	r0, r4
 8025398:	bd38      	pop	{r3, r4, r5, pc}

0802539a <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 802539a:	b538      	push	{r3, r4, r5, lr}
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 802539c:	3a08      	subs	r2, #8

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 802539e:	f011 0303 	ands.w	r3, r1, #3
{
 80253a2:	460c      	mov	r4, r1
    return x - (x & (align - 1));
 80253a4:	f022 0203 	bic.w	r2, r2, #3
    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 80253a8:	d115      	bne.n	80253d6 <lv_tlsf_add_pool+0x3c>
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 80253aa:	f1a2 050c 	sub.w	r5, r2, #12
 80253ae:	f647 71f4 	movw	r1, #32756	; 0x7ff4
 80253b2:	428d      	cmp	r5, r1
 80253b4:	d811      	bhi.n	80253da <lv_tlsf_add_pool+0x40>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 80253b6:	4625      	mov	r5, r4
    block->size &= ~block_header_prev_free_bit;
 80253b8:	f042 0201 	orr.w	r2, r2, #1
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 80253bc:	f855 3904 	ldr.w	r3, [r5], #-4
    block->size &= ~block_header_prev_free_bit;
 80253c0:	606a      	str	r2, [r5, #4]
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
    block_set_size(block, pool_bytes);
    block_set_free(block);
    block_set_prev_used(block);
    block_insert(tlsf_cast(control_t *, tlsf), block);
 80253c2:	4629      	mov	r1, r5
 80253c4:	f7ff ff05 	bl	80251d2 <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 80253c8:	4628      	mov	r0, r5
 80253ca:	f7ff fe84 	bl	80250d6 <block_link_next>
    block->size |= block_header_prev_free_bit;
 80253ce:	2302      	movs	r3, #2
 80253d0:	6043      	str	r3, [r0, #4]
    block_set_size(next, 0);
    block_set_used(next);
    block_set_prev_free(next);

    return mem;
}
 80253d2:	4620      	mov	r0, r4
 80253d4:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 80253d6:	2400      	movs	r4, #0
 80253d8:	e7fb      	b.n	80253d2 <lv_tlsf_add_pool+0x38>
 80253da:	461c      	mov	r4, r3
 80253dc:	e7f9      	b.n	80253d2 <lv_tlsf_add_pool+0x38>

080253de <lv_tlsf_create>:
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 80253de:	f010 0103 	ands.w	r1, r0, #3
{
 80253e2:	b530      	push	{r4, r5, lr}
    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 80253e4:	d113      	bne.n	802540e <lv_tlsf_create+0x30>
    control->fl_bitmap = 0;
 80253e6:	4602      	mov	r2, r0
 80253e8:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80253ec:	f200 44b4 	addw	r4, r0, #1204	; 0x4b4
    control->block_null.prev_free = &control->block_null;
 80253f0:	e9c0 0002 	strd	r0, r0, [r0, #8]
    control->fl_bitmap = 0;
 80253f4:	f842 1f10 	str.w	r1, [r2, #16]!
        control->sl_bitmap[i] = 0;
 80253f8:	f103 0580 	add.w	r5, r3, #128	; 0x80
 80253fc:	f842 1f04 	str.w	r1, [r2, #4]!
            control->blocks[i][j] = &control->block_null;
 8025400:	f843 0f04 	str.w	r0, [r3, #4]!
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8025404:	42ab      	cmp	r3, r5
 8025406:	d1fb      	bne.n	8025400 <lv_tlsf_create+0x22>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8025408:	429c      	cmp	r4, r3
 802540a:	d1f5      	bne.n	80253f8 <lv_tlsf_create+0x1a>
    }

    control_constructor(tlsf_cast(control_t *, mem));

    return tlsf_cast(lv_tlsf_t, mem);
}
 802540c:	bd30      	pop	{r4, r5, pc}
        return 0;
 802540e:	2000      	movs	r0, #0
 8025410:	e7fc      	b.n	802540c <lv_tlsf_create+0x2e>

08025412 <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 8025412:	b570      	push	{r4, r5, r6, lr}
 8025414:	460e      	mov	r6, r1
 8025416:	4605      	mov	r5, r0
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 8025418:	f7ff ffe1 	bl	80253de <lv_tlsf_create>
 802541c:	4604      	mov	r4, r0
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 802541e:	f5a6 6297 	sub.w	r2, r6, #1208	; 0x4b8
 8025422:	f505 6197 	add.w	r1, r5, #1208	; 0x4b8
 8025426:	f7ff ffb8 	bl	802539a <lv_tlsf_add_pool>
    return tlsf;
}
 802542a:	4620      	mov	r0, r4
 802542c:	bd70      	pop	{r4, r5, r6, pc}

0802542e <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 802542e:	b538      	push	{r3, r4, r5, lr}
 8025430:	4604      	mov	r4, r0
 8025432:	4608      	mov	r0, r1
    control_t * control = tlsf_cast(control_t *, tlsf);
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8025434:	2104      	movs	r1, #4
 8025436:	f7ff fe84 	bl	8025142 <adjust_request_size>
 802543a:	4605      	mov	r5, r0
    block_header_t * block = block_locate_free(control, adjust);
 802543c:	4601      	mov	r1, r0
 802543e:	4620      	mov	r0, r4
 8025440:	f7ff ff37 	bl	80252b2 <block_locate_free>
    return block_prepare_used(control, block, adjust);
 8025444:	462a      	mov	r2, r5
    block_header_t * block = block_locate_free(control, adjust);
 8025446:	4601      	mov	r1, r0
    return block_prepare_used(control, block, adjust);
 8025448:	4620      	mov	r0, r4
}
 802544a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return block_prepare_used(control, block, adjust);
 802544e:	f7ff beee 	b.w	802522e <block_prepare_used>

08025452 <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 8025452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025454:	4606      	mov	r6, r0
    size_t size = 0;
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 8025456:	460c      	mov	r4, r1
 8025458:	2900      	cmp	r1, #0
 802545a:	d039      	beq.n	80254d0 <lv_tlsf_free+0x7e>
    return tlsf_cast(int, block->size & block_header_free_bit);
 802545c:	f851 7c04 	ldr.w	r7, [r1, #-4]
        control_t * control = tlsf_cast(control_t *, tlsf);
        block_header_t * block = block_from_ptr(ptr);
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8025460:	07f9      	lsls	r1, r7, #31
 8025462:	d500      	bpl.n	8025466 <lv_tlsf_free+0x14>
 8025464:	e7fe      	b.n	8025464 <lv_tlsf_free+0x12>
    return tlsf_cast(block_header_t *,
 8025466:	f1a4 0508 	sub.w	r5, r4, #8
    block_header_t * next = block_link_next(block);
 802546a:	4628      	mov	r0, r5
 802546c:	f7ff fe33 	bl	80250d6 <block_link_next>
    block->size |= block_header_prev_free_bit;
 8025470:	6843      	ldr	r3, [r0, #4]
 8025472:	f043 0302 	orr.w	r3, r3, #2
 8025476:	6043      	str	r3, [r0, #4]
    block->size |= block_header_free_bit;
 8025478:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802547c:	f043 0201 	orr.w	r2, r3, #1
 8025480:	f844 2c04 	str.w	r2, [r4, #-4]
    if(block_is_prev_free(block)) {
 8025484:	079a      	lsls	r2, r3, #30
 8025486:	d519      	bpl.n	80254bc <lv_tlsf_free+0x6a>
    return block->prev_phys_block;
 8025488:	f854 5c08 	ldr.w	r5, [r4, #-8]
        tlsf_assert(prev && "prev physical block can't be null");
 802548c:	b905      	cbnz	r5, 8025490 <lv_tlsf_free+0x3e>
 802548e:	e7fe      	b.n	802548e <lv_tlsf_free+0x3c>
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8025490:	686b      	ldr	r3, [r5, #4]
 8025492:	07db      	lsls	r3, r3, #31
 8025494:	d400      	bmi.n	8025498 <lv_tlsf_free+0x46>
 8025496:	e7fe      	b.n	8025496 <lv_tlsf_free+0x44>
        block_remove(control, prev);
 8025498:	4629      	mov	r1, r5
 802549a:	4630      	mov	r0, r6
 802549c:	f7ff fef6 	bl	802528c <block_remove>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80254a0:	686a      	ldr	r2, [r5, #4]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 80254a2:	2a03      	cmp	r2, #3
 80254a4:	d800      	bhi.n	80254a8 <lv_tlsf_free+0x56>
 80254a6:	e7fe      	b.n	80254a6 <lv_tlsf_free+0x54>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80254a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    block_link_next(prev);
 80254ac:	4628      	mov	r0, r5
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80254ae:	f023 0303 	bic.w	r3, r3, #3
    prev->size += block_size(block) + block_header_overhead;
 80254b2:	4413      	add	r3, r2
 80254b4:	3304      	adds	r3, #4
 80254b6:	606b      	str	r3, [r5, #4]
    block_link_next(prev);
 80254b8:	f7ff fe0d 	bl	80250d6 <block_link_next>
        size = block->size;
        block_mark_as_free(block);
        block = block_merge_prev(control, block);
        block = block_merge_next(control, block);
 80254bc:	4629      	mov	r1, r5
 80254be:	4630      	mov	r0, r6
 80254c0:	f7ff ff48 	bl	8025354 <block_merge_next>
 80254c4:	4601      	mov	r1, r0
        block_insert(control, block);
 80254c6:	4630      	mov	r0, r6
 80254c8:	f7ff fe83 	bl	80251d2 <block_insert>
    }

    return size;
}
 80254cc:	4638      	mov	r0, r7
 80254ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t size = 0;
 80254d0:	460f      	mov	r7, r1
    return size;
 80254d2:	e7fb      	b.n	80254cc <lv_tlsf_free+0x7a>

080254d4 <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 80254d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254d8:	4606      	mov	r6, r0
 80254da:	4615      	mov	r5, r2
    control_t * control = tlsf_cast(control_t *, tlsf);
    void * p = 0;

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 80254dc:	460c      	mov	r4, r1
 80254de:	b131      	cbz	r1, 80254ee <lv_tlsf_realloc+0x1a>
 80254e0:	b952      	cbnz	r2, 80254f8 <lv_tlsf_realloc+0x24>
        lv_tlsf_free(tlsf, ptr);
 80254e2:	f7ff ffb6 	bl	8025452 <lv_tlsf_free>
        const size_t cursize = block_size(block);
        const size_t combined = cursize + block_size(next) + block_header_overhead;
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
        if(size > cursize && adjust == 0) {
            /* The request is probably too large, fail */
            return NULL;
 80254e6:	2700      	movs	r7, #0
            p = ptr;
        }
    }

    return p;
}
 80254e8:	4638      	mov	r0, r7
 80254ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        p = lv_tlsf_malloc(tlsf, size);
 80254ee:	4611      	mov	r1, r2
}
 80254f0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        p = lv_tlsf_malloc(tlsf, size);
 80254f4:	f7ff bf9b 	b.w	802542e <lv_tlsf_malloc>
    return tlsf_cast(block_header_t *,
 80254f8:	f1a1 0908 	sub.w	r9, r1, #8
        block_header_t * next = block_next(block);
 80254fc:	4648      	mov	r0, r9
 80254fe:	f7ff fde1 	bl	80250c4 <block_next>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025502:	f851 bc04 	ldr.w	fp, [r1, #-4]
 8025506:	f8d0 8004 	ldr.w	r8, [r0, #4]
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 802550a:	2104      	movs	r1, #4
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802550c:	f02b 0a03 	bic.w	sl, fp, #3
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8025510:	4610      	mov	r0, r2
 8025512:	f7ff fe16 	bl	8025142 <adjust_request_size>
 8025516:	4607      	mov	r7, r0
        if(size > cursize && adjust == 0) {
 8025518:	4555      	cmp	r5, sl
 802551a:	d901      	bls.n	8025520 <lv_tlsf_realloc+0x4c>
 802551c:	2800      	cmp	r0, #0
 802551e:	d0e2      	beq.n	80254e6 <lv_tlsf_realloc+0x12>
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8025520:	f01b 0f01 	tst.w	fp, #1
 8025524:	d000      	beq.n	8025528 <lv_tlsf_realloc+0x54>
 8025526:	e7fe      	b.n	8025526 <lv_tlsf_realloc+0x52>
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 8025528:	45ba      	cmp	sl, r7
 802552a:	d22d      	bcs.n	8025588 <lv_tlsf_realloc+0xb4>
 802552c:	f018 0f01 	tst.w	r8, #1
 8025530:	d006      	beq.n	8025540 <lv_tlsf_realloc+0x6c>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025532:	f028 0803 	bic.w	r8, r8, #3
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 8025536:	f10a 0304 	add.w	r3, sl, #4
 802553a:	4498      	add	r8, r3
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 802553c:	45b8      	cmp	r8, r7
 802553e:	d212      	bcs.n	8025566 <lv_tlsf_realloc+0x92>
            p = lv_tlsf_malloc(tlsf, size);
 8025540:	4629      	mov	r1, r5
 8025542:	4630      	mov	r0, r6
 8025544:	f7ff ff73 	bl	802542e <lv_tlsf_malloc>
            if(p) {
 8025548:	4607      	mov	r7, r0
 802554a:	2800      	cmp	r0, #0
 802554c:	d0cc      	beq.n	80254e8 <lv_tlsf_realloc+0x14>
    return memcpy(dst, src, len);
 802554e:	4555      	cmp	r5, sl
 8025550:	462a      	mov	r2, r5
 8025552:	4621      	mov	r1, r4
 8025554:	bf28      	it	cs
 8025556:	4652      	movcs	r2, sl
 8025558:	f7f5 f8d7 	bl	801a70a <memcpy>
                lv_tlsf_free(tlsf, ptr);
 802555c:	4621      	mov	r1, r4
 802555e:	4630      	mov	r0, r6
 8025560:	f7ff ff77 	bl	8025452 <lv_tlsf_free>
 8025564:	e7c0      	b.n	80254e8 <lv_tlsf_realloc+0x14>
                block_merge_next(control, block);
 8025566:	4649      	mov	r1, r9
 8025568:	4630      	mov	r0, r6
 802556a:	f7ff fef3 	bl	8025354 <block_merge_next>
    block_header_t * next = block_next(block);
 802556e:	4648      	mov	r0, r9
 8025570:	f7ff fda8 	bl	80250c4 <block_next>
    block->size &= ~block_header_prev_free_bit;
 8025574:	6843      	ldr	r3, [r0, #4]
 8025576:	f023 0302 	bic.w	r3, r3, #2
 802557a:	6043      	str	r3, [r0, #4]
    block->size &= ~block_header_free_bit;
 802557c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8025580:	f023 0301 	bic.w	r3, r3, #1
 8025584:	f844 3c04 	str.w	r3, [r4, #-4]
    return tlsf_cast(int, block->size & block_header_free_bit);
 8025588:	f854 3c04 	ldr.w	r3, [r4, #-4]
    tlsf_assert(!block_is_free(block) && "block must be used");
 802558c:	07da      	lsls	r2, r3, #31
 802558e:	d500      	bpl.n	8025592 <lv_tlsf_realloc+0xbe>
 8025590:	e7fe      	b.n	8025590 <lv_tlsf_realloc+0xbc>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025592:	f023 0303 	bic.w	r3, r3, #3
    return block_size(block) >= sizeof(block_header_t) + size;
 8025596:	f107 0210 	add.w	r2, r7, #16
    if(block_can_split(block, size)) {
 802559a:	4293      	cmp	r3, r2
 802559c:	d30f      	bcc.n	80255be <lv_tlsf_realloc+0xea>
        block_header_t * remaining_block = block_split(block, size);
 802559e:	4639      	mov	r1, r7
 80255a0:	4648      	mov	r0, r9
 80255a2:	f7ff fd9e 	bl	80250e2 <block_split>
    block->size &= ~block_header_prev_free_bit;
 80255a6:	6843      	ldr	r3, [r0, #4]
        block_header_t * remaining_block = block_split(block, size);
 80255a8:	4601      	mov	r1, r0
    block->size &= ~block_header_prev_free_bit;
 80255aa:	f023 0302 	bic.w	r3, r3, #2
 80255ae:	6043      	str	r3, [r0, #4]
        remaining_block = block_merge_next(control, remaining_block);
 80255b0:	4630      	mov	r0, r6
 80255b2:	f7ff fecf 	bl	8025354 <block_merge_next>
 80255b6:	4601      	mov	r1, r0
        block_insert(control, remaining_block);
 80255b8:	4630      	mov	r0, r6
 80255ba:	f7ff fe0a 	bl	80251d2 <block_insert>
            return NULL;
 80255be:	4627      	mov	r7, r4
 80255c0:	e792      	b.n	80254e8 <lv_tlsf_realloc+0x14>

080255c2 <lv_txt_utf8_size>:
    if(LV_IS_ASCII(str[0]))
 80255c2:	f990 2000 	ldrsb.w	r2, [r0]
 80255c6:	7803      	ldrb	r3, [r0, #0]
 80255c8:	2a00      	cmp	r2, #0
 80255ca:	da0f      	bge.n	80255ec <lv_txt_utf8_size+0x2a>
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 80255cc:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 80255d0:	2ac0      	cmp	r2, #192	; 0xc0
 80255d2:	d00d      	beq.n	80255f0 <lv_txt_utf8_size+0x2e>
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 80255d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80255d8:	2ae0      	cmp	r2, #224	; 0xe0
 80255da:	d00b      	beq.n	80255f4 <lv_txt_utf8_size+0x32>
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 80255dc:	f003 00f8 	and.w	r0, r3, #248	; 0xf8
 80255e0:	f1a0 03f0 	sub.w	r3, r0, #240	; 0xf0
 80255e4:	4258      	negs	r0, r3
 80255e6:	4158      	adcs	r0, r3
 80255e8:	0080      	lsls	r0, r0, #2
 80255ea:	4770      	bx	lr
        return 1;
 80255ec:	2001      	movs	r0, #1
 80255ee:	4770      	bx	lr
        return 2;
 80255f0:	2002      	movs	r0, #2
 80255f2:	4770      	bx	lr
        return 3;
 80255f4:	2003      	movs	r0, #3
}
 80255f6:	4770      	bx	lr

080255f8 <lv_txt_utf8_next>:
    uint32_t i_tmp = 0;
 80255f8:	2300      	movs	r3, #0
{
 80255fa:	4602      	mov	r2, r0
 80255fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i_tmp = 0;
 80255fe:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 8025600:	b901      	cbnz	r1, 8025604 <lv_txt_utf8_next+0xc>
 8025602:	a901      	add	r1, sp, #4
    if(LV_IS_ASCII(txt[*i])) {
 8025604:	680b      	ldr	r3, [r1, #0]
 8025606:	56d5      	ldrsb	r5, [r2, r3]
        (*i)++;
 8025608:	1c5c      	adds	r4, r3, #1
    if(LV_IS_ASCII(txt[*i])) {
 802560a:	5cd0      	ldrb	r0, [r2, r3]
 802560c:	2d00      	cmp	r5, #0
 802560e:	db02      	blt.n	8025616 <lv_txt_utf8_next+0x1e>
        (*i)++;
 8025610:	600c      	str	r4, [r1, #0]
}
 8025612:	b002      	add	sp, #8
 8025614:	bd70      	pop	{r4, r5, r6, pc}
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 8025616:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 802561a:	2dc0      	cmp	r5, #192	; 0xc0
 802561c:	d10e      	bne.n	802563c <lv_txt_utf8_next+0x44>
            (*i)++;
 802561e:	600c      	str	r4, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8025620:	5d12      	ldrb	r2, [r2, r4]
 8025622:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 8025626:	2c80      	cmp	r4, #128	; 0x80
 8025628:	d14c      	bne.n	80256c4 <lv_txt_utf8_next+0xcc>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 802562a:	0180      	lsls	r0, r0, #6
            result += (txt[*i] & 0x3F);
 802562c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            (*i)++;
 8025630:	3302      	adds	r3, #2
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8025632:	f400 60f8 	and.w	r0, r0, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 8025636:	4410      	add	r0, r2
            (*i)++;
 8025638:	600b      	str	r3, [r1, #0]
 802563a:	e7ea      	b.n	8025612 <lv_txt_utf8_next+0x1a>
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 802563c:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 8025640:	2de0      	cmp	r5, #224	; 0xe0
 8025642:	d117      	bne.n	8025674 <lv_txt_utf8_next+0x7c>
            (*i)++;
 8025644:	600c      	str	r4, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8025646:	5d14      	ldrb	r4, [r2, r4]
 8025648:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 802564c:	2d80      	cmp	r5, #128	; 0x80
 802564e:	d139      	bne.n	80256c4 <lv_txt_utf8_next+0xcc>
            (*i)++;
 8025650:	1c9d      	adds	r5, r3, #2
 8025652:	600d      	str	r5, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8025654:	5d52      	ldrb	r2, [r2, r5]
 8025656:	f002 05c0 	and.w	r5, r2, #192	; 0xc0
 802565a:	2d80      	cmp	r5, #128	; 0x80
 802565c:	d132      	bne.n	80256c4 <lv_txt_utf8_next+0xcc>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 802565e:	0300      	lsls	r0, r0, #12
            result += (txt[*i] & 0x3F);
 8025660:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8025664:	01a4      	lsls	r4, r4, #6
            (*i)++;
 8025666:	3303      	adds	r3, #3
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8025668:	b280      	uxth	r0, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 802566a:	f404 647c 	and.w	r4, r4, #4032	; 0xfc0
 802566e:	4410      	add	r0, r2
            result += (txt[*i] & 0x3F);
 8025670:	4420      	add	r0, r4
            (*i)++;
 8025672:	e7e1      	b.n	8025638 <lv_txt_utf8_next+0x40>
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 8025674:	f000 05f8 	and.w	r5, r0, #248	; 0xf8
            (*i)++;
 8025678:	600c      	str	r4, [r1, #0]
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 802567a:	2df0      	cmp	r5, #240	; 0xf0
 802567c:	d122      	bne.n	80256c4 <lv_txt_utf8_next+0xcc>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 802567e:	5d14      	ldrb	r4, [r2, r4]
 8025680:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8025684:	2d80      	cmp	r5, #128	; 0x80
 8025686:	d11d      	bne.n	80256c4 <lv_txt_utf8_next+0xcc>
            (*i)++;
 8025688:	1c9d      	adds	r5, r3, #2
 802568a:	600d      	str	r5, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 802568c:	5d55      	ldrb	r5, [r2, r5]
 802568e:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 8025692:	2e80      	cmp	r6, #128	; 0x80
 8025694:	d116      	bne.n	80256c4 <lv_txt_utf8_next+0xcc>
            (*i)++;
 8025696:	1cde      	adds	r6, r3, #3
 8025698:	600e      	str	r6, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 802569a:	5d92      	ldrb	r2, [r2, r6]
 802569c:	f002 06c0 	and.w	r6, r2, #192	; 0xc0
 80256a0:	2e80      	cmp	r6, #128	; 0x80
 80256a2:	d10f      	bne.n	80256c4 <lv_txt_utf8_next+0xcc>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 80256a4:	0480      	lsls	r0, r0, #18
            result += txt[*i] & 0x3F;
 80256a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80256aa:	0324      	lsls	r4, r4, #12
            (*i)++;
 80256ac:	3304      	adds	r3, #4
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80256ae:	01ad      	lsls	r5, r5, #6
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 80256b0:	f400 10e0 	and.w	r0, r0, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80256b4:	f404 347c 	and.w	r4, r4, #258048	; 0x3f000
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80256b8:	f405 657c 	and.w	r5, r5, #4032	; 0xfc0
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80256bc:	4304      	orrs	r4, r0
            result += txt[*i] & 0x3F;
 80256be:	4415      	add	r5, r2
 80256c0:	1928      	adds	r0, r5, r4
            (*i)++;
 80256c2:	e7b9      	b.n	8025638 <lv_txt_utf8_next+0x40>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80256c4:	2000      	movs	r0, #0
 80256c6:	e7a4      	b.n	8025612 <lv_txt_utf8_next+0x1a>

080256c8 <lv_txt_unicode_to_utf8>:
    if(letter_uni < 128) return letter_uni;
 80256c8:	287f      	cmp	r0, #127	; 0x7f
{
 80256ca:	b082      	sub	sp, #8
    if(letter_uni < 128) return letter_uni;
 80256cc:	d915      	bls.n	80256fa <lv_txt_unicode_to_utf8+0x32>
    if(letter_uni < 0x0800) {
 80256ce:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80256d2:	d214      	bcs.n	80256fe <lv_txt_unicode_to_utf8+0x36>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 80256d4:	f3c0 1387 	ubfx	r3, r0, #6, #8
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 80256d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80256dc:	2100      	movs	r1, #0
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 80256de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 80256e2:	f040 0280 	orr.w	r2, r0, #128	; 0x80
        bytes[3] = 0;
 80256e6:	2000      	movs	r0, #0
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 80256e8:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 80256ec:	f88d 2005 	strb.w	r2, [sp, #5]
        bytes[2] = 0;
 80256f0:	f88d 1006 	strb.w	r1, [sp, #6]
        bytes[3] = 0;
 80256f4:	f88d 0007 	strb.w	r0, [sp, #7]
    return *res_p;
 80256f8:	9801      	ldr	r0, [sp, #4]
}
 80256fa:	b002      	add	sp, #8
 80256fc:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
 80256fe:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8025702:	d20c      	bcs.n	802571e <lv_txt_unicode_to_utf8+0x56>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 8025704:	f3c0 3307 	ubfx	r3, r0, #12, #8
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8025708:	f3c0 1285 	ubfx	r2, r0, #6, #6
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 802570c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 8025710:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8025714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8025718:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 802571c:	e7e3      	b.n	80256e6 <lv_txt_unicode_to_utf8+0x1e>
    else if(letter_uni < 0x110000) {
 802571e:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8025722:	d210      	bcs.n	8025746 <lv_txt_unicode_to_utf8+0x7e>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 8025724:	f3c0 4387 	ubfx	r3, r0, #18, #8
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 8025728:	f3c0 3205 	ubfx	r2, r0, #12, #6
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 802572c:	f3c0 1185 	ubfx	r1, r0, #6, #6
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8025730:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 8025734:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 8025738:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 802573c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8025740:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8025744:	e7d0      	b.n	80256e8 <lv_txt_unicode_to_utf8+0x20>
        return 0;
 8025746:	2000      	movs	r0, #0
 8025748:	e7d7      	b.n	80256fa <lv_txt_unicode_to_utf8+0x32>

0802574a <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 802574a:	2923      	cmp	r1, #35	; 0x23
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 802574c:	7803      	ldrb	r3, [r0, #0]
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 802574e:	d10f      	bne.n	8025770 <_lv_txt_is_cmd+0x26>
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 8025750:	b913      	cbnz	r3, 8025758 <_lv_txt_is_cmd+0xe>
            *state = LV_TEXT_CMD_STATE_PAR;
 8025752:	2301      	movs	r3, #1
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8025754:	7003      	strb	r3, [r0, #0]
 8025756:	e009      	b.n	802576c <_lv_txt_is_cmd+0x22>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 8025758:	2b01      	cmp	r3, #1
 802575a:	f04f 0200 	mov.w	r2, #0
 802575e:	d102      	bne.n	8025766 <_lv_txt_is_cmd+0x1c>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8025760:	7002      	strb	r2, [r0, #0]
    bool ret = false;
 8025762:	2000      	movs	r0, #0
 8025764:	4770      	bx	lr
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 8025766:	2b02      	cmp	r3, #2
 8025768:	d1fb      	bne.n	8025762 <_lv_txt_is_cmd+0x18>
            *state = LV_TEXT_CMD_STATE_WAIT;
 802576a:	7002      	strb	r2, [r0, #0]
            ret    = true;
 802576c:	2001      	movs	r0, #1
}
 802576e:	4770      	bx	lr
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8025770:	2b01      	cmp	r3, #1
 8025772:	d1f6      	bne.n	8025762 <_lv_txt_is_cmd+0x18>
        if(c == ' ') {
 8025774:	2920      	cmp	r1, #32
 8025776:	d1f9      	bne.n	802576c <_lv_txt_is_cmd+0x22>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8025778:	2302      	movs	r3, #2
 802577a:	e7eb      	b.n	8025754 <_lv_txt_is_cmd+0xa>

0802577c <_lv_txt_set_text_vfmt>:
{
 802577c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 8025780:	460b      	mov	r3, r1
    va_copy(ap_copy, ap);
 8025782:	9101      	str	r1, [sp, #4]
{
 8025784:	460d      	mov	r5, r1
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 8025786:	2100      	movs	r1, #0
 8025788:	4602      	mov	r2, r0
{
 802578a:	4606      	mov	r6, r0
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 802578c:	4608      	mov	r0, r1
 802578e:	f7dd faa5 	bl	8002cdc <vsnprintf>
    text = lv_mem_alloc(len + 1);
 8025792:	f100 0801 	add.w	r8, r0, #1
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 8025796:	4607      	mov	r7, r0
    text = lv_mem_alloc(len + 1);
 8025798:	4640      	mov	r0, r8
 802579a:	f7ec ff89 	bl	80126b0 <lv_mem_alloc>
 802579e:	4604      	mov	r4, r0
    LV_ASSERT_MALLOC(text);
 80257a0:	b900      	cbnz	r0, 80257a4 <_lv_txt_set_text_vfmt+0x28>
 80257a2:	e7fe      	b.n	80257a2 <_lv_txt_set_text_vfmt+0x26>
    text[len] = 0; /*Ensure NULL termination*/
 80257a4:	2300      	movs	r3, #0
    lv_vsnprintf(text, len + 1, fmt, ap);
 80257a6:	4632      	mov	r2, r6
 80257a8:	4641      	mov	r1, r8
    text[len] = 0; /*Ensure NULL termination*/
 80257aa:	55c3      	strb	r3, [r0, r7]
    lv_vsnprintf(text, len + 1, fmt, ap);
 80257ac:	462b      	mov	r3, r5
 80257ae:	f7dd fa95 	bl	8002cdc <vsnprintf>
}
 80257b2:	4620      	mov	r0, r4
 80257b4:	b002      	add	sp, #8
 80257b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080257ba <lv_txt_get_width>:
{
 80257ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80257be:	460f      	mov	r7, r1
 80257c0:	b085      	sub	sp, #20
 80257c2:	4690      	mov	r8, r2
 80257c4:	461d      	mov	r5, r3
    if(txt == NULL) return 0;
 80257c6:	4606      	mov	r6, r0
 80257c8:	b920      	cbnz	r0, 80257d4 <lv_txt_get_width+0x1a>
 80257ca:	2400      	movs	r4, #0
}
 80257cc:	4620      	mov	r0, r4
 80257ce:	b005      	add	sp, #20
 80257d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(font == NULL) return 0;
 80257d4:	2a00      	cmp	r2, #0
 80257d6:	d0f8      	beq.n	80257ca <lv_txt_get_width+0x10>
    if(txt[0] == '\0') return 0;
 80257d8:	7803      	ldrb	r3, [r0, #0]
 80257da:	2b00      	cmp	r3, #0
 80257dc:	d0f5      	beq.n	80257ca <lv_txt_get_width+0x10>
    uint32_t i                   = 0;
 80257de:	2400      	movs	r4, #0
 80257e0:	9401      	str	r4, [sp, #4]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80257e2:	f88d 4003 	strb.w	r4, [sp, #3]
    if(length != 0) {
 80257e6:	2900      	cmp	r1, #0
 80257e8:	d0ef      	beq.n	80257ca <lv_txt_get_width+0x10>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80257ea:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
 80257ee:	f009 0901 	and.w	r9, r9, #1
 80257f2:	e019      	b.n	8025828 <lv_txt_get_width+0x6e>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 80257f4:	ab01      	add	r3, sp, #4
 80257f6:	aa03      	add	r2, sp, #12
 80257f8:	a902      	add	r1, sp, #8
 80257fa:	4630      	mov	r0, r6
 80257fc:	f7ed fbbc 	bl	8012f78 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8025800:	f1b9 0f00 	cmp.w	r9, #0
 8025804:	d005      	beq.n	8025812 <lv_txt_get_width+0x58>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 8025806:	9902      	ldr	r1, [sp, #8]
 8025808:	f10d 0003 	add.w	r0, sp, #3
 802580c:	f7ff ff9d 	bl	802574a <_lv_txt_is_cmd>
 8025810:	b950      	cbnz	r0, 8025828 <lv_txt_get_width+0x6e>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8025812:	4640      	mov	r0, r8
 8025814:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8025818:	f7fe fc0d 	bl	8024036 <lv_font_get_glyph_width>
            if(char_width > 0) {
 802581c:	b203      	sxth	r3, r0
 802581e:	2b00      	cmp	r3, #0
 8025820:	dd02      	ble.n	8025828 <lv_txt_get_width+0x6e>
                width += letter_space;
 8025822:	442c      	add	r4, r5
 8025824:	4404      	add	r4, r0
 8025826:	b224      	sxth	r4, r4
        while(i < length) {
 8025828:	9b01      	ldr	r3, [sp, #4]
 802582a:	42bb      	cmp	r3, r7
 802582c:	d3e2      	bcc.n	80257f4 <lv_txt_get_width+0x3a>
        if(width > 0) {
 802582e:	2c00      	cmp	r4, #0
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 8025830:	bfc4      	itt	gt
 8025832:	1b65      	subgt	r5, r4, r5
 8025834:	b22c      	sxthgt	r4, r5
 8025836:	e7c9      	b.n	80257cc <lv_txt_get_width+0x12>

08025838 <lv_txt_get_size>:
{
 8025838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_res->x = 0;
 802583c:	2500      	movs	r5, #0
{
 802583e:	b087      	sub	sp, #28
 8025840:	4604      	mov	r4, r0
 8025842:	4616      	mov	r6, r2
 8025844:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
    if(text == NULL) return;
 8025848:	460f      	mov	r7, r1
{
 802584a:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 802584e:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
 8025852:	9303      	str	r3, [sp, #12]
    size_res->x = 0;
 8025854:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 8025856:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 8025858:	b311      	cbz	r1, 80258a0 <lv_txt_get_size+0x68>
    if(font == NULL) return;
 802585a:	b30a      	cbz	r2, 80258a0 <lv_txt_get_size+0x68>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 802585c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8025860:	f01b 0f02 	tst.w	fp, #2
 8025864:	bf18      	it	ne
 8025866:	469a      	movne	sl, r3
 8025868:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 802586c:	9304      	str	r3, [sp, #16]
    uint16_t letter_height = lv_font_get_line_height(font);
 802586e:	8913      	ldrh	r3, [r2, #8]
 8025870:	9302      	str	r3, [sp, #8]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8025872:	4443      	add	r3, r8
 8025874:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 8025876:	5d7b      	ldrb	r3, [r7, r5]
 8025878:	eb07 0905 	add.w	r9, r7, r5
 802587c:	b99b      	cbnz	r3, 80258a6 <lv_txt_get_size+0x6e>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 802587e:	b155      	cbz	r5, 8025896 <lv_txt_get_size+0x5e>
 8025880:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 8025884:	2b0a      	cmp	r3, #10
 8025886:	d001      	beq.n	802588c <lv_txt_get_size+0x54>
 8025888:	2b0d      	cmp	r3, #13
 802588a:	d104      	bne.n	8025896 <lv_txt_get_size+0x5e>
        size_res->y += letter_height + line_space;
 802588c:	9b02      	ldr	r3, [sp, #8]
 802588e:	8862      	ldrh	r2, [r4, #2]
 8025890:	4443      	add	r3, r8
 8025892:	4413      	add	r3, r2
 8025894:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 8025896:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 802589a:	bb33      	cbnz	r3, 80258ea <lv_txt_get_size+0xb2>
        size_res->y = letter_height;
 802589c:	9b04      	ldr	r3, [sp, #16]
        size_res->y -= line_space;
 802589e:	8063      	strh	r3, [r4, #2]
}
 80258a0:	b007      	add	sp, #28
 80258a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 80258a6:	2300      	movs	r3, #0
 80258a8:	9a03      	ldr	r2, [sp, #12]
 80258aa:	4631      	mov	r1, r6
 80258ac:	4648      	mov	r0, r9
 80258ae:	9300      	str	r3, [sp, #0]
 80258b0:	4653      	mov	r3, sl
 80258b2:	f8cd b004 	str.w	fp, [sp, #4]
 80258b6:	f7ed f9fd 	bl	8012cb4 <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80258ba:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80258be:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 80258c0:	4601      	mov	r1, r0
 80258c2:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80258c4:	4413      	add	r3, r2
 80258c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80258ca:	d2e9      	bcs.n	80258a0 <lv_txt_get_size+0x68>
            size_res->y += line_space;
 80258cc:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 80258ce:	4632      	mov	r2, r6
 80258d0:	9b03      	ldr	r3, [sp, #12]
 80258d2:	4648      	mov	r0, r9
 80258d4:	f8cd b000 	str.w	fp, [sp]
 80258d8:	f7ff ff6f 	bl	80257ba <lv_txt_get_width>
        size_res->x = LV_MAX(act_line_length, size_res->x);
 80258dc:	f9b4 3000 	ldrsh.w	r3, [r4]
 80258e0:	4283      	cmp	r3, r0
 80258e2:	bfb8      	it	lt
 80258e4:	4603      	movlt	r3, r0
 80258e6:	8023      	strh	r3, [r4, #0]
        line_start  = new_line_start;
 80258e8:	e7c5      	b.n	8025876 <lv_txt_get_size+0x3e>
        size_res->y -= line_space;
 80258ea:	eba3 0308 	sub.w	r3, r3, r8
 80258ee:	e7d6      	b.n	802589e <lv_txt_get_size+0x66>

080258f0 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 80258f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80258f4:	9d08      	ldr	r5, [sp, #32]
 80258f6:	4680      	mov	r8, r0
 80258f8:	460f      	mov	r7, r1
 80258fa:	4614      	mov	r4, r2
 80258fc:	4699      	mov	r9, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 80258fe:	b90c      	cbnz	r4, 8025904 <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 8025900:	4626      	mov	r6, r4
 8025902:	e012      	b.n	802592a <_lv_utils_bsearch+0x3a>
        middle += (n / 2) * size;
 8025904:	ea4f 0a54 	mov.w	sl, r4, lsr #1
        if((c = (*cmp)(key, middle)) > 0) {
 8025908:	4640      	mov	r0, r8
        middle += (n / 2) * size;
 802590a:	fb09 760a 	mla	r6, r9, sl, r7
        if((c = (*cmp)(key, middle)) > 0) {
 802590e:	4631      	mov	r1, r6
 8025910:	47a8      	blx	r5
 8025912:	2800      	cmp	r0, #0
 8025914:	dd08      	ble.n	8025928 <_lv_utils_bsearch+0x38>
            n    = (n / 2) - ((n & 1) == 0);
 8025916:	43e4      	mvns	r4, r4
            base = (middle += size);
 8025918:	eb06 0709 	add.w	r7, r6, r9
 802591c:	f004 0401 	and.w	r4, r4, #1
            n    = (n / 2) - ((n & 1) == 0);
 8025920:	ebaa 0a04 	sub.w	sl, sl, r4
{
 8025924:	4654      	mov	r4, sl
 8025926:	e7ea      	b.n	80258fe <_lv_utils_bsearch+0xe>
        else if(c < 0) {
 8025928:	d1fc      	bne.n	8025924 <_lv_utils_bsearch+0x34>
}
 802592a:	4630      	mov	r0, r6
 802592c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08025930 <get_angle>:

    if(arc_r) *arc_r = r;
}

static lv_coord_t get_angle(const lv_obj_t * obj)
{
 8025930:	b530      	push	{r4, r5, lr}
    lv_arc_t * arc = (lv_arc_t *)obj;
    uint16_t angle = arc->rotation;
    if(arc->type == LV_ARC_MODE_NORMAL) {
 8025932:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
    uint16_t angle = arc->rotation;
 8025936:	8c83      	ldrh	r3, [r0, #36]	; 0x24
    if(arc->type == LV_ARC_MODE_NORMAL) {
 8025938:	f012 0206 	ands.w	r2, r2, #6
 802593c:	d104      	bne.n	8025948 <get_angle+0x18>
        angle += arc->indic_angle_end;
 802593e:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    }
    else if(arc->type == LV_ARC_MODE_REVERSE) {
        angle += arc->indic_angle_start;
 8025940:	441a      	add	r2, r3
 8025942:	b293      	uxth	r3, r2
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
        else angle += angle_midpoint;
    }

    return angle;
}
 8025944:	b218      	sxth	r0, r3
 8025946:	bd30      	pop	{r4, r5, pc}
    else if(arc->type == LV_ARC_MODE_REVERSE) {
 8025948:	2a04      	cmp	r2, #4
 802594a:	d101      	bne.n	8025950 <get_angle+0x20>
        angle += arc->indic_angle_start;
 802594c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 802594e:	e7f7      	b.n	8025940 <get_angle+0x10>
    else if(arc->type == LV_ARC_MODE_SYMMETRICAL) {
 8025950:	2a02      	cmp	r2, #2
 8025952:	d1f7      	bne.n	8025944 <get_angle+0x14>
        int16_t bg_end = arc->bg_angle_end;
 8025954:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
        if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 8025956:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;
 8025958:	8cc5      	ldrh	r5, [r0, #38]	; 0x26
        if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 802595a:	4291      	cmp	r1, r2
        int16_t indic_end = arc->indic_angle_end;
 802595c:	8d04      	ldrh	r4, [r0, #40]	; 0x28
        if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 802595e:	bf3c      	itt	cc
 8025960:	f501 71b4 	addcc.w	r1, r1, #360	; 0x168
 8025964:	b289      	uxthcc	r1, r1
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;
 8025966:	42ac      	cmp	r4, r5
 8025968:	b209      	sxth	r1, r1
 802596a:	bf34      	ite	cc
 802596c:	f504 70b4 	addcc.w	r0, r4, #360	; 0x168
 8025970:	4620      	movcs	r0, r4
        int32_t angle_midpoint = (int32_t)(arc->bg_angle_start + bg_end) / 2;
 8025972:	440a      	add	r2, r1
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;
 8025974:	bf38      	it	cc
 8025976:	b280      	uxthcc	r0, r0
        int32_t angle_midpoint = (int32_t)(arc->bg_angle_start + bg_end) / 2;
 8025978:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        if(arc->indic_angle_start < angle_midpoint) angle += arc->indic_angle_start;
 802597c:	ebb5 0f62 	cmp.w	r5, r2, asr #1
        int32_t angle_midpoint = (int32_t)(arc->bg_angle_start + bg_end) / 2;
 8025980:	ea4f 0162 	mov.w	r1, r2, asr #1
        if(arc->indic_angle_start < angle_midpoint) angle += arc->indic_angle_start;
 8025984:	da02      	bge.n	802598c <get_angle+0x5c>
 8025986:	441d      	add	r5, r3
 8025988:	b2ab      	uxth	r3, r5
 802598a:	e7db      	b.n	8025944 <get_angle+0x14>
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
 802598c:	b200      	sxth	r0, r0
 802598e:	4288      	cmp	r0, r1
 8025990:	bfcb      	itete	gt
 8025992:	18e4      	addgt	r4, r4, r3
        else angle += angle_midpoint;
 8025994:	18c9      	addle	r1, r1, r3
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
 8025996:	b2a3      	uxthgt	r3, r4
        else angle += angle_midpoint;
 8025998:	b28b      	uxthle	r3, r1
 802599a:	e7d3      	b.n	8025944 <get_angle+0x14>

0802599c <lv_obj_get_style_arc_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 802599c:	2250      	movs	r2, #80	; 0x50
{
 802599e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80259a0:	f7f8 f86e 	bl	801da80 <lv_obj_get_style_prop>
}
 80259a4:	b200      	sxth	r0, r0
 80259a6:	bd08      	pop	{r3, pc}

080259a8 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80259a8:	2212      	movs	r2, #18
{
 80259aa:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80259ac:	f7f8 f868 	bl	801da80 <lv_obj_get_style_prop>
}
 80259b0:	b200      	sxth	r0, r0
 80259b2:	bd08      	pop	{r3, pc}

080259b4 <lv_obj_get_style_pad_right>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80259b4:	2213      	movs	r2, #19
{
 80259b6:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80259b8:	f7f8 f862 	bl	801da80 <lv_obj_get_style_prop>
}
 80259bc:	b200      	sxth	r0, r0
 80259be:	bd08      	pop	{r3, pc}

080259c0 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80259c0:	2210      	movs	r2, #16
{
 80259c2:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80259c4:	f7f8 f85c 	bl	801da80 <lv_obj_get_style_prop>
}
 80259c8:	b200      	sxth	r0, r0
 80259ca:	bd08      	pop	{r3, pc}

080259cc <lv_obj_get_style_pad_bottom>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80259cc:	2211      	movs	r2, #17
{
 80259ce:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80259d0:	f7f8 f856 	bl	801da80 <lv_obj_get_style_prop>
}
 80259d4:	b200      	sxth	r0, r0
 80259d6:	bd08      	pop	{r3, pc}

080259d8 <get_center>:
{
 80259d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259dc:	4604      	mov	r4, r0
 80259de:	460f      	mov	r7, r1
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80259e0:	2100      	movs	r1, #0
{
 80259e2:	4690      	mov	r8, r2
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80259e4:	f7ff ffe0 	bl	80259a8 <lv_obj_get_style_pad_left>
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80259e8:	2100      	movs	r1, #0
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80259ea:	4606      	mov	r6, r0
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80259ec:	4620      	mov	r0, r4
 80259ee:	f7ff ffe1 	bl	80259b4 <lv_obj_get_style_pad_right>
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80259f2:	2100      	movs	r1, #0
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80259f4:	4682      	mov	sl, r0
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80259f6:	4620      	mov	r0, r4
 80259f8:	f7ff ffe2 	bl	80259c0 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_bg = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80259fc:	2100      	movs	r1, #0
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80259fe:	4605      	mov	r5, r0
    lv_coord_t bottom_bg = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8025a00:	4620      	mov	r0, r4
 8025a02:	f7ff ffe3 	bl	80259cc <lv_obj_get_style_pad_bottom>
 8025a06:	4681      	mov	r9, r0
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8025a08:	4620      	mov	r0, r4
 8025a0a:	f7f6 ff13 	bl	801c834 <lv_obj_get_width>
 8025a0e:	eba0 0b06 	sub.w	fp, r0, r6
 8025a12:	4620      	mov	r0, r4
 8025a14:	f7f6 ff14 	bl	801c840 <lv_obj_get_height>
 8025a18:	1b40      	subs	r0, r0, r5
 8025a1a:	ebab 0b0a 	sub.w	fp, fp, sl
 8025a1e:	eba0 0009 	sub.w	r0, r0, r9
 8025a22:	4583      	cmp	fp, r0
 8025a24:	4620      	mov	r0, r4
 8025a26:	da16      	bge.n	8025a56 <get_center+0x7e>
 8025a28:	f7f6 ff04 	bl	801c834 <lv_obj_get_width>
 8025a2c:	1b83      	subs	r3, r0, r6
 8025a2e:	eba3 030a 	sub.w	r3, r3, sl
    center->x = obj->coords.x1 + r + left_bg;
 8025a32:	8aa2      	ldrh	r2, [r4, #20]
                           lv_obj_get_height(obj) - top_bg - bottom_bg)) / 2;
 8025a34:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    center->x = obj->coords.x1 + r + left_bg;
 8025a38:	4416      	add	r6, r2
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8025a3a:	f343 034f 	sbfx	r3, r3, #1, #16
    center->x = obj->coords.x1 + r + left_bg;
 8025a3e:	fa16 f683 	uxtah	r6, r6, r3
 8025a42:	803e      	strh	r6, [r7, #0]
    center->y = obj->coords.y1 + r + top_bg;
 8025a44:	8ae2      	ldrh	r2, [r4, #22]
 8025a46:	4415      	add	r5, r2
 8025a48:	fa15 f583 	uxtah	r5, r5, r3
 8025a4c:	807d      	strh	r5, [r7, #2]
    if(arc_r) *arc_r = r;
 8025a4e:	f8a8 3000 	strh.w	r3, [r8]
}
 8025a52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8025a56:	f7f6 fef3 	bl	801c840 <lv_obj_get_height>
 8025a5a:	1b43      	subs	r3, r0, r5
 8025a5c:	eba3 0309 	sub.w	r3, r3, r9
 8025a60:	e7e7      	b.n	8025a32 <get_center+0x5a>

08025a62 <get_knob_area>:


static void get_knob_area(lv_obj_t * obj, const lv_point_t * center, lv_coord_t r, lv_area_t * knob_area)
{
 8025a62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a66:	4688      	mov	r8, r1
    lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
 8025a68:	f44f 3100 	mov.w	r1, #131072	; 0x20000
{
 8025a6c:	4699      	mov	r9, r3
 8025a6e:	4616      	mov	r6, r2
 8025a70:	4683      	mov	fp, r0
    lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
 8025a72:	f7ff ff93 	bl	802599c <lv_obj_get_style_arc_width>
    lv_coord_t indic_width_half = indic_width / 2;
 8025a76:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    r -= indic_width_half;
 8025a7a:	f3c0 044f 	ubfx	r4, r0, #1, #16

    lv_coord_t angle = get_angle(obj);
 8025a7e:	4658      	mov	r0, fp
 8025a80:	f7ff ff56 	bl	8025930 <get_angle>
 8025a84:	4605      	mov	r5, r0
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8025a86:	305a      	adds	r0, #90	; 0x5a
    r -= indic_width_half;
 8025a88:	1b36      	subs	r6, r6, r4
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8025a8a:	b200      	sxth	r0, r0
 8025a8c:	f7ec fdd6 	bl	801263c <lv_trigo_sin>
 8025a90:	9001      	str	r0, [sp, #4]
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8025a92:	4628      	mov	r0, r5
    r -= indic_width_half;
 8025a94:	b236      	sxth	r6, r6
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8025a96:	f7ec fdd1 	bl	801263c <lv_trigo_sin>

    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8025a9a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8025a9e:	4605      	mov	r5, r0
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8025aa0:	4658      	mov	r0, fp
 8025aa2:	f7ff ff81 	bl	80259a8 <lv_obj_get_style_pad_left>
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8025aa6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8025aaa:	9000      	str	r0, [sp, #0]
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8025aac:	4658      	mov	r0, fp
 8025aae:	f7ff ff81 	bl	80259b4 <lv_obj_get_style_pad_right>
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8025ab2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8025ab6:	4607      	mov	r7, r0
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8025ab8:	4658      	mov	r0, fp
 8025aba:	f7ff ff81 	bl	80259c0 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8025abe:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8025ac2:	4682      	mov	sl, r0
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8025ac4:	4658      	mov	r0, fp
 8025ac6:	f7ff ff81 	bl	80259cc <lv_obj_get_style_pad_bottom>

    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8025aca:	f8b8 1000 	ldrh.w	r1, [r8]
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8025ace:	9a01      	ldr	r2, [sp, #4]
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8025ad0:	9b00      	ldr	r3, [sp, #0]
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8025ad2:	4372      	muls	r2, r6
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8025ad4:	1acb      	subs	r3, r1, r3
 8025ad6:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8025ada:	1b1b      	subs	r3, r3, r4
 8025adc:	4413      	add	r3, r2
 8025ade:	f8a9 3000 	strh.w	r3, [r9]
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 8025ae2:	f8b8 3000 	ldrh.w	r3, [r8]
 8025ae6:	441f      	add	r7, r3
 8025ae8:	4427      	add	r7, r4
 8025aea:	443a      	add	r2, r7
 8025aec:	f8a9 2004 	strh.w	r2, [r9, #4]
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8025af0:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8025af4:	fb06 f205 	mul.w	r2, r6, r5
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8025af8:	eba3 030a 	sub.w	r3, r3, sl
 8025afc:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8025b00:	1b1b      	subs	r3, r3, r4
 8025b02:	4413      	add	r3, r2
 8025b04:	f8a9 3002 	strh.w	r3, [r9, #2]
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 8025b08:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8025b0c:	4418      	add	r0, r3
 8025b0e:	4404      	add	r4, r0
 8025b10:	4422      	add	r2, r4
 8025b12:	f8a9 2006 	strh.w	r2, [r9, #6]
}
 8025b16:	b003      	add	sp, #12
 8025b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025b1c <inv_arc_area>:
{
 8025b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025b20:	b088      	sub	sp, #32
 8025b22:	4607      	mov	r7, r0
 8025b24:	460d      	mov	r5, r1
 8025b26:	4616      	mov	r6, r2
 8025b28:	4698      	mov	r8, r3
    if(lv_obj_is_visible(obj) == false) return;
 8025b2a:	f7f7 f93d 	bl	801cda8 <lv_obj_is_visible>
 8025b2e:	2800      	cmp	r0, #0
 8025b30:	d047      	beq.n	8025bc2 <inv_arc_area+0xa6>
    if(start_angle == end_angle) return;
 8025b32:	42b5      	cmp	r5, r6
 8025b34:	d045      	beq.n	8025bc2 <inv_arc_area+0xa6>
    if(start_angle > 360) start_angle -= 360;
 8025b36:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
    start_angle += arc->rotation;
 8025b3a:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
    get_center(obj, &c, &r);
 8025b3c:	f10d 0212 	add.w	r2, sp, #18
 8025b40:	a905      	add	r1, sp, #20
    if(start_angle > 360) start_angle -= 360;
 8025b42:	bf88      	it	hi
 8025b44:	f5a5 75b4 	subhi.w	r5, r5, #360	; 0x168
    get_center(obj, &c, &r);
 8025b48:	4638      	mov	r0, r7
    if(start_angle > 360) start_angle -= 360;
 8025b4a:	bf88      	it	hi
 8025b4c:	b2ad      	uxthhi	r5, r5
    if(end_angle > 360) end_angle -= 360;
 8025b4e:	f5b6 7fb4 	cmp.w	r6, #360	; 0x168
    start_angle += arc->rotation;
 8025b52:	4425      	add	r5, r4
    if(end_angle > 360) end_angle -= 360;
 8025b54:	bf88      	it	hi
 8025b56:	f5a6 76b4 	subhi.w	r6, r6, #360	; 0x168
    start_angle += arc->rotation;
 8025b5a:	b2ad      	uxth	r5, r5
    if(end_angle > 360) end_angle -= 360;
 8025b5c:	bf88      	it	hi
 8025b5e:	b2b6      	uxthhi	r6, r6
    if(start_angle > 360) start_angle -= 360;
 8025b60:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
    end_angle += arc->rotation;
 8025b64:	4434      	add	r4, r6
    if(start_angle > 360) start_angle -= 360;
 8025b66:	bf88      	it	hi
 8025b68:	f5a5 75b4 	subhi.w	r5, r5, #360	; 0x168
    end_angle += arc->rotation;
 8025b6c:	b2a4      	uxth	r4, r4
    if(start_angle > 360) start_angle -= 360;
 8025b6e:	bf88      	it	hi
 8025b70:	b2ad      	uxthhi	r5, r5
    if(end_angle > 360) end_angle -= 360;
 8025b72:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 8025b76:	bf84      	itt	hi
 8025b78:	f5a4 74b4 	subhi.w	r4, r4, #360	; 0x168
 8025b7c:	b2a4      	uxthhi	r4, r4
    get_center(obj, &c, &r);
 8025b7e:	f7ff ff2b 	bl	80259d8 <get_center>
    lv_coord_t w = lv_obj_get_style_arc_width(obj, part);
 8025b82:	4641      	mov	r1, r8
 8025b84:	4638      	mov	r0, r7
 8025b86:	f7ff ff09 	bl	802599c <lv_obj_get_style_arc_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8025b8a:	4641      	mov	r1, r8
 8025b8c:	4606      	mov	r6, r0
 8025b8e:	2251      	movs	r2, #81	; 0x51
 8025b90:	4638      	mov	r0, r7
    lv_draw_arc_get_area(c.x, c.y, r, start_angle, end_angle, w, rounded, &inv_area);
 8025b92:	f10d 0818 	add.w	r8, sp, #24
 8025b96:	f7f7 ff73 	bl	801da80 <lv_obj_get_style_prop>
    return (bool)v.num;
 8025b9a:	3800      	subs	r0, #0
 8025b9c:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8025ba0:	462b      	mov	r3, r5
 8025ba2:	bf18      	it	ne
 8025ba4:	2001      	movne	r0, #1
 8025ba6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8025baa:	e9cd 0802 	strd	r0, r8, [sp, #8]
 8025bae:	e9cd 4600 	strd	r4, r6, [sp]
 8025bb2:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8025bb6:	f7e1 fd2b 	bl	8007610 <lv_draw_arc_get_area>
    lv_obj_invalidate_area(obj, &inv_area);
 8025bba:	4641      	mov	r1, r8
 8025bbc:	4638      	mov	r0, r7
 8025bbe:	f7f7 f818 	bl	801cbf2 <lv_obj_invalidate_area>
}
 8025bc2:	b008      	add	sp, #32
 8025bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08025bc8 <knob_get_extra_size>:
    }
    arc->last_angle = angle; /*Cache angle for slew rate limiting*/
}

static lv_coord_t knob_get_extra_size(lv_obj_t * obj)
{
 8025bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8025bca:	2240      	movs	r2, #64	; 0x40
 8025bcc:	4605      	mov	r5, r0
 8025bce:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025bd2:	f7f7 ff55 	bl	801da80 <lv_obj_get_style_prop>
 8025bd6:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8025bd8:	2243      	movs	r2, #67	; 0x43
 8025bda:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025bde:	4628      	mov	r0, r5
 8025be0:	f7f7 ff4e 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8025be4:	2241      	movs	r2, #65	; 0x41
    lv_coord_t knob_shadow_size = 0;
    knob_shadow_size += lv_obj_get_style_shadow_width(obj, LV_PART_KNOB);
    knob_shadow_size += lv_obj_get_style_shadow_spread(obj, LV_PART_KNOB);
 8025be6:	4404      	add	r4, r0
 8025be8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025bec:	4628      	mov	r0, r5
 8025bee:	f7f7 ff47 	bl	801da80 <lv_obj_get_style_prop>
 8025bf2:	2241      	movs	r2, #65	; 0x41
    return (lv_coord_t)v.num;
 8025bf4:	b200      	sxth	r0, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8025bf6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025bfa:	b2a4      	uxth	r4, r4
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_x(obj, LV_PART_KNOB));
 8025bfc:	2800      	cmp	r0, #0
 8025bfe:	4628      	mov	r0, r5
 8025c00:	dd29      	ble.n	8025c56 <knob_get_extra_size+0x8e>
 8025c02:	f7f7 ff3d 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025c06:	b200      	sxth	r0, r0
 8025c08:	4404      	add	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8025c0a:	2242      	movs	r2, #66	; 0x42
 8025c0c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025c10:	4628      	mov	r0, r5
 8025c12:	f7f7 ff35 	bl	801da80 <lv_obj_get_style_prop>
 8025c16:	2242      	movs	r2, #66	; 0x42
    return (lv_coord_t)v.num;
 8025c18:	b200      	sxth	r0, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8025c1a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025c1e:	b2a4      	uxth	r4, r4
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_y(obj, LV_PART_KNOB));
 8025c20:	2800      	cmp	r0, #0
 8025c22:	4628      	mov	r0, r5
 8025c24:	dd1c      	ble.n	8025c60 <knob_get_extra_size+0x98>
 8025c26:	f7f7 ff2b 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025c2a:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8025c2c:	2235      	movs	r2, #53	; 0x35
 8025c2e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025c32:	4628      	mov	r0, r5
 8025c34:	4434      	add	r4, r6
 8025c36:	f7f7 ff23 	bl	801da80 <lv_obj_get_style_prop>
 8025c3a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8025c3c:	2238      	movs	r2, #56	; 0x38
 8025c3e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8025c42:	4628      	mov	r0, r5
 8025c44:	f7f7 ff1c 	bl	801da80 <lv_obj_get_style_prop>

    lv_coord_t knob_outline_size = 0;
    knob_outline_size += lv_obj_get_style_outline_width(obj, LV_PART_KNOB);
    knob_outline_size += lv_obj_get_style_outline_pad(obj, LV_PART_KNOB);
 8025c48:	4407      	add	r7, r0

    return LV_MAX(knob_shadow_size, knob_outline_size);
 8025c4a:	b220      	sxth	r0, r4
 8025c4c:	b23f      	sxth	r7, r7
}
 8025c4e:	42b8      	cmp	r0, r7
 8025c50:	bfb8      	it	lt
 8025c52:	4638      	movlt	r0, r7
 8025c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8025c56:	f7f7 ff13 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025c5a:	b200      	sxth	r0, r0
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_x(obj, LV_PART_KNOB));
 8025c5c:	4240      	negs	r0, r0
 8025c5e:	e7d3      	b.n	8025c08 <knob_get_extra_size+0x40>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8025c60:	f7f7 ff0e 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025c64:	b206      	sxth	r6, r0
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_y(obj, LV_PART_KNOB));
 8025c66:	4276      	negs	r6, r6
 8025c68:	e7e0      	b.n	8025c2c <knob_get_extra_size+0x64>

08025c6a <inv_knob_area>:
{
 8025c6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025c6c:	4604      	mov	r4, r0
    get_center(obj, &c, &r);
 8025c6e:	f10d 0202 	add.w	r2, sp, #2
 8025c72:	a901      	add	r1, sp, #4
 8025c74:	f7ff feb0 	bl	80259d8 <get_center>
    get_knob_area(obj, &c, r, &a);
 8025c78:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8025c7c:	ab02      	add	r3, sp, #8
 8025c7e:	a901      	add	r1, sp, #4
 8025c80:	4620      	mov	r0, r4
 8025c82:	f7ff feee 	bl	8025a62 <get_knob_area>
    lv_coord_t knob_extra_size = knob_get_extra_size(obj);
 8025c86:	4620      	mov	r0, r4
 8025c88:	f7ff ff9e 	bl	8025bc8 <knob_get_extra_size>
    if(knob_extra_size > 0) {
 8025c8c:	1e02      	subs	r2, r0, #0
 8025c8e:	dd03      	ble.n	8025c98 <inv_knob_area+0x2e>
        lv_area_increase(&a, knob_extra_size, knob_extra_size);
 8025c90:	4611      	mov	r1, r2
 8025c92:	a802      	add	r0, sp, #8
 8025c94:	f7fe facd 	bl	8024232 <lv_area_increase>
    lv_obj_invalidate_area(obj, &a);
 8025c98:	a902      	add	r1, sp, #8
 8025c9a:	4620      	mov	r0, r4
 8025c9c:	f7f6 ffa9 	bl	801cbf2 <lv_obj_invalidate_area>
}
 8025ca0:	b004      	add	sp, #16
 8025ca2:	bd10      	pop	{r4, pc}

08025ca4 <lv_arc_set_start_angle>:
    if(start > 360) start -= 360;
 8025ca4:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8025ca8:	b570      	push	{r4, r5, r6, lr}
 8025caa:	460c      	mov	r4, r1
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025cac:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    if(start > 360) start -= 360;
 8025cae:	bf88      	it	hi
 8025cb0:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025cb4:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
{
 8025cb6:	4605      	mov	r5, r0
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025cb8:	eba3 0201 	sub.w	r2, r3, r1
    if(start > 360) start -= 360;
 8025cbc:	bf88      	it	hi
 8025cbe:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025cc0:	b296      	uxth	r6, r2
    int16_t new_delta = arc->indic_angle_end - start;
 8025cc2:	1b1b      	subs	r3, r3, r4
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025cc4:	b212      	sxth	r2, r2
    int16_t new_delta = arc->indic_angle_end - start;
 8025cc6:	b298      	uxth	r0, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025cc8:	2a00      	cmp	r2, #0
    int16_t new_delta = arc->indic_angle_end - start;
 8025cca:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025ccc:	bfbc      	itt	lt
 8025cce:	f506 72b4 	addlt.w	r2, r6, #360	; 0x168
 8025cd2:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8025cd4:	2b00      	cmp	r3, #0
 8025cd6:	bfbc      	itt	lt
 8025cd8:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 8025cdc:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8025cde:	1a98      	subs	r0, r3, r2
 8025ce0:	2800      	cmp	r0, #0
 8025ce2:	bfb8      	it	lt
 8025ce4:	4240      	neglt	r0, r0
 8025ce6:	28b4      	cmp	r0, #180	; 0xb4
 8025ce8:	dd0b      	ble.n	8025d02 <lv_arc_set_start_angle+0x5e>
 8025cea:	4628      	mov	r0, r5
 8025cec:	f7f6 ffa2 	bl	801cc34 <lv_obj_invalidate>
    inv_knob_area(obj);
 8025cf0:	4628      	mov	r0, r5
 8025cf2:	f7ff ffba 	bl	8025c6a <inv_knob_area>
    inv_knob_area(obj);
 8025cf6:	4628      	mov	r0, r5
    arc->indic_angle_start = start;
 8025cf8:	84ec      	strh	r4, [r5, #38]	; 0x26
}
 8025cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    inv_knob_area(obj);
 8025cfe:	f7ff bfb4 	b.w	8025c6a <inv_knob_area>
    else if(new_delta < old_delta) inv_arc_area(obj, arc->indic_angle_start, start, LV_PART_INDICATOR);
 8025d02:	429a      	cmp	r2, r3
 8025d04:	dd06      	ble.n	8025d14 <lv_arc_set_start_angle+0x70>
 8025d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8025d0a:	4622      	mov	r2, r4
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->indic_angle_start, LV_PART_INDICATOR);
 8025d0c:	4628      	mov	r0, r5
 8025d0e:	f7ff ff05 	bl	8025b1c <inv_arc_area>
 8025d12:	e7ed      	b.n	8025cf0 <lv_arc_set_start_angle+0x4c>
 8025d14:	daec      	bge.n	8025cf0 <lv_arc_set_start_angle+0x4c>
 8025d16:	460a      	mov	r2, r1
 8025d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8025d1c:	4621      	mov	r1, r4
 8025d1e:	e7f5      	b.n	8025d0c <lv_arc_set_start_angle+0x68>

08025d20 <lv_arc_set_end_angle>:
    if(end > 360) end -= 360;
 8025d20:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8025d24:	b570      	push	{r4, r5, r6, lr}
 8025d26:	460c      	mov	r4, r1
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025d28:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    if(end > 360) end -= 360;
 8025d2a:	bf88      	it	hi
 8025d2c:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025d30:	8d01      	ldrh	r1, [r0, #40]	; 0x28
{
 8025d32:	4605      	mov	r5, r0
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025d34:	eba1 0203 	sub.w	r2, r1, r3
    if(end > 360) end -= 360;
 8025d38:	bf88      	it	hi
 8025d3a:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025d3c:	b296      	uxth	r6, r2
    int16_t new_delta = end - arc->indic_angle_start;
 8025d3e:	1ae3      	subs	r3, r4, r3
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8025d40:	b212      	sxth	r2, r2
    int16_t new_delta = end - arc->indic_angle_start;
 8025d42:	b298      	uxth	r0, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025d44:	2a00      	cmp	r2, #0
    int16_t new_delta = end - arc->indic_angle_start;
 8025d46:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025d48:	bfbc      	itt	lt
 8025d4a:	f506 72b4 	addlt.w	r2, r6, #360	; 0x168
 8025d4e:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8025d50:	2b00      	cmp	r3, #0
 8025d52:	bfbc      	itt	lt
 8025d54:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 8025d58:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8025d5a:	1a98      	subs	r0, r3, r2
 8025d5c:	2800      	cmp	r0, #0
 8025d5e:	bfb8      	it	lt
 8025d60:	4240      	neglt	r0, r0
 8025d62:	28b4      	cmp	r0, #180	; 0xb4
 8025d64:	dd0b      	ble.n	8025d7e <lv_arc_set_end_angle+0x5e>
 8025d66:	4628      	mov	r0, r5
 8025d68:	f7f6 ff64 	bl	801cc34 <lv_obj_invalidate>
    inv_knob_area(obj);
 8025d6c:	4628      	mov	r0, r5
 8025d6e:	f7ff ff7c 	bl	8025c6a <inv_knob_area>
    inv_knob_area(obj);
 8025d72:	4628      	mov	r0, r5
    arc->indic_angle_end = end;
 8025d74:	852c      	strh	r4, [r5, #40]	; 0x28
}
 8025d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    inv_knob_area(obj);
 8025d7a:	f7ff bf76 	b.w	8025c6a <inv_knob_area>
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->indic_angle_end, LV_PART_INDICATOR);
 8025d7e:	429a      	cmp	r2, r3
 8025d80:	dd07      	ble.n	8025d92 <lv_arc_set_end_angle+0x72>
 8025d82:	460a      	mov	r2, r1
 8025d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8025d88:	4621      	mov	r1, r4
    else if(old_delta < new_delta) inv_arc_area(obj, arc->indic_angle_end, end, LV_PART_INDICATOR);
 8025d8a:	4628      	mov	r0, r5
 8025d8c:	f7ff fec6 	bl	8025b1c <inv_arc_area>
 8025d90:	e7ec      	b.n	8025d6c <lv_arc_set_end_angle+0x4c>
 8025d92:	daeb      	bge.n	8025d6c <lv_arc_set_end_angle+0x4c>
 8025d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8025d98:	4622      	mov	r2, r4
 8025d9a:	e7f6      	b.n	8025d8a <lv_arc_set_end_angle+0x6a>

08025d9c <lv_arc_set_angles>:
{
 8025d9c:	b538      	push	{r3, r4, r5, lr}
 8025d9e:	4604      	mov	r4, r0
 8025da0:	460d      	mov	r5, r1
    lv_arc_set_end_angle(obj, end);
 8025da2:	4611      	mov	r1, r2
 8025da4:	f7ff ffbc 	bl	8025d20 <lv_arc_set_end_angle>
    lv_arc_set_start_angle(obj, start);
 8025da8:	4629      	mov	r1, r5
 8025daa:	4620      	mov	r0, r4
}
 8025dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_arc_set_start_angle(obj, start);
 8025db0:	f7ff bf78 	b.w	8025ca4 <lv_arc_set_start_angle>

08025db4 <value_update>:
{
 8025db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025db6:	4604      	mov	r4, r0
    if(arc->value == VALUE_UNSET) return;
 8025db8:	f9b0 002e 	ldrsh.w	r0, [r0, #46]	; 0x2e
 8025dbc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8025dc0:	d03f      	beq.n	8025e42 <value_update+0x8e>
    int16_t bg_midpoint, range_midpoint, bg_end = arc->bg_angle_end;
 8025dc2:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
    if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 8025dc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    switch(arc->type) {
 8025dc6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 8025dca:	429d      	cmp	r5, r3
    switch(arc->type) {
 8025dcc:	f3c2 0241 	ubfx	r2, r2, #1, #2
    if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 8025dd0:	bf3c      	itt	cc
 8025dd2:	f505 75b4 	addcc.w	r5, r5, #360	; 0x168
 8025dd6:	b2ad      	uxthcc	r5, r5
    switch(arc->type) {
 8025dd8:	2a01      	cmp	r2, #1
 8025dda:	b22d      	sxth	r5, r5
 8025ddc:	d00d      	beq.n	8025dfa <value_update+0x46>
 8025dde:	2a02      	cmp	r2, #2
 8025de0:	d03d      	beq.n	8025e5e <value_update+0xaa>
 8025de2:	bb72      	cbnz	r2, 8025e42 <value_update+0x8e>
            angle = lv_map(arc->value, arc->min_value, arc->max_value, arc->bg_angle_start, bg_end);
 8025de4:	9500      	str	r5, [sp, #0]
 8025de6:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 8025dea:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8025dee:	f7fe ff15 	bl	8024c1c <lv_map>
            lv_arc_set_angles(obj, arc->bg_angle_start, angle);
 8025df2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
            angle = lv_map(arc->value, arc->min_value, arc->max_value, arc->bg_angle_start, bg_end);
 8025df4:	b205      	sxth	r5, r0
            lv_arc_set_angles(obj, arc->bg_angle_start, angle);
 8025df6:	b282      	uxth	r2, r0
 8025df8:	e03c      	b.n	8025e74 <value_update+0xc0>
            range_midpoint = (int32_t)(arc->min_value + arc->max_value) / 2;
 8025dfa:	f9b4 c030 	ldrsh.w	ip, [r4, #48]	; 0x30
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 8025dfe:	195f      	adds	r7, r3, r5
            range_midpoint = (int32_t)(arc->min_value + arc->max_value) / 2;
 8025e00:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 8025e04:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
            range_midpoint = (int32_t)(arc->min_value + arc->max_value) / 2;
 8025e08:	eb0c 0602 	add.w	r6, ip, r2
                angle = lv_map(arc->value, arc->min_value, range_midpoint, arc->bg_angle_start, bg_midpoint);
 8025e0c:	f347 0e4f 	sbfx	lr, r7, #1, #16
                lv_arc_set_end_angle(obj, bg_midpoint);
 8025e10:	f3c7 074f 	ubfx	r7, r7, #1, #16
            range_midpoint = (int32_t)(arc->min_value + arc->max_value) / 2;
 8025e14:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8025e18:	1071      	asrs	r1, r6, #1
            if(arc->value < range_midpoint) {
 8025e1a:	f346 064f 	sbfx	r6, r6, #1, #16
 8025e1e:	42b0      	cmp	r0, r6
 8025e20:	da11      	bge.n	8025e46 <value_update+0x92>
                angle = lv_map(arc->value, arc->min_value, range_midpoint, arc->bg_angle_start, bg_midpoint);
 8025e22:	460a      	mov	r2, r1
 8025e24:	f8cd e000 	str.w	lr, [sp]
 8025e28:	4661      	mov	r1, ip
 8025e2a:	f7fe fef7 	bl	8024c1c <lv_map>
                lv_arc_set_start_angle(obj, angle);
 8025e2e:	b281      	uxth	r1, r0
                angle = lv_map(arc->value, arc->min_value, range_midpoint, arc->bg_angle_start, bg_midpoint);
 8025e30:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, angle);
 8025e32:	4620      	mov	r0, r4
 8025e34:	f7ff ff36 	bl	8025ca4 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, bg_midpoint);
 8025e38:	4639      	mov	r1, r7
                lv_arc_set_end_angle(obj, angle);
 8025e3a:	4620      	mov	r0, r4
 8025e3c:	f7ff ff70 	bl	8025d20 <lv_arc_set_end_angle>
    arc->last_angle = angle; /*Cache angle for slew rate limiting*/
 8025e40:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 8025e42:	b003      	add	sp, #12
 8025e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
                angle = lv_map(arc->value, range_midpoint, arc->max_value, bg_midpoint, bg_end);
 8025e46:	4673      	mov	r3, lr
 8025e48:	9500      	str	r5, [sp, #0]
 8025e4a:	f7fe fee7 	bl	8024c1c <lv_map>
 8025e4e:	4606      	mov	r6, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 8025e50:	4639      	mov	r1, r7
                angle = lv_map(arc->value, range_midpoint, arc->max_value, bg_midpoint, bg_end);
 8025e52:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 8025e54:	4620      	mov	r0, r4
 8025e56:	f7ff ff25 	bl	8025ca4 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, angle);
 8025e5a:	b2b1      	uxth	r1, r6
 8025e5c:	e7ed      	b.n	8025e3a <value_update+0x86>
            angle = lv_map(arc->value, arc->min_value, arc->max_value, bg_end, arc->bg_angle_start);
 8025e5e:	9300      	str	r3, [sp, #0]
 8025e60:	462b      	mov	r3, r5
 8025e62:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 8025e66:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8025e6a:	f7fe fed7 	bl	8024c1c <lv_map>
            lv_arc_set_angles(obj, angle, arc->bg_angle_end);
 8025e6e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
            angle = lv_map(arc->value, arc->min_value, arc->max_value, bg_end, arc->bg_angle_start);
 8025e70:	b205      	sxth	r5, r0
            lv_arc_set_angles(obj, angle, arc->bg_angle_end);
 8025e72:	b281      	uxth	r1, r0
            lv_arc_set_angles(obj, arc->bg_angle_start, angle);
 8025e74:	4620      	mov	r0, r4
 8025e76:	f7ff ff91 	bl	8025d9c <lv_arc_set_angles>
            break;
 8025e7a:	e7e1      	b.n	8025e40 <value_update+0x8c>

08025e7c <lv_arc_set_bg_start_angle>:
    if(start > 360) start -= 360;
 8025e7c:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8025e80:	b570      	push	{r4, r5, r6, lr}
 8025e82:	460c      	mov	r4, r1
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025e84:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    if(start > 360) start -= 360;
 8025e86:	bf88      	it	hi
 8025e88:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025e8c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
{
 8025e8e:	4605      	mov	r5, r0
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025e90:	eba3 0201 	sub.w	r2, r3, r1
    if(start > 360) start -= 360;
 8025e94:	bf88      	it	hi
 8025e96:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025e98:	b296      	uxth	r6, r2
    int16_t new_delta = arc->bg_angle_end - start;
 8025e9a:	1b1b      	subs	r3, r3, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025e9c:	b212      	sxth	r2, r2
    int16_t new_delta = arc->bg_angle_end - start;
 8025e9e:	b298      	uxth	r0, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025ea0:	2a00      	cmp	r2, #0
    int16_t new_delta = arc->bg_angle_end - start;
 8025ea2:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025ea4:	bfbc      	itt	lt
 8025ea6:	f506 72b4 	addlt.w	r2, r6, #360	; 0x168
 8025eaa:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8025eac:	2b00      	cmp	r3, #0
 8025eae:	bfbc      	itt	lt
 8025eb0:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 8025eb4:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8025eb6:	1a98      	subs	r0, r3, r2
 8025eb8:	2800      	cmp	r0, #0
 8025eba:	bfb8      	it	lt
 8025ebc:	4240      	neglt	r0, r0
 8025ebe:	28b4      	cmp	r0, #180	; 0xb4
 8025ec0:	dd08      	ble.n	8025ed4 <lv_arc_set_bg_start_angle+0x58>
 8025ec2:	4628      	mov	r0, r5
 8025ec4:	f7f6 feb6 	bl	801cc34 <lv_obj_invalidate>
    value_update(obj);
 8025ec8:	4628      	mov	r0, r5
    arc->bg_angle_start = start;
 8025eca:	856c      	strh	r4, [r5, #42]	; 0x2a
}
 8025ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    value_update(obj);
 8025ed0:	f7ff bf70 	b.w	8025db4 <value_update>
    else if(new_delta < old_delta) inv_arc_area(obj, arc->bg_angle_start, start, LV_PART_MAIN);
 8025ed4:	429a      	cmp	r2, r3
 8025ed6:	dd05      	ble.n	8025ee4 <lv_arc_set_bg_start_angle+0x68>
 8025ed8:	2300      	movs	r3, #0
 8025eda:	4622      	mov	r2, r4
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->bg_angle_start, LV_PART_MAIN);
 8025edc:	4628      	mov	r0, r5
 8025ede:	f7ff fe1d 	bl	8025b1c <inv_arc_area>
 8025ee2:	e7f1      	b.n	8025ec8 <lv_arc_set_bg_start_angle+0x4c>
 8025ee4:	daf0      	bge.n	8025ec8 <lv_arc_set_bg_start_angle+0x4c>
 8025ee6:	460a      	mov	r2, r1
 8025ee8:	2300      	movs	r3, #0
 8025eea:	4621      	mov	r1, r4
 8025eec:	e7f6      	b.n	8025edc <lv_arc_set_bg_start_angle+0x60>

08025eee <lv_arc_set_bg_end_angle>:
    if(end > 360) end -= 360;
 8025eee:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8025ef2:	b570      	push	{r4, r5, r6, lr}
 8025ef4:	460c      	mov	r4, r1
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025ef6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    if(end > 360) end -= 360;
 8025ef8:	bf88      	it	hi
 8025efa:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025efe:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
{
 8025f00:	4605      	mov	r5, r0
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025f02:	eba1 0203 	sub.w	r2, r1, r3
    if(end > 360) end -= 360;
 8025f06:	bf88      	it	hi
 8025f08:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025f0a:	b296      	uxth	r6, r2
    int16_t new_delta = end - arc->bg_angle_start;
 8025f0c:	1ae3      	subs	r3, r4, r3
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8025f0e:	b212      	sxth	r2, r2
    int16_t new_delta = end - arc->bg_angle_start;
 8025f10:	b298      	uxth	r0, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025f12:	2a00      	cmp	r2, #0
    int16_t new_delta = end - arc->bg_angle_start;
 8025f14:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8025f16:	bfbc      	itt	lt
 8025f18:	f506 72b4 	addlt.w	r2, r6, #360	; 0x168
 8025f1c:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8025f1e:	2b00      	cmp	r3, #0
 8025f20:	bfbc      	itt	lt
 8025f22:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 8025f26:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8025f28:	1a98      	subs	r0, r3, r2
 8025f2a:	2800      	cmp	r0, #0
 8025f2c:	bfb8      	it	lt
 8025f2e:	4240      	neglt	r0, r0
 8025f30:	28b4      	cmp	r0, #180	; 0xb4
 8025f32:	dd08      	ble.n	8025f46 <lv_arc_set_bg_end_angle+0x58>
 8025f34:	4628      	mov	r0, r5
 8025f36:	f7f6 fe7d 	bl	801cc34 <lv_obj_invalidate>
    value_update(obj);
 8025f3a:	4628      	mov	r0, r5
    arc->bg_angle_end = end;
 8025f3c:	85ac      	strh	r4, [r5, #44]	; 0x2c
}
 8025f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    value_update(obj);
 8025f42:	f7ff bf37 	b.w	8025db4 <value_update>
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->bg_angle_end, LV_PART_MAIN);
 8025f46:	429a      	cmp	r2, r3
 8025f48:	dd06      	ble.n	8025f58 <lv_arc_set_bg_end_angle+0x6a>
 8025f4a:	460a      	mov	r2, r1
 8025f4c:	2300      	movs	r3, #0
 8025f4e:	4621      	mov	r1, r4
    else if(old_delta < new_delta) inv_arc_area(obj, arc->bg_angle_end, end, LV_PART_MAIN);
 8025f50:	4628      	mov	r0, r5
 8025f52:	f7ff fde3 	bl	8025b1c <inv_arc_area>
 8025f56:	e7f0      	b.n	8025f3a <lv_arc_set_bg_end_angle+0x4c>
 8025f58:	daef      	bge.n	8025f3a <lv_arc_set_bg_end_angle+0x4c>
 8025f5a:	2300      	movs	r3, #0
 8025f5c:	4622      	mov	r2, r4
 8025f5e:	e7f7      	b.n	8025f50 <lv_arc_set_bg_end_angle+0x62>

08025f60 <lv_arc_set_bg_angles>:
{
 8025f60:	b538      	push	{r3, r4, r5, lr}
 8025f62:	4604      	mov	r4, r0
 8025f64:	460d      	mov	r5, r1
    lv_arc_set_bg_end_angle(obj, end);
 8025f66:	4611      	mov	r1, r2
 8025f68:	f7ff ffc1 	bl	8025eee <lv_arc_set_bg_end_angle>
    lv_arc_set_bg_start_angle(obj, start);
 8025f6c:	4629      	mov	r1, r5
 8025f6e:	4620      	mov	r0, r4
}
 8025f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_arc_set_bg_start_angle(obj, start);
 8025f74:	f7ff bf82 	b.w	8025e7c <lv_arc_set_bg_start_angle>

08025f78 <lv_arc_set_rotation>:
    arc->rotation = rotation;
 8025f78:	8481      	strh	r1, [r0, #36]	; 0x24
    lv_obj_invalidate(obj);
 8025f7a:	f7f6 be5b 	b.w	801cc34 <lv_obj_invalidate>

08025f7e <lv_arc_set_value>:
{
 8025f7e:	b410      	push	{r4}
    if(arc->value == value) return;
 8025f80:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 8025f84:	428c      	cmp	r4, r1
 8025f86:	d00f      	beq.n	8025fa8 <lv_arc_set_value+0x2a>
    new_value = value > arc->max_value ? arc->max_value : value;
 8025f88:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	; 0x32
 8025f8c:	428a      	cmp	r2, r1
 8025f8e:	bfa8      	it	ge
 8025f90:	460a      	movge	r2, r1
    new_value = new_value < arc->min_value ? arc->min_value : new_value;
 8025f92:	f9b0 1030 	ldrsh.w	r1, [r0, #48]	; 0x30
 8025f96:	4291      	cmp	r1, r2
 8025f98:	bfb8      	it	lt
 8025f9a:	4611      	movlt	r1, r2
    if(arc->value == new_value) return;
 8025f9c:	428c      	cmp	r4, r1
 8025f9e:	d003      	beq.n	8025fa8 <lv_arc_set_value+0x2a>
}
 8025fa0:	bc10      	pop	{r4}
    arc->value = new_value;
 8025fa2:	85c1      	strh	r1, [r0, #46]	; 0x2e
    value_update(obj);
 8025fa4:	f7ff bf06 	b.w	8025db4 <value_update>
}
 8025fa8:	bc10      	pop	{r4}
 8025faa:	4770      	bx	lr

08025fac <lv_area_get_width>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8025fac:	8883      	ldrh	r3, [r0, #4]
 8025fae:	8802      	ldrh	r2, [r0, #0]
 8025fb0:	3301      	adds	r3, #1
 8025fb2:	1a98      	subs	r0, r3, r2
}
 8025fb4:	b200      	sxth	r0, r0
 8025fb6:	4770      	bx	lr

08025fb8 <lv_area_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8025fb8:	88c3      	ldrh	r3, [r0, #6]
 8025fba:	8842      	ldrh	r2, [r0, #2]
 8025fbc:	3301      	adds	r3, #1
 8025fbe:	1a98      	subs	r0, r3, r2
}
 8025fc0:	b200      	sxth	r0, r0
 8025fc2:	4770      	bx	lr

08025fc4 <lv_bar_destructor>:
{
 8025fc4:	b510      	push	{r4, lr}
 8025fc6:	460c      	mov	r4, r1
    lv_anim_del(&bar->cur_value_anim, NULL);
 8025fc8:	2100      	movs	r1, #0
 8025fca:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8025fce:	f7ec f9b3 	bl	8012338 <lv_anim_del>
    lv_anim_del(&bar->start_value_anim, NULL);
 8025fd2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8025fd6:	2100      	movs	r1, #0
}
 8025fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_anim_del(&bar->start_value_anim, NULL);
 8025fdc:	f7ec b9ac 	b.w	8012338 <lv_anim_del>

08025fe0 <lv_bar_anim_ready>:
    _lv_bar_anim_t * var = a->var;
 8025fe0:	6803      	ldr	r3, [r0, #0]
    var->anim_state = LV_BAR_ANIM_STATE_INV;
 8025fe2:	f04f 31ff 	mov.w	r1, #4294967295
    lv_obj_t * obj = (lv_obj_t *)var->bar;
 8025fe6:	681a      	ldr	r2, [r3, #0]
    var->anim_state = LV_BAR_ANIM_STATE_INV;
 8025fe8:	60d9      	str	r1, [r3, #12]
    if(var == &bar->cur_value_anim)
 8025fea:	f102 013c 	add.w	r1, r2, #60	; 0x3c
 8025fee:	428b      	cmp	r3, r1
 8025ff0:	d104      	bne.n	8025ffc <lv_bar_anim_ready+0x1c>
        bar->cur_value = var->anim_end;
 8025ff2:	6899      	ldr	r1, [r3, #8]
 8025ff4:	6251      	str	r1, [r2, #36]	; 0x24
    lv_obj_invalidate(var->bar);
 8025ff6:	6818      	ldr	r0, [r3, #0]
 8025ff8:	f7f6 be1c 	b.w	801cc34 <lv_obj_invalidate>
    else if(var == &bar->start_value_anim)
 8025ffc:	f102 014c 	add.w	r1, r2, #76	; 0x4c
 8026000:	428b      	cmp	r3, r1
        bar->start_value = var->anim_end;
 8026002:	bf04      	itt	eq
 8026004:	6899      	ldreq	r1, [r3, #8]
 8026006:	6311      	streq	r1, [r2, #48]	; 0x30
 8026008:	e7f5      	b.n	8025ff6 <lv_bar_anim_ready+0x16>

0802600a <lv_bar_anim>:
    bar_anim->anim_state    = value;
 802600a:	60c1      	str	r1, [r0, #12]
    lv_obj_invalidate(bar_anim->bar);
 802600c:	6800      	ldr	r0, [r0, #0]
 802600e:	f7f6 be11 	b.w	801cc34 <lv_obj_invalidate>

08026012 <lv_bar_set_value>:
{
 8026012:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(bar->cur_value == value) return;
 8026014:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026016:	428e      	cmp	r6, r1
 8026018:	d015      	beq.n	8026046 <lv_bar_set_value+0x34>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 802601a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 802601c:	4299      	cmp	r1, r3
 802601e:	bfa8      	it	ge
 8026020:	4619      	movge	r1, r3
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller than the left value*/
 8026022:	6a83      	ldr	r3, [r0, #40]	; 0x28
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 8026024:	460d      	mov	r5, r1
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller than the left value*/
 8026026:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8026028:	4299      	cmp	r1, r3
 802602a:	bfb8      	it	lt
 802602c:	4619      	movlt	r1, r3
 802602e:	42a9      	cmp	r1, r5
 8026030:	bfb8      	it	lt
 8026032:	4629      	movlt	r1, r5
    if(bar->cur_value == value) return;
 8026034:	428e      	cmp	r6, r1
 8026036:	d006      	beq.n	8026046 <lv_bar_set_value+0x34>
    lv_bar_set_value_with_anim(obj, value, &bar->cur_value, &bar->cur_value_anim, anim);
 8026038:	9200      	str	r2, [sp, #0]
 802603a:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 802603e:	f100 0224 	add.w	r2, r0, #36	; 0x24
 8026042:	f7ed fad7 	bl	80135f4 <lv_bar_set_value_with_anim>
}
 8026046:	b002      	add	sp, #8
 8026048:	bd70      	pop	{r4, r5, r6, pc}

0802604a <lv_bar_constructor>:
{
 802604a:	b538      	push	{r3, r4, r5, lr}
    bar->cur_value = 0;
 802604c:	2500      	movs	r5, #0
    bar->max_value = 100;
 802604e:	2364      	movs	r3, #100	; 0x64
{
 8026050:	460c      	mov	r4, r1

static void lv_bar_init_anim(lv_obj_t * obj, _lv_bar_anim_t * bar_anim)
{
    bar_anim->bar = obj;
    bar_anim->anim_start = 0;
    bar_anim->anim_end = 0;
 8026052:	644d      	str	r5, [r1, #68]	; 0x44
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 8026054:	4620      	mov	r0, r4
    bar->start_value = 0;
 8026056:	e9c1 350b 	strd	r3, r5, [r1, #44]	; 0x2c
    bar->mode = LV_BAR_MODE_NORMAL;
 802605a:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
 802605e:	f365 0301 	bfi	r3, r5, #0, #2
 8026062:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 8026066:	f04f 33ff 	mov.w	r3, #4294967295
    bar->min_value = 0;
 802606a:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    bar_anim->bar = obj;
 802606e:	e9c1 3112 	strd	r3, r1, [r1, #72]	; 0x48
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 8026072:	658b      	str	r3, [r1, #88]	; 0x58
    bar->indic_area.x2 = 0;
 8026074:	e9c1 550d 	strd	r5, r5, [r1, #52]	; 0x34
    bar_anim->anim_start = 0;
 8026078:	e9c1 150f 	strd	r1, r5, [r1, #60]	; 0x3c
    bar_anim->anim_end = 0;
 802607c:	e9c1 5514 	strd	r5, r5, [r1, #80]	; 0x50
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 8026080:	2108      	movs	r1, #8
 8026082:	f7f5 fc74 	bl	801b96e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8026086:	4620      	mov	r0, r4
 8026088:	2110      	movs	r1, #16
 802608a:	f7f5 fc70 	bl	801b96e <lv_obj_clear_flag>
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 802608e:	462a      	mov	r2, r5
 8026090:	4629      	mov	r1, r5
 8026092:	4620      	mov	r0, r4
}
 8026094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 8026098:	f7ff bfbb 	b.w	8026012 <lv_bar_set_value>

0802609c <lv_bar_set_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) {
 802609c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80260a0:	f003 0303 	and.w	r3, r3, #3
 80260a4:	2b02      	cmp	r3, #2
{
 80260a6:	b513      	push	{r0, r1, r4, lr}
    if(bar->mode != LV_BAR_MODE_RANGE) {
 80260a8:	d115      	bne.n	80260d6 <lv_bar_set_start_value+0x3a>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 80260aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80260ac:	4299      	cmp	r1, r3
 80260ae:	bfa8      	it	ge
 80260b0:	4619      	movge	r1, r3
 80260b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80260b4:	4299      	cmp	r1, r3
 80260b6:	bfb8      	it	lt
 80260b8:	4619      	movlt	r1, r3
    value = value > bar->cur_value ? bar->cur_value : value; /*Can't be greater than the right value*/
 80260ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80260bc:	4299      	cmp	r1, r3
 80260be:	bfa8      	it	ge
 80260c0:	4619      	movge	r1, r3
    if(bar->start_value == value) return;
 80260c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80260c4:	428b      	cmp	r3, r1
 80260c6:	d006      	beq.n	80260d6 <lv_bar_set_start_value+0x3a>
    lv_bar_set_value_with_anim(obj, value, &bar->start_value, &bar->start_value_anim, anim);
 80260c8:	9200      	str	r2, [sp, #0]
 80260ca:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 80260ce:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80260d2:	f7ed fa8f 	bl	80135f4 <lv_bar_set_value_with_anim>
}
 80260d6:	b002      	add	sp, #8
 80260d8:	bd10      	pop	{r4, pc}

080260da <lv_bar_get_value>:
    return LV_BAR_GET_ANIM_VALUE(bar->cur_value, bar->cur_value_anim);
 80260da:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80260dc:	3301      	adds	r3, #1
 80260de:	bf14      	ite	ne
 80260e0:	6c40      	ldrne	r0, [r0, #68]	; 0x44
 80260e2:	6a40      	ldreq	r0, [r0, #36]	; 0x24
}
 80260e4:	4770      	bx	lr

080260e6 <lv_bar_get_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) return bar->min_value;
 80260e6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80260ea:	f003 0303 	and.w	r3, r3, #3
 80260ee:	2b02      	cmp	r3, #2
 80260f0:	d001      	beq.n	80260f6 <lv_bar_get_start_value+0x10>
 80260f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80260f4:	4770      	bx	lr
    return LV_BAR_GET_ANIM_VALUE(bar->start_value, bar->start_value_anim);
 80260f6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80260f8:	3301      	adds	r3, #1
 80260fa:	bf14      	ite	ne
 80260fc:	6d40      	ldrne	r0, [r0, #84]	; 0x54
 80260fe:	6b00      	ldreq	r0, [r0, #48]	; 0x30
}
 8026100:	4770      	bx	lr

08026102 <lv_bar_get_mode>:
    return bar->mode;
 8026102:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
}
 8026106:	f000 0003 	and.w	r0, r0, #3
 802610a:	4770      	bx	lr

0802610c <lv_btn_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_btn_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 802610c:	b510      	push	{r4, lr}
 802610e:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8026110:	2110      	movs	r1, #16
 8026112:	4620      	mov	r0, r4
 8026114:	f7f5 fc2b 	bl	801b96e <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8026118:	4620      	mov	r0, r4
 802611a:	f44f 6180 	mov.w	r1, #1024	; 0x400

    LV_TRACE_OBJ_CREATE("finished");
}
 802611e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8026122:	f7f5 bbee 	b.w	801b902 <lv_obj_add_flag>

08026126 <lv_btnmatrix_destructor>:
{
 8026126:	b510      	push	{r4, lr}
 8026128:	460c      	mov	r4, r1
    lv_mem_free(btnm->button_areas);
 802612a:	6a88      	ldr	r0, [r1, #40]	; 0x28
 802612c:	f7ec fade 	bl	80126ec <lv_mem_free>
    lv_mem_free(btnm->ctrl_bits);
 8026130:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8026132:	f7ec fadb 	bl	80126ec <lv_mem_free>
    btnm->button_areas = NULL;
 8026136:	2300      	movs	r3, #0
    btnm->ctrl_bits = NULL;
 8026138:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
}
 802613c:	bd10      	pop	{r4, pc}

0802613e <lv_obj_get_style_pad_column.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 802613e:	2215      	movs	r2, #21
 8026140:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
 8026142:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8026144:	f7f7 fc9c 	bl	801da80 <lv_obj_get_style_prop>
}
 8026148:	b200      	sxth	r0, r0
 802614a:	bd08      	pop	{r3, pc}

0802614c <get_button_from_point>:
{
 802614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026150:	b08b      	sub	sp, #44	; 0x2c
 8026152:	4605      	mov	r5, r0
    for(i = 0; i < btnm->btn_cnt; i++) {
 8026154:	f04f 0b00 	mov.w	fp, #0
{
 8026158:	9103      	str	r1, [sp, #12]
    lv_obj_get_coords(obj, &obj_cords);
 802615a:	a906      	add	r1, sp, #24
 802615c:	f7f6 fb1a 	bl	801c794 <lv_obj_get_coords>
    lv_coord_t w = lv_obj_get_width(obj);
 8026160:	4628      	mov	r0, r5
 8026162:	f7f6 fb67 	bl	801c834 <lv_obj_get_width>
 8026166:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(obj);
 8026168:	4628      	mov	r0, r5
 802616a:	f7f6 fb69 	bl	801c840 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802616e:	2212      	movs	r2, #18
 8026170:	2100      	movs	r1, #0
 8026172:	9002      	str	r0, [sp, #8]
 8026174:	4628      	mov	r0, r5
 8026176:	f7f7 fc83 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802617a:	2213      	movs	r2, #19
    return (lv_coord_t)v.num;
 802617c:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8026180:	2100      	movs	r1, #0
 8026182:	4628      	mov	r0, r5
 8026184:	f7f7 fc7c 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8026188:	2210      	movs	r2, #16
    return (lv_coord_t)v.num;
 802618a:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802618c:	2100      	movs	r1, #0
 802618e:	4628      	mov	r0, r5
 8026190:	f7f7 fc76 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8026194:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 8026196:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8026198:	2100      	movs	r1, #0
 802619a:	4628      	mov	r0, r5
 802619c:	f7f7 fc70 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 80261a0:	2214      	movs	r2, #20
    return (lv_coord_t)v.num;
 80261a2:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 80261a6:	2100      	movs	r1, #0
 80261a8:	4628      	mov	r0, r5
 80261aa:	f7f7 fc69 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80261ae:	b204      	sxth	r4, r0
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 80261b0:	4628      	mov	r0, r5
 80261b2:	f7ff ffc4 	bl	802613e <lv_obj_get_style_pad_column.constprop.0>
    prow = (prow / 2) + 1 + (prow & 1);
 80261b6:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
 80261ba:	f004 0301 	and.w	r3, r4, #1
    pcol = (pcol / 2) + 1 + (pcol & 1);
 80261be:	f000 0401 	and.w	r4, r0, #1
    prow = (prow / 2) + 1 + (prow & 1);
 80261c2:	eb03 0362 	add.w	r3, r3, r2, asr #1
    pcol = (pcol / 2) + 1 + (pcol & 1);
 80261c6:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
    prow = (prow / 2) + 1 + (prow & 1);
 80261ca:	3301      	adds	r3, #1
    pcol = (pcol / 2) + 1 + (pcol & 1);
 80261cc:	eb04 0462 	add.w	r4, r4, r2, asr #1
    prow = (prow / 2) + 1 + (prow & 1);
 80261d0:	b21b      	sxth	r3, r3
    pcol = (pcol / 2) + 1 + (pcol & 1);
 80261d2:	3401      	adds	r4, #1
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 80261d4:	2b0d      	cmp	r3, #13
    pcol = (pcol / 2) + 1 + (pcol & 1);
 80261d6:	b224      	sxth	r4, r4
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 80261d8:	bfa8      	it	ge
 80261da:	230d      	movge	r3, #13
    pcol = LV_MIN(pcol, BTN_EXTRA_CLICK_AREA_MAX);
 80261dc:	2c0d      	cmp	r4, #13
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 80261de:	9301      	str	r3, [sp, #4]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 80261e0:	4653      	mov	r3, sl
    pcol = LV_MIN(pcol, BTN_EXTRA_CLICK_AREA_MAX);
 80261e2:	bfa8      	it	ge
 80261e4:	240d      	movge	r4, #13
    pright = LV_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
 80261e6:	2e0d      	cmp	r6, #13
 80261e8:	bfa8      	it	ge
 80261ea:	260d      	movge	r6, #13
    ptop = LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 80261ec:	2f0d      	cmp	r7, #13
 80261ee:	bfa8      	it	ge
 80261f0:	270d      	movge	r7, #13
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 80261f2:	f1b8 0f0d 	cmp.w	r8, #13
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 80261f6:	eba9 0906 	sub.w	r9, r9, r6
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 80261fa:	bfa8      	it	ge
 80261fc:	f04f 080d 	movge.w	r8, #13
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8026200:	2b0d      	cmp	r3, #13
 8026202:	bfa8      	it	ge
 8026204:	230d      	movge	r3, #13
 8026206:	9304      	str	r3, [sp, #16]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 8026208:	f1a9 0302 	sub.w	r3, r9, #2
 802620c:	9305      	str	r3, [sp, #20]
 802620e:	fa1f f98b 	uxth.w	r9, fp
    for(i = 0; i < btnm->btn_cnt; i++) {
 8026212:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8026214:	454b      	cmp	r3, r9
 8026216:	d955      	bls.n	80262c4 <get_button_from_point+0x178>
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
 8026218:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802621a:	fa1f f38b 	uxth.w	r3, fp
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 802621e:	f10b 0b01 	add.w	fp, fp, #1
    dest->x1 = src->x1;
 8026222:	f932 1033 	ldrsh.w	r1, [r2, r3, lsl #3]
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
 8026226:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 802622a:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 802622e:	458a      	cmp	sl, r1
 8026230:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    dest->y1 = src->y1;
 8026234:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8026238:	bfac      	ite	ge
 802623a:	9904      	ldrge	r1, [sp, #16]
        else btn_area.x1 += obj_cords.x1 - pcol;
 802623c:	1b11      	sublt	r1, r2, r4
    dest->x2 = src->x2;
 802623e:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8026242:	bfac      	ite	ge
 8026244:	1a51      	subge	r1, r2, r1
        else btn_area.x1 += obj_cords.x1 - pcol;
 8026246:	185b      	addlt	r3, r3, r1
    dest->y2 = src->y2;
 8026248:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 802624c:	bfaa      	itet	ge
 802624e:	18c9      	addge	r1, r1, r3
        else btn_area.x1 += obj_cords.x1 - pcol;
 8026250:	b21b      	sxthlt	r3, r3
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8026252:	b20b      	sxthge	r3, r1
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8026254:	4577      	cmp	r7, lr
 8026256:	fa1f f18e 	uxth.w	r1, lr
 802625a:	f8ad 3020 	strh.w	r3, [sp, #32]
 802625e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
        else btn_area.y1 += obj_cords.y1 - prow;
 8026262:	bfb5      	itete	lt
 8026264:	f8dd e004 	ldrlt.w	lr, [sp, #4]
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8026268:	eba3 0e07 	subge.w	lr, r3, r7
        else btn_area.y1 += obj_cords.y1 - prow;
 802626c:	eba3 0e0e 	sublt.w	lr, r3, lr
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8026270:	448e      	addge	lr, r1
        else btn_area.y1 += obj_cords.y1 - prow;
 8026272:	bfb4      	ite	lt
 8026274:	4471      	addlt	r1, lr
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8026276:	fa0f f18e 	sxthge.w	r1, lr
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 802627a:	f8dd e014 	ldr.w	lr, [sp, #20]
        else btn_area.y1 += obj_cords.y1 - prow;
 802627e:	bfb8      	it	lt
 8026280:	b209      	sxthlt	r1, r1
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 8026282:	45f4      	cmp	ip, lr
 8026284:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8026288:	fa1f f18c 	uxth.w	r1, ip
 802628c:	bfac      	ite	ge
 802628e:	1992      	addge	r2, r2, r6
        else btn_area.x2 += obj_cords.x1 + pcol;
 8026290:	1912      	addlt	r2, r2, r4
 8026292:	440a      	add	r2, r1
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 8026294:	9902      	ldr	r1, [sp, #8]
 8026296:	eba1 0108 	sub.w	r1, r1, r8
        else btn_area.x2 += obj_cords.x1 + pcol;
 802629a:	b212      	sxth	r2, r2
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 802629c:	3902      	subs	r1, #2
 802629e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80262a2:	b282      	uxth	r2, r0
 80262a4:	4288      	cmp	r0, r1
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 80262a6:	a808      	add	r0, sp, #32
        else btn_area.y2 += obj_cords.y1 + prow;
 80262a8:	bfb6      	itet	lt
 80262aa:	9901      	ldrlt	r1, [sp, #4]
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 80262ac:	4443      	addge	r3, r8
        else btn_area.y2 += obj_cords.y1 + prow;
 80262ae:	185b      	addlt	r3, r3, r1
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 80262b0:	9903      	ldr	r1, [sp, #12]
        else btn_area.y2 += obj_cords.y1 + prow;
 80262b2:	4413      	add	r3, r2
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 80262b4:	2200      	movs	r2, #0
        else btn_area.y2 += obj_cords.y1 + prow;
 80262b6:	b21b      	sxth	r3, r3
 80262b8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 80262bc:	f7fe f826 	bl	802430c <_lv_area_is_point_on>
 80262c0:	2800      	cmp	r0, #0
 80262c2:	d0a4      	beq.n	802620e <get_button_from_point+0xc2>
    if(i == btnm->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
 80262c4:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 80262c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80262ca:	454a      	cmp	r2, r9
 80262cc:	bf08      	it	eq
 80262ce:	4699      	moveq	r9, r3
}
 80262d0:	4648      	mov	r0, r9
 80262d2:	b00b      	add	sp, #44	; 0x2c
 80262d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080262d8 <invalidate_button_area>:
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 80262d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80262dc:	4299      	cmp	r1, r3
{
 80262de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80262e0:	4605      	mov	r5, r0
 80262e2:	b085      	sub	sp, #20
 80262e4:	460e      	mov	r6, r1
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 80262e6:	d062      	beq.n	80263ae <invalidate_button_area+0xd6>
    if(btn_idx >= btnm->btn_cnt) return;
 80262e8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80262ea:	428b      	cmp	r3, r1
 80262ec:	d95f      	bls.n	80263ae <invalidate_button_area+0xd6>
    lv_area_copy(&btn_area, &btnm->button_areas[btn_idx]);
 80262ee:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80262f0:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    dest->x1 = src->x1;
 80262f4:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
    lv_obj_get_coords(obj, &obj_area);
 80262f8:	a902      	add	r1, sp, #8
 80262fa:	f8ad 2000 	strh.w	r2, [sp]
    dest->y1 = src->y1;
 80262fe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8026302:	f8ad 2002 	strh.w	r2, [sp, #2]
    dest->x2 = src->x2;
 8026306:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    dest->y2 = src->y2;
 802630a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    dest->x2 = src->x2;
 802630e:	f8ad 2004 	strh.w	r2, [sp, #4]
    dest->y2 = src->y2;
 8026312:	f8ad 3006 	strh.w	r3, [sp, #6]
 8026316:	f7f6 fa3d 	bl	801c794 <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 802631a:	2214      	movs	r2, #20
 802631c:	2100      	movs	r1, #0
 802631e:	4628      	mov	r0, r5
 8026320:	f7f7 fbae 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8026324:	b207      	sxth	r7, r0
    lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 8026326:	4628      	mov	r0, r5
 8026328:	f7ff ff09 	bl	802613e <lv_obj_get_style_pad_column.constprop.0>
 802632c:	4604      	mov	r4, r0
    lv_coord_t dpi = lv_disp_get_dpi(lv_obj_get_disp(obj));
 802632e:	4628      	mov	r0, r5
 8026330:	f7e0 fa9c 	bl	800686c <lv_obj_get_disp>
 8026334:	f7eb fed0 	bl	80120d8 <lv_disp_get_dpi>
    row_gap = LV_MAX(row_gap, dpi / 10);
 8026338:	230a      	movs	r3, #10
    btn_area.x1 += obj_area.x1 - row_gap;
 802633a:	f8bd c008 	ldrh.w	ip, [sp, #8]
 802633e:	f8bd 1000 	ldrh.w	r1, [sp]
    row_gap = LV_MAX(row_gap, dpi / 10);
 8026342:	fb90 f3f3 	sdiv	r3, r0, r3
 8026346:	b21b      	sxth	r3, r3
    btn_area.x1 += obj_area.x1 - row_gap;
 8026348:	4461      	add	r1, ip
    btn_area.y1 += obj_area.y1 - col_gap;
 802634a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    row_gap = LV_MAX(row_gap, dpi / 10);
 802634e:	429f      	cmp	r7, r3
 8026350:	bfb8      	it	lt
 8026352:	461f      	movlt	r7, r3
    col_gap = LV_MAX(col_gap, dpi / 10);
 8026354:	429c      	cmp	r4, r3
 8026356:	bfb8      	it	lt
 8026358:	461c      	movlt	r4, r3
    btn_area.x1 += obj_area.x1 - row_gap;
 802635a:	b2ba      	uxth	r2, r7
    btn_area.y1 += obj_area.y1 - col_gap;
 802635c:	b2a3      	uxth	r3, r4
    btn_area.x2 += obj_area.x1 + row_gap;
 802635e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    btn_area.x1 += obj_area.x1 - row_gap;
 8026362:	1a89      	subs	r1, r1, r2
    btn_area.x2 += obj_area.x1 + row_gap;
 8026364:	44a4      	add	ip, r4
    btn_area.x1 += obj_area.x1 - row_gap;
 8026366:	f8ad 1000 	strh.w	r1, [sp]
    btn_area.x2 += obj_area.x1 + row_gap;
 802636a:	4494      	add	ip, r2
    btn_area.y1 += obj_area.y1 - col_gap;
 802636c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    btn_area.y2 += obj_area.y1 + col_gap;
 8026370:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    btn_area.y1 += obj_area.y1 - col_gap;
 8026374:	4401      	add	r1, r0
    btn_area.x2 += obj_area.x1 + row_gap;
 8026376:	f8ad c004 	strh.w	ip, [sp, #4]
    btn_area.y2 += obj_area.y1 + col_gap;
 802637a:	4402      	add	r2, r0
    btn_area.y1 += obj_area.y1 - col_gap;
 802637c:	1ac9      	subs	r1, r1, r3
    btn_area.y2 += obj_area.y1 + col_gap;
 802637e:	4413      	add	r3, r2
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8026380:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
    btn_area.y1 += obj_area.y1 - col_gap;
 8026382:	b289      	uxth	r1, r1
    btn_area.y2 += obj_area.y1 + col_gap;
 8026384:	b29b      	uxth	r3, r3
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8026386:	42b2      	cmp	r2, r6
    btn_area.y1 += obj_area.y1 - col_gap;
 8026388:	f8ad 1002 	strh.w	r1, [sp, #2]
    btn_area.y2 += obj_area.y1 + col_gap;
 802638c:	f8ad 3006 	strh.w	r3, [sp, #6]
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8026390:	d109      	bne.n	80263a6 <invalidate_button_area+0xce>
 8026392:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8026394:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8026398:	0552      	lsls	r2, r2, #21
        btn_area.y1 -= lv_area_get_height(&btn_area);
 802639a:	bf42      	ittt	mi
 802639c:	43db      	mvnmi	r3, r3
 802639e:	eb03 0341 	addmi.w	r3, r3, r1, lsl #1
 80263a2:	f8ad 3002 	strhmi.w	r3, [sp, #2]
    lv_obj_invalidate_area(obj, &btn_area);
 80263a6:	4669      	mov	r1, sp
 80263a8:	4628      	mov	r0, r5
 80263aa:	f7f6 fc22 	bl	801cbf2 <lv_obj_invalidate_area>
}
 80263ae:	b005      	add	sp, #20
 80263b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080263b2 <lv_btnmatrix_set_map>:
    if(map == NULL) return;
 80263b2:	b109      	cbz	r1, 80263b8 <lv_btnmatrix_set_map+0x6>
 80263b4:	f7ed bc64 	b.w	8013c80 <lv_btnmatrix_set_map.part.0>
}
 80263b8:	4770      	bx	lr

080263ba <lv_btnmatrix_set_ctrl_map>:
{
 80263ba:	b510      	push	{r4, lr}
    lv_memcpy(btnm->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 80263bc:	8e02      	ldrh	r2, [r0, #48]	; 0x30
{
 80263be:	4604      	mov	r4, r0
 80263c0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80263c2:	0052      	lsls	r2, r2, #1
 80263c4:	f7f4 f9a1 	bl	801a70a <memcpy>
    lv_btnmatrix_set_map(obj, btnm->map_p);
 80263c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80263ca:	4620      	mov	r0, r4
}
 80263cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_btnmatrix_set_map(obj, btnm->map_p);
 80263d0:	f7ff bfef 	b.w	80263b2 <lv_btnmatrix_set_map>

080263d4 <lv_btnmatrix_set_selected_btn>:
{
 80263d4:	b538      	push	{r3, r4, r5, lr}
    if(btn_id >= btnm->btn_cnt && btn_id != LV_BTNMATRIX_BTN_NONE) return;
 80263d6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 80263d8:	4604      	mov	r4, r0
 80263da:	460d      	mov	r5, r1
    if(btn_id >= btnm->btn_cnt && btn_id != LV_BTNMATRIX_BTN_NONE) return;
 80263dc:	428b      	cmp	r3, r1
 80263de:	d803      	bhi.n	80263e8 <lv_btnmatrix_set_selected_btn+0x14>
 80263e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80263e4:	4299      	cmp	r1, r3
 80263e6:	d10a      	bne.n	80263fe <lv_btnmatrix_set_selected_btn+0x2a>
    invalidate_button_area(obj, btnm->btn_id_sel);
 80263e8:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80263ea:	4620      	mov	r0, r4
 80263ec:	f7ff ff74 	bl	80262d8 <invalidate_button_area>
    invalidate_button_area(obj, btn_id);
 80263f0:	4629      	mov	r1, r5
 80263f2:	4620      	mov	r0, r4
    btnm->btn_id_sel = btn_id;
 80263f4:	86a5      	strh	r5, [r4, #52]	; 0x34
}
 80263f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    invalidate_button_area(obj, btn_id);
 80263fa:	f7ff bf6d 	b.w	80262d8 <invalidate_button_area>
}
 80263fe:	bd38      	pop	{r3, r4, r5, pc}

08026400 <lv_btnmatrix_clear_btn_ctrl>:
{
 8026400:	b570      	push	{r4, r5, r6, lr}
 8026402:	4615      	mov	r5, r2
    if(btn_id >= btnm->btn_cnt) return;
 8026404:	8e02      	ldrh	r2, [r0, #48]	; 0x30
{
 8026406:	4604      	mov	r4, r0
    if(btn_id >= btnm->btn_cnt) return;
 8026408:	428a      	cmp	r2, r1
 802640a:	d90f      	bls.n	802642c <lv_btnmatrix_clear_btn_ctrl+0x2c>
    btnm->ctrl_bits[btn_id] &= (~ctrl);
 802640c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 802640e:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 8026412:	ea22 0205 	bic.w	r2, r2, r5
 8026416:	f826 2011 	strh.w	r2, [r6, r1, lsl #1]
    invalidate_button_area(obj, btn_id);
 802641a:	f7ff ff5d 	bl	80262d8 <invalidate_button_area>
    if(ctrl & LV_BTNMATRIX_CTRL_POPOVER) {
 802641e:	056b      	lsls	r3, r5, #21
 8026420:	d504      	bpl.n	802642c <lv_btnmatrix_clear_btn_ctrl+0x2c>
        lv_obj_refresh_ext_draw_size(obj);
 8026422:	4620      	mov	r0, r4
}
 8026424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_refresh_ext_draw_size(obj);
 8026428:	f7f6 b836 	b.w	801c498 <lv_obj_refresh_ext_draw_size>
}
 802642c:	bd70      	pop	{r4, r5, r6, pc}

0802642e <lv_btnmatrix_clear_btn_ctrl_all>:
{
 802642e:	b570      	push	{r4, r5, r6, lr}
 8026430:	4604      	mov	r4, r0
 8026432:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 8026434:	2500      	movs	r5, #0
 8026436:	b2a9      	uxth	r1, r5
 8026438:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 802643a:	428b      	cmp	r3, r1
 802643c:	d800      	bhi.n	8026440 <lv_btnmatrix_clear_btn_ctrl_all+0x12>
}
 802643e:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_clear_btn_ctrl(obj, i, ctrl);
 8026440:	4632      	mov	r2, r6
 8026442:	4620      	mov	r0, r4
 8026444:	3501      	adds	r5, #1
 8026446:	f7ff ffdb 	bl	8026400 <lv_btnmatrix_clear_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 802644a:	e7f4      	b.n	8026436 <lv_btnmatrix_clear_btn_ctrl_all+0x8>

0802644c <lv_btnmatrix_set_btn_ctrl>:
{
 802644c:	b570      	push	{r4, r5, r6, lr}
    if(btn_id >= btnm->btn_cnt) return;
 802644e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8026450:	4604      	mov	r4, r0
 8026452:	460d      	mov	r5, r1
 8026454:	4616      	mov	r6, r2
    if(btn_id >= btnm->btn_cnt) return;
 8026456:	428b      	cmp	r3, r1
 8026458:	d91a      	bls.n	8026490 <lv_btnmatrix_set_btn_ctrl+0x44>
    if(btnm->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECKED)) {
 802645a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 802645e:	07d9      	lsls	r1, r3, #31
 8026460:	d505      	bpl.n	802646e <lv_btnmatrix_set_btn_ctrl+0x22>
 8026462:	05f2      	lsls	r2, r6, #23
 8026464:	d503      	bpl.n	802646e <lv_btnmatrix_set_btn_ctrl+0x22>
        lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 8026466:	f44f 7180 	mov.w	r1, #256	; 0x100
 802646a:	f7ff ffe0 	bl	802642e <lv_btnmatrix_clear_btn_ctrl_all>
    btnm->ctrl_bits[btn_id] |= ctrl;
 802646e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    invalidate_button_area(obj, btn_id);
 8026470:	4629      	mov	r1, r5
 8026472:	4620      	mov	r0, r4
    btnm->ctrl_bits[btn_id] |= ctrl;
 8026474:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8026478:	4333      	orrs	r3, r6
 802647a:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
    invalidate_button_area(obj, btn_id);
 802647e:	f7ff ff2b 	bl	80262d8 <invalidate_button_area>
    if(ctrl & LV_BTNMATRIX_CTRL_POPOVER) {
 8026482:	0573      	lsls	r3, r6, #21
 8026484:	d504      	bpl.n	8026490 <lv_btnmatrix_set_btn_ctrl+0x44>
        lv_obj_refresh_ext_draw_size(obj);
 8026486:	4620      	mov	r0, r4
}
 8026488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_refresh_ext_draw_size(obj);
 802648c:	f7f6 b804 	b.w	801c498 <lv_obj_refresh_ext_draw_size>
}
 8026490:	bd70      	pop	{r4, r5, r6, pc}

08026492 <lv_btnmatrix_set_btn_ctrl_all>:
{
 8026492:	b570      	push	{r4, r5, r6, lr}
 8026494:	4604      	mov	r4, r0
 8026496:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 8026498:	2500      	movs	r5, #0
 802649a:	b2a9      	uxth	r1, r5
 802649c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 802649e:	428b      	cmp	r3, r1
 80264a0:	d800      	bhi.n	80264a4 <lv_btnmatrix_set_btn_ctrl_all+0x12>
}
 80264a2:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_set_btn_ctrl(obj, i, ctrl);
 80264a4:	4632      	mov	r2, r6
 80264a6:	4620      	mov	r0, r4
 80264a8:	3501      	adds	r5, #1
 80264aa:	f7ff ffcf 	bl	802644c <lv_btnmatrix_set_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 80264ae:	e7f4      	b.n	802649a <lv_btnmatrix_set_btn_ctrl_all+0x8>

080264b0 <lv_btnmatrix_get_selected_btn>:
}
 80264b0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80264b2:	4770      	bx	lr

080264b4 <lv_btnmatrix_has_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return false;
 80264b4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80264b6:	428b      	cmp	r3, r1
 80264b8:	d907      	bls.n	80264ca <lv_btnmatrix_has_btn_ctrl+0x16>
    return ((btnm->ctrl_bits[btn_id] & ctrl) == ctrl) ? true : false;
 80264ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80264bc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80264c0:	439a      	bics	r2, r3
 80264c2:	bf0c      	ite	eq
 80264c4:	2001      	moveq	r0, #1
 80264c6:	2000      	movne	r0, #0
 80264c8:	4770      	bx	lr
    if(btn_id >= btnm->btn_cnt) return false;
 80264ca:	2000      	movs	r0, #0
}
 80264cc:	4770      	bx	lr

080264ce <make_one_button_checked>:
{
 80264ce:	b570      	push	{r4, r5, r6, lr}
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 80264d0:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 80264d4:	4604      	mov	r4, r0
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 80264d6:	f7ff ffed 	bl	80264b4 <lv_btnmatrix_has_btn_ctrl>
 80264da:	4606      	mov	r6, r0
{
 80264dc:	460d      	mov	r5, r1
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 80264de:	4620      	mov	r0, r4
 80264e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80264e4:	f7ff ffa3 	bl	802642e <lv_btnmatrix_clear_btn_ctrl_all>
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 80264e8:	b13e      	cbz	r6, 80264fa <make_one_button_checked+0x2c>
 80264ea:	4629      	mov	r1, r5
 80264ec:	4620      	mov	r0, r4
 80264ee:	f44f 7280 	mov.w	r2, #256	; 0x100
}
 80264f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 80264f6:	f7ff bfa9 	b.w	802644c <lv_btnmatrix_set_btn_ctrl>
}
 80264fa:	bd70      	pop	{r4, r5, r6, pc}

080264fc <lv_btnmatrix_set_one_checked>:
    btnm->one_check     = en;
 80264fc:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 8026500:	f361 0200 	bfi	r2, r1, #0, #1
    make_one_button_checked(obj, 0);
 8026504:	2100      	movs	r1, #0
    btnm->one_check     = en;
 8026506:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
    make_one_button_checked(obj, 0);
 802650a:	f7ff bfe0 	b.w	80264ce <make_one_button_checked>

0802650e <lv_checkbox_destructor>:
{
 802650e:	b538      	push	{r3, r4, r5, lr}
    if(!cb->static_txt) {
 8026510:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
{
 8026514:	460c      	mov	r4, r1
    if(!cb->static_txt) {
 8026516:	f013 0501 	ands.w	r5, r3, #1
 802651a:	d103      	bne.n	8026524 <lv_checkbox_destructor+0x16>
        lv_mem_free(cb->txt);
 802651c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 802651e:	f7ec f8e5 	bl	80126ec <lv_mem_free>
        cb->txt = NULL;
 8026522:	6265      	str	r5, [r4, #36]	; 0x24
}
 8026524:	bd38      	pop	{r3, r4, r5, pc}

08026526 <lv_dropdownlist_destructor>:
    lv_obj_t * dropdown_obj = list->dropdown;
 8026526:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    dropdown->list = NULL;
 8026528:	2200      	movs	r2, #0
 802652a:	625a      	str	r2, [r3, #36]	; 0x24
}
 802652c:	4770      	bx	lr

0802652e <get_label>:
}

static lv_obj_t * get_label(const lv_obj_t * obj)
{
    lv_dropdown_t * dropdown = (lv_dropdown_t *)obj;
    if(dropdown->list == NULL) return NULL;
 802652e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026530:	b110      	cbz	r0, 8026538 <get_label+0xa>

    return lv_obj_get_child(dropdown->list, 0);
 8026532:	2100      	movs	r1, #0
 8026534:	f7f7 be2b 	b.w	801e18e <lv_obj_get_child>
}
 8026538:	4770      	bx	lr

0802653a <position_to_selected>:
{
 802653a:	b570      	push	{r4, r5, r6, lr}
 802653c:	4604      	mov	r4, r0
    lv_obj_t * label = get_label(dropdown_obj);
 802653e:	f7ff fff6 	bl	802652e <get_label>
    if(label == NULL) return;
 8026542:	4605      	mov	r5, r0
 8026544:	b308      	cbz	r0, 802658a <position_to_selected+0x50>
    if(lv_obj_get_height(label) <= lv_obj_get_content_height(dropdown_obj)) return;
 8026546:	f7f6 f97b 	bl	801c840 <lv_obj_get_height>
 802654a:	4606      	mov	r6, r0
 802654c:	4620      	mov	r0, r4
 802654e:	f7f6 f993 	bl	801c878 <lv_obj_get_content_height>
 8026552:	4286      	cmp	r6, r0
 8026554:	dd19      	ble.n	802658a <position_to_selected+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026556:	2257      	movs	r2, #87	; 0x57
 8026558:	2100      	movs	r1, #0
 802655a:	4628      	mov	r0, r5
 802655c:	f7f7 fa90 	bl	801da80 <lv_obj_get_style_prop>
 8026560:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026564:	2259      	movs	r2, #89	; 0x59
 8026566:	2100      	movs	r1, #0
 8026568:	4628      	mov	r0, r5
 802656a:	f7f7 fa89 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 802656e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    lv_coord_t unit_h = font_h + line_space;
 8026570:	4406      	add	r6, r0
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 8026572:	2200      	movs	r2, #0
 8026574:	6a60      	ldr	r0, [r4, #36]	; 0x24
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 8026576:	fb11 f106 	smulbb	r1, r1, r6
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 802657a:	b209      	sxth	r1, r1
 802657c:	f7df fcc8 	bl	8005f10 <lv_obj_scroll_to_y>
    lv_obj_invalidate(dropdown->list);
 8026580:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
 8026582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(dropdown->list);
 8026586:	f7f6 bb55 	b.w	801cc34 <lv_obj_invalidate>
}
 802658a:	bd70      	pop	{r4, r5, r6, pc}

0802658c <lv_dropdownlist_constructor>:
{
 802658c:	b510      	push	{r4, lr}
 802658e:	460c      	mov	r4, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8026590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8026594:	4620      	mov	r0, r4
 8026596:	f7f5 f9ea 	bl	801b96e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 802659a:	4620      	mov	r0, r4
 802659c:	2104      	movs	r1, #4
 802659e:	f7f5 f9e6 	bl	801b96e <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_IGNORE_LAYOUT);
 80265a2:	4620      	mov	r0, r4
 80265a4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80265a8:	f7f5 f9ab 	bl	801b902 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_HIDDEN);
 80265ac:	4620      	mov	r0, r4
 80265ae:	2101      	movs	r1, #1
 80265b0:	f7f5 f9a7 	bl	801b902 <lv_obj_add_flag>
    lv_label_create(obj);
 80265b4:	4620      	mov	r0, r4
}
 80265b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_label_create(obj);
 80265ba:	f7ef be17 	b.w	80161ec <lv_label_create>

080265be <lv_dropdown_destructor>:
    if(dropdown->list) {
 80265be:	6a48      	ldr	r0, [r1, #36]	; 0x24
{
 80265c0:	b538      	push	{r3, r4, r5, lr}
 80265c2:	460c      	mov	r4, r1
    if(dropdown->list) {
 80265c4:	b118      	cbz	r0, 80265ce <lv_dropdown_destructor+0x10>
        lv_obj_del(dropdown->list);
 80265c6:	f7f7 fe8e 	bl	801e2e6 <lv_obj_del>
        dropdown->list = NULL;
 80265ca:	2300      	movs	r3, #0
 80265cc:	6263      	str	r3, [r4, #36]	; 0x24
    if(!dropdown->static_txt) {
 80265ce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80265d2:	f013 0510 	ands.w	r5, r3, #16
 80265d6:	d103      	bne.n	80265e0 <lv_dropdown_destructor+0x22>
        lv_mem_free(dropdown->options);
 80265d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80265da:	f7ec f887 	bl	80126ec <lv_mem_free>
        dropdown->options = NULL;
 80265de:	6325      	str	r5, [r4, #48]	; 0x30
}
 80265e0:	bd38      	pop	{r3, r4, r5, pc}

080265e2 <draw_box_label>:
{
 80265e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80265e6:	4690      	mov	r8, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 80265e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 80265ec:	b08f      	sub	sp, #60	; 0x3c
 80265ee:	4606      	mov	r6, r0
    if(id == LV_DROPDOWN_PR_NONE) return;
 80265f0:	4590      	cmp	r8, r2
{
 80265f2:	460d      	mov	r5, r1
    if(id == LV_DROPDOWN_PR_NONE) return;
 80265f4:	d05e      	beq.n	80266b4 <draw_box_label+0xd2>
    lv_obj_t * list_obj = dropdown->list;
 80265f6:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_draw_label_dsc_init(&label_dsc);
 80265f8:	a806      	add	r0, sp, #24
    lv_state_t state_orig = list_obj->state;
 80265fa:	8c27      	ldrh	r7, [r4, #32]
    if(state != list_obj->state) {
 80265fc:	429f      	cmp	r7, r3
        list_obj->state = state;
 80265fe:	bf1f      	itttt	ne
 8026600:	8423      	strhne	r3, [r4, #32]
        list_obj->skip_trans = 1;
 8026602:	f894 3022 	ldrbne.w	r3, [r4, #34]	; 0x22
 8026606:	f043 0304 	orrne.w	r3, r3, #4
 802660a:	f884 3022 	strbne.w	r3, [r4, #34]	; 0x22
    lv_draw_label_dsc_init(&label_dsc);
 802660e:	f7e1 fb4b 	bl	8007ca8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(list_obj, LV_PART_SELECTED, &label_dsc);
 8026612:	aa06      	add	r2, sp, #24
 8026614:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8026618:	4620      	mov	r0, r4
 802661a:	f7f5 fd88 	bl	801c12e <lv_obj_init_draw_label_dsc>
 802661e:	2259      	movs	r2, #89	; 0x59
 8026620:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8026624:	4620      	mov	r0, r4
 8026626:	f7f7 fa2b 	bl	801da80 <lv_obj_get_style_prop>
    label_dsc.line_space = lv_obj_get_style_text_line_space(list_obj,
 802662a:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    lv_obj_t * label = get_label(dropdown_obj);
 802662e:	4630      	mov	r0, r6
 8026630:	f7ff ff7d 	bl	802652e <get_label>
    if(label == NULL) return;
 8026634:	4606      	mov	r6, r0
 8026636:	2800      	cmp	r0, #0
 8026638:	d03c      	beq.n	80266b4 <draw_box_label+0xd2>
 802663a:	9b06      	ldr	r3, [sp, #24]
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 802663c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8026640:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
    area_sel.y1 -= label_dsc.line_space / 2;
 8026644:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 8026648:	1853      	adds	r3, r2, r1
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 802664a:	3901      	subs	r1, #1
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 802664c:	fb13 f308 	smulbb	r3, r3, r8
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 8026650:	4411      	add	r1, r2
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 8026652:	f10d 0810 	add.w	r8, sp, #16
 8026656:	aa02      	add	r2, sp, #8
    area_sel.y1 -= label_dsc.line_space / 2;
 8026658:	eba3 0360 	sub.w	r3, r3, r0, asr #1
 802665c:	8af0      	ldrh	r0, [r6, #22]
 802665e:	4403      	add	r3, r0
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 8026660:	4640      	mov	r0, r8
    area_sel.y1 -= label_dsc.line_space / 2;
 8026662:	b29b      	uxth	r3, r3
 8026664:	f8ad 300a 	strh.w	r3, [sp, #10]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 8026668:	440b      	add	r3, r1
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 802666a:	68a9      	ldr	r1, [r5, #8]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 802666c:	f8ad 300e 	strh.w	r3, [sp, #14]
    area_sel.x1 = list_obj->coords.x1;
 8026670:	8aa3      	ldrh	r3, [r4, #20]
 8026672:	f8ad 3008 	strh.w	r3, [sp, #8]
    area_sel.x2 = list_obj->coords.x2;
 8026676:	8b23      	ldrh	r3, [r4, #24]
 8026678:	f8ad 300c 	strh.w	r3, [sp, #12]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 802667c:	f7fd fdf9 	bl	8024272 <_lv_area_intersect>
    if(area_ok) {
 8026680:	b188      	cbz	r0, 80266a6 <draw_box_label+0xc4>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8026682:	f8d5 9008 	ldr.w	r9, [r5, #8]
        lv_draw_label(draw_ctx, &label_dsc, &label->coords, lv_label_get_text(label), NULL);
 8026686:	4630      	mov	r0, r6
        draw_ctx->clip_area = &mask_sel;
 8026688:	f8c5 8008 	str.w	r8, [r5, #8]
        lv_draw_label(draw_ctx, &label_dsc, &label->coords, lv_label_get_text(label), NULL);
 802668c:	f000 fc77 	bl	8026f7e <lv_label_get_text>
 8026690:	2200      	movs	r2, #0
 8026692:	4603      	mov	r3, r0
 8026694:	a906      	add	r1, sp, #24
 8026696:	9200      	str	r2, [sp, #0]
 8026698:	4628      	mov	r0, r5
 802669a:	f106 0214 	add.w	r2, r6, #20
 802669e:	f7e1 fb1b 	bl	8007cd8 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 80266a2:	f8c5 9008 	str.w	r9, [r5, #8]
    list_obj->skip_trans = 0;
 80266a6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    list_obj->state = state_orig;
 80266aa:	8427      	strh	r7, [r4, #32]
    list_obj->skip_trans = 0;
 80266ac:	f36f 0382 	bfc	r3, #2, #1
 80266b0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 80266b4:	b00f      	add	sp, #60	; 0x3c
 80266b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080266ba <draw_box>:
{
 80266ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266be:	4692      	mov	sl, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 80266c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 80266c4:	b091      	sub	sp, #68	; 0x44
 80266c6:	4605      	mov	r5, r0
    if(id == LV_DROPDOWN_PR_NONE) return;
 80266c8:	4592      	cmp	sl, r2
{
 80266ca:	460e      	mov	r6, r1
    if(id == LV_DROPDOWN_PR_NONE) return;
 80266cc:	d04e      	beq.n	802676c <draw_box+0xb2>
    lv_obj_t * list_obj = dropdown->list;
 80266ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80266d0:	2257      	movs	r2, #87	; 0x57
 80266d2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    lv_state_t state_ori = list_obj->state;
 80266d6:	8c27      	ldrh	r7, [r4, #32]
 80266d8:	4620      	mov	r0, r4
    if(state != list_obj->state) {
 80266da:	429f      	cmp	r7, r3
        list_obj->state = state;
 80266dc:	bf1f      	itttt	ne
 80266de:	8423      	strhne	r3, [r4, #32]
        list_obj->skip_trans = 1;
 80266e0:	f894 3022 	ldrbne.w	r3, [r4, #34]	; 0x22
 80266e4:	f043 0304 	orrne.w	r3, r3, #4
 80266e8:	f884 3022 	strbne.w	r3, [r4, #34]	; 0x22
 80266ec:	f7f7 f9c8 	bl	801da80 <lv_obj_get_style_prop>
 80266f0:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80266f2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80266f6:	2259      	movs	r2, #89	; 0x59
 80266f8:	4620      	mov	r0, r4
 80266fa:	f7f7 f9c1 	bl	801da80 <lv_obj_get_style_prop>
 80266fe:	f9b9 9008 	ldrsh.w	r9, [r9, #8]
    return (lv_coord_t)v.num;
 8026702:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026706:	4680      	mov	r8, r0
    lv_obj_t * label = get_label(dropdown_obj);
 8026708:	4628      	mov	r0, r5
 802670a:	f7ff ff10 	bl	802652e <get_label>
    rect_area.y1 += id * (font_h + line_space);
 802670e:	eb09 020b 	add.w	r2, r9, fp
    rect_area.y1 -= line_space / 2;
 8026712:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 8026716:	8ac3      	ldrh	r3, [r0, #22]
    rect_area.y1 += id * (font_h + line_space);
 8026718:	fb12 f20a 	smulbb	r2, r2, sl
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 802671c:	f108 38ff 	add.w	r8, r8, #4294967295
    lv_draw_rect_dsc_init(&sel_rect);
 8026720:	a802      	add	r0, sp, #8
    rect_area.y1 -= line_space / 2;
 8026722:	eba2 026b 	sub.w	r2, r2, fp, asr #1
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 8026726:	44c8      	add	r8, r9
    rect_area.y1 -= line_space / 2;
 8026728:	441a      	add	r2, r3
    rect_area.x1 = dropdown->list->coords.x1;
 802672a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    rect_area.y1 -= line_space / 2;
 802672c:	b292      	uxth	r2, r2
 802672e:	f8ad 2002 	strh.w	r2, [sp, #2]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 8026732:	4442      	add	r2, r8
 8026734:	f8ad 2006 	strh.w	r2, [sp, #6]
    rect_area.x1 = dropdown->list->coords.x1;
 8026738:	8a9a      	ldrh	r2, [r3, #20]
    rect_area.x2 = dropdown->list->coords.x2;
 802673a:	8b1b      	ldrh	r3, [r3, #24]
    rect_area.x1 = dropdown->list->coords.x1;
 802673c:	f8ad 2000 	strh.w	r2, [sp]
    rect_area.x2 = dropdown->list->coords.x2;
 8026740:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_draw_rect_dsc_init(&sel_rect);
 8026744:	f7e2 f8fa 	bl	800893c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(list_obj,  LV_PART_SELECTED, &sel_rect);
 8026748:	aa02      	add	r2, sp, #8
 802674a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 802674e:	4620      	mov	r0, r4
 8026750:	f7f5 fb9e 	bl	801be90 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &sel_rect, &rect_area);
 8026754:	466a      	mov	r2, sp
 8026756:	a902      	add	r1, sp, #8
 8026758:	4630      	mov	r0, r6
 802675a:	f7f8 fe24 	bl	801f3a6 <lv_draw_rect>
    list_obj->skip_trans = 0;
 802675e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    list_obj->state = state_ori;
 8026762:	8427      	strh	r7, [r4, #32]
    list_obj->skip_trans = 0;
 8026764:	f36f 0382 	bfc	r3, #2, #1
 8026768:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 802676c:	b011      	add	sp, #68	; 0x44
 802676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026772 <get_id_on_point>:
{
 8026772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026776:	4606      	mov	r6, r0
 8026778:	460d      	mov	r5, r1
    lv_obj_t * label = get_label(dropdown_obj);
 802677a:	f7ff fed8 	bl	802652e <get_label>
    if(label == NULL) return 0;
 802677e:	4604      	mov	r4, r0
 8026780:	b1f8      	cbz	r0, 80267c2 <get_id_on_point+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026782:	2257      	movs	r2, #87	; 0x57
 8026784:	2100      	movs	r1, #0
    y -= label->coords.y1;
 8026786:	f8b0 8016 	ldrh.w	r8, [r0, #22]
 802678a:	f7f7 f979 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802678e:	2259      	movs	r2, #89	; 0x59
 8026790:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8026794:	2100      	movs	r1, #0
 8026796:	4620      	mov	r0, r4
 8026798:	f7f7 f972 	bl	801da80 <lv_obj_get_style_prop>
    y += line_space / 2;
 802679c:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    lv_coord_t h = font_h + line_space;
 80267a0:	4407      	add	r7, r0
    y += line_space / 2;
 80267a2:	fa03 f380 	sxtah	r3, r3, r0
    uint16_t opt = y / h;
 80267a6:	b23f      	sxth	r7, r7
    y += line_space / 2;
 80267a8:	eb05 0563 	add.w	r5, r5, r3, asr #1
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 80267ac:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
    y += line_space / 2;
 80267ae:	eba5 0508 	sub.w	r5, r5, r8
    uint16_t opt = y / h;
 80267b2:	b22d      	sxth	r5, r5
 80267b4:	fb95 f5f7 	sdiv	r5, r5, r7
 80267b8:	b2a8      	uxth	r0, r5
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 80267ba:	4283      	cmp	r3, r0
 80267bc:	d801      	bhi.n	80267c2 <get_id_on_point+0x50>
 80267be:	3b01      	subs	r3, #1
 80267c0:	b298      	uxth	r0, r3
}
 80267c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080267c6 <lv_dropdown_set_options>:
{
 80267c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80267c8:	4604      	mov	r4, r0
    LV_ASSERT_NULL(options);
 80267ca:	460d      	mov	r5, r1
 80267cc:	b901      	cbnz	r1, 80267d0 <lv_dropdown_set_options+0xa>
 80267ce:	e7fe      	b.n	80267ce <lv_dropdown_set_options+0x8>
    dropdown->option_cnt = 0;
 80267d0:	2300      	movs	r3, #0
 80267d2:	3901      	subs	r1, #1
 80267d4:	8683      	strh	r3, [r0, #52]	; 0x34
        if(options[i] == '\n') dropdown->option_cnt++;
 80267d6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 80267d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        if(options[i] == '\n') dropdown->option_cnt++;
 80267dc:	3301      	adds	r3, #1
 80267de:	b29b      	uxth	r3, r3
    for(i = 0; options[i] != '\0'; i++) {
 80267e0:	b9b2      	cbnz	r2, 8026810 <lv_dropdown_set_options+0x4a>
    size_t len = strlen(options) + 1;
 80267e2:	4628      	mov	r0, r5
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 80267e4:	86a3      	strh	r3, [r4, #52]	; 0x34
    dropdown->sel_opt_id      = 0;
 80267e6:	86e2      	strh	r2, [r4, #54]	; 0x36
    dropdown->sel_opt_id_orig = 0;
 80267e8:	8722      	strh	r2, [r4, #56]	; 0x38
    size_t len = strlen(options) + 1;
 80267ea:	f7f3 ff7b 	bl	801a6e4 <strlen>
 80267ee:	1c47      	adds	r7, r0, #1
    if(dropdown->options != NULL && dropdown->static_txt == 0) {
 80267f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80267f2:	b138      	cbz	r0, 8026804 <lv_dropdown_set_options+0x3e>
 80267f4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80267f8:	f013 0610 	ands.w	r6, r3, #16
 80267fc:	d102      	bne.n	8026804 <lv_dropdown_set_options+0x3e>
        lv_mem_free(dropdown->options);
 80267fe:	f7eb ff75 	bl	80126ec <lv_mem_free>
        dropdown->options = NULL;
 8026802:	6326      	str	r6, [r4, #48]	; 0x30
    dropdown->options = lv_mem_alloc(len);
 8026804:	4638      	mov	r0, r7
 8026806:	f7eb ff53 	bl	80126b0 <lv_mem_alloc>
 802680a:	6320      	str	r0, [r4, #48]	; 0x30
    LV_ASSERT_MALLOC(dropdown->options);
 802680c:	b920      	cbnz	r0, 8026818 <lv_dropdown_set_options+0x52>
 802680e:	e7fe      	b.n	802680e <lv_dropdown_set_options+0x48>
        if(options[i] == '\n') dropdown->option_cnt++;
 8026810:	2a0a      	cmp	r2, #10
 8026812:	bf08      	it	eq
 8026814:	86a3      	strheq	r3, [r4, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 8026816:	e7de      	b.n	80267d6 <lv_dropdown_set_options+0x10>
    strcpy(dropdown->options, options);
 8026818:	4629      	mov	r1, r5
 802681a:	f7f3 ff59 	bl	801a6d0 <strcpy>
    dropdown->static_txt = 0;
 802681e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    lv_obj_invalidate(obj);
 8026822:	4620      	mov	r0, r4
    dropdown->static_txt = 0;
 8026824:	f36f 1304 	bfc	r3, #4, #1
 8026828:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    lv_obj_invalidate(obj);
 802682c:	f7f6 fa02 	bl	801cc34 <lv_obj_invalidate>
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 8026830:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026832:	b118      	cbz	r0, 802683c <lv_dropdown_set_options+0x76>
}
 8026834:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 8026838:	f7f6 b9fc 	b.w	801cc34 <lv_obj_invalidate>
}
 802683c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802683e <lv_dropdown_set_options_static>:
{
 802683e:	b538      	push	{r3, r4, r5, lr}
 8026840:	4604      	mov	r4, r0
    LV_ASSERT_NULL(options);
 8026842:	460d      	mov	r5, r1
 8026844:	b901      	cbnz	r1, 8026848 <lv_dropdown_set_options_static+0xa>
 8026846:	e7fe      	b.n	8026846 <lv_dropdown_set_options_static+0x8>
    dropdown->option_cnt = 0;
 8026848:	2300      	movs	r3, #0
 802684a:	3901      	subs	r1, #1
 802684c:	8683      	strh	r3, [r0, #52]	; 0x34
        if(options[i] == '\n') dropdown->option_cnt++;
 802684e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 8026850:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        if(options[i] == '\n') dropdown->option_cnt++;
 8026854:	3301      	adds	r3, #1
 8026856:	b29b      	uxth	r3, r3
    for(i = 0; options[i] != '\0'; i++) {
 8026858:	b9d2      	cbnz	r2, 8026890 <lv_dropdown_set_options_static+0x52>
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 802685a:	86a3      	strh	r3, [r4, #52]	; 0x34
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 802685c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    dropdown->sel_opt_id      = 0;
 8026860:	86e2      	strh	r2, [r4, #54]	; 0x36
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 8026862:	06db      	lsls	r3, r3, #27
    dropdown->sel_opt_id_orig = 0;
 8026864:	8722      	strh	r2, [r4, #56]	; 0x38
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 8026866:	d403      	bmi.n	8026870 <lv_dropdown_set_options_static+0x32>
 8026868:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802686a:	b108      	cbz	r0, 8026870 <lv_dropdown_set_options_static+0x32>
        lv_mem_free(dropdown->options);
 802686c:	f7eb ff3e 	bl	80126ec <lv_mem_free>
    dropdown->static_txt = 1;
 8026870:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    lv_obj_invalidate(obj);
 8026874:	4620      	mov	r0, r4
    dropdown->options = (char *)options;
 8026876:	6325      	str	r5, [r4, #48]	; 0x30
    dropdown->static_txt = 1;
 8026878:	f043 0310 	orr.w	r3, r3, #16
 802687c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    lv_obj_invalidate(obj);
 8026880:	f7f6 f9d8 	bl	801cc34 <lv_obj_invalidate>
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 8026884:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026886:	b138      	cbz	r0, 8026898 <lv_dropdown_set_options_static+0x5a>
}
 8026888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 802688c:	f7f6 b9d2 	b.w	801cc34 <lv_obj_invalidate>
        if(options[i] == '\n') dropdown->option_cnt++;
 8026890:	2a0a      	cmp	r2, #10
 8026892:	bf08      	it	eq
 8026894:	86a3      	strheq	r3, [r4, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 8026896:	e7da      	b.n	802684e <lv_dropdown_set_options_static+0x10>
}
 8026898:	bd38      	pop	{r3, r4, r5, pc}

0802689a <lv_dropdown_set_selected>:
    if(dropdown->sel_opt_id == sel_opt) return;
 802689a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 802689c:	428b      	cmp	r3, r1
 802689e:	d009      	beq.n	80268b4 <lv_dropdown_set_selected+0x1a>
    dropdown->sel_opt_id      = sel_opt < dropdown->option_cnt ? sel_opt : dropdown->option_cnt - 1;
 80268a0:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 80268a2:	428b      	cmp	r3, r1
 80268a4:	bf9c      	itt	ls
 80268a6:	f103 33ff 	addls.w	r3, r3, #4294967295
 80268aa:	b299      	uxthls	r1, r3
 80268ac:	86c1      	strh	r1, [r0, #54]	; 0x36
    dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 80268ae:	8701      	strh	r1, [r0, #56]	; 0x38
    lv_obj_invalidate(obj);
 80268b0:	f7f6 b9c0 	b.w	801cc34 <lv_obj_invalidate>
}
 80268b4:	4770      	bx	lr

080268b6 <lv_dropdown_get_selected>:
}
 80268b6:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
 80268b8:	4770      	bx	lr

080268ba <lv_dropdown_get_selected_str>:
{
 80268ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80268bc:	4604      	mov	r4, r0
    if(dropdown->options)  {
 80268be:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 80268c0:	460d      	mov	r5, r1
 80268c2:	4616      	mov	r6, r2
    if(dropdown->options)  {
 80268c4:	b160      	cbz	r0, 80268e0 <lv_dropdown_get_selected_str+0x26>
        txt_len     = strlen(dropdown->options);
 80268c6:	f7f3 ff0d 	bl	801a6e4 <strlen>
    uint32_t line        = 0;
 80268ca:	2300      	movs	r3, #0
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 80268cc:	4619      	mov	r1, r3
 80268ce:	4281      	cmp	r1, r0
 80268d0:	d002      	beq.n	80268d8 <lv_dropdown_get_selected_str+0x1e>
 80268d2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80268d4:	429a      	cmp	r2, r3
 80268d6:	d105      	bne.n	80268e4 <lv_dropdown_get_selected_str+0x2a>
 80268d8:	2300      	movs	r3, #0
        if(buf_size && c >= buf_size - 1) {
 80268da:	f106 3cff 	add.w	ip, r6, #4294967295
 80268de:	e00a      	b.n	80268f6 <lv_dropdown_get_selected_str+0x3c>
        buf[0] = '\0';
 80268e0:	7008      	strb	r0, [r1, #0]
}
 80268e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(dropdown->options[i] == '\n') line++;
 80268e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80268e6:	5c52      	ldrb	r2, [r2, r1]
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 80268e8:	3101      	adds	r1, #1
        if(dropdown->options[i] == '\n') line++;
 80268ea:	2a0a      	cmp	r2, #10
 80268ec:	bf08      	it	eq
 80268ee:	3301      	addeq	r3, #1
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 80268f0:	e7ed      	b.n	80268ce <lv_dropdown_get_selected_str+0x14>
        buf[c] = dropdown->options[i];
 80268f2:	54ea      	strb	r2, [r5, r3]
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 80268f4:	3301      	adds	r3, #1
 80268f6:	18ca      	adds	r2, r1, r3
 80268f8:	4282      	cmp	r2, r0
 80268fa:	d207      	bcs.n	802690c <lv_dropdown_get_selected_str+0x52>
 80268fc:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80268fe:	5cba      	ldrb	r2, [r7, r2]
 8026900:	2a0a      	cmp	r2, #10
 8026902:	d003      	beq.n	802690c <lv_dropdown_get_selected_str+0x52>
        if(buf_size && c >= buf_size - 1) {
 8026904:	2e00      	cmp	r6, #0
 8026906:	d0f4      	beq.n	80268f2 <lv_dropdown_get_selected_str+0x38>
 8026908:	459c      	cmp	ip, r3
 802690a:	d8f2      	bhi.n	80268f2 <lv_dropdown_get_selected_str+0x38>
    buf[c] = '\0';
 802690c:	2200      	movs	r2, #0
 802690e:	54ea      	strb	r2, [r5, r3]
 8026910:	e7e7      	b.n	80268e2 <lv_dropdown_get_selected_str+0x28>

08026912 <lv_dropdown_open>:
{
 8026912:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8026916:	4604      	mov	r4, r0
    lv_obj_add_state(dropdown_obj, LV_STATE_CHECKED);
 8026918:	2101      	movs	r1, #1
 802691a:	f7f5 f864 	bl	801b9e6 <lv_obj_add_state>
    lv_obj_set_parent(dropdown->list, lv_obj_get_screen(dropdown_obj));
 802691e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8026920:	4620      	mov	r0, r4
 8026922:	f7f7 fc29 	bl	801e178 <lv_obj_get_screen>
 8026926:	4601      	mov	r1, r0
 8026928:	4628      	mov	r0, r5
 802692a:	f7f7 fd11 	bl	801e350 <lv_obj_set_parent>
    lv_obj_move_to_index(dropdown->list, -1);
 802692e:	f04f 31ff 	mov.w	r1, #4294967295
 8026932:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026934:	f7f7 fd7f 	bl	801e436 <lv_obj_move_to_index>
    lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8026938:	2101      	movs	r1, #1
 802693a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802693c:	f7f5 f817 	bl	801b96e <lv_obj_clear_flag>
    lv_event_send(dropdown_obj, LV_EVENT_READY, NULL);
 8026940:	2200      	movs	r2, #0
 8026942:	211f      	movs	r1, #31
 8026944:	4620      	mov	r0, r4
 8026946:	f7dd fec9 	bl	80046dc <lv_event_send>
    lv_obj_t * label = get_label(dropdown_obj);
 802694a:	4620      	mov	r0, r4
 802694c:	f7ff fdef 	bl	802652e <get_label>
    lv_label_set_text_static(label, dropdown->options);
 8026950:	6b21      	ldr	r1, [r4, #48]	; 0x30
    lv_obj_t * label = get_label(dropdown_obj);
 8026952:	4606      	mov	r6, r0
    lv_label_set_text_static(label, dropdown->options);
 8026954:	f000 faf3 	bl	8026f3e <lv_label_set_text_static>
    lv_obj_set_width(dropdown->list, LV_SIZE_CONTENT);
 8026958:	f242 71d1 	movw	r1, #10193	; 0x27d1
 802695c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802695e:	f7f5 feaf 	bl	801c6c0 <lv_obj_set_width>
    lv_obj_update_layout(label);
 8026962:	4630      	mov	r0, r6
 8026964:	f7de fefc 	bl	8005760 <lv_obj_update_layout>
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 8026968:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802696a:	f7f5 ff63 	bl	801c834 <lv_obj_get_width>
 802696e:	4605      	mov	r5, r0
 8026970:	4620      	mov	r0, r4
 8026972:	f7f5 ff5f 	bl	801c834 <lv_obj_get_width>
 8026976:	4285      	cmp	r5, r0
 8026978:	dc10      	bgt.n	802699c <lv_dropdown_open+0x8a>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 802697a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 802697e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8026982:	f002 020f 	and.w	r2, r2, #15
 8026986:	40d3      	lsrs	r3, r2
 8026988:	07db      	lsls	r3, r3, #31
 802698a:	d507      	bpl.n	802699c <lv_dropdown_open+0x8a>
        lv_obj_set_width(dropdown->list, lv_obj_get_width(dropdown_obj));
 802698c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802698e:	4620      	mov	r0, r4
 8026990:	f7f5 ff50 	bl	801c834 <lv_obj_get_width>
 8026994:	4601      	mov	r1, r0
 8026996:	4628      	mov	r0, r5
 8026998:	f7f5 fe92 	bl	801c6c0 <lv_obj_set_width>
    lv_coord_t label_h = lv_obj_get_height(label);
 802699c:	4630      	mov	r0, r6
 802699e:	f7f5 ff4f 	bl	801c840 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80269a2:	2232      	movs	r2, #50	; 0x32
 80269a4:	4607      	mov	r7, r0
 80269a6:	2100      	movs	r1, #0
 80269a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80269aa:	f7f7 f869 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80269ae:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80269b0:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80269b2:	2100      	movs	r1, #0
 80269b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80269b6:	f7f7 f863 	bl	801da80 <lv_obj_get_style_prop>
 80269ba:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80269bc:	2211      	movs	r2, #17
 80269be:	2100      	movs	r1, #0
 80269c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80269c2:	f7f7 f85d 	bl	801da80 <lv_obj_get_style_prop>
    lv_coord_t list_fit_h = label_h + top + bottom;
 80269c6:	4405      	add	r5, r0
    lv_dir_t dir = dropdown->dir;
 80269c8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    lv_coord_t list_fit_h = label_h + top + bottom;
 80269cc:	eb05 0548 	add.w	r5, r5, r8, lsl #1
 80269d0:	443d      	add	r5, r7
    lv_dir_t dir = dropdown->dir;
 80269d2:	f003 070f 	and.w	r7, r3, #15
    if(dropdown->dir == LV_DIR_BOTTOM) {
 80269d6:	2f08      	cmp	r7, #8
    lv_coord_t list_fit_h = label_h + top + bottom;
 80269d8:	b22d      	sxth	r5, r5
    if(dropdown->dir == LV_DIR_BOTTOM) {
 80269da:	d16a      	bne.n	8026ab2 <lv_dropdown_open+0x1a0>
        if(dropdown_obj->coords.y2 + list_h > LV_VER_RES) {
 80269dc:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 80269e0:	f7eb fb54 	bl	801208c <lv_disp_get_default>
 80269e4:	f7eb fb68 	bl	80120b8 <lv_disp_get_ver_res>
 80269e8:	44a8      	add	r8, r5
 80269ea:	4580      	cmp	r8, r0
 80269ec:	dd67      	ble.n	8026abe <lv_dropdown_open+0x1ac>
            if(dropdown_obj->coords.y1 > LV_VER_RES - dropdown_obj->coords.y2) {
 80269ee:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80269f2:	f7eb fb4b 	bl	801208c <lv_disp_get_default>
 80269f6:	f7eb fb5f 	bl	80120b8 <lv_disp_get_ver_res>
 80269fa:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80269fe:	1ac0      	subs	r0, r0, r3
 8026a00:	4580      	cmp	r8, r0
 8026a02:	dd4d      	ble.n	8026aa0 <lv_dropdown_open+0x18e>
                list_h = dropdown_obj->coords.y1 - 1;
 8026a04:	8ae1      	ldrh	r1, [r4, #22]
                dir = LV_DIR_TOP;
 8026a06:	2704      	movs	r7, #4
                list_h = dropdown_obj->coords.y1 - 1;
 8026a08:	3901      	subs	r1, #1
 8026a0a:	b209      	sxth	r1, r1
    lv_obj_set_height(dropdown->list, list_h);
 8026a0c:	42a9      	cmp	r1, r5
 8026a0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026a10:	bfa8      	it	ge
 8026a12:	4629      	movge	r1, r5
 8026a14:	f7f5 fe6b 	bl	801c6ee <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 8026a18:	4620      	mov	r0, r4
 8026a1a:	f7ff fd8e 	bl	802653a <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8026a1e:	2f08      	cmp	r7, #8
 8026a20:	d164      	bne.n	8026aec <lv_dropdown_open+0x1da>
 8026a22:	2300      	movs	r3, #0
 8026a24:	220d      	movs	r2, #13
 8026a26:	4621      	mov	r1, r4
 8026a28:	9300      	str	r3, [sp, #0]
 8026a2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8026a2c:	f7de feb2 	bl	8005794 <lv_obj_align_to>
    lv_obj_update_layout(dropdown->list);
 8026a30:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026a32:	f7de fe95 	bl	8005760 <lv_obj_update_layout>
    if(dropdown->dir == LV_DIR_LEFT || dropdown->dir == LV_DIR_RIGHT) {
 8026a36:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8026a3a:	f003 030f 	and.w	r3, r3, #15
 8026a3e:	3b01      	subs	r3, #1
 8026a40:	2b01      	cmp	r3, #1
 8026a42:	d81a      	bhi.n	8026a7a <lv_dropdown_open+0x168>
        lv_coord_t y1 = lv_obj_get_y(dropdown->list);
 8026a44:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026a46:	f7f5 fece 	bl	801c7e6 <lv_obj_get_y>
 8026a4a:	4605      	mov	r5, r0
        lv_coord_t y2 = lv_obj_get_y2(dropdown->list);
 8026a4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026a4e:	f7f5 fee6 	bl	801c81e <lv_obj_get_y2>
 8026a52:	4607      	mov	r7, r0
        if(y2 >= LV_VER_RES) {
 8026a54:	f7eb fb1a 	bl	801208c <lv_disp_get_default>
 8026a58:	f7eb fb2e 	bl	80120b8 <lv_disp_get_ver_res>
 8026a5c:	42b8      	cmp	r0, r7
 8026a5e:	dc0c      	bgt.n	8026a7a <lv_dropdown_open+0x168>
            lv_obj_set_y(dropdown->list, y1 - (y2 - LV_VER_RES) - 1);
 8026a60:	3d01      	subs	r5, #1
 8026a62:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8026a66:	f7eb fb11 	bl	801208c <lv_disp_get_default>
 8026a6a:	1bed      	subs	r5, r5, r7
 8026a6c:	f7eb fb24 	bl	80120b8 <lv_disp_get_ver_res>
 8026a70:	4405      	add	r5, r0
 8026a72:	4640      	mov	r0, r8
 8026a74:	b229      	sxth	r1, r5
 8026a76:	f7f5 fe01 	bl	801c67c <lv_obj_set_y>
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, dropdown->options);
 8026a7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8026a7c:	2100      	movs	r1, #0
 8026a7e:	4630      	mov	r0, r6
 8026a80:	f7f7 fb37 	bl	801e0f2 <lv_obj_calculate_style_text_align>
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 8026a84:	2300      	movs	r3, #0
    switch(align) {
 8026a86:	2802      	cmp	r0, #2
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, dropdown->options);
 8026a88:	4601      	mov	r1, r0
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 8026a8a:	461a      	mov	r2, r3
    switch(align) {
 8026a8c:	d002      	beq.n	8026a94 <lv_dropdown_open+0x182>
 8026a8e:	2803      	cmp	r0, #3
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 8026a90:	bf18      	it	ne
 8026a92:	2101      	movne	r1, #1
            lv_obj_align(label, LV_ALIGN_TOP_MID, 0, 0);
 8026a94:	4630      	mov	r0, r6
}
 8026a96:	b002      	add	sp, #8
 8026a98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            lv_obj_align(label, LV_ALIGN_TOP_MID, 0, 0);
 8026a9c:	f7f5 be6c 	b.w	801c778 <lv_obj_align>
                list_h = LV_VER_RES - dropdown_obj->coords.y2 - 1 ;
 8026aa0:	f7eb faf4 	bl	801208c <lv_disp_get_default>
 8026aa4:	f7eb fb08 	bl	80120b8 <lv_disp_get_ver_res>
 8026aa8:	8b63      	ldrh	r3, [r4, #26]
 8026aaa:	1ac1      	subs	r1, r0, r3
 8026aac:	3901      	subs	r1, #1
 8026aae:	b209      	sxth	r1, r1
 8026ab0:	e7ac      	b.n	8026a0c <lv_dropdown_open+0xfa>
    else if(dropdown->dir == LV_DIR_TOP) {
 8026ab2:	2f04      	cmp	r7, #4
 8026ab4:	d103      	bne.n	8026abe <lv_dropdown_open+0x1ac>
        if(dropdown_obj->coords.y1 - list_h < 0) {
 8026ab6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026aba:	45a8      	cmp	r8, r5
 8026abc:	db01      	blt.n	8026ac2 <lv_dropdown_open+0x1b0>
    lv_coord_t list_h = list_fit_h;
 8026abe:	4629      	mov	r1, r5
 8026ac0:	e7a4      	b.n	8026a0c <lv_dropdown_open+0xfa>
            if(dropdown_obj->coords.y1 < LV_VER_RES - dropdown_obj->coords.y2) {
 8026ac2:	f7eb fae3 	bl	801208c <lv_disp_get_default>
 8026ac6:	f7eb faf7 	bl	80120b8 <lv_disp_get_ver_res>
 8026aca:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8026ace:	1ac0      	subs	r0, r0, r3
 8026ad0:	4580      	cmp	r8, r0
 8026ad2:	da08      	bge.n	8026ae6 <lv_dropdown_open+0x1d4>
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 8026ad4:	f7eb fada 	bl	801208c <lv_disp_get_default>
                dir = LV_DIR_BOTTOM;
 8026ad8:	2708      	movs	r7, #8
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 8026ada:	f7eb faed 	bl	80120b8 <lv_disp_get_ver_res>
 8026ade:	8b63      	ldrh	r3, [r4, #26]
 8026ae0:	1ac1      	subs	r1, r0, r3
 8026ae2:	b209      	sxth	r1, r1
 8026ae4:	e792      	b.n	8026a0c <lv_dropdown_open+0xfa>
                list_h = dropdown_obj->coords.y1;
 8026ae6:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8026aea:	e78f      	b.n	8026a0c <lv_dropdown_open+0xfa>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 8026aec:	2f04      	cmp	r7, #4
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8026aee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 8026af0:	d104      	bne.n	8026afc <lv_dropdown_open+0x1ea>
 8026af2:	2300      	movs	r3, #0
 8026af4:	220a      	movs	r2, #10
 8026af6:	9300      	str	r3, [sp, #0]
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8026af8:	4621      	mov	r1, r4
 8026afa:	e797      	b.n	8026a2c <lv_dropdown_open+0x11a>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 8026afc:	2f01      	cmp	r7, #1
 8026afe:	d103      	bne.n	8026b08 <lv_dropdown_open+0x1f6>
 8026b00:	2300      	movs	r3, #0
 8026b02:	2210      	movs	r2, #16
 8026b04:	9300      	str	r3, [sp, #0]
 8026b06:	e7f7      	b.n	8026af8 <lv_dropdown_open+0x1e6>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8026b08:	2f02      	cmp	r7, #2
 8026b0a:	d191      	bne.n	8026a30 <lv_dropdown_open+0x11e>
 8026b0c:	2300      	movs	r3, #0
 8026b0e:	2213      	movs	r2, #19
 8026b10:	9300      	str	r3, [sp, #0]
 8026b12:	e7f1      	b.n	8026af8 <lv_dropdown_open+0x1e6>

08026b14 <lv_dropdown_close>:
{
 8026b14:	b510      	push	{r4, lr}
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8026b16:	2101      	movs	r1, #1
{
 8026b18:	4604      	mov	r4, r0
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8026b1a:	f7f4 ff6e 	bl	801b9fa <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8026b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8026b22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026b24:	2101      	movs	r1, #1
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8026b26:	8763      	strh	r3, [r4, #58]	; 0x3a
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8026b28:	f7f4 feeb 	bl	801b902 <lv_obj_add_flag>
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 8026b2c:	4620      	mov	r0, r4
 8026b2e:	2200      	movs	r2, #0
 8026b30:	2120      	movs	r1, #32
}
 8026b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 8026b36:	f7dd bdd1 	b.w	80046dc <lv_event_send>

08026b3a <lv_dropdown_is_open>:
{
 8026b3a:	b508      	push	{r3, lr}
    return lv_obj_has_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN) ? false : true;
 8026b3c:	2101      	movs	r1, #1
 8026b3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026b40:	f7f4 ff64 	bl	801ba0c <lv_obj_has_flag>
 8026b44:	f080 0001 	eor.w	r0, r0, #1
}
 8026b48:	b2c0      	uxtb	r0, r0
 8026b4a:	bd08      	pop	{r3, pc}

08026b4c <btn_release_handler.isra.0>:
static lv_res_t btn_release_handler(lv_obj_t * obj)
 8026b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026b4e:	4604      	mov	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 8026b50:	f7dd fe2a 	bl	80047a8 <lv_indev_get_act>
 8026b54:	4605      	mov	r5, r0
    if(lv_indev_get_scroll_obj(indev) == NULL) {
 8026b56:	f7f4 fd45 	bl	801b5e4 <lv_indev_get_scroll_obj>
 8026b5a:	bb50      	cbnz	r0, 8026bb2 <btn_release_handler.isra.0+0x66>
        if(lv_dropdown_is_open(obj)) {
 8026b5c:	4620      	mov	r0, r4
 8026b5e:	f7ff ffec 	bl	8026b3a <lv_dropdown_is_open>
 8026b62:	b300      	cbz	r0, 8026ba6 <btn_release_handler.isra.0+0x5a>
            lv_dropdown_close(obj);
 8026b64:	4620      	mov	r0, r4
 8026b66:	f7ff ffd5 	bl	8026b14 <lv_dropdown_close>
            if(dropdown->sel_opt_id_orig != dropdown->sel_opt_id) {
 8026b6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8026b6c:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8026b6e:	429a      	cmp	r2, r3
 8026b70:	d00b      	beq.n	8026b8a <btn_release_handler.isra.0+0x3e>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8026b72:	aa01      	add	r2, sp, #4
 8026b74:	211c      	movs	r1, #28
 8026b76:	4620      	mov	r0, r4
                dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8026b78:	8723      	strh	r3, [r4, #56]	; 0x38
                uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 8026b7a:	9301      	str	r3, [sp, #4]
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8026b7c:	f7dd fdae 	bl	80046dc <lv_event_send>
                if(res != LV_RES_OK) return res;
 8026b80:	2801      	cmp	r0, #1
 8026b82:	d11e      	bne.n	8026bc2 <btn_release_handler.isra.0+0x76>
                lv_obj_invalidate(obj);
 8026b84:	4620      	mov	r0, r4
 8026b86:	f7f6 f855 	bl	801cc34 <lv_obj_invalidate>
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8026b8a:	4628      	mov	r0, r5
 8026b8c:	f7f4 fcf5 	bl	801b57a <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8026b90:	2804      	cmp	r0, #4
 8026b92:	d116      	bne.n	8026bc2 <btn_release_handler.isra.0+0x76>
                lv_group_set_editing(lv_obj_get_group(obj), false);
 8026b94:	4620      	mov	r0, r4
 8026b96:	f7f4 ff47 	bl	801ba28 <lv_obj_get_group>
 8026b9a:	2100      	movs	r1, #0
}
 8026b9c:	b003      	add	sp, #12
 8026b9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                lv_group_set_editing(lv_obj_get_group(obj), false);
 8026ba2:	f7f4 bcc4 	b.w	801b52e <lv_group_set_editing>
            lv_dropdown_open(obj);
 8026ba6:	4620      	mov	r0, r4
}
 8026ba8:	b003      	add	sp, #12
 8026baa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            lv_dropdown_open(obj);
 8026bae:	f7ff beb0 	b.w	8026912 <lv_dropdown_open>
        dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 8026bb2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
        lv_obj_invalidate(obj);
 8026bb4:	4620      	mov	r0, r4
        dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 8026bb6:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 8026bb8:	b003      	add	sp, #12
 8026bba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        lv_obj_invalidate(obj);
 8026bbe:	f7f6 b839 	b.w	801cc34 <lv_obj_invalidate>
}
 8026bc2:	b003      	add	sp, #12
 8026bc4:	bd30      	pop	{r4, r5, pc}

08026bc6 <lv_img_get_transformed_size>:
{
 8026bc6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
                                     img->angle, img->zoom, &img->pivot);
 8026bc8:	f100 0332 	add.w	r3, r0, #50	; 0x32
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 8026bcc:	9301      	str	r3, [sp, #4]
 8026bce:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8026bd0:	9300      	str	r3, [sp, #0]
 8026bd2:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 8026bd6:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 8026bda:	f9b0 102c 	ldrsh.w	r1, [r0, #44]	; 0x2c
 8026bde:	a804      	add	r0, sp, #16
 8026be0:	f7f8 fc08 	bl	801f3f4 <_lv_img_buf_get_transformed_area>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8026be4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8026be8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8026bec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8026bf0:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8026bf2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    return (lv_point_t) {
 8026bf6:	1a12      	subs	r2, r2, r0
 8026bf8:	3301      	adds	r3, #1
 8026bfa:	2000      	movs	r0, #0
 8026bfc:	1a5b      	subs	r3, r3, r1
 8026bfe:	b292      	uxth	r2, r2
 8026c00:	b29b      	uxth	r3, r3
 8026c02:	f362 000f 	bfi	r0, r2, #0, #16
 8026c06:	f363 401f 	bfi	r0, r3, #16, #16
}
 8026c0a:	b007      	add	sp, #28
 8026c0c:	f85d fb04 	ldr.w	pc, [sp], #4

08026c10 <lv_img_constructor>:
{
 8026c10:	b538      	push	{r3, r4, r5, lr}
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 8026c12:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    img->src       = NULL;
 8026c16:	2500      	movs	r5, #0
{
 8026c18:	460c      	mov	r4, r1
    img->w         = lv_obj_get_width(obj);
 8026c1a:	4608      	mov	r0, r1
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 8026c1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    img->src       = NULL;
 8026c20:	624d      	str	r5, [r1, #36]	; 0x24
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 8026c22:	f043 0303 	orr.w	r3, r3, #3
 8026c26:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
    img->w         = lv_obj_get_width(obj);
 8026c2a:	f7f5 fe03 	bl	801c834 <lv_obj_get_width>
 8026c2e:	85a0      	strh	r0, [r4, #44]	; 0x2c
    img->h         = lv_obj_get_height(obj);
 8026c30:	4620      	mov	r0, r4
 8026c32:	f7f5 fe05 	bl	801c840 <lv_obj_get_height>
    img->pivot.y = 0;
 8026c36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    img->h         = lv_obj_get_height(obj);
 8026c3a:	85e0      	strh	r0, [r4, #46]	; 0x2e
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8026c3c:	2102      	movs	r1, #2
    img->pivot.y = 0;
 8026c3e:	6363      	str	r3, [r4, #52]	; 0x34
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8026c40:	4620      	mov	r0, r4
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8026c42:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    img->offset.x  = 0;
 8026c44:	62a5      	str	r5, [r4, #40]	; 0x28
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8026c46:	f423 7360 	bic.w	r3, r3, #896	; 0x380
    img->angle = 0;
 8026c4a:	6325      	str	r5, [r4, #48]	; 0x30
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8026c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026c50:	8723      	strh	r3, [r4, #56]	; 0x38
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8026c52:	f7f4 fe8c 	bl	801b96e <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8026c56:	4620      	mov	r0, r4
 8026c58:	f44f 3180 	mov.w	r1, #65536	; 0x10000
}
 8026c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8026c60:	f7f4 be4f 	b.w	801b902 <lv_obj_add_flag>

08026c64 <lv_img_destructor>:
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8026c64:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8026c68:	f003 0303 	and.w	r3, r3, #3
 8026c6c:	3b01      	subs	r3, #1
 8026c6e:	2b01      	cmp	r3, #1
{
 8026c70:	b510      	push	{r4, lr}
 8026c72:	460c      	mov	r4, r1
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8026c74:	d80a      	bhi.n	8026c8c <lv_img_destructor+0x28>
        lv_mem_free((void *)img->src);
 8026c76:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8026c78:	f7eb fd38 	bl	80126ec <lv_mem_free>
        img->src      = NULL;
 8026c7c:	2300      	movs	r3, #0
 8026c7e:	6263      	str	r3, [r4, #36]	; 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8026c80:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8026c84:	f043 0303 	orr.w	r3, r3, #3
 8026c88:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8026c8c:	bd10      	pop	{r4, pc}

08026c8e <lv_img_set_src>:
{
 8026c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026c92:	460e      	mov	r6, r1
 8026c94:	b086      	sub	sp, #24
 8026c96:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 8026c98:	f7f5 ffcc 	bl	801cc34 <lv_obj_invalidate>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8026c9c:	4630      	mov	r0, r6
 8026c9e:	f7f7 fdcd 	bl	801e83c <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8026ca2:	2803      	cmp	r0, #3
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8026ca4:	4605      	mov	r5, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8026ca6:	d114      	bne.n	8026cd2 <lv_img_set_src+0x44>
        if(img->src_type == LV_IMG_SRC_SYMBOL || img->src_type == LV_IMG_SRC_FILE) {
 8026ca8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8026cac:	f003 0303 	and.w	r3, r3, #3
 8026cb0:	3b01      	subs	r3, #1
 8026cb2:	2b01      	cmp	r3, #1
 8026cb4:	d802      	bhi.n	8026cbc <lv_img_set_src+0x2e>
            lv_mem_free((void *)img->src);
 8026cb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026cb8:	f7eb fd18 	bl	80126ec <lv_mem_free>
        img->src      = NULL;
 8026cbc:	2300      	movs	r3, #0
 8026cbe:	6263      	str	r3, [r4, #36]	; 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8026cc0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8026cc4:	f043 0303 	orr.w	r3, r3, #3
 8026cc8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8026ccc:	b006      	add	sp, #24
 8026cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_decoder_get_info(src, &header);
 8026cd2:	a904      	add	r1, sp, #16
 8026cd4:	4630      	mov	r0, r6
 8026cd6:	f7e2 f933 	bl	8008f40 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8026cda:	2d00      	cmp	r5, #0
 8026cdc:	d138      	bne.n	8026d50 <lv_img_set_src+0xc2>
        if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8026cde:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8026ce2:	f003 0303 	and.w	r3, r3, #3
 8026ce6:	3b01      	subs	r3, #1
 8026ce8:	2b01      	cmp	r3, #1
 8026cea:	d802      	bhi.n	8026cf2 <lv_img_set_src+0x64>
            lv_mem_free((void *)img->src);
 8026cec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026cee:	f7eb fcfd 	bl	80126ec <lv_mem_free>
        img->src = src;
 8026cf2:	6266      	str	r6, [r4, #36]	; 0x24
    img->w        = header.w;
 8026cf4:	9a04      	ldr	r2, [sp, #16]
    img->src_type = src_type;
 8026cf6:	f005 0503 	and.w	r5, r5, #3
    lv_obj_refresh_self_size(obj);
 8026cfa:	4620      	mov	r0, r4
    img->w        = header.w;
 8026cfc:	f3c2 238a 	ubfx	r3, r2, #10, #11
    img->pivot.x = header.w / 2;
 8026d00:	f3c2 22c9 	ubfx	r2, r2, #11, #10
    img->w        = header.w;
 8026d04:	85a3      	strh	r3, [r4, #44]	; 0x2c
    img->h        = header.h;
 8026d06:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    img->pivot.x = header.w / 2;
 8026d0a:	8662      	strh	r2, [r4, #50]	; 0x32
    img->h        = header.h;
 8026d0c:	f3c3 114a 	ubfx	r1, r3, #5, #11
    img->pivot.y = header.h / 2;
 8026d10:	f3c3 1389 	ubfx	r3, r3, #6, #10
    img->h        = header.h;
 8026d14:	85e1      	strh	r1, [r4, #46]	; 0x2e
    img->cf       = header.cf;
 8026d16:	f89d 1010 	ldrb.w	r1, [sp, #16]
    img->pivot.y = header.h / 2;
 8026d1a:	86a3      	strh	r3, [r4, #52]	; 0x34
    img->cf       = header.cf;
 8026d1c:	f3c1 0104 	ubfx	r1, r1, #0, #5
    img->src_type = src_type;
 8026d20:	ea45 0581 	orr.w	r5, r5, r1, lsl #2
 8026d24:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8026d28:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8026d2c:	430d      	orrs	r5, r1
 8026d2e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    lv_obj_refresh_self_size(obj);
 8026d32:	f7f5 fdf4 	bl	801c91e <lv_obj_refresh_self_size>
    if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_size(obj);
 8026d36:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8026d38:	b91b      	cbnz	r3, 8026d42 <lv_img_set_src+0xb4>
 8026d3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8026d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8026d40:	d002      	beq.n	8026d48 <lv_img_set_src+0xba>
 8026d42:	4620      	mov	r0, r4
 8026d44:	f7f5 fba8 	bl	801c498 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8026d48:	4620      	mov	r0, r4
 8026d4a:	f7f5 ff73 	bl	801cc34 <lv_obj_invalidate>
 8026d4e:	e7bd      	b.n	8026ccc <lv_img_set_src+0x3e>
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8026d50:	1e6b      	subs	r3, r5, #1
 8026d52:	b2db      	uxtb	r3, r3
 8026d54:	2b01      	cmp	r3, #1
 8026d56:	d8cd      	bhi.n	8026cf4 <lv_img_set_src+0x66>
        if(img->src != src) {
 8026d58:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8026d5a:	42b7      	cmp	r7, r6
 8026d5c:	d019      	beq.n	8026d92 <lv_img_set_src+0x104>
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8026d5e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8026d62:	4630      	mov	r0, r6
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8026d64:	f003 0303 	and.w	r3, r3, #3
 8026d68:	3b01      	subs	r3, #1
            const void * old_src = NULL;
 8026d6a:	2b01      	cmp	r3, #1
 8026d6c:	bf88      	it	hi
 8026d6e:	2700      	movhi	r7, #0
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8026d70:	f7f3 fcb8 	bl	801a6e4 <strlen>
 8026d74:	3001      	adds	r0, #1
 8026d76:	f7eb fc9b 	bl	80126b0 <lv_mem_alloc>
            LV_ASSERT_MALLOC(new_str);
 8026d7a:	4680      	mov	r8, r0
 8026d7c:	b900      	cbnz	r0, 8026d80 <lv_img_set_src+0xf2>
 8026d7e:	e7fe      	b.n	8026d7e <lv_img_set_src+0xf0>
            strcpy(new_str, src);
 8026d80:	4631      	mov	r1, r6
 8026d82:	f7f3 fca5 	bl	801a6d0 <strcpy>
            img->src = new_str;
 8026d86:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
            if(old_src) lv_mem_free((void *)old_src);
 8026d8a:	b117      	cbz	r7, 8026d92 <lv_img_set_src+0x104>
 8026d8c:	4638      	mov	r0, r7
 8026d8e:	f7eb fcad 	bl	80126ec <lv_mem_free>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8026d92:	2d02      	cmp	r5, #2
 8026d94:	d1ae      	bne.n	8026cf4 <lv_img_set_src+0x66>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026d96:	2257      	movs	r2, #87	; 0x57
 8026d98:	2100      	movs	r1, #0
 8026d9a:	4620      	mov	r0, r4
 8026d9c:	f7f6 fe70 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8026da0:	2258      	movs	r2, #88	; 0x58
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026da2:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8026da4:	2100      	movs	r1, #0
 8026da6:	4620      	mov	r0, r4
 8026da8:	f7f6 fe6a 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026dac:	2259      	movs	r2, #89	; 0x59
    return (lv_coord_t)v.num;
 8026dae:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026db2:	2100      	movs	r1, #0
 8026db4:	4620      	mov	r0, r4
 8026db6:	f7f6 fe63 	bl	801da80 <lv_obj_get_style_prop>
        lv_txt_get_size(&size, src, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8026dba:	f641 73ff 	movw	r3, #8191	; 0x1fff
    return (lv_coord_t)v.num;
 8026dbe:	b200      	sxth	r0, r0
 8026dc0:	2200      	movs	r2, #0
 8026dc2:	4631      	mov	r1, r6
 8026dc4:	9000      	str	r0, [sp, #0]
 8026dc6:	a805      	add	r0, sp, #20
 8026dc8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8026dcc:	4643      	mov	r3, r8
 8026dce:	463a      	mov	r2, r7
 8026dd0:	f7fe fd32 	bl	8025838 <lv_txt_get_size>
        header.w = size.x;
 8026dd4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8026dd8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8026ddc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8026de0:	055b      	lsls	r3, r3, #21
 8026de2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8026de6:	9a04      	ldr	r2, [sp, #16]
 8026de8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8026dec:	4313      	orrs	r3, r2
 8026dee:	9304      	str	r3, [sp, #16]
 8026df0:	e780      	b.n	8026cf4 <lv_img_set_src+0x66>

08026df2 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
 8026df2:	b510      	push	{r4, lr}
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8026df4:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8026df8:	4604      	mov	r4, r0
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8026dfa:	065b      	lsls	r3, r3, #25
 8026dfc:	d503      	bpl.n	8026e06 <lv_label_dot_tmp_free+0x14>
 8026dfe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8026e00:	b108      	cbz	r0, 8026e06 <lv_label_dot_tmp_free+0x14>
        lv_mem_free(label->dot.tmp_ptr);
 8026e02:	f7eb fc73 	bl	80126ec <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 8026e06:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8026e0a:	f36f 1386 	bfc	r3, #6, #1
 8026e0e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 8026e12:	2300      	movs	r3, #0
 8026e14:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8026e16:	bd10      	pop	{r4, pc}

08026e18 <lv_label_destructor>:
{
 8026e18:	b510      	push	{r4, lr}
 8026e1a:	460c      	mov	r4, r1
    lv_label_dot_tmp_free(obj);
 8026e1c:	4608      	mov	r0, r1
 8026e1e:	f7ff ffe8 	bl	8026df2 <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 8026e22:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8026e26:	071b      	lsls	r3, r3, #28
 8026e28:	d402      	bmi.n	8026e30 <lv_label_destructor+0x18>
 8026e2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026e2c:	f7eb fc5e 	bl	80126ec <lv_mem_free>
    label->text = NULL;
 8026e30:	2300      	movs	r3, #0
 8026e32:	6263      	str	r3, [r4, #36]	; 0x24
}
 8026e34:	bd10      	pop	{r4, pc}

08026e36 <set_ofs_y_anim>:
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
 8026e36:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    lv_obj_invalidate(obj);
 8026e3a:	f7f5 befb 	b.w	801cc34 <lv_obj_invalidate>

08026e3e <set_ofs_x_anim>:
    label->offset.x    = v;
 8026e3e:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    lv_obj_invalidate(obj);
 8026e42:	f7f5 bef7 	b.w	801cc34 <lv_obj_invalidate>

08026e46 <lv_obj_get_style_text_line_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026e46:	2259      	movs	r2, #89	; 0x59
 8026e48:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
 8026e4a:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026e4c:	f7f6 fe18 	bl	801da80 <lv_obj_get_style_prop>
}
 8026e50:	b200      	sxth	r0, r0
 8026e52:	bd08      	pop	{r3, pc}

08026e54 <lv_obj_get_style_text_letter_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8026e54:	2258      	movs	r2, #88	; 0x58
 8026e56:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_letter_space(const struct _lv_obj_t * obj, uint32_t part)
 8026e58:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8026e5a:	f7f6 fe11 	bl	801da80 <lv_obj_get_style_prop>
}
 8026e5e:	b200      	sxth	r0, r0
 8026e60:	bd08      	pop	{r3, pc}

08026e62 <lv_obj_get_style_text_font.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026e62:	2257      	movs	r2, #87	; 0x57
 8026e64:	2100      	movs	r1, #0
static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
 8026e66:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026e68:	f7f6 fe0a 	bl	801da80 <lv_obj_get_style_prop>
}
 8026e6c:	bd08      	pop	{r3, pc}

08026e6e <lv_obj_get_style_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8026e6e:	2201      	movs	r2, #1
 8026e70:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
 8026e72:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8026e74:	f7f6 fe04 	bl	801da80 <lv_obj_get_style_prop>
}
 8026e78:	b200      	sxth	r0, r0
 8026e7a:	bd08      	pop	{r3, pc}

08026e7c <lv_label_set_text>:
{
 8026e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026e7e:	4604      	mov	r4, r0
 8026e80:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
 8026e82:	f7f5 fed7 	bl	801cc34 <lv_obj_invalidate>
    if(text == NULL) text = label->text;
 8026e86:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8026e88:	2d00      	cmp	r5, #0
 8026e8a:	bf08      	it	eq
 8026e8c:	4635      	moveq	r5, r6
    if(label->text == text && label->static_txt == 0) {
 8026e8e:	42ae      	cmp	r6, r5
 8026e90:	d112      	bne.n	8026eb8 <lv_label_set_text+0x3c>
 8026e92:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8026e96:	071b      	lsls	r3, r3, #28
 8026e98:	d418      	bmi.n	8026ecc <lv_label_set_text+0x50>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 8026e9a:	4630      	mov	r0, r6
 8026e9c:	f7f3 fc22 	bl	801a6e4 <strlen>
 8026ea0:	1c41      	adds	r1, r0, #1
 8026ea2:	4630      	mov	r0, r6
 8026ea4:	f7eb fc3a 	bl	801271c <lv_mem_realloc>
        LV_ASSERT_MALLOC(label->text);
 8026ea8:	b128      	cbz	r0, 8026eb6 <lv_label_set_text+0x3a>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 8026eaa:	6260      	str	r0, [r4, #36]	; 0x24
    lv_label_refr_text(obj);
 8026eac:	4620      	mov	r0, r4
}
 8026eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(obj);
 8026eb2:	f7ee bd9b 	b.w	80159ec <lv_label_refr_text>
        LV_ASSERT_MALLOC(label->text);
 8026eb6:	e7fe      	b.n	8026eb6 <lv_label_set_text+0x3a>
        if(label->text != NULL && label->static_txt == 0) {
 8026eb8:	b146      	cbz	r6, 8026ecc <lv_label_set_text+0x50>
 8026eba:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8026ebe:	f013 0708 	ands.w	r7, r3, #8
 8026ec2:	d103      	bne.n	8026ecc <lv_label_set_text+0x50>
            lv_mem_free(label->text);
 8026ec4:	4630      	mov	r0, r6
 8026ec6:	f7eb fc11 	bl	80126ec <lv_mem_free>
            label->text = NULL;
 8026eca:	6267      	str	r7, [r4, #36]	; 0x24
        size_t len = strlen(text) + 1;
 8026ecc:	4628      	mov	r0, r5
 8026ece:	f7f3 fc09 	bl	801a6e4 <strlen>
        label->text = lv_mem_alloc(len);
 8026ed2:	3001      	adds	r0, #1
 8026ed4:	f7eb fbec 	bl	80126b0 <lv_mem_alloc>
 8026ed8:	6260      	str	r0, [r4, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 8026eda:	b900      	cbnz	r0, 8026ede <lv_label_set_text+0x62>
 8026edc:	e7fe      	b.n	8026edc <lv_label_set_text+0x60>
        strcpy(label->text, text);
 8026ede:	4629      	mov	r1, r5
 8026ee0:	f7f3 fbf6 	bl	801a6d0 <strcpy>
        label->static_txt = 0;
 8026ee4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8026ee8:	f36f 03c3 	bfc	r3, #3, #1
 8026eec:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8026ef0:	e7dc      	b.n	8026eac <lv_label_set_text+0x30>

08026ef2 <lv_label_set_text_fmt>:
{
 8026ef2:	b40e      	push	{r1, r2, r3}
 8026ef4:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
 8026ef6:	9e07      	ldr	r6, [sp, #28]
 8026ef8:	4604      	mov	r4, r0
    LV_ASSERT_NULL(fmt);
 8026efa:	b906      	cbnz	r6, 8026efe <lv_label_set_text_fmt+0xc>
 8026efc:	e7fe      	b.n	8026efc <lv_label_set_text_fmt+0xa>
    lv_obj_invalidate(obj);
 8026efe:	f7f5 fe99 	bl	801cc34 <lv_obj_invalidate>
    if(label->text != NULL && label->static_txt == 0) {
 8026f02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026f04:	b138      	cbz	r0, 8026f16 <lv_label_set_text_fmt+0x24>
 8026f06:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8026f0a:	f013 0508 	ands.w	r5, r3, #8
 8026f0e:	d102      	bne.n	8026f16 <lv_label_set_text_fmt+0x24>
        lv_mem_free(label->text);
 8026f10:	f7eb fbec 	bl	80126ec <lv_mem_free>
        label->text = NULL;
 8026f14:	6265      	str	r5, [r4, #36]	; 0x24
    va_start(args, fmt);
 8026f16:	a908      	add	r1, sp, #32
    label->text = _lv_txt_set_text_vfmt(fmt, args);
 8026f18:	4630      	mov	r0, r6
    va_start(args, fmt);
 8026f1a:	9101      	str	r1, [sp, #4]
    label->text = _lv_txt_set_text_vfmt(fmt, args);
 8026f1c:	f7fe fc2e 	bl	802577c <_lv_txt_set_text_vfmt>
    label->static_txt = 0; /*Now the text is dynamically allocated*/
 8026f20:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    label->text = _lv_txt_set_text_vfmt(fmt, args);
 8026f24:	6260      	str	r0, [r4, #36]	; 0x24
    lv_label_refr_text(obj);
 8026f26:	4620      	mov	r0, r4
    label->static_txt = 0; /*Now the text is dynamically allocated*/
 8026f28:	f36f 03c3 	bfc	r3, #3, #1
 8026f2c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 8026f30:	f7ee fd5c 	bl	80159ec <lv_label_refr_text>
}
 8026f34:	b003      	add	sp, #12
 8026f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026f3a:	b003      	add	sp, #12
 8026f3c:	4770      	bx	lr

08026f3e <lv_label_set_text_static>:
{
 8026f3e:	b570      	push	{r4, r5, r6, lr}
    if(label->static_txt == 0 && label->text != NULL) {
 8026f40:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8026f44:	4604      	mov	r4, r0
 8026f46:	460d      	mov	r5, r1
    if(label->static_txt == 0 && label->text != NULL) {
 8026f48:	f013 0608 	ands.w	r6, r3, #8
 8026f4c:	d104      	bne.n	8026f58 <lv_label_set_text_static+0x1a>
 8026f4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026f50:	b110      	cbz	r0, 8026f58 <lv_label_set_text_static+0x1a>
        lv_mem_free(label->text);
 8026f52:	f7eb fbcb 	bl	80126ec <lv_mem_free>
        label->text = NULL;
 8026f56:	6266      	str	r6, [r4, #36]	; 0x24
    if(text != NULL) {
 8026f58:	b135      	cbz	r5, 8026f68 <lv_label_set_text_static+0x2a>
        label->static_txt = 1;
 8026f5a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        label->text       = (char *)text;
 8026f5e:	6265      	str	r5, [r4, #36]	; 0x24
        label->static_txt = 1;
 8026f60:	f043 0308 	orr.w	r3, r3, #8
 8026f64:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 8026f68:	4620      	mov	r0, r4
}
 8026f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(obj);
 8026f6e:	f7ee bd3d 	b.w	80159ec <lv_label_refr_text>

08026f72 <lv_label_set_text_sel_start>:
    label->sel_start   = index;
 8026f72:	63c1      	str	r1, [r0, #60]	; 0x3c
    lv_obj_invalidate(obj);
 8026f74:	f7f5 be5e 	b.w	801cc34 <lv_obj_invalidate>

08026f78 <lv_label_set_text_sel_end>:
    label->sel_end     = index;
 8026f78:	6401      	str	r1, [r0, #64]	; 0x40
    lv_obj_invalidate(obj);
 8026f7a:	f7f5 be5b 	b.w	801cc34 <lv_obj_invalidate>

08026f7e <lv_label_get_text>:
}
 8026f7e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026f80:	4770      	bx	lr

08026f82 <lv_label_get_recolor>:
    return label->recolor == 0 ? false : true;
 8026f82:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
}
 8026f86:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8026f8a:	4770      	bx	lr

08026f8c <lv_label_get_letter_on>:
    LV_ASSERT_NULL(pos_in);
 8026f8c:	b901      	cbnz	r1, 8026f90 <lv_label_get_letter_on+0x4>
 8026f8e:	e7fe      	b.n	8026f8e <lv_label_get_letter_on+0x2>
 8026f90:	f7ee bc36 	b.w	8015800 <lv_label_get_letter_on.part.0>

08026f94 <lv_label_is_char_under_pos>:
{
 8026f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f98:	4604      	mov	r4, r0
 8026f9a:	b08f      	sub	sp, #60	; 0x3c
    LV_ASSERT_NULL(pos);
 8026f9c:	468b      	mov	fp, r1
 8026f9e:	b901      	cbnz	r1, 8026fa2 <lv_label_is_char_under_pos+0xe>
 8026fa0:	e7fe      	b.n	8026fa0 <lv_label_is_char_under_pos+0xc>
    lv_obj_get_content_coords(obj, &txt_coords);
 8026fa2:	a90c      	add	r1, sp, #48	; 0x30
 8026fa4:	f7f5 fc7e 	bl	801c8a4 <lv_obj_get_content_coords>
    return label->text;
 8026fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8026faa:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8026fae:	4620      	mov	r0, r4
    return label->text;
 8026fb0:	9303      	str	r3, [sp, #12]
 8026fb2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8026fb6:	3301      	adds	r3, #1
 8026fb8:	1a9b      	subs	r3, r3, r2
 8026fba:	b21b      	sxth	r3, r3
 8026fbc:	9306      	str	r3, [sp, #24]
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8026fbe:	f7ff ff50 	bl	8026e62 <lv_obj_get_style_text_font.constprop.0>
 8026fc2:	4682      	mov	sl, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8026fc4:	4620      	mov	r0, r4
 8026fc6:	f7ff ff3e 	bl	8026e46 <lv_obj_get_style_text_line_space.constprop.0>
 8026fca:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8026fcc:	4620      	mov	r0, r4
 8026fce:	f7ff ff41 	bl	8026e54 <lv_obj_get_style_text_letter_space.constprop.0>
 8026fd2:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8026fd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8026fd8:	2100      	movs	r1, #0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8026fda:	4681      	mov	r9, r0
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8026fdc:	4620      	mov	r0, r4
 8026fde:	9305      	str	r3, [sp, #20]
 8026fe0:	f7f7 f887 	bl	801e0f2 <lv_obj_calculate_style_text_align>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8026fe4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8026fe8:	9004      	str	r0, [sp, #16]
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8026fea:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8026fec:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8026fee:	f3c3 1800 	ubfx	r8, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8026ff2:	bf48      	it	mi
 8026ff4:	f048 0802 	orrmi.w	r8, r8, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8026ff8:	f7ff ff39 	bl	8026e6e <lv_obj_get_style_width.constprop.0>
 8026ffc:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8027000:	4298      	cmp	r0, r3
 8027002:	d105      	bne.n	8027010 <lv_label_is_char_under_pos+0x7c>
 8027004:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8027008:	075b      	lsls	r3, r3, #29
 802700a:	d401      	bmi.n	8027010 <lv_label_is_char_under_pos+0x7c>
 802700c:	f048 0804 	orr.w	r8, r8, #4
        y += letter_height + line_space;
 8027010:	9b05      	ldr	r3, [sp, #20]
{
 8027012:	2400      	movs	r4, #0
        y += letter_height + line_space;
 8027014:	442b      	add	r3, r5
{
 8027016:	4627      	mov	r7, r4
        y += letter_height + line_space;
 8027018:	9307      	str	r3, [sp, #28]
 802701a:	e014      	b.n	8027046 <lv_label_is_char_under_pos+0xb2>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 802701c:	2300      	movs	r3, #0
 802701e:	464a      	mov	r2, r9
 8027020:	4651      	mov	r1, sl
 8027022:	4630      	mov	r0, r6
 8027024:	9300      	str	r3, [sp, #0]
 8027026:	f8cd 8004 	str.w	r8, [sp, #4]
 802702a:	9b06      	ldr	r3, [sp, #24]
 802702c:	f7eb fe42 	bl	8012cb4 <_lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8027030:	9b05      	ldr	r3, [sp, #20]
 8027032:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8027036:	183d      	adds	r5, r7, r0
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8027038:	18e3      	adds	r3, r4, r3
 802703a:	429a      	cmp	r2, r3
 802703c:	dd09      	ble.n	8027052 <lv_label_is_char_under_pos+0xbe>
        y += letter_height + line_space;
 802703e:	9b07      	ldr	r3, [sp, #28]
        line_start = new_line_start;
 8027040:	462f      	mov	r7, r5
 8027042:	441c      	add	r4, r3
        y += letter_height + line_space;
 8027044:	b224      	sxth	r4, r4
    while(txt[line_start] != '\0') {
 8027046:	9b03      	ldr	r3, [sp, #12]
 8027048:	19de      	adds	r6, r3, r7
 802704a:	5ddb      	ldrb	r3, [r3, r7]
 802704c:	2b00      	cmp	r3, #0
 802704e:	d1e5      	bne.n	802701c <lv_label_is_char_under_pos+0x88>
 8027050:	463d      	mov	r5, r7
    if(align == LV_TEXT_ALIGN_CENTER) {
 8027052:	9b04      	ldr	r3, [sp, #16]
 8027054:	2b02      	cmp	r3, #2
 8027056:	d136      	bne.n	80270c6 <lv_label_is_char_under_pos+0x132>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 8027058:	464b      	mov	r3, r9
 802705a:	4652      	mov	r2, sl
 802705c:	1be9      	subs	r1, r5, r7
 802705e:	4630      	mov	r0, r6
 8027060:	f8cd 8000 	str.w	r8, [sp]
 8027064:	f7fe fba9 	bl	80257ba <lv_txt_get_width>
 8027068:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 802706c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 8027070:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8027074:	3301      	adds	r3, #1
 8027076:	1044      	asrs	r4, r0, #1
 8027078:	1a9b      	subs	r3, r3, r2
 802707a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 802707e:	fa02 f383 	sxtah	r3, r2, r3
 8027082:	ebc4 0463 	rsb	r4, r4, r3, asr #1
        x += lv_area_get_width(&txt_coords) - line_w;
 8027086:	b224      	sxth	r4, r4
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8027088:	2600      	movs	r6, #0
 802708a:	f88d 6023 	strb.w	r6, [sp, #35]	; 0x23
    uint32_t letter_next = '\0';
 802708e:	960b      	str	r6, [sp, #44]	; 0x2c
    uint32_t letter      = '\0';
 8027090:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 8027094:	2d00      	cmp	r5, #0
 8027096:	d153      	bne.n	8027140 <lv_label_is_char_under_pos+0x1ac>
    lv_coord_t last_x = 0;
 8027098:	462e      	mov	r6, r5
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 802709a:	4650      	mov	r0, sl
 802709c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80270a0:	f7fc ffc9 	bl	8024036 <lv_font_get_glyph_width>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 80270a4:	f9bb 2000 	ldrsh.w	r2, [fp]
 80270a8:	eba6 0309 	sub.w	r3, r6, r9
 80270ac:	429a      	cmp	r2, r3
 80270ae:	db4b      	blt.n	8027148 <lv_label_is_char_under_pos+0x1b4>
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 80270b0:	eb00 0309 	add.w	r3, r0, r9
 80270b4:	3301      	adds	r3, #1
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 80270b6:	4433      	add	r3, r6
 80270b8:	429a      	cmp	r2, r3
 80270ba:	bfcc      	ite	gt
 80270bc:	2000      	movgt	r0, #0
 80270be:	2001      	movle	r0, #1
}
 80270c0:	b00f      	add	sp, #60	; 0x3c
 80270c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80270c6:	9b04      	ldr	r3, [sp, #16]
 80270c8:	2b03      	cmp	r3, #3
 80270ca:	d10f      	bne.n	80270ec <lv_label_is_char_under_pos+0x158>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 80270cc:	464b      	mov	r3, r9
 80270ce:	4652      	mov	r2, sl
 80270d0:	1be9      	subs	r1, r5, r7
 80270d2:	4630      	mov	r0, r6
 80270d4:	f8cd 8000 	str.w	r8, [sp]
 80270d8:	f7fe fb6f 	bl	80257ba <lv_txt_get_width>
 80270dc:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80270e0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80270e4:	3401      	adds	r4, #1
 80270e6:	1ae4      	subs	r4, r4, r3
        x += lv_area_get_width(&txt_coords) - line_w;
 80270e8:	1a24      	subs	r4, r4, r0
 80270ea:	e7cc      	b.n	8027086 <lv_label_is_char_under_pos+0xf2>
    lv_coord_t x      = 0;
 80270ec:	2400      	movs	r4, #0
 80270ee:	e7cb      	b.n	8027088 <lv_label_is_char_under_pos+0xf4>
                if(_lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 80270f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80270f2:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 80270f6:	9a03      	ldr	r2, [sp, #12]
 80270f8:	5cd1      	ldrb	r1, [r2, r3]
 80270fa:	f7fe fb26 	bl	802574a <_lv_txt_is_cmd>
 80270fe:	b158      	cbz	r0, 8027118 <lv_label_is_char_under_pos+0x184>
        while(i <= new_line_start - 1) {
 8027100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027102:	429d      	cmp	r5, r3
 8027104:	d3c9      	bcc.n	802709a <lv_label_is_char_under_pos+0x106>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 8027106:	ab09      	add	r3, sp, #36	; 0x24
 8027108:	aa0b      	add	r2, sp, #44	; 0x2c
 802710a:	a90a      	add	r1, sp, #40	; 0x28
 802710c:	9803      	ldr	r0, [sp, #12]
 802710e:	f7eb ff33 	bl	8012f78 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8027112:	f1b8 0f00 	cmp.w	r8, #0
 8027116:	d1eb      	bne.n	80270f0 <lv_label_is_char_under_pos+0x15c>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8027118:	4650      	mov	r0, sl
 802711a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 802711e:	f7fc ff8a 	bl	8024036 <lv_font_get_glyph_width>
 8027122:	4420      	add	r0, r4
            if(pos->x < x) {
 8027124:	f9bb 2000 	ldrsh.w	r2, [fp]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8027128:	b283      	uxth	r3, r0
            if(pos->x < x) {
 802712a:	b200      	sxth	r0, r0
 802712c:	4282      	cmp	r2, r0
 802712e:	da02      	bge.n	8027136 <lv_label_is_char_under_pos+0x1a2>
                break;
 8027130:	4626      	mov	r6, r4
                i = i_current;
 8027132:	9709      	str	r7, [sp, #36]	; 0x24
                break;
 8027134:	e7b1      	b.n	802709a <lv_label_is_char_under_pos+0x106>
            x += letter_space;
 8027136:	444b      	add	r3, r9
            i_current = i;
 8027138:	4626      	mov	r6, r4
 802713a:	9f09      	ldr	r7, [sp, #36]	; 0x24
            x += letter_space;
 802713c:	b21c      	sxth	r4, r3
 802713e:	e7df      	b.n	8027100 <lv_label_is_char_under_pos+0x16c>
        while(i <= new_line_start - 1) {
 8027140:	3d01      	subs	r5, #1
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8027142:	f008 0801 	and.w	r8, r8, #1
 8027146:	e7db      	b.n	8027100 <lv_label_is_char_under_pos+0x16c>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 8027148:	2000      	movs	r0, #0
 802714a:	e7b9      	b.n	80270c0 <lv_label_is_char_under_pos+0x12c>

0802714c <lv_label_get_text_selection_start>:
}
 802714c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 802714e:	4770      	bx	lr

08027150 <lv_label_get_text_selection_end>:
}
 8027150:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8027152:	4770      	bx	lr

08027154 <lv_line_constructor>:
    line->point_num   = 0;
 8027154:	2300      	movs	r3, #0
    line->y_inv       = 0;
 8027156:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
{
 802715a:	4608      	mov	r0, r1
    line->y_inv       = 0;
 802715c:	f363 0200 	bfi	r2, r3, #0, #1
    line->point_num   = 0;
 8027160:	850b      	strh	r3, [r1, #40]	; 0x28
    line->point_array = NULL;
 8027162:	624b      	str	r3, [r1, #36]	; 0x24
    line->y_inv       = 0;
 8027164:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8027168:	2102      	movs	r1, #2
 802716a:	f7f4 bc00 	b.w	801b96e <lv_obj_clear_flag>

0802716e <set_y_anim>:
}


static void set_y_anim(void * obj, int32_t v)
{
    lv_obj_set_y(obj, v);
 802716e:	b209      	sxth	r1, r1
 8027170:	f7f5 ba84 	b.w	801c67c <lv_obj_set_y>

08027174 <lv_obj_get_style_text_font>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8027174:	2257      	movs	r2, #87	; 0x57
{
 8027176:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8027178:	f7f6 fc82 	bl	801da80 <lv_obj_get_style_prop>
}
 802717c:	bd08      	pop	{r3, pc}

0802717e <get_label>:
    return lv_obj_get_child(obj, 0);
 802717e:	2100      	movs	r1, #0
 8027180:	f7f7 b805 	b.w	801e18e <lv_obj_get_child>

08027184 <lv_obj_get_style_text_line_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8027184:	2259      	movs	r2, #89	; 0x59
 8027186:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
 8027188:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802718a:	f7f6 fc79 	bl	801da80 <lv_obj_get_style_prop>
}
 802718e:	b200      	sxth	r0, r0
 8027190:	bd08      	pop	{r3, pc}

08027192 <get_sel_area>:
{
 8027192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027194:	4606      	mov	r6, r0
 8027196:	460f      	mov	r7, r1
    const lv_font_t * font_main = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8027198:	2100      	movs	r1, #0
 802719a:	f7ff ffeb 	bl	8027174 <lv_obj_get_style_text_font>
 802719e:	4604      	mov	r4, r0
    const lv_font_t * font_sel = lv_obj_get_style_text_font(obj, LV_PART_SELECTED);
 80271a0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80271a4:	4630      	mov	r0, r6
 80271a6:	f7ff ffe5 	bl	8027174 <lv_obj_get_style_text_font>
 80271aa:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80271ae:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 80271b2:	4630      	mov	r0, r6
 80271b4:	f7ff ffe6 	bl	8027184 <lv_obj_get_style_text_line_space.constprop.0>
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 80271b8:	1963      	adds	r3, r4, r5
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 80271ba:	8af5      	ldrh	r5, [r6, #22]
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 80271bc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80271c0:	eb00 0463 	add.w	r4, r0, r3, asr #1
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 80271c4:	4630      	mov	r0, r6
 80271c6:	f7f5 fb3b 	bl	801c840 <lv_obj_get_height>
    lv_obj_get_coords(obj, &roller_coords);
 80271ca:	4669      	mov	r1, sp
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 80271cc:	b2a4      	uxth	r4, r4
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 80271ce:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80271d2:	0be2      	lsrs	r2, r4, #15
 80271d4:	eb05 0360 	add.w	r3, r5, r0, asr #1
    lv_obj_get_coords(obj, &roller_coords);
 80271d8:	4630      	mov	r0, r6
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 80271da:	fa02 f284 	sxtah	r2, r2, r4
 80271de:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 80271e2:	b29b      	uxth	r3, r3
    sel_area->y2 = sel_area->y1 + d;
 80271e4:	441c      	add	r4, r3
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 80271e6:	807b      	strh	r3, [r7, #2]
    sel_area->y2 = sel_area->y1 + d;
 80271e8:	80fc      	strh	r4, [r7, #6]
    lv_obj_get_coords(obj, &roller_coords);
 80271ea:	f7f5 fad3 	bl	801c794 <lv_obj_get_coords>
    sel_area->x1 = roller_coords.x1;
 80271ee:	f8bd 3000 	ldrh.w	r3, [sp]
 80271f2:	803b      	strh	r3, [r7, #0]
    sel_area->x2 = roller_coords.x2;
 80271f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80271f8:	80bb      	strh	r3, [r7, #4]
}
 80271fa:	b003      	add	sp, #12
 80271fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080271fe <inf_normalize>:
{
 80271fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8027200:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
{
 8027204:	4604      	mov	r4, r0
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8027206:	07db      	lsls	r3, r3, #31
 8027208:	d537      	bpl.n	802727a <inf_normalize+0x7c>
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 802720a:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 802720c:	2307      	movs	r3, #7
 802720e:	fbb2 f2f3 	udiv	r2, r2, r3
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 8027212:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 8027214:	eb02 0142 	add.w	r1, r2, r2, lsl #1
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 8027218:	fbb3 f5f2 	udiv	r5, r3, r2
 802721c:	fb02 3315 	mls	r3, r2, r5, r3
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 8027220:	fa13 f381 	uxtah	r3, r3, r1
 8027224:	b29b      	uxth	r3, r3
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 8027226:	fbb3 f5f2 	udiv	r5, r3, r2
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 802722a:	84c3      	strh	r3, [r0, #38]	; 0x26
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 802722c:	fb02 3315 	mls	r3, r2, r5, r3
        roller->sel_opt_id_ori += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 8027230:	fa13 f181 	uxtah	r1, r3, r1
 8027234:	8501      	strh	r1, [r0, #40]	; 0x28
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8027236:	2100      	movs	r1, #0
 8027238:	f7ff ff9c 	bl	8027174 <lv_obj_get_style_text_font>
 802723c:	4605      	mov	r5, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 802723e:	4620      	mov	r0, r4
 8027240:	f7ff ffa0 	bl	8027184 <lv_obj_get_style_text_line_space.constprop.0>
 8027244:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8027248:	4607      	mov	r7, r0
        lv_coord_t h                   = lv_obj_get_content_height(obj);
 802724a:	4620      	mov	r0, r4
 802724c:	f7f5 fb14 	bl	801c878 <lv_obj_get_content_height>
 8027250:	4605      	mov	r5, r0
        lv_obj_t * label = get_label(obj);
 8027252:	4620      	mov	r0, r4
 8027254:	f7ff ff93 	bl	802717e <get_label>
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 8027258:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 802725a:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 802725e:	443e      	add	r6, r7
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8027260:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 8027264:	fb13 f306 	smulbb	r3, r3, r6
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8027268:	1049      	asrs	r1, r1, #1
 802726a:	ebc1 0165 	rsb	r1, r1, r5, asr #1
        lv_coord_t new_y = mid_y1 - sel_y1;
 802726e:	1ac9      	subs	r1, r1, r3
}
 8027270:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_set_y(label, new_y);
 8027274:	b209      	sxth	r1, r1
 8027276:	f7f5 ba01 	b.w	801c67c <lv_obj_set_y>
}
 802727a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802727c <scroll_anim_ready_cb>:
{
 802727c:	b508      	push	{r3, lr}
    lv_obj_t * obj = lv_obj_get_parent(a->var); /*The label is animated*/
 802727e:	6800      	ldr	r0, [r0, #0]
 8027280:	f7f6 ff82 	bl	801e188 <lv_obj_get_parent>
}
 8027284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    inf_normalize(obj);
 8027288:	f7ff bfb9 	b.w	80271fe <inf_normalize>

0802728c <lv_roller_set_options.part.0>:
void lv_roller_set_options(lv_obj_t * obj, const char * options, lv_roller_mode_t mode)
 802728c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027290:	4688      	mov	r8, r1
 8027292:	4604      	mov	r4, r0
 8027294:	4615      	mov	r5, r2
    lv_obj_t * label = get_label(obj);
 8027296:	f7ff ff72 	bl	802717e <get_label>
    roller->option_cnt = 0;
 802729a:	2300      	movs	r3, #0
    lv_obj_t * label = get_label(obj);
 802729c:	4606      	mov	r6, r0
    roller->option_cnt = 0;
 802729e:	f108 31ff 	add.w	r1, r8, #4294967295
 80272a2:	6263      	str	r3, [r4, #36]	; 0x24
    roller->sel_opt_id_ori = 0;
 80272a4:	8523      	strh	r3, [r4, #40]	; 0x28
        if(options[cnt] == '\n') roller->option_cnt++;
 80272a6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80272a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        if(options[cnt] == '\n') roller->option_cnt++;
 80272ac:	3301      	adds	r3, #1
 80272ae:	b29b      	uxth	r3, r3
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80272b0:	b992      	cbnz	r2, 80272d8 <lv_roller_set_options.part.0+0x4c>
    roller->option_cnt++; /*Last option has no `\n`*/
 80272b2:	84a3      	strh	r3, [r4, #36]	; 0x24
    if(mode == LV_ROLLER_MODE_NORMAL) {
 80272b4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80272b8:	b995      	cbnz	r5, 80272e0 <lv_roller_set_options.part.0+0x54>
        roller->mode = LV_ROLLER_MODE_NORMAL;
 80272ba:	f365 0300 	bfi	r3, r5, #0, #1
        lv_label_set_text(label, options);
 80272be:	4641      	mov	r1, r8
 80272c0:	4630      	mov	r0, r6
        roller->mode = LV_ROLLER_MODE_NORMAL;
 80272c2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        lv_label_set_text(label, options);
 80272c6:	f7ff fdd9 	bl	8026e7c <lv_label_set_text>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80272ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    lv_obj_refresh_ext_draw_size(label);
 80272cc:	4630      	mov	r0, r6
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80272ce:	8523      	strh	r3, [r4, #40]	; 0x28
}
 80272d0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_refresh_ext_draw_size(label);
 80272d4:	f7f5 b8e0 	b.w	801c498 <lv_obj_refresh_ext_draw_size>
        if(options[cnt] == '\n') roller->option_cnt++;
 80272d8:	2a0a      	cmp	r2, #10
 80272da:	bf08      	it	eq
 80272dc:	84a3      	strheq	r3, [r4, #36]	; 0x24
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80272de:	e7e2      	b.n	80272a6 <lv_roller_set_options.part.0+0x1a>
        roller->mode = LV_ROLLER_MODE_INFINITE;
 80272e0:	f043 0301 	orr.w	r3, r3, #1
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 80272e4:	4640      	mov	r0, r8
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 80272e6:	f04f 0907 	mov.w	r9, #7
        roller->mode = LV_ROLLER_MODE_INFINITE;
 80272ea:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 80272ee:	f7f3 f9f9 	bl	801a6e4 <strlen>
 80272f2:	1c45      	adds	r5, r0, #1
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 80272f4:	ebc5 0ac5 	rsb	sl, r5, r5, lsl #3
 80272f8:	4650      	mov	r0, sl
 80272fa:	f7eb fa29 	bl	8012750 <lv_mem_buf_get>
 80272fe:	4607      	mov	r7, r0
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 8027300:	eb00 0b05 	add.w	fp, r0, r5
 8027304:	f109 39ff 	add.w	r9, r9, #4294967295
            strcpy(&opt_extra[opt_len * i], options);
 8027308:	ebab 0005 	sub.w	r0, fp, r5
 802730c:	4641      	mov	r1, r8
 802730e:	f7f3 f9df 	bl	801a6d0 <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8027312:	230a      	movs	r3, #10
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 8027314:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8027318:	f80b 3c01 	strb.w	r3, [fp, #-1]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 802731c:	44ab      	add	fp, r5
 802731e:	d1f1      	bne.n	8027304 <lv_roller_set_options.part.0+0x78>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 8027320:	44ba      	add	sl, r7
        lv_label_set_text(label, opt_extra);
 8027322:	4639      	mov	r1, r7
 8027324:	4630      	mov	r0, r6
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 8027326:	f80a 9c01 	strb.w	r9, [sl, #-1]
        lv_label_set_text(label, opt_extra);
 802732a:	f7ff fda7 	bl	8026e7c <lv_label_set_text>
        lv_mem_buf_release(opt_extra);
 802732e:	4638      	mov	r0, r7
 8027330:	f7eb fa58 	bl	80127e4 <lv_mem_buf_release>
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 8027334:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
        inf_normalize(obj);
 8027336:	4620      	mov	r0, r4
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 8027338:	eb03 0243 	add.w	r2, r3, r3, lsl #1
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 802733c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 8027340:	84e2      	strh	r2, [r4, #38]	; 0x26
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 8027342:	84a3      	strh	r3, [r4, #36]	; 0x24
        inf_normalize(obj);
 8027344:	f7ff ff5b 	bl	80271fe <inf_normalize>
 8027348:	e7bf      	b.n	80272ca <lv_roller_set_options.part.0+0x3e>

0802734a <get_selected_label_width>:
{
 802734a:	b570      	push	{r4, r5, r6, lr}
 802734c:	b086      	sub	sp, #24
 802734e:	4605      	mov	r5, r0
    lv_obj_t * label = get_label(obj);
 8027350:	f7ff ff15 	bl	802717e <get_label>
    if(label == NULL) return 0;
 8027354:	4604      	mov	r4, r0
 8027356:	b1e8      	cbz	r0, 8027394 <get_selected_label_width+0x4a>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_SELECTED);
 8027358:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 802735c:	4628      	mov	r0, r5
 802735e:	f7ff ff09 	bl	8027174 <lv_obj_get_style_text_font>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8027362:	2258      	movs	r2, #88	; 0x58
 8027364:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8027368:	4606      	mov	r6, r0
 802736a:	4628      	mov	r0, r5
 802736c:	f7f6 fb88 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8027370:	b205      	sxth	r5, r0
    const char * txt = lv_label_get_text(label);
 8027372:	4620      	mov	r0, r4
 8027374:	f7ff fe03 	bl	8026f7e <lv_label_get_text>
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8027378:	2300      	movs	r3, #0
 802737a:	f641 72ff 	movw	r2, #8191	; 0x1fff
    const char * txt = lv_label_get_text(label);
 802737e:	4601      	mov	r1, r0
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8027380:	9300      	str	r3, [sp, #0]
 8027382:	a805      	add	r0, sp, #20
 8027384:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8027388:	462b      	mov	r3, r5
 802738a:	4632      	mov	r2, r6
 802738c:	f7fe fa54 	bl	8025838 <lv_txt_get_size>
    return size.x;
 8027390:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
}
 8027394:	b006      	add	sp, #24
 8027396:	bd70      	pop	{r4, r5, r6, pc}

08027398 <lv_roller_set_selected>:
{
 8027398:	460b      	mov	r3, r1
 802739a:	4611      	mov	r1, r2
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 802739c:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
 80273a0:	07d2      	lsls	r2, r2, #31
{
 80273a2:	b4f0      	push	{r4, r5, r6, r7}
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 80273a4:	8c86      	ldrh	r6, [r0, #36]	; 0x24
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 80273a6:	d51a      	bpl.n	80273de <lv_roller_set_selected+0x46>
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 80273a8:	2207      	movs	r2, #7
 80273aa:	fbb6 f2f2 	udiv	r2, r6, r2
        if(sel_opt < real_option_cnt) {
 80273ae:	429a      	cmp	r2, r3
 80273b0:	d915      	bls.n	80273de <lv_roller_set_selected+0x46>
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 80273b2:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
 80273b4:	fbb4 f5f2 	udiv	r5, r4, r2
            uint16_t act_opt = roller->sel_opt_id - current_page * real_option_cnt;
 80273b8:	fb15 f502 	smulbb	r5, r5, r2
 80273bc:	b2ad      	uxth	r5, r5
 80273be:	1b64      	subs	r4, r4, r5
 80273c0:	b2a7      	uxth	r7, r4
            if(LV_ABS((int16_t)act_opt - sel_opt) > real_option_cnt / 2) {
 80273c2:	b224      	sxth	r4, r4
 80273c4:	1ae4      	subs	r4, r4, r3
 80273c6:	2c00      	cmp	r4, #0
 80273c8:	bfb8      	it	lt
 80273ca:	4264      	neglt	r4, r4
 80273cc:	ebb4 0f52 	cmp.w	r4, r2, lsr #1
 80273d0:	d903      	bls.n	80273da <lv_roller_set_selected+0x42>
                if(act_opt > sel_opt) sel_opt_signed += real_option_cnt;
 80273d2:	42bb      	cmp	r3, r7
 80273d4:	bf34      	ite	cc
 80273d6:	189b      	addcc	r3, r3, r2
                else sel_opt_signed -= real_option_cnt;
 80273d8:	1a9b      	subcs	r3, r3, r2
            sel_opt = sel_opt_signed + real_option_cnt * current_page;
 80273da:	441d      	add	r5, r3
 80273dc:	b2ab      	uxth	r3, r5
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 80273de:	42b3      	cmp	r3, r6
 80273e0:	bf24      	itt	cs
 80273e2:	f106 36ff 	addcs.w	r6, r6, #4294967295
 80273e6:	b2b3      	uxthcs	r3, r6
}
 80273e8:	bcf0      	pop	{r4, r5, r6, r7}
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 80273ea:	84c3      	strh	r3, [r0, #38]	; 0x26
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80273ec:	8503      	strh	r3, [r0, #40]	; 0x28
    refr_position(obj, anim);
 80273ee:	f7ef b929 	b.w	8016644 <refr_position>

080273f2 <lv_slider_get_mode>:
 * Get the mode of the slider.
 * @param obj       pointer to a bar object
 * @return          see ::lv_slider_mode_t
 */
static inline lv_slider_mode_t lv_slider_get_mode(lv_obj_t * slider)
{
 80273f2:	b508      	push	{r3, lr}
    lv_bar_mode_t mode = lv_bar_get_mode(slider);
 80273f4:	f7fe fe85 	bl	8026102 <lv_bar_get_mode>
    if(mode == LV_BAR_MODE_SYMMETRICAL) return LV_SLIDER_MODE_SYMMETRICAL;
 80273f8:	2801      	cmp	r0, #1
 80273fa:	d003      	beq.n	8027404 <lv_slider_get_mode+0x12>
    else if(mode == LV_BAR_MODE_RANGE) return LV_SLIDER_MODE_RANGE;
 80273fc:	1e83      	subs	r3, r0, #2
 80273fe:	4258      	negs	r0, r3
 8027400:	4158      	adcs	r0, r3
 8027402:	0040      	lsls	r0, r0, #1
    else return LV_SLIDER_MODE_NORMAL;
}
 8027404:	bd08      	pop	{r3, pc}

08027406 <lv_slider_constructor>:
{
 8027406:	b538      	push	{r3, r4, r5, lr}
    slider->dragging = 0U;
 8027408:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
{
 802740c:	460c      	mov	r4, r1
    slider->value_to_set = NULL;
 802740e:	2500      	movs	r5, #0
    slider->dragging = 0U;
 8027410:	f023 0303 	bic.w	r3, r3, #3
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8027414:	4620      	mov	r0, r4
    slider->value_to_set = NULL;
 8027416:	670d      	str	r5, [r1, #112]	; 0x70
    slider->dragging = 0U;
 8027418:	f881 3074 	strb.w	r3, [r1, #116]	; 0x74
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 802741c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8027420:	f7f4 faa5 	bl	801b96e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8027424:	2110      	movs	r1, #16
 8027426:	4620      	mov	r0, r4
 8027428:	f7f4 faa1 	bl	801b96e <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 802742c:	4628      	mov	r0, r5
 802742e:	f7ea fe53 	bl	80120d8 <lv_disp_get_dpi>
 8027432:	281d      	cmp	r0, #29
 8027434:	dd0d      	ble.n	8027452 <lv_slider_constructor+0x4c>
 8027436:	4628      	mov	r0, r5
 8027438:	f7ea fe4e 	bl	80120d8 <lv_disp_get_dpi>
 802743c:	2314      	movs	r3, #20
 802743e:	f100 010a 	add.w	r1, r0, #10
 8027442:	fb91 f1f3 	sdiv	r1, r1, r3
 8027446:	b209      	sxth	r1, r1
 8027448:	4620      	mov	r0, r4
}
 802744a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 802744e:	f7f5 bcc9 	b.w	801cde4 <lv_obj_set_ext_click_area>
 8027452:	2101      	movs	r1, #1
 8027454:	e7f8      	b.n	8027448 <lv_slider_constructor+0x42>

08027456 <position_knob>:
{
 8027456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802745a:	460c      	mov	r4, r1
        knob_area->x1 -= (knob_size >> 1);
 802745c:	f3c2 014f 	ubfx	r1, r2, #1, #16
 8027460:	3a01      	subs	r2, #1
{
 8027462:	4605      	mov	r5, r0
 8027464:	b292      	uxth	r2, r2
    if(hor) {
 8027466:	2b00      	cmp	r3, #0
 8027468:	d04c      	beq.n	8027504 <position_knob+0xae>
        knob_area->x1 -= (knob_size >> 1);
 802746a:	8823      	ldrh	r3, [r4, #0]
 802746c:	1a5b      	subs	r3, r3, r1
 802746e:	b29b      	uxth	r3, r3
 8027470:	8023      	strh	r3, [r4, #0]
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 8027472:	4413      	add	r3, r2
 8027474:	80a3      	strh	r3, [r4, #4]
        knob_area->y1 = obj->coords.y1;
 8027476:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 802747a:	8063      	strh	r3, [r4, #2]
        knob_area->y2 = obj->coords.y2;
 802747c:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8027480:	80e3      	strh	r3, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8027482:	2212      	movs	r2, #18
 8027484:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8027488:	4628      	mov	r0, r5
 802748a:	f7f6 faf9 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802748e:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8027490:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8027492:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8027496:	4628      	mov	r0, r5
 8027498:	f7f6 faf2 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802749c:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802749e:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80274a0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80274a4:	4628      	mov	r0, r5
 80274a6:	f7f6 faeb 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80274aa:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80274ac:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80274ae:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80274b2:	4628      	mov	r0, r5
 80274b4:	f7f6 fae4 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80274b8:	2268      	movs	r2, #104	; 0x68
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80274ba:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80274bc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80274c0:	4628      	mov	r0, r5
 80274c2:	f7f6 fadd 	bl	801da80 <lv_obj_get_style_prop>
 80274c6:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80274c8:	2269      	movs	r2, #105	; 0x69
 80274ca:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80274ce:	4628      	mov	r0, r5
    knob_area->x1 -= knob_left + transf_w;
 80274d0:	fa18 f886 	uxtah	r8, r8, r6
 80274d4:	f7f6 fad4 	bl	801da80 <lv_obj_get_style_prop>
 80274d8:	8823      	ldrh	r3, [r4, #0]
    knob_area->x2 += knob_right + transf_w;
 80274da:	fa1a f686 	uxtah	r6, sl, r6
    knob_area->y1 -= knob_top + transf_h;
 80274de:	fa17 f780 	uxtah	r7, r7, r0
    knob_area->x1 -= knob_left + transf_w;
 80274e2:	eba3 0808 	sub.w	r8, r3, r8
    knob_area->x2 += knob_right + transf_w;
 80274e6:	88a3      	ldrh	r3, [r4, #4]
    knob_area->y2 += knob_bottom + transf_h;
 80274e8:	fa19 f080 	uxtah	r0, r9, r0
    knob_area->x2 += knob_right + transf_w;
 80274ec:	441e      	add	r6, r3
    knob_area->y1 -= knob_top + transf_h;
 80274ee:	8863      	ldrh	r3, [r4, #2]
    knob_area->x1 -= knob_left + transf_w;
 80274f0:	f8a4 8000 	strh.w	r8, [r4]
    knob_area->y1 -= knob_top + transf_h;
 80274f4:	1bdf      	subs	r7, r3, r7
    knob_area->y2 += knob_bottom + transf_h;
 80274f6:	88e3      	ldrh	r3, [r4, #6]
    knob_area->x2 += knob_right + transf_w;
 80274f8:	80a6      	strh	r6, [r4, #4]
    knob_area->y2 += knob_bottom + transf_h;
 80274fa:	4418      	add	r0, r3
    knob_area->y1 -= knob_top + transf_h;
 80274fc:	8067      	strh	r7, [r4, #2]
    knob_area->y2 += knob_bottom + transf_h;
 80274fe:	80e0      	strh	r0, [r4, #6]
}
 8027500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        knob_area->y1 -= (knob_size >> 1);
 8027504:	8863      	ldrh	r3, [r4, #2]
 8027506:	1a5b      	subs	r3, r3, r1
 8027508:	b29b      	uxth	r3, r3
 802750a:	8063      	strh	r3, [r4, #2]
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 802750c:	4413      	add	r3, r2
 802750e:	80e3      	strh	r3, [r4, #6]
        knob_area->x1 = obj->coords.x1;
 8027510:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8027514:	8023      	strh	r3, [r4, #0]
        knob_area->x2 = obj->coords.x2;
 8027516:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 802751a:	80a3      	strh	r3, [r4, #4]
 802751c:	e7b1      	b.n	8027482 <position_knob+0x2c>

0802751e <lv_switch_anim_ready>:
    lv_switch_t * sw = a->var;
 802751e:	6800      	ldr	r0, [r0, #0]
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 8027520:	f04f 33ff 	mov.w	r3, #4294967295
 8027524:	6243      	str	r3, [r0, #36]	; 0x24
    lv_obj_invalidate((lv_obj_t *)sw);
 8027526:	f7f5 bb85 	b.w	801cc34 <lv_obj_invalidate>

0802752a <lv_switch_anim_exec_cb>:
    sw->anim_state = value;
 802752a:	6241      	str	r1, [r0, #36]	; 0x24
    lv_obj_invalidate((lv_obj_t *)sw);
 802752c:	f7f5 bb82 	b.w	801cc34 <lv_obj_invalidate>

08027530 <lv_switch_destructor>:
{
 8027530:	4608      	mov	r0, r1
    lv_anim_del(sw, NULL);
 8027532:	2100      	movs	r1, #0
 8027534:	f7ea bf00 	b.w	8012338 <lv_anim_del>

08027538 <lv_switch_constructor>:
{
 8027538:	b510      	push	{r4, lr}
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 802753a:	f04f 33ff 	mov.w	r3, #4294967295
{
 802753e:	460c      	mov	r4, r1
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 8027540:	624b      	str	r3, [r1, #36]	; 0x24
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8027542:	4620      	mov	r0, r4
 8027544:	2110      	movs	r1, #16
 8027546:	f7f4 fa12 	bl	801b96e <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 802754a:	4620      	mov	r0, r4
 802754c:	2108      	movs	r1, #8
 802754e:	f7f4 f9d8 	bl	801b902 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8027552:	4620      	mov	r0, r4
 8027554:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 8027558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 802755c:	f7f4 b9d1 	b.w	801b902 <lv_obj_add_flag>

08027560 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8027560:	2212      	movs	r2, #18
{
 8027562:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8027564:	f7f6 fa8c 	bl	801da80 <lv_obj_get_style_prop>
}
 8027568:	b200      	sxth	r0, r0
 802756a:	bd08      	pop	{r3, pc}

0802756c <lv_obj_get_style_pad_right>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802756c:	2213      	movs	r2, #19
{
 802756e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8027570:	f7f6 fa86 	bl	801da80 <lv_obj_get_style_prop>
}
 8027574:	b200      	sxth	r0, r0
 8027576:	bd08      	pop	{r3, pc}

08027578 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8027578:	2210      	movs	r2, #16
{
 802757a:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802757c:	f7f6 fa80 	bl	801da80 <lv_obj_get_style_prop>
}
 8027580:	b200      	sxth	r0, r0
 8027582:	bd08      	pop	{r3, pc}

08027584 <get_row_height>:
{
 8027584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027588:	b08d      	sub	sp, #52	; 0x34
 802758a:	4607      	mov	r7, r0
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 802758c:	2400      	movs	r4, #0
{
 802758e:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8027592:	f9bd 9068 	ldrsh.w	r9, [sp, #104]	; 0x68
 8027596:	9307      	str	r3, [sp, #28]
 8027598:	eb08 0509 	add.w	r5, r8, r9
 802759c:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 80275a0:	9204      	str	r2, [sp, #16]
 80275a2:	9308      	str	r3, [sp, #32]
 80275a4:	b2ab      	uxth	r3, r5
 80275a6:	9306      	str	r3, [sp, #24]
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 80275a8:	8913      	ldrh	r3, [r2, #8]
            txt_w -= cell_left + cell_right;
 80275aa:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 80275ae:	fa13 f585 	uxtah	r5, r3, r5
    uint16_t row_start = row_id * table->col_cnt;
 80275b2:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80275b4:	fb13 f301 	smulbb	r3, r3, r1
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 80275b8:	b22d      	sxth	r5, r5
    uint16_t row_start = row_id * table->col_cnt;
 80275ba:	b29b      	uxth	r3, r3
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 80275bc:	461e      	mov	r6, r3
    uint16_t row_start = row_id * table->col_cnt;
 80275be:	9305      	str	r3, [sp, #20]
            txt_w -= cell_left + cell_right;
 80275c0:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 80275c4:	18d3      	adds	r3, r2, r3
 80275c6:	9309      	str	r3, [sp, #36]	; 0x24
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 80275c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80275ca:	9b05      	ldr	r3, [sp, #20]
 80275cc:	4413      	add	r3, r2
 80275ce:	429e      	cmp	r6, r3
 80275d0:	db03      	blt.n	80275da <get_row_height+0x56>
}
 80275d2:	4628      	mov	r0, r5
 80275d4:	b00d      	add	sp, #52	; 0x34
 80275d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        char * cell_data = table->cell_data[cell];
 80275da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80275dc:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80275e0:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
        if(is_cell_empty(cell_data)) {
 80275e4:	b1b1      	cbz	r1, 8027614 <get_row_height+0x90>
        lv_coord_t txt_w = table->col_w[col];
 80275e6:	f8d7 e030 	ldr.w	lr, [r7, #48]	; 0x30
 80275ea:	4620      	mov	r0, r4
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 80275ec:	3a01      	subs	r2, #1
        lv_coord_t txt_w = table->col_w[col];
 80275ee:	f93e 3014 	ldrsh.w	r3, [lr, r4, lsl #1]
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 80275f2:	4282      	cmp	r2, r0
 80275f4:	dc13      	bgt.n	802761e <get_row_height+0x9a>
        if(ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP) {
 80275f6:	780a      	ldrb	r2, [r1, #0]
 80275f8:	f012 0202 	ands.w	r2, r2, #2
 80275fc:	d021      	beq.n	8027642 <get_row_height+0xbe>
 80275fe:	9b04      	ldr	r3, [sp, #16]
 8027600:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
            h_max = LV_MAX(lv_font_get_line_height(font) + cell_top + cell_bottom,
 8027604:	eb03 0208 	add.w	r2, r3, r8
 8027608:	444a      	add	r2, r9
 802760a:	42aa      	cmp	r2, r5
 802760c:	dd02      	ble.n	8027614 <get_row_height+0x90>
 802760e:	9a06      	ldr	r2, [sp, #24]
 8027610:	4413      	add	r3, r2
 8027612:	b21d      	sxth	r5, r3
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 8027614:	3601      	adds	r6, #1
 8027616:	3401      	adds	r4, #1
 8027618:	b2b6      	uxth	r6, r6
 802761a:	b2a4      	uxth	r4, r4
 802761c:	e7d4      	b.n	80275c8 <get_row_height+0x44>
            char * next_cell_data = table->cell_data[cell + col_merge];
 802761e:	f85c bb04 	ldr.w	fp, [ip], #4
            if(is_cell_empty(next_cell_data)) break;
 8027622:	f1bb 0f00 	cmp.w	fp, #0
 8027626:	d0e6      	beq.n	80275f6 <get_row_height+0x72>
            if(ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT) {
 8027628:	f89b b000 	ldrb.w	fp, [fp]
 802762c:	f100 0a01 	add.w	sl, r0, #1
 8027630:	f01b 0f01 	tst.w	fp, #1
 8027634:	d0df      	beq.n	80275f6 <get_row_height+0x72>
                txt_w += table->col_w[col + col_merge + 1];
 8027636:	f83e 001a 	ldrh.w	r0, [lr, sl, lsl #1]
 802763a:	4418      	add	r0, r3
 802763c:	b203      	sxth	r3, r0
 802763e:	4650      	mov	r0, sl
 8027640:	e7d7      	b.n	80275f2 <get_row_height+0x6e>
 8027642:	fa1f fa80 	uxth.w	sl, r0
            txt_w -= cell_left + cell_right;
 8027646:	9809      	ldr	r0, [sp, #36]	; 0x24
            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 8027648:	9202      	str	r2, [sp, #8]
 802764a:	3101      	adds	r1, #1
            txt_w -= cell_left + cell_right;
 802764c:	1a1b      	subs	r3, r3, r0
            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 802764e:	9a04      	ldr	r2, [sp, #16]
 8027650:	a80b      	add	r0, sp, #44	; 0x2c
            cell += col_merge;
 8027652:	ebaa 0404 	sub.w	r4, sl, r4
            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 8027656:	b21b      	sxth	r3, r3
            cell += col_merge;
 8027658:	4434      	add	r4, r6
            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 802765a:	9301      	str	r3, [sp, #4]
 802765c:	9b08      	ldr	r3, [sp, #32]
            cell += col_merge;
 802765e:	b2a6      	uxth	r6, r4
 8027660:	4654      	mov	r4, sl
            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 8027662:	9300      	str	r3, [sp, #0]
 8027664:	9b07      	ldr	r3, [sp, #28]
 8027666:	f7fe f8e7 	bl	8025838 <lv_txt_get_size>
            h_max = LV_MAX(txt_size.y + cell_top + cell_bottom, h_max);
 802766a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 802766e:	4443      	add	r3, r8
 8027670:	444b      	add	r3, r9
 8027672:	42ab      	cmp	r3, r5
 8027674:	bfb8      	it	lt
 8027676:	462b      	movlt	r3, r5
 8027678:	b21d      	sxth	r5, r3
            col += col_merge;
 802767a:	e7cb      	b.n	8027614 <get_row_height+0x90>

0802767c <lv_table_destructor>:
{
 802767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 802767e:	2500      	movs	r5, #0
{
 8027680:	460c      	mov	r4, r1
            table->cell_data[i] = NULL;
 8027682:	462f      	mov	r7, r5
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 8027684:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8027686:	b2ae      	uxth	r6, r5
 8027688:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
        if(table->cell_data[i]) {
 802768a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 802768c:	4353      	muls	r3, r2
 802768e:	429e      	cmp	r6, r3
 8027690:	db0c      	blt.n	80276ac <lv_table_destructor+0x30>
    if(table->cell_data) lv_mem_free(table->cell_data);
 8027692:	b108      	cbz	r0, 8027698 <lv_table_destructor+0x1c>
 8027694:	f7eb f82a 	bl	80126ec <lv_mem_free>
    if(table->row_h) lv_mem_free(table->row_h);
 8027698:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802769a:	b108      	cbz	r0, 80276a0 <lv_table_destructor+0x24>
 802769c:	f7eb f826 	bl	80126ec <lv_mem_free>
    if(table->col_w) lv_mem_free(table->col_w);
 80276a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80276a2:	b168      	cbz	r0, 80276c0 <lv_table_destructor+0x44>
}
 80276a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if(table->col_w) lv_mem_free(table->col_w);
 80276a8:	f7eb b820 	b.w	80126ec <lv_mem_free>
        if(table->cell_data[i]) {
 80276ac:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80276b0:	b120      	cbz	r0, 80276bc <lv_table_destructor+0x40>
            lv_mem_free(table->cell_data[i]);
 80276b2:	f7eb f81b 	bl	80126ec <lv_mem_free>
            table->cell_data[i] = NULL;
 80276b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80276b8:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 80276bc:	3501      	adds	r5, #1
 80276be:	e7e1      	b.n	8027684 <lv_table_destructor+0x8>
}
 80276c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080276c2 <lv_table_constructor>:
    table->col_cnt = 1;
 80276c2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 80276c6:	2002      	movs	r0, #2
{
 80276c8:	b510      	push	{r4, lr}
 80276ca:	460c      	mov	r4, r1
    table->col_cnt = 1;
 80276cc:	624b      	str	r3, [r1, #36]	; 0x24
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 80276ce:	f7ea ffef 	bl	80126b0 <lv_mem_alloc>
 80276d2:	6320      	str	r0, [r4, #48]	; 0x30
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 80276d4:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80276d6:	0040      	lsls	r0, r0, #1
 80276d8:	f7ea ffea 	bl	80126b0 <lv_mem_alloc>
    table->col_w[0] = LV_DPI_DEF;
 80276dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80276de:	2382      	movs	r3, #130	; 0x82
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 80276e0:	62e0      	str	r0, [r4, #44]	; 0x2c
    table->col_w[0] = LV_DPI_DEF;
 80276e2:	8013      	strh	r3, [r2, #0]
    table->row_h[0] = LV_DPI_DEF;
 80276e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80276e6:	8013      	strh	r3, [r2, #0]
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 80276e8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80276ea:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80276ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80276ee:	4359      	muls	r1, r3
 80276f0:	0089      	lsls	r1, r1, #2
 80276f2:	f7eb f813 	bl	801271c <lv_mem_realloc>
    table->cell_data[0] = NULL;
 80276f6:	2300      	movs	r3, #0
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 80276f8:	62a0      	str	r0, [r4, #40]	; 0x28
    table->cell_data[0] = NULL;
 80276fa:	6003      	str	r3, [r0, #0]
}
 80276fc:	bd10      	pop	{r4, pc}

080276fe <get_cell_area>:
    strcpy(&dst[1], txt);
#endif
}

static void get_cell_area(lv_obj_t * obj, uint16_t row, uint16_t col, lv_area_t * area)
{
 80276fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027702:	461c      	mov	r4, r3
    lv_table_t * table = (lv_table_t *)obj;

    uint32_t c;
    area->x1 = 0;
    for(c = 0; c < col; c++) {
 8027704:	2300      	movs	r3, #0
{
 8027706:	4690      	mov	r8, r2
 8027708:	4605      	mov	r5, r0
 802770a:	460f      	mov	r7, r1
    for(c = 0; c < col; c++) {
 802770c:	461a      	mov	r2, r3
 802770e:	4590      	cmp	r8, r2
    area->x1 = 0;
 8027710:	8023      	strh	r3, [r4, #0]
    for(c = 0; c < col; c++) {
 8027712:	d83a      	bhi.n	802778a <get_cell_area+0x8c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8027714:	2216      	movs	r2, #22
 8027716:	2100      	movs	r1, #0
 8027718:	4628      	mov	r0, r5
 802771a:	f7f6 f9b1 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802771e:	b2c0      	uxtb	r0, r0
        area->x1 += table->col_w[c];
    }

    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL;
    if(rtl) {
 8027720:	2801      	cmp	r0, #1
        area->x1 += lv_obj_get_scroll_x(obj);
 8027722:	4628      	mov	r0, r5
    if(rtl) {
 8027724:	d138      	bne.n	8027798 <get_cell_area+0x9a>
        area->x1 += lv_obj_get_scroll_x(obj);
 8027726:	f7f5 fc18 	bl	801cf5a <lv_obj_get_scroll_x>
 802772a:	8823      	ldrh	r3, [r4, #0]
 802772c:	4418      	add	r0, r3
 802772e:	8020      	strh	r0, [r4, #0]
        lv_coord_t w = lv_obj_get_width(obj);
 8027730:	4628      	mov	r0, r5
 8027732:	f7f5 f87f 	bl	801c834 <lv_obj_get_width>
        area->x2 = w - area->x1 - lv_obj_get_style_pad_right(obj, 0);
 8027736:	8823      	ldrh	r3, [r4, #0]
 8027738:	2100      	movs	r1, #0
 802773a:	1ac6      	subs	r6, r0, r3
 802773c:	4628      	mov	r0, r5
 802773e:	f7ff ff15 	bl	802756c <lv_obj_get_style_pad_right>
 8027742:	b2b6      	uxth	r6, r6
 8027744:	1a33      	subs	r3, r6, r0
 8027746:	b29b      	uxth	r3, r3
 8027748:	80a3      	strh	r3, [r4, #4]
        area->x1 = area->x2 - table->col_w[col];
 802774a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 802774c:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
 8027750:	1a9b      	subs	r3, r3, r2
 8027752:	8023      	strh	r3, [r4, #0]
        area->x2 = area->x1 + table->col_w[col] - 1;
    }

    uint32_t r;
    area->y1 = 0;
    for(r = 0; r < row; r++) {
 8027754:	2300      	movs	r3, #0
 8027756:	461a      	mov	r2, r3
 8027758:	4297      	cmp	r7, r2
    area->y1 = 0;
 802775a:	8063      	strh	r3, [r4, #2]
    for(r = 0; r < row; r++) {
 802775c:	d830      	bhi.n	80277c0 <get_cell_area+0xc2>
        area->y1 += table->row_h[r];
    }

    area->y1 += lv_obj_get_style_pad_top(obj, 0);
 802775e:	2100      	movs	r1, #0
 8027760:	4628      	mov	r0, r5
 8027762:	f7ff ff09 	bl	8027578 <lv_obj_get_style_pad_top>
 8027766:	8863      	ldrh	r3, [r4, #2]
 8027768:	4418      	add	r0, r3
 802776a:	8060      	strh	r0, [r4, #2]
    area->y1 -= lv_obj_get_scroll_y(obj);
 802776c:	4628      	mov	r0, r5
 802776e:	f7f5 fbfa 	bl	801cf66 <lv_obj_get_scroll_y>
 8027772:	8863      	ldrh	r3, [r4, #2]
 8027774:	1a18      	subs	r0, r3, r0
 8027776:	b280      	uxth	r0, r0
 8027778:	8060      	strh	r0, [r4, #2]
    area->y2 = area->y1 + table->row_h[row] - 1;
 802777a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 802777c:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 8027780:	3b01      	subs	r3, #1
 8027782:	4418      	add	r0, r3
 8027784:	80e0      	strh	r0, [r4, #6]

}
 8027786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        area->x1 += table->col_w[c];
 802778a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 802778c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
    for(c = 0; c < col; c++) {
 8027790:	3201      	adds	r2, #1
        area->x1 += table->col_w[c];
 8027792:	440b      	add	r3, r1
 8027794:	b21b      	sxth	r3, r3
    for(c = 0; c < col; c++) {
 8027796:	e7ba      	b.n	802770e <get_cell_area+0x10>
        area->x1 -= lv_obj_get_scroll_x(obj);
 8027798:	f7f5 fbdf 	bl	801cf5a <lv_obj_get_scroll_x>
 802779c:	8823      	ldrh	r3, [r4, #0]
        area->x1 += lv_obj_get_style_pad_left(obj, 0);
 802779e:	2100      	movs	r1, #0
        area->x1 -= lv_obj_get_scroll_x(obj);
 80277a0:	1a1b      	subs	r3, r3, r0
        area->x1 += lv_obj_get_style_pad_left(obj, 0);
 80277a2:	4628      	mov	r0, r5
        area->x1 -= lv_obj_get_scroll_x(obj);
 80277a4:	8023      	strh	r3, [r4, #0]
        area->x1 += lv_obj_get_style_pad_left(obj, 0);
 80277a6:	f7ff fedb 	bl	8027560 <lv_obj_get_style_pad_left>
 80277aa:	8823      	ldrh	r3, [r4, #0]
 80277ac:	4418      	add	r0, r3
 80277ae:	b280      	uxth	r0, r0
 80277b0:	8020      	strh	r0, [r4, #0]
        area->x2 = area->x1 + table->col_w[col] - 1;
 80277b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80277b4:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
 80277b8:	3b01      	subs	r3, #1
 80277ba:	4418      	add	r0, r3
 80277bc:	80a0      	strh	r0, [r4, #4]
 80277be:	e7c9      	b.n	8027754 <get_cell_area+0x56>
        area->y1 += table->row_h[r];
 80277c0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80277c2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
    for(r = 0; r < row; r++) {
 80277c6:	3201      	adds	r2, #1
        area->y1 += table->row_h[r];
 80277c8:	440b      	add	r3, r1
 80277ca:	b21b      	sxth	r3, r3
    for(r = 0; r < row; r++) {
 80277cc:	e7c4      	b.n	8027758 <get_cell_area+0x5a>

080277ce <scroll_to_selected_cell>:


static void scroll_to_selected_cell(lv_obj_t * obj)
{
 80277ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    lv_table_t * table = (lv_table_t *)obj;

    lv_area_t a;
    get_cell_area(obj, table->row_act, table->col_act, &a);
 80277d0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80277d2:	466b      	mov	r3, sp
 80277d4:	8e82      	ldrh	r2, [r0, #52]	; 0x34
{
 80277d6:	4604      	mov	r4, r0
    get_cell_area(obj, table->row_act, table->col_act, &a);
 80277d8:	f7ff ff91 	bl	80276fe <get_cell_area>
    if(a.x1 < 0) {
 80277dc:	f9bd 1000 	ldrsh.w	r1, [sp]
 80277e0:	2900      	cmp	r1, #0
 80277e2:	da14      	bge.n	802780e <scroll_to_selected_cell+0x40>
        lv_obj_scroll_by_bounded(obj, -a.x1, 0, LV_ANIM_ON);
 80277e4:	4249      	negs	r1, r1
    }
    else if(a.x2 > lv_obj_get_width(obj)) {
        lv_obj_scroll_by_bounded(obj, lv_obj_get_width(obj) - a.x2, 0, LV_ANIM_ON);
 80277e6:	2301      	movs	r3, #1
 80277e8:	2200      	movs	r2, #0
 80277ea:	b209      	sxth	r1, r1
 80277ec:	4620      	mov	r0, r4
 80277ee:	f7f5 fbfd 	bl	801cfec <lv_obj_scroll_by_bounded>
    }

    if(a.y1 < 0) {
 80277f2:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80277f6:	2a00      	cmp	r2, #0
 80277f8:	da15      	bge.n	8027826 <scroll_to_selected_cell+0x58>
        lv_obj_scroll_by_bounded(obj, 0, -a.y1, LV_ANIM_ON);
 80277fa:	4252      	negs	r2, r2
    }
    else if(a.y2 > lv_obj_get_height(obj)) {
        lv_obj_scroll_by_bounded(obj, 0, lv_obj_get_height(obj) - a.y2, LV_ANIM_ON);
 80277fc:	2301      	movs	r3, #1
 80277fe:	b212      	sxth	r2, r2
 8027800:	2100      	movs	r1, #0
 8027802:	4620      	mov	r0, r4
    }

}
 8027804:	b003      	add	sp, #12
 8027806:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        lv_obj_scroll_by_bounded(obj, 0, lv_obj_get_height(obj) - a.y2, LV_ANIM_ON);
 802780a:	f7f5 bbef 	b.w	801cfec <lv_obj_scroll_by_bounded>
    else if(a.x2 > lv_obj_get_width(obj)) {
 802780e:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8027812:	4620      	mov	r0, r4
 8027814:	f7f5 f80e 	bl	801c834 <lv_obj_get_width>
 8027818:	4285      	cmp	r5, r0
 802781a:	ddea      	ble.n	80277f2 <scroll_to_selected_cell+0x24>
        lv_obj_scroll_by_bounded(obj, lv_obj_get_width(obj) - a.x2, 0, LV_ANIM_ON);
 802781c:	4620      	mov	r0, r4
 802781e:	f7f5 f809 	bl	801c834 <lv_obj_get_width>
 8027822:	1b41      	subs	r1, r0, r5
 8027824:	e7df      	b.n	80277e6 <scroll_to_selected_cell+0x18>
    else if(a.y2 > lv_obj_get_height(obj)) {
 8027826:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 802782a:	4620      	mov	r0, r4
 802782c:	f7f5 f808 	bl	801c840 <lv_obj_get_height>
 8027830:	4285      	cmp	r5, r0
 8027832:	dd04      	ble.n	802783e <scroll_to_selected_cell+0x70>
        lv_obj_scroll_by_bounded(obj, 0, lv_obj_get_height(obj) - a.y2, LV_ANIM_ON);
 8027834:	4620      	mov	r0, r4
 8027836:	f7f5 f803 	bl	801c840 <lv_obj_get_height>
 802783a:	1b42      	subs	r2, r0, r5
 802783c:	e7de      	b.n	80277fc <scroll_to_selected_cell+0x2e>
}
 802783e:	b003      	add	sp, #12
 8027840:	bd30      	pop	{r4, r5, pc}

08027842 <refr_size_form_row.constprop.0>:
static void refr_size_form_row(lv_obj_t * obj, uint32_t start_row)
 8027842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027846:	4604      	mov	r4, r0
 8027848:	b08b      	sub	sp, #44	; 0x2c
    const lv_coord_t cell_pad_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 802784a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    for(i = start_row; i < table->row_cnt; i++) {
 802784e:	2500      	movs	r5, #0
    const lv_coord_t cell_pad_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 8027850:	f7ff fe86 	bl	8027560 <lv_obj_get_style_pad_left>
    const lv_coord_t cell_pad_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 8027854:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    const lv_coord_t cell_pad_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 8027858:	9007      	str	r0, [sp, #28]
    const lv_coord_t cell_pad_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 802785a:	4620      	mov	r0, r4
 802785c:	f7ff fe86 	bl	802756c <lv_obj_get_style_pad_right>
    const lv_coord_t cell_pad_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 8027860:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    const lv_coord_t cell_pad_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 8027864:	4606      	mov	r6, r0
    const lv_coord_t cell_pad_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 8027866:	4620      	mov	r0, r4
 8027868:	f7ff fe86 	bl	8027578 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802786c:	2211      	movs	r2, #17
 802786e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8027872:	4607      	mov	r7, r0
 8027874:	4620      	mov	r0, r4
 8027876:	f7f6 f903 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 802787a:	2258      	movs	r2, #88	; 0x58
 802787c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    return (lv_coord_t)v.num;
 8027880:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8027884:	4620      	mov	r0, r4
 8027886:	f7f6 f8fb 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802788a:	2259      	movs	r2, #89	; 0x59
    return (lv_coord_t)v.num;
 802788c:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802788e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8027892:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8027894:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8027896:	f7f6 f8f3 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802789a:	2257      	movs	r2, #87	; 0x57
 802789c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    return (lv_coord_t)v.num;
 80278a0:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80278a4:	4620      	mov	r0, r4
 80278a6:	f7f6 f8eb 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 80278aa:	2205      	movs	r2, #5
 80278ac:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80278b0:	9008      	str	r0, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 80278b2:	4620      	mov	r0, r4
 80278b4:	f7f6 f8e4 	bl	801da80 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 80278b8:	2206      	movs	r2, #6
    return (lv_coord_t)v.num;
 80278ba:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 80278be:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80278c2:	4620      	mov	r0, r4
 80278c4:	f7f6 f8dc 	bl	801da80 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80278c8:	fa0f f880 	sxth.w	r8, r0
    for(i = start_row; i < table->row_cnt; i++) {
 80278cc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80278ce:	429d      	cmp	r5, r3
 80278d0:	d308      	bcc.n	80278e4 <refr_size_form_row.constprop.0+0xa2>
    lv_obj_refresh_self_size(obj);
 80278d2:	4620      	mov	r0, r4
 80278d4:	f7f5 f823 	bl	801c91e <lv_obj_refresh_self_size>
    lv_obj_invalidate(obj);
 80278d8:	4620      	mov	r0, r4
}
 80278da:	b00b      	add	sp, #44	; 0x2c
 80278dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(obj);
 80278e0:	f7f5 b9a8 	b.w	801cc34 <lv_obj_invalidate>
        lv_coord_t calculated_height = get_row_height(obj, i, font, letter_space, line_space,
 80278e4:	9b07      	ldr	r3, [sp, #28]
 80278e6:	b2a9      	uxth	r1, r5
 80278e8:	4620      	mov	r0, r4
 80278ea:	9602      	str	r6, [sp, #8]
 80278ec:	e9cd a300 	strd	sl, r3, [sp]
 80278f0:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 80278f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80278f8:	f7ff fe44 	bl	8027584 <get_row_height>
        table->row_h[i] = LV_CLAMP(minh, calculated_height, maxh);
 80278fc:	4540      	cmp	r0, r8
 80278fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8027900:	bfa8      	it	ge
 8027902:	4640      	movge	r0, r8
 8027904:	b200      	sxth	r0, r0
 8027906:	4548      	cmp	r0, r9
 8027908:	bfb8      	it	lt
 802790a:	4648      	movlt	r0, r9
 802790c:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
    for(i = start_row; i < table->row_cnt; i++) {
 8027910:	3501      	adds	r5, #1
 8027912:	e7db      	b.n	80278cc <refr_size_form_row.constprop.0+0x8a>

08027914 <pwd_char_hider_anim>:
}
 8027914:	4770      	bx	lr

08027916 <lv_textarea_destructor>:
    if(ta->pwd_tmp != NULL) {
 8027916:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
{
 8027918:	b510      	push	{r4, lr}
 802791a:	460c      	mov	r4, r1
    if(ta->pwd_tmp != NULL) {
 802791c:	b118      	cbz	r0, 8027926 <lv_textarea_destructor+0x10>
        lv_mem_free(ta->pwd_tmp);
 802791e:	f7ea fee5 	bl	80126ec <lv_mem_free>
        ta->pwd_tmp = NULL;
 8027922:	2300      	movs	r3, #0
 8027924:	62e3      	str	r3, [r4, #44]	; 0x2c
    if(ta->pwd_bullet != NULL) {
 8027926:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8027928:	b118      	cbz	r0, 8027932 <lv_textarea_destructor+0x1c>
        lv_mem_free(ta->pwd_bullet);
 802792a:	f7ea fedf 	bl	80126ec <lv_mem_free>
        ta->pwd_bullet = NULL;
 802792e:	2300      	movs	r3, #0
 8027930:	6323      	str	r3, [r4, #48]	; 0x30
    if(ta->placeholder_txt != NULL) {
 8027932:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8027934:	b118      	cbz	r0, 802793e <lv_textarea_destructor+0x28>
        lv_mem_free(ta->placeholder_txt);
 8027936:	f7ea fed9 	bl	80126ec <lv_mem_free>
        ta->placeholder_txt = NULL;
 802793a:	2300      	movs	r3, #0
 802793c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 802793e:	bd10      	pop	{r4, pc}

08027940 <cursor_blink_anim_cb>:
    if(show != ta->cursor.show) {
 8027940:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
{
 8027944:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(show != ta->cursor.show) {
 8027946:	f002 0401 	and.w	r4, r2, #1
 802794a:	428c      	cmp	r4, r1
 802794c:	d020      	beq.n	8027990 <cursor_blink_anim_cb+0x50>
        ta->cursor.show = show ? 1U : 0U;
 802794e:	3900      	subs	r1, #0
        area_tmp.x1 += ta->label->coords.x1;
 8027950:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8027952:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
        ta->cursor.show = show ? 1U : 0U;
 8027956:	bf18      	it	ne
 8027958:	2101      	movne	r1, #1
    dest->x2 = src->x2;
 802795a:	f9b0 604c 	ldrsh.w	r6, [r0, #76]	; 0x4c
    dest->y2 = src->y2;
 802795e:	f9b0 504e 	ldrsh.w	r5, [r0, #78]	; 0x4e
 8027962:	f361 0200 	bfi	r2, r1, #0, #1
    dest->y1 = src->y1;
 8027966:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	; 0x4a
 802796a:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
        area_tmp.x1 += ta->label->coords.x1;
 802796e:	8aa2      	ldrh	r2, [r4, #20]
 8027970:	4413      	add	r3, r2
        area_tmp.x2 += ta->label->coords.x1;
 8027972:	4432      	add	r2, r6
        area_tmp.x1 += ta->label->coords.x1;
 8027974:	f8ad 3000 	strh.w	r3, [sp]
        area_tmp.y1 += ta->label->coords.y1;
 8027978:	8ae3      	ldrh	r3, [r4, #22]
        area_tmp.x2 += ta->label->coords.x1;
 802797a:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_tmp.y1 += ta->label->coords.y1;
 802797e:	4419      	add	r1, r3
        area_tmp.y2 += ta->label->coords.y1;
 8027980:	442b      	add	r3, r5
        area_tmp.y1 += ta->label->coords.y1;
 8027982:	f8ad 1002 	strh.w	r1, [sp, #2]
        lv_obj_invalidate_area(obj, &area_tmp);
 8027986:	4669      	mov	r1, sp
        area_tmp.y2 += ta->label->coords.y1;
 8027988:	f8ad 3006 	strh.w	r3, [sp, #6]
        lv_obj_invalidate_area(obj, &area_tmp);
 802798c:	f7f5 f931 	bl	801cbf2 <lv_obj_invalidate_area>
}
 8027990:	b002      	add	sp, #8
 8027992:	bd70      	pop	{r4, r5, r6, pc}

08027994 <lv_obj_get_style_text_font.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8027994:	2257      	movs	r2, #87	; 0x57
 8027996:	2100      	movs	r1, #0
static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
 8027998:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802799a:	f7f6 f871 	bl	801da80 <lv_obj_get_style_prop>
}
 802799e:	bd08      	pop	{r3, pc}

080279a0 <label_event_cb>:
{
 80279a0:	b570      	push	{r4, r5, r6, lr}
 80279a2:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 80279a4:	f7f3 fc29 	bl	801b1fa <lv_event_get_code>
 80279a8:	4604      	mov	r4, r0
    lv_obj_t * label = lv_event_get_target(e);
 80279aa:	4628      	mov	r0, r5
    if(code == LV_EVENT_STYLE_CHANGED || code == LV_EVENT_SIZE_CHANGED) {
 80279ac:	3c29      	subs	r4, #41	; 0x29
    lv_obj_t * label = lv_event_get_target(e);
 80279ae:	f7f3 fc20 	bl	801b1f2 <lv_event_get_target>
 80279b2:	4606      	mov	r6, r0
    lv_obj_t * ta = lv_obj_get_parent(label);
 80279b4:	f7f6 fbe8 	bl	801e188 <lv_obj_get_parent>
    if(code == LV_EVENT_STYLE_CHANGED || code == LV_EVENT_SIZE_CHANGED) {
 80279b8:	b2e4      	uxtb	r4, r4
    lv_obj_t * ta = lv_obj_get_parent(label);
 80279ba:	4605      	mov	r5, r0
    if(code == LV_EVENT_STYLE_CHANGED || code == LV_EVENT_SIZE_CHANGED) {
 80279bc:	2c01      	cmp	r4, #1
 80279be:	d80b      	bhi.n	80279d8 <label_event_cb+0x38>
        lv_label_set_text(label, NULL);
 80279c0:	4630      	mov	r0, r6
 80279c2:	2100      	movs	r1, #0
 80279c4:	f7ff fa5a 	bl	8026e7c <lv_label_set_text>
        refr_cursor_area(ta);
 80279c8:	4628      	mov	r0, r5
 80279ca:	f7f0 fac5 	bl	8017f58 <refr_cursor_area>
        start_cursor_blink(ta);
 80279ce:	4628      	mov	r0, r5
}
 80279d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        start_cursor_blink(ta);
 80279d4:	f7f0 ba8e 	b.w	8017ef4 <start_cursor_blink>
}
 80279d8:	bd70      	pop	{r4, r5, r6, pc}

080279da <lv_textarea_set_cursor_click_pos>:
    ta->cursor.click_pos = en ? 1U : 0U;
 80279da:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80279de:	f361 0341 	bfi	r3, r1, #1, #1
 80279e2:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
}
 80279e6:	4770      	bx	lr

080279e8 <lv_textarea_set_one_line>:
{
 80279e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(ta->one_line == en) return;
 80279ec:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
{
 80279f0:	4604      	mov	r4, r0
 80279f2:	460d      	mov	r5, r1
    if(ta->one_line == en) return;
 80279f4:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80279f8:	428a      	cmp	r2, r1
 80279fa:	d029      	beq.n	8027a50 <lv_textarea_set_one_line+0x68>
    lv_coord_t width = en ? LV_SIZE_CONTENT : lv_pct(100);
 80279fc:	2d00      	cmp	r5, #0
    ta->one_line = en ? 1U : 0U;
 80279fe:	f361 03c3 	bfi	r3, r1, #3, #1
    lv_coord_t width = en ? LV_SIZE_CONTENT : lv_pct(100);
 8027a02:	f242 0164 	movw	r1, #8292	; 0x2064
 8027a06:	f242 76d1 	movw	r6, #10193	; 0x27d1
 8027a0a:	bf08      	it	eq
 8027a0c:	2700      	moveq	r7, #0
    ta->one_line = en ? 1U : 0U;
 8027a0e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    lv_coord_t width = en ? LV_SIZE_CONTENT : lv_pct(100);
 8027a12:	bf18      	it	ne
 8027a14:	460f      	movne	r7, r1
    lv_obj_set_width(ta->label, width);
 8027a16:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8027a18:	bf18      	it	ne
 8027a1a:	4631      	movne	r1, r6
 8027a1c:	f7f4 fe50 	bl	801c6c0 <lv_obj_set_width>
    lv_obj_set_style_min_width(ta->label, min_width_value, 0);
 8027a20:	2200      	movs	r2, #0
 8027a22:	4639      	mov	r1, r7
 8027a24:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027a26:	f7f6 fb7a 	bl	801e11e <lv_obj_set_style_min_width>
    if(en) {
 8027a2a:	b15d      	cbz	r5, 8027a44 <lv_textarea_set_one_line+0x5c>
        lv_obj_set_height(obj, LV_SIZE_CONTENT);
 8027a2c:	4631      	mov	r1, r6
 8027a2e:	4620      	mov	r0, r4
 8027a30:	f7f4 fe5d 	bl	801c6ee <lv_obj_set_height>
    lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 8027a34:	2300      	movs	r3, #0
 8027a36:	4620      	mov	r0, r4
 8027a38:	461a      	mov	r2, r3
 8027a3a:	4619      	mov	r1, r3
}
 8027a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 8027a40:	f7f5 bb38 	b.w	801d0b4 <lv_obj_scroll_to>
        lv_obj_remove_local_style_prop(obj, LV_STYLE_HEIGHT, LV_PART_MAIN);
 8027a44:	462a      	mov	r2, r5
 8027a46:	2104      	movs	r1, #4
 8027a48:	4620      	mov	r0, r4
 8027a4a:	f7f6 fa06 	bl	801de5a <lv_obj_remove_local_style_prop>
 8027a4e:	e7f1      	b.n	8027a34 <lv_textarea_set_one_line+0x4c>
}
 8027a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08027a54 <lv_textarea_get_text>:
    if(ta->pwd_mode == 0) {
 8027a54:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8027a58:	075b      	lsls	r3, r3, #29
 8027a5a:	d402      	bmi.n	8027a62 <lv_textarea_get_text+0xe>
        txt = lv_label_get_text(ta->label);
 8027a5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8027a5e:	f7ff ba8e 	b.w	8026f7e <lv_label_get_text>
}
 8027a62:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8027a64:	4770      	bx	lr

08027a66 <lv_textarea_get_cursor_pos>:
}
 8027a66:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8027a68:	4770      	bx	lr

08027a6a <pwd_char_hider_anim_ready>:
    pwd_char_hider(obj);
 8027a6a:	6800      	ldr	r0, [r0, #0]
 8027a6c:	f7f0 bc50 	b.w	8018310 <pwd_char_hider>

08027a70 <lv_textarea_get_one_line>:
    return ta->one_line == 1U;
 8027a70:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
}
 8027a74:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8027a78:	4770      	bx	lr

08027a7a <lv_textarea_clear_selection>:
{
 8027a7a:	b538      	push	{r3, r4, r5, lr}
 8027a7c:	4604      	mov	r4, r0
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 8027a7e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8027a80:	f7ff fb64 	bl	802714c <lv_label_get_text_selection_start>
 8027a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8027a88:	4605      	mov	r5, r0
 8027a8a:	4298      	cmp	r0, r3
 8027a8c:	d00b      	beq.n	8027aa6 <lv_textarea_clear_selection+0x2c>
        lv_label_set_text_sel_start(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 8027a8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027a90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8027a94:	f7ff fa6d 	bl	8026f72 <lv_label_set_text_sel_start>
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 8027a98:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027a9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
}
 8027a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 8027aa2:	f7ff ba69 	b.w	8026f78 <lv_label_set_text_sel_end>
       lv_label_get_text_selection_end(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL) {
 8027aa6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027aa8:	f7ff fb52 	bl	8027150 <lv_label_get_text_selection_end>
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 8027aac:	42a8      	cmp	r0, r5
 8027aae:	d1ee      	bne.n	8027a8e <lv_textarea_clear_selection+0x14>
}
 8027ab0:	bd38      	pop	{r3, r4, r5, pc}

08027ab2 <lv_textarea_del_char>:
{
 8027ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(cur_pos == 0) return;
 8027ab4:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8027ab6:	4604      	mov	r4, r0
    if(cur_pos == 0) return;
 8027ab8:	2b00      	cmp	r3, #0
 8027aba:	d040      	beq.n	8027b3e <lv_textarea_del_char+0x8c>
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 8027abc:	237f      	movs	r3, #127	; 0x7f
    lv_res_t res = insert_handler(obj, del_buf);
 8027abe:	a901      	add	r1, sp, #4
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 8027ac0:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_res_t res = insert_handler(obj, del_buf);
 8027ac4:	f7f0 fcf4 	bl	80184b0 <insert_handler>
    if(res != LV_RES_OK) return;
 8027ac8:	2801      	cmp	r0, #1
    lv_res_t res = insert_handler(obj, del_buf);
 8027aca:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return;
 8027acc:	d137      	bne.n	8027b3e <lv_textarea_del_char+0x8c>
    char * label_txt = lv_label_get_text(ta->label);
 8027ace:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027ad0:	f7ff fa55 	bl	8026f7e <lv_label_get_text>
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 8027ad4:	6c61      	ldr	r1, [r4, #68]	; 0x44
    char * label_txt = lv_label_get_text(ta->label);
 8027ad6:	4606      	mov	r6, r0
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 8027ad8:	462a      	mov	r2, r5
 8027ada:	3901      	subs	r1, #1
 8027adc:	f7eb fa28 	bl	8012f30 <_lv_txt_cut>
    lv_label_set_text(ta->label, label_txt);
 8027ae0:	4631      	mov	r1, r6
 8027ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027ae4:	f7ff f9ca 	bl	8026e7c <lv_label_set_text>
    lv_textarea_clear_selection(obj);
 8027ae8:	4620      	mov	r0, r4
 8027aea:	f7ff ffc6 	bl	8027a7a <lv_textarea_clear_selection>
    if(ta->placeholder_txt) {
 8027aee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8027af0:	b13b      	cbz	r3, 8027b02 <lv_textarea_del_char+0x50>
        const char * txt = lv_label_get_text(ta->label);
 8027af2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027af4:	f7ff fa43 	bl	8026f7e <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 8027af8:	7803      	ldrb	r3, [r0, #0]
 8027afa:	b913      	cbnz	r3, 8027b02 <lv_textarea_del_char+0x50>
 8027afc:	4620      	mov	r0, r4
 8027afe:	f7f5 f899 	bl	801cc34 <lv_obj_invalidate>
    if(ta->pwd_mode) {
 8027b02:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
        _lv_txt_cut(ta->pwd_tmp, ta->cursor.pos - 1, 1);
 8027b06:	6c61      	ldr	r1, [r4, #68]	; 0x44
    if(ta->pwd_mode) {
 8027b08:	075b      	lsls	r3, r3, #29
 8027b0a:	d50e      	bpl.n	8027b2a <lv_textarea_del_char+0x78>
        _lv_txt_cut(ta->pwd_tmp, ta->cursor.pos - 1, 1);
 8027b0c:	3901      	subs	r1, #1
 8027b0e:	2201      	movs	r2, #1
 8027b10:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027b12:	f7eb fa0d 	bl	8012f30 <_lv_txt_cut>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 8027b16:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8027b18:	4628      	mov	r0, r5
 8027b1a:	f7f2 fde3 	bl	801a6e4 <strlen>
 8027b1e:	1c41      	adds	r1, r0, #1
 8027b20:	4628      	mov	r0, r5
 8027b22:	f7ea fdfb 	bl	801271c <lv_mem_realloc>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8027b26:	b160      	cbz	r0, 8027b42 <lv_textarea_del_char+0x90>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 8027b28:	62e0      	str	r0, [r4, #44]	; 0x2c
    lv_textarea_set_cursor_pos(obj, ta->cursor.pos - 1);
 8027b2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8027b2c:	4620      	mov	r0, r4
 8027b2e:	3901      	subs	r1, #1
 8027b30:	f7f0 fb1a 	bl	8018168 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8027b34:	2200      	movs	r2, #0
 8027b36:	211c      	movs	r1, #28
 8027b38:	4620      	mov	r0, r4
 8027b3a:	f7dc fdcf 	bl	80046dc <lv_event_send>
}
 8027b3e:	b002      	add	sp, #8
 8027b40:	bd70      	pop	{r4, r5, r6, pc}
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8027b42:	e7fe      	b.n	8027b42 <lv_textarea_del_char+0x90>

08027b44 <lv_textarea_del_char_forward>:
{
 8027b44:	b538      	push	{r3, r4, r5, lr}
    return ta->cursor.pos;
 8027b46:	6c45      	ldr	r5, [r0, #68]	; 0x44
{
 8027b48:	4604      	mov	r4, r0
    lv_textarea_set_cursor_pos(obj, cp + 1);
 8027b4a:	1c69      	adds	r1, r5, #1
 8027b4c:	f7f0 fb0c 	bl	8018168 <lv_textarea_set_cursor_pos>
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 8027b50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8027b52:	429d      	cmp	r5, r3
 8027b54:	d004      	beq.n	8027b60 <lv_textarea_del_char_forward+0x1c>
 8027b56:	4620      	mov	r0, r4
}
 8027b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 8027b5c:	f7ff bfa9 	b.w	8027ab2 <lv_textarea_del_char>
}
 8027b60:	bd38      	pop	{r3, r4, r5, pc}

08027b62 <lv_textarea_cursor_right>:
    cp++;
 8027b62:	6c41      	ldr	r1, [r0, #68]	; 0x44
    lv_textarea_set_cursor_pos(obj, cp);
 8027b64:	3101      	adds	r1, #1
 8027b66:	f7f0 baff 	b.w	8018168 <lv_textarea_set_cursor_pos>

08027b6a <lv_textarea_cursor_left>:
    return ta->cursor.pos;
 8027b6a:	6c41      	ldr	r1, [r0, #68]	; 0x44
    if(cp > 0) {
 8027b6c:	b111      	cbz	r1, 8027b74 <lv_textarea_cursor_left+0xa>
        lv_textarea_set_cursor_pos(obj, cp);
 8027b6e:	3901      	subs	r1, #1
 8027b70:	f7f0 bafa 	b.w	8018168 <lv_textarea_set_cursor_pos>
}
 8027b74:	4770      	bx	lr

08027b76 <lv_textarea_cursor_down>:
{
 8027b76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027b78:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 8027b7a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8027b7c:	aa01      	add	r2, sp, #4
 8027b7e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8027b80:	f7ee fb96 	bl	80162b0 <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8027b84:	2259      	movs	r2, #89	; 0x59
 8027b86:	2100      	movs	r1, #0
 8027b88:	4620      	mov	r0, r4
 8027b8a:	f7f5 ff79 	bl	801da80 <lv_obj_get_style_prop>
 8027b8e:	4605      	mov	r5, r0
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8027b90:	4620      	mov	r0, r4
 8027b92:	f7ff feff 	bl	8027994 <lv_obj_get_style_text_font.constprop.0>
    pos.y += font_h + line_space + 1;
 8027b96:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8027b9a:	441d      	add	r5, r3
 8027b9c:	8903      	ldrh	r3, [r0, #8]
    if(pos.y < lv_obj_get_height(ta->label)) {
 8027b9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    pos.y += font_h + line_space + 1;
 8027ba0:	3501      	adds	r5, #1
 8027ba2:	441d      	add	r5, r3
    pos.x = ta->cursor.valid_x;
 8027ba4:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    pos.y += font_h + line_space + 1;
 8027ba8:	b22d      	sxth	r5, r5
    pos.x = ta->cursor.valid_x;
 8027baa:	f8ad 3004 	strh.w	r3, [sp, #4]
    pos.y += font_h + line_space + 1;
 8027bae:	f8ad 5006 	strh.w	r5, [sp, #6]
    if(pos.y < lv_obj_get_height(ta->label)) {
 8027bb2:	f7f4 fe45 	bl	801c840 <lv_obj_get_height>
 8027bb6:	4285      	cmp	r5, r0
 8027bb8:	da0b      	bge.n	8027bd2 <lv_textarea_cursor_down+0x5c>
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 8027bba:	a901      	add	r1, sp, #4
 8027bbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027bbe:	f7ff f9e5 	bl	8026f8c <lv_label_get_letter_on>
        lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 8027bc2:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 8027bc6:	4601      	mov	r1, r0
        lv_textarea_set_cursor_pos(obj, new_cur_pos);
 8027bc8:	4620      	mov	r0, r4
 8027bca:	f7f0 facd 	bl	8018168 <lv_textarea_set_cursor_pos>
        ta->cursor.valid_x = cur_valid_x_tmp;
 8027bce:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
 8027bd2:	b003      	add	sp, #12
 8027bd4:	bd30      	pop	{r4, r5, pc}

08027bd6 <lv_textarea_cursor_up>:
{
 8027bd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027bd8:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 8027bda:	aa01      	add	r2, sp, #4
 8027bdc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8027bde:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8027be0:	f7ee fb66 	bl	80162b0 <lv_label_get_letter_pos>
 8027be4:	2259      	movs	r2, #89	; 0x59
 8027be6:	2100      	movs	r1, #0
 8027be8:	4620      	mov	r0, r4
 8027bea:	f7f5 ff49 	bl	801da80 <lv_obj_get_style_prop>
 8027bee:	4605      	mov	r5, r0
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8027bf0:	4620      	mov	r0, r4
 8027bf2:	f7ff fecf 	bl	8027994 <lv_obj_get_style_text_font.constprop.0>
    pos.y -= font_h + line_space - 1;
 8027bf6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8027bfa:	8902      	ldrh	r2, [r0, #8]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 8027bfc:	a901      	add	r1, sp, #4
    pos.y -= font_h + line_space - 1;
 8027bfe:	3301      	adds	r3, #1
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 8027c00:	6a60      	ldr	r0, [r4, #36]	; 0x24
    pos.y -= font_h + line_space - 1;
 8027c02:	1b5b      	subs	r3, r3, r5
 8027c04:	1a9b      	subs	r3, r3, r2
 8027c06:	f8ad 3006 	strh.w	r3, [sp, #6]
    pos.x = ta->cursor.valid_x;
 8027c0a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8027c0e:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 8027c12:	f7ff f9bb 	bl	8026f8c <lv_label_get_letter_on>
    lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 8027c16:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 8027c1a:	4601      	mov	r1, r0
    lv_textarea_set_cursor_pos(obj, new_cur_pos);
 8027c1c:	4620      	mov	r0, r4
 8027c1e:	f7f0 faa3 	bl	8018168 <lv_textarea_set_cursor_pos>
    ta->cursor.valid_x = cur_valid_x_tmp;
 8027c22:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
 8027c26:	b003      	add	sp, #12
 8027c28:	bd30      	pop	{r4, r5, pc}

08027c2a <lvgl_flush_cb_mono>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_mono(lv_disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
 8027c2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t w = area->x2 - area->x1 + 1;
 8027c2e:	888b      	ldrh	r3, [r1, #4]
{
 8027c30:	4693      	mov	fp, r2
	uint16_t h = area->y2 - area->y1 + 1;
 8027c32:	88ce      	ldrh	r6, [r1, #6]
{
 8027c34:	b089      	sub	sp, #36	; 0x24
	uint16_t w = area->x2 - area->x1 + 1;
 8027c36:	880a      	ldrh	r2, [r1, #0]
 8027c38:	3301      	adds	r3, #1
	struct lvgl_disp_data *data =
 8027c3a:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
	uint16_t h = area->y2 - area->y1 + 1;
 8027c3c:	3601      	adds	r6, #1
	uint16_t w = area->x2 - area->x1 + 1;
 8027c3e:	1a9b      	subs	r3, r3, r2
	uint16_t h = area->y2 - area->y1 + 1;
 8027c40:	884a      	ldrh	r2, [r1, #2]
{
 8027c42:	4680      	mov	r8, r0
 8027c44:	460c      	mov	r4, r1
	uint16_t h = area->y2 - area->y1 + 1;
 8027c46:	1ab6      	subs	r6, r6, r2
		(struct lvgl_disp_data *)disp_drv->user_data;
	const struct device *display_dev = data->display_dev;
	struct display_buffer_descriptor desc;
	const bool is_epd = data->cap.screen_info & SCREEN_INFO_EPD;
 8027c48:	68fa      	ldr	r2, [r7, #12]
	uint16_t w = area->x2 - area->x1 + 1;
 8027c4a:	fa1f f983 	uxth.w	r9, r3
	const struct device *display_dev = data->display_dev;
 8027c4e:	683d      	ldr	r5, [r7, #0]
	const bool is_epd = data->cap.screen_info & SCREEN_INFO_EPD;
 8027c50:	f002 0a04 	and.w	sl, r2, #4
	uint16_t h = area->y2 - area->y1 + 1;
 8027c54:	b2b6      	uxth	r6, r6
	const bool is_last = lv_disp_flush_is_last(disp_drv);
 8027c56:	f7fc fa3b 	bl	80240d0 <lv_disp_flush_is_last>
 8027c5a:	9003      	str	r0, [sp, #12]

	if (is_epd && !data->blanking_on && !is_last) {
 8027c5c:	f1ba 0f00 	cmp.w	sl, #0
 8027c60:	d008      	beq.n	8027c74 <lvgl_flush_cb_mono+0x4a>
 8027c62:	7d3a      	ldrb	r2, [r7, #20]
 8027c64:	b932      	cbnz	r2, 8027c74 <lvgl_flush_cb_mono+0x4a>
 8027c66:	b928      	cbnz	r0, 8027c74 <lvgl_flush_cb_mono+0x4a>
	return api->blanking_on(dev);
 8027c68:	68aa      	ldr	r2, [r5, #8]
 8027c6a:	4628      	mov	r0, r5
 8027c6c:	6812      	ldr	r2, [r2, #0]
 8027c6e:	4790      	blx	r2
		 * display. This prevents updates and the associated
		 * flicker if the screen is rendered in multiple
		 * steps.
		 */
		display_blanking_on(display_dev);
		data->blanking_on = true;
 8027c70:	2201      	movs	r2, #1
 8027c72:	753a      	strb	r2, [r7, #20]
	}

	desc.buf_size = (w * h)/8U;
 8027c74:	fb06 f209 	mul.w	r2, r6, r9
	return api->write(dev, x, y, desc, buf);
 8027c78:	4628      	mov	r0, r5
	desc.width = w;
	desc.pitch = w;
 8027c7a:	f8ad 901c 	strh.w	r9, [sp, #28]
	desc.buf_size = (w * h)/8U;
 8027c7e:	08d2      	lsrs	r2, r2, #3
 8027c80:	68ab      	ldr	r3, [r5, #8]
	desc.height = h;
 8027c82:	f8ad 601a 	strh.w	r6, [sp, #26]
 8027c86:	f8cd b000 	str.w	fp, [sp]
	desc.buf_size = (w * h)/8U;
 8027c8a:	9205      	str	r2, [sp, #20]
 8027c8c:	689e      	ldr	r6, [r3, #8]
 8027c8e:	ab05      	add	r3, sp, #20
 8027c90:	8862      	ldrh	r2, [r4, #2]
 8027c92:	8821      	ldrh	r1, [r4, #0]
	desc.width = w;
 8027c94:	f8ad 9018 	strh.w	r9, [sp, #24]
 8027c98:	47b0      	blx	r6
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);
	if (data->cap.screen_info & SCREEN_INFO_DOUBLE_BUFFER) {
 8027c9a:	68fb      	ldr	r3, [r7, #12]
 8027c9c:	071b      	lsls	r3, r3, #28
 8027c9e:	d508      	bpl.n	8027cb2 <lvgl_flush_cb_mono+0x88>
 8027ca0:	68ab      	ldr	r3, [r5, #8]
 8027ca2:	4628      	mov	r0, r5
 8027ca4:	f8cd b000 	str.w	fp, [sp]
 8027ca8:	689e      	ldr	r6, [r3, #8]
 8027caa:	ab05      	add	r3, sp, #20
 8027cac:	8862      	ldrh	r2, [r4, #2]
 8027cae:	8821      	ldrh	r1, [r4, #0]
 8027cb0:	47b0      	blx	r6
		display_write(display_dev, area->x1, area->y1, &desc,
				(void *) color_p);
	}

	if (is_epd && is_last && data->blanking_on) {
 8027cb2:	f1ba 0f00 	cmp.w	sl, #0
 8027cb6:	d009      	beq.n	8027ccc <lvgl_flush_cb_mono+0xa2>
 8027cb8:	9b03      	ldr	r3, [sp, #12]
 8027cba:	b13b      	cbz	r3, 8027ccc <lvgl_flush_cb_mono+0xa2>
 8027cbc:	7d3b      	ldrb	r3, [r7, #20]
 8027cbe:	b12b      	cbz	r3, 8027ccc <lvgl_flush_cb_mono+0xa2>
	return api->blanking_off(dev);
 8027cc0:	68ab      	ldr	r3, [r5, #8]
 8027cc2:	4628      	mov	r0, r5
 8027cc4:	685b      	ldr	r3, [r3, #4]
 8027cc6:	4798      	blx	r3
		/*
		 * The entire screen has now been rendered. Update the
		 * display by disabling blanking.
		 */
		display_blanking_off(display_dev);
		data->blanking_on = false;
 8027cc8:	2300      	movs	r3, #0
 8027cca:	753b      	strb	r3, [r7, #20]
	}

	lv_disp_flush_ready(disp_drv);
 8027ccc:	4640      	mov	r0, r8
 8027cce:	f7fc f9f9 	bl	80240c4 <lv_disp_flush_ready>
}
 8027cd2:	b009      	add	sp, #36	; 0x24
 8027cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027cd8 <lvgl_set_px_cb_mono>:


void lvgl_set_px_cb_mono(lv_disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
 8027cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lvgl_disp_data *data =
 8027cda:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
 8027cdc:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
		(struct lvgl_disp_data *)disp_drv->user_data;
	uint8_t *buf_xy;
	uint8_t bit;

	if (data->cap.screen_info & SCREEN_INFO_MONO_VTILED) {
 8027ce0:	68c6      	ldr	r6, [r0, #12]
 8027ce2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
		buf_xy = buf + x + y/8 * buf_w;

		if (data->cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
 8027ce6:	f006 0702 	and.w	r7, r6, #2
	if (data->cap.screen_info & SCREEN_INFO_MONO_VTILED) {
 8027cea:	07f6      	lsls	r6, r6, #31
 8027cec:	d51f      	bpl.n	8027d2e <lvgl_set_px_cb_mono+0x56>
		buf_xy = buf + x + y/8 * buf_w;
 8027cee:	2c00      	cmp	r4, #0
 8027cf0:	4626      	mov	r6, r4
 8027cf2:	bfb8      	it	lt
 8027cf4:	1de6      	addlt	r6, r4, #7
 8027cf6:	10f6      	asrs	r6, r6, #3
 8027cf8:	fb16 3202 	smlabb	r2, r6, r2, r3
			bit = 7 - y%8;
 8027cfc:	4263      	negs	r3, r4
 8027cfe:	f004 0407 	and.w	r4, r4, #7
 8027d02:	f003 0307 	and.w	r3, r3, #7
		buf_xy = buf + x + y/8 * buf_w;
 8027d06:	4411      	add	r1, r2
			bit = 7 - y%8;
 8027d08:	bf58      	it	pl
 8027d0a:	425c      	negpl	r4, r3
 8027d0c:	b2e3      	uxtb	r3, r4
			bit = y%8;
		}
	} else {
		buf_xy = buf + x/8 + y * buf_w/8;

		if (data->cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
 8027d0e:	b117      	cbz	r7, 8027d16 <lvgl_set_px_cb_mono+0x3e>
			bit = 7 - x%8;
 8027d10:	f1c3 0307 	rsb	r3, r3, #7
 8027d14:	b2db      	uxtb	r3, r3
		}
	}

	if (data->cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
		if (color.full == 0) {
			*buf_xy &= ~BIT(bit);
 8027d16:	2401      	movs	r4, #1
	if (data->cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
 8027d18:	7c00      	ldrb	r0, [r0, #16]
			*buf_xy &= ~BIT(bit);
 8027d1a:	780a      	ldrb	r2, [r1, #0]
 8027d1c:	fa04 f303 	lsl.w	r3, r4, r3
	if (data->cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
 8027d20:	2804      	cmp	r0, #4
			*buf_xy &= ~BIT(bit);
 8027d22:	b2db      	uxtb	r3, r3
	if (data->cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
 8027d24:	d118      	bne.n	8027d58 <lvgl_set_px_cb_mono+0x80>
		if (color.full == 0) {
 8027d26:	b9cd      	cbnz	r5, 8027d5c <lvgl_set_px_cb_mono+0x84>
		}
	} else {
		if (color.full == 0) {
			*buf_xy |= BIT(bit);
		} else {
			*buf_xy &= ~BIT(bit);
 8027d28:	ea22 0303 	bic.w	r3, r2, r3
 8027d2c:	e017      	b.n	8027d5e <lvgl_set_px_cb_mono+0x86>
		buf_xy = buf + x/8 + y * buf_w/8;
 8027d2e:	4354      	muls	r4, r2
 8027d30:	461a      	mov	r2, r3
 8027d32:	bf48      	it	mi
 8027d34:	3407      	addmi	r4, #7
 8027d36:	2b00      	cmp	r3, #0
 8027d38:	ea4f 04e4 	mov.w	r4, r4, asr #3
 8027d3c:	bfb8      	it	lt
 8027d3e:	1dda      	addlt	r2, r3, #7
 8027d40:	eb04 04e2 	add.w	r4, r4, r2, asr #3
			bit = 7 - x%8;
 8027d44:	425a      	negs	r2, r3
 8027d46:	f003 0307 	and.w	r3, r3, #7
 8027d4a:	f002 0207 	and.w	r2, r2, #7
		buf_xy = buf + x/8 + y * buf_w/8;
 8027d4e:	4421      	add	r1, r4
			bit = 7 - x%8;
 8027d50:	bf58      	it	pl
 8027d52:	4253      	negpl	r3, r2
 8027d54:	b2db      	uxtb	r3, r3
 8027d56:	e7da      	b.n	8027d0e <lvgl_set_px_cb_mono+0x36>
		if (color.full == 0) {
 8027d58:	2d00      	cmp	r5, #0
 8027d5a:	d1e5      	bne.n	8027d28 <lvgl_set_px_cb_mono+0x50>
			*buf_xy |= BIT(bit);
 8027d5c:	4313      	orrs	r3, r2
			*buf_xy |= BIT(bit);
 8027d5e:	700b      	strb	r3, [r1, #0]
		}
	}
}
 8027d60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027d62 <lvgl_rounder_cb_mono>:

void lvgl_rounder_cb_mono(lv_disp_drv_t *disp_drv,
		lv_area_t *area)
{
	struct lvgl_disp_data *data =
 8027d62:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
		(struct lvgl_disp_data *)disp_drv->user_data;

	if (data->cap.screen_info & SCREEN_INFO_X_ALIGNMENT_WIDTH) {
 8027d64:	68d3      	ldr	r3, [r2, #12]
 8027d66:	06d8      	lsls	r0, r3, #27
 8027d68:	d505      	bpl.n	8027d76 <lvgl_rounder_cb_mono+0x14>
		area->x1 = 0;
 8027d6a:	2300      	movs	r3, #0
 8027d6c:	800b      	strh	r3, [r1, #0]
		area->x2 = data->cap.x_resolution - 1;
 8027d6e:	8893      	ldrh	r3, [r2, #4]
 8027d70:	3b01      	subs	r3, #1
		if (data->cap.screen_info & SCREEN_INFO_MONO_VTILED) {
			area->y1 &= ~0x7;
			area->y2 |= 0x7;
		} else {
			area->x1 &= ~0x7;
			area->x2 |= 0x7;
 8027d72:	808b      	strh	r3, [r1, #4]
		}
	}
}
 8027d74:	4770      	bx	lr
		if (data->cap.screen_info & SCREEN_INFO_MONO_VTILED) {
 8027d76:	07db      	lsls	r3, r3, #31
 8027d78:	d508      	bpl.n	8027d8c <lvgl_rounder_cb_mono+0x2a>
			area->y1 &= ~0x7;
 8027d7a:	884b      	ldrh	r3, [r1, #2]
 8027d7c:	f023 0307 	bic.w	r3, r3, #7
 8027d80:	804b      	strh	r3, [r1, #2]
			area->y2 |= 0x7;
 8027d82:	88cb      	ldrh	r3, [r1, #6]
 8027d84:	f043 0307 	orr.w	r3, r3, #7
 8027d88:	80cb      	strh	r3, [r1, #6]
 8027d8a:	4770      	bx	lr
			area->x1 &= ~0x7;
 8027d8c:	880b      	ldrh	r3, [r1, #0]
 8027d8e:	f023 0307 	bic.w	r3, r3, #7
 8027d92:	800b      	strh	r3, [r1, #0]
			area->x2 |= 0x7;
 8027d94:	888b      	ldrh	r3, [r1, #4]
 8027d96:	f043 0307 	orr.w	r3, r3, #7
 8027d9a:	e7ea      	b.n	8027d72 <lvgl_rounder_cb_mono+0x10>

08027d9c <lvgl_flush_cb_16bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_16bit(lv_disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
 8027d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027d9e:	460c      	mov	r4, r1
	struct lvgl_disp_data *data =
		(struct lvgl_disp_data *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
 8027da0:	8809      	ldrh	r1, [r1, #0]
{
 8027da2:	b087      	sub	sp, #28
 8027da4:	4605      	mov	r5, r0
	uint16_t h = area->y2 - area->y1 + 1;
 8027da6:	8867      	ldrh	r7, [r4, #2]
	uint16_t w = area->x2 - area->x1 + 1;
 8027da8:	88a3      	ldrh	r3, [r4, #4]
	uint16_t h = area->y2 - area->y1 + 1;
 8027daa:	88e4      	ldrh	r4, [r4, #6]
	uint16_t w = area->x2 - area->x1 + 1;
 8027dac:	3301      	adds	r3, #1
	struct lvgl_disp_data *data =
 8027dae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	uint16_t h = area->y2 - area->y1 + 1;
 8027db0:	3401      	adds	r4, #1
	uint16_t w = area->x2 - area->x1 + 1;
 8027db2:	1a5b      	subs	r3, r3, r1
	uint16_t h = area->y2 - area->y1 + 1;
 8027db4:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
 8027db6:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
 8027db8:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 2U * h;
	desc.width = w;
	desc.pitch = w;
 8027dba:	f8ad 3014 	strh.w	r3, [sp, #20]
	desc.buf_size = w * 2U * h;
 8027dbe:	fb04 f603 	mul.w	r6, r4, r3
	desc.width = w;
 8027dc2:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.buf_size = w * 2U * h;
 8027dc6:	0076      	lsls	r6, r6, #1
	desc.height = h;
 8027dc8:	f8ad 4012 	strh.w	r4, [sp, #18]
	desc.buf_size = w * 2U * h;
 8027dcc:	9603      	str	r6, [sp, #12]
	display_write(data->display_dev, area->x1, area->y1, &desc,
 8027dce:	6800      	ldr	r0, [r0, #0]
	return api->write(dev, x, y, desc, buf);
 8027dd0:	6883      	ldr	r3, [r0, #8]
 8027dd2:	9200      	str	r2, [sp, #0]
 8027dd4:	463a      	mov	r2, r7
 8027dd6:	689c      	ldr	r4, [r3, #8]
 8027dd8:	ab03      	add	r3, sp, #12
 8027dda:	47a0      	blx	r4
		      (void *) color_p);

	lv_disp_flush_ready(disp_drv);
 8027ddc:	4628      	mov	r0, r5
 8027dde:	f7fc f971 	bl	80240c4 <lv_disp_flush_ready>
}
 8027de2:	b007      	add	sp, #28
 8027de4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027de6 <lvgl_flush_cb_24bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_24bit(lv_disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
 8027de6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027de8:	460c      	mov	r4, r1
	struct lvgl_disp_data *data =
		(struct lvgl_disp_data *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
 8027dea:	8809      	ldrh	r1, [r1, #0]
{
 8027dec:	b087      	sub	sp, #28
 8027dee:	4605      	mov	r5, r0
	uint16_t h = area->y2 - area->y1 + 1;
 8027df0:	8867      	ldrh	r7, [r4, #2]
	uint16_t w = area->x2 - area->x1 + 1;
 8027df2:	88a3      	ldrh	r3, [r4, #4]
	uint16_t h = area->y2 - area->y1 + 1;
 8027df4:	88e4      	ldrh	r4, [r4, #6]
	uint16_t w = area->x2 - area->x1 + 1;
 8027df6:	3301      	adds	r3, #1
	struct lvgl_disp_data *data =
 8027df8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	uint16_t h = area->y2 - area->y1 + 1;
 8027dfa:	3401      	adds	r4, #1
	uint16_t w = area->x2 - area->x1 + 1;
 8027dfc:	1a5b      	subs	r3, r3, r1
	uint16_t h = area->y2 - area->y1 + 1;
 8027dfe:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
 8027e00:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
 8027e02:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 3U * h;
	desc.width = w;
	desc.pitch = w;
 8027e04:	f8ad 3014 	strh.w	r3, [sp, #20]
	desc.buf_size = w * 3U * h;
 8027e08:	fb04 f603 	mul.w	r6, r4, r3
	desc.width = w;
 8027e0c:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.buf_size = w * 3U * h;
 8027e10:	eb06 0646 	add.w	r6, r6, r6, lsl #1
	desc.height = h;
 8027e14:	f8ad 4012 	strh.w	r4, [sp, #18]
	desc.buf_size = w * 3U * h;
 8027e18:	9603      	str	r6, [sp, #12]
	display_write(data->display_dev, area->x1, area->y1, &desc,
 8027e1a:	6800      	ldr	r0, [r0, #0]
 8027e1c:	6883      	ldr	r3, [r0, #8]
 8027e1e:	9200      	str	r2, [sp, #0]
 8027e20:	463a      	mov	r2, r7
 8027e22:	689c      	ldr	r4, [r3, #8]
 8027e24:	ab03      	add	r3, sp, #12
 8027e26:	47a0      	blx	r4
		      (void *) color_p);

	lv_disp_flush_ready(disp_drv);
 8027e28:	4628      	mov	r0, r5
 8027e2a:	f7fc f94b 	bl	80240c4 <lv_disp_flush_ready>
}
 8027e2e:	b007      	add	sp, #28
 8027e30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027e32 <lvgl_set_px_cb_24bit>:

void lvgl_set_px_cb_24bit(lv_disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
 8027e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027e34:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8027e38:	f240 1707 	movw	r7, #263	; 0x107
	uint8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
 8027e3c:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8027e40:	f3c0 1645 	ubfx	r6, r0, #5, #6
 8027e44:	fb04 3302 	mla	r3, r4, r2, r3
 8027e48:	f000 021f 	and.w	r2, r0, #31
 8027e4c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8027e50:	2400      	movs	r4, #0
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8027e52:	437a      	muls	r2, r7
 8027e54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8027e58:	4378      	muls	r0, r7
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8027e5a:	3207      	adds	r2, #7
 8027e5c:	18cd      	adds	r5, r1, r3
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8027e5e:	3007      	adds	r0, #7
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8027e60:	1152      	asrs	r2, r2, #5
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8027e62:	1140      	asrs	r0, r0, #5
 8027e64:	f360 4417 	bfi	r4, r0, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8027e68:	f240 1003 	movw	r0, #259	; 0x103
 8027e6c:	4370      	muls	r0, r6
 8027e6e:	3003      	adds	r0, #3
 8027e70:	1180      	asrs	r0, r0, #6
 8027e72:	f360 240f 	bfi	r4, r0, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8027e76:	f362 0407 	bfi	r4, r2, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 8027e7a:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
		color = lv_color_mix(color, mix_color, opa);
	}
#endif

	converted_color.full = lv_color_to32(color);
	*buf_xy = converted_color.ch.red;
 8027e7e:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8027e82:	54ca      	strb	r2, [r1, r3]
	*(buf_xy + 1) = converted_color.ch.green;
 8027e84:	f3c4 2307 	ubfx	r3, r4, #8, #8
	*(buf_xy + 2) = converted_color.ch.blue;
 8027e88:	70ac      	strb	r4, [r5, #2]
	*(buf_xy + 1) = converted_color.ch.green;
 8027e8a:	706b      	strb	r3, [r5, #1]
}
 8027e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027e8e <lv_color_to32>:
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8027e8e:	f240 1107 	movw	r1, #263	; 0x107
 8027e92:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8027e96:	2200      	movs	r2, #0
 8027e98:	434b      	muls	r3, r1
 8027e9a:	3307      	adds	r3, #7
 8027e9c:	115b      	asrs	r3, r3, #5
{
 8027e9e:	b510      	push	{r4, lr}
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8027ea0:	f363 4217 	bfi	r2, r3, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8027ea4:	f240 1403 	movw	r4, #259	; 0x103
 8027ea8:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8027eac:	4363      	muls	r3, r4
 8027eae:	3303      	adds	r3, #3
 8027eb0:	119b      	asrs	r3, r3, #6
 8027eb2:	f363 220f 	bfi	r2, r3, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8027eb6:	f000 031f 	and.w	r3, r0, #31
 8027eba:	434b      	muls	r3, r1
 8027ebc:	3307      	adds	r3, #7
 8027ebe:	115b      	asrs	r3, r3, #5
 8027ec0:	f363 0207 	bfi	r2, r3, #0, #8
}
 8027ec4:	f042 407f 	orr.w	r0, r2, #4278190080	; 0xff000000
 8027ec8:	bd10      	pop	{r4, pc}

08027eca <lvgl_flush_cb_32bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_32bit(lv_disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
 8027eca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027ecc:	460c      	mov	r4, r1
	struct lvgl_disp_data *data =
		(struct lvgl_disp_data *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
 8027ece:	8809      	ldrh	r1, [r1, #0]
{
 8027ed0:	b087      	sub	sp, #28
 8027ed2:	4605      	mov	r5, r0
	uint16_t h = area->y2 - area->y1 + 1;
 8027ed4:	8867      	ldrh	r7, [r4, #2]
	uint16_t w = area->x2 - area->x1 + 1;
 8027ed6:	88a3      	ldrh	r3, [r4, #4]
	uint16_t h = area->y2 - area->y1 + 1;
 8027ed8:	88e4      	ldrh	r4, [r4, #6]
	uint16_t w = area->x2 - area->x1 + 1;
 8027eda:	3301      	adds	r3, #1
	struct lvgl_disp_data *data =
 8027edc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	uint16_t h = area->y2 - area->y1 + 1;
 8027ede:	3401      	adds	r4, #1
	uint16_t w = area->x2 - area->x1 + 1;
 8027ee0:	1a5b      	subs	r3, r3, r1
	uint16_t h = area->y2 - area->y1 + 1;
 8027ee2:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
 8027ee4:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
 8027ee6:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 4U * h;
	desc.width = w;
	desc.pitch = w;
 8027ee8:	f8ad 3014 	strh.w	r3, [sp, #20]
	desc.buf_size = w * 4U * h;
 8027eec:	fb04 f603 	mul.w	r6, r4, r3
	desc.width = w;
 8027ef0:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.buf_size = w * 4U * h;
 8027ef4:	00b6      	lsls	r6, r6, #2
	desc.height = h;
 8027ef6:	f8ad 4012 	strh.w	r4, [sp, #18]
	desc.buf_size = w * 4U * h;
 8027efa:	9603      	str	r6, [sp, #12]
	display_write(data->display_dev, area->x1, area->y1, &desc,
 8027efc:	6800      	ldr	r0, [r0, #0]
 8027efe:	6883      	ldr	r3, [r0, #8]
 8027f00:	9200      	str	r2, [sp, #0]
 8027f02:	463a      	mov	r2, r7
 8027f04:	689c      	ldr	r4, [r3, #8]
 8027f06:	ab03      	add	r3, sp, #12
 8027f08:	47a0      	blx	r4
		      (void *) color_p);

	lv_disp_flush_ready(disp_drv);
 8027f0a:	4628      	mov	r0, r5
 8027f0c:	f7fc f8da 	bl	80240c4 <lv_disp_flush_ready>
}
 8027f10:	b007      	add	sp, #28
 8027f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027f14 <lvgl_set_px_cb_32bit>:

#ifndef CONFIG_LV_COLOR_DEPTH_32
void lvgl_set_px_cb_32bit(lv_disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
 8027f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027f16:	460d      	mov	r5, r1
	uint32_t *buf_xy = (uint32_t *)(buf + x * 4U + y * 4U * buf_w);
 8027f18:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
{
 8027f1c:	f89d 1020 	ldrb.w	r1, [sp, #32]
	uint32_t *buf_xy = (uint32_t *)(buf + x * 4U + y * 4U * buf_w);
 8027f20:	fb04 3602 	mla	r6, r4, r2, r3
{
 8027f24:	f8bd 001c 	ldrh.w	r0, [sp, #28]

	if (opa == LV_OPA_COVER) {
 8027f28:	29ff      	cmp	r1, #255	; 0xff
	uint32_t *buf_xy = (uint32_t *)(buf + x * 4U + y * 4U * buf_w);
 8027f2a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
	if (opa == LV_OPA_COVER) {
 8027f2e:	d104      	bne.n	8027f3a <lvgl_set_px_cb_32bit+0x26>
		/* Do not mix if not required */
		*buf_xy = lv_color_to32(color);
	} else {
		lv_color_t bg_color = *((lv_color_t *)buf_xy);
		*buf_xy = lv_color_to32(lv_color_mix(color, bg_color, opa));
 8027f30:	f7ff ffad 	bl	8027e8e <lv_color_to32>
		*buf_xy = lv_color_to32(color);
 8027f34:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
	}
}
 8027f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		lv_color_t bg_color = *((lv_color_t *)buf_xy);
 8027f3a:	f835 c026 	ldrh.w	ip, [r5, r6, lsl #2]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8027f3e:	f1c1 02ff 	rsb	r2, r1, #255	; 0xff
 8027f42:	f815 4026 	ldrb.w	r4, [r5, r6, lsl #2]
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8027f46:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8027f4a:	f3cc 1c45 	ubfx	ip, ip, #5, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8027f4e:	f000 0e1f 	and.w	lr, r0, #31
 8027f52:	f004 041f 	and.w	r4, r4, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8027f56:	fb02 fc0c 	mul.w	ip, r2, ip
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8027f5a:	4354      	muls	r4, r2
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8027f5c:	fb03 cc01 	mla	ip, r3, r1, ip
 8027f60:	f248 0381 	movw	r3, #32897	; 0x8081
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8027f64:	fb0e 4401 	mla	r4, lr, r1, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8027f68:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8027f6c:	3480      	adds	r4, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8027f6e:	fb03 fc0c 	mul.w	ip, r3, ip
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8027f72:	435c      	muls	r4, r3
 8027f74:	f3cc 5cc5 	ubfx	ip, ip, #23, #6
 8027f78:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 8027f7c:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8027f80:	f3c0 2cc4 	ubfx	ip, r0, #11, #5
 8027f84:	7878      	ldrb	r0, [r7, #1]
 8027f86:	08c0      	lsrs	r0, r0, #3
 8027f88:	4350      	muls	r0, r2
 8027f8a:	fb0c 0001 	mla	r0, ip, r1, r0
 8027f8e:	3080      	adds	r0, #128	; 0x80
 8027f90:	4358      	muls	r0, r3
 8027f92:	0dc0      	lsrs	r0, r0, #23
		*buf_xy = lv_color_to32(lv_color_mix(color, bg_color, opa));
 8027f94:	ea44 20c0 	orr.w	r0, r4, r0, lsl #11
 8027f98:	e7ca      	b.n	8027f30 <lvgl_set_px_cb_32bit+0x1c>

08027f9a <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		z_object_init(dev);
	}
}
 8027f9a:	4770      	bx	lr

08027f9c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8027f9c:	b140      	cbz	r0, 8027fb0 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8027f9e:	68c3      	ldr	r3, [r0, #12]
 8027fa0:	7858      	ldrb	r0, [r3, #1]
 8027fa2:	f010 0001 	ands.w	r0, r0, #1
 8027fa6:	bf1e      	ittt	ne
 8027fa8:	7818      	ldrbne	r0, [r3, #0]
 8027faa:	fab0 f080 	clzne	r0, r0
 8027fae:	0940      	lsrne	r0, r0, #5
}
 8027fb0:	4770      	bx	lr

08027fb2 <arch_system_halt>:
	__asm__ volatile(
 8027fb2:	f04f 0210 	mov.w	r2, #16
 8027fb6:	f3ef 8311 	mrs	r3, BASEPRI
 8027fba:	f382 8812 	msr	BASEPRI_MAX, r2
 8027fbe:	f3bf 8f6f 	isb	sy
	for (;;) {
 8027fc2:	e7fe      	b.n	8027fc2 <arch_system_halt+0x10>

08027fc4 <z_early_memset>:
	(void) memset(dst, c, n);
 8027fc4:	f7f2 bbac 	b.w	801a720 <memset>

08027fc8 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8027fc8:	f7f2 bb9f 	b.w	801a70a <memcpy>

08027fcc <k_is_in_isr>:
 8027fcc:	f3ef 8005 	mrs	r0, IPSR
}
 8027fd0:	3800      	subs	r0, #0
 8027fd2:	bf18      	it	ne
 8027fd4:	2001      	movne	r0, #1
 8027fd6:	4770      	bx	lr

08027fd8 <z_impl_k_thread_name_set>:
}
 8027fd8:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8027fdc:	4770      	bx	lr

08027fde <k_thread_name_get>:
}
 8027fde:	2000      	movs	r0, #0
 8027fe0:	4770      	bx	lr

08027fe2 <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8027fe2:	b508      	push	{r3, lr}
 8027fe4:	f04f 0210 	mov.w	r2, #16
 8027fe8:	f3ef 8311 	mrs	r3, BASEPRI
 8027fec:	f382 8812 	msr	BASEPRI_MAX, r2
 8027ff0:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8027ff4:	f7da f8b2 	bl	800215c <arch_cpu_idle>
 8027ff8:	e7f4      	b.n	8027fe4 <idle+0x2>

08027ffa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8027ffa:	b13a      	cbz	r2, 802800c <z_impl_k_sem_init+0x12>
 8027ffc:	428a      	cmp	r2, r1
 8027ffe:	d305      	bcc.n	802800c <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 8028000:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 8028004:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 8028008:	2000      	movs	r0, #0
 802800a:	4770      	bx	lr
		return -EINVAL;
 802800c:	f06f 0015 	mvn.w	r0, #21
}
 8028010:	4770      	bx	lr

08028012 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8028012:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8028016:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8028018:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 802801a:	2300      	movs	r3, #0
	node->prev = NULL;
 802801c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8028020:	4770      	bx	lr

08028022 <unpend_thread_no_timeout>:
{
 8028022:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8028024:	f7ff fff5 	bl	8028012 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8028028:	7b43      	ldrb	r3, [r0, #13]
 802802a:	f023 0302 	bic.w	r3, r3, #2
 802802e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8028030:	2300      	movs	r3, #0
 8028032:	6083      	str	r3, [r0, #8]
}
 8028034:	bd08      	pop	{r3, pc}

08028036 <add_to_waitq_locked>:
{
 8028036:	b538      	push	{r3, r4, r5, lr}
 8028038:	4604      	mov	r4, r0
 802803a:	460d      	mov	r5, r1
	unready_thread(thread);
 802803c:	f7f1 f9e4 	bl	8019408 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8028040:	7b63      	ldrb	r3, [r4, #13]
 8028042:	f043 0302 	orr.w	r3, r3, #2
 8028046:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8028048:	b1e5      	cbz	r5, 8028084 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
 802804a:	60a5      	str	r5, [r4, #8]
	return list->head == list;
 802804c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 802804e:	429d      	cmp	r5, r3
 8028050:	d109      	bne.n	8028066 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
 8028052:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8028054:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8028058:	601c      	str	r4, [r3, #0]
	list->tail = node;
 802805a:	606c      	str	r4, [r5, #4]
}
 802805c:	e012      	b.n	8028084 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
 802805e:	686a      	ldr	r2, [r5, #4]
 8028060:	4293      	cmp	r3, r2
 8028062:	d0f6      	beq.n	8028052 <add_to_waitq_locked+0x1c>
 8028064:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8028066:	2b00      	cmp	r3, #0
 8028068:	d0f3      	beq.n	8028052 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
 802806a:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 802806e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8028072:	428a      	cmp	r2, r1
 8028074:	d0f3      	beq.n	802805e <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8028076:	4291      	cmp	r1, r2
 8028078:	ddf1      	ble.n	802805e <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
 802807a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 802807c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8028080:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8028082:	605c      	str	r4, [r3, #4]
}
 8028084:	bd38      	pop	{r3, r4, r5, pc}

08028086 <z_ready_thread>:
{
 8028086:	b510      	push	{r4, lr}
 8028088:	f04f 0310 	mov.w	r3, #16
 802808c:	f3ef 8411 	mrs	r4, BASEPRI
 8028090:	f383 8812 	msr	BASEPRI_MAX, r3
 8028094:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8028098:	f7f1 f982 	bl	80193a0 <ready_thread>
	__asm__ volatile(
 802809c:	f384 8811 	msr	BASEPRI, r4
 80280a0:	f3bf 8f6f 	isb	sy
}
 80280a4:	bd10      	pop	{r4, pc}

080280a6 <z_unpend_thread_no_timeout>:
{
 80280a6:	b508      	push	{r3, lr}
	__asm__ volatile(
 80280a8:	f04f 0210 	mov.w	r2, #16
 80280ac:	f3ef 8111 	mrs	r1, BASEPRI
 80280b0:	f382 8812 	msr	BASEPRI_MAX, r2
 80280b4:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
 80280b8:	6883      	ldr	r3, [r0, #8]
 80280ba:	b10b      	cbz	r3, 80280c0 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
 80280bc:	f7ff ffb1 	bl	8028022 <unpend_thread_no_timeout>
	__asm__ volatile(
 80280c0:	f381 8811 	msr	BASEPRI, r1
 80280c4:	f3bf 8f6f 	isb	sy
}
 80280c8:	bd08      	pop	{r3, pc}

080280ca <z_sched_wake_thread>:
{
 80280ca:	b538      	push	{r3, r4, r5, lr}
 80280cc:	4604      	mov	r4, r0
	__asm__ volatile(
 80280ce:	f04f 0310 	mov.w	r3, #16
 80280d2:	f3ef 8511 	mrs	r5, BASEPRI
 80280d6:	f383 8812 	msr	BASEPRI_MAX, r3
 80280da:	f3bf 8f6f 	isb	sy
		if (!killed) {
 80280de:	7b43      	ldrb	r3, [r0, #13]
 80280e0:	f013 0f28 	tst.w	r3, #40	; 0x28
 80280e4:	d10b      	bne.n	80280fe <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
 80280e6:	6883      	ldr	r3, [r0, #8]
 80280e8:	b10b      	cbz	r3, 80280ee <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
 80280ea:	f7ff ff9a 	bl	8028022 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80280ee:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
 80280f0:	b951      	cbnz	r1, 8028108 <z_sched_wake_thread+0x3e>
 80280f2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
 80280f6:	4620      	mov	r0, r4
 80280f8:	7363      	strb	r3, [r4, #13]
 80280fa:	f7f1 f951 	bl	80193a0 <ready_thread>
	__asm__ volatile(
 80280fe:	f385 8811 	msr	BASEPRI, r5
 8028102:	f3bf 8f6f 	isb	sy
}
 8028106:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8028108:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
 802810c:	e7f3      	b.n	80280f6 <z_sched_wake_thread+0x2c>

0802810e <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
 802810e:	2101      	movs	r1, #1
 8028110:	3818      	subs	r0, #24
 8028112:	f7ff bfda 	b.w	80280ca <z_sched_wake_thread>

08028116 <z_unpend1_no_timeout>:
{
 8028116:	b508      	push	{r3, lr}
 8028118:	4603      	mov	r3, r0
	__asm__ volatile(
 802811a:	f04f 0210 	mov.w	r2, #16
 802811e:	f3ef 8111 	mrs	r1, BASEPRI
 8028122:	f382 8812 	msr	BASEPRI_MAX, r2
 8028126:	f3bf 8f6f 	isb	sy
	return list->head == list;
 802812a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 802812c:	4283      	cmp	r3, r0
 802812e:	d007      	beq.n	8028140 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
 8028130:	b108      	cbz	r0, 8028136 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
 8028132:	f7ff ff76 	bl	8028022 <unpend_thread_no_timeout>
	__asm__ volatile(
 8028136:	f381 8811 	msr	BASEPRI, r1
 802813a:	f3bf 8f6f 	isb	sy
}
 802813e:	bd08      	pop	{r3, pc}
 8028140:	2000      	movs	r0, #0
 8028142:	e7f8      	b.n	8028136 <z_unpend1_no_timeout+0x20>

08028144 <z_unpend_first_thread>:
{
 8028144:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8028146:	f04f 0310 	mov.w	r3, #16
 802814a:	f3ef 8511 	mrs	r5, BASEPRI
 802814e:	f383 8812 	msr	BASEPRI_MAX, r3
 8028152:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8028156:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8028158:	42a0      	cmp	r0, r4
 802815a:	d00d      	beq.n	8028178 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
 802815c:	b134      	cbz	r4, 802816c <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
 802815e:	4620      	mov	r0, r4
 8028160:	f7ff ff5f 	bl	8028022 <unpend_thread_no_timeout>
 8028164:	f104 0018 	add.w	r0, r4, #24
 8028168:	f000 f81e 	bl	80281a8 <z_abort_timeout>
	__asm__ volatile(
 802816c:	f385 8811 	msr	BASEPRI, r5
 8028170:	f3bf 8f6f 	isb	sy
}
 8028174:	4620      	mov	r0, r4
 8028176:	bd38      	pop	{r3, r4, r5, pc}
 8028178:	2400      	movs	r4, #0
 802817a:	e7f7      	b.n	802816c <z_unpend_first_thread+0x28>

0802817c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 802817c:	4603      	mov	r3, r0
 802817e:	b920      	cbnz	r0, 802818a <z_reschedule_irqlock+0xe>
 8028180:	f3ef 8205 	mrs	r2, IPSR
 8028184:	b90a      	cbnz	r2, 802818a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8028186:	f7da b8a9 	b.w	80022dc <arch_swap>
 802818a:	f383 8811 	msr	BASEPRI, r3
 802818e:	f3bf 8f6f 	isb	sy
}
 8028192:	4770      	bx	lr

08028194 <z_reschedule_unlocked>:
	__asm__ volatile(
 8028194:	f04f 0310 	mov.w	r3, #16
 8028198:	f3ef 8011 	mrs	r0, BASEPRI
 802819c:	f383 8812 	msr	BASEPRI_MAX, r3
 80281a0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80281a4:	f7ff bfea 	b.w	802817c <z_reschedule_irqlock>

080281a8 <z_abort_timeout>:
{
 80281a8:	b510      	push	{r4, lr}
 80281aa:	f04f 0210 	mov.w	r2, #16
 80281ae:	f3ef 8411 	mrs	r4, BASEPRI
 80281b2:	f382 8812 	msr	BASEPRI_MAX, r2
 80281b6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80281ba:	6803      	ldr	r3, [r0, #0]
 80281bc:	b13b      	cbz	r3, 80281ce <z_abort_timeout+0x26>
			remove_timeout(to);
 80281be:	f7f1 fb8b 	bl	80198d8 <remove_timeout>
			ret = 0;
 80281c2:	2000      	movs	r0, #0
	__asm__ volatile(
 80281c4:	f384 8811 	msr	BASEPRI, r4
 80281c8:	f3bf 8f6f 	isb	sy
}
 80281cc:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80281ce:	f06f 0015 	mvn.w	r0, #21
 80281d2:	e7f7      	b.n	80281c4 <z_abort_timeout+0x1c>

080281d4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 80281d4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 80281d6:	f7f1 fc7d 	bl	8019ad4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 80281da:	bd08      	pop	{r3, pc}

080281dc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
 80281dc:	f7f1 bc7a 	b.w	8019ad4 <sys_clock_tick_get>

080281e0 <k_timer_init>:
	timer->status = 0U;
 80281e0:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 80281e2:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 80281e6:	f100 0218 	add.w	r2, r0, #24
	timer->status = 0U;
 80281ea:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 80281ec:	6343      	str	r3, [r0, #52]	; 0x34
	list->tail = (sys_dnode_t *)list;
 80281ee:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 80281f2:	e9c0 3300 	strd	r3, r3, [r0]
}
 80281f6:	4770      	bx	lr

080281f8 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 80281f8:	b510      	push	{r4, lr}
 80281fa:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
 80281fc:	f7ff ffd4 	bl	80281a8 <z_abort_timeout>

	if (inactive) {
 8028200:	b9b0      	cbnz	r0, 8028230 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 8028202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028204:	b10b      	cbz	r3, 802820a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8028206:	4620      	mov	r0, r4
 8028208:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 802820a:	f104 0018 	add.w	r0, r4, #24
 802820e:	f7ff ff82 	bl	8028116 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 8028212:	b168      	cbz	r0, 8028230 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 8028214:	f7ff ff37 	bl	8028086 <z_ready_thread>
	__asm__ volatile(
 8028218:	f04f 0310 	mov.w	r3, #16
 802821c:	f3ef 8011 	mrs	r0, BASEPRI
 8028220:	f383 8812 	msr	BASEPRI_MAX, r3
 8028224:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 8028228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802822c:	f7ff bfa6 	b.w	802817c <z_reschedule_irqlock>
 8028230:	bd10      	pop	{r4, pc}

08028232 <k_heap_init>:
{
 8028232:	b410      	push	{r4}
 8028234:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 8028238:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 802823c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 802823e:	f7f1 be7b 	b.w	8019f38 <sys_heap_init>
	...
